["```cs\ndotnet new web\n```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddControllers();\n    var app = builder.Build();\n    app.UseRouting();\n    app.MapControllers();\n    app.Run();\n    ```", "```cs\n    using System.Diagnostics.Metrics;\n    namespace Chapter16;\n    public static class Metrics\n    {\n        public static readonly Meter Meter =\n            new(\"Chapter16\");\n    }\n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc;\n    namespace Chapter16;\n    [Route(\"/api/employees\")]\n    public class EmployeesController : Controller\n    {\n        [HttpGet]\n        public IActionResult Register()\n        {\n            return Ok();\n        }\n    }\n    ```", "```cs\n    using System.Diagnostics;\n    using System.Diagnostics.Metrics;\n    ```", "```cs\n    static Counter<int> _registeredEmployees =\n      Metrics.Meter.CreateCounter<int>(\"Registered\n        Employees\", \"# of registered employees\");\n    ```", "```cs\n    [HttpGet]\n    public IActionResult Register()\n    {\n        var now = DateTimeOffset.UtcNow;\n        var tags = new TagList(new ReadOnlySpan\n           <KeyValuePair<string, object?>>(new\n              KeyValuePair<string, object?>[]\n        {\n            new(\"Year\", now.Year),\n            new(\"Month\", now.Month),\n            new(\"Day\", now.Day),\n        }));\n        _registeredEmployees.Add(1, tags);\n        return Ok();\n    }\n    ```", "```cs\n    dotnet tool install --global dotnet-counters\n    ```", "```cs\n    dotnet run\n    ```", "```cs\nBuilding...\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5000\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\nContent root path: /Users/einari/Projects/Metaprogramming-in-C/Chapter16\n```", "```cs\n    dotnet counters monitor --name Chapter16 --counters\n    Chapter16\n    ```", "```cs\nPress p to pause, r to resume, q to quit.\n    Status: Running\n```", "```cs\nPress p to pause, r to resume, q to quit.\n    Status: Running\n[Chapter16]\n    RegisteredEmployees (# of registered employees / 1\n      sec)\nDay=1,Month=5,Year=2023   0\n```", "```cs\n    namespace Fundamentals.Metrics;\n    [AttributeUsage(AttributeTargets.Method)]\n    public sealed class CounterAttribute<T> : Attribute\n    {\n        public CounterAttribute(string name, string\n            description)\n        {\n            Name = name;\n            Description = description;\n        }\n        public string Name { get; }\n        public string Description { get; }\n    }\n    ```", "```cs\n    using System.Diagnostics.Metrics;\n    namespace Fundamentals.Metrics;\n    public static class GlobalMetrics\n    {\n        public static Meter Meter = new(\"Global\");\n    }\n    ```", "```cs\n    GlobalMetrics.Meter = new Meter(\"Chapter16\");\n    ```", "```cs\n    using System.Diagnostics.Metrics;\n    using Fundamentals.Metrics;\n    namespace Chapter16;\n    public static partial class EmployeesControllerMetrics\n    {\n        [Counter<int>(\"RegisteredEmployees\", \"# of\n            registered employees\")]\n        public static partial void\n            RegisteredEmployees(DateOnly date);\n    }\n    ```", "```cs\n<PackageReference Include=\"handlebars.net\" Version=\"2.1.4\"\n  GeneratePathProperty=\"true\" PrivateAssets=\"all\" />\n```", "```cs\n<PropertyGroup>\n    <GetTargetPathDependsOn>$(GetTargetPathDependsOn);\n       GetDependencyTargetPaths</GetTargetPathDependsOn>\n</PropertyGroup>\n<Target Name=\"GetDependencyTargetPaths\">\n    <ItemGroup>\n        <TargetPathWithTargetPlatformMoniker\n        Include=\"$(PKGHandlebars_Net)\\lib\\netstandard2.0\\\n        Handlebars.dll\" IncludeRuntimeDependency=\"false\" />\n    </ItemGroup>\n</Target>\n```", "```cs\nnamespace Roslyn.Extensions.Metrics;\npublic class MetricsTemplateData\n{\n    public string Namespace { get; set; } = string.Empty;\n    public string ClassName { get; set; } = string.Empty;\n    public IEnumerable<CounterTemplateData> Counters { get;\n       set; } = Enumerable.Empty<CounterTemplateData>();\n}\n```", "```cs\nnamespace Roslyn.Extensions.Metrics;\npublic class CounterTemplateData\n{\n    public string Type { get; set; } = string.Empty;\n    public string MethodName { get; set; } = string.Empty;\n    public string Name { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n    public IEnumerable<CounterTagTemplateData> Tags { get;\n      set; } = Enumerable.Empty<CounterTagTemplateData>();\n}\n```", "```cs\nnamespace Roslyn.Extensions.Metrics;\npublic class CounterTagTemplateData\n{\n    public string Type { get; set; } = string.Empty;\n    public string Name { get; set; } = string.Empty;\n}\n```", "```cs\nusing System.Diagnostics;\nusing System.Diagnostics.Metrics;\nusing Fundamentals.Metrics;\nnamespace {{Namespace}};\n#nullable enable\npublic static partial class {{ClassName}}\n{\n    {{#Counters}}\n    static readonly Counter<{{Type}}> {{MethodName}}Metric\n      = GlobalMetrics.Meter.CreateCounter<{{Type}}>\n         (\"{{Name}}\", \"{{Description}}\");\n    {{/Counters}}\n    {{#Counters}}\n    public static partial void {{MethodName}}({{#Tags}}\n      {{Type}} {{Name}}{{#unless @last}}, {{/unless}}\n          {{/Tags}})\n    {\n        var tags = new TagList(new ReadOnlySpan\n          <KeyValuePair<string, object?>>(new KeyValuePair\n             <string, object?>[]\n        {\n            {{#Tags}}\n            new(\"{{Name}}\", {{name}}){{#unless @last}},\n              {{/unless}}\n            {{/Tags}}\n        }));\n        {{MethodName}}Metric.Add(1, tags);\n    }\n    {{/Counters}}\n}\n```", "```cs\nusing System.Diagnostics;\nusing System.Diagnostics.Metrics;\nusing Fundamentals.Metrics;\nnamespace Chapter16;\n#nullable enable\npublic static partial class EmployeesControllerMetrics\n{\n    static readonly Counter<int> RegisteredEmployeesMetric\n      = GlobalMetrics.Meter.CreateCounter<int>\n      (\"RegisteredEmployees\", \"# of registered employees\");\n    public static partial void RegisteredEmployees(DateOnly\n      date)\n    {\n        var tags = new TagList(new ReadOnlySpan\n        <KeyValuePair<string, object?>>(new KeyValuePair\n        <string, object?>[]\n        {\n            new(\"date\", date)\n        }));\n        RegisteredEmployeesMetric.Add(1, tags);\n    }\n}\n```", "```cs\n<ItemGroup>\n    <EmbeddedResource Include=\"$(MSBuildThisFileDirectory)\n      /Templates/**/*.hbs\" />\n</ItemGroup>\n```", "```cs\nusing HandlebarsDotNet;\nnamespace Roslyn.Extensions.Templates;\npublic static class TemplateTypes\n{\n    public static readonly HandlebarsTemplate<object,\n      object> Metrics = Handlebars.Compile\n        (GetTemplate(\"Metrics\"));\n    static string GetTemplate(string name)\n    {\n        var rootType = typeof(TemplateTypes);\n        var stream = rootType.Assembly.GetManifest\n        ResourceStream($\"{rootType.Namespace}.{name}.hbs\");\n        if (stream != default)\n        {\n            using var reader = new StreamReader(stream);\n            return reader.ReadToEnd();\n        }\n        return string.Empty;\n    }\n}\n```", "```cs\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nnamespace Roslyn.Extensions.Metrics;\npublic class MetricsSyntaxReceiver : ISyntaxReceiver\n{\n    readonly List<ClassDeclarationSyntax> _candidates =\n      new();\n    internal IEnumerable<ClassDeclarationSyntax> Candidates\n      => _candidates;\n    public void OnVisitSyntaxNode(SyntaxNode syntaxNode)\n    {\n        if (syntaxNode is not ClassDeclarationSyntax\n          classSyntax) return;\n        if (classSyntax.Modifiers.Any(modifier =>\n          modifier.IsKind(SyntaxKind.PartialKeyword)) &&\n            classSyntax.Modifiers.Any(modifier =>\n              modifier.IsKind(SyntaxKind.StaticKeyword)))\n        {\n            if (classSyntax.Members.Any(member =>\n             member.IsKind(SyntaxKind.MethodDeclaration) &&\n                member.Modifiers.Any(modifier =>\n                  modifier.IsKind\n                    (SyntaxKind.PartialKeyword)) &&\n                member.Modifiers.Any(modifier => modifier\n                  .IsKind(SyntaxKind.StaticKeyword))))\n            {\n                _candidates.Add(classSyntax);\n            }\n        }\n    }\n}\n```", "```cs\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Roslyn.Extensions.Templates;\nnamespace Roslyn.Extensions.Metrics;\n[Generator]\npublic class MetricsSourceGenerator : ISourceGenerator\n{\n    public void Execute(GeneratorExecutionContext context)\n    {\n    }\n    public void Initialize(GeneratorInitializationContext\n      context)\n    {\n        context.RegisterForSyntaxNotifications(() => new\n          MetricsSyntaxReceiver());\n    }\n}\n```", "```cs\nif (context.SyntaxReceiver is not MetricsSyntaxReceiver\n  receiver) return;\nvar counterAttribute = context.Compilation\n    .GetTypeByMetadataName(\"Fundamentals\n      .Metrics.CounterAttribute`1\");\nforeach (var candidate in receiver.Candidates)\n{\n    var templateData = new MetricsTemplateData\n    {\n        Namespace = (candidate.Parent as\n          BaseNamespaceDeclarationSyntax)!.Name.ToString(),\n        ClassName = candidate.Identifier.ValueText\n    };\n    var semanticModel = context.Compilation\n      .GetSemanticModel(candidate.SyntaxTree);\n    foreach (var member in candidate.Members)\n    {\n        if (member is not MethodDeclarationSyntax method)\n          continue;\n        var methodSymbol = semanticModel\n          .GetDeclaredSymbol(method);\n        if (methodSymbol is not null)\n        {\n            var attributes = methodSymbol.GetAttributes();\n            var attribute = attributes.FirstOrDefault(_ =>\n            SymbolEqualityComparer.Default.Equals\n             (_.AttributeClass?.OriginalDefinition,\n             counterAttribute));\n            if (attribute is not null)\n            {\n                // Generate\n            }\n        }\n    }\n    if (templateData.Counters.Count > 0)\n    {\n        var source = TemplateTypes.Metrics(templateData);\n        context.AddSource($\"{candidate.Identifier\n          .ValueText}.g.cs\", source);\n    }\n}\n```", "```cs\nvar tags = method.ParameterList.Parameters.Select(parameter\n  => new CounterTagTemplateData\n{\n    Name = parameter.Identifier.ValueText,\n    Type = parameter.Type!.ToString()\n});\nvar type = attribute.AttributeClass!.TypeArguments[0]\n     .ToString();\nvar name = attribute.ConstructorArguments[0].Value!\n    .ToString();\nvar description = attribute.ConstructorArguments[1].Value!\n    .ToString();\ntemplateData.Counters.Add(\n        new CounterTemplateData\n        {\n            Name = name,\n            Description = description,\n            Type = type,\n            MethodName = method.Identifier.ValueText,\n            Tags = tags\n        });\n```", "```cs\n    dotnet add reference ../Fundamentals/Fundamentals.csproj\n    ```", "```cs\n    <ProjectReference Include=\"..\\Roslyn.Extensions\\\n      Roslyn.Extensions.csproj\" OutputItemType=\"Analyzer\"\n        ReferenceOutputAssembly=\"false\" />\n    ```", "```cs\n    [HttpGet]\n    public IActionResult Register()\n    {\n        EmployeesControllerMetrics.RegisteredEmployees\n          (DateOnly.FromDateTime(DateTime.UtcNow));\n        return Ok();\n    }\n    ```", "```cs\n    dotnet build\n    ```", "```cs\n    using System.Diagnostics;\n    using System.Diagnostics.Metrics;\n    using Fundamentals.Metrics;\n    namespace Chapter16;\n    #nullable enable\n    public static partial class EmployeesControllerMetrics\n    {\n        static readonly Counter<int> RegisteredEmployees\n      Metric = GlobalMetrics.Meter.CreateCounter\n        <int>(\"RegisteredEmployees\", \"# of registered\n           employees\");\n        public static partial void RegisteredEmployees\n          (DateOnly date)\n        {\n            var tags = new TagList(new ReadOnlySpan\n              <KeyValuePair<string, object?>>(new\n                KeyValuePair<string, object?>[]\n            {\n                new(\"date\", date)\n            }));\n            RegisteredEmployeesMetric.Add(1, tags);\n        }\n    }\n    ```", "```cs\n    dotnet counters monitor -n Chapter16 --counters\n    Chapter16\n    ```", "```cs\n    Press p to pause, r to resume, q to quit.\n    Status: Running\n    [Chapter16]\n        RegisteredEmployees (# of registered employees / 1\n          sec)\n            date=5/1/2023              0\n    ```", "```cs\nusing Fundamentals.Compliance.GDPR;\nnamespace Chapter16;\npublic record Employee(\n    [PersonalIdentifiableInformation(\"Needed for\n      registration\")]\n    string FirstName,\n    [PersonalIdentifiableInformation(\"Needed for\n      registration\")]\n    string LastName,\n    [PersonalIdentifiableInformation(\"Needed for uniquely\n      identifying an employee\")]\n    string SocialSecurityNumber);\n```", "```cs\n<ItemGroup>\n    <CompilerVisibleProperty Include=\"GDPRReport\"/>\n</ItemGroup>\n```", "```cs\n<Import Project=\"$(MSBuildThisFileDirectory)../\n  Roslyn.Extensions/Roslyn.Extensions.props\"/>\n```", "```cs\n<GDPRReport>$(MSBuildThisFileDirectory)GDPRReport.txt</GDPR\n  Report>\n```", "```cs\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nnamespace Roslyn.Extensions.GDPR;\npublic class GDPRSyntaxReceiver : ISyntaxReceiver\n{\n    readonly List<TypeDeclarationSyntax> _candidates =\n      new();\n    internal IEnumerable<TypeDeclarationSyntax> Candidates\n       => _candidates;\n    public void OnVisitSyntaxNode(SyntaxNode syntaxNode)\n    {\n        if (syntaxNode is not TypeDeclarationSyntax\n          typeSyntax) return;\n        _candidates.Add(typeSyntax);\n    }\n}\n```", "```cs\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nnamespace Roslyn.Extensions.GDPR;\n[Generator]\npublic class GDPRSourceGenerator : ISourceGenerator\n{\n    public void Execute(GeneratorExecutionContext context)\n    {\n        if (context.SyntaxReceiver is not\n          GDPRSyntaxReceiver receiver) return;\n        context.AnalyzerConfigOptions.GlobalOptions\n          .TryGetValue(\"build_property.GDPRReport\", out var\n            filename);\n        var writer = File.CreateText(filename);\n        writer.AutoFlush = true;\n        var piiAttribute = context.Compilation\n        .GetTypeByMetadataName(\"Fundamentals.Compliance\n        .GDPR.PersonalIdentifiableInformationAttribute\");\n    }\n    public void Initialize(GeneratorInitializationContext\n      context)\n    {\n        context.RegisterForSyntaxNotifications(() => new\n          GDPRSyntaxReceiver());\n    }\n}\n```", "```cs\nforeach (var candidate in receiver.Candidates)\n{\n    var semanticModel = context.Compilation\n      .GetSemanticModel(candidate.SyntaxTree);\n    var symbols = new List<ISymbol>();\n    if (candidate is RecordDeclarationSyntax record)\n    {\n        foreach (var parameter in record.ParameterList!\n          .Parameters)\n        {\n            var parameterSymbol = semanticModel\n              .GetDeclaredSymbol(parameter);\n            if (parameterSymbol is not null)\n            {\n                symbols.Add(parameterSymbol);\n            }\n        }\n    }\n    foreach (var member in candidate.Members)\n    {\n        if (member is not PropertyDeclarationSyntax\n          property) continue;\n        var propertySymbol = semanticModel\n          .GetDeclaredSymbol(property);\n        if (propertySymbol is not null)\n        {\n            symbols.Add(propertySymbol);\n        }\n    }\n}\n```", "```cs\nvar memberNamesAndReasons = new List<(string MemberName, string Reason)>();\nforeach (var symbol in symbols)\n{\n    var attributes = symbol.GetAttributes();\n    var attribute = attributes.FirstOrDefault(_ =>\n      SymbolEqualityComparer.Default.Equals(\n        _.AttributeClass?.OriginalDefinition,\n          piiAttribute));\n    if (attribute is not null)\n    {\n        memberNamesAndReasons.Add((symbol.Name,\n          attribute.ConstructorArguments[0].Value!\n           .ToString()));\n    }\n}\nif (memberNamesAndReasons.Count > 0)\n{\n    var @namespace = (candidate.Parent as\n      BaseNamespaceDeclarationSyntax)!.Name.ToString();\n    writer.WriteLine($\"Type: {@namespace}\n      .{candidate.Identifier.ValueText}\");\n    writer.WriteLine(\"Members:\");\n    foreach (var (memberName, reason) in\n      memberNamesAndReasons)\n    {\n        var reasonText = string.IsNullOrEmpty(reason) ? \"No\n          reason provided\" : reason;\n        writer.WriteLine($\"  {memberName}: {reasonText}\");\n    }\n    writer.WriteLine(string.Empty);\n}\n```", "```cs\ndotnet build\n```", "```cs\nType: Chapter16.Employee\nMembers:\n  FirstName: Needed for registration\n  LastName: Needed for registration\n  SocialSecurityNumber: Needed for uniquely identifying an\n    employee\n```", "```cs\nwhile (!System.Diagnostics.Debugger.IsAttached)\nThread.Sleep(10);\n```", "```cs\ndotnet clean\n```", "```cs\ndotnet build --no-incremental\n```", "```cs\ndotnet build-server shutdown\n```"]