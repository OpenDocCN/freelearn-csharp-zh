- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an Expense Tracker Using the EditForm Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most applications require some data input by the user. The Blazor WebAssembly
    framework includes a component that makes it easy to create data input forms and
    validate the data on those forms.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use the **EditForm** component and the
    various built-in input components. We will also learn how to use the built-in
    input validation components in conjunction with **Data Annotations** to validate
    the data on the form. Finally, we will learn how to use the **NavigationLock**
    component to prevent users from losing their edits if they navigate away from
    the form before they have saved their updates.
  prefs: []
  type: TYPE_NORMAL
- en: The project that weâ€™ll create in this chapter will be a travel expense tracker.
    We will use a multi-project architecture to separate the Blazor WebAssembly app
    from the ASP.NET Web API endpoints. The page used to add and edit expenses will
    use the `EditForm` component as well as many of the built-in input components.
    It will also use the built-in validation components to validate the data on the
    form. Finally, we will add a `NavigationLock` component to remind the user to
    save their data before navigating to another page.
  prefs: []
  type: TYPE_NORMAL
- en: Editing data?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The EditForm component
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: makes it effortless!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data entry form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the built-in input components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the validation components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the expense tracker project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*. You will also
    need access to a version of SQL Server. For instructions on how to install the
    free edition of SQL Server 2022, refer to *Chapter 1*, *Introduction to Blazor
    WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch12](https://packt.link/Ch12).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data entry form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters of this book, we used the standard HTML `form` element
    to collect user input. However, the Blazor WebAssembly framework provides an enhanced
    version of the standard HTML `form` element called the `EditForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `EditForm` component not only manages forms but also coordinates both validation
    and submission events. The following code shows a simple `EditForm` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the HTML that is rendered by the proceeding `EditForm` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding `EditForm` component, the `Model` property specifies the top-level
    model object for the form. The `OnValidSubmit` property specifies the callback
    that will be invoked when the form is submitted without any validation errors.
  prefs: []
  type: TYPE_NORMAL
- en: Binding a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `EditContext` property of the `EditForm` class is used to track the metadata
    about the editing process. The metadata includes the fields that have been modified
    and the current validation messages. There are two ways to assign the `EditContext`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: Assign the `Model` property of the `EditForm` class. If we use the `Model` property,
    the edit context will be automatically constructed using the model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the `EditContext` property of the `EditForm` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code shows how to render the preceding `EditForm` component using
    the `EditContext` property instead of the `Model` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: If we attempt to assign both the `Model` property and the `EditContext` property
    of an `EditForm` component, a runtime error will be generated.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three properties of the `EditForm` component that are involved with
    form submission:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnValidSubmit`: The callback that is invoked when the form is submitted and
    the `EditContext` property is valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnInvalidSubmit`: The callback that is invoked when the form is submitted
    and the `EditContext` property is invalid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnSubmit`: The callback that is invoked when the form is submitted. When we
    use this property, we need to manually trigger validation by using the Validate
    method of the `EditContext` property of the `EditForm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the `OnValidSubmit` and `OnInvalidSubmit` callbacks together or separately,
    or we can use the `OnSubmit` callback by itself. If we use the `OnSubmit` callback,
    we are responsible for performing the form validation. Otherwise, the form validation
    is performed by the `EditForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: If we set an `OnSubmit` callback, any callbacks set using `OnValidSubmit` or
    `OnInvalidSubmit` are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few built-in input components that we can use in conjunction
    with the `EditForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the built-in input components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table lists the built-in input components along with the HTML
    that they render:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Input Component | HTML Rendered |'
  prefs: []
  type: TYPE_TB
- en: '| `InputCheckbox` | `<input type="checkbox">` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputDate<TValue>` | `<input type="date">` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputFile` | `<input type="file">` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputNumber<TValue>` | `<input type="number">` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputRadio<TValue>` | `<input type="radio">` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputRadioGroup<TValue>` | Group of child `InputRadio<TValue>` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputSelect<TValue>` | `<select>` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputText` | `<input>` |'
  prefs: []
  type: TYPE_TB
- en: '| `InputTextArea` | `<textarea>` |'
  prefs: []
  type: TYPE_TB
- en: 'Table 12.1: Built-in input components'
  prefs: []
  type: TYPE_NORMAL
- en: All the built-in input components can receive and validate user inputs when
    placed within an `EditForm` element. The `EditForm` cascades its `EditContext`
    to its descendants. Also, all of the built-in input components support arbitrary
    attributes. Therefore, any attribute that does not match a component parameter
    is added to the HTML element that is rendered by the component.
  prefs: []
  type: TYPE_NORMAL
- en: InputCheckbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputCheckbox` component is for editing Boolean values. It does not allow
    binding to a nullable property.
  prefs: []
  type: TYPE_NORMAL
- en: InputDate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputDate` component is for editing date values. The supported date types
    are `DateTime` and `DateTimeOffset`. If a datatype that is not supported is entered
    into this component, the framework will create a validation error.
  prefs: []
  type: TYPE_NORMAL
- en: InputFile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputFile` component is for uploading files.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The project in this chapter does not use the `InputFile` component. For more
    information on using the `InputFile` component, refer to *Chapter 9*, *Uploading
    and Reading an Excel File*.
  prefs: []
  type: TYPE_NORMAL
- en: InputNumber
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputNumber` component is for editing numeric values. The supported numeric
    types are `Int32`, `Int64`, `Single`, `Double`, and `Decimal`. If a datatype that
    is not supported is entered into this component, the framework will create a validation
    error unless the target property is nullable. In that case, the invalid input
    will be considered `null` and the text in the input will be cleared.
  prefs: []
  type: TYPE_NORMAL
- en: InputRadio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputRadio` component is for selecting a value from a group of choices.
  prefs: []
  type: TYPE_NORMAL
- en: InputRadioGroup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputRadioGroup` component is for grouping `InputRadio` components.
  prefs: []
  type: TYPE_NORMAL
- en: InputSelect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputSelect` component is for rendering a dropdown selection. The `InputSelect`
    component includes a `ChildContent` property for rendering the content inside
    of the `select` element.
  prefs: []
  type: TYPE_NORMAL
- en: If the option you select does not have a value attribute since its value is
    null, the text content is treated as the value. This is standard HTML. However,
    when using two-way binding with Blazor, you must provide a `string.Empty` as the
    value for null values to prevent the value of the text from being returned.
  prefs: []
  type: TYPE_NORMAL
- en: InputText
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputText` component is for editing string values. The `InputText` component
    does not specify a type. This allows you to use any of the available input types
    for the HTML input element, such as `password`, `tel`, or `color`.
  prefs: []
  type: TYPE_NORMAL
- en: The default type for an HTML input element is `text`.
  prefs: []
  type: TYPE_NORMAL
- en: InputTextArea
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InputTextArea` component is for editing string values using multiline input.
  prefs: []
  type: TYPE_NORMAL
- en: By using the various built-in input components in conjunction with their parent
    `EditForm`, we can easily add an input form to a Blazor WebAssembly app.
  prefs: []
  type: TYPE_NORMAL
- en: The input data is validated both when the form is submitted and when the data
    is changed. To communicate the validation status of the input form, we can use
    the built-in validation components.
  prefs: []
  type: TYPE_NORMAL
- en: Using the validation components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Input validation is an important aspect of every application since it prevents
    users from entering invalid data. The Blazor WebAssembly framework uses data annotations
    for input validation. There are over 30 built-in Data Annotation attributes. This
    is a list of the ones that we will be using in this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Required`: This attribute specifies that a value is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Display`: This attribute specifies the string to display in error messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MaxLength`: This attribute specifies the maximum string length allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Range`: This attribute specifies the maximum and minimum values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code demonstrates the use of a few data annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, both the `Date` field and the `Amount` field are required.
    Also, the `Amount` field must be a value between 0 and 500 inclusive, or the indicated
    error message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two built-in validation components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ValidationMessage`: This component displays all the validation messages for
    the indicated field within the `EditContext`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ValidationSummary`: This component displays all the validation messages for
    all the fields within the `EditContext`. It provides a summary of the validation
    messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The location of the validation component within the page determines where it
    will be rendered. In the following example, the `ValidationMessage` is placed
    after each related input component and the `ValidationSummary` is placed after
    the **Save** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a sample `ValidationMessage` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a sample `ValidationSummary` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: An `EditForm` component can include both types of validation components. However,
    to use either type of validation component, we must add `DataAnnotationsValidator`
    to the `EditForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the results of both a `ValidationSummary` component
    and individual `ValidationMesssage` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shape  Description automatically generated with medium confidence](img/B18471_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Validation components'
  prefs: []
  type: TYPE_NORMAL
- en: The validation components make it easy to add validation to a Blazor WebAssembly
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Locking navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many times have you completed a form and forgotten to save it before navigating
    to another page? It happens to everyone. The `NavigationLock` component can be
    used to notify the user that they are about to navigate away from the current
    page and allow them to cancel that action. It does that by intercepting navigation
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a sample `NavigationLock`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NavigationLock` class includes two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConfirmExternalNavigation` â€“ gets or sets whether the user should be asked
    to confirm external navigations. The default value is `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnBeforeInternalNavigation` â€“ gets or sets the callback that is invoked when
    an internal navigation event occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a sample method that is invoked from the `OnBeforeInternalNavigation`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `IsNavigationIntercepted` method is used to determine
    whether the navigation was intercepted from a link. If it was intercepted from
    a link, a JavaScript `confirm` dialog is displayed. If the user does not confirm
    that they want to leave the page, the `PreventNavigation` method prevents the
    navigation from occurring.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on invoking JavaScript functions from .NET methods, refer
    to *Chapter 5*, *Building a Local Storage Service Using JavaScript Interoperability
    (JS Interop).*
  prefs: []
  type: TYPE_NORMAL
- en: Now letâ€™s get a quick overview of the project that we are going to build in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the expense tracker project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a project to track travel expenses. We will be
    able to view, add, and edit expenses. The expenses will be stored in a Microsoft
    SQL Server database.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the `Home` page from the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18471_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Home page of the expenses tracker'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the `Add Expense` page from the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Add Expense page of expense tracker'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 60 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ExpenseTracker` project will be created by using Microsoftâ€™s **Blazor WebAssembly
    App Empty** project template to create a hosted Blazor WebAssembly project. First,
    we will add Bootstrap and a tabbed menu. Then, we will add the classes and API
    controllers needed for our project. We will add a table to the `Home` page to
    display the current list of expenses. We will use the `EditForm` component in
    conjunction with many of the built-in input components to add and edit the expenses.
    Finally, we will add a `NavigationLock` component to prevent the user from losing
    their edits by navigating to another page.
  prefs: []
  type: TYPE_NORMAL
- en: Create the expense tracker project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the search for templates textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Blazor WebAssembly App Empty** project
    template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_12_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.4: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ExpenseTracker` in the **Project name** textbox and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.5: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `ExpenseTracker` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the `Framework` to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.6: Additional Information Dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now created a hosted **ExpenseTracker** Blazor WebAssembly project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **ExpenseTracker** solution comprises three different projects. The following
    screenshot of Visual Studioâ€™s **Solution Explorer** shows the three projects that
    are in the solution:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.7: Solution Explorer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click the **ExpenseTracker.Server** project and select the **Set as Startup
    Project** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the **ExpenseTracker** solution and set the **ExpenseTracker.Server**
    project as the startup project. Now we need to work on our UI. We will use `Bootstrap`
    to style our controls.
  prefs: []
  type: TYPE_NORMAL
- en: Install Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to install `Bootstrap` into our web app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ExpenseTracker.Client/wwwroot/css` folder and select the **Add**,
    **Client-Side Library** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Choose specific files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select only the **css** files, as shown in the following screenshot:![Graphical
    user interface, application, email  Description automatically generated](img/B18471_12_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 12.8: Add Client-Side Library dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although the preceding screenshot has version 5.2.3 of Bootstrap selected, you
    can use any version of Bootstrap 5 to complete this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `ExpenseTracker.Client/wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have installed `Bootstrap`. Now we will add the classes to store the expense
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Add the classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add both an `ExpenseType` class and an `Expense` class. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ExpenseTracker.Shared` folder and select the **Add**, **Class**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `ExpenseType`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the class public by adding the `public` modifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following properties to the `ExpenseType` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click the `ExpenseTracker.Shared` folder and select the **Add**, **Class**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `Expense`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the class public by adding the `public` modifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `using` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following properties to the `Expense` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we have used data annotations to add some simple data
    validation. `Date`, `Vendor`, `ExpenseTypeId`, and `Amount` are all required.
    The maximum length of `Vendor` is 100 characters. The display name for `ExpenseTypeId`
    is `ExpenseType`. The `Amount` of the expense is capped at 500.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Build** menu, select the **Build Solution** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now added both the `ExpenseType` class and the `Expense` class and built
    our application. Now we need to configure the ASP.NET Web API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Add the API controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add an API controller for each of the new classes. We do this as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ExpenseTracker.Server` project and select the **Add**, **New
    Folder** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Controllers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `ExpenseTracker.Server.Contollers` folder and select the **Add**,
    **Controller** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **API Controller with actions, using Entity Framework** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot of the **Add New Scaffolded Item** dialog has the
    **API Controller with actions, using Entity Framework** option highlighted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_12_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.9: Add New Scaffolded Item dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Model class** to **ExpenseType (ExpenseTracker.Shared)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Add data context** button to open the **Add Data Context** dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: Add API Controller with actions, using the Entity Framework dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Add** button to accept the default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Add Data Context dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Add** button on the **Add API Controller with actions, using Entity
    Framework** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the `ExpenseTypeController` class. Now we need to repeat the
    preceding steps to create the `ExpenseController` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click the `ExpenseTracker.Server.Controllers` folder and select the **Add**,
    **Controller** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **API Controller with actions**, **using Entity Framework** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Model class** to **Expense (ExpenseTracker.Shared)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added two new controllers to provide the API endpoints that our application
    will use. For more information on using ASP.NET Web API, refer to *Chapter 11*,
    *Building a Task Manager Using ASP.NET Web API*.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to create the SQL Server database.
  prefs: []
  type: TYPE_NORMAL
- en: Create the SQL Server database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create the SQL Server database and add a table for the expenses
    and a table for the expense types. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ExpenseTracker.Server/appsettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the connection string to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Replace the `{Server name}` placeholder with the name of your SQL Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although we are using SQL Server Express 2022, it does not matter what version
    of SQL Server you use for this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `ExpenseTracker.Server.Data/ExpenseTrackerServerContext.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `OnModelCreating` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will seed the `ExpenseType` table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Tools** menu, select the **NuGet Package Manager**, **Package Manager
    Console** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Package Manager Console**, verify that the **Default project** is set
    to **ExpenseTracker.Server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following commands in the **Package Manager Console**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding commands use `Entity Framework` `migrations` to update SQL Server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `/api/expensetypes` to the address bar and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the JSON that is returned by `ExpenseTypesController`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![A picture containing text  Description automatically generated](img/B18471_12_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.12: JSON returned by the ExpenseTypes API controller'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created a new database on SQL Server, added two tables, and populated
    one of the tables with seed data. After we finished setting up SQL Server, we
    tested that `ExpenseTypesController` works. Finally, we are ready to create a
    component to display the expenses that are stored in SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: View the expenses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a table to the **Home** page to display the list of expenses.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ExpenseTracker.Client.Pages/Index.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `h1` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code defines `expenses` as a `List<Expense>` and checks to see
    if it is null or empty. If it is null, it renders the loading message, and if
    it is empty, it renders the **None Found** message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `OnInitializedAsync` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code populates the `expenses` object by using the `GetFromJsonAsync`
    method of the `HttpClient`. For more information on the `HttpClient` refer to
    *Chapter 11*, *Building a Task Manager User ASP.NET Web API*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `table` element to the `else` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `thead` element to the `table` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `tbody` element to the `table` element after the `thead`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code loops through each of the `Expense` objects in the collection
    and displays them as rows in a table. If the expense is not yet paid, the row
    is highlighted in red by using the `table-danger` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of our application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_12_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.13: Home page of the ExpenseTracker'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added the ability to display the expenses in a table on the `Home` page.
    Next, we need to add the ability to add expenses.
  prefs: []
  type: TYPE_NORMAL
- en: Add the edit expense component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a component to enable us to add and edit expenses. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ExpenseTracker.Client.MainLayout.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup before the `main` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding markup uses `Bootstrap` to render a tabbed interface with two
    options: **Home** and **Add Expense**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the main element to the following to add some padding to the rendered
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click the `ExpenseTracker.Client.Pages` folder and select the **Add**,
    **Razor Component** option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `ExpenseEdit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the markup to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code displays `EditForm` if the component is ready. It uses the
    value of the `id` parameter to determine if the form is performing an add or an
    edit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `OnInitializedAsync` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code initializes both the `types` object and the `expense` object.
    Once they have both been initialized, the value of `ready` is set to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the `try` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code initializes the expense object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `HandleValidSubmit` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code adds new expenses by using the `PostAsJsonAsync` method and
    updates existing expenses by using the `PutAsJsonAsync` method. If the relevant
    method is successful, the user is returned to the **Home** page. Otherwise, an
    error message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: We have completed the code for this component, but `EditForm` is still empty.
    We now need to add some markup to `EditForm`.
  prefs: []
  type: TYPE_NORMAL
- en: Add the input components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add input components to the `EditForm` element. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following markup to `EditForm` to input the `Date` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to `EditForm` to input the `Vendor` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to `EditForm` to input the `Description` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to `EditForm` to input the `ExpenseTypeId` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to `EditForm` to input the `Amount` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to `EditForm` to input the `Paid` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to `EditForm` for the `Submit` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to `EditForm` to add the validation summary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `ExpenseTracker.Client.wwroot/css/app.css` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding styles provide validation styling for the related elements and
    change the color of the `h2` elements to dark blue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Add Expense** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the validation errors:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_14.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.14: Data validation for the ExpenseEdit component'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Test the edit expense component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a valid expense.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the expense is valid, clicking the **Save** button will save the expense
    to the SQL Server database and return the user to the **Home** page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Edit** link next to the new expense.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the expense.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add Expense** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add another valid expense.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add Expense** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add another valid expense but do not click the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Home** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add Expense** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The valid expense is gone.
  prefs: []
  type: TYPE_NORMAL
- en: If the user enters data and navigates away from the page before they click the
    **Save** button, all their data entry is lost. To help prevent this from happening,
    we can lock their navigation by using the `NavigationLock` component.
  prefs: []
  type: TYPE_NORMAL
- en: Lock navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a `NavigationLock` component. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ExpenseTracker.Client.Pages/ExpenseEdit.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@inject` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `NavigationLock` below the `@inject` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses JavaScript to display a confirm dialog when the user
    uses a link to navigate away from the current page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Add Expense** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a valid expense.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Home** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following `confirm` dialog will be displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, Word  Description automatically
    generated](img/B18471_12_15.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.15: Confirm dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Cancel** button to cancel navigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have completed the expense tracker project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to use the `EditForm` component in conjunction with the
    built-in input components to create an input data form. You should also be comfortable
    with the built-in validation components. Finally, you should understand how to
    lock the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we introduced the built-in `EditForm` component, various input
    components, and the validation components. We also introduced a component that
    can be used to lock the userâ€™s navigation. After that, we used the **Blazor WebAssembly
    App** project template to create a multi-project solution. We added a couple of
    classes and a couple of API controllers. Next, we configured SQL Server by updating
    the connection string to the database and using **Entity Framework** migrations.
    We updated the `Home` page to display the list of expenses. We added a new page
    that included an `EditForm` component and many of the built-in input components
    to input, validate, and submit the expenses. Finally, we added a `NavigationLock`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply our new skills to add data input and validation to any Blazor WebAssembly
    app.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to start building your own web apps. To stay up to date and
    learn more about Blazor WebAssembly, visit [https://blazor.net](https://blazor.net),
    and read the *ASP.NET Blog* at [https://devblogs.microsoft.com/dotnet/category/aspnet/](https://devblogs.microsoft.com/dotnet/category/aspnet/).
  prefs: []
  type: TYPE_NORMAL
- en: We hope you enjoyed the book and wish you every success!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the advantages of using the built-in input components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you update the `HandleBeforeInternalNav` method to only display the
    confirm dialog if there are unsaved changes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `EditForm` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on ASP.NET Core component forms, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on data annotations, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on routing, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our communityâ€™s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Discord_QR.png)'
  prefs: []
  type: TYPE_IMG
