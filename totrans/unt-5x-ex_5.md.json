["```cs\n//--------------------------------\nusing UnityEngine;\nusing System.Collections;\nusing UnityStandardAssets.CrossPlatformInput;\n//--------------------------------\npublic class PlayerControl : MonoBehaviour\n{\n  //--------------------------------\n  public enum FACEDIRECTION {FACELEFT = -1, FACERIGHT = 1};\n  //Which direction is the player facing - left or right?\n  public FACEDIRECTION Facing = FACEDIRECTION.FACERIGHT;\n  //Which objects are tagged as ground\n  public LayerMask GroundLayer;\n  //Reference to rigidbody\n  private Rigidbody2D ThisBody = null;\n  //Reference to transform\n  private Transform ThisTransform = null;\n  //Reference to feet collider\n  public CircleCollider2D FeetCollider = null;\n  //Are we touching the ground?\n  public bool isGrounded = false;\n  //What are the main input axes\n  public string HorzAxis = \"Horizontal\";\n  public string JumpButton = \"Jump\";\n  //Speed variables\n  public float MaxSpeed = 50f;\n  public float JumpPower = 600;\n  public float JumpTimeOut = 1f;\n  //Can we jump right now?\n  private bool CanJump = true;\n  //Can we control player?\n  public bool CanControl = true;\n  public static PlayerControl PlayerInstance = null;\n  //--------------------------------\n  public static float Health\n  {\n    get\n    {\n      return _Health;\n    }\n\n    set\n    {\n      _Health = value;\n\n      //If we are dead, then end game\n      if(_Health <= 0)\n      {\n        Die();\n      }\n    }\n  }\n\n  [SerializeField]\n  private static float _Health = 100f;\n  //--------------------------------\n  // Use this for initialization\n  void Awake ()\n  {\n    //Get transform and rigid body\n    ThisBody = GetComponent<Rigidbody2D>();\n    ThisTransform = GetComponent<Transform>();\n\n    //Set static instance\n    PlayerInstance = this;\n  }\n  //--------------------------------\n  //Returns bool - is player on ground?\n  private bool GetGrounded()\n  {\n    //Check ground\n    Vector2 CircleCenter = new Vector2(ThisTransform.position.x, ThisTransform.position.y) + FeetCollider.offset;\n    Collider2D[] HitColliders = Physics2D.OverlapCircleAll(CircleCenter, FeetCollider.radius, GroundLayer);\n    if(HitColliders.Length > 0) return true;\n    return false;\n  }\n  //--------------------------------\n  //Flips character direction\n  private void FlipDirection()\n  {\n    Facing = (FACEDIRECTION) ((int)Facing * -1f);\n    Vector3 LocalScale = ThisTransform.localScale;\n    LocalScale.x *= -1f;\n    ThisTransform.localScale = LocalScale;\n  }\n  //--------------------------------\n  //Engage jump\n  private void Jump()\n  {\n    //If we are grounded, then jump\n    if(!isGrounded || !CanJump)return;\n\n    //Jump\n    ThisBody.AddForce(Vector2.up * JumpPower);\n    CanJump = false;\n    Invoke (\"ActivateJump\", JumpTimeOut);\n  }\n  //--------------------------------\n  //Activates can jump variable after jump timeout\n  //Prevents double-jumps\n  private void ActivateJump()\n  {\n    CanJump = true;\n  }\n  //--------------------------------\n  // Update is called once per frame\n  void FixedUpdate ()\n  {\n    //If we cannot control character, then exit\n    if(!CanControl || Health <= 0f)\n    {\n      return;\n    }\n\n    //Update grounded status\n    isGrounded = GetGrounded();\n    float Horz = CrossPlatformInputManager.GetAxis(HorzAxis);\n    ThisBody.AddForce(Vector2.right * Horz * MaxSpeed);\n\n    if(CrossPlatformInputManager.GetButton(JumpButton))\n      Jump();\n\n    //Clamp velocity\n    ThisBody.velocity = new Vector2(Mathf.Clamp(ThisBody.velocity.x, -MaxSpeed, MaxSpeed), \n      Mathf.Clamp(ThisBody.velocity.y, -Mathf.Infinity, JumpPower));\n\n    //Flip direction if required\n    if((Horz < 0f && Facing != FACEDIRECTION.FACELEFT) || (Horz > 0f && Facing != FACEDIRECTION.FACERIGHT))\n      FlipDirection();\n  }\n  //--------------------------------\n  void OnDestroy()\n  {\n    PlayerInstance = null;\n  }\n  //--------------------------------\n  //Function to kill player\n  static void Die()\n  {\n    Destroy(PlayerControl.PlayerInstance.gameObject);\n  }\n  //--------------------------------\n  //Resets player back to defaults\n  public static void Reset()\n  {\n    Health = 100f;\n  }\n  //--------------------------------\n}\n//--------------------------------\n```"]