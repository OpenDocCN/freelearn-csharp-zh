- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Combining Data Sources Using GraphQL
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GraphQL组合数据源
- en: In this chapter, you will be introduced to GraphQL, a service technology that
    provides a more modern approach to combining data from various sources and then
    providing a standard way to query that data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解GraphQL，这是一种服务技术，它提供了一种更现代的方法来组合来自各种来源的数据，并提供了一种查询这些数据的标准方式。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding GraphQL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解GraphQL
- en: Building a service that supports GraphQL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建支持GraphQL的服务
- en: Defining GraphQL queries for EF Core models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义EF Core模型的GraphQL查询
- en: Building .NET clients for a GraphQL service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为GraphQL服务构建.NET客户端
- en: Implementing GraphQL mutations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现GraphQL突变
- en: Implementing GraphQL subscriptions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现GraphQL订阅
- en: Understanding GraphQL
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GraphQL
- en: In *Chapter 8*, *Building and Securing Web Services Using Minimal APIs*, you
    learned how to define a Web API service by mapping request path endpoints to lambda
    expressions or methods that return the response. Any parameters and the format
    of responses are under the control of the service. A client cannot ask for what
    they exactly need or use more efficient data formats.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第8章*，*使用最小API构建和保障Web服务*中，你学习了如何通过将请求路径端点映射到lambda表达式或返回响应的方法来定义Web API服务。任何参数和响应格式都由服务控制。客户端无法请求他们确切需要的内容或使用更有效的数据格式。
- en: If you completed the online-only section, *Exposing Data via the Web Using OData*,
    then you know that OData has a built-in query language for the client to control
    what data they want to be returned. However, OData has a rather old-fashioned
    approach and is tied to the HTTP standard, for example, using query strings in
    an HTTP request.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了仅在网络上提供的部分，*通过OData在Web上公开数据*，那么你知道OData有一个内置的查询语言，客户端可以用来控制他们想要返回的数据。然而，OData有一个相当过时的方法，并且与HTTP标准相关联，例如，在HTTP请求中使用查询字符串。
- en: If you would prefer to use a more modern and flexible technology to combine
    and expose your data as a service, then a good alternative is **GraphQL**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望使用一种更现代且灵活的技术来组合并公开你的数据作为服务，那么一个不错的选择是**GraphQL**。
- en: Like OData, GraphQL is a standard for describing your data and then querying
    it that gives the client control over exactly what they need. It was developed
    internally by Facebook in 2012 before being open sourced in 2015, and it is now
    managed by the GraphQL Foundation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与OData一样，GraphQL是一个描述你的数据并查询它的标准，它给了客户端控制权，让他们确切知道他们需要什么。它于2012年由Facebook内部开发，并于2015年开源，现在由GraphQL基金会管理。
- en: 'Some of the key benefits of GraphQL over OData are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与OData相比，GraphQL的一些关键优势包括：
- en: GraphQL does not require HTTP because it is transport-agnostic, so you could
    use alternative transport protocols like WebSockets or TCP.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL不需要HTTP，因为它与传输无关，因此你可以使用替代的传输协议，如WebSockets或TCP。
- en: GraphQL has more client libraries for different platforms than OData has.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL比OData拥有更多针对不同平台的客户端库。
- en: GraphQL has a single endpoint, usually simply `/graphql`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL有一个单一端点，通常简单地是`/graphql`。
- en: GraphQL query document format
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GraphQL查询文档格式
- en: 'GraphQL uses its own document format for its queries, which are a bit like
    JSON, but GraphQL queries do not require commas between field names, as shown
    in the following query, which requests some fields and related data for the product
    with an ID of `23`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL使用自己的文档格式进行查询，这与JSON有点相似，但GraphQL查询不需要在字段名之间使用逗号，如下面的查询所示，该查询请求了ID为`23`的产品的一些字段和相关数据：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The official media type for GraphQL query documents is `application/graphql`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL查询文档的官方媒体类型是`application/graphql`。
- en: Requesting fields
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求字段
- en: 'The most basic GraphQL query requests one or more fields from a type, for example,
    requesting three fields for each `customer` entity, as shown in the following
    code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的GraphQL查询从一个类型请求一个或多个字段，例如，为每个`customer`实体请求三个字段，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The response is in the JSON format, for example, an array of `customer` objects,
    as shown in the following document:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 响应以JSON格式，例如，一个`customer`对象的数组，如下面的文档所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Specifying filters and arguments
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定过滤器和参数
- en: 'With an HTTP or REST-style API, the caller is limited to only passing parameters
    when the API predefines that. With GraphQL, you can set parameters anywhere in
    the query, for example, filtering orders by order date and by the country of the
    customer who made the order, as shown in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP或REST风格的API时，调用者仅限于在API预定义的情况下传递参数。在GraphQL中，你可以在查询的任何位置设置参数，例如，通过订单日期和下订单的客户的国籍来过滤订单，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that although GraphQL uses camelCase for entity, property, and parameter
    names, you should use PascalCase for query names.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管GraphQL使用camelCase作为实体、属性和参数名称，但您应该使用PascalCase作为查询名称。
- en: 'You might want to pass values for named parameters instead of hardcoding them,
    as shown in the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望传递命名参数的值而不是将它们硬编码，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can learn more about the GraphQL query language at the following link:
    [https://graphql.org/learn/queries/](https://graphql.org/learn/queries/).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接了解更多关于GraphQL查询语言的信息：[https://graphql.org/learn/queries/](https://graphql.org/learn/queries/)。
- en: Understanding other GraphQL capabilities
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解其他GraphQL能力
- en: 'As well as queries, other standard GraphQL features are mutations and subscriptions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了查询之外，其他标准的GraphQL特性还包括突变和订阅：
- en: '**Mutations** enable you to create, update, and delete resources.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**突变**使您能够创建、更新和删除资源。'
- en: '**Subscriptions** enable a client to get notified when resources change. They
    work best with additional communication technologies like WebSockets.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅**允许客户端在资源发生变化时收到通知。它们与WebSocket等附加通信技术配合使用效果最佳。'
- en: Understanding the ChilliCream GraphQL platform
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解ChilliCream GraphQL平台
- en: GraphQL.NET is one of the most popular platforms for implementing GraphQL with
    .NET. In my opinion, GraphQL.NET requires too much configuration for even the
    most basic example, and the documentation is frustrating. I have a feeling that,
    although it is powerful, it implements the GraphQL specification in a one-to-one
    manner instead of rethinking how a .NET platform could make it easier to get started.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL.NET是实施GraphQL的.NET中最受欢迎的平台之一。在我看来，即使是基本示例，GraphQL.NET也需要太多的配置，而且文档令人沮丧。我有一种感觉，尽管它功能强大，但它以一对一的方式实现了GraphQL规范，而不是重新思考.NET平台如何使其更容易上手。
- en: 'You can learn about GraphQL.NET at the following link: [https://graphql-dotnet.github.io/](https://graphql-dotnet.github.io/).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接了解GraphQL.NET：[https://graphql-dotnet.github.io/](https://graphql-dotnet.github.io/)。
- en: 'For this book, I looked for alternatives, and I found exactly what I was looking
    for. ChilliCream is a company that has created a whole platform to work with GraphQL:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我寻找了替代方案，并找到了我想要的。ChilliCream是一家创建了一个整个平台来与GraphQL一起工作的公司：
- en: '**Hot Chocolate** enables you to create GraphQL services for .NET.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热巧克力**使您能够为.NET创建GraphQL服务。'
- en: '**Strawberry Shake** enables you to create GraphQL clients for .NET.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**草莓奶昔**使您能够为.NET创建GraphQL客户端。'
- en: '**Banana Cake Pop** enables you to run queries and explore a GraphQL endpoint
    using a Monaco-based GraphQL IDE.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**香蕉蛋糕棒**使您能够使用基于Monaco的GraphQL IDE运行查询并探索GraphQL端点。'
- en: '**Green Donut** enables better performance when loading data.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绿色甜甜圈**在加载数据时提供更好的性能。'
- en: Unlike some other packages that can be used to add support for GraphQL, ChilliCream
    packages are designed to be as easy to implement as possible, using conventions
    and simple POCO classes instead of complex types and special schemas. It works
    in a similar way to how Microsoft might have built a GraphQL platform for .NET,
    with sensible defaults and conventions rather than lots of boilerplate code and
    configuration.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与一些其他可以用来添加GraphQL支持的包不同，ChilliCream包旨在尽可能容易实现，使用约定和简单的POCO类而不是复杂类型和特殊模式。它的工作方式类似于微软可能为.NET构建的GraphQL平台，有合理的默认值和约定，而不是大量的样板代码和配置。
- en: As ChilliCream says on its home page, *“We at ChilliCream build the ultimate
    GraphQL platform. Most of our code is open-source and will forever remain open-source.”*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如ChilliCream在其主页上所说：“我们在ChilliCream构建终极GraphQL平台。我们的大部分代码是开源的，并将永远保持开源。”
- en: 'The GitHub repository for Hot Chocolate is at the following link: [https://github.com/ChilliCream/hotchocolate](https://github.com/ChilliCream/hotchocolate).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Hot Chocolate的GitHub仓库链接如下：[https://github.com/ChilliCream/hotchocolate](https://github.com/ChilliCream/hotchocolate)。
- en: Building a service that supports GraphQL
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建支持GraphQL的服务
- en: 'There is no `dotnet` `new` project template for GraphQL, so we will use the
    **ASP.NET Core Empty** project template. Even though GraphQL does not have to
    be hosted on a web server because it is not tied to HTTP, it is a sensible choice
    to get started. We will then add a package reference for GraphQL support:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GraphQL不需要托管在Web服务器上，因为它不依赖于HTTP，因此选择**ASP.NET Core Empty**项目模板作为起点是合理的。然后我们将添加一个用于GraphQL支持的包引用：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器添加一个新项目，如下列所示：
- en: 'Project template: **ASP.NET Core Empty** / `web`'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter12`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.GraphQL.Service`'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other Visual Studio 2022 options:'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the project file, add a package reference for Hot Chocolate hosted in ASP.NET
    Core, as shown in the following markup:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Version 13.6.0 was in preview at the time of writing. To use the most recent
    preview version, you can set it to `13.6-*`. But I recommend that you go to the
    following link and then reference the latest GA version: [https://www.nuget.org/packages/HotChocolate.AspNetCore/](https://www.nuget.org/packages/HotChocolate.AspNetCore/).'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the project file, treat warnings as errors and disable the warning `AD0001`,
    as highlighted in the following markup:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `Properties` folder, in `launchSettings.json`, for the `https` profile,
    modify the `applicationUrl` to use port `5121` for `https` and port `5122` for
    `http`. Then, add a `launchUrl` of `graphql`, as highlighted in the following
    configuration:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build the `Northwind.GraphQL.Service` project.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining the GraphQL schema for Hello World
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first task is to define what we want to expose as GraphQL models in the
    web service.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define a GraphQL query for the most basic `Hello World` example, which
    will respond with plain text when a request for a greeting is made:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.GraphQL.Service` project/folder, add a class file named `Query.cs`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the class to have a method named `GetGreeting` that returns the plain
    text `"Hello, World!"`, as shown in the following code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In `Program.cs`, import the namespace where we defined the `Query` class, as
    shown in the following code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the section to configure services, after the call to `CreateBuilder`, add
    a statement to add GraphQL server-side support, and add the query type to the
    collection of registered services, as shown in the following code:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Modify the statement that maps a `GET` request to return a more useful plain
    text message, as shown in the following code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the section to configure the HTTP pipeline, before the call to `Run`, add
    a statement to map GraphQL as an endpoint, as shown in the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start the `Northwind.GraphQL.Service` web project, using the `https` profile
    without debugging:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then select the **https** profile, start
    the project without debugging, and note that the browser starts automatically.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code, then enter the command `dotnet run --launch-profile
    https`, start Chrome manually, and navigate to `https://localhost:5121/graphql`.
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note the **BananaCakePop** user interface, and then click the **Create Document**
    button.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner, click the **Connection Settings** button, as shown
    in *Figure 12.1*:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_01.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: A new BananaCakePop document and connection settings button'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Connection Settings**, confirm that the **Schema Endpoint** is correct,
    and then click **Cancel**, as shown in *Figure 12.2*:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_02.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Reviewing the BananaCakePop connection settings'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the **untitled 1** document, click the **Schema Reference** tab.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Schema Reference** tab, note “The `Query` type is a special type that
    defines the entry point of every GraphQL query”, and it has a field named `greeting`
    that returns a `String!` value. The exclamation mark indicates that the value
    will *not* be `null`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note there is only one type defined,
    the special `Query` object with its `greeting` field, which is a non-null `String`
    value, as shown in the following code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Writing and executing GraphQL queries
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we know the schema, we can write and run a query:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, in the **untitled 1** document, click the **Operations**
    tab.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side, type an open curly brace, `{`, and note that a close
    curly brace, `}`, is written for you.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the letter `g` , and note that the autocomplete shows it recognizes the
    `greeting` field, as shown in *Figure 12.3*:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_03.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Autocomplete for the greeting field'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Press *Enter* to accept the autocomplete suggestion.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Run** button and note the response, as shown in the following output:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Close Chrome, and shut down the web server.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Naming GraphQL queries aka operations
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The query that we wrote was unnamed. We could also have created it as a named
    query, as shown in the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Named queries allow clients to identify queries and responses for telemetry
    purposes, for example, when hosting in Microsoft Azure cloud services and monitoring
    using Application Insights.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Understanding field conventions
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The C# method we created in the `Query` class was named `GetGreeting`, but
    when querying it, we used `greeting`. The `Get` prefix on method names that represent
    fields in GraphQL is optional. Let’s see some more examples:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Query.cs`, add two more methods without the `Get` prefix, as highlighted
    in the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note the updated schema, as shown
    in the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: C# methods use PascalCase. GraphQL fields use camelCase.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Operations** tab, and modify the query to specify a name and request
    the `rollTheDie` field, as shown in the following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Click **Run** again multiple times. Note that the responses contain a random
    number between 1 and 6, and a history of requests and responses is stored for
    the current browser session, as shown in *Figure 12.4*:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_04.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Executing a named query and the history of requests and responses'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome, and shut down the web server.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining GraphQL queries for EF Core models
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a basic GraphQL service operating successfully, let’s extend
    it to enable querying the Northwind database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for EF Core
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We must add another Hot Chocolate package to allow easy dependency service
    integration of our EF Core database context with GraphQL query classes:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a package reference for Hot Chocolate integration with EF Core and a project
    reference to the Northwind database context project, as highlighted in the following
    markup:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The path to the project must not have a line break. All Hot Chocolate packages
    should have the same version number.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.GraphQLService` project at the command prompt or terminal
    using `dotnet build`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you reference a project outside of the current solution, you must build
    the project at least once at the command prompt or terminal before you can use
    the Visual Studio 2022 **Build** menu to compile it.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace to work with our EF Core model for the
    Northwind database, as shown in the following code:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a statement after the `CreateBuilder` method to register the `Northwind`
    database context class, and add a statement after adding the GraphQL server support
    to register the `NorthwindContent` class for dependency injection, as highlighted
    in the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `Query.cs`, add statements to define an object graph type that has some
    types of queries to return a list of categories, a single category, products for
    a category, products with a minimum unit price, and all products, as highlighted
    in the following code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Exploring GraphQL queries with Northwind
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test writing GraphQL queries for the categories and products in
    the Northwind database:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or the cloud, then make sure to start it.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note the query and type definitions
    for `Category`, as partially shown in *Figure 12.5*:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_05.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Schema for querying the Northwind categories and products using
    GraphQL'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the full definitions in the following code:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Click the **Operations** tab, and write a named query to request the ID, name,
    and description fields for all categories, as shown in the following markup:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Click **Run**, and note the response, as shown in *Figure 12.6* and the following
    partial output:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/B19587_12_06.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Getting all categories'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **+** to open a tab for a new document named **untitled 2**, and
    write a query to request the category with ID `2`, including the ID, name, and
    price of its products, as shown in the following markup:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Make sure that the `I` in `categoryId` is uppercase.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the GraphQL web service command prompt or terminal, note the SQL statements
    executed for this query, as shown in the following output:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GraphQL web服务命令提示符或终端中，注意为此查询执行的SQL语句，如下所示的部分输出：
- en: '[PRE28]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Although the GraphQL query did not need the picture of each category and only
    needed the ID, name, and unit price, the dynamically-generated queries from EF
    Core returned all properties.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然GraphQL查询不需要每个类别的图片，只需要ID、名称和单价，但EF Core动态生成的查询返回了所有属性。
- en: 'Click the **+** tab to open a new tab, and write a query to request the ID,
    name, and units in stock of the products in the category with ID `1`, as shown
    in the following markup:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**标签打开一个新标签页，并编写一个查询以请求ID、名称和库存单位的产品，其类别ID为`1`，如下所示：
- en: '[PRE29]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应，如下所示的部分输出：
- en: '[PRE30]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Click the **+** tab to open a new tab, and write a query to request the ID,
    name, and units in stock of products, along with their category names, as shown
    in the following markup:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**标签打开一个新标签页，并编写一个查询以请求产品的ID、名称、库存单位和其类别名称，如下所示：
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应，如下所示的部分输出：
- en: '[PRE32]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Click the **+** tab to open a new tab, and write a query to request the ID
    and name of a category, select the category by specifying its category ID, and
    include the ID and name for each of its products. The ID of the category will
    be set using a variable, as shown in the following markup:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**标签打开一个新标签页，并编写一个查询以请求类别的ID和名称，通过指定类别ID选择该类别，并包括其每个产品的ID和名称。类别ID将使用变量设置，如下所示：
- en: '[PRE33]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the **Variables** section, define a value for the variable, as shown in
    the following code and in *Figure 12.7*:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**变量**部分，定义一个变量的值，如下所示，并在*图12.7*中：
- en: '[PRE34]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![](img/B19587_12_07.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_12_07.png)'
- en: 'Figure 12.7: Executing a GraphQL query with a variable'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7：执行带有变量的GraphQL查询
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应，如下所示的部分输出：
- en: '[PRE35]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Click the **+** tab to open a new tab, write a query to request the ID and
    name of a category, select the category by specifying its category ID, and include
    the ID and name for each of its products. The ID of the category will be set using
    a variable, as shown in the following markup:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**标签打开一个新标签页，编写一个查询以请求类别的ID和名称，通过指定类别ID选择该类别，并包括其每个产品的ID和名称。类别ID将使用变量设置，如下所示：
- en: '[PRE36]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the **Variables** section, define a value for the variable, as shown in
    the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**变量**部分，定义一个变量的值，如下所示：
- en: '[PRE37]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Click **Run**, and note the response, as shown in the following output:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应，如下所示的部分输出：
- en: '[PRE38]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Close Chrome, and shut down the web server.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome，并关闭Web服务器。
- en: Implementing paging support
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现分页支持
- en: 'When we request products using the `GetProducts` method (the `products` query),
    all 77 products are returned. Let’s add paging support:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`GetProducts`方法（`products`查询）请求产品时，返回所有77个产品。让我们添加分页支持：
- en: 'In `Query.cs`, add statements to define a query to return all products, using
    paging, and note that its implementation is the same as the query for products
    without paging, but it is decorated with the `[UsePaging]` attribute, as shown
    in the following code:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Query.cs`中添加语句以定义一个查询，用于返回所有产品，使用分页，并注意其实现与不带分页的产品查询相同，但它被装饰了`[UsePaging]`属性，如下所示：
- en: '[PRE39]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Good Practice**: The `[UsePaging]`, `[UseFiltering]`, and `[UseSorting]`
    attributes must be decorated onto a query method that returns `IQueryable<T>`
    , allowing GraphQL to dynamically configure the LINQ query before executing it
    against the data store.'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：`[UsePaging]`、`[UseFiltering]`和`[UseSorting]`属性必须装饰到返回`IQueryable<T>`的查询方法上，允许GraphQL在执行数据存储之前动态配置LINQ查询。'
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`配置文件（无调试）启动`Northwind.GraphQL.Service`项目。
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**香蕉蛋糕棒**中，点击**+**以打开一个新标签页。
- en: 'Click the **Schema Definition** tab, and note the queries named `products`
    (without paging) and `productsWithPaging`, which documents how to use the query
    to request a page of products, as shown in the following output:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**模式定义**标签，并注意名为`products`（不带分页）和`productsWithPaging`的查询，这些查询说明了如何使用查询请求产品的一页，如下所示的部分输出：
- en: '[PRE40]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Click the **Operations** tab, and write a named query to request the first
    page of 10 products, as shown in the following markup:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Click **Run**, and note the response, including the `pageInfo` section, which
    tells us that there is another page of products and the cursor for this page ranges
    from `MA==` to `OQ==`, as shown in the following partial output:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Click the **+** to open a new tab, and write a named query to request the second
    page of 10 products, by specifying that we want the cursor that starts after `OQ==`,
    as shown in the following markup:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Click **Run**, and note the response, including the `pageInfo` section, which
    tells us that there is another page of products and the cursor for this page ranges
    from `MTA=` to `MTk=`, as shown in the following partial output:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Close Chrome, and shut down the web server.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing filtering support
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we explored queries earlier in this chapter, we predefined some queries
    with parameters, for example, a query that returns all the products in a category
    by passing a `categoryId` parameter.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: However, what if you do not know ahead of time what filtering you want to perform?
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add filtering support to our GraphQL queries:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, add a call to `AddFiltering` after calling `AddGraphQLServer`,
    as highlighted in the following code:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In `Query.cs`, decorate the `GetProducts` method with the `[UseFiltering]`
    attribute, as highlighted in the following code:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Scheme Definition** , and note that the `products` query now accepts
    a filter input, as shown in the following markup:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Scroll down the schema definition to find `ProductFilterInput`, and note the
    filtering options include Boolean operators like `and` and `or`, as well as field
    filters like `IntOperationFilterInput` and `StringOperationFilterInput`, as shown
    in the following markup:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Scroll down the schema definition to find `IntOperationFilterInput` and `StringOperationFilterInput`,
    and note the operations you can use with them, like equals (`eq`), not equals
    (`neq`), in an array (`in`), greater than (`gt`), `contains`, and `startsWith`,
    as shown in the following markup:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Click **Operations**, and then write a named query to request products with
    more than `120` units in stock, as shown in the following markup:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Click **Run**, and note the response, as shown in the following output:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Click the **+** to open a new tab, click **Operations**, and then write a named
    query to request products whose names start with `Cha`, as shown in the following
    markup:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Click **Run**, and note the response, as shown in the following output:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In the GraphQL service command prompt or terminal, note the EF Core-generated
    SQL filters using parameters, as shown in the following output:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Close Chrome, and shut down the web server.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing sorting support
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable sorting with a GraphQL service, call the `AddSorting` method, as
    highlighted in the following code:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 GraphQL 服务的排序，调用 `AddSorting` 方法，如下面的代码所示：
- en: '[PRE55]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then, decorate a query method that returns `IQueryable<T>` with the `[UseSorting]`
    attribute, as highlighted in the following code:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `[UseSorting]` 属性装饰返回 `IQueryable<T>` 的查询方法，如下面的代码所示：
- en: '[PRE56]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In a query, apply one or more sort orders, as shown in the following code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询中应用一个或多个排序顺序，如下面的代码所示：
- en: '[PRE57]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '`SortEnumType` has two values, as shown in the following code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`SortEnumType` 有两个值，如下面的代码所示：'
- en: '[PRE58]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: I will leave adding sorting capabilities to your GraphQL service to you.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把添加排序功能到你的 GraphQL 服务中留给你。
- en: Building .NET clients for a GraphQL service
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 GraphQL 服务构建 .NET 客户端
- en: Now that we have explored some queries with the **Banana Cake Pop** tool, let’s
    see how a client could call the GraphQL service. Although the **Banana Cake Pop**
    tool is convenient, it runs in the same domain as the service, so some issues
    might not become apparent until we create a separate client.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用 **Banana Cake Pop** 工具探索了一些查询，让我们看看客户端如何调用 GraphQL 服务。虽然 **Banana Cake
    Pop** 工具很方便，但它运行在与服务相同的域中，因此一些问题可能直到我们创建一个单独的客户端时才变得明显。
- en: Choosing GraphQL request formats
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择 GraphQL 请求格式
- en: 'Most GraphQL services process `GET` and `POST` requests in either the `application/graphql`
    or `application/json` media formats. An `application/graphql` request would only
    contain a query document. The benefit of using `application/json` is that as well
    as the query document, you can specify operations when you have more than one,
    and define and set variables, as shown in the following code:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 GraphQL 服务以 `application/graphql` 或 `application/json` 媒体格式处理 `GET` 和 `POST`
    请求。一个 `application/graphql` 请求将只包含一个查询文档。使用 `application/json` 的好处是，除了查询文档外，你还可以在有多种操作时指定操作，并定义和设置变量，如下面的代码所示：
- en: '[PRE59]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We will use the `application/json` media format so that we can pass variables
    and their values.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `application/json` 媒体格式，这样我们就可以传递变量及其值。
- en: Understanding the GraphQL response format
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 GraphQL 响应格式
- en: 'A GraphQL service should return a JSON document containing the expected data
    object and maybe some errors in an array, with the following structure:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 GraphQL 服务应该返回一个包含预期数据对象和可能包含一些错误数组的 JSON 文档，其结构如下：
- en: '[PRE60]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `errors` array should only be in the document if there are errors.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`errors` 数组只有在文档中有错误时才应出现在文档中。'
- en: Using REST Client as a GraphQL client
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 REST Client 作为 GraphQL 客户端
- en: 'Before we write code as a client to the GraphQL service, it would be good to
    test it with your code editor’s `.http` file support. This is so that if our .NET
    client app does not work, we know the problem is in our client code rather than
    the service:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写客户端代码向 GraphQL 服务发送请求之前，最好使用你的代码编辑器的 `.http` 文件支持对其进行测试。这样，如果我们的 .NET 客户端应用不起作用，我们就知道问题出在我们的客户端代码而不是服务上：
- en: If you are using Visual Studio Code and have not already installed REST Client
    by Huachao Mao (`humao.rest-client`), then install it now.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio Code 并且尚未安装 Huachao Mao 的 REST Client (`humao.rest-client`)，那么现在就安装它。
- en: In your preferred code editor, start the `Northwind.GraphQL.Service` project
    web service, using the `https` profile without debugging, and leave it running.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你偏好的代码编辑器中，启动 `Northwind.GraphQL.Service` 项目网络服务，使用 `https` 配置文件，不进行调试，并保持运行。
- en: 'In your code editor, in the `HttpRequests` folder, create a file named `graphql-queries.http`,
    and modify its contents to contain a request to get products in the seafood category,
    as shown in the following code:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中，在 `HttpRequests` 文件夹中，创建一个名为 `graphql-queries.http` 的文件，并修改其内容以包含获取海鲜类别产品的请求，如下面的代码所示：
- en: '[PRE61]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Send the query request, and note the response, as shown in *Figure 12.8*:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送查询请求，并注意响应，如图 *图 12.8* 所示：
- en: '![](img/B19587_12_08.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_12_08.png)'
- en: 'Figure 12.8: Requesting seafood products using REST Client'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8：使用 REST Client 请求海鲜产品
- en: 'Add a query to make a request to get the ID, name, and description of all categories,
    as shown in the following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个查询来获取所有类别的 ID、名称和描述，如下面的代码所示：
- en: '[PRE62]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Send the query request, and note the response contains the eight categories
    in a `data` property.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送查询请求，并注意响应包含 `data` 属性中的八个类别。
- en: In the query document, change `categoryId` to `id`.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询文档中，将 `categoryId` 改为 `id`。
- en: 'Send the query request, and note the response contains an `errors` array, as
    shown in the following response:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送查询请求，并注意响应包含一个 `errors` 数组，如下面的响应所示：
- en: '[PRE63]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: In the query document, change `id` back to `categoryId`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询文档中，将 `id` 重新改为 `categoryId`。
- en: 'Add a query to request to get the ID and name of a category specified by a
    parameter for its ID, along with the ID and name of each of its products, as shown
    in the following code:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个查询以请求获取通过参数指定的类别ID及其名称，以及每个产品的ID和名称，如下面的代码所示：
- en: '[PRE64]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Send the query request, and note the response contains category `1`, `Beverages`,
    with its products in a `data` property.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送查询请求，并注意响应包含类别`1`，`Beverages`，以及其产品在`data`属性中。
- en: Change the ID to `4`, send the request, and note the response contains category
    `4`, `Dairy Products`, with its products in a `data` property.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ID更改为`4`，发送请求，并注意响应包含类别`4`，`Dairy Products`，以及其产品在`data`属性中。
- en: Now that we have done some basic testing of the service and its responses to
    queries that we want to run, we can build a client to make those queries and process
    the JSON responses.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对服务及其对我们想要运行的查询的响应进行了一些基本的测试，我们可以构建一个客户端来执行这些查询并处理JSON响应。
- en: Using an ASP.NET Core MVC project as a GraphQL client
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core MVC项目作为GraphQL客户端
- en: 'We will create a model class to make it easy to deserialize the response:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个模型类，以便轻松反序列化响应：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器添加一个新项目，如下列列表中定义的：
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web App (Model-View-Controller**) / `mvc`
- en: 'Solution file and folder: `Chapter12`'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter12`
- en: 'Project file and folder: `Northwind.GraphQL.Client.Mvc`'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.GraphQL.Client.Mvc`
- en: 'Other Visual Studio 2022 options:'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他Visual Studio 2022选项：
- en: '**Authentication Type**: None'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证类型**：无'
- en: '**Configure for HTTPS**: Selected'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置为HTTPS**：已选择'
- en: '**Enable Docker**: Cleared'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用Docker**：已清除'
- en: '**Do not use top-level statements**: Cleared'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶级语句**：已清除'
- en: In Visual Studio 2022, set the startup project with the current selection.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，设置启动项目为当前选择。
- en: 'In the `Northwind.GraphQL.Client.Mvc` project, add a project reference to the
    Northwind entity models project, as shown in the following markup:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.GraphQL.Client.Mvc`项目中，添加对Northwind实体模型项目的项目引用，如下面的标记所示：
- en: '[PRE65]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The path to the project must not have a line break.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项目的路径不得包含换行符。
- en: Build the `Northwind.GraphQL.Client.Mvc` project at the command prompt or terminal.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中构建`Northwind.GraphQL.Client.Mvc`项目。
- en: 'In the `Properties` folder, in `launchSettings.json`, modify the `applicationUrl`
    to use port `5123` for `https` and port `5124` for `http`, as highlighted in the
    following configuration:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Properties`文件夹中的`launchSettings.json`中，修改`applicationUrl`以使用端口`5123`进行`https`和端口`5124`进行`http`，如下面的配置中突出显示：
- en: '[PRE66]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In the `Northwind.GraphQL.Client.Mvc` project, in the `Models` folder, add
    a new class file named `ResponseErrors.cs`, as shown in the following code:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.GraphQL.Client.Mvc`项目的`Models`文件夹中，添加一个名为`ResponseErrors.cs`的新类文件，如下面的代码所示：
- en: '[PRE67]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the `Models` folder, add a new class file named `ResponseProducts.cs`, as
    shown in the following code:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Models`文件夹中，添加一个名为`ResponseProducts.cs`的新类文件，如下面的代码所示：
- en: '[PRE68]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In the `Models` folder, add a new class file named `ResponseCategories.cs`,
    as shown in the following code:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Models`文件夹中，添加一个名为`ResponseCategories.cs`的新类文件，如下面的代码所示：
- en: '[PRE69]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In the `Models` folder, add a new class file named `IndexViewModel.cs` , which
    will have properties to store all the data that we might want to show in the view,
    as shown in the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Models`文件夹中，添加一个名为`IndexViewModel.cs`的新类文件，它将具有存储我们可能在视图中显示的所有数据的属性，如下面的代码所示：
- en: '[PRE70]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In `Program.cs`, import the namespace to set HTTP headers, as shown in the
    following code:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入命名空间以设置HTTP头，如下面的代码所示：
- en: '[PRE71]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'In `Program.cs`, after the `CreateBuilder` method call, add statements to register
    an HTTP client for the GraphQL service, as shown in the following code:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在`CreateBuilder`方法调用之后，添加注册GraphQL服务的HTTP客户端的语句，如下面的代码所示：
- en: '[PRE72]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace to
    work with text encodings and for the local project models, as shown in the following
    code:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中的`HomeController.cs`中，导入命名空间以处理文本编码以及本地项目模型，如下面的代码所示：
- en: '[PRE73]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Define a field to store the registered HTTP client factory, and set it in the
    constructor, as shown in the following code:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个字段以存储已注册的HTTP客户端工厂，并在构造函数中设置它，如下面的代码所示：
- en: '[PRE74]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'In the `Index` action method, modify the method to be asynchronous. Then, add
    statements to call the GraphQL service, and note that the HTTP request is a `POST`,
    the media type is for an `application/json` document that contains a GraphQL query,
    and the query requests the ID, name, and number of units in stock for all products
    in a given category, passed as a parameter named `id`, as shown in the following
    code:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Index` 动作方法中，将方法修改为异步。然后，添加调用 GraphQL 服务的语句，并注意 HTTP 请求是 `POST`，媒体类型是包含 GraphQL
    查询的 `application/json` 文档，该查询请求给定类别中所有产品的 ID、名称和库存数量，通过名为 `id` 的参数传递，如下面的代码所示：
- en: '[PRE75]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '**Good Practice**: To set the content of our request, we will use the C# 11
    or later raw interpolated string literal syntax of three-dollar signs and three
    double quotes. This allows us to embed the `id` variable using three curly braces,
    which should not be confused with the two curly braces after `unitsInStock`, which
    end the query itself.'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：为了设置我们请求的内容，我们将使用 C# 11 或更高版本的三个美元符号和三个双引号的原始插值字符串字面量语法。这允许我们使用三个大括号嵌入
    `id` 变量，不应与 `unitsInStock` 后面的两个大括号混淆，后者结束查询本身。'
- en: 'In the `Views/Home` folder, in `Index.cshtml`, delete its existing markup,
    and then add markup to render the seafood products, as shown in the following
    markup:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Views/Home` 文件夹中的 `Index.cshtml` 文件中，删除其现有的标记，然后添加标记以渲染海鲜产品，如下面的标记所示：
- en: '[PRE76]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Testing the .NET client
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 .NET 客户端
- en: 'Now, we can test our .NET client:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以测试我们的 .NET 客户端：
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的数据库服务器没有运行，例如，因为您正在 Docker、虚拟机或云中托管它，那么请确保启动它。
- en: Start the `Northwind.GraphQL.Service` project, using its `https` profile without
    debugging.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的 `https` 配置启动 `Northwind.GraphQL.Service` 项目。
- en: Start the `Northwind.GraphQL.Client.Mvc` project, using its `https` profile
    without debugging.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的 `https` 配置启动 `Northwind.GraphQL.Client.Mvc` 项目。
- en: 'Note that products are successfully retrieved using GraphQL, as shown in *Figure
    12.9*:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，使用 GraphQL 成功检索了产品，如图 *图 12.9* 所示：
- en: '![](img/B19587_12_09.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_12_09.png)'
- en: 'Figure 12.9: Products in the Beverages category from the GraphQL service'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9：来自 GraphQL 服务的饮料类别产品
- en: Enter another category ID that exists, for example, `4`.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入另一个存在的类别 ID，例如 `4`。
- en: Enter a category ID that is out of range, for example, `13`, and note that there
    are 0 products returned.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个超出范围的类别 ID，例如 `13`，并注意返回了 0 个产品。
- en: Close Chrome, and shut down the web server for the `Northwind.GraphQL.Client.Mvc`
    project.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome，并关闭 `Northwind.GraphQL.Client.Mvc` 项目的 Web 服务器。
- en: In `HomeController.cs`, modify the query to make a deliberate mistake, like
    changing `productId` to `productid`.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HomeController.cs` 中，修改查询以故意犯一个错误，例如将 `productId` 改为 `productid`。
- en: Start the `Northwind.GraphQL.Client.Mvc` project, using the `https` profile
    without debugging.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的 `https` 配置启动 `Northwind.GraphQL.Client.Mvc` 项目。
- en: 'Click the **Show/Hide Details** button, and note the error message and response
    details, as shown in the following output:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **显示/隐藏详细信息** 按钮，并注意错误信息和响应详细信息，如下面的输出所示：
- en: '[PRE77]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Close Chrome, and shut down both web servers.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome，并关闭两个 Web 服务器。
- en: Fix the mistake in the query!
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复查询中的错误！
- en: Creating a console app client using Strawberry Shake
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Strawberry Shake 创建控制台应用程序客户端
- en: Instead of using ordinary HTTP clients, ChilliCream has a GraphQL client library
    to more easily build .NET clients to GraphQL services.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用普通 HTTP 客户端不同，ChilliCream 有一个 GraphQL 客户端库，可以更轻松地构建用于 GraphQL 服务的 .NET 客户端。
- en: '**More Information**: You can learn more about Strawberry Shake at the following
    link: [https://chillicream.com/docs/strawberryshake](https://chillicream.com/docs/strawberryshake)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于 Strawberry Shake 的信息：[https://chillicream.com/docs/strawberryshake](https://chillicream.com/docs/strawberryshake)'
- en: 'Now, let’s create another client using Strawberry Shake so that you can see
    the benefits:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Strawberry Shake 创建另一个客户端，以便您可以看到其好处：
- en: Use your preferred code editor to add a new **Console App** / `console` project,
    named `Northwind.GraphQL.Client.Console`.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器添加一个新的 **控制台应用程序** / `console` 项目，命名为 `Northwind.GraphQL.Client.Console`。
- en: 'At the command prompt or terminal for the project folder, create a tools manifest
    file, as shown in the following command:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹的命令提示符或终端中，创建一个工具清单文件，如下面的命令所示：
- en: '[PRE78]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'At the command line or terminal, install the Strawberry Shake tools, as shown
    in the following command:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行或终端中，安装 Strawberry Shake 工具，如下面的命令所示：
- en: '[PRE79]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Note Strawberry Shake is installed, as shown in the following output:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意Strawberry Shake已安装，如下所示：
- en: '[PRE80]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'In the project, treat warnings as errors, add references to NuGet packages
    for Microsoft extensions for dependency injection, working with HTTP, and Strawberry
    Shake code generation, and then globally and statically import the `Console` class,
    as highlighted in the following markup:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中，将警告视为错误，添加对Microsoft扩展依赖注入、处理HTTP和Strawberry Shake代码生成的NuGet包的引用，然后全局和静态导入`Console`类，如下所示：
- en: '[PRE81]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: You need to use different Strawberry Shake packages for different types of .NET
    project. For console apps and ASP.NET Core apps, reference `StrawberryShake.Server`.
    For Blazor WebAssembly apps, reference `StrawberryShake.Blazor`. For .NET MAUI
    apps, reference `StrawberryShake.Maui`.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你需要为不同类型的.NET项目使用不同的Strawberry Shake包。对于控制台应用程序和ASP.NET Core应用程序，引用`StrawberryShake.Server`。对于Blazor
    WebAssembly应用程序，引用`StrawberryShake.Blazor`。对于.NET MAUI应用程序，引用`StrawberryShake.Maui`。
- en: Build the `Northwind.GraphQL.Client.Console` project to restore packages.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目`Northwind.GraphQL.Client.Console`以还原包。
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging, and leave it running so that the Strawberry Shake tool can talk to
    it.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.GraphQL.Service`项目，使用`https`配置文件且不进行调试，并让它运行，以便Strawberry Shake工具可以与其通信。
- en: 'In the `Northwind.GraphQL.Client.Console` project, at the command prompt or
    terminal, add a client for your GraphQL service, as shown in the following command:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.GraphQL.Client.Console`项目中，在命令提示符或终端中添加一个用于GraphQL服务的客户端，如下所示：
- en: '[PRE82]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Note the results, as shown in the following output:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意以下输出结果：
- en: '[PRE83]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'In the `Northwind.GraphQL.Client.Console` project, in the `.graphqlrc.json`
    file, add an entry to control the C# namespace used during code generation, as
    highlighted in the following markup:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.GraphQL.Client.Console`项目中，在`.graphqlrc.json`文件中添加一个条目来控制代码生成期间使用的C#命名空间，如下所示：
- en: '[PRE84]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'In the `Northwind.GraphQL.Client.Console` project, add a new file named `seafoodProducts.graphql`,
    which defines a query to get seafood products, as shown in the following document:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.GraphQL.Client.Console`项目中，添加一个名为`seafoodProducts.graphql`的新文件，该文件定义了一个获取海鲜产品的查询，如下所示：
- en: '[PRE85]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: GraphQL queries used by Strawberry Shake must be named.
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Strawberry Shake使用的GraphQL查询必须命名。
- en: 'If you are using Visual Studio 2022, it might automatically modify the project
    file to explicitly remove this file from the build process because it does not
    recognize it. If it has, then delete or comment out that element, as shown in
    the following markup:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在使用Visual Studio 2022，它可能会自动修改项目文件以显式地从构建过程中删除此文件，因为它不认识它。如果是这样，则删除或注释掉该元素，如下所示：
- en: '[PRE86]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '**Good Practice**: There must be at least one `.graphql` file for the Strawberry
    Shake tool to be able to generate its code automatically. An element like the
    proceeding one will prevent the Strawberry Shake tool from generating its code,
    and you will later get compile errors. You should delete or comment out that element.'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：必须至少有一个`.graphql`文件，以便Strawberry Shake工具能够自动生成其代码。像下面这样的元素将阻止Strawberry
    Shake工具生成代码，你稍后将会遇到编译错误。你应该删除或注释掉该元素。'
- en: Build the `Northwind.GraphQL.Client.Console` project to make Strawberry Shake
    process the GraphQL query file and generate proxy classes.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目`Northwind.GraphQL.Client.Console`，以便Strawberry Shake处理GraphQL查询文件并生成代理类。
- en: 'Note the `obj\Debug\net8.0\berry` folder that was autogenerated, the file named
    `NorthwindClient.Client.cs`, and the dozen or so types defined by it, including
    the `INorthwindClient` interface, as shown in *Figure 12.10*:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意自动生成的`obj\Debug\net8.0\berry`文件夹，名为`NorthwindClient.Client.cs`的文件，以及它定义的十几个类型，包括`INorthwindClient`接口，如图*12.10*所示：
- en: '![](img/B19587_12_10.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_12_10.png)'
- en: 'Figure 12.10: The generated class file for the Northwind GraphQL service'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10：Northwind GraphQL服务生成的类文件
- en: 'In `Program.cs`, delete the existing statements. Add statements to create a
    new service collection, add the autogenerated `NorthwindClient` to it with the
    correct URL for the service, and then get and use the dependency service to fetch
    the seafood products, as shown in the following code:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除现有的语句。添加语句以创建一个新的服务集合，将自动生成的`NorthwindClient`添加到其中，并使用服务正确的URL，然后获取并使用依赖服务来获取海鲜产品，如下所示：
- en: '[PRE87]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Run the console app and note the results, as shown in the following output:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意以下输出结果：
- en: '[PRE88]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Implementing GraphQL mutations
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现GraphQL突变
- en: 'Most services need to modify data as well as query it. GraphQL calls these
    **mutations**. A mutation has three related components:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务都需要修改数据以及查询数据。GraphQL 将这些称为 **突变**。一个突变有三个相关组件：
- en: The mutation itself, which defines the change that will be made to the graph.
    It should be named using a verb, a noun, and use camel casing, for example, `addProduct`.
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突变本身，它定义了对图所做的更改。它应该使用动词、名词并用驼峰式命名，例如，`addProduct`。
- en: The **input** is the input for a mutation, and it should have the same name
    as the mutation with a suffix of `Input`, for example, `AddProductInput`. Although
    there is only one input, it is an object graph, so it can be as complex as you
    need.
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入** 是突变的输入，并且应该与突变具有相同的名称，后缀为 `Input`，例如，`AddProductInput`。尽管只有一个输入，但它是一个对象图，因此可以像你需要的那样复杂。'
- en: The **payload** is the returned document for a mutation, and it should have
    the same name as the mutation with a suffix of `Payload`, for example, `AddProductPayload`.
    Although there is only one payload, it is an object graph, so it can be as complex
    as you need.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载** 是突变的返回文档，并且应该与突变具有相同的名称，后缀为 `Payload`，例如，`AddProductPayload`。尽管只有一个负载，但它是一个对象图，因此可以像你需要的那样复杂。'
- en: Adding mutations to the GraphQL service
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将突变添加到 GraphQL 服务中
- en: 'Let’s define mutations for adding, and later, we will define some to update
    and delete products:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义添加的突变，稍后，我们将定义一些用于更新和删除产品的突变：
- en: In the `Northwind.GraphQL.Service` project/folder, add a class file named `Mutation.cs`.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.GraphQL.Service` 项目/文件夹中，添加一个名为 `Mutation.cs` 的类文件。
- en: 'In the class file, define a record and two classes to represent the three types
    needed to perform an `addProduct` mutation, as shown in the following code:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类文件中，定义一个记录和两个类来表示执行 `addProduct` 突变所需的三个类型，如下面的代码所示：
- en: '[PRE89]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'In `Program.cs`, add a call to the `AddMutationType<T>` method to register
    your `Mutation` class, as highlighted in the following code:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，添加对 `AddMutationType<T>` 方法的调用以注册你的 `Mutation` 类，如下面的代码所示：
- en: '[PRE90]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Exploring the add product mutation
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索添加产品突变
- en: 'Now, we can explore mutations using Banana Cake Pop:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 Banana Cake Pop 探索突变：
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 配置文件启动 `Northwind.GraphQL.Service` 项目，不进行调试。
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Banana Cake Pop** 中，点击 **+** 打开一个新的标签页。
- en: 'Click the **Schema Definition** tab, and note the mutation type, as partially
    shown in *Figure 12.11*:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **模式定义** 选项卡，并注意突变类型，如图 12.11 部分所示：
- en: '![](img/B19587_12_11.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_12_11.png)'
- en: 'Figure 12.11: Schema to mutate a product using GraphQL'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11：使用 GraphQL 突变修改产品模式
- en: 'Note the full schema definitions for the `addProduct` mutation and its related
    types, as shown in the following code:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意 `addProduct` 突变及其相关类型的完整模式定义，如下面的代码所示：
- en: '[PRE91]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Click the **Operations** tab and, if necessary, create a new blank document,
    and then enter a mutation to add a new product named `Tasty Burgers`. Then, from
    the returned `product` object, just select the ID and name, as shown in the following
    code:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **操作** 选项卡，如果需要，创建一个新的空白文档，然后输入一个突变来添加一个名为 `Tasty Burgers` 的新产品。然后，从返回的 `product`
    对象中，只需选择 ID 和名称，如下面的代码所示：
- en: '[PRE92]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Click **Run**, and note that the new product has been successfully added and
    assigned the next sequential number by the SQL Server database, which could be
    any number over 77, depending on if you have already added some other products,
    as shown in the following output and in *Figure 12.12*:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **运行**，注意新产品已成功添加，并由 SQL Server 数据库分配了下一个连续编号，这可能是任何大于 77 的数字，具体取决于你是否已经添加了一些其他产品，如下面的输出和
    *图 12.12* 所示：
- en: '[PRE93]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '**Warning!** Please make a note of the ID assigned to the new product you have
    added. In the next section, you will update this product and then delete it. You
    cannot delete any of the existing products with IDs between 1 and 77 because they
    are related to other tables, and doing so would throw a referential integrity
    exception!'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！** 请注意分配给新添加产品的 ID。在下一节中，你将更新此产品然后删除它。你不能删除任何 ID 在 1 到 77 之间的现有产品，因为它们与其他表相关联，这样做会引发引用完整性异常！'
- en: '![](img/B19587_12_12.png)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_12_12.png)'
- en: 'Figure 12.12: Adding a new product using a GraphQL mutation'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12：使用 GraphQL 突变添加新产品
- en: Close the browser, and shut down the web server.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器，并关闭 web 服务器。
- en: Implementing updates and deletes as mutations
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更新和删除作为突变实现
- en: 'Next, we will define mutations to update just the unit price for a product,
    all the “units” fields for a product, and delete a product:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义突变来更新产品的单价，所有“单位”字段，以及删除一个产品：
- en: 'In `Mutation.cs`, define three `record` types to represent the inputs needed
    to perform two `updateProduct` and one `deleteProduct` mutations, as shown in
    the following code:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Mutation.cs`中，定义三个`record`类型来表示执行两个`updateProduct`和一个`deleteProduct`突变所需的输入，如下所示代码：
- en: '[PRE94]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'In `Mutation.cs`, define two class types to represent the types needed to return
    the results from an `update` or `delete` mutation, including if the action was
    successful, as shown in the following code:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Mutation.cs`中，定义两个类类型来表示从`update`或`delete`突变返回结果所需的类型，包括操作是否成功，如下所示代码：
- en: '[PRE95]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'In `Mutation.cs`, in the `Mutation` class, define three methods to implement
    two `updateProduct` and one `deleteProduct` mutations, as shown in the following
    code:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Mutation.cs`文件中，在`Mutation`类中，定义三个方法来实现两个`updateProduct`和一个`deleteProduct`突变，如下所示代码：
- en: '[PRE96]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的数据库服务器没有运行，例如，因为你正在Docker、虚拟机或云中托管它，那么请确保启动它。
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.GraphQL.Service`项目，使用`https`配置文件而不进行调试。
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**香蕉蛋糕棒**中，点击**+**来打开一个新标签页。
- en: 'Write a named query to request products that you have added, for example, with
    a `productId` greater than `77`, as shown in the following markup:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个命名查询来请求你添加的产品，例如，使用`productId`大于`77`，如下所示标记：
- en: '[PRE97]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Click **Run**, and note the response includes the new product you previously
    added with a unit price of `40`, as shown in the following output:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应包括你之前添加的新产品，单价为`40`，如下所示输出：
- en: '[PRE98]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Make a note of the `productId` of the product you added. In my case, it is `79`.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录你添加的产品的`productId`。在我的情况下，它是`79`。
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**香蕉蛋糕棒**中，点击**+**来打开一个新标签页。
- en: 'Enter a mutation to update the unit price of your new product to `75`, and
    then from the returned `product` object, just select the ID, name, unit price,
    and units in stock, as shown in the following code:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个突变来更新你新产品的单价为`75`，然后从返回的`product`对象中，仅选择ID、名称、单价和库存单位，如下所示代码：
- en: '[PRE99]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Click **Run**, and note the response, as shown in the following output:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应，如下所示输出：
- en: '[PRE100]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Click the **+** to open a new tab, enter a mutation to update the units of
    an existing product, and then from the returned `product` object just select the
    ID, name, unit price, and units in stock, as shown in the following code:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**来打开一个新标签页，输入一个突变来更新现有产品的单位，然后从返回的`product`对象中仅选择ID、名称、单价和库存单位，如下所示代码：
- en: '[PRE101]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Click **Run**, and note the response, as shown in the following output:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应，如下所示输出：
- en: '[PRE102]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'In the query tab to request new products, click **Run**, and note the response,
    as shown in the following output:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询标签页中请求新产品，点击**运行**，并注意响应，如下所示输出：
- en: '[PRE103]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Click the **+** to open a new tab, and enter a mutation to delete the product
    and show if it was successful, as shown in the following code:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**来打开一个新标签页，并输入一个突变来删除产品并显示是否成功，如下所示代码：
- en: '[PRE104]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '**Warning!** You will not be able to delete products that are referenced in
    other tables. IDs 1 to 77 will throw a referential integrity exception.'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！**你将无法删除在其他表中引用的产品。ID 1到77将抛出引用完整性异常。'
- en: 'Click **Run**, and note the response, as shown in the following output:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意响应，如下所示输出：
- en: '[PRE105]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Confirm that the product was deleted by re-running the query for new products,
    and note that you get an empty array, as shown in the following output:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认产品已被删除，可以通过重新运行查询新产品的查询来验证，并注意你将得到一个空数组，如下所示输出：
- en: '[PRE106]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Close the browser, and shut down the web server.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器，并关闭Web服务器。
- en: Implementing GraphQL subscriptions
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现GraphQL订阅
- en: GraphQL subscriptions, by default, work over WebSockets but can also work over
    **Server-Sent Events** (**SSE**), SignalR, or even gRPC.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL订阅默认通过WebSockets工作，但也可以通过**服务器发送事件**（**SSE**）、SignalR或甚至gRPC工作。
- en: Imagine that a client app wants to be notified when a product has its unit price
    reduced. It would be great if the client could subscribe to an event that gets
    triggered whenever a unit price is reduced, instead of having to query for changes
    to the unit prices.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，一个客户端应用程序希望在产品单价降低时收到通知。如果客户端能够订阅一个在单价降低时被触发的事件，而不是必须查询单价的变化，那就太好了。
- en: Adding a subscription and topic to the GraphQL service
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 GraphQL 服务添加订阅和主题
- en: 'Let’s add this feature to our GraphQL service using subscriptions:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将此功能添加到我们的 GraphQL 服务中，使用订阅：
- en: Add a new class file named `ProductDiscount.cs`.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `ProductDiscount.cs` 的新类文件。
- en: 'Modify the contents to define a model to notify a client about a product’s
    unit price reduction, as shown in the following code:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改内容以定义一个模型，通知客户端关于产品单价降低的信息，如下面的代码所示：
- en: '[PRE107]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Add a new class file named `Subscription.cs`.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Subscription.cs` 的新类文件。
- en: 'Modify the contents to define a subscription to an event (aka a topic) named
    `OnProductDiscounted` that a client can subscribe to, as shown in the following
    code:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改内容以定义一个名为 `OnProductDiscounted` 的订阅事件（也称为主题），客户端可以订阅，如下面的代码所示：
- en: '[PRE108]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'In `Mutation.cs`, in the `UpdateProductPriceAsync` method, add statements to
    send a message over the topic whenever a product has its unit price reduced, as
    highlighted in the following code:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Mutation.cs` 的 `UpdateProductPriceAsync` 方法中，添加语句，在产品单价降低时通过主题发送消息，如下面的代码所示：
- en: '[PRE109]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'In `Program.cs`, configure the GraphQL service to register the `Subscription`
    class and to store active subscriptions in-memory, as highlighted in the following
    code:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，配置 GraphQL 服务以注册 `Subscription` 类，并将活动订阅存储在内存中，如下面的代码所示：
- en: '[PRE110]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: As well as in-memory, you can use Redis and other data stores to keep track
    of active subscriptions.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了内存中，您还可以使用 Redis 和其他数据存储来跟踪活动订阅。
- en: 'Optionally, after building the `app`, configure the use of WebSockets, as shown
    in the following code:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，在构建**app**后，配置 WebSocket 的使用，如下面的代码所示：
- en: '[PRE111]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: This is optional because the GraphQL service can fall back to using SSE over
    `https`.
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是个可选步骤，因为 GraphQL 服务可以回退到使用 `https` 上的 SSE。
- en: Exploring subscribing to a topic
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索订阅主题
- en: 'Let’s subscribe to a topic and see the results:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们订阅一个主题并查看结果：
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**https**配置文件启动**Northwind.GraphQL.Service**项目，不进行调试。
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**香蕉蛋糕棒**中，点击**+**以打开新标签页。
- en: 'Click the **Schema Reference** tab, click the `Subscription` type, and note
    the topic named **onProductDiscounted**, as shown in *Figure 12.13*:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**模式参考**标签页，点击**订阅**类型，并注意名为**onProductDiscounted**的主题，如图*12.13*所示：
- en: '![](img/B19587_12_13.png)'
  id: totrans-453
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_12_13.png)'
- en: 'Figure 12.13: A subscription with a topic'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13：带有主题的订阅
- en: 'Click **Operations**, enter a subscription to the topic, and choose all the
    fields to show in the results, as shown in the following code:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**操作**，输入对主题的订阅，并选择要在结果中显示的所有字段，如下面的代码所示：
- en: '[PRE112]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Click **Run**, and note that the subscription starts but no results are shown
    yet.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意订阅开始但尚未显示任何结果。
- en: 'Click the **+** to open a new tab, and enter a mutation to update the unit
    price of the existing product `1` to `8.99`. Then, from the returned `product`
    object, select the ID and unit price, and show if the update succeeded, as shown
    in the following code:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**以打开新标签页，并输入一个更新现有产品 `1` 的单价为 `8.99` 的变异。然后从返回的 `product` 对象中选择 ID 和单价，并显示更新是否成功，如下面的代码所示：
- en: '[PRE113]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Click **Run**, and note the response, as shown in the following output:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，并注意以下输出中的响应：
- en: '[PRE114]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Switch back to the tab with the subscription, and note the response and that
    the subscription is still active, indicated by the spinners on the tab and the
    **Cancel** button, as shown in *Figure 12.14*:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回包含订阅的标签页，并注意响应以及订阅仍然处于活动状态，这可以通过标签页上的旋转器和**取消**按钮来指示，如图*12.14*所示：
- en: '![](img/B19587_12_14.png)'
  id: totrans-463
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_12_14.png)'
- en: 'Figure 12.14: An active subscription shows a spinner'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14：活动订阅显示旋转器
- en: Switch back to the tab with the update mutation, change the unit price to `7.99`,
    and click **Run**. Then, switch back to the tab with the subscription, and note
    that it receives that update notification too.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回包含更新变异的标签页，将单价更改为 `7.99`，然后点击**运行**。然后切换回包含订阅的标签页，并注意它也收到了该更新通知。
- en: Switch back to the tab with the update mutation, change the unit price to `9.99`,
    and click **Run**. Then, switch back to the tab with the subscription, and note
    that it has not been sent any notifications because the unit price was increased,
    not reduced.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回更新变体的标签页，将单价更改为 `9.99`，然后点击 **运行**。然后，切换回订阅的标签页，并注意它没有收到任何通知，因为单价是增加的，而不是减少的。
- en: Close the browser, and shut down the web server.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器，并关闭 web 服务器。
- en: Practicing and exploring
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些实际操作练习，以及通过深入研究本章主题来测试你的知识和理解。
- en: Exercise 12.1 – Test your knowledge
  id: totrans-470
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What transport protocol does a GraphQL service use?
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GraphQL 服务使用什么传输协议？
- en: What media type does GraphQL use for its queries?
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GraphQL 使用什么媒体类型进行其查询？
- en: How can you parameterize GraphQL queries?
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何参数化 GraphQL 查询？
- en: What are the benefits of using Strawberry Shake over a regular HTTP client for
    GraphQL queries?
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Strawberry Shake 而不是常规 HTTP 客户端进行 GraphQL 查询有哪些好处？
- en: How might you insert a new product into the Northwind database?
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何将新产品插入 Northwind 数据库？
- en: Exercise 12.2 – Explore topics
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.2 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下一页上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-12---combining-data-sources-using-graphql](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-12---combining-data-sources-using-graphql)'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-12---combining-data-sources-using-graphql](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-12---combining-data-sources-using-graphql)'
- en: Exercise 12.3 – Practice building .NET clients
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.3 – 练习构建 .NET 客户端
- en: In `HomeController.cs`, add an action method named `Categories` , and implement
    it to query the `categories` field with a variable for the `id`. On the page,
    allow the visitor to submit an `id`, and note the category information and a list
    of its products.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `HomeController.cs` 中，添加一个名为 `Categories` 的操作方法，并实现它以查询 `categories` 字段，其中包含一个用于
    `id` 的变量。在页面上，允许访问者提交 `id`，并注意类别信息和其产品列表。
- en: Summary
  id: totrans-482
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned about:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了以下内容：
- en: Some of the concepts of GraphQL.
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些 GraphQL 的概念。
- en: How to build a `Query` class with fields that represent entities that can be
    queried.
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建一个 `Query` 类，其中包含表示可查询实体的字段。
- en: How to use the Banana Cake Pop tool to explore a GraphQL service schema.
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Banana Cake Pop 工具探索 GraphQL 服务架构。
- en: How to use the REST Client extension to POST to a GraphQL service.
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 REST 客户端扩展向 GraphQL 服务 POST 数据。
- en: How to create a .NET client for a GraphQL service.
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为 GraphQL 服务创建 .NET 客户端。
- en: How to implement GraphQL mutations.
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现 GraphQL 变更。
- en: How to implement GraphQL subscriptions.
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现 GraphQL 订阅。
- en: In the next chapter, you will learn about the gRPC service technology that can
    be used to implement efficient microservices.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解可以用来实现高效微服务的 gRPC 服务技术。
- en: Learn more on Discord
  id: totrans-492
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——在那里您可以分享反馈、向作者提问，并了解新书发布——请扫描下面的二维码：
- en: '[https://packt.link/apps_and_services_dotnet8](https://packt.link/apps_and_services_dotnet8)'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/apps_and_services_dotnet8](https://packt.link/apps_and_services_dotnet8)'
- en: '![](img/QR_Code3048220001028652625.png)'
  id: totrans-495
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code3048220001028652625.png)'
