["```cs\nbuilder.Services.AddScoped(sp => new HttpClient { \n    BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) }); \n```", "```cs\n@inject HttpClient Http[Inject]\npublic HttpClient Http { get; set; } \n```", "```cs\npublic class TaskItem\n{\n    public int TaskItemId { get; set; }\n    public string? TaskName { get; set; }\n    public bool IsComplete { get; set; }\n} \n```", "```cs\nIList<TaskItem>? tasks;\nstring requestUri = \"api/TaskItems\";\n\ntasks = await Http.GetFromJsonAsync<IList<TaskItem>>(requestUri); \n```", "```cs\nTaskItem? task;\nstring requestUri = \"api/TaskItems/{id}\";\ntask = await Http.GetFromJsonAsync<TaskItem>(requestUri); \n```", "```cs\nTaskItem newTaskItem = new() { TaskName = \"Buy Milk\"};\nstring requestUri = \"api/TaskItems\";\nvar response = \n    await Http.PostAsJsonAsync(requestUri, newTaskItem);\nif (response.IsSuccessStatusCode)\n{\n    var task = \n        await response.Content.ReadFromJsonAsync<TaskItem>();\n}\nelse\n{\n    // handle error\n}; \n```", "```cs\nstring requestUri = $\"api/TaskItems/{updatedTaskItem.TaskItemId}\";\nvar response = \n    await Http.PutAsJsonAsync<TaskItem>\n        (requestUri, updatedTaskItem);\nif (response.IsSuccessStatusCode)\n{\n    var task = \n        await response.Content.ReadFromJsonAsync<TaskItem>();\n}\nelse\n{\n    // handle error\n}; \n```", "```cs\nstring requestUri = $\"api/TaskItems/{taskItem.TaskItemId}\";\nvar response = await Http.DeleteAsync(requestUri);\nif (!response.IsSuccessStatusCode)\n{\n    // handle error\n}; \n```", "```cs\n    **public** class TaskItem \n    ```", "```cs\n    public int TaskItemId { get; set; }\n    public string? TaskName { get; set; }\n    public bool IsComplete { get; set; } \n    ```", "```cs\n    \"ConnectionStrings\": {\n      \"TaskManagerServerContext\": \"Server={Server name}; Database=TaskManager; Trusted_Connection=True; Encrypt=False;\"\n    } \n    ```", "```cs\n    Add-Migration Init\n    Update-Database \n    ```", "```cs\n    <link href=\"css/bootstrap/css/bootstrap.min.css\" \n            rel=\"stylesheet\" /> \n    ```", "```cs\n    <link href=\"css/bootstrap-icons/font/bootstrap-icons.css\"\n          rel=\"stylesheet\" /> \n    ```", "```cs\n    public **partial** class Index \n    ```", "```cs\n    using Microsoft.AspNetCore.Components; \n    ```", "```cs\n    [Inject] public HttpClient Http { get; set; } \n    ```", "```cs\n    private IList<TaskItem>? tasks;\n    private string? error;\n    protected override async Task OnInitializedAsync()\n    {\n        try\n        {\n            string requestUri = \"api/TaskItems\";\n            tasks =\n                await Http.GetFromJsonAsync<IList<TaskItem>>\n                (requestUri);\n        }\n        catch (Exception)\n        {\n            error = \"Error Encountered\";\n        };\n    } \n    ```", "```cs\n    using System.Net.Http.Json;\n    using TaskManager.Shared; \n    ```", "```cs\n    @if (tasks == null)\n    {\n        <p><em>Loading...</em></p>\n    }\n    else\n    {\n        @foreach (var taskItem in tasks)\n        {\n        }\n    } \n    ```", "```cs\n    <div class=\"d-flex col-md-6 mx-auto border-bottom\" \n        @key=\"taskItem\">\n        <div class=\"p-2 flex-fill\">\n            <input type=\"checkbox\"\n                checked=\"@taskItem.IsComplete\" />\n            <span>\n                @taskItem.TaskName\n            </span>\n        </div>\n        <div class=\"p-1\">\n            <button type=\"button\" \n                    class=\"btn btn-outline-danger btn-sm\" \n                    title=\"Delete task\"> \n                <span class=\"bi bi-trash\"></span>\n            </button>\n        </div>\n    </div> \n    ```", "```cs\n    .completed-task {\n        text-decoration: line-through;\n    } \n    ```", "```cs\n    <link href=\"TaskManager.Client.styles.css\" \n          rel=\"stylesheet\" /> \n    ```", "```cs\n    <span \n       class=\"@((taskItem.IsComplete? \"completed-task\" : \"\"))\">\n       @taskItem.TaskName\n    </span> \n    ```", "```cs\n    @onchange=\"@(()=>CheckboxChecked(taskItem))\" \n    ```", "```cs\n    private async Task CheckboxChecked(TaskItem task)\n    {\n        task.IsComplete = !task.IsComplete;\n        string requestUri = $\"api/TaskItems/{task.TaskItemId}\";\n        var response =\n            await Http.PutAsJsonAsync<TaskItem>\n            (requestUri, task);\n        if (!response.IsSuccessStatusCode)\n        {\n            error = response.ReasonPhrase;\n        };\n    } \n    ```", "```cs\n    <button type=\"button\" \n            class=\"btn btn-outline-danger btn-sm\"\n            title=\"Delete task\" \n            **@****onclick****=****\"@(()=>DeleteTask(taskItem))\"****>**\n        <span class=\"bi bi-trash\"></span>\n    </button> \n    ```", "```cs\n    private async Task DeleteTask(TaskItem taskItem)\n    {\n        tasks!.Remove(taskItem);\n        StateHasChanged();\n        string requestUri = \n            $\"api/TaskItems/{taskItem.TaskItemId}\";\n        var response = await Http.DeleteAsync(requestUri);\n        if (!response.IsSuccessStatusCode)\n        {\n            error = response.ReasonPhrase;\n        };\n    } \n    ```", "```cs\n    <div class=\"d-flex col-md-6 mx-auto py-2\">\n        <input type=\"text\" \n               class=\"form-control m-1\" \n               placeholder=\"Enter Task\" @bind=\"newTask\" />\n        <button type=\"button\" class=\"btn btn-success\"\n            @onclick=\"AddTask\">\n            Add\n        </button>\n    </div> \n    ```", "```cs\n    private string? newTask; \n    ```", "```cs\n    private async Task AddTask()\n    {\n        if (!string.IsNullOrWhiteSpace(newTask))\n        {\n            TaskItem newTaskItem = new TaskItem\n            {\n                TaskName = newTask,\n                IsComplete = false\n            };\n            tasks!.Add(newTaskItem);\n            string requestUri = \"api/TaskItems\";\n            var response =\n                await Http.PostAsJsonAsync\n                (requestUri, newTaskItem);\n            if (response.IsSuccessStatusCode)\n            {\n                newTask = string.Empty;\n            }\n            else\n            {\n                error = response.ReasonPhrase;\n            };\n        };\n    } \n    ```"]