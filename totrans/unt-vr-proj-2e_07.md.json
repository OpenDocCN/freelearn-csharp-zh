["```cs\nusing UnityEngine; \n\npublic class GlideLocomotion : MonoBehaviour \n{ \n  public float velocity = 0.4f; \n\n  void Update () \n  { \n    Vector3 moveDirection = Camera.main.transform.forward; \n    moveDirection *= velocity * Time.deltaTime; \n    transform.position += moveDirection; \n  } \n} \n```", "```cs\nmoveDirection = moveDirection * velocity * Time.deltaTime; \ntransform.position = transform.position  + moveDirection; \n```", "```cs\n  void Update () \n  { \n    Vector3 moveDirection = Camera.main.transform.forward; \n    moveDirection *= velocity * Time.deltaTime; \n moveDirection.y = 0f; \n    transform.position += moveDirection; \n  } \n```", "```cs\nusing UnityEngine; \n\npublic class GlideLocomotion : MonoBehaviour \n{ \n  public float velocity = 0.4f; \n\n private CharacterController character; void Start () \n  { character = GetComponent<CharacterController>(); } \n\n  void Update () \n  { \n    Vector3 moveDirection = Camera.main.transform.forward; \n    moveDirection *= velocity * Time.deltaTime; \n    moveDirection.y = 0.0f; \n character.Move(moveDirection); \n  } \n}\n```", "```cs\n      void Update () \n      {\n        character.SimpleMove(Camera.main.transform.forward * velocity);\n      }\n\n```", "```cs\nusing UnityEngine; \n\npublic class GlideLocomotion : MonoBehaviour \n{ \n  public float velocity = 0.7f; \n\n  private CharacterController controller; \n  private bool isWalking = false; \n\n  void Start() \n  { \n    controller = GetComponent<CharacterController> (); \n  } \n\n  void Update () { \n if (Input.GetButtonDown(\"Fire1\")) \n        isWalking = true;\n    else if (Input.GetButtonUp(\"Fire1\"))\n        isWalking = false;  if (isWalking) {      controller.SimpleMove (Camera.main.transform.forward * velocity);\n    }\n  } \n} \n```", "```cs\n public float comfortAngle = 30f;\n private bool hasRotated = true;\n```", "```cs\n  void Update()\n  {\n    if (Input.GetButtonDown(\"Fire1\"))\n      isWalking = true;\n    else if (Input.GetButtonUp(\"Fire1\"))\n      isWalking = false;\n\n    if (isWalking)\n      character.SimpleMove(transform.forward * velocity);\n\n    float axis = Input.GetAxis(\"Horizontal\"); \n    if (axis > 0.5f)\n    {\n      if (!hasRotated)\n        transform.Rotate(0, comfortAngle, 0);\n      hasRotated = true;\n    }\n    else if (axis < -0.5f)\n    {\n      if (!hasRotated)\n        transform.Rotate(0, -comfortAngle, 0);\n      hasRotated = true;\n    } \n    else\n    {\n      hasRotated = false;\n    }\n  }\n```", "```cs\n    Vector2 touchPos = GvrControllerInput.TouchPosCentered;\n    float axis = touchPos.x;\n    if (axis > 0.5f) ...\n```", "```cs\nusing UnityEngine;\n\npublic class LookTeleport : MonoBehaviour\n{\n    public GameObject target;\n    public GameObject ground;\n\n    void Update()\n    {\n        Transform camera = Camera.main.transform;\n        Ray ray;\n        RaycastHit hit;\n\n        if (Input.GetButtonDown(\"Fire1\"))\n        {\n          // start searching\n          target.SetActive(true);\n        }\n        else if (Input.GetButtonUp(\"Fire1\")) \n        {\n          // done searching, teleport player\n          target.SetActive(false);\n          transform.position = target.transform.position;\n        }\n        else if (target.activeSelf)\n        {\n          ray = new Ray(camera.position, camera.rotation * Vector3.forward);\n          if (Physics.Raycast(ray, out hit) && \n              (hit.collider.gameObject == ground))\n          {\n            // move target to look-at position\n            target.transform.position = hit.point;\n          }\n          else\n          {\n            // not looking a ground, reset target to player position\n            target.transform.position = transform.position;\n          }\n       }\n    }\n}\n```", "```cs\nusing UnityEngine.AI;\n```", "```cs\n  if (Physics.Raycast(ray, out hit))\n  {\n    NavMeshHit navHit;\n    if (NavMesh.SamplePosition(hit.point, out navHit, 1.0f, NavMesh.AllAreas))\n      target.transform.position = navHit.position;\n  }\n```", "```cs\n  if (Physics.Raycast(ray, out hit, LayerMask.GetMask(\"Teleport\")))\n```", "```cs\nusing UnityEngine;\n\npublic class LookSpawnTeleport : MonoBehaviour \n{\n  private Color saveColor;\n  private GameObject currentTarget;\n\n    void Update()\n    {\n        Transform camera = Camera.main.transform;\n        Ray ray;\n        RaycastHit hit;\n        GameObject hitTarget;\n\n        ray = new Ray(camera.position, camera.rotation * \n        Vector3.forward);\n        if (Physics.Raycast(ray, out hit, 10f, \n              LayerMask.GetMask(\"TeleportSpawn\")))\n        {\n            hitTarget = hit.collider.gameObject;\n            if (hitTarget != currentTarget) \n            {\n                Unhighlight();\n                Highlight(hitTarget);\n            }\n\n            if (Input.GetButtonDown(\"Fire1\"))\n            {\n                transform.position = hitTarget.transform.position;\n            }\n        }\n        else if (currentTarget != null)\n        {\n            Unhighlight();\n        }\n    }\n}\n```", "```cs\n    private void Highlight(GameObject target)\n    {\n        Material material = target.GetComponent<Renderer>().material;\n        saveColor = material.color;\n        Color hiColor = material.color;\n        hiColor.a = 0.8f; // more opaque\n        material.color = hiColor;\n        currentTarget = target;\n    }\n\n    private void Unhighlight()\n    {\n        if (currentTarget != null)\n        {\n          Material material = currentTarget.GetComponent<Renderer>().material;\n          material.color = saveColor;\n          currentTarget = null;\n        }\n    }\n```", "```cs\n            if (Input.GetButtonDown(\"Fire1\"))\n            {\n                transform.position = hitTarget.transform.position;\n                transform.rotation = hitTarget.transform.rotation;\n            }\n```", "```cs\nValve.VR.OpenVR.System.ResetSeatedZeroPose();\nValve.VR.OpenVR.Compositor.SetTrackingSpace(Valve.VR.ETrackingUniverseOrigin.TrackingUniverseSeated);\n```", "```cs\nprivate void TeleportRoomscale( Vector3 targetPosition )\n{\n    Transform camera = Camera.main.transform;\n    float cameraAngle = camera.eulerAngles.y;\n    transform.Rotate( 0f, -cameraAngle, 0f);\n    Vector3 offsetPos = camera.position - transform.position;\n    transform.position = targetPosition.position - offsetPos;\n}\n```"]