- en: Chapter 5. Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。模型
- en: Data is the heart of every application. A user enters data into the application,
    edits the entered data, and searches the data. We can even say that an application
    that we build is just an interface for the operations that we perform on the application
    data. So, it is absolutely necessary for any framework to provide a mechanism
    to handle data operations easier and more manageable. Models in ASP.NET MVC are
    used to represent the business domain data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是每个应用程序的核心。用户将数据输入到应用程序中，编辑输入的数据，并搜索数据。我们甚至可以说，我们构建的应用程序只是我们对应用程序数据进行操作的一个接口。因此，任何框架都绝对有必要提供一个机制来简化并更易于管理数据操作。ASP.NET
    MVC中的模型用于表示业务领域数据。
- en: 'In this chapter, you''ll be learning about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Models and their purpose
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型和它们的目的
- en: Creating a simple model and using it in the controller and views of the ASP.NET
    MVC application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ASP.NET MVC应用程序的控制器和视图中创建一个简单的模型并使用它
- en: Creating a model specific to a View model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建特定于视图模型的模型
- en: Data flow in an ASP.NET MVC application in the context of models and `ViewModels`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型和 `ViewModels` 的上下文中，ASP.NET MVC应用程序中的数据流
- en: Purpose of the Entity Framework along with its features and benefits
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Entity Framework的目的及其特性和优势
- en: Adding, updating, and deleting data using the Entity Framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Entity Framework添加、更新和删除数据
- en: Using the Entity Framework in ASP.NET MVC applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ASP.NET MVC应用程序中使用Entity Framework
- en: Models
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型
- en: Models are simple **POCO** ( **Plain Old C# Objects** ) classes representing
    your business domain data. For an e-commerce business, model classes would be
    `Product` , `Order` , and `Inventory` . If you are building an application for
    a university, model classes would be `Student` , `Teacher,` and `Subject` . Models
    represent the business domain data in your application and they are not aware
    of the underlying database that is being used in your application. In fact, you
    don't even need a database to work with models.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是简单的 **POCO** ( **Plain Old C# Objects** ) 类，代表你的业务领域数据。对于一个电子商务业务，模型类会是 `Product`、`Order`
    和 `Inventory`。如果你正在为大学构建应用程序，模型类会是 `Student`、`Teacher` 和 `Subject`。模型代表应用程序中的业务领域数据，并且它们不了解应用程序中使用的底层数据库。实际上，你甚至不需要数据库就可以与模型一起工作。
- en: They can represent the data stored in an XML file or CSV file or any other data
    in your application. Having said that, these models could be used to interact
    with your database (in most cases) but they don't have any dependency to the database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以表示存储在XML文件、CSV文件或其他应用程序中的数据。话虽如此，这些模型可以用来与数据库交互（在大多数情况下），但它们对数据库没有依赖。
- en: 'The following steps describe how to create an ASP.NET Core application that
    uses Models:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何创建一个使用模型的ASP.NET Core应用程序：
- en: Make sure to create an ASP.NET 5 application with an empty template. Install
    the ASP.NET Core `NuGet` package and configure this, as discussed in an earlier
    chapter.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保创建一个带有空模板的ASP.NET 5应用程序。安装ASP.NET Core的 `NuGet` 包，并按照前面章节中讨论的进行配置。
- en: Create a `Controllers` folder and create a `HomeController` with a single `Index`
    action method.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `Controllers` 文件夹，并创建一个具有单个 `Index` 动作方法的 `HomeController`。
- en: 'Create the following folder/files for the `Views` model:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `Views` 模型创建以下文件夹/文件：
- en: '`Views` : This folder is inside your project.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Views` : 此文件夹位于你的项目中。'
- en: '`Views\_ViewStart.cshtml` : This identifies the name of the `Layout` file.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Views_ViewStart.cshtml` : 此文件标识了 `Layout` 文件的名称。'
- en: '`Views\Shared` folder: This folder holds all the shared View components for
    your application.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Views\Shared` 文件夹：此文件夹包含你的应用程序的所有共享视图组件。'
- en: '`Shared\_Layout.cshtml` : This file identifies what your web application structure
    should look like.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shared_Layout.cshtml` : 此文件定义了你的Web应用程序结构应如何看起来。'
- en: '`Views\Home` folder: This folder contains all of the Views of your `HomeController`
    .'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Views\Home` 文件夹：此文件夹包含你的 `HomeController` 的所有视图。'
- en: '`Views\Home\Index.cshtml` : This is the view corresponding to the `Index` action
    method of `HomeController` .'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Views\Home\Index.cshtml` : 这是与 `HomeController` 的 `Index` 动作方法相对应的视图。'
- en: Now, we have created an ASP.NET Core application with Controllers and Views.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经创建了一个包含控制器和视图的ASP.NET Core应用程序。
- en: Let us create a `Models` folder in our application; this folder will contain
    all of your model files. In a real world application, this folder and the respective
    model files would reside in separate projects. For the sake of simplicity, we
    are keeping the `Models` folder and its files in the same project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在应用程序中创建一个 `Models` 文件夹；这个文件夹将包含所有你的模型文件。在实际应用中，这个文件夹和相应的模型文件将位于不同的项目中。为了简化，我们将
    `Models` 文件夹及其文件保留在同一个项目中。
- en: '![Models](img/Image00067.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![模型](img/Image00067.jpg)'
- en: 'Let us create a simple model class `Product` model, in the `Models` folder:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `Models` 文件夹中创建一个简单的模型类 `Product` 模型：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This `Product` model class is no different from any other C# class and contains
    a few properties about the product.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `Product` 模型类与其他任何 C# 类没有区别，并包含一些关于产品的属性。
- en: Update the `Index` action method in `HomeController` to use the `Product` model,
    as shown in the following code snippet. We are building the model data and passing
    the model data to the View so that it can be shown to the users. However, it is
    *NOT* recommended to build the Model data in the controller's action methods as
    it violates the separation of concerns. For the sake of simplicity only, we are
    building the Model data in an action method.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `HomeController` 中的 `Index` 动作方法，使用 `Product` 模型，如下面的代码片段所示。我们正在构建模型数据并将模型数据传递给视图，以便将其显示给用户。然而，**不推荐**在控制器动作方法中构建模型数据，因为这违反了关注点分离原则。为了简化起见，我们在这里的动作方法中构建模型数据。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the corresponding `Index` View method to use the Model data loop through
    each product and show it as an unordered list item. The `@model` in the first
    line represents the Model metadata; the type of data being passed to the View.
    The Model in the `for…each` loop represents the actual data itself, a list of
    products in our case:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更新相应的 `Index` 视图方法，使其使用模型数据循环遍历每个产品，并以无序列表项的形式显示。第一行的 `@model` 表示模型元数据；传递给视图的数据类型。在
    `for…each` 循环中的模型表示实际数据本身，在我们的例子中是一个产品列表：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you run the application, you''ll get the following output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用程序时，你会得到以下输出：
- en: '![Models](img/Image00068.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![模型](img/Image00068.jpg)'
- en: We have successfully created a Model and have used it in our Controller and
    View.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功创建了一个模型，并在我们的控制器和视图中使用了它。
- en: 'Let us create a comparatively complex Model class, `Order` (`Order.cs` in the
    `Models` folder), which contains a list of products and their total amount:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个相对复杂的模型类，`Order`（位于 `Models` 文件夹中的 `Order.cs`），它包含产品列表及其总金额：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Models](img/Image00069.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![模型](img/Image00069.jpg)'
- en: Now, we have to update the `Index` action method to use the `Order` model. Once
    we build the list of products, we are assigning the products list to the `Order`
     property and calculating the total cost of the order. These calculations would
    usually be done as part of the business layer. Again, for the sake of simplicity,
    we are building the data Model and calculations here in the action; this should
    never be the case in a real world application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须更新 `Index` 动作方法以使用 `Order` 模型。一旦我们构建了产品列表，我们就将产品列表分配给 `Order` 属性并计算订单的总成本。这些计算通常作为业务层的一部分来完成。同样，为了简化，我们在这里的动作中构建数据模型和计算；在现实世界中，这种情况不应发生。
- en: 'The code highlighted in bold is the changes that we have made in the action
    method:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 突出的粗体代码是我们对操作方法所做的更改：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The View is updated to accommodate the Model changes. Model metadata (`@model`
    ) is changed to indicate that the Order information is passed to the View instead
    of the list of products.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 视图已更新以适应模型的变化。模型元数据（`@model`）已更改，以指示将订单信息传递给视图，而不是产品列表。
- en: 'Then, we are showing the list of products in table format. Please note that
    all of the Model data (`Order` object and its properties, in this case) can be
    accessed through the Model. For example, the `Products` class can be accessed
    through `Model.Products` and the value of the `Total` can be obtained through
    `Model.Total` :'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们以表格格式显示产品列表。请注意，所有模型数据（在这种情况下为 `Order` 对象及其属性）都可以通过模型访问。例如，可以通过 `Model.Products`
    访问 `Products` 类，并通过 `Model.Total` 获取 `Total` 的值：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you run the application, you''ll see the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用程序时，你会看到以下输出：
- en: '![Models](img/Image00070.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![模型](img/Image00070.jpg)'
- en: Models specific to a View component
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图组件特定的模型
- en: There are scenarios where you might want to update only a few properties in
    a large Model or you might want to create a new Model based on a few models. In
    such scenarios, it is better to create a new Model specific to the View.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些场景，您可能只想更新大型模型中的几个属性，或者您可能想基于几个模型创建一个新的模型。在这种情况下，创建一个针对视图的新模型会更好。
- en: For example, let us assume that we are building a screen where you update the
    price of the product. This simple screen may contain only three properties—product
    ID, product name, and price of the product. But the product's Model may contain
    more than 30 properties to hold all details of the product such as manufacturer,
    color, size, and other properties. Instead of sending the complete Model with
    all the properties, we can create a new Model specific to this view with only
    a few properties—ID, Name, and Price.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们假设我们正在构建一个屏幕，您可以在其中更新产品的价格。这个简单的屏幕可能只包含三个属性——产品ID、产品名称和产品价格。但是，产品的模型可能包含超过30个属性来存储产品的所有详细信息，如制造商、颜色、尺寸和其他属性。我们不必发送包含所有属性的完整模型，而是可以创建一个针对此视图的新模型，只包含几个属性——ID、名称和价格。
- en: Note on ViewModels
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于ViewModel的说明
- en: The ViewModels are entities where when you update the Model, your View would
    get updated automatically and vice versa. In many online articles and even in
    some books, they are referring to *ViewModels* when they are actually trying to
    mean *Models specific to the View* .
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ViewModels是实体，当您更新模型时，您的视图会自动更新，反之亦然。在许多在线文章甚至一些书中，当它们实际上试图指代“针对视图的模型”时，它们在提到*ViewModels*。
- en: In ViewModels, binding is two ways—when you update either the Model or the View,
    the other one would get updated automatically. Let us consider a simple example;
    you have a form with various fields on the left-hand side and print preview on
    the right side. In this case, whatever you type in real time in the form will
    be reflected immediately on the right side. In such cases, you can use pure View
    models when you type, your ViewModel would be updated and that `ViewModel` would
    be consumed in the right-hand side print preview. These pure ViewModels are being
    used in advanced JavaScript frameworks such as **Knockout** or **AngularJS** .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在ViewModel中，绑定是双向的——当您更新模型或视图时，另一个会自动更新。让我们考虑一个简单的例子；您有一个带有左侧各种字段和右侧打印预览的表单。在这种情况下，您在表单中实时输入的内容将立即反映在右侧。在这种情况下，当您输入时，您可以使用纯ViewModel，您的ViewModel会更新，并且该`ViewModel`会在右侧的打印预览中被消费。这些纯ViewModel正在被用于像**Knockout**或**AngularJS**这样的高级JavaScript框架中。
- en: In *Models specific to the View* , we are binding in only one way from the Model
    to the View. Here, we are sending a Model specific to the View instead of the
    generic Model (which represents a business domain class).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在*针对视图的模型*中，我们只从模型到视图进行单向绑定。在这里，我们发送一个针对视图的特定模型，而不是通用的模型（它代表一个业务域类）。
- en: However, in this book, we will be referring to *Models specific to View* as
    `ViewModel` for brevity. Unless otherwise specified, you should read all ViewModels
    as *Models specific to View* . So, I am making the same mistake made by other
    authors ![Note on ViewModels](img/Image00071.jpg) .
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这本书中，我们将为了简洁起见将*针对视图的模型*称为`ViewModel`。除非另有说明，您应该将所有ViewModel视为*针对视图的模型*。因此，我在这里犯了其他作者犯过的同样的错误
    ![关于ViewModel的说明](img/Image00071.jpg)。
- en: Data flow with respect to a Model
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与模型相关的数据流
- en: 'The following block diagram shows the data flow in an ASP.NET MVC application:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的块图显示了ASP.NET MVC应用程序中的数据流：
- en: '![Data flow with respect to a Model](img/Image00072.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![与模型相关的数据流](img/Image00072.jpg)'
- en: '**Data Source** represents your application data. The application data could
    reside anywhere—from full-fledged RDBMS such as SQL servers to simple Excel spreadsheets,
    or anything in between.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据源**代表您的应用程序数据。应用程序数据可以存储在任何地方——从完整的RDBMS（如SQL服务器）到简单的Excel电子表格，或者两者之间的任何地方。'
- en: '**Models** represent the business domain data for your application and are
    independent of the data source being used. The same model could be used with different
    data sources.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型**代表您应用程序的业务域数据，并且与所使用的数据源无关。相同的模型可以与不同的数据源一起使用。'
- en: We can use the **Model as-is in our views** to get data or to present it. But
    in some views, you might not need all the properties of the model. So, instead
    of sending the entire Model to the View, we create models specific to the View
    and use them in our View. This makes things simpler.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的视图中**直接使用模型**来获取数据或展示数据。但在某些视图中，你可能不需要模型的所有属性。因此，我们不是将整个模型发送到视图，而是创建特定于视图的模型并使用它们在我们的视图中。这使得事情变得更简单。
- en: 'The following is the high-level sequence of events that happens when you store
    or retrieve a record in ASP.NET Core using the Model:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 ASP.NET Core 中使用模型存储或检索记录时，以下是一个高级事件序列：
- en: Users enter the data in a form (created using Views) in the application. The
    fields in the form do not need to represent the complete model as we need only
    a few properties in the Model.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在应用程序中通过表单（使用视图创建）输入数据。表单中的字段不需要代表完整的模型，因为我们只需要模型中的几个属性。
- en: The entered data is passed to the controller where Model binding happens. Model
    binding is the process where the data entered in the View gets mapped to the Model
    or ViewModel.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入的数据被传递到控制器，在那里发生模型绑定。模型绑定是将视图中的输入数据映射到模型或 ViewModel 的过程。
- en: If the data is received in the ViewModel, then we would be converting the ViewModel
    to the Model.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果数据是在 ViewModel 中接收的，那么我们将把 ViewModel 转换为 Model。
- en: Finally, the Model data is stored in the data source.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，模型数据存储在数据源中。
- en: Till now, we have been handling only in-memory data in our application. In almost
    all real world applications, some form of the database will be used for data storage,
    access, and retrieval. In the next section, we will discuss the Entity Framework
    (ORM framework), which makes data access simpler from a .NET application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在我们的应用程序中处理内存中的数据。在几乎所有的实际应用中，都会使用某种形式的数据库来存储、访问和检索数据。在下一节中，我们将讨论
    Entity Framework（对象关系映射框架），它使得从 .NET 应用程序中进行数据访问变得更加简单。
- en: Model binding
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型绑定
- en: '**Model binding** is the process of mapping the Model data coming from the
    View to the ViewModel parameter of the action method in the Controller.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型绑定**是将来自视图的模型数据映射到控制器动作方法的 ViewModel 参数的过程。'
- en: Let us consider a simple form with a couple of form fields—`Name` and `EmailID`
    . On the submission of the form, these values would be mapped to the `ViewModel`
    object of the action method of the Controller. Model binding takes care of this
    mapping. The Model binder looks for a match in the form fields, query strings,
    and request parameters.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单的表单，其中包含几个表单字段——`Name` 和 `EmailID`。在表单提交时，这些值将被映射到控制器动作方法的 `ViewModel`
    对象。模型绑定负责这个映射。模型绑定器会在表单字段、查询字符串和请求参数中寻找匹配项。
- en: In the preceding example, any class with these properties would be picked up
    by ModelBinder without any issues.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，任何具有这些属性的类都会被 ModelBinder 无任何问题地选中。
- en: 'As the following `Person` class contains the `Name` and `EmailID` properties,
    the model binder would not complain about using this model for mapping the entered
    values in the form:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以下 `Person` 类包含 `Name` 和 `EmailID` 属性，模型绑定器不会对使用此模型来映射表单中输入的值提出任何异议：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code snippet shows how to use the `Person` class in the action
    method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何在动作方法中使用 `Person` 类：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Entity Framework
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Entity Framework
- en: The Entity Framework is the **Object Relational Mapping (ORM)**  framework that
    enables developers to work on domain-specific objects directly for data access
    instead of working on database queries. This reduces a lot of the code complexity
    in the data access layer in the application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework 是 **对象关系映射 (ORM)** 框架，它使开发者能够直接在域特定对象上工作以进行数据访问，而不是在数据库查询上工作。这大大减少了应用程序数据访问层中的代码复杂性。
- en: 'Before discussing the Entity Framework and its features, let us pause for a
    moment and think about the steps that we follow when we try to save some information
    to the database when using ADO.NET:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 Entity Framework 和其功能之前，让我们暂停一下，思考一下当我们尝试使用 ADO.NET 将一些信息保存到数据库时我们遵循的步骤：
- en: Construct the business domain object.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造业务域对象。
- en: Create a connection to your database.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建到你的数据库的连接。
- en: Open the connection.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开连接。
- en: Create a command object along with the command type.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个命令对象以及命令类型。
- en: Add the properties of your business domain object to the parameters of the command
    object.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的业务域对象的属性添加到命令对象的参数中。
- en: Execute the command that saves the data into the database.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行将数据保存到数据库中的命令。
- en: We have to follow the previously mentioned six steps for common operations such
    as saving a piece of data into the database.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须遵循之前提到的六个步骤来进行常见操作，例如将数据保存到数据库中。
- en: 'If you are using an ORM framework such as the Entity Framework, you just need
    three steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用ORM框架，例如Entity Framework，你只需要三个步骤：
- en: Construct the business domain object.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建业务域对象。
- en: Create the `DbContext` class for your business domain object. The instance of
    the `DbContext` class represents the session with the database.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的业务域对象创建`DbContext`类。`DbContext`类的实例代表了与数据库的会话。
- en: Save it to the database using the instance of the `DBContext` class.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DBContext`类的实例将数据保存到数据库中。
- en: You might wonder how that is possible.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道这是如何实现的。
- en: As a matter of fact, in the background, the Entity Framework creates a connection
    to the database and executes the query to save the business domain object to the
    database. To make it simple, the Entity Framework writes all the data access code
    for you so that you can concentrate on achieving the business functionality of
    the application rather than writing the database layer code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在后台，Entity Framework会创建与数据库的连接并执行查询，将业务域对象保存到数据库中。为了简化，Entity Framework为你编写所有数据访问代码，这样你就可以专注于实现应用程序的业务功能，而不是编写数据库层代码。
- en: The Entity Framework is independent of ASP.NET MVC
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Entity Framework独立于ASP.NET MVC
- en: As discussed earlier, the Entity Framework is an ORM framework for accessing
    data and is independent of ASP.NET MVC. The Entity Framework could be used in
    **Windows Communication Foundation** ( **WCF** ) services, Web API services, and
    even in console applications. You could use the Entity Framework in any type of
    application and make use of it to access data using objects. The concepts and
    the functionalities of the Entity Framework remain the same, irrespective of the
    type of application that you use it with.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Entity Framework是一个用于访问数据的ORM框架，并且与ASP.NET MVC独立。Entity Framework可以用于**Windows
    Communication Foundation** ( **WCF** )服务、Web API服务和甚至控制台应用程序。你可以在任何类型的应用程序中使用Entity
    Framework，并利用它使用对象来访问数据。无论你使用哪种类型的应用程序，Entity Framework的概念和功能都保持不变。
- en: Now, we are going to use the Entity Framework with the console application.
    This allows us to concentrate on the task at hand and demonstrate the functionalities
    of the Entity Framework instead of working on the boilerplate code of the ASP.NET
    Core application. In a later part of this chapter, we will integrate the Entity
    Framework with the ASP.NET Core application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用控制台应用程序与Entity Framework结合使用。这使我们能够专注于手头的任务，并展示Entity Framework的功能，而不是编写ASP.NET
    Core应用程序的样板代码。在本章的后续部分，我们将集成Entity Framework与ASP.NET Core应用程序。
- en: The latest version of the Entity Framework for the SQL server is 7.0.0 and it
    is still in beta at the time of writing this book. EF7 (Entity Framework 7) brings
    significant changes when compared to its previous version (Entity Framework 6).
    However, EF7 is the recommended version when building ASP.NET 5 applications and
    hence we will be using this version in this book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server的Entity Framework最新版本是7.0.0，在撰写本书时仍处于测试版。与之前的版本（Entity Framework 6）相比，EF7（Entity
    Framework 7）带来了重大变化。然而，EF7是构建ASP.NET 5应用程序时的推荐版本，因此我们将在这本书中使用这个版本。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We need a database to explain many of the features of the Entity Framework.
    Please install SQL Server 2014 Express on your PC before continuing further. Step
    by step instructions for installing SQL Server 2014 Express and SQL Server Management
    Studio is given in *Appendix A* .
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个数据库来解释Entity Framework的许多功能。请在继续之前在你的PC上安装SQL Server 2014 Express。安装SQL
    Server 2014 Express和SQL Server Management Studio的逐步说明在*附录A*中给出。
- en: Creating console applications with the Entity Framework
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Entity Framework创建控制台应用程序
- en: 'Follow these steps to create a simple console application:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个简单的控制台应用程序：
- en: Select **File** | **New Project** and select  **Console Application** .
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**文件** | **新建项目**，然后选择**控制台应用程序**。
- en: Name the project and click on **OK** .![Creating console applications with the
    Entity Framework](img/Image00073.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目命名并点击**确定**。![使用Entity Framework创建控制台应用程序](img/Image00073.jpg)
- en: Installing the Entity Framework 7 NuGet package
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Entity Framework 7 NuGet包
- en: 'There are two ways to install any `NuGet` package in your application:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序中安装任何`NuGet`包有两种方式：
- en: Using the `NuGet` Package Manager
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`NuGet`包管理器
- en: Using Package Manager Console
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包管理器控制台
- en: Using the NuGet Package Manager
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用NuGet包管理器
- en: 'People who prefer graphical interfaces can use this option:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢图形界面的用户可以使用此选项：
- en: Right-click on the console project and select **Manage NuGet Packages** from
    the context menu:![Using the NuGet Package Manager](img/Image00074.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击控制台项目，从上下文菜单中选择 **管理 NuGet 包**：![使用 NuGet 包管理器](img/Image00074.jpg)
- en: Search for `EntityFramework.MicrosoftSqlServer` in the `NuGet` package and make
    sure the **Include prerelease** checkbox is checked. Click on **Install** once
    you select **EntityFramework.MicrosoftSqlServer** and select **Latest pre-release
    7.0.0-rc1-final** (at the time of writing this book). You can select any latest
    version of Entity Framework 7:![Using the NuGet Package Manager](img/Image00075.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NuGet` 包中搜索 `EntityFramework.MicrosoftSqlServer` 并确保已勾选 **包含预发布版** 复选框。选择
    **EntityFramework.MicrosoftSqlServer** 并点击 **安装**，然后选择 **最新预发布版 7.0.0-rc1-final**（本书编写时）。您可以选择
    Entity Framework 7 的任何最新版本：![使用 NuGet 包管理器](img/Image00075.jpg)
- en: Once you click on **Install** , the `NuGet` package manager will ask you to
    review the changes. Click on **OK** :![Using the NuGet Package Manager](img/Image00076.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装** 后，`NuGet` 包管理器将要求您审查更改。点击 **确定**：![使用 NuGet 包管理器](img/Image00076.jpg)
- en: Click on **I Accept** in the **License Acceptance** window:![Using the NuGet
    Package Manager](img/Image00077.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **许可接受** 窗口中点击 **我接受**：![使用 NuGet 包管理器](img/Image00077.jpg)
- en: Once you click on **I Accept** , it will install the Entity Framework with all
    its dependencies. In the **Output** window, you will get the **Finished** message
    once the installation is complete:![Using the NuGet Package Manager](img/Image00078.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **我接受** 后，它将安装包含所有依赖项的 Entity Framework。在 **输出** 窗口中，安装完成后将显示 **完成** 消息：![使用
    NuGet 包管理器](img/Image00078.jpg)
- en: Using the Package Manager Console
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用包管理器控制台
- en: 'To install the `NuGet` package using the Package Manager Console, follow these
    steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用包管理器控制台安装 `NuGet` 包，请按照以下步骤操作：
- en: Open the **Package Manager Console** window by selecting the menu option **View**
    | **Other Windows** | **Package Manager Console** .![Using the Package Manager
    Console](img/Image00079.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择菜单选项 **查看** | **其他窗口** | **包管理器控制台** 打开 **包管理器控制台** 窗口。![使用包管理器控制台](img/Image00079.jpg)
- en: Type `Install-Package EntityFramework.MicrosoftSqlServer - Pre` in the **Package
    Manager Console** window as shown in the following screenshot:![Using the Package
    Manager Console](img/Image00080.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **包管理器控制台** 窗口中输入 `Install-Package EntityFramework.MicrosoftSqlServer - Pre`，如图所示：![使用包管理器控制台](img/Image00080.jpg)
- en: Once the installation is complete, a message, **Successfully installed 'EntityFramework.MicrosoftSqlServer
    7.0.0-rc1-final'** , will be shown:![Using the Package Manager Console](img/Image00081.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，将显示一条消息，**成功安装 'EntityFramework.MicrosoftSqlServer 7.0.0-rc1-final'**：![使用包管理器控制台](img/Image00081.jpg)
- en: Installing Entity Framework commands
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Entity Framework 命令
- en: 'We need to install the Entity Framework commands package in order to perform
    migration activities. Migration includes the creation of a database and its associated
    tables. Any changes in the schema will also be taken care of by migration:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装 Entity Framework 命令包以便执行迁移活动。迁移包括创建数据库及其相关表。任何架构更改也将由迁移处理：
- en: '![Installing Entity Framework commands](img/Image00082.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Entity Framework 命令](img/Image00082.jpg)'
- en: 'As discussed earlier, we need to follow three steps in order to interact with
    the database when we are using the Entity Framework:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当我们使用 Entity Framework 与数据库交互时，需要遵循三个步骤：
- en: Create the `Model` classes.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Model` 类。
- en: Create the `DbContext` class for your business domain object. The instance of
    the `DbContext` class represents the session with the database.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的业务域对象创建 `DbContext` 类。`DbContext` 类的实例代表与数据库的会话。
- en: Construct the business domain object and save it to the database using the instance
    of the `DBContext` class.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `DBContext` 类的实例构建业务域对象并将其保存到数据库。
- en: Let us discuss each of the preceding steps in details and try to save an object
    to the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论前面的每个步骤，并尝试将对象保存到数据库。
- en: Creating Model classes
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Model 类
- en: The `Model` classes are simple POCO objects, which can be used with the Entity
    Framework.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Model` 类是简单的 POCO 对象，可以与 Entity Framework 一起使用。'
- en: Let us create a POCO class for our business domain object, the `Employee` class
    in our case. I have created a new file named `Employee.cs` in our console application
    with the following content. This `Employee` class contains a few properties of
    an employee and has no special properties or fields to make it work with the Entity
    Framework.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的业务域对象创建一个 POCO 类，在我们的例子中是 `Employee` 类。我在控制台应用程序中创建了一个名为 `Employee.cs`
    的新文件，其内容如下。这个 `Employee` 类包含了一些员工属性，并且没有特殊属性或字段使其与 Entity Framework 一起工作。
- en: 'Let''s take a look at the following code snippet:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码片段：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By convention, if the property name is `Id` or `ClassName+Id` , it will be considered
    as a primary key by Entity Framework while creating the database table.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，如果属性名为 `Id` 或 `ClassName+Id`，Entity Framework 在创建数据库表时会将其视为主键。
- en: Properties with string data types will be created as fields of the type `nvarchar(max)`
    . However, we can override this behavior by using annotations, which we will be
    discussed later.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串数据类型的属性将被创建为 `nvarchar(max)` 类型的字段。然而，我们可以通过使用注解来覆盖这种行为，我们将在稍后讨论。
- en: Creating the DbContext class
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 DbContext 类
- en: The instance of the `DbContext` class represents the session to the database
    and this `DbContext` class does most of the heavy lifting of your data access
    for your application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbContext` 类的实例代表数据库会话，并且这个 `DbContext` 类为您的应用程序的数据访问做了大部分繁重的工作。'
- en: 'Create a new class by the named `EmployeeDbContext` with the following content:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命名 `EmployeeDbContext` 创建一个新的类，其内容如下：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Configure it using `App.Config` :'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `App.Config` 配置它：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There are a few things to be noted in the preceding code snippet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中有几点需要注意：
- en: Include the `Microsoft.Data.Entity` namespace as the `DbContext` class available
    in this namespace. Our connection string is available in the `App.Config` file.
    In order to read the contents of the `App.Config` file, we are including the `ConfigurationManager`
    class in `System.Configuration` .
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含 `Microsoft.Data.Entity` 命名空间，因为该命名空间中提供了 `DbContext` 类。我们的连接字符串在 `App.Config`
    文件中可用。为了读取 `App.Config` 文件的内容，我们在 `System.Configuration` 中包含了 `ConfigurationManager`
    类。
- en: In order to use the `DbContext` API, a class has to be created which inherits
    from the `DbContext` class so that we can access methods of the `DbContext` API.
    We have created the `EmployeeDbContext` class which was inherited from `DbContext`
    class.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使用 `DbContext` API，必须创建一个继承自 `DbContext` 类的类，这样我们才能访问 `DbContext` API 的方法。我们已经创建了继承自
    `DbContext` 类的 `EmployeeDbContext` 类。
- en: '`DbSet` is a class which allows operations of the Entity Framework to be performed
    for a given Entity type. We need to create the `DbSet` object for each of the
    Entity types that we use in our application. In this example, we are using only
    one `DbSet` object as we are working with the `Employee` class.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DbSet` 是一个类，它允许对给定实体类型执行 Entity Framework 操作。我们需要为我们在应用程序中使用的每个实体类型创建 `DbSet`
    对象。在这个例子中，我们只使用一个 `DbSet` 对象，因为我们正在处理 `Employee` 类。'
- en: Create a migration
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建迁移
- en: '**Migration** is the process of recording all the changes of your database.
    `Add-Migration` is the Entity Framework command for adding migration:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移**是记录数据库所有更改的过程。`Add-Migration` 是 Entity Framework 添加迁移的命令：'
- en: '![Create a migration](img/Image00083.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![创建迁移](img/Image00083.jpg)'
- en: Once you add the migration, you can revoke the changes by executing the  `Remove-Migration`
    Entity Framework command.![Create a migration](img/Image00084.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦添加了迁移，您可以通过执行 `Remove-Migration` Entity Framework 命令撤销更改。![创建迁移](img/Image00084.jpg)
- en: This is what the migrations directory looks like:![Create a migration](img/Image00085.jpg)
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是迁移目录的外观：![创建迁移](img/Image00085.jpg)
- en: Update the database by issuing the Entity Framework command `Update-Database`
     , which updates the database tables as per the information available in the migration.
    As we have installed the `EntityFramework.Commands` package earlier, these commands
    will be available for the application:![Create a migration](img/Image00086.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 Entity Framework 命令 `Update-Database` 更新数据库，该命令根据迁移中可用的信息更新数据库表。由于我们之前已安装了
    `EntityFramework.Commands` 包，因此这些命令将可用于应用程序：![创建迁移](img/Image00086.jpg)
- en: Once you update the database, you can see the changes in the database by connecting
    to SQL Server Management Studio:![Create a migration](img/Image00087.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新数据库后，您可以通过连接到 SQL Server Management Studio 来查看数据库中的更改：![创建迁移](img/Image00087.jpg)
- en: Perform the database operation to save the business domain object in the database.
    You can create the database manually or, if the database is not available, it
    will create one for you.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行数据库操作以将业务领域对象保存到数据库中。你可以手动创建数据库，或者如果数据库不可用，它将为你创建一个。
- en: 'The `Main` method is updated with the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main`方法被以下代码更新：'
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Firstly, we are constructing the business domain object. Then, we are adding
    the constructed `Employee` object to the employee's `DbSet` of the `DbContext`
    class. Finally, we are calling the `SaveChanges` method `DbContext` API, which
    will save all the pending changes to the database.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们正在构建业务领域对象。然后，我们将构建的`Employee`对象添加到`DbContext`类的`Employee`的`DbSet`中。最后，我们调用`DbContext`
    API的`SaveChanges`方法，该方法将所有挂起的更改保存到数据库中。
- en: You might be wondering how it can save it to the database when we have not even
    given the connection string.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道我们没有提供连接字符串时，它是如何将其保存到数据库中的。
- en: 'Let us discuss what happens behind the scenes when we run the program:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下当我们运行程序时幕后发生了什么：
- en: When you make changes to any of the `DbSet` collection, the Entity Framework
    checks whether the database exists. If it does not exist, it creates a new one
    using the pattern `<Namespace of DbContextName>` . In our case, a database called
    by `EF6.EmployeeDbContext` would be created.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你对`DbSet`集合中的任何内容进行更改时，Entity Framework会检查数据库是否存在。如果不存在，它将使用模式`<DbContextName
    的命名空间>`创建一个新的数据库。在我们的例子中，一个名为`EF6.EmployeeDbContext`的数据库将被创建。
- en: Then, it creates database tables for the entities declared in `DbSet` . By convention,
    the Entity Framework uses the pluralized form of Entity for the table names. As
    we have declared `DbSet` for the `Employee` entity, the Entity Framework creates
    a pluralized form of `Employee` and creates the table named `Employees` .
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，它为在`DbSet`中声明的实体创建数据库表。按照惯例，Entity Framework使用实体的复数形式作为表名。由于我们为`Employee`实体声明了`DbSet`，Entity
    Framework创建`Employee`的复数形式，并创建名为`Employees`的表。
- en: 'The creation of the database and tables happens when the following code is
    executed:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库和表的创建发生在以下代码执行时：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When `SaveChanges` method is executed, the data in the `Employee` object will
    get saved to the database and returns the number of records affected. In the preceding
    case, it returns `1` .
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当`SaveChanges`方法执行时，`Employee`对象中的数据将被保存到数据库中，并返回受影响的记录数。在前面的例子中，它返回`1`。
- en: When you run the application again, the first two steps mentioned previously
    will be skipped as the database and table will have already been created.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次运行应用程序时，前面提到的前两个步骤将被跳过，因为数据库和表已经创建。
- en: 'When you query the database, you can see the newly inserted record:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查询数据库时，你可以看到新插入的记录：
- en: '![Create a migration](img/Image00088.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![创建迁移](img/Image00088.jpg)'
- en: How the SaveChanges method works
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`SaveChanges`方法的工作原理'
- en: When we are making changes, the Entity Framework tracks the state of each of
    the objects and executes the appropriate query when `SaveChanges` method is called.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行更改时，Entity Framework跟踪每个对象的每个状态，并在调用`SaveChanges`方法时执行适当的查询。
- en: For example, when we add an `Employee` object to the employees' collection (`DbSet`
    ), this object is being tracked as `Entity` in the `Added` state. When `SaveChanges`
    is called, the Entity Framework creates an `insert` query for the same and executes
    it. The same is the case with updating and deleting the object. The Entity Framework
    sets the `Entity` state of the respective objects to `Modified` and `Deleted`
    . When `SaveChanges` is called, it creates and executes the `Update` and `Delete`
    queries.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们向员工集合（`DbSet`）添加一个`Employee`对象时，该对象在`Added`状态下被`Entity Framework`跟踪。当调用`SaveChanges`时，Entity
    Framework为该对象创建一个`insert`查询并执行它。更新和删除对象的情况也是一样。Entity Framework将相应对象的`Entity`状态设置为`Modified`和`Deleted`。当调用`SaveChanges`时，它创建并执行`Update`和`Delete`查询。
- en: '![How the SaveChanges method works](img/Image00089.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![`SaveChanges`方法的工作原理](img/Image00089.jpg)'
- en: The preceding figure explains how the `SaveChanges` method works at a high-level
    for different types of change. We have a couple of POCO objects ( **Object 1**
    and **Object 2** ), which have been added to the employees' `DbSet` object. Let
    us assume **Object 3** and **Object 4** have been modified and objects **Object
    5** and **Object 6** are in `Deleted` state. When you call `SaveChanges` method,
    it creates three sets of queries. The first set of queries is for the addition
    of objects, resulting in `insert` queries getting executed against the database.
    In the second set of queries, `Update` queries are created and executed for the
    objects whose state is modified. Finally, `Delete` queries are executed for the
    objects for all the `Deleted` state objects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示解释了对于不同类型的更改，`SaveChanges` 方法是如何在高级别上工作的。我们有两个 POCO 对象（**对象 1** 和 **对象
    2**），它们已经被添加到员工的 `DbSet` 对象中。让我们假设 **对象 3** 和 **对象 4** 已经被修改，而对象 **对象 5** 和 **对象
    6** 处于 `Deleted` 状态。当你调用 `SaveChanges` 方法时，它会创建三组查询。第一组查询用于添加对象，这将导致对数据库执行 `insert`
    查询。在第二组查询中，为状态已修改的对象创建并执行 `Update` 查询。最后，为所有处于 `Deleted` 状态的对象执行 `Delete` 查询。
- en: Updating the record
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新记录
- en: 'Let us try to update the salary of an inserted employee record using the Entity
    Framework:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用 Entity Framework 更新已插入的员工记录的薪水：
- en: '[PRE13]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding method, we find the employee with `EmployeeId = 1` . Then,
    we update the salary of the employee to `6500` and save the `employee` object
    to the database. Please note that, in the preceding method, we interact with the
    database a couple of times—once to find the correct employee record (`read` operation)
    and again to update the record (`update` operation).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们找到 `EmployeeId = 1` 的员工。然后，我们将员工的薪水更新为 `6500` 并将 `employee` 对象保存到数据库中。请注意，在前面所述的方法中，我们与数据库交互了两次——一次是为了找到正确的员工记录（`read`
    操作），另一次是为了更新记录（`update` 操作）。
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `Main` method is updated to call the `UpdateSalary` method. When you query
    the database, you should see the record with the updated information:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main` 方法被更新为调用 `UpdateSalary` 方法。当你查询数据库时，你应该看到带有更新信息的记录：'
- en: '![Updating the record](img/Image00090.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![更新记录](img/Image00090.jpg)'
- en: Deleting the record
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除记录
- en: 'Deleting the record is a bit tricky as it involves setting the state directly.
    In the following method, firstly we get the object and setting the state of the
    object to `Deleted` . Then calling the `SaveChanges` method will generate the
    `delete` query for the object and execute it, which in turn will eventually delete
    the record in the database:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 删除记录稍微有些棘手，因为它涉及到直接设置状态。在以下方法中，首先我们获取对象并设置对象的状态为 `Deleted`。然后调用 `SaveChanges`
    方法将为该对象生成 `delete` 查询并执行它，这将最终删除数据库中的记录：
- en: '[PRE15]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using the Entity Framework in ASP.NET MVC applications
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 ASP.NET MVC 应用程序中使用 Entity Framework
- en: 'There is not much difference between using the Entity Framework in a console
    application and ASP.NET MVC application. Now, we are going to build a simple application
    with a single screen as shown in the following image. In this screen, we will
    have a form where the user will enter the information about the employee; once
    the user submits the form, the information will be saved to the database and reflected
    in the following screenshots:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台应用程序和 ASP.NET MVC 应用程序中使用 Entity Framework之间没有太大的区别。现在，我们将构建一个简单的应用程序，它只有一个屏幕，如图所示。在这个屏幕上，我们将有一个表单，用户将输入有关员工的信息；一旦用户提交表单，信息将被保存到数据库中，并在以下屏幕截图中反映出来：
- en: '![Using the Entity Framework in ASP.NET MVC applications](img/Image00091.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![在 ASP.NET MVC 应用程序中使用 Entity Framework](img/Image00091.jpg)'
- en: We can create a simple Model for the employee. We need to build a ViewModel
    for this View, as we need to get the employee information from the user and we
    need to show a list of employees as well on the same screen.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个简单的员工模型。我们需要为这个视图构建一个 ViewModel，因为我们需要从用户那里获取员工信息，同时我们还需要在同一个屏幕上显示员工列表。
- en: 'Let us create an ASP.NET Core application, adding the employee and showing
    the list of employees. The following is the step-by-step instructions to create
    the application for the previously mentioned objective:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 ASP.NET Core 应用程序，添加员工并显示员工列表。以下是为实现上述目标创建应用程序的逐步说明：
- en: Create an ASP.NET Core project in Visual Studio by selecting an empty ASP.NET
    5 application.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 Visual Studio 中选择一个空的 ASP.NET 5 应用程序来创建一个 ASP.NET Core 项目。
- en: Install the ASP.NET Core `NuGet` package.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 ASP.NET Core `NuGet` 包。
- en: Install the Entity Framework 7 `NuGet` package and `**ef**` EntityFramework
    commands (for database migration) as explained earlier in this chapter.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照本章前面所述，安装 Entity Framework 7 的 `NuGet` 包和 `**ef**` EntityFramework 命令（用于数据库迁移）。
- en: 'Add `config.json` to declare the connection string of the database:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `config.json` 添加到声明数据库连接字符串：
- en: '[PRE16]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update `project.json` to include EntityFramework 7 and EntityFramework commands.
    The changes are highlighted in bold:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `project.json` 以包括 EntityFramework 7 和 EntityFramework 命令。变更以粗体标出：
- en: '[PRE17]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Configure MVC in the `Startup` class (`Startup.cs` ):'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Startup` 类 (`Startup.cs`）中配置 MVC：
- en: In the constructor, we are building the configuration by reading the `config.json`
    file
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构造函数中，我们通过读取 `config.json` 文件构建配置。
- en: Add the MVC service and the Entity Framework service to the services in the
    `ConfigureServices` method
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `ConfigureServices` 方法中将 MVC 服务和 Entity Framework 服务添加到服务中
- en: 'Configure the MVC routing in the `Configure` method:'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Configure` 方法中配置 MVC 路由：
- en: '[PRE18]'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Create `Models` and `DbContext`  classes.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Models` 和 `DbContext` 类。
- en: Create the `Models` folder and add the `Employee` model class and `EmployeeDbContext`
    class.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Models` 文件夹并添加 `Employee` 模型类和 `EmployeeDbContext` 类。
- en: 'Create the `Employee` Model class (`Employee.cs` in the `Models` folder):'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Models` 文件夹中创建 `Employee` 模型类 (`Employee.cs`）：
- en: '[PRE19]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create `EmployeeDbContext` (`EmployeeDbContext.cs` in the `Models` folder):'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Models` 文件夹中创建 `EmployeeDbContext` (`EmployeeDbContext.cs`）：
- en: '[PRE20]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create `ViewModels` :'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `ViewModels`：
- en: As we are going to show a list of employees and the form to add employees in
    the same screen, we are going to build a Model specific to this View. This model
    will contain information about the list of employees and the employee to be added.
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们将在同一屏幕上显示员工列表和添加员工的表单，我们将构建一个针对此视图的特定模型。此模型将包含有关员工列表和要添加的员工的信息。
- en: 'Create the `ViewModels` folder and add the `EmployeeAddViewModel` :'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `ViewModels` 文件夹并添加 `EmployeeAddViewModel`：
- en: '[PRE21]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This `ViewModel` has a couple of properties. `EmployeesList` and `NewEmployee`
    . `EmployeesList` will contain the list of employees. This list would be fetched
    from the database. `NewEmployee` will hold the employee information entered by
    the user.
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个 `ViewModel` 有几个属性。`EmployeesList` 和 `NewEmployee`。`EmployeesList` 将包含员工列表。这个列表将从数据库中获取。`NewEmployee`
    将保存用户输入的员工信息。
- en: 'Create `Controllers` to handle the incoming requests:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Controllers` 来处理传入的请求：
- en: 'Create a `Controllers` folder and add the `EmployeeController` class with a couple
    of action methods-one for `GET` and another for `POST` . The `Index` action method
    corresponding to the `GET` action method will be called when you access the URL
    (`http://localhost/Employee/Index` ) or when you run the application. The `POST
    Index` action method will be called when you submit the form as following:'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `Controllers` 文件夹并添加 `EmployeeController` 类，包含几个动作方法——一个用于 `GET`，另一个用于
    `POST`。当您访问 URL (`http://localhost/Employee/Index`）或运行应用程序时，将调用与 `GET` 动作方法对应的
    `Index` 动作方法。当您提交表单时，将调用 `POST Index` 动作方法：
- en: '[PRE22]'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding `GET Index` action method, we are creating the `ViewModel`
    object and passing it to the View.
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的 `GET Index` 动作方法中，我们创建 `ViewModel` 对象并将其传递到视图中。
- en: 'The following code uses `POST Index` action method:'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下代码使用 `POST Index` 动作方法：
- en: '[PRE23]'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We get the `NewEmployee` property in the ViewModel, which contains the information
    on the user. Save it to the database. Once we save the employee information to
    the database and we redirect the control to the `GET Index` action method, the
    `GET Index` action method will again show the form to enter the employee information
    and the list of employees in table format.
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在 ViewModel 中获取 `NewEmployee` 属性，它包含用户信息。将其保存到数据库中。一旦我们将员工信息保存到数据库中并将控制权重定向到
    `GET Index` 动作方法，`GET Index` 动作方法将再次显示输入员工信息的表单和员工列表。
- en: 'Add the `Views` folder:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `Views` 文件夹：
- en: 'Create `Views\_ViewStart.cshtml` with the following content:'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Views_ViewStart.cshtml` 并包含以下内容：
- en: '[PRE24]'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create `Views\Shared\_Layout.cshtml`  with the following content:'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Views\Shared_Layout.cshtml` 并包含以下内容：
- en: '[PRE25]'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create `Views\Employee\Index.cshtml`  with the following content:'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Views\Employee\Index.cshtml` 并包含以下内容：
- en: '[PRE26]'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding `Index` view, we create a form where we get the employee information
    from the user in the topmost `div` . In the next `div` , we show the list of employees
    in a tabular format.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 `Index` 视图中，我们创建了一个表单，从用户在顶部 `div` 中获取员工信息。在下一个 `div` 中，我们以表格格式显示员工列表。
- en: 'Once we create all the folders and the files, the project structure should
    look like the following:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了所有文件夹和文件，项目结构应该看起来如下所示：
- en: '![Using the Entity Framework in ASP.NET MVC applications](img/Image00092.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![在 ASP.NET MVC 应用程序中使用 Entity Framework](img/Image00092.jpg)'
- en: Database migration
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库迁移
- en: 'We have created the business entity—the `Employee` class. Now, we can proceed
    with the migration. Migration is a two-step process: in the first step, we create
    the migration files. This can be done by executing the following command from
    the command prompt from the context of the project:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建业务实体——`Employee`类。现在，我们可以进行迁移。迁移是一个两步过程：在第一步中，我们创建迁移文件。这可以通过从项目上下文在命令提示符中执行以下命令来完成：
- en: '[PRE27]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![Database migration](img/Image00093.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![数据库迁移](img/Image00093.jpg)'
- en: 'This command will create the migration files in your project, as shown in the
    following screenshot:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在您的项目中创建迁移文件，如下截图所示：
- en: '![Database migration](img/Image00094.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![数据库迁移](img/Image00094.jpg)'
- en: 'Then execute the following command to create the database:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 然后执行以下命令以创建数据库：
- en: '![Database migration](img/Image00095.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![数据库迁移](img/Image00095.jpg)'
- en: 'This command will read the migration files created in the previous step and
    create the database along with the associated tables:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将读取上一阶段创建的迁移文件，并创建数据库以及相关的表：
- en: '![Database migration](img/Image00096.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![数据库迁移](img/Image00096.jpg)'
- en: Run the application. You will get the following screen, where the user can enter
    the employee information in the form. As we are using the strongly typed model
    in our view, it takes the default values for all the properties. The `Name` and
    `Designation` are properties of type `string` and the default values are empty
    string for these fields, `Salary` is of type `decimal` and the default value for
    `decimal` is `0`   hence `0` is shown in the form when it is loaded for the `Salary`
    field.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序。您将看到以下屏幕，用户可以在表单中输入员工信息。由于我们在视图中使用强类型模型，它为所有属性取默认值。`Name`和`Designation`是`string`类型的属性，这些字段的默认值是空字符串，`Salary`是`decimal`类型，`decimal`的默认值是`0`，因此当表单加载时，`Salary`字段显示`0`。
- en: 'As there are no records, we are showing `0` records in the `List of employees`
    table:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有记录，我们在“员工列表”表中显示`0`条记录：
- en: '![Database migration](img/Image00097.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![数据库迁移](img/Image00097.jpg)'
- en: 'When you enter the information in the form and submit it, the information gets
    saved in the database and all the database records in the `Employees` table will
    be presented as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在表单中输入信息并提交时，信息将被保存到数据库中，并且`Employees`表中的所有数据库记录将如下所示：
- en: '![Database migration](img/Image00098.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![数据库迁移](img/Image00098.jpg)'
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what a Model is and how it fits in the ASP.NET MVC
    application. Then, we created a simple Model, built model data in a Controller,
    passed the Model to the View, and shown the data using the View. We have learned
    about the *Models specific to a View* and have discussed the flow of the data
    with respect to Models. We learned about the Entity Framework, an ORM framework
    from Microsoft, and how it simplifies database access from your .NET application.
    We have created simple console application where we have inserted, updated, and
    deleted the records. Finally, we have built an ASP.NET Core application that uses
    Model, ViewModel, and Entity Framework.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是模型以及它在 ASP.NET MVC 应用程序中的适用性。然后，我们创建了一个简单的模型，在控制器中构建模型数据，将模型传递给视图，并使用视图显示数据。我们学习了与视图相关的特定模型，并讨论了与模型相关的数据流。我们学习了微软的
    ORM 框架 Entity Framework，以及它是如何简化从您的 .NET 应用程序访问数据库的。我们创建了一个简单的控制台应用程序，在其中我们插入了、更新了和删除了记录。最后，我们构建了一个使用模型、视图模型和
    Entity Framework 的 ASP.NET Core 应用程序。
