- en: Chapter 1. Introduction to ASP.NET Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。ASP.NET Core简介
- en: ASP.NET Core, the latest version of ASP.NET MVC from Microsoft, is the server-side
    web application development framework which helps you to build web applications
    effectively. This runs on top of the ASP.NET 5 platform, which enables your application
    to be run on a wide variety of platforms, including Linux and Mac OS X. This opens
    up heaps of opportunities and it is exciting to be a .NET developer in these times.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core，微软推出的ASP.NET MVC的最新版本，是一个服务器端Web应用程序开发框架，它可以帮助你有效地构建Web应用程序。这个框架运行在ASP.NET
    5平台之上，使得你的应用程序能够在包括Linux和Mac OS X在内的多种平台上运行。这为开发者提供了大量的机会，在这个时代成为一名.NET开发者是非常令人兴奋的。
- en: 'In this chapter, you''ll learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Fundamental concepts about web applications—HTTP, client-side, and server-side
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Web应用程序的基本概念——HTTP、客户端和服务器端
- en: Three programming models of ASP.NET—ASP.NET Web Forms, ASP.NET Web Pages, and
    ASP.NET MVC
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET的三个编程模型——ASP.NET Web Forms、ASP.NET Web Pages和ASP.NET MVC
- en: Philosophy of ASP.NET MVC
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET MVC的哲学
- en: Features of ASP.NET Core and ASP.NET 5
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core和ASP.NET 5的功能
- en: Before discussing the ASP.NET Core and its features, let us understand the fundamentals
    of web applications development. I strongly believe the principle that if you
    want to be an expert at something, you need to be very good at the fundamentals. It
    will be helpful in debugging the issues and fixing them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论ASP.NET Core及其功能之前，让我们先了解Web应用程序开发的基础知识。我坚信这样一个原则：如果你想在某个领域成为专家，你需要非常精通基础知识。这将有助于调试问题和解决问题。
- en: 'Having said that we are going to discuss the following key fundamentals:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们将讨论以下关键基础知识：
- en: How web applications work, and a bit about HTTP
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Web应用程序的工作原理以及一些关于HTTP的知识
- en: Client-side and server-side
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端和服务器端
- en: HTTP methods
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP方法
- en: Just three key concepts. No big deal!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 只需三个关键概念。没什么大不了的！
- en: How web applications work
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web应用程序是如何工作的
- en: All web applications, irrespective of whether they are built using ASP.NET MVC,
    Ruby on Rails, or any other new shiny technology, work on the HTTP protocol. Some
    applications use HTTPS (a secure version of HTTP), where data is encrypted before
    passing through the wire. But HTTPS still uses HTTP.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Web应用程序，无论它们是使用ASP.NET MVC、Ruby on Rails还是任何其他新技术构建的，都基于HTTP协议。一些应用程序使用HTTPS（HTTP的安全版本），在数据通过线路传输之前进行加密。但HTTPS仍然使用HTTP。
- en: So what is an HTTP protocol?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么什么是HTTP协议呢？
- en: '**HTTP** stands for **Hyper Text Transfer Protocol** and is an application
    protocol which is designed for distributed hypermedia systems. "Hyper Text" in
    Hyper Text Transfer Protocol refers to the structured text that uses hyperlinks
    for traversing between the documents. Standards for HTTP were developed by the 
    **Internet Engineering Task Force** ( **IETF** ) and the  **World Wide Web Consortium**
    ( **W3C** ). The current version of HTTP is HTTP/2 and was standardized in 2015. It
    is supported by the majority of web browsers, such as Internet Explorer, Chrome,
    and Firefox.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP**代表**超文本传输协议**，是一种为分布式超媒体系统设计的应用协议。"超文本"在超文本传输协议中指的是使用超链接在文档之间进行导航的结构化文本。HTTP标准由**互联网工程任务组**（**IETF**）和**万维网联盟**（**W3C**）制定。当前版本的HTTP是HTTP/2，于2015年标准化。它被大多数网络浏览器支持，如Internet
    Explorer、Chrome和Firefox。'
- en: The HTTP protocol (a protocol is nothing but a set of rules which govern the
    communication) is a stateless protocol that follows the request-response pattern.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议（协议不过是一套规则，用于规范通信）是一种无状态的协议，遵循请求-响应模式。
- en: Request-response pattern
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求-响应模式
- en: 'Before talking about the request-response pattern, let us discuss a couple
    of terms: Client and server. A server is a computing resource that receives the
    requests from the clients and serves them. A server, typically, is a high-powered
    machine with huge memory to process many requests. A client is a computing resource
    that sends a request and receives the response. A client, typically, could be
    a web server or any application that sends the requests.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论请求-响应模式之前，让我们讨论几个术语：客户端和服务器。服务器是一种计算资源，它接收来自客户端的请求并为其提供服务。通常，服务器是一台具有巨大内存的高性能机器，可以处理大量请求。客户端是一种计算资源，它发送请求并接收响应。通常，客户端可以是Web服务器或任何发送请求的应用程序。
- en: Coming back to the request-response pattern, when you request a resource from
    a server, the server responds to you with the requested resource. A resource could
    be anything—a web page, text file, an image , or another data format.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 回到请求-响应模式，当你从服务器请求一个资源时，服务器会响应你，提供所请求的资源。资源可以是任何东西——一个网页、文本文件、一张图片，或者另一种数据格式。
- en: '![Request-response pattern](img/Image00001.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![请求-响应模式](img/Image00001.jpg)'
- en: You fire a request. The server responds with the resource. This is called a
    **request-response pattern** .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你发起一个请求。服务器响应提供资源。这被称为**请求-响应模式**。
- en: Stateless nature of HTTP
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP的无状态特性
- en: When you request for the same resource again, the server responds to you with
    the requested resource again without having any knowledge of the fact that the
    same was requested and served earlier. The HTTP protocol inherently does not have
    any knowledge of the state knowledge of any of the previous requests received
    and served. There are several mechanisms available that maintain the state, but
    the HTTP protocol by itself does not maintain the state. We will explain the mechanisms
    to maintain the state later.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次请求相同的资源时，服务器会再次响应你，提供所请求的资源，而无需知道之前已经请求并提供了相同的资源。HTTP协议本身并不了解之前接收和提供过的任何请求的状态知识。有几种机制可以维护状态，但HTTP协议本身并不维护状态。我们将在稍后解释维护状态的机制。
- en: 'Let me explain to you about the statelessness and the request-response pattern
    to you with a simple practical example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我用一个简单的实际例子来向你解释无状态和请求-响应模式：
- en: 'You type the following URL: [https://en.wikipedia.org/wiki/ASP.NET_MVC](https://en.wikipedia.org/wiki/ASP.NET_MVC)
    . This is a Wikipedia web page about ASP.NET MVC.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你输入以下URL：[https://en.wikipedia.org/wiki/ASP.NET_MVC](https://en.wikipedia.org/wiki/ASP.NET_MVC)。这是一个关于ASP.NET
    MVC的维基百科网页。
- en: From the preceding URL, the browser fires a request to the Wikipedia server.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的URL，浏览器向维基百科服务器发起请求。
- en: The web server at Wikipedia serves you the ASP.NET MVC web page.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 维基百科的Web服务器为你提供了ASP.NET MVC网页。
- en: Your browser receives that web page and presents it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器接收该网页并将其呈现出来。
- en: You request the same page again by typing the same URL again ([https://en.wikipedia.org/wiki/ASP.NET_MVC](https://en.wikipedia.org/wiki/ASP.NET_MVC)
    ) and press *Enter* .
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你再次通过输入相同的URL（[https://en.wikipedia.org/wiki/ASP.NET_MVC](https://en.wikipedia.org/wiki/ASP.NET_MVC)）并按*Enter*键来请求相同的页面。
- en: The browser again fires the request to the Wikipedia server.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器再次向维基百科服务器发起请求。
- en: Wikipedia serves you the same ASP.NET MVC web page without being aware of the
    fact that the same resource was requested previously from the same resource.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 维基百科为你提供了相同的ASP.NET MVC网页，而它并不知道之前已经从同一资源请求过相同的资源。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As mentioned earlier, there are several mechanisms to maintain the state. Let
    us assume, for the time being, that no such mechanism is implemented here. I know
    that I am being too simplistic here, but this explains the point.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有几种机制可以维护状态。让我们暂时假设这里没有实现这样的机制。我知道我在这里过于简单化，但这解释了这一点。
- en: Client-side and server-side
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端和服务器端
- en: It is necessary to understand the client-side and server-side of web applications
    and what can be done either side. With respect to web applications, your client
    is the browser and your server could be the web server/application server.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Web应用的客户端和服务器端以及各自可以做什么是必要的。就Web应用而言，你的客户端是浏览器，你的服务器可以是Web服务器/应用服务器。
- en: The browser side is whatever that happens in your browser. It is the place where
    your JavaScript code runs and your HTML elements reside.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器端是你在浏览器中看到的所有事情。这是你的JavaScript代码运行和HTML元素所在的地方。
- en: The server-side is whatever happens at the server at the other end of your computer.
    The request that you fire from your browser has to travel through the wire (probably
    across the network) to execute some server-side code and returns the appropriate
    response. Your browser is oblivious to the server-side technology or the language
    your server-side code is written in. The server-side is also the place where your
    C# code resides.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端是在你电脑另一端的服务器上发生的事情。你从浏览器发起的请求必须通过线路（可能跨越网络）执行一些服务器端代码，并返回适当的响应。你的浏览器对服务器端技术或服务器端代码所使用的语言一无所知。服务器端也是你的C#代码所在的地方。
- en: 'Let us discuss some of the facts to make things clear:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些事实来澄清问题：
- en: '**Fact 1** : All browsers can only understand HTML, CSS, and JavaScript, irrespective
    of the browser vendor.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事实 1**：所有浏览器只能理解 HTML、CSS 和 JavaScript，无论浏览器供应商如何。'
- en: You might be using Internet Explorer, Firefox, Chrome, or any other browser.
    Still, the fact that your browser can understand only HTML, CSS, and JavaScript
    holds true. It cannot understand C#. It cannot understand Java. Nor Ruby. Only
    HTML, CSS, and JavaScript. This is the reason why you can access the web applications,
    built using any technology could be accessed by the same browser.![Client-side
    and server-side](img/Image00002.jpg)
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能在使用 Internet Explorer、Firefox、Chrome 或任何其他浏览器。然而，你的浏览器只能理解 HTML、CSS 和 JavaScript
    的这一事实是正确的。它不能理解 C#。它也不能理解 Java。更不用说 Ruby。只有 HTML、CSS 和 JavaScript。这就是为什么你可以访问使用任何技术构建的网络应用，并且这些应用可以通过相同的浏览器访问。[客户端和服务器端](img/Image00002.jpg)
- en: '**Fact 2** : The purpose of any web development framework is to convert your
    server-side code to HTML, CSS, and JavaScript.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事实 2**：任何网络开发框架的目的是将你的服务器端代码转换为 HTML、CSS 和 JavaScript。'
- en: This is related to the previous point. As browsers can only understand HTML,
    CSS, and JavaScript, all the web development technologies should convert your
    server-side code to HTML, CSS, and JavaScript so that your browser can understand.
    This is the primary purpose of any web development framework. This is true for
    whether you build your web applications using ASP.NET MVC, ASP.NET Web Forms,
    Ruby on Rails, or J2EE. Each web development framework may have a unique concept/implementation
    regarding how to generate the HTML, CSS, and JavaScript, and may handle features
    such as security performance differently. But still, each framework has to produce
    the HTML, because that's what your browsers understand.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这与前面的观点相关。由于浏览器只能理解 HTML、CSS 和 JavaScript，所有网络开发技术都应该将你的服务器端代码转换为 HTML、CSS 和
    JavaScript，以便你的浏览器可以理解。这是任何网络开发框架的主要目的。无论你使用 ASP.NET MVC、ASP.NET Web Forms、Ruby
    on Rails 还是 J2EE 来构建你的网络应用，这都是正确的。每个网络开发框架可能都有独特的概念/实现，关于如何生成 HTML、CSS 和 JavaScript，并且可能以不同的方式处理功能，如安全性和性能。但每个框架都必须生成
    HTML，因为这是你的浏览器所能理解的。
- en: HTTP methods
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 方法
- en: Even though all the requests of the HTTP protocol follow the request-response
    pattern, the way the requests are sent can vary from one to the next. The HTTP
    method defines how the request is being sent to the server.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有 HTTP 协议的请求都遵循请求-响应模式，但请求的发送方式可能因请求而异。HTTP 方法定义了请求是如何发送到服务器的。
- en: The available methods in HTTP are `GET` , `HEAD` , `POST` , `PUT` , `DELETE`
    , `TRACE` , `OPTIONS` , `CONNECT` , and `PATCH` . In most of the web applications,
    the `GET` and `POST` methods are widely used. In this section, we will discuss
    these methods. Later, we will discuss other HTTP methods on a need-to-know basis.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 中可用的方法有 `GET`、`HEAD`、`POST`、`PUT`、`DELETE`、`TRACE`、`OPTIONS`、`CONNECT`
    和 `PATCH`。在大多数网络应用中，`GET` 和 `POST` 方法被广泛使用。在本节中，我们将讨论这些方法。稍后，我们将根据需要讨论其他 HTTP
    方法。
- en: GET method
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GET 方法
- en: '`GET` is a method of the HTTP protocol which is used to get a resource from
    the server. Requests which use the `GET` method should only retrieve the data
    and should not have any side effect. This means that if you fire the same `GET`
    request, again and again, you should get the same data, and there should not be
    any change in the state of the server, as a result of this GET request.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 是 HTTP 协议中的一种方法，用于从服务器获取资源。使用 `GET` 方法的请求应仅检索数据，不应有任何副作用。这意味着如果你反复发送相同的
    `GET` 请求，你应该得到相同的数据，并且服务器状态不应因这个 `GET` 请求而发生变化。'
- en: In the `GET` method, the parameters are sent as part of the request URL and
    therefore will be visible to the end user. The advantage of this approach is that
    the user can bookmark the URL and visit the page again whenever they want. An
    example is  [www.yourwebsite.com?tech=mvc6&db=sql](http://www.yourwebsite.com?tech=mvc6&db=sql)
    .
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `GET` 方法中，参数作为请求 URL 的一部分发送，因此对最终用户是可见的。这种方法的优点是用户可以保存 URL 书签，并在需要时再次访问页面。例如，[www.yourwebsite.com?tech=mvc6&db=sql](http://www.yourwebsite.com?tech=mvc6&db=sql)
    。
- en: We are passing a couple of parameters in the preceding `GET` request. `tech`
    is the first parameter with the value `mvc6` and `db` is the second parameter
    with the value `sql` . Assume your website takes the preceding parameters with
    values and searches in your database to retrieve the blog posts that talk about
    `mvc6` and `sql`  before presenting those blog posts to the user.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`GET`请求中，我们传递了几个参数。`tech`是第一个参数，其值为`mvc6`，而`db`是第二个参数，其值为`sql`。假设您的网站接受这些参数及其值，并在向用户展示这些博客文章之前，在数据库中搜索关于`mvc6`和`sql`的博客文章。
- en: '![GET method](img/Image00003.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![GET方法](img/Image00003.jpg)'
- en: The disadvantage of the `GET` method is that, as the data is passed in clear
    text in the URL as parameters, it cannot be used to send the sensitive information.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET`方法的缺点是，由于数据作为参数以明文形式在URL中传递，因此不能用于发送敏感信息。'
- en: Moreover, most browsers have limitations on the number of characters in the
    URL, so, when using `GET` requests, we cannot send large amounts of data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，大多数浏览器对URL中的字符数有限制，因此，当使用`GET`请求时，我们不能发送大量数据。
- en: POST method
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POST方法
- en: The `POST` request is generally used to update or create resources at the server.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`请求通常用于在服务器上更新或创建资源。'
- en: 'Data is passed in the body of the request. This has the following implications:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数据在请求体中传递。这有以下影响：
- en: You can send sensitive information to the server, as the data is embedded in
    the body of the request and it will not be visible to the end user in the URL.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将敏感信息发送到服务器，因为数据嵌入在请求体中，并且它不会在URL中向最终用户可见。
- en: As the data is not sent through the request URL, it does not take up space in
    the URL and therefore it has no issues with the URL length limitations.![POST
    method](img/Image00004.jpg)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于数据不是通过请求URL发送的，因此它不会占用URL空间，因此它没有URL长度限制的问题。![POST方法](img/Image00004.jpg)
- en: As we have covered the fundamentals, we can now proceed to discuss ASP.NET.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经涵盖了基础知识，我们现在可以继续讨论ASP.NET。
- en: What is ASP.NET?
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是ASP.NET？
- en: ASP.NET is a server-side web application development framework allowing developers
    to build web applications, websites, and web services. It was first introduced
    by Microsoft in early 2002, and in these 14 years, it has undergone a lot of changes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET是一个服务器端Web应用程序开发框架，允许开发者构建Web应用程序、网站和Web服务。它最初由微软在2002年初推出，在这14年中，它经历了许多变化。
- en: 'Basically, ASP.NET has three programming models:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，ASP.NET有三个编程模型：
- en: ASP.NET Web Forms
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Web Forms
- en: ASP.NET Web Pages
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Web Pages
- en: ASP.NET MVC
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET MVC
- en: Even though the end result of all of the preceding programming models is to
    produce the dynamic web pages effectively, the methodologies that they follow
    differ from each other. Let us discuss each one of these programming models to
    understand their principles.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有上述编程模型最终的结果都是有效地生成动态Web页面，但它们遵循的方法各不相同。让我们讨论这些编程模型中的每一个，以了解它们的原则。
- en: ASP.NET Web Forms
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Web Forms
- en: Historically, when ASP.NET was first introduced, ASP.NET Web Forms was the only
    programming model available to programmers to develop web applications in ASP.NET.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，当ASP.NET首次推出时，ASP.NET Web Forms是程序员在ASP.NET中开发Web应用程序的唯一编程模型。
- en: The ASP.NET Web Forms model abstracted the web so that it can maintain the state
    even though the web is inherently stateless.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Web Forms模型抽象了Web，即使Web本质上是无状态的，也能保持状态。
- en: It also supports the event-driven programming model at the server-side. This
    has helped desktop application developers to have a smooth transition in moving
    into web application development.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它还支持服务器端的事件驱动编程模型。这有助于桌面应用程序开发者平滑过渡到Web应用程序开发。
- en: Like PHP and several other web application frameworks, ASP.NET Web Forms is
    a file-based framework where users access the web page by means of accessing a
    file at the server. The server will process your request, convert all of your
    server-side components in that file to HTML, and send it back to the requesting
    client.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与PHP和其他几个Web应用程序框架一样，ASP.NET Web Forms是一个基于文件的框架，用户通过访问服务器上的文件来访问网页。服务器将处理您的请求，将文件中的所有服务器端组件转换为HTML，并将其发送回请求客户端。
- en: Each web page in ASP.NET Web Forms is represented by two files: `.aspx` and
    `.aspx.cs` or `.aspx.vb` . The `.aspx` file contains your front end components-all
    of your ASP controls and your HTML elements. The `.aspx.cs`  (if you are using
    C# as the code-behind language) or `.aspx.vb`  (if you are using Visual Basic
    as the code-behind programming language) contains the code for events which are
    happening at the web page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Web Forms中，每个Web页面都由两个文件表示：`.aspx`和`.aspx.cs`（如果您使用C#作为后端代码语言）或`.aspx.vb`（如果您使用Visual
    Basic作为后端编程语言）。`.aspx`文件包含您的前端组件——所有的ASP控件和您的HTML元素。`.aspx.cs`（如果您使用C#作为后端代码语言）或`.aspx.vb`（如果您使用Visual
    Basic作为后端编程语言）包含在网页上发生的事件的代码。
- en: This was the predominant programming model prior to the arrival of ASP.NET MVC,
    and this programming model is still being used to maintain the production applications
    that were written using this model.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在ASP.NET MVC出现之前的主要编程模型，并且此编程模型仍在被用于维护使用此模型编写的生产应用程序。
- en: ASP.NET Web Pages
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Web Pages
- en: ASP.NET Web Pages are primarily targeted at small web applications where the
    data-processing logic is written directly on the web page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Web Pages主要针对小型Web应用程序，其中数据处理逻辑直接写在网页上。
- en: ASP.NET MVC
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET MVC
- en: ASP.NET MVC is the implementation of the MVC pattern in ASP.NET. The disadvantages
    of ASP.NET Web Forms, such as limited control over the generation of HTML are
    resolved in ASP.NET MVC. As most of the modern applications are controlled by
    client-side JavaScript libraries/frameworks, such as **jQuery** , **KnockoutJS,**
    and **AngularJS** , having complete control over the generated HTML is of paramount
    importance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET MVC是ASP.NET中对MVC模式的实现。ASP.NET Web Forms的缺点，如对HTML生成的有限控制，在ASP.NET MVC中得到解决。由于大多数现代应用程序都由客户端JavaScript库/框架（如**jQuery**、**KnockoutJS**和**AngularJS**）控制，因此对生成的HTML拥有完全控制至关重要。
- en: Let us talk a bit about the Model-View-Controller pattern and how it benefits
    the web application development.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要谈谈模型-视图-控制器（Model-View-Controller）模式及其如何有利于Web应用程序开发。
- en: '**Model-View-Controller (MVC) pattern** : This is a software architectural
    pattern which helps in defining the responsibility for each of the components
    and how they fit together in achieving the overall goal. This pattern is primarily
    used in building user interfaces, and is applicable in many areas including developing
    desktop applications and web applications. But I am going to explain the MVC pattern
    from the context of web development.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器（MVC）模式**：这是一种软件架构模式，有助于定义每个组件的责任以及它们如何协同工作以实现整体目标。此模式主要用于构建用户界面，并适用于许多领域，包括开发桌面应用程序和Web应用程序。但我将从Web开发的角度来解释MVC模式。'
- en: 'Primarily, the MVC pattern has three components:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，MVC模式有三个主要组件：
- en: '**Model** : This component represents your domain data. Please note that this
    is not your database. This model component can talk to your database, but the
    model only represents your domain data. For example, if you are building an e-commerce
    web application, the model component may contain classes such as Product, Supplier,
    and Inventory.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：此组件代表您的领域数据。请注意，这并不是您的数据库。此模型组件可以与您的数据库通信，但模型仅代表您的领域数据。例如，如果您正在构建电子商务Web应用程序，模型组件可能包含如Product（产品）、Supplier（供应商）和Inventory（库存）等类。'
- en: '**View** : This component is responsible for what to present to the user. Usually,
    this component would contain your HTML and CSS files. This may also include the
    layout information governing how your web application looks to the end user.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：此组件负责向用户展示什么内容。通常，此组件会包含您的HTML和CSS文件。这还可能包括控制您的Web应用程序外观的布局信息。'
- en: '**Controller** : As the name implies, the controller is responsible for interacting
    with different components. It receives the request (through the routing module),
    talks to the model, and sends the appropriate view to the user.![ASP.NET MVC](img/Image00005.jpg)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：正如其名所示，控制器负责与不同组件交互。它接收请求（通过路由模块），与模型通信，并向用户发送适当的视图。![ASP.NET MVC](img/Image00005.jpg)'
- en: This separation of responsibilities brings great flexibility to the web application
    development, allowing each area to be managed separately and independently.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这种责任分离为Web应用程序开发带来了极大的灵活性，允许每个区域独立管理。
- en: Features of ASP.NET MVC
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET MVC的特点
- en: ASP.NET MVC is an opinionated application development framework that prefers
    some functionality to be handled in a certain unique way. Let us discuss each
    of the features of ASP.NET MVC, along with the benefits they bring to the table.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET MVC 是一个有观点的应用程序开发框架，它倾向于以某种独特的方式处理某些功能。让我们讨论 ASP.NET MVC 的每个功能，以及它们带来的好处。
- en: Convention over configuration
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**约定优于配置**：在 ASP.NET MVC 中，完全采用了“约定优于配置”的原则。这是一种哲学，你可以在不进行任何配置的情况下确定它的工作方式。'
- en: This is a design methodology that significantly reduces the number of decisions
    while developing the application, and thus making it simpler.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个设计方法，在开发应用程序时显著减少了决策的数量，从而使其更加简单。
- en: If you have built any application using any technology, you might be using some
    kind of XML file where you have to configure everything in it. Even for the simpler
    straightforward things, we might have to configure the things over there.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过任何技术构建过任何应用程序，你可能使用过某种类型的 XML 文件，其中你必须配置其中的所有内容。即使是更简单直接的事情，我们也可能需要在那里进行配置。
- en: ASP.NET MVC embraces *convention over configuration* completely. It is the philosophy
    where you can be certain of how it is going to work without ever configuring same.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET MVC 完全采用了“约定优于配置”。这是一种哲学，你可以在不进行任何配置的情况下确定它的工作方式。
- en: Let me give you a simple example. All Controller code resides in the `Controller`
    folder, and Views have a separate folder for each of the Controllers. Whenever
    a request comes, ASP.NET MVC knows where to find the Controller and its associated
    View without any configuration. This methodology results in less configuration
    and less time in debugging.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你一个简单的例子。所有控制器代码都位于 `Controller` 文件夹中，而视图为每个控制器都有一个单独的文件夹。每当有请求到来时，ASP.NET
    MVC 就知道在哪里找到控制器及其关联的视图，而无需任何配置。这种方法减少了配置并缩短了调试时间。
- en: Separation of concerns
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关注点分离
- en: As discussed earlier, ASP.NET MVC has three major components—Model, Controller,
    and Views. This clearly separates the responsibilities so that the UI designer
    or UI developer can work on the View while backend developers can work on the
    Model to build a data domain for the application or to talk to the database. As
    the duties of each of the components are clearly defined and separated, the work
    can be done in parallel.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，ASP.NET MVC 有三个主要组件——模型、控制器和视图。这清楚地分离了责任，以便 UI 设计师或 UI 开发者可以工作在视图上，而后端开发者可以工作在模型上，为应用程序构建数据域或与数据库通信。由于每个组件的职责都明确且分离，工作可以并行进行。
- en: Control over the generated HTML
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对生成的 HTML 的控制
- en: If you have any experience in building an ASP.NET Web Forms application, you
    might have used ASP controls such as `asp:textbox` . Even though these controls
    have a lot of benefits, they have their cons as well. Developers cannot have complete
    control over the generated HTML when using these controls. Of course, you can
    set some properties in ASP control which in turn set some attributes in your generated
    HTML. But complete control is not possible. ASP.NET MVC HTML helpers and Tag helpers
    in ASP.NET Core provide better control over the generated HTML.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有过构建 ASP.NET Web Forms 应用程序的经验，你可能使用过 ASP 控件，例如 `asp:textbox`。尽管这些控件有很多好处，但它们也有自己的缺点。当使用这些控件时，开发者无法完全控制生成的
    HTML。当然，你可以在 ASP 控件中设置一些属性，这些属性反过来会设置你生成的 HTML 中的某些属性。但无法实现完全控制。ASP.NET MVC HTML
    辅助工具和 ASP.NET Core 中的标签辅助工具提供了对生成的 HTML 的更好控制。
- en: Better support for unit testing
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更好的单元测试支持
- en: 'As each of the components is separated and compartmentalized, creating the
    unit test cases becomes easier to achieve:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个组件都是分离和分区的，因此创建单元测试用例变得更容易实现：
- en: '**Unified MVC and Web API Controller in ASP.NET Core** : In earlier versions
    of ASP.NET MVC, different controllers were used for MVC (`System.Web.MVC.Controller`
    ) and Web API (`System.Web.Http.ApiController` ). In ASP.NET Core, there is only
    one base controller that supports creating both MVC controllers and Web API controllers.
    With respect to routing, all the controllers use the same routes. Of course, you
    can use convention-based routing or attribute-based routing depending on your
    needs.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core 中统一的 MVC 和 Web API 控制器**：在 ASP.NET MVC 的早期版本中，不同的控制器用于 MVC (`System.Web.MVC.Controller`)
    和 Web API (`System.Web.Http.ApiController`)。在 ASP.NET Core 中，只有一个基控制器支持创建 MVC
    控制器和 Web API 控制器。在路由方面，所有控制器使用相同的路由。当然，你可以根据需要使用基于约定的路由或基于属性的路由。'
- en: '**Note about Web API** : Web API is the Microsoft technology for building web
    services over the HTTP protocol. HTTP is not only limited to serving web pages.
    Web API could be used for building API services and data. The advantage of this
    approach is that the services which are built using Web API could be consumed
    by a wide range of clients such as, browsers, mobile applications, and desktop
    applications.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于 Web API 的说明**：Web API 是微软用于通过 HTTP 协议构建 Web 服务的 Microsoft 技术。HTTP 不仅限于服务网页。Web
    API 可以用于构建 API 服务和数据。这种方法的优点是，使用 Web API 构建的服务可以被各种客户端消费，例如浏览器、移动应用程序和桌面应用程序。'
- en: 'The code for the earlier version of ASP.NET MVC (till ASP.NET MVC 5) is as
    follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 ASP.NET MVC 早期版本（直到 ASP.NET MVC 5）的代码：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ASP.NET 5
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET 5
- en: ASP.NET 5 is the latest framework from Microsoft for building modern cloud-based
    applications using .NET. It is a cross-platform framework so that you can run
    your applications built on ASP.NET 5 on any platform, such as Linux or Mac OS
    X and also on Microsoft Windows, obviously. ASP.NET 5 is open source, and the
    complete source code is available on GitHub at  [https://github.com/aspnet/home](https://github.com/aspnet/home)
    .
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET 5 是微软最新推出的框架，用于使用 .NET 构建现代基于云的应用程序。它是一个跨平台框架，这意味着您可以在任何平台上运行基于 ASP.NET
    5 构建的应用程序，例如 Linux 或 Mac OS X，当然也包括 Microsoft Windows。ASP.NET 5 是开源的，完整的源代码可在
    GitHub 上找到，网址为 [https://github.com/aspnet/home](https://github.com/aspnet/home)。
- en: The latest version of ASP.NET MVC, ASP.NET Core—runs on the ASP.NET 5 platform.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET MVC 的最新版本，即 ASP.NET Core，运行在 ASP.NET 5 平台上。
- en: Features of ASP.NET 5
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET 5 的特性
- en: '**Cross-platform support** : Applications that are built on top of ASP.NET
    5 can run on any platform where ASP.NET 5 is installed. This means that the applications
    that you build on ASP.NET 5 can run on Apple OS X and Linux machines. Deploying
    ASP.NET Core on a Linux machine will be explained in a later chapter.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台支持**：在 ASP.NET 5 上构建的应用程序可以在安装了 ASP.NET 5 的任何平台上运行。这意味着您在 ASP.NET 5 上构建的应用程序可以在
    Apple OS X 和 Linux 机器上运行。在后续章节中，我们将解释如何在 Linux 机器上部署 ASP.NET Core。'
- en: '**Better support for client-side development** : ASP.NET 5 is designed to work
    seamlessly with a range of client-side frameworks, such as **AngularJs** , **Knockout**
    , **Bootstrap** , and  **React.js** .'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的客户端开发支持**：ASP.NET 5 设计得可以无缝地与一系列客户端框架协同工作，例如 **AngularJs**、**Knockout**、**Bootstrap**
    和 **React.js**。'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have learned the basics of web development, including what
    constitutes the server-side and client-side. We have even discussed the features
    of ASP.NET Core and ASP.NET 5.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了网络开发的基础知识，包括服务器端和客户端的构成。我们还讨论了 ASP.NET Core 和 ASP.NET 5 的特性。
