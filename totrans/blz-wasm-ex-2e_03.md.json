["```cs\n@page \"/counter\"\n**@inject ILogger<Counter> logger;**\n<PageTitle>Counter</PageTitle>\n<h1>Counter</h1>\n<p role=\"status\">Current count: @currentCount</p>\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">\n    Click me\n</button>\n@code {\n    private int currentCount = 0;\n    private void IncrementCount()\n    {\n        **logger.LogInformation(\"Button Clicked!\");**\n        currentCount++;\n    }\n} \n```", "```cs\n@page \"/logging\"\n@inject ILogger<Logging> logger;\n<PageTitle>Logging</PageTitle>\n<h1>Logging</h1>\n<button class=\"btn btn-primary\" @onclick=\"DemoLogging\">\n    Click me\n</button>\n@code {\n    private void DemoLogging()\n    {\n        logger.LogTrace(\"Logger: Trace\");\n        logger.LogDebug(\"Logger: Debug\");\n        logger.LogInformation(\"Logger: Information\");\n        logger.LogWarning(\"Logger: Warning\");\n        logger.LogError(\"Logger: Error\");\n        logger.LogCritical(\"Logger: Critical\");\n        logger.Log(LogLevel.None, \"Logger: None\");\n    }\n} \n```", "```cs\n    Install-Package Microsoft.Extensions.Logging.Configuration \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"Debug\"\n        }\n      }\n    } \n    ```", "```cs\n    builder.Logging.AddConfiguration(\n        builder.Configuration.GetSection(\"Logging\")); \n    ```", "```cs\n<div id=\"blazor-error-ui\">\n    An unhandled error has occurred.\n    <a href=\"\" class=\"reload\">Reload</a>\n    <a class=\"dismiss\">X</a>\n</div> \n```", "```cs\n<button class=\"btn btn-primary\" @onclick=\"NewException\">\n    Throw Exception\n</button>\n@code {\n    private void NewException()\n    {\n        throw new Exception(\"This is a sample error!\");\n    }\n} \n```", "```cs\n<ErrorBoundary>\n    <ChildContent>\n        <ThrowException />\n    </ChildContent>\n</ErrorBoundary> \n```", "```cs\n<ErrorBoundary>\n    <ChildContent>\n        <ThrowException />\n    </ChildContent>\n**<****ErrorContent****>**\n**<****h3****>****The Throw Exception button caused this error!****<****/****h3****>**\n**<****/****ErrorContent****>**\n</ErrorBoundary> \n```", "```cs\n@inject ILogger<ErrorHandler> Logger\n<CascadingValue Value=\"this\">\n    @ChildContent\n</CascadingValue>\n@code {\n    [Parameter]\n    public RenderFragment? ChildContent { get; set; }\n    public void ProcessError(Exception ex)\n    {\n        Logger.LogError(\"Message: {Message}\", ex.Message);\n    }\n} \n```", "```cs\n<button class=\"btn btn-primary\" @onclick=\"NewException\">\n    Throw Exception\n</button>\n@code {\n    [CascadingParameter]\n    public ErrorHandler? Error { get; set; }\n    private void NewException()\n    {\n        try\n        {\n            throw new Exception(\"This is a sample error!\");\n        }\n        catch (Exception ex)\n        {\n            Error?.ProcessError(ex);\n        }     \n    }\n} \n```", "```cs\n<ErrorHandler>\n    <ThrowExceptionHandled />\n</ErrorHandler> \n```", "```cs\n    <div class=\"game\">\n        <strong>Guess the Number</strong>\n        <div class=\"match-val\">correct digit</div>\n        <div class=\"match-pos\">correct position</div>\n        <div>digits: @digitCount</div>\n        <hr />\n        @if (guesses == null)\n        {\n            <h1>Loading...</h1>\n        }\n        else\n        {\n            <div class=\"guesses\">\n            </div>\n        }\n    </div> \n    ```", "```cs\n    @foreach (var row in guesses)\n    {\n        @for (int i = 0; i < digitCount; i++)\n        {\n            <span class=\"@row.Matches[i]\">\n                @row.Guess[i]\n            </span>\n        }\n        <br />\n    } \n    ```", "```cs\n    @if (winner)\n    {\n        <span>Winner!</span>\n        <div>\n            <button @onclick=\"PlayAgain\">Play Again</button>\n        </div>\n    }\n    else\n    {\n        <input type=\"text\"\n            @bind=guess\n            class=\"guess\"\n            inputmode=\"numeric\"\n            size=\"@digitCount\"\n            maxlength=\"@digitCount\" />\n        <button @onclick=\"GuessAnswer\">Guess</button>\n    } \n    ```", "```cs\n    using System.Text; \n    ```", "```cs\n    public `partial` class Game\n    {\n    } \n    ```", "```cs\n    [Parameter] public int? Digits { get; set; }\n    private int digitCount = 4;\n    private string answer = \"\";\n    private string guess = \"\";\n    private List<Row> guesses = new();\n    private bool winner = false;\n    protected override void OnParametersSet(){ }\n    private void CalculateAnswer(){ }\n    private void GuessAnswer(){ }\n    private void PlayAgain(){ }\n    public class Row\n    {\n        public string Guess { get; set; }\n        public string[] Matches { get; set; }\n    } \n    ```", "```cs\n    if (Digits.HasValue) { digitCount = (int)Digits; };\n    CalculateAnswer(); \n    ```", "```cs\n    StringBuilder calculateAnswer = new StringBuilder();\n    for (int i = 0; i < digitCount; i++)\n    {\n        int nextDigit = new Random().Next(0, 10);\n        calculateAnswer.Append(nextDigit);\n    }\n    answer = calculateAnswer.ToString(); \n    ```", "```cs\n    var curGuess = new Row()\n    {\n        Guess = guess,\n        Matches = new string[digitCount]\n    };\n    for (int i = 0; i < digitCount; i++)\n    {\n        if (answer[i] == guess[i])\n        {\n            curGuess.Matches[i] = \"match-pos\";\n        }\n        else\n        {\n            if (answer.Contains(guess[i]))\n            {\n                curGuess.Matches[i] = \"match-val\";\n            }\n        }\n    }\n    guesses.Add(curGuess);\n    guess = \"\";\n    if (guess == answer) winner = true; \n    ```", "```cs\n    winner = false;\n    guesses = new();\n    CalculateAnswer(); \n    ```", "```cs\n    .game {\n        padding: 15px;\n        font-size: 4rem;\n    }\n    input, button, .guesses {\n        font-size: 4rem;\n        font-family: Courier New, Courier, monospace\n    }\n    .match-pos {\n        color: green;\n    }\n    .match-val {\n        color: red\n    } \n    ```", "```cs\n    <head>\n        <meta charset=\"utf-8\" />\n        <base href=\"/\" />\n        <link href=\"css/app.css\" rel=\"stylesheet\" />\n    **<****link****href****=****\"GuessTheNumber.styles.css\"**\n    **rel****=****\"stylesheet\"** **/****>**\n    </head> \n    ```", "```cs\n    @using GuessTheNumber.Shared \n    ```", "```cs\n    <PageTitle>Guess the Number</PageTitle>\n    <Game /> \n    ```", "```cs\n    using System.Text.Json; \n    ```", "```cs\n    [Inject] ILogger<Game>? logger { get; set; } \n    ```", "```cs\n    logger.LogInformation($\"The answer is {answer}\"); \n    ```", "```cs\n    logger.LogInformation(JsonSerializer.Serialize(guesses)); \n    ```", "```cs\n    guess = \"\"; \n    ```", "```cs\n    <input type=\"number\" \n        value=@digitCount \n        inputmode=\"numeric\" \n        min=\"1\" max=\"10\" \n        @onchange=\"RestartGame\" /> \n    ```", "```cs\n    private void RestartGame(ChangeEventArgs e) {\n        digitCount = Convert.ToInt16(e.Value);\n        PlayAgain();\n    } \n    ```", "```cs\n    <ErrorBoundary>\n        <ChildContent>\n            <Game />\n        </ChildContent>\n        <ErrorContent>\n            <h1>You have entered an invalid guess!</h1>\n        </ErrorContent>\n    </ErrorBoundary> \n    ```"]