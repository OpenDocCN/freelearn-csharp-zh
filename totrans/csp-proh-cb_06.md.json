["```cs\n    namespace winformAsync\n    {\n        public partial class Form1 : Form\n        {\n            public Form1()\n            {\n                InitializeComponent();\n            }\n\n            private void button1_Click(object sender, EventArgs e)\n            {\n\n            }\n        }\n    }\n    ```", "```cs\n    private async void button1_Click(object sender, EventArgs e)\n    {\n\n    }\n    ```", "```cs\n    public class AsyncDemo\n    {\n    }\n    ```", "```cs\n    async Task<bool> TaskOfTResultReturning_AsyncMethod()\n    {\n        return await Task.FromResult<bool> (DateTime.IsLeapYear(DateTime.Now.Year));\n    }\n    ```", "```cs\n    async Task TaskReturning_AsyncMethod()\n    {\n        await Task.Delay(5000);\n        Console.WriteLine(\"5 second delay\");\n    }\n    ```", "```cs\n    public async Task LongTask()\n    {\n        bool isLeapYear = await TaskOfTResultReturning_AsyncMethod();\n        Console.WriteLine($\"{DateTime.Now.Year} {(isLeapYear ? \" is \" : \"  is not  \")} a leap year\");\n        await TaskReturning_AsyncMethod();\n    }\n    ```", "```cs\n    private async void button1_Click(object sender, EventArgs e)\n    {\n        Console.WriteLine(\"Button Clicked\");\n        Chapter6.AsyncDemo oAsync = new Chapter6.AsyncDemo();\n        await oAsync.LongTask();\n        Console.WriteLine(\"Button Click Ended\");\n    }\n    ```", "```cs\n    public async Task LongTask()\n    {\n        Task<bool> blnIsLeapYear = TaskOfTResultReturning_AsyncMethod();\n\n        for (int i = 0; i <= 10000; i++)\n        {\n            // Do other work that does not rely on blnIsLeapYear before awaiting\n        }\n\n        bool isLeapYear = await TaskOfTResultReturning_AsyncMethod();\n\n        Console.WriteLine($\"{DateTime.Now.Year} {(isLeapYear ? \" is \" : \"  is not  \")} a leap year\");\n\n        Task taskReturnMethhod = TaskReturning_AsyncMethod();\n\n        for (int i = 0; i <= 10000; i++)\n        {\n            // Do other work that does not rely on taskReturnMethhod before awaiting\n        }\n\n        await taskReturnMethhod;\n    }\n    ```", "```cs\n    public Task<int> ReadBigFile()\n    {    \n\n    }\n    ```", "```cs\n    public Task<int> ReadBigFile()\n    {\n        var bigFile = File.OpenRead(@\"C:\\temp\\taskFile.txt\");\n        var bigFileBuffer = new byte[bigFile.Length];\n        var readBytes = bigFile.ReadAsync(bigFileBuffer, 0, (int)bigFile.Length);\n\n        return readBytes;\n    }\n    ```", "```cs\n    public Task<int> ReadBigFile()\n    {\n        var bigFile = File.OpenRead(@\"C:\\temp\\taskFile.txt\");\n        var bigFileBuffer = new byte[bigFile.Length];\n        var readBytes = bigFile.ReadAsync(bigFileBuffer, 0, (int)bigFile.Length);\n        readBytes.ContinueWith(task =>\n        {\n            if (task.Status == TaskStatus.Running)\n                Console.WriteLine(\"Running\");\n            else if (task.Status == TaskStatus.RanToCompletion)\n                Console.WriteLine(\"RanToCompletion\");\n            else if (task.Status == TaskStatus.Faulted)\n                Console.WriteLine(\"Faulted\");\n\n            bigFile.Dispose();\n        });\n        return readBytes;\n    }\n    ```", "```cs\n    namespace winformAsync\n    {\n        public partial class Form1 : Form\n        {\n            public Form1()\n            {\n                InitializeComponent();\n            }\n\n            private void button1_Click(object sender, EventArgs e)\n            {\n\n            }\n        }\n    }\n    ```", "```cs\n    private async void button1_Click(object sender, EventArgs e)\n    {\n\n    }\n    ```", "```cs\n    private async void button1_Click(object sender, EventArgs e)\n    {\n        Console.WriteLine(\"Start file read\");\n        Chapter6.AsyncDemo oAsync = new Chapter6.AsyncDemo();\n        int readResult = await oAsync.ReadBigFile();\n        Console.WriteLine(\"Bytes read = \" + readResult);\n    }\n    ```", "```cs\n    private async Task<int> ReadMainLog()\n    {\n        var bigFile = File.OpenRead(@\"C:\\temp\\Log\\MainLog\\taskFile.txt\");\n        var bigFileBuffer = new byte[bigFile.Length];\n        var readBytes = bigFile.ReadAsync(bigFileBuffer, 0, (int)bigFile.Length);\n        await readBytes.ContinueWith(task =>\n        {\n            if (task.Status == TaskStatus.RanToCompletion)\n                Console.WriteLine(\"Main Log RanToCompletion\");\n            else if (task.Status == TaskStatus.Faulted)\n                Console.WriteLine(\"Main Log Faulted\");\n\n            bigFile.Dispose();\n        });\n        return await readBytes;\n    }\n    ```", "```cs\n    private async Task<int> ReadBackupLog()\n    {\n        var bigFile = File.OpenRead(@\"C:\\temp\\Log\\BackupLog\\taskFile.txt\");\n        var bigFileBuffer = new byte[bigFile.Length];\n        var readBytes = bigFile.ReadAsync(bigFileBuffer, 0, (int)bigFile.Length);\n        await readBytes.ContinueWith(task =>\n        {\n            if (task.Status == TaskStatus.RanToCompletion)\n                Console.WriteLine(\"Backup Log RanToCompletion\");\n            else if (task.Status == TaskStatus.Faulted)\n                Console.WriteLine(\"Backup Log Faulted\");\n\n            bigFile.Dispose();\n        });\n        return await readBytes;\n    }\n    ```", "```cs\n    public async Task<int> ReadLogFile()\n    {\n        int returnBytes = -1;\n        try\n        {\n            Task<int> intBytesRead = ReadMainLog();\n            returnBytes = await ReadMainLog();\n        }\n        catch (Exception ex)\n        {\n            try\n            {\n                returnBytes = await ReadBackupLog();\n            }\n            catch (Exception)\n            {\n                throw;\n            }\n        }\n        return returnBytes;\n    }\n    ```", "```cs\n    namespace winformAsync\n    {\n        public partial class Form1 : Form\n        {\n            public Form1()\n            {\n                InitializeComponent();\n            }\n\n            private void button1_Click(object sender, EventArgs e)\n            {\n\n            }\n        }\n    }\n    ```", "```cs\n    private async void button1_Click(object sender, EventArgs e)\n    {\n\n    }\n    ```", "```cs\n    private async void button1_Click(object sender, EventArgs e)\n    {\n        Console.WriteLine(\"Read backup file\");\n        Chapter6.AsyncDemo oAsync = new Chapter6.AsyncDemo();\n        int readResult = await oAsync.ReadLogFile();\n        Console.WriteLine(\"Bytes read = \" + readResult);\n    }\n    ```"]