["```cs\n      public char WhatIsMyGrade(int yourMarks)\n      {\n          var grade = 'F';\n          if (yourMarks >= 85)\n              grade = 'A';\n          else if (yourMarks >= 65)\n               grade = 'B';\n          else if (yourMarks >= 55)\n               grade = 'C';\n          else if (yourMarks >= 35)\n               grade = 'S';\n\n          return grade;\n      }\n```", "```cs\n      public double CmToInches(double cm)\n      {\n          var oneCmToInches = 0.393700787;\n\n          return oneCmToInches * cm; \n      }\n```", "```cs\n      using Chapter2.Primitives.PrimitiveLib;\n```", "```cs\n      var myHelper = new Helpers();\n      var myGrade = myHelper.WhatIsMyGrade(65);\n      Console.WriteLine($\"You are current grade is {myGrade}\");\n\n      Console.ReadLine();\n```", "```cs\n      var cm = 15;\n      var inches = myHelper.CmToInches(cm);\n      Console.WriteLine($\"{cm} centimeters in inches are {inches}\");\n```", "```cs\nvar myInteger = 10;\n```", "```cs\nint myInteger = 10; \n```", "```cs\n      using System.Collections.Generic;\n```", "```cs\n      public List<string> GetFruitsList()\n      {\n          var fruitsList = new List<string>();\n\n          fruitsList.Add(\"Apples\");\n          fruitsList.Add(\"Grapes\");\n          fruitsList.Add(\"Mangoes\");\n          fruitsList.Add(\"Oranges\");\n          fruitsList.Add(\"Pineapples\");\n\n          return fruitsList;\n       }\n```", "```cs\n      using System.Collections;\n```", "```cs\n      public ArrayList GetShopItems()\n      {\n          var shopItems = new ArrayList();\n          shopItems.Add(\"Fruits\");\n          shopItems.Add(\"Vegetables\");\n          shopItems.Add(\"Chocolates\");\n\n          return shopItems;\n       }\n```", "```cs\n      using Chapter2.Collections.CollectionsLib;\n```", "```cs\n      var littleShop = new LittleShop();\n      var fruits = littleShop.GetFruitsList();\n\n      foreach (var fruit in fruits)\n      {\n          FruitsList.Items.Add(fruit);\n      }\n\n      FruitsList.Items.Add(\"--------\");\n      FruitsList.Items.Add($\"Item Count: {fruits.Count}\");\n      FruitsList.Items.Add($\"Capacity: {fruits.Capacity}\");\n```", "```cs\n      var littleShop = new LittleShop();\n      var items = littleShop.GetShopItems();\n\n      for (int i=0; i<items.Count; i++)\n      {\n          ItemsList.Items.Add(items[i]);\n      }\n\n      ItemsList.Items.Add(\"--------\");\n      ItemsList.Items.Add($\"Item Count: {items.Count}\");\n      ItemsList.Items.Add($\"Capacity: {items.Capacity}\");\n```", "```cs\nforeach (var fruit in fruits)\n{\n    FruitsList.Items.Add(fruit);\n}\n```", "```cs\nFruitsList.Items.Add(\"--------\");\nFruitsList.Items.Add($\"Item Count: {fruits.Count}\");\nFruitsList.Items.Add($\"Capacity: {fruits.Capacity}\");\n```", "```cs\n      using System;\n\n      namespace Chapter2.Reflections.CalculatorLib\n      {\n          public class Calculator\n          {\n          }\n      }\n```", "```cs\n      public int Add(int number1, int number2)\n      {\n          return number1 + number2; \n      }\n\n      public int Subtract(int number1, int number2)\n      {\n          return number1 - number2;\n      }\n```", "```cs\n      using System.Reflection;\n      using Chapter2.Reflections.CalculatorLib;\n```", "```cs\n      MemberInfo info = typeof(Calculator);\n      Console.WriteLine($\"Assembly Name: {info.Name}\");\n      Console.WriteLine($\"Module Name: {info.Module.Name}\");\n      Console.WriteLine();\n\n      var calculator = new Calculator();\n      var typeObject = calculator.GetType();\n      var methods = typeObject.GetRuntimeMethods();\n\n      foreach (var method in methods)\n      {\n          Console.WriteLine($\"Method name : {method.Name}, \n          ---> Return type : {method.ReturnType}\");\n      }\n\n      Console.ReadLine();\n```", "```cs\nMemberInfo info = typeof(Calculator);\nConsole.WriteLine($\"Assembly Name: {info.Name}\");\nConsole.WriteLine($\"Module Name: {info.Module.Name}\");\nConsole.WriteLine();\n```", "```cs\nvar calculator = new Calculator();\nvar typeObject = calculator.GetType();\nvar methods = typeObject.GetRuntimeMethods();\n\nforeach (var method in methods)\n{\n    Console.WriteLine($\"Method name : {method.Name}, \n    ---> Return type : {method.ReturnType}\");\n}\n\nConsole.ReadLine();\n```", "```cs\n      using System.Collections.Generic;\n      using System.Linq;\n```", "```cs\n      private List<string> _contactList;\n```", "```cs\n      public TelephoneBook()\n      {\n\n          _contactList = new List<string>();\n\n          _contactList.Add(\"Lenna Paprocki\");\n          _contactList.Add(\"Donette Foller\");\n          _contactList.Add(\"Simona Morasca\");\n          _contactList.Add(\"Mitsue Tollner\");\n          _contactList.Add(\"Leota Dilliard\");\n          _contactList.Add(\"Sage Wieser\");\n          _contactList.Add(\"Kris Marrier\");\n          _contactList.Add(\"Minna Amigon\");\n          _contactList.Add(\"Abel Maclead\");\n          _contactList.Add(\"Kiley Caldarera\");\n          _contactList.Add(\"Graciela Ruta\");\n}\n```", "```cs\n      public List<string> GetContacts() \n      {\n          return _contactList;\n      }\n```", "```cs\n      public List<string> GetContactsByLastName(string lastName)\n      {\n          var contacts = _contactList.Where(\n          c => c.Contains(lastName)).ToList();\n          return contacts;\n      }\n```", "```cs\n      public List<string> GetSortedContacts(bool ascending = true)\n      {\n          var sorted = _contactList.OrderBy(c => c).ToList();\n\n          if (!ascending)\n          {\n              sorted = _contactList.OrderByDescending(c => c).ToList();\n          }\n\n          return sorted;\n      }\n```", "```cs\nvar contacts = _contactList.Where(c => c.Contains(lastName)).ToList();\n```", "```cs\nvar sorted = _contactList.OrderBy(c => c).ToList();\n```", "```cs\n      using Chapter2.Linq.QueriesLib;\n```", "```cs\n      var telephoneBook = new TelephoneBook();\n\n      ViewBag.Contacts = telephoneBook.GetContacts();\n```", "```cs\n      <h2>Contacts</h2>\n```", "```cs\n      <ul>\n          @foreach(var contact in ViewBag.Contacts as List<string>)\n          {\n              <li>@contact</li>\n          }\n      </ul>\n```", "```cs\n      public ActionResult Search(string ln)\n      {\n\n          var telephoneBook = new TelephoneBook();\n\n          if (string.IsNullOrEmpty(ln))\n          {\n              ViewBag.Contacts = telephoneBook.GetContacts();\n          }\n          else\n          {\n              ViewBag.Contacts =\n              telephoneBook.GetContactsByLastName(ln);\n          }\n\n          return View();\n      }\n```", "```cs\n      <h2>Search Results - Contacts</h2>\n```", "```cs\n      <ul>\n          @foreach (var contact in ViewBag.Contacts as List<string>)\n          {\n              <li>@contact</li>\n          }\n      </ul>\n```", "```cs\n      public ActionResult SortedContacts(bool asc = true)\n      {\n          var telephoneBook = new TelephoneBook();\n\n          ViewBag.Contacts = telephoneBook.GetSortedContacts(asc);\n\n          return View();\n      }\n```", "```cs\n      <ul>\n          @foreach (var contact in ViewBag.Contacts as List<string>)\n          {\n              <li>@contact</li>\n          }\n      </ul>\n```"]