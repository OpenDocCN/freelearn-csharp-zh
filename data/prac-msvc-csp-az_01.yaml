- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to .NET Aspire and Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Aspire和微服务简介
- en: Welcome to creating a solution consisting of Microservices. The first chapter
    provides the foundations for the microservices solution that will be developed
    in this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎创建由微服务组成的解决方案。第一章提供了本书中将开发的微服务解决方案的基础。
- en: Here, you will learn which features .NET Aspire offers for microservices. In
    this book, we create the **Codebreaker** solution. You will learn what Codebreaker
    is and the parts it consists of. In the last section of this chapter, you’ll learn
    which Azure services are used while we create the application on the tour up to
    the last chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将了解.NET Aspire为微服务提供的哪些功能。在这本书中，我们创建了**Codebreaker**解决方案。您将了解Codebreaker是什么以及它由哪些部分组成。在本章的最后部分，您将了解在创建应用程序的过程中使用了哪些Azure服务。
- en: The first chapter lays the foundation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章奠定了基础。
- en: In this chapter, you will learn about the advantages that are offered by .NET
    Aspire on creating microservices and you will gain the foundational knowledge
    needed to work with this technology, including how to define the app model, what
    it means for development and deployment, how service discovery is used, and how
    Azure resources are deployed while debugging the solution locally.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解.NET Aspire在创建微服务方面提供的优势，并且您将获得使用这项技术所需的基础知识，包括如何定义应用程序模型，这对开发和部署意味着什么，如何使用服务发现，以及如何在本地调试解决方案时部署Azure资源。
- en: You will get an overview of the application we built in this book, the parts
    of the solution, and how the different services are connected.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解我们在本书中构建的应用程序概述，解决方案的部分以及不同的服务是如何连接的。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解以下内容：
- en: Creating .NET Aspire projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建.NET Aspire项目
- en: The parts of the Codebreaker solution
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codebreaker解决方案的部分
- en: Using Microsoft Azure with .NET Aspire
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Microsoft Azure与.NET Aspire
- en: Azure services used by the Codebreaker solution
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codebreaker解决方案使用的Azure服务
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you need .NET 8 with the .NET Aspire workload, either Visual
    Studio or Visual Studio Code, Docker Desktop, and a Microsoft Azure subscription.
    Information about the installation is explained in this chapter and the readme
    file of the source code repository.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要.NET 8和.NET Aspire工作负载，无论是Visual Studio还是Visual Studio Code，Docker Desktop，以及Microsoft
    Azure订阅。有关安装的信息在本章和源代码仓库的readme文件中解释。
- en: 'The code for this chapter can be found in this GitHub repository: [https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure](https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下GitHub仓库中找到：[https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure](https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure)。
- en: 'In the `ch01` folder, you’ll see the projects with the results of this chapter.
    You’ll see these folders:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ch01`文件夹中，您将看到本章的项目结果。您将看到以下文件夹：
- en: '`Aspire`: This folder contains four projects created with a .NET Aspire template
    to run a .NET Aspire project including one service and a web application'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Aspire`：此文件夹包含使用.NET Aspire模板创建的四个项目，用于运行包括一个服务和Web应用的.NET Aspire项目'
- en: '`Azure`: This folder contains the same four projects from the previous folder,
    enhanced by using an Azure resource'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure`：此文件夹包含与上一个文件夹相同的四个项目，通过使用Azure资源进行了增强'
- en: Starting with .NET Aspire
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从.NET Aspire开始
- en: .NET Aspire is a new .NET technology offering tools and libraries that help
    create, debug, and deploy .NET solutions built using microservices. With all the
    chapters of this book, we’ll take advantage of .NET Aspire.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire是一种新的.NET技术，提供工具和库，帮助创建、调试和部署使用微服务的.NET解决方案。在这本书的所有章节中，我们将利用.NET
    Aspire。
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, you’ll get a core understanding of how .NET Aspire works. In
    all the other chapters, we’ll make use of .NET Aspire and get into the details.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将获得对.NET Aspire如何工作的核心理解。在其他所有章节中，我们将使用.NET Aspire并深入了解其细节。
- en: You can install it using the .NET **Command Line Interface** (**CLI**) or using
    Visual Studio 2022\. The first version of .NET Aspire is based on .NET 8, thus
    at least .NET 8 is required to use .NET Aspire.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用.NET **命令行界面** (**CLI**) 或使用Visual Studio 2022进行安装。.NET Aspire的第一个版本基于.NET
    8，因此至少需要.NET 8才能使用.NET Aspire。
- en: '.NET Aspire requires .NET 8, and can be installed by installing a .NET workload:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire需要.NET 8，可以通过安装.NET工作负载来安装：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To see the workloads installed, and the version of .NET Aspire, use the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看已安装的工作负载和 .NET Aspire 的版本，请使用以下：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you use Visual Studio, use the Visual Studio Installer, and select the **.NET
    Aspire SDK** component to install .NET Aspire.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Visual Studio，请使用 Visual Studio 安装程序，并选择 **.NET Aspire SDK** 组件来安装 .NET
    Aspire。
- en: .NET Aspire apps are designed to run in containers. Running the application
    locally, projects run directly on the system without the need for a Docker engine.
    Docker containers are used when deploying the solution. We can (and will) use
    available Docker images as part of the application. Here, the container runtime
    is required to run locally. In this book, we use the most used container runtime
    – **Docker Desktop**. Docker Desktop is free for personal use and for small companies.
    .NET Aspire also supports running containers with **Podman**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire 应用程序设计为在容器中运行。在本地运行应用程序时，项目直接在系统上运行，无需 Docker 引擎。在部署解决方案时使用 Docker
    容器。我们可以（并将）使用可用的 Docker 镜像作为应用程序的一部分。在这里，需要容器运行时才能在本地运行。在这本书中，我们使用最常用的容器运行时 –
    **Docker Desktop**。Docker Desktop 对个人使用和小公司免费。.NET Aspire 还支持使用 **Podman** 运行容器。
- en: After the installation of .NET Aspire, create a new project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 .NET Aspire 后，创建一个新的项目。
- en: Creating a .NET Aspire project
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 .NET Aspire 项目
- en: 'When .NET Aspire is installed, you can create a new project containing an API
    service and a Blazor client application using the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当 .NET Aspire 安装后，您可以使用以下方式创建一个包含 API 服务和 Blazor 客户端应用程序的新项目：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this template, four projects are created:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此模板，将创建四个项目：
- en: '`AspireSample.ApiService`: This project contains a REST service that uses ASP.NET
    Core minimal APIs'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AspireSample.ApiService`：此项目包含一个使用 ASP.NET Core 最小 API 的 REST 服务'
- en: '`AspireSample.Web`: An ASP.NET Core Blazor application that sends requests
    to the API service'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AspireSample.Web`：一个向 API 服务发送请求的 ASP.NET Core Blazor 应用程序'
- en: '`AspireSample.ServiceDefaults`: A library project with shared initialization
    code for all services of the solution'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AspireSample.ServiceDefaults`：一个库项目，包含解决方案中所有服务的共享初始化代码'
- en: '`AspireSample.AppHost`: The app host project defines the app model of the solution,
    and how all the resources are connected'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AspireSample.AppHost`：应用程序宿主项目定义了解决方案的应用程序模型以及所有资源是如何连接的'
- en: Let’s build and start the solution next.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们接下来构建并启动解决方案。
- en: The .NET Aspire dashboard
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Aspire 仪表板
- en: When you start the newly created project (the AppHost project needs to be the
    starting project), a console opens, showing the logs of the AppHost, and the browser
    opens a dashboard that shows the resources of the project, as you can see in *Figure
    1**.1*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动新创建的项目（AppHost 项目需要是启动项目）时，会打开一个控制台，显示 AppHost 的日志，并且浏览器会打开一个仪表板，显示项目的资源，如图
    *图 1**.1* 所示。
- en: '![Figure 1.1 – Aspire dashboard](img/B21217_01_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Aspire 仪表板](img/B21217_01_01.jpg)'
- en: Figure 1.1 – Aspire dashboard
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Aspire 仪表板
- en: With the .NET Aspire dashboard, you can see the resources running (`apiservice`
    and `webfrontend` in this image), the state of the resources, and the endpoints,
    and can access details and logs. In the left pane, you have access to logs, traces,
    and metrics data. While the dashboard is typically not used in production environments
    (we have **Prometheus**, **Grafana**, **Azure Application Insights**, and other
    environments), it’s great to know all this information during development time.
    Are there memory leaks with services? How does the interaction with services happen?
    Where are the bottlenecks? You can find this information using the dashboard.
    This is discussed in detail in [*Chapter 11*](B21217_11.xhtml#_idTextAnchor263).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 .NET Aspire 仪表板，您可以查看正在运行的资源（如图像中的 `apiservice` 和 `webfrontend`），资源的状态以及端点，并可以访问详细信息和管理日志。在左侧面板中，您可以访问日志、跟踪和指标数据。虽然仪表板通常不在生产环境中使用（我们有
    **Prometheus**、**Grafana**、**Azure Application Insights** 和其他环境），但在开发期间了解所有这些信息是非常有用的。服务中是否存在内存泄漏？服务之间的交互是如何发生的？瓶颈在哪里？您可以使用仪表板找到这些信息。这将在
    [*第 11 章*](B21217_11.xhtml#_idTextAnchor263) 中详细讨论。
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Because the .NET Aspire dashboard is that great, it’s available as a Docker
    image and can be used in small scenarios in production as well, but it has limitations
    outside of the development environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 .NET Aspire 仪表板非常出色，它作为 Docker 镜像提供，也可以在生产环境中的小型场景中使用，但它具有开发环境之外的局限性。
- en: When you click on the link of the `webfrontend`, the application opens. In case
    you already created Blazor applications, you already know the links from the application,
    as shown in *Figure 1**.2*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 `webfrontend` 的链接时，应用程序会打开。如果你已经创建了 Blazor 应用程序，你将已经知道应用程序中的链接，如图 *图 1.2*
    所示。
- en: '![Figure 1.2 – webfrontend](img/B21217_01_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – webfrontend](img/B21217_01_02.jpg)'
- en: Figure 1.2 – webfrontend
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – webfrontend
- en: As you click the `webfrontend` makes a request to `apiservice` for random weather
    information.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 `webfrontend` 时，它会向 `apiservice` 发送请求以获取随机天气信息。
- en: The app is running, so let’s get into the generated code for .NET Aspire next.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序正在运行，接下来让我们看看 .NET Aspire 生成的代码。
- en: The .NET Aspire app model
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Aspire 应用程序模型
- en: 'To start digging into .NET Aspire, you need to learn the app model:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解 .NET Aspire，你需要学习应用程序模型：
- en: AspireSample.AppHost/Program.cs
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: AspireSample.AppHost/Program.cs
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you are used to the app builder pattern with .NET applications and the `Host`
    class to configure the DI container, app configuration, and logging, you can see
    some similarities. Here, a `DistributedApplication` class is used to create `IDistributedApplicationBuilder`
    with the `CreateBuilder` method. The returned builder is used to define all the
    resources needed by the solution. With the generated code, two projects are mapped
    using the `AddProject` method. The projects are referenced with a generic type,
    for example, `Projects.AspireSample_ApiService`. This type was created by adding
    a project reference to the `AspireSample.ApiService` project. You can see the
    reference when you open the `AspireSample.AppHost.csproj` project file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯了 .NET 应用程序中的应用程序构建器模式和 `Host` 类来配置 DI 容器、应用程序配置和日志记录，你将看到一些相似之处。在这里，使用
    `CreateBuilder` 方法创建 `DistributedApplication` 类以生成 `IDistributedApplicationBuilder`。返回的构建器用于定义解决方案所需的所有资源。使用生成的代码，通过
    `AddProject` 方法映射了两个项目。这些项目通过泛型类型引用，例如 `Projects.AspireSample_ApiService`。此类型是通过将项目引用添加到
    `AspireSample.ApiService` 项目中创建的。当你打开 `AspireSample.AppHost.csproj` 项目文件时，你可以看到这个引用。
- en: Using project types with `AddProject` is convenient, but it’s not a requirement.
    You can also pass a string of a directory where the project resides.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `AddProject` 添加项目类型很方便，但这不是必需的。你也可以传递一个字符串，指向项目所在的目录。
- en: Other than adding projects, it’s possible to add executables (`AddExecutable`)
    or Docker images (`AddContainer`).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加项目外，还可以添加可执行文件（`AddExecutable`）或 Docker 镜像（`AddContainer`）。
- en: .NET Aspire also offers a huge list of predefined resources, for example, RabbitMQ,
    Kafka, Redis, and SQL Server, and resources running within Microsoft Azure, such
    as Azure Cosmos DB, Azure Key Vault, and Azure Event Hub. To add resources to
    the app model, NuGet packages are prefixed with `Aspire.Hosting` and `Aspire.Hosting.Azure`
    needs to be added.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire 还提供了一大串预定义的资源，例如 RabbitMQ、Kafka、Redis 和 SQL Server，以及运行在 Microsoft
    Azure 中的资源，如 Azure Cosmos DB、Azure 密钥保管库和 Azure 事件中心。要将资源添加到应用程序模型中，需要在 NuGet
    包前缀为 `Aspire.Hosting`，并且需要添加 `Aspire.Hosting.Azure`。
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In this book, many new resources are added to the Codebreaker solution. [*Chapter
    3*](B21217_03.xhtml#_idTextAnchor063) adds SQL Server and Azure Cosmos DB, [*Chapter
    5*](B21217_05.xhtml#_idTextAnchor110) adds Docker containers, [*Chapter 7*](B21217_07.xhtml#_idTextAnchor162)
    adds Azure App Configuration and Azure Key Vault, [*Chapter 11*](B21217_11.xhtml#_idTextAnchor263)
    adds Azure Log Analytics, Prometheus, and Grafana, [*Chapter 13*](B21217_13.xhtml#_idTextAnchor317)
    adds Azure SignalR Services, and so on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，许多新资源被添加到 Codebreaker 解决方案中。[*第 3 章*](B21217_03.xhtml#_idTextAnchor063)
    添加了 SQL Server 和 Azure Cosmos DB，[*第 5 章*](B21217_05.xhtml#_idTextAnchor110) 添加了
    Docker 容器，[*第 7 章*](B21217_07.xhtml#_idTextAnchor162) 添加了 Azure 应用配置和 Azure 密钥保管库，[*第
    11 章*](B21217_11.xhtml#_idTextAnchor263) 添加了 Azure 日志分析、Prometheus 和 Grafana，[*第
    13 章*](B21217_13.xhtml#_idTextAnchor317) 添加了 Azure SignalR 服务，等等。
- en: The name `"apiservice"` that’s passed as a parameter passed to the `AddProject`
    method defines the name of the resource. We’ll use this name later in the *Using
    service* *discovery* section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参数传递给 `AddProject` 方法的 `"apiservice"` 名称定义了资源的名称。我们将在 *使用服务* *发现* 部分中使用此名称。
- en: '`AddProject` returns an object of the `IResourceBuilder<ProjectResource>` type.
    The `IResourceBuilder` objects can be used to connect multiple resources within
    the app model. The `ProjectResource` type derives from the `Aspire.Hosting.ApplicationModel.Resource`
    base class and implements several resource interface types, such as `IResourceWithEnvironment`
    and `IResourceWithServiceDiscovery`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddProject` 返回一个 `IResourceBuilder<ProjectResource>` 类型的对象。`IResourceBuilder`
    对象可用于在应用模型中连接多个资源。`ProjectResource` 类型继承自 `Aspire.Hosting.ApplicationModel.Resource`
    基类，并实现了多个资源接口类型，例如 `IResourceWithEnvironment` 和 `IResourceWithServiceDiscovery`。'
- en: 'Let’s use this resource object to connect another resource:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用此资源对象连接另一个资源：
- en: Aspire/AspireSample.AppHost/Program.cs
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Aspire/AspireSample.AppHost/Program.cs
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `apiService` variable returned from the first `AddProject` method is referenced
    with the second project – a web frontend – using the `WithReference` method. This
    allows accessing the web frontend to access the API service. The URL of the API
    service is assigned as an environment variable to the web frontend – this is what
    the `IResourceWithServiceDiscovery` interface is used for. While the API service
    does not need to be accessed externally (only the web frontend needs access),
    the web frontend should be accessible from the outside. That’s why the `WithExternalHttpEndpoints`
    method is used with the web frontend project. This configuration information is
    used to specify how the Ingress controller added as a proxy to the resource is
    configured.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一个 `AddProject` 方法返回的 `apiService` 变量使用 `WithReference` 方法引用第二个项目——一个网络前端。这允许访问网络前端以访问
    API 服务。API 服务的 URL 被分配为网络前端的环境变量——这就是 `IResourceWithServiceDiscovery` 接口所用的。虽然
    API 服务不需要外部访问（只有网络前端需要访问），但网络前端应该可以从外部访问。这就是为什么使用 `WithExternalHttpEndpoints`
    方法与网络前端项目一起使用。此配置信息用于指定添加到资源作为代理的 Ingress 控制器的配置。
- en: Before looking into the projects that are referenced by the AppHost, let’s get
    into the shared `AspireSample.ServiceDefaults` project.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看 AppHost 引用的项目之前，让我们深入了解共享的 `AspireSample.ServiceDefaults` 项目。
- en: The shared project for common configuration
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用配置的共享项目
- en: 'The `AspireSample.ServiceDefaults` project is a library with a common configuration
    that can be used by all the resource projects:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`AspireSample.ServiceDefaults` 项目是一个库，包含通用配置，可以被所有资源项目使用：'
- en: Aspire/AspireSample.ServiceDefaults/Extensions.cs
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Aspire/AspireSample.ServiceDefaults/Extensions.cs
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This shared project contains the `AddServiceDefaults` extension method that
    implements a common configuration for the resource applications. With the implementation,
    `ConfigureOpenTelemetry` is invoked, which is another extension method defined
    by the `Extensions` class. The parts that are common for logging, metrics, and
    distributed tracing are implemented here. This is covered in [*Chapter 11*](B21217_11.xhtml#_idTextAnchor263).
    `AddDefaultHealthChecks` configures health checks for the services, which can
    include health checks for the .NET Aspire components that are used.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此共享项目包含 `AddServiceDefaults` 扩展方法，该方法实现了资源应用的通用配置。通过此实现，将调用 `ConfigureOpenTelemetry`，这是由
    `Extensions` 类定义的另一个扩展方法。这里实现了日志记录、指标和分布式跟踪的通用部分。这在本章的[*第11章*](B21217_11.xhtml#_idTextAnchor263)中有详细说明。`AddDefaultHealthChecks`
    配置服务的健康检查，这可能包括用于 .NET Aspire 组件的健康检查。
- en: '`AddServiceDiscovery` makes use of the `Microsoft.Extensions.ServiceDiscovery`
    library, which is also new since the first release of .NET Aspire, but can also
    be used independently of .NET Aspire. The `AddServiceDiscovery` method registers
    default service endpoint resolvers. Service discovery is not only configured with
    the DI container but also with the configuration of the HTTP client, with the
    lambda parameter of the `ConfigureHttpClientDefaults` method. Service discovery
    is discussed in the next section. `ConfigureHttpClientDefaults` is part of the
    `Microsoft.Extensions.Http` library, the HTTP client factory. The package that’s
    referenced from the `ServiceDefaults` library is `Microsoft.Extensions.Http.Resiliency`.
    This library is new since .NET 8 and offers extensions to the Polly library. With
    a distributed application, invocations sometimes fail on transient issues. Retrying
    invocations to these resources can succeed when invoked another time. This functionality
    is built into .NET Aspire with default resiliency configuration in `AddStandardResilienceHandler`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddServiceDiscovery`使用了`Microsoft.Extensions.ServiceDiscovery`库，这个库也是从.NET
    Aspire的第一个版本开始就有的，但也可以独立于.NET Aspire使用。`AddServiceDiscovery`方法注册了默认的服务端点解析器。服务发现不仅可以通过DI容器进行配置，还可以通过配置HTTP客户端，使用`ConfigureHttpClientDefaults`方法的lambda参数进行配置。服务发现将在下一节中讨论。`ConfigureHttpClientDefaults`是`Microsoft.Extensions.Http`库的一部分，即HTTP客户端工厂。从`ServiceDefaults`库引用的包是`Microsoft.Extensions.Http.Resiliency`。这个库是从.NET
    8开始出现的，为Polly库提供了扩展。在分布式应用程序中，调用有时会在短暂问题上失败。对这些资源的调用重试可能会在另一次调用时成功。这种功能内置在.NET
    Aspire中，并在`AddStandardResilienceHandler`中提供了默认的弹性配置。'
- en: But now, let’s get into service discovery.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，让我们进入服务发现。
- en: Using service discovery
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用服务发现
- en: '`webfrontend` needs to know about the link of `apiservice` to get the weather
    information. This link is different depending on the environment the solution
    is running with. Running the application locally on the development system, we
    use localhost links with different port numbers, and depending on the environments
    where the solution is running (for example, Azure Container App environments,
    Kubernetes, etc.), different configurations are required.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`webfrontend`需要了解`apiservice`的链接以获取天气信息。这个链接取决于解决方案运行的环境。在开发系统上本地运行应用程序时，我们使用不同端口号的localhost链接，并且根据解决方案运行的环境（例如，Azure
    Container App环境、Kubernetes等），需要不同的配置。'
- en: With the new service discovery, logical names can be used for the services,
    which are resolved using different providers. Thus, the same functionality works
    in different environments.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的服务发现，可以为服务使用逻辑名称，这些名称使用不同的提供者进行解析。因此，相同的功能可以在不同的环境中工作。
- en: 'The Blazor client application configures `HttpClient`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor客户端应用程序配置`HttpClient`：
- en: Aspire/AspireSample.Web/Program.cs
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Aspire/AspireSample.Web/Program.cs
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `apiservice` name comes from the app model definition – the name that has
    been passed to the `AddProject` method. Before the colon, the schema, for example,
    `http` or `https` can be specified. Separating schemas with `+` allows the use
    of multiple schemas, and the first one is preferred.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`apiservice`的名称来自应用程序模型定义——传递给`AddProject`方法的名称。在冒号之前，可以指定模式，例如`http`或`https`。使用`+`分隔模式允许使用多个模式，并且首选第一个。'
- en: 'The `AddServiceDiscovery` method that was added to the DI container earlier
    adds a configuration-based endpoint resolver by default. With this, the configuration
    can be added to a JSON configuration file, for example, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 之前添加到DI容器的`AddServiceDiscovery`方法默认添加了一个基于配置的端点解析器。使用它，可以将配置添加到JSON配置文件中，例如如下所示：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With the configuration, the section needs to be named `Services`. Within the
    `Services` section, the named service is looked for (`apiservice`), and there,
    the values below the schema name (`https`) are resolved. The port numbers are
    randomly created and will differ with your environment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 配置后，该部分需要命名为`Services`。在`Services`部分中，查找命名服务（`apiservice`），然后在该处解析模式名称（`https`）下的值。端口号是随机生成的，并且会根据您的环境而有所不同。
- en: 'With the AppHost, as `apiservice` is referenced from the web frontend, the
    URIs to the API service are added as environment variables. Open the .NET Aspire
    dashboard, and in the `webfrontend`. There, you can see the `services__apiservice_http__0`
    and `services__apiservice_https_0` environment variables, and the `http://localhost:5395`,
    and `https://localhost:7313` values. The URIs are specified within `Properties/launchsettings.json`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AppHost 中，由于 `apiservice` 被前端网页引用，API 服务的 URI 被添加为环境变量。打开 .NET Aspire 仪表板，在
    `webfrontend` 中，你可以看到 `services__apiservice_http__0` 和 `services__apiservice_https_0`
    环境变量，以及 `http://localhost:5395` 和 `https://localhost:7313` 的值。URI 在 `Properties/launchsettings.json`
    中指定：
- en: Aspire/AspireSample.ApiService/Properties/launchSettings.json
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Aspire/AspireSample.ApiService/Properties/launchSettings.json
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `applicationUrl` setting defines the URLs used on starting the application,
    and this is the link that is used to add it to the environment variable. Because
    environment variables are part of the .NET configuration, these values are retrieved
    by the service discovery configuration provider.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`applicationUrl` 设置定义了应用程序启动时使用的 URL，这是用于将其添加到环境变量的链接。因为环境变量是 .NET 配置的一部分，所以这些值由服务发现配置提供者检索。'
- en: Azure Container Apps and Kubernetes offer service discovery features without
    using a service discovery library. With applications deployed there, a pass-through
    provider is configured using `DnsEndPoint`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 容器应用和 Kubernetes 提供了服务发现功能，而无需使用服务发现库。在这些应用程序部署后，使用 `DnsEndPoint` 配置了一个透传提供者。
- en: Running the .NET Aspire solution locally, the process of `webfrontend` and `apiservice`
    use random ports. A reverse proxy is automatically added before these processes,
    and the reverse proxy is accessible via the configured launch settings.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地运行 .NET Aspire 解决方案时，`webfrontend` 和 `apiservice` 进程使用随机端口。在这些进程之前自动添加了一个反向代理，并且反向代理可以通过配置的启动设置访问。
- en: 'This allows the changing of the number of replicas with the app model:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许通过应用程序模型更改副本的数量：
- en: Aspire/AspireSample.AppHost/Program.cs
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Aspire/AspireSample.AppHost/Program.cs
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With the app model configuration in the AppHost, using `WithReplicas(3)` starts
    three instances of the service using three random ports, and the same port number
    from the reverse proxy as shown in *Figure 1**.3*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AppHost 中，使用 `WithReplicas(3)` 通过三个随机端口启动三个服务实例，并且与反向代理中显示的相同端口号，如 *图 1**.3*
    所示。
- en: '![Figure 1.3 – Multiple replicas](img/B21217_01_03.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 多个副本](img/B21217_01_03.jpg)'
- en: Figure 1.3 – Multiple replicas
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 多个副本
- en: You can see three `apiservice-` services running with different postfixes, and
    three processes with the same port number, as shown with the endpoints. The endpoint
    defined from the launch settings is the endpoint of the reverse proxy. When you
    open **Details**, you can see different target ports with every service. The reverse
    proxy acts as a load balancer to choose one of the replicas.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到三个带有不同后缀的 `apiservice-` 服务正在运行，以及三个具有相同端口号的进程，如端点所示。从启动设置中定义的端点是反向代理的端点。当你打开**详细信息**时，你可以看到每个服务都有不同的目标端口。反向代理充当负载均衡器，以选择其中一个副本。
- en: Note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To start the solution with the `http` launch profile, you need to add the `ASPIRE_ALLOW_UNSECURED_TRANSPORT`
    environment variable to the launch settings of the AppHost project and set it
    to `true`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `http` 启动配置文件启动解决方案，你需要将 `ASPIRE_ALLOW_UNSECURED_TRANSPORT` 环境变量添加到 AppHost
    项目的启动设置中，并将其设置为 `true`。
- en: This was an important core functionality from .NET Aspire. However, there’s
    more.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从 .NET Aspire 的重要核心功能。然而，还有更多。
- en: .NET Aspire components
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Aspire 组件
- en: .NET Aspire components make it easy to use Microsoft and third-party features
    and services from within the applications that are configured. Azure Cosmos DB,
    Pomelo MySQL Entity Framework Core, and SQL Server are components available to
    access databases, and RabbitMQ, Apache Kafka, and Azure Service Bus are components
    for messaging. There’s a list available at [https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview](https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire 组件使得在配置的应用程序中使用 Microsoft 和第三方功能和服务的变得容易。Azure Cosmos DB、Pomelo
    MySQL Entity Framework Core 和 SQL Server 是用于访问数据库的组件，而 RabbitMQ、Apache Kafka 和
    Azure Service Bus 是用于消息传递的组件。有关组件的列表，请参阅 [https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview](https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview)。
- en: To use a component, typically with the AppHost, a resource needs to be configured
    by adding a host NuGet package, for example, for the Azure Cosmos DB EF Core component,
    you would add the `Aspire.Hosting.Azure.CosmosDB` package. The component itself
    is then used by adding the `Aspire.Microsoft.EntityFrameworkCore.Cosmos` package
    to the service that accesses the database, for example, the API service.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用组件，通常与AppHost一起使用，需要通过添加主机NuGet包来配置资源，例如，对于Azure Cosmos DB EF Core组件，您会添加`Aspire.Hosting.Azure.CosmosDB`包。然后，通过将`Aspire.Microsoft.EntityFrameworkCore.Cosmos`包添加到访问数据库的服务中（例如，API服务），来使用该组件本身。
- en: What does a component have to offer? Do you know what names are used by a technology
    to turn on logging metrics data? Aspire components know this, and it’s easy to
    configure it. When an Azure Cosmos DB resource is added to the app model, and
    is referenced by a service project, the connection string is configured as an
    environment variable (or stored within a secret store) and can be accessed by
    the project that needs the connection.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 组件能提供什么？你知道技术用来开启日志度量数据名称是什么吗？Aspire组件知道这一点，并且配置起来很容易。当Azure Cosmos DB资源添加到应用模型中，并被服务项目引用时，连接字符串被配置为环境变量（或存储在秘密存储中），并且可以被需要连接的项目访问。
- en: In many of the book chapters, we’ll add some new components, thus we don’t get
    into more details here.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的许多章节中，我们将添加一些新组件，因此这里不再详细介绍。
- en: Creating the app model manifest
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建应用模型清单
- en: 'With the app model defined in the `AppHost` project, we can create a JSON manifest
    file that describes the resources. You need to stop the project to allow a rebuild
    if it’s still running:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AppHost`项目中定义的应用模型，我们可以创建一个描述资源的JSON清单文件。如果项目仍在运行，则需要停止项目以允许重新构建：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'An extract of this manifest file is shown in the following snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了此清单文件的一部分：
- en: Aspire/AspireSample.AppHost/aspire-manifest.json
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Aspire/AspireSample.AppHost/aspire-manifest.json
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The manifest contains information about the resource type, environment variables,
    binding, and more. With the app model, we can also specify the use of Azure resources.
    This manifest file can now be used by tools to deploy the solution, (e.g., by
    using the Azure Developer CLI to deploy it to Microsoft Azure). Creating Azure
    resources is covered in [*Chapter 6*](B21217_06.xhtml#_idTextAnchor137) and continued
    from there in other chapters.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 清单包含有关资源类型、环境变量、绑定等信息。使用应用模型，我们还可以指定使用Azure资源。现在，此清单文件可以被工具用于部署解决方案，例如，通过使用Azure开发者CLI将其部署到Microsoft
    Azure）。创建Azure资源的内容在[*第6章*](B21217_06.xhtml#_idTextAnchor137)中介绍，并在其他章节中继续介绍。
- en: Using Aspir8 (an open-source project, see [https://github.com/prom3theu5/aspirational-manifests/](https://github.com/prom3theu5/aspirational-manifests/)),
    it’s possible to deploy the solution to a Kubernetes cluster. This is used in
    [*Chapter 16*](B21217_16.xhtml#_idTextAnchor373).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Aspir8（一个开源项目，见[https://github.com/prom3theu5/aspirational-manifests/](https://github.com/prom3theu5/aspirational-manifests/)），可以将解决方案部署到Kubernetes集群。这在[*第16章*](B21217_16.xhtml#_idTextAnchor373)中有使用。
- en: The app model can be customized based on different launch profiles. With this,
    different manifest files can be created to deploy to (e.g., Azure and use specific
    Azure resources and to an on-premises Kubernetes cluster).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应用模型可以根据不同的启动配置文件进行自定义。这样，可以创建不同的清单文件以部署到（例如，Azure并使用特定的Azure资源，以及到本地Kubernetes集群）。
- en: Note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The AppHost project containing the app model is used when starting and debugging
    the project during development. For deployment, the manifest of the app model
    is used. When running the solution in the production environment, the app host
    is no longer in action.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中启动和调试项目时，使用包含应用模型的AppHost项目。对于部署，使用应用模型的清单。当在生产环境中运行解决方案时，应用宿主不再起作用。
- en: .NET Aspire is used in this book from the first to the last chapter. Let’s look
    into what we are building.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire本书从第一章到最后一章都在使用。让我们看看我们正在构建的内容。
- en: Codebreaker – the solution
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Codebreaker – 解决方案
- en: 'The Codebreaker solution is a traditional game to solve a set of colors. With
    one game type, the player needs to place four colors (which can be duplicates)
    from a list of six different colors. The correct colors are chosen randomly by
    the game service. With every move the player makes, an answer is returned: for
    every color that is correct and positioned at the correct place, a black peg is
    returned. For every color that is correct but wrongly positioned, a white peg
    is returned. The player now has up to 12 moves to find the correct solution. *Figure
    1**.4* shows a game run using a Blazor client application.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 代码破解解决方案是一个传统的游戏，用于解决一组颜色。使用一种游戏类型，玩家需要从六个不同颜色的列表中选择四个颜色（可以是重复的）。游戏服务随机选择正确的颜色。玩家每走一步，就会得到一个答案：对于每个正确且位置正确的颜色，会返回一个黑色标记。对于每个正确但位置错误的颜色，会返回一个白色标记。现在玩家最多有
    12 次移动来找到正确的解决方案。*图 1**.4* 展示了使用 Blazor 客户端应用程序运行的游戏。
- en: '![Figure 1.4 – Blazor client application](img/B21217_01_04.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – Blazor 客户端应用程序](img/B21217_01_04.jpg)'
- en: Figure 1.4 – Blazor client application
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Blazor 客户端应用程序
- en: This gameplay shows that the solution was found after five moves. In this case,
    the correct result was yellow – black – red – black. The first selection was red
    – green – blue – yellow, with a result of two white pegs. With the fifth move,
    yellow – black – red – black was selected and four black pegs were returned, which
    means this is the correct move.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这种游戏玩法表明，在五步之后找到了解决方案。在这种情况下，正确的结果是黄色 – 黑色 – 红色 – 黑色。第一次选择是红色 – 绿色 – 蓝色 – 黄色，结果是两个白色标记。第五步选择了黄色
    – 黑色 – 红色 – 黑色，并返回了四个黑色标记，这意味着这是正确的移动。
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Creating client applications is not part of this book (just a simple console
    application accessing the API is done in [*Chapter 4*](B21217_04.xhtml#_idTextAnchor092)).
    However, the source code for several client applications is available at [https://github.com/codebreakerapp](https://github.com/codebreakerapp).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 创建客户端应用程序不是本书的内容（在第 [*第 4 章*](B21217_04.xhtml#_idTextAnchor092) 中仅完成了一个简单的控制台应用程序，该程序访问
    API）。然而，几个客户端应用程序的源代码可在 [https://github.com/codebreakerapp](https://github.com/codebreakerapp)
    获取。
- en: Creating a service to run some game rules seems like a simple task that doesn’t
    need a microservices architecture. However, there’s more, as shown in the sequence
    diagrams in *Figure 1**.5* and *Figure 1**.6*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个运行某些游戏规则的服务似乎是一个简单的任务，不需要微服务架构。然而，正如 *图 1**.5* 和 *图 1**.6* 中的序列图所示，还有更多内容。
- en: '![Figure 1.5 – The Codebreaker play games sequence](img/B21217_01_05.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 代码破解玩游戏序列](img/B21217_01_05.jpg)'
- en: Figure 1.5 – The Codebreaker play games sequence
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 代码破解玩游戏序列
- en: Multiple services are needed with the solution. The game API service is not
    only invoked by UIs used by human players; a bot service, which can be triggered
    on receiving a message, plays multiple games on its own, and the game API service
    writes information about games and every move set to a database.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案需要多个服务。游戏 API 服务不仅被人类玩家使用的 UI 调用；一个可以接收到消息后触发的机器人服务，会自行玩多个游戏，并且游戏 API 服务将有关游戏和每一步的信息写入数据库。
- en: '![Figure 1.6 – Codebreaker game completion sequence](img/B21217_01_06.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 代码破解游戏完成序列](img/B21217_01_06.jpg)'
- en: Figure 1.6 – Codebreaker game completion sequence
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 代码破解游戏完成序列
- en: On completion of a game, the game API service not only writes this information
    to a database but also sends events. These events are received by a live service
    and a ranking service. The live service is used by live clients to monitor running
    games using ASP.NET Core SignalR. The ranking service writes completed games to
    its own database, which can be used by clients to get daily, weekly, and monthly
    game ranks. A service running Microsoft YARP is used as well to authenticate users
    and forward requests to the different services.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏完成后，游戏 API 服务不仅将此信息写入数据库，还发送事件。这些事件被实时服务和排名服务接收。实时服务由实时客户端使用 ASP.NET Core
    SignalR 监控正在进行的游戏。排名服务将完成的游戏写入其自己的数据库，客户端可以使用它来获取每日、每周和每月的游戏排名。还使用运行 Microsoft
    YARP 的服务来验证用户并将请求转发到不同的服务。
- en: The Codebreaker solution makes use of several Azure services, as discussed next.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 代码破解解决方案利用了多个 Azure 服务，如以下所述。
- en: Using Microsoft Azure
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Microsoft Azure
- en: To create and run the code from this book, you also need to have an Azure subscription.
    You can activate Microsoft Azure for free at [https://azure.microsoft.com/free](https://azure.microsoft.com/free),
    which gives you an amount of about $200 Azure credits that are available for the
    first 30 days and several services that can be used for free for the time after.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建和运行本书中的代码，您还需要拥有一个Azure订阅。您可以在[https://azure.microsoft.com/free](https://azure.microsoft.com/free)免费激活Microsoft
    Azure，这将为您的账户提供约200美元的Azure信用额度，这些额度在最初30天内可用，之后还可以免费使用一些服务。
- en: 'What many developers miss is that if you have a Visual Studio Professional
    or Enterprise subscription, you also have a free amount of Azure resources every
    month. You just need to activate this with your Visual Studio subscription: [https://visualstudio.microsoft.com/subscriptions/](https://visualstudio.microsoft.com/subscriptions/).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者可能会错过的是，如果您拥有Visual Studio Professional或Enterprise订阅，您每个月还可以免费获得一定数量的Azure资源。您只需使用您的Visual
    Studio订阅激活即可：[https://visualstudio.microsoft.com/subscriptions/](https://visualstudio.microsoft.com/subscriptions/)。
- en: 'To create and manage resources, we use the Azure Portal, the Azure CLI, and
    the Azure Developer CLI. On Windows, you can install them with the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建和管理资源，我们使用Azure Portal、Azure CLI和Azure Developer CLI。在Windows上，您可以使用以下方式安装它们：
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To install these tools on Mac and Linux, check [https://learn.microsoft.com/en-us/cli/azure/install-azure-cli](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli)
    and [https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac和Linux上安装这些工具，请查看[https://learn.microsoft.com/en-us/cli/azure/install-azure-cli](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli)和[https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/install-azd)。
- en: Let’s look at the resources used with Microsoft Azure.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看使用Microsoft Azure的资源。
- en: Azure resources used by Codebreaker
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Codebreaker使用的Azure资源
- en: To see what Azure resources are used, check *Figure 1**.7*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看使用了哪些Azure资源，请查看*图1.7*。
- en: '![Figure 1.7 – Azure resources for Codebreaker](img/B21217_01_07.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – Codebreaker的Azure资源](img/B21217_01_07.jpg)'
- en: Figure 1.7 – Azure resources for Codebreaker
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – Codebreaker的Azure资源
- en: 'The compute services where the solution is running is an Azure Container App
    environment. This is a service that abstracts a Kubernetes cluster. The bot service,
    game APIs, live service, ranking service, and the gateway using YARP run within
    Azure Container Apps. The Azure Storage queue is used from the bot service: as
    a message arrives in the queue, the bot service is triggered to play a series
    of games. The bot service can be used from all client apps as well – indirectly
    via a gateway, implemented with YARP. The game API service writes games to the
    Azure Cosmos DB and caches games with a Redis cluster. As games are completed,
    game events are pushed to the Azure Event Hub. The live service and ranking service
    are subscribers to the Event Hub. The live service uses ASP.NET Core SignalR,
    and to reduce the load of this service, the Azure SignalR service is used.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案运行的计算服务是Azure Container App环境。这是一个抽象Kubernetes集群的服务。机器人服务、游戏API、实时服务、排名服务和使用YARP的网关都在Azure
    Container Apps中运行。机器人服务使用Azure Storage队列：当队列中有消息到达时，机器人服务被触发以玩一系列游戏。机器人服务也可以从所有客户端应用程序中使用
    – 通过YARP实现的网关间接使用。游戏API服务将游戏写入Azure Cosmos DB，并使用Redis集群缓存游戏。游戏完成后，游戏事件会被推送到Azure
    Event Hub。实时服务和排名服务是Event Hub的订阅者。实时服务使用ASP.NET Core SignalR，为了减少该服务的负载，使用了Azure
    SignalR服务。
- en: What’s commonly used is the Azure App Configuration for application configuration
    values and feature management, Azure Key Vault to store secrets, Azure Active
    Directory B2C for user registrations, and Log Analytics and Application Insights
    to monitor the application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 常用的有Azure App Configuration，用于应用程序配置值和功能管理，Azure Key Vault用于存储机密，Azure Active
    Directory B2C用于用户注册，以及Log Analytics和Application Insights用于监控应用程序。
- en: Note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Starting with a small version of Codebreaker, not that many Azure services would
    be required to use. For a flexible and scalable solution, which might be accessed
    worldwide, and to learn about all the different aspects of microservices, all
    these services are in use. Don’t be afraid of the cost when deploying the services
    with your Azure subscription. As long as you don’t create a huge load (which we
    do in [*Chapter 12*](B21217_12.xhtml#_idTextAnchor294)), the cost stays very small,
    and by far you will not use the full $200 available with the free subscription
    when you delete the resources again after use.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个小版本的Codebreaker开始，不需要很多Azure服务即可使用。为了实现灵活和可扩展的解决方案，该解决方案可能被全球访问，并且为了了解微服务的各个方面，所有这些服务都在使用中。在部署服务时，不要担心成本。只要您不创建巨大的负载（我们将在[*第12章*](B21217_12.xhtml#_idTextAnchor294)中这样做），成本就会非常小，并且在使用后删除资源时，您远远不会用完免费订阅中可用的$200。
- en: Azure provisioning from the development environment
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从开发环境进行Azure配置
- en: Your .NET Aspire solution can easily integrate with Microsoft Azure and deploy
    resources while debugging the solution.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您的.NET Aspire解决方案可以轻松集成到Microsoft Azure中，并在调试解决方案时部署资源。
- en: By debugging the solution locally, not all resources need to be deployed to
    Azure. The service projects can run locally while testing and don’t need to be
    deployed. With Azure Cosmos DB, a Docker container or a locally installed emulator
    is available. This is not possible with all resources, for example, Azure Key
    Vault or Azure Application Insights.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本地调试解决方案，不需要将所有资源部署到Azure。服务项目可以在测试时本地运行，无需部署。对于Azure Cosmos DB，有一个Docker容器或本地安装的模拟器可用。并非所有资源都可行，例如Azure
    Key Vault或Azure Application Insights。
- en: 'To deploy these resources automatically, .NET Aspire needs access to your subscription.
    To do this, first, log in to your Azure subscription with the Azure CLI:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要自动部署这些资源，.NET Aspire需要访问您的订阅。为此，首先，使用Azure CLI登录到您的Azure订阅：
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This opens a browser, and you can log in with your Azure subscription.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开浏览器，您可以使用您的Azure订阅登录。
- en: 'In case you have multiple subscriptions, check the Azure CLI is set to the
    current one:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个订阅，请检查Azure CLI是否设置为当前订阅：
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This shows the current active subscription. In case a different one should be
    used, use `az account list` to list all subscriptions, and `az account set –subscription
    <your subscription id>` to set the current subscription to a different one. Remember
    the value that’s listed with `id` – this is the subscription ID that’s needed
    with the next steps.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了当前的活动订阅。如果应该使用不同的订阅，请使用`az account list`列出所有订阅，并使用`az account set –subscription
    <your subscription id>`将当前订阅设置为另一个订阅。记住与`id`一起列出的值——这是在下一步中需要的订阅ID。
- en: Now, we need to connect the project to the subscription and specify some settings.
    It’s best to put this information within user secrets; this shouldn’t be put into
    source code repositories.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将项目连接到订阅并指定一些设置。最好将这些信息放在用户密钥中；这些信息不应该放入源代码存储库中。
- en: 'In case user secrets are not configured yet with the `AppHost`, initialize
    it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户密钥尚未与`AppHost`配置，请初始化它：
- en: '[PRE15]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The configurations we need are the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的配置如下：
- en: '[PRE16]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With `SubscriptionId`, you specify the subscription where resources are created.
    The resource group you specify with the value for `ResourceGroup` is used to create
    all the resources needed. The resource group will be created if you set `AllowResourceGroupCreation`
    to `true`. Otherwise, you need to create the resource group first. With the `Location`
    setting, specify your preferred location. To see the locations available with
    your subscription, use `az account list-locations -``o table`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`SubscriptionId`，您指定创建资源的订阅。您使用`ResourceGroup`的值指定的资源组用于创建所有需要的资源。如果将`AllowResourceGroupCreation`设置为`true`，则将创建资源组。否则，您需要首先创建资源组。使用`Location`设置，指定您首选的位置。要查看您的订阅可用的位置，请使用`az
    account list-locations -``o table`。
- en: Setting the `CredentialSource` setting to `AzureCli` specifies that you are
    using the same account you just used to log in with the Azure CLI to create the
    resources. Without this setting, `DefaultAzureCredential` will be used, which
    tries to use multiple account types with a predefined list until one succeeds.
    This includes Visual Studio, Azure CLI, PowerShell, Azure Developer CLI, and other
    credentials. Here, credentials might be used which don’t have access to the subscription.
    In my experience, it’s better to supply the credentials explicitly.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将`CredentialSource`设置设置为`AzureCli`表示你正在使用与Azure CLI相同的账户来创建资源。如果没有此设置，将使用`DefaultAzureCredential`，它尝试使用预定义列表中的多种账户类型，直到成功。这包括Visual
    Studio、Azure CLI、PowerShell、Azure Developer CLI和其他凭证。在这里，可能使用没有访问订阅的凭证。根据我的经验，最好明确提供凭证。
- en: 'To see all the secrets, use the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有秘密，请使用以下方法：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using Visual Studio, you can connect the project to Azure by using the Solution
    Explorer. Within the AppHost project, select **Connected Services**, open the
    context menu, and select **Azure Resource Provisioning Settings**. This opens
    a dialog to select the subscription, location, and resource group.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio，你可以通过使用解决方案资源管理器将项目连接到Azure。在AppHost项目中，选择**连接的服务**，打开上下文菜单，并选择**Azure资源配置设置**。这将打开一个对话框，用于选择订阅、位置和资源组。
- en: 'Next, let’s add the `Aspire.Hosting.Azure.KeyVault` NuGet package to the AppHost
    project, and update the app model:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将`Aspire.Hosting.Azure.KeyVault` NuGet包添加到AppHost项目中，并更新应用程序模型：
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `AddAzureKeyVault` method creates a key vault named `secrets`. This is referenced
    from the `apiservice` project.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddAzureKeyVault`方法创建了一个名为`secrets`的密钥保管库。这个密钥保管库在`apiservice`项目中被引用。'
- en: When you start the AppHost now, the key vault will be created within Azure.
    Opening the Azure portal at [https://portal.azure.com](https://portal.azure.com),
    you will see the resource group, and within the resource group, the Azure Key
    Vault is created. If you check the user secrets again, an `Azure:Deployments`
    section is added, which contains links to the resources created. This information
    is used to find the resources again, and they don’t need to be published again
    the next time you start the application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在启动AppHost时，密钥保管库将在Azure内部创建。打开[https://portal.azure.com](https://portal.azure.com)的Azure门户，你会看到资源组，在资源组内部创建了Azure
    Key Vault。如果你再次检查用户密钥，将添加一个`Azure:Deployments`部分，其中包含到创建的资源链接。这些信息用于再次找到资源，并且它们在下次启动应用程序时不需要再次发布。
- en: When you are finished with this chapter, just delete the complete resource group
    from the portal, so no additional cost applies.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成本章内容后，只需从门户中删除整个资源组，这样就不会产生额外的费用。
- en: Note
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To publish all the resources including the projects to Azure, you can use the
    Azure Developer CLI. This is covered in [*Chapter 6*](B21217_06.xhtml#_idTextAnchor137).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要将所有资源（包括项目）发布到Azure，你可以使用Azure Developer CLI。这将在[*第六章*](B21217_06.xhtml#_idTextAnchor137)中介绍。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the core features of .NET Aspire, which includes
    tooling, orchestration, and Aspire components. You learned how resources are connected
    by the Aspire app model, and how service discovery is done. You’ve seen how to
    create a manifest describing the app model, which can be used by tools to deploy
    the solution.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了.NET Aspire的核心功能，包括工具、编排和Aspire组件。你学习了资源是如何通过Aspire应用程序模型连接的，以及服务发现是如何进行的。你看到了如何创建一个描述应用程序模型的清单，该清单可以被工具用于部署解决方案。
- en: With the Codebreaker solution, you learned about the rules of the game and the
    parts of the application that are created from the second to the last chapter.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Codebreaker解决方案，你了解了游戏的规则以及从第二章到最后一章创建的应用程序部分。
- en: Now, you know the different Microsoft Azure services that are used by the Codebreaker
    solution when running in Azure. An alternative to these services is offered as
    well to run the complete solution in an on-premises environment (which can also
    be hosted in the Azure cloud this way).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你知道了Codebreaker解决方案在Azure中运行时使用的不同Microsoft Azure服务。还提供了一个替代方案，以便在本地环境中运行完整的解决方案（这样也可以在Azure云中托管）。
- en: From the next chapter on, we’ll start developing the Codebreaker solution. In
    [*Chapter 2*](B21217_02.xhtml#_idTextAnchor031), we will create REST services
    using ASP.NET Core minimal APIs to play games. We’ll test this API using HTTP
    files.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从下一章开始，我们将开始开发Codebreaker解决方案。在[*第二章*](B21217_02.xhtml#_idTextAnchor031)中，我们将使用ASP.NET
    Core最小API创建REST服务来玩游戏。我们将使用HTTP文件测试此API。
- en: Further reading
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics discussed in this chapter, you can refer to
    the following links:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章讨论的主题，您可以参考以下链接：
- en: '**.NET Aspire setup and** **tooling**: [https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/setup-tooling](https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/setup-tooling)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Aspire 安装和** **工具**: [https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/setup-tooling](https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/setup-tooling)'
- en: '**.NET Aspire** **components**: [https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview](https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Aspire** **组件**: [https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview](https://learn.microsoft.com/en-us/dotnet/aspire/fundamentals/components-overview)'
- en: '**.NET Aspire manifest** **format**: [https://learn.microsoft.com/en-us/dotnet/aspire/deployment/manifest-format](https://learn.microsoft.com/en-us/dotnet/aspire/deployment/manifest-format)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Aspire 清单** **格式**: [https://learn.microsoft.com/en-us/dotnet/aspire/deployment/manifest-format](https://learn.microsoft.com/en-us/dotnet/aspire/deployment/manifest-format)'
- en: '**GitHub repository for** **Aspir8**: [https://github.com/prom3theu5/aspirational-manifests](https://github.com/prom3theu5/aspirational-manifests)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Aspir8 的 GitHub 仓库**: [https://github.com/prom3theu5/aspirational-manifests](https://github.com/prom3theu5/aspirational-manifests)'
