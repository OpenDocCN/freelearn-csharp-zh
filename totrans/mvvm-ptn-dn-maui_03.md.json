["```cs\npublic partial class Label : View ...\n{\n    ....\n    public static readonly BindableProperty TextProperty =\n        BindableProperty.Create(nameof(Text),\n            typeof(string), typeof(Label), default(string),\n            propertyChanged: OnTextPropertyChanged);\n    ...\n    public string Text\n    {\n        get { return (string)GetValue(TextProperty); }\n        set { SetValue(TextProperty, value); }\n    }\n    static void OnTextPropertyChanged(\n        BindableObject bindable,\n        object oldvalue, object newvalue)\n    {\n        ...\n    }\n    ...\n}\n```", "```cs\n    namespace Recipes.Client.Core.ViewModels;\n    public class RecipeDetailViewModel\n    {\n        public string Title { get; set; } = \"Classic Caesar Salad\";\n    }\n    ```", "```cs\n    public App()\n    {\n        InitializeComponent();\n        MainPage = new RecipeDetailPage();\n    }\n    ```", "```cs\n    using Recipes.Client.Core.ViewModels;\n    namespace Recipes.Mobile;\n    public partial class RecipeDetailPage : ContentPage\n    {\n        public RecipeDetailPage()\n        {\n            InitializeComponent();\n            BindingContext = new RecipeDetailViewModel();\n        }\n    }\n    ```", "```cs\n    <ScrollView>\n        <VerticalStackLayout Padding=\"10\">\n        </VerticalStackLayout>\n    </ScrollView>\n    ```", "```cs\n    <Label x:Name=\"lblTitle\"\n        FontAttributes=\"Bold\" FontSize=\"22\" />\n    ```", "```cs\n    lblTitle.SetBinding(\n        Label.TextProperty,\n        nameof(RecipeDetailViewModel.Title),\n        BindingMode.OneWay);\n    ```", "```cs\n<Label\n    FontAttributes=\"Bold\"\n    FontSize=\"22\"\n    x:Name property. Of course, if you need a reference to the label for any other reason (for example, you have some animation logic in the code-behind that animates the label), you need to keep the x:Name property.\nBut more importantly, let’s take a look at the `Binding` markup extension that we’ve set to the `Text` property of the label.\nXAML markup extensions\nXAML markup extensions are a feature of XAML that allows you to provide values for properties during the parsing of the XAML markup more dynamically and flexibly. Markup extensions use curly braces (`{}`) to enclose their syntax and enable you to add more complex logic or functionality to the XAML itself.\nMarkup extensions can be used to reference resources, create bindings, or even instantiate objects, among other things. They allow you to extend the capabilities of the XAML language.\nA lot more about markup extensions can be found in the docs: [https://learn.microsoft.com/dotnet/maui/xaml/fundamentals/markup-extensions](https://learn.microsoft.com/dotnet/maui/xaml/fundamentals/markup-extensions).\nThe `Binding` markup extension is used to create a data binding between the `Text` property of the label and the `Title` property of the binding source. The binding source, in this case, is an instance of `RecipeDetailViewModel`, which is set as the `BindingContext` of the control’s parent, `RecipeDetailPage`.\nThe `Path=Title` part of the binding expression specifies that the `Title` property from the binding source should be used as the source of the binding. In this scenario, you can omit `Path=` and simply use `Title`, as the binding expression is smart enough to recognize it as a property path. So, the binding expression can be written as follows:\n\n```", "```cs\npublic class SampleViewModel : INotifyPropertyChanged\n{\n    private string _title = string.Emtpty;\n    public string Title\n    {\n        get => _title;\n        set\n        {\n            if(_title != value)\n            {\n                _title = value;\n                OnPropertyChanged(nameof(Title));\n            }\n        }\n    }\n    public void OnPropertyChanged(string propertyName)\n        => PropertyChanged?.Invoke(this,\n            new PropertyChangedEventArgs(propertyName));\n    public event PropertyChangedEventHandler? PropertyChanged;\n}\n```", "```cs\npublic class SampleViewModel : INotifyPropertyChanged\n{\n    ...\n    public string Title\n    {\n        get => _title;\n        set\n        {\n            if(_title != value)\n            {\n                _title = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n    public void OnPropertyChanged([CallerMemberName]string? propertyName = null)\n        => PropertyChanged?.Invoke(this,\n            new PropertyChangedEventArgs(propertyName));\n...\n}\n```", "```cs\n    public class IngredientsListViewModel : INotifyPropertyChanged\n    {\n        public void OnPropertyChanged([CallerMemberName]string?  propertyName = null)\n            => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        public event PropertyChangedEventHandler? PropertyChanged;}\n    ```", "```cs\n    public class IngredientsListViewModel : INotifyPropertyChanged\n    {\n        private int _numberOfServings = 4;\n        public int NumberOfServings\n        {\n            get => _numberOfServings;\n            set\n            {\n                if(_numberOfServings != value)\n                {\n                    _numberOfServings = value;\n                    OnPropertyChanged();\n                }\n            }\n        }\n    ...\n        //ToDo: add list of Ingredients\n    }\n    ```", "```cs\n    public IngredientsListViewModel\n            IngredientsList { get; set; } = new ();\n    ```", "```cs\n    <HorizontalStackLayout Padding=\"10\">\n        <Label Text=\"Number of servings:\"\n            VerticalOptions=\"Center\" />\n        <Label\n            Margin=\"10,0\" FontAttributes=\"Bold\"\n            Text=\"{Binding IngredientsList.NumberOfServings, Mode=OneWay}\"\n            VerticalOptions=\"Center\" />\n        <Stepper\n            BackgroundColor=\"{OnPlatform WinUI={StaticResource Primary}}\"\n            Maximum=\"8\" Minimum=\"1\"\n            Value=\"{Binding IngredientsList.NumberOfServings, Mode=TwoWay}\" />\n    </HorizontalStackLayout>\n    ```", "```cs\n<HorizontalStackLayout Padding=\"10\" BindingContext=\"{Binding IngredientsList}\">\n    <Label Text=\"Number of servings:\"\n        VerticalOptions=\"Center\" />\n    <Label\n        Margin=\"10,0\" FontAttributes=\"Bold\"\n        Text=\"{Binding NumberOfServings, Mode=OneWay}\"\n        VerticalOptions=\"Center\" />\n    <Stepper\n        BackgroundColor=\"{OnPlatform WinUI={StaticResource Primary}}\"\n        Maximum=\"8\" Minimum=\"1\"\n        Value=\"{Binding NumberOfServings, Mode=TwoWay}\"/>\n</HorizontalStackLayout>\n```", "```cs\n    public class RecipeDetailViewModel : INotifyPropertyChanged\n    {\n        ...\n        public event PropertyChangedEventHandler? PropertyChanged;\n    }\n    ```", "```cs\n    public void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n                => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    ```", "```cs\n    private bool _showAllergenInformation;\n    public bool ShowAllergenInformation\n    {\n        get => _showAllergenInformation;\n        set\n        {\n            if (_showAllergenInformation!= value)\n            {\n                _showAllergenInformation = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n    ```", "```cs\n    <VerticalStackLayout Padding=\"10\">\n        <HorizontalStackLayout>\n            <Label\n                FontAttributes=\"Italic\"\n                Text=\"Show Allergen information\"\n                VerticalOptions=\"Center\" />\n            <CheckBox IsChecked=\"{Binding ShowAllergenInformation, Mode=OneWayToSource}\" />\n        </HorizontalStackLayout>\n        <Label IsVisible=\"{Binding ShowAllergenInformation, Mode=OneWay}\"\n            Text=\"ToDo: add allergen information\" />\n    </VerticalStackLayout>\n    \"Show Allergen Information\", followed by a checkbox that the user can toggle if they want to view the recipe’s allergen information. The IsChecked property is bound using the OneWayToSource mode to the ShowAllergenInformation property in the ViewModel. This means that when the user checks the box, the property will update accordingly.\n    ```", "```cs\n<VerticalStackLayout>\n    <Button Command=\"{Binding AddAsFavoriteCommand}\" Text=\"Add as favorite\" />\n    <Button Command=\"{Binding RemoveAsFavoriteCommand}\" Text=\"Remove as favorite\" />\n</VerticalStackLayout>\n```", "```cs\n    private bool _isFavorite = false;\n    public bool IsFavorite\n    {\n        get => _isFavorite;\n        private set\n        {\n            if (_isFavorite != value)\n            {\n                _isFavorite = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n    ```", "```cs\n    public ICommand AddAsFavoriteCommand\n    {\n        get;\n    }\n    public ICommand RemoveAsFavoriteCommand\n    {\n        get;\n    }\n    ```", "```cs\n    <PropertyGroup>\n      <TargetFramework>net8.0</TargetFramework>\n      <ImplicitUsings>enable</ImplicitUsings>\n      <UseMaui>true</UseMaui>\n      <Nullable>enable</Nullable>\n    </PropertyGroup>\n    ```", "```cs\n    private void AddAsFavorite() => IsFavorite = true;\n    private void RemoveAsFavorite() => IsFavorite = false;\n    private bool CanAddAsFavorite()\n        => !IsFavorite;\n    private bool CanRemoveAsFavorite()\n        => IsFavorite;\n    public RecipeDetailViewModel()\n    {\n        AddAsFavoriteCommand =\n            new Command(AddAsFavorite, CanAddAsFavorite);\n        RemoveAsFavoriteCommand =\n            new Command(RemoveAsFavorite, CanRemoveAsFavorite);\n    }\n    ```", "```cs\n    if (_isFavorite != value)\n    {\n        _isFavorite = value;\n        OnPropertyChanged();\n        ((Command)AddAsFavoriteCommand).ChangeCanExecute();\n        ((Command)RemoveAsFavoriteCommand).ChangeCanExecute();\n    }\n    ```", "```cs\n    public RecipeDetailViewModel()\n    {\n        ...\n        SetFavoriteCommand =\n            new Command<bool>(SetFavorite, CanSetFavorite);\n    }\n    private bool CanSetFavorite(bool isFavorite)\n        => IsFavorite != isFavorite;\n    private void SetFavorite(bool isFavorite)\n        => IsFavorite = isFavorite;\n    ```", "```cs\n    <Button\n        Command=\"{Binding SetFavoriteCommand}\"\n        CommandParameter=\"{x:Boolean true}\"\n        Text=\"Add as favorite\" />\n    <Button\n        Command=\"{Binding SetFavoriteCommand}\"\n        CommandParameter=\"{x:Boolean false}\"\n        Text=\"Remove as favorite\" />\n    ```", "```cs\n    <Image\n        Margin=\"5\" HeightRequest=\"35\"\n        IsVisible=\"{Binding IsFavorite}\"\n        Source=\"favorite.png\" WidthRequest=\"35\" />\n    ```", "```cs\n\n```"]