["```cs\n    public interface IContentWriter \n    { \n      Task<bool> Write(string content); \n    } \n\n```", "```cs\n    public abstract class BaseContentWriter : IContentWriter \n    { \n      private ConcurrentQueue<string> queue =  \n      new ConcurrentQueue<string>(); \n      private Object _lock = new Object(); \n\n      public BaseContentWriter() { } \n      //---- Write to Media \n      public abstract bool WriteToMedia(string logcontent); \n\n      async Task  Flush() \n      { \n        string content; \n        int count = 0; \n        while (queue.TryDequeue(out content) && count <= 10) \n        { \n          //--- Write to Appropriate Media \n          //--- Calls the Overriden method \n          WriteToMedia(content); \n          count++; \n        } \n      }  \n\n```", "```cs\n    public async Task<bool> Write(string content) \n    { \n      queue.Enqueue(content); \n      if (queue.Count <= 10) \n      return true; \n      lock (_lock){ \n        Task temp = Task.Run(() => Flush()); \n        Task.WaitAll(new Task[] { temp }); \n      } \n      return true; \n    } \n  } \n\n```", "```cs\n    public abstract bool WriteToMedia(string logcontent); \n\n```", "```cs\n    public class FileContentWriter : BaseContentWriter \n    { \n      private string _file_name; \n      public FileContentWriter(string name){ \n        _file_name =  name; \n      } \n      public override bool WriteToMedia( string content) \n      { \n        using (FileStream SourceStream =  \n        File.Open(_file_name, FileMode.Append )) \n        { \n          byte[] buffer =  \n          Encoding.UTF8.GetBytes(content+\"\\r\\n\"); \n          SourceStream.Write (buffer, 0, buffer.Length); \n        } \n        return true; \n      } \n    } \n\n```", "```cs\n    public class SQLAccess \n    { \n      private SQLiteConnection _con = null; \n      private SQLiteCommand _cmd = null; \n      private SQLiteTransaction _cts = null; \n      private string _constr; \n      public SQLAccess(string constr) \n      { \n        _constr = constr; \n      } \n\n```", "```cs\n    public bool Open(bool trans = false) \n    { \n      try \n      { \n        _con = new SQLiteConnection(_constr); \n        _con.Open(); \n        if (trans) \n        _cts = _con.BeginTransaction(); \n        return true; \n      } \n      catch( SQLiteException e) \n      { \n        return false; \n      } \n    } \n\n```", "```cs\n    public bool ExecuteNonQuery(string SQL) \n    { \n      try \n      { \n        _cmd = new SQLiteCommand(SQL, _con); \n        _cmd.ExecuteNonQuery(); \n        _con.Close(); \n        _con = null; \n        return true; \n      } \n      catch (Exception e) \n      { \n        _con = null; \n        return false; \n      } \n    } \n\n```", "```cs\n    public Boolean Close() \n    { \n      if (_con != null) \n      { \n        if (_cts != null) \n        { \n          _cts.Commit(); \n          _cts = null; \n        } \n        _con.Close(); \n        _con = null; \n        return true; \n      } \n      return false; \n    } \n\n```", "```cs\n    public class DbContentWriter : BaseContentWriter \n    { \n      private string _con_str =  \n      @\"Data Source=./Logstorage.db\"; \n      public DbContentWriter(){ } \n      public override bool WriteToMedia(string logcontent)  \n      { \n        SQLAccess access = new SQLAccess(_con_str); \n        if (access.Open()) \n        { \n          string query = \"INSERT INTO logs VALUES('\" + \n          logcontent + \"');\"; \n          bool result =  access.ExecuteNonQuery(query); \n          access.Close(); \n          return result; \n        } \n        return false;  \n      } \n    } \n\n```", "```cs\n    public class NetworkContentWriter : BaseContentWriter \n    { \n      private static string domain = \"127.0.0.1\"; \n      private static int port = 4500; \n      public NetworkContentWriter(){} \n      public override bool WriteToMedia(string content) \n      { \n        TcpClient _client = new TcpClient(); \n        if (_client == null){ return false; } \n\n        try{ \n          _client.Connect(domain, port); \n        } \n        catch (Exception) { return false; } \n\n        StreamWriter _sWriter =  \n        new StreamWriter(_client.GetStream(), Encoding.ASCII); \n        _sWriter.WriteLine(content); \n        _sWriter.Flush(); \n        _sWriter.Close(); \n        _client.Close(); \n        return true; \n      } \n    } \n\n```", "```cs\n    public abstract class LogStrategy \n    { \n      // DoLog is our Template method \n      // Concrete classes will override this  \n      protected abstract bool DoLog(String logitem); \n      public bool Log(String app, String key, String cause) \n      { \n        return DoLog(app + \" \" + key + \" \" + cause); \n      } \n    } \n\n```", "```cs\n    public class NullLogStrategy : LogStrategy \n    { \n      protected override bool DoLog(String logitem) \n      { \n        // Log into the Console \n        Console.WriteLine(logitem+\"\\r\\n\"); \n        return true; \n      } \n    } \n\n```", "```cs\n    public class DbLogStrategy : LogStrategy \n    { \n      BaseContentWriter wt = new DbContentWriter(); \n      protected override bool DoLog(String logitem) \n      { \n        return wt.Write(logitem); \n      } \n    } \n\n    public class FileLogStrategy : LogStrategy \n    { \n      BaseContentWriter wt = new FileContentWriter(@\"log.txt\"); \n      protected override bool DoLog(String logitem) \n      { \n        // Log into the file \n        wt.Write(logitem); \n        return true; \n      } \n    } \n\n    public class NetLogStrategy : LogStrategy \n    { \n      BaseContentWriter nc = new NetworkContentWriter(); \n      protected override bool DoLog(String logitem) \n      { \n        // Log into the Network Socket \n        nc.Write(logitem); \n        return true; \n      } \n    } \n\n```", "```cs\n    public static LogStrategy CreateLogger(string loggertype) \n    { \n      if (loggertype == \"DB\") \n        return new DbLogStrategy(); \n      else if (loggertype == \"FILE\") \n        return new FileLogStrategy(); \n      else if (loggertype == \"NET\") \n        return new NetLogStrategy(); \n      else \n        return new NullLogStrategy(); \n    } \n\n```", "```cs\n    string loggertype=read_from_config(\"loggertype\"); \n    LogStrategy lf = LoggerFactory.CreateLogger(loggertype); \n    //-- somewhere out in the module \n    lf.Log(\"APP\",\"KEY\",\"CAUSE\"); \n\n```", "```cs\n    <?xml version=\"1.0\"?> \n    <entries> \n      <entry key =\"DB\" value=\"LogLibrary.DbLogStrategy\"/> \n      <entry key=\"NET\" value=\"LogLibrary.NetLogStrategy\"/> \n      <entry key=\"FILE\" value=\"LogLibrary.FileLogStrategy\"/> \n      <entry key=\"NULL\" value =\"LogLibrary.NullLogStrategy\"/> \n    </entries> \n\n```", "```cs\n\n    public static T DeepClone<T>(this T a) { \n      using (MemoryStream stream = new MemoryStream()) { \n        BinaryFormatter formatter = new BinaryFormatter(); \n        formatter.Serialize(stream, a); \n        stream.Position = 0; \n        return (T)formatter.Deserialize(stream); \n      } \n    }\n```", "```cs\n    public class ObjectFactory \n    { \n      //----- The Dictionary which maps XML configuration \n      //----- Keys (key) to TypeName (value) \n      private Dictionary<string, string> entries = \n      new Dictionary<string, string>(); \n      //----- The Dictionary which maps Entry Keys to Objects \n      //----- already instantiated by the Container \n      private Dictionary<string, Object> objects = \n      new Dictionary<string, Object>(); \n\n      private Dictionary<string, string> LoadData(string str) \n      { \n        //---- We use LINQ lambda syntax to load the contents of the  \n        //---- XML file. \n        return XDocument.Load(str).Descendants(\"entries\"). \n        Descendants(\"entry\").ToDictionary(p =>        \n        p.Attribute(\"key\").Value, \n        p => p.Attribute(\"value\").Value); \n      } \n\n      public ObjectFactory(String str) \n      { \n        entries = LoadData(str); \n      } \n\n      public Object Get(string key, string mode = \"singleton\") \n      { \n        //------------ singleton will return the same object \n        //------------ every time. \n        //------------ prototype will create a clone of the  \n        //------------ object if already instantiated before \n        //------------ Singleton and Protype are the permissible \n        //------------ Parameters \n        if (mode != \"singleton\" && mode != \"prototype\") \n          return null; \n        Object temp = null; \n        if (objects.TryGetValue(key, out temp)) \n          return (mode == \"singleton\") ? temp : \n        temp.DeepClone<Object>(); \n        //------ if we could not retrieve an instance of previously  \n        //------ created object, retrieve the typename from entries \n        //------ map \n\n        string classname = null; \n        entries.TryGetValue(key, out classname); \n        if (classname == null) \n          return null; \n        string fullpackage = classname; \n        //---- use .NET Reflection API to retrieve the CLR type \n        //---- of the class name \n\n        Type t = Type.GetType(fullpackage); \n        if (t == null) \n          return null; \n        //------- Instantiate the object using .NET Reflection API \n        objects[key] = (Object)Activator.CreateInstance(t); \n        return objects[key]; \n      } \n    }\n  } \n\n```", "```cs\n    public class LoggerFactory \n    { \n      private static ObjectFactory of =  \n      new ObjectFactory(\"LogStrategy.xml\"); \n      public static LogStrategy CreateLogger(string loggertype) \n      { \n        LogStrategy sf = (LogStrategy)of.Get(loggertype); \n        return (sf != null)?sf: new NullLogStrategy(); \n      } \n    } \n\n```", "```cs\n    class LogSocketServer \n    { \n      private TcpListener _server; \n      private Boolean _running; \n      private int port = 4500; \n\n      public LogSocketServer() \n      { \n        _server = new TcpListener(IPAddress.Any, port); \n        _server.Start(); \n        _running = true; \n        AcceptClients(); \n      } \n\n      public void AcceptClients() \n      { \n        while (_running) \n        { \n          TcpClient newClient = _server.AcceptTcpClient(); \n          Thread t = new Thread( \n          new ParameterizedThreadStart( \n          HandleClientData)); \n          t.Start(newClient); \n        } \n      } \n\n      public void HandleClientData(object obj) \n      { \n        TcpClient client = obj as TcpClient; \n        StreamReader sReader = new \n        StreamReader(client.GetStream(), \n        Encoding.ASCII); \n        bool bRead = true; \n        while (bRead == true) \n        { \n          String sData = sReader.ReadLine(); \n          if (sData == null || sData.Length == 0) \n          bRead = false; \n          Console.WriteLine(sData); \n        } \n      }   \n    } \n\n```", "```cs\n    class Program \n    { \n      private static bool Table(LogStrategy ls) \n      { \n        int a = 10; \n        int b = 1; \n        while (b < 100) \n        { \n          ls.Log(\"Table\", a.ToString() + \" * \" + \n          b.ToString(), \"=\" +(a * b).ToString()); \n          b++; \n        } \n        return true; \n      } \n      static void Main(string[] args) \n      { \n        if (args.Length != 1) \n        { \n          return;  \n        }  \n        string loggertype=args[0]; \n        LogStrategy lf = LoggerFactory.CreateLogger(loggertype); \n        Table(lf); \n      } \n    } \n\n```"]