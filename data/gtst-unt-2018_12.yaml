- en: Adding Audio and Visual Effects to Our Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的游戏添加音频和视觉效果
- en: In [Chapter 11](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml), *Scripting Victory
    and Defeat*, we designed and scripted our game's victory and defeat conditions.
    We updated our game's scripts to manage the Cucumber Man's health, including updating
    the HUD's health bar. We implemented our victory and end-of-game logic through
    scripting. We also implemented the lives remaining and enabled dynamic on-screen
    indicators of those lives. Lastly, we scripted the random respawning of our player
    character.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml)“脚本化胜利与失败”中，我们设计和脚本化了游戏的胜利和失败条件。我们更新了游戏脚本以管理黄瓜人的健康，包括更新HUD的健康条。我们通过脚本实现了胜利和游戏结束的逻辑。我们还实现了剩余生命数，并启用了动态的屏幕指示器。最后，我们脚本化了玩家角色的随机重生。
- en: In this chapter, we will plan and implement audio and visual effects to help
    enhance overall gameplay. Specifically, we will add audio to key events in our
    combat system and add several special effects using Unity's Particle System to
    enhance the game's visual appeal.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将计划和实现音频和视觉效果，以增强整体游戏体验。具体来说，我们将为我们的战斗系统中的关键事件添加音频，并使用Unity的粒子系统添加几个特殊效果，以增强游戏的外观。
- en: 'Specifically, we will cover the following in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将涵盖以下内容：
- en: An overview of Unity's audio system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity音频系统的概述
- en: Planning our game's audio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划我们游戏的音频
- en: Implementing our game's audio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现我们游戏的音频
- en: An introduction to Unity's lights and shadows
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity的灯光和阴影简介
- en: An overview of Unity's special effects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity特殊效果的概述
- en: Adding visual effects to our game
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的游戏添加视觉效果
- en: Discovering Unity's audio system
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Unity的音频系统
- en: Unity has an impressive array of audio capabilities. It supports 3D spatial
    sound, which provides a surround-sound effect. This gives our audio source a point
    and dimension. There are also extensive mixing and mastering capabilities in Unity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Unity拥有令人印象深刻的音频功能。它支持3D空间音效，提供环绕声效果。这为我们的音频源提供了一个点和维度。Unity还提供了广泛的混音和母带制作功能。
- en: In this section, we will explore the basics of audio in Unity and take a look
    at the Audio Mixer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨Unity中音频的基础知识，并查看音频混音器。
- en: Unity audio basics
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity音频基础
- en: Unity supports several audio effects, including the Duck Volume Audio Effect,
    which allows us to manipulate an audio signal's volume.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Unity支持多种音频效果，包括Duck Volume Audio Effect，它允许我们操纵音频信号的音量。
- en: The term `duck` refers to making the audio signal quieter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“duck”指的是使音频信号变弱。
- en: 'We can use a variety of audio formats in Unity. You can see the four formats
    listed here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Unity中使用各种音频格式。您可以看到这里列出的四种格式：
- en: '**Audio Interchange File Format** (**AIFF**)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音频交换文件格式**（**AIFF**）'
- en: MP3
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MP3
- en: '**Ogg Vorbis** (**OGG**)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ogg Vorbis**（**OGG**）'
- en: WAV
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WAV
- en: If you have audio assets that are in a file format different from these four,
    you can probably use a free audio conversion tool to change the file format.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的音频资产使用的是这四种文件格式之外的格式，您可能可以使用免费的音频转换工具来更改文件格式。
- en: When we import an audio file into a Unity game, the file becomes an audio clip.
    Audio clips can also be created from within Unity by using your computer's microphone.
    You can even create audio clips via scripts during your game.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将音频文件导入Unity游戏时，该文件成为音频剪辑。您还可以通过使用计算机的麦克风在Unity内部创建音频剪辑。您甚至可以在游戏过程中通过脚本创建音频剪辑。
- en: In Unity, audio sources are attached to objects. These audio sources emit, or
    play, sound and audio listener components do receive the sound emitted by audio
    sources. You can think of audio listeners as the player's ears inside the game
    world, hearing what's near them. Usually, one audio listener component is attached
    to the main camera so that the sounds it picks up on align well with what is displayed
    in the game view. Listeners are also attached to objects. Let's look at an example
    to see how a GameObject, an audio source, and listeners are related.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，音频源附加到对象上。这些音频源发出或播放声音，而音频监听器组件则接收音频源发出的声音。你可以将音频监听器视为游戏世界中的玩家耳朵，听到他们附近的声音。通常，一个音频监听器组件会附加到主相机上，以便它拾取的声音与游戏视图中的显示相匹配。监听器也会附加到对象上。让我们通过一个例子来看看GameObject、音频源和监听器之间的关系。
- en: Let's say we are creating a zoo simulation and are working on the bovine section.
    There is a holding area for cows. Cows are generally quiet, but might be noisy
    eaters. The cow would be our GameObject and it would emit a *chewing* audio clip.
    The audio clip's RAW file (that is, `chewing.aiff`) would be identified as an
    audio source component attached to the cow GameObject. Now, let's say there is
    a farmer character. We can attach a listener to the farmer, which is also an object.
    That listener is a script that performs certain actions if it hears the sound
    from the cow. Perhaps, if the listener picks up the *chewing* sound, they will
    know that more hay is needed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在创建一个动物园模拟，并正在处理牛的区域。有一个牛的饲养区。牛通常很安静，但可能会在吃东西时很吵。牛将是我们的GameObject，它将发出“咀嚼”音频剪辑。音频剪辑的RAW文件（即`chewing.aiff`）将被识别为附加到牛GameObject上的音频源组件。现在，假设有一个农民角色。我们可以将监听器附加到农民身上，它也是一个对象。这个监听器是一个脚本，如果它听到牛的声音，就会执行某些操作。也许，如果监听器捕捉到“咀嚼”声音，他们就会知道需要更多的干草。
- en: 'The following diagram illustrates the relationships between the various components:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图解展示了各个组件之间的关系：
- en: '![](img/6475a6ed-0b1d-4cea-a6e9-e146cece8d05.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6475a6ed-0b1d-4cea-a6e9-e146cece8d05.png)'
- en: You will learn how to use these components later in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章的后面学习如何使用这些组件。
- en: Unity's Audio Mixer
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity的音频混音器
- en: Unity's Audio Mixer gives you the ability to mix and master audio sources and
    effects. To access the Audio Mixer, you select Window from the pull-down menu,
    and then select Audio Mixer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的音频混音器为你提供了混合和主控音频源和效果的能力。要访问音频混音器，你从下拉菜单中选择“窗口”，然后选择“音频混音器”。
- en: 'When you first open the Audio Mixer window, you will see that there are no
    mixers in your project. As you can see in the following screenshot, there is a
    + icon on the far-right side of that window:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次打开音频混音器窗口时，你会看到你的项目中没有任何混音器。正如你在下面的截图中所见，窗口的右侧有一个加号图标：
- en: '![](img/b1731d2b-d6fe-4bd3-a0bb-a2006bedef64.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b1731d2b-d6fe-4bd3-a0bb-a2006bedef64.png)'
- en: Clicking that icon enables you to create a mixer.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 点击该图标可以让你创建一个混音器。
- en: 'When you have a mixer in your project, the Audio Mixer window reveals four
    sections on the left. As shown in the following screenshot, these are Mixers,
    Snapshots, Groups, and Views. All the mixers in your project will be listed here.
    The Snapshots are a collection of parameters that you can use in your mixer. An
    Audio Mixer Group can be used to modify audio source sounds prior to them reaching
    the listeners. The final section is Views. A View is just a saved state of the
    mixer groups:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在项目中有一个混音器时，音频混音器窗口在左侧显示了四个部分。如图所示，这些是混音器、快照、组和视图。你项目中的所有混音器都将列在这里。快照是一组你可以用于混音器的参数。音频混音器组可以用来在声音到达听众之前修改音频源声音。最后一部分是视图。视图只是混音器组的保存状态：
- en: '![](img/8906b466-1d78-4f4f-a0ff-8f5aede6ad93.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8906b466-1d78-4f4f-a0ff-8f5aede6ad93.png)'
- en: 'To the right of the Audio Mixer window, you see a single mixer in our project.
    When you click the Add button, you will see a popup, shown here, that reveals
    several options:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在音频混音器窗口的右侧，你看到我们项目中的一个混音器。当你点击添加按钮时，你会看到一个弹出窗口，如图所示，它显示了几个选项：
- en: '![](img/f84d98ad-13cf-4029-af9f-df0ea96abfa2.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f84d98ad-13cf-4029-af9f-df0ea96abfa2.png)'
- en: We will not use these options in our game, but they are worth exploring if you
    intend to implement advanced audio effects in your game.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏中不会使用这些选项，但如果你想在游戏中实现高级音频效果，它们值得探索。
- en: Planning our game's audio
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划我们游戏的音频
- en: Planning a game's audio is an important part of game design. Just because we
    can do something with regards to audio, does not mean we should. Too much audio
    can be as off-putting as not enough.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 规划游戏的音频是游戏设计的重要部分。仅仅因为我们可以在音频方面做些什么，并不意味着我们应该这样做。过多的音频可能和不足的音频一样令人反感。
- en: 'The audio selected for the Cucumber Man game is intended to provide sufficient
    demonstration of how to import, configure, and script a game for various audio
    effects. To that end, the following audio will be implemented in our Cucumber
    Man game:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为黄瓜人游戏选择的音频旨在充分展示如何导入、配置和编写脚本以实现各种音频效果。为此，以下音频将在我们的黄瓜人游戏中实现：
- en: 'Animations that require sounds:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要声音的动画：
- en: Cucumber Man
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜人
- en: Jump
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃
- en: Throw
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投掷
- en: Die
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 死亡
- en: Respawn
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重生
- en: Cucumber Beetles
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜甲虫
- en: Eat
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吃
- en: Standing Run
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立跑步
- en: Die
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 死亡
- en: 'Events that require sounds:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要声音的事件：
- en: Player Defeat
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家失败
- en: Player Victory
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家胜利
- en: We will perform the implementation in the next section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节进行实现。
- en: Implementing our game's audio
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现我们游戏的音频
- en: In this section, we will implement the audio requirements listed in the previous
    section. We will import, configure, and script our game to complete the implementation. Before
    we get started, you should open your Unity game project. Alternatively, you can
    download the Starting-Chapter-12 Unity project available from the publisher's
    companion site.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现上一节中列出的音频要求。我们将导入、配置和编写脚本以完成实现。在开始之前，你应该打开你的Unity游戏项目。或者，你可以从出版商的配套网站上下载Starting-Chapter-12
    Unity项目。
- en: 'We will implement our game''s audio in three steps, each handled in subsequent
    sections:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分三个步骤实现我们游戏中的音频，每个步骤将在后续章节中处理：
- en: Importing audio assets
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入音频资产
- en: Implementing Cucumber Beetle audio
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现黄瓜甲虫音频
- en: Implementing Cucumber Man audio
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现黄瓜人音频
- en: Importing audio assets
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入音频资产
- en: 'Our first task is to import the audio assets into our game project. Here are
    the steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一项任务是导入音频资产到我们的游戏项目中。以下是步骤：
- en: Open the game project.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开游戏项目。
- en: In the Project panel, right-click Assets and select Create | Folder.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，右键点击Assets并选择创建 | 文件夹。
- en: Name the new folder `Audio`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Audio`。
- en: Right-click the `Audio` folder and select Import Package | Custom Package.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Audio`文件夹，选择导入包 | 自定义包。
- en: 'Navigate to the `cucumber_man_audio.unitypackage` file available from the publisher''s
    site for this book. You should see the following screenshot pop up in your Unity
    interface:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到本书出版商网站上提供的`cucumber_man_audio.unitypackage`文件。你应该会在你的Unity界面中看到以下截图弹出：
- en: '![](img/57ea928c-cf96-45c3-81f5-9748565bd9cb.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57ea928c-cf96-45c3-81f5-9748565bd9cb.png)'
- en: In the Import Unity Package dialog window, ensure all audio files are selected
    and click the Import button.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入Unity包对话框窗口中，确保所有音频文件都被选中，然后点击导入按钮。
- en: In the Project panel, select the first audio file. Then, in the Inspector panel,
    use the interface to play the audio clip.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择第一个音频文件。然后，在检查器面板中，使用界面播放音频剪辑。
- en: Repeat step 7 for each of the nine audio clips. This will familiarize you with
    each sound and ensure they can play on your computer.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个九个音频剪辑重复步骤7。这将使你熟悉每个声音并确保它们可以在你的电脑上播放。
- en: 'Now that we have our audio assets in our game project, let''s review how each
    of them will be used. The following table maps each audio file to the appropriate
    in-game animation or event:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将音频资产添加到我们的游戏项目中，让我们回顾一下每个资产将如何被使用。以下表格将每个音频文件映射到相应的游戏内动画或事件：
- en: '| **In-Game animation/Event** | **Related GameObject** | **Audio asset** |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **游戏内动画/事件** | **相关游戏对象** | **音频资产** |'
- en: '| Jump animation | Cucumber Man | `jump.wav` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 跳跃动画 | 黄瓜人 | `jump.wav` |'
- en: '| Throw animation | Cucumber Man | `throw.wav` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 投掷动画 | 黄瓜人 | `throw.wav` |'
- en: '| Die animation | Cucumber Man | `cm_die.wav` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 死亡动画 | 黄瓜人 | `cm_die.wav` |'
- en: '| Respawn event | Cucumber Man | `respawn.wav` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 重生事件 | 黄瓜人 | `respawn.wav` |'
- en: '| Eat animation | Cucumber Beetle | `eating.wav` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 吃动画 | 黄瓜甲虫 | `eating.wav` |'
- en: '| Standing Run animation | Cucumber Beetle | `attack.wav` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 站立奔跑动画 | 黄瓜甲虫 | `attack.wav` |'
- en: '| Die on Ground animation | Cucumber Beetle | `beetle_die.wav` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 地上死亡动画 | 黄瓜甲虫 | `beetle_die.wav` |'
- en: '| Die Standing animation | Cucumber Beetle | `beetle_die.wav` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 站立死亡动画 | 黄瓜甲虫 | `beetle_die.wav` |'
- en: '| Player Defeat event | Cucumber Man | `game_over.wav` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 玩家失败事件 | 黄瓜人 | `game_over.wav` |'
- en: '| Player Victory event | Cucumber Man | `victory.wav` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 玩家胜利事件 | 黄瓜人 | `victory.wav` |'
- en: Implementing the Cucumber Beetle audio
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现黄瓜甲虫音频
- en: 'In this section, we will configure the Cucumber Beetle prefab so that it supports
    audio when the Cucumber Beetles eat, when they run while standing, and when they
    die. Here are the steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置黄瓜甲虫预制体，使其在黄瓜甲虫吃东西、站立时奔跑和死亡时支持音频。以下是步骤：
- en: Select the beetle prefab in the Project panel's `Assets` | `Prefabs` folder.
    If you have more than one prefab, be sure to use the one that is used in your
    game.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板的`Assets` | `Prefabs`文件夹中选择甲虫预制体。如果你有多个预制体，请确保使用你在游戏中使用的那个。
- en: In the Inspector panel, scroll to the bottom and click the Add Component button.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，滚动到最底部并点击添加组件按钮。
- en: Select Audio | Audio Source.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择音频 | 音频源。
- en: Uncheck the Play On Awake box.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选“唤醒时播放”框。
- en: Normally, we would assign an `AudioClip` to our Audio Source component. Since
    our Cucumber Beetles will have more than one audio clip, we will not assign one
    here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会将`AudioClip`分配给我们的音频源组件。由于我们的黄瓜甲虫将拥有多个音频剪辑，所以我们在这里不会分配一个。
- en: 'Our next step is to edit the `BeetleNPC` script. Open that script file and
    make the following modifications:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是编辑`BeetleNPC`脚本。打开该脚本文件并做出以下修改：
- en: 'Add the following member variables:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下成员变量：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following statement to the `Start()` method:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下语句添加到`Start()`方法中：
- en: '[PRE1]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Edit the `OnTriggerEnter()` method as shown here. You will see two `audioSource.PlayOneShot()`
    statements, one each for the `eating` and `attack` audio clips:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示编辑`OnTriggerEnter()`方法。您将看到两个`audioSource.PlayOneShot()`语句，每个语句对应一个`eating`和`attack`音频片段：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Edit the `DestroySelfOnGround()` method, shown as follows. Here you can see
    that we added the `audioSource.PlayOneShot(die)` statement:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示编辑`DestroySelfOnGround()`方法。在这里，您可以看到我们添加了`audioSource.PlayOneShot(die)`语句：
- en: '[PRE3]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Edit the `DestroySelfStanding()` method as shown in the following code block.
    Here, you can see we added the `audioSource.PlayOneShot(die)` statement:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码块所示编辑`DestroySelfStanding()`方法。在这里，您可以看到我们添加了`audioSource.PlayOneShot(die)`语句：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that the scripting task is complete, we need to assign the designated audio
    clips to the variables we created:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在脚本任务完成后，我们需要将指定的音频片段分配给创建的变量：
- en: In the Inspector panel, scroll until you see the Beetle NPC (Script) component.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，滚动直到您看到Beetle NPC (Script)组件。
- en: Drag the `eating` audio clip from the Project panel's `Assets` | `Audio` folder
    to the appropriate spot in the Beetle NPC (Script) component.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`eating`音频片段从项目面板的`Assets` | `Audio`文件夹拖到Beetle NPC (Script)组件的适当位置。
- en: 'Repeat step 11 for the `attack` and `beetle_die` audio clips. Your Beetle NPC
    (Script) component should look like the following:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`attack`和`beetle_die`音频片段重复步骤11。您的Beetle NPC (Script)组件应如下所示：
- en: '![](img/dec5e8a0-a8ea-4e36-b977-9ec8c7241f8c.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dec5e8a0-a8ea-4e36-b977-9ec8c7241f8c.png)'
- en: All that's left is for you to test this new functionality by playing the game.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是您通过玩游戏来测试这个新功能。
- en: Implementing the Cucumber Man audio
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Cucumber Man音频
- en: 'In this section, we will configure the Cucumber Man prefab so that it supports
    audio when the Cucumber Beetles eat, when they run while standing, and when they
    die. Here are the steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置Cucumber Man预制件，以便它在Cucumber Beetles进食、站立时奔跑以及死亡时支持音频。以下是步骤：
- en: Select the Cucumber Man in the Hierarchy panel.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中选择Cucumber Man。
- en: In the Inspector panel, scroll to the bottom and click the Add Component button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，滚动到最底部并点击添加组件按钮。
- en: Select Audio | Audio Source.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择音频 | 音频源。
- en: Uncheck the Play On Awake box.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选“在启动时播放”框。
- en: Normally, we would assign an `AudioClip` to our Audio Source component. Since
    our Cucumber Man will have more than one audio clip, we will not assign one here.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会将`AudioClip`分配给我们的音频源组件。由于我们的Cucumber Man将拥有多个音频片段，所以我们在这里不会分配一个。
- en: 'Our next step is to edit the `BeetleNPC` script. Open that script file and
    make the following modifications:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是编辑`BeetleNPC`脚本。打开该脚本文件并做出以下修改：
- en: 'Add the following member variables:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下成员变量：
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a `Start()` method, shown as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个如下所示的`Start()`方法：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Edit the `Update()` method, as shown here, so that it includes the three `audioSource.PlayOneShot()`
    statements:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`Update()`方法，如图所示，使其包含三个`audioSource.PlayOneShot()`语句：
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit the `ReSpawnCucumberMan()` method as shown here. You can see that we added
    the `audioSource.PlayOneShot()` statement:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示编辑`ReSpawnCucumberMan()`方法。您可以看到我们添加了`audioSource.PlayOneShot()`语句：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that our script changes for the `CucumberManManager` script file are complete,
    we need to assign the designated audio clips to the variables we created. Here
    are the steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对`CucumberManManager`脚本文件的脚本更改完成后，我们需要将指定的音频片段分配给创建的变量。以下是步骤：
- en: In the Inspector panel, scroll until you see the Cucumber Man Manager (Script)
    component.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，滚动直到您看到Cucumber Man Manager (Script)组件。
- en: Drag the `cm_die` audio clip from the Project panel's `Assets` | `Audio` folder
    to the appropriate spot in the Cucumber Man Manager (Script) component.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`cm_die`音频片段从项目面板的`Assets` | `Audio`文件夹拖到Cucumber Man Manager (Script)组件的适当位置。
- en: 'Repeat step 10 for the `respawn` and `game_over` audio clips. Your Cucumber
    Man Manager (Script) component should look like this:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`respawn`和`game_over`音频片段重复步骤10。您的Cucumber Man Manager (Script)组件应如下所示：
- en: '![](img/c0bcf2c8-12ed-4cd1-8075-33ccdc560616.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0bcf2c8-12ed-4cd1-8075-33ccdc560616.png)'
- en: 'So far, we have taking care of the dying, respawning, and game over audio clips.
    Next, we will handle the jumping and throwing audio clips:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经处理了死亡、重生和游戏结束的音频片段。接下来，我们将处理跳跃和投掷的音频片段：
- en: Open the `PlayerController` script for editing.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`PlayerController`脚本进行编辑。
- en: 'Add the following member variables:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下成员变量：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following statement to the `Start()` method:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下语句添加到`Start()`方法中：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following statement to the beginning of the `Jump()` method:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下语句添加到`Jump()`方法的开始处：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following statement to the beginning of the `Throw()` method:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下语句添加到`Throw()`方法的开始处：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that our script changes for the `PlayerController` script file are complete,
    we need to assign the designated audio clips to the variables we created. Here
    are the steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对`PlayerController`脚本文件的修改已完成，我们需要将指定的音频剪辑分配到我们创建的变量中。以下是步骤：
- en: In the Inspector panel, scroll until you see the Player Controller (Script)
    component.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，滚动直到你看到玩家控制器（脚本）组件。
- en: Drag the `jump` audio clip from the Project panel's `Assets` | `Audio` folder
    to the appropriate spot in the Player Controller (Script) component.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`jump`音频剪辑从项目面板的`Assets` | `Audio`文件夹拖动到玩家控制器（脚本）组件的适当位置。
- en: 'Drag the `throw` audio clip from the Project pane''s `Assets` | `Audio` folder
    to the appropriate spot in the Player Controller (Script) component. Your Player
    Controller (Script) component should look like the following:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`throw`音频剪辑从项目面板的`Assets` | `Audio`文件夹拖动到玩家控制器（脚本）组件的适当位置。你的玩家控制器（脚本）组件应如下所示：
- en: '![](img/0a6fc6ef-92ae-487c-a58b-3b3efd8b6b0a.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a6fc6ef-92ae-487c-a58b-3b3efd8b6b0a.png)'
- en: 'The last audio clip for us to implement is the victory clip. We will start
    by editing the `VictoryManager` script. Open that script file and make the following
    modifications:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要实现的最后一个音频剪辑是胜利剪辑。我们将首先编辑`VictoryManager`脚本。打开该脚本文件并做出以下修改：
- en: 'Add the following member variables:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下成员变量：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a  `Start()` method, as shown here:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Start()`方法，如下所示：
- en: '[PRE14]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Edit the `Update()` method, shown as follows. You will notice that we only
    added an audio clip playback for the victory condition, as we''ve already taken
    care of the defeat condition:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`Update()`方法，如下所示。你会注意到我们只为胜利条件添加了音频剪辑播放，因为我们已经处理了失败条件：
- en: '[PRE15]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that our script changes for the `VictoryManager` script file are completed,
    we need to assign the victory audio clip to the variable we created. Here are
    the steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对`VictoryManager`脚本文件的修改已完成，我们需要将胜利音频剪辑分配到我们创建的变量中。以下是步骤：
- en: In the Hierarchy panel, select `HUD_Canvas` | `EndOfGame` | Victory.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，选择`HUD_Canvas` | `EndOfGame` | 胜利。
- en: In the Inspector panel, scroll until you see the Victory Manager (Script) component.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，滚动直到你看到胜利管理器（脚本）组件。
- en: 'Drag the `victory` audio clip from the Project panel''s `Assets` | `Audio`
    folder to the appropriate spot in the Victory Manager (Script) component. Your Victory
    Manager (Script) component should look like the following screenshot:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`victory`音频剪辑从项目面板的`Assets` | `Audio`文件夹拖动到胜利管理器（脚本）组件的适当位置。你的胜利管理器（脚本）组件应如下截图所示：
- en: '![](img/9212a714-f234-4959-9246-ca31f91e0744.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9212a714-f234-4959-9246-ca31f91e0744.png)'
- en: You are now ready to test this new functionality by playing the game.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好通过玩游戏来测试这个新功能。
- en: This is an excellent time to save both your scene and your project.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个保存你的场景和项目的绝佳时机。
- en: Introduction to Unity's lights and shadows
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity的灯光和阴影简介
- en: Lighting in games is important as it is what allows GameObjects to be seen.
    If we did not have lights in our game, the game screen would be completely black.
    In Unity, it is easy to take lighting for granted because, when we create a new
    scene, there is a default Main Camera and a Directional Light.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的光照非常重要，因为它允许GameObject被看到。如果我们游戏中没有灯光，游戏屏幕将会是完全黑色的。在Unity中，很容易将光照视为理所当然，因为我们创建新场景时，默认有一个主摄像机和一个方向光。
- en: Shadows in game worlds are another component that can be taken for granted because
    Unity's default settings regarding shadows is often sufficient for games.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏世界中的阴影是另一个可以视为理所当然的组件，因为Unity关于阴影的默认设置通常对游戏来说已经足够。
- en: In this section, we will look at light sources and shadows.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨光源和阴影。
- en: Adding light sources
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加光源
- en: 'In Unity, lights are GameObjects and are available in several different types.
    Here are the most common types of light sources:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，灯光是GameObject，并且有几种不同类型。以下是最常见的光源类型：
- en: Directional light
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方向光
- en: Point light
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点光源
- en: Spot light
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚光灯
- en: Area light
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域光源
- en: Let's look at each of these lights.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看这些灯光。
- en: Directional light
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方向光
- en: 'The Directional light is like the sun. As you can see from the following Inspector
    panel, there are several settings that can be adjusted for Directional lights
    beyond the Transform''s Position, Rotation, and Scale:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 轴向光就像太阳。正如您可以从以下“检查器”面板中看到，除了变换的位置、旋转和缩放之外，还有几个可以调整的轴向光设置：
- en: '![](img/5aa1f7d5-0c20-4063-9842-d069f0f69bac.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5aa1f7d5-0c20-4063-9842-d069f0f69bac.png)'
- en: The following table provides information about key settings for Directional
    lights.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了关于方向光关键设置的详细信息。
- en: '| **Setting** | **Details** |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| **设置** | **细节** |'
- en: '| Color | You can select a color for the light to emit. For realistic outdoor
    scenes, you would probably use a light yellow color. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 颜色 | 您可以为灯光选择一种颜色。对于逼真的户外场景，您可能会选择浅黄色。 |'
- en: '| Mode | You can select from Realtime, Baked, or Mixed lighting modes. When
    Realtime is selected, the direct light is computed each frame during the game.
    This provides a realistic game experience and is the default mode. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 您可以选择实时、烘焙或混合照明模式。当选择实时时，在游戏过程中每帧都会计算直接光线。这提供了逼真的游戏体验，并且是默认模式。 |'
- en: '| Intensity | Adjust this to control brightness.  |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 亮度 | 调整此选项以控制亮度。  |'
- en: '| Shadow Type | There are three options here: Soft Shadows, Hard Shadows, and
    No Shadows. Soft Shadows cast soft edges and avoid the sharp-edged shadows that
    are cast using Hard Shadows. As you would expect, Soft Shadows is more processor-intensive
    than Hard Shadows. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 阴影类型 | 这里有三个选项：软阴影、硬阴影和无阴影。软阴影产生柔和的边缘，避免了使用硬阴影产生的尖锐边缘阴影。正如您所预期的那样，软阴影比硬阴影更占用处理器资源。
    |'
- en: '| Realtime Shadows | This area provides additional control over your shadows.
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 实时阴影 | 此区域提供了对阴影的额外控制。 |'
- en: Point light
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点光源
- en: 'Point lights are like light bulbs without lampshades. In fact, they are the
    ideal type of light to use to simulate a small, local source of light such as
    a table lamp, wall sconce, or chandelier. As you can see in the following screenshot
    of the Inspector panel, you can modify the Range, Color, and Intensity. You can
    also select from Realtime, Baked, or Mixed render modes:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 点光源就像没有灯罩的灯泡。实际上，它们是模拟小型、局部光源（例如台灯、壁灯或吊灯）的理想光源。正如您可以从以下“检查器”面板的屏幕截图中所见，您可以修改范围、颜色和亮度。您还可以选择实时、烘焙或混合渲染模式：
- en: '![](img/7db0af5b-9b96-4196-aaa8-3b6d5b737ce7.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7db0af5b-9b96-4196-aaa8-3b6d5b737ce7.png)'
- en: Spot light
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚光灯
- en: A Spot light is like a flashlight and provides cone-shaped illumination. This
    type of light is ideal for simulating flashlights, automobile headlights, plane
    lights, search lights, and Spot lights. As you can see in the following Inspector
    panel screenshot, there is a Spot Angle property. Spot lights also have properties in
    common with other types of lights.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 聚光灯就像手电筒，提供锥形照明。这种类型的灯光非常适合模拟手电筒、汽车前灯、飞机灯光、探照灯和聚光灯。正如您可以从以下“检查器”面板的屏幕截图中所见，有一个聚光角度属性。聚光灯也具有与其他类型灯光共有的属性。
- en: '![](img/42ea7d07-aef9-4c88-aefa-fd81b77ea634.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42ea7d07-aef9-4c88-aefa-fd81b77ea634.png)'
- en: Area light
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面光源
- en: 'An Area (baked only) light is something that is used when you bake images into
    textures. This type of light is great for simulating light coming out of a building,
    such as from a window. Area lights are also good for LED stadium lighting. The
    properties Width and Height, shown in the following screenshot, are not present
    in Directional, Point, and Spot lights:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 面光源（仅烘焙）是在将图像烘焙到纹理时使用的。这种类型的灯光非常适合模拟从建筑物中发出的光线，例如从窗户中发出的光线。面光源也适用于LED体育场照明。以下屏幕截图显示的宽度和高度属性在方向光、点光源和聚光灯中不存在：
- en: '![](img/6fd6f05f-5c13-49ff-92ad-8ea9b8277178.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fd6f05f-5c13-49ff-92ad-8ea9b8277178.png)'
- en: Shadows
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阴影
- en: Unity affords us great control over shadows in our game scenes. We can control
    which objects cast shadows, which objects can receive shadows, and various properties
    of the shadows. Shadows in Unity closely replicate the way shadows exist in the
    real world. As discussed earlier in this chapter, there are soft shadows and hard
    shadows.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Unity为我们提供了对游戏场景中阴影的强大控制。我们可以控制哪些对象投射阴影，哪些对象可以接收阴影，以及阴影的各种属性。Unity中的阴影紧密地复制了现实世界中阴影的存在方式。正如本章前面所讨论的，有软阴影和硬阴影。
- en: Soft shadows result in greater realism, but at the cost of additional computations
    and processing. Hard shadows provide less realistic, but often acceptable, shadows
    during a game and are less processor intensive. Hard shadows are easy to identify
    in a game because the shadows cast will have sharp, blocky shadow edges.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 软阴影可以带来更高的真实感，但代价是额外的计算和处理。硬阴影在游戏中提供的真实感较低，但通常是可以接受的，且对处理器的需求较低。在游戏中，硬阴影的边缘通常较为锐利、块状。
- en: Discovering Unity's special effects
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现Unity的特殊效果
- en: 'Unity has a great capabilities for special effects in three categories: Particle
    System, Trail Renderer, and Line Renderer. These are available via the GameObject
    | Effects top menu.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在三个类别中具有强大的特殊效果能力：粒子系统、轨迹渲染器和线渲染器。这些选项可通过GameObject | Effects顶菜单访问。
- en: 'Adding an Effects component to a GameObject is accomplished by using the Add
    Component | Effects option in the Inspector panel. As you can see in the following
    screenshot, the Particle System, Trail Renderer, and Line Renderer options are
    available via this method. There are also additional options, such as Lens Flare
    and Halo:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查器面板中的添加组件 | 效果选项，可以将效果组件添加到GameObject中。如以下截图所示，粒子系统、轨迹渲染器和线渲染器选项可通过此方法访问。还有其他选项，如镜头光晕和光环：
- en: '![](img/5c26c352-2b90-41c1-a868-731cbb611090.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c26c352-2b90-41c1-a868-731cbb611090.png)'
- en: In this section, we will discuss the Particle System and Trail Renderer effects.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论粒子系统和轨迹渲染器效果。
- en: Particle System
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子系统
- en: Particle Systems use a vast number of tiny 2D images or meshes in a scene to
    simulate effects such as liquids, smoke, flames, pixie dust, fireworks, and clouds.
    The basic concept is that one simple 2D image or mesh can be used in large quantities
    to create a robust and dense visual effect. These 2D images or meshes are the
    particle, and they collectively form the Particle System.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统使用场景中大量的小2D图像或网格来模拟液体、烟雾、火焰、精灵尘埃、烟花和云等效果。基本概念是，一个简单的2D图像或网格可以大量使用，以创建强大且密集的视觉效果。这些2D图像或网格是粒子，它们共同构成了粒子系统。
- en: Each particle in a Particle System is rendered from a specific point and has
    a limited lifespan. How long this lifespan lasts depends on your implementation,
    but it typically only lasts a few seconds.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统中的每个粒子都从特定点渲染，并具有有限的生命周期。这个生命周期有多长取决于你的实现，但通常只有几秒钟。
- en: 'As you can see from the following Inspector panel screenshot, there are several
    parameters that allow us to customize the behavior of Particle Systems. We will
    add a Particle System to our game later in this chapter:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下检查器面板截图所示，有几个参数允许我们自定义粒子系统的行为。我们将在本章后面添加粒子系统到我们的游戏中：
- en: '![](img/a37e9b8a-74bb-4d55-99bb-9d4ac63fec60.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a37e9b8a-74bb-4d55-99bb-9d4ac63fec60.png)'
- en: 'When we add a Particle System to our scene, Unity presents us with an interface,
    the Particle Effect panel, in the lower-right corner of the Scene view. This interface
    allows us to play, pause, and stop the Particle simulation, as well as adding
    additional parameter settings while observing the changes to the simulation:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将粒子系统添加到场景中时，Unity在场景视图的右下角提供了一个界面，即粒子效果面板。此界面允许我们播放、暂停和停止粒子模拟，同时观察模拟的变化，并添加额外的参数设置：
- en: '![](img/265fc7f7-165c-4482-855c-1a6fab6d88f3.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/265fc7f7-165c-4482-855c-1a6fab6d88f3.png)'
- en: Unity 2018, in beta at the time of this book's publication, has support for
    GPU instancing of Particle System mesh rendering, support for Orbital Velocity,
    and enables particle emitter shapes, which permits texture reading for masking
    and color tinting.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 2018，在本书出版时处于测试版，支持粒子系统网格渲染的GPU实例化、支持轨道速度，并启用粒子发射器形状，允许纹理读取以进行遮罩和着色。
- en: Trail Renderer
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轨迹渲染器
- en: 'A Trail Renderer is a visual effect that creates a trail behind a GameObject
    as it moves. Classic examples of this are a jet''s afterburner, a car''s exhaust,
    and the Tasmanian Devil''s visual swoosh (dust cloud). The following Inspector
    panel screenshot illustrates the parameters that can be manipulated to customize
    a Trail Renderer:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 轨迹渲染器是一种视觉效果，可以在GameObject移动时在其后面创建轨迹。经典的例子包括喷气式飞机的尾焰、汽车的排气和塔斯马尼亚魔鬼的视觉滑行（尘云）。以下检查器面板截图说明了可以调整以自定义轨迹渲染器的参数：
- en: '![](img/c0f6f962-5560-478e-914d-a572ebe494f9.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c0f6f962-5560-478e-914d-a572ebe494f9.png)'
- en: 'The primary Trail Renderer settings are described here:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述了主要的轨迹渲染器设置：
- en: '| **Setting** | **Description** |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| **设置** | **描述** |'
- en: '| Cast Shadows | There are four options here: On, Off, Two-Sided, and Shadows
    Only. The default setting is On. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| 投影阴影 | 这里有四个选项：开启、关闭、双面和仅阴影。默认设置为开启。|'
- en: '| Receive Shadows | This is an on/off toggle. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 接收阴影 | 这是一个开启/关闭切换。|'
- en: '| Materials | You can select a particle shader for the material and adjust
    the size. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| 材质 | 您可以选择粒子着色器作为材质并调整其大小。|'
- en: '| Time | This setting defines the length of the trail. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 此设置定义了尾迹的长度。|'
- en: '| Autodestruct | You can select this option to have the trail GameObject destroyed
    once it has been idle for the number of seconds set in the Time setting. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 自动销毁 | 您可以选择此选项，使尾迹游戏对象在闲置了设置在时间设置中的秒数后销毁。|'
- en: Adding visual effects to our game
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的游戏添加视觉效果
- en: Our game already has a Directional light and, as discussed earlier in this chapter,
    it acts like the sun—shining light from high above our terrain. The shadows from
    our Cucumber Man, Cucumber Beetles, cherries, cherry trees, and cucumber patches
    can be seen on the grass. We do not need to make any changes to them.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏已经有一个方向光，如本章前面所讨论的，它就像太阳一样——从我们地形上方照射光线。黄瓜人、黄瓜甲虫、樱桃、樱桃树和黄瓜地的阴影可以在草地上看到。我们不需要对它们进行任何更改。
- en: 'The visual effects changes we will make in this section are:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将进行的视觉效果更改包括：
- en: Adding a Point light to our cherry trees
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的樱桃树添加点光源
- en: Adding a special effect using the Particle System
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用粒子系统添加特殊效果
- en: Adding a Point light to our cherry trees
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的樱桃树添加点光源
- en: 'Currently, the Cucumber Man can walk up to and under the cherry trees in our
    sandbox area. Those trees are very dense and, because the only source of light
    comes from our directional light, it is too dark for the Cucumber Man to see the
    cherries he is picking from the tree. This is just simulated for the sake of adding
    a point light. So, we will use the following steps to add a point light to our
    cherry trees in the sandbox area of our scene:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，黄瓜人可以在我们的沙盒区域内的樱桃树下行走。这些树非常密集，而且由于唯一的光源来自我们的方向光，所以对于黄瓜人来说太暗了，看不清他从树上摘的樱桃。这只是为了添加点光源而进行的模拟。因此，我们将使用以下步骤在我们的场景沙盒区域的樱桃树上添加点光源：
- en: In Scene view, navigate to a cherry tree and zoom in so that you can see the
    base of the tree
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，导航到一个樱桃树并放大，以便您可以清楚地看到树的底部
- en: Using the top menu, select GameObject | Light | Point Light
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用顶部菜单，选择GameObject | 光 | 点光源
- en: Relocate the Point Light so that it is at the center of the tree trunk
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将点光源重新定位，使其位于树干中心
- en: In the Inspector panel, select a Color such as a light red
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，选择一个如浅红色等颜色
- en: In the Inspector panel, change the Range to `11`
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将范围更改为`11`
- en: In the Inspector panel, increase the Intensity to `30`
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将强度增加到`30`
- en: 'Reposition the point light so that it looks similar to the following image:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将点光源重新定位，使其看起来类似于以下图像：
- en: '![](img/01c70dce-f4e4-4ac1-a27d-094ac6884f9e.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01c70dce-f4e4-4ac1-a27d-094ac6884f9e.png)'
- en: Repeat steps 1 through 7 for each cherry tree in your sandbox area. Test your
    game in game mode to see the results.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对您沙盒区域中的每一棵樱桃树重复步骤1至7。在游戏模式下测试您的游戏以查看结果。
- en: Add a special effect using the Particle System
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用粒子系统添加特殊效果
- en: 'In this section, we will add a particle system to our spawn pads so that a
    special effect is attached to them. Here are the steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向我们的孵化垫添加粒子系统，以便它们附加特殊效果。以下是步骤：
- en: In Scene view, navigate to a spawn pad and zoom in so you can see the pad clearly.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，导航到一个孵化垫并放大，以便您可以清楚地看到垫子。
- en: Using the top menu, select GameObject | Effects | Particle System.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用顶部菜单，选择GameObject | 效果 | 粒子系统。
- en: Relocate the Particle System so that it is at the center and base of the spawn
    pad.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将粒子系统重新定位，使其位于孵化垫的中心和底部。
- en: In the Hierarchy panel, drag the Particle System so that it is subordinate to
    a spawn pad.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，将粒子系统拖动到孵化垫下，使其成为其子对象。
- en: In the Inspector panel, click the settings cog in the Transform component and
    select Reset. This resets the position of the Particle System to the Transform
    of the spawn pad.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击变换组件中的设置齿轮并选择重置。这会将粒子系统的位置重置为孵化垫的变换。
- en: In the Inspector panel, select a Color that contrasts with the red of the spawn
    pad and the green of the terrain and cherry tree, such as blue.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，选择一个与孵化垫的红色和地形以及樱桃树的绿色形成对比的颜色，例如蓝色。
- en: In the Inspector panel, change the Max Particles to `10,000`.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将最大粒子数更改为`10,000`。
- en: In the Inspector panel, increase the Shape | Shape to Edge.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将形状改为边缘形状。
- en: In the Inspector panel, increase the Shape | Radius to 1.5.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将形状的半径增加到1.5。
- en: 'When completed, your Particle System should look similar to the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当完成时，你的粒子系统应该看起来类似于以下截图：
- en: '![](img/8df633b0-a375-41dd-bab2-486c31106a41.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8df633b0-a375-41dd-bab2-486c31106a41.png)'
- en: Repeat steps 1 through 9 for each spawn pad in your sandbox area.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 对你的沙盒区域中的每个出生点重复步骤1至9。
- en: Summary
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we planned and implemented audio and visual effects to enhance
    the overall gameplay. Specifically, we added audio to key events in our combat
    system and added lighting and particle special effects. We started with an overview
    of Unity's Audio System, then planned and implemented our game's audio. We then
    shifted to an introduction to lights and shadows in Unity and covered selected
    special effects. We concluded by adding a Point light to our cherry trees and
    a special effect to our spawn pads.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们计划和实现了音频和视觉效果，以增强整体游戏体验。具体来说，我们在战斗系统的关键事件中添加了音频，并添加了照明和粒子特效。我们从Unity音频系统的概述开始，然后计划和实现了我们游戏的音频。然后转向Unity中灯光和阴影的介绍，并涵盖了选定的特效。最后，我们在樱桃树上添加了一个点光源，并在出生点添加了一个特效。
- en: In [Chapter 13](e8407796-3bbd-4f54-bbcc-e1bd89284de5.xhtml), *Optimizing Our
    Game for Deployment*, you will learn how to diagnose performance problems and
    how to optimize scripts and graphic rendering. You will also learn how to deploy
    your game to multiple platforms.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第13章](e8407796-3bbd-4f54-bbcc-e1bd89284de5.xhtml)，“优化我们的游戏以供部署”，你将学习如何诊断性能问题以及如何优化脚本和图形渲染。你还将学习如何将你的游戏部署到多个平台。
