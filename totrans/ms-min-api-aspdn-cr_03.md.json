["```cs\ndotnet tool install -g LiveReloadServer\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n```", "```cs\ndocker run --rm \\\n    -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n    -i /local/petstore.yaml \\\n    -g go \\\n    -o /local/out/go\n```", "```cs\n/// <summary>\n/// Creates a Contact.\n/// </summary>\n/// <param name=\"contact\"></param>\n/// <returns>A newly created Contact</returns>\n/// <response code=\"201\">Returns the newly created contact</response>\n/// <response code=\"400\">If the contact is null</response>\n[HttpPost]\n[ProducesResponseType(StatusCodes.Status201Created)]\n[ProducesResponseType(StatusCodes.Status400BadRequest)]\npublic async Task<IActionResult> Create(Contact contactItem)\n{\n     _context.Contacts.Add(contactItem);\n     await _context.SaveChangesAsync();\n     return CreatedAtAction(nameof(Get), new { id = \n     contactItem.Id }, contactItem);\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new() \n    { \n        Title = builder.Environment.ApplicationName,\n        Version = \"v1\", Contact = new() \n        { Name = \"PacktAuthor\", Email = \"authors@packtpub.com\",\n          Url = new Uri(\"https://www.packtpub.com/\") },\n          Description = \"PacktPub Minimal API - Swagger\",\n          License = new Microsoft.OpenApi.Models.\n            OpenApiLicense(),\n          TermsOfService = new(\"https://www.packtpub.com/\")\n});\n});\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n```", "```cs\napp.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", $\"{builder.Environment.ApplicationName} v1\"));\n```", "```cs\napp.MapGet(\"/sampleresponse\", () =>\n    {\n        return Results.Ok(new ResponseData(\"My Response\"));\n    })\n    .Produces<ResponseData>(StatusCodes.Status200OK)\n    .WithTags(\"Sample\")\n    .WithName(\"SampleResponseOperation\"); // operation ids to \n                                             Open API\napp.MapGet(\"/sampleresponseskipped\", () =>\n{\n    return Results.Ok(new ResponseData(\"My Response Skipped\"));\n})\n    .ExcludeFromDescription();\napp.MapGet(\"/{id}\", (int id) => Results.Ok(id));\napp.MapPost(\"/\", (ResponseData data) => Results.Ok(data))\n   .Accepts<ResponseData>(MediaTypeNames.Application.Json);\n```", "```cs\n\"paths\": {\n         \"/sampleresponse\": {\n              \"get\": {\n                   \"tags\": [\n                        \"Sample\"\n                   ],\n                   \"operationId\": \"SampleResponseOperation\",\n                   \"responses\": {\n                        \"200\": {\n                             \"description\": \"Success\",\n                             \"content\": {\n                                  \"application/json\": {\n                                       \"schema\": {\n                                            \"$ref\": \"#/components/schemas/ResponseData\"\n                                       }\n                                  }\n                             }\n                        }\n                   }\n              }\n         },\n```", "```cs\npublic class CorrelationIdOperationFilter : IOperationFilter\n{\n    private readonly IWebHostEnvironment environment;\n    public CorrelationIdOperationFilter(IWebHostEnvironment \n    environment)\n    {\n        this.environment = environment;\n    }\n    /// <summary>\n    /// Apply header in parameter Swagger.\n    /// We add default value in parameter for developer \n        environment\n    /// </summary>\n    /// <param name=\"operation\"></param>\n    /// <param name=\"context\"></param>\n    public void Apply(OpenApiOperation operation, \n    OperationFilterContext context)\n    {\n        if (operation.Parameters == null)\n        {\n            operation.Parameters = new \n            List<OpenApiParameter>();\n        }\n        if (operation.OperationId == \n            \"SampleResponseOperation\")\n        {\n             operation.Parameters.Add(new OpenApiParameter\n             {\n                 Name = \"x-correlation-id\",\n                 In = ParameterLocation.Header,\n                 Required = false,\n                 Schema = new OpenApiSchema { Type = \n                 \"String\", Default = new OpenApiString(\"42\") }\n             });\n        }\n         }\n}\n```", "```cs\nbuilder.Services.AddSwaggerGen(c =>\n{\n         … removed for brevity\n         c.OperationFilter<CorrelationIdOperationFilter>();\n});\n```", "```cs\nlivereloadserver \"{BasePath}\\Chapter03\\2-CorsSample\\Frontend\"\n```", "```cs\ndotnet run .\\Backend\\CorsSample.csproj\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar corsPolicy = new CorsPolicyBuilder(\"http://localhost:5200\")\n    .AllowAnyHeader()\n    .AllowAnyMethod()\n    .Build();\nbuilder.Services.AddCors(c => c.AddDefaultPolicy(corsPolicy));\nvar app = builder.Build();\napp.UseCors();\napp.MapGet(\"/api/cors\", () =>\n{\n         return Results.Ok(new { CorsResultJson = true });\n});\napp.Run();\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar corsPolicy = new CorsPolicyBuilder(\"http://localhost:5200\")\n    .AllowAnyHeader()\n    .AllowAnyMethod()\n    .Build();\nbuilder.Services.AddCors(options => options.AddPolicy(\"MyCustomPolicy\", corsPolicy));\nvar app = builder.Build();\napp.UseCors(\"MyCustomPolicy\");\napp.MapGet(\"/api/cors\", () =>\n{\n    return Results.Ok(new { CorsResultJson = true });\n});\napp.Run();\n```", "```cs\napp.MapGet(\"/api/cors/extension\", () =>\n{\n    return Results.Ok(new { CorsResultJson = true });\n})\n.RequireCors(\"MyCustomPolicy\");\n```", "```cs\napp.MapGet(\"/api/cors/annotation\", [EnableCors(\"MyCustomPolicy\")] () =>\n{\n   return Results.Ok(new { CorsResultJson = true });\n});\n```", "```cs\npublic class MyCustomObject\n{\n    public string? CustomProperty { get; init; }\n}\npublic class MyCustomStartupObject\n{\n    public string? CustomProperty { get; init; }\n}\n```", "```cs\n{\n    \"MyCustomObject\": {\n         \"CustomProperty\": \"PropertyValue\"\n    },\n    \"MyCustomStartupObject\": {\n         \"CustomProperty\": \"PropertyValue\"\n    },\n    \"ConnectionStrings\": {\n         \"Default\": \"MyConnectionstringValueInAppsettings\"\n    }\n}\n```", "```cs\nvar startupConfig = builder.Configuration.GetSection(nameof(MyCustomStartupObject)).Get<MyCustomStartupObject>();\n```", "```cs\napp.MapGet(\"/read/configurations\", (IConfiguration configuration) =>\n{\n    var customObject = configuration.\n    GetSection(nameof(MyCustomObject)).Get<MyCustomObject>();\n```", "```cs\nMyCustomValue = configuration.GetValue<string>(\"MyCustomValue\"),\nConnectionString = configuration.GetConnectionString(\"Default\"),\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar startupConfig = builder.Configuration.GetSection(nameof(MyCustomStartupObject)).Get<MyCustomStartupObject>();\napp.MapGet(\"/read/configurations\", (IConfiguration configuration) =>\n{\n    var customObject = configuration.GetSection\n    (nameof(MyCustomObject)).Get<MyCustomObject>();\n    return Results.Ok(new\n    {\n        MyCustomValue = configuration.GetValue\n        <string>(\"MyCustomValue\"),\n         ConnectionString = configuration.\n         GetConnectionString(\"Default\"),\n         CustomObject = customObject,\n         StartupObject = startupConfig\n    });\n})\n.WithName(\"ReadConfigurations\");\n```", "```cs\n\"Priority\": \"Root\"\n```", "```cs\n\"Priority\":    \"Dev\"\n```", "```cs\npublic class OptionBasic\n{\n    public string? Value { get; init; }\n}\n    public class OptionSnapshot\n    {\n        public string? Value { get; init; }\n    }\n    public class OptionMonitor\n    {\n        public string? Value { get; init; }\n    }\n    public class OptionCustomName\n    {\n        public string? Value { get; init; }\n    }\n```", "```cs\nbuilder.Services.Configure<OptionBasic>(builder.Configuration.GetSection(\"OptionBasic\"));\nbuilder.Services.Configure<OptionMonitor>(builder.Configuration.GetSection(\"OptionMonitor\"));\nbuilder.Services.Configure<OptionSnapshot>(builder.Configuration.GetSection(\"OptionSnapshot\"));\nbuilder.Services.Configure<OptionCustomName>(\"CustomName1\", builder.Configuration.GetSection(\"CustomName1\"));\nbuilder.Services.Configure<OptionCustomName>(\"CustomName2\", builder.Configuration.GetSection(\"CustomName2\"));\n```", "```cs\nbuilder.Services.PostConfigure<MyConfigOptions>(myOptions =>\n{\n   myOptions.Key1 = \"my_new_value_post_configuration\";\n});\n```", "```cs\napp.MapGet(\"/read/options\", (IOptions<OptionBasic> optionsBasic,\n         IOptionsMonitor<OptionMonitor> optionsMonitor,\n         IOptionsSnapshot<OptionSnapshot> optionsSnapshot,\n         IOptionsFactory<OptionCustomName> optionsFactory) =>\n{\n         return Results.Ok(new\n         {\n             Basic = optionsBasic.Value,\n             Monitor = optionsMonitor.CurrentValue,\n             Snapshot = optionsSnapshot.Value,\n             Custom1 = optionsFactory.Create(\"CustomName1\"),\n             Custom2 = optionsFactory.Create(\"CustomName2\")\n         });\n})\n.WithName(\"ReadOptions\");\n```", "```cs\nbuilder.Services.AddOptions<ConfigWithValidation>().Bind(builder.Configuration.GetSection(nameof(ConfigWithValidation)))\n.ValidateDataAnnotations();\napp.MapGet(\"/read/options\", (IOptions<ConfigWithValidation> optionsValidation) =>\n{\n    return Results.Ok(new\n    {\n        Validation = optionsValidation.Value\n    });\n})\n.WithName(\"ReadOptions\");\n```", "```cs\n\"ConfigWithValidation\": {\n         \"Email\": \"andrea.tosato@hotmail.it\",\n         \"NumericRange\": 1001\n    }\n```", "```cs\npublic class ConfigWithValidation\n{\n    [RegularExpression(@\"^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w)\n                      {2,})+)$\")]\n    public string? Email { get; set; }\n    [Range(0, 1000, ErrorMessage = \"Value for {0} must be \n                                    between {1} and {2}.\")]\n    public int NumericRange { get; set; }\n}\n```", "```cs\nMicrosoft.Extensions.Options.OptionsValidationException: DataAnnotation validation failed for 'ConfigWithValidation' members: 'NumericRange' with the error: 'Value for NumericRange must be between 0 and 1000.'.\n```", "```cs\n\"MyCustomObject\": {\n         \"CustomProperty\": \"PropertyValue\"\n    }\n```", "```cs\n{\n    \"MyCustomArray\": {\n       \"CustomPropertyArray\": [\n         { \"CustomKey\": \"ValueOne\" },\n         { \"CustomKey \": \"ValueTwo\" }\n     ]\n    }\n}\n```", "```cs\napp.MapGet(\"/env-test\", (IConfiguration configuration) =>\n{\n    var rootProperty = configuration.\n    GetValue<string>(\"RootProperty\");\n    var sampleVariable = configuration.\n    GetValue<string>(\"RootSettings:SampleVariable\");\n    var connectionString = configuration.\n    GetConnectionString(\"SqlConnection\");\n    return Results.Ok(new\n    {\n        RootProperty = rootProperty,\n        SampleVariable = sampleVariable,\n        Connection String = connectionString\n    });\n})\n.WithName(\"EnvironmentTest\");\n```", "```cs\nservices:\n    dockerenvironment:\n         environment:\n              - ASPNETCORE_ENVIRONMENT=Development\n              - ASPNETCORE_URLS=https://+:443;http://+:80\n              - RootProperty=minimalapi-root-value\n              - RootSettings__SampleVariable=minimalapi-variable-value\n              - ConnectionStrings__SqlConnection=Server=minimal.db;Database=minimal_db;User Id=sa;Password=Taggia42!\n```", "```cs\n# First configuration\n- RootProperty=minimalapi-root-value\n```", "```cs\n# Second configuration\n- RootSettings__SampleVariable=minimalapi-variable-value\n```", "```cs\n# Third configuration\n- ConnectionStrings__SqlConnection=Server=minimal.db;Database=minimal_db;User Id=sa;Password=Taggia42!\n```", "```cs\napp.UseExceptionHandler(exceptionHandlerApp =>\n{\n    exceptionHandlerApp.Run(async context =>\n    {\n        context.Response.StatusCode = StatusCodes.\n        Status500InternalServerError;\n        context.Response.ContentType = Application.Json;\n        var exceptionHandlerPathFeature = context.Features.\n          Get<IExceptionHandlerPathFeature>()!;\n        var errorMessage = new\n        {\n            Message = exceptionHandlerPathFeature.Error.Message\n        };\n        await context.Response.WriteAsync\n        (JsonSerializer.Serialize(errorMessage));\n         if (exceptionHandlerPathFeature?.\n             Error is FileNotFoundException)\n         {\n             await context.Response.\n             WriteAsync(\" The file was not found.\");\n         }\n         if (exceptionHandlerPathFeature?.Path == \"/\")\n         {\n             await context.Response.WriteAsync(\"Page: Home.\");\n         }\n    });\n});\n```", "```cs\napp.MapGet(\"/ok-result\", () =>\n{\n         throw new ArgumentNullException(\"taggia-parameter\", \n         \"Taggia has an error\");\n})\n.WithName(\"OkResult\");\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.TryAddSingleton<IActionResultExecutor<ObjectResult>, ProblemDetailsResultExecutor>();\nbuilder.Services.AddProblemDetails(options =>\n{   options.MapToStatusCode<NotImplementedException>\n    (StatusCodes.Status501NotImplemented);\n});\nvar app = builder.Build();\napp.UseProblemDetails();\n```", "```cs\npublic class ProblemDetailsResultExecutor : IActionResultExecutor<ObjectResult>\n{\n    public virtual Task ExecuteAsync(ActionContext context, \n    ObjectResult result)\n{\n        ArgumentNullException.ThrowIfNull(context);\n        ArgumentNullException.ThrowIfNull(result);\n        var executor = Results.Json(result.Value, null, \n        \"application/problem+json\", result.StatusCode);\n        return executor.ExecuteAsync(context.HttpContext);\n    }\n}\n```", "```cs\napp.MapGet(\"/internal-server-error\", () =>\n{\n    throw new ArgumentNullException(\"taggia-parameter\", \n    \"Taggia has an error\");\n})\n    .Produces<ProblemDetails>(StatusCodes.\n     Status500InternalServerError)\n         .WithName(\"internal-server-error\");\n```", "```cs\n{\n    \"type\": \"https://httpstatuses.com/500\",\n    \"title\": \"Internal Server Error\",\n    \"status\": 500,\n    \"detail\": \"Taggia has an error (Parameter 'taggia-\n     parameter')\",\n    \"exceptionDetails\": [\n         {\n ------- for brevity\n         }\n    ],\n    \"traceId\": \"00-f6ff69d6f7ba6d2692d87687d5be75c5-\n     e734f5f081d7a02a-00\"\n}\n```", "```cs\nbuilder.Services.AddProblemDetails(options =>\n{\n    options.MapToStatusCode<NotImplementedException>\n      (StatusCodes.Status501NotImplemented);\n});\n```", "```cs\napp.MapGet(\"/not-implemented-exception\", () =>\n{\n    throw new NotImplementedException\n      (\"This is an exception thrown from a Minimal API.\");\n})\n    .Produces<ProblemDetails>(StatusCodes.\n     Status501NotImplemented)\n         .WithName(\"NotImplementedExceptions\");\n```", "```cs\napp.MapGet(\"/problems\", () =>\n{\n    return Results.Problem(detail: \"This will end up in \n                                    the 'detail' field.\");\n})\n    .Produces<ProblemDetails>(StatusCodes.Status400BadRequest)\n    .WithName(\"Problems\");\napp.MapGet(\"/custom-error\", () =>\n{\n    var problem = new OutOfCreditProblemDetails\n    {\n        Type = \"https://example.com/probs/out-of-credit\",\n        Title = \"You do not have enough credit.\",\n        Detail = \"Your current balance is 30, \n        but that costs 50.\",\n        Instance = \"/account/12345/msgs/abc\",\n        Balance = 30.0m, Accounts = \n        { \"/account/12345\", \"/account/67890\" }\n    };\n    return Results.Problem(problem);\n})\n    .Produces<OutOfCreditProblemDetails>(StatusCodes.\n     Status400BadRequest)\n     .WithName(\"CreditProblems\");\napp.Run();\npublic class OutOfCreditProblemDetails : ProblemDetails\n{\n    public OutOfCreditProblemDetails()\n    {\n        Accounts = new List<string>();\n    }\n    public decimal Balance { get; set; }\n    public ICollection<string> Accounts { get; }\n}\n```"]