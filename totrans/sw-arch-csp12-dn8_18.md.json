["```cs\npublic interface IPackage : IEntity<int>\n{\n    void FullUpdate(IPackageFullEditDTO packageDTO);\n    string Name { get; set; }\n    string Description { get;}\n    decimal Price { get; set; }\n    int DurationInDays { get; }\n    DateTime? StartValidityDate { get;}\n    DateTime? EndValidityDate { get; }\n    int DestinationId { get; }\n\n} \n```", "```cs\npublic interface IPackageRepository:\n        IRepository<IPackage>\n{\n    Task<IPackage> Get(int id);\n    IPackage New();\n    Task<IPackage> Delete(int id);\n} \n```", "```cs\npublic class PackagePriceChangedEvent: IEventNotification\n{\n    public PackagePriceChangedEvent(int id, decimal price,\n long oldVersion, long newVersion)\n    {\n            PackageId = id;\n            NewPrice = price;\n            OldVersion = oldVersion;\n            NewVersion = newVersion;\n     }\n    public int PackageId { get; }\n    public decimal NewPrice { get; }\n    public long OldVersion { get; }\n    public long NewVersion { get; }\n} \n```", "```cs\npublic class Package: Entity<int>, IPackage\n{\n    public void FullUpdate(IPackageFullEditDTO o)\n    {\n        if (IsTransient())\n        {\n            Id = o.Id;\n            DestinationId = o.DestinationId;\n        }\n        else\n        {\n            if (o.Price != this.Price)\n                this.AddDomainEvent(new PackagePriceChangedEvent(\n                        Id, o.Price, EntityVersion, EntityVersion+1));\n        }\n        Name = o.Name;\n        Description = o.Description;\n        Price = o.Price;\n        DurationInDays = o.DurationInDays;\n        StartValidityDate = o.StartValidityDate;\n        EndValidityDate = o.EndValidityDate;\n    }\n    [MaxLength(128)]\n    public string Name { get; set; }\n    [MaxLength(128)]\n    public string? Description { get; set; }\n    public decimal Price { get; set; }\n    public int DurationInDays { get; set; }\n    public DateTime? StartValidityDate { get; set; }\n    public DateTime? EndValidityDate { get; set; }\n    public Destination MyDestination { get; set; }\n    [ConcurrencyCheck]\n    public long EntityVersion{ get; set; }\n    public int DestinationId { get; set; }\n} \n```", "```cs\npublic async Task StartAsync()\n{\n    await Database.BeginTransactionAsync();\n}\npublic Task CommitAsync()\n{\n    Database.CommitTransaction();\n    return Task.CompletedTask;\n}\npublic Task RollbackAsync()\n{\n    Database.RollbackTransaction();\n    return Task.CompletedTask;\n} \n```", "```cs\npublic async Task<bool> SaveEntitiesAsync()\n{\n    try\n    {\n        return await SaveChangesAsync() > 0;\n    }\n    catch (DbUpdateConcurrencyException ex)\n    {\n        foreach (var entry in ex.Entries)\n        {\n            entry.State = EntityState.Detached;\n\n        }\n        throw;\n    }\n} \n```", "```cs\napp.UseAuthorization();\n// Code to add: configure the Localization middleware\nvar ci = new CultureInfo(\"en-US\");\napp.UseRequestLocalization(new RequestLocalizationOptions\n{\n    DefaultRequestCulture = new RequestCulture(ci),\n    SupportedCultures = new List<CultureInfo>\n    {\n        ci,\n    },\n     SupportedUICultures = new List<CultureInfo>\n    {\n        ci,\n    }\n}); \n```", "```cs\n...\n...\nbuilder.Services.AddAllQueries(this.GetType().Assembly);\nbuilder.Services.AddAllCommandHandlers(this.GetType().Assembly);\nbuilder.Services.AddAllEventHandlers(this.GetType().Assembly); \n```", "```cs\npublic class PackagesListQuery:IPackagesListQuery\n{\n    private readonly MainDbContext ctx;\n    public PackagesListQuery(MainDbContext ctx)\n    {\n        this.ctx = ctx;\n    }\n    public async Task<IReadOnlyCollection<PackageInfosViewModel>> GetAllPackages()\n    {\n        return await ctx.Packages.Select(m => new PackageInfosViewModel\n        {\n            StartValidityDate = m.StartValidityDate,\n            ...\n        })\n            .OrderByDescending(m=> m.EndValidityDate)\n            .ToListAsync();\n    }\n} \n```", "```cs\npublic class UpdatePackageCommand: ICommand\n{\n    public UpdatePackageCommand(IPackageFullEditDTO updates)\n    {\n        Updates = updates;\n    }\n    public IPackageFullEditDTO Updates { get; private set; }\n} \n```", "```cs\nprivate readonly IPackageRepository repo;\nprivate readonly IEventMediator mediator;\npublic UpdatePackageCommandHandler(IPackageRepository repo, IEventMediator mediator)\n{\n    this.repo = repo;\n    this.mediator = mediator;\n} \n```", "```cs\npublic async Task HandleAsync(UpdatePackageCommand command)\n{\n    bool done = false;\n    IPackage model;\n    while (!done)\n    {\n        try\n        {\n            model = await repo.Get(command.Updates.Id);\n            if (model == null) return;\n            model.FullUpdate(command.Updates);\n            await mediator.TriggerEvents(model.DomainEvents);\n            await repo.UnitOfWork.SaveEntitiesAsync();\n            done = true;\n        }\n        catch (DbUpdateConcurrencyException)\n        {\n          // add some logging here\n        }\n    }\n} \n```", "```cs\npublic class PackagePriceChangedEventHandler :\n    IEventHandler<PackagePriceChangedEvent>\n{\n    private readonly IPackageEventRepository repo;\n    public PackagePriceChangedEventHandler(IPackageEventRepository repo)\n    {\n        this.repo = repo;\n    }\n    public Task HandleAsync(PackagePriceChangedEvent ev)\n    {\n        repo.New(PackageEventType.CostChanged, ev.PackageId,\n            ev.OldVersion, ev.NewVersion, ev.NewPrice);\n      return Task.CompletedTask;\n    }\n} \n```", "```cs\n[HttpGet]\npublic async Task<IActionResult> Index(\n    [FromServices] IPackagesListQuery query)\n{\n    var results = await query.GetAllPackages();\n    var vm = new PackagesListViewModel { Items = results };\n    return View(vm);\n} \n```", "```cs\npublic async Task<IActionResult> Edit(\n    PackageFullEditViewModel vm,\n    [FromServices] ICommandHandler<UpdatePackageCommand> command)\n{\n    if (ModelState.IsValid)\n    {\n        await command.HandleAsync(new UpdatePackageCommand(vm));\n        return RedirectToAction(\n            nameof(ManagePackagesController.Index));\n    }\n    else\nreturn View(vm);\n} \n```"]