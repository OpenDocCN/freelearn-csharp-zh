["```cs\nnamespace Chapter.EventBus\n{\n    public enum RaceEventType\n    {\n        COUNTDOWN, START, RESTART, PAUSE, STOP, FINISH, QUIT\n    }\n}\n```", "```cs\nusing UnityEngine.Events;\nusing System.Collections.Generic;\n\nnamespace Chapter.EventBus\n{\n    public class RaceEventBus\n    {\n        private static readonly \n            IDictionary<RaceEventType, UnityEvent> \n            Events = new Dictionary<RaceEventType, UnityEvent>();\n\n        public static void Subscribe\n            (RaceEventType eventType, UnityAction listener) {\n\n            UnityEvent thisEvent;\n\n            if (Events.TryGetValue(eventType, out thisEvent)) {\n                thisEvent.AddListener(listener);\n            }\n            else {\n                thisEvent = new UnityEvent();\n                thisEvent.AddListener(listener);\n                Events.Add(eventType, thisEvent);\n            }\n        }\n\n        public static void Unsubscribe\n            (RaceEventType type, UnityAction listener) {\n\n            UnityEvent thisEvent;\n\n            if (Events.TryGetValue(type, out thisEvent)) {\n                thisEvent.RemoveListener(listener);\n            }\n        }\n\n        public static void Publish(RaceEventType type) {\n\n            UnityEvent thisEvent;\n\n            if (Events.TryGetValue(type, out thisEvent)) {\n                thisEvent.Invoke();\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\nnamespace Chapter.EventBus\n{\n    public class CountdownTimer : MonoBehaviour\n    {\n        private float _currentTime;\n        private float duration = 3.0f;\n\n        void OnEnable() {\n            RaceEventBus.Subscribe(\n                RaceEventType.COUNTDOWN, StartTimer);\n        }\n\n        void OnDisable() {\n            RaceEventBus.Unsubscribe(\n                RaceEventType.COUNTDOWN, StartTimer);\n        }\n\n        private void StartTimer() {\n            StartCoroutine(Countdown());\n        }\n\n        private IEnumerator Countdown() {\n            _currentTime = duration;\n\n            while (_currentTime > 0) {\n                yield return new WaitForSeconds(1f);\n                _currentTime--;\n            }\n\n            RaceEventBus.Publish(RaceEventType.START);\n        }\n\n        void OnGUI() {\n            GUI.color = Color.blue;\n            GUI.Label(\n                new Rect(125, 0, 100, 20), \n                \"COUNTDOWN: \" + _currentTime);\n        }\n    }\n}\n```", "```cs\nvoid OnEnable() {\n    RaceEventBus.Subscribe(\n        RaceEventType.COUNTDOWN, StartTimer);\n}\n\nvoid OnDisable() {\n    RaceEventBus.Unsubscribe(\n        RaceEventType.COUNTDOWN, StartTimer);\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.EventBus \n{\n    public class BikeController : MonoBehaviour \n    {\n        private string _status;\n\n        void OnEnable() {\n             RaceEventBus.Subscribe(\n                 RaceEventType.START, StartBike);\n\n             RaceEventBus.Subscribe(\n                 RaceEventType.STOP, StopBike);\n        }\n\n        void OnDisable() {\n             RaceEventBus.Unsubscribe(\n                 RaceEventType.START, StartBike);\n\n             RaceEventBus.Unsubscribe(\n                 RaceEventType.STOP, StopBike);\n        }\n\n        private void StartBike() {\n             _status = \"Started\";\n        }\n\n        private void StopBike() {\n             _status = \"Stopped\";\n        }\n\n        void OnGUI() {\n             GUI.color = Color.green;\n             GUI.Label(\n                 new Rect(10, 60, 200, 20), \n                 \"BIKE STATUS: \" + _status);\n         }\n     }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.EventBus\n{\n    public class HUDController : MonoBehaviour\n    {\n        private bool _isDisplayOn;\n\n        void OnEnable() {\n            RaceEventBus.Subscribe(\n                RaceEventType.START, DisplayHUD);\n        }\n\n        void OnDisable() {\n            RaceEventBus.Unsubscribe(\n                RaceEventType.START, DisplayHUD);\n        }\n\n        private void DisplayHUD() {\n            _isDisplayOn = true;\n        }\n\n        void OnGUI() {\n            if (_isDisplayOn)\n            {\n                if (GUILayout.Button(\"Stop Race\"))\n                {\n                    _isDisplayOn = false;\n                    RaceEventBus.Publish(RaceEventType.STOP);\n                }\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.EventBus\n{\n    public class ClientEventBus : MonoBehaviour\n    {\n        private bool _isButtonEnabled;\n\n        void Start()\n        {\n            gameObject.AddComponent<HUDController>();\n            gameObject.AddComponent<CountdownTimer>();\n            gameObject.AddComponent<BikeController>();\n\n            _isButtonEnabled = true;\n        }\n\n        void OnEnable()\n        {\n            RaceEventBus.Subscribe(\n                RaceEventType.STOP, Restart);\n        }\n\n        void OnDisable()\n        {\n            RaceEventBus.Unsubscribe(\n                RaceEventType.STOP, Restart);\n        }\n\n        private void Restart()\n        {\n            _isButtonEnabled = true;\n        }\n\n        void OnGUI()\n        {\n            if (_isButtonEnabled)\n            {\n                if (GUILayout.Button(\"Start Countdown\"))\n                {\n                    _isButtonEnabled = false;\n                    RaceEventBus.Publish(RaceEventType.COUNTDOWN);\n                }\n            }\n        }\n    }\n}\n```"]