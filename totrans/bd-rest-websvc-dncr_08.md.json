["```cs\nnamespace Chap08_02.Models\n{\n  public class Product\n  {\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Image { get; set; }\n    public decimal Price { get; set; }\n    public Guid CategoryId { get; set; }\n    public virtual Category Category { get; set; }\n  }\n}\n```", "```cs\n\"ConnectionStrings\": \n{\n  \"ProductConnection\": \"Data Source=.;Initial\n  Catalog=ProductsDB;Integrated  \n  Security=True;MultipleActiveResultSets=True\"\n}\n```", "```cs\nnamespace Chap08_02.Persistence\n{\n  public interface IProductRepository\n  {\n    void Add(Product product);\n    IEnumerable<Product> GetAll();\n    IEnumerable<Product> GetByProduct(string id);\n    IEnumerable<Product> GetBy(string productName);\n    void Remove(string id);\n    void Update(Product product);\n  }\n}\n```", "```cs\npublic IEnumerable<Product> GetByProduct(string id) => _context.Products.FromSql(\"SELECT * FROM dbo.Products WHERE id=\"+ id).Include(p => p.Category)\n    .ToList();\n```", "```cs\nservices.AddScoped<IProductRepository, ProductRepository>();\nservices.AddDbContext<ProductContext>\n(\n  o => o.UseSqlServer\n  (\n    Configuration.GetConnectionString(\"ProductConnection\")\n  )\n);\nservices.AddSwaggerGen\n(\n  swagger =>\n  {\n    swagger.SwaggerDoc(\"v1\", new Info { Title = \"Product APIs\",  \n    Version = \"v1\" \n  });\n});\n```", "```cs\nSELECT [p].[Id], [p].[CategoryId], [p].[Description], [p].[Image], [p].[Name],\n [p].[Price],[p.Category].[Id],[p.Category].[Description], [p.Category].[Name]\nFROM (SELECT * FROM dbo.Products WHERE id='4D261E4A-A657-4ADD-A0F6-DDE6E1464D55' or 1=1) AS [p] \nINNER JOIN [Categories] AS [p.Category] ON [p].[CategoryId] = [p.Category].[Id]\n```", "```cs\npublic IEnumerable<Product> GetByProduct(string id) => _context.Products \n    .FromSql(\"SELECT * FROM dbo.Products WHERE id={0}\", id)\n    .Include(p => p.Category)\n    .ToList();\n```", "```cs\npublic class AuthRequest\n{\n  public string UserName { get; set; }\n  public string Password { get; set; }\n}\n```", "```cs\n[AllowAnonymous]\n[HttpPost]\npublic IActionResult RequestToken([FromBody] AuthRequest request)\n{\n  //Kept it simple for demo purpose\n  var user = _loginRepository.GetBy(request.UserName, \n  request.Password);\n  if (user == null) return BadRequest(\"Invalid credentials.\");\n  var token = new TokenUtility().GenerateToken\n  (\n    user.UserName, \n    user.Id.ToString());\n    return Ok(new\n    {\n      token = new JwtSecurityTokenHandler().WriteToken(token)\n    }\n  );\n}\n```", "```cs\npublic JwtSecurityToken GenerateToken(string userName, string userId)\n{\n  var claims = new[]\n  {\n    new Claim(JwtRegisteredClaimNames.Sub, userName),\n    new Claim(JwtRegisteredClaimNames.Jti, userId)\n  };\n  var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(JwtKey));\n  var creds = new SigningCredentials(key, \n  SecurityAlgorithms.HmacSha256);\n  var token = new JwtSecurityToken(TokenIssuer,\n  TokenIssuer,\n  claims,\n  expires: DateTime.Now.AddMinutes(30),\n  signingCredentials: creds);\n  return token;\n}\n```", "```cs\nservices.AddAuthentication()\n.AddJwtBearer(cfg =>\n{\n  cfg.RequireHttpsMetadata = false;\n  cfg.SaveToken = true;\n  cfg.TokenValidationParameters = new TokenValidationParameters()\n  {\n    ValidIssuer = \"gaurav-arora.com\",\n    ValidAudience = \"gaurav-arora.com\",\n    IssuerSigningKey = new \n    SymmetricSecurityKey\n    (\n      Encoding.UTF8.GetBytes(\"abcdefghijklmnopqrstuvwxyz\")\n    )\n  };\n});\n```", "```cs\npublic class ProductViewModel\n{\n  public Guid ProductId { get; set; }\n  [Required]\n  public string ProductName { get; set; }\n  [Required]\n  public string ProductDescription { get; set; }\n  public string ProductImage { get; set; }\n  [Required]\n  public decimal ProductPrice { get; set; }\n  [Required]\n  public Guid CategoryId { get; set; }\n  public string CategoryName { get; set; }\n  public string CategoryDescription { get; set; }\n}\n```", "```cs\n[HttpPost]\n[Route(\"addproduct\")]\npublic IActionResult Post([FromBody] ProductViewModel productvm)\n{\n  if (productvm == null)\n  return BadRequest();\n  var productModel = ToProductModel(productvm);\n  _productRepository.Add(productModel);\n  return StatusCode(201, Json(true));\n}\n```", "```cs\n[Required(ErrorMessage = \"Product Name shoud not be empty.\")]\npublic string ProductName { get; set; }\n```", "```cs\nnamespace Chap08_04.Filters\n{\n  public class ValidateInputAttribute : ActionFilterAttribute\n  {\n    public override void OnActionExecuting(ActionExecutingContext \n    context)\n    {\n      if (!context.ModelState.IsValid)\n      context.Result = new BadRequestObjectResult\n      (context.ModelState);\n    }\n  }\n}\n```", "```cs\n[HttpPost]\n[Route(\"addproduct\")]\n[ValidateInput]\npublic IActionResult Post([FromBody] ProductViewModel productvm)\n{\n  if (productvm == null)\n  return BadRequest();\n  var productModel = ToProductModel(productvm);\n  _productRepository.Add(productModel);\n  return StatusCode(201, Json(true));\n}\n```", "```cs\nservices.AddMvc(option =>\n{\n  option.Filters.Add(typeof(ValidateInputAttribute));\n});\n```"]