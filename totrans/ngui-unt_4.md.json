["```cs\n//Enum to define which type of tooltip must be shown\npublic enum Type\n{\n  Bomb,\n  Time\n}\n\n//Declare the Type enum variable\npublic Type type;\n```", "```cs\n//When a Tooltip event is triggered on this object\nvoid OnTooltip(bool state)\n{\n  //If state is true, create a new Tooltip depending on the type\n  if(state)\n    UITooltip.ShowText(Localization.instance.Get(type.ToString() + \"Tooltip\"));\n  //If state is false, hide tooltip by setting an empty string\n  else\n  UITooltip.ShowText(\"\");\n}\n```", "```cs\nBombTooltip = Explodes all\\nenemies at once\nTimeTooltip = Slows Time\\nfor 10 seconds\n```", "```cs\nBombTooltip = Détruit tous les ennemis d'un coup\nTimeTooltip = Ralentit le temps pour 10 secondes\n```", "```cs\n    void Start () \n    {\n      //First, set the Menu's Y position to be out of screen:\n      this.transform.localPosition = new Vector3(0,1080,0);\n      //Start a TweenPosition of 1 second towards {0,0,0}:\n      TweenPosition.Begin(this.gameObject, 1, Vector3.zero);\n    }\n    ```", "```cs\nvoid Start () \n{\n  //First, set the Menu's Y position to be out of screen\n  this.transform.localPosition = new Vector3(0, 1080, 0);\n  //Start a TweenPosition of 1.5 second towards {0,0,0}\n  TweenPosition tween = TweenPosition.Begin(this.gameObject, 1.5f, Vector3.zero);\n  //Add a delay to our Tween\n  tween.delay = 1f;\n  //Add an easing in and out method to our Tween\n  tween.method = UITweener.Method.EaseInOut;\n}\n```", "```cs\n//Create an enum to define Notification Type\npublic enum Type\n{\n  Nickname,\n  Power\n}\n//Declare necessary variables\npublic UILocalize loc;\npublic Type type;\n//Store the Notification to access it in static methods\npublic static NotificationManager instance;\n```", "```cs\nvoid Awake()\n{\n  //Set the static instance to this NotificationManager\n  instance = this;\n  //Deactivate Notification GameObject on awake\n  gameObject.SetActive(false);\n}\n```", "```cs\nvoid OnEnable () \n{\n  //Start a TweenScale of 0.5 second towards {1, 1, 1}\n  TweenScale tween = TweenScale.Begin(this.gameObject, 0.5f, new Vector3(1,1,1));\n  //Add an easing in and out method to our Tween\n  tween.method = UITweener.Method.EaseInOut;\n  //Set the Localize key to TypeName + \"Notification\"\n  loc.key = type.ToString() + \"Notification\"; \n  //Force Update the UILocalize with new key\n  loc.Localize();\n}\n```", "```cs\npublic void Show(Type notificationType, float duration)\n{\n  //If there is no current Notification\n  if(!gameObject.activeInHierarchy)\n  {\n    //Set the asked Notification type\n    type = notificationType;\n    //Enable our Notification on scene\n    gameObject.SetActive(true);\n    //Start Couroutine to remove in asked duration\n    StartCoroutine(Remove(duration));\n  }\n}\n```", "```cs\npublic IEnumerator Remove(float duration)\n{\n  //Wait for the Notification display duration \n  yield return new WaitForSeconds(duration);\n  //Start the TweenScale to disappear\n  TweenScale.Begin(gameObject, 0.5f, new Vector3(0,0,1));\n  //Wait for 0.5s, the duration of the TweenScale\n  yield return new WaitForSeconds(0.5f);\n  //Deactivate the Notification GameObject\n  gameObject.SetActive(false);\n}\n```", "```cs\nNicknameNotification = [AAFFFF]Please Enter a [00FFAA]Nickname[AAFFFF] before you continue!\nPowerNotification = [AAFFFF]Please Select a [00FFAA]Power[AAFFFF] before you continue!\n```", "```cs\nNicknameNotification = [AAFFFF]Merci d'entrer un [00FFAA]Pseudo[AAFFFF] avant de continuer !\nPowerNotification = [AAFFFF]Merci de sélectionner un [00FFAA]Power-Up[AAFFFF] avant de continuer !\n```", "```cs\npublic UIInput nicknameInput;\n```", "```cs\nvoid OnClick() \n{\n  //If the nickname input is empty...\n  if(string.IsNullOrEmpty(nicknameInput.value))\n  {\n    //...Show a Nickname error notification for 2.5 sec\n    NotificationManager.instance.Show(NotificationManager.Type.Nickname, 2.5f);\n  }\n  //If there's a nickname but no Power is selected...\n  else if(GameManager.SelectedPower == Power.Type.None)\n  {\n    //...Show a Power error notification for 2.5 sec...\n    NotificationManager.instance.Show(NotificationManager.Type.Power, 2.5f);\n  }\n  //If there is a nickname AND a Power selected...\n  else\n  {\n    //... Load Game Scene\n    Application.LoadLevel(\"Game\");\n  }\n}\n```", "```cs\n//Save the Nickname to PlayerPrefs before launch\nPlayerPrefs.SetString(\"Nickname\", nicknameInput.value);\n```", "```cs\nvoid CloseMenu()\n{\n  //Tween the menu's scale to zero\n  TweenScale.Begin(this.gameObject, 0.5f, Vector3.zero);\n}\n```", "```cs\n        //Call the exit function in 0.5s\n        Invoke(\"QuitNow\", 0.5f);\n        ```", "```cs\n    void QuitNow()\n    {\n      Application.Quit();\n    }\n    ```", "```cs\n    public GameObject menuContainer;\n    ```", "```cs\n        menuContainer.SendMessage(\"CloseMenu\");\n        Invoke(\"LaunchNow\", 0.5f);\n        ```", "```cs\n    void LaunchNow()\n    {\n      Application.LoadLevel(levelName);\n    }\n    ```"]