["```cs\nusing UnityEngine;\n\nnamespace Classic\n{\n  public class Rotator : MonoBehaviour\n  {\n\n    public float rotationSpeed;\n\n    void Update()\n    {\n      transform.Rotate(0f, rotationSpeed * Time.deltaTime, 0f);\n    }\n  }\n}\n```", "```cs\nusing UnityEngine;\nusing System;\n\nnamespace Classic { \n\n    public class ClassicCubeManager : MonoBehaviour\n    {\n\n        #region COMMON_GAME_MANAGER_DATA\n        public float cubeSpacing = 0.1f;\n        public int width = 10;\n        public int height = 10;\n\n        public GameObject cubePrefab;\n        #endregion\n\n        void Start()\n        {\n            SpawnCubes();\n\n        }\n\n        private void SpawnCubes()\n        {\n            Debug.Log(String.Format(\"Spawning {0} cubes\", (width / cubeSpacing) * (height / cubeSpacing)));\n            Vector3 position = new Vector3();\n            while (position.x < width)\n            {\n                while (position.y < height) {\n                    var newCube = GameObject.Instantiate(cubePrefab);\n                    newCube.transform.position = position;\n                    newCube.GetComponent<Rotator>().rotationSpeed = UnityEngine.Random.Range(25.0f, 50.0f);\n                    position = new Vector3(position.x, position.y + cubeSpacing, 0f);\n                }\n                position = new Vector3(position.x + cubeSpacing, 0f, 0f);\n            }\n        }\n\n    }\n} \n```", "```cs\nusing Unity.Collections;\nusing Unity.Jobs;\nusing UnityEngine;\n\npublic struct SimpleJob : IJob\n{\n    // Put here a bunch of data...\n    public float number;\n\n    public NativeArray<float> data;\n\n    // Write your Execute() function.\n    public void Execute()\n    {\n        data[0] += number;\n    }\n}\n```", "```cs\nusing Unity.Collections;\nusing Unity.Jobs;\nusing UnityEngine;\n\npublic class SimpleJobRunner : MonoBehaviour\n{\n\n    public float numberToAdd = 5;\n\n    private NativeArray<float> theData;\n\n    private JobHandle simpleJobHandle;\n\n    void Start()\n    {\n        theData = new NativeArray<float>(1, Allocator.Persistent);\n        theData[0] = 2;\n\n        SimpleJob simpleJob = new SimpleJob\n        {\n            number = numberToAdd,\n            data = theData\n        };\n\n        simpleJobHandle = simpleJob.Schedule();\n\n        JobHandle.ScheduleBatchedJobs();\n\n        simpleJobHandle.Complete();\n\n        if (simpleJobHandle.IsCompleted)\n        {\n            Debug.Log(simpleJob.data[0]);\n        }\n\n                theData.Dispose();\n    }\n}\n```", "```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing Unity.Collections;\nusing UnityEngine;\nusing UnityEngine.Jobs;\n\nnamespace JobSystem\n{\n\n    public struct RotatorJob : IJobParallelForTransform\n    {\n\n        [ReadOnly]\n        public NativeList<float> speeds;\n\n        [ReadOnly]\n        public float deltaTime;\n\n        public void Execute(int index, TransformAccess transform)\n        {\n            Vector3 currentRotation = transform.rotation.eulerAngles;\n            currentRotation.y += speeds[index] * deltaTime;\n            transform.rotation = Quaternion.Euler(currentRotation);\n        }\n    }\n}\n```", "```cs\nnamespace JobSystem\n{\n    public class JobCubeManager : MonoBehaviour\n    {\n\n        #region COMMON_GAME_MANAGER_DATA\n        public float cubeSpacing = 0.1f;\n        public int width = 10;\n        public int height = 10;\n\n        public GameObject cubePrefab;\n        #endregion\n\n        TransformAccessArray transformAccessArray;\n        Unity.Jobs.JobHandle jobHandle;\n        NativeList<float> speeds;\n\n                ...\n```", "```cs\n        void Start()\n        {\n            transformAccessArray = new TransformAccessArray(0, -1);\n            speeds = new NativeList<float>(1, Allocator.Persistent);\n            SpawnCubes();\n        }\n```", "```cs\n        private void SpawnCubes()\n        {\n            Debug.Log(String.Format(\"Spawning {0} cubes\", (width / cubeSpacing) * (height / cubeSpacing)));\n            Vector3 position = new Vector3();\n            while (position.x < width)\n            {\n                while (position.y < height)\n                {\n                    var newCube = Instantiate(cubePrefab);\n                    newCube.transform.position = position;\n                    position = new Vector3(position.x, position.y + cubeSpacing, 0f);\n                    transformAccessArray.Add(newCube.transform);\n                    speeds.Add(UnityEngine.Random.Range(25.0f, 50.0f));\n                }\n                position = new Vector3(position.x + cubeSpacing, 0f, 0f);\n            }\n\n        }\n```", "```cs\n        void Update()\n        {\n            jobHandle.Complete();\n\n            if (jobHandle.IsCompleted)\n            {\n                var rotatorJob = new RotatorJob()\n                {\n                    deltaTime = Time.deltaTime,\n                    speeds = speeds\n                };\n\n                jobHandle = rotatorJob.Schedule(transformAccessArray);\n                JobHandle.ScheduleBatchedJobs();\n            }\n\n        }\n```", "```cs\n    [Serializable]\n    public struct RotationSpeed : IComponentData\n    {\n        public float Value;\n    }\n```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using Unity.Entities;\n    using System;\n    using Unity.Mathematics;    \n\n    [RequiresEntityConversion]\n    public class RotationSpeedAuthoring : MonoBehaviour, IConvertGameObjectToEntity\n    {\n\n        public float rotationSpeed = 35f;\n\n        public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n        {\n            var data = new RotationSpeed { Value = math.radians(rotationSpeed) }; // Convert to speed in radians\n            dstManager.AddComponentData(entity, data);\n        }\n    }\n```", "```cs\nusing System;\nusing UnityEngine;\nusing Unity.Entities;\nusing Unity.Transforms;\nusing Unity.Mathematics;\n\nnamespace ECSJob\n{\n    public class ECSJobManager : MonoBehaviour\n    {\n\n        #region COMMON_GAME_MANAGER_DATA\n        public float cubeSpacing = 0.1f;\n        public int width = 10;\n        public int height = 10;\n\n        public GameObject cubePrefab;\n        #endregion\n\n        EntityManager entityManager;\n\n        void Start()\n        {\n            entityManager = World.Active.EntityManager;\n            SpawnCubes();\n        }\n\n        private void SpawnCubes()\n        {\n            int amount = Mathf.FloorToInt(width / cubeSpacing) * Mathf.FloorToInt(height / cubeSpacing);\n            Debug.Log(String.Format(\"Spawning {0} cubes\", amount));\n\n            Vector3 position = new Vector3();\n\n            var entityPrefab = GameObjectConversionUtility.ConvertGameObjectHierarchy(cubePrefab, World.Active);\n\n            while (position.x < width)\n            {\n                while (position.y < height)\n                {\n                    var instance = entityManager.Instantiate(entityPrefab);\n\n                    position = new Vector3(position.x, position.y + cubeSpacing, 0f);\n                    entityManager.SetComponentData(instance, new Translation() { Value = position });\n                    entityManager.SetComponentData(instance, new RotationSpeed() { Value = math.radians(UnityEngine.Random.Range(25.0f, 50.0f)) });\n                }\n                position = new Vector3(position.x + cubeSpacing, 0f, 0f);\n            }\n\n        }\n\n    }\n}\n```", "```cs\nvar entityPrefab = GameObjectConversionUtility.ConvertGameObjectHierarchy(cubePrefab, World.Active);\n```", "```cs\nvar instance = entityManager.Instantiate(entityPrefab);\n```", "```cs\nentityManager.SetComponentData(instance, new Translation() { Value = position });\nentityManager.SetComponentData(instance, new RotationSpeed() { Value = math.radians(UnityEngine.Random.Range(25.0f, 50.0f)) });\n```", "```cs\npublic struct RotatorJob : IJobForEach<Rotation, RotationSpeed>\n        {\n\n            [ReadOnly]\n            public float deltaTime;\n\n            public void Execute(ref Rotation rotation, [ReadOnly] ref RotationSpeed rotationSpeed)\n            {\n                rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), rotationSpeed.Value * deltaTime));\n            }\n        }\n```", "```cs\n    public class RotationSystem : JobComponentSystem\n    {\n        protected override JobHandle OnUpdate(JobHandle inputDeps)\n        {\n            RotatorJob rotatorJob = new RotatorJob()\n            {\n                deltaTime = Time.deltaTime\n            };\n\n            return rotatorJob.Schedule(this, inputDeps);\n        }\n    }\n```", "```cs\n[BurstCompile]\npublic struct RotatorJob : IJobForEach<Rotation, RotationSpeed>\n        {\n\n            [ReadOnly]\n            public float deltaTime;\n\n            public void Execute(ref Rotation rotation, [ReadOnly] ref RotationSpeed rotationSpeed)\n            {\n                rotation.Value = math.mul(math.normalize(rotation.Value), quaternion.AxisAngle(math.up(), rotationSpeed.Value * deltaTime));\n            }\n        }\n```"]