["```cs\n    using CommunityToolkit.Maui;\n    using Microsoft.Extensions.Logging;\n    namespace SticksAndStones.App\n    {\n        public static class MauiProgram\n        {\n            public static MauiApp CreateMauiApp()\n            {\n                var builder = MauiApp.CreateBuilder();\n                builder\n                    .UseMauiApp<App>()\n                    .ConfigureFonts(fonts =>\n                    {\n                        fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                        fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                    })\n                    .UseMauiCommunityToolkit();\n    #if DEBUG\n                builder.Logging.AddDebug();\n    #endif\n                return builder.Build();\n            }\n        }\n    }\n    ```", "```cs\n    private const string LastPlayerKey = nameof(LastPlayerKey);\n    ```", "```cs\n    private const string ServerUrlKey = nameof(ServerUrlKey);\n    ```", "```cs\n    #if DEBUG && ANDROID\n        private const string ServerUrlDefault = \"http://10.0.2.2:7071/api\";\n    #else\n        private const string ServerUrlDefault = \"http://localhost:7071/api\";\n    #endif\n    ServerlUrlDefault value for Android devices. The 10.0.2.2 IP address is a special value used by the Android emulators to be able to access the host computer’s localhost address. This is very useful when testing the app using the Azurite development environment for Azure Functions.\n    ```", "```cs\n    public string ServerUrl\n    {\n        get => Preferences.ContainsKey(ServerUrlKey) ?\n                    Preferences.Get(ServerUrlKey, ServerUrlDefault) :\n                    ServerUrlDefault;\n        set => Preferences.Set(ServerUrlKey, value);\n    }\n    ```", "```cs\n    using SticksAndStones.Models;\n    using System.Text.Json;\n    ```", "```cs\n    public Player LastPlayer\n    {\n        get\n        {\n            if (Preferences.ContainsKey(LastPlayerKey))\n            {\n                var playerJson = Preferences.Get(LastPlayerKey, string.Empty);\n                return JsonSerializer.Deserialize<Player>(playerJson, new JsonSerializerOptions(JsonSerializerDefaults.Web)) ?? new();\n            }\n            return new();\n        }\n        set => Preferences.Set(LastPlayerKey, JsonSerializer.Serialize(value, new JsonSerializerOptions(JsonSerializerDefaults.Web)));\n    }\n    ```", "```cs\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            });\n    #if DEBUG\n            builder.Logging.AddDebug();\n    #endif\n        builder.Services.AddSingleton<Services.Settings>();\n            return builder.Build();\n        }\n    ```", "```cs\n#if DEBUG\n        builder.Logging.AddDebug();       \n        builder.Services.AddLogging(configure =>\n        {\n            configure.AddDebug();\n        });\n#endif\n        builder.Services.AddSingleton<Services.Settings>();\n        return builder.Build();\n```", "```cs\nusing System.Text.Json.Serialization;\nnamespace SticksAndStones;\npublic record AsyncError\n{\n    [JsonPropertyName(\"message\")]\n    public string Message { get; set; }\n}\npublic record AsyncExceptionError : AsyncError\n{\n    [JsonPropertyName(\"innerException\")]\n    public string InnerException { get; set; }\n}\n```", "```cs\nusing System.Runtime.CompilerServices;\nnamespace SticksAndStones;\n// AsyncLazy<T>, Microsoft, Stephen Toub, .NET Parallel Programming Blog, https://devblogs.microsoft.com/pfxteam/asynclazyt/\npublic class AsyncLazy<T> : Lazy<Task<T>>\n{\n    public AsyncLazy(Func<T> valueFactory) :\n        base(() => Task.Factory.StartNew(valueFactory))\n    { }\n    public AsyncLazy(Func<Task<T>> taskFactory) :\n        base(() => Task.Factory.StartNew(() => taskFactory()).Unwrap())\n    { }\n    public TaskAwaiter<T> GetAwaiter() { return Value.GetAwaiter(); }\n}\n```", "```cs\n    public sealed class ServiceConnection : IDisposable\n    ```", "```cs\n    using Microsoft.AspNetCore.Http.Connections.Client;\n    using Microsoft.AspNetCore.SignalR.Client;\n    using Microsoft.Extensions.Logging;\n    using SticksAndStones.Models;\n    using System.Net;\n    using System.Net.Http.Json;\n    using System.Text.Json;\n    ```", "```cs\n    private readonly ILogger log;\n    private readonly HttpClient httpClient;\n    private readonly JsonSerializerOptions serializerOptions;\n    ```", "```cs\n    public AsyncLazy<HubConnection> Hub { get; private set; }\n    ```", "```cs\n    public ServiceConnection(ILogger<ServiceConnection> logger, Settings settings)\n    {\n        httpClient = new()\n        {\n            BaseAddress = new Uri(settings.ServerUrl)\n        };\n        httpClient.DefaultRequestHeaders.Accept.Add(new(\"application/json\"));\n        serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web);\n        log = logger;\n    }\n    ```", "```cs\n    public void Dispose()\n    {\n        httpClient?.Dispose();\n        Hub?.Value?.Dispose();\n        GC.SuppressFinalize(this);\n    }\n    ```", "```cs\n    builder.Services.AddSingleton<Services.Settings>();\n    builder.Services.AddSingleton<Services.ServiceConnection>();\n    return builder.Build();\n    ```", "```cs\n    public void ConnectHub(ConnectionInfo config)\n    {\n        Hub = new(async () =>\n        {\n            var connectionBuilder = new HubConnectionBuilder();\n            connectionBuilder.WithUrl(config.Url, (HttpConnectionOptions obj) =>\n            {\n                obj.AccessTokenProvider = async () => await Task.FromResult(config.AccessToken);\n            });\n            connectionBuilder.WithAutomaticReconnect();\n            var hub = connectionBuilder.Build();\n            await hub.StartAsync();\n            return hub;\n        });\n    }\n    ```", "```cs\nUriBuilder GetUriBuilder(Uri uri, Dictionary<string, string> parameters)\n=> new(uri)\n{\n    Query = string.Join(\"&\",\n    parameters.Select(kvp =>\n            $\"{kvp.Key}={kvp.Value}\"))\n};\nasync ValueTask<AsyncError?> GetError(HttpResponseMessage responseMessage, Stream content)\n{\n    AsyncError? error;\n    if (responseMessage.StatusCode == HttpStatusCode.Unauthorized)\n    {\n        log.LogError(\"Unauthorized request {@Uri}\", responseMessage.RequestMessage?.RequestUri);\n        return new()\n        {\n            Message = \"Unauthorized request.\"\n        };\n    }\n    try\n    {\n        error = await JsonSerializer.DeserializeAsync<AsyncError>(content, serializerOptions);\n    }\n    catch (Exception e)\n    {\n        error = new AsyncExceptionError()\n        {\n            Message = e.Message,\n            InnerException = e.InnerException?.Message,\n        };\n    }\n    log.LogError(\"{@Error} {@Message} for {@Uri}\", responseMessage.StatusCode, error?.Message, responseMessage?.RequestMessage?.RequestUri);\n    return error;\n}\n```", "```cs\npublic async Task<(T Result, AsyncError Exception)> GetAsync<T>(Uri uri, Dictionary<string, string> parameters)\n{\n    var builder = GetUriBuilder(uri, parameters);\n    var fullUri = builder.ToString();\n    log.LogDebug(\"{@ObjectType} Get REST call @{RestUrl}\", typeof(T).Name, fullUri);\n    try\n    {\n        var responseMessage = await httpClient.GetAsync(fullUri);\n        log.LogDebug(\"Response {@ResponseCode} for {@RestUrl}\", responseMessage.StatusCode, fullUri);\n        if (responseMessage.IsSuccessStatusCode)\n        {\n            try\n            {\n                var content = await responseMessage.Content.ReadFromJsonAsync<T>();\n                log.LogDebug(\"Object of type {@ObjectType} parsed for {@RestUrl}\", typeof(T).Name, fullUri);\n                return (content, null);\n            }\n            catch (Exception e)\n            {\n                log.LogError(\"Error {@ErrorMessage} for when parsing ${ObjectType} for {@RestUrl}\", e.Message, typeof(T).Name, fullUri);\n                return (default, new AsyncExceptionError()\n                {\n                    InnerException = e.InnerException?.Message,\n                    Message = e.Message\n                });\n            }\n        }\n        log.LogDebug(\"Returning error for @{RestUrl}\", fullUri);\n        return (default, await GetError(responseMessage, await responseMessage.Content.ReadAsStreamAsync()));\n    }\n    catch (Exception e)\n    {\n        log.LogError(\"Error {@ErrorMessage} for REST call ${ResUrl}\", e.Message, fullUri);\n        // The service might not be happy with us, we might have connection issues etc..\n        return (default, new AsyncExceptionError()\n        {\n            InnerException = e.InnerException?.Message,\n            Message = e.Message\n        });\n    }\n}\n```", "```cs\npublic async Task<(T Result, AsyncError Exception)> PostAsync<T>(Uri uri, object parameter)\n{\n    log.LogDebug(\"{@ObjectType} Post REST call @{RestUrl}\", typeof(T).Name, uri);\n    try\n    {\n        var responseMessage = await httpClient.PostAsJsonAsync(uri, parameter, serializerOptions);\n        log.LogDebug(\"Response {@ResponseCode} for {@RestUrl}\", responseMessage.StatusCode, uri);\n        await using var content = await responseMessage.Content.ReadAsStreamAsync();\n        if (responseMessage.IsSuccessStatusCode)\n        {                \n            if(string.IsNullOrEmpty(await.responseMessage.Content.ReadAsStringAsync()))\n                return (default, null);\n            try\n            {\n                log.LogDebug(\"Parse {@ObjectType} SUCCESS for {@RestUrl}\", typeof(T).Name, uri);\n                var result = await responseMessage.Content.ReadFromJsonAsync<T>();\n                log.LogDebug(\"Object of type {@ObjectType} parsed for {@RestUrl}\", typeof(T).Name, uri);\n                return (result, null);\n            }\n            catch (Exception e)\n            {\n                log.LogError(\"Error {@ErrorMessage} for when parsing ${ObjectType} for {@RestUrl}\", e.Message, typeof(T).Name, uri);\n                return (default, new AsyncExceptionError()\n                {\n                    InnerException = e.InnerException?.Message,\n                    Message = e.Message\n                });\n            }\n        }\n        log.LogDebug(\"Returning error for @{RestUrl}\", uri);\n        return (default, await GetError(responseMessage, content));\n    }\n    catch (Exception e)\n    {\n        log.LogError(\"Error {@ErrorMessage} for REST call ${ResUrl}\", e.Message, uri);\n        // The service might not be happy with us, we might have connection issues etc..\n        return (default, new AsyncExceptionError()\n        {\n            InnerException = e.InnerException?.Message,\n            Message = e.Message\n        });\n    }\n}\n```", "```cs\n    public sealed class GameService : IDisposable\n    ```", "```cs\n    using System.Collections.ObjectModel;\n    using CommunityToolkit.Mvvm.Messaging;\n    using Microsoft.AspNetCore.SignalR.Client;\n    using SticksAndStones.Messages;\n    using SticksAndStones.Models;\n    ```", "```cs\n    private readonly ServiceConnection service;\n    private readonly Settings settings;\n    public GameService(Settings settings, ServiceConnection service)\n    {\n        this.service = service;\n        this.settings = settings;\n    }\n    GameService class. .NET MAUI will provide the Settings and ServiceConnection instances through dependency injection.\n    ```", "```cs\n    public void Dispose()\n    {\n        service.Dispose();\n        GC.SuppressFinalize(this);\n    }\n    ```", "```cs\n    #if DEBUG\n                builder.Logging.AddDebug();\n    #endif\n                builder.Services.AddSingleton<Services.Settings>();\n               builder.Services.AddSingleton<Services.ServiceConnection>();\n                builder.Services.AddSingleton<Services.GameService>();\n                return builder.Build();\n    ```", "```cs\n    public sealed class GameService : IDisposable\n    {\n        private readonly SemaphoreSlim semaphoreSlim = new(1, 1);\n        private readonly ServiceConnection service;\n    ```", "```cs\n    private readonly Settings settings;\n    public Player CurrentPlayer { get; private set; } = new Player() { Id = Guid.Empty, GameId = Guid.Empty };\n    ```", "```cs\n    public ObservableCollection<Player> Players { get; } = new();\n    ```", "```cs\n    public bool IsConnected { get; private set; }\n    ```", "```cs\n    public async Task<Player> Connect(Player player)\n    {\n    }\n    ```", "```cs\n    await semaphoreSlim.WaitAsync();\n    ```", "```cs\n    try\n    {\n    }\n    finally\n    {\n        semaphoreSlim.Release();\n    }\n    return CurrentPlayer;\n    ```", "```cs\n    CurrentPlayer = player;\n    var (response, error) = await service.PostAsync<ConnectResponse>(new($\"{settings.ServerUrl}/Connect\"), new ConnectRequest(player));\n    if (error is null)\n    {\n        service.ConnectHub(response.ConnectionInfo);\n        response.Players.ForEach(Players.Add);\n        CurrentPlayer = response.Player;\n        IsConnected = true;\n    }\n    else\n    {\n        WeakReferenceMessenger.Default.Send<ServiceError>(new(error));\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.Messaging.Messages;\n    namespace SticksAndStones.Messages;\n    internal class ServiceError : ValueChangedMessage<AsyncError>\n    {\n        public ServiceError(AsyncError error) : base(error)\n        {\n        }\n    }\n    ```", "```cs\n    public void Dispose()\n    {\n        semaphoreSlim.Release();\n        semaphoreSlim.Dispose();\n        service.Dispose();\n        GC.SuppressFinalize(this);\n    }\n    ```", "```cs\n    public async Task RefreshPlayerList()\n    {\n        await semaphoreSlim.WaitAsync();\n        try\n        {\n            var getAllPlayers = service.GetAsync<GetAllPlayersResponse>(new($\"{settings.ServerUrl}/Players/GetAll\"), new Dictionary<string, string> { { \"id\", $\"{CurrentPlayer.Id}\" } });\n            var (response, error) = await getAllPlayers;\n            if (error is null)\n            {\n                Players.Clear();\n                response.Players.ForEach(Players.Add);\n            }\n            else\n            {      WeakReferenceMessenger.Default.Send<ServiceError>(new(error));\n            }\n        }\n        finally\n        {\n            semaphoreSlim.Release();\n        }\n    }\n    ```", "```cs\n    if (error is null)\n    {\n        service.ConnectHub(response.ConnectionInfo);\n        response.Players.ForEach(Players.Add);\n        CurrentPlayer = response.Player;\n        (await service.Hub).Reconnected += (s) => { return RefreshPlayerList(); };\n    }\n    ```", "```cs\npublic async Task IssueChallenge(Player opponent)\n{\n    await semaphoreSlim.WaitAsync();\n    try\n    {\n        var (response, error) = await service.PostAsync<IssueChallengeResponse>(new($\"{settings.ServerUrl}/Challenge/Issue\"), new IssueChallengeRequest(CurrentPlayer, opponent));\n        if (error is not null)\n        {         WeakReferenceMessenger.Default.Send<ServiceError>(new(error));\n        }\n    }\n    finally\n    {\n        semaphoreSlim.Release();\n    }\n}\n```", "```cs\npublic async Task SendChallengeResponse(Guid challengeId, Models.ChallengeResponse challengeResponse)\n{\n    await semaphoreSlim.WaitAsync();\n    try\n    {\n        var (response, error) = await service.PostAsync<string>(new($\"{settings.ServerUrl}/Challenge/Ack\"), new AcknowledgeChallengeRequest(challengeId, challengeResponse));\n        if (error is not null)\n        {         WeakReferenceMessenger.Default.Send<ServiceError>(new(error));\n        }\n    }\n    finally\n    {\n        semaphoreSlim.Release();\n    }\n}\n```", "```cs\n    public async Task<(Game?, string?)> EndTurn(Guid gameId, int position)\n    {\n        await semaphoreSlim.WaitAsync();\n        try\n        {\n            var (response, error) = await service.PostAsync<ProcessTurnResponse>(new($\"{settings.ServerUrl}/Game/Move\"), new ProcessTurnRequest(gameId, CurrentPlayer, position));\n            if (error is not null)\n            {\n                return (null, error.Message);\n            }\n            else return (response.Game, null);\n        }\n        finally\n        {\n            semaphoreSlim.Release();\n        }\n    }\n    ```", "```cs\n    public Player? GetPlayerById(Guid playerId)\n    {\n        if (playerId == CurrentPlayer.Id)\n            return CurrentPlayer;\n        return (from p in Players where p.Id == playerId select p).FirstOrDefault();\n    }\n    ```", "```cs\n    public async Task<Match> GetMatchById(Guid matchId)\n    {\n        await semaphoreSlim.WaitAsync();\n        try\n        {\n            var (response, error) = await service.GetAsync<GetMatchResponse>(new($\"{settings.ServerUrl}/Match/{matchId}\"), new());\n            if (error != null) { }\n            if (response.Match != null)\n                return response.Match;\n            return new Match();\n        }\n        finally\n        {\n            semaphoreSlim.Release();\n        }\n    }\n    ```", "```cs\n    private void PlayerStatusChangedHandler(PlayerUpdatedEventArgs args)\n    {\n        var changedPlayer = (from player in Players\n                             where player.Id == args.Player.Id\n                             select player).FirstOrDefault();\n        if (changedPlayer is not null)\n        {\n            changedPlayer.MatchId = args.Player.MatchId;\n        }\n        else if (args.Player.Id != CurrentPlayer.Id)\n        {\n            Players.Add(args.Player);\n        }\n    }\n    ```", "```cs\n    if (error is null)\n    {\n        service.ConnectHub(response.ConnectionInfo);\n        response.Players.ForEach(Players.Add);\n        CurrentPlayer = response.Player;\n        IsConnected = true;\n        (await service.Hub).On<PlayerUpdatedEventArgs>(Constants.Events.PlayerUpdated, PlayerStatusChangedHandler);\n        (await service.Hub).Reconnected += (s) => { return RefreshPlayerList(); };\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.Messaging.Messages;\n    using SticksAndStones.Models;\n    namespace SticksAndStones.Messages;\n    public class ChallengeRecieved : ValueChangedMessage<Player>\n    {\n        public Guid Id { get; init; }\n        public ChallengeRecieved(Guid id, Player challenger) : base(challenger)\n        {\n            Id = id;\n        }\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.Messaging.Messages;\n    using SticksAndStones.Models;\n    namespace SticksAndStones.Messages;\n    public class MatchStarted : ValueChangedMessage<Match>\n    {\n        public MatchStarted(Match match) : base(match)\n        {\n        }\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.Messaging.Messages;\n    using SticksAndStones.Models;\n    namespace SticksAndStones.Messages;\n    class MatchUpdated : ValueChangedMessage<Match>\n    {\n        public MatchUpdated(Match match) : base(match)\n        {\n        }\n    }\n    ```", "```cs\n    service.ConnectHub(response.ConnectionInfo);\n    response.Players.ForEach(Players.Add);\n    CurrentPlayer = response.Player;\n    IsConnected = true;\n    (await service.Hub).On<PlayerUpdatedEventArgs>(Constants.Events.PlayerUpdated, PlayerStatusChangedHandler);\n    (await service.Hub).On<ChallengeEventArgs>(Constants.Events.Challenge, (args) => WeakReferenceMessenger.Default.Send(new ChallengeRecieved(args.Id, args.Challenger)));\n    (await service.Hub).On<MatchStartedEventArgs>(Constants.Events.MatchStarted, (args) => WeakReferenceMessenger.Default.Send(new MatchStarted(args.Game)));\n    (await service.Hub).On<MatchUpdatedEventArgs>(Constants.Events.MatchUpdated, (args) => WeakReferenceMessenger.Default.Send(new MatchUpdated(args.Game)));\n    (await service.Hub).Reconnected += (s) => { return RefreshPlayerList(); };\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using CommunityToolkit.Mvvm.Input;\n    ```", "```cs\n    ObservableRecipient comes from CommunityToolkit. If you have worked through the other chapters in this book, you will have seen view models that derive from ObservableObject, which implements INotifyPropertyChanged. ObservableRecipient extends ObservableObject and adds built-in support for working with implementations of the .NET MAUI IMessage interface. To learn more about ObservableRecipient, visit https://learn.microsoft.com/en-us/dotnet/communitytoolkit/mvvm/observablerecipient.\n    ```", "```cs\n    [ObservableProperty]\n    private bool canRefresh;\n    ```", "```cs\n    [ObservableProperty]\n    private bool isRefreshing;\n    ```", "```cs\n    private bool CanExecuteRefresh() => CanRefresh && !IsRefreshing;\n    ```", "```cs\n    protected virtual Task RefreshInternal() => Task.CompletedTask;\n    ```", "```cs\n    [RelayCommand(CanExecute = nameof(CanExecuteRefresh))]\n    public async Task Refresh()\n    {\n        IsRefreshing = true;\n        await RefreshInternal();\n        IsRefreshing = false;\n        return;\n    }\n    ```", "```cs\n    public partial class ConnectViewModel : ViewModelBase\n    {\n    }\n    ```", "```cs\n    public partial class ConnectViewModel : ViewModelBase\n    {\n        private readonly GameService gameService;\n        private readonly Settings settings;\n        public ConnectViewModel(GameService gameService, Settings settings)\n        {\n            this.gameService = gameService;\n            this.settings = settings;\n        }\n    }\n    ```", "```cs\n    using SticksAndStones.Services;\n    ```", "```cs\n    [ObservableProperty]\n    private string gamerTag;\n    ```", "```cs\n    [ObservableProperty]\n    private string emailAddress;\n    ```", "```cs\n    {\n        this.gameService = gameService;\n        this.settings = settings;\n        // Load Player settings\n        var player = settings.LastPlayer;\n        Username = player.GamerTag;\n        EmailAddress = player.EmailAddress;\n    }\n    ```", "```cs\n    CanRefresh = false;\n    ```", "```cs\n    [ObservableProperty]\n    private string connectStatus;\n    ```", "```cs\n    [ObservableProperty]\n    private bool isConnecting;\n    ```", "```cs\n    private bool CanExecuteConnect() => !string.IsNullOrEmpty(GamerTag) && !string.IsNullOrEmpty(EmailAddress) && !IsConnecting;\n    ```", "```cs\n    private async Task<Player> Connect(Player player)\n    {\n        // Get SignalR Connection\n        var playerUpdate = await gameService.Connect(player);\n        if (gameService.IsConnected)\n        {\n            // If the player has an in progress match, take them to it.\n            if (gameService.CurrentPlayer?.MatchId != Guid.Empty)\n            {\n                await Shell.Current.GoToAsync($\"///Match\", new Dictionary<string, object>() { { \"MatchId\", gameService.CurrentPlayer.MatchId } });\n            }\n            else\n            {\n                await Shell.Current.GoToAsync($\"///Lobby\");\n            }\n        }\n        return playerUpdate;\n    }\n    ```", "```cs\n        [RelayCommand(CanExecute = nameof(CanExecuteConnect))]\n        public async Task Connect()\n        {\n            IsConnecting = true;\n            ConnectStatus = \"Connecting...\";\n            var player = settings.LastPlayer;\n            player.GamerTag = GamerTag;\n            player.EmailAddress = EmailAddress;\n            player.Id = (await Connect(player)).Id;\n            settings.LastPlayer = player;\n            ConnectStatus = \"Connect\";\n            IsConnecting = false;\n        }\n    ```", "```cs\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(ConnectCommand))]\n    private bool isConnecting;\n    ```", "```cs\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(ConnectCommand))]\n    private string gamerTag;\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(ConnectCommand))]\n    private string emailAddress;\n    ```", "```cs\n    private void OnServiceError(AsyncError error)\n    {\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            await Shell.Current.CurrentPage.DisplayAlert(\"There is a problem...\", error.Message, \"Ok\");\n        });\n    }\n    ```", "```cs\n    protected override void OnActivated() => Messenger.Register<ServiceError>(this, (r, m) => OnServiceError(m.Value));\n    ```", "```cs\n    protected override void OnDeactivated() => Messenger.Unregister<ServiceError>(this);\n    ```", "```cs\n    IsActive = true;\n    ```", "```cs\n    private async Task<Player> Connect(Player player)\n    {\n        // Get SignalR Connection\n        var playerUpdate = await gameService.Connect(player);\n        if (gameService.IsConnected)\n        {\n            IsActive = false;\n            // If the player has an in progress match, take them to it.\n            if (gameService.CurrentPlayer?.MatchId != Guid.Empty)\n            {\n                await Shell.Current.GoToAsync($\"///Match\", new Dictionary<string, object>() { { \"MatchId\", gameService.CurrentPlayer.MatchId } });\n            }\n            else\n            {\n                await Shell.Current.GoToAsync($\"///Lobby\");\n            }\n        }\n        return playerUpdate;\n    }\n    ```", "```cs\n    builder.Services.AddSingleton<Services.GameService>();\n    builder.Services.AddTransient<ViewModels.ConnectViewModel>();\n    return builder.Build();\n    ```", "```cs\n<controls:ActivityButton IsRunning=\"{Binding IsConnecting}\" \n                         Text=\"{Binding ConnectStatus}\" \n                         BackgroundColor=\"#e8bc65\" \n                         Command=\"{Binding ConnectCommand}\" \n                         HorizontalOptions=\"Center\"\n                         WidthRequest=\"200\"\n                         HeightRequest=\"48\"/>\n```", "```cs\n    public ICommand Command\n    {\n        get => (ICommand)GetValue(CommandProperty);\n        set { SetValue(CommandProperty, value); }\n    }\n    ```", "```cs\n    public static readonly BindableProperty CommandProperty = BindableProperty.Create(\n        propertyName: nameof(Command),\n        returnType: typeof(ICommand),\n        declaringType: typeof(ActivityButton),\n        defaultBindingMode: BindingMode.TwoWay);\n    ```", "```cs\n    public partial class ActivityButton : ActivityButton.xaml file and modify it to look like the following:\n\n    ```", "```cs\n\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <Frame \n\n                 x:Class=\"SticksAndStones.Controls.ActivityButton\"\n            x:Name=\"this\"\n            BackgroundColor=\"{x:StaticResource Primary}\"\n            CornerRadius=\"5\"\n            Padding=\"12\">\n    </Frame>\n    ```", "```cs\n    <Frame \n\n                 x:Class=\"SticksAndStones.Controls.ActivityButton\"\n            BackgroundColor=\"{x:StaticResource Primary}\"\n            CornerRadius=\"5\"\n            Padding=\"12\">\n        <VerticalStackLayout>\n            <HorizontalStackLayout HorizontalOptions=\"CenterAndExpand\" Spacing=\"10\">\n            </HorizontalStackLayout>\n        </VerticalStackLayout>\n    </Frame>\n    ```", "```cs\n    <ActivityIndicator HeightRequest=\"15\" WidthRequest=\"15\"\n                       Color=\"{x:StaticResource White}\" \n                       IsRunning=\"{Binding Source={x:Reference this},Path=IsRunning}\"\n                       IsVisible=\"{Binding Source={x:Reference this},Path=IsRunning}\"\n                       VerticalOptions=\"CenterAndExpand\"/>\n    ```", "```cs\n    <Label x:Name=\"buttonLabel\" TextColor=\"{x:StaticResource White}\" \n           Text=\"{Binding Source={x:Reference this},Path=Text}\" \n           FontSize=\"15\"\n           VerticalOptions=\"CenterAndExpand\"\n           VerticalTextAlignment=\"Center\" \n           HorizontalTextAlignment=\"Start\" />\n    ```", "```cs\n    <Frame.GestureRecognizers>\n        <TapGestureRecognizer Command=\"{Binding Source={x:Reference this},Path=Command}\" CommandParameter=\"{Binding Source={x:Reference this},Path=CommandParameter}\" />\n    </Frame.GestureRecognizers>\n    ```", "```cs\n    <Frame.Triggers>\n        <DataTrigger TargetType=\"Frame\" Binding=\"{Binding Source={x:Reference this},Path=IsBusy}\" Value=\"True\">\n            <Setter Property=\"IsEnabled\" Value=\"False\" />\n        </DataTrigger>\n        <DataTrigger TargetType=\"Frame\" Binding=\"{Binding Source={x:Reference this},Path=IsBusy}\" Value=\"False\">\n            <Setter Property=\"IsEnabled\" Value=\"True\" />\n        </DataTrigger>\n    </Frame.Triggers>\n    ```", "```cs\n    public static readonly BindableProperty CommandParameterProperty = BindableProperty.Create(\n        propertyName: nameof(CommandParameter),\n        returnType: typeof(object),\n        declaringType: typeof(ActivityButton),\n        defaultBindingMode: BindingMode.TwoWay);\n    public object CommandParameter\n    {\n        get => GetValue(CommandParameterProperty);\n        set { SetValue(CommandParameterProperty, value); }\n    }\n    ```", "```cs\n    public static readonly BindableProperty TextProperty = BindableProperty.Create(\n        propertyName: nameof(Text),\n        returnType: typeof(string),\n        declaringType: typeof(ActivityButton),\n        defaultValue: string.Empty,\n        defaultBindingMode: BindingMode.TwoWay);\n    public string Text\n    {\n        get => (string)GetValue(TextProperty);\n        set { SetValue(TextProperty, value); }\n    }\n    ```", "```cs\n    public static readonly BindableProperty IsRunningProperty = BindableProperty.Create(\n        propertyName: nameof(IsRunning),\n        returnType: typeof(bool),\n        declaringType: typeof(ActivityButton),\n        defaultValue: false);\n    public bool IsRunning\n    {\n        get => (bool)GetValue(IsRunningProperty);\n        set { SetValue(IsRunningProperty, value); }\n    }\n    ```", "```cs\n    public static readonly BindableProperty FontFamilyProperty = BindableProperty.Create(\n        propertyName: nameof(FontFamily),\n        returnType: typeof(string),\n        declaringType: typeof(ActivityButton),\n        defaultValue: string.Empty,\n        defaultBindingMode: BindingMode.TwoWay);\n    public string FontFamily\n    {\n        get => (string)GetValue(Label.FontFamilyProperty);\n        set { SetValue(Label.FontFamilyProperty, value); }\n    }\n    public static readonly BindableProperty FontSizeProperty = BindableProperty.Create(\n        nameof(FontSize),\n        typeof(double),\n        typeof(ActivityButton),\n        Device.GetNamedSize(NamedSize.Small, typeof(Label)),\n        BindingMode.TwoWay);\n    public double FontSize\n    {\n        set { SetValue(FontSizeProperty, value); }\n        get { return (double)GetValue(FontSizeProperty); }\n    }\n    ```", "```cs\n    A single wood stick, positioned horizontally, with five stubs where branches would be and no leaves, no background, game art\n    ```", "```cs\n    3 grey stones, arranged closely together, no background, game art\n    ```", "```cs\n    <ContentPage xmlns=“http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=“http://schemas.microsoft.com/winfx/2009/xaml”\n            xmlns:viewModels=“clr-namespace:SticksAndStones.ViewModels”\n            xmlns:controls=“clr-namespace:SticksAndStones.Controls”\n                  xmlns:toolkit=“http://schemas.microsoft.com/dotnet/2022/maui/toolkit”\n                 x:Class=“SticksAndStones.Views.ConnectView”\n                 Title=“Sticks and Stones”>\n    ```", "```cs\n    <ContentPage  xmlns=“http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=“http://schemas.microsoft.com/winfx/2009/xaml”\n            xmlns:viewModels=“clr-namespace:SticksAndStones.ViewModels”\n            xmlns:controls=“clr-namespace:SticksAndStones.Controls”\n                 xmlns:toolkit=“http://schemas.microsoft.com/dotnet/2022/maui/toolkit”\n                 x:Class=“SticksAndStones.Views.ConnectView”\n            x:DataType=“viewModels:ConnectViewModel”\n            Title=“Sticks and Stones”>\n    ```", "```cs\n    <ContentPage xmlns=“http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=“http://schemas.microsoft.com/winfx/2009/xaml”\n            xmlns:viewModels=“clr-namespace:SticksAndStones.ViewModels”\n            xmlns:controls=“clr-namespace:SticksAndStones.Controls”\n                 xmlns:toolkit=“http://schemas.microsoft.com/dotnet/2022/maui/toolkit”\n                 x:Class=“SticksAndStones.Views.ConnectView”\n            x:DataType=“viewModels:ConnectViewModel”\n            Title=“Sticks and Stones”\n            BackgroundColor of the entire view to White, which will make the images blend better, by adding the following highlighted code:\n\n    ```", "```cs\n    <Grid Margin=“40”>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=“8*”/>\n            <RowDefinition Height=“2*”/>\n            <RowDefinition Height=“8*”/>\n            <RowDefinition Height=“1*”/>\n        </Grid.RowDefinitions>\n    </Grid>\n    ```", "```cs\n\n    ```", "```cs\n    <Grid Grid.Row=“0” WidthRequest=“150” HeightRequest=“150”>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=“1*” />\n            <ColumnDefinition Width=“5*” />\n            <ColumnDefinition Width=“1*” />\n        </Grid.ColumnDefinitions>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=“1*” />\n            <RowDefinition Height=“4*” />\n            <RowDefinition Height=“1*” />\n        </Grid.RowDefinitions>\n        <Image Grid.Row=“0” Grid.Column=“1” Source=“hstick.jpeg” Aspect=“Fill”/>\n        <Image Grid.Row=“1” Grid.Column=“0” Source=“vstick.jpeg” Aspect=“Fill”/>\n        <Image Grid.Row=“1” Grid.Column=“1” Source=“stones.jpeg” Aspect=“AspectFit”/>\n        <Image Grid.Row=“1” Grid.Column=“2” Source=“vstick.jpeg” Aspect=“Fill”/>\n        <Image Grid.Row=“2” Grid.Column=“1” Source=“hstick.jpeg” Aspect=“Fill”/>\n    </Grid>\n    ```", "```cs\n    <Label Grid.Row=\"1\" Text=\"Connect to Sticks &amp; Stones\" FontSize=\"20\" TextColor=\"Black\" FontAttributes=\"Bold\" Margin=\"0,0,0,20\" HorizontalOptions=\"Center\"/>\n    ```", "```cs\n    <HorizontalStackLayout Grid.Row=\"2\" HorizontalOptions=\"Center\">\n        <VerticalStackLayout Spacing=\"10\" > \n            <Image HeightRequest=\"96\" WidthRequest=\"96\" BackgroundColor=\"LightGrey\">\n                <Image.Source>\n                    <toolkit:GravatarImageSource\n                        Email=\"{Binding EmailAddress}\"\n                        Image=\"MysteryPerson\" />\n                </Image.Source>\n            </Image>\n        </VerticalStackLayout>\n        <VerticalStackLayout Spacing=\"10\" >\n            <Entry Placeholder=\"username\" Keyboard=\"Email\" Text=\"{Binding Username}\" HorizontalTextAlignment=\"Start\" HorizontalOptions=\"FillAndExpand\"/>\n            <Entry Placeholder=\"user@someaddress.com\" Keyboard=\"Email\" Text=\"{Binding EmailAddress}\" HorizontalTextAlignment=\"Start\" HorizontalOptions=\"FillAndExpand\"/>\n        </VerticalStackLayout>\n    </HorizontalStackLayout>\n    ```", "```cs\n    <controls:ActivityButton Grid.Row=\"3\" \n                             IsRunning=\"{Binding IsConnecting}\" \n                             Text=\"{Binding ConnectStatus}\" \n                             BackgroundColor=\"#e8bc65\" \n                             Command=\"{Binding ConnectCommand}\" \n                             HorizontalOptions=\"Center\" \n                             WidthRequest=\"200\" \n                             HeightRequest=\"48\"/>\n    ```", "```cs\n    builder.Services.AddSingleton<Services.GameService>();\n    builder.Services.AddTransient<ViewModels.ConnectViewModel>();\n    builder.Services.AddTransient<Views.ConnectView>();\n    return builder.Build();\n    ```", "```cs\n    using SticksAndStones.ViewModels;\n    namespace SticksAndStones.Views;\n    public partial class ConnectView : ContentPage\n    {\n        public ConnectView(ConnectViewModel viewModel)\n        {\n            this.BindingContext = viewModel;\n            InitializeComponent();\n        }\n    }\n    ```", "```cs\n    <Shell\n        x:Class=\"SticksAndStones.App.AppShell\"\n\n        Shell.FlyoutBehavior=\"Disabled\">\n        <ShellItem Route=\"Connect\">\n            <ShellContent ContentTemplate=\"{DataTemplate views:ConnectView}\" />\n        </ShellItem>\n    </Shell>\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using CommunityToolkit.Mvvm.Input;\n    using SticksAndStones.Models;\n    using SticksAndStones.Services;\n    ```", "```cs\n    private readonly Player playerModel;\n    private readonly GameService gameService;\n    public PlayerViewModel(Player player, GameService gameService)\n    {\n        playerModel = player;\n        this.gameService = gameService;\n    }\n    ```", "```cs\n    public Guid Id => playermodel.Id;\n    public string GamerTag => playerModel.GamerTag;\n    ```", "```cs\n    public bool IsInMatch => !(playerModel.MatchId == Guid.Empty);\n    public string Status => IsInMatch switch\n    {\n        true => \"In a match\",\n        false => \"Waiting for opponent\"\n    };\n    ```", "```cs\n    [ObservableProperty]\n    [NotifyPropertyChangedFor(nameof(ChallengeStatus))]\n    private bool isChallenging = false;\n    public string ChallengeStatus => IsChallenging switch\n    {\n        true => \"Challenging...\",\n        false => \"Challenge\"\n    };\n    public bool CanChallenge => !IsInMatch && !IsChallenging;\n    [RelayCommand(CanExecute = nameof(CanChallenge))]\n    public void Challenge(PlayerViewModel opponent)\n    {\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            IsChallenging = true;\n            bool answer = await Shell.Current.CurrentPage.DisplayAlert(\"Issue Challenge!\", $\" You are about to challenge {GamerTag} to a match!\\nAre you sure?\", \"Yes\", \"No\");\n            if (answer)\n            {\n                await gameService.IssueChallenge(opponent.Player);\n            }\n            IsChallenging = false;\n        });\n        return;\n    }\n    ```", "```cs\n    using System.Collections.ObjectModel;\n    using System.Collections.Specialized;\n    using CommunityToolkit.Mvvm.Messaging;\n    using SticksAndStones.Messages;\n    using SticksAndStones.Models;\n    using SticksAndStones.Services;\n    ```", "```cs\n    LobbyViewModel class:\n\n    ```", "```cs\n\n    `LobbyViewModel` receives an instance of `GameService` via dependency injection. The `gameService` instance is used to initialize the `Players` list. The `Players` property from the `GameService` class is a collection of the `Player` model, whereas `Players` in `LobbyViewModel` is an `ObservableCollection` `instance` of `PlayerViewModel`. We use `ObservableCollection` because it provides support for `INotifyPropertyChanged` and `INotifyCollectionChanged` when it is bound automatically. A LINQ query is used to get all the current players and add them to the `Players` `ObservableCollection`. `CanRefresh` from `ViewModelBase` is set to `true`, which enables `RefreshCommand`. Finally, `IsActive` is set to `true`, which enables the `OnActivated` and `OnDeactivated` events.\n    ```", "```cs\n    private void OnPlayersCollectionChanged(object? sender, \n    NotifyCollectionChangedEventArgs e)\n    {\n        if (e.Action == NotifyCollectionChangedAction.Add)\n        {\n            foreach (var player in e.NewItems.Cast<Player>())\n            {\n                Players.Add(new PlayerViewModel(player, gameService));\n            }\n        }\n        else if (e.Action == NotifyCollectionChangedAction.Remove)\n        {\n            foreach (var player in e.OldItems.Cast<Player>())\n            {\n                var toRemove = Players.FirstOrDefault(p => p.Id == player.Id);\n                Players.Remove(toRemove);\n            }\n        }\n        else if (e.Action == NotifyCollectionChangedAction.Replace)\n        {\n        }\n        else if (e.Action == NotifyCollectionChangedAction.Reset)\n        {\n            Players.Clear();\n        }\n    }\n    ```", "```cs\n    protected override void OnActivated()\n    {\n        gameService.Players.CollectionChanged += OnPlayersCollectionChanged;\n        // If the player has an in progress match, take them to it.\n        if (gameService.CurrentPlayer?.MatchId != Guid.Empty)\n        {\n            MainThread.InvokeOnMainThreadAsync(async () =>\n            {\n                IsActive = false;\n                await Shell.Current.GoToAsync(Constants.ArgumentNames.MatchId, new Dictionary<string, object>() { { \"MatchId\", gameService.CurrentPlayer.MatchId } });\n            });\n        }\n    }\n    protected override void OnDeactivated()\n    {\n        gameService.Players.CollectionChanged -= OnPlayersCollectionChanged;\n    }\n    ```", "```cs\n    public class ArgumentNames\n    {\n        public static readonly string Match = nameof(Match);\n        public static readonly string MatchId = nameof(MatchId);\n    }\n    ```", "```cs\n    private void OnChallengeReceived(Guid challengeId, Player opponent)\n    {\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            bool answer = await Shell.Current.CurrentPage.DisplayAlert(\"You have been challenged!\", $\"{opponent.GamerTag} has challenged you to a match of Sticks & Stones, do you accept?\", \"Yes\", \"No\");\n            await gameService.SendChallengeResponse(challengeId, answer ? Models.ChallengeResponse.Accepted : Models.ChallengeResponse.Declined);\n        });\n    }\n    private void OnMatchStarted(Match match)\n    {\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            IsActive = false;\n            await Shell.Current.GoToAsync($\"///Match\", new Dictionary<string, object>() { { Constants.ArgumentNames.Match, match } });\n        });\n    }\n    private void OnServiceError(AsyncError error)\n    {\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            IsActive = false;\n            await Shell.Current.CurrentPage.DisplayAlert(\"There is a problem...\",error.Message, \"Ok\");\n        });\n    }\n    ```", "```cs\n    Messenger.Register<ChallengeRecieved>(this, (r, m) => OnChallengeReceived(m.Id, m.Value));\n    Messenger.Register<MatchStarted>(this, (r, m) => OnMatchStarted(m.Value));\n    Messenger.Register<ServiceError>(this, (r, m) => OnServiceError(m.Value));\n    ```", "```cs\n    Messenger.Unregister<ChallengeRecieved>(this);\n    Messenger.Unregister<MatchStarted>(this);\n    Messenger.Unregister<ServiceError>(this);\n    ```", "```cs\n    protected override async Task RefreshInternal()\n    {\n        await gameService.RefreshPlayerList();\n        return;\n    }\n    ```", "```cs\n    builder.Services.AddTransient<ViewModels.ConnectViewModel>();\n    builder.Services.AddTransient<ViewModels.LobbyViewModel>();\n    builder.Services.AddTransient<Views.ConnectView>();\n    ```", "```cs\n    using SticksAndStones.ViewModels;\n    ```", "```cs\n    public LobbyView(LobbyViewModel viewModel)\n    {\n        this.BindingContext = viewModel;\n        InitializeComponent();\n    }\n    ```", "```cs\n    <ShellItem Route=\"Lobby\">\n        <ShellContent ContentTemplate=\"{DataTemplate views:LobbyView}\" />\n    </ShellItem>\n    ```", "```cs\n    builder.Services.AddTransient<Views.ConnectView>();\n    builder.Services.AddTransient<Views.LobbyView>();\n    return builder.Build();\n    ```", "```cs\n    <ContentPage xmlns=“http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=“http://schemas.microsoft.com/winfx/2009/xaml”\n            xmlns:viewModels=“clr-namespace:SticksAndStones.ViewModels”\n            xmlns:controls=“clr-namespace:SticksAndStones.Controls”\n            xmlns:toolkit=“ http://schemas.microsoft.com/dotnet/2022/maui/toolkit”\n                 x:Class=“SticksAndStones.Views.LobbyView”>\n    ```", "```cs\n    <ContentPage xmlns=“http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=“http://schemas.microsoft.com/winfx/2009/xaml”\n            xmlns:viewModels=“clr-namespace:SticksAndStones.ViewModels”\n            xmlns:controls=“clr-namespace:SticksAndStones.Controls”\n            xmlns:toolkit=“ http://schemas.microsoft.com/dotnet/2022/maui/toolkit”\n            x:DataType=“viewModels:LobbyViewModel”\n                 x:Class=“SticksAndStones.Views.LobbyView”>\n    ```", "```cs\n    <ContentPage xmlns=“http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=“http://schemas.microsoft.com/winfx/2009/xaml”\n            xmlns:viewModels=“clr-namespace:SticksAndStones.ViewModels”\n            xmlns:controls=“clr-namespace:SticksAndStones.Controls”\n            xmlns:toolkit=“ http://schemas.microsoft.com/dotnet/2022/maui/toolkit”\n            x:Class=“SticksAndStones.Views.LobbyView”\n            x:DataType=“viewModels:LobbyViewModel”\n            BackgroundColor value of the entire view to White, which will make the images blend better, by adding the following highlighted code:\n\n    ```", "```cs\n    <RefreshView IsRefreshing=“{Binding IsRefreshing}” Command=“{Binding RefreshCommand}”>\n        <ScrollView Padding=“5”>\n            <CollectionView ItemsSource=“{Binding Players}” Margin=”5,5,5,0 SelectionMode=“None”>\n            </CollectionView>\n        </ScrollView>\n    </RefreshView>\n    ```", "```cs\n\n    ```", "```cs\n    <ContentPage.Resources>\n        <ContentView x:Key=\"BasicEmptyView\">\n            <StackLayout>\n                <Label Text=\"No players available\"\n                       Margin=\"10,25,10,10\"\n                       FontAttributes=\"Bold\"\n                       FontSize=\"18\"\n                       HorizontalOptions=\"Fill\"\n                       HorizontalTextAlignment=\"Center\" />\n            </StackLayout>\n        </ContentView>\n    </ContentPage.Resources>\n    ```", "```cs\n    EmptyView=\"{StaticResource BasicEmptyView}\"\n    ```", "```cs\n    <DataTemplate x:Key=\"PlayerCardViewTemplate\" x:DataType=\"viewModels:PlayerViewModel\">\n        <ContentView>\n            <Border StrokeShape=\"RoundRectangle 10,10,10,10\" BackgroundColor=\"AntiqueWhite\" Padding=\"3,3,3,3\" Margin=\"5,5,5,5\">\n                <Grid>\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"50\" />\n                        <ColumnDefinition Width=\"4*\" />\n                        <ColumnDefinition Width=\"2*\" />\n                    </Grid.ColumnDefinitions>\n                    <toolkit:AvatarView Grid.Column=\"0\" Margin=\"0\" BackgroundColor=\"LightGrey\" HeightRequest=\"48\" WidthRequest=\"48\" CornerRadius=\"25\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\">\n                        <toolkit:AvatarView.ImageSource>\n                            <toolkit:GravatarImageSource\n                                Email=\"{Binding EmailAddress}\"\n                                Image=\"MysteryPerson\" />\n                        </toolkit:AvatarView.ImageSource>\n                    </toolkit:AvatarView>\n                    <VerticalStackLayout Grid.Column=\"1\" Margin=\"10,0,0,0\">\n                        <Label Text=\"{Binding GamerTag}\" HorizontalTextAlignment=\"Start\" FontSize=\"Large\" BackgroundColor=\"AntiqueWhite\" />\n                        <Label Text=\"{Binding Status}\" HorizontalTextAlignment=\"Start\" FontSize=\"Caption\" BackgroundColor=\"AntiqueWhite\"/>\n                    </VerticalStackLayout>\n                    <controls:ActivityButton Grid.Column=\"2\" IsRunning=\"{Binding IsChallenging}\" Text=\"{Binding ChallengeStatus}\" BackgroundColor=\"#e8bc65\" Command=\"{Binding ChallengeCommand}\" CommandParameter=\"{Binding .}\" IsVisible=\"{Binding CanChallenge}\" Margin=\"5\"/>\n                </Grid>\n            </Border>\n        </ContentView>\n    </DataTemplate>\n    ```", "```cs\n    ItemTemplate=\"{StaticResource PlayerCardViewTemplate}\"\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using SticksAndStones.Models;\n    ```", "```cs\n    public partial class MatchPlayerViewModel: ObservableObject\n    {\n    }\n    ```", "```cs\n    private readonly Player playerModel;\n    private readonly Match matchModel;\n    public MatchPlayerViewModel(Player player, Match match)\n    {\n        this.playerModel = player;\n        this.matchModel = match;\n    }\n    ```", "```cs\n    public int PlayerToken => playerModel.Id == matchModel.PlayerOneId ? 1 : -1;\n    ```", "```cs\n    public bool IsPlayersTurn => playerModel.Id == matchModel.NextPlayerId;\n    ```", "```cs\n    public Guid Id => playerModel.Id;\n    public string GamerTag => playerModel.GamerTag;\n    public string EmailAddress => playerModel.EmailAddress;\n    ```", "```cs\n    public int Score => playerModel.Id == matchModel.PlayerOneId ? matchModel.PlayerOneScore : matchModel.PlayerTwoScore;\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using CommunityToolkit.Mvvm.Input;\n    using CommunityToolkit.Mvvm.Messaging;\n    using SticksAndStones.Models;\n    using SticksAndStones.Services;\n    ```", "```cs\n    public partial class MatchViewModel : ViewModelBase, IQueryAttributable\n    ```", "```cs\n    private readonly GameService gameService;\n    public MatchViewModel(GameService gameService)\n    {\n        this.gameService = gameService;\n    }\n    ```", "```cs\n    [ObservableProperty]\n    private Match match;\n    [ObservableProperty]\n    private MatchPlayerViewModel playerOne;\n    [ObservableProperty]\n    private MatchPlayerViewModel playerTwo;\n    ```", "```cs\n    public async Task ApplyQueryAttributes(IDictionary<string, object> query)\n    {\n        Match match = null;\n        if (query.ContainsKey(Constants.ArgumentNames.Match))\n        {\n            match = query[Constants.ArgumentNames.Match] as Match;\n        }\n        if (query.ContainsKey(Constants.ArgumentNames.MatchId))\n        {\n            var matchId = new Guid($\"{query[Constants.ArgumentNames.MatchId]}\");\n            if (matchId != Guid.Empty)\n            {\n                match = await gameService.GetMatchById(matchId);\n            }\n        }\n            LoadMatch(match);\n        });\n    }\n    private void LoadMatch(Match match)\n    { \n        if (match is null) return;\n        PlayerOne = new MatchPlayerViewModel(gameService.GetPlayerById(match.PlayerOneId), match);\n        PlayerTwo = new MatchPlayerViewModel(gameService.GetPlayerById(match.PlayerTwoId), match);\n        this.Match = match;\n    }\n    ```", "```cs\n    public bool IsCurrentPlayersTurn => gameService.CurrentPlayer.Id == (Match?.NextPlayerId ?? Guid.Empty);\n    ```", "```cs\n    [ObservableProperty]\n    [NotifyPropertyChangedFor(nameof(IsCurrentPlayersTurn))]\n    private Match match;\n    ```", "```cs\n    int lastSelectedStick = -1;\n    [RelayCommand(CanExecute = nameof(IsCurrentPlayersTurn))]\n    private void SelectStick(string arg)\n    {\n        if (gameService.CurrentPlayer is null) return;\n        if (Match is null) return;\n\n        if (int.TryParse(arg, out var pos))\n        {\n            pos--; // adjust for 0 based indexes\n            if (lastSelectedStick != -1 && lastSelectedStick != pos)\n                Match.Sticks[lastSelectedStick] = 0;\n            if (Match.Sticks[pos] != 0)\n                return;\n            Match.Sticks[pos] = gameService.CurrentPlayer.Id == PlayerOne.Id ? PlayerOne.PlayerToken : PlayerTwo.PlayerToken;\n            lastSelectedStick = pos;\n            OnPropertyChanged(nameof(Match));\n        }\n    }\n    ```", "```cs\n    [RelayCommand]\n    private async Task Play()\n    {\n        if (lastSelectedStick == -1)\n        {\n            await Shell.Current.CurrentPage.DisplayAlert(\"Make a move\", \"You must make a move before you play.\", \"Ok\");\n            return;\n        }\n        if (await Shell.Current.CurrentPage.DisplayAlert(\"Make a move\", \"Are you sure this is the move you want, this can't be undone.\", \"Yes\", \"No\"))\n        {\n            var (newMatch, error) = await gameService.EndTurn(Match.Id, lastSelectedStick);\n            if (error is not null)\n            {\n                await Shell.Current.CurrentPage.DisplayAlert(\"Error in move\", error, \"Ok\");\n                return;\n            }\n            lastSelectedStick = -1;\n        }\n    }\n    ```", "```cs\n    [RelayCommand]\n    private async Task Undo()\n    {\n        if (lastSelectedStick != -1)\n        {\n            if (await Shell.Current.CurrentPage.DisplayAlert(\"Undo your move\", \"Are you sure you don't want to play this move?\", \"Yes\", \"No\"))\n            {\n                OnPropertyChanging(nameof(Match));\n                Match.Sticks[lastSelectedStick] = 0;\n                OnPropertyChanged(nameof(Match));\n                lastSelectedStick = -1;\n                return;\n            }\n        }\n    }\n    ```", "```cs\n    [RelayCommand]\n    private async Task Forfeit()\n    {\n        var returnToLobby = true;\n        if (!Match.Completed)\n        {\n            returnToLobby = await Shell.Current.CurrentPage.DisplayAlert(\"W A I T\", \"Returning to the Lobby will forfeit your match, are you sure you want to do that?\", \"Yes\", \"No\"))\n        if (returnToLobby)\n        {\n            await Shell.Current.GoToAsync(\"///Lobby\");\n        }\n    }\n    ```", "```cs\n    void OnMatchUpdated(object r, Messages.MatchUpdated m)\n    {\n        LoadMatch(m.Value);\n        if (Match.WinnerId != Guid.Empty && Match.Completed == true)\n        {\n            MainThread.InvokeOnMainThreadAsync(async () =>\n            {\n                if (Match.WinnerId == gameService.CurrentPlayer.Id)\n                {\n                    await Shell.Current.CurrentPage.DisplayAlert(\"Congratulations!\", $\"You are victorious!\\nPress the back button to return to the lobby.\", \"Ok\");\n                }\n                else\n                {\n                    await Shell.Current.CurrentPage.DisplayAlert(\"Bummer!\", $\"You were defeated, better luck next time!\\nPress the back button to return to the lobby.\", \"Ok\");\n                }\n            });\n            return;\n        }\n    }\n    ```", "```cs\n    protected override void OnActivated()\n    {\n        Messenger.Register(this, (MessageHandler<object, Messages.MatchUpdated>)OnMatchUpdated);\n    }\n    protected override void OnDeactivated()\n    {\n        Messenger.Unregister<Messages.MatchUpdated>(this);\n    }\n    ```", "```cs\n    builder.Services.AddTransient<ViewModels.ConnectViewModel>();\n    builder.Services.AddTransient<ViewModels.LobbyViewModel>();\n    builder.Services.AddTransient<ViewModels.MatchViewModel>();\n    builder.Services.AddTransient<Views.ConnectView>();\n    builder.Services.AddTransient<Views.LobbyView>();\n    ```", "```cs\n    using SticksAndStones.ViewModels;\n    ```", "```cs\n    public MatchView(MatchViewModel viewModel)\n    {\n        this.BindingContext = viewModel;\n        InitializeComponent();\n    }\n    ```", "```cs\n    <ShellItem Route=\"Match\">\n        <ShellContent ContentTemplate=\"{DataTemplate views:MatchView}\" />\n    </ShellItem>\n    ```", "```cs\n    builder.Services.AddTransient<Views.ConnectView>();\n    builder.Services.AddTransient<Views.LobbyView>();\n    builder.Services.AddTransient<Views.MatchView>();\n    return builder.Build();\n    ```", "```cs\n    <ContentPage \n\n            x:Class=\"SticksAndStones.Views.GameView\">\n    ```", "```cs\n    <ContentPage \n\n            x:DataType=\"viewModels:GameViewModel\"\n            x:Class=\"SticksAndStones.Views.GameView\">\n    ```", "```cs\n<!-- Custom Fonts -->\n<MauiFont Include=\"Resources\\Fonts\\*\" />\n```", "```cs\n.ConfigureFonts(fonts =>\n{\n    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n    fonts.AddFont(\"FontAwesome.otf\", \"FontAwesome\");\n})\n```", "```cs\n    <Shell.TitleView>\n        <Grid>\n            <HorizontalStackLayout HorizontalOptions=\"Start\">\n            </HorizontalStackLayout>\n            <HorizontalStackLayout HorizontalOptions=\"End\">\n            </HorizontalStackLayout>\n        </Grid>\n    </Shell.TitleView>\n    ```", "```cs\n    <HorizontalStackLayout HorizontalOptions=\"Start\">\n    <ImageButton Command=\"{Binding ForfeitCommand}\" ToolTipProperties.Text=\"Return to the lobby.\">\n            <ImageButton.Source>\n                <FontImageSource Glyph=\"&#xf0a8;\" FontFamily=\"FontAwesome\" Color=\"White\" Size=\"28\" />\n            </ImageButton.Source>\n        </ImageButton>\n    </HorizontalStackLayout>\n    ```", "```cs\n    <HorizontalStackLayout HorizontalOptions=\"End\">\n        <ImageButton Command=\"{Binding UndoCommand}\" IsVisible=\"{Binding IsCurrentPlayersTurn}\" ToolTipProperties.Text=\"Undo the last stick placement.\">\n            <ImageButton.Source>\n                <FontImageSource Glyph=\"&#xf0e2;\" FontFamily=\"FontAwesome\" Color=\"White\" Size=\"28\" />\n            </ImageButton.Source>\n        </ImageButton>\n        <ImageButton Command=\"{Binding PlayCommand}\" IsVisible=\"{Binding IsCurrentPlayersTurn}\" ToolTipProperties.Text=\"Send the stick placement, and end my turn.\">\n            <ImageButton.Source>\n                <FontImageSource Glyph=\"&#xf1d8;\" FontFamily=\"FontAwesome\" Color=\"White\" Size=\"28\" />\n            </ImageButton.Source>\n        </ImageButton>\n    </HorizontalStackLayout>\n    ```", "```cs\n    <ContentView>\n        <Grid>\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"4*\" />\n                <RowDefinition Height=\"2*\" />\n                <RowDefinition Height=\"6*\" />\n                <RowDefinition Height=\"2*\" />\n            </Grid.RowDefinitions>\n        </Grid>\n    </ContentView>\n    ```", "```cs\n    <Color x:Key=\"PlayerOne\">#6495ED</Color>\n    <Color x:Key=\"PlayerTwo\">#CD5C5C</Color>\n    ```", "```cs\n    <HorizontalStackLayout Grid.Row=\"0\" HorizontalOptions=\"CenterAndExpand\" Margin=\"10\" BindableLayout.ItemsSource=\"{Binding Players}\">\n    </HorizontalStackLayout>\n    ```", "```cs\n    <HorizontalStackLayout Grid.Row=\"0\" HorizontalOptions=\"CenterAndExpand\" Margin=\"10\">\n        <BindableLayout.ItemTemplate>\n            <DataTemplate>\n                <Border x:DataType=\"viewModels:MatchPlayerViewModel\" Padding=\"0\" Margin=\"2\" StrokeShape=\"RoundRectangle 10,10,10,10\" HeightRequest=\"175\">\n                    <VerticalStackLayout Padding=\"2\" HorizontalOptions=\"Center\">\n                    </VerticalStackLayout>\n                </Border>\n            </DataTemplate>\n        </BindableLayout.ItemTemplate>\n    </HorizontalStackLayout>\n    ```", "```cs\n    <Border.Triggers>\n        <DataTrigger TargetType=\"Border\" Binding=\"{Binding PlayerToken}\" Value=\"1\" >\n            <Setter Property=\"Stroke\" Value=\"{StaticResource PlayerOne}\" />\n            <Setter Property=\"BackgroundColor\" Value=\"{StaticResource PlayerOne}\" />\n        </DataTrigger>\n        <DataTrigger TargetType=\"Border\" Binding=\"{Binding PlayerToken}\" Value=\"-1\" >\n            <Setter Property=\"Stroke\" Value=\"{StaticResource PlayerTwo}\" />\n            <Setter Property=\"BackgroundColor\" Value=\"{StaticResource PlayerTwo}\" />\n        </DataTrigger>\n    </Border.Triggers>\n    ```", "```cs\n    <VerticalStackLayout BackgroundColor=\"{Binding PlayerToken, Converter={StaticResource PlayerToColor}}\" Padding=\"2\" HorizontalOptions=\"Center\">\n        <VerticalStackLayout>\n        </VerticalStackLayout>\n        <Border Padding=\"0\" WidthRequest=\"96\" StrokeShape=\"RoundRectangle 10,10,10,10\" StrokeThickness=\"0\">\n            <Image IsVisible=\"{Binding IsPlayersTurn}\" Source=\"hstick.jpeg\" Aspect=\"AspectFit\" MaximumHeightRequest=\"36\"/>\n        </Border>\n    VerticalStackLayout will be used to hold GamerTag, AvatarImage, and the player’s score, which is added in the next step. Border contains a horizontal stick image whose IsVisible attribute is bound to the IsPlayersTurn property. The stick is used as a visual indicator of which player’s turn it is. If it is not the player’s turn, the image is not displayed.\n    ```", "```cs\n    <VerticalStackLayout>\n        <Label Text=\"{Binding GamerTag}\" HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Center\" FontSize=\"18\" FontFamily=\"OpenSansSemibold\"/>\n        <FlexLayout Margin=\"3\">\n        </FlexLayout>\n    FlexLayout contains the visual elements to display AvatarImage and Score. Add the following highlighted code to FlexLayout:\n\n    ```", "```cs\n\n    ```", "```cs\n<Grid Grid.Row=\"2\" BackgroundColor=\"White\" Margin=\"10,40,10,0\" MaximumHeightRequest=\"410\" MaximumWidthRequest=\"400\" >\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"1*\" />\n        <ColumnDefinition Width=\"5*\" />\n        <ColumnDefinition Width=\"1*\" />\n        <ColumnDefinition Width=\"5*\" />\n        <ColumnDefinition Width=\"1*\" />\n        <ColumnDefinition Width=\"5*\" />\n        <ColumnDefinition Width=\"1*\" />\n    </Grid.ColumnDefinitions>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"1*\" />\n        <RowDefinition Height=\"4*\" />\n        <RowDefinition Height=\"1*\" />\n        <RowDefinition Height=\"4*\" />\n        <RowDefinition Height=\"1*\" />\n        <RowDefinition Height=\"4*\" />\n        <RowDefinition Height=\"1*\" />\n    </Grid.RowDefinitions> \n</Grid>\n```", "```cs\n<Label Text=\"&#x26AB\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" />\n```", "```cs\n            <Label Grid.Row=\"0\" Grid.Column=\"0\" Text=\"&#x26AB\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" />\n            <Label Grid.Row=\"0\" Grid.Column=\"2\" Text=\"&#x26AB\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" />\n            <Label Grid.Row=\"0\" Grid.Column=\"4\" Text=\"&#x26AB\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" />\n            <Label Grid.Row=\"0\" Grid.Column=\"6\" Text=\"&#x26AB\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" />\n```", "```cs\n    <Style x:Key=\"dotLabel\"\n            TargetType=\"Label\">\n        <Setter Property=\"Text\" Value=\"&#x26AB;\" />\n        <Setter Property=\"HorizontalOptions\" Value=\"Center\" />\n        <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n    </Style>\n    ```", "```cs\n    <Label Grid.Row=\"0\" Grid.Column=\"0\" Style=\"{StaticResource dotLabel}\" />\n    ```", "```cs\n    <Label Grid.Row=\"0\" Grid.Column=\"0\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"0\" Grid.Column=\"2\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"0\" Grid.Column=\"4\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"0\" Grid.Column=\"6\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"2\" Grid.Column=\"0\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"2\" Grid.Column=\"2\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"2\" Grid.Column=\"4\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"2\" Grid.Column=\"6\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"4\" Grid.Column=\"0\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"4\" Grid.Column=\"2\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"4\" Grid.Column=\"4\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"4\" Grid.Column=\"6\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"6\" Grid.Column=\"0\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"6\" Grid.Column=\"2\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"6\" Grid.Column=\"4\" Style=\"{StaticResource dotLabel}\" />\n    <Label Grid.Row=\"6\" Grid.Column=\"6\" Style=\"{StaticResource dotLabel}\" />\n    ```", "```cs\n    namespace SticksAndStones.Controls;\n    public partial class GamePieceView : ContentView\n    {\n    }\n    ```", "```cs\n    public static readonly BindableProperty GamePiecePositionProperty = BindableProperty.Create(nameof(GamePiecePosition), typeof(string), typeof(GamePieceView), string.Empty);\n    public string GamePiecePosition\n    {\n        get => (string)GetValue(GamePiecePositionProperty);\n        set => SetValue(GamePiecePositionProperty, value);\n    }\n    ```", "```cs\n    public static readonly BindableProperty GamePieceStateProperty = BindableProperty.Create(nameof(GamePieceState), typeof(int), typeof(GamePieceView), 0, BindingMode.TwoWay);\n    public int GamePieceState\n    {\n        get => (int)GetValue(GamePieceStateProperty);\n        set => SetValue(GamePieceStateProperty, value);\n    }\n    ```", "```cs\n    public static readonly BindableProperty GamePieceDirectionProperty = BindableProperty.Create(nameof(GamePieceDirection), typeof(string), typeof(GamePieceView), null);\n    public string GamePieceDirection\n    {\n        get => (string)GetValue(GamePieceDirectionProperty);\n        set => SetValue(GamePieceDirectionProperty, value);\n    }\n    ```", "```cs\n    <ControlTemplate x:Key=\"StickViewControlTemplate\">\n    </ControlTemplate>\n    ```", "```cs\n    <Grid Margin=\"0\" Padding=\"0\">\n        <Label Text=\"{TemplateBinding GamePiecePosition}\" IsVisible=\"False\" HorizontalTextAlignment=\"Center\" VerticalTextAlignment=\"Center\" TextColor=\"Red\" FontAttributes=\"Bold\" >\n        </Label>\n        <Border Padding=\"3\" BackgroundColor=\"Transparent\" StrokeShape=\"RoundRectangle 5\" Stroke=\"Transparent\">\n            <Image Aspect=\"Fill\">\n            </Image>\n        </Border>\n    </Grid>\n    ```", "```cs\n    <Image.Triggers>\n        <DataTrigger TargetType=\"Image\" Binding=\"{TemplateBinding Path=GamePieceState}\" Value=\"0\">\n            <Setter Property=\"IsVisible\" Value=\"False\" />\n        </DataTrigger>\n        <DataTrigger TargetType=\"Image\" Binding=\"{TemplateBinding Path=GamePieceDirection}\" Value=\"Horizontal\">\n             <Setter Property=\"Source\" Value=\"hstick.jpeg\" />\n        </DataTrigger>\n        <DataTrigger TargetType=\"Image\" Binding=\"{TemplateBinding Path=GamePieceDirection}\" Value=\"Vertical\">\n             <Setter Property=\"Source\" Value=\"vstick.jpeg\" />\n        </DataTrigger>\n    </Image.Triggers>\n    ```", "```cs\n    <Border.Triggers>\n        <DataTrigger TargetType=\"Border\" Binding=\"{TemplateBinding GamePieceState}\" Value=\"1\" >\n            <Setter Property=\"Stroke\" Value=\"{StaticResource PlayerOne}\" />\n        </DataTrigger>\n        <DataTrigger TargetType=\"Border\" Binding=\"{TemplateBinding GamePieceState}\" Value=\"-1\" >\n            <Setter Property=\"Stroke\" Value=\"{StaticResource PlayerTwo}\" />\n        </DataTrigger>\n    </Border.Triggers>\n    ```", "```cs\n    <Border.GestureRecognizers>\n        <TapGestureRecognizer Command=\"{Binding Source={RelativeSource AncestorType={x:Type viewModels:GameViewModel}}, Path=SelectStickCommand}\" CommandParameter=\"{TemplateBinding GamePiecePosition}\" />\n    </Border.GestureRecognizers>\n    ```", "```cs\n    <Label.Triggers>\n        <DataTrigger TargetType=\"Label\" Binding=\"{TemplateBinding Path=GamePieceState}\" Value=\"0\">\n            <Setter Property=\"IsVisible\" Value=\"True\" />\n        </DataTrigger>\n    </Label.Triggers>\n    ```", "```cs\n    <ControlTemplate x:Key=\"StoneViewControlTemplate\">\n    </ControlTemplate>\n    ```", "```cs\n    <Border Margin=\"3\" Padding=\"5\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" StrokeShape=\"RoundRectangle 5\" StrokeThickness=\"3\">\n        <Border.Triggers>\n            <DataTrigger TargetType=\"Border\" Binding=\"{TemplateBinding GamePieceState}\" Value=\"0\">\n                <Setter Property=\"IsVisible\" Value=\"False\" />\n            </DataTrigger>\n            <DataTrigger TargetType=\"Border\" Binding=\"{TemplateBinding GamePieceState}\" Value=\"1\" >\n                <Setter Property=\"Stroke\" Value=\"{StaticResource PlayerOne}\" />\n            </DataTrigger>\n            <DataTrigger TargetType=\"Border\" Binding=\"{TemplateBinding GamePieceState}\" Value=\"-1\" >\n                <Setter Property=\"Stroke\" Value=\"{StaticResource PlayerTwo}\" />\n            </DataTrigger>\n        </Border.Triggers>\n        <Image Source=\"stones.jpeg\" Aspect=\"Fill\" />\n    </Border>\n    ```", "```cs\n    <Style TargetType=\"controls:GamePieceView\"\n            Class=\"Stick\">\n        <Setter Property=\"ControlTemplate\"\n                Value=\"{StaticResource StickViewControlTemplate}\" />\n    </Style>\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"0\" Grid.Column=\"1\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"01\" GamePieceState=\"{Binding Game.Sticks[0]}\" GamePieceDirection=\"Horizontal\" />\n    ```", "```cs\n    <Style TargetType=\"controls:GamePieceView\"\n            Class=\"Stone\">\n        <Setter Property=\"ControlTemplate\"\n                Value=\"{StaticResource StoneViewControlTemplate}\" />\n    </Style>\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"0\" Grid.Column=\"1\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"01\" GamePieceState=\"{Binding Game.Sticks[0]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"0\" Grid.Column=\"3\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"02\" GamePieceState=\"{Binding Game.Sticks[1]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"0\" Grid.Column=\"5\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"03\" GamePieceState=\"{Binding Game.Sticks[2]}\" GamePieceDirection=\"Horizontal\" />\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"1\" Grid.Column=\"0\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"04\" GamePieceState=\"{Binding Game.Sticks[3]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"1\" Grid.Column=\"2\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"05\" GamePieceState=\"{Binding Game.Sticks[4]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"1\" Grid.Column=\"4\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"06\" GamePieceState=\"{Binding Game.Sticks[5]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"1\" Grid.Column=\"6\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"07\" GamePieceState=\"{Binding Game.Sticks[6]}\" GamePieceDirection=\"Vertical\" />\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"2\" Grid.Column=\"1\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"08\" GamePieceState=\"{Binding Game.Sticks[7]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"2\" Grid.Column=\"3\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"09\" GamePieceState=\"{Binding Game.Sticks[8]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"2\" Grid.Column=\"5\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"10\" GamePieceState=\"{Binding Game.Sticks[9]}\" GamePieceDirection=\"Horizontal\" />\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"3\" Grid.Column=\"0\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"11\" GamePieceState=\"{Binding Game.Sticks[10]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"3\" Grid.Column=\"2\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"12\" GamePieceState=\"{Binding Game.Sticks[11]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"3\" Grid.Column=\"4\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"13\" GamePieceState=\"{Binding Game.Sticks[12]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"3\" Grid.Column=\"6\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"14\" GamePieceState=\"{Binding Game.Sticks[13]}\" GamePieceDirection=\"Vertical\" />\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"4\" Grid.Column=\"1\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"15\" GamePieceState=\"{Binding Game.Sticks[14]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"4\" Grid.Column=\"3\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"16\" GamePieceState=\"{Binding Game.Sticks[15]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"4\" Grid.Column=\"5\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"17\" GamePieceState=\"{Binding Game.Sticks[16]}\" GamePieceDirection=\"Horizontal\" />\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"5\" Grid.Column=\"0\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"18\" GamePieceState=\"{Binding Game.Sticks[17]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"5\" Grid.Column=\"2\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"19\" GamePieceState=\"{Binding Game.Sticks[18]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"5\" Grid.Column=\"4\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"20\" GamePieceState=\"{Binding Game.Sticks[19]}\" GamePieceDirection=\"Vertical\" />\n    <controls:GamePieceView Grid.Row=\"5\" Grid.Column=\"6\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"21\" GamePieceState=\"{Binding Game.Sticks[20]}\" amePieceDirection=\"Vertical\" />\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"6\" Grid.Column=\"1\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"22\" GamePieceState=\"{Binding Game.Sticks[21]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"6\" Grid.Column=\"3\" StyleClass=\"Stick\"\n                            GamePiecePosition=\"23\" GamePieceState=\"{Binding Game.Sticks[22]}\" GamePieceDirection=\"Horizontal\" />\n    <controls:GamePieceView Grid.Row=\"6\" Grid.Column=\"5\" StyleClass=\"Stick\" \n                            GamePiecePosition=\"24\" GamePieceState=\"{Binding Game.Sticks[23]}\" GamePieceDirection=\"Horizontal\" />\n    ```", "```cs\n    <controls:GamePieceView Grid.Row=\"1\" Grid.Column=\"1\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[0]}\" />\n    <controls:GamePieceView Grid.Row=\"1\" Grid.Column=\"3\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[1]}\" />\n    <controls:GamePieceView Grid.Row=\"1\" Grid.Column=\"5\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[2]}\" />\n    <controls:GamePieceView Grid.Row=\"3\" Grid.Column=\"1\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[3]}\" />\n    <controls:GamePieceView Grid.Row=\"3\" Grid.Column=\"3\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[4]}\" />\n    <controls:GamePieceView Grid.Row=\"3\" Grid.Column=\"5\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[5]}\" />\n    <controls:GamePieceView Grid.Row=\"5\" Grid.Column=\"1\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[6]}\" />\n    <controls:GamePieceView Grid.Row=\"5\" Grid.Column=\"3\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[7]}\" />\n    <controls:GamePieceView Grid.Row=\"5\" Grid.Column=\"5\" StyleClass=\"Stone\" GamePieceState=\"{Binding Game.Stones[8]}\" />\n    ```"]