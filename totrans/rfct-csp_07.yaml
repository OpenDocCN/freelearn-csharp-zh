- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test-Driven Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s continue our discussion of testing and ensuring the quality of our software
    processes by going in-depth with Test-Driven Development.
  prefs: []
  type: TYPE_NORMAL
- en: While this is a book about refactoring and Test-Driven Development is primarily
    intended for future development and bug fixing, it has some key lessons to teach
    us in software quality and the same tools Visual Studio provides to support Test-Driven
    Development can help immensely in the refactoring process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Test-Driven Development?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test-Driven Development with Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use Test-Driven Development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The starting code for this chapter is available from GitHub at [https://github.com/PacktPublishing/Refactoring-with-CSharp](https://github.com/PacktPublishing/Refactoring-with-CSharp)
    in the `Chapter07/Ch7BeginningCode` folder.
  prefs: []
  type: TYPE_NORMAL
- en: What is Test-Driven Development?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Test-driven Development** (**TDD**) is the process of writing your tests
    *before* you write your code for a new feature or to implement a new fix.'
  prefs: []
  type: TYPE_NORMAL
- en: Under TDD, you first write a test for the feature you’re trying to implement
    or a test to reproduce the bug you’re about to fix. You do this in the most ideal
    way possible, which may even involve classes or methods that don’t exist at the
    start of your test.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you do the minimum amount of work needed to make your code successfully
    compile. This isn’t to say that it runs perfectly or does the thing it is trying
    to do, in fact, you’re trying to start out with a red failing test that indicates
    your feature or fix doesn’t work.
  prefs: []
  type: TYPE_NORMAL
- en: This makes sense when you consider that at this point you haven’t implemented
    the new feature or made the fix to the code. So, the test *should* be a failing
    test.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you write the minimum amount of code required to make your test pass.
    In this step, you are doing what you need to do to meet the specific requirement
    you are trying to address. Once you are finished, your test should turn into a
    green passing test.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you refactor the code you added to implement your feature or fix
    and you refactor your test code as well; taking care to continue to run your unit
    tests to ensure you haven’t broken anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’re satisfied with the state of your new code and your test, you look
    at the next requirement on the current work item you’re working on, write a test
    for that, and repeat the process until you have met all requirements. This process
    is illustrated in *Figure 7**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – The Test-Driven Development Cycle](img/B21324_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – The Test-Driven Development Cycle
  prefs: []
  type: TYPE_NORMAL
- en: Because you start with a failing red test, move on to a green passing test,
    and then refactor your code before starting again with a new requirement, TDD
    is sometimes referred to as **Red / Green /** **Refactor**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process has a few key benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: You can be confident your code addresses the problem by starting with a test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code written in this way is guaranteed to be covered by your tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you start with how your code should be called by others, it tends to lead
    to more intuitive class designs for others to use later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This process, and its results, make a lot more sense with a practical example.
    So, let’s jump into some code and implement a new feature for Cloudy Skies Airlines.
  prefs: []
  type: TYPE_NORMAL
- en: Test-Driven Development with Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’re starting this chapter with a nearly empty console project and a supporting
    xUnit test project that has already been linked to the main project as shown in
    [*Chapter 6*](B21324_06.xhtml#_idTextAnchor133). The structure of this project
    can be seen in *Figure 7**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Solution Explorer showing only a few files](img/B21324_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Solution Explorer showing only a few files
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of the rest of this section, we’re going to add a new class
    to track frequent flier miles for Cloudy Skies Airlines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The requirements we’ll be addressing (in order) are:'
  prefs: []
  type: TYPE_NORMAL
- en: When a new Frequent Flier Account is created it should start with a starting
    balance of 100 miles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should be able to add miles to the frequent flier account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should be able to mark miles as redeemed as long as this wouldn’t result
    in a negative balance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are not complex requirements, but they should serve as a starting point
    for briefly exploring TDD.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start with the starting balance requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the starting balance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first requirement involves the account starting with 100 miles already registered.
  prefs: []
  type: TYPE_NORMAL
- en: Under the guidance of TDD, we should start with a failing test. Thankfully,
    we already have a `MilesTrackerTests.cs` file, so that gives us a good place to
    start.
  prefs: []
  type: TYPE_NORMAL
- en: However, we have no classes in the `Chapter7` project to represent the mileage
    tracker, which poses a problem for us in writing the arrange section of our first
    test.
  prefs: []
  type: TYPE_NORMAL
- en: While there’s a temptation to “cheat” a bit by creating the class now, let’s
    follow a strictly TDD approach and write the test code in the way we’d prefer
    to interact with the class, knowing that the class doesn’t exist yet and this
    will cause some compiler errors for us in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Such a test might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This test sets an expected starting mileage variable, tries to instantiate a
    `MileageTracker`, and then asserts that the `Balance` property on this new tracker
    should be the expected amount.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a simple, concise, and readable test with a couple of tiny problems:
    `MileageTracker` and its `Balance` property don’t exist in our code yet, meaning
    our code won’t compile.'
  prefs: []
  type: TYPE_NORMAL
- en: Generating classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These compiler issues when creating new classes and new properties are normal
    and to be expected when coding under TDD. Thankfully Visual Studio has a Quick
    Actions refactoring available for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `MileageTracker` in your act section and open the Quick Actions
    menu. From there note the various options to generate this Type as shown in *Figure
    7**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Quick Actions to generate a new Type](img/B21324_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Quick Actions to generate a new Type
  prefs: []
  type: TYPE_NORMAL
- en: These options, as shown here, are great, but most of them would create the new
    class inside the test project which is not what we want. Since we want to customize
    the new type being created, select **Generate** **new type…**
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open the **Generate Type** dialog allowing you to select the type,
    name, and location of the new type being generated. Change the **Project** to
    *Chapter7* and choose to create a new file as shown in *Figure 7**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Generating a new class in the Chapter7 project](img/B21324_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Generating a new class in the Chapter7 project
  prefs: []
  type: TYPE_NORMAL
- en: Next, click `MileageTracker.cs` file to the main project.
  prefs: []
  type: TYPE_NORMAL
- en: This class is boring at present with nothing in it, but we’ll add to it in a
    moment as we work on the next compiler error.
  prefs: []
  type: TYPE_NORMAL
- en: Generating members
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Going back to our test, the *act* section now has no issues, but we still have
    a compiler error on the reference to `Balance` in the *Assert* section as shown
    in *Figure 7**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The C# Compiler pointing out that MileageTracker has Balance
    property](img/B21324_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – The C# Compiler pointing out that MileageTracker has Balance property
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, Visual Studio gives us tools to generate properties. Let’s do that
    now so our code will at least compile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Balance** and then open the **Quick Actions** menu and choose **Generate
    property ‘Balance’** as shown in *Figure 7**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Generating a new property](img/B21324_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Generating a new property
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing so causes Balance to be defined. If you hold down *Ctrl* and click on
    `Balance`, it will navigate you to `MileageTracker.cs` and we’ll see how the class
    is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, Visual Studio had to guess what property type `Balance` was and it guessed
    horribly wrong. Since this will otherwise cause compiler errors, change `Balance`
    to an `int`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With that change, the code should now compile, but let’s make one more change
    before we run our tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that TDD requires us to write the minimum amount of code to do what
    we’re trying to do? Technically, Visual Studio has violated this principle by
    generating both a getter and a setter for our Balance property. In this test,
    we only need to get the `Balance` and not set it via this property. So, let’s
    protect that `Balance` by removing the setter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With this bit of added encapsulation in hand and our code compiling, let’s
    run our test. When you do so, you should see the test fail stating that it expected
    `Balance` to be 100 but it actually was 0 as shown in *Figure 7**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Our first failing test](img/B21324_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Our first failing test
  prefs: []
  type: TYPE_NORMAL
- en: Under TDD, this is exactly what we’d want. We did the minimum amount of work
    to get an ideal test to compile, and that test failed because we hadn’t fully
    implemented the feature.
  prefs: []
  type: TYPE_NORMAL
- en: Moving from red to green and onto refactoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s implement the feature now.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we know that our `MileageTracker` will need some additional things later,
    let’s implement this feature by writing the minimum amount of code possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This now defaults new `MileageTracker` instances to have a starting balance
    of 100, which meets our needs and causes our test to turn green and pass when
    re-run.
  prefs: []
  type: TYPE_NORMAL
- en: With a green test, we now look for opportunities to refactor. While our test
    code is minimal, the `MileageTracker` does have a **magic number** in it. Magic
    numbers are **code smells** that represent some sort of undocumented business
    or technical requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s fix it by introducing a constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code is now easier for others to understand, removing the code smell.
  prefs: []
  type: TYPE_NORMAL
- en: Naming
  prefs: []
  type: TYPE_NORMAL
- en: Naming things in software engineering is hard. It’s possible the name that occurred
    to you for this class or the `SignUpBonus` `const` I introduced was different
    than the names I picked. That’s fine. What’s most important about a name is that
    it *communicates intent* to other developers and is not confused with something
    else in the system. While the name `StartingBalance` would have been fine for
    my const, I chose `SignUpBonus` because I thought it more clearly documented the
    business case for the starting balance.
  prefs: []
  type: TYPE_NORMAL
- en: Running the tests again results in a green passing test once more and there
    are no other obvious targets for refactoring, so we move on to the next requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Adding miles and generating methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our next requirement is *You should be able to add miles to the frequent* *flier
    account*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go back to our tests and add a new test for this requirement. Here we’ll
    again choose the most intuitive syntax and then make the code compile and test
    pass later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This test instantiates a `MileageTracker`, then tries to add 50 miles using
    a not-yet-created `AddMiles` method before verifying that the balance is 150 (100
    starting miles plus the 50 we just added).
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, there is no `AddMiles` method in `MileageTracker`. Let’s add one
    by selecting `AddMiles` and then choosing **Generate method ‘AddMiles’** from
    the **Quick Actions** menu as shown in *Figure 7**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Adding a new method](img/B21324_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Adding a new method
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding this method causes it to be created with the following implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, this is not what the method should do. However, let’s follow strict
    TDD and move through the motions one step at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Since our code now compiles, we can run the test and verify that it fails as
    expected.
  prefs: []
  type: TYPE_NORMAL
- en: Once we’re confident we have a test that can detect failing code we write only
    the minimum amount of code required to get the test to pass. This ensures that
    our tests are sufficient for finding actual problems with the code later.
  prefs: []
  type: TYPE_NORMAL
- en: 'A passing implementation of `AddMiles` might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the code now compiles and results in green tests. This means
    we should move on to refactoring our code as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The test code is still clean and the only refactoring I can see to apply here
    might be to use the expression-bodied members that we covered in [*Chapter 4*](B21324_04.xhtml#_idTextAnchor072).
    However, I’m going to leave the code in its current form as the class is still
    very minimal.
  prefs: []
  type: TYPE_NORMAL
- en: With that requirement complete, let’s move on to our final requirement around
    redeeming miles.
  prefs: []
  type: TYPE_NORMAL
- en: Redeeming miles and refactoring tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our final requirement is *You should be able to mark miles as redeemed if this
    wouldn’t cause a negative balance*. This is a bit more complex than the last requirement
    as it has a condition attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did before, let’s start by writing a test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This test should look very similar to our `AddMiles` test earlier, except it
    calls out to a new `RedeemMiles` method.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the *generate method* refactoring shown earlier to generate that empty
    `RedeemMiles` method and allow the code to compile.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should result in a red failing test as shown in *Figure 7**.9* due to
    the default `throw new NotImplementedException` line in that method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – The remove mileage test failing due to an Exception being thrown](img/B21324_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – The remove mileage test failing due to an Exception being thrown
  prefs: []
  type: TYPE_NORMAL
- en: 'However, moving from red to green is again trivial here by mirroring what we
    did for `AddMiles`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This gets our test to pass and so we move on to looking for refactoring options.
    This code isn’t bad, so we continue to look for the next requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we haven’t fully met the requirement we were trying to solve
    because we don’t cover trying to redeem more miles than are in an account. Let’s
    write a new test for that scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This test creates an account and takes note of its starting balance. The test
    then attempts to withdraw more miles than accounts start with and verifies that
    the ending balance is equal to the starting balance.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t rely on any new methods in the tracker. As a result, our code compiles
    without changes. However, running this test results in a failure stating that
    balance was expected to be 100 but was -2400 instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a red test in hand, let’s modify the `RedeemMiles` method to make the
    test green:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we check to make sure we have enough miles to fulfill the request and only
    reduce the mileage if that condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the tests again results in a full set of passing tests as shown in
    *Figure 7**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Four passing tests around mileage](img/B21324_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Four passing tests around mileage
  prefs: []
  type: TYPE_NORMAL
- en: With a passing test in hand, we now look at refactoring. Since the `MileageTracker`
    is succinct and clear, we’ll move on to looking at our tests.
  prefs: []
  type: TYPE_NORMAL
- en: What about exceptions?
  prefs: []
  type: TYPE_NORMAL
- en: Right now `RedeemMiles` will silently fail if you request more miles than desired,
    which might raise some alarm bells for you as a developer. In a real-world application,
    you’d probably want this method to either return a bool indicating if the redemption
    was successful or to throw an exception if the redemption was not possible. Both
    of these scenarios could be handled in TDD as additional requirements to implement,
    such as “If we try to redeem more miles than possible, an `InvalidOperationException`
    should be thrown”.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at our tests, we do see that our `RemoveMileageShouldDecreaseBalance`
    and `RemoveMileageShouldPreventNegativeBalance` do similar things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to the duplication between tests, we should combine these into a `Theory`
    with `InlineData` lines representing individual test cases. This would look something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This form allows many tests to add an initial amount to the balance, redeem
    some number of miles, and then verify the result matches the expected balance.
    This also lets us easily add new scenarios as we identify them.
  prefs: []
  type: TYPE_NORMAL
- en: However, the name of the method is less meaningful than the more specific names
    we could use with individual `Fact` tests.
  prefs: []
  type: TYPE_NORMAL
- en: With passing tests and refactoring complete, we now move on to either the next
    requirement in this feature or the next work item in our queue. Let’s close the
    chapter by talking about TDD at a high level and when it’s right to use in your
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: When to use Test-Driven Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TDD is not always a good match for every task. Some tasks, such as highly visual
    user interface design may not fit into the TDD workflow very well, while others
    such as fixing an error observed in production or adding a new special case to
    a calculation are almost ideal for TDD.
  prefs: []
  type: TYPE_NORMAL
- en: Using TDD results in code that is generally easier to understand, has perfect
    or near-perfect code coverage on tests, and encourages refactoring along the way.
  prefs: []
  type: TYPE_NORMAL
- en: Many developers follow TDD but don’t follow it as strictly as outlined in this
    chapter. For example, instead of just generating a method, they may go ahead and
    implement the method and write additional argument validation code not required
    by their specific test.
  prefs: []
  type: TYPE_NORMAL
- en: Such deviations from TDD are common and often acceptable, though they usually
    result in a few pieces of code being added that don’t have supporting tests.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, it’s up to you and your team to determine what works best for you
    and the work that you do, but I can tell you that projects I work on where TDD
    is possible tend to rapidly reach better quality levels, encourage more refactoring,
    and have better long-term success.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered Test-Driven Development (TDD) and showed how its
    process involves writing only the minimum possible amount of code to get to a
    failing test – make that test pass with the minimum amount of code needed – then,
    refactor all code as needed before moving on to the next requirement or work item.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw how Visual Studio has Quick Actions that allow you to generate types,
    properties, and methods and support your efforts in following TDD.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll talk about anti-patterns that can lead to unmaintainable
    code and SOLID principles that help your code be robust and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What areas of your code would be a good fit for using TDD?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What areas might be harder to apply TDD to?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find more information about materials discussed in this chapter at
    this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Test-Driven Development* *Walkthrough:* [https://learn.microsoft.com/en-us/visualstudio/test/quick-start-test-driven-development-with-test-explorer](https://learn.microsoft.com/en-us/visualstudio/test/quick-start-test-driven-development-with-test-explorer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Is TDD* *Dead?*: [https://martinfowler.com/articles/is-tdd-dead/](https://martinfowler.com/articles/is-tdd-dead/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
