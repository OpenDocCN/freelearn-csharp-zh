["```cs\npublic class AttractionRepository\n{\n    private readonly ThemeParkDbContext _context;\n    public AttractionRepository(ThemeParkDbContext context)\n    {\n        _context = context;\n    }\n    public List<Attraction> GetAttractions()\n    {\n        return _context.Attractions.ToList();\n    }\n    public Attraction GetAttraction(int id)\n    {\n        return _context.Attractions.FirstOrDefault(e => e.Id == id,             null);\n    }\n}\n```", "```cs\npublic class AttractionService\n{\n    private readonly ThemeParkDbContext _context;\n    public AttractionService(ThemeParkDbContext context)\n    {\n        _context = context;\n    }\n}\n```", "```cs\npublic interface ISpecification<T>\n{\n    Expression<Func<T, bool>> Filter { get; }\n    Expression<Func<T, object>> OrderBy { get; }\n    Expression<Func<T, object>> OrderByDescending { get; }\n    List<Expression<Func<T, object>>> Includes { get; }\n    Expression<Func<T, object>> GroupBy { get; }\n}\n```", "```cs\npublic class Specification<TEntity>: ISpecification<TEntity> where TEntity: class\n{\n    public Expression<Func<TEntity, bool>> Filter { get; }\n    public Expression<Func<TEntity, object>> OrderBy { get; set; } =         null!;\n    public Expression<Func<TEntity, object>> OrderByDescending { get;         set; } = null!;\n    public Expression<Func<TEntity, object>> GroupBy { get; set; } =         null!;\n    public List<Expression<Func<TEntity, object>>> Includes { get; } =         null!;\n    public Specification(Expression<Func<TEntity, bool>> filter)\n    {\n        Filter = filter;\n    }\n}\n```", "```cs\npublic static class SpecificationBuilder<TEntity> where TEntity: class\n{\n    public static IQueryable<TEntity> GetQuery(IQueryable<TEntity> inputQuery,\n        ISpecification<TEntity> specification)\n    {\n        var query = inputQuery;\n        if (specification == null)\n        {\n            return query;\n        }\n        if (specification.Filter != null)\n        {\n            query = query.Where(specification.Filter);\n        }\n        if (specification.Includes != null\n            && specification.Includes.Any())\n        {\n            foreach (var include in specification.Includes)\n            {\n                query = query.Include(include);\n            }\n        }\n        if (specification.OrderBy != null)\n        {\n            query = query\n                .OrderBy(specification.OrderBy);\n        }\n        else if (specification.OrderByDescending != null)\n        {\n            query = query\n                .OrderByDescending(specification.OrderByDescending);\n        }\n        if (specification.GroupBy != null)\n        {\n            query = query\n                .GroupBy(specification.GroupBy)\n                .SelectMany(x => x);\n        }\n        return query;\n    }\n}\n```", "```cs\npublic abstract class BaseSpecificationService<TEntity> where TEntity : class\n{\n    private readonly ThemeParkDbContext _context;\n    protected BaseSpecificationService(ThemeParkDbContext context)\n    {\n        _context = context;\n    }\n    protected ISpecification<TEntity> Specification { get; set; } =         null!;\n    protected IQueryable<TEntity> GetQuery()\n    {\n        return SpecificationBuilder<TEntity>\n            .GetQuery(_context.Set<TEntity>().AsQueryable(),                  Specification);\n    }\n}\n```", "```cs\npublic class Product\n{\n    public string Name { get; private set; }\n    public int Price { get; private set; }\n}\n```", "```cs\npublic class GetProductsLessThanFiveDollars : BaseSpecificationService<Product>\n{\n    public GetProductsLessThanFiveDollars(InventoryDbContext context) : base(context)\n    {\n        Specification = new Specification<Product>(product => product.Price <= 5);\n    }\n}\n```", "```cs\nvar productsBelowFiveDollarsSpecification = new GetProductsLessThanFiveDollars(_context);\nvar results = productsBelowFiveDollarsSpecification.GetQuery().ToList();\n```", "```cs\npublic interface IThemeParkDbContext\n{\n    DbSet<Attraction> Attractions { get; set; }\n    DbSet<Location> Locations { get; set; }\n    DbSet<TEntity> Set<TEntity>() where TEntity : class;\n    DatabaseFacade Database { get; }\n}\n```", "```cs\npublic static class AttractionExtensions\n{\n    public static List<Attraction> GetAttractions(this IThemeParkDbContext context)\n    {\n        return context.Attractions.ToList();\n    }\n    public static Attraction GetAttraction(this IThemeParkDbContext context, int id)\n    {\n        return context.Attractions\n            .Include(t => t.Location)\n            .FirstOrDefault(e => e!.Id == id, null)!;\n    }\n}\n```", "```cs\npublic static class LocationExtensions\n{\n    public static List<Location> GetLocations(this IThemeParkDbContext context)\n    {\n        return context.Locations.ToList();\n    }\n    public static Location GetLocation(this IThemeParkDbContext context, int id)\n    {\n        return context.Locations.FirstOrDefault(e => e!.Id == id, null)!;\n    }\n}\n```", "```cs\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        if (!optionsBuilder.IsConfigured)\n        {\n            optionsBuilder.LogTo(Console.WriteLine);\n        }\n    }\n```", "```cs\n    SELECT\n         [ID]\n         ,[Name]\n         ,[LocationID]\n    FROM [dbo].Attraction\n    FOR JSON AUTO, INCLUDE_NULL_VALUES\n    ```", "```cs\n    [{\n            \"ID\": 1,\n            \"Name\": \"Twirly Ride\",\n            \"LocationID\": 2\n        }, {\n            \"ID\": 2,\n            \"Name\": \"Mine car Coaster\",\n            \"LocationID\": 5\n        }, {\n            \"ID\": 3,\n            \"Name\": \"Haunted House\",\n            \"LocationID\": 3\n        }, {\n            \"ID\": 4,\n            \"Name\": \"Dragon Ride\",\n            \"LocationID\": 2\n        }, {\n            \"ID\": 5,\n            \"Name\": \"Gift Shop\",\n            \"LocationID\": 1\n        }, {\n            \"ID\": 6,\n            \"Name\": \"Space Ride\",\n            \"LocationID\": 4\n        }, {\n            \"ID\": 7,\n            \"Name\": \"Shootout at OK Corral\\/Lazer Tag\",\n            \"LocationID\": 5\n        }\n    ]\n    ```", "```cs\n    var records = JsonSerializer.Deserialize<Attraction[]>(\n        SeedResource.AttractionRecords);\n    if (records != null)\n    {\n        builder.HasData(records);\n    }\n    ```", "```cs\nvar products = this.Products.ToList().Where(r => r.CategoryId == 15);\n```", "```cs\nvar products = this.Products.Where(r => r.CategoryId == 15).ToList();\n```", "```cs\npublic Attraction GetAttraction(int id)\n{\n    return _context.Attractions\n        .AsNoTracking()\n        .FirstOrDefault(e => e!.Id == id, null)!;\n}\n```", "```cs\nvar config = new MapperConfiguration(cfg =>\n    cfg.CreateMap<Attraction, AttractionDto>());\nIMapper mapper = new Mapper(config);\nvar dest = mapper.Map<Attraction, AttractionDto>(attractionObject);\n```", "```cs\nUpdate-Database\n```", "```cs\npublic List<Attraction> GetAttractions()\n{\n    return _context.Attractions\n        .ToList();\n}\n```", "```cs\npublic async Task<List<Attraction>> GetAttractionsAsync()\n{\n    return await _context.Attractions\n        .ToListAsync();\n}\n```", "```cs\npublic async Task<List<Attraction>> GetAttractionsAsync()\n{\n    return await _context.Attractions\n        .AsNoTracking()\n        .ToListAsync();\n}\n```", "```cs\npublic async Task<List<Attraction>> GetAttractionsAsync()\n{\n    return await _context.Attractions\n        .AsNoTracking()\n        .Include(r=> r.Location)\n        .ToListAsync();\n}\n```", "```cs\nnamespace EFApplication.DataContext.Models;\npublic partial class Location\n{\n    public int AttractionCount { get; set; }\n}\n```", "```cs\npublic partial class Location\n{\n    [NotMapped]\n    public int AttractionCount => Attractions.Count;\n}\n```"]