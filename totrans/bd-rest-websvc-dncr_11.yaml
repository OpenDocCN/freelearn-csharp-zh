- en: Introduction to Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务简介
- en: So far, we have walked through the RESTful APIs with hands-on examples and created
    small applications. In the previous chapter, we developed an application and discussed
    the RESTful API, security, testing, performance, and deployment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经通过实际操作示例学习了RESTful API，并创建了小型应用程序。在上一章中，我们开发了一个应用程序，并讨论了RESTful API、安全、测试、性能和部署。
- en: This chapter covers a brief introduction to microservices, which is the next
    stop on our RESTful services journey. In this chapter, we will cover the basic
    components of microservices and use an example of a monolithic application that
    is being converted into microservices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了微服务，这是我们在RESTful服务旅程中的下一站。在本章中，我们将介绍微服务的基本组件，并使用一个正在转换为微服务的单体应用程序的示例。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: What are microservices?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是微服务？
- en: Communication in microservices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务中的通信
- en: Microservices testing strategy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务测试策略
- en: Scalability
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可伸缩性
- en: Microservices ecosystem in ASP.NET Core
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core中的微服务生态系统
- en: Overview of microservices
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务概述
- en: In simple words, when one divides an application or a module into smaller, independent
    services, the outcome is also known as **microservices**. These small pieces can
    also be deployed independently.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，当将应用程序或模块划分为更小、独立的独立服务时，结果也被称为**微服务**。这些小部分也可以独立部署。
- en: If we go back in history, we find that the term microservices was used for the
    first time in 2011 at the workshop of Software Architects. In March 2012, James
    Lewis presented some of his ideas about the term microservices. By the end of
    2013, various groups in the IT industry had started discussing microservices,
    and by 2014, microservices had become popular enough to be considered a serious
    contender for large enterprises.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾历史，我们会发现微服务这个术语最早在2011年的软件架构师研讨会上被使用。2012年3月，詹姆斯·刘易斯（James Lewis）提出了一些关于微服务术语的想法。到2013年底，IT行业的各个群体开始讨论微服务，到2014年，微服务已经足够流行，被认为是大型企业的一个严肃的竞争者。
- en: 'So, what are microservices really? There are a plethora of definitions so you
    can define microservices as per your own understanding of the term or what kind
    of use cases and discussions you may have. Let us look at a microservices definition
    according to an official website: (source: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview-microservices](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview-microservices))'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，微服务到底是什么呢？有各种各样的定义，因此您可以按照自己对术语的理解或可能遇到的使用案例和讨论来定义微服务。让我们看看一个官方网站上的微服务定义：（来源：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview-microservices](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview-microservices)）
- en: <q>*"Microservice applications are composed of small, independently versioned,
    and scalable customer-focused services that communicate with each other over standard
    protocols with well-defined interfaces."*</q>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <q>"微服务应用程序由小型、独立版本、可伸缩且以客户为中心的服务组成，这些服务通过标准协议和定义良好的接口相互通信。"</q>
- en: Microservice attributes
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务属性
- en: 'In the previous section, we saw that microservices are completely independent
    of other services in the system and run in their own processes. As per this definition,
    there are certain attributes that define microservices to be completely independent
    from other components. Let’s first look at what the core attributes are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们了解到微服务在系统中与其他服务完全独立，并在它们自己的进程中运行。根据这个定义，有一些属性定义了微服务与其他组件完全独立。让我们首先看看核心属性是什么：
- en: '**Isolated functionality**: Don’t try to achieve too much within a single microservice.
    Instead, design it for only one reason and do that well. This means that the design
    should try and avoid any dependency on any other part of the functionality. This
    part is extremely important in my opinion as it lays the foundation for the rest
    of the attributes.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立的功能性**：不要试图在单个微服务中实现太多功能。相反，只为一个原因设计它，并且做好这一点。这意味着设计应该尽量避免对功能其他部分的任何依赖。在我看来，这部分非常重要，因为它为其他属性奠定了基础。'
- en: '**Isolated data and state**: Each service owns its data and its state. It does
    not share ownership with any other application or part.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立的数据和状态**：每个服务拥有自己的数据和状态。它不与其他应用程序或部分共享所有权。'
- en: '**Independent deployment**: A cumulative effect of the preceding points. This
    helps you with continuous deployment.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立部署**：前述点的累积效应。这有助于你进行持续部署。'
- en: '**Technology adoption**: This is easier when the first two points have been
    taken care of, since there is no longer an impact on any of the existing modules.
    The beauty here lies in the fact that you could have two different versions of
    a microservice in two different technologies. Extremely beneficial.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术采用**：当前两点得到妥善处理时，这会更容易，因为不再对任何现有模块产生影响。这里的美丽之处在于，你可以在两种不同的技术中拥有两个不同版本的微服务。这非常有益。'
- en: '**Consistency and resiliency**: It has to be impeccable. If you can’t rely
    on a service to return within a speculated period or rely on it to be always available,
    then the whole purpose of it is lost.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性和弹性**：这必须完美无缺。如果你不能依赖服务在预期的期限内返回，或者依赖它始终可用，那么它的整个目的就失去了。'
- en: Understanding microservice architecture
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解微服务架构
- en: We have already discussed how the microservice architecture is a way to develop
    a single application containing a set of smaller services. These services are
    independent and run in their own processes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了微服务架构是如何通过包含一组较小服务的单个应用程序来开发的一种方式。这些服务是独立的，并且在自己的进程中运行。
- en: In other words, we can say that microservices are a way to segregate our services
    so they can be handled independently of each other for design, development, deployment,
    and upgrade purposes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们可以这样说，微服务是一种将我们的服务分离出来的方式，这样它们就可以在设计和开发、部署和升级方面独立于彼此处理。
- en: 'Microservices have a lot of benefits, which are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务有很多好处，如下所示：
- en: '**Smaller codebase**: Each service is small, therefore easier to develop and
    deploy as a unit'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更小的代码库**：每个服务都很小，因此更容易作为一个单元进行开发和部署。'
- en: '**Ease of independent environment**: With the separation of services, all developers
    work independently, deploy independently, and no one is bothered about any module
    dependencies'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立环境的便利性**：随着服务的分离，所有开发者都可以独立工作，独立部署，没有人会担心任何模块的依赖性。'
- en: Communication in microservices
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务中的通信
- en: It is very important to consider the choice of messaging mechanisms carefully
    when dealing with a microservice architecture. If this one aspect is ignored,
    then it can compromise the entire purpose of designing with a microservices architecture.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理微服务架构时，仔细考虑消息机制的选择非常重要。如果忽略了这个方面，那么它可能会损害使用微服务架构设计的整个目的。
- en: Let's move ahead and consider our choices for both synchronous and asynchronous
    messaging along with different messaging formats.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，考虑我们同步和异步消息的选择，以及不同的消息格式。
- en: Synchronous messaging
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步消息
- en: When a timely response is expected from a service by a system and the system
    waits on it till a response is received from the service, it is called **synchronous
    messaging**. REST is one of the most sought-after choices in a microservice architecture.
    It is simple and supports HTTP request-response, therefore there is no need to
    look for an alternative. This is also one of the reasons that most implementations
    of microservices use HTTP (API-based styles).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统期望从服务中获得及时响应，并且系统会等待直到收到服务的响应时，这被称为**同步消息**。REST是微服务架构中最受欢迎的选择之一。它简单且支持HTTP请求-响应，因此不需要寻找替代方案。这也是大多数微服务实现使用HTTP（基于API的风格）的原因之一。
- en: Asynchronous messaging
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步消息
- en: When a system is not immediately expecting a response from the service and it
    can continue processing without blocking the call, it is called as **asynchronous
    messaging**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统不需要立即从服务中获取响应，并且可以在不阻塞调用的情况下继续处理时，这被称为**异步消息**。
- en: Message formats
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息格式
- en: Over the past few years, working with MVC and the like has got me hooked on
    the JSON format. You could also consider XML. Both these formats would do fine
    on HTTP with API style resource. Binary message formats are also available in
    case you need to use one. We are not recommending any formats here, you can go
    with any selected message format.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，使用MVC和类似技术让我对JSON格式产生了依赖。你也可以考虑XML。这两种格式在HTTP上使用API风格资源时都表现良好。如果你需要使用二进制消息格式，也是可用的。我们在这里不推荐任何格式，你可以选择任何你喜欢的消息格式。
- en: Why we should use microservices
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们应该使用微服务
- en: 'Tremendous patterns and architectures have been explored, with some gaining
    popularity and others losing the battle for internet traffic. Each solution has
    its own advantages and disadvantages so it has become increasingly important for
    companies to respond quickly to fundamental demands such as scalability, high
    performance, and easy deployment. Any single aspect found not to be cost-effective
    could easily impact large businesses negatively, making the difference between
    a profitable and an unprofitable venture. The following diagram highlights the
    advantages of opting Microservices:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 已经探索了大量的模式和架构，其中一些获得了流行，而另一些则在争夺互联网流量的战斗中败下阵来。每个解决方案都有其自身的优缺点，因此对于公司来说，快速响应诸如可扩展性、高性能和易于部署等基本需求变得越来越重要。任何被发现不具备成本效益的单一方面都可能对大型企业产生负面影响，从而在盈利和非盈利企业之间造成差异。以下图表突出了选择微服务架构的优势：
- en: '![](img/d5c09102-7af7-4006-bdbf-567d945b720c.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d5c09102-7af7-4006-bdbf-567d945b720c.png)'
- en: This is where we see microservices coming to the rescue of enterprise system
    architects. They can ensure their designs don't have any problems with the help
    of this architectural style. It is also important to consider the fact that this
    objective is met in a cost-effective and timely manner.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正是在这里，我们看到微服务成为企业系统架构师的救星。他们可以利用这种架构风格确保他们的设计没有问题。同时，考虑这样一个事实也很重要，即这个目标是以成本效益和及时的方式实现的。
- en: How a microservice architecture works
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务架构是如何工作的
- en: 'In previous sections, we discussed the microservice architecture and tried
    to shine more light on this term. Now, you can see how a microservices architecture
    might work; you can use any combination according to your own design approach.
    Here are a few points to remember when working on a microservice architecture:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们讨论了微服务架构，并试图对这个术语进行更深入的探讨。现在，您可以看到微服务架构可能的工作方式；您可以根据自己的设计方法使用任何组合。以下是一些在微服务架构工作中需要记住的要点：
- en: It is programming for the modern era, where we should follow all SOLID principles.
    It’s object-oriented programming (OOP).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是面向现代时代的编程，我们应该遵循所有SOLID原则。它是面向对象编程（OOP）。
- en: It is the best way to expose functionality to other or external components so
    any programming language can use the functionality without adhering to any user
    interfaces or services (web services, API, REST services, and so on.)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是向其他或外部组件公开功能的最有效方式，因此任何编程语言都可以使用这些功能，而无需遵循任何用户界面或服务（如Web服务、API、REST服务等）。
- en: The whole system works in collaboration, which is not interconnected and interdependent.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个系统协同工作，而不是相互连接和依赖。
- en: Each component is responsible for its own functionality.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组件都负责其自身的功能。
- en: It segregates code. Segregated code is reusable.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将代码分离。分离的代码是可重用的。
- en: Advantages of microservices
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务的优势
- en: 'The following are some advantages of microservices:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些微服务的优势：
- en: You don’t have to invest to make the entire application scalable. In terms of
    a shopping cart, we could simply load balance the product search module and order-processing
    module while leaving less frequently used operation services such as inventory
    management, order cancellation, and delivery confirmation.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不必投资使整个应用程序可扩展。以购物车为例，我们可以简单地负载均衡产品搜索模块和订单处理模块，同时保留使用频率较低的运营服务，如库存管理、订单取消和交货确认。
- en: We can easily match an organization’s departmental hierarchies. With different
    departments sponsoring product development in large enterprises this can be a
    huge advantage.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以轻松地匹配组织的部门层级。在大企业中，不同的部门赞助产品开发，这可以是一个巨大的优势。
- en: As the code is already done in a way that it is not dependent on code from other
    modules with isolated functionality, if done right, then the chances of a change
    in one microservice affecting another microservice is very small.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于代码已经以不依赖于其他具有独立功能模块的代码的方式进行编写，如果做得正确，那么一个微服务中的更改影响另一个微服务的可能性非常小。
- en: Since the entire application is more like a group of ecosystems that are isolated
    from each other – we can deploy one microservice at a time if required. Failure
    of any one service need not bring the entire system down.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于整个应用程序更像是一组相互隔离的生态系统——如果需要，我们可以一次部署一个微服务。任何单个服务的故障都不必导致整个系统崩溃。
- en: You could port a single microservice or a whole bunch of them overnight to a
    different technology without your users even knowing it. And it goes without saying
    that you need to maintain those service contracts.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在一夜之间将单个微服务或一大堆微服务迁移到不同的技术，而用户甚至可能都不知道。不用说，你需要维护这些服务合同。
- en: Comes implied but a word of caution is necessary here. Make sure that your asynchronous
    call is used well and synchronous ones are not really blocking the whole flow
    of information. Use data partitioning well. We will come to this a little later,
    so don’t worry now.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然不言而喻，但在此处仍需提醒注意。确保你的异步调用被正确使用，而同步调用不会真正阻塞整个信息流。合理使用数据分区。我们稍后会详细讨论这一点，所以现在不必担心。
- en: In a competitive world, it is a definite advantage as users tend to lose interest
    quickly if you are slow to respond to new feature requests or the adoption of
    a new technology within your system.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在竞争激烈的世界中，如果你对新的功能请求或系统内新技术的采用反应迟缓，用户很容易迅速失去兴趣，这无疑是一个明显的优势。
- en: Prerequisites of a microservice architecture
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务架构的先决条件
- en: 'After the adoption of a microservice architecture is agreed upon, it is wise
    to have the following prerequisites in place:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在同意采用微服务架构之后，明智的做法是确保以下先决条件已经到位：
- en: Requirements become more demanding with a quicker turnaround from development.
    It requires you to deploy and test as quickly as you can. If it is just a small
    number of services, then it is not a problem. However, with the number of services
    going up this could very quickly challenge the existing infrastructure and practices.
    For example—your Q/A and staging environment may no longer suffice to test the
    number of builds that are coming back from the development team.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着开发周期的缩短，需求变得更加紧迫。这要求你尽可能快地部署和测试。如果只是少量服务，那么这不成问题。然而，随着服务数量的增加，这可能会很快对现有的基础设施和实践构成挑战。例如——你的质量保证和预发布环境可能不再足以测试从开发团队返回的构建数量。
- en: As the application goes to the public domain, it won't be long before the age-old
    script of development versus Q/A is played out again. The difference this time
    is that the business is at stake. So, you need to be prepared to respond quickly in
    an automated manner to identify the root cause when required.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用程序进入公共领域时，很快就会再次上演开发与质量保证之间的古老剧本。这次的不同之处在于，业务处于风险之中。因此，你需要准备好以自动化的方式快速响应，在需要时识别根本原因。
- en: With an increasing number of microservices, you will quickly need a way to monitor
    the functioning and health of the entire system for any possible bottlenecks or
    issues. Without a means of monitoring the status of the deployed microservices
    and the resultant business function, it is impossible for any team to take a proactive
    deployment approach.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着微服务数量的增加，你很快就需要一种方法来监控整个系统的运行状况和健康状态，以发现任何可能的瓶颈或问题。如果没有监控已部署微服务和由此产生的业务功能状态的手段，任何团队都无法采取主动部署的方法。
- en: Scaling
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Scaling is one of the biggest challenges that any business faces when trying
    to cater to an increased user base.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性是任何企业在试图满足不断增长的用户基础时面临的最大挑战之一。
- en: Scalability is simply the capability of a system/program to handle a growing
    work. In other words, scalability is the ability of the system/program to scale.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性简单来说就是系统/程序处理不断增长工作的能力。换句话说，可扩展性是系统/程序扩展的能力。
- en: The scalability of a system is its ability to handle an increasing/increased
    load of work. There are two main strategies or types of scalability in which we
    can scale our application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的可扩展性是指其处理不断增加/增加的工作负载的能力。我们可以采用两种主要策略或类型来扩展我们的应用程序。
- en: Vertical scaling
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 垂直扩展
- en: In vertical scaling, we analyze our existing application to find out the parts
    of the modules that are causing the application to slow down due to higher execution
    time. Making the code more efficient could be one strategy, so less memory is
    consumed. This exercise of reducing memory consumption could be for a specific
    module or the whole application. On the other hand, due to obvious challenges
    involved in this strategy, instead of changing an application, we could add more
    resources to our existing IT infrastructure such as upgrading the RAM, adding
    more disk drives, and so on. Both of these paths in vertical scaling have a limit
    to how beneficial they are, as after a specific point in time—the resulting benefit
    would plateau out. It is important here to keep this fact in mind; this kind of
    scaling requires downtime.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在垂直扩展中，我们分析现有应用程序，找出由于执行时间较长而使应用程序变慢的模块部分。使代码更高效可能是一种策略，这样可以减少内存消耗。这种减少内存消耗的练习可以是针对特定模块或整个应用程序。另一方面，由于这种策略涉及明显的挑战，我们可以在不改变应用程序的情况下，向现有的IT基础设施添加更多资源，例如升级RAM、添加更多磁盘驱动器等。在垂直扩展的这两条路径中，都有其有益性的极限，因为经过一段时间后，产生的效益将趋于平稳。在这里，重要的是要记住这个事实；这种扩展需要停机时间。
- en: Horizontal scaling
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平扩展
- en: In horizontal scaling, we dig deeper into modules that are showing a higher
    impact on the overall performance. We look at factors such as high concurrency
    to enable our application to serve an increased user base. We would also implement
    load balancing to process a greater amount of work. The option of adding more
    servers to the cluster does not require downtime, which is a definite advantage.
    It can differ from case to case, so we need to check whether the additional costs
    of power, licenses, and cooling is worthwhile up to that point.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在水平扩展中，我们深入挖掘对整体性能影响较大的模块。我们考虑诸如高并发等因素，以使我们的应用程序能够服务更多的用户基础。我们还会实施负载均衡以处理更多的任务。向集群添加更多服务器的选项不需要停机时间，这无疑是一个优势。它可能因情况而异，因此我们需要检查额外的电力、许可证和冷却成本是否值得。
- en: DevOps culture
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps文化
- en: With the help of DevOps, a team should emphasize the collaboration of the development
    team and another operational team. We should set up a system where development,
    Q/A, and the infrastructure teamwork in collaboration.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps的帮助下，团队应该强调开发团队和另一个运营团队的协作。我们应该建立一个系统，让开发、Q/A和基础设施团队协作工作。
- en: Automation
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化
- en: Infrastructure setup can be a very time-consuming job. A developer can be idle
    while the infrastructure is being readied for him. He or she will be waiting for
    some time before joining the team and contributing. The process of infrastructure
    setup should not stop a developer from becoming productive, as it would reduce
    overall productivity. This should be an automated process. With the use of Chef
    or PowerShell, we can easily create our virtual machines and quickly ramp up the
    developer count as and when required. In that way, our developer can be ready
    to start work from day one of joining the team.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施设置可能是一项非常耗时的工作。在基础设施为开发者准备期间，开发者可能会闲置。在加入团队并贡献之前，他们需要等待一段时间。基础设施设置的过程不应该阻止开发者变得高效，因为这会降低整体生产力。这应该是一个自动化的过程。使用Chef或PowerShell，我们可以轻松创建虚拟机，并在需要时快速增加开发者的数量。这样，我们的开发者可以从加入团队的当天开始工作。
- en: Testing
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Testing is a critical task of any application and its more complex when working
    with microservices. We have to divide our testing approach as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是任何应用程序的关键任务，当与微服务一起工作时，测试变得更加复杂。我们必须将我们的测试方法划分为以下几部分：
- en: With adopt TDD, a developer is required to test his or her own code. The test
    is simply another piece of code that validates whether the functionality is working
    as intended. If any functionality is found to be not satisfying the test code,
    the corresponding unit test would fail. That functionality can be easily fixed
    as it is known where the problem is. In order to achieve this, we can utilize
    frameworks such as MSTest or unit tests.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用TDD（测试驱动开发），开发者需要测试自己的代码。测试只是另一段代码，用于验证功能是否按预期工作。如果发现任何功能不符合测试代码，相应的单元测试将失败。由于已知问题所在，这种功能可以很容易地修复。为了实现这一点，我们可以利用MSTest或单元测试等框架。
- en: The Q/A team can use scripts to automate their tasks. They can create scripts
    by utilizing QTP or the Selenium framework.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q/A团队可以使用脚本来自动化他们的任务。他们可以通过使用QTP或Selenium框架来创建脚本。
- en: Deployment
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: Deployment is a huge challenge. To overcome this, we can introduce CI. In this
    process, we need to set up a CI server. With the introduction of CI, the entire
    process is now automated. As soon as the code is checked in by any team member,
    using version control TFS or Git in our case, the CI process kicks into action.
    It ensures that the new code is built and unit tests are run along with the integration
    test. In both scenarios, a successful build or otherwise, the team is alerted
    of the outcome. This enables the team to respond quickly to issues.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 部署是一个巨大的挑战。为了克服这个挑战，我们可以引入持续集成（CI）。在这个过程中，我们需要设置一个CI服务器。随着CI的引入，整个过程现在已经自动化。一旦任何团队成员将代码提交到版本控制系统中，例如我们使用TFS或Git，CI过程就会启动。它确保新代码被构建，并且运行单元测试和集成测试。在两种情况下，无论是成功构建还是其他情况，团队都会被通知结果。这使得团队能够快速响应问题。
- en: Next, we have continuous deployment. Here, we introduce various environments,
    namely a development environment, a staging environment, a Q/A environment, and
    so on. Now, as soon as the code is checked-in by any team member, continuous integration
    kicks into action. It invokes unit/integration test suites, builds the system,
    and pushes it out to the various environments we have set up. In this way, the
    turnaround time of the development team to provide a suitable build for Q/A is
    reduced.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有持续部署。在这里，我们引入了各种环境，例如开发环境、预发布环境、Q/A环境等。现在，一旦任何团队成员将代码提交，持续集成就会启动。它调用单元/集成测试套件，构建系统，并将其推送到我们已设置的各种环境中。这样，开发团队提供适合Q/A的构建的周转时间就减少了。
- en: Microservices ecosystem in ASP.NET Core
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core中的微服务生态系统
- en: Whenever I think about a microservices eco in an ASP.NET Core system I think
    about various small APIs, async programming, callbacks, event triggering, and
    so on. Actually, the ecosystem is much bigger and somehow more complex.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我想到ASP.NET Core系统中的微服务生态时，我会想到各种小型API、异步编程、回调、事件触发等。实际上，这个生态系统要大得多，并且某种程度上更复杂。
- en: We have already discussed that the microservice architectural style is a way
    to create small and independent units of a big application. This is not possible
    without the use of various tools and utilities.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过，微服务架构风格是一种创建大型应用程序中小而独立的单元的方式。没有使用各种工具和实用程序，这是不可能实现的。
- en: 'The following diagram is a pictorial overview of a typical microservices architectural
    style that depicts different client requests to various services and how this
    request validates:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表是一个典型的微服务架构风格的图示概述，它描述了不同的客户端请求到各种服务以及如何验证这些请求：
- en: '![](img/7d146cdd-d566-4abe-8651-be846b45fae5.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7d146cdd-d566-4abe-8651-be846b45fae5.png)'
- en: A typical microservice ecosystem consists of the following components, you will
    get an idea about these components in ASP.NET Core in the sections ahead.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的微服务生态系统包括以下组件，你将在接下来的ASP.NET Core部分中了解这些组件。
- en: Azure Service Fabric – microservice platform
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Service Fabric – 微服务平台
- en: A platform is a must-have component for any ecosystem. It supports the system,
    works smoothly, and produces the expected results. Azure Service Fabric is simply
    a platform provided by Microsoft and it is very popular in the microservice ecosystem.
    It provides container deployment and orchestration.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何生态系统来说，平台是一个必备的组件。它支持系统，运行顺畅，并产生预期的结果。Azure Service Fabric是微软提供的一个平台，在微服务生态系统中非常受欢迎。它提供容器部署和编排。
- en: 'Official documentation can be found at: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档可以在以下位置找到：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview)
- en: '"Azure Service Fabric is a distributed systems platform that makes it easy
    to package, deploy, and manage scalable and reliable microservices and containers."'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"Azure Service Fabric是一个分布式系统平台，它使得打包、部署和管理可扩展且可靠的微服务和容器变得容易。"'
- en: Stateless and Stateful services – a service programming model
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无状态和有状态服务 – 一种服务编程模型
- en: 'A robust service programming model is the backbone of a microservices ecosystem.
    One should know what type of service model he/she should use as per his/her requirements:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个健壮的服务编程模型是微服务生态系统的支柱。一个人应该知道根据他的需求应该使用哪种类型的服务模型：
- en: '**Stateless**: Services do not persist any state between requests from the
    client. That is, the service doesn''t know, nor care, that the subsequent request
    has come from the client that has/hasn''t made the previous request. This is the
    best service programming model when we have external data storage. Our service
    can be based on a stateless service programming model that interacts and persists
    data on external database storage.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：服务在客户端请求之间不保留任何状态。也就是说，服务不知道，也不关心后续请求是否来自之前已经或未发起请求的客户端。当我们有外部数据存储时，这是最好的服务编程模型。我们的服务可以基于无状态服务编程模型，该模型与外部数据库存储交互并持久化数据。'
- en: '**Stateful**: Services maintain a mutable state, actively processing or retaining
    state data that is specific to the task for which the service is meant.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有状态**：服务维护一个可变的状态，积极处理或保留特定于服务任务的州数据。'
- en: Communication – a way to exchange data between services
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信 – 服务之间交换数据的方式
- en: If microservices are all about services then communication between services
    should be robust. Communication is a way to exchange data between services. Services
    communicate using Rest API (that is, HTTP calls request/response) and these are
    synchronous by nature.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果微服务都是关于服务的话，那么服务之间的通信应该是健壮的。通信是服务之间交换数据的方式。服务通过 Rest API（即 HTTP 请求/响应调用）进行通信，这些通信本质上是同步的。
- en: When services communicate with each other they are actually exchanging data,
    also called messaging between services. It is very important to consider the choice
    of messaging mechanism carefully when dealing with a microservice architecture.
    If this one aspect is ignored, then it can compromise the entire purpose of designing
    with a microservice architecture. In monolithic applications, this is not a concern
    as the business functionality of components is invoked through function calls.
    On the other hand, this is happening via loosely coupled web-service-level messaging,
    where services are primarily based on SOAP. Microservice messaging mechanisms
    should be simple and lightweight.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务相互通信时，它们实际上是在交换数据，也称为服务间的消息传递。在处理微服务架构时，仔细考虑消息机制的选择非常重要。如果忽略了这个方面，那么它可能会损害使用微服务架构设计的整个目的。在单体应用程序中，这不是一个问题，因为组件的业务功能是通过函数调用调用的。另一方面，这是通过松散耦合的基于
    SOAP 的 Web 服务级别消息传递发生的，其中服务主要基于 SOAP。微服务消息机制应该是简单和轻量的。
- en: There are no set rules for making a choice between various frameworks or protocols
    for a microservice architecture. However, there are a few points worthy of consideration
    here. Firstly, it should be simple enough to implement without adding any complexity
    to your system. Secondly, it should be lightweight enough, keeping in mind the
    fact that the microservice architecture could heavily rely on interservice messaging.
    Let's move ahead and consider our choices for both synchronous and asynchronous
    messaging along with different messaging formats.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，没有固定的规则来选择各种框架或协议。然而，这里有一些值得考虑的点。首先，它应该足够简单，以便在不增加系统复杂性的情况下实现。其次，它应该足够轻量，考虑到微服务架构可能会严重依赖服务间消息传递。让我们继续前进，考虑我们同步和异步消息传递的选择，以及不同的消息格式。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The microservice architecture style provides certain benefits. It makes development
    quick and easy. It allows DevOps (CI and CD) teams to be separated geologically,
    work smoothly, and in sync. An application is divided into small service components
    or pieces so maintenance is easy. This allows the development team to let business
    sponsors choose what industry trends to respond to first. This results in cost
    benefits, better business responses, timely technology adoption, effective scaling,
    and removal of human dependence.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构风格提供了一些好处。它使开发变得快速且简单。它允许 DevOps（CI 和 CD）团队在地理上分离，工作顺利，同步。应用程序被划分为小的服务组件或部分，因此维护变得容易。这使得开发团队能够让业务赞助商首先选择响应哪些行业趋势。这导致了成本效益、更好的业务响应、及时的技术采用、有效的扩展和减少对人类的依赖。
- en: In this chapter, you have gained an idea of typical microservice architectural
    styles and microservice ecosystems in ASP.NET.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已对典型的微服务架构风格和 ASP.NET 中的微服务生态系统有了了解。
- en: 'Now, I suggest you read the following on microservices to enhance your skills:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我建议你阅读以下关于微服务的文章，以提升你的技能：
- en: '*Building Microservices with .NET Core 2.0 – Second Edition* by PACKT ([https://www.packtpub.com/application-development/building-microservices-net-core-20-second-edition](https://www.packtpub.com/application-development/building-microservices-net-core-20-second-edition))'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 .NET Core 2.0 构建微服务 – 第二版* 由 PACKT 出版 ([https://www.packtpub.com/application-development/building-microservices-net-core-20-second-edition](https://www.packtpub.com/application-development/building-microservices-net-core-20-second-edition))'
- en: '*Microservice Patterns and Best Practices* by PACKT ([https://www.packtpub.com/application-development/microservice-patterns-and-best-practices](https://www.packtpub.com/application-development/microservice-patterns-and-best-practices))'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*微服务模式和最佳实践* 由 PACKT 出版 ([https://www.packtpub.com/application-development/microservice-patterns-and-best-practices](https://www.packtpub.com/application-development/microservice-patterns-and-best-practices))'
