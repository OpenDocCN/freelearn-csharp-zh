["```cs\n    public class Person\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public bool Gender { get; set; }\n        public DateTime DateOfBirth { get; set; }\n        public int Age\n        {\n            get\n            {\n                var age = DateTime.Now.Year - this.DateOfBirth.Year;\n\n                if (DateTime.Now.DayOfYear < \n                this.DateOfBirth.DayOfYear)\n                {\n                    age = age - 1;\n                }\n\n                return age;\n            }\n        }       \n    }\n```", "```cs\n    public class Context : DbContext\n    {\n        public DbSet<Person&gt; Persons { get; set; }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder \n        optionsBuilder)\n        {\n            //// Get the connection string from configuration                                                    \n            optionsBuilder.UseSqlServer(@\"Server=.\\SQLEXPRESS\n            ;Database=PersonDatabase;Trusted_Connection=True;\");\n        }\n\n        protected override void OnModelCreating(ModelBuilder \n        modelBuilder)\n        {\n             modelBuilder.Entity<Person&gt;\n             ().Property(nameof(Person.Name)).IsRequired();\n        }\n    }\n```", "```cs\n[Required]\npublic string Name { get; set; }\n```", "```cs\nadd-migration CreatePersonDatabase\n```", "```cs\ndotnet ef migrations add CreatePersonDatabase\n```", "```cs\nYour startup project 'GettingStartedWithEFCore' doesn't reference Microsoft.EntityFrameworkCore.Design. This package is required for the Entity Framework Core Tools to work. Ensure your startup project is correct, install the package, and try again. \n```", "```cs\nupdate-database â€“verbose\n```", "```cs\ndotnet ef database update\n```", "```cs\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Getting started with EF Core\");\n            Console.WriteLine(\"We will do CRUD operations on Person \n            class.\");\n            //// Lets create an instance of Person class.\n\n            Person person = new Person()\n            {\n                Name = \"Rishabh Verma\",\n                Gender = true, //// For demo true= Male, false = \n                Female. Prefer enum in real cases.\n                DateOfBirth = new DateTime(2000, 10, 23)\n            };\n\n            using (var context = new Context())\n            {\n                //// Context has strongly typed property named Persons \n                     which referes to Persons table.\n                //// It has methods Add, Find, Update, Remove to \n                     perform CRUD among many others.\n                //// Use AddRange to add multiple persons in once.\n                //// Complete set of APIs can be seen by using F12 on \n                     the Persons property below in Visual Studio IDE.\n                var personData = context.Persons.Add(person);\n                //// Though we have done Add, nothing has actually \n                     happened in database. All changes are in context \n                     only.\n                //// We need to call save changes, to persist these \n                     changes in the database.\n                context.SaveChanges();\n\n                //// Notice above that Id is Primary Key (PK) and hence \n                     has not been specified in the person object passed \n                     to context.\n                //// So, to know the created Id, we can use the below \n                     Id\n                int createdId = personData.Entity.Id;\n                //// If all goes well, person data should be persisted \n                     in the database.\n                //// Use proper exception handling to discover \n                     unhandled exception if any. Not showing here for \n                     simplicity and brevity. createdId variable would \n                     now hold the id of created person.\n\n                //// READ BEGINS\n                Person readData = context.Persons.Where(j =&gt; j.Id == \n                createdId).FirstOrDefault();\n                //// We have the data of person where Id == createdId, \n                     i.e. details of Rishabh Verma.\n                //// Lets update the person data all together just for \n                     demonstarting update functionality.\n                //// UPDATE BEGINS\n                person.Name = \"Neha Shrivastava\";  \n                person.Gender = false;\n                person.DateOfBirth = new DateTime(2000, 6, 15);\n                person.Id = createdId; //// For update cases, we need \n                this to be specified.\n\n                //// Update the person in context.\n                context.Persons.Update(person);\n                //// Save the updates.\n                context.SaveChanges();\n\n                //// DELETE the person object.\n                context.Remove(readData);\n                context.SaveChanges();\n            }\n\n            Console.WriteLine(\"All done. Please press Enter key to \n            exit...\");\n            Console.ReadLine();\n        }\n    }\n```", "```cs\n    public class Auditorium\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public virtual IList<Seat&gt; Seats { get; set; }\n        public int TotalSeats =&gt; this.Seats == null ? 0 : \n        this.Seats.Count;\n    }\n\n    public class Seat\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n    }\n\n    public class Movie\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Poster { get; set; }\n        public string Description { get; set; }\n        public string Cast { get; set; }\n        public string Director { get; set; }\n        public string Genere { get; set; }\n    }\n\n    public class Show\n    {\n        public int Id { get; set; }\n        public int AuditoriumId { get; set; }\n        public int MovieId { get; set; }\n        public TimeSpan Timing { get; set; }\n        public IList<Seat&gt; AvailableSeats { get; set; }        \n        public IList<Seat&gt; BookedSeats { get; set; }\n        public int TotalSeats { get; set; }\n    }\n\n    public class Ticket\n    {\n        public int ShowId { get; set; }        \n        public List<int&gt; SeatIds { get; set; }\n        public int Qunatity =&gt; this.SeatIds == null ? 0 : \n        this.SeatIds.Count;\n    }\n\n    public class Booking\n    {\n        public int Id { get; set; }\n        public IList<Ticket&gt; Tickets { get; set;}\n    }\n```", "```cs\n    public class MovieBookingContext : DbContext\n    {\n        public DbSet<Auditorium&gt; Auditoriums { get; set; }        \n        public DbSet<Movie&gt; Movies { get; set; }\n        public DbSet<Show&gt; Shows { get; set; }\n        public DbSet<Booking&gt; Bookings { get; set; }\n        public DbSet<Ticket&gt; Tickets { get; set; }\n        public \n        MovieBookingContext(DbContextOptions<MovieBookingContext&gt; \n        options) : base(options)\n        { \n        }  \n    }\n```", "```cs\n\"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=.\\\\SQLEXPRESS;Database=MovieBookingDemo;Trusted_Connection=True;\"\n  },\n```", "```cs\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext<MovieBookingContext&gt;(options =&gt; \n            options.UseSqlServer(Configuration.GetConnectionString\n            (\"DefaultConnection\")));\n            services.AddMvc();\n        }\n```", "```cs\nadd-migration CreateMovieBookingDemo\nupdate-database -verbose\n```"]