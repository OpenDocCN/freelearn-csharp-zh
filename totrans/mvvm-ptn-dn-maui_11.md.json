["```cs\npublic static readonly BindableProperty IsFavoriteProperty\n=\n    BindableProperty.Create(nameof(IsFavorite),\n        typeof(bool), typeof(FavoriteControl));\npublic bool IsFavorite\n{\n    get { return (bool)GetValue(IsFavoriteProperty); }\n    set { SetValue(IsFavoriteProperty, value); }\n}\n```", "```cs\n    <ContentView\n        x:Class=\"Recipes.Mobile.Controls.FavoriteControl\"\n        xmlns=\"http://schemas.microsoft.com/dotnet/\n          2021/maui\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/\n          2009/xaml\"\n        xmlns:local=\"clr-namespace:\n          Recipes.Mobile.Controls\"\n        xmlns:toolkit=\"http://schemas.microsoft.com/\n          dotnet/2022/maui/toolkit\"\n    toolkit namespace in place, which refers to the .NET MAUI Community Toolkit, we can add an instance of BoolToObjectConverter to the control’s Resources. This converter can be copied over from RecipesOverviewPage or RecipeDetailPage. The next code block shows what it looks like:\n\n    ```", "```cs\n\n    As a reminder, this converter (as it is configured here) will convert a `bool` value into a color – `false` will become a color with the hex value of `\"#E9E9E9E9\"` while `true` will be converted to `\"#FF0000\"`.\n    ```", "```cs\n    <Image\n        x:Name=\"icon\"\n        HeightRequest=\"{Binding HeightRequest,\n          Source={RelativeSource AncestorType={x:Type\n            local:FavoriteControl}}}\"\n        Source=\"favorite.png\"\n        WidthRequest=\"{Binding WidthRequest, Source=\n          {RelativeSource AncestorType={x:Type\n            local:FavoriteControl}}}\">\n    HeightRequest and WidthRequest properties of the Image control to those of FavoriteControl. By doing so, we ensure that the image scales according to the dimensions defined for FavoriteControl.\n    ```", "```cs\n    <Image.Behaviors>\n        <toolkit:IconTintColorBehavior\n            TintColor=\"{Binding IsFavorite,\n            Source={x:Reference root},\n            Converter={StaticResource\n            isFavoriteToColorConverter}}\" />\n     </Image.Behaviors>\n    ```", "```cs\n    <controls:FavoriteControl\n        Margin=\"5\"\n        HeightRequest=\"45\"\n        HorizontalOptions=\"End\"\n        IsFavorite=\"{Binding IsFavorite}\"\n        IsVisible=\"{Binding IsFavorite}\"\n        VerticalOptions=\"Start\"\n        WidthRequest=\"45\" />\n    ```", "```cs\n<ContentPage\n    x:Class=\"Recipes.Mobile.RecipeDetailPage\"\n\n     ...>\n...\n    <Grid ColumnDefinitions=\"*, Auto\">\n        <Label FontAttributes=\"Bold\" FontSize=\"22\"\n            Text=\"{Binding Path=Title, Mode=OneWay}\"\n            VerticalOptions=\"Center\" />\n        **<controls:FavoriteControl Grid.Column=\"1\"**\n**            Margin=\"5\" HeightRequest=\"35\"**\n**            IsFavorite=\"{Binding IsFavorite}\"**\n**            VerticalOptions=\"Center\" WidthRequest=\"35\" />**\n    </Grid>\n...\n</ContentPage>\n```", "```cs\n    public static readonly BindableProperty\n      IsFavoriteProperty =\n            BindableProperty.Create(nameof(IsFavorite),\n            typeof(bool),\n            typeof(FavoriteControl),\n            propertyChanged: OnIsFavoriteChanged);\n    private static void OnIsFavoriteChanged(BindableObject\n      bindable, object oldValue, object newValue)\n    {\n    }\n    ```", "```cs\n    private async Task AnimateChange()\n    {\n        await icon.ScaleTo(1.5, 100);\n        await icon.ScaleTo(1, 100);\n    }\n    ```", "```cs\n    private static void OnIsFavoriteChanged(\n        BindableObject bindable,\n        object oldValue, object newValue)\n        => (bindable as FavoriteControl).AnimateChange();\n    ```", "```cs\n    <ContentView.GestureRecognizers>\n        <TapGestureRecognizer\n            Tapped=\"TapGestureRecognizer_Tapped\" />\n    </ContentView.GestureRecognizers>\n    ```", "```cs\n    private void TapGestureRecognizer_Tapped(\n        object sender, TappedEventArgs e)\n    {\n    }\n    ```", "```cs\n    private void TapGestureRecognizer_Tapped(\n        object sender, TappedEventArgs e)\n    {\n        if (IsEnabled)\n        {\n            IsFavorite = !IsFavorite;\n        }\n    }\n    ```", "```cs\npublic static readonly BindableProperty\nIsFavoriteProperty =\n    BindableProperty.Create(nameof(IsFavorite),\n        typeof(bool),\n        typeof(FavoriteControl),\n        defaultBindingMode: BindingMode.TwoWay,\n        propertyChanged: OnIsFavoriteChanged);\n```", "```cs\n<controls:FavoriteControl\n    Grid.Column=\"1\"\n    Margin=\"5\"\n    HeightRequest=\"35\"\n    IsFavorite=\"{Binding IsFavorite, Mode=TwoWay}\"\n    VerticalOptions=\"Center\"\n    WidthRequest=\"35\" />\n```", "```cs\n    public static readonly BindableProperty\n      ToggledCommandProperty =\n        BindableProperty.Create(\n            nameof(ToggledCommand),\n            typeof(ICommand), typeof(FavoriteControl));\n    public ICommand ToggledCommand\n    {\n        get => (ICommand)\n            GetValue(ToggledCommandProperty);\n        set => SetValue(ToggledCommandProperty, value);\n    }\n    ```", "```cs\n    private void TapGestureRecognizer_Tapped(\n        object sender, TappedEventArgs e)\n    {\n        if (IsEnabled)\n        {\n            IsFavorite = !IsFavorite;\n            ToggledCommand?.Execute(IsFavorite);\n        }\n    }\n    ```", "```cs\n    ...\n    public IRelayCommand FavoriteToggledCommand { get; }\n    ...\n    public RecipeDetailViewModel(...)\n    {\n        ...\n        FavoriteToggledCommand =\n            new AsyncRelayCommand<bool>(FavoriteToggled);\n        ...\n    }\n    ...\n    ```", "```cs\n    private async Task FavoriteToggled(bool isFavorite)\n    {\n        if(isFavorite)\n        {\n            await favoritesService.Add(recipeDto.Id);\n        }\n        else\n        {\n            await favoritesService.Remove(recipeDto.Id);\n        }\n    }\n    ```", "```cs\n    private Task AddAsFavorite()\n        => UpdateIsFavorite(true);\n    private Task RemoveAsFavorite()\n        => UpdateIsFavorite(false);\n    private Task UpdateIsFavorite(bool newValue)\n    {\n        IsFavorite = newValue;\n        return FavoriteToggled(newValue);\n    }\n    ```", "```cs\n    <controls:FavoriteControl\n        Grid.Column=\"1\"\n        Margin=\"5\"\n        HeightRequest=\"35\"\n        IsFavorite=\"{Binding IsFavorite, Mode=TwoWay}\"\n        ToggledCommand=\"{Binding FavoriteToggledCommand}\"\n        VerticalOptions=\"Center\"\n        WidthRequest=\"150\" />\n    ```", "```cs\n    public bool IsInteractive { get; private set; }\n    ```", "```cs\n    private void UpdateIsInteractive()\n        => IsInteractive = IsEnabled\n        && (ToggledCommand?.CanExecute(IsFavorite)\n        ?? false);\n    ```", "```cs\n    private void TapGestureRecognizer_Tapped(\n        object sender, TappedEventArgs e)\n    {\n        if (IsInteractive)\n        {\n            IsFavorite = !IsFavorite;\n            ToggledCommand?.Execute(IsFavorite);\n        }\n    }\n    ```", "```cs\n    protected override void OnPropertyChanged(\n        [CallerMemberName] string propertyName = null)\n    {\n        base.OnPropertyChanged(propertyName);\n        if(propertyName == nameof(IsEnabled))\n        {\n            UpdateIsInteractive();\n        }\n    }\n    ```", "```cs\n    public static readonly BindableProperty\n      ToggledCommandProperty =\n        BindableProperty.Create(nameof(ToggledCommand),\n            typeof(ICommand), typeof(FavoriteControl),\n            propertyChanged: ToggledCommandChanged);\n    private static void ToggledCommandChanged(\n        BindableObject bindable,\n        object oldValue, object newValue)\n    {\n        var control = bindable as FavoriteControl;\n        control.UpdateIsInteractive();\n    }\n    ```", "```cs\n    private static void ToggledCommandChanged(\n        BindableObject bindable,\n        object oldValue, object newValue)\n    {\n        var control = bindable as FavoriteControl;\n        if (oldValue is ICommand oldCommand)\n        {\n            oldCommand.CanExecuteChanged -=\n                control.CanExecuteChanged;\n        }\n        if (newValue is ICommand newCommand)\n        {\n            newCommand.CanExecuteChanged +=\n                control.CanExecuteChanged;\n        }\n        control.UpdateIsInteractive();\n    }\n    ```", "```cs\n    private void CanExecuteChanged(\n        object sender, EventArgs e)\n        => UpdateIsInteractive();\n    ```", "```cs\n    int updateCount = 0;\n    int maxUpdatedAllowed = 5;\n    ```", "```cs\n    FavoriteToggledCommand = new AsyncRelayCommand<bool>(\n        FavoriteToggled,\n        FavoriteToggled method so that it keeps track of the number of times it was invoked, as shown here:\n\n    ```", "```cs\n\n    Not only does this method now keep track of the number of times it was invoked, but it also triggers the `NotifyCanExecuteChanged` event of the `FavoriteToggledCommand`. As a result, the `CanExecuteChanged` method on `FavoriteControl` will get called, which will eventually call the command’s `CanExecute` method to see whether it still can be executed.\n    ```", "```cs\n    <Grid>\n        <Image x:Name=\"icon\" ...>\n            ...\n        </Image>\n    Image, prior to the existing one:\n\n    ```", "```cs\n\n    `Grid` allows controls to be placed on top of each other. The added `Image` will be rendered below the existing favorite icon. Its `HeightRequest`, `WidthRequest`, and `Source` properties are bound to those of the existing Image. Do note its `Scale` property – it’s set to `1.2`. As a result, this new `Image` will be a bit bigger than the `Image` on top. This creates the visual effect of a border surrounding the icon. Also, take a look at the `IsVisible` property – it’s bound to the `IsInteractive` property we introduced earlier. Because of this, the underlying `Image` will only be rendered when the control is tappable, giving a user a visual cue.\n    ```", "```cs\n    private void UpdateIsInteractive()\n    {\n        IsInteractive = IsEnabled\n        && (ToggledCommand?.CanExecute(IsFavorite)\n        ?? false);\n        OnPropertyChanged(nameof(IsInteractive));\n    }\n    ```", "```cs\n    <ControlTemplate x:Key=\"FavoriteTemplate\">\n        <VerticalStackLayout>\n            <Label\n                FontSize=\"10\" HorizontalOptions=\"Center\"\n                Text=\"Favorite?\" />\n            <Switch\n                HorizontalOptions=\"Center\"\n                InputTransparent=\"True\"\n                IsEnabled=\"{Binding IsInteractive,\n                 Source={RelativeSource TemplatedParent}}\"\n                IsToggled=\"{Binding IsFavorite, Source=\n                  {RelativeSource TemplatedParent},\n    Mode=OneWay}\"\n            />\n        </VerticalStackLayout>\n    </ControlTemplate>\n    ```", "```cs\n    <controls:FavoriteControl\n        ...\n        ControlTemplate=\"{StaticResource\n          FavoriteTemplate}\"\n        ... />\n    ```", "```cs\nprivate async Task AnimateChange()\n{\n    await icon.ScaleTo(1.5, 100);\n    await icon.ScaleTo(1, 100);\n}\n```", "```cs\n<ContentView\n    ...>\n    <ContentView.Resources>\n        <toolkit:BoolToObjectConverter\n            ... />\n        <ControlTemplate x:Key=\"DefaultTemplate\">\n            <Grid>\n                <Image\nHeightRequest=\"{Binding HeightRequest,\n                     Source={x:Reference TemplatedParent}}\"\n                    IsVisible=\"{Binding IsInteractive,\n                      Source={RelativeSource\n                        TemplatedParent}}\"\n                    Scale=\"1.2\"\n                    Source=\"{Binding Source, Source=\n                      {x:Reference scalableContent}}\"\n                    WidthRequest=\"{Binding WidthRequest,\n                     Source={x:Reference scalableContent}}\"\n/>\n                <Image\n                    x:Name=\"scalableContent\"\n                    HeightRequest=\"{Binding HeightRequest,\n                      Source={RelativeSource\n                        TemplatedParent}}\"\n                    Source=\"favorite.png\"\n                    WidthRequest=\"{Binding WidthRequest,\n                      Source={RelativeSource\n                        TemplatedParent}}\">\n<Image.Behaviors>\n                        ...\n                    </Image.Behaviors>\n                </Image>\n            </Grid>\n        </ControlTemplate>\n    </ContentView.Resources>\n    <ContentView.GestureRecognizers>\n        ...\n    </ContentView.GestureRecognizers>\n</ContentView>\n```", "```cs\npublic FavoriteControlTemplated()\n{\n    InitializeComponent();\n    if(ControlTemplate == null)\n    {\n        var template = Resources[\"DefaultTemplate\"];\n        ControlTemplate = template as ControlTemplate;\n    }\n}\n```", "```cs\nVisualElement scalableContent;\nprotected override void OnApplyTemplate()\n{\n    base.OnApplyTemplate();\n    scalableContent =\n        GetTemplateChild(\"scalableContent\")\n        as VisualElement;\n}\n```", "```cs\nprivate async Task AnimateChange()\n{\n    if (scalableContent is not null)\n    {\n        await scalableContent.ScaleTo(1.5, 100);\n        await scalableContent.ScaleTo(1, 100);\n    }\n}\n```", "```cs\n    <ControlTemplate x:Key=\"FavoriteTemplate\">\n        ...\n            <Switch\n                x:Name=\"scalebleContent\"\n                …  />\n        </VerticalStackLayout>\n    </ControlTemplate>\n    ```", "```cs\n    <controls:FavoriteControlTemplated\n        Grid.Column=\"1\"\n        Margin=\"5\"\n        ControlTemplate=\"{StaticResource\n          FavoriteTemplate}\"\n        IsFavorite=\"{Binding IsFavorite, Mode=TwoWay}\"\n        ToggledCommand=\"{Binding FavoriteToggledCommand}\"\n        VerticalOptions=\"Center\" />\n    ```"]