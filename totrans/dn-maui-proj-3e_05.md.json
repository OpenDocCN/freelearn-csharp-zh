["```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <ContentPage\n      xmlns=http://schemas.microsoft.com/dotnet/2021/maui\n\n      x:Class=\"Swiper.MainPage\">\n      <Grid Padding=\"0,40\" x:Name=\"MainGrid\">\n        <Grid.RowDefinitions>\n          <RowDefinition Height=\"400\" />\n          <RowDefinition Height=\"*\" />\n        </Grid.RowDefinitions>\n        <Grid Grid.Row=\"1\" Padding=\"30\">\n            <!-- Placeholder for later -->\n        </Grid>\n      </Grid>\n    </ContentPage>\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ContentView \n\n                 x:Class=\"Swiper.Controls.SwiperControl\">\n    <ContentView.Content>\n      <Grid>\n        <Grid.ColumnDefinitions>\n          <ColumnDefinition Width=\"100\" />\n          <ColumnDefinition Width=\"*\" />\n          <ColumnDefinition Width=\"100\" />\n        </Grid.ColumnDefinitions>\n        <!-- ContentView for photo here -->\n        <!-- StackLayout for like here -->\n        <!-- StackLayout for deny here -->\n      </Grid>\n    </ContentView.Content>\n    </ContentView>\n    ```", "```cs\n    <!-- ContentView for photo here -->\n      <ContentView x:Name=\"photo\" Padding=\"40\" Grid.ColumnSpan=\"3\" >\n        <Grid x:Name=\"photoGrid\" BackgroundColor=\"Black\" Padding=\"1\" >\n          <Grid.RowDefinitions>\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"40\" />\n          </Grid.RowDefinitions>\n          <BoxView Grid.RowSpan=\"2\" BackgroundColor=\"White\" />\n          <Image x:Name=\"image\" Margin=\"10\" BackgroundColor=\"#AAAAAA\" Aspect=\"AspectFill\" />\n          <Label x:Name=\"loadingLabel\" Text=\"Loading...\" TextColor=\"White\" FontSize=\"Large\" FontAttributes=\"Bold\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" />\n          <Label Grid.Row=\"1\" x:Name=\"descriptionLabel\" Margin=\"10,0\" Text=\"A picture of grandpa\" FontFamily=\"Bradley Hand\" />\n        </Grid>\n      </ContentView>\n    ```", "```cs\n    internal class DescriptionGenerator\n    {\n      private string[] _adjectives = { \"nice\", \"horrible\", \"great\", \"terribly old\", \"brand new\" };\n      private string[] _other = { \"picture of grandpa\", \"car\", \"photo of a forest\", \"duck\" };\n      private static Random random = new();\n      public string Generate()\n      {\n        var a = _adjectives[random.Next(_adjectives.Count())];\n        var b = _other[random.Next(_other.Count())];\n        return $\"A {a} {b}\";\n      }\n    }\n    ```", "```cs\n    public class Picture\n    {\n      public Uri Uri { get; init; }\n      public string Description { get; init; }\n      public Picture()\n      {\n        Uri = new Uri($\"https://picsum.photos/400/400/?random&ts={DateTime.Now.Ticks}\");\n         var generator = new DescriptionGenerator();\n         Description = generator.Generate();\n      }\n    }\n    ```", "```cs\n    public SwiperControl()\n    {\n      InitializeComponent();\n      var picture = new Picture();\n      descriptionLabel.Text = picture.Description;\n      image.Source = new UriImageSource() { Uri = picture.Uri };\n    }\n    ```", "```cs\n    public SwiperControl()\n    {\n      InitializeComponent();\n      var picture = new Picture();\n      descriptionLabel.Text = picture.Description;\n      image.Source = new UriImageSource() { Uri = picture.Uri };\n      loadingLabel.SetBinding(IsVisibleProperty, \"IsLoading\");\n      loadingLabel.BindingContext = image;\n    }\n    ```", "```cs\n    private readonly double _initialRotation;\n    private static readonly Random _random = new Random();\n    ```", "```cs\n    private void OnPanUpdated(object sender, PanUpdatedEventArgs e)\n    {\n      switch (e.StatusType)\n      {\n        case GestureStatus.Started: PanStarted();\n        break;\n        case GestureStatus.Running: PanRunning(e);\n        break;\n        case GestureStatus.Completed: PanCompleted();\n        break;\n      }\n    }\n    ```", "```cs\n    private void PanStarted()\n    {\n      photo.ScaleTo(1.1, 100);\n    }\n    private void PanRunning(PanUpdatedEventArgs e)\n    {\n      photo.TranslationX = e.TotalX;\n      photo.TranslationY = e.TotalY;\n      photo.Rotation = _initialRotation + (photo.TranslationX / 25);\n    }\n    private void PanCompleted()\n    {\n      photo.TranslateTo(0, 0, 250, Easing.SpringOut);\n      photo.RotateTo(_initialRotation, 250, Easing.SpringOut);\n      photo.ScaleTo(1, 250);\n    }\n    ```", "```cs\n    public SwiperControl()\n    {\n      InitializeComponent();\n      var panGesture = new PanGestureRecognizer();\n      panGesture.PanUpdated += OnPanUpdated;\n      this.GestureRecognizers.Add(panGesture);\n      _initialRotation = _random.Next(-10, 10);\n      photo.RotateTo(_initialRotation, 100, Easing.SinOut);\n      var picture = new Picture();\n      descriptionLabel.Text = picture.Description;\n      image.Source = new UriImageSource() { Uri = picture.Uri };\n      loadingLabel.SetBinding(IsVisibleProperty, \"IsLoading\");\n      loadingLabel.BindingContext = image;\n    }\n    ```", "```cs\n    public MainPage()\n    {\n      InitializeComponent();\n      MainGrid.Children.Add(new SwiperControl());\n    }\n    ```", "```cs\n    <StackLayout Grid.Column=\"2\" x:Name=\"likeStackLayout\" Opacity=\"0\" Padding=\"0, 100\">\n      <Label Text=\"LIKE\" TextColor=\"Lime\" FontSize=\"30\" Rotation=\"30\" FontAttributes=\"Bold\" />\n    </StackLayout>\n    ```", "```cs\n    <StackLayout x:Name=\"denyStackLayout\" Opacity=\"0\" Padding=\"0, 100\" HorizontalOptions=\"Start\">\n      <Label Text=\"DENY\" TextColor=\"Red\" FontSize=\"30\" Rotation=\"-20\" FontAttributes=\"Bold\" />\n    </StackLayout>\n    ```", "```cs\n    private double _screenWidth = -1;\n    protected override void OnSizeAllocated(double width, double height)\n    {\n      base.OnSizeAllocated(width, height);\n      if (Application.Current.MainPage == null)\n      {\n        return;\n      }\n      _screenWidth = Application.Current.MainPage.Width;\n    }\n    ```", "```cs\n    private const double DeadZone = 0.4d;\n    private const double DecisionThreshold = 0.4d;\n    private void CalculatePanState(double panX)\n    {\n      var halfScreenWidth = _screenWidth / 2;\n      var deadZoneEnd = DeadZone * halfScreenWidth;\n      if (Math.Abs(panX) < deadZoneEnd)\n      {\n        return;\n      }\n      var passedDeadzone = panX < 0 ? panX + deadZoneEnd : panX - deadZoneEnd;\n      var decisionZoneEnd = DecisionThreshold * halfScreenWidth;\n      var opacity = passedDeadzone / decisionZoneEnd;\n      opacity = double.Clamp(opacity, -1, 1);\n      likeStackLayout.Opacity = opacity;\n      denyStackLayout.Opacity = -opacity;\n    }\n    ```", "```cs\n    private void PanRunning(PanUpdatedEventArgs e)\n    {\n      photo.TranslationX = e.TotalX; photo.TranslationY = e.TotalY;\n      photo.Rotation = _initialRotation + (photo.TranslationX / 25);\n      CalculatePanState(e.TotalX);\n    }\n    ```", "```cs\n    private bool CheckForExitCriteria()\n    {\n      var halfScreenWidth = _screenWidth / 2;\n      var decisionBreakpoint = DeadZone * halfScreenWidth;\n      return (Math.Abs(photo.TranslationX) > decisionBreakpoint);\n    }\n    ```", "```cs\n    private void Exit()\n    {\n      MainThread.BeginInvokeOnMainThread(async () =>\n      {\n        var direction = photo.TranslationX < 0 ? -1 : 1;\n        await photo.TranslateTo(photo.TranslationX + (_screenWidth * direction), photo.TranslationY, 200, Easing.CubicIn);\n        var parent = Parent as Layout;\n        parent?.Children.Remove(this);\n      });\n    }\n    ```", "```cs\n    private void PanCompleted()\n    {\n      if (CheckForExitCriteria())\n      {\n        Exit();\n      }\n      likeStackLayout.Opacity = 0;\n      denyStackLayout.Opacity = 0;\n      photo.TranslateTo(0, 0, 250, Easing.SpringOut);\n      photo.RotateTo(_initialRotation, 250, Easing.SpringOut);\n      photo.ScaleTo(1, 250);\n    }\n    ```", "```cs\n    public event EventHandler OnLike;\n    public event EventHandler OnDeny;\n    ```", "```cs\n    private void Exit()\n    {\n      MainThread.BeginInvokeOnMainThread(async () =>\n      {\n        var direction = photo.TranslationX < 0 ? -1 : 1;\n        if (direction > 0)\n        {\n          OnLike?.Invoke(this, new EventArgs());\n        }\n        if (direction < 0)\n        {\n          OnDeny?.Invoke(this, new EventArgs());\n        }\n        await photo.TranslateTo(photo.TranslationX + (_screenWidth * direction), photo.TranslationY, 200, Easing.CubicIn);\n        var parent = Parent as Layout;\n        parent?.Children.Remove(this);\n      });\n    }\n    ```", "```cs\n    private void AddInitialPhotos()\n    {\n      for (int i = 0; i < 10; i++)\n      {\n        InsertPhoto();\n      }\n    }\n    private void InsertPhoto()\n    {\n      var photo = new SwiperControl();\n      this.MainGrid.Children.Insert(0, photo);\n    }\n    ```", "```cs\n    public MainPage()\n    {\n      InitializeComponent();\n      AddInitialPhotos();\n    }\n    ```", "```cs\n    <Grid Grid.Row=\"1\" Padding=\"30\">\n      <Grid.RowDefinitions>\n        <RowDefinition Height=\"auto\" />\n        <RowDefinition Height=\"auto\" />\n        <RowDefinition Height=\"auto\" />\n        <RowDefinition Height=\"auto\" />\n      </Grid.RowDefinitions>\n      <Label Text=\"LIKES\" />\n      <Label x:Name=\"likeLabel\" Grid.Row=\"1\" Text=\"0\" FontSize=\"Large\" FontAttributes=\"Bold\" />\n      <Label Grid.Row=\"2\" Text=\"DENIED\" />\n      <Label x:Name=\"denyLabel\" Grid.Row=\"3\" Text=\"0\" FontSize=\"Large\" FontAttributes=\"Bold\" />\n    </Grid>\n    ```", "```cs\n    private int _likeCount;\n    private int _denyCount;\n    private void UpdateGui()\n    {\n      likeLabel.Text = _likeCount.ToString();\n      denyLabel.Text = _denyCount.ToString();\n    }\n    private void Handle_OnLike(object sender, EventArgs e)\n    {\n      _likeCount++;\n      InsertPhoto();\n      UpdateGui();\n    }\n    private void Handle_OnDeny(object sender, EventArgs e)\n    {\n      _denyCount++;\n      InsertPhoto();\n      UpdateGui();\n    }\n    ```", "```cs\n    private void InsertPhoto()\n    {\n      var photo = new SwiperControl();\n      photo.OnDeny += Handle_OnDeny;\n      photo.OnLike += Handle_OnLike;\n      this.MainGrid.Children.Insert(0, photo);\n    }\n    ```"]