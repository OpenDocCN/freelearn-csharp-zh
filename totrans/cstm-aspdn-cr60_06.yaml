- en: '*Chapter 6*: Using Different Hosting Models'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 6 章*：使用不同的托管模型'
- en: In this chapter, we will talk about how to customize hosting in ASP.NET Core.
    We will look into the hosting options and different kinds of hosting, and take
    a quick look at hosting on IIS. This chapter is just an overview. It is possible
    to go into much greater detail for each topic, but that would fill a complete
    book on its own!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何在 ASP.NET Core 中自定义托管。我们将探讨托管选项和不同类型的托管，并简要介绍在 IIS 上的托管。本章只是一个概述。对于每个主题，都有可能进行更深入的探讨，但这将需要一本完整的书来阐述！
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up `WebHostBuilder`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 `WebHostBuilder`
- en: Setting up Kestrel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Kestrel
- en: Setting up `HTTP.sys`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 `HTTP.sys`
- en: Hosting on IIS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IIS 上托管
- en: Using Nginx or Apache on Linux
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上使用 Nginx 或 Apache
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的主题涉及 ASP.NET Core 架构的托管层：
- en: '![Figure 6.1 – ASP.NET Core architecture'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – ASP.NET Core 架构'
- en: '](img/Figure_6.1_B17996.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – ASP.NET Core 架构](img/Figure_6.1_B17996.jpg)'
- en: Figure 6.1 – ASP.NET Core architecture
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – ASP.NET Core 架构
- en: 'This chapter tackles the following topics of the server architecture:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了以下服务器架构主题：
- en: '![Figure 6.2 – ASP.NET server architecture'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – ASP.NET 服务器架构'
- en: '](img/Figure_6.2_B17996.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – ASP.NET 服务器架构](img/Figure_6.2_B17996.jpg)'
- en: Figure 6.2 – ASP.NET server architecture
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – ASP.NET 服务器架构
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, we just need to set up a small, empty web application:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们只需要设置一个小型的空 Web 应用程序：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That''s it. Open it with Visual Studio Code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。用 Visual Studio Code 打开它：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Et voilà*! A simple project opens in Visual Studio Code.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*Et voilà*！一个简单的项目在 Visual Studio Code 中打开。'
- en: 'The code for this chapter can be found on GitHub here: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter06).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在 GitHub 上找到：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter06)。
- en: Setting up WebHostBuilder
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 WebHostBuilder
- en: As in the last chapter, we will focus on `Program.cs` in this section. `WebHostBuilder`
    is our friend. This is where we configure and create the web host.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章一样，在本节中我们将重点关注 `Program.cs`。`WebHostBuilder` 是我们的朋友。这是配置和创建 Web 服务器的地方。
- en: 'The following code snippet is the default configuration of every new ASP.NET
    Core web project we create using `dotnet new` command with the .NET CLI:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是使用 .NET CLI 的 `dotnet new` 命令创建的每个新 ASP.NET Core Web 项目的默认配置：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we already know from previous chapters, the default builder has all the necessary
    stuff preconfigured. All you require in order to run an application successfully
    on Azure or an on-premises IIS is configured for you.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们从之前的章节中已经了解到的，默认构建器已经预先配置了所有必要的功能。为了在 Azure 或本地 IIS 上成功运行应用程序，所有需要配置的内容都已为您配置好。
- en: But you are able to override almost all of these default configurations, including
    the hosting configuration.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以覆盖几乎所有这些默认配置，包括托管配置。
- en: Next, let's set up Kestrel.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们设置 Kestrel。
- en: Setting up Kestrel
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Kestrel
- en: After `WebHostBuilder` is created, we can use various functions to configure
    the builder. Here, we can see one of them, which specifies the `Startup` class
    that should be used.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 `WebHostBuilder` 之后，我们可以使用各种功能来配置构建器。在这里，我们可以看到其中之一，它指定了应该使用的 `Startup`
    类。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As discussed in [*Chapter 4*](B17996_04_ePub.xhtml#_idTextAnchor066), *Configuring
    and Customizing HTTPS with Kestrel*, Kestrel is one possibility when it comes
    to hosting your application. Kestrel is a web server built into .NET and based
    on .NET socket implementations. Previously, it was built on top of **libuv**,
    which is the same web server that is used by Node.js. Microsoft removed the dependency
    to **libuv** and created their own web server implementation based on .NET sockets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 [*第 4 章*](B17996_04_ePub.xhtml#_idTextAnchor066) 中讨论的，*使用 Kestrel 配置和自定义
    HTTPS*，Kestrel 是托管应用程序的一种可能选择。Kestrel 是内置在 .NET 中并基于 .NET 套接字实现的 Web 服务器。之前，它是基于
    **libuv** 构建的，这是 Node.js 使用的相同 Web 服务器。Microsoft 移除了对 **libuv** 的依赖，并基于 .NET 套接字创建了自己的
    Web 服务器实现。
- en: 'In the last chapter, we saw the `UseKestrel` method to configure the Kestrel
    options:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了 `UseKestrel` 方法来配置 Kestrel 选项：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This first argument is `WebHostBuilderContext` to access already-configured
    hosting settings or the configuration itself. The second argument is an object
    to configure Kestrel. This code snippet shows what we did in the last chapter
    to configure the socket endpoints where the host needs to listen:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是`WebHostBuilderContext`，用于访问已配置的托管设置或配置本身。第二个参数是一个用于配置Kestrel的对象。这个代码片段显示了我们在上一章中配置套接字端点时所做的工作，主机需要监听这些端点：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (You might need to add a `using` to `System.Net`.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （你可能需要向`System.Net`添加一个`using`语句。）
- en: This will override the default configuration where you are able to pass in URLs,
    for example, using the `applicationUrl` property of `launchSettings.json` or an
    environment variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将覆盖默认配置，你可以传递URL，例如，使用`launchSettings.json`的`applicationUrl`属性或环境变量。
- en: Let's now look at how to set up `HTTP.sys`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何设置`HTTP.sys`。
- en: Setting up HTTP.sys
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置HTTP.sys
- en: 'There is another hosting option, a different web server implementation. `HTTP.sys`
    is a pretty mature library, deep within Windows, that can be used to host your
    ASP.NET Core application:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另外还有一个托管选项，一个不同的Web服务器实现。`HTTP.sys`是Windows内部一个相当成熟的库，可以用来托管你的ASP.NET Core应用程序：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`HTTP.sys` is different from Kestrel. It cannot be used in IIS because it is
    not compatible with the ASP.NET Core module for IIS.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTP.sys`与Kestrel不同。它不能用于IIS，因为它与IIS的ASP.NET Core模块不兼容。'
- en: The main reason for using `HTTP.sys` instead of Kestrel is `HTTP.sys` if you
    need to expose your application to the internet without IIS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`HTTP.sys`而不是Kestrel的主要原因是在不需要IIS的情况下，你需要将你的应用程序暴露于互联网。
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: IIS has been running on top of `HTTP.sys` for years. This means that `UseHttpSys()`
    and IIS are using the same web server implementation. To learn more about `HTTP.sys`,
    please read the documentation, links to which can be found in the *Further reading*
    section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: IIS已经在`HTTP.sys`上运行多年。这意味着`UseHttpSys()`和IIS使用相同的Web服务器实现。要了解更多关于`HTTP.sys`的信息，请阅读文档，相关链接可以在*进一步阅读*部分找到。
- en: Next, let's look at using IIS for hosting.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何使用IIS进行托管。
- en: Hosting on IIS
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在IIS上托管
- en: An ASP.NET Core application shouldn't be directly exposed to the internet, even
    if it's supported for Kestrel or `HTTP.sys`. It would be best to have something
    such as a reverse proxy in between, or at least a service that watches the hosting
    process. For ASP.NET Core, IIS isn't just a reverse proxy. It also takes care
    of the hosting process, in case it breaks because of an error. If that happens,
    IIS will restart the process. Nginx may be used as a reverse proxy on Linux that
    also takes care of the hosting process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core应用程序不应当直接暴露于互联网，即使它支持Kestrel或`HTTP.sys`。最好在两者之间有一个反向代理，或者至少有一个监控托管进程的服务。对于ASP.NET
    Core来说，IIS不仅仅是一个反向代理。它还负责托管进程，以防因错误而中断。如果发生这种情况，IIS将重新启动进程。在Linux上，Nginx可以用作反向代理，同时也负责托管进程。
- en: Note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Be sure you created a new project or removed the Kestrel configuration of the
    previous section. This won't work with IIS.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你创建了一个新项目或移除了上一节中Kestrel的配置。这不会与IIS一起工作。
- en: To host an ASP.NET Core web on IIS or Azure, you need to publish it first. Publishing
    doesn't only compile the project; it also prepares the project for hosting on
    IIS, Azure, or a web server on Linux, such as Nginx.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要在IIS或Azure上托管ASP.NET Core Web，你需要先发布它。发布不仅编译项目；它还准备项目在IIS、Azure或Linux上的Web服务器（如Nginx）上托管。
- en: 'The following command will publish the project:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将发布项目：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When viewed in a system browser, this should look as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统浏览器中查看时，它应该如下所示：
- en: '![Figure 6.3 – A .NET published folder](img/Figure_6.3_B17996.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – .NET发布文件夹](img/Figure_6.3_B17996.jpg)'
- en: Figure 6.3 – A .NET published folder
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – .NET发布文件夹
- en: This produces an output that can be mapped in IIS. It also creates a `web.config`
    to add settings for IIS or Azure. It contains the compiled web application as
    a DLL.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生一个可以在IIS中映射的输出。它还创建了一个`web.config`文件，用于添加IIS或Azure的设置。它包含了一个作为DLL编译的Web应用程序。
- en: If you publish a self-contained application, it also contains the runtime itself.
    A self-contained application brings its own .NET Core runtime, but the size of
    the delivery increases a lot.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发布了一个自包含的应用程序，它也包含了运行时本身。自包含的应用程序会自带.NET Core运行时，但交付的大小会增加很多。
- en: 'And on IIS? Just create a new web and map it to the folder where you placed
    the published output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在IIS上？只需创建一个新的Web，并将其映射到放置发布输出的文件夹：
- en: '![Figure 6.4 – The .NET publishing dialog](img/Figure_6.4_B17996.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – .NET发布对话框](img/Figure_6.4_B17996.jpg)'
- en: Figure 6.4 – The .NET publishing dialog
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – .NET发布对话框
- en: It gets a little more complicated if you need to change the security, if you
    have some database connections, and so on. This could be a topic for a separate
    chapter on its own.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更改安全性，如果您有一些数据库连接等，事情会变得稍微复杂一些。这可以是一个单独章节的主题。
- en: '![Figure 6.5 – Hello World! viewed in a browser](img/Figure_6.5_B17996.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 在浏览器中查看的“Hello World!”](img/Figure_6.5_B17996.jpg)'
- en: Figure 6.5 – Hello World! viewed in a browser
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 在浏览器中查看的“Hello World!”
- en: '*Figure 6.5* shows the output of the small `MapGet` in the `Program.cs` of
    the demo project:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.5*显示了示例项目中`Program.cs`中小的`MapGet`的输出：'
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next up, we'll discuss some alternatives for Linux.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论一些Linux的替代方案。
- en: Using Nginx or Apache on Linux
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上使用Nginx或Apache
- en: 'Publishing an ASP.NET Core application on Linux looks very similar to the way
    it looks on IIS, but preparing it for the reverse proxy requires some additional
    steps. You will need a web server such as Nginx or Apache as a reverse proxy that
    forwards the traffic to Kestrel and the ASP.NET Core application:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上发布ASP.NET Core应用程序看起来与在IIS上看起来非常相似，但为反向代理做准备需要一些额外的步骤。您需要一个像Nginx或Apache这样的反向代理服务器，它将流量转发到Kestrel和ASP.NET
    Core应用程序：
- en: 'First, you need to allow your app to accept two specific forwarded headers.
    To do this, open `Startup.cs` and add the following lines to the `Configure` method
    before the `UseAuthentication` middleware:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要允许您的应用程序接受两个特定的转发头。为此，打开`Startup.cs`，并在`UseAuthentication`中间件之前将以下行添加到`Configure`方法中：
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You also need to trust the incoming traffic from the reverse proxy. This requires
    you to add the following lines to the `ConfigureServices` method:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要信任来自反向代理的传入流量。这需要您将以下行添加到`ConfigureServices`方法中：
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You might need to add a `using` to `Microsoft.AspNetCore.HttpOverrides`.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可能需要向`Microsoft.AspNetCore.HttpOverrides`添加一个`using`。
- en: Add the IP address of the proxy here. This is just a sample.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里添加代理的IP地址。这只是一个示例。
- en: 'Then, you need to publish the application:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要发布应用程序：
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Copy the build output to a folder called `/var/www/yourapplication`. You should
    also do a quick test on Linux by calling the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建输出复制到名为`/var/www/yourapplication`的文件夹中。您还应该在Linux上通过调用以下命令进行快速测试：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `yourapplication.dll` is the compiled application, including the path.
    If it is all working correctly, you should be able to call your web on `http://localhost:5000/`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，`yourapplication.dll`是编译后的应用程序，包括路径。如果一切正常，您应该能够在`http://localhost:5000/`上调用您的Web应用程序。
- en: 'If it is working, the application should run as a service. This requires you
    to create a service file on `/etc/systemd/system/`. Call the file `kestrel-yourapplication.service`
    and place the following content in it:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一切正常，应用程序应作为服务运行。这需要您在`/etc/systemd/system/`上创建一个服务文件。将文件命名为`kestrel-yourapplication.service`，并在其中放置以下内容：
- en: '[PRE12]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Ensure that the paths in lines 5 and 6 point to the folder where you placed
    the build output. This file defines that your app should run as a service on the
    default port. It also watches the app and restarts it in case it crashes. It also
    defines environment variables that get passed in to configure your application.
    See [*Chapter 1*](B17996_01_ePub.xhtml#_idTextAnchor019), *Customizing Logging*,
    to learn how to configure your application using environment variables.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保第5行和第6行中的路径指向您放置构建输出的文件夹。此文件定义了您的应用程序应在默认端口上作为服务运行。它还监视应用程序，并在它崩溃时重新启动它。它还定义了传递给配置应用程序的环境变量。请参阅[*第1章*](B17996_01_ePub.xhtml#_idTextAnchor019)，*自定义日志记录*，了解如何使用环境变量配置您的应用程序。
- en: Next up, we'll see how to configure Nginx.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何配置Nginx。
- en: Configuring Nginx
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Nginx
- en: 'Now you can tell Nginx what to do using the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下代码告诉Nginx要做什么：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This tells Nginx to forward calls on port `80` to `example.com`, and subdomains
    of it to `http://localhost:5000`, which is the default address of your application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Nginx将端口`80`上的调用转发到`example.com`，以及它的子域名到`http://localhost:5000`，这是您应用程序的默认地址。
- en: Configuring Apache
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Apache
- en: 'The Apache configuration looks pretty similar to the Nginx method, and does
    the same things at the end:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Apache的配置看起来与Nginx方法非常相似，并在最后做同样的事情：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That's it for Nginx and Apache. Let's now wrap up this chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx和Apache就到这里。现在让我们总结这一章。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: ASP.NET Core and the .NET CLI already contain all the tools to get them running
    on various platforms and to set it up to get it ready for Azure and IIS, as well
    as Nginx. This is super easy and well described in the documentation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 和 .NET CLI 已经包含了所有工具，可以将它们部署到各种平台，并设置好以准备在 Azure、IIS 以及 Nginx 上运行。这非常简单，在文档中有详细描述。
- en: Currently, we have `WebHostBuilder`, which creates the hosting environment of
    the applications. In version 3.0, we have `HostBuilder`, which is able to create
    a hosting environment that is completely independent of any web context.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们拥有 `WebHostBuilder`，它可以创建应用程序的托管环境。在3.0版本中，我们有了 `HostBuilder`，它能够创建一个完全独立于任何Web上下文的托管环境。
- en: ASP.NET Core 6.0 has a feature to run tasks in the background inside the application.
    To learn more about that, read the next chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 6.0 具有在应用程序内部运行后台任务的功能。要了解更多信息，请阅读下一章。
- en: Further reading
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information you can refer to the following links:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，您可以参考以下链接：
- en: '**Kestrel documentation**: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-6.0)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kestrel 文档**：[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-6.0)'
- en: '**HTTP.sys documentation**: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-6.0)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP.sys 文档**：[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-6.0)'
- en: '**ASP.NET Core**: [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-6.0)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core**：[https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-6.0)'
