["```cs\napp.MapGet(\"/simplest-form\", ...);\napp.MapGet(\"/single-error\", ...);\napp.MapGet(\"/single-error-with-value\", ...);\napp.MapGet(\"/multiple-errors-with-value\", ...);\napp.MapGet(\"/multiple-errors-with-value-and-severity\", ...);\napp.MapGet(\"/static-factory-methods\", ...);\n```", "```cs\napp.MapGet(\n    \"/simplest-form\",\n    (OperationResult.SimplestForm.Executor executor) =>\n    {\n        var result = executor.Operation();\n        if (result.Succeeded)\n        {\n            // Handle the success\n            return \"Operation succeeded\";\n        }\n        else\n        {\n            // Handle the failure\n            return \"Operation failed\";\n        }\n    }\n);\n```", "```cs\nnamespace OperationResult.SimplestForm;\npublic class Executor\n{\n    public OperationResult Operation()\n    {\n        // Randomize the success indicator\n        // This should be real logic\n        var randomNumber = Random.Shared.Next(100);\n        var success = randomNumber % 2 == 0;\n        // Return the operation result\n        return new OperationResult(success);\n    }\n}\npublic record class OperationResult(bool Succeeded);\n```", "```cs\nnamespace OperationResult.SingleError\npublic record class OperationResult\n{\n    public bool Succeeded => string.IsNullOrWhiteSpace(ErrorMessage);\n    public string? ErrorMessage { get; init; }\n}\n```", "```cs\nnamespace OperationResult.SingleError\npublic class Executor\n{\n    public OperationResult Operation()\n    {\n        // Randomize the success indicator\n        // This should be real logic\n        var randomNumber = Random.Shared.Next(100);\n        var success = randomNumber % 2 == 0;\n        // Return the operation result\n        return success\n            ? new()\n            : new() { ErrorMessage = $\"Something went wrong with the number '{randomNumber}'.\" };\n    }\n}\n```", "```cs\napp.MapGet(\n    \"/single-error\",\n    (OperationResult.SingleError.Executor executor) =>\n    {\n        var result = executor.Operation();\n        if (result.Succeeded)\n        {\n            // Handle the success\n            return \"Operation succeeded\";\n        }\n        else\n        {\n            // Handle the failure\n            return result.ErrorMessage;\n        }\n    }\n);\n```", "```cs\nnamespace OperationResult.SingleErrorWithValue;\npublic record class OperationResult\n{\n    public bool Succeeded => string.IsNullOrWhiteSpace(ErrorMessage);\n    public string? ErrorMessage { get; init; }\n    public int? Value { get; init; }\n}\n```", "```cs\nnamespace OperationResult.SingleErrorWithValue;\npublic class Executor\n{\n    public OperationResult Operation()\n    {\n        // Randomize the success indicator\n        // This should be real logic\n        var randomNumber = Random.Shared.Next(100);\n        var success = randomNumber % 2 == 0;\n        // Return the operation result\n        return success\n            ? new() { Value = randomNumber }\n            : new()\n            {\n                ErrorMessage = $\"Something went wrong with the number '{randomNumber}'.\",\n                Value = randomNumber,\n            };\n    }\n}\n```", "```cs\napp.MapGet(\n    \"/single-error-with-value\",\n    (OperationResult.SingleErrorWithValue.Executor executor) =>\n    {\n        var result = executor.Operation();\n        if (result.Succeeded)\n        {\n            // Handle the success\n            return $\"Operation succeeded with a value of '{result.Value}'.\";\n        }\n        else\n        {\n            // Handle the failure\n            return result.ErrorMessage;\n        }\n    }\n);\n```", "```cs\nnamespace OperationResult.MultipleErrorsWithValue;\npublic record class OperationResult\n{\n    public OperationResult()\n    {\n        Errors = ImmutableList<string>.Empty;\n    }\n    public OperationResult(params string[] errors)\n    {\n        Errors = errors.ToImmutableList();\n    }\n    public bool Succeeded => !HasErrors();\n    public int? Value { get; init; }\n    public IReadOnlyCollection<string> Errors { get; init; }\n    public bool HasErrors()\n    {\n        return Errors?.Count > 0;\n    }\n}\n```", "```cs\napp.MapGet(\n    \"/multiple-errors-with-value\",\n    object (OperationResult.MultipleErrorsWithValue.Executor executor)\n    => {\n        var result = executor.Operation();\n        if (result.Succeeded)\n        {\n            // Handle the success\n            return $\"Operation succeeded with a value of '{result.Value}'.\";\n        }\n        else\n        {\n            // Handle the failure\n            return result.Errors;\n        }\n    }\n);\n```", "```cs\nnamespace OperationResult.WithSeverity;\npublic record class OperationResultMessage\n{\n    public OperationResultMessage(string message, OperationResultSeverity severity)\n    {\n        Message = message ?? throw new ArgumentNullException(nameof(message));\n        Severity = severity;\n    }\n    public string Message { get; }\n    public OperationResultSeverity Severity { get; }\n}\npublic enum OperationResultSeverity\n{\n    Information = 0,\n    Warning = 1,\n    Error = 2\n}\n```", "```cs\nbuilder.Services\n    .Configure<JsonOptions>(o\n        => o.SerializerOptions.Converters.Add(\n            new JsonStringEnumConverter()))\n;\n```", "```cs\nnamespace OperationResult.WithSeverity;\npublic record class OperationResult\n{\n    public OperationResult()\n    {\n        Messages = ImmutableList<OperationResultMessage>.Empty;\n    }\n    public OperationResult(params OperationResultMessage[] messages)\n    {\n        Messages = messages.ToImmutableList();\n    }\n    public bool Succeeded => !HasErrors();\n    public int? Value { get; init; }\n    public ImmutableList<OperationResultMessage> Messages { get; init; }\n    public bool HasErrors()\n    {\n        return FindErrors().Any();\n    }\n    private IEnumerable<OperationResultMessage> FindErrors()\n        => Messages.Where(x => x.Severity == OperationResultSeverity.Error);\n}\n```", "```cs\nnamespace OperationResult.WithSeverity;\npublic class Executor\n{\n    public OperationResult Operation()\n    {\n        // Randomize the success indicator\n        // This should be real logic\n        var randomNumber = Random.Shared.Next(100);\n        var success = randomNumber % 2 == 0;\n        // Some information message\n        var information = new OperationResultMessage(\n            \"This should be very informative!\",\n            OperationResultSeverity.Information\n        );\n        // Return the operation result\n        if (success)\n        {\n            var warning = new OperationResultMessage(\n                \"Something went wrong, but we will try again later automatically until it works!\",\n                OperationResultSeverity.Warning\n            );\n            return new OperationResult(information, warning) { Value = randomNumber };\n        }\n        else\n        {\n            var error = new OperationResultMessage(\n                $\"Something went wrong with the number '{randomNumber}'.\",\n                OperationResultSeverity.Error\n            );\n            return new OperationResult(information, error) { Value = randomNumber };\n        }\n    }\n}\n```", "```cs\napp.MapGet(\"/multiple-errors-with-value-and-severity\", (OperationResult.WithSeverity.Executor executor) =>\n{\n    var result = executor.Operation();\n    if (result.Succeeded)\n    {\n        // Handle the success\n    }\n    else\n    {\n        // Handle the failure\n    }\n    return result;\n});\n```", "```cs\n{\n    \"succeeded\": true,\n    \"value\": 56,\n    \"messages\": [\n        {\n            \"message\": \"This should be very informative!\",\n            \"severity\": \"Information\"\n        },\n        {\n            \"message\": \"Something went wrong, but we will try again later automatically until it works!\",\n            \"severity\": \"Warning\"\n        }\n    ]\n}\n```", "```cs\n{\n    \"succeeded\": false,\n    \"value\": 19,\n    \"messages\": [\n        {\n            \"message\": \"This should be very informative!\",\n            \"severity\": \"Information\"\n        },\n        {\n            \"message\": \"Something went wrong with the number '19'.\",\n            \"severity\": \"Error\"\n        }\n    ]\n}\n```", "```cs\npublic enum OperationStatus { Success, Failure, PartialSuccess }\n```", "```cs\nnamespace OperationResult.StaticFactoryMethod;\npublic abstract record class OperationResult\n{\n    private OperationResult() { }\n    public abstract bool Succeeded { get; }\n    public static OperationResult Success(int? value = null)\n    {\n        return new SuccessfulOperationResult { Value = value };\n    }\n    public static OperationResult Failure(params OperationResultMessage[] errors)\n    {\n        return new FailedOperationResult(errors);\n    }\n    private record class SuccessfulOperationResult : OperationResult\n    {\n        public override bool Succeeded { get; } = true;\n        public virtual int? Value { get; init; }\n    }\n    private record class FailedOperationResult : OperationResult\n    {\n        public FailedOperationResult(params OperationResultMessage[] errors)\n        {\n            Messages = errors.ToImmutableList();\n        }\n        public override bool Succeeded { get; } = false;\n        public ImmutableList<OperationResultMessage> Messages { get; }\n    }\n}\n```", "```cs\nnamespace OperationResult.StaticFactoryMethod;\npublic class Executor\n{\n    public OperationResult Operation()\n    {\n        // Randomize the success indicator\n        // This should be real logic\n        var randomNumber = Random.Shared.Next(100);\n        var success = randomNumber % 2 == 0;\n        // Return the operation result\n        if (success)\n        {\n            return OperationResult.Success(randomNumber);\n        }\n        else\n        {\n            var error = new OperationResultMessage(\n                $\"Something went wrong with the number '{randomNumber}'.\",\n                OperationResultSeverity.Error\n            );\n            return OperationResult.Failure(error);\n        }\n    }\n}\n```", "```cs\n{\n    \"succeeded\": true,\n    \"value\": 80\n}\n```", "```cs\n{\n    \"succeeded\": false,\n    \"messages\": [\n        {\n            \"message\": \"Something went wrong with the number '37'.\",\n            \"severity\": \"Error\"\n        }\n    ]\n}\n```"]