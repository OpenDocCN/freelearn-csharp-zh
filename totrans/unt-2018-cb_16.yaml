- en: Working with External Resource Files and Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与外部资源文件和设备一起工作
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Loading external resource files—using Unity default resources
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载外部资源文件——使用Unity默认资源
- en: Loading external resource files—downloading files from the internet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载外部资源文件——从互联网下载文件
- en: "Loading external resource files—manually storing files in the Unity \Lresources\
    \ or `StreamingAssets` folders"
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载外部资源文件——手动将文件存储在Unity的“资源”或`StreamingAssets`文件夹中
- en: Saving project files into Unity Asset Bundles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目文件保存到Unity Asset Bundles中
- en: Loading resources from Unity Asset Bundles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Unity Asset Bundles加载资源
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: For some projects, it works well to use the **Inspector** window to manually
    assign imported assets to the component slots, and then build and play the game
    with no further changes. However, there are also many times when external data
    of some kind can add flexibility and features to a game. For example, it might
    add updateable or user-editable content; it can allow memory of user preferences
    and achievements between scenes, and even game-playing sessions. Using code to
    read local or internet file content at runtime can help file organization and
    the separation of tasks between game programmers and content designers. Having
    an arsenal of different assets and long-term game memory techniques means providing
    a wide range of opportunities to deliver a rich experience to players and developers
    alike.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些项目，使用**检查器**窗口手动将导入的资产分配到组件槽位，然后构建并播放游戏，无需进一步更改，效果很好。然而，也有很多时候，某些类型的外部数据可以为游戏增加灵活性和功能。例如，它可能添加可更新或用户可编辑的内容；它可以使用户偏好和成就之间的场景，甚至游戏会话的记忆。在运行时使用代码读取本地或互联网文件内容可以帮助文件组织和游戏程序员与内容设计师之间的任务分离。拥有不同类型的资产和长期游戏记忆技术意味着为玩家和开发者提供广泛的机会，以提供丰富的体验。
- en: The big picture
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体情况
- en: 'Before getting on with the recipes, let''s step back and have a quick review
    of the role of the asset files and the Unity game building and running process.
    The most straightforward way to work with assets is to import them into a Unity
    project, use the **Inspector** window to assign the assets to the components in
    the Inspector, and then build and play the game:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续介绍食谱之前，让我们退后一步，快速回顾一下资产文件在Unity游戏构建和运行过程中的作用。与资产最直接的工作方式是将它们导入到Unity项目中，使用**检查器**窗口将资产分配给检查器中的组件，然后构建并播放游戏：
- en: '![](img/efbf595d-70a6-4d51-9933-1493f7102ec1.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efbf595d-70a6-4d51-9933-1493f7102ec1.png)'
- en: Standalone executables offer another possible workflow, which is the adding
    of files into the `Resources` folder of the game after it has been built. This
    will support game media asset developers being able to provide the final version
    of assets after development and building has been completed. However, another
    option is to use the **WWW** class to dynamically read assets from the web at
    runtime or, perhaps, for communication with a high score or multiplayer server,
    and sending and receiving information and files.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 独立的可执行文件提供另一种可能的流程，即在游戏构建后将其文件添加到游戏的`Resources`文件夹中。这将支持游戏媒体资产开发者能够在开发和构建完成后提供资产的最终版本。然而，另一个选项是使用**WWW**类在运行时动态地从网络读取资产，或者，也许是为了与高分或多人游戏服务器通信，发送和接收信息和文件。
- en: When loading/saving data either locally or via the web interface, it is important
    to keep in mind the data types that can be used. When writing C# code, our variables
    can be of any type permitted by the language, but when communicated by the web
    interface, or to a local storage using Unity's **PlayerPrefs** class, we are restricted
    in the types of data that we can work with. Unity's **WWW** class permits three
    file types (text files, binary audio clips, and binary image textures), but, for
    example, for 2D UIs, we sometimes need **Sprite** images and not Textures, so
    we have provided in this chapter a C# method to create a **Sprite** from a **Texture**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当在本地或通过网络界面加载/保存数据时，重要的是要记住可以使用的数据类型。当编写C#代码时，我们的变量可以是语言允许的任何类型，但当通过网络界面通信或使用Unity的**PlayerPrefs**类与本地存储通信时，我们在可以处理的数据类型上受到限制。Unity的**WWW**类允许三种文件类型（文本文件、二进制音频剪辑和二进制图像纹理），但例如，对于2D
    UI，我们有时需要**精灵**图像而不是纹理，因此我们在本章提供了一个C#方法，可以从**纹理**创建**精灵**。
- en: 'When using the **PlayerPrefs** class, we are limited to saving and loading
    integers, floats, and strings:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用**PlayerPrefs**类时，我们限于保存和加载整数、浮点数和字符串：
- en: '![](img/959e4092-0018-46b2-b1c7-53f99f6ca981.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/959e4092-0018-46b2-b1c7-53f99f6ca981.png)'
- en: 'The WWW is a small class and is straightforward to use. In recent years, Unity
    has introduced the **Unity Web Request system**, as part of its networking library,
    for creating and processing HTTP messages (requests and responses). While the
    **WWW** class is sufficient for the resource saving and loading recipes in this
    chapter, if you are likely to want to work in a more sophisticated way with HTTP
    messages, then you would be advised to learn about Unity Web Requests, such as
    at the following links:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WWW是一个小类，使用起来非常简单。近年来，Unity在其网络库中引入了**Unity Web Request系统**，用于创建和处理HTTP消息（请求和响应）。虽然**WWW**类足以处理本章中的资源保存和加载菜谱，但如果你可能需要以更复杂的方式处理HTTP消息，那么建议学习Unity
    Web Requests，例如以下链接：
- en: 'Unity manual section on Unity Web Requests: [https://docs.unity3d.com/Manual/UnityWebRequest.html](https://docs.unity3d.com/Manual/UnityWebRequest.html)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity Web Requests的Unity手册部分：[https://docs.unity3d.com/Manual/UnityWebRequest.html](https://docs.unity3d.com/Manual/UnityWebRequest.html)
- en: Example use of a Unity Web Request on GitHub: [https://gist.github.com/emoacht/89590d4e4571d40f9e1b](https://gist.github.com/emoacht/89590d4e4571d40f9e1b)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub上Unity Web Request的示例用法：[https://gist.github.com/emoacht/89590d4e4571d40f9e1b](https://gist.github.com/emoacht/89590d4e4571d40f9e1b)
- en: Examples of HTTP GET/PUT, and so on, requests from StackOverflow: [https://stackoverflow.com/questions/46003824/sending-http-requests-in-c-sharp-with-unity](https://stackoverflow.com/questions/46003824/sending-http-requests-in-c-sharp-with-unity)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackOverflow上HTTP GET/PUT等请求的示例：[https://stackoverflow.com/questions/46003824/sending-http-requests-in-c-sharp-with-unity](https://stackoverflow.com/questions/46003824/sending-http-requests-in-c-sharp-with-unity)
- en: Loading external resource files – using Unity Default Resources
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载外部资源文件 - 使用Unity默认资源
- en: In this recipe, we will load an external image file, and display it on the screen,
    using the Unity Default Resources file (a library created at the time the game
    was compiled).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将加载一个外部图像文件，并使用Unity默认资源文件（在游戏编译时创建的库）将其显示在屏幕上。
- en: This method is perhaps the simplest way to store and read the external resource
    files. However, it is only appropriate when the contents of the resource files
    will not change after compilation, since the contents of these files are combined
    and compiled into the `resources.assets` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可能是存储和读取外部资源文件的最简单方式。然而，只有在资源文件的内容在编译后不会改变的情况下才适用，因为这些文件的内容被合并并编译到`resources.assets`文件中。
- en: 'The `resources.assets` file can be found in the `Data` folder for a compiled
    game:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的游戏在`Data`文件夹中可以找到`resources.assets`文件：
- en: '![](img/f782bcfb-b96b-4115-9a58-6b21ed2a68c7.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f782bcfb-b96b-4115-9a58-6b21ed2a68c7.png)'
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In the 10_01 folder, we have provided an image file, a text file, and an audio
    file in the `.ogg` format for this recipe:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`10_01`文件夹中，我们为这个菜谱提供了一个图像文件、一个文本文件以及一个`.ogg`格式的音频文件：
- en: '`externalTexture.jpg`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`externalTexture.jpg`'
- en: '`cities.txt`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cities.txt`'
- en: '`soundtrack.ogg`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soundtrack.ogg`'
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To load the external resources from Unity Default Resources, do the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Unity默认资源加载外部资源，请执行以下操作：
- en: Create a new 3D Unity project.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的3D Unity项目。
- en: In the `Project` window, create a new folder and rename it `Resources`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`项目`窗口中，创建一个新的文件夹并将其重命名为`Resources`。
- en: Import the `externalTexture.jpg` file and place it in the `Resources` folder.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`externalTexture.jpg`文件导入并放置在`Resources`文件夹中。
- en: Create a 3D cube, and name it `Cube-1`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个3D立方体，并将其命名为`Cube-1`。
- en: 'Create a C# `ReadDefaultResources` script class and add an instance object
    as a component to `Cube-1`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个C# `ReadDefaultResources`脚本类，并将其作为组件添加到`Cube-1`：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Play the scene. The `texture` will be loaded and displayed on the screen.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。`纹理`将被加载并在屏幕上显示。
- en: If you have another image file, put a copy into the `Resources` folder. Then,
    in the `Inspector` window, change the public file name to the name of your image
    file and play the scene again. The new image will now be displayed.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还有其他图像文件，将其副本放入`Resources`文件夹。然后，在`检查器`窗口中，将公共文件名更改为你的图像文件名，再次播放场景。现在将显示新的图像。
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: "The `Resources.Load (fileName)` statement makes Unity look inside its compiled\
    \ project data file called resources.assets for the contents of a file named `externalTexture.`\
    \ The contents are returned as a texture image, which is stored into the `externalImage`\
    \ variable. The last statement in the `Start()` method sets the texture of the\
    \ GameObject \Lthe script has been attached to our externalImage variable."
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resources.Load (fileName)` 语句使 Unity 在其编译的项目数据文件 `resources.assets` 中查找名为
    `externalTexture` 的文件的内容。内容作为纹理图像返回，并存储在 `externalImage` 变量中。`Start()` 方法中的最后一个语句将脚本附加到的
    GameObject 的纹理设置为我们的外部 `externalImage` 变量。'
- en: The string variable `fileName` is public property, so you can select GameObject
    Cube-1 in the Hierarchy, and edit the File Name string in the Read Default Resources
    (Script) component in the Inspector.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串变量 `fileName` 是公共属性，因此您可以在层次结构中选择 GameObject Cube-1，并在检查器中编辑 Read Default
    Resources (Script) 组件中的文件名字符串。
- en: The filename string passed to `Resources.Load()` does not include the file extension
    (such as `.jpg` or `.txt`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `Resources.Load()` 的文件名字符串不包括文件扩展名（例如 `.jpg` 或 `.txt`）。
- en: There's more...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Here are some details that you won't want to miss.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些您不想错过的细节。
- en: Loading text files with this method
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用此方法加载文本文件
- en: 'You can load the external text files using the same approach. The private variable
    needs to be a string (to store the text file content). The `Start()` method uses
    a temporary `TextAsset` object to receive the text file content, and the text
    property of this object contains the string content that are to be stored in the
    private `textFileContents `variable:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用相同的方法加载外部文本文件。私有变量需要是字符串（用于存储文本文件内容）。`Start()` 方法使用一个临时的 `TextAsset` 对象来接收文本文件内容，该对象的文本属性包含要存储在私有
    `textFileContents` 变量中的字符串内容：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, this string is displayed on the console:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，此字符串将在控制台上显示：
- en: '![](img/c09513a5-3963-4d1f-ba3e-c34142b4819a.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c09513a5-3963-4d1f-ba3e-c34142b4819a.png)'
- en: Loading and playing audio files with this method
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用此方法加载和播放音频文件
- en: 'You can load external audio files using the same approach. The private variable
    needs to be an `AudioClip`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用相同的方法加载外部音频文件。私有变量需要是 `AudioClip`：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We don''t try to play the `AudioClip` until loading has been completed, which
    we can test with the audio clip''s `loadState` property. Learn more about **Audio
    Load State** in the Unity scripting reference pages: [https://docs.unity3d.com/ScriptReference/AudioDataLoadState.html](https://docs.unity3d.com/ScriptReference/AudioDataLoadState.html)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会尝试播放 `AudioClip` 直到加载完成，这可以通过音频剪辑的 `loadState` 属性来测试。在 Unity 脚本参考页面中了解更多关于
    **Audio Load State** 的信息：[https://docs.unity3d.com/ScriptReference/AudioDataLoadState.html](https://docs.unity3d.com/ScriptReference/AudioDataLoadState.html)
- en: See also
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the following recipes in this chapter for more information:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中的以下菜谱以获取更多信息：
- en: Loading external resource files by manually storing files in Unity `Resources`
    folder
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过手动将文件存储在 Unity `Resources` 文件夹中来加载外部资源文件
- en: Loading external resource files by downloading files from the internet
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从互联网下载文件来加载外部资源文件
- en: Loading external resource files by downloading files from the internet
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过从互联网下载文件来加载外部资源文件
- en: One way to store and read a text file data is to store the text files on the
    web. In this recipe, the content of a text file for a given URL are downloaded,
    read, and then displayed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 存储和读取文本文件数据的一种方法是将文本文件存储在网络上。在这个菜谱中，下载、读取给定 URL 的文本文件内容，然后显示。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you need to have access to the files on a web server. If you
    run a local web server such as Apache, or have your own web hosting, then you
    can use the files in the `10_02` folder and the corresponding URL.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，您需要能够访问网络服务器上的文件。如果您运行本地网络服务器，例如 Apache，或者有自己的网络托管，那么您可以使用 `10_02` 文件夹中的文件和相应的
    URL。
- en: 'Otherwise, you may find the following URLs useful, since they are the web locations
    of an image file (a Packt Publishing logo) and a text file (an ASCII-art badger
    picture):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，您可能会发现以下 URL 有用，因为它们是图像文件（Packt 出版物的标志）和文本文件（ASCII 艺术獾图片）的网络位置：
- en: '[www.packtpub.com/sites/default/files/packt_logo.png](http://www.packtpub.com/sites/default/files/packt_logo.png)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![packt logo](http://www.packtpub.com/sites/default/files/packt_logo.png)'
- en: '[www.ascii-art.de/ascii/ab/badger.txt](http://www.ascii-art.de/ascii/ab/badger.txt)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![ASCII 艺术獾](http://www.ascii-art.de/ascii/ab/badger.txt)'
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To load external resources by downloading them from the Internet, do the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从互联网下载来加载外部资源，请按照以下步骤操作：
- en: In a 3D project, create a new RawImage UI GameObject.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在3D项目中，创建一个新的RawImage UI游戏对象。
- en: 'Create a C# ReadImageFromWeb script class and add an instance object as a component
    to the RawImage GameObject:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个C# ReadImageFromWeb脚本类，并将其实例对象作为组件添加到RawImage游戏对象中：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Play the **Scene.** Once downloaded, the content of the image file will be
    displayed:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放**场景**。一旦下载完成，图像文件的内容将被显示：
- en: '![](img/73064cad-b97b-4763-b97e-f4c7e5f52bfa.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/73064cad-b97b-4763-b97e-f4c7e5f52bfa.png)'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Note the need to use the `UnityEngine.UI` package for this recipe.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意需要使用`UnityEngine.UI`包来实现此食谱。
- en: "When the game starts, our `Start()` method starts the coroutine method called\
    \ `LoadWWW()`. A **coroutine** is a method that can keep on running in the background\
    \ without halting or \Lslowing down the other parts of the game and the frame\
    \ rate. The yield statement indicates that once a value can be returned for `imageFile,`\
    \ the remainder of the method can be executed—that is, until the file has finished\
    \ downloading, no attempt should be made \Lto extract the texture property of\
    \ the `WWW` object variable."
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏开始时，我们的`Start()`方法启动名为`LoadWWW()`的协程方法。**协程**是一种可以在后台持续运行而不会停止或减慢游戏其他部分和帧率的函数。`yield`语句表示一旦`imageFile`可以返回值，方法的其他部分就可以执行——也就是说，直到文件下载完成，不应尝试提取`WWW`对象变量的纹理属性。
- en: Once the image data has been loaded, execution will progress past the yield
    statement. Finally, the texture property of the RawImage GameObject, to which
    the script is attached, is changed to the image data that is downloaded from the
    web (inside the texture variable of the WWW object).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图像数据被加载，执行将超过`yield`语句。最后，将脚本附加到的RawImage游戏对象的纹理属性更改为从网络下载的图像数据（在WWW对象的纹理变量中）。
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are some details that you don't want to miss.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有些细节是你不想错过的。
- en: Converting from Texture to Sprite
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从纹理转换为精灵
- en: "While in the recipe, we used a UI RawImage, and so we could use the downloaded\
    \ texture directly; however, there may be times when we wish to work with a Sprite\
    \ rather than a Texture. \LTo create a Sprite object from a texture create the\
    \ following script-class:"
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱中，我们使用了UI RawImage，因此我们可以直接使用下载的纹理；然而，有时我们可能希望使用精灵而不是纹理。要从一个纹理创建精灵对象，请创建以下脚本类：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Downloading a text file from the web
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网络下载文本文件
- en: 'Use this technique to download a text file (attach an instance of a script
    class to a UI Text object):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此技术下载文本文件（将脚本类的实例对象附加到UI Text对象）：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The WWW class and the resource content
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WWW类和资源内容
- en: "The WWW class defines several different properties and methods to allow the\
    \ downloaded media resource file data to be extracted into appropriate variables\
    \ for use in the game. \LThe most useful of these include the following:"
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: WWW类定义了多个不同的属性和方法，以便将下载的媒体资源文件数据提取到适当的变量中，以便在游戏中使用。其中最有用的包括以下内容：
- en: '`.text`: A read-only property, returning the web data as string'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.text`: 一个只读属性，返回作为字符串的网页数据'
- en: '`.texture`: A read-only property, returning the web data as a `Texture2D` image'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.texture`: 一个只读属性，返回作为`Texture2D`图像的网页数据'
- en: '`.GetAudioClip()`: A method that returns the web data as an `AudioClip`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.GetAudioClip()`: 返回作为`AudioClip`的网页数据的方法'
- en: For more information about the Unity WWW class, visit [http://docs.unity3d.com/ScriptReference/WWW.html](http://docs.unity3d.com/ScriptReference/WWW.html)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请访问[http://docs.unity3d.com/ScriptReference/WWW.html](http://docs.unity3d.com/ScriptReference/WWW.html)
- en: An example using UnityWebRequest
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用UnityWebRequest的一个示例
- en: 'Rather than the `WWW` class, we can also download the texture using the `UnityWebRequest`
    library. Just replace the content of the `ReadImageFromWeb` script class with
    the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用`WWW`类，我们还可以使用`UnityWebRequest`库来下载纹理。只需将`ReadImageFromWeb`脚本类的以下内容替换掉：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the following recipes in this chapter for more information:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中的以下食谱以获取更多信息：
- en: Loading external resource files by **Unity Default Resources**
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**Unity默认资源**加载外部资源文件
- en: "Loading external resource files by manually storing files in the Unity \L`Resources`\
    \ folder"
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过手动将文件存储在Unity的`Resources`文件夹中加载外部资源文件
- en: "Loading external resource files by manually storing files in the Unity \LResources\
    \ or StreamingAssets folders"
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过手动将文件存储在Unity的`Resources`或`StreamingAssets`文件夹中加载外部资源文件
- en: At times, the content of the external resource files may need to be changed
    after the game compilation. Hosting the resource files on the web may not be an
    option. There is a method of manually storing and reading files from the `Resources`
    folder of the compiled game, which allows for those files to be changed after
    the game compilation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在游戏编译后，可能需要更改外部资源文件的内容。在网络上托管资源文件可能不是一个选项。有一种手动存储和从编译后的游戏`Resources`文件夹中读取文件的方法，这使得这些文件在游戏编译后可以更改。
- en: The `Resources` folder technique works when you compile to a Windows or Mac
    standalone executables. The `SteamingAssets` folder technique works with these,
    and also iOS and Android devices. The next recipe illustrates the Resources folder
    technique, and then at the end we discuss how to use the `StreamingAssets` approach.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resources`文件夹技术在编译为Windows或Mac独立可执行文件时有效。`StreamingAssets`文件夹技术也适用于这些，以及iOS和Android设备。下一个菜谱将说明`Resources`文件夹技术，然后我们在最后讨论如何使用`StreamingAssets`方法。'
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The `10_01` folder provides the texture image that you can use for this recipe:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`10_01`文件夹提供了可用于此菜谱的纹理图像：'
- en: '`externalTexture.jpg`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`externalTexture.jpg`'
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To load external resources by manually storing the files in the Resources folder,
    do the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过手动将文件存储在资源文件夹中来加载外部资源，请执行以下操作：
- en: Create a new 3D project.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的3D项目。
- en: Create a new UI Image GameObject. Make this take up most of the screen.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的UI Image GameObject。使其占据屏幕的大部分区域。
- en: Create a new UI Text GameObject. Position this to stretch the full width of
    the screen, along the bottom.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的UI Text GameObject。将其定位在屏幕底部，以拉伸整个屏幕宽度。
- en: 'Create a C# ReadManualResourceImageFile script class and add an instance object
    as a component to the UI Image GameObject:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个C# ReadManualResourceImageFile脚本类，并将实例对象作为组件添加到UI Image GameObject：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With the UI Image GameObject selected in the Hierarchy, drag the UI Text object
    to populate the public Text URL property, in the Inspector, for the ResourceFileLoader
    (Script) component.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中选择UI Image GameObject后，将UI Text对象拖动到检查器中的ResourceFileLoader（脚本）组件的公共Text
    URL属性中。
- en: Save the current scene, and add it to the build settings.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存当前场景，并将其添加到构建设置中。
- en: Build your (Windows or Mac) standalone executable.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建您的（Windows或Mac）独立可执行文件。
- en: 'Copy the externalTexture.jpg image to your standalone''s `Resources` folder:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将externalTexture.jpg图像复制到您的独立应用程序的`Resources`文件夹：
- en: '![](img/205d9d02-dbbf-4607-8587-7e5f8eec85e1.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/205d9d02-dbbf-4607-8587-7e5f8eec85e1.png)'
- en: 'Run your standalone game application, and the image will be read at run-time
    from the Resources folder and displayed (and the path to that resource will be
    shown in the UI Text at the bottom of the application window):'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的独立游戏应用程序，图像将在运行时从资源文件夹中读取并显示（并且该资源的路径将在应用程序窗口底部的UI Text中显示）：
- en: '![](img/aba7b749-cc3e-4d4a-9f4d-7508f65aa022.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aba7b749-cc3e-4d4a-9f4d-7508f65aa022.png)'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A URL-path is defined, stating where Unity can find the desired image in the
    Resources folder of the standalone application build. This path is shown onscreen
    by setting the text property of the UI Text GameObject to that path's string value.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: URL路径被定义，说明了Unity如何在独立应用程序构建的资源文件夹中找到所需的图像。此路径通过将UI Text GameObject的文本属性设置为该路径的字符串值，在屏幕上显示。
- en: The **WWW** object spots that the URL starts with the file-protocol, and so
    Unity attempts to find the external resource file in its Resources folder (waiting
    until it has finished loading), and then load its content.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**WWW**对象发现URL以文件协议开头，因此Unity尝试在其资源文件夹中找到外部资源文件（等待它加载完成），然后加载其内容。'
- en: 'The `Start()` method is declared as an `IEnumerator`, allowing it to run as
    a **co-routine**, and so wait until the WWW class object completes its loading
    of the image file:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Start()`方法被声明为`IEnumerator`，允许它作为**协程**运行，并因此等待直到WWW类对象完成图像文件的加载：'
- en: You will need to place the files in the Resources folder manually after every
    compilation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在每次编译后手动将文件放置在资源文件夹中。
- en: When you create a Windows or Linux standalone executable, there is also a `_Data`
    folder, created with the executable application file. The Resources folder can
    be found inside this Data folder.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建Windows或Linux独立可执行文件时，还有一个名为_Data的文件夹，与可执行应用程序文件一起创建。资源文件夹位于此数据文件夹内部。
- en: A Mac standalone application executable looks like a single file, but it is
    actually a macOS package folder. Right-click on the executable file and select
    **Show Package Contents**. You will then find the standalone's Resources folder
    inside the Contents folder.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 独立应用程序的可执行文件看起来像一个单独的文件，但实际上是一个 macOS 包文件夹。右键单击可执行文件并选择 **显示包内容**。然后你将在
    Contents 文件夹内找到独立版本的 Resources 文件夹。
- en: 'We are using the file protocol for the URL, which must start in the form: `file:///:`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用文件协议作为 URL，它必须以以下形式开始：`file:///:`
- en: For the OSX standalone, the Unity Application.dataPath will return a path in
    the form `/user/location-to-Contents`, so we prefix this with `file://` to get
    a valid file-protocol URL in the form `file:///user/location-to-Contents`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 OSX 独立版本，Unity Application.dataPath 返回的路径形式为 `/user/location-to-Contents`，因此我们在这个路径前加上
    `file://` 以获取有效的文件协议 URL，形式为 `file:///user/location-to-Contents`。
- en: For Windows the standalone for the Unity Application.dataPath will return a
    path in the form `C:Projects/MyUnityProject/location-to-``Data`, so we prefix
    this with `file:/// to get a valid file-prototcol` URL in the form `file:///C:Projects/MyUnityProject/location-to-Data`
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，Unity Application.dataPath 返回的路径形式为 `C:Projects/MyUnityProject/location-to-``Data`，因此我们在这个路径前加上
    `file:///` 以获取有效的文件协议 URL，形式为 `file:///C:Projects/MyUnityProject/location-to-Data`
- en: 'Learn more from the Unity documentation and Unity answers pages:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Unity 文档和 Unity 答案页面了解更多信息：
- en: 'Scripting `Application.dataPath`: [https://docs.unity3d.com/ScriptReference/Application-dataPath.html](https://docs.unity3d.com/ScriptReference/Application-dataPath.html)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本 `Application.dataPath`：[https://docs.unity3d.com/ScriptReference/Application-dataPath.html](https://docs.unity3d.com/ScriptReference/Application-dataPath.html)
- en: 'Unity Answers: [https://answers.unity.com/questions/517414/how-to-use-www-to-load-local-files.html](https://answers.unity.com/questions/517414/how-to-use-www-to-load-local-files.html)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 答案：[https://answers.unity.com/questions/517414/how-to-use-www-to-load-local-files.html](https://answers.unity.com/questions/517414/how-to-use-www-to-load-local-files.html)
- en: There's more...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are some details that you don't want to miss.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有些细节你不希望错过。
- en: Avoiding cross-platform problems with Path.Combine() rather than / or \
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用 Path.Combine() 而不是 / 或 \ 来解决跨平台问题
- en: The filepath folder separator character is different for Windows and Mac file
    systems (backslash \ for Windows, forward slash / for the Mac). However, Unity
    knows which kind of standalone you are compiling your project into; therefore,
    the `Path.Combine()` method will insert the appropriate separator slash character
    form the file URL that is required.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 和 Mac 文件系统中的文件路径分隔符字符不同（Windows 使用反斜杠 \，Mac 使用正斜杠 /）。然而，Unity 知道你正在将项目编译成哪种类型的独立版本；因此，`Path.Combine()`
    方法会插入所需的文件 URL 中的适当分隔符斜杠字符。
- en: SteamingAssets folder
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StreamingAssets 文件夹
- en: 'If deploying to iOS or Android, the `Resources` folder technique won''t work,
    and you should create and store resource files in a folder named `StreamingAssets.`
    For example, if you had a text file named `MyTextFile.txt`, you could create a
    folder named `StreamingAssets` in the **Project** panel, store file `MyTextFile.txt` in
    that folder, and use the following code to load the content of that file at run-time
    with your built application:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果部署到 iOS 或 Android，`Resources` 文件夹技术将不起作用，你应该在名为 `StreamingAssets.` 的文件夹中创建和存储资源文件。例如，如果你有一个名为
    `MyTextFile.txt` 的文本文件，你可以在 **项目** 面板中创建一个名为 `StreamingAssets` 的文件夹，将文件 `MyTextFile.txt`
    存储在该文件夹中，并使用以下代码在运行时使用你的应用程序加载该文件的内容：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Learn more about the StreamingAsset folder in Unity at the following links: [https://docs.unity3d.com/Manual/StreamingAssets.html](https://docs.unity3d.com/Manual/StreamingAssets.html) and  [https://docs.unity3d.com/ScriptReference/Application-streamingAssetsPath.html](https://docs.unity3d.com/ScriptReference/Application-streamingAssetsPath.html)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接中了解更多关于 Unity 中 StreamingAsset 文件夹的信息：[https://docs.unity3d.com/Manual/StreamingAssets.html](https://docs.unity3d.com/Manual/StreamingAssets.html)
    和 [https://docs.unity3d.com/ScriptReference/Application-streamingAssetsPath.html](https://docs.unity3d.com/ScriptReference/Application-streamingAssetsPath.html)
- en: See also
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the following recipes in this chapter for more information:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中的以下食谱以获取更多信息：
- en: Loading external resource files by Unity Default Resources
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Unity 默认资源加载外部资源文件
- en: Loading external resource files by downloading files from the internet
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从互联网下载文件来加载外部资源文件
- en: Saving Project files into Unity Asset Bundles
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将项目文件保存到 Unity Asset Bundles
- en: Unity provides the Asset Bundle mechanism as another way to manage the loading
    of resources at run-time. Asset Bundles can be stored locally, or on the intenet.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 提供了 Asset Bundle 机制作为另一种在运行时管理资源加载的方法。Asset Bundles 可以存储在本地或互联网上。
- en: In this recipe, we will create a prefab (of a 3D cube GameObject), and save
    it into an Asset Bundle.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将创建一个Prefab（3D立方体GameObject的Prefab），并将其保存到Asset Bundle中。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the `10_06` folder, we have provided the `externalTexture.jpg` image file.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`10_06`文件夹中，我们提供了`externalTexture.jpg`图像文件。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To save Unity Asset Bundles, do the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存Unity Asset Bundles，请执行以下操作：
- en: Create a new 3D Unity project.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的3D Unity项目。
- en: Import the provided image file (into a new folder named Textures).
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的图像文件（到名为Textures的新文件夹中）。
- en: Create a new Cube (named `Cube-1`) in the scene, and apply the imported texure
    image.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中创建一个新的立方体（命名为`Cube-1`），并应用导入的纹理图像。
- en: In the Project window, create a new folder and rename it Prefabs.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口中，创建一个新文件夹并将其重命名为Prefabs。
- en: In the Project folder Prefabs, create a new empty Prefab named cube.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹Prefabs中，创建一个名为cube的新空Prefab。
- en: From the Scene panel, drag GameObject Cube-1 over the Prefab cube in Project
    folder Prefabs. The prefab should turn blue and now be a file storing the properties
    of GameObject Cube-1.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从场景面板，将GameObject Cube-1拖到项目文件夹Prefabs中的Prefab cube上。Prefab应该变成蓝色，现在它是一个存储GameObject
    Cube-1属性的文件。
- en: 'With the file cube selected in the Project panel, go to the bottom of the Inspector
    panel and create a new AssetBundle, naming it chapter11\. See the screenshot illustrating
    this:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中选中文件cube，转到检查器面板底部创建一个新的AssetBundle，命名为chapter11。请参阅说明截图：
- en: '![](img/79fde76b-531e-4a77-9c81-f85e0d4a6ef6.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79fde76b-531e-4a77-9c81-f85e0d4a6ef6.png)'
- en: In the Project panel, create a new folder called `Editor` and `AssetBundles`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，创建一个名为`Editor`和`AssetBundles`的新文件夹。
- en: 'In the Editor folder, create a new C# CreateAssetBundles script class containing
    the following code:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Editor`文件夹中，创建一个新的C# CreateAssetBundles脚本类，包含以下代码：
- en: '[PRE9]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should now see two new menu items added to the bottom of the Assets menu:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该能在资产菜单底部看到两个新菜单项：
- en: '![](img/ded3e541-21cc-49a7-86d5-5bb0ba87c20b.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ded3e541-21cc-49a7-86d5-5bb0ba87c20b.png)'
- en: Choose the create bundles action for the operating system you are using (Mac
    or Windows).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适合你使用的操作系统（Mac或Windows）的创建包操作。
- en: 'You should now see files created in folder `AssetBundles`: `AssetBundles` and
    `chapter11`.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该能在文件夹`AssetBundles`中看到创建的文件：`AssetBundles`和`chapter11`。
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Resources.Load(fileName)` statement makes Unity look inside its compiled
    project data file called `resources.assets` for the content of a file named `externalTexture`.
    The content is returned as a texture image, which is stored into the `externalImage`
    variable. The last statement in the `Start()` method sets the texture of the GameObject
    to which the script has been attached to our `externalImage` variable.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resources.Load(fileName)`语句使Unity在其编译的项目数据文件`resources.assets`中查找名为`externalTexture`的文件的内容。内容作为纹理图像返回，并存储到`externalImage`变量中。`Start()`方法中的最后一个语句将GameObject的纹理设置为附加脚本的`externalImage`变量。'
- en: The string varable fileName is a public property, so you can select GameObject
    Cube-1 in the Hierarchy, and edit the File Name string in the Read Default Resources
    (Script) component in the Inspector.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串变量fileName是一个公共属性，因此你可以选择层次结构中的GameObject Cube-1，并在检查器中的Read Default Resources（Script）组件中编辑文件名字符串。
- en: 'Learn more about AssetBundles and the workflow recommended by Unity at the
    following addresses:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下地址了解更多关于Asset Bundles和Unity推荐的工作流程：
- en: 'Asset Bundles Workflow: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Asset Bundles工作流程：[https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html)
- en: 'Native use of Asset Bundles: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Asset Bundle的本地使用：[https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html)
- en: Loading resources from Unity Asset Bundles
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Unity Asset Bundles加载资源
- en: 'In this recipe, we will load an Asset Bundle, and retrieve a prefab, then create
    (Instantiate) a `GameObject` in the scene from the retrieved data:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将加载一个Asset Bundle，检索一个预制件，然后从检索到的数据中在场景中创建（实例化）一个`GameObject`：
- en: '![](img/517b3d1c-838f-4c05-93d4-e6653824610a.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/517b3d1c-838f-4c05-93d4-e6653824610a.png)'
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the files created by the previous reciple. We have also provided
    a copy of folder AssetBundles in `10_07` folder.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用前一个教程创建的文件。我们还提供了`10_07`文件夹中AssetBundles文件夹的副本。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To load Unity Asset Bundles, do the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载 Unity 资产包，请执行以下操作：
- en: Create a new 3D Unity project.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 3D Unity 项目。
- en: Import the provided folder `AssetBundles`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的文件夹 `AssetBundles`。
- en: 'Create the following C# `AssetBundleLoader` script class and add an instance
    as a component of the Main Camera:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下 C# `AssetBundleLoader` 脚本类，并将其作为一个组件添加到主摄像机实例中：
- en: '[PRE10]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the **Scene,** and a cube should appear in the scene, created by extracting
    the Prefab cube file from the Asset Bundle, and then instantiating a new GameObject
    based on this prefab.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 **场景**，应该会在场景中出现一个立方体，它是通过从资产包中提取预制件立方体文件创建的，然后基于这个预制件实例化一个新的 GameObject。
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Unity method `UnityWebRequestAssetBundle.GetAssetBundle(...)` expects a file-protocol
    URI to a named Asset Bundle. This bundle was loaded into variable bundle, and
    then the `LoadAsset(...)` method used to extract the file named `cube`. Finally,
    a GameObject was created at run-time based on this prefab, resulting in the cube
    that we see when we run the scene.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 方法 `UnityWebRequestAssetBundle.GetAssetBundle(...)` 期望一个指向命名资产包的文件协议 URI。这个包被加载到变量
    `bundle` 中，然后使用 `LoadAsset(...)` 方法提取名为 `cube` 的文件。最后，在运行时基于这个预制件创建了一个 GameObject，结果是我们在运行场景时看到的立方体。
- en: The variables `bundleFolderName,` `bundleName,` and `resourceName` define the
    folder, Asset Bundle filename and prefab inside the `Asset` Bundle for this project.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `bundleFolderName`、`bundleName` 和 `resourceName` 定义了项目中的文件夹、资产包文件名和 `Asset`
    包内的预制件。
- en: 'If you select the `chapter11` manifest file (the icon that looks like a piece
    of paper with lines), then in the Inspector, you can see that it contains our
    cube prefab:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了 `chapter11` 清单文件（看起来像一张带有线条的纸张的图标），那么在检查器中，你可以看到它包含我们的立方体预制件：
- en: '[PRE11]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Learn more about `AssetBundles` and the workflow recommended by Unity at the
    following addresses:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下地址了解更多关于 `AssetBundles` 和 Unity 推荐的工作流程：
- en: 'Asset Bundles Workflow: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产包工作流程：[https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html)
- en: 'Native use of Asset Bundles: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生使用资产包：[https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html)
- en: There's more...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are some details that you don't want to miss.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有些细节你不希望错过。
- en: Loading AssetBundles via AssetBundle.LoadFromFile()
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 AssetBundle.LoadFromFile() 加载资产包
- en: An alternative to `UnityWebRequest` for local loading from tiles is to use `AssetBundle.LoadFromFile():`
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从瓦片本地加载的替代 `UnityWebRequest` 是使用 `AssetBundle.LoadFromFile():`
- en: '[PRE12]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Loading AssetBundles hosted via a web server
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过网络服务器托管加载资产包
- en: Although we have just illustrated how to load an `AssetBundle` from a local
    file, often such resources are loaded from a web server. In this case, the URI
    needs to be an internet protocol.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们刚刚展示了如何从本地文件加载 `AssetBundle`，但通常这些资源是从网络服务器加载的。在这种情况下，URI 需要是一个互联网协议。
- en: 'For example, if files are being served locally on port 8000, then the host
    will be http://localhost:8000 and so on:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果文件是在本地的 8000 端口上提供服务的，那么主机将是 http://localhost:8000 等等：
- en: '[PRE13]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
