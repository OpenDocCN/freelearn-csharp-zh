["```cs\npublic async Task<ResultObject> AsyncMethodDemo() {\n  ResultObject result = new ResultObject();\n  WebRequest request = WebRequest.Create(\"http://test-domain.com\");\n  request.Method = \"POST\";\n  Stream reqStream = request.GetRequestStream();\n\n  using (StreamWriter sw = new StreamWriter(reqStream)) {\n    sw.Write(\"Our test data query\");\n  }\n  var responseTask = request.GetResponseAsync();\n\n  result.LocalResult = LongRunningSlowMethod();\n\n  var webResponse = await responseTask;\n\n  using (StreamReader sr = new StreamReader(webResponse.GetResponseStream())) {\n    result.RequestResult = await sr.ReadToEndAsync();\n  }\n\n  return result;\n}\n```", "```cs\ntry {\n  var webResponse = await responseTask;\n\n  using (StreamReader sr = new StreamReader(webResponse.GetResponseStream())) {\n    result.RequestResult = await sr.ReadToEndAsync();\n  }\n} catch (WebException ex) {\n  Console.WriteLine(ex.Status);\n  Console.WriteLine(ex.Message);\n}\n```", "```cs\n} catch (WebException ex) {\n    ProcessException(ex);\n}\n```", "```cs\npublic void ProcessException(WebException ex) {\n    switch(ex.Status) {\n      case WebExceptionStatus.ConnectFailure:\n      case WebExceptionStatus.ConnectionClosed:\n      case WebExceptionStatus.RequestCanceled:\n      case WebExceptionStatus.PipelineFailure:\n      case WebExceptionStatus.SendFailure:\n      case WebExceptionStatus.KeepAliveFailure:\n      case WebExceptionStatus.Timeout:\n        Console.WriteLine(\"We should retry connection attempts\");\n        break;\n      case WebExceptionStatus.NameResolutionFailure:\n      case WebExceptionStatus.ProxyNameResolutionFailure:\n      case WebExceptionStatus.ServerProtocolViolation:\n      case WebExceptionStatus.ProtocolError:\n        Console.WriteLine(\"Prevent further attempts and notify consumers to check URL configurations\");\n        break;\n      case WebExceptionStatus.SecureChannelFailure:\n      case WebExceptionStatus.TrustFailure:\n        Console.WriteLine(\"Authentication or security issue. Prompt for credentials and perhaps try again\");\n        break;\n      default:\n        Console.WriteLine(\"We don't know how to handle this. We should post the error message and terminate our current workflow.\");\n        break;     \n    }\n}\n```", "```cs\ndotnet add package Polly\n```", "```cs\npublic static HttpResponseMessage ExecuteRemoteLookup() {\n    if (new Random().Next() % 2 == 0) {\n        Console.WriteLine(\"Retrying connections...\");\n        throw new WebException(\"Connection Failure\", WebExceptionStatus.ConnectFailure);\n    }\n    return new HttpResponseMessage();\n}\n```", "```cs\nprivate List<WebExceptionStatus> connectionFailure = new List<WebExceptionStatus>() {\n WebExceptionStatus.ConnectFailure,\n WebExceptionStatus.ConnectionClosed,\n WebExceptionStatus.RequestCanceled,\n WebExceptionStatus.PipelineFailure,\n WebExceptionStatus.SendFailure,\n WebExceptionStatus.KeepAliveFailure,\n WebExceptionStatus.Timeout\n};\n\nprivate List<WebExceptionStatus> resourceAccessFailure = new List<WebExceptionStatus>() {\n WebExceptionStatus.NameResolutionFailure,\n WebExceptionStatus.ProxyNameResolutionFailure,\n WebExceptionStatus.ServerProtocolViolation\n};\n\nprivate List<WebExceptionStatus> securityFailure = new List<WebExceptionStatus>() {\n WebExceptionStatus.SecureChannelFailure,\n WebExceptionStatus.TrustFailure\n};\n```", "```cs\npublic static void ExecuteRemoteLookupWithPolly() {\n    Policy connFailurePolicy = Policy\n        .Handle<WebException>(x => connectionFailure.Contains(x.Status))\n        .RetryForever();\n\n    HttpResponseMessage resp = connFailurePolicy.Execute(() => ExecuteRemoteLookup());\n    if (resp.IsSuccessStatusCode) {\n        Console.WriteLine(\"Success!\");\n    }\n}\n```", "```cs\nusing System.Threading;\n\nnamespace ErrorHandling {\n    public class Program {\n        static void Main(string[] args) {\n            PollyDemo.ExecuteRemoteLookupWithPolly();\n            Thread.Sleep(10000);\n        }\n    }\n}\n```", "```cs\npublic static HttpResponseMessage ExecuteRemoteLookup() {\n    var num = new Random().Next();\n    if (num % 3 == 0) {\n        Console.WriteLine(\"Breaking the circuit\");\n        throw new WebException(\"Name Resolution Failure\", WebExceptionStatus.NameResolutionFailure);\n    } else if (num % 4 == 0) {\n        Console.WriteLine(\"Falling Back\");\n        throw new WebException(\"Security Failure\", WebExceptionStatus.TrustFailure);\n    } else if (num % 2 == 0) {\n        Console.WriteLine(\"Retrying connections...\");\n        throw new WebException(\"Connection Failure\", WebExceptionStatus.ConnectFailure);\n    }\n    return new HttpResponseMessage();\n}\n```", "```cs\nprivate static HttpResponseMessage GetAuthorizationErrorResponse() {\n    return new HttpResponseMessage(HttpStatusCode.Unauthorized);\n}\n```", "```cs\npublic static void ExecuteRemoteLookupWithPolly() {\n    Policy connFailurePolicy = Policy\n        .Handle<WebException>(x => connectionFailure.Contains(x.Status))\n        .RetryForever();\n\n    Policy<HttpResponseMessage> authFailurePolicy = Policy<HttpResponseMessage>\n        .Handle<WebException>(x => securityFailure.Contains(x.Status))\n        .Fallback(() => GetAuthorizationErrorResponse());\n\n    Policy nameResolutionPolicy = Policy\n        .Handle<WebException>(x => resourceAccessFailure.Contains(x.Status))\n        .CircuitBreaker(1, TimeSpan.FromMinutes(2));\n\n    Policy intermediatePolicy = Policy\n        .Wrap(connFailurePolicy, nameResolutionPolicy);\n\n    Policy<HttpResponseMessage> combinedPolicies = intermediatePolicy\n        .Wrap(authFailurePolicy);\n\n    try {\n        HttpResponseMessage resp = combinedPolicies.Execute(() => ExecuteRemoteLookup());\n        if (resp.IsSuccessStatusCode) {\n            Console.WriteLine(\"Success!\");\n        } else if (resp.StatusCode.Equals(HttpStatusCode.Unauthorized)) {\n            Console.WriteLine(\"We have fallen back!\");\n        }\n    } catch (WebException ex) {\n        if (resourceAccessFailure.Contains(ex.Status)) {\n            Console.WriteLine(\"We should expect to see a broken circuit.\");\n        }\n    }\n}\n```", "```cs\npublic static void Main(string[] args) {\n    for (var i = 0; i < 24; i++) {\n        Console.WriteLine($\"Polly Demo Attempt {i}\");\n        Console.WriteLine(\"-------------\");\n        PollyDemo.ExecuteRemoteLookupWithPolly();\n        Console.WriteLine(\"-------------\");\n        Thread.Sleep(5000);\n    }\n}\n```"]