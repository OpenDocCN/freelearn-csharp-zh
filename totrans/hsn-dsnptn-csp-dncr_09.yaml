- en: Implementing Design Patterns for Web Applications - Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we extended our FlixOne inventory management console
    application to a web application while illustrating different patterns. We also
    covered **User Interface** (**UI**) architectural patterns such as **Model-View-Controller**
    (**MVC**), **Model View Presenter** (**MVP**), and others. The previous chapter
    aimed to discuss patterns such as MVC. We now need to extend our existing application
    to incorporate more patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will continue with our existing FlixOne web application
    and extend the application by working on code to see the implementation of authentication
    and authorization. In addition to this, we will discuss **Test-Driven Development**
    (**TDD**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Core web test project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter contains various code examples to explain the concepts. The code
    is kept simple and is just for demonstration purposes. Most of the examples involve
    a .NET Core console application that is written in C#.
  prefs: []
  type: TYPE_NORMAL
- en: To run and execute the code, Visual Studio 2019 is a prerequisite (you can also
    use Visual Studio 2017 to run the application).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run these code examples, you need to install Visual Studio (the preferred
    **Integrated Development Environment** (**IDE**)). To do so, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Visual Studio from the following download link, which contains installation
    instructions: [https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation instructions you find there. Multiple versions are available
    for Visual Studio installation. Here, we are using Visual Studio for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up .NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do not have .NET Core installed, you need to follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Download .NET Core for Windows using [https://www.microsoft.com/net/download/windows](https://www.microsoft.com/net/download/windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For multiple versions and a related library, visit [https://dotnet.microsoft.com/download/dotnet-core/2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do not have SQL Server installed, you need to follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download SQL Server from the following link: [https://www.microsoft.com/en-in/download/details.aspx?id=1695](https://www.microsoft.com/en-in/download/details.aspx?id=1695).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find installation instructions here: [https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For troubleshooting and for more information, refer to the following link:
    [https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm](https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete source code is available from the following link: [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter7](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter7).'
  prefs: []
  type: TYPE_NORMAL
- en: Extending the .NET Core web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue with our FlixOne inventory application. Throughout
    this chapter, we will discuss web application patterns and extend the web application
    that we developed in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter continues with the web application developed in the previous chapter.
    If you skipped the previous chapter, please revisit it to Synchronization with
    the current chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will go through the process of requirement gathering, and
    then discuss the various challenges with our web application that we developed
    before now.
  prefs: []
  type: TYPE_NORMAL
- en: Project kickoff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 6](8e089021-1efb-4b88-8bf2-e26f69f883b9.xhtml), *Implementing Design
    Patterns for Web Applications â€“ Part 1*, we extended our FlixOne inventory console
    application and developed a web application. We extended the application after
    considering the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Our business needs a rich UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New opportunities demand a responsive web application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After several meetings and discussions with the management, **Business Analysts**
    (**BAs**), and presales folks, management decided to work on the following high-level
    requirements: **business requirements** and **technical requirements**.'
  prefs: []
  type: TYPE_NORMAL
- en: Business requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The business team eventually came up with the following business requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product categorization**: There are several products, but if a user wants
    to search for a specific product, they can do so by filtering all products by
    their categories. For example, products such as mangoes, bananas, and more should
    come under a category called `Fruits`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product addition**: There should be an interface that provides us with a
    feature to add new products. This feature should only be available to users who
    have the `Add Products` privilege.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product updation**: There should be a new interface where product updates
    should be possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Product deletion**: There is a requirement for administrators to delete products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The actual requirements for meeting the business needs are now ready for development.
    After several discussions with business folks, we concluded that the following
    are the requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**You should have a landing or home page**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should be a dashboard that contains various widgets
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should show an at-a-glance picture of the store
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You should have a product page**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should have the capability to add, update, and delete products
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should have the capability to add, update, and delete product categories
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The FlixOne Inventory Management web application is an imaginary product. We
    are creating this application to discuss the various design patterns required/used
    in web projects.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have extended our existing console application to a new web application,
    it has various challenges for both developers and businesses. In this section,
    we will discuss these challenges, and then we will find out the solution to overcome
    these challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges for developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the challenges that arose due to a big change in the application.
    These were also a result of major extensions to upgrading a console application
    to a web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No support for TDD**: Currently, there is no test project incorporated in
    the solution. Consequently, developers can''t follow the TDD approach, which could
    lead to more bugs in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: In the current application, there is no mechanism to restrict
    or permit the user from providing access to a particular screen or module of the
    application. There is also nothing related to authentication and authorization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UI and User Experience (UX)**: Our app is promoted from a console-based application,
    so the UI is not very rich.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges for businesses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It takes time to achieve the final output, which delays the product, resulting
    in a loss for the business. The following challenges occur as we adapt a new technology
    stack, and there are plenty of changes in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Loss of clients**: Here, we are still in the stage of development but the
    demand for our business is very high; however, the development team is taking
    longer than expected to deliver the product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It takes more time to roll out the production updates**: Development efforts
    are time-consuming at the moment, which delays the subsequent activities and leads
    to a delay in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding a solution to the problems/challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After several meetings and brainstorming sessions, the development team came
    to the conclusion that we have to stabilize our web-based solution. To overcome
    these challenges and provide the solution, the tech team and the business team
    got together to identify the various solutions and points.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following points are supported by the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following TDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redesigning the UI to meet the UX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication and authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapterâ€”where we started upgrading our console application
    to a web applicationâ€”we added **Create, Read, Update, and Delete** (**CRUD**)
    operations, which are available publicly to any user who is able to perform them.
    There is nothing coded to restrict a particular user from performing these operations.
    The risk with this is that users who are not supposed to perform these operations
    can easily do so. The consequences of this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Unattended access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An open door for hackers/attackers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data leakage issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, if we are keen to safeguard our application and restrict the operations
    to permitted users only, then we have to implement a design that only allows these
    users to perform operations. There may be scenarios in which we could allow open
    access for a few operations. In our case, most operations are only for restricted
    access. In simple terms, we can try something that tells our application that
    the incoming user is the one who belongs to our application and can perform the
    specified task.
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication** is simply a process in which a system verifies or identifies
    the incoming requests through credentials (generally a user ID and password).
    If the system finds that the provided credentials are wrong, then it notifies
    the user (generally via a message on the GUI screen) and terminates the authorization
    process.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization** always comes after authentication. This is a process that
    allows the authenticated user who raised the request to access resources or data
    after verifying that they have access to the specific resources or data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous paragraph, we have discussed some mechanisms that stop unattended
    access to our application''s operations. Let''s refer to the following diagram
    and discuss what it shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00ea38bd-deaf-44bf-ae88-d05a91e2597e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram depicts a scenario in which the system does not allow
    unattended access. This is simply defined as follows: an incoming request is received
    and the internal system (an authentication mechanism) checks whether a request
    is authenticated or not. If a request is authenticated, then a user is allowed
    to perform the operations for which they are authorized. This is not only the
    single check, but for a typical system, authorization comes in place after authentication.
    We will discuss this in the upcoming sections.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this in a better way, let''s write a simple login application.
    Let''s follow the steps given here:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2018.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open File | New | New project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Project window, give a name to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select ASP.NET Core 2.2 for the Web Application (Model-View-Controller) template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1b73f2c-6bb3-472c-83fa-148167c195de.png)'
  prefs: []
  type: TYPE_IMG
- en: You can choose various authentications that are available as part of the selected
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, the template provides an option named No Authentication, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/56f9fe22-d905-4a1c-aaa3-9967f6e3011f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press *F5* and run the application. From here, you will see the default home
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36015566-2dc3-4f85-a9a6-5479287ae8ef.png)'
  prefs: []
  type: TYPE_IMG
- en: You will now notice that you can navigate every page without any restrictions.
    This is obvious and makes sense as these pages are available as open access. The
    Home and Privacy pages are open access and do not require any authentication,
    meaning that anyone can access/view these pages. On the other hand, we may have
    a few pages that are meant for unattended access, such as the User Profile, and
    Admin pages.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the GitHub repository for the chapter at [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6),
    and go through the entire application that we have built using ASP.NET Core MVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'To continue with our SimpleLogin application, let''s add a screen that is meant
    for restricted access: the Products screen. In this chapter, we are not going
    to discuss how to add a new controller or views to an existing project. If you
    want to know how we can add these to our project, revisit [Chapter 6](8e089021-1efb-4b88-8bf2-e26f69f883b9.xhtml),
    *Implementing Design Patterns for Web Applications â€“ Part 1*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have added new functionality to our project to showcase products with CRUD
    operations. Now, hit *F5* and check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1323798-b41f-4647-91e2-9b02aee64b03.png)'
  prefs: []
  type: TYPE_IMG
- en: You will get the output that is shown in the previous screenshot. You might
    notice that we now have a new menu named Products.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s navigate through the new menu options. Click on the Products menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4d9a790-7ca3-413c-953e-c7ffd7085696.png)'
  prefs: []
  type: TYPE_IMG
- en: The previous screenshot shows our Product page. This page is available to all
    and anyone can view it without any restrictions. You might have a look and observe
    that this page has the feature to Create New products, and to Edit and Delete
    existing products. Now, imagine a scenario where one unknown user came and deleted
    a specific product that is very important and attracts a high sales volume. You
    can imagine the scenario and how much this hampers a business. There might even
    be a chance that customers are lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our scenario, we can protect our Product page in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prior Authenticate**: On this page, the link to Products is not available
    for everyone; it is only available for authenticated requests/users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post Authenticate**: On this page, the link to Products is available for
    everyone. However, once someone requests to access the page, the system performs
    an authentication check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to implement authentication and make our web
    pages restricted for unauthenticated requests.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve authentication, we should adopt some sort of mechanism that provides
    us with a way to authenticate a user. In general cases, if a user is logged in,
    that means they are already authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our web application, we will also follow the same approach and make sure
    that the user is logged in before accessing the restricted pages, views, and operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous class is a typical `User` model/entity that represents our database
    `User` table. This table will persist all the information regarding `User`. Here
    is what every field looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Id` is a **Globally Unique Identifier** (**GUID**) and primary key in the
    table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserName` is typically used during login and other related operations. It
    is a programmatically generated field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FirstName` and `LastName` combine the full name of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Emailid` is the valid email ID of the user. It should be a valid email because
    we will validate this after/during the registration process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PasswordHash` and `PasswordSalt` are the byte arrays that are based on a **Hash-Based
    Message Authentication Code, Secure Hash Algorithm** (**HMAC****SHA**) 512\. A
    value for `PasswordHash` attribute is 64 bytes and `PasswordSalt` is 128 bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecretKey` is a Base64-encoded string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mobilie` is a valid mobile number that depends on the validity check by the
    system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmailToken` and `OTP` are the **One-Time Passwords** (**OTPs**) that are randomly
    generated to validate `emailId` and `Mobile number`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmailTokenDateTime` and `OtpDateTime` are the properties of the `datetime`
    data type; they represent the date and time in which `EmailToken` and `OTP` are
    issued for the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsMobileVerified` and `IsEmailverified` are Boolean values (`true`/`false`)
    that tell the system whether the mobile number and/or email ID are verified or
    not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsActive` is a Boolean value (`true`/`false`) that tells the system whether
    a `User` model is active or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Image` is a Base64-encoded string of an image. It represents the profile picture
    of a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to add our new class/entity to our `Context` class. Let''s add what
    we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e66ab985-bf29-4c24-a451-510908e88c54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By adding the previous line in our `Context` class, we can access our `User`
    table directly using **Entity Framework** (**EF**) functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`LoginViewModel` is used to authenticate the user. The values of this `viewmodel`
    come from the Login page (we will discuss and create this page in the upcoming
    section). It contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UserName`: This is a unique name that is used to identify the user. This is
    a human-readable value that can be easily identified. It is not like the GUID
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Password`: This is a secret and sensitive value for any user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RememberMe`: This tells us whether the user wants to allow the current system
    to persist cookies which store values in cookies at the client browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To perform the CRUD operations, let''s add the following code to the `UserManager`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the code snippet from the rest of the methods of the `UserManager`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is the `UserManager` class, which gives us the ability to
    interact with our `User` table using EF:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows the View of the Login screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code snippet is from our `Login.cshtml` page/view. This page provides
    a form to enter the `Login` details. These details come to our `Account` controller
    and are then validated to authenticate the user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the `Login` action method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet is a `Get /Account/Login` request that displays
    the empty login page, which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49b3bb00-4948-47d3-a661-8124331d513d.png)'
  prefs: []
  type: TYPE_IMG
- en: The previous screenshot appears as soon as the user clicks on the Login menu
    option. This is a simple form used to enter the Login details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows the `Login` action method that handles the `Login`
    functionality of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet is a `Post /Account/Login` request from a login
    page that posts the entire `LoginViewModel` class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the screenshot of our Login view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6723286-de50-440c-8d2b-5a2dafc67aa9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous screenshot, we are trying to log in using our default user
    credentials (Username: `aroraG` and Password: `test123`). The information related
    to this login is being persisted in cookies, but only if the Remember Me checkbox
    is checked by the user. The system remembers the logged-in session on the current
    computer until the user hits the Logout button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as the user hits the Login button, the system authenticates their login
    details and redirects them to the home page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd11bc73-c8d1-4c6b-b7bc-7e33fd058cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You might observe text in the menu, such as `Welcome Gaurav`. This welcome
    text is not coming automatically, but we did instruct our system to show this
    text by adding a few lines of code, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code snippet is taken from the `_Layout.cshtml` view/page. In
    the previous code snippet, we are checking whether `IsAuthenticated` returns true.
    If so, then the welcome message is displayed. This welcome message comes along
    with the Logout option, but it displays the `Login` menu when `IsAuthenticated`
    returns the `false` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`IsAuthenticated` is a `ReadOnly` property of the `AuthManager` class that
    checked whether the request is authenticated or not. Before we move ahead, let''s
    revisit our `Login` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous `Login` method simply validates the user. Take a look at this
    statementâ€”`var result = _authManager.Login(model);`. This calls a `Login` method
    from `AuthManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dde59675-3690-45ac-8590-ca3a459137f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the `Login` method returns `true`, then it redirects the current Login page
    to the Home page. Otherwise, it remains on the same Login page by complaining
    about an Invalid login attempt. The following is the code of the `Login` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Login` method is a typical method of the `AuthManager` class, which calls
    the `FindBy(model)` method of `UserManager` and checks whether it exists or not.
    If it exists, then it further calls the `SignInCookie(model,user)` method of the
    `AuthManager` class, otherwise, it simply returns as `false`, meaning that the
    Login is unsuccessful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet makes sure that if the user is authenticated, then
    their details should be persisted in `HttpContext` so that the system can authenticate
    each and every incoming request from users. You might observe the `_httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
    principal, props).Wait();` statement that actually signed in and enabled the cookie
    authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous statements help us to enable cookie authentication and claims for
    incoming requests for our application. Finally, the `app.UseAuthentication();`
    statement adds the authentication mechanism ability into our application. These
    statements should be added to the `Startup.cs` class.
  prefs: []
  type: TYPE_NORMAL
- en: Why does it make a difference?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have added plenty of code into our web application, but does this really
    help us to restrict our pages/views from unattended requests? The **Products**
    page/view is still open; therefore, I can perform any available actions from the
    Products page/view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/503ea6e8-df37-4c0b-b2bd-d0ae1a348a07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As a user, I can see the Products option whether I am logged in or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e25140c-009d-4976-8bee-da343dc28458.png)'
  prefs: []
  type: TYPE_IMG
- en: The previous screenshot shows the same Products menu option after login as before
    login.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can restrict the access of the Products page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the home screen of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf5954af-e1af-4505-958e-413ae4cfd1bd.png)'
  prefs: []
  type: TYPE_IMG
- en: The previous code helps systems to only display the Products menu option once
    the user is logged in/authenticated. The Products menu options will not get displayed
    on the screen. Like this, we can restrict the unattended access. However, this
    approach has its own cons. The biggest one is that if someone knows the URL of
    the Products pageâ€”which will lead you to `/Product/Index`â€”then they can perform
    restricted operations. These operations are restricted as they are not meant to
    be used by a user who is not logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed how to avoid unattended access to a particular
    or restricted screen/page. We have seen that Login actually authenticates the
    user and allows them to make a request to the system. On the other hand, authentication
    does not mean that if a user is authenticated, then they are authorized to access
    a particular section, page, or screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following depicts a typical authorization and authentication process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ce628c8-963b-4240-a461-128fba886d7e.png)'
  prefs: []
  type: TYPE_IMG
- en: In this process, the first request/user gets authenticated (typically, it is
    a login form), then a request is authorized to perform a particular/requested
    operation(s). There may be many scenarios where a request is authenticated but
    not authorized to access a specific resource or perform a specific operation.
  prefs: []
  type: TYPE_NORMAL
- en: In our application (created in the previous section), we have a `Products` page
    with CRUD operations. The `Products` page is not a public page, which means that
    this page is not available for all; it is available with restricted access.
  prefs: []
  type: TYPE_NORMAL
- en: 'We come back to the following main problem that we left within the previous
    section: "What if a user is authenticated but they are not authorized to access
    a particular page/resource? It does not matter whether we hide the page from the
    unauthorized user because they can easily access or view it by entering its URL.*"*
    To overcome this challenge/issue, we can implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the authorization on each access of the restricted resource, which means
    that whenever a user tries to access the resource (by entering a direct URL in
    the browser), the system checks for authorization, so that incoming requests to
    access the resource can be authorized. If the incoming request of the user is
    not authorized, then they would not be able to perform the specified operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking authorization on each operation of the restricted resource means that
    if the user is authenticated, they would be able to access the restricted page/view,
    but the operations of this page/view can only be accessible if the user is authorized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Microsoft.AspNetCore.Authorization` namespace provides built-in functions
    to authorize specific resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'To restrict access and avoid unattended access to a particular resource, we
    can use the `Authorize` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d449cc2-19f6-4522-8811-b1b9a59ef4af.png)'
  prefs: []
  type: TYPE_IMG
- en: The previous screenshot shows that we are putting the `Authorize` attribute
    into our `ProductController`. Now, hit *F5* and run the application.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is not logged in to the system, they would not able to see the Product
    page as we have already added the condition. If the user is validated, then display
    Products in the menu bar.
  prefs: []
  type: TYPE_NORMAL
- en: Do not log in to the system and enter the product URL, `http://localhost:56229/Product`,
    directly to your browser. This will redirect the user to the Login screen. Please
    see the following screenshot and check the URL; you might notice that the URL
    contains a ReturnUrl part that will instruct the system on where to be redirected
    upon a successful login attempt.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot; note that the URL contains the ReturnUrl part.
    The system redirects the application to this URL once the user is logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7be2aef-4be7-4eb3-acbc-ff8900abfcf1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows Product Listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecde544b-f171-4a84-ab26-ccb3fda4cb3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our Product Listing screen provides operations such as Create New, Edit, Delete,
    and Details. The current application allows the user to perform these operations.
    Therefore, does it make sense that any visiting and authenticated user can create,
    update, and delete a product? If we allow this for every user, the consequences
    can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We can have many products that have been already added to the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unavoidable removal/deletion of products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unavoidable updating of products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we have something such as user types that differentiate all users of the
    `Admin` type from normal users, allowing only users with admin rightsâ€”not the
    normal usersâ€”to perform these operations? A better idea is to add roles for users;
    therefore, we would need to make a user of a specific type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a new entity into our project and name it `Role`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code snippet that defines the `Role` class for a user has properties,
    as explained in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Id`: This uses `GUID` as a primary key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Name`: A `Role` name of a `string` type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ShortName`: A short or abbreviated name of the role that is of a `string`
    type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to add our new class/entity to our `Context` class. Let''s add this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41ec1447-9387-4dad-900d-b7264329c630.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous code provides the ability to work various DB operations using
    EF:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The three methods of the `UserManager` class that appeared in the previous
    code snippet provide us with the ability to get `Roles` from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added `Roles` to our `Claims` by modifying the `SigningCookie` method
    of the `AuthManager` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2f40509-4128-4d60-864b-84b5bc9fc064.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous screenshot shows that a user named `Gaurav` has two roles: `Admin`
    and `Manager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7dff3042-7c28-4700-a762-c9d3dbab96ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We restrict `ProductController` for the user(s) with the `Admin` and `Manager`
    roles only. Now, try to log in with user `aroraG` and you will see `Product Listing`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3bb9f93-2966-43f8-a046-9632d5670f63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s try to log in with a second user, `aroraG1`, which has the role
    of `Editor`. This will throw an `AccessDenied` error. For this, see the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edba9b44-843e-42d3-8a6b-ea4845d3e9e3.png)'
  prefs: []
  type: TYPE_IMG
- en: In this way, we can safeguard our restricted resources. There are a lot of ways
    to achieve this. .NET Core MVC provides built-in functionality to achieve this,
    and you can also do so in a customizable way. If you do not want to use these
    available built-in features, you can easily draft your own functionality of required
    features by adding to the existing code. If you want to do this, you need to start
    from scratch. Furthermore, if something is available, then there is no sense in
    creating something similar again. If you do not find the functionality for available
    components, then you should customize the existing functionality/features rather
    than writing the entire code from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: '**A developer should implement an authentication mechanism that can''t be tampered
    with.** In this section, we have discussed a lot to do with authentication and
    authorization, as well as writing code and creating our web application. In regard
    to authentication, we should use a good mechanism for the authentication so that
    no one can tamper with or bypass it. There are two more designs you can start
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating individual requests/endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After the implementation of the previous steps, every request that comes via
    any mode should be authenticated and authorized before the system responds to
    the user or the client that made the call. This process mainly includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Confidentiality**: The secured system makes sure that any sensitive data
    is not exposed to unauthenticated and unauthorized access requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability**: The security measures in the system make sure that the system
    is available for users who are genuine, as confirmed through the system''s authentication
    and authorization mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrity**: In a secured system, data tampering is not possible, so the
    data is secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a web test project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is the one that checks code health. This means that if the code
    is buggy (unhealthy), that would be the basis of many unknown and unwanted issues
    in the application. To overcome this approach, we could follow the TDD approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can practice TDD with Katas. You can refer to [https://www.codeproject.com/Articles/886492/Learning-Test-Driven-Development-with-TDD-Katas](https://www.codeproject.com/Articles/886492/Learning-Test-Driven-Development-with-TDD-Katas)
    to find out more about TDD katas. If you want to practice this approach, use this
    repository: [https://github.com/garora/TDD-Katas](https://github.com/garora/TDD-Katas).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already discussed a lot about TDD in previous chapters, so we are not
    going to discuss this in detail here. Instead, let''s create a test project as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our web application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From Solution Explorer in Visual Studio, right-click on Solution and click
    on Add | New Project..., as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fce068c-4813-4bfd-b558-c91398c93cfb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Add New Project template, select .NET Core and xUnit Test Project
    (.NET Core) and provide a meaningful name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/68d046c1-29af-4cb9-a4c1-c6a62a091e86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will get a default unit `test` class with an empty test code, as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can change the name of this class or discard this class if you want to
    write your own `test` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is from our newly added `ProductDate` class. Please add this
    to a new folder called `Fake`. This class just creates dummy data so that we can
    test our web application for the product:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Add a new file called `ProductTests` in the `Services` folder. Please note that
    we are using `Stubs` and `Mocks` in this code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our previous code will complain about the error using red squiggly lines, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de3be8e2-682c-40e9-a3ac-2c5f2bc64507.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous code has errors as we did not add certain packages that were required
    for us to perform tests. To overcome these errors, we should install `moq` support
    to our `test` project. Pass the following command in your Package Manager Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will install the `moq` framework in the test project.
    Please note that while firing the preceding command, you should select the test
    project that we have created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f6d860c-70f3-447d-b6a2-e3bdd6e3ec46.png)'
  prefs: []
  type: TYPE_IMG
- en: Once `moq` is installed, you can go ahead and start testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important points to note while you''re working with the `xUnit` test projects
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fact** is an attribute and is used for a normal test method that is without
    parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theory** is an attribute and is used for a parameterized test method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All set. Now, click on Test explorer and run your tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f0688d2c-d36b-46e4-9c3f-a397ad044b51.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, our tests have passed! This means that our controller methods are good,
    and we do not have any issues or bugs in our code that can break the functionality
    of the application/system.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main goal of this chapter was to make it possible for our web application
    to safeguard against unattended requests. This chapter covered a step-by-step
    creation of a web application using Visual Studio and discussed authentication
    and authorization. We also discussed TDD and created a new xUnit web test project
    where we used `Stubs` and `Mocks`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the best practices and patterns while using
    concurrent programming in .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions will allow you to consolidate the information contained
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What are authentication and authorization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it safe to use authentication at the first level of request and then allow
    incoming requests for restricted areas?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you prove that authorization always comes after authentication?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is TDD and why do developers care about it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define TDD katas. How do they help us to improve our TDD approach?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations, you''ve completed this chapter! To learn more about the topics
    covered in this chapter, refer to the following books:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Building RESTful Web services with .NET Core*, by *Gaurav Aroraa, Tadit Dash*,
    published by *Packt Publishing*: [https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*C# and .NET Core Test Driven Development*, by *Ayobami Adewole*, published
    by *Packt Publishing*: [https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
