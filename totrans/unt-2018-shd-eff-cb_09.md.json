["```cs\n#region Variables\npublic Shader curShader;\npublic float greyscaleAmount = 1.0f;\nprivate Material screenMat;\n#endregion\n```", "```cs\nusing UnityEngine;\n\n[ExecuteInEditMode]\npublic class TestRenderImage : MonoBehaviour {\n```", "```cs\n#region Properties\nMaterial ScreenMat\n{\n    get\n    {\n        if (screenMat == null)\n        {\n            screenMat = new Material(curShader);\n            screenMat.hideFlags = HideFlags.HideAndDontSave;\n        }\n        return screenMat;\n    }\n}\n#endregion\n```", "```cs\nvoid Start()\n{\n    if (!SystemInfo.supportsImageEffects)\n    {\n        enabled = false;\n        return;\n    }\n\n    if (!curShader && !curShader.isSupported)\n    {\n        enabled = false;\n    }\n}\n```", "```cs\nvoid OnRenderImage(RenderTexture sourceTexture, RenderTexture destTexture)\n{\n    if (curShader != null)\n    {\n        ScreenMat.SetFloat(\"_Luminosity\", greyscaleAmount);\n\n        Graphics.Blit(sourceTexture, destTexture, ScreenMat);\n    }\n    else\n    {\n        Graphics.Blit(sourceTexture, destTexture);\n    }\n}\n```", "```cs\nvoid Update ()\n{\n    greyscaleAmount = Mathf.Clamp(greyscaleAmount, 0.0f, 1.0f);\n}\n```", "```cs\nvoid OnDisable()\n{\n  if(screenMat)\n  {\n    DestroyImmediate(screenMat);\n  }\n}\n```", "```cs\nProperties \n{\n _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n _Luminosity(\"Luminosity\", Range(0.0, 1)) = 1.0\n}\n```", "```cs\nSubShader \n{\n  Pass\n  {\n    CGPROGRAM\n    #pragma vertex vert_img\n    #pragma fragment frag\n    #pragma fragmentoption ARB_precision_hint_fastest\n    #include \"UnityCG.cginc\"\n```", "```cs\nuniform sampler2D _MainTex;\nfixed _Luminosity;\n```", "```cs\nfixed4 frag(v2f_img i) : COLOR\n{\n  //Get the colors from the RenderTexture and the uv's\n  //from the v2f_img struct\n  fixed4 renderTex = tex2D(_MainTex, i.uv);\n\n  //Apply the Luminosity values to our render texture\n  float luminosity = 0.299 * renderTex.r + 0.587 * renderTex.g + 0.114 * renderTex.b;\n  fixed4 finalColor = lerp(renderTex, luminosity, _Luminosity);\n\n  renderTex.rgb = finalColor;\n\n  return renderTex;\n}\n```", "```cs\nFallBack off\n```", "```cs\nShader \"CookbookShaders/Chapter09/Grayscale\" \n{\n  Properties \n  {\n    _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n    _Luminosity(\"Luminosity\", Range(0.0, 1)) = 1.0\n  }\n\n  SubShader \n  {\n    Pass\n    {\n      CGPROGRAM\n      #pragma vertex vert_img\n      #pragma fragment frag\n      #pragma fragmentoption ARB_precision_hint_fastest\n      #include \"UnityCG.cginc\"\n\n      uniform sampler2D _MainTex;\n      fixed _Luminosity;\n\n      fixed4 frag(v2f_img i) : COLOR\n      {\n        //Get the colors from the RenderTexture and the uv's\n        //from the v2f_img struct\n        fixed4 renderTex = tex2D(_MainTex, i.uv);\n\n        //Apply the Luminosity values to our render texture\n        float luminosity = 0.299 * renderTex.r + 0.587 * renderTex.g + 0.114 * renderTex.b;\n        fixed4 finalColor = lerp(renderTex, luminosity, _Luminosity);\n\n        renderTex.rgb = finalColor;\n\n        return renderTex;\n      }\n\n    ENDCG\n    }\n  }\n  FallBack off\n}\n```", "```cs\nProperties \n{\n  _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n  _DepthPower(\"Depth Power\", Range(0, 1)) = 1\n}\n```", "```cs\nPass\n{\n  CGPROGRAM\n  #pragma vertex vert_img\n  #pragma fragment frag\n  #pragma fragmentoption ARB_precision_hint_fastest\n  #include \"UnityCG.cginc\"\n\n  uniform sampler2D _MainTex;\n fixed _DepthPower;\n sampler2D _CameraDepthTexture;\n```", "```cs\nfixed4 frag(v2f_img i) : COLOR\n{\n  //Get the colors from the RenderTexture and the uv's\n  //from the v2f_img struct\n  float depth = UNITY_SAMPLE_DEPTH(tex2D(_CameraDepthTexture, i.uv.xy));\n  depth = pow(Linear01Depth(depth), _DepthPower);\n\n  return depth;\n}\n```", "```cs\nusing UnityEngine;\n\n[ExecuteInEditMode]\npublic class RenderDepth : MonoBehaviour {\n```", "```cs\n#region Variables\npublic Shader curShader;\npublic float depthPower = 0.2f;\nprivate Material screenMat;\n#endregion\n```", "```cs\nvoid OnRenderImage(RenderTexture sourceTexture, RenderTexture destTexture)\n{\n    if (curShader != null)\n    {\n        ScreenMat.SetFloat(\"_DepthPower\", depthPower);\n\n        Graphics.Blit(sourceTexture, destTexture, ScreenMat);\n    }\n    else\n    {\n        Graphics.Blit(sourceTexture, destTexture);\n    }\n}\n```", "```cs\nvoid Update ()\n{\n    Camera.main.depthTextureMode = DepthTextureMode.Depth;\n    depthPower = Mathf.Clamp(depthPower, 0, 1);\n}\n```", "```cs\nProperties \n{\n  _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n  _Brightness(\"Brightness\", Range(0.0, 1)) = 1.0\n  _Saturation(\"Saturation\", Range(0.0, 1)) = 1.0\n  _Contrast(\"Contrast\", Range(0.0, 1)) = 1.0\n}\n```", "```cs\nPass\n{\n  CGPROGRAM\n  #pragma vertex vert_img\n  #pragma fragment frag\n  #pragma fragmentoption ARB_precision_hint_fastest\n  #include \"UnityCG.cginc\"\n\n uniform sampler2D _MainTex;\n fixed _Brightness;\n fixed _Saturation;\n fixed _Contrast;\n```", "```cs\nfloat3 ContrastSaturationBrightness(float3 color, float brt, float sat, float con)\n{\n  // Increase or decrease these values to \n  //adjust r, g and b color channels separately\n  float AvgLumR = 0.5;\n  float AvgLumG = 0.5;\n  float AvgLumB = 0.5;\n\n//Luminance coefficients for getting lumoinance from the image\n  float3 LuminanceCoeff = float3(0.2125, 0.7154, 0.0721);\n\n  //Operation for brightness\n  float3 AvgLumin = float3(AvgLumR, AvgLumG, AvgLumB);\n  float3 brtColor = color * brt;\n  float intensityf = dot(brtColor, LuminanceCoeff);\n  float3 intensity = float3(intensityf, intensityf, intensityf);\n\n  //Operation for Saturation\n  float3 satColor = lerp(intensity, brtColor, sat);\n\n  //Operation for Contrast\n  float3 conColor = lerp(AvgLumin, satColor, con);\n  return conColor;\n}\n```", "```cs\nfixed4 frag(v2f_img i) : COLOR\n{\n  //Get the colors from the RenderTexture and the uv's\n  //from the v2f_img struct\n  fixed4 renderTex = tex2D(_MainTex, i.uv);\n\n  //Apply the Brughtness, saturation, contrast operations\n  renderTex.rgb = ContrastSaturationBrightness(renderTex.rgb, \n                        _Brightness, \n                        _Saturation, \n                        _Contrast);\n\n  return renderTex;\n}\n```", "```cs\n[ExecuteInEditMode]\npublic class RenderBSC : MonoBehaviour {\n```", "```cs\n#region Variables\npublic Shader curShader;\npublic float brightness = 1.0f;\npublic float saturation = 1.0f;\npublic float contrast = 1.0f;\nprivate Material screenMat;\n#endregion\n```", "```cs\nvoid OnRenderImage(RenderTexture sourceTexture, RenderTexture destTexture)\n{\n    if (curShader != null)\n    {\n        ScreenMat.SetFloat(\"_Brightness\", brightness);\n        ScreenMat.SetFloat(\"_Saturation\", saturation);\n        ScreenMat.SetFloat(\"_Contrast\", contrast);\n\n        Graphics.Blit(sourceTexture, destTexture, ScreenMat);\n    }\n    else\n    {\n        Graphics.Blit(sourceTexture, destTexture);\n    }\n}\n```", "```cs\nvoid Update()\n{\n    brightness = Mathf.Clamp(brightness, 0.0f, 2.0f);\n    saturation = Mathf.Clamp(saturation, 0.0f, 2.0f);\n    contrast = Mathf.Clamp(contrast, 0.0f, 3.0f);\n}\n```", "```cs\nProperties \n{\n  _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n  _BlendTex (\"Blend Texture\", 2D) = \"white\"{}\n  _Opacity (\"Blend Opacity\", Range(0,1)) = 1\n}\n```", "```cs\nPass\n{\n  CGPROGRAM\n  #pragma vertex vert_img\n  #pragma fragment frag\n  #pragma fragmentoption ARB_precision_hint_fastest\n  #include \"UnityCG.cginc\"\n\n uniform sampler2D _MainTex;\n uniform sampler2D _BlendTex;\n fixed _Opacity;\n```", "```cs\nfixed4 frag(v2f_img i) : COLOR\n{\n  //Get the colors from the RenderTexture and the uv's\n  //from the v2f_img struct\n  fixed4 renderTex = tex2D(_MainTex, i.uv);\n  fixed4 blendTex = tex2D(_BlendTex, i.uv);\n\n  //Perform a multiply Blend mode\n  fixed4 blendedMultiply = renderTex * blendTex;\n\n  //Adjust amount of Blend Mode with a lerp\n  renderTex = lerp(renderTex, blendedMultiply, _Opacity);\n\n  return renderTex;\n}\n```", "```cs\n[ExecuteInEditMode]\npublic class RenderBlendMode : MonoBehaviour {\n```", "```cs\n#region Variables\npublic Shader curShader;\npublic Texture2D blendTexture;\npublic float blendOpacity = 1.0f;\nprivate Material screenMat;\n#endregion\n```", "```cs\nvoid OnRenderImage(RenderTexture sourceTexture, RenderTexture destTexture)\n{\n    if (curShader != null)\n    {\n        ScreenMat.SetTexture(\"_BlendTex\", blendTexture);\n        ScreenMat.SetFloat(\"_Opacity\", blendOpacity);\n\n        Graphics.Blit(sourceTexture, destTexture, ScreenMat);\n    }\n    else\n    {\n        Graphics.Blit(sourceTexture, destTexture);\n    }\n}\n```", "```cs\nvoid Update()\n{\n    blendOpacity = Mathf.Clamp(blendOpacity, 0.0f, 1.0f);\n}\n```", "```cs\nfixed4 frag(v2f_img i) : COLOR\n{\n  //Get the colors from the RenderTexture and the uv's\n  //from the v2f_img struct\n  fixed4 renderTex = tex2D(_MainTex, i.uv);\n  fixed4 blendTex = tex2D(_BlendTex, i.uv);\n\n  //Perform a multiply Blend mode\n //fixed4 blendedMultiply = renderTex * blendTex;\n\n //Perform an additive Blend mode\n fixed4 blendedAdd = renderTex + blendTex;\n\n  //Adjust amount of Blend Mode with a lerp\n  renderTex = lerp(renderTex, blendedAdd, _Opacity);\n\n  return renderTex;\n}\n```", "```cs\n    fixed4 frag(v2f_img i) : COLOR\n    {\n      //Get the colors from the RenderTexture and the uv's\n      //from the v2f_img struct\n      fixed4 renderTex = tex2D(_MainTex, i.uv);\n      fixed4 blendTex = tex2D(_BlendTex, i.uv);\n\n      //Perform a multiply Blend mode\n      //fixed4 blendedMultiply = renderTex * blendTex;\n\n      //Perform an additive Blend mode\n //fixed4 blendedAdd = renderTex + blendTex;\n\n //Perform screen blending mode\n fixed4 blendedScreen = (1.0 - ((1.0 - renderTex) * (1.0 - blendTex)));\n\n      //Adjust amount of Blend Mode with a lerp\n      renderTex = lerp(renderTex, blendedScreen, _Opacity);\n\n      return renderTex;\n    }\n\n```", "```cs\nProperties \n{\n  _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n  _BlendTex (\"Blend Texture\", 2D) = \"white\"{}\n  _Opacity (\"Blend Opacity\", Range(0,1)) = 1\n}\n```", "```cs\nPass\n{\n  CGPROGRAM\n  #pragma vertex vert_img\n  #pragma fragment frag\n  #pragma fragmentoption ARB_precision_hint_fastest\n  #include \"UnityCG.cginc\"\n\n  uniform sampler2D _MainTex;\n  uniform sampler2D _BlendTex;\n  fixed _Opacity;\n```", "```cs\nfixed OverlayBlendMode(fixed basePixel, fixed blendPixel)\n{\n  if(basePixel < 0.5)\n  {\n    return (2.0 * basePixel * blendPixel);\n  }\n  else\n  {\n    return (1.0 - 2.0 * (1.0 - basePixel) * (1.0 - blendPixel));\n  }\n}\n```", "```cs\nfixed4 frag(v2f_img i) : COLOR\n{\n  //Get the colors from the RenderTexture and the uv's\n  //from the v2f_img struct\n  fixed4 renderTex = tex2D(_MainTex, i.uv);\n  fixed4 blendTex = tex2D(_BlendTex, i.uv);\n\n  fixed4 blendedImage = renderTex;\n\n  blendedImage.r = OverlayBlendMode(renderTex.r, blendTex.r);\n  blendedImage.g = OverlayBlendMode(renderTex.g, blendTex.g);\n  blendedImage.b = OverlayBlendMode(renderTex.b, blendTex.b);\n\n  //Adjust amount of Blend Mode with a lerp\n  renderTex = lerp(renderTex, blendedImage, _Opacity);\n\n  return renderTex;\n}\n```"]