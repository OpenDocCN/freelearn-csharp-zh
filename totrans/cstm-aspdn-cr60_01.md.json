["```cs\ndotnet new mvc -n LoggingSample -o LoggingSample\n```", "```cs\ncd LoggingSample\ncode .\n```", "```cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n    public static IHostBuilder CreateHostBuilder(\n      string[]args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder.UseStartup<Startup>();\n            });\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddControllersWithViews();\nvar app = builder.Build();\n// The rest of the file isn't relevant for this chapter\n```", "```cs\nHost.CreateDefaultBuilder(args)\n    .ConfigureWebHostDefaults(webBuilder =>\n    {\n        webBuilder\n            .ConfigureLogging((hostingContext, logging) =>\n            {\n                logging.AddConfiguration(\n                  hostingContext.Configuration.GetSection(\n                    \"Logging\"));\n                logging.AddConsole();\n                logging.AddDebug();\n            })\n            .UseStartup<Startup>();\n```", "```cs\nbuilder.Logging.AddConfiguration(builder.Configuration.GetSection(\"Logging\"));\nbuilder.Logging.AddConsole();\nbuilder.Logging.AddDebug();\n```", "```cs\n    namespace LoggingSample;\n    ```", "```cs\n    public class ColoredConsoleLoggerConfiguration\n    {\n        public LogLevel LogLevel { get; set; } = \n          LogLevel.Warning;\n        public int EventId { get; set; } = 0;\n        public ConsoleColor Color { get; set; } = \n          ConsoleColor.Yellow;\n    }\n    ```", "```cs\n    public class ColoredConsoleLoggerProvider : ILoggerProvider\n    {\n        private readonly ColoredConsoleLoggerConfiguration\n          _config;\n        private readonly ConcurrentDictionary<string,\n          ColoredConsoleLogger> _loggers =\n            new ConcurrentDictionary<string,\n               ColoredConsoleLogger>();\n        public ColoredConsoleLoggerProvider\n          (ColoredConsoleLoggerConfiguration config)\n        {\n            _config = config;\n        }\n        public ILogger CreateLogger(string categoryName)\n        {\n            return _loggers.GetOrAdd(categoryName, name =>\n                new ColoredConsoleLogger(name, _config));\n        }\n        public void Dispose()\n        {\n            _loggers.Clear();\n        }\n    }\n    ```", "```cs\n    public class ColoredConsoleLogger : ILogger\n    {\n        private static object _lock = new Object();\n        private readonly string _name;\n        private readonly ColoredConsoleLoggerConfiguration \n          _config;\n        public ColoredConsoleLogger(\n            string name,\n            ColoredConsoleLoggerConfiguration config)\n        {\n            _name = name;\n            _config = config;\n        }\n        public IDisposable BeginScope<TState>(TState \n          state)\n        {\n            return null;\n        }\n        public bool IsEnabled(LogLevel logLevel)\n        {\n            return logLevel == _config.LogLevel;\n        }\n        public void Log<TState>(\n            LogLevel logLevel,\n            EventId eventId,\n            TState state,\n            Exception exception,\n            Func<TState, Exception, string> formatter)\n        {\n            if (!IsEnabled(logLevel))\n            {\n                return;\n            }\n            lock (_lock)\n            {\n                if (_config.EventId == 0 ||\n                    _config.EventId == eventId.Id)\n                {\n                    var color = Console.ForegroundColor;\n                    Console.ForegroundColor = \n                      _config.Color;\n                    Console.Write($\"{logLevel} - \");\n                    Console.Write($\"{eventId.Id} - {_name}\n                                  - \");\n                    Console.Write($\"{formatter(state,\n                                     exception)}\\n\");\n                    Console.ForegroundColor = color;\n                }\n            }\n        }\n    }\n    ```", "```cs\n    builder.Logging.ClearProviders();\n    var config = new ColoredConsoleLoggerConfiguration\n    {\n        LogLevel = LogLevel.Information,\n        Color = ConsoleColor.Red\n    };\n    builder.Logging.AddProvider(new \n        ColoredConsoleLoggerProvider(config));\n    ```", "```cs\n    dotnet add package NLog.Web.AspNetCore\n    ```", "```cs\n    Host.CreateDefaultBuilder(args)\n        .ConfigureWebHostDefaults(webBuilder =>\n        {\n            webBuilder\n                .ConfigureLogging((hostingContext,\n                  logging) =>\n                {\n                    logging.ClearProviders();\n                    logging.SetMinimumLevel(\n                      LogLevel.Trace);\n                })\n                .UseNLog()\n                .UseStartup<Startup>();\n        });\n    ```", "```cs\n    using NLog.Web;\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Logging.ClearProviders();\n    builder.Logging.SetMinimumLevel(LogLevel.Trace);\n    builder.WebHost.UseNLog();\n    ```"]