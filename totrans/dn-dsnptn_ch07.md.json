["```cs\n    private static RetrieveRows( \n      string connectionString,string queryString)  \n      { \n        using (SqlConnection connection =  \n        new SqlConnection(connectionString)) \n        { \n          //--- Adapter class here creates a DataSet  \n          //--- without bothering the developer about \n          //--- opening the connections, fetching data \n          //--- from the Data Reader and Filling the Data \n          //--- to a DataSet  \n          SqlDataAdapter adapter = new SqlDataAdapter(); \n          adapter.SelectCommand = new SqlCommand( \n          queryString, connection); \n          adapter.Fill(dataset); \n          return dataset; \n        } \n      } \n\n```", "```cs\n    class Employee  \n    { \n      public String name {get;set;} \n      public int age {get;set;} \n      public double salary { get; set; }  \n    } \n\n```", "```cs\n\nclass SortByAge : IComparer<Employee> \n    { \n      public int Compare(Employee a, Employee b) \n      { \n        return a.age > b.age ? 1 : -1; \n      } \n    } \n\n```", "```cs\n    List<Employee> ls = new List<Employee>(); \n    ls.Add(\n       new Employee { name = \"A\", age = 40, salary =  10000 });\n    ls.Add(\n       new Employee { name = \"C\", age = 20, salary = 6000 });\n    ls.Add(\n       new Employee { name = \"B\", age = 30, salary = 4000  }); \n    ls.Sort(new SortByAge()); \n    foreach(Employee e in ls) \n    { \n      Console.WriteLine(e.name + \" \" +  \n      e.age + \" \" + e.salary); \n    } \n\n```", "```cs\n    class SortByName : IComparer<Employee> \n    { \n      public int Compare(Employee a, Employee b) \n      { \n        return a.name.CompareTo(b.name); \n      } \n    } \n\n```", "```cs\n    ls.Sort(new SortByName()); \n    foreach(Employee e in ls) \n    { \n      StringBuilder strbuilder = new StringBuilder(); \n      strbuilder.Append(e.name); \n      strbuilder.Append(\" \"); \n      strbuilder.Append(e.age); \n      strbuilder.Append(\" \"); \n      strbuilder.Append(e.salary); \n      Console.WriteLine(strbuilder.ToString()); \n    } \n\n```", "```cs\n    SqlConnectionStringBuilder builder = new   \n    SqlConnectionStringBuilder(); \n    builder[\"Data Source\"] = \"(local)\"; \n    builder[\"integrated Security\"] = true; \n    builder[\"Initial Catalog\"] = \"AdventureWorks;NewValue=Bad\"; \n    Console.WriteLine(builder.ConnectionString); \n\n```", "```cs\n    var builder = new UriBuilder(url); \n    builder.Port = 3333 \n    builder.Scheme = \"https\"; \n    var result = builder.Uri; \n\n```", "```cs\n    using (FileStream fs = new FileStream(path, FileMode.Open))  \n    { \n      using (StreamReader sr = new StreamReader(fs))  \n      { \n        while (sr.Peek() >= 0)  \n        { \n          Console.WriteLine(sr.ReadLine()); \n        } \n      } \n    } \n\n```", "```cs\n    public class SimpleHttpModule : IHttpModule \n    { \n      public SimpleHttpModule(){} \n      public String ModuleName \n      { \n        get { return \"SimpleHttpModule\"; } \n      } \n      public void Init(HttpApplication application) \n      { \n        application.BeginRequest +=  \n        (new EventHandler(this.Application_BeginRequest)); \n        application.EndRequest +=  \n        (new EventHandler(this.Application_EndRequest)); \n      } \n      private void Application_BeginRequest(Object source,  \n      EventArgs e) \n      { \n        HttpApplication application = (HttpApplication)source; \n        HttpContext context = application.Context; \n        context.Response.Write(SomeHtmlString); \n      } \n      private void Application_EndRequest(Object source, EventArgs e) \n      { \n        HttpApplication application =      (HttpApplication)source; \n        HttpContext context = application.Context; \n        context.Response.Write(SomeHtmlString); \n      } \n      public void Dispose(){} \n    } \n\n```", "```cs\n    <configuration> \n      <system.web> \n        <httpModules> \n          <add name=\" SimpleHttpModule \" type=\" SimpleHttpModule \"/> \n        </httpModules> \n      </system.web> \n    </configuration> \n\n```", "```cs\n    public class SimpleHttpHandler: IHttpHandler \n    { \n      public void ProcessRequest(System.Web.HttpContext context){ \n        context.Response.Write(\"The page request ->\" +          \n        context.Request.RawUrl.ToString()); \n      } \n      public bool IsReusable \n      { \n        get{ return true; } \n      } \n    } \n\n```", "```cs\n    <system.web> \n      <httpHandlers> \n        <add verb=\"*\" path=\"*.smp\" type=\"SimpleHttpHandler\"/> \n      </httpHandlers> \n    </system.web> \n\n```", "```cs\n    DbProviderFactory factory = \n    DbProviderFactories.GetFactory(providerName); \n    DbConnection connection = factory.CreateConnection(); \n    connection.ConnectionString = connectionString; \n    string queryString = \"SELECT CategoryName FROM Categories\"; \n    DbCommand command = factory.CreateCommand(); \n    command.CommandText = queryString; \n    command.Connection = connection; \n    DbDataAdapter adapter = factory.CreateDataAdapter(); \n    adapter.SelectCommand = command; \n    DataTable table = new DataTable(); \n    adapter.Fill(table); \n\n```", "```cs\n    class ObservableDataSource  \n    { \n      public ObservableCollection<string> data  \n      { get; set; } \n\n      public ObservableDataSource() \n      { \n        data = new ObservableCollection<string>(); \n        data.CollectionChanged += OnCollectionChanged; \n      } \n      void OnCollectionChanged(object sender,  \n      NotifyCollectionChangedEventArgs args)  \n      { \n        Console.WriteLine(\"The Data got changed ->\" +  \n        args.NewItems[0]); \n      } \n      public void TearDown() \n      { \n        data.CollectionChanged -= OnCollectionChanged; \n      } \n    } \n\n```", "```cs\n    ObservableDataSource obs = new ObservableDataSource(); \n    obs.data.Add(\"Hello\"); \n    obs.data.Add(\"World\"); \n    obs.data.Add(\"Save\"); \n\n```", "```cs\n    class Program \n    { \n      private static DataSet CreateMultTable() \n      { \n        DataSet ds = new DataSet(\"CustomDataSet\"); \n        DataTable tbl = new DataTable(\"Multiplicationtable\"); \n        DataColumn column_1 = new DataColumn(\"Multiplicand\"); \n        DataColumn column_2 = new DataColumn(\"Multiplier\"); \n        DataColumn column_3 = new DataColumn(\"REsult\"); \n        tbl.Columns.Add(column_1); \n        tbl.Columns.Add(column_2); \n        tbl.Columns.Add(column_3); \n\n        ds.Tables.Add(tbl); \n        int Multiplicand = 42; \n        DataRow r; \n        for (int i = 0; i < 10; i++) \n        { \n          r = tbl.NewRow(); \n          r[0] = Multiplicand; \n          r[1] = i; \n          r[2] = Multiplicand * i; \n          tbl.Rows.Add(r); \n        } \n        return ds; \n      } \n      // The Entrypoint for execution \n      // using Serialize method, we can traverse the tree  \n      // and persist the content to a XML file. Behind the scenes \n      // the code to traverse the DataSet structure is getting  \n      // executed. Using FAÃ‡ADE pattern, the .NET framekwork \n      // designers have managed to hide the complexity  \n\n      static void Main(string[] args) \n      { \n        XmlSerializer ser = new XmlSerializer(typeof(DataSet)); \n        DataSet ds = CreateMultTable(); \n        TextWriter writer = new StreamWriter(\"mult.xml\"); \n        ser.Serialize(writer, ds); \n        writer.Close(); \n        Console.ReadKey(); \n      } \n    } \n\n```", "```cs\n    public class CustomList<T> : IEnumerable<T> \n    { \n      //------ A Fixed Length array to  \n      //------ Example very simple \n      T[] _Items = new T[100]; \n      int next_Index = 0; \n\n      public CustomList(){} \n\n      public void Add(T val) \n      { \n        // We are adding value without robust \n        // error checking \n        _Items[next_Index++] = val; \n      } \n\n      public IEnumerator<T> GetEnumerator() \n      { \n        foreach (T t in _Items) \n        { \n          //---only reference objects can be populated  \n          //-- and checked for null \n          if (t == null) { break; } \n          yield return t; \n        } \n      } \n\n      System.Collections.IEnumerator  \n      System.Collections.IEnumerable.GetEnumerator() \n      { \n        return this.GetEnumerator(); \n      }   \n    } \n    // The Entry point function  \n    // creates a Custom List instance and adds entry to the list \n    // and uses foreach loop to access the iterator implemented \n    class Program \n    { \n      static void Main(string[] args) \n      { \n        CustomList<string> lst = new CustomList<string>(); \n        lst.Add(\"first\"); \n        lst.Add(\"second\"); \n        lst.Add(\"third\"); \n        lst.Add(\"fourth\"); \n\n        foreach (string s in lst) \n        { \n          Console.WriteLine(s); \n        } \n        Console.ReadKey(); \n      } \n    } \n\n```"]