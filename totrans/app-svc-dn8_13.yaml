- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Efficient Microservices Using gRPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to gRPC, which enables a developer to
    build services that can communicate highly efficiently across most platforms.
  prefs: []
  type: TYPE_NORMAL
- en: However, web browsers do not have full support for programmatic access to all
    features of HTTP/2, which is required by gRPC. This makes gRPC most useful for
    implementing intermediate tier-to-tier services and microservices because they
    must perform a lot of communication between multiple microservices to achieve
    a complete task. Improving the efficiency of that communication is vital to the
    success of the scalability and performance of microservices.
  prefs: []
  type: TYPE_NORMAL
- en: A modular monolithic, two-tier, client-to-service style service is inherently
    more efficient because the communication between modules is in-process and there
    is only one layer of network communication between the whole service and the clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microservice architecture has more tiers, and therefore more layers of network
    communication between the many microservices. It becomes more important to have
    highly efficient communication between those layers, and gRPC is designed to be
    ultra-efficient for network communication, as shown in *Figure 13.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19587_13_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.1: Comparing a two-tier modular monolithic service with multi-tier
    microservices'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: It has been fashionable in the past decade or so to assume
    that microservices are best for all scenarios, and so for a new system to immediately
    be implemented using cool microservices rather than as a traditional monolith.
    More recently, there has been a pushback against this assumption. The industry
    seems to be settling on the recommendation to start by implementing a system as
    a modular monolith. Only later, if necessary, should you break the modules apart
    into actual microservices. As well as being inherently slower due to the extra
    network communication between microservices, you also need to consider whether
    the extra coordination and complexity of deployments and orchestration of microservices
    is worth it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding gRPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a gRPC service and client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing gRPC for an EF Core model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking gRPC further
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling dates, times, and decimal numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing interceptors and handling faults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing gRPC JSON transcoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding gRPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: gRPC is a modern, open-source, high-performance **Remote Procedure Call** (**RPC**)
    framework that can run in any environment. An RPC is when one computer calls a
    procedure in another process or on another computer over a network as if it were
    calling a local procedure. It is an example of a client-server architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about RPCs at the following link: [https://en.wikipedia.org/wiki/Remote_procedure_call](https://en.wikipedia.org/wiki/Remote_procedure_call).'
  prefs: []
  type: TYPE_NORMAL
- en: How gRPC works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A gRPC service developer defines a service interface for the methods that can
    be called remotely, including defining the method parameters and return types.
    The service implements this interface and runs a gRPC server to handle client
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: On the client, a strongly typed gRPC client provides the same methods as on
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: Defining gRPC contracts with .proto files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: gRPC uses contract-first API development that supports language-agnostic implementations.
    A **contract** in this case is an agreement that a service will expose a defined
    list of methods with specified parameters and return types that implement a prescribed
    behavior. A client that wishes to call the service can be certain that the service
    will continue to conform to the contract over time. For example, although new
    methods might be added, existing ones will never change or be removed.
  prefs: []
  type: TYPE_NORMAL
- en: You write the contracts using `.proto` files that have their own language syntax
    and then use tools to convert them into various languages like C#. The `.proto`
    files are used by both the server and client to exchange messages in the correct
    format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example `.proto` file using `proto3` syntax to define a message request
    that uses a custom `enum`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**More Information**: The Protobuf style guide recommends using all lowercase
    with underscores for field names, all uppercase with underscores for `enum` values,
    and so on. The C# tooling will automatically convert to .NET styles in the auto-generated
    types it creates for you. You can read more recommendations at the following link:
    [https://protobuf.dev/programming-guides/style/](https://protobuf.dev/programming-guides/style/).'
  prefs: []
  type: TYPE_NORMAL
- en: Fields must be given a unique number between 1 and 536,870,911\. You cannot
    use the range 19,000 to 19,999 because they are reserved for the Protocol Buffers
    implementation. These numbers are used instead of the field name during serialization
    to save space in the binary format.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Field numbers cannot be changed once you start using a message
    because they are tightly bound to the very efficient wire format used by gRPC.
    Changing a field number is the equivalent of deleting and creating a new field.
    You should also never reuse a field number. You can read about the consequences
    of misusing field numbers at the following link: [https://protobuf.dev/programming-guides/proto3/#consequences](https://protobuf.dev/programming-guides/proto3/#consequences).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Field data types cannot be null, so all number types default to zero (`0`).
    Number and other field data types are shown in *Table 13.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `string` | Text values. Defaults to an empty string. |'
  prefs: []
  type: TYPE_TB
- en: '| `bool` | Boolean values. Defaults to `false`. |'
  prefs: []
  type: TYPE_TB
- en: '| `int32`, `int64` | Variable length encoded 32- and 64-bit integer values.
    Although they can be used for negative values, it is more efficient to use `sint32`
    or `sint64`. The C# equivalents to `int` and `long`. |'
  prefs: []
  type: TYPE_TB
- en: '| `sint32`, `sint64`, `uint32`, `uint64` | Variable length encoded 32- and
    64-bit signed and unsigned integer values. The C# equivalent to `int` and `long`,
    and `uint` and `ulong`. |'
  prefs: []
  type: TYPE_TB
- en: '| `fixed32`, `fixed64`, `sfixed32`, `sfixed64` | Always four bytes for 32,
    or eight bytes for 64\. The C# equivalent to `uint` and `ulong`, and `int` and
    `long`. |'
  prefs: []
  type: TYPE_TB
- en: '| `float`, `double` | Floating point real numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| `bytes` | Maximum 2^(32) bytes (4,294,967,296). Use `ByteString.CopyFrom(byte[]
    data)` to create a new instance. Use `ToByteArray()` to get the byte array. Defaults
    to an empty `ByteString` value. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 13.1: Number and other field data types in Protobuf'
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: The official guide is found at the following link: [https://protobuf.dev/programming-guides/proto3/](https://protobuf.dev/programming-guides/proto3/).'
  prefs: []
  type: TYPE_NORMAL
- en: gRPC benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: gRPC minimizes network usage by using **Protobuf** binary serialization that
    is not human-readable, unlike JSON or XML used by web services.
  prefs: []
  type: TYPE_NORMAL
- en: gRPC requires HTTP/2, which provides significant performance benefits over earlier
    versions, like binary framing and compression, and multiplexing of HTTP/2 calls
    over a single connection.
  prefs: []
  type: TYPE_NORMAL
- en: Binary framing means how the HTTP messages are transferred between the client
    and server. HTTP/1.x uses newline delimited plaintext. HTTP/2 splits communication
    into smaller messages (frames) that are encoded in binary format. Multiplexing
    means combining multiple messages from different sources into a single message
    to more efficiently use a shared resource like a network transport.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: If you are interested in more details about HTTP/2 and
    how it makes gRPC more efficient, you can read about it at the following link:
    [https://grpc.io/blog/grpc-on-http2/](https://grpc.io/blog/grpc-on-http2/).'
  prefs: []
  type: TYPE_NORMAL
- en: gRPC limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main limitation of gRPC is that it cannot be used in web browsers because
    no browser provides the level of control required to support a gRPC client. For
    example, browsers do not allow a caller to require that HTTP/2 be used.
  prefs: []
  type: TYPE_NORMAL
- en: Another limitation for developers is that due to the binary format of the messages,
    it is harder to diagnose and monitor issues. Many tools do not understand the
    format and cannot show messages in a human-readable format.
  prefs: []
  type: TYPE_NORMAL
- en: There is an initiative called **gRPC-Web** that adds an extra proxy layer, and
    the proxy forwards requests to the gRPC server. However, it only supports a subset
    of gRPC due to the listed limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Types of gRPC methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: gRPC has four types of method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first method is the most common:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unary** methods have structured request and response messages. A unary method
    completes when the response message is returned. Unary methods should be chosen
    in all scenarios that do not require a stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming methods are used when a large amount of data must be exchanged, and
    they do so by using a stream of bytes. They have the `stream` keyword prefix for
    either an input parameter, an output parameter, or both.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three streaming methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server streaming** methods receive a request message from the client and
    return a stream. Multiple messages can be returned over the stream. A server streaming
    call ends when the server side method returns, but the server side method could
    run until it receives a cancellation token from the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client streaming** methods only receive a stream from the client without
    any message. The server side method processes the stream until it is ready to
    return a response message. Once the server side method returns its message, the
    client streaming call is done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bi-directional streaming** methods only receive a stream from the client
    without any message and only return data via a second stream. The call is done
    when the server side method returns. Once a bi-directional streaming method is
    called, the client and service can send messages to each other at any time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we will only look at the details of unary methods. If you would
    like the next edition to cover streaming methods, please let me know.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft’s gRPC packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft has invested in building a set of packages for .NET to work with gRPC
    and, since May 2021, it is Microsoft’s recommended implementation of gRPC for
    .NET.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft’s gRPC for .NET includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Grpc.AspNetCore` for hosting a gRPC service in ASP.NET Core.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grpc.Net.Client` for adding gRPC client support to any .NET project by building
    on `HttpClient`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grpc.Net.ClientFactory` for adding gRPC client support to any .NET code base
    by building on `HttpClientFactory`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can learn more at the following link: [https://github.com/grpc/grpc-dotnet](https://github.com/grpc/grpc-dotnet).'
  prefs: []
  type: TYPE_NORMAL
- en: Building a gRPC service and client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see an example service and client for sending and receiving simple messages.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Hello World gRPC service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by building the gRPC service using one of the project templates
    provided as standard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to create a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core gRPC Service** / `grpc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter13`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Grpc.Service`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable native AOT publish**: Selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice**: Make sure to select **Enable native AOT publish**. With
    .NET 8 and later, gRPC projects can be **ahead-of-time** (**AOT**) compiled for
    native platforms. This gives improved performance and a reduced start time, which
    is important for microservices that are frequently redeployed and spun up and
    down during scaling.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Protos` folder, in `greet.proto`, note that it defines a service named
    `Greeter` with a method named `SayHello` that exchanges messages named `HelloRequest`
    and `HelloReply`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For working with `.proto` files in Visual Studio Code, you can install the
    extension **vscode-proto3** (`zxh404.vscode-proto3`). For Rider, you can install
    the Protocol Buffers plugin from JetBrains, as shown at the following link: [https://plugins.jetbrains.com/plugin/14004-protocol-buffers](https://plugins.jetbrains.com/plugin/14004-protocol-buffers).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Northwind.Grpc.Service.csproj`, note that this project has native AOT publish
    enabled, the `.proto` file is registered for use on the server side, and the package
    reference for implementing a gRPC service hosted in ASP.NET Core, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For JetBrains Rider, manually add `<PublishAot>true</PublishAot>` if it is missing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set invariant globalization to `false`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Services` folder, in `GreeterService.cs`, note that it inherits from
    a class named `GreeterBase` and it asynchronously implements the `Greeter` service
    contract by having a `SayHello` method that accepts a `HelloRequest` input parameter
    and returns a `HelloReply`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are using Visual Studio 2022, in **Solution Explorer**, click **Show
    All Files**. If you are using JetBrains Rider, then hover over the **Solution**
    pane and click the eyeball icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `obj\Debug\net8.0\Protos` folder, note the two class files named `Greet.cs`
    and `GreetGrpc.cs` that are automatically generated from the `greet.proto` file,
    as shown in *Figure 13.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2: The autogenerated class files from a .proto file for a gRPC service'
  prefs: []
  type: TYPE_NORMAL
- en: In `GreetGrpc.cs`, note the `Greeter.GreeterBase` class that the `GreeterService`
    class inherited from. You do not need to understand how this base class is implemented,
    but you should know it is what handles all the details of gRPC’s efficient communication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, in **Solution Explorer**, expand **Dependencies**,
    expand **Packages**, expand **Grpc.AspNetCore**, and note that it has dependencies
    on Google’s **Google.Protobuf** package, and Microsoft’s **Grpc.AspNetCore.Server.ClientFactory**
    and **Grpc.Tools** packages, as shown in *Figure 13.3*:![](img/B19587_13_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.3: The Grpc.AspNetCore package references the Grpc.Tools and Google.Protobuf
    packages'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `Grpc.Tools` package generates the C# class files from the registered `.proto`
    files, and those class files use types defined in Google’s package to implement
    the serialization to the Protobuf serialization format. The `Grpc.AspNetCore.Server.ClientFactory`
    package includes both server side and client-side support for gRPC in a .NET project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, in the section that configures services, note the call to
    add gRPC to the `Services` collection, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, in the section for configuring the HTTP pipeline, note the
    call to map the `Greeter` service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Properties` folder, open `launchSettings.json` and modify the `applicationUrl`
    setting to use port `5131` for `https` and port `5132` for `http`, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Grpc.Service` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project file item configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we continue, let’s quickly review common project file item configuration
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item configuration generated by Visual Studio 2022 commonly uses attributes
    for the item properties, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Properties not explicitly set will have their default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Item configuration generated by other tools like JetBrains Rider commonly uses
    child elements for the item properties, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: They both usually achieve the same ends. The first is more concise and recommended
    for use.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Hello World gRPC client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add an ASP.NET Core MVC website project and then add the gRPC client
    packages to enable it to call the gRPC service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter13`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Grpc.Client.Mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication type**: None.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project, treat warnings as errors, add package
    references for Microsoft’s gRPC client factory and tools, and Google’s .NET library
    for Protocol Buffers, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: The `Grpc.Net.ClientFactory` package references the `Grpc.Net.Client`
    package that implements client-side support for gRPC in a .NET project, but it
    does not reference other packages like `Grpc.Tools` or `Google.Protobuf`. We must
    reference those packages explicitly. The `Grpc.Tools` package is only used during
    development, so it is marked as `PrivateAssets=all` to ensure that the tools are
    not published with the production website.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Properties` folder, open `launchSettings.json`, and for the `https`
    profile, modify the `applicationUrl` setting to use ports `5133` for `https` and
    `5134` for `http`, as shown highlighted in the following partial markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the `Protos` folder from the `Northwind.Grpc.Service` project/folder to
    the `Northwind.Grpc.Client.Mvc` project/folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio 2022, you can drag and drop to copy. In Visual Studio Code
    or JetBrains Rider, drag and drop while holding the *Ctrl* or *Cmd* key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `Protos` folder, in `greet.proto`,
    modify the namespace to match the namespace for the current project so that the
    automatically generated classes will be in the same namespace, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Grpc.Client.Mvc` project file, add or modify the item group
    that registers the `.proto` file to indicate that it is being used on the client
    side, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visual Studio 2022 will have created the item group for you, but it will set
    `GrpcServices` to `Server` by default, so you must manually change that to `Client`.
    For other code editors, you might have to create the whole `<ItemGroup>` manually.
    JetBrains Rider has more configuration but you can ignore it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.Grpc.Client.Mvc` project to ensure that the automatically
    generated classes are created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `obj\Debug\net8.0\Protos`
    folder, in `GreetGrpc.cs`, note the `Greeter.GreeterClient` class, as partially
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, import the namespace for `Greeter.GreeterClient`, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, in the section for configuring services, write a statement
    to add the `GreeterClient` as a named gRPC client that will be communicating with
    a service that is listening on port `5131`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Models` folder, add a new class named `HomeIndexViewModel.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `HomeIndexViewModel.cs`, define a class to store a greeting and an error
    message, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace to
    work with the gRPC client factory, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controller` class, declare a field to store a `Greeter Client` instance
    and set it by using the client factory in the constructor, as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Index` action method, make the method asynchronous, add a `string`
    parameter named `name` with a default value of `Henrietta`, and then add statements
    to use the gRPC client to call the `SayHelloAsync` method, passing a `HelloRequest`
    object and storing the `HelloReply` response in `ViewData`, while catching any
    exceptions, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Views/Home`, in `Index.cshtml`, after the **Welcome** heading, remove the
    existing `<p>` element and then add markup to render a form for the visitor to
    enter their name, and then if they submit and the gRPC service responds, to output
    the greeting, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you clean a gRPC project, then you will lose the automatically generated
    types and see compile errors. To recreate them, simply make any change to a `.proto`
    file or close and reopen the project/solution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Testing a gRPC service and client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can start the gRPC service and see if the MVC website can call it successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If necessary, start a browser and navigate to the home page: `https://localhost:5133/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the greeting on the home page, as shown in *Figure 13.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.4: Home page after calling the gRPC service to get a greeting'
  prefs: []
  type: TYPE_NORMAL
- en: 'View the command prompt or terminal for the ASP.NET Core MVC project and note
    the info messages that indicate an HTTP/2 `POST` was processed by the `greet.Greeter/SayHello`
    endpoint in about 41ms, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter and submit your own name on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing gRPC for an EF Core model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we will add a service for working with the Northwind database to the gRPC
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the gRPC service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will reference the EF Core model that you created in *Chapter 3*, *Building
    Entity Models for SQL Server Using EF Core*, then define a contract for the gRPC
    service using a `.proto` file, and finally implement the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the `Shippers` table because it is simple. Each shipper
    only has three properties, an `int` and two `string` values, and there are only
    three records in the table. Let’s go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, add a project reference to the Northwind
    database context project, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Include` path must not have a line break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, build the `Northwind.Grpc.Service` project,
    as shown in the following command: `dotnet build`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, in the `Protos` folder, add a new
    file (the item template is named **Protocol Buffer File** in Visual Studio 2022)
    named `shipper.proto`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the project file and add an entry to include the `shipper.proto` file,
    as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Grpc.Service` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Services` folder, add a new class file named `ShipperService.cs`, and
    modify its contents to define a shipper service that uses the Northwind database
    context to return shippers, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `.proto` file generates classes that represent the messages sent to and
    from a gRPC service. We therefore cannot use the entity classes defined for the
    EF Core model. We need a helper method like `ToShipperReply` that can map an instance
    of an entity class to an instance of the `.proto`-generated classes like `ShipperReply`.
    This could be a good use for AutoMapper, although in this case, the mapping is
    simple enough to hand-code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace for the Northwind database context, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section that configures services, add a call to register the Northwind
    database context, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section that configures the HTTP pipeline, after the call to register
    `GreeterService`, add a statement to register `ShipperService`, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implementing the gRPC client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can add client capabilities to the Northwind MVC website:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `shipper.proto` file from the `Protos` folder in the `Northwind.Grpc.Service`
    project to the `Protos` folder in the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `shipper.proto`, modify the
    namespace to match the namespace for the current project so that the automatically
    generated classes will be in the same namespace, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Grpc.Client.Mvc` project file, modify or add the entry to
    register the `.proto` file as being used on the client side, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are using a code editor like JetBrains Rider that adds extra configuration,
    I recommend that you simplify the elements as shown in the preceding markup. If
    you do not, then you might get errors later in this coding task.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project file, in `Program.cs`, add a statement
    to register the `ShipperClient` class to connect to the gRPC service listening
    on port `5131`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Models` folder, in `HomeIndexViewModel.cs`, add a property to store
    a summary of a shipper, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controllers` folder, in `HomeController.cs`, declare a field to store
    a shipper client instance and set it by using the client factory in the constructor,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `HomeController.cs`, in the `Index` action method, add a parameter named
    `id` and statements to call the `Shipper` gRPC service to get a shipper with the
    matching `ShipperId`, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Views/Home`, in `Index.cshtml`, add code to render a form for the visitor
    to enter a shipper ID, and render the shipper details after the greeting, as shown
    highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If necessary, start a browser and navigate to the MVC website home page: `https://localhost:5133/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that an exception is thrown in the gRPC service because the `GetShipper`
    method uses EF Core, which is attempting to dynamically compile a LINQ query,
    and that is not supported with native AOT compilation, as shown in the following
    partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the project file, comment out the publish AOT option, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You might be wondering what the point was of enabling AOT when we created the
    project and chose to implement parts of the service using EF Core, if we were
    just going to have to disable AOT later. Two reasons: I want you to see the error
    so you recognize it if you try to do similar with your own gRPC projects, and
    we *will* be able to use EF Core in the future with .NET 9 or .NET 10.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the shipper information on the services page, as shown in *Figure 13.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.5: Home page after calling the gRPC service to get a shipper'
  prefs: []
  type: TYPE_NORMAL
- en: There are three shippers in the Northwind database with IDs of 1, 2, and 3\.
    Try entering their IDs to ensure they can all be retrieved, and try entering an
    ID that does not exist, like 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Taking gRPC further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let’s look at some more advanced topics like native AOT compilation support,
    getting metadata, adding deadlines, handling dates, times, and decimal types,
    adding interceptors, and handling exceptions and transient faults.
  prefs: []
  type: TYPE_NORMAL
- en: Improving a gRPC service with native AOT publish
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: .NET 8 introduces gRPC support for native AOT. But as you have just seen, it
    is not (yet) compatible with some parts of .NET like EF Core.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s change our gRPC service to use the SQL client instead of EF Core. We
    will leave most of the EF Core code in the project so you can switch back if you
    want in the future, for example, if you upgrade to EF Core 9 and it supports native
    AOT:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, uncomment out the option to publish
    AOT and add a package reference for the SQL client, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Services` folder, in `ShipperService.cs`, import namespaces for working
    with `SqlClient`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `GetShipper` method, comment out the statements to get the shipper from
    the Northwind data context, and replace it with code to get the shipper using
    `SqlClient`, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Double-check that you have re-enabled the publish AOT option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, we could alter a statement to use the slim builder for the
    web application, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CreateSlimBuilder` method does not include support for HTTPS or HTTP/3,
    although you can add those back in yourself if you need them. If we switch to
    the slim builder, then we must also switch from using HTTPS to HTTP to communicate
    with the gRPC service. In this task, we will continue to use the “full fat” builder
    so we can continue to use HTTPS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project file, add an element to emit compiler-generated
    files, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Grpc.Service` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, toggle **Show All Files** in **Solution
    Explorer**. If you are using JetBrains Rider, hover over and then click the eyeball
    icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the `obj\Debug\net8.0\generated` folder, and then note the folders and
    files that have been created by the source generators for AOT and JSON serialization,
    as shown in *Figure 13.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.6: Folders and files created by source generators in an AOT gRPC
    project'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, publish the gRPC service using native AOT,
    as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the message about generating native code and trim warnings for packages
    like `Microsoft.Data.SqlClient`, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start **File Explorer** and open the `bin\Release\net8.0\win-x64\publish` folder
    and note the EXE file is about 45 MB. This and the `Microsoft.Data.SqlClient.SNI.dll`
    file are the only files that need to be deployed onto another Windows computer
    for the web service to work. The `appsettings.json` files are only needed to override
    configuration if needed. The PDB files are only needed if debugging and, anyway,
    two of them are only because we left the EF Core code in the project for reference
    to make it easier to switch back to non-AOT publishing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `bin\Release\net8.0\win-x64\publish` folder at the command prompt or
    terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, run `Northwind.Grpc.Service.exe` and explicitly
    specify the URL with the port number to use, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `launchSettings.json` file is only used by code editors like Visual Studio
    2022 so the ports specified there are ignored and not deployed with the service
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the web page shows the shipper with an ID of 1 and that you can search
    for the other shippers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**More Information**: You can learn more about gRPC and native AOT at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/grpc/native-aot](https://learn.microsoft.com/en-us/aspnet/core/grpc/native-aot).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting request and response metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Formally defined request and response messages as part of a contract are not
    the only mechanisms to pass data between a client and service using gRPC. You
    can also use metadata sent as headers and trailers. Both are simple dictionaries
    that are passed along with the messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how you can get metadata about a gRPC call:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `Controllers` folder, in
    `HomeController.cs`, import the namespace to use the `AsyncUnaryCall<T>` class,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Index` method, comment out the statement that makes the call to the
    gRPC shipper service. Add statements that get the underlying `AsyncUnaryCall<T>`
    object, then use it to get the headers, output them to the log, and then get the
    response, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If necessary, start a browser and navigate to the home page: `https://localhost:5133/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the client successfully making `POST` requests to the gRPC `Greeter` and
    `Shipper` services and the red critical messages outputting the two entries in
    the gRPC metadata for the call to `GetShipper`, with keys of `date` and `server`,
    as shown in *Figure 13.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.7: Logging metadata from a gRPC call'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The trailers equivalent of the `ResponseHeadersAsync` property is the `GetTrailers`
    method. It has a return value of `Metadata` that contains the dictionary of trailers.
    Trailers are accessible at the end of a call.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a deadline for higher reliability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting a deadline for a gRPC call is recommended practice because it controls
    the upper limit of how long a gRPC call can run. It prevents gRPC services from
    potentially consuming too many server resources.
  prefs: []
  type: TYPE_NORMAL
- en: The deadline information is sent to the service, so the service has an opportunity
    to give up its work once the deadline has passed instead of continuing forever.
    Even if the server completes its work within the deadline, the client may give
    up before the response arrives at the client because the deadline has passed due
    to the overhead of communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, in the `Services` folder, in `ShipperService.cs`,
    in the `GetShipper` method, add statements to log the deadline and to pause for
    five seconds, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Grpc.Service` project, in `appsettings.Development.json`,
    modify the logging level for ASP.NET Core from the default of `Warning` to `Information`,
    as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `Controllers` folder, in
    `HomeController.cs`, in the `Index` method, set a deadline of three seconds when
    calling the `GetShipperAsync` method, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `HomeController.cs`, in the `Index` method, before the existing `catch`
    block, add a `catch` block for an `RpcException` when the exception’s status code
    matches the code for deadline exceeded, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `appsettings.Development.json`,
    modify the logging level for ASP.NET Core from the default of `Warning` to `Information`,
    as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If necessary, start a browser and navigate to the home page: `https://localhost:5133/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal for the gRPC service, note the request has
    a three-second deadline, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the browser, note that after three seconds, the home page shows a deadline
    exceeded exception, as shown in *Figure 13.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8: A deadline has been exceeded'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal for the ASP.NET Core MVC client, note the
    logs that start at the point where a request is made to the `GetShipper` method
    on the gRPC service, but the deadline is exceeded, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `ShipperService.cs`, comment out the statement that causes a five-second
    delay, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: The default is no deadline. Always set a deadline in the
    client call. In your service implementation, get the deadline and use it to automatically
    abandon the work if it is exceeded. Pass the cancellation token to any asynchronous
    calls so that work completes quickly on the server and frees up resources.'
  prefs: []
  type: TYPE_NORMAL
- en: Handling dates, times, and decimal numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have noted that there are no date/time types built into gRPC. To store
    these values, you must use well-known type extensions, for example, `google.protobuf.Timestamp`
    (equivalent to `DateTimeOffset`) and `google.protobuf.Duration` (equivalent to
    `TimeSpan`).
  prefs: []
  type: TYPE_NORMAL
- en: 'To use them as field types in a message, they must be imported, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The class generated will not use .NET types directly. Instead, there are intermediate
    types, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'There are conversion methods on the types `FromDateTimeOffset`, `ToDateTimeOffset`,
    `FromTimeSpan`, and `ToTimeSpan`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: gRPC also does not natively support `decimal` values. In the future, that support
    might be added, but for now, you must create a custom message to represent it.
    If you choose to do this, then keep in mind that developers on other platforms
    will have to understand your custom format and implement their own handling for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a custom decimal type and using date/time types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s add gRPC services for working with products (which have a `UnitPrice`
    property that is a `decimal`) and employees (which have `HireDate` properties
    that are `DateTime` values):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, in the `Protos` folder, add a new
    file named `decimal.proto`, and add statements to define a message format for
    safely storing a `decimal` value, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file named `product.proto`, and add statements to define messages
    and service methods to get one product, all products, or products that cost a
    minimum price, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file named `employee.proto`, and modify it to define messages and
    service methods to get one employee or all employees, and note we must import
    the Google extension for `timestamp.proto`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the project file, add elements to tell the gRPC tool to process the new
    `.proto` files, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rebuild the project to make sure the gRPC tool has created the C# classes in
    the `obj\Debug\net8.0\Protos` folder, as shown in *Figure* *13.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.9: gRPC tool-generated classes for a custom decimal type with a Units
    property'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Grpc.Service` project, add a new folder named `Converters`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Converters` folder, add a new class file named `DecimalValue.Converters.cs`,
    and modify its contents to extend the partial class created by the gRPC tools
    with a constructor and a pair of operators to convert between our custom `DecimalValue`
    type and the built-in .NET `decimal` type, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implementing the product and employee gRPC services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to implement and register the services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, in the `Services` folder, add a new
    class file named `ProductService.cs` and modify its content to implement the products
    service. I will leave this as an optional exercise for you, or you can copy the
    code from the following link: [https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/ProductService.cs](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/ProductService.cs).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Services` folder, add a new class file named `EmployeeService.cs` and
    modify its content to implement the products service. I will leave this as an
    optional exercise for you, or you can copy the code from the following link: [https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/EmployeeService.cs](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/EmployeeService.cs).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, register the two new services, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding product and employee gRPC clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to add clients to the MVC project to call the two new gRPC services:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Grpc.Client.Mvc` project, copy the three `.proto` files from
    the service project to the MVC project `Protos` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the three `.proto` files, modify the namespace, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the project file, register the three files to create client-side representations,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are using a code editor like JetBrains Rider that adds extra configuration,
    I recommend that you simplify the elements as shown in the preceding markup. If
    you do not, then you might get errors later in this coding task.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the `Converters` folder from the gRPC project to the MVC project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Converters` folder, in `DecimalValue.Converters.cs`, modify the namespace
    to use the client, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `Program.cs`, add statements
    to register clients for the two new services, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controllers` folder, in `HomeController.cs`, add two fields for the
    two new clients and set them in the constructor. (Hint: follow the same pattern
    as for greeter and shipper.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `HomeController.cs`, add two action methods for products and employees,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views\Shared` folder, in `_Layout.cshtml`, after the menu item for
    navigating to the home page, add menu items for navigating to products and employees,
    as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views\Home` folder, add a new Razor View file named `Products.cshtml`,
    and modify it to show a table of products, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views\Home` folder, add a new Razor View file named `Employees.cshtml`,
    and modify it to show a table of employees, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing decimal, date, and bytes handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we can test the specialized type handling we implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, in the top navigation bar, click **Products**, and note all
    products are included in the table, as shown in *Figure 13.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.10: Products including unit prices that use a custom decimal implementation'
  prefs: []
  type: TYPE_NORMAL
- en: Enter a minimum price such as `100`, click **Filter Products**, and note that
    only products with a unit price of that amount or more are included in the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top navigation bar, click **Employees**, and note employees and their
    birth dates and photos are included in the table, as shown in *Figure 13.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.11: Employees including birth dates and photos using timestamp and
    bytes'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ve now seen how to use gRPC to build several services that work with data.
    Now let’s see some more advanced features of gRPC.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing interceptors and handling faults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: gRPC interceptors are a way to perform additional processing during requests
    and responses and they can be injected at the client or service. They are often
    used for logging, monitoring, and validation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a client-side interceptor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s add a client-side gRPC interceptor for logging:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Grpc.Client.Mvc` project, add a new folder named `Interceptors`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Interceptors` folder, add a new class file named `ClientLoggingInterceptor.cs`,
    and then add statements to define an interceptor, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Interceptors form a pipeline, so in your interceptor, you must call the next
    interceptor in the pipeline, represented by the `continuation` delegate, and pass
    it the `request` and `context`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `Program.cs`, before any of
    the calls to add gRPC services, add a call to register the interceptor as a singleton
    service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, at the end of the statement to register the product client,
    add the interceptor, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can attach the logging interceptor to as many clients as you want.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, in the top navigation bar, click **Products**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the MVC website project command prompt or terminal, note the warning, which
    will be distinct from information messages as it is yellow-on-black by default,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**More Information**: You might be thinking, “Interceptors sound a lot like
    ASP.NET Core middleware!” You can read a useful comparison at the following link:
    [https://learn.microsoft.com/en-us/aspnet/core/grpc/interceptors#grpc-interceptors-versus-middleware](https://learn.microsoft.com/en-us/aspnet/core/grpc/interceptors#grpc-interceptors-versus-middleware).'
  prefs: []
  type: TYPE_NORMAL
- en: Exception and transient fault handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: gRPC has built-in support to automatically retry failed calls, which is a good
    way to handle transient faults like temporary network disconnects and down or
    busy services.
  prefs: []
  type: TYPE_NORMAL
- en: In the client, an `RpcException` could be thrown that includes details of the
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s add a transient fault to the gRPC service and see how the client
    handles it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, in the `Services` folder, in `GreeterService.cs`,
    modify the `SayHello` method to wait for one second and then, randomly, one in
    three times it should work but two in three times throw a service unavailable
    exception, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, note the exception, as shown in *Figure 13.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.12: Service is unavailable exception'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t get an exception, refresh the page until you do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s see how to add transient fault handling to the MVC website client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `Program.cs`, before adding
    the greeter client to the services collection, add statements to define a `MethodConfig`
    with a retry policy that retries up to five times for status codes indicating
    an unavailable service, and then after configuring the greeter client address,
    apply the `method config`, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Grpc.Service` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, note the home page might take a few seconds to appear, but
    eventually, it will successfully appear with the `Hello Henrietta` message from
    the gRPC service, and if you review the gRPC service output, it will include multiple
    attempts to call `SayHello` before finally working, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implementing gRPC JSON transcoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON is the most popular format for services that return data to a browser or
    mobile device. It would be great if we could create a gRPC service and magically
    make it callable via non-HTTP/2 using JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, there is a solution.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has a technology they call **gRPC JSON transcoding**. It is an ASP.NET
    Core extension that creates HTTP endpoints with JSON for gRPC services, based
    on Google’s `HttpRule` class for their gRPC transcoding.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can read about Google’s `HttpRule` class at the following
    link: [https://cloud.google.com/dotnet/docs/reference/Google.Api.CommonProtos/latest/Google.Api.HttpRule](https://cloud.google.com/dotnet/docs/reference/Google.Api.CommonProtos/latest/Google.Api.HttpRule).'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling gRPC JSON transcoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see how to enable gRPC JSON transcoding in our gRPC service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Grpc.Service` project, add a package reference for gRPC JSON
    transcoding, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Grpc.Service` project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `appsettings.json`, modify the `Protocols` option to enable HTTP/1.1 as
    well as HTTP/2, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: By default, a gRPC project will be configured to only allow
    HTTP/2 requests. To support clients like `.http` files in your code editor, or
    Unity, enable both HTTP/1.1 and HTTP/2\. Allowing HTTP/1.1 and HTTP/2 on the same
    port requires TLS for protocol negotiation, which is another good reason to leave
    HTTPS enabled in a gRPC service and therefore not use `CreateSlimBuilder`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, add a call to add JSON transcoding after the call to add gRPC,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Northwind.Grpc.Service` project/folder, add a folder named `google`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `google` folder, add a folder named `api`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `api` folder, add two `.proto` files named `http.proto` and `annotations.proto`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy and paste the raw contents for the two files from the files found at the
    following link: [https://github.com/dotnet/aspnetcore/tree/main/src/Grpc/JsonTranscoding/test/testassets/Sandbox/google/api](https://github.com/dotnet/aspnetcore/tree/main/src/Grpc/JsonTranscoding/test/testassets/Sandbox/google/api).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Protos` folder, in `employee.proto`, import the annotations `.proto`
    file, and use it to add an option to expose an endpoint to make an HTTP request
    to the `GetEmployee` method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing gRPC JSON transcoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can start the gRPC service and call it directly from any browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.Grpc.Service` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start any browser, show the developer tools, and click the **Network** tab to
    start recording network traffic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to a URL to make a `GET` request that will call the `GetEmployee`
    method, `https://localhost:5131/v1/employee/1`, and note the JSON response returned
    by the gRPC service, as shown in *Figure 13.13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_13_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.13: Making an HTTP 1.1 GET request to a gRPC service and receiving
    a response in JSON'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your code editor, in the `HttpRequests` folder, create a new file named
    `grpc-json-transcoding.http`, and add statements to make requests for employees
    using HTTP/1.1, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send both requests, confirm the responses are correct, and then review the
    gRPC service command prompt or terminal to confirm that the requests were made
    using HTTP/1.1, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the `.http` file, close the browser, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comparing with gRPC-Web
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**gRPC-Web** is an alternative to gRPC JSON transcoding to allow gRPC services
    to be called from a browser. gRPC-Web achieves this by executing a gRPC-Web client
    inside the browser. This has the advantage that the communications between the
    browser and gRPC service use Protobuf and therefore get all the performance and
    scalability benefits of true gRPC communication.'
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, gRPC JSON transcoding allows browsers to call gRPC services
    as if they were HTTP APIs with JSON. The browser needs to know nothing about gRPC.
    The gRPC service is responsible for converting those HTTP API calls into calls
    to the actual gRPC service implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify and summarize:'
  prefs: []
  type: TYPE_NORMAL
- en: gRPC JSON transcoding happens on the server side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gRPC-Web happens on the client side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice**: Add gRPC JSON transcoding support to all your gRPC services
    hosted in ASP.NET Core. This provides the best of both worlds. Clients that cannot
    use gRPC natively can call the Web API. Clients that can use gRPC natively can
    call it directly.'
  prefs: []
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are three benefits of gRPC that make it a good choice for implementing
    services?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are contracts defined in gRPC?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following .NET types require extensions to be imported: `int`,
    `double`, or `DateTime`?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you set a deadline when calling a gRPC method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of enabling gRPC JSON transcoding to a gRPC service hosted
    in ASP.NET Core?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 13.2 – Compare gRPC services with HTTP APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Review the article found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison](https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.3 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-13---building-efficient-microservices-using-grpc](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-13---building-efficient-microservices-using-grpc)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you:'
  prefs: []
  type: TYPE_NORMAL
- en: Learned about some concepts of gRPC services, how they work, and their benefits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented a simple gRPC service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented a gRPC service that uses an EF Core model that cannot yet use AOT
    publish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented a gRPC service that uses `SqlClient` libraries that can use AOT
    publish and are therefore smaller and faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learned how to set deadlines and read metadata sent as headers and trailers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented a custom `decimal` type and used extended date/time types.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented a client-side interceptor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended a gRPC service with support for being called as an HTTP service with
    JSON, to support clients that cannot work with gRPC natively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will review how to build website user interfaces using
    ASP.NET Core MVC.
  prefs: []
  type: TYPE_NORMAL
