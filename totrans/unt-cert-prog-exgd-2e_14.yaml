- en: '*Chapter 14*: Full Unity Programmer Mock Exam'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the Full Unity Programmer Mock Exam. Here, we will provide a series
    of multiple-choice questions, similar to the ones you have been answering at the
    end of every few chapters in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Try your best and see how it goes – the idea is to get **all** of the questions
    right. If and when you complete this mock exam, you will be ready to go ahead
    with the real Unity Programmer exam. If, for any reason, you get a question wrong,
    go back through this book or Google to try and find the answer. Try to avoid skipping
    to the answer in the [*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245);
    use your knowledge more than muscle memory. It's important you understand the
    question so that you can answer it. These mock questions are only examples of
    the kinds of questions you will get in the exam.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend reading every question at least twice; sometimes, exam questions
    will try to catch you out through how the questions are worded. The exam will
    also try and take your time away by making you read a long piece of code, which
    isn't really required.
  prefs: []
  type: TYPE_NORMAL
- en: The exam is timed, but you should have enough time to answer each multiple-choice
    question. It's probably best to keep some personal time aside for when you start
    and finish this mock exam. If you are struggling with a question, skip it and
    come back to it later. Sometimes, it's easier to do the exam questions in sweeps
    to get the easier ones out of the way. If you are still struggling, I have marked,
    in brackets at the end of each question, the chapter/[*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245)
    you can get more information from.
  prefs: []
  type: TYPE_NORMAL
- en: So, take your time, don't get caught out with the wording, and proceed... If
    you enjoy it, that's also a bonus!
  prefs: []
  type: TYPE_NORMAL
- en: Full mock exam
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of your junior programmers has asked for a global instance with a class
    that can be accessed anywhere in the code of the game. What design pattern would
    fulfill this requirement when you could have code that acts as a manager? (CH1)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prototype
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Abstract Factory
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Singleton
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Builder
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You have been asked by your head of development to make it so whenever a player
    walks through a doorway, a light next to the door will turn on. You have made
    an `OnTriggerEnter()` script that enables a light and added a collider to your
    doorway with a `Rigidbody`. Your player has a collider and `Rigidbody` as well.
    When you run the game to test your code, the light doesn't turn on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is most likely the cause of this issue? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: The doorway's collider is not marked as a trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The light game object needs a trigger as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You don't need multiple `Rigidbody` components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The doorway isn't connected up to the light.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What function allows us to take a `Vector3` or `Vector2` reading from any direction
    but keep its magnitude to just one? (CH7)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Normalize()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MoveTowards()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Lerp()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Scale()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We have been given our **Game Design Document** (**GDD**) and in it, it states
    that our **Player Character** (**PC**) will need to run and dodge multiple beach
    balls that are thrown at them. The beach balls can bounce off each other. Also
    in the scene are various static props and a trigger area for the PC to grab health.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which objects in this scene would at least need a `Rigidbody` component? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: The PC and the beach balls
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PC and the invisible health area
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The beach balls only
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The beach balls and the invisible health area
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Relating to the beach ball question, in the Layer Collision Matrix (**Edit |
    Project Settings | Physics**) of our project, which of our collider's physics
    in the matrix should be checked when it comes to them interacting with each other?
    (CH13)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PC and beach ball, beach ball and beach ball, and PC and health area
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PC and beach ball
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Beach ball and health area, beach ball and beach ball
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PC and health area
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a mobile app that will need to support low-performing tablets. In our
    app, we will have a mini-game where the player will be able to throw an unlimited
    supply of basketballs into a hoop. However, only 10 basketballs are in the view
    of the camera. Due to this, the programmer has made it so that the same 10 basketballs
    will be used instead of instantiating a new basketball on each throw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The programmer is aware that the design pattern for reusing the basketball assets
    has a name. What is this design pattern's name? (CH1)
  prefs: []
  type: TYPE_NORMAL
- en: Abstract Factory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Object Pool
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dependency Injection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Builder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have been assigned to make an application that plays music as the application
    starts. As the user goes through different scenes, the music will not be removed
    or affected and continue to play. You've made a start by creating a game object
    and added a script to it that plays the music.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What else do we need to do to make sure our music continues to play? (CH3)
  prefs: []
  type: TYPE_NORMAL
- en: Create two game objects that contain both music scripts on the starting scene
    only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each scene needs a music game object with a script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `DontDestroyOnLoad(this.gameObject);` to the `Awake` function in the music
    script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate the `music` game object on every scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Unity's Cloud Build, what should we check to find the latest build? (CH1)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cloudBuildTargetName`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`buildNumber`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bundleID`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scmCommitID`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a mobile game that is gesture-controlled, and we want to make it so
    we swipe the screen from one side to the other to release an event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the best way of measuring our player's finger press location from and
    to the `Touch` struct? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: '`Type`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Phase`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`deltaPosition`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fingerId`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our head programmer is trying to find an easy way for our Flight Simulator game
    to cover controls for mobile, PC, and console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the easiest way of achieving this? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Make a Unity project that supports each game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have a class for each platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `CrossPlatformInput` package from Standard Assets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `#define` directives for each possible platform to create a custom input
    manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our flight simulator, we have just hooked up our horizontal and vertical
    controls with `Input.GetAxis("Horizontal")` and `Input.GetAxis("Vertical")`. The
    game designer has pointed out the controls are sluggish and we need the movements
    to be more responsive. (CH2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What settings do we need to alter in the Input Manager to improve/amend this?
  prefs: []
  type: TYPE_NORMAL
- en: '**Invert**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sensitivity**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Axis**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Gravity**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now making a side-scrolling platform game and we want it so that when
    we press the *A* button, we jump, but we also want it so that if we press the
    *up* arrow key, we also jump. In the Input Manager, where do we add the second
    button to jump? (CH2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alt Positive Button
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Alt Negative Button
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Negative Button
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Positive Button
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our platform game, we have noticed the player will run left and right fine,
    but when I put the gamepad down, my player's character is slowly moving right.
    I believe I need to change a setting in the Input Manager, but which one? (CH2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sensitivity
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Snap
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Gravity
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dead
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Typically, when typing names of instance variables, what naming convention do
    we use? (CH2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Positional notation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All caps
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Snake case
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Camel case
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A bug fix has been issued to you where game designers have been altering a public
    `int` variable and making it too high in the Unity Editor. There is no reason
    for the variable to go over 100.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What attribute should the programmer use to restrict the game designer? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: '`[GUITarget]`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[TextArea]`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Range]`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Header]`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have been assigned a task from your technical lead to store the 800 **non-player
    character** (**NPC**) prefabs. Either one of these prefabs can be picked and dropped
    into the game to roam around. This system needs to be user-friendly for our designers
    and ideally, all selections of NPCs should come from the **Inspector** window.
    There is also a chance the number of enemies will increase from the original 800.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How will you prepare to issue these NPCs? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: Simply create a script to store a public array that will accommodate the creation
    of each prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Scriptable Object containing an array of referenced prefabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a class containing a private serialize field list of NPC prefabs and have
    each class of the NPC create an instance of an NPC at runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create all 800+ NPCs at runtime and store them out of the camera view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What setting do we change in **Time Manager** if we want Unity to calculate
    its physics at a certain time in an update? (CH10)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maximum Allowed Timestep
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fixed Timestep
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Maximum Allowed Particle Timestep
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Time Scale
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which collider is the most efficient? (CH2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capsule
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Sphere
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Mesh
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Box
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are simulating a boulder falling through the sky, as well as a packet of
    crisps. We want the boulder to fall faster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What settings do we change in either of our game objects' `Rigidbody` components?
    (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Decrease the packet of crisps' Mass and increase the boulder's Drag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the packet of crisps' Angular Drag and increase the boulder's Mass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the boulder's Mass and decrease the packet of crisps' Mass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decrease the boulder's Drag and increase the packet of crisps' Drag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When would we use a trigger instead of just a collider? (CH2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a character is sitting in a health zone charging their energy.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If two game objects collide but we only want to set our particle effects manually.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Only if we need to alter our `Rigidbody` settings during runtime.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever multiple colliders are children of another collider.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are making a sci-fi arcade shooter game. The gamer's view has a UI display
    wrapped around the screen with lots of vital details about our mission and our
    ship's health. In the lower corner of the screen, we have a 3D view of the condition
    of our ship. Whenever the ship takes damage, we can see the results in our 3D
    view, along with particle effects to emphasize the damage. Each possible damage
    point on the ship in the 3D view has a collider that reacts if a missile hits
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In testing, you realize the ship in the 3D view has enemy missiles bouncing
    off your colliders when they're supposed to be damaging your ship.
  prefs: []
  type: TYPE_NORMAL
- en: How should the programmer solve this issue while retaining the functionality
    of both the in-game objects and the UI? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: In the Layer Collision Matrix, turn off collisions between the 3D UI ship layer
    and the missile and asteroid layers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the Mass of the missiles to get through the collider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a second collider to all the colliders on the ship to increase its probability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add one main collider to go around the ship so that when a missile hits it,
    this will disable all the colliders inside for a split second.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have moved studios and jumped on a new game project where you are in a desert
    defending a fort from 6,000 donkeys charging to destroy your civilization. Your
    only line of defense is throwing heavy wet bean bags to tire the donkeys out.
    To target each donkey, you use a raycast system that makes contact with the mesh
    collider on either donkey. Your head of development has now requested 20,000 donkeys
    to up the ante. You are now starting to notice the performance of the game has
    drastically dropped. Everyone on the team is making an effort so that all 20,000
    donkeys are in the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What changes can you make to improve the game's performance? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: Make the donkeys slightly bigger so more space is taken up in the environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the mesh colliders with sphere colliders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a special donkey layer mask so the rest of the environment is ignored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shorten your raycast's length.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Never go full donkey.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A member of your team has pushed a commit for a new segment to your game. At
    this stage, it's recommended to make sure the entirety of your game runs OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your head of development has requested that you test your game. Which test should
    you perform? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Smoke
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regression
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: System
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have been asked to check specific parts of someone else's code by creating
    custom methods to make sure the return value is what it should be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a name for the specific type of test you are performing. What is it?
    (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Static test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accessibility test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backend test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the benefits of a unit test? (CH13)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will check the entirety of your code.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It tests a single "unit" of code.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If performed regularly, it only requires the latest code to be tested.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit tests expose how efficient your code is between functions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When using a `MinMaxCurve`, which property is the least expensive in terms of
    performance? (CH4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optimized curve
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Random between two constants
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Random between two curves
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Constant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following will prevent a particle system from supporting Procedural
    Mode? (CH4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable looping.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Simulation Space` property to `World`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the `Auto Random Seed` tick box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Collision.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An artist has approached you, requesting you to make a visual change to the
    sci-fi game you are currently working on. He has requested you to shrink a series
    of asteroids over time as they hurtle closer to a planet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The asteroids come from a particle system emitter; which module would suit the
    requirement of the artist? (CH4)
  prefs: []
  type: TYPE_NORMAL
- en: Renderer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Texture Sheet Animation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sub Emitters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Size Over Lifetime
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The whole development team has nearly finished creating their "Spitfire Battle
    of Britain" game and wants to add particle effects to the back of each Spitfire
    plane as a final touch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the game designers has suggested smoke coming out of the back of the
    Spitfire should change randomly to emphasize the choppiness of the wind. You have
    programmed to the point where the particle effect is detecting wind, but what
    should you do to the particle smoke to show that the wind is affecting the smoke?
    (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Change the **Angular Velocity** property in the **Rotation by Speed** module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the **Strength** property in the **Noise** module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alter the curve of the **Size** property in the **Size by Speed** module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the indie game you are developing, you have set your scene up so that the
    Environment Lighting Intensity Multiplier is set to an intensity of `0.75`. When
    your player completes the level and moves on to the next scene, the lighting is
    set at `1.24`. You are using `LoadSceneAsync` with a `LoadSceneMode` of additive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you load up the next scene, what will the light intensity be set to? (CH3)
  prefs: []
  type: TYPE_NORMAL
- en: '`1.24`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0.75`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have moved studios yet again and started working on a massive open-world
    game where your player can walk for miles and miles. Because of the complications
    of scenes being potentially too big, you have decided to break your scenes up
    into multiple segments. When it comes to a scene change, your player will be loaded
    through into the next scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What function allows us to make a game object move over into another scene?
    (CH3)
  prefs: []
  type: TYPE_NORMAL
- en: '`CreateScene()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MoveGameObjectToScene()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MergeScenes()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetActiveScene()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it comes to storing data, which is the more likely choice for `PlayerPrefs`?
    (CH11)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Purchase information
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor resolution settings
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: User email address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Login passwords
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which type of variable can you save without emulating (natively) in PlayerPrefs?
    (CH11)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Float
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Double
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enum
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Array
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which system namespace would you use when serializing data to the device's local
    disk space? (CH11)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linq
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IO
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Collections
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of our sci-fi game, we save all of our stats in JSON format from
    our `PlayerStats` class to local disk space. But when we want to retrieve the
    JSON file from our storage, what do we replace the missing gap with? (CH11)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`JsonUtility.FromJson<____>(stringFromFile);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`StatsInfo`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`String`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Array`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PlayerStats`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When retrieving an image from the internet, which UI component do we use to
    display the result? (CH9)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Canvas
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Raw Image
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Image
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Panel
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which UI component stores a series of UI elements in a row at a fixed distance?
    (CH9)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vertical Layout Group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Horizontal Layout Group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Grid Layout Group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Canvas Group
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We have made it possible for our game to update several statistics from the
    Remote Settings section in the Unity Dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following values are we allowed to use? (CH11)
  prefs: []
  type: TYPE_NORMAL
- en: '`Char`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`string`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`List`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`UInt16`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these platforms can Unity Analytics be used for? (CH11)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PS4
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Commodore Amiga 500
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Xbox
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as you connect your game to Unity Analytics, which event will automatically
    start giving you daily reports? (CH11)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Core Events
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Standard Events
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Custom Events
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Transaction Events
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In our **First-Person Shooter** (**FPS**) game, we have just hooked up our marine's
    space cannon's Finite State Machine so that it fires the projectile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the cannon is fired, there is a banging sound, particle effects fountain
    out from the cannon, and a beam fires outward.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the only thing the beam can come into contact with is a wall, which
    has a collider attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: When the beam hits the wall, there is another particle that is triggered when
    the impact of the surface hits. During this explosion, we shrink and then destroy
    the beam.
  prefs: []
  type: TYPE_NORMAL
- en: Which event should we expect the beam to be destroyed in? (CH4)
  prefs: []
  type: TYPE_NORMAL
- en: '`OnStateExit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OnStateEnter`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OnStateMove`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OnStateUpdate`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are prototyping a third-person character for a SWAT team game, and we are
    going to need to get some fundamental controls up and running. Our character is
    currently set to run, lean, and shoot in all directions. Ideally, we want it so
    our character can shoot and jump, or shoot and lean. Currently, our Base Movement
    is set to **Override Blending**, while the other layers are set to **Additive
    Blending**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In which order should the Animation Layers be set? (CH4)
  prefs: []
  type: TYPE_NORMAL
- en: Shoot, Lean, Base Movement
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Base Movement, Shoot, Lean
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lean, Base Movement, Shoot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shoot, Base Movement, Lean
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have an animation from a player that goes from standing to crouching. We
    want the animation between each animation to take exactly 0.8 seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What properties do we need to focus on in the Animation transition? (CH4)
  prefs: []
  type: TYPE_NORMAL
- en: Transition Duration and Transition Offset
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fixed Duration and Transition Duration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Has Exit Time and Fixed Duration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Has Exit Time and Exit Time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it comes to animating a face in Unity, which is the best blend tree to
    use? (CH4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2D Freeform Cartesian
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Direct
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 2D Simple Directional
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 1D
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your latest indie game development, you have been focusing on the Animation
    Controller''s transitions. The order of your transitions goes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Idle to Cry
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Idle to Skip
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Idle to Sneeze
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Idle to Laugh
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your animation transition properties are set to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interruption Source: **Current State**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ordered Interruption: **Ticked**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your current transition is set to **Skip**. At runtime, your character has begun
    to Skip, but as a tester, you also press all four buttons to trigger each of the
    animation states.
  prefs: []
  type: TYPE_NORMAL
- en: Which of the transitions will take priority? (CH4)
  prefs: []
  type: TYPE_NORMAL
- en: Idle to Laugh
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Idle to Sneeze
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Idle to Cry
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Idle to Skip
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are creating a **First Person Shooter** (**FPS**) and you are currently
    working on the player's camera and making sure their weapon doesn't clip through
    objects when you get too close.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the player's weapons are set to a layer called **FPS**. You then set
    your camera's Culling Mask in order to view everything apart from the **FPS**
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you create a second camera and set its Culling Mask to only render the
    **FPS** layer and its Clear Flags to what? (CH9)
  prefs: []
  type: TYPE_NORMAL
- en: Depth Only
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solid Color
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't Clear
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Skybox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Being an enthusiastic indie developer, you have decided to make a spiritual
    successor to the game "Desert Bus." You have nearly finished developing the game
    and decided to add some optimizations. You have decided to make it so that any
    of the smaller 3D assets such as pebbles, small plants, and insects should not
    be rendered at a far distance, only when close up. We should still be able to
    see larger assets, no matter what distance we are from them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which camera property would you use to help achieve this? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: '`farClipPlane`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`layerCullDistances`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cullingMatrix`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`useOcclusionCulling`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When writing a custom toon-shaded edge detection effect script, what should
    the camera's `DepthTextureMode` be set to? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DepthNormals`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MotionVectors`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Depth`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are currently developing a game where our player sees through Unity's main
    camera and has the capability to temporarily zoom in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What property of our camera allows us to zoom in? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: '`targetDisplay`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`aspect`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lensShift`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`fieldOfView`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have introduced a multiplayer split-screen mode to your game. You are now
    dividing the screen into two rows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should the programmer set the Viewport Rect options on the cameras? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: Set both cameras' `1` and `0.5`. Set Player 1's `0.5` and Player 2's **Y** to
    0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both cameras' `1`. Set Player 1's `0.5` and Player 2's `1`. Set both cameras'
    `0.5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both cameras' `0.5` and `1`. Set Player 1's `1` and Player 2's `0.5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both cameras' `1` and `0.5`. Set Player 1's `1` and Player 2's `0.5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our game has had some conflicts, so as a precaution we need to tighten security.
    Below is a sample of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What's the best way to keep these two variables safe? No other classes use them,
    but we need access to them from the Inspector for the Game Designer.
  prefs: []
  type: TYPE_NORMAL
- en: Change access modifiers from `public` to `private`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change access modifiers from `public` to `private` and add the `[SerializeField]`
    attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change access modifiers to `private` and give them `get` and `set` accessors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public` on it''s own is safe enough; it''s only a couple of floats'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a physics-based object that we want to rotate around a particular point
    such as a door.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which type of joint will allow this type of movement? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: Character
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fixed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hinge
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have been given a lamp asset from an artist and they have asked us to make
    it so the lamp's light flickers in the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which property of our light do we need to manipulate in our script to achieve
    a flickering effect? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: '`Mode`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spotAngle`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`range`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`intensity`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are testing a scene and applying different lights to it. Within the scene,
    you have a series of game objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decorative lights
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The sun
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A car with its hazard lights on
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A garage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The car is parked in the garage. Around the inside of the garage, walls are
    decorative lights, and the sun is shining through the garage door.
  prefs: []
  type: TYPE_NORMAL
- en: You have enabled Global Illumination to increase the realism of the sun. As
    impressive as this looks, your scene now takes a high amount of memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: How can we keep our scene looking as impressive but continue to keep the memory
    usage low? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Set `0` on the sunlight.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Light Mode** for the lights to **Baked**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `0` on the decorative lights, that is, the car's hazard lights.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable **Realtime Global Illumination** in the **Lighting** settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An artist has asked us to change the glow of a neon sign from red to blue with
    our script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which property can we use to alter the glow of our sign? (CH4)
  prefs: []
  type: TYPE_NORMAL
- en: '`_EmissionColor`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`_Color`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`_SrcBlend`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`_EmissionMap`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have been requested to add a reflective marble effect to a shiny hallway
    with large, open, white-silver windows. Outside of the building is a bright, sunny
    background with grass, bushes, and trees all applied to a skybox. The hallway
    contains a series of reflection probes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Reflection Probe option should be used on the hallway's **Mesh Renderer**
    component to create a shiny reflective surface? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Simple
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blend Probes and Skybox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blend Probes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Off'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our hallway floor looks shiny and reflective thanks to the reflection probes.
    We have also noticed that the walls don't appear to be in sync with the reflective
    floor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What setting do we need to change regarding our reflection probe to fix this?
    (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Enable Box Projection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase Resolution
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the Importance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable HDR
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your artist has created 3D assets for a snow level and has also attempted to
    use assets from a previous game. The artist has made a wooden hut and put the
    asset into the game as well. The overall scene looks great but the overall colors
    in the scene don't sit with each other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which property from our post-processing stack would help make the colors in
    our scene uniform to give our assets an overall icy look? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: User LUT
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chromatic Aberration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vignette
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a tech demo where the player walks down a sci-fi corridor, and through
    the window, the sun shines through and lights up the corridor. We have applied
    a bloom effect from our post-processing stack. We want some of the game assets
    in the corridor to shine and glow like what should be expected from a bloom effect.
    An artist has informed you that all art assets have emission maps, but their levels
    vary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which property do we need to alter to make it so our bloom effects cover the
    lower-level emission maps? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Decrease Threshold
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase Intensity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decrease Soft Knee
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase Radius
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the function that transitions two materials from one over to another
    at runtime? (CH9)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetColor`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Lerp`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetFloat`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`EnableKeyword`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are making a first-person survival horror game. Our player has a flashlight
    for when they walk around a spooky house. Our designer has requested that the
    end of the flashlight produces a glass pattern on the surfaces the light projects
    onto.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What light property will support what the designer is asking for? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: '`cullingMask`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cookie`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`spotAngle`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`type`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have reached the end of development for your PC VR game. You currently have
    your Camera component's **Rendering Path** set to **Forward**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following post-processing properties would help lower the risk
    of nausea when using a VR application? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs: []
  type: TYPE_NORMAL
- en: Depth Of Field
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section Multiplying
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saturation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Antialiasing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When developing a VR game, what level of motion for photon latency should a
    developer target to trick the player's mind into thinking they're in another place?
    ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '80'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '20'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '35'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '50'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are developing a mobile VR game with art assets that hold single-color materials
    and unlit shaders. Also, our camera component's Rendering Path is set to Forward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Anti-Aliasing setting would improve the visuals of the game, but likely
    not impact the performance so that it's in an unplayable state? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs: []
  type: TYPE_NORMAL
- en: 4x Multi Sampling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 8x Multi Sampling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 12x Multi Sampling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which window in the Unity Editor will provide a list of draw calls from our
    project and will also allow us to step through it frame by frame? (CH13)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Profiler
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Frame Debugger
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Services
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Statistics
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created a VR game where our player is inside a room with a locked door
    that will not open. The room contains a window and outside is a field of grass
    with mountains in the distance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Everything in the player's scene is 3D modeled and textured, and there is also
    one-directional light.
  prefs: []
  type: TYPE_NORMAL
- en: When the player walks toward the window, the game begins to lag due to the spike
    in draw calls.
  prefs: []
  type: TYPE_NORMAL
- en: How can we improve the performance of our game? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs: []
  type: TYPE_NORMAL
- en: Remove the 3D models in the distance and replace them with a rendered skybox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable **Generate Mip Maps** in the **Texture Import Settings** for all textures
    in the distance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add lights.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To help combat nausea in VR, what **Frames Per Second** (**FPS**) do developers
    need to aim for with their games? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 90 FPS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 30 FPS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 60 FPS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 75 FPS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Frame Debugger** window, the developer selects a draw call for the
    geometry of a game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In which window does the object get highlighted? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Curve Editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hierarchy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A designer wants to change the parameters of your scripting of their game characters
    and save them locally to disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the safest and easiest way to give the designer access? (CH11)
  prefs: []
  type: TYPE_NORMAL
- en: Store the data as public variables in a **MonoBehaviour**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the data in a ScriptableObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the data in PlayerPrefs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a web service with an API that can be read by the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we are writing a script that depends on a particular component, which attribute
    do we add? (CH2)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Include]`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Range]`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[SerializeField]`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[RequireComponent]`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method will return a `Touch` struct? (CH13)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetKeyDown()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`touchSupported`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Input()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetTouch()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With regard to the `Input` class, what is the difference between `GetMouseButtonUp`
    and `GetMouseButton`? (CH13)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetMouseButton` will return `true` if the mouse button is held down, while
    `GetMouseButtonUp` will only return `true` once during the frame where the mouse
    button is released.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetMouseButton` will return an `Int` indicating which mouse button is being
    pressed, while `GetMouseButtonUp` will return `true` if any mouse button is pressed.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetMouseButton` will return `true` if a mouse is connected, while `GetMouseButtonUp`
    will return `true` if a mouse button is pressed.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetMouseButton` will return an array containing the available mouse buttons,
    while `GetMouseButtonUp` will return an index for the array indicating which mouse
    button is being pressed.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we improve performance with a particle system? (CH4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the number and size of the particles to reduce the number of pixels on
    the screen that need to be alpha blended.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the particle lifetime so that more particles can be reused in memory
    rather than generating new ones.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the speed of particles to reduce the number of physics updates that are
    needed.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Randomize properties between two curves rather than two constants to reduce
    the number of random numbers that need to be generated.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following methods would be ideal for a health bar that goes across
    the top of the screen? (CH8)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Horizontal`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Radial90`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Radial180`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Span`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are developing a third-person game where your player will interact with
    and talk to other characters. You are currently developing speech boxes that appear
    above each player's head when they're talking in the 3D world.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which canvas property would best suit a 3D environment for speech? (CH13)
  prefs: []
  type: TYPE_NORMAL
- en: Screen Space Camera
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pixel Perfect
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: World Space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screen Space Overlay
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which would suit the use of an orthographic camera? (CH9)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A first-person player perspective
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A map screen that shows an overview of the game world
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A 3D space battle
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An enemy AI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are developing a strategy game where all players and NPCs are based outdoors.
    You need to create a day and night cycle, so in your scene, you have a skybox
    and a directional light.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How will you achieve this? (CH2)
  prefs: []
  type: TYPE_NORMAL
- en: Rotate the directional light.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the shadow settings on the directional light.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the TimeManager settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch the skybox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following will change a material property for a single object?
    (CH4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Renderer.shader`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Renderer.instance`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Renderer.material`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Renderer.sharedMaterial`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the best method to create a glowing lava lake? (CH4)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an emissive texture for the lava and animate the UVs on the material.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a screen space shader that applies a lava effect to the desired area.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add dozens of point lights to areas where the lava is moving.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a particle effect to simulate the lava's movement.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Our game has a cutscene and we want it to play the music at a particular volume
    level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the best way of achieving this? (CH10)
  prefs: []
  type: TYPE_NORMAL
- en: When the game plays the cutscene, switch to a different Audio Mixer Snapshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the cutscene starts, change the volume on the Audio Source playing the
    music and attach a script component to cut out high frequencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the cutscene starts, apply a Reverb Zone around the play area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the cutscene starts, apply changes to the player's stored volume controls
    in `PlayerPrefs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A VR game for low-performance machines uses a Forward Rendering Path. Which
    of the following will improve the game's overall visuals with a minor frame drop?
    (CH13)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anti Aliasing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Real-Time Reflection Probes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Deferred Rendering
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Spotlights
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You have developed a mobile app that starts with a UI where the user can configure
    their experience. Once configured, the app goes into VR mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we make this app start in non-VR mode to begin with? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs: []
  type: TYPE_NORMAL
- en: Place a Camera in the scene and set its FOV to null.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the build platform to PC instead of a VR platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `Time.timeScale` to 0 at the start of the game and add a script that searches
    for VR devices after the first frame is rendered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `None` to the top of the VR SDK list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a VR device is rendering at 90 Hz, how many milliseconds should the latency
    be below? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '11'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '12'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '13'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '14'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You have developed a VR game that is getting reports from your testers stating
    that the game lags in certain parts. Your camera's Rendering Path is set to Forward.
    You have decided to not reallocate the memory of the eye texture at runtime to
    avoid any other performance conflicts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a frame rate drop is detected, we can set a property in our `XRSetting` class
    to help combat this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Which property is the most effective? ([*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245))
  prefs: []
  type: TYPE_NORMAL
- en: '`occlusionMaskScale`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`eyeTextureResolutionScale`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`renderViewportScale`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`useOcclusionMesh`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are working on a small personal project that contains several scripts. You
    open one of the scripts and change its public List to private. You save the script
    and are now presented with a `NullReferenceExeception` in the Console window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the information you have been given, what has caused this error to
    happen?
  prefs: []
  type: TYPE_NORMAL
- en: private needs to be a capital letter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The original public List can no longer be accessed from the other scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's likely a bug and needs reporting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Something is misspelled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following screenshot, we have a scene that contains separate Image components.
    The two colored squares are proportioned perfectly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Screenshot for question 92'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.01_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – Screenshot for question 92
  prefs: []
  type: TYPE_NORMAL
- en: What single component can pad these two image components so perfectly?
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal Layout Group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's not possible with a single component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zooming into the squares and lining them up manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply 3D Quads on top of the white background and trace around them with vertex
    snaps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are working on some UI today. We have been asked to make a progress bar that
    will FILL up, starting from the BOTTOM and move all the way to the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What properties appear correct to begin with?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A colleague has asked for some help with regard to their bus prototype running
    slowly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a sample of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Can you see what's causing any performance issues from the preceding code?
  prefs: []
  type: TYPE_NORMAL
- en: Take `FindObjectsOfType` out of `Update` and cache it once in `Start()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the count of buses in the game as your primary task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code seems fine, so check the assets in the scene (textures, polycount,
    and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Drive()` is empty and is causing a memory leak.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following script has been assigned to you to be refactored into an "MVC"
    pattern. If you aren''t aware of the Model View Controller pattern, it consists
    of carving up your project into:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model (Data, in other words, variables)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Views (Interface/Detection, in other words, UI)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers (Decision/Action, in other words, `transform.rotation` / `transform.position`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a sample of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With that said, which part of this code would you recognize to be refactored
    for the Model?
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Content in the `Update` function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Label.text = talk`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a game where the scene is set at night, in an alleyway with burning
    oil barrels surrounded by homeless people keeping their hands warm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the technical artists has asked a favor from you to change the process
    of how the fire glows. She has asked to have it so the fire starts off green at
    the bottom of the fire, blue in the middle, and yellow at the top. However, this
    is the fifth time the technical artist has asked for a color gradient change!
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To refresh your knowledge of particle modules, check the following link: [https://docs.unity3d.com/ScriptReference/ParticleSystem.ColorOverLifetimeModule.html](https://docs.unity3d.com/ScriptReference/ParticleSystem.ColorOverLifetimeModule.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Your changes must be done via script (according to your boss), and not in the
    Inspector window or any form of drag-and-drop method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pick which option you would use to change the process of colors in the particle
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Color data type and store the variable from the entire barrel particle
    system in it as `Color` `burningFlames = flamingBarrel.ColorOverLifeTime.color`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cache the particle system module that controls the gradients of the particle
    system's colors as `ParticleSystem.ColorOverLifetimeModule flameStored = flamingBarrel.colorOverLifetime;`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Forget the script already! Use prefabs – she can do it herself!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's all about particle speed that affects the color such as `Color burningFlames
    = flamingBarrel.colorBySpeed.color;`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is code that is written for water that is drunk over time. Our Coroutine
    is checking until no water is left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a sample of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: IEnumerators require a return type. Which return type should we give it to trigger
    the Log at the correct time?
  prefs: []
  type: TYPE_NORMAL
- en: '`yield return new WaitUntil(AnyWaterLeft);`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`yield return new WaitWhile(AnyWaterLeft);`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`return null;`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`yield return new WaitForSeconds(null);`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional Information
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you further with this question, check out the following links from
    Unity''s official scripting reference page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/ScriptReference/WaitUntil.html](https://docs.unity3d.com/ScriptReference/WaitUntil.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/ScriptReference/WaitWhile.html](https://docs.unity3d.com/ScriptReference/WaitWhile.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Your team has finished developing an application for their client. The client
    reviews the work, loves it, but wants a few changes to the banner and background
    colors. This can be easily achieved without any additional code added or changed.
    Your artist in the team has offered to apply the new changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additional Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Unit Testing** – Testing each individual piece of code (scripts/classes)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Integration Testing** – Putting units together and making sure no errors
    are introduced'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Acceptance Testing** – Customer checks to see whether the code/project meets
    their requirements'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Regression Testing** – Checking to see that no new bugs have been introduced'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All tests have been made apart from one; based on the information given, which
    test resembles the client accepting this work?
  prefs: []
  type: TYPE_NORMAL
- en: Acceptance Test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integration Test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit Test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regression Test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following code spawns vampire bats in our game. When a bat goes into the
    beam of light, it will be destroyed. Each bat class holds a function called `CheckForLight()`
    and returns a `bool`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a sample of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `BeamOfLight()` function will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check every bat relating to the `VampireBats` script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the returned `bool` from the bat's `CheckForLight` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `true`, remove the bat's reference (take it off the list) and remove it from
    the game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which `for` loop would fix the issue?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The following code runs fine in the Unity Editor, but in a build it breaks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a sample of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What is causing the error in the build?
  prefs: []
  type: TYPE_NORMAL
- en: The game works fine in the Editor; likely the system is faulty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Too many spaces in the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CoinCollection` is defined in the `UNITY_EDITOR` directives only.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Reset` function isn't called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we save the following code, it generates an error in the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Additional Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you don't know the answer, try copying and pasting the code into an empty
    script to see whether you can try and solve the problem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What do you think is causing the error?
  prefs: []
  type: TYPE_NORMAL
- en: An object reference is required for the non-static field, method, or property
    such as `GameManager.Bucket(GameObject)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Bucket` isn''t connected with Bitbucket.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Start` cannot be `private`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No error is generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following code is for a touchscreen game where a custard pie is launched
    in the opponent's face. It has been requested that the pie should be launched
    when the player takes their finger off the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A sample of code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Which piece of code should be entered into the `if` statement's condition?
  prefs: []
  type: TYPE_NORMAL
- en: '`If (touch.phase == TouchPhase.Ended)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if (ALT+CTRL+DEL)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if (touch.phase == TouchPhase.Begin)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if(Input.GetFinger == null)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the scene is running in the Unity Editor, you press the *Spacebar* on
    the keyboard and observe the `points` variable is giving an inconsistent number
    of points when it increases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A sample of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What could help calm the problem?
  prefs: []
  type: TYPE_NORMAL
- en: Change `FixedUpdate` to `Update` as `Update` is called on every frame to check.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire off an event every time the *Spacebar* is pressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `points` data type from `int` to `float`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a time delay for each *Spacebar* press, allowing cooling off after each
    press.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have been asked to create a basic prototype where a car drives into a wall
    and bounces off it with rigidbody physics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The GameObjects with their components are checked and set correctly, but there
    appears to be an issue with the code as the car drives right through the wall
    with no collisional reaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: What is causing the car to drive through the wall?
  prefs: []
  type: TYPE_NORMAL
- en: Add a `ForceMode.Impuse` within the `AddForce` parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the car's mass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the driver's mass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the project's timestep.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are working in a team where all members have different skills and potentially
    need to work on the same/similar files. Out of the following list, which would
    be the most helpful for the team?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prefabs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Version Control
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicating files offline
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Everyone working in separate folders
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The following code is a section of a delegate system where a piece of code can
    subscribe to. However, it is not possible to have delegates exposed in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A sample of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: What would work as a good equivalent and expose its fields in the **Inspector**?
  prefs: []
  type: TYPE_NORMAL
- en: Adding `System.Serializable` above the `scripts` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Swapping out the delegate for a Unity Event system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make delegates private and add a `SerializeField` attribute to them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This can't be done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are working on a game with multiple levels. Each level has its own scene;
    it has been requested that when levels are changed, the content needs to remain
    in the scene as persistent data. But when the game closes, all data is wiped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the easiest way of carrying information from one scene to another and
    wiping its content when done?
  prefs: []
  type: TYPE_NORMAL
- en: Add a GameObject to the Hierarchy with a component attached with all saved data.
    Then, add a `DontDestroyOnLoad()` function to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `PlayerPrefs` to store all data and then, when the game quits, call `PlayerPrefs.DeleteAll()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `PlayerPrefs` to store scene data, then when a new level loads, copy the
    `PlayerPrefs` data to a new PlayerPrefs data and delete the previous level's PlayerPrefs
    data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the GameObjects, then, when a new scene loads, paste the stored GameObjects
    into the new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the artists keeps noticing the swimmer in a game isn't swimming smoothly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is some sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: What can you do to help remedy this issue?
  prefs: []
  type: TYPE_NORMAL
- en: Change `FixedUpdate` to `Update`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignore the artist; it seems fine to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Condense `if` statements from two to just one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the two `if` statements into a method and apply it to `FixedUpdate()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
