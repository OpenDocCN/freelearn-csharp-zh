["```cs\ninternal record CategoryFiltered();\n```", "```cs\nnamespace LoggingSamples.Categories\n{\n    public class MyCategoryAlert\n    {\n    }\n}\n```", "```cs\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"CategoryFiltered\": \"Information\",\n      \"LoggingSamples.Categories.MyCategoryAlert\": \"Debug\"\n    }\n  }\n```", "```cs\n{\n  \"Logging\": {      // Default, all providers.\n    \"LogLevel\": {\n      \"Microsoft\": \"Warning\"\n    },\n    \"Console\": { // Console provider.\n      \"LogLevel\": {\n        \"Microsoft\": \"Information\"\n      }\n    }\n  }\n}\n```", "```cs\napp.MapGet(\"/first-log\", (ILogger<CategoryFiltered> loggerCategory, ILogger<MyCategoryAlert> loggerAlertCategory) =>\n{\n    loggerCategory.LogInformation(\"I'm information \n      {MyName}\", \"My Name Information\");\n    loggerAlertCategory.LogInformation(\"I'm information\n      {MyName}\", \"Alert Information\");\n    return Results.Ok();\n})\n.WithName(\"GetFirstLog\");\n```", "```cs\nstring apples = \"apples\";\nstring pears = \"pears\";\nstring bananas = \"bananas\";\nlogger.LogInformation(\"My fruit box has: {pears}, {bananas}, {apples}\", apples, pears, bananas);\n```", "```cs\nMy fruit box has: apples, pears, bananas\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddW3CLogging(logging =>\n{\n    logging.LoggingFields = W3CLoggingFields.All;\n});\nvar app = builder.Build();\napp.UseW3CLogging();\napp.MapGet(\"/first-w3c-log\", (IWebHostEnvironment webHostEnvironment) =>\n{\n    return Results.Ok(new { PathToWrite = \n      webHostEnvironment.ContentRootPath });\n})\n.WithName(\"GetW3CLog\");\n```", "```cs\n#Version: 1.0\n#Start-Date: 2022-01-03 10:34:15\n#Fields: date time c-ip cs-username s-computername s-ip s-port cs-method cs-uri-stem cs-uri-query sc-status time-taken cs-version cs-host cs(User-Agent) cs(Cookie) cs(Referer)\n```", "```cs\nlogger.LogInformation($\"I'm {person.Name}-{person.Surname}\")\n```", "```cs\nlogger.LogInformation(\"I'm {Name}-{Surname} with {Age}\", person.Name, person.Surname);\n```", "```cs\npublic partial class LogGenerator\n    {\n        private readonly ILogger<LogGeneratorCategory> \n          _logger;\n        public LogGenerator(ILogger<LogGeneratorCategory>\n          logger)\n        {\n            _logger = logger;\n        }\n        [LoggerMessage(\n            EventId = 100,\n            EventName = \"Start\",\n            Level = LogLevel.Debug,\n            Message = \"Start Endpoint: {endpointName} with\n              data {dataIn}\")]\n        public partial void StartEndpointSignal(string \n          endpointName, object dataIn);\n        [LoggerMessage(\n           EventId = 101,\n           EventName = \"StartFiltered\",\n           Message = \"Log level filtered: {endpointName} \n             with data {dataIn}\")]\n        public partial void LogLevelFilteredAtRuntime(\n          LogLevel, string endpointName, object dataIn);\n    }\n    public class LogGeneratorCategory { }\n```", "```cs\napp.MapPost(\"/start-log\", (PostData data, LogGenerator logGenerator) =>\n{\n    logGenerator.StartEndpointSignal(\"start-log\", data);\n    logGenerator.LogLevelFilteredAtRuntime(LogLevel.Trace,\n      \"start-log\", data);\n})\n.WithName(\"StartLog\");\ninternal record PostData(DateTime Date, string Name);\n```", "```cs\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Extensions.Logging.Generators\", \"6.0.5.2210\")]\n        public partial void LogLevelFilteredAtRuntime(\n          global::Microsoft.Extensions.Logging.LogLevel \n          logLevel, global::System.String endpointName,\n          global::System.Object dataIn)\n        {\n            if (_logger.IsEnabled(logLevel))\n            {\n                _logger.Log(\n                    logLevel,\n                    new global::Microsoft.Extensions.\n                     Logging.EventId(101, \"StartFiltered\"),\n                    new __LogLevelFilteredAtRuntimeStruct(\n                      endpointName, dataIn),\n                    null,\n                      __LogLevelFilteredAtRuntimeStruct.\n                          Format);\n            }\n        }\n```", "```cs\nbuilder.Logging.AddJsonConsole(options =>\n        options.JsonWriterOptions = new JsonWriterOptions()\n        {\n            Indented = true\n        });\n```", "```cs\napp.MapGet(\"/first-log\", (ILogger<CategoryFiltered> loggerCategory, ILogger<MyCategoryAlert> loggerAlertCategory) =>\n{\n    loggerCategory.LogInformation(\"I'm information \n      {MyName}\", \"My Name Information\");\n    loggerCategory.LogDebug(\"I'm debug {MyName}\",\n      \"My Name Debug\");\n    loggerCategory.LogInformation(\"I'm debug {Data}\", \n      new PayloadData(\"CategoryRoot\", \"Debug\"));\n    loggerAlertCategory.LogInformation(\"I'm information \n      {MyName}\", \"Alert Information\");\n    loggerAlertCategory.LogDebug(\"I'm debug {MyName}\",\n      \"Alert Debug\");\n    var p = new PayloadData(\"AlertCategory\", \"Debug\");\n    loggerAlertCategory.LogDebug(\"I'm debug {Data}\", p);\n    return Results.Ok();\n})\n.WithName(\"GetFirstLog\");\n```", "```cs\nvar p = new PayloadData(\"AlertCategory\", \"Debug\");\nloggerAlertCategory.LogDebug(\"I'm debug {Data}\", p);\n```", "```cs\npublic class FileLoggerConfiguration\n{\n        public int EventId { get; set; }\n        public string PathFolderName { get; set; } = \n          \"logs\";\n        public bool IsRollingFile { get; set; }\n}\n```", "```cs\n    public class FileLogger : ILogger\n    {\n        private readonly string name;\n        private readonly Func<FileLoggerConfiguration> \n          getCurrentConfig;\n        public FileLogger(string name,\n          Func<FileLoggerConfiguration> getCurrentConfig)\n        {\n            this.name = name;\n            this.getCurrentConfig = getCurrentConfig;\n        }\n        public IDisposable BeginScope<TState>(TState state)\n          => default!;\n        public bool IsEnabled(LogLevel logLevel) => true;\n        public void Log<TState>(LogLevel logLevel, EventId\n          , TState state, Exception? exception, \n          Func<TState, Exception?, string> formatter)\n        {\n            if (!IsEnabled(logLevel))\n            {\n                return;\n            }\n            var config = getCurrentConfig();\n            if (config.EventId == 0 || config.EventId ==\n                eventId.Id)\n            {\n                string line = $\"{name} - {formatter(state,\n                  exception)}\";\n                string fileName = config.IsRollingFile ? \n                  RollingFileName : FullFileName;\n                string fullPath = Path.Combine(\n                  config.PathFolderName, fileName);\n                File.AppendAllLines(fullPath, new[] { line });\n            }\n        }\n        private static string RollingFileName => \n          $\"log-{DateTime.UtcNow:yyyy-MM-dd}.txt\";\n        private const string FullFileName = \"logs.txt\";\n    }\n```", "```cs\npublic class FileLoggerProvider : ILoggerProvider\n{\n    private readonly IDisposable onChangeToken;\n    private FileLoggerConfiguration currentConfig;\n    private readonly ConcurrentDictionary<string,\n      FileLogger> _loggers = new();\n    public FileLoggerProvider(\n      IOptionsMonitor<FileLoggerConfiguration> config)\n    {\n        currentConfig = config.CurrentValue;\n        CheckDirectory();\n        onChangeToken = config.OnChange(updateConfig =>\n        {\n            currentConfig = updateConfig;\n            CheckDirectory();\n        });\n    }\n    public ILogger CreateLogger(string categoryName)\n    {\n        return _loggers.GetOrAdd(categoryName, name => new \n          FileLogger(name, () => currentConfig));\n    }\n    public void Dispose()\n    {\n        _loggers.Clear();\n        onChangeToken.Dispose();\n    }\n    private void CheckDirectory()\n    {\n        if (!Directory.Exists(currentConfig.PathFolderName))\n            Directory.CreateDirectory(currentConfig.\n            PathFolderName);\n    }\n}\n```", "```cs\npublic static class FileLoggerExtensions\n    {\n        public static ILoggingBuilder AddFile(\n        this ILoggingBuilder builder)\n        {\n            builder.AddConfiguration();\n           builder.Services.TryAddEnumerable(\n             ServiceDescriptor.Singleton<ILoggerProvider,\n             FileLoggerProvider>());\n            LoggerProviderOptions.RegisterProviderOptions<\n              FileLoggerConfiguration, FileLoggerProvider>\n              (builder.Services);\n            return builder;\n        }\n        public static ILoggingBuilder AddFile(\n            this ILoggingBuilder builder,\n            Action<FileLoggerConfiguration> configure)\n        {\n            builder.AddFile();\n            builder.Services.Configure(configure);\n            return builder;\n        }\n    }\n```", "```cs\nbuilder.Logging.AddFile(configuration =>\n{\n    configuration.PathFolderName = Path.Combine(\n      builder.Environment.ContentRootPath, \"logs\");\n    configuration.IsRollingFile = true;\n});\n```", "```cs\n<PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.20.0\" />\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddApplicationInsightsTelemetry();\nbuilder.Logging.AddApplicationInsights();\n```", "```cs\n\"ApplicationInsights\": {\n    \"InstrumentationKey\": \"your-key\"\n  },\n```", "```cs\n<PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.20.0\" />\n<PackageReference Include=\"Serilog.AspNetCore\" Version=\"4.1.0\" />\n<PackageReference Include=\"Serilog.Settings.Configuration\" Version=\"3.3.0\" />\n<PackageReference Include=\"Serilog.Sinks.ApplicationInsights\" Version=\"3.1.0\" />\n```", "```cs\n\"Serilog\": {\n    \"Using\": [ \"Serilog.Sinks.Console\",\n      \"Serilog.Sinks.ApplicationInsights\" ],\n    \"MinimumLevel\": \"Verbose\",\n    \"WriteTo\": [\n      { \"Name\": \"Console\" },\n      {\n        \"Name\": \"ApplicationInsights\",\n        \"Args\": {\n          \"restrictedToMinimumLevel\": \"Information\",\n          \"telemetryConverter\": \"Serilog.Sinks.\n           ApplicationInsights.Sinks.ApplicationInsights.\n           TelemetryConverters.TraceTelemetryConverter, \n           Serilog.Sinks.ApplicationInsights\"\n        }\n      }\n    ],\n    \"Enrich\": [ \"FromLogContext\"],   \n    \"Properties\": {\n      \"Application\": \"MinimalApi.Packt\"\n    }\n  }\n```", "```cs\nusing Microsoft.ApplicationInsights.Extensibility;\nusing Serilog;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Logging.AddSerilog();\nbuilder.Services.AddApplicationInsightsTelemetry();\nvar app = builder.Build();\nLog.Logger = new LoggerConfiguration()\n.WriteTo.ApplicationInsights(app.Services.GetRequiredService<TelemetryConfiguration>(), TelemetryConverter.Traces)\n.CreateLogger();\n```", "```cs\napp.MapGet(\"/serilog\", (ILogger<CategoryFiltered> loggerCategory) =>\n{\n    loggerCategory.LogInformation(\"I'm {@Person}\", new\n      Person(\"Andrea\", \"Tosato\", new DateTime(1986, 11, \n      9)));\n    return Results.Ok();\n})\n.WithName(\"GetFirstLog\");\ninternal record Person(string Name, string Surname, DateTime Birthdate);\n```"]