- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Blazor WebAssembly
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 简介
- en: '**Blazor WebAssembly** is Microsoft’s new **single-page application** (**SPA**)
    framework for building interactive web applications on **.NET Framework**. Since
    it is built on .NET Framework, Blazor WebAssembly allows you to run C# code on
    the client as well as the server. Therefore, instead of being forced to write
    **JavaScript** on the client, we can now use C# everywhere.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blazor WebAssembly** 是微软为在 **.NET Framework** 上构建交互式 Web 应用程序而推出的新 **单页应用程序**（SPA）框架。由于它基于
    .NET Framework，Blazor WebAssembly 允许您在客户端和服务器上运行 C# 代码。因此，我们不再被迫在客户端编写 **JavaScript**，现在我们可以到处使用
    C#。'
- en: Blazor is red hot!
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Blazor 火热非凡！
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Run C# on the client.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在客户端运行 C#。
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Goodbye, JavaScript!
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 再见，JavaScript！
- en: In this chapter, we will explain the benefits of using the **Blazor** framework.
    We will introduce the three different Blazor hosting models and discuss both the
    advantages and disadvantages of each of them. Also, we will discuss the goals
    of **WebAssembly** and share where it is supported. Finally, we will guide you
    through the process of setting up your computer to complete the projects in this
    book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解释使用 **Blazor** 框架的好处。我们将介绍三种不同的 Blazor 主机模型，并讨论每个模型的优缺点。此外，我们还将讨论 **WebAssembly**
    的目标，并分享其支持情况。最后，我们将指导您设置计算机以完成本书中的项目。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Benefits of using the Blazor framework
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Blazor 框架的好处
- en: 'Hosting models:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机模型：
- en: '**Blazor Server**'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Server**'
- en: '**Blazor Hybrid**'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Hybrid**'
- en: Blazor WebAssembly
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor WebAssembly
- en: Differences between the Blazor hosting models
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor 主机模型之间的区别
- en: What is **WebAssembly**?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 **WebAssembly**？
- en: Setting up your PC
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的 PC
- en: Benefits of using the Blazor framework
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Blazor 框架的好处
- en: Using the Blazor framework offers several benefits. For starters, it is a free
    and open-source framework built on Microsoft’s robust and mature .NET Framework.
    Also, it is a SPA framework that uses **Razor** syntax and can be developed using
    Microsoft’s exceptional tooling. Finally, Microsoft is actively supporting and
    updating the Blazor framework. Let’s examine each of these benefits in detail
    in the following sections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Blazor 框架提供了几个好处。首先，它是一个基于微软强大且成熟的 .NET Framework 的免费和开源框架。此外，它是一个使用 **Razor**
    语法并可以使用微软卓越的工具开发的 SPA 框架。最后，微软正在积极支持和更新 Blazor 框架。让我们在接下来的部分中详细检查这些好处。
- en: .NET Framework
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Framework
- en: The Blazor framework is built on .NET Framework. Therefore, anyone familiar
    with .NET Framework can quickly become productive using the Blazor framework.
    The Blazor framework leverages the robust ecosystem of .NET libraries and NuGet
    packages from .NET Framework. Also, since the code for both the client and server
    can be written in C#, the client and server can share code and libraries. For
    example, the client and server can share the application logic used for data validation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 框架建立在 .NET Framework 之上。因此，熟悉 .NET Framework 的人可以快速使用 Blazor 框架变得高效。Blazor
    框架利用了 .NET Framework 的强大生态系统，包括 .NET 库和 NuGet 包。此外，由于客户端和服务器都可以用 C# 编写代码，因此客户端和服务器可以共享代码和库。例如，客户端和服务器可以共享用于数据验证的应用程序逻辑。
- en: Open source
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源
- en: The Blazor framework is open source. Since Blazor is a feature of the **ASP.NET**
    framework, all the source code for Blazor is available on GitHub as part of the
    `dotnet/aspnetcore` repository, which is owned by the **.NET Foundation**. The
    .NET Foundation is an independent, non-profit organization established to support
    the innovative, commercially friendly, open-source ecosystem around the .NET platform.
    The .NET platform has a strong community of over 100,000 contributions from more
    than 3,700 companies.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 框架是开源的。由于 Blazor 是 **ASP.NET** 框架的一个功能，因此 Blazor 的所有源代码都可在 GitHub 上找到，作为
    `dotnet/aspnetcore` 仓库的一部分，该仓库由 **.NET Foundation** 管理。.NET Foundation 是一个独立的、非盈利的组织，旨在支持围绕
    .NET 平台的创新、商业友好型开源生态系统。.NET 平台拥有一个强大的社区，超过 3,700 家公司贡献了超过 100,000 次的贡献。
- en: Since .NET Framework is free, this means that Blazor is also free. There are
    no fees or licensing costs associated with using Blazor, including for commercial
    use.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 .NET Framework 是免费的，这意味着 Blazor 也是免费的。使用 Blazor，包括商业用途，没有任何费用或许可费用。
- en: SPA framework
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPA 框架
- en: The Blazor framework is a SPA framework. As the name implies, a SPA is a web
    app that consists of a single page. The application dynamically rewrites the areas
    of the page that have changed instead of loading an entirely new page in response
    to each UI update. The goal is faster transitions that make the web app feel more
    like a native app.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 框架是一个单页应用（SPA）框架。正如其名所示，SPA 是由单个页面组成的网页应用。应用会动态重写页面中已更改的区域，而不是在每次 UI
    更新时加载全新的页面。目标是实现更快的转换，使网页应用感觉更像原生应用。
- en: When a page is rendered, Blazor creates a render tree that is a graph of the
    components on the page. It is like the **Document Object Model** (**DOM**) created
    by the browser. However, it is a virtual DOM. Updates to the UI are applied to
    the virtual DOM and only the differences between the DOM and the virtual DOM are
    rendered by the browser.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面渲染时，Blazor 会创建一个渲染树，这是一个页面组件的图。它就像浏览器创建的 **文档对象模型**（**DOM**）。然而，它是一个虚拟 DOM。UI
    的更新应用于虚拟 DOM，并且只有 DOM 和虚拟 DOM 之间的差异会被浏览器渲染。
- en: Razor syntax
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Razor 语法
- en: '**Razor** is the ASP.NET view engine used to create dynamic web pages with
    C#. Razor is a syntax for combining HTML markup with C# code that was designed
    for developer productivity. It allows the developer to use both HTML markup and
    C# in the same file.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Razor** 是用于使用 C# 创建动态网页的 ASP.NET 视图引擎。Razor 是一种将 HTML 标记与 C# 代码结合的语法，旨在提高开发者的生产力。它允许开发者在同一文件中使用
    HTML 标记和 C#。'
- en: Blazor web apps are built using **Razor components**. Razor components are reusable
    UI elements that contain C# code, markup, and other Razor components. Razor components
    are quite literally the building blocks of the Blazor framework. For more information
    on Razor components, refer to *Chapter 2*, *Building Your First Blazor WebAssembly
    Application*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 网页应用使用 **Razor 组件** 构建。Razor 组件是包含 C# 代码、标记和其它 Razor 组件的可重用 UI 元素。Razor
    组件可以说是 Blazor 框架的基石。有关 Razor 组件的更多信息，请参阅 *第 2 章*，*构建您的第一个 Blazor WebAssembly 应用程序*。
- en: '**IMPORTANT NOTE**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: '**Razor Pages** and **MVC** also use the Razor syntax. Unlike Razor Pages and
    MVC, which render the whole page, Razor components only render the DOM changes.
    One way to easily distinguish between them is that Razor components use the `RAZOR`
    file extension, while both MVC and Razor Pages use the `CSHTML` file extension.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Razor Pages** 和 **MVC** 也使用 Razor 语法。与渲染整个页面的 Razor Pages 和 MVC 不同，Razor
    组件只渲染 DOM 变更。区分它们的一种简单方法是，Razor 组件使用 `RAZOR` 文件扩展名，而 MVC 和 Razor Pages 使用 `CSHTML`
    文件扩展名。'
- en: The name of the Blazor framework has an interesting origin story. The term *Blazor*
    is a combination of the word *browser* and the word *razor*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 框架的名称有一个有趣的起源故事。术语 *Blazor* 是由单词 *browser* 和单词 *razor* 组合而成的。
- en: Awesome tooling
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精彩的工具集
- en: You can use either **Microsoft Visual Studio** or **Microsoft Visual Studio
    Code** to develop Blazor applications. Microsoft Visual Studio is an **integrated
    development environment** (**IDE**), while Microsoft Visual Studio Code is a lightweight,
    yet powerful, editor. They are both incredible tools for building enterprise applications.
    As an added bonus, there are versions of both tools that are available for free.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 **Microsoft Visual Studio** 或 **Microsoft Visual Studio Code** 来开发 Blazor
    应用程序。Microsoft Visual Studio 是一个 **集成开发环境**（**IDE**），而 Microsoft Visual Studio
    Code 是一个轻量级但功能强大的编辑器。它们都是构建企业应用的绝佳工具。作为额外的好处，这两个工具都有免费版本。
- en: Supported by Microsoft
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 由微软支持
- en: 'Although the Blazor framework is open source, it is maintained by Microsoft.
    They continue to make large investments in the future of Blazor. The following
    list includes features that Microsoft is actively working on adding to Blazor:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Blazor框架是开源的，但它由微软维护。他们继续对Blazor的未来进行大量投资。以下列表包括微软正在积极开发并添加到Blazor中的功能：
- en: Hot reload improvements
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热重载改进
- en: '**Ahead-of-time** (**AOT**) compilation performance improvements'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提前编译**（**AOT**）编译性能改进'
- en: Authentication improvements
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证改进
- en: Additional built-in components
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外的内置组件
- en: Multithreading
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多线程
- en: There are many benefits associated with using the Blazor framework to develop
    web applications. Since it is built on .NET Framework, it enables developers to
    use the skills, such as C#, and the tools, such as Visual Studio, that they have
    already mastered. Also, since it is a SPA framework, Blazor web apps feel like
    native apps to the user. Finally, Microsoft is making a large investment in the
    future of Blazor.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Blazor 框架开发 Web 应用程序有许多相关的好处。由于它建立在 .NET 框架之上，它使开发者能够使用他们已经掌握的技能，如 C#，以及他们已经熟悉的工具，如
    Visual Studio。此外，由于它是一个 SPA 框架，Blazor Web 应用对用户来说感觉就像原生应用程序。最后，微软正在对 Blazor 的未来进行大量投资。
- en: Hosting models
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机模型
- en: As we mentioned earlier, Razor components are the building blocks of Blazor
    applications. Where those Razor components are hosted varies depending on the
    hosting model.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Razor 组件是 Blazor 应用程序的基本构建块。这些 Razor 组件托管的位置取决于主机模型。
- en: 'Blazor has three different hosting models:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 有三种不同的主机模型：
- en: Blazor Server
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor Server
- en: Blazor Hybrid
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor Hybrid
- en: Blazor WebAssembly
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor WebAssembly
- en: The first hosting model that Microsoft released was Blazor Server. In this hosting
    model, the Razor components are executed on the server. The second hosting model
    that Microsoft released, and the topic of this book, is Blazor WebAssembly. In
    this hosting model, the Razor components are executed on the browser using WebAssembly.
    The newest hosting model is Blazor Hybrid. Blazor Hybrid allows you to build native
    client apps by hosting the Razor components in an embedded Web View control.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 微软发布的第一个主机模型是 Blazor Server。在此主机模型中，Razor 组件在服务器上执行。微软发布的第二个主机模型，也是本书的主题，是 Blazor
    WebAssembly。在此主机模型中，Razor 组件使用 WebAssembly 在浏览器上执行。最新的主机模型是 Blazor Hybrid。Blazor
    Hybrid 允许您通过在嵌入的 Web View 控件中托管 Razor 组件来构建原生客户端应用程序。
- en: Each hosting model has its own advantages and disadvantages. However, they all
    rely upon the same underlying architecture. Therefore, it is possible to write
    and test your code independently of the hosting model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每种主机模型都有其自身的优缺点。然而，它们都依赖于相同的底层架构。因此，可以独立于主机模型编写和测试代码。
- en: The major differences between the hosting models concern where the code executes,
    latency, security, payload size, and offline support. The one thing that all the
    hosting models have in common is the ability to execute at near native speed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 主机模型之间的主要区别在于代码的执行位置、延迟、安全性、有效负载大小和离线支持。所有主机模型共同的一点是它们都能以接近原生速度执行。
- en: Blazor Server
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor Server
- en: As we just mentioned, the Blazor Server hosting model was the first hosting
    model released by Microsoft. It was released as part of the .NET Core 3 release
    in September 2019.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才提到的，Blazor Server 主机模型是微软发布的第一个主机模型。它于 2019 年 9 月作为 .NET Core 3 版本的一部分发布。
- en: 'The following diagram illustrates the Blazor Server hosting model:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了 Blazor Server 主机模型：
- en: '![](img/B18471_01_01.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18471_01_01.png)'
- en: 'Figure 1.1: Blazor Server'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Blazor Server
- en: In this hosting model, the web app is executed on the server and only updates
    to the UI are sent to the client’s browser. The browser is treated as a thin client
    and all the processing occurs on the server. Therefore, this model requires a
    constant connection to the server. When using Blazor Server, UI updates, event
    handling, and JavaScript calls are all handled over an ASP.NET Core **SignalR**
    connection.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在此主机模型中，Web 应用在服务器上执行，并且只有 UI 更新发送到客户端浏览器。浏览器被视为瘦客户端，所有处理都在服务器上完成。因此，此模型需要与服务器保持持续连接。当使用
    Blazor Server 时，UI 更新、事件处理和 JavaScript 调用都是通过 ASP.NET Core **SignalR** 连接来处理的。
- en: '**IMPORTANT NOTE**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: SignalR is a software library that allows the web server to push real-time notifications
    to the browser. Blazor Server uses it to send UI updates to the browser.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SignalR 是一个软件库，允许 Web 服务器向浏览器推送实时通知。Blazor Server 使用它将 UI 更新发送到浏览器。
- en: Advantages of Blazor Server
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blazor Server 的优势
- en: There are a few advantages of using Blazor Server versus using Blazor WebAssembly.
    However, the key advantage is that everything happens on the server. Since the
    web app runs on the server, it has access to everything on the server. As a result,
    security and data access are simplified. Also, since everything happens on the
    server, the assemblies (DLLs) that contain the web app’s code remain on the server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 Blazor WebAssembly 相比，使用 Blazor Server 有一些优势。然而，关键优势是所有操作都在服务器上完成。由于 Web
    应用在服务器上运行，它可以访问服务器上的所有内容。因此，安全和数据访问得到了简化。此外，由于所有操作都在服务器上完成，包含 Web 应用代码的程序集（DLL）也保留在服务器上。
- en: Another advantage of using Blazor Server is that it can run on thin clients
    and older browsers, such as Internet Explorer, that do not support WebAssembly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Blazor Server 的另一个优势是它可以在不支持 WebAssembly 的瘦客户端和旧浏览器（如 Internet Explorer）上运行。
- en: Finally, the initial load time for the first use of a web app that is using
    Blazor Server can be much less than that of a web app that is using Blazor WebAssembly
    because there are much fewer files to download.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 Blazor Server 的网络应用在首次使用时的初始加载时间可以远小于使用 Blazor WebAssembly 的网络应用，因为需要下载的文件要少得多。
- en: Disadvantages of Blazor Server
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blazor Server 的缺点
- en: The Blazor Server hosting model has several disadvantages versus Blazor WebAssembly.
    The biggest disadvantage is that the browser must maintain a constant connection
    to the server. Since there is no offline support, every single user interaction
    requires a network roundtrip. As a result of all these roundtrips, Blazor Server
    web apps have higher latency than Blazor WebAssembly web apps and can feel sluggish.
    Also, network interruptions may cause a client to unexpectedly disconnect.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Blazor WebAssembly 相比，Blazor Server 托管模型有几个缺点。最大的缺点是浏览器必须保持与服务器的一致连接。由于没有离线支持，每次用户交互都需要网络往返。由于所有这些往返，Blazor
    Server 网络应用的延迟比 Blazor WebAssembly 网络应用高，可能会感觉响应缓慢。此外，网络中断可能导致客户端意外断开连接。
- en: '**TIP**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Latency is the time between the UI action and the time when the UI is updated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟是 UI 操作与 UI 更新时间之间的时间。
- en: Another disadvantage of using Blazor Server is that it relies on SignalR for
    every single UI update. Microsoft’s support for SignalR has been improving, but
    it can be challenging to scale. When too many concurrent connections to the server
    are open, connection exhaustion can prevent other clients from establishing new
    connections.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Blazor Server 的另一个缺点是它依赖于 SignalR 进行每个 UI 更新。微软对 SignalR 的支持正在改善，但扩展可能具有挑战性。当打开到服务器的并发连接太多时，连接耗尽可能会阻止其他客户端建立新的连接。
- en: Finally, a Blazor Server web app must be served from an **ASP.NET Core** **server**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Blazor Server 网络应用必须从 **ASP.NET Core** **服务器**上提供服务。
- en: Blazor Hybrid
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor Hybrid
- en: The Blazor Hybrid hosting model is the most recent hosting model released by
    Microsoft. It was released as part of the .NET 6 release in November 2021.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor Hybrid 托管模型是微软最近发布的托管模型。它于 2021 年 11 月作为 .NET 6 发布的一部分发布。
- en: 'The following diagram illustrates the Blazor Hybrid hosting model:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示说明了 Blazor Hybrid 托管模型：
- en: '![](img/B18471_01_02.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18471_01_02.png)'
- en: 'Figure 1.2: Blazor Hybrid'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：Blazor Hybrid
- en: In this model, the Razor components run in an embedded Web View control. Blazor
    Hybrid apps include Windows Forms, WPF, and .NET MAUI apps. By using the Blazor
    Hybrid hosting model, your apps have full access to the native capabilities of
    the devices that you choose to target.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模型中，Razor 组件在嵌入的 Web View 控件中运行。Blazor Hybrid 应用包括 Windows Forms、WPF 和 .NET
    MAUI 应用。通过使用 Blazor Hybrid 托管模型，您的应用可以完全访问您选择的目标设备的原生功能。
- en: Advantages of Blazor Hybrid
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blazor Hybrid 的优势
- en: The advantage of using this model versus Blazor WebAssembly is that it does
    not require WebAssembly. Also, since the component’s C# code is executed in the
    host process, the Blazor Hybrid apps have access to the native capabilities of
    the device.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Blazor WebAssembly 相比，使用此模型的优势在于它不需要 WebAssembly。此外，由于组件的 C# 代码在宿主进程中执行，Blazor
    Hybrid 应用可以访问设备的原生功能。
- en: Disadvantages of Blazor Hybrid
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blazor Hybrid 的缺点
- en: The major disadvantage of using Blazor Hybrid is that they are hosted in a Web
    View component in the native app. So, the developer must know how to develop each
    type of native client app that they want to target. Another disadvantage is that
    they usually require a server to deliver the app. In contrast, a Blazor WebAssembly
    app can be downloaded as a set of static files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Blazor Hybrid 的主要缺点是它们在原生应用中的 Web View 组件中托管。因此，开发者必须知道如何开发他们想要针对的每种类型的原生客户端应用。另一个缺点是它们通常需要一个服务器来交付应用。相比之下，Blazor
    WebAssembly 应用可以作为一组静态文件下载。
- en: Blazor WebAssembly
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor WebAssembly
- en: The Blazor WebAssembly hosting model is the topic of this book.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 托管模型是本书的主题。
- en: '**Blazor WebAssembly 3.2.0** was released in May 2020\. **Blazor WebAssembly
    in .NET 5** was released as part of the **.NET 5.0** release in November 2020\.
    **ASP.NET Core Blazor** was released as part of the .NET 6.0 release in November
    2021, and it is a **long-term support** (**LTS**) release. The most recent release
    of Blazor WebAssembly was released as part of the .NET 7 release in November 2022
    This book will be using **Blazor WebAssembly in .NET 7** for all the projects.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blazor WebAssembly 3.2.0** 于 2020 年 5 月发布。**.NET 5 中的 Blazor WebAssembly**
    是作为 **.NET 5.0** 发布的一部分在 2020 年 11 月发布的。**ASP.NET Core Blazor** 是作为 .NET 6.0 发布的一部分在
    2021 年 11 月发布的，它是一个 **长期支持**（**LTS**）版本。Blazor WebAssembly 的最新版本是作为 .NET 7 发布的一部分在
    2022 年 11 月发布的。本书将使用 **.NET 7 中的 Blazor WebAssembly** 用于所有项目。'
- en: '**TIP**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: LTS releases are supported by Microsoft for at least 3 years after their initial
    release. Blazor WebAssembly in .NET 7 is a current release rather than an LTS
    release. Current releases get free support and patches for 18 months. We recommend
    that if you are starting a new project with Blazor WebAssembly, you should use
    the most recent release.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: LTS 版本在初始发布后至少由微软支持 3 年。.NET 7 中的 Blazor WebAssembly 是一个当前版本，而不是 LTS 版本。当前版本将获得
    18 个月的免费支持和补丁。我们建议，如果你正在使用 Blazor WebAssembly 开发一个新项目，你应该使用最新的版本。
- en: 'The following diagram illustrates the Blazor WebAssembly hosting model:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了 Blazor WebAssembly 托管模型：
- en: '![Graphical user interface, diagram, application  Description automatically
    generated](img/B18471_01_03.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，图表，应用描述自动生成](img/B18471_01_03.png)'
- en: 'Figure 1.3: Blazor WebAssembly'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：Blazor WebAssembly
- en: In this hosting model, the web app is executed on the browser. For both the
    web app and the .NET runtime to run on the browser, the browser must support WebAssembly.
    WebAssembly is a web standard supported by all modern browsers, including mobile
    browsers. While Blazor WebAssembly itself does not require a server, the web app
    may require one for data access and authentication.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种托管模型中，Web 应用在浏览器上执行。为了使 Web 应用和 .NET 运行时在浏览器上运行，浏览器必须支持 WebAssembly。WebAssembly
    是所有现代浏览器（包括移动浏览器）支持的网络标准。虽然 Blazor WebAssembly 本身不需要服务器，但 Web 应用可能需要服务器进行数据访问和身份验证。
- en: In the past, the only way to run C# code on the browser was to use a plugin,
    such as **Silverlight**. Silverlight was a free browser plugin provided by Microsoft.
    It was very popular until Apple decided to forbid the use of any browser plugins
    on iOS. As a result of Apple’s decision, Silverlight was abandoned by Microsoft.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，在浏览器上运行 C# 代码的唯一方法是使用插件，例如 **Silverlight**。Silverlight 是微软提供的一个免费浏览器插件。它非常受欢迎，直到苹果决定禁止在
    iOS 上使用任何浏览器插件。由于苹果的决定，微软放弃了 Silverlight。
- en: '**IMPORTANT NOTE**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Blazor does not rely on plugins or recompiling the code into other languages.
    Instead, it is based on open web standards and is supported by all modern browsers,
    including mobile browsers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 不依赖于插件或重新编译代码到其他语言。相反，它基于开放的 Web 标准，并受到所有现代浏览器（包括移动浏览器）的支持。
- en: Advantages of Blazor WebAssembly
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 的优势
- en: Blazor WebAssembly has many advantages. First, since it runs on the browser,
    it relies on client resources instead of server resources. Therefore, the processing
    is offloaded to the client. Also, unlike Blazor Server, there is no latency due
    to each UI interaction requiring a roundtrip to the server.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 有许多优势。首先，由于它在浏览器上运行，它依赖于客户端资源而不是服务器资源。因此，处理工作被卸载到客户端。此外，与
    Blazor Server 不同，由于每个 UI 交互都需要往返服务器，因此没有延迟。
- en: Blazor WebAssembly can be used to create a **Progressive Web App** (**PWA**).
    A PWA is a web app that looks and feels like a native application. They provide
    offline functionality, background activity, native API layers, and push notifications.
    They can even be listed in the various app stores. By configuring your Blazor
    WebAssembly app as a PWA, your app can reach anyone, anywhere, on any device with
    a single code base. For more information on creating a PWA, refer to *Chapter
    6*, *Building a Weather App as a Progressive Web App (PWA)*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 可以用来创建 **渐进式 Web 应用**（**PWA**）。PWA 是看起来和感觉像原生应用的网络应用。它们提供离线功能、后台活动、原生
    API 层和推送通知。它们甚至可以列在各种应用商店中。通过将你的 Blazor WebAssembly 应用配置为 PWA，你的应用可以通过单一代码库在任何设备上触达任何人。有关创建
    PWA 的更多信息，请参阅 *第 6 章*，*作为渐进式 Web 应用（PWA）构建天气应用*。
- en: Finally, a Blazor WebAssembly web app does not rely on an ASP.NET Core server.
    In fact, it is possible to deploy a Blazor WebAssembly web app via a **Content
    Delivery Network** (**CDN**).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Blazor WebAssembly 网页应用程序不依赖于 ASP.NET Core 服务器。实际上，您可以通过内容分发网络（**CDN**）部署
    Blazor WebAssembly 网页应用程序。
- en: Disadvantages of Blazor WebAssembly
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 的缺点
- en: To be fair, there are some disadvantages when using Blazor WebAssembly that
    should be considered. For starters, when using Blazor WebAssembly, the .NET runtime,
    the `dotnet.wasm` file, and your assemblies need to be downloaded to the browser
    for your web app to work. Therefore, the first time you run a Blazor WebAssembly
    application it usually takes longer to initially load than an identical Blazor
    Server application. However, there are strategies that you can use to speed up
    the initial load time, such as deferring the loading of some of the assemblies
    until they are needed. Also, this is only an issue during the initial load since
    subsequent runs of the application will access the files from a local cache.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，使用 Blazor WebAssembly 时存在一些缺点，应该予以考虑。首先，在使用 Blazor WebAssembly 时，.NET 运行时、`dotnet.wasm`
    文件以及您的程序集需要下载到浏览器中才能使您的网页应用程序工作。因此，第一次运行 Blazor WebAssembly 应用程序通常比相同的 Blazor
    Server 应用程序初始加载时间更长。然而，您可以使用一些策略来加快初始加载时间，例如将一些程序集的加载推迟到需要时。此外，这仅是初始加载时的问题，因为应用程序的后续运行将访问来自本地缓存中的文件。
- en: Another disadvantage of Blazor WebAssembly web apps is that they are only as
    powerful as the browser that they run on. Therefore, thin clients are not supported.
    Blazor WebAssembly can only run on a browser that supports WebAssembly. Luckily,
    due to a significant amount of coordination between the **World Wide Web Consortium**
    (**W3C**) and engineers from Apple, Google, Microsoft, and Mozilla, all modern
    browsers support WebAssembly.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 网页应用程序的另一个缺点是它们的强大程度取决于运行的浏览器。因此，不支持瘦客户端。Blazor WebAssembly
    只能在支持 WebAssembly 的浏览器上运行。幸运的是，由于世界 Wide Web Consortium（**W3C**）与苹果、谷歌、微软和 Mozilla
    的工程师之间的大量协调，所有现代浏览器都支持 WebAssembly。
- en: Hosting model differences
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管模型差异
- en: 'The following table indicates the differences between the three models:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了三种模型之间的差异：
- en: '|  | Blazor WebAssembly | Blazor Hybrid | Blazor Server |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|  | Blazor WebAssembly | Blazor Hybrid | Blazor Server |'
- en: '| Native execution speed | X | X | X |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 原生执行速度 | X | X | X |'
- en: '| Executes on client | X | X |  |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 在客户端执行 | X | X |  |'
- en: '| Executes on server |  |  | X |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 在服务器上执行 |  |  | X |'
- en: '| Low latency after initial load time | X | X |  |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 初始加载后低延迟 | X | X |  |'
- en: '| Fast initial load time |  |  | X |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 快速初始加载时间 |  |  | X |'
- en: '| Offline support | X | X |  |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 离线支持 | X | X |  |'
- en: '| Does not require a server | X |  |  |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 不需要服务器 | X |  |  |'
- en: '| Requires constant connection to a server |  |  | X |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 需要持续连接到服务器 |  |  | X |'
- en: '| Can build PWAs | X |  |  |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 可构建 PWA | X |  |  |'
- en: '| Assemblies sent to client | X | X |  |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 将程序集发送到客户端 | X | X |  |'
- en: '| Assembles remain on server |  |  | X |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 程序集保留在服务器上 |  |  | X |'
- en: '| Can access native client features |  | X |  |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 可访问原生客户端功能 |  | X |  |'
- en: '| Requires WebAssembly | X |  |  |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 需要WebAssembly | X |  |  |'
- en: '| Requires SignalR |  |  | X |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 需要SignalR |  |  | X |'
- en: '| Can run on thin clients |  |  | X |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 可在瘦客户端上运行 |  |  | X |'
- en: 'Table 1.1: Hosting model differences'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1：托管模型差异
- en: The Blazor framework provides three different hosting models, Blazor Server,
    Blazor Hybrid, and Blazor WebAssembly. A Blazor Server web app runs on the server
    and uses SignalR to serve the HTML to the browser. A Blazor Hybrid web app runs
    in a Web View control in the native app. A Blazor WebAssembly web app runs directly
    in the browser using WebAssembly. They each have their advantages and disadvantages.
    However, if you want to create interactive, highly responsive, native-like web
    apps that can work offline, we recommend Blazor WebAssembly. Let’s learn more
    about WebAssembly in the next section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 框架提供了三种不同的托管模型，分别是 Blazor Server、Blazor Hybrid 和 Blazor WebAssembly。Blazor
    Server 网页应用程序在服务器上运行，并使用 SignalR 将 HTML 传输到浏览器。Blazor Hybrid 网页应用程序在原生应用程序的 Web
    View 控件中运行。Blazor WebAssembly 网页应用程序直接在浏览器中使用 WebAssembly 运行。它们各自都有其优缺点。然而，如果您想创建交互性强、响应速度快、类似原生的离线可用的网页应用程序，我们推荐使用
    Blazor WebAssembly。接下来，我们将学习更多关于 WebAssembly 的知识。
- en: What is WebAssembly?
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 WebAssembly？
- en: WebAssembly is a binary instruction format that allows code written in high-level
    languages, such as C#, to run on the browser at near-native speed. To run .NET
    binaries in a web browser, it uses a version of the .NET runtime that has been
    compiled to WebAssembly. You can think of it as executing natively compiled code
    in a browser.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly is an open standard developed by a W3C Community Group. It was originally
    announced in 2015, and the first browser that supported it was released in 2017.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly goals
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When WebAssembly was originally being developed, there were four main design
    goals for the project. This is a list of the original goals for WebAssembly:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Fast and efficient
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safe
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t break the web
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebAssembly is fast and efficient. It is designed to allow developers to write
    code in any language that can then be compiled to run in the browser. Since the
    code is compiled, it is fast and performs at near-native speed.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly is safe. It does not allow direct interaction with the browser’s
    DOM. Instead, it runs in its own memory-safe, sandboxed execution environment.
    You must use JavaScript interop to interact with the DOM. The project in *Chapter
    5*, *Building a Local Storage Service Using JavaScript Interoperability (JS interop)*,will
    teach you how to use JavaScript interop.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly is open. Although it is a low-level assembly language, it can be
    edited and debugged by hand.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly didn’t break the web. It is a web standard that is designed to work
    with other web technologies. Also, WebAssembly modules can access the same Web
    APIs that are accessible from JavaScript.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Overall, WebAssembly was able to meet all of the original goals and rapidly
    gained support from all of the modern browsers.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly support
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, WebAssembly runs on all modern browsers, including mobile
    browsers. As you can see from the following table, all current versions of the
    most popular browsers are compatible with WebAssembly:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '| Browser | Version |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| Microsoft Edge | Current |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: '| Mozilla Firefox, including Android | Current |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| Google Chrome, including Android | Current |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| Safari, including iOS | Current |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| Opera, including Android | Current |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| Microsoft Internet Explorer | Not Supported |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: 'Table 1.2: WebAssembly browser compatibility'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Internet Explorer is no longer supported by Microsoft as of June 15,
    2022\. It does not support WebAssembly and will never support WebAssembly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly is a web standard that allows developers to run code written in
    any language in the browser. It is supported by all modern browsers.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the benefits of using the Blazor framework and compared
    the various hosting models, it’s time to start developing using the Blazor WebAssembly
    framework. However, before we can get started, you need to set up your PC.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your PC
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the projects in this book, we use Microsoft Visual Studio Community 2022,
    .NET 7, Microsoft SQL Server 2022 Express Edition, and Microsoft Azure.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中的项目，我们使用 Microsoft Visual Studio Community 2022、.NET 7、Microsoft SQL Server
    2022 Express Edition 和 Microsoft Azure。
- en: All the projects are built using **Microsoft** **Visual Studio Community 2022
    (64-bit) – Current Version** 17.4.2 with the ASP.NET and Web Development workload.
    If you need to install Microsoft Visual Studio Community 2022, follow the directions
    in the *Installing Microsoft Visual Studio Community Edition* section later in
    this chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所有项目都是使用 **Microsoft** **Visual Studio Community 2022 (64 位) – 当前版本** 17.4.2
    以及 ASP.NET 和 Web 开发工作负载构建的。如果您需要安装 Microsoft Visual Studio Community 2022，请遵循本章后面
    *安装 Microsoft Visual Studio Community Edition* 部分的说明。
- en: '**TIP**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Although we are using Microsoft Visual Studio Community 2022, any edition of
    Microsoft Visual Studio 2022 can be used to complete the projects in this book.
    Microsoft Visual Studio Code can also be used. However, all the screenshots are
    from Microsoft Visual Studio Community 2022.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们使用的是 Microsoft Visual Studio Community 2022，但本书中的任何版本的 Microsoft Visual
    Studio 2022 都可以用来完成项目。Microsoft Visual Studio Code 也可以使用。然而，所有截图均来自 Microsoft
    Visual Studio Community 2022。
- en: 'Blazor WebAssembly in .NET 7 requires .NET 7.0\. To determine the version of
    .NET that is running on your computer, open **Command Prompt** and enter the following
    command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 7 中的 Blazor WebAssembly 需要 .NET 7.0。要确定计算机上运行的 .NET 版本，请打开 **命令提示符** 并输入以下命令：
- en: '[PRE0]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If your computer is not running .NET 7.0 or higher, follow the directions in
    the *Installing .NET 7.0* section later in this chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的计算机未运行 .NET 7.0 或更高版本，请遵循本章后面 *安装 .NET 7.0* 部分的说明。
- en: '*Chapters 3* and *10* use Microsoft Azure. *Chapter 3* uses Microsoft Azure
    to publish a Blazor WebAssembly application and *Chapter 10* uses Microsoft Azure
    Active Directory to secure a Blazor WebAssembly application.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*第 3 章* 和 *第 10 章* 使用 Microsoft Azure。*第 3 章* 使用 Microsoft Azure 发布 Blazor
    WebAssembly 应用程序，而 *第 10 章* 使用 Microsoft Azure Active Directory 保护 Blazor WebAssembly
    应用程序。'
- en: The final two projects in this book use **Microsoft** **SQL Server 2022 Express
    Edition** as the backend database. If you need to install Microsoft SQL Server
    Express Edition, follow the directions in the *Installing Microsoft SQL Server
    Express* section later in this chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 本书最后两个项目使用 **Microsoft** **SQL Server 2022 Express Edition** 作为后端数据库。如果您需要安装
    Microsoft SQL Server Express Edition，请遵循本章后面 *安装 Microsoft SQL Server Express*
    部分的说明。
- en: '**TIP**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Although we are using Microsoft SQL Server 2022 Express Edition, any year or
    edition of SQL Server can be used to complete the projects in this book.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们使用的是 Microsoft SQL Server 2022 Express Edition，但任何年份或版本的 SQL Server 都可以用来完成本书中的项目。
- en: Installing Microsoft Visual Studio Community Edition
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Microsoft Visual Studio Community Edition
- en: 'Microsoft Visual Studio Community Edition is the free edition of Microsoft
    Visual Studio. To install Microsoft Visual Studio Community Edition, perform the
    following steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio Community Edition 是 Microsoft Visual Studio 的免费版。要安装
    Microsoft Visual Studio Community Edition，请执行以下步骤：
- en: Download the **Visual Studio installer** from [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com).
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com) 下载
    **Visual Studio 安装程序**。
- en: '![Text  Description automatically generated](img/B18471_01_04.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B18471_01_04.png)'
- en: 'Figure 1.4: Download Visual Studio selector'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：下载 Visual Studio 选择器
- en: Once the download is complete, run the installer to complete the installation.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序以完成安装。
- en: 'During the first step in the installation process, the Visual Studio installer
    will check the system for existing versions of Visual Studio. Once the installer
    has finished checking for installed versions, it will open the following installation
    dialog:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装过程的第一个步骤中，Visual Studio 安装程序将检查系统中现有的 Visual Studio 版本。一旦安装程序完成对已安装版本的检查，它将打开以下安装对话框：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_01_05.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18471_01_05.png)'
- en: 'Figure 1.5: The Visual Studio installer'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：Visual Studio 安装程序
- en: Select the **ASP.NET and web development** workload and click the **Install**
    button to complete the installation.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **ASP.NET 和 Web 开发** 工作负载，然后点击 **安装** 按钮完成安装。
- en: Installing .NET 7.0
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 .NET 7.0
- en: 'To install .NET 7.0, perform the following steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 .NET 7.0，请执行以下步骤：
- en: Download the **.NET 7.0** installer from [https://dotnet.microsoft.com/download/dotnet/7.0](https://dotnet.microsoft.com/download/dotnet/7.0).
    We are using the **Windows x64 SDK Installer**.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://dotnet.microsoft.com/download/dotnet/7.0](https://dotnet.microsoft.com/download/dotnet/7.0)
    下载 **.NET 7.0** 安装程序。我们使用的是 **Windows x64 SDK 安装程序**。
- en: Once the download completes, run the installer to complete the installation
    of .NET 7.0 on your computer.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序以完成 .NET 7.0 在您计算机上的安装。
- en: 'Open **Command Prompt** and enter the following command to verify that your
    computer is now running .NET 7.0:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**命令提示符**并输入以下命令以验证您的计算机现在正在运行 .NET 7.0：
- en: '[PRE1]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot is from a computer that is running .NET 7.0:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图来自运行 .NET 7.0 的计算机：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_01_06.png)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，描述自动生成](img/B18471_01_06.png)'
- en: 'Figure 1.6: .NET version'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 1.6: .NET 版本'
- en: Installing Microsoft SQL Server Express
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Microsoft SQL Server Express
- en: 'Microsoft SQL Server Express is the free edition of Microsoft SQL Server. To
    install Microsoft SQL Server Express, do the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft SQL Server Express 是 Microsoft SQL Server 的免费版。要安装 Microsoft SQL Server
    Express，请执行以下操作：
- en: Download the Microsoft SQL Server installer for **SQL Server Express** from
    [https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads).
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads)
    下载 **SQL Server Express** 的 Microsoft SQL Server 安装程序。
- en: After the download completes, run the SQL Server installer.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行 SQL Server 安装程序。
- en: 'Select the **Basic** installation type:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**基本**安装类型：
- en: '![Graphical user interface  Description automatically generated](img/B18471_01_07.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，描述自动生成](img/B18471_01_07.png)'
- en: 'Figure 1.7: The SQL Server installer'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.7: SQL Server 安装程序'
- en: Click the **Accept** button to accept the Microsoft SQL Server License Terms.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**接受**按钮以接受 Microsoft SQL Server 许可条款。
- en: Click the **Install** button to complete the installation.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮完成安装。
- en: 'The following screenshot shows the dialog that appears after SQL Server Express
    has been successfully installed:'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 SQL Server Express 安装成功后出现的对话框：
- en: '![](img/B18471_01_08.png)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18471_01_08.png)'
- en: 'Figure 1.8: SQL Server Express Edition'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 1.8: SQL Server Express 版本'
- en: Create a Microsoft Azure account
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Microsoft Azure 账户
- en: Microsoft Azure is Microsoft’s cloud platform and it offers over 200 products
    and cloud services. You can use it to run and manage applications with the tools
    and frameworks of your choice.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 是微软的云平台，它提供超过 200 个产品和云服务。您可以使用它来运行和管理您选择工具和框架的应用程序。
- en: If you do not already have a Microsoft Azure account, you can create a free
    account. Each free account comes with a generous $200 credit to get you started
    and over 55+ free services.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有 Microsoft Azure 账户，您可以创建一个免费账户。每个免费账户都附带 200 美元的信用额度，以帮助您开始使用，并提供超过 55+
    的免费服务。
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_01_09.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，描述自动生成](img/B18471_01_09.png)'
- en: 'Figure 1.9: Microsoft Azure'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.9: Microsoft Azure'
- en: 'To create a free Microsoft Azure account, do the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个免费的 Microsoft Azure 账户，请执行以下操作：
- en: Navigate to the Microsoft Azure page, [https://azure.microsoft.com/](https://azure.microsoft.com/).
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Microsoft Azure 页面，[https://azure.microsoft.com/](https://azure.microsoft.com/)。
- en: Click the **Free account** button.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**免费账户**按钮。
- en: Click the **Start free** button.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始免费**按钮。
- en: Complete the agreement and click the **Sign up** button.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成协议并点击**注册**按钮。
- en: To complete all the projects in this book, you will need a code editor, such
    as Microsoft Visual Studio Community 2022, .NET 7.0, Microsoft Azure, and Microsoft
    SQL Server. In this chapter, we showed you how to install Visual Studio 2022 Community
    Edition, .NET 7.0, and SQL Server 2022 Express Edition. We also showed you how
    to open a free Microsoft Azure account.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本书中的所有项目，您需要一个代码编辑器，例如 Microsoft Visual Studio Community 2022、.NET 7.0、Microsoft
    Azure 和 Microsoft SQL Server。在本章中，我们向您展示了如何安装 Visual Studio 2022 社区版、.NET 7.0
    和 SQL Server 2022 Express 版本。我们还向您展示了如何开通免费的 Microsoft Azure 账户。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After completing this chapter, you should understand the benefits of using Blazor
    WebAssembly versus other Blazor hosting models and be prepared to complete the
    projects in this book.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您应该了解使用 Blazor WebAssembly 相比其他 Blazor 托管模型的好处，并准备好完成本书中的项目。
- en: In this chapter, we introduced the Blazor framework. The Blazor framework is
    built on .NET Framework and allows web developers to use C# on both the client
    and the server of a web app.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Blazor 框架。Blazor 框架建立在 .NET Framework 之上，允许网络开发者在网络应用程序的客户机和服务器端使用
    C#。
- en: After that, we compared Blazor WebAssembly with both Blazor Server and Blazor
    Hybrid. All three hosting models are used to host Razor components. They each
    have their own advantages and disadvantages. We prefer Blazor WebAssembly.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们比较了 Blazor WebAssembly 与 Blazor Server 和 Blazor Hybrid。所有三种托管模型都用于托管 Razor
    组件。它们各自都有其优势和劣势。我们更喜欢 Blazor WebAssembly。
- en: In the last part of the chapter, we explained how to set up your computer with
    Microsoft Visual Studio Community Edition, .NET 7.0, and Microsoft SQL Server
    Express and how to open a Microsoft Azure account, all of which are required to
    complete the projects in this book.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们解释了如何使用 Microsoft Visual Studio Community Edition、.NET 7.0 和 Microsoft
    SQL Server Express 设置您的计算机，以及如何打开 Microsoft Azure 账户，所有这些都是在完成本书中的项目所必需的。
- en: Now that your computer is set up to complete the projects in this book, it is
    time to get started. In the next chapter, you will create your first Blazor WebAssembly
    web app.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的计算机已设置好以完成本书中的项目，是时候开始行动了。在下一章中，您将创建您的第一个 Blazor WebAssembly 网络应用程序。
- en: Questions
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您思考：
- en: 'Which of the following hosting models requires a constant connection to a server:
    Blazor WebAssembly, Blazor Server, or Blazor Hybrid?'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种托管模型需要持续连接到服务器：Blazor WebAssembly、Blazor Server 或 Blazor Hybrid？
- en: Does using Blazor WebAssembly mean that you will never need to write JavaScript
    ever again?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Blazor WebAssembly 是否意味着你永远不再需要编写 JavaScript？
- en: Does Blazor WebAssembly require any plugins to be installed on the browser?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 是否需要在浏览器上安装任何插件？
- en: How much does it cost to get started developing with Blazor WebAssembly?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Blazor WebAssembly 开发需要多少钱？
- en: Further reading
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了关于本章主题的更多信息：
- en: For more information on Blazor, refer to [https://blazor.net](https://blazor.net).
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Blazor 的更多信息，请参阅 [https://blazor.net](https://blazor.net)。
- en: For more information on the .NET Foundation, refer to [https://dotnetfoundation.org](https://dotnetfoundation.org).
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 .NET 基金会的更多信息，请参阅 [https://dotnetfoundation.org](https://dotnetfoundation.org)。
- en: For more information on the ASP.NET repository on GitHub, refer to [https://github.com/dotnet/aspnetcore](https://github.com/dotnet/aspnetcore).
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 GitHub 上的 ASP.NET 仓库的更多信息，请参阅 [https://github.com/dotnet/aspnetcore](https://github.com/dotnet/aspnetcore)。
- en: For general information on WebAssembly, refer to [https://webassembly.org](https://webassembly.org).
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 WebAssembly 的一般信息，请参阅 [https://webassembly.org](https://webassembly.org)。
- en: For more information on browser compatibility with WebAssembly, refer to [https://caniuse.com/?search=wasm](https://caniuse.com/?search=wasm).
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 WebAssembly 与浏览器的兼容性信息，请参阅 [https://caniuse.com/?search=wasm](https://caniuse.com/?search=wasm)。
- en: For more information on Razor Pages, refer to [https://learn.microsoft.com/en-us/aspnet/core/razor-pages](https://learn.microsoft.com/en-us/aspnet/core/razor-pages).
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Razor Pages 的更多信息，请参阅 [https://learn.microsoft.com/en-us/aspnet/core/razor-pages](https://learn.microsoft.com/en-us/aspnet/core/razor-pages)。
- en: Join our community on Discord
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
- en: '![](img/Discord_QR.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Discord_QR.png)'
