["```cs\nusing (variable assignment to disposable instance) {\n    scope in which the disposable instance is alive.\n}\n```", "```cs\nusing var fileStream = new FileStream(someFileName);\n```", "```cs\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Threading;\n\nnamespace StreamsAndAsync {\n  public class Program {\n    static void Main(string[] args) {\n      string testMessage = \"Testing writing some arbitrary string to a stream\";\n      byte[] messageBytes = Encoding.UTF8.GetBytes(testMessage);\n      using (Stream ioStream = new FileStream(@\"stream_demo_file.txt\", FileMode.OpenOrCreate)) {\n        if (ioStream.CanWrite) {\n          ioStream.Write(messageBytes, 0, messageBytes.Length);\n        } else {\n          Console.WriteLine(\"Couldn't write to our data stream.\");\n        }\n      }\n      Console.WriteLine(\"Done!\");\n      Thread.Sleep(10000);\n    }\n  }\n}\n```", "```cs\nusing (Stream ioStream = new FileStream(@\"../stream_demo_file.txt\", FileMode.OpenOrCreate)) {\n  if (ioStream.CanWrite) {\n    ioStream.Seek(0, SeekOrigin.End);\n    ioStream.Write(messageBytes, 0, messageBytes.Length);\n  } else {\n    Console.WriteLine(\"Couldn't write to our data stream.\");\n  }\n}\n```", "```cs\nTesting writing a different string to a streamTesting writing a different string to a stream\n```", "```cs\nusing (Stream ioStream = new FileStream(@\"../stream_demo_file.txt\", FileMode.OpenOrCreate)) {\n  if (ioStream.CanWrite) {\n    ioStream.Write(messageBytes, 0, messageBytes.Length);\n  } else {\n    Console.WriteLine(\"Couldn't write to our data stream.\");\n  }\n\n  if (ioStream.CanRead) {\n    byte[] destArray = new byte[10];\n    ioStream.Read(destArray, 0, 10);\n    string result = Encoding.UTF8.GetString(destArray);\n    Console.WriteLine(result);\n  }\n}\n```", "```cs\ndotnet add package Newtonsoft.Json\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace StreamsAndAsync {\n    public class ComplexModel {\n        public string ComplexModelId { get; set; } = Guid.NewGuid().ToString();\n        public int NumberDemonstration { get; set; } = 12354;\n        public InnerModel smallInnerModel { get; set; }\n        public List<InnerModel> listOfInnerModels { get; set; } = new List<InnerModel>() {\n            new InnerModel(),\n            new InnerModel() \n        };\n    }\n\n    public class InnerModel {\n        public string randomId { get; set; } = Guid.NewGuid().ToString();\n        public string nonRandomString { get; set; } = \"I wrote this here.\";\n    }\n}\n```", "```cs\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Threading;\nusing Newtonsoft.Json;\n\nnamespace StreamsAndAsync\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            ComplexModel testModel = new ComplexModel();\n            string testMessage = JsonConvert.SerializeObject(testModel);\n            byte[] messageBytes = Encoding.UTF8.GetBytes(testMessage);\n\n            using (Stream ioStream = new FileStream(@\"../stream_demo_file.txt\", FileMode.OpenOrCreate)) {\n                if (ioStream.CanWrite) {\n                    ioStream.Write(messageBytes, 0, messageBytes.Length);\n                } else {\n                    Console.WriteLine(\"Couldn't write to our data stream.\");\n                }\n            }\n\n            Console.WriteLine(\"Done!\");\n            Thread.Sleep(10000);\n        }\n    }\n}\n```", "```cs\nComplexModel model = JsonConvert.Deserialize<ComplexModel>(testMessage);\n```", "```cs\nusing (Stream s = new FileStream(@\"../stream_demo_file.txt\", FileMode.OpenOrCreate)) {\n```", "```cs\nusing (StreamWriter sw = new StreamWriter(s)) {\n```", "```cs\nstatic void Main(string[] args) {\n  ComplexModel testModel = new ComplexModel();\n  string testMessage = JsonConvert.SerializeObject(testModel);\n\n  using (Stream ioStream = new FileStream(@\"../stream_demo_file.txt\", FileMode.OpenOrCreate)) {\n    using (StreamWriter sw = new StreamWriter(ioStream)) {\n      sw.Write(testMessage);\n    }\n  }\n\n  Console.WriteLine(\"Done!\");\n  Thread.Sleep(10000);\n}\n```", "```cs\nusing (Stream ioStream = new FileStream(@\"../stream_demo_file.txt\", FileMode.OpenOrCreate)) {\n    using (StreamWriter sw = new StreamWriter(ioStream)) {\n        sw.Write(testMessage);\n        sw.BaseStream.Seek(10, SeekOrigin.Begin);\n        sw.Write(testMessage);\n    }\n}\n```", "```cs\npublic async Task<ResultObject> AsyncMethodDemo() {\n  ResultObject result = new ResultObject();\n  WebRequest request = WebRequest.Create(\"http://test-domain.com\");\n  request.Method = \"POST\";\n  Stream reqStream = request.GetRequestStream();\n\n  using (StreamWriter sw = new StreamWriter(reqStream)) {\n    sw.Write(\"Our test data query\");\n  }\n  var responseTask = request.GetResponseAsync();\n\n  result.LocalResult = LongRunningSlowMethod();\n\n  var webResponse = await responseTask;\n\n  using (StreamReader sr = new StreamReader(webResponse.GetResponseStream())) {\n    result.RequestResult = await sr.ReadToEndAsync();\n  }\n\n  return result;\n}\n```", "```cs\npublic async Task<ResultObject> AsyncMethodDemo() {\n```", "```cs\nvar responseTask = request.GetResponseAsync();\n```", "```cs\nvar webResponse = await responseTask;\n```", "```cs\nresult.RequestResult = await sr.ReadToEndAsync();\n```"]