- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Finishing Games with Commercial Viability
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成具有商业可行性的游戏
- en: In [*Chapter 14*](B18347_14.xhtml#_idTextAnchor272), we wrapped up the development
    process that started with us creating the 3D **first-person shooter** (**FPS**)
    game and ended with us designing a truly immersive boss room encounter – in our
    own room – using **mixed reality** (**MR**). To achieve this, we took advantage
    of the power and flexibility of the **Unity XR Interaction Toolkit** (**XRI**)
    and combined 3D assets with our reusable components and systems from our previous
    work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第14章*](B18347_14.xhtml#_idTextAnchor272)中，我们完成了从创建3D**第一人称射击**（**FPS**）游戏开始，到设计一个真正沉浸式的Boss房间遭遇战——在我们的房间里——的过程。为了实现这一点，我们利用了**Unity
    XR交互工具包**（**XRI**）的强大功能和灵活性，并将3D资产与之前工作中可重复使用的组件和系统相结合。
- en: We also explored additional Unity-specific MR technologies such as AR Foundation,
    which we used to create immersive experiences using detected planes from the player’s
    physical surroundings. We used walls, floors, and tables to spawn virtual objects
    and create a virtual game environment. We also designed the boss room, set up
    Quest devices, and customized Unity’s Mixed Reality Template. Additionally, we
    crafted the interactive module Prefab Variants, along with puzzle and shooting
    mechanics, to deepen the player experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了额外的Unity特定MR技术，如AR Foundation，我们使用它来创建使用玩家物理环境中的检测到的平面来实现的沉浸式体验。我们使用墙壁、地板和桌子来生成虚拟对象并创建虚拟游戏环境。我们还设计了Boss房间，设置了Quest设备，并定制了Unity的混合现实模板。此外，我们还制作了交互模块预制体变体，以及谜题和射击机制，以加深玩家的体验。
- en: In this chapter, we’ll explore **Games as a Service** (**GaaS**), Unity DevOps
    and LiveOps resources, and source code management via a **version control system**
    (**VCS**). We’ll also discuss in-game economies for commercialization and finish
    by exploring different storefront platforms for distributing our games, including
    an example of implementing **Unity Gaming Services** (**UGS**) and publishing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨**游戏即服务**（**GaaS**）、Unity DevOps和LiveOps资源，以及通过**版本控制系统**（**VCS**）进行源代码管理。我们还将讨论游戏内经济以实现商业化，并以探索不同的店面平台来分发我们的游戏结束，包括实现**Unity游戏服务**（**UGS**）和发布的示例。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Introducing GaaS – UGS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍GaaS – UGS
- en: Safeguarding your investment! Source code management with Unity Version Control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护您的投资！使用Unity版本控制进行源代码管理
- en: Engaging players with an in-game economy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过游戏内经济吸引玩家
- en: Getting your game out there! Platform distribution
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的游戏推向市场！平台分发
- en: Implementing UGS and publishing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现UGS和发布
- en: By the end of this chapter, you’ll have gained confidence in your ability to
    manage and secure your project development life cycle during both the production
    and release phases. You’ll also know how to distribute a commercially viable finished
    game effectively.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将对自己的项目开发生命周期在生产和发布阶段的管理和安全性充满信心。您还将了解如何有效地分发具有商业可行性的完成游戏。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along in this chapter, you must have Unity Hub and a 2022 version
    of Unity Editor installed. You’ll also need to be able to sign in to Unity Cloud
    using your Unity ID account.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，您必须安装Unity Hub和2022版本的Unity编辑器。您还需要能够使用Unity ID账户登录Unity云服务。
- en: You can download the complete project from GitHub at [https://github.com/PacktPublishing/Unity-2022-by-Example](https://github.com/PacktPublishing/Unity-2022-by-Example).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub下载完整项目，链接为[https://github.com/PacktPublishing/Unity-2022-by-Example](https://github.com/PacktPublishing/Unity-2022-by-Example)。
- en: Introducing GaaS – UGS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍GaaS – UGS
- en: The most important lesson is to finish your games. You have no potential to
    graduate as a hobbyist or have a self-sustaining career as an indie game developer
    unless you finish your games. A finished game also serves as proof of finely-tuned
    skills as a game developer and a showcase for studios, should you be looking to
    get hired by one.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的教训是完成您的游戏。除非您完成游戏，否则您没有作为业余爱好者毕业的潜力，也没有作为独立游戏开发者自给自足的职业前景。完成的游戏也证明了您作为游戏开发者精细调校的技能，并且是您想要加入的任何工作室的展示品。
- en: Therefore, finishing games boils down to treating the game-making process more
    like a business. This is **GaaS**, blending development and operating strategies
    to create dynamic, remarkable, commercial, and continuously evolving game experiences
    for players in your *business* of making games.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，完成游戏开发的过程可以归结为将游戏制作过程更像是一种商业行为。这就是**GaaS**，将开发和运营策略相结合，为你在游戏制作**商业**中的玩家创造动态、引人注目、商业化和持续发展的游戏体验。
- en: When developing a game using a GaaS model, the focus shifts more toward long-term
    engagement and monetization strategies in the later stages of production. If we
    aim to maximize commercial viability with our game’s release – for a sustained
    revenue stream – we’ll need to employ continuous content delivery, social interaction,
    and data analysis to guide our decision-making processes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用GaaS模型开发游戏时，重点在生产的后期阶段更多地转向长期参与和货币化策略。如果我们希望通过游戏的发布最大化商业可行性——以实现持续的收益流——我们需要采用持续的内容交付、社交互动和数据分析来指导我们的决策过程。
- en: Unity not only provides a game engine for the foundation of your game’s development
    but also cloud services you should leverage to increase your chance for success.
    Namely, **Unity Cloud** provides a group of efficient and time-saving tools and
    workflows that substantially assist in securing your projects and releasing commercially
    viable games.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Unity不仅为你的游戏开发提供游戏引擎作为基础，还提供了你应该利用的云服务，以增加你成功的机会。特别是，**Unity Cloud**提供了一系列高效且节省时间的工具和工作流程，这些工具和工作流程在很大程度上有助于确保你的项目并发布具有商业可行性的游戏。
- en: Additional reading | Unity Cloud
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity Cloud
- en: 'Unity Cloud: [https://cloud.unity.com/](https://cloud.unity.com/)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'Unity Cloud: [https://cloud.unity.com/](https://cloud.unity.com/)'
- en: Unity Cloud provides access to **UGS**, which they describe as “*a complete
    service ecosystem for live games*.” Considering the breadth of service offerings
    and ease of integration into our game projects, it should be no surprise why we
    would benefit from adopting one or more services.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Cloud提供了对**UGS**的访问，他们将其描述为“*一个为实时游戏提供完整服务生态系统的服务*。”考虑到服务提供的广泛性和易于集成到我们的游戏项目中，我们从中受益于采用一个或多个服务也就不足为奇了。
- en: 'Here’s a quick rundown of what UGS provides:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是UGS提供的一些快速概述：
- en: '**Foundational game systems**: Systems such as authentication and player accounts
    enable cloud saves and platform crossplay, and content management enables deployment
    and dynamic updating of game content. Meanwhile, multiplayer game hosting can
    scale your game to millions of players (as games such as **Among Us** and **Apex
    Legends** did). Rounding things out are version control and build automation,
    which comprise Unity’s **DevOps** features.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础游戏系统**：如身份验证和玩家账户等系统，使云存档和平台跨游戏成为可能，内容管理使游戏内容的部署和动态更新成为可能。同时，多人游戏托管可以将你的游戏扩展到数百万玩家（就像**Among
    Us**和**Apex Legends**所做的那样）。最后，版本控制和构建自动化构成了Unity的**DevOps**功能。'
- en: '**Player engagement**: Features such as analytics enable data-driven decisions
    to maximize the player experience. Engagement tools with A/B testing allow features
    with the most player enjoyment to surface, while communications such as voice
    and text chat build communities. And don’t forget the ever-so-important crash
    reporting to know where your game crashes so that you can respond quickly with
    fixes. This grouping of services is Unity’s **LiveOps** features.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**玩家参与**：如分析等特性使数据驱动的决策最大化玩家体验。具有A/B测试的参与工具可以让玩家最享受的功能浮出水面，而语音和文本聊天等通讯则可以建立社区。别忘了至关重要的崩溃报告，以便知道你的游戏在哪里崩溃，这样你就可以快速响应并提供修复。这一组服务是Unity的**LiveOps**功能。'
- en: '**Game growth**: Grow your game with user acquisition and drive monetization
    revenue with in-game ads, ad mediation, and in-app purchase features to establish
    your game’s economy.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏增长**：通过用户获取来增长你的游戏，并通过游戏内广告、广告中介和在应用内购买功能来驱动货币化收入，以建立你的游戏经济。'
- en: Additional reading | UGS
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | UGS
- en: 'From DevOps to LiveOps in one platform: [https://unity.com/solutions/gaming-services](https://unity.com/solutions/gaming-services)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个平台上从DevOps到LiveOps：[https://unity.com/solutions/gaming-services](https://unity.com/solutions/gaming-services)
- en: The aforementioned UGS topics can fill a whole book, so we’ll focus on just
    the core services that are crucial for game development production and are intended
    for commercial release in this chapter. That means we’ll focus on **Unity DevOps**
    and **Unity LiveOps** in this section, as well as the basics of a game economy
    and publishing in the following sections.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 UGS 主题可以写成一整本书，所以我们将专注于本章中对于游戏开发生产至关重要的核心服务，以及旨在商业发布的部分。这意味着我们将在本节中关注 **Unity
    DevOps** 和 **Unity LiveOps**，以及下一节中游戏经济和发布的基础知识。
- en: The success of GaaS depends on the complementary roles played by DevOps and
    LiveOps. DevOps is responsible for updating the game efficiently. At the same
    time, LiveOps decides which updates to include and how to engage players (determining
    what to buff or nerf in the game based on player engagement is a fun challenge!).
    Both tools work together to create a cycle of continuous improvement (that is,
    **Kaizen**) that sustains and improves the game with updates over time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: GaaS 的成功取决于 DevOps 和 LiveOps 之间的互补作用。DevOps 负责高效更新游戏。同时，LiveOps 决定包含哪些更新以及如何吸引玩家（根据玩家参与度决定游戏中要增强或削弱的内容是一项有趣的挑战！）。这两个工具共同工作，创造一个持续改进的循环（即
    **Kaizen**），随着时间的推移，通过更新来维持和提升游戏。
- en: Kaizen (改善)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Kaizen（改善）
- en: '**Kaizen** is the Sino-Japanese word for “improvement.” It’s all about continuous
    improvement. In game development, this could mean making small changes weekly
    or even daily to mechanics, balance, storylines, or even coding practices. It
    can help identify issues so that we can make adjustments early before they become
    more significant problems.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kaizen** 是中日混成的词汇，意为“改善”。它关乎持续改进。在游戏开发中，这可能意味着每周甚至每天对机制、平衡、剧情或甚至编码实践进行小幅度调整。这有助于识别问题，以便我们可以在它们成为更严重问题之前及时进行调整。'
- en: Let’s explore these core services in more detail, starting with DevOps.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨这些核心服务，从 DevOps 开始。
- en: Introducing Unity DevOps
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Unity DevOps
- en: '**DevOps**, derived from the fusion of **development** (**Dev**) and **operations**
    (**Ops**) practices, plays a vital role in software development and is particularly
    valuable in game development, especially in the application of GaaS. Unity DevOps
    tools facilitate accelerated development and deployment cycles – throughout the
    entire production life cycle – and help ensure reliable game releases.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps** 是由 **开发**（**Dev**）和 **运维**（**Ops**）实践融合而成的，在软件开发中扮演着至关重要的角色，尤其是在
    GaaS 的应用中尤其有价值。Unity DevOps 工具促进了加速的开发和部署周期——贯穿整个生产生命周期——并有助于确保可靠的游戏发布。'
- en: 'Examining the problems that can be solved using Unity DevOps tools can help
    us better understand the benefits. The service offerings tackle essential challenges
    in game development by addressing critical aspects such as the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查可以使用 Unity DevOps 工具解决的问题，可以帮助我们更好地理解其优势。服务提供解决游戏开发中的基本挑战，包括以下关键方面：
- en: '**Managing assets (complex and/or large)**: You can trust that your assets
    will be maintained and archived in your project repository, no matter the size
    or the complexity of their structure. This applies to working solo or in collaboration
    with a team.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理资产（复杂和/或大型）**：您可以放心，无论资产的结构大小或复杂程度如何，您的资产都将被维护和存档在项目仓库中。这适用于独立工作或与团队协作。'
- en: '**Managing code base changes**: In addition to managing assets, tracking changes
    via version history will ensure quality is maintained and progress on work is
    never lost.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理代码库变更**：除了管理资产外，通过版本历史记录跟踪变更将确保质量得到保持，并且工作进度永远不会丢失。'
- en: '**Streamlining build and deployment**: Automating the build process and deployment
    for your game’s executables significantly accelerates the distribution of updates
    – getting updates in the hands of your players quicker, whether that’s to squash
    bugs or improve player engagement.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化构建和部署**：自动化游戏可执行文件的构建和部署过程可以显著加快更新分发速度——无论是为了修复错误还是提高玩家参与度，都能更快地将更新传递给玩家。'
- en: Additional reading | Unity DevOps
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多 | Unity DevOps
- en: 'Unity DevOps: [https://unity.com/products/unity-devops](https://unity.com/products/unity-devops)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'Unity DevOps: [https://unity.com/products/unity-devops](https://unity.com/products/unity-devops)'
- en: 'There are two specific services Unity DevOps offers:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Unity DevOps 提供了两个具体的服务：
- en: '**Unity Version Control**: Game development teams and solo developers can overcome
    project continuance challenges by using a specialized VCS that’s also tightly
    integrated with Unity Editor. Unity Version Control offers local and private cloud
    code repositories that provide a scalable collaboration platform for programmers,
    artists, and creators.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity版本控制**：游戏开发团队和独立开发者可以通过使用与Unity紧密集成的专用版本控制系统来克服项目持续性的挑战。Unity版本控制提供本地和私有云代码仓库，为程序员、艺术家和创作者提供了一个可扩展的协作平台。'
- en: Important note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You may be wondering why I suggest using Unity Version Control for our game
    development projects even though this book’s projects are shared with you through
    a link to GitHub at the beginning of each chapter. Well, the reason is straightforward:
    GitHub offers public repositories, which are commonly used for open source projects,
    while Unity Version Control does not provide this feature.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道，尽管本书的项目是通过每章开头提供的GitHub链接共享的，为什么我建议使用Unity版本控制来处理我们的游戏开发项目。原因很简单：GitHub提供公共仓库，这通常用于开源项目，而Unity版本控制不提供此功能。
- en: '**Unity Build Automation**: A customizable build pipeline that seamlessly integrates
    with Unity Version Control or third-party repositories (for example, **GitHub**,
    **GitLab**, and **Bitbucket**). It provides robust platform build (for example,
    on Windows, Mac, Linux, Android, and iOS) and testing capabilities that streamline
    the process of building and deploying game builds.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity构建自动化**：一个可定制的构建管道，可以无缝集成到Unity版本控制或第三方仓库（例如，**GitHub**、**GitLab**和**Bitbucket**）。它提供了强大的平台构建（例如，在Windows、Mac、Linux、Android和iOS上）和测试功能，从而简化了构建和部署游戏构建的过程。'
- en: The Unity DevOps services are much more than the brief introductions provided
    here, so let’s explore each in more detail. We’ll start with Unity Version Control.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Unity DevOps服务远不止这里提供的简要介绍，所以让我们更详细地探讨每个服务。我们将从Unity版本控制开始。
- en: Unity Version Control
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unity版本控制
- en: '**Unity Version Control** (formerly **Plastic SCM**) is a modern VCS that can
    be used seamlessly with Unity. It provides Unity-tailored version control capabilities
    and mitigates many of the risks associated with game development. For the record,
    you can use Unity Version Control with software platforms and projects other than
    Unity.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unity版本控制**（以前称为**Plastic SCM**）是一个可以无缝与Unity一起使用的现代版本控制系统。它提供定制的Unity版本控制功能，并减轻了许多与游戏开发相关的风险。据记录，您可以使用Unity版本控制与Unity以外的软件平台和项目一起使用。'
- en: Additional reading | Unity Version Control
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 附加阅读 | Unity版本控制
- en: 'Unity Version Control: [https://unity.com/solutions/version-control](https://unity.com/solutions/version-control)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Unity版本控制：[https://unity.com/solutions/version-control](https://unity.com/solutions/version-control)
- en: So, what is version control? Version control is a system that tracks file changes
    over time. It enables multiple people to collaborate on the same set of files
    and tracks the different file versions. It also allows you to revert to previous
    file versions if needed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是版本控制？版本控制是一个跟踪文件随时间变化的系统。它使多个人能够协作同一组文件，并跟踪不同的文件版本。它还允许你在需要时回滚到之前的文件版本。
- en: As mentioned repeatedly, due to its importance, it’s crucial to use a VCS to
    avoid losing work while working on game development projects. Version control,
    a central pillar of DevOps, also enables team collaboration while more easily
    resolving conflicts that can occur with multiple people working on the same code
    base and assets.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如反复提到的，由于其重要性，使用VCS来避免在游戏开发项目中工作时的工作丢失至关重要。作为DevOps的核心支柱之一，版本控制还使团队协作更加容易，同时更容易解决多人协作同一代码库和资源时可能出现的冲突。
- en: 'As such, Unity Version Control offers the following essential VCS features:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Unity版本控制提供了以下基本版本控制功能：
- en: '**Efficient management of large assets**: The Unity Version Control workspace
    optimizes handling large binary files in your projects (such as texture images
    and 3D model assets). Unlike other VCS offerings, which rely on problematic large
    file support add-ons, Unity Version Control ensures efficient storage and retrieval
    of large assets without any decrease in performance.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效管理大型资源**：Unity版本控制工作空间优化处理项目中大型二进制文件（如纹理图像和3D模型资源）。与其他依赖有问题的较大文件支持附加组件的VCS不同，Unity版本控制确保高效存储和检索大型资源，而不会降低性能。'
- en: '**Enhanced collaboration with branching and merging**: Unity Version Control
    provides robust capabilities for branching implemented features into isolated
    environments and merging changes when two people have worked on the same file.
    This makes for a smoother collaboration experience across the project and teams
    by managing parallel or asynchronous work effectively to mitigate conflicts.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过分支和合并增强协作**：Unity 版本控制提供了强大的功能，可以将实现的功能分支到隔离环境中，并在两个人对同一文件进行工作后合并更改。通过有效地管理并行或异步工作以减轻冲突，这为项目团队提供了更流畅的协作体验。'
- en: '**Cloud archiving for project continuance**: Most VCSs offer cloud archiving,
    as does Unity Version Control, which prevents losses from local system failures
    – which can and do occur! If your project source doesn’t exist in more than one
    location, it doesn’t exist. Yikes!'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云存档以实现项目持续性**：大多数 VCS（版本控制系统）提供云存档，Unity 版本控制也是如此，这可以防止因本地系统故障而造成的损失——这种情况确实会发生！如果您的项目源代码不在一个以上的位置存在，那么它就不存在。哎呀！'
- en: '**Integration with DevOps pipelines**: Unity Version Control works with any
    game engine or software development environment, not just Unity. There are integrations
    into DevOps toolchains, issue-tracking applications, team communication platforms,
    IDEs, and more.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 DevOps 管道集成**：Unity 版本控制与任何游戏引擎或软件开发环境兼容，而不仅仅是 Unity。它集成了 DevOps 工具链、问题跟踪应用程序、团队沟通平台、IDE
    等更多功能。'
- en: Now, let’s explore Unity Build Automation, which picks up where Unity Version
    Control leaves off and is the second half of Unity DevOps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索 Unity 构建自动化，它从 Unity 版本控制那里接手，是 Unity DevOps 的后半部分。
- en: Unity Build Automation
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unity 构建自动化
- en: Using **Unity Build Automation** tools, you can automate the process of creating
    and deploying builds across platforms, where frequent and reliable game updates
    are essential for GaaS in a DevOps environment – players can be brutal with developer
    expectations for rapid responses and high quality. As competitive as the games
    market can sometimes be, you generally get only one chance to hit a player’s expectations;
    otherwise, they’ll bail hard on your game.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Unity 构建自动化** 工具，您可以自动化创建和部署跨平台构建的过程，这对于 DevOps 环境中的 GaaS（游戏即服务）至关重要——玩家对开发者的快速响应和高品质要求非常苛刻。尽管游戏市场有时竞争激烈，但您通常只有一次机会满足玩家的期望；否则，他们可能会毫不犹豫地放弃您的游戏。
- en: Build automation complements version control by addressing developer challenges
    related to an individual and manual build creation process, as well as consistency
    and efficiency across build distributions. A winning combination of version control
    and build automation achieves a comprehensive solution for managing game development
    workflows, from code management to build distribution.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自动化通过解决与个人和手动构建创建过程、构建分发的连贯性和效率相关的开发者挑战，补充了版本控制。版本控制和构建自动化的完美结合为管理游戏开发工作流程提供了一个全面的解决方案，从代码管理到构建分发。
- en: Additional reading | Unity Build Automation
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity 构建自动化
- en: 'Unity Build Automation: [https://unity.com/solutions/ci-cd](https://unity.com/solutions/ci-cd)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 构建自动化：[https://unity.com/solutions/ci-cd](https://unity.com/solutions/ci-cd)
- en: 'As such, Unity Build Automation offers the following essential build features:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Unity 构建自动化提供了以下基本构建功能：
- en: '**Streamlined central build process**: Building projects is a time-consuming
    endeavor, and keeping a developer’s system pegged at 100% CPU utilization during
    a build on their development machine crashes their productivity. Offloading the
    build and deployment processes from the local system to a cloud-based pipeline
    eliminates bottlenecks and provides a standardized process, especially when targeting
    multiple platforms.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的集中构建流程**：构建项目是一项耗时的工作，在开发机器上构建时，将开发者的系统占用率保持在 100% 的 CPU 利用率会导致其生产力下降。将构建和部署过程从本地系统卸载到基于云的管道可以消除瓶颈并提供标准化的流程，尤其是在针对多个平台时。'
- en: '**Streamlined build deployment process**: Automating the deployment process
    significantly saves time and eliminates the – error-prone – manual process of
    copying and uploading game builds to distribution servers across multiple platforms,
    ensuring your game binaries are always ready for release to your testing team
    (for solo Indie devs, this is your friends and family) or players.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的构建部署流程**：自动化部署过程可以显著节省时间并消除手动复制和上传游戏构建到多个平台上的分发服务器的——容易出错的——过程，确保您的游戏二进制文件始终准备好发布给测试团队（对于独立开发者来说，这是您的朋友和家人）或玩家。'
- en: '**Real-time integration and feedback**: Since your QA testers and players have
    already expeditiously received the latest game update, there should be no delay
    in receiving feedback and bug reports. This is vital to promptly address your
    players’ needs and efficiently close the loop on iterating changes, maintaining
    the quality of the game in the process.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时集成和反馈**：由于您的QA测试人员和玩家已经迅速收到了最新的游戏更新，因此在接收反馈和错误报告方面不应有任何延迟。这对于及时满足玩家需求并高效地关闭迭代更改的循环，在维护游戏质量的过程中至关重要。'
- en: Additional reading | CI/CD
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | CI/CD
- en: '**CI/CD** stands for **continuous integration** and **continuous deployment**
    (or **delivery**). It encompasses best practices for development teams using automated
    code integration and delivery.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI/CD**代表**持续集成**和**持续部署**（或**交付**）。它包括开发团队使用自动化代码集成和交付的最佳实践。'
- en: 'What is CI/CD?: [https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.xhtml](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.xhtml)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是CI/CD？[https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.xhtml](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.xhtml)
- en: By leveraging Unity DevOps, game developers can streamline their workflows,
    accelerate development cycles, and deliver higher-quality gaming experiences to
    their players. DevOps takes care of the production phase of your game development
    journey. Now, let’s review Unity LiveOps, which takes care of the release phase.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用Unity DevOps，游戏开发者可以简化他们的工作流程，加速开发周期，并向玩家提供更高品质的游戏体验。DevOps负责您游戏开发旅程的生产阶段。现在，让我们回顾Unity
    LiveOps，它负责发布阶段。
- en: Introducing Unity LiveOps
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Unity LiveOps
- en: '**LiveOps**, derived from the fusion of, well, **live** (**Live**) and **operations**
    (**Ops**) practices, also plays an important role in game development, especially
    in applying GaaS during the post-release phase. Unity LiveOps focuses on the activities
    required to run live games, such as content updates, community management, and
    analytics, all of which help keep your game relevant and engaging for players.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**LiveOps**，源于“**实时**”（**Live**）和**运营**（**Ops**）实践的融合，在游戏开发中也发挥着重要作用，尤其是在发布后阶段应用GaaS时。Unity
    LiveOps专注于运行实时游戏所需的活动，如内容更新、社区管理和分析，所有这些都有助于保持游戏对玩家的相关性和吸引力。'
- en: 'Examining the problems Unity LiveOps tools can solve will help us better understand
    the benefits. The service offerings tackle essential challenges for operating
    a live game by addressing critical aspects such as the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 检查Unity LiveOps工具可以解决的问题将帮助我们更好地理解其益处。服务提供解决运营实时游戏的基本挑战，包括以下关键方面：
- en: '**Optimizing player engagement**: To enhance player engagement and retention,
    we can employ LiveOps strategies that allow us to update game content dynamically,
    offer personalized player experiences, and respond to real-time analytics data
    to identify and reduce churn rate (that is, the number of players who leave the
    game and never return)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化玩家参与度**：为了提高玩家参与度和留存率，我们可以采用LiveOps策略，这些策略允许我们动态更新游戏内容，提供个性化的玩家体验，并响应实时分析数据以识别和降低流失率（即那些离开游戏且不再返回的玩家数量）。'
- en: '**Efficient game management**: You can streamline game operations with automated
    event management, enable direct player communication, and rapidly iterate with
    A/B testing to align better with player expectations'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的游戏管理**：您可以通过自动化事件管理来简化游戏运营，启用直接与玩家的沟通，并通过A/B测试快速迭代以更好地符合玩家期望。'
- en: '**Monetization strategies**: Unity LiveOps provides tools to analyze in-app
    purchases and manage in-game ads, allowing us to optimize revenue with promotions
    and pricing while keeping our players happy'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**货币化策略**：Unity LiveOps提供分析应用内购买和管理游戏内广告的工具，使我们能够在保持玩家满意的同时，通过促销和定价优化收入。'
- en: Additional reading | Unity LiveOps
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity LiveOps
- en: 'Use LiveOps to get the insights you need for a better player experience: [https://unity.com/solutions/gaming-services/player-insights](https://unity.com/solutions/gaming-services/player-insights).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LiveOps获取您需要的见解以获得更好的玩家体验：[https://unity.com/solutions/gaming-services/player-insights](https://unity.com/solutions/gaming-services/player-insights)。
- en: 'Power up your LiveOps strategy for better player retention: [https://unity.com/solutions/gaming-services/continuous-game-improvements](https://unity.com/solutions/gaming-services/continuous-game-improvements).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 提升您的LiveOps策略以更好地保留玩家：[https://unity.com/solutions/gaming-services/continuous-game-improvements](https://unity.com/solutions/gaming-services/continuous-game-improvements)。
- en: Many services are included under the Unity LiveOps umbrella. These services
    collectively empower game developers to extend the life cycle of their games,
    so I encourage you to review the Unity LiveOps links in the preceding callout.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 许多服务都包含在Unity LiveOps的范围内。这些服务共同赋予游戏开发者延长游戏生命周期的能力，所以我鼓励您查看前面提到的Unity LiveOps链接。
- en: 'For our purposes, a few services stand out as particularly crucial for the
    success and longevity of a live published game. So, we’ll only look at a few essential
    services for maintaining engagement and ensuring a high-quality player experience.
    These services can be found on Unity Cloud under the **Products** section, as
    shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，一些服务特别关键，对于直播发布的游戏的成功和持久性至关重要。因此，我们只关注几个维护参与度和确保高质量玩家体验的必要服务。这些服务可以在Unity
    Cloud的**产品**部分找到，如下面的截图所示：
- en: '![Figure 15.1 – Unity Cloud products list](img/B18347_15_01.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – Unity云产品列表](img/B18347_15_01.jpg)'
- en: Figure 15.1 – Unity Cloud products list
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – Unity云产品列表
- en: 'I’ll list the services in the same categories Unity displays in the Unity Cloud
    dashboard:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我将按照Unity Cloud仪表板中显示的相同类别列出服务：
- en: '**GAMING SERVICES** | **ACCOUNTS**:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏服务** | **账户**：'
- en: '**Player Authentication**: Enables secure and consistent player authentication,
    including anonymous, platform-specific, or custom options, and offers cross-device
    support and **Cloud Save**'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**玩家认证**：提供安全且一致的玩家认证，包括匿名、平台特定或自定义选项，并支持跨设备和**云存储**。'
- en: '**GAMING SERVICES** | **ENGAGEMENT** **AND ANALYTICS**:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏服务** | **参与度** **和** **分析**：'
- en: '**Analytics**:'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：'
- en: '**Analyze**: A comprehensive set of analytics features, including **Game performance**,
    **Retention**, **Revenue**, and **User acquisition**, to make focused data-driven
    decisions. Custom dashboards and data explorers are available for your deep dives
    into player metrics, and they use funnels to identify your player journeys.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：一套全面的统计分析功能，包括**游戏性能**、**留存率**、**收入**和**用户获取**，以做出专注的数据驱动决策。提供定制仪表板和数据探索器，以便您深入挖掘玩家指标，并使用漏斗来识别玩家的旅程。'
- en: '**Manage**: You can both manage and analyze in-game events (predefined and
    custom) with the **Event Manager** and **Event Browser** features. Well-placed
    events allow you to adjust gameplay strategies based on your players’ engagement.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理**：您可以使用**事件管理器**和**事件浏览器**功能来管理和分析游戏中的事件（预定义和自定义）。合理放置的事件允许您根据玩家的参与度调整游戏策略。'
- en: '**Game Overrides**: Utilizing **Remote Config** and **A/B Testing** allows
    for dynamic content and game-logic adjustments to target your player’s preferences
    (without the need to deploy a new game build), resulting in more engagement and
    more fun!'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏覆盖**：利用**远程配置**和**A/B测试**可以对游戏内容和游戏逻辑进行调整，以适应玩家的偏好（无需部署新的游戏版本），从而提高参与度和乐趣！'
- en: '**GAMING SERVICES** | **CRASH REPORTING**:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏服务** | **崩溃报告**：'
- en: '**Cloud Diagnostics**: Utilize crash reporting tools to promptly detect and
    resolve issues that impact game stability and performance, resulting in a seamless
    and bug-free gaming experience for players'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云诊断**：利用崩溃报告工具及时检测和解决影响游戏稳定性和性能的问题，为玩家提供无缝且无错误的游戏体验。'
- en: Unity Cloud pricing
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Unity云定价
- en: 'Unity DevOps and LiveOps consist of a pay-as-you-go consumption model. All
    developers start with a generous free plan: [https://unity.com/solutions/gaming-services/pricing](https://unity.com/solutions/gaming-services/pricing).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Unity DevOps和LiveOps采用按需付费的消费模式。所有开发者都从一份慷慨的免费计划开始：[https://unity.com/solutions/gaming-services/pricing](https://unity.com/solutions/gaming-services/pricing)。
- en: Note that **Authentication** and **Game Overrides** are 100% free.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**认证**和**游戏覆盖**是100%免费的。
- en: By implementing these essential LiveOps services into our games, we can strive
    for increased player engagement and satisfaction, both of which contribute to
    our game’s longevity. Completing our first published commercial game is only the
    start of our journey as career game developers. We want to enable our next game,
    so we should leverage all the tools at our disposal to help us get there.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这些必要的LiveOps服务集成到我们的游戏中，我们可以努力提高玩家的参与度和满意度，这两者都有助于我们游戏的长久发展。完成我们的第一个商业游戏只是我们作为职业游戏开发者旅程的开始。我们希望使我们的下一款游戏能够实现，因此我们应该利用我们所能利用的所有工具来帮助我们实现这一目标。
- en: In this section, we learned how combining Unity DevOps and Unity LiveOps technologies,
    such as Unity Version Control and Analytics, equips game developers with the tools
    required to form the backbone of a successful GaaS project. Next, we’ll learn
    how to configure Unity Version Control to secure our game project code and assets.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何结合Unity DevOps和Unity LiveOps技术，例如Unity版本控制和分析，为游戏开发者提供构建成功GaaS项目所需的基础工具。接下来，我们将学习如何配置Unity版本控制以保护我们的游戏项目代码和资源。
- en: Safeguarding your investment! Source code management with Unity Version Control
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护您的投资！使用Unity版本控制进行源代码管理
- en: Unity Version Control provides a customized version control solution for Unity
    projects with tight editor integration. This ensures our work is protected and
    that for team environments, a smooth collaboration experience is provided for
    team members. As previously stated, in software development, including game development,
    version control is essential to prevent data loss and effectively resolve conflicts.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Unity版本控制为Unity项目提供定制的版本控制解决方案，具有紧密的编辑器集成。这确保了我们的工作得到保护，并且对于团队环境，为团队成员提供流畅的协作体验。正如之前所述，在软件开发中，包括游戏开发，版本控制对于防止数据丢失和有效解决冲突是必不可少的。
- en: In this section, we’ll explore the steps to implement Unity Version Control
    for our projects. First, we’ll break down Unity Version Control’s approach to
    catering the VCS experience that’s specific to programmers and artists. We’ll
    start with programmers.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨实施Unity版本控制的项目步骤。首先，我们将分解Unity版本控制针对程序员和艺术家定制的VCS体验方法。我们将从程序员开始。
- en: Catering VCS for programmers
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为程序员定制的版本控制
- en: Unity Version Control provides customized workflows for artists and programmers
    in one repository. It offers developers the flexibility to work in centralized
    or distributed environments with comprehensive branching and merging capabilities.
    Artists and designers can use a simpler, user-friendly workspace interface called
    **Gluon** to take advantage of intuitive file-based asset workflows that enhance
    their creativity.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Unity版本控制在一个存储库中为艺术家和程序员提供定制的流程。它为开发者提供在集中式或分布式环境中工作的灵活性，具有全面的分支和合并功能。艺术家和设计师可以使用名为**Gluon**的简单、用户友好的工作区界面，利用直观的基于文件的资源工作流程来提高他们的创造力。
- en: '*Figure 15**.2* shows the developer-centric workspace interface, which provides
    programmers with every feature on offer, such as **Pending Changes**, **Changesets**,
    **Branches**, and **Branch Explorer**:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.2*显示了以开发者为中心的工作区界面，它为程序员提供所有提供的功能，例如**挂起更改**、**更改集**、**分支**和**分支浏览器**：'
- en: '![Figure 15.2 – Unity Version Control workspace](img/B18347_15_02.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – Unity版本控制工作区](img/B18347_15_02.jpg)'
- en: Figure 15.2 – Unity Version Control workspace
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – Unity版本控制工作区
- en: Compare this to the simpler, more straightforward, artist-centric workspace
    interface in *Figure 15**.3* in the *Catering VCS for* *artists* section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将此与*图15.3*中的更简单、更直接、以艺术家为中心的工作区界面进行比较，该界面位于*艺术家版本控制*部分。
- en: Next, we’ll delve into each interface’s features as we walk through setting
    up a new Unity project using Unity Version Control. But before that, we’ll look
    at the artist-centric workflow.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过设置使用Unity版本控制的新Unity项目来深入了解每个界面的功能。但在那之前，我们将查看以艺术家为中心的工作流程。
- en: Catering VCS for artists
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为艺术家定制的版本控制
- en: Gluon is recommended for artists who are using Unity Version Control to streamline
    art production workflows. Gluon provides an easy-to-use file management interface
    that allows you to select specific files to work on without the need to download
    and manage the entire project. Additionally, Gluon enables users to lock files
    (across branches), ensuring exclusive access to art assets so that no one else
    can modify the same file simultaneously and then seamlessly submit changes back
    to the repository. The ability to lock and unlock assets as needed during work
    enables smoother collaboration within a game production team.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Gluon 建议使用 Unity 版本控制的艺术家使用 Gluon 来简化艺术生产工作流程。Gluon 提供了一个易于使用的文件管理界面，允许您选择要工作的特定文件，而无需下载和管理整个项目。此外，Gluon
    允许用户锁定文件（跨分支），确保对艺术资产具有独家访问权限，这样就没有其他人可以同时修改同一文件，然后无缝地将更改提交回存储库。在工作过程中根据需要锁定和解锁资产的能力，使得游戏制作团队内的协作更加顺畅。
- en: '*Figure 15**.3* shows the simplified artist-centric Gluon workspace interface,
    which provides artists and designers with the **Workspace Explorer**, **Checkin
    Changes**, **Incoming Changes**, and **Changesets** features:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 15**.3* 展示了以艺术家为中心的简化 Gluon 工作区界面，它为艺术家和设计师提供了 **工作区资源管理器**、**检查更改**、**传入更改**
    和 **更改集** 功能：'
- en: '![Figure 15.3 – Unity Version Control Gluon workspace](img/B18347_15_03.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – Unity 版本控制 Gluon 工作区](img/B18347_15_03.jpg)'
- en: Figure 15.3 – Unity Version Control Gluon workspace
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – Unity 版本控制 Gluon 工作区
- en: Additional reading | Gluon
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Gluon
- en: 'Version control for artists: [https://unity.com/solutions/version-control-artists](https://unity.com/solutions/version-control-artists)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 艺术家的版本控制：[https://unity.com/solutions/version-control-artists](https://unity.com/solutions/version-control-artists)
- en: 'Gluon also offers a unique feature that benefits artists directly: it has a
    built-in image viewer diff tool! With it, you can compare two versions of the
    same file from the change history so that there’s never a question of what changes
    were made, when, and by whom to the art assets in our projects. A Gluon workspace
    alone can be used as a robust asset management platform. Gluon works well with
    standard image formats such as PNG and JPG but can support additional formats
    with preview generators (for example, by adding **ImageMagick** as an external
    preview tool to add support for over 100 additional formats).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Gluon 还提供了一项直接造福艺术家的独特功能：它内置了图像查看器差异工具！使用它，您可以从更改历史中比较同一文件的两个版本，从而确保永远不会对项目中的艺术资产进行了哪些更改、何时更改以及由谁更改产生疑问。仅
    Gluon 工作区本身就可以用作强大的资产管理平台。Gluon 与标准图像格式（如 PNG 和 JPG）兼容良好，但可以通过预览生成器支持其他格式（例如，通过添加
    **ImageMagick** 作为外部预览工具以支持超过 100 种额外的格式）。
- en: Gluon’s image diff tool
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Gluon 的图像差异工具
- en: With Gluon’s image diff tool, you can view images side by side, use an “onion
    skin” preview, calculate differences, do a “swipe,” and even compare image properties
    in text format.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gluon 的图像差异工具，您可以并排查看图像，使用“洋葱皮”预览，计算差异，进行“滑动”，甚至以文本格式比较图像属性。
- en: Not only does Unity Version Control provide all the VCS tooling for daily operations
    such as checking in changes (that is, committing and pushing) and uploading to
    a cloud repository, handling incoming changes (that is, pulling), and merging
    and resolving file change conflicts within its workspace, it’s also fully compatible
    with the popular Git **distributed version control system** (**DVCS**). Let’s
    quickly look at how Unity Version Control operates as a Git client.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅 Unity 版本控制提供了所有日常操作所需的 VCS 工具，例如检查更改（即提交和推送）、上传到云存储库、处理传入的更改（即拉取）以及在工作区内部合并和解决文件更改冲突，而且它还完全兼容流行的
    Git **分布式版本控制系统**（**DVCS**）。让我们快速了解一下 Unity 版本控制作为 Git 客户端的工作方式。
- en: Catering VCS for Git
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Git 提供版本控制服务
- en: For Git users, yes, Unity Version Control also has you covered – it also speaks
    the Git network protocol. It can push and pull changes directly with any remote
    Git server (such as **GitHub**, **GitLab**, or **Bitbucket**). The **Git Sync**
    feature, which is implemented in **Branch Explorer** (seen in *Figure 15**.7*)
    with a simple right-click menu, where you can choose **Push/Pull** | **Sync with
    Git…**, immediately turns Unity Version Control into a VCS that’s fully compatible
    with Git bidirectional synchronization. The advantage is that you can use Unity
    Version Control for all your DVCS client needs, either with a Unity Version Control
    workspace or a Git project.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Git用户来说，是的，Unity版本控制也为您提供了支持——它也支持Git网络协议。它可以直接与任何远程Git服务器（如**GitHub**、**GitLab**或**Bitbucket**）推送和拉取更改。**Git同步**功能，在**分支浏览器**（如*图15.7*所示）中通过简单的右键菜单实现，您可以选择**推送/拉取**
    | **与Git同步…**，立即将Unity版本控制转变为与Git双向同步完全兼容的VCS。优势在于，您可以使用Unity版本控制满足所有DVCS客户端需求，无论是使用Unity版本控制工作区还是Git项目。
- en: Additional reading | Git
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Git
- en: 'Git is a popular free and open source DVCS: [https://git-scm.com/](https://git-scm.com/).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个流行的免费开源分布式版本控制系统：[https://git-scm.com/](https://git-scm.com/)。
- en: However, Unity Version Control is designed to manage game-specific assets quickly
    and efficiently, even when dealing with huge files and binaries. This makes it
    an effective alternative to Git, especially Git **large file support** (**LFS**),
    which is known for its tendency to have issues. Whether your game assets are large
    or small, Unity Version Control offers a fast and efficient way to manage them
    all in your game projects.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Unity版本控制旨在快速有效地管理游戏特定资产，即使处理大文件和二进制文件也是如此。这使得它成为Git（特别是以其易出问题的倾向而闻名的Git
    **大文件支持**（**LFS**））的有效替代品。无论您的游戏资产大小如何，Unity版本控制都提供了一种快速有效的方法来管理您游戏项目中的所有资产。
- en: Okay, enough on practices and workflows – let’s set up our first Unity Version
    Control cloud workspace for a new Unity project.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，关于实践和工作流程就说到这里——让我们为新的Unity项目设置第一个Unity版本控制云工作区。
- en: Setting up Unity Version Control
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Unity版本控制
- en: Unity has made adding version control to your projects as frictionless as possible
    by adding an option directly in the **Unity Hub** interface when creating a new
    project. You simply need to select a checkbox, as seen in *Figure 15**.4*. Use
    Unity Version Control? Check – yes, please!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Unity通过在创建新项目时直接在**Unity Hub**界面中添加一个选项，使得将版本控制添加到您的项目尽可能无摩擦。您只需选择一个复选框，如*图15.4*所示。使用Unity版本控制？勾选——请使用！
- en: '![Figure 15.4 – Unity Hub showing a new version-controlled project](img/B18347_15_04.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4 – Unity Hub显示一个新版本控制项目](img/B18347_15_04.jpg)'
- en: Figure 15.4 – Unity Hub showing a new version-controlled project
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4 – Unity Hub显示一个新版本控制项目
- en: 'When creating a project in Unity Hub, referring to *Figure 15**.4*, we must
    create and link a version control workspace by following these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity Hub中创建项目时，参照*图15.4*，我们必须按照以下步骤创建和链接一个版本控制工作区：
- en: Open **Unity Hub** and click the **New Project** button (top-right of the window).
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Unity Hub**并单击**新建项目**按钮（窗口右上角）。
- en: Select a template on which to base your new project (download the template if
    required).
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个模板作为您新项目的基准（如果需要，请下载模板）。
- en: 'Now, under the **PROJECT SETTINGS** section (right-hand side of the window),
    fill out the required fields:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**项目设置**部分（窗口的右侧），填写所需的字段：
- en: '**Project name**: The name you’ll assign this project (something like “my awesome
    game” – no special characters).'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目名称**: 您将为该项目分配的名称（例如“我的精彩游戏”——不包含特殊字符）。'
- en: '**Location**: Where you’ll store the project files on your local system drive
    (use a short path and no special characters).'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**: 您将在本地系统驱动器上存储项目文件的位置（使用短路径且不包含特殊字符）。'
- en: '**Unity Cloud Organization**: You must select an organization for your project.'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity云组织**: 您必须为您的项目选择一个组织。'
- en: '**Connect to Unity Cloud**: Optional; enable this option if you intend to use
    UGS with this project (considering we already discussed all the benefits of UGS,
    we’d be doing ourselves a disservice if we don’t enable it).'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接到Unity云**: 可选；如果您打算使用UGS来处理此项目（考虑到我们已经讨论了UGS的所有优点，如果我们不启用它，那将是对自己的一种不公），请启用此选项。'
- en: '**Use Unity Version Control**: Finally, here we are. This is optional, but
    we should surely enable this option for our “my awesome game” project so that
    we don’t lose any of our development work!'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Unity版本控制**: 最后，我们到了这里。这是可选的，但我们应该确保为我们的“我的精彩游戏”项目启用此选项，这样我们就不会丢失任何开发工作！'
- en: Click **Create project**.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建项目**。
- en: 'Let Unity do its thing, creating the project and Unity Version Control workspace
    locally and in Unity Cloud. When Unity Editor opens, we’ll be greeted by the **Unity
    Version Control** window. As we can see, we already have some pending file changes
    to check in:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让Unity做它的事情，在本地和Unity Cloud中创建项目和Unity版本控制工作区。当Unity编辑器打开时，我们将被**Unity版本控制**窗口欢迎。正如我们所看到的，我们已经有了一些挂起的文件更改要提交：
- en: '![Figure 15.5 – Unity Editor’s Unity Version Control window](img/B18347_15_05.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图15.5 – Unity编辑器的Unity版本控制窗口](img/B18347_15_05.jpg)'
- en: Figure 15.5 – Unity Editor’s Unity Version Control window
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5 – Unity编辑器的Unity版本控制窗口
- en: At any time, if you need the **Unity Version Control** window because it’s not
    currently showing, go to **Window** | **Unity Version Control** or click the button
    to the right of the *Manage services* (cloud icon) button (top left, directly
    under the file menu).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，如果您需要**Unity版本控制**窗口但当前没有显示，请转到**窗口** | **Unity版本控制**或点击*管理服务*（云图标）按钮右侧的按钮（左上角，直接位于文件菜单下方）。
- en: Tip
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also quickly use the standalone Unity Version Control desktop application,
    shown in *Figure 15**.5*, by clicking the gear icon and selecting **Open in**
    **Desktop App**.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过点击齿轮图标并选择**在桌面应用程序中打开**来快速使用独立的Unity版本控制桌面应用程序，如*图15.5*所示。
- en: As seen in *Figure 15**.5*, these files are the default assets Unity adds to
    a new project. They only exist locally in our project folder, so we need to inform
    the Unity Version Control workspace that we have these changes to track. We can
    do that by using the **Pending Changes** tab, confirming the files we want selected,
    and checking in the changes (or, in Git terms, **commit**).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图15.5*所示，这些文件是Unity添加到新项目的默认资源。它们仅存在于我们的项目文件夹中，因此我们需要通知Unity版本控制工作区我们有这些更改要跟踪。我们可以通过使用**挂起更改**选项卡，确认我们想要选择的文件，并提交更改（或在Git术语中，**提交**）来实现。
- en: '**Initial commit** is a common first commit message for a changeset, meaning
    this is the beginning of our workspace, or repository, history, so enter that
    in the text box provided at the bottom. Check the check box next to **Added and
    private** because we want all these files, too, then click **Check in Changes**.
    This will create a changeset and a file version history for all the files in the
    changeset. Yay! You’ve just made your first VCS commit!'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**初始提交**是更改集的常见第一个提交信息，这意味着这是我们工作区或存储库历史的开始，所以请在提供的文本框中输入。勾选**添加并私有**旁边的复选框，因为我们也想包含所有这些文件，然后点击**提交更改**。这将为更改集中的所有文件创建一个更改集和文件版本历史。太好了！您刚刚完成了第一个VCS提交！'
- en: Committing best practices
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 提交最佳实践
- en: Commit small, commit often. Or, at the very least, commit at the end of your
    workday to ensure no work progress is lost. It’s also good to test your work before
    committing and use a clear and concise commit message (for example, include why
    the change was made, not just what was changed).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 小步提交，频繁提交。或者，至少在您的工作日结束时提交，以确保不会丢失任何工作进度。在提交之前测试您的工作并使用清晰简洁的提交信息（例如，包括更改的原因，而不仅仅是更改了什么）也是好的。
- en: The Unity Cloud dashboard also provides a browser-based interface for managing
    Unity Version Control repositories. It allows users to visualize and interface
    with their project’s version history, branches, changesets, code reviews, and
    file locks. Seats and user groups are also available for team management, and
    usage reporting is available for tracking billing.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Cloud仪表板还提供了一个基于浏览器的界面来管理Unity版本控制存储库。它允许用户可视化并与其项目的版本历史、分支、更改集、代码审查和文件锁定进行交互。还有座位和用户组可供团队管理，并且有使用报告可供跟踪计费。
- en: 'You can view your game project’s cloud repository by opening Unity Cloud in
    your browser ([http://cloud.unity.com](http://cloud.unity.com)) and going to **DevOps**
    | **Repositories**:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在浏览器中打开Unity Cloud（[http://cloud.unity.com](http://cloud.unity.com)）并转到**DevOps**
    | **Repositories**来查看您的游戏项目的云存储库：
- en: '![Figure 15.6 – Unity Cloud repositories dashboard](img/B18347_15_06.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6 – Unity Cloud存储库仪表板](img/B18347_15_06.jpg)'
- en: Figure 15.6 – Unity Cloud repositories dashboard
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6 – Unity Cloud存储库仪表板
- en: The VCS workflow is very simple and straightforward for a solo developer. You
    are the only person making changes, and you’ll rarely, if ever, conflict with
    yourself while performing daily work in your solo-member workspace.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于独立开发者来说，VCS工作流程非常简单直接。您是唯一进行更改的人，在您的独立成员工作区进行日常工作时，您很少会与自己发生冲突。
- en: Pulling best practices
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取最佳实践
- en: A common best practice for project teams is to regularly update their working
    copy by pulling the latest changes from the cloud repository to work from before
    starting new work or making further changes. That way, the team always builds
    upon moving the project code base forward.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于项目团队来说，一个常见的最佳实践是定期更新他们的工作副本，通过从云存储库中拉取最新更改来在新工作或进一步更改之前开始工作。这样，团队始终在推动项目代码库向前发展的基础上构建。
- en: You may, however, want to revert some changes to an earlier version. So, for
    those situations and if you’re working with a team of developers in the same workspace,
    we must consider some best practices for setting up a Unity project for collaboration
    to minimize file merge conflicts.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能希望将一些更改还原到早期版本。因此，在这些情况下，如果你与同一工作空间中的开发团队一起工作，我们必须考虑一些设置 Unity 项目以协作的最佳实践，以最大限度地减少文件合并冲突。
- en: Setting up a collaborative project structure
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置协作项目结构
- en: When setting up a Unity project for version control, adopting a project architecture
    designed for better collaboration is essential to help prevent workflow conflicts
    between team members. A well-organized project structure and clear guidelines
    for scene organization and prefab workflows can significantly reduce the likelihood
    of conflicts and problematic merge issues that are often encountered with Unity
    scene and Prefabs assets and any binary files that cannot merge.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当为版本控制设置 Unity 项目时，采用专为更好协作设计的项目架构是至关重要的，这有助于防止团队成员之间的工作流程冲突。一个组织良好的项目结构和清晰的场景组织以及预制件工作流程指南可以显著降低冲突和合并问题的可能性，这些问题在处理
    Unity 场景和预制件资产以及任何无法合并的二进制文件时经常遇到。
- en: Project organization and VCS best practices eBook (Unity)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 项目组织和 VCS 最佳实践电子书（Unity）
- en: 'Version control and project organization best practices for game developers:
    [https://unity.com/resources/version-control-project-organization-best-practices-ebook](https://unity.com/resources/version-control-project-organization-best-practices-ebook)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发者版本控制和项目组织最佳实践：[https://unity.com/resources/version-control-project-organization-best-practices-ebook](https://unity.com/resources/version-control-project-organization-best-practices-ebook)
- en: 'The two aspects for better project structure that we touched on previously,
    namely Prefabs and scenes, deserve a bit more context, so let’s have a quick look
    at them:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到的两个改善项目结构的方面，即预制件和场景，需要更多的背景信息，因此让我们快速了解一下它们：
- en: '**Prefab workflow**: Prefab workflows are crucial for efficient collaboration
    in Unity projects. Prefabs allow for modular game design, where game objects are
    pre-made objects that form the Scene Hierarchy and are put together to create
    all the necessary functionality. Prefab changes are carefully managed and communicated
    to minimize conflicts and ensure consistency. Still, they are updated separately
    from scene changes to prevent unintentional simultaneous scene updates by multiple
    team members.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预制件工作流程**：预制件工作流程对于 Unity 项目中的高效协作至关重要。预制件允许进行模块化游戏设计，其中游戏对象是预先制作的对象，它们构成了场景层次结构，并组合在一起以创建所有必要的功能。预制件更改被仔细管理和沟通，以最大限度地减少冲突并确保一致性。尽管如此，它们是独立于场景更改进行更新的，以防止多个团队成员无意中同时更新场景。'
- en: '**Additive scene workflow**: When it comes to managing scenes in Unity, it’s
    important to have collaborative workflows and organization strategies in place.
    Using an additive scene approach allows multiple developers to work on different
    aspects of the same level simultaneously by sectioning a level into main scenes
    and additive scenes (such as lighting, gameplay elements, or UI components); teams
    can work on different scenes in parallel and bring them together at runtime without
    conflicts. Additionally, ensure that Unity’s scene serialization is used in text
    mode (the default for version control) to make it easier for VCS to track changes
    and use merge tools such as **UnityYAMLMerge**.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量场景工作流程**：在管理 Unity 中的场景时，拥有协作工作流程和组织策略至关重要。使用增量场景方法允许多个开发者通过将级别划分为主要场景和增量场景（如照明、游戏元素或
    UI 组件）来同时处理同一级别的不同方面；团队可以并行处理不同的场景，并在运行时将它们合并在一起而不会发生冲突。此外，确保使用 Unity 的场景序列化在文本模式下（版本控制的默认模式）进行，以便
    VCS 更容易跟踪更改并使用合并工具，如 **UnityYAMLMerge**。'
- en: In addition to these Unity project-specific collaborative workflows, we can
    also use VCS team workflows, such as *branch per feature* or even *branch* *per
    task*.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些 Unity 项目特定的协作工作流程之外，我们还可以使用 VCS 团队工作流程，例如 *按功能分支* 或甚至 *按任务分支*。
- en: When developing new features or working on specific project tasks, it’s often
    helpful for teams to work in isolated branches rather than use a single main (or
    master) branch. This approach facilitates collaboration by allowing each feature
    to progress on its own timeline, reducing conflicts and enabling parallel development
    among the team. As a result, team workflow is smoother, and project management
    becomes more organized.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发新功能或处理特定项目任务时，团队在隔离的分支上工作，而不是使用单个主（或master）分支，通常很有帮助。这种方法通过允许每个功能在自己的时间线上独立进展，减少冲突并使团队并行开发成为可能。因此，团队工作流程更顺畅，项目管理更加有序。
- en: Git Flow
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Git Flow
- en: In Git, **Git Flow** is a workflow that employs different branches for features,
    bug fixes, and releases.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，**Git Flow**是一种使用不同分支来处理功能、错误修复和发布的流程。
- en: 'In *Figure 15**.7*, we can see how Unity Version Control visualizes the workspace
    branches. Additional branches will show up as forked from the changeset of the
    source branch:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图15.7*中，我们可以看到Unity版本控制如何可视化工作区分支。额外的分支将作为从源分支的变更集分叉出来显示：
- en: '![Figure 15.7 – Unity Version Control branch explorer with changesets](img/B18347_15_07.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图15.7 – Unity版本控制分支浏览器和变更集](img/B18347_15_07.jpg)'
- en: Figure 15.7 – Unity Version Control branch explorer with changesets
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7 – Unity版本控制分支浏览器和变更集
- en: Pull request (PR) | code review
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 提交请求（PR）| 代码审查
- en: After completing work on a feature branch, it’s a good practice to create a
    **pull request** (**PR**) to merge the changes into the dev/develop branch (before
    merging into the main branch for distribution). The team leader or a designated
    senior developer on the DevOps team should review the changes before accepting
    and merging the request.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成功能分支的工作后，创建一个**提交请求**（**PR**）将更改合并到dev/develop分支（在合并到用于分发的主分支之前）是一个好习惯。团队领导或DevOps团队指定的资深开发者应在接受和合并请求之前审查更改。
- en: 'In Unity Version Control, we don’t have PRs per se (it’s a Git concept). Instead,
    we have a whole code review system: [https://docs.plasticscm.com/code-review](https://docs.plasticscm.com/code-review).'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity版本控制中，我们本身没有PR（这是一个Git概念）。相反，我们有一个完整的代码审查系统：[https://docs.plasticscm.com/code-review](https://docs.plasticscm.com/code-review)。
- en: Once work has been completed on a features branch, using a PR or code review
    process is good practice to merge the work into the Dev (develop) branch. It’s
    the responsibility of the team leader or designated senior developer on the DevOps
    team to review before accepting and merging the request.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在功能分支上完成工作，使用PR或代码审查流程将工作合并到Dev（develop）分支是一个好习惯。团队领导或DevOps团队指定的资深开发者有责任在接收和合并请求之前进行审查。
- en: At the end of the day, what matters most is that you – or your development team
    – feel at ease with the VCS workflow. However, it’s not always possible to avoid
    merge conflicts, no matter how strictly we adhere to the best workflow practices
    and collaboration strategies. So, when faced with the inevitable task of resolving
    merge conflicts, we rely on merge tools to help us through.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最重要的是你——或者你的开发团队——对VCS工作流程感到舒适。然而，无论我们多么严格地遵循最佳工作流程实践和协作策略，避免合并冲突并不总是可能的。因此，当面对不可避免的任务——解决合并冲突时，我们依赖合并工具来帮助我们。
- en: Merging conflicting file changes
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并冲突的文件更改
- en: 'Unity Version Control comes with a powerful merge tool and merge configuration
    settings designed specifically for handling merges in Unity projects. The merge
    configuration allows us to specify asset-specific merge tools such as **UnityYAMLMerge**
    for Unity scene files and **Semantic Merge** for most other text-based file assets:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Unity版本控制附带了一个强大的合并工具和针对处理Unity项目合并专门设计的合并配置设置。合并配置允许我们指定特定资产的合并工具，例如**UnityYAMLMerge**用于Unity场景文件和**语义合并**用于大多数其他基于文本的文件资产：
- en: '**UnityYAMLMerge**: A merge tool that’s specific for merging scene and prefab
    files in YAML format. It understands the structure of Unity-specific assets, making
    it more intelligent than text-based merge tools. It is an invaluable asset for
    teams working on Unity projects, and Unity Version Control’s default configuration
    includes it.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UnityYAMLMerge**：一个专门用于合并YAML格式的场景和预制件文件的合并工具。它理解Unity特定资产的结构，使其比基于文本的合并工具更智能。对于在Unity项目中工作的团队来说，这是一个无价的资产，Unity版本控制的默认配置包括它。'
- en: '**Semantic Merge**: An intelligent C# language-dependent merge tool that can
    resolve code conflicts efficiently, mostly automatically, because it understands
    code structure beyond simple text differences.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语义合并**：一个智能的C#语言依赖合并工具，可以有效地解决代码冲突，大多数情况下是自动的，因为它理解代码结构而不仅仅是简单的文本差异。'
- en: Viewing file history and differences
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 查看文件历史和差异
- en: You can right-click on any script or asset at any time in the Unity Editor’s
    **Project** window and select **Unity Version Control** | **View** **file history**.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Unity编辑器的**项目**窗口中随时右键单击任何脚本或资产，并选择**Unity版本控制** | **查看** **文件历史**。
- en: Alternatively, you can select **Unity Version Control** | **Diff with previous
    revision** to see file-specific changes between the two.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以选择**Unity版本控制** | **与上一个版本比较差异**，以查看两个版本之间的文件特定更改。
- en: I hope I have convinced you of the value of using the Unity version control
    system in your game project – or any VCS. We learned how to set up Unity Version
    Control for a new Unity project, the basics of checking in our work, and some
    best practices for organizing our project for team collaboration.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我已经说服了你使用Unity版本控制系统在您的游戏项目中——或者任何VCS——的价值。我们学习了如何为新Unity项目设置Unity版本控制，检查我们工作的基础知识，以及为团队协作组织项目的最佳实践。
- en: Unity Version Control pricing
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Unity版本控制定价
- en: 'Unity Version Control enables you, or your team, to safely and securely store
    and work with your game project assets and data in parallel: [https://unity.com/products/unity-devops#pricing](https://unity.com/products/unity-devops#pricing).'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Unity版本控制使您或您的团队能够安全、安全地存储和并行处理您的游戏项目资产和数据：[https://unity.com/products/unity-devops#pricing](https://unity.com/products/unity-devops#pricing)。
- en: Unity provides 1 to 3 seats and 5 GB of storage for free. You only pay for additional
    seats (per seat per month for additional team members) and anything above 5 GB
    of storage (per GB per month).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Unity提供1到3个免费座位和5GB的存储空间。您只需为额外的座位（每个额外团队成员每月一个座位）以及超过5GB的存储空间（每月每GB）付费。
- en: I relied on Unity Version Control throughout the entire process of creating
    the projects for this book. You didn’t think I would want to risk losing my work
    at any point during the project’s progress, did you?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我在整个创建本书项目的过程中都依赖Unity版本控制。你以为我会想在项目进展的任何阶段冒险丢失我的工作，对吧？
- en: In the next section, we’ll continue our discussion for preparing our games for
    commercial release with an overview of an in-game economy.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续讨论为我们的游戏准备商业发布，概述游戏内经济。
- en: Engaging players with an in-game economy
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过游戏内经济吸引玩家
- en: In-game economies are critical for commercial success and warrant our attention
    when designing our games. Different monetization mechanisms, when designing our
    game mechanics, play a significant role in our ability to generate revenue within
    the game, which is distinct from commercialization efforts such as marketing and
    distribution.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的经济对于商业成功至关重要，在设计我们的游戏时值得我们关注。在设计游戏机制时，不同的盈利机制在我们的游戏内生成收入的能力中起着重要作用，这与商业化努力（如营销和发行）是不同的。
- en: Economy mechanisms can cover a wide range of strategies and differ, sometimes
    drastically, between game platforms and genres. These strategies can include microtransactions,
    ads, virtual currencies, subscription models, or premium game purchases. By understanding
    a few basic nuances between these mechanisms, game producers and developers can
    gain an understanding of effective commercial strategies for their games.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 经济机制可以涵盖广泛的策略，并且在游戏平台和类型之间可能存在巨大差异。这些策略可以包括微交易、广告、虚拟货币、订阅模式或高级游戏购买。通过理解这些机制之间的一些基本细微差别，游戏制作人和开发者可以了解他们游戏的有效商业策略。
- en: Commercialization versus monetization
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 商业化与盈利的区别
- en: The distinction between commercialization and monetization lies in their respective
    focuses. Commercialization is primarily concerned with bringing a game to market
    and making it available to players, while monetization deals with how the game
    generates revenue once it’s in players’ hands.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 商业化和盈利之间的区别在于它们各自的重点。商业化主要关注将游戏推向市场并使其对玩家可用，而盈利则涉及游戏一旦在玩家手中如何产生收入。
- en: Producers have two primary platforms to choose from when launching commercial
    games, and how game economies are structured varies significantly between them.
    These are **mobile** and **PC** – we could even say “free” and premium.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 制作商在发布商业游戏时有两个主要平台可供选择，而且游戏经济结构在这两者之间差异很大。这些是**移动**和**PC**——我们甚至可以说“免费”和付费。
- en: So, let’s quickly look at what each platform’s economic strategy is designed
    to do, starting with mobile.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们快速了解一下每个平台的经济策略旨在做什么，先从移动平台开始。
- en: Economies for mobile games
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动游戏的经济体系
- en: Mobile games often follow a “freemium” or **free-to-play** (**F2P**) model,
    which means they are available for players to download and play without any up-front
    payment. However, the monetization strategy includes buying virtual currency for
    in-game items, watching ads, or paying microtransactions to obtain different gameplay
    advantages. Unsurprisingly, this model is designed to attract a wide range of
    players to download and play the game, meaning your game has to be remarkable
    and fun to be successful since most mobile games only earn from a small fraction
    of their players (churn is real – players need to find the fun fast!).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 移动游戏通常遵循“免费增值”或**免费游玩**（**F2P**）模式，这意味着玩家可以免费下载和游玩，无需预先支付。然而，货币化策略包括购买虚拟货币以获取游戏内物品、观看广告或支付小额交易以获得不同的游戏优势。不出所料，这种模式旨在吸引广泛的玩家下载和游玩游戏，这意味着你的游戏必须引人注目且有趣，才能取得成功，因为大多数移动游戏只从其玩家的一小部分中获得收益（玩家流失是真实存在的——玩家需要快速找到乐趣！）。
- en: 'To get the most out of a commercial game release on mobile, here are some key
    strategies you can focus on in your game design:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要从移动平台上的商业游戏发布中获得最大收益，以下是一些你可以在游戏设计中关注的重点策略：
- en: '**Encourage regular player engagement**: Mobile game developers commonly use
    daily login rewards, quests, events, timers, speed-ups, and even weekly or monthly
    challenges to encourage players to return to the game regularly with the ultimate
    goal of getting players to buy.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼓励玩家定期参与**：移动游戏开发者通常使用每日登录奖励、任务、活动、计时器、加速以及甚至每周或每月的挑战来鼓励玩家定期返回游戏，最终目标是让玩家购买游戏。'
- en: '**Rewarded ad watch**: One way of generating ad revenue is by offering rewards
    to players in exchange for watching the entire ad. Rewards can speed up gameplay
    progress, double virtual currency rewards, or even save the player’s progress.
    You get the ad revenue but also lead the player down a path to buying later on.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**奖励广告观看**：通过向玩家提供观看完整广告的奖励来生成广告收入。奖励可以加快游戏进度，加倍虚拟货币奖励，甚至保存玩家的进度。你获得了广告收入，同时也引导玩家走向未来的购买之路。'
- en: '**In-game purchase offers**: Cosmetic items to gameplay advantages are on offer
    here. However, it’s crucial to balance gameplay advantages to avoid “pay-to-win”
    scenarios, which can tend to drive players away.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏内购买优惠**：提供外观物品和游戏优势。然而，平衡游戏优势以避免“付费获胜”场景至关重要，这可能会驱使玩家离开。'
- en: '**Subscriptions and season passes**: Providing unique content for a limited
    time – evoking a sense of urgency and excitement – can motivate players to keep
    coming back and engage them to keep spending on your game.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅和季票**：提供有限时间内的独特内容——唤起紧迫感和兴奋感——可以激励玩家不断返回并让他们继续在游戏中消费。'
- en: It’s not an extensive list by any means, and implementing these strategies in
    your games’ monetization mechanics requires a lot of subtlety. Still, it would
    be best to have a general sense of what’s needed to introduce an in-game economy
    for your mobile game’s commercial potential.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对不是一份详尽的列表，而且在你的游戏货币化机制中实施这些策略需要很多细微之处。尽管如此，最好对引入游戏内经济以发挥移动游戏商业潜力所需的内容有一个大致的了解。
- en: Next, we’ll examine similar strategies for premium games.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查付费游戏类似的策略。
- en: Economies for premium games
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 付费游戏的经济体系
- en: Premium games, which are purchased upfront and only offer a *free* play experience
    if the publisher provides a demo, focus more on the player’s initial investment
    but may include additional incentives for revenue longevity. To contradict a bit
    of what I just said, though, some titles are F2P but monetize purely through in-game
    purchases and expansion packs. As such, the premium game economy differs significantly
    from mobile games.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 付费游戏，预先购买并提供免费游玩体验（如果发行商提供演示），更注重玩家的初始投资，但可能包括一些额外的激励措施以延长收入。然而，与我说过的内容有些矛盾，一些游戏虽然是F2P，但完全通过游戏内购买和扩展包进行货币化。因此，付费游戏经济与移动游戏存在显著差异。
- en: 'Here are some key strategies you can focus on in your game design to get the
    most out of a commercial game release on PC:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的游戏设计中关注以下关键策略，以充分利用在PC上商业发行游戏的机会：
- en: '**Expansion packs and downloadable content (DLC)**: To extend the life cycle
    and longevity of premium games, new stories and content can be purchased by players
    after their initial release to generate additional revenue. It’s best to account
    for DLC during the development phase because the game architecture must support
    it.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展包和可下载内容（DLC）**：为了延长付费游戏的寿命和持久性，玩家可以在游戏最初发布后购买新故事和内容以产生额外收入。最好在开发阶段就考虑DLC，因为游戏架构必须支持它。'
- en: '**In-game purchase offers**: This one crosses over from mobile since we also
    include cosmetic items and gameplay advantages here. You don’t need to look any
    further than the free-to-play **Fortnite** to know how much revenue can be generated
    from cosmetic items! Again, here, it’s important to balance gameplay advantages
    to avoid “pay-to-win” scenarios – I believe the PC crowd is more inclined to be
    driven away here.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏内购买优惠**：这一策略从移动端延伸而来，因为我们在这里也包括了外观物品和游戏优势。您无需再看其他地方，只需看看免费游玩的**堡垒之夜**，就能知道外观物品可以产生多少收入！同样，在这里，平衡游戏优势以避免“付费获胜”的情况很重要——我相信PC玩家更倾向于因此被驱离。'
- en: '**The game’s initial quality and depth = player trust**: Premium games should
    offer gameplay experiences that justify the price tag to the player (that is,
    the feeling that what they paid for the game is worthwhile). So, in this case,
    the game’s economy should focus on enriching the player experience and not so
    much on encouraging more player spending, which is a difficult balance to strike
    when we try to ensure our investment in making the game is positive from a revenue
    perspective.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏初始质量和深度 = 玩家信任**：付费游戏应提供游戏体验，使玩家觉得游戏价格合理（也就是说，他们觉得为游戏支付的费用是值得的）。因此，在这种情况下，游戏经济应专注于丰富玩家体验，而不是过多地鼓励玩家消费，这在尝试确保我们的游戏投资从收入角度来看是积极的时是一个难以平衡的问题。'
- en: This is also not an extensive list, with the obvious subtleties required to
    implement these strategies being left to your creative mind while we wear our
    economist hat. However, it’s still a good sense of what’s needed to bring in-game
    economies for a premium game’s commercial potential.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这也不是一个详尽的列表，实施这些策略所需的明显细微差别留待您的创意思维，同时我们戴着经济学家的帽子。然而，这仍然是一个很好的感觉，了解如何为付费游戏的商业潜力带来游戏内经济。
- en: Let’s finish our introduction to the in-game economy by examining the contrasting
    strategies and mechanisms of the mobile and PC platforms.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 通过考察移动和PC平台对比的策略和机制，让我们完成对游戏内经济的介绍。
- en: Contrasting economic strategies
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对比经济策略
- en: The platforms we’ve discussed regarding the in-game economy each have distinct
    approaches to engaging players and generating the resulting revenue (hopefully).
    To better understand the differences in the strategies laid out for each one,
    we can simply and clearly compare the key strategies.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的关于游戏内经济的平台各有其独特的吸引玩家和产生相应收入（希望如此）的方法。为了更好地理解为每个平台制定的策略之间的差异，我们可以简单地、清晰地比较关键策略。
- en: 'The following matrix table shows the primary differences between each platform’s
    in-game economy strategy and associated player engagement:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下矩阵表显示了每个平台的游戏内经济策略和关联玩家参与度的主要差异：
- en: '| **Strategy** | **Mobile Games** | **PC (****Premium) Games** |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| **策略** | **移动游戏** | **PC（付费）游戏** |'
- en: '| Engagement versus investment | Focus on constant player engagement and frequent
    but small incentivized transactions | Focus on the initial player investment and
    later offer expanded content with DLCs |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 参与度与投入 | 专注于持续的玩家参与和频繁但小额的激励性交易 | 专注于初始玩家投入，并在之后通过DLC提供扩展内容 |'
- en: '| Accessibility versus depth | Games must be easy to pick up and play, be addictively
    fun, and attract a broad audience of players | Games must offer deeper and more
    complex gameplay experiences to hook long-term players |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 可访问性与深度 | 游戏必须易于上手和游玩，具有上瘾性的乐趣，并吸引广泛的玩家群体 | 游戏必须提供更深层次和更复杂的游戏体验，以吸引长期玩家 |'
- en: '| Monetization frequency | Relies on continuous monetization opportunities
    employing several strategies for player spending | Relies on monetizing through
    fewer but more significant player spending, if any, beyond the initial game purchase
    |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 收入频率 | 依赖于连续的货币化机会，采用多种策略来促进玩家消费 | 依赖于通过更少但更重要的玩家消费（如果有的话）进行货币化，超出初始游戏购买
    |'
- en: Table 15.1 – In-game economy contrast between mobile and PC games
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 表15.1 – 移动和PC游戏游戏内经济对比
- en: Creating an in-game economy is a delicate task that requires many disciplines,
    including a mashup of gameplay design and fair monetization strategies. For mobile
    games, the challenge lies in attracting and then engaging a small percentage of
    players to convince them to spend real money on an otherwise free experience.
    And for premium PC games, the challenge lies initially in offering enough upfront
    value to players that they’ll gladly justify purchasing your game. Then, it’s
    up to you to engage them to want to spend more for additional content. Both economies
    require a thorough understanding of your target player demographic and your ability
    to avoid introducing undesirable monetization approaches.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 创建游戏内经济是一个需要许多学科的知识，包括游戏玩法设计和公平货币化策略的融合。对于移动游戏来说，挑战在于吸引并保持一小部分玩家的兴趣，使他们愿意为免费体验支付真实货币。而对于高级PC游戏，最初的挑战在于提供给玩家足够的前期价值，使他们愿意购买你的游戏。然后，就取决于你如何吸引他们，使他们愿意为额外内容支付更多。这两种经济都需要深入了解你的目标玩家群体以及避免引入不理想的货币化方法的能力。
- en: In this section, you learned the basics of an in-game economy for mobile and
    PC platforms. Of course, a lot more can be learned here, so I encourage you to
    do additional reading on the topics that appeal most to your game’s design. As
    it would happen, Unity provides best practices and guides on the subject too!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了移动和PC平台上游戏内经济的基础知识。当然，这里还有很多可以学习的内容，所以我鼓励你阅读对你游戏设计最有吸引力的主题。顺便说一句，Unity也提供了关于这个主题的最佳实践和指南！
- en: What is an in-game economy | Unity
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是游戏内经济 | Unity
- en: 'The first guide in a series about the in-game economy: [https://unity.com/how-to/what-is-in-game-economy-guide-part-1](https://unity.com/how-to/what-is-in-game-economy-guide-part-1).'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 关于游戏内经济系列指南的第一篇：[https://unity.com/how-to/what-is-in-game-economy-guide-part-1](https://unity.com/how-to/what-is-in-game-economy-guide-part-1)。
- en: In the next section, we’ll explore the platform distribution aspect of a game
    production’s life cycle.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨游戏生产生命周期中的平台分发方面。
- en: Getting your game out there! Platform distribution
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的游戏推向市场！平台分发
- en: In the previous section, we talked about the mobile and PC platforms concerning
    the in-game economies. However, we did not go into detail about distributing to
    these platforms. Well, now’s the time.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了与移动和PC平台相关的游戏内经济。然而，我们没有详细讨论将这些平台上的分发。好吧，现在是时候了。
- en: In this section, we’ll examine the options available for distributing our games
    on mobile and PC platforms. This will be a high-level review of the processes,
    with a focus geared more toward commercial releases. I’ll also provide links for
    each platform for the – in most cases – step-by-step details of preparing our
    game for distribution on that platform.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在移动和PC平台上分发我们的游戏的可选方案。这将是一个高级别的流程回顾，重点更多地放在商业发行上。我还会为每个平台提供链接，以获取在大多数情况下准备在该平台上分发我们的游戏的详细步骤。
- en: Console distribution
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏机分发
- en: For console distribution platforms such as **PlayStation**, **Xbox**, and **Nintendo
    Switch**, a game developer – who is not associated with a large AAA studio – will
    face additional challenges regarding these platforms. The additional set of requirements
    for getting our games on consoles generally involves such things as a rigorous
    approval process, purchase of a costly developer’s kit, a lengthy and complicated
    code porting process, and conforming to specific standards and performance requirements.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像**PlayStation**、**Xbox**和**Nintendo Switch**这样的游戏机分发平台，一个与大型AAA工作室无关的游戏开发者将面临这些平台上的额外挑战。将我们的游戏带到游戏机上的额外要求通常包括严格的审批流程、购买昂贵的开发者套件、漫长而复杂的代码移植过程，以及符合特定的标准和性能要求。
- en: Starting with mobile, let’s discover what’s available to get our game into players’
    hands.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 从移动平台开始，让我们看看如何将我们的游戏带给玩家手中。
- en: Distributing on mobile platforms
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在移动平台上分发
- en: In the world of mobile game distribution, there are two key players to be aware
    of – let’s face it, most people old enough to buy a smartphone or tablet device
    know what they are – the **Google Play Store** and the **Apple** **App Store**.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动游戏分发的世界中，有两个关键玩家需要了解——说实话，大多数足够购买智能手机或平板电脑设备的人都知道它们是什么——那就是**谷歌Play商店**和**苹果App
    Store**。
- en: These mobile-centric platforms, or storefronts, offer developers access to a
    vast global audience without much friction in accessing the platform and building
    our games – especially when using Unity. However, developers are challenged with
    standing out in a crowded marketplace and competing with large studios (and large
    marketing budgets!), so it’s critical to optimize for discoverability with not
    only a remarkable game but also learning the ins and outs of **app store** **optimization**
    (**ASO**).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这些以移动为中心的平台或商店为开发者提供了访问庞大全球受众的机会，而无需太多摩擦即可访问平台和构建我们的游戏——尤其是在使用Unity的情况下。然而，开发者面临着在拥挤的市场中脱颖而出并与大工作室（以及大营销预算！）竞争的挑战，因此，仅通过一款出色的游戏来优化可发现性是至关重要的，同时还要了解**应用商店优化**（**ASO**）的方方面面。
- en: The free-to-play model is king on mobile storefronts since it’s what the storefronts
    provide significant support for and is generally what players still expect. As
    mentioned in the previous section, *Engaging players with an in-game economy*,
    and aligning with player expectations, we’ll want to consider the platform’s built-in
    payment systems for in-app purchases and ads for revenue.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动商店中，免费游玩模式是主流，因为这是商店提供大量支持的模式，也是玩家普遍期望的模式。如前所述，通过*在游戏中引入经济体系*并与玩家期望保持一致，我们将考虑平台内置的支付系统以进行应用内购买和广告以获取收入。
- en: Let’s start with an overview of the publishing requirements for the Google Play
    Store.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从谷歌应用商店的发布要求概述开始。
- en: Publishing on the Google Play Store
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在谷歌应用商店发布
- en: Developers looking to publish their games on the Google Play Store must understand
    both the technical and financial aspects of the platform – this is true not only
    for the Google Play Store but also for any of the distribution platforms available
    to us.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 希望在谷歌应用商店发布游戏的开发者必须了解该平台的技术和财务方面——这不仅适用于谷歌应用商店，也适用于我们可用的任何其他分发平台。
- en: Considering the technical aspects, publishing to the Google Play Store means
    building our games for the **Android** platform. Unity offers great support building
    for Android and provides many settings for customizing the game builds (such as
    a graphics API, texture compression, quality settings, and a scripting backend).
    In addition, Unity provides scripting API access to mobile-specific device features
    such as touch input, camera, vibration, gyroscope and accelerometer, location
    services, notifications, and AR support (**ARCore**).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到技术方面，发布到谷歌应用商店意味着为**Android**平台构建我们的游戏。Unity为Android平台提供了出色的支持，并提供了许多设置来定制游戏构建（例如图形API、纹理压缩、质量设置和脚本后端）。此外，Unity还提供了对移动特定设备功能的脚本API访问，例如触摸输入、摄像头、震动、陀螺仪和加速度计、位置服务、通知以及AR支持（**ARCore**）。
- en: Android screen resolutions
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Android屏幕分辨率
- en: Adapting games for Android devices poses a significant challenge to mobile developers
    because of the eye-widening number of screen resolutions, aspect ratios, display
    notches and cutouts, and now foldables out in the wild west of device manufacturers.
    This requires the game developer to put on their UI designer hat and implement
    responsive and flexible UI design strategies to ensure an optimal viewing experience
    within the screens’ safe areas across devices.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 由于屏幕分辨率、纵横比、显示刘海和挖孔以及现在在设备制造商的狂野西部出现的可折叠设备数量众多，为Android设备适配游戏对移动开发者来说是一个巨大的挑战。这要求游戏开发者戴上他们的UI设计师帽子，并实施响应式和灵活的UI设计策略，以确保在设备屏幕的安全区域内获得最佳观看体验。
- en: Each distribution platform generally offers a unique set of value-added services
    specific to its platform that developers can incorporate into their game designs.
    Google offers its **Google Play Games Services**, which include sign-in, saved
    games, achievements, leaderboards, friends, player stats, and events.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分发平台通常都提供一套独特的增值服务，这些服务针对其平台特定，开发者可以将这些服务纳入他们的游戏设计中。谷歌提供了其**谷歌应用游戏服务**，包括登录、保存游戏、成就、排行榜、朋友、玩家统计数据和活动。
- en: Google Play Store | distribution information
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌应用商店 | 分发信息
- en: 'Release with confidence: [https://play.google.com/console/about/guides/releasewithconfidence/](https://play.google.com/console/about/guides/releasewithconfidence/)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 有信心发布：[https://play.google.com/console/about/guides/releasewithconfidence/](https://play.google.com/console/about/guides/releasewithconfidence/)
- en: Now, let’s review the publishing requirements for the Apple App Store.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下苹果应用商店的发布要求。
- en: Publishing on the Apple App Store
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在苹果应用商店发布
- en: Developers looking to publish their games on the Apple App Store must understand
    that it has its own technical and financial aspects for distributing games on
    the platform. Again, this is something true for all platforms.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 希望在苹果应用商店发布游戏的开发者必须了解，该平台在分发游戏方面有其自身的技术和财务方面。同样，这一点适用于所有平台。
- en: When looking to publish games to the Apple App Store, the technical aspects
    involve building our games for the **iOS** platform. Unity has us covered here,
    too, and offers excellent support for building iOS **Xcode** projects. Correct
    – I didn’t say game build. Unity generates an Xcode project to build iOS apps
    and games, so if you want to build a game locally, you must have Xcode installed
    – it’s only available on **macOS** systems. However, Unity Build Automation, which
    we already know from the *Introducing Unity DevOps* section, can build and deploy
    iOS games for you, making it possible to develop an iOS application on non-macOS
    systems.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要将游戏发布到苹果应用商店时，技术方面涉及为**iOS**平台构建我们的游戏。Unity在这里也为我们提供了支持，并提供了构建iOS **Xcode**项目的优秀支持。正确——我没有说游戏构建。Unity会生成一个Xcode项目来构建iOS应用程序和游戏，因此如果您想在本地构建游戏，您必须安装Xcode——它仅在**macOS**系统上可用。然而，我们从*Unity
    DevOps简介*部分已经了解的Unity构建自动化，可以为您构建和部署iOS游戏，使得在非macOS系统上开发iOS应用程序成为可能。
- en: Additional reading | Unity documentation
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity文档
- en: 'Build for iOS: [https://docs.unity3d.com/2022.3/Documentation/Manual/iphone-BuildProcess.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/iphone-BuildProcess.xhtml)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 为iOS构建：[https://docs.unity3d.com/2022.3/Documentation/Manual/iphone-BuildProcess.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/iphone-BuildProcess.xhtml)
- en: Unsurprisingly, Unity also provides scripting API access for iOS device-specific
    features such as touch input, camera, vibration, gyroscope and accelerometer,
    location services, notifications, and AR support (**ARKit**).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，Unity还为iOS设备特定的功能提供了脚本API访问，例如触摸输入、摄像头、震动、陀螺仪和加速度计、位置服务、通知以及AR支持（**ARKit**）。
- en: iOS screen resolutions
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: iOS屏幕分辨率
- en: In contrast to Android, the iOS device ecosystem offers a more consistent range
    of screen resolutions, aspect ratios, and “notched” safe areas to display game
    content and UI within. Apple’s well-controlled hardware designs also mean there
    are fewer device models, each with its well-documented screen specifications.
    This uniformity simplifies game development as we wear our UI-designer hats to
    ensure our games are presented more seamlessly across Apple’s mobile devices.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 与Android相比，iOS设备生态系统提供了更一致的屏幕分辨率、宽高比和“刘海”安全区域，以显示游戏内容和UI。苹果精心控制的硬件设计也意味着设备型号更少，每个型号都有其详尽的屏幕规格文档。这种一致性简化了游戏开发，当我们戴着UI设计师的帽子时，确保我们的游戏在苹果的移动设备上呈现得更加无缝。
- en: 'Apple also offers a range of value-added services specific to its platforms
    that developers can incorporate into their game designs. Apple offers **Game Center**,
    which can be utilized for games targeting **Apple Arcade**. The following services
    are available: player identity, saved games, leaderboards, achievements, and turn-based
    and multiplayer games.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果还为其平台提供一系列特定的增值服务，开发者可以将这些服务整合到他们的游戏设计中。苹果提供了**游戏中心**，可用于针对**苹果 Arcade**的游戏。以下服务可用：玩家身份、保存的游戏、排行榜、成就以及回合制和多玩家游戏。
- en: Apple App Store | distribution information
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果应用商店 | 分发信息
- en: 'Submit your iOS apps to the App Store: [https://developer.apple.com/ios/submit/](https://developer.apple.com/ios/submit/).'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的iOS应用程序提交到应用商店：[https://developer.apple.com/ios/submit/](https://developer.apple.com/ios/submit/).
- en: Additional third-party app stores are available for Android and target smaller
    but more direct markets, such as **Amazon Appstore**, **Samsung Galaxy Store**,
    **Huawei AppGallery**, and **APPTUTTi**.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的第三方应用商店包括Android的**亚马逊应用商店**、**三星Galaxy商店**、**华为应用商店**和**APPTUTTi**。
- en: '**Unity Distribution Portal** ([https://api-udp.unity.com/](https://api-udp.unity.com/))
    attempts to simplify the process of releasing and managing our Android game releases
    to multiple global app stores, so that may be of interest. But there are (currently)
    no such third-party app store markets for iOS.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unity分发门户** ([https://api-udp.unity.com/](https://api-udp.unity.com/))试图简化发布和管理我们的Android游戏到多个全球应用商店的过程，这可能对您有所帮助。但（目前）iOS没有这样的第三方应用商店市场。'
- en: Let’s finish up the mobile distribution platforms with a quick breakdown of
    the financial considerations.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速总结一下移动分发平台的财务考虑因素。
- en: Publishing financials
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布财务信息
- en: 'For the financial aspect, I’ve compiled the essential publishing information
    for developers interested in the Google Play Store and Apple App Store platforms
    in the following table:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在财务方面，我已经在以下表格中整理了对于对 Google Play 商店和 Apple App Store 平台感兴趣的开发者来说的必要发布信息：
- en: '|  | **Registration Fee** | **Revenue Cut** | **Platform** |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '|  | **注册费** | **收入分成** | **平台** |'
- en: '| **Google** **Play Store** | $25 one-time | 70/30% split*30% to Google | Wide
    audience reach, rich games market |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| **Google** **Play Store** | $25 一次性 | 70/30% 分成*30% 归 Google | 广泛的受众覆盖，丰富的游戏市场
    |'
- en: '| **Apple** **App Store** | $99 annual | 70/30% split*30% to Apple | Apple
    device users only, Apple Arcade |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| **Apple** **App Store** | $99 年度 | 70/30% 分成*30% 归 Apple | 仅限 Apple 设备用户，Apple
    Arcade |'
- en: Table 15.2 – Mobile store publishing details
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15.2 – 移动商店发布详情
- en: Note regarding Table 15.2
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 关于表 15.2 的注意事项
- en: '*I’ve greatly simplified this statement because it’s constantly evolving; please
    consult the platform documentation for current information. In some situations,
    the revenue fee is lowered to 15%.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*我大大简化了这个声明，因为它一直在变化；请查阅平台文档以获取最新信息。在某些情况下，收入分成费降低到 15%。*'
- en: That covers mobile-specific distribution platforms, so let’s move on to PC-based
    platforms and explore some of their specific requirements.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了针对移动特定的发行平台，那么让我们继续探讨基于 PC 的平台，并了解它们的一些具体要求。
- en: Distributing on PC platforms
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 PC 平台上发行
- en: PC games have a wider range of distribution options for both commercial sale
    of and non-commercial sharing of our games. For mobile games, the distribution
    is purely digital delivery, whereas PC games can have physical distribution channels,
    too, but we’ll focus only on digital storefronts.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: PC 游戏在商业销售和非商业分享我们的游戏方面有更广泛的发行选项。对于移动游戏，发行完全是数字交付，而 PC 游戏也可以有实体发行渠道，但我们只关注数字店面。
- en: '**Steam** and **Epic Games Store** are the two primary parties involved in
    the PC-based game digital storefronts. The primary commercialization strategy
    for these storefronts is premium. Generally speaking, PC-based players usually
    seek more immersive gameplay experiences than mobile offers, which aligns more
    with the premium model’s focus on upfront purchases or subscriptions.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**Steam** 和 **Epic Games Store** 是 PC 基于游戏数字商店的主要参与者。这些商店的主要商业化策略是高端。一般来说，基于
    PC 的玩家通常寻求比移动游戏更沉浸式的游戏体验，这更符合高端模式对前期购买或订阅的关注。'
- en: However, just as much as with mobile storefronts, developers launching on PC
    game distribution platforms must maximize visibility, navigate channels, and leverage
    platform-specific features to entice players, enhance their engagement, and, of
    course, drive sales.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，就像移动店面一样，在 PC 游戏发行平台上推出的开发者必须最大化可见性，导航渠道，并利用平台特定的功能来吸引玩家，增强他们的参与度，当然，当然，推动销售。
- en: Direct sales
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 直接销售
- en: Game developers can offer their games directly to players from their websites
    as an alternative to PC game storefronts. This approach provides higher revenue
    per sale and complete control over the sales process but does require significant
    effort and investment in marketing, customer service, and infrastructure. Do you
    want to make games and get them in players’ hands or manage an eCommerce website?
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发者可以通过他们的网站直接向玩家提供游戏，作为 PC 游戏商店的替代方案。这种方法提供了每笔销售更高的收入和销售过程的完全控制，但确实需要大量的努力和投资在市场营销、客户服务和基础设施上。你想要制作游戏并将它们送到玩家手中，还是管理一个电子商务网站？
- en: Let’s dive into each of these primary PC game storefronts now, with similar
    coverage to the mobile storefronts, and finish with **Itch.io**, which caters
    more to smaller independent game developers for both premium, donation-based,
    or completely free game distribution.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这些主要的 PC 游戏商店，与移动商店有类似的覆盖范围，并以 **Itch.io** 结尾，它更多地服务于小型独立游戏开发者，无论是高端、基于捐赠还是完全免费的游戏发行。
- en: Publishing on Steam
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Steam 平台发布
- en: It should be no surprise that developers looking to publish their PC games on
    Steam must also navigate and understand this platform’s technical and financial
    aspects.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 对于想要在 Steam 上发布 PC 游戏的开发者来说，必须了解并导航这个平台的技术和财务方面，这并不令人惊讶。
- en: Considering the technical aspects, publishing to Steam means building our games
    for standalone PC platforms, but primarily Windows (Mac and Linux are also supported).
    Before being able to publish our Unity games on Steam, we first need to integrate
    the **Steamworks software developer kit** (**SDK**). The SDK provides all the
    necessary tools and resources to ensure compatibility with the Steam distribution
    platform (including such essential things as setting our Steam **App ID**). Games
    must also meet specific technical requirements set by the platform. These requirements
    include such things as minimum system specifications, controller support, and
    game performance.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到技术方面，在Steam发布意味着为独立PC平台构建我们的游戏，但主要是Windows（Mac和Linux也得到支持）。在我们能够在Steam上发布Unity游戏之前，我们首先需要集成**Steamworks软件开发工具包**（**SDK**）。该SDK提供了确保与Steam分发平台兼容所需的所有工具和资源（包括设置我们的Steam**App
    ID**等基本事物）。游戏还必须满足平台设定的特定技术要求。这些要求包括最低系统规格、控制器支持以及游戏性能。
- en: Like what mobile platforms provide, PC platforms also have unique services that
    add value to our games! For Steam, we have a full breadth of services available
    to integrate into our games, including achievements, game statistics, leaderboards,
    OpenID, game notifications, voice chat and commands, input, player-created content,
    inventory, microtransactions, game servers, and matchmaking and lobbies for multiplayer.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 就像移动平台提供的那样，PC平台也有独特的服务，可以为我们的游戏增值！对于Steam，我们有广泛的服务可供集成到我们的游戏中，包括成就、游戏统计、排行榜、OpenID、游戏通知、语音聊天和命令、输入、玩家创建的内容、库存、微交易、游戏服务器以及多人游戏的匹配和大厅。
- en: Steam | distribution information
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Steam | 分发信息
- en: 'See what Steamworks has to offer: [https://partner.steamgames.com/](https://partner.steamgames.com/).'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Steamworks提供的内容：[https://partner.steamgames.com/](https://partner.steamgames.com/)。
- en: Now, let’s look at the other side of the coin for PC game distribution platforms,
    the Epic Games Store.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看PC游戏分发平台的另一面，即Epic Games Store。
- en: Publishing on the Epic Games Store
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Epic Games Store上发布
- en: Developers who want to distribute their PC games on the **Epic Games Store**
    (**Epic**) face the same familiar platform technical and financial aspects. Let’s
    review them.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 想要在**Epic Games Store**（**Epic**）上分发PC游戏的开发者面临着相同的熟悉平台技术和财务方面。让我们来回顾一下。
- en: The technical aspects are up first; publishing to Epic means building our games
    for standalone PC platforms, which Epic supports for Windows and Mac. Unlike Steam,
    Epic does not require us to integrate any specific platform SDKs, but games still
    must meet the particular technical requirements set by the platform. The requirements
    are designed to provide the best gameplay experiences and, surprisingly, not lock
    players into a single storefront. The requirements include supporting crossplay
    for multiplayer games across any PC storefront, implementing achievements for
    Epic if implemented in other stores’ distributions, and ensuring games download,
    install, launch, and function consistently – while also being of sufficient quality.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 技术方面首先考虑；在Epic发布意味着为独立PC平台构建我们的游戏，Epic支持Windows和Mac。与Steam不同，Epic不需要我们集成任何特定的平台SDK，但游戏仍然必须满足平台设定的特定技术要求。这些要求旨在提供最佳的游戏体验，并且出人意料的是，不会将玩家锁定在单个商店中。这些要求包括支持跨平台的多玩家游戏，如果在其他商店的分发中实现了成就，则实现Epic的成就，并确保游戏下载、安装、启动和运行一致——同时也要保证足够的质量。
- en: 'That’s not to say that Epic doesn’t offer gaming services similar to Steam
    – they provide a dizzying array of online services. **Epic Online Services** (**EOS**)
    has built-in support for all kinds of platforms: Windows, Mac, Linux, PlayStation,
    Xbox, Nintendo Switch, Android, and iOS. The services on offer for both account
    and game services include achievements, gameplay stats, leaderboards, login, player
    accounts and data storage, title storage, player management, friends, presence,
    game invites, voice chat, analytics, anti-cheat, and multiplayer services with
    crossplay, peer-to-peer, matchmaking, and lobbies. Whew! Mind you, they all are
    entirely free to use.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说Epic不提供类似Steam的游戏服务——他们提供了一系列令人眼花缭乱的在线服务。**Epic Online Services**（**EOS**）内置了对所有平台的全面支持：Windows、Mac、Linux、PlayStation、Xbox、Nintendo
    Switch、Android和iOS。提供的账户和游戏服务包括成就、游戏统计、排行榜、登录、玩家账户和数据存储、标题存储、玩家管理、朋友、在线状态、游戏邀请、语音聊天、分析、反作弊以及具有跨平台、点对点、匹配和大厅的多玩家服务。哇！请注意，它们都是完全免费的。
- en: Why is Epic providing free online game services?
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么Epic提供免费的在线游戏服务？
- en: Scaling a game and strengthening player communities requires various backend
    services and infrastructure; finishing our games is only half the battle. Epic
    offers help for game developers to succeed with their games by providing services
    – initially made for Fortnite and currently operating the Epic Games Store – for
    free for all developers. The sentiment from Epic is that they succeed when, through
    widespread adoption of their services, the participating developers succeed.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 扩大游戏规模和加强玩家社区需要各种后端服务和基础设施；完成我们的游戏只是战斗的一半。Epic 通过提供免费服务（最初是为 Fortnite 制作，目前运营
    Epic Games Store）来帮助游戏开发者成功，对所有开发者免费。Epic 的观点是，当他们的服务得到广泛采用时，参与的开发者就会成功。
- en: Epic has also recently started allowing indie game developers to self-publish
    on their store through the **Epic Developer Portal**, stating that the store is
    open to all developers and game publishers, so long as their games meet the store’s
    requirements.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: Epic 最近也开始允许独立游戏开发者通过 **Epic Developer Portal** 在其商店上自行发布，表示商店对所有开发者和游戏发行商开放，只要他们的游戏符合商店的要求。
- en: Epic Games | distribution information
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games | 发行信息
- en: 'Start distributing PC games on the Epic Games Store: [https://store.epicgames.com/en-US/distribution](https://store.epicgames.com/en-US/distribution).'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Epic Games Store 上开始发行 PC 游戏：[https://store.epicgames.com/en-US/distribution](https://store.epicgames.com/en-US/distribution)。
- en: In addition to self-publishing as a differentiating factor, Epic Games Store
    is also known for exclusivity deals, regular free game giveaways, grant awards,
    and support for blockchain-based games (wading into a more controversial side
    of game development).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 除了作为差异化因素的自发行之外，Epic Games Store 还以其独家交易、定期免费游戏赠送、奖金以及支持基于区块链的游戏（涉足游戏开发的更具争议性的一边）而闻名。
- en: Web3 (blockchain) games
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Web3（区块链）游戏
- en: 'The Epic Games Store is one of the only leading storefronts to embrace blockchain
    technology games. Blockchain, NFT, and cryptocurrency products can be published
    but only if they follow specific policies: [https://dev.epicgames.com/docs/epic-games-store/requirements-guidelines/distribution-requirements/blockchain](https://dev.epicgames.com/docs/epic-games-store/requirements-guidelines/distribution-requirements/blockchain).'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games Store 是唯一几个拥抱区块链技术游戏的领先店面之一。区块链、NFT 和加密货币产品可以发布，但前提是它们遵循特定的政策：[https://dev.epicgames.com/docs/epic-games-store/requirements-guidelines/distribution-requirements/blockchain](https://dev.epicgames.com/docs/epic-games-store/requirements-guidelines/distribution-requirements/blockchain)。
- en: Transitioning from the leading PC distribution platform storefronts to a more
    indie-friendly distribution platform is a pivot away from purely commercial revenue
    generation aspirations. Let’s have a look at how more indie-friendly platforms,
    such as Itch.io and **Game Jolt**, prioritize creative freedom and a more experimental
    space for game developers to share their game creations with the world.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 从领先的 PC 发行平台店面转向更受独立游戏开发者欢迎的发行平台，是一种远离纯粹商业收入生成目标的转变。让我们看看像 Itch.io 和 **Game
    Jolt** 这样的更受独立游戏开发者欢迎的平台是如何优先考虑创意自由和为游戏开发者提供一个更实验性的空间，让他们与世界分享他们的游戏创作的。
- en: Publishing on Itch.io
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Itch.io 上发布
- en: In the landscape of digital distribution platform storefronts, Itch.io stands
    apart. The platform distinctly caters to indie game developers and creatives.
    That’s not to say it’s not home to some well-known and popular titles such as
    *Celeste*, *Night in the Woods*, and *Doki Doki Literature Club!* (for you visual
    novel fans). The platform offers a unique opportunity for game publishers to start
    small and scale up as their games grow.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字发行平台店面景观中，Itch.io 独树一帜。该平台明确针对独立游戏开发者和创意人士。这并不是说它没有一些知名且受欢迎的游戏，例如 *Celeste*、*Night
    in the Woods* 和 *Doki Doki Literature Club!*（针对视觉小说爱好者）。该平台为游戏发行商提供了一个独特的机会，从小规模开始，随着游戏的增长而扩大规模。
- en: The technical aspects of the platform are pretty open because the type of platforms
    supported varies, depending on the kind of game being distributed via Unity or
    literally any other game engine or coding framework. The platform supports playing
    `*.zip` and `*.rar` files), as well as media files (that is, image, audio, and
    video files).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 平台的技术方面相当开放，因为支持的平台类型取决于通过 Unity 或任何其他游戏引擎或编码框架分发的游戏类型。该平台支持播放 `*.zip` 和 `*.rar`
    文件，以及媒体文件（即图像、音频和视频文件）。
- en: Itch.io | Distribution information
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Itch.io | 发行信息
- en: 'Create a custom page to instantly distribute or sell your indie games: [https://itch.io/developers](https://itch.io/developers).'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个自定义页面，立即分发或销售您的独立游戏：[https://itch.io/developers](https://itch.io/developers)。
- en: Regarding the financial aspect, Itch.io allows sellers to determine the revenue
    percentage share to Itch.io, ranging from 0% to 100%, with a default rate of 10%
    if you don’t make any changes to it. Yay!
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 关于财务方面，Itch.io 允许卖家确定 Itch.io 的收入百分比分成，范围从 0% 到 100%，如果你不做任何更改，默认为 10%。太棒了！
- en: Itch.io revenue sharing
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: Itch.io 收入分成
- en: 'Introducing open revenue sharing: [https://itch.io/updates/introducing-open-revenue-sharing](https://itch.io/updates/introducing-open-revenue-sharing).'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍开放式收入分成：[https://itch.io/updates/introducing-open-revenue-sharing](https://itch.io/updates/introducing-open-revenue-sharing)。
- en: As a side note, for Unity developers just looking to quickly share their games
    (usually early prototypes or development in progress for testing), the **SIMMER.io**
    website provides drag-and-drop simplicity for quickly sharing WebGL game builds.
    I believe a “tip jar” is in the works.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁白，对于只想快速分享游戏（通常是早期原型或测试中的开发）的 Unity 开发者，**SIMMER.io** 网站提供了拖放式简单性，可以快速分享
    WebGL 游戏构建。我相信正在开发一个“小费罐”。
- en: SIMMER.io
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: SIMMER.io
- en: 'A place for Unity developers to share WebGL games fast and easy (and free):
    [https://simmer.io/](https://simmer.io/).'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 开发者快速、简单（且免费）分享 WebGL 游戏的地方：[https://simmer.io/](https://simmer.io/)。
- en: Let’s finish up the PC distribution platforms with a quick breakdown of the
    financial considerations.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速总结一下 PC 发行平台的财务考虑因素。
- en: Publishing financials
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布财务
- en: 'For the financial aspect, the essential publishing information for developers
    interested in releasing on Steam, Epic Games Store, or Itch.io is shown in the
    following table:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 对于财务方面，对于希望在 Steam、Epic Games Store 或 Itch.io 上发布游戏的开发者，以下表格显示了基本的发布信息：
- en: '|  | **Registration Fee** | **Revenue Cut** | **Platform** |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '|  | **注册费** | **收入分成** | **平台** |'
- en: '| **Steam** | $100 fee for each gameReimbursed with $1,000 earned revenue |
    70/30% split*30% to Steam | Massive community, **Steamworks** tools for developers
    |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| **Steam** | 每款游戏 $100 的费用 | 通过 $1,000 的收入进行报销 | 70/30% 的分成*30% 归 Steam |
    大型社区，**Steamworks** 工具供开发者使用 |'
- en: '| **Epic Games** **Store** | $100 fee for each game (self-publish) | 88/12%
    split*12% to Epic | Exclusivity deals, game funding, free gaming services (EOS),
    makers of Unreal Engine, home of *Fortnite* |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| **Epic Games** **Store** | 每款游戏（自发布）$100 的费用 | 88/12% 的分成*12% 归 Epic | 独家交易，游戏资金，免费游戏服务（EOS），虚幻引擎的制作者，**Fortnite**
    的家园 |'
- en: '| **Itch.io** | None | Open revenue sharing0% to 100% to Itch.io* | Large indie
    game dev community, creative freedom, flexible pricing, donations |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| **Itch.io** | 无 | 开放式收入分成0% 到 100% 归 Itch.io* | 大型独立游戏开发者社区，创意自由，灵活定价，捐赠
    |'
- en: Table 15.3 – Steam publishing details
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15.3 – Steam 发布详情
- en: Note regarding Table 15.3
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 关于表 15.3 的说明
- en: '*I’ve greatly simplified this statement because it’s constantly evolving; please
    consult the platform documentation for current information.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '*我大大简化了这个声明，因为它一直在不断演变；请查阅平台文档以获取最新信息。'
- en: In this section, we learned about the larger game distribution platforms for
    mobile and PC. We explored the technical and financial aspects of publishing games
    on these storefronts and looked at what distinct services they offer for integrating
    into our game’s design.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了移动和 PC 的更大游戏发行平台。我们探讨了在这些商店发布游戏的技术和财务方面，并查看它们为我们游戏设计提供的独特服务。
- en: Next, we’ll walk through an example implementation of UGS and publish the game
    to a PC-based store platform.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过一个 UGS 的示例实现，并将游戏发布到基于 PC 的商店平台。
- en: Implementing UGS and publishing
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施UGS和发布
- en: Now that we have a foundational knowledge of Unity’s cloud services for DevOps
    and LiveOps, let’s walk through an example of adding base LiveOps analytics and
    crash reporting to a project and implementing a basic player engagement strategy
    by updating game content dynamically. We’ll finish up by automating our build
    process with DevOps.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Unity 的 DevOps 和 LiveOps 云服务的基础知识，让我们通过一个示例来添加基础 LiveOps 分析和崩溃报告到一个项目中，并通过动态更新游戏内容来实施基本的玩家参与策略。我们将通过
    DevOps 自动化我们的构建过程来完成。
- en: 'We’ll start by adding the LiveOps services to our game project. For this example,
    and as seen in this chapter’s screenshots, I’ll use the 2D collection game we
    started with in [*Chapter 2*](B18347_02.xhtml#_idTextAnchor041). To follow along,
    you’ll either need to have made a game based on that project, or you can download
    the Unity project from this book’s GitHub repository here: [https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch2/Unity%20Project](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch2/Unity%20Project).'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将LiveOps服务添加到我们的游戏项目中。对于这个例子，以及如本章截图所示，我将使用我们在[*第2章*](B18347_02.xhtml#_idTextAnchor041)中开始制作的2D收集游戏。为了跟上，您要么需要基于该项目制作一个游戏，或者您可以从这个书的GitHub仓库中下载Unity项目：[https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch2/Unity%20Project](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch2/Unity%20Project)。
- en: Adding LiveOps services
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加LiveOps服务
- en: The two services we’ll be adding to our game project are **Analytics** and **Cloud
    Diagnostics**. These services are the most basic activities required to run live
    games successfully, and I wouldn’t publish a game without them! We can easily
    understand how our game is performing with our players, and Unity’s providing
    these services out-of-the-box is a definite plus.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加到游戏项目中的两个服务是**Analytics**和**云诊断**。这些服务是成功运行实时游戏所需的最基本活动，我绝不会在没有它们的情况下发布游戏！我们可以轻松了解我们的游戏是如何与玩家表现的，Unity提供这些服务是开箱即用的，这无疑是一个加分项。
- en: Both services are available to add and enable directly within the Unity Editor.
    Let’s start by adding the Analytics service.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个服务都可以在Unity编辑器中直接添加和启用。让我们首先添加Analytics服务。
- en: Adding Analytics
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加Analytics
- en: The Unity Analytics service collects essential data about your game and players.
    Core game events and user properties are automatically collected when a player
    opens and runs your game. Additionally, you can define and track your custom in-game
    events. All the data that’s collected from the player activity is aggregated and
    displayed in the Unity Cloud dashboard, which allows you, or any team member,
    to analyze the data and gain insights related to player engagement. Analytics
    is invaluable in determining how to optimize your game for increased player retention
    and satisfaction.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Analytics服务收集有关您的游戏和玩家的关键数据。当玩家打开并运行您的游戏时，核心游戏事件和用户属性会自动收集。此外，您还可以定义和跟踪您自定义的游戏内事件。从玩家活动收集的所有数据都会汇总并显示在Unity云仪表板上，这使得您或任何团队成员都可以分析数据并获得与玩家参与度相关的见解。分析对于确定如何优化您的游戏以提高玩家保留率和满意度至关重要。
- en: Additional reading | Unity documentation
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity文档
- en: 'Deep data insights about your game: [https://unity.com/products/unity-analytics](https://unity.com/products/unity-analytics).'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 关于您游戏的深度数据洞察：[https://unity.com/products/unity-analytics](https://unity.com/products/unity-analytics)。
- en: 'Get started with Analytics: [https://docs.unity.com/ugs/en-us/manual/analytics/manual/get-started](https://docs.unity.com/ugs/en-us/manual/analytics/manual/get-started).'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Analytics：[https://docs.unity.com/ugs/en-us/manual/analytics/manual/get-started](https://docs.unity.com/ugs/en-us/manual/analytics/manual/get-started)。
- en: 'Luckily, it’s easy to quickly add to our games by following these steps:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，通过以下步骤可以轻松快速地将它添加到我们的游戏中：
- en: Open **Window** | **Package Manager**.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**窗口** | **包管理器**。
- en: In the **Packages** dropdown, change the context to **Unity Registry**.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**包**下拉菜单中，将上下文更改为**Unity注册表**。
- en: Search for `analytics`.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`analytics`。
- en: Select **Analytics** and click the **Install** button.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Analytics**并点击**安装**按钮。
- en: Once installed, click the **Configure** button.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击**配置**按钮。
- en: Click the **Go to Dashboard** link to open the Unity Cloud dashboard (in your
    default web browser) to configure and monitor events and get an overview of your
    game’s activity in **Game performance**, drill down into critical metrics with
    **Data Explorer**, and see how events change over time with **Event Browser.**
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**转到仪表板**链接以打开Unity云仪表板（在您的默认网络浏览器中），以配置和监控事件，并在**游戏性能**中查看您游戏活动的概述，使用**数据探索器**深入关键指标，并使用**事件浏览器**查看事件随时间的变化。
- en: Initializing the Analytics service
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化Analytics服务
- en: To start collecting player data to be shown and analyzed in the Unity Cloud
    dashboard, we’ll have to do two things for the Analytics service. First, we need
    to call **UnityServices.InitializeAsync()** when the game starts. More importantly,
    due to data privacy regulations (such as GDPR, CCPA, or PIPL), we’ll also need
    to have the player opt into having data collected so that we can call **StartDataCollection()**.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始收集将在Unity云仪表板中显示和分析的玩家数据，我们需要为分析服务做两件事。首先，游戏开始时，我们需要调用 **UnityServices.InitializeAsync()**。更重要的是，由于数据隐私法规（如GDPR、CCPA或PIPL），我们还需要让玩家选择允许收集数据，以便我们可以调用
    **StartDataCollection()**。
- en: 'You can find detailed information on how to perform this initial setup here:
    [https://docs.unity.com/ugs/en-us/manual/analytics/manual/sdk-guide](https://docs.unity.com/ugs/en-us/manual/analytics/manual/sdk-guide).'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到有关如何执行此初始设置的详细说明：[https://docs.unity.com/ugs/en-us/manual/analytics/manual/sdk-guide](https://docs.unity.com/ugs/en-us/manual/analytics/manual/sdk-guide)。
- en: 'I’ve provided a basic analytics initialization script example for you to get
    started with here: [https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/AnalyticsInitialization.zip](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/AnalyticsInitialization.zip).'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里提供了一个基本的分析初始化脚本示例，供您开始使用：[https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/AnalyticsInitialization.zip](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/AnalyticsInitialization.zip)。
- en: 'Make opting in a positive experience for your players by using a statement
    like the following: “*Help us create a better game experience for you! Opting
    into analytics lets us learn how you play the game and what we can improve. We
    take your privacy seriously; all data is collected anonymously and used solely
    to enhance gameplay and features. Thank you for your support!*” (Disclaimer: I
    am not a lawyer; you should consult accordingly when it comes to regulations.)'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用以下声明等方式让玩家选择体验变得积极：“*帮助我们为您创造更好的游戏体验！选择加入分析让我们了解您如何玩游戏以及我们可以如何改进。我们非常重视您的隐私；所有数据都是匿名收集的，仅用于增强游戏玩法和功能。感谢您的支持！*”（免责声明：我不是律师；在涉及法规时，您应相应咨询。）
- en: Adding our next LiveOps service will be even easier.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 添加我们的下一个LiveOps服务将更加简单。
- en: Adding Cloud Diagnostics
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加云诊断
- en: The most essential service that’s included under Cloud Diagnostics is, by far,
    **Crash and Exception Reporting**. When your game is out in the wild with players
    banging on it, it is incredibly challenging to know what’s going on with its operational
    stability. You can get real-time data on crashes and exceptions in your games
    by simply adding and enabling the service in your project from Unity Editor. Then,
    you can periodically view any occurrences with their crash and exception details
    (including stack trace) to take action on.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在云诊断服务中，最基本的服务无疑是 **崩溃和异常报告**。当你的游戏在野外与玩家互动时，了解其操作稳定性非常具有挑战性。你只需在Unity编辑器中添加并启用该服务，就可以通过项目简单地获取游戏中崩溃和异常的实时数据。然后，你可以定期查看任何发生的事件及其崩溃和异常详情（包括堆栈跟踪），并采取行动。
- en: 'To add Cloud Diagnostics to your project, follow these steps:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 要将云诊断添加到您的项目中，请按照以下步骤操作：
- en: Open **Window** | **Package Manager**.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **窗口** | **包管理器**。
- en: In the **Packages** dropdown, change the context to **Unity Registry**.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **包** 下拉菜单中，将上下文更改为 **Unity注册表**。
- en: Search for `diagnostics`.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索 `diagnostics`。
- en: Select **Cloud Diagnostics** and click the **Install** button.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **云诊断** 并点击 **安装** 按钮。
- en: Once installed, click the **Configure** button (or, at any time, go to **Services**
    | **Cloud Diagnostics** | **Configure**).
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击 **配置** 按钮（或者，在任何时候，转到 **服务** | **云诊断** | **配置**）。
- en: Click the slider in the top-right corner of the **Project Settings** window
    to enable Cloud Diagnostics.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **项目设置** 窗口右上角的滑块以启用云诊断。
- en: Click the **Go to Dashboard** link to open the Unity Cloud dashboard (in your
    default web browser) to monitor and review any crash occurrences in Crash and
    Exception Reporting.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **转到仪表板** 链接以打开Unity云仪表板（在您的默认网页浏览器中）以监控和审查崩溃和异常报告中的任何崩溃事件。
- en: Additional reading | Unity documentation
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity文档
- en: 'Setting up Cloud Diagnostics: [https://unity.com/products/cloud-diagnostics](https://unity.com/products/cloud-diagnostics)'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 设置云诊断：[https://unity.com/products/cloud-diagnostics](https://unity.com/products/cloud-diagnostics)
- en: 'Setting up Crash and Exception Reporting: [https://docs.unity.com/ugs/manual/cloud-diagnostics/manual/CrashandExceptionReporting/SettingupCrashandExceptionReporting](https://docs.unity.com/ugs/manual/cloud-diagnostics/manual/CrashandExceptionReporting/SettingupCrashandExceptionReporting)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 设置崩溃和异常报告：[https://docs.unity.com/ugs/manual/cloud-diagnostics/manual/CrashandExceptionReporting/SettingupCrashandExceptionReporting](https://docs.unity.com/ugs/manual/cloud-diagnostics/manual/CrashandExceptionReporting/SettingupCrashandExceptionReporting)
- en: 'To test our configuration of the Cloud Diagnostics service, we can use a `Debug.LogException()`
    statement to view an exception message within the Console window in the `Start()`
    method of any script added to a GameObject in your scene and enter **Play Mode**:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们云诊断服务的配置，我们可以在任何添加到场景中 GameObject 的 `Start()` 方法中使用 `Debug.LogException()`
    语句在控制台窗口中查看异常消息，并进入**播放模式**：
- en: '[PRE0]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To finish our LiveOps example, let’s see how we can dynamically change game
    content by adding a seasonal holiday theme to our ladybug player character for
    Halloween.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成我们的 LiveOps 示例，让我们看看我们如何通过为我们的瓢虫玩家角色添加季节性节日主题来动态更改游戏内容，以适应万圣节。
- en: Updating game content dynamically
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态更新游戏内容
- en: 'The autumn season in the Northeastern part of the United States has always
    been my favorite time of the year, both as an adult and while growing up. I particularly
    enjoy the Halloween season during this time. With that being said, let’s begin
    the dynamic content update by taking inspiration from this season and seeing how
    I’ve added to the artwork for our ladybug player character from the 2D collection
    game:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 美国东北部的秋季一直是我一年中最喜欢的季节，无论是成年后还是成长过程中。我特别享受这个时期的万圣节季节。话虽如此，让我们从这个季节中汲取灵感，看看我是如何为我们的瓢虫玩家角色（来自二维收集游戏）的艺术作品添加内容的：
- en: '![Figure 15.8 – Halloween-themed player character](img/B18347_15_08.jpg)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.8 – 万圣节主题玩家角色](img/B18347_15_08.jpg)'
- en: Figure 15.8 – Halloween-themed player character
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8 – 万圣节主题玩家角色
- en: Scary, right? As seen in the `Player` Prefab root named `Graphics_Halloween`.
    In the `GameObject` array with a header of `Theme Graphics`, where I’ve assigned
    both the original graphics, renamed to `Graphics_Default`, and the new holiday
    graphics.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 恐怖，对吧？如 `Player` 预制件的根目录名为 `Graphics_Halloween` 所见。在具有 `Theme Graphics` 标题的
    `GameObject` 数组中，我已分配了原始图形，重命名为 `Graphics_Default`，以及新的节日图形。
- en: To follow along…
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续操作…
- en: 'You can either update your ladybug player character with holiday graphics and
    add the **_graphics** array to the **PlayerController** script yourself (refer
    to the *Updating the player controller script* section that follows) or find the
    updated player character with both of these already completed in this book’s GitHub
    repository: [https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/SeasonalPlayer.zip](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/SeasonalPlayer.zip).'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自行更新瓢虫玩家角色以包含节日图形，并将 **_graphics** 数组添加到 **PlayerController** 脚本中（参考随后的 *更新玩家控制器脚本*
    部分），或者在本书的 GitHub 仓库中找到已经完成这两个步骤的更新玩家角色：[https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/SeasonalPlayer.zip](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Game-Assets/SeasonalPlayer.zip)。
- en: Let’s see how we’ll dynamically switch to the Halloween graphics by setting
    up and coding a **Remote** **Config** integration.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何通过设置和编码一个**远程** **配置**集成来动态切换到万圣节图形。
- en: Adding Remote Config
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加远程配置
- en: With Remote Config, we can fine-tune game adjustments for difficulty or time
    values, make personalization changes, or run timed events without having to distribute
    a new game build – providing we account for these features during our design and
    development phases, that is.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 使用远程配置，我们可以微调游戏调整以适应难度或时间值，进行个性化更改，或运行定时事件，而无需分发新的游戏版本——前提是我们在我们设计和开发阶段考虑到这些功能。
- en: 'For our example, we’ll use a simple Boolean value for our configuration key
    value to turn on or off the display of the Halloween graphics. First things first,
    however, we need to install and configure Remote Config by following these steps:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将使用一个简单的布尔值作为配置键值来开启或关闭万圣节图形的显示。然而，首先我们需要按照以下步骤安装和配置远程配置：
- en: Open **Window** | **Package Manager**.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**窗口** | **包管理器**。
- en: In the **Packages** dropdown, change the context to **Unity Registry**.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**包**下拉菜单中，将上下文更改为**Unity 注册表**。
- en: Search for `remote`.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`remote`。
- en: 'Select **Remote Config** and click the **Install** button:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**远程配置**并点击**安装**按钮：
- en: Note that Remote Config requires **Authentication** and will also install it.
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，远程配置需要**身份验证**，并且也会进行安装。
- en: 'Once installed, go to **Window** | **Remote Config** (no, I don’t know why
    it’s not also under **Services**):'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，转到**窗口** | **远程配置**（不，我不知道为什么它不在**服务**下）：
- en: '![Figure 15.9 – Remote Config key value settings in the Editor area](img/B18347_15_09.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![图15.9 – 编辑器区域中的远程配置键值设置](img/B18347_15_09.jpg)'
- en: Figure 15.9 – Remote Config key value settings in the Editor area
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9 – 编辑器区域中的远程配置键值设置
- en: As seen in *Figure 15**.9*, by default, our environment will be **production**,
    but just know that you have the option of creating any number of additional environments
    for your needs – the first logical one would be **development** for working within
    the **Editor** area and testing before pushing to production (that is, your live
    players).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图15.9*所示，默认情况下，我们的环境将是**生产**，但要知道你有创建任意数量额外环境的选项以满足你的需求——第一个逻辑选择将是**开发**，用于在**编辑器**区域工作并在推送至生产（即你的实时玩家）之前进行测试。
- en: As shown in *Figure 15**.9*, you can quickly access the Unity Cloud dashboard
    using the **View in Dashboard** button. The web dashboard allows you to add and
    change key values without firing up Unity Editor and is available from any computer
    or mobile device with a web browser; just go to [https://cloud.unity.com/](https://cloud.unity.com/).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图15.9*所示，你可以通过点击**在仪表板中查看**按钮快速访问Unity云仪表板。网络仪表板允许你在不启动Unity编辑器的情况下添加和更改键值，并且可以从任何带有网络浏览器的电脑或移动设备上访问；只需访问[https://cloud.unity.com/](https://cloud.unity.com/)。
- en: 'Let’s add the config key for controlling the visibility of our holiday graphics:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个配置键来控制我们假日图形的可见性：
- en: 'With the **Remote Config** window open, click the **View in Dashboard** button
    to open the Unity Cloud dashboard:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开**远程配置**窗口后，点击**在仪表板中查看**按钮以打开Unity云仪表板：
- en: Yes, we can simply add a new key-value pair directly in the **Remote Config**
    window right within Unity Editor, and you can certainly do that now by clicking
    the **Add Setting** button. Still, we’re going to leverage the dashboard to cheat
    – ah, I mean, generate some starter code for this first setting.
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，我们可以在Unity编辑器内的**远程配置**窗口中直接添加一个新的键值对，你当然可以通过点击**添加设置**按钮来做这件事。不过，我们还是将利用仪表板来“作弊”——啊，我是说，生成这个第一个设置的初始代码。
- en: If the first screen you see does not say **Setup Guide**, you can find the link
    in the column to the left of the main window titled **GAMING SERVICES Remote Config**.
    There are a few options at the bottom, and one is **Setup guide** – click it.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看到的第一个屏幕上没有显示**设置指南**，你可以在主窗口左侧的**GAMING SERVICES 远程配置**标题下的列中找到链接。底部有几个选项，其中一个是**设置指南**——点击它。
- en: Review the options for checking your environments and installing the package
    by confirming or simply clicking the defaults for **Next** and **Finish** since
    we won’t need to change anything here.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过确认或简单地点击**下一步**和**完成**的默认选项来检查你的环境和安装包的选项，因为我们在这里不需要更改任何内容。
- en: Now, click `Theme_Holiday`
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`Theme_Holiday`
- en: '**Type**: **Boolean**'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**类型**：**布尔型**'
- en: Click **Next**, set **Value** to **true**, and click **Finish**.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，将**值**设置为**true**，然后点击**完成**。
- en: Now, we want to click the `RemoteConfigSettings` in a new `Assets/Scripts/Services`
    folder.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想要点击新创建的`Assets/Scripts/Services`文件夹中的`RemoteConfigSettings`。
- en: Open the script in your IDE, delete all the existing template code, and paste
    the copied code.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的集成开发环境（IDE）中打开脚本，删除所有现有的模板代码，并将复制的代码粘贴进去。
- en: Rename the public class declaration from `ExampleSample` to `RemoteConfigSettings`
    and save (*Ctrl*/*Cmd* + *S*).
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将公共类声明从`ExampleSample`重命名为`RemoteConfigSettings`并保存（*Ctrl*/*Cmd* + *S*）。
- en: 'Okay; we have started the first phase of our integration, but we’ll want to
    make two minor additions to make it compatible with our other scripts:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 好的；我们已经开始了我们的集成第一阶段，但我们将想要添加两个小的修改以使其与我们的其他脚本兼容：
- en: First, we’ll go ahead and make it a singleton instance so that we can access
    it from our `PlayerController` component
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将将其改为单例实例，这样我们就可以从我们的`PlayerController`组件中访问它。
- en: Second, we’ll add an event to listen for when the remote configuration has completed
    being fetched from the server so that we can update our graphics based on the
    current published value
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二步，我们将添加一个事件监听器，以便在从服务器获取远程配置完成后更新我们的图形，基于当前发布的值。
- en: Automating dynamic content | UGS use cases
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化动态内容 | UGS用例
- en: 'Note that for this example, we’ll manually toggle the value for displaying
    the holiday theme graphics at the time we decide to. Still, Unity provides another
    way to automate this on a calendar schedule, which is by using **Game Overrides**.
    This use case can be found in the Unity documentation here: [https://docs.unity.com/ugs/en-us/manual/game-overrides/manual/use-cases](https://docs.unity.com/ugs/en-us/manual/game-overrides/manual/use-cases).'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于这个示例，我们将在决定显示假日主题图形时手动切换值。不过，Unity还提供了另一种通过日历计划自动化的方法，那就是使用**游戏覆盖**。这个用例可以在Unity文档中找到：[https://docs.unity.com/ugs/en-us/manual/game-overrides/manual/use-cases](https://docs.unity.com/ugs/en-us/manual/game-overrides/manual/use-cases)。
- en: 'Many additional use cases for implementing UGS can be found here: [https://docs.unity.com/ugs/en-us/solutions/manual/Welcome](https://docs.unity.com/ugs/en-us/solutions/manual/Welcome).'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 实现UGS的许多其他用例可以在以下位置找到：[https://docs.unity.com/ugs/en-us/solutions/manual/Welcome](https://docs.unity.com/ugs/en-us/solutions/manual/Welcome)。
- en: 'Update the `RemoteConfigSettings` script with the following singleton pattern
    and `OnSettingsChanged` event:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下单例模式和`OnSettingsChanged`事件更新`RemoteConfigSettings`脚本：
- en: '[PRE1]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, to be able to invoke the event when the server configuration values have
    been retrieved, add the following `OnSettingsChanged` invocation to the `ApplyRemoteSettings()`
    method:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了能够在服务器配置值检索到时调用事件，将以下`OnSettingsChanged`调用添加到`ApplyRemoteSettings()`方法中：
- en: '[PRE2]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we’re passing in the `RemoteConfigService` class’s `appConfig`
    object so that the event listeners can get their required config settings. With
    that, we can now add the Remote Config service to our game. Create a new GameObject
    in the scene named `RemoteConfig` and add the `RemoteConfigSettings` script. With
    that, we’re done – easy-peasy.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们传递了`RemoteConfigService`类的`appConfig`对象，以便事件监听器可以获取它们所需的配置设置。有了这个，我们现在可以将远程配置服务添加到我们的游戏中。在场景中创建一个新的名为`RemoteConfig`的GameObject，并添加`RemoteConfigSettings`脚本。这样，我们就完成了——简单易行。
- en: Architecture tip
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 架构技巧
- en: For brevity and to keep things simple for this dynamic content example, I’ve
    decided to add the graphics changing directly to the **PlayerController** script.
    However, you may want to consider making it a separate component for a more robust
    and reusable *dynamic graphics swapping* *system* component.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁和保持这个动态内容示例的简单性，我决定直接将图形更改添加到**PlayerController**脚本中。然而，您可能希望考虑将其作为一个独立的组件，以实现更健壮和可重用的*动态图形交换*系统组件。
- en: Now, all that’s left to do is add to the capability of our `PlayerController`
    component so that we can get the configuration setting value to determine whether
    to show the holiday graphic.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的就是增加我们`PlayerController`组件的功能，以便我们可以获取配置设置值，以确定是否显示假日图形。
- en: Updating the player controller script
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新玩家控制器脚本
- en: 'Open the `PlayerController` script for editing and add the following declarations
    for holding `GameObject` references for the graphics (both the default and holiday
    versions) and a constant for the Remote Config settings key we previously defined:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`PlayerController`脚本进行编辑，并添加以下声明，用于保存图形（默认和假日版本）的`GameObject`引用以及我们之前定义的远程配置设置键的常量：
- en: '[PRE3]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So that we can respond to the completion of the remote settings being fetched,
    let’s add a listener to the `OnSettingsChanged` event on the `RemoteConfigSettings`
    singleton instance:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够响应远程设置获取完成的操作，让我们在`RemoteConfigSettings`单例实例的`OnSettingsChanged`事件上添加一个监听器：
- en: '[PRE4]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We’ve also made sure we add a removal for the listener, like the good programmers
    we are.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还确保添加了监听器的移除，就像我们这些优秀的程序员一样。
- en: 'Finally, we can handle the `OnSettingsChanged` event being triggered by adding
    the following methods:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过添加以下方法来处理由`OnSettingsChanged`事件触发的情况：
- en: '[PRE5]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alright, let’s do this one last time. A breakdown of the methods looks like
    this:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们最后一次这样做。方法分解如下：
- en: '`ConfigSettingsChanged()`: This method is the `OnSettingsChanged` event handler.
    Using the `RuntimeConfig` object passed in the event, we use its `GetBool()` method
    with the string constant for the key name, `THEME_HOLIDAY`, to retrieve the current
    value. `false` is used as the default value that’s returned should the key not
    be found:'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConfigSettingsChanged()`: 这个方法是对`OnSettingsChanged`事件的处理程序。使用事件中传入的`RuntimeConfig`对象，我们使用字符串常量作为键名`THEME_HOLIDAY`，通过其`GetBool()`方法来检索当前值。如果找不到键，则返回默认值`false`：'
- en: '`If (!isThemeEnabled)`: If the value that’s returned from `GetBool()` is `false`,
    we’ll short-circuit the method with `return`, leaving the default graphics as
    the currently visible graphics on the player character:'
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`If (!isThemeEnabled)`：如果`GetBool()`返回的值是`false`，我们将通过`return`短路该方法，保留默认图形作为玩家角色上当前可见的图形：'
- en: 'Otherwise, `ShowThemeGraphics(1)` is called and passed in an index value of
    `1`, meaning the second item that’s assigned in the `_graphics` array – where
    we assigned the Halloween graphics in the `0`, item #2 is index `1`, and so on.'
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，将调用`ShowThemeGraphics(1)`并传入索引值`1`，这意味着分配在`_graphics`数组中的第二个项目——我们在`0`索引处分配了万圣节图形，项目编号`2`是索引`1`，以此类推。
- en: '`ShowThemeGraphics()`: Here, we simply iterate through all the GameObjects
    in the `_graphics` array using a `foreach` statement, setting each object’s active
    state to `false`. We immediately follow up by setting the object with the passed-in
    index value active, ensuring the graphics that are assigned to that index will
    be the graphics displayed with `_graphics[value].SetActive(true)`.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ShowThemeGraphics()`：在这里，我们使用`foreach`语句遍历`_graphics`数组中的所有GameObject，将每个对象的激活状态设置为`false`。我们紧接着将传入的索引值对应的对象设置为激活状态，确保分配给该索引的图形将通过`_graphics[value].SetActive(true)`显示出来。'
- en: Save the script and try it out! After entering **Play Mode**, you should see
    the graphics on your ladybug player character change to the holiday graphics created
    for the theme. Nice!
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并尝试运行！在进入**播放模式**后，你应该看到你的瓢虫玩家角色的图形变成了为该主题创建的节日图形。太棒了！
- en: Bonus activity
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 奖励活动
- en: Update the **OnSettingsChanged** event architecture so that it uses an implementation
    of the global event system we created in [*Chapter 9*](B18347_09.xhtml#_idTextAnchor169).
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 更新**OnSettingsChanged**事件架构，使其使用我们在[*第9章*](B18347_09.xhtml#_idTextAnchor169)中创建的全局事件系统的实现。
- en: After you build and publish your game, you can use the Unity Cloud dashboard
    to change the value of `Theme_Holiday` at any time to show/hide the holiday graphics
    without having to rebuild and redistribute a new game build.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在你构建并发布你的游戏后，你可以使用Unity Cloud仪表板随时更改`Theme_Holiday`的值，以显示/隐藏节日图形，而无需重新构建和重新分发新的游戏构建。
- en: Complete project code
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 完整项目代码
- en: 'You can download the completed 2D collection game project code for this chapter
    from this book’s GitHub repository: [https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Unity-Project](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Unity-Project).'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从本书的GitHub仓库下载本章节的完成2D集合游戏项目代码：[https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Unity-Project](https://github.com/PacktPublishing/Unity-2022-by-Example/tree/main/ch15/Unity-Project)。
- en: And speaking of building and distributing your game build, that’s something
    you’re going to have to do lots and lots of times throughout its life cycle. If
    only there were a way to simplify and automate that process… oh wait, there is!
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 说到构建和分发你的游戏构建，你将在游戏的生命周期中多次进行这项工作。如果有一种方法可以简化并自动化这个过程……等等，有！
- en: Publishing with Unity Build Automation
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Unity构建自动化进行发布
- en: Moving the build process of our local system to dedicated build servers – cloud-based
    systems, in this case – in our game development workflow offers several benefits
    but primarily improved productivity because our machines won’t be locked up during
    the build time. Builds generated on dedicated servers can also help to ensure
    consistency and reliability across all our game versions – significantly reducing
    the “*but it works on my* *machine*” problem.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们本地系统的构建过程移至专用构建服务器——在这种情况下是云基础系统——在我们的游戏开发工作流程中提供了几个好处，但主要是提高了生产力，因为我们的机器在构建时间不会锁定。在专用服务器上生成的构建还可以帮助确保所有游戏版本的一致性和可靠性——显著减少了“*但我的机器上能运行*”的问题。
- en: To help identify issues and catch bugs for our players early on, we can also
    integrate automated testing and **quality assurance** (**QA**) into our automated
    build process. Additionally, we can automate the distribution of completed builds
    to various teams for further testing and, if required, publishing.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们在早期识别问题和捕捉玩家遇到的bug，我们还可以将自动化测试和**质量保证**（**QA**）集成到我们的自动化构建流程中。此外，我们还可以自动化完成构建的分配，以便各个团队进行进一步测试，并在需要时发布。
- en: It all starts with understanding the build process, so let’s have a look at
    building locally.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这一切都始于理解构建过程，让我们看看如何在本地进行构建。
- en: Building your game
  id: totrans-432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建你的游戏
- en: 'In [*Chapter 14*](B18347_14.xhtml#_idTextAnchor272), we saw how we can use
    **Build Settings** to set the build target platform to **Android** and build to
    our head-mounted device for testing our MR game. Here, we can do the same thing
    but build our 2D collection game for standalone platforms, such as Windows and
    Mac PCs, by performing the following steps:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第14章*](B18347_14.xhtml#_idTextAnchor272)中，我们看到了如何使用**构建设置**将构建目标平台设置为**Android**，并将构建到我们的头戴式设备进行MR游戏的测试。在这里，我们可以做同样的事情，但通过以下步骤构建我们的2D集合游戏，用于独立平台，如Windows和Mac
    PC：
- en: Open **Build Settings** from **File** | **Build Settings**.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件** | **构建设置**打开**构建设置**。
- en: Ensure that **Platform** is set to **Windows, Mac, Linux** (also known as *standalone*).
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将**平台**设置为**Windows、Mac、Linux**（也称为*独立*）。
- en: Select the desired platform in the **Target** dropdown (for example, Windows).
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标**下拉菜单中选择所需的平台（例如，Windows）。
- en: Click **Build**, or **Build And Run**, to automatically launch the game when
    the build finishes, and select a folder on your system to store the build.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**构建**，或**构建并运行**，以在构建完成后自动启动游戏，并选择系统中的一个文件夹以存储构建。
- en: Wait until the build finishes.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待构建完成。
- en: You don’t have any choice; you have to sit there and wait… staring at the progress
    indicator minute by minute until it finishes. Luckily, with our small 2D game,
    this doesn’t take long at all, but that won’t always be the case as our games
    grow in size and complexity. Prepare to get up from your desk, go make a cup of
    coffee, and come back only to see that the progress bar has barely moved!
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 您没有选择；您必须坐那里等待……逐分钟盯着进度指示器，直到它完成。幸运的是，由于我们的2D游戏很小，这并不需要很长时间，但我们的游戏随着大小和复杂性的增长，情况可能不会总是如此。准备好离开办公桌，去泡一杯咖啡，然后回来只看到进度条几乎没有移动！
- en: When the build finishes, you’ll have the files necessary to run your game in
    the folder you selected for the build. Open the folder in your system’s file explorer
    and run the EXE file to play the game. To distribute your game – share it with
    your team, friends, and family – zip up the contents of the folder (minus any
    folders ending in `DoNotShip`) and share it via an online cloud storage service
    (such as Google Drive, Dropbox, OneDrive, or Box).
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建完成时，你将在为构建选择的文件夹中找到运行游戏所需的文件。在您的系统文件资源管理器中打开文件夹，并运行EXE文件来玩游戏。要分发您的游戏——与您的团队、朋友和家人分享——将文件夹的内容（除以`DoNotShip`结尾的任何文件夹）压缩，并通过在线云存储服务（如Google
    Drive、Dropbox、OneDrive或Box）分享。
- en: Still, we can do better. Let’s offload the build process to Unity Build Automation.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们还能做得更好。让我们将构建过程卸载到Unity构建自动化。
- en: Automating the build pipeline
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化构建流程
- en: We’ve already seen how to add Unity Version Control to our projects’ DevOps
    strategy. Well, automating a build is the second half of this DevOps story – specifically
    **CI/CD** – since we’ll use our project’s cloud workspace as the source for the
    cloud build configuration. This is how the cloud service gains access to our project
    files to perform the build.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何将Unity版本控制添加到我们的项目DevOps策略中。好吧，自动化构建是这个DevOps故事的另一半——具体来说是**CI/CD**——因为我们将在项目的云工作区作为云构建配置的源。这就是云服务如何获取我们的项目文件以执行构建。
- en: 'First, let’s add **Build Automation** to our project by following these steps:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过以下步骤将**构建自动化**添加到我们的项目中：
- en: Open **Window** | **Package Manager**.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**窗口** | **包管理器**。
- en: In the **Packages** dropdown, change the context to **Unity Registry**.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**包**下拉菜单中，将上下文更改为**Unity注册表**。
- en: Search for `build`.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`build`。
- en: Select **Build Automation** and click the **Install** button.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**构建自动化**并点击**安装**按钮。
- en: Once installed, click the **Configure** button (or, at any time, go to **Services**
    | **Build Automation** | **Configure**).
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击**配置**按钮（或，在任何时候，转到**服务** | **构建自动化** | **配置**）。
- en: In the top-right corner of the **Project Settings** window, click the slider
    to enable Build Automation.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目设置**窗口的右上角，点击滑块以启用构建自动化。
- en: 'Click the **Manage Build Targets** button to open the Unity Cloud dashboard
    (in your default web browser). This is where we’ll add our first build target:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**管理构建目标**按钮以打开Unity云仪表板（在您的默认网页浏览器中）。这是我们添加第一个构建目标的地方：
- en: '![Figure 15.10 – Unity Cloud Build Automation configurations](img/B18347_15_10.jpg)'
  id: totrans-452
  prefs: []
  type: TYPE_IMG
  zh: '![图15.10 – Unity云构建自动化配置](img/B18347_15_10.jpg)'
- en: Figure 15.10 – Unity Cloud Build Automation configurations
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10 – Unity云构建自动化配置
- en: 'Now, click the **Get Started** button to connect the source control provider
    and repository (that is, the workspace):'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**开始**按钮以连接源控制提供程序和仓库（即工作区）：
- en: Select **Unity Version Control** in the **Source control provider / SCM** **type**
    dropdown.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**源控制提供程序/SCM** **类型**下拉菜单中选择**Unity版本控制**。
- en: Select your Unity organization in the **UVCS organization Server** **URL** dropdown.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**UVCS组织服务器** **URL**下拉菜单中选择您的Unity组织。
- en: Leave **Authenticate with Unity** **ID** selected.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**使用Unity ID进行身份验证**选中。
- en: Click **Save** (at the top).
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**（位于顶部）。
- en: 'Once the source control settings have been saved, proceed to **Build Automation**
    | **Configurations** and follow these steps to add our build target:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存了源控制设置，请转到**构建自动化** | **配置**，并按照以下步骤添加我们的构建目标：
- en: Click the **Quick target** **setup** button.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**快速目标** **设置**按钮。
- en: Select **Windows desktop 64-bit** in the **Select a platform to build** **for:**
    dialogue.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**为以下平台选择构建** **：**对话框中，选择**Windows桌面64位**。
- en: 'Confirm that the **Repo** field has been populated with your game:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**仓库**字段已填充您的游戏：
- en: If you have more than one branch in your workspace, select the branch for building
    in the **Branch** dropdown.
  id: totrans-463
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的工区中有多个分支，请在**分支**下拉菜单中选择构建的分支。
- en: Under **Versioning**, select **Always Use Latest 2022.3** in the **Unity** **version**
    dropdown.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**版本控制**下，在**Unity** **版本**下拉菜单中选择**始终使用最新2022.3**。
- en: Select **Windows 11** in the **Builder Operating System and** **Version** dropdown.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建器操作系统和版本**下拉菜单中选择**Windows 11**。
- en: Click **Next**.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: On the **Builder configuration** screen, ensure **STANDARD** is selected and
    click **Next**.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建器配置**屏幕上，确保已选择**标准**并点击**下一步**。
- en: On the **Scheduling** screen, for this example, we’re going to manually kick
    off the build process from within Unity Editor, so I prefer to enable **Auto-cancel**.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**调度**屏幕上，在这个例子中，我们将从Unity编辑器内部手动启动构建过程，因此我更喜欢启用**自动取消**。
- en: Important tip
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can change the scheduling of your builds at any time. The most popular strategy
    is to dedicate a branch in your workspace to automatically start a build when
    the branch has been updated.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时更改构建的调度。最受欢迎的策略是在您的工区内为分支设置一个分支，以便在分支更新时自动启动构建。
- en: Click the **Save** **configuration** button.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存配置**按钮。
- en: 'Now, return to Unity Editor and reopen the Build Automation settings. When
    it refreshes, you’ll see we now have a build target that’s been added: **Default
    Windows** **desktop 64-bit**.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回Unity编辑器并重新打开构建自动化设置。当它刷新时，您会看到我们现在已添加了一个构建目标：**默认Windows** **桌面64位**。
- en: 'First, ensure your Unity Version Control workspace is up to date by checking
    in any pending changes for your project, and then click the **Build** button.
    A console entry will be created with a status of **Build #1 Default Windows desktop
    64-bit added to queue** to notify you that the build has been queued.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保您的Unity版本控制工作区是最新的，通过检查项目中的任何挂起更改，然后点击**构建**按钮。将创建一个状态为**构建#1 默认Windows桌面
    64位 已添加到队列**的控制台条目，以通知您构建已被排队。
- en: You can check the status of your cloud builds by clicking the **Build History**
    button or opening a web browser on any device in the Unity Cloud dashboard under
    **Build Automation** | **Build History**.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击**构建历史记录**按钮或在Unity云仪表板下的**构建自动化** | **构建历史记录**中打开任何设备的网络浏览器来检查您的云构建状态。
- en: Build Automation pricing
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自动化定价
- en: 'You can build faster for multiple platforms, including Windows, Mac, Linux,
    Android, and WebGL, and on multiple machines simultaneously: [https://unity.com/products/unity-devops#pricing](https://unity.com/products/unity-devops#pricing).'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为包括Windows、Mac、Linux、Android和WebGL在内的多个平台以及多台机器同时进行快速构建：[https://unity.com/products/unity-devops#pricing](https://unity.com/products/unity-devops#pricing)。
- en: Windows build includes 200 minutes for free per month. You pay for additional
    build minutes, Mac build minutes, additional concurrent build machines, and storage
    above 5 GB (per GB per month).
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: Windows构建每月包含200分钟的免费时间。您需要为额外的构建分钟数、Mac构建分钟数、额外的并发构建机器以及超过5GB的存储（每月每GB）付费。
- en: 'When the build finishes, if you’re still within Unity Editor, you’ll see a
    console message appear: **Build #1 Default Windows desktop** **64-bit success**.'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建完成时，如果您仍然在Unity编辑器中，您将看到一个控制台消息出现：**构建#1 默认Windows桌面 64位 成功**。
- en: 'You’ll also receive an email with the subject **Built ‘2D Collection Game’
    for Windows x86_64**, and the message **‘2D Collection Game’ (Default Windows
    desktop 64-bit) #1 has been built for Windows x86_64!** The email will also list
    any warnings or errors encountered during the build process and links to the cloud
    dashboard configuration.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将收到一封主题为**为 Windows x86_64 构建‘2D Collection Game’**的电子邮件，以及消息**‘2D Collection
    Game’（默认 Windows 桌面 64 位）#1 已为 Windows x86_64 构建！**电子邮件还将列出构建过程中遇到的任何警告或错误以及云控制台配置的链接。
- en: Most importantly, an **INSTALL** link will be provided to download the build
    artifact (that is, files your team uses to deploy or test your application). Clicking
    the link will bring you to the Unity Cloud dashboard’s **Build Details** page
    for this build. You can download the game build by clicking the **Download .ZIP
    file** button. You can also easily share this build with anyone by clicking the
    **Share** button – you’ll be provided a share link and QR code that will remain
    valid for 14 days.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，将提供一个**安装**链接以下载构建工件（即，您的团队用于部署或测试应用程序的文件）。点击链接将带您到 Unity Cloud 控制台的**构建详情**页面。您可以通过点击**下载
    .ZIP 文件**按钮下载游戏构建版本。您还可以通过点击**分享**按钮轻松地将此构建版本与任何人共享 - 您将获得一个有效期为 14 天的分享链接和二维码。
- en: Automatic build sharing
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 自动构建共享
- en: You can enable automatically creating the build share link on the **Build Automation
    Settings** page. When enabled, the share link will be included in the email notification
    you receive when the build succeeds (preventing a trip to the Unity Cloud dashboard
    to grab it).
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**构建自动化设置**页面启用自动创建构建分享链接。启用后，分享链接将包含在构建成功时收到的电子邮件通知中（防止您前往 Unity Cloud
    控制台获取它）。
- en: In addition to enabling automatic build sharing, Unity allows integrations with
    popular developer tools such as Discord, Slack, Jira, and Trello to create automated
    notifications in these spaces for both Build Automation and Cloud Diagnostics.
    You can configure your integrations in the Unity Cloud dashboard under **Administration**
    | **Project** **integrations** ([https://docs.unity3d.com/Manual/UnityIntegrations.xhtml](https://docs.unity3d.com/Manual/UnityIntegrations.xhtml)).
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 除了启用自动构建共享外，Unity 还允许与流行的开发者工具（如 Discord、Slack、Jira 和 Trello）集成，以在这些空间中创建构建自动化和云诊断的自动通知。您可以在
    Unity Cloud 控制台下的**管理** | **项目** **集成**（[https://docs.unity3d.com/Manual/UnityIntegrations.xhtml](https://docs.unity3d.com/Manual/UnityIntegrations.xhtml)）中配置您的集成。
- en: Now that we have built our first standalone PC game, let’s publish it on **Itch.io**
    and share it with the world!
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经制作了我们的第一个独立 PC 游戏，让我们在 **Itch.io** 上发布它，并与全世界分享！
- en: Publishing your game
  id: totrans-485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布您的游戏
- en: For this publishing example, we’ll publish our game to **Itch.io**. It’s the
    perfect platform for our little 2D collection game to start getting our indie
    title into players’ hands for some valuable playtesting, feedback, and bug squashing
    (Ack! But not our ladybug!).
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 在此发布示例中，我们将我们的游戏发布到 **Itch.io**。这是我们的小型 2D 收集游戏开始将我们的独立游戏标题带给玩家进行一些有价值的测试、反馈和错误修复（哎呀！但不是我们的瓢虫！）的完美平台。
- en: 'Open Itch.io and register on the site; ensure you check off **I’m interested
    in distributing content on** **itch.io**: [https://itch.io/register](https://itch.io/register).'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Itch.io 并在网站上注册；确保您勾选了**我感兴趣在itch.io上分发内容**：[https://itch.io/register](https://itch.io/register)。
- en: 'Once registered, go to the **Creator Dashboard** area (that is, **Dashboard**)
    and click the **Create new project** button. This will bring you to the following
    screen, where you can start filling out all the required details and upload a
    screenshot for a cover image to display your game listing on the storefront:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，前往**创作者仪表板**区域（即**仪表板**）并点击**创建新项目**按钮。这将带您到以下屏幕，您可以在其中开始填写所有必要的详细信息并上传截图作为封面图像以显示您的游戏在商店中的列表：
- en: '![Figure 15.11 – Creating a new project on Itch.io](img/B18347_15_11.jpg)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.11 – 在 Itch.io 上创建新项目](img/B18347_15_11.jpg)'
- en: Figure 15.11 – Creating a new project on Itch.io
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11 – 在 Itch.io 上创建新项目
- en: The field we need to pay attention to when uploading our game build to the site
    is **Kind of project**. Ensure it’s set to **Downloadable**. Then, in the **Uploads**
    section below, click the **Upload files** button and select the ZIP file we created
    to distribute our game build in the *Building your game* section or from the build
    automation process.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将游戏构建上传到网站时需要关注的字段是**项目类型**。确保它设置为**可下载**。然后，在下面的**上传**部分中，点击**上传文件**按钮并选择我们在**构建您的游戏**部分或从构建自动化过程中创建的
    ZIP 文件。
- en: Building for WebGL | Unity documentation
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 为WebGL构建 | Unity文档
- en: Note that for Itch.io, you have the option of publishing a WebGL build of the
    game that will run directly within the player’s web browser instead of having
    to be downloaded. Before committing to a WebGL version of your game, you must
    ensure your game is playable and performant in a web browser to provide a good
    player experience.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于Itch.io，你可以选择发布一个WebGL游戏版本，该版本可以直接在玩家的网络浏览器中运行，而无需下载。在承诺发布你的游戏的WebGL版本之前，你必须确保你的游戏在浏览器中可玩且性能良好，以提供良好的玩家体验。
- en: 'Build your WebGL application: [https://docs.unity3d.com/2022.3/Documentation/Manual/webgl-building.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/webgl-building.xhtml).'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 构建你的WebGL应用程序：[https://docs.unity3d.com/2022.3/Documentation/Manual/webgl-building.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/webgl-building.xhtml).
- en: Fill out the remainder of the fields, including all the fields under the **Details**
    section, which includes **Description**, **Genre**, **Community interaction**,
    and **Visibility & access**. Also, don’t forget to add **Screenshots** and a **Gameplay
    video or trailer** to excite and encourage visitors to your page to download and
    play your game.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 填写剩余的字段，包括**详细信息**部分下的所有字段，这包括**描述**、**类型**、**社区互动**和**可见性与访问权限**。同时，别忘了添加**截图**和**游戏玩法视频或预告片**来激发并鼓励访问者下载并玩你的游戏。
- en: Itch.io Devlogs
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: Itch.io Devlogs
- en: Have you heard of a Devlog? It’s a forum post where game developers share updates
    on their ongoing projects. Anyone can leave comments and thoughts, which is an
    excellent way for players to stay informed about the latest developments in games
    they are interested in. Additionally, developers can use the forum to generate
    excitement and increase project engagement.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 你听说过Devlog吗？这是一个论坛帖子，游戏开发者在这里分享他们正在进行的项目更新。任何人都可以留下评论和想法，这对于玩家来说了解他们感兴趣的游戏的最新进展是一个极好的方式。此外，开发者可以利用论坛来激发热情并增加项目的参与度。
- en: 'Itch.io Community Devlogs: [https://itch.io/devlogs](https://itch.io/devlogs).'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 'Itch.io社区Devlogs: [https://itch.io/devlogs](https://itch.io/devlogs).'
- en: When you’re happy with what you’ve entered, click **Save & view page** to finish
    publishing your game on Itch.io. Yay!
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对所输入的内容满意时，点击**保存并查看页面**以完成在Itch.io上发布你的游戏。耶！
- en: In this section, we learned how to add Unity LiveOps services to our 2D collection
    game, including core services such as Analytics and Cloud Diagnostics, and updating
    in-game content dynamically without requiring distributing a new game build with
    Remote Config. We also learned how to set up Unity DevOps to automate our game
    build process while offloading it from our local machine. We finished with a quick
    game publishing example.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何将Unity LiveOps服务添加到我们的2D游戏集合中，包括核心服务如分析和云诊断，以及通过远程配置动态更新游戏内容，而无需分发新的游戏版本。我们还学习了如何设置Unity
    DevOps来自动化我们的游戏构建过程，同时将其从本地机器卸载。我们以一个快速的游戏发布示例结束。
- en: Summary
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced and explored the concepts and strategies for
    operating and publishing GaaS to help achieve our commercial viability goals and,
    ultimately, success. By adopting GaaS and implementing the tools and technologies
    of both DevOps and LiveOps, we can build a solid foundation to support the ongoing
    release of games and content updates. This helps keep our players engaged and
    can provide longer lifetime value for our game releases.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了探索运营和发布GaaS的概念和策略，以帮助我们实现商业可行性目标，并最终取得成功。通过采用GaaS并实施DevOps和LiveOps的工具和技术，我们可以建立一个坚实的基础来支持游戏的持续发布和内容更新。这有助于保持玩家的参与度，并可以为我们的游戏发布提供更长的生命周期价值。
- en: Additionally, we learned how to safeguard all the hard work we put into our
    game projects by introducing source code management with Unity Version Control.
    We also learned how to set up and use version control within Unity Editor for
    a cloud-based DVCS solution and better structure our projects to minimize conflicts
    for team collaboration.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了如何通过引入Unity版本控制来保护我们投入游戏项目的所有辛勤工作。我们还学习了如何在Unity编辑器中设置和使用版本控制，以实现基于云的DVCS解决方案，并更好地组织我们的项目以最小化团队协作中的冲突。
- en: We gained a fundamental understanding of game economies and distribution channels
    while discussing how to better leverage player engagement to convert mobile free-to-play
    games into revenue through in-game purchases, ads, subscriptions, and premium
    purchases for PC games. Then, we provided a technical and financial feature breakdown
    of the top game distribution platforms for both free and premium games.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论如何更好地利用玩家参与度将移动免费游戏通过游戏内购买、广告、订阅和PC游戏的付费购买转化为收入时，我们获得了对游戏经济和分销渠道的基本理解。然后，我们为免费和付费游戏提供了顶级游戏分销平台的技术和财务功能分解。
- en: We concluded this chapter with examples of implementations of Unity LiveOps
    and DevOps. We achieved this by adding core cloud services, dynamically updating
    in-game content, building and automating the build process, and finally publishing
    our game.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以Unity LiveOps和DevOps的实现示例结束了这一章。我们通过添加核心云服务、动态更新游戏内容、构建和自动化构建过程，最终发布我们的游戏来实现这一点。
- en: Final words!
  id: totrans-506
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话！
- en: Throughout these chapters, from the creative processes of designing games and
    working with art assets to the detailed implementations of programming mechanics
    and systems, we explored fundamental principles, solved problems, and celebrated
    overcoming challenges together. Whether you’re a seasoned professional, an indie
    dev, a student, or an aspiring hobbyist, I hope you’ve been provided with inspiration,
    insights, moments of revelation, and the occasional laugh.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些章节中，从设计游戏和与艺术资产合作的过程，到编程机制和系统的详细实现，我们探讨了基本原理，解决了问题，并一起庆祝克服挑战。无论你是经验丰富的专业人士、独立开发者、学生还是有抱负的业余爱好者，我希望你已经得到了灵感、洞察力、启示时刻，以及偶尔的笑声。
- en: As this chapter comes to a close, I want to express my heartfelt appreciation
    to each of you who has embarked on this adventure with me. Thank you. I am honored
    to have the opportunity to share my knowledge and experiences with such an incredible
    developer community.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这一章的结束，我想向那些与我一起踏上这段冒险旅程的每一位表达我衷心的感谢。谢谢。我很荣幸有机会与这样一个了不起的开发者社区分享我的知识和经验。
- en: All stories have an ending, and as such, this one has come to an end now, too.
    Still, it’s just one of many phases in our journey as game developers as we continue
    to work toward finishing and releasing our remarkable games.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的故事都有结局，因此这个故事现在也结束了。然而，这只是我们作为游戏开发者旅程中的许多阶段之一，因为我们继续努力完成并发布我们卓越的游戏。
- en: Until next time… I have a game to finish now (and you do, too). Have fun!
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 到下次见面之前……我现在要完成一个游戏（你也是一样）。祝你们玩得开心！
