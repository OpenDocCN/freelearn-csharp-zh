- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Fluent Design System for Windows Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows应用程序的Fluent Design System
- en: The **Fluent Design System** is a set of application design principles created
    by Microsoft and implemented across multiple desktop, mobile, and web platforms.
    The Fluent Design System for Windows is a set of controls, patterns, and styles
    for applications built for Windows. In fact, it is the implicit styling for all
    WinUI controls.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fluent Design System**是由微软创建的一套应用程序设计原则，并在多个桌面、移动和Web平台上实现。Windows的Fluent
    Design System是一套为Windows应用程序构建的控件、模式和样式。实际上，它是所有WinUI控件的内隐样式。'
- en: It is important to learn the tenets of Fluent Design and how to implement them
    in your WinUI applications. We will also explore the **Fluent XAML Theme Editor**
    application for Windows. This application assists developers in creating a theme
    for their applications, including color schemes and style elements such as borders
    and corners. Developers can then easily import the resources to implement the
    theme.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Fluent Design的原则以及如何在WinUI应用程序中实现它们非常重要。我们还将探索Windows的**Fluent XAML主题编辑器**应用程序。此应用程序帮助开发者创建应用程序的主题，包括颜色方案和样式元素，如边框和角落。然后开发者可以轻松导入资源以实现主题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning the concepts of Fluent Design
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Fluent Design的概念
- en: How to find the latest information about Fluent Design
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何找到关于Fluent Design的最新信息
- en: Incorporating Fluent Design concepts into WinUI applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Fluent Design概念融入WinUI应用程序
- en: Using the Fluent XAML Theme Editor to customize and use a UI theme
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Fluent XAML主题编辑器自定义和使用UI主题
- en: Exploring the **Acrylic** material and the Fluent Design System
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索**Acrylic**材质和Fluent Design System
- en: Using the **Mica** material in WinUI applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在WinUI应用程序中使用**Mica**材质
- en: By the end of this chapter, you will understand the Fluent Design System for
    Windows applications. You will also know how to incorporate these design standards
    into your WinUI applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解Windows应用程序的Fluent Design System。你还将知道如何将这些设计标准融入你的WinUI应用程序中。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的示例，需要以下软件：
- en: Windows 10 version 1803 (version 17134) or later
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10版本1803（版本17134）或更高版本
- en: Visual Studio 2022 or later with the .NET Desktop Development workload installed
    and configured for Windows App SDK development
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022或更高版本，已安装并配置了.NET桌面开发工作负载以进行Windows App SDK开发
- en: 'The source code for this chapter is available on GitHub at this URL: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter07).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在GitHub上通过此URL获取：[https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter07)。
- en: What is the Fluent Design System?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fluent Design System是什么？
- en: 'The Fluent Design System is a cross-platform system that helps developers create
    beautiful, intuitive applications. The website for Fluent Design ([https://fluent1.microsoft.design/](https://fluent1.microsoft.design/))
    has dedicated pages with resources for developers on many platforms:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Fluent Design System是一个跨平台系统，帮助开发者创建美观、直观的应用程序。Fluent Design的网站([https://fluent1.microsoft.design/](https://fluent1.microsoft.design/))为多个平台上的开发者提供了专门的页面和资源：
- en: Android
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android
- en: iOS
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS
- en: macOS
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS
- en: Web
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web
- en: Windows
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows
- en: Cross-platform (React Native)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台（React Native）
- en: Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Microsoft has started releasing their Fluent 2 design guidance at [https://fluent2.microsoft.design/](https://fluent2.microsoft.design/).
    You can think of Fluent 1 styles as Windows 10 style, whereas Fluent 2 style is
    similar to the look and feel of Windows 11\. At the time of this writing, the
    Fluent 2 guidance has only been published for React web applications. Other platforms
    are not yet available.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微软已经开始发布他们的Fluent 2设计指南，网址为[https://fluent2.microsoft.design/](https://fluent2.microsoft.design/)。你可以将Fluent
    1样式视为Windows 10样式，而Fluent 2样式则类似于Windows 11的外观和感觉。在撰写本文时，Fluent 2指南仅针对React Web应用程序发布。其他平台尚不可用。
- en: 'Fluent Design aims to be simple and intuitive. While it maintains its design
    philosophy across platforms, it also adapts aspects of its design to feel native
    on every platform. In [*Chapter 1*](B20908_01.xhtml#_idTextAnchor015)*, Introduction
    to WinUI*, we discussed the origins of some of the current Fluent Design concepts
    in the **Metro** design that was introduced with Windows Phone. While the look
    and feel of Microsoft’s designs have evolved over the years, some of the principles
    remain. The three core principles of the Fluent Design System are the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Fluent 设计旨在简单直观。虽然它在各个平台上保持其设计理念，但它也调整其设计以在每个平台上感觉原生。在 [*第 1 章*](B20908_01.xhtml#_idTextAnchor015)“WinUI
    简介”中，我们讨论了当前 Fluent 设计概念中的一些起源，这些概念是在 Windows Phone 中引入的 **Metro** 设计中。虽然微软的设计在多年中有所演变，但一些原则仍然存在。Fluent
    设计系统的三个核心原则如下：
- en: '**Natural on every device**: Software should adapt to the device where it’s
    running, whether it’s a PC, tablet, game console, phone, or AR/VR device'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然适用于所有设备**：软件应适应其运行的设备，无论是 PC、平板电脑、游戏机、手机还是 AR/VR 设备。'
- en: '**Intuitive and powerful**: The UI anticipates users’ actions and pulls them
    into the experience while using the app'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直观且强大**：UI 预测用户的行为，并在使用应用程序时将用户带入体验中。'
- en: '**Engaging and immersive**: The design pulls from real-world elements, using
    light, shadow, texture, and depth to create an immersive experience for the user'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引人入胜且沉浸式**：设计借鉴现实世界的元素，使用光线、阴影、纹理和深度为用户创造沉浸式体验。'
- en: The driving philosophy behind the design is to adapt and feel natural. The device
    and the app should feel comfortable and anticipate the user’s actions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设计背后的驱动哲学是适应和自然。设备和应用程序应感觉舒适，并预测用户的行为。
- en: This is a very abstract and high-level explanation so far. Let’s explore the
    specifics of Fluent Design for Windows in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这是一个非常抽象和高级的解释。让我们在下一节中具体探讨 Windows 的 Fluent 设计。
- en: Exploring Fluent Design for Windows
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 Windows 的 Fluent 设计
- en: 'For Windows applications, Fluent Design covers several areas. When compared
    to other design systems, Fluent is more all-encompassing. Apple’s **Human Interface
    Guidelines** ([https://developer.apple.com/design/human-interface-guidelines/](https://developer.apple.com/design/human-interface-guidelines/))
    have only been widely adopted on Apple’s platforms: iOS, iPadOS, and macOS. Google’s
    **Material Design** ([https://material.io/](https://material.io/)) system has
    seen broader adoption but only has toolkits available for Android, Flutter, and
    the web.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 应用程序，Fluent 设计涵盖了多个领域。与其他设计系统相比，Fluent 更加全面。苹果的 **人类界面指南**([https://developer.apple.com/design/human-interface-guidelines/](https://developer.apple.com/design/human-interface-guidelines/))
    只在苹果的平台：iOS、iPadOS 和 macOS 上得到广泛采用。谷歌的 **Material Design**([https://material.io/](https://material.io/))
    系统得到了更广泛的采用，但仅提供 Android、Flutter 和网页的工具包。
- en: Fluent Design is most often compared with Material Design as they share some
    concepts when it comes to shapes and texture, but Fluent Design uses transparency
    to much greater effect than Material Design. Fluent Design provides a rich toolset
    that you can use in WinUI and nearly any other development platform.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Fluent 设计最常与 Material Design 相比较，因为它们在形状和纹理方面有一些共同的概念，但 Fluent 设计在透明度方面比 Material
    Design 有着更显著的效果。Fluent 设计提供了一个丰富的工具集，您可以在 WinUI 和几乎任何其他开发平台上使用。
- en: Let’s explore some of these design aspects and how they apply to your WinUI
    applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索这些设计方面的具体内容以及它们如何应用于您的 WinUI 应用程序。
- en: Controls
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控件
- en: 'A control equates to a single element of *user input* or *interaction*. We
    have already explored many of the controls available in WinUI in [*Chapter 5*](B20908_05.xhtml#_idTextAnchor114)*,
    Exploring WinUI Controls*. This is what some of the common WinUI controls look
    like in light and dark modes in Windows 11:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 控件等同于单个 *用户输入* 或 *交互* 元素。我们已经在 [*第 5 章*](B20908_05.xhtml#_idTextAnchor114)“探索
    WinUI 控件”中探讨了 WinUI 中可用的许多控件。以下是一些常见的 WinUI 控件在 Windows 11 亮暗模式下的样子：
- en: '![Figure 7.1 – Some common controls in light and dark modes](img/B20908_07_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 亮暗模式下的一些常见控件](img/B20908_07_01.jpg)'
- en: Figure 7.1 – Some common controls in light and dark modes
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 亮暗模式下的一些常见控件
- en: By default, the WinUI controls make use of Fluent styles. We will see how to
    override the default Fluent styles in our WinUI controls later in the chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WinUI 控件使用 Fluent 风格。我们将在本章后面看到如何覆盖 WinUI 控件中的默认 Fluent 风格。
- en: Patterns
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式
- en: 'Patterns are groups of related controls or a group of controls that becomes
    a single new element. This group could be added to a composite control for re-use.
    Some examples of patterns in WinUI include the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式**: 模式是一组相关的控件或一组成为单个新元素的控件组。这个组可以被添加到复合控件中以供重用。WinUI 中模式的一些示例包括以下内容：'
- en: '**Search**: In its simplest form, a search pattern needs to have controls for
    accepting input, invoking the search, and displaying the search results. An additional
    element may be added for suggesting searches before any input is received. Assistants
    such as *Amazon Alexa* do this based on a user’s calendar, contacts, news preferences,
    and so on. Adding an autosuggest list based on user input is a common feature
    of modern search controls. You could also integrate chat controls with **artificial
    intelligence** (**AI**) such as Microsoft’s **Bot Framework** or OpenAI’s **ChatGPT**
    to ask some follow-up questions based on the initial search parameters.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**: 在其最简单的形式中，搜索模式需要接受输入的控件、调用搜索和显示搜索结果的控件。在接收到任何输入之前，可以添加一个用于建议搜索的额外元素。例如，*亚马逊Alexa*
    会根据用户的日历、联系人、新闻偏好等来执行此操作。基于用户输入添加自动建议列表是现代搜索控件的一个常见功能。你还可以将聊天控件与**人工智能**（**AI**）如微软的**Bot
    Framework**或OpenAI的**ChatGPT**集成，根据初始搜索参数提出一些后续问题。'
- en: '**Forms**: Forms are a very common control pattern. They consist of groups
    of related labels, input controls, and command buttons that collect a related
    set of data elements. Some common forms with potential for re-use are user account
    creation forms and forms for collecting user feedback. Forms should follow the
    Fluent Design guidelines for spacing, flexible layout, and using typography for
    creating a hierarchy (Microsoft Learn example: [https://learn.microsoft.com/windows/apps/design/controls/forms](https://learn.microsoft.com/windows/apps/design/controls/forms)).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单**: 表单是一种非常常见的控制模式。它们由相关标签、输入控件和命令按钮的组构成，用于收集一组相关的数据元素。一些具有重用潜力的常见表单包括用户账户创建表单和收集用户反馈的表单。表单应遵循
    Fluent Design 的间距、灵活布局和利用字体排印创建层次结构的指南（Microsoft Learn 示例：[https://learn.microsoft.com/windows/apps/design/controls/forms](https://learn.microsoft.com/windows/apps/design/controls/forms)）。'
- en: '`ListView` control and a `SplitView` control to separate the list from the
    selected item’s details. Depending on the width of the page, the two views can
    either be stacked vertically or displayed side by side (Microsoft Learn example:
    [https://learn.microsoft.com/windows/apps/design/controls/list-details](https://learn.microsoft.com/windows/apps/design/controls/list-details)).'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ListView` 控件和 `SplitView` 控件将列表与所选项目的详细信息分开。根据页面宽度，这两个视图可以是垂直堆叠或并排显示（Microsoft
    Learn 示例：[https://learn.microsoft.com/windows/apps/design/controls/list-details](https://learn.microsoft.com/windows/apps/design/controls/list-details)）。
- en: Each of these patterns encapsulates the elements of Fluent Design to create
    a composite control that can be reused across applications. You may have control
    patterns in your projects that could be added to a shared control library for
    ease of reuse. Shared libraries such as these can save time and ensure that good
    design practices are followed across teams.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式中的每一个都封装了 Fluent Design 的元素，以创建一个可以在应用程序间重用的复合控件。你可能在项目中有一些可以添加到共享控件库中的控制模式，以便于重用。这样的共享库可以节省时间并确保团队遵循良好的设计实践。
- en: Layout
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局
- en: The layout is important to ensure that an application adapts to any screen size
    or orientation. Flexibility is a key tenet of a well-designed layout. When a window
    or page is resized, the contents can adapt by repositioning controls, adding/removing
    items, changing the flow of items, replacing controls with others that better
    fit the current available space, or simply resizing items. This is typically handled
    in XAML with `VisualState` for each size threshold to which your page must adapt,
    possibly defined as `VisualState` updates control properties to adapt to the new
    layout. Microsoft Learn has a great example of this at [https://learn.microsoft.com/windows/apps/design/layout/layouts-with-xaml](https://learn.microsoft.com/windows/apps/design/layout/layouts-with-xaml).
    WinUI includes several different layout panels that can help developers create
    the right layout for their pages and respond to changes in size, orientation,
    and resolution.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 布局对于确保应用程序适应任何屏幕尺寸或方向非常重要。灵活性是良好设计的布局的关键原则。当一个窗口或页面被调整大小时，内容可以通过重新定位控件、添加/删除项目、更改项目流、用更适合当前可用空间的控件替换控件，或者简单地调整项目大小来适应。这通常在XAML中使用`VisualState`来处理，为页面必须适应的每个大小阈值定义`VisualState`，可能定义为`VisualState`更新控件属性以适应新的布局。Microsoft
    Learn有一个很好的例子，见[https://learn.microsoft.com/windows/apps/design/layout/layouts-with-xaml](https://learn.microsoft.com/windows/apps/design/layout/layouts-with-xaml)。WinUI包括几个不同的布局面板，可以帮助开发者创建适合他们页面的布局，并响应大小、方向和分辨率的更改。
- en: Input
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入
- en: There are Fluent Design recommendations for responding to user input. There
    are guidelines for reacting to the traditional mouse and keyboard input that developers
    have been handling for decades. Modern applications can do things such as pan,
    zoom, rotate, or scroll based on mouse input. A keyboard may be a physical keyboard
    or an onscreen keyboard for mobile and touch users.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于响应用户输入，Fluent Design有一些建议。对于反应开发者几十年来一直在处理的传统鼠标和键盘输入，也有一些指南。现代应用可以根据鼠标输入进行平移、缩放、旋转或滚动。键盘可能是一个物理键盘，也可能是移动和触摸用户的屏幕键盘。
- en: 'Input can come in other forms with today’s hardware:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 随着今天硬件的发展，输入可以以其他形式出现：
- en: Pen/stylus
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 笔/触控笔
- en: Touch
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触控
- en: Touchpad
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触控板
- en: Gamepad/controller
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏手柄/控制器
- en: Remote control
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遥控
- en: Surface Dial (see [https://learn.microsoft.com/windows/apps/design/input/windows-wheel-interactions](https://learn.microsoft.com/windows/apps/design/input/windows-wheel-interactions))
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Surface Dial（见[https://learn.microsoft.com/windows/apps/design/input/windows-wheel-interactions](https://learn.microsoft.com/windows/apps/design/input/windows-wheel-interactions)）
- en: AR/VR gestures
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AR/VR手势
- en: Voice
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语音
- en: 'User input can also be simulated with the input injection APIs. An example
    of where this might be useful is creating a **Show Me How** or **Guided Tour**
    feature in your app. Your code can execute some pre-defined steps, guiding the
    user through performing some action on the page. This API is beyond the scope
    of this book. To read about an example of using input injection to intercept mouse
    input and turn it into touch input, read this article on Microsoft Learn: [https://learn.microsoft.com/windows/apps/design/input/input-injection](https://learn.microsoft.com/windows/apps/design/input/input-injection).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入也可以通过输入注入API进行模拟。这种功能可能在你应用中创建“**展示如何**”或“**导览**”功能时非常有用。你的代码可以执行一些预定义的步骤，引导用户在页面上执行某些操作。这个API超出了本书的范围。要了解使用输入注入截获鼠标输入并将其转换为触摸输入的示例，请阅读Microsoft
    Learn上的这篇文章：[https://learn.microsoft.com/windows/apps/design/input/input-injection](https://learn.microsoft.com/windows/apps/design/input/input-injection)。
- en: Style
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风格
- en: 'Style encompasses multiple aspects of Fluent Design:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 风格涵盖了Fluent Design的多个方面：
- en: '**Icons**: Good icons should be simple and convey the application’s purpose.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图标**：好的图标应该是简单的，并能传达应用程序的目的。'
- en: '**Color**: The color choice is important. Allowing users to customize their
    colors is also a great way to make your app feel personal to them. WinUI makes
    it easy to adapt the user’s light or dark theme choice and the Windows highlight
    color by using theme brushes.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：颜色选择很重要。允许用户自定义颜色也是让应用感觉个性化的好方法。WinUI通过使用主题画刷，使适应用户的浅色或深色主题选择以及Windows高亮颜色变得容易。'
- en: '**Typography**: Microsoft recommends that Windows applications all use the
    Segoe UI font. Selecting the font size can help convey a hierarchy within the
    app, such as a book or document layout. To this end, Microsoft has defined a **type
    ramp** (available at [https://learn.microsoft.com/windows/apps/design/style/typography#type-ramp](https://learn.microsoft.com/windows/apps/design/style/typography#type-ramp)).
    A type ramp defines the increase in font size for different styled elements on
    the screen, such as *Body*, *Title*, and *Subtitle*. There are static resources
    that can be leveraged in WinUI to select the right size for a control’s intended
    use.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字体排印**：Microsoft建议所有Windows应用程序都使用Segoe UI字体。选择字体大小可以帮助传达应用程序内的层次结构，例如书籍或文档布局。为此，Microsoft定义了一个**字体级数**（可在[https://learn.microsoft.com/windows/apps/design/style/typography#type-ramp](https://learn.microsoft.com/windows/apps/design/style/typography#type-ramp)找到）。字体级数定义了屏幕上不同样式元素字体大小的增加，如*正文*、*标题*和*副标题*。WinUI中有静态资源可以利用，以选择控件预期用途的正确大小。'
- en: '**Spacing**: Spacing between and within controls is important for readability
    and usability. WinUI controls allow a Standard or Compact density to be selected.
    More information about sizing and Fluent densities can be found here: [https://learn.microsoft.com/windows/apps/design/style/spacing](https://learn.microsoft.com/windows/apps/design/style/spacing).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间距**：控件之间以及控件内部的间距对于可读性和可用性非常重要。WinUI控件允许选择标准或紧凑密度。有关尺寸和Fluent密度的更多信息，请参阅此处：[https://learn.microsoft.com/windows/apps/design/style/spacing](https://learn.microsoft.com/windows/apps/design/style/spacing)。'
- en: '**Reveal focus**: Drawing attention to focusable elements is important for
    larger displays, such as an Xbox or Surface Hub. This is achieved through lighting
    effects with Fluent.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**揭示焦点**：在较大的显示设备上，如Xbox或Surface Hub，将注意力引向可聚焦元素非常重要。这通过Fluent的灯光效果来实现。'
- en: '**Acrylic**: This is a type of WinUI brush that creates texture with transparency.
    This texture gives a feeling of depth to the user interface. We will discuss Acrylic
    in more detail later in this chapter.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚克力**：这是一种WinUI画笔类型，它通过透明度创建纹理。这种纹理给用户界面带来深度感。我们将在本章后面更详细地讨论亚克力。'
- en: '**Mica**: This is a dynamic material like Acrylic, but unlike Acrylic it is
    opaque, not transparent. It creates the background of the app by incorporating
    elements of the current OS theme and desktop wallpaper. We will see how to incorporate
    Mica into your own WinUI applications later in the chapter.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**米卡**：这是一种类似于亚克力的动态材料，但与亚克力不同，它是非透明的。它通过结合当前操作系统主题和桌面壁纸的元素来创建应用程序的背景。我们将在本章后面看到如何将米卡整合到自己的WinUI应用程序中。'
- en: '**Corner radius**: Fluent Design promotes the idea that rounded corners promote
    positive feelings in users. WinUI controls have a rounded corner radius consistent
    with Fluent Design recommendations.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圆角半径**：Fluent设计推崇的观点是圆角可以促进用户的积极情绪。WinUI控件具有与Fluent设计建议一致的圆角半径。'
- en: '**Sound**: Sound can be an integral part of crafting an immersive experience
    in your apps. A subtle whooshing sound when panels slide open or closed and using
    just the right tone and volume in the sound of an alert can immerse the app’s
    users.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声音**：声音可以是您应用程序中创造沉浸式体验的一个组成部分。当面板打开或关闭时，发出细微的呼啸声，以及在警报声音中使用恰当的音调和音量，可以沉浸应用程序的用户。'
- en: '**Writing style**: Believe it or not, writing style is part of app design.
    Line-of-business applications should not have the same writing style as a casual
    consumer app or a puzzle game. Users will be pulled into the app experience if
    they don’t notice the writing style at all because it fits what they expect for
    the application type.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写作风格**：信不信由你，写作风格是应用程序设计的一部分。业务线应用程序不应与休闲消费者应用程序或益智游戏有相同的写作风格。如果用户没有注意到写作风格，因为他们期望的应用程序类型与之相符，他们将被吸引到应用程序体验中。'
- en: 'These are just some of the aspects of style defined by Fluent Design. You can
    read more about them on Microsoft Learn: [https://learn.microsoft.com/windows/apps/design/style/](https://learn.microsoft.com/windows/apps/design/style/).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是Fluent设计定义的样式的一些方面。您可以在Microsoft Learn上了解更多信息：[https://learn.microsoft.com/windows/apps/design/style/](https://learn.microsoft.com/windows/apps/design/style/)。
- en: Many of the aspects of Fluent style are made available to our WinUI apps via
    XAML styles and other static resources. Next, we will look at how we can update
    our sample application to respond to changes in a user’s Windows theme.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Fluent风格的许多方面都通过XAML样式和其他静态资源提供给我们的WinUI应用程序。接下来，我们将探讨如何更新我们的示例应用程序以响应用户的Windows主题变化。
- en: Incorporating Fluent Design in WinUI applications
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在WinUI应用程序中整合Fluent设计
- en: It is time to incorporate a few of the Fluent Design principles into the **My
    Media Collection** application and polish the UI a little. Most of the WinUI controls
    are already designed to meet Fluent standards, but there were a few properties
    we modified without understanding Fluent Design.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候将一些Fluent设计原则融入到**My Media Collection**应用程序中，并对UI进行一些润色了。大多数WinUI控件已经设计得符合Fluent标准，但我们修改了一些属性，而没有理解Fluent设计。
- en: Updating the title bar
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新标题栏
- en: 'Before we even get into the XAML to improve the styles, let’s fix the application’s
    title bar. Until now, the title bar always read **MyMediaCollection** without
    any spaces or indication of the current page:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始改进XAML中的样式之前，让我们先修复应用程序的标题栏。到目前为止，标题栏总是显示**MyMediaCollection**，没有任何空格或当前页面的指示：
- en: First, to fix the spacing when the app is packaged and distributed, open `Package.appmanifest`
    from the `My Media Collection`. If you like, you can also change **Description**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为了修复应用程序打包和分发时的间距问题，从`My Media Collection`中打开`Package.appmanifest`。如果你愿意，你还可以更改**描述**。
- en: '![Figure 7.2 – Updating information in Package.appmanifest](img/B20908_07_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 更新Package.appmanifest中的信息](img/B20908_07_02.jpg)'
- en: Figure 7.2 – Updating information in Package.appmanifest
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 更新Package.appmanifest中的信息
- en: Updating `AppWindow` class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`AppWindow`类。
- en: 'To update the text in the app’s title bar, add the following code to `MainWindow.xaml.cs`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更新应用程序标题栏中的文本，请将以下代码添加到`MainWindow.xaml.cs`中：
- en: '[PRE0]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, add an `internal` method named `SetPageTitle` so each page can append
    its title to the main window title:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个名为`SetPageTitle`的`internal`方法，以便每个页面都可以将其标题追加到主窗口标题中：
- en: '[PRE1]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In order for each page to access `MainWindow`, expose an internal member in
    `App.xaml.cs`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让每个页面都能访问`MainWindow`，在`App.xaml.cs`中公开一个内部成员：
- en: '[PRE2]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, in `MainPage.xaml.cs`, add an event handler for the `Loaded` event of
    the page. In the event handler, add some code to append to the `Title` of the
    current window with the page title of `Home`. When we launch the application,
    the title bar should read **My Media Collection -** **Home**:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`MainPage.xaml.cs`中，为页面的`Loaded`事件添加一个事件处理器。在事件处理器中，添加一些代码以将页面标题`Home`追加到当前窗口的`Title`中。当我们启动应用程序时，标题栏应该显示**My
    Media Collection - Home**：
- en: '[PRE3]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finally, make the same changes in `ItemDetailsView.xaml.cs`, but set the page
    title to `Item Details`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`ItemDetailsView.xaml.cs`中做出相同的更改，但将页面标题设置为`Item Details`。
- en: Now, when you run the application, you should see the title bar text update
    as you navigate between the list of items and the item details. Let’s make some
    changes to the styles of `MainPage` next.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行应用程序时，你应该会看到标题栏文本在你在项目列表和项目详情之间导航时更新。让我们接下来对`MainPage`的样式做一些更改。
- en: Changing the style of MainPage
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改MainPage的样式
- en: 'Currently, the main page of our application doesn’t have many styles. We set
    the `FontWeight` of a few `TextBlock` controls to `Bold` to set them apart as
    important items, but this doesn’t follow the Fluent Design guidelines for typography.
    There is also a purple border separating the `ListView` header from its items:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们应用程序的主页风格并不多。我们设置了一些`TextBlock`控件的`FontWeight`为`Bold`，以便将它们作为重要项目区分出来，但这并不遵循字体排印的Fluent设计指南。同时，还有一个紫色边框将`ListView`的标题与其项目分开：
- en: '![Figure 7.3 – The current main page of My Media Collection](img/B20908_07_03.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – My Media Collection当前主页](img/B20908_07_03.jpg)'
- en: Figure 7.3 – The current main page of My Media Collection
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – My Media Collection当前主页
- en: 'Hard-coding colors is not a good practice. Even if you were using custom colors
    as product branding, you could centralize them in `Application.Resources`. Let’s
    work our way through the `MainPage.xaml` file and make some improvements:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 直接编写颜色代码不是一种好习惯。即使你使用自定义颜色作为产品品牌，也可以在`Application.Resources`中集中管理。让我们逐步处理`MainPage.xaml`文件，并进行一些改进：
- en: 'First, update the text of the first `TextBlock` from `Media Collection` to
    `Home`, matching the text in the window’s title bar. Wrap it in a horizontally
    aligned `StackPanel` and add a preceding `SymbolIcon` control to display a `Style`
    attribute to import the `SubheaderTextBlockStyle StaticResource`. Those changes
    should look like this:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将第一个`TextBlock`的文本从`Media Collection`更新为`Home`，与窗口标题栏中的文本匹配。将其包裹在一个水平对齐的`StackPanel`中，并添加一个前置的`SymbolIcon`控件来显示导入`SubheaderTextBlockStyle
    StaticResource`的`Style`属性。这些更改应该看起来像这样：
- en: '[PRE4]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We should also remove the `FontWeight` attribute from the **Media Type** label
    and use a Fluent style resource:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还应该从**媒体类型**标签中移除`FontWeight`属性，并使用Fluent样式资源：
- en: '[PRE5]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, change the surrounding `Grid` to a `StackPanel` and remove the `Grid.Column``     Definition` definitions. In addition to simplifying the layout, this will allow
    the **Home** symbol and text to appear above the rest of the controls on the page,
    reinforcing the hierarchy. The full block of code will look like this:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将周围的`Grid`更改为`StackPanel`，并删除`Grid.Column`定义。除了简化布局外，这还将允许**主页**符号和文本出现在页面上的其他控件之上，从而加强层次结构。完整的代码块将看起来像这样：
- en: '[PRE6]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <ListView.HeaderTemplate>
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ListView.HeaderTemplate>
- en: <DataTemplate>
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <DataTemplate>
- en: <Grid Margin="4,0,4,0">
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Grid Margin="4,0,4,0">
- en: <Grid.ColumnDefinitions>
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Grid.ColumnDefinitions>
- en: <ColumnDefinition Width="120"/>
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ColumnDefinition Width="120"/>
- en: <ColumnDefinition Width="*"/>
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ColumnDefinition Width="*"/>
- en: </Grid.ColumnDefinitions>
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </Grid.ColumnDefinitions>
- en: <Border BorderBrush="{ThemeResource SystemAccentColor}"
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Border BorderBrush="{ThemeResource SystemAccentColor}"
- en: BorderThickness="0,0,0,1">
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 边框厚度="0,0,0,1">
- en: <TextBlock Text="Medium"
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <TextBlock Text="Medium"
- en: Margin="4,0,0,0"
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外边距="4,0,0,0"
- en: Style="{StaticResource TitleTextBlockStyle}"/>
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样式设置为"{StaticResource TitleTextBlockStyle}"</Grid>
- en: </Border>
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </Border>
- en: <Border Grid.Column="1"
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Border Grid.Column="1"
- en: BorderBrush="{ThemeResource SystemAccentColor}"
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 边框刷="{ThemeResource SystemAccentColor}"
- en: BorderThickness="0,0,0,1">
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 边框厚度="0,0,0,1">
- en: <TextBlock Text="Title"
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <TextBlock Text="标题"
- en: Margin="4,0,0,0"
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外边距="4,0,0,0"
- en: Style="{StaticResource TitleTextBlockStyle}"/>
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样式设置为"{StaticResource TitleTextBlockStyle}"</Grid>
- en: </Border>
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </Border>
- en: </Grid>
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </Grid>
- en: </DataTemplate>
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </DataTemplate>
- en: </ListView.HeaderTemplate>
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </ListView.HeaderTemplate>
- en: '[PRE7]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, let’s define the end of the list area by adding a border between the
    bottom of `ListView` and the command buttons. Do this by wrapping the buttons’
    `StackPanel` with a `Border` control, again using `SystemAccentColor`. `Margin=
    "4,0"` is shorthand that is equivalent to `Margin= "4,0,4,0"`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们通过在`ListView`底部和命令按钮之间添加边框来定义列表区域的结束。通过将按钮的`StackPanel`包装在`Border`控件中，再次使用`SystemAccentColor`来实现。`Margin=
    "4,0"`是等同于`Margin= "4,0,4,0"`的简写：
- en: '[PRE8]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the application and check out the restyled user interface. It looks much
    better. You can now easily see the hierarchy of data, however limited it may be
    in our simple application:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并检查重新设计的用户界面。它看起来好多了。你现在可以轻松地看到数据层次结构，尽管在我们这个简单的应用程序中可能有限：
- en: '![Figure 7.4 – The newly styled My Media Collection home page](img/B20908_07_04.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 新样式化的“我的媒体收藏”主页](img/B20908_07_04.jpg)'
- en: Figure 7.4 – The newly styled My Media Collection home page
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 新样式化的“我的媒体收藏”主页
- en: 'Before moving on to the details page, let’s see how the page looks if we select
    the dark mode in Windows. Open **Windows Settings**, go to **Personalization |
    Colors**, and select **Dark** from the **Choose your color** dropdown (if you
    normally use **Dark**, try changing it to **Light**):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入详细页面之前，让我们看看在Windows中选择暗黑模式时页面看起来如何。打开**Windows设置**，转到**个性化 | 颜色**，并从**选择你的颜色**下拉菜单中选择**暗黑**（如果你通常使用**暗黑**，尝试将其更改为**浅黑**）：
- en: '![Figure 7.5 – My Media Collection running in dark mode](img/B20908_07_05.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – “我的媒体收藏”在暗黑模式下的运行效果](img/B20908_07_05.jpg)'
- en: Figure 7.5 – My Media Collection running in dark mode
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – “我的媒体收藏”在暗黑模式下的运行效果
- en: 'Everything on the page switches to dark mode without any code changes except
    for the title bar. To learn more about title bar customization, including changing
    colors or the icon, or even completely replacing it with a custom title bar, see
    this topic on Microsoft Learn: [https://learn.microsoft.com/windows/apps/develop/title-bar](https://learn.microsoft.com/windows/apps/develop/title-bar).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的所有内容都切换到暗黑模式，除了标题栏外无需任何代码更改。要了解更多关于标题栏自定义的信息，包括更改颜色或图标，甚至完全用自定义标题栏替换它，请参阅Microsoft
    Learn上的此主题：[https://learn.microsoft.com/windows/apps/develop/title-bar](https://learn.microsoft.com/windows/apps/develop/title-bar)。
- en: 'If you have a good reason to keep your application in light or dark mode, you
    can update `Application.xaml` to add a single attribute to the `Application` element
    using this command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个很好的理由保持你的应用程序在浅色或暗黑模式，你可以更新`Application.xaml`，通过使用此命令向`Application`元素添加单个属性：
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will apply the `Dark` theme to the entire application. If you have a reason
    to only force this theme on part of the application, the `RequestedTheme` attribute
    can be applied to an individual `Page` or `Control`. Now, let’s apply the same
    types of styles to the details page.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`Dark`主题应用到整个应用程序。如果你有理由只强制将此主题应用到应用程序的一部分，可以将`RequestedTheme`属性应用到单个`Page`或`Control`。现在，让我们将相同类型的样式应用到详细页面。
- en: Changing the style of ItemDetailsPage
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改ItemDetailsPage的样式
- en: 'We want to update `ItemDetailsPage.xaml` to provide it with the same overall
    look and feel as the main page:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望更新`ItemDetailsPage.xaml`，使其具有与主页相同的整体外观和感觉：
- en: 'Open the file and start by updating `Item Details`. Give it the same `Subheader``     TextBlockStyle` that was used on `Home` and wrap it in a horizontally aligned
    `Stack``     Panel`. Precede `TextBlock` with a `SymbolIcon`, which uses the `Edit` symbol:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件，首先更新 `Item Details`。给它与 `Home` 上使用的相同的 `Subheader` 和 `TextBlockStyle`，并在水平对齐的
    `Stack` 面板中包裹它。在 `TextBlock` 前面加上一个使用 `Edit` 符号的 `SymbolIcon`：
- en: '[PRE10]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, modify the `Grid` that follows the new `StackPanel` to have top and bottom
    borders. Also, modify the `Margin` to have 4 px on either side of `Grid`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改跟随新 `StackPanel` 的 `Grid`，使其具有顶部和底部边框。同时，修改 `Margin` 以在 `Grid` 的两侧各有 4
    px：
- en: '[PRE11]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'That’s all we need to change on this page. Run the application again and navigate
    to the details page to see how it looks:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面上，我们只需要进行这些更改。再次运行应用程序并导航到详情页面，看看效果如何：
- en: '![Figure 7.6 – The restyled Item Details page](img/B20908_07_06.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 重新设计的项目详情页面](img/B20908_07_06.jpg)'
- en: Figure 7.6 – The restyled Item Details page
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 重新设计的项目详情页面
- en: This looks great. Now the styles of the two pages match, and the added border
    lines match the color of the highlighted active input field.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒。现在两个页面的样式匹配，添加的边框线与高亮的活动输入字段的颜色相匹配。
- en: Let’s now shift gears and review a tool that can help designers and developers
    when implementing Fluent Design.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在转换一下思路，回顾一下可以帮助设计师和开发者在实现 Fluent 设计时使用的工具。
- en: Using the Fluent XAML Theme Editor
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Fluent XAML 主题编辑器
- en: We’ve seen how easy it is to adopt the default color and theme resources from
    the user’s Windows settings, but what if you or your company wants to create a
    custom theme for an application? Maybe that theme needs to be shared across a
    suite of applications. You could create a XAML file with `ResourceDictionary`
    in Visual Studio and code all the markup by hand for a new style. Visual Studio’s
    **IntelliSense** will help in some regards. However, there is an easier way.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，从用户的 Windows 设置中采用默认颜色和主题资源是多么容易，但如果你或你的公司想要为应用程序创建一个自定义主题怎么办？也许这个主题需要跨一系列应用程序共享。你可以在
    Visual Studio 中创建一个包含 `ResourceDictionary` 的 XAML 文件，并手动编写所有标记以创建新样式。Visual Studio
    的 **IntelliSense** 在某些方面会提供帮助。然而，有一个更简单的方法。
- en: Microsoft has created an open source tool called the `ResourceDictionary` XAML
    file that you can drop into your projects.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 微软创建了一个名为 `ResourceDictionary` 的开源工具 XAML 文件，你可以将其拖放到你的项目中。
- en: Note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Fluent XAML Theme Editor was created to adjust the styles for UWP controls,
    but these same styles will also work with WinUI 3 controls.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Fluent XAML 主题编辑器是为了调整 UWP 控件的样式而创建的，但相同的样式也可以与 WinUI 3 控件一起使用。
- en: 'To install the application, open the `fluent xaml` in the search field, and
    you will find **Fluent XAML Theme Editor** in the search results. Click it in
    the search results to view the product page:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装应用程序，在搜索字段中打开 `fluent xaml`，你将在搜索结果中找到 **Fluent XAML 主题编辑器**。在搜索结果中点击它以查看产品页面：
- en: '![Figure 7.7 – The Fluent XAML Theme Editor page in the Microsoft Store](img/B20908_07_07.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 微软商店中的 Fluent XAML 主题编辑器页面](img/B20908_07_07.jpg)'
- en: Figure 7.7 – The Fluent XAML Theme Editor page in the Microsoft Store
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 微软商店中的 Fluent XAML 主题编辑器页面
- en: If you have already installed the app, there will be a **Launch** button. If
    it is not installed, you can click the **Install** button. When it completes its
    installation, you will find the app in your **Start** menu.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了应用程序，将有一个**启动**按钮。如果没有安装，你可以点击**安装**按钮。安装完成后，你将在**开始**菜单中找到该应用程序。
- en: 'When you first launch the app, it will launch with the default styles for a
    UWP app, displayed in both light and dark themes. On the right-hand panel, you
    will find controls for changing the colors and shapes of UI elements. **Typography**
    is listed as **Coming Soon**, but it’s been promising this for many years:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次启动应用程序时，它将以 UWP 应用程序的默认样式启动，显示在浅色和深色主题中。在右侧面板中，你可以找到用于更改 UI 元素的颜色和形状的控件。**字体**列在**即将推出**中，但它已经承诺了多年：
- en: '![Figure 7.8 – The Fluent XAML Theme Editor for Windows](img/B20908_07_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – Windows 版本的 Fluent XAML 主题编辑器](img/B20908_07_08.jpg)'
- en: Figure 7.8 – The Fluent XAML Theme Editor for Windows
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – Windows 版本的 Fluent XAML 主题编辑器
- en: Colors
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色
- en: On the **Colors** tab, you can select one of the default profiles from the **Color
    Presets** dropdown. In addition to the default preset, there are **Lavender**,
    **Forest**, and **Nighttime** options. There are also options to load additional
    presets or to save your current color settings as a new preset. These color presets
    are saved in JSON format.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在**颜色**选项卡上，您可以从**颜色预设**下拉列表中选择一个默认配置文件。除了默认预设外，还有**薰衣草**、**森林**和**夜间**选项。还有加载其他预设或保存当前颜色设置作为新预设的选项。这些颜色预设以
    JSON 格式保存。
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Any colors you specify here will override the Windows system accent color that
    would otherwise be picked up by WinUI applications by default. Unless your application
    has a good reason to follow another theme, it’s best to let WinUI use the user’s
    chosen accent colors. Designing a custom theme should be undertaken by an experienced
    design team.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您在这里指定的任何颜色都将覆盖 Windows 系统的默认强调色，该强调色通常会被 WinUI 应用程序默认拾取。除非您的应用程序有很好的理由遵循另一个主题，否则最好让
    WinUI 使用用户选择的强调色。设计自定义主题应由经验丰富的设计团队承担。
- en: 'Clicking on any of the colors in the current preset will launch a color picker
    window, where you can adjust the current color:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 点击当前预设中的任何颜色将启动颜色选择器窗口，您可以在其中调整当前颜色：
- en: '![Figure 7.9 – Adjusting a preset color with a color picker](img/B20908_07_09.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 使用颜色选择器调整预设颜色](img/B20908_07_09.jpg)'
- en: Figure 7.9 – Adjusting a preset color with a color picker
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 使用颜色选择器调整预设颜色
- en: The **Region**, **Base**, and **Primary** colors can each be adjusted independently
    to change their light and dark theme appearance.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**区域**、**基础**和**主要**颜色可以分别独立调整，以改变它们的浅色和深色主题外观。'
- en: Shapes
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形状
- en: The **Shapes** panel provides controls to adjust the **Corner Radius** of the
    **Controls** and the **Overlay**. This is also where you can adjust the default
    **Border Thickness** for the theme.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**形状**面板提供了调整**控件**和**覆盖层**的**圆角**的控件。这也是您可以调整主题默认**边框厚度**的地方。'
- en: 'Shape presets, like colors, can also be saved and loaded. The app comes with
    two presets: **Default** and **No Rounding, Thicker Borders**. The difference
    is subtle but noticeable:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 与颜色一样，形状预设也可以保存和加载。应用程序自带两个预设：**默认**和**无圆角，较厚的边框**。区别细微但明显：
- en: '![Figure 7.10 – Shapes with No Rounding and Thicker Borders applied](img/B20908_07_010.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 应用了无圆角和较厚边框的形状](img/B20908_07_010.jpg)'
- en: Figure 7.10 – Shapes with No Rounding and Thicker Borders applied
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 应用了无圆角和较厚边框的形状
- en: 'When you are done adjusting the color and shape settings, use the `ResourceDictionary`
    with your theme data. You can copy the XAML and paste it into a `Resources` section
    in your project:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调整完颜色和形状设置后，使用包含您的主题数据的 `ResourceDictionary`。您可以将 XAML 复制并粘贴到项目中的 `Resources`
    部分：
- en: '![Figure 7.11 – Exporting a theme from the Fluent XAML Theme Editor](img/B20908_07_011.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 从 Fluent XAML 主题编辑器导出主题](img/B20908_07_011.jpg)'
- en: Figure 7.11 – Exporting a theme from the Fluent XAML Theme Editor
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 从 Fluent XAML 主题编辑器导出主题
- en: Next, let’s explore the Acrylic material, which is part of the Fluent Design
    System that we touched on earlier in the chapter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索 Acrylic 材质，这是我们在本章前面提到的 Fluent 设计系统的一部分。
- en: Acrylic material and the Fluent Design System
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Acrylic 材质和 Fluent 设计系统
- en: Acrylic is a WinUI brush that, when applied in your apps, provides a translucent
    texture. The texture works in both light and dark themes in Windows, and it is
    a great way to give users the feeling of depth when using your applications. The
    `AcrylicBrush` class is part of the `Microsoft.UI.Xaml.Media` namespace in the
    Windows App SDK, where `Brush`, `SolidColorBrush`, and `GradientBrush` are also
    found.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Acrylic 是一种 WinUI 画笔，当应用于您的应用程序时，提供半透明纹理。这种纹理在 Windows 的浅色和深色主题中都能工作，并且是给用户带来深度感的绝佳方式。`AcrylicBrush`
    类是 Windows App SDK 中 `Microsoft.UI.Xaml.Media` 命名空间的一部分，其中还可以找到 `Brush`、`SolidColorBrush`
    和 `GradientBrush`。
- en: Note
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Acrylic material is also available to UWP applications that use WinUI 2.8.x.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Acrylic 材质也适用于使用 WinUI 2.8.x 的 UWP 应用程序。
- en: 'If you want to explore the `AcrylicBrush` before deciding to use it in your
    own projects, you can try it in the WinUI 3 Gallery app:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在决定在自己的项目中使用 `AcrylicBrush` 之前先探索它，您可以在 WinUI 3 Gallery 应用程序中尝试：
- en: '![Figure 7.12 – Exploring AcrylicBrush in the WinUI 3 Gallery](img/B20908_07_012.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 在 WinUI 3 Gallery 中探索 AcrylicBrush](img/B20908_07_012.jpg)'
- en: Figure 7.12 – Exploring AcrylicBrush in the WinUI 3 Gallery
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 在 WinUI 3 Gallery 中探索 AcrylicBrush
- en: On the gallery page, you can see the default styles of `AcrylicBrush` and how
    they’ll appear in the Windows light and dark themes. Additionally, the gallery
    page provides controls to adjust the opacity and tint of the brush. You can also
    set a fallback solid color for the brush. The fallback color is used on systems
    without the resources to load an acrylic brush.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在画廊页面，你可以看到`AcrylicBrush`的默认样式以及它们在Windows浅色和深色主题中的显示效果。此外，画廊页面还提供了调整画笔不透明度和色调的控件。你还可以为画笔设置一个回退的纯色。回退颜色用于没有资源加载丙烯酸画笔的系统。
- en: 'Depending on which brush is applied, the element will paint the acrylic brush
    based on background elements or in-app elements behind the current, overlapping
    element. The WinUI 3 Gallery has examples of how to apply either type of brush.
    This is an example of the in-app brush:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用了哪种画笔，元素将根据背景元素或当前重叠元素背后的应用内元素来绘制丙烯酸画笔。WinUI 3画廊中有如何应用这两种类型画笔的示例。这是一个应用内画笔的示例：
- en: '[PRE12]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This example shows how to apply a background acrylic brush:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本例展示了如何应用背景丙烯酸画笔：
- en: '[PRE13]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When incorporated into your WinUI application, an acrylic brush gives users
    the feeling of texture and depth, which are two of the fundamental principles
    of Fluent Design. Another material you can choose to incorporate is Mica.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当云母融入你的WinUI应用中时，它会给用户带来质感和深度的感觉，这是流畅设计的基本原则之二。你还可以选择将另一种材料云母融入其中。
- en: Use Mica in WinUI applications
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在WinUI应用中使用云母
- en: '**Mica** is another material that’s available to WinUI applications. You can
    think of Mica as an Acrylic background brush without the transparency. It creates
    the brush style based on the current desktop background color in Windows. There
    are two variants of the Mica material: **Mica** and **Mica Alt**. Mica Alt creates
    the same kind of opaque background as Mica, but it has stronger tinting.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**云母**是WinUI应用中可用的一种材料。你可以将云母视为没有透明度的丙烯酸背景画笔。它根据Windows中的当前桌面背景颜色创建画笔样式。云母材料有两种变体：**云母**和**云母替代**。云母替代创建与云母相同的半透明背景，但它具有更强的色调。'
- en: Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Mica is only available in Windows 11 and later. If your app uses Mica and is
    installed on Windows 10, it will not apply the material.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 云母仅在Windows 11及更高版本中可用。如果你的应用使用云母且安装在Windows 10上，则不会应用该材料。
- en: 'If you use the WinUI 3 Gallery and open the System Backdrops (Mica/Acrylic)
    page, you can launch a WinUI window and cycle through the Mica, Mica Alt, and
    Acrylic materials applied to the window background:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用WinUI 3画廊并打开系统背景（云母/丙烯酸）页面，你可以启动一个WinUI窗口并循环显示应用于窗口背景的云母、云母替代和丙烯酸材料：
- en: '![Figure 7.13 – Viewing the same window with Mica, Mica Alt, and Acrylic](img/B20908_07_013.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图7.13 – 使用云母、云母替代和丙烯酸查看相同的窗口](img/B20908_07_013.jpg)'
- en: Figure 7.13 – Viewing the same window with Mica, Mica Alt, and Acrylic
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13 – 使用云母、云母替代和丙烯酸查看相同的窗口
- en: The code to set the system backdrop for a window is more involved than just
    applying a brush to the `Fill` property of a `Rectangle` or another UI element.
    Let’s try configuring Mica Alt in the My Media Collection app.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 设置窗口系统背景的代码比仅将画笔应用到`Rectangle`或其他UI元素的`Fill`属性要复杂得多。让我们在My Media Collection应用中尝试配置云母替代。
- en: Incorporate Mica into My Media Collection
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将云母加入我的媒体收藏
- en: 'Bringing Mica into your own apps is easy with Windows App SDK 1.3 or later.
    Let’s use the Mica Alt material in My Media Collection. It only takes a few steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Windows App SDK 1.3或更高版本将云母引入你的应用非常简单。让我们在My Media Collection中使用云母替代材料。这只需要几个步骤：
- en: First, check that your project is using Windows App SDK 1.3 or later. If it’s
    not, you can use the **NuGet Package Manager** to upgrade it to the latest available
    version.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确认你的项目正在使用Windows App SDK 1.3或更高版本。如果不是，你可以使用**NuGet包管理器**将其升级到最新版本。
- en: Next, open `MainPage.xaml` and `ItemDetailsPage.xaml` and remove the `Background`
    property for each `Page` element. If the `Page` elements (or any of their children)
    aren’t transparent, you won’t see the Mica backdrop.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`MainPage.xaml`和`ItemDetailsPage.xaml`文件，并移除每个`Page`元素的`Background`属性。如果`Page`元素（或其任何子元素）不透明，你将看不到云母背景。
- en: 'Finally, open `MainWindow.xaml.cs` and add the following code to the constructor
    immediately after the call to `InitializeComponent`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开`MainWindow.xaml.cs`文件，并在调用`InitializeComponent`方法之后立即添加以下代码到构造函数中：
- en: '[PRE14]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'That’s it. Now run the app and see how the background looks with Mica. The
    color in the app will vary depending on your current Windows background:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。现在运行应用，看看使用云母的背景效果如何。应用中的颜色将根据你当前的Windows背景而变化：
- en: '![Figure 7.14 – Styling My Media Collection with Mica](img/B20908_07_014.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图7.14 – 使用Mica样式化我的媒体收藏](img/B20908_07_014.jpg)'
- en: Figure 7.14 – Styling My Media Collection with Mica
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14 – 使用Mica样式化我的媒体收藏
- en: 'Notice that the title bar does not pick up the Mica material, just as it ignores
    theme changes. If you would like to do this on your own, you can follow the Microsoft
    Learn instructions for extending your window contents into the title bar area:
    [https://learn.microsoft.com/windows/apps/develop/title-bar?tabs=wasdk#full-customization](https://learn.microsoft.com/windows/apps/develop/title-bar?tabs=wasdk#full-customization).
    For this approach, you will need to create your own title bar control with any
    buttons and icons and update the title bar text there during page navigation.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，标题栏不会拾取Mica材质，就像它忽略主题更改一样。如果您想自己这样做，可以遵循Microsoft Learn的说明来扩展您的窗口内容到标题栏区域：[https://learn.microsoft.com/windows/apps/develop/title-bar?tabs=wasdk#full-customization](https://learn.microsoft.com/windows/apps/develop/title-bar?tabs=wasdk#full-customization)。采用这种方法，您需要创建自己的标题栏控件，包括任何按钮和图标，并在页面导航时更新标题栏文本。
- en: Now, we will take a quick look at some additional Fluent Design tools geared
    toward designers.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将快速浏览一些面向设计师的额外Fluent Design工具。
- en: Design resources and toolkits for Fluent Design
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fluent Design的设计资源和工具包
- en: 'While a deep dive into user interface design is beyond the scope of this book,
    we will briefly review some of the Fluent Design toolkits available for popular
    design tools. Design resources and examples for several of these tools can be
    downloaded from Microsoft Learn at [https://learn.microsoft.com/windows/apps/design/downloads/](https://learn.microsoft.com/windows/apps/design/downloads/):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然深入探讨用户界面设计超出了本书的范围，但我们将简要回顾一些适用于流行设计工具的Fluent Design工具包。您可以从Microsoft Learn下载这些工具的设计资源和示例：[https://learn.microsoft.com/windows/apps/design/downloads/](https://learn.microsoft.com/windows/apps/design/downloads/)。
- en: '**Figma**: This is a design and prototyping tool with free and paid options,
    depending on the team and project size. You can find out more about Figma on its
    website: [https://www.figma.com/](https://www.figma.com/).'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Figma**: 这是一个具有免费和付费选项的设计和原型工具，具体取决于团队和项目规模。您可以在其网站上了解更多关于Figma的信息：[https://www.figma.com/](https://www.figma.com/)。'
- en: '**Sketch**: This is another popular tool for designing and prototyping applications
    individually or with teams. There is no free plan, but Sketch does have a free
    trial period. Sketch is available at [https://www.sketch.com/](https://www.sketch.com/).'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**草图**: 这是一款流行的工具，可以单独或与团队一起设计和原型化应用程序。虽然没有免费计划，但Sketch提供免费试用期。Sketch可在[https://www.sketch.com/](https://www.sketch.com/)获取。'
- en: '**Adobe XD**: XD is Adobe’s design/prototype tool. Like Figma, Adobe XD has
    free and paid options for designing apps with their tool. Check out XD at [https://helpx.adobe.com/support/xd.html](https://helpx.adobe.com/support/xd.html).'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Adobe XD**: XD是Adobe的设计/原型工具。与Figma类似，Adobe XD提供免费和付费选项来设计应用程序。您可以查看[https://helpx.adobe.com/support/xd.html](https://helpx.adobe.com/support/xd.html)了解XD。'
- en: '**Adobe Illustrator**: This is a powerful vector design tool from Adobe. There
    is a free trial available. Download and get started with Adobe Illustrator at
    [https://www.adobe.com/products/illustrator.html](https://www.adobe.com/products/illustrator.html).'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Adobe Illustrator**: 这是由Adobe推出的一款强大的矢量设计工具。提供免费试用。您可以在[https://www.adobe.com/products/illustrator.html](https://www.adobe.com/products/illustrator.html)下载并开始使用Adobe
    Illustrator。'
- en: '**Inkscape** ([https://inkscape.org/](https://inkscape.org/)) is a free vector
    image editor that can also work with **Adobe Illustrator (****AI)** files.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Inkscape** ([https://inkscape.org/](https://inkscape.org/))是一款免费的矢量图像编辑器，也可以处理**Adobe
    Illustrator (****AI)**文件。'
- en: '**Adobe Photoshop**: This is probably one of the best-known raster image editors.
    Adobe also has a free trial for Photoshop at [https://www.adobe.com/products/photoshop.html](https://www.adobe.com/products/photoshop.html).'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Adobe Photoshop**: 这可能是最知名的栅格图像编辑器之一。Adobe还为Photoshop提供免费试用。[https://www.adobe.com/products/photoshop.html](https://www.adobe.com/products/photoshop.html)。'
- en: The Fluent Design toolkit for Photoshop includes several PSD files. It is also
    possible to work with PSD files in free image editors such as **GIMP** ([https://www.gimp.org/](https://www.gimp.org/))
    or **Paint.NET** ([https://www.getpaint.net/](https://www.getpaint.net/)). Paint.NET
    requires an open source plugin, available at [https://www.psdplugin.com/](https://www.psdplugin.com/).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Photoshop的Fluent Design工具包包括几个PSD文件。您还可以在免费的图像编辑器中处理PSD文件，例如**GIMP** ([https://www.gimp.org/](https://www.gimp.org/))或**Paint.NET**
    ([https://www.getpaint.net/](https://www.getpaint.net/))。Paint.NET需要开源插件，可在[https://www.psdplugin.com/](https://www.psdplugin.com/)获取。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have learned a lot about Fluent Design, design resources, and the tools available
    to WinUI developers in this chapter. You will be able to use these tools and techniques
    in your WinUI application design or recommend them to designers at your company.
    We also updated the My Media Collection app to be more compliant with Fluent Design
    recommendations and learned how to incorporate the Acrylic and Mica materials.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了大量关于 Fluent Design、设计资源和可供 WinUI 开发者使用的工具的知识。您将能够在您的 WinUI 应用程序设计中使用这些工具和技术，或者向您公司的设计师推荐它们。我们还更新了
    My Media Collection 应用程序，使其更符合 Fluent Design 的建议，并学习了如何融入 Acrylic 和 Mica 材料。
- en: In the next chapter, we will examine how to add notifications to WinUI with
    the Windows App SDK notifications system.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用 Windows App SDK 通知系统向 WinUI 添加通知。
- en: Questions
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which platforms have Fluent Design implementations?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些平台实现了 Fluent Design？
- en: What is a control pattern?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控件模式是什么？
- en: Which font does Microsoft recommend using for Fluent Design?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微软推荐使用哪种字体来实现 Fluent Design？
- en: Which aspect of style is specific to devices with large screens?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个风格方面是针对大屏幕设备的？
- en: What are the names of the two spacing densities available in Fluent Design?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fluent Design 中可用的两种间距密度分别叫什么名字？
- en: Which attribute can be set in `Application.xaml` to override a user’s light/dark
    theme selection?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Application.xaml` 中可以设置哪个属性来覆盖用户的浅色/深色主题选择？
- en: Which design tools have Fluent Design toolkits available?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些设计工具提供了 Fluent Design 工具包？
