- en: Live Unit Testing in Visual Studio Enterprise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Running **live unit tests** (**LUT**) in Visual Studio for unit test projects
    based on NUnit, XUnit, and MSTest frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing and navigating live unit test results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding incremental live unit test execution with code changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding start/stop/pause/continue/restart functionalities for fine grained
    control of LUT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including and excluding subsets of tests for live execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring different options for live unit testing using the Tools | Options
    dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter enables developers to use the new Roslyn-based feature in the Visual
    Studio 2017 Enterprise edition that enables smart live unit test execution in
    the background. The following snippet and screenshot from this ([https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/](https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/))
    Visual Studio blog post on LUT gives a nice gist about this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Live unit testing automatically runs the impacted unit tests in the background
    as you edit code and visualizes the results and code coverage live, in the editor,
    in real time. In addition to giving feedback on the impact that your changes had
    on the existing tests, you also get immediate feedback on whether the new code
    you added is already covered by one or more existing tests. This will gently remind
    you to write unit tests as you are making bug fixes or adding features. You will
    be on your way to the promised land, where there is no test debt in your code
    base!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/204ce7ba-0850-4cf9-8e63-5d83bd3b7468.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As mentioned in the post, there are three potential states for any given line:'
  prefs: []
  type: TYPE_NORMAL
- en: A line of executable code that is covered by at least one failing test is decorated
    with a red cross (![](img/f9a44d62-69b8-4e18-b971-bf0d093d04bd.png))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A line of executable code that is covered by only passing tests is decorated
    with a green tick (![](img/2a269d1c-166f-460e-8c21-5837e358122f.png))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A line of executable code that is not covered by any test is decorated it with
    a blue dash (![](img/c7fb20c1-dafb-42dc-a6c5-0c8f61b2ba32.png))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LUT uses the Roslyn APIs to analyze snapshots to your product and test code
    and determines the set of unit tests that need to be run for your projects. Additionally,
    it also uses the Roslyn APIs to analyze incremental updates to your code to smartly
    determine subset of unit tests that need to be re-run from your prior test runs.
    These are the same set of analysis APIs that are used by the Visual Studio IDE
    diagnostic engine to incrementally update the intellisense/live diagnostics in
    the error list and squiggles in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: Once the set of unit tests to execute have been determined, it schedules them
    for execution in the background, and as and when the tests complete, it automatically
    shows their pass/fail/exclusion status with the glyphs on test methods. Users
    can start/stop/pause/resume live test execution at any given time. Additionally,
    they can exclude/include a subset of tests/files projects for LUT execution. They
    can also pause/restart/stop LUT anytime and configure different options for LUT,
    such as automatic pause on low battery, test execution timeout, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Running live unit tests in Visual Studio for unit test projects based on NUnit,
    XUnit, and MSTest frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will walk you through the steps to enable LUT for your
    unit test projects, viewing and understanding the live results from the test execution.
    In VS2017, live unit testing is supported for unit test projects, based on the
    following unit test frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NUnit**: Documentation at [https://www.nunit.org/](https://www.nunit.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XUnit**: Documentation at [https://xunit.github.io/](https://xunit.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSTest**: Documentation at ([https://en.wikipedia.org/wiki/MSTest](https://en.wikipedia.org/wiki/MSTest))
    and ([https://msdn.microsoft.com/en-us/library/ms182489.aspx](https://msdn.microsoft.com/en-us/library/ms182489.aspx))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover LUT for unit test projects, based on each of the preceding test
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Visual Studio and create a new C# class library project, say `ClassLibrary`,
    with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[NUnit] Add a C# unit test project, say `NUnitBasedTestProject`, to the solution
    and add a reference to `ClassLibrary` to this project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open NuGet Package Manager for the project and uninstall the existing NuGet
    package references in `MSTest.TestAdapter` and `MSTest.TestFramework`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46ea5831-af6a-401f-97db-0aae0e8ecb38.png)'
  prefs: []
  type: TYPE_IMG
- en: Add NuGet package references to the latest stable versions of NUnit and NUnit3TestAdapter
    to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the source code in file `UnitTest1.cs` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Start live unit testing for the project by executing the Test | Live Unit Testing
    | Start command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wait for a few seconds and note that the added unit tests execute in the background,
    and that `TestMethod1` passes and `TestMethod2` fails as expected and the corresponding
    green and red glyphs show up in the editor. Also, verify that the Output window
    switches to Live Unit Testing view and shows the test execution log with execution
    time stamps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b699501-9926-4efe-9907-57b1f6803eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: '[XUnit] Add a C# unit test project, say `XUnitBasedTestProject`, to the solution
    and add a reference to `ClassLibrary` to this project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open NuGet Package Manager for the project and uninstall the existing NuGet
    package references to `MSTest.TestAdapter` and `MSTest.TestFramework`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the NuGet package references to the latest stable versions of XUnit and
    `xunit.runner.visualstudio` (later than *2.2.0*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the source code in the `UnitTest1.cs` file with the following source
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Wait for a few seconds and note that unit tests execute in the background and
    `TestMethod1` passes and `TestMethod2` fails. Verify that the green and red glyphs
    shows up in the editor for these tests, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[MSTest] Add a C# unit test project, say `MSTestBasedTestProject`, to the solution
    and add a reference to `ClassLibrary` to this project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the NuGet Package Manager for the project and update the existing NuGet
    package references for `MSTest.TestAdapter` and `MSTest.TestFramework` to latest
    stable version (later than <q>1.1.17</q>)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the source code in file `UnitTest1.cs` with the following source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Wait for a few seconds and note that unit tests execute in the background and
    `TestMethod1` passes and `TestMethod2` fails. Verify that the green and red glyphs
    shows up in the editor for these tests, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Class1.cs` in the project `ClassLibrary` and verify that the test coverage
    and pass/fail details are shown for each method in the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54b46b51-f51b-4b05-8aee-c2861854f034.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing and navigating live unit test results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to view and navigate the results from
    live test execution using the Test Explorer and the tool tip in the Visual Studio
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio and create a new C# class library project, say `ClassLibrary`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the existing code in the source file `Class1.cs` with the code in attached
    sample `ClassLibrary\Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a C# unit test project, say `UnitTestProject`*,* to the solution and add
    a reference to `ClassLibrary` to this project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the NuGet Package Manager for the project and update the existing NuGet
    package references for `MSTest.TestAdapter` and `MSTest.TestFramework` to latest
    stable version (later than <q>1.1.17</q>)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the source code in the `UnitTest1.cs` file with the code in the attached
    sample `UnitTestProject\UnitTest1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Test Explorer window by clicking on Test | Window | Test Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start live unit testing for the project by executing Test | Live Unit Testing
    | Start command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for a few seconds and note that the added unit tests execute on the background
    and `TestMethod1` passes and `TestMethod2` fails as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the results are shown in the Test Explorer and there are corresponding
    green and red glyphs in the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4340f991-6fee-4d57-80d8-ce29d7c99c4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Open source file `Class1.cs` in `ClassLibrary` and click on the test indicator
    on top of `Method1`, which reads `1/1 passing`. Verify that a tool bar pops up
    with the name and status of the test, `TestMethod1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c312c28-0c56-45c0-8c6a-187f2e9ddc24.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on the method name `TestMethod1` in the tool bar and make sure
    to navigate to the definition of this method in `UnitTest1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch back to `Class1.cs` and hover near the green tick (![](img/8381cf4a-2013-44c9-94b4-97b4dd85b194.png))
    near `Method1` to view that the method is Covered by 1 test.:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9a3298a1-a2ce-47c2-a12e-5f67372acb78.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the tick (![](img/8381cf4a-2013-44c9-94b4-97b4dd85b194.png)) to bring
    up another toolbar with the method name and verify that double-clicking on it
    takes you to the test method definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding incremental live unit test execution with code changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how live unit tests run incrementally on making
    changes to test and product code on a solution configured to run live unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15.](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, clone the solution `ClassLibrary.sln` attached from the previous
    recipe in this chapter, *Viewing and navigating live unit test results*. Alternatively,
    you can manually execute the steps in that recipe before executing this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `ClassLibrary.sln` solution with two projects: `ClassLibrary` and
    `UnitTestProject` and start live unit testing by navigating to Test | Live Unit
    Testing | Start.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new source file `Class2.cs` with the following code to the `ClassLibrary`
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the Output window, switch the Show output from: combo box to Live Unit
    Testing, and clear all the contents in the window by pressing the highlighed button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64291a34-9828-441b-9c2f-4baa3fa99a26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a new source file `UnitTest2.cs` with the following code to the `UnitTestProject`
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Wait for a few seconds and note that the added unit tests execute on the background
    and `TestMethod5` passes and `TestMethod6` fails as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, note that the text in the Output window states that only two unit tests
    were executed (newly added ones `TestMethod5` and `TestMethod6`). Additionally,
    the Test Explorer shows the old tests `TestMethod1` and `TestMethod2` as grayed
    out, because these tests did not execute when we added new test code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e49b1dcf-419d-4cf8-b177-2f42fb97c21e.png)'
  prefs: []
  type: TYPE_IMG
- en: Switch back to the `Class1.cs` file in `ClassLibrary` project and edit `Method1`
    to return `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait a few seconds for the tests to execute in the background and see that `TestMethod1`
    now shows as passed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that `TestMethod5` and `TestMxethod6` are now grayed out in the Test Explorer,
    indicating that they did not execute with the last code change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53b7902e-d6bf-4427-b519-dc8216714c87.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we showed you how the live unit test execution is designed to
    analyze incremental product and test changes and execute only the subset of tests
    in the unit test projects, which could be semantically affected by those changes.
    As mentioned in the introduction section of this chapter, LUT uses the Roslyn
    APIs to analyze these incremental code updates from your prior test runs. These
    are the same set of analysis APIs that are used by the Visual Studio IDE diagnostic
    engine to incrementally update the intellisense/live diagnostics in the error
    list and squiggles in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we started with a single class, `Class1`*,* in the `ClassLibrary`
    project and a single unit test class, `UnitTest1`*,* in `UnitTestProject`. `UnitTest1`
    contains two methods `TestMethod1` and `TestMethod2`, that tested methods `Method1`
    and `Method2` in `Class1`, respectively. We added a new class, `Class2`, in `ClassLibrary`
    project with methods `Method5` and `Method6`. Then, we added a new unit test class,
    `UnitTest2` containing methods `TestMethod5` and `TestMethod6`, that test methods
    `Method5` and `Method6`, respectively. On adding these methods, LUT determined
    that the existing tests in type `UnitTest1` are unaffected by newly added `Class2`
    and `UnitTest2` and hence did not re-execute them. Subsequently, when we edited
    `Class1.Method1`, LUT only re-executed `UnitTest1.TestMethod1` and `UnitTest1.TestMethod2`
    but not the test methods in `UnitTest2`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Start/Stop/Pause/Continue/Restart functionality for fine grain
    control of LUT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to control the live unit test execution
    in Visual Studio using the start, stop, pause, continue, and restart commands.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 Enterprise edition installed on your
    machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, clone the solution `ClassLibrary.sln` attached from the recipe,
    *Viewing and navigating live unit test results*, in this chapter. Alternatively,
    you can manually execute the steps in that recipe before executing this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the solution `ClassLibrary.sln`, with two projects: `ClassLibrary` and
    `UnitTestProject` and start live unit testing by clicking on Test | Live Unit
    Testing | Start. Also, bring up the Test Explorer window by clicking on Test |
    Windows | Test Explorer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `Class1.Method1` to return true instead of false.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wait for a few seconds and note that the unit tests execute on the background,
    and `TestMethod1` and `TestMethod2` are both passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/212c5c58-8eb1-4608-9a37-91c5488a26c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Test| Live Unit Testing | Pause to temporarily pause LUT execution.
    Note that green tick (![](img/fda17483-050b-463d-9bc9-0846f151a3a8.png)) marks
    in the editor disappear as soon as LUT is paused:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b224db4b-1d55-4aeb-ae17-f1b3e4c68b77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change `Class1.Method1` to again return false. This should cause `TestMethod1`
    to fail when re-executed, but note that the test still shows as passing in Test
    Explorer window because tests are not running live:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9547dcb9-9758-4926-9f11-d3e09da0031d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to Test | Live Unit Testing | Continue to resume LUT and note that
    `TestMethod1` immediately executes and is now shown as failing in the Test Explorer
    and gylph in the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf30fb79-f10b-482d-90d9-caefa738c42e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Test | Live Unit Testing | Restart and note that all the test results
    are wiped out momentarily in the editor and Test Explorer window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that Output window''s Live Unit Testing pane shows the message: Build
    completed (succeeded), indicating the projects were built again and all tests
    re-executed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to Test | Live Unit Testing | Stop and note that all the test results
    are wiped out permanently in the editor and Test Explorer window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/590f2111-0fe1-4ba7-a418-e71dfe2b4d44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the Output window''s Live Unit Testing pane shows the message: Live
    Unit Testing stopped<q>.</q>, confirming that LUT execution was stopped.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Including and excluding subset of tests for live execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to selectively include and/or exclude
    subset of tests from live unit test execution. This features is extremely helpful
    in improving responsiveness for very large solutions where building the entire
    solution and then executing all the unit tests could be time consuming and resource
    intensive.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Visual Studio 2017 and create a C# solution with 10 `ClassLibrary` projects,
    say `ClassLibrary`, `ClassLibrary1`, ..., `ClassLibrary9` and one unit test project
    `UnitTestProject`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ca650dd-cfc7-41f3-ad5d-7c3b050ee8af.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a project reference to all the class library projects in `UnitTestProject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new test class `UnitTest2` in `UnitTestProject` and rename the test method
    to `TestMethod2.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to Test | Live Unit Testing | Start and notice the following dialog
    prompting that the solution is large and responsiveness will improve if subset
    of the tests are included:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2322b4be-14f8-470d-9859-ad3cd7bc9068.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on No so that none of the tests are included for live execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the blue dash (![](img/91c7043d-5a4f-4c78-8ce4-09b3cb1ad729.png)) in
    front of the test methods in `UnitTestProject`, confirming the exclusion of unit
    tests from live execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0740f180-58e2-4fbe-a3bb-b0e76faac5c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on class `UnitTest1` in the editor and execute Live Tests | Include
    to include unit tests in this class for LUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/332dadc6-29b1-4082-8641-03bbe55072a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Verify that `UnitTest1.TestMethod1` executes immediately with LUT and is shown
    as passed, but `UnitTest2.TestMethod2` is not executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on class `UnitTest1` in the editor again and execute Live Tests
    | Exclude to exclude unit tests in this class for LUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the method `UnitTest1.TestMethod1` by hitting the *Enter* key and verify
    the test is now excluded from LUT and test result is also cleared from the editor
    and Test Explorer window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d6526c3-578f-41de-93f1-3cc0d50b0e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: You can include/exclude all tests from a unit test project for LUT by right-clicking
    on the project node in the solution explorer and clicking on Live Tests | Include/Exclude.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring different options for live unit testing using the Tools Options
    dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to configure LUT execution options, such
    as starting LUT on solution load, configuring the minimum battery percentage required
    to keep LUT enabled in order to save battery power, and so on. This enables users
    to control when to automatically start/pause LUT and to control the level of logging
    to meet their requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, clone the `ClassLibrary.sln` solution attached from the recipe,
    *Viewing and navigating live unit test results*, in this chapter. Alternatively,
    you can manually execute the steps in that recipe before proceeding with this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the solution `ClassLibrary.sln` with two projects, `ClassLibrary` and `UnitTestProject`**,**
    and start live unit testing by navigating to Test | Live Unit Testing | Start.
    Also, bring up the Test Explorer window by clicking on Test | Windows | Test Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Tools | Options, and search `Live Unit Testing` in the search bar,
    and click on the General tab to view the LUT configuration options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75fdd645-88d0-44be-8dad-4e73202e51bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Check Start Live Unit Testing on solution load and click on OK on the dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop live unit testing for the solution by navigating to Test | Live Unit Testing
    | Stop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close and re-open the solution and verify that all unit tests are automatically
    executed with LUT on completion of the solution load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the LUT configuration options using Tools | Options again and change the
    minimum battery percentage to pause LUT from 30% to 100%
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disconnect the power cord from your laptop and verify the LUT is immediately
    paused, and that editing any test method doesn't cause tests to be re-executed
    with LUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the laptop power cord and verify the unit tests again; start executing
    in the background with LUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
