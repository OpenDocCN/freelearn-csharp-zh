["```cs\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace SampleAPI.Filters\n{\n        public class CustomActionFilter : IActionFilter\n        {\n            public void OnActionExecuting(ActionExecutingContext context)\n            {\n                // do something before the action executes\n            }\n\n            public void OnActionExecuted(ActionExecutedContext context)\n            {\n                // do something after the action executes\n            }\n        }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace SampleAPI.Filters\n{\n    public class CustomActionFilterAsync : IAsyncActionFilter\n    {\n        public async Task OnActionExecutionAsync(ActionExecutingContext \n         context, ActionExecutionDelegate next)\n        {\n            //Before \n\n            var resultContext = await next();\n\n            //After\n        }\n    }\n}\n```", "```cs\n    public class Startup\n    {\n        ...\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services\n                .AddControllers(config => config.Filters.Add(new \n                 CustomFilter()));\n        }\n\n        ...\n    }\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace SampleAPI.Filters\n{\n        public class CustomControllerFilter : ActionFilterAttribute\n        {\n            public override void OnActionExecuting(ActionExecutingContext \n             context)\n            {\n                // do something before the action executes\n            }\n\n            public override void OnActionExecuted(ActionExecutedContext \n             context)\n            {\n                // do something after the action executes\n            }\n        }\n}\n```", "```cs\n...\n     [Route(\"api/order\")]\n     [CustomControllerFilter]\n     public class OrderController : ControllerBase\n     { \n...\n```", "```cs\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]\npublic abstract class ActionFilterAttribute : \nAttribute, IActionFilter, IFilterMetadata, IAsyncActionFilter, IResultFilter, IAsyncResultFilter, IOrderedFilter\n{\n    ...\n}\n\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace SampleAPI.Filters\n{\n        public class CustomActionFilter : IActionFilter\n        {\n            public void OnActionExecuting(ActionExecutingContext context)\n            {\n                // do something before the action executes\n            }\n\n            public void OnActionExecuted(ActionExecutedContext context)\n            {\n                // do something after the action executes\n            }\n        }\n}\n```", "```cs\n...\npublic void ConfigureServices(IServiceCollection services)\n{\n    services\n        .AddSingleton<IOrderRepository, MemoryOrderRepository>()\n        .AddSingleton<CustomActionFilter>()\n ...\n}\n...\n```", "```cs\n...\n[ServiceFilter(typeof(CustomActionFilter))]\npublic class OrderController : ControllerBase\n{\n...\n\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.Extensions.Logging;\n\nnamespace SampleAPI.Filters\n{\n    public class CustomActionFilter: IActionFilter\n    {\n        private readonly ILogger _logger;\n\n        public CustomActionFilter(ILogger logger)\n        {\n            _logger = logger;\n        }\n\n        public void OnActionExecuting(ActionExecutingContext context)\n        {\n            _logger.LogInformation(\"Logging OnActionExecuting\");\n        }\n\n        public void OnActionExecuted(ActionExecutedContext context)\n        {\n            _logger.LogInformation(\"Logging OnActionExecuted\");\n        }\n}\n```", "```cs\npublic class CustomActionFilterAttribute : TypeFilterAttribute\n{\n    public CustomActionFilterAttribute() : base(typeof(CustomActionFilter))\n    {\n    }\n}\n```", "```cs\n...\n[CustomActionFilterAttribute]\npublic class OrderController : ControllerBase\n{\n...\n\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.AspNetCore.JsonPatch;\nusing Microsoft.AspNetCore.Mvc;\nusing SampleAPI.Filters;\nusing SampleAPI.Models;\nusing SampleAPI.Repositories;\nusing SampleAPI.Requests;\n\nnamespace SampleAPI.Controllers\n{\n    [Route(\"api/order\")]\n    [ApiController]\n    public class OrderController : ControllerBase\n    {\n        private readonly IOrderRepository _orderRepository;\n\n        public OrderController(IOrderRepository ordersRepository)\n        {\n            _orderRepository = ordersRepository;\n        }\n\n        ...\n\n        [HttpPut(\"{id:guid}\")]\n        [OrderExists]\n        public IActionResult Put(Guid id, OrderRequest request)\n        {\n            if (request.ItemsIds == null)\n            {\n                return BadRequest();\n            }\n\n            var order = _orderRepository.Get(id);\n\n if (order == null)\n {\n return NotFound(new { Message = $\"Item with id {id} \n                 not exist.\" });\n }\n\n            order = Map(request, order);\n\n            _orderRepository.Update(id, order);\n            return Ok();\n        }\n\n        [HttpPatch(\"{id:guid}\")]\n        [OrderExists]\n        public IActionResult Patch(Guid id, JsonPatchDocument<Order> \n         requestOp)\n        {\n            var order = _orderRepository.Get(id);\n\n if (order == null)\n {\n return NotFound(new { Message = $\"Item with id {id} not \n                 exist.\" });\n }\n\n            requestOp.ApplyTo(order);\n            _orderRepository.Update(id, order);\n\n            return Ok();\n        }\n\n        [HttpDelete(\"{id:guid}\")]\n        [OrderExists]\n        public IActionResult Delete(Guid id)\n        {\n            var order = _orderRepository.Get(id);\n\n if (order == null)\n {\n return NotFound(new { Message = $\"Item with id {id} not \n                 exist.\" });\n }\n\n            _orderRepository.Delete(id);\n            return NoContent();\n        }\n\n        ...\n    }\n}\n```", "```cs\nvar order = _orderRepository.Get(id);\n\n if (order == null)\n {\n   return NotFound(new { Message = $\"Item with id {id} not exist.\" });\n }\n```", "```cs\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing SampleAPI.Repositories;\n\nnamespace SampleAPI.Filters\n{\n    public class OrderExistsAttribute : TypeFilterAttribute\n    {\n        public OrderExistsAttribute() : base(typeof\n            (OrderExistsFilterImpl)) { }\n\n        private class OrderExistsFilterImpl : IAsyncActionFilter\n        {\n            private readonly IOrderRepository _orderRepository;\n\n            public OrderExistsFilterImpl(IOrderRepository orderRepository)\n            {\n                _orderRepository = orderRepository;\n            }\n\n            public async Task OnActionExecutionAsync(ActionExecutingContext \n            context, ActionExecutionDelegate next)\n            {\n                ...\n            }\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing SampleAPI.Repositories;\n\nnamespace SampleAPI.Filters\n{\n    public class OrderExistsAttribute : TypeFilterAttribute\n    {\n        public OrderExistsAttribute() : base(typeof(OrderExistsFilterImpl))\n        {\n        }\n\n        private class OrderExistsFilterImpl : IAsyncActionFilter\n        {\n            private readonly IOrderRepository _orderRepository;\n\n            public OrderExistsFilterImpl(IOrderRepository orderRepository)\n            {\n                _orderRepository = orderRepository;\n            }\n\n            public async Task OnActionExecutionAsync(ActionExecutingContext \n            context, ActionExecutionDelegate next)\n            {\n                if (!context.ActionArguments.ContainsKey(\"id\"))\n {\n context.Result = new BadRequestResult();\n return;\n }\n\n                if (!(context.ActionArguments[\"id\"] is Guid id))\n                {\n                    context.Result = new BadRequestResult();\n                    return;\n                }\n\n               var result = _orderRepository.Get(id);\n\n                if (result == null)\n                {\n                    context.Result = \n                     new NotFoundObjectResult(\n                     new {Message = $\"Item with id {id} not exist.\"});\n                    return;\n                }\n\n                await next();\n            }\n        }\n    }\n} \n```", "```cs\n[Route(\"api/order\")]\n[ApiController]\npublic class OrderController : ControllerBase\n{\n    ...\n\n    [HttpGet(\"{id:guid}\")]\n    [OrderExists]\n    public IActionResult GetById(Guid id) { ... }\n\n    [HttpPut(\"{id:guid}\")]\n    [OrderExists]\n    public IActionResult Put(Guid id, UpdateOrderRequest request) { ... }\n\n    [HttpPatch(\"{id:guid}\")]\n    [OrderExists]\n    public IActionResult Patch(Guid id, JsonPatchDocument<Order> requestOp) \n    { ... }\n\n    [HttpDelete(\"{id:guid}\")]\n    [OrderExists]\n    public IActionResult Delete(Guid id) { ... }\n\n    ...\n}\n```", "```cs\npublic class Startup\n{\n    ....\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n app.UseDeveloperExceptionPage();\n else\n            app.UseHsts();\n\n       ...\n    }\n\n```", "```cs\nusing System.Net;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nnamespace SampleAPI.Filters\n{\n    public class CustomExceptionAttribute : TypeFilterAttribute\n    {\n        public CustomExceptionAttribute() : base(typeof\n            (HttpCustomExceptionFilterImpl))\n        {\n        }\n\n        private class HttpCustomExceptionFilterImpl : IExceptionFilter\n        {\n            private readonly IWebHostEnvironment _env;\n            private readonly ILogger<HttpCustomExceptionFilterImpl> \n             _logger;\n            public HttpCustomExceptionFilterImpl(IWebHostEnvironment env,    \n              ILogger<HttpCustomExceptionFilterImpl> logger)\n            {\n                _env = env;\n                _logger = logger;\n            }\n\n            public void OnException(ExceptionContext context)\n            {\n                _logger.LogError(new EventId(context.Exception.HResult),\n                    context.Exception,\n                    context.Exception.Message);\n\n                var json = new JsonErrorPayload\n                {\n                    Messages = new[] {\"An error occurred. Try it again.\"}\n                };\n\n                if (_env.IsDevelopment())\n                {\n                    json.DetailedMessage = context.Exception;\n                }\n\n                var exceptionObject = new ObjectResult(json) \n                {StatusCode = 500};\n\n                context.Result = exceptionObject;\n                context.HttpContext.Response.StatusCode = \n                 (int) HttpStatusCode.InternalServerError;\n            }\n        }\n    }\n\n    public class JsonErrorPayload\n    {\n        public string[] Messages { get; set; }\n\n        public object DetailedMessage { get; set; }\n    }\n}\n```", "```cs\n{\n    \"messages\": [\n        \"An error occurred. Try it again.\"\n    ],\n    \"detailedMessage\": {\n        \"ClassName\": \"System.Exception\",\n        \"Message\": \"My custom exception\",\n        \"Data\": null,\n        \"InnerException\": null,\n        \"HelpURL\": null,\n        \"StackTraceString\": \" at \n         Sample.API.Filters.Controllers.OrderController.Get() in               \n         /Projects/Sample.API.Filters/\n         Controllers/OrderController.cs:line 30\\n at \n         lambda_method(Closure , Object , Object[] )\\n \",\n        \"RemoteStackTraceString\": null,\n        \"RemoteStackIndex\": 0,\n        \"ExceptionMethod\": null,\n        \"HResult\": -2146233088,\n        \"Source\": \"HandsOn.API.Filters\",\n        \"WatsonBuckets\": null\n    }\n}\n\n```"]