["```cs\n        public static string Encrypt(string psText)\n      {\n                string lsEncryptedText;\n                string lsEncryptedTextWithFinalXOR;\n                // A Random number generator\n                Random loRandom = new Random();\n\n                // The char position being encrypted\n                int i;\n                char loRandomChar;\n\n                // Debug\n                // Show the original text in the Immediate Window\n                System.Diagnostics.Debug.Print(\"Original text:\" + psText);\n\n                lsEncryptedText = \"\";\n                for (i = 0; i <= (psText.Length - 1); i++)\n                {\n                    loRandomChar = (char)(loRandom.Next(65535));\n                    // Current char XOR random generated char\n\n                    // Debug\n                    // Show the random char code (in numbers) generated in the Immediate Window\n                    System.Diagnostics.Debug.Print(\"Random char generated:\" + ((int)loRandomChar).ToString());\n\n                    lsEncryptedText += ((char)(psText[i] ^ loRandomChar)).ToString();\n                    // Random generated char XOR 65535 - i\n                    // It is saved because we need it later for the decryption process\n                    lsEncryptedText += ((char)(loRandomChar ^ (65535 - i))).ToString();\n                    // Another random generated char but just to add garbage to confuse the hackers\n                    loRandomChar = (char)(loRandom.Next(65535));\n                    lsEncryptedText += loRandomChar.ToString();\n\n                    // Debug\n                    // Show how the encrypted text is being generated in the Immediate Window\n                    System.Diagnostics.Debug.Print(\"Partial encryption result char number: \" + i.ToString() + \": \" + lsEncryptedText);\n\n                }\n\n                lsEncryptedTextWithFinalXOR = \"\";\n                // Now, every character XOR 125\n                for (i = 0; i <= (lsEncryptedText.Length - 1); i++)\n                {\n                    lsEncryptedTextWithFinalXOR += ((char)(lsEncryptedText[i] ^ 125)).ToString();\n                }\n\n                // Debug\n                // Show how the encrypted text is being generated in the Immediate Window\n                System.Diagnostics.Debug.Print(\"Final encryption result with XOR: \" + lsEncryptedTextWithFinalXOR);\n\n                return lsEncryptedTextWithFinalXOR;\n\n    }\n    ```", "```cs\n            public static string Decrypt(string psText)\n            {\n                // The decrypted text to return\n                string lsDecryptedText;\n\n                // The char position being decrypted\n                int i;\n                // The random char\n                char loRandomChar;\n\n                lsDecryptedText = \"\";\n                for (i = 0; i <= (psText.Length - 1); i += 3)\n                {\n                    // Retrieve the previously random generated char XOR 125 XOR 65535 - i (but previous i)\n                    loRandomChar = (char)(psText[i + 1] ^ 125 ^ (65535 - (i / 3)));\n                    // Char XOR random generated char\n                    lsDecryptedText += ((char)(psText[i] ^ 125 ^ loRandomChar)).ToString();\n                }\n\n                return lsDecryptedText;\n        }\n    ```", "```cs\n               private void butTest_Click(object sender, RoutedEventArgs e)\n       {\n                // The encrypted text\n                string lsEncryptedText;\n\n                // For each line in txtOriginalSMS TextBox\n                int lineCount = txtOriginalSMS.LineCount;\n                for (int line = 0; line < lineCount; line++)\n                {\n                    lsEncryptedText = EncryptProcedures.Encrypt(txtOriginalSMS.GetLineText(line));\n                    // Append a line with the Encrypted text\n                    txtEncryptedSMS.AppendText(lsEncryptedText + Environment.NewLine);\n                    // Append a line with the Encrypted text decrypted to test everything is as expected\n                    txtEncryptedSMS.AppendText(EncryptProcedures.Decrypt(lsEncryptedText) + Environment.NewLine);\n                }\n            }\n    ```", "```cs\nint liOriginalValue = 120;\nint liFirstXOR = liOriginalValue ^ 250;\nint liSecondXOR = liFirstXOR ^ 250;\n```", "```cs\n        using System.Threading;\n    ```", "```cs\n        // The thread\n        private Thread proThreadEncryption;\n        // The string list with SMS messages to encrypt (input)\n        private List<string> prlsSMSToEncrypt;\n        // The string list with SMS messages encrypted (output)\n        private List<List<string>> prlsEncryptedSMS;\n    ```", "```cs\n    private void butRunInThread_Click(object sender, RoutedEventArgs e)\n            {\n                // Prepare everything the thread needs from the UI\n                // For each line in txtOriginalSMS TextBox\n                prlsSMSToEncrypt = new List<string>(txtOriginalSMS.LineCount);\n\n                // Add the lines in txtOriginalSMS TextBox\n                int lineCount = txtOriginalSMS.LineCount;\n                for (int line = 0; line < lineCount; line++)\n                {\n                    prlsSMSToEncrypt.Add(txtOriginalSMS.GetLineText(line));\n                }\n                // Create the new Thread and use the ThreadEncryptProcedure method\n                proThreadEncryption = new Thread(new ThreadStart(ThreadEncryptProcedure));\n\n                // Start running the thread\n                proThreadEncryption.Start();\n\n                // Join the independent thread to this thread to wait until ThreadProc ends\n                proThreadEncryption.Join();\n\n                // When the thread finishes running this is the next line that is going to be executed\n                // Copy the string List generated by the thread\n                foreach (string lsEncryptedText in prlsEncryptedSMS)\n                {\n                    // Append a line with the Encrypted text\n                    txtEncryptedSMS.AppendText(lsEncryptedText +\n                     Environment.NewLine);\n                }\n       }\n    ```", "```cs\n        private void ThreadEncryptProcedure()\n            {\n                string lsEncryptedText;\n\n                //Initialize the encrypted array to the size of the array to encrypt.\n                prlsEncryptedSMS = new List<string>(prlsSMSToEncrypt.Count);\n\n                // Line of text message to encrypt\n                string lsText;\n\n                // Iterate through each string in the prlsSMSToEncrypt string\n                for (int i = 0; i < prlsSMSToEncrypt.Count; i++)\n                {\n                    lsText = prlsSMSToEncrypt[i];\n                    lsEncryptedText = EncryptProcedures.Encrypt(lsText);\n\n                    // Add the encrypted string to the List of encrypted strings\n                    prlsEncryptedSMS.Add(lsEncryptedText);\n                }\n       }\n    ```", "```cs\nprivate List<string> prlsSMSToEncrypt;\nprivate List<List<string>> prlsEncryptedSMS;\n```", "```cs\n            prlsSMSToEncrypt = new List<string>(txtOriginalSMS.LineCount);\n\n            // Add the lines in txtOriginalSMS TextBox\n            int lineCount = txtOriginalSMS.LineCount;\n            for (int line = 0; line < lineCount; line++)\n            {\n                prlsSMSToEncrypt.Add(txtOriginalSMS.GetLineText(line));\n            }\n```", "```cs\nprivate Thread proThreadEncryption;\n```", "```cs\nproThreadEncryption = new  Thread(newThreadStart(ThreadEncryptProcedure));\n```", "```cs\nproThreadEncryption.Start();\n```", "```cs\nproThreadEncryption.Join();\n```", "```cs\nforeach (string lsEncryptedText in prlsEncryptedSMS)\n{\n    txtEncryptedSMS.AppendText(lsEncryptedText + Environment.NewLine);\n}\n```", "```cs\n    private BackgroundWorker bakShowEncryptedStrings = new BackgroundWorker();\n    ```", "```cs\n    using System.ComponentModel;\n    ```", "```cs\n        // The number of the last encrypted string\n           private int priLastEncryptedString;\n        // The number of the last encrypted string shown in the UI\n        private int priLastEncryptedStringShown;\n        // The number of the previous last encrypted string shown in the UI\n        private int priOldLastEncryptedStringShown;\n    ```", "```cs\n        priLastEncryptedString = 0;\n    ```", "```cs\n        priLastEncryptedString++;\n    ```", "```cs\n                //Register the DoWork  event handler.\n                bakShowEncryptedStrings.DoWork += bakShowEncryptedStrings_DoWork;\n    ```", "```cs\n        // Initialize the last encrypted string shown\n        priLastEncryptedStringShown = 0;\n        // Initialize the last encrypted string shown before\n        priOldLastEncryptedStringShown = 0;\n        // The iteration\n        int i;\n        // The last encrypted string (saved locally to avoid changes in the middle of the iteration)\n        int liLast;\n        // Wait until proThreadEncryption begins\n        while ((priLastEncryptedString < 1))\n        {\n            // Sleep the thread for 10 milliseconds)\n            Thread.Sleep(10);\n        }\n\n        while (proThreadEncryption.IsAlive || (priLastEncryptedString > priLastEncryptedStringShown))\n        {\n            liLast = priLastEncryptedString;\n            if (liLast != priLastEncryptedStringShown)\n            {\n                ((BackgroundWorker)sender).ReportProgress(liLast);\n                priLastEncryptedStringShown = liLast;\n            }\n\n    // Sleep the thread for 1 second (1000 milliseconds)\n            Thread.Sleep(1000);\n        }\n    ```", "```cs\n                //Register the DoWork  event handler.\n                bakShowEncryptedStrings.ProgressChanged += bakShowEncryptedStrings_ProgressChanged;\n    ```", "```cs\n                // The iteration\n                int i;\n                // Show the number of SMS messages encrypted by the concurrent proThreadEncryption thread.\n                lblNumberOfSMSEncrypted.Content = priLastEncryptedString.ToString();\n                // Append each new string, from priOldLastEncryptedStringShown to the received parameter in e.ProgressPercentage - 1.\n                for (i = priOldLastEncryptedStringShown;\n                     i < (int)e.ProgressPercentage; i++)\n                {\n                    // Append the string to the txtEncryptedSMS TextBox\n                    txtEncryptedSMS.AppendText(prlsEncryptedSMS[i]\n                     + Environment.NewLine);\n\n                }\n                // Update the old last encrypted string shown\n                priOldLastEncryptedStringShown = priLastEncryptedStringShown;\n    ```", "```cs\n        // Start the BackgroundWorker with an asynchronous execution\n        bakShowEncryptedStrings.RunWorkerAsync();\n    ```", "```cs\n                // Join the independent thread to this thread to wait until ThreadProc ends\n                //proThreadEncryption.Join();\n\n                // When the thread finishes running this is the next line that is going to be executed\n                // Copy the string List generated by the thread\n                //foreach (string lsEncryptedText in prlsEncryptedSMS)\n                //{\n                //    Append a line with the Encrypted text\n                //    txtEncryptedSMS.AppendText(lsEncryptedText +\n                //     Environment.NewLine);\n            //   }\n    ```", "```cs\nbakShowEncryptedStrings.RunWorkerAsync();\nproThreadEncryption.Start();\n```", "```cs\nprivate int priLastEncryptedString;\nprivate int priLastEncryptedStringShown;\nprivate int priOldLastEncryptedStringShown;\n```", "```cs\nwhile ((priLastEncryptedString < 1))\n{\n    Thread.Sleep(10);\n}\n```", "```cs\nwhile (proThreadEncryption.IsAlive || (priLastEncryptedString > priLastEncryptedStringShown))\n{\n    liLast = priLastEncryptedString;\n    if (liLast != priLastEncryptedStringShown)\n    {\n        ((BackgroundWorker)sender).ReportProgress(liLast);\n        priLastEncryptedStringShown = liLast;\n    }\n    Thread.Sleep(2000);\n}\n```", "```cs\nlblNumberOfSMSEncrypted.Content = priLastEncryptedString.ToString();\n```", "```cs\nfor (i = priOldLastEncryptedStringShown; i < (int)e.ProgressPercentage; i++)\n{\n    txtEncryptedSMS.AppendText(prlsEncryptedSMS[i]+ Environment.NewLine);\n}\n```", "```cs\npriOldLastEncryptedStringShown = priLastEncryptedStringShown;\n```", "```cs\n        // The number of processors or cores available in the computer for this application\n        private int priProcessorCount = Environment.ProcessorCount;\n    ```", "```cs\n        // The string list with SMS messages encrypted (output)\n        private List<List<string>> prlsEncryptedSMS;\n        // The number of the last encrypted string\n        private List<int> priLastEncryptedString;\n    ```", "```cs\n        // The threads list\n        private List<Thread> prloThreadList;\n    ```", "```cs\n        private void ThreadEncryptProcedure(object poThreadParameter)\n    ```", "```cs\n        string lsEncryptedText;\n        // Retrieve the thread number received in object poThreadParameter\n        int liThreadNumber = (int) poThreadParameter;\n        // ThreadNumber + 1\n        int liStringNumber;\n\n        // Create a new string list for the prlsSMSToEncrypt corresponding to the thread\n        prlsEncryptedSMS[liThreadNumber] = new List<string>((prlsSMSToEncrypt.Count / priProcessorCount));\n        priLastEncryptedString[liThreadNumber] = 0;\n\n        liStringNumber = 0;\n        int i;\n        // steps the thread number\n        string lsText;\n        // Iterate through each string in the prlsSMSToEncrypt string list stepping by priProcessorCount\n        // To distribute the work among each concurrent thread\n        for (i = liThreadNumber; i < prlsSMSToEncrypt.Count; i +=priProcessorCount)\n        {\n            lsText = prlsSMSToEncrypt[i];\n            lsEncryptedText = Encrypt(lsText);\n            // Append a string with the Encrypted text\n            prlsEncryptedSMS[liThreadNumber].Add(lsEncryptedText);\n\n            priLastEncryptedString[liThreadNumber]++;\n            liStringNumber++;\n        }\n    ```", "```cs\n        // Thread number\n        int liThreadNumber;\n        // Create the thread list and string lists\n        prloThreadList = new List<Thread>(priProcessorCount);\n        prlsEncryptedSMS = new List<List<string>>(priProcessorCount);\n        priLastEncryptedString = new List<int>(priProcessorCount);\n\n        // Initialize the threads\n        for (liThreadNumber = 0; liThreadNumber < priProcessorCount;liThreadNumber++)\n        {\n            // Just to occupy the number\n            prlsEncryptedSMS.Add(new List<string>());\n            // Just to occupy the number\n            priLastEncryptedString.Add(0);\n            // Add the new thread, with a parameterized start (to allow parameters)\n            prloThreadList.Add(new Thread(new ParameterizedThreadStart(ThreadEncryptProcedure)));\n        }\n\n        // Now, start the threads\n        for (liThreadNumber = 0; liThreadNumber < priProcessorCount;liThreadNumber++)\n        {\n            prloThreadList[liThreadNumber].Start(liThreadNumber);\n        }\n\n        // Start the BackgroundWorker with an asynchronous execution\n        bakShowEncryptedStrings.RunWorkerAsync();\n    ```", "```cs\nprivate List<List<string>> prlsEncryptedSMS;\n```", "```cs\nprivate List<Thread> prloThreadList;\n```", "```cs\nfor (liThreadNumber = 0; liThreadNumber < priProcessorCount;liThreadNumber++)\n{\n    prlsEncryptedSMS.Add(new List<string>());\n    priLastEncryptedString.Add(0);\n    prloThreadList.Add(new Thread(new ParameterizedThreadStart(ThreadEncryptProcedure)));\n}\n```", "```cs\nfor (liThreadNumber = 0; liThreadNumber < priProcessorCount; liThreadNumber++)\n{\n    prloThreadList[liThreadNumber].Start(liThreadNumber);\n}\n```", "```cs\nbakShowEncryptedStrings.RunWorkerAsync();\n```", "```cs\nprivate void ThreadEncryptProcedure(object poThreadParameter)\n```", "```cs\nint liThreadNumber = (int) poThreadParameter;\n```", "```cs\nfor (i = liThreadNumber; i < prlsSMSToEncrypt.Count;i += priProcessorCount)\n```", "```cs\nprlsEncryptedSMS[liThreadNumber] = new List<string>((prlsSMSToEncrypt.Count / priProcessorCount));\n```", "```cs\npriLastEncryptedString[liThreadNumber]++;\n```"]