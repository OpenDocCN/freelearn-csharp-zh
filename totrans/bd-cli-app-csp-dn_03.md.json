["```cs\n$ dotnet new console -n helloConsole -o helloConsole --use-program-main\n```", "```cs\nPS C:\\code> dotnet new console -n helloConsole -o helloConsole --use-program-main\nThe template \"Console App\" was created successfully.\nProcessing post-creation actions...\nRestoring C:\\code\\helloConsole\\helloConsole.csproj:\n  Determining projects to restore...\n  Restored C:\\code\\helloConsole\\helloConsole.csproj (in 121 ms).\nRestore succeeded.\n```", "```cs\n$ code ./helloConsole\n```", "```cs\nnamespace helloConsole;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}\n```", "```cs\n$ dotnet run\n```", "```cs\nnamespace helloConsole;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine($\"Hello, {args[0]}!\");\n    }\n}\n```", "```cs\n$ dotnet run Packt\n```", "```cs\n$ dotnet run Packt Publishing\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // performing a backup of the background and\n        //foreground colors\n        var originalBackroungColor = Console.BackgroundColor;\n        var originalForegroundColor = Console.ForegroundColor;\n        // changing the background and foreground colors\n        Console.BackgroundColor = ConsoleColor.Blue;\n        Console.ForegroundColor = ConsoleColor.Yellow;\n     // setting the title of the terminal while the\n     //application is running\n        Console.Title = \"Packt Publishing Console App\";\n        // displaying a message\n        Console.WriteLine($\"Hello from Packt Publishing!\");\n        // restoring the background and foreground colors\n        // to their original values\n        Console.BackgroundColor = originalBackroungColor;\n        Console.ForegroundColor = originalForegroundColor;\n        // waiting for the user to press a key to end the program.\n        // this is useful to see the altering of the terminal's title\n        Console.ReadKey(true);\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int counter = 1;\n        while(true)\n        {\n            Console.WriteLine($\"Printing line number {counter}\");\n            counter++;\n            Task delayTask = Task.Run(async () => await Task.\n            Delay(1000));\n            delayTask.Wait();\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.CancelKeyPress += (sender, e) =>\n        {\n            e.Cancel = true; // This will prevent the program from \n                             // terminating immediately\n            Console.WriteLine(\"CancelKeyPress event raised!\\\n            nPerforming cleanup...\");\n            // Performing cleanup operations (logging out of services, \n            saving progress state, closing database connections,...)\n            Environment.Exit(0); // This will terminate the program \n                                 // when cleanup is done\n        };\n        int counter = 1;\n        while(true)\n        {\n            Console.WriteLine($\"Printing line number {counter}\");\n            counter++;\n            Task delayTask = Task.Run(async () => await Task.\n            Delay(1000));\n            delayTask.Wait();\n        }\n    }\n}\n```", "```cs\n$ dotnet build\n```", "```cs\n$ .\\helloConsole 42\n```"]