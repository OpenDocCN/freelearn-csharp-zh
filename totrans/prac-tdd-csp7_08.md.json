["```cs\n  public interface IGravatarService\n  {\n    string GetGravatar(string emailAddress);\n    string GetGravatar(string emailAddress, int size);\n    string GetGravatar(string emailAddress, int size, string rating);\n    string GetGravatar(string emailAddress, int size, string rating, \n    string imageType);\n  }\n```", "```cs\n[Fact]\npublic void ItTakesGravatarService()\n{\n  // Arrange\n  var fakeGravatarService = new FakeGravatarService();\n  var service = new SpeakerService(_fakeRepository, fakeGravatarService);           \n}\n```", "```cs\npublic interface IGravatarService\n{\n}\n```", "```cs\n\npublic SpeakerService(IRepository repository, IGravatarService gravatarService)\n{\n  _repository = repository;\n}\n```", "```cs\n[Fact]\npublic void ItCallsGravatarService()\n{\n  // Arrange\n  var expectedSpeaker = SpeakerFactory.Create(_fakeRepository);\n  var service = new SpeakerService(_fakeRepository, _fakeGravatarService);\n\n  // Act\n  service.Get(expectedSpeaker.Id);\n\n  // Assert\n  Assert.True(_fakeGravatarService.GetGravatarCalled);\n}\n```", "```cs\npublic interface IGravatarService\n{\n  void GetGravatar();\n}\n```", "```cs\npublic class FakeGravatarService : IGravatarService\n{\n  public bool GetGravatarCalled { get; set; }\n\n  public void GetGravatar()\n  {\n    GetGravatarCalled = true;\n  } \n}\n```", "```cs\nprivate readonly IRepository _repository;\nprivate readonly IGravatarService _gravatarService;\n\npublic SpeakerService(IRepository repository, IGravatarService gravatarService)\n{\n  _repository = repository;\n  _gravatarService = gravatarService;\n}\n\npublic Models.SpeakerDetail Get(int id)\n{\n  var speaker = _repository.Get(id);\n\n  if (speaker == null || speaker.IsDeleted)\n  {\n    throw new SpeakerNotFoundException();\n  }\n\n  var gravatar = _gravatarService.GetGravatar();\n\n  return new Models.SpeakerDetail\n  {\n    Id = speaker.Id,\n    Name = speaker.Name,\n    Location = speaker.Location\n  };\n}\n```", "```cs\n[Fact]\npublic void ItCallsGravatarServiceWithEmail()\n{\n  // Arrange\n  var expectedSpeaker = SpeakerFactory.Create(_fakeRepository, emailAddress: \"example@test.com\");\n  var service = new SpeakerService(_fakeRepository, _fakeGravatarService);\n\n  // Act\n  service.Get(expectedSpeaker.Id);\n\n  // Assert\n  Assert.True(_fakeGravatarService.WithEmailCalled);\n  Assert.Equal(expectedSpeaker.EmailAddress, _fakeGravatarService.CalledWith);\n}\n```", "```cs\npublic string CalledWith { get; set; }\n\npublic void GetGravatar(string emailAddress)\n{\n  GetGravatarCalled = true;\n  CalledWith = emailAddress;\n}\n```", "```cs\npublic Models.SpeakerDetail Get(int id)\n{\n  var speaker = _repository.Get(id);\n\n  if (speaker == null || speaker.IsDeleted)\n  {\n    throw new SpeakerNotFoundException();\n  }\n\n  var gravatar = _gravatarService.GetGravatar(speaker.EmailAddress);\n\n  return new Models.SpeakerDetail\n  {\n    Id = speaker.Id,\n    Name = speaker.Name,\n    Location = speaker.Location,\n  };\n}\n```", "```cs\n[Fact]\npublic void GivenGravatarServiceThenItSetsGravatar()\n{\n  // Arrange\n  var expectedSpeaker = SpeakerFactory.Create(_fakeRepository);\n  var service = new SpeakerService(_fakeRepository, \n   _fakeGravatarService);\n\n  // Act\n  var actualSpeaker = service.Get(expectedSpeaker.Id);\n  var expectedGravatar = \n   _fakeGravatarService.GetGravatar(expectedSpeaker.EmailAddress);\n\n  // Assert\n  Assert.True(_fakeGravatarService.WithEmailCalled);\n  Assert.Equal(expectedSpeaker.Id, actualSpeaker.Id);\n  Assert.Equal(expectedSpeaker.Name, actualSpeaker.Name);\n  Assert.Equal(expectedGravatar, actualSpeaker.Gravatar);\n}\n```", "```cs\npublic string GetGravatar(string emailAddress)\n{\n  WithEmailCalled = true;\n  CalledWith = emailAddress;\n\n  return System.Reflection.MethodBase.GetCurrentMethod().Name;\n}\n```", "```cs\npublic class GetGravatar\n{\n}\n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  var gravatarService = new GravatarService();\n}\n```", "```cs\nnamespace SpeakerMeet.Api.Services\n{\n  public class GravatarService\n  {}\n}\n```", "```cs\n[Fact]\npublic void ItImplementsIGravatarInterface()\n{\n  // Arrange\n  // Act\n  var gravatarService = new GravatarService();\n\n  // Assert\n  Assert.IsAssignableFrom<IGravatarService>(gravatarService);\n}\n```", "```cs\npublic class GravatarService : IGravatarService\n{\n  public string GetGravatar(string emailAddress)\n  {\n    throw new System.NotImplementedException();\n  }\n}\n```", "```cs\n[Fact]\npublic void ItHasGetGravatarMethod()\n{\n  // Arrange\n  IGravatarService gravatarService = new GravatarService();\n\n  // Act\n  gravatarService.GetGravatar(\"example@test.com\");\n}\n```", "```cs\npublic string GetGravatar(string emailAddress)\n{\n  return string.Empty;\n}\n```", "```cs\n[Trait(\"Category\", \"Integration\")]\npublic class GetGravatar\n```", "```cs\n[Fact]\npublic void GivenEmailAddressThenGravatarReturned()\n{\n  // Arrange\n  IGravatarService gravatarService = new GravatarService();\n\n  // Act\n  var actual = gravatarService.GetGravatar(\"example@test.com\");\n\n  // Assert\n  Assert.Equal(\"http://www.gravatar.com/avatar/29e3f53ee49fae541ee0f48fb712c231\", actual);\n}\n```", "```cs\npublic string GetGravatar(string emailAddress)\n{\n  return Gravatar.GetGravatarImageUrl(emailAddress);\n}\n```", "```cs\n[Trait(\"Category\", \"SpeakerRepository\")]\npublic class Class\n{\n  [Fact]\n  public void ItExists()\n  {\n    var repo = new SpeakerRepository();\n  }\n}\n```", "```cs\npublic class SpeakerRepository\n{\n}\n```", "```cs\n[Fact]\npublic void ItIsARepository()\n{\n  // Arrange / Act\n  var repo = new SpeakerRepository();\n\n  // Assert\n  Assert.IsAssignableFrom<IRepository<Speaker>>(repo);\n}\n```", "```cs\npublic class SpeakerRepository : IRepository<Speaker>\n{\n  public Speaker Get(int id)\n  {\n    throw new System.NotImplementedException();\n  }\n\n  public IQueryable<Speaker> GetAll()\n  {\n    throw new System.NotImplementedException();\n  }\n}\n```", "```cs\n[Trait(\"Category\", \"SpeakerRepository\")]\npublic class Get\n{\n}\n```", "```cs\n[Fact]\npublic void ItHasGetMethod()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n\n  // Act\n  var result = repo.Get(0);\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  return null;\n}\n```", "```cs\n[Trait(\"Category\", \"SpeakerRepository\")]\npublic class GetAll\n{\n}\n```", "```cs\n[Fact]\npublic void ItHasGetAllMethod()\n{\n  // Arrange  \n  var repo = new SpeakerRepository();\n\n  // Act\n  var result = repo.GetAll();\n}\n```", "```cs\n[Trait(\"Category\", \"SpeakerRepository\")]\npublic class Create\n{\n}\n```", "```cs\n[Fact]\npublic void ItHasCreateMethod()\n{\n  // Arrange\n  IRepository<Speaker> repo = new SpeakerRepository();\n\n  // Act\n  var result = repo.Create(new Speaker());\n}\n```", "```cs\npublic interface IRepository<T>\n{\n  T Get(int id);\n  IQueryable<T> GetAll();\n  T Create(T item);\n}\n```", "```cs\npublic Speaker Save(Speaker speaker)\n{\n return null;\n}\n```", "```cs\n[Trait(\"Category\",\"SpeakerRepository\")]\npublic class Delete\n{\n}\n```", "```cs\n[Fact]\npublic void ItHasDeleteMethod()\n{\n  // Arrange\n  IRepository<Speaker> repo = new SpeakerRepository();\n  var speaker = new Speaker();\n\n  // Act\n  repo.Delete(speaker);\n}\n```", "```cs\npublic interface IRepository<T>\n{\n  T Get(int id);\n  IQueryable<T> GetAll();\n  T Create(T item);\n  void Delete(T item);\n}\n```", "```cs\npublic void Delete(Speaker speaker)\n{\n}\n```", "```cs\n[Trait(\"Category\", \"SpeakerRepository\")]\npublic class Update\n{\n}\n```", "```cs\n[Fact]\npublic void ItHasUpdateMethod()\n{\n  // Arrange\n  IRepository<Speaker> repo = new SpeakerRepository();\n  var speaker = new Speaker();\n\n  // Act\n  var result = repo.Update(speaker);\n}\n```", "```cs\npublic interface IRepository\n{\n  TGet(int id);\n  IQueryable<T> GetAll();\n  T Create(T item);\n  T Update(T item);\n  void Delete(T item);\n}\n```", "```cs\npublic Speaker Update(Speaker speaker)\n{\n  return null;\n}\n```", "```cs\n[Fact]\npublic void ItAddsASpeakerToTheRepository()\n{\n  // Arrange\n  var repo = new TestableSpeakerRepository();\n\n  // Act\n  var result = repo.Create(new Speaker());\n\n  // Assert\n  Assert.Equal(1, repo.SpeakersCollection.Count);\n}\n```", "```cs\npublic class TestableSpeakerRepository : SpeakerRepository\n{\n}\n```", "```cs\n// Assert\nAssert.Equal(1, repo.SpeakersCollection.Count);\n```", "```cs\npublic class TestableSpeakerRepository : SpeakerRepository\n{\n  public IQueryable<Speaker> SpeakersCollection { get; set; }\n}\n```", "```cs\n// Assert\nAssert.Equal(1, repo.SpeakersCollection.Count);\n```", "```cs\nprotected readonly IList<Speaker> Speakers = new List<Speaker>();\n\npublic Speaker Create(Speaker speaker)\n{\n  Speakers.Add(speaker);\n\n  return speaker;\n}\n```", "```cs\ninternal class TestableSpeakerRepository : SpeakerRepository\n{\n  public IList<Speaker> SpeakersCollection => Speakers;\n}\n```", "```cs\n[Fact]\npublic void ItAssignsUniqueIdsToEachSpeaker()\n{\n  // Arrange\n  var repo = new TestableSpeakerRepository();\n\n  // Act\n  var speaker1 = repo.Create(new Speaker());\n  var speaker2 = repo.Create(new Speaker());\n\n  // Assert\n  Assert.NotEqual(speaker1.Id, speaker2.Id);\n}\n```", "```cs\nprivate int _currentId = 0;\n\npublic Speaker Create(Speaker speaker)\n{\n  speaker.Id = ++_currentId;\n\n  Speakers.Add(speaker);\n\n  return speaker;\n}\n```", "```cs\n[Fact]\npublic void ItReturnsANewSpeaker()\n{\n  // Arrange\n  var repo = new TestableSpeakerRepository();\n  var speaker = new Speaker { Id = 0 };\n\n  // Act\n  var result = repo.Create(speaker);\n\n  // Assert\n  Assert.Equal(0, speaker.Id);\n}\n```", "```cs\npublic Speaker Create(Speaker speaker)\n{\n  var newSpeaker = new Speaker\n  {\n    Id = ++_currentId,\n    Name = speaker.Name,\n    Location = speaker.Location,\n    IsDeleted = speaker.IsDeleted\n  };\n\n  Speakers.Add(newSpeaker);\n\n  return newSpeaker;\n}\n```", "```cs\n[Fact]\npublic void ItProtectsAgainstObjectChangesAfterCreation()\n{\n  // Arrange\n  var repo = new TestableSpeakerRepository();\n  var speaker = repo.Create(new Speaker());\n\n  // Act\n  speaker.Name = \"test name\";\n\n  // Audit\n  var result = repo.SpeakersCollection.First();\n\n  // Assert\n  Assert.NotEqual(\"test name\", result.Name);\n}\n```", "```cs\npublic Speaker Create(Speaker speaker)\n{\n  var newSpeaker = new Speaker\n  {\n    Id = ++_currentId,\n    Name = speaker.Name,\n    Location = speaker.Location,\n    IsDeleted = speaker.IsDeleted\n  };\n\n  Speakers.Add(newSpeaker);\n\n  var returnableSpeaker = new Speaker\n  {\n    Id = newSpeaker.Id,\n    Name = newSpeaker.Name,\n    Location = newSpeaker.Location,\n    IsDeleted = newSpeaker.IsDeleted\n  };\n\n  return returnableSpeaker;\n}\n```", "```cs\nprivate readonly TestableSpeakerRepository _repo;\n\npublic Create()\n{\n  _repo = new TestableSpeakerRepository();\n}\n```", "```cs\nprivate Speaker CloneSpeaker(Speaker speaker)\n{\n  return new Speaker\n  {\n    Id = speaker.Id,\n    Name = speaker.Name,\n    Location = speaker.Location,\n    IsDeleted = speaker.IsDeleted\n  };\n}\n```", "```cs\npublic Speaker Create(Speaker speaker)\n{\n  var newSpeaker = CloneSpeaker(speaker);\n\n  newSpeaker.Id = ++_currentId;\n\n  Speakers.Add(newSpeaker);\n\n  return CloneSpeaker(newSpeaker);\n}\n```", "```cs\n[Fact]\npublic void ItThrowsWhenSpeakerIsNotFound()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n\n  // Act\n  var result = Record.Exception(() => repo.Get(-1));\n\n  // Assert\n  Assert.IsType<SpeakerNotFoundException>(result.GetBaseException());\n}\n```", "```cs\npublic class SpeakerNotFoundException : Exception\n{\n  public SpeakerNotFoundException()\n  {\n  }\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  if (id == -1)\n  {\n    throw new SpeakerNotFoundException();\n  }\n\n  return null;\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  if (id > -1)\n  {\n    return null;\n  }\n\n  throw new SpeakerNotFoundException();\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  return null;\n}\n```", "```cs\n[Fact]\npublic void ItReturnsANullSpeakerWhenNotFound()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n\n  // Act\n  var result = repo.Get(-1);\n\n  // Assert\n  Assert.IsType<NullSpeaker>(result);\n}\n```", "```cs\npublic class NullSpeaker : Speaker\n{\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  return new NullSpeaker();\n}\n```", "```cs\n[Fact]\npublic void ItReturnsNullWhenNotFound()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n\n  // Act\n  var result = repo.Get(-1);\n\n  // Assert\n  Assert.Null(result);\n}\n```", "```cs\n[Fact(Skip = \"Can't fail\")]\npublic void ItReturnsNullWhenNotFound()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n\n  // Act\n  var result = repo.Get(-1);\n\n  // Assert\n  Assert.Null(result);\n}\n```", "```cs\n[Fact]\npublic void ItReturnsASpeakerWhenFound()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker {Name = \"Test Speaker\"});\n\n  // Act\n  var result = repo.Get(speaker.Id);\n\n  // Assert\n  Assert.NotNull(result);\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  return new Speaker();\n}\n```", "```cs\n// Assert\nAssert.NotNull(result);\nAssert.Equal(\"Test Speaker\", result.Name);\n```", "```cs\npublic Speaker Get(int id)\n{\n  return Speakers.SingleOrDefault(s => s.Id == id);\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  return Speakers.SingleOrDefault(s => s.Id == id) ?? new Speaker();\n}\n```", "```cs\n[Fact]\npublic void ItProtectsAgainstObjectChanges()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker { Name = \"Test Speaker\" });\n  var retrievedSpeaker = repo.Get(speaker.Id);\n  retrievedSpeaker.Name = \"New Speaker Name\";\n\n  // Act\n  var result = repo.Get(speaker.Id);\n\n  // Assert\n  Assert.NotEqual(retrievedSpeaker.Name, result.Name);\n}\n```", "```cs\npublic Speaker Get(int id)\n{\n  var speaker = Speakers.SingleOrDefault(s => s.Id == id);\n\n  if (speaker != null)\n  {\n    speaker = CloneSpeaker(speaker);\n  }\n\n  return speaker;\n}\n```", "```cs\n[Fact]\npublic void ItReturnsNoSpeakersWhenThereAreNoSpeakers()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n\n  // Act\n  var result = repo.GetAll();\n\n  // Assert\n  Assert.NotNull(result);\n}\n```", "```cs\npublic IQueryable<Speaker> GetAll()\n{\n  return new List<Speaker>().AsQueryable();\n}\n```", "```cs\n// Assert\nAssert.NotNull(result);\nAssert.IsAssignableFrom<IQueryable<Speaker>>(result);\nAssert.Equal(0, result.Count());\n```", "```cs\n[Fact]\npublic void ItReturnsASingleSpeakerWhenOnlyOneSpeakerExists()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  repo.Create(new Speaker { Name = \"Test Speaker\"});\n\n  // Act\n  var result = repo.GetAll();\n\n  // Assert\n  Assert.Equal(1, result.Count());\n}\n```", "```cs\npublic IQueryable<Speaker> GetAll()\n{\n  return Speakers.AsQueryable();\n}\n```", "```cs\n// Act\nvar result = repo.GetAll().ToList();\n\n// Assert\nAssert.Single(result);\nAssert.Equal(\"Test Speaker\", result.First().Name);\n```", "```cs\n[Fact]\npublic void ItReturnsManySpeakersWhenManySpeakersExists()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  repo.Create(new Speaker());\n  repo.Create(new Speaker());\n  repo.Create(new Speaker());\n\n  // Act\n  var result = repo.GetAll().ToList();\n\n  // Assert\n  Assert.Equal(3, result.Count);           \n}\n```", "```cs\n[Fact]\npublic void ItProtectsAgainstObjectChanges()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  repo.Create(new Speaker {Name = \"Test Name\"});\n  var speakers = repo.GetAll().ToList();\n  speakers.First().Name = \"New Name\";\n\n  // Act\n  var result = repo.GetAll();\n\n  // Assert\n  Assert.NotEqual(speakers.First().Name, result.First().Name);\n}\n```", "```cs\npublic IQueryable<Speaker> GetAll()\n{\n  return Speakers.Select(CloneSpeaker).AsQueryable();\n}\n```", "```cs\npublic IQueryable<Speaker> GetAll()\n{\n  return Speakers.Select(CloneSpeaker).AsQueryable();\n}\n```", "```cs\n[Fact]\npublic void ItUpdatesASpeaker()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker {Name = \"Test Name\"});\n  speaker.Name = \"New Name\";\n\n  // Act\n  var result = repo.Update(speaker);\n\n  // Assert\n  Assert.Equal(speaker.Name, result.Name);\n}\n```", "```cs\npublic Speaker Update(Speaker speaker)\n{\n  return speaker;\n}\n```", "```cs\n[Fact]\npublic void ItUpdatesASpeakerInTheRepository()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker {Name = \"Test Name\"});\n  speaker.Name = \"New Name\";\n\n  // Act\n  var updatedSpeaker = repo.Update(speaker);\n\n  // Audit\n  var result = repo.Get(speaker.Id);\n\n  // Assert\n  Assert.Equal(\"New Name\", result.Name);\n}\n```", "```cs\npublic Speaker Update(Speaker speaker)\n{\n  var oldSpeaker = Speakers.FirstOrDefault(s => s.Id == speaker.Id);\n  var index = Speakers.IndexOf(oldSpeaker);\n  Speakers[index] = speaker;           \n\n  return speaker;\n}\n```", "```cs\n[Fact]\npublic void ItHasUpdateMethod()\n{\n  // Arrange\n  IRepository<Speaker> repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker());\n\n  // Act\n  var result = repo.Update(speaker);\n}\n```", "```cs\n[Fact]\npublic void ItThrowsNotFoundExceptionWhenSpeakerDoesNotExist()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = new Speaker {Id = 5, Name = \"Test Name\"};\n\n  // Act\n  var result = Record.Exception(() => repo.Update(speaker));\n\n  // Assert\n  Assert.IsAssignableFrom<SpeakerNotFoundException>(result.GetBaseException());\n}\n```", "```cs\npublic class SpeakerNotFoundException : Exception\n{\n  public SpeakerNotFoundException(int id) : base($\"Speaker {id} not found.\")\n  {\n  }\n}\n```", "```cs\npublic Speaker Update(Speaker speaker)\n{\n  var oldSpeaker = Speakers.FirstOrDefault(s => s.Id == speaker.Id);\n  var index = Speakers.IndexOf(oldSpeaker);\n\n  if (index == -1)\n  {\n    throw new SpeakerNotFoundException(speaker.Id);\n  }\n\n  Speakers[index] = speaker;\n\n  return speaker;\n}\n```", "```cs\n[Fact]\npublic void ItProtectsAgainstObjectChanges()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker {Name = \"Test Name\"});\n  speaker.Name = \"New Name\";\n  var updatedSpeaker = repo.Update(speaker);\n\n  // Act\n  updatedSpeaker.Name = \"Updated Name\";\n\n  // Audit\n  var result = repo.Get(updatedSpeaker.Id);\n\n  // Assert\n  Assert.NotEqual(\"Updated Name\", result.Name);\n}\n```", "```cs\npublic Speaker Update(Speaker speaker)\n{\n  var oldSpeaker = Speakers.FirstOrDefault(s => s.Id == speaker.Id);\n  var index = Speakers.IndexOf(oldSpeaker);\n\n  if (index == -1)\n  {\n    throw new SpeakerNotFoundException(speaker.Id);\n  }\n\n  Speakers[index] = speaker;\n\n  return CloneSpeaker(speaker);\n}\n```", "```cs\n[Fact]\npublic void ItProtectsAgainstOriginalObjectChanges()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker { Name = \"Test Name\" });\n  speaker.Name = \"New Name\";\n  var updatedSpeaker = repo.Update(speaker);\n\n  // Act\n  speaker.Name = \"Updated Name\";\n\n  // Audit\n  var result = repo.Get(updatedSpeaker.Id);\n\n  // Assert\n  Assert.NotEqual(\"Updated Name\", result.Name);\n}\n```", "```cs\npublic Speaker Update(Speaker speaker)\n{\n  var oldSpeaker = Speakers.FirstOrDefault(s => s.Id == speaker.Id);\n  var index = Speakers.IndexOf(oldSpeaker);\n\n  if (index == -1)\n  {\n    throw new SpeakerNotFoundException(speaker.Id);\n  }\n\n  Speakers[index] = CloneSpeaker(speaker);\n\n  return CloneSpeaker(speaker);\n}\n```", "```cs\n[Fact]\npublic void ItMarksTheGivenSpeakerAsDeleted()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker {Name = \"Test Name\"});\n\n  // Act\n  repo.Delete(speaker);\n\n  // Audit\n  var result = repo.Get(speaker.Id);\n\n  // Assert\n  Assert.True(result.IsDeleted);\n}\n```", "```cs\npublic void Delete(Speaker speaker)\n{\n  speaker.IsDeleted = true;\n\n  Update(speaker);\n}\n```", "```cs\n[Fact]\npublic void ItDoesNothingWhenDeletingANonexistingSpeaker()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = new Speaker();\n\n  // Act\n  var result = Record.Exception(() => repo.Delete(speaker));\n\n  // Assert\n  Assert.Null(result);\n}\n```", "```cs\npublic void Delete(Speaker speaker)\n{\n  speaker.IsDeleted = true;\n\n  try\n  {\n    Update(speaker);\n  }\n  catch (SpeakerNotFoundException ex)\n  {\n    // We can assume non-existing speakers are deleted\n  }\n}\n```", "```cs\n[Fact]\npublic void ItProtectsAgainstPassedObjectChanges()\n{\n  // Arrange\n  var repo = new SpeakerRepository();\n  var speaker = repo.Create(new Speaker {Name = \"Test Name\"});\n\n  // Act\n  repo.Delete(speaker);\n\n  // Assert\n  Assert.False(speaker.IsDeleted);\n}\n```", "```cs\nspeaker = CloneSpeaker(speaker);\nspeaker.IsDeleted = true;\n```", "```cs\npublic interface IRepository<T>\n{\n  T Create(T item);\n  T Get(int id);\n  IQueryable<T> GetAll();\n  T Update(T item);\n  void Delete(T item);\n}\n```", "```cs\npublic class SpeakerRepository : IRepository<Speaker>\n```", "```cs\npublic class SpeakerService : ISpeakerService\n{\n  private readonly IRepository<Speaker> _repository;\n\n  public SpeakerService(IRepository<Speaker> repository)\n  {\n    _repository = repository;\n  }\n …\n```", "```cs\npublic abstract class InMemoryRepository<T> : IRepository<T>\n{\n  public abstract T Create(T speaker);\n  public abstract T Get(int id);\n  public abstract IQueryable<T> GetAll();\n  public abstract T Update(T speaker);\n  public abstract void Delete(T speaker);\n}\n```", "```cs\npublic class InMemorySpeakerRepository : InMemoryRepository<Speaker>\npublic overrideSpeaker Create(Speaker speaker)\npublic override Speaker Get(int id)\npublic override IQueryable<Speaker> GetAll()\npublic override Speaker Update(Speaker speaker)\npublic override void Delete(Speaker speaker)\n```", "```cs\npublic virtual T Create(T speaker)\n{\n  var newSpeaker = CloneSpeaker(speaker);\n  newSpeaker.Id = ++CurrentId;\n  Speakers.Add(newSpeaker);\n\n  return CloneSpeaker(newSpeaker);\n}\n```", "```cs\nprotected abstract T CloneEntity(T entity);\n```", "```cs\nprotected readonly IList<T> Entities = new List<T>();\nprotected int CurrentId;\n\npublic virtual T Create(T entity)\n{\n  var newSpeaker = CloneEntity(entity);\n  newSpeaker.Id = ++CurrentId;\n  Entities.Add(newSpeaker);\n\n  return CloneEntity(newSpeaker);\n}\n```", "```cs\npublic interface IIdentity\n{\n  int Id { get; set; }\n}\n\npublic abstract class InMemoryRepository<T> : IRepository<T> where T: IIdentity\n```", "```cs\ninternal class TestableSpeakerRepository : InMemorySpeakerRepository\n{\n  public IQueryable<Speaker> SpeakersCollection => Entities;\n}\n```", "```cs\npublic virtual T Get(int id)\n{\n  var entity = Entities.SingleOrDefault(e => e.Id == id);\n\n  if (entity != null)\n  {\n    entity = CloneEntity(entity);\n  }\n\n  return entity;\n}\n```", "```cs\npublic virtual IQueryable<T> GetAll()\n{\n  return Entities.Select(CloneEntity).AsQueryable();\n}\n```", "```cs\npublic virtual T Update(T entity)\n{\n  var oldEntity = Entities.FirstOrDefault(s => s.Id == entity.Id);\n  var index = Entities.IndexOf(oldEntity);\n\n  if (index == -1)\n  {\n    throw new EntityNotFoundException(entity.Id);\n  }\n\n  Entities[index] = CloneEntity(entity);\n\n  return CloneEntity(entity);\n}\n```", "```cs\npublic class Delete\n{\n  [Fact]\n  public void ItThrowsNotImplementException()\n  {\n    // Arrange\n    var repo = new InMemoryRepository<TestEntity>();\n\n    // Act\n    var result = Record.Exception(() => repo.Delete(new TestEntity()));\n\n    // Assert\n    Assert.IsAssignableFrom<NotImplementedException> \n    (result.GetBaseException());\n     Assert.Equal(\"Delete is not avaliable for TestEntity\", \n     result.Message);\n  } \n}\n```", "```cs\npublic class TestEntity : IIdentity\n{\n  public int Id { get; set; }\n}\n```", "```cs\nprotected virtual T CloneEntity(T entity)\n{\n  return entity;\n}\n```", "```cs\npublic virtual void Delete(T speaker)\n{\n  throw new NotImplementedException($\"Delete is not avaliable for {typeof(T).Name}\");\n}\n```", "```cs\npublic class Create\n{\n  private readonly TestableEntityRepository _repo;\n\n  public Create()\n  {\n    _repo = new TestableEntityRepository();\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    // Act\n    var result = _repo.Create(new TestEntity());\n  }\n\n  [Fact]\n  public void ItAddsAEntityToTheRepository()\n  {\n    // Act\n    var result = _repo.Create(new TestEntity());\n\n    // Assert\n    Assert.Equal(1, _repo.EntityCollection.Count());\n  }\n\n  [Fact]\n  public void ItAssignsUniqueIdsToEachEntity()\n  {\n    // Act\n    var entity1 = _repo.Create(new TestEntity());\n    var entity2 = _repo.Create(new TestEntity());\n\n    // Assert\n    Assert.NotEqual(entity1.Id, entity2.Id);\n  }\n}\n```", "```cs\ninternal class TestableEntityRepository : InMemoryRepository<TestEntity>\n{\n  public IQueryable<TestEntity> EntityCollection => Entities;\n}\n```", "```cs\npublic class Get\n{\n  private readonly InMemoryRepository<TestEntity> _repo;\n\n  public Get()\n  {\n    _repo = new InMemoryRepository<TestEntity>();\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    // Act\n    var result = _repo.Get(0);\n  }\n\n  [Fact]\n  public void ItReturnsAnEntityWhenFound()\n  {\n    // Arrange\n    var entity = _repo.Create(new TestEntity() { Name = \"Test Entity\" });\n\n    // Act\n    var result = _repo.Get(entity.Id);\n\n    // Assert\n    Assert.NotNull(result);\n    Assert.Equal(\"Test Entity\", result.Name);\n  }\n\n  [Fact]\n  public void ItReturnsNullWhenNotFound()\n  {\n    // Act\n    var result = _repo.Get(-1);\n\n    // Assert\n    Assert.Null(result);\n  }\n}\n```", "```cs\npublic class GetAll\n{\n  private readonly InMemoryRepository<TestEntity> _repo;\n\n  public GetAll()\n  {\n    _repo = new InMemoryRepository<TestEntity>();\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    // Act\n    var result = _repo.GetAll();\n  }\n\n  [Fact]\n  public void ItReturnsNoEntitiesWhenThereAreNoEntities()\n  {\n    // Act\n    var result = _repo.GetAll();\n\n    // Assert\n    Assert.NotNull(result);\n    Assert.IsAssignableFrom<IQueryable<TestEntity>>(result);\n    Assert.Equal(0, result.Count());\n  }\n\n  [Fact]\n  public void ItReturnsASingleEntityWhenOnlyOneEntityExists()\n  {\n    // Arrange\n    _repo.Create(new TestEntity { Name = \"Test Entity\" });\n\n    // Act\n    var result = _repo.GetAll().ToList();\n\n    // Assert\n    Assert.Equal(1, result.Count);\n    Assert.Equal(\"Test Entity\", result.First().Name);\n  }\n\n  [Fact]\n  public void ItReturnsManyEntitiesWhenManyEntitiesExist()\n  {\n    // Arrange\n    _repo.Create(new TestEntity());\n    _repo.Create(new TestEntity());\n    _repo.Create(new TestEntity());\n\n    // Act\n    var result = _repo.GetAll().ToList();\n\n    // Assert\n    Assert.Equal(3, result.Count);\n  }\n}\n```", "```cs\npublic class Update\n{\n  private readonly InMemoryRepository<TestEntity> _repo;\n\n  public Update()\n  {\n    _repo = new InMemoryRepository<TestEntity>();\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    // Arrange\n    var entity = _repo.Create(new TestEntity());\n   // Act\n    var result = _repo.Update(entity);\n  }\n\n  [Fact]\n  public void ItUpdatesAnEntity()\n  {\n    // Arrange\n    var entity = _repo.Create(new TestEntity(){ Name = \"Test Name\" });\n    entity.Name = \"New Name\";\n    // Act\n    var result = _repo.Update(entity);\n   // Assert\n    Assert.Equal(entity.Name, result.Name);\n  }\n\n  [Fact]\n  public void ItUpdatesAnEntityInTheRepository()\n  {\n    // Arrange\n    var entity = _repo.Create(new TestEntity() { Name = \"Test Name\" });\n    entity.Name = \"New Name\";\n   // Act\n    var updatedEntity = _repo.Update(entity);\n   // Audit\n    var result = _repo.Get(entity.Id);\n   // Assert\n    Assert.Equal(\"New Name\", result.Name);\n  }\n\n  [Fact]\n  public void ItThrowsNotFoundExceptionWhenEntityDoesNotExist()\n  {\n    // Arrange\n    var entity = new TestEntity { Id = 5, Name = \"Test Name\" };\n    // Act\n    var result = Record.Exception(() => _repo.Update(entity));\n    // Assert\n    Assert.IsAssignableFrom<EntityNotFoundException>(result.GetBaseException());\n  }\n}\n```", "```cs\nMicrosoft.EntityFrameworkCore.SqlServer\n```", "```cs\n \"ConnectionStrings\": {\"DefaultConnection\":   \n \"Server=.;Database=SpeakerMeetBook;Trusted_Connection=True;MultipleAct\n  iveResultSets=true\"}\n```", "```cs\n var connectionString =   \n  Configuration.GetConnectionString(\"DefaultConnection\");\n services.AddDbContextPool<SpeakerMeetContext>(options =>   \n  options.UseSqlServer(connectionString));\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\n\nnamespace SpeakerMeet.Api.Entities\n{\n  public class SpeakerMeetContext : DbContext\n  {\n    public SpeakerMeetContext(DbContextOptions<SpeakerMeetContext> options) : base(options)\n    { }\n\n    public virtual DbSet<Speaker> Speakers { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n      modelBuilder.Entity<Speaker>().ToTable(\"Speaker\");\n    }\n  }\n}\n```", "```cs\nusing System.ComponentModel.DataAnnotations;\n\nnamespace SpeakerMeet.Api.Entities\n{\n  public class Speaker\n  {\n    public int Id { get; set; }\n\n    [Required]\n    [StringLength(50)]\n    public string Name { get; set; }\n\n    [Required]\n    [StringLength(50)]\n    public string Location { get; set; }\n\n    [Required]\n    [StringLength(255)]\n    public string EmailAddress { get; set; }\n\n    public bool IsDeleted { get; set; }\n  }\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace SpeakerMeet.Api.Repository\n{\n  public class Repository<T> : IRepository<T> where T : class\n  {\n    private readonly DbSet<T> _dbSet;\n    protected readonly DbContext Context;\n\n    public Repository(DbContext context)\n    {\n      Context = context;\n      _dbSet = context.Set<T>();\n    }\n\n    public T Create(T entity)\n    {\n      throw new NotImplementedException();\n    }\n\n    public T Get(int id)\n    {\n      return _dbSet.Find(id);\n    }\n\n    public IQueryable<T> GetAll()\n    {\n      return _dbSet;\n    }\n\n    public T Update(T speaker)\n    {\n      throw new NotImplementedException();\n    }\n\n    public void Delete(T entity)\n    {\n      throw new NotImplementedException();\n    }\n  }\n}\n```", "```cs\nservices.AddSingleton(typeof(DbContext), typeof(SpeakerMeetContext));\nservices.AddScoped(typeof(IRepository<>), typeof(Repository<>));\nservices.AddTransient<ISpeakerService, SpeakerService>();\nservices.AddTransient<IGravatarService, GravatarService>();\n```"]