["```cs\n Assert.Throws<MyException>(() => {/* test code */ ...}).\n```", "```cs\n[Fact]\npublic void Test1()\n{\n    var myInstanceToTest = new ClassToTest();\n    Assert.Equal(5,     myInstanceToTest.MethodToTest(1));\n}\n```", "```cs\n[Theory]\n[InlineData(1, 5)]\n[InlineData(3, 10)]\n[InlineData(5, 20)]\npublic void Test1(int testInput, int testOutput)\n{\n    var myInstanceToTest = new ClassToTest();\n    Assert.Equal(testOutput, \n        myInstanceToTest.MethodToTest(testInput);\n}\n```", "```cs\npublic class Test1Data: IEnumerable<object[]>\n{\n    public IEnumerator<object[]> GetEnumerator()\n    {\n        yield return new object[] { 1, 5};\n        yield return new object[] { 3, 10 };\n        yield return new object[] { 5, 20 };\n\n    }\n\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n}\n...\n...\n[Theory]\n[ClassData(typeof(Test1Data))]\npublic void Test1(int testInput, int testOutput)\n{\n    var myInstanceToTest = new ClassToTest();\n    Assert.Equal(testOutput, \n        myInstanceToTest.MethodToTest(testInput);\n}\n```", "```cs\n[Theory]\n[MemberData(nameof(MyStaticClass.Data), \n    MemberType= typeof(MyStaticClass))]\npublic void Test1(int testInput, int testOutput)\n{\n    ...\n```", "```cs\npublic class DatabaseFixture : IDisposable\n{\n    public DatabaseFixture()\n    {\n        Db = new SqlConnection(\"MyConnectionString\");\n    }\n\n    public void Dispose()\n    {\n        Db.Close()\n    }\n    public SqlConnection Db { get; private set; }\n}\n```", "```cs\npublic class MyTestsClass : IClassFixture<DatabaseFixture>\n{\n    DatabaseFixture fixture;\n\n    public MyDatabaseTests(DatabaseFixture fixture)\n    {\n        this.fixture = fixture;\n    }\n    ...\n    ...\n}\n```", "```cs\n[CollectionDefinition(\"My Database collection\")]\npublic class DatabaseCollection : ICollectionFixture<DatabaseFixture>\n{\n    // this class is empty, since it is just a placeholder\n}\n```", "```cs\n[Collection(\"My Database collection\")]\npublic class MyTestsClass \n{\n    DatabaseFixture fixture;\n\n    public MyDatabaseTests(DatabaseFixture fixture)\n    {\n        this.fixture = fixture;\n    }\n    ...\n    ...\n}\n```", "```cs\n  var myMockDependency = new Mock<IMyInterface>();\n```", "```cs\nmyMockDependency.Setup(x=>x.MyMethod(5)).Returns(10);\n```", "```cs\nmyMockDependency.Setup(x => x.MyMethod(It.IsAny<int>))\n                  .Returns(10);\n```", "```cs\nvar myMockedInstance=myMockDependency.Object;\n...\nmyMockedInstance.MyMethod(10);\n```", "```cs\nmyMockDependency.Setup(x => x.MyProperty)\n                  .Returns(42);\n...\nmyMockDependency.Setup(p => p.MyMethodAsync(1))\n                    .ReturnsAsync(\"aasas\");\nvar res=await myMockDependency.Object\n    .MyMethodAsync(1);\n```", "```cs\nmyMockDependency.Verify(x => x.MyMethod(1), Times.AtLeast(2))\n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> Edit(\n    PackageFullEditViewModel vm,\n    [FromServices] ICommandHandler<UpdatePackageCommand> command)\n{\n    if (ModelState.IsValid)\n    {\n        await command.HandleAsync(new UpdatePackageCommand(vm));\n        return RedirectToAction(\n            nameof(ManagePackagesController.Index));\n    }\n    else\n        return View(vm);\n}\n```", "```cs\n[Fact]\npublic async Task DeletePostValidationFailedTest()\n{\n}\n```", "```cs\nvar controller = new ManagePackagesController();\ncontroller.ModelState\n    .AddModelError(\"Name\", \"fake error\");\n```", "```cs\nvar vm = new PackageFullEditViewModel();\nvar result = await controller.Edit(vm, null);\n```", "```cs\nAssert.IsType<ViewResult>(result);\nAssert.Equal(vm, (result as ViewResult).Model);\n```", "```cs\n[Fact]\npublic async Task DeletePostSuccessTest()\n{\n}\n```", "```cs\nvar controller = new ManagePackagesController();\nvar commandDependency =\n    new Mock<ICommandHandler<UpdatePackageCommand>>();\ncommandDependency\n    .Setup(m => m.HandleAsync(It.IsAny<UpdatePackageCommand>()))\n    .Returns(Task.CompletedTask);\nvar vm = new PackageFullEditViewModel();\n```", "```cs\nvar result = await controller.Edit(vm, \n    commandDependency.Object);\n```", "```cs\ncommandDependency.Verify(m => m.HandleAsync(\n    It.IsAny<UpdatePackageCommand>()), \n    Times.Once);\nAssert.IsType<RedirectToActionResult>(result);\nvar redirectResult = result as RedirectToActionResult;\nAssert.Equal(nameof(ManagePackagesController.Index), \n    redirectResult.ActionName);\nAssert.Null(redirectResult.ControllerName);\n```", "```cs\n**\\PackagesManagementTest.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**\n```"]