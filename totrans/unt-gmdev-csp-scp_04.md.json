["```cs\nusing UnityEngine;\npublic class Mover: MonoBehaviour\n{\n    public float speed = 5.0f;\n     void Update()\n     {\n        // Move the game object forward continuously at the\n        // speed specified\n        transform.Translate(Vector3.forward * speed *\n             Time.deltaTime);\n     }\n}\n```", "```cs\nusing UnityEngine;\npublic class Rotator: MonoBehaviour\n{\n    public float rotationSpeed = 90.0f;\n        // Degrees per second\n     void Update()\n     {\n        // Rotate the game object around its up axis at the\n        // speed specified\n        transform.Rotate(Vector3.up, rotationSpeed *\n            Time.deltaTime);\n     }\n}\n```", "```cs\n    void OnDisable() {\n        Destroy(this);\n    }\n    ```", "```cs\n    void LateUpdate() {\n        characterAnimator.SetFloat(\"Speed\",\n           characterRigidbody.velocity.magnitude);\n    }\n    ```", "```cs\n    void FixedUpdate() {\n        rb.AddForce(Physics.gravity * rb.mass);\n    }\n    ```", "```cs\n    void OnBecameVisible() {\n        particleSystem.Play();\n    }\n    void OnBecameInvisible() {\n        particleSystem.Stop();\n    }\n    ```", "```cs\n    OnDestroy() method, which Unity calls just before it destroys a GameObject or component. The method logs \"OnDestroy called.\" to the console, providing a way to execute cleanup logic or notify when the object is being removed from the scene:\n    ```", "```cs\n    void OnDestroy() {\n        Debug.Log(\"OnDestroy called.\");\n    }\n    ```", "```cs\n    Mathf.PI (π) by 4, since π radians equal 180 degrees. The second line uses Mathf.Sin to compute the sine of the resulting radian value, which for 45 degrees is sqrt{2}/2, approximately 0.707:\n    ```", "```cs\n    float angleRadians = Mathf.PI / 4;\n          // 45 degrees in radians\n    float sinValue = Mathf.Sin(angleRadians);\n          // Calculate sine of 45 degrees\n    ```", "```cs\nusing UnityEngine;\npublic class PlayerController : MonoBehaviour\n{\n    public float speed = 5.0f;\n    void Update()\n    {\n      float moveHorizontal = Input.GetAxis(\"Horizontal\");\n      Vector3 movement = new Vector3(moveHorizontal, 0.0f,\n          0.0f);\n      transform.position += movement * speed *\n          Time.deltaTime;\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class PlayerMovement : MonoBehaviour\n{\n    public float speed = 5.0f;\n    void Update()\n    {\n      float Horizontal = Input.GetAxis(\"Horizontal\") *\n        speed * Time.deltaTime;\n      float vertical = Input.GetAxis(\"Vertical\") * speed *\n        Time.deltaTime;\n      transform.Translate(horizontal, 0f, vertical);\n    }\n}\n```", "```cs\nif (Input.touchCount > 0) {\n    Touch touch = Input.GetTouch(0);\n    if (touch.phase == TouchPhase.Began) {\n        Vector3 touchPosition =\n          Camera.main.ScreenToWorldPoint(touch.position);\n        touchPosition.z = 0f;\n// Ensure the object stays on the same plane\n    transform.position = touchPosition;\n   }\n}\n```", "```cs\nif (Input.GetMouseButton(0)) { // 0 is the left mouse button\n    Vector3 mousePosition =\n       Camera.main.ScreenToWorldPoint(Input.mousePosition);\n    mousePosition.z = 0f;\n// Maintain object's position within the game plane\n    transform.position = mousePosition;\n}\n```", "```cs\n// Player.cs\nusing UnityEngine;\npublic class Player : MonoBehaviour\n{\n    public Health health; // Reference to the Health script\n    void Start()\n    {\n  // Accessing methods from the Health script\n      health.TakeDamage(10);\n    }\n}\n```", "```cs\n// Health.cs\nusing UnityEngine;\npublic class Health : MonoBehaviour\n{\n    public int healthPoints;\n    // Getter method to retrieve healthPoints\n    public int GetHealth()\n    {\n      return healthPoints;\n    }\n    // Setter method to update healthPoints\n    public void SetHealth(int value)\n    {\n      healthPoints = value;\n    }\n    // Method to apply damage to health\n    public void TakeDamage(int damageAmount)\n    {\n      healthPoints -= damageAmount;\n      Debug.Log(\"Player took \" + damageAmount +\n        \" damage. Current health: \" + healthPoints);\n    }\n}\n```", "```cs\n    // Enemy.cs\n    using UnityEngine;\n    public class Enemy : MonoBehaviour\n    {\n        void OnCollisionEnter(Collision collision)\n        {\n            if (collision.gameObject.CompareTag(\"Player\"))\n            {\n              // Send message to the collided player\n              // object to take damage\n              collision.gameObject.SendMessage( \"TakeDamage\", 10);\n            }\n        }\n    }\n    ```", "```cs\n    // GameController.cs\n    using UnityEngine;\n    public class GameController : MonoBehaviour\n    {\n        void Start()\n        {\n            // Broadcast message to all components in the GameController\n     // object and its children\n           gameObject.BroadcastMessage(\"Initialize\",\n           SendMessageOptions.RequireReceiver);\n        }\n    }\n    ```", "```cs\n// Player.cs\nusing UnityEngine;\npublic class Player : MonoBehaviour\n{\n    // Define a delegate type for the PowerUpCollected event\n    public delegate void PowerUpCollectedEventHandler();\n    // Define the event using the delegate type\n    public event PowerUpCollectedEventHandler   PowerUpCollected;\n    void OnTriggerEnter(Collider other)\n    {\n        if (other.CompareTag(\"PowerUp\"))\n        {\n            // Trigger the PowerUpCollected event\n            OnPowerUpCollected();\n            Destroy(other.gameObject); // Destroy the power-up object\n        }\n    }\n    // Method to trigger the PowerUpCollected event\n    protected virtual void OnPowerUpCollected()\n    {\n        PowerUpCollected?.Invoke();\n    }\n}\n```", "```cs\n// GameManager.cs\nusing UnityEngine;\npublic class GameManager : MonoBehaviour\n{\n    void Start()\n    {\n        Player player = FindObjectOfType<Player>();\n        if (player != null)\n        {\n            // Subscribe to the PowerUpCollected event\n            player.PowerUpCollected +=  HandlePowerUpCollected;\n        }\n    }\n    // Method to handle the PowerUpCollected event\n    void HandlePowerUpCollected()\n    {\n        Debug.Log(\"Player collected a power-up!\");\n    // Perform relevant actions\n    }\n}\n```", "```cs\n// AudioManager.cs\nusing UnityEngine;\npublic class AudioManager : MonoBehaviour\n{\n   // Singleton instance\n    private static AudioManager _instance;\n   // Public accessor for the singleton instance\n    public static AudioManager Instance\n    {\n        get{\n            if(_instance ==null)\n               Debug.Log(\"Instance is null\");\n            return instance;\n         }\n        void Awake()\n        {\n           if(_instance != null) {\n             destroy(gameObject);\n           }\n           else\n           {\n              _instance=this;}\n           }\n        // Private constructor to prevent external\n        // instantiation\n        private AudioManager() { }\n    // Example method\n        public void PlaySound(AudioClip clip)\n        {\n          // Play sound logic\n        }\n}\n```", "```cs\n// ExampleScript.cs\nusing UnityEngine;\npublic class ExampleScript : MonoBehaviour\n{\n    void Start()\n    {\n        // Accessing the AudioManager Singleton instance\n        AudioManager audioManager = AudioManager.Instance;\n        // Example usage: play a sound\n        AudioClip soundClip =\n           Resources.Load<AudioClip>(\"ExampleSound\");\n        if (soundClip != null)\n        {\n            audioManager.PlaySound(soundClip);\n        }\n        else\n        {\n            Debug.LogWarning(\"Sound clip not found!\");\n        }\n    }\n}\n```"]