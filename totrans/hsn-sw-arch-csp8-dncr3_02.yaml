- en: Understanding the Importance of Software Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, software architecture is one of the most discussed topics in the software
    industry, and for sure, its importance will grow more in the future. The more
    we build complex and fantastic solutions, the more we need great software architectures
    to maintain them. That is the reason why you decided to read this book. That is
    the reason why we decided to write it.
  prefs: []
  type: TYPE_NORMAL
- en: For sure, it is not an easy task to write about this important topic, which
    offers so many alternative techniques and solutions. The main objective of this
    book is not just to build an exhaustive and never-ending list of available techniques
    and solutions, but also to show how various families of techniques are related
    and how they impact, in practice, the construction of a maintainable and sustainable
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: The attention on how to create actual efficacious enterprise solutions increases
    as users always need more new features in their applications. Moreover, the need
    to deliver frequent application versions (due to a quickly changing market) increases
    the obligation to have sophisticated software architecture and development techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The history of software development and the definition of software architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software processes currently used by success enterprises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process for gathering requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to understand exactly what the
    mission of a software architecture is. You will also learn what Azure is and how
    to create your account in the platform. Besides considering this is an introductory
    chapter, you will get an overview of software processes, models, and other techniques
    that will enable you to conduct your team.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will guide you on how to create an account in Azure, hence no code
    will be provided.
  prefs: []
  type: TYPE_NORMAL
- en: What is software architecture?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are reading this book today, you should thank the computer scientists
    who decided to consider software development as an engineering area. This happened
    in the last century and, more specifically, at the end of the sixties, when they
    proposed that the way we develop software is quite similar to the way we construct
    buildings. That is why we have the name **software architecture**. Like in the
    design of a building, the main goal of a software architect is to ensure that
    the software application is implemented well. But a good implementation requires
    the design of a great solution. Hence, in a professional development project,
    you have to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the customer requirements for the solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design a great solution to meet those requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the designed solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate the solution with your customer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliver the solution in the working environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software engineering defines these activities as the software development life
    cycle. All of the theoretical software development process models (waterfall,
    spiral, incremental, agile, and so on) are somehow related to this cycle. No matter
    which model you use, if you do not work with the essential tasks presented earlier during
    your project, you will not deliver acceptable software as a solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main point about designing great solutions is totally connected to the
    purpose of this book. You have to understand that great real-world solutions bring
    with them a few fundamental constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: The solution needs to meet user requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to be delivered on time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to adhere to the project budget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to deliver good quality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution needs to guarantee a safe and efficacious future evolution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Great solutions need to be sustainable and you have to understand that there
    is no sustainable software without great software architecture. Nowadays, great
    software architectures depend on both tools and environments to perfectly fit users''
    requirements. To explain this, this book will use some great tools provided by
    Microsoft:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure**: This is the cloud platform from Microsoft, where you will find all
    of the components it provides to build advanced software architecture solutions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure DevOps**: This is the application life cycle management environment
    where you can build solutions using the latest approach for developing software,
    that is, DevOps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C#**: This is one of the most used programming languages in the world. C#
    runs on small devices up to huge servers in different operating systems and environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET Core**: This is an open source development platform that is maintained
    by the Microsoft and .NET community on GitHub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Core**: This is an open source multi-platform environment developed
    using .NET Core to build web applications and is hosted in the cloud or even on
    standard servers (on-premises).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being a software architect means understanding the aforementioned and a lot
    of other technologies. This book will guide you on a journey where you, as a software
    architect working in a team, will provide optimal solutions with the tools listed.
    Let's start this journey by creating your Azure account.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microsoft Azure** is one of the best cloud solutions currently available
    on the market. It is important to know that, inside Azure, we will find a bunch
    of components that can help us in the architecture of twenty-first century solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This subsection will guide you in creating an Azure account. If you already
    have one, you can skip this part:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the Azure portal using this URL: [https://azure.microsoft.com](https://azure.microsoft.com).
    Here, you will find a website, as follows. The translation to your native language
    will probably be set automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa88fc72-7b40-4f25-8dc3-b9c8bbb30eaa.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have accessed this portal, it is possible to sign up. If you have never
    done this before, it is possible to sign up for free, so you will be able to use
    some Azure features without spending any money.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you finish the form, you will be able to access the Azure panel. As you
    can see in the following screenshot, the panel shows a dashboard that you can
    customize, and a menu on the left, where you can set up the Azure components you
    are going to use in your solution. Throughout this book, we will come back to
    this screenshot to set up the components that create great opportunities for modern
    software architecture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77427f81-0c99-469f-b7ae-74168f7d3cda.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have your Azure account created, you are ready to understand how a
    software architect can conduct a team to develop software taking advantage of
    all of the opportunities offered by Azure. However, it is important to keep in
    mind that a software architect needs to understand something more than specific
    technologies because, nowadays, this role is played by people who are expected
    to define how the software will be delivered. A software architect not only architects
    the base of software, but they also determine how the whole software development
    and deployment process is conducted.
  prefs: []
  type: TYPE_NORMAL
- en: Software development process models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a software architect, it is really important for you to understand some of
    the common development processes that are currently used in most enterprises.
    A software development process defines how people in a team produce and deliver
    software. In general, this process is connected with a software engineering theory,
    called **software development process models**. From the time software development
    was defined as an engineering process, many process models for developing software
    have been proposed. Let's take a look at the ones that are currently common.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing traditional software development process models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the models introduced in the software engineering theory are already
    considered traditional and quite obsolete. This book does not aim to cover all
    of them, but here, we will give a brief explanation of the ones that are still
    used in some companies.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the waterfall model principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This topic may appear strange in a software architecture book of 2019, but
    yes, you may still find companies where the most traditional software process
    model still remains the guideline for software development. This process executes
    all fundamental tasks in sequence. Any software development project consists of
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements specification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests and delivery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a diagrammatic representation of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02ccc8d0-249d-4c4b-8459-5d646954db0c.png)'
  prefs: []
  type: TYPE_IMG
- en: The waterfall development cycle (https://en.wikipedia.org/wiki/Waterfall_model)
  prefs: []
  type: TYPE_NORMAL
- en: Often, the use of waterfall models causes problems related to delays in the
    delivery of a functional version of the software and user dissatisfaction due
    to the poor quality of the final product.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the incremental model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Incremental development is an approach that tries to overcome the biggest problem
    of the waterfall model: the user can test the solution only at the end of the
    project. The idea of this model is to give the users opportunities to interact
    with the solution as early as possible so that they can give useful feedback,
    which will help during the development of the software.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, also in this model, the limited number of increments and the project''s bureaucracy can
    causes problems in the interaction between developers and customers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27b7fa01-3c5e-4a47-83ad-125d6ea491fe.png)'
  prefs: []
  type: TYPE_IMG
- en: The incremental development cycle (https://en.wikipedia.org/wiki/Incremental_build_model)
  prefs: []
  type: TYPE_NORMAL
- en: The incremental model was introduced as an alternative to the waterfall approach
    and it mitigated the problems related to the lack of communication with the customer.
    For big projects, fewer increments is still a problem. Besides, at the time the
    incremental approach was used on a large scale, mainly at the end of the last
    century, many problems related to project bureaucracy were reported, due to the
    large amount of documentation required. This scenario caused the rise of a very
    important movement in the software development industry—**agile**.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding agile software development process models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this century, developing software was considered one of
    the most chaotic activities in engineering. The number of software projects that
    failed was incredibly high and this fact proved the need for a different approach
    to deal with the flexibility required by software development projects. So, in
    2001, the Agile Manifesto was introduced to the world and, from that time, various
    agile process models were proposed. Some of them have survived up till now and
    are still very common.
  prefs: []
  type: TYPE_NORMAL
- en: Please check out this link for the Agile Manifesto: [https://agilemanifesto.org/](https://agilemanifesto.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the biggest differences between agile models and traditional models
    is the way developers interact with the customer. The message that all agile models
    transmit is that the faster you deliver software to the user, the better. This
    idea is sometimes confusing for software developers who understand this as—*let''s
    try coding and that''s all folks!* However, there is an important observation
    of the Agile Manifesto that many people do not read when they start working with
    agile:'
  prefs: []
  type: TYPE_NORMAL
- en: '"That is, while there is value in the items on the right, we value the items
    on the left more."'
  prefs: []
  type: TYPE_NORMAL
- en: – Agile Manifesto, 2001
  prefs: []
  type: TYPE_NORMAL
- en: A software architect always needs to remember this. Agile processes do not mean
    a lack of discipline. Moreover, when you use the agile process, you understand
    that there is no way to have good software developed without discipline. On the
    other hand, as a software architect, you need to understand that *soft* means
    flexibility. A software project that does not deal with flexibility tends to get
    ruined over time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting into the Scrum model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scrum is an agile model for the management of software development projects.
    The model comes from lean principles and is definitely one of the widely used
    approaches for developing software nowadays.
  prefs: []
  type: TYPE_NORMAL
- en: Please check this link for more information about the Scrum framework: [https://docplayer.net/78853722-Scrum-insights-for-practitioners.html](https://docplayer.net/78853722-Scrum-insights-for-practitioners.html).
  prefs: []
  type: TYPE_NORMAL
- en: The basis of Scrum is that you have a flexible backlog of user needs that needs
    to be discussed in each agile cycle, called a **Sprint**. The Sprint Goal is determined
    by the Scrum Team, composed by the Product Owner, the Scrum Master, and the Development
    Team. The **Product Owner** is responsible for prioritizing what will be delivered
    in that sprint. During the sprint, this person will help the team to develop the
    required features. The person who leads the team in the Scrum process is called
    **Scrum Master**. All of the meetings and processes are conducted by this person.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to notice that the Scrum process does not discuss how the software
    needs to be implemented and which activities will be done. So, again, you have
    to remember the software development basis, discussed at the beginning of this
    chapter. That means Scrum needs to be implemented together with a process model.
    DevOps is one of the approaches that may help you with the use of a software development
    process model together with Scrum. We will discuss this later in this book, in
    [Chapter 18](94c84805-6921-4b9b-9f11-745dce643f53.xhtml), *Understanding DevOps
    Principles*.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling aspects to be gathered to design high-quality software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fantastic! You just started a software development project. Now, it is time
    to use all of your knowledge to deliver the best software you can. Probably, your
    next question is—*how do I start?* Well, as a software architect, you are going
    to be the one to answer it. And be sure your answer is going to evolve in each
    software project you lead:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a software development process is obviously the first thing to do.
    This is generally done during the project planning process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Besides, another very important thing to do is to gather the software requirements.
    No matter which software development process you decide to use, collecting real
    user needs is a part of a very difficult and continuous job. Of course, there
    are techniques to help you with this. And be sure that gathering requirements
    will help you to detect important aspects of software architecture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These two activities are considered by most experts in software development
    as the key to having success at the end of the development project journey. As
    a software architect, you need to enable them to happen so that you will not have
    problems while guiding your team.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the requirements gathering process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways to represent the requirements. The most traditional
    approach consists of you having to write a perfect specification before the beginning
    of the analysis. Agile methods suggest that you need to write stories as soon
    as you are ready to start a development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: you do not write requirements for the user, you write them for you
    and your team. The user just needs the job done!'
  prefs: []
  type: TYPE_NORMAL
- en: The truth is that no matter the approach you decide to adopt in your projects,
    you will have to follow some steps to gather requirements. This is what we call
    **requirements engineering.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Please check out this image of the requirements engineering process for more
    information: [https://www.slideshare.net/MohammedRomi/ian-sommerville-software-engineering-9th-edition-ch-4](https://www.slideshare.net/MohammedRomi/ian-sommerville-software-engineering-9th-edition-ch-4).'
  prefs: []
  type: TYPE_NORMAL
- en: During this process, you need to be sure that the solution is feasible. In some
    cases, the feasibility analysis is a part of the project planning process too,
    and by the time you start the requirements elicitation, you will have the feasibility
    report already done. So, let's check the other parts of this process, which will
    give you a lot of important information for the software architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Practicing the elicitation of user needs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a lot of ways to detect what exactly the user needs for a specific
    scenario. In general, this can be done using techniques that will help you to
    understand what we call user requirements. Here, you have a list of common techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The power of imagination**: If you are an expert in the area where you are
    providing solutions, you may use your own imagination to find new user requirements.
    Brainstorming can be conducted together so that a group of experts can define
    user needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Questionnaires**: This tool is useful for detecting common and important
    requirements such as the number and kind of users, peak system usage, and the
    commonly-used **operating system** (**OS**) and web browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interviews**: Interviewing the users helps you as an architect to detect
    user requirements that perhaps questionnaires and your imagination will not cover.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Observation**: There is no better way to understand the daily routine of
    a user than being with them for a day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As soon as you apply one or more of these techniques, you will have great and
    valuable information, that is, the user's needs. At that moment, you will be able
    to analyze them and detect the user and system requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: You can use these techniques in any situation where the real need
    is to gather requirements, no matter if it is for the whole system or for a single
    story.'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As soon as you detect user needs, it is time to begin the analysis of the requirements.
    At that time, you can use techniques such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prototyping**: Prototypes are really good to clarify and to materialize the
    system requirements. Today, we have many tools that can help you to mock interfaces.
    A really nice open source tool is the **Pencil Project**. You will find further
    information about it at [https://pencil.evolus.vn/](https://pencil.evolus.vn/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use cases**: The **Unified Modeling Language** (**UML**) use case model is
    an option if you need detailed documentation. The model is composed of a detailed
    specification and a diagram. **Argo UML** is another open source tool that can
    help you out with this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d8421f8e-0455-4626-a7d2-af8177559d80.png)'
  prefs: []
  type: TYPE_IMG
- en: While you are analyzing the requirements of the system, you will be able to
    clarify exactly what the users' needs are. This is really helpful when you are
    not sure about the real problem you will solve and is pretty much better than
    just starting to program the system. It is time that you will invest in having
    better code in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you finish the analysis, it is important to register it as a specification.
    This document can be written using traditional requirements or user stories, which
    are commonly used in agile projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Requirements specification represents the technical contract between the user
    and the team. There are some basic rules that this document needs to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: All stakeholders need to understand exactly what is written in the technical
    contract, even if they are not technicians.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The document needs to be clear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to classify each requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a simple feature to represent each requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ambiguity and controversy need to be avoided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides, some information can help the team to understand the context of the
    project they are going to work on. Here, you have some tips about it:'
  prefs: []
  type: TYPE_NORMAL
- en: Write an introductory chapter to give a full idea of the solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a glossary to make understanding easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the kind of user the solution will cover.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write functional and non-functional requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach documents that can help the user to understand rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you decide to write user stories, a good tip to follow is to write short
    sentences representing each moment in the system with each user, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This approach will explain exactly the reason why that feature will be implemented.
    Besides that, you will have a good tool to later analyze the stories that are
    more critical and prioritize the success of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the specification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have the specification written, it is time to confirm with the stakeholders
    whether they agree with it. This can be conducted in a review meeting or can be
    done online using collaboration tools.
  prefs: []
  type: TYPE_NORMAL
- en: This is when you present all of the prototypes, documents, and information you
    have gathered. As soon as everybody agrees with the specification, you are ready
    to start studying the best way to implement this part of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Using design thinking as a helpful tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During your career as a software architect, you will find many projects where
    your customer will bring you a solution *ready for development*. This is quite
    complicated once you consider that as the correct solution and, most of the time,
    there will be architectural and functional mistakes that will cause problems in
    the solution in the future. There are some cases where the problem is worse—when
    the customer does not know the best solution for the problem. Design thinking
    can help us with this.
  prefs: []
  type: TYPE_NORMAL
- en: '**Design thinking** is a process that allows you to collect data directly from
    the users, focusing on achieving the best results to solve a problem. During this
    process, the team will have the opportunity to discover all *personas* that will
    interact with the system. This will have a wonderful impact on the solution since
    you can develop the software by focusing on the user experience, which can have
    a fantastic impact on the results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is based on the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Empathize**: In this step, you have to execute field research to discover
    the user''s concerns. This is where you find out about the users of the system. The
    process is good for making you understand why and for whom you are developing
    this software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Define**: Once you have the users'' concerns, it is time to define their
    needs to solve them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ideate:** The needs will provide an opportunity to brainstorm some possible
    solutions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prototype**: These solutions can be developed as prototypes to confirm whether
    they are good ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: Testing the prototypes will help you to understand the prototype
    that is most connected to the real needs of the users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you have to understand is that design thinking can be a fantastic option
    to discover real requirements. As a software architect, you are committed to helping
    your team to use the correct tools at the correct time.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the principles of scalability, robustness, security, and performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Detecting requirements is a task that will let you understand the software you
    are going to develop. However, as a software architect, you don't have to only
    pay attention to the functional requirements for that system. Understanding the
    non-functional requirements is really important and one of the primordial activities
    for a software architect.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to discuss this more in [Chapter 2](a4194162-692d-4ac4-9b8e-a48199e746ab.xhtml),
    *Functional and Nonfunctional Requirements*, but at this point, it is good to
    know that the principles of scalability, robustness, security, and performance
    need to be applied for the requirements gathering process. Let''s take a look
    at each concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalability**: As a software developer, globalization gives you the opportunity
    to have your solution running all over the world. This is fantastic, but you,
    as a software architect, need to design a solution that provides that possibility.
    Scalability is the possibility for an application to increase its processing power
    as soon as it is necessary, due to the number of resources that are being consumed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robustness**: No matter how scalable your application is, if it is not able
    to guarantee a stable and always-on solution, you are not going to get any peace.
    Robustness is really important for critical solutions, where you do not have the
    opportunity for maintenance at any time, due to the kind of problem that the application
    solves. In many industries, the software cannot stop and lots of routines run
    when nobody is available (overnight, holidays, and so on). Designing a robust
    solution will give you the freedom to live while your software is running well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: This is another really important area that needs to be discussed
    after the requirements stage. Everybody is worried about security and laws dealing
    with it are being proposed in different parts of the world. You, as a software
    architect, have to understand that security needs to be provided by design. This
    is the only way to cope with all of the needs that the security community is discussing
    right now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: The process of understanding the system you are going to develop
    will probably give you a good idea of what your efforts will need to be to get
    the desired performance from the system. This topic needs to be discussed with
    the user to identify most of the bottlenecks you will face during the development
    stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is worth mentioning that all these concepts are requirements for this new
    generation of solutions that the world needs. What will differentiate good software
    for incredible software surely is the amount of work done to meet the project
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Some cases where the requirements gathering process impacted system results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the information discussed up to this point in the chapter is useful if
    you want to design software following the principles of good engineering. This
    discussion is not related to developing by using traditional or agile methods
    but focuses on building software professionally or as an amateur.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, it is good to know about some cases where the lack of activities you
    read about caused some trouble for the software project. The following cases intend
    to describe what went wrong and how the preceding techniques could have helped
    the development team to solve the problems. In most cases, simple action could
    guarantee better communication between the team and the customer and this easy
    communication flow could transform a big problem into a real solution.
  prefs: []
  type: TYPE_NORMAL
- en: Case 1 – my website is too slow to open that page!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance is one of the biggest problems that you as a software architect
    will live through during your career. The reason why this aspect of any software
    is so problematic is that we do not have infinite computational resources to solve
    problems. Besides, the cost of computation is still high, especially if you are
    talking about software with a high number of simultaneous users.
  prefs: []
  type: TYPE_NORMAL
- en: 'You cannot solve performance problems by writing requirements. However, you
    won''t end up in trouble if you write them correctly. The idea here is that requirements
    have to present the desired performance of a system. A simple sentence, describing
    this, can help the entire team that works on the project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Non-functional requirement: Performance – any web page of this software will
    respond in at least 2 seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding sentence just makes everybody (users, testers, developers, architects,
    managers, and so on) sure that any web page has a target to achieve. This is a
    good start, but it is not enough. With this, a great environment to both develop
    and deploy your application is important. This is where .NET Core can help you
    a lot. Especially if you are talking about web apps, ASP.NET Core is considered
    one of the fastest options to deliver solutions today.
  prefs: []
  type: TYPE_NORMAL
- en: If you talk about performance, you, as a software architect, should consider
    the use of the techniques listed in the following sections. It is good to mention
    that ASP.NET Core will help you to use them easily, together with some **Platform
    as a Service** (**PaaS**) solutions delivered by Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caching is a great technique to avoid queries that can consume time and, in
    general, give the same result. For instance, if you are fetching the available
    car models in a database, the number of cars in the database can increase but
    they will not change. Once you have an application that constantly accesses car
    models, a good practice is to cache that information.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that a cache is stored in the backend and that
    cache is shared by the whole application (*in-memory caching*). A single point
    of attention here is when you are working on a scalable solution, you can configure
    a *distributed cache* to solve it using the Azure platform. In fact, ASP.NET Core
    provides both of them, so you can decide on the one that bests fits your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Applying asynchronous programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you develop ASP.NET Core applications, you need to keep in mind that this
    app needs to be designed for simultaneous access by many users. Asynchronous programming
    lets you do this simply, giving you the keywords `async` and `await`.
  prefs: []
  type: TYPE_NORMAL
- en: The basic concept behind these keywords is that `async` enables any method to
    run in a different thread from the one that calls it. On the other hand, `await`
    lets you synchronize the call of an asynchronous method without blocking the thread
    that is calling it. This easy-to-develop pattern will make your application run
    without performance bottlenecks and better responsiveness. This book will cover
    more about this subject in [Chapter 2](a4194162-692d-4ac4-9b8e-a48199e746ab.xhtml),
    *Functional and Nonfunctional Requirements*.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with object allocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One very good tip to avoid a lack of performance is to understand how the Garbage
    Collector works. The Garbage Collectoris the engine that will free memory automatically
    when you finish using it. There are some very important aspects of this topic,
    due to the complexity that the GC has.
  prefs: []
  type: TYPE_NORMAL
- en: Some types of objects are not collected by the GC. The list includes any object
    that interacts with I/O, such as files and streaming. If you do not correctly
    use the C# syntax to create and destroy this kind of object, you will have memory
    leaks, which will deteriorate your application performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The incorrect way of working with I/O objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The correct way of working with I/O objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Even though the preceding practice is mandatory for I/O objects, it is totally
    recommended that you keep doing this in all disposable objects. This will help
    the GC and will keep your application running with the right amount of memory.
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect that you need to know about is that the time spent
    by the GC to collect objects that will interfere with the performance of your
    app. Because of this, avoid allocating large objects. This can cause you trouble
    waiting for the GC to finish its task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting better database access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common performance Achilles' heel is database access. The reason
    why this is still a big problem is the lack of attention while writing queries
    or lambda expressions to get information from the database. This book will cover
    Entity Framework Core in [Chapter 6](8c8a9dbc-3bfc-4291-866f-fdd1a62c16ef.xhtml),
    *Interacting with Data in C# – Entity Framework Core*, but it is important to
    know what to choose, the correct data information to read from a database, and
    filtering columns and lines is imperative for an application that wants to deliver
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: The good thing is that best practices related to caching, asynchronous programming,
    and object allocation fit completely in the environment of databases. It is only
    a matter of choosing the correct pattern to get better-performance software.
  prefs: []
  type: TYPE_NORMAL
- en: Case 2 – the user's needs are not properly implemented
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The more technology is used in a wide variety of areas, the more difficult it
    is to deliver exactly what the user needs. Maybe this sentence sounds weird to
    you, but you have to understand that developers, in general, study to develop
    software, but they rarely study to deliver the needs of a specific area. Of course,
    it is not easy to learn how to develop software, but it is even more difficult
    to understand a need in a particular area. Software development nowadays delivers
    software to all possible types of industries. The question here is *how can a
    developer, being a software architect or not, evolve enough to deliver software
    in the area they are responsible for?*
  prefs: []
  type: TYPE_NORMAL
- en: 'Gathering software requirements definitely will help you in this tough task.
    Moreover, writing them will make you understand and organize the architecture
    of the system. There are several ways to minimize the risks of implementing something
    different from what the user really needs:'
  prefs: []
  type: TYPE_NORMAL
- en: Prototyping the interface to achieve the understanding of the user interface faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the data flow to detect gaps between the system and the user operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequent meetings to be updated on the current needs and aligned to the incremental
    deliveries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Again, as a software architect, you will have to define how the software will
    be implemented. Most of the time, you are not going to be the one who programs
    it, but you will always be the one responsible for this. For this reason, some
    techniques can be useful to avoid the wrong implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements are reviewed with the developers to guarantee that they understand
    what they need to develop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code inspection to validate a predefined code standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meetings to eliminate impediments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case 3 – the usability of the system does not meet user needs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usability is a key point for the success of a software project. The way the
    software is presented and how it solves a problem can help the user to decide
    whether they want to use it or not. As a software architect, you have to keep
    in mind that delivering software with good usability is mandatory nowadays.
  prefs: []
  type: TYPE_NORMAL
- en: There are basic concepts of usability that this book does not intend to cover.
    But a good way to meet the correct user needs when it comes to usability is by
    understanding who is going to use the software. Design thinking can help you a
    lot with that, as was discussed earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the user will help you to decide whether the software is going
    to run on a web page, or a cell phone, or even in the background. This understanding
    is very important to a software architect because the elements of a system will
    be better presented if you correctly map who will use them.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if you do not care about that, you will just deliver software
    that works. This can be good for a short time, but it will not exactly meet the
    real needs that made a person ask you to architect software. You have to keep
    in mind the options and understand that good software is designed to run on many
    platforms and devices.
  prefs: []
  type: TYPE_NORMAL
- en: You will be happy to know that C# is an incredible cross-platform option for
    that. So, you can develop solutions to run your apps in Linux, Windows, Android,
    and iOS. You can run your applications on big screens, tablets, cell phones, and
    even drones! You can embed apps on boards for automation or in HoloLens for mixed
    reality. Software architects have to be open-minded to design exactly what their
    users need.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – detecting user needs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The case study of this book will take you on a journey of creating the software
    architecture for a travel agency called **World Wild Travel Club** (**WWTravelClub**).
    The purpose of this case study is to make you understand the theory explained
    in each chapter, plus to provide the during the process of reading this book to
    develop an enterprise application with Azure, Azure DevOps, C#, .NET Core, ASP.NET
    Core, and other technologies that will be introduced in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Book case study – introducing World Wild Travel Club
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**World Wild Travel Club** (**WWTravelClub**) is a travel agency that was created
    to change the way people make decisions about their vacations and other trips
    around the world. To do so, they are developing an online service where every
    detail of a trip experience will be assisted by a club of experts specifically
    selected for each destination.'
  prefs: []
  type: TYPE_NORMAL
- en: The concept of this platform is that you can be both a visitor and a destination
    expert at the same time. The more you participate as an expert in a destination,
    the higher the points you will score. These points can be exchanged for tickets
    that people buy online using the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The customer came with the following requirements for the platform. It is important
    to know that, in general, customers do not bring the requirements ready for development.
    That is why the requirements gathering process is so important:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Common user view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Promotional packages on the home page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for packages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Details for each package:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Buy a package
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Buy a package with a club of experts included:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment on your experience
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask an expert
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate an expert
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Register as a common user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Destination expert view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same view as the common user view
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Answer the questions asking for your destination expertise
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Manage the points you scored answering questions:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Exchange points for tickets
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Administrator view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage packages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage common users
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage destination experts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To finish this, it is important to note that WWTravelClub intends to have more
    than 100 Destination Experts per package and will offer around 1,000 different
    packages all over the world.
  prefs: []
  type: TYPE_NORMAL
- en: Book case study – understanding user needs and system requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To summarize the user needs of WWTravelClub, you can read the following user
    stories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`US_001`: As a common user, I want to view promotional packages on the home
    page, so that I can easily find my next vacation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_002`: As a common user, I want to search for packages I cannot find on
    the home page so that I can explore other trip opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_003`: As a common user, I want to see the details of a package, so that
    I can decide which package to buy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_004`: As a common user, I want to register myself, so that I can start
    buying the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_005`: As a registered user, I want to buy a package, so that I can process
    the payment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_006`: As a registered user, I want to buy a package with a club of experts
    included, so that I can have an exclusive trip experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_007`: As a registered user, I want to ask for an expert, so that I can
    get the best of my trip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_008`: As a registered user, I want to comment on my experience, so that I
    can give feedback from my trip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_009`: As a registered user, I want to evaluate an expert who helps me,
    so that I can share with others how fantastic they were.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_010`: As a registered user, I want to register as a Destination Expert
    View, so that I can help people who travel to my city.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_011`: As an expert user, I want to answer questions about my city, so that I
    can score points to be exchanged in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_012`: As an expert user, I want to exchange points for tickets, so that I
    can travel around the world more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_013`: As an administrator user, I want to manage packages, so that users
    can have fantastic opportunities to travel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_014`: As an administrator user, I want to manage registered users, so that WWTravelClub
    can guarantee good service quality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_015`: As an administrator user, I want to manage expert users, so that
    all of the questions regarding our destinations are answered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_016`: As an administrator user, I want to offer more than 1,000 packages
    around the world, so that different countries can experience WWTravelClub service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_017`: As an administrator user, I want to have more than 1,000 users simultaneously
    accessing the website, so that I can support all of the needs of my users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_018`: As a user, I want to access WWTravelClub in my native language, so
    that I can easily understand the package offered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_019`: As a user, I want to access WWTravelClub in the Chrome, Firefox,
    and Edge web browsers, so that I can use the web browser of my preference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US_020`: As a user, I want to buy packages safely, so that only WWTravelClub
    will have my credit card information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that while you start writing the stories, information related to non-functional
    requirements such as security, environment, performance, and scalability can be
    included.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, some system requirements may be omitted when you write user stories
    and need to be included in the software specification. These requirements can
    be related to legal aspects, hardware and software prerequisites, or even points
    of attention for the correct system delivery. They need to be mapped and listed
    as well as user stories. The list of WWTravelClub system requirements is presented
    in the following. Notice that requirements are written in the future because the
    system does not exist yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SR_001`: The system will use Microsoft Azure components to deliver the scalability
    required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SR_002`: The system will respect **General Data Protection Regulation** (**GDPR**) requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SR_003`: The system will run on the Windows, Linux, iOS, and Android platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SR_004`: Any web page of this system will respond in at least 2 seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the purpose of a software architect in a software
    development team. Also, this chapter covered the basics of software development
    process models and the requirements gathering process. You also had the opportunity
    to learn about how to create your Azure account, which will be used during the
    case study of this book, which was presented to you in the previous section. Moreover,
    you even learned about functional and non-functional requirements and how to create
    them using user stories. These techniques will surely help you deliver a better
    software project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will have the opportunity to understand how functional
    and non-functional requirements are important for software architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the expertise that a software architect needs to have?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can Azure help a software architect?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a software architect decide the best software development process model
    to use in a project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a software architect contribute to gathering requirements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of requirements does a software architect need to check in a requirement
    specification?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does design thinking help a software architect in the process of gathering
    requirements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do user stories help a software architect in the process of writing requirements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are good techniques to develop very good performance software?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a software architect check whether a user requirement is correctly
    implemented?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, you have some books and links you may consider reading to gather more
    information about this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers](https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/overview/what-is-azure/](https://azure.microsoft.com/en-us/overview/what-is-azure/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/dotnet/core/about](https://docs.microsoft.com/en-us/dotnet/core/about)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/aspnet/core/](https://docs.microsoft.com/en-us/aspnet/core/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/hands-full-stack-web-development-aspnet-core](https://www.packtpub.com/web-development/hands-full-stack-web-development-aspnet-core)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://agilemanifesto.org/](https://agilemanifesto.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038](https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/](https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://scrumguides.org/](https://scrumguides.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/professional-scrummasters-handbook](https://www.packtpub.com/application-development/professional-scrummasters-handbook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/aspnet/core/performance/performance-best-practices](https://docs.microsoft.com/en-us/aspnet/core/performance/performance-best-practices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.microsoft.com/en-us/hololens](https://www.microsoft.com/en-us/hololens)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Incremental_build_model](https://en.wikipedia.org/wiki/Incremental_build_model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Waterfall_model](https://en.wikipedia.org/wiki/Waterfall_model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
