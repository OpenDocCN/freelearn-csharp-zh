["```cs\n    public class GameStates\n     {\n         public enum GameStateType\n         {\n             GamePlaying,\n             GameWon,\n             GameLost,\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using System;\n     using UnityEngine.UI;\n\n     public class MyGameManager : MonoBehaviour\n     {\n         public Text textStateMessages;\n         public Button buttonWinGame;\n         public Button buttonLoseGame;\n\n         private GameStates.GameStateType currentState;\n         private float timeGamePlayingStarted;\n         private float timeToPressAButton = 5;\n\n         void Start()\n         {\n              currentState = GameStates.GameStateType.GamePlaying;\n         }\n\n         //--------- Update[ S ] - state specific actions\n         void Update()\n         {\n             switch (currentState)\n             {\n                 case GameStates.GameStateType.GamePlaying:\n                     UpdateStateGamePlaying();\n                     break;\n                 case GameStates.GameStateType.GameWon:\n                     // do nothing\n                     break;\n                 case GameStates.GameStateType.GameLost:\n                     // do nothing\n                     break;\n             }\n         }\n\n         public void NewGameState(GameStates.GameStateType newState)\n         {\n             // (1) state EXIT actions\n             OnMyStateExit(currentState);\n\n             // (2) change current state\n             currentState = newState;\n\n             // (3) state ENTER actions\n             OnMyStateEnter(currentState);\n\n             PostMessageDivider();\n         }\n\n         public void PostMessageDivider()\n         {\n             string newLine = \"\\n\";\n             string divider = \"--------------------------------\";\n             textStateMessages.text += newLine + divider;\n         }\n\n         public void PostMessage(string message)\n         {\n             string newLine = \"\\n\";\n             string timeTo2DecimalPlaces =\n     String.Format(\"{0:0.00}\", Time.time);\n             textStateMessages.text += newLine +\n     timeTo2DecimalPlaces + \" :: \" + message;\n         }\n\n         private void DestroyButtons()\n         {\n             Destroy(buttonWinGame.gameObject);\n             Destroy(buttonLoseGame.gameObject);\n         }\n\n         //--------- OnMyStateEnter[ S ] - state specific actions\n         private void OnMyStateEnter(GameStates.GameStateType state)\n         {\n             string enterMessage = \"ENTER state: \" +\n             state.ToString();\n             PostMessage(enterMessage);\n\n             switch (state)\n             {\n                 case GameStates.GameStateType.GamePlaying:\n                     OnMyStateEnterGamePlaying();\n                     break;\n                 case GameStates.GameStateType.GameWon:\n                     // do nothing\n                     break;\n                 case GameStates.GameStateType.GameLost:\n                     // do nothing\n                     break;\n             }\n         }\n\n         private void OnMyStateEnterGamePlaying()\n         {\n             // record time we enter state\n             timeGamePlayingStarted = Time.time;\n         }\n\n         //--------- OnMyStateExit[ S ] - state specific actions\n         private void OnMyStateExit(GameStates.GameStateType state)\n         {\n             string exitMessage = \"EXIT state: \" + state.ToString();\n             PostMessage(exitMessage);\n\n             switch (state)\n             {\n                 case GameStates.GameStateType.GamePlaying:\n                     OnMyStateExitGamePlaying();\n                     break;\n                 case GameStates.GameStateType.GameWon:\n                     // do nothing\n                     break;\n                 case GameStates.GameStateType.GameLost:\n                     // do nothing\n                     break;\n             }\n         }\n\n         private void OnMyStateExitGamePlaying()\n         {\n             // if leaving gamePlaying state then destroy the 2 buttons\n             DestroyButtons();\n         }\n\n         private void UpdateStateGamePlaying()\n         {\n             float timeSinceGamePlayingStarted =\n             Time.time - timeGamePlayingStarted;\n             if (timeSinceGamePlayingStarted > timeToPressAButton)\n             {\n                 string message = \"User waited too long - automatically   \n                 going to Game LOST state\";\n                   PostMessage(message);\n                 NewGameState(GameStates.GameStateType.GameLost);\n             }\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class ButtonActions : MonoBehaviour\n     {\n         private MyGameManager myGameManager;\n\n         private void Start()\n         {\n             myGameManager = GetComponent<MyGameManager>();\n         }\n\n         public void BUTTON_CLICK_ACTION_WIN_GAME()\n         {\n             string message = \"Win Game BUTTON clicked\";\n             myGameManager.PostMessage(message);\n             myGameManager.NewGameState\n             (GameStates.GameStateType.GameWon);\n         }\n\n         public void BUTTON_CLICK_ACTION_LOSE_GAME()\n         {\n             string message = \"Lose Game BUTTON clicked\";\n             myGameManager.PostMessage(message);\n             myGameManager.NewGameState\n             (GameStates.GameStateType.GameLost);\n         }\n\n     } \n```", "```cs\n    public class GameState\n     {\n         public enum EventType\n         {\n             ButtonWinGame,\n             ButtonLoseGame\n         }\n\n         protected MyGameManager gameManager;\n         public GameState(MyGameManager manager)\n         {\n             gameManager = manager;\n         }\n\n         public virtual void OnMyStateEntered() {}\n         public virtual void OnMyStateExit() {}\n         public virtual void StateUpdate() {}\n         public virtual void OnEventReceived(EventType eventType) {}\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class StateGamePlaying : GameState\n     {\n         public StateGamePlaying(MyGameManager manager) : \n         base(manager) { }\n\n         public override void OnMyStateEntered()\n         {\n             string stateEnteredMessage = \"ENTER state: \n             StateGamePlaying\";\n             gameManager.DisplayStateEnteredMessage\n             (stateEnteredMessage);\n             Debug.Log(stateEnteredMessage);\n         }\n\n         public override void OnEventReceived(EventType eventType)\n         {\n             switch(eventType){\n                 case (EventType.ButtonWinGame):\n                     gameManager.NewGameState(gameManager.stateGameWon);\n                     break;\n                 case (EventType.ButtonLoseGame):\n                 case (EventType.TimerFinished):\n                     gameManager.NewGameState\n                     (gameManager.stateGameLost);\n                     break;\n             }\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class StateGameWon : GameState\n     {\n         public StateGameWon(MyGameManager manager) : base(manager) { }\n\n         public override void OnMyStateEntered()\n         {\n             string stateEnteredMessage = \"ENTER state: StateGameWon\";\n             gameManager.DisplayStateEnteredMessage\n             (stateEnteredMessage);\n             Debug.Log(stateEnteredMessage);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class StateGameLost : GameState\n     {\n         public StateGameLost(MyGameManager manager) : base(manager) { }\n\n         public override void OnMyStateEntered()\n         {\n             string stateEnteredMessage = \"ENTER state: StateGameLost\";\n             gameManager.DisplayStateEnteredMessage\n             (stateEnteredMessage);\n             Debug.Log(stateEnteredMessage);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n\n     public class MyGameManager : MonoBehaviour\n     {\n         public Text textGameStateName;\n         public Button buttonWinGame;\n         public Button buttonLoseGame;\n\n         [HideInInspector]\n         public StateGamePlaying stateGamePlaying;\n\n         [HideInInspector]\n         public StateGameWon stateGameWon;\n\n         [HideInInspector]\n         public StateGameLost stateGameLost;\n\n         private GameState currentState;\n\n         private void Awake()\n         {\n             stateGamePlaying = new StateGamePlaying(this);\n             stateGameWon = new StateGameWon(this);\n             stateGameLost = new StateGameLost(this);\n         }\n\n         private void Start()\n         {\n             NewGameState(stateGamePlaying);\n         }\n\n         private void Update()\n         {\n             if (currentState != null)\n                 currentState.StateUpdate();\n         }\n\n         public void NewGameState(GameState newState)\n         {\n             if (null != currentState)\n                 currentState.OnMyStateExit();\n\n             currentState = newState;\n             currentState.OnMyStateEntered();\n         }\n\n         public void DisplayStateEnteredMessage(string  \n         stateEnteredMessage)\n         {\n             textGameStateName.text = stateEnteredMessage;\n         }\n\n         public void PublishEventToCurrentState(GameState.EventType \n         eventType)\n         {\n             currentState.OnEventReceived(eventType);\n             DestroyButtons();\n         }\n\n         private void DestroyButtons()\n         {\n             Destroy(buttonWinGame.gameObject);\n             Destroy(buttonLoseGame.gameObject);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class SimpleTimer : MonoBehaviour\n     {\n         private float timeGamePlayingStarted;\n         private float timeToPressAButton = 5;\n\n         private MyGameManager myGameManager;\n\n         private void Start()\n         {\n             myGameManager = GetComponent<MyGameManager>();\n             timeGamePlayingStarted = Time.time;\n         }\n\n         void Update ()\n         {\n             float timeSinceGamePlayingStarted = Time.time - \n             timeGamePlayingStarted;\n\n             if (timeSinceGamePlayingStarted > timeToPressAButton)\n             {\n                 myGameManager.PublishEventToCurrentState\n                 (GameState.EventType.TimerFinished);\n             }\n         }\n     } \n```", "```cs\n    public enum EventType\n     {\n         ButtonWinGame,\n         ButtonLoseGame,\n         TimerFinished\n     } \n```", "```cs\n    public override void OnEventReceived(EventType eventType)\n     {\n         switch(eventType){\n             case (EventType.ButtonWinGame):\n                 gameManager.NewGameState(gameManager.stateGameWon);\n                 break;\n             case (EventType.ButtonLoseGame):\n             case (EventType.TimerFinished):\n                 gameManager.NewGameState(gameManager.stateGameLost);\n                 break;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public abstract class Decision : ScriptableObject\n     {\n         public abstract bool Decide(StateController controller);\n     }\n```", "```cs\n    [System.Serializable]\n     public class Transition\n     {\n         public Decision decision;\n         public State trueState;\n     } \n```", "```cs\n    using UnityEngine;\n\n     [CreateAssetMenu(menuName = \"MyGame/State\")]\n     public class State : ScriptableObject\n     {         public Transition[] transitions;\n\n         public void UpdateState(StateController controller)\n         {\n             CheckTransitions(controller);\n         }\n\n         private void CheckTransitions(StateController controller)\n         {\n             for (int i = 0; i < transitions.Length; i++)\n             {\n                 bool decisionSucceeded = \n                 transitions[i].decision.Decide(controller);\n\n                 if (decisionSucceeded)\n                 {\n                     controller.TransitionToState\n                     (transitions[i].trueState);\n                 }\n             }\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class StateController : MonoBehaviour\n     {\n         public State currentState;\n         [HideInInspector] public MyGameManager gameManager;\n\n         void Awake()\n         {\n             gameManager = GetComponent<MyGameManager>();\n         }\n\n         private void Update()\n         {\n             currentState.UpdateState(this);\n             gameManager.DisplayCurrentState(currentState);\n         }\n\n         public void TransitionToState(State nextState)\n         {\n             currentState = nextState;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     [CreateAssetMenu(menuName = \"MyGame/Decisions/GameWonDecision\")]\n     public class GameWonDecision : Decision\n     {\n\n         public override bool Decide(StateController controller)\n         {\n             return GameWonActionDetected(controller.gameManager);\n         }\n\n         private bool GameWonActionDetected(MyGameManager gameManager)\n         {\n             return gameManager.HasCollectedAllStars();\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     [CreateAssetMenu(menuName = \"MyGame/Decisions/GameLostDecision\")]\n     public class GameLostDecision : Decision\n     {\n\n         public override bool Decide(StateController controller)\n         {\n             return GameLostActionDetected(controller.gameManager);\n         }\n\n         private bool GameLostActionDetected(MyGameManager gameManager)\n         {\n             return gameManager.GetTimeRemaining() <= 0;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n\n     public class MyGameManager : MonoBehaviour\n     {\n         public Text textCurrentState;\n         public Text textStarsCollected;\n         public Text textSecondsLeft;\n\n         public float secondsLeft = 10;\n         public int totalStarsToBeCollected = 2;\n         private int starsColleted = 0;\n\n         void Update()\n         {\n             secondsLeft -= Time.deltaTime;\n             UpdateDisplays();\n         }\n\n         public void DisplayCurrentState(State currentState)\n         {\n             textCurrentState.text = currentState.name;\n         }\n\n         public bool HasCollectedAllStars()\n         {\n             return (starsColleted == totalStarsToBeCollected);\n         }\n\n         public float GetTimeRemaining()\n         {\n             return secondsLeft;\n         }\n\n         public void BUTTON_ACTION_PickupOneStar()\n         {\n             starsColleted++;\n         }\n\n         private void UpdateDisplays()\n         {\n             textStarsCollected.text = \"stars = \" + starsColleted;\n             textSecondsLeft.text = \"time left = \" + secondsLeft;\n         }\n     } \n```", "```cs\n[CreateAssetMenu(menuName = \"MyGame/Decisions/GameLostDecision\")] \n```", "```cs\n    private bool GameLostActionDetected(MyGameManager gameManager)\n     {\n         return (gameManager.GetTimeRemaining() <= 0) || \n         (gameManager.GetHealth() <= 0);\n     } \n```", "```cs\n    private float health = 1;\n     public float healthPlusMaximum = 0.03f;\n     public float healthMinusMaximum = -0.03f;\n\n     void Update()\n     {\n         // extra feature\n         RandomlyChangeHealth();\n\n         secondsLeft -= Time.deltaTime;\n         UpdateDisplays();\n     }\n\n     // extra freature\n     public float GetHealth()\n     {\n         return health;\n     }\n\n     // health can't go below 0 or above 1\n     private void RandomlyChangeHealth()\n     {\n         float healthChange = Random.Range(healthMinusMaximum,  \n         healthPlusMaximum);\n         health += healthChange;\n         health = Mathf.Clamp(health, 0, 1);\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class ColorManager : MonoBehaviour\n     {\n         private ColorModel colorModel;\n         private ColorChangeListenerConsole colorChangeListenerConsole;\n\n         void Awake()\n         {\n             colorModel = new ColorModel();\n             colorChangeListenerConsole = new \n             ColorChangeListenerConsole();\n         }\n\n         public void BUTTON_ACTION_make_green()\n         {\n             colorModel.SetColor(Color.green);\n         }\n\n         public void BUTTON_ACTION_make_blue()\n         {\n             colorModel.SetColor(Color.blue);\n         }\n\n         public void BUTTON_ACTION_make_red()\n         {\n             colorModel.SetColor(Color.red);\n         }\n     }\n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n\n     public class ColorChangeListenerImage : MonoBehaviour\n     {\n         void OnEnable() {\n             ColorModel.OnChangeColor += ChangeColorEvent;\n         }\n\n         void OnDisable(){\n             ColorModel.OnChangeColor -= ChangeColorEvent;\n         }\n\n         void ChangeColorEvent(Color newColor)\n         {\n             GetComponent<Image>().color = newColor;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n\n     public class ColorChangeListenerText : MonoBehaviour\n     {\n         void OnEnable() {\n             ColorModel.OnChangeColor += ChangeColorEvent;\n         }\n\n         void OnDisable(){\n             ColorModel.OnChangeColor -= ChangeColorEvent;\n         }\n\n         void ChangeColorEvent(Color newColor)\n         {\n             GetComponent<Text>().color = newColor;\n         }\n     }\n```", "```cs\n    using UnityEngine;\n\n     public class ColorChangeListenerConsole\n     {\n         public ColorChangeListenerConsole()\n         {\n             ColorModel.OnChangeColor += ChangeColorEvent;\n         }\n\n         ~ColorChangeListenerConsole()\n         {\n             ColorModel.OnChangeColor -= ChangeColorEvent;\n         }\n\n         void ChangeColorEvent(Color newColor){\n             Debug.Log(\"new color = \" + newColor);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class ColorModel\n     {\n         private Color color;\n\n         public delegate void ColorChangeHandler(Color newColor);\n         public static event ColorChangeHandler OnChangeColor;\n\n         private void PublishColorEvent()\n         {\n             // if there is at least one listener to this delegate\n             if (OnChangeColor != null)\n                 // broadcast change colour event\n                 OnChangeColor(this.color);\n         }\n\n         public void SetColor(Color newColor)\n         {\n             this.color = newColor;\n             PublishColorEvent();\n         }\n     } \n```", "```cs\n   public class Player\n    {\n        public delegate void HealthChangeAction(float health);\n        public static event HealthChangeAction OnHealthChange;\n\n        private float health;\n        const float MIN_HEALTH = 0;\n        const float MAX_HEALTH = 1;\n\n        public Player(float health = 1)\n        {\n            this.health = health;\n\n            // ensure initial value published\n            PublishHealthChangeEvent();\n        } \n\n        public float GetHealth()\n        {\n            return this.health;\n        }\n\n        public void AddHealth(float amount)\n        {\n            this.health += amount;\n            if (this.health > MAX_HEALTH)\n            {\n                this.health = MAX_HEALTH;\n            }\n            PublishHealthChangeEvent();\n        }\n\n        public void ReduceHealth(float amount)\n        {\n            this.health -= amount;\n            if (this.health < MIN_HEALTH)\n            {\n                this.health = MIN_HEALTH;\n            }\n            PublishHealthChangeEvent();\n        }\n\n        // event\n        private void PublishHealthChangeEvent()\n        {\n            if (null != OnHealthChange)\n                OnHealthChange(this.health);\n        }\n    } \n```", "```cs\n    using UnityEngine;\n\n     public class PlayerController\n     {\n         private Player player;\n\n         public PlayerController()\n         {\n             player = new Player();\n         }\n\n         public void AddToHealth()\n         {\n             player.AddHealth(0.5f);\n         }\n\n         public void ReduceHealth()\n         {\n             player.ReduceHealth(0.1f);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n\n     public class HealthBarDisplay : MonoBehaviour\n     {\n         private Image healthMeterFiller;\n\n         private void Start()\n         {\n             healthMeterFiller = GetComponent<Image>();\n         }\n\n         private void OnEnable()\n         {\n             Player.OnHealthChange += UpdateHealthBar;\n         }\n\n         private void OnDisable()\n         {\n             Player.OnHealthChange -= UpdateHealthBar;\n         }\n\n         public void UpdateHealthBar(float health)\n         {\n             healthMeterFiller.fillAmount = health;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class HealthChangeLogger\n     {\n         public HealthChangeLogger()\n         {\n             Player.OnHealthChange += LogNewHealth;\n         }\n\n         ~HealthChangeLogger()\n         {\n             Player.OnHealthChange -= LogNewHealth;\n         }\n\n         public void LogNewHealth(float health)\n         {\n             // 1 decimal place\n             string healthAsString = health.ToString(\"0.0\");\n             Debug.Log(\"health = \" + healthAsString);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class PlayerManager : MonoBehaviour\n     {\n         private PlayerController playerController;\n         private HealthChangeLogger healthChangeLogger;\n\n         void Start()\n         {\n             playerController = new PlayerController();\n             healthChangeLogger = new HealthChangeLogger();\n         }\n\n         void Update()\n         {\n             if (Input.GetKeyDown(\"up\"))\n                 playerController.AddToHealth();\n\n             if (Input.GetKeyDown(\"down\"))\n                 playerController.ReduceHealth();\n         }\n     } \n```"]