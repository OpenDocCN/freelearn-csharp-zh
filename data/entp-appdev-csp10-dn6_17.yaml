- en: '*Chapter 13*: Implementing Authorization in .NET 6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第13章*: 在.NET 6中实现授权'
- en: One of the important aspects of building secure applications is to ensure that
    users have access only to the resources that they need. In the real world, when
    you check in to a hotel, a front-desk employee validates your ID and credit card
    and assigns a key card to access your room. Based on the type of room you have
    chosen, you may have privileges, such as access to the lounge, pool, or gym, among
    others. Here, the validation of your ID and credit card and assigning a key card
    is called **authentication**, and permitting you to access the various resources
    is called **authorization**. So, to explain it further, using a key card, we cannot
    identify who you are but can determine what you can do.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建安全应用程序的一个重要方面是确保用户只能访问他们需要的资源。在现实生活中，当你入住酒店时，前台员工会验证你的身份证和信用卡，并分配一张房卡以进入你的房间。根据你选择的房型，你可能享有一些特权，例如进入休息室、游泳池或健身房等。在这里，验证你的身份证和信用卡以及分配房卡被称为**认证**，而允许你访问各种资源被称为**授权**。所以，为了进一步解释，使用房卡，我们无法识别你是谁，但可以确定你能做什么。
- en: Authorization is a mechanism by which you determine what users can do and grant
    or deny access to a resource of your application. For instance, users of our e-commerce
    application should be able to browse products, add them to the cart, and check
    out to buy them, and only admin or back-office users should be able to add or
    update product information, update the price of products, and approve or reject
    orders.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 授权是一种机制，通过它你可以确定用户可以做什么，并授予或拒绝对应用程序资源的访问权限。例如，我们电子商务应用程序的用户应该能够浏览产品、将它们添加到购物车并结账购买，而只有管理员或后台办公室用户应该能够添加或更新产品信息、更新产品价格以及批准或拒绝订单。
- en: 'In this chapter, we will learn what authorization is and the various ways to
    implement authorization using the ASP.NET Core framework. The following topics
    are covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习什么是授权，以及使用ASP.NET Core框架实现授权的各种方法。本章涵盖了以下主题：
- en: Understanding authorization in .NET 6
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解.NET 6中的授权
- en: Simple authorization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单授权
- en: Role-based authorization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于角色的授权
- en: Claims-based authorization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于声明（Claims）的授权
- en: Policy-based authorization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于策略的授权
- en: Custom authorization
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义授权
- en: Authorization in client and server applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端和服务器应用程序中的授权
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you need basic knowledge of Azure, Azure AD B2C, C#, .NET
    Core, and Visual Studio 2022.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要具备Azure、Azure AD B2C、C#、.NET Core和Visual Studio 2022的基本知识。
- en: Back to a few basics
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到一些基础知识
- en: Before we dig into more details, let's understand the differences between authentication
    and authorization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入更多细节之前，让我们了解认证和授权之间的区别。
- en: 'Authentication and authorization may look similar and be used interchangeably,
    but fundamentally they are different. The following table illustrates the differences:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和授权看起来可能相似，并且可以互换使用，但本质上它们是不同的。以下表格说明了这些差异：
- en: '![Table 13.1'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![表13.1'
- en: '](img/Table_13.1.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Table_13.1.jpg)'
- en: Table 13.1
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 表13.1
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [*Chapter 12*](B18507_12_Epub.xhtml#_idTextAnchor1389), *Understanding
    Authentication*, for more details on how authentication works in ASP.NET 6.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[*第12章*](B18507_12_Epub.xhtml#_idTextAnchor1389)，*理解认证*，以获取更多关于ASP.NET 6中认证工作原理的详细信息。
- en: To summarize this, authentication and authorization go hand in hand. Authorization
    works only after the identity of the user has been established, and an authentication
    challenge is triggered by authorization when a user tries to access a secure resource.
    In the upcoming sections of this chapter, we will understand how to implement
    authorization in ASP.NET 6 applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，认证和授权是相辅相成的。授权只有在用户的身份确定之后才会生效，当用户尝试访问受保护资源时，授权会触发认证挑战。在本章的后续部分，我们将了解如何在ASP.NET
    6应用程序中实现授权。
- en: Understanding authorization
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解授权
- en: Authorization in ASP.NET Core is handled by a **middleware**. When your application
    receives the first request from an unauthenticated user to a secured resource,
    an authentication challenge is invoked by the middleware, and depending on the
    authentication scheme, the user is either redirected to log in or access is forbidden.
    Once the identity of the user has been established after authentication, the authorization
    middleware checks whether the user can access the resource or not. In subsequent
    requests, the authorization middleware uses the identity of the user to determine
    whether access is allowed or forbidden.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 中的授权由 **中间件** 处理。当你的应用程序收到来自未经身份验证用户的第一个请求到受保护资源时，中间件将触发身份验证挑战，根据身份验证方案，用户要么被重定向到登录页面，要么访问被禁止。一旦在身份验证后确定了用户的身份，授权中间件会检查用户是否可以访问该资源。在后续请求中，授权中间件使用用户的身份来确定是否允许访问。
- en: 'To configure authorization middleware in your project, you need to invoke `UseAuthorization()`
    in `Program.cs`. It is mandatory to register authorization middleware only after
    authentication middleware, as authorization can be performed only after establishing
    the user''s identity. Refer to the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在项目中配置授权中间件，你需要在 `Program.cs` 中调用 `UseAuthorization()`。在注册授权中间件之前，必须先注册身份验证中间件，因为授权只能在确定用户身份后执行。请参考以下代码：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code block, you'll notice that `app.UseAuthorization()` is
    invoked after `app.UseAuthentication()` and before `app.UseEndpoints()`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，你会注意到 `app.UseAuthorization()` 在 `app.UseAuthentication()` 之后和 `app.UseEndpoints()`
    之前被调用。
- en: ASP.NET 6 provides simple, declarative role- and claims-based authorization
    models and rich policy-based models. In the following sections, we will learn
    more details about these.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET 6 提供了简单、基于角色和声明的授权模型以及丰富的基于策略的模型。在接下来的章节中，我们将学习更多关于这些模型的具体细节。
- en: Simple authorization
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单授权
- en: 'In ASP.NET Core, authorization is configured using `AuthorizationAttribute`.
    You can apply the `[Authorize]` attribute on a controller, action, or Razor page.
    When you add this attribute, access to that component is restricted only to authenticated
    users. Refer to the following code block:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 中，授权是通过 `AuthorizationAttribute` 配置的。你可以在控制器、操作或 Razor 页面上应用
    `[Authorize]` 属性。当你添加这个属性时，对该组件的访问权限将仅限于经过身份验证的用户。请参考以下代码块：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, you'll notice that the `[Authorize]` attribute is added
    to the `Index` action. When a user tries to access `/Home/Index` from the browser,
    the middleware checks whether the user is authenticated or not. If not, the user
    is redirected to the login page.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你会注意到 `[Authorize]` 属性被添加到了 `Index` 操作上。当用户尝试从浏览器访问 `/Home/Index` 时，中间件会检查用户是否已经经过身份验证。如果没有，用户将被重定向到登录页面。
- en: 'If we add the `[Authorize]` attribute to a controller, access to any action
    under that controller is restricted only to authenticated users. In the following
    code, you''ll notice that the `[Authorize]` attribute is added to `HomeController`,
    making all actions under it secure:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 `[Authorize]` 属性添加到一个控制器中，那么该控制器下所有操作的访问权限将仅限于经过身份验证的用户。在下面的代码中，你会注意到
    `[Authorize]` 属性被添加到了 `HomeController` 中，使得其下的所有操作都变得安全：
- en: '[PRE24]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: At times, you may want to allow a few areas of your application to be accessible
    to any user; for example, the login or reset password page should be open to all,
    regardless of whether the user is authenticated or not. To meet such requirements,
    you can add the `[AllowAnonymous]` attribute to a controller or an action and
    make them available to unauthenticated users as well.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能希望允许应用程序的某些区域对任何用户都开放；例如，登录或重置密码页面应该对所有用户开放，无论用户是否经过身份验证。为了满足这样的要求，你可以在控制器或操作上添加
    `[AllowAnonymous]` 属性，使它们对未经身份验证的用户也开放。
- en: In the preceding code, you'll notice that the `[AllowAnonymous]` attribute is
    added to the `Privacy` action, though we have the `[Authorize]` attribute on the
    controller. That requirement is overridden by the `[AllowAnonymous]` attribute
    on the action method and so the `Privacy` action is accessible by all users.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你会注意到 `[AllowAnonymous]` 属性被添加到了 `Privacy` 操作上，尽管控制器上已经有了 `[Authorize]`
    属性。这个要求被操作方法上的 `[AllowAnonymous]` 属性覆盖，因此 `Privacy` 操作对所有用户都是可访问的。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `[AllowAnonymous]` attribute overrides all authorization configurations.
    If you set `[AllowAnonymous]` on a controller, setting the `[Authorize]` attribute
    on any action methods under it will have no impact. In this case, the `Authorize`
    attribute on the action methods is completely ignored.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`[AllowAnonymous]` 属性会覆盖所有授权配置。如果你在一个控制器上设置了 `[AllowAnonymous]`，那么在它下面的任何操作方法上设置
    `[Authorize]` 属性将没有任何影响。在这种情况下，操作方法上的 `Authorize` 属性将被完全忽略。'
- en: So far, we have seen how to secure a controller or an action method. In the
    next section, we will see how to enable authorization globally in an ASP.NET Core
    application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何保护控制器或操作方法。在下一节中，我们将看到如何在 ASP.NET Core 应用程序中全局启用授权。
- en: Enabling authorization globally
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局启用授权
- en: So far, we have seen how to secure a controller or an action method using the
    `[Authorize]` attribute. Setting the `authorize` attribute on every controller
    or action is not sustainable in large projects; you may miss configuring it on
    newly added controllers or action methods, which can lead to a security vulnerability.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用 `[Authorize]` 属性来保护控制器或操作方法。在大型项目中，为每个控制器或操作设置 `authorize`
    属性是不可持续的；你可能会错过为新添加的控制器或操作方法配置它，这可能导致安全漏洞。
- en: 'ASP.NET Core allows you to enable authorization globally by adding a fallback
    policy in your application. You can define a fallback policy in `Program.cs`.
    The fallback policy will be applied to all requests where no explicit authorization
    requirement is defined:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 允许你通过在应用程序中添加回退策略来全局启用授权。你可以在 `Program.cs` 中定义回退策略。回退策略将应用于所有未定义显式授权要求的请求：
- en: '[PRE37]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Adding a policy globally enforces users to be authenticated to access any action
    method in your application. This option is beneficial as you don't have to specify
    the `[Authorize]` attribute for every controller/action in your application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局范围内添加策略强制用户进行身份验证才能访问应用程序中的任何操作方法。这个选项很有用，因为你不需要为应用程序中的每个控制器/操作指定 `[Authorize]`
    属性。
- en: You can still set the `[AllowAnonymous]` attribute on a controller or action
    method to override the fallback behavior and make it anonymously accessible.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然可以在控制器或操作方法上设置 `[AllowAnonymous]` 属性来覆盖默认行为，使其匿名访问。
- en: Now that we understand how to implement simple authorization, in the next section,
    let's understand what role-based authorization is and how it simplifies implementation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何实现简单的授权，在下一节中，让我们了解基于角色的授权是什么以及它是如何简化实现的。
- en: Role-based authorization
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于角色的授权
- en: It is quite common for certain areas of your application to be available to
    only certain users. Instead of granting access at the user level, general practice
    is to group users into roles and grant access to roles. Let's consider a typical
    e-commerce application, in which *users* can place orders, *support* staff can
    view, update, or cancel orders and resolve user queries, and the *admin* role
    approves or rejects orders, manages inventory, and so on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序的某些区域仅对特定用户可用是很常见的。而不是在用户级别授予访问权限，通常的做法是将用户分组到角色中，并授予角色访问权限。让我们考虑一个典型的电子商务应用程序，其中
    *用户* 可以下订单，*支持* 员工可以查看、更新或取消订单并解决用户查询，而 *管理员* 角色则批准或拒绝订单，管理库存等。
- en: Role-based authorization can address such requirements. When you create a user,
    you may assign it to one or more roles, and when we configure the `[Authorize]`
    attribute, we can pass one or more role names to the `Roles` property of the `Authorize`
    attribute.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 基于角色的授权可以解决这样的需求。当你创建一个用户时，你可以将其分配到一个或多个角色中，当我们配置 `[Authorize]` 属性时，我们可以将一个或多个角色名称传递给
    `Authorize` 属性的 `Roles` 属性。
- en: 'The following code restricts access to all action methods under the `Admin`
    controller to users who belong to the `Admin` role:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码限制了 `Admin` 控制器下所有操作方法的访问权限，仅限于属于 `Admin` 角色的用户：
- en: '[PRE44]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Similarly, you can specify comma-separated role names in the `Roles` property
    of the `Authorize` attribute, so that users who belong to either of the configured
    roles will have access to the action methods under that controller.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可以在 `Authorize` 属性的 `Roles` 属性中指定以逗号分隔的角色名称，这样属于配置的任一角色的用户都将能够访问该控制器下的操作方法。
- en: 'In the following code, you''ll notice `User,Support` is supplied as a value
    of the `Roles` property of the `[Authorize]` attribute; users belonging to the
    `User` or `Support` roles can access the action methods of `OrdersController`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，你会注意到 `User,Support` 被用作 `[Authorize]` 属性 `Roles` 属性的值；属于 `User` 或 `Support`
    角色的用户可以访问 `OrdersController` 的操作方法：
- en: '[PRE52]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: You can also specify multiple authorization attributes. If you do so, the user
    must be a member of all roles specified to access it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以指定多个授权属性。如果您这样做，用户必须是所有指定角色的成员才能访问它。
- en: 'In the following code, multiple `[Authorize]` attributes are configured on
    `InventoryController` for the `InventoryManager` and `Admin` roles. To access
    the `Inventory` controller, a user must have the `InventoryManager` and `Admin`
    roles:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，对 `InventoryController` 配置了多个 `[Authorize]` 属性，用于 `InventoryManager`
    和 `Admin` 角色。要访问 `Inventory` 控制器，用户必须具有 `InventoryManager` 和 `Admin` 角色：
- en: '[PRE60]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: You can further restrict access to the action methods under the `Inventory`
    controller by specifying authorization attributes. In the preceding code, users
    must have the `InventoryManager` and `Admin` roles to access the `Approve` action.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定授权属性进一步限制对 `Inventory` 控制器下操作方法的访问。在前面的代码中，用户必须具有 `InventoryManager`
    和 `Admin` 角色才能访问 `Approve` 操作。
- en: 'Programmatically, if you want to check whether a user belongs to a role, you
    can use the `IsInRole` method of `ClaimsPrinciple`. In the following example,
    you''ll notice that `User.IsInRole` accepts `roleName` and, based on the user''s
    role, it returns `true` or `false`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编程方式，如果您想检查用户是否属于某个角色，您可以使用 `ClaimsPrinciple` 的 `IsInRole` 方法。在以下示例中，您会注意到
    `User.IsInRole` 接受 `roleName`，并根据用户的角色返回 `true` 或 `false`：
- en: '[PRE74]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: So far, we have seen how to secure a controller or an action by specifying role
    names in an authorization attribute. In the next section, we will see how to centralize
    these configurations in one place using policy-based role authorization.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何通过在授权属性中指定角色名称来通过指定角色名称来保护控制器或操作。在下一节中，我们将看到如何使用基于策略的角色授权将这些配置集中在一个地方。
- en: Policy-based role authorization
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于策略的角色授权
- en: We can also define role requirements as policies in `Program.cs`. This approach
    is quite useful, as you can create and manage your role-based access requirements
    in one place and use policy names instead of role names to control access. To
    define a policy-based role authorization, we need to register an authorization
    policy with one or more role requirements in `Program.cs` and provide a policy
    name to the `Policy` property of the `Authorize` attribute.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在 `Program.cs` 中将角色要求定义为策略。这种方法非常有用，因为您可以在一个地方创建和管理基于角色的访问要求，并使用策略名称而不是角色名称来控制访问。为了定义基于策略的角色授权，我们需要在
    `Program.cs` 中将一个或多个角色要求注册为授权策略，并将策略名称提供给 `Authorize` 属性的 `Policy` 属性。
- en: 'In the following code, `AdminAccessPolicy` is created by adding a requirement
    with the `Admin` role:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，通过添加具有 `Admin` 角色的要求创建 `AdminAccessPolicy`：
- en: '[PRE82]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'In your controller, you can specify the policy to be applied as follows, and
    access to `AdminController` is restricted to users with the `Admin` role:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的控制器中，您可以指定要应用的政策如下，并且对 `AdminController` 的访问被限制为具有 `Admin` 角色的用户：
- en: '[PRE88]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'You can specify multiple roles while defining a policy. Users belonging to
    any one of the roles can access resources when that policy is used to authorize
    users. For example, the following code will allow a user with the `User` or `Support`
    roles to access resources:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义策略时，您可以指定多个角色。当使用该策略授权用户时，属于任何角色的用户都可以访问资源。例如，以下代码将允许具有 `User` 或 `Support`
    角色的用户访问资源：
- en: '[PRE96]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: You can use an `OrderAccessPolicy` policy with the `Authorize` attribute either
    on the controller or action methods to control access.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在控制器或操作方法上使用带有 `Authorize` 属性的 `OrderAccessPolicy` 策略来控制访问。
- en: Now that we understand how to use role-based authorization, in the next section,
    we will create a simple application and configure it to use role-based authorization.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用基于角色的授权，在下一节中，我们将创建一个简单的应用程序并将其配置为使用基于角色的授权。
- en: Implementing role-based authorization
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现基于角色的授权
- en: 'Let''s create a sample application implementing role-based authorization using
    ASP.NET Core Identity:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例应用程序，使用 ASP.NET Core Identity 实现基于角色的授权：
- en: 'Create a new ASP.NET Core project. You can use the following `dotnet` `Individual`
    accounts as the `Authentication` mode and `SQLite` as the database store:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 ASP.NET Core 项目。您可以使用以下 `dotnet` `Individual` 账户作为 `Authentication` 模式，并使用
    `SQLite` 作为数据库存储：
- en: '[PRE98]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'You need to enable role services by invoking `AddRoles<IdentityRole>()` in
    `Program.cs`. You can refer to the following code to enable it. You''ll also notice
    `RequireConfirmedAccount` is set to `false`. This is required for this sample
    as we create users programmatically:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要在 `Program.cs` 中调用 `AddRoles<IdentityRole>()` 来启用角色服务。你可以参考以下代码来启用它。你还会注意到
    `RequireConfirmedAccount` 被设置为 `false`。这对于本示例是必需的，因为我们以编程方式创建用户：
- en: '[PRE99]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Next, we need to create roles and users. For this, we will add two methods,
    `SetupRoles` and `SetupUsers`, to `Program.cs`. We can make use of the `RoleManager`
    and `UserManager` services to create roles and users. In the following code, we
    create three roles. Using `IServiceProvider`, we get an instance of the `roleManager`
    service and then we make use of the `RoleExisysAsync` and `CreateAsync` methods
    to create it:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建角色和用户。为此，我们将在 `Program.cs` 中添加两个方法，`SetupRoles` 和 `SetupUsers`。我们可以使用
    `RoleManager` 和 `UserManager` 服务来创建角色和用户。在以下代码中，我们创建了三个角色。使用 `IServiceProvider`，我们获取
    `roleManager` 服务的实例，然后我们使用 `RoleExistsAsync` 和 `CreateAsync` 方法来创建它：
- en: '[PRE100]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Similarly, we create users and assign one of the roles using the `userManager`
    service. In the following code, we create two users – `admin@abc.com`, assigned
    the `admin` role, and `support@abc.com`, assigned the `support` role:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们使用 `userManager` 服务创建用户并分配一个角色。在以下代码中，我们创建了两个用户 – `admin@abc.com`，分配了 `admin`
    角色，以及 `support@abc.com`，分配了 `support` 角色：
- en: '[PRE101]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'To invoke these two methods, we need an instance of `IserviceProvider`. The
    following code gets the instance to `IServiceProvider` to set up roles and users
    data:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要调用这两个方法，我们需要一个 `IServiceProvider` 的实例。以下代码获取 `IServiceProvider` 的实例来设置角色和用户数据：
- en: '[PRE102]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Inside the `Home` controller, add the following code. To simplify the implementation,
    we are using the `Index` view. In a real-life scenario, you need to return the
    view that is created for the respective action methods:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Home` 控制器内部，添加以下代码。为了简化实现，我们正在使用 `Index` 视图。在实际场景中，你需要返回为相应操作方法创建的视图：
- en: '[PRE103]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Optionally, we can add logic to `Layout.cshtml` to display links to navigate
    based on the logged-in user''s role. The following sample makes use of `IsInRole`
    to check the user''s role and display a link:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，我们可以在 `Layout.cshtml` 中添加逻辑来根据登录用户的角色显示导航链接。以下示例使用 `IsInRole` 来检查用户的角色并显示一个链接：
- en: '[PRE104]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: With the preceding step, the sample implementation is complete, and you can
    run the application to see how it works.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的步骤，示例实现完成，你可以运行应用程序来查看其工作方式。
- en: 'Run the application, log in with `admin@abc.com`, and you will notice that
    the **Admin** menu item is visible and **Support** is hidden:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，使用 `admin@abc.com` 登录，你会注意到 **管理员** 菜单项是可见的，而 **支持** 是隐藏的：
- en: '![Figure 13.1 – Admin user login view'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.1 – 管理员用户登录视图'
- en: '](img/Figure_13.1_B18507.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.1_B18507.jpg)'
- en: Figure 13.1 – Admin user login view
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 管理员用户登录视图
- en: 'When you log in with `support@abc.com`, you will notice the **Support** menu
    item is visible and the **Admin** item is hidden:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `support@abc.com` 登录时，你会注意到 **支持** 菜单项是可见的，而 **管理员** 项是隐藏的：
- en: '![Figure 13.2 – Support user login view'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.2 – 支持用户登录视图'
- en: '](img/Figure_13.2_B18507.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.2_B18507.jpg)'
- en: Figure 13.2 – Support user login view
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 支持用户登录视图
- en: In the next section, we will see how to use claims for authorization.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何使用声明进行授权。
- en: Claims-based authorization
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于声明的授权
- en: A **claim** is a key-value pair associated with identity after successful authentication.
    A claim can be a date of birth, gender, or zip code, for example. One or more
    claims can be assigned to a user. Claims-based authorization uses the value of
    a claim and determines whether access to a resource can be granted or not. You
    can use two approaches to validate a claim; one way is to just check whether the
    claim exists or not and the other approach is to check whether the claim exists
    with a particular value.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**是在身份验证成功后与身份相关联的关键值对。声明可以是出生日期、性别或邮政编码等。一个或多个声明可以分配给一个用户。基于声明的授权使用声明的值来确定是否可以授予对资源的访问权限。你可以使用两种方法来验证声明；一种方法只是检查声明是否存在，另一种方法是检查声明是否存在并具有特定的值。'
- en: 'To use claims-based authorization, we need to register a policy in `Program.cs`.
    You need to pass a claim name and optional values to the `RequireClaim` method
    to register. For example, the following code registers `PremiumContentPolicy`
    with the requirement of the `PremiumUser` claim:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用基于声明的授权，我们需要在 `Program.cs` 中注册一个策略。你需要传递一个声明名称和可选值到 `RequireClaim` 方法来注册。例如，以下代码注册了
    `PremiumContentPolicy` 并要求 `PremiumUser` 声明：
- en: '[PRE105]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'In the following code, the `PremiumContentPolicy` authorization policy is used
    on `PremiumContentController`. It checks whether the `PremiumUser` claim exists
    in the user claims to authorize the user''s request; it doesn''t care what value
    is in the claim:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，`PremiumContentPolicy`授权策略被用于`PremiumContentController`。它检查用户声明中是否存在`PremiumUser`声明来授权用户的请求；它不关心声明中的值是什么：
- en: '[PRE111]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'You can also specify a list of values while defining a claim. They will be
    validated to grant access to a resource. For example, as per the following code,
    the user request is authorized if the user has the `Country` claim with the values
    of `US`, `UK`, or `IN`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在定义声明时指定一个值列表。它们将被验证以授予对资源的访问权限。例如，根据以下代码，如果用户具有`Country`声明，其值为`US`、`UK`或`IN`，则用户请求被授权：
- en: '[PRE119]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Programmatically, if you want to check whether a user has a claim, you use the
    `HasClaim` method of `ClaimsPrinciple` by specifying a match condition.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序上，如果你想检查一个用户是否有声明，你可以通过指定一个匹配条件来使用`ClaimsPrincipal`的`HasClaim`方法。
- en: 'To fetch a claim value, you can use the `FindFirst` method. The following code
    illustrates an example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取一个声明值，你可以使用`FindFirst`方法。以下代码展示了示例：
- en: '[PRE126]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'As seen in the *Implementing role-based authorization* section, while adding
    a user to an application, you can also add a claim to the user using the `UserManager`
    service. In the following code, you''ll notice the `AddClaimAsync` method is invoked
    with `IdentityUser` and `Claim`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如在*实现基于角色的授权*部分所见，在向应用程序添加用户时，你也可以使用`UserManager`服务向用户添加一个声明。在以下代码中，你会注意到`AddClaimAsync`方法与`IdentityUser`和`Claim`一起被调用：
- en: '[PRE131]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: In the preceding code, you will notice two claims created and associated with
    the user using the `AddClaimAsync` method. In the next section, we will see how
    to use policy-based authorization.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你会注意到创建了两个声明，并使用`AddClaimAsync`方法与用户关联。在下一节中，我们将看到如何使用基于策略的授权。
- en: Policy-based authorization
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于策略的授权
- en: Policy-based authorization allows you to write your own logic to handle authorization
    requirements that suit your needs. For example, you have a requirement to verify
    a user's age and authorize the placing of an order only if the user is above 14
    years of age. You can use the policy-based authorization model to handle such
    requirements.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 基于策略的授权允许你编写自己的逻辑来处理满足你需求的授权需求。例如，你有一个验证用户年龄的需求，并且只有当用户年龄超过14岁时才授权下单。你可以使用基于策略的授权模型来处理这样的需求。
- en: 'To configure policy-based authorization, we need to define a requirement and
    a handler, and then register the policy with the requirement. Let''s understand
    these components:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置基于策略的授权，我们需要定义一个需求和处理器，然后使用需求注册策略。让我们了解这些组件：
- en: A **policy** is defined with one or more requirements.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略**是通过一个或多个需求定义的。'
- en: A **requirement** is a collection of data parameters used by the policy to evaluate
    the user's identity.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需求**是一组数据参数的集合，政策使用这些参数来评估用户的身份。'
- en: A **handler** is responsible for evaluating data from the requirement against
    the context and determining whether access can be granted or not.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理器**负责评估需求中的数据与上下文之间的数据，并确定是否可以授予访问权限。'
- en: In the following section, we will see how to create a requirement and a handler,
    and register an authorization policy.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何创建一个需求和处理器，并注册一个授权策略。
- en: Requirements
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求
- en: 'To create a requirement, you need to implement the `IAuthorizationRequirement`
    interface. This is a marker interface, so you don''t have any members to implement.
    For example, the following code creates `MinimumAgeRequirement`, with `MinimumAge`
    as a data parameter:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个需求，你需要实现`IAuthorizationRequirement`接口。这是一个标记接口，所以你不需要实现任何成员。例如，以下代码创建了一个`MinimumAgeRequirement`，其中`MinimumAge`是一个数据参数：
- en: '[PRE154]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Requirement handlers
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求处理器
- en: Requirement handlers encapsulate logic to allow or deny a request. They use
    requirement properties against `AuthorizationHandlerContext` to determine access.
    A handler may inherit `Authorizationhandler<TRequirement>`, where `TRequirement`
    is of the `IauthorizationRequirement` type, or implement `IAuthorizationHandler`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 需求处理器封装了允许或拒绝请求的逻辑。它们使用需求属性与`AuthorizationHandlerContext`进行比较以确定访问权限。处理器可以继承`Authorizationhandler<TRequirement>`，其中`TRequirement`是`IauthorizationRequirement`类型，或者实现`IAuthorizationHandler`。
- en: 'In the following example, `MinimumAgeAuthorizationHandler` is created by inheriting
    `AuthorizationHandler` with `MinimumAgeRequirement` as `TRequirement`. We need
    to override `HandleRequirementAsync` to write custom authorization logic where
    the user''s age is calculated from the `DateOfBirth` claim. If the user''s age
    is greater than or equal to `MinimumAge`, we invoke `context.Succeed` to grant
    access. If the claim is not present or doesn''t meet the age criteria, access
    is forbidden:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，通过从 `AuthorizationHandler` 继承并使用 `MinimumAgeRequirement` 作为 `TRequirement`
    来创建 `MinimumAgeAuthorizationHandler`。我们需要重写 `HandleRequirementAsync` 来编写自定义授权逻辑，其中用户的年龄是从
    `DateOfBirth` 声明中计算出来的。如果用户的年龄大于或等于 `MinimumAge`，我们调用 `context.Succeed` 以授予访问权限。如果声明不存在或不符合年龄标准，则禁止访问：
- en: '[PRE162]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: To mark a requirement as successful, you need to invoke `context.Succeed` by
    passing a requirement as a parameter. You don't have to handle failure, as another
    handler for the same requirement may succeed. If you want to forbid a request,
    you can invoke `context.Fail`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要标记一个需求为成功，您需要通过传递一个需求作为参数来调用 `context.Succeed`。您不需要处理失败，因为可能还有另一个处理程序会成功处理相同的需求。如果您想禁止请求，可以调用
    `context.Fail`。
- en: Note
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Handlers must be registered for service collection in `Program.cs`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在 `Program.cs` 中为服务集合注册处理程序。
- en: Registering a policy
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册策略
- en: A policy is registered with a name and a requirement in `Program.cs`. You can
    register one or more requirements while defining a policy.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，使用名称和需求注册策略。在定义策略时，您可以注册一个或多个需求。
- en: 'In the following example, a policy with a requirement is created by invoking
    `policy.Requirements.Add()` and passing a new instance of `MinimumAgeRequirement`.
    You''ll also notice `MinimumAgeAuthorizationHandler` is added to the service collection
    with a singleton scope:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，通过调用 `policy.Requirements.Add()` 并传递 `MinimumAgeRequirement` 的新实例来创建一个包含需求的策略。您还会注意到
    `MinimumAgeAuthorizationHandler` 被添加到服务集合中，具有单例作用域：
- en: '[PRE190]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'We can then configure an authorization policy on the controller or action to
    restrict access based on the user''s age:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在控制器或操作上配置授权策略，根据用户的年龄来限制访问：
- en: '[PRE199]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: If we register a policy with more than one requirement, then all requirements
    must be satisfied for successful authorization.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们注册了一个包含多个需求的策略，那么所有需求都必须得到满足才能成功授权。
- en: In the next section, we will learn how to further customize authorization.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何进一步自定义授权。
- en: Custom authorization
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义授权
- en: In the previous section, we learned how to use policy-based authorization and
    implement custom logic to handle authorization requirements. But, it is not always
    possible to register authorization policies in `Program.cs` like that. In this
    section, we will see how to use `IAuthorizationPolicyProvider` to dynamically
    build policy configurations in your application.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用基于策略的授权并实现自定义逻辑来处理授权需求。但，并不总是可以在 `Program.cs` 中像那样注册授权策略。在本节中，我们将看到如何使用
    `IAuthorizationPolicyProvider` 在您的应用程序中动态构建策略配置。
- en: 'The `IAuthorizationPolicyProvider` interface has three methods to be implemented:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`IAuthorizationPolicyProvider` 接口有三个方法需要实现：'
- en: '`GetDefaultPolicyAsync`: This method returns the default authorization policy
    to be used.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetDefaultPolicyAsync`：此方法返回要使用的默认授权策略。'
- en: '`GetFallbackPolicyAsync`: This method returns the fallback authorization policy.
    It is used when no explicit authorization requirement is defined.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetFallbackPolicyAsync`：此方法返回回退授权策略。当没有定义明确的授权需求时使用。'
- en: '`GetPolicyAsync`: This method is used to build and return an authorization
    policy for the provided policy name.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetPolicyAsync`：此方法用于构建并返回提供的策略名称的授权策略。'
- en: Let's look into an example where you want to authorize a request to several
    controllers/actions based on different age criteria, say `Over14`, `Over18`, `Over21`,
    `Over60`, and so on. One way to implement it is to register all these requirements
    as policies and use them on your controllers or actions. But, using this approach,
    the code is less maintainable and not sustainable in a large application with
    many policies. Let's see how we can make use of the authorization policy provider.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子，您可能想要根据不同的年龄标准授权对多个控制器/操作的请求，比如 `Over14`、`Over18`、`Over21`、`Over60`
    等。实现它的一个方法是将所有这些需求注册为策略并在您的控制器或操作中使用它们。但是，使用这种方法，代码的可维护性较低，在具有许多策略的大型应用程序中不可持续。让我们看看我们如何利用授权策略提供者。
- en: We need to create a class implementing `IAuthorizationPolicyProvider` and also
    implement `GetPolicy` and other methods.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个实现 `IAuthorizationPolicyProvider` 的类，并实现 `GetPolicy` 和其他方法。
- en: 'In the following example, the `MinimumAgePolicyProvider` class implements `GetPolicyAsync`.
    The input for this method is the policy name. Since our policy name is something
    such as `Over14` or `Over18`, we can use string functions and extract the age
    from them, and a requirement is initialized with the required age and registered
    as a new policy:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`MinimumAgePolicyProvider` 类实现了 `GetPolicyAsync` 方法。此方法的输入是策略名称。由于我们的策略名称类似于
    `Over14` 或 `Over18`，我们可以使用字符串函数从中提取年龄，并使用所需的年龄初始化一个要求，并将其注册为新的策略：
- en: '[PRE207]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Note
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For the implementation of `MinimumAgeRequirement`, please refer to the *Policy-based
    authorization* section.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `MinimumAgeRequirement` 的实现，请参阅 *基于策略的授权* 部分。
- en: ASP.NET Core uses only one instance of `IAuthorizationPolicyProvider`. So, you
    should either customize a `Default` and `Fallback` authorization policy or, alternatively,
    use a backup provider.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 只使用一个 `IAuthorizationPolicyProvider` 实例。因此，您应该自定义一个 `Default` 和
    `Fallback` 授权策略，或者使用备用提供程序。
- en: In the following code, you'll see a sample implementation of the `GetDefaultPolicyAsync`
    and `GetFallbackPolicyAsync` methods in the `MinimumAgePolicyProvider` class.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，您将看到 `MinimumAgePolicyProvider` 类中 `GetDefaultPolicyAsync` 和 `GetFallbackPolicyAsync`
    方法的示例实现。
- en: '`AuthorizationOptions` is injected into the constructor, and it is used to
    initialize `DefaultAuthorizationPolicyProvider`. The `BackupPolicyProvider` object
    is used to implement the `GetDefaultPolicyAsync` and `GetFallbackPolicyAsync`
    methods:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthorizationOptions` 注入到构造函数中，并用于初始化 `DefaultAuthorizationPolicyProvider`。`BackupPolicyProvider`
    对象用于实现 `GetDefaultPolicyAsync` 和 `GetFallbackPolicyAsync` 方法：'
- en: '[PRE229]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'This concludes the implementation of `MinimumAgePolicyProvider`. You can now
    use the authorization policy on your controller or action methods. In the following
    code, you''ll notice two policies are used, one with `Over14` on top of the controller
    and another with `Over18`, on the `Index` action method:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 `MinimumAgePolicyProvider` 的实现。现在您可以在控制器或操作方法上使用授权策略。在以下代码中，您会注意到使用了两个策略，一个在控制器上使用
    `Over14`，另一个在 `Index` 操作方法上使用 `Over18`：
- en: '[PRE239]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Users with an age above 14 will have access to any action methods under `OrdersController`,
    and users older than 18 will only have access to the `Index` action.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 年龄超过 14 岁的用户将能够访问 `OrdersController` 下的任何操作方法，而年龄超过 18 岁的用户只能访问 `Index` 操作。
- en: In the next section, we will learn how to create and use a custom authorization
    attribute.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何创建和使用自定义授权属性。
- en: Custom authorization attributes
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义授权属性
- en: In the previous example, a policy name with an age was passed as a string, but
    the code is not clean that way. It would be good if you could pass `age` as a
    parameter to the authorization attribute. For this, you need to create a custom
    authorization attribute inheriting the `AuthorizeAttribute` class.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，一个包含年龄的策略名称作为字符串传递，但这种方式代码不够整洁。如果能够将 `age` 作为参数传递给授权属性会更好。为此，您需要创建一个继承自
    `AuthorizeAttribute` 类的自定义授权属性。
- en: 'In the following sample code, the `AuthorizeAgeOverAttribute` class is inherited
    from the `AuthorizeAttribute` class. The constructor of this class accepts `age`
    as input. In the setter, we construct and set a policy name by concatenating `PREFIX`
    and `Age`:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例代码中，`AuthorizeAgeOverAttribute` 类继承自 `AuthorizeAttribute` 类。该类的构造函数接受 `age`
    作为输入。在设置器中，我们通过连接 `PREFIX` 和 `Age` 来构造并设置一个策略名称：
- en: '[PRE248]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'To use the `AuthorizeAgeOver` attribute, we must register the `AuthorizationHandler`
    and `AuthorizationPolicyProvider` services in `Program.cs`. In the following code,
    the `MinimumAgeAuthorizationHandler` and `MinimumAgePolicyProvider` types are
    registered as `Singleton` for `IAuthorizationHandler` and `IauthorizationPolicyProvider`,
    respectively:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `AuthorizeAgeOver` 属性，我们必须在 `Program.cs` 中注册 `AuthorizationHandler` 和 `AuthorizationPolicyProvider`
    服务。在以下代码中，`MinimumAgeAuthorizationHandler` 和 `MinimumAgePolicyProvider` 类型分别注册为
    `Singleton` 用于 `IAuthorizationHandler` 和 `IauthorizationPolicyProvider`：
- en: '[PRE270]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'Now that the custom attribute implementation is complete, we can use it on
    controller or action methods. In the following example, you can see a sample implementation,
    where age is passed as a parameter to our custom authorization attribute, `AuthorizeAgeOver`:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 现在自定义属性实现完成后，我们可以在控制器或操作方法上使用它。在以下示例中，您可以看到一个示例实现，其中年龄作为参数传递给我们的自定义授权属性 `AuthorizeAgeOver`：
- en: '[PRE274]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: In the next section, we will learn how to configure roles in an Azure AD application
    and use role-based authentication.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在Azure AD应用程序中配置角色并使用基于角色的身份验证。
- en: Authorization in client and server applications
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端和服务器应用程序的授权
- en: In previous chapters, we learned how to use **Azure Active Directory** (**AAD**)
    as an identity service to authenticate users, but to use role-based authorization,
    we need to make a few configuration changes in Azure AD. In this section, we will
    see how to enable and create custom roles in an Azure AD application and do so
    in our e-commerce application to authorize users.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了如何使用**Azure Active Directory**（**AAD**）作为身份服务来验证用户，但为了使用基于角色的授权，我们需要在Azure
    AD中进行一些配置更改。在本节中，我们将了解如何在Azure AD应用程序中启用和创建自定义角色，并在我们的电子商务应用程序中授权用户。
- en: When a user logs in to an application, Azure AD adds assigned roles and claims
    to the user's identity.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录到应用程序时，Azure AD会将分配的角色和声明添加到用户的身份中。
- en: Prerequisites
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 前提条件
- en: You should already have Azure AD and an AD app set up. If you don't, you can
    refer to the *Introduction to Azure Active Directory* section of [*Chapter 12*](B18507_12_Epub.xhtml#_idTextAnchor1389),
    *Understanding Authentication*, to get set up.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经设置了Azure AD和AD应用程序。如果没有，您可以参考[*第12章*](B18507_12_Epub.xhtml#_idTextAnchor1389)的*Azure
    Active Directory简介*部分，了解*身份验证*以进行设置。
- en: 'Let''s look into the steps that need to be performed on an Azure AD application
    to enable roles:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在Azure AD应用程序中启用角色需要执行的步骤：
- en: In the Azure portal, navigate to your **Active Directory** tenant.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中，导航到您的**Active Directory**租户。
- en: 'In the left menu, under **Manage**, select **App registrations**:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单下，在**管理**中，选择**应用注册**：
- en: '![Figure 13.3 – Azure AD application'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.3 – Azure AD应用程序'
- en: '](img/Figure_13.3_B18507.jpg)'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.3_B18507.jpg)'
- en: Figure 13.3 – Azure AD application
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – Azure AD应用程序
- en: 'Search and select your AD application from the **App registrations** page.
    Refer to the following screenshot:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用注册**页面搜索并选择您的AD应用程序。请参考以下截图：
- en: '![Figure 13.4 – Azure AD application'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.4 – Azure AD应用程序'
- en: '](img/Figure_13.4_B18507.jpg)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.4_B18507.jpg)'
- en: Figure 13.4 – Azure AD application
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – Azure AD应用程序
- en: Click on **Manifest** from the left menu to edit it, as shown in the previous
    screenshot.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的**清单**进行编辑，如图中所示。
- en: '![Figure 13.5 – Editing the manifest'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.5 – 编辑清单'
- en: '](img/Figure_13.5_B18507.jpg)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.5_B18507.jpg)'
- en: Figure 13.5 – Editing the manifest
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 编辑清单
- en: 'Locate `appRoles` to configure multiple roles. Refer to the following code
    to add a role:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位`appRoles`以配置多个角色。请参考以下代码以添加角色：
- en: '[PRE283]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: You need to provide values for `displayName`, `value`, `description`, and `id`.
    The value for `id` is `Guid`, and it must be unique for each role you add. Similarly,
    for `value`, you need to provide the role name that you refer to in your code,
    and it should be unique.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为`displayName`、`value`、`description`和`id`提供值。`id`的值是`Guid`，并且对于您添加的每个角色都必须是唯一的。同样，对于`value`，您需要提供在代码中引用的角色名称，并且它应该是唯一的。
- en: Save the manifest to complete it.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存清单以完成它。
- en: Saving a manifest with the required details will enable custom roles in an Azure
    AD application. In the next section, we will learn how to assign users to these
    custom roles.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 保存包含所需详细信息的清单将启用Azure AD应用程序中的自定义角色。在下一节中，我们将学习如何将这些自定义角色分配给用户。
- en: Assigning roles to users
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为用户分配角色
- en: 'The next step is to assign roles to users. The assignment of roles to users
    can be done using the Azure portal or programmatically using the Graph API. In
    this section, we''ll use the Azure portal to assign roles, and the same can also
    be achieved using theGraph API. For more information, you can refer to [https://docs.microsoft.com/en-us/graph/azuread-identity-access-management-concept-overview](https://docs.microsoft.com/en-us/graph/azuread-identity-access-management-concept-overview):'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为用户分配角色。用户角色的分配可以通过Azure门户或使用Graph API编程方式完成。在本节中，我们将使用Azure门户来分配角色，同样也可以使用Graph
    API实现。更多信息，请参阅[https://docs.microsoft.com/en-us/graph/azuread-identity-access-management-concept-overview](https://docs.microsoft.com/en-us/graph/azuread-identity-access-management-concept-overview)：
- en: In the Azure portal, navigate to the **Azure Active Directory** tenant.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中，导航到**Azure Active Directory**租户。
- en: Click on **Enterprise applications** from the left menu and search for and select
    your AD application.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的**企业应用程序**并搜索并选择您的AD应用程序。
- en: Go to **Manage** | **Users and Groups** | **Add User**.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**管理** | **用户和组** | **添加用户**。
- en: Search for and select the user, and click on **Ok**.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索并选择用户，然后点击**确定**。
- en: Click on **Select Role** to choose the role you want to assign.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择角色**以选择您想要分配的角色。
- en: Click **Assign** to save the selection.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**分配**以保存选择。
- en: You can continue these steps to assign roles to multiple users.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以继续这些步骤将角色分配给多个用户。
- en: 'To secure controllers or actions, you can add an `Authorize` attribute along
    with the roles. In the following code, the `Admin` controller is accessible only
    to users with the `Admin` role:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 要保护控制器或操作，您可以在角色一起添加 `Authorize` 属性。在以下代码中，`Admin` 控制器仅对具有 `Admin` 角色的用户可访问：
- en: '[PRE284]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: So far, we have learned how to enable roles in Azure AD and use the role-based
    model for authorization. In the next section, we will see how to access roles
    and claims using the user's identity in views.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习了如何在 Azure AD 中启用角色并使用基于角色的模型进行授权。在下一节中，我们将看到如何使用视图中的用户身份访问角色和声明。
- en: User identity in views
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图中的用户身份
- en: 'A user claim principle can be used in views to conditionally show or hide data
    as required. For example, the following code checks the `IsAuthenticated` property
    of the user identity to determine whether the user is authenticated or not. If
    the user is not authenticated, a link to `Sign in` is displayed; otherwise, the
    username with a `Sign out` link is displayed:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 用户声明原则可用于视图，根据需要有条件地显示或隐藏数据。例如，以下代码检查用户身份的 `IsAuthenticated` 属性以确定用户是否已认证。如果用户未认证，则显示
    `Sign in` 链接；否则，显示带有 `Sign out` 链接的用户名：
- en: '[PRE292]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: 'Similarly, we can use `IsInRole` or `HasClaim` and write our logic to show
    content to or hide content from the user:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以使用 `IsInRole` 或 `HasClaim` 并编写我们的逻辑来向用户显示内容或从用户隐藏内容：
- en: '[PRE302]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: For more details, you can refer to [https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps).
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参阅[https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps)。
- en: Summary
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what authorization is and the different ways to
    implement it using the ASP.NET Core framework. We learned how to restrict or anonymously
    allow users to access resources using simple, declarative role- and claims-based
    models, and we learned how to implement custom logic to authorize user requests
    using a rich policy-based authorization model.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是授权以及使用 ASP.NET Core 框架的不同实现方式。我们学习了如何使用简单、声明性的基于角色和声明的模型限制或匿名允许用户访问资源，我们还学习了如何使用丰富的基于策略的授权模型实现自定义逻辑以授权用户请求。
- en: We learned how to dynamically add authorization policies using authorization
    policy providers and build custom authorized attributes. We also learned how to
    configure custom roles in Azure AD and use them in an ASP.NET Core application.
    Depending on your authorization requirements, you can use one or more authorization
    models to secure your applications.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用授权策略提供程序动态添加授权策略，构建自定义授权属性。我们还学习了如何在 Azure AD 中配置自定义角色并在 ASP.NET Core
    应用程序中使用它们。根据您的授权需求，您可以使用一个或多个授权模型来保护您的应用程序。
- en: In the next chapter, we will learn how to monitor the health and performance
    of an ASP.NET Core application.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何监控 ASP.NET Core 应用程序的健康状况和性能。
- en: Questions
  id: totrans-480
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'After reading the chapter, you should be able to answer the following questions:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章后，您应该能够回答以下问题：
- en: Which of the following is the primary service that determines whether authorization
    is successful or not?
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是确定授权是否成功的主要服务？
- en: a. `IAuthorizationHandler`
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: a. `IAuthorizationHandler`
- en: b. `IAuthorizationRequirement`
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: b. `IAuthorizationRequirement`
- en: c. `IAuthorizationService`
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: c. `IAuthorizationService`
- en: d.`IAuthorizationPolicyProvider`
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: d. `IAuthorizationPolicyProvider`
- en: '**Answer: c**'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：c**'
- en: 'In the following code, access to the `Support` action is restricted to only
    the `Support` role:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，对 `Support` 动作的访问仅限于 `Support` 角色：
- en: '[PRE306]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: a. True
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: a. 正确
- en: b. False
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: b. 错误
- en: '**Answer: b**'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：b**'
- en: Further reading
  id: totrans-493
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about authorization, you can refer to [https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-6.0).
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于授权的信息，您可以参考[https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-6.0)。
