- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Particles in the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Particle effects are a fun and attractive way to add “juice” to your game. The
    Particle system within the Unity Engine provides you with the tools needed to
    make all sorts of interesting effects like sparkles, smoke, fire, and so on. This
    chapter will discuss how you can use particle effects within your UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Methods for displaying particle effects in your UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding flying stars to our loot box animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book is about UI, not particle effects. Due to the complex nature of particle
    effects, I will not be covering all the settings involved and the various intricacies
    of using particle effects. I will walk you through the steps to create a single
    particle effect but will not dive further into the process of creating particle
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the relevant codes and asset files of this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2015](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2015)'
  prefs: []
  type: TYPE_NORMAL
- en: Particles in the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using particles in UI is a hot topic. It seems like nearly every mobile game
    with loot boxes uses particles, but there is no standardized way to implement
    them. The problem with trying to use particles in the UI is that particles render
    behind UI on Canvases that have their **Render Mode** set to **Screen Space -**
    **Overlay**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1: Particles rendering behind a Canvas](img/Figure_15.1_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1: Particles rendering behind a Canvas'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows two UI Canvases from our working examples and
    a particle system (the white dots). The pink background is on the `Background
    Canvas`, which renders with `HUD Canvas`, which renders with `HUD Canvas`. However,
    I want the particles to be displayed also in front of the `HUD Canvas`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few solutions to this problem. My two preferred solutions are either
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the `HUD Canvas` to **Screen Space - Camera** and adjust the sorting
    order of it and the particles to make the particles appear in front
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a second Camera and a Render Texture to display the particles on a Raw Image
    in the Canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are benefits and downfalls to both methods. The first method is by far
    the easiest. It allows you to view particles in front of your UI with only one
    or two modifications to your scene. However, using **Screen Space - Camera** for
    your UI’s **Render Mode** may not be practical for your project. If you edit the
    properties of the Camera in your game, the properties of the UI will be changed.
    Additionally, changing the **Render Mode** of your Canvas after you have already
    set everything up can cause your UI to stop displaying the way you initially intended.
  prefs: []
  type: TYPE_NORMAL
- en: The second method isn’t terribly complicated to implement but does require more
    work than the first. Its main benefit is that you can render particles in front
    of UI on Canvases that render with **Screen Space - Overlay**. Its main downfall,
    other than needing more work to set up, is that you may have to make some complicated
    decisions about what your two cameras are going to render, and may slightly affect
    performance. An example covering this method is discussed in the *Examples* section
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There are other solutions to this problem, each more complicated (or costly)
    than the next, and what you choose to do depends on your project. Some projects
    forego particles entirely and pre-render their particles as sprite sheets using
    software, such as After Effects. Some projects use assets available in the Asset
    Store, and others handle everything entirely with scripts and shaders. Although
    I can’t foresee any reason why the second solution I proposed will not work for
    your project, it’s certainly possible that your project has a fringe case I am
    not considering. Hopefully, if that is the case, you will be able to modify my
    solution with minimal effort to work on your project.
  prefs: []
  type: TYPE_NORMAL
- en: My best advice to you would be to decide early whether you will use particles
    in your UI. If you know you are going to use them, plan ahead with your UI layouts
    and camera setups. Also, if you want to use the first method, do it.
  prefs: []
  type: TYPE_NORMAL
- en: It’s really too bad that there is no standard method for this implemented by
    Unity. I assume that one day there will be a pre-built UI Particle object that
    will make the process both simple and performant.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the examples in this chapter, we will add to the animations created in [*Chapter
    14*](B18327_14.xhtml#_idTextAnchor409) to add a particle effect that occurs when
    the loot box opens.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Particle System that displays in the UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s create a particle system that will pop when the chest opens up. As stated
    earlier in this chapter, my two preferred ways of displaying particles in front
    of UI are to either use **Screen Space - Camera** as the Canvas **Render Mode**
    or to use a Render Texture. Since the second option is more complicated, it merits
    an example. You’ll notice that our Canvases all have their **Render Modes** set
    to **Screen Space - Overlay,** so using a **Render Texture** is the best method
    for the way the project is currently set up.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a particle system that is rendered to a texture via a second
    camera and then have that texture displayed on a **Raw Image** within the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a particle system, complete the following steps. We will work on
    displaying it in the UI in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will need to do is create a material that will be used for
    the particle. Create a new folder in the `Assets` folder named `Textures` `and
    Materials`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click within the new folder and select `StarsMaterial`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `StarsMaterial` **Shader** to **Unlit/Transparent**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `starIcon` sprite into its texture slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To display the particles in front of the UI objects, we will need a second Camera.
    Duplicate the `Main Camera` using *Ctrl* + *D* and rename the duplicate `UI` `Particles
    Camera`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can only have one Audio Listener in the scene, so delete the **Audio Listener**
    component on the new camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the **Animator** and **Chest Anim** **Controls** components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You also won’t want any code later to think this might possibly be the `Main
    Camera`, so change the tag from `MainCamera` to `Untagged`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This camera will be used only to display the particle pop we’re going to make,
    so we might as well make the particle system a child of this camera by right-clicking
    on the `UI Particles Camera` and selecting **Effects** | **Particle System**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.2: Creating a Particle System as a child of UI Particles Camera](img/Figure_15.2_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.2: Creating a Particle System as a child of UI Particles Camera'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Since this book isn’t about Particle Systems but about UI, we will not spend
    time going over every property of Particle Systems. Luckily, most are somewhat
    self-explanatory, and fiddling with the various properties lets you see what they
    can do. Therefore, rather than going through each property of the Particle System,
    I will simply provide screenshots of the necessary properties.
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down to the bottom of the **Particle System** component and expand the
    **Renderer** property by clicking on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the `StarsMaterial` material to the **Material** property. This will
    now make stars appear in your particle effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.3: Adding StarsMaterial material to the Renderer Material property](img/Figure_15.3_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.3: Adding StarsMaterial material to the Renderer Material property'
  prefs: []
  type: TYPE_NORMAL
- en: Change the Transform `-90`. The particles should now shoot upward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.4: Changing the Transform Rotation](img/Figure_15.4_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.4: Changing the Transform Rotation'
  prefs: []
  type: TYPE_NORMAL
- en: Change the `10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Duration**, **Start Lifetime**, and **Start Speed** properties
    of the Particle System as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.5: Updating some of the Particle System settings](img/Figure_15.5_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.5: Updating some of the Particle System settings'
  prefs: []
  type: TYPE_NORMAL
- en: Select the dropdown on `0` and `0.5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the dropdown on `-45` and `45`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.6: Updating Start Size and Start Rotation](img/Figure_15.6_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.6: Updating Start Size and Start Rotation'
  prefs: []
  type: TYPE_NORMAL
- en: Change `1` and `0.5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.7: Updating the settings of the particle system](img/Figure_15.7_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.7: Updating the settings of the particle system'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the **Emission** property and add a **Burst** with the plus sign.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.8: Adding a burst](img/Figure_15.8_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.8: Adding a burst'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the **Shape** property and select the **Hemisphere** from the **Shape**
    dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.9: Changing the shape](img/Figure_15.9_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.9: Changing the shape'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Size over** **Lifetime** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.10: The Size over Lifetime property](img/Figure_15.10_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.10: The Size over Lifetime property'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Rotation by** **Speed** property.![Figure 15.11: The Rotation
    by Speed property](img/Figure_15.11_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.11: The Rotation by Speed property'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And now, we’re done with the properties of the Particle System. Eventually,
    we will select **Looping** and **Play on Awake**, but for now, we will leave them
    deselected so that we can see the particle system constantly playing when the
    game is playing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We want to make sure that `UI Particles Camera` displays only `Particle System`
    and `Main Camera` displays everything but `Particle System`. We will accomplish
    this with **Layers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Layers** dropdown menu and select **Add Layer…**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a new `UI Particles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign `UI Particles` to the `Particle System`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to specify to each of the cameras what they will be displaying
    using their `UI Particles Camera` to only display `Main Camera` to exclude **UI
    Particles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s have `UI Particles Camera` render to a texture. Within the `Textures
    and Materials` folder, right-click and select `StarPopRenderTexture`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its `512` `x 512`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the `StarPopRenderTexture` texture to the `UI Particles Camera`’s **Camera**
    component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.12: Assigning the Target Texture](img/Figure_15.12_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.12: Assigning the Target Texture'
  prefs: []
  type: TYPE_NORMAL
- en: The only thing left to do is have the render texture display in the UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new UI Canvas with `Particle Canvas`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With `Particle Canvas` selected, select `Particle Renderer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `Particle Renderer` to `512` and `512`, respectively, to match the
    properties of `StarPopRenderTexture`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign `StarPopRenderTexture` to the `Particle Renderer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.13: The Render Texture assigned to the Texture property](img/Figure_15.13_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.13: The Render Texture assigned to the Texture property'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t want this image to block our mouse clicks, so deselect **Raycast Target**
    from the **Raw** **Image** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we just need to make sure that `Particle Canvas` displays in front of the
    other two Canvases. Set the `2` on `Particle Canvas`’s **Canvas** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the game now, and you should now see the particles displaying the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set the Particle System to be constantly playing, so deselect **Looping**
    and **Play on Awake** to reset the values to what they should be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it for setting up a particle system that displays in a UI.
  prefs: []
  type: TYPE_NORMAL
- en: Timing the Particle System to play in our loot box animation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the particle system is set to display in front of the UI, we can set
    up the logic to have the animation trigger in the correct order. To do that, go
    through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We want the particle system to play when the chest opens, so we have to write
    some code to control its behavior. Create a new script called `PlayParticles`
    in the `Assets/Scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `PlayParticles` class to have the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All this code does is check whether the particle system is currently playing
    with the `PlayTheParticles()` function. If it is not playing, it plays when the
    function runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll have this function triggered via an Animation Event on the `Chest`. So,
    add the script to the `Chest` as a component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign `Particle System` from the **Hierarchy** to the **Stars** slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `PlayTheParticles` function as an Animation Event on the very first
    frame of the `ChestOpening` animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.14: The particle Animation Event](img/Figure_15.14_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.14: The particle Animation Event'
  prefs: []
  type: TYPE_NORMAL
- en: Playing the game now should result in all animations playing at the appropriate
    times and the particle system displaying when the chest opens. And that concludes
    the loot box animation tutorial!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first glance, it would appear that you cannot use Unity particles within
    Unity UI that is set to Screen Space - Overlay. However, there are a few simple
    tricks that let you implement particle effects in the UI and have the particles
    render in front of them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how to use the World Space Canvas Render
    Mode to have UI elements appear directly in your Unity scene rather than on the
    screen.
  prefs: []
  type: TYPE_NORMAL
