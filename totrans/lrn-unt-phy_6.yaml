- en: Chapter 6. Animation and Unity3D Physics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。动画和Unity3D物理
- en: In this chapter, you will learn to use Physics in animation creation. We will
    see that there are several animations that can be easily handled by Unity3D's
    Physics. During development, you will come to know that working with animations
    and Physics is easy in Unity3D. You will find the combination of Physics and animation
    very interesting.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何在动画制作中使用物理。我们将看到有几个动画可以很容易地由Unity3D的物理系统处理。在开发过程中，你会了解到在Unity3D中处理动画和物理是很容易的。你会发现物理和动画的结合非常有趣。
- en: 'We are going to cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要涵盖以下主题：
- en: Interpolate and Extrapolate
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值和外推
- en: The Cloth component and its uses in animation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布料组件及其在动画中的应用
- en: ConstantForce
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ConstantForce
- en: AddForce
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AddForce
- en: AddTorque
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AddTorque
- en: An example of creating a rope animation using different joints
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同关节创建绳索动画的示例
- en: Developing simple and complex animations
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发简单和复杂的动画
- en: As mentioned earlier, you will learn how to handle and create simple and complex
    animations using Physics, for example, creating a rope animation and hanging ball.
    Let's start with the Physics properties of a Rigidbody component, which help in
    syncing animation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你将学习如何使用物理处理和创建简单和复杂的动画，例如创建绳索动画和悬挂球。让我们从刚体组件的物理属性开始，这些属性有助于同步动画。
- en: Interpolate and Extrapolate
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值和外推
- en: Unity3D offers a way that its Rigidbody component can help in the syncing of
    animation. Using the interpolation and extrapolation properties, we sync animations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Unity3D提供了一种方法，使其刚体组件可以帮助同步动画。使用插值和外推属性，我们同步动画。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Interpolation is not only for animation, it also works with Rigidbody.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 插值不仅用于动画，它还与刚体一起工作。
- en: 'Let''s see in detail how interpolation and extrapolation work:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看插值和外推是如何工作的：
- en: Create a new scene and save it.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并保存。
- en: Create a **Cube** game object and apply **Rigidbody** on it.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**立方体**游戏对象，并对其应用**刚体**。
- en: Look at the **Inspector** panel shown in the following screenshot. On clicking
    **Interpolate**, a drop-down list that contains three options will appear, which
    are **None**, **Interpolate**, and **Extrapolate**. For details, refer to the
    previous chapter. By selecting any one of them, we can apply the feature.![Interpolate
    and Extrapolate](img/00080.jpeg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下截图所示的**检查器**面板。点击**插值**，会出现一个包含三个选项的下拉列表，分别是**无**、**插值**和**外推**。详情请参考上一章。通过选择其中之一，我们可以应用该功能。![插值和外推](img/00080.jpeg)
- en: In interpolation, the position of an object is calculated by the current update
    time, moving it backwards one Physics update delta time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在插值中，通过当前更新时间计算物体的位置，将其向后移动一个物理更新delta time。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Delta time** or **delta timing** is a concept used among programmers in relation
    to frame rate and time. For more details, check out [http://docs.unity3d.com/ScriptReference/Time-deltaTime.html](http://docs.unity3d.com/ScriptReference/Time-deltaTime.html).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Delta time** 或 **delta timing** 是程序员在涉及帧率和时间时使用的一个概念。更多详情，请查看[http://docs.unity3d.com/ScriptReference/Time-deltaTime.html](http://docs.unity3d.com/ScriptReference/Time-deltaTime.html)。'
- en: 'If you look closely, you will observe that there are at least two Physics updates,
    which are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察，你会注意到至少有两个物理更新，如下所示：
- en: Ahead of the chosen time
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在选择的时间之前
- en: Behind the chosen time
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在选择的时间之后
- en: Unity interpolates between these two updates to get a position for the update
    position. So, we can say that the interpolation is actually lagging behind one
    Physics update.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在这两个更新之间进行插值，以获得更新位置的位置。因此，我们可以这样说，插值实际上落后于一个物理更新。
- en: The second option is **Extrapolate**, which is to use for extrapolation. In
    this case, Unity predicts the future position for the object. Although this does
    not show any lag, incorrect prediction sometime causes a visual jitter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项是**外推**，用于外推。在这种情况下，Unity预测物体的未来位置。尽管这不会显示任何延迟，但有时错误的预测会导致视觉上的抖动。
- en: One more important component that is widely used to animate cloth is the **Cloth
    component**. Here, you will learn about its properties and how to use it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个广泛用于动画布料的非常重要的组件是**布料组件**。在这里，你将了解其属性以及如何使用它。
- en: The Cloth component
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布料组件
- en: 'To make animation easy, Unity provides an interactive component called **Cloth**.
    In the **GameObject** menu, you can directly create the **Cloth** game object.
    Have a look at the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使动画更容易，Unity提供了一个名为**Cloth**的交互式组件。在**GameObject**菜单中，您可以直接创建**Cloth**游戏对象。请看以下屏幕截图：
- en: '![The Cloth component](img/00081.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![布料组件](img/00081.jpeg)'
- en: 'Unity also provides Cloth components in its Physics sections. To apply this,
    let''s look at an example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在其物理部分也提供了布料组件。为了应用它，让我们看看一个例子：
- en: Create a new scene and save it.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并保存它。
- en: Create a **Plane** game object. (We can also create a **Cloth** game object.)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**平面**游戏对象。（我们也可以创建一个**布料**游戏对象。）
- en: Navigate to **Component** | **Physics** and choose **InteractiveCloth**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**组件** | **物理**并选择**InteractiveCloth**。
- en: 'As shown in the following screenshot, you will see the following properties
    in the **Inspector** panel:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如以下屏幕截图所示，您将在**Inspector**面板中看到以下属性：
- en: '![The Cloth component](img/00082.jpeg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![布料组件](img/00082.jpeg)'
- en: Let's have a look at the properties one by one. **Blending Stiffness** and **Stretching
    Stiffness** define the blending and stretching stiffness of the Cloth while **Damping**
    defines the damp motion of the Cloth. Using the **Thickness** property, we decide
    the thickness of the Cloth, which ranges from 0.001 to 10,000\. If we enable the
    **Use Gravity** property, it will affect the Cloth simulation. Similarly, if we
    enable **Self Collision**, it allows the Cloth to collide with itself. For a constant
    or random acceleration, we apply the **External Acceleration** and **Random Acceleration**
    properties, respectively.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看属性。**混合刚度**和**拉伸刚度**定义了布料的混合和拉伸刚度，而**阻尼**定义了布料的阻尼运动。使用**厚度**属性，我们决定布料的厚度，其范围从0.001到10,000。如果我们启用**使用重力**属性，它将影响布料模拟。同样，如果我们启用**自碰撞**，它允许布料与自身碰撞。对于恒定或随机加速度，我们分别应用**外部加速度**和**随机加速度**属性。
- en: '**World Velocity Scale** decides the movement of the character in the world,
    which will affect the Cloth vertices. The higher the value, the more movement
    of the character will affect. **World Acceleration** works similarly. The **Interactive
    Cloth** component depends on the **Cloth Renderer** components. Lots of Cloth
    components in a game reduces the performance of game. To simulate clothing in
    characters, we use the **Skinned Cloth** component.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**世界速度缩放**决定角色在世界中的运动，这将影响布料顶点。值越高，角色的运动影响就越大。**世界加速度**的作用类似。**Interactive
    Cloth**组件依赖于**Cloth Renderer**组件。游戏中布料组件过多会降低游戏性能。为了在角色中模拟服装，我们使用**Skinned Cloth**组件。'
- en: Important points while using the Cloth component
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用布料组件时的要点
- en: 'The following are the important points to remember while using the Cloth component:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用布料组件时，以下是一些重要要点：
- en: Cloth simulation will not generate tangents. So, if you are using a tangent
    dependent shader, the lighting will look wrong for a Cloth component that has
    been moved from its initial position.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布料模拟不会生成切线。因此，如果您正在使用依赖于切线的着色器，那么从其初始位置移动的布料组件的照明看起来会不正确。
- en: We cannot directly change the transform of moving the Cloth game object. This
    is not supported.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能直接改变移动布料游戏对象的变换。这是不支持的。
- en: Disabling the Cloth before changing the transform is supported.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更改变换之前禁用布料是支持的。
- en: The **SkinnedCloth** component works together with **SkinnedMeshRenderer** to
    simulate clothing on a character. As shown in the following screenshot, we can
    apply **Skinned Cloth**:![Important points while using the Cloth component](img/00083.jpeg)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SkinnedCloth**组件与**SkinnedMeshRenderer**一起工作，以模拟角色上的服装。如图所示，我们可以应用**Skinned
    Cloth**：![使用布料组件时的要点](img/00083.jpeg)'
- en: 'As you can see in the following screenshot, there are different properties
    that we can use to get the desired effect:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下屏幕截图中所见，我们有不同的属性可以用来获得期望的效果：
- en: '![Important points while using the Cloth component](img/00084.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![使用布料组件时的要点](img/00084.jpeg)'
- en: We can disable or enable the **Skinned Cloth** component at any time to turn
    it on or off.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在任何时候禁用或启用**Skinned Cloth**组件来打开或关闭它。
- en: ConstantForce
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ConstantForce
- en: When a force is applied constantly on a game object, it is known as constant
    force. We use the `ConstantForce` Physics utility class to apply constant force
    on a game object. `AddForce` applies a force to the Rigidbody only for one frame
    whereas `ConstantForce` applies a force in every frame until we change the force
    or torque to a new value.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个力持续作用于游戏对象时，我们称之为恒力。我们使用`ConstantForce`物理实用类来对游戏对象施加恒力。`AddForce`只在单帧对刚体施加力，而`ConstantForce`则在每个帧施加力，直到我们改变力或扭矩到一个新值。
- en: We use this for one-shot objects such as rockets.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个来处理一次性对象，如火箭。
- en: An example of animation using ConstantForce
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ConstantForce的动画示例
- en: 'We will look at the example of animation using ConstantForce with the help
    of the following steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤查看使用ConstantForce的动画示例：
- en: Create a new scene and save it as `Constant Force Example`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为`Constant Force Example`。
- en: Create a **Cube** game object.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**立方体**游戏对象。
- en: As shown in the following screenshot, apply **Constant Force** on it:![An example
    of animation using ConstantForce](img/00085.jpeg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，对其应用**恒力**：![使用ConstantForce的动画示例](img/00085.jpeg)
- en: To make a cube that accelerates forward, we set **Relative Force** to be along
    the positive *z* axis.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使立方体向前加速，我们将**相对力**设置为沿正*z*轴。
- en: Then, use the Rigidbody's **Drag** property to set the maximum velocity and
    turn off gravity so that the game object will always stay on its path.![An example
    of animation using ConstantForce](img/00086.jpeg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用刚体的**Drag**属性设置最大速度并关闭重力，这样游戏对象将始终保持在它的路径上。![使用ConstantForce的动画示例](img/00086.jpeg)
- en: Run the scene and you will see that the cube game object moves constantly.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行场景，你会看到立方体游戏对象持续移动。
- en: Till now, you have learned different Physics components. Now, you'll learn how
    we can use Physics in scripting. In this chapter, we will learn `AddForce` and
    `AddTorque`. By applying `AddForce` on a Rigidbody, we make it move while `AddTorque`
    adds a torque to the Rigidbody to make it spin around the torque axis.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学习了不同的物理组件。现在，你将学习如何在脚本中使用物理。在本章中，我们将学习`AddForce`和`AddTorque`。通过在刚体上应用`AddForce`，我们可以使其移动，而`AddTorque`则向刚体添加扭矩，使其绕扭矩轴旋转。
- en: An example of animation using AddForce
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AddForce的动画示例
- en: '`AddForce` adds force to the Rigidbody.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddForce`向刚体添加力。'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Physics, a **force** is any interaction that tends to change the motion of
    an object. In other words, a force can cause an object with mass to change its
    velocity (which includes beginning moving from a state of rest), that is, to accelerate.
    Force can also be described by intuitive concepts such as a push or a pull.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理中，**力**是任何倾向于改变物体运动的相互作用。换句话说，力可以使具有质量的物体改变其速度（包括从静止状态开始移动），即加速。力也可以用直观的概念来描述，如推或拉。
- en: 'In this example, we will create a projectile using `AddForce` Physics:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`AddForce`物理创建抛射：
- en: Create a new scene and save it as `addForce example`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为`addForce example`。
- en: Use a **Plane** game object to create ground.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**平面**游戏对象创建地面。
- en: Apply a green material on it.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在它上面应用绿色材质。
- en: Create a **Capsule** object and apply **Rigidbody** on it as shown in the following
    screenshot. Now, name it `bullet`.![An example of animation using AddForce](img/00087.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**胶囊**对象，并如图所示将其**刚体**应用于它。现在，将其命名为`bullet`。![使用AddForce的动画示例](img/00087.jpeg)
- en: 'Create a new JavaScript or UnityScript and name it `projectile`. Write the
    following code inside it:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的JavaScript或UnityScript，并将其命名为`projectile`。在其内部编写以下代码：
- en: '[PRE0]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As shown in the following screenshot, you will need to specify **Bullet Object**:![An
    example of animation using AddForce](img/00088.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，你需要指定**子弹对象**：![使用AddForce的动画示例](img/00088.jpeg)
- en: Drag the **bullet** game object and put it on the **Bullet Object** section
    as shown in the following screenshot:![An example of animation using AddForce](img/00089.jpeg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**子弹**游戏对象拖动并放入如图所示的**子弹对象**部分：![使用AddForce的动画示例](img/00089.jpeg)
- en: Now, test the scene and you will see that on a click, the bullet is fired and
    it is moved in a projectile.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，测试场景，你会看到点击时子弹被发射，并以抛射的方式移动。
- en: In this example, we saw how to use `AddForce` to create a projectile animation.
    Similarly, in the next example, we will see how to use `AddTorque` to create an
    animation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们看到了如何使用`AddForce`创建抛射动画。同样，在下一个示例中，我们将看到如何使用`AddTorque`创建动画。
- en: An example of animation using AddTorque
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AddTorque的动画示例
- en: '`AddTorque` adds torque to the Rigidbody.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddTorque`向Rigidbody添加扭矩。'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Torque is a measure of the turning force on an object such as a bolt or a flywheel.
    For example, pushing or pulling the handle of a wrench connected to a nut or bolt
    produces a torque (turning force) that loosens or tightens the nut or bolt.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 扭矩是衡量螺栓或飞轮等物体上旋转力的度量。例如，推动或拉动与螺母或螺栓连接的扳手的把手会产生扭矩（旋转力），从而松开或拧紧螺母或螺栓。
- en: 'In this example, we will use `AddTorque` to create an animation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`AddTorque`来创建动画：
- en: Create a new scene and save it as `AddTorque example`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为`AddTorque example`。
- en: Create a **Cube** game object and name it `box`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**Cube**游戏对象并将其命名为`box`。
- en: Add **Rigidbody** on a **Box** game object.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Box**游戏对象上添加**Rigidbody**。
- en: 'Create a new JavaScript and use the following code:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的JavaScript并使用以下代码：
- en: '[PRE1]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Add the script file to **Main Camera** and drag the game object box to the box
    variable.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本文件添加到**Main Camera**并将游戏对象box拖到box变量中。
- en: Run the scene and you will see the spin movement of the box.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行场景，你会看到盒子的旋转运动。
- en: In another example, we will create an animation using different joints. In the
    previous chapter, you learned different joints, including the character joint,
    which is used for a Ragdoll effect. Now, we will create a rope animation using
    **Fixed Joint** and **Hinge Joint**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个示例中，我们将创建一个使用不同关节的动画。在上一章中，你学习了不同的关节，包括用于Ragdoll效果的字符关节。现在，我们将使用**Fixed
    Joint**和**Hinge Joint**创建一个绳索动画。
- en: An example of rope animation using different joints
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用不同关节的绳索动画示例
- en: In the following example, we will create a rope using different joints. Joints
    help to create flexible animation, and this is why we are going to use joints
    for the rope animation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将使用不同关节创建一个绳索。关节有助于创建灵活的动画，这就是我们为什么要为绳索动画使用关节。
- en: Create a new scene and save it as `Rope Animation example`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为`Rope Animation example`。
- en: Create a **Sphere** game object and apply a material to make it colorful.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**Sphere**游戏对象并应用一个材质使其变得多彩。
- en: Now, apply **Rigidbody** and **Fixed Joint** on it as shown in the following
    screenshot:![An example of rope animation using different joints](img/00090.jpeg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下截图所示，将其应用**Rigidbody**和**Fixed Joint**：![使用不同关节的绳索动画示例](img/00090.jpeg)
- en: Create a **Cylinder** game object and name it `Chain 1`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**Cylinder**游戏对象并将其命名为`Chain 1`。
- en: Now, apply **Rigidbody** and **Hinge Joint** on it. As shown in the following
    screenshot, you will see the **Connected Body** property:![An example of rope
    animation using different joints](img/00091.jpeg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将其应用**Rigidbody**和**Hinge Joint**。如图所示，你会看到**Connected Body**属性：![使用不同关节的绳索动画示例](img/00091.jpeg)
- en: In the **Connected Body** property of the **Sphere** game object, drag the **Chain
    1** game object.![An example of rope animation using different joints](img/00092.jpeg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Sphere**游戏对象的**Connected Body**属性中，将**Chain 1**游戏对象拖动。![使用不同关节的绳索动画示例](img/00092.jpeg)
- en: Now, run the scene; you will see that the sphere falls along with the **Cylinder**
    game object as shown in the following screenshot:![An example of rope animation
    using different joints](img/00093.jpeg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行场景；你会看到球体随着**Cylinder**游戏对象一起下落，如下面的截图所示：![使用不同关节的绳索动画示例](img/00093.jpeg)
- en: As shown in the following screenshot, now create the `Chain 2` game object and
    apply **Rigidbody** and **Hinge Joint**. Specify its position above the **Chain
    1** and drag **Chain 2** as connected body for **Chain 1**.![An example of rope
    animation using different joints](img/00094.jpeg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，现在创建`Chain 2`游戏对象并应用**Rigidbody**和**Hinge Joint**。指定其位置在**Chain 1**上方，并将**Chain
    2**作为**Chain 1**的连接体拖动。![使用不同关节的绳索动画示例](img/00094.jpeg)
- en: Similarly, create **Chain 3** and **Chain 4**. Now, rotate all the game objects
    as shown in the following screenshot:![An example of rope animation using different
    joints](img/00095.jpeg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，创建**Chain 3**和**Chain 4**。现在，将所有游戏对象旋转，如下面的截图所示：![使用不同关节的绳索动画示例](img/00095.jpeg)
- en: Test this application; you will see a sphere hanging from a rope:![An example
    of rope animation using different joints](img/00096.jpeg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试这个应用程序；你会看到一个球体悬挂在绳索上：![使用不同关节的绳索动画示例](img/00096.jpeg)
- en: In the preceding steps, you learned how to create an animation using different
    joints.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，你学习了如何使用不同的关节创建动画。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the different Physics components of Unity,
    using which we can create different types of animation. You learned how to use
    the Cloth component and `AddForce` to create the projectile animation of a bullet.
    You learned how to create the wrecking animation of ball using different joints.
    In the next chapter, you will learn how to create a smooth game play using different
    Physics components and how we can handle the game play performance.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Unity中不同的物理组件，通过这些组件我们可以创建不同类型的动画。你学习了如何使用布料组件和`AddForce`来创建子弹的抛射动画。你还学习了如何使用不同的关节来创建球的破坏动画。在下一章中，你将学习如何使用不同的物理组件来创建平滑的游戏玩法，以及我们如何处理游戏性能。
