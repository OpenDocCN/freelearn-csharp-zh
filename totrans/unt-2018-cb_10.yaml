- en: 3D Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a character's Avatar and idle animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving your character with root motion and Blend Trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing animations with Layers and Masks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing States into Sub-State Machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming the Character Controller via script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding rigid props to animated characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Animation Events to throw an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying Ragdoll physics to a character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating the character's torso to aim a weapon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating geometry with Probuilder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a game with the 3D Gamekit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing third-party 3D models and animations from Mixamo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Mecanim** animation system has revolutionized how characters are animated
    and controlled within Unity. In this chapter, we will learn how to take advantage
    of its flexibility, power, and friendly and highly visual interface.
  prefs: []
  type: TYPE_NORMAL
- en: The big picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Controlling a playable character with the **Mecanim** system might look like
    a complex task, but it is actually very straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34f06f4e-109a-415a-8a94-972a3bbab6ea.png)'
  prefs: []
  type: TYPE_IMG
- en: By the end of the chapter, you will have gained a basic understanding of the
    Mecanim system. For a more complete overview of the subject, consider taking a
    look at Jamie Dean's *Unity Character Animation with Mecanim*, also published
    by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the recipes will make use of Mixamo motion packs. Mixamo is a complete
    solution for character production, rigging, and animation. In fact, the character
    used was designed with Mixamo''s character creation software called Fuse and rigged
    with the Mixamo Auto-Rigger. You can find out more about Mixamo and their products
    at Unity''s Asset Store or the Mixamo website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://assetstore.unity.com/packages/3d/animations/melee-axe-pack-35320](https://assetstore.unity.com/packages/3d/animations/melee-axe-pack-35320)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.mixamo.com/](https://www.mixamo.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that although Mixamo offers **Mecanim**-ready characters and animation
    clips, for the recipes in this chapter, we will use unprepared animation clips.
    The reason for this is to make you more confident when dealing with assets obtained
    by other methods and sources.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a character's Avatar and idle animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One feature that makes **Mecanim** so flexible and powerful is the ability to
    quickly reassign Animation Clips from one character to another. This is made possible
    through the use of **Avatars**, which are basically a layer between your character's
    original rig and Unity's **Animator** system.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to configure an **Avatar** skeleton on a rigged
    character.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will need the MsLaser@T-Pose.fbx and Swat@rifle_aiming_idle.fbx
    files, which are provided in the `09_03` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To configure an Avatar skeleton, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the MsLaser@T-Pose.fbx and Swat@rifle_aiming_idle.fbx files into your
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the MsLaser@T-Pose model from the Project panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector, under MsLaser@T-Pose Import Settings, activate the Rig section.
    Change Animation Type to Humanoid. Then, leave Avatar Definition as Create From
    this Model. Now, click Apply to apply these settings. Finally, click on the Configure...
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/87582a63-d224-4996-92ad-46f949695cdb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Inspector will show the newly created **Avatar**. Observe how Unity correctly
    mapped the bones of our character to its structure, assigning, for instance, the
    mixamoRig:LeftForeArm bone as the Avatar''s Lower Arm. We could, of course, reassign
    bones if needed. For now, just click on the Done button to close the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd882499-ea2a-46e9-95a9-8669556fc202.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our **Avatar** ready, let's configure our animation for the
    Idle state. From the Project panel, select the Swat@rifle_aiming_idle file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Rig section, change Animation Type to Humanoid, and leave Avatar
    Definition as Create From this Model. Confirm by clicking on Apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Animations section (to the right of the Rig). The rifle_aiming_idle
    clip should be selected. Drag MsLaser@T-Pose to the Preview area at the bottom
    of the **Inspector**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a193af9-5bb5-4d3b-a0db-f27766a6f40a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With rifle_aiming_idle selected from the Clips list, check the Loop Time and
    Loop Pose options. Also, click on the Clamp Range button to adjust the timeline
    to the actual time of the **Animation Clip**. Then, under Root Transform Rotation,
    check Bake Into Pose and select Based Upon | Original. Under Root Transform Position
    (Y), check Bake Into Pose and select Based upon Original. Under Root Transform
    Position (XZ), leave Bake Into Pose unchecked and select Based Upon (at Start)
    | Center of Mass. Finally, click on Apply to confirm the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bcae7636-51cf-4628-a618-905a08048cff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to access **Animation Clips** and play them, we need to create a Controller.
    Do this by choosing Project panel menu: Create | Animator Controller. Name it
    MainCharacter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the Animator Controller to open the **Animator** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Animator** panel, right-click on the grid to open a context menu.
    Then, select the Create State | Empty option. A new box named New State will appear.
    It will be in orange, indicating that it is the default state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b5d8d019-5a2f-466b-ba7e-d62e86df030f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select New State and, in the Inspector, change its name to Idle. Also, in the
    Motion field, choose rifle_aiming_idle by either selecting it from the list or
    dragging it from the Project panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed89f835-c4a4-4670-b3f3-881e6eee7baf.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag the MsLaser@T-Pose model from the Project panel into the Hierarchy and
    place it in the Scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select MsLaser@T-Pose from the Hierarchy and observe its **Animator** component
    in the Inspector. Then, assign the newly created MainCharacter controller to its
    Controller field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e06a3e2-4293-4a2f-b575-47216ae51927.png)'
  prefs: []
  type: TYPE_IMG
- en: Play your **Scene** to see the character correctly animated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preparing our character for animation took many steps. First, we created its
    Avatar, based on the character model's original bone structure. Then, we set up
    the **Animation Clip** (which, as the character mesh, is stored in an .fbx file),
    using its own Avatar.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we adjusted the Animation Clip, clamping its size and making it
    a loop. We also baked its Root Transform Rotation to follow the original file's
    orientation. Finally, an Animator Controller was created, and the edited **Animation
    Clip** was made into its default Animation State.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of the Avatar is what makes Mecanim so flexible. Once you have an
    **Animator Controller**, you can apply it to other humanoid characters, as long
    as they have an Avatar body mask.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Use Controller with another 3D character Avatar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s swap MsLaser for a Mascot 3D character. Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the provided model, mascot.fbx.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The apply steps 3 and 4 for this character to create its Avatar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an instance of the model into the **Scene**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector for its Animator Component, set the Controller to the MainCharacter
    Animator Controller you created in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the Scene; you should see the mascot playing the rifle_aiming_idle animation
    clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To read more information about the Animator Controller, check out Unity's documentation
    at [http://docs.unity3d.com/Manual/class-AnimatorController.html](http://docs.unity3d.com/Manual/class-AnimatorController.html).
  prefs: []
  type: TYPE_NORMAL
- en: Moving your character with root motion and Blend Trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mecanim animation system is capable of applying Root Motion to characters.
    In other words, it actually moves the character according to the animation clip,
    as opposed to arbitrarily translating the character model while playing an in-place
    animation cycle. This makes most of the Mixamo animation clips perfect for use
    with Mecanim.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of the animation system is Blend Trees, which can blend Animation
    Clips smoothly and easily. In this recipe, we will take advantage of these features
    to make our character walk/run forward and backward, and also strafe right and
    left at different speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity package named Character_02, containing
    a character and featuring a basic **Animator Controller**. The package can be
    found inside the `09_02` folder, along with the FBX files for the animation clips
    you need.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to import animations in Unity. One approach involves having
    each animation as a separate file, named in the form `modelName@animation`, such
    as `MsLazer@idle`, `MsLazer@jumping`, and so on. The other approach is when a
    model has several animations all in a single take, in which case you can break
    the take into separate named animation clips in the Unity editor, specifying the
    start and end frame for each clip. In this chapter, we'll use the first approach,
    since it's more straightforward. Learn more from the Unity documentation at [https://docs.unity3d.com/Manual/Splittinganimations.html](https://docs.unity3d.com/Manual/Splittinganimations.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To apply Root Motion to your character using Blend Trees, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import Character_02.unityPackage into a new project. Also, import the following
    FBX files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Swat@rifle_run
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Swat@run_backward
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Swat@strafe
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Swat@strafe_2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Swat@strafe_left
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Swat@strafe_right
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Swat@walking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Swat@walking_backward
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to configure our Animation Clips. From the Project panel, select Swat@rifle_run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Activate the Rig section. Change Animation Type to Humanoid and Avatar Definition
    to Create From this Model. Confirm by clicking on Apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/488103ca-0a42-4c68-bce1-3285395ed716.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, activate the Animations section (to the right of Rig). Clip rifle_run should
    be selected. The Preview area (at the bottom of the **Inspector**) will display
    the message No model is available for preview. Drag MsLaser@T-Pose onto the Preview
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With asset Swat@rifle_run still selected in the Project panel, in the **Inspector**
    check the Loop Time and Loop Pose options. Also, click on the Clamp Range button
    to adjust the timeline to the actual time of the animation clip. Click on Apply
    to confirm these changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c27e89d8-2cbf-401a-9dbf-4d61af337893.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, under Root Transform Rotation, check Bake Into Pose and select Based
    Upon | Original. Under Root Transform Position (Y), check Bake Into Pose and select
    Based Upon (at Start) | Original. Under Root Transform Position (XZ), leave Bake
    Into Pose unchecked and select Based Upon (at Start) | Center of Mass. Finally,
    click on Apply to confirm the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ace8f4c-4f86-46e2-9add-64cda34e9120.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat steps 3 to 6 for each one of the following animation clips: Swat@run_backward,
    Swat@strafe, Swat@strafe_2, Swat@strafe_left, Swat@strafe_right, Swat@walking,
    and Swat@walking_backward.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a 3D Plane to the **Scene**, choose menu: Create | 3D Object | Plane.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an instance of the MsLaser prefab into the **Scene** and position it on
    the 3D Plane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Hierarchy panel, select the MsLaser GameObject. In the **Inspector**,
    add a Character Controller component to it (click Add Component and choose Component
    | Physics | Character Controller). Then, set its Skin Width to 0.0001 and its
    Center as (0, 0.9, 0); also, change its Radius to 0.34 and its Height to 1.79:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1a6ab6f6-580e-4e68-8958-da19d36f1304.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Project panel, double-click the MainCharacter controller asset file;
    it should open in the **Animator** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-left corner of the **Animator** panel, select the Parameters section
    and use the + sign to create three new Parameters (Float) named xSpeed, zSpeed,
    and Speed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a925c86-f9db-4cf0-9aef-ee082e67a429.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We do have an Idle state for our character, but we need new ones. Right-click
    on the grid area and, from the context menu, navigate to Create State | From New
    Blend Tree. In the **Inspector**, change its name from the Default Blend Tree
    to Move:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd6c1355-cc9f-4db0-9de3-b7abe36e0b27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the Move state. You will see the empty blend tree that you
    have created. Select it and in the **Inspector**, rename it Move. Then, change
    its Blend Type to 2D Freeform Directional, also setting xSpeed and zSpeed in the
    Parameters tab. Finally, using the + sign from the bottom of the Motion list,
    add nine new Motion Fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbbc374c-8258-446b-9403-c95be58d4d9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, populate the Motion list with the following motion clips and respective
    Pos X and Pos Y values: Run_backwards, 0, -1; Walking_backwards, 0,-0.5; Rifle_aiming_idle,
    0, 0; Walking, 0, 0.5; Rifle_run, 0, 1; Strafe, -1, 0; Strafe_left, -0.5, 0; Strafe_right,
    0.5, 0; Strafe_2, 1, 0\. You can populate the Motion list by selecting it from
    the list or, if there is more than one clip with the same name, you can drag it
    from the Project panel onto the slot by expanding the appropriate model icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5dbc5888-9733-4f2a-9468-3fe3fb2b7a9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To return to the Base Layer, either double-click on the grid background of
    the **Animator** panel, or click the Base Layer button in the information bar
    along the top of the **Animator** panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/186b5ece-e528-41b5-a05b-fbd2765ee2ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we have the rifle_aiming_idle Motion clip in our Move blend tree, we can
    get rid of the original Idle state. Right-click on the Idle state box and, from
    the menu, select Delete. The Move blend state will become the new default state,
    turning orange.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we must create the script-class that will actually transform the player''s
    input into those variables that are created to control the animation. Create a
    new C# script-class named BasicController, and add an instance-object as a component
    of the MsLazer GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Play your **Scene** and test the game. You should be able to control your character
    with the arrow keys (or *WASD* keys). Keeping the *Shift* key pressed will slow
    it down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever the BasicController script detects any directional keys in use, it
    sets the Speed variable of the Animator state to a value higher than 0, changing
    the Animator state from Idle to Move. The Move state, in turn, blends the motion
    clips that it was populated with, according to the input values for xSpeed (obtained
    from Horizontal Axis input, typically the *A* and *D* keys) and zSpeed (obtained
    from Vertical Axis input, typically the *W* and *S* keys). Since **Mecanim** is
    capable of applying root motion to the characters, our character will actually
    move in the resulting direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if the *W* and *D* keys are pressed, the xSpeed and zSpeed values
    will rise to 1.0\. From the **Inspector**, it is possible to see that such a combination
    will result in a blend between the motion clips called rifle_run and strafe_2,
    making the character run diagonally (to the front and right):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed26ed0d-90e1-4ac6-8eeb-82a2367f27ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our BasicController includes three checkboxes for more options: Move Diagonally,
    which is set as true by default and allows for blends between forward/backward
    and left/right clips; Mouse Rotate, which is set as true by default and allows
    for rotating the character with the mouse, changing their direction while moving;
    and Keyboard Rotate, which is set as false by default and allows for rotating
    the character through simultaneous use of the left/right and forward/backward
    directional keys.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some sources of further information about these topics.
  prefs: []
  type: TYPE_NORMAL
- en: Our blend tree used the 2D Freeform Directional Blend Type. However, if we only had four
    Animation Clips (forward, backward, left, and right), 2D Simple Directional would
    have been a better option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about Blend Trees and 2D blending from Unity''s Documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.unity3d.com/Manual/BlendTree-2DBlending.html](http://docs.unity3d.com/Manual/BlendTree-2DBlending.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, if you want to learn more about the **Mecanim** Animation System, there
    are some links that you might want to check out, such as Unity''s documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.unity3d.com/Manual/AnimationOverview.html](http://docs.unity3d.com/Manual/AnimationOverview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mecanim** Example Scenes are available from the Unity **Asset Store**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.assetstore.unity3d.com/en/#!/content/5328](https://www.assetstore.unity3d.com/en/#!/content/5328)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mecanim** Video Tutorial are available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://unity3d.com/pt/learn/tutorials/topics/animation](http://unity3d.com/pt/learn/tutorials/topics/animation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing animations with Layers and Masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixing animations is a great way of adding complexity to your animated characters
    without requiring a vast number of animated clips. Using Layers and Masks, we
    can combine different animations by playing specific clips for specific body parts
    of the character.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will apply this technique to our animated character, triggering
    animation clips for firing a rifle and throwing a grenade with the character's
    upper body. We will do this while keeping the lower body moving or idle, according
    to the player's input.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named Mixing, containing a
    basic **Scene** that features an animated character. We have also provided the
    FBX animation clips Swat@firing_rifle.fbx and Swat@toss_grenade.fbx. These files
    can be found in the `09_03` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To mix animations using layers and masks, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project and import the Mixing Unity Package, as well as the
    FBX files Swat@firing_rifle.fbx and Swat@toss_grenade.fbx.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from the Project panel, open the mecanimPlayground level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to configure the **Animation Clips**. Select the Swat@firing_rifle asset in
    the Project panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Rig section. Change Animation Type to Humanoid, and Avatar Definition
    to Create From this Model. Confirm this by clicking on Apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52d3eac7-bc86-4f67-9bf6-76ab65010dcf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, activate the **Animations** section. The `firing_rifle` clip should be
    selected; click on the **Clamp Range** button to adjust the timeline and check
    the **Loop Time** and **Loop Pose** options. Under **Root Transform Rotation**,
    check Bake Into Pose and select Based **Upon** | **Original**. Under **Root Transform
    Position** (**Y**), check **Bake Into Pose** and select **Based Upon** (at Start)
    | Original. Under **Root Transform Position** (**XZ**), leave **Bake** Into Pose
    unchecked. Click on **Apply** to confirm the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cce6703a-9c38-4747-98c5-dd67a9a68993.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the `Swat@toss_grenade` animation clip. Select the Rig section. Then,
    change **Animation Type** to Humanoid and Avatar Definition to **Create From**
    this Model. Confirm it by clicking on Apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, activate the **Animations** section. The `toss_grenade` animation clip
    should be selected. Click the Clamp Range button to adjust the timeline, and leave
    the **Loop Time** and **Loop Pose** options unchecked. Under Root **Transform
    Rotation****,** check **Bake** Into **Pose** and select **Based Upon** | **Original****.**
    Under **Root Transform Position** (**Y**), check **Bake** Into **Pose** and select
    Based Upon (at Start) | Original. Under Root Transform Position (XZ), leave Bake
    Into Pose unchecked. Click on Apply to confirm the changes.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create a Mask. From the Project panel, click on the Create button and
    add an Avatar Mask to the project. Name it BodyMask.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **BodyMask** tab and, in the **Inspector,** expand the Humanoid
    section. Green body sections and IK spots are selected (all are by default), and
    red are unselected. Deselect the character''s two legs, the circle base the feet
    are standing on, and the two feet IK spots (they should turn red):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30adaa9d-857e-4ea0-9d68-23a2da9ad5d8.png)'
  prefs: []
  type: TYPE_IMG
- en: In the **Project** panel, double-click the `MainCharacter` controller asset
    file; it should open up in the Animator panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Animator panel, create a new layer by clicking on the **+** sign in the
    top-left **Layers** tab, above the Base Layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the new `layerUpperBody` and click on the gear icon for the settings.
    Then, change its **Weight** to 1 and select the **BodyMask** in the Mask slot.
    Also, change Blending to Additive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ded015b1-998f-40a3-a9d6-857ff9a70480.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in the Animator panel, with the `UpperBody` layer selected, create three
    new empty states (by right-clicking on the grid area and navigating to Create
    State | Empty from the menu). Name the default (orange) state null, and the other
    twoFire and Grenade.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, access the **Parameters** tab and add two new parameters of type Bool, Fire
    and Grenade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f8a63d47-4f4b-4b17-81bd-bb78231970d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the Fire state and, in the **Inspector,** add the firing_rifle Animation
    Clip to the Motion field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22cb9520-f6ca-4ca4-9d3b-955f2a07f1e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select the **Grenade** state and, in the **Inspector,** add the `toss_grenade`
    animation clip to the Motion field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the null state box and, from the menu, select **Make Transition**.
    Then, drag the white arrow onto the Fire box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the arrow (it will turn blue). From the **Inspector,** uncheck the Has
    **Exit Time** option. Then, access the Conditions list, click on the **+** sign
    to add a new condition, and set it as Fire and true:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a17149d4-7bab-45fe-8293-c5ac548a4ba4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, make a **Transition** from null to Grenade. Select the arrow (it will turn
    blue). From the **Inspector,** uncheck the Has **Exit Time** option. Then, access
    the Conditions list, click on the **+** sign to add a new condition, and set it
    as Grenade and true.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create transitions from Fire to null, and from **Grenade** to null. Then,
    select the arrow that goes from Fire to null and, in the Conditions box, select
    the Fire and false options. Leave the Has **Exit Time** option checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, select the **Transition** arrow that goes from **Grenade** to null.
    In the **Conditions** box, select the options **Grenade**, false. Leave the Has
    **Exit Time** option checked. See the screenshot for these setting choices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1b92465-bee4-4eb4-a3e7-2aae698b6284.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `BasicController` C# script-class in your code editor (in Project folder `Scripts`).
    Immediately before the end of the `Update()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and play your Scene. You will be able to trigger the `firing_rifle`
    and `toss_grenade` animations by clicking on the fire button and pressing the
    *F* key. Observe how the character's legs still respond to the Move animation
    state, so that the character can keep walking backward while throwing the grenade.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Avatar mask is created, it can be used as a way of filtering the body
    parts that would actually play the animation states of a particular layer. In
    our case, we have constrained our `fire_rifle` and `toss_grenade` animation clips
    to the upper body of our character, leaving the lower body free to play movement-related
    animation clips such as walking, running, and strafing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Override versus Additive blending
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have noticed that the `UpperBody` layer has a parameter named Blending,
    which we have set to Additive. This means that animation states in this layer
    will be added to the ones from the lower layers.
  prefs: []
  type: TYPE_NORMAL
- en: If changed to Override, the animation from this would override animation states
    from the lower layers when played. In our case, Additive helps in keeping the
    aim stable when firing while running.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Animation Layers and Avatar Body Masks, check out Unity''s
    documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.unity3d.com/Manual/AnimationLayers.html](http://docs.unity3d.com/Manual/AnimationLayers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.unity3d.com/Manual/class-AvatarMask.html](http://docs.unity3d.com/Manual/class-AvatarMask.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing States into Sub-state Machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever content in the **Animator** panel gets too cluttered, you can always
    consider organizing your **Animation States** into **Sub-State Machines**. In
    this recipe, we will use this technique to organize animation states for turning
    the character. Also, since the animation clips provided do not include Root Motion,
    we will use the opportunity to illustrate how to overcome the lack of Root Motion
    via a script, using it to turn the character 45 degrees to the left and right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cee99f8-ed72-4175-9b9f-b6d9ea875bdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named **Turning,** containing
    a basic scene that features an animated character. We have also provided the FBX
    animation clips `Swat@turn_right_45_degrees.fbx` and `Swat@turn_left.fbx.` These
    files can be found in the `09_04` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To organize States into Sub-State Machines, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project and import the Mixing Unity Package, as well as the
    FBX files `Swat@turn_right_45_degrees.fbx` and `Swat@turn_left.fbx.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from the **Project** panel, open the `mecanimPlayground` level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to configure the **Animation** Clips. Select the `Swat@turn_left` asset in
    the **Project** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the Rig section. Change **Animation Type** to **Humanoid** and **Avatar
    Definition** to Create From this Model. Confirm by clicking on **Apply.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, choose the **Animations** section. The `turn_left` clip should be selected.
    Click the **Clamp Range** button to adjust the timeline and check the **Loop Time**
    option. **Under Root Transform Rotation**, check **Bake Into Pose** and navigate
    to Based Upon | Original. **Under** **Root Transform Position** (**Y**), check
    **Bake Into Pose** and select **Based Upon (at Start)** | **Original**. **Under
    Root Transform Position (XZ)**, leave **Bake Into Pose** unchecked. Click on **Apply**
    to confirm the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8addff17-b81f-46bb-8c34-f1b8248584f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat steps 4 and 5 for `Swat@turning_right_45_degrees.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** panel, double-click the `MainCharacter` controller asset
    file; it should open in the **Animator** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top-left corner of the **Animator** panel, select the **Parameters**
    section and use the **+** sign to create the two new Parameters (Boolean) named
    `TurnLeft` and `TurnRight.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the grid area. From the context menu, select Create `Sub-State`
    Machine. In the Inspector, rename it Turn:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37266a4b-8c2c-40b8-afaf-b99db355ce5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on the **Turn Sub-State Machine**. Right-click on the grid area,
    select **Create State** | **Empty****,** and add a new state. Rename it to **Turn
    Left.** Then, add another state named **Turn Right**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Inspector,** populate Turn Left with the `turn_left` motion clip.
    Then, populate **Turn Right** with `turning_right_45_degrees`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fce897ee-abff-43dc-81b3-a7f3e2271627.png)'
  prefs: []
  type: TYPE_IMG
- en: In the **Animator** panel, return to the **Base Layer** (click Base Layer in
    the information bar along the top of this panel).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two **Transitions** from **State Move**, one into the **Turn Left** sub-state,
    and one into the **Turn Right** sub-state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0836a058-4b84-4a1e-842d-f8d9564ff3d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Create two return **Transitions,** from the Turn Left back to Move sub-state,
    and from the Turn Right sub-state back to Move. Do this by entering the Turn sub-state, dragging
    the **Transition** arrows from Turn Left and Turn Right into (Up) **Base Layer**,
    and choosing **State Move.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Transition** arrow that goes from Turn Right to (Up) Base Layer.
    It will turn blue. From the **Inspector,** uncheck the **Has Exit Time** option.
    Then, access the Conditions list, click the **+** sign to add a new condition,
    and set it as **TurnRight** and **false:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ab1a0d5-0246-4185-af0b-0342c434d943.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the arrow that goes from (Up) Base Layer to Turn Right. From the **Inspector,**
    uncheck the Has Exit Time option. Then, access the Conditions list, click the
    + sign to add a new condition, and set it as **TurnRight** and **true.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 14 and 15 with the arrows that go between (Up) Base Layer and Turn
    Left, using TurnLeft as a condition this time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `BasicController` C# script-class in your code editor (folder Project
    | Scripts). Immediately after the `if(controller.isGrounded)` line, add this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save your script-class. Then, select the `MsLaser` character and, from the **Inspector,**
    select the **Basic Controller** component. Leave the Move Diagonally and Mouse
    Rotate options unchecked. Also, leave the Keyboard Rotate option checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the **Scene.** You will be able to turn left and right by using the *Q*
    and *E* keys respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As should be clear from the recipe, Sub-State Machines work in a similar way
    to groups or folders, allowing you to encapsulate a series of state machines into
    a single entity for easier reference. States from the Sub-State Machines can be
    Transitioned from external states, in our case the Move state, or even from different
    sub-state machines.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding character rotation, we have overcome the lack of root motion by using
    the `transform.Rotate(Vector3.up` * `(Time.deltaTime * -45.0f)`, Space.World)
    command to make the character actually turn around when the Q and E keys are held
    down.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command was used in conjunction with `animator.SetBool("TurnLeft", true)`,
    which triggers the right animation clip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ab32fd2-834a-415a-8000-2d3b36734e9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Transforming the Character Controller via scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applying Root Motion to your character might be a very practical and accurate
    way to animate it. However, every now and then, you might need to manually control
    one or two aspects of the character's movement. Perhaps you only have an in-place
    animation to work with, or maybe you want the character's movement to be affected
    by other variables. In these cases, you will need to override **Root Motion**
    via a script.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate this issue, this recipe makes use of an animation clip for jumping,
    which originally moves the character only in the Y-axis. In order to make her
    move forward or backward while jumping, we will learn how to access the character's
    velocity to inform the jump direction via a script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named Jumping, containing
    a basic scene that features an animated character. We have also provided the FBX
    animation clip `Swat@rifle_jump.` These files can be found in the `09_05` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To apply Root Motion via a script, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project and import the Jumping Unity Package, as well as the
    FBX `Swat@rifle_jump.fbx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from the Project panel, open the `mecanimPlayground` level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to configure the **Animation** Clips. Select the `Swat@rifle_jump` asset in
    the **Project** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Rig section. Change Animation Type to Humanoid and Avatar Definition
    to Create From this Model. Confirm this by clicking on Apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, activate the **Animations** section. The `rifle_jump` clip should be selected.
    Click the Clamp Range button to adjust the timeline, and check the Loop Time and
    Loop Pose options. Under Root Transform Rotation, check Bake Into Pose and select
    Based Upon | Original. Under Root Transform Position (Y), leave Bake into Pose
    unchecked and select **Based** Upon (at Start) | Original. Under Root Transform
    Position (XZ), leave Bake Into Pose unchecked. Click on **Apply** to confirm the
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96b4285f-1037-4c73-9b2e-60de1a85b657.png)'
  prefs: []
  type: TYPE_IMG
- en: In the **Project** panel, double-click the `MainCharacter` controller asset
    file; it should open up in the Animator panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the top-left corner of the Animator panel, select the Parameters section
    and use the **+** sign to create a new **Trigger** parameter named Jump:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39a6240f-a419-4a9a-8d00-0fea4a227ed0.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a new State named Jump. Do this by right-clicking the grid area and choosing
    Create State | Empty, then changing its name in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Jump** state. Then, from the **Inspector,** populate it with the
    `rifle_jump` motion clip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/57ca2d32-4d46-4642-94d1-e635b194fe82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a **Transition** from Any State to Jump (using the Make Transition right-mouse-click
    menu). Select the **Transition,** uncheck Has Exit Time, and add a Condition for
    Trigger Jump:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f122a2c-759a-4219-8faa-b1c5429ac82f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, create a **Transition** from Jump to Move. Ensure the Has Exit Time option
    is checked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c110b9e8-cb8c-440d-8a5f-6c872a95cf74.png)'
  prefs: []
  type: TYPE_IMG
- en: Open the `BasicController` C# script-class in your code editor (folder Project
    | Scripts).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right before the `Start()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Immediately after the `if(controller.isGrounded)` line, add this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add a new function at the end of the code for this script-class. So
    it is inserted immediately before the final brace  (`}`) of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save your script and play the Scene. You will be able to jump around using the
    spacebar. Observe how the character's velocity affects the direction of the jump.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Observe that once this function is added to the script, the Apply Root Motion
    field in the Animator component changes from a checked box to Handled by Script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e23a15e-9164-4c63-a06a-aee63fa715fb.png)'
  prefs: []
  type: TYPE_IMG
- en: The reason is that in order to override the animation clip's original movement,
    we have placed a series of commands inside Unity's OnAnimatorMove() function to
    move our character controller while jumping. The `controller.Move (deltaPosition)` line
    of code basically replaces the jump's direction from the original animation with
    the deltaPosition 3D Vector, which is made up of the character's velocity at the
    instant before the jump (x and z-axis) and the calculation between the jumpHeight
    variable and gravity over time (y-axis).
  prefs: []
  type: TYPE_NORMAL
- en: The Transition from Any State to Animation State Jump has the condition that
    the Jump Transition has fired (become true). In the code, we activate the Trigger
    Jump in the Animator Controller with the ` SetTrigger("Jump")` statement. Triggers
    are like Bool Parameters, but when set become True for one instance, then automatically
    return to false again. This means there is no need to write extra code to set
    the Trigger to False.
  prefs: []
  type: TYPE_NORMAL
- en: Triggers are perfect for events that happen, and then you want things to return
    to normal afterwards. The Transition from the Jump Animation State back to Move
    does not need any condition, so after the Jump animation has played, the character
    returns to the Move state.
  prefs: []
  type: TYPE_NORMAL
- en: Adding rigid props to animated characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven't included a sufficient number of props for your character when
    modeling and animating it, you might want to give her the chance to collect new
    ones at runtime. In this recipe, we will learn how to instantiate a GameObject
    and assign it to a character while respecting the animation hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named Props, containing a
    basic Scene that features an animated character and a prefab named badge. There
    is also a Texture named `texture_pickupBadge.png.` The files can be found in the
    `09_06` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add a rigid prop at runtime to an animated character, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project and import the Props Unity Package and the `texture_pickupBadge.png` Texture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from the **Project** panel, open the `mecanimPlayground` level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** panel, add the badge prop to the scene by dragging it into
    the Hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the badge a child of the `mixamorig:Spine2` Transform (use the Hierarchy
    tree to navigate to MsLaser | `mixamorig:Hips` | `mixamorig:Spine` | `mixamorig:Spine1`
    | `mixamorig:Spine2``).` Then, make the badge object visible above the character''s
    chest by changing its Transform Position to (-0.08, 0, 0.15) and Rotation to (0.29,
    0.14, -13.29):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26e4046a-4723-4896-babb-388487b518bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Make a note of the **Position** and **Rotation** values, and delete the badge
    object from the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a 3D Cube named Cube-pickup to the Scene by choosing **Create** | **3D Object**
    | **Cube****.** In the **Inspector,** set its **Transform Position** to (0, 0.5,
    2) and check the Is Trigger option for the Box Collider component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `texture_pickupBadge.png` Texture from the **Project** panel onto the Cube-pickup GameObject.
    You should see the Pickup Badge text written on all sides of the Cube.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Project** panel, create a new C# script-class named **AddProp** containing
    the following code, and add an instance-object as a component to the Cube-pickup
    GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the Cube-pickup GameObject and look at the properties of the **Prop
    Manager (Script)** component in the Inspector. Populate the public variables as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Prop: the badge prefab'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Target Bone: the `mixamorig:Spine2` transform inside the `MsLaser` **Hierarchy** GameObject'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Position Offset: (-0.08, 0, 0.15)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rotation Offset: (0.29, 0.14, -13.29)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Destroy Trigger: checked (true)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/afb575be-e9ad-4684-97f4-65b7497a1cc2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the **Scene.** Using the WASD keyboard control scheme, direct the character
    to the the Cube-pickup GameObject. Colliding with it will add a badge to the character
    the first time. If public variable **Destroy Trigger** was checked, then the Cube-pickup
    GameObject should be removed from the Scene after the first collision:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae7f53cf-d82d-4c19-bf28-9c13a6f77ee6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once it's been triggered by the character, the scripted instance-object attached
    to the Cube-pickup GameObject instantiates the assigned prefab, making it a child
    of the bones that they have been "placed into." The **Position Offset** and **Rotation
    Offset** can be used to fine-tune the exact position of the prop relative to its
    parent Transform. As the props become parented by the bones of the animated character,
    they will follow and respect the parent character GameObejct's hierarchy and animation.
  prefs: []
  type: TYPE_NORMAL
- en: The `AlreadyHalreadyHasChildObject()` method checks for preexisting props of
    the same name before actually instantiating a new one, so we don't attempt to
    instantiate the prop more than once as a new child of the target bone.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Removing props with a script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can make a similar script to remove props. In this case, the `OnTriggerEnter(...)`
    method would invoke the following `RemoveProp()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setting Active if there's only one type of Prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there will only be one prop, then rather than having the code Instantiate
    a new GameObject, you could have the prop always in the Hierarchy but initially
    not active, and then when the pickup Trigger object is hit, you change the prop
    GameObject to be active.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although less flexible, it''s a much simpler script. Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the badge **Prefab** and make it a child of the `mixamorig:Spine2` Transform,
    then set **Position** and **Rotation** as you did in Step 4 of the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector,** uncheck the Active checkbox for the whole badge GameObject
    at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of the C# script-manager with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With the Cube-pickup GameObject selected in the **Hierarchy,** in the Inspector
    drag the badge child of mixamorig:Spine2 into the public slot for the Prop Object
    variable of the Prop Manager (Script) component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Animation Events to throw an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that your animated character is ready, you might want to coordinate some
    of her actions with her animation states. In this recipe, we will show this by
    making the character throw an object whenever the appropriate animation clip reaches
    a particular tie point in the animation. To do so, we will make use of **Animation**
    Events, which basically trigger a function from the animation clip''s timeline.
    This feature, introduced in the Mecanism system, should feel familiar to those
    experienced with the Add Event feature of the classic **Animation** panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/523ca6f8-ee07-4f39-bf52-d5eec4e64100.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named **Throwing,** containing
    a basic scene that features an animated character and a **prefab** named **EasterEgg.**
    The files can be found in the `09_07` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make an animated character throw an object, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project and import the Props Unity Package and the `EasterEgg` Texture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `mecanimPlayground` level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the level and press *F* on your keyboard. The character will move as if
    she is throwing something with her right hand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# script-class named `ThrowObject,` and add an instance-object
    as a component to the character''s `MsLaser` GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the **Hierarchy,** ensure the **MsLaser** GameObject is selected. In the **Inspector,**
    examine its **Throw Object (Script)** component. Populate the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Prop: The `EasterEgg` prefab'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hand: `mixamorig:RightHand`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pos Offset: Set to (0; 0.07, 0.04)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Force: Set to (0; 200, 500)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/eb4b94fa-7b65-42ee-9df4-7f0f625775ec.png)'
  prefs: []
  type: TYPE_IMG
- en: From the **Project** panel, select the `Swat@toss_grenade` asset file. In the
    **Inspector,** select the **Animation** section, scroll down to the **Events**
    section, and expand it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explore the **Animation** preview panel and see how, as you drag the preview
    playhead along the preview **Timeline,** the playhead also moves correspondingly
    in the **Events** timeline. At the bottom of the **Preview** panel, the time,
    percentage, and Frame properties are displayed. When you click the add event button,
    a new **Animation Event** will be added in the **Events Timeline** at the current
    playhead position, so ensure you have the playhead at the correct frame before
    creating a new **Animation** Event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ddda731-39e9-48fd-bb67-63378d4d8d4a.png)'
  prefs: []
  type: TYPE_IMG
- en: You may view the contents of this panel by focussing on the avatar animation
    itself when moving the playhead, and visually choosing the appropriate frame when
    the character is the desired position for the event. Or, you may already know
    the time/percentage/frame number at which you wish the Animation Event to be created,
    and so be focussing on the numerical values at the bottom of the Preview panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two **Animation Events** in the Events section as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '017.9%: Set Function to Prepare'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '057.1%: Set Function to Throw'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, click the Apply button:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0a763495-1ff1-435a-af2c-ceb19953071d.png)'
  prefs: []
  type: TYPE_IMG
- en: Play your **Scene.** Your character will now be able to throw an **Easter Egg**
    when you press the F key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the `toss_grenade` animation reaches the points to which we have set our
    **Events,** the `Prepare()` and `Throw()` methods are invoked.
  prefs: []
  type: TYPE_NORMAL
- en: The `Prepare()` method instantiates a prefab, now named projectile, in the character's
    hand (Projectile Offset values are used to fine-tune its position), also making
    it respect the character's hierarchy. Also, it disables the prefab's collider
    and destroys its Rigidbody component, provided it has one.
  prefs: []
  type: TYPE_NORMAL
- en: The `Throw()` method enables the projectile's collider and adds a Rigidbody
    component to it, making it independent from the character's hand. Finally, it
    adds a relative force to the projectile's Rigidbody component, so it will behave
    as if thrown by the character. The Compensation YAngle can be used to adjust the
    direction of the grenade, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Ragdoll physics to a character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Action games often make use of Ragdoll physics to simulate the character''s
    body''s reaction to being affected by a hit or explosion. In this recipe, we will
    learn how to set up and activate Ragdoll physics for our character whenever she
    touches a spiky object. We will also use the opportunity to reset the character''s
    position and animations a number of seconds after that event has occurred:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fce4514f-6356-4231-9ce9-28555981a8d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named Ragdoll, containing
    a basic scene that features an animated character, and a prefab already placed
    in the scene named Spawnpoint. The files can be found in the `09_08` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To apply Ragdoll physics to your character, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project and import the Ragdoll Unity Package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `mecanimPlayground` level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the animated MsLaser character and a disc, Spawnpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, let's create and set up our Ragdoll. Create a new 3D Ragdoll by choosing **Create**
    | **3D Object** | **Ragdoll....** The **Ragdoll** wizard should pop up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assign the transforms as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pelvis: `mixamorig:Hips`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left Hips: `mixamorig:LeftUpLeg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left Knee: `mixamorig:LeftLeg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left Foot: `mixamorig:LeftFoot`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right Hips: `mixamorig:RightUpLeg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right Knee: `mixamorig:RightLeg`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right Foot: `mixamorig:RightFoot`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left Arm: `mixamorig:LeftArm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left Elbow: `mixamorig:LeftForeArm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right Arm: `mixamorig:RightArm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right Elbow: `mixamorig:RightForeArm`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Middle Spine: `mixamorig:Spine1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Head: mixamorig:Head'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Total Mass: 20'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Strength: 50'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See the screenshot for these settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37968fc7-da9b-49cb-9c97-c3c97c67378e.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the **MsLaser** GameObject in the Hierarchy. In the **Inspector,** set
    its **Tag** to **Player.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# script-class named `RagdollCharacter` and add an instance-object
    as a component to the **MsLaser** GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe needs something to collide with; create a GameObject named death-object.
    You could create a simple 3D Cube (menu: **Create** | 3D **Object** | **Cube****).**
    However, any 3D object with a Physics Collider will be fine for the player''s
    character to interact with.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s more fun to have a visually interesting 3D model to interact with. When
    creating the screenshots for this recipe, we used the high-quality, low-poly,
    free Stilized Crystal assets from LowlyPoly in the Unity Asset Store as example
    objects you might use to cause a Ragdoll collision in a game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://assetstore.unity.com/packages/3d/props/stylized-crystal-77275](https://assetstore.unity.com/packages/3d/props/stylized-crystal-77275)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f53c0851-5482-4096-ab7b-fbbd077c6bc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new C# script-class named `DeadlyObject,` and attach an instance-object
    as a component to the death-object GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Play the **Scene.** Using the WASD keyboard control scheme, direct the character
    to the death-object GameObject. Colliding with it will activate the character's
    Ragdoll physics and apply an explosion to it. As a result, the character will
    be thrown a considerable distance away and will no longer be in control of its
    body's movement, akin to a Ragdoll.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity''s Ragdoll Wizard assigns the Collider, Rigidbody, and Character Joint components to
    selected transforms. In conjunction, those components make Ragdoll physics possible.
    However, they must be disabled whenever we want our character to be animated and
    controlled by the player. In our case, we switch those components on and off using
    the `RagdollCharacter` script and its two functions: `ActivateRagdoll()` and `DeactivateRagdoll().`
    The latter includes instructions to respawn our character in the appropriate place.'
  prefs: []
  type: TYPE_NORMAL
- en: For testing purposes, we have also created the `DeadlyObject` script, which
    calls the `RagdollCharacter` script's function named `ActivateRagdoll().` It also
    applies an explosion to our ragdoll character, throwing it outside the range of
    the explosion.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using a new player GameObject rather than deactivating and moving to a respawn
    point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of resetting the character''s transform settings, you could have destroyed
    its GameObject and instantiated a new one over the respawn point using Tags. For
    an example of how to do this, check out Unity''s documentation: [http://docs.unity3d.com/ScriptReference/GameObject.FindGameObjectsWithTag.html](http://docs.unity3d.com/ScriptReference/GameObject.FindGameObjectsWithTag.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the character's torso to aim a weapon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When playing a Third-Person Character, you might want her to aim her weapon
    at a target that is not directly in front of her, without making her change direction.
    In this case, you will need to apply what is called a Procedural Animation, which
    does not rely on pre-made animation clips, but rather on the processing of other
    data, such as player input, to animate the character. In this recipe, we will
    use this technique to rotate the character''s spine by moving the mouse, allowing
    for adjustments in the character''s aim. We will also use this opportunity to
    cast a ray from the character''s weapon and display a crosshair over the nearest
    target. Please note that this approach will only work with cameras standing behind
    the third-person controlled characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b4e1c26-5a69-4201-8fe2-9a08f21ccc56.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `AimPointer,` containing
    a basic scene that features an animated character. The package, which also includes
    the `crossAim` sprite to be used as a crosshair for aiming, can be found inside
    the `09_09` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To rotate the character''s torso to aim a weapon, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project and import the `AimPointer` Unity Package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `mecanimPlayground` level. In the **Inspector** and **Scene** panels,
    you will see an animated character named **MsLaser** holding the **pointerPrefab**
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# script-class named `MouseAim,` and add an instance-object as
    a component to the **MsLaser** GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the **Hierarchy,** create a new UI Image named Image-crosshair by choosing
    **Create** | **UI** | **Image****.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Inspector** for the Rect Transform component, set its Width and Height
    to 16 and populate the **Source Image** field with the `crossAim` sprite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86d601c1-1cc0-4eb1-b0a2-e38e039819f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the **MsLaser** GameObject in the **Hierarchy,** and in the **Inspector**
    for the Mouse Aim component, populate the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Spine: `mixamorig:Spine` (in **MsLaser** | **mixamorigHips****)**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Weapon: `pointerPrefab` (in **MsLaser|Hips|Spine|Spine1|Spine2|RightShoulder|Arm|ForeArm|Hand**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Crosshair: Image-crosshair GameObject
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1d04192a-a3c9-4549-8a1f-993225b39756.png)'
  prefs: []
  type: TYPE_IMG
- en: Play the Scene. You will now be able to rotate the character's torso by moving
    the mouse. Even better, the Image-crosshair UI image will be displayed at the
    top of the object that is being aimed at by the pointer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have noticed that all the code invoked for rotating the character's
    spine is inside the `LateUpdate()` method, as opposed to the more common `Update()`
    method. The reason for this is to make sure that all the transform manipulation
    will be executed after the original animation clip is played, overriding it.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the spine rotation, our script adds the horizontal and vertical speed
    of the mouse to the xAxis and yAxis float variables. These variables are then
    constrained within the specified limits, avoiding distortions to the character's
    model. Finally, the spine object transform rotations for the x and y axes are
    set to xAxis and yAxis respectively. The z axis is preserved from the original
    Animation Clip.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, our script uses a Raycast command to detect whether there is an
    object's collider in the direction of the weapon's aim, in which case, a crosshair
    will be drawn on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Generic solution for Cameras other than the Main Camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since this recipe's script was tailored for cameras standing behind third-person-controlled
    characters, we have included a more generic solution to the problem - in fact,
    a similar approach to the one presented in *Unity 4.x Cookbook, Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: An alternate script named `MouseAimLookAt,` which can be found inside the `09_09`
    folder, starts by converting our bi-dimensional mouse cursor screen's coordinates
    to three-dimensional world space coordinates (stored in a point variable). Then,
    it rotates the character's torso towards the point location, using the `LookAt()`
    command to do so. Additionally, it makes sure that the spine does not extrapolate
    minY and maxY angles, which would otherwise causing distortions to the character
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we have included a Compensation `YAngle` variable, which makes it possible
    for us to fine-tune the character's alignment with the mouse cursor. Another addition
    is the option to freeze the X-axis rotation, in case you just want the character
    to rotate their torso laterally but not look up or down. Again, this script uses
    a **Raycast** command to detect objects in front of the weapon, drawing a crosshair
    on the screen when they are present.
  prefs: []
  type: TYPE_NORMAL
- en: Creating geometry with Probuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A recent addition to the 3D Unity tools is **Probuilder,** which allows you
    to create and manipulate geometry inside the Unity Editor. Much more powerful
    than the existing **Terrain** editor, **Probuilder** allows you to create 3D Primitives
    and then manipulate them, such as by extruding or moving Vertices, Edges, or Faces,
    and then painting with colors or texturing with Materials.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll create some geometry that might be useful for an original
    game, or to add to a 3D Gamekit Scene (such as the Scene worked with in the following
    recipe).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''ve not used a 3D modeling package before (such as Blender, 3D Studio
    Max, or Maya), then it is well worth exploring the different features of **Probuilder.**
    You''ll learn key concepts, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vertex: Point where lines touch—a corner where edges touch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edges: Straight line between two vertices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Faces: Flat 2D surfaces, usually a rectangle or triangular'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the free Unity Asset Store and Package Manager packages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create geometry with Probuilder, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 3D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Package Manager** to install the **Probuilder** package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the **Probuilder** panel with **Tools** | **Probuilder** | **Window****.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dock the panel (next to the **Hierarchy** works well). Choose **Text Mode**
    or **Icon Mode**, as you prefer, via the right mouse button's context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new **Probuilder** Plane by clicking **New Shape** and choosing **Plane**
    from the **Shape Tool** window. Accept the default options and click the green
    **Build Plane** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the new **Probuilder** Plane selected in the Hierarchy, you'll see the
    object selected in the Scene panel and its properties in the Inspector. We can
    see in the Inspector that, as well as its Transform, Mesh, and Mesh Renderer components,
    there are two special Probuilder components, `Pb_mesh_nnnnn` and `Pb_Object` (Script).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Pb_mesh_nnnnn` is a special component that stores the data for the 3D object
    mesh of this GameObject; this data can be edited in the **Scene** panel at design
    time. At runtime, a Unity Mesh is created based on this data.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bda71a43-8db9-43a3-97c7-b7d85f1181e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that when a **Probuilder** GameObject is selected, there is a small **Probuilder**
    tool icon bar displayed in the Scene panel, allowing the Object, Vertex, Edge,
    and Face detection modes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/abae42b2-3862-4823-97c3-c76646b7b950.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make a depression in the middle of our Plane. Choose Face selection
    (the rightmost of the four **Probuilder** section icons), and using the Shift key
    for multiple section, select the four inner faces (selected faces turn Yellow).
    Then, use the Y-axis arrow to move these four selected faces downwards:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d0411fb-5bb8-47ed-81e3-10a4772de6fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's Vertex Paint some color on the object. This is easier to do carefully
    when there are more faces. First, in the Probuilder panel, click the Subdivide
    tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click Probuilder Vertex Colors +. The **Probuilder** Vertex Painter pop-up
    panel should be displayed. Click the red color and choose a darker red. Then,
    click the white square above your color to choose this dark red brush color. Make
    the brush size big (2 or 3), and paint all over the Plane to make it all dark
    red. Now, click the white square in the Vertex Painter panel to choose the yellow
    brush, and make the brush size smaller (say 1.5). Now, click on just the nine
    vertices in the middle of the depressed region of the Plane. Now, you should have
    a dark red Plane with yellow in the lower parts of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/373b51c4-9452-4f43-8ba9-9d5ba284879a.png)'
  prefs: []
  type: TYPE_IMG
- en: Save your Scene. Since the **Probuilder** Mesh data is stored in the Scene data,
    you'll lose all your Probuilder work if you forget to save your Scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've added the Probuilder package to a new 3D project and used the **Probuilder**
    tools panel to add a **Probuilder** mesh object to the Scene. You've used the
    face selection tool to allow you to select and then move some of the faces to
    create a depression. You then subdivided the object to give you more faces to
    work with for final detailed working. Finally, you learned to Vertex Paint with
    difference colors and brush sizes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Probuilder** offers many more features, including creating object by drawing
    a line-by-line polygon and Texturing surfaces rather than just simple Vertex Painting.
    Learn more about **Probuilder** here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity Technology **Probuilder** documentation manual: [https://docs.unity3d.com/Packages/com.unity.probuilder@3.0/manual/index.html](https://docs.unity3d.com/Packages/com.unity.probuilder@3.0/manual/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity Technology **Probuilder** videos: [https://www.youtube.com/user/Unity3D/search?query=Probuilder](https://www.youtube.com/user/Unity3D/search?query=Probuilder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a game with the 3D Gamekit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A collection of Unity 3D tools has been combined to become the Unity 3D **GameKit**.
    In this recipe, we''ll create a new **Scene** and make use of some of the kit''s
    Prefabs and Scripts to illustrate how characters can interact with objects such
    as doors and pickups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c41cfef5-dfc9-4a95-b2d9-fdb64a8c96aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the free **Unity Asset Store** and **Package Manager** packages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a game with the 3D Gamekit, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 3D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the Package Manager to install the following packages (required by the
    3D GameKit):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cinemachine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Post Processing (agree to the Quality Settings pop-up diaglog)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Probuilder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Import the **3D GameKit** (free from Unity Technologies) from the Asset Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a82197e1-10a8-46fe-87bf-ee8e0f187c4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Agree to the Quality Settings pop-up diaglog. After a few minutes (in which
    it is setting up a project with lots of assets), you'll see a new folder in the
    Project panel named 3DGamekit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close and then reopen the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, open the example **Scene** provided and explore the 3D world by controlling
    the 3D Ellen character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Movement is standard *WASD-SPACE*/arrow keys. Camera control is via the mouse
    pointer. Click the left mouse button to use a weapon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new 3D **GameKit** Scene by choosing Kit Tools | Create New Scene.
    You''ll then be asked to name the **Scene**, and a new **Scene** asset file will
    be created in your Project | Assets folder. You''ll see there are quite a few
    special GameObjects in the Hierarchy of your new **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0ce5460-ef14-4600-b9e9-6682ec9d54e2.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the new **Scene** starts off containing an animated 3D character
    (Ellen) on a ProBuilder 3D Plane that forms the ground she is standing on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a small door in the Scene. Drag a clone of the DoorSmall Prefab from the
    Project panel (Assets | 3DGamekit | Prefabs | Interactables) into the middle of
    the 3D Plane **Scene**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Crystal in the **Scene**, on the opposite side of the door from where
    the Ellen character starts. Drag a clone of the Crystal Prefab from the Project
    panel (Assets | 3DGamekit | Prefabs | Interactables) into the **Scene** behind
    the door.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add some walls on either side of the door, so the door must be opened
    in order for Ellen to reach the Crystal. Drag two clones of Prefab Wall2x from
    the Project panel (Assets | 3DGamekit | Prefabs | Interactables) into the **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1224aa6b-91a4-4692-9184-2f984cc1f317.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now need to connect the PressurePad to the Door, so when Ellen steps on
    the PressurePad it sends a message to open the door. This is very straightforward,
    since the Door has a GameCommandReceiver component, which can be linked to the
    PressurePad''s Send on Trigger Enter (Script) component. Select the PressurePad
    GameObject in the Hierarchy and drag DoorSmall into the public Interactive Object
    slot of its Send on Trigger Enter (Script) component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/04421538-cb59-41b5-ba19-7f99f4658a55.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the **Scene**. When Ellen steps onto the PressurePad, the Door should open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to make the Crystal collidable by adding a Box Collider. Add a Box
    Collider component to GameObject Crystal and check its On Trigger option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **3D Gamekit** has inventory features. Let''s make the Crystal collectable
    by the player by adding an Inventory Item (Script) component. In the **Inspector**,
    click Add Component, then type inven and choose the Inventory Item scripted component.
    For that component, type Crystal as the name of the Inventory Key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd5e7d90-f9fa-4f87-824d-9544e5c5d6cb.png)'
  prefs: []
  type: TYPE_IMG
- en: The Inventory Key names must match between the Inventory Object and the Inventory
    slot.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can add an Inventory Controller (Script) component to Ellen, with a
    slot for a Crystal. In the Hierarchy, select the Ellen GameObject. In the **Inspector**,
    click Add Component, then type inven and choose the Inventory Item scripted component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Inspector**, we now need to configure the properties of the Inventory
    Controller (Script) component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Size from `0` to `1`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For its Key, type Crystal
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For the On Add() events, click the plus sign, +, to create a new event.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag Ellen into the Object slot for the new event (below Runtime Only).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the function from No Function to InventoryController Add Item.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, type the name of this item in the Inventory as Crystal:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6e3770da-70b6-4b32-8fda-ec00df5d6dad.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the **Scene**. Ellen can now open the Door via the **PressurePad** and walk
    into the Crystal, which is added to her inventory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have dipped our toes into the wide range of features of the **3D GameKit**.
    Hopefully, this recipe gave you an idea of how to work with the provided **Prefabs,**
    and how **3D Gamekit** components could be added to custom GameObjects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out these links to learn more:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The 3DGamekit reference guide: [https://unity3d.com/learn/tutorials/projects/3d-game-kit/introduction-3d-reference-guide?playlist=51061](https://unity3d.com/learn/tutorials/projects/3d-game-kit/introduction-3d-reference-guide?playlist=51061)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Unity 3DGamekit walkthrough pages: [https://unity3d.com/learn/tutorials/projects/3d-game-kit/introduction-walkthrough?playlist=51061](https://unity3d.com/learn/tutorials/projects/3d-game-kit/introduction-walkthrough?playlist=51061)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download the 3DGameKit, including a sample Scene, from the Asset Store: [https://assetstore.unity.com/packages/essentials/tutorial-projects/3d-game-kit-beta-115747?_ga=2.127077645.1823824032.1533576706-1834737598.1481552646](https://assetstore.unity.com/packages/essentials/tutorial-projects/3d-game-kit-beta-115747?_ga=2.127077645.1823824032.1533576706-1834737598.1481552646)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing third-party 3D models and animations from Mixamo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are many **3D models** and animations available and ready to use
    in Unity from the Asset Store, there are many more sources of 3D assets from third-party
    organisations. Mixamo (now part of Adobe) offers a fantastic range of characters
    and animations via their web-based system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll select and download a character and some animations,
    formatting them for use with Unity and controlling the animations with an Animation
    Controller State Chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4718f36-a89d-4b84-854d-a9457d4759cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the free Adobe Mixamo system, so you'll need to sign up for
    an account with them if you don't have one already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To import third-party **3D models** and animations from Mixamo, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a web browser and visit [Mixamo.com](http://Mixamo.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign up/log in with your Mixamo/Adobe account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Characters section (from navigation bar at top-left of web page)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your character, such as Lola B Styperek. You'll see this character appear
    in the right-hand preview panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download your character, choosing FBX For Unity (.fbx) and T-pose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/397a60b1-597c-4d9b-af3f-d5f1e83f9158.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new 3D Unity project, and in the Project panel create a folder named
    `Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the downloaded FBX file into the `Models` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the asset file in the Project panel, and in the **Inspector** select
    the Materials section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Extract Textures... button and extract the model''s Textures into
    your `Models` folder. If asked to fix an issue with a Material using a Texture
    as a Normal Map, choose Fix Now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77520cdc-deb0-4abd-8235-2fd285ef3ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Drag the clone of the character from the Project panel into the **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/68886c91-6df0-4d83-a425-af2e3c470839.png)'
  prefs: []
  type: TYPE_IMG
- en: We need an Animator Controller to manage animations. Create a new **Animator**
    Controller file in the Project panel named Lola-Animator-Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Lola B Styperek in the Hierarchy. In the **Inspector**, you'll see a
    Controller slot for the **Animator** component. Drag the Lola-Animator-Controller file from
    the Project panel into the Animator | Controller slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s animate this model. Go back to the [Mixamo.com](http://Mixamo.com)
    webpage and select an animation, such as Golf Drive. Click the Download button
    and choose these options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Format: FBX for Unity (.fbx)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Frames per second: 30'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Skin: Without skin'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keyframe reduction: none'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3aa7162c-1935-448b-9c91-9cca66f9a239.png)'
  prefs: []
  type: TYPE_IMG
- en: Import the Animation Clip FBX file (lola_b_styperek@Golf Drive.fbx in this case)
    into the Animation folder of your Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the Lola-Animator-Controller file to open the Animator (state machine)
    editor panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the Golf Drive Animation Clip into the **Animator** panel; it should appear
    as an orange state, with a Transition from Entry to it (that is, this one state
    becomes the default state):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1b2d65df-90ed-454c-a685-aedddadfbdaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the **Scene**. You should now see Lola practicing her golf swing. If you
    have the character selected in the Hierarchy and can view the **Animator** panel,
    you''ll see that the Golf Swing Animation Clip (State) is playing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6727d629-0207-4e43-874e-80cba29a5418.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixamo exports 3D rigged character models and **Animation Clips** in FBX format.
    The **Materials** for models are embedded in the FBX file, so we had to extract
    them once the model was imported into Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Unity controls the animation of models with an Animator Controller, so we had
    to create one for our character model and then drag in the Animation Clip we wished
    to use to animate our model.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some ways to go further with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Looping the animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select the Animation Clip in the Project panel, and in the **Inspector** check
    its Loop Time option, then click the Apply button to make the change to this asset
    file. When you run the **Scene**, Lola will now repeat the animation indefinitely.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting events to control when Animation Clips are played
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Additional Animation Clips can be added to the State Chart in the character's
    Animator Controller. You can then define variables and Triggers, to define when
    Animations Transition from one clip to another. Many of the recipes in this chapter
    illustrate ways to allow scripts to influence the Transition from one Animation
    Clip (State) to another.
  prefs: []
  type: TYPE_NORMAL
- en: Information sources about importing models and animations into Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Learn more about model and animation importing from the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity docs on importing **3D Models**: [https://docs.unity3d.com/Manual/HOWTO-importObject.html](https://docs.unity3d.com/Manual/HOWTO-importObject.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity docs about the **Model Import Settings** window: [https://docs.unity3d.com/Manual/class-FBXImporter.html](https://docs.unity3d.com/Manual/class-FBXImporter.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity docs about the **Model** tab: [https://docs.unity3d.com/Manual/FBXImporter-Model.html](https://docs.unity3d.com/Manual/FBXImporter-Model.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity docs about **Model** file formats: [https://docs.unity3d.com/Manual/3D-formats.html](https://docs.unity3d.com/Manual/3D-formats.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Samples of **Mixamo** free assets in the **Asset Store**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://assetstore.unity.com/packages/3d/animations/melee-axe-pack-35320](https://assetstore.unity.com/packages/3d/animations/melee-axe-pack-35320)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://assetstore.unity.com/packages/3d/animations/magic-pack-36269](https://assetstore.unity.com/packages/3d/animations/magic-pack-36269)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
