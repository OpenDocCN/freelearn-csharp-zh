- en: Scoping a Game Project
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏项目范围规划
- en: In this chapter, we'll teach you the concepts and relationships between a game's
    overall scope, its structure, and its content. We'll explore real-world examples
    and help you build an understanding of how to better document the size, complexity,
    and dependencies in your game, as well as to help you estimate your tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍游戏的整体范围、其结构和其内容之间的概念和关系。我们将探讨现实世界的例子，并帮助您了解如何更好地记录游戏的大小、复杂性和依赖关系，以及帮助您估算任务。
- en: The game's scope is a term used to define the project's perceived size and complexity.
    Without knowing the scope in advance, any production scheduling, costing, and
    staffing would be nigh on impossible. The scope is usually well defined by the
    time you wrap up the first version of the game design document.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的范围是一个术语，用于定义项目的感知大小和复杂性。在事先不知道范围的情况下，任何生产调度、成本估算和人员配置几乎都是不可能的。通常，在完成游戏设计文档的第一个版本时，范围就已经得到了很好的定义。
- en: As a game designer working on establishing the initial scope, it's your responsibility
    to list all of the game's features, functionalities, and systems, as well as to
    approximate the entirety of the game's content. This includes the quantity and
    complexity of gameplay mechanics, playable levels, missions, cutscenes, storylines
    and dialog, sound effects and music, playable and unplayable characters, weapons,
    power-ups, items, and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名负责确定初始范围的游戏设计师，你的责任是列出游戏的所有功能、功能性和系统，以及估算游戏内容的整体。这包括游戏玩法机制的数量和复杂性、可玩关卡、任务、过场动画、故事线和对话、音效和音乐、可玩和不可玩角色、武器、升级、物品等等。
- en: Once the project enters production, you're likely to keep using your scoping
    expertize whenever you work on a new feature proposal or design revision.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目进入生产阶段，你很可能会在处理新的功能提案或设计修订时继续使用你的范围专业知识。
- en: It's always good to make sure your ideas are not too costly or beyond the possibilities
    of the technology or the team (constraints can channel and boost your creativity)
    but do not overthink the scope too early! Writing down the scope only makes sense
    once the structure and core gameplay ideas are well defined.
  id: totrans-5
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 总是确保你的想法不会过于昂贵或超出技术或团队的可能性（约束可以引导和提升你的创造力），但不要过早地过度思考范围！只有在结构和核心游戏想法得到很好的定义之后，写下范围才有意义。
- en: Beware of feature creep! Sometimes less is more; deciding what to remove is
    harder but more important than dreaming of new features. The term feature creep
    is often used when describing scenarios (or even whole projects) in which we attempt
    to resolve our problems and make the game more compelling by adding more and more
    features and content, rather than working out the issues living deep within the
    base game systems and mechanics. Knowing what to keep and what to cut is an essential
    skill for any game designer. Changes on paper and during prototyping are the easiest
    and cheapest to make. Don't be afraid to propose cuts early on, as later may end
    up being too late.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 小心功能蔓延！有时候少即是多；决定删除什么比梦想新功能更难但更重要。当描述我们试图通过添加更多功能和内容来解决我们的问题并使游戏更具吸引力，而不是解决深植于基础游戏系统和机制中的问题的情况时，经常使用功能蔓延这个术语。知道保留什么和删除什么是任何游戏设计师的基本技能。在纸上和原型制作期间进行更改是最容易且最便宜的。不要害怕在早期提出削减建议，因为后期可能会太晚。
- en: After the first drafts of the GDD (game design document) and TDD (technical
    design document, usually maintained by the lead developer) are finalized, the
    representatives of various disciplines from your team and studio will be able
    to estimate the amount of time needed to deliver on the project. This, in turn,
    allows the producer to create and agree upon the schedule and budget.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成游戏设计文档（GDD）和技术设计文档（TDD，通常由主开发者维护）的第一稿后，你团队和工作室各个领域的代表将能够估算完成项目所需的时间。这反过来又允许制作人创建并同意日程安排和预算。
- en: Since game development is highly unpredictable, you can expect the scope and
    estimations to be frequently revised and a 20-40% uncertainty buffer added to
    each estimation (some people go as far as to double their initial estimates).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于游戏开发高度不可预测，你可以预期范围和估算会经常修订，并且每个估算都会增加20-40%的不确定性缓冲（有些人甚至将他们的初始估算翻倍）。
- en: On a side note, it's important to acknowledge that in certain projects you could
    deal with continuous iteration. This means that your scope will stay relatively
    undefined and flexible for the duration of the project. Such scenarios are rare,
    require clear short-and mid-term objectives, and should not become an excuse to
    generate an unsustainable amount of work for yourself or others. After all, even
    if time and resources are not an issue, you rarely want to spend ten years on
    a single game, only to have the entire industry move towards a different direction,
    distribution platform, and technology.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，重要的是要承认，在某些项目中，你可能需要处理连续的迭代。这意味着你的范围将在整个项目期间相对不确定和灵活。这种情况很少见，需要明确的短期和中期目标，并且不应成为为自己或他人产生不可持续工作量借口。毕竟，即使时间和资源不是问题，你也很少希望在一个单一的游戏上花费十年时间，结果整个行业却朝着不同的方向、发行平台和技术发展。
- en: Game structure
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏结构
- en: To have any chance of scoping and sizing your game accurately, you first need
    to define its structure. For the purpose of this book, the structure refers to
    the way different segments of the game all link together and the journey players
    take during play.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要准确界定和评估你的游戏，首先需要定义其结构。在本书中，结构指的是游戏的不同部分如何相互连接以及玩家在游戏过程中所经历的旅程。
- en: With the structure defined, it becomes much easier to divide the game into independent
    sections and assess the size, complexity, and dependencies of various parts of
    your game.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 结构确定后，将游戏划分为独立的章节并评估游戏各个部分的规模、复杂性和依赖关系变得容易得多。
- en: As a designer, you need to decide on the player's journey and the experience
    you're offering. Do you foresee a single predestined path through your game? Is
    it branching? Or perhaps you only want to provide the players with various tools
    and let them take things from there? Is the experience designed to be highly replayable,
    or is it simply a puzzle to solve or a fixed story to be told and experienced?
    Answering these questions will tell you a lot about the structure of the game
    you're making.
  id: totrans-13
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为一名设计师，你需要决定玩家的旅程和你要提供的体验。你是否预见玩家在游戏中有一条预定的路径？是分支的吗？或者你可能只想为玩家提供各种工具，让他们自行发展？体验是否设计成高度可重玩的，或者它仅仅是一个需要解决或讲述和体验的固定故事？回答这些问题将告诉你很多关于你正在制作的游戏结构的信息。
- en: The structure of games not only depends on the desired gameplay experience,
    but also on the applied business model.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的结构不仅取决于期望的游戏体验，还取决于所采用的业务模式。
- en: Video games might have found popularity in arcades, but they soon made their
    way into our homes—filling them with dedicated consoles and adding to the reasons
    for owning a PC. Most games gradually drifted away from high score-driven challenges
    and sports-like competitions, and towards more defined experiences that told a
    story or posed a challenge that can be solved, mastered, and exhausted. Limited
    replay value was not necessarily an outcome of basic game mechanics, but rather
    of a desire to raise the quality of games, control their difficulty with predefined
    challenges, and thoroughly utilize all assets and playable content.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然电子游戏在街机中找到了流行，但它们很快进入了我们的家中——填满了专用游戏机，并增加了拥有个人电脑的理由。大多数游戏逐渐从以得分驱动的挑战和类似体育的竞赛中脱离出来，转向更明确的经验，讲述故事或提出可以解决、掌握和耗尽挑战。有限的再玩价值不一定是由基本游戏机制产生的结果，而是出于提高游戏质量、通过预定义的挑战控制难度以及充分利用所有资产和可玩内容的愿望。
- en: 'Finite experiences provided by console and PC titles not only made for more
    balanced games, they were also perfectly in sync with the available business model:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台和PC游戏提供的有限体验不仅使游戏更加平衡，而且与可用的商业模式完美同步：
- en: Buy a new game
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 购买新游戏
- en: Finish the game
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成游戏
- en: Buy another game
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 购买另一款游戏
- en: In such a world, having a product with incredibly high replay value might have
    been used to generate word-of-mouth recommendations, but was not particularly
    good for long-term business. Nowadays, thanks to a highly competitive market,
    improved digital delivery methods, and the possibility of monetizing customers
    repeatedly, we have highly connected games that often offer endlessly replayable
    experiences, deep multiplayer interactions, and a huge variety of user-generated
    content. Some argue that games were better in the old days; I'd say they were
    definitely simpler to produce...
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样一个世界中，拥有极高重玩价值的游戏产品可能曾经被用来产生口碑推荐，但对长期业务并不特别有利。如今，得益于高度竞争的市场、改进的数字交付方法和客户重复盈利的可能性，我们有了高度互联的游戏，它们通常提供无限重玩体验、深入的多玩家互动和大量用户生成的内容。有些人认为，游戏在旧时代更好；我认为它们确实更容易制作...
- en: There are many ways of dissecting and classifying video games. Many products
    blur the lines with their expansive game modes and complex structures. Before
    we delve into some examples, we'll need to take a peek at some of the most common
    terms and tools used when planning the game's structure, its relationship with
    content, and the effects of individual decisions on the scope and lifetime of
    the end product.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 分解和分类视频游戏的方法有很多。许多产品通过其广泛的游戏模式和复杂结构模糊了界限。在我们深入探讨一些例子之前，我们需要了解一下在规划游戏结构、其与内容的关系以及个人决策对最终产品范围和寿命的影响时常用的最常见术语和工具。
- en: Game content
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏内容
- en: In the context of scope and structure, game content refers to games that are
    designed to be experienced (or consumed). This would include things such as game
    levels, items, characters, abilities, vehicles, achievements, weapons, missions,
    and storylines. Since the main gameplay mechanics and rules are the essential
    foundations upon which everything is built, you generally do not treat them as
    parts of the game content. Instead, you focus on anything that builds upon your
    foundations, adds value, and increases the lifetime of your game.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在范围和结构的背景下，游戏内容指的是设计来体验（或消费）的游戏。这包括游戏关卡、物品、角色、能力、车辆、成就、武器、任务和剧情线。由于主要游戏机制和规则是构建一切的基础，你通常不会将它们视为游戏内容的一部分。相反，你专注于任何建立在你的基础之上、增加价值并延长游戏寿命的内容。
- en: In the case of a simple racing title, the content would include all of the tracks,
    cars, and car parts (including cosmetic items such as paint colors and stickers
    you can put on your car), as well as the breadth of available game modes (such
    as time-trial, single-race, tournament, multiplayer head-to-head, and so on).
    Sounds, music, and the story would also be included, but these components are
    admittedly less likely to make or break the product. After all, it's safe to assume
    that many players will quickly lose interest once they master the game mechanics
    and familiarize themselves with all tracks, cars, and modes, no matter how much
    story and music we put into the product.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单的赛车游戏标题中，内容将包括所有赛道、汽车和汽车部件（包括可以涂装在汽车上的如油漆颜色和贴纸等外观物品），以及可用的游戏模式范围（如计时赛、单场赛事、锦标赛、多人对战等）。声音、音乐和故事也会包含在内，但诚然，这些组件不太可能决定产品的成败。毕竟，我们可以合理假设，一旦玩家掌握了游戏机制并熟悉了所有赛道、汽车和模式，无论我们投入多少故事和音乐，他们很快就会失去兴趣。
- en: 'A game designer is often faced with important decisions on the relationships
    between rules and content. Try to look well ahead and predict the areas that might
    change and expand. Think carefully about the following questions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计师经常面临关于规则和内容之间关系的重要决策。尽量提前考虑，预测可能发生变化和扩展的领域。仔细思考以下问题：
- en: Is everything hand-crafted by the development team? Or will you use randomization
    and/or procedural generation?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是由开发团队手工制作所有内容吗？还是将使用随机化和/或程序生成？
- en: Will you expand game content after the game is released? Which parts? How often
    and to what extent?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你计划在游戏发布后扩展游戏内容吗？哪些部分？多久一次以及到什么程度？
- en: Do you plan to use user-generated content? How will you ensure its quality?
    How will you moderate it?
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你计划使用用户生成的内容吗？你将如何确保其质量？你将如何进行监管？
- en: That's a lot to think about, so let's unpack the content-specific terminology
    and help you answer these questions!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要考虑很多，所以让我们来解释一下与内容相关的术语，并帮助你回答这些问题！
- en: Always disclose your intentions within the design specification of each game
    feature. Let's say you're working on a collection feature. Not knowing that the
    initial set of 10 collectible items will be later expanded to 100 can have very
    dangerous consequences. The entire user interface around the feature might need
    to be remade and the code for creating, storing and displaying these items rewritten.
    In a sample scenario with only 10 items, your User Interface designer may opt
    for using large, animated objects, but as soon as that number grows to 100 the
    inventory becomes hard to navigate and the game's performance suffers and all
    because the rest of the team were not prepared to support your final intentions.
    The art assets themselves might even go through an entirely different (and more
    systemic) pipeline once the aspirations for a large quantity are known. You could
    even end up using an art outsourcer or automating large parts of the creation
    and implementation processes!
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 总是在每个游戏功能的规格说明中披露你的意图。比如说，你正在制作一个收集功能。不知道最初10个可收集物品最终会扩展到100个，可能会产生非常危险的后果。围绕该功能的整个用户界面可能需要重新制作，创建、存储和显示这些物品的代码也需要重写。在一个只有10个物品的示例场景中，你的用户界面设计师可能会选择使用大型的、动态的对象，但一旦数量增长到100，库存就难以导航，游戏性能也会受到影响，所有这一切都是因为团队的其他成员没有准备好支持你的最终意图。一旦知道大量物品的愿望，艺术资产甚至可能经历一个完全不同（且更系统）的流程。你甚至可能最终使用艺术外包商或自动化创建和实施过程的大部分工作！
- en: Content burn
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 内容消耗
- en: As players interact with your game, they will not only gain mastery over game
    mechanics and systems, they will also grow more familiar with the contents of
    your game. Humans love to learn, and good learning opportunities are rewarded
    with feelings of accomplishment and satisfaction. We easily get excited by anything
    new—a fresh challenge, an untold story, an undiscovered land. While this part
    of the human condition leads to our players seeking out and enjoying our games,
    it also leads to them being bored by repetitive and unchallenging tasks or familiar
    stories. Boredom is what we try to avoid, and unfortunately for we designers,
    people are as good at learning as they are at spotting patterns. The same brain
    that can spot animals in the shapes of clouds, or a human face within a picture
    of a Martian rock, will be exposed to seeing your game—often for hours on end.
    The sole act of exposure to the same set of 3D props and art pieces used to create
    a seemingly unique dungeon will lead to a feeling of fatigue and boredom. The
    same fate befalls any content that players interact with repeatedly, including
    mechanics and systems that do not seem to hold any secrets and potential learning.
    All of this means that our players don't just enjoy the content of our games,
    they burn through it, permanently diminishing its value.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家与你的游戏互动时，他们不仅会掌握游戏机制和系统，还会更加熟悉游戏内容。人类喜欢学习，良好的学习机会会带来成就感与满足感。我们对任何新鲜事物都容易感到兴奋——一个全新的挑战、一个未讲述的故事、一个未发现的土地。虽然人类条件中的这部分会导致我们的玩家寻找并享受我们的游戏，但它也会导致他们对重复且无挑战性的任务或熟悉的故事感到无聊。无聊是我们试图避免的，不幸的是，对于设计师来说，人们在学习上和发现模式上一样擅长。正是那个能够从云朵的形状中识别动物，或者在火星岩石的图片中识别人类面孔的大脑，会长时间地接触到你的游戏。仅仅是对同一组3D道具和艺术作品的暴露，这些被用来创建看似独特的地牢，就会导致疲劳和无聊的感觉。任何玩家反复接触的内容都会遭遇同样的命运，包括那些似乎没有秘密和潜在学习机会的机制和系统。所有这些都意味着，我们的玩家不仅享受我们游戏的内容，他们还会消耗它，永久性地降低其价值。
- en: Avoiding content furnace
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 避免内容熔炉
- en: The term content furnace is often used when describing games that heavily rely
    on fresh content to sustain the interest of their players.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当描述那些高度依赖新鲜内容来维持玩家兴趣的游戏时，经常使用“内容熔炉”这个术语。
- en: There's nothing wrong with creating highly focused, hand-crafted stories, but
    unless you're consciously aiming to deliver an experience with highly limited
    replay value, you'll have to plan for ways to keep the game seem fresh for longer.
    There are several ways in which you can limit content burn (or increase the amount
    of content to burn through) and hopefully keep your players' interest for longer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创造高度专注、手工制作的故事内容并没有什么不妥，但除非你是有意识地想要提供具有高度有限重玩价值的体验，否则你将不得不计划让游戏保持新鲜感更长时间。有几种方法可以限制内容消耗（或增加消耗的内容量），并希望你的玩家对游戏保持更长时间的兴趣。
- en: Depth and possibility space
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 深度和可能性空间
- en: You have probably heard about some games being described as deep. Depth in this
    context means that a game has a lot of complex systems and interesting choices
    hidden beneath the surface. Remember hearing about games that are easy to learn
    but hard to master? This cliche refers to a perfect-world scenario in which a
    game is accessible and understandable, yet filled with intricacies that take years
    of practice and offer near limitless replay value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过一些游戏被描述为“深度的”。在这个语境中，“深度”意味着一款游戏在表面之下隐藏着许多复杂的系统和有趣的选择。你还记得那些容易学习但难以精通的游戏吗？这个陈词滥调指的是一个理想化的场景，在这个场景中，一款游戏既易于接触又易于理解，但充满了需要多年练习的复杂性和几乎无限的再玩价值。
- en: To create a game with a wide possibility space is to create a game with potentially
    endless combinations of interesting and unique scenarios to explore. Do games
    like that exist? Wouldn't they require an enormous amount of content to begin
    with? The answers are yes and no.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个可能性空间广阔的游戏，就是创建一个拥有无数有趣和独特场景组合的游戏。这样的游戏存在吗？它们不会一开始就需要大量的内容吗？答案是：是，也不是。
- en: Think of classic games such as Chess or Go, these games rely entirely on their
    elegant rule sets. These rules enable an incredibly deep set of gameplay scenarios
    that can entertain players for years. There are 20 ways in which you can open
    up a game of Chess. By the time your opponent responds, the number of possible
    board states skyrockets to 400—each being more or less a valid and meaningful
    move. These games rely not on supplying new content but on the availability of
    interesting move sets and challenging opponents to play against (you can play
    chess against an AI, but it's arguably much less fun without a human opponent).
    You can say that, through a wide possibility space provided by the rules, these
    games have avoided becoming a content furnace.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 想想像国际象棋或围棋这样的经典游戏，这些游戏完全依赖于它们优雅的规则集。这些规则使得一套极其深度的游戏场景成为可能，可以娱乐玩家数年。有20种方式可以开始一局国际象棋。当你的对手回应时，可能的棋盘状态数量激增至400——每个状态或多或少都是一个有效且有意义的变化。这些游戏不依赖于提供新内容，而是依赖于有趣的走法集合和挑战对手（你可以与人工智能下棋，但没有人类对手可能乐趣较少）。可以说，通过规则提供的广阔可能性空间，这些游戏避免了成为内容熔炉。
- en: 'Does that translate into modern video games? Yes, it does! At the time of writing
    of this book, I have amassed over 2,000 hours of playtime in DOTA2, Valve''s famous
    MOBA (multiplayer online battle arena), not to mention several years spent playing
    League of Legends beforehand. In these games, the level design stays largely fixed.
    It becomes an unchanging avenue for the moment-to-moment displays of skill, short-term
    decisions, and long-term strategy. These are games that achieve replayability
    via deep choices and a wide possibility space, an outcome of:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否适用于现代电子游戏？是的，它确实适用！在撰写这本书的时候，我在Valve公司著名的MOBA（多人在线战斗竞技场）DOTA2中积累了超过2,000小时的游玩时间，更不用说之前花在《英雄联盟》上的几年时间了。在这些游戏中，关卡设计基本上保持不变。它成为了一条不变的途径，用于展示技能、短期决策和长期策略。这些游戏通过深入的选择和广阔的可能性空间实现了可玩性，这是以下因素的产物：
- en: 'Interconnected content that creates millions of combinations:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联的内容，创造出数百万种组合：
- en: A large number of playable characters with unique abilities. Given that these
    games are played in teams of five, the number of possible team combinations is
    enormous.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量具有独特能力的可玩角色。鉴于这些游戏是以五人团队进行，可能的团队组合数量是巨大的。
- en: A large number of items to purchase in-game that can have a meaningful impact
    on your character's (and your team's) performance.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中可以购买的大量物品，这些物品可以对你的角色（以及你的团队）的表现产生重大影响。
- en: 'Rules and mechanics that test a variety of skills:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试各种技能的规则和机制：
- en: Physical skill tests such as timing, aiming, and reaction times
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如计时、瞄准和反应时间等体能技能测试
- en: Tactics and short-term decision-making, including environmental awareness, item
    and skill development decisions and enemy movement prediction
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 战术和短期决策，包括环境意识、物品和技能发展决策以及敌方移动预测
- en: The long-term strategy, often based on spotting play-patterns and predicting
    enemy team behavior
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长期策略，通常基于发现游戏模式并预测敌方团队的行为
- en: Communication, coordination, and leadership
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交流、协调和领导能力
- en: The challenge and satisfaction of playing against human opponents. These games
    wouldn't be as engaging and popular if they were played against AI opponents.
    It's incredibly difficult to create effective but seemingly natural AI opponents,
    and even harder to have them work together and make interesting choices.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与人类对手对抗的挑战和满足感。如果这些游戏是对抗人工智能对手，它们就不会那么吸引人和受欢迎。创建有效但看似自然的AI对手非常困难，更不用说让他们协同工作并做出有趣的选择了。
- en: An ever-changing meta—the way in which the game is being played by the community
    evolves with the game itself. If a certain strategy becomes dominant, the community
    naturally evolves by learning to expect and counter it.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续变化的元游戏——社区玩游戏的方式随着游戏本身的发展而演变。如果某种策略变得占主导地位，社区自然会通过学习预期和对抗它来演变。
- en: 'I am just scratching the surface of what makes these two games replayable,
    though now you may be wondering do I need 100 items and 100 characters to create
    a replayable game? The short answer is no, you don''t! The slightly longer answer
    is, look at games such as Rocket League—a game that could be described as football
    played with cars. The rules and victory conditions are simple and elegant: get
    the ball to the enemy goal by hitting it with your car. The amount of content
    required for this gameplay to work is impressively small—one arena, one car, a
    boost pad, and a ball. The game is played in small teams (from 2 to 4 players
    per team), where each player controls a single car that drives in a familiar way,
    but players can also jump and steer their car in the air and use a rocket boost
    to propel themselves. Hit the ball with your car and try to get it to the opponent''s
    goal and… that''s it! Simple, right? Yet, for many, the replayability is through
    the roof! The way Rocket League achieved its elusive easy-to-learn, hard-to-master
    status is all down to the simplicity of the rules paired with the incredibly high
    skill ceiling of precisely controlling the movements of your car in relation to
    the ball and each of the surrounding players. It''s a highly kinetic game where
    great timing and team play are absolutely essential.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是触及了让这两款游戏可重玩的部分，尽管现在你可能想知道我是否需要100个物品和100个角色来创建一个可重玩的游戏？简短的答案是，不需要！稍微长一点的答案是，看看像火箭联盟这样的游戏——一款可以用汽车踢足球的游戏。规则和胜利条件简单而优雅：用你的汽车击球，将球送入敌方球门。为了使这种游戏玩法有效，所需的内容量令人印象深刻——一个竞技场，一辆汽车，一个加速垫和一个球。游戏以小队形式进行（每队2到4名玩家），每个玩家控制一辆汽车，以熟悉的方式驾驶，但玩家也可以在空中跳跃和操控汽车，并使用火箭推进力来推动自己。用你的汽车击球，并尝试将球送入对手的球门……就这样！简单，对吧？然而，对于许多人来说，可重玩性极高！火箭联盟实现其难以捉摸的易于学习、难以精通的地位，完全归功于规则的简单性以及精确控制汽车相对于球和周围每个玩家的动作的极高技能上限。这是一款高度动态的游戏，精准的时机和团队协作至关重要。
- en: Even though the human factor can hugely help in providing fresh challenges,
    depth and a wide possibility space are not exclusive to multiplayer arena games.
    Think of strategy games such as Sid Meier's Civilization and the Total War series,
    or simulations such as SimCity and Dwarf Fortress. One could argue that even if
    you removed most of the visual assets and reduced the amount of content, the effect
    of interactions between the player and the systems powering the game could still
    provide dozens of hours of fun, filled with interesting decisions and engaging
    outcomes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管人类因素可以在提供新鲜挑战、深度和广阔的可能性空间方面发挥巨大作用，但这些并非仅限于多人竞技场游戏。想想像席德·梅尔（Sid Meier）的文明和全面战争系列这样的策略游戏，或者像模拟城市和矮人要塞这样的模拟游戏。可以争论说，即使移除大部分视觉资产并减少内容量，玩家与游戏背后系统之间的交互效果仍然可以提供数十小时的乐趣，充满了有趣的决策和引人入胜的结果。
- en: Creating deep games is a very difficult craft and can take more time and expertize
    than crafting heaps of content surrounded by more shallow mechanics. As you increase
    the number of combinations and possibilities within your core gameplay mechanics,
    you expose your systems to a range of extreme (and potentially game-breaking)
    scenarios. Before you add any new rule or feature in the hopes of extending the
    game's lifespan/depth/complexity, your team will need to make a set of important
    decisions. Widening the possibility space can (and almost surely will) bring currently
    unforeseen consequences. Will you have the time to explore these new options?
    How certain are you that the new addition will be a positive one and make the
    game more fun to play for longer? Would your time be better spent by simply adding
    more consumable content to the already working systems?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 创建深度的游戏是一项非常困难的技艺，可能需要更多的时间和专业知识，比围绕更浅显的机制制作大量内容要花费更多。随着你在核心游戏机制中增加组合和可能性的数量，你将你的系统暴露于一系列极端（并且可能破坏游戏）的情景中。在你希望延长游戏寿命/深度/复杂性的希望中添加任何新规则或功能之前，你的团队需要做出一系列重要的决定。拓宽可能性空间可能会（并且几乎肯定会的）带来目前无法预见的结果。你是否有时间探索这些新选项？你对新增加的内容是否会带来积极影响并使游戏更具趣味性有几分把握？你是否应该将时间花在简单地向现有系统中添加更多可消耗内容上？
- en: We’ll delve into ways of creating engaging mechanics and broadening your possibility
    space in later sections of the book; for now, let's look at other ways of limiting
    your content burn!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后续章节中，我们将深入探讨创造引人入胜的机制和拓宽你的可能性空间的方法；现在，让我们看看限制内容消耗的其他方法！
- en: Randomization and procedural generation
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随机化和程序生成
- en: Randomization and procedural generation are two interconnected terms. While
    randomization is mainly concerned with the application of chance-based mechanics
    (think card shuffling, critical hit chance, and randomized loot drops), procedural
    generation is focused on creating new content based on carefully crafted rules.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 随机化和程序生成是两个相互关联的术语。虽然随机化主要关注基于机会的机制的应用（例如洗牌、暴击几率和随机掉落物品），但程序生成则侧重于根据精心制定的规则创建新内容。
- en: Let’s focus on looking at the effects of randomization first!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先关注一下随机化带来的影响！
- en: To be effective at prolonging your game's lifespan, randomization has to be
    constrained and applied in a careful, deliberate way. If done right, it can add
    thrills and make the game slightly less predictable, without undermining the player's
    ability to plan ahead. Do it badly and you'll end up with an unplayable mess where
    player actions seem to have little influence over the end result and it's impossible
    to predict and prepare for what's going to happen next.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效地延长游戏寿命，随机化必须受到限制，并以谨慎、深思熟虑的方式进行应用。如果做得正确，它可以增加刺激感，使游戏略少可预测性，而不会削弱玩家提前规划的能力。如果做得不好，你最终会得到一个无法玩的游戏混乱，其中玩家的行动似乎对最终结果影响甚微，而且无法预测和准备接下来会发生什么。
- en: Anything that becomes randomized is at risk of making the game rules less understandable,
    as well as breaking the balance of the game (making it either too easy or impossible
    to win). Moreover, due to negativity bias, most humans pay significantly more
    attention to negative outcomes of randomization than to positive ones. This means
    that fully randomized effects can lead to players feeling cheated by the game
    and losing the sense of agency.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 任何变得随机化的内容都有可能使游戏规则变得难以理解，并打破游戏的平衡（使得游戏要么过于简单，要么无法获胜）。此外，由于负面偏见，大多数人更关注随机化的负面结果，而不是正面结果。这意味着完全随机的效果可能导致玩家感觉被游戏欺骗，并失去自主感。
- en: 'A fellow designer, Keith Burgun, makes interesting points on randomness that
    are worth sharing at [`https://www.youtube.com/watch?v=2qfFEP_-LkI`](https://www.youtube.com/watch?v=2qfFEP_-LkI).
    Keith distinguishes between two types of randomness: input randomness and output
    randomness. Input randomness is described as one that informs player’s decisions,
    for example, map generation. Players cannot affect or predict it in advance, but
    will able to make decisions based on what they''ve been served. On the other hand,
    we have output randomness, which defines the outcome of a player''s actions, for
    example, a die roll that determines whether the action (which you''ve already
    committed to) was successful or not. Be very careful when you inject your game
    with output randomness! The feedback on the player''s actions can become confusing
    and may limit satisfaction from performing good decisions, as well as the opportunity
    to learn from one''s mistakes. A valid move can be met with a failed result, while
    a mistake on the player''s part could yield a positive outcome.'
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 同事设计师基思·伯格恩（Keith Burgun）对随机性的有趣观点值得分享，请参阅[https://www.youtube.com/watch?v=2qfFEP_-LkI](https://www.youtube.com/watch?v=2qfFEP_-LkI)。基思区分了两种类型的随机性：输入随机性和输出随机性。输入随机性被描述为一种可以告知玩家决策的随机性，例如地图生成。玩家无法事先影响或预测它，但将能够根据他们所获得的信息做出决策。另一方面，我们有输出随机性，它定义了玩家行动的结果，例如掷骰子来决定你已承诺的行动是否成功。在向你的游戏中注入输出随机性时要非常小心！玩家对行动的反馈可能会变得混乱，并可能限制从良好决策中获得满足感的机会，以及从错误中学习的机会。一个有效的移动可能会遇到失败的结果，而玩家的错误可能会带来积极的结果。
- en: There are many great examples of using randomization. Some games use it to prolong
    the lifespan of the game's content; others put it at the heart of their game mechanics.
    Card games such as Magic The Gathering or Hearthstone would lose most of their
    appeal if the decks always produced the cards in a predefined sequence. As for
    Hearthstone itself, the designers have added a wide selection of cards that provide
    randomized effects after they're played – a great example of using the aforementioned
    output randomness. It's a polarizing set of cards that can result in both moments
    of great elevation (Oh my, I got so lucky!), as well as ones of great frustration
    (This? Really? I quit!). Unless you can provide your players with a clear indication
    of risk and uncertainty, you should shy away from using output randomness in key
    areas of the game.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用随机化的例子有很多。有些游戏使用它来延长游戏内容的寿命；其他游戏将其置于其游戏机制的核心。像《万智牌》或《炉石传说》这样的卡牌游戏，如果牌组总是按照预定义的顺序产生卡片，就会失去大部分吸引力。至于《炉石传说》本身，设计师们增加了一大批卡片，这些卡片在玩过之后会提供随机效果——这是使用上述输出随机性的一个绝佳例子。这是一套具有争议的卡片，它可以导致既令人兴奋（哦我的，我真是太幸运了！）的时刻，也可以导致令人沮丧（这？真的？我放弃了！）的时刻。除非你能向你的玩家提供对风险和不确定性的明确指示，否则你应该避免在游戏的关键区域使用输出随机性。
- en: Another great use of randomization is within reward systems. In games such as
    World of Warcraft, groups of players would often replay the same dungeon several
    times in order to get a chance at the desired item. An extreme version of reward
    randomization is found in a game that uses a Gacha-based (Gacha, from the Japanese
    word gachapon, refers to capsules sold in vending machines and containing random
    toys inside) business model. In such games, the most important items in the game
    that gate player progression are stashed away in randomized loot boxes. It's important
    to know that not every implementation of gacha rewards is the same (and therefore
    always fully randomized). A so-called box-gacha refers to a reward set with random
    chances but no duplicate rewards. Imagine a box with a strictly defined set of
    10 items. Even if one of these items has a tiny 0.1% chance of dropping, you can
    be sure that you'll get the item within 10 tries. The worst case scenario is that
    you'll need to pull out 9 other items first.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 随机化在奖励系统中的另一个伟大用途。在诸如《魔兽世界》这样的游戏中，玩家组通常会多次重玩同一个地下城，以获得获得期望物品的机会。在一种基于Gacha（Gacha，源自日语单词gachapon，指在自动售货机中出售并包含随机玩具的胶囊）商业模式的游戏中，可以找到奖励随机化的极端版本。在这样的游戏中，游戏中最重要的物品，那些阻碍玩家进步的物品，都被藏在了随机宝箱中。重要的是要知道，并非所有Gacha奖励的实现方式都相同（因此总是完全随机）。所谓的箱式Gacha指的是具有随机概率但没有重复奖励的奖励集。想象一个严格定义了10个物品的盒子。即使其中一件物品有极小的0.1%的掉落概率，你也可以确信你将在10次尝试内得到这件物品。最坏的情况是你需要先抽出9件其他物品。
- en: If you rely on reward randomization, make sure you carefully prepare to handle
    filler content and duplicate rewards—there's nothing more demotivating than getting
    a useless reward or no reward at all. In case of duplicates of unique items, perhaps
    you can convert them into useful resources? More on this type of rewarding and
    Gacha-based business model can be found in [`Chapter 15`](index_split_443.html#filepos1012825),
    Games As a Service.
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你依赖于奖励随机化，确保你仔细准备处理填充内容和重复奖励——没有什么比得到一个无用的奖励或根本得不到奖励更令人泄气的了。在独特物品重复的情况下，也许你可以将它们转换成有用的资源？更多关于这种奖励和基于Gacha的商业模式的内容，可以在[第15章](index_split_443.html#filepos1012825)《游戏即服务》中找到。
- en: An outstanding example of smartly utilizing randomization can be observed in
    Valve's 2008 first-person shooter Left 4 Dead. In Left 4 Dead, four players work
    together across one of several campaigns. A campaign is a predefined string of
    levels, and each level has a mostly linear path, with a fixed entrance and exit.
    The game offers just a handful of weapons and items, a few special enemy types,
    and no differences between characters. On first glance, it does not seem like
    a hugely replayable game. However, the makers of the game made some very smart
    design decisions…
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Valve的2008年第一人称射击游戏《求生之路》中，我们可以观察到巧妙利用随机化的杰出例子。在《求生之路》中，四名玩家在几个战役中的一个中进行合作。战役是一系列预定义的水平，每个水平都有一条主要线性的路径，有固定的入口和出口。游戏只提供少量武器和物品，几种特殊的敌人类型，以及角色之间没有差异。乍一看，这似乎不是一个可以大量重玩的游戏。然而，游戏的制作者做出了一些非常明智的设计决策……
- en: 'Left 4 Dead features an AI Director. The Director''s role is to provide the
    survivors (players) with a varied and exciting experience that matches the chosen
    difficulty level. To do that, the director will track a variety of attributes
    for each player such as health, state, skill level (accuracy, kills, and so on)
    and position (are they in a group or alone, ahead or behind). Based on this information,
    the AI Director is capable of making each play-through unique through a variety
    of gameplay adjustments, the most prominent being:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 《求生之路》有一个AI导演。导演的角色是为幸存者（玩家）提供与所选难度级别相匹配的多样化和令人兴奋的体验。为此，导演将跟踪每个玩家的各种属性，如健康、状态、技能水平（准确度、击杀数等）和位置（他们是在一组中还是单独一人，是领先还是落后）。基于这些信息，AI导演能够通过各种游戏调整使每次游玩都独一无二，其中最突出的是：
- en: Spawning hordes of common infected (think fast-moving zombies). The director
    picks one of the available spawn zones. The quantity and frequency all operate
    within set limits and are decided by the director.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产生大量常见的感染者（想象一下快速移动的僵尸）。导演选择一个可用的生成区域。数量和频率都在设定的限制范围内，由导演决定。
- en: Spawning special enemies. Types and locations vary and there are limits as to
    how many special foes can be alive at a time. Some very difficult foes are set
    to only spawn a set amount of times per map, in one of a few predefined locations,
    no matter the state of the survivors.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成特殊敌人。类型和位置各不相同，同时存在一次最多能有多少特殊敌人存活的时间限制。一些非常难对付的敌人被设置为在地图上仅生成一定次数，在几个预定义的位置之一，无论幸存者的状态如何。
- en: Spawning weapons, health, and ammo in one of several predefined locations. Again,
    there are upper and lower limits, but if your team is hurt they are much more
    likely to find life-saving medkits rather than temporary painkillers.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在几个预定义的位置之一生成武器、健康和弹药。同样，存在上限和下限，但如果你的团队受伤，他们更有可能找到救命的医疗包，而不是临时止痛药。
- en: The Director also takes care of much more subtle features, such as triggering
    weather effects or dynamic dialogs between survivors (these often refer to their
    current location or the enemies they face).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 导演还负责许多更微妙的功能，例如触发天气效果或在幸存者之间的动态对话（这些通常涉及他们的当前位置或面对的敌人）。
- en: Since the AI Director plans some elements of the level before the game starts,
    you could say it dabbles in procedural generation, but the true powers of using
    procedural generation to create new content go way beyond that!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于AI导演在游戏开始前计划了一些关卡元素，所以可以说它在程序生成方面有所涉猎，但使用程序生成来创建新内容的真正力量远远超出了这一点！
- en: We can delve into the fully procedural worlds of Minecraft and Terraria, as
    well as No Man's Sky, which not only assembles an entire universe full of planets
    but also populates it with living creatures! It's important to acknowledge that
    such extensive procedural generation is an art form in itself, and requires immense
    technical expertize.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以深入研究《我的世界》、《泰拉瑞亚》以及《无人深空》的完全程序化世界，后者不仅组装了一个充满行星的完整宇宙，而且还充满了生物！重要的是要承认，如此广泛的过程生成本身就是一种艺术形式，需要巨大的技术专长。
- en: On the less extreme (and more controllable) end, we've got the cult action-RPG
    Diablo, an RPG shooter Borderlands, and countless modern examples of Roguelikes
    (Enter the Gungeon, Nuclear Throne, and Rogue Legacy to name a few). Looking a
    bit closer at Diablo, it uses procedural generation to create its special monsters,
    magical items, and even assemble dungeon layouts, but the designers chose to retain
    a much higher level of control over the most important aspects of the game. The
    best gear in Diablo, all of the bosses, the overall story, objectives, and order
    of dungeons and environments are all handcrafted and pre-planned.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在不那么极端（且更可控）的一端，我们有 cult 动作角色扮演游戏《暗黑破坏神》，一款角色扮演射击游戏《边境之地》，以及无数现代的《地牢探险》游戏示例（例如《地牢入侵者》、《核塔》和《
    rogue legacy》等）。更仔细地看看《暗黑破坏神》，它使用程序生成来创建其特殊怪物、魔法物品，甚至组装地牢布局，但设计师选择在游戏最重要的方面保持更高的控制水平。在《暗黑破坏神》中，最好的装备、所有的Boss、整体故事、目标和地牢及环境的顺序都是手工制作和预先计划的。
- en: When designing your game, try to find parts of it that would naturally benefit
    from randomization and procedural generation, but remember there are tradeoffs!
    Writing good procedural generation code will take a lot of time (and it will take
    even longer to test and fine-tune it), and this can have a huge impact on the
    scope of the game. Moreover, procedurally generated worlds/items/stories rarely
    feel as special as handcrafted ones. There's a lot you can do by simply randomizing
    a few elements rather than creating them from scratch. If your game requires a
    high quantity of content and you need to rely on procedural generation, think
    of ways in which you can maintain a level of control over the critical parts of
    it.
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在设计你的游戏时，尝试找到其中自然受益于随机化和程序生成的部分，但请记住，这是有代价的！编写好的程序生成代码需要大量时间（测试和微调它将花费更长的时间），这将对游戏的范围产生巨大影响。此外，程序生成的世界/物品/故事很少像手工制作的那样特别。通过简单地随机化几个元素，而不是从头开始创建，你可以做很多事情。如果你的游戏需要大量内容并且你需要依赖程序生成，那么考虑一下你如何保持对其关键部分的控制。
- en: User-generated content
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用户生成内容
- en: Do you want a lot of content but don't want it to come from a soulless algorithm?
    Encourage your players to create and provide new content for each other!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要大量内容，但又不想这些内容来自一个无情的算法？鼓励你的玩家相互创建和提供新的内容！
- en: There are many ways in which you can do this. In the past, PC games have often
    come with a set of map editors and content creation tools some of the best maps
    in games such as StarCraft and Heroes of Might and Magic were made by fans. Empowering
    and supporting an active modding community can also be a valid solution for prolonging
    your game's lifespan and appeal. However, it can also be very time-consuming and
    expensive to run, support, and moderate. Therefore, it makes the most sense for
    big, premium games such as Fallout and Elder Scrolls.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以实现这一点。在过去，PC游戏通常附带一套地图编辑器和内容创建工具，一些游戏中最好的地图，如《星际争霸》和《魔法门之英雄无敌》都是由粉丝制作的。赋予并支持一个活跃的模组社区也可以是延长你的游戏寿命和吸引力的有效解决方案。然而，运营、支持和监管它可能也非常耗时且昂贵。因此，对于像《辐射》和《上古卷轴》这样的大型、高端游戏来说，这最有意义。
- en: Nowadays, the online architecture can enable player generated content to be
    immediately and seamlessly integrated into the core experience. We've got Super
    Mario Maker featuring thousands of great maps and the likes of Little Big Planet
    that let players create and share entirely new types of gameplay experiences that
    can play nothing like the main game. However, the quality of such free-flowing
    player creations is often questionable. Without proper moderation tools, as well
    as ways of promoting quality content, things can go south pretty quickly. As much
    as you'd want things to run themselves, such features will surely require constant
    oversight and inflate your game's scope significantly.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在线架构可以使玩家生成的内容立即无缝地集成到核心体验中。我们有了拥有数千张优秀地图的《超级马里奥制造者》，还有像《小小大星球》这样的游戏，让玩家能够创建和分享全新的游戏体验，这些体验与主游戏截然不同。然而，这种自由流动的玩家创作的质量往往令人怀疑。如果没有适当的监管工具以及推广优质内容的方法，事情可能会很快变得糟糕。尽管你希望事情自行运转，但这样的功能无疑将需要持续的监督，并显著扩大你的游戏范围。
- en: Maps and mods are great! Unfortunately, not every player wants to spend hours
    crafting content for others. Fortunately, there are ways in which you could make
    your players produce high-quality content unintentionally! All you need is to
    turn that content creation into a significant part of your game. In games like
    the mobile smash-hit Clash of Clans, player generated maps are used front and
    center for everything (apart from a relatively short and insignificant single-player
    campaign). The game has dominated what we now call a build and battle genre, a
    mix of a real-time strategy and a tower defense game. In these games, players
    build and upgrade their bases (carefully placing their defenses to protect themselves),
    recruit troops, and attack other players to take their resources. Incentivizing
    players to protect their resources drives each and every player to create a new,
    highly playable map for everyone else. Moderation impact is minimal for the developer,
    and since players are ranked and match-made against each other, the difficulty
    is properly maintained.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 地图和模组很棒！不幸的是，并不是每个玩家都愿意花几个小时为他人制作内容。幸运的是，有方法可以让你的玩家无意中制作出高质量的内容！你只需要将内容创作变成你游戏的一个重要部分。在像《部落冲突》这样的移动游戏爆款中，玩家生成的地图被用于所有主要功能（除了相对较短且不重要的单人战役）。这款游戏主导了我们现在所说的建筑和战斗类型，它结合了即时战略和塔防游戏。在这些游戏中，玩家建造和升级他们的基地（精心放置防御以保护自己），招募部队，攻击其他玩家以夺取他们的资源。激励玩家保护他们的资源驱使每个玩家为其他人创建一个全新的、高度可玩的新地图。对开发者来说，监管影响微乎其微，并且由于玩家被排名并对阵，难度得到了适当的维持。
- en: Managing content treadmill
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 内容管理跑酷
- en: Teams working on live games often have to resort to adding new content in order
    to maintain their current audience engaged. We sometimes call such situations
    as being stuck on a content treadmill—if you stop putting out new content, then
    you run the risk of losing your players.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在实时游戏中工作的团队往往不得不添加新内容，以保持当前观众的关注。我们有时将这种情况称为陷入内容管理跑酷——如果你停止发布新内容，那么你就有失去玩家的风险。
- en: 'There are many ways of addressing such situations and it''s often up to the
    whole team to come up with solutions of the streamlining production process or
    lowering the reliance on new content. Still, this is a practical book and we aim
    to provide some practical ideas, such as:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以应对这种情况，通常需要整个团队共同提出解决方案，以简化生产流程或减少对新内容的依赖。尽管如此，这是一本实用的书，我们旨在提供一些实用的想法，例如：
- en: 'Remixing: Content does not need to be entirely new to still feel fresh. Mirrored
    tracks in racing games are a great example. Another one would be using old bosses
    as late-game enemies—players only fought them once, why not give them a second
    life? Recoloring and resizing your assets can also be a very powerful tool!'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重混音：内容不必完全新颖，仍然可以感觉新鲜。赛车游戏中的镜像赛道就是一个很好的例子。另一个例子是使用旧Boss作为后期敌人——玩家只战斗过一次，为什么不给他们第二次生命呢？重新着色和调整你的资产也可以是一个非常强大的工具！
- en: 'Replaying: Systems such as prestige levels (reset your progression in exchange
    for a token or badge of elite status that can be seen and highly admired by other
    players) and New Game+ (replay the game at a higher difficulty but keep your progress)
    are both great ways of giving your players an excuse to keep playing once they
    reach the end.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新游玩：如声望等级（以徽章或精英状态象征物换取重置进度）和“新游戏+”系统（在更高难度下重新游玩游戏但保留进度）都是让玩家在到达游戏终点后继续游玩的好方法！
- en: 'Resurfacing: Why not encourage players to play with content they long grew
    out of? Special objectives and challenges or game modes/custom rule sets can do
    just that!'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重现：为什么不鼓励玩家使用他们早已厌倦的内容进行游戏呢？特殊目标和挑战或游戏模式/自定义规则集可以做到这一点！
- en: 'Increasing depth or altering rules: Another way to answer the need for content
    is to provide more variation outside the content, giving it new life by limiting
    the repetitiveness of the main game loop. Think of The Arena mode in Hearthstone;
    it uses exactly the same cards as the main game but allows players to draw randomized
    cards and create custom decks that always feel fresh and unique. For many players,
    this mode has prolonged the lifespan of the game greatly!'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加深度或改变规则：满足内容需求的另一种方式是在内容之外提供更多变化，通过限制主要游戏循环的重复性来赋予其新的生命力。以《炉石传说》中的竞技场模式为例；它使用与主游戏完全相同的卡牌，但允许玩家抽取随机卡牌并创建始终感觉新鲜独特的自定义牌组。对于许多玩家来说，这种模式大大延长了游戏的生命周期！
- en: 'Improving your pipeline: Sometimes it''s okay to be stuck on a treadmill, as
    long as you can identify the bottleneck and invest in tools or outsourcing that
    will make the team’s life more pleasant.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优化你的流程：有时候，只要你能够识别瓶颈并投资于工具或外包，让团队的生活更加愉快，那么陷入困境也是可以接受的。
- en: Common game structures
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 常见游戏结构
- en: Games are a medium for interaction and storytelling. While both of these elements
    often go hand in hand, there are times in which the story crafted by the developer
    and the player's personal story (as told by their actions and experiences) differ
    widely. Our medium is great at creating interactive systems and letting players
    loose within them, yet the stories we tell in our games often fall back onto the
    tropes, conventions, and static structures found in books or movies.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏是互动和叙事的媒介。虽然这两个元素通常相互配合，但有时开发者构建的故事和玩家的个人故事（通过他们的行动和经历讲述）会有很大的差异。我们的媒介擅长创造交互式系统并让玩家在其中自由探索，但我们游戏中的故事往往依赖于书籍或电影中发现的陈词滥调、传统和静态结构。
- en: While it's possible to implement heavily interactive storylines with dozens
    of branching paths, and even systems that create and assemble the story procedurally,
    the same development effort is much better placed with core gameplay mechanics.
    After all, everyone will interact with gameplay systems, but only a small minority
    will explore all story branches. This is why in most cases, our games can provide
    a lot more freedom in their gameplay than in their storytelling.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以实施具有数十个分支路径的密集交互式剧情，甚至可以创建和组装故事的程序化系统，但同样的开发努力最好放在核心游戏玩法机制上。毕竟，每个人都会与游戏系统互动，但只有少数人将探索所有故事分支。这就是为什么在大多数情况下，我们的游戏在游戏玩法上可以提供比在叙事上更多的自由度。
- en: Let's look at the possible structures for our games, noting that in many cases,
    the gameplay and storytelling can either go hand in hand or diverge widely. In
    cases like that, it's often best to first focus your efforts on the more interactive
    elements of the game (as they are usually the most difficult to iterate and redesign).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们游戏可能的架构，需要注意的是，在许多情况下，游戏玩法和叙事可以相互配合，也可以广泛分歧。在这种情况下，通常最好首先专注于游戏更互动的元素（因为它们通常是迭代和重新设计最困难的），
- en: Linear
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 线性
- en: 'Linear games are likely the closest our medium can get to traditional, non-interactive
    media such as books or movies. The experience is pre-planned, carefully paced,
    and delivered in a fixed sequence, with little room for sweeping decisions or
    branching paths:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 线性游戏可能是我们媒介能够接近传统、非交互式媒体（如书籍或电影）的最接近方式。体验是预先计划的，节奏控制得很好，以固定的顺序交付，几乎没有进行重大决策或分支路径的空间：
- en: '![](img/00180.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00180.jpg)'
- en: A simplified portrayal of the player journey in a linear game
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 线性游戏中玩家旅程的简化描述
- en: The biggest and most obvious benefit of making your games linear is having the
    ultimate level of control over the combined storytelling and gameplay experience.
    If you know how to exert such control, you can grab your audience and take them
    through an experience they will never forget.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的游戏设计成线性游戏的最大和最明显的益处是能够对结合叙事和游戏体验拥有最高程度的控制。如果你知道如何行使这种控制，你就能抓住你的观众，并带领他们经历一段他们永远不会忘记的体验。
- en: Nowadays, games with a fully linear gameplay and story are hard to find. Even
    the most restrictive ones often offer a few decision points, alternative solutions,
    optional paths, multiple endings, and at least a small degree of freedom in approaching
    the gameplay scenarios. A few examples of games I'd consider very linear (across
    the years, platforms, and genres) include Super Mario Brothers, Uncharted, Heavy
    Rain, Portal, and Inside.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，完全线性的游戏和故事很难找到。即使是限制性最强的游戏，通常也会提供一些决策点、替代解决方案、可选路径、多个结局，以及至少在一定程度上自由地接近游戏场景。我考虑的非常线性的游戏（跨越多年、平台和类型）的例子包括超级马里奥兄弟、无主之地、暴雨、传送门和
    Inside。
- en: If you're working on a linear game, you'll need to keep the highest standards
    of quality across the entirety of the game, possibly reworking whole sections
    of the game repeatedly. In linear games, pacing and balancing are much more controllable,
    but also even more important. Your players cannot ignore the parts they don't
    like, or easily distract themselves by doing side missions or exploring other
    parts of the game—if you fail to keep their interest (or get them stuck) you put
    them at great risk of leaving, permanently.
  id: totrans-97
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你正在制作线性游戏，你需要在整个游戏过程中保持最高的质量标准，可能需要反复重做游戏的部分内容。在线性游戏中，节奏和平衡更容易控制，但也更加重要。你的玩家不能忽视他们不喜欢的地方，或者通过执行支线任务或探索游戏的其它部分来轻易地分散注意力——如果你无法保持他们的兴趣（或让他们陷入困境），你将使他们面临极大的风险，可能会永久离开。
- en: Structured nonlinear
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化非线性
- en: 'Nonlinear games take players off the rails and take advantage of the interactive
    nature of games - players no longer have to follow a single predefined path from
    start to finish. In such titles, players are asked to make meaningful choices
    and have a sense of agency in either gameplay, storyline, or both. However, designers
    of structured nonlinear games still retain a level of oversight and control over
    the gameplay experience. They prepare for a series of possible gameplay or storytelling
    scenarios and prepare the solutions and endings. The final result is a carefully
    balanced and structured experience that gives a level of freedom to the players,
    increasing replayability and allowing players to play in a way they enjoy the
    most:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 非线性游戏将玩家从固定轨道上拉离，并利用游戏的交互性——玩家不再必须从开始到结束遵循一个单一的预定义路径。在这样的游戏中，玩家被要求做出有意义的抉择，并在游戏玩法、故事情节或两者之间拥有一种自主感。然而，结构化非线性游戏的设计师仍然保留对游戏体验的一定程度的监督和控制。他们为一系列可能的游戏或叙事场景做好准备，并准备解决方案和结局。最终结果是精心平衡和结构化的体验，为玩家提供了一定程度的自由度，增加了可玩性，并允许玩家以他们最喜欢的方式玩游戏：
- en: '![](img/00167.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00167.jpg)'
- en: Nonlinear games with carefully planned branches, side paths, and multiple endings
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 经过精心规划的分支、支线路径和多个结局的非线性游戏
- en: There are obvious drawbacks and challenges with nonlinear games. The alternative
    paths should be as fun and rewarding as the main one, as the moment you encourage
    certain play styles is the moment you take away the choice and force many players
    to play the game in the optimal (but potentially less fun) way. Your scope will
    also grow substantially, especially if hand-crafted stories branch in multiple
    directions. You'll also create a lot of potentially time-consuming content that
    most players will never explore, so take that into consideration if you plan to
    put the coolest bits of the game behind an unlikely branch.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 非线性游戏显然存在明显的缺点和挑战。替代路径应该和主线一样有趣和有回报，因为当你鼓励某些玩法风格时，你就是在剥夺选择权，并迫使许多玩家以最优（但可能不那么有趣）的方式玩游戏。你的范围也会大幅增加，特别是如果手工制作的故事在多个方向上分支。你还会创建大量可能耗时耗力的内容，而大多数玩家可能永远不会探索，所以如果你计划将游戏中最酷的部分放在不太可能的分支后面，请考虑这一点。
- en: It's much more manageable to provide a level of expression in your gameplay
    while keeping the story going in a roughly similar direction. You can then rely
    on the player's play style and choices, and reflect them either at the end of
    the game or throughout it (but not in a way that derails the main branch of the
    story).
  id: totrans-103
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在保持故事大致方向的同时，在游戏中提供一定程度的表达是更加可控的。然后你可以依靠玩家的游戏风格和选择，在游戏结束或游戏过程中（但不是以偏离故事主线的方式）反映出来。
- en: In games such as Hitman, Thief, Deus Ex, or Dark Souls, players are presented
    with a great degree of freedom in the way they approach gameplay situations, but
    ultimately the structure follows an order that can be predicted and planned for.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在《杀手》、《盗贼》、《德军总部》或《黑暗之魂》等游戏中，玩家在处理游戏情境的方式上拥有很大的自由度，但最终的结构遵循一个可以预测和计划的模式。
- en: Open nonlinear
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 开放非线性
- en: Some nonlinear games open up their structure and let the players loose. They
    provide a very wide possibility space and make it nearly impossible to predict
    how the player will reach the end. Such titles still come with a defined set of
    winning and losing states, and often a carefully crafted main storyline, but any
    attempts at plotting the player journey are futile.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一些非线性游戏开放其结构，让玩家自由探索。它们提供了一个非常广阔的可能性空间，几乎不可能预测玩家将如何达到结局。这些游戏仍然包含一套明确的胜利和失败状态，以及通常精心制作的主线剧情，但任何试图规划玩家旅程的尝试都是徒劳的。
- en: 'In such games, players are set free to roam and explore the content and gameplay
    systems, making each playthrough unique. Some series, such as Fallout, Elder Scrolls,
    Just Cause, or Grand Theft Auto, do it by providing an open world and filling
    it full of optional activities and missions that can immerse their players for
    hundreds of hours. Others, such as Civilization and the Total War series, make
    their players miss on sleep by offering deep, interconnected systems and simulations
    with countless moving parts. Another worthy example would be the interactive fiction
    80 Days, which is a unique take on an open nonlinear game with amazing, highly
    adaptive storytelling and a definite ending:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这类游戏中，玩家被赋予自由探索内容和游戏玩法系统的权利，使得每一次游戏体验都是独一无二的。一些系列，如《辐射》、《上古卷轴》、《正当防卫》或《侠盗猎车手》，通过提供一个开放世界并充满可选活动和任务来实现，这些活动和任务可以让玩家沉浸数百小时。另一些，如《文明》和《全面战争》系列，通过提供深入、互联的系统以及包含无数动态部分的模拟，让玩家熬夜。另一个值得注意的例子是互动小说《80天环游世界》，它以一种独特的方式对开放非线性游戏进行了诠释，拥有惊人的、高度适应性的叙事和明确的结局：
- en: '![](img/00179.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00179.jpg)'
- en: A game with a defined beginning and ending, but a wide and unpredictable possibility
    space
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有明确的开始和结束，但可能性空间广阔且不可预测
- en: 'There are no absolutes in game design; it''s perfectly possible to retain a
    level of control over the structure and story of the game, while still allowing
    for free-form exploration. Most open-world games assume a hybrid form. They do
    not want players to be overwhelmed or venture too far too soon. In order to do
    that, you can create a set of artificial requirements that players have to meet
    in order to access an additional portion of the game. This unlock mechanism will
    let you pace the experience better and let your players focus on a more manageable
    amount of content:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计没有绝对的东西；完全有可能在保持对游戏结构和故事的控制的同时，仍然允许自由探索。大多数开放世界游戏都采用混合形式。它们不希望玩家感到不知所措或过早地冒险。为了做到这一点，你可以创建一套玩家必须满足的、以获取游戏额外部分的人工要求。这种解锁机制将让你更好地控制体验，并让你的玩家专注于更易于管理的游戏内容：
- en: '![](img/00027.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00027.jpg)'
- en: Rather than opening your structure fully, you can divide the game into a series
    of hubs with players progressing through them in a controllable manner
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是完全开放你的游戏结构，你可以将游戏划分为一系列中心区域，玩家以可控的方式在这些区域之间前进。
- en: The scope implications of an open world game can be huge, making tools for content
    creation and testing of paramount importance. You'll need to create a lot of content
    to make the world feel interesting, often with a risk of having to throw it all
    away as you modify and polish your gameplay mechanics. And as always, without
    solid second-to-second gameplay, no amount of content will save your game!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 开放世界游戏的范围影响可能很大，因此内容创作和测试的工具至关重要。你需要创造大量内容来让世界显得有趣，往往在修改和打磨游戏玩法机制的过程中，不得不冒着全部放弃的风险。而且，始终如一，没有坚实的秒对秒游戏体验，再多的内容也无法拯救你的游戏！
- en: There’s always an option of going after a wide possibility space through the
    depth of gameplay. In such case, you'll require countless hours of prototyping,
    playtesting, and bug fixing to ensure the system is fun and performing as intended.
    Deep systems and simulations can be very hard to create and especially hard to
    balance, as a single change can have unforeseen repercussions across the entire
    long-term playthrough.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 总是通过游戏深度的探索，去追求广泛的可能空间。在这种情况下，你需要无数小时的原型制作、测试和错误修复，以确保系统有趣并按预期运行。深层次的系统和模拟可能非常难以创建，尤其是难以平衡，因为任何单一的改变都可能在整个长期游玩过程中产生不可预见的后果。
- en: Endless and sandbox
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 无尽与沙盒
- en: 'Some games do not have a defined end or victory state and can be considered
    endless. This does not stop at the endless runner genre (very popular a few years
    ago, and includes the likes of Temple Run, Subway Surfers, and Despicable Me:
    Minion Rush). There are multiplayer games such as World of Warcraft, The Sims,
    or Clash of Clans that have a finite amount of content but never really end. In
    these games, you can win a battle, but you can never end the war...'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一些游戏没有定义的结束或胜利状态，可以被认为是无限的。这不仅仅局限于无限跑酷游戏类型（几年前非常流行，包括《神庙逃亡》、《地铁跑酷》和《神偷奶爸：小黄人快跑》）。还有一些多人游戏，如《魔兽世界》、《模拟人生》或《部落冲突》，它们的内容有限，但永远不会真正结束。在这些游戏中，你可以赢得一场战斗，但你永远无法结束战争...
- en: Sandbox games are not only endless, they are also mostly devoid of goals. Many
    designers argued that due to its endless and directionless nature, Minecraft is
    a toy and not a game (that was before Minecraft added some structure and goals
    via adventure mode).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 沙盒游戏不仅无限，而且通常没有目标。许多设计师认为，由于其无限和无方向的本质，Minecraft更像是一个玩具而不是游戏（这是在Minecraft通过冒险模式添加了一些结构和目标之前）。
- en: 'It''s easy to mistake games that support sandbox play, such as Grand Theft
    Auto or Fallout, for sandbox games. It''s true that GTA allows a huge degree of
    freedom and supports undirected, exploratory play, but there is always a storyline,
    progression gates, and a potential victory state. Even if players are free to
    choose their path, they are often confined and locked in certain states by the
    game''s story. A true sandbox game is free-form and often endless; it''s a vehicle
    for player expression, a virtual world, a simulation to get lost in. This structure
    rose to popularity with games such as Terraria, DayZ, and Rust (and of course
    Minecraft) selling millions of copies:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 容易将支持沙盒玩法的游戏，如《侠盗猎车手》或《辐射》，误认为是沙盒游戏。确实，GTA允许极大的自由度，并支持无方向的探索性玩法，但始终存在一个故事线、进度关卡和潜在的胜利状态。即使玩家可以自由选择自己的路径，他们通常也会被游戏的故事所限制和锁定在特定的状态中。真正的沙盒游戏是自由形式的，通常是无限的；它是玩家表达的工具，是一个虚拟世界，是一个迷失其中的模拟。这种结构随着《泰拉瑞亚》、《DayZ》和《Rust》（当然还有《我的世界》）等游戏卖出数百万份而流行起来：
- en: '![](img/00136.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpg)'
- en: Uh… Plotting a player journey? Oh well... There might be progression milestones
    and technology trees, but you can't really predict what your players will do next
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 呃……规划玩家的旅程？哦，算了...可能会有进度里程碑和技术树，但你无法真正预测玩家接下来会做什么。
- en: Sandbox games are not easy to create and even harder to test. However, by adding
    multiplayer features, one can get away with a seemingly shallow game as long as
    players can express and entertain themselves by interacting with each other. Just
    make sure there's something to work towards, to aspire to—a fantasy that players
    can spend long hours trying to fulfill.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 沙盒游戏不易创建，测试起来更难。然而，通过添加多人游戏功能，只要玩家可以通过相互互动来表达和娱乐自己，就可以让看似简单的游戏得以存在。只需确保有目标可追求，有梦想可追求——玩家可以花费数小时试图实现的幻想。
- en: Notes on structure
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 结构笔记
- en: As with any classification, the reality is often putting things on a sliding
    scale, and one product can have game modes or chapters that belong to wildly different
    categories. It's also possible for players to completely ignore the structure,
    step outside the path we laid out, and even make up their own goals. For example,
    some players in GTA 5 may completely ignore the tight sequence of story missions
    concerning the main characters, and instead explore the world, set records in
    longest car jumps, and try to attract as much police attention as possible and
    get away with it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何分类一样，现实往往是将事物放在一个滑动比例上，一个产品可以拥有属于截然不同类别的游戏模式或章节。玩家也可能完全忽略结构，走出我们设定的路径，甚至自己设定目标。例如，在《侠盗猎车手5》中的一些玩家可能会完全忽略与主要角色相关的紧凑的故事任务，而是探索世界，打破最长的汽车跳跃记录，并尽可能多地吸引警察的注意，然后逃脱。
- en: 'Settling for a particular style of game structure within any part of your game
    is an important part of the design process. You need to consider:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏的任何部分选择特定的游戏结构风格是设计过程中的重要部分。你需要考虑：
- en: Do you have the expertize required to pull off this type of experience? Opening
    up the possibilities comes with risks and can multiply your budget.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你拥有实现这种体验所需的专长吗？开放可能性伴随着风险，并且可能会增加你的预算。
- en: Do you know from the outset what kind of game you're making and what kind of
    play styles will you support?
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你从一开始就知道你正在制作什么类型的游戏，以及你将支持哪些类型的游戏玩法吗？
- en: Is there a set of expectations to be met on the structure of the game? These
    can be internal (team) or external (your audience).
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在游戏的结构上是否有需要满足的预期？这些可以是内部的（团队）或外部的（你的受众）。
- en: Scoping practices
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 范围实践
- en: The best way to approach scoping is by deconstructing the game from the top
    and defining the critical progression path of the player. Think of the final experience
    you want to deliver or the story you want to tell. Thinking about levels or any
    other units of player progress, can you define the minimal, optimal, and nice
    to have quantities? How much new content (obstacles, NPCs, game mechanics, and
    so on) you'll need on each part of the critical path to keep things interesting?
    By dividing player experience into chunks, you'll be able to easily estimate the
    amount of all interdependent elements.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接近范围的最佳方式是从游戏顶层开始分解，并定义玩家的关键进步路径。想想你想要提供的最终体验或想要讲述的故事。考虑等级或其他玩家进步的单位，你能定义最小、最优和理想的数量吗？你需要在关键路径的每一部分需要多少新内容（障碍、NPC、游戏机制等）以保持趣味性？通过将玩家体验分成块，你将能够轻松估计所有相互依赖元素的数量。
- en: Content lifespan
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 内容生命周期
- en: The content lifespan is a document that lists every significant piece of content
    and maps it against a player's journey in the game. It allows people to plan the
    production, estimate which elements are needed first, and identify the areas that
    have too many or too few new elements.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 内容生命周期是一个文档，列出了每一项重要的内容，并将其与玩家在游戏中的旅程相对应。它允许人们规划生产，估算首先需要哪些元素，并确定哪些区域有太多或太少的新元素。
- en: 'Unless you''re working on a very open-ended game or a sandbox experience, it
    should be possible to define a player''s vector of progression. This vector will
    serve as the reference point in the lifespan document. To give a couple of examples:
    in an open world RPG, the vector of progression might be the player''s experience
    level; in a linear puzzle-platformer, it would be the stages themselves; and in
    an adventure game, it could all come down to the place in the storyline.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你正在制作一个非常开放的游戏或沙盒体验，否则应该能够定义玩家的进步向量。这个向量将在生命周期文档中作为参考点。举几个例子：在一个开放世界的RPG中，进步向量可能是玩家的经验等级；在一个线性解谜平台游戏中，它将是关卡本身；在一个冒险游戏中，这可能会归结为故事情节中的位置。
- en: 'Content lifespan documentation can be used to:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 内容生命周期文档可用于：
- en: 'Examine the progression path: If you''re focusing on improving the first hour
    of the game, you''ll want to focus your efforts on only the relevant parts'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查进步路径：如果你专注于改进游戏的前一小时，你将希望只关注相关部分
- en: 'Pace the end-user experience: It''s arguably the easiest way of ensuring that
    fresh content and game mechanics are properly spread out'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整最终用户体验：这可能是确保新内容和游戏机制得到适当分散的最简单方法
- en: 'Plan content deliveries: You always want artists and programmers to work on
    things that you''ll need next'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划内容交付：你总是希望艺术家和程序员专注于你接下来需要的事情
- en: 'Identify dependencies: No need to work on that new power-up if the gameplay
    mechanics for it are half a year away!'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别依赖关系：如果该新升级的游戏玩法机制还需要半年才能完成，就没有必要工作在这个新升级上！
- en: Real-world examples
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界案例
- en: 'Normally, my content lifespan document would take the form of a long table
    with a single row for each element in the game (it would include buildings, obstacles,
    playable and non-playable characters, interactive objects, cutscenes, weapons,
    abilities, scenery, level design, and so on). I''d then add columns that contained
    the following: a short description, the first time an element is used, priority,
    and dependency (an obstacle that requires a special gadget obviously has to be
    created after said gadget).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我的内容生命周期文档会以一个长表格的形式呈现，每一行代表游戏中的一个元素（它包括建筑物、障碍物、可玩和非可玩角色、交互对象、预告片、武器、技能、风景、关卡设计等等）。然后我会添加包含以下内容的列：简短描述、元素首次使用的时间、优先级和依赖性（显然，需要特殊装置的障碍物必须在该装置创建之后才能创建）。
- en: Games have differing structures and their relationship with content varies wildly,
    therefore every game should be approached in a fitting way.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的结构各不相同，它们与内容的关系也大相径庭，因此每个游戏都应该以合适的方式进行对待。
- en: 'In Transformers: Earth Wars, we already had an art production spreadsheet and
    lists of robots and buildings; there was little point in listing all of the assets
    again. Therefore, I opted for a simplified graph followed by a more complex and
    integrated progression matrix, which I''ll demonstrate further on.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '在《Transformers: Earth Wars》中，我们已经有了一份艺术制作电子表格和机器人以及建筑物的清单；再次列出所有资产意义不大。因此，我选择了一个简化的图表，随后是一个更复杂且集成的进度矩阵，我将在后面进一步演示。'
- en: The game is a mobile, multiplayer, build and battle title. For the critical
    vector of progression, I chose the most important building, the player's Command
    Center. Unlike the player's robot collection (which is the most important thing
    in the game, but can vary wildly), buildings follow a linear path and are strictly
    tied to the Command Center Level. Upgrading the CC becomes a big investment in
    the base and is a visible milestone. Treating it as a main vector of progression
    also meant we assigned and locked all of the game features and technologies directly
    to it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这款游戏是一款移动、多人、建设和战斗类游戏。对于关键进度向量，我选择了最重要的建筑，玩家的指挥中心。与玩家的机器人收藏（这是游戏中最重要的东西，但变化很大）不同，建筑物遵循一条线性路径，并且严格与指挥中心等级相关联。升级指挥中心成为对基地的重大投资，并且是一个明显的里程碑。将其视为主要进度向量也意味着我们将所有游戏功能和科技直接分配并锁定到它上面。
- en: Player progression flow
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家进度流程
- en: First, I mapped known features and milestones in the game against Command Center
    levels. This diagram has been created as a drawing inside our game design document
    (the GDD itself was a Google Docs text file). Once we were happy with it, I printed
    several copies, stuck one of them on the wall and gave out the rest to the people
    responsible for planning the production (producer and art director), as well as
    to every single programmer on the team.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我将游戏中的已知功能和里程碑与指挥中心等级进行了对应。这个图表是在我们的游戏设计文档（GDD本身是一个Google Docs文本文件）中创建的绘图。一旦我们对其满意，我就打印了几份副本，将其中一份贴在墙上，其余的则分给了负责生产计划的人（制作人兼艺术总监），以及团队中的每一位程序员。
- en: 'Interestingly enough, we all knew that the game would go beyond Command Center
    11 (we actually made data for 16 CC levels and held some back, releasing the first
    14 on game launch), but we also knew no new features would be locked by or planned
    for that late in:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们都知道这款游戏将超越指挥中心11级（我们实际上为16个指挥中心等级制作了数据，并保留了一些，在游戏发布时发布了前14个），但我们也知道，在那个阶段不会有新的功能被锁定或计划：
- en: '![](img/00074.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00074.jpg)'
- en: Simplified player progression flow allows to plan feature delivery and control
    the added complexity, ensuring we don't overwhelm our audience
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 简化的玩家进度流程允许规划功能交付并控制增加的复杂性，确保我们不会让我们的观众感到不知所措
- en: Unlock matrix
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 解锁矩阵
- en: Following the progression map, the unlock matrix was created; this table was
    also printed and handed out around the office. It may look a bit confusing and
    hard to read, but that's because it wasn't just a reference point. It also served
    a much bigger purpose…
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循进度图，创建了解锁矩阵；这个表格也被打印出来，在办公室里分发。它可能看起来有点混乱，难以阅读，但这并不是因为它只是一个参考点。它还承担了一个更大的作用…
- en: We've integrated the unlock matrix into our economy spreadsheets. Through multiple
    lookup and match formulas, we have ended up with a single sheet that directly
    amended and influenced game data for our entire economy. Making changes in the
    unlock matrix would result in corrected resource costs, building times, and unlock
    requirements being filled in automatically for all the other sheets such an approach
    makes it much easier to balance and refactor player progression (more tips on
    how to set things up can be found in the balancing chapter of the book).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将解锁矩阵整合到我们的经济电子表格中。通过多个查找和匹配公式，我们最终得到了一个单张表格，它直接修改并影响了我们整个经济的数据。在解锁矩阵中做出更改会导致资源成本、建筑时间和解锁要求自动填写到所有其他表格中，这种方法使得平衡和重构玩家进度变得容易得多（关于如何设置事物的更多提示可以在书籍的平衡章节中找到）。
- en: '![](img/00196.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00196.jpg)'
- en: The first part of the matrix lists the maximum number of buildings you can build
    per type
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的第一部分列出了每种类型可以建造的最大建筑数量
- en: 'Anything going from 0 to 1 in the matrix given in the preceding screenshot
    signifies a new type of building being unlocked. The data looks a bit hard to
    read but can be processed by spreadsheet formulas with ease. You can look at the
    flow as well as each CC level individually. For example, I was able to add a column
    to the footprint of each building and use it to calculate the size of the building
    required to fit the base. This was of tremendous help when trying to figure out
    how many removable obstacles (rocks, trees and so on) should be placed on the
    map:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个截图给出的矩阵中，从0到1的变化表示解锁了一种新的建筑类型。数据看起来有点难以阅读，但可以用电子表格公式轻松处理。你可以查看整个流程，也可以单独查看每个指挥中心等级。例如，我能够为每个建筑的占地面积添加一列，并使用它来计算适合基地的建筑大小。这在尝试确定应该在地图上放置多少可移除的障碍物（岩石、树木等）时非常有帮助：
- en: '![](img/00141.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00141.jpg)'
- en: The second part of the matrix shows maximum upgrade level per CC level
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的第二部分显示了每个指挥中心等级的最大升级级别
- en: When it comes to upgrade levels, most defenses and production buildings simply
    increase by 1 for each Command Center level. But that's not the case for everything;
    things like the Workshop (a research center that restricts the maximum experience
    level for your bots) and Attack Shuttle (controlling the total number of robots
    you can deploy in battle) are very carefully crafted.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到升级级别时，大多数防御和生产建筑在指挥中心每个等级上仅增加1级。但并非所有事物都是如此；像车间（一个限制你的机器人最大经验等级的研究中心）和攻击穿梭机（控制你在战斗中可以部署的机器人总数）等事物都是经过精心设计的。
- en: On a side note, the confusing pink numbers were added when I was implementing
    the 3D models for buildings. We've only created six visually different versions
    of each building (apart from walls, as combined they leave a very large visual
    footprint on the base). So to make my life easier, I put the visually different
    levels in pink to help in data input. I made sure there's always a visual upgrade
    from level 1 to 2 (the first time you upgrade something), but I also made sure
    we don't use up all of the building upgrades too early (some upgrades for the
    most advanced buildings were left for the future).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，当我实施建筑3D模型时，添加了那些令人困惑的粉红色数字。我们只为每种建筑创建了六个视觉上不同的版本（除了墙壁，因为它们组合在一起会在基地上留下非常大的视觉足迹）。所以为了使我的生活更轻松，我将视觉上不同的级别用粉红色标出，以帮助数据输入。我确保从1级到2级（第一次升级某物时）始终有视觉升级，但我还确保我们不会过早地用完所有建筑升级（一些最先进建筑的升级留给了未来）。
- en: I might have gone into quite a lot of potentially unnecessary detail here, but
    there is an important lesson to take away from the process. As a designer, you
    need to define the kinds of data you want to control and adjust, and this can
    be difficult if you're breaking new ground. Once you have defined your parameters,
    use spreadsheets, graphs, post-it notes—anything that will help you visualize
    and operate on the data from a new angle.
  id: totrans-158
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我可能在这里详细描述了很多可能并不必要的细节，但从中我们可以吸取一个重要的教训。作为一名设计师，你需要定义你想要控制和调整的数据类型，如果你是在开辟新的领域，这可能会很困难。一旦你定义了你的参数，使用电子表格、图表、便利贴——任何能帮助你从新角度可视化和操作数据的东西。
- en: Game flow
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏流程
- en: Flow charts and diagrams are a very powerful tool that every designer has to
    learn to utilize. They can be used for anything from explaining the ins and outs
    of your game economy and gameplay mechanics, to portraying technology and skill
    trees.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图和图表是每个设计师都必须学会利用的非常强大的工具。它们可以用于解释游戏经济和游戏机制的内幕，以及描绘技术和技能树。
- en: 'Unless your game is trivially simple (or a near-direct copy of something existing),
    you''ll need to create a flowchart of sorts to explain where various options and
    features fit in and how they are connected. Even a simple game of Rock-Paper-Scissors
    could have its flow represented by a chart:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您的游戏非常简单（或几乎是现有事物的直接复制），否则您需要创建某种类型的流程图来解释各种选项和功能如何适合以及它们是如何连接的。即使是简单的剪刀石头布游戏，其流程也可以用图表表示：
- en: '![](img/00193.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00193.jpg)'
- en: Flowchart for a game of Rock-Paper-Scissors with multiple rounds.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 多轮剪刀石头布游戏的流程图。
- en: 'In the preceding example, we can see the structure of play as well as some
    of the rules that decide the outcome of a round. For those not familiar with the
    symbology:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以看到游戏的架构以及一些决定回合结果的规则。对于那些不熟悉符号的人来说：
- en: Rounded squares represent terminal blocks (beginnings and ends of processes)
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆角矩形代表终端块（过程的开始和结束）
- en: A parallelogram is used for user input/output
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平行四边形用于用户输入/输出
- en: Diamonds portray decisions. Use these for simple yes/no or true/false forks
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菱形表示决策。使用这些来表示简单的是/否或真/假分支
- en: Rectangles are used for processes and operations
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩形用于过程和操作
- en: Arrow connectors are used to join parts of the diagram and portray the direction
    of transitions
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箭头连接线用于连接图表的各个部分，并描绘转换的方向
- en: On-page connectors (the circles with letters inside) allow us to avoid long
    and confusing arrows by connecting two remote parts of the flow
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面内的连接器（带有字母的圆形）使我们能够通过连接两个远程部分来避免长而混乱的箭头
- en: It may be a lot to take in, but for experienced people, reading such diagrams
    is much easier than reading paper rulesets.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可能需要很多时间来理解，但对于有经验的人来说，阅读这样的图表比阅读纸质规则集要容易得多。
- en: Nevertheless, do not overthink the flow diagrams—we're not creating blueprints
    of factory processes, we're making games! It doesn't matter how many different
    shapes and connectors you use. As long as you do not confuse people, you can opt
    for a set of simple arrows and boxes.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，不要过度思考流程图——我们不是在创建工厂流程的蓝图，我们是在制作游戏！您使用多少不同的形状和连接器无关紧要。只要您不让人困惑，您可以选择一组简单的箭头和框。
- en: Going to the lengths of putting a rhomboid decision box with forking outcomes
    for every single thing will likely end up as a waste of your time and potentially
    overwhelm the rest of your team (no one wants to read a flow with hundreds of
    nodes).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将菱形决策框和分支结果用于每一件事，很可能会浪费您的时间，并可能使您的团队感到不知所措（没有人愿意阅读包含数百个节点的流程）。
- en: Ultimately, the game flow will evolve and change over time; the purpose of the
    initial diagrams is to help you visualize the structure of the game—do it by whatever
    means necessary. You can inject screenshots from reference games or earlier prototypes,
    comments, wireframes (rough sketches of the user interface and content)—everything
    flies as long as it helps you communicate effectively. If you really need a diamond
    decision box with forking paths—use it! But, if you're going to write up a detailed
    explanation of that part of the game anyway (with potentially its very own flow
    chart), opt for simplicity and put it all in a simple box.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，游戏流程会随着时间的推移而发展和变化；初始图表的目的是帮助您可视化游戏的架构——通过任何必要的手段来完成。您可以注入参考游戏或早期原型的截图、注释、线框（用户界面和内容的粗略草图）——只要它有助于您有效地沟通即可。如果您真的需要一个带有分支路径的菱形决策框——使用它！但是，如果您无论如何都要详细说明游戏的那部分（可能还有它自己的流程图），请选择简单，并将其全部放入一个简单的框中。
- en: These days, you rarely need to install specialist software such as Microsoft
    Visio or Inkscape. There are countless online solutions such as draw.io or Lucidchart,
    and you can always fall back on something even simpler; unless you're doing something
    large and complex, Google Slides and Powerpoint can easily satisfy most of your
    needs. Some people even use pictures of whiteboards or post-it notes.
  id: totrans-175
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些天，您很少需要安装像Microsoft Visio或Inkscape这样的专业软件。有无数在线解决方案，如draw.io或Lucidchart，而且您总是可以退而求其次；除非您正在做大型且复杂的事情，否则Google
    Slides和Powerpoint可以轻松满足您的需求。有些人甚至使用白板或便利贴的图片。
- en: Example of a menu flow
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单流程示例
- en: As an example, I choose to create a simple menu flow for the PC version of Blizzard's
    digital card game Hearthstone. A few details about the game were simplified (in
    order to fit it on a single page), but it should still prove as a useful example!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我选择为暴雪的数字卡牌游戏《炉石传说》的PC版本创建一个简单的菜单流程。为了适应单页内容，游戏的一些细节被简化了，但它应该仍然是一个有用的例子！
- en: Instead of using a conservative flow diagram iconography, I've opted for a very
    loose and accessible approach. Each area of the game is portrayed by a rectangle
    that explains available options.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有选择使用保守的流程图图标，而是选择了一种非常宽松且易于访问的方法。每个游戏区域都由一个矩形表示，解释了可用的选项。
- en: 'Even a simplified menu flow like that, combined with the information contained
    in the GDD, paints a good picture of how the game can be put together, helping
    the whole team see the connections between the different areas of the game and
    empowering user interface artists to start working on wireframes, visualization
    of various options, and polishing the end-user experience:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是如此简化的菜单流程，结合GDD中包含的信息，也能很好地描绘出游戏是如何组合起来的，帮助整个团队看到游戏不同区域之间的联系，并赋予用户界面艺术家开始工作于线框图、各种选项的可视化以及完善最终用户体验的权力：
- en: '![](img/00023.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00023.jpg)'
- en: Bear in mind that in modern, collaborative teams, any flows and documents you
    create are not supposed to be a final directive of how the game will be made.
    Instead, treat them as a great way to present your vision, a solid starting point
    that enables the team to spot flaws early on and allows for a more informed discussion
    to take place. Do not over-explain too early and be prepared to edit and re-work
    everything. Again, the more changes you make on paper, the better and more efficient
    your team can be!
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在现代协作团队中，你创建的任何流程和文档都不应该是游戏制作的最终指令。相反，将它们视为展示你愿景的绝佳方式，一个坚实的起点，使团队能够尽早发现缺陷，并允许进行更明智的讨论。不要过早地过度解释，并准备好编辑和重新工作一切。再次强调，你在纸上做出的更改越多，你的团队就能越高效！
- en: Planning design work
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 规划设计工作
- en: In the games industry, it's usually the project manager who creates and enforces
    production schedules. To do that, a list of task and assets to produce is assembled
    based on the design documentation. These tasks are then paired with estimates
    that (in the best-case scenario) come from the people who will actually end up
    doing said tasks. If the project is highly inventive and/or staff members inexperienced,
    more senior employees might get involved in helping with the initial schedule.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏行业中，通常是由项目经理创建和执行生产计划。为此，根据设计文档编制一个待生产任务和资产列表。然后，这些任务与来自将实际完成这些任务的人的估计相匹配（在最佳情况下）。如果项目极具创新性且/或团队成员缺乏经验，可能需要更多资深员工参与帮助制定初始计划。
- en: Unfortunately, in the words of strategist Helmuth von Moltke, "No battle plan
    ever survives contact with the enemy." First production schedules are likely to
    be very, very wrong. In the beginning, things will usually take longer than anticipated,
    and a lot of unknown problems, changes in direction, and missed tasks will emerge.
    Fortunately, as time goes on, your team's experience with the product grows and
    your tools are likely to improve, making the creation of future game content much
    quicker than initially anticipated. Good development studios and publishers acknowledge
    that games are very hard to plan accurately, and are prepared to be reasonably
    flexible.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，正如战略家赫尔穆特·冯·莫尔特克所说：“任何战斗计划在与敌人接触后都不会幸存。”最初的生产计划很可能非常错误。一开始，事情通常会花费比预期更长的时间，许多未知的问题、方向的变化和遗漏的任务会出现。幸运的是，随着时间的推移，团队对产品的经验增长，你的工具可能也会改进，使得未来游戏内容的创建比最初预期的要快得多。好的开发工作室和发行商承认游戏很难准确规划，并准备在合理范围内灵活应对。
- en: 'In Agile game development, you''re likely to encounter different levels of
    detail when it comes to planning and task preparation. Long-term plans tend to
    be loose and based on rough estimations; the game might have a shipping date from
    the beginning, but it''s very unlikely to be the actual one. Mid-term plans (next
    few months), usually focus on clear goals that the team is striving to achieve
    for example: getting the first level playable, finishing the character customization
    system, testing network code. Short-term plans (next two sprints, that is, development
    cycles) are the most detailed and least likely to change, as they contain lists
    of detailed tasks, order by priority, which is either worked on right now or will
    be assessed for inclusion in the next development cycle.'
  id: totrans-185
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在敏捷游戏开发中，在规划和任务准备方面，你可能会遇到不同层次的细节。长期计划往往比较松散，基于粗略的估算；游戏可能从一开始就有发货日期，但实际日期非常不可能与之相符。中期计划（下几个月），通常关注团队努力实现的具体目标，例如：使第一个关卡可玩，完成角色定制系统，测试网络代码。短期计划（下两个冲刺，即开发周期）是最详细的，最不可能改变，因为它们包含按优先级排序的详细任务列表，这些任务要么目前正在处理，要么将评估是否包含在下一个开发周期中。
- en: No matter how fragile and changeable, plans need to be made right before the
    game can enter the production period. As a representative (or at least a valued
    member) of the design team, you're likely to be involved in the process. While
    deliverable tasks for artists (such as character models, animations, environments,
    and so on) are relatively easy to put into numbers and estimate, design tasks
    tend to be much more elusive. We'll cover some tips that might help you in tackling
    this problem!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 无论计划多么脆弱和多变，在游戏进入生产期之前，都需要制定计划。作为设计团队的代表（或至少是受重视的成员），你可能会参与这个过程。虽然艺术家（如角色模型、动画、环境等）的可交付任务相对容易量化并估算，但设计任务往往更具挑战性。我们将介绍一些可能有助于你解决这个问题的技巧！
- en: Estimation techniques
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 估算技术
- en: Estimating the entire project upfront can be a daunting task, but there's a
    technique you can use when faced with any big problem - break it down into many
    small problems!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在一开始就估算整个项目可能会是一项令人畏惧的任务，但当你面对任何大问题时，你可以使用一种技术——将其分解成许多小问题！
- en: 'Your first step would be to look at a list of all features and pieces of content.
    Think of any design tasks that could go on that list. For example, if you''re
    working on a first-person shooter, you''d not treat level design, weapon design,
    and enemy design as just three huge tasks; instead, weapon design could be broken
    down and estimated as a set of smaller, more manageable tasks:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一步是查看所有功能和内容的列表。想想任何可能出现在该列表上的设计任务。例如，如果你正在制作一款第一人称射击游戏，你不会将关卡设计、武器设计和敌人设计视为仅仅三个巨大的任务；相反，武器设计可以分解并估算为一系列更小、更易于管理的任务：
- en: 'High-level design of all weapons (quantity, when are they unlocked): 2 days'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有武器的整体设计（数量，何时解锁）：2天
- en: 'Design and implementation tasks for each weapon: 3-4 days (per weapon)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每件武器的设计和实现任务：3-4天（每件武器）
- en: 'Ideation and prototyping (desired role and feel): 4 hours'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思考和原型设计（期望的角色和感觉）：4小时
- en: 'Art brief and references: 1 hour'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 艺术简报和参考资料：1小时
- en: 'Initial gameplay implementation: 2-4 hours'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始游戏实现：2-4小时
- en: 'Initial balancing pass: 2-3 hours'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始平衡测试：2-3小时
- en: 'Art implementation and sound brief: 2-4 hours'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 艺术实现和声音简报：2-4小时
- en: 'Playtesting and polishing time: 6-8 hours'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏测试和打磨时间：6-8小时
- en: 'Bug fixing: 2-8 hours'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误修复：2-8小时
- en: 'Playtesting for all weapons: 5 days'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有武器的游戏测试：5天
- en: 'Final balancing of all weapons: 3 days'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有武器的最终平衡：3天
- en: 'Final polish pass for all weapons: 5 days'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有武器的最终打磨：5天
- en: Once you break things down, look at the combined time taken and see if there
    are any obvious mishaps, then add some contingency budget (usually at least 20%)
    and make sure to revisit and re-estimate the tasks in the future, based on acquired
    experience.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将事情分解，看看总耗时，看看是否有任何明显的失误，然后添加一些应急预算（通常至少20%），并确保根据获得的经验在未来重新评估任务。
- en: You'd be surprised how effective such breakdowns can be, especially if you approach
    the unknown quantities in the same way as the famous nuclear physicist Enrico
    Fermi...
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你会惊讶于这种分解的有效性，尤其是如果你以著名核物理学家恩里科·费米的方式处理未知量...
- en: 'Fermi was known for his ability to make very good approximate calculations
    with very little to no actual data. Instead, he relied on making justified guesses
    in which he replaced any unknown quantities with averages of possible lower and
    upper values. How does that translate into practice? A famous example of a Fermi
    problem is How many piano tuners are there in Chicago? In order to answer that
    question, we''d break the problem down into smaller chunks asking following questions:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 费米以其用非常少或没有实际数据做出非常好的近似计算的能力而闻名。相反，他依赖于做出合理的猜测，在这些猜测中，他用可能的较低和较高值的平均值替换任何未知量。这如何转化为实践？费米问题的一个著名例子是“芝加哥有多少名钢琴调音师？”为了回答这个问题，我们需要将问题分解成更小的部分，提出以下问题：
- en: How many people live in Chicago? Let's say we have no idea, but we know it's
    a big city, more than 4 million but less than 15 million. An average of these
    two values would be 9.5 million.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 芝加哥有多少人居住？让我们假设我们不知道，但我们知道它是一个大城市，超过400万但不到1500万。这两个值的平均值是950万。
- en: How many people are in each household on average? Surely more than 1, but probably
    less than 3\. Let's take 2.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个家庭平均有多少人？肯定不止1人，但可能不到3人。让我们取2人。
- en: How many households have a piano that requires regular tuning? Probably more
    than it 1 in 35, but less than 1 in 5\. Let's say it's 1 in 20!
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少家庭需要定期调音的钢琴？可能比1/35多，但比1/5少。让我们假设是1/20！
- en: We can also guess that regularly tuned pianos need around once a year.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也可以猜测，定期调音的钢琴大约每年需要一次。
- en: How long does it take to travel to the customer and tune a piano? More than
    an hour, but probably less than 4\. Shall we say 2.5?
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去客户那里调音需要多长时间？超过一小时，但可能不到4小时。我们说2.5小时怎么样？
- en: Each tuner works 8 hours a day, five days a week. 50 weeks in a year.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个调音师每天工作8小时，每周5天。一年50周。
- en: 'With these assumptions we can do the following calculation:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些假设，我们可以进行以下计算：
- en: (9,500,000 people in Chicago) ÷ (2 persons/household) × (1 piano/20 households)
    × (1 piano tuning a year) = 237,500 piano tuning tasks every year in Chicago.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: (芝加哥有950万人) ÷ (每户2人) × (每20户有1架钢琴) × (每年调音1次) = 芝加哥每年有237,500次钢琴调音任务。
- en: Now, how many piano tunings can a tuner perform in a year?
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一年中调音师能进行多少次钢琴调音？
- en: (50 weeks/year) × (5 days/week) × (8 hours/day) ÷ (2.5 hours to tune a piano)
    = 800 piano tunings per year.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: (每年50周) × (每周5天) × (每天8小时) ÷ (调音钢琴需要2.5小时) = 每年800次钢琴调音。
- en: Now for the final calculation!
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行最终的计算！
- en: (237,500 piano tunings per year in Chicago) ÷ (800 piano tunings per year for
    each piano tuner) = 297 piano tuners in Chicago.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: (芝加哥每年237,500次钢琴调音) ÷ (每个调音师每年800次钢琴调音) = 芝加哥有297名调音师。
- en: '[PRE0]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Your best work on nearly any game is the work you'll do last, built upon the
    breadth of experience with the product. The middle of the game is very much such
    as the middle of a book or a movie, no matter how good it is, if the beginning
    is bad no one will reach it, and if the ending sucks, that's the only thing they'll
    remember. Almost all games benefit from starting the development partway through
    the player journey, no matter how annoying it is to not have the game playable
    from the start for a long period of time. If you're to create a platform game
    with 10 stages, start on level 3 or 4, followed by more work on the middle chunk,
    then do the start and finally the end.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎在所有游戏中，你最后完成的工作都是基于对产品广泛经验的工作。游戏的中间部分就像一本书或一部电影的中间部分一样，无论它有多好，如果开头不好，没有人会看到它，如果结尾糟糕，那将是他们唯一记住的事情。几乎所有游戏都从玩家旅程的中间部分开始开发，尽管长时间不能玩游戏可能会很烦人，但这样做确实有益。如果你要制作一个有10个阶段的平台游戏，可以从第3或第4个阶段开始，然后对中间部分进行更多的工作，最后再完成开始和结束部分。
- en: If for some reason you cannot start in the middle (say you want to do play-testing
    of core mechanics), make sure to set aside some time to revisit, iterate, and
    potentially rebuild the initial areas later on.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因你不能从中间开始（比如说你想进行核心机制的游戏测试），确保留出一些时间来回顾、迭代，并在以后可能重建初始区域。
- en: Remember, the very same technique of starting in the middle works on any scale
    and applies to individual features. For example, you're working on multiple campaigns,
    but you must deliver them in order, perhaps you can start each campaign in the
    middle? What also helps is the extra frame of reference that you gain as you start
    in the middle. It's more convenient to aim for medium difficulty level, then dial
    it up and down as needed, than to start easy and keep escalating up.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，从中间开始的技术在任何规模上都适用，并且适用于单个功能。例如，你正在处理多个战役，但你必须按顺序交付它们，也许你可以从每个战役的中间开始？当你从中间开始时，你获得的额外参考框架也有帮助。目标是中等难度级别，然后根据需要调整上下，比从简单开始并不断升级更容易。
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend you to misuse these in any way. For more information please consult
    the terms and conditions of the publishers mentioned in the Disclaimer section
    of this book.
  id: totrans-221
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本章中使用的截图仅用于说明目的。我们不推荐你以任何方式误用这些截图。有关更多信息，请参阅本书免责声明部分中提到的出版商的条款和条件。
- en: Summary
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: This has been quite a chapter! By now, you should have a better idea of how
    to analyze the structure of games and better predict their scope. We spoke at
    length about game content and your role in helping to define it. We've accustomed
    ourselves to the content treadmill (and how it can be avoided), and looked at
    the differences between games that rely on the content burn and those that aim
    to deliver a deep possibility space. We've also analyzed popular game structures
    and explored ways in which you can document the scope and plan of your work.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是一个精彩的章节！到目前为止，你应该对如何分析游戏结构以及更好地预测其范围有了更好的理解。我们详细讨论了游戏内容以及你在帮助定义它方面的作用。我们已经习惯了内容
    treadmill（以及如何避免它），并探讨了依赖于内容 burn 的游戏和旨在提供深度可能性空间的游戏的区别。我们还分析了流行的游戏结构，并探讨了你可以记录你工作范围和计划的方法。
- en: Armed with all this knowledge, we should be ready for the part you're anticipating
    (or dreading) the most. It's time to delve deep into the art and craft of writing
    design documentation!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有所有这些知识，我们应该准备好你期待（或害怕）最多的部分。是时候深入探讨编写设计文档的艺术和技巧了！
