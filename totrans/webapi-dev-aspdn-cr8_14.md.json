["```cs\nwsl -l -v\n```", "```cs\n  NAME                   STATE           VERSION* Ubuntu-22.04           Running         2\n  Ubuntu                 Stopped         2\n  docker-desktop-data    Running         2\n  docker-desktop         Running         2\n```", "```cs\ndotnet new webapi -o BasicWebApiDemo -controllers\n```", "```cs\n#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\nUSER app\nWORKDIR /app\nEXPOSE 8080\nEXPOSE 8081\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"BasicWebApiDemo.csproj\", \".\"]\nRUN dotnet restore \"./BasicWebApiDemo.csproj\"\nCOPY . .\nWORKDIR \"/src/.\"\nRUN dotnet build \"BasicWebApiDemo.csproj\" -c $BUILD_CONFIGURATION -o /app/build\nFROM build AS publish\nRUN dotnet publish \"BasicWebApiDemo.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"BasicWebApiDemo.dll\"]\n```", "```cs\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\n```", "```cs\nUSER app\n```", "```cs\nWORKDIR /app\n```", "```cs\nEXPOSE 8080EXPOSE 8081\n```", "```cs\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS buildARG BUILD_CONFIGURATION=Release\nWORKDIR /src\n```", "```cs\nCOPY [\"BasicWebApiDemo.csproj\", \".\"]RUN dotnet restore \"./BasicWebApiDemo.csproj\"\n```", "```cs\nCOPY . .WORKDIR \"/src/.\"\nRUN dotnet build \"BasicWebApiDemo.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n```", "```cs\nFROM build AS publishRUN dotnet publish \"BasicWebApiDemo.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n```", "```cs\nFROM base AS finalWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"BasicWebApiDemo.dll\"]\n```", "```cs\ndocker build -t basicwebapidemo .\n```", "```cs\n    # Exclude build results, Npm cache folder, and some other files**/bin/**/obj/**/.git**/.vs**/.vscode**/global.json**/Dockerfile**/.dockerignore**/node_modules\n    ```", "```cs\ndocker images\n```", "```cs\nREPOSITORY      TAG     IMAGE ID       CREATED              SIZEbasicwebapidemo latest  b0d8d94d219c   About a minute ago   222MB\n```", "```cs\ndocker build -t basicwebapidemo:v1 .\n```", "```cs\ndocker rmi basicwebapidemo\n```", "```cs\ndocker run -d -p 80:8080 --name basicwebapidemo basicwebapidemo\n```", "```cs\n5529b0278e5a14452a7049a7c9922797b0c1171423970f99b4481c93cfdc6a38\n```", "```cs\ndocker ps\n```", "```cs\nCONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                                 NAMES403eb4952287   basicwebapidemo   \"dotnet BasicWebApiD…\"   5 minutes ago   Up 5 minutes   8081/tcp, 0.0.0.0:80->8080/tcp   basicwebapidemo\n```", "```cs\ndocker ps -a\n```", "```cs\ndocker logs basicwebapidemo\n```", "```cs\ninfo: Microsoft.Hosting.Lifetime[14]      Now listening on: http://[::]:8080\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Production\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: /app\n```", "```cs\ndocker stats basicwebapidemo\n```", "```cs\nCONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O   PIDS403eb4952287   basicwebapidemo   0.01%     24.24MiB / 15.49GiB   0.15%     23.8kB / 2.95kB   0B / 0B     25\n```", "```cs\ndocker stop basicwebapidemo\n```", "```cs\ndocker rm basicwebapidemo\n```", "```cs\ndocker run -d -p 80:8080 --name basicwebapidemo -e ASPNETCORE_ENVIRONMENT=Development basicwebapidemo\n```", "```cs\nMyAzurePipelinesDemo    ├── src\n    │   └──MyBasicWebApiDemo\n    ├── tests\n    │   ├──MyBasicWebApiDemo.UnitTests\n    │   └──MyBasicWebApiDemo.IntegrationTests\n    ├── MyBasicWebApiDemo.sln\n    ├── README.md\n    ├── LICENSE\n    └── .gitignore\n```", "```cs\n    trigger:- mainpool:  vmImage: 'windows-latest'variables:  solution: '**/*.sln'  buildPlatform: 'Any CPU'  buildConfiguration: 'Release'steps:- task: NuGetToolInstaller@1- task: NuGetCommand@2  inputs:    restoreSolution: '$(solution)'- task: VSBuild@1  inputs:    solution: '$(solution)'    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation=\"$(build.artifactStagingDirectory)\"'    platform: '$(buildPlatform)'    configuration: '$(buildConfiguration)'- task: VSTest@2  inputs:    platform: '$(buildPlatform)'    configuration: '$(buildConfiguration)'\n    ```", "```cs\n    pr:  branches:    include:    - main\n    ```", "```cs\n    pool:  vmImage: 'ubuntu-latest'\n    ```", "```cs\n    variables:  solution: '**/*.sln'  buildConfiguration: 'Release'\n    ```", "```cs\n    steps:- task: UseDotNet@2  displayName: 'use dotnet cli'  inputs:    packageType: 'sdk'    version: '8.0.x'    includePreviewVersions: true\n    ```", "```cs\n    - task: DotNetCoreCLI@2  displayName: 'dotnet build'  inputs:    command: 'build'    arguments: '--configuration $(buildConfiguration)    projects: '$(solution)'\n    ```", "```cs\n    - task: DotNetCoreCLI@2  displayName: 'dotnet test - unit tests'  inputs:    command: 'test'    arguments: '--configuration $(buildConfiguration) --no-build --no-restore --logger trx --collect \"Code coverage\"'    projects: '**/*.UnitTests.csproj'- task: DotNetCoreCLI@2  displayName: 'dotnet test - integration tests'  inputs:    command: 'test'    arguments: '--configuration $(buildConfiguration) --no-build --no-restore --logger trx --collect \"Code coverage\"'    projects: '**/*.IntegrationTests.csproj'\n    ```", "```cs\n    return Enumerable.Range(1, 6).Select(index => new WeatherForecast// Omitted for brevity\n    ```", "```cs\n    trigger: none\n    ```", "```cs\n    trigger:- mainresources:- repo: selfvariables:  # Container registry service connection established during pipeline creation  dockerRegistryServiceConnection: 'deb345e0-7bdd-4420-ba08-538785d525cd'  imageRepository: 'myazurepipelinesdemo'  containerRegistry: 'devopscrlab.azurecr.io'  dockerfilePath: '$(Build.SourcesDirectory)/src/MyBasicWebApiDemo/Dockerfile'  tag: '$(Build.BuildId)'  # Agent VM image name  vmImageName: 'ubuntu-latest'stages:- stage: Build  displayName: Build and push stage  jobs:  - job: Build    displayName: Build    pool:      vmImage: $(vmImageName)    steps:    - task: Docker@2      displayName: Build and push an image to container registry      inputs:        command: buildAndPush        repository: $(imageRepository)        dockerfile: $(dockerfilePath)        containerRegistry: $(dockerRegistryServiceConnection)        tags: |          $(tag)          latest\n    ```", "```cs\n    pr: none\n    ```", "```cs\n    trigger:  branches:    include:    - main  paths:    exclude:    - README.md    - .gitignore    - .dockerignore    - *.yml\n    ```", "```cs\ntrigger: nonepr: none\npool:\n  vmImage: ubuntu-latest\n```", "```cs\nvariables:  containerRegistry: 'devopscrlab.azurecr.io'\n  imageRepository: 'myazurepipelinesdemo'\n  tag: 'latest'\n```", "```cs\n- task: AzureAppServiceSettings@1  displayName: Update settings\n  inputs:\n    azureSubscription: '<Your Azure subscription>(<guid>)'\n    appName: 'azure-pipeline-demo'\n    resourceGroupName: 'devops-lab'\n    appSettings: |\n      [\n        {\n          \"name\": \"DOCKER_REGISTRY_SERVER_URL\",\n          \"value\": \"$(containerRegistry)\",\n          \"slotSetting\": false\n        },\n        {\n          \"name\": \"DOCKER_REGISTRY_SERVER_USERNAME\",\n          \"value\": \"devopscrlab\",\n          \"slotSetting\": false\n        },\n        {\n          \"name\": \"DOCKER_REGISTRY_SERVER_PASSWORD\",\n          \"value\": \"$(acrpassword)\",\n          \"slotSetting\": false\n        }\n      ]\n```", "```cs\n- task: AzureWebAppContainer@1  displayName: Deploy to Azure Web App for Container\n  inputs:\n    azureSubscription: '<Your Azure subscription>'\n    appName: 'azure-pipeline-demo'\n    containers: '$(containerRegistry)/$(imageRepository):$(tag)'\n    containerCommand: 'dotnet MyBasicWebApiDemo.dll'\n```", "```cs\n- task: AzureRmWebAppDeployment@4  displayName: Deploy to Web App for Container\n  inputs:\n    ConnectionType: 'AzureRM'\n    azureSubscription: '<Your Azure subscription>'\n    appType: 'webAppContainer'\n    WebAppName: 'azure-pipeline-demo'\n    DockerNamespace: 'devopscrlab.azurecr.io'\n    DockerRepository: 'myazurepipelinesdemo'\n    DockerImageTag: 'latest'\n    StartupCommand: 'dotnet MyBasicWebApiDemo.dll'\n```", "```cs\nMyGitHubActionsDemo    ├── src\n    │   └──MyBasicWebApiDemo\n    ├── tests\n    │   ├──MyBasicWebApiDemo.UnitTests\n    │   └──MyBasicWebApiDemo.IntegrationTests\n    ├── MyBasicWebApiDemo.sln\n    ├── README.md\n    ├── LICENSE\n    └── .gitignore\n```", "```cs\n# This workflow will build a .NET project# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net\nname: .NET\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.0.x\n    - name: Restore dependencies\n      run: dotnet restore\n    - name: Build\n      run: dotnet build --no-restore\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```", "```cs\npublic IEnumerable<WeatherForecast> Get(){\n    return Enumerable.Range(1, 6).Select(index => new WeatherForecast\n    // Omitted for brevity\n```", "```cs\non:  pull_request:\n    branches: [ \"main\" ]\n```", "```cs\nname: Pull Request buildon:\n  push:\n    branches: [ \"main\" ]\n```", "```cs\njobs:  docker_build_and_push:\n    runs-on: ubuntu-latest\n    environment: Production\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 8.0.x\n    - name: Restore dependencies\n      run: dotnet restore\n    - name: Build\n      run: dotnet build --no-restore\n    - name: Login to Azure Container Registry\n      uses: azure/docker-login@v1\n      with:\n        login-server: devopscrlab.azurecr.io\n        username: ${{ secrets.REGISTRY_USERNAME }}\n        password: ${{ secrets.REGISTRY_PASSWORD }}\n    - name: Push to Azure Container Registry\n      run: |\n        docker build -f ${{ github.workspace }}/src/MyBasicWebApiDemo/Dockerfile -t devopscrlab.azurecr.io/myazurepipelinesdemo:${{ github.run_id }} -t devopscrlab.azurecr.io/myazurepipelinesdemo:latest .\n        docker push devopscrlab.azurecr.io/myazurepipelinesdemo:${{ github.run_id }}\n        docker push devopscrlab.azurecr.io/myazurepipelinesdemo:latest\n```"]