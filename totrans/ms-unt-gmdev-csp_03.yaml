- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Introduction to Game Design and Project Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Step into the realm where creativity meets structure – the Introduction to Game
    Design and Project Organization. This chapter serves as your gateway to understanding
    the core principles that breathe life into games. In this chapter, we’ll navigate
    through the essential elements of game design, exploring the art of crafting engaging
    mechanics and compelling narratives. Additionally, we’ll unravel the secrets of
    effective project organization, providing you with the tools to streamline your
    development process. Whether you’re dreaming of your first game or seeking to
    enhance your skills, this introduction lays the groundwork for an exciting adventure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to GDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What about the player’s experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s talk about the project organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ready to dive into Unity development? Make sure your system is ready:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unity Version 2022.3.13**: Download and install Unity, choosing version 2022.3.13
    for optimal compatibility with the provided content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Primary IDE - Visual Studio 2022**: The tutorials and code samples are crafted
    using Visual Studio 2022\. Ensure it’s installed to follow along seamlessly. Feel
    free to explore Rider or other IDEs if you prefer, though instructions are tailored
    for Visual Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sufficient System Resources**: Ensure your system meets Unity’s minimum requirements
    for a smooth development experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub Repository for Code Samples**: Access the code samples and project
    files on our dedicated GitHub repository: [https://github.com/PacktPublishing/Mastering-Unity-Game-Development-with-C-Sharp](https://github.com/PacktPublishing/Mastering-Unity-Game-Development-with-C-Sharp).
    Clone or download the repository to have easy access to the code demonstrated
    in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to GDD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s get into game design! We’re diving into the world of Game Design Document
    (GDD). Making games isn’t just about code; it’s about creating experiences. These
    basics help turn ideas into exciting games. We’ll explore what GDD is all about
    and how it helps make games that players love.
  prefs: []
  type: TYPE_NORMAL
- en: What is GDD?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Game Design Document**, or **GDD**, serves as a comprehensive guide that
    outlines the core themes, styles, features, mechanics, and ideas for your game
    project. Its main role is to effectively communicate the details of your project,
    whether to yourself as you progress in game development or to other stakeholders
    like team members, publishers, or potential players. Essentially, it’s the tool
    that helps manage and develop the concept of your game, providing a crucial roadmap
    for its creation. While there’s no strict standard for its format, a well-crafted
    GDD becomes an integral part of your game’s development, ensuring clarity and
    alignment among the development team.
  prefs: []
  type: TYPE_NORMAL
- en: 'GDD and Pitch: A Comparative Perspective'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to the GDD and the pitch, they serve distinct purposes in the
    game development process. The GDD is an in-depth document, capturing core elements
    and intricacies, offering a detailed guide for the development team. On the other
    hand, a pitch is a concise and impactful presentation crafted to generate interest
    and support. While the GDD provides comprehensive information throughout the game
    creation journey, the pitch acts as a teaser – a compelling snapshot to excite
    potential stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Pitch: Sparking Enthusiasm for Your Game Concept'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **pitch** is a powerful tool designed to ignite interest and support for your
    game concept. It’s a brief, attention-grabbing presentation that swiftly communicates
    the essence of your game. Unlike the detailed nature of the GDD, the pitch is
    all about creating immediate excitement. It plays a vital role in capturing attention,
    generating curiosity, and laying the groundwork for potential collaboration with
    stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image serves as a pitch for our game, providing a visual representation
    to illustrate the concept:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.1 \uFEFF– Fusion Fury’s Pitch](img/B22017_01_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Fusion Fury’s Pitch
  prefs: []
  type: TYPE_NORMAL
- en: You will find a full GDD on [https://github.com/PacktPublishing/Mastering-Unity-Game-Development-with-C-Sharp](https://github.com/PacktPublishing/Mastering-Unity-Game-Development-with-C-Sharp).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GDD elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’ve ever wondered about the magic behind video games, you’re in the right
    place. Join us on a beginner-friendly exploration of the GDD elements, demystifying
    the language of game development. The following list shows some of the GDD elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Game Concept**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description of the game’s core idea and overall concept.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines the setting, theme, and main objectives of the game.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core** **Game Mechanics**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed explanation of the fundamental rules and interactions governing the
    game.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes how the player will engage with and navigate the game world.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gameplay Features**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identification and elaboration of key features that enhance the gameplay experience.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes unique selling points, special abilities, and innovative aspects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gameplay Breakdown**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-depth breakdown of different phases or levels within the game.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlines the progression and challenges players will encounter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project** **Scope Breakdown**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clear delineation of the scope of the project, including its limitations.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines what is included and, equally important, what is not included in the
    project.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical Requirements**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifications related to the technology and tools needed for game development.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes information on platforms, programming languages, and software requirements.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Art and** **Sound Assets**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the visual and auditory elements required for the game.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes character designs, environment art, sound effects, and music.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Interface (****UI) Design**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design of the user interface, including menus, HUD elements, and navigation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures a user-friendly and visually appealing experience.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monetization Strategy**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussion of how the game will generate revenue, if applicable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes pricing models, in-app purchases, or other revenue streams.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing and** **Quality Assurance**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strategy for testing the game to identify and resolve bugs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures the game meets quality standards before release.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marketing** **and Promotion**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlines plans for promoting and marketing the game.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifies the target audience and strategies for building awareness.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These aren’t the only elements you’d find in a GDD, but that’s not our focus
    in this book. We also offer advice, especially for mid-development or indie game
    developers. It’s often recommended not to create an overly detailed GDD at the
    start because you might need to make changes as your development journey progresses.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use this GDD as we create the game in the next chapters. We’ll learn how
    to understand the GDD, break it into tasks, and organize them to complete our
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discuss a crucial aspect related to the player’s experience and why it’s
    vital for the success of our game.
  prefs: []
  type: TYPE_NORMAL
- en: What about the player’s experience?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the heart of game development, where the magic happens—shaping the
    player’s experience. In this Section, as this section serves as an introduction
    to help you understand player experience, we delve into the art of crafting immersive
    worlds that captivate players and leave a lasting impression. Player experience
    isn’t just a feature; it’s the soul of your game, and we’re here to guide you
    through the elements that will elevate your players’ journey.
  prefs: []
  type: TYPE_NORMAL
- en: '**Player experience**, commonly referred to as **PX** or **User Experience**
    (**UX**), stands as a vital aspect outlined in the GDD. It embodies the overall
    impression and emotions players undergo while immersed in a video game. Here are
    key components related to player experience in a GDD:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Emotional Engagement**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes intended emotional responses the game aims to evoke.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifies emotional journeys throughout different gameplay stages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Immersion**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details how the game intends to engage players in its virtual world.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Discusses features like realistic graphics, sound design, and narrative depth.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Challenge** **and Difficulty**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlines the balance between challenging gameplay and player engagement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines the difficulty curve and its evolution throughout the game.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reward System**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes how the game rewards players for achievements.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes points, power-ups, achievements, or other incentives.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Player Progression**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explains how players advance, gain new abilities, or unlock content.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlines the sense of progression and achievement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Narrative Impact**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discusses how the game’s story contributes to the overall player experience.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Addresses the integration of narrative with gameplay mechanics.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Interface (****UI) Feedback**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines how the UI communicates essential information to players.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures clear, intuitive feedback for an enhanced overall experience.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactivity**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes the level of player interaction with the game world.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes the responsiveness of controls, decision-making impact, and player
    agency.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pacing**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlines the rhythm and flow of the game, balancing tension, relaxation, and
    climax.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures engaging pacing throughout the player’s journey.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accessibility**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addresses how the game accommodates players of various skill levels and preferences.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures inclusivity and a positive experience for a diverse audience.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As you dive into crafting player experiences, remember that every part of your
    game, be it the gameplay mechanics or the storytelling, plays a role in engaging
    players. It’s more than just creating a game; it’s about connecting emotionally
    with your audience. Through a well-designed player experience, your game evolves
    from simple entertainment to a memorable journey for those who step into your
    virtual realms.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll explore the process of structuring our Unity project,
    task organization, and the significance of incorporating version control.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk about the Project organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s jump into project organization—an essential skill for solo developers
    and team players alike. This section reveals the keys to using Git for version
    control and Hack N Plan for project coordination. Mastering project organization
    boosts efficiency, whether you’re working alone or with a team. Starting here
    sets the stage for a smoother game development journey. So, grab your toolkit,
    let’s dive in, and make organization your superpower!
  prefs: []
  type: TYPE_NORMAL
- en: Whether working solo or in a team, organizing your game project saves time and
    adds flexibility. A structured approach in game development keeps you on track
    and streamlines workflows. It’s like having a map for your journey—easing navigation
    through challenges and ensuring a smoother development path. Together, we’ll embark
    on this journey, keeping chaos at bay and paving the way for efficient game creation.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering Project Structure for Efficient Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s delve into the ways we’ll structure our project. We’ll cover three main
    aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover the importance of using a version control system for seamless collaboration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring and organizing the project within Unity, with helpful tips and best
    practices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging Hack N Plan to efficiently organize and manage tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next few sections, we will explore each point to gain valuable insights
    and skills for effective project organization.
  prefs: []
  type: TYPE_NORMAL
- en: Version Control System
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using a version control system in game development is crucial for both solo
    developers and teams. It acts like a safety net for your project, allowing you
    to track changes, revert to previous versions if something goes wrong, and collaborate
    seamlessly with others.
  prefs: []
  type: TYPE_NORMAL
- en: Even when working alone, it safeguards against accidental errors and provides
    a structured way to manage your project’s evolution. For teams, it ensures everyone
    stays on the same page, reduces conflicts, and simplifies collaboration, making
    the entire development process smoother and more organized. In essence, it’s a
    tool that keeps your game development journey hassle-free and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In the vast world of version control systems, such as Git, Perforce, and Unity’s
    official version control, Plastic, we’ll simplify things in this book by focusing
    on Git and GitHub. While you’re free to choose your preferred tools, we recommend
    using GitHub for better alignment with the provided code and seamless workflow
    tracking.
  prefs: []
  type: TYPE_NORMAL
- en: How version control works
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Version control is like a safety net for your game project. Imagine you’re trying
    out a new feature, but it doesn’t quite work as expected. With version control,
    you can easily revert to a clean, functional version, undoing any experimental
    changes. It’s like having a time machine for your project, letting you iterate
    on ideas without fear.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, if you need to switch gears and help out with a major issue in the
    main project, version control lets you save your changes for later. Once the urgent
    task is handled, you can seamlessly restore your experimental work. This system
    also prevents accidental overwrites when collaborating with a team. Every time
    you commit your work, you’ll check for the latest updates, ensuring you don’t
    clash with your teammates. While dealing with merge conflicts might sound daunting
    at first, it’s a manageable process once you get the hang of it.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for Version Control
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'No matter the version control system you choose, various best practices can
    enhance your team’s efficiency. Since each team has unique requirements, not every
    practice will suit all teams. The following are some of the best practices for
    version control:'
  prefs: []
  type: TYPE_NORMAL
- en: Commit frequently, but in small increments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that each commit corresponds to a specific task or ticket, keeping the
    changes focused and manageable. This practice makes it easier to identify and
    revert any negative changes without affecting positive ones in case of an issue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stay up to date with the latest changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularly pull the latest updates from the repository into your working copy
    to avoid working in isolation and minimize the chances of encountering merge conflicts.
    Incorporate this practice into your daily workflow for smoother collaboration
    and effective version control management.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Maintain clean and descriptive commit messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearly convey the purpose of each commit, making it easier to understand the
    project’s history. If using a task ticketing system, consider including a ticket
    number in your commit for better traceability and collaboration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next section, we will learn how to organize our Unity project and the
    importance of organizing the project properly.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing a Unity project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Efficiently organizing your Unity project not only simplifies version control
    but also improves overall team collaboration, leading to a smoother workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how to structure our project and organize our folders.
    We will also learn about the various naming conventions and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Folder Structure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here are some best practices for organizing the folders inside Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Document naming conventions and folder structure for easy file organization;
    consider a style guide or project template.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain consistency in naming conventions; avoid deviations. Amend rules universally,
    and automate changes using scripts for large-scale updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid spaces in file and folder names to prevent issues with Unity’s command
    line tools. Use CamelCase as an alternative.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create separate folders for testing or experimentation to keep non-production
    scenes organized. Subfolders with usernames can help divide work areas by team
    member.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep internal assets separate from third-party ones, especially if obtained
    from the Asset Store or other plug-ins, as they may have their own project structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While there’s no fixed rule for organizing your folders, the following *Figure
    1**.2* shows examples of how you might structure your Unity project:'
  prefs: []
  type: TYPE_NORMAL
- en: "![\uFEFFFigure 1.2 – Feature structure (left) and vertical structure (right)](img/B22017_01_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Feature structure (left) and vertical structure (right)
  prefs: []
  type: TYPE_NORMAL
- en: These setups revolve around categorizing your project by asset type, features,
    or systems. While you’re not obliged to use these specific folder names, they
    provide a helpful starting point.
  prefs: []
  type: TYPE_NORMAL
- en: For a more effective and streamlined organizational approach, it is advisable
    to utilize both methods simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following figure, we can use combined structures for better approach:'
  prefs: []
  type: TYPE_NORMAL
- en: "![ \uFEFFFigure 1.3 – Combined structure](img/B22017_01_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Combined structure
  prefs: []
  type: TYPE_NORMAL
- en: Alright, let’s streamline and enhance our workflow by implementing an automated
    system to create folders effortlessly, ensuring a more efficient and time-saving
    approach in our project management.
  prefs: []
  type: TYPE_NORMAL
- en: In the following script, we’ll employ Unity Editor logic to generate folders
    and subfolders.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block shows static functions that you can use in the editor
    once you create the project to setup the folder structure you want.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also have the flexibility to modify names, paths, and the entire structure.
    We’ll make use of a dropdown menu when you click right click on mouse in the project
    tab within the editor to facilitate the creation of this folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 1**.4*, we can see the drop-down menu from which we can choose the
    **Create Default Folders** option to create our own default folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![  Figure 1.4 – Create default folders from menu](img/B22017_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Create default folders from menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we click on the **Create Default Folders** option, you will see the following
    panel from where you can name the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Type project name](img/B22017_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Type project name
  prefs: []
  type: TYPE_NORMAL
- en: Once you name the project, click on **Generate!**.
  prefs: []
  type: TYPE_NORMAL
- en: Naming Standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting standards isn’t just about project folders. Having a consistent naming
    convention for GameObjects in scenes or Prefabs in project folders can simplify
    collaboration within your team. While there’s no one-size-fits-all naming standard
    for GameObjects, here are some considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use descriptive names:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose names you’ll remember months from now.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure others can understand and pronounce the names.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid confusing abbreviations and spelling mistakes, for example, instead of
    **numBtn** use **numberButton** or **numericButton**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use Camel case/Pascal case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhance readability and typing accuracy, for examples, use **OutOfMemoryException**
    and **dateTimeFormat** and avoid using **Outofmemoryexception** and **datetimeformat**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow the design document naming:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use exact spellings from the design document for locations, for example, if
    the design document mentions **HighSpellTower**, maintain that spelling.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use underscores sparingly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally, avoid using underscores, but they are useful in specific cases. Like
    name clarity in long identifiers or avoiding name conflicts.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefixing with an underscore place it alphabetically first.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Denote variants of a specific object with underscores, for examples:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Active States: **EnterButton_Active**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Texture Maps: **Foliage_Diffuse**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the next section, we’ll explore techniques to streamline the workflow by
    utilizing presets, making the importing process more efficient:'
  prefs: []
  type: TYPE_NORMAL
- en: Workflow Optimization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other than deciding how and where to store your assets in the **Assets** folder,
    there are various design and development decisions that can enhance your work
    speed, particularly when utilizing version control. We will take a look at these
    in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Use Presets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Presets are predefined settings or configurations that you can save and apply
    to assets or components. Presets help you quickly apply consistent settings across
    different elements in your project, saving time and ensuring uniformity. They
    are commonly used for materials, lights, and other Unity components to streamline
    the development process. when you apply settings in one of the components you
    can select the preset window from the inspector and create a new preset to apply
    it later.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 1**.6*, you can see where to select the preset window in the inspector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Preset button](img/B22017_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Preset button
  prefs: []
  type: TYPE_NORMAL
- en: Applying settings from a preset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using a Preset is straightforward—go to the **Select Preset** window — this
    window will appear once you click on the preset selector icon (*Figure 1**.6*)
    — or drag the preset from the **Project** window to your GameObject with the component.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Preset Menu](img/B22017_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Preset Menu
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: When you apply a Preset, it’s like making a copy of the settings from the Preset
    to your item. The Preset and the item aren’t linked, so any changes to the Preset
    won’t affect items you applied it to previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply a Preset using the **Select Preset** window, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the GameObjects or assets where you want to apply the Preset. Click the
    Preset selector (the slider icon) in the **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Press on this button to choose preset](img/B22017_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Press on this button to choose preset
  prefs: []
  type: TYPE_NORMAL
- en: In the **Select Preset** window, find and select the Preset of your choice.
    By doing this, Unity will apply the selected Preset to your component, asset,
    or Project Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Select** **Preset** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you drag a component Preset onto your GameObject, you can do any one of
    the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Drop it on an existing GameObject in the **Hierarchy** window, and Unity will
    add a new component while copying properties from the Preset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop it on an empty area in the **Hierarchy** window to create a new, empty
    GameObject with properties from the Preset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop it on the **Inspector** window onto the title of an existing component,
    and Unity copies properties from the Preset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop it on an empty area in the **Inspector** window, and Unity will add a new
    component while copying properties from the Preset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separating your assets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following are some general tips for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Break Down Unity Scenes**: Divide levels into smaller scenes for efficient
    teamwork.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use SceneManager for Additive Loading**: At runtime, employ SceneManager
    LoadSceneAsync with **Additive** mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Utilize Prefabs for Modularity**: Break work into Prefabs for easier management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, we’ve shared just a handful of insightful tips to kickstart your project
    on the right foot, ensuring a clean and efficient foundation.
  prefs: []
  type: TYPE_NORMAL
- en: The HacknPlan Management tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let’s talk about the Hack N Plan management tool. It’s a crucial tool that
    will make organizing and managing your game development easier. Stay tuned as
    we explore its features, making your project management more straightforward and
    successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'While numerous management tools exist, for the purposes of this book, we’ll
    focus on demonstrating HacknPlan—a dedicated project management solution designed
    specifically for game development teams. Serving as a centralized hub, it caters
    to developers, designers, and team members, offering a suite of tools to effectively
    plan, monitor, and oversee the intricate process of creating video games. Key
    highlights of HacknPlan include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Task Management**: Users leverage HacknPlan to organize and oversee tasks
    systematically, categorizing them effectively. This tool is well-suited for the
    dynamic and ever-evolving nature of game development projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kanban Boards**: Utilizing a Kanban-style system, It’s like sticky notes.
    HacknPlan provides a visually intuitive representation of tasks as they move through
    different project stages like **To Do**, **In Progress**, and **Done**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with Version Control Systems**: HacknPlan seamlessly integrates
    with version control systems like Git, fostering collaboration and ensuring meticulous
    tracking of changes contributed by diverse team members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time Tracking**: HacknPlan enables users to track time spent on various tasks,
    offering insights into project timelines and resource allocation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team Collaboration**: HacknPlan facilitates collaboration among team members
    by enabling task-related discussions, file sharing, and fostering overall communication
    within the platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agile Methodology Support**: Aligned with agile development principles, HacknPlan
    empowers teams to adapt to changes effectively and implement gradual improvements
    through an iterative development process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roadmap Planning**: Teams can create and visualize project roadmaps on HacknPlan,
    outlining essential milestones and objectives for different development phases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game Design Documentation**: HacknPlan often includes tools for creating
    and managing game design documentation, ensuring a centralized repository for
    project-related information that’s easily accessible to the team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image shows the default screen inside HacknPlan which we can
    start adding cards for tasks check *Figure 1**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Empty project at HacknPlan](img/B22017_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Empty project at HacknPlan
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the example of organizing tasks, check *Figure 1**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Example of organizing cards](img/B22017_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Example of organizing cards
  prefs: []
  type: TYPE_NORMAL
- en: As we wrap up our exploration of organizing projects in game development, it’s
    time to sum up what we’ve learned. We’ve dug into the essentials of working together
    seamlessly with version control, arranging our game elements efficiently within
    Unity, and mastering task management using Hack N Plan.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve covered these key aspects, you’re standing at the end of this
    chapter with a toolbox of valuable skills. Whether you’re a lone wolf or part
    of a team, these insights will be your companions in the world of game development.
  prefs: []
  type: TYPE_NORMAL
- en: So, as you close this chapter, remember that effective organization is not just
    a skill; it’s the backbone of a successful game development adventure. May your
    future projects be smooth, your collaborations thrive, and your games leave a
    lasting impact. Best of luck as you apply these lessons to your game-making endeavours!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into the basics of game design, introducing the GDD
    and how it shapes the gaming experience. Moving to project organization in Unity
    2024, we explored the details of a version control system, understanding how it
    works and sharing best practices for working together. Then, we talked about organizing
    Unity projects, focusing on having a well-arranged folder system, using consistent
    names, and making work smoother. We also learned about presets and why it’s important
    to keep assets separate.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter ended with a closer look at “Hack N Plan,” a helpful tool for team
    collaboration, organizing tasks well, and making communication effective. Now,
    with insights into game design basics, project organization tips, and powerful
    tools, we’re ready for the hands-on part of game development. Join us in the next
    chapters for practical applications of these principles!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, *Writing Clean and Modular C# Code*, we’ll delve deeper
    into project organization, focusing on clean and modular code structures. Building
    on this chapter’s foundation, we’ll explore game design principles through practical
    examples from our own game development.
  prefs: []
  type: TYPE_NORMAL
- en: A key highlight will be an exploration of SOLID principles and other software
    fundamentals, helping us write efficient code that follows best practices. This
    chapter aims to demystify the principles behind robust and flexible code, providing
    the tools to create captivating and enduring games.
  prefs: []
  type: TYPE_NORMAL
- en: Get ready to apply these principles hands-on, forging a path towards mastery
    in the art and science of game development.
  prefs: []
  type: TYPE_NORMAL
