["```cs\n<TextBlock Text=\"{Binding (Attached:TextBoxProperties.Label),\n  RelativeSource={RelativeSource AncestorType=TextBox}, FallbackValue=''}\"\n  Foreground=\"{Binding (Attached:TextBoxProperties.LabelColor), \n  RelativeSource={RelativeSource AncestorType=TextBox}, \n  FallbackValue=#FF000000}\" Visibility=\"{Binding Text, \n  RelativeSource={RelativeSource AncestorType=TextBox},  \n  Converter={StaticResource StringToVisibilityConverter},  \n  FallbackValue=Collapsed}\" ... />  \n```", "```cs\npublic ConcreteImplementation(Type type, \n  params object[] constructorParameters) \n{ \n  Type = type; \n  ConstructorParameters = constructorParameters; \n} \n```", "```cs\npublic DependencyRegistration(Type interfaceType,  \n  IEnumerable<ConcreteImplementation> concreteImplementations) \n{ \n  if (!concreteImplementations.All(c =>\n    interfaceType.IsAssignableFrom(c.Type)))\n    throw new ArgumentException(\"The System.Type object specified by the \n    ConcreteImplementation.Type property must implement the interface type \n    specified by the interfaceType input parameter.\", \n    nameof(interfaceType));\n  ConcreteImplementations = concreteImplementations; \n  InterfaceType = interfaceType; \n} \n```", "```cs\nusing System.Reflection;\n\n...\n\npublic void RegisterAllInterfacesInAssemblyOf<T>() where T : class \n{ \n  Assembly assembly = typeof(T).Assembly; \n  IEnumerable<Type> interfaces = \n    assembly.GetTypes().Where(p => p.IsInterface); \n  foreach (Type interfaceType in interfaces) \n  { \n    IEnumerable<Type> implementingTypes = assembly.GetTypes().\n      Where(p => interfaceType.IsAssignableFrom(p) && !p.IsInterface); \n    ConcreteImplementation[] concreteImplementations = implementingTypes.\n      Select(t => new ConcreteImplementation(t, null)).ToArray();       \n    if (concreteImplementations != null && concreteImplementations.Any()) \n      registeredDependencies.Add(interfaceType, concreteImplementations); \n  } \n} \n```", "```cs\nprivate void RegisterDependencies() \n{ \n  DependencyManager.Instance.ClearRegistrations(); \n  DependencyManagerAdvanced.Instance. \n    RegisterAllInterfacesInAssemblyOf<IDataProvider>(); \n  DependencyManagerAdvanced.Instance. \n    RegisterAllInterfacesInAssemblyOf<IUiThreadManager>(); \n  DependencyManagerAdvanced.Instance. \n    RegisterAllInterfacesInAssemblyOf<IUserViewModel>(); \n} \n```", "```cs\nDependencyManager.Instance.\n  RegisterAllConcreteImplementationsInAssemblyOf<MockUiThreadManager>(); \n```", "```cs\npublic Error(Exception exception, User createdBy)  \n{ \n  Id = Guid.NewGuid(); \n  Message = FlattenInnerExceptions(exception); \n  StackTrace = exception.StackTrace; \n  Area = exception.TargetSite.Module.ToString(); \n  CreatedOn = DateTime.Now; \n  CreatedBy = createdBy; \n} \n```"]