- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Building Efficient Microservices Using gRPC
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用gRPC构建高效的微服务
- en: In this chapter, you will be introduced to gRPC, which enables a developer to
    build services that can communicate highly efficiently across most platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解gRPC，它使开发者能够构建可以在大多数平台上高效通信的服务。
- en: However, web browsers do not have full support for programmatic access to all
    features of HTTP/2, which is required by gRPC. This makes gRPC most useful for
    implementing intermediate tier-to-tier services and microservices because they
    must perform a lot of communication between multiple microservices to achieve
    a complete task. Improving the efficiency of that communication is vital to the
    success of the scalability and performance of microservices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，网络浏览器并不完全支持对HTTP/2所有功能的程序性访问，而gRPC需要这些功能。这使得gRPC在实现中间层到层服务和微服务时最为有用，因为它们必须在多个微服务之间进行大量通信以完成完整任务。提高这种通信的效率对于微服务的可扩展性和性能的成功至关重要。
- en: A modular monolithic, two-tier, client-to-service style service is inherently
    more efficient because the communication between modules is in-process and there
    is only one layer of network communication between the whole service and the clients.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化单体、两层、客户端到服务风格的服务天生更有效率，因为模块之间的通信是在进程内进行的，整个服务与客户端之间只有一层网络通信。
- en: 'Microservice architecture has more tiers, and therefore more layers of network
    communication between the many microservices. It becomes more important to have
    highly efficient communication between those layers, and gRPC is designed to be
    ultra-efficient for network communication, as shown in *Figure 13.1*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构有更多层级，因此许多微服务之间有更多的网络通信层。在这些层之间拥有高度高效的通信变得尤为重要，gRPC就是为了实现网络通信的超高效而设计的，如*图13.1*所示：
- en: '![](img/B19587_13_01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_13_01.png)'
- en: 'Figure 13.1: Comparing a two-tier modular monolithic service with multi-tier
    microservices'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：比较两层模块化单体服务和多层微服务
- en: '**Good Practice**: It has been fashionable in the past decade or so to assume
    that microservices are best for all scenarios, and so for a new system to immediately
    be implemented using cool microservices rather than as a traditional monolith.
    More recently, there has been a pushback against this assumption. The industry
    seems to be settling on the recommendation to start by implementing a system as
    a modular monolith. Only later, if necessary, should you break the modules apart
    into actual microservices. As well as being inherently slower due to the extra
    network communication between microservices, you also need to consider whether
    the extra coordination and complexity of deployments and orchestration of microservices
    is worth it.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在过去的十年左右，人们普遍认为微服务对所有场景都是最佳选择，因此对于一个新的系统，最好是立即使用酷炫的微服务而不是作为传统的单体来实施。最近，人们开始对这个假设进行反驳。行业似乎已经达成共识，建议首先将系统作为一个模块化单体来实施。只有在必要时，才应该将模块拆分成实际的微服务。由于微服务之间额外的网络通信导致其本质上较慢，您还需要考虑额外的微服务部署和编排的协调和复杂性是否值得。'
- en: 'This chapter will cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding gRPC
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解gRPC
- en: Building a gRPC service and client
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建gRPC服务和客户端
- en: Implementing gRPC for an EF Core model
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为EF Core模型实现gRPC
- en: Taking gRPC further
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将gRPC进一步发展
- en: Handling dates, times, and decimal numbers
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理日期、时间和十进制数
- en: Implementing interceptors and handling faults
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现拦截器和处理故障
- en: Implementing gRPC JSON transcoding
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现gRPC JSON转换
- en: Understanding gRPC
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解gRPC
- en: gRPC is a modern, open-source, high-performance **Remote Procedure Call** (**RPC**)
    framework that can run in any environment. An RPC is when one computer calls a
    procedure in another process or on another computer over a network as if it were
    calling a local procedure. It is an example of a client-server architecture.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC是一个现代、开源、高性能的**远程过程调用**（RPC）框架，可以在任何环境中运行。RPC是指一台计算机通过网络调用另一台计算机上的过程或服务，就像调用本地过程一样。它是一个客户端-服务器架构的例子。
- en: 'You can learn more about RPCs at the following link: [https://en.wikipedia.org/wiki/Remote_procedure_call](https://en.wikipedia.org/wiki/Remote_procedure_call).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多关于RPC的信息：[https://en.wikipedia.org/wiki/Remote_procedure_call](https://en.wikipedia.org/wiki/Remote_procedure_call)。
- en: How gRPC works
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: gRPC的工作原理
- en: A gRPC service developer defines a service interface for the methods that can
    be called remotely, including defining the method parameters and return types.
    The service implements this interface and runs a gRPC server to handle client
    calls.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC 服务开发者为可以远程调用的方法定义一个服务接口，包括定义方法参数和返回类型。服务实现此接口并运行 gRPC 服务器以处理客户端调用。
- en: On the client, a strongly typed gRPC client provides the same methods as on
    the server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，强类型 gRPC 客户端提供与服务器上相同的方法。
- en: Defining gRPC contracts with .proto files
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 .proto 文件定义 gRPC 合约
- en: gRPC uses contract-first API development that supports language-agnostic implementations.
    A **contract** in this case is an agreement that a service will expose a defined
    list of methods with specified parameters and return types that implement a prescribed
    behavior. A client that wishes to call the service can be certain that the service
    will continue to conform to the contract over time. For example, although new
    methods might be added, existing ones will never change or be removed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC 使用以合约优先的 API 开发，支持语言无关的实现。在这种情况下，**合约**是一份协议，表示一个服务将公开一系列具有指定参数和返回类型的方法，以实现预定的行为。希望调用服务的客户端可以确信服务将随着时间的推移继续遵守合约。例如，尽管可能会添加新方法，但现有方法永远不会更改或删除。
- en: You write the contracts using `.proto` files that have their own language syntax
    and then use tools to convert them into various languages like C#. The `.proto`
    files are used by both the server and client to exchange messages in the correct
    format.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.proto` 文件编写合约，这些文件有自己的语言语法，然后使用工具将它们转换为各种语言，如 C#。服务器和客户端都使用 `.proto` 文件以正确的格式交换消息。
- en: 'Here’s an example `.proto` file using `proto3` syntax to define a message request
    that uses a custom `enum`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用 `proto3` 语法定义消息请求的 `.proto` 文件示例，该请求使用自定义 `enum`：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**More Information**: The Protobuf style guide recommends using all lowercase
    with underscores for field names, all uppercase with underscores for `enum` values,
    and so on. The C# tooling will automatically convert to .NET styles in the auto-generated
    types it creates for you. You can read more recommendations at the following link:
    [https://protobuf.dev/programming-guides/style/](https://protobuf.dev/programming-guides/style/).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：Protobuf 风格指南建议使用全部小写并带有下划线的字段名称，全部大写并带有下划线的 `enum` 值等。C# 工具将自动将自动为您创建的自动生成的类型转换为
    .NET 风格。您可以在以下链接中阅读更多建议：[https://protobuf.dev/programming-guides/style/](https://protobuf.dev/programming-guides/style/)。'
- en: Fields must be given a unique number between 1 and 536,870,911\. You cannot
    use the range 19,000 to 19,999 because they are reserved for the Protocol Buffers
    implementation. These numbers are used instead of the field name during serialization
    to save space in the binary format.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 字段必须赋予一个介于 1 和 536,870,911 之间的唯一编号。您不能使用 19,000 到 19,999 的范围，因为这些是为 Protocol
    Buffers 实现保留的。这些数字在序列化期间代替字段名称使用，以在二进制格式中节省空间。
- en: '**Good Practice**: Field numbers cannot be changed once you start using a message
    because they are tightly bound to the very efficient wire format used by gRPC.
    Changing a field number is the equivalent of deleting and creating a new field.
    You should also never reuse a field number. You can read about the consequences
    of misusing field numbers at the following link: [https://protobuf.dev/programming-guides/proto3/#consequences](https://protobuf.dev/programming-guides/proto3/#consequences).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：一旦开始使用消息，字段编号就不能更改，因为它们与 gRPC 使用的非常高效的线格式紧密绑定。更改字段编号相当于删除并创建一个新的字段。您也不应重复使用字段编号。您可以在以下链接中了解误用字段编号的后果：[https://protobuf.dev/programming-guides/proto3/#consequences](https://protobuf.dev/programming-guides/proto3/#consequences)。'
- en: 'Field data types cannot be null, so all number types default to zero (`0`).
    Number and other field data types are shown in *Table 13.1*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 字段数据类型不能为空，因此所有数字类型默认为零 (`0`)。数字和其他字段数据类型在 *表 13.1* 中显示：
- en: '| **Type** | **Description** |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **描述** |'
- en: '| `string` | Text values. Defaults to an empty string. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `string` | 文本值。默认为空字符串。 |'
- en: '| `bool` | Boolean values. Defaults to `false`. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `bool` | 布尔值。默认为 `false`。 |'
- en: '| `int32`, `int64` | Variable length encoded 32- and 64-bit integer values.
    Although they can be used for negative values, it is more efficient to use `sint32`
    or `sint64`. The C# equivalents to `int` and `long`. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `int32`, `int64` | 可变长度编码的 32 位和 64 位整数值。尽管它们可以用于负值，但使用 `sint32` 或 `sint64`
    更有效。C# 中 `int` 和 `long` 的等效值。 |'
- en: '| `sint32`, `sint64`, `uint32`, `uint64` | Variable length encoded 32- and
    64-bit signed and unsigned integer values. The C# equivalent to `int` and `long`,
    and `uint` and `ulong`. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `sint32`，`sint64`，`uint32`，`uint64` | 可变长度编码的 32 位和 64 位有符号和无符号整数值。C# 中 `int`
    和 `long` 的等效物，以及 `uint` 和 `ulong`。 |'
- en: '| `fixed32`, `fixed64`, `sfixed32`, `sfixed64` | Always four bytes for 32,
    or eight bytes for 64\. The C# equivalent to `uint` and `ulong`, and `int` and
    `long`. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `fixed32`，`fixed64`，`sfixed32`，`sfixed64` | 32 位始终为 4 个字节，64 位始终为 8 个字节。C#
    中 `uint` 和 `ulong` 以及 `int` 和 `long` 的等效物。 |'
- en: '| `float`, `double` | Floating point real numbers. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `float`，`double` | 浮点实数。 |'
- en: '| `bytes` | Maximum 2^(32) bytes (4,294,967,296). Use `ByteString.CopyFrom(byte[]
    data)` to create a new instance. Use `ToByteArray()` to get the byte array. Defaults
    to an empty `ByteString` value. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `bytes` | 最大 2^(32) 字节（4,294,967,296）。使用 `ByteString.CopyFrom(byte[] data)`
    创建一个新实例。使用 `ToByteArray()` 获取字节数组。默认为空的 `ByteString` 值。 |'
- en: 'Table 13.1: Number and other field data types in Protobuf'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.1：Protobuf 中的数字和其他字段数据类型
- en: '**More Information**: The official guide is found at the following link: [https://protobuf.dev/programming-guides/proto3/](https://protobuf.dev/programming-guides/proto3/).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：官方指南可在以下链接找到：[https://protobuf.dev/programming-guides/proto3/](https://protobuf.dev/programming-guides/proto3/)。'
- en: gRPC benefits
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: gRPC 优点
- en: gRPC minimizes network usage by using **Protobuf** binary serialization that
    is not human-readable, unlike JSON or XML used by web services.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC 通过使用不适用于人类阅读的二进制序列化 **Protobuf** 来最小化网络使用，与用于 Web 服务的 JSON 或 XML 不同。
- en: gRPC requires HTTP/2, which provides significant performance benefits over earlier
    versions, like binary framing and compression, and multiplexing of HTTP/2 calls
    over a single connection.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC 需要 HTTP/2，这比早期版本（如二进制帧和压缩，以及 HTTP/2 调用的多路复用）提供了显著的性能优势。
- en: Binary framing means how the HTTP messages are transferred between the client
    and server. HTTP/1.x uses newline delimited plaintext. HTTP/2 splits communication
    into smaller messages (frames) that are encoded in binary format. Multiplexing
    means combining multiple messages from different sources into a single message
    to more efficiently use a shared resource like a network transport.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制帧表示客户端和服务器之间如何传输 HTTP 消息。HTTP/1.x 使用换行符分隔的纯文本。HTTP/2 将通信分割成更小的消息（帧），并以二进制格式编码。多路复用意味着将来自不同来源的多个消息组合成一个消息，以更有效地使用共享资源，如网络传输。
- en: '**More Information**: If you are interested in more details about HTTP/2 and
    how it makes gRPC more efficient, you can read about it at the following link:
    [https://grpc.io/blog/grpc-on-http2/](https://grpc.io/blog/grpc-on-http2/).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：如果您想了解更多关于 HTTP/2 以及它是如何使 gRPC 更高效的信息，您可以在以下链接中阅读：[https://grpc.io/blog/grpc-on-http2/](https://grpc.io/blog/grpc-on-http2/)。'
- en: gRPC limitations
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: gRPC 限制
- en: The main limitation of gRPC is that it cannot be used in web browsers because
    no browser provides the level of control required to support a gRPC client. For
    example, browsers do not allow a caller to require that HTTP/2 be used.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC 的主要限制是它不能在 Web 浏览器中使用，因为没有浏览器提供支持 gRPC 客户端所需级别的控制。例如，浏览器不允许调用者要求使用 HTTP/2。
- en: Another limitation for developers is that due to the binary format of the messages,
    it is harder to diagnose and monitor issues. Many tools do not understand the
    format and cannot show messages in a human-readable format.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发人员来说，另一个限制是由于消息的二进制格式，诊断和监控问题更困难。许多工具不理解该格式，无法以人类可读的格式显示消息。
- en: There is an initiative called **gRPC-Web** that adds an extra proxy layer, and
    the proxy forwards requests to the gRPC server. However, it only supports a subset
    of gRPC due to the listed limitations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为 **gRPC-Web** 的倡议，它添加了一个额外的代理层，代理将请求转发到 gRPC 服务器。然而，由于列出的限制，它只支持 gRPC 的一个子集。
- en: Types of gRPC methods
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: gRPC 方法的类型
- en: gRPC has four types of method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC 有四种方法类型。
- en: 'The first method is the most common:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是最常见的：
- en: '**Unary** methods have structured request and response messages. A unary method
    completes when the response message is returned. Unary methods should be chosen
    in all scenarios that do not require a stream.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一** 方法具有结构化的请求和响应消息。单一方法在返回响应消息时完成。在不要求流的所有场景中应选择单一方法。'
- en: Streaming methods are used when a large amount of data must be exchanged, and
    they do so by using a stream of bytes. They have the `stream` keyword prefix for
    either an input parameter, an output parameter, or both.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当必须交换大量数据时，使用流式方法，它们通过使用字节流来这样做。它们具有 `stream` 关键字前缀，可以是输入参数、输出参数或两者。
- en: 'The three streaming methods are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 三个流式方法如下：
- en: '**Server streaming** methods receive a request message from the client and
    return a stream. Multiple messages can be returned over the stream. A server streaming
    call ends when the server side method returns, but the server side method could
    run until it receives a cancellation token from the client.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器流式**方法从客户端接收请求消息并返回一个流。可以通过流返回多个消息。服务器流式调用在服务器端方法返回时结束，但服务器端方法可能运行直到从客户端收到取消令牌。'
- en: '**Client streaming** methods only receive a stream from the client without
    any message. The server side method processes the stream until it is ready to
    return a response message. Once the server side method returns its message, the
    client streaming call is done.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端流式**方法仅从客户端接收流，不包含任何消息。服务器端方法处理流，直到准备好返回响应消息。一旦服务器端方法返回消息，客户端流式调用完成。'
- en: '**Bi-directional streaming** methods only receive a stream from the client
    without any message and only return data via a second stream. The call is done
    when the server side method returns. Once a bi-directional streaming method is
    called, the client and service can send messages to each other at any time.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**双向流式**方法仅从客户端接收流，不包含任何消息，并且仅通过第二个流返回数据。调用在服务器端方法返回时完成。一旦调用双向流式方法，客户端和服务可以在任何时间互相发送消息。'
- en: In this book, we will only look at the details of unary methods. If you would
    like the next edition to cover streaming methods, please let me know.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将仅查看一元方法的细节。如果您希望下一版涵盖流式方法，请告知我。
- en: Microsoft’s gRPC packages
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微软的 gRPC 包
- en: Microsoft has invested in building a set of packages for .NET to work with gRPC
    and, since May 2021, it is Microsoft’s recommended implementation of gRPC for
    .NET.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 微软投资构建了一套用于 .NET 与 gRPC 一起工作的包，自 2021 年 5 月以来，它是微软推荐的 .NET gRPC 实现。
- en: 'Microsoft’s gRPC for .NET includes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的 .NET gRPC 包含：
- en: '`Grpc.AspNetCore` for hosting a gRPC service in ASP.NET Core.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grpc.AspNetCore` 用于在 ASP.NET Core 中托管 gRPC 服务。'
- en: '`Grpc.Net.Client` for adding gRPC client support to any .NET project by building
    on `HttpClient`.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grpc.Net.Client` 通过在 `HttpClient` 上构建为任何 .NET 项目添加 gRPC 客户端支持。'
- en: '`Grpc.Net.ClientFactory` for adding gRPC client support to any .NET code base
    by building on `HttpClientFactory`.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grpc.Net.ClientFactory` 通过在 `HttpClientFactory` 上构建为任何 .NET 代码库添加 gRPC 客户端支持。'
- en: 'You can learn more at the following link: [https://github.com/grpc/grpc-dotnet](https://github.com/grpc/grpc-dotnet).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接了解更多信息：[https://github.com/grpc/grpc-dotnet](https://github.com/grpc/grpc-dotnet)。
- en: Building a gRPC service and client
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个 gRPC 服务和客户端
- en: Let’s see an example service and client for sending and receiving simple messages.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个示例服务客户端，用于发送和接收简单消息。
- en: Building a Hello World gRPC service
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个 Hello World gRPC 服务
- en: 'We will start by building the gRPC service using one of the project templates
    provided as standard:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用提供的标准项目模板之一构建 gRPC 服务：
- en: 'Use your preferred code editor to create a new project, as defined in the following
    list:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器创建一个新项目，如下列所示：
- en: 'Project template: **ASP.NET Core gRPC Service** / `grpc`'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core gRPC 服务** / `grpc`
- en: 'Solution file and folder: `Chapter13`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter13`
- en: 'Project file and folder: `Northwind.Grpc.Service`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Grpc.Service`
- en: '**Enable Docker**: Cleared.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 Docker**：已清除。'
- en: '**Do not use top-level statements**: Cleared.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶层语句**：已清除。'
- en: '**Enable native AOT publish**: Selected.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用原生 AOT 发布**：已选择。'
- en: '**Good Practice**: Make sure to select **Enable native AOT publish**. With
    .NET 8 and later, gRPC projects can be **ahead-of-time** (**AOT**) compiled for
    native platforms. This gives improved performance and a reduced start time, which
    is important for microservices that are frequently redeployed and spun up and
    down during scaling.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：请确保选择**启用原生 AOT 发布**。从 .NET 8 及以后版本开始，gRPC 项目可以针对原生平台**提前编译**（**AOT**），这提供了改进的性能和缩短的启动时间，这对于频繁重新部署和扩展时上下文切换的微服务来说非常重要。'
- en: 'In the `Protos` folder, in `greet.proto`, note that it defines a service named
    `Greeter` with a method named `SayHello` that exchanges messages named `HelloRequest`
    and `HelloReply`, as shown in the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Protos` 文件夹中的 `greet.proto` 中，请注意它定义了一个名为 `Greeter` 的服务，以及一个名为 `SayHello`
    的方法，该方法交换名为 `HelloRequest` 和 `HelloReply` 的消息，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For working with `.proto` files in Visual Studio Code, you can install the
    extension **vscode-proto3** (`zxh404.vscode-proto3`). For Rider, you can install
    the Protocol Buffers plugin from JetBrains, as shown at the following link: [https://plugins.jetbrains.com/plugin/14004-protocol-buffers](https://plugins.jetbrains.com/plugin/14004-protocol-buffers).'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中处理`.proto`文件时，你可以安装扩展**vscode-proto3**（`zxh404.vscode-proto3`）。对于Rider，你可以从JetBrains安装Protocol
    Buffers插件，如下链接所示：[https://plugins.jetbrains.com/plugin/14004-protocol-buffers](https://plugins.jetbrains.com/plugin/14004-protocol-buffers)。
- en: 'In `Northwind.Grpc.Service.csproj`, note that this project has native AOT publish
    enabled, the `.proto` file is registered for use on the server side, and the package
    reference for implementing a gRPC service hosted in ASP.NET Core, as shown highlighted
    in the following markup:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Service.csproj`中，注意这个项目启用了原生AOT发布，`.proto`文件已注册用于服务器端使用，并且包含了实现托管在ASP.NET
    Core中的gRPC服务的包引用，如图中高亮显示的标记所示：
- en: '[PRE2]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For JetBrains Rider, manually add `<PublishAot>true</PublishAot>` if it is missing.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于JetBrains Rider，如果缺少，请手动添加`<PublishAot>true</PublishAot>`。
- en: 'Set invariant globalization to `false`, as shown in the following markup:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将不变的全局化设置为`false`，如下所示：
- en: '[PRE3]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `Services` folder, in `GreeterService.cs`, note that it inherits from
    a class named `GreeterBase` and it asynchronously implements the `Greeter` service
    contract by having a `SayHello` method that accepts a `HelloRequest` input parameter
    and returns a `HelloReply`, as shown in the following code:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Services`文件夹中的`GreeterService.cs`中，注意它继承自一个名为`GreeterBase`的类，并且它通过一个接受`HelloRequest`输入参数并返回`HelloReply`的`SayHello`方法异步实现`Greeter`服务合同，如下所示：
- en: '[PRE4]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you are using Visual Studio 2022, in **Solution Explorer**, click **Show
    All Files**. If you are using JetBrains Rider, then hover over the **Solution**
    pane and click the eyeball icon.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是Visual Studio 2022，在**解决方案资源管理器**中，点击**显示所有文件**。如果你使用的是JetBrains Rider，那么将鼠标悬停在**解决方案**面板上，并点击眼睛图标。
- en: 'In the `obj\Debug\net8.0\Protos` folder, note the two class files named `Greet.cs`
    and `GreetGrpc.cs` that are automatically generated from the `greet.proto` file,
    as shown in *Figure 13.2*:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`obj\Debug\net8.0\Protos`文件夹中，注意从`greet.proto`文件自动生成的两个名为`Greet.cs`和`GreetGrpc.cs`的类文件，如图13.2所示：
- en: '![](img/B19587_13_02.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_02.png)'
- en: 'Figure 13.2: The autogenerated class files from a .proto file for a gRPC service'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：从.proto文件自动生成的gRPC服务类文件
- en: In `GreetGrpc.cs`, note the `Greeter.GreeterBase` class that the `GreeterService`
    class inherited from. You do not need to understand how this base class is implemented,
    but you should know it is what handles all the details of gRPC’s efficient communication.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GreetGrpc.cs`中，注意`Greeter.GreeterBase`类，这是`GreeterService`类继承的。你不需要了解这个基类的实现细节，但你应该知道它是处理gRPC高效通信所有细节的部分。
- en: If you are using Visual Studio 2022, in **Solution Explorer**, expand **Dependencies**,
    expand **Packages**, expand **Grpc.AspNetCore**, and note that it has dependencies
    on Google’s **Google.Protobuf** package, and Microsoft’s **Grpc.AspNetCore.Server.ClientFactory**
    and **Grpc.Tools** packages, as shown in *Figure 13.3*:![](img/B19587_13_03.png)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是Visual Studio 2022，在**解决方案资源管理器**中，展开**依赖项**，展开**包**，展开**Grpc.AspNetCore**，并注意它依赖于Google的**Google.Protobuf**包，以及Microsoft的**Grpc.AspNetCore.Server.ClientFactory**和**Grpc.Tools**包，如图13.3所示：![图片](img/B19587_13_03.png)
- en: 'Figure 13.3: The Grpc.AspNetCore package references the Grpc.Tools and Google.Protobuf
    packages'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.3：Grpc.AspNetCore包引用了Grpc.Tools和Google.Protobuf包
- en: The `Grpc.Tools` package generates the C# class files from the registered `.proto`
    files, and those class files use types defined in Google’s package to implement
    the serialization to the Protobuf serialization format. The `Grpc.AspNetCore.Server.ClientFactory`
    package includes both server side and client-side support for gRPC in a .NET project.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Grpc.Tools`包从注册的`.proto`文件生成C#类文件，这些类文件使用Google包中定义的类型来实现对Protobuf序列化格式的序列化。`Grpc.AspNetCore.Server.ClientFactory`包在一个.NET项目中包含了gRPC的服务端和客户端支持。'
- en: 'In `Program.cs`, in the section that configures services, note the call to
    add gRPC to the `Services` collection, as shown in the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在配置服务的部分，注意调用将gRPC添加到`Services`集合，如下所示：
- en: '[PRE5]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In `Program.cs`, in the section for configuring the HTTP pipeline, note the
    call to map the `Greeter` service, as shown in the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在配置HTTP管道的部分，注意调用映射`Greeter`服务，如下所示：
- en: '[PRE6]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `Properties` folder, open `launchSettings.json` and modify the `applicationUrl`
    setting to use port `5131` for `https` and port `5132` for `http`, as shown highlighted
    in the following markup:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Properties` 文件夹中，打开 `launchSettings.json` 并修改 `applicationUrl` 设置，以使用端口 `5131`
    进行 `https` 连接和端口 `5132` 进行 `http` 连接，如下所示（高亮显示）：
- en: '[PRE7]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build the `Northwind.Grpc.Service` project.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Grpc.Service` 项目。
- en: Project file item configuration
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目文件项目配置
- en: Before we continue, let’s quickly review common project file item configuration
    syntax.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们快速回顾一下常见的项目文件项目配置语法。
- en: 'Item configuration generated by Visual Studio 2022 commonly uses attributes
    for the item properties, as shown in the following markup:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2022 生成的项目配置通常使用属性来表示项目属性，如下所示：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Properties not explicitly set will have their default values.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 未显式设置的属性将使用其默认值。
- en: 'Item configuration generated by other tools like JetBrains Rider commonly uses
    child elements for the item properties, as shown in the following markup:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由其他工具如 JetBrains Rider 生成的项目配置通常使用子元素来表示项目属性，如下所示：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: They both usually achieve the same ends. The first is more concise and recommended
    for use.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它们通常都能达到相同的目的。第一个更简洁，推荐使用。
- en: Building a Hello World gRPC client
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Hello World gRPC 客户端
- en: 'We will add an ASP.NET Core MVC website project and then add the gRPC client
    packages to enable it to call the gRPC service:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个 ASP.NET Core MVC 网站项目，然后添加 gRPC 客户端包以使其能够调用 gRPC 服务：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器添加一个新项目，如下列表所示：
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web App (Model-View-Controller)** / `mvc`
- en: 'Solution file and folder: `Chapter13`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter13`
- en: 'Project file and folder: `Northwind.Grpc.Client.Mvc`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Grpc.Client.Mvc`
- en: '**Authentication type**: None.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证类型**：无。'
- en: '**Configure for HTTPS**: Selected.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置为 HTTPS**：已选中。'
- en: '**Enable Docker**: Cleared.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 Docker**：已清除。'
- en: '**Do not use top-level statements**: Cleared.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶级语句**：已清除。'
- en: 'In the `Northwind.Grpc.Client.Mvc` project, treat warnings as errors, add package
    references for Microsoft’s gRPC client factory and tools, and Google’s .NET library
    for Protocol Buffers, as shown in the following markup:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，将警告视为错误，添加 Microsoft 的 gRPC 客户端工厂和工具以及 Google
    的 .NET Protocol Buffers 库的包引用，如下所示：
- en: '[PRE10]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Good Practice**: The `Grpc.Net.ClientFactory` package references the `Grpc.Net.Client`
    package that implements client-side support for gRPC in a .NET project, but it
    does not reference other packages like `Grpc.Tools` or `Google.Protobuf`. We must
    reference those packages explicitly. The `Grpc.Tools` package is only used during
    development, so it is marked as `PrivateAssets=all` to ensure that the tools are
    not published with the production website.'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：`Grpc.Net.ClientFactory` 包引用实现 .NET 项目中 gRPC 客户端支持的 `Grpc.Net.Client`
    包，但它不引用其他包如 `Grpc.Tools` 或 `Google.Protobuf`。我们必须显式引用这些包。`Grpc.Tools` 包仅在开发期间使用，因此被标记为
    `PrivateAssets=all` 以确保工具不会与生产网站一起发布。'
- en: 'In the `Properties` folder, open `launchSettings.json`, and for the `https`
    profile, modify the `applicationUrl` setting to use ports `5133` for `https` and
    `5134` for `http`, as shown highlighted in the following partial markup:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Properties` 文件夹中，打开 `launchSettings.json`，并为 `https` 配置文件修改 `applicationUrl`
    设置，以使用端口 `5133` 进行 `https` 连接和端口 `5134` 进行 `http` 连接，如下所示（部分高亮显示）：
- en: '[PRE11]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Copy the `Protos` folder from the `Northwind.Grpc.Service` project/folder to
    the `Northwind.Grpc.Client.Mvc` project/folder.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Protos` 文件夹从 `Northwind.Grpc.Service` 项目/文件夹复制到 `Northwind.Grpc.Client.Mvc`
    项目/文件夹。
- en: In Visual Studio 2022, you can drag and drop to copy. In Visual Studio Code
    or JetBrains Rider, drag and drop while holding the *Ctrl* or *Cmd* key.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2022 中，您可以拖放进行复制。在 Visual Studio Code 或 JetBrains Rider 中，按住
    *Ctrl* 或 *Cmd* 键进行拖放。
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `Protos` folder, in `greet.proto`,
    modify the namespace to match the namespace for the current project so that the
    automatically generated classes will be in the same namespace, as shown in the
    following code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，在 `Protos` 文件夹中，在 `greet.proto` 中，修改命名空间以匹配当前项目的命名空间，以便自动生成的类将在同一命名空间中，如下所示：
- en: '[PRE12]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `Northwind.Grpc.Client.Mvc` project file, add or modify the item group
    that registers the `.proto` file to indicate that it is being used on the client
    side, as shown highlighted in the following markup:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目文件中，添加或修改注册 `.proto` 文件的项组，以指示它在客户端侧使用，如下所示高亮显示的标记：
- en: '[PRE13]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Visual Studio 2022 will have created the item group for you, but it will set
    `GrpcServices` to `Server` by default, so you must manually change that to `Client`.
    For other code editors, you might have to create the whole `<ItemGroup>` manually.
    JetBrains Rider has more configuration but you can ignore it.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio 2022 将为您创建项目组，但默认将 `GrpcServices` 设置为 `Server`，因此您必须手动将其更改为 `Client`。对于其他代码编辑器，您可能需要手动创建整个
    `<ItemGroup>`。JetBrains Rider 有更多配置，但您可以忽略它。
- en: Build the `Northwind.Grpc.Client.Mvc` project to ensure that the automatically
    generated classes are created.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Grpc.Client.Mvc` 项目以确保创建自动生成的类。
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `obj\Debug\net8.0\Protos`
    folder, in `GreetGrpc.cs`, note the `Greeter.GreeterClient` class, as partially
    shown in the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，在 `obj\Debug\net8.0\Protos` 文件夹中的 `GreetGrpc.cs`
    文件中，注意 `Greeter.GreeterClient` 类，如下部分代码所示：
- en: '[PRE14]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In `Program.cs`, import the namespace for `Greeter.GreeterClient`, as shown
    in the following code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，导入 `Greeter.GreeterClient` 的命名空间，如下所示：
- en: '[PRE15]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `Program.cs`, in the section for configuring services, write a statement
    to add the `GreeterClient` as a named gRPC client that will be communicating with
    a service that is listening on port `5131`, as shown in the following code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在配置服务的部分，编写一个语句将 `GreeterClient` 添加为名为 gRPC 客户端，该客户端将与监听端口
    `5131` 的服务通信，如下所示：
- en: '[PRE16]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the `Models` folder, add a new class named `HomeIndexViewModel.cs`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Models` 文件夹中，添加一个名为 `HomeIndexViewModel.cs` 的新类。
- en: 'In `HomeIndexViewModel.cs`, define a class to store a greeting and an error
    message, as shown in the following code:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HomeIndexViewModel.cs` 中，定义一个类来存储问候语和错误消息，如下所示：
- en: '[PRE17]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace to
    work with the gRPC client factory, as shown in the following code:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Controllers` 文件夹中的 `HomeController.cs` 文件中，导入用于与 gRPC 客户端工厂一起工作的命名空间，如下所示：
- en: '[PRE18]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `Controller` class, declare a field to store a `Greeter Client` instance
    and set it by using the client factory in the constructor, as shown highlighted
    in the following code:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Controller` 类中，声明一个用于存储 `Greeter Client` 实例的字段，并在构造函数中使用客户端工厂设置它，如下所示高亮显示的代码：
- en: '[PRE19]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `Index` action method, make the method asynchronous, add a `string`
    parameter named `name` with a default value of `Henrietta`, and then add statements
    to use the gRPC client to call the `SayHelloAsync` method, passing a `HelloRequest`
    object and storing the `HelloReply` response in `ViewData`, while catching any
    exceptions, as shown highlighted in the following code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Index` 动作方法中，使方法异步，添加一个名为 `name` 的 `string` 参数，默认值为 `Henrietta`，然后添加语句使用
    gRPC 客户端调用 `SayHelloAsync` 方法，传递一个 `HelloRequest` 对象，并将 `HelloReply` 响应存储在 `ViewData`
    中，同时捕获任何异常，如下所示高亮显示的代码：
- en: '[PRE20]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In `Views/Home`, in `Index.cshtml`, after the **Welcome** heading, remove the
    existing `<p>` element and then add markup to render a form for the visitor to
    enter their name, and then if they submit and the gRPC service responds, to output
    the greeting, as shown highlighted in the following markup:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Views/Home` 中的 `Index.cshtml` 文件中，在 **欢迎** 标题之后，删除现有的 `<p>` 元素，然后添加标记以渲染一个表单供访客输入他们的名字，然后如果他们提交并且
    gRPC 服务响应，则输出问候语，如下所示高亮显示的标记：
- en: '[PRE21]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you clean a gRPC project, then you will lose the automatically generated
    types and see compile errors. To recreate them, simply make any change to a `.proto`
    file or close and reopen the project/solution.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您清理 gRPC 项目，那么您将丢失自动生成的类型并看到编译错误。要重新创建它们，只需对 `.proto` 文件进行任何更改或关闭并重新打开项目/解决方案。
- en: Testing a gRPC service and client
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 gRPC 服务和客户端
- en: 'Now we can start the gRPC service and see if the MVC website can call it successfully:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动 gRPC 服务并查看 MVC 网站是否可以成功调用它：
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动 `Northwind.Grpc.Service` 项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Grpc.Client.Mvc` 项目。
- en: 'If necessary, start a browser and navigate to the home page: `https://localhost:5133/`.'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，启动浏览器并导航到主页：`https://localhost:5133/`。
- en: 'Note the greeting on the home page, as shown in *Figure 13.4*:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意主页上的问候语，如图 *13.4* 所示：
- en: '![](img/B19587_13_04.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_04.png)'
- en: 'Figure 13.4: Home page after calling the gRPC service to get a greeting'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：调用gRPC服务获取问候后的主页
- en: 'View the command prompt or terminal for the ASP.NET Core MVC project and note
    the info messages that indicate an HTTP/2 `POST` was processed by the `greet.Greeter/SayHello`
    endpoint in about 41ms, as shown in the following output:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看ASP.NET Core MVC项目的命令提示符或终端，注意指示HTTP/2 `POST`在大约41ms内由`greet.Greeter/SayHello`端点处理的info消息，如下所示：
- en: '[PRE22]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Enter and submit your own name on the page.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上输入并提交你自己的名字。
- en: Close the browser and shut down the web servers.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: Implementing gRPC for an EF Core model
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为EF Core模型实现gRPC
- en: Now we will add a service for working with the Northwind database to the gRPC
    project.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将向gRPC项目中添加一个用于处理Northwind数据库的服务。
- en: Implementing the gRPC service
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现gRPC服务
- en: We will reference the EF Core model that you created in *Chapter 3*, *Building
    Entity Models for SQL Server Using EF Core*, then define a contract for the gRPC
    service using a `.proto` file, and finally implement the service.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引用你在*第3章*中创建的EF Core模型，即使用EF Core为SQL Server构建实体模型，然后使用`.proto`文件定义gRPC服务的合约，并最终实现该服务。
- en: 'We will start with the `Shippers` table because it is simple. Each shipper
    only has three properties, an `int` and two `string` values, and there are only
    three records in the table. Let’s go:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从简单的`Shippers`表开始，因为它包含的属性较少。每个承运商只有三个属性，一个`int`类型和一个两个`string`类型的值，表中只有三条记录。让我们开始吧：
- en: 'In the `Northwind.Grpc.Service` project, add a project reference to the Northwind
    database context project, as shown in the following markup:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Service`项目中，添加一个项目引用到Northwind数据库上下文项目，如下所示（高亮显示）：
- en: '[PRE23]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `Include` path must not have a line break.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Include`路径不能有换行符。'
- en: 'At the command prompt or terminal, build the `Northwind.Grpc.Service` project,
    as shown in the following command: `dotnet build`.'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，构建`Northwind.Grpc.Service`项目，如下所示：`dotnet build`。
- en: 'In the `Northwind.Grpc.Service` project, in the `Protos` folder, add a new
    file (the item template is named **Protocol Buffer File** in Visual Studio 2022)
    named `shipper.proto`, as shown in the following code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Service`项目中，在`Protos`文件夹中，添加一个新文件（在Visual Studio 2022中，项目模板命名为**Protocol
    Buffer File**），命名为`shipper.proto`，如下所示：
- en: '[PRE24]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open the project file and add an entry to include the `shipper.proto` file,
    as shown highlighted in the following markup:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目文件，添加一个条目以包含`shipper.proto`文件，如下所示（高亮显示）：
- en: '[PRE25]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Build the `Northwind.Grpc.Service` project.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Grpc.Service`项目。
- en: 'In the `Services` folder, add a new class file named `ShipperService.cs`, and
    modify its contents to define a shipper service that uses the Northwind database
    context to return shippers, as shown in the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Services`文件夹中，添加一个名为`ShipperService.cs`的新类文件，并修改其内容以定义一个使用Northwind数据库上下文返回承运商的承运商服务，如下所示：
- en: '[PRE26]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `.proto` file generates classes that represent the messages sent to and
    from a gRPC service. We therefore cannot use the entity classes defined for the
    EF Core model. We need a helper method like `ToShipperReply` that can map an instance
    of an entity class to an instance of the `.proto`-generated classes like `ShipperReply`.
    This could be a good use for AutoMapper, although in this case, the mapping is
    simple enough to hand-code.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.proto`文件生成代表发送到和从gRPC服务发送的消息的类。因此，我们不能使用为EF Core模型定义的实体类。我们需要一个像`ToShipperReply`这样的辅助方法，可以将实体类的实例映射到`.proto`生成的类，如`ShipperReply`。这可能是使用AutoMapper的好用途，尽管在这种情况下，映射很简单，可以手动编码。'
- en: 'In `Program.cs`, import the namespace for the Northwind database context, as
    shown in the following code:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入Northwind数据库上下文的命名空间，如下所示：
- en: '[PRE27]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the section that configures services, add a call to register the Northwind
    database context, as shown in the following code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置服务的部分，添加一个调用以注册Northwind数据库上下文，如下所示：
- en: '[PRE28]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the section that configures the HTTP pipeline, after the call to register
    `GreeterService`, add a statement to register `ShipperService`, as shown in the
    following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置HTTP管道的章节中，在调用注册`GreeterService`之后，添加一个语句以注册`ShipperService`，如下所示：
- en: '[PRE29]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Implementing the gRPC client
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现gRPC客户端
- en: 'Now we can add client capabilities to the Northwind MVC website:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以向Northwind MVC网站添加客户端功能：
- en: Copy the `shipper.proto` file from the `Protos` folder in the `Northwind.Grpc.Service`
    project to the `Protos` folder in the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`shipper.proto`文件从`Northwind.Grpc.Service`项目的`Protos`文件夹复制到`Northwind.Grpc.Client.Mvc`项目的`Protos`文件夹。
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `shipper.proto`, modify the
    namespace to match the namespace for the current project so that the automatically
    generated classes will be in the same namespace, as shown highlighted in the following
    code:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Client.Mvc`项目中，在`shipper.proto`文件中，修改命名空间以匹配当前项目的命名空间，以便自动生成的类将在同一命名空间中，如下所示，代码中高亮显示：
- en: '[PRE30]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `Northwind.Grpc.Client.Mvc` project file, modify or add the entry to
    register the `.proto` file as being used on the client side, as shown highlighted
    in the following markup:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Client.Mvc`项目文件中，修改或添加条目以注册`.proto`文件作为客户端端使用，如下所示，代码中高亮显示：
- en: '[PRE31]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If you are using a code editor like JetBrains Rider that adds extra configuration,
    I recommend that you simplify the elements as shown in the preceding markup. If
    you do not, then you might get errors later in this coding task.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是像JetBrains Rider这样的代码编辑器，它会添加额外的配置，我建议你简化前面的标记中的元素。如果不这样做，那么你可能会在接下来的编码任务中遇到错误。
- en: 'In the `Northwind.Grpc.Client.Mvc` project file, in `Program.cs`, add a statement
    to register the `ShipperClient` class to connect to the gRPC service listening
    on port `5131`, as shown in the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Client.Mvc`项目文件中的`Program.cs`文件中，添加一个语句来注册`ShipperClient`类以连接到监听端口`5131`的gRPC服务，如下所示，代码中高亮显示：
- en: '[PRE32]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the `Models` folder, in `HomeIndexViewModel.cs`, add a property to store
    a summary of a shipper, as shown in the following code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Models`文件夹中的`HomeIndexViewModel.cs`文件中，添加一个属性来存储发货的摘要，如下所示，代码中高亮显示：
- en: '[PRE33]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the `Controllers` folder, in `HomeController.cs`, declare a field to store
    a shipper client instance and set it by using the client factory in the constructor,
    as shown highlighted in the following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中的`HomeController.cs`文件中，声明一个字段来存储一个发货客户端实例，并在构造函数中使用客户端工厂来设置它，如下所示，代码中高亮显示：
- en: '[PRE34]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In `HomeController.cs`, in the `Index` action method, add a parameter named
    `id` and statements to call the `Shipper` gRPC service to get a shipper with the
    matching `ShipperId`, as shown highlighted in the following code:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`文件中的`Index`动作方法中，添加一个名为`id`的参数，并添加调用`Shipper` gRPC服务以获取匹配的`ShipperId`的语句，如下所示，代码中高亮显示：
- en: '[PRE35]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In `Views/Home`, in `Index.cshtml`, add code to render a form for the visitor
    to enter a shipper ID, and render the shipper details after the greeting, as shown
    highlighted in the following markup:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`文件夹中的`Index.cshtml`文件中，添加代码以渲染一个表单供访客输入发货ID，并在问候语之后渲染发货详情，如下所示，代码中高亮显示：
- en: '[PRE36]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的数据库服务器没有运行，例如，因为你正在Docker、虚拟机或云中托管它，那么请确保启动它。
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动`Northwind.Grpc.Service`项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Grpc.Client.Mvc`项目。
- en: 'If necessary, start a browser and navigate to the MVC website home page: `https://localhost:5133/`.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，启动浏览器并导航到MVC网站主页：`https://localhost:5133/`。
- en: 'Note that an exception is thrown in the gRPC service because the `GetShipper`
    method uses EF Core, which is attempting to dynamically compile a LINQ query,
    and that is not supported with native AOT compilation, as shown in the following
    partial output:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意在gRPC服务中抛出了异常，因为`GetShipper`方法使用了EF Core，它尝试动态编译LINQ查询，而这在原生AOT编译中是不支持的，如下所示，代码中部分输出高亮显示：
- en: '[PRE37]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Close the browser and shut down the web servers.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: 'In the project file, comment out the publish AOT option, as shown in the following
    markup:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，注释掉发布AOT选项，如下所示，代码中高亮显示：
- en: '[PRE38]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You might be wondering what the point was of enabling AOT when we created the
    project and chose to implement parts of the service using EF Core, if we were
    just going to have to disable AOT later. Two reasons: I want you to see the error
    so you recognize it if you try to do similar with your own gRPC projects, and
    we *will* be able to use EF Core in the future with .NET 9 or .NET 10.'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能想知道当我们创建项目并选择使用EF Core实现服务的一部分时，启用AOT的意义何在，如果我们最终不得不禁用AOT。两个原因：我想让你看到错误，这样你如果在自己的gRPC项目中尝试类似操作时能识别它，并且我们*将*能够在.NET
    9或.NET 10中使用EF Core。
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动`Northwind.Grpc.Service`项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Grpc.Client.Mvc`项目。
- en: 'Note the shipper information on the services page, as shown in *Figure 13.5*:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意服务页面上的发货信息，如图*13.5*所示：
- en: '![](img/B19587_13_05.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![img/B19587_13_05.png]'
- en: 'Figure 13.5: Home page after calling the gRPC service to get a shipper'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5：调用 gRPC 服务获取承运人后的主页
- en: There are three shippers in the Northwind database with IDs of 1, 2, and 3\.
    Try entering their IDs to ensure they can all be retrieved, and try entering an
    ID that does not exist, like 4.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Northwind 数据库中有三个具有 1、2 和 3 ID 的承运人。尝试输入他们的 ID 以确保它们都可以检索，并尝试输入一个不存在的 ID，比如
    4。
- en: Close the browser and shut down the web servers.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 Web 服务器。
- en: Taking gRPC further
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 gRPC 推向更远
- en: Now let’s look at some more advanced topics like native AOT compilation support,
    getting metadata, adding deadlines, handling dates, times, and decimal types,
    adding interceptors, and handling exceptions and transient faults.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看一些更高级的主题，比如原生 AOT 编译支持、获取元数据、添加截止日期、处理日期、时间和十进制类型、添加拦截器，以及处理异常和短暂故障。
- en: Improving a gRPC service with native AOT publish
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用原生 AOT 发布改进 gRPC 服务
- en: .NET 8 introduces gRPC support for native AOT. But as you have just seen, it
    is not (yet) compatible with some parts of .NET like EF Core.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 8 引入了原生 AOT 对 gRPC 的支持。但正如您刚刚看到的，它目前还不兼容 .NET 的某些部分，比如 EF Core。
- en: 'Let’s change our gRPC service to use the SQL client instead of EF Core. We
    will leave most of the EF Core code in the project so you can switch back if you
    want in the future, for example, if you upgrade to EF Core 9 and it supports native
    AOT:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的 gRPC 服务更改为使用 SQL 客户端而不是 EF Core。我们将保留项目中的大部分 EF Core 代码，这样您可以在将来切换回来，例如，如果您升级到
    EF Core 9 并且它支持原生 AOT：
- en: 'In the `Northwind.Grpc.Service` project, uncomment out the option to publish
    AOT and add a package reference for the SQL client, as shown in the following
    markup:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Service` 项目中，取消注释发布 AOT 的选项，并添加 SQL 客户端的包引用，如下所示的高亮标记：
- en: '[PRE39]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `Services` folder, in `ShipperService.cs`, import namespaces for working
    with `SqlClient`, as shown in the following code:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Services` 文件夹中，在 `ShipperService.cs` 中，导入用于与 `SqlClient` 一起工作的命名空间，如下所示：
- en: '[PRE40]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `GetShipper` method, comment out the statements to get the shipper from
    the Northwind data context, and replace it with code to get the shipper using
    `SqlClient`, as shown highlighted in the following code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GetShipper` 方法中，注释掉从 Northwind 数据上下文获取承运人的语句，并用代码替换为使用 `SqlClient` 获取承运人的代码，如下所示的高亮标记：
- en: '[PRE41]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Double-check that you have re-enabled the publish AOT option.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请再次确认您已重新启用发布 AOT 选项。
- en: 'In `Program.cs`, we could alter a statement to use the slim builder for the
    web application, as shown in the following code:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，我们可以修改一个语句来使用精简构建器为 Web 应用程序，如下所示：
- en: '[PRE42]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `CreateSlimBuilder` method does not include support for HTTPS or HTTP/3,
    although you can add those back in yourself if you need them. If we switch to
    the slim builder, then we must also switch from using HTTPS to HTTP to communicate
    with the gRPC service. In this task, we will continue to use the “full fat” builder
    so we can continue to use HTTPS.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CreateSlimBuilder` 方法不包括对 HTTPS 或 HTTP/3 的支持，尽管如果您需要，可以自行添加这些功能。如果我们切换到精简构建器，那么我们也必须从使用
    HTTPS 切换到 HTTP 来与 gRPC 服务通信。在这个任务中，我们将继续使用“完整”构建器，这样我们就可以继续使用 HTTPS。'
- en: 'In the `Northwind.Grpc.Service` project file, add an element to emit compiler-generated
    files, as shown highlighted in the following markup:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Service` 项目文件中，添加一个元素以生成编译器生成的文件，如下所示的高亮标记：
- en: '[PRE43]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Build the `Northwind.Grpc.Service` project.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Grpc.Service` 项目。
- en: If you are using Visual Studio 2022, toggle **Show All Files** in **Solution
    Explorer**. If you are using JetBrains Rider, hover over and then click the eyeball
    icon.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用 Visual Studio 2022，在 **解决方案资源管理器** 中切换 **显示所有文件**。如果您正在使用 JetBrains
    Rider，则将鼠标悬停在其上，然后单击眼球图标。
- en: 'Expand the `obj\Debug\net8.0\generated` folder, and then note the folders and
    files that have been created by the source generators for AOT and JSON serialization,
    as shown in *Figure 13.6*:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开文件夹 `obj\Debug\net8.0\generated`，然后注意源生成器为 AOT 和 JSON 序列化创建的文件夹和文件，如图 13.6
    所示：
- en: '![](img/B19587_13_06.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_06.png)'
- en: 'Figure 13.6: Folders and files created by source generators in an AOT gRPC
    project'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6：在 AOT gRPC 项目中由源生成器创建的文件夹和文件
- en: 'At the command prompt or terminal, publish the gRPC service using native AOT,
    as shown in the following command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，使用原生 AOT 发布 gRPC 服务，如下所示：
- en: '[PRE44]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Note the message about generating native code and trim warnings for packages
    like `Microsoft.Data.SqlClient`, as shown in the following partial output:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意关于生成原生代码和为 `Microsoft.Data.SqlClient` 等包生成修剪警告的消息，如下所示的部分输出：
- en: '[PRE45]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Start **File Explorer** and open the `bin\Release\net8.0\win-x64\publish` folder
    and note the EXE file is about 45 MB. This and the `Microsoft.Data.SqlClient.SNI.dll`
    file are the only files that need to be deployed onto another Windows computer
    for the web service to work. The `appsettings.json` files are only needed to override
    configuration if needed. The PDB files are only needed if debugging and, anyway,
    two of them are only because we left the EF Core code in the project for reference
    to make it easier to switch back to non-AOT publishing.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **文件资源管理器** 并打开 `bin\Release\net8.0\win-x64\publish` 文件夹，并注意 EXE 文件大约有 45
    MB。这是以及 `Microsoft.Data.SqlClient.SNI.dll` 文件是唯一需要部署到另一台 Windows 计算机上的文件，以便 web
    服务能够工作。`appsettings.json` 文件仅在需要覆盖配置时需要。PDB 文件仅在调试时需要，无论如何，其中两个文件仅因为我们保留了 EF Core
    代码在项目中作为参考，以便更容易切换回非 AOT 发布。
- en: Open the `bin\Release\net8.0\win-x64\publish` folder at the command prompt or
    terminal.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中打开 `bin\Release\net8.0\win-x64\publish` 文件夹。
- en: 'At the command prompt or terminal, run `Northwind.Grpc.Service.exe` and explicitly
    specify the URL with the port number to use, as shown in the following command:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中运行 `Northwind.Grpc.Service.exe` 并显式指定要使用的 URL 和端口号，如下面的命令所示：
- en: '[PRE46]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `launchSettings.json` file is only used by code editors like Visual Studio
    2022 so the ports specified there are ignored and not deployed with the service
    in production.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`launchSettings.json` 文件仅由代码编辑器（如 Visual Studio 2022）使用，因此那里指定的端口被忽略，并且不会与生产中的服务一起部署。'
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Grpc.Client.Mvc` 项目。
- en: Note the web page shows the shipper with an ID of 1 and that you can search
    for the other shippers.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意网页显示了一个 ID 为 1 的发货人，并且您可以搜索其他发货人。
- en: Close the browser and shut down the web servers.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: '**More Information**: You can learn more about gRPC and native AOT at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/grpc/native-aot](https://learn.microsoft.com/en-us/aspnet/core/grpc/native-aot).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于 gRPC 和原生 AOT 的信息：[https://learn.microsoft.com/en-us/aspnet/core/grpc/native-aot](https://learn.microsoft.com/en-us/aspnet/core/grpc/native-aot)。'
- en: Getting request and response metadata
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取请求和响应元数据
- en: Formally defined request and response messages as part of a contract are not
    the only mechanisms to pass data between a client and service using gRPC. You
    can also use metadata sent as headers and trailers. Both are simple dictionaries
    that are passed along with the messages.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 正式定义的请求和响应消息作为合同的一部分，并不是使用 gRPC 在客户端和服务之间传递数据的唯一机制。您还可以使用作为头和尾发送的元数据。这两者都是与消息一起传递的简单字典。
- en: 'Let’s see how you can get metadata about a gRPC call:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您如何获取 gRPC 调用的元数据：
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `Controllers` folder, in
    `HomeController.cs`, import the namespace to use the `AsyncUnaryCall<T>` class,
    as shown in the following code:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，在 `Controllers` 文件夹中，在 `HomeController.cs`
    中，导入命名空间以使用 `AsyncUnaryCall<T>` 类，如下面的代码所示：
- en: '[PRE47]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the `Index` method, comment out the statement that makes the call to the
    gRPC shipper service. Add statements that get the underlying `AsyncUnaryCall<T>`
    object, then use it to get the headers, output them to the log, and then get the
    response, as shown highlighted in the following code:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Index` 方法中，注释掉调用 gRPC 发货服务器的语句。添加获取底层 `AsyncUnaryCall<T>` 对象的语句，然后使用它来获取头信息，输出到日志中，然后获取响应，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动 `Northwind.Grpc.Service` 项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Grpc.Client.Mvc` 项目。
- en: 'If necessary, start a browser and navigate to the home page: `https://localhost:5133/`.'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，启动浏览器并导航到主页：`https://localhost:5133/`。
- en: 'Note the client successfully making `POST` requests to the gRPC `Greeter` and
    `Shipper` services and the red critical messages outputting the two entries in
    the gRPC metadata for the call to `GetShipper`, with keys of `date` and `server`,
    as shown in *Figure 13.7*:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意客户端成功向 gRPC 的 `Greeter` 和 `Shipper` 服务发送 `POST` 请求，以及输出两个条目的红色关键消息，这些条目是 `GetShipper`
    调用的 gRPC 元数据，键为 `date` 和 `server`，如下所示 *图 13.7*：
- en: '![](img/B19587_13_07.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_07.png)'
- en: 'Figure 13.7: Logging metadata from a gRPC call'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7：从 gRPC 调用记录元数据
- en: Close the browser and shut down the web servers.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: The trailers equivalent of the `ResponseHeadersAsync` property is the `GetTrailers`
    method. It has a return value of `Metadata` that contains the dictionary of trailers.
    Trailers are accessible at the end of a call.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResponseHeadersAsync` 属性的等价物是 `GetTrailers` 方法。它有一个返回值为 `Metadata` 的值，其中包含跟踪器的字典。跟踪器在调用结束时可用。'
- en: Adding a deadline for higher reliability
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加截止日期以提高可靠性
- en: Setting a deadline for a gRPC call is recommended practice because it controls
    the upper limit of how long a gRPC call can run. It prevents gRPC services from
    potentially consuming too many server resources.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 为 gRPC 调用设置截止日期是推荐的做法，因为它控制了 gRPC 调用可以运行的最长时间上限。它防止 gRPC 服务可能消耗过多的服务器资源。
- en: The deadline information is sent to the service, so the service has an opportunity
    to give up its work once the deadline has passed instead of continuing forever.
    Even if the server completes its work within the deadline, the client may give
    up before the response arrives at the client because the deadline has passed due
    to the overhead of communication.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 截止日期信息被发送到服务中，因此服务一旦截止日期过去就有机会放弃其工作，而不是永远继续。即使服务器在截止日期内完成了其工作，客户端也可能在响应到达客户端之前放弃，因为通信开销导致截止日期已过。
- en: 'Let’s see an example:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子：
- en: 'In the `Northwind.Grpc.Service` project, in the `Services` folder, in `ShipperService.cs`,
    in the `GetShipper` method, add statements to log the deadline and to pause for
    five seconds, as shown highlighted in the following code:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Service` 项目中，在 `Services` 文件夹中，在 `ShipperService.cs` 中，在 `GetShipper`
    方法中，添加记录截止日期并暂停五秒的语句，如下所示高亮代码：
- en: '[PRE49]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `Northwind.Grpc.Service` project, in `appsettings.Development.json`,
    modify the logging level for ASP.NET Core from the default of `Warning` to `Information`,
    as shown highlighted in the following configuration:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Service` 项目中，在 `appsettings.Development.json` 中，将 ASP.NET
    Core 的日志级别从默认的 `Warning` 修改为 `Information`，如下所示高亮配置：
- en: '[PRE50]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in the `Controllers` folder, in
    `HomeController.cs`, in the `Index` method, set a deadline of three seconds when
    calling the `GetShipperAsync` method, as shown highlighted in the following code:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，在 `Controllers` 文件夹中，在 `HomeController.cs`
    中，在 `Index` 方法中，调用 `GetShipperAsync` 方法时设置三秒的截止日期，如下所示高亮代码：
- en: '[PRE51]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In `HomeController.cs`, in the `Index` method, before the existing `catch`
    block, add a `catch` block for an `RpcException` when the exception’s status code
    matches the code for deadline exceeded, as shown highlighted in the following
    code:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HomeController.cs` 中，在 `Index` 方法中，在现有的 `catch` 块之前，添加一个 `catch` 块来捕获当异常的状态码与截止日期超出的代码匹配时的
    `RpcException`，如下所示高亮代码：
- en: '[PRE52]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `appsettings.Development.json`,
    modify the logging level for ASP.NET Core from the default of `Warning` to `Information`,
    as shown highlighted in the following configuration:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，在 `appsettings.Development.json` 中，将 ASP.NET
    Core 的日志级别从默认的 `Warning` 修改为 `Information`，如下所示高亮配置：
- en: '[PRE53]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动 `Northwind.Grpc.Service` 项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Grpc.Client.Mvc` 项目。
- en: 'If necessary, start a browser and navigate to the home page: `https://localhost:5133/`.'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，启动浏览器并导航到主页：`https://localhost:5133/`。
- en: 'At the command prompt or terminal for the gRPC service, note the request has
    a three-second deadline, as shown in the following output:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 gRPC 服务的命令提示符或终端中，注意请求有一个三秒的截止日期，如下所示输出：
- en: '[PRE54]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In the browser, note that after three seconds, the home page shows a deadline
    exceeded exception, as shown in *Figure 13.8*:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，注意在三个秒后，主页显示了一个截止日期超出的异常，如图 *图13.8* 所示：
- en: '![](img/B19587_13_08.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_08.png)'
- en: 'Figure 13.8: A deadline has been exceeded'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8：截止日期已过
- en: 'At the command prompt or terminal for the ASP.NET Core MVC client, note the
    logs that start at the point where a request is made to the `GetShipper` method
    on the gRPC service, but the deadline is exceeded, as shown in the following output:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core MVC 客户端的命令提示符或终端中，注意从请求 `GetShipper` 方法在 gRPC 服务上的点开始记录的日志，但截止日期已过，如下所示输出：
- en: '[PRE55]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Close the browser and shut down the web servers.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: 'In `ShipperService.cs`, comment out the statement that causes a five-second
    delay, as shown in the following code:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ShipperService.cs` 中，注释掉导致五秒延迟的语句，如下所示代码：
- en: '[PRE56]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '**Good Practice**: The default is no deadline. Always set a deadline in the
    client call. In your service implementation, get the deadline and use it to automatically
    abandon the work if it is exceeded. Pass the cancellation token to any asynchronous
    calls so that work completes quickly on the server and frees up resources.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：默认情况下没有截止日期。在客户端调用中始终设置截止日期。在你的服务实现中，获取截止日期并使用它来自动放弃超过截止日期的工作。将取消令牌传递给任何异步调用，以便服务器上的工作快速完成并释放资源。'
- en: Handling dates, times, and decimal numbers
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理日期、时间和十进制数字
- en: You might have noted that there are no date/time types built into gRPC. To store
    these values, you must use well-known type extensions, for example, `google.protobuf.Timestamp`
    (equivalent to `DateTimeOffset`) and `google.protobuf.Duration` (equivalent to
    `TimeSpan`).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到gRPC中没有内置的日期/时间类型。为了存储这些值，你必须使用已知类型扩展，例如`google.protobuf.Timestamp`（相当于`DateTimeOffset`）和`google.protobuf.Duration`（相当于`TimeSpan`）。
- en: 'To use them as field types in a message, they must be imported, as shown in
    the following code:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 要将它们用作消息中的字段类型，它们必须被导入，如下面的代码所示：
- en: '[PRE57]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The class generated will not use .NET types directly. Instead, there are intermediate
    types, as shown in the following code:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的类将不会直接使用.NET类型。相反，存在中间类型，如下面的代码所示：
- en: '[PRE58]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'There are conversion methods on the types `FromDateTimeOffset`, `ToDateTimeOffset`,
    `FromTimeSpan`, and `ToTimeSpan`, as shown in the following code:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 类型`FromDateTimeOffset`、`ToDateTimeOffset`、`FromTimeSpan`和`ToTimeSpan`上有转换方法，如下面的代码所示：
- en: '[PRE59]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: gRPC also does not natively support `decimal` values. In the future, that support
    might be added, but for now, you must create a custom message to represent it.
    If you choose to do this, then keep in mind that developers on other platforms
    will have to understand your custom format and implement their own handling for
    it.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC也不原生支持`decimal`值。将来可能会添加该支持，但到目前为止，你必须创建一个自定义消息来表示它。如果你选择这样做，请记住，其他平台上的开发人员将必须理解你的自定义格式并实现自己的处理方式。
- en: Defining a custom decimal type and using date/time types
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义自定义的decimal类型和使用日期/时间类型
- en: 'Let’s add gRPC services for working with products (which have a `UnitPrice`
    property that is a `decimal`) and employees (which have `HireDate` properties
    that are `DateTime` values):'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加用于处理产品（具有`UnitPrice`属性，该属性是`decimal`类型）和员工（具有`HireDate`属性，该属性是`DateTime`值）的gRPC服务：
- en: 'In the `Northwind.Grpc.Service` project, in the `Protos` folder, add a new
    file named `decimal.proto`, and add statements to define a message format for
    safely storing a `decimal` value, as shown in the following code:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Service`项目的`Protos`文件夹中，添加一个名为`decimal.proto`的新文件，并添加定义安全存储`decimal`值的消息格式的语句，如下面的代码所示：
- en: '[PRE60]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Add a new file named `product.proto`, and add statements to define messages
    and service methods to get one product, all products, or products that cost a
    minimum price, as shown in the following code:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`product.proto`的新文件，并添加定义获取单个产品、所有产品或最低价格产品的消息和服务方法的语句，如下面的代码所示：
- en: '[PRE61]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add a new file named `employee.proto`, and modify it to define messages and
    service methods to get one employee or all employees, and note we must import
    the Google extension for `timestamp.proto`, as shown in the following code:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`employee.proto`的新文件，并修改它以定义获取单个员工或所有员工的消息和服务方法，注意我们必须导入`timestamp.proto`的Google扩展，如下面的代码所示：
- en: '[PRE62]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the project file, add elements to tell the gRPC tool to process the new
    `.proto` files, as shown highlighted in the following markup:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中添加元素以告诉gRPC工具处理新的`.proto`文件，如下面的标记所示：
- en: '[PRE63]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Rebuild the project to make sure the gRPC tool has created the C# classes in
    the `obj\Debug\net8.0\Protos` folder, as shown in *Figure* *13.9*:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建项目以确保gRPC工具已在`obj\Debug\net8.0\Protos`文件夹中创建了C#类，如图*13.9*所示：
- en: '![](img/B19587_13_09.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_13_09.png)'
- en: 'Figure 13.9: gRPC tool-generated classes for a custom decimal type with a Units
    property'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9：gRPC工具为具有Units属性的自定义decimal类型生成的类
- en: In the `Northwind.Grpc.Service` project, add a new folder named `Converters`.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Service`项目中，添加一个名为`Converters`的新文件夹。
- en: 'In the `Converters` folder, add a new class file named `DecimalValue.Converters.cs`,
    and modify its contents to extend the partial class created by the gRPC tools
    with a constructor and a pair of operators to convert between our custom `DecimalValue`
    type and the built-in .NET `decimal` type, as shown in the following code:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Converters` 文件夹中，添加一个名为 `DecimalValue.Converters.cs` 的新类文件，并修改其内容以扩展由 gRPC
    工具创建的局部类，添加一个构造函数和一对运算符，用于在自定义的 `DecimalValue` 类型与内置的 .NET `decimal` 类型之间进行转换，如下面的代码所示：
- en: '[PRE64]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Implementing the product and employee gRPC services
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现产品和员工 gRPC 服务
- en: 'Now we need to implement and register the services:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要实现并注册服务：
- en: 'In the `Northwind.Grpc.Service` project, in the `Services` folder, add a new
    class file named `ProductService.cs` and modify its content to implement the products
    service. I will leave this as an optional exercise for you, or you can copy the
    code from the following link: [https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/ProductService.cs](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/ProductService.cs).'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Service` 项目中，在 `Services` 文件夹中，添加一个名为 `ProductService.cs`
    的新类文件，并修改其内容以实现产品服务。我将把这个作为一项可选练习留给你，或者你也可以从以下链接复制代码：[https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/ProductService.cs](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/ProductService.cs)。
- en: 'In the `Services` folder, add a new class file named `EmployeeService.cs` and
    modify its content to implement the products service. I will leave this as an
    optional exercise for you, or you can copy the code from the following link: [https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/EmployeeService.cs](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/EmployeeService.cs).'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Services` 文件夹中，添加一个名为 `EmployeeService.cs` 的新类文件，并修改其内容以实现产品服务。我将把这个作为一项可选练习留给你，或者你也可以从以下链接复制代码：[https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/EmployeeService.cs](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter13/Northwind.Grpc.Service/Services/EmployeeService.cs)。
- en: 'In `Program.cs`, register the two new services, as shown in the following code:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，注册两个新服务，如下面的代码所示：
- en: '[PRE65]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Adding product and employee gRPC clients
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加产品和员工 gRPC 客户端
- en: 'Next, we need to add clients to the MVC project to call the two new gRPC services:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要向 MVC 项目添加客户端以调用两个新的 gRPC 服务：
- en: In the `Northwind.Grpc.Client.Mvc` project, copy the three `.proto` files from
    the service project to the MVC project `Protos` folder.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，将服务项目中的三个 `.proto` 文件复制到 MVC 项目的 `Protos`
    文件夹中。
- en: 'In the three `.proto` files, modify the namespace, as shown in the following
    code:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在三个 `.proto` 文件中，修改命名空间，如下面的代码所示：
- en: '[PRE66]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In the project file, register the three files to create client-side representations,
    as shown in the following markup:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，注册这三个文件以创建客户端表示，如下面的标记所示：
- en: '[PRE67]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: If you are using a code editor like JetBrains Rider that adds extra configuration,
    I recommend that you simplify the elements as shown in the preceding markup. If
    you do not, then you might get errors later in this coding task.
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是像 JetBrains Rider 这样的代码编辑器，它会添加额外的配置，我建议你简化前面的标记中的元素。如果不这样做，那么在接下来的编码任务中可能会遇到错误。
- en: Copy the `Converters` folder from the gRPC project to the MVC project.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Converters` 文件夹从 gRPC 项目复制到 MVC 项目。
- en: 'In the `Converters` folder, in `DecimalValue.Converters.cs`, modify the namespace
    to use the client, as shown in the following code:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Converters` 文件夹中的 `DecimalValue.Converters.cs` 文件中，修改命名空间以使用客户端，如下面的代码所示：
- en: '[PRE68]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `Program.cs`, add statements
    to register clients for the two new services, as shown in the following code:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，在 `Program.cs` 文件中，添加语句以注册两个新服务的客户端，如下面的代码所示：
- en: '[PRE69]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In the `Controllers` folder, in `HomeController.cs`, add two fields for the
    two new clients and set them in the constructor. (Hint: follow the same pattern
    as for greeter and shipper.)'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Controllers` 文件夹中，在 `HomeController.cs` 文件中，为两个新客户端添加两个字段并在构造函数中设置它们。（提示：遵循
    greeter 和 shipper 的相同模式。）
- en: 'In `HomeController.cs`, add two action methods for products and employees,
    as shown in the following code:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HomeController.cs` 文件中，为产品和员工添加两个操作方法，如下面的代码所示：
- en: '[PRE70]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In the `Views\Shared` folder, in `_Layout.cshtml`, after the menu item for
    navigating to the home page, add menu items for navigating to products and employees,
    as shown highlighted in the following markup:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views\Shared`文件夹中，在`_Layout.cshtml`中，在导航到主页面的菜单项之后，添加导航到产品和员工的菜单项，如下所示标记高亮显示：
- en: '[PRE71]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'In the `Views\Home` folder, add a new Razor View file named `Products.cshtml`,
    and modify it to show a table of products, as shown in the following markup:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views\Home`文件夹中，添加一个名为`Products.cshtml`的新Razor视图文件，并将其修改为显示产品表，如下所示标记：
- en: '[PRE72]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In the `Views\Home` folder, add a new Razor View file named `Employees.cshtml`,
    and modify it to show a table of employees, as shown in the following markup:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views\Home`文件夹中，添加一个名为`Employees.cshtml`的新Razor视图文件，并将其修改为显示员工表，如下所示标记：
- en: '[PRE73]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Testing decimal, date, and bytes handling
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试十进制、日期和字节处理
- en: 'Finally, we can test the specialized type handling we implemented:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以测试我们实现的专用类型处理：
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动`Northwind.Grpc.Service`项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Grpc.Client.Mvc`项目。
- en: 'On the home page, in the top navigation bar, click **Products**, and note all
    products are included in the table, as shown in *Figure 13.10*:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页面上，在顶部导航栏中，点击**产品**，并注意所有产品都包含在表中，如图*13.10*所示：
- en: '![](img/B19587_13_10.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_10.png)'
- en: 'Figure 13.10: Products including unit prices that use a custom decimal implementation'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10：使用自定义十进制实现的包含单价的产品
- en: Enter a minimum price such as `100`, click **Filter Products**, and note that
    only products with a unit price of that amount or more are included in the table.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个最低价格，例如`100`，点击**过滤产品**，注意只有单价为该金额或更高的产品包含在表中。
- en: 'In the top navigation bar, click **Employees**, and note employees and their
    birth dates and photos are included in the table, as shown in *Figure 13.11*:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部导航栏中，点击**员工**，并注意员工及其出生日期和照片包含在表中，如图*13.11*所示：
- en: '![](img/B19587_13_11.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_11.png)'
- en: 'Figure 13.11: Employees including birth dates and photos using timestamp and
    bytes'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11：包含出生日期和照片的员工使用时间戳和字节
- en: Close the browser and shut down the web servers.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: You’ve now seen how to use gRPC to build several services that work with data.
    Now let’s see some more advanced features of gRPC.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经看到了如何使用gRPC构建与数据一起工作的几个服务。现在让我们看看gRPC的一些更高级的功能。
- en: Implementing interceptors and handling faults
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现拦截器和处理故障
- en: gRPC interceptors are a way to perform additional processing during requests
    and responses and they can be injected at the client or service. They are often
    used for logging, monitoring, and validation.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC拦截器是在请求和响应期间执行额外处理的一种方式，并且它们可以在客户端或服务中注入。它们通常用于日志记录、监控和验证。
- en: Adding a client-side interceptor
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加客户端拦截器
- en: 'Let’s add a client-side gRPC interceptor for logging:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个客户端gRPC拦截器用于日志记录：
- en: In the `Northwind.Grpc.Client.Mvc` project, add a new folder named `Interceptors`.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Client.Mvc`项目中，添加一个名为`Interceptors`的新文件夹。
- en: 'In the `Interceptors` folder, add a new class file named `ClientLoggingInterceptor.cs`,
    and then add statements to define an interceptor, as shown in the following code:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Interceptors`文件夹中，添加一个名为`ClientLoggingInterceptor.cs`的新类文件，然后添加定义拦截器的语句，如下所示代码：
- en: '[PRE74]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Interceptors form a pipeline, so in your interceptor, you must call the next
    interceptor in the pipeline, represented by the `continuation` delegate, and pass
    it the `request` and `context`.
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拦截器形成一个管道，因此在你的拦截器中，你必须调用管道中的下一个拦截器，由`continuation`委托表示，并传递`request`和`context`。
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `Program.cs`, before any of
    the calls to add gRPC services, add a call to register the interceptor as a singleton
    service, as shown in the following code:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Client.Mvc`项目中，在`Program.cs`中，在添加gRPC服务的任何调用之前，添加一个调用以将拦截器注册为单例服务，如下所示代码：
- en: '[PRE75]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'In `Program.cs`, at the end of the statement to register the product client,
    add the interceptor, as shown highlighted in the following code:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在注册产品客户端的语句末尾添加拦截器，如下所示高亮显示的代码：
- en: '[PRE76]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: You can attach the logging interceptor to as many clients as you want.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以将日志拦截器附加到任意多的客户端。
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动`Northwind.Grpc.Service`项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Grpc.Client.Mvc`项目。
- en: On the home page, in the top navigation bar, click **Products**.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页面上，在顶部导航栏中，点击**产品**。
- en: 'In the MVC website project command prompt or terminal, note the warning, which
    will be distinct from information messages as it is yellow-on-black by default,
    as shown in the following output:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MVC网站项目命令提示符或终端中，请注意警告，它将与信息消息不同，因为默认情况下它是黄色背景黑色文字，如下所示：
- en: '[PRE77]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Close the browser and shut down the web servers.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: '**More Information**: You might be thinking, “Interceptors sound a lot like
    ASP.NET Core middleware!” You can read a useful comparison at the following link:
    [https://learn.microsoft.com/en-us/aspnet/core/grpc/interceptors#grpc-interceptors-versus-middleware](https://learn.microsoft.com/en-us/aspnet/core/grpc/interceptors#grpc-interceptors-versus-middleware).'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：你可能认为，“拦截器听起来很像ASP.NET Core中间件！”你可以在以下链接中阅读一个有用的比较：[https://learn.microsoft.com/en-us/aspnet/core/grpc/interceptors#grpc-interceptors-versus-middleware](https://learn.microsoft.com/en-us/aspnet/core/grpc/interceptors#grpc-interceptors-versus-middleware)。'
- en: Exception and transient fault handling
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常和瞬态故障处理
- en: gRPC has built-in support to automatically retry failed calls, which is a good
    way to handle transient faults like temporary network disconnects and down or
    busy services.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC内置了对自动重试失败调用的支持，这对于处理瞬态故障（如临时网络断开、服务不可用或繁忙的服务）是一种很好的方法。
- en: In the client, an `RpcException` could be thrown that includes details of the
    error.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，可能会抛出一个包含错误详细信息的 `RpcException`。
- en: 'First, let’s add a transient fault to the gRPC service and see how the client
    handles it:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们向gRPC服务添加一个瞬态故障，看看客户端是如何处理的：
- en: 'In the `Northwind.Grpc.Service` project, in the `Services` folder, in `GreeterService.cs`,
    modify the `SayHello` method to wait for one second and then, randomly, one in
    three times it should work but two in three times throw a service unavailable
    exception, as shown in the following code:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Service` 项目中，在 `Services` 文件夹中，在 `GreeterService.cs` 文件中，修改
    `SayHello` 方法，使其等待一秒钟，然后随机地，三分之一的时间应该工作，而三分之二的时间应该抛出服务不可用异常，如下所示：
- en: '[PRE78]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动 `Northwind.Grpc.Service` 项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Grpc.Client.Mvc` 项目。
- en: 'On the home page, note the exception, as shown in *Figure 13.12*:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上，注意异常，如图 *13.12* 所示：
- en: '![](img/B19587_13_12.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_12.png)'
- en: 'Figure 13.12: Service is unavailable exception'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12：服务不可用异常
- en: If you don’t get an exception, refresh the page until you do.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有收到异常，请刷新页面，直到收到为止。
- en: Close the browser and shut down the web servers.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: 'Now, let’s see how to add transient fault handling to the MVC website client:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何向MVC网站客户端添加瞬态故障处理：
- en: 'In the `Northwind.Grpc.Client.Mvc` project, in `Program.cs`, before adding
    the greeter client to the services collection, add statements to define a `MethodConfig`
    with a retry policy that retries up to five times for status codes indicating
    an unavailable service, and then after configuring the greeter client address,
    apply the `method config`, as shown highlighted in the following code:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Grpc.Client.Mvc` 项目中，在 `Program.cs` 文件中，在将问候客户端添加到服务集合之前，添加语句来定义一个具有重试策略的
    `MethodConfig`，该策略对于表示服务不可用的状态码重试最多五次，然后在配置问候客户端地址后应用 `method config`，如下所示（代码高亮显示）：
- en: '[PRE79]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Start the `Northwind.Grpc.Service` project without debugging.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动 `Northwind.Grpc.Service` 项目。
- en: Start the `Northwind.Grpc.Client.Mvc` project.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Grpc.Client.Mvc` 项目。
- en: 'On the home page, note the home page might take a few seconds to appear, but
    eventually, it will successfully appear with the `Hello Henrietta` message from
    the gRPC service, and if you review the gRPC service output, it will include multiple
    attempts to call `SayHello` before finally working, as shown in the following
    output:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上，请注意主页可能需要几秒钟才能出现，但最终会成功出现，显示来自gRPC服务的 `Hello Henrietta` 消息，如果你查看gRPC服务输出，它将包括在最终成功之前多次尝试调用
    `SayHello`，如下所示：
- en: '[PRE80]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Implementing gRPC JSON transcoding
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现gRPC JSON转码
- en: JSON is the most popular format for services that return data to a browser or
    mobile device. It would be great if we could create a gRPC service and magically
    make it callable via non-HTTP/2 using JSON.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: JSON是向浏览器或移动设备返回数据的服务的最流行格式。如果能创建一个gRPC服务并通过非HTTP/2使用JSON神奇地调用它，那就太好了。
- en: Thankfully, there is a solution.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个解决方案。
- en: Microsoft has a technology they call **gRPC JSON transcoding**. It is an ASP.NET
    Core extension that creates HTTP endpoints with JSON for gRPC services, based
    on Google’s `HttpRule` class for their gRPC transcoding.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 微软有一种他们称之为**gRPC JSON转换**的技术。它是一个ASP.NET Core扩展，基于Google的`HttpRule`类为他们的gRPC转换创建带有JSON的HTTP端点。
- en: '**More Information**: You can read about Google’s `HttpRule` class at the following
    link: [https://cloud.google.com/dotnet/docs/reference/Google.Api.CommonProtos/latest/Google.Api.HttpRule](https://cloud.google.com/dotnet/docs/reference/Google.Api.CommonProtos/latest/Google.Api.HttpRule).'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：你可以在以下链接中了解Google的`HttpRule`类：[https://cloud.google.com/dotnet/docs/reference/Google.Api.CommonProtos/latest/Google.Api.HttpRule](https://cloud.google.com/dotnet/docs/reference/Google.Api.CommonProtos/latest/Google.Api.HttpRule)。'
- en: Enabling gRPC JSON transcoding
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用gRPC JSON转换
- en: 'Let’s see how to enable gRPC JSON transcoding in our gRPC service:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在我们的gRPC服务中启用gRPC JSON转换：
- en: 'In the `Northwind.Grpc.Service` project, add a package reference for gRPC JSON
    transcoding, as shown highlighted in the following markup:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Service`项目中，添加一个gRPC JSON转换的包引用，如下所示高亮显示的标记：
- en: '[PRE81]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Build the `Northwind.Grpc.Service` project to restore packages.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以恢复包。
- en: 'In `appsettings.json`, modify the `Protocols` option to enable HTTP/1.1 as
    well as HTTP/2, as shown highlighted in the following markup:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`appsettings.json`中，修改`Protocols`选项以启用HTTP/1.1以及HTTP/2，如下所示高亮显示的标记：
- en: '[PRE82]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '**Good Practice**: By default, a gRPC project will be configured to only allow
    HTTP/2 requests. To support clients like `.http` files in your code editor, or
    Unity, enable both HTTP/1.1 and HTTP/2\. Allowing HTTP/1.1 and HTTP/2 on the same
    port requires TLS for protocol negotiation, which is another good reason to leave
    HTTPS enabled in a gRPC service and therefore not use `CreateSlimBuilder`.'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：默认情况下，gRPC项目将配置为仅允许HTTP/2请求。为了支持你的代码编辑器中的`.http`文件或Unity等客户端，启用HTTP/1.1和HTTP/2。在同一端口上允许HTTP/1.1和HTTP/2需要TLS进行协议协商，这也是在gRPC服务中保持HTTPS启用、因此不使用`CreateSlimBuilder`的另一个好理由。'
- en: 'In `Program.cs`, add a call to add JSON transcoding after the call to add gRPC,
    as shown highlighted in the following code:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在添加gRPC调用之后添加一个调用以添加JSON转换，如下所示高亮显示的代码：
- en: '[PRE83]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: In the `Northwind.Grpc.Service` project/folder, add a folder named `google`.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Grpc.Service`项目/文件夹中，添加一个名为`google`的文件夹。
- en: In the `google` folder, add a folder named `api`.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`google`文件夹中，添加一个名为`api`的文件夹。
- en: In the `api` folder, add two `.proto` files named `http.proto` and `annotations.proto`.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`api`文件夹中，添加两个名为`http.proto`和`annotations.proto`的`.proto`文件。
- en: 'Copy and paste the raw contents for the two files from the files found at the
    following link: [https://github.com/dotnet/aspnetcore/tree/main/src/Grpc/JsonTranscoding/test/testassets/Sandbox/google/api](https://github.com/dotnet/aspnetcore/tree/main/src/Grpc/JsonTranscoding/test/testassets/Sandbox/google/api).'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接中找到的文件复制并粘贴两个文件的原始内容：[https://github.com/dotnet/aspnetcore/tree/main/src/Grpc/JsonTranscoding/test/testassets/Sandbox/google/api](https://github.com/dotnet/aspnetcore/tree/main/src/Grpc/JsonTranscoding/test/testassets/Sandbox/google/api)。
- en: 'In the `Protos` folder, in `employee.proto`, import the annotations `.proto`
    file, and use it to add an option to expose an endpoint to make an HTTP request
    to the `GetEmployee` method, as shown in the following code:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Protos`文件夹中，在`employee.proto`中导入注释`.proto`文件，并使用它添加一个选项来公开一个端点，以便向`GetEmployee`方法发出HTTP请求，如下面的代码所示：
- en: '[PRE84]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Testing gRPC JSON transcoding
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试gRPC JSON转换
- en: 'Now we can start the gRPC service and call it directly from any browser:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动gRPC服务并直接从任何浏览器调用它：
- en: Start the `Northwind.Grpc.Service` project.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Grpc.Service`项目。
- en: Start any browser, show the developer tools, and click the **Network** tab to
    start recording network traffic.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开任何浏览器，显示开发者工具，并点击**网络**选项卡以开始记录网络流量。
- en: 'Navigate to a URL to make a `GET` request that will call the `GetEmployee`
    method, `https://localhost:5131/v1/employee/1`, and note the JSON response returned
    by the gRPC service, as shown in *Figure 13.13*:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到URL以发出调用`GetEmployee`方法的`GET`请求，`https://localhost:5131/v1/employee/1`，并注意gRPC服务返回的JSON响应，如图*13.13*所示：
- en: '![](img/B19587_13_13.png)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_13_13.png)'
- en: 'Figure 13.13: Making an HTTP 1.1 GET request to a gRPC service and receiving
    a response in JSON'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13：向gRPC服务发出HTTP 1.1 GET请求并接收JSON响应
- en: 'In your code editor, in the `HttpRequests` folder, create a new file named
    `grpc-json-transcoding.http`, and add statements to make requests for employees
    using HTTP/1.1, as shown in the following code:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中，在`HttpRequests`文件夹中，创建一个名为`grpc-json-transcoding.http`的新文件，并添加使用HTTP/1.1请求员工的语句，如下面的代码所示：
- en: '[PRE85]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Send both requests, confirm the responses are correct, and then review the
    gRPC service command prompt or terminal to confirm that the requests were made
    using HTTP/1.1, as shown in the following output:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送两个请求，确认响应正确，然后查看 gRPC 服务命令提示符或终端，确认请求是使用 HTTP/1.1 发送的，如下所示：
- en: '[PRE86]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Close the `.http` file, close the browser, and shut down the web server.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 `.http` 文件，关闭浏览器，并关闭 web 服务器。
- en: Comparing with gRPC-Web
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 gRPC-Web 比较
- en: '**gRPC-Web** is an alternative to gRPC JSON transcoding to allow gRPC services
    to be called from a browser. gRPC-Web achieves this by executing a gRPC-Web client
    inside the browser. This has the advantage that the communications between the
    browser and gRPC service use Protobuf and therefore get all the performance and
    scalability benefits of true gRPC communication.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '**gRPC-Web** 是 gRPC JSON transcoding 的替代方案，允许从浏览器调用 gRPC 服务。gRPC-Web 通过在浏览器中执行
    gRPC-Web 客户端来实现这一点。这具有优势，即浏览器和 gRPC 服务之间的通信使用 Protobuf，因此获得真实 gRPC 通信的所有性能和可扩展性优势。'
- en: As you have seen, gRPC JSON transcoding allows browsers to call gRPC services
    as if they were HTTP APIs with JSON. The browser needs to know nothing about gRPC.
    The gRPC service is responsible for converting those HTTP API calls into calls
    to the actual gRPC service implementation.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，gRPC JSON transcoding 允许浏览器像使用 HTTP API 一样调用 gRPC 服务，而浏览器无需了解 gRPC。gRPC
    服务负责将这些 HTTP API 调用转换为对实际 gRPC 服务实现的调用。
- en: 'To simplify and summarize:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化并总结：
- en: gRPC JSON transcoding happens on the server side.
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gRPC JSON transcoding 在服务器端发生。
- en: gRPC-Web happens on the client side.
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gRPC-Web 在客户端发生。
- en: '**Good Practice**: Add gRPC JSON transcoding support to all your gRPC services
    hosted in ASP.NET Core. This provides the best of both worlds. Clients that cannot
    use gRPC natively can call the Web API. Clients that can use gRPC natively can
    call it directly.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：将 gRPC JSON transcoding 支持添加到所有托管在 ASP.NET Core 中的 gRPC 服务。这提供了两全其美的效果。无法使用原生
    gRPC 的客户端可以调用 Web API。可以使用原生 gRPC 的客户端可以直接调用它。'
- en: Practicing and exploring
  id: totrans-448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些动手实践，并深入研究本章的主题来测试你的知识和理解。
- en: Exercise 13.1 – Test your knowledge
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What are three benefits of gRPC that make it a good choice for implementing
    services?
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gRPC 有哪些三个优点使其成为实现服务的良好选择？
- en: How are contracts defined in gRPC?
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gRPC 中的合约是如何定义的？
- en: 'Which of the following .NET types require extensions to be imported: `int`,
    `double`, or `DateTime`?'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种 .NET 类型需要导入扩展：`int`、`double` 或 `DateTime`？
- en: Why should you set a deadline when calling a gRPC method?
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在调用 gRPC 方法时应该设置一个截止日期？
- en: What are the benefits of enabling gRPC JSON transcoding to a gRPC service hosted
    in ASP.NET Core?
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 gRPC JSON transcoding 到托管在 ASP.NET Core 中的 gRPC 服务的优势是什么？
- en: Exercise 13.2 – Compare gRPC services with HTTP APIs
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.2 – 比较gRPC服务与HTTP API
- en: 'Review the article found at the following link:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅以下链接中的文章：
- en: '[https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison](https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison)'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison](https://learn.microsoft.com/en-us/aspnet/core/grpc/comparison)'
- en: Exercise 13.3 – Explore topics
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.3 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-13---building-efficient-microservices-using-grpc](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-13---building-efficient-microservices-using-grpc)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-13---building-efficient-microservices-using-grpc](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-13---building-efficient-microservices-using-grpc)'
- en: Summary
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你：
- en: Learned about some concepts of gRPC services, how they work, and their benefits.
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了一些 gRPC 服务的概念、它们的工作原理以及它们的优点。
- en: Implemented a simple gRPC service.
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了一个简单的 gRPC 服务。
- en: Implemented a gRPC service that uses an EF Core model that cannot yet use AOT
    publish.
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了一个使用 EF Core 模型（尚不能使用 AOT 发布）的 gRPC 服务。
- en: Implemented a gRPC service that uses `SqlClient` libraries that can use AOT
    publish and are therefore smaller and faster.
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了一个使用 `SqlClient` 库的 gRPC 服务，这些库可以使用 AOT 发布，因此体积更小、速度更快。
- en: Learned how to set deadlines and read metadata sent as headers and trailers.
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了如何设置截止日期以及读取作为报头和报尾发送的元数据。
- en: Implemented a custom `decimal` type and used extended date/time types.
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了一个自定义的 `decimal` 类型，并使用了扩展的日期/时间类型。
- en: Implemented a client-side interceptor.
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了一个客户端拦截器。
- en: Extended a gRPC service with support for being called as an HTTP service with
    JSON, to support clients that cannot work with gRPC natively.
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展了一个 gRPC 服务，以支持作为带有 JSON 的 HTTP 服务被调用，以支持无法原生使用 gRPC 的客户端。
- en: In the next chapter, you will review how to build website user interfaces using
    ASP.NET Core MVC.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将回顾如何使用 ASP.NET Core MVC 构建网站用户界面。
