- en: '*Chapter 13*: Implementing Authorization in .NET 6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the important aspects of building secure applications is to ensure that
    users have access only to the resources that they need. In the real world, when
    you check in to a hotel, a front-desk employee validates your ID and credit card
    and assigns a key card to access your room. Based on the type of room you have
    chosen, you may have privileges, such as access to the lounge, pool, or gym, among
    others. Here, the validation of your ID and credit card and assigning a key card
    is called **authentication**, and permitting you to access the various resources
    is called **authorization**. So, to explain it further, using a key card, we cannot
    identify who you are but can determine what you can do.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization is a mechanism by which you determine what users can do and grant
    or deny access to a resource of your application. For instance, users of our e-commerce
    application should be able to browse products, add them to the cart, and check
    out to buy them, and only admin or back-office users should be able to add or
    update product information, update the price of products, and approve or reject
    orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn what authorization is and the various ways to
    implement authorization using the ASP.NET Core framework. The following topics
    are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding authorization in .NET 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role-based authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Claims-based authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy-based authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization in client and server applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you need basic knowledge of Azure, Azure AD B2C, C#, .NET
    Core, and Visual Studio 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Back to a few basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dig into more details, let's understand the differences between authentication
    and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Authentication and authorization may look similar and be used interchangeably,
    but fundamentally they are different. The following table illustrates the differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 13.1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_13.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 13.1
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [*Chapter 12*](B18507_12_Epub.xhtml#_idTextAnchor1389), *Understanding
    Authentication*, for more details on how authentication works in ASP.NET 6.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize this, authentication and authorization go hand in hand. Authorization
    works only after the identity of the user has been established, and an authentication
    challenge is triggered by authorization when a user tries to access a secure resource.
    In the upcoming sections of this chapter, we will understand how to implement
    authorization in ASP.NET 6 applications.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorization in ASP.NET Core is handled by a **middleware**. When your application
    receives the first request from an unauthenticated user to a secured resource,
    an authentication challenge is invoked by the middleware, and depending on the
    authentication scheme, the user is either redirected to log in or access is forbidden.
    Once the identity of the user has been established after authentication, the authorization
    middleware checks whether the user can access the resource or not. In subsequent
    requests, the authorization middleware uses the identity of the user to determine
    whether access is allowed or forbidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure authorization middleware in your project, you need to invoke `UseAuthorization()`
    in `Program.cs`. It is mandatory to register authorization middleware only after
    authentication middleware, as authorization can be performed only after establishing
    the user''s identity. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, you'll notice that `app.UseAuthorization()` is
    invoked after `app.UseAuthentication()` and before `app.UseEndpoints()`.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET 6 provides simple, declarative role- and claims-based authorization
    models and rich policy-based models. In the following sections, we will learn
    more details about these.
  prefs: []
  type: TYPE_NORMAL
- en: Simple authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In ASP.NET Core, authorization is configured using `AuthorizationAttribute`.
    You can apply the `[Authorize]` attribute on a controller, action, or Razor page.
    When you add this attribute, access to that component is restricted only to authenticated
    users. Refer to the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you'll notice that the `[Authorize]` attribute is added
    to the `Index` action. When a user tries to access `/Home/Index` from the browser,
    the middleware checks whether the user is authenticated or not. If not, the user
    is redirected to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we add the `[Authorize]` attribute to a controller, access to any action
    under that controller is restricted only to authenticated users. In the following
    code, you''ll notice that the `[Authorize]` attribute is added to `HomeController`,
    making all actions under it secure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: At times, you may want to allow a few areas of your application to be accessible
    to any user; for example, the login or reset password page should be open to all,
    regardless of whether the user is authenticated or not. To meet such requirements,
    you can add the `[AllowAnonymous]` attribute to a controller or an action and
    make them available to unauthenticated users as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, you'll notice that the `[AllowAnonymous]` attribute is
    added to the `Privacy` action, though we have the `[Authorize]` attribute on the
    controller. That requirement is overridden by the `[AllowAnonymous]` attribute
    on the action method and so the `Privacy` action is accessible by all users.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `[AllowAnonymous]` attribute overrides all authorization configurations.
    If you set `[AllowAnonymous]` on a controller, setting the `[Authorize]` attribute
    on any action methods under it will have no impact. In this case, the `Authorize`
    attribute on the action methods is completely ignored.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have seen how to secure a controller or an action method. In the
    next section, we will see how to enable authorization globally in an ASP.NET Core
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling authorization globally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have seen how to secure a controller or an action method using the
    `[Authorize]` attribute. Setting the `authorize` attribute on every controller
    or action is not sustainable in large projects; you may miss configuring it on
    newly added controllers or action methods, which can lead to a security vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'ASP.NET Core allows you to enable authorization globally by adding a fallback
    policy in your application. You can define a fallback policy in `Program.cs`.
    The fallback policy will be applied to all requests where no explicit authorization
    requirement is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Adding a policy globally enforces users to be authenticated to access any action
    method in your application. This option is beneficial as you don't have to specify
    the `[Authorize]` attribute for every controller/action in your application.
  prefs: []
  type: TYPE_NORMAL
- en: You can still set the `[AllowAnonymous]` attribute on a controller or action
    method to override the fallback behavior and make it anonymously accessible.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to implement simple authorization, in the next section,
    let's understand what role-based authorization is and how it simplifies implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Role-based authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is quite common for certain areas of your application to be available to
    only certain users. Instead of granting access at the user level, general practice
    is to group users into roles and grant access to roles. Let's consider a typical
    e-commerce application, in which *users* can place orders, *support* staff can
    view, update, or cancel orders and resolve user queries, and the *admin* role
    approves or rejects orders, manages inventory, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Role-based authorization can address such requirements. When you create a user,
    you may assign it to one or more roles, and when we configure the `[Authorize]`
    attribute, we can pass one or more role names to the `Roles` property of the `Authorize`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code restricts access to all action methods under the `Admin`
    controller to users who belong to the `Admin` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, you can specify comma-separated role names in the `Roles` property
    of the `Authorize` attribute, so that users who belong to either of the configured
    roles will have access to the action methods under that controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, you''ll notice `User,Support` is supplied as a value
    of the `Roles` property of the `[Authorize]` attribute; users belonging to the
    `User` or `Support` roles can access the action methods of `OrdersController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: You can also specify multiple authorization attributes. If you do so, the user
    must be a member of all roles specified to access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, multiple `[Authorize]` attributes are configured on
    `InventoryController` for the `InventoryManager` and `Admin` roles. To access
    the `Inventory` controller, a user must have the `InventoryManager` and `Admin`
    roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: You can further restrict access to the action methods under the `Inventory`
    controller by specifying authorization attributes. In the preceding code, users
    must have the `InventoryManager` and `Admin` roles to access the `Approve` action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Programmatically, if you want to check whether a user belongs to a role, you
    can use the `IsInRole` method of `ClaimsPrinciple`. In the following example,
    you''ll notice that `User.IsInRole` accepts `roleName` and, based on the user''s
    role, it returns `true` or `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have seen how to secure a controller or an action by specifying role
    names in an authorization attribute. In the next section, we will see how to centralize
    these configurations in one place using policy-based role authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Policy-based role authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also define role requirements as policies in `Program.cs`. This approach
    is quite useful, as you can create and manage your role-based access requirements
    in one place and use policy names instead of role names to control access. To
    define a policy-based role authorization, we need to register an authorization
    policy with one or more role requirements in `Program.cs` and provide a policy
    name to the `Policy` property of the `Authorize` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, `AdminAccessPolicy` is created by adding a requirement
    with the `Admin` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'In your controller, you can specify the policy to be applied as follows, and
    access to `AdminController` is restricted to users with the `Admin` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'You can specify multiple roles while defining a policy. Users belonging to
    any one of the roles can access resources when that policy is used to authorize
    users. For example, the following code will allow a user with the `User` or `Support`
    roles to access resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: You can use an `OrderAccessPolicy` policy with the `Authorize` attribute either
    on the controller or action methods to control access.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to use role-based authorization, in the next section,
    we will create a simple application and configure it to use role-based authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing role-based authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a sample application implementing role-based authorization using
    ASP.NET Core Identity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new ASP.NET Core project. You can use the following `dotnet` `Individual`
    accounts as the `Authentication` mode and `SQLite` as the database store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You need to enable role services by invoking `AddRoles<IdentityRole>()` in
    `Program.cs`. You can refer to the following code to enable it. You''ll also notice
    `RequireConfirmedAccount` is set to `false`. This is required for this sample
    as we create users programmatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create roles and users. For this, we will add two methods,
    `SetupRoles` and `SetupUsers`, to `Program.cs`. We can make use of the `RoleManager`
    and `UserManager` services to create roles and users. In the following code, we
    create three roles. Using `IServiceProvider`, we get an instance of the `roleManager`
    service and then we make use of the `RoleExisysAsync` and `CreateAsync` methods
    to create it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, we create users and assign one of the roles using the `userManager`
    service. In the following code, we create two users – `admin@abc.com`, assigned
    the `admin` role, and `support@abc.com`, assigned the `support` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To invoke these two methods, we need an instance of `IserviceProvider`. The
    following code gets the instance to `IServiceProvider` to set up roles and users
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `Home` controller, add the following code. To simplify the implementation,
    we are using the `Index` view. In a real-life scenario, you need to return the
    view that is created for the respective action methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optionally, we can add logic to `Layout.cshtml` to display links to navigate
    based on the logged-in user''s role. The following sample makes use of `IsInRole`
    to check the user''s role and display a link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the preceding step, the sample implementation is complete, and you can
    run the application to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application, log in with `admin@abc.com`, and you will notice that
    the **Admin** menu item is visible and **Support** is hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Admin user login view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.1_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – Admin user login view
  prefs: []
  type: TYPE_NORMAL
- en: 'When you log in with `support@abc.com`, you will notice the **Support** menu
    item is visible and the **Admin** item is hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Support user login view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.2_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Support user login view
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to use claims for authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Claims-based authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **claim** is a key-value pair associated with identity after successful authentication.
    A claim can be a date of birth, gender, or zip code, for example. One or more
    claims can be assigned to a user. Claims-based authorization uses the value of
    a claim and determines whether access to a resource can be granted or not. You
    can use two approaches to validate a claim; one way is to just check whether the
    claim exists or not and the other approach is to check whether the claim exists
    with a particular value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use claims-based authorization, we need to register a policy in `Program.cs`.
    You need to pass a claim name and optional values to the `RequireClaim` method
    to register. For example, the following code registers `PremiumContentPolicy`
    with the requirement of the `PremiumUser` claim:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code, the `PremiumContentPolicy` authorization policy is used
    on `PremiumContentController`. It checks whether the `PremiumUser` claim exists
    in the user claims to authorize the user''s request; it doesn''t care what value
    is in the claim:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify a list of values while defining a claim. They will be
    validated to grant access to a resource. For example, as per the following code,
    the user request is authorized if the user has the `Country` claim with the values
    of `US`, `UK`, or `IN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Programmatically, if you want to check whether a user has a claim, you use the
    `HasClaim` method of `ClaimsPrinciple` by specifying a match condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fetch a claim value, you can use the `FindFirst` method. The following code
    illustrates an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the *Implementing role-based authorization* section, while adding
    a user to an application, you can also add a claim to the user using the `UserManager`
    service. In the following code, you''ll notice the `AddClaimAsync` method is invoked
    with `IdentityUser` and `Claim`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you will notice two claims created and associated with
    the user using the `AddClaimAsync` method. In the next section, we will see how
    to use policy-based authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Policy-based authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Policy-based authorization allows you to write your own logic to handle authorization
    requirements that suit your needs. For example, you have a requirement to verify
    a user's age and authorize the placing of an order only if the user is above 14
    years of age. You can use the policy-based authorization model to handle such
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure policy-based authorization, we need to define a requirement and
    a handler, and then register the policy with the requirement. Let''s understand
    these components:'
  prefs: []
  type: TYPE_NORMAL
- en: A **policy** is defined with one or more requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **requirement** is a collection of data parameters used by the policy to evaluate
    the user's identity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **handler** is responsible for evaluating data from the requirement against
    the context and determining whether access can be granted or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will see how to create a requirement and a handler,
    and register an authorization policy.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a requirement, you need to implement the `IAuthorizationRequirement`
    interface. This is a marker interface, so you don''t have any members to implement.
    For example, the following code creates `MinimumAgeRequirement`, with `MinimumAge`
    as a data parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Requirement handlers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Requirement handlers encapsulate logic to allow or deny a request. They use
    requirement properties against `AuthorizationHandlerContext` to determine access.
    A handler may inherit `Authorizationhandler<TRequirement>`, where `TRequirement`
    is of the `IauthorizationRequirement` type, or implement `IAuthorizationHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, `MinimumAgeAuthorizationHandler` is created by inheriting
    `AuthorizationHandler` with `MinimumAgeRequirement` as `TRequirement`. We need
    to override `HandleRequirementAsync` to write custom authorization logic where
    the user''s age is calculated from the `DateOfBirth` claim. If the user''s age
    is greater than or equal to `MinimumAge`, we invoke `context.Succeed` to grant
    access. If the claim is not present or doesn''t meet the age criteria, access
    is forbidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: To mark a requirement as successful, you need to invoke `context.Succeed` by
    passing a requirement as a parameter. You don't have to handle failure, as another
    handler for the same requirement may succeed. If you want to forbid a request,
    you can invoke `context.Fail`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Handlers must be registered for service collection in `Program.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A policy is registered with a name and a requirement in `Program.cs`. You can
    register one or more requirements while defining a policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, a policy with a requirement is created by invoking
    `policy.Requirements.Add()` and passing a new instance of `MinimumAgeRequirement`.
    You''ll also notice `MinimumAgeAuthorizationHandler` is added to the service collection
    with a singleton scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then configure an authorization policy on the controller or action to
    restrict access based on the user''s age:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: If we register a policy with more than one requirement, then all requirements
    must be satisfied for successful authorization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to further customize authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Custom authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to use policy-based authorization and
    implement custom logic to handle authorization requirements. But, it is not always
    possible to register authorization policies in `Program.cs` like that. In this
    section, we will see how to use `IAuthorizationPolicyProvider` to dynamically
    build policy configurations in your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `IAuthorizationPolicyProvider` interface has three methods to be implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GetDefaultPolicyAsync`: This method returns the default authorization policy
    to be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GetFallbackPolicyAsync`: This method returns the fallback authorization policy.
    It is used when no explicit authorization requirement is defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GetPolicyAsync`: This method is used to build and return an authorization
    policy for the provided policy name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look into an example where you want to authorize a request to several
    controllers/actions based on different age criteria, say `Over14`, `Over18`, `Over21`,
    `Over60`, and so on. One way to implement it is to register all these requirements
    as policies and use them on your controllers or actions. But, using this approach,
    the code is less maintainable and not sustainable in a large application with
    many policies. Let's see how we can make use of the authorization policy provider.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a class implementing `IAuthorizationPolicyProvider` and also
    implement `GetPolicy` and other methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `MinimumAgePolicyProvider` class implements `GetPolicyAsync`.
    The input for this method is the policy name. Since our policy name is something
    such as `Over14` or `Over18`, we can use string functions and extract the age
    from them, and a requirement is initialized with the required age and registered
    as a new policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For the implementation of `MinimumAgeRequirement`, please refer to the *Policy-based
    authorization* section.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core uses only one instance of `IAuthorizationPolicyProvider`. So, you
    should either customize a `Default` and `Fallback` authorization policy or, alternatively,
    use a backup provider.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, you'll see a sample implementation of the `GetDefaultPolicyAsync`
    and `GetFallbackPolicyAsync` methods in the `MinimumAgePolicyProvider` class.
  prefs: []
  type: TYPE_NORMAL
- en: '`AuthorizationOptions` is injected into the constructor, and it is used to
    initialize `DefaultAuthorizationPolicyProvider`. The `BackupPolicyProvider` object
    is used to implement the `GetDefaultPolicyAsync` and `GetFallbackPolicyAsync`
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: 'This concludes the implementation of `MinimumAgePolicyProvider`. You can now
    use the authorization policy on your controller or action methods. In the following
    code, you''ll notice two policies are used, one with `Over14` on top of the controller
    and another with `Over18`, on the `Index` action method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: Users with an age above 14 will have access to any action methods under `OrdersController`,
    and users older than 18 will only have access to the `Index` action.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to create and use a custom authorization
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Custom authorization attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, a policy name with an age was passed as a string, but
    the code is not clean that way. It would be good if you could pass `age` as a
    parameter to the authorization attribute. For this, you need to create a custom
    authorization attribute inheriting the `AuthorizeAttribute` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sample code, the `AuthorizeAgeOverAttribute` class is inherited
    from the `AuthorizeAttribute` class. The constructor of this class accepts `age`
    as input. In the setter, we construct and set a policy name by concatenating `PREFIX`
    and `Age`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the `AuthorizeAgeOver` attribute, we must register the `AuthorizationHandler`
    and `AuthorizationPolicyProvider` services in `Program.cs`. In the following code,
    the `MinimumAgeAuthorizationHandler` and `MinimumAgePolicyProvider` types are
    registered as `Singleton` for `IAuthorizationHandler` and `IauthorizationPolicyProvider`,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the custom attribute implementation is complete, we can use it on
    controller or action methods. In the following example, you can see a sample implementation,
    where age is passed as a parameter to our custom authorization attribute, `AuthorizeAgeOver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will learn how to configure roles in an Azure AD application
    and use role-based authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization in client and server applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we learned how to use **Azure Active Directory** (**AAD**)
    as an identity service to authenticate users, but to use role-based authorization,
    we need to make a few configuration changes in Azure AD. In this section, we will
    see how to enable and create custom roles in an Azure AD application and do so
    in our e-commerce application to authorize users.
  prefs: []
  type: TYPE_NORMAL
- en: When a user logs in to an application, Azure AD adds assigned roles and claims
    to the user's identity.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs: []
  type: TYPE_NORMAL
- en: You should already have Azure AD and an AD app set up. If you don't, you can
    refer to the *Introduction to Azure Active Directory* section of [*Chapter 12*](B18507_12_Epub.xhtml#_idTextAnchor1389),
    *Understanding Authentication*, to get set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look into the steps that need to be performed on an Azure AD application
    to enable roles:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Azure portal, navigate to your **Active Directory** tenant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left menu, under **Manage**, select **App registrations**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Azure AD application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.3_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – Azure AD application
  prefs: []
  type: TYPE_NORMAL
- en: 'Search and select your AD application from the **App registrations** page.
    Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Azure AD application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.4_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – Azure AD application
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Manifest** from the left menu to edit it, as shown in the previous
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Editing the manifest'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.5_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.5 – Editing the manifest
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate `appRoles` to configure multiple roles. Refer to the following code
    to add a role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You need to provide values for `displayName`, `value`, `description`, and `id`.
    The value for `id` is `Guid`, and it must be unique for each role you add. Similarly,
    for `value`, you need to provide the role name that you refer to in your code,
    and it should be unique.
  prefs: []
  type: TYPE_NORMAL
- en: Save the manifest to complete it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving a manifest with the required details will enable custom roles in an Azure
    AD application. In the next section, we will learn how to assign users to these
    custom roles.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning roles to users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to assign roles to users. The assignment of roles to users
    can be done using the Azure portal or programmatically using the Graph API. In
    this section, we''ll use the Azure portal to assign roles, and the same can also
    be achieved using theGraph API. For more information, you can refer to [https://docs.microsoft.com/en-us/graph/azuread-identity-access-management-concept-overview](https://docs.microsoft.com/en-us/graph/azuread-identity-access-management-concept-overview):'
  prefs: []
  type: TYPE_NORMAL
- en: In the Azure portal, navigate to the **Azure Active Directory** tenant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Enterprise applications** from the left menu and search for and select
    your AD application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Manage** | **Users and Groups** | **Add User**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for and select the user, and click on **Ok**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Select Role** to choose the role you want to assign.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Assign** to save the selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can continue these steps to assign roles to multiple users.
  prefs: []
  type: TYPE_NORMAL
- en: 'To secure controllers or actions, you can add an `Authorize` attribute along
    with the roles. In the following code, the `Admin` controller is accessible only
    to users with the `Admin` role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have learned how to enable roles in Azure AD and use the role-based
    model for authorization. In the next section, we will see how to access roles
    and claims using the user's identity in views.
  prefs: []
  type: TYPE_NORMAL
- en: User identity in views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A user claim principle can be used in views to conditionally show or hide data
    as required. For example, the following code checks the `IsAuthenticated` property
    of the user identity to determine whether the user is authenticated or not. If
    the user is not authenticated, a link to `Sign in` is displayed; otherwise, the
    username with a `Sign out` link is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can use `IsInRole` or `HasClaim` and write our logic to show
    content to or hide content from the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: For more details, you can refer to [https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps](https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what authorization is and the different ways to
    implement it using the ASP.NET Core framework. We learned how to restrict or anonymously
    allow users to access resources using simple, declarative role- and claims-based
    models, and we learned how to implement custom logic to authorize user requests
    using a rich policy-based authorization model.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to dynamically add authorization policies using authorization
    policy providers and build custom authorized attributes. We also learned how to
    configure custom roles in Azure AD and use them in an ASP.NET Core application.
    Depending on your authorization requirements, you can use one or more authorization
    models to secure your applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to monitor the health and performance
    of an ASP.NET Core application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After reading the chapter, you should be able to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is the primary service that determines whether authorization
    is successful or not?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `IAuthorizationHandler`
  prefs: []
  type: TYPE_NORMAL
- en: b. `IAuthorizationRequirement`
  prefs: []
  type: TYPE_NORMAL
- en: c. `IAuthorizationService`
  prefs: []
  type: TYPE_NORMAL
- en: d.`IAuthorizationPolicyProvider`
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: c**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, access to the `Support` action is restricted to only
    the `Support` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: a. True
  prefs: []
  type: TYPE_NORMAL
- en: b. False
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: b**'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn more about authorization, you can refer to [https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-6.0).
  prefs: []
  type: TYPE_NORMAL
