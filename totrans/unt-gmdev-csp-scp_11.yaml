- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Multiplayer and Networking – Matchmaking, Security, and Interactive Gameplay
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多玩家和网络 - 匹配、安全和交互式游戏
- en: This chapter is your gateway to mastering the intricacies of creating compelling
    multiplayer experiences in Unity. Here, you will first build a foundational understanding
    of networking principles that are crucial for any multiplayer game developer.
    With this knowledge, you will explore how to construct robust systems for matchmaking,
    enabling players to connect effortlessly. As we progress, you’ll learn methods
    to synchronize game states effectively across different clients, ensuring fair
    and consistent gameplay. Additionally, the chapter tackles the challenges posed
    by network latency and introduces essential security measures to safeguard your
    games. By the end of this journey, you will be equipped with the skills necessary
    to design and implement engaging, secure multiplayer environments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是您通往掌握Unity中创建引人入胜的多玩家体验的复杂性的大门。在这里，您将首先建立一个对网络原则的基础理解，这对于任何多玩家游戏开发者来说都是至关重要的。有了这些知识，您将探索如何构建健壮的系统来进行匹配，使玩家能够轻松连接。随着我们的进展，您将学习有效同步不同客户端之间游戏状态的方法，确保公平和一致的游戏体验。此外，本章还探讨了网络延迟带来的挑战，并介绍了必要的安全措施来保护您的游戏。通过这次旅程的结束，您将具备设计和实现引人入胜、安全的多人游戏环境所需的技能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the fundamentals of networking in Unity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Unity中网络的基础知识
- en: Developing a system for multiplayer matchmaking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发多玩家匹配系统
- en: Ensuring consistent game states across different clients
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在不同客户端之间保持一致的游戏状态
- en: Managing network latency and implementing security measures
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理网络延迟并实施安全措施
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the examples/files related to this chapter here: [https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter11](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter11)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到与本章相关的示例/文件：[https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter11](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter11)
- en: The basics of networking in Unity
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity中网络的基础
- en: In the dynamic realm of multiplayer game development, understanding the fundamentals
    of networking in Unity is essential. This section lays the groundwork by exploring
    the comprehensive networking capabilities that Unity offers, tailored specifically
    for creating interactive multiplayer environments. You will learn about the Unity
    networking stack. This includes both low-level APIs such as the Transport Layer,
    which facilitates custom network protocols, and high-level APIs such as Unity
    **Netgame for GameObjects** (**NGO**), Mirror, or Photon, which simplify the creation
    of complex networked games. Additionally, this section introduces the basic architectures
    of multiplayer games, focusing on the differences and practical applications of
    client-server and peer-to-peer models, setting the stage for deeper insights into
    efficient game design and network management.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在多玩家游戏开发的动态领域中，理解Unity中网络的基础知识是至关重要的。本节通过探索Unity提供的全面网络功能，为创建交互式多玩家环境奠定基础。您将了解Unity网络堆栈。这包括低级API，如传输层，它便于自定义网络协议，以及高级API，如Unity
    **Netgame for GameObjects**（**NGO**）、Mirror或Photon，它们简化了复杂网络游戏的创建。此外，本节介绍了多玩家游戏的基本架构，重点关注客户端-服务器和点对点模型之间的差异及其实际应用，为深入了解高效游戏设计和网络管理奠定基础。
- en: Introduction to Unity networking
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity网络简介
- en: Embark on an exploration of Unity’s networking capabilities, which are crucial
    for creating engaging multiplayer experiences. This section introduces Unity’s
    networking features, offering both high- and low-level APIs to cater to diverse
    development needs. High-level APIs such as Mirror or Photon simplify complex tasks
    such as synchronizing player movements, while low-level APIs such as the Transport
    Layer provide detailed control over network traffic, allowing for customization
    according to specific game demands. Understanding these tools is vital for effectively
    implementing network operations that support dynamic player interactions across
    various models, including client-server and peer-to-peer systems. These architectures
    play a pivotal role in managing game states and player data, ensuring integrity,
    and reducing latency for a seamless gaming experience.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 开始探索Unity的网络功能，这对于创建引人入胜的多玩家体验至关重要。本节介绍了Unity的网络功能，提供了高阶和低阶API以满足多样化的开发需求。高阶API如Mirror或Photon简化了如同步玩家动作等复杂任务，而低阶API如传输层则提供了对网络流量的详细控制，允许根据特定游戏需求进行定制。理解这些工具对于有效地实施支持各种模型（包括客户端-服务器和点对点系统）的动态玩家交互的网络操作至关重要。这些架构在管理游戏状态和玩家数据、确保完整性和减少延迟以实现无缝游戏体验方面发挥着关键作用。
- en: The diagram below illustrates the client-server model, a fundamental concept
    in networking where client devices communicate with server systems to access resources
    and services, with servers capable of handling communication with numerous clients
    simultaneously.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示说明了客户端-服务器模型，这是网络中的基本概念，其中客户端设备与服务器系统通信以访问资源和服务，服务器能够同时处理与多个客户端的通信。
- en: '![Figure 11.1 – The client-server model](img/B22128_11_1.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – 客户端-服务器模型](img/B22128_11_1.jpg)'
- en: Figure 11.1 – The client-server model
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 客户端-服务器模型
- en: In addition to the client-server model, another fundamental networking setup
    used in gaming is the peer-to-peer model. While the client-server model involves
    clients communicating with a central server, the peer-to-peer model allows for
    direct communication between devices.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了客户端-服务器模型之外，游戏开发中使用的另一个基本网络设置是点对点模型。虽然客户端-服务器模型涉及客户端与中央服务器通信，但点对点模型允许设备之间进行直接通信。
- en: '![Figure 11.2 – The peer-to-peer model](img/B22128_11_2.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – 点对点模型](img/B22128_11_2.jpg)'
- en: Figure 11.2 – The peer-to-peer model
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 点对点模型
- en: For developers starting with Unity networking, understanding these models is
    crucial as they directly influence game design and the player experience. Choosing
    the right architecture depends on the specific needs of the game, such as the
    number of players it supports, its latency requirements, and the level of security
    needed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于刚开始使用Unity网络开发的开发者来说，理解这些模型至关重要，因为它们直接影响游戏设计和玩家体验。选择正确的架构取决于游戏的具体需求，例如它支持的玩家数量、其延迟要求以及所需的网络安全级别。
- en: As we’ve explored, Unity’s networking capabilities are essential for developing
    multiplayer games that offer dynamic and interactive player experiences. By understanding
    the foundational aspects of networked games and the common networking models such
    as client-server and peer-to-peer model, developers can be better equipped to
    harness the full potential of Unity’s networking tools.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所探讨的，Unity的网络功能对于开发提供动态和互动玩家体验的多玩家游戏至关重要。通过理解网络游戏的基础以及常见的网络模型，如客户端-服务器和点对点模型，开发者可以更好地利用Unity网络工具的潜力。
- en: This foundational knowledge is crucial as we delve deeper into the specific
    networking APIs and tools provided by Unity, which enable the practical application
    of these concepts. These tools and APIs facilitate the creation of robust multiplayer
    environments, ensuring smooth and responsive gameplay across various network conditions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基础知识对于我们深入了解Unity提供的特定网络API和工具至关重要，这些工具使得这些概念的实际应用成为可能。这些工具和API促进了强大多玩家环境的创建，确保在各种网络条件下游戏流畅且响应迅速。
- en: Now, let’s examine the specific networking tools available in Unity in greater
    detail, exploring how they can be effectively utilized to enhance your multiplayer
    game development projects.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地检查Unity中可用的特定网络工具，探讨如何有效地利用它们来增强您的多玩家游戏开发项目。
- en: Unity networking APIs and tools
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity网络API和工具
- en: Moving deeper into the technical aspects of Unity’s multiplayer capabilities,
    we will now examine the array of networking APIs that Unity provides, which cater
    to a wide range of development needs. From the intricacies of the Transport Layer,
    which allows for the creation of custom network protocols, to more comprehensive,
    high-level frameworks such as Unity, Mirror, or Photon, this exploration covers
    the spectrum of options available to developers. Each tool offers distinct features
    and functionalities designed to streamline the networking process for different
    types of games. Understanding these tools’ key features, use cases, and integration
    into Unity’s ecosystem is vital for developers aiming to select the most effective
    networking solutions for their specific projects. This knowledge will empower
    you to craft networked experiences that are not only robust but also optimized
    for the interactive demands of modern multiplayer gaming.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究Unity的多玩家功能的技术方面，我们现在将检查Unity提供的网络API系列，这些API满足广泛的开发需求。从允许创建自定义网络协议的传输层复杂性，到更全面的、高级的框架，如Unity、Mirror或Photon，这次探索涵盖了开发者可用的所有选项。每个工具都提供独特的功能和功能，旨在简化不同类型游戏的网络过程。了解这些工具的关键功能、用例以及它们在Unity生态系统中的集成对于旨在为特定项目选择最有效网络解决方案的开发者至关重要。这种知识将使您能够构建不仅强大而且针对现代多人游戏交互需求进行优化的网络体验。
- en: Within Unity’s networking ecosystem, developers have access to a broad spectrum
    of APIs, from low-level options that offer granular control over network operations
    to high-level frameworks that simplify common networking tasks. This variety ensures
    that whether you are building a simple multiplayer puzzle game or a complex open-world
    adventure, there’s a tool that fits your needs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity的网络生态系统中，开发者可以访问从提供对网络操作细粒度控制的低级选项到简化常见网络任务的高级框架的广泛API。这种多样性确保了无论您是在构建简单的多人益智游戏还是复杂的开放世界冒险，都有一个适合您需求的工具。
- en: Low-level APIs
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 低级API
- en: Starting with the Transport Layer, Unity provides developers with the ability
    to implement and manage custom network protocols. This layer is crucial for games
    requiring optimized network traffic management, such as those with high demands
    on real-time performance. It allows for precise control over data packets sent
    and received across the network, enabling developers to fine-tune the networking
    to reduce latency and increase reliability.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从传输层开始，Unity为开发者提供了实现和管理自定义网络协议的能力。这一层对于需要优化网络流量管理的游戏至关重要，例如对实时性能有高要求的游戏。它允许对通过网络发送和接收的数据包进行精确控制，使开发者能够微调网络以减少延迟并提高可靠性。
- en: 'Let’s take a look at an example of Transport Layer code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个传输层代码的例子：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code block initializes the network by starting either a server or a client
    based on the `IsServer` condition:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码块根据`IsServer`条件启动服务器或客户端来初始化网络：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code block sends a message from a client to the server using Unity’s Netcode
    system, ensuring the message is encoded and transmitted properly:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码块使用Unity的Netcode系统从客户端向服务器发送消息，确保消息被正确编码和传输：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code block sets up a handler to receive and log messages sent from clients
    to the server using Unity’s Netcode system.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码块设置了一个处理程序，用于接收和记录客户端通过Unity的Netcode系统发送给服务器的消息。
- en: Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Actual API calls may vary slightly depending on the service or framework being
    used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实际API调用可能因所使用的服务或框架而略有不同。
- en: Low-level APIs are best suited for games that need custom networking solutions
    tailored to specific performance requirements.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 低级API最适合需要针对特定性能要求定制网络解决方案的游戏。
- en: High-level frameworks
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级框架
- en: For developers looking for more abstract functionalities, Unity integrates with
    several high-level networking frameworks such as Mirror and Photon. These frameworks
    handle many of the complexities of network management, such as automatic synchronization
    of player states and easy handling of **Remote Procedure Calls** (**RPCs**). This
    abstraction allows developers to focus more on gameplay mechanics rather than
    the intricacies of network code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于寻求更抽象功能的开发者，Unity集成了多个高级网络框架，如Mirror和Photon。这些框架处理了许多网络管理的复杂性，例如玩家状态的自动同步和**远程过程调用**（**RPCs**）的简单处理。这种抽象化使得开发者可以更多地关注游戏机制，而不是网络代码的复杂性。
- en: 'Here’s an example of high-level API usage (Mirror):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个高级API使用示例（Mirror）：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This C# script includes a command function executed on the server to instantiate
    and spawn a projectile, followed by an RPC function to update all clients with
    fire effects.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此C#脚本包括一个在服务器上执行的命令函数，用于实例化和生成一个投射物，随后是一个RPC函数，用于更新所有客户端的火焰效果。
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This example demonstrates how Mirror’s syntax for commands and RPCs simplifies
    client-server interactions. Attributes like `[Command]` for server logic and `[ClientRpc]`
    for client updates make it easy to specify where code runs, reducing complexity
    and allowing developers to focus on gameplay mechanics.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了Mirror的命令和RPC语法如何简化客户端-服务器交互。如`[Command]`用于服务器逻辑和`[ClientRpc]`用于客户端更新的属性，使得指定代码运行的位置变得简单，减少了复杂性，并允许开发者专注于游戏机制。
- en: High-level frameworks are ideal for developers who need robust, ready-made solutions
    that can easily be integrated and scaled. Understanding these tools’ capabilities
    and how they integrate within Unity’s ecosystem is essential for making an informed
    choice about which is best for your project’s specific needs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 高级框架是那些需要稳健、现成解决方案的开发者的理想选择，这些解决方案可以轻松集成和扩展。了解这些工具的功能以及它们如何在Unity生态系统中集成，对于做出关于哪个最适合你项目特定需求的有根据的选择至关重要。
- en: By comparing the features, benefits, and potential drawbacks of these different
    networking layers and frameworks, you can better understand how to leverage Unity’s
    networking stack to build stable, scalable, and engaging multiplayer experiences.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较这些不同网络层和框架的功能、优势和潜在缺点，你可以更好地理解如何利用Unity的网络堆栈构建稳定、可扩展且引人入胜的多人体验。
- en: We have now explored the diverse range of Unity’s networking APIs and tools,
    highlighting the distinctions between low-level APIs such as the Transport Layer
    and high-level frameworks such as Mirror and Photon. These tools not only facilitate
    the development of customized network protocols but also streamline the creation
    and management of complex multiplayer systems. With this comprehensive understanding
    of the tools available within Unity’s networking stack, as well as their respective
    features and ideal use cases, developers are well-equipped to select the right
    tools for their specific project needs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经探索了Unity网络API和工具的多样化范围，突出了低级API（如传输层）和高级框架（如Mirror和Photon）之间的区别。这些工具不仅促进了定制网络协议的开发，还简化了复杂多人系统的创建和管理。通过对Unity网络堆栈中可用工具的全面理解，以及它们各自的功能和理想用例，开发者可以为他们的特定项目需求选择合适的工具。
- en: As we move forward, we will apply this foundational networking knowledge to
    delve into the architectural design of multiplayer games, exploring how these
    technologies are practically implemented to build robust and scalable multiplayer
    environments.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，我们将应用这些基础网络知识，深入探讨多人游戏的架构设计，探索这些技术是如何实际实施以构建稳健且可扩展的多人环境的。
- en: Multiplayer game architecture
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多人游戏架构
- en: 'As we transition away from understanding the tools and APIs within Unity’s
    networking framework, we turn our attention to the structural foundations of multiplayer
    game architecture. This section explores the two primary models used in the design
    of multiplayer games: client-server and peer-to-peer models. Each model offers
    unique advantages and challenges in terms of game state synchronization, handling
    latency, and scalability within the Unity environment. By examining these models,
    developers can gain insights into how best to structure their multiplayer games,
    ensuring robust performance and player engagement. This exploration is critical
    for making informed decisions about which architectural approach will best suit
    the specific needs of your project, leveraging Unity’s networking capabilities
    to their fullest potential.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们从理解Unity网络框架中的工具和API转向，我们将注意力转向多人游戏架构的结构基础。本节探讨了在多人游戏设计中使用的两种主要模型：客户端-服务器和点对点模型。每种模型在游戏状态同步、处理延迟和Unity环境中的可扩展性方面都提供了独特的优势和挑战。通过研究这些模型，开发者可以深入了解如何最佳地构建他们的多人游戏，确保稳健的性能和玩家参与度。这种探索对于做出明智的决定至关重要，即哪种架构方法将最适合你项目的特定需求，充分利用Unity的网络功能。
- en: 'In the realm of multiplayer game development using Unity, choosing the right
    architecture is crucial for creating a smooth and engaging player experience.
    The two predominant models used are the client-server and peer-to-peer models,
    each with its distinct advantages and considerations:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Unity进行多人游戏开发领域，选择合适的架构对于创建流畅且吸引人的玩家体验至关重要。目前使用的两种主要模型是客户端-服务器模型和对等模型，每种模型都有其独特的优势和考虑因素：
- en: '**Client-server model**: This architecture is characterized by a central server
    that all clients connect to. The server manages the game state, processes inputs
    from all clients, and sends updates back to them. This model is particularly advantageous
    in games where consistency and authority are crucial, such as competitive shooters
    or strategy games. The server acts as the authoritative source, which helps prevent
    cheating and ensures that all players have a synchronized view of the game world.
    However, this model can introduce latency, particularly if the server is geographically
    distant from the players. It also requires more robust, often expensive, infrastructure
    to handle the server’s processing and bandwidth needs.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端-服务器模型**：这种架构的特点是有一个中央服务器，所有客户端都连接到这个服务器。服务器管理游戏状态，处理来自所有客户端的输入，并将更新发送回他们。这种模型在一致性权威至关重要的游戏中特别有利，例如竞技射击游戏或策略游戏。服务器作为权威源，有助于防止作弊并确保所有玩家对游戏世界的视图保持同步。然而，这种模型可能会引入延迟，尤其是如果服务器地理位置远离玩家。此外，它还需要更强大、通常更昂贵的基础设施来处理服务器的处理和带宽需求。'
- en: '**Peer-to-peer model**: The peer-to-peer model decentralizes the responsibilities
    handled by a single server among all participating clients. Each client directly
    communicates with the others, which can reduce latency by eliminating the server
    as a middleman. This model is well-suited for small or cooperative games, where
    the risk of cheating is lower and the demands on scalability and absolute authority
    are less stringent. On the downside, peer-to-peer architectures can struggle with
    issues such as **Network Address Translation** (**NAT**) traversal (the process
    of establishing and maintaining connections through routers that use NAT), and
    synchronizing game state across all clients can be more challenging without a
    central authority.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对等模型**：对等模型将单个服务器处理的责任分散到所有参与客户端之间。每个客户端直接与其他客户端通信，这可以通过消除服务器作为中间人而减少延迟。这种模型非常适合小型或合作游戏，在这些游戏中，作弊的风险较低，对可扩展性和绝对权威的要求也不那么严格。然而，对等架构可能会遇到诸如**网络地址转换**（NAT）穿越（通过使用NAT的路由器建立和维护连接的过程）等问题，并且在没有中央权威的情况下同步游戏状态可能会更具挑战性。'
- en: For Unity developers, the choice between these architectures involves considering
    factors such as the game’s scale, the expected player base, and the type of game
    experience being created. Unity’s networking tools support both architectures,
    allowing developers to implement custom solutions that are tailored to their specific
    needs. Effective use of these models in Unity also involves leveraging the network
    management features provided by high-level APIs such as Mirror or Photon, which
    offer built-in support for handling the complexities of networked environments,
    such as latency management and data synchronization.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Unity开发者来说，在这两种架构之间进行选择需要考虑游戏规模、预期的玩家基础以及正在创建的游戏体验类型等因素。Unity的网络工具支持这两种架构，允许开发者实施针对其特定需求的定制解决方案。在Unity中有效使用这些模型还涉及利用由高级API（如Mirror或Photon）提供的网络管理功能，这些API提供了内置支持，用于处理网络环境的复杂性，例如延迟管理和数据同步。
- en: Understanding these architectures and their implications helps Unity developers
    design more robust multiplayer experiences. By carefully selecting the appropriate
    model, developers can ensure that their game architecture aligns with their gameplay
    objectives and performance requirements.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些架构及其影响有助于Unity开发者设计更健壮的多玩家体验。通过仔细选择适当的模型，开发者可以确保他们的游戏架构与他们的游戏目标性能要求相一致。
- en: Having delved into the foundational architectures of multiplayer gaming—namely
    the client-server and peer-to-peer models—we’ve uncovered the unique advantages
    and challenges each presents within the Unity framework. The client-server model,
    renowned for its robust control and synchronization capabilities, is ideal for
    large, competitive environments but requires substantial infrastructure and careful
    handling of latency. Conversely, the peer-to-peer model offers reduced latency
    and is well-suited for small or cooperative settings, though it may struggle with
    synchronization and security issues. These insights form a critical foundation
    for any Unity developer aiming to implement effective multiplayer functionality.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究了多人游戏的基础架构——即客户端-服务器和点对点模型——之后，我们发现每种模型在Unity框架内都各有其独特的优势和挑战。客户端-服务器模型以其强大的控制和同步能力而闻名，非常适合大型、竞争激烈的环境，但需要大量的基础设施和仔细处理延迟问题。相反，点对点模型提供了较低的延迟，非常适合小型或合作环境，尽管它可能在同步和安全问题上遇到挑战。这些见解对于任何希望实现有效多人功能的Unity开发者来说是一个关键的基础。
- en: As we progress, we will build on this knowledge by exploring practical applications,
    starting with the creation and management of a multiplayer lobby, where these
    architectural decisions will begin to materially shape the player’s experience.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们不断前进，我们将通过探索实际应用来构建这一知识，首先从创建和管理多人游戏大厅开始，在这些架构决策将开始实质性地塑造玩家的体验。
- en: Building a multiplayer lobby
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建多人游戏大厅
- en: The development of a multiplayer lobby is a pivotal step in crafting engaging
    multiplayer experiences in Unity, serving as the operational core for matchmaking
    and game session management. This section outlines how to design and implement
    a robust lobby system that not only facilitates smooth player interaction but
    also enhances user engagement through intuitive **User Interface** (**UI**) design
    and effective room management. By focusing on the integration of essential features
    such as game mode selection, player readiness indicators, and dynamic room listing,
    this guide provides a comprehensive framework for developers to create functional
    and user-friendly multiplayer lobbies. This foundational knowledge is crucial
    for ensuring that players can seamlessly navigate through game options, connect
    with others, and prepare for gameplay, setting the stage for the detailed technical
    implementations that will follow in this chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中开发多人游戏大厅是构建引人入胜的多人游戏体验的关键步骤，它作为匹配和游戏会话管理的操作核心。本节概述了如何设计和实现一个健壮的大厅系统，该系统不仅能够促进玩家之间的顺畅互动，还能通过直观的**用户界面**（**UI**）设计和有效的房间管理来增强用户参与度。通过关注游戏模式选择、玩家准备状态指示器和动态房间列表等基本功能的集成，本指南为开发者提供了一个全面的框架，以创建功能齐全且用户友好的多人游戏大厅。这种基础知识的掌握对于确保玩家能够无缝地浏览游戏选项、与他人连接并准备游戏至关重要，为本章后续的详细技术实现奠定了基础。
- en: Lobby design principles
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大厅设计原则
- en: 'Designing an effective multiplayer lobby is essential for fostering an engaging
    and user-friendly gaming experience. This section delves into the foundational
    principles of lobby design, emphasizing the need for a clear and intuitive UI.
    By ensuring players can effortlessly navigate game options, join rooms, or initiate
    new game sessions, developers can significantly enhance player satisfaction and
    retention. Key elements such as game mode selection, player count limits, and
    privacy settings are crucial components that every lobby should incorporate. These
    features not only improve the user experience but also lay the groundwork for
    the more technical aspects of lobby implementation that will follow. Through a
    thoughtful design approach, this section aims to equip developers with the necessary
    tools to build a welcoming and efficient lobby that meets the needs of all players:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个有效的多人游戏大厅对于培养引人入胜且用户友好的游戏体验至关重要。本节深入探讨了大厅设计的基础原则，强调了清晰直观的用户界面的重要性。通过确保玩家能够轻松地浏览游戏选项、加入房间或启动新的游戏会话，开发者可以显著提高玩家的满意度和留存率。游戏模式选择、玩家数量限制和隐私设置等关键元素是每个大厅都应该包含的组成部分。这些功能不仅改善了用户体验，还为大厅实现的技术方面奠定了基础。通过深思熟虑的设计方法，本节旨在为开发者提供必要的工具，以构建一个欢迎且高效的、满足所有玩家需求的大厅。
- en: '**Simplify and enhance the player’s interaction with the game**: When designing
    the UI for a multiplayer lobby, the primary goal is to simplify and enhance the
    player’s interaction with the game from the moment they log in. A well-designed
    lobby serves as the central hub for players, providing them with quick and easy
    access to all necessary functionalities. This includes a straightforward navigation
    system that guides players through various game options, allowing them to effortlessly
    join rooms, start new game sessions, or adjust settings. The clarity and intuitiveness
    of the UI are paramount, as they directly affect the player’s initial impression
    and ongoing engagement with the game.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化并增强玩家与游戏的互动**：在设计多人游戏大厅的UI时，主要目标是简化并增强玩家从登录那一刻起与游戏的互动。一个设计良好的大厅是玩家的中心枢纽，为他们提供快速便捷地访问所有必要功能的方式。这包括一个直观的导航系统，引导玩家通过各种游戏选项，使他们能够轻松加入房间、开始新的游戏会话或调整设置。UI的清晰度和直观性至关重要，因为它们直接影响玩家对游戏的最初印象和持续参与度。'
- en: '**Incorporate key elements to make the interface user-friendly**: To ensure
    that the lobby is user-friendly, developers must incorporate several key elements
    that cater to the needs and expectations of players:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**融入关键元素以使界面用户友好**：为确保大厅用户友好，开发者必须融入几个关键元素，以满足玩家的需求和期望：'
- en: Game mode selection should be prominently displayed, offering players a hassle-free
    way of choosing the style of gameplay they prefer, whether it’s competitive, cooperative,
    or solo play
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏模式选择应突出显示，为玩家提供一种无烦恼的方式来选择他们偏好的游戏风格，无论是竞技、合作还是单人游戏。
- en: Additionally, it is essential to implement controls for adjusting player count
    limits, enabling players to set the size of the gaming group according to their
    preferences
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，实施调整玩家数量限制的控制也是必不可少的，使玩家能够根据他们的偏好设置游戏小组的大小。
- en: Privacy settings are another critical feature, allowing players to decide whether
    they want their game sessions to be public, where anyone can join, or private,
    where only invited players can participate
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐私设置是另一个关键特性，允许玩家决定他们是否希望他们的游戏会话是公开的，任何人都可以加入，或者私有的，只有受邀玩家可以参与。
- en: '**Design elements with accessibility in mind**: Each of the key elements should
    be designed with accessibility in mind, ensuring that all players, regardless
    of their experience level with gaming interfaces, can navigate and utilize the
    lobby’s features. The design should also accommodate various device formats, from
    desktops to mobile phones, providing a consistent experience across all platforms.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**考虑可访问性的设计元素**：每个关键元素都应考虑到可访问性，确保所有玩家，无论他们对游戏界面的经验水平如何，都能导航并使用大厅的功能。设计还应适应各种设备格式，从桌面到移动电话，为所有平台提供一致的用户体验。'
- en: By focusing on these aspects, developers can create a multiplayer lobby that
    not only meets the functional requirements of the game but also enhances player
    satisfaction and retention. This solid foundation in UI design principles is crucial
    as it sets the stage for the more technical aspects of lobby implementation, ensuring
    a seamless transition into the actual development process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过关注这些方面，开发者可以创建一个多人游戏大厅，不仅满足游戏的职能需求，还能提升玩家的满意度和留存率。在UI设计原则上的坚实基础至关重要，因为它为大厅实现的更技术性方面奠定了基础，确保了开发过程的顺利过渡。
- en: '![Figure 11.3 – Sample lobby design where a player can select to join an existing
    team](img/B22128_11_3.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – 示例大厅设计，玩家可以选择加入现有的团队](img/B22128_11_3.jpg)'
- en: Figure 11.3 – Sample lobby design where a player can select to join an existing
    team
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 示例大厅设计，玩家可以选择加入现有的团队
- en: Having established the key design principles for crafting an effective multiplayer
    lobby, we now understand the importance of a clear and intuitive UI that facilitates
    effortless navigation through game options, room joining, and session creation.
    Incorporating essential elements such as game mode selection, player count limits,
    and privacy settings ensures a lobby that meets the diverse needs of players,
    enhancing their overall experience.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在确立了构建有效多人游戏大厅的关键设计原则后，我们现在理解了清晰直观的UI对于简化游戏选项、房间加入和会话创建的重要性。包含诸如游戏模式选择、玩家数量限制和隐私设置等基本元素，确保大厅满足玩家的多样化需求，提升他们的整体体验。
- en: With a strong foundation of lobby design principles in place, the next logical
    step is to delve into the technical aspects of actually building and implementing
    these functionalities. By translating these design principles into concrete programming
    and system configuration, developers can create a functional and engaging multiplayer
    lobby that stands as the gateway to the players’ gaming experience.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在大厅设计原则的坚实基础之上，下一步合乎逻辑的步骤是深入探讨实际构建和实现这些功能的技术方面。通过将这些设计原则转化为具体的编程和系统配置，开发者可以创建一个功能齐全且引人入胜的多玩家大厅，作为玩家游戏体验的门户。
- en: Implementing lobby functionality
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现大厅功能
- en: Transitioning from the design principles of a multiplayer lobby to its technical
    implementation, this section delves into the process of building a robust lobby
    system within Unity. We will explore the essential steps involved in setting up
    room management, which enables players to create, list, and join game rooms seamlessly.
    Utilizing Unity’s powerful networking tools, such as Mirror and Photon, we’ll
    examine how these frameworks assist in managing connections and synchronizing
    player data across sessions. Practical examples through code snippets and pseudocode
    will be provided, highlighting key functionalities such as room listing, joining
    mechanisms, and player readiness status management. These insights will equip
    developers with the necessary tools to implement these critical features, ensuring
    a smooth and efficient lobby system.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从多人游戏大厅的设计原则过渡到其技术实现，本节深入探讨了在Unity中构建稳健大厅系统的过程。我们将探讨设置房间管理所涉及的必要步骤，这使玩家能够无缝地创建、列出和加入游戏房间。利用Unity强大的网络工具，如Mirror和Photon，我们将研究这些框架如何帮助管理连接并在会话之间同步玩家数据。将通过代码片段和伪代码提供实际示例，突出关键功能，如房间列出、加入机制和玩家准备状态管理。这些见解将使开发者具备实施这些关键功能所需的工具，确保大厅系统平稳高效。
- en: Building a functional lobby system in Unity involves several key steps that
    integrate Unity’s networking tools to manage rooms and player interactions effectively.
    This process includes creating, listing, and joining game rooms, which are essential
    for multiplayer environments.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中构建功能齐全的大厅系统涉及几个关键步骤，这些步骤将Unity的网络工具集成到管理房间和玩家交互中，以有效地进行。这个过程包括创建、列出和加入游戏房间，这对于多人环境至关重要。
- en: 'Here, we’ll go through the technical setup using popular networking frameworks
    such as Mirror or Photon, which facilitate these tasks through their comprehensive
    APIs and tools:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过使用流行的网络框架，如Mirror或Photon，来介绍技术设置，这些框架通过其全面的API和工具简化了这些任务：
- en: '**Room creation**: The first step in lobby functionality is allowing players
    to create a game room. This involves setting up a simple UI where players can
    enter details such as the room name and game settings and then using networking
    tools to instantiate these rooms on the network:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建房间**：大厅功能的第一步是允许玩家创建游戏房间。这涉及到设置一个简单的用户界面，玩家可以在其中输入房间名称和游戏设置，然后使用网络工具在网络上实例化这些房间：'
- en: '[PRE4]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Room listing and joining**: Once rooms are created, they need to be listed
    so other players can find and join them. This typically involves fetching room
    data from the network and displaying it in the lobby UI:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**房间列出和加入**：一旦创建了房间，它们就需要被列出，以便其他玩家可以找到并加入它们。这通常涉及到从网络中检索房间数据并在大厅UI中显示：'
- en: '[PRE5]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Managing player readiness**: An important aspect of the lobby system is managing
    player readiness, ensuring that all players are ready before starting the game.
    This can be managed by tracking player status and updating all clients when changes
    occur:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**管理玩家准备状态**：大厅系统的一个重要方面是管理玩家准备状态，确保所有玩家在开始游戏之前都已准备好。这可以通过跟踪玩家状态并在状态发生变化时更新所有客户端来实现：'
- en: '[PRE6]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These code snippets provide a basic framework for setting up the necessary components
    of a lobby system in Unity. By leveraging networking frameworks such as Mirror
    or Photon, developers can efficiently handle the creation, listing, and management
    of multiplayer rooms, along with synchronizing player data and readiness status
    across clients. This functionality not only improves the multiplayer experience
    but also ensures smooth and efficient game session management.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码片段提供了一个在Unity中设置大厅系统必要组件的基本框架。通过利用网络框架如Mirror或Photon，开发者可以高效地处理多人房间的创建、列出和管理，以及同步客户端之间的玩家数据和准备状态。这一功能不仅改善了多人体验，还确保了游戏会话管理平稳高效。
- en: We have now outlined the foundational steps for implementing lobby functionality
    in Unity, detailing the creation, listing, and joining of game rooms through the
    use of Unity’s networking tools such as Mirror or Photon. This section provided
    essential insights into managing connections and synchronizing player data, which
    is crucial for ensuring that players can seamlessly interact within the lobby.
    Examples and pseudocode illustrated practical implementations, offering a clear
    pathway for developers to establish robust lobby systems.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经概述了在Unity中实现大厅功能的基础步骤，详细说明了通过使用Unity的网络工具（如Mirror或Photon）创建、列出和加入游戏房间。本节提供了管理连接和同步玩家数据的必要见解，这对于确保玩家可以在大厅中无缝交互至关重要。示例和伪代码展示了实际实现，为开发者建立稳健的大厅系统提供了清晰的路径。
- en: As we progress, the focus will shift toward enriching these basic functionalities
    with advanced features and integrating them into the lobby’s UI, enhancing both
    the aesthetic appeal and the functional depth of the multiplayer lobby. This next
    step will delve into incorporating sophisticated elements such as chat systems,
    friend lists, and customizable match settings, which are pivotal for crafting
    a fully featured and engaging multiplayer environment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，重点将转向通过将高级功能集成到大厅的UI中，丰富这些基本功能，从而增强多人游戏大厅的美学吸引力和功能性深度。这一步将深入探讨集成复杂的元素，如聊天系统、好友列表和可自定义的比赛设置，这些对于构建一个功能齐全且引人入胜的多玩家环境至关重要。
- en: Advanced lobby features and UI integrations
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级大厅功能和用户界面集成
- en: This section enhances the multiplayer lobby’s functionality in Unity by integrating
    advanced UI features that significantly boost player interaction and engagement.
    Features such as chat functionality, friends lists, and customizable match settings—such
    as map selection and game rules—are seamlessly incorporated into the lobby’s UI.
    This integration ensures that players have a cohesive and engaging experience,
    bolstered by best practices in UI design tailored for accessibility and responsive
    design across various devices.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过集成先进的UI功能增强了Unity中多人游戏大厅的功能，这些功能显著提高了玩家的互动和参与度。如聊天功能、好友列表和可自定义的比赛设置（如地图选择和游戏规则）等特性无缝集成到大厅的UI中。这种集成确保了玩家拥有连贯且引人入胜的体验，得益于针对可访问性和响应式设计的最佳UI设计实践。
- en: Chat functionality enriches community interaction, allowing players to communicate
    directly within the lobby, which is crucial for coordinating and strategizing
    before games. Similarly, a well-integrated friends list enables players to connect
    quickly, view online friends, and join games together without leaving the lobby.
    Custom match settings give players control over their gaming environment, enhancing
    personalization and engagement.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天功能丰富了社区互动，允许玩家在大厅内直接沟通，这对于游戏前的协调和策略至关重要。同样，一个良好集成的好友列表使玩家能够快速连接、查看在线好友并一起加入游戏，而无需离开大厅。自定义比赛设置让玩家能够控制他们的游戏环境，增强个性化和参与度。
- en: To make the UI both functional and inclusive, the design emphasizes accessibility
    features such as adjustable text sizes, high-contrast color schemes, and screen
    reader support, ensuring that all players, regardless of any disabilities they
    might have, can navigate and use the lobby effectively. These enhancements not
    only improve the functionality and aesthetic appeal of the game but also ensure
    a fair and consistent gameplay experience by facilitating crucial game state synchronization.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用户界面既实用又包容，设计强调了可访问性功能，如可调节的文本大小、高对比度配色方案和屏幕阅读器支持，确保所有玩家，无论他们可能有什么残疾，都能有效地导航和使用大厅。这些增强不仅提高了游戏的功能性和美学吸引力，而且通过促进关键的游戏状态同步，确保了公平和一致的游戏体验。
- en: Synchronizing game states
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步游戏状态
- en: Synchronizing game states across various clients is a cornerstone challenge
    in multiplayer game development, necessitating a deep dive into advanced techniques
    and best practices. This section will thoroughly explore the robust methodologies
    required to maintain consistency in game states across disparate network environments.
    From the fundamentals of state synchronization methods to the complexities of
    handling user inputs and reducing latency through prediction and interpolation
    techniques, we’ll cover the essential strategies to ensure a seamless multiplayer
    experience. Additionally, this discussion will include practical examples and
    guidance on utilizing Unity’s networking tools such as NetworkVariables and RPC
    calls, providing developers with the knowledge to implement efficient and responsive
    game state synchronization.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种客户端之间同步游戏状态是多人游戏开发中的一个基石挑战，需要深入研究高级技术和最佳实践。本节将彻底探讨在异构网络环境中保持游戏状态一致性的稳健方法。从状态同步方法的基本原理到处理用户输入的复杂性以及通过预测和插值技术减少延迟，我们将涵盖确保无缝多人体验的基本策略。此外，本讨论还将包括使用Unity的联网工具，如NetworkVariables和RPC调用，的实际示例和指导，为开发者提供实施高效和响应的游戏状态同步的知识。
- en: State synchronization methods
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态同步方法
- en: Synchronizing game states across various clients is a fundamental aspect of
    multiplayer game development, ensuring that all players experience the game consistently.
    This section introduces key techniques for maintaining consistency across diverse
    client experiences, discussing the nuances between reliable and unreliable state
    updates and the appropriate scenarios for each. Reliable updates, which ensure
    data integrity using TCP, are ideal for crucial game data but can introduce latency.
    Reliable updates guarantee that data is delivered accurately and in order. Conversely,
    unreliable updates use UDP for faster transmission. This is suitable for less
    critical data such as player positions, offering speed at the risk of packet loss.
    Unreliable updates do not guarantee delivery or order, prioritizing speed over
    accuracy.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种客户端之间同步游戏状态是多人游戏开发的一个基本方面，确保所有玩家都能一致地体验游戏。本节介绍了在多样化的客户端体验中保持一致性的关键技术，讨论了可靠和不可靠状态更新之间的细微差别以及每种情况适用的场景。可靠的更新，通过TCP确保数据完整性，对于关键游戏数据来说是理想的，但可能会引入延迟。可靠的更新保证数据准确无误地按顺序传递。相反，不可靠的更新使用UDP进行更快地传输。这对于不太关键的数据，如玩家位置，是合适的，它提供了速度但冒着数据包丢失的风险。不可靠的更新不保证数据的传递或顺序，优先考虑速度而非准确性。
- en: The choice between state synchronization and command or event-based synchronization
    also plays a crucial role. State synchronization regularly updates all game objects
    from the server to clients, ensuring that everyone has the most current data,
    though it can be bandwidth-intensive. Command or event-based synchronization,
    in contrast, transmits only the changes in game state, such as movement commands
    or game events, which can significantly reduce data transmission.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态同步和基于命令或事件同步之间的选择也起着至关重要的作用。状态同步定期从服务器更新所有游戏对象到客户端，确保每个人都能获得最新的数据，尽管这可能需要大量的带宽。相比之下，基于命令或事件的同步仅传输游戏状态的变化，如移动命令或游戏事件，这可以显著减少数据传输。
- en: Developers must carefully choose the right synchronization method based on their
    game’s needs. High-precision games might favor reliable updates and regular state
    synchronization, while fast-paced games may benefit from the speed of unreliable
    updates and command-based synchronization. These strategies form the backbone
    of multiplayer game architecture, ensuring fairness and engagement by allowing
    all players to see the same game world in nearly real time. The selection of synchronization
    methods is a crucial decision that impacts game performance and player experience,
    requiring a balance between network efficiency and gameplay accuracy.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者必须根据他们游戏的需求仔细选择合适的同步方法。高精度游戏可能更倾向于可靠的更新和定期的状态同步，而快节奏的游戏可能从不可靠的更新和基于命令的同步中受益。这些策略构成了多人游戏架构的基石，通过允许所有玩家几乎实时地看到相同的游戏世界，确保了公平性和参与度。同步方法的选取是一个关键决策，它影响着游戏性能和玩家体验，需要在网络效率和游戏准确性之间取得平衡。
- en: In this discussion, we’ve examined the crucial techniques for synchronizing
    game states in multiplayer environments, focusing on the trade-offs between reliable
    and unreliable updates and the strategic use of state versus command or event-based
    synchronization. Reliable updates ensure complete data integrity for crucial elements
    and are suitable for essential game data, while unreliable updates offer quicker,
    though less secure, data transmission for rapidly changing elements such as player
    positions. Moving forward, we’ll explore how these foundational synchronization
    strategies are critical for managing real-time user inputs across the network,
    ensuring that every player’s actions are seamlessly integrated and reflected in
    the game world without compromising performance or consistency. This approach
    is essential for maintaining a fluid and engaging multiplayer experience.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次讨论中，我们探讨了在多人环境中同步游戏状态的关键技术，重点关注了可靠和不可靠更新之间的权衡以及状态与命令或基于事件的同步的战略使用。可靠的更新确保了关键元素的数据完整性，适用于基本游戏数据，而不可靠的更新提供了更快但不太安全的快速变化元素（如玩家位置）的数据传输。展望未来，我们将探讨这些基础同步策略对于管理网络实时用户输入的重要性，确保每位玩家的动作无缝集成并反映在游戏世界中，而不影响性能或一致性。这种方法对于保持流畅和吸引人的多人游戏体验至关重要。
- en: Handling user inputs across the network
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网络中处理用户输入
- en: In networked multiplayer games, efficiently managing user inputs across clients
    and servers is essential for maintaining a responsive and fair gameplay environment.
    This section delves into the complexities of capturing, transmitting, and processing
    these inputs. Techniques such as input buffering, command queues, and reconciliation
    are critical for addressing network latency challenges. These strategies ensure
    that all players’ actions are accurately represented in the game, providing a
    consistent experience regardless of network conditions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络多人游戏中，高效管理客户端和服务器之间的用户输入对于保持响应和公平的游戏环境至关重要。本节深入探讨了捕捉、传输和处理这些输入的复杂性。输入缓冲、命令队列和协调等技术对于解决网络延迟挑战至关重要。这些策略确保所有玩家的动作在游戏中得到准确表示，无论网络条件如何，都能提供一致的游戏体验。
- en: Input collection involves capturing every player’s actions in real time, such
    as keystrokes or touchscreen interactions. These inputs are then quickly transmitted
    using protocols such as UDP, which is known for its low-latency benefits, though
    it requires careful management due to its unreliability. Input buffering helps
    smooth out input discrepancies caused by network jitter, ensuring actions are
    processed in a consistent order. This is crucial when the timing and sequence
    of events significantly impact gameplay.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 输入收集涉及实时捕捉每位玩家的动作，例如按键或触摸屏交互。这些输入随后会通过UDP等协议快速传输，UDP因其低延迟优势而闻名，但因其不可靠性需要谨慎管理。输入缓冲有助于平滑由网络抖动引起的输入差异，确保动作按一致顺序处理。这在事件的时间和顺序对游戏玩法有重大影响时至关重要。
- en: Command queues help manage and sequence user actions, maintaining logical and
    fair gameplay even when network issues cause out-of-order or delayed messages.
    Reconciliation techniques adjust discrepancies between the client’s predicted
    state and the server’s actual state, rolling back to the last confirmed server
    state and reapplying any intervening inputs. This keeps the game state synchronized
    across all clients, avoiding differing outcomes on different screens.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 命令队列有助于管理和排序用户动作，即使在网络问题导致消息顺序错乱或延迟的情况下，也能保持逻辑和公平的游戏玩法。协调技术调整客户端预测状态与服务器实际状态之间的差异，回滚到最后确认的服务器状态，并重新应用任何中间输入。这确保了所有客户端的游戏状态同步，避免了在不同屏幕上出现不同的结果。
- en: These input management techniques are foundational for reducing latency impacts
    and maintaining game fairness and responsiveness. By integrating these with movement
    prediction and interpolation strategies, developers can further minimize lag perception,
    ensuring smooth, responsive gameplay even under suboptimal network conditions.
    This integrated approach is the key to delivering a superior multiplayer gaming
    experience.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些输入管理技术是减少延迟影响和保持游戏公平性与响应性的基础。通过将这些技术与移动预测和插值策略相结合，开发者可以进一步减少延迟感知，即使在网络条件不佳的情况下也能确保流畅、响应迅速的游戏体验。这种集成方法是提供卓越多人游戏体验的关键。
- en: Movement prediction and interpolation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动预测和插值
- en: In networked games, ensuring smooth and continuous character movement despite
    network delays poses a significant challenge. This section will delve into the
    techniques of movement prediction and interpolation, which are critical for enhancing
    player experience. Predictive algorithms anticipate future player movements, enabling
    the game to stay responsive and minimize lag effects, even during unexpected network
    latency. Meanwhile, interpolation techniques help smooth transitions and avoid
    jarring jumps in character positions when updates from the server arrive. Together,
    these strategies are instrumental in making the game feel more fluid and responsive,
    significantly reducing the perception of lag and improving gameplay interaction.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络游戏中，即使在网络延迟的情况下确保角色移动的平滑和连续性也是一个重大挑战。本节将深入探讨运动预测和插值技术，这些技术对于增强玩家体验至关重要。预测算法预测未来的玩家移动，使游戏保持响应性并最小化延迟效应，即使在意外的网络延迟期间也是如此。同时，插值技术有助于平滑过渡，并在服务器更新到达时避免角色位置上的突然跳跃。这些策略共同有助于使游戏感觉更加流畅和响应，显著减少延迟感知并提高游戏交互。
- en: In networked multiplayer games, ensuring that character movement remains smooth
    and consistent despite the inevitable delays introduced by network communication
    is a fundamental challenge. Predictive algorithms play a crucial role here by
    estimating where players will move next based on their current direction and speed.
    This allows the game to display a position that closely approximates where the
    player will actually be by the time the next network update is received. This
    predictive step helps create a seamless experience, reducing the jarring effect
    of network lag.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络多人游戏中，确保角色移动即使在网络通信不可避免地引入的延迟下仍然保持平滑和一致，是一个基本挑战。预测算法在这里发挥着关键作用，通过根据玩家的当前方向和速度估计他们下一步将移动的位置。这使得游戏能够在接收到下一个网络更新之前显示一个接近玩家实际位置的位置。这一预测步骤有助于创建无缝的体验，减少网络延迟带来的冲击感。
- en: Additionally, interpolation is employed to smooth out any abrupt changes in
    position that occur when new data is received from the server. By gradually transitioning
    between the last known position and the new one, interpolation mitigates the visual
    stutter or teleportation effect that can occur when positions update suddenly
    due to network latencies. This smoothing technique is the key to maintaining a
    fluid visual experience, thereby enhancing the overall responsiveness of the game
    and reducing the delay in responsiveness for the player. These combined methods
    ensure that gameplay remains engaging and appears consistent, even under less-than-ideal
    network conditions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，插值还用于平滑由服务器接收的新数据引起的任何位置上的突然变化。通过在最后已知位置和新位置之间逐渐过渡，插值减轻了由于网络延迟导致的突然位置更新时可能出现的视觉卡顿或瞬移效果。这种平滑技术是保持流畅视觉体验的关键，从而增强游戏的整体响应性并减少玩家响应延迟。这些综合方法确保即使在不太理想的网络条件下，游戏体验仍然引人入胜且看起来一致。
- en: In this section, we delved into how movement prediction and interpolation techniques
    address the inherent challenges of character movement in networked games, aiming
    to enhance smoothness and continuity despite network delays. By employing predictive
    algorithms, developers can anticipate player movements, while interpolation methods
    help smooth out abrupt positional changes resulting from network updates. These
    techniques are crucial for minimizing the latency perception and enhancing the
    game’s responsiveness, providing players with a seamless experience.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们深入探讨了如何通过预测和插值技术来解决网络游戏中角色移动的固有挑战，旨在即使在网络延迟的情况下也能提高平滑性和连续性。通过采用预测算法，开发者可以预测玩家的移动，而插值方法有助于平滑由网络更新引起的突然位置变化。这些技术对于最小化延迟感知和增强游戏的响应性至关重要，为玩家提供无缝的体验。
- en: As we move forward, we will explore how Unity’s specific tools for state synchronization
    can be applied to leverage these strategies effectively, ensuring that game states
    remain consistent across all clients, further improving gameplay fluidity and
    fairness.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，我们将探讨如何有效地应用 Unity 的特定状态同步工具来利用这些策略，确保游戏状态在所有客户端上保持一致，从而进一步提高游戏流畅性和公平性。
- en: Unity tools for state synchronization
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity 状态同步工具
- en: As you delve deeper into the world of multiplayer game development in Unity,
    mastering state synchronization is essential for creating seamless interactive
    experiences. This section provides a practical guide to implementing robust state
    synchronization using Unity’s networking tools, including Networked Variables,
    RPCs, and SyncVars. These tools offer a framework for ensuring that game states
    are consistent across all clients, which is crucial for maintaining gameplay integrity
    and fairness. We’ll explore how each tool can be applied in real-world scenarios,
    complete with examples and code snippets to illustrate their practical use in
    synchronizing game states effectively, enhancing both the developer’s toolkit
    and the player’s experience.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你深入 Unity 的多人游戏开发世界，掌握状态同步对于创建无缝的交互体验至关重要。本节提供了使用 Unity 的网络工具（包括网络变量、RPC 和
    SyncVars）实现强大状态同步的实用指南。这些工具提供了一个确保游戏状态在所有客户端上保持一致的框架，这对于维护游戏完整性和公平性至关重要。我们将探讨每个工具如何在现实场景中应用，包括示例和代码片段，以说明它们在有效同步游戏状态中的实际用途，从而增强开发者的工具集和玩家的体验。
- en: 'Unity provides several tools designed specifically for managing state synchronization
    in multiplayer games, each serving unique purposes and scenarios. Let’s explore
    how these tools — Networked Variables, RPCs, and SyncVars — can be used to synchronize
    game states effectively:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 提供了几个专门用于管理多人游戏中状态同步的工具，每个工具都有其独特的用途和场景。让我们来探讨这些工具——网络变量、RPC 和 SyncVars——如何有效地同步游戏状态：
- en: '**Networked Variables**: Network Variables are a powerful feature for ensuring
    that specific game state variables are kept in sync across all clients and the
    server. These variables automatically handle updates across the network, making
    them ideal for critical game data that must be consistent for all players. Here’s
    an example:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Networked Variables**：网络变量是确保特定游戏状态变量在所有客户端和服务器上保持同步的强大功能。这些变量自动处理网络更新，非常适合必须对所有玩家保持一致性的关键游戏数据。以下是一个示例：'
- en: '[PRE7]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**RPCs**: RPCs allow for executing functions across the network. They are used
    when an action needs to trigger effects across multiple clients but is initiated
    by a single user’s interaction or a specific game event. Here’s an example:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RPCs**：RPCs 允许在网络中执行函数。当需要触发多个客户端的效果，但动作是由单个用户的交互或特定的游戏事件发起时，会使用 RPC。以下是一个示例：'
- en: '[PRE8]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, `FireProjectileServerRpc` is called by the player who fires a projectile.
    The server then calls `FireProjectileClientRpc` to ensure that all clients perform
    the fire action.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`FireProjectileServerRpc` 由发射投射物的玩家调用。然后服务器调用 `FireProjectileClientRpc`
    来确保所有客户端执行发射动作。
- en: '**SyncVars**: SyncVars are variables that, when their value changes on the
    server, automatically synchronize that new value to all clients. They are particularly
    useful for less frequently updated yet important game state data such as player
    scores or team statuses:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SyncVars**：SyncVars 是当它们在服务器上的值发生变化时，会自动将新值同步到所有客户端的变量。它们特别适用于更新频率较低但重要的游戏状态数据，如玩家分数或团队状态：'
- en: '[PRE9]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, `score` is a SyncVar. When `AddScore` is called on the
    server and changes the score, the new score value is automatically synced to all
    clients.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，`score` 是一个 SyncVar。当在服务器上调用 `AddScore` 并更改分数时，新的分数值会自动同步到所有客户端。
- en: Each of these tools serves to simplify different aspects of networked state
    management, enabling developers to focus more on gameplay mechanics and less on
    the intricacies of network communication. By selecting the appropriate synchronization
    technique based on the specific needs and context of your game, you can ensure
    a smooth and responsive multiplayer experience.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具各自简化了网络状态管理的不同方面，使开发者能够更多地关注游戏机制，而不是网络通信的复杂性。根据您游戏的具体需求和上下文选择合适的同步技术，可以确保多人游戏体验的流畅和响应。
- en: In the detailed exploration of synchronizing game states across multiple clients,
    we have delved into various methods to ensure consistency and responsiveness in
    multiplayer games. Techniques such as state synchronization, managing user inputs
    across the network, and applying movement prediction and interpolation have been
    examined to reduce lag perception and enhance player interaction. By utilizing
    Unity’s robust tools such as Networked Variables and RPC calls, developers can
    implement effective synchronization strategies that maintain game state integrity
    across all participants.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细探索跨多个客户端同步游戏状态的过程中，我们探讨了确保多人游戏一致性和响应性的各种方法。我们研究了状态同步、管理网络中的用户输入以及应用移动预测和插值等技术，以减少延迟感知并增强玩家互动。通过利用Unity的强大工具，如网络变量和RPC调用，开发者可以实施有效的同步策略，以维护所有参与者之间的游戏状态完整性。
- en: 'Transitioning from the challenges of state synchronization, the focus now shifts
    to addressing two pivotal aspects of multiplayer games: network latency and security.
    The upcoming discussion will outline strategic approaches to minimize and compensate
    for latency, including lag compensation and client-side prediction. Furthermore,
    it will highlight essential security measures that are needed to safeguard against
    common threats such as cheating and **Distributed Denial of Service** (**DDoS**)
    attacks (which overwhelm a server with traffic to disrupt service). This not only
    ensures a smoother player experience but also upholds the security and integrity
    of the gaming environment, which is crucial for maintaining trust and engagement
    in multiplayer settings.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从状态同步的挑战过渡，现在的重点转向解决多人游戏的两个关键方面：网络延迟和安全。接下来的讨论将概述最小化和补偿延迟的战略方法，包括延迟补偿和客户端预测。此外，它将强调为防范作弊和**分布式拒绝服务**（**DDoS**）攻击（通过流量淹没服务器以中断服务）所需的必要安全措施。这不仅确保了更平滑的玩家体验，也维护了游戏环境的安全和完整性，这对于在多人环境中保持信任和参与至关重要。
- en: Handling network latency and security
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理网络延迟和安全问题
- en: 'The culmination of our exploration into multiplayer game development addresses
    two pivotal challenges: network latency and security. This final section delves
    into sophisticated strategies designed to minimize and compensate for latency
    issues that can detract from the player experience, such as employing lag compensation
    techniques and client-side prediction. Additionally, it emphasizes the importance
    of robust security measures to safeguard against prevalent threats such as cheating
    and DDoS attacks. By covering these critical aspects, we aim to equip developers
    with the necessary knowledge and tools to maintain a smooth and secure environment,
    ensuring both the integrity of the game and an optimal experience for players.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对多人游戏开发的探索达到高潮，解决了两个关键挑战：网络延迟和安全问题。本节深入探讨了旨在最小化和补偿可能导致玩家体验下降的延迟问题的复杂策略，例如采用延迟补偿技术和客户端预测。此外，它强调了采取强大安全措施的重要性，以防范作弊和DDoS攻击等常见威胁。通过涵盖这些关键方面，我们旨在为开发者提供必要的知识和工具，以维护一个平稳和安全的环境，确保游戏完整性和为玩家提供最佳体验。
- en: Minimizing and compensating for latency
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小化和补偿延迟
- en: Network latency is a pervasive challenge in multiplayer games, capable of significantly
    impacting the player experience. This section focuses on both minimizing and compensating
    for this issue through strategic measures and technological innovations. Initially,
    we will explore strategies to reduce latency through efficient network architecture
    and optimal server selection, aiming to enhance the immediacy of player interactions.
    Following this, we will delve into various techniques designed to compensate for
    the unavoidable delays that occur, such as lag compensation, client-side prediction,
    and entity interpolation. These methods help maintain a smooth gameplay experience
    by predicting and adjusting for network behavior in real time. Examples and pseudocode
    will be provided to illustrate how these techniques can be effectively implemented
    in Unity, offering practical insights into enhancing game performance and player
    satisfaction.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 网络延迟是多人游戏中的一个普遍挑战，能够显著影响玩家体验。本节重点介绍通过战略措施和技术创新来最小化和补偿这一问题的方法。最初，我们将探讨通过高效的网络架构和最佳服务器选择来减少延迟的策略，旨在增强玩家交互的即时性。随后，我们将深入研究各种旨在补偿不可避免延迟的技术，如延迟补偿、客户端预测和实体插值。这些方法通过实时预测和调整网络行为，有助于保持流畅的游戏体验。将提供示例和伪代码来说明如何在Unity中有效地实现这些技术，从而提供增强游戏性能和玩家满意度的实用见解。
- en: To effectively manage network latency in multiplayer games, developers must
    prioritize both minimizing and compensating for this latency to ensure a seamless
    player experience. Initially, the focus is on establishing an efficient network
    architecture. This involves choosing the right server locations based on the geographic
    distribution of players, optimizing server hardware and software, and employing
    efficient networking protocols that reduce the time data takes to travel between
    the client and the server.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地管理多人游戏中的网络延迟，开发者必须优先考虑最小化和补偿这种延迟，以确保无缝的玩家体验。最初，重点是建立一个高效的网络架构。这包括根据玩家的地理分布选择正确的服务器位置，优化服务器硬件和软件，并采用高效的网络协议，以减少数据在客户端和服务器之间传输所需的时间。
- en: 'Here’s an example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code iterates through a list of servers, measuring and comparing
    their ping times in a loop to identify and select the server with the lowest ping,
    thereby optimizing network performance.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码通过循环测量和比较服务器列表的ping时间，以识别和选择ping最低的服务器，从而优化网络性能。
- en: Once the network architecture has been optimized, techniques such as lag compensation,
    client-side prediction, and entity interpolation are crucial for dealing with
    the inevitable latency. Lag compensation involves adjusting the game state based
    on the delay, ensuring that user actions are reflected accurately from their perspective.
    Client-side prediction anticipates the actions of other players to render them
    without waiting for the latest server update, while entity interpolation smooths
    out the movement of objects between received states to prevent jerky movements.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦网络架构被优化，处理不可避免的延迟的技术，如延迟补偿、客户端预测和实体插值，变得至关重要。延迟补偿涉及根据延迟调整游戏状态，确保用户动作从他们的视角准确反映。客户端预测预测其他玩家的动作，以便在没有等待最新服务器更新的情况下渲染他们，而实体插值则平滑接收状态之间的对象移动，以防止动作突然。
- en: 'Here’s an example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code adjusts player positions in a networked game environment
    by predicting the local player’s movement based on their input and interpolating
    the positions of remote players to smooth transitions to server-reported locations.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码通过预测本地玩家的动作并根据输入调整，以及通过插值远程玩家的位置来平滑过渡到服务器报告的位置，在网络游戏环境中调整玩家位置。
- en: These techniques, when implemented in Unity, help in crafting a responsive gaming
    environment where the effects of latency are significantly mitigated, maintaining
    the integrity and competitiveness of gameplay. Each method plays a vital role
    in ensuring that all players have a fair and enjoyable experience, regardless
    of their internet speed or physical distance from the server.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Unity中实现这些技术时，有助于构建一个响应式的游戏环境，其中延迟的影响得到显著缓解，保持游戏的可玩性和竞争性。每种方法都在确保所有玩家都能获得公平和愉快的体验中发挥着至关重要的作用，无论他们的互联网速度或与服务器之间的物理距离如何。
- en: In addressing network latency—a critical challenge in multiplayer games—this
    section has outlined effective strategies for minimizing and compensating for
    latency through optimized network architecture, server selection, and specific
    latency handling techniques such as lag compensation, client-side prediction,
    and entity interpolation. These methods are essential for enhancing the player
    experience by ensuring smooth, responsive gameplay that feels consistent across
    different network conditions. Illustrated through practical examples and pseudocode,
    these strategies equip developers with the tools needed to implement robust solutions
    in Unity-based games. As we shift our focus from minimizing latency to enhancing
    security, it’s crucial to consider the broader implications of network management,
    especially how it intersects with protecting game integrity and player data against
    potential threats, setting the stage for a comprehensive approach to maintaining
    a secure multiplayer environment.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决网络延迟——多人游戏中的关键挑战——本节概述了通过优化网络架构、服务器选择和特定的延迟处理技术（如延迟补偿、客户端预测和实体插值）来最小化和补偿延迟的有效策略。这些方法对于通过确保在不同网络条件下感觉一致的流畅、响应式游戏体验来增强玩家体验至关重要。通过实际示例和伪代码进行说明，这些策略为开发者提供了在基于Unity的游戏中实施强大解决方案所需的工具。随着我们关注点从最小化延迟转向增强安全性，考虑网络管理的更广泛影响至关重要，特别是它与保护游戏完整性和玩家数据免受潜在威胁的交集，为维护安全的多人环境奠定了基础。
- en: Security measures for multiplayer games
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多人游戏的安全措施
- en: Security is a critical component in the development of multiplayer games. It
    is essential for maintaining both game integrity and player trust. This section
    delves into the common security challenges faced by developers, including cheating,
    exploitation of game mechanics, and susceptibility to attacks such as DDoS. We
    will explore a range of Unity-specific and general security best practices, such
    as implementing secure communication protocols, ensuring server-side validation
    of player actions, and adopting strategies to mitigate DDoS attacks. Additionally,
    we will provide insights into the tools and techniques that are effective in detecting
    and preventing cheating, aiming to arm developers with the knowledge and methods
    needed to safeguard their games against various security threats.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是多人游戏开发中的关键组成部分。它对于维护游戏完整性和玩家信任至关重要。本节深入探讨了开发者面临的常见安全挑战，包括作弊、游戏机制利用以及对DDoS等攻击的易受攻击性。我们将探讨一系列Unity特定和通用安全最佳实践，例如实施安全的通信协议、确保服务器端验证玩家操作以及采用缓解DDoS攻击的策略。此外，我们还将提供关于有效检测和预防作弊的工具和技术见解，旨在为开发者提供所需的知识和方法，以保护他们的游戏免受各种安全威胁。
- en: 'In the realm of multiplayer gaming, maintaining robust security measures is
    crucial to prevent disruptions and ensure fair play. This involves tackling issues
    such as cheating, where players might use software exploits to gain unfair advantages,
    as well as the exploitation of game mechanics, which can undermine the intended
    gameplay experience. Here are some ways to address these challenges:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在多人游戏领域，维护强大的安全措施对于防止中断并确保公平竞争至关重要。这包括解决诸如作弊等问题，玩家可能会利用软件漏洞来获得不公平的优势，以及利用游戏机制，这可能会破坏预期的游戏体验。以下是一些应对这些挑战的方法：
- en: Developers can employ secure communication protocols to encrypt data transmissions,
    thereby protecting against eavesdropping and tampering.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者可以采用安全的通信协议来加密数据传输，从而防止窃听和篡改。
- en: Server-side validation is essential. By verifying all player actions on the
    server rather than relying on client-side checks, developers can prevent many
    common cheats.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端验证是必不可少的。通过在服务器上验证所有玩家操作，而不是依赖于客户端检查，开发者可以防止许多常见的作弊行为。
- en: Strategies for mitigating DDoS attacks, such as rate limiting and employing
    specialized DDoS protection services, are also vital to defend against external
    threats that seek to disrupt service.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓解DDoS攻击的策略，如速率限制和采用专业的DDoS保护服务，对于防御旨在破坏服务的外部威胁也是至关重要的。
- en: Tools such as anti-cheat software can further aid in detecting and preventing
    cheating, ensuring that gameplay integrity is maintained and that players have
    a fair and enjoyable gaming environment.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如反作弊软件等工具可以进一步帮助检测和预防作弊，确保游戏完整性得到维护，玩家拥有公平且愉快的游戏环境。
- en: In this section, we have addressed the critical security challenges that multiplayer
    games face, such as cheating, exploitation of game mechanics, and vulnerabilities
    to DDoS attacks. Emphasizing security is essential for preserving both game integrity
    and player trust. As we transition into exploring how to ensure a secure and responsive
    networked game environment, these foundational security measures will play a pivotal
    role in developing a robust framework that supports a safe and engaging player
    experience across all network conditions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了多人游戏所面临的重大安全挑战，例如作弊、利用游戏机制以及易受DDoS攻击的漏洞。强调安全性对于维护游戏完整性和玩家信任至关重要。随着我们转向探索如何确保一个安全且响应迅速的网络游戏环境，这些基础安全措施将在构建一个支持所有网络条件下安全且吸引人的玩家体验的强大框架中发挥关键作用。
- en: The next discussion will build on these principles, focusing on creating a comprehensive
    approach to network and game security that adapts to evolving threats and maintains
    optimal performance.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次讨论将基于这些原则，重点关注创建一个全面的网络和游戏安全方法，以适应不断发展的威胁并保持最佳性能。
- en: Ensuring a secure and responsive networked game environment
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保一个安全且响应迅速的网络游戏环境
- en: Creating a secure and responsive networked game environment is paramount in
    the modern landscape of multiplayer gaming. This exploration emphasizes the critical
    balance required between implementing robust security protocols and maintaining
    smooth, responsive gameplay. Such equilibrium is essential for an optimal player
    experience, highlighting the need for continuous monitoring, rigorous testing,
    and frequent updates. These practices are not only crucial for adapting to new
    threats and evolving performance challenges but also for maintaining the delicate
    balance between security measures and gameplay fluidity. Robust security protocols
    safeguard against malicious threats and ensure fair play, yet they must not disrupt
    the game’s responsiveness or alienate players with excessive delays. This ongoing
    vigilance and adaptability underscore the fact that managing latency and security
    is a continuous process that is pivotal to the sustained success and reliability
    of multiplayer games, ensuring they remain both competitive and enjoyable for
    all users.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代多人游戏领域，创建一个安全且响应迅速的网络游戏环境至关重要。这一探索强调了在实施强大的安全协议和保持流畅、响应迅速的游戏之间所需的临界平衡。这种平衡对于最佳的玩家体验至关重要，强调了持续监控、严格测试和频繁更新的必要性。这些做法不仅对于适应新的威胁和不断发展的性能挑战至关重要，而且对于维护安全措施和游戏流畅性之间的微妙平衡也至关重要。强大的安全协议可以防止恶意威胁并确保公平竞争，但它们必须不会干扰游戏的响应性或因过度延迟而使玩家感到疏远。这种持续的警惕性和适应性强调了管理延迟和安全是一个持续的过程，对于多人游戏的持续成功和可靠性至关重要，确保它们对所有用户来说既具有竞争力又令人愉快。
- en: In this final section, we emphasized the critical need for a holistic approach
    to managing both network latency and security to ensure a successful multiplayer
    gaming environment. Balancing robust security protocols with the necessity for
    smooth and responsive gameplay is essential; excessively stringent security might
    hinder gameplay, while too little security can expose the game to vulnerabilities.
    The ongoing processes of monitoring, testing, and timely updates are recommended
    strategies. These practices allow developers to quickly adapt to new security
    threats and optimize performance, ensuring that the gaming experience remains
    secure and enjoyable for all players. This continuous commitment to refining and
    securing game networks underpins the enduring success and reliability of multiplayer
    platforms.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后部分，我们强调了在管理网络延迟和安全方面采取全面方法的重要性，以确保多人游戏环境的成功。在强大的安全协议与流畅、响应迅速的游戏需求之间取得平衡是至关重要的；过于严格的安保措施可能会阻碍游戏体验，而安保不足则可能使游戏面临漏洞。建议的策略包括持续的监控、测试和及时更新。这些做法使开发者能够迅速适应新的安全威胁并优化性能，确保游戏体验对所有玩家来说既安全又愉快。对不断改进和确保游戏网络的持续承诺是多人游戏平台持久成功和可靠性的基础。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter provided a comprehensive guide to establishing and managing multiplayer
    systems in Unity, covering everything from basic networking principles to complex
    security and synchronization challenges. We explored how to create and manage
    multiplayer lobbies, ensure consistent game states across clients, and address
    network latency and security—all of which are crucial components for maintaining
    integrity and smooth gameplay in multiplayer settings. By understanding these
    elements, developers are better equipped to deliver engaging, secure, and fair
    multiplayer experiences.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了在Unity中建立和管理多人游戏系统的全面指南，涵盖了从基本的网络原理到复杂的安保和同步挑战的所有内容。我们探讨了如何创建和管理多人游戏大厅，确保客户端之间的游戏状态一致性，以及解决网络延迟和安保问题——这些都是维护多人游戏环境中的完整性和流畅游戏体验的关键组成部分。通过理解这些要素，开发者能够更好地提供引人入胜、安全且公平的多人游戏体验。
- en: As we move forward, the focus will shift toward optimizing game performance
    to enhance efficiency and gameplay quality. In the next chapter, we will delve
    into profiling techniques and performance analysis, which are crucial for identifying
    bottlenecks and optimizing resource usage. This transition emphasizes the continual
    need to balance game functionality with performance, ensuring that games not only
    function well across networks but also operate efficiently on varying hardware,
    providing players with the best possible experience.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，重点将转向优化游戏性能以提升效率和游戏质量。在下一章中，我们将深入探讨性能分析技术和性能分析，这对于识别瓶颈和优化资源使用至关重要。这种转变强调了持续平衡游戏功能与性能的必要性，确保游戏不仅在网络上运行良好，而且在不同的硬件上也能高效运行，为玩家提供最佳的游戏体验。
