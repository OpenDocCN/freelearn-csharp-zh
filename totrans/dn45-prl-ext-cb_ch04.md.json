["```cs\n    using System;\n    using System.Linq;\n    ```", "```cs\n    public class Employee\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n    ```", "```cs\n    var employees = newList<Employee>\n    {\n      new Employee{Id=1, Title=\"Developer\", FirstName=\"Mark\", LastName=\"Smith\"},\n      new Employee{Id=2, Title=\"Director\", FirstName=\"Kate\", LastName=\"Williams\"},\n      new Employee{Id=3, Title=\"Manager\", FirstName=\"Karen\", LastName=\"Davis\"},\n      new Employee{Id=4, Title=\"Developer\", FirstName=\"Maria\", LastName=\"Santos\"},\n      new Employee{Id=5, Title=\"Developer\", FirstName=\"Thomas\", LastName=\"Arnold\"},\n      new Employee{Id=6, Title=\"Tester\", FirstName=\"Marcus\", LastName=\"Gomez\"},\n      new Employee{I =7, Title=\"IT Engineer\", FirstName=\"Simon\", LastName=\"Clark\"},\n      new Employee{Id=8, Title=\"Tester\", FirstName=\"Karmen\", LastName=\"Wright\"},\n      new Employee{Id=9, Title=\"Manager\", FirstName=\"William\", LastName=\"Jacobs\"},\n      new Employee{Id=10, Title=\"IT Engineer\", FirstName=\"Sam\", LastName=\"Orwell\"},\n      new Employee{Id=11, Title=\"Developer\", FirstName=\"Tony\", LastName=\"Meyers\"},\n      new Employee{Id=12, Title=\"Developer\", FirstName=\"Karen\", LastName=\"Smith\"},\n      new Employee{Id=13, Title=\"Tester\", FirstName=\"Juan\", LastName=\"Rodriguez\"},\n      new Employee{Id=14, Title=\"Developer\", FirstName=\"Sanjay\", LastName=\"Bhat\"},\n      new Employee{Id=15, Title=\"Manager\", FirstName=\"Abid\", LastName=\"Naseem\"}\n    };\n    ```", "```cs\n    var results = from e in employees.AsParallel()\n                    where e.Title.Equals(\"Developer\")\n                    select e;\n    ```", "```cs\n    Finally, let's loop through the results and display them to the Console, then wait for user input to exit.\n    foreach (var employee in results)\n    {\n        Console.WriteLine(\"Id:{0}  Title:{1}  First Name:{2}  Last Name:{3}\",\n            employee.Id, employee.Title, employee.FirstName, employee.LastName);\n    }\n    Console.ReadLine();\n    ```", "```cs\nvar results = from e in employees.AsParallel()\n                where e.Title.Equals(\"Developer\")\n                select e;\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    ```", "```cs\n    private static void UnorderedQuery(IEnumerable<int> source)\n    {\n        Console.WriteLine(\"Unordered results\");\n        var query = (from numbers in source.AsParallel()\n            where numbers%5 == 0\n            select numbers).Take(10);\n\n        foreach (var number in query)\n            Console.WriteLine(number);\n    }\n    ```", "```cs\n    private static void OrderedQuery(IEnumerable<int> source)\n    {\n        Console.WriteLine(\"Ordered results\");\n        var query = (from numbers in source.AsParallel().AsOrdered()\n            where numbers % 5 == 0\n            select numbers).Take(10);\n\n        foreach (var number in query)\n            Console.WriteLine(number);\n    }\n    ```", "```cs\n    var source1 = Enumerable.Range(1, 100000);\n    UnorderedQuery(source1);\n\n    Console.WriteLine();\n\n    var source2 = Enumerable.Range(1, 100000);\n    OrderedQuery(source2);\n\n    Console.ReadLine();\n    ```", "```cs\nvar query = (from numbers in source.AsParallel().AsOrdered()\n        where numbers % 5 == 0\n        select numbers).Take(10);\n```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading;\n    ```", "```cs\n    private static void NoForcedParallelism()\n    {\n        Enumerable.Range(0, 1000).AsParallel()\n                    .Where(x =>\n                    {\n                        Thread.SpinWait(1000000);\n                        return true;\n                    })\n                    .Select((x, i) => i)\n                    .ToArray();\n    }\n    ```", "```cs\n    private static void ForcedParallelism()\n    {\n        Enumerable.Range(0, 1000).AsParallel()\n                .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n                .Where(x =>\n                {\n                    Thread.SpinWait(1000000);\n                    return true;\n                })\n                .Select((x, i) => i)\n                .ToArray();\n    }\n    ```", "```cs\n    private static void Main()\n    {\n       var stopWatch = new Stopwatch();\n       stopWatch.Start();\n       NoForcedParallelism();\n       stopWatch.Stop();\n       Console.WriteLine(\"Query with no forced parallelism ran in {0} ms.\",\n    \t\tstopWatch.ElapsedMilliseconds);\n       stopWatch.Reset();\n       stopWatch.Start();\n       ForcedParallelism();\n       stopWatch.Stop();\n       Console.WriteLine(\"Query with forced parallelism ran in {0} ms.\", \n    \t\tstopWatch.ElapsedMilliseconds);\n       Console.ReadLine();\n    }\n    ```", "```cs\nEnumerable.Range(0, 1000).AsParallel()\n    .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n    .Where(x =>\n    {\n        Thread.SpinWait(1000000);\n        return true;\n    })\n    .Select((x, i) => i)\n    .ToArray();\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Threading;\n    ```", "```cs\n    private static void Main()\n    {\n\n        var result = Enumerable.Range(0, 10000).AsParallel()\n            .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n            .Where(x =>\n          {\n                    Thread.SpinWait(1000000);\n                    return true;\n                })\n            .Select((x, i) => i)\n            .ToArray();\n\n            foreach (var number in result)\n                Console.WriteLine(\"Result: {0}\",number);\n\n            Console.ReadLine();\n    }\n    ```", "```cs\n    var result = Enumerable.Range(0, 10000).AsParallel()\n            .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n            .WithDegreeOfParallelism(2)\n            .Where(x =>\n                {\n                    Thread.SpinWait(1000000);\n                    return true;\n                })\n            .Select((x, i) => i)\n            .ToArray();                       \n    ```", "```cs\nvar result = Enumerable.Range(0, 10000).AsParallel()\n        .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n .WithDegreeOfParallelism(2)\n        â€¦\n        .Select((x, i) => i)\n        .ToArray();                       \n```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var result = new ConcurrentBag<Int32>();\n    var source = Enumerable.Range(1, 100000);\n    ```", "```cs\n    var query = (from numbers in source.AsParallel()\n            where numbers % 5 == 0\n            select numbers).Take(100);\n    ```", "```cs\n    query.ForAll(r => \n        {\n            result.Add(r * r);\n        });\n    ```", "```cs\n    foreach (var value in result)\n    {\n         Console.WriteLine(\"Result squared: {0}\", value );\n    }\n    Console.ReadLine();\n    ```", "```cs\nquery.ForAll(r => \n    {\n        result.Add(r * r);\n    });\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Threading;\n    ```", "```cs\n    var numbers = ParallelEnumerable.Range(0, 1000);\n    ```", "```cs\n    var result = numbers.AsParallel()\n            .WithMergeOptions(ParallelMergeOptions.FullyBuffered)\n            .Where(number => number % 5 == 0);\n    ```", "```cs\n    foreach (var number in result)\n    {\n        Console.WriteLine(\"Result: {0}\",number);\n    }\n    Console.ReadLine();\n    ```", "```cs\n    var result = numbers.AsParallel()\n            .WithMergeOptions(ParallelMergeOptions.NotBuffered)\n            .Where(number => number % 5 == 0);\n    ```", "```cs\n    using System;\n    using System.Linq;\n    ```", "```cs\n    var numbers = ParallelEnumerable.Range(1, 1000)\n            .Where(x => x % 5 != 0)\n            .Select(i => i);\n    ```", "```cs\n    foreach (var number in numbers)\n    {\n        Console.WriteLine(\"Result: {0}\",number);\n    }\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.Linq;\n    ```", "```cs\n    public class Employee\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n    ```", "```cs\n    var employees = new[]\n    {\n      new Employee{Id=1, Title=\"Developer\", FirstName=\"Mark\", LastName=\"Smith\"},\n      new Employee{Id=2, Title=\"Director\", FirstName=\"Kate\", LastName=\"Williams\"},\n      new Employee{Id=3, Title=\"Manager\", FirstName=\"Karen\", LastName=\"Davis\"},\n      new Employee{Id=4, Title=\"Developer\", FirstName=\"Maria\", LastName=\"Santos\"},\n      new Employee{Id=5, Title=\"Developer\", FirstName=\"Thomas\", LastName=\"Arnold\"},\n      new Employee{Id=6, Title=\"Tester\", FirstName=\"Marcus\", LastName=\"Gomez\"},\n      new Employee{I =7, Title=\"IT Engineer\", FirstName=\"Simon\", LastName=\"Clark\"},\n      new Employee{Id=8, Title=\"Tester\", FirstName=\"Karmen\", LastName=\"Wright\"},\n      new Employee{Id=9, Title=\"Manager\", FirstName=\"William\", LastName=\"Jacobs\"},\n      new Employee{Id=10, Title=\"IT Engineer\", FirstName=\"Sam\", LastName=\"Orwell\"},\n      new Employee{Id=11, Title=\"Developer\", FirstName=\"Tony\", LastName=\"Meyers\"},\n      new Employee{Id=12, Title=\"Developer\", FirstName=\"Karen\", LastName=\"Smith\"},\n      new Employee{Id=13, Title=\"Tester\", FirstName=\"Juan\", LastName=\"Rodriguez\"},\n      new Employee{Id=14, Title=\"Developer\", FirstName=\"Sanjay\", LastName=\"Bhat\"},\n      new Employee{Id=15, Title=\"Manager\", FirstName=\"Abid\", LastName=\"Naseem\"}\n      new Employee{Id=16, Title=\"Developer\",FirstName=\"Kevin\", LastName=\"Strong\"}\n    };\n    ```", "```cs\n    var results = employees.AsParallel()\n        .Select(employee =>\n        {\n        if (employee.Id > 15)\n        throw new InvalidOperationException(\"Invalid employee. Id > 15.\");\n        return employee;\n        });\n    ```", "```cs\n    try\n    {\n        foreach (var employee in results)\n        {\n            Console.WriteLine(\"Id:{0}  Title:{1}  First Name:{2}  Last Name:{3}\",\n                employee.Id, employee.Title, employee.FirstName, employee.LastName);\n        }\n    }\n    catch (AggregateException aggregateException)\n    {\n        foreach (var exception in aggregateException.InnerExceptions)\n        {\n            Console.WriteLine(\"The query threw an exception: {0}\", exception.Message);\n        }\n    }\n    Console.ReadLine();\n    ```", "```cs\ntry\n{\n    foreach (var employee in results)\n    {\n        ...\n    }\n}\ncatch (AggregateException aggregateException)\n{\n    foreach (var exception in aggregateException.InnerExceptions)\n    {\n        Console.WriteLine(\"The query threw an exception: {0}\", exception.Message);\n    }\n}\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var tokenSource = new CancellationTokenSource();\n    var random = new Random();\n    var numberList = ParallelEnumerable.Range(1, 100000).OrderBy(i => random.Next());\n    ```", "```cs\n    var results = numberList\n        .AsParallel()\n        .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n        .WithCancellation(tokenSource.Token)\n        .Select(number => Math.Pow(number, 2));\n    ```", "```cs\n    Task.Factory.StartNew(() =>\n    {\n        Thread.Sleep(1000);\n        tokenSource.Cancel();\n        Console.WriteLine(\"Cancelling query.\");\n    });\n    ```", "```cs\n    try\n    {\n        foreach (var number in results)\n        {\n            Console.WriteLine(\"Result: {0}\", number);\n        }\n    }\n    catch (OperationCanceledException)\n    {\n        Console.WriteLine(\"The operation was cancelled\");\n    }\n    catch (AggregateException aggregateException)\n    {\n        foreach (var exception in aggregateException.InnerExceptions)\n        {\n            Console.WriteLine(\"Handled exception: {0}\",exception.Message);\n        }\n    }\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.Linq;\n    ```", "```cs\n    var random = new Random();\n    var numbers = ParallelEnumerable.Range(1, 1000).OrderBy(i => random.Next()).ToArray();\n    ```", "```cs\n    var result = numbers.AsParallel().Aggregate(() => new double[2],\n        (accumulator, elem) => { accumulator[0] += elem; accumulator[1]++; return accumulator; },\n        (accumulator1, accumulator2) => { accumulator1[0] += accumulator2[0]; accumulator1[1] += accumulator2[1]; return accumulator1; },\n        accumulator => accumulator[0] / accumulator[1]);\n    ```", "```cs\n    Console.WriteLine(\"Result: {0}\",result);\n    Console.ReadLine();\n    ```", "```cs\npublic static TResult Aggregate<TSource, TAccumulate, TResult>(\n  this ParallelQuery<TSource> source,\n  Func<TAccumulate> seedFactory,\n  Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc,\n  Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc,\n  Func<TAccumulate, TResult> resultSelector\n)\n```", "```cs\nnumbers.AsParallel().Aggregate(() => new double[2], //Seed factory\n    (accumulator, elem) =>  //Update accumulator function\n  { \n    accumulator[0] += elem; \n    accumulator[1]++; \n    return accumulator; \n  },\n    (accumulator1, accumulator2) =>  //Combine accumulator function\n  { \n    accumulator1[0] += accumulator2[0]; \n    accumulator1[1] += accumulator2[1]; \n    return accumulator1; \n  },\n    accumulator => accumulator[0] / accumulator[1]); //Result selector function\n```", "```cs\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    ```", "```cs\n    internal class CustomPartitioner<T> : Partitioner<T>\n    {\n\n    }\n    ```", "```cs\n    internal class CustomPartitioner<T> : Partitioner<T>\n    {\n      private readonly T[] _source;\n\n        // Class constructor. Initializes source data to array\n      public CustomPartitioner(T[] sourceData)\n        {\n            _source = sourceData;\n        }\n    }\n    ```", "```cs\n    public override bool SupportsDynamicPartitions\n    {\n        get\n        {\n            return false;\n        }\n    }\n    ```", "```cs\n    internal IEnumerator<T> GetItems(int start, int end)\n    {\n        for (var index = start; index < end; index++)\n            yield return _source[index];\n    }\n    ```", "```cs\n    public override IList<IEnumerator<T>> GetPartitions(int partitionCount)\n    {\n        IList<IEnumerator<T>> partitionedData = new List<IEnumerator<T>>();\n        var items = _source.Length / partitionCount;\n        for (var index = 0; index < partitionCount - 1; index++)\n        {\n            partitionedData.Add(GetItems(index * items, (index + 1) * items));\n        }\n        partitionedData.Add(GetItems((partitionCount - 1) * items, _source.Length));\n        return partitionedData;\n    }\n    ```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Linq;\n    ```", "```cs\n    var stopWatch = new Stopwatch();\n    var random = new Random();\n    var source = Enumerable.Range(1, 10000000).OrderBy(i => random.Next()).ToArray();\n    ```", "```cs\n    stopWatch.Start();\n    source.AsParallel()\n        .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n        .Select(item => Math.Sqrt(item));\n        stopWatch.Stop();\n        Console.WriteLine(\"PLINQ with no partioner ran in {0} ticks\", stopWatch.ElapsedTicks );\n    ```", "```cs\n    var partitioner = new CustomPartitioner<int>(source);\n\n    stopWatch.Reset();\n    stopWatch.Start();\n\n    partitioner.AsParallel()\n        .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n        .Select(item => Math.Sqrt(item));\n\n    stopWatch.Stop();\n    Console.WriteLine(\"PLINQ with custom partioner ran in {0} ticks\", stopWatch.ElapsedTicks);\n\n    Console.ReadLine();\n    ```", "```cs\npublic override bool SupportsDynamicPartitions\n{\n    get\n    {\n        return false;\n    }\n}\n```", "```cs\npublic override IList<IEnumerator<T>> GetPartitions(int partitionCount)\n{\n    IList<IEnumerator<T>> partitionedData = new List<IEnumerator<T>>();\n    var items = _source.Length / partitionCount;\n    for (var index = 0; index < partitionCount - 1; index++)\n    {\n        partitionedData.Add(GetItems(index * items, (index + 1) * items));\n    }\n    partitionedData.Add(GetItems((partitionCount - 1) * items, _source.Length));\n    return partitionedData;\n}\n```", "```cs\ninternal IEnumerator<T> GetItems(int start, int end)\n{\n    for (var index = start; index < end; index++)\n        yield return _source[index];\n}\n```"]