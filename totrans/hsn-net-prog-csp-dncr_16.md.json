["```cs\n11000000101010000000000110110101\n```", "```cs\n11000000.10101000.00000001.10110101\n```", "```cs\n192.168.1.181\n```", "```cs\nC0.A8.01.B5\n```", "```cs\n38.117.181.90\n183.174.61.12\n192.168.1.181\n```", "```cs\n11000000.10101000.00000001.10110101\n```", "```cs\n11111111.11111111.11111111.00000000\n```", "```cs\n11111111.11111111.11111111.10110101\n```", "```cs\n192.168.1.181\n```", "```cs\n255.255.255.0\n```", "```cs\n192.168.1.181/24\n```", "```cs\nfe08:0000:0000:0000:5584:7902:0028:6f0e\n```", "```cs\nfe08:0:0:0:5584:7902:28:6f0e\n```", "```cs\nfe08::5584:7902:28:6f0e\n```", "```cs\ndotnet new webapi -n DNSSimulation\n```", "```cs\n[Route(\"dns/[controller]\")]\n[ApiController]\npublic class HostsController : ControllerBase {\n    [HttpPost]\n    public IEnumerable<string> Post([FromBody] string domainName) {\n    }\n}\n```", "```cs\n{\n    \"test.com\": [ \"172.112.98.123\" ],\n    \"fake.net\": [\n        \"133.54.121.89\",\n        \"fe80:0000:0000:0000:5584:7902:d228:6f0e\"\n    ],\n    \"not-real.org\": [\n        \"123.12.13.134\",\n        \"dc39::7354:23f3:c34e\"\n    ]\n}\n```", "```cs\npublic static class Hosts {\n  public static IDictionary<string, IEnumerable<string>> Map;\n\n  static Hosts() {\n    try {\n      using (var sr = new StreamReader(\"hosts.json\")) {\n        var json = sr.ReadToEnd();\n        Map = JsonConvert.DeserializeObject<IDictionary<string, IEnumerable<string>>>(json);\n      }\n    } catch (Exception e) {\n      throw e;\n    }\n  }\n}\n```", "```cs\npublic string Post([FromBody] string domainName) {\n  var uri = new UriBuilder(domainName).Uri;\n```", "```cs\nIEnumerable<string> ipAddressStrings;\nif (!Hosts.Map.TryGetValue(uri.Host, out ipAddressStrings)) {\n   return GetSerializedIPAddresses(Dns.GetHostAddresses(uri.Host));\n}\n```", "```cs\nvar addresses = new List<IPAddress>();\nforeach (var addressString in ipAddressStrings) {\n  if (!IPAddress.TryParse(addressString, out var newAddress)) {\n    continue;\n  }\n  addresses.Add(newAddress);\n}\n```", "```cs\nprivate string GetSerializedIPAddresses(IEnumerable<IPAddress> addresses) {\n  var str = new StringBuilder(\"[\");\n  var firstInstance = true;\n  foreach (var address in addresses) {\n    if (!firstInstance) {\n      str.Append(\",\");\n    } else {\n      firstInstance = false;\n    }\n    str.Append(\"{\");\n    str.Append($\"\\\"Address\\\": {address.ToString()},\");\n    str.Append($\"\\\"AddressFamily\\\": {address.AddressFamily},\");\n    str.Append($\"\\\"IsIPv4MappedToIPv6\\\": {address.IsIPv4MappedToIPv6}\");\n    str.Append($\"\\\"IsIPv6LinkLocal\\\": {address.IsIPv6LinkLocal},\");\n    str.Append($\"\\\"IsIPv6Multicast\\\": {address.IsIPv6Multicast},\");\n    str.Append($\"\\\"IsIPv6SiteLocal\\\": {address.IsIPv6SiteLocal},\");\n    str.Append($\"\\\"IsIPv6Teredo\\\": {address.IsIPv6Teredo}\");\n    str.Append(\"}\");\n  }\n\n  str.Append(\"]\");\n  return str.ToString();\n}\n```", "```cs\n[HttpPost]\npublic string Post([FromBody] string domainName) {\n  var uri = new UriBuilder(domainName).Uri;\n  IEnumerable<string> ipAddressStrings;\n  if (!Hosts.Map.TryGetValue(uri.Host, out ipAddressStrings)) {\n    return GetSerializedIPAddresses(Dns.GetHostAddresses(uri.Host));\n  }\n\n  var addresses = new List<IPAddress>();\n  foreach (var addressString in ipAddressStrings) {\n    IPAddress newAddress;\n    if (!IPAddress.TryParse(addressString, out newAddress)) {\n        continue;\n    }\n    addresses.Add(newAddress);\n  }\n  return GetSerializedIPAddresses(addresses);\n}\n```"]