- en: '*Chapter 10*: Customizing ASP.NET Core Identity'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tenth chapter, we are going to learn how to customize ASP.NET Core Identity.
    Security is one of the most important aspects of an application. Microsoft ships
    ASP.NET Core Identity as part of the ASP.NET Core framework to add authentication
    and user management to ASP.NET Core applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to customize the basic implementation of
    the ASP.NET Core Identity UI and how to add custom information to **IdentityUser**.
    We''ll cover the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introducing ASP.Net Core Identity
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing IdentityUser
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the Identity views
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics of this chapter relate to the MVC layer of the ASP.NET Core architecture:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – ASP.NET Core architecture](img/Figure_10.1_B17996.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – ASP.NET Core architecture
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the exercises in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking the project file,
    or open it in Visual Studio Code by typing the following command in the already-open
    console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'All of the code samples for this chapter can be found in the GitHub repo for
    this book: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter10).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Introducing ASP.NET Core Identity
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An `writer` tells the application that the identity is allowed to write something.
    Identities can be nested as well. A user can be part of a group, and a group can
    be part of another group, and so forth.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core Identity is a framework that structures this concept in .NET objects
    to help you store and read the user information. The framework also provides a
    mechanism to add a login form, a registration form, session handling, and so on.
    It also helps you to store the credentials in an encrypted and secure way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'ASP.NET Core Identity provides multiple ways to authenticate your users:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Individual**: The application manages the identities on its own. It has a
    database where user information is stored and manages the login, logout, registration,
    and so on on its own.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IndividualB2C**: Manages the user data on its own, but gets it from Azure
    B2C.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SingleOrg**: The identities get managed by Azure **Active Directory** (**AD**);
    the login, logout, and so on are done by Azure AD. The application just gets a
    ready-to-use identity from the web server.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MultiOrg**: Same as the previous but enabled for multiple Azure AD organizations.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: This means the classical Windows authentication, which is only
    available if the application is hosted with IIS. The user also gets a ready-to-use
    identity from the web server.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter is not about the different ways to authenticate because this topic
    would fill an entire book.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore an application with **individual** authentication enabled.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: As you might remember from the technical requirements, the `--auth` flag is
    used to create the application. It is set to `Individual` to create an ASP.NET
    Core MVC application with individual authentication enabled. This means it comes
    with a database to store the users. The `--auth` flag adds all the relevant code
    and dependencies to enable authentication in your freshly created application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Layout reference for the ASP.NET Identity UI](img/Figure_10.2_B17996.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Layout reference for the ASP.NET Identity UI
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The `--auth` flag creates an area called `Identity` that contains a `_ViewStart.cshtml`
    file, which references the `_Layout.cshtml` file of the new project. The actual
    login or register screens are provided in a compiled library that is referenced
    to this project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The AUTHSAMPLE contains a `Data` folder that contains an Entity Framework Core
    DbContext, as well as a database migration to create and update the database that
    is used here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: All the other parts, except `Program.cs`, are completely the same as in regular
    MVC applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: If you created the application using the .NET CLI as shown in the technical
    requirements, a **SQLite** database is used. If you used Visual Studio to create
    this application, SQL Server is used to store the user data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting the application, call the following command in the terminal:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create and update the database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'If it doesn''t work, you might need to install the Entity Framework tool in
    the .NET CLI first:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, call the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The application will now start up in watch mode with hot-reload enabled. It
    will also open a browser window and call the application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – AuthSample home page'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B17996.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – AuthSample home page
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there is a menu on the upper right-hand side with the **Register**
    and **Login** options for this application. A click on the **Login** link takes
    you to the following login screen:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Login screen'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.4_B17996.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Login screen
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, this view comes from a compiled Razor library that provides the
    necessary view to the Identity area. We automatically get this UI from the framework.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: As the last thing in this section, we should have a quick look into `Program.cs`,
    which also differs from the files we saw in the last chapters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upper section, where the services are registered, there are lines of
    code to register `DbContext` as well as database exception pages:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is also a registration for default identity that adds the `EntityFramework`
    store. It is also configured to only allow confirmed accounts, which means you
    as a user need to confirm your email address before you are allowed to log in.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'In the lower section, where the middleware is used, we see that the authentication
    and authorization is used:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These two middleware enable authentication and authorization. The first tries
    to recognize the user by reading the authentication cookie. It also adds all the
    relevant information to the Identity object.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: What you might need to do is to extend the user profile by adding some more
    properties to the user. Let's see how to do so in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Customizing IdentityUser
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`IdentityUser` has the following fields: `Id`, `Username`, `Password`, `Email`,
    and `Phonenumber`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Since the display name might differ from the username, we should add a `Name`
    property. Say we would like to send birthday wishes to the user; so, we would
    like to know their date of birth.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, a file called `WebAppUser.cs` is added to the `Data` folder that
    contains the following lines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As shown here, `WebAppUser` derives from `IdentityUser` and extends it with
    the two already-mentioned properties.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, we need to modify the service registration to use the new
    `WebAppUser`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We also need to change `DbContext` in a way to use this `WebAppUser`, by changing
    the base class:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You might need to add a `using` statement to `Microsoft.AspNetCore.Identity`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it for the first step. We now need to update the database:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once you have `IdentityUser` extended with the custom properties, you can start
    to use this in the user profile. This needs some customization in the ASP.NET
    Core Identity UI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Identity views
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if the ASP.NET Core Identity views come from a compiled Razor library,
    you can customize those views to add more fields or change the layout. To do so,
    you just need to override the given views with custom ones in the predefined folder
    structure within the area.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, there is already an area called `Identity` in the project. Inside
    this area, there is a `Pages` folder. Here, a new folder called `Account` needs
    to be created, to match the route of the **Register** page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is done, place a new Razor page called `Register.cshtml` inside this
    folder and put the following content inside just to see whether the overriding
    of views is working:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you now run the app and click on **Register** in the upper left-hand corner,
    you will see the following page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Register page](img/Figure_10.5_B17996.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Register page
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: It is working.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Actually, you don't need to override the views on your own. There is a code
    generator available to scaffold the views you'd like to override.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the code generator by calling this command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If not already done, you also need to install the following packages in your
    project:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To learn what the code generator can do, run the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can scaffold the entire Identity UI as well as specific pages. If you don''t
    specify pages of the default UI, all pages will be generated in your project.
    To see which pages you can generate, type the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The idea for the first change is to let the user fill in the name property on
    the registration page.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s scaffold the **Register** page:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command tells the code generator to use the already-existing `ApplicationDbContext`
    and `Sqlite`. If you don't specify this, it will either create a new `DbContext`
    or register the existing `DbContext` to use with SQL Server instead of SQLite.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'If all is done right, the code generator should only add the `Register.cshtml`
    page as well as some infrastructure files:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Files added by the code generator](img/Figure_10.6_B17996.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Files added by the code generator
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The code generator also knows that the project is using a custom `WebAppUser`
    instead of `IdentityUser`, which means `WebAppUser` is used in the generated code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should change `Register.cshtml` to add the display name to the form.
    Add the following lines right before the form elements for the email field on
    line 15 and thereafter:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Also, `Regiser.cshtml.cs` need to be changed. The `ImportModel` class needs
    the `Name` property:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `PostAsync` method, assign the `Name` property to the newly created
    user:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'After starting the application, you will see the following registration form:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Registration form'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.7_B17996.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Registration form
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Try it out and you will see that it is working.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the user might need to update the name, we also need to change the view
    on the profile page. Here, the date of birth also needs to be added:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the newly created `Index.cshtml.cs` that is located in the `/Areas/Identity/Pages/Account/Manage/`
    folder and place the following properties inside the `InputModel` class:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can now use these properties in the corresponding `Index.cshtml`. The next
    snippet needs to be placed between the validation summary and the username:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This would be enough to display the fields, but there are some more changes
    needed to fill the form with saved data. Within the `LoadAsync` method, the instantiation
    of `InputModel` needs to be extended with the new properties:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The changed values also need to get saved when the user saves the form. Place
    the next snippet right before the third-from-last line of the `OnPostAsync` method:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This sets the values of `InputModel` to the `WebAppUser` properties and saves
    the changes in the database.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Let's try it out by calling `dotnet watch` in the terminal.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'The profile page will now look similar to this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Manage your account page'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.8_B17996.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – Manage your account page
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: You can now change the display name and add your date of birth.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: If the user provides a display name, they might show it in the upper left-hand
    corner after the login.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `_LoginPartial.cshtml` that is in the `Views/Shared` folder and replace
    the first four lines with the following code snippet:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This changes the generic type argument of `SignInManager` and `UserManager`
    from the `IdentityUser` type to the `WebAppUser` type. Inside the code block,
    the current `WebAppUser` is loaded via `UserManager` by passing the current user
    in.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `SignInManager` 和 `UserManager` 的泛型类型参数从 `IdentityUser` 类型更改为 `WebAppUser`
    类型。在代码块内部，通过传递当前用户，使用 `UserManager` 加载当前的 `WebAppUser`。
- en: 'Now, the output of the username on line 12 needs to be changed to write the
    display name:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，需要将第 12 行上用户名的输出更改为写入显示名称：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When `dotnet watch` is still running, the application running in the browser
    should already be updated. Maybe you need to log in again. You should now see
    the display name in the upper right-hand corner:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `dotnet watch` 仍在运行时，浏览器中运行的应用程序应该已经更新。可能你需要重新登录。现在你应该在右上角看到显示名称：
- en: '![Figure 10.9 – Display name'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.9 – 显示名称'
- en: '](img/Figure_10.9_B17996.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.9_B17996.jpg](img/Figure_10.9_B17996.jpg)'
- en: Figure 10.9 – Display name
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 显示名称
- en: That's it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to extend ASP.NET Core Identity to enhance
    the user object by adding additional properties. You also learned how to enhance
    the Identity UI to load, save, and update the values of the new user properties.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过添加额外的属性来扩展 ASP.NET Core Identity，以增强用户对象。你还学习了如何增强 Identity UI
    以加载、保存和更新新用户属性的值。
- en: But how would you manage roles for the users of your application?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但你将如何管理你应用程序的用户角色？
- en: This is what you will learn in the next chapter, about configuring identity
    management.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是下一章你要学习的内容，关于配置身份管理。
