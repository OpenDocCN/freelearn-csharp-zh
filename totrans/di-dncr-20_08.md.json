["```cs\n    public class FeedbackService : IFeedbackService\n    {\n      private INotifier notifier;\n public void SaveFeedback(Feedback feedback, NotifyType notify)\n {\n SaveFeedbackToDb(feedback);\n SendNotification(feedback, notify);\n }\n      private void SendNotification(Feedback feedback, NotifyType notify)\n      {\n        if (notify == NotifyType.Email)\n        {\n            notifier = new EmailNotifier();\n        }\n        else if (notify == NotifyType.Sms)\n        {\n            notifier = new SmsNotifier();\n        }\n        else if (notify == NotifyType.Voice)\n        {\n            notifier = new VoiceNotifier();\n        }\n        else\n        {\n            throw new ArgumentException(\"No matched notify type \n              found.\", notify.ToString());\n        }\n        notifier.SendNotification(feedback);\n      }\n      private int SaveFeedbackToDb(Feedback feedback)\n      {\n        // Save details in db.\n        Console.WriteLine(\"Db Saving Started.\");\n        return 1;\n      }\n    }\n```", "```cs\n    public interface IFeedbackService\n    {\n      void SaveFeedback(Feedback feedback, NotifyType notify);\n    }\n```", "```cs\n    public interface INotifier\n    {\n      void SendNotification(Feedback feedback);\n    }\n    public class EmailNotifier : INotifier\n    {\n      public void SendNotification(Feedback feedback)\n      {\n        Console.WriteLine(\"Email Notification starts!\");\n      }\n    }\n    public class SmsNotifier : INotifier\n    {\n      public void SendNotification(Feedback feedback)\n      {\n        Console.WriteLine(\"Sms Notification starts!\");\n      }\n    }\n    public class VoiceNotifier : INotifier\n    {\n      public void SendNotification(Feedback feedback)\n      {\n        Console.WriteLine(\"Voice Notification starts!\");\n      }\n    }\n```", "```cs\n    public enum NotifyType\n    {\n      Email = 1,\n      Sms = 2,\n      Voice = 3\n    }\n```", "```cs\n    public class FeedbackService : IFeedbackService\n    {\n      private readonly INotifier _notifier;\n      public FeedbackService(INotifier notifier)\n      {\n        _notifier = notifier;\n      }\n\n      public void SaveFeedback(IFeedback feedback)\n      {\n        SaveFeedbackToDb(feedback);\n\n        _notifier.SendNotification(feedback);\n      }\n      private int SaveFeedbackToDb(IFeedback feedback)\n      {\n        throw new NotImplementedException();\n      }\n    }\n```", "```cs\n    var feedbackService = new FeedbackService(new SmsNotifier());\n    feedbackService.SaveFeedback(new Feedback());\n```", "```cs\n        public FeedbackService(INotifier notifier)\n        {\n          _notifier = notifier;\n        }\n```", "```cs\n    public class Employee\n    {\n        public int EmployeeId;\n        public string EmployeeName;\n        public Department EmployeeDept;\n\n        public Employee(int id, string name)\n        {\n           EmployeeId = id;\n           EmployeeName = name;\n           EmployeeDept = new Engineering();\n        }\n    }\n```", "```cs\n    public class Department\n    {\n      public int DeptId { get; set; }\n      public string DeptName { get; set; }\n    }\n    public class Engineering : Department {  }\n```", "```cs\n        public interface IDepartment\n        {\n          int DeptId { get; set; }\n          string DeptName { get; set; }\n        }\n        public class Department : IDepartment\n        {\n          public int DeptId { get; set; }\n          public string DeptName { get; set; }\n        }\n```", "```cs\n        public class Employee\n        {\n          public int EmployeeId;\n          public string EmployeeName;\n          public IDepartment EmployeeDept;\n\n          public Employee(int id, string name, IDepartment dept)\n          {\n            EmployeeId = id;\n            EmployeeName = name;\n            EmployeeDept = dept;\n          }\n        }\n```", "```cs\n       public class Engineering : Department\n       {\n         public Engineering()\n         {\n           DeptName = \"Engineering\";\n         }\n       }\n       public class Marketing: Department\n       {\n         public Marketing()\n         {\n            DeptName = \"Marketing\";\n         }\n       }\n```", "```cs\n        static void Main(string[] args)\n        {\n          var engineering = new Engineering();\n          Employee emp = new Employee(1, \"Sasmita Tripathy\",\n            new Engineering());\n          var marketing = new Marketing();\n          Employee emp1 = new Employee(2, \"Ganeswar Tripathy\",\n            new Marketing());\n          Console.WriteLine(\"Emp Name: \" + emp.EmployeeName + \",\n            Department: \" + emp.EmployeeDept.DeptName);\n          Console.WriteLine();\n          Console.WriteLine(\"Emp Name: \" + emp1.EmployeeName + \",\n            Department: \" + emp1.EmployeeDept.DeptName);\n          Console.ReadLine();\n        }\n```", "```cs\n     var engineering = new Engineering();\n     Employee emp = new Employee(1, \"Sasmita Tripathy\", \n       new Engineering());\n     emp.EmployeeDept = new Marketing();\n```", "```cs\n    private readonly IDepartment EmployeeDept;\n```", "```cs\n    public Employee(int id, string name, IDepartment dept)\n    {   \n        EmployeeDept = dept ?? throw new ArgumentNullException();\n        EmployeeId = id;\n        EmployeeName = name;\n   }\n```", "```cs\n    public Employee(IDepartment dept)\n    {   \n        EmployeeDept = dept ?? throw new ArgumentNullException();\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n       var serviceProvider = new ServiceCollection()\n       .AddTransient<IDepartment, Engineering>()\n       .AddTransient<Employee>()\n       .BuildServiceProvider();\n\n       var emp = serviceProvider.GetService<Employee>();\n       emp.EmployeeId = 1;\n       emp.EmployeeName = \"Sasmita Tripathy\";\n\n       var emp1 = serviceProvider.GetService<Employee>();\n       emp1.EmployeeId = 2;\n       emp1.EmployeeName = \"Ganeswar Tripathy\";\n\n       Console.WriteLine(\"Emp Name: \" + emp.EmployeeName + \",\n          Department: \" + emp.GetEmployeeDepartment());\n       Console.WriteLine();\n       Console.WriteLine(\"Emp Name: \" + emp1.EmployeeName + \",\n          Department: \" + emp1.GetEmployeeDepartment());\n\n        Console.ReadLine();\n}\n```", "```cs\n    public class Employee\n    {\n      public int EmployeeId;\n      public string EmployeeName;\n\n      private IDepartment _employeeDept;\n      public IDepartment EmployeeDept\n      {\n        set\n        {\n          this._employeeDept = value;\n        }\n      }\n\n      public Employee(int id, string name)\n      {\n         EmployeeId = id;\n         EmployeeName = name;\n      }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      Employee emp = new Employee(1, \"Sasmita Tripathy\")\n      {\n EmployeeDept = new Engineering()\n      };\n\n      Employee emp1 = new Employee(2, \"Ganeswar Tripathy\")\n      {\n EmployeeDept = new Marketing()\n      };\n      Console.WriteLine(\"Emp Name: \" + emp.EmployeeName + \",\n         Department: \" + emp.EmployeeDept.DeptName);\n      Console.WriteLine();\n      Console.WriteLine(\"Emp Name: \" + emp1.EmployeeName + \",\n         Department: \" + emp1.EmployeeDept.DeptName);\n      Console.ReadLine();\n    }\n```", "```cs\n    private IDepartment _employeeDept;\n    public IDepartment EmployeeDept\n    {\n      get {\n            return this._employeeDept;\n      }\n      set\n      {\n            this._employeeDept = value;\n      }\n    }\n```", "```cs\n    private IDepartment _employeeDept;\n    public IDepartment EmployeeDept\n    {\n      get\n      {\n          if (this._employeeDept == null)\n          this.EmployeeDept = new Engineering();\n             return this._employeeDept;\n      }\n      set\n      {\n        if (value == null)\n           throw new ArgumentNullException(\"value\");\n        if (this._employeeDept != null)\n           throw new InvalidOperationException();\n\n         this._employeeDept = value;\n       }\n     }\n```", "```cs\n    public class Employee\n    {\n        public int EmployeeId;\n        public string EmployeeName;\n        public IDepartment EmployeeDept;\n\n        // Default Constructor added for .NET Core 2.0 DI.\n        // So that it can automatically create the instance.\n        public Employee() { }\n\n        public Employee(int id, string name)\n        {\n          EmployeeId = id;\n          EmployeeName = name;\n        }\n\n        public void AssignDepartment(IDepartment dept)\n        {\n           EmployeeDept = dept;\n           // Other business logic if required.\n        }\n     }\n```", "```cs\n    Employee emp = new Employee(1, \"Sasmita Tripathy\");\n    emp.AssignDepartment(new Engineering());\n\n    Employee emp1 = new Employee(2, \"Ganeswar Tripathy\");\n    emp1.AssignDepartment(new Marketing());\n```", "```cs\n    public void AssignDepartment(IDepartment dept)\n    {\n      EmployeeDept = dept ?? throw new ArgumentNullException(\"value\");\n      // Other business logic if required.\n    }\n```", "```cs\n    Employee emp = serviceProvider.GetService<Employee>();\n    emp.EmployeeId = 1;\n    emp.EmployeeName = \"Sasmita Tripathy\";\n    emp.AssignDepartment(serviceProvider.GetService<IDepartment>());\n\n    Employee emp1 = serviceProvider.GetService<Employee>();\n    emp1.AssignDepartment(serviceProvider.GetService<IDepartment>());\n    emp1.EmployeeId = 2;\n    emp1.EmployeeName = \"Ganeswar Tripathy\";\n```", "```cs\n    public Employee() {  }\n```", "```cs\n    abstract class DepartmentProvider\n    {\n      private static DepartmentProvider current;\n      public static DepartmentProvider Current\n      {\n        get\n        {\n           return current;\n        }\n        set\n        {\n           current = value;\n        }\n      }\n      public virtual Department Department { get; }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      var serviceProvider = new ServiceCollection()\n      .AddTransient<IDepartment, Engineering>()\n      .AddTransient<Employee>()\n .AddTransient<MarketingProvider>()\n      .BuildServiceProvider();\n\n       // Set the Current value by resolving with \n          MarketingProvider.\n       DepartmentProvider.Current = serviceProvider.GetService\n          <MarketingProvider>();\n\n       Employee emp = serviceProvider.GetService<Employee>();\n       emp.EmployeeId = 1;\n       emp.EmployeeName = \"Sasmita Tripathy\";\n       emp.EmployeeDept = DepartmentProvider.Current.Department;\n\n       Employee emp1 = serviceProvider.GetService<Employee>();\n       emp1.EmployeeId = 2;\n       emp1.EmployeeName = \"Ganeswar Tripathy\";\n       emp1.EmployeeDept = DepartmentProvider.Current.Department;\n\n       Console.WriteLine(\"Emp Name: \" + emp.EmployeeName + \", \n         Department: \" + emp.EmployeeDept.DeptName); // Marketing\n       Console.WriteLine();\n       Console.WriteLine(\"Emp Name: \" + emp1.EmployeeName + \",\n         Department: \" + emp1.EmployeeDept.DeptName); // Marketing\n       Console.ReadLine();\n    }\n```", "```cs\n    class MarketingProvider : DepartmentProvider\n    {\n      public override Department Department\n      {\n         get { return new Marketing(); }\n      }\n    }\n```", "```cs\n    abstract class DepartmentProvider\n    {\n      private static DepartmentProvider current;\n      public static DepartmentProvider Current\n      {\n        get\n        {\n if (current == null)\n          current = new DefaultDepartmentProvider();\n          return current;\n        }\n        set\n        {\n current = value ?? new DefaultDepartmentProvider();\n        }\n      }\n      public virtual Department Department { get; }\n    }\n```", "```cs\n    public static IPrincipal CurrentPrincipal\n    {\n      get\n      {\n         return CurrentThread._principal;\n      }\n      set\n      {\n         CurrentThread._principal = value;\n      }\n    }\n```"]