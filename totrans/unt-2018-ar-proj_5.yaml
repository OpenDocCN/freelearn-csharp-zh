- en: Picture Puzzle - The AR Experience
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create another AR-based application. This time, the
    focus will be a puzzle that could be used in education to teach languages or word
    recognition. The reason for this is that AR-based applications and games are also
    very viable sources for inspiration, and target audiences.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will introduce you to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to update an existing installation of Unity to add Vuforia support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build an education-based AR app for Windows, Android, and iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive right in and get into the background of this project and why it is
    relevant to AR.
  prefs: []
  type: TYPE_NORMAL
- en: Project background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with any other project, it is always best to start with an idea. When I first
    thought of this project, I wanted to showcase AR applications and games to also
    reflect education. I have educated children on the English language and know the
    frustrations of learning a new language intimately.
  prefs: []
  type: TYPE_NORMAL
- en: Game and application development should also teach something to the users; it
    doesn’t always have to be history, mathematics, language, science, or geography;
    it can also be something innocuous, such as reflex training or hand–eye coordination.
    We, as developers, have a unique place in the world, being able to incorporate
    learning something in an engaging way, without it seeming like something the user
    *has* to do.
  prefs: []
  type: TYPE_NORMAL
- en: This doesn’t mean that we have to mull over this and try to incorporate it into
    our apps and games; it could, and generally is, something that just happens. With
    this project, though, I have specifically targeted the learning aspect, to show
    how easily it could be incorporated into AR projects.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project is based on the idea of being able to teach children word association
    and spelling by creating a really simple puzzle for them to solve in the real
    world, which they can then check with this app, to find out whether they solved
    the puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is 15 minutes at the most.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the system requirements for Unity Version 2018.1.5:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Released:** 15 June 2018'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS:** Windows 7 SP1+, 8, 10'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPU:** Graphics card with DX9 (shader model 3.0) or DX11 with feature level
    9.3 capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unity3d.com/](https://unity3d.com/) [https://www.turbosquid.com/FullPreview/Index.cfm/ID/967597](https://www.turbosquid.com/FullPreview/Index.cfm/ID/967597)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I know we went over this in [Chapter 1](25dd1c0c-e666-497b-a30e-c680e780d243.xhtml), *What
    AR is and How to Get Set up,* but a brief refresher is in order, in case that
    chapter was skimmed over or Unity has been updated.
  prefs: []
  type: TYPE_NORMAL
- en: To install Vuforia on both macOS and Windows, the steps are quite simple; however,
    I want to show you a different method of acquiring the Vuforia software and Unity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity has another type of installation you can do called the Unity Hub, which
    you can get from the Unity website in lieu of the 2018 installer file. What Unity
    Hub does is allow you to have multiple installations of Unity in a single location,
    a way to set your preferred Unity Editor, consolidation of your projects into
    a single launcher, an easy way to update components you want installed, and it
    also gives you access to templates for project preset types. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Unity website and click on Get Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d56bdd76-c0b5-43d2-a604-4dd1fa3189c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be presented with an option for Personal, Plus or Pro. Click on Try
    Personal if that fits you and what you need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5f358e12-4595-4217-a8ba-ff96bb7dc5fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That will lead you to the download page, in which you need to put a check mark
    to accept the terms and give you the option to download the Unity application
    itself or the Unity Hub that is in Preview. We want the Unity Hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd05337d-356d-44a2-919f-fd8dfc81f0be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have downloaded and installed the Unity Hub, you can open it, and
    it will give you an option for Projects, Learn, or Installs. Click on Installs
    to look at the available versions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77f3f0f2-2179-443d-97c9-8f4e3fdf60c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We want to install the latest version of Unity, which is 2018.1.5f1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e60be635-e06b-48ee-adf6-9baef4f71c5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click to install the version you want, click on the Components you
    want and press Done to install the Unity Editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae3ef697-0ba8-4958-9367-8a640d25e1d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let’s say you forgot to select to install Vuforia during this step when
    you installed Unity—no problem; you can skip the previous points and just follow
    along from here on out.
  prefs: []
  type: TYPE_NORMAL
- en: Open a project in Unity; it could be a dummy project that you don’t want, or
    it could be the basis for this chapter’s project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Build from the file menu that opens the build menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84168b0c-dad3-4241-924a-31906b5831e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We want to select Player Settings from this window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de9fed39-b21a-49bc-807a-cfd8f0b3b6c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Player Settings window should open up where the inspector pane normally
    is. Locate XR Support Installers and click on Vuforia Augmented Reality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b01ee587-9251-46b8-bad8-b35e4165391e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open your browser and ask you to download a file. Click Save to download
    the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ca7cee8-b9a4-4b33-be7c-8be1cf7e1b4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Close the Unity Editor and install this file. This will add Vuforia support
    to your Unity installation without having to reinstall the entire editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that this has been completed, we can move on to creating this project in
    Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Differences between macOS and Windows setups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is very little difference in the basic setup between macOS and Windows
    prior to building for their respective platforms. I have set up the projects in
    the exact same manner so as to make the flow easier to follow. If you own both
    a macOS and a Windows computer, then when you go to the macOS portion, you can
    skip to the building section. If you only own Windows, then you can just follow
    the instructions there. Conversely, if you only own a macOS device, then you will
    have the full set of instructions there and you can skip the *Windows project
    setup* section.
  prefs: []
  type: TYPE_NORMAL
- en: Windows project setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you remember, in [Chapter 1](25dd1c0c-e666-497b-a30e-c680e780d243.xhtml),
    *What AR is and How to Get Set up*, we created our Vuforia Developer Account.
    We will need it, as we will be using Vuforia to create this project. Navigate
    to the Vuforia Developer Portal and log into your account. Now follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Vuforia Developer Portal, click on Develop, and make sure the submenu
    has License Manager selected. We need to create a new Development License Key
    with the app name of `Chapter5` or `Picture Puzzle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c74c4481-28bc-4bf1-9793-d65ec230d1e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the new key has been created you should see the License Manager show
    the `VuforiaIntro` and the `Chapter5` keys we have created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b1f8190-22f0-48b1-bd80-b3ef1c6e354c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on `Chapter5` to gain access to your license key. You should copy and
    paste this into Notepad or Notepad++ for later use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/815ebbdd-4097-422b-a52a-669c1713c5bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Target Manager, as we are going to create our own image target for
    this project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4fc0ae4-05fe-4450-b5da-ec8802cc5444.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Add Database to create the brand-new database that we will be utilizing
    in our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67ba6f93-6a6e-4c0b-9c8d-7ab0a7dedb77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can name the database whatever you want; in my case, I will call it `Words_Pictures`,
    with the Type being Device, and click Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61463265-b0f0-44b1-8ba7-21d42cf2e96f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It should take us back to the Target Manager page and showcase our new `Words_Pictures`
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0b7c3d4-7264-40c8-a9d9-07495a8ad41d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on `Words_Pictures` to gain access to the database, and then click on
    Add Target when you see it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e04376b-c1e3-44ea-80b6-ae913ea325eb.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now be able to add a brand-new target to the database. In this case,
    we want a single image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I strongly advise you to create and use a JPG format, as a PNG format requires
    an 8-bit greyscale image or a 24-bit RGB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The width should be set to the same width as your image. The name should reflect
    what the image is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b843fb05-8cff-4db9-baf9-fdcd4df203a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open up Microsoft Paint, and we can begin to create the file that we will use
    for the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fce1968c-2568-47b0-83c9-f46558772c75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to find the exact size we want to use for this image, and
    I find the best way to do that is to know what the image is we are going to use.
    In our case, it will be a 72 in font size,  have a font name of Bastion, and display
    the word `TREE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c5cb071-b0e4-4139-a1c6-5823d400becb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Resize the proportions to be close around the edges of the word:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/689332e2-d1d4-4acc-a20c-9f02a82fa676.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the file as a JPG and call it `Tree`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08ecc3ad-3071-42c0-a36d-c1adbdc2f596.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the bottom of the Paint menu, it will tell you the dimensions
    of the file we just created. In this case it is `253`x`106`, which is the size
    we want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate back to the Add Target web page and choose the `Tree` file we just
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d5e99ec-d1f0-4935-9eb0-90ef583eb2fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the width to be `253` and the name to `Tree`, and then click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d5e99ec-d1f0-4935-9eb0-90ef583eb2fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will take you back to the database, and you should see the `TreeWord` with
    `Tree` as the name. The type should be Single Image, and there should be a three-star
    rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0490fd03-a50f-4075-98c3-8d4285073169.png)'
  prefs: []
  type: TYPE_IMG
- en: The rating system is designed to tell you whether it is of the proper size to
    be read correctly by your AR device. We currently have a three-star rating, which
    means that it should be good, but it could be much better. What can we do to fix
    this? We can enlarge the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s delete the image from the database. To do this, click on the little checkbox
    next to `Tree`, and above it will appear a very small Delete button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c562614-37d6-49e9-9634-af6ed636c38f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s go back to Paint and resize the image. `680` by `480` should be perfect,
    although `500`x`300` will work as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78cc4d08-2bf3-4af9-ac62-dd0af6d2a1d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upload the new target, and the results should have a five-star rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55d0bb90-b1fa-4efd-aac4-4fb471cf715a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Download Database (All):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c993ddd6-88f4-4a39-b363-f78d8a391795.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a new window that will ask us which development platform we
    want to utilize this with. We want Unity Editor. Click Download:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71373071-bc66-4a4f-a61b-c3eff0e6ebf1.png)'
  prefs: []
  type: TYPE_IMG
- en: It will download a Unity file that we will need to import into our Unity Project—which,
    now, we can begin to work with in Unity, without having to leave the editor to
    do any other work. Open Unity, and let’s begin building our project.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Windows project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new Unity Project, if you haven’t already, and call it `Chapter5`
    to begin with. Then load the project.Now follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Words_Pictures` file that we downloaded now needs to be located and imported
    into the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a77e1d9-5dbd-4cc1-8d4b-b0592aa0c3b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we dive in and create the project, let’s have a look at the folders that
    were created upon import.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our main `Assets` folder will now have an `Editor` folder, a `StreamingAssets` folder
    and a `Scenes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b031415-43c9-49c7-a931-47284def4280.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Editor` folder, it will have another folder called `Vuforia`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4820476-6775-4b9a-af72-21385e2130db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Vuforia` folder will be another folder called `ImageTargetTextures`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dbfa803e-f638-480f-955b-5dbc2f523e02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `ImageTargetTextures` folder, there will be a folder called `Word_Pictures`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8e9aa66-20fc-47a2-905a-9fd873e19dbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Word_Pictures` folder will contain our tree image sprite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/948eae16-3df0-4409-9e08-cf9362087adb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to the main `Assets` folder, and let’s take a look, starting with `StreamingAssets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdbdc6d4-7a32-4a79-a8dd-547e6d502f6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `StreamingAssets` folder will be a `Vuforia` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b3d7488-0b1d-42dc-a315-9f8bfc3b2305.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Vuforia` folder will be two files: `Words_Pictures.xml` and `Words_Pictures.dat`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6be7b771-8680-4aa4-90d0-da609216b419.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s take a look at the XML file in depth to see what exactly is in it. Take
    a look at this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The XML file has the default schema for it set up, with the main tag being `QCarconfig`.
  prefs: []
  type: TYPE_NORMAL
- en: The next tag, which houses our image, is `ImageTarget`. It has the name, which
    we set to `Tree` and the size written in floating-point values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The XML file is very short and to the point. This file is specifically for
    housing the data that Vuforia needs to know, the size of the images we are using,
    and to be able to reference the proper file if we were to have multiple images.
    Continue to follow the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the TurboSquid website and download the free `Tree` model that we will
    be using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/983301e8-c4eb-4cf7-b74c-aaee822b30c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need the `Tree_FBX` and the `Tree_textures` files for this next portion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfc2aa59-317d-4179-8d26-2c32a5561d90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate back to the main `Assets` folder and create a new folder called `Models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33deaca5-b967-482a-9a55-9ba7a07ba239.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extract both the tree model and the textures. Copy and paste the model and
    textures into the `Models` folder inside Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9efec29f-32b6-4a7d-8da1-93ecfde74565.png)'
  prefs: []
  type: TYPE_IMG
- en: Delete the standard camera from the hierarchy pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click in the hierarchy pane and navigate to Vuforia; click to add an
    AR Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60a9508d-bd98-47c7-a8f4-a29e2cc8db5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the `AR Camera` in the hierarchy pane. Look over to the Inspector
    pane and click on Open Vuforia Configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5cc8ab46-04fc-40a8-8e62-77c8258c6e19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Unity should ask for you to import and download more items for Vuforia and
    accept the Vuforia license:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a45a9911-35aa-4042-875e-a07615db248c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy and paste your app license key into the App License Key section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbf29b64-9b9e-49fe-b0d2-2f742ddd3176.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the hierarchy pane and create an empty game object called `ImageTarget`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the `ImageTarget` object and highlight Vuforia and click on
    Image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/83bf9bb7-de32-46e2-9030-28c8e303a750.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Image object and look at the Inspector pane. Image Target Behavior
    should have the type be Predefined; the Database should be Words_Pictures, and
    the Image Target should be Tree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/520ad372-4451-465d-a950-26fcb33ab741.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we need to add our model. I am assuming you know how to set up materials
    for the model, so I will not go over it here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag and drop the model on to the scene. Set the *x*, *y*, and *z* positions
    to be `0`,`0`,`0`, with the scale being `0.09` for the *x*, *y*, and *z* coordinates.
    The last thing to do is make it a child of the image inside the ImageTarget object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/778f75ac-f3ae-4d6b-9ca0-a72c87096bb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Print out the `Tree` text and cut the paper into four strips.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the project for a PC, Mac & Linux Standalone or Android by clicking on
    File | Build Settings, and click on Build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2bdeef2-3c1e-465c-81ce-4920996b3223.png)'
  prefs: []
  type: TYPE_IMG
- en: Now with your Android device or PC camera being utilized, put the strips together
    in the proper order, and the `Tree` model will appear over the top of the paper.
  prefs: []
  type: TYPE_NORMAL
- en: macOS project setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for setting up the project in Mac are nearly identical, with the
    difference mainly being the software we will use to create the text file, but,
    nonetheless, this should be gone over, as I expect Mac users will not want to
    read the Windows section of this chapter. We will need it, as we will be using
    Vuforia to create this project. Navigate to the Vuforia Developer Portal and log
    into your account. Now follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Vuforia Developer Portal, click on Develop, and make sure the submenu
    has License Manager selected. We need to create a new Development License Key
    with the app name of `Chapter5`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/235bf106-3383-45c9-a33e-f539e7f32fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the new key has been created, you should see the License Manager show
    the `VuforiaIntro` and the `Chapter5` keys we have created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f87c2016-4e45-4131-a412-df718aba3174.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on `Chapter5` to gain access to your license key. You should copy and
    paste this into Notepad or Notepad++ for later use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/002e56b9-d1d0-4e51-9f47-960b5d36248d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Target Manager, as we are going to create our own image target for
    this project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edf79e22-64df-486d-a61a-77dbf637921f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Add Database to create the brand-new database that we will be utilizing
    in our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f97ea57-5eb6-4e6a-8b10-460168c5acd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can name the database whatever you want; in my case, I will call it `Words_Pictures`,
    with the Type being Device, and click Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37d1beff-c9a0-49ba-8cb5-e42186a4c60f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It should take us back to the Target Manager page and showcase our new `Words_Pictures`
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06f98cd7-9b23-420e-ac19-0dcf95aceac6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on `Words_Pictures` to gain access to the database, and then click on
    Add Target when you see it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/982b606f-cf1f-45c9-bce9-0902a82c78b0.png)'
  prefs: []
  type: TYPE_IMG
- en: We will now be able to add a brand-new target to the database. In this case,
    we want a single image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I strongly advise you to create and use a JPG format, as a PNG format requires
    an 8-bit greyscale image or a 24-bit RGB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The width should be set to the same width as your image. The name should reflect
    what the image is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5078ac27-1d7f-4036-b052-cd867fc4c16f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Microsoft Paint, and we can begin to create the file that we will use
    for the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17417755-b3cc-4573-98a6-a8a72a36b625.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to find the exact size we want to use for this image, and
    I find the best way to do that is to know what the image is we are going to use.
    In our case, it will be 72 in font size, have the font name of Bastion, and display
    the word `Tree`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f2e4012-f3dd-447b-aaff-11cd45f6d3ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Resize the proportions to be close around the edges of the word:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a8ac2df-d3a7-4e80-9e86-b93d29cae620.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the file as a JPG and call it `Tree`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88f031d3-ca21-4352-b838-00481bbeb993.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the bottom of the Paint menu, it will tell you the dimensions
    of the file we just created. In this case it is `253`x`106`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate back to the Add Target web page and choose the `Tree` file we just
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/863d7564-14f1-4ca9-bc5a-a48b09af9fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the width to be `253` and the name to be Tree, and then click on Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/863d7564-14f1-4ca9-bc5a-a48b09af9fc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will take you back to the database, and you should see the word `Tree`*,* with
    the Name as `Tree`, Type as Single Image, and there should be a three-star rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/afa42e6b-e4f5-4a7a-9684-d7baf3f07f83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The rating system is designed to tell you whether it is of the proper size
    to be read correctly by your AR device. We currently have a three-star rating,
    which means that it should be good, but it could be much better. What can we do
    to fix this? We can enlarge the image. Let''s continue following the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s delete the image from the database. To do this, click on the little checkbox
    next to `Tree`, and above it will appear a very small Delete button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3c66c4e-b994-4987-ad15-324e9c30589e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s go back to Paint and resize the image. `680` by `480` should be perfect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f5ee378-2d1c-447c-85a6-86a680a5ad37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upload the new target, and the results should have a five-star rating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86f71c1c-077e-4ec0-828e-0dbaff79ff37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Download Database (All):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44b7ce8c-aeb0-4627-af34-2f2f5df66648.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open a new window that will ask which development platform we want
    to utilize this with. We want Unity Editor. Click Download:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b77e799-7098-4cfd-aa05-54d3bb315f51.png)'
  prefs: []
  type: TYPE_IMG
- en: It will download a Unity file that we will need to import into our Unity Project—which,
    now, we can begin to work in Unity, without having to leave the editor to do any
    other work. Open Unity, and let’s begin building our project.
  prefs: []
  type: TYPE_NORMAL
- en: Building the macOS Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new Unity Project, if you haven’t already, and call it `Chapter5`
    to begin with. Then, load the project. Now follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Words_Pictures` file that we downloaded now needs to be located and imported
    into the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we dive in and create the project, let’s have a look at the folders
    that were created upon import. Our main `Assets` folder will now have an `Editor`
    folder, a `StreamingAssets` Folder, and a `Scenes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14a9fad5-ec6e-439b-b67e-03ff8b6b7254.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Editor` folder, it will have another folder called `Vuforia`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98f6ad30-657b-4e4d-ac04-a514ac8c2ed5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Vuforia` folder will be another folder called `ImageTargetTextures`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36c9a025-5d0b-4e88-834d-dc5f4d261845.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `ImageTargetTextures` folder, there will be a folder called `Word_Pictures`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01663648-a53c-4aef-8b4d-91359cc5fc1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Word_Pictures` folder, we will have our tree image sprite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/799822db-4d21-40c8-a127-0f53831fd17c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back to the main `Assets` folder and let’s take a look, starting with `StreamingAssets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ae43cc6-2af5-47e3-a66a-f554864e99e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `StreamingAssets` folder will be a `Vuforia` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3aa4f151-ae0d-40a4-a62f-32af2f44be7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Vuforia` folder will be two files: `Words_Pictures.xml` and `Words_Pictures.dat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5cc6ca96-1007-4946-8ee5-fdf21759a592.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s take a look at the XML file in depth to see what exactly is in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The XML file has the default schema for it set up, with the main tag being `QCarconfig`.
  prefs: []
  type: TYPE_NORMAL
- en: The next tag, which houses our image, is `ImageTarget`. It has the name, which
    we set to `Tree`, and the size written in floating-point values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The XML file is very short and to the point. This file is specifically for
    housing the data that Vuforia needs to know, the size of the images we are using,
    and to be able to reference the proper file if we were to have multiple images.
    Let''s continue with the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the TurboSquid website and download the free `Tree` model that we will
    be using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6166745b-3ba2-4286-97a6-c5ba5ee73eae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need the `Tree_FBX` and the `Tree_textures` files for this next section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/263c0be5-77cd-4259-ab41-048f095fba1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate back to the main `Assets` folder and create a new folder called `Models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/344d75c6-c0a6-4ac5-85f7-97d525d2c460.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extract both the tree model and the textures. Copy and paste the model and
    textures into the `Models` folder inside of Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4bc6e6d-a84c-498f-b5cf-90fb71efe1a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Delete the standard camera from the hierarchy pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click in the hierarchy pane and navigate to Vuforia; click to add an
    AR Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/580e8155-af48-492b-9978-0aa6796d7a26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the `AR Camera` in the hierarchy pane. Look over to the Inspector
    pane and click on Open Vuforia Configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/66428e17-697c-4658-bb79-d54d35dd4206.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Unity should ask for you to import and download more items for Vuforia and
    accept the Vuforia license:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/369a9404-00ce-4102-b063-8c1cf65b5a04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy and paste your app license key into the App License Key section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7be65a34-3925-4c80-a000-74f20083da5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the hierarchy pane and create an empty game object called `ImageTarget`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the `ImageTarget` object and highlight Vuforia, and click on
    Image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6e24f45-47fd-4d1e-85a2-29c4c96a10fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the `Image` object and look at the Inspector pane. Image Target Behavior
    should have the Type as Predefined. Database should be Words_Pictures and Image
    Target should be Tree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f2b6110-134b-459a-8820-a2336c9652ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to add our model. I am assuming you know how to set up materials
    for the model, so I will not go over it here. Let''s continue with the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag and drop the model on to the scene. Set the *x*, *y*, and *z* positions
    to be `0`,`0`,`0`, with the scale being `0.09` for the *x*, *y*, and *z* coordinates.
    The last thing to do is make it a child of the image inside the ImageTarget object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18621823-5654-43e7-b537-addba37110f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Print out the `Tree` text and cut the paper into four strips.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the project for iOS by clicking on File | Build Settings. Make sure to
    select the Development Build check mark:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61770937-9ead-471a-8750-72fb5a35a030.png)'
  prefs: []
  type: TYPE_IMG
- en: Working with Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can navigate to the `Build` folder of our application here, and click on
    it to open our XCode project. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left-hand side of the screen, you should see `Unity-iPhone` as one of
    the items you can select. Click on it and you should see Unity-iPhone in the center
    and Identity and Type on the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d8a3149-50b2-4a36-9ee8-5e4b72e994b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check to make sure the Identity is correct. The Display Name for me is `Chapter5`,
    with the Bundle Identifier as `com.rpstudios.Packtbook`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13f0a40d-107f-4a06-aded-a26fc8dbbc81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, on Signing, you need to look and make sure that the Automatically manage
    signing checkbox is checked and that Team has your email address attached to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa853d05-8fe4-4767-8676-b0a3134e9cf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down and look for Linked Frameworks and Libraries. AVFoundation should
    be set from Optional to Required. I’ve noticed that when it is set to Optional,
    the linker fails to work properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe4e8e82-cc4f-4581-8fda-5cf039c3c78a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Locate Architectures, because we need to change from the default to Standard.
    This is due to there being different architectures and iOS doesn’t utilize ARM
    anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c735919c-3270-4d42-a88b-a4643fdb174c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can click on Build and attach your iPhone 6 or above to your macOS computer.
    Build and then run it on the device. It will ask you to trust the app on your
    phone, so follow the instructions to give trust.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the app on your phone and—voila!—it will load, and you can play with
    the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now with your iOS device being utilized, put the strips together in the proper
    order, and the Tree model will appear over the top of the paper.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create an educational game for children so
    they can learn what objects are in relation to the words for them. We learned
    how to develop using Vuforia, for both macOS and Windows for Android and iOS devices.
    We also learned that the basic building blocks for building on Windows and macOS
    devices are fairly similar code-wise, the only major difference being the extra
    steps required to compile to iOS or macOS, using XCode.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a prototype of a fitness application designed
    to allow the user to randomly select the location of where they want to walk,
    for fun.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Vuforia for Unity, you have to go to the Vuforia website to download
    the SDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to install the legacy plugin for the 2017 version of Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'The Unity Hub makes it easy to have multiple versions of Unity installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft Paint can make the PNG and JPG files needed for the Vuforia image
    targets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuforia Image Targets can accept the TIFF file format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuforia’s file size limit for PNG and JPG files is 5 MB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuforia is not available on macOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity Hub is available on macOS and Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'The star rating system in the Vuforia Database is for how good the quality
    of an image is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'You don’t need a Vuforia license key to use it with Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
