- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Seamless Integration: Importing and Integrating Assets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created a prototype of our level. Now, let’s suppose
    that we have coded the game and tested it, confirming the game idea is fun. With
    that, it’s time to replace the prototype art with the real finished art. We are
    going to actually code the game in the next chapter, *Chapter 5*, *Unleashing
    the Power of C# and Visual Scripting*, but for learning purposes, let’s just skip
    that part for now. In order to use the final assets, we need to learn how to get
    them (images, 3D models, and so on), how to import them into Unity, and how to
    integrate them into our scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will examine the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by learning how to get assets in Unity, such as 3D models and textures.
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have different sources of assets we can use in our project. We can simply
    receive a file from our artist, download them from different free and paid asset
    sites or use the **Asset Store**, Unity’s official asset virtual store, where
    we can get free and paid assets ready to use with Unity. We will use a mix of
    downloading assets from the internet and from the Asset Store, just to use all
    possible resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following concepts related to importing
    assets:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing assets from the Asset Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing assets from Unity packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by exploring the first source of assets, the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets from the internet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In terms of getting art assets for our project, let’s start with our terrain
    textures. Remember that we have our terrain painted with a grid pattern, so the
    idea is to replace that with grass, mud, rock, and other kinds of textures. To
    do that, we need images. In this case, these kinds of images are usually top-down
    views of different terrain patterns, and they have the requirement of being “tileable,”
    meaning you can repeat them with no noticeable pattern in their connections. You
    can see an example of this in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A close-up of a green field  Description automatically generated with low
    confidence](img/B21361_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Left – grass patch; Right – the same grass patch separated to highlight
    the texture tiling'
  prefs: []
  type: TYPE_NORMAL
- en: The grass on the left seems to be one single big image, but if you pay attention,
    you should be able to see some patterns repeating themselves. In this case, this
    grass is just a single image repeated four times in a grid, like the one on the
    right. This way, you can cover large areas by repeating a single small image,
    saving lots of RAM on the user’s computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is to get these kinds of images to paint our terrain. You can get
    them from several places, but the easiest way is to use *Google Images* or any
    image search engine. Always check for copyright permissions before using something
    from these sources. Use the keywords “PATTERN seamless tileable texture” when
    searching for the texture, replacing “PATTERN” with the kind of terrain you are
    looking for, such as “grass seamless tileable texture” or “mud seamless tileable
    texture.” In this case, I typed “grass seamless tileable texture.” Once you have
    downloaded the image, you can add it to your project in several ways. The simplest
    one would be doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate your image using File Explorer (Finder on Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate or create the `Textures` folder in the **Project** window in Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put File Explorer and the Unity Project window next to each other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the file from File Explorer to the `Textures` folder in the Unity Project
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_04_02_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Texture being dragged from Windows File Explorer to Unity’s Project
    view'
  prefs: []
  type: TYPE_NORMAL
- en: For simple textures like the ones in the previous figure, any search engine
    can be helpful, but if you want to replace the player’s base geometry with detailed
    walls and doors or place enemies in your scene, you need to get 3D models. If
    you search for those in any search engine using keywords such as “free zombie
    3D model,” you will find endless free and paid 3D model sites such as TurboSquid
    and Mixamo, but those sites can be problematic because those meshes are usually
    not prepared for being used in Unity, or even games. You will find models with
    very high polygon counts, incorrect sizes or orientations, unoptimized textures,
    and so on. To prevent those problems, we’ll want to use a better source, and in
    this case, we will use Unity’s Asset Store, so let’s explore it.
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets from the Asset Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Asset Store is Unity’s official asset marketplace where you can find lots
    of models, textures, sounds, and even entire Unity plugins to extend the capabilities
    of the engine. In this case, we will limit ourselves to downloading 3D models
    to replace the player’s base prototype. You will want to get 3D models with a
    modular design, meaning that you will get several pieces, such as walls, floors,
    corners, and so on. You can connect them to create any kind of scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do that, you must follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Window | Asset Store** in Unity, which will open your web browser
    on the site [https://assetstore.unity.com](https://assetstore.unity.com). In previous
    versions of Unity, you could see the Asset Store directly inside the editor, but
    now, it is mandatory to open it in a regular web browser, so just click the **Search
    Online** button, which will open the site [https://assetstore.unity.com/](https://assetstore.unity.com/)
    in your preferred browser. Also, you can check **Always open in browser from menu**
    to directly open the page whenever you click on **Window | Asset Store**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing text, screenshot, font  Description automatically generated](img/B21361_04_03_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Asset Store moved message'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the top menu, click on the **3D** category to browse 3D assets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing text, screenshot, font  Description automatically generated](img/B21361_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: 3D assets menu'
  prefs: []
  type: TYPE_NORMAL
- en: On the recently opened page, click the arrow to the right of the **3D** category
    in the **All Categories** panel on the right, and then open **Environments** and
    check the **Sci-Fi** box, as we will make a future-themed game:![A picture containing
    text, screenshot, font, number  Description automatically generated](img/B21361_04_05_PRE_BOOK.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.5: 3D assets menu'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, there are several categories for finding different types of
    assets, and you can pick another one if you want to. In **Environments**, you
    will find 3D models that can be used to generate the scenery for your game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you need to, you can pay for an asset, but let’s hide the paid ones for
    now. You can do that by checking the **Free Assets** checkbox from the **Pricing**
    dropdown on the right side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21361_04_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: Free Assets option'
  prefs: []
  type: TYPE_NORMAL
- en: In the search area, find any asset that seems to have the aesthetic you are
    looking for and click it. Remember to look out for outdoor assets, because most
    environment packs are usually interiors only. In my case, I have picked one called
    **Sci-Fi Styled Modular Pack**, which serves both interiors and exteriors. Take
    into account that that package might not exist by the time you are reading this,
    so you might need to choose another one. If you don’t find a suitable package,
    you can download and pick the asset files we used in the GitHub repository at
    [https://github.com/PacktPublishing/Hands-On-Unity-2023-Game-Development-Fourth-Edition](https://github.com/PacktPublishing/Hands-On-Unity-2023-Game-Development-Fourth-Edition).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a video game  Description automatically generated](img/B21361_04_07_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: Preview of Asset Store searched packages'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will see the package details in the **Asset Store** window. Here,
    you can find information regarding the package’s description, videos/images, the
    package’s contents, and the most important part – the reviews, where you can see
    whether the package is worth getting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a video game  Description automatically generated with medium
    confidence](img/B21361_04_08_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: Asset Store package details'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are OK with this package, click the **Add To My Assets** button, log
    in to Unity if requested, and then click the **Open In Unity** button. You might
    be prompted to accept the browser to open Unity; if so, just accept:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a phone  Description automatically generated with low confidence](img/B21361_04_09_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.9: Switching apps'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open the **Package Manager** again, but this time in the **My Assets**
    mode, you should see a list of all assets you have ever downloaded from the Asset
    Store, and the one you just selected in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21361_04_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: Package Manager showing assets'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Download** in the bottom-right part of the window and wait for it
    to finish. Then hit **Import**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a while, the Package Contents window will show up, allowing you to select
    exactly which assets of the package you want in your project. For now, leave it
    as is and click **Import**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_04_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.11: Assets to import selection'
  prefs: []
  type: TYPE_NORMAL
- en: After some importing time, you will see all the package files in your **Project**
    window.
  prefs: []
  type: TYPE_NORMAL
- en: Having something like the Asset Store is really a great help. When I worked
    on other engines or lesser-known game development frameworks, getting content
    for the game was a challenge. There are tons of pages to get 3D models and textures,
    but they were not always optimized for video games, or even compatible with Unity.
    Of course, it is still a great skill to know what to do if the Asset Store doesn’t
    have what you need, so I recommend you also explore other possible sources of
    assets and see the kind of challenges you will face working with those.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take into account that importing lots of full packages will increase your project’s
    size considerably, and that, later, you will probably want to remove the assets
    that you didn’t use. Also, if you import assets that generate errors that prevent
    you from playing the scene, just delete all the `.cs` files that come with the
    package. They are usually in folders called `Scripts`. Those are code files that
    might not be compatible with your Unity version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21361_04_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.12: Code error warning when hitting play'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you continue with this chapter, try to download a character 3D model
    using the Asset Store, following the previous steps. In order to do this, you
    must complete the same steps as we did with the level environment pack but look
    in the **3D | Characters | Humanoid** category of the Asset Store. In my case,
    I picked the **Robot Hero: PBR HP Polyart** package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a video game  Description automatically generated](img/B21361_04_13_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.13: Character package used in our game'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s explore yet another source of Unity Assets: **Unity packages**.'
  prefs: []
  type: TYPE_NORMAL
- en: Importing assets from Unity packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Asset Store is not the only source of asset packages; you can get `.unitypackage`
    files from the internet, or maybe from a coworker who wants to share assets with
    you.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to create your own asset packages to share your assets with other
    developers, check the documentation at [https://docs.unity3d.com/Manual/AssetPackagesCreate.html](https://docs.unity3d.com/Manual/AssetPackagesCreate.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to import a `.unitypackage` file, you need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Assets | Import Package | Custom Package...** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21361_04_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.14: Importing custom packages'
  prefs: []
  type: TYPE_NORMAL
- en: Search for the `.unitypackage` file in the displayed dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Import** option in the **Import** **Unity Package** window that
    appears – the one we saw earlier, in the *Importing assets from the Asset Store*
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have imported lots of art assets, let’s learn how to use them in
    our scene.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just imported lots of files that can be used in several ways, so the
    idea of this section is to see how Unity integrates those assets with the GameObjects
    and components that need them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following concepts related to importing
    assets:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating terrain textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating meshes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating materials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by using tileable textures to cover the terrain.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating terrain textures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to apply textures to our terrain, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Terrain** object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector**, click the brush icon of the **Terrain** component (second
    button).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the drop-down menu, select **Paint Texture**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screen shot of a computer  Description automatically generated with low
    confidence](img/B21361_04_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.15: Terrain Paint Texture option'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Edit Terrain Layers…** | **Create Layer** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and double-click the terrain texture you downloaded previously in the Texture
    Picker window that appears:![A screenshot of a computer  Description automatically
    generated with medium confidence](img/B21361_04_16_PRE_BOOK.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.16: Texture picker window'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will see how the texture will be immediately applied to the whole terrain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat *steps 4* and *5* to add other textures. This time, you will see that
    that texture is not immediately applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Terrain Layers** section, select the new texture you have created to
    start painting with that. I used a mud texture in my case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just like when you edited the terrain, in the **Brushes** section, you can select
    and configure a brush to paint the terrain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Scene** view, paint the areas you want to have that texture applied
    to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your texture patterns are too obvious, open the **New Layer N** section at
    the top of the **Brushes** section, where *N* is a number that depends on the
    layer you have created. Each time you add a texture to the terrain, you will see
    that a new asset called **New Layer N** is created in the **Project** view. It
    holds data on the terrain layer you have created, and you can use it on other
    terrains if you need to. You can also rename that asset to give it a meaningful
    name or reorganize those assets in their own folder for organization purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the section using the triangle to its left and increase the **Size** property
    in the **Tiling Settings** section until you find a suitable size where the pattern
    is not that obvious:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21361_04_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.17: Painting texture options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat *steps* *4* to *11* until you have applied all the textures you wanted
    to add to your terrain. In my case, I’ve applied the mud texture to the river
    basin and used a rock texture for the hills. For the texture of the rocks, I reduced
    the opacity property of the brush to blend it better with the grass in the mountains.
    You can try to add a layer of snow at the top just for fun:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing grass, sky, landscape, outdoor  Description automatically
    generated](img/B21361_04_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.18: Results of painting our terrain with three different textures'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we can improve this significantly using several of the advanced tools
    of the system, but let’s just keep things simple for now. Next, let’s see how
    we can integrate the 3D models into our game.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating meshes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you select one of the 3D assets we downloaded previously and click the arrow
    to its right, one or more sub-assets will appear in the **Project** window. This
    means that the 3D model files we downloaded from the Asset Store (the FBX files)
    are containers of assets that define the 3D model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a video game  Description automatically generated](img/B21361_04_19_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.19: Mesh picker'
  prefs: []
  type: TYPE_NORMAL
- en: Some of those sub-assets are meshes, which are a collection of triangles that
    define the geometry of your model. You can find at least one of these mesh sub-assets
    inside the file, but you can also find several, and that can happen if your model
    is composed of lots of pieces. For example, a car can be a single rigid mesh,
    but that won’t allow you to rotate its wheels or open its doors; it will be just
    a static car, and that can be enough if the car is only a prop in the scene, but
    if the player will be able to control it, you will probably need to modify it.
    The idea is that all pieces of your car are different GameObjects parented to
    one another in such a way that if you move one, all of them will move, but you
    can still rotate its pieces independently.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you drag the 3D model file to the scene (not the sub-asset), Unity will
    automatically create all the objects for each piece and its proper parenting based
    on how the artist created those. You can select the object in the Hierarchy and
    explore all its children to see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21361_04_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.20: Sub-object selection'
  prefs: []
  type: TYPE_NORMAL
- en: Also, you will find that each of those objects may have its own `Mesh Filter`
    and `Mesh Renderer` components, each one rendering just that piece of the model.
    Remember that the `Mesh Filter` is a component that has a reference to the mesh
    asset to render, so the `Mesh Filter` is the one using those mesh sub-assets we
    talked about previously. In the case of animated characters, you will find the
    `Skinned Mesh Renderer` component instead, but we will discuss that component
    later, in *Section 3**, Elevating Visuals, Effects, and Audio*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you drag the 3D model file into the scene, you will get a similar
    result as if the model were a Prefab and you were instancing it, but 3D model
    files are more limited than Prefabs because you can’t apply changes to the model.
    If you’ve dragged the object onto the scene and edited it to have the behavior
    you want, I suggest that you create a Prefab to get all the benefits we discussed
    in *Chapter 2*, *Crafting Scenes and Game Elements*, such as applying changes
    to all the instances of the Prefab and so on. Never create lots of instances of
    a model from its model file—always create them from the Prefab you created based
    on that file to allow you to add extra behavior to it.
  prefs: []
  type: TYPE_NORMAL
- en: That’s the basic usage of 3D meshes. Now, let’s explore the texture integration
    process, which will give our 3D models more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating textures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maybe your model already has the texture applied but has a magenta color applied
    to all of it. If this is the case, that means the asset wasn’t prepared to work
    with the **Universal Render Pipeline** (**URP**) template you selected when creating
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some assets in the Asset Store are created by third-party editors and could
    be meant to be used in older versions of Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A pink ladder on a white surface  Description automatically generated with
    medium confidence](img/B21361_04_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.21: Mesh being rendered with erroneous material or no material at
    all'
  prefs: []
  type: TYPE_NORMAL
- en: 'One option to fix magenta assets is using the **Render Pipeline Converter**,
    a tool that will find them and reconfigure them (if possible) to work with URP.
    To do so, perform the following steps every time you import an asset that looks
    magenta:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Window | Rendering | Render Pipeline Converter**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Built-in to URP** option from the dropdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a phone  Description automatically generated with low confidence](img/B21361_04_22_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.22: Upgrading older assets to URP'
  prefs: []
  type: TYPE_NORMAL
- en: Scroll until you see the **Material Upgrade** checkbox and check it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Initialize Converters** button in the bottom-left corner. This
    will display a list of all the materials that need to be upgraded. We will discuss
    materials more later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B21361_04_23_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.23: Fixing material to work with URP'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Convert Assets** button and see if the model was fixed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to close the window for it to detect new magenta assets that weren’t
    there before opening it. The con of this method is that, sometimes, it won’t upgrade
    the material properly. Luckily, we can fix this by reapplying the textures of
    the objects manually. Even if your assets work just fine, I suggest that you reapply
    your textures anyway, just to learn more about the concept of materials.
  prefs: []
  type: TYPE_NORMAL
- en: A texture is not applied directly to the object. That’s because the texture
    is just one single configuration of all the ones that control the aspect of your
    model. In order to change the appearance of a model, you must create a **material**.
    A material is a separate asset that contains lots of settings about how Unity
    should render your object. You can apply that asset to several objects that share
    the same graphics settings, and if you change the settings of the material, it
    will affect all the objects that are using it. It works like a graphics profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a material to apply the textures of your object, you need
    to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** window, click the plus (**+**) button in the top-left part
    of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Material** option in that menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your material. This is usually the name of the asset we will be applying
    the material to (for example, `Car`, `Ship`, `Character`, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the created material to the model instance on your scene. If you move the
    mouse with the dragged asset over the object, you will be able to see a preview
    of how it will look with that material, which would be white in the case of a
    new material. We will change that in the following steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the material by releasing the mouse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your object has several parts, you will need to drag the material to each
    part. Dragging the material will change the material’s property of the `MeshRenderer`
    component of the object you have dragged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the material and click the circle to the left of the **Base Map** property
    (see *Figure 4.23*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Texture Selector**, click on the texture of your model. It can be
    complicated to locate the texture just by looking at it. Usually, the name of
    the texture will match the model’s name. If not, you will need to try different
    textures until you see one that fits your object. Also, you may find several textures
    with the same name as your model. Just pick the one that seems to have the proper
    colors instead of the ones that look black and white or light blue; we will use
    those later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_04_24_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.24: Base Map property of URP materials'
  prefs: []
  type: TYPE_NORMAL
- en: With this, you have successfully applied the texture to the object through a
    material. For each object that uses the same texture, just drag the same material.
  prefs: []
  type: TYPE_NORMAL
- en: 'Materials have a concept like Prefab Variants, called Material Variants. It
    consists of the same idea of creating a base material and then alternative versions
    of it with small changes. For more information check the following documentation:
    [https://docs.unity3d.com/2022.2/Documentation/Manual/materialvariant-landingpage.html](https://docs.unity3d.com/2022.2/Documentation/Manual/materialvariant-landingpage.html),
    and the following blog post: [https://blog.unity.com/engine-platform/material-variants-the-solution-for-managing-complex-material-libraries](https://blog.unity.com/engine-platform/material-variants-the-solution-for-managing-complex-material-libraries).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of how to apply the model textures, let’s
    learn how to properly configure the import settings before spreading models all
    over the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned earlier, artists are used to creating art assets outside Unity,
    and that can cause differences between how an asset is seen from that tool and
    how Unity will import it. As an example, 3D Studio Max can work in centimeters,
    inches, and so on, while Unity works in meters. We have just downloaded and used
    lots of assets, but we have skipped the configuration step to solve those discrepancies,
    so let’s take a look at this now.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following concepts related to importing
    assets:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring meshes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by discussing how to configure 3D meshes.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring meshes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to change the model’s import settings, you need to locate the model
    file you have downloaded. There are several file extensions that contain 3D models,
    with the most common one being the `.fbx` file, but you can encounter others such
    as `.obj`,`.3ds`, `.blender`, `.mb`, and so on. You can identify whether the file
    is a 3D mesh via its extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_04_25_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.25: Selected asset path extension'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can click the asset and check in the **Inspector** for the tabs you
    can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing text, screenshot, font  Description automatically generated](img/B21361_04_26_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.26: Mesh materials settings'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have located the 3D mesh files, you can configure them properly.
    Right now, the only thing we should take into account is the proper scale of the
    model. Artists are used to working with different software with different setups;
    maybe one artist created the model using meters as its metric unit, while other
    artists used inches, feet, and so on. When importing assets that have been created
    in different units, they will probably be unproportioned, which means we will
    get results such as humans being bigger than buildings and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best solution is to just ask the artist to fix that. If all the assets
    were authored in your company, or if you used an external asset, you could ask
    the artist to fix it to the way your company works, but right now, you are probably
    a single developer learning Unity by yourself. Luckily, Unity has a setting that
    allows you to rescale the original asset before using it in Unity. In order to
    change the **Scale Factor** of an object, you must do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the 3D mesh in your Project window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it to the scene. You will see that an object will appear in your scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a capsule using the **GameObject | 3D Object | Capsule option**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put the capsule next to the model you dragged into the editor. See if the scale
    makes sense. The idea is that the capsule represents a human being (2 meters tall)
    so that you have a reference for the scale:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A cartoon of a robot  Description automatically generated with low confidence](img/B21361_04_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.27: Using a capsule as reference for scale'
  prefs: []
  type: TYPE_NORMAL
- en: If the model is bigger or smaller than expected, select the mesh again in the
    **Project** window (not the GameObject instance you dragged to the editor) and
    you will see some import settings in the **Inspector**. In the image, we can see
    that the model has a good relative size, but just for learning purposes, I recommend
    proceeding with the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the **Scale Factor** property and modify it, increasing it if your
    model is smaller than expected, or reducing it in the opposite case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_04_28_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.28: Model mesh options'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Apply** button at the bottom of the **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 6* and *7* until you get the desired result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are plenty of other options to configure, but let’s stop here for now.
    Next, let’s discuss how to properly configure the textures of our models.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring textures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Again, there are several settings to configure here, but let’s focus on **Texture
    Size** for now. The idea is to use the size that best fits the usage of that texture,
    and that depends on lots of factors.
  prefs: []
  type: TYPE_NORMAL
- en: The first factor to take into account is the distance from the object to the
    camera. If you are creating a first-person game, you will probably encounter many
    objects up close – enough to justify the use of a big texture. However, if you
    have several distant objects, such as billboards at the top of buildings, which
    you will never be near enough to see the details of, you can use smaller textures
    for that.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to take into account is the importance of the object. If you are
    creating a racing game, you will probably have lots of 3D models that will be
    onscreen for a few seconds and the player will never focus on them; they will
    be paying attention to the road and other cars. In this case, an object such as
    a trash can on the street could have little texture and a low-polygon model and
    the user will never notice that (unless they stop to appreciate the scenery),
    but that’s acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can have a game with a top-down view that will never zoom in on
    the scene, so the same object that has a big texture in first-person games will
    have a less detailed texture here. In the following images, you can see that the
    smaller ship could use a smaller texture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing art, cartoon, graphic design  Description automatically
    generated](img/B21361_04_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.29: The same model seen at different distances'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ideal size of the texture is relative. The usual way to determine the right
    size is by changing the dimensions until you find the smallest possible size exhibiting
    decent quality when the object is seen from the nearest possible position in the
    game. This is a trial-and-error method and you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the 3D model and put it into the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the **Scene view** camera in a position that shows the object at its largest
    possible in-game size. As an example, in a **first-person-shooter** (**FPS**)
    game, the camera can be almost right next to the object, while in a top-down game,
    it would be a few meters above the object. Again, that depends on your game. Remember
    our game is a third-person shooter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and select the texture that the object is using in the folders that were
    imported with the package or from the material you created previously. They usually
    have `.png`, `.jpg`, or `.tif` extensions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector, look at the **Max Size** property and reduce it, trying the
    next smaller value. For example, if the texture is **2048**, try **1024**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Apply** and check the **Scene view** to see if the quality has decreased
    dramatically or if the change is unnoticeable. You will be surprised.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *Steps 4* to *5* until you get a bad-quality result. Once you do, just
    increase the previous resolution to get an acceptable quality. Of course, if you
    are targeting PC games, you can expect higher resolutions than mobile games.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have imported, integrated, and configured your objects, let’s create
    our player’s base with those assets.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling the scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start replacing our prototype base using the environment pack we have
    downloaded. To do that, you must do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Environment** pack we imported before, locate the folder that contains
    all the models for the different pieces of the scene and try to find a corner.
    You can use the search bar in the **Project** window to search for the `corner`
    keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21361_04_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.30: Mesh picker'
  prefs: []
  type: TYPE_NORMAL
- en: In my specific case, I have the outer and inner sides of the corner as separate
    models, so I need to put them together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place it in the same position as any corner of your prototype base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21361_04_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.31: Positioning the mesh on a placeholder for replacement'
  prefs: []
  type: TYPE_NORMAL
- en: Find the proper model that will connect with that corner to create walls. Again,
    you can try searching for the `wall` keyword in the **Project** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instance it and position it so that it’s connected to the corner. Don’t worry
    if it doesn’t fit perfectly; you will go over the scene when necessary later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can select an object and press the *V* key to select a vertex of the selected
    object. Then you can drag it, click on the rectangle in the middle of the translate
    gizmo, and direct it to a vertex of another object. This is called **vertex snapping**.
    It allows you to connect two pieces of the scene exactly as intended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![A picture containing screenshot, table, design  Description automatically
    generated](img/B21361_04_32.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.32: Connecting two modules'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat the walls until you reach the other end of the player base and position
    another corner. You might get a wall that’s a little bit larger or smaller than
    the original prototype, but that’s fine:![A picture containing composite material,
    design  Description automatically generated](img/B21361_04_33.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 4.33: Chain of connected modules'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can move an object while pressing the *Ctrl* key (*Command* on Mac) to snap
    the object’s position so that the clones of the wall can be easily located right
    next to the others. Another option is to manually set the **Position** property
    of the **Transform** component in the **Inspector**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Complete the rest of the walls and destroy the prototype cube we made in ProBuilder.
    Remember that this process is slow and you will need to be patient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add floors by looking for floor tiles and repeating them all over the surface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing grate  Description automatically generated](img/B21361_04_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.34: Floor modules with a hole for the pit'
  prefs: []
  type: TYPE_NORMAL
- en: Add whatever details you want to add with other modular pieces in the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put all those pieces in a container object called `Base`. Remember to create
    an empty object and drag the base pieces into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_04_35_PRE_BOOK.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.35: Mesh sub-assets'
  prefs: []
  type: TYPE_NORMAL
- en: With this, we learned how to create a scene easily by using a module approach,
    assembling the different pieces by using Unity’s snapping features. After a lot
    of practice doing this, you will slowly gain experience with the common pitfalls
    and good practices of modular scene design. All the packages have a different
    modular design in mind, so you will need to adapt to them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to import models and textures and integrate
    them into our scene. We discussed how to apply textures to the terrain, how to
    replace our prototype mesh with modular models, how to apply textures to those,
    and how to properly configure the assets, all while taking several criteria into
    account according to the usage of the object.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have finished *Section 1*, *Getting Started with Unity* of this
    book and discussed several basic Unity concepts we will use throughout the book.
    In *Section 2*, *Mastering Programming and Gameplay Mechanics*, we will start
    coding the gameplay of our game, like the player’s movement and the health system.
    We will start learning how to create our own components to add behavior to our
    objects and the basic anatomy of a script.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Read this book alongside other users, Unity game development experts, and the
    author himself. Ask questions, provide solutions to other readers, chat with the
    author via Ask Me Anything sessions, and much more. Scan the QR code or visit
    the link to join the community:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/unitydev](https://packt.link/unitydev)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1498477041053909218.png)'
  prefs: []
  type: TYPE_IMG
