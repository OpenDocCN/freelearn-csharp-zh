- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Web User Interfaces Using ASP.NET Core
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building web user interfaces with ASP.NET Core. You will
    learn about ASP.NET Core MVC views, Razor syntax, HTML and Tag Helpers, internationalizing
    your website, and how to use Bootstrap for quick user interface prototyping.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an ASP.NET Core MVC website
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining web user interfaces with Razor views
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizing and globalizing with ASP.NET Core
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining web user interfaces with Tag Helpers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output caching
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an ASP.NET Core MVC website
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Model-View-Controller** (**MVC**) design pattern allows a clean separation
    between technical concerns, as shown in the following list:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Models**: Classes that represent the data entities and view models used on
    the website.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Views**: Razor files, that is, `.cshtml` files, that render data in view
    models into HTML web pages. Blazor uses the `.razor` file extension, but do not
    confuse them with Razor files!'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controllers**: Classes that execute code when an HTTP request arrives at
    the web server. The controller methods usually create a view model that may contain
    entity models and pass it to a view to generate an HTTP response to send back
    to the web browser or other client.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ASP.NET Core has many Razor file types, which can be confusing because they
    all use the term “Razor”, so I will now remind you of them and highlight the important
    similarities and differences, as shown in *Table 14.1*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '| **Technology** | **Special filename** | **File extension** | **Directive**
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| Razor Component (for Blazor) |  | `.razor` |  |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| Razor Component (for Blazor with page routing) |  | `.razor` | `@page` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| Razor Page |  | `.cshtml` | `@page` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| Razor View (for MVC) |  | `.cshtml` |  |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| Razor Layout | `_{customname}` | `.cshtml` |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| Razor View (partial) | `_{customname}` | `.cshtml` |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| Razor View Start | `_ViewStart` | `.cshtml` |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| Razor View Imports | `_ViewImports` | `.cshtml` |  |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: 'Table 14.1: Important similarities and differences between Razor files'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning!** Be careful to use the correct file extension and directive at
    the top of the file or you will get unexpected behavior.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: A Razor View file is technically identical to a Razor Layout or a Razor View
    (partial). That is why it is so important to follow the convention of prefixing
    a layout or partial view with an underscore.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'What turns a Razor View into a Razor Layout is the name of the Razor file being
    set as the `Layout` property of another Razor file or the default layout in the
    `_ViewStart.cshtml` file, as shown in the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'What turns a Razor View into a Razor View (partial) is the Razor View name
    being used in a `<partial>` component on a page, as shown in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Good Practice**: The naming convention for special and shared Razor files
    like layouts and partial views is to prefix them with an underscore `_`, for example,
    `_ViewStart.cshtml`, `_Layout.cshtml`, or `_Product.cshtml` (this might be a partial
    view for rendering a product).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core MVC website
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will use a project template to create an ASP.NET Core MVC website project
    that has a local database for authenticating and authorizing users.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2022 defaults to using SQL Server LocalDB for the accounts database.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code (or more accurately the `dotnet` CLI tool) uses SQLite by
    default and you can specify a switch to use SQL Server LocalDB instead.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see it in action:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to create an ASP.NET Core MVC website project
    with authentication accounts stored in a database, as defined in the following
    list:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller) [C#]** / `mvc`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Mvc`'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter14`'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication type: **Individual Accounts** / `--auth Individual`'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure for HTTPS: Selected.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable Docker: Cleared.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do not use top-level statements: Cleared.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the `Northwind.Mvc` project.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you created the MVC project using Visual Studio 2022, then the database
    for authentication and authorization will be stored in SQL Server LocalDB. But
    the database does not yet exist. At a command prompt or terminal, in the `Northwind.Mvc`
    folder, enter the command to run database migrations so that the database used
    to store credentials for authentication is created, as shown in the following
    command:'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you created the MVC project using `dotnet new`, then the database for authentication
    and authorization will be stored in SQLite and the file has already been created,
    named `app.db`.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the root folder for the MVC website project, in the `appsettings.json` file,
    note the connection string for the authentication database named `DefaultConnection`,
    as shown in the following configuration:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using SQL Server LocalDB:'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using SQLite:'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Exploring the default ASP.NET Core MVC website
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s review the behavior of the default ASP.NET Core MVC website project template:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, expand the `Properties` folder, open the `launchSettings.json`
    file, and for the `https` profile, for its `applicationUrl` setting, change the
    port numbers to `5141` for `https` and `5142` for `http`, as shown in the following
    setting:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the changes to the `launchSettings.json` file.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your preferred code editor or at the command line, start the `Northwind.Mvc`
    project with the `https` profile and using Chrome as the browser:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then select the `https` profile as the
    **Startup Project**, and **Google Chrome** as the **Web Browser**, then start
    the `Northind.Mvc` website project without debugging.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio Code, then at the command prompt or terminal,
    enter the following command: `dotnet run --launch-profile https`. Start Chrome
    and navigate to: `https://localhost:5141/`.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, if the **Windows Defender Firewall** displays a **Windows Security
    Alert** because it “has blocked some features of this app,” then click **Allow
    access**.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Chrome, open **Developer Tools**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refresh the home page and note the following, as shown in *Figure 14.1*:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The top navigation menu with links to **Home**, **Privacy**, **Register**, and
    **Login**. If the viewport width is 575 pixels or less, then the navigation collapses
    into a hamburger menu.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The title of the website, **Northwind.Mvc**, shown in the header and footer.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_01.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: The ASP.NET Core MVC project template website home page'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Understanding visitor registration
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, passwords must have at least one non-alphanumeric character, at
    least one digit (0-9), and at least one uppercase letter (A-Z). I use `Pa$$w0rd`
    in scenarios like this when I am just exploring.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: The MVC project template follows best practices for **double-opt-in** (**DOI**),
    meaning that after filling in an email address and password to register, an email
    is sent to the email address, and the visitor must click a link in that email
    to confirm that they want to register.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'We have not yet configured an email provider to send that email, so we must
    simulate that step:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Close the **Developer Tools** pane.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top navigation menu, click **Register**.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an email and password, and then click the **Register** button. (I used
    `test@example.com` and `Pa$$w0rd`.)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link with the text **Click here to confirm your account** and note
    that you are redirected to a **Confirm email** web page that you could customize.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top navigation menu, click **Login**, enter your email address and password
    (note that there is an optional checkbox to remember you, and there are links
    if the visitor has forgotten their password or they want to register as a new
    visitor), and then click the **Log in** button.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click your email address in the top navigation menu. This will navigate to an
    account management page. Note that you can set a phone number, change your email
    address, change your password, enable two-factor authentication (if you add an
    authenticator app), and download and delete your personal data. This last feature
    is good for compliance with legal regulations like the European GDPR.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome, and then at the command prompt or terminal for the MVC website,
    press *Ctrl* + *C* to cleanly shut down the web server.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reviewing an MVC website project structure
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your code editor, in Visual Studio 2022 **Solution Explorer** (toggle on
    **Show All Files**) or Visual Studio Code **EXPLORER – SOLUTION EXPLORER**, review
    the structure of an MVC website project, as shown in *Figure 14.2*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19587_14_02.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: VS Code and VS 2022 Solution Explorers for an ASP.NET Core MVC
    project'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look in more detail at some of these parts later, but for now, note
    the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后更详细地查看这些部分，但就目前而言，请注意以下内容：
- en: '`Areas`: This folder contains nested folders and a file needed to integrate
    your website project with ASP.NET Core Identity, which is used for authentication.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Areas`：此文件夹包含用于将您的网站项目与 ASP.NET Core Identity 集成的嵌套文件夹和文件，该 Identity 用于身份验证。'
- en: '`bin`, `obj`: These folders contain temporary files needed during the build
    process and the compiled assemblies for the project. Solution Explorer for Visual
    Studio Code + C# Dev Kit does not show hidden folders like these, but you can
    see them in the folder view (labeled **CHAPTER14** in *Figure 14.2*).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`、`obj`：这些文件夹包含在构建过程中需要的临时文件和项目的编译程序集。Visual Studio Code + C# Dev Kit 的解决方案资源管理器不显示此类隐藏文件夹，但您可以在文件夹视图中看到它们（在
    *图 14.2* 中标记为 **CHAPTER14**）。'
- en: '`Controllers`: This folder contains C# classes that have methods (known as
    actions) that fetch a model and pass it to a view, for example, `HomeController.cs`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controllers`：此文件夹包含具有方法（称为操作）的 C# 类，这些方法获取模型并将其传递到视图中，例如 `HomeController.cs`。'
- en: '`Data`: This folder contains Entity Framework Core migration classes used by
    the ASP.NET Core Identity system to provide data storage for authentication and
    authorization, for example, `ApplicationDbContext.cs`.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data`：此文件夹包含 ASP.NET Core Identity 系统使用的 Entity Framework Core 迁移类，用于提供身份验证和授权的数据存储，例如
    `ApplicationDbContext.cs`。'
- en: '`Models`: This folder contains C# classes that represent all the data gathered
    together by a controller and passed to a view, for example, `ErrorViewModel.cs`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Models`：此文件夹包含代表由控制器收集并传递到视图的所有数据的 C# 类，例如 `ErrorViewModel.cs`。'
- en: '`Properties`: This folder contains a configuration file for Kestrel (or IIS
    or IIS Express on Windows) named `launchSettings.json`, for launching the website
    during development. This file is only used on the local development machine and
    is not deployed to your production website.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties`：此文件夹包含一个用于在开发期间启动网站的 Kestrel（或 Windows 上的 IIS 或 IIS Express）配置文件，名为
    `launchSettings.json`。此文件仅在本地开发机器上使用，不会部署到您的生产网站。'
- en: '`Views`: This folder contains the `.cshtml` Razor files that combine HTML and
    C# code to dynamically generate HTML responses. The `_ViewStart.cshtml` file sets
    the default layout and `_ViewImports.cshtml` imports common namespaces used in
    all views like Tag Helpers:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Views`：此文件夹包含将 HTML 和 C# 代码结合在一起以动态生成 HTML 响应的 `.cshtml` Razor 文件。`_ViewStart.cshtml`
    文件设置默认布局，`_ViewImports.cshtml` 导入所有视图中使用的通用命名空间，如标签助手：'
- en: '`Home`: This subfolder contains Razor files for the home and privacy pages.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Home`：此子文件夹包含用于主页和隐私页面的 Razor 文件。'
- en: '`Shared`: This subfolder contains Razor files for the shared layout, an error
    page, and two partial views for logging- in and validation scripts.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shared`：此子文件夹包含用于共享布局、错误页面和两个用于登录和验证脚本的局部视图的 Razor 文件。'
- en: '`wwwroot`: This folder contains static content used by the website, such as
    CSS for styling, libraries of JavaScript, JavaScript for this website project,
    and a `favicon.ico` file. You also put images and other static file resources
    like PDF documents in here. The project template includes Bootstrap and jQuery
    libraries.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wwwroot`：此文件夹包含网站使用的静态内容，例如用于样式的 CSS、JavaScript 库、此网站项目的 JavaScript 和 `favicon.ico`
    文件。您还可以在此处放置图像和其他静态文件资源，如 PDF 文档。项目模板包括 Bootstrap 和 jQuery 库。'
- en: '`appsettings.json` and `appsettings.Development.json`: These files contain
    settings that your website can load at runtime, for example, the database connection
    string for the ASP.NET Core Identity system and logging levels.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appsettings.json` 和 `appsettings.Development.json`：这些文件包含在运行时网站可以加载的设置，例如，ASP.NET
    Core Identity 系统的数据库连接字符串和日志级别。'
- en: '`Northwind.Mvc.csproj`: This file contains project settings like the use of
    the Web .NET SDK, an entry for SQLite to ensure that the `app.db` file is copied
    to the website’s output folder, and a list of NuGet packages that your project
    requires such as EF Core for your chosen database provider, including:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind.Mvc.csproj`：此文件包含项目设置，例如使用 Web .NET SDK、SQLite 的条目以确保 `app.db` 文件被复制到网站的输出文件夹，以及项目所需的
    NuGet 包列表，例如为所选数据库提供程序提供的 EF Core，包括：'
- en: '`Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore`'
- en: '`Microsoft.AspNetCore.Identity.EntityFrameworkCore`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.Identity.EntityFrameworkCore`'
- en: '`Microsoft.AspNetCore.Identity.UI`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.Identity.UI`'
- en: '`Microsoft.EntityFrameworkCore.Sqlite` or `Microsoft.EntityFrameworkCore.SqlServer`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Sqlite` 或 `Microsoft.EntityFrameworkCore.SqlServer`'
- en: '`Microsoft.EntityFrameworkCore.Tools`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Tools`'
- en: '`Program.cs`: This file defines an auto-generated `Program` class that contains
    the `<Main>$` entry point. It builds a pipeline for processing incoming HTTP requests
    and hosts the website using default options, like configuring the Kestrel web
    server and loading `appsettings`. It adds and configures services that your website
    needs, for example, ASP.NET Core Identity for authentication, SQLite or SQL Server
    for identity data storage, and so on, and routes for your application.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Program.cs`：此文件定义了一个自动生成的`Program`类，其中包含`<Main>$`入口点。它构建了一个处理传入HTTP请求的管道，并使用默认选项（如配置Kestrel
    Web服务器和加载`appsettings`）托管网站。它添加并配置了网站需要的服务，例如，用于身份验证的ASP.NET Core Identity，用于身份数据存储的SQLite或SQL
    Server等，以及为你的应用程序的路由。'
- en: If you choose to use SQLite instead of SQL Server for the ASP.NET Core Identity
    database, then you will also see a file named `app.db`. This is the SQLite database
    that stores registered visitors.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你选择使用SQLite而不是SQL Server作为ASP.NET Core Identity数据库，那么你也会看到一个名为`app.db`的文件。这是存储已注册访客的SQLite数据库。
- en: Referencing an EF Core class library and registering a data context
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用EF Core类库并注册数据上下文
- en: 'We will reference the EF Core model that you created in *Chapter 3*, *Building
    Entity Models for SQL Server Using EF Core*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将参考你在**第3章**中创建的EF Core模型，即**使用EF Core为SQL Server构建实体模型**：
- en: 'In the `Northwind.Mvc.csproj` project file, treat warnings as errors and add
    a project reference to the Northwind database context project, as shown in the
    following markup:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc.csproj`项目文件中，将警告视为错误，并将对Northwind数据库上下文项目的项目引用添加到项目中，如下面的标记所示：
- en: '[PRE6]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `Include` path must not have a line break.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Include`路径不能有换行符。'
- en: 'At the command prompt or terminal, build the `Northwind.Mvc` project, as shown
    in the following command: `dotnet build`.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，构建`Northwind.Mvc`项目，如下面的命令所示：`dotnet build`。
- en: 'In `Program.cs`, import the namespace to use the `AddNorthwindContext` extension
    method, as shown in the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入命名空间以使用`AddNorthwindContext`扩展方法，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the section that adds services to the container, add a statement that registers
    `NorthwindContext` as a service, as shown in the following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加服务到容器的作用域中，添加一个将`NorthwindContext`注册为服务的语句，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Defining web user interfaces with Razor views
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Razor视图定义Web用户界面
- en: Let’s review how we can build the user interface of a web page in a modern ASP.NET
    Core MVC website.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下如何在现代ASP.NET Core MVC网站中构建网页的用户界面。
- en: Understanding Razor views
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Razor视图
- en: In MVC, the V stands for *view*. The responsibility of a view is to transform
    a model into HTML or other formats.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在MVC中，V代表**视图**。视图的职责是将模型转换为HTML或其他格式。
- en: There are multiple **view engines** that could be used to do this. The default
    view engine is called **Razor**, and it uses the `@` symbol to indicate server-side
    code execution.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个**视图引擎**可以用来做这件事。默认视图引擎称为**Razor**，它使用`@`符号来指示服务器端代码执行。
- en: 'Let’s review the home page view and how it uses a shared layout:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾主页视图以及它是如何使用共享布局的：
- en: 'In the `Views/Home` folder, open the `Index.cshtml` file and note the block
    of C# code wrapped in `@{ }`. This will execute first and can be used to store
    data that needs to be passed into a shared layout file, like the title of the
    web page, as shown in the following code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`文件夹中，打开`Index.cshtml`文件，注意被`@{ }`包裹的C#代码块。这将首先执行，可以用来存储需要传递到共享布局文件中的数据，例如网页的标题，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note the static HTML content in the `<div>` element that uses Bootstrap classes
    like `text-center` and `display-4` for styling, as shown in the following markup:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意`<div>`元素中使用的静态HTML内容，它使用了Bootstrap类如`text-center`和`display-4`进行样式化，如下面的标记所示：
- en: '[PRE10]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `Views` folder, open the `_ViewImports.cshtml` file and note that it
    imports the namespace for the project and the namespace for the `Models` folder
    in the project, and then adds the ASP.NET Core Tag Helpers, which we will learn
    more about later in this chapter, as shown in the following code:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views`文件夹中，打开`_ViewImports.cshtml`文件，注意它导入了项目命名空间和项目`Models`文件夹的命名空间，然后添加了ASP.NET
    Core Tag Helpers，我们将在本章后面了解更多关于它们的信息，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `Views` folder, open the `_ViewStart.cshtml` file. It gets executed
    when the `View` method is called in a controller class. It is used to set defaults
    that apply to all views. For example, note that it sets the `Layout` property
    of all views to a shared layout file (without its file extension), as shown in
    the following markup:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Views` 文件夹中，打开 `_ViewStart.cshtml` 文件。它在控制器类中调用 `View` 方法时执行。它用于设置适用于所有视图的默认值。例如，注意它将所有视图的
    `Layout` 属性设置为共享布局文件（不带文件扩展名），如下所示：
- en: '[PRE12]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This file is not executed when a partial view is rendered, for example, when
    you call the `PartialView` method instead of the `View` method.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当渲染部分视图时，例如调用 `PartialView` 方法而不是 `View` 方法时，此文件不会执行。
- en: In the `Shared` folder, open the `_Layout.cshtml` file.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Shared` 文件夹中，打开 `_Layout.cshtml` 文件。
- en: 'Note that `<title>` is being set from the `ViewData` dictionary that was set
    earlier in the `Index.cshtml` view, as shown in the following markup:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意 `<title>` 是从之前在 `Index.cshtml` 视图中设置的 `ViewData` 字典中设置的，如下所示：
- en: '[PRE13]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The title is shown in the browser tab for the current page or the browser window.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标题显示在当前页面的浏览器标签或浏览器窗口中。
- en: 'Note the rendering of links to support Bootstrap and a site stylesheet, where
    `~` means the `wwwroot` folder in the project, as shown in the following markup:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意支持 Bootstrap 和网站样式的链接渲染，其中 `~` 表示项目中的 `wwwroot` 文件夹，如下所示：
- en: '[PRE14]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note the rendering of a navigation bar in the header, as shown in the following
    markup:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意在页眉中渲染导航栏，如下所示：
- en: '[PRE15]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note the rendering of a collapsible `<div>` containing a partial view named
    `_LoginPartial` for logging in, and hyperlinks to allow users to navigate between
    pages using ASP.NET Core Tag Helpers with attributes like `asp-controller` and
    `asp-action`, as shown in the following markup:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意渲染一个包含名为 `_LoginPartial` 的部分视图的可折叠 `<div>`，用于登录，以及允许用户使用具有 `asp-controller`
    和 `asp-action` 等属性的 ASP.NET Core 标签助手在页面之间导航的超链接，如下所示：
- en: '[PRE16]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `<a>` elements use Tag Helper attributes named `asp-controller` and `asp-action`
    to specify the controller name and action name that will execute when the link
    is clicked on. The `asp-area` attribute can be used to organize and group pages
    within large, complex MVC websites. If you want to navigate to a feature in a
    Razor Class Library, then you can also use `asp-area` to specify the feature name.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<a>` 元素使用名为 `asp-controller` 和 `asp-action` 的标签助手属性来指定当点击链接时将执行的控制器名称和操作名称。可以使用
    `asp-area` 属性对大型、复杂的 MVC 网站中的页面进行组织和分组。如果您想导航到 Razor 类库中的功能，则也可以使用 `asp-area`
    来指定功能名称。'
- en: 'Note the rendering of the body inside the `<main>` element, as shown in the
    following markup:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意在 `<main>` 元素内渲染的主体，如下所示：
- en: '[PRE17]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `RenderBody` method injects the contents of a specific Razor view for a
    page like the `Index.cshtml` file at that point in the shared layout.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RenderBody` 方法在该点注入特定 Razor 视图的内容，例如 `Index.cshtml` 文件在共享布局中的内容。'
- en: 'Note the rendering of `<script>` elements at the bottom of the page so that
    it does not slow down the display of the page, and that you can add your own script
    blocks into an optional defined section named `Scripts`, as shown in the following
    markup:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意在页面底部渲染 `<script>` 元素，以避免减慢页面显示速度，并且可以将自己的脚本块添加到名为 `Scripts` 的可选定义部分中，如下所示：
- en: '[PRE18]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the `Shared` folder, open the `_LoginPartial.cshtml` file, and note the `if`
    statement, which if the visitor is logged in renders links to their account and
    to log out, or if they are not logged in, renders links to register or log in.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Shared` 文件夹中，打开 `_LoginPartial.cshtml` 文件，并注意 `if` 语句，如果访问者已登录，则渲染指向其账户和注销的链接，或者如果他们未登录，则渲染指向注册或登录的链接。
- en: 'In the `Shared` folder, open the `_ValidationScriptsPartial.cshtml` file, and
    note it contains two script blocks for adding validation to the client-side browser
    using JavaScript, as shown in the following markup:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Shared` 文件夹中，打开 `_ValidationScriptsPartial.cshtml` 文件，并注意它包含两个脚本块，用于通过 JavaScript
    在客户端浏览器中添加验证，如下所示：
- en: '[PRE19]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Good Practice**: You need to add this partial view to the `Scripts` section
    if you want to enable validation in a Razor View like `Index.cshtml`, as shown
    in the following markup:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：如果您想在像 `Index.cshtml` 这样的 Razor 视图中启用验证，则需要将此部分视图添加到 `Scripts` 部分中，如下所示：'
- en: '[PRE20]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `Shared` folder, open the `Error.cshtml` file, and note it contains markup
    to render an exception.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Shared` 文件夹中，打开 `Error.cshtml` 文件，并注意它包含用于渲染异常的标记。
- en: Prototyping with Bootstrap
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 进行原型设计
- en: Bootstrap is the world’s most popular framework for building responsive, mobile-first
    websites. It combines CSS stylesheets with JavaScript libraries to implement its
    functionality.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap是构建响应式、移动优先网站的世界最流行框架。它结合CSS样式表和JavaScript库来实现其功能。
- en: It is a good choice for prototyping a website user interface, although before
    going public you might want to hire a web designer to build a custom Bootstrap
    theme or replace it with a completely custom set of CSS stylesheets to give your
    website a distinct brand.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 它是原型化网站用户界面的好选择，尽管在公开之前你可能需要雇佣一个网页设计师来构建定制的Bootstrap主题或用完全定制的CSS样式表替换它，以给你的网站带来独特的品牌。
- en: Bootstrap is like Marmite. Some developers love it; some hate it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap就像Marmite。一些开发者喜欢它；一些则讨厌它。
- en: 'Good reasons to use Bootstrap include:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap的合理理由包括：
- en: It saves time.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它节省了时间。
- en: It is customizable.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是可定制的。
- en: It is open-source.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是开源的。
- en: It is well documented officially and has lots of answers about it on sites like
    Stack Overflow.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有官方的详细文档，并在像Stack Overflow这样的网站上有很多关于它的答案。
- en: 'But implementing Bootstrap without care has the following negatives:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果不加注意地实现Bootstrap，会有以下负面影响：
- en: Your website will look generic.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的网站看起来会很普通。
- en: Bootstrap themes do not work well with the default views built-in with ASP.NET
    Core Identity.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap主题与ASP.NET Core Identity内置的默认视图不太兼容。
- en: It is heavy compared to a hand-crafted solution.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与手工制作的解决方案相比，它较重。
- en: 'In the previous edition of this book, I included about five pages reviewing
    some of the features of Bootstrap that are most used. But Bootstrap is not .NET,
    and the second edition is already crammed with content, so I have moved the Bootstrap
    content to an online-only resource section. You can read it at the following link:
    [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch14-bootstrap.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch14-bootstrap.md).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前一版中，我包括了大约五页的内容，回顾了Bootstrap最常用的功能。但Bootstrap不是.NET，第二版已经内容满满，所以我将Bootstrap内容移到了在线资源部分。你可以在以下链接中阅读它：[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch14-bootstrap.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch14-bootstrap.md)。
- en: '**Good Practice**: As well as defining your own styles, base your styles on
    a common library, such as Bootstrap, that implements responsive design. However,
    if you are building a website that needs a distinct identity or brand, make sure
    you use Bootstrap’s theming support. Do not just accept the defaults.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：除了定义自己的样式外，基于实现响应式设计的通用库，如Bootstrap，来构建样式。然而，如果你正在构建一个需要独特身份或品牌的网站，请确保使用Bootstrap的主题支持。不要只是接受默认设置。'
- en: Understanding Razor syntax and expressions
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Razor语法和表达式
- en: 'Before we customize the home page view, let’s review an example Razor file.
    The file has an initial Razor code block that instantiates an order with price
    and quantity and then outputs information about the order on the web page, as
    shown in the following markup:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们自定义主页视图之前，让我们回顾一个示例Razor文件。该文件有一个初始的Razor代码块，它实例化了一个带有价格和数量的订单，然后在网页上输出订单信息，如下面的标记所示：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding Razor file would result in the following incorrect output:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的Razor文件会导致以下不正确的输出：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Although Razor markup can include the value of any single property using the
    `@object.property` syntax, you should wrap expressions in parentheses, as shown
    in the following markup:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Razor标记可以采用`@object.property`语法包含任何单个属性的值，但你应该将表达式放在括号中，如下面的标记所示：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding Razor expression results in the following correct output:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的Razor表达式会产生以下正确的输出：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Understanding HTML Helper methods
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解HTML Helper方法
- en: When creating a view for ASP.NET Core MVC, you can use the `Html` object and
    its methods to generate markup. When Microsoft first introduced ASP.NET MVC in
    2009, these HTML Helper methods were the way to programmatically render HTML.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当为ASP.NET Core MVC创建视图时，你可以使用`Html`对象及其方法来生成标记。当微软在2009年首次引入ASP.NET MVC时，这些HTML
    Helper方法是通过编程渲染HTML的方式。
- en: Modern ASP.NET Core retains these HTML Helper methods for backward compatibility
    and provides Tag Helpers, which are usually easier to read and write in most scenarios.
    But there are notable situations where Tag Helpers cannot be used, like in Razor
    components.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现代ASP.NET Core保留了这些HTML Helper方法以实现向后兼容性，并提供了标签助手，在大多数情况下它们通常更容易阅读和编写。但有一些明显的情况中标签助手不能使用，比如在Razor组件中。
- en: You will learn about Tag Helpers later in this chapter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章后面学习到标签助手。
- en: 'Some useful `Html` object methods include the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的`Html`对象方法包括以下内容：
- en: '`ActionLink`: Use this to generate an anchor `<a>` element that contains a
    URL path to the specified controller and action. For example, `Html.ActionLink(linkText:
    "Binding", actionName: "ModelBinding", controllerName: "Home")` would generate
    `<a href="/home/modelbinding">Binding</a>`.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActionLink`: 使用此功能来生成一个包含指定控制器和动作的URL路径的锚点`<a>`元素。例如，`Html.ActionLink(linkText:
    "绑定", actionName: "ModelBinding", controllerName: "Home")`将生成`<a href="/home/modelbinding">绑定</a>`。'
- en: '`AntiForgeryToken`: Use this inside a `<form>` to insert a `<hidden>` element
    containing an anti-forgery token that can be validated when the form is submitted.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AntiForgeryToken`: 在`<form>`中使用此功能来插入一个包含抗伪造令牌的`<hidden>`元素，该令牌在表单提交时可以进行验证。'
- en: '`Display` and `DisplayFor`: Use this to generate HTML markup for the expression
    relative to the current model using a display template. There are built-in display
    templates for .NET types and custom templates can be created in the `DisplayTemplates`
    folder. The folder name is case-sensitive on case-sensitive filesystems.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Display`和`DisplayFor`: 使用此功能来生成相对于当前模型的表达式的HTML标记，使用显示模板。对于.NET类型有内置的显示模板，可以在`DisplayTemplates`文件夹中创建自定义模板。在大小写敏感的文件系统中，文件夹名称是大小写敏感的。'
- en: '`DisplayForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DisplayForModel`: 使用此功能来生成整个模型的HTML标记，而不是单个表达式。'
- en: '`Editor` and `EditorFor`: Use this to generate HTML markup for the expression
    relative to the current model using an editor template. There are built-in editor
    templates for .NET types that use `<label>` and `<input>` elements, and custom
    templates can be created in the `EditorTemplates` folder. The folder name is case-sensitive
    on case-sensitive filesystems.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Editor`和`EditorFor`: 使用此功能来生成相对于当前模型的表达式的HTML标记，使用编辑模板。对于.NET类型有内置的编辑模板，使用`<label>`和`<input>`元素，可以在`EditorTemplates`文件夹中创建自定义模板。在大小写敏感的文件系统中，文件夹名称是大小写敏感的。'
- en: '`EditorForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EditorForModel`: 使用此功能来生成整个模型的HTML标记，而不是单个表达式。'
- en: '`Encode`: Use this to safely encode an object or string into HTML. For example,
    the string value `"<script>"` would be encoded as `"&lt;script&gt;"`. This is
    not normally necessary since the Razor `@` symbol encodes string values by default.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Encode`: 使用此功能来安全地将对象或字符串编码为HTML。例如，字符串值`"<script>"`将被编码为`"&lt;script&gt;"`。这通常不是必需的，因为Razor的`@`符号默认会编码字符串值。'
- en: '`Raw`: Use this to render a string value *without* encoding as HTML.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Raw`: 使用此功能来渲染一个字符串值，*不*进行HTML编码。'
- en: '`PartialAsync` and `RenderPartialAsync`: Use these to generate HTML markup
    for a partial view. You can optionally pass a model and view data.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PartialAsync`和`RenderPartialAsync`: 使用这些功能来生成部分视图的HTML标记。您可以可选地传递模型和视图数据。'
- en: Defining a strongly-typed Razor view
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个强类型Razor视图
- en: 'To improve the IntelliSense when writing a view, you can define what type the
    view can expect using an `@model` directive at the top. Let’s modify the home
    page to display a table of orders from the Northwind database:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在编写视图时提高IntelliSense，您可以使用顶部的`@model`指令来定义视图可以期望的类型。让我们修改主页以显示来自Northwind数据库的订单表：
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace for
    the Northwind entity models and EF Core features, as shown in the following code:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，在`HomeController.cs`中，导入Northwind实体模型和EF Core功能的命名空间，如下所示，代码中已突出显示：
- en: '[PRE25]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the controller class, define a field to store the Northwind data context
    and set it in the constructor, as shown highlighted in the following code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器类中，定义一个字段来存储Northwind数据上下文，并在构造函数中设置它，如下所示，代码中已突出显示：
- en: '[PRE26]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the `Index` action method, add statements to create a view model containing
    all the orders and their related order details, as shown highlighted in the following
    code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Index`动作方法中，添加语句来创建一个包含所有订单及其相关订单详情的视图模型，如下所示，代码中已突出显示：
- en: '[PRE27]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `Views` folder, in `_ViewImports.cshtml`, add a statement to import
    the EF Core entity models for all Razor views and pages, as shown in the following
    code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views`文件夹中，在`_ViewImports.cshtml`中，添加一个语句来导入所有Razor视图和页面的EF Core实体模型，如下所示，代码中已突出显示：
- en: '[PRE28]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `Views\Home` folder, in `Index.cshtml`, at the top of the file, add
    a statement to set the model type to use a collection of orders, as shown in the
    following code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views\Home`文件夹中，在`Index.cshtml`文件顶部，添加一个语句来设置要使用的模型类型为订单集合，如下所示，代码中已突出显示：
- en: '[PRE29]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, whenever we type `Model` in this view, our code editor will know the correct
    type for the model and will provide IntelliSense for it.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While entering code in a view, remember the following:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Declare the type for the model using `@model` (with a lowercase `m`).
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the instance of the model using `@Model` (with an uppercase `M`).
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `Index.cshtml`, in the initial Razor code block, replace the existing content
    with an HTML table of the orders, as shown in the following markup:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let’s see the result of our customized home page:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Mvc` website project without debugging.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the home page now shows a table of orders with the highest-value order
    displayed first, as shown in *Figure 14.3*:![](img/B19587_14_03.png)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.3: The updated Northwind MVC website home page'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: I am running my web server on my local laptop, and its operating system, Windows
    11, is configured to use United Kingdom culture for date, time, and currency values.
    Next, we will see how to localize the web page for the preferred culture of the
    visitor.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you’ve been reminded of how to build a basic MVC website that displays
    data, let’s look at an important intermediate-level topic that is often overlooked
    when building websites for the World Wide Web: supporting all the world’s languages
    and cultures.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Localizing and globalizing with ASP.NET Core
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 7*, *Handling Dates, Times, and Internationalization*, you learned
    about working with dates, times, and time zones, and how to globalize and localize
    a .NET codebase.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look specifically at how to localize a website that
    uses ASP.NET Core.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: As well as localizing `string` values into languages like French and Spanish
    using `IStringLocalizer`, you can localize HTML content using `IHtmlLocalizer`,
    but this should be used with care. Usually, HTML markup should be the same for
    all locales. For views, you can use `IViewLocalizer`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Request localization** means that the browser can request what culture it
    prefers in the following ways:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Add a query string parameter, for example, `?culture=en-US&ui-culture=en-US`.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a cookie with the request, for example, `c=en-US|uic=en-US`.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set an HTTP header, for example, `Accept-Language: en-US,en;q=0.9,fr-FR;q=0.8,fr;q=0.7,en-GB;q=0.6`.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable request localization, call the `UseRequestLocalization` method when
    you configure the HTTP request pipeline in `Program.cs`. This tells ASP.NET Core
    to look for these requests and to automatically change the current thread that
    is processing that request (and only that request, no one else’s requests) to
    use the appropriate culture to format data and load resource values.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create some resource files to localize the web user interface into American
    English, British English, and French, and then globalize the data like dates and
    currency values:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Mvc` project, add a new folder named `Resources`. This is
    the default name for the folder that localizer services look in for `*.resx` resource
    files.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Resources`, add a new folder named `Views`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Views`, add a new folder named `Home`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating resource files
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How you create resource files (`*.resx`) depends on your code editor.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'To save time, you can just copy the `.resx` files from the GitHub repository
    found in the folder at the following link: [https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter14/Northwind.Mvc/Resources/Views/Home](https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter14/Northwind.Mvc/Resources/Views/Home).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use a special project item type and editor:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: In `Home`, add a file type of **Resources File** named `Index.en-US.resx`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the editor to define names and values, as shown in *Figure 14.4*:![](img/B19587_14_04.png)
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.4: Using the Resources File editor to define the localized labels'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: JetBrains Rider has its own resource file editor that combines all `.resx` files
    in one experience as a grid. Each language has its own column, side-by-side. It’s
    much more useful than having to edit each file individually as in Visual Studio
    2022.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the editor.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it `Index.en-GB.resx`.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Warning!** You must not change any of the entries in the **Name** column
    because these are used to look up localized values for all languages! You can
    only change the entries in the **Value** or **Comment** columns.'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In `Index.en-GB.resx`, modify `Orders (USA)` to `Orders (UK)`. This is so we
    can see a difference.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the editor.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it as `Index.fr-FR.resx`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.fr-FR.resx`, modify the `value` column to use French. (See the step-by-step
    instructions in the next section for Visual Studio Code for the translations.)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it `Index.fr.resx`.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.fr.resx`, modify the last value to be `Commandes (Neutral French)`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will have to edit the file without a special editor:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: In `Home`, add a new file named `Index.en-US.resx`.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents to contain American English language resources, as shown
    in the following markup:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Copy and paste the file and rename it `Index.en-GB.resx`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.en-GB.resx`, modify `Orders (USA)` to `Orders (UK)`. This is so we
    can see a difference.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it `Index.fr-FR.resx`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Index.fr-FR.resx`, modify the `value` column to use French:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Copy and paste the file and rename it `Index.fr.resx`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.fr.resx`, modify the last value to be `Commandes (Neutral French)`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Localizing Razor views with an injected view localizer
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can continue with these steps for both code editors:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, import the namespace for working
    with localization, inject the `IViewLocalizer` service, and make changes to use
    the labels in the view model, as shown highlighted in the following markup:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Good Practice**: The key values like `"Order ID"` are used to look up the
    localized values. If a value is missing, then it returns the key as a default.
    It is good practice to therefore use keys that also work as a good fallback, which
    is why I used US English proper titles with spaces as the keys above and in the
    `.resx` files.'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, before the call to `AddControllersWithViews`, add a statement
    to add localization and set the path to find resource files to the `Resources`
    folder, and after the call to `AddControllersWithViews`, append a call to add
    view localization, as shown highlighted in the following code:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In `Program.cs`, after the call to `Build` the `app` object, add statements
    to declare four cultures that we will support: US English, British English, neutral
    French, and French in France. Then, create a new localization options object and
    add those cultures as supported for both localization of user interfaces (`UICultures`)
    and globalization of data values like dates and currency (`Cultures`), as shown
    in the following code:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, navigate to **Settings**.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Search settings** box, type `lang`, and note you will find the **Preferred
    languages** section, as shown in *Figure 14.5*:![](img/B19587_14_05.png)
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.5: Searching Chrome Settings for the Preferred languages section'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Warning!** If you are using a localized version of Chrome, in other words,
    its user interface is in your local language, like French, then you will need
    to search for the word “language” in your own language. (Although “language” in
    French is “langue”, so entering “lang” will still work. But in Spanish you would
    need to search for “idioma”.)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add languages**, search for `french`, select both **French - francais**
    and **French (France) – francais (France)**, and then click **Add**.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Warning!** If you are using a localized version of Chrome, then you will
    need to search for the word “French” in your own language. For example, in Spanish,
    it would be “Francés,” and in Welsh, it would be “Ffrangeg.”'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add **English (United States)** and **English (United Kingdom)** if you do not
    have them in the list already.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dots **…** menu to the right of **French (France)**, click **Move to
    the top**, and confirm that it is at the top of your list of languages.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Settings** tab.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Chrome, perform a hard reload/refresh (for example, hold down *Ctrl* and
    click the **Refresh** button), and note the home page now uses localized labels
    and French formats for dates and currency, as shown in *Figure 14.6*:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_06.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: The Orders table localized and globalized into French in France'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the above steps for the other languages, for example, **English (United
    Kingdom)**.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对其他语言重复上述步骤，例如，**英语（英国）**。
- en: 'View **Developer Tools**, and note the request headers have been set with British
    English (`en-GB`) first, as shown in *Figure 14.7*:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 **开发者工具**，并注意请求头部已设置英国英语（`en-GB`）为首选，如图 *14.7* 所示：
- en: '![](img/B19587_14_07.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_14_07.png)'
- en: 'Figure 14.7: Orders localized and globalized into British English due to the
    Accept-Language: en-GB header'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '图 14.7：由于 Accept-Language: en-GB 头部信息，订单被本地化和全球化为英国英语'
- en: Close the browser and shut down the web server.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭网络服务器。
- en: Understanding the Accept-Language header
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Accept-Language 头部信息
- en: 'You might wonder how the `Accept-Language` header works:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道 `Accept-Language` 头部信息是如何工作的：
- en: '[PRE36]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `Accept-Language` header uses commas as separators between culture codes.
    Each culture code can be neutral (just a language) or specific (language and region),
    and each can have a **quality value** (`q`) between 0.0 and 1.0 (default). The
    preceding `Accept-Language` header example should therefore be read as follows:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`Accept-Language` 头部信息使用逗号作为文化代码之间的分隔符。每个文化代码可以是中性的（仅语言）或特定的（语言和区域），每个都可以有一个
    **质量值** (`q`)，介于 0.0 和 1.0 之间（默认）。因此，前面的 `Accept-Language` 头部信息示例应如下阅读：'
- en: '`en-US`: English language in the United States ranked highest at 1.0 (if `q`
    not explicitly set).'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`en-US`: 美国英语语言，排名第一，为 1.0（如果未显式设置 `q`）。'
- en: '`en;q=0.9`: English language anywhere in the world ranked at 0.9.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`en;q=0.9`: 世界各地英语语言，排名为 0.9。'
- en: '`fr-FR;q=0.8`: French language in France ranked at 0.8.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fr-FR;q=0.8`: 法国法语语言，排名为 0.8。'
- en: '`fr;q=0.7`: French language anywhere in the world ranked at 0.7.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fr;q=0.7`: 世界各地法语语言，排名为 0.7。'
- en: '`en-GB;q=0.6`: English language in United Kingdom ranked lowest at 0.6.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`en-GB;q=0.6`: 英国英语语言，排名最低，为 0.6。'
- en: Defining web user interfaces with Tag Helpers
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签助手定义网络用户界面
- en: '**Tag Helpers** make it easier to make HTML elements dynamic. The markup is
    cleaner and easier to read, edit, and maintain than if you use HTML Helpers.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '**标签助手**使使 HTML 元素动态化变得更容易。标记更干净，更容易阅读、编辑和维护，比使用 HTML 助手更好。'
- en: However, Tag Helpers do not completely replace HTML Helpers because there are
    some things that can only be achieved with HTML Helpers, like rendering output
    that contains multiple nested tags. Tag Helpers also cannot be used in Razor components.
    So, you must learn HTML Helpers and treat Tag Helpers as an optional choice that
    is better in some scenarios.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，标签助手并不能完全替代 HTML 助手，因为有些事情只能通过 HTML 助手实现，比如渲染包含多个嵌套标签的输出。标签助手也不能在 Razor 组件中使用。因此，你必须学习
    HTML 助手，并将标签助手视为一种可选的选择，在某些场景下可能更好。
- en: Tag Helpers are especially useful for **Front End** (**FE**) developers who
    primarily work with HTML, CSS, and JavaScript because the FE developer does not
    have to learn C# syntax. Tag Helpers just use what look like normal HTML attributes
    on elements. The attribute names and values can also be selected from IntelliSense
    if your code editor supports that; both Visual Studio 2022 and Visual Studio Code
    do.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 标签助手对于主要使用 HTML、CSS 和 JavaScript 的前端（FE）开发者特别有用，因为前端开发者不需要学习 C# 语法。标签助手仅使用看起来像正常
    HTML 属性的元素。如果您的代码编辑器支持，您还可以从 IntelliSense 中选择属性名称和值；Visual Studio 2022 和 Visual
    Studio Code 都支持。
- en: Comparing HTML Helpers and Tag Helpers
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较HTML助手和标签助手
- en: 'For example, to render a linkable hyperlink to a controller action, you could
    use an HTML Helper method, as shown in the following markup:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要渲染一个可链接的超链接到控制器操作，你可以使用一个 HTML 助手方法，如下面的标记所示：
- en: '[PRE37]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To make it clearer how it works, you could use named parameters, as shown in
    the following code:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地说明其工作原理，你可以使用命名参数，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'But using a Tag Helper would be even clearer and cleaner for someone who works
    more with HTML than C#, as shown in the following markup:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于更擅长 HTML 而不是 C# 的人来说，使用标签助手会更清晰、更简洁，如下面的标记所示：
- en: '[PRE39]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'All three examples above generate the same rendered HTML element, as shown
    in the following markup:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的所有三个示例都生成相同的渲染 HTML 元素，如下面的标记所示：
- en: '[PRE40]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the next few sections, we will review some of the more common Tag Helpers:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将回顾一些更常见的标签助手：
- en: Anchor Tag Helper
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锚点标签助手
- en: Cache Tag Helper
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存标签助手
- en: Environment Tag Helper
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境标签助手
- en: Image Tag Helper
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片标签助手
- en: Forms-related Tag Helpers
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与表单相关的标签助手
- en: Exploring the Anchor Tag Helper
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索锚点标签助手
- en: First, we will create three clickable hyperlinks styled as buttons to view the
    home page with all orders, the orders for a single customer, and the orders in
    a single country. This will allow us to see the basics of creating links to controllers
    and actions, as well as passing parameters using a route parameter and arbitrary
    query string parameters.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explore these examples of the Anchor Tag Helper:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views` folder, in `_ViewImports.cshtml`, note the `@addTagHelper` directive,
    which adds the ASP.NET Core Tag Helpers, as shown highlighted in the following
    code:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You could create your own Tag Helpers and you would have to register them in
    the same way. But that is beyond the scope of this book. If you want to learn
    how, you can read the following documentation: [https://learn.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring](https://learn.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring).'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, add markup to define a paragraph
    with clickable hyperlinks styled as buttons using the `<a>` tag, as shown in the
    following markup:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If you set a controller name without an action name, then it defaults to the
    current action, in this case, `Privacy`. The `asp-route-{parametername}` attribute
    can use any arbitrary parameter name. In the code example above, we used `id`
    and `country`. `id` will map to the route parameter with the same name. `country`
    is not a route parameter, so it will be passed as a query string.
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Controllers` folder, in `HomeController.cs`, modify the `Index` action
    method to define two optional parameters to pass a customer ID and the name of
    a country, and then modify the LINQ query to use them to filter the orders if
    they are set, as shown highlighted in the following code:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View **Developer Tools** and click the **Elements** tab.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, click **Privacy** to navigate to that page, and note the
    buttons, including their raw HTML, which shows the `href` attribute paths that
    were generated by the Anchor Tag Helper, as shown in Figure *14.8*:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_08.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.8: Three hyperlinks styled as buttons generated by Anchor Tag Helper'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Click each button and then come back to the **Privacy Policy** page to make
    sure they work correctly.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, at the end of the table of orders,
    add an anchor tag to indicate the end of the orders table, as shown highlighted
    in the following markup:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, after the existing anchor
    tags, add another one to link to the anchor with an `id` of `endOfTable` by setting
    the `asp-fragment` attribute, as shown in the following markup:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Modify the second anchor tag to explicitly set the protocol to use `https`,
    as shown highlighted in the following markup:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the `Controllers` folder, in `HomeController.cs`, add an action method named
    `Shipper`. Give it a parameter to receive a shipper entity and then pass it to
    the view, as shown in the following code:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This action method can respond to any method of request, for example, `GET`
    or `POST`. With a `GET` request, the shipper entity would be passed as query string
    key-value pairs. With a `POST` request, the shipper entity would be passed in
    the body.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Views/Home` folder, add an empty Razor view named `Shipper.cshtml`.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents, as shown in the following markup:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, at the top of the file, add
    code and markup to inject the Northwind database context. Then, use it to define
    a Razor function to create a dictionary with string values for both the key and
    value populated from the shippers table, as shown highlighted in the following
    code:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'After the existing anchor tags, add another one to pass the dictionary to the
    current page, as shown in the following markup:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Passing a complex object as a query string like this quickly hits the limit
    of about 1,000 characters for a URL. To send larger objects, you should use `POST`
    instead of `GET` by using a `<form>` element instead of an anchor tag `<a>`.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or the cloud, then make sure to start it.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Mvc` website project.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View **Developer Tools** and click **Elements**.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Privacy** to navigate to that page and note the buttons,
    including their raw HTML, which shows the `href` attribute paths that were generated
    by the Anchor Tag Helper, as shown in Figure *14.9*:![](img/B19587_14_09.png)
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.9: Using a fragment and passing a complex object using query string
    parameters'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A side benefit of specifying the protocol is that the generated URL must include
    the protocol, domain, and any port number, as well as the relative path, so it
    is a convenient way to get an absolute URL instead of the default relative path
    URL, as shown in the second link above.
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Orders (end of table)** button and note the browser navigates to
    the home page and then jumps to the end of the orders table.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the **Privacy** page, click the **Shipper** button, and note the
    shipper details are pre-entered into the shipper form.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring the Cache Tag Helpers
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Cache and Distributed Cache Tag Helpers improve the performance of your
    web pages by caching their content using the in-memory or registered distributed
    cache providers respectively. We covered reading and writing objects to these
    caches in *Chapter 9*, *Caching, Queuing, and Resilient Background Services*.
    Now we will see how to store fragments of HTML for a view in them.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: As a reminder, an in-memory cache is best for a single web server or a web server
    farm with session affinity enabled. Session affinity means that subsequent requests
    from the same browser are served by the same web server. A distributed cache is
    best for a web server farm or in a cloud provider like Azure. You can register
    providers for SQL Server, Redis, or NCache, or create your own custom provider.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，内存缓存最适合单个 web 服务器或启用了会话亲和力的 web 服务器群。会话亲和力意味着来自同一浏览器的后续请求由同一 web 服务器提供服务。分布式缓存最适合
    web 服务器群或在 Azure 等云服务提供商中。你可以注册 SQL Server、Redis 或 NCache 的提供程序，或者创建自己的自定义提供程序。
- en: 'Attributes that can be applied to the Cache Tag Helper include:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用于 Cache 标签助手的属性包括：
- en: '`enabled`: Default value is `true`. This exists so that you can include the
    `<cache>` element in the markup but decide at runtime if it should be enabled
    or not.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enabled`: 默认值为 `true`。这存在是为了让你可以在标记中包含 `<cache>` 元素，但可以在运行时决定是否启用它。'
- en: '`expires-after`: A `TimeSpan` value to expire after. The default is `00:20:00`,
    meaning 20 minutes.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expires-after`: 一个 `TimeSpan` 值，用于指定过期时间。默认值为 `00:20:00`，即 20 分钟。'
- en: '`expires-on`: A `DateTimeOffset` value to expire at. No default.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expires-on`: 一个用于过期的 `DateTimeOffset` 值。没有默认值。'
- en: '`expires-sliding`: A `TimeSpan` value to expire after if the value has not
    been accessed during that time. This is useful when storing database entities
    that cost a lot to create and have varied popularity. The popular entities will
    stay cached if they continue to be accessed. Less popular entities will drop out.
    No default.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expires-sliding`: 一个 `TimeSpan` 值，如果在此时间内没有访问值，则过期。这在存储创建成本高且受欢迎程度不同的数据库实体时很有用。受欢迎的实体如果继续被访问，将保留在缓存中。不受欢迎的实体将退出。没有默认值。'
- en: '`vary-by-{type}`: These attributes allow multiple different cached versions
    based on differences in an HTTP `header` value, a `user`, a `route`, `cookie`,
    or `query` string value, or a custom value.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vary-by-{type}`: 这些属性允许基于 HTTP `header` 值、用户、路由、`cookie` 或 `query` 字符串值或自定义值的差异，有多个不同的缓存版本。'
- en: 'Let’s see an example of the Cache Tag Helper:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Cache 标签助手的示例：
- en: 'In the `Views/Home` folder, in `Index.cshtml`, between the heading and the
    table, add `<div>` elements to define a Bootstrap row with two columns that show
    the current UTC date and time twice, once live and then once cached, as shown
    in the following markup:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Views/Home` 文件夹中的 `Index.cshtml` 文件中，在标题和表格之间添加 `<div>` 元素，以定义一个包含两个列的 Bootstrap
    行，显示当前的 UTC 日期和时间两次，一次是实时，一次是缓存，如下所示的高亮标记：
- en: '[PRE51]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Mvc` 网站项目。
- en: 'Refresh the home page several times over several seconds and note the left-hand
    time is always refreshed to show the live time, and the right-hand time is cached
    (for 20 minutes by default), as shown in *Figure 14.10*:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在几秒钟内多次刷新主页，并注意左侧的时间总是刷新以显示实时时间，而右侧的时间缓存（默认为 20 分钟），如图 *14.10* 所示：
- en: '![](img/B19587_14_10.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_14_10.png)'
- en: 'Figure 14.10: Live and cached UTC times'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.10：实时和缓存的 UTC 时间
- en: Close the browser and shut down the web server.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: 'In the `Views/Home` folder, in `Index.cshtml`, modify the `<cache>` element
    to expire after 10 seconds, as shown highlighted in the following markup:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Views/Home` 文件夹中的 `Index.cshtml` 文件中，将 `<cache>` 元素修改为在 10 秒后过期，如下所示的高亮标记：
- en: '[PRE52]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Mvc` 网站项目。
- en: Refresh the home page several times over several seconds and note the left-hand
    time is always refreshed to show the live time, and the right-hand time is cached
    for 10 seconds before it then refreshes.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在几秒钟内多次刷新主页，并注意左侧的时间总是刷新以显示实时时间，而右侧的时间在刷新前缓存了 10 秒。
- en: Close the browser and shut down the web server.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: Exploring the Environment Tag Helper
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索环境标签助手
- en: The Environment Tag Helper renders its content only if the current environment
    matches one of the values in a comma-separated list of names. This is useful if
    you want to render some content like instructions to a tester when hosted in a
    staging environment, or content like customer-specific information that developers
    and testers do not need to see while hosted in the production environment.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 环境标签助手仅在当前环境与逗号分隔的名称列表中的一个值匹配时才渲染其内容。如果你想在预发布环境中渲染一些内容，如向测试人员提供说明，或者在生产环境中渲染开发人员和测试人员不需要看到的内容，如特定客户的信息，这很有用。
- en: As well as a `names` attribute to set the comma-separated list of environments,
    you can also use `include` (works the same as `names`) and `exclude` (renders
    for all environments *except* the ones in the list).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, inject the dependency service
    for the web host environment, as shown in the following code:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'After the heading, add two `<environment>` elements, the first to show output
    only for developers and testers, and the second to show output only for product
    visitors, as shown in the following markup:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the **Privacy** page, and note the message for developers and testers,
    as shown in *Figure 14.11*:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_11.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.11: The Privacy page in the Development environment'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Properties` folder, in `launchSettings.json`, for the `https` profile,
    change the environment setting to `Production`, as shown highlighted in the following
    JSON:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the **Privacy** page, and note the message for public visitors,
    as shown in *Figure 14.12*:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_12.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.12: The Privacy page in the Production environment'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Properties` folder, in `launchSettings.json`, for the `https` profile,
    change the environment setting back to `Development`.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding how cache busting with Tag Helpers works
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When `asp-append-version` is specified with a `true` value in a `<link>`, `<img>`,
    or `<script>` element, the Tag Helper for that tag type is invoked.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: 'They work by automatically appending a query string value named `v` that is
    generated from a SHA256 hash of the referenced source file, as shown in the following
    example generated output:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You can see this for yourself in the current project because the `_Layout.cshtml`
    file has the `<script src="img/site.js" asp-append-version="true"></script>` element.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: If even a single byte within the `site.js` file changes, then its hash value
    will be different, and therefore if a browser or CDN is caching the script file,
    then it will bust the cached copy and replace it with the new version.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: The `src` attribute must be set to a static file stored on the local web server,
    usually in the `wwwroot` folder, but you can configure additional locations. Remote
    references are not supported.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Forms-related Tag Helpers
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Form Tag Helper generates the `<form>` elements `action` attribute for an
    MVC controller action or named route. Like the Anchor Tag Helper, you can pass
    parameters using the `asp-route-<parametername>` attribute. It also generates
    a hidden verification token to prevent cross-site request forgery. You must apply
    the `[ValidateAntiForgeryToken]` attribute to the HTTP `POST` action method to
    properly use this feature.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: The Label and Input Tag Helpers bind labels and inputs to properties on a model.
    They can then generate the `id`, `name`, and `for` attributes automatically, as
    well as add validation attributes and messages.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example of a form for entering shipper information:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Shipper.cshtml`, duplicate the existing markup
    that outputs shipper details, wrap it in a `<form>` element that uses the Form
    Tag Helper, and modify the `<label>` and `<input>` elements to use the Label and
    Input Tag Helpers, as shown highlighted in the following markup:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In the `Controllers` folder, in `HomeController.cs`, add an action method named
    `ProcessShipper`. Give it a parameter to receive a shipper entity and then return
    it as a JSON document using the `Json` method, as shown in the following code:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Start the `Northwind.Mvc` website project.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Privacy** page, and then click the **Shipper** button.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Shipper** page, right-click, select **View page source**, and note
    the different HTML output for the form generated by the Form, Input, and Label
    Tag Helpers, including a hidden element named `__RequestVerificationToken`, as
    shown in the following markup:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In the form, change the shipper ID and company name, noting that attributes
    like `maxlength="40"` prevent a company name longer than 40 characters, and `type="number"`
    only allows numbers for the shipper ID.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Submit** button and note the JSON document returned, as shown in
    the following output:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Close the browser and shut down the web server.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output caching
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some ways, output caching is like response caching, which we covered in *Chapter
    9*, *Caching, Queuing, and Resilient Background Services*. Output caching can
    store dynamically generated responses on the server so that they do not have to
    be regenerated again for another request. This can improve performance. Unlike
    response caching, output caching does not rely on clients and intermediaries doing
    what they are told by the HTTP response headers.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Output caching endpoints
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see it in action with a really simple example of applying output caching
    to some endpoints to make sure it is working properly:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, in `Program.cs`, after the call to `AddNorthwindContext`,
    add a statement to add the output cache middleware and override the default expiration
    timespan to make it only 10 seconds, as shown in the following code:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '**Good Practice**: The default expiration time span is one minute. Think carefully
    about what the duration should be.'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, before the call to map controller routes, add a statement
    to use output cache, as shown in the following code:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In `Program.cs`, after the call to map Razor Pages, add statements to create
    two simple endpoints that respond with plain text, one that is not cached and
    one that uses the output cache, as shown in the following code:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In `appsettings.Development.json`, add a log level of `Information` for the
    output caching middleware, as shown highlighted in the following configuration:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Start the `Northwind.Mvc` website project and arrange the browser window and
    command prompt or terminal window so that you can see both.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, navigate to `https://localhost:5141/notcached`, and note nothing
    is written to the command prompt or terminal.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, click the **Refresh** button several times and note that the
    time is always updated because it is not served from the output cache.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the browser, navigate to `https://localhost:5141/cached`, and note that
    messages are written to the command prompt or terminal to tell you that you have
    made a request for a cached resource but it does not have anything in the output
    cache so it has now cached the output, as shown in the following output:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In the browser, click the **Refresh** button several times and note that the
    time is not updated, and an output caching message tells you that the value was
    served from the cache, as shown in the following output:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Continue refreshing until 10 seconds have passed and note that messages are
    written to the command line or terminal to tell you that the cached output has
    been updated.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output caching MVC views
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s see how we can output cache an MVC view:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, at the end of the call to map controllers, add a call to the
    `CacheOutput` method, as shown highlighted in the following code:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Start the `Northwind.Mvc` website project and arrange the browser window and
    command prompt or terminal window so that you can see both.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, note that the home page with its table of
    orders is not in the output cache, so SQL commands are executed to get the data,
    and then once the Razor view generates the page, it is stored in the cache, as
    shown highlighted in the following output:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'On the home page, note the current time, and then refresh the page and note
    that the whole page, including the time and orders table, is served from the output
    cache, as shown in the following output:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Keep refreshing until 10 seconds have passed and note that the page is then
    regenerated from the database and the current time is shown.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many other ways to vary the cached results for output caching and
    the ASP.NET Core team intends to add more capabilities in the future.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Practicing and exploring
  id: totrans-457
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.1 – Test your knowledge
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: What is the advantage of declaring a strongly typed Razor view and how do you
    do it?
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you enable Tag Helpers in a view?
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the pros and cons of HTML Helper methods compared to Tag Helpers?
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can a browser request a preferred language for localization?
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you localize text in a view?
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在视图中本地化文本？
- en: What is the prefix for attributes recognized by Tag Helpers?
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标签辅助器识别的属性的名称前缀是什么？
- en: How can you pass a complex object as a query string parameter?
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何将复杂对象作为查询字符串参数传递？
- en: How can you control how long the contents of the `<cache>` element are cached
    for?
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何控制 `<cache>` 元素的内容缓存多长时间？
- en: What is the `<environment>` element used for?
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<environment>` 元素用于什么？'
- en: How does cache busting with Tag Helpers work?
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标签辅助器的缓存失效是如何工作的？
- en: Exercise 14.2 – Practice building user interfaces with Boostrap
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 14.2 – 使用 Bootstrap 练习构建用户界面
- en: 'Create a new ASP.NET Core MVC project named `Ch14Ex02_ExploringBootstrap`.
    Add views that implement the following Bootstrap features:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Ch14Ex02_ExploringBootstrap` 的新 ASP.NET Core MVC 项目。添加实现以下 Bootstrap
    功能的视图：
- en: 'Accordion: [https://getbootstrap.com/docs/5.3/components/accordion/](https://getbootstrap.com/docs/5.3/components/accordion/).'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手风琴：[https://getbootstrap.com/docs/5.3/components/accordion/](https://getbootstrap.com/docs/5.3/components/accordion/)
- en: 'Cards: [https://getbootstrap.com/docs/5.3/components/card/](https://getbootstrap.com/docs/5.3/components/card/).'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡片：[https://getbootstrap.com/docs/5.3/components/card/](https://getbootstrap.com/docs/5.3/components/card/)
- en: 'Carousel: [https://getbootstrap.com/docs/5.3/components/carousel/](https://getbootstrap.com/docs/5.3/components/carousel/).'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮播图：[https://getbootstrap.com/docs/5.3/components/carousel/](https://getbootstrap.com/docs/5.3/components/carousel/)
- en: 'NavBar: [https://getbootstrap.com/docs/5.3/components/navbar/](https://getbootstrap.com/docs/5.3/components/navbar/).'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航栏：[https://getbootstrap.com/docs/5.3/components/navbar/](https://getbootstrap.com/docs/5.3/components/navbar/)
- en: 'Popovers: [https://getbootstrap.com/docs/5.3/components/popovers/](https://getbootstrap.com/docs/5.3/components/popovers/).'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹出框：[https://getbootstrap.com/docs/5.3/components/popovers/](https://getbootstrap.com/docs/5.3/components/popovers/)
- en: 'Toast: [https://getbootstrap.com/docs/5.3/components/toasts/](https://getbootstrap.com/docs/5.3/components/toasts/).'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toast：[https://getbootstrap.com/docs/5.3/components/toasts/](https://getbootstrap.com/docs/5.3/components/toasts/)
- en: 'Tooltips: [https://getbootstrap.com/docs/5.3/components/tooltips/](https://getbootstrap.com/docs/5.3/components/tooltips/).'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具提示：[https://getbootstrap.com/docs/5.3/components/tooltips/](https://getbootstrap.com/docs/5.3/components/tooltips/)
- en: Exercise 14.3 – Explore topics
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 14.3 – 探索主题
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖的主题：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-14---building-web-user-interfaces-using-aspnet-core](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-14---building-web-user-interfaces-using-aspnet-core)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-14---building-web-user-interfaces-using-aspnet-core](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-14---building-web-user-interfaces-using-aspnet-core)'
- en: Summary
  id: totrans-483
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned how to build user interfaces using ASP.NET Core
    MVC. You learned about:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 ASP.NET Core MVC 构建用户界面。你学习了以下内容：
- en: ASP.NET Core Razor views and Razor syntax
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core Razor 视图和 Razor 语法
- en: Some common Bootstrap styles
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些常见的 Bootstrap 样式
- en: Localizing and globalizing an ASP.NET Core website
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地化和全球化 ASP.NET Core 网站
- en: HTML Helpers and Tag Helpers
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 辅助器和标签辅助器
- en: Output caching endpoints and views
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出缓存端点和视图
- en: In the next chapter, you will learn how to build web user interface components
    using Blazor.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 Blazor 构建网络用户界面组件。
