- en: Inventory UIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库存UI
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a simple 2-D mini-game - SpaceGirl
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的2-D迷你游戏 - SpaceGirl
- en: Displaying single object pickups with carrying and not-carrying text
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示带有携带和不携带文本的单个物体拾取
- en: Displaying single object pickups with carrying and not-carrying icons
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示带有携带和不携带图标的单个物体拾取
- en: Displaying multiple pickups of the same object with multiple status icons
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以多个状态图标显示相同物体的多个拾取
- en: Using panels to visually outline the inventory UI area and individual items
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用面板在视觉上勾勒库存UI区域和单个物品
- en: Creating a C# inventory slot display UI scripted component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个C#库存槽显示UI脚本组件
- en: Generalizing multiple icon displays using UI Grid Layout Groups (with scrollbars!)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用UI网格布局组（带滚动条！）泛化多个图标显示
- en: Displaying multiple pickups of different objects as a list of text via a dynamic
    `List<>` of scripted PickUp objects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过动态的`List<>`脚本拾取对象列表显示不同物体的多个拾取
- en: Displaying multiple pickups of different objects as text totals via a dynamic
    `Dictionary<>` of PickUp objects and enum pickup types
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过动态的`Dictionary<>`字典和枚举拾取类型，以文本总数的形式显示多个不同物体的拾取
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Many games involve the player collecting items or choosing from a selection
    of items. Examples are collecting keys to open doors, collecting ammo for weapons,
    and choosing from a collection of spells to cast.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 许多游戏涉及玩家收集物品或从物品选择中做出选择。例如，收集钥匙打开门，收集武器弹药，以及从施法咒语集合中选择。
- en: The recipes in this chapter provide a range of solutions for displaying to the
    player whether they are carrying an item or not, whether they are allowed more
    than one of an item, and how many they have.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱提供了一系列解决方案，用于向玩家显示他们是否携带了物品，是否允许携带多个相同物品，以及他们有多少个。
- en: The big picture
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体情况
- en: The two parts of software design for implementing inventories relate to, first,
    how we choose to represent the data about inventory items (that is, the data types
    and structures to store the data) and, second, how we choose to display information
    about inventory items to the player (the UI).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实现库存的软件设计的两部分与以下内容相关，首先，我们选择如何表示关于库存物品的数据（即存储数据的类型和结构）以及其次，我们选择如何向玩家显示库存物品的信息（UI）。
- en: Also, whilst not strictly inventory items, player properties such as lives left,
    health, and time remaining can also be designed around the same concepts that
    we present in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然不是严格意义上的库存物品，但玩家的属性，如剩余生命、健康和时间剩余，也可以围绕我们在本章中提出的相同概念进行设计。
- en: 'We need to first think about the nature of different inventory items for any
    particular game:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要考虑任何特定游戏中不同库存物品的性质：
- en: 'Single items:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个物品：
- en: 'Examples: the only key for a level, our suit of magic armor'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例：一个级别的唯一钥匙，我们的魔法盔甲套装
- en: 'Data type: `bool` (Boolean – `true`/`false`)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型：`bool`（布尔值 - `true`/`false`）
- en: 'UI: nothing (if not carried) or text/image to show being carried'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI：无（如果不携带）或显示携带的文本/图像
- en: Or perhaps, if we wish to highlight to the player that there is an **option**
    to carry this item, then we could display a text `string` saying `no key`/`key`,
    or two images, one showing an empty key outline and the second showing a full-color
    key.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，如果我们希望向玩家突出显示有**携带**此物品的**选项**，那么我们可以显示一个文本`string`说`没有钥匙`/`钥匙`，或者两个图像，一个显示空钥匙轮廓，另一个显示全色钥匙。
- en: 'Continuous item:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连续物品：
- en: 'Examples: time left, health, shield strength'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例：剩余时间，健康，护盾强度
- en: 'Data type: `float` (for example, 0.00-1.00) or `int` (Integer) scale'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型：`float`（例如，0.00-1.00）或`int`（整数）比例
- en: (for example, 0% to 100%)
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （例如，0%到100%）
- en: 'UI: text number or image progress bar/pie chart'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI：文本数字或图像进度条/饼图
- en: Two or more of same item
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同项目的两个或更多
- en: 'Examples: lives left, or number of arrows or bullets left'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例：剩余生命，或剩余箭头或子弹数量
- en: 'Data type: `int` (Integer – whole numbers)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型：`int`（整数 - 整数）
- en: 'UI: text count or images'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI：文本计数或图像
- en: Collection of related items
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相关物品集合
- en: 'Examples: keys of different colors to open correspondingly colored doors, potions
    of different strength with different titles'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例：不同颜色的钥匙打开相应颜色的门，不同强度的药水有不同的标题
- en: 'Data structure: a `struct` or `class` for the general item type (for example,
    class `Key` (color/cost/doorOpenTagString), stored as an array or `List<>`'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构：用于通用物品类型的`struct`或`class`（例如，`Key`类（颜色/成本/门打开标签字符串），存储为数组或`List<>`
- en: 'UI: text list or list/grid arrangement of icons'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI：文本列表或图标列表/网格排列
- en: Collection of different items
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同物品集合
- en: 'Examples: keys, potions, weapons, tools, all in the same inventory system'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例：钥匙、药水、武器、工具，都在同一个库存系统中
- en: 'Data structure: `List<>` or `Dictionary<>` or array of objects, which can be
    instances of different class for each item type'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构：`List<>`或`Dictionary<>`或对象的数组，每个物品类型可以是不同类的实例
- en: Each of the preceding representations and UI display methods are illustrated
    by the recipes in this chapter. In addition, in the chapter we'll learn how to
    create and use custom Sorting Layers in order to have complete control over which
    objects appear on top of or below other objects – something that is pretty important
    when scene content can contain background images, pickups, player characters,
    and so on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱展示了前面提到的所有表示和UI显示方法。此外，在本章中，我们将学习如何创建和使用自定义排序层，以便完全控制哪些对象出现在其他对象之上或之下——当场景内容可以包含背景图像、拾取物、玩家角色等时，这一点非常重要。
- en: 'These recipes demonstrate a range of C# data representations for inventory
    items and a range of Unity UI interface components for displaying the status and
    contents of player inventories at runtime. Inventory UI needs good quality graphical
    assets for a high-quality result. Some sources of assets that you might wish to
    explore include the following sites:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些食谱展示了库存物品的C#数据表示范围以及Unity UI界面组件的范围，用于在运行时显示玩家库存的状态和内容。库存UI需要高质量的图形资产才能达到高质量的结果。以下是一些你可能希望探索的资产来源网站：
- en: 'The graphics for our SpaceGirl mini-game are from Space Cute art by Daniel
    Cook; he generously publishes lots of 2D art for game developers to use:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们太空女孩迷你游戏的图形来自Daniel Cook的Space Cute艺术；他慷慨地发布了大量2D艺术作品，供游戏开发者使用：
- en: '[http://www.lostgarden.com/](http://www.lostgarden.com/)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.lostgarden.com/](http://www.lostgarden.com/)'
- en: '[http://www.lostgarden.com/search?q=planet+cute](http://www.lostgarden.com/search?q=planet+cute)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.lostgarden.com/search?q=planet+cute](http://www.lostgarden.com/search?q=planet+cute)'
- en: 'Sethbyrd-lots of fun 2D graphics:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sethbyrd-大量的2D图形：
- en: '[http://www.sethbyrd.com/](http://www.sethbyrd.com/)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.sethbyrd.com/](http://www.sethbyrd.com/)'
- en: 'Royalty-free art for 2D games:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于2D游戏的免费艺术作品：
- en: '[http://www.gameart2d.com/freebies.html](http://www.gameart2d.com/freebies.html)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.gameart2d.com/freebies.html](http://www.gameart2d.com/freebies.html)'
- en: Creating a simple 2D mini-game – SpaceGirl
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的2D迷你游戏 - 太空女孩
- en: This recipe shows how to create the 2D Space Girl mini-game, on which all the
    recipes of this chapter are based.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱展示了如何创建2D太空女孩迷你游戏，本章的所有食谱都是基于这个游戏。
- en: '![](img/0fb94072-acb7-423d-871d-da25d88ec6f4.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0fb94072-acb7-423d-871d-da25d88ec6f4.png)'
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the images you need in a folder named Sprites
    in the `03_01` folder. We have also provided the completed game as a Unity package
    in this folder, named `Simple2DGame_SpaceGirl`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们在`03_01`文件夹中的Sprites文件夹中准备了所需的图像。我们还在这个文件夹中提供了一个名为`Simple2DGame_SpaceGirl`的Unity游戏包，作为完成的游戏。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create the simple 2D Space Girl mini-game, follow these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建简单的2D太空女孩迷你游戏，请按照以下步骤操作：
- en: Create a new, empty 2D project.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空2D项目。
- en: Import the supplied folder `Sprites` into your project.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的`Sprites`文件夹到你的项目中。
- en: Since it's a 2D project, each sprite image should be of type **Sprite (2D and
    UI)**. Check this by selecting the sprite in the Project panel, then, in the **Inspector**,
    check property **Texture** Type. If you need to change the type, change it from
    this drop-down menu, then click the **Apply** button.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个2D项目，每个精灵图像的类型应该是**Sprite (2D and UI)**。通过在项目面板中选择精灵，然后在**检查器**中检查属性**纹理**类型来检查这一点。如果你需要更改类型，从下拉菜单中更改它，然后点击**应用**按钮。
- en: 'Set the Unity Player screen size to `800 x 600`: choose this resolution from
    the drop-down menu on the Game panel. If `800 x 600` isn''t an offered resolution,
    the click the plus sign **+** button and create this as a new resolution for the
    panel.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Unity玩家屏幕大小设置为`800 x 600`：在游戏面板的下拉菜单中选择此分辨率。如果`800 x 600`不是提供的分辨率，请点击加号**+**按钮，将其创建为面板的新分辨率。
- en: Display the **Tags** and **Layers** properties for the current Unity project.
    Choose menu Edit | Project Settings | Tags and Layers. Alternatively, if you are
    already editing a GameObject, then you can select the **Add Layer...** menu from
    the Layer drop-down menu at the top of the Inspector panel, next to the Static
    `true`/`false` toggle.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示当前Unity项目的**标签**和**层**属性。选择菜单编辑 | 项目设置 | 标签和层。或者，如果你已经在编辑一个GameObject，你可以从检查器面板顶部的层下拉菜单中选择**添加层...**菜单，位于静态`true`/`false`切换旁边的层。
- en: 'Use the expand/contract triangle tools to contract **Tags and Layers**, and
    to expand **Sorting Layers**. Use the plus sign + button to add two new sorting
    layers, as shown in the screenshot: first, add one named `Background`, and next,
    add one named `Foreground`. The sequence is important since Unity will draw items
    in layers'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用展开/收缩三角形工具收缩 **Tags and Layers**，并展开 **Sorting Layers**。使用加号 + 按钮添加两个新的排序层，如图所示：首先，添加一个名为
    `Background` 的，然后添加一个名为 `Foreground` 的。顺序很重要，因为 Unity 将在层中按顺序绘制项目
- en: 'further down this list on top of items earlier in the list. You can rearrange
    the layer sequence by clicking and dragging the position control: the wide equals
    sign (=) icon to the left of the word Layer in each row:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在列表的上方对项目进行排序，比列表中较早的项目更靠前。您可以通过单击并拖动位置控制：位于每行“Layer”一词左侧的宽等于号（=）图标来重新排列层顺序：
- en: '![](img/163362cf-7579-4d18-aaeb-1ee90007781f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/163362cf-7579-4d18-aaeb-1ee90007781f.png)'
- en: Drag the `background_blue` sprite from the Project panel (in the `Sprites` folder)
    into either the **Game** or **Hierarchy** panel to create a GameObject for the
    current scene. Set the `Position` of this GameObject to (`0`,`0`,`0`). It should
    completely cover the Game panel (at resolution `800 x 600`).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Project 面板（在 `Sprites` 文件夹中）将 `background_blue sprite` 拖动到 **Game** 或 **Hierarchy**
    面板中，以创建当前场景的 GameObject。将此 GameObject 的 `Position` 设置为 (`0`,`0`,`0`）。它应该完全覆盖游戏面板（分辨率为
    `800 x 600`）。
- en: 'Set the **Sorting Layer** of GameObject background-blue to **Background** (in
    the **Sprite Renderer** component):'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GameObject background-blue 的 **Sorting Layer** 设置为 **Background**（在 **Sprite
    Renderer** 组件中）：
- en: '![](img/b621c9a4-4585-4ce1-91e8-606e55b7fcb5.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b621c9a4-4585-4ce1-91e8-606e55b7fcb5.png)'
- en: 'Drag sprite star from the **Project** panel (in the `Sprites` folder) into
    either the **Game** or **Hierarchy** panel to create a GameObject for the current
    scene:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 sprite star 从 **Project** 面板（在 `Sprites` 文件夹中）拖动到 **Game** 或 **Hierarchy**
    面板中，以创建当前场景的 GameObject：
- en: Create a new tag, Star, and assign this tag to GameObject star (tags are created
    in the same way we created sorting layers).
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的标签，Star，并将此标签分配给 GameObject star（标签的创建方式与创建排序层相同）。
- en: Set the Sorting Layer of GameObject star to Foreground (in the Sprite Renderer
    component).
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 GameObject star 的排序层设置为前景（在 Sprite Renderer 组件中）。
- en: 'Add to GameObject star a Box Collider 2D (Add Component | Physics 2D | Box
    Collider 2D) and check Is Trigger, as shown in the screenshot:'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 GameObject star 添加一个 Box Collider 2D（添加组件 | Physics 2D | Box Collider 2D）并检查
    Is Trigger，如图所示：
- en: '![](img/ee263562-8258-4402-b467-879532053a6a.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ee263562-8258-4402-b467-879532053a6a.png)'
- en: Drag the girl1 sprite from the **Project** panel (in the `Sprites` folder) into
    either the **Game** or **Hierarchy** panel to create a GameObject for the player's
    character in the current scene. Rename this GameObject `player-girl1`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Project** 面板（在 `Sprites` 文件夹中）将 `girl1 sprite` 拖动到 **Game** 或 **Hierarchy**
    面板中，以在当前场景中创建玩家的角色 GameObject。将此 GameObject 重命名为 `player-girl1`。
- en: Set the Sorting Layer of GameObject `player-girl1` to Foreground.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GameObject `player-girl1` 的排序层设置为前景。
- en: Add a Physics | Box Collider 2D component to GameObject `player-girl1` .
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 GameObject `player-girl1` 添加一个 Physics | Box Collider 2D 组件。
- en: 'Add a Physics 2D | Rigid Body 2D component to GameObject `player-girl1` . Set
    its Gravity Scale to zero (so it isn''t falling down the screen due to simulated
    gravity), as shown in the screenshot:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 GameObject `player-girl1` 添加一个 Physics 2D | Rigid Body 2D 组件。将其重力比例设置为零（这样它就不会因为模拟重力而掉落屏幕），如图所示：
- en: '![](img/464d268b-9a25-45cf-9ba0-4742586b04d3.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/464d268b-9a25-45cf-9ba0-4742586b04d3.png)'
- en: Create a new folder for your scripts named `_Scripts`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的脚本创建一个新的文件夹名为 `_Scripts`。
- en: 'Create the following C# Script PlayerMove (in the `_Scripts` folder) and add
    an instance as a component to GameObject player-girl1 in the **Hierarchy**:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `_Scripts` 文件夹中创建以下 C# 脚本 PlayerMove，并将其作为组件添加到 **Hierarchy** 中的 GameObject
    player-girl1：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the scene (name it Main Scene and save it into a new folder named _Scenes).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存场景（命名为主场景并将其保存到名为 _Scenes 的新文件夹中）。
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have created a player character in the scene using the girl1 sprite, and
    added a scripted component instance of class `PlayerMove`. You have also created
    a star GameObject (a pickup), tagged Star and with a 2D box collider that will
    trigger a collision when the player's character hits it. When you run the game,
    the `player-girl1` character should move around using `W A S D`, the arrow keys,
    or joystick. There is a `newVelocity` variable, which is updated each frame in
    the `Update()` method based on the inputs. This `Vector2` value is then applied
    in the `FixedUpdate()` method to become the new velocity for the GameObject.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你在场景中使用了girl1精灵创建了一个玩家角色，并添加了一个`PlayerMove`类脚本的实例。你还创建了一个带有星号标签的星形GameObject（一个拾取物），它有一个2D盒子碰撞器，当玩家的角色碰到它时会触发碰撞。当你运行游戏时，`player-girl1`角色应该使用`W
    A S D`键、箭头键或摇杆来移动。存在一个`newVelocity`变量，它在`Update()`方法中根据输入每帧更新。然后这个`Vector2`值在`FixedUpdate()`方法中应用，成为GameObject的新速度。
- en: Unity maps user inputs such as key presses, arrow keys, and game controller
    controls to its `Input` class. Two special properties of the Input class are the
    Horizontal and Vertical axes – accessed via the `Input.GetAxis`("`Horizontal`")
    and `Input.GetAxis`("`Vertical`") methods.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Unity将用户输入（如按键、箭头键和游戏控制器控制）映射到其`Input`类。`Input`类的两个特殊属性是水平轴和垂直轴——通过`Input.GetAxis("Horizontal")`和`Input.GetAxis("Vertical")`方法访问。
- en: '**Managing your input mapping:** You can manage the mapping from different
    user input methods (keys, mouse, controllers, and so on) to the axes through menu: **Edit**
    | **Project Settings** | **Input**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**管理你的输入映射**：您可以通过菜单管理从不同的用户输入方法（键、鼠标、控制器等）到轴的映射：**编辑** | **项目设置** | **输入**'
- en: Currently, nothing will happen if the `player-SpaceGirl` character hits a star
    because that has yet to be scripted.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果`player-SpaceGirl`角色碰到星星，不会发生任何事情，因为这部分还没有被编写脚本。
- en: You have added a background (GameObject background-blue) to the scene, which
    will be behind everything since it is in the rearmost sorting layer, **Background**.
    Items you want to appear in front of the background (the player character and
    the star, so far) are placed on the **Foreground** sorting layer.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经向场景中添加了一个背景（GameObject background-blue），由于它位于最远的排序层**背景**，所以它将位于所有内容的后面。您希望出现在背景前面的项目（到目前为止是玩家角色和星星）被放置在**前景**排序层上。
- en: We can learn more about Unity tags and layers at [http://docs.unity3d.com/Manual/class-TagManager.html](http://docs.unity3d.com/Manual/class-TagManager.html).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[http://docs.unity3d.com/Manual/class-TagManager.html](http://docs.unity3d.com/Manual/class-TagManager.html)了解更多关于Unity标签和层次的信息。
- en: Displaying single object pickups with carrying and not-carrying text
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示携带和不携带文本的单个对象拾取物
- en: 'Often the simplest inventory situation is to display text to tell players whether
    they are carrying a single item (or not). We''ll add the ability to detect collisions
    with GameObject tagged **Star** to the SpaceGirl mini-game, and display an on-screen
    message stating whether a star has been collected or not:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最简单的库存情况是显示文本来告诉玩家他们是否携带了一个物品（或者没有）。我们将向SpaceGirl迷你游戏添加检测带有**星**标签的GameObject碰撞的能力，并在屏幕上显示一条消息，说明是否收集了星星：
- en: '![](img/47cd6ba6-5511-4d54-bcc3-8b980049f26c.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47cd6ba6-5511-4d54-bcc3-8b980049f26c.png)'
- en: At the end of the recipe, in the *There's more...* section, we'll learn to adapt
    this recipe to maintain an **Integer** total of how many stars have been collected,
    for a version of the game with lots of stars to collect.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在配方的末尾，在*还有更多...*部分，我们将学习如何调整此配方以维护收集星星的**整数**总数，适用于有很多星星可以收集的游戏版本。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared a folder named Fonts in the `03_02` folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们在`03_02`文件夹中准备了一个名为Fonts的文件夹。
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project that was set up from the first recipe in this chapter. So, make a copy
    of that project, and work on this copy.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方假设您是从本章的第一个配方中设置的`Simple2Dgame_SpaceGirl`项目开始的。因此，复制该项目，并在副本上工作。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To display text to inform the user about the status of carrying a single object
    pickup, follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示文本以通知用户携带单个拾取物的状态，请按照以下步骤操作：
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个新的`Simple2Dgame_SpaceGirl`迷你游戏副本开始。
- en: 'Add a UI Text object (**Create** | **UI** | **Text**). Rename it Text-carrying-star.
    Change its text to Carrying star: false.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '添加一个UI Text对象（**创建** | **UI** | **文本**）。将其重命名为Text-carrying-star。将其文本更改为Carrying
    star: false。'
- en: Import the provided Fonts folder into your project.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提供的Fonts文件夹导入到您的项目中。
- en: In the **Inspector** panel, set the font of Text-carrying-star to **Xolonium-Bold**,
    and set its color to yellow. Center the text horizontally and vertically, set
    its **Height** to `50`, and set the **Font Size** to `32`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中，将Text-carrying-star的字体设置为**Xolonium-Bold**，并将其颜色设置为黄色。水平垂直居中文本，将**高度**设置为`50`，并将**字体大小**设置为`32`。
- en: 'Edit its Rect Transform, and while holding down *Shift* + *Alt* (to set pivot
    and position), choose the top-stretch box:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑其Rect Transform，在按住*Shift* + *Alt*（以设置中心点和位置）的同时，选择顶部拉伸框：
- en: '![](img/93d7b082-58ea-4ac2-b06c-417d0d24aec4.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/93d7b082-58ea-4ac2-b06c-417d0d24aec4.png)'
- en: Your text should now be positioned at the middle top of the **Game** panel,
    and its width should stretch to match that of the whole panel, as shown in the
    screenshot in the introduction to this recipe.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的文本现在应位于**游戏**面板的中间顶部，其宽度应拉伸以匹配整个面板，如本食谱介绍中的截图所示。
- en: 'Create the following C# script class `PlayerInventory` in the `_Scripts` folder:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`_Scripts`文件夹中创建以下C#脚本类`PlayerInventory`：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create the following C# script class `PlayerInventoryDisplay` in the `_Scripts` folder:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`_Scripts`文件夹中创建以下C#脚本类`PlayerInventoryDisplay`：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add an instance of script-class `PlayerInventoryDisplay` to the player-SpaceGirl
    GameObject in the **Hierarchy**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中向`player-SpaceGirl`GameObject添加脚本类`PlayerInventoryDisplay`的实例。
- en: Note, since the `PlayerInventoryDisplay` class contains `RequireComponent(),`
    then an instance of script class `PlayerInventory` will be automatically added
    to GameObject `player-SpaceGirl.`
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于`PlayerInventoryDisplay`类包含`RequireComponent()`，因此会自动将脚本类`PlayerInventory`的实例添加到GameObject
    `player-SpaceGirl`中。
- en: From the **Hierarchy** view, select the `player-SpaceGirl` GameObject. Then,
    from the **Inspector**, access the Player Inventory Display (Script) component
    and populate the **Star Text** public field with GameObject Text-carrying-star,
    as shown in the screenshot.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**视图中选择`player-SpaceGirl`GameObject。然后，从**检查器**中访问玩家库存显示（脚本）组件，并将**星星文本**公共字段填充为GameObject
    Text-carrying-star，如截图所示。
- en: '![](img/4cc4e685-d15a-4492-a65b-abf72bd68271.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/4cc4e685-d15a-4492-a65b-abf72bd68271.png)'
- en: 'When you play the scene, after moving the character into the star, the star
    should disappear, and the onscreen **UI Text** message should change to Carrying
    star :-):'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '当您播放场景时，将角色移动到星星后，星星应该消失，屏幕上的**UI Text**消息应更改为Carrying star :-):'
- en: '![](img/8914a461-ea47-40b9-a487-b01e209ea333.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/8914a461-ea47-40b9-a487-b01e209ea333.png)'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You created a **UI Text** GameObject Text-carrying-star to display to the player
    a text message stating whether or not a star is being carried. You created two
    script classes, and an instance of each was added as a component to the player''s
    `player-SpaceGirl` character GameObject:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建了一个**UI Text** GameObject Text-carrying-star，用于向玩家显示一个文本消息，说明是否携带星星。您创建了两个脚本类，并将每个实例作为组件添加到玩家的`player-SpaceGirl`角色GameObject中：
- en: Script-class `PlayerInventory` detects player-star collisions, updates internal
    variables saying whether a star is carried, and asks for the UI display to be
    updated each time a collision is detected.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本类`PlayerInventory`检测玩家与星星的碰撞，更新内部变量以表示是否携带星星，并在检测到每次碰撞时请求更新UI显示。
- en: Script-class `PlayerInventoryDisplay` handles the communication to the user
    by updating the text message displayed by the Text-carrying-star UI Text GameObject.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本类`PlayerInventoryDisplay`通过更新Text-carrying-star UI Text GameObject显示的文本消息来处理与用户的通信。
- en: A game design pattern (best practice approach) called the **Model-View-Controller
    pattern** (**MVC**) separates the code that updates the UI from the code that
    changes player and game variables such as score and inventory item lists. Although
    this recipe has only one variable and one method for updating the UI, well-structured
    game architectures scale up to cope with more complex games, so it is often worth
    the effort of a little more code and an extra script class, even at this game-beginning
    stage, if we want our final game architecture to be well structured and maintainable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一种称为**模型-视图-控制器模式**（**MVC**）的游戏设计模式（最佳实践方法）将更新UI的代码与更改玩家和游戏变量（如分数和库存项目列表）的代码分开。尽管这个食谱只有一个变量和一个更新UI的方法，但良好的游戏架构可以扩展以应对更复杂的游戏，因此，即使在这个游戏开始阶段，如果我们要使最终的游戏架构具有良好的结构和可维护性，那么多写一些代码和额外的脚本类通常是值得的。
- en: One additional advantage of this design pattern is that the method in which
    the information is communicated to the user via the UI can be changed (for example,
    from text to an icon – see the next recipe!), without any change to the code in
    script class `PlayerInventory`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计模式的另一个优点是，将信息通过UI传达给用户的方法可以改变（例如，从文本到图标——见下一道菜谱！），而无需对脚本类`PlayerInventory`中的代码进行任何更改。
- en: The PlayerInventory script class
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩家库存脚本类
- en: The `playerInventoryDisplay` variable is a reference to an instance object of
    class `PlayerInventoryDisplay`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`playerInventoryDisplay`变量是对类`PlayerInventoryDisplay`的实例对象的引用。'
- en: The bool variable carryingStar represents whether or not the player is carrying
    the star at any point in time; it is initialized to false.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔变量`carryingStar`表示玩家在任何时候是否携带星星；它被初始化为false。
- en: '`Method Awake()` caches a reference to the sibling component `playerInventoryDisplay`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`Method Awake()`缓存了对兄弟组件`playerInventoryDisplay`的引用。'
- en: When the scene begins, via the `Start()` method, we call the `OnChangeCarryingStar(...)` method
    of script component `playerInventoryDisplay`, passing in the initial value of
    `carryingStar` (which is false). This ensures that we are not relying on text
    typed into the **UI Text** object Text-carrying-star at **Design-Time**, so that
    the UI seen by the user is always set by our **Run-Time** methods. This avoids
    problems where the words to be displayed to the user are changed in code and not
    in the **Inspector** panel – which leads to a mismatch between the onscreen text
    when the scene first runs and after it has been updated from a script.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当场景开始时，通过`Start()`方法，我们调用脚本组件`playerInventoryDisplay`的`OnChangeCarryingStar(...)`方法，传入`carryingStar`的初始值（为false）。这确保了我们不是依赖于在**设计时**输入到**UI
    Text**对象Text-carrying-star中的文本，因此用户看到的UI总是由我们的**运行时**方法设置的。这避免了在代码中而不是在**检查器**面板中更改要显示给用户的单词时出现的问题——这会导致场景首次运行时和从脚本更新后屏幕文本不匹配。
- en: A golden rule in Unity game design is to avoid duplicating content in more than
    one place, and, therefore, we avoid having to maintain two or more copies of the
    same content. Each duplicate is an opportunity for maintenance issues when some,
    but not all, copies of a value are changed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity游戏设计中，一个黄金法则是在一个以上的地方避免重复内容，因此我们避免需要维护相同内容的两个或多个副本。每个副本都是当某些但不是所有副本的值发生变化时可能出现维护问题的机会。
- en: Maximizing use of prefabs is another example of this principle in action. This
    is also know as the DRY principal – don't repeat yourself.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最大化使用预制件是这一原则在行动中的另一个例子。这也被称为DRY原则——不要重复自己。
- en: Each time the player's character collides with any object that has its Is **Trigger**
    set to true, an `OnTriggerEnter2D()` event message is sent to both objects involved
    in the collision. The `OnTriggerEnter2D()` message is passed as a parameter that
    is a reference to the `Collider2D` component inside the object just collided with.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 每当玩家的角色与任何将其**触发**设置为true的对象发生碰撞时，都会向碰撞涉及的双方对象发送`OnTriggerEnter2D()`事件消息。`OnTriggerEnter2D()`消息作为参数传递，该参数是刚刚碰撞的对象内部`Collider2D`组件的引用。
- en: 'Our player''s `OnTriggerEnter2D()` method tests the tag string of the object
    collided with to see whether it has the **Star** value. Since the GameObject star
    we created has its trigger set, and has the tag **Star**, the if statement inside
    this method will detect a collision with the star and complete the following three
    actions:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们玩家的`OnTriggerEnter2D()`方法测试与对象碰撞的标签字符串，以查看它是否有**星星**值。由于我们创建的GameObject星星设置了触发器，并且有标签**星星**，这个方法内部的if语句将检测与星星的碰撞并完成以下三个动作：
- en: The Boolean (flag) variable `carryingStar` is set to true
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔（标志）变量`carryingStar`被设置为true
- en: The method **OnChangeCarryingStar(...)** of script component **playerInventoryDisplay**
    is called, passing in the updated value of **carryingStar**
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本组件`playerInventoryDisplay`的`OnChangeCarryingStar(...)`方法被调用，传入`carryingStar`的更新值
- en: The GameObject just collided with is destroyed – that is, the star
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刚刚发生碰撞的GameObject被销毁——也就是说，星星
- en: Boolean variables are often referred to as flags.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔变量通常被称为标志。
- en: The use of a bool (true/false) variable to represent whether some feature of
    the game state is true or false is very common. Programmers often refer to these
    variables as flags. So, programmers might refer to the carryingStar variable as
    the star-carrying flag.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用布尔（true/false）变量来表示游戏状态中的某些功能是否为真或假是非常常见的。程序员通常将这些变量称为标志。因此，程序员可能会将carryingStar变量称为携带星星标志。
- en: The PlayerInventoryDisplay script class
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩家库存显示脚本类
- en: The public `Text` variable `starText` is a reference to the **UI Text** object
    Text-carrying-star. Its value has been set via drag-and-drop at design time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 公共`Text`变量`starText`是对**UI Text**对象Text-carrying-star的引用。其值已在设计时通过拖放设置。
- en: The `OnChangeCarryingStar`(carryingStar) method updates the text property of
    starText with the value of string variable `starMessage`. This method takes an
    input bool argument `carryingStar`. The default value of string `starMessage`
    tells the user that the player is not carrying the star, but an if statement tests
    the value of `carryingStar`, and, if that is true, then the message is changed
    to inform the player that they are carrying the star.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnChangeCarryingStar`(carryingStar)方法使用字符串变量`starMessage`的值更新starText的文本属性。此方法接受一个输入布尔参数`carryingStar`。字符串`starMessage`的默认值告诉用户玩家没有携带星星，但if语句测试`carryingStar`的值，如果为真，则消息将更改为通知玩家他们正在携带星星。'
- en: There's more...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Here are some details you won't want to miss.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些细节您可能不想错过。
- en: Collecting multiple items and display total number carried
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集多个物品并显示携带的总数
- en: Often there are pickups that the player can collect more than one of. In such
    situations, we can use an Integer to represent the total number collected, and
    use a UI Text object to display this total to the user. Let's modify the recipe
    to allow SpaceGirl to collect lots of stars!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，玩家可以收集多个拾取物品。在这种情况下，我们可以使用整数来表示收集的总数，并使用UI Text对象向用户显示此总数。让我们修改配方，让SpaceGirl能够收集大量的星星！
- en: '![](img/8897c7a4-4a47-4947-ba46-a95155071af0.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8897c7a4-4a47-4947-ba46-a95155071af0.png)'
- en: 'To convert this recipe to one that shows the total number of stars collected,
    do the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此配方转换为显示收集到的星星总数的配方，请执行以下操作：
- en: Make three or four more copies of the **star** GameObject and spread them around
    the scene. This gives the player several stars to collect rather than just one.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作三到四个额外的**星形**GameObject，并将它们分散在场景中。这样玩家可以收集多个星星，而不仅仅是收集一个。
- en: Use keyboard shortcut *Ctrl* + *D* (Windows) or *CMD* + *D* (Mac) to quickly
    duplicate GameObjects.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用键盘快捷键 *Ctrl* + *D*（Windows）或 *CMD* + *D*（Mac）快速复制GameObject。
- en: 'Change the contents of the C# script class `PlayerInventory` to contain the
    following:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将C#脚本类`PlayerInventory`的内容更改为以下内容：
- en: '[PRE3]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Change the contents of C# script class `PlayerInventoryDisplay` to contain
    the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将C#脚本类`PlayerInventoryDisplay`的内容更改为以下内容：
- en: '[PRE4]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, in `PlayerInventory` we now increment totalStars by 1 each time
    a star GameObject is collided with. In `PlayerInventoryDisplay` we display on
    screen a simple text message of "total stars = " followed by the integer total
    received by the method `OnChangeStarTotal(...)./`
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在`PlayerInventory`中，我们现在每次与星星GameObject发生碰撞时，将totalStars增加1。在`PlayerInventoryDisplay`中，我们在屏幕上显示一个简单的文本消息“total
    stars =”，后面跟着由`OnChangeStarTotal(...)`方法接收的整数总数。
- en: Now when you run the game you should see the total stars start at zero, and
    increase by 1 each time the player's character hits a star.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当您运行游戏时，应该看到星星总数从零开始，并且每次玩家的角色击中星星时，总数都会增加1。
- en: Alternative – combining all the responsibilities into a single script
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项 - 将所有责任合并到一个脚本中
- en: The separation of the player inventory (what they are carrying) and how to display
    the inventory to the user is an example of a game design pattern (best practice
    approach) called the **Model-View-Controller** (**MVC**) whereby we separate the
    code that updates the UI from the code that changes player and game variables
    such as score and inventory item lists. Although this recipe has only one variable
    and one method to update the UI, well-structured game architectures scale up to
    cope with more complex games, so it is often worth the effort of a little more
    code and an extra script class, even at this game's development, if we want our
    final game architecture to be well structured and maintainable.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家库存（他们携带的内容）与如何向用户显示库存的分离是游戏设计模式（最佳实践方法）的一个例子，称为**模型-视图-控制器**（**MVC**），其中我们将更新UI的代码与更改玩家和游戏变量（如分数和库存项目列表）的代码分开。尽管此配方只有一个变量和一个更新UI的方法，但良好的游戏架构可以扩展以应对更复杂的游戏，因此，如果我们要使最终游戏架构具有良好的结构和可维护性，那么编写更多代码和额外的脚本类通常是值得的。
- en: 'However, for *very simple games* we may choose to combine both status and display
    of that status in a single script class. For an example of this approach for this
    recipe, remove script components `PlayerInventory` and `PlayerInventoryDisplay`
    and create the following C# script class `PlayerInventoryCombined` and add an
    instance to GameObject `player-SpaceGirl` in the **Hierarchy**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于*非常简单的游戏*，我们可能会选择在单个脚本类中结合状态和该状态的显示。以本食谱中此方法的示例，移除脚本组件`PlayerInventory`和`PlayerInventoryDisplay`，并创建以下C#脚本类`PlayerInventoryCombined`，并将其实例添加到GameObject
    `player-SpaceGirl`的**层次结构**中：
- en: '[PRE5]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is no difference in the experience of the player, and the change is simply
    in the architectural structure of our game code.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家的体验没有区别，变化只是我们游戏代码的架构结构。
- en: Displaying single object pickups with carrying and not-carrying icons
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示携带和不携带图标的单个物体拾取
- en: 'Graphic icons are an effective way to inform the player that they are carrying
    an item. In this recipe, if no star is being carried, a gray-filled icon in a
    blocked-off circle is displayed in the top-left of the screen:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图形图标是通知玩家他们正在携带物品的有效方式。在本食谱中，如果没有携带星星，屏幕左上角将显示一个灰色填充的图标，位于封闭的圆圈中：
- en: '![](img/8325bea3-24c1-47ee-bf4c-acff231a4674.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8325bea3-24c1-47ee-bf4c-acff231a4674.png)'
- en: Then, after a star has been picked up, a yellow-filled star icon is displayed.
    In many cases, icons are clearer (they don't require reading and thinking about)
    and can also be smaller onscreen than text messages that indicate player status
    and inventory items.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在拾取到星星后，将显示一个黄色填充的星星图标。在许多情况下，图标比文本消息更清晰（它们不需要阅读和思考），并且可以在屏幕上比指示玩家状态和库存项目的文本消息更小。
- en: This recipe also illustrates the benefits of the MVC design pattern described
    in the previous recipe – we are changing how to communicate to the user (using
    the **View** via icons rather than text), but we can use, with no changes required,
    script class PlayerInventory (the **Model-Controller**), which detects player-star
    collisions and maintains the Boolean flag that tells us whether a star is being
    carried or not.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱还说明了前一个食谱中描述的MVC设计模式的益处——我们正在改变与用户通信的方式（通过图标而不是文本使用**视图**），但我们可以在无需更改的情况下使用脚本类PlayerInventory（**模型-控制器**），它检测玩家星星碰撞并维护一个布尔标志，告诉我们是否正在携带星星。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you are starting with the Simple2Dgame_SpaceGirl project set
    up in the first recipe in this chapter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您是从本章第一食谱中设置的Simple2Dgame_SpaceGirl项目开始的。
- en: For this recipe, we have prepared a folder named `_Scripts` in the `03_03` folder.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们在`03_03`文件夹中准备了一个名为`_Scripts`的文件夹。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To toggle carrying and not-carrying icons for a single object pickup, follow
    these steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换单个物体拾取的携带和不携带图标，请按照以下步骤操作：
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Simple2Dgame_SpaceGirl`迷你游戏的新副本开始。
- en: Import the `_Scripts` folder from the provided files (this contains a copy of
    the script class `PlayerInventory` from the previous recipe, which we can use
    unchanged for this recipe).
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从提供的文件中导入`_Scripts`文件夹（这包含从上一个食谱中复制的脚本类`PlayerInventory`，我们可以将其原封不动地用于本食谱）。
- en: Add to the scene a **UI Image** object (**Create** | **UI** | **Image**). Rename
    it `Image-star-icon`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中添加一个**UI Image**对象（**创建** | **UI** | **Image**）。将其重命名为`Image-star-icon`。
- en: With Image-star-icon selected in the **Hierarchy**, drag the `icon_nostar_100`
    sprite (in the `Sprites` folder) from the **Project** panel into the **Source
    Image** field in the **Inspector** (in the Image (Script) component).
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择Image-star-icon，将`icon_nostar_100`精灵（在`Sprites`文件夹中）从**项目**面板拖到**检查器**（在Image（脚本）组件中的**源图像**字段）。
- en: 'Click on the **Set Native Size** button for the **Image** component. This will
    resize the **UI Image** to fit the physical pixel width and height of the `icon_nostar_100`
    sprite file:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**图像**组件的**设置原生大小**按钮。这将调整**UI Image**的大小以适应`icon_nostar_100`精灵文件的实际像素宽度和高度：
- en: '![](img/eb577c82-34fe-48a1-8ca4-bb647df529bb.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb577c82-34fe-48a1-8ca4-bb647df529bb.png)'
- en: Position the image icon at the top and left of the Game panel, in Rect Transform.
    Choose the top-left box component while holding down *SHIFT* and *ALT* (to set
    pivot and position).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像图标放置在游戏面板的顶部和左侧，在Rect Transform中。在按住*SHIFT*和*ALT*的同时选择左上方的框组件（以设置枢轴和位置）。
- en: 'Create the following C# Script class PlayerInventoryDisplay and add an instance
    to GameObject player-SpaceGirl in the Hierarchy:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下C#脚本类PlayerInventoryDisplay，并将其实例添加到Hierarchy中的GameObject player-SpaceGirl：
- en: '[PRE6]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From the Hierarchy view, select the GameObject player-SpaceGirl. Then, from
    the Inspector, access the PlayerInventoryDisplay (Script) component and populate
    the Star Image public field with UI Image object Image-star-icon.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层级视图中选择 GameObject player-SpaceGirl。然后，从检查器中访问 PlayerInventoryDisplay（脚本）组件，并将星图像公共字段填充为
    UI Image 对象 Image-star-icon。
- en: 'Populate the Icon No Star public field from the Project panel with the `icon_nostar_100` sprite,
    and then populate the Icon Star public field from the Project panel with the `icon_star_100`
    sprite, as shown in the screenshot:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目面板中将 `icon_nostar_100` 精灵填充到图标无星公共字段中，然后从项目面板中将 `icon_star_100` 精灵填充到图标星公共字段中，如图所示：
- en: '![](img/60355ab6-8a60-44ee-be1f-69d1b0ed20d8.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60355ab6-8a60-44ee-be1f-69d1b0ed20d8.png)'
- en: Play the scene. You should see the no star icon (a gray-filled icon in a blocked-off
    circle) in the top left until you pick up the star, at which point it will change
    to show the carrying star icon (yellow-filled star).
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。你应该在左上角看到无星图标（一个在封闭圆圈中的灰色填充图标），直到你拾取星，此时它将变为显示携带星图标（黄色填充星）。
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the script class `PlayerInventoryDisplay` the Image variable `imageStarGO`
    is a reference to the UI Image object `Image-star-icon`. The sprite variables
    `iconStar` and `iconNoStar` are references to the Sprite files in the Project
    panel - the sprites to tell the player whether or not a star is being carried.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本类 `PlayerInventoryDisplay` 中，图像变量 `imageStarGO` 是对 UI Image 对象 `Image-star-icon`
    的引用。精灵变量 `iconStar` 和 `iconNoStar` 是对项目面板中 Sprite 文件的引用 - 这些精灵用于告诉玩家是否携带了星。
- en: Each time method `OnChangeCarryingStar(carryingStar)` is invoked by the `PlayerInventory`
    object, this method uses an `if` statement to set the **UI Image** to the sprite
    that corresponds to the value of the bool argument received.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 `PlayerInventory` 对象调用方法 `OnChangeCarryingStar(carryingStar)` 时，此方法使用 `if`
    语句将 **UI Image** 设置为与接收到的 bool 参数值对应的精灵。
- en: Displaying multiple pickups of the same object with multiple status icons
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个状态图标显示同一对象的多个拾取
- en: If there is a small, fixed total number of an item to be collected rather than
    text totals, an effective UI approach is to display placeholder icons (empty or
    grayed out pictures) to show the user how many of the item remain to be collected,
    and each time an item is picked up, a placeholder icon is replaced by a full color
    collected icon.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要收集的项目有一个小的、固定的总数而不是文本总数，一个有效的 UI 方法是显示占位符图标（空或灰色图片）来显示用户还有多少个此类项目需要收集，并且每次拾取一个项目时，占位符图标就会被一个全色收集图标所替换。
- en: 'In this recipe, we use gray-filled star icons as the placeholders and yellow-filled
    star icons to indicate each collected star, as shown in the screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用灰色填充的星形图标作为占位符，并使用黄色填充的星形图标来表示每个收集到的星，如图所示：
- en: '![](img/458361ac-c050-4586-969e-e298a1fd8d5c.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/458361ac-c050-4586-969e-e298a1fd8d5c.png)'
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project set up in the first recipe in this chapter.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱假设您是从本章第一个菜谱中设置的 `Simple2Dgame_SpaceGirl` 项目开始的。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To display multiple inventory icons for multiple pickups of same type of object,
    follow these steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示多个拾取的同一类型对象的库存图标，请按照以下步骤操作：
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个新的 `Simple2Dgame_SpaceGirl` 小游戏副本开始。
- en: 'Create C# Script class `PlayerInventory` in the `_Scripts` folder:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `_Scripts` 文件夹中创建 C# 脚本类 `PlayerInventory`：
- en: '[PRE7]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Select the GameObject star in the **Hierarchy** panel and make three more copies
    of this GameObject. There are now four star GameObjects in the scene. Move these
    new star GameObjects to different parts of the screen.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层级** 面板中选择 GameObject 星，然后复制此 GameObject 三次。现在场景中有四个星 GameObject。将这些新的星
    GameObject 移动到屏幕的不同部分。
- en: 'Add the following C# Script `PlayerInventoryDisplay` to the GameObject `player-SpaceGirl`
    in the **Hierarchy**:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 C# 脚本 `PlayerInventoryDisplay` 添加到 GameObject `player-SpaceGirl` 中（**层级**）：
- en: '[PRE8]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Select the Canvas in the Hierarchy panel and add a new UI Image object (Create
    | UI | Image). Rename it Image-star0.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中选择画布，并添加一个新的 UI Image 对象（创建 | UI | 图像）。将其重命名为 Image-star0。
- en: Select Image-star0 in the Hierarchy panel.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中选择 Image-star0。
- en: From the Project panel, drag the sprite `icon_star_grey_100` (in the Sprites
    folder) into the Source Image field in the Inspector for the Image (Script) component.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目面板中，将精灵 `icon_star_grey_100`（在 Sprites 文件夹中）拖动到图像（脚本）组件的检查器中的源图像字段。
- en: Click on the Set Native Size button for this for the Image (Script) component.
    This will resize the UI Image to fit the physical pixel width and height of sprite
    file `icon_star_grey_100`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此图像（脚本）组件的“设置原生大小”按钮。这将调整 UI 图像的大小以适应精灵文件 `icon_star_grey_100` 的物理像素宽度和高度。
- en: Now we will position our icon at the top-left of the Game panel. Edit the UI
    Image's Rect Transform component, and while holding down *Shift* + *Alt* (to set
    pivot and position), choose the top-left box. The UI Image should now be positioned
    at the top left of the Game panel.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将图标放置在游戏面板的左上角。编辑 UI 图像的 Rect Transform 组件，在按住 *Shift* + *Alt*（设置枢轴和位置）的同时，选择左上角的框。现在
    UI 图像应该位于游戏面板的左上角。
- en: Make three more copies of Image-star0 in the Hierarchy panel, naming them Image-star1,
    Image-star2, and Image-star3.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中复制 Image-star0 三个更多次，命名为 Image-star1、Image-star2 和 Image-star3。
- en: 'In the Inspector panel, change the Pos X position (in the Rect Transform component)
    of Image-star1 to `100`, of Image-star2 to `200`, and of Image-star3 to `300`:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将 Image-star1 的 Pos X 位置（在 Rect Transform 组件中）更改为 `100`，将 Image-star2
    更改为 `200`，将 Image-star3 更改为 `300`：
- en: '![](img/1aae7d83-99c9-4d6b-81b8-8072835d454e.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1aae7d83-99c9-4d6b-81b8-8072835d454e.png)'
- en: In the **Hierarchy**, select the GameObject player-SpaceGirl. Then, from the
    **Inspector**, access the **Player Inventory Display** (Script) component and
    set the Size property of the public field Star Placeholders to `4`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 中选择 GameObject player-SpaceGirl。然后，从 **检查器** 中访问 **Player Inventory
    Display**（脚本）组件，并将公共字段 Star Placeholders 的 Size 属性设置为 `4`。
- en: Next, populate the Element 0/1/2/3 array values of public field **Star Placeholders**
    with **UI Image** objects Image-star0/1/2/3.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，用 **UI 图像** 对象 Image-star0/1/2/3 填充公共字段 **Star Placeholders** 的 Element
    0/1/2/3 数组值。
- en: 'Now, populate the Icon **Star Yellow** and **Icon Star Grey** public fields
    from the Project panel with sprite `icon_star_100` and `icon_star_grey_100`, as
    shown in the screenshot:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从项目面板中用精灵 `icon_star_100` 和 `icon_star_grey_100` 填充图标 **Star Yellow** 和 **Icon
    Star Grey** 公共字段，如图所示：
- en: '![](img/3265c7b4-d3d7-423f-b3c8-7db0511c8d5c.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3265c7b4-d3d7-423f-b3c8-7db0511c8d5c.png)'
- en: Now, when you play the scene, you should see the sequence of four gray placeholder
    star icons initially, and each time you collide with a star, the next icon at
    the top should turn yellow.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你播放场景时，你应该首先看到四个灰色的占位星形图标，每次你撞击一个星形时，顶部下一个图标应该变为黄色。
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Four **UI Image** objects Image-star0/1/2/3 have been created at the top of
    the screen — initialized with the gray placeholder icon. The gray and yellow icon
    sprite files have been resized to be 100 x 100 pixels, making their horizontal
    arrangement positioning at design time easier, since their positions are (0,0),
    (100,0), (200,0), and (300,0). In a more complicated game screen, or one where
    real estate is precious, the actual size of the icons would probably be smaller
    – a decision to be made by the game graphic designer.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 四个**UI 图像**对象 Image-star0/1/2/3 已在屏幕顶部创建 — 使用灰色占位图标初始化。灰色和黄色图标精灵文件已调整大小为 100
    x 100 像素，这使得在设计时它们的水平排列定位更容易，因为它们的坐标是 (0,0)，(100,0)，(200,0) 和 (300,0)。在一个更复杂的游戏屏幕，或者一个房地产宝贵的场景中，图标的实际大小可能会更小
    — 这是一个由游戏图形设计师做出的决定。
- en: In script class `PlayerInventory`, the int variable `totalStars` represents
    how many stars have been collected so far; it is initialized to zero. The variable
    `playerInventoryDisplay` is a reference to the scripted component that manages
    our inventory display – this variable is cached before the scene begins in the
    `Awake()` method.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本类 `PlayerInventory` 中，int 变量 `totalStars` 表示到目前为止收集了多少颗星；它初始化为零。变量 `playerInventoryDisplay`
    是指向管理我们的库存显示的脚本组件的引用 — 这个变量在场景开始之前在 `Awake()` 方法中缓存。
- en: The `Start()` method that runs at the beginning of the scene, calls the `OnChangeStarTotal(...)`
    method of the `PlayerInventoryDisplay` component to ensure that the icons on screen
    are displayed to match the starting value of totalStars.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景开始时运行的 `Start()` 方法调用 `PlayerInventoryDisplay` 组件的 `OnChangeStarTotal(...)`
    方法，以确保屏幕上的图标显示与 totalStars 的起始值相匹配。
- en: In the `OnTriggerEnter2D()` method, the totalStars counter is incremented by
    1 each time the player's character hits an object tagged Star. As well as destroying
    the hit GameObject, the `OnChangeStarTotal(...)` method of the `PlayerInventoryDisplay`
    component is called, passing the new star total integer.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `OnTriggerEnter2D()` 方法中，每当玩家的角色撞击带有 Star 标签的对象时，totalStars 计数器增加 1。除了销毁被击中的
    GameObject，还会调用 `PlayerInventoryDisplay` 组件的 `OnChangeStarTotal(...)` 方法，传递新的星形总数整数。
- en: The `OnChangeStarTotal(...)` method of script class `PlayerInventoryDisplay`
    has references to the four **UI Images**, and loops through each item in the array
    of Image references, setting the given number of images to yellow, and the remaining
    to gray. This method is public, allowing it to be called from an instance of script
    class `PlayerInventory`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本类 `PlayerInventoryDisplay` 的 `OnChangeStarTotal(...)` 方法引用了四个 **UI 图像**，并遍历图像引用数组中的每个项目，将指定数量的图像设置为黄色，其余的设置为灰色。此方法为公共方法，允许从脚本类
    `PlayerInventory` 的实例中调用。
- en: There's more...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here are some details you don''t want to miss:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些细节你不希望错过：
- en: Revealing icons for multiple object pickups by changing the size of a tiled
    image
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过改变平铺图像的大小来揭示多个对象拾取的图标
- en: Another approach that could be taken to show increasing numbers of images is
    to make use of tiled images. The same visual effect as in the previous recipe
    can also be achieved by making use of a tiled gray star image of width 400 (showing
    four copies of the gray star icon), behind a tiled yellow star image, whose width
    is 100 times the number of stars collected.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可以采取的方法来显示越来越多的图像是使用平铺图像。通过使用宽度为 400 的平铺灰色星星图像（显示灰色星星图标的四个副本），在平铺黄色星星图像后面，其宽度是收集到的星星数量的
    100 倍，也可以达到与之前食谱中相同的视觉效果。
- en: If the yellow-starred image is less wide that the gray starred imaged beneath
    then we'll see gray stars for any remaining locations. For example, if we are
    carrying 3 stars, we'll make the width of the yellow-starred image 3 x 100 = 300
    pixels wide. This will show 3 yellow stars and reveal 100 pixels, that is, 1 gray
    star, from the gray starred image beneath it.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果黄色星星图像的宽度小于下面的灰色星星图像，那么我们将看到任何剩余位置的灰色星星。例如，如果我们携带 3 个星星，我们将使黄色星星图像的宽度为 3 x
    100 = 300 像素宽。这将显示 3 个黄色星星，并从下面的灰色星星图像中露出 100 像素，即 1 个灰色星星。
- en: 'To display grey and yellow star icons for multiple object pickups using tiled
    images, let''s adapt our recipe to illustrate this technique by following these
    steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用平铺图像显示多个对象拾取的灰色和黄色星星图标，让我们通过以下步骤调整我们的食谱，通过以下步骤说明这项技术：
- en: In the **Hierarchy** panel, delete the entire **Canvas** GameObject (and therefore
    delete all four **UI Images**).
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次** 面板中，删除整个 **画布** GameObject（因此删除所有四个 **UI 图像**）。
- en: Add to your scene a new **UI Image** object (**Create** | **UI** | **Image**).
    Rename the GameObject Image-stars-gray.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的场景中添加一个新的 **UI 图像** 对象（**创建** | **UI** | **图像**）。将 GameObject 重命名为 Image-stars-gray。
- en: Ensure Image-stars-gray is selected in the **Hierarchy**. From the **Project**
    panel, drag sprite `icon_star_grey_100` (in the Sprites folder) into the **Source
    Image** field in the **Inspector** (in the **Image (Script)** component).
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 **层次** 中选择 Image-stars-gray。从 **项目** 面板，将 Sprites 文件夹中的精灵 `icon_star_grey_100`
    拖动到检查器（在 **图像（脚本）** 组件中）的 **源图像** 字段。
- en: Click on the **Set Native Size** button for this for the Image (Script) component.
    This will resize the **UI Image** to fit the physical pixel width and height of
    sprite file `icon_star_grey_100`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此图像（脚本）组件的 **设置原生大小** 按钮。这将调整 **UI 图像** 以适应精灵文件 `icon_star_grey_100` 的物理像素宽度和高度。
- en: Now position the icon at the **top** and **left** of the screen. Edit the **UI
    Image's** **Rect** **Transform** component, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the top-left box. The UI Image should now be positioned
    at the top left of the **Game** panel.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将图标放置在屏幕的 **顶部** 和 **左侧**。编辑 **UI 图像的** **矩形** **变换** 组件，在按住 *Shift* + *Alt*（以设置枢轴和位置）的同时，选择左上角的框。现在
    UI 图像应该位于 **游戏** 面板的左上角。
- en: 'In the Inspector panel, change the **Width** (in the Rect Transform component)
    of Image-stars-grey to `400`. Also, set the **Image Type** (in the **Image (Script)**
    component) to **Tiled**, as shown in the following screenshot:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将 Image-stars-grey 的 **宽度**（在矩形变换组件中）更改为 `400`。同时，将 **图像类型**（在 **图像（脚本）**
    组件中）设置为 **平铺**，如图所示：
- en: '![](img/6007c4cf-2c62-4bbc-824a-dcd34e83b481.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6007c4cf-2c62-4bbc-824a-dcd34e83b481.png)'
- en: For a simple game like this, we are choosing simplicity over memory efficiency.
    You'll see a notice suggesting using an advanced texture with Wrap mode repeat
    and a cleared packing tag. While more memory efficient, it's more complicated
    to do for small, simple tiling such as in this recipe.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样一个简单的游戏，我们选择简洁而不是内存效率。你会看到一个提示，建议使用具有 Wrap 模式重复和清除打包标签的高级纹理。虽然更节省内存，但对于像这个食谱中这样的小而简单的平铺来说，操作会更复杂。
- en: Make a copy of Image-stars-grey in the **Hierarchy** panel, naming the copy
    **Image-stars-yellow**.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层级**面板中复制Image-stars-grey，并将其命名为**Image-stars-yellow**。
- en: With Image-stars-yellow selected in Hierarchy panel, from the **Project** panel,
    drag the sprite `icon_star_100` (in the `Sprites` folder) into the **Source Image**
    field in the Inspector (in the **Image (Script)** component).
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中选择**Image-stars-yellow**后，从**项目**面板中，将精灵`icon_star_100`（位于` Sprites`文件夹中）拖动到检查器（位于**图像（脚本）**组件中）的**源图像**字段。
- en: Set the width of Image-stars-yellow to 0 (in the **Rect Transform** component).
    So, now we have the yellow stars tiled image above the grey tiled image, but since
    its width is zero, we don't see any of the yellow stars yet.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Image-stars-yellow的宽度设置为0（在**矩形变换**组件中）。因此，现在我们有了黄色星星平铺图像在灰色平铺图像之上，但由于其宽度为零，我们目前看不到任何黄色星星。
- en: 'Replace the existing C# script `PlayerInventoryDisplay` with the following
    code:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换现有的C#脚本`PlayerInventoryDisplay`：
- en: '[PRE9]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: From the **Hierarchy** view, select the GameObject player-SpaceGirl. Then, from
    the **Inspector**, access the **Player Inventory Display** **(Script)** component
    and populate the Icons Stars Yellow public field with UI Image object Image-stars-yellow.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层级**视图中选择GameObject player-SpaceGirl。然后，从**检查器**中访问**玩家库存显示** **（脚本）**组件，并将UI图像对象Image-stars-yellow填充到图标星星黄色公共字段中。
- en: UI Image Image-stars-gray is a tiled image, wide enough (`400px`) for the gray
    sprite `icon_star_grey_100` to be shown four times. UI Image Image-stars-yellow
    is a tiled image, above the grey one, initially with width set to zero, so no
    yellow stars can be seen.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: UI图像Image-stars-gray是一个平铺图像，宽度足够（`400px`）以显示灰色精灵`icon_star_grey_100`四次。UI图像Image-stars-yellow是一个平铺图像，位于灰色图像之上，初始宽度设置为零，因此看不到任何黄色星星。
- en: Each time a star is picked up, a call is made from the `PlayerInventory` scripted
    object to the `OnChangeStarTotal()` method of the script component `PlayerInventoryDisplay`,
    passing the new integer number of stars collected. By multiplying this by the
    width of the yellow sprite image (100 px), we get the correct width to set for
    **UI Image** Image-stars-yellow so that the corresponding number of yellow stars
    will now be seen by the user. Any stars that remain to be collected will still
    be seen as the grey stars that are not yet covered up.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 每次拾取一颗星星时，都会从`PlayerInventory`脚本对象调用脚本组件`PlayerInventoryDisplay`的`OnChangeStarTotal()`方法，传递收集到的新的整数星星数量。通过将这个数字乘以黄色精灵图像的宽度（100
    px），我们得到为**UI图像**Image-stars-yellow设置的正确宽度，以便用户现在可以看到相应的黄色星星数量。任何尚未收集的星星仍然会以尚未覆盖的灰色星星的形式出现。
- en: The actual task of changing the width of UI Image Image-stars-yellow is completed
    by calling the `SetSizeWithCurrentAnchors(...)` method. The first parameter is
    the axis, so we pass the constant `RectTransform.Axis.Horizontal` so that it will
    be the width that is changed. The second parameter is the new size for that axis,
    so we pass a value that is 100 times the number of stars collected so far (the
    variable `newWidth`).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，通过调用`SetSizeWithCurrentAnchors(...)`方法来完成更改UI图像Image-stars-yellow宽度的任务。第一个参数是轴，因此我们传递常量`RectTransform.Axis.Horizontal`，以便它将更改宽度。第二个参数是那个轴的新大小，因此我们传递一个值，它是迄今为止收集的星星数量的100倍（变量`newWidth`）。
- en: Using panels to visually outline the inventory UI area and individual items
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用面板来视觉上勾勒出库存UI区域和单个项目。
- en: 'We see four kinds of objects when playing a game:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩游戏时，我们会看到四种类型的对象：
- en: GameObjects that have some visual elements, such as 2D and 3D objects.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有某些视觉元素的游戏对象，例如2D和3D对象。
- en: UI elements located in **World Space**, so they appear next to GameObjects in
    the scene.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于**世界空间**中的UI元素，因此它们出现在场景中的GameObject旁边。
- en: UI elements located in **Screen Space** - **Camera**, so they appear at a fixed
    distance from the camera (but can be obscured by GameObjects closer to the camera
    than these UI elements).
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于**屏幕空间** - **相机**中的UI元素，因此它们出现在与相机固定距离的位置（但可能被比这些UI元素更靠近相机的GameObject遮挡）。
- en: UI elements located in **Screen Space** - **Overlay**. These always appear above
    the other three kinds of visual element, and are perfect for **Head Up Display**
    (**HUD**) elements, such as inventories.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于**屏幕空间** - **叠加层**中的UI元素。这些总是出现在其他三种视觉元素之上，非常适合**抬头显示**（**HUD**）元素，例如库存。
- en: Sometimes we want to visually make it clear which elements are part of the UI
    HUD and which are visual objects in the scene. Unity **UI Panels** with an opaque
    or translucent background image are a simple and effective way to achieve this.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们希望从视觉上清楚地表明哪些元素是UI HUD的一部分，哪些是场景中的视觉对象。Unity中的**UI面板**带有不透明或半透明背景图像，这是一种简单而有效的方法来实现这一点。
- en: '![](img/63f5bed4-4c57-4ebc-b0a7-e53313067b05.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63f5bed4-4c57-4ebc-b0a7-e53313067b05.png)'
- en: Panels can also be used to display locations (slots) with shaped or colored
    backgrounds indicating where items may be placed, or how many may be collected.
    As shown in the screenshot, in this recipe we'll create a panel with some title
    text, and three inventory slots, two of which will be filled with star icons,
    communicating to the player that there is one more star that could be collected/carried.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 面板还可以用于显示带有形状或颜色背景的位置（槽位），指示物品可能放置的位置或可以收集的数量。如图所示，在本食谱中，我们将创建一个带有一些标题文本的面板和三个库存槽位，其中两个槽位将填充星星图标，向玩家传达还有一颗星星可以收集/携带。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project set up in the first recipe in this chapter. The font you need can be found
    in the `03_02` folder.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您正在使用本章第一个食谱中设置的`Simple2Dgame_SpaceGirl`项目。所需的字体可以在`03_02`文件夹中找到。
- en: How to do it...
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To use panels to visually outline the inventory area and individual items,
    follow these steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用面板从视觉上勾勒出库存区域和单个项目，请按照以下步骤操作：
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个新的`Simple2Dgame_SpaceGirl`迷你游戏副本开始。
- en: In the **Hierarchy** panel, create a **UI Panel** (**Create** | **UI** | **Panel**)
    and rename it Panel-background.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**面板中，创建一个**UI面板**（**创建** | **UI** | **面板**），并将其重命名为Panel-background。
- en: Let's now position Panel-background at the top of the Game panel, stretching
    the horizontal width of the canvas. Edit the UI **Image's Rect Transform** component,
    and while holding down *Shift* + *Alt* (to set pivot and position), choose the
    top-stretch box.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将Panel-background放置在游戏面板的顶部，拉伸画布的水平宽度。编辑UI **Image的Rect Transform**组件，在按住*Shift*
    + *Alt*（以设置中心点和位置）的同时，选择顶部拉伸框。
- en: The panel will still be taking up the whole game window. Now, in the **Inspector**,
    change the **Height** (in the **Rect Transform** component) of Panel-background
    to 100.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 面板仍然会占据整个游戏窗口。现在，在**检查器**中，将Panel-background的**高度**（在**Rect Transform**组件中）更改为100。
- en: Add a UI Text object (**Create** | **UI** | **Text**), rename it **Text-inventory**.
    For its Text (Script) component, change the text to Inventory.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个UI Text对象（**创建** | **UI** | **文本**），并将其重命名为Text-inventory。对于其Text（脚本）组件，将文本更改为Inventory。
- en: In the Hierarchy panel, child **UI Text** object **Text-inventory** to panel
    Panel-background.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**面板中，将子**UI Text**对象Text-inventory添加到Panel-background面板中。
- en: In the **Inspector panel**, also set the font of Text-inventory to Xolonium-Bold
    (the Fonts folder). Center the text horizontally, for Alignment choose vertical
    center, set its **Height** to 50, and set the **Font Size** to 23.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器面板**中，还将Text-inventory的字体设置为Xolonium-Bold（在字体文件夹中）。水平居中文本，对于对齐选择垂直居中，将其**高度**设置为50，并将**字体大小**设置为23。
- en: Edit the **Rect Transform** of Text-inventory, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the top-stretch box. The text should now be positioned
    at the top-center of the UI Panel object Panel-background, and its width should
    stretch to match that of the whole panel.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑Text-inventory的**Rect Transform**，在按住*Shift* + *Alt*（以设置中心点和位置）的同时，选择顶部拉伸框。现在文本应位于UI面板对象Panel-background的顶部中心，其宽度应拉伸以匹配整个面板。
- en: The text should now be positioned at the top-center of the UI Panel object Panel-background
    and its width should stretch to match that of the whole panel.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在文本应位于UI面板对象Panel-background的顶部中心，其宽度应拉伸以匹配整个面板。
- en: Create a new UI Panel (**Create** | **UI** | **Panel**) and rename it Panel-inventory-slot.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的UI面板（**创建** | **UI** | **面板**），并将其重命名为Panel-inventory-slot。
- en: 'Edit the Rect Transform of Panel-inventory-slot, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the top-center box. Set both the Width and Height
    to `70`, and the Pos Y to `-30`. See the following screenshot:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑Panel-inventory-slot的Rect Transform，在按住*Shift* + *Alt*（以设置中心点和位置）的同时，选择顶部中心框。将宽度和高度都设置为`70`，并将Pos
    Y设置为`-30`。请参见以下截图：
- en: '![](img/b23be950-c43f-4e56-bbab-fe05e6f2afaa.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b23be950-c43f-4e56-bbab-fe05e6f2afaa.png)'
- en: 'Ensure GameObject Panel-inventory-slot is selected in the Hierarchy. In the
    Image (Script) component change the Source Image from the **UI Panel** default
    of Background to the circular **Knob** image (this is one of the built-in images
    that come as part of the Unity UI system). As shown in the following screenshot,
    you should now see a circle centered below the title text in our inventory HUD
    rectangle. This circle visually tells the user that there is space in the inventory
    for an item to be collected:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 Hierarchy 中选择了 GameObject Panel-inventory-slot。在图像（脚本）组件中，将源图像从 **UI 面板**的默认背景更改为圆形
    **旋钮**图像（这是 Unity UI 系统内置的图像之一）。如图所示，你现在应该在我们的库存 HUD 矩形区域的标题文本下方看到一个圆形。这个圆形从视觉上告诉用户，库存中有一个可以收集物品的空间：
- en: '![](img/5f4728fd-bf47-449b-8682-12ab388f57e3.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5f4728fd-bf47-449b-8682-12ab388f57e3.png)'
- en: Imagine the player has collected a star. Let's now add (inside our inventory
    slot circle panel) a yellow star icon image. Add to the scene a UI Image object
    (**Create** | **UI** | **Image**). Rename it Image-icon. Child GameObject **Image-icon**
    to the panel Panel-inventory-slot.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 想象一下玩家已经收集了一个星星。现在让我们在我们的库存槽圆圈面板中添加一个黄色星星图标图像。向场景中添加一个 UI 图像对象（**创建** | **UI**
    | **图像**）。将其重命名为 Image-icon。将子 GameObject **Image-icon** 添加到面板 Panel-inventory-slot。
- en: Child GameObjects can be hidden making the GameObject **inactive**. By creating
    a new **UI Image** GameObject for our star icon, and adding it as a child of our
    Panel-inventory-slot GameObject, we can now display the star icon when the **Image**
    is enabled and hide it by making it inactive. This is a general approach, which
    means as long as we have a reference to the **Image** GameObject, we don't have
    to do extra work swapping images as we had to do in some of the previous recipes.
    This means we can begin to write more general-purpose code that will work with
    different inventory panels for keys, stars, money, and so on.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 子 GameObject 可以通过将其设置为 **不活动** 来隐藏。通过为我们的星星图标创建一个新的 **UI 图像** GameObject，并将其添加为
    Panel-inventory-slot GameObject 的子项，我们现在可以在 **图像**被启用时显示星星图标，通过使其不活动来隐藏它。这是一个通用方法，这意味着只要我们有
    **图像** GameObject 的引用，我们就不必像在之前的某些食谱中那样进行额外的图像交换工作。这意味着我们可以开始编写更通用的代码，该代码将适用于不同的库存面板，如钥匙、星星、金钱等。
- en: With Image-icon selected in the **Hierarchy**, drag the sprite `icon_star_100`
    (in the `Sprites` folder) from the **Project** panel into the **Source Image**
    field in the Inspector (in the **Image (Script**) component).
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 中选择 Image-icon，将精灵 `icon_star_100`（在 `Sprites` 文件夹中）从 **项目**面板拖动到检查器（在
    **图像（脚本**）组件）中的 **源图像**字段。
- en: Edit the **Rect Transform** of Image-icon, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the stretch-stretch box. The star icon should
    now be stretched the perfect size to fit inside the `70x70` parent panel, so we
    see a star inside the circle.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 Image-icon 的 **矩形变换**，在按住 *Shift* + *Alt*（以设置枢轴和位置）的同时，选择拉伸-拉伸框。现在星星图标应该被拉伸到完美的大小，以适应
    `70x70` 的父面板，所以我们看到圆圈内的星星。
- en: '![](img/f48f5552-6b5b-4003-9eee-087f33cab456.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f48f5552-6b5b-4003-9eee-087f33cab456.png)'
- en: Save and run the scene and play the game. You should see a clearly defined rectangle
    at the top of the screen, with the title text Inventory. Inside the inventory
    rectangular area you can see a circular slot, currently showing a star.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行场景并玩游戏。你应该在屏幕顶部看到一个清晰定义的矩形，其中包含标题文本 Inventory。在库存矩形区域内，你可以看到一个圆形槽，目前显示一个星星。
- en: Let's display 3 slots to the player. First, change the Pos X horizontal position
    of panel Panel-inventory-slot to -70\. This moves it left of center, making space
    for the next one, and allowing us to center the three slots when we've finished.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们向玩家显示 3 个槽位。首先，将面板 Panel-inventory-slot 的 Pos X 水平位置更改为 -70。这将使其位于中心左侧，为下一个槽位腾出空间，并在我们完成时允许我们居中三个槽位。
- en: Duplicate panel Panel-inventory-slot, renaming (if necessary) the copy to panel
    Panel-inventory-slot (1). Set the Pos X of this copy to 0.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制面板 Panel-inventory-slot，如果需要，将副本重命名为 panel Panel-inventory-slot (1)。将此副本的
    Pos X 设置为 0。
- en: Duplicate panel Panel-inventory-slot again, renaming (if necessary) the copy
    to panel Panel-inventory-slot (2). Set the Pos X of this copy to 70\. Now select
    the child Image-star-icon of this third panel and make it inactive (at the top
    of the **Inspector** uncheck its active checkbox, to the left of the GameObject
    name) . The star for this panel should now be hidden, and only the circle background
    of the slot's panel is visible.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次复制Panel-inventory-slot面板，如果需要的话，将副本重命名为panel Panel-inventory-slot (2)。将这个副本的Pos
    X设置为70。现在选择这个第三个面板的子Image-star-icon并使其不活动（在**检查器**顶部取消勾选其活动复选框，位于GameObject名称的左侧）。这个面板的星形现在应该被隐藏，并且只有槽面板的圆形背景是可见的。
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have created one simple panel (Panel-background) with title UI Text as a
    child GameObject at the top of the game canvas, which shows a grayish background
    rectangle and the title text Inventory. This indicates to the player that this
    part of the screen is where the inventory HUD will be displayed.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的面板（Panel-background），其中包含一个标题UI Text作为游戏画布顶部的子GameObject，显示了一个灰色背景矩形和标题文本“库存”。这向玩家表明，屏幕的这一部分是库存HUD将被显示的地方。
- en: To illustrate how this might be used to indicate a player carrying stars, we
    added a smaller panel for one slot in the inventory with a circular background
    image, and in that added a star icon a child GameObject. We then duplicated the
    slot panel two more times, positioning them 70 pixels apart. We then disabled
    (make inactive) the star icon of the third slot, so that the an empty slot circle
    is shown.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明如何使用它来指示玩家携带星星，我们在库存中添加了一个带有圆形背景图像的小面板，用于一个槽位，并在其中添加了一个星形图标子GameObject。然后我们再次复制了槽面板两次，将它们定位在70像素的距离。然后我们禁用了（使不活动）第三个槽位的星形图标，因此显示了一个空槽的圆形。
- en: Our scene presents to the user a display indicating two out of a possible three
    stars are being carried. This recipe is a good start for a more general-purpose
    approach to creating inventory UIs in Unity, and we'll build from it in some of
    the following recipes in this chapter.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的场景向用户展示了一个显示，表明可能的三颗星中有两颗正在被携带。这个配方是一个很好的起点，用于在Unity中创建更通用的库存UI，我们将在本章的一些后续配方中基于它进行构建。
- en: We'll learn how to limit the player's movement to prevent their character moving
    into the rectangle of HUD items like this in [Chapter 12](eb0ea442-6350-4a86-9e16-708b80d8762f.xhtml),
    Controlling and Choosing Positions.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第12章[控制与选择位置](eb0ea442-6350-4a86-9e16-708b80d8762f.xhtml)中学习如何限制玩家的移动，防止他们的角色移动到像这样的HUD物品的矩形内。
- en: Creating a C# inventory slot UI display scripted component
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个C#库存槽UI显示脚本组件
- en: In the previous recipe, we started to work with UI panels and images to create
    a more general-purpose GameObject for displaying inventory slots, and images to
    indicate what is stored in them. In this recipe, we look at taking things a little
    further with the graphics, and also create a C# script class to work with each
    inventory slot object.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们开始使用UI面板和图像来创建一个更通用的用于显示库存槽的GameObject，以及图像来指示其中存储的内容。在这个配方中，我们将进一步探讨图形的使用，并创建一个C#脚本类来处理每个库存槽对象。
- en: '![](img/459b3abb-fd0c-4247-8bc3-772238db3426.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/459b3abb-fd0c-4247-8bc3-772238db3426.png)'
- en: As we can see in the screenshot, in this recipe we'll create the UI (and scripts)
    for an inventory that has three locations for stars, and three more for keys,
    using colored and gray icons to indicate how many have been collected.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在截图中所见，在这个配方中，我们将创建一个UI（和脚本）用于有三个星星位置和一个有钥匙的三个位置的库存，使用彩色和灰色图标来指示收集了多少。
- en: Getting ready
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe adapts the previous one. So, make a copy of the project for the
    previous recipe and work on this copy.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方是对上一个配方的一个改编。因此，请复制上一个配方的项目，并在这个副本上工作。
- en: For this recipe, we have prepared a folder named `_Scripts` in the `03_06` folder.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们在`03_06`文件夹中准备了一个名为`_Scripts`的文件夹。
- en: How to do it...
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To create a C# inventory slot display script component, follow these steps:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个C#库存槽显示脚本组件，请按照以下步骤操作：
- en: Import the `_Scripts` folder from the provided files (this contains a copy of
    the script class `PlayerInventory` from one of the previous recipes, which we
    can use unchanged for this recipe).
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从提供的文件中导入`_Scripts`文件夹（这包含了一个从之前的配方中复制来的脚本类`PlayerInventory`，我们可以在这个配方中直接使用它）。
- en: 'Delete two of the three inventory slot GameObjects: Panel-inventory-slot (1)
    and (2). So, only Panel-inventory-slot remains.'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除三个库存槽GameObject中的两个：Panel-inventory-slot (1) 和 (2)。因此，只剩下Panel-inventory-slot。
- en: First we'll create a panel for three star slots. In the **Hierarchy** panel,
    create a UI Panel (**Create** | **UI** | **Panel**) and rename it Panel-stars.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个用于三个星星槽的面板。在**层次结构**面板中，创建一个UI面板（**创建** | **UI** | **面板**），并将其重命名为Panel-stars。
- en: We'll now position Panel-stars at the top-left of the **Game** panel, and make
    it fit within the left side of our general inventory rectangle. Edit the UI **Image's
    Rect Transform** component, and while holding down *SHIFT* and *ALT* (to set pivot
    and position), choose the top-left box. Now set the Height to 60 and the Width
    to 300\. We'll now nudge this away from the top-left corner by setting Pos X to
    10 and Pos Y to -30.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将Panel-stars放置在**游戏**面板的左上角，并使其适应我们的一般库存矩形的左侧。编辑UI **图像的矩形变换**组件，在按住*SHIFT*和*ALT*（以设置枢轴和位置）的同时，选择左上角的框。现在将高度设置为60，宽度设置为300。现在，我们将通过将Pos
    X设置为10和Pos Y设置为-30来将此框从左上角移开。
- en: Add a **UI Text** object (**Create** | **UI** | **Text**) and rename it Text-title.
    For its **Text** **(Script)** component, change the text to Stars. Child this
    UI Text object to the panel Panel-stars.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**UI文本**对象（**创建** | **UI** | **文本**），并将其重命名为Text-title。对于其**文本** **（脚本）**组件，将文本更改为“星星”。将此UI文本对象作为子对象添加到面板Panel-stars中。
- en: Edit the **Rect Transform** of Text-title, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the left-middle box. The text should now be positioned
    at the left-middle of the **UI Panel** object Panel-stars.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑Text-title的**矩形变换**，在按住*Shift* + *Alt* （以设置枢轴和位置）的同时，选择左中部的框。现在文本应位于**UI面板**对象Panel-stars的左中部。
- en: In the **Inspector** panel, also set the font of Text-title to **Xolonium-Bold**
    (the `Fonts` folder). Center the text horizontally, center-align the text vertically,
    set its **Height** to `50`, and set the **Font Size** to `32`. Choose a yellow
    text color. Set **Vertical-overflow** to Overflow, and set **Alignment** vertical
    to center. We'll now nudge this away from the very left edge by setting Pos X
    to 10.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中，还将Text-title的字体设置为**Xolonium-Bold**（位于“字体”文件夹中）。水平居中文本，垂直居中文本，将其**高度**设置为`50`，并将**字体大小**设置为`32`。选择黄色文本颜色。将**垂直溢出**设置为溢出，并将**对齐**垂直设置为居中。现在，我们将通过将Pos
    X设置为10来将此框从非常左侧边缘移开。
- en: Child the existing GameObject Panel-inventory-slot to Panel-stars. Edit its
    **Rect Transform**, and while holding down *Shift* + *Alt* (to set pivot and position),
    choose the left-middle box.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的GameObject Panel-inventory-slot作为子对象添加到Panel-stars。编辑其**矩形变换**，在按住*Shift* + *Alt* （以设置枢轴和位置）的同时，选择左中部的框。
- en: 'Resize Panel-inventory-slot to Width and Height `50 x 50` pixels. Set its Pos
    X to 140\. It should now appear to the right of the yellow Stars text:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Panel-inventory-slot的大小调整为`50 x 50`像素。将其Pos X设置为140。现在它应该看起来在黄色星星文本的右侧：
- en: '![](img/771c225c-f450-410d-9ca0-69e8e0bbb1d6.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/771c225c-f450-410d-9ca0-69e8e0bbb1d6.png)'
- en: Rename GameObject Image-icon as Image-icon-grey. Then duplicate this GameObject,
    naming the copy Image-icon-color. Both should be child GameObjects of Panel-inventory-slot.
    In the Hierarchy the sequence should be that the first child is Image-icon-grey
    and the second child is Image-icon-color. If this isn't the order, then swap them.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GameObject Image-icon重命名为Image-icon-grey。然后复制此GameObject，将其命名为Image-icon-color。这两个都应该成为Panel-inventory-slot的子GameObject。在层次结构中，顺序应该是第一个子对象是Image-icon-grey，第二个子对象是Image-icon-color。如果这不是这个顺序，那么交换它们。
- en: Select Image-icon-grey, and drag the sprite `icon_star_grey_100` (in the `Sprites`
    folder) from the **Project** panel into the **Source Image** field in the **Inspector**
    (in the **Image (Script)** component). Now, if you disable GameObject **Image-icon-color**
    you should see the grey star icon inside the slot panel circle.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“Image-icon-grey”，并将精灵`icon_star_grey_100`（位于“Sprites”文件夹中）从**项目**面板拖动到**检查器**（位于**图像（脚本）**组件中的**源图像**字段）。现在，如果你禁用GameObject
    **Image-icon-color**，你应该在槽面板的圆圈中看到灰色星星图标。
- en: 'Create the following C# Script `PickupUI` (in the `_Scripts` folder) and add
    an instance as a component to GameObject of Panel-inventory-slot in the **Hierarchy**:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`_Scripts`文件夹中创建以下C#脚本`PickupUI`，并将其作为组件添加到**层次结构**中Panel-inventory-slot的GameObject：
- en: '[PRE10]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Select Panel-inventory-slot in the **Hierarchy**. In the Inspector, for the
    Pickup UI (Script) component, populate the **Icon Color** public field by dragging
    Image-icon-color from the Hierarchy. Likewise, populate the Icon Grey public field
    by dragging Image-icon-grey from the Hierarchy. Now the scripted component **PickupUI**
    in Panel-inventory-slot has references to the colored and grey icons for this
    inventory slot GameObject.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Hierarchy**中选择Panel-inventory-slot。在**Inspector**中，对于Pickup UI (Script)组件，通过从Hierarchy拖动Image-icon-color来填充**Icon
    Color**公共字段。同样，通过从Hierarchy拖动Image-icon-grey来填充Icon Grey公共字段。现在，Panel-inventory-slot中的脚本组件**PickupUI**有对这个库存槽GameObject的彩色和灰色图标的引用。
- en: Duplicate GameObject Panel-inventory-slot and for the new duplicate GameObject
    set its Pos X to 190.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制GameObject Panel-inventory-slot，并将新复制的GameObject的Pos X设置为190。
- en: 'Duplicate GameObject Panel-inventory-slot second time and for the new duplicate
    GameObject, set its Pos X to 240\. You should now see all three star inventory
    icons lined up nicely spaced to the right of the yellow Stars title text:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GameObject Panel-inventory-slot第二次复制，对于新复制的GameObject，将其Pos X设置为240。你现在应该能看到所有三个星星库存图标整齐地排列在黄色“Stars”标题文本的右侧：
- en: '![](img/09799173-3394-4936-9deb-7fa15d9db835.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/09799173-3394-4936-9deb-7fa15d9db835.png)'
- en: 'Add the following C# Script PlayerInventoryDisplay to the GameObject player-SpaceGirl
    in the **Hierarchy**:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下C#脚本PlayerInventoryDisplay添加到**Hierarchy**中的GameObject player-SpaceGirl：
- en: '[PRE11]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'From the **Hierarchy**, select the GameObject player-SpaceGirl. Then do the
    following in the **Inspector** for the **Player Inventory Display (Script)** component:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Hierarchy**中选择GameObject player-SpaceGirl。然后在**Inspector**中的**Player Inventory
    Display (Script)**组件中执行以下操作：
- en: Set the Size of public array slots to 3.
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将公共数组槽的大小设置为3。
- en: Populate the **Element** **0** public field with the GameObject Panel-inventory-slot.
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Element 0**公共字段填充为GameObject Panel-inventory-slot。
- en: Populate the **Element 1** public field with the GameObject Panel-inventory-slot
    (1).
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Element 1**公共字段填充为GameObject Panel-inventory-slot (1)。
- en: 'Populate the **Element 2** public field with the GameObject Panel-inventory-slot
    (2):'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Element 2**公共字段填充为GameObject Panel-inventory-slot (2)：
- en: '![](img/a27617fe-ad95-4be5-a3cb-da340e4b4b39.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a27617fe-ad95-4be5-a3cb-da340e4b4b39.png)'
- en: Finally, make two more copies of GameObject star in the scene and move them
    around. So, there are now three GameObjects tagged Star for the player to collect.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在场景中再复制两个GameObject star，并将它们移动到适当的位置。因此，现在有三个标记为Star的GameObject供玩家收集。
- en: When you run the game and the player's character hits each star GameObject,
    it should be removed from the scene, and the next free inventory star icon should
    change from grey to yellow.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行游戏，玩家的角色击中每个星星GameObject时，它应该从场景中移除，下一个空闲的库存星星图标应该从灰色变为黄色。
- en: How it works...
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have created a panel (Panel-stars) in which to display the large title text
    Stars and three inventory slot panels to show how many stars can be collected,
    and how many have been collected at any point in the game. Each star panel-slot
    is a **UI Panel** with a circular Knob background image, and then two children,
    one showing a grey icon image and a second showing a colored icon image. When
    the colored icon image GameObject is disabled it will be hidden, and so reveal
    the grey icon. When both colored and grey images are disabled, then an empty circle
    will be shown, which could, perhaps, be used to indicate to the user that a general-purpose
    location is empty and available in the inventory.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个面板（Panel-stars），用于显示大标题文本“Stars”以及三个库存槽面板，以显示可以收集多少星星，以及在任何游戏时刻已经收集了多少星星。每个星星面板槽是一个带有圆形旋钮背景图像的**UI面板**，然后是两个子元素，一个显示灰色图标图像，另一个显示彩色图标图像。当彩色图标图像GameObject被禁用时，它将被隐藏，从而揭示灰色图标。当彩色和灰色图像都被禁用时，将显示一个空圆圈，这可能被用来向用户指示库存中的通用位置是空的且可用。
- en: The script class `PickupUI` has two public variables that are references to
    the grey and colored icon for the GameObject it relates to. Before the scene starts
    (method `Awake()`), the script hides the grey and colored icons and displays an
    empty circle. This script class declares three public methods (public so that
    they can be invoked from another scripted object when the game is running). These
    methods hide/reveal the appropriate icons to display the related inventory panel
    UI object as either empty, grey, or colored. The methods are clearly named `DisplayEmpty()`,
    `DisplayGreyIcon(`), and `DisplayColorIcon()`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本类 `PickupUI` 有两个公共变量，它们是该 GameObject 相关的灰色和彩色图标的引用。在场景开始之前（方法 `Awake()`），脚本隐藏灰色和彩色图标并显示一个空圆圈。此脚本类声明了三个公共方法（公开，以便在游戏运行时从另一个脚本对象调用）。这些方法隐藏/显示适当的图标以显示相关的库存面板
    UI 对象，无论是空的、灰色的还是彩色的。这些方法被清楚地命名为 `DisplayEmpty()`、`DisplayGreyIcon()` 和 `DisplayColorIcon()`。
- en: The script class `PlayerInventory` maintains an integer total `starTotal` of
    how many stars have been collected (initialized to zero). Each time the player
    character collides with an object, then if that object is tagged Star, the method
    `AddStar()` is invoked. This method increments the total and sends a message passing
    the new total to method `OnChangeStarTotal(...)` of its sibling scripted component
    `PlayerInventoryDisplay` .
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本类 `PlayerInventory` 维护一个整数总计 `starTotal`，表示收集了多少颗星星（初始化为零）。每次玩家角色与对象碰撞时，如果该对象被标记为星星，则调用
    `AddStar()` 方法。此方法增加总计并发送一条消息，将新总计传递给其兄弟脚本组件 `PlayerInventoryDisplay` 的 `OnChangeStarTotal(...)`
    方法。
- en: The script-class `PlayerInventoryDisplay` has a public array of references to
    PickupUI objects, and the single public method `OnChangeStarTotal(...)`. This
    method loops through its array of PickupUI scripted objects, setting them to display
    color icons while the loop counter is less than the number of stars carried, and
    thereafter setting them to display grey icons. This results in the color icons
    being displayed to match the number of stars being carried.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本类 `PlayerInventoryDisplay` 拥有一个指向 `PickupUI` 对象的公共数组，以及一个单独的公共方法 `OnChangeStarTotal(...)`.
    此方法遍历其 `PickupUI` 脚本对象的数组，在循环计数器小于携带的星星数量时，将这些对象设置为显示彩色图标，之后将它们设置为显示灰色图标。这导致显示的彩色图标与携带的星星数量相匹配。
- en: 'Note: It might seem that we could make our code simpler by assuming that slots
    are always displaying grey (no star) and just changing one slot to yellow each
    time a yellow star is picked up. But this would lead to problems if something
    happens in the game (for example, hitting a black hole or being shot by an alien)
    that makes us drop one or more stars. The C# script class PlayerInventoryDisplay
    makes no assumptions about which slots may or may not have been displayed grey
    or yellow or empty previously. Each time it is called, it ensures that an appropriate
    number of yellow stars are displayed, and all other slots are displayed with grey
    stars.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：看起来我们可以通过假设插槽始终显示灰色（没有星星）并每次拾取黄色星星时只更改一个插槽为黄色来简化我们的代码。但如果游戏中发生某些情况（例如，撞击黑洞或被外星人射击）导致我们掉落一个或多个星星，这可能会导致问题。`PlayerInventoryDisplay`
    C# 脚本类不对哪些插槽可能或可能没有之前显示为灰色、黄色或空做出任何假设。每次调用时，它都确保显示适当数量的黄色星星，并且所有其他插槽都显示为灰色星星。
- en: The UI Panel GameObjects slots for the three stars have a PickupUI scripted
    component added, and each is linked to its grey and colored icons.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 为三个星星的 UI 面板 GameObject 插槽添加了一个 `PickupUI` 脚本组件，并且每个插槽都链接到其灰色和彩色图标。
- en: Several star GameObjects are added to the scene (all tagged Star). The array
    of PickupUI object references in the `PlayerInventoryDisplay` scripted component
    in GameObject player-SpaceGirl is populated with references to the PickupUI scripted
    components in the three the UI Panels for each star.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中添加了几个星星 GameObject（所有标记为星星）。在 GameObject player-SpaceGirl 的 `PlayerInventoryDisplay`
    脚本组件中的 `PickupUI` 对象引用数组被填充了三个 UI 面板中每个星星的 `PickupUI` 脚本组件的引用。
- en: There's more...
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some details you won't want to miss.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你不想错过的细节。
- en: Modifying the game for a second inventory panel for keys
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改游戏以添加第二个用于钥匙收集的库存面板
- en: We have created a great display panel for the collection of star objects. Now
    we can reuse that work, to create a second panel to display the collection of
    key objects in the game.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为星星对象的集合创建了一个出色的显示面板。现在我们可以重用这项工作，来创建第二个面板以显示游戏中关键对象的集合。
- en: 'To modify the game to make a second inventory panel for key collection, do
    the following:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改游戏以添加第二个用于钥匙收集的库存面板，请执行以下操作：
- en: Duplicate GameObject Panel-stars, naming the copy Panel-keys.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 GameObject Panel-stars，将副本命名为 Panel-keys。
- en: 'With Panel-keys selected in the Hierarchy, do the following:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中选择 Panel-keys，执行以下操作：
- en: Change the **Text (Script)** of child **Text-title** from Stars to Keys.
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将子 **Text-title** 的 **Text (Script)** 从星星改为键。
- en: In the **Rect Transform**, choose top-right, set Pos X to -10 (to move away
    from the right edge) and Pos Y to -30 (to vertically align with Panel-keys).
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**矩形变换**中，选择右上角，将 Pos X 设置为 -10（以远离右侧边缘）并将 Pos Y 设置为 -30（以垂直对齐到面板键）。
- en: 'For each Image-icon-grey GameObject that is a child of all three panel-inventory-slots,
    change the **Image (Script)** Source Image to: icon_key_grey_100.'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有三个面板库存槽的子 Image-icon-grey GameObject，将 **Image (Script)** 的 Source Image
    更改为：icon_key_grey_100。
- en: 'For each Image-icon-color GameObject that is a child of all three panel-inventory-slots,
    change the **Image (Script)** Source Image to: icon_key_green_100.'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有三个面板库存槽的子 Image-icon-color GameObject，将 **Image (Script)** 的 Source Image
    更改为：icon_key_green_100。
- en: For all of the **Image-icon-grey** GameObjects and the Image-icon-color GameObjects
    that are children of all three panel-inventory-slots, in the **Rect Transform**
    set the Scale to (0.75, 0.75, 1). This is to make the key images fit fully inside
    the background panel circle images.
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有三个面板库存槽的子 Image-icon-grey GameObject 和 Image-icon-color GameObject，在 **Rect
    Transform** 中将缩放设置为 (0.75, 0.75, 1)。这是为了让键图像完全适合背景面板圆形图像。
- en: 'Remove from GameObject player-SpaceGirl script components: PlayerInventory
    and PlayerInventoryDisplay.'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 GameObject player-SpaceGirl 中移除脚本组件：PlayerInventory 和 PlayerInventoryDisplay。
- en: 'Create the following C# Script PlayerInventoryKeys in the `_Scripts` folder:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `_Scripts` 文件夹中创建以下 C# 脚本 PlayerInventoryKeys：
- en: '[PRE12]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following C# script `PlayerInventoryDisplayKeys` to GameObject player-SpaceGirl
    in the **Hierarchy**:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 C# 脚本 `PlayerInventoryDisplayKeys` 添加到 **层次结构** 中的 GameObject player-SpaceGirl：
- en: '[PRE13]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With the GameObject player-SpaceGirl selected in the **Hierarchy**, for its
    PlayerInventoryDisplayKeys scripted component, set both slotsKeys and slotsStars
    to 3 (making the size of each of these arrays 3). Then drag the corresponding
    inventory-slot GameObjects from the Hierarchy to populate these arrays.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择 GameObject player-SpaceGirl，为其 PlayerInventoryDisplayKeys 脚本组件设置
    slotsKeys 和 slotsStars 都为 3（使这些数组的每个大小为 3）。然后从层次结构中拖动相应的库存槽 GameObject 来填充这些数组。
- en: 'Create a new GameObject key by dragging a copy of the sprite image icon-key-green-100 from
    the **Project** panel into the scene. Then add a **Box Collider** component (**Physics
    2D**) and tick its Is Trigger setting. In its **Sprite Renderer** component, set
    the Sorting Layer to Foreground. Create a new **Tag**: Key, and add this tag to
    this GameObject.'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从 **项目** 面板拖动 sprite 图像 icon-key-green-100 的副本到场景中创建一个新的 GameObject key。然后添加一个
    **Box Collider** 组件（**物理 2D**）并勾选其 Is Trigger 设置。在其 **Sprite Renderer** 组件中，将排序层设置为前景。创建一个新的
    **标签**：Key，并将此标签添加到该 GameObject。
- en: Make two duplicates of GameObject key, moving them to different locations in
    the scene (so the player can see all three stars and all three keys).
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GameObject key 复制两次，将它们移动到场景中的不同位置（这样玩家可以看到所有三个星星和所有三个键）。
- en: As you can see, we have duplicated and adjusted the visual UI Panel and components
    of for star carrying inventory to give us a second one for key carrying inventory.
    Likewise, we have added code to detect collisions with objects tagged Key, and
    added to the inventory display script to update the UI Panel for keys when notified
    that a change has occurred in the number of keys being carried.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经复制并调整了用于携带星星的库存的视觉 UI 面板和组件，以给我们第二个用于携带键的库存。同样，我们添加了检测带有 Key 标签的对象的代码，并将更新库存显示脚本的代码添加到通知键数量发生变化时更新键的
    UI 面板。
- en: Using UI Grid Layout Groups to automatically populate a panel
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 UI Grid Layout Groups 自动填充面板
- en: The recipes in this chapter up to this point have been hand-crafted for each
    situation. While this is fine, more general and automated approaches to inventory
    UIs can sometimes save time and effort but still achieve visual and usability
    results of equal quality.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章中的配方是为每种情况手工制作的。虽然这样做是可以的，但更通用和自动化的库存用户界面方法有时可以节省时间和精力，同时仍然达到相同质量的视觉和可用性效果。
- en: There can be a lot of dragging slots from the **Hierarchy** panel into arrays,
    such as in the previous recipe for the scripted component `PlayerInventoryDisplay`.
    This takes a bit of work (and mistakes might be made when dragging items in the
    wrong order or the same item twice). Also, if we change the number of slots, then
    we may have to do this all over again or try to remember to drag more slots if
    we increase the number. A better way of doing things is to make the first task
    of the script class `PlayerInventoryDisplay` when the scene begins to create at
    **Run-Time** as many as required of the panels for grey-color star (or key or
    whatever) icon GameObjects as children of Panel-slot-grid, and then populate the
    array of the display scripted component at the same time.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6686d9a-4236-4253-9ef5-006f2b585f64.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will begin to explore a more engineered approach to inventory
    UIs by exploiting the automated sizing and layouts offered by Unity's Grid Layout
    Group component. Some enhancements at the end of this recipe include adding an
    interactive scrollbar, as show in the screenshot.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe adapts the previous one. So, make a copy of the project for the
    previous recipe, and work on this copy.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To automatically populate a panel using UI Grid Layout Groups to follow these
    steps:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named Prefabs. In this folder, create a new empty prefab
    named panel-inventory-slot.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** panel, drag the GameObject Panel-inventory-slot into
    your new empty prefab named panel-inventory-slot. This prefab should now turn
    blue, showing it is populated.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** panel, delete the three GameObjects Panel-inventory-slot
    / (1) / (2).
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Un-child Text-title from Panel-stars. Set the Pos-X position of **Panel-stars**.
    To 130 - so that the panel is now to the right of the text Stars.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the panel Panel-stars selected in the Hierarchy panel, add a grid layout
    group component (**Add Component** | **Layout** | **Grid Layout Group**). Set **Cell
    Size** to `50 x 50` and Spacing to `5 x 5`. Also, set the **Child Alignment**
    to Middle Center (so our icons will have even spacing at the far left and right),
    as shown in the following screenshot:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e21a36d-acf0-42c1-b3e4-ddd7eddde586.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
- en: 'Replace the C# script `PlayerInventoryDisplay` in GameObject player-SpaceGirl
    with the following code:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Ensure GameObject **player-girl1 **is selected in the **Hierarchy.** Then drag
    from the **Project** panel GameObject **Panel-stars** into the **Player Inventory
    Display (Script)** variable **Panel-slot-grid**, in the **Inspector**.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With GameObject player-girl1 selected in the **Hierarchy**, drag from the **Project**
    panel prefab panel-inventory-slot into **Player Inventory Display (Script)** the
    variable Star Slot Prefab, in the Inspector. Steps 7 and 8 are illustrated in
    this screenshot:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8eacab9-2256-4253-86be-776158d1e19b.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
- en: Edit the script class `PlayerInventoryDisplay` to set the constant `NUM_INVENTORY_SLOTS`
    to have 10 or 15 slots. So some can only be seen when using the horizontal scroll
    bar.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑脚本类 `PlayerInventoryDisplay`，将常量 `NUM_INVENTORY_SLOTS` 设置为 10 或 15 个槽位。这样一些槽位只能在使用水平滚动条时看到。
- en: Save the scene and play the game. As you pick up stars, you should see more
    of the grey stars change to yellow in the inventory display.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存场景并开始游戏。当你收集星星时，你应该会看到库存显示中更多的灰色星星变为黄色。
- en: How it works...
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We took one of the panels that contained the Knob circle background, and children
    GameObjects of grey and colored star images, and used it to create a **Prefab**
    panel-inventory-slot. We then removed the star panel GameObjects from the scene
    since our script class PlayerInventoryDisplay will create as many of these as
    needed when the scene begins. This approach saves a lot of drag and dropping,
    saving **Design-Time** effort, and eliminating one possible source of sequence/object
    reference errors when the design of a scene is changed.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取了一个包含旋钮圆形背景和灰色和彩色星星图像的子对象的面板，并使用它创建了一个 **Prefab** 面板-库存槽位。然后我们从场景中移除了星星面板
    GameObject，因为我们的脚本类 PlayerInventoryDisplay 在场景开始时会创建所需数量的这些。这种方法节省了大量拖放操作，节省了
    **设计时** 努力并消除了在场景设计更改时可能的一个序列/对象引用错误来源。
- en: 'The C# script class `PlayerInventoryDisplay` has two properties:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: C# 脚本类 `PlayerInventoryDisplay` 有两个属性：
- en: A constant integer (`NUM_INVENTORY_SLOTS`) defining the number of slots in our
    inventory, which for this game we set to 5.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个定义我们库存槽位数量的常量整数 (`NUM_INVENTORY_SLOTS`)，在这个游戏中我们将其设置为 5。
- en: A `(slots)` array of references to `PickupUI` scripted components. Each of these
    will become a reference to the scripted component in each of the five `Panel-inventory-slot`
    GameObjects in our `Panel-stars`.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `(slots)` 数组，包含对 `PickupUI` 脚本组件的引用。这些中的每一个将成为我们 `Panel-stars` 中五个 `Panel-inventory-slot`
    GameObject 中的脚本组件的引用。
- en: The `Awake()` method is used to create instances of the prefab in `PlayerInventoryDispay`
    so that we know this will be executed before the `Start()` method in `PlayerInventory` since
    no `Start()` method is executed in a scene until all `Awake()` methods for all
    GameObjects in the scene have been completed. The `Awake()` method first calculates
    the width of the Panel-stars (50 + (50 * number of inventory slots)). Next, the
    panel is resized to have that width, using the `SetSizeWithCurrentAnchors()` method.
    Then a loop runs for the number of slots in the inventory, each time creating
    a new star slot GameObject from the prefab, childing the new GameObject to Panel-stars,
    and adding a reference to the icon slot GameObject in array slots. When the `OnChangeStarTotal(...)`
    method is passed the number of stars we are carrying, it loops through each of
    the five slots. While the current slot is less than our star total, a yellow star
    is displayed by the calling of the `DisplayYellow()` method of the current slot
    (PickupUI scripted component). Once the loop counter is equal to or larger than
    our star total, then all remaining slots are made to display a grey star via the
    method `DisplayGrey()`.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`Awake()` 方法用于在 `PlayerInventoryDispay` 中创建预制实例，这样我们知道这将在 `PlayerInventory`
    中的 `Start()` 方法之前执行，因为场景中的所有 GameObject 的 `Awake()` 方法完成之前，场景中不会执行任何 `Start()`
    方法。`Awake()` 方法首先计算 `Panel-stars` 的宽度（50 + (50 * 库存槽位数量))。然后，使用 `SetSizeWithCurrentAnchors()`
    方法调整面板大小以具有该宽度。然后，循环运行库存中的槽位数量，每次从预制中创建一个新的星星槽位 GameObject，将其作为子对象添加到 `Panel-stars`，并在数组槽位中添加对图标槽位
    GameObject 的引用。当 `OnChangeStarTotal(...)` 方法传递我们携带的星星数量时，它遍历每个五个槽位。当当前槽位小于我们的星星总数时，通过调用当前槽位的
    `DisplayYellow()` 方法（PickupUI 脚本组件）显示黄色星星。一旦循环计数器等于或大于我们的星星总数，那么所有剩余的槽位都通过 `DisplayGrey()`
    方法显示为灰色星星。'
- en: Our player character GameObject, player-girl1, has a very simple basic `PlayerInventory`
    script. This just detects collisions with objects tagged Star, and when this happens,
    it removes the star GameObject collided with and calls its `AddStar()` method
    of its `playerInventoryMode`l scripted component. Each time the `AddStar()` method
    is called, it increments (adds 1) to the total umber of stars being carried, and
    then calls the `OnChangeStarTotal(...)` method of the scripted component `playerInventoryDisplay`.
    Also, when the scene starts, an initial call is made to the `OnChangeStarTotal(...)`
    method so that the UI display for the inventory is set up to show that we are
    initially carrying no stars.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的玩家角色 GameObject，player-girl1，有一个非常简单的 `PlayerInventory` 脚本。这个脚本只是检测与带有标签
    Star 的对象的碰撞，当发生碰撞时，它会移除与之碰撞的星 GameObject，并调用其 `playerInventoryMode`l 脚本组件的 `AddStar()`
    方法。每次调用 `AddStar()` 方法时，它都会将携带的星星总数增加（加 1），然后调用脚本组件 `playerInventoryDisplay` 的
    `OnChangeStarTotal(...)` 方法。此外，当场景开始时，会调用 `OnChangeStarTotal(...)` 方法，以便设置库存的
    UI 显示，显示我们最初没有携带任何星星。
- en: The public array has been made private and no longer needs to be populated through
    manual drag-and-drop. When you run the game, it will play just the same as before,
    with the population of the array of images in our inventory grid panel now automated.
    The `Awake()` method creates new instances of the prefab (as many as defined by
    constant `NUM_INVENTORY_SLOTS`) and immediately childed them to Panel-slot-grid.
    Since we have a grid layout group component, their placement is automatically
    neat and tidy in our panel.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 公共数组已被改为私有，不再需要通过手动拖放来填充。当你运行游戏时，它将像以前一样运行，现在我们的库存网格面板中的图像数组填充现在是自动化的。`Awake()`
    方法创建新的预制实例（数量由常量 `NUM_INVENTORY_SLOTS` 定义），并立即将其作为子对象添加到 Panel-slot-grid。由于我们有一个网格布局组组件，它们的放置在我们的面板中自动整齐有序。
- en: The scale property of the transform component of GameObjects is reset when a
    GameObject changes its parent (to keep the child size to relative to the parent
    size). So, it is a good idea to always reset the local scale of GameObjects to
    (1,1,1) immediately after they have been childed to another GameObject. We do
    this in the for loop of starSlotGO immediately following the `SetParent(...)`
    statement.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 当 GameObject 改变其父对象时（为了保持子对象大小相对于父对象的大小），会重置 GameObject 变换组件的缩放属性。因此，在 GameObject
    被添加为另一个 GameObject 的子对象后，立即将其局部缩放重置为 (1,1,1) 是一个好主意。我们在 starSlotGO 的 for 循环中紧随
    `SetParent(...)` 语句之后执行此操作。
- en: There's more...
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some details you won't want to miss.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你不想错过的细节。
- en: Automatically infer number of inventory slots based on number of GameObjects
    tagged Star
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据带有标签 Star 的 GameObject 数量自动推断库存槽位数量
- en: Rather than having to manually change Integer constant `NUM_INVENTORY_SLOTS`
    in the script class PlayerInventoryDisplay to match the number of GameObjects
    created in the scene for the player to collect, let's have our script count how
    many GameObjects are tagged Star, and use this to size and populate our array
    of references to inventory UI panel slots.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是手动在脚本类 PlayerInventoryDisplay 中更改整型常量 `NUM_INVENTORY_SLOTS` 以匹配场景中创建的用于玩家收集的
    GameObject 数量，让我们让我们的脚本计算有多少 GameObject 被标记为 Star，并使用这个数量来调整和填充指向库存 UI 槽位引用的数组。
- en: 'We just need to change from a constant to a variable for our array size, and
    set that variable before anything else in our `Awake()` method. The statement
    `GameObject.FindGameObjectsWithTag("Star")` gets an array of references to all
    GameObjects with tag Star, and its length is the array size we want:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要将数组大小从常量改为变量，并在我们的 `Awake()` 方法中将其设置在其他任何内容之前。语句 `GameObject.FindGameObjectsWithTag("Star")`
    获取一个引用数组，指向所有带有标签 Star 的 GameObject，其长度就是我们想要的数组大小：
- en: 'Replace the C# Script `PlayerInventoryDisplay` in the GameObject player-SpaceGirl
    with the following code:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GameObject player-SpaceGirl 中的 C# 脚本 `PlayerInventoryDisplay` 替换为以下代码：
- en: '[PRE15]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Add or remove some of the duplicates of GameObject star so the total is no longer
    5.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加或删除一些 GameObject 星星重复项，以便总数不再是 5。
- en: Run the scene. You should see the size and contents of Panel-star change to
    match the number of GameObjects tagged Star when the scene begins.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行场景。你应该会看到当场景开始时，Panel-star 的大小和内容会根据带有标签 Star 的 GameObject 数量进行匹配。
- en: Add a horizontal scrollbar to the inventory slot display
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在库存槽位显示中添加水平滚动条
- en: How could we cope with many inventory slots, more than fit in the space provided?
    One solution is to add a scroll bar so that the user can scroll left and right,
    viewing five at a time, say, as shown in the following screenshot.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何应对许多库存槽位，多于提供空间的情况？一个解决方案是添加一个滚动条，以便用户可以左右滚动，一次查看五个，例如，如图所示。
- en: '![](img/bd08f7cb-d510-4704-a666-ae4c35851bf4.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd08f7cb-d510-4704-a666-ae4c35851bf4.png)'
- en: Let's add a horizontal scroll bar to our game. This can be achieved without
    any C# code changes, all through the Unity 5 UI system.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在游戏中添加一个水平滚动条。这可以通过不进行任何 C# 代码更改，完全通过 Unity 5 UI 系统来实现。
- en: 'To implement a horizontal scrollbar for our inventory display, we need to do
    the following:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的库存显示实现水平滚动条，我们需要做以下几步：
- en: Increase the height of Panel-background to 110 pixels.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Panel-background 的高度增加到 110 像素。
- en: In the **Inspector p**anel, set the **Child Alignment** property of component
    **Grid Layout** **Group (Script)** of `Panel-slot-grid` to Upper Left. Then, move
    this panel to the right a little so that the inventory icons are centered on screen.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Inspector** 面板中，将 `Panel-slot-grid` 的组件 **Grid Layout Group (Script)** 的
    **Child Alignment** 属性设置为 Upper Left。然后，将此面板稍微向右移动，以便库存图标在屏幕上居中。
- en: Add a **UI Panel** to the **Canvas** and name it `Panel-scroll-container`, and
    tint it red by setting the Color property of its **Image (Script)** component
    to red.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Canvas** 中添加一个 **UI Panel**，命名为 `Panel-scroll-container`，并通过将其 **Image (Script)**
    组件的颜色设置为红色来使其着色。
- en: In the **Hierarchy** panel, drag `Panel-slot-grid` so that it is now childed
    to `Panel-scroll-container`.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 面板中，将 `Panel-slot-grid` 拖动，使其成为 `Panel-scroll-container` 的子项。
- en: Size and position Panel-scroll-container so that it is just behind our Panel-slot-grid.
    Set its **Rect Transform** to top-left, **Pos X** to 130, **Pos Y** to -30, **Width**
    to 300 and **Height** to 60\. So, you should now see a red rectangle behind the
    `Panel-slot-grid` inventory panel.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整 Panel-scroll-container 的大小和位置，使其正好位于 Panel-slot-grid 之后。将它的 **Rect Transform**
    设置为 top-left，**Pos X** 为 130，**Pos Y** 为 -30，**Width** 为 300 和 **Height** 为 60。因此，你现在应该看到一个红色矩形在
    `Panel-slot-grid` 库存面板后面。
- en: Add a **UI Mask** to `Panel-scroll-container` so now you should only be able
    to see the parts of `Panel-slot-grid` that fit within the rectangle of this red-tinted
    panel.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个 **UI Mask** 添加到 `Panel-scroll-container`，现在你应该只能看到 `Panel-slot-grid` 中适合这个红色着色面板矩形的部分。
- en: One workflow is to to temporarily set this mask component as inactive so that
    you can see and work on the unseen parts of Panel-slot-grid if required.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 一种工作流程是将此遮罩组件临时设置为不活动状态，以便在需要时可以看到并处理 Panel-slot-grid 中未看到的部分。
- en: 'Add a **UI Scrollbar** to the **Canvas** and name it Scrollbar-horizontal.
    Move it to be just below the red-tinted `Panel-scroll-container`, and resize it
    to be the same width as shown in the following screenshot:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Canvas** 中添加一个 **UI Scrollbar**，命名为 Scrollbar-horizontal。将其移动到红色着色的 `Panel-scroll-container`
    下方，并调整大小以与以下截图中的相同：
- en: '![](img/182db6c2-84fe-4f49-8d34-059a66ab1206.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![](img/182db6c2-84fe-4f49-8d34-059a66ab1206.png)'
- en: Add a UI **Scroll Rect** component to Panel-scroll-container. Uncheck the **Vertical**
    property of this **Scroll Rect** component.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 UI **Scroll Rect** 组件添加到 Panel-scroll-container 中。取消选中此 **Scroll Rect** 组件的
    **Vertical** 属性。
- en: In the **Inspector** panel, drag Scrolbar-horizontal to the Horizontal Scrollbar
    property of the Scroll Rect component of Panel-scroll-container.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Inspector** 面板中，将 Scrolbar-horizontal 拖动到 Panel-scroll-container 的 Scroll
    Rect 组件的 Horizontal Scrollbar 属性。
- en: 'In the **Inspector** panel, drag Panel-slot-grid to the **Content** property
    of the **Scroll Rect** component of Panel-scroll-container, as shown in the following
    screenshot:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Inspector** 面板中，将 Panel-slot-grid 拖动到 Panel-scroll-container 的 **Scroll
    Rect** 组件的 **Content** 属性，如图所示：
- en: '![](img/0933e74d-c4e7-4adc-8fc0-3c74e413459d.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0933e74d-c4e7-4adc-8fc0-3c74e413459d.png)'
- en: Now, ensure the mask component of Panel-scroll-container is set as active so
    that we don't see the overflow of Panel-slot-grid and uncheck this mask components
    option to **Show Mask Graphic** (so that we don't see the red rectangle any more).
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，确保 Panel-scroll-container 的遮罩组件设置为活动状态，这样我们就不会看到 Panel-slot-grid 的溢出部分，并取消选中此遮罩组件的
    **Show Mask Graphic** 选项（这样我们就不会再看到红色矩形）。
- en: You should now have a working scrollable inventory system.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该有一个可以工作的可滚动库存系统。
- en: Automatically changing the grid cell size based on the number of slots in the
    inventory
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据库存中的槽位数量自动调整网格单元格大小
- en: Consider a situation where we wish to change the number of slots. An alternative
    to using something like scrollbars is to change the cell size in the **Grid Layout
    Group** component. We can automate this through code so that the cell size is
    changed to ensure that `NUM_INVENTORY_SLOTS` will fit along the width of our panel
    at the top of the canvas.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一种情况，我们希望更改槽位数量。使用滚动条等方法的替代方案是在 **Grid Layout Group** 组件中更改单元格大小。我们可以通过代码来自动执行此操作，以确保单元格大小更改以确保
    `NUM_INVENTORY_SLOTS` 将沿画布顶部的面板宽度适应。
- en: 'To implement the automated resizing of the **Grid Layout Group** cell size
    for this recipe, we need to do the following:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现本配方中 **Grid Layout Group** 单元格大小的自动调整，我们需要执行以下操作：
- en: 'Comment-out the third statement in method `Awake()`:'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Awake()` 方法中注释掉第三条语句：
- en: '[PRE16]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following method Start() to the C# Script PlayerInventoryDisplay in
    GameObject player-SpaceGirl with the following code:'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将以下方法 Start() 添加到 GameObject player-SpaceGirl 中的 C# 脚本 PlayerInventoryDisplay，代码如下：
- en: '[PRE17]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We write our code in the `Start()` method, rather than adding to code in the
    Awake() method, to ensure that the `RectTransform` of GameObject Panel-slot-grid
    has finished sizing (in this recipe, it stretches based on the width of the Game
    panel). While we can't know the sequence in which **Hierarchy** GameObjects are
    created when a scene begins, we can rely on the Unity behavior that every GameObject
    sends the `Awake()` message, and only after all corresponding `Awake()` methods
    have finished executing all objects, and then sends the Start() message. So, any
    code in the `Start()` method can safely assume that every GameObject has been
    initialized.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `Start()` 方法中编写代码，而不是在 `Awake()` 方法中添加代码，以确保 GameObject Panel-slot-grid
    的 `RectTransform` 已完成尺寸调整（在本配方中，它根据游戏面板的宽度进行拉伸）。虽然我们无法知道场景开始时 **Hierarchy** GameObjects
    的创建顺序，但我们可以依赖 Unity 的行为，即每个 GameObject 都会发送 `Awake()` 消息，并且只有当所有相应的 `Awake()`
    方法执行完毕后，才会发送 `Start()` 消息。因此，`Start()` 方法中的任何代码都可以安全地假设每个 GameObject 都已初始化。
- en: '![](img/6e42b39d-5b56-4795-ba2b-11d31af8a0a9.png)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e42b39d-5b56-4795-ba2b-11d31af8a0a9.png)'
- en: The screenshot above shows the value of `NUM_INVENTORY_SLOTS` having been changed
    to 15, and the cell size, having been corresponding, changed, so that all 15 now
    fit horizontally in our panel. Note that the spacing between cells is subtracted
    from the calculated available with divided by the number of slots `(xCellSize
    -= gridLayoutGroup.spacing.x`) since that spacing is needed between each item
    displayed as well.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示了 `NUM_INVENTORY_SLOTS` 的值已更改为 15，并且单元格大小相应地更改，以便所有 15 个现在都能水平地适应我们的面板。请注意，单元格之间的间距从计算出的可用宽度中减去，并除以槽位数量
    `(xCellSize -= gridLayoutGroup.spacing.x)`，因为每个显示的项目之间也需要这个间距。
- en: Displaying multiple pickups of different objects as a list of text via a dynamic
    List<> of scripted PickUp objects
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过脚本化的 PickUp 对象的动态 List<> 将不同对象的多个拾取项显示为文本列表
- en: When working with different kinds of pickups, one approach is to use a C# List
    to maintain a flexible-length data structure of the items currently in the inventory.
    In this recipe, we will show you how, each time an item is picked up, a new object
    is added to such a List collection. An iteration through the List is how the text
    display of items is generated each time the inventory changes. We introduce a
    very simple PickUp script class, demonstrating how information about a pickup
    can be stored in a scripted component, extracted upon collision, and stored in
    our List.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理不同类型的拾取项时，一种方法是用 C# List 维护当前库存中项目的灵活长度数据结构。在本配方中，我们将向您展示，每次拾取一个项目时，都会将一个新的对象添加到这样的
    List 集合中。通过遍历 List，每次库存更改时都会生成项目文本显示。我们引入一个非常简单的 PickUp 脚本类，演示如何将拾取的信息存储在脚本组件中，在碰撞时提取，并存储在我们的
    List 中。
- en: '![](img/5509c6f0-ae2d-43c5-843f-983801722e55.png)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5509c6f0-ae2d-43c5-843f-983801722e55.png)'
- en: Getting ready
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project we set up in the first recipe in this chapter. The font you need can be
    found in the `03_02` folder.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方假设您是从本章第一道菜谱中设置的 `Simple2Dgame_SpaceGirl` 项目开始的。您需要的字体可以在 `03_02` 文件夹中找到。
- en: How to do it...
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To display inventory total text for multiple pickups of different object types,
    follow these steps:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示不同对象类型的多个拾取项的库存总数文本，请按照以下步骤操作：
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl mini-game`.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Simple2Dgame_SpaceGirl` 小游戏的全新副本开始。
- en: Edit the tags, changing Star to Pickup. Ensure that the star GameObject now
    has the Pickup tag.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑标签，将 Star 改为 Pickup。确保星形 GameObject 现在具有 Pickup 标签。
- en: '![](img/04aa78bc-5251-4ad1-b83d-4f02763715c0.png)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/04aa78bc-5251-4ad1-b83d-4f02763715c0.png)'
- en: 'Add the following C# Script **PickUp** to the GameObject star in the Hierarchy:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下C#脚本**PickUp**添加到层次结构中的GameObject星号：
- en: '[PRE18]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the Inspector, change the description property of component Pick Up (Script)
    of GameObject star to the text `star`:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将组件拾取（脚本）的GameObject星号的描述属性更改为文本`star`：
- en: '![](img/550c9efa-2e77-4c2f-b811-f2f922175e86.png)'
  id: totrans-427
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/550c9efa-2e77-4c2f-b811-f2f922175e86.png)'
- en: Select the GameObject star in the Hierarchy panel and make a copy of this GameObject,
    renaming the copy heart.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中选择GameObject星号，并复制此GameObject，将其重命名为heart。
- en: In the Inspector, change the description property of component `Pick Up` (Script)
    of GameObject heart to the text heart. Also, drag the health heart image from
    the Project panel (in the Sprites folder) into the Sprite property of GameObject
    heart. The player should now see the heart image on screen for this pickup item.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将组件`Pick Up`（脚本）的GameObject heart的描述属性更改为文本heart。同时，将健康heart图像从项目面板（在精灵文件夹中）拖动到GameObject
    heart的精灵属性中。现在玩家应该能在屏幕上看到这个拾取物品的心形图像。
- en: Select the GameObject star in the **Hierarchy** panel and make a copy of this
    GameObject, renaming the copy key.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**面板中选择GameObject星号，并复制此GameObject，将其重命名为key。
- en: In the Inspector, change the description property of component Pick Up (Script)
    of GameObject key to the text key. Also, drag the `icon_key_green_100` image from the
    Project panel (in the Sprites folder) into the Sprite property of GameObject key.
    The player should now see the key image on screen for this pickup item.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将组件拾取（脚本）的GameObject键的描述属性更改为文本键。同时，将项目面板（在精灵文件夹中）中的`icon_key_green_100`图像拖动到GameObject键的精灵属性中。现在玩家应该能在屏幕上看到这个拾取物品的钥匙图像。
- en: Make another one or two copies of each pickup GameObject and arrange them around
    the screen, so there are two or three each of star, heart, and key pickup GameObjects.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个拾取GameObject复制一个或两个，并将它们排列在屏幕周围，以便星号、heart和key拾取GameObject各有两个或三个。
- en: Create the following C# Script `PlayerInventory` in the `_Scripts` folder.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`_Scripts`文件夹中创建以下C#脚本`PlayerInventory`。
- en: '[PRE19]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Add a UI Text object (**Create** | **UI** | **Text**). Rename it Text-inventory-list.
    Change its text to the quick brown fox jumped over the lazy dog the quick brown
    fox jumped over the lazy dog, or another long list of nonsense words, to test
    the overflow settings you'll change in the next step.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个UI文本对象（**创建** | **UI** | **文本**）。将其重命名为Text-inventory-list。将文本更改为“the quick
    brown fox jumped over the lazy dog the quick brown fox jumped over the lazy dog”，或另一个长列表的胡言乱语，以测试你将在下一步更改的溢出设置。
- en: In the Text (Script) component, ensure that **Horizontal Overflow** is set to
    Wrap, and set **Vertical Overflow** to **Overflow**. This will ensure that the
    text will wrap onto a second or third line (if needed) and not be hidden if there
    are lots of pickups.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本（脚本）组件中，确保**水平溢出**设置为Wrap，并将**垂直溢出**设置为**溢出**。这将确保文本将换行到第二行或第三行（如果需要），并且如果有大量拾取物品，文本不会隐藏。
- en: In the **Inspector** panel, set its font to **Xolonium-Bold** (folder Fonts)
    and set its color to yellow. For the **Alignment** property, center the text horizontally
    and ensure that the text is top aligned vertically, set the **Font Size** to `28`,
    and choose a yellow text Color.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中，将其字体设置为**Xolonium-Bold**（在字体文件夹中）并将颜色设置为黄色。对于**对齐**属性，水平居中文本并确保文本垂直居顶，将**字体大小**设置为`28`，并选择黄色文本颜色。
- en: Edit its **Rect Transform** and set its **Height** to 50\. Then, while holding
    down *Shift* + *Alt* (to set pivot and position), choose the top-stretch box.
    The text should now be positioned at the middle top of the **Game** panel, and
    its width should stretch to match that of the whole panel.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑其**矩形变换**并将其**高度**设置为50。然后，按住*Shift* + *Alt*（以设置枢轴和位置），选择顶部拉伸框。现在文本应位于**游戏**面板的中间顶部，其宽度应拉伸以匹配整个面板的宽度。
- en: Your text should now appear at the top of the game panel.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的文本现在应出现在游戏面板的顶部。
- en: 'Add the following C# Script `PlayerInventoryDisplay` to GameObject player-girl1
    in the **Hierarchy**:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下C#脚本`PlayerInventoryDisplay`添加到**层次结构**中的GameObject player-girl1：
- en: '[PRE20]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: From the **Hierarchy**, select the GameObject player-girl1\. Then, from the
    **Inspector**, access the **Player Inventory Display (Script)** component and
    populate the **Inventory Text** public field with the **UI Text** object Text-inventory-list.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**中选择GameObject player-girl1。然后，从**检查器**中访问**玩家库存显示（脚本）**组件，并将**库存文本**公共字段填充为UI文本对象Text-inventory-list。
- en: Play the game. Each time you pick up a star or key or heart, the updated list
    of what you are carrying should be displayed in the form carrying [key] [heart].
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩这个游戏。每次你拿起一颗星星、一把钥匙或一颗心时，你携带的更新列表应以携带 [钥匙] [心] 的形式显示。
- en: How it works...k
  id: totrans-444
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...k
- en: In the script class `PlayerInventory`, the variable inventory is a C# List<>.
    This is a flexible data structure that can be sorted, searched, and dynamically
    (at runtime, when the game is being played) have items added to and removed from
    it. The `<PickUp>` in pointy brackets means that variable inventory will contain
    a list of `PickUp` objects. For this recipe, our `PickUp` class just has a single
    field, a string description, but we'll add more sophisticated data items in `PickUp`
    classes in later recipes. This variable inventory is initialized to be a new,
    empty C# List of `PickUp` objects.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本类 `PlayerInventory` 中，变量库存是一个 C# List<>。这是一个灵活的数据结构，可以进行排序、搜索，并在游戏运行时动态地添加和删除项目。尖括号中的
    `<PickUp>` 表示变量库存将包含 `PickUp` 对象的列表。在这个菜谱中，我们的 `PickUp` 类只有一个字段，即一个字符串描述，但我们在后面的菜谱中会添加更复杂的数据项到
    `PickUp` 类中。这个变量库存初始化为一个空的 C# `PickUp` 对象列表。
- en: Before the scene starts, the `Awake()` method of script class Player caches
    a reference to the `PlayerInventoryDisplay` scripted component.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景开始之前，脚本类 `Player` 的 `Awake()` 方法会缓存对 `PlayerInventoryDisplay` 脚本组件的引用。
- en: When the scene starts the `Start()` method invokes the `OnChangeInventory(...)`
    method of the `PlayerInventoryDisplay` scripted component. This is so the text
    displayed to the user at the beginning of the scene corresponds to the initial
    value of the variable inventory (which might, for some games, not be empty. For
    example, a player might start a game with some money, or a basic weapon, or a
    map).
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 当场景开始时，`Start()` 方法会调用 `PlayerInventoryDisplay` 脚本组件的 `OnChangeInventory(...)`
    方法。这样，场景开始时显示给用户的文本与变量库存的初始值相对应（对于某些游戏，库存可能不为空。例如，玩家可能带着一些钱、一把基础武器或一张地图开始游戏）。
- en: When the `OnTriggerEnter2D(...)` method detects collisions with items tagged
    Pickup, the `PickUp` object component of the item hit is added to our inventory
    list. A call is also made to the `OnChangeInventory(...)` method of `playerInventoryDisplay`
    to update out inventory display to the player, passing the updated inventory List
    as a parameter.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `OnTriggerEnter2D(...)` 方法检测到与标记为拾取的物品发生碰撞时，被击中的物品的 `PickUp` 对象组件将被添加到我们的库存列表中。同时，还会调用
    `playerInventoryDisplay` 的 `OnChangeInventory(...)` 方法来更新玩家的库存显示，并将更新后的库存列表作为参数传递。
- en: The script class `playerInventoryDisplay` has a public variable, linked to the
    UI Text object Text-inventory-list. The `OnChangeInventory(...)` method first
    sets the UI text to empty, and then loops through the inventory list, building
    up a string of each items description in square brackets ([key], [heart], and
    so on). If there were no items in the list, then the string is set to the text
    (empty inventory). Finally, the text property of the **UI Text** object Text-inventory-list
    is set to the value of this string representation of what is inside the variable
    inventory.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本类 `playerInventoryDisplay` 有一个公共变量，与 UI 文本对象 Text-inventory-list 相链接。`OnChangeInventory(...)`
    方法首先将 UI 文本设置为空，然后遍历库存列表，构建每个物品描述的字符串（[钥匙]，[心]，等等）。如果没有物品在列表中，则字符串设置为文本（空库存）。最后，将
    **UI Text** 对象 Text-inventory-list 的文本属性设置为这个字符串表示的变量库存中的内容。
- en: There's more...
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some details you won't want to miss.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你不想错过的细节。
- en: Order items in the inventory list alphabetically
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按字母顺序对库存列表中的物品进行排序
- en: It would be nice to alphabetically sort the words in the inventory list, both
    for neatness and consistency (so, in a game, if we pick up a key and a heart,
    it will look the same regardless of the order they are picked up in), but also
    so that items of the same type will be listed together so that we can easily see
    how many of each item we are carrying.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 将库存列表中的单词按字母顺序排序会很好，这不仅为了整洁和一致性（因此，在游戏中，如果我们捡起一把钥匙和一颗心，无论它们的拾取顺序如何，看起来都一样），而且还因为相同类型的物品将一起列出，这样我们可以轻松地看到我们携带了多少每种物品。
- en: 'To implement alphabetical sorting of the items in the inventory list, we need
    to do the following:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 要在库存列表中对物品进行字母排序，我们需要做以下几步：
- en: 'Add the following C# code to the beginning of method `OnChangeInventory(...)`
    in the script class `PlayerInventoryDisplay`:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 C# 代码添加到脚本类 `PlayerInventoryDisplay` 中 `OnChangeInventory(...)` 方法的开头：
- en: '[PRE21]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should now see all the items listed in alphabetic sequence.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该能看到所有物品按字母顺序列出。
- en: This C# code takes advantage of the C# List.Sort(...) method, a feature of collections
    whereby each item can be compared to the next, and they are swapped if in the
    wrong order (if the CompareTo(...) methods returns false). Learn more at[ https://msdn.microsoft.com/en-us/library/3da4abas(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/3da4abas(v=vs.110).aspx).
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 这段C#代码利用了C# List.Sort(...)方法，这是集合的一个特性，其中每个项目都可以与下一个项目进行比较，如果顺序错误（如果CompareTo(...)方法返回false），则进行交换。更多信息请参阅[ https://msdn.microsoft.com/en-us/library/3da4abas(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/3da4abas(v=vs.110).aspx)。
- en: Displaying multiple pickups of different objects as text totals via a dynamic
    Dictionary<> of PickUp objects and enum pickup types
  id: totrans-459
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过动态字典<>中的PickUp对象和枚举拾取类型显示不同对象的多个拾取作为文本总计
- en: While the previous recipe worked fine, any old text might have been typed into
    the description for a pickup or perhaps mistyped (star, Sstar, starr, and so on).
    A much better way of restricting game properties to one of a predefined (enumerated)
    list of possible values is to use C# enums. As well as removing the chance of
    mistyping a string, it also means that we can write code to appropriately deal
    with the predefined set of possible values. In this recipe, we will improve our
    general purpose `PickUp` class by introducing three possible pickup types (Star,
    Heart, and Key), and write inventory display code that counts the number of each
    type of pickup being carried and displays these totals via a **UI Text** object
    on screen. We also switch from using a **List** to using a **Dictionary**, since
    the Dictionary data structure is designed specifically for key-value pairs, perfect
    for associating a numeric total with an enumerated pickup type.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前的菜谱工作得很好，但任何旧文本可能已经被输入到拾取的描述中，或者可能输入错误（星号，Sstar，starr等）。一个更好的方法是通过使用C#枚举来限制游戏属性为预定义（枚举）列表中的一个可能值，这样可以大大减少输入字符串错误的机会。此外，这意味着我们可以编写代码来适当地处理预定义的可能值集合。在这个菜谱中，我们将通过引入三种可能的拾取类型（星号，心形，钥匙）来改进我们的通用`PickUp`类，并编写库存显示代码，计算携带每种类型拾取的数量，并通过屏幕上的**UI
    Text**对象显示这些总计。我们还从使用**List**切换到使用**Dictionary**，因为Dictionary数据结构专门设计用于键值对，非常适合将数值总计与枚举拾取类型关联起来。
- en: '![](img/19a086e7-1556-47f7-b1f6-2bf25d6e5daf.png)'
  id: totrans-461
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/19a086e7-1556-47f7-b1f6-2bf25d6e5daf.png)'
- en: In this recipe, we will also manage the additional complexity by separating
    the controller (user collection event) logic from the stored inventory data, by
    introducing an inventory manager scripted class. Our player controller is then
    simplified to just two methods (Awake, getting a reference to the inventory manager,
    and `OnTriggerEnter2D`, responding to collisions by communicating with the inventory
    manager).
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过引入一个脚本类库存管理器，将控制器（用户收集事件）逻辑与存储的库存数据分离，从而管理额外的复杂性。然后，我们的玩家控制器简化为仅两个方法（Awake，获取库存管理器的引用，以及`OnTriggerEnter2D`，通过与库存管理器通信来响应碰撞）。
- en: Getting ready
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe adapts the previous one. So, make a copy of the project for the
    previous recipe, and work on this copy.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱是对之前的菜谱的改编。因此，复制之前菜谱的项目，并在这个副本上工作。
- en: How to do it...
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To display multiple pickups of different objects as text totals via a dynamic
    Dictionary, follow these steps:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过动态字典显示不同对象的多个拾取作为文本总计，请按照以下步骤操作：
- en: 'Replace the content of the script class `PickUp` with the following code:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本类`PickUp`的内容替换为以下代码：
- en: '[PRE22]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Remove the instance of the script class `PlayerInventory` from the GameObject
    `player-SpaceGirl`.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GameObject `player-SpaceGirl`中移除脚本类`PlayerInventory`的实例。
- en: 'Create a new C# script class `PlayerController` containing the following code,
    and add an instance as a component to GameObject `player-girl1`:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本类`PlayerController`，包含以下代码，并将其实例作为组件添加到GameObject `player-girl1`中：
- en: '[PRE23]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`PickUp item = hit.GetComponent<PickUp> ();`'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`PickUp item = hit.GetComponent<PickUp> ();`'
- en: '[PRE24]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Replace the content of script class `PlayerInventoryDisplay` with the following
    code:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本类`PlayerInventoryDisplay`的内容替换为以下代码：
- en: '[PRE25]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add an instance of the following C# Script `InventoryManager` to the GameObject
    `player-SpaceGirl` in the Hierarchy:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下C#脚本`InventoryManager`的实例添加到Hierarchy中的GameObject `player-SpaceGirl`：
- en: '[PRE26]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the **Hierarchy** (or **Scene**) panel, select *each pickup* GameObject in
    turn, and choose from the drop-down menu its corresponding **Type** in the **Inspector**
    panel. As you can see, public variables that are of an enum type are automatically
    restricted to the set of possible values as a combo-box drop-down menu in the
    **Inspector** panel.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次**（或 **场景**）面板中，依次选择每个拾取 GameObject，并在 **检查器**面板的下拉菜单中选择其对应的 **类型**。正如你所看到的，公共变量如果是枚举类型，将自动限制为可能的值集合，作为
    **检查器**面板中的组合框下拉菜单。
- en: '![](img/5bc6bcee-c71a-4fcf-b13e-46beb373366f.png)'
  id: totrans-479
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bc6bcee-c71a-4fcf-b13e-46beb373366f.png)'
- en: Play the game. First, you should see a message on screen stating the inventory
    is empty, and then as you pick up one or more items of each pickup type, you'll
    see text totals of each type you have collected.
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩游戏。首先，你应该在屏幕上看到一个消息，说明库存为空，然后当你拾取每种拾取类型的单个或多个物品时，你会看到你收集到的每种类型的文本总数。
- en: How it works...
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each pickup GameObject in the scene has a scripted component of the class `PickUp`.
    The `PickUp` object for each `Pickup` GameObject has a single property, a pickup
    type, which has to be one of the enumerated set of `Star`, `Key`, or `Heart`.
    The use of an enumerated type means that the value has to be one of these three
    listed values, so there can be no misspelling/mistyping errors that could have
    happened with a general text string type, as in the previous recipe.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 场景中的每个拾取 GameObject 都有一个 `PickUp` 类的脚本组件。每个 `Pickup` GameObject 的 `PickUp` 对象有一个单一属性，即拾取类型，它必须是
    `Star`、`Key` 或 `Heart` 的枚举集合中的一个。使用枚举类型意味着值必须是这三个列出的值之一，因此不可能出现像上一个配方中通用文本字符串类型那样的拼写错误或输入错误。
- en: 'Previously, the script class `PlayerInventory` script had two sets of responsibilities:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，脚本类 `PlayerInventory` 脚本有两个职责集：
- en: Maintain the internal record of items being carried
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护所携带物品的内部记录
- en: Detect collisions, update the state, and ask the display class to inform the
    player visually of the changed items being carried
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测碰撞，更新状态，并要求显示类通知玩家所携带物品的变化
- en: 'In this recipe, we separate these two set of responsibilities into separate
    script classes:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将这两组职责分别分离到独立的脚本类中：
- en: The script class InventoryManager will maintain the internal record of items
    being carried (and ask the display class to inform the player visually each time
    there is a change to the items being carried).
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本类 `InventoryManager` 将维护所携带物品的内部记录（并在每次物品携带发生变化时要求显示类通知玩家）。
- en: The script class `Player` will detect collisions, and ask the `InventoryManager` to
    update what is being carried.
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本类 `Player` 将检测碰撞，并要求 `InventoryManager` 更新所携带的内容。
- en: The addition of this extra software layer both separates the player collision
    detection behavior from how the inventory is internally stored, and also prevents
    any single script class from becoming too complex by attempting to handle too
    many different responsibilities. This recipe is an example of the low coupling
    of the **Model-View-Controller** (**MVC**) design pattern. We have designed our
    code to not rely on or make too many assumptions about other parts of the game
    so that the likelihood of a change in some other part of our game breaking our
    inventory display code is reduced. The display (view) is separated from the logical
    representation of what we are carrying (inventory manager model), and changes
    to the model are made by public methods called from the player (controller).
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这个额外的软件层既将玩家碰撞检测行为与库存的内部存储方式分开，也防止任何单个脚本类因为尝试处理过多的不同职责而变得过于复杂。这个配方是 **模型-视图-控制器**（**MVC**）设计模式低耦合的一个例子。我们设计代码不依赖于或对游戏的其他部分做出太多假设，以降低游戏其他部分的变化破坏我们的库存显示代码的可能性。显示（视图）与我们所携带的逻辑表示（库存管理器模型）分离，模型的变化是通过玩家（控制器）调用的公共方法进行的。
- en: The Player script class gets a reference to the `InventoryManager` component
    via its Awake() method, and each time the player's character collides with a pickup
    GameObject, it calls the `Add(...)` method of the inventory manager, passing the
    PickUp object of the object collided with.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家脚本类通过其 `Awake()` 方法获取对 `InventoryManager` 组件的引用，并且每次玩家的角色与拾取 GameObject 发生碰撞时，它都会调用库存管理器的
    `Add(...)` 方法，传递与碰撞对象关联的 `PickUp` 对象。
- en: 'In the script class `InventoryManager`, the inventory being carried by the
    player is being represented by a C# **Dictionary**. A Dictionary is made up of
    a sequence of *key-value pairs*, where the key is one of the possible `PickUp.PickUpType`
    enumerated **values**, and the value is an integer total of how many of that type
    of pickup is being carried. The Dictionary is declared stating what type will
    be used for a key, and then what type (or script class) will be stored as the
    value for that key. Here is the statement declaring our Dictionary variable items:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本类 `InventoryManager` 中，玩家携带的库存被表示为一个 C# **字典**。字典由一系列 *键值对* 组成，其中键是可能的 `PickUp.PickUpType`
    枚举 **值** 之一，值是携带该类型拾取的整数总计。声明字典时，指定将用于键的类型，然后指定将存储为该键值的类型（或脚本类）。以下是声明我们的字典变量 `items`
    的语句：
- en: '[PRE27]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: C# dictionaries provide a `TryGetValue(...)` method, which receives parameters
    of a key and is passed a reference to a variable the same data type as the value
    for the Dictionary. When the `Add(...)` method of the inventory manager is called,
    the type of the PickUp object is tested to see if a total for this type is already
    in Dictionary items. If an item total is found inside the Dictionary for the given
    type, then the value for this item in the Dictionary is incremented. If no entry
    is found for the given type, then a new element is added to the Dictionary with
    a total of 1.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: C# 字典提供了 `TryGetValue(...)` 方法，该方法接收一个键的参数，并传递一个与字典值相同数据类型的变量的引用。当调用库存管理器的 `Add(...)`
    方法时，会测试拾取对象的类型，以查看是否已经在字典项中存在该类型的总计。如果在字典中找到了给定类型的项总计，则将字典中该项目的值增加。如果没有找到给定类型的条目，则将在字典中添加一个新元素，其总计为
    1。
- en: '**TryGetValue call-by-reference parameter** Note the use of the C# `out` keyword before
    the parameter `oldTotal` in this statement:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '**`TryGetValue` 引用参数调用** 注意在此语句中参数 `oldTotal` 前的 C# `out` 关键字的使用：'
- en: '`items.TryGetValue(type, out oldTotal)`'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`items.TryGetValue(type, out oldTotal)`'
- en: indicates that a reference to the actual variable oldTotal is being passed to
    method `TryGetValue(...)`, not just a copy of its value. This means that the method
    can change the value of the variable.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 表示正在将实际变量 `oldTotal` 的引用传递给方法 `TryGetValue(...)`，而不仅仅是其值的副本。这意味着该方法可以更改变量的值。
- en: The method returns true if an entry is found in the Dictionary for the given
    type, and if so, sets the value of oldTotal to the value against this key.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在字典中找到了给定类型的条目，则方法返回 `true`，并且如果找到，则将 `oldTotal` 的值设置为该键的值。
- en: The last action of the `Add(...)` method is to call the `OnChangeInventory(...)`
    method of the `PlayerInventoryDisplay` scripted component of the player GameObject
    to update the text totals displayed on screen.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`Add(...)` 方法的最后一个动作是调用玩家 GameObject 的脚本组件 `PlayerInventoryDisplay` 中的 `OnChangeInventory(...)`
    方法，以更新屏幕上显示的文本总计。'
- en: The method `OnChangeInventory(...)` of the script class `PlayerInventoryDisplay`
    first initializes the string variable `newInventoryText`, and then iterates through
    each item in the Dictionary, appending to `newInventoryText` a string of the type
    name and total for the current item. Finally, the text property of the UI Text
    object is updated with the completed text inside `newInventoryText`, showing the
    pickup totals to the player.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本类 `PlayerInventoryDisplay` 的 `OnChangeInventory(...)` 方法首先初始化字符串变量 `newInventoryText`，然后遍历字典中的每个项目，将当前项目的类型名称和总计作为字符串附加到
    `newInventoryText` 上。最后，将 UI 文本对象的文本属性更新为 `newInventoryText` 中的完整文本，向玩家显示拾取总计。
- en: Learn more about using C# lists and dictionaries in Unity in the Unity Technologies
    tutorial at [https://unity3d.com/learn/tutorials/modules/intermediate/scripting/lists-and-dictionaries](https://unity3d.com/learn/tutorials/modules/intermediate/scripting/lists-and-dictionaries).
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 技术教程中了解更多关于在 Unity 中使用 C# 列表和字典的信息，请访问 [https://unity3d.com/learn/tutorials/modules/intermediate/scripting/lists-and-dictionaries](https://unity3d.com/learn/tutorials/modules/intermediate/scripting/lists-and-dictionaries)。
