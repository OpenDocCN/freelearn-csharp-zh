- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Other Interactable UI Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他可交互 UI 组件
- en: The most popular interactable UI components are Buttons. However, there are
    multiple types of interactable UI elements other than buttons. If you think of
    an online form you’ve filled out recently, you’ve probably interacted with buttons,
    text fields, and possibly a radio button or checkbox. While technically all of
    these interactable items can be developed with UI Buttons, UI Text, and some custom
    code, you don’t have to build them yourself! Unity has included, within the uGUI
    system, multiple commonly used interactable UI items both as GameObjects that
    you can edit and as components that you can add to pre-existing GameObjects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的可交互 UI 组件是按钮。然而，除了按钮之外，还有多种类型的可交互 UI 元素。如果您想到了您最近填写过的在线表单，您可能已经与按钮、文本字段以及可能是一个单选按钮或复选框进行了交互。虽然从技术上讲，所有这些可交互项都可以使用
    UI 按钮、UI 文本和一些自定义代码来开发，但您不必自己构建它们！Unity 在 uGUI 系统中包含了多个常用可交互 UI 元素，既可以作为可编辑的 GameObject，也可以作为可以添加到现有
    GameObject 中的组件。
- en: This chapter will review all the other pre-built UI items that come with the
    uGUI system. After having reviewed the chapters on buttons and text, most of these
    objects’ properties will be familiar to you, but each interactable item has a
    few properties exclusive to that UI item type, so we’ll focus on those properties.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将回顾 uGUI 系统附带的所有其他预构建 UI 元素。在回顾了按钮和文本章节之后，这些对象的属性中的大多数您都应该熟悉，但每个可交互项都有一些仅限于该
    UI 元素类型的属性，因此我们将重点关注这些属性。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: Using UI Toggles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 UI 开关
- en: Using UI Sliders
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 UI 滑块
- en: Using UI Dropdowns and Dropdown – TextMeshPros
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 UI 下拉菜单和 Dropdown – TextMeshPros
- en: Using UI Input Fields and Input Field – TextMeshPros
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 UI 输入字段和输入字段 – TextMeshPros
- en: Creating a dropdown menu with images
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建带有图像的下拉菜单
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples shown in this section can be found within the Unity project
    provided in the code bundle. They can be found within the scene labeled **Chapter13**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中展示的所有示例都可以在代码包提供的 Unity 项目中找到。它们位于标记为 **Chapter13** 的场景中。
- en: Each example image has a caption stating the example number within the scene.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个示例图像都有一个标题，说明场景中的示例编号。
- en: In the scene, each example is on its own Canvas, and some of the Canvases are
    deactivated. To view an example on a deactivated Canvas, simply select the checkbox
    next to the Canvas’ name in the **Inspector**. Each Canvas is also given its own
    Event System. This will cause errors if you have more than one Canvas activated
    at a time.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中，每个示例都在自己的 Canvas 上，其中一些 Canvas 已被禁用。要查看已禁用的 Canvas 上的示例，只需在 **Inspector**
    中选择 Canvas 名称旁边的复选框。每个 Canvas 也都有自己的事件系统。如果您同时激活多个 Canvas，这将导致错误。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code for this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2013](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2013)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到本章的代码：[https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2013](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2013)
- en: Using UI Toggle
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 UI 开关
- en: The **UI Toggle** object is an interactable checkbox with a label. To create
    a UI Toggle, select **+** | **UI** | **Toggle**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**UI 开关** 对象是一个带有标签的可交互复选框。要创建 UI 开关，请选择 **+** | **UI** | **Toggle**。'
- en: '![Figure 13.1: UI Toggle GameObject and children](img/Figure_13.01_B18327.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1：UI 开关 GameObject 及其子项](img/Figure_13.01_B18327.jpg)'
- en: 'Figure 13.1: UI Toggle GameObject and children'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1：UI 开关 GameObject 及其子项
- en: 'By default, a UI Toggle has two children: a `Background` and a `Label`. The
    `Background` also has a child, a `Checkmark`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，UI 开关有两个子项：一个 `Background` 和一个 `Label`。`Background` 也有一个子项，即 `Checkmark`。
- en: The `Background` child is a UI Image that represents the “box” in which the
    `Checkmark` UI Image appears. The `Label` is a UI Text object.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Background` 子项是一个表示 `Checkmark` UI 图像出现的“框”的 UI Image。`Label` 是一个 UI 文本对象。'
- en: If you want to change the appearance of the box and checkmark, you change the
    source images of the Image components on the `Background` and `Checkmark` children,
    respectively.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改框和勾选标记的外观，您需要更改 `Background` 和 `Checkmark` 子项上 Image 组件的源图像。
- en: Toggle component
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开关组件
- en: 'The parent Toggle object has a **Toggle** component. The Toggle component looks
    very similar to the Button component and has many of the same properties. As you’ll
    see in this chapter, the first few properties of all interactable UI objects are
    the same. The properties at the bottom of the component are the ones that are
    exclusive to the UI Toggle object (*Figure 13**.2*):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 父级切换对象有一个**切换**组件。切换组件看起来与按钮组件非常相似，并且具有许多相同的属性。正如您在本章中将会看到的，所有可交互UI对象的前几个属性都是相同的。组件底部的属性是仅属于UI切换对象的独有属性（*图13.2*）：
- en: '![Figure 13.2: The Toggle component unique properties](img/Figure_13.02_B18327.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2：切换组件的独特属性](img/Figure_13.02_B18327.jpg)'
- en: 'Figure 13.2: The Toggle component unique properties'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：切换组件的独特属性
- en: The **Is On** property determines whether the Toggle is checked or not when
    it is initialized in the scene.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**是否开启**属性决定了当切换在场景中初始化时是否被选中。'
- en: The **Toggle Transition** property determines what happens when the toggle transitions
    between on and off or checked and not checked. The two options are **None** and
    **Fade**. The **None** transition will instantaneously toggle between the checkmark
    Image being visible and not visible while the **Fade** transition will have the
    checkmark Image fade in and out.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**切换过渡**属性决定了当切换在开启和关闭或选中和非选中之间转换时会发生什么。有两个选项：**无**和**淡入淡出**。**无**过渡将立即在勾选图像可见和不可见之间切换，而**淡入淡出**过渡将使勾选图像淡入淡出。'
- en: The **Graphic** property assigns the **Image** component that will display the
    checkmark. The Checkmark child’s Image component is automatically assigned to
    this property, but you can change it if you so desire.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**图形**属性分配了将显示勾选标记的**图像**组件。勾选标记子组件的图像组件将自动分配给此属性，但您可以更改它，如果您愿意的话。'
- en: The last property, **Group**, assigns the **Toggle Group** component that will
    define which Toggle Group the Toggle belongs to (if any).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个属性，**组**，分配了将定义切换所属的**切换组**组件（如果有的话）。
- en: The **Toggle** component’s default Event is the On Value Changed Event, as seen
    in the **On Value Changed (****Boolean)** section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**切换**组件的默认事件是**值改变**事件，正如在**值改变（布尔值）**部分所看到的。'
- en: Toggle default event – On Value Changed (Boolean)
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换默认事件 – 值改变（布尔值）
- en: The **Toggle** component’s default event is the **On Value Changed** Event,
    as seen in the **On Value Changed (Boolean)** section of the Toggle component.
    This event will trigger whenever the toggle is selected or deselected. It can
    accept a Boolean argument.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**切换**组件的默认事件是**值改变**事件，正如在**切换组件的值改变（布尔值）**部分所看到的。此事件将在切换被选中或取消选中时触发。它可以接受布尔参数。'
- en: 'When a public function has a Boolean parameter, it will appear twice within
    the function’s dropdown list of **On Value Changed (Boolean)** events: once within
    a **Static Parameter** list and again within the **Dynamic bool** list, as shown
    in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个公共函数有一个布尔参数时，它将在函数下拉列表中的**值改变（布尔值）**事件中出现两次：一次在**静态参数**列表中，再次在**动态布尔值**列表中，如下面的截图所示：
- en: '![Figure 13.3: The static and dynamic versions of the ToggleWithParameter method](img/Figure_13.03_B18327.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3：ToggleWithParameter方法的静态和动态版本](img/Figure_13.03_B18327.jpg)'
- en: 'Figure 13.3: The static and dynamic versions of the ToggleWithParameter method'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：ToggleWithParameter方法的静态和动态版本
- en: If the function is selected from the `ToggleWithParameter()` function will be
    false (since the checkbox is deselected).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从`ToggleWithParameter()`函数中选择，则该函数将为假（因为复选框已被取消选中）。
- en: If you want to pass the `.isOn` value of the Toggle to the script, the function
    must be chosen from the **Dynamic bool** (not **Static Parameters**) list in the
    function dropdown of the event.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将切换的`.isOn`值传递到脚本中，则必须在事件的下拉列表中选择**动态布尔值**（而不是**静态参数**）列表中的函数。
- en: 'To demonstrate how **On Value Changed (Boolean)** events work, let’s see how
    the following two functions respond when called:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示**值改变（布尔值）**事件的工作方式，让我们看看以下两个函数在被调用时的响应：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following events are added to a Toggle in the Chapter13 scene:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在第13章场景中添加到切换组件的事件如下：
- en: '![Figure 13.4: Events on the Toggle Event Example in the Chapter13 scene](img/Figure_13.04_B18327.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4：第13章场景中切换事件示例的事件](img/Figure_13.04_B18327.jpg)'
- en: 'Figure 13.4: Events on the Toggle Event Example in the Chapter13 scene'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：第13章场景中切换事件示例的事件
- en: 'When the **Toggle** within the scene is deselected, the following will print
    in the **Console**:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当场景中的**切换**被取消选中时，以下内容将在**控制台**中打印：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the **Toggle** is selected, the following will print in the **Console**:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当**切换**被选中时，以下内容将在**控制台**中打印：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since the function called from the first event does not have a parameter, it
    will always execute when the value of the Toggle changes, regardless of what the
    value of the Toggle is when executed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于从第一个事件调用的函数没有参数，它将在切换的值改变时始终执行，而不管执行时切换的值是什么。
- en: The second event will always print the value of `False`, because the function
    has a parameter and, since the event was chosen from the `False`. So, the value
    `False` is always sent to the function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个事件将始终打印`False`的值，因为函数有一个参数，并且由于事件是从`False`中选择的。因此，`False`的值始终被发送到函数。
- en: The third event’s function was chosen from the `.isOn` value to which the Toggle
    changes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第三事件的功能是从切换更改到的`.isOn`值中选择的。
- en: Toggle Group component
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换组组件
- en: The **Toggle Group** component allows you to have many UI Toggles that work
    together, where only one can be selected or *on* at a time. When Toggles are in
    the same Toggle Group, selecting one Toggle will turn *off* all others. For the
    Toggle Group to work properly at the start, you should either set all the Toggles
    within the Toggle group’s **Is On** property to **False** or set only a single
    Toggle’s **Is On** property to **True**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**切换组**组件允许你拥有许多协同工作的UI切换，其中一次只能选择或开启一个。当切换位于同一切换组中时，选择一个切换将关闭其他所有切换。为了使切换组在开始时正常工作，你应该将切换组内的所有切换的**开启**属性设置为**False**，或者只将单个切换的**开启**属性设置为**True**。'
- en: The **Toggle Group** component does not create a renderable UI object, so attaching
    it to an empty GameObject will not create any visible element.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**切换组**组件不会创建可渲染的UI对象，因此将其附加到空GameObject上不会创建任何可见元素。'
- en: 'Once the **Toggle Group** component is attached to a GameObject, the GameObject
    it is attached to must be dragged into the **Group** property of each of the Toggles
    that will be contained within the group:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦**切换组**组件附加到一个GameObject上，该GameObject必须被拖动到每个将被包含在组内的切换的**组**属性中：
- en: '![Figure 13.5: The Toggle Group component properties](img/Figure_13.05_B18327.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5：切换组组件属性](img/Figure_13.05_B18327.jpg)'
- en: 'Figure 13.5: The Toggle Group component properties'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：切换组组件属性
- en: 'There is only one property on the **Toggle Group** component: **Allow Switch
    Off**. The **Allow Switch Off** property allows the Toggles to be turned off if
    they are selected when already in the on state. Remember that the Toggle Group
    component forces at most one Toggle on at a time. So, the **Allow Switch Off**
    property being turned off forces there to be at least one Toggle selected at all
    times.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**切换组**组件上只有一个属性：**允许关闭**。**允许关闭**属性允许在切换处于开启状态时将其关闭。请记住，切换组组件强制每次最多只有一个切换处于开启状态。因此，**允许关闭**属性被关闭将强制始终至少有一个切换被选中。'
- en: My suggestion when using this component is to use an empty GameObject that acts
    as the parent for all the Toggles you wish to group together. This empty GameObject
    will then contain the Toggle Group component (as demonstrated in the **Toggle
    Group Example** in the Chapter13 scene). The object containing the Toggle Group
    component must then be assigned to the **Group** property on the **Toggle** component
    of each of the Toggle children.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此组件时，我的建议是使用一个空GameObject作为你希望分组在一起的切换的父项。然后，这个空GameObject将包含切换组组件（如第13章场景中的**切换组示例**所示）。包含切换组组件的对象必须随后分配到每个切换子项的**切换**组件上的**组**属性。
- en: UI Slider
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI滑块
- en: The UI Slider object allows the user to drag a handle along a path. The position
    on the path corresponds to a range of values.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: UI滑块对象允许用户沿着路径拖动把手。路径上的位置对应于一系列值。
- en: To create a UI Slider, select `Background`, a `Fill Area`, and a `Handle Slide
    Area`. The Fill Area also has a child, Fill, and the Handle Slide Area has a child,
    Handle.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个UI滑块，选择`背景`、`填充区域`和`把手滑动区域`。填充区域也有一个子项，即填充，把手滑动区域有一个子项，即把手。
- en: The Background child is a UI Image that represents the full area that the Slider’s
    Handle can traverse. In the default Slider example, this is the darker gray background
    area that gets filled.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 背景子项是一个UI图像，它代表了滑块把手可以遍历的整个区域。在默认的滑块示例中，这是被填充的较暗灰色背景区域。
- en: The Fill Area child is an empty GameObject. Its main purpose is to ensure that
    its child, the Fill, is correctly aligned. The Fill is a UI Image that stretches
    across the Fill Area based on the Slider’s value. In the default Slider example,
    this is the light gray area that trails behind the handle and fills in the Background.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 填充区域子对象是一个空的游戏对象。其主要目的是确保其子对象，即填充，正确对齐。填充是一个基于滑块值的UI图像。在默认的滑块示例中，这是跟随手柄并在背景中填充的浅灰色区域。
- en: The Handle Slide Area child is also an empty GameObject. Its purpose is to ensure
    that its child, the Handle, is correctly positioned and aligned. The Handle is
    also a UI Image. The Handle represents the interactable area of the Slider.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 处理滑动区域子对象也是一个空的游戏对象。其目的是确保其子对象，即手柄，正确定位和校准。手柄也是一个UI图像。手柄代表滑块的交互区域。
- en: If you want to change the appearance of the Slider, you change the **Source
    Image** of the **Image** components on the Background, Fill, and Handle children.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想改变滑块的外观，您需要更改背景、填充和手柄子对象上的**源图像**的**图像**组件。
- en: Slider component
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑块组件
- en: 'The parent Slider object has a **Slider** component. It has all the properties
    common to the interactable UI objects along with a few that are exclusive to Sliders,
    as highlighted in the following figure:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 父滑块对象有一个**滑块**组件。它具有所有交互式UI对象共有的属性，以及一些仅限于滑块的属性，如下面的图所示：
- en: '![Figure 13.6: The unique properties of the Slider component](img/Figure_13.06_B18327.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6：滑块组件的独特属性](img/Figure_13.06_B18327.jpg)'
- en: 'Figure 13.6: The unique properties of the Slider component'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6：滑块组件的独特属性
- en: The **Fill Rect** property assigns the Rect Transform of the object that displays
    the Image of the filled area. By default, this is the Fill GameObject’s Transform
    component. You’ll note that on the Rect Transform component of the Fill, a message
    stating **Some values driven by Slider** is displayed. This indicates that the
    values are changed based on the **Slider** component. While playing the scene,
    if you move the Handle of the Slider, you will not see the Rect Transform properties
    of the Fill update. However, if you make the Scene view visible while moving the
    Handle in the **Game** view, you will see the Rect Transform area of the Fill
    change as you affect the slider.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**填充矩形**属性分配显示填充区域图像的对象的矩形变换。默认情况下，这是填充游戏对象的变换组件。您会注意到在填充的矩形变换组件上显示了一条消息，指出**某些值由滑块驱动**。这表明这些值是根据**滑块组件**来改变的。在播放场景时，如果您移动滑块的手柄，您将看不到填充的矩形变换属性更新。然而，如果您在**游戏**视图中移动手柄时使场景视图可见，您将看到填充的矩形变换区域随滑块的变化而变化。'
- en: The **Handle Rect** property assigns the Rect Transform of the object that displays
    the handle’s image. By default, the Rect Transform of Handle is assigned to this
    property. You’ll note that the Rect Transform component on the Handle GameObject
    also has the **Some values driven by Slider** message since the position of the
    Handle is affected by the Slider.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**手柄矩形**属性分配显示手柄图像的对象的矩形变换。默认情况下，手柄的矩形变换被分配给此属性。您会注意到手柄游戏对象上的矩形变换组件也有**某些值由滑块驱动**的消息，因为手柄的位置受到滑块的影响。'
- en: The range of values that the Slider represents is determined by the **Min Value**
    and **Max Value** properties. You can assign any value to the **Min Value** and
    **Max Value** properties, even negative numbers. While the **Inspector** allows
    you to define the **Min Value** as a number larger than the **Max Value**, the
    Slider will not work properly if you do so.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块表示的值范围由**最小值**和**最大值**属性确定。您可以分配任何值给**最小值**和**最大值**属性，甚至负数。虽然**检查器**允许您将**最小值**定义为大于**最大值**的数字，但如果这样做，滑块将无法正常工作。
- en: The **Direction** property allows you to select the orientation of the Slider.
    The available options are **Left To Right**, **Right To Left**, **Bottom To Top**,
    and **Top to Bottom**. The order of the positions in each direction represents
    the first position (or **Min Value**) and then the last position (or **Max Value**)
    of the Slider’s value range.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**方向**属性允许您选择滑块的朝向。可用的选项包括**从左到右**、**从右到左**、**从下到上**和**从上到下**。每个方向中位置顺序代表滑块值范围的第一个位置（或**最小值**）和最后一个位置（或**最大值**）。'
- en: If the **Whole Numbers** property is selected, the range of values the Slider
    can represent will be restricted to integer (non-decimal) values.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**整数**属性，滑块可以表示的值范围将限制为整数（非小数）值。
- en: Note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As I am a math teacher, I feel the need to point this out. In math, the term
    Whole Numbers represents all non-negative Integers (0 through infinity). Here,
    in the Slider component, the term Whole Numbers represents all Integers, even
    negative ones. So, if you’re a math nerd like me, don’t let this imply to you
    that the Slider cannot hold negative values if the **Whole Numbers** property
    is selected.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我是一名数学老师，我觉得有必要指出这一点。在数学中，术语“整数”代表所有非负整数（从 0 到无穷大）。在这里，在滑动条组件中，术语“整数”代表所有整数，包括负数。因此，如果你像我一样是个数学爱好者，不要让这一点让你认为如果选择了**整数**属性，滑动条就不能持有负值。
- en: The **Value** property is the value of the Slider. The position of the Slider’s
    Handle is tied to this property. The slider in the **Inspector** next to the **Value**
    property is a one-to-one representation of the Slider in the scene.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**值**属性是滑动条的值。滑动条的把手位置与该属性相关联。**检查器**中与**值**属性相邻的滑动条是对场景中滑动条一对一的表示。'
- en: Slider default event – On Value Changed (Single)
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滑动条默认事件 – On Value Changed (Single)
- en: The Slider component’s default event is the On Value Changed event, as seen
    in the **On Value Changed (Single)** section of the Slider component. This event
    will trigger whenever the Slider’s Handle is moved. It can accept a float argument.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动条组件的默认事件是“值改变”事件，如滑动条组件的“**值改变（单值）**”部分所示。每当滑动条的把手被移动时，此事件都会触发。它可以接受一个浮点数参数。
- en: If you want the Slider’s value to be sent as an argument to a function that
    has a parameter, you must select the function from the Dynamic float list (similar
    to selecting functions from the Toggle’s Dynamic bool list).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望将滑动条的值作为参数传递给一个具有参数的函数，你必须从动态浮点数列表中选择该函数（类似于从切换的动态布尔列表中选择函数）。
- en: 'The following functions and screenshot represent a Slider example found in
    the Chapter7Text scene that triggers events that call functions with and without
    parameters:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数和截图展示了在 Chapter7Text 场景中找到的滑动条示例，该示例触发调用带有和没有参数的函数的事件：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following screenshot, the third option shows the function chosen from
    the **Dynamic float** list and will send the value of the **Value** property as
    an argument to the function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，第三个选项显示了从**动态浮点数**列表中选择的函数，并将发送**值**属性的值作为参数传递给该函数：
- en: '![Figure 13.7: Events on Slider Example in the Chapter13 Scene](img/Figure_13.07_B18327.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.7：Chapter13 场景中滑动条示例的事件](img/Figure_13.07_B18327.jpg)'
- en: 'Figure 13.7: Events on Slider Example in the Chapter13 Scene'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7：Chapter13 场景中滑动条示例的事件
- en: Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It’s important to note that if the **Whole Numbers** property is selected and
    the Slider can only hold integer values, the functions called by this event will
    receive those integers as float values.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，如果选择了**整数**属性并且滑动条只能持有整数值，那么由该事件调用的函数将接收这些整数作为浮点数值。
- en: Now that we’ve reviewed how to use Sliders, let’s review how to use the two
    types of Dropdowns.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了如何使用滑动条，让我们回顾如何使用两种类型的下拉菜单。
- en: UI Dropdown and Dropdown – TextMeshPro
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 下拉和 Dropdown – TextMeshPro
- en: There are two Dropdown UI objects available, the UI Dropdown object packaged
    in Unity and the Dropdown—TextMeshPro object. Both the Dropdown objects allow
    the user to select from a list of options. The list becomes visible when the Dropdown
    is clicked on. Once an object is selected from the list, the list will collapse,
    making the chosen option visible within the Dropdown (if desired).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种下拉 UI 对象可供使用，分别是 Unity 中打包的 UI 下拉对象和 Dropdown—TextMeshPro 对象。这两个下拉对象都允许用户从选项列表中进行选择。当点击下拉按钮时，列表会变为可见。一旦从列表中选择了一个对象，列表将折叠，使所选选项在下拉菜单中可见（如果需要的话）。
- en: The two Dropdown options are pretty much identical in the way they work. The
    only difference between the two is the UI Dropdown uses UI Text objects to display
    text while the Dropdown—TextMeshPro uses Text - TextMeshPro objects. Due to this,
    I will discuss the two objects at the same time in this section. Additionally,
    because the two objects are identical in function, you will need to use Dropdown—TextMeshPro
    over the UI Dropdown if you want to include “fancy” text.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个下拉选项在功能上几乎相同。两者之间的唯一区别是 UI 下拉使用 UI 文本对象来显示文本，而 Dropdown—TextMeshPro 使用 Text
    - TextMeshPro 对象。因此，我将在这个部分同时讨论这两个对象。此外，由于这两个对象在功能上相同，如果你想包含“花哨”的文本，你需要使用 Dropdown—TextMeshPro
    而不是 UI 下拉。
- en: 'To create a UI Dropdown, select **+** | **UI** | **Dropdown**. To create a
    Dropdown—TextMeshPro, select **+** | **UI** | **Dropdown - TextMeshPro**. As you
    can see in the following screenshot (*Figure 13**.8*), the two Dropdown objects
    have identical parent/child object relationships and names. By default, the Dropdown
    objects have three children: a Label, an Arrow, and a Template. The Template child
    is disabled by default (hence, it appears grayed out in the Hierarchy) and has
    multiple children.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 UI 下拉，请选择 **+** | **UI** | **下拉**。要创建 TextMeshPro 下拉，请选择 **+** | **UI**
    | **下拉 - TextMeshPro**。如以下截图（*图 13**.8*）所示，两个下拉对象具有相同的父/子对象关系和名称。默认情况下，下拉对象有三个子项：一个标签、一个箭头和一个模板。模板子项默认禁用（因此，在层次结构中显示为灰色），并且有多个子项。
- en: The Template child and all of its children are discussed in the *Dropdown Template*
    section of this chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的**下拉模板**部分讨论了模板子项及其所有子项。
- en: '![Figure 13.8: The Hierarchy of the two types of dropdowns](img/Figure_13.08_B18327.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.8：两种下拉类型的层次结构](img/Figure_13.08_B18327.jpg)'
- en: 'Figure 13.8: The Hierarchy of the two types of dropdowns'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8：两种下拉类型的层次结构
- en: In the following paragraphs, I will discuss all Text objects as if they are
    UI Text objects. However, remember that the Dropdown—TextMeshPro uses TextMeshPro
    - Text objects.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下段落中，我将讨论所有文本对象，就好像它们是 UI 文本对象一样。然而，请记住，下拉—TextMeshPro 使用 TextMeshPro - 文本对象。
- en: The Label child is a UI Text object. By default, it displays the text within
    the Dropdown object that represents the selected option. As the player changes
    the selected option, the **Text** property of the **Text** component of Label
    changes to the appropriate option. To change the properties of the text that displays
    within the boxed area of the Dropdown, change the properties of the **Text** component
    on the Label. When new text replaces the text within the Label, it will automatically
    display based on the properties set by the Text component of the Label.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 标签子项是一个 UI 文本对象。默认情况下，它显示下拉对象中代表所选选项的文本。当玩家更改所选选项时，标签的**文本**组件的**文本**属性会变为相应的选项。要更改显示在下拉框区域内的文本的属性，请更改标签上的**文本**组件的属性。当新的文本替换标签内的文本时，它将根据标签的文本组件设置的属性自动显示。
- en: The Arrow child is a UI Image. Its only function is to hold the image for the
    arrow that (by default) appears at the right of the Dropdown. This arrow doesn’t
    actually do anything and is simply an image. It doesn’t accept inputs or change
    with the properties of the Dropdown component.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头子项是一个 UI 图像。它的唯一功能是持有下拉右侧（默认情况下）出现的箭头图像。这个箭头实际上并不做任何事情，它只是一个图像。它不接受输入或随下拉组件的属性而变化。
- en: The background image of the Dropdown is on the main Dropdown parent object and
    not on a child named Background. Therefore, if you want to change the appearance
    of the Dropdown’s background and Arrow, you change the **Source Images** of the
    Image components on the Dropdown parent and Arrow child, respectively. The image
    of the Dropdown only affects the rectangle that can be selected to display the
    dropdown menu. The background to the menu that expands outward when the player
    interacts with the dropdown is handled by the Template (discussed in the following
    *Dropdown* *Template* section).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉的后台图像位于主下拉父对象上，而不是名为背景的子对象上。因此，如果您想更改下拉背景和箭头的外观，您需要更改下拉父对象和箭头子对象上的图像组件的**源图像**。下拉的图像仅影响可以选中以显示下拉菜单的矩形。当玩家与下拉交互时向外展开的菜单的背景由模板（在以下**下拉**
    **模板**部分中讨论）处理。
- en: Dropdown Template
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下拉模板
- en: Before we discuss the various properties of the Dropdown component, let’s look
    more closely at Dropdown’s **Template**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论下拉组件的各种属性之前，让我们更仔细地看看下拉的**模板**。
- en: The child of Dropdown named Template allows you to set the properties of the
    “items” that will appear as options in the dropdown menu. It also allows you to
    set the properties of the background of the menu and the Scrollbar that will appear
    if the list expands past the viewable area of the dropdown menu.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉名为模板的子项允许您设置将作为下拉菜单中的选项出现的“项目”的属性。它还允许您设置菜单的背景属性以及当列表超出下拉菜单的可视区域时将出现的滚动条的属性。
- en: Remember that the Template child is disabled by default. Enabling the Template
    (by selecting the checkbox in its **Inspector**) will display the Template in
    the scene.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，模板子项默认禁用。通过在**检查器**中选择复选框来启用模板，将在场景中显示模板。
- en: '![Figure 13.9: Enabling the Template GameObject of the Dropdown](img/Figure_13.09_B18327.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9：启用 Dropdown 的模板 GameObject](img/Figure_13.09_B18327.jpg)'
- en: 'Figure 13.9: Enabling the Template GameObject of the Dropdown'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9：启用 Dropdown 的模板 GameObject
- en: You can leave this permanently enabled in your Editor because once you enter
    **Play** mode, it will hide as it is supposed to.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的编辑器中永久启用此功能，因为一旦你进入**播放**模式，它就会隐藏，正如它应该的那样。
- en: 'If you look closely at the parent/child relationships of the Template within
    the **Hierarchy**, you’ll note that it is simply a UI Scroll View object with
    one Scrollbar:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看模板在**层次结构**中的父/子关系，你会注意到它只是一个带有单个滚动条的 UI 滚动视图对象：
- en: '![Figure 13.10: The UI Scroll View with One Scrollbar within the Dropdown](img/Figure_13.10_B18327.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10：下拉菜单内带有单个滚动条的 UI 滚动视图](img/Figure_13.10_B18327.jpg)'
- en: 'Figure 13.10: The UI Scroll View with One Scrollbar within the Dropdown'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10：下拉菜单内带有单个滚动条的 UI 滚动视图
- en: 'Viewing the **Inspector** of the Template GameObject, shows that it, in fact,
    is just a UI Scroll View object, as it has a **Scroll Rect** component attached
    to it with no **Horizontal** **Scrollbar** assigned:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 查看模板 GameObject 的**检查器**，你会发现它实际上只是一个 UI 滚动视图对象，因为它附有一个带有**水平****滚动条**的**滚动矩形**组件，但没有分配任何**水平****滚动条**：
- en: '![Figure 13.11: The Scroll Rect component of the Template](img/Figure_13.11_B18327.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.11：模板的滚动矩形组件](img/Figure_13.11_B18327.jpg)'
- en: 'Figure 13.11: The Scroll Rect component of the Template'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11：模板的滚动矩形组件
- en: 'The **Content** of the Template Scroll View object has a single child named
    **Item**. **Item** has three children: **Item Background**, **Item Checkmark**,
    and **Item Label**. If you look at the **Inspector** of **Item**, you’ll see that
    it is just a UI Toggle and has the same children and properties as the UI Toggles
    discussed at the beginning of this chapter.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 模板滚动视图对象的**内容**有一个名为**Item**的单个子对象。**Item**有三个子对象：**Item 背景**、**Item 复选标记**和**Item
    标签**。如果你查看**Item**的**检查器**，你会发现它只是一个 UI Toggle，并且具有与本章开头讨论的 UI Toggle 相同的子对象和属性。
- en: So, all `Template` is a Scroll View with a single Scrollbar and with a single
    Toggle as its Content! It looks way more complicated initially, but after you
    break down what the individual pieces are, you›ll realize that it›s just a combination
    of a few of the UI items we have already discussed!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有的`模板`都是一个带有单个滚动条和单个切换作为其内容的滚动视图！一开始看起来要复杂得多，但当你分解出各个单独的部分时，你会发现它只是我们之前讨论过的几个
    UI 元素的组合！
- en: '![Figure 13.12: Breakdown of the Template’s children](img/Figure_13.12_B18327.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.12：模板子组件的分解](img/Figure_13.12_B18327.jpg)'
- en: 'Figure 13.12: Breakdown of the Template’s children'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12：模板子组件的分解
- en: When working with the Dropdown Template, if you want to change the visual properties
    and the settings, just remember the breakdown shown in the preceding figure, and
    the prospect of editing it will seem a lot less daunting.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用下拉菜单模板工作时，如果你想更改视觉属性和设置，只需记住前面图中显示的分解，编辑它的前景将显得不那么令人畏惧。
- en: Every item option you set to appear within the Dropdown will follow the exact
    same visual properties of those you set for the Item Toggle.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你设置在下拉菜单中出现的每个项目选项都将遵循你为项目切换设置的完全相同的视觉属性。
- en: The Dropdown component
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下拉菜单组件
- en: Now that we’ve broken down the Template, we can look at the properties of the
    **Dropdown** component.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经分解了模板，我们可以查看**下拉菜单**组件的属性。
- en: 'The parent Dropdown object has a **Dropdown** (or Dropdown - TextMeshPro) component.
    It has all the properties common to the other interactable UI objects, along with
    a few that are exclusive to Dropdowns:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 父级 Dropdown 对象有一个**下拉菜单**（或 Dropdown - TextMeshPro）组件。它具有所有其他交互式 UI 对象的共同属性，以及一些仅限于下拉菜单的属性：
- en: '![Figure 13.13: The difference between the two Dropdown components](img/Figure_13.13_B18327.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.13：两个下拉菜单组件之间的区别](img/Figure_13.13_B18327.jpg)'
- en: 'Figure 13.13: The difference between the two Dropdown components'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13：两个下拉菜单组件之间的区别
- en: As you can see from the preceding image, the properties of the UI Dropdown and
    Dropdown - TextMeshPro are nearly identical. There are only two main differences.
    First, UI Dropdown objects use UI Text objects, while Dropdown - TextMeshPro objects
    use Text - TextMeshPro objects. Second, Dropdown - TextMeshPro has a **Placeholder**
    property.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，UI 下拉菜单和 Dropdown - TextMeshPro 的属性几乎相同。只有两个主要区别。首先，UI 下拉菜单对象使用 UI Text
    对象，而 Dropdown - TextMeshPro 对象使用 Text - TextMeshPro 对象。其次，Dropdown - TextMeshPro
    有一个**占位符**属性。
- en: The Dropdown component is actually super powerful. It handles all interactions
    with the Dropdown menu and will switch text displays, open and close the dropdown,
    and move around the checkbox within the dropdown. It even adds a scrollbar and
    handle to allow the dropdown menu to have a really long list. The only thing that
    must be coded by you is how to interpret the property the player selects.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉组件实际上非常强大。它处理与下拉菜单的所有交互，将切换文本显示，打开和关闭下拉菜单，并在下拉菜单内移动复选框。它甚至添加滚动条和手柄，以便下拉菜单能够显示非常长的列表。唯一必须由您编写的代码是如何解释玩家选择的属性。
- en: Let’s review the various properties of the two Dropdown objects.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下两个下拉对象的各种属性。
- en: Caption properties
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标题属性
- en: There are two properties related to the caption or the option that is currently
    selected (*Figure 13**.3*).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个属性与标题或当前选中的选项相关（*图13**.3*）。
- en: The `None (Text)`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`无（文本）`。'
- en: The **Caption Image** property holds the Image component of the GameObject that
    will display the currently selected option’s image. Nothing is assigned to this
    property by default and, you will note that the **Dropdown** does not have a child
    that can hold the Image. To have an image display with the text, you will have
    to create a UI Image and assign it to the **Caption Image** property. It is best
    that the UI Image you create is created as a child of the Dropdown.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**标题图像**属性包含将显示当前选中选项图像的GameObject的**图像**组件。默认情况下，此属性未分配，您会注意到**下拉**没有可以持有图像的子项。要显示带有文本的图像，您必须创建一个UI图像并将其分配给**标题图像**属性。最好是将您创建的UI图像创建为下拉的子项。'
- en: Template properties
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板属性
- en: There are three properties related to assigning the template’s properties to
    all possible options to display in the dropdown list.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个属性与将模板属性分配给所有可能的选项以在下拉列表中显示相关。
- en: The **Template** property references the Rect Transform of the template. As
    stated previously, the template defines the way each option within the dropdown
    list will look as well as how the dropdown holder will look. By default, this
    property is assigned to the child Template object.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板**属性引用模板的Rect Transform。如前所述，模板定义了下拉列表中每个选项的外观以及下拉容器的外观。默认情况下，此属性分配给子模板对象。'
- en: The **Item Text** property references the **Text** component of the GameObject
    that holds the text of the item template. By default, the **Text** component on
    the Item Label (child of the Item) is assigned to this property.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目文本**属性引用包含项目模板文本的GameObject的**文本**组件。默认情况下，项目标签（**项目**的子项）上的**文本**组件分配给此属性。'
- en: The **Item Image** property references the **Image** component of the GameObject
    that holds the image of the item template. By default, this property is unassigned,
    similar to the **Caption Image**. Just as with the **Caption Image**, to use this
    property, a UI Image will need to be created and assigned to this property. If
    you create one, ensure that you add it as a child of **Item** within the Template
    child to avoid confusion.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目图像**属性引用包含项目模板图像的GameObject的**图像**组件。默认情况下，此属性未分配，类似于**标题图像**。就像**标题图像**一样，要使用此属性，需要创建并分配一个UI图像到**标题图像**属性。如果您创建了它，请确保将其添加到模板子项中的**项目**作为子项，以避免混淆。'
- en: Option properties
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项属性
- en: The **Value** property represents which option is currently selected. The options
    are in a list, and the number in the **Value** property represents the currently
    selected option’s index within the list. Since the options are represented by
    their indices, the first option has a **Value** of 0 (not 1).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**值**属性表示当前选中的选项。选项在一个列表中，**值**属性中的数字表示当前选中选项在列表中的索引。由于选项由它们的索引表示，第一个选项的**值**为0（而不是1）。'
- en: The **Options** property lists out all the options within the **Dropdown** menu.
    Within the list, each option has a text string and sprite (optional). All strings
    and sprites within this list will automatically swap into the correct component
    properties of the children of Dropdown, based on the properties of the **Dropdown**
    component. So, you will not have to write any code to ensure that these items
    display appropriately when the player interacts with the Dropdown.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**属性列出了**下拉菜单**中的所有选项。在列表中，每个选项都有一个文本字符串和精灵（可选）。此列表中的所有字符串和精灵将自动交换到下拉组件子项的正确组件属性中，基于**下拉组件**的属性。因此，您无需编写任何代码即可确保当玩家与下拉菜单交互时，这些项目能够适当地显示。'
- en: By default, the **Options** list contains three options. However, you can add
    or subtract options by selecting the plus and minus sign at the bottom of the
    list. You can also rearrange the options within the list by dragging and dropping
    the options’ handles (two horizontal lines). Note that rearranging the options
    in the list will change their indices within the list and then change the **Value**
    they send to the **Dropdown** component.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**选项** 列表包含三个选项。但是，您可以通过选择列表底部的加号和减号来添加或删除选项。您还可以通过拖放选项的手柄（两条水平线）在列表内重新排列选项。请注意，重新排列列表中的选项将更改它们在列表中的索引，然后更改发送到
    **下拉列表** 组件的 **值**。
- en: Dropdown default event – On Value Changed (Int32)
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下拉列表默认事件 - 值更改（Int32）
- en: The Dropdown component handles all interactions with the Dropdown menu itself.
    The only thing that has to be coded by you is how to interpret the option the
    player selected.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉列表组件处理与下拉菜单本身的全部交互。您唯一需要编码的是如何解释玩家选择的选项。
- en: The Dropdown component’s default event is the **On Value Changed** Event, as
    seen in the **On Value Changed (Int32)** section of the **Dropdown** component.
    This event will trigger whenever a new option is selected by the player. It accepts
    an integer as an argument and, as with the other events discussed in this chapter,
    you can choose to pass no argument, a static argument, or a dynamic argument.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉列表组件的默认事件是 **值更改** 事件，如 **下拉列表** 组件的 **值更改（Int32）** 部分所示。每当玩家选择新选项时，此事件都会触发。它接受一个整数作为参数，并且与其他章节中讨论的其他事件一样，您可以选择传递无参数、静态参数或动态参数。
- en: If you want to send the index of the option selected (or the value of the **Value**
    property) to a function, you›d send it to a function with a Int32 parameter from
    the **Dynamic int** list. Refer to the *Creating a dropdown menu with images*
    example at the end of the text for an implementation of this.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将所选选项的索引（或 **值** 属性的值）发送到函数，您需要将其发送到具有 Int32 参数的 **动态整数** 列表中的函数。请参阅文本末尾的
    *创建带有图像的下拉菜单* 示例，了解其实施方法。
- en: The next interactable UI component we’ll review is the UI Input Field.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要审查的下一个交互式 UI 组件是 UI 输入字段。
- en: UI Input Field
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 输入字段
- en: The UI Input Field provides a space in which the player can enter text.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: UI 输入字段提供了一个玩家可以输入文本的空间。
- en: 'To create a UI Input Field, select **+** | **UI** | **Input Field**. By default,
    the InputField GameObject has two children: a Placeholder and a Text object.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 UI 输入字段，请选择 **+** | **UI** | **输入字段**。默认情况下，输入字段 GameObject 有两个子组件：一个占位符和一个文本对象。
- en: The Placeholder child is a UI Text object that represents the text displayed
    before the player has input any text. Once the player begins entering text, the
    Text component on the Placeholder GameObject deactivates, making the text no longer
    visible. By default, the text displayed by the Placeholder is **Enter text…**,
    but the text being displayed as well as its properties are easily changed by affecting
    the properties on the **Text** component of the Placeholder.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符子组件是一个 UI Text 对象，代表玩家输入任何文本之前显示的文本。一旦玩家开始输入文本，占位符 GameObject 上的 Text 组件将停用，使文本不再可见。默认情况下，占位符显示的文本是
    **输入文本…**，但可以通过影响占位符的 **Text** 组件上的属性轻松更改显示的文本及其属性。
- en: The Text child is a UI Text object that displays the text the player inputs.
    Setting the properties on the Text object’s **Text** component will change the
    display of the text entered by the player.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 文本子组件是一个 UI Text 对象，用于显示玩家输入的文本。在 Text 对象的 **Text** 组件上设置属性将改变玩家输入的文本显示。
- en: InputField contains an **Image** component. If you want to change the appearance
    of the input box, change the **Source Image** of the **Image** component on the
    InputField.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段包含一个 **图像** 组件。如果您想更改输入框的外观，请更改输入字段上的 **图像** 组件的 **源图像**。
- en: Input Field component
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入字段组件
- en: 'The parent InputField object has an **Input Field** component. It has all the
    properties common to the interactable UI objects along with a few that are exclusive
    to Input Fields:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 父输入字段对象有一个 **输入字段** 组件。它具有所有交互式 UI 对象的通用属性，以及一些仅限于输入字段的属性：
- en: '![Figure 13.14: The unique properties of the Input Field component](img/Figure_13.14_B18327.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.14：输入字段组件的独特属性](img/Figure_13.14_B18327.jpg)'
- en: 'Figure 13.14: The unique properties of the Input Field component'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14：输入字段组件的独特属性
- en: Let’s look at the various properties of the UI Input Field.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 UI 输入字段的各个属性。
- en: Properties of entered text and onscreen keyboards
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入文本和屏幕键盘的属性
- en: Many of the properties within the **Input Field** component affect the text
    that displays within the Input Field. Due to some of the properties having a lot
    of options and information pertaining to them, I will discuss them slightly out
    of order.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入字段**组件中的许多属性会影响输入字段中显示的文本。由于一些属性有很多选项和相关信息，我将按顺序稍后讨论它们。'
- en: Remember that to change the visual style of the entered text, you need to change
    the properties of the **Text** component on the Text GameObject.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，要更改输入文本的视觉样式，您需要更改Text GameObject上的**文本**组件的属性。
- en: The **Text** Component property references the Text component of the GameObject
    that will display the player’s entered text. By default, this is the **Text**
    component of the Text child.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本**组件属性引用将显示玩家输入文本的GameObject的文本组件。默认情况下，这是Text子对象的**文本**组件。'
- en: The **Text** property is the text currently entered into the Input Field. When
    you are attempting to retrieve the data from the Input Field, you want to get
    the information from this property and not from the **Text** component on the
    Text GameObject. The Text component on the Text GameObject will only store what
    is currently being displayed. So, if the text is displayed as asterisks because
    it’s a password or has scrolled, the full and correct text will not be stored
    in the **Text** component of the Text GameObject.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本**属性是当前输入到输入字段的文本。当您尝试从输入字段检索数据时，您希望从该属性而不是Text GameObject上的**文本**组件获取信息。Text
    GameObject上的文本组件只会存储当前显示的内容。因此，如果文本以星号显示，因为它是一个密码或已滚动，则完整的正确文本将不会存储在Text GameObject的**文本**组件中。'
- en: The `0` allows unlimited text entry.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`0`允许无限文本输入。'
- en: The **Placeholder** property references the **Text** component of the GameObject
    that displays the text when the player has either not entered anything or has
    cleared all entered text. By default, this is the **Text** component of the **Placeholder**
    child.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**占位符**属性引用当玩家没有输入任何内容或已清除所有输入文本时显示文本的GameObject的**文本**组件。默认情况下，这是**占位符**子对象的**文本**组件。'
- en: The **Hide Mobile Input** property allows you to override the default mobile
    keyboard that pops up when a text **Input Field** is selected. You will select
    this option if you have your own keyboard that you want the player to use. Currently,
    this only works for iOS devices.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**隐藏移动输入**属性允许您覆盖当选择文本**输入字段**时弹出的默认移动键盘。如果您有自己的键盘希望玩家使用，您将选择此选项。目前，这仅适用于iOS设备。'
- en: If you wanted to use your own keyboard on an Android device, your best bet would
    be to create your own custom input field script. The script would show a keyboard
    when the input box is selected and then change the text within the box based on
    the custom keyboard key presses.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在Android设备上使用自己的键盘，您最好的选择是创建自己的自定义输入字段脚本。该脚本会在输入框被选中时显示键盘，并根据自定义键盘按键更改框内的文本。
- en: The **Read Only** property makes the text within the **Input Field** static
    and uneditable by the player. The player can still select the text to copy and
    paste it when this property is activated.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**只读**属性使**输入字段**内的文本静态且不可由玩家编辑。当此属性激活时，玩家仍然可以选中文本进行复制和粘贴。'
- en: When the **Read Only** property is selected, the text displayed by the Input
    Field can still be edited via code by accessing the **Text** property on the Input
    Field component. However, changing the **Text** property on the **Text** component
    of the Text GameObject, will not change the displayed text.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择**只读**属性时，输入字段显示的文本仍然可以通过访问输入字段组件上的**文本**属性通过代码进行编辑。但是，更改Text GameObject上的**文本**组件的**文本**属性，不会更改显示的文本。
- en: Content Types
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内容类型
- en: The **Content Type** property determines the types of characters that will be
    accepted by the Input Field. On devices that display keyboards on screen, it also
    affects the keyboard that is displayed by the device when the input field is selected.
    If the desired keyboard is not available, the default keyboard will be displayed.
    For example, if the device does not have a numbers-only keyboard, it will display
    the default keyboard. For more detailed explanations of each keyboard and character
    validations that come with these Content Types, refer to the *Keyboard Types*
    and *Character Validation* *Options* sections.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容类型**属性决定了输入字段将接受哪些字符类型。在显示屏幕键盘的设备上，它还会影响当输入字段被选中时设备显示的键盘。如果所需的键盘不可用，将显示默认键盘。例如，如果设备没有仅数字的键盘，它将显示默认键盘。有关每个键盘和与这些内容类型一起提供的字符验证的更详细说明，请参阅*键盘类型*和*字符验证*选项部分。'
- en: The possible options are **Standard**, **Autocorrected**, **Integer Number**,
    **Decimal Number**, **Alphanumeric**, **Name**, **Email Address**, **Password**,
    **Pin**, and **Custom**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的选项有**标准**、**自动更正**、**整数数字**、**小数数字**、**字母数字**、**名称**、**电子邮件地址**、**密码**、**PIN**和**自定义**。
- en: The **Standard** option allows any character to be entered. Note, however, that
    characters not available for the entered text’s font will not display.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准**选项允许输入任何字符。请注意，然而，对于输入文本的字体不可用的字符将不会显示。'
- en: The **Autocorrected** option works like the **Standard** option, but on devices
    with onscreen keyboards (particularly touchscreen keyboards), it allows the device’s
    autocorrect functionality to automatically override words based on its own autocorrecting
    algorithms.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动更正**选项的工作方式类似于**标准**选项，但在具有屏幕键盘的设备（尤其是触摸屏键盘）上，它允许设备的自动更正功能根据其自己的自动更正算法自动覆盖单词。'
- en: The **Integer Number** option allows only integer values (positive and negative
    numbers without decimals). The player will be restricted from entering more than
    one negative symbol. The **Decimal Number** option works similarly, except that
    it also accepts decimal points. The player will be restricted from entering more
    than one decimal point. On devices with onscreen keyboards (particularly mobile
    devices), the numeric keyboard will appear rather than the standard keyboard with
    these two options.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**整数数字**选项仅允许整数值（正数和负数，没有小数）。玩家将被限制只能输入一个负号。**小数数字**选项的工作方式类似，但除了接受小数点外，它还接受。玩家将被限制只能输入一个小数点。在具有屏幕键盘的设备（尤其是移动设备）上，这两个选项将显示数字键盘而不是标准键盘。'
- en: The **Alphanumeric** option only allows letters (uppercase and lowercase) along
    with numbers and input. Mathematical symbols and punctuation, including negative
    numbers and decimal points (periods), are not accepted.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**字母数字**选项仅允许字母（大写和小写）、数字以及输入。不允许数学符号和标点符号，包括负数和小数点（句号）。'
- en: The **Name** option will automatically capitalize each new word entered within
    the field. The player has the option to lowercase the first letter of a word by
    deleting the letter and re-entering it in lowercase.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称**选项将自动将字段中输入的每个新单词的首字母大写。玩家可以选择通过删除字母并以小写重新输入来将单词的第一个字母小写。'
- en: The **Email Address** option will allow the player to enter an email address.
    It will also restrict the player from entering more than one @ symbol or two consecutive
    periods (dots/decimals).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**电子邮件地址**选项允许玩家输入电子邮件地址。它还将限制玩家只能输入一个@符号或两个连续的点（句号/小数点）。'
- en: The **Password** option allows letters, numbers, spaces, and symbols entered
    in the field. When the player enters text into a **Password** Input Field, the
    entered text will be hidden from view and displayed as asterisks (*****).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**密码**选项允许在字段中输入字母、数字、空格和符号。当玩家将文本输入到**密码**输入字段时，输入的文本将隐藏起来，并以星号（*****）显示。'
- en: The **Pin** option allows only integer numbers (no decimals) to be entered.
    Negative numbers are accepted. The text entered by the player in a field with
    the **Pin Content Type** will be hidden in the same way the **Password** option
    hides the player input. On an onscreen keyboard device, the numeric keyboard will
    be displayed with the **Pin** option.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**PIN**选项允许输入整数数字（没有小数）。负数是可接受的。玩家在具有**PIN内容类型**的字段中输入的文本将以与**密码**选项隐藏玩家输入相同的方式被隐藏。在具有屏幕键盘的设备上（尤其是屏幕键盘设备），将显示数字键盘，并带有**PIN**选项。'
- en: The final option, **Custom**, gives you the most control of the type of input.
    When selected, new properties appear in the **Inspector** allowing you to select
    the **Line Type**, **Input Type**, **Keyboard Type**, and **Character Validation**.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项**自定义**让您对输入类型有最大的控制权。当选择时，**检查器**中会出现新的属性，允许您选择**行类型**、**输入类型**、**键盘类型**和**字符验证**。
- en: Line Types
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 行类型
- en: 'The **Line Type** option is available with the **Standard**, **Autocorrect**,
    and **Custom** options for **Content Type**. There are three **Line Type** options:
    **Single Line**, **Multi Line Submit**, and **Multi Line New Line.** All other
    **Content Types** are automatically restricted to **Single Line** types. If the
    player is allowed to enter more text than the Input Field’s visible area can display
    (meaning the **Character Limit** property does not restrict it to the visible
    space), the text will scroll based on the **Line** **Type** selected.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**行类型**选项与**内容类型**的**标准**、**自动更正**和**自定义**选项一起提供。有三个**行类型**选项：**单行**、**多行提交**和**多行换行**。所有其他**内容类型**都自动限制为**单行**类型。如果玩家可以输入比输入字段可见区域可以显示的更多文本（即**字符限制**属性不会将其限制在可见空间内），则文本将根据所选的**行类型**进行滚动。'
- en: The **Single Line** option only allows the entered text to be displayed on one
    line. If the text exceeds the visible horizontal space, the text will scroll horizontally.
    If the player hits the *Enter* key, the Input Field acts as if the text has been
    submitted.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**单行**选项仅允许输入的文本显示在一行上。如果文本超出可见的水平空间，文本将水平滚动。如果玩家按下*Enter*键，输入字段将像文本已被提交一样处理。'
- en: 'The **Multi Line Submit** and **Multi Line New Line** options allow the text
    to overflow vertically if it exceeds the visible horizontal space and scroll vertically
    if the text exceeds the visible vertical space. The difference between the two
    options is what happens when the *Enter* key is hit: **Multi Line Submit** will
    submit the text and **Multi Line New Line** will start a new line.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**多行提交**和**多行换行**选项允许文本在超出可见水平空间时垂直溢出，并在文本超出可见垂直空间时垂直滚动。两种选项之间的区别在于按下*Enter*键时会发生什么：**多行提交**将提交文本，而**多行换行**将开始新的一行。'
- en: Input Types
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入类型
- en: 'When the **Custom Content Type** is selected, you have the option to select
    from three Input Types: **Standard**, **Autocorrect**, and **Password**.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择**自定义内容类型**时，您可以从三种**输入类型**中进行选择：**标准**、**自动更正**和**密码**。
- en: Selecting these various **Input Types** does not change the keyboard or provide
    any validation, like the similarly named **Content Types**. For example, the **Password
    Input Type** will accept the *Enter* key as a new line with **Multi Line New Line**
    and display it as an asterisk in the field but accept it as a new line in the
    actual data stored in the **Text** property.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这些不同的**输入类型**不会更改键盘或提供任何验证，就像同名**内容类型**一样。例如，**密码输入类型**将接受*Enter*键作为新行，并在字段中显示为星号，但在**文本**属性中实际存储的数据中将接受它作为新行。
- en: The **Standard** option does not put any special circumstances on the type of
    input.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准**选项不对输入类型施加任何特殊条件。'
- en: The **Autocorrect** option applies to platforms with onscreen keyboards that
    have built-in autocorrect functionality. This option allows the device’s autocorrect
    to change the text as it sees fit.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动更正**选项适用于具有内置自动更正功能的屏幕键盘平台。此选项允许设备的自动更正根据需要更改文本。'
- en: The **Password** option will display the text as asterisks.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**密码**选项将文本显示为星号。'
- en: Keyboard Types
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 键盘类型
- en: When the **Custom Content Type** is selected, you have the option to select
    **Keyboard Types**. On devices with onscreen keyboards, this property allows you
    to select which keyboard will display when the Input Field is selected.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择**自定义内容类型**时，您可以选择**键盘类型**。在具有屏幕键盘的设备上，此属性允许您选择在输入字段被选中时将显示哪个键盘。
- en: The possible options are **Default**, **ASCII Capable**, **Numbers And Punctuation**,
    **URL**, **Number Pad**, **Phone Pad**, **Name Phone Pad**, **Email Address**,
    **Social**, **Search**, **Decimal Pad**, and **One** **Time Code**.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的选项有**默认**、**ASCII 兼容**、**数字和标点符号**、**URL**、**数字键盘**、**电话键盘**、**姓名电话键盘**、**电子邮件地址**、**社交**、**搜索**、**十进制键盘**和**一次性代码**。
- en: If the keyboard selected is not available on the target device, the device’s
    default keyboard will be displayed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所选键盘在目标设备上不可用，设备将显示默认键盘。
- en: The **Default** option displays the device’s default (letters) keyboard. On
    most devices, this keyboard only displays letters, the *Space* key, *Backspace*
    key, and *Return* (*Enter*) key. When this option is selected, the player will
    have the ability to switch to the keyboard with numbers and punctuation keys.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认**选项显示设备的默认（字母）键盘。在大多数设备上，此键盘仅显示字母、空格键、退格键和回车（Enter）键。当选择此选项时，玩家将能够切换到带有数字和标点符号键的键盘。'
- en: 'For example, the iOS English default keyboard and numbers and punctuation keyboard
    can easily be switched between, as shown in the following figure:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，iOS默认的英语键盘和数字标点符号键盘可以轻松切换，如图下所示：
- en: '![Figure 13.15: The iOS English default keyboard and numbers and punctuation
    keyboard](img/Figure_13.15_B18327.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.15：iOS 默认英语键盘和数字标点符号键盘](img/Figure_13.15_B18327.jpg)'
- en: 'Figure 13.15: The iOS English default keyboard and numbers and punctuation
    keyboard'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.15：iOS 默认英语键盘和数字标点符号键盘
- en: The **ASCII Capable** option displays the device’s keyboard with standard ASCII
    keys. This option is available to restrict the keyboard to those of English and
    similar language keyboards. This keyboard is also a letters keyboard, and the
    option to switch to the numbers and punctuation keyboard is available. For example,
    the iOS ASCII keyboard is shown in the preceding diagram, as it is the same as
    the default English keyboard.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**ASCII 兼容**选项显示带有标准ASCII键的设备键盘。此选项可用于限制键盘为英语和类似语言的键盘。此键盘也是一个字母键盘，并且可以选择切换到数字和标点符号键盘。例如，iOS的ASCII键盘在先前的图表中显示，因为它与默认的英语键盘相同。'
- en: The **Numbers And Punctuation** option opens the device’s numbers and punctuation
    keyboard with the option to switch to the “letters” keyboard. For example, the
    iOS numbers and punctuation keyboard is shown in the preceding diagram.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字和标点符号**选项打开设备的数字和标点符号键盘，并可以选择切换到“字母”键盘。例如，iOS的数字和标点符号键盘在先前的图表中显示。'
- en: 'The **URL Keyboard** option brings up the device’s URL keyboard. This keyboard
    has a period (**.**) key, forward-slash (**/**) key, and **.com** key in place
    of the **Space** Key. For example, the following image shows the iOS URL keyboard
    and its numbers/punctuation form. Note that the URL keyboard’s numbers/punctuation
    form is not the same as the numbers and punctuation form that accompanies the
    default/ASCII keyboard:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL键盘**选项显示设备的URL键盘。此键盘具有句点（**.**）键、正斜杠（**/**）键和**.com**键，代替空格键。例如，以下图像显示了iOS
    URL键盘及其数字/标点符号格式。请注意，URL键盘的数字/标点符号格式与默认/ASCII键盘伴随的数字/标点符号格式不同：'
- en: '![Figure 13.16: The iOS URL keyboard and its numbers/punctuation form](img/Figure_13.16_B18327.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.16：iOS URL键盘及其数字/标点符号格式](img/Figure_13.16_B18327.jpg)'
- en: 'Figure 13.16: The iOS URL keyboard and its numbers/punctuation form'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16：iOS URL 键盘及其数字/标点符号格式
- en: 'The **Number Pad** option displays the device’s keyboard with numbers (**0**-**9**)
    and (usually) a **Backspace** key. This keyboard is used for PINs, so it does
    not allow alternate characters. For example, the following image shows the iOS
    number pad keyboard:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字键盘**选项显示带有数字（**0**-**9**）和（通常）退格键的设备键盘。此键盘用于PIN，因此不允许使用其他字符。例如，以下图像显示了iOS数字键盘：'
- en: '![Figure 13.17: The number pad keyboard](img/Figure_13.17_B18327.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.17：数字键盘](img/Figure_13.17_B18327.jpg)'
- en: 'Figure 13.17: The number pad keyboard'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.17：数字键盘
- en: 'The **Phone Pad** option displays the device’s keyboard with the same keys
    as the number pad keyboard but also includes keys for the asterisk and hash sign
    (pound sign). For example, the following image shows the iOS phone pad keyboard
    and its symbol display:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**电话键盘**选项显示与数字键盘相同键的设备键盘，但还包括星号和井号（磅号）键。例如，以下图像显示了iOS电话键盘及其符号显示：'
- en: '![Figure 13.18: The iOS phone pad keyboard and its symbol display](img/Figure_13.18_B18327.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.18：iOS 电话键盘及其符号显示](img/Figure_13.18_B18327.jpg)'
- en: 'Figure 13.18: The iOS phone pad keyboard and its symbol display'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.18：iOS 电话键盘及其符号显示
- en: 'The **Name Phone Pad** option displays the device’s “letters” keyboard and
    can switch to the phone pad keyboard. For example, the following image shows the
    iOS name phone pad keyboard’s two views:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称电话键盘**选项显示设备的“字母”键盘，并可以切换到电话键盘。例如，以下图像显示了iOS名称电话键盘的两个视图：'
- en: '![Figure 13.19: The iOS name phone pad keyboard’s two views](img/Figure_13.19_B18327.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.19：iOS 名称电话键盘的两个视图](img/Figure_13.19_B18327.jpg)'
- en: 'Figure 13.19: The iOS name phone pad keyboard’s two views'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.19：iOS名称电话键盘的两个视图
- en: 'The **Email Address** option shows the device’s email keyboard. The email keyboard
    prominently displays the **@** key and the period (**.**) key as well as other
    common email address symbols. For example, the following image shows the iOS email
    keyboard and its numbers/punctuation form:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**电子邮件地址**选项显示设备的电子邮件键盘。电子邮件键盘突出显示了**@**键和句点（**.**）键以及其他常见的电子邮件地址符号。例如，以下图像显示了iOS的电子邮件键盘及其数字/标点符号格式：'
- en: '![Figure 13.20: The iOS email keyboard and its numbers/punctuation form](img/Figure_13.20_B18327.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图13.20：iOS电子邮件键盘及其数字/标点符号格式](img/Figure_13.20_B18327.jpg)'
- en: 'Figure 13.20: The iOS email keyboard and its numbers/punctuation form'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.20：iOS电子邮件键盘及其数字/标点符号格式
- en: 'The **Social Keyboard** option displays the device’s social keyboard. This
    keyboard prominently displays common social networking keys such as the **@**
    key and the **#** key. For example, the following image shows the iOS “Twitter”
    keyboard and its numbers/punctuation form. On the iOS device, this keyboard is
    specifically called the *Twitter keyboard*, but it displays on other social networking
    apps such as Instagram:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**社交键盘**选项显示设备的社交键盘。此键盘突出显示了常见的社交网络键，如**@**键和**#**键。例如，以下图像显示了iOS的“Twitter”键盘及其数字/标点符号格式。在iOS设备上，此键盘特别称为*Twitter键盘*，但它显示在其他社交网络应用，如Instagram上：'
- en: '![Figure 13.21: The iOS Twitter keyboard](img/Figure_13.21_B18327.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图13.21：iOS Twitter键盘](img/Figure_13.21_B18327.jpg)'
- en: 'Figure 13.21: The iOS Twitter keyboard'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.21：iOS Twitter键盘
- en: 'The **Search** option displays the web search keyboard. This keyboard prominently
    displays the space and period keys. For example, the following image shows the
    iOS web search keyboard and its numbers/punctuation form:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**搜索**选项显示网络搜索键盘。此键盘突出显示了空格键和句点键。例如，以下图像显示了iOS网络搜索键盘及其数字/标点符号格式：'
- en: '![Figure 13.22: The iOS web search keyboard and its numbers/punctuation form](img/Figure_13.22_B18327.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图13.22：iOS网络搜索键盘及其数字/标点符号格式](img/Figure_13.22_B18327.jpg)'
- en: 'Figure 13.22: The iOS web search keyboard and its numbers/punctuation form'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.22：iOS网络搜索键盘及其数字/标点符号格式
- en: Note
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can view a list of all the keyboard types available on iOS at [https://developer.apple.com/documentation/uikit/uikeyboardtype](https://developer.apple.com/documentation/uikit/uikeyboardtype).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[iOS上所有可用的键盘类型列表](https://developer.apple.com/documentation/uikit/uikeyboardtype)中查看。
- en: You can view a list of all input types (not just keyboard, but they are included
    in the list) available on Android at [https://developer.android.com/reference/android/widget/TextView.xhtml#attr_android:inputType](https://developer.android.com/reference/android/widget/TextView.xhtml#attr_android:inputType).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Android上所有输入类型列表](https://developer.android.com/reference/android/widget/TextView.xhtml#attr_android:inputType)中查看（不仅限于键盘，但它们包含在列表中）。
- en: Character Validation options
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符验证选项
- en: When the **Custom Content Type** is selected, you have the option to select
    which type of **Character Validation** you would like to use. This option restricts
    the type of characters that can be entered in the Input Field. If the player attempts
    to enter a character that does not meet the restrictions, no character will be
    inserted in the Input Field.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择**自定义内容类型**时，您可以选择希望使用的哪种类型的**字符验证**。此选项限制了可以在输入字段中输入的字符类型。如果玩家尝试输入不符合限制的字符，则不会在输入字段中插入任何字符。
- en: The possible options are **None**, **Integer**, **Decimal**, **URL**, **Alphanumeric**,
    **Name**, and **Email Address**.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的选项有**None**、**整数**、**小数**、**URL**、**字母数字**、**名称**和**电子邮件地址**。
- en: '**Character Validation** only checks each individual character being entered
    to see whether it is allowed within the field. It does not check the entire string
    to see whether the string itself is valid. For example, if **Email Address** is
    selected, it will not check whether it is actually in the format of an email address.
    That type of validation will have to be accomplished via code.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符验证**仅检查输入的每个单独字符，以查看它是否允许在字段中使用。它不会检查整个字符串，以查看字符串本身是否有效。例如，如果选择了**电子邮件地址**，它将不会检查它是否实际上符合电子邮件地址的格式。这种验证类型必须通过代码来完成。'
- en: The **None** option does not perform any character validations, allowing any
    character to be entered into the Input Field with any formatting.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**None**选项不执行任何字符验证，允许任何格式化的字符被输入到输入字段中。'
- en: The `0` through `9` and the dash (negative symbol). The input is further restricted
    to allowing the negative symbol only as the first character entered.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`0` 到 `9` 以及破折号（负号）。输入进一步限制为只允许负号作为第一个输入字符。'
- en: The **Decimal** option has the same restriction as the **Integer** option, but
    it also allows a single decimal point to be entered.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**十进制**选项与**整数**选项具有相同的限制，但它还允许输入单个小数点。'
- en: The **Alphanumeric** option only allows English letters (a through z) and the
    digits 0 through 9\. Capital and lowercase letters are permitted; the negative
    symbol and decimal point are not accepted.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**字母数字**选项仅允许英文字母（a 到 z）和数字 0 到 9。允许大小写字母；负号和小数点不被接受。'
- en: The **Name** option allows characters typically found in names and provides
    formatting. It allows letters, spaces, and an apostrophe (‘). It also enforces
    capitalization of the first character in the string and every character that comes
    after a space. A space cannot follow an apostrophe, and a space cannot follow
    another space. Only one apostrophe is allowed in the string. The letters are not
    restricted to just a-z as with the **Alphanumeric** option. Any Unicode letter
    is permitted.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称**选项允许在名称中通常找到的字符，并提供格式化。它允许字母、空格和单引号（‘）。它还强制字符串中第一个字符以及每个空格后的字符大写。单引号后不能有空格，并且空格后不能有空格。字符串中只允许一个单引号。字母不受**字母数字**选项中仅限于
    a-z 的限制。允许任何 Unicode 字母。'
- en: Note
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: For a list of all allowable Unicode letters, check out the remarks on the **Char.IsLetter**
    method in .NET at [https://msdn.microsoft.com/en-us/library/system.char.isletter(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.char.isletter(v=vs.110).aspx).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有允许的 Unicode 字母的列表，请查看 .NET 中 **Char.IsLetter** 方法的说明。[https://msdn.microsoft.com/en-us/library/system.char.isletter(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.char.isletter(v=vs.110).aspx)。
- en: 'The **Email Address** option allows characters that are allowed within an email
    address and enforces a few formatting rules. It is significantly less restrictive
    in the types of characters that can be entered than the other validation options.
    The following characters are allowed:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**电子邮件地址**选项允许在电子邮件地址中允许的字符，并强制执行一些格式化规则。与其他验证选项相比，它在可以输入的字符类型方面限制较少。以下字符是允许的：'
- en: Lowercase and capital English letters (a through z)
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小写和大写英文字母（a 到 z）
- en: Digits 0-9
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字 0-9
- en: 'The following punctuation marks and special symbols:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下标点符号和特殊符号：
- en: '| **Symbol name** | **Character** |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| **符号名称** | **字符** |'
- en: '| --- | --- |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| at sign | @ |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| at 符号 | @ |'
- en: '| dot/period | . |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 点/句号 | . |'
- en: '| question mark | ? |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 问号 | ? |'
- en: '| exclamation point | ! |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 感叹号 | ! |'
- en: '| hyphen | - |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 破折号 | - |'
- en: '| underscore | _ |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 下划线 | _ |'
- en: '| apostrophe | ‘ |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 单引号 | ‘ |'
- en: '| backtick | ` |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 反引号 | ` |'
- en: '| tilde | ~ |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 波浪号 | ~ |'
- en: '| open and close braces | { and } |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 开放和闭合花括号 | { 和 } |'
- en: '| vertical bar | &#124; |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 竖线 | &#124; |'
- en: '| caret | ^ |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 箭头 | ^ |'
- en: '| asterisk | * |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 星号 | * |'
- en: '| plus sign | + |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 加号 | + |'
- en: '| equal sign | + |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 等号 | + |'
- en: '| forward slash | / |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 斜杠 | / |'
- en: '| hash sign/pound sign | # |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 哈希符号/井号 | # |'
- en: '| dollar sign | $ |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 美元符号 | $ |'
- en: '| percent | % |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 百分比 | % |'
- en: '| ampersand | & |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 和号 | & |'
- en: 'Table 13.1: Permitted special characters'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.1：允许的特殊字符
- en: Spaces are not allowed, only one *@* symbol is allowed in the string, and a
    dot cannot follow another dot.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许空格，字符串中只允许一个 `@` 符号，并且点不能跟随另一个点。
- en: Even though a dot as the first character of an email address is not valid, the
    **Email Address Character Validation** option does not restrict it from being
    the first character entered in the Input Field.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 即使电子邮件地址的第一个字符是点不合法，**电子邮件地址字符验证**选项也不会限制它作为输入字段中第一个输入字符。
- en: Properties of the caret and selection
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 箭头和选择属性
- en: A `InputField Input Caret`. When the Input Field is selected, the caret becomes
    visible.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputField Input Caret`。当输入字段被选中时，光标变为可见。'
- en: The properties discussed in this section affect the look of the caret as well
    as the look of text if it is selected (or highlighted) using the caret.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论的属性会影响光标的外观，以及如果使用光标（或突出显示）选择文本时的文本外观。
- en: The `0.85`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`0.85`。'
- en: The `1`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`。'
- en: When the **Custom Caret Color** property is selected, a secondary property,
    **Caret Color**, becomes available. You then have the option to change the color
    of the caret. Unless **Custom Caret Color** is selected and the **Caret Color**
    is changed, the caret will be a dark grey color.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择 **自定义光标颜色** 属性时，一个次要属性，**光标颜色**，变得可用。然后你可以选择更改光标颜色。除非 **自定义光标颜色** 被选中并且
    **光标颜色** 被更改，否则光标将呈现深灰色。
- en: When the caret is dragged across characters within the Input Field, the characters
    will be selected (or highlighted). The **Selection Color** property determines
    the color of the selected text.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当光标在输入字段内的字符之间拖动时，这些字符将被选中（或突出显示）。**选择颜色**属性决定了选中文本的颜色。
- en: Input field default events – On Value Changed (String) and On End Edit (String)
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入字段默认事件 – 值更改（字符串）和末尾编辑（字符串）
- en: 'The Input Field component has two default events. The first default event is
    the **On Value Changed** Event, as seen in the **On Value Changed (String)** section
    of the Input Field component. This event will trigger whenever the text within
    the Input Field is changed. It accepts a string as an argument, and its use of
    the argument works in the same way as the **On Value Changed** events from UI
    components discussed earlier in this chapter. If you want to pass a parameter
    to the function, you can select the function from either the **Static Parameters**
    list or from the **Dynamic string** list, depending on how or if you want an argument
    passed to the function:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段组件有两个默认事件。第一个默认事件是**值更改**事件，如输入字段组件的**值更改（字符串）**部分所示。每当输入字段中的文本更改时，此事件都会触发。它接受一个字符串作为参数，其参数的使用方式与本章前面讨论的
    UI 组件的**值更改**事件相同。如果你想向函数传递参数，你可以从**静态参数**列表或从**动态字符串**列表中选择函数，具体取决于你是否想向函数传递参数：
- en: '![Figure 13.23: On Value Changed Events on Input Field Example in the Chapter13
    scene](img/Figure_13.23_B18327.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.23：第 13 章场景中输入字段值更改事件示例](img/Figure_13.23_B18327.jpg)'
- en: 'Figure 13.23: On Value Changed Events on Input Field Example in the Chapter13
    scene'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.23：第 13 章场景中输入字段值更改事件示例
- en: If you want to constantly check what the player is entering in the Input Field,
    you would use the third setup shown in the preceding image, which selects a function
    with a parameter from the **Dynamic** **string** list.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要不断检查玩家在输入字段中输入的内容，你将使用前面图像中显示的第三种设置，该设置从**动态** **字符串**列表中选择一个带有参数的函数。
- en: The second default event is the On End Edit event, as seen in the **On End Edit
    (String)** section of the Input Field component. This event fires whenever the
    player completes editing the text. This completion is confirmed by the player
    either clicking outside of the Input Field (so that the Input is no longer selected)
    or by submitting the text.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个默认事件是**末尾编辑**事件，如输入字段组件的**末尾编辑（字符串）**部分所示。每当玩家完成文本编辑时，此事件都会触发。玩家的完成可以通过点击输入字段外部（这样输入就不再被选中）或提交文本来确认。
- en: 'It accepts a string as an argument. As with the other events discussed in this
    chapter, you can choose to pass no argument, a static argument, or a dynamic argument.
    The following screenshot shows the setup for all three options:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受一个字符串作为参数。与其他本章讨论的事件一样，你可以选择不传递参数、传递静态参数或传递动态参数。以下截图显示了所有三种选项的设置：
- en: '![Figure 13.24: On End Edit Events on Input Field Example in the Chapter13
    Scene](img/Figure_13.24_B18327.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.24：第 13 章场景中输入字段末尾编辑事件示例](img/Figure_13.24_B18327.jpg)'
- en: 'Figure 13.24: On End Edit Events on Input Field Example in the Chapter13 Scene'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.24：第 13 章场景中输入字段末尾编辑事件示例
- en: If you want to have the On End Edit event called when the *Enter* key is hit,
    use either the **Single Line** or **Multi Line Submit** options for the **Line
    Type**.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在按下 *Enter* 键时调用末尾编辑事件，请使用 **单行** 或 **多行提交** 选项的 **行类型**。
- en: Now that we’ve reviewed the UI Input Field, let’s review its counterpart, the
    Input Field – TextMeshPro.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了 UI 输入字段，让我们来回顾其对应物，即输入字段 – TextMeshPro。
- en: Input Field - TextMeshPro
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入字段 - TextMeshPro
- en: The Input Field - TextMeshPro is very similar to the UI Input Field. When added
    to the scene, you’ll see it looks nearly identical, except that the placeholder
    text has a different font. The UI Input Field uses an Arial font by default, while
    the Input Field - TextMeshPro uses Liberation Sans.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: Input Field - TextMeshPro与UI输入字段非常相似。当添加到场景中时，您会看到它看起来几乎相同，只是占位符文本使用了不同的字体。UI输入字段默认使用Arial字体，而Input
    Field - TextMeshPro使用Liberation Sans。
- en: 'To create a UI Input Field, select **+** | **UI** | **Input Field - TextMeshPro**.
    By default, Input Field - TextMeshPro GameObject has a child named Text Area,
    which has two children: a Placeholder and a Text object. You will observe that
    it is slightly different in setup than the UI Input Field.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建UI输入字段，请选择**+** | **UI** | **Input Field - TextMeshPro**。默认情况下，Input Field
    - TextMeshPro GameObject有一个名为文本区域的子对象，该子对象有两个子对象：一个占位符和一个文本对象。您将观察到它在设置上与UI输入字段略有不同。
- en: 'The Text Area GameObject contains a Rect Transform component and a Rect Mask
    2D component. The Text Area ensures that the text does not appear outside of a
    specified area, as shown by the highlighted area in the following image. If you
    wanted to change the size of this area, you would change the properties on the
    Rect Transform component:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 文本区域GameObject包含一个Rect Transform组件和一个Rect Mask 2D组件。文本区域确保文本不会出现在指定的区域之外，如下图中突出显示的区域所示。如果您想更改此区域的大小，您将更改Rect
    Transform组件上的属性：
- en: '![Figure 13.25: The Text Area of the InputField - TextMeshPro](img/Figure_13.25_B18327.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图13.25：InputField - TextMeshPro的文本区域](img/Figure_13.25_B18327.jpg)'
- en: 'Figure 13.25: The Text Area of the InputField - TextMeshPro'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.25：InputField - TextMeshPro的文本区域
- en: The Placeholder and Text children are simply Text - TextMeshPro objects. You
    can find more information about the Text - TextMeshPro objects in [*Chapter 10*](B18327_10.xhtml#_idTextAnchor236).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符和文本子对象仅仅是Text - TextMeshPro对象。您可以在[*第10章*](B18327_10.xhtml#_idTextAnchor236)中找到有关Text
    - TextMeshPro对象的更多信息。
- en: An Input Field - TextMeshPro GameObject contains an Image component. If you
    want to change the appearance of the input box, change the **Source Image** of
    the **Image** component on the InputField (TMP) parent.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Input Field - TextMeshPro GameObject包含一个Image组件。如果您想更改输入框的外观，请更改InputField
    (TMP)父级上的**Image**组件的**源图像**。
- en: TextMeshPro - Input Field component
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TextMeshPro - 输入字段组件
- en: 'The parent InputField (TMP) object has a **TextMeshPro – Input Field** component.
    It has all the properties common to the interactable UI objects, many of the same
    properties of the standard UI Input Field, and a few that are exclusive to Input
    Field - TextMeshPros. This section will not discuss the properties that Input
    Field - TextMeshPros share with UI Input Fields since they were discussed in the
    previous section, and we will only discuss those that are exclusive to it. You
    can see the properties in the following image:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 父级InputField (TMP)对象具有一个**TextMeshPro – 输入字段**组件。它具有所有交互式UI对象的公共属性，许多与标准UI输入字段的相同属性，以及一些仅适用于输入字段
    - TextMeshPros的属性。本节将不会讨论与UI输入字段共享的属性，因为它们已在上一节中讨论过，我们只会讨论仅适用于它的属性。您可以在以下图像中查看属性：
- en: '![Figure 13.26: The TextMeshPro – Input Field component](img/Figure_13.26_B18327.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图13.26：TextMeshPro – 输入字段组件](img/Figure_13.26_B18327.jpg)'
- en: 'Figure 13.26: The TextMeshPro – Input Field component'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.26：TextMeshPro – 输入字段组件
- en: The **Text Viewport** property is set to the Rect Transform of the area in which
    the entered text should be visible. The Rect Transform of Text Area child is assigned
    to this property, by default. As stated earlier, the Text Area child has a Rect
    Mask 2D component that stops text from becoming visible outside of the area defined
    by the Rect Transform component of the Text Area.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本视口**属性设置为应显示输入文本的区域中的Rect Transform。默认情况下，文本区域子对象的Rect Transform分配给此属性。如前所述，文本区域子对象具有一个Rect
    Mask 2D组件，该组件阻止文本在文本区域Rect Transform组件定义的区域之外可见。'
- en: The **Text Component** property is set to the Text Mesh Pro UGUI component of
    the object in which the entered text should display. The TextMeshPro - Text object
    assigned to this property will determine the font and display settings of the
    entered text. The Text Mesh Pro UGUI component of the Text child is assigned to
    this property, by default.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本组件**属性设置为应显示输入文本的对象中的Text Mesh Pro UGUI组件。分配给此属性的TextMeshPro - Text对象将确定输入文本的字体和显示设置。默认情况下，文本子对象的Text
    Mesh Pro UGUI组件分配给此属性。'
- en: The **Text Input Box** group can be expanded to display a large text input area.
    The **Text Input Box** property works the same way as the **Text** property on
    the Input Field component of UI Input Field objects. The text entered by the user
    will be stored here and can be accessed by code. This will store the actual text
    entered and not the formatted text. For example, if the text has been formatted
    to appear as asterisks (as with **Pin** and **Password Content Types**), the actual
    pin or password will be stored here rather than a string of asterisks.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本输入框**组可以展开以显示一个大的文本输入区域。**文本输入框**属性与UI输入字段组件上的**文本**属性工作方式相同。用户输入的文本将存储在此处，可以通过代码访问。这将存储实际输入的文本，而不是格式化后的文本。例如，如果文本已被格式化为显示为星号（如**Pin**和**密码内容类型**），实际的PIN或密码将存储在此处，而不是一串星号。'
- en: Input Field settings
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入字段设置
- en: The **Font Asset** property determines the font of the various texts displayed
    within the Input Field - TextMeshPro, and the **Point Size** property determines
    the size of the text. You’ll note that the Placeholder and Text children also
    have the **Font Asset** and **Point Size** properties on their Text Mesh Pro UGUI
    components. Changing the **Font Asset** and **Point Size** properties on the Input
    Field - TextMeshPro parent will also change the corresponding properties on the
    child objects.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**字体资产**属性确定输入字段 - TextMeshPro中显示的各种文本的字体，而**点大小**属性确定文本的大小。您会注意到占位符和文本子项在其Text
    Mesh Pro UGUI组件上也有**字体资产**和**点大小**属性。更改输入字段 - TextMeshPro父对象的**字体资产**和**点大小**属性也将更改子对象上的相应属性。'
- en: The rest of the properties in this group are the ones included within the UI
    Input Field.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 此组中的其余属性是包含在UI输入字段中的属性。
- en: Control settings
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制设置
- en: If the **OnFocus - Select All** property is selected, when the Input Field -
    TextMeshPro is selected, all the text within the field will be highlighted.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**焦点时全选**属性，当选择输入字段- TextMeshPro时，字段内的所有文本将被突出显示。
- en: If the **Reset On DeActivation** property is selected, the caret will reset
    to the default position at the front of the text.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**在停用后重置**属性，光标将重置到文本前面的默认位置。
- en: If the **Restore on ESC Key** property is selected, the text will reset back
    to the default when the *esc* key is hit. The default will be either an empty
    string or whatever is entered in the **Text Input Box** when the scene starts.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**按ESC键恢复**属性，则在按下*esc*键时，文本将重置回默认值。默认值将是空字符串或场景开始时在**文本输入框**中输入的内容。
- en: The **Rich Text** property means that any rich text tags to be accepted, and
    the **Allow Rich Text Editing** property allows the user to enter rich text tags
    within the field.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**富文本**属性意味着可以接受任何富文本标签，而**允许富文本编辑**属性允许用户在字段内输入富文本标签。'
- en: Input Field - TextMeshPro default events – On Select (String) and On Deselect
    (String)
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入字段 - TextMeshPro默认事件 - 选择时（字符串）和取消选择时（字符串）
- en: 'The Input Field - TextMeshPro has four default events: the **On Value Changed**
    Event, the **On End Edit** Event, the **On Select** Event, and the **On Deselect**
    Event, as shown in the **On Value Changed (String)**, **On End Edit (String)**,
    **On Select (String)**, and **On Deselect (****String)** sections.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段 - TextMeshPro有四个默认事件：**值更改**事件、**结束编辑**事件、**选择**事件和**取消选择**事件，如**值更改（字符串**）、**结束编辑（字符串**）、**选择（字符串**）和**取消选择（字符串**）部分所示。
- en: The first two events, the **On Value Changed** Event and the **On End Edit**
    Event are the same as those presented in the UI Input Field.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个事件，**值更改**事件和**结束编辑**事件与UI输入字段中展示的相同。
- en: The third event is the **On Select** Event. This event fires whenever the Input
    Field - TextMeshPro is selected. The fourth event is the **On Deselect** Event.
    As you would expect, the event fires whenever the Input Field - TextMeshPro is
    deselected. It works similarly to the **On End Edit** event, except that it does
    not fire when the text is submitted.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个事件是**选择**事件。每当选择输入字段 - TextMeshPro时，此事件都会触发。第四个事件是**取消选择**事件。正如您所期望的，每当取消选择输入字段
    - TextMeshPro时，此事件都会触发。它与**结束编辑**事件的工作方式类似，但它在文本提交时不会触发。
- en: As with the other events discussed in this chapter, you can choose to pass no
    argument, a static argument, or a dynamic argument to the **On Select** and **On**
    **Deselect** events.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中讨论的其他事件一样，您可以选择向**选择**和**取消选择**事件传递无参数、静态参数或动态参数。
- en: Now that we’ve reviewed the various interactable components of the uGUI, let’s
    look at some examples of how to use them.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了uGUI的各种可交互组件，让我们看看如何使用它们的例子。
- en: Examples
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子
- en: This chapter has so many new items in it that I could spend the rest of this
    book just showing you examples! Sadly, I can’t do that, so I will show you examples
    that I hope will be the most useful. Let’s begin.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含了许多新内容，以至于我可以花掉这本书的剩余部分来展示例子！遗憾的是，我无法做到这一点，所以我将展示一些我认为最有用的例子。让我们开始吧。
- en: Creating a dropdown menu with images
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建带有图像的下拉菜单
- en: 'Let’s continue working on our scene and create a dropdown menu that will allow
    us to swap our player character between a cat and a dog. The final version will
    appear as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续工作在我们的场景中，创建一个下拉菜单，允许我们在猫和狗之间切换我们的玩家角色。最终版本将如下所示：
- en: '![Figure 13.27: The final version of the Paused Menu dropdown](img/Figure_13.27_B18327.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![图13.27：暂停菜单下拉菜单的最终版本](img/Figure_13.27_B18327.jpg)'
- en: 'Figure 13.27: The final version of the Paused Menu dropdown'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.27：暂停菜单下拉菜单的最终版本
- en: Changing our selection will then change the image of the character that appears
    at the top of the screen.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 改变我们的选择将改变屏幕顶部出现的角色图像。
- en: 'The spritesheet containing the dog image is an asset that I’ve modified from
    free art assets found here:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 包含狗图像的精灵表是我从以下免费艺术资源中修改的：
- en: '[https://opengameart.org/content/cat-dog-free-sprites](https://opengameart.org/content/cat-dog-free-sprites)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://opengameart.org/content/cat-dog-free-sprites](https://opengameart.org/content/cat-dog-free-sprites)'
- en: This is the same asset that provided us with the cat sprites.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们提供猫精灵的同一资产。
- en: When you want to see your UI Dropdown menu in play mode, you have to press *P*
    to bring up the `Pause Panel`. This can be kind of annoying when you just want
    to quickly check the layout. You can disable the automatic hiding of the `Pause
    Panel` momentarily by disabling the `ShowHidePanels.cs` script on the `Main Camera`.
    Just remember to turn it back on when you are done!
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想在播放模式下看到你的UI下拉菜单时，你必须按**P**键来弹出`暂停面板`。当你只想快速检查布局时，这可能会有些烦人。你可以通过禁用`主相机`上的`ShowHidePanels.cs`脚本来暂时禁用`暂停面板`的自动隐藏。记住，当你完成时一定要重新打开它！
- en: Laying out the dropdown with caption and item images
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以标题和项目图像布局下拉菜单
- en: 'To create a UI Dropdown menu like the one shown in the previous image, complete
    the following steps:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个像前一张图片中显示的UI下拉菜单，请完成以下步骤：
- en: Locate the `dogSprites.png` image provided in the source files of the text and
    bring it in to the `Assets/Sprites` folder of your project.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到文本源文件中提供的`dogSprites.png`图像，并将其拖入项目`Assets/Sprites`文件夹中。
- en: Slice the spritesheet by setting its **Sprite Mode** to **Multiple** and utilizing
    **Automatic** slicing. When you perform the **Automatic** slice, set the **Pivot**
    to **Bottom**.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将**精灵模式**设置为**多个**并利用**自动**切片来切割精灵表。当你执行**自动**切片时，将**锚点**设置为**底部**。
- en: Now, let’s add a UI Dropdown to our `Pause Panel`. Right-click on the `Pause
    Panel` in the `Dropdown` upward in the `Pause Banner`.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们向我们的`暂停面板`添加一个UI下拉菜单。在`暂停横幅`中，在`暂停面板`上右键单击`下拉菜单`向上。
- en: 'Adjust the size and position of the **Dropdown** by setting its Rect Transform
    properties, as follows:![Figure 13.28: The Rect Transform of the Dropdown](img/Figure_13.28_B18327.jpg)'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置矩形变换属性来调整**下拉菜单**的大小和位置，如下所示：![图13.28：下拉菜单的矩形变换](img/Figure_13.28_B18327.jpg)
- en: 'Figure 13.28: The Rect Transform of the Dropdown'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.28：下拉菜单的矩形变换
- en: 'Your Dropdown should now appear as follows:'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的下拉菜单现在应该如下所示：
- en: '![Figure 13.29: The current state of the Dropdown](img/Figure_13.29_B18327.jpg)'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图13.29：下拉菜单的当前状态](img/Figure_13.29_B18327.jpg)'
- en: 'Figure 13.29: The current state of the Dropdown'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.29：下拉菜单的当前状态
- en: To change the Dropdown background, we need to change the `uiElements_12` subsprite
    into the `Arrow`. You can adjust the properties of `Arrow` to change its look
    and general position.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改下拉菜单的背景，我们需要将`uiElements_12`子精灵更改为`箭头`。你可以调整`箭头`的属性来改变其外观和一般位置。
- en: 'Give the `Arrow` the `uiElements_132` sprite and adjust the Rect Transform,
    as illustrated:'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给`箭头`分配`uiElements_132`精灵，并调整矩形变换，如图所示：
- en: '![Figure 13.30: The Rect Transform of the Arrow](img/Figure_13.30_B18327.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图13.30：箭头的矩形变换](img/Figure_13.30_B18327.jpg)'
- en: 'Figure 13.30: The Rect Transform of the Arrow'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.30：箭头的矩形变换
- en: Note
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Typing **132** in the search bar of the Project view is a quick way to find
    the **uiElements_132** image.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目视图的搜索栏中键入**132**是快速找到**uiElements_132**图像的方法。
- en: While the Dropdown component has a variable for a caption, the UI Dropdown template
    does not come prebuilt with one. So, we have to manually add one in ourselves.
    Right-click on `Dropdown` in the `Label`. Rename it `Caption`.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然下拉组件有一个标题变量，但 UI 下拉模板并没有预先构建一个。因此，我们必须自己手动添加一个。在 `Label` 中的 `Dropdown` 上右键单击。重命名为
    `Caption`。
- en: 'Give `Caption` the `catSprites_0` sprite and adjust its Rect Transform, as
    follows:![Figure 13.31: The Rect Transform of the Caption](img/Figure_13.31_B18327.jpg)'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给 `Caption` 赋予 `catSprites_0` 精灵并调整其矩形变换，如下所示：![图 13.31：标题的矩形变换](img/Figure_13.31_B18327.jpg)
- en: 'Figure 13.31: The Rect Transform of the Caption'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.31：标题的矩形变换
- en: We’ve set it to the image of the cat so that we can see whether it is displaying
    properly but remember that it will automatically change to the appropriate sprite
    based on the selection.
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将其设置为猫的图片，这样我们就可以看到它是否显示正确，但请记住，它将根据选择自动更改为适当的精灵。
- en: 'Now, select `Label` and adjust its **Rect Transform** and **Text** components
    as shown:![Figure 13.32: The Rect Transform of the Label](img/Figure_13.32_B18327.jpg)'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择 `Label` 并调整其 **矩形变换** 和 **文本** 组件，如下所示：![图 13.32：标签的矩形变换](img/Figure_13.32_B18327.jpg)
- en: 'Figure 13.32: The Rect Transform of the Label'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.32：标签的矩形变换
- en: If you try to adjust the **Text**, it will revert to Option A, since this is
    driven by the Dropdown component.
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你尝试调整 **文本**，它将恢复到选项 A，因为这是由下拉组件驱动的。
- en: Now that we have our caption set up the way we want it, let’s work on the Template.
    Enable the `Template` object so that you can see it in the scene and expand it
    in the `Scrollbar`, so we can leave it as it is. It will show up in the Scene
    view but will not be visible in Play mode, because its **Visibility** is set to
    **Auto Hide And Expand Viewport** in the Scroll Rect component of Template.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经按照我们想要的方式设置了标题，让我们来处理模板。启用 `Template` 对象，以便在场景中查看它并在 `Scrollbar` 中展开它，这样我们就可以保持它不变。它将在场景视图中显示，但在播放模式下不可见，因为其
    **可见性** 在模板的 Scroll Rect 组件中设置为 **自动隐藏并展开视口**。
- en: To change the background of the window that drops down, change the `Template`
    to `uiElements_11`.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改下拉窗口的背景，将 `Template` 更改为 `uiElements_11`。
- en: The `Item` child shows the general format to all options that will be listed
    in our Dropdown. Any changes we make to it will be automatically applied to all
    options when the Dropdown script populates them.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Item` 子项显示了所有将在我们的下拉列表中列出的选项的通用格式。我们对它所做的任何更改都将自动应用于当下拉脚本填充它们时所有选项。'
- en: Select `Item` and change its Rect Transform `50`.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择 `Item` 并更改其矩形变换 `50`。
- en: '![Figure 13.33: The Rect Transform and Hierarchy of the Item](img/Figure_13.33_B18327.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.33：项目的矩形变换和层次结构](img/Figure_13.33_B18327.jpg)'
- en: 'Figure 13.33: The Rect Transform and Hierarchy of the Item'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.33：项目的矩形变换和层次结构
- en: '`Content` needs to fully encapsulate the `Item`. So, change its Rect Transform
    `52`. Ensure that `0`.'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Content` 需要完全封装 `Item`。因此，更改其矩形变换 `52`。确保 `0`。'
- en: If you played the game, the `Content` from `0` to something else. This is actually
    supposed to happen (`option A` is being set behind the caption), but it’s annoying
    when you are trying to lay out your `Item`, because you won’t be able to see your
    `Item`.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你玩过游戏，`Content` 从 `0` 变为其他东西。这实际上是应该发生的（在标题后面设置了选项 A），但当你试图布局你的 `Item` 时，这会让人感到烦恼，因为你将无法看到你的
    `Item`。
- en: Therefore, after playing, change `0` so that you can continue editing.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，在玩游戏后，将 `0` 更改，以便你可以继续编辑。
- en: Just as we had to add a child Image to `Dropdown` so we could have a caption
    image, we also have to add a child Image to `Item`, so we can have an image display
    in the menu.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们不得不向 `Dropdown` 添加一个子图像以便有标题图像一样，我们也必须向 `Item` 添加一个子图像，以便在菜单中显示图像。
- en: Right-click on `Item` in the `Image`. Rename it `Item Image` and move it between
    `Item Checkmark` and `Item Label` in the **Hierarchy**.
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Image` 中的 `Item` 上右键单击。重命名为 `Item Image` 并在 **层次结构** 中将其移动到 `Item Checkmark`
    和 `Item Label` 之间。
- en: 'Give `Item Image` the `catSprites_0` sprite and adjust its Rect Transform,
    as shown:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给 `Item Image` 赋予 `catSprites_0` 精灵并调整其矩形变换，如下所示：
- en: '![Figure 13.34: The Rect Transform and Hierarchy of the Item Image](img/Figure_13.34_B18327.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.34：项目图像的矩形变换和层次结构](img/Figure_13.34_B18327.jpg)'
- en: 'Figure 13.34: The Rect Transform and Hierarchy of the Item Image'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.34：项目图像的矩形变换和层次结构
- en: 'Select `Item Label` and adjust its **Rect Transform** and **Text** components,
    as follows:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `Item Label` 并调整其 **矩形变换** 和 **文本** 组件，如下所示：
- en: '![Figure 13.35: The Rect Transform of the Item Label](img/Figure_13.35_B18327.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.35：项目标签的矩形变换](img/Figure_13.35_B18327.jpg)'
- en: 'Figure 13.35: The Rect Transform of the Item Label'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.35：项目标签的矩形变换
- en: 'The last thing to do to `Item` is to remove the white background. Select `Item
    Background` and change the `0`. Your Dropdown menu should now look as follows:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Item`做的最后一件事是移除白色背景。选择`Item Background`并更改`0`。现在你的下拉菜单应该看起来如下：
- en: '![Figure 13.36: The current state of the dropdown](img/Figure_13.36_B18327.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.36：下拉的当前状态](img/Figure_13.36_B18327.jpg)'
- en: 'Figure 13.36: The current state of the dropdown'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.36：下拉的当前状态
- en: 'Now that we have set up our Dropdown visually, we need to set up the properties
    of the Dropdown component. If you play the game, you will see that our Dropdown
    doesn’t have the correct options yet. You can’t tell from playing it, but **Caption
    Image** and **Item Image** also aren’t hooked up:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经从视觉上设置了下拉菜单，我们需要设置下拉组件的属性。如果你玩游戏，你会看到我们的下拉菜单还没有正确的选项。虽然玩游戏时你看不出来，但**Caption
    Image**和**Item Image**也没有连接：
- en: '![Figure 13.37: The current state of the dropdown when pressing Play](img/Figure_13.37_B18327.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.37：按下播放时的下拉当前状态](img/Figure_13.37_B18327.jpg)'
- en: 'Figure 13.37: The current state of the dropdown when pressing Play'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.37：按下播放时的下拉当前状态
- en: Let’s update the Dropdown component on `Dropdown`. Drag the `Caption` child
    from the Hierarchy into the `Item Image` into the `Caption` into **Caption Image**,
    the image of the cat will disappear from the scene. Don’t worry! It will come
    back. It’s updating to the image of **Option A**, which is set to nothing right
    now.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`Dropdown`上更新下拉组件。将层次结构中的`Caption`子项拖到`Item Image`中，然后拖到`Caption`中，拖到**Caption
    Image**中。猫的图像将从场景中消失。别担心！它会回来的。它正在更新为**选项 A**的图像，目前设置为无。
- en: The last thing we need to set up is the set of options that will display in
    the menu that drops down.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们最后需要设置的是将在下拉菜单中显示的选项集。
- en: We only need two options, so select `Option A` to `Cat` and the text `Option
    B` to `Dog`.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们只需要两个选项，所以将`Option A`选择为`Cat`，将文本`Option B`选择为`Dog`。
- en: 'Drag `catSprites_0` into the sprite slot under `Cat` and `dogSprites_0` into
    the sprite slot under `Dog`. Your Dropdown component properties should appear,
    as follows:'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`catSprites_0`拖到`Cat`下的精灵槽中，将`dogSprites_0`拖到`Dog`下的精灵槽中。你的下拉组件属性应该如下所示：
- en: '![Figure 13.38: The properties of the Dropdown component](img/Figure_13.38_B18327.jpg)'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 13.38：下拉组件的属性](img/Figure_13.38_B18327.jpg)'
- en: 'Figure 13.38: The properties of the Dropdown component'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.38：下拉组件的属性
- en: 'If you play the game, you will see that the dropdown now shows the appropriate
    list of options and the caption image and text update based on your selection:'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你玩游戏，你会看到下拉菜单现在显示了适当的选项列表，并且根据你的选择更新了标题图像和文本：
- en: '![Figure 13.39: The final visual set up of the dropdown options](img/Figure_13.39_B18327.jpg)'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 13.39：下拉选项的最终视觉设置](img/Figure_13.39_B18327.jpg)'
- en: 'Figure 13.39: The final visual set up of the dropdown options'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.39：下拉选项的最终视觉设置
- en: Using the information from the dropdown selection
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用下拉选择的信息
- en: Now that our Dropdown looks the way we want it and is functioning properly,
    we can access the player’s selection with code. We’ll use the player’s selection
    to update the player character image in the top-left corner of the screen.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将下拉菜单设置成我们想要的样子，并且它运行正常，我们可以用代码访问玩家的选择。我们将使用玩家的选择来更新屏幕左上角的玩家角色图像。
- en: 'To swap the player character image with the selection from the Dropdown, complete
    the following steps:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 要用下拉选择替换玩家角色图像，完成以下步骤：
- en: Create a new C# script in your `Assets/Scripts` folder named `PlayerCharacterSwap.cs`.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`Assets/Scripts`文件夹中创建一个新的 C# 脚本，命名为`PlayerCharacterSwap.cs`。
- en: 'For us to access UI variable types, add the `UnityEngine.UI` namespace to the
    top of the script with the following line:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了访问 UI 变量类型，将`UnityEngine.UI`命名空间添加到脚本顶部的以下行：
- en: '[PRE4]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We only need two variables, one to represent the Image that will be swapped
    with the selection from the **Dropdown** menu and one to represent the **Dropdown**
    menu.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要两个变量，一个用来表示将与**下拉菜单**中的选择进行交换的图像，另一个用来表示**下拉菜单**。
- en: 'We’ll attach this script to the Dropdown object, so we don’t have to make the
    variable referencing it public. Add the following variable declarations after
    the namespace declarations:'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将把这个脚本附加到下拉对象上，这样我们就不必将引用它的变量设置为公共的。在命名空间声明之后添加以下变量声明：
- en: '[PRE5]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Initialize the `dropDown` variable in an `Awake()` method with the Dropdown
    component attached to the object this script will be attached to:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Awake()`方法中初始化`dropDown`变量，将Dropdown组件附加到此脚本将要附加到的对象上：
- en: '[PRE6]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The default event on the Dropdown component is the **On Value Changed** event,
    and it accepts an integer argument. Create a public function that accepts an integer
    parameter with the following:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dropdown组件的默认事件是**On Value Changed**事件，它接受一个整数参数。创建一个公共函数，接受一个整数参数，如下所示：
- en: '[PRE7]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `DropDownSelection` method will get the integer value of the `selectionIndex`
    parameter within our script.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DropDownSelection`方法将在我们的脚本中获取`selectionIndex`参数的整数值。'
- en: 'Add the following two lines to your `DropDownSelection` function:'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下两行添加到您的`DropDownSelection`函数中：
- en: '[PRE8]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first line will find the text on the option at the specified index in the
    options list and print it to the console.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一行将在选项列表中找到指定索引处的文本，并将其打印到控制台。
- en: The second line will find the sprite on the option at the specified index in
    the options list and change the sprite on the `characterImage` to that sprite.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二行将在选项列表中找到指定索引处的精灵，并将`characterImage`上的精灵更改为该精灵。
- en: We’re now done with the script and can hook it up in the Unity Editor. Drag
    the `PlayerCharacterSwap.cs` script onto `Dropdown` to attach it.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经完成了脚本，可以在Unity编辑器中连接它。将`PlayerCharacterSwap.cs`脚本拖到`Dropdown`上以附加它。
- en: Remember, the `dropDown` variable is not public, because we expected to attach
    this script as a component to the `Dropdown`.
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，`dropDown`变量不是公共的，因为我们预计将此脚本作为组件附加到`Dropdown`。
- en: The public variable `characterImage` needs to be assigned in the Inspector.
    Drag the `Character Image` from the **Left Panel** | **Character Holder** | **Character**)
    to the **Character Image** slot on the **Player Character** **Swap** component.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 公共变量`characterImage`需要在检查器中分配。将**左面板** | **Character Holder** | **Character**中的`Character
    Image`拖到**Player Character Swap**组件上的**Character Image**槽中。
- en: 'Now we need to call the **DropDownSelection** function on the **PlayerCharacterSwap.cs**
    script from the **On Value Changed** event on the Dropdown component. Select the
    plus sign (**+**) in the **On Value Changed (Int32)** event list to add a new
    **On Value Changed** event. Drag **Dropdown** from the **Heirarchy** into the
    object slot and select the **DropDownSelection** function from the **Dynamic int**
    list of the **PlayerCharacterSwap** script. The **On Value Changed (Int32)** event
    list should appear as follows:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要在Dropdown组件的**On Value Changed**事件上调用**DropDownSelection**函数，从**PlayerCharacterSwap.cs**脚本中。在**On
    Value Changed (Int32)**事件列表中选择加号（**+**）来添加一个新的**On Value Changed**事件。将**Dropdown**从**层次结构**拖入对象槽中，并从**PlayerCharacterSwap**脚本的**Dynamic
    int**列表中选择**DropDownSelection**函数。**On Value Changed (Int32)**事件列表应如下所示：
- en: '![Figure 13.40: The On Value Changed (Int32) property](img/Figure_13.40_B18327.jpg)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![图13.40：On Value Changed (Int32)属性](img/Figure_13.40_B18327.jpg)'
- en: 'Figure 13.40: The On Value Changed (Int32) property'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.40：On Value Changed (Int32)属性
- en: 'That’s it! Now play the game and watch the player character’s image swap with
    the image selected from the Dropdown:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在玩玩游戏，看看玩家角色的图像是否与从Dropdown中选择的图像交换：
- en: '![Figure 13.41: The final version of the scene](img/Figure_13.41_B18327.jpg)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![图13.41：场景的最终版本](img/Figure_13.41_B18327.jpg)'
- en: 'Figure 13.41: The final version of the scene'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.41：场景的最终版本
- en: '*Figure 13**.41* shows the final version of the scene of the game.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13*.41显示了游戏的场景最终版本。'
- en: Summary
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Who knew there were so many different types of interactable UI objects? Having
    templates for these different UI objects is incredibly helpful. Technically, they
    can all be built *by hand* with Buttons, Images, and Text, but that would take
    a lot of effort you don’t have to worry about because Unity has done it for you.
    In this chapter, we reviewed how to use the common UI elements: Toggle, Slider,
    Dropdown, and Input Field.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 谁能想到有这么多不同类型的可交互UI对象？为这些不同的UI对象提供模板非常有帮助。技术上，它们都可以通过按钮、图像和文本*手动*构建，但这将需要大量的努力，你不必担心，因为Unity已经为你做到了。在本章中，我们回顾了如何使用常见的UI元素：切换、滑块、下拉列表和输入字段。
- en: Next, we will cover using animations within the UI!
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍如何在UI中使用动画！
