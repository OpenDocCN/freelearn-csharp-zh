- en: 'Chapter 9: Styling and Cleanup Tools'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：样式和清理工具
- en: Whether you are a frontend developer or a backend developer, having tools that
    help you maintain clean code is essential to move projects forward in an efficient
    manner.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 不论你是前端开发者还是后端开发者，拥有帮助你维护干净代码的工具对于以高效的方式推进项目至关重要。
- en: Similarly, having tools that allow you to edit CSS files quicker makes a development
    team move faster on a project. Fortunately, Visual Studio has several tools that
    you can use while working with CSS files that will allow you to write and complete
    your styles quickly and in a user-friendly way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，拥有允许你更快地编辑CSS文件的工具可以使开发团队在项目上更快地移动。幸运的是，Visual Studio有几个你可以在处理CSS文件时使用的工具，这将允许你以用户友好的方式快速编写和完成你的样式。
- en: If you are a backend programmer and you use C# or Visual Basic, you should also
    know that there are code analysis tools, both to maintain good quality and to
    follow nomenclature that you can define.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名后端程序员并且使用C#或Visual Basic，你也应该知道，有代码分析工具，既可以维护良好的质量，也可以遵循你可以定义的命名约定。
- en: 'These are the main topics we will cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章我们将涵盖的主要主题：
- en: Working with CSS styling tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS样式工具
- en: Cleaning code with code analysis tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代码分析工具清理代码
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To perform the tests explored throughout this chapter, you must have installed
    the workload shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013), *Getting
    Started with Visual Studio 2022*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行本章中探索的测试，你必须已经安装了[*第1章*](B17873_01_ePub.xhtml#_idTextAnchor013)中显示的工作负载，“Visual
    Studio 2022入门”。
- en: 'In addition, to follow along with the *Working with images* section, you must
    install an additional component called **Image and 3D model editors**, as shown
    in the following figure:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了跟随“使用图像”部分，你必须安装一个名为**图像和3D模型编辑器**的附加组件，如图所示：
- en: '![Figure 9.1 – The Image and 3D model editors individual component selection](img/Figure_9.01_B17873.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 图像和3D模型编辑器单个组件选择](img/Figure_9.01_B17873.jpg)'
- en: Figure 9.1 – The Image and 3D model editors individual component selection
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 图像和3D模型编辑器单个组件选择
- en: 'You can find the pieces of code that have been added to the project in the
    following repository:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下存储库中找到已添加到项目中的代码片段：
- en: '[https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter09](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter09)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter09](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter09)'
- en: Woking with CSS styling tools
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS样式工具
- en: Having tools for editing CSS files is an advantage for frontend web developers,
    as it allows them to edit these files in a fast and easy way. That is why Visual
    Studio contains several tools that can be of great help in creating and editing
    these files.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前端Web开发者来说，拥有编辑CSS文件的工具是一个优势，因为它允许他们快速轻松地编辑这些文件。这就是为什么Visual Studio包含几个在创建和编辑这些文件时非常有帮助的工具。
- en: Let's start by examining CSS3 snippets.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从检查CSS3代码片段开始。
- en: CSS3 snippets
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS3代码片段
- en: Even today, there are still cross-browser compatibility issues for the display
    of styles. Surely it must have happened to you that when implementing a CSS property,
    it looks different on each of the browsers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在今天，样式显示仍然存在跨浏览器兼容性问题。肯定发生过这样的情况，当你实现一个CSS属性时，它在每个浏览器上看起来都不同。
- en: It is for this reason that Visual Studio has implemented a CSS3 snippet completion
    system that allows cross-browser compatibility without having to write code for
    each browser.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为这个原因，Visual Studio实现了CSS3代码片段完成系统，它允许跨浏览器兼容性，而无需为每个浏览器编写代码。
- en: 'To see this in a practical way, we can open the `SPAProject` | `ClientApp`
    | `src` | `components` | `NavMenu.css` file and locate the `.box-shadow` style.
    Within this style, we can start typing the term `border-radius`, which will display
    the list of IntelliSense recommendations, as shown in *Figure 9.2*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以实际的方式看到这一点，我们可以打开`SPAProject` | `ClientApp` | `src` | `components` | `NavMenu.css`文件，并定位到`.box-shadow`样式。在这个样式内，我们可以开始输入术语`border-radius`，这将显示IntelliSense推荐列表，如图9.2所示：
- en: '![Figure 9.2 – Recommendations for the term border-radius'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – border-radius术语的推荐'
- en: '](img/Figure_9.02_B17873.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.02_B17873.jpg)'
- en: Figure 9.2 – Recommendations for the term border-radius
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – border-radius术语的推荐
- en: 'You can see that there are two types of icons in this list, some with a blue
    geometric shape and others with a square white figure. Among these icons, we are
    interested in those of white color, since they are the CSS3 snippets. We can scroll
    through the list with the keys on the keyboard, and once we have selected the
    snippet we are interested in, just press the *tab* key twice, which will result
    in the implementation of the cross-browser-compatible CSS3 snippet, as shown here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这个列表中有两种类型的图标，一些是蓝色的几何形状，而另一些是白色的正方形。在这些图标中，我们感兴趣的是白色图标，因为它们是 CSS3 片段。我们可以使用键盘上的键滚动列表，一旦我们选择了感兴趣的片段，只需按两次
    *tab* 键，这将导致实现跨浏览器的 CSS3 片段，如下所示：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Among the most common multi-browser CSS3 styles, we can find the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在最常见的多浏览器 CSS3 样式中，我们可以找到以下内容：
- en: Alignment styles
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对齐样式
- en: Animation styles
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画样式
- en: Background styles
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景样式
- en: Border styles
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边框样式
- en: Box styles
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 盒子样式
- en: Column styles
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列样式
- en: Flex styles
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性样式
- en: Grid styles
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格样式
- en: Mask styles
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遮罩样式
- en: Text styles
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本样式
- en: Transition styles
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡样式
- en: As you can see, these snippets can help you in the creation of styles by attacking
    cross-browser compatibility in an effective way. Let's see now how Visual Studio
    can help us understand CSS styles more quickly through indentation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这些片段可以通过有效攻击跨浏览器兼容性来帮助您创建样式。现在让我们看看 Visual Studio 如何通过缩进来帮助我们更快地理解 CSS
    样式。
- en: Hierarchical CSS indentation
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分层 CSS 缩进
- en: Style indentation is a visual aid that can increase productivity considerably
    by showing the content of a style through spaces at the beginning of a line, as
    well as the sub-styles belonging to a parent style.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 样式缩进是一种视觉辅助工具，通过在行的开头显示空格来显示样式的内容，以及属于父样式的子样式，可以显著提高生产力。
- en: 'Visual Studio allows you to create a quick indentation in the style files.
    Suppose, for example, you want to create a style called `.main` and a sub-style
    that affects all `div` elements within the `.main` style, as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 允许您在样式文件中创建快速缩进。例如，如果您想创建一个名为 `.main` 的样式以及影响 `.main` 样式内所有 `div`
    元素的子样式，如下所示：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In principle, if you have written the styles at the same indentation level,
    you can apply the indentation by going to the **Edit** | **Advanced** | **Format
    Document** menu to perform a hierarchical indentation of the whole document, as
    shown in the following code block:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在原则上，如果您在相同的缩进级别编写了样式，您可以通过转到 **编辑** | **高级** | **格式文档** 菜单来应用缩进，从而对整个文档进行分层缩进，如下面的代码块所示：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If, on the other hand, you only want to apply the indentation on a specifically
    selected set of styles, you can select the **Edit** | **Advanced** | **Format
    Selection** option.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想对特定选择的样式集应用缩进，可以选择 **编辑** | **高级** | **格式选择** 选项。
- en: Note
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to customize the indentation values through the **Tools** | **Options**
    | **Text Editor** | **CSS** | **Tabs** option.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 **工具** | **选项** | **文本编辑器** | **CSS** | **制表符** 选项来自定义缩进值。
- en: Now, let's look at the color picker feature in Visual Studio.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Visual Studio 中的颜色选择器功能。
- en: Color picker
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色选择器
- en: One feature that is extremely useful when working with styles is the ability
    to select a color for an element. Fortunately, Visual Studio has a built-in color
    picker that, although looking very simple, does its job very well.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理样式时，选择元素颜色的功能非常有用。幸运的是，Visual Studio 有一个内置的颜色选择器，虽然看起来非常简单，但它的工作做得很好。
- en: 'To test it, let''s edit the `.main` style we created in the *Hierarchical CSS
    indentation* section. Type the `background-color:` attribute, which will show
    you a vertical display of predefined colors with an assigned name that you can
    select. Ignore this list and instead type the `#` symbol. Immediately, you will
    see a new horizontal list of predefined colors, as shown in *Figure 9.3*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试它，让我们编辑在 *分层 CSS 缩进* 部分中创建的 `.main` 样式。输入 `background-color:` 属性，这将显示一个带有指定名称的预定义颜色列表的垂直显示，您可以选择。忽略此列表，而是输入
    `#` 符号。立即，您将看到一个新的预定义颜色水平列表，如图 *9.3* 所示：
- en: '![Figure 9.3 – A horizontal list of predefined colors'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.3 – 预定义颜色的水平列表'
- en: '](img/Figure_9.03_B17873.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.03_B17873.jpg)'
- en: Figure 9.3 – A horizontal list of predefined colors
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – 预定义颜色的水平列表
- en: 'If you want to set a custom color, you can click on the button at the end of
    the color list, which will display the color picker, as shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想设置自定义颜色，可以点击颜色列表末尾的按钮，这将显示颜色选择器，如下所示：
- en: '![Figure 9.4 – The CSS color picker'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – CSS 颜色选择器'
- en: '](img/Figure_9.04_B17873.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.04_B17873.jpg)'
- en: Figure 9.4 – The CSS color picker
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – CSS 颜色选择器
- en: 'This way, it is possible to select a color from the color selection, change
    the color hue, add opacity or transparency to the selected color, and even use
    the eyedropper tool to select the color from an external source, such as an image.
    For this demonstration, I have selected the color with the `#1b0b8599` code, as
    seen in *Figure 9.5*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，就可以从颜色选择器中选择一个颜色，改变颜色的色调，为所选颜色添加不透明度或透明度，甚至可以使用吸管工具从外部源，如图片中选取颜色。对于这个演示，我已经选择了
    *图 9.5* 中看到的 `#1b0b8599` 代码的颜色：
- en: '![Figure 9.5 – Selecting a custom color from the color picker'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – 从颜色选择器中选择自定义颜色'
- en: '](img/Figure_9.05_B17873.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.05_B17873.jpg)'
- en: Figure 9.5 – Selecting a custom color from the color picker
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 从颜色选择器中选择自定义颜色
- en: 'A great advantage of this tool is that it will store the custom-selected colors
    internally, so you can reuse them over and over again throughout your CSS files.
    For example, if we go to the `.main div` style and want to assign a custom color
    to the `color` attribute, we will see that in the horizontal color list, the custom
    color that we have used in *Figure 9.5* is listed, as shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具的一个巨大优势是它会将自定义选择的颜色内部存储，因此你可以在整个 CSS 文件中反复使用它们。例如，如果我们去 `.main div` 样式并想要将自定义颜色分配给
    `color` 属性，我们会看到在水平颜色列表中，我们在 *图 9.5* 中使用的自定义颜色被列出，如下所示：
- en: '![Figure 9.6 – A stored list of previously used custom colors'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6 – 存储的先前使用的自定义颜色列表'
- en: '](img/Figure_9.06_B17873.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.06_B17873.jpg)'
- en: Figure 9.6 – A stored list of previously used custom colors
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 存储的先前使用的自定义颜色列表
- en: The color picker, without a doubt, is a tool that can help us a lot when we
    need to assign a custom color. Now, let's find out how IntelliSense can help us
    write faster in CSS files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，颜色选择器是我们需要分配自定义颜色时非常有帮助的工具。现在，让我们来看看 IntelliSense 如何帮助我们更快地在 CSS 文件中编写代码。
- en: IntelliSense in style files
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式文件中的 IntelliSense
- en: Just as IntelliSense can be an extraordinary help when creating source code,
    it can also be very useful when creating style files.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 IntelliSense 在创建源代码时可以提供非凡的帮助一样，它在创建样式文件时也非常有用。
- en: 'Let''s look at some practical examples of IntelliSense usage. Let''s go to
    the `ClientApp` | `src` | `components` | `NavMenu.css` file. Inside this file,
    let''s proceed to create a new style called `.intellisense`, as we can see here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 IntelliSense 的实际使用示例。让我们转到 `ClientApp` | `src` | `components` | `NavMenu.css`
    文件。在这个文件内部，让我们继续创建一个名为 `.intellisense` 的新样式，正如我们在这里可以看到的那样：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we position ourselves inside the style and press the *Ctrl* + *spacebar*
    key combination, the list of all the attributes that we can add to the newly created
    style will be displayed. If we start typing the name of an attribute, it will
    start filtering the list with the matches of what we type, as shown in *Figure
    9.7*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们定位在样式内部并按下 *Ctrl* + *空格键* 组合键，将显示可以添加到新创建样式的所有属性的列表。如果我们开始输入属性名，它将开始过滤与我们所输入的匹配项的列表，正如
    *图 9.7* 中所示：
- en: '![Figure 9.7 – IntelliSense showing recommendations'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7 – IntelliSense 显示推荐'
- en: '](img/Figure_9.07_B17873.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.07_B17873.jpg)'
- en: Figure 9.7 – IntelliSense showing recommendations
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – IntelliSense 显示推荐
- en: Also, it is possible to select an item from the list and complete the item name
    by pressing the *tab* key.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以从列表中选择一个项目，并通过按下 *Tab* 键来完成项目名称。
- en: 'For this demonstration, let''s assume that we need to use the `background`
    attribute, but we do not know the possible values we can assign to it. IntelliSense
    can help us in a visual way by showing us an example of the use of each attribute,
    as we can see in the following figure:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，让我们假设我们需要使用 `background` 属性，但我们不知道可以分配给它的可能值。IntelliSense 可以通过以可视化的方式向我们展示每个属性的用法来帮助我们，正如我们可以在以下图中看到的那样：
- en: '![Figure 9.8 – IntelliSense showing a possible use of the background attribute'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.8 – IntelliSense 显示背景属性的可能的用法'
- en: '](img/Figure_9.08_B17873.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.08_B17873.jpg)'
- en: Figure 9.8 – IntelliSense showing a possible use of the background attribute
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – IntelliSense 显示背景属性的可能的用法
- en: 'Not only that, but IntelliSense also adapts the results to the context of the
    selected attribute. For example, suppose we need to assign a set of fonts to the
    `font-family` attribute of a style. If we type the `font-family` attribute, Visual
    Studio will provide us with the list of values corresponding to the `font-family`
    attribute, as shown in *Figure 9.9*:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，IntelliSense 还会根据所选属性的上下文调整结果。例如，假设我们需要将一组字体分配给样式的`font-family`属性。如果我们输入`font-family`属性，Visual
    Studio 将提供与`font-family`属性相对应的值列表，如图*图 9.9*所示：
- en: '![Figure 9.9 – Recommended values for the font-family attribute by IntelliSense'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.9 – IntelliSense 推荐的 font-family 属性值](img/Figure_9.9_B17873.jpg)'
- en: '](img/Figure_9.09_B17873.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 9.09_B17873.jpg](img/Figure_9.09_B17873.jpg)'
- en: Figure 9.9 – Recommended values for the font-family attribute by IntelliSense
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – IntelliSense 推荐的 font-family 属性值
- en: 'If, on the other hand, we want to assign a value to the `font-weight` attribute,
    we will see results according to this attribute, as shown in *Figure 9.10*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要为`font-weight`属性分配一个值，我们将根据此属性看到结果，如图*图 9.10*所示：
- en: '![Figure 9.10 – Recommended values for the font-weight attribute by IntelliSense'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.10 – IntelliSense 推荐的 font-weight 属性值](img/Figure_9.10_B17873.jpg)'
- en: '](img/Figure_9.10_B17873.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.10_B17873.jpg](img/Figure_9.10_B17873.jpg)'
- en: Figure 9.10 – Recommended values for the font-weight attribute by IntelliSense
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – IntelliSense 推荐的 font-weight 属性值
- en: Undoubtedly, IntelliSense is an excellent aid for the creation of styles. Now,
    let's move on to analyze the image editor.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，IntelliSense 是创建样式的优秀辅助工具。现在，让我们继续分析图像编辑器。
- en: Working with images
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理图片
- en: A tool that is not very well known in Visual Studio is the image editor. This
    tool must be installed as specified in the *Technical requirements* section, and
    without a doubt, it can help us in the basic editing of the images of our project.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中不太为人所知的工具是图片编辑器。此工具必须按照*技术要求*部分所述进行安装，毫无疑问，它可以帮助我们对项目中的图片进行基本编辑。
- en: 'Here are some of the situations in which the image editor is useful:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些图像编辑器有用的场景：
- en: When we need to rescale an image
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要调整图片大小比例时
- en: When we need to change the color of a section to another color
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要将某个部分的颜色更改为另一种颜色时
- en: When we need to rotate an image
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要旋转图片时
- en: When we need to add text to an image
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要在图片上添加文本时
- en: When we need to apply a filter to an image
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们需要对图片应用过滤器时
- en: In the repository mentioned in the *Technical requirements* section, I have
    added an image located at `SPAProject` | `ClientApp` | `public` | `visualstudiologo.png`
    to perform different tests with the image editor.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在*技术要求*部分提到的仓库中，我已经添加了一个位于`SPAProject` | `ClientApp` | `public` | `visualstudiologo.png`的图片，用于使用图片编辑器进行不同的测试。
- en: 'Once we open an image (in this case, `visualstudiologo.png`), we will see two
    toolbars – one located on the left side, called the *image editor* toolbar, and
    the second one on the top, called the image editor mode toolbar, as shown in the
    following figure:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们打开图片（在这种情况下，`visualstudiologo.png`），我们将看到两个工具栏 – 一个位于左侧，称为*图像编辑器*工具栏，另一个位于顶部，称为图像编辑器模式工具栏，如图以下所示：
- en: '![Figure 9.11 – The Visual Studio image editor'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.11 – Visual Studio 图像编辑器](img/Figure_9.11_B17873.jpg)'
- en: '](img/Figure_9.11_B17873.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.11_B17873.jpg](img/Figure_9.11_B17873.jpg)'
- en: Figure 9.11 – The Visual Studio image editor
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – Visual Studio 图像编辑器
- en: First, let's analyze the image editor toolbar. This is a bar that appears on
    the left side of the editor and contains tools that allow you to perform some
    action on the image, such as adding geometric shapes or rotating the image.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们分析图像编辑器工具栏。这是一个出现在编辑器左侧的栏，其中包含允许你在图片上执行某些操作的工具，例如添加几何形状或旋转图片。
- en: At the top, we have the image editor mode toolbar. This toolbar contains buttons
    that execute advanced commands, such as irregular selection, wand selection, pan,
    zoom, and image properties.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部，我们有图像编辑器模式工具栏。此工具栏包含执行高级命令的按钮，例如不规则选择、魔杖选择、平移、缩放和图像属性。
- en: 'Let''s look at a practical example. Suppose we need to execute the following
    tasks on the image:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个实际例子。假设我们需要在图片上执行以下任务：
- en: Convert the image to grayscale.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图片转换为灰度。
- en: Flip the image horizontally.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平翻转图片。
- en: Write the text `Visual Studio Logo` on the image.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图片上写上文本`Visual Studio Logo`。
- en: 'To execute these tasks, we must perform the following steps in order:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行这些任务，我们必须按照以下步骤依次进行：
- en: 'In the image editor mode toolbar, select the **Advanced** | **Filters** | **Black
    and White** option, as shown in the following figure:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像编辑器模式工具栏中，选择**高级** | **过滤器** | **黑白**选项，如图以下所示：
- en: '![Figure 9.12 – Converting the image to grayscale'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.12 – 将图像转换为灰度'
- en: '](img/Figure_9.12_B17873.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 9.12](img/Figure_9.12_B17873.jpg)'
- en: Figure 9.12 – Converting the image to grayscale
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – 将图像转换为灰度
- en: 'In the image editor toolbar, double-click the rotate image button, as shown
    here:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像编辑工具栏中，双击旋转图像按钮，如图所示：
- en: '![Figure 9.13 – Rotating the image'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.13 – 旋转图像'
- en: '](img/Figure_9.13_B17873.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 9.13](img/Figure_9.13_B17873.jpg)'
- en: Figure 9.13 – Rotating the image
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13 – 旋转图像
- en: 'Select the text tool, as shown in *Figure 9.14*:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文本工具，如图 9.14 所示：
- en: '![Figure 9.14 – Selecting the text tool'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.14 – 选择文本工具'
- en: '](img/Figure_9.14_B17873.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.14](img/Figure_9.14_B17873.jpg)'
- en: Figure 9.14 – Selecting the text tool
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14 – 选择文本工具
- en: 'Add the text `Visual Studio Logo` in the **Properties** window, as shown in
    *Figure 9.15*:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**窗口中添加文本 `Visual Studio Logo`，如图 9.15 所示：
- en: '![Figure 9.15 – Changing the Text value in the Properties window'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.15 – 在属性窗口中更改文本值'
- en: '](img/Figure_9.15_B17873.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 9.15](img/Figure_9.15_B17873.jpg)'
- en: Figure 9.15 – Changing the Text value in the Properties window
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15 – 在属性窗口中更改文本值
- en: 'With these edits applied, we will have the result shown in *Figure 9.16*:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 应用这些编辑后，我们将得到如图 9.16 所示的结果：
- en: '![Figure 9.16 – The result after applying the changes'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.16 – 应用更改后的结果'
- en: '](img/Figure_9.16_B17873.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 9.16](img/Figure_9.16_B17873.jpg)'
- en: Figure 9.16 – The result after applying the changes
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.16 – 应用更改后的结果
- en: The last thing to do is to save the image so that the changes are permanently
    applied to it. With this example, we have been able to see how the image editor
    can be very useful if we need to make edits to our images.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将图像保存，以便永久应用更改。通过这个例子，我们能够看到图像编辑器在需要编辑我们的图像时可以非常有用。
- en: In the next part, let's understand how code analysis can help .NET developers
    to have clean and quality code.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，让我们了解代码分析如何帮助 .NET 开发者拥有干净和高质量的代码。
- en: Cleaning code with code analysis tools
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码分析工具清理代码
- en: Visual Studio 2022 includes a series of C# or Visual Basic code analyzers that
    allow us to maintain good code quality and consistent style in the source code.
    To use this feature by default, projects must be configured on a framework version
    of .NET 5 or higher. To differentiate compilation errors, analysis violations
    will appear with the **CA** prefix in the case of a code quality analysis violation
    and **IDE** in the case of a style analysis violation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2022 包含一系列 C# 或 Visual Basic 代码分析器，允许我们在源代码中维护良好的代码质量和一致的风格。要默认使用此功能，项目必须在
    .NET 5 或更高版本的框架版本上配置。为了区分编译错误，分析违规将显示为代码质量分析违规时的 **CA** 前缀，以及样式分析违规时的 **IDE**。
- en: The code analysis tools correspond to code quality analysis and code style analysis,
    so we will see what they are, how they can help us, and learn how to set up and
    run with code cleanup profiles. Let's first look at how to take advantage of code
    quality analysis.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析工具对应于代码质量分析和代码风格分析，因此我们将了解它们是什么，它们如何帮助我们，以及如何设置和运行带有代码清理配置文件。让我们首先看看如何利用代码质量分析。
- en: Code quality analysis
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码质量分析
- en: Code quality consists of having a source code that is secure, with the best
    possible performance and good design, among other characteristics. Fortunately,
    Visual Studio can help us to maintain high-quality code through rules enabled
    by default.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 代码质量包括拥有安全、性能最佳和设计良好的源代码，以及其他特性。幸运的是，Visual Studio 可以通过默认启用的规则帮助我们维护高质量的代码。
- en: 'To visualize one of these violations in a practical way, let''s go to the `Program.cs`
    file and add the following line at the end of the file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以实际的方式可视化这些违规之一，让我们转到 `Program.cs` 文件，并在文件末尾添加以下行：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, to compile the project, right-click on the project name and click on the
    **Build** option, as shown in the following figure:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要编译项目，右键单击项目名称，然后单击以下图示中的**构建**选项：
- en: '![Figure 9.17 – Compiling the project'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.17 – 编译项目'
- en: '](img/Figure_9.17_B17873.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 9.17](img/Figure_9.17_B17873.jpg)'
- en: Figure 9.17 – Compiling the project
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17 – 编译项目
- en: 'When performing the compilation, we do not see errors immediately; however,
    if you go to the `int` to the `ReferenceEquals` method because it will always
    return a *false* value due to the *boxing* operation (conversion from a *value*
    type to a *reference* type) of the value:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行编译时，我们不会立即看到错误；然而，如果你导航到 `int` 到 `ReferenceEquals` 方法，因为它会因为值类型的 *装箱* 操作（从
    *值* 类型转换为 *引用* 类型）而始终返回一个 *false* 值：
- en: '![Figure 9.18 – A code quality warning'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.18 – 代码质量警告'
- en: '](img/Figure_9.18_B17873.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.18_B17873.jpg)'
- en: Figure 9.18 – A code quality warning
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18 – 代码质量警告
- en: Important Note
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Occasionally, Visual Studio may suggest code fixes to fix warnings in the code,
    through a light bulb icon appearing on the error. Also, you can see the complete
    list of code quality rules at the following URL: [https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md](https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Visual Studio可能会通过错误上的灯泡图标建议代码修复来修复代码中的警告。您还可以在以下URL看到完整的代码质量规则列表：[https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md](https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md)。
- en: Let's now look at the rules applied to the code style.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看应用于代码样式的规则。
- en: Working with code styles
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与代码样式一起工作
- en: Code styles are configurations that can be quite useful for C# and Visual Basic
    developers to keep a project with correct nomenclature, especially if the project
    is used by several members of a team.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 代码样式是配置，对于C#和Visual Basic开发者来说非常有用，可以帮助他们保持项目命名的一致性，尤其是当项目由团队的多位成员使用时。
- en: Code styles can be created for a specific project or Visual Studio instance
    installed on a machine.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为特定项目或安装在机器上的Visual Studio实例创建代码样式。
- en: 'The way to use code styles is by opening the **Tools** | **Options** | **Text
    Editor** | **C# or Visual Basic** | **Code Style** | **General** section:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码样式的办法是打开**工具** | **选项** | **文本编辑器** | **C# 或 Visual Basic** | **代码样式** |
    **常规**部分：
- en: '![Figure 9.19 – The code style configuration window'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.19 – 代码样式配置窗口'
- en: '](img/Figure_9.19_B17873.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.19_B17873.jpg)'
- en: Figure 9.19 – The code style configuration window
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19 – 代码样式配置窗口
- en: Once we are in this window, we will be able to see the code style configuration
    for the current machine. We can change any of these options to fit the code nomenclature
    we need.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在这个窗口中，我们将能够看到当前机器的代码样式配置。我们可以更改这些选项中的任何一个以适应我们需要的代码命名约定。
- en: 'If we need to specify a configuration file to be applied as part of the solution,
    even if it is opened on another machine, we can modify the configuration values.
    Once we have the settings we want to follow throughout the solution, we should
    click on the **Generate .editorconfig file from settings** button, as shown here:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要指定一个配置文件作为解决方案的一部分来应用，即使它在另一台机器上打开，我们也可以修改配置值。一旦我们有了想要在整个解决方案中遵循的设置，我们应该点击**从设置生成
    .editorconfig 文件**按钮，如图所示：
- en: '![Figure 9.20 – The button to generate a configuration file'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.20 – 生成配置文件的按钮'
- en: '](img/Figure_9.20_B17873.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.20_B17873.jpg)'
- en: Figure 9.20 – The button to generate a configuration file
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.20 – 生成配置文件的按钮
- en: 'This will open a dialog, asking for the name and path where the configuration
    file will be saved. In this example, it has been saved as `config.editorconfig`,
    as shown in the following figure:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个对话框，询问配置文件的名称和保存路径。在这个例子中，它已经被保存为`config.editorconfig`，如图所示：
- en: '![Figure 9.21 – The configuration file created'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.21 – 创建的配置文件'
- en: '](img/Figure_9.21_B17873.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.21_B17873.jpg)'
- en: Figure 9.21 – The configuration file created
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21 – 创建的配置文件
- en: If we proceed to open the file we have created, the text editor will open. Here,
    we will be able to see the applied configuration in text format, being able to
    change the preselected parameters quickly. Once again, these changes will accompany
    the solution so that all source files that are part of the project and have the
    same code nomenclature.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开我们创建的文件，文本编辑器将打开。在这里，我们将能够以文本格式看到应用的配置，并能够快速更改预选参数。这些更改将伴随解决方案，以确保所有属于项目且具有相同代码命名的源文件。
- en: Now, let's talk about code cleanup profiles that will control which aspects
    should be applied when code is cleaned.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈代码清理配置文件，它将控制代码清理时应应用哪些方面。
- en: Configuring a code cleanup profile
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置代码清理配置文件
- en: 'The code cleanup profiles are a configuration in which you can indicate what
    type of code cleanup you want to apply to your project. There are several ways
    to access the profile configuration window, but the general way is to go to the
    **Tools** | **Options** | **Text Editor** | **Code Cleanup** | **Configure Code
    Cleanup** menu. This will display the following figure:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 代码清理配置文件是一种配置，您可以通过它来指定想要应用到项目中的代码清理类型。有多种方法可以访问配置文件窗口，但一般方法是前往**工具** | **选项**
    | **文本编辑器** | **代码清理** | **配置代码清理**菜单。这将显示以下图示：
- en: '![Figure 9.22 – The Configuration Code Cleanup window'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.22 – 配置代码清理窗口'
- en: '](img/Figure_9.22_B17873.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.22_B17873.jpg)'
- en: Figure 9.22 – The Configuration Code Cleanup window
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22 – 配置代码清理窗口
- en: 'As you can see, two cleaning profiles can be configured with different options,
    with **Profile 1** the one that will be executed by default. Likewise, inside
    the window we have two sections:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，可以配置两个清理配置文件，其中**配置文件1**是默认执行的。同样，在窗口中我们有两个部分：
- en: The **Included fixers** list contains the specific active actions that we want
    to apply throughout the project.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含的修复程序**列表包含我们希望在项目中应用的具体活动操作。'
- en: The **Available fixers** list contains the actions that are currently disabled,
    but at any time, we could add them to the active actions.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用修复程序**列表包含当前已禁用的操作，但我们可以随时将它们添加到活动操作中。'
- en: Fixers can be enabled or disabled easily, with the arrow buttons marked in *Figure
    9.22*.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 可以轻松启用或禁用修复程序，如*图9.22*中标记的箭头按钮所示。
- en: Executing code cleanup
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行代码清理
- en: Once we have created the code cleanup file and established the fixers that will
    be applied for the cleanup, let's see how we can apply this cleanup.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了代码清理文件并确定了将应用于清理的修复程序，让我们看看如何应用此清理。
- en: 'To do this, we are going to the bottom of the editor, where we will press the
    button with the broom icon, as shown in *Figure 9.23*:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，我们将光标移至编辑器的底部，然后按下带有扫帚图标的按钮，如图*图9.23*所示：
- en: '![Figure 9.23 – The button to execute code cleanup'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.23 – 执行代码清理的按钮'
- en: '](img/Figure_9.23_B17873.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.23_B17873.jpg)'
- en: Figure 9.23 – The button to execute code cleanup
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23 – 执行代码清理的按钮
- en: 'As mentioned in the *Configuring a code cleanup profile* subsection, this will
    apply only the rules configured in the active cleaning profile. For example, suppose
    we have the following configuration in the default configuration profile:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如*配置代码清理配置文件*子节所述，这将仅应用活动清理配置文件中配置的规则。例如，假设我们在默认配置配置文件中有以下配置：
- en: '![Figure 9.24 – A set of selected test fixers'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.24 – 一组选定的测试修复程序'
- en: '](img/Figure_9.24_B17873.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.24_B17873.jpg)'
- en: Figure 9.24 – A set of selected test fixers
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24 – 一组选定的测试修复程序
- en: 'Then, we decide to modify the `WeatherForecast.cs` file with the following
    code without indentation, and with an unused `using System.Data.Common` namespace:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们决定修改`WeatherForecast.cs`文件，使用以下无缩进的代码，并且包含一个未使用的`using System.Data.Common`命名空间：
- en: '[PRE27]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, when we apply code cleanup, it will result in clean code, as shown here:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们应用代码清理时，将得到干净的代码，如图所示：
- en: '[PRE39]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Undoubtedly, this tool can be of great help to maintain a consistent and clean
    style, whether we work individually or with a development team.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，这个工具可以帮助我们保持一致和干净的样式，无论我们是单独工作还是与开发团队一起工作。
- en: Note
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to configure Visual Studio to perform a code cleanup every time
    a file is saved through the **Run Code Cleanup profile on Save** option, located
    in **Tools** | **Configuration** | **Text Editor** | **Code Cleanup**.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过**工具** | **配置** | **文本编辑器** | **代码清理**中的**在保存时运行代码清理配置文件**选项配置Visual Studio，在每次保存文件时执行代码清理。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about the different tools that Visual Studio
    has for frontend and backend developers.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Visual Studio为前端和后端开发者提供的不同工具。
- en: We learned how CSS3 snippets can help create cross-browser compatible styles
    quickly. Likewise, hierarchical CSS indentation helps to keep styles readable.
    Also, the color picker can help to select colors quickly, and we have also seen
    how IntelliSense is present when we need to edit CSS files, and finally, how the
    image editor provides useful tools if we need to make basic edits to our images.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了CSS3代码片段如何帮助我们快速创建跨浏览器兼容的样式。同样，层次化的CSS缩进有助于保持样式可读。此外，颜色选择器可以帮助我们快速选择颜色，我们还看到了当需要编辑CSS文件时IntelliSense的存在，最后，图像编辑器提供了有用的工具，如果我们需要对我们图像进行基本编辑的话。
- en: In the case of code analysis, we have learned how code quality analysis can
    help us to have safe and reliable code, while code style analysis helps us to
    maintain a nomenclature whether we are working individually or with a team of
    developers.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码分析的情况下，我们已经了解到代码质量分析如何帮助我们拥有安全可靠的代码，而代码样式分析则帮助我们维护命名约定，无论我们是单独工作还是与开发团队一起工作。
- en: In [*Chapter 10*](B17873_10_ePub.xhtml#_idTextAnchor122), *Publishing Projects*,
    you will learn the most common ways to publish web projects on different platforms.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第10章*](B17873_10_ePub.xhtml#_idTextAnchor122)，*发布项目*，你将学习在各个平台上发布Web项目的最常见方法。
