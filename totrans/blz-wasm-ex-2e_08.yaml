- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Building a Kanban Board Using Events
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用事件构建看板
- en: As developers, we strive to make our applications as dynamic as possible. For
    that, we use **events**. Events are messages sent by an object to indicate that
    an action has occurred. Razor components can handle many different types of events.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们努力使我们的应用程序尽可能动态。为此，我们使用**事件**。事件是对象发送的消息，指示已发生动作。Razor组件可以处理许多不同类型的事件。
- en: In this chapter, we will learn how to handle different types of events in a
    Blazor WebAssembly app. We will learn how to use lambda expressions and how to
    prevent default actions. We will also learn how to use both **arbitrary** **parameters**
    and **attribute splatting** to simplify how we assign attributes to components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在Blazor WebAssembly应用程序中处理不同类型的事件。我们将学习如何使用lambda表达式以及如何防止默认操作。我们还将学习如何使用**任意**参数和**属性展开**来简化我们对组件分配属性的方式。
- en: The project that we create in this chapter will be a Kanban board that uses
    the drag-and-drop API. Kanban boards visually depict work at various stages of
    a process. Our Kanban board will be comprised of three `Dropzone` components,
    with each one representing a different stage. Finally, we will use arbitrary parameters
    and attribute splatting to create a component to add new tasks to our Kanban board.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中创建的项目将是一个使用拖放API的看板。看板以视觉方式表示流程的各个阶段的工作。我们的看板将由三个`Dropzone`组件组成，每个组件代表不同的阶段。最后，我们将使用任意参数和属性展开来创建一个组件，用于向我们的看板添加新任务。
- en: Events need handling.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 需要处理事件。
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Built-in event arguments
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 内置事件参数
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: lambda expressions.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: lambda表达式。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Event handling
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理
- en: Attribute splatting
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性展开
- en: Arbitrary parameters
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意参数
- en: Creating the Kanban board project
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建看板项目
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的PC上安装Visual Studio 2022。有关如何安装Visual Studio 2022免费社区版的说明，请参阅*第1章*，*Blazor
    WebAssembly简介*。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下GitHub存储库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08)。
- en: 'The Code in Action video is available here: [https://packt.link/Ch8](https://packt.link/Ch8).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 《Code in Action》视频在此处可用：[https://packt.link/Ch8](https://packt.link/Ch8)。
- en: Event handling
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理
- en: Razor components handle events by using an HTML element attribute named `@on{EVENT}`,
    where `EVENT` is the name of the event.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Razor组件通过使用名为`@on{EVENT}`的HTML元素属性来处理事件，其中`EVENT`是事件名称。
- en: 'The following code calls the `OnClickHandler` method when the **Click Me**
    button is clicked:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在点击**点击我**按钮时调用`OnClickHandler`方法：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Event handlers automatically trigger a UI render. Therefore, we do not need
    to call `StateHasChanged` when processing them. Event handlers can reference any
    arguments that are associated with the event. Also, they can be used to call both
    synchronous and asynchronous methods.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理器会自动触发UI渲染。因此，在处理它们时，我们不需要调用`StateHasChanged`。事件处理器可以引用与事件相关联的任何参数。此外，它们可以用来调用同步和异步方法。
- en: 'The following code calls the asynchronous `OnChangeHandlerAsync` method when
    the checkbox is changed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在复选框更改时调用异步的`OnChangeHandlerAsync`方法：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, the `ChangeEventArgs` class is used to supply information
    about the change event. The `ChangeEventArgs` class only had one property. It
    is the `Value` property and for this object, it is either `true` or `false`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用`ChangeEventArgs`类提供有关更改事件的信息。`ChangeEventArgs`类只有一个属性。它是`Value`属性，对于此对象，它可以是`true`或`false`。
- en: '**TIP**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The event arguments are optional and should only be included if they are used
    by the method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 事件参数是可选的，并且只有在它们被方法使用时才应包含。
- en: 'The `ChangeEventArgs` class inherits from the `EventArgs` class. All of the
    `EventArgs` classes that are supported by the ASP.NET Core framework are also
    supported by the Blazor WebAssembly framework. This is a list of the supported
    `EventArgs`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChangeEventArgs` 类继承自 `EventArgs` 类。ASP.NET Core 框架支持的 `EventArgs` 类也由 Blazor
    WebAssembly 框架支持。以下是支持的 `EventArgs` 列表：'
- en: '`ClipboardEventArgs`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClipboardEventArgs`'
- en: '`DragEventArgs`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DragEventArgs`'
- en: '`ErrorEventArgs`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ErrorEventArgs`'
- en: '`EventArgs`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventArgs`'
- en: '`FocusEventArgs`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FocusEventArgs`'
- en: '`ChangeEventArgs`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChangeEventArgs`'
- en: '`KeyboardEventArgs`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyboardEventArgs`'
- en: '`MouseEventArgs`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MouseEventArgs`'
- en: '`PointerEventArgs`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PointerEventArgs`'
- en: '`WheelEventArgs`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WheelEventArgs`'
- en: '`ProgressEventArgs`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProgressEventArgs`'
- en: '`TouchEventArgs`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TouchEventArgs`'
- en: The `EventArgs` class is inherited by each of the preceding classes. We can
    create our own custom event data class by creating a class that derives from the
    `EventArgs` class.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventArgs` 类是前面每个类的基类。我们可以通过创建一个从 `EventArgs` 类派生的类来创建我们自己的自定义事件数据类。'
- en: So far, we have looked at ways to call a method without any arguments or with
    arguments that are automatically supplied by the event. However, sometimes we
    need to provide our own arguments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了调用不带参数或带有由事件自动提供的参数的方法的方法。然而，有时我们需要提供自己的参数。
- en: Lambda expressions
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lambda 表达式
- en: When we need to provide arguments to a method, we can use a lambda expression.
    Lambda expressions are used to create anonymous functions. They use the `=>` operator
    to separate the parameters from the body of the expression.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要向方法提供参数时，我们可以使用 lambda 表达式。Lambda 表达式用于创建匿名函数。它们使用 `=>` 操作符来分隔参数和表达式的主体。
- en: 'There are two forms that the body of a lambda expression can use. They can
    either use an expression or a statement block for their body. In the following
    example, the first button uses an expression and the second button uses a `statement`
    block:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 表达式的主体可以使用两种形式。它们可以使用表达式或语句块作为其主体。在以下示例中，第一个按钮使用表达式，第二个按钮使用 `statement`
    块：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, when the **Who Is Awesome?** button is clicked, the lambda
    expression calls the `SetMessage` method to update the value of the `message`
    field. When the **Who Rocks?** button is clicked, the statement lambda expression
    uses a statement to update the value of the `message` field.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，当点击 **Who Is Awesome?** 按钮时，lambda 表达式调用 `SetMessage` 方法来更新 `message`
    字段的值。当点击 **Who Rocks?** 按钮时，语句 lambda 表达式使用语句来更新 `message` 字段的值。
- en: '**TIP**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If the body of a statement lambda only includes one statement, the parentheses
    are optional. Also, although you can include any number of statements in the body
    of a statement lambda, we recommend limiting the number of statements to two or
    three at most.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语句 lambda 的主体只包含一个语句，则括号是可选的。此外，尽管您可以在语句 lambda 的主体中包含任意数量的语句，但我们建议最多限制为两到三个语句。
- en: Preventing default actions
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阻止默认操作
- en: Occasionally, we need to prevent the default action associated with an event.
    We can do that by using the `@on{EVENT}:preventDefault` directive attribute, where
    `EVENT` is the name of the event.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要阻止与事件相关联的默认操作。我们可以通过使用 `@on{EVENT}:preventDefault` 指令属性来实现，其中 `EVENT`
    是事件名称。
- en: For example, when dragging an element, the default behavior prevents it from
    being dropped into another element. However, for the Kanban board project in this
    chapter, we will need to drop items into various dropzones. Therefore, we will
    need to prevent that default behavior.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在拖动元素时，默认行为阻止它被拖放到另一个元素中。然而，对于本章中的看板项目，我们需要将项目拖放到各种拖放区。因此，我们需要阻止这种行为。
- en: 'The following code prevents the `ondragover` default behavior from occurring.
    By preventing the default behavior, we will be allowed to drop elements into the
    `div` element that is being used as the dropzone:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码阻止了 `ondragover` 默认行为的发生。通过阻止默认行为，我们将允许将元素拖放到用作拖放区的 `div` 元素中：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Focusing an element
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚焦元素
- en: There are times when we need to programmatically give focus to an HTML element.
    In those cases, we use the `FocusAsync` method of the `ElementReference` type.
    The `ElementReference` is identified by adding an `@ref` attribute to the HTML
    element that we want to give focus to. To assign focus to the HTML element a field
    of type `ElementReference` must be defined.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要以编程方式将焦点给予 HTML 元素。在这些情况下，我们使用 `ElementReference` 类型的 `FocusAsync` 方法。`ElementReference`
    通过向我们要给予焦点的 HTML 元素添加 `@ref` 属性来识别。要分配焦点到 HTML 元素，必须定义一个类型为 `ElementReference`
    的字段。
- en: 'The following code adds the value of the input element to the list of tasks
    and sets the focus back to the input element each time the button is clicked:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在每次点击按钮时将输入元素的值添加到任务列表中，并将焦点设置回输入元素：
- en: '**Focus.razor**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Focus.razor**'
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, `taskInput` is defined as an `ElementReference`. It is
    associated with the `input` element via the `@ref` attribute. In the `OnClickHandlerAsync`
    event, the `FocusAsync` method is called. The result is that each time the button
    is clicked, the focus is returned to the `input` element.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`taskInput` 被定义为 `ElementReference`。它通过 `@ref` 属性与 `input` 元素相关联。在 `OnClickHandlerAsync`
    事件中，调用了 `FocusAsync` 方法。结果是每次点击按钮时，焦点都会返回到 `input` 元素。
- en: '**IMPORTANT NOTE**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Since the `FocusAsync` method relies on the DOM, it only works on elements after
    they have been rendered.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `FocusAsync` 方法依赖于 DOM，它仅在元素渲染后才能工作。
- en: The Blazor WebAssembly framework makes it easy for us to access events by using
    the `@on{EVENT}` attribute. All the `EventArgs` that we are used to using in the
    ASP.NET framework are supported. We use lambda expressions to provide arguments
    for the methods that are called by the event. We use the `preventDefault` directive
    attribute to prevent default actions. Finally, the `FocusAsync` method of the
    `ElementReference` type is used to programmatically assign focus to an HTML element.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 框架使我们能够通过使用 `@on{EVENT}` 属性轻松访问事件。所有我们在 ASP.NET 框架中习惯使用的
    `EventArgs` 都受支持。我们使用 lambda 表达式为被事件调用的方法提供参数。我们使用 `preventDefault` 指令属性来防止默认操作。最后，使用
    `ElementReference` 类型的 `FocusAsync` 方法以编程方式将焦点分配给 HTML 元素。
- en: When working with components, we usually need to supply multiple attributes.
    Using attribute splatting, we can avoid assigning the attributes directly in the
    HTML markup.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理组件时，我们通常需要提供多个属性。使用属性展开，我们可以避免在 HTML 标记中直接分配属性。
- en: Attribute splatting
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性展开
- en: When a child component has many parameters, it can be tedious to assign each
    of the values in HTML. To avoid having to do that, we can use attribute splatting.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当子组件有许多参数时，在 HTML 中为每个值分配可能会很繁琐。为了避免这样做，我们可以使用属性展开。
- en: With attribute splatting, the attributes are captured in a dictionary and then
    passed to the component as a unit. One attribute is added per dictionary entry.
    The dictionary must implement `IEnumerable<KeyValuePair<string,object>>` or `IReadOnlyDictionary<string``,
    object>` with string keys. We reference the dictionary using the `@attributes`
    directive.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性展开，属性被捕获在一个字典中，然后作为一个单元传递给组件。每个字典条目添加一个属性。该字典必须实现 `IEnumerable<KeyValuePair<string,object>>`
    或 `IReadOnlyDictionary<string, object>` 并具有字符串键。我们使用 `@attributes` 指令引用字典。
- en: 'This is the code for a component called `BweButton` that has a bunch of different
    parameters:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是名为 `BweButton` 的组件的代码，它包含许多不同的参数：
- en: '**BweButton.razor**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**BweButton.razor**'
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is sample markup to render a `BweButton` component without using attribute
    splatting:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于渲染 `BweButton` 组件而不使用属性展开的示例标记：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the button that is rendered by the preceding markup:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面标记渲染的按钮：
- en: '![A picture containing graphical user interface  Description automatically
    generated](img/B18471_08_01.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![包含图形用户界面的图片  自动生成的描述](img/B18471_08_01.png)'
- en: 'Figure 8.1: Rendered BweButton'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：渲染的 BweButton
- en: 'This is the CSS that we are using to style the buttons in this section:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在本节中用于样式化按钮的 CSS：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding CSS, all the elements in the `button` class will have white
    text and 2em of padding. The elements in the `button-red` class will have a background
    color of red, and the elements in the `button-black` class will have a background
    color of black.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 CSS 中，`button` 类中的所有元素都将具有白色文本和 2em 的填充。`button-red` 类中的元素将具有红色背景色，而 `button-black`
    类中的元素将具有黑色背景色。
- en: 'By using attribute splatting, we can simplify the preceding markup to the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用属性展开，我们可以将前面的标记简化为以下内容：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is the definition of `InputAttributes` used by the preceding markup:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面标记中使用的 `InputAttributes` 的定义：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code defines the `InputAttributes` that are passed to `BweButton`.
    The resulting button is identical to the previous one where we set the attributes
    directly without using `InputAttributes`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码定义了传递给 `BweButton` 的 `InputAttributes`。生成的按钮与之前直接设置属性而不使用 `InputAttributes`
    的按钮相同。
- en: The real power of attribute splatting is realized when it is combined with arbitrary
    parameters.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 属性展开的真正威力在于它与任意参数结合时。
- en: Arbitrary parameters
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随意参数
- en: In the preceding example, we used explicitly defined parameters to assign the
    button’s attributes. A much more efficient way of assigning values to attributes
    is to use arbitrary parameters. An arbitrary parameter is a parameter that is
    not explicitly defined by the component. The `Parameter` attribute has a `CaptureUnmatchedValues`
    property that is used to allow the parameter to capture values that don’t match
    any of the other parameters.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用了明确定义的参数来分配按钮的属性。一种更高效的方法是使用随意参数。随意参数是一个没有由组件明确定义的参数。`Parameter`
    属性有一个 `CaptureUnmatchedValues` 属性，用于允许参数捕获不匹配其他任何参数的值。
- en: 'This is a new version of our button called `BweButton2`. It uses arbitrary
    parameters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的按钮的新版本，称为 `BweButton2`。它使用随意参数：
- en: '**BweButton2.razor**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**BweButton2.razor**'
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code includes a parameter named `InputAttributes` that has its
    `CaptureUnmatchedValues` property set to `true`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码包括一个名为 `InputAttributes` 的参数，其 `CaptureUnmatchedValues` 属性设置为 `true`。
- en: '**IMPORTANT NOTE**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: A component can only have one parameter with its `CaptureUnmatchedValues` property
    set to `true`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组件只能有一个参数，其 `CaptureUnmatchedValues` 属性设置为 `true`。
- en: 'This is the updated markup used to render the new version of our button:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于渲染我们按钮新版本的更新后的标记：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is the definition of `InputAttributes2` used by the preceding markup:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面标记中使用的 `InputAttributes2` 的定义：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Although none of the attributes in the dictionary have been explicitly defined
    in the new version of our button, `BweButton2` is still rendered. In the preceding
    example, the class attribute is set twice.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在按钮的新版本中，字典中的所有属性都没有被明确定义，`BweButton2` 仍然被渲染。在前面的例子中，类属性被设置了两次。
- en: 'This is the button that is rendered by the preceding code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面代码渲染的按钮：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_08_02.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，自动生成的描述](img/B18471_08_02.png)'
- en: 'Figure 8.2: Rendered BweButton2 using arbitrary parameters'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：使用随意参数渲染的 BweButton2
- en: The reason the button is now black is due to the position of the `@attributes`
    directive in the button’s markup. When attributes are splatted onto an element,
    they are processed from left to right. Therefore, if there are duplicate attributes
    assigned, the one that appears later in the order will be the one that is used.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮现在是黑色的原因是因为按钮标记中的 `@attributes` 指令的位置。当属性被撒到元素上时，它们是从左到右处理的。因此，如果有重复的属性被分配，那么在顺序中出现的较晚的那个将被使用。
- en: Arbitrary parameters are used to allow previously undefined attributes to be
    rendered by the component. This is useful with components that support a large
    variety of customizations, such as a component that includes an `input` element.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 随意参数用于允许组件渲染之前未定义的属性。这对于支持大量自定义的组件非常有用，例如包含 `input` 元素的组件。
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速了解一下本章将要构建的项目。
- en: Creating the Kanban board project
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建看板板项目
- en: 'The Blazor WebAssembly application that we are going to build in this chapter
    is a Kanban board. The Kanban board will have three dropzones: `High Priority`,
    `Mid` `Priority`, and `Low Priority`. We will be able to drag and drop tasks between
    the dropzones and add additional tasks. As each task is dragged to a different
    dropzone, the badge indicator on the task will be updated to match the dropzone’s
    priority.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建的 Blazor WebAssembly 应用程序是一个看板（Kanban）板。这个看板将包含三个拖放区域：`高优先级`、`中优先级`和`低优先级`。我们可以在这些拖放区域之间拖放任务，并添加额外的任务。每当任务被拖放到不同的拖放区域时，任务上的徽章指示器将更新以匹配拖放区域的优先级。
- en: 'The following is a screenshot of the completed application:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成的应用程序的截图：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_08_03.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成的描述](img/B18471_08_03.png)'
- en: 'Figure 8.3: Kanban board app'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：看板应用
- en: The build time for this project is approximately 45 minutes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的构建时间大约为 45 分钟。
- en: Project overview
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: The `KanbanBoard` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will add `Bootstrap` to the project. Then, we will create both the `TaskItem`
    class and a `Dropzone` component. We will add three of the `Dropzone` components
    to the `Home` page to create the Kanban board. Finally, we will add the `NewTask`
    component so that we are able to add new tasks to the Kanban board.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用 Microsoft 的**Blazor WebAssembly App Empty**项目模板创建一个空的 Blazor WebAssembly
    项目来创建`KanbanBoard`项目。首先，我们将向项目中添加`Bootstrap`。然后，我们将创建`TaskItem`类和一个`Dropzone`组件。我们将向`Home`页面添加三个`Dropzone`组件以创建看板。最后，我们将添加`NewTask`组件，以便我们能够向看板添加新任务。
- en: Create the Kanban board project
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建看板项目
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的 Blazor WebAssembly 应用程序。我们按照以下步骤进行：
- en: Open Visual Studio 2022.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2022。
- en: Click the **Create a new project** button.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新项目**按钮。
- en: Press *Alt*+*S* to enter the search for templates textbox.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Alt*+*S*键进入搜索模板文本框。
- en: Enter `Blazor` and press the *Enter* key.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Blazor`并按*Enter*键。
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的截图显示了**Blazor WebAssembly App Empty**项目模板。
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_08_04.png)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或短信  自动生成的描述](img/B18471_08_04.png)'
- en: 'Figure 8.4: Blazor WebAssembly App Empty project template'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.4：Blazor WebAssembly App Empty项目模板
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Blazor WebAssembly App Empty**项目模板并点击**下一步**按钮。
- en: Enter `KanbanBoard` in the **Project name** textbox and click the **Next** button.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目名称**文本框中输入`KanbanBoard`并点击**下一步**按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于配置我们新项目的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_08_05.png)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_08_05.png)'
- en: 'Figure 8.5: Configure your new project dialog'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.5：配置新项目对话框
- en: '**TIP**'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `KanbanBoard` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将`KanbanBoard`项目放置在`E:/Blazor`文件夹中。然而，此项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**.NET 7.0**作为要使用的**框架**版本。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**配置为HTTPS**复选框。
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**ASP.NET Core 承载**复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**渐进式Web应用程序**复选框。
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于收集有关我们新项目额外信息的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_07_04.png)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_07_04.png)'
- en: 'Figure 8.6: Additional information dialog'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.6：附加信息对话框
- en: Click the **Create** button.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: We have created an empty `KanbanBoard` Blazor WebAssembly project. We will use
    Bootstrap’s grid system to lay out our board.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建了一个空的`KanbanBoard` Blazor WebAssembly 项目。我们将使用 Bootstrap 的网格系统来布局我们的看板。
- en: Install Bootstrap
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Bootstrap
- en: 'We need to install `Bootstrap` into our web app. We do this as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的 web 应用程序中安装`Bootstrap`。我们按照以下步骤进行：
- en: Right-click the `wwwroot/css` folder and select the **Add**, **Client-Side Library**
    option from the menu.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`wwwroot/css`文件夹，从菜单中选择**添加**，**客户端库**选项。
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**库**搜索文本框中输入`bootstrap`并按*Enter*键。
- en: Select **Choose specific files**.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**选择特定文件**。
- en: Select only the **css** files as shown in the following screenshot.![Graphical
    user interface, text, application, email  Description automatically generated](img/B18471_08_07.png)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅选择以下截图所示的**css**文件。![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_08_07.png)
- en: 'Figure 8.7: Add Client-Side Library dialog'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.7：添加客户端库对话框
- en: '**TIP**'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Although the preceding screenshot has version 5.2.2 of `Bootstrap` selected,
    you can use any version of `Bootstrap` to complete this project.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然前面的截图选择了`Bootstrap`的5.2.2版本，但你可以使用任何版本的`Bootstrap`来完成此项目。
- en: Click the **Install** button.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮。
- en: '**IMPORTANT NOTE**'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装`Bootstrap`后，`wwwroot/css`文件夹中会新增一个文件夹。这个新文件夹包含了`Bootstrap`所需的所有CSS文件。在本项目中，我们只会使用`bootstrap.min.css`文件。
- en: Open the `wwwroot/index.html` file.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`wwwroot/index.html`文件。
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`css/app.css`样式表的链接之前添加以下标记：
- en: '[PRE13]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Open the `MainLayout.razor` file.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainLayout.razor`文件。
- en: 'Update the `main` element to the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`main`元素为以下内容：
- en: '[PRE14]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code adds a `container` around the body of the page. In this project,
    we will be using Bootstrap’s grid system to lay out our content. It relies on
    a series of containers, rows, and columns. We will add the rows and columns later.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在页面主体周围添加了一个`container`。在本项目中，我们将使用Bootstrap的网格系统来布局我们的内容。它依赖于一系列容器、行和列。我们将在稍后添加行和列。
- en: We will use the Kanban board to prioritize our tasks. But first, we need a way
    to define our tasks.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用看板板来优先处理任务。但首先，我们需要一种定义任务的方法。
- en: Add the classes
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加以下类
- en: 'We need to add a `TaskPriority` enum and a `TaskItem` class. We do this as
    follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个`TaskPriority`枚举和一个`TaskItem`类。我们这样做如下：
- en: Right-click the `KanbanBoard` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`KanbanBoard`项目，从菜单中选择**添加**，**新建文件夹**选项。
- en: Name the new folder `Models`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Models`。
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Models`文件夹，从菜单中选择**添加**，**类**选项。
- en: Name the new class `TaskPriority`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为`TaskPriority`。
- en: Click the **Add** button.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Replace the class with the following `TaskPriority` enum:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类替换为以下`TaskPriority`枚举：
- en: '[PRE15]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Models`文件夹，从菜单中选择**添加**，**类**选项。
- en: Name the new class `TaskItem`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为`TaskItem`。
- en: Click the **Add** button.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Add the following properties to the `TaskItem` class:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下属性添加到`TaskItem`类中：
- en: '[PRE16]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We have added the `TaskPriority` enum and the `TaskItem` class to represent
    the tasks on the Kanban board. Next, we need to create the dropzones.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加`TaskPriority`枚举和`TaskItem`类来表示看板板上的任务。接下来，我们需要创建拖放区域。
- en: Create the Dropzone component
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建拖放组件
- en: 'We need to add a `Dropzone` component. We do this as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个`Dropzone`组件。我们这样做如下：
- en: Right-click the `KanbanBoard` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`KanbanBoard`项目，从菜单中选择**添加**，**新建文件夹**选项。
- en: Name the new folder `Shared`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Shared`。
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Shared`文件夹，从菜单中选择**添加**，**Razor组件**选项。
- en: Name the new component `Dropzone`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为`Dropzone`。
- en: Click the **Add** button.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: Remove the `h3` element.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`h3`元素。
- en: 'Add the following `@using` directive:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`@using`指令：
- en: '[PRE17]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following parameters to the code block:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下参数添加到代码块中：
- en: '[PRE18]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code, the `TaskItems` parameter is used to keep track of the
    tasks that have been dropped into the `Dropzone`. The `Priority` parameter is
    used to indicate the priority of the tasks that are in the `Dropzone`.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，`TaskItems`参数用于跟踪已拖放到`Dropzone`中的任务。`Priority`参数用于指示`Dropzone`中任务的优先级。
- en: The `OnDrop` event indicates the event that is invoked when a task is dropped
    into the `Dropzone`, and the `OnStartDrag` event indicates the event that is invoked
    when a task is dragged from the `Dropzone`.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`OnDrop`事件表示当任务被拖放到`Dropzone`时触发的事件，而`OnStartDrag`事件表示当任务从`Dropzone`拖动时触发的事件。'
- en: 'Add the following markup:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下标记：
- en: '[PRE19]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding markup labels the `Dropzone` by its priority and allows elements
    to be dropped into it by preventing the default value of the `ondragover` event.
    The `OnDropHandler` method is called when an element is dropped into the `Dropzone`.
    Finally, it loops through all the items in the `TaskItems` class with the matching
    `Priority`.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的标记通过优先级标记了`Dropzone`，并通过防止`ondragover`事件的默认值，允许元素被拖放到其中。当元素被拖放到`Dropzone`时，会调用`OnDropHandler`方法。最后，它遍历`TaskItems`类中所有匹配`Priority`的项。
- en: 'Add the following markup within the `@foreach` loop:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@foreach`循环内添加以下标记：
- en: '[PRE20]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding markup makes the `div` element draggable by setting the `draggable`
    attribute to `true`. The `OnDragStartHandler` method is called when the element
    is dragged.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述标记通过将 `draggable` 属性设置为 `true` 使 `div` 元素可拖动。当元素被拖动时，将调用 `OnDragStartHandler`
    方法。
- en: 'Add the following `OnDropHandler` method to the code block:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `OnDropHandler` 方法添加到代码块中：
- en: '[PRE21]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code invokes the `OnDrop` method.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码调用了 `OnDrop` 方法。
- en: 'Add the following `OnDragStartHandler` method to the code block:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `OnDragStartHandler` 方法添加到代码块中：
- en: '[PRE22]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code invokes the `OnStartDrag` method.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码调用了 `OnStartDrag` 方法。
- en: We have added a `Dropzone` component. Now we need to add some styling to the
    component.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了一个 `Dropzone` 组件。现在我们需要给组件添加一些样式。
- en: Add a stylesheet
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加样式表
- en: 'We will add a stylesheet to the `Dropzone` component using CSS isolation. We
    do this as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过 CSS 隔离向 `Dropzone` 组件添加样式表。我们这样做：
- en: Right-click the `Shared` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Shared` 文件夹，从菜单中选择 **添加**，**新项目** 选项。
- en: Enter `css` in the **Search** box.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索** 框中输入 `css`。
- en: Select **Style Sheet**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **样式表**。
- en: Name the style sheet `Dropzone.razor.css`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将样式表命名为 `Dropzone.razor.css`。
- en: Click the **Add** button.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Enter the following styles:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下样式：
- en: '[PRE23]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**TIP**'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can copy the `Dropzone.razor.css` file from the GitHub repository.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从 GitHub 仓库复制 `Dropzone.razor.css` 文件。
- en: Open the `wwwroot/index.html` file.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `wwwroot/index.html` 文件。
- en: 'Uncomment the following `link` element at the bottom of the `head` element:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `head` 元素的底部取消注释以下 `link` 元素：
- en: '[PRE24]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have finished styling the `Dropzone` component. Now we can put the Kanban
    board together.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了 `Dropzone` 组件的样式设置。现在我们可以组合看板了。
- en: Create the Kanban board
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建看板
- en: 'We need to add three `Dropzone` components to create our Kanban board, one
    for each of the three types of tasks. We do this as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加三个 `Dropzone` 组件来创建我们的看板，每个类型一个。我们这样做：
- en: Open the `_Imports.razor` file.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `_Imports.razor` 文件。
- en: 'Add the following `using` statements:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `using` 语句：
- en: '[PRE25]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open the `Pages\Index.razor` file.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages\Index.razor` 文件。
- en: Remove the `h1` element.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `h1` 元素。
- en: 'Add the following markup:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下标记：
- en: '[PRE26]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding code adds three `Dropzone` components, one for each priority.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码为每个优先级添加了三个 `Dropzone` 组件。
- en: 'Add the following code block:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块：
- en: '[PRE27]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code initializes the `TaskItems` object with three tasks.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用三个任务初始化了 `TaskItems` 对象。
- en: 'Add the `OnStartDrag` method to the code block:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `OnStartDrag` 方法添加到代码块中：
- en: '[PRE28]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The preceding code sets the value of `CurrentItem` to the item that is currently
    being dragged. We will use this value when the item is subsequently dropped. The
    `Dropzone` component invokes this method when the `@ondragstart` event is triggered.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将 `CurrentItem` 的值设置为当前正在拖动的项目。当项目随后被放下时，我们将使用此值。当 `Dropzone` 组件触发 `@ondragstart`
    事件时，它将调用此方法。
- en: 'Add the `OnDrop` method to the code block:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `OnDrop` 方法添加到代码块中：
- en: '[PRE29]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The preceding code sets the `Priority` property of the `CurrentItem` to the
    priority associated with the `Dropzone` that `CurrentItem` is dropped into. The
    `Dropzone` component invokes this method when the `@ondrop` event is triggered.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将 `CurrentItem` 的 `Priority` 属性设置为与 `CurrentItem` 放入的 `Dropzone` 相关的优先级。当
    `Dropzone` 组件触发 `@ondrop` 事件时，它将调用此方法。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 启动应用程序，不进行调试。
- en: Drag all the tasks to the **High Priority** dropzone.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有任务拖到 **高优先级** 拖放区域。
- en: After you drop each task into the **High Priority** dropzone, verify that the
    badge on the task is updated to **High**.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在将每个任务拖入 **高优先级** 拖放区域后，请确认任务的徽章已更新为 **高**。
- en: We have created a very simple Kanban board with three items. Let’s add the ability
    to add more items through the UI.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个非常简单的包含三个项目的看板。让我们添加通过 UI 添加更多项目的功能。
- en: Create the NewTask component
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 NewTask 组件
- en: 'We need to add a `NewTask` component. We do this as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个 `NewTask` 组件。我们这样做：
- en: Return to Visual Studio.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Shared` 文件夹，从菜单中选择 **添加**，**Razor 组件** 选项。
- en: Name the new component `NewTask`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为 `NewTask`。
- en: Click the **Add** button.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: Remove the `h3` element.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `h3` 元素。
- en: 'Add the following markup:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下标记：
- en: '[PRE30]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding markup includes a label, a textbox, and a button. The textbox
    includes an `@ref` attribute that we will use later to set focus to the textbox.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述标记包括一个标签、一个文本框和一个按钮。文本框包含一个`@ref`属性，我们将在稍后使用它来设置文本框的焦点。
- en: 'This is a screenshot of the `NewTask` component that we are working on:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们在工作的`NewTask`组件的截图：
- en: '![](img/B18471_08_08.png)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18471_08_08.png)'
- en: 'Figure 8.8: NewTask component'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.8：NewTask组件
- en: 'Add the following code to the code block:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块中：
- en: '[PRE31]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding code defines a parameter, `InputParameters`, that will be used
    for attribute splatting.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码定义了一个参数，`InputParameters`，它将被用于属性展开。
- en: 'Add the `OnClickHandlerAsync` method to the code block:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`OnClickHandlerAsync`方法添加到代码块中：
- en: '[PRE32]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding code invokes the `OnSubmit` method, sets the `taskName` field
    to `null`, and sets the focus to the `taskInput` object.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码调用`OnSubmit`方法，将`taskName`字段设置为`null`，并将焦点设置到`taskInput`对象。
- en: We have now created the `NewTask` component. Next, we need to start using it.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了`NewTask`组件。接下来，我们需要开始使用它。
- en: Use the NewTask component
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用NewTask组件
- en: 'We need to add the `NewTask` component to the `Home` page. We do this as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`NewTask`组件添加到`Home`页面。我们这样做如下：
- en: Open the `Pages\Index.razor` file.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages\Index.razor`文件。
- en: 'Add the following markup below the `PageTitle` component:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PageTitle`组件下方添加以下标记：
- en: '[PRE33]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following code to the code block:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块中：
- en: '[PRE34]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding code, properties are being set without being explicitly defined.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述代码中，属性正在被设置，而没有被显式定义。
- en: 'Add the `AddTask` method to the code block:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AddTask`方法添加到代码块中：
- en: '[PRE35]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The preceding code sets the priority of the new item to `High` and adds it to
    the `TaskItems` object.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将新项的优先级设置为`高`，并将其添加到`TaskItems`对象中。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*以无调试模式启动应用程序。
- en: Enter a new task and click the **Add Task** button.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个新任务并点击**添加任务**按钮。
- en: When the **Add Task** button of the `NewTask` component is clicked, the `AddTask`
    method is invoked. The textbox is cleared, and the focus is returned to the textbox.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当点击`NewTask`组件的**添加任务**按钮时，会调用`AddTask`方法。文本框会被清空，并且焦点会回到文本框。
- en: Enter another new task and click the **Add Task** button.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入另一个新任务并点击**添加任务**按钮。
- en: Drag and drop the tasks to change their priorities.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拖放任务以更改它们的优先级。
- en: We have added the ability to add new tasks to the Kanban board.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经增加了向看板添加新任务的功能。
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to handle events in your Blazor WebAssembly app. Also,
    you should be comfortable with using attribute splatting and arbitrary parameters.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够处理你的Blazor WebAssembly应用中的事件。你也应该对使用属性展开和任意参数感到舒适。
- en: In this chapter, we introduced event handling. We explained how to use `EventArgs`
    and how to use lambda expressions to provide arguments to a method. We also explained
    how to prevent default actions and how to use the `@ref` attribute to programmatically
    set the focus to a particular element. Finally, we introduced both attribute splatting
    and arbitrary parameters.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了事件处理。我们解释了如何使用`EventArgs`以及如何使用lambda表达式向方法提供参数。我们还解释了如何防止默认操作以及如何使用`@ref`属性以编程方式将焦点设置到特定元素。最后，我们介绍了属性展开和任意参数。
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project and added `Bootstrap` to the project. Next, we added a `Dropzone`
    component to the project and used it to create a Kanban board. Finally, we added
    the ability to add tasks to the Kanban board while demonstrating both attribute
    splatting and arbitrary parameters.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用了**Blazor WebAssembly App Empty**项目模板来创建一个新的项目，并将`Bootstrap`添加到项目中。接下来，我们向项目中添加了一个`Dropzone`组件，并使用它来创建看板。最后，我们在演示属性展开和任意参数的同时，增加了向看板添加任务的功能。
- en: Now that you know how to handle different types of events in your Blazor WebAssembly
    app, you can create more responsive applications. And, since you can use a dictionary
    to pass both explicitly declared attributes and implicit attributes to a component,
    you can create components faster since you do not need to explicitly define each
    parameter.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何在你的 Blazor WebAssembly 应用中处理不同类型的事件，你可以创建更响应式的应用程序。而且，由于你可以使用字典来传递显式声明的属性和隐式属性到组件中，你可以更快地创建组件，因为你不需要显式地定义每个参数。
- en: In the next chapter, we will create an application that can upload and read
    an Excel file.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个可以上传和读取Excel文件的应用程序。
- en: Questions
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您思考：
- en: How can you update the Kanban board to allow the user to delete a task?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何更新看板，以便用户可以删除任务？
- en: Why would you want to include an attribute in the dictionary used for attribute
    splatting that is not defined on the component, either explicitly or implicitly?
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你为什么想在用于属性展开的字典中包含一个在组件上未定义的属性，无论是显式还是隐式？
- en: What is the base class of the `DragEventArgs` class?
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DragEventArgs`类的基类是什么？'
- en: Further reading
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了关于本章涵盖主题的更多信息：
- en: For more information on **Document Object Model** (**DOM**) events, refer to
    [https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events).
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于**文档对象模型**（**DOM**）事件的信息，请参阅[https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events)。
- en: For more information on the `EventArgs` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.eventargs](https://learn.microsoft.com/en-us/dotnet/api/system.eventargs).
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于`EventArgs`类的信息，请参阅[https://learn.microsoft.com/en-us/dotnet/api/system.eventargs](https://learn.microsoft.com/en-us/dotnet/api/system.eventargs)。
- en: For more information on the `DragEventArgs` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs).
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于`DragEventArgs`类的信息，请参阅[https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs)。
