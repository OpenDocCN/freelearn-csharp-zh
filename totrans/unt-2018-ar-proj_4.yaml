- en: The Sound of Flowery Prose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will design and create our first AR application with macOS
    and utilize ARKit. This will be an application that utilizes a touch sensor and
    camera sensors in tandem to initiate sound clips from various literary sources.
    This will serve as a fantastic introduction to programming and setting up Unity
    to work with the AR tools available to us. This will also allow us to utilize
    the built-in functions provided for using the camera sensor and the touch sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Conceptualizing the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Unity project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code implementation details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with XCode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of this application is to be able to select anywhere in the video
    feed of the camera, and it will read a random passage from a poem or book based
    on the lighting of the area. The build time is approximately 30 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the software prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: XCode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity 2018 for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MonoFramework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The software can be downloaded from the following websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://store.unity.com/](https://store.unity.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/arkit/](https://developer.apple.com/arkit/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.visualstudio.com/](https://www.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.mono-project.com/download/stable/](http://www.mono-project.com/download/stable/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the minimum hardware requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 2011 or newer Mac computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conceptualizing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before building any game or application, it should always be a first step to
    know exactly what you want to build. You don’t have to know the exact implementation
    details, just what you want to build and how you want to go about building it.
    This should include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic idea/concept
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming language to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform to release on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game engine or libraries/frameworks to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design document/design outline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Written or code implementation prototype for proof of concept
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, why are these points so important? They are important because it helps
    solidify the idea, gives a clear path for what you want to accomplish, and most
    importantly, proves that the project is possible to build. Let’s dive into each
    point and use them to build our first AR application.
  prefs: []
  type: TYPE_NORMAL
- en: Basic idea/concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic idea or concept of an application or game should not be any more than
    a paragraph explaining what you want to create. It isn’t meant to explain the
    full features or everything you want that to be in the application or game. Rather,
    it is only meant as a basic starting point that says that this is the overall
    idea that you want to work on.
  prefs: []
  type: TYPE_NORMAL
- en: This is important because it is the core of the application or game idea, and
    you can define what the main features of the app or game are and give a clear
    point of reference for researching.
  prefs: []
  type: TYPE_NORMAL
- en: Our basic concept is to be able to select anywhere in the video feed of the
    camera and it will read a random passage from a poem or book based on the lighting
    of the area. Now, this doesn’t go too much into depth on what the application
    will do, but we can use this as the basis for the fourth step to expand upon the
    basic idea to create a fully functional and detailed explanation of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right programming language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This choice is not always obvious when developing an application or a game.
    While your own knowledge does play a major role in choosing the language to use,
    so do the requirements of the application or game and your team’s knowledge. This
    step should be done in tandem with the next step before finalizing the decision,
    as your research may determine that the language that you prefer doesn’t have
    the proper libraries or capabilities for developing the particular game or application
    you want.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily for us, our example will be using C#.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your release platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This one is rather straightforward. Do you want to release on Android, iOS,
    Windows, or some other platform?  This will determine which language to select
    to use as well as which game engine or libraries/frameworks we need – which leads
    us to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your game engine, libraries, and frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated previously, this step should be done in tandem with the previous steps
    as they are intrinsically tied together. This step requires you to do in-depth
    and highly detailed research into what you wrote for the basic idea/concept. Not
    only are you looking to see if what you want to do is possible, but also whether
    or not the language, game engine, or library/ framework you want to use supports
    it. This also requires you to know which platform you want to release on.
  prefs: []
  type: TYPE_NORMAL
- en: With the basic idea of this application, we know that it would require utilizing
    the camera and having touch events to detect whether something is lit well enough
    or not to determine whether or not it should play the audio file.
  prefs: []
  type: TYPE_NORMAL
- en: Developing the game design and application design document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The design document is more of a design specification document that describes
    the application in its entirety. That means that all of the data-, architectural-,
    interface-, and component-level design is described for it. The following example
    showcases how the documentation would look. You can download a copy of the template
    from [http://ec.europa.eu/idabc/servlets/Doc7e17.doc?id=18632](http://ec.europa.eu/idabc/servlets/Doc7e17.doc?id=18632):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dfccba7-eb64-4f7f-99fb-832e5792dd2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Technical design template
  prefs: []
  type: TYPE_NORMAL
- en: 'For game design, the design document can be a bit more involved than it is
    for applications. A typical game design document will require the sections described
    to be filled out in as much detail as possible. You can download a copy of the
    template from [https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit](https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7dcc1ed-2bd3-4a19-9e16-52d59143dd5e.png)'
  prefs: []
  type: TYPE_IMG
- en: Game design template
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might be thinking that this is a lot of work for applications or games.
    The key to success is never wrought from laziness or pure luck. In creating documentation
    that has as much depth as this, you are ensuring that you know exactly what you
    need to do and why you need to do it, and if you bring on team members, they will
    be able to read the document and fully understand your goals and intentions with
    little input from you.
  prefs: []
  type: TYPE_NORMAL
- en: This also means that you can keep yourself firmly in line with the project,
    forcing you not to add little pet features except as extra milestones after the
    project has reached the completion mark.
  prefs: []
  type: TYPE_NORMAL
- en: Bonus – UML design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Unified Modeling Language** (**UML**) is a great way for visualizing the
    design of your application or game. NClass is a free UML editor that you can download
    and use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can preplan all of your methods, attributes, properties, classes, and enums
    – pretty much everything related to programming – with UML. UML really helps for
    the next phase, which is actually to implement the prototype:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3ec8f00-dc55-45c4-aac0-e11468358eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Further planning of implementations can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/deb58ef5-d4db-4609-8cad-6ae320d995e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Prototyping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, our proof of concept will actually be the full project, although for your
    own projects in the future, run a small-scale implementation to make sure the
    features that are 100% necessary are able to be implemented and work appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is that, if for any reason you are unable to implement the
    main feature of the app or game, you haven’t wasted as much time or money on the
    project as you would have done by implementing on a larger scale.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Unity project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The very first thing we are going to do is set Unity up on our Mac computer
    to be able to create our project. Since we know we will need ARKit, which only
    works on macOS, we will have different projects for the different chapters, as
    we don’t want any compilation issues:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a new project, and we will call it `Chapter4` or `Sound of Flowery
    Prose`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2895fa74-0261-4334-b594-178fb6f9e9a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next up, we need to click on the store and search for ARKit to download and
    add it to our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be5d09b1-cff2-4e0c-8a8a-be69c847a492.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I am a bit of a stickler for organization, so we have to make sure to set up
    all the empty game objects we need to keep things organized. So, we will have
    four empty game objects called `CameraParent`, `ARKitControl`, `ARCameraManager`,
    and `HitCubeParent`. Your project should look like the one in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7770fba0-9342-4566-8dbd-83b723056d6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Drag the camera into the `CameraParent` empty game object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54949066-801d-4c77-816a-24ed79ea76e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a `Cube` and drag the `Cube` into the `HitCubeParent` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06a111dd-30b1-4af7-8005-fba19ff87c25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have Unity basically set up as required, we can move on to creating
    and attaching the scripts we need for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Camera component – we have two scripts we need to add to it. The
    first script is Unity AR Camera Near-Far, and the second is Unity AR Video.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Unity AR Video also needs a clear material, so let’s set that to be `YUVMaterial`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f596d7e-5dac-4788-8994-5d1ce920f470.png)'
  prefs: []
  type: TYPE_IMG
- en: '`ARCameraManager` needs the appropriate script attached to it – in this case,
    it is called the Unity AR Camera Manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9aa20bbb-8710-46e0-bdb4-7dfc25a72516.png)'
  prefs: []
  type: TYPE_IMG
- en: '`ARKitControl` also needs a script attached to it, and it is called Unity AR
    Kit Control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f98587a-bb2c-4d96-9902-64877d31ff92.png)'
  prefs: []
  type: TYPE_IMG
- en: The final thing we need to do is set up our `Cube` from inside the `HitCubeParent`
    object to have a brand new script created for it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `Cube` object and select Add Component | Script | New Script.
    The name should be `ARHitCube`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2ad46cfa-c76c-4bde-bc16-2846b1ba37db.png)'
  prefs: []
  type: TYPE_IMG
- en: Code implementation details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, the most important part of any project is actually to implement what
    we want to accomplish. We want this project to play a literary quote from a list
    of audio samples automatically. To do this, we need an audio source and audio
    clips. We also want this project to take advantage of ARKit to run, so we need
    to write a C# class that utilizes features from the ARKit plugin that is exposed
    from the Objective-C and C++ libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open up the `ARHitCube` class, fill in the details, and explain what
    is happening at the same time. I should note that very similar code is already
    provided in the script file called `UnityARHitTestExample`; I created this script
    to be able to show only what is needed and to be able to explain the workflow/thoughts
    necessary for creating the functionality we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As per usual, we will only call the specific namespaces we need for our project.
    In this case, it is `System` and `System.Collections.Generic`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Our namespace will be used to organize our code to make sure it stays separate
    from ARKit and Unity’s API, which will avoid naming collisions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Our class will inherit from `MonoBehavior`, as we want to be able to use it
    directly from the object (as well as make sure it can be attached to the game
    object).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We create a public transform to allow us to track locations and a public array
    of audio clips more easily:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We create a `Boolean` method type that has the parameters of `ARPoint` and `ARHitTestResultType`.
    Both of these are exposed by ARKit, and you can read the documentation for them
    or look at the source in Unity to gain a better understanding of it. The simplified
    explanation is that `ARPoint` is a point coordinate derived from a Vector 3 value,
    and `ARHitTestResultType` is an enum with the possible results being `ARHitTestResultTypeFeaturePoint`,
    `ARHitTestResultTypeEstimatedHorizontalPlane`, `ARHitTestResultTypeEstimatedVerticalPlane`, `ARHitTestResultTypeExistingPlane`, `ARHitTestResultTypeExistingPlaneUsingExtent`,
    and `ARHitTestResultTypeExistingPlaneUsingGeometry`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We create a list called `hitResults` which is going to be set to be `UnityARSessionNativeInterface`.
    `GetARSessionNativeInterface().HitTest` with the parameters being point and result
    types filled in. What this does is create a list every time a native interface
    hit test is registered and stores the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next up, we do an `if` check to verify that the count is greater than `0`. If
    it isn’t greater than `0`, return as false, otherwise proceed to the `foreach`
    loop. Inside of the `foreach` loop, we check all of the hit results and log the
    results. The `HitTransform` position will always be set to be `UnityARMatrixOps.GetPosition`
    with the parameter being the `hitresult.worldTransform`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `HitTransform` rotation will also always be set to be `UnityARMatrixOps.GetRotation`
    with the parameter being the `hitresult.worldtransform`. We end by returning true.
    Essentially, all this function does is detect whether a hit is registered or not
    and passes information to the correct areas that need the information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we want to do is check whether or not the `input.touchcount`
    is `0` and the `HitTransform` is not equal to null. If either of these checks
    fails, then we aren’t going to be able to retrieve the information we need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We set a touch variable to be `input.gettouch` with the parameter being `0`.
    `0` is the basic tap gesture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `if` touch phase statement here is a check to see which touch phase is being
    initialized. The began touch phase is what we want, as it is the starting location
    of touch events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We created a screen position variable and set it to be the camera screen to
    viewport point, with the parameter filled out being the touch position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'ARPoint point is set to be a new ARPoint, and we want the *x* value to be the
    screen position’s `x` value and the `y` value to be the screen position’s *y*
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`ARHitTestResultType` is an array called result types. We want to make sure
    that the hit test result types are understood, and in this case, we have three
    types to use: `ExistingPlaneUsingExtent`, `HorizontalPlane`, and `FeaturePoint`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We can now do a final `foreach` loop on the `ARHitTestResultType` and create
    an `if` statement to check the `HitTestWithResultType` with the parameters filled
    with the point and `resultType`. This essentially just checks to see if the proper
    touch events have occurred, and if they have, then it activates the play method.
    Upon another touch event, it will stop the media that was playing. Following that,
    we return to break from the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can go back to the Unity Editor and look at the cube object''s attached
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/05ab403d-3222-4cdc-a480-32c754a51b7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can attach our `Cube` to be the Hit Transform as when we tap, this will
    be the registered object to read the information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd520666-9f14-4c92-852f-2b619b7dbd1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now build this project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, click on File and Build Settings. We will be utilizing iOS as the
    platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d26f7bc0-3cc6-45e1-9ab1-eece6e8acce0.png)'
  prefs: []
  type: TYPE_IMG
- en: In Player Settings, we need to change our app’s name in the Bundle Identifier
    area and write a small description in the camera usage description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I will name the app `com.rpstudios.arkitscene`, and the description will be
    `AR BABY`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80f6410a-de88-43fa-a466-2fbf8f2955bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we select Build app, Unity will create an XCode project, which is the
    main difference between building for Android, Windows, and Linux:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a629a93-3285-40f5-a5c5-9239233e01fd.png)'
  prefs: []
  type: TYPE_IMG
- en: The main bulk of the work is done; now we just need to get familiar with XCode
    and finalize the build process there.
  prefs: []
  type: TYPE_NORMAL
- en: Working with XCode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can navigate to the `Build` folder of our application here and click on
    it to open our XCode project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left-hand side of the screen, you should see Unity-iPhone as one of
    the items you can select. Click on it and you should see Unity-iPhone in the center
    and Identity and Type on the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ba6b73cb-3279-404a-9ffd-31282cad9552.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check to make sure the Identity is correct. Display Name for me is `Chapter4`,
    with the Bundle Identifier as `com.rpstudios.arkitscene`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c4483725-0394-4e43-8e11-c6a7dff6b49f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, on Signing, you need to look and make sure that the Automatically manage
    signing checkbox is checked and your Team has your email address attached to it.
    The Signing Certificate is extremely important, as you will not be able to compile
    or send to the simulator properly. If you don’t, you have to register for an Apple
    Developer account at [developer.apple.com](https://developer.apple.com/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d90d219f-74d4-48fa-a797-a35ab7a9d09c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll down and look for Linked Frameworks and Libraries. AVFoundation should
    be set from Optional to Required. I’ve noticed that when it is set to Optional,
    the linker fails to work properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/574ec481-599c-4862-bb71-e97939c1ed93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Locate Architectures, because we need to change from the default to Standard.
    This is due to there being different architectures and iOS doesn’t utilize ARM
    anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6aab41b-ddf1-4b00-994f-0b2c61f627ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can click on Build and attach your iPhone 6 or above to your Mac computer.
    Build and then run it on the device. It will ask you to trust the app on your
    phone, so follow the instructions to give trust.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the app on your phone and voila! It will load and you can play with
    the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to work with ARKit and Unity to build an AR
    application for Mac devices. While this was a very simple implementation, it should
    definitely pave the way for you to incorporate different aspects of sound into
    your own AR games and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the foundations of dealing with AR is possibly the most difficult part,
    as well as figuring out why building for different devices doesn’t work as you
    intended initially. Debugging and testing is something that should be integral
    to every aspect of development. I would suggest either having someone test every
    build, or run automated testing at every chance you get.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to create an educational-style game prototype
    aimed at children, which will challenge their cognitive reasoning skills by means
    of a puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ARKit comes standard with Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'You can build for macOS and iPhone on Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'The bundle identifier can be set to be `app.unity.test`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: What is ARPoint and what does it do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The design document is not needed for big projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'UML stands for Uniform Modeling Language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'ARKit has built-in VR support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: Can you import ARKit into a Unity project on a Windows machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) Yes
  prefs: []
  type: TYPE_NORMAL
- en: B.) No
  prefs: []
  type: TYPE_NORMAL
- en: What would happen if you were to use an Objective-C plugin with Windows?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: Can you use Vuforia and ARKit together in the same project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand the different design document templates better, here is a list
    of places where you can download and look at templates and examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.google.com/document/d/1pgMutdDasJb6eN6yK6M95JM8gQ16IKacxxhPXgeL9WY/edit](https://docs.google.com/document/d/1pgMutdDasJb6eN6yK6M95JM8gQ16IKacxxhPXgeL9WY/edit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit](https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://robotics.ee.uwa.edu.au/courses/design/examples/example_design.pdf](http://robotics.ee.uwa.edu.au/courses/design/examples/example_design.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.toptal.com/freelance/why-design-documents-matter](https://www.toptal.com/freelance/why-design-documents-matter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://portal.unimap.edu.my/portal/page/portal30/BE8D43D77F7A6D38E04400212800D8CE](http://portal.unimap.edu.my/portal/page/portal30/BE8D43D77F7A6D38E04400212800D8CE)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.cs.drexel.edu/~dpn52/Therawii/design.pdf](https://www.cs.drexel.edu/~dpn52/Therawii/design.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UML is a topic that is discussed in many circles, and there are plenty of resources
    on it that go into much more depth than I have. The reason for this is that UML
    could have a book written about it in order to do it proper justice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.utdallas.edu/~chung/Fujitsu/UML_2.0/Rumbaugh--UML_2.0_Reference_CD.pdf](https://www.utdallas.edu/~chung/Fujitsu/UML_2.0/Rumbaugh--UML_2.0_Reference_CD.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://courses.cs.washington.edu/courses/cse403/11sp/lectures/lecture08-uml1.pdf](https://courses.cs.washington.edu/courses/cse403/11sp/lectures/lecture08-uml1.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity also has some fantastic tutorials where you can learn ARKit with Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unity3d.com/learn/learn-arkit](https://unity3d.com/learn/learn-arkit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These references should give you deeper insight into topics that I lightly touched
    on.
  prefs: []
  type: TYPE_NORMAL
