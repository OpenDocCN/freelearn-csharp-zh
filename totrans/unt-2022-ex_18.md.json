["```cs\nAssets\\Scripts\\ProjectileDamage.cs(4,48): error CS0535: 'ProjectileDamage' does not implement interface member 'IDamage.DoDamage(Collider, bool)'\n```", "```cs\npublic UnityEvent<Collider, bool> OnDamageEvent;\npublic void DoDamage(Collider collision, bool isAffected)\n    => OnDamageEvent?.Invoke(collision, isAffected);\n```", "```cs\n[Header(\"Patrol Waypoints\")]\n[SerializeField] private List<Transform> _waypoints;\n```", "```cs\nprivate int _waypointCurrentIndex = 0;\nprivate NavMeshAgent _navMeshAgent;\n```", "```cs\nprivate void Awake()\n{\n    _navMeshAgent = GetComponent<NavMeshAgent>();\n    Debug.Assert(_navMeshAgent != null,\n        $\"[{nameof(PatrolWaypoints)} NavMesh agent is null!]\",\n            gameObject);\n}\n```", "```cs\npublic void Init(float acceleration, float speed) { }\n```", "```cs\npublic void Init(float acceleration, float speedMax)\n{\n    _navMeshAgent.acceleration = acceleration;\n    _navMeshAgent.speed = speedMax;\n    if (_waypoints.Count > 0)\n    {\n        _navMeshAgent.SetDestination(_waypoints[0].position);\n    }\n    _waypointCurrentIndex = 0;\n}\n```", "```cs\nprivate void UpdateDirection()\n{\n    if (!_navMeshAgent.pathPending\n        && _navMeshAgent.remainingDistance\n            <= _navMeshAgent.stoppingDistance)\n    {\n        MoveToNextWaypoint();\n    }\n}\n```", "```cs\nprivate void MoveToNextWaypoint()\n{\n    if (_waypoints == null\n        || _waypoints.Count == 0)\n            return;\n    _waypointCurrentIndex =\n        (_waypointCurrentIndex + 1) % _waypoints.Count;\n    _navMeshAgent.SetDestination\n        (_waypoints[_waypointCurrentIndex].position);\n}\n```", "```cs\n    public void TickPhysics() => UpdateDirection();\n    ```", "```cs\npublic interface IBehaviorPatrolWaypoints\n{\n    void Init(float acceleration, float speedMax);\n    void TickPhysics();\n}\n```", "```cs\nprivate void Awake()\n{\n    …\n    // Get behaviors and initialize.\n    if (TryGetComponent<IBehaviorPatrolWaypoints>(\n        out _behaviorPatrol))\n    {\n        _behaviorPatrol.Init(\n            _config.Acceleration,\n            _config.SpeedMax);\n    }\n    …\n```", "```cs\n// In class EnemyController, delete:\n  private Rigidbody2D _rb;\n// In Awake(), delete:\n  _rb = GetComponent<Rigidbody2D>();\n// In FixedUpdate(), delete:\n  else\n      _rb.velocity = Vector2.zero;\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Events;\npublic class SensorTemplate\n{\n    private readonly MonoBehaviour _context;\n    public event UnityAction OnSensorDetected;\n    public SensorTemplate(MonoBehaviour context)\n    {\n        _context = context;\n    }\n    public void Tick()\n    {\n        // Invoke only if detection occurred.\n        OnSensorDetected?.Invoke();\n    }\n}\n```", "```cs\npublic class EnemyController : MonoBehaviour\n{\n    private SensorTemplate _sensor;\n    private void Start()\n    {\n        _sensor = new SensorTemplate(this);\n        _sensor.OnSensorDetected += HandleSensor_Detected;\n    }\n    private void HandleSensor_Detected()\n    {\n        Debug.Log(\"Sensor triggered!\");\n        ChangeState(State.Detected);\n    }\n    private void Update()\n    {\n        _sensor.Tick();\n    }\n}\n```", "```cs\npublic SensorTargetInFOV(MonoBehaviour context,\n    float fovAngle, float fovRange)\n{\n    _context = context;\n    _fovAngle = fovAngle;\n    _fovRange = fovRange;\n}\n```", "```cs\npublic SensorHearing(MonoBehaviour context,\n    float hearingRange, float updateFrequency)\n{\n    _context = context;\n    _hearingRange = hearingRange;\n    _updateFrequency = updateFrequency;\n    _context.StartCoroutine(\n        PeriodicallyUpdateAudioSources());\n    …\n```", "```cs\n    public override void CollectObservations(VectorSensor sensor)\n    {\n        // TODO: Implementation of sensor observations.\n    }\n    ```", "```cs\n    public override void OnActionReceived(ActionBuffers actionBuffers)\n    {\n        // TODO: Implementation of actions.\n    }\n    ```", "```cs\n    public override void OnActionReceived(ActionBuffers actionBuffers)\n    {\n        …\n        SetReward(0.1f); // Positive reward.\n        SetReward(-1);   // Negative reward.\n    }\n    ```"]