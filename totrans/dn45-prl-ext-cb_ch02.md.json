["```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Main()\n    {\n      try\n      {\n      // The Task and Continuation will go here\n      }\n      catch (AggregateException aEx)\n      {\n        foreach (Exception ex in aEx.InnerExceptions)\n        {\n          Console.WriteLine(\"An exception has occured: {0}\" + ex.Message);\n        }\n      }\n    }\n    ```", "```cs\n    var client = new WebClient();\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    client.Headers.Add(\"user-agent\", headerText);\n\n    ```", "```cs\n    Task.Factory.StartNew(() =>\n    {\n    }).ContinueWith(obj =>\n    {\n    }).Wait();\n    ```", "```cs\n    Task.Factory.StartNew(() =>\n      {\n        Console.WriteLine(\"Antecedent running.\");\n        char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };                        \n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Word count for Origin of Species: {0}\", wordArray.Count());\n      }\n    ).ContinueWith(antecedent =>\n      {\n        Console.WriteLine(\"Continuation running\");\n        client.Dispose();\n      }).Wait();\n    ```", "```cs\nTask.Factory.StartNew(() =>\n{\n}).ContinueWith(obj =>\n{\n}).Wait();\n```", "```cs\nTask task1 = Task.Factory.StartNew(() =>\n{\n});\ntask1.ContinueWith(obj =>\n{\n}).Wait();\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Main()\n    {\n        char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n        try\n        {\n        // The Task and Continuation will go here\n        }\n        catch (AggregateException aEx)\n        {\n          foreach (Exception ex in aEx.InnerExceptions)\n          {\n            Console.WriteLine(\"An exception has occured: {0}\" + ex.Message);\n          }\n        }\n    }\n    ```", "```cs\n    try\n    {\n        Task<string[]> task1 = Task.Factory.StartNew(() =>\n        {\n          var client = new WebClient();\n          const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n          client.Headers.Add(\"user-agent\",headerText);\n          var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n          string[] wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n          Console.WriteLine(\"Word count for Origin of Species: {0}\", wordArray.Count());\n          Console.WriteLine();\n          return wordArray;\n        }\n    }\n    ```", "```cs\n    task1.ContinueWith(antecedent =>\n    {\n      var wordsByUsage = antecedent.Result.Where(word => word.Length > 5)\n      .GroupBy(word => word)\n      .OrderByDescending(grouping => grouping.Count())\n      .Select(grouping => grouping.Key);\n      var commonWords = (wordsByUsage.Take(5)).ToArray();\n      Console.WriteLine(\"The 5 most commonly used words in Origin of Species:\");\n      Console.WriteLine(\"----------------------------------------------------\");\n      foreach (var word in commonWords)\n      {\n        Console.WriteLine(word);\n      }\n    }).Wait();\n    ```", "```cs\n    Console.WriteLine();\n    Console.WriteLine(\"Complete. Please hit <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\nTask<string[]> task1 = Task.Factory.StartNew(() =>\n{\n  //Task Action\n}); \ntask1.ContinueWith(antecedent =>\n{\n  //Continuation Action\n});\n```", "```cs\ntask1.ContinueWith(antecedent =>\n{\n  var wordsByUsage = antecedent.Result.Where(word => word.Length > 5)\n  .GroupBy(word => word)\n  .OrderByDescending(grouping => grouping.Count())\n  .Select(grouping => grouping.Key);\n  var commonWords = (wordsByUsage.Take(5)).ToArray();\n  Console.WriteLine(\"The 5 most commonly used words in Origin of Species:\");\n  Console.WriteLine(\"----------------------------------------------------\");\n  foreach (var word in commonWords)\n  {\n    Console.WriteLine(word);\n  }\n});\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    var dictionary = new Dictionary<string, string>\n    {\n      {\"Origin of Species\", \"http://www.gutenberg.org/files/2009/2009.txt\"},\n        {\"Beowulf\", \"http://www.gutenberg.org/files/16328/16328-8.txt\"},\n        {\"Ulysses\", \"http://www.gutenberg.org/files/4300/4300.txt\"}\n    };\n    ```", "```cs\n    try\n    {\n      // Loop to create and Continuation will go here\n    }\n    catch (AggregateException aEx)\n    {\n      foreach (Exception ex in aEx.InnerExceptions)\n      {\n        Console.WriteLine(\"An exception has occured: {0}\" + ex.Message);\n      }\n    }\n    ```", "```cs\n    var tasks = new List<Task<KeyValuePair<string, int>>>();\n    ```", "```cs\n    foreach (var pair in dictionary)\n    {\n      tasks.Add(Task.Factory.StartNew(stateObj =>\n      {\n        var taskData = (KeyValuePair<string, string>)stateObj;\n        Console.WriteLine(\"Starting task for {0}\", taskData.Key);\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(taskData.Value);\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return new KeyValuePair<string, int>(taskData.Key, wordArray.Count());\n      }, pair));\n    }\n    ```", "```cs\n    Task.Factory.ContinueWhenAny(tasks.ToArray(), antecedent =>\n    {\n        Console.WriteLine(\"And the winner is: {0}\", antecedent.Result.Key);\n        Console.WriteLine(\"Word count: {0}\", antecedent.Result.Value);\n    }).Wait();\n    ```", "```cs\n    Console.WriteLine(\"Complete. Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    Task.Factory.ContinueWhenAll(tasks.ToArray(), antecedents =>\n    {\n        foreach (var antecedent in antecedents)\n        {\n            Console.WriteLine(\"Book Title: {0}\", antecedent.Result.Key);\n            Console.WriteLine(\"Word count: {0}\", antecedent.Result.Value);\n        }\n    }).Wait();\n    ```", "```cs\nTask.Factory.ContinueWhenAll(tasks.ToArray(), antecedents =>\n{\n});\n```", "```cs\nContinueWhenAny(Task[], Action<Task>)\n```", "```cs\nContinueWhenAll(Task[], Action<Task[]>)\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var tokenSource1 = new CancellationTokenSource();\n    var token1 = tokenSource1.Token;\n\n     var tokenSource2 = new CancellationTokenSource();\n     var token2 = tokenSource2.Token;\n    ```", "```cs\n    try\n    {\n        // Tasks and Continuations will go here\n    }\n    catch (AggregateException aEx)\n    {\n        foreach (Exception ex in aEx.InnerExceptions)\n        {\n          Console.WriteLine(\"An exception has occured: {0}\" + ex.Message);\n        }\n    }\n    ```", "```cs\n    var task1 = Task.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Task #1 is running.\");\n        //wait a bit\n        Thread.Sleep(2000);\n    }, token1);\n\n    task1.ContinueWith(antecedent => Console.WriteLine(\"Task #1 completion continuation.\"), TaskContinuationOptions.OnlyOnRanToCompletion);\n    task1.ContinueWith(antecedent => Console.WriteLine(\"Task #1 cancellation continuation.\"), TaskContinuationOptions.OnlyOnCanceled);\n\n    var task2 = Task.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Task #2 is running.\");\n        //wait a bit\n        Thread.Sleep(2000);\n    }, token2);\n\n    task2.ContinueWith(antecedent => Console.WriteLine(\"Task #2 completion continuation.\"), TaskContinuationOptions.OnlyOnRanToCompletion);\n    task2.ContinueWith(antecedent => Console.WriteLine(\"Task #2 cancellation continuation.\"), TaskContinuationOptions.OnlyOnCanceled);\n    ```", "```cs\n    tokenSource2.Cancel();\n    Console.ReadLine();\n    ```", "```cs\nvar task1 = Task.Factory.StartNew(() =>\n{\n    Console.WriteLine(\"Task #1 is running.\");\n    //wait a bit\n    Thread.Sleep(2000);\n}, token1);\n\nvar task2 = Task.Factory.StartNew(() =>\n{\n    Console.WriteLine(\"Task #2 is running.\");\n    //wait a bit\n    Task2.Delay(2000);\n}, token2);\n```", "```cs\ntask1.ContinueWith(antecedent => Console.WriteLine(\"Task #1 completion continuation.\"),         TaskContinuationOptions.OnlyOnRanToCompletion);\n\ntask1.ContinueWith(antecedent => Console.WriteLine(\"Task #1 cancellation continuation.\"), TaskContinuationOptions.OnlyOnCanceled);\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    Task task1 = Task.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Starting the task.\");\n        var client = new WebClient();\n        const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n        client.Headers.Add(\"user-agent\", headerText);\n        try\n        {\n            var book = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n            var ex = new WebException(\"Unable to download book contents\");\n            throw ex;\n        }\n        finally\n        {\n            client.Dispose();\n            Console.WriteLine(\"WebClient disposed.\");\n        }\n    });\n    ```", "```cs\n    task1.ContinueWith(antecedent=> \n    {\n        Console.WriteLine(\"The task ran to   completion.\"),\n    }, TaskContinuationOptions.OnlyOnRanToCompletion);\n    ```", "```cs\n    task1.ContinueWith(antecedent =>\n    {\n        Console.WriteLine(\"The task faulted.\");\n        var aEx = antecedent.Exception;\n        if (aEx != null)\n        foreach (var ex in aEx.InnerExceptions)\n        {\n            Console.WriteLine(\"Handled Exception: {0}\",ex.Message);\n        }\n    }, TaskContinuationOptions.OnlyOnFaulted);\n    Console.ReadLine();\n    ```", "```cs\nfinally\n{\n    client.Dispose();\n    Console.WriteLine(\"WebClient disposed.\");\n}\n```", "```cs\ntask1.ContinueWith(antecedent =>\n{\n    Console.WriteLine(\"The task faulted.\");\n    var aEx = antecedent.Exception;\n    if (aEx != null)\n        foreach (var ex in aEx.InnerExceptions)\n        {\n            Console.WriteLine(\"Handled Exception: {0}\",ex.Message);\n        }\n}, TaskContinuationOptions.OnlyOnFaulted);\nConsole.ReadLine();\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var tokenSource = new CancellationTokenSource();\n    var token = tokenSource.Token;\n    ```", "```cs\n    try\n    {\n    //Task and Continuation go here\n    }\n    catch (AggregateException aEx)\n    {\n        foreach (var ex in aEx.InnerExceptions)\n        {\n            Console.WriteLine(\"An exception has occured: \" + ex.Message);\n        }\n    }\n    finally\n    {\n        tokenSource.Dispose();\n    }\n    ```", "```cs\n    var task1 = Task.Factory.StartNew(state =>\n    {\n        Console.WriteLine(\"Task has started.\");\n        var result = new List<Int32>();\n        for (var i = 0; i < (Int32) state; i++)\n        {\n            token.ThrowIfCancellationRequested();\n            result.Add(i);\n            Thread.Sleep(100); //sleep to simulate some work\n        }\n        return result;\n    }, 5000,token);\n    ```", "```cs\n    task1.ContinueWith(antecedent =>\n    {\n        Console.WriteLine(\"Continuation has started.\");\n        var antecedentResult = antecedent.Result;\n        var squares = new List<int>();\n        foreach (var value in antecedentResult)\n        {\n            token.ThrowIfCancellationRequested();\n            squares.Add(value*value);\n            Thread.Sleep(100);//sleep to simulate some more work\n        }\n        return squares;\n    },token);\n    ```", "```cs\n    Thread.Sleep(2000); //wait for 2 seconds\n    tokenSource.Cancel();\n    task1.Wait();\n    ```", "```cs\n    Console.WriteLine(\"Complete. Press enter to exit.\");\n    Console.ReadLine();\n    ```", "```cs\nvar tokenSource = new CancellationTokenSource();\nvar token = tokenSource.Token;\n\nvar task1 = Task.Factory.StartNew(state =>\n{\n    // Task body\n}, 5000,token);\n\ntask1.ContinueWith(antecedent =>\n{\n    //Continuation body\n},token);\n```", "```cs\nforeach (var value in antecedentResult)\n{\n    token.ThrowIfCancellationRequested();\n    squares.Add(value*value);\n    Thread.Sleep(100);//sleep to simulate some more work\n}\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    try\n    {\n    //Task and continuations go here\n    }\n    catch (AggregateException aEx)\n    {\n        foreach (var ex in aEx.InnerExceptions)\n        {\n            Console.WriteLine(\"An exception has occured: {0}\", ex.Message);\n        }\n    }\n    Console.WriteLine();\n    Console.WriteLine(\"Complete. Please hit <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    var producer = Task.Factory.StartNew(() =>\n    {\n        char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n        var client = new WebClient();\n        const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n        client.Headers.Add(\"user-agent\", headerText);\n        try\n        {\n            var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n            var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n            Console.WriteLine(\"Word count for Origin of Species: {0}\", wordArray.Count());\n            Console.WriteLine();\n            return wordArray;\n        }\n        finally\n        {\n            client.Dispose();\n        }\n    });\n    ```", "```cs\n    Task<string[]> consumer1 = producer.ContinueWith(antecedent =>\n    {\n        var wordsByUsage =antecedent.Result.Where(word => word.Length > 5)\n            .GroupBy(word => word)\n            .OrderByDescending(grouping => grouping.Count())\n            .Select(grouping => grouping.Key);\n        var commonWords = (wordsByUsage.Take(5)).ToArray();\n        Console.WriteLine(\"The 5 most commonly used words in Origin of Species:\");\n        Console.WriteLine(\"----------------------------------------------------\");\n        foreach (var word in commonWords)\n        {\n            Console.WriteLine(word);\n        }\n        Console.WriteLine();\n        return antecedent.Result;\n    }, TaskContinuationOptions.OnlyOnRanToCompletion);\n    The second consumer will perform another Linq query to find the longest word used.\n    Task consumer2 = consumer1.ContinueWith(antecedent =>\n    {\n        var longestWord = (antecedent.Result.OrderByDescending(w => w.Length)).First();\n        Console.WriteLine(\"The longest word is: {0}\", longestWord);\n    }, TaskContinuationOptions.OnlyOnRanToCompletion);\n    consumer2.Wait();\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    using System.Windows;\n    ```", "```cs\n    <Window x:Class=\"Continuation8.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n        <Grid>\n            <Button Content=\"Get Word Count\" \n                HorizontalAlignment=\"Left\" \n                Margin=\"207,236,0,0\" \n                VerticalAlignment=\"Top\" \n                Width=\"96\" \n                Click=\"Button_Click_1\"/>\n            <Label x:Name=\"lblWordCount\" \n                Content=\"\" \n                HorizontalAlignment=\"Left\" \n                Margin=\"121,148,0,0\" \n                VerticalAlignment=\"Top\" \n                RenderTransformOrigin=\"0.094,0.923\" \n                Width=\"278\"/>\n\n        </Grid>\n    </Window>\n    ```", "```cs\n    private void Button_Click_1(object sender, RoutedEventArgs e)\n    {\n        Task.Factory.StartNew(() =>\n        {\n            char[] delimiters = {' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A'};\n            var client = new WebClient();\n            const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n            client.Headers.Add(\"user-agent\", headerText);\n            try\n            {\n                var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n                var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n                return wordArray;\n            }\n            finally\n            {\n                client.Dispose();\n            }\n        }).ContinueWith(antecedent =>\n        {\n            lblWordCount.Content = String.Concat(\"Origin of Species word count: \",antecedent.Result.Count().ToString());\n        }, TaskScheduler.FromCurrentSynchronizationContext());\n    }\n    ```", "```cs\nTask.Factory.StartNew(() =>\n{\n}).ContinueWith(antecedent =>\n{\n}, TaskScheduler.FromCurrentSynchronizationContext());\n```"]