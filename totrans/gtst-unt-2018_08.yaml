- en: Implementing Our Non-Player Characters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现我们的非玩家角色
- en: In the previous chapter, we focused on our game's player character, the Cucumber
    Man. We imported the character, reviewed the controls, examined the animations,
    and made the necessary configuration changes to fully use our character in the
    game. We reviewed the player character's animations and the character's animation
    controller. We also identified scripts relevant to the player character and reviewed
    several of them. In addition, we made modifications to our game's terrain to better accommodate
    the player character during gameplay.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于我们的游戏玩家角色——黄瓜人。我们导入了角色，审查了控制方式，检查了动画，并对游戏中的角色进行了必要的配置更改，以便完全使用我们的角色。我们审查了玩家角色的动画和角色的动画控制器。我们还确定了与玩家角色相关的脚本，并审查了其中几个。此外，我们还对游戏的地形进行了修改，以便在游戏过程中更好地适应玩家角色。
- en: In this chapter, we will focus on the non-player characters. Our Cucumber Beetles
    will serve as our game's non-player characters and will be the Cucumber Man's
    enemies. We will incorporate Cucumber Beetles in our game through direct placement.
    We will review the beetles' 11 animations and make changes to the non-player character's
    animation controller. In addition, we will write scripts to control the non-player
    characters. We will also add cucumber patches, cucumbers, and cherries to our
    game world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于非玩家角色。我们的黄瓜甲虫将作为我们游戏中的非玩家角色，并将成为黄瓜人的敌人。我们将通过直接放置的方式将黄瓜甲虫纳入我们的游戏。我们将回顾甲虫的11个动画，并对非玩家角色的动画控制器进行修改。此外，我们将编写脚本以控制非玩家角色。我们还将向游戏世界中添加黄瓜地、黄瓜和樱桃。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the non-player characters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解非玩家角色
- en: Importing the non-player characters into our game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将非玩家角色导入我们的游戏
- en: Animating our non-player characters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的非玩家角色动画
- en: Incorporating the non-player characters into our game
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将非玩家角色纳入我们的游戏
- en: Terraforming the terrain for our Cucumber Beetles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的黄瓜甲虫地形进行地形改造
- en: Adding cucumber patches to our terrain
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将黄瓜地皮添加到我们的地形中
- en: Adding cucumbers to our terrain
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将黄瓜添加到我们的地形中
- en: Scripting our non-player characters
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写我们的非玩家角色脚本
- en: Understanding the non-player characters
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解非玩家角色
- en: Non-player characters, commonly referred to as NPCs, are simply game characters
    that are not controlled by a human player. These characters are controlled through
    scripts, and their behaviors are usually responsive to in-game conditions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 非玩家角色，通常简称为NPC，只是不受人类玩家控制的游戏角色。这些角色通过脚本进行控制，其行为通常对游戏中的条件做出响应。
- en: 'Our game''s non-player characters are the Cucumber Beetles. These beetles,
    as depicted in the following screenshot, have six legs that they can walk on;
    under special circumstances, they can also walk on their hind legs:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们游戏中的非玩家角色是黄瓜甲虫。如图所示，这些甲虫有六条腿可以行走；在特殊情况下，它们也可以用后腿行走：
- en: '![](img/7e44d123-493a-4125-b5b9-9d3f0264198c.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7e44d123-493a-4125-b5b9-9d3f0264198c.png)'
- en: Cucumber Beetles are real insects, and are a threat to cucumbers. They cannot
    really walk on their hind legs, but they can in our game.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 黄瓜甲虫是真实的昆虫，对黄瓜构成威胁。它们实际上不能用后腿行走，但在我们的游戏中可以。
- en: In the next section, you will import a Cucumber Beetle asset package prepared
    specifically for this game. There will only be one beetle in that asset package.
    We will, through scripting, make multiple copies of the beetle.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将导入为这款游戏专门准备的黄瓜甲虫资产包。该资产包中只有一个甲虫。我们将通过脚本制作多个甲虫副本。
- en: Before you move on to the next section, you should open your Unity game project. Alternatively,
    you can download the `Starting-Chapter-08` Unity project available from the publisher's
    companion site.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在你继续到下一节之前，你应该打开你的Unity游戏项目。或者，你也可以从出版商的配套网站上下载可用的`Starting-Chapter-08` Unity项目。
- en: Importing the non-player characters into our game
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将非玩家角色导入我们的游戏
- en: 'You are now ready to import the asset package for our game''s non-player character,
    the Cucumber Beetle. Go through the following steps to import the package:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好导入我们游戏非玩家角色——黄瓜甲虫的资产包了。按照以下步骤导入包：
- en: Download the `Cucumber_Beetle.unitypackage` file from the publisher's companion
    website
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出版商的配套网站上下载`Cucumber_Beetle.unitypackage`文件
- en: In Unity, with your game project open, select Assets | Import Package | Custom
    Package from the top menu
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中，打开你的游戏项目后，从顶部菜单选择Assets | Import Package | Custom Package。
- en: Navigate to the location of the asset package you downloaded in step 1 and click
    the Open button
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到步骤1中下载的资产包的位置，并点击打开按钮
- en: When presented with the Import Asset Package dialog window, click the Import
    button
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当出现导入资产包对话框窗口时，点击导入按钮
- en: 'As you will notice, the `Cucumber_Beetle` asset package contains several assets
    related to the Cucumber Beetles, including a controller, scripts, a prefab, animations,
    and other assets:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将注意到的，`Cucumber_Beetle`资产包包含与黄瓜甲虫相关的多个资产，包括控制器、脚本、预制体、动画和其他资产：
- en: '![](img/137a9770-5573-4f7d-9cf8-92f3a2e0dbd6.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/137a9770-5573-4f7d-9cf8-92f3a2e0dbd6.png)'
- en: Now that the `Cucumber_Beetle` asset package has been imported into our game
    project, we should save our project. Use the File | Save Project menu option.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将`Cucumber_Beetle`资产包导入到我们的游戏项目中后，我们应该保存我们的项目。使用文件 | 保存项目菜单选项。
- en: Next, let's review what was imported.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们回顾一下导入的内容。
- en: 'In the Project panel, under Assets | Prefabs, you will see a new `Beetle.Prefab`.
    Also in the Project panel, under Assets, you will see a `Beetle` folder. It is
    important that you understand what each component in the folder is for. Please
    refer to the following screenshot for an overview of the assets that you will
    be using in this chapter in regards to the Cucumber Beetle:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目面板中，在资产 | 预制体下，您将看到一个新的`Beetle.Prefab`。同样，在项目面板中，在资产下，您将看到一个`Beetle`文件夹。了解文件夹中每个组件的作用非常重要。请参考以下截图，了解您在本章中将使用的与黄瓜甲虫相关的资产概览：
- en: '![](img/ab7937dc-ce30-4b44-851a-dee280891c64.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab7937dc-ce30-4b44-851a-dee280891c64.png)'
- en: The other assets in the previous screenshot that were not called out include
    a `readme.txt` file, the texture and materials for the Cucumber Beetle, and the
    source files. We will review the Cucumber Beetle's animations in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个截图中的其他资产包括`readme.txt`文件、黄瓜甲虫的纹理和材质以及源文件。我们将在下一节中回顾黄瓜甲虫的动画。
- en: Animating our non-player characters
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画我们的非玩家角色
- en: 'Several Cucumber Beetle animations have been prepared for use in our game.
    Here is a list of the animation names as they appear in our project, along with
    brief descriptions of how we will incorporate the animation into our game. The
    animations are listed in alphabetical order by name:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为游戏中的黄瓜甲虫准备了几个动画。以下是动画名称及其在项目中的出现顺序，以及我们将如何将动画融入游戏的简要描述。动画按名称字母顺序列出：
- en: '| **Animation Name** | **Usage Details** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **动画名称** | **使用详情** |'
- en: '| `Attack_Ground` | The beetle attacks the Cucumber Man''s feet from the ground
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `Attack_Ground` | 甲虫从地面攻击黄瓜人的脚'
- en: '| `Attack_Standing` | The beetle attacks the Cucumber Man from a standing position
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `Attack_Standing` | 甲虫从站立位置攻击黄瓜人'
- en: '| `Die_Ground` | The beetle dies from the starting position of on the ground
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `Die_Ground` | 甲虫从地面起始位置死亡'
- en: '| `Die_Standing` | The beetle dies from the starting position of standing on
    its hind legs |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `Die_Standing` | 甲虫从站立位置的后腿起始位置死亡'
- en: '| `Eat_Ground` | The beetle eats cucumbers while on the ground |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `Eat_Ground` | 甲虫在地面上吃黄瓜'
- en: '| `Idle_Ground` | The beetle is not eating, walking, fighting, or standing
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `Idle_Ground` | 甲虫没有进食、行走、战斗或站立'
- en: '| `Idle_Standing` | The beetle is standing, but not walking, running, or attacking
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `Idle_Standing` | 甲虫站立，但没有行走、奔跑或攻击'
- en: '| `Run_Standing` | The beetle runs on its hind legs |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `Run_Standing` | 甲虫用其后腿奔跑'
- en: '| `Stand` | The beetle goes from an on-the-ground position to standing (it
    stands up) |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `Stand` | 甲虫从地面位置站立（它站立起来）'
- en: '| `Walk_Ground` | The beetle walks using its six legs |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `Walk_Ground` | 甲虫用其六条腿行走'
- en: '| `Walk_Standing` | The beetle walks on its hind legs |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `Walk_Standing` | 甲虫用其后腿行走'
- en: You can preview these animations by clicking on an animation file, such as `Eat_Ground.fbx`,
    in the Project panel. Then, in the Inspector panel, click the play button to watch
    the animation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在项目面板中点击动画文件（如`Eat_Ground.fbx`）来预览这些动画。然后，在检查器面板中，点击播放按钮来观看动画。
- en: There are 11 animations for our Cucumber Beetle, and we will use scripting,
    later in this chapter, to determine when an animation is played.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有11个黄瓜甲虫动画，我们将在本章后面使用脚本确定何时播放动画。
- en: In the next section, we will add the Cucumber Beetle to our game.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把黄瓜甲虫添加到我们的游戏中。
- en: Incorporating the non-player characters into our game
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将非玩家角色融入我们的游戏
- en: First, let's simply drag the `Beetle.Prefab` from the `Assets`/`Prefab` folder
    in the Project panel to our game in Scene view. Place the beetle somewhere in
    front of the Cucumber Man so that the beetle can be seen as soon as you put the
    game into game mode.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们简单地将`Beetle.Prefab`从项目面板的`Assets`/`Prefab`文件夹拖到场景视图中。将甲虫放在黄瓜人前面，以便在将游戏置于游戏模式时即可看到甲虫。
- en: 'A suggested placement is illustrated in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的放置方式如图所示：
- en: '![](img/9bde2f10-3845-464e-a9fc-0a0672712618.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9bde2f10-3845-464e-a9fc-0a0672712618.png)'
- en: 'When you put the game into game mode, you will notice that the beetle cycles
    through its animations. If you double-click the `Beetle.controller` in the `Assets`
    | `Beetle` folder in the Project panel, you will see, as shown in the following
    screenshot, that we currently have several animations set to play successively
    and repeatedly:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将游戏置于游戏模式时，您会注意到甲虫会循环播放其动画。如果您在项目面板的“Assets”|“Beetle”文件夹中双击`Beetle.controller`，您将看到，如图所示，我们目前有多个动画被设置为依次和重复播放：
- en: '![](img/83e5d469-c8f4-405e-8d86-546f0067edc0.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/83e5d469-c8f4-405e-8d86-546f0067edc0.png)'
- en: This initial setup is intended to give you a first, quick way of previewing
    the various animations. In the next section, we will modify the animation controller.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个初始设置旨在为您提供一种快速预览各种动画的方法。在下一节中，我们将修改动画控制器。
- en: Working with the Animation Controller
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动画控制器
- en: We will use an Animation Controller to organize our NPCs' animations. The Animation
    Controller will also be used to manage the transitions between animations.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用动画控制器来组织NPC的动画。动画控制器还将用于管理动画之间的转换。
- en: Before we start making changes to our Animation Controller, we need to identify
    what states our beetle has and then determine what transitions each state can
    have in relation to other states.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始修改动画控制器之前，我们需要确定我们的甲虫有哪些状态，然后确定每个状态相对于其他状态可以有哪些转换。
- en: Animation states can be referred to as the character's state of animation. For
    example, walking is a state, as are running and jumping.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 动画状态可以称为角色的动画状态。例如，行走是一个状态，跑步和跳跃也是如此。
- en: 'Here are the states that the beetle can have, each tied to an animation:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是甲虫可以拥有的状态，每个状态都关联一个动画：
- en: Idle on Ground
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面闲置
- en: Walking on Ground
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面行走
- en: Eating on Ground
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面进食
- en: Attacking on Ground
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面攻击
- en: Die on Ground
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面死亡
- en: Stand
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立
- en: Standing Idle
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立闲置
- en: Standing Walk
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立行走
- en: Standing Run
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立奔跑
- en: Standing Attack
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立攻击
- en: Die Standing
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立死亡
- en: 'With the preceding list of states, we can assign the following transitions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的状态列表中，我们可以分配以下转换：
- en: 'From Idle on Ground to:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从地面闲置到：
- en: Walking on Ground
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面行走
- en: Running on Ground
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地面上奔跑
- en: Eating on Ground
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面进食
- en: Attacking on Ground
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面攻击
- en: Stand
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立
- en: 'From Stand to:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从站立到：
- en: Standing Idle
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立闲置
- en: Standing Walk
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立行走
- en: Standing Run
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立奔跑
- en: Standing Attack
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立攻击
- en: Reviewing the transitions from Idle on Ground to Stand demonstrates the type
    of state-to-state transition decisions you need to make for your game.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 查看从地面闲置到站立的转换演示了您需要为游戏做出的状态到状态转换决策。
- en: 'Let''s turn our attention back to the Animation Controller window. You will
    notice that there are two tabs in the left panel of that window: Layers and Parameters.
    The Layers tab shows a Base Layer. While we can create additional layers, we do
    not need to do this for our game. The Parameters tab is empty, and that is fine.
    We will make our changes using the Layout area of the Animation Controller window.
    That is the area with the grid background.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将注意力转回到动画控制器窗口。您会注意到该窗口的左侧面板中有两个标签：层和参数。层标签显示一个基础层。虽然我们可以创建额外的层，但我们的游戏不需要这样做。参数标签为空，这是正常的。我们将使用动画控制器窗口的布局区域进行更改。这就是带有网格背景的区域。
- en: 'Let''s start by making the following changes. For all 11 New State buttons,
    do the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下更改开始。对于所有11个新状态按钮，执行以下操作：
- en: Left-click the state button
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左键点击状态按钮
- en: Look in the Inspector panel to determine which animation is associated with
    the state button
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中查看以确定哪个动画与状态按钮关联
- en: Rename the state name in the Inspector panel to reflect the animation.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中重命名状态名称以反映动画。
- en: Click the return button
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击返回按钮
- en: Double-check the state button to ensure your change was made
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次检查状态按钮以确保您的更改已生效
- en: 'When you have completed the preceding five steps for all 11 states, your Animation
    Controller window should match the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成了前五个步骤的所有11个状态后，你的动画控制器窗口应该与以下截图相匹配：
- en: '![](img/388a048e-5c23-47fa-96ee-ac427307fa31.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/388a048e-5c23-47fa-96ee-ac427307fa31.png)'
- en: If you were to put the game into game mode, you would see that nothing has changed.
    We only changed the state names so they made more sense to us. So, we have some
    more work to do with the Animation Controller.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将游戏设置为游戏模式，你会看到没有任何变化。我们只是更改了状态名称，使其对我们更有意义。因此，我们还需要对动画控制器做一些更多的工作。
- en: 'Currently, the Attacking on Ground state is the default. That is not what we
    want. It makes more sense to have the **Idle on Ground** state to be our default.
    To make that change, right-click the **Idle on Ground** state and select Set as
    Layer Default State:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，“地面上的攻击”状态是默认状态。这并不是我们想要的。将“Idle on Ground”状态设置为默认状态更有意义。要做出这个更改，右键单击**Idle
    on Ground**状态并选择“设置为层默认状态”：
- en: '![](img/5413c304-8755-4e37-9eed-ce5bcfb859b4.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5413c304-8755-4e37-9eed-ce5bcfb859b4.png)'
- en: Next, we need to make a series of changes to the state transitions. There are
    a lot of states and there will be a lot of transitions. In order to make things
    easier, we will start by deleting all the default transitions. To accomplish this,
    left-click each white line with an arrow and press your keyboard's *Delete* key.
    Do not delete the orange line that goes from **Entry** to **Idle on Ground**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要对状态转换进行一系列更改。状态很多，转换也会很多。为了使事情更简单，我们将首先删除所有默认转换。为此，左键单击带有箭头的每条白色线条，并按下键盘上的*Delete*键。不要删除从**Entry**到**Idle
    on Ground**的橙色线条。
- en: 'After all transitions have been deleted, you can drag your states around so
    you have more working room. You might temporarily reorganize them in a manner
    similar to what is shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有转换后，您可以拖动状态，以便有更多的工作空间。您可能需要暂时以类似以下截图所示的方式重新组织它们：
- en: '![](img/e452d19e-f83f-4527-9c08-76e32790acf4.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e452d19e-f83f-4527-9c08-76e32790acf4.png)'
- en: 'Our next task is to create all of our state transitions. Follow these steps
    for each state transition you want to add:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个任务是创建所有的状态转换。为每个要添加的状态转换遵循以下步骤：
- en: Right-click the originating state.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击起始状态。
- en: Select Create Transition.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“创建转换”。
- en: Click on the destination state.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击目标状态。
- en: 'Once you have made all your transitions, you can reorganize your states to
    declutter the Animation Controller''s layout area. A suggested final organization
    is provided in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了所有转换，您可以将状态重新组织，以整理动画控制器布局区域。以下截图提供了一个建议的最终组织：
- en: '![](img/69fae59c-6c5b-4110-8b79-c41251f458da.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/69fae59c-6c5b-4110-8b79-c41251f458da.png)'
- en: As you can see in our final arrangement, we have 11 states and over two dozen
    transitions. You will also note that the **Die on Ground** and **Die Standing**
    states do not have any transitions. In order for us to use these animations in
    our game, they must be placed into an Animation Controller.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在最终安排中看到的，我们有11个状态和二十多个转换。您还会注意到**Die on Ground**和**Die Standing**状态没有任何转换。为了在我们游戏中使用这些动画，它们必须放入动画控制器中。
- en: 'Let''s run a quick experiment:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一个快速实验：
- en: Select the Beetle character in the Hierarchy panel.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中选择“甲虫”角色。
- en: In the Inspector panel, click the Add Component button.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击“添加组件”按钮。
- en: Select Physics | Box Collider.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“物理”|“盒式碰撞体”。
- en: Click the Edit Collider button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“编辑碰撞体”按钮。
- en: Modify the size and position of the box collider so that it encases the entire
    beetle body.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整盒式碰撞体的尺寸和位置，使其包围整个甲虫身体。
- en: Click the Edit Collider button again to get out of edit mode.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击“编辑碰撞体”按钮以退出编辑模式。
- en: 'Your box collider should look similar to what is depicted in the following
    screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你的盒式碰撞体应该看起来与以下截图中的类似：
- en: '![](img/8b398df8-efde-4b50-a2c1-0427b115102e.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8b398df8-efde-4b50-a2c1-0427b115102e.png)'
- en: 'Next, let''s create a script that invokes the Die on Ground animation when
    the Cucumber Man character collides with the beetle. This will simulate the Cucumber
    Man stepping on the beetle. Follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个脚本，当黄瓜人角色与甲虫碰撞时，会触发“Die on Ground”动画。这将模拟黄瓜人踩到甲虫的场景。按照以下步骤操作：
- en: Select the Beetle character in the Hierarchy panel.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中选择“甲虫”角色。
- en: In the Inspector panel, click the Add Component button.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击“添加组件”按钮。
- en: Select New Script.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“新建脚本”。
- en: Name the script `BeetleNPC`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本命名为“BeetleNPC”。
- en: Click the Create and Add button.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建和添加按钮。
- en: In the project view, select Favorites | All Scripts | BeetleNPC.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目视图中，选择收藏夹 | 所有脚本 | BeetleNPC。
- en: Double-click the `BeetleNPC` script file.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`BeetleNPC`脚本文件。
- en: 'Edit the script so that it matches the following code block:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑脚本，使其与以下代码块匹配：
- en: '[PRE0]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code detects a collision between the Cucumber Man and the beetle. If a
    collision is detected, the `Die on Ground` animation is played.  As you can see
    in the following screenshot, the Cucumber Man defeated the Cucumber Beetle:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码检测黄瓜人和甲虫之间的碰撞。如果检测到碰撞，则播放`Die on Ground`动画。如以下截图所示，黄瓜人击败了黄瓜甲虫：
- en: '![](img/c6028313-bd1c-455f-bef2-11b8411b6eba.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6028313-bd1c-455f-bef2-11b8411b6eba.png)'
- en: 'This short test demonstrated two important things that will help us further
    develop this game:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的测试展示了两个重要的东西，这将帮助我们进一步开发这个游戏：
- en: Earlier in this section, you renamed all the states in the Animation Controller
    window. The names you gave the states are the ones you will reference in code.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本节前面，你在动画控制器窗口中重命名了所有状态。你给状态起的名字是你在代码中要引用的名字。
- en: Since the animation we used did not have any transitions to other states, the
    Cucumber Beetle will remain in the final position of the animation unless we script
    it otherwise. So, if we had 100 beetles and defeated them all, all 100 would remain
    on their backs in the game world.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们使用的动画没有其他状态之间的过渡，黄瓜甲虫将保持在动画的最终位置，除非我们编写脚本进行其他操作。所以，如果我们有100只甲虫并且击败了它们，所有100只都会在游戏世界中保持背部朝上。
- en: This was a simple and successful scripting test for our Cucumber Beetle. We
    will need to write several more scripts to manage the beetles in our game. First,
    there are some game world modifications we will make.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对我们的黄瓜甲虫进行的一个简单而成功的脚本测试。我们需要编写更多的脚本来管理游戏中的甲虫。首先，我们将对游戏世界进行一些修改。
- en: Terraforming the terrain for our Cucumber Beetles
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的黄瓜甲虫进行地形改造
- en: Our game world is currently very large and appropriate for the game we envisioned.
    In order to efficiently demonstrate how to script the Cucumber Beetles, we will
    designate a sandbox area of our game and confine the Cucumber Beetles to that
    area. We will also need to move some cherry trees there.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏世界目前非常大，非常适合我们构想的游戏。为了有效地演示如何编写黄瓜甲虫的脚本，我们将指定游戏中的一个沙盒区域，并将黄瓜甲虫限制在该区域内。我们还需要将一些樱花树移到那里。
- en: 'We will make the following sequential modifications to our game''s terrain:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对游戏地形进行以下顺序修改：
- en: Designate a sandbox area
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定一个沙盒区域
- en: Plant additional cherry trees
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 植种额外的樱花树
- en: Create spawning sites
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建孵化点
- en: Designating a sandbox area
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定一个沙盒区域
- en: We do not necessarily want to make major modifications to our game's terrain.
    We previously spent considerable time planning, creating, and fine-tuning the
    terrain. Instead, we will select one of the large, flat areas to act as a sandbox.
    If you do not have any large, flat areas, you can select one of your flat areas
    and make it a bit bigger.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不一定想对我们的游戏地形进行重大修改。我们之前花了很多时间来规划、创建和微调地形。相反，我们将选择一个大型平坦区域作为沙盒。如果你没有大型平坦区域，你可以选择你的一个平坦区域并将其稍微扩大。
- en: 'The following image suggests a size relative to our current game world. The
    white box towards the bottom center of the image represents an ideal size:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了相对于我们当前游戏世界的大小。图像底部中央的白色方框代表一个理想的大小：
- en: '![](img/8806b183-af16-4efa-ba32-ac4147fc9066.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8806b183-af16-4efa-ba32-ac4147fc9066.png)'
- en: Now that we know where our sandbox will be, let's prepare the Hierarchy panel
    for any new items we create for the sandbox. Simply right-click in an empty area
    of the Hierarchy panel and select Create Empty. With that new `GameObject` selected,
    rename it in the Inspector panel as `Sandbox`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了沙盒的位置，让我们为沙盒创建的新项目准备层次结构面板。只需在层次结构面板的空白区域右键单击并选择创建空对象。选择那个新的`GameObject`后，在检查器面板中将其重命名为`Sandbox`。
- en: Planting additional cherry trees
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 植种额外的樱花树
- en: Since our sandbox is a smaller representation of our larger game environment,
    we will need one or more cherry trees. As you will recall, the Cucumber Man will
    collect cherries from the cherry trees and use them to launch ranged attacks on
    the Cucumber Beetles.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的沙盒是我们更大游戏环境的一个较小表示，我们需要一个或多个樱花树。正如你所回忆的，黄瓜人将从樱花树上收集樱桃，并使用它们对黄瓜甲虫进行远程攻击。
- en: In [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating and Importing
    3D Objects for Our Game*, we imported our `Cherry Tree` object and modified it
    for our game. Now, we can simply add additional cherry trees to our sandbox area.
    You can drag the CherryTreeCollider from Projects | Assets | Prefabs directly
    into your sandbox area in the Scene view.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml)，*为我们的游戏创建和导入3D对象*中，我们导入了我们的`樱桃树`对象，并对其进行了修改以适应我们的游戏。现在，我们只需简单地将额外的樱桃树添加到我们的沙盒区域。您可以直接从项目
    | 资产 | 预制体中将CherryTreeCollider拖动到场景视图中的沙盒区域。
- en: Next, you will want to zoom into the sandbox area, using the Scene view, to
    ensure that your trees are not above the ground or in need of additional adjustments.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将想要使用场景视图放大沙盒区域，以确保您的树木不在地面之上或需要额外的调整。
- en: Once your additional cherry trees are in place, each new cherry tree will be
    accessible in the Hierarchy panel. Click each newly created cherry tree and drag
    it to the `Sandbox` object you previously created. We are using the `Sandbox`
    object for organizational purposes only.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的额外樱桃树就位，每个新的樱桃树都将可在层次结构面板中访问。单击每个新创建的樱桃树，并将其拖动到您之前创建的`Sandbox`对象。我们只使用`Sandbox`对象进行组织。
- en: Creating spawning sites
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建出生点
- en: Within the sandbox area, select three areas to serve as spawn points. Where
    you create them is up to you. Placing them at equal distances from one another
    would be a good approach. To make these spawn points obvious, let's create a spawn
    pad and then copy it and place it at various points in the sandbox.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在沙盒区域内，选择三个区域作为出生点。您创建它们的位置由您自己决定。将它们放置在彼此等距的位置是一个很好的方法。为了使这些出生点明显，让我们创建一个出生点，然后复制它并将其放置在沙盒的各个位置。
- en: 'Here are the steps to create the spawn pad:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建出生点的步骤如下：
- en: In the Hierarchy panel, right-click Sandbox and select 3D Object | Cylinder.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，右键单击沙盒，选择3D对象 | 圆柱体。
- en: In the Inspector panel, rename the Cylinder to `SpawnPad1`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将圆柱体重命名为`SpawnPad1`。
- en: 'Click Transform | Scale and change the scale of `SpawnPad1` as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击变换 | 缩放，并按以下方式更改`SpawnPad1`的缩放比例：
- en: x = `3`
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: x = `3`
- en: y = `0.05`
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: y = `0.05`
- en: z =`3`
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: z = `3`
- en: 'Test the scale of the pad by placing it under the Cucumber Man. It should look
    similar to what is shown in the following screenshot. Make adjustments so that
    your pad matches what you see here:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将平台放置在黄瓜人下方来测试平台的缩放比例。它应该看起来与以下截图中的相似。进行调整，使您的平台与这里看到的一致：
- en: '![](img/f515e789-5b3d-42c1-984d-4a52462f5e5b.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f515e789-5b3d-42c1-984d-4a52462f5e5b.png)'
- en: With `SpawnPad1` selected, deselect the Mesh Renderer | Receive Shadows checkbox
    in the Inspector view. This will prevent shadows from being cast onto our spawn
    pad. This step is not terribly important, but helps make our spawn pad seem nonorganic,
    and since we will be spawning the Cucumber Man on this pad, it adds a nice visual
    element.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`SpawnPad1`后，在检查器视图中取消选中Mesh Renderer | 接收阴影复选框。这将防止阴影投射到我们的出生点。这一步并不是非常重要，但有助于使我们的出生点看起来不那么有机，而且由于我们将在该平台上生成黄瓜人，它增加了一个很好的视觉效果。
- en: Using the transform tools, adjust the position of the pad so that it is under
    the bottom of the Cucumber Man's feet, just at or above the grass level.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用变换工具，调整平台的位置，使其位于黄瓜人的脚底下方，正好或略高于草地水平。
- en: 'With `SpawnPad1` selected, click the small circle to the right of the Materials
    | Element 0 | Missing (Material) input box in the Inspector panel:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`SpawnPad1`后，单击检查器面板中材质 | 元素 0 | 缺失（材质）输入框右侧的小圆圈：
- en: '![](img/567a2e3f-0f71-4dd2-9d0d-0d1bca9125f5.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/567a2e3f-0f71-4dd2-9d0d-0d1bca9125f5.png)'
- en: Select a material of your choice from the Select Material dialog window.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从选择材质对话框窗口中选择您喜欢的材质。
- en: Finally, deselect the Capsule Collider component in the Inspector panel. We
    will not need this.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在检查器面板中取消选中胶囊碰撞组件。我们不需要这个组件。
- en: You now have your first spawn pad. Make two further copies, ensuring that they
    are named `SpawnPad1`, `SpawnPad2`, and `SpawnPad3`. In the Hierarchy panel, ensure
    that they are all in your `Sandbox` object.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在有了第一个出生点。再复制两个，确保它们命名为`SpawnPad1`、`SpawnPad2`和`SpawnPad3`。在层次结构面板中，确保它们都在您的`Sandbox`对象中。
- en: Our last task is to put the three spawn pad instances where we want them in
    the `Sandbox` area in Scene view.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后一个任务是将在场景视图中`Sandbox`区域中我们想要的位置放置三个出生点实例。
- en: This is a good time to save your scene and your project.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是保存您的场景和项目的好时机。
- en: Adding cucumber patches to our terrain
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将黄瓜补丁添加到我们的地形中
- en: In [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating and Importing
    3D Objects for Our Game*, we used planes to designate six cucumber patch areas.
    In this section, we will make a seventh cucumber patch and use it in our sandbox
    area. We will also plant cucumber patches inside the new cucumber patch area.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml)，*为我们的游戏创建和导入3D对象*中，我们使用了平面来指定六个黄瓜田地区域。在本节中，我们将创建第七个黄瓜田地区域，并在沙盒区域中使用它。我们还将种植新的黄瓜田地区域内的黄瓜田地。
- en: Creating a cucumber patch area in the sandbox
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在沙盒中创建黄瓜田地区域
- en: 'This section guides you through the steps necessary to create a cucumber patch area
    in the sandbox. In the Hierarchy panel, you should have a `Cucumber Patch Areas`
    game object that contains every size of cucumber patch, each one a 3D object of
    the `plane `type. If you do not have these objects, which are shown in the following
    screenshot, either revisit [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml),
    *Creating and Importing 3D Objects for Our Game*, or download the `Starting-Chapter-08` Unity project
    available from the publisher''s companion site:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导你完成在沙盒中创建黄瓜田地区域所需的步骤。在层次结构面板中，你应该有一个包含各种尺寸黄瓜田地区域的`Cucumber Patch Areas`游戏对象，每个都是一个`plane`类型的3D对象。如果你没有这些对象，它们在下面的屏幕截图中显示，你可以通过重新访问[第6章](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml)，*为我们的游戏创建和导入3D对象*，或者从出版商的配套网站上下载`Starting-Chapter-08`Unity项目：
- en: '![](img/b3fcc4a9-2c3d-4f56-a10f-2164a8c2d156.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b3fcc4a9-2c3d-4f56-a10f-2164a8c2d156.png)'
- en: 'Here are the steps to create a sandbox area in our game:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的游戏中创建沙盒区域的步骤如下：
- en: In the Hierarchy panel, expand the `Cucumber Patch Areas` game object to expose
    the six planes. Remember, we created the `Cucumber Patch Areas` game object to
    serve as a visual organizing folder for our convenience.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，展开`Cucumber Patch Areas`游戏对象以显示六个平面。记住，我们创建了`Cucumber Patch Areas`游戏对象，以便作为我们方便的视觉组织文件夹。
- en: Double-click each plane (`CucumberPatchArea1`, `CucumberPatchArea2`, `CucumberPatchArea3`, `CucumberPatchArea4`, `CucumberPatchArea5`,
    and `CucumberPatchArea6`). When you double-click an object in the Hierarchy panel,
    the Scene view will be focused on it.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击每个平面（`CucumberPatchArea1`、`CucumberPatchArea2`、`CucumberPatchArea3`、`CucumberPatchArea4`、`CucumberPatchArea5`和`CucumberPatchArea6`）。当你双击层次结构面板中的对象时，场景视图将聚焦于该对象。
- en: Identify which cucumber patch area is already in your sandbox.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别哪个黄瓜田地区域已经在你的沙盒中。
- en: In the Hierarchy panel, right-click the identified cucumber patch and select
    Duplicate.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，右键单击已识别的黄瓜田地区域并选择复制。
- en: Rename the duplicated cucumber patch as `CucumberPatchAreaSandbox`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的黄瓜田地区域重命名为`CucumberPatchAreaSandbox`。
- en: In the Hierarchy panel, drag the `CucumberPatchAreaSandbox` to subordinate it
    under the `Sandbox` game object.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，将`CucumberPatchAreaSandbox`拖动到`Sandbox`游戏对象下以使其成为其子对象。
- en: With the `CucumberPatchAreaSandbox` plane selected, modify the shape to fit
    the sandbox area. Use the transform tools for this.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`CucumberPatchAreaSandbox`平面后，修改其形状以适应沙盒区域。使用变换工具来完成这一操作。
- en: Modify the terrain section of the sandbox, if necessary, so that the terrain
    inside the confines of the `CucumberPatchAreaSandbox` is flat and can receive
    cucumber patches.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，修改沙盒的地面部分，以确保`CucumberPatchAreaSandbox`范围内的地面是平坦的，并且可以接收黄瓜田地。
- en: 'You may have to use the Raise / Lower Terrain and Smooth Height terrain tools
    to ensure the area with the `CucumberPatchAreaSandbox` is flat. The following
    screenshot shows the orange-outlined `CucumberPatchAreaSandbox` area, two cherry
    trees, and the three spawn pads indicated in red. Smaller and more difficult to
    see are the Cucumber Man and one Cucumber Beetle. Your sandbox does not need to
    look exactly like this, but should have the same components as shown in the following
    screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要使用提升/降低地面和平滑高度地面工具来确保带有`CucumberPatchAreaSandbox`的区域是平坦的。以下屏幕截图显示了橙色轮廓的`CucumberPatchAreaSandbox`区域、两棵樱桃树和用红色标记的三处出生点。较小的、更难看到的是黄瓜人和一只黄瓜甲虫。你的沙盒不需要看起来完全像这样，但应该具有以下屏幕截图所示相同的组件：
- en: '![](img/df148726-9e49-4441-9393-cc7de1c6d0a4.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/df148726-9e49-4441-9393-cc7de1c6d0a4.png)'
- en: Planting cucumber patches
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 种植黄瓜田地
- en: 'We will use our cucumber patches, the `CucumberPatch1` and `CucumberPatch2` prefabs,
    to create cucumber patch areas in the sandbox. These areas will serve as cover
    for our cucumbers. In this section, we will create an empty game object to encapsulate
    a series of cucumber patches. Let''s get started:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的黄瓜块，`CucumberPatch1`和`CucumberPatch2`预制件，在沙盒中创建黄瓜块区域。这些区域将作为我们黄瓜的掩护。在本节中，我们将创建一个空的游戏对象来封装一系列黄瓜块。让我们开始吧：
- en: Right-click the Sandbox in the Hierarchy panel and select Create Empty.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中右键单击沙盒并选择创建空对象。
- en: Rename the new GameObject as `cucumberPatches`.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的游戏对象重命名为`cucumberPatches`。
- en: Drag several `CucumberPatch1` prefabs onto the scene, in your sandbox.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将几个`CucumberPatch1`预制件拖放到你的沙盒场景中。
- en: Drag several `CucumberPatch2` prefabs onto the scene, in your sandbox.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将几个`CucumberPatch2`预制件拖放到你的沙盒场景中。
- en: In the Hierarchy panel, move all the newly created cucumber patches to the `cucumberPatches`
    game object under Sandbox. This is merely to keep the Hierarchy panel organized.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，将所有新创建的黄瓜块移动到沙盒下的`cucumberPatches`游戏对象。这样做只是为了保持层次结构面板的整洁。
- en: Expand the `cucumberPatches` game object in the Hierarchy panel.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中展开`cucumberPatches`游戏对象。
- en: Select all of the cucumber patches you added and use *Ctrl* + *C* and *Ctrl*
    + *V* to copy and paste them, respectively. The copied results will be highlighted
    in the Hierarchy panel and accessible in the Scene view.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你添加的所有黄瓜块，并使用*Ctrl* + *C* 和 *Ctrl* + *V* 分别复制和粘贴它们。复制的结果将在层次结构面板中高亮显示，并在场景视图中可访问。
- en: In the Scene view, use the transform tools to relocate the copied group of cucumber
    patches.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，使用变换工具重新定位复制的黄瓜块组。
- en: Repeat steps 7 and 8 until you are satisfied with your sandbox.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤7和8，直到你对你的沙盒满意为止。
- en: 'An example of what your sandbox might look like with the newly created cucumber
    patches is provided in the following screenshot. Your sandbox will be different,
    and that is okay:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了你的沙盒可能看起来像什么，其中包含新创建的黄瓜块。你的沙盒可能会有所不同，这是正常的：
- en: '![](img/1dfa14be-b881-442c-868c-3c0b16d800fd.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dfa14be-b881-442c-868c-3c0b16d800fd.png)'
- en: Our sandbox now has sufficient cucumber patches. In the next section, we will
    focus on cucumbers.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的沙盒中有足够的黄瓜块。在下一节中，我们将专注于黄瓜。
- en: Adding cucumbers to our terrain
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将黄瓜添加到我们的地形中
- en: Cucumbers will be used in our game to give the beetles something to search for
    and to eat. We will place several cucumbers in the sandbox area and, in [Chapter
    10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our Points System*,
    keep track of how many there are during gameplay. In this section, we will prepare
    the cucumbers for our use and populate them in our game.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的游戏中，黄瓜将被用来给甲虫提供寻找和食用的东西。我们将在沙盒区域放置几个黄瓜，并在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)“脚本我们的得分系统”中，在游戏过程中跟踪它们的数量。在本节中，我们将为我们的使用准备黄瓜，并在游戏中填充它们。
- en: 'You previously downloaded the necessary assets for the cucumber. As you can
    see in the following screenshot, `Cucumber` is accessible in the `Assets/Cucumber` folder.
    You will note that when we select `Cucumber`, the bottom of the Project panel
    identifies the `Cucumber` file as a `.fbx` file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前已经下载了必要的黄瓜资源。如以下截图所示，`Cucumber`在`Assets/Cucumber`文件夹中是可访问的。你会注意到当我们选择`Cucumber`时，项目面板底部将`Cucumber`文件识别为`.fbx`文件：
- en: '![](img/0313ce77-b146-4e54-8762-bb62c3425dec.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0313ce77-b146-4e54-8762-bb62c3425dec.png)'
- en: 'The `.fbx` file was exported from the 3D modeling software so we can use it
    in our game. When that asset is selected, the inspector view shows Import Settings.
    We want access to the transform, mesh renderer, and other components, so we will
    turn it into a prefab and make some changes. Here are some initial steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`.fbx`文件是从3D建模软件导出的，这样我们就可以在游戏中使用它。当选择该资源时，检查器视图会显示导入设置。我们想要访问变换、网格渲染器和其他组件，因此我们将将其转换为预制件并做一些更改。以下是初始步骤：'
- en: Drag the `Cucumber.fbx` file from Assets | Cucumber to the Hierarchy panel
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Cucumber.fbx`文件从Assets | Cucumber拖动到层次结构面板。
- en: With the `Cucumber` selected in the Hierarchy panel, drag it to the `Assets`/`Prefabs`
    folder in the Project panel
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中选择`Cucumber`，将其拖动到项目面板中的`Assets`/`Prefabs`文件夹。
- en: Delete the `Cucumber` from the Hierarchy panel
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层次结构面板中删除`Cucumber`。
- en: In the Project panel, select Assets | Prefabs | Cucumber
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择Assets | Prefabs | Cucumber。
- en: 'When we select the `Cucumber` file we just moved from the Hierarchy panel to
    the `Prefabs` folder, the bottom of the Project panel, shown in the following
    screenshot, identifies `Cucumber` as a prefab:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从层级面板将刚刚移动的`Cucumber`文件拖到`Prefabs`文件夹时，项目面板底部显示的以下截图将`Cucumber`识别为预制件：
- en: '![](img/dbdf2d49-aabc-43a1-9346-a5bf0e5494c8.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dbdf2d49-aabc-43a1-9346-a5bf0e5494c8.png)'
- en: 'Now, when we look in the Inspector panel, we have access to the components
    we need to further prepare the cucumber for use in our game. Let''s make a few
    changes to the prefab:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们查看检查器面板时，我们可以访问我们需要的组件，以进一步准备黄瓜在游戏中的使用。让我们对预制件做一些修改：
- en: In the Inspector panel, select Tag | Add Tag.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，选择标签 | 添加标签。
- en: 'In the Tags & Layers interface, click the plus icon to the right of the view.
    As shown in the following screenshot, beneath the plus icon is the CherryTree
    tag and to the right:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签和图层界面中，点击视图右侧的加号图标。如下所示，加号图标下方是CherryTree标签，右侧：
- en: '![](img/1e6da26c-2888-40ca-a56d-da287af4e472.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e6da26c-2888-40ca-a56d-da287af4e472.png)'
- en: Enter the name Cucumber.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称黄瓜。
- en: Click the Save button.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存按钮。
- en: Select the Assets | Prefabs | Cucumber prefab in the Project panel.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中选择资产 | 预制件 | 黄瓜预制件。
- en: In the Inspector panel, select Tag | Cucumber.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，选择标签 | 黄瓜。
- en: 'Now that our `cucumber` prefab has a tag, all copies of it will have that same
    tag. This tag will facilitate the following for us regarding gameplay:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为`cucumber`预制件添加了标签，所有副本都将具有相同的标签。这个标签将帮助我们进行以下游戏操作：
- en: Easily count how many cucumbers are left in the game
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松计算游戏中剩余的黄瓜数量
- en: Identify when a beetle has found a cucumber
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别甲虫找到黄瓜的时间
- en: 'We have one more modification to make for our `cucumber` prefab—add a collider:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对我们的`cucumber`预制件进行一项修改——添加一个碰撞器：
- en: Select the Assets | Prefabs | Cucumber prefab in the Project panel
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中选择资产 | 预制件 | 黄瓜预制件。
- en: In the Inspector panel, click the Add Component button
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击添加组件按钮
- en: Select Physics | Box Collider
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择物理 | 矩形碰撞器
- en: 'Next, we can add cucumbers to our sandbox area. First, let''s take the same
    approach as we did for the cucumber patches in regards to organization:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将黄瓜添加到沙盒区域。首先，让我们采取与黄瓜田地组织相同的方法：
- en: Right-click the Sandbox in the Hierarchy panel and select Create Empty.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中右键单击沙盒并选择创建空对象。
- en: Rename the new `GameObject` to `cucumbers`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的`GameObject`重命名为`cucumbers`。
- en: Drag several `Cucumber` prefabs onto the scene, in your sandbox. You can also
    drag a single prefab into the Scene view and make copies of it using the shortcut
    *Ctrl* + *D*, which will duplicate all currently selected objects.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将几个`Cucumber`预制件拖到场景中，在你的沙盒里。你也可以将单个预制件拖到场景视图中，并使用快捷键*Ctrl* + *D*来复制它，这将复制所有当前选定的对象。
- en: Using the transform tools, rotate, resize, and relocate the cucumbers.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用变换工具旋转、调整大小和重新定位黄瓜。
- en: Ensure you have at least 10 cucumbers in your sandbox area.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的沙盒区域至少有10个黄瓜。
- en: In the Hierarchy panel, move all the newly created cucumbers to the `cucumbers`
    game object under Sandbox. This is merely to keep the Hierarchy panel organized.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，将所有新创建的黄瓜移动到沙盒下的`cucumbers`游戏对象中。这只是为了保持层级面板的整洁。
- en: Once you have your cucumbers dispersed throughout the sandbox area of your game
    world, you are ready to start scripting the Cucumber Beetles. We will take care
    of this in the next section.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在游戏世界的沙盒区域中分散了黄瓜，你就可以开始编写黄瓜甲虫的脚本了。我们将在下一节中处理这个问题。
- en: This is a good time to save your scene and your project.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是保存你的场景和项目的好时机。
- en: Scripting our non-player characters
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写非玩家角色的脚本
- en: 'In this section, we will write the necessary scripts to manage the Cucumber
    Beetles in our game. Specifically, we will write scripts to accomplish the following:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写必要的脚本以管理游戏中的黄瓜甲虫。具体来说，我们将编写以下脚本来完成以下任务：
- en: Beetle patrol
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫巡逻
- en: Beetle finds and eats cucumber
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫找到并吃黄瓜
- en: Beetle attacks player on the ground
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫攻击地面上的玩家
- en: Beetle stands to attack
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫站立准备攻击
- en: Getting organized
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整理组织
- en: 'Since we are writing several scripts, we should stay organized. We can click
    Favorites | All Scripts in the Project panel to get a list of all the scripts
    in our project, but there are a lot of them, most of which we will not edit for
    our game. So, let''s create a folder in the Project panel to organize our custom
    scripts. Here are the steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将编写多个脚本，我们应该保持组织。我们可以在项目面板中点击收藏 | 所有脚本以获取项目中所有脚本的列表，但它们有很多，其中大部分我们不会为我们的游戏进行编辑。因此，让我们在项目面板中创建一个文件夹来组织我们的自定义脚本。以下是步骤：
- en: In the Project panel, right-click the `Assets` folder
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，右键点击`Assets`文件夹
- en: Select Create | Folder
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建 | 文件夹
- en: Name the new folder `Custom Scripts`
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Custom Scripts`
- en: 'Now that we have a folder for our custom scripts, let''s move a few:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了自定义脚本的文件夹，让我们移动一些脚本：
- en: In the Project panel, click Favorites | All Scripts.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，点击收藏 | 所有脚本。
- en: Scroll until you find the `BeetleNPC` script we created earlier in this chapter.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动直到找到本章早期创建的`BeetleNPC`脚本。
- en: Drag the `BeetleNPC` script to our `Custom Scripts` folder. This moves the `BeetleNPC`
    script to the designated folder. You will still see it in Favorites | All Scripts because
    this feature shows all scripts regardless of their location.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BeetleNPC`脚本拖到我们的`Custom Scripts`文件夹。这将把`BeetleNPC`脚本移动到指定的文件夹。您仍然会在收藏 | 所有脚本中看到它，因为此功能显示所有脚本，无论它们的位置如何。
- en: Move the `CameraFollower` script to the `Custom Scripts` folder.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CameraFollower`脚本移动到`Custom Scripts`文件夹。
- en: Move the `PlayerController` script to the `Custom Scripts` folder.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`PlayerController`脚本移动到`Custom Scripts`文件夹。
- en: Move the `PlayerMotor` script to the `Custom Scripts` folder.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`PlayerMotor`脚本移动到`Custom Scripts`文件夹。
- en: 'When you are done moving scripts, your `Cucumber Scripts` folder should be
    the same as the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成移动脚本后，您的`Cucumber Scripts`文件夹应与以下截图相同：
- en: '![](img/75bddd97-870c-4906-ad89-b0d3d3774135.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75bddd97-870c-4906-ad89-b0d3d3774135.png)'
- en: 'Our beetles will have the following behaviors in our game:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的游戏中，甲虫将具有以下行为：
- en: Search for cucumbers (patrol)
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索黄瓜（巡逻）
- en: Eat cucumbers when found
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当找到黄瓜时吃掉它们
- en: Defend itself from the Cucumber Man on the ground
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地面上防御来自黄瓜人的攻击
- en: Stand to defend itself from the Cucumber Man
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站立以防御来自黄瓜人的攻击
- en: The next sections will show you how to script these behaviors.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的章节将向您展示如何编写这些行为。
- en: Beetle patrol
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 甲虫巡逻
- en: Beetles in our game will search for cucumbers within the sandbox area. In this
    section, we will write a script to manage their patrol. Let's take some preparatory
    steps.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们游戏中的甲虫将在沙盒区域内寻找黄瓜。在本节中，我们将编写一个脚本来管理它们的巡逻。让我们做一些准备工作。
- en: 'We will get started by creating a character controller for our `Beetle` prefab.
    Here are the steps:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从为我们的`Beetle`预制体创建一个角色控制器开始。以下是步骤：
- en: In the Project panel, select Assets | Prefabs and click on the `Beetle` prefab
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择资产 | 预制体，并点击`Beetle`预制体
- en: In the Inspector panel, click the Add Component button
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击添加组件按钮
- en: Select Physics | Character Controller
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择物理 | 角色控制器
- en: Be sure that you add the character controller to the `Beetle` prefab, not a
    beetle that you have in your scene.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您将角色控制器添加到`Beetle`预制体，而不是场景中的甲虫。
- en: We do not need to make any changes to the default character controller, but
    we do need to have one.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要对默认的角色控制器进行任何更改，但我们确实需要一个。
- en: 'Next, let''s make things easy on us and create some temporary containing walls
    for the beetles. You can simply add 3D cube game objects and, using the transform
    tools, orientate them so that they border the sandbox, or a part of the sandbox.
     You can put your walls inside an empty game object called `Walls` and, in the
    Hierarchy panel, organize them inside the `Sandbox` game object. A representative
    example is shown in the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们简化操作，为甲虫创建一些临时的包含墙壁。您可以简单地添加3D立方体游戏对象，并使用变换工具将它们定位，以便它们与沙盒或沙盒的一部分相邻。您可以将墙壁放入名为`Walls`的空游戏对象中，并在层次结构面板中组织它们，使其位于`Sandbox`游戏对象内部。以下截图是一个示例：
- en: '![](img/dea4e9b1-e644-4930-aaaf-aba9e0563c7c.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dea4e9b1-e644-4930-aaaf-aba9e0563c7c.png)'
- en: Okay, now we are ready to start scripting our beetle's patrol. To get started,
    right-click the Assets | Custom Scripts folder in the Project panel. Select Create
    | C# Script, then name the script `BeetlePatrol`. This creates a C# script for
    us in our `Custom Scripts` folder. We will walk through this script from top to
    bottom in small chunks.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们准备开始编写甲虫巡逻的脚本。要开始，在项目面板中右键点击 Assets | Custom Scripts 文件夹。选择 Create |
    C# Script，然后给脚本命名为 `BeetlePatrol`。这将在我们的 `Custom Scripts` 文件夹中为我们创建一个 C# 脚本。我们将从小块开始，从上到下逐步分析这个脚本。
- en: 'This first section of code simply imports `System.Collections`, `System.Collections.Generic`,
    and the `UnityEngine`. The section also has our `BeetlePatrol` class header:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的第一个部分简单地导入了 `System.Collections`、`System.Collections.Generic` 和 `UnityEngine`。该部分还包括我们的
    `BeetlePatrol` 类头：
- en: '[PRE1]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our variables are provided in the next section. The first variable, `isDie`,
    is a global variable the we will use to determine whether the Cucumber Beetle
    should stop patrolling. The remaining variables are local. Their use will be self-evident
    after reviewing subsequent code sections:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们提供了变量。第一个变量 `isDie` 是一个全局变量，我们将使用它来确定黄瓜甲虫是否应该停止巡逻。其余的变量是局部的。它们的使用在查看后续代码部分后将是显而易见的：
- en: '[PRE2]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next section of code is our `Start()` method, which only runs at the beginning
    of the game. This code sets the initial rotation for the beetle''s patrol:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码部分是我们的 `Start()` 方法，它只在游戏开始时运行。这段代码设置了甲虫巡逻的初始旋转：
- en: '[PRE3]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our `Update()` method, shown in the following code, is our next section. This
    code will be executed once per game frame. Here, you can see that if condition
    `isDie` is `false` (or not `true`), then the code will be executed:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中显示的我们的 `Update()` 方法是下一个部分。这段代码将在每个游戏帧中执行一次。在这里，您可以看到如果条件 `isDie` 是 `false`（或不是
    `true`），则代码将被执行：
- en: '[PRE4]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This last section of code provides two methods. The `NewHeading()` and `NewHeadingRoutine()`
    methods calculate a new direction for the beetle to move towards:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一段代码提供了两个方法。`NewHeading()` 和 `NewHeadingRoutine()` 方法计算甲虫移动的新方向：
- en: '[PRE5]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save your script. Next, we need to associate it with the `Beetle` prefab. With
    the prefab selected, click the Add Component button in the Inspector panel. Then,
    select Scripts | Beetle Patrol.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的脚本。接下来，我们需要将其与 `Beetle` 预制件关联。选择预制件后，在检查器面板中点击添加组件按钮。然后，选择 Scripts | Beetle
    Patrol。
- en: You can drag multiple beetles into your scene and test the game. You should
    see them wandering around your sandbox, remaining confined by the walls you built.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将多个甲虫拖入场景并测试游戏。您应该看到它们在您建造的墙壁内四处游荡。
- en: Beetle finds and eats cucumber
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 甲虫找到并吃掉黄瓜
- en: Earlier in this chapter, we created a `BeetleNPC` script file and attached it
    to our `Beetle` prefab. That script detected collisions with the Cucumber Man.
    In this section, we will modify that script so that it can also detect when it
    collides with a cucumber.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早期，我们创建了一个 `BeetleNPC` 脚本文件并将其附加到我们的 `Beetle` 预制件上。该脚本检测与黄瓜人的碰撞。在本节中，我们将修改该脚本，使其能够检测与黄瓜的碰撞。
- en: 'Let''s first ensure that the cucumbers are properly set up. Check that the
    is selected (checked) in the cucumber''s Box Collider component in the Inspector
    panel. Next, make several copies of your cucumber throughout the sandbox area
    of your scene. You can place them in close proximity to your beetles for easier
    testing. See the following screenshot for an optimal test configuration:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先确保黄瓜被正确设置。检查在检查器面板中黄瓜的 Box Collider 组件是否被选中（勾选）。接下来，在场景的沙盒区域内复制几个黄瓜。您可以将它们放在甲虫附近，以便更容易进行测试。以下截图显示了最佳测试配置：
- en: '![](img/fac4c46f-b637-49e8-8b8d-e2363b3a3c52.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fac4c46f-b637-49e8-8b8d-e2363b3a3c52.png)'
- en: 'The `BeetleNPC` script needs a new variable and two methods, one of which will
    be used as a coroutine. Let''s get started with the new variable. As you can see
    in the following code snippet, we now have a second variable, `cucumberToDestroy`.
    We will use that to reference the cucumber that the beetle ate:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`BeetleNPC` 脚本需要一个新的变量和两个方法，其中一个将用作协程。让我们从新的变量开始。正如您在下面的代码片段中可以看到的，我们现在有一个第二个变量，`cucumberToDestroy`。我们将使用它来引用被甲虫吃掉的那个黄瓜：'
- en: '[PRE6]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we will add an `OnTriggerEvent()` method that is similar to the `OnCollissionEnter`
    that we previously created in this chapter. As you can see, we are testing to
    see whether the beetle collided with a cucumber. When that is detected, we have
    four lines of code that are executed. The first line points the `cucumberToDestroy`
    variable to the specific cucumber the beetle collided with. The next line sets
    the `isEating` value to `true`. We will update the `BeetlePatrol` script to accommodate
    that change. The third statement plays the eating animation. The final statement
    calls the `DestroyCucumber` function, which we will look at next:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个类似于我们在本章之前创建的 `OnCollissionEnter` 的 `OnTriggerEvent()` 方法。如你所见，我们正在测试草莓虫是否与黄瓜相撞。当检测到这种情况时，将执行四行代码。第一行将
    `cucumberToDestroy` 变量指向草莓虫相撞的具体黄瓜。下一行将 `isEating` 值设置为 `true`。我们将更新 `BeetlePatrol`
    脚本来适应这一变化。第三条语句播放进食动画。最后一条语句调用 `DestroyCucumber` 函数，我们将在下一节中查看该函数：
- en: '[PRE7]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The last change to the `BeetleNPC` script is the `DestroyCucumber()` function.
    We are using this function to delay the destruction of the cucumber. This simulates
    the amount of time it takes for the beetle to eat the cucumber. You can change
    the parameter of `WaitForSecondsRealTime` to your liking. That parameter represents
    real-world seconds. Once the delay is over, the object is destroyed and the `isEating`
    variable is set to `false`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `BeetleNPC` 脚本的最后修改是 `DestroyCucumber()` 函数。我们使用此函数来延迟黄瓜的销毁。这模拟了草莓虫吃黄瓜所需的时间。你可以根据需要更改
    `WaitForSecondsRealTime` 参数。该参数代表现实世界中的秒数。一旦延迟结束，对象将被销毁，`isEating` 变量将被设置为 `false`：
- en: '[PRE8]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have two changes to make to our `BeetlePatrol` script. First, as you can
    see in the following code, we will add the new `isEating` variable:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对我们的 `BeetlePatrol` 脚本进行两项修改。首先，如以下代码所示，我们将添加新的 `isEating` 变量：
- en: '[PRE9]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our final change to the `BeetlePatrol` script is to update the conditional
    statement, as shown in the following code. Now, we will stop the patrol if the
    beetle is dying or eating:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 `BeetlePatrol` 脚本的最后修改是更新条件语句，如下所示代码所示。现在，如果草莓虫正在死亡或进食，我们将停止巡逻：
- en: '[PRE10]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Beetle attacks player on the ground
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 草莓虫攻击地面的玩家
- en: 'Currently, when our Cucumber Man collides with a Cucumber Beetle, the Die animation
    is played, but no other behaviors are implemented. In this section, we will modify
    the necessary scripts for the following to occur each time the Cucumber Man collides
    with a Cucumber Beetle:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当我们的黄瓜人与黄瓜虫相撞时，会播放死亡动画，但没有实现其他行为。在本节中，我们将修改必要的脚本，以便每次黄瓜人与黄瓜虫相撞时发生以下行为：
- en: Beetle faces Cucumber Man
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 草莓虫面对黄瓜人
- en: Beetle attacks Cucumber Man for specified time
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 草莓虫在指定时间内攻击黄瓜人
- en: Beetle's die animation plays
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 草莓虫的死亡动画播放
- en: Beetle is removed from game
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 草莓虫从游戏中移除
- en: 'We will use the following three lines of code inside our `OnCollisionEnter()`
    method to force the beetle to face the Cucumber Man when there is a collision.
    As you can see from the following code, we create a variable to make it easy to
    reference the Cucumber Man and then a second variable for the Cucumber Man''s
    current transform. The third line of code tells the current Cucumber Beetle to
    face the Cucumber Man:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `OnCollisionEnter()` 方法中使用以下三行代码来强制草莓虫在碰撞时面对黄瓜人。如以下代码所示，我们创建一个变量以便轻松引用黄瓜人，然后为黄瓜人的当前变换创建第二个变量。第三行代码告诉当前黄瓜虫面对黄瓜人：
- en: '[PRE11]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we just need to edit the `OnCollisionEnter` method to include two statements.
    The first statement plays the Attacking on Ground animation. The second statement
    makes a call to the function that will destroy the current Cucumber Beetle. Here
    are those two lines of code:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需编辑 `OnCollisionEnter` 方法，包括两个语句。第一个语句播放 Attacking on Ground 动画。第二个语句调用将销毁当前黄瓜虫的函数。以下是这两行代码：
- en: '[PRE12]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The last change to the `BeetleNPC` script is the `DestroySelf()` function.
    We are using this function to simulate the battle and end of life for the current
    Cucumber Beetle. There are three statements inside the function. The first statement
    simulates the attack time. The second statement plays the `Die on Ground` animation.
    The final line destroys the game object, which is the current Cucumber Beetle:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `BeetleNPC` 脚本的最后修改是 `DestroySelf()` 函数。我们使用此函数来模拟当前黄瓜虫的战斗和生命结束。函数内部有三个语句。第一个语句模拟攻击时间。第二个语句播放
    `Die on Ground` 动画。最后一行销毁游戏对象，即当前黄瓜虫：
- en: '[PRE13]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have two changes to make to our `BeetlePatrol` script. First, as you can
    see in the following code, we will add the new `isAttacking` variable:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对我们的`BeetlePatrol`脚本进行两项修改。首先，如以下代码所示，我们将添加新的`isAttacking`变量：
- en: '[PRE14]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our final change to the `BeetlePatrol` script is to update the conditional
    statement, as shown in the following code. Now, we will stop the patrol if the
    beetle is dying, eating, or attacking:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`BeetlePatrol`脚本的最后一次修改是更新条件语句，如下所示。现在，如果甲虫正在死亡、进食或攻击，我们将停止巡逻：
- en: '[PRE15]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will make additional modifications to the scripts and behaviors in [Chapter
    10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our Points System*.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第10章[脚本化我们的得分系统](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)中对脚本和行为进行进一步的修改。
- en: Beetle stands to attack
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 甲虫站立以攻击
- en: You will recall that the Cucumber Man has the ability to throw cherries at the
    Cucumber Beetles. This is a ranged attack, and if the Cucumber Beetle were to
    start walking or running on the ground toward the Cucumber Man to attack, it is
    likely the beetle would die before reaching the Cucumber Man.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得黄瓜人能够向黄瓜甲虫投掷樱桃。这是一种远程攻击，如果黄瓜甲虫开始在地面行走或奔跑以攻击黄瓜人，那么甲虫很可能会在到达黄瓜人之前死亡。
- en: 'So, if a beetle is hit by a cherry, we want the following to occur:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果甲虫被樱桃击中，我们希望发生以下情况：
- en: Beetle faces Cucumber Man
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫面向黄瓜人
- en: Beetle stands
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫站立
- en: Beetle runs, while standing, towards the Cucumber Man
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫在站立的同时向黄瓜人奔跑
- en: Beetle attacks Cucumber Man while standing
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲虫在站立时攻击黄瓜人
- en: You can review the animations if you need a refresher on what they look like.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要回顾动画的外观，可以查看动画。
- en: We will make some significant changes to our `BeetleNPC` script. The updated
    script is presented in the following code in its entirety, divided by sequential
    sections with explanations.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对`BeetleNPC`脚本进行一些重大修改。更新的脚本在以下代码中完整呈现，分为按顺序的几个部分，并附有说明。
- en: 'This section shows the imports and class-level variables. You will notice that
    the last three variables (`cherryHit`, `smoothTime`, and `smoothVelocity`) are
    new. We will use `cherryHit` to keep track of the sequence leading up to the beetle''s
    death. The remaining two variables will be used to control how fast and smooth
    the beetle travels to the Cucumber Man:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了导入和类级别变量。你会注意到最后三个变量（`cherryHit`、`smoothTime`和`smoothVelocity`）是新的。我们将使用`cherryHit`来跟踪导致甲虫死亡的序列。其余两个变量将用于控制甲虫到达黄瓜人的速度和流畅度：
- en: '[PRE16]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'No change was made to the `Start()` method:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 没有对`Start()`方法进行修改：
- en: '[PRE17]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are now using the `Update()` method for the first time. This is necessary
    so that every frame in which the beetle can travel toward the Cucumber Man is
    shown. You can also see that we are using the `cherryHit` variable in our conditional
    statement:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始使用`Update()`方法。这是必要的，以便展示甲虫可以朝向黄瓜人移动的每一帧。你还可以看到我们在条件语句中使用了`cherryHit`变量：
- en: '[PRE18]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next section of our script is the `OnCollisionEnter()` method. We moved
    the statements we previously had in this method so that they are encapsulated
    in an `if` statement. If the `cheeryHit` is `false`, then the original code will
    be executed, otherwise the two lines of code after the `else` statement will be
    executed. We see there that we caused two animations to play:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们脚本的下一部分是`OnCollisionEnter()`方法。我们将之前在这个方法中的语句移动，以便它们被一个`if`语句封装。如果`cheeryHit`为`false`，则将执行原始代码，否则将执行`else`语句之后的两个代码行。我们看到那里我们触发了两个动画：
- en: '[PRE19]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next section of code is the `OnTriggerEnter()` method that we previously
    created for handling collisions with cucumbers.  As you can see from the following
    code, we added an `else if` statement to check whether we collided with a `gameObject`
    with a tag of `Cherry`. When that condition is `true`, we set the `isAttacking`
    Boolean variable to `true` so that the forward motion driven by the `BeetlePatrol`
    script will stop. We also set the `cherryHit` value to `true` and play the animation
    that shows the beetle standing:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分代码是之前创建的用于处理与黄瓜碰撞的`OnTriggerEnter()`方法。从以下代码中可以看出，我们添加了一个`else if`语句来检查我们是否与一个标签为`Cherry`的`gameObject`发生了碰撞。当这个条件为`true`时，我们将`isAttacking`布尔变量设置为`true`，这样由`BeetlePatrol`脚本驱动的向前运动就会停止。我们还设置了`cherryHit`的值为`true`，并播放显示甲虫站立的动画：
- en: '[PRE20]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The last section of our `BeetleNPC` script contains three `Destroy`-related
    functions. You are already familiar with `DestroyCucumber()`. We renamed the `DestroySelf()`
    function as `DestroySelfOnGround()` and added the new `DestroySelfStanding()`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`BeetleNPC`脚本的最后部分包含三个与`Destroy`相关的函数。你已经熟悉`DestroyCucumber()`。我们将`DestroySelf()`函数重命名为`DestroySelfOnGround()`，并添加了新的`DestroySelfStanding()`：
- en: '[PRE21]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In order to test this functionality, we will need to have some cherries in our
    scene. Start by downloading the `Cherries.unitypackage` asset package from the
    publisher's site. This package includes a `Cherry.prefab` file that is already
    set up to work in our game. It has a `Cherry` tag and a `Box Collider` with `Is
    Trigger` checked.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个功能，我们需要在我们的场景中放置一些樱桃。首先，从发布者的网站上下载`Cherries.unitypackage`资产包。这个包包含一个已经设置好以在我们的游戏中工作的`Cherry.prefab`文件。它有一个`Cherry`标签和一个带有`Is
    Trigger`选中的`Box Collider`。
- en: 'In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we will add the ability for the Cucumber Man to throw cherries.
    For now, let''s place a bunch of them in our sandbox for testing. One approach,
    as illustrated in the following screenshot, is to surround a beetle with cherries.
    This will make our testing easier and faster:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)，*脚本化我们的得分系统*中，我们将为黄瓜人添加投掷樱桃的能力。现在，让我们在我们的沙盒中放置一些樱桃以进行测试。以下截图所示的一种方法是将樱桃围绕在甲虫周围。这将使我们的测试更容易、更快：
- en: '![](img/8837ae96-dafb-4c65-bb23-9d27fe991f24.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8837ae96-dafb-4c65-bb23-9d27fe991f24.png)'
- en: This is a good time to save your scene and your project.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是保存你的场景和项目的好时机。
- en: Summary
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we focused on the Cucumber Beetles, our game''s non-player
    characters. We reviewed the beetles'' 11 animations and made changes to the non-player
    characters'' animation controller. In addition, we wrote scripts to control the
    non-player characters. Our scripts resulted in several beetle behaviors: patrolling,
    cucumber consumption, fighting on the ground, and, when hit by a cherry, standing,
    running, and attacking on hind legs. We also added cucumber patches, cucumbers,
    and cherries to our game world.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于我们游戏中的非玩家角色——黄瓜甲虫。我们回顾了甲虫的11个动画，并对非玩家角色的动画控制器进行了修改。此外，我们还编写了控制非玩家角色的脚本。我们的脚本产生了几个甲虫行为：巡逻、消耗黄瓜、地面战斗，以及被樱桃击中时站立、奔跑和用后腿攻击。我们还向我们的游戏世界添加了黄瓜地、黄瓜和樱桃。
- en: In [Chapter 9](6e2e628c-4c81-4ec3-bd4f-2ae0f2a29aab.xhtml), *Adding a Heads-Up
    Display*, we will design, develop, and incorporate a **Heads-Up Display** (**HUD**)
    in our game. We will create text and graphics that provide visual indicators of
    points, health, and additional information to help the player maintain situational
    awareness during gameplay.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](6e2e628c-4c81-4ec3-bd4f-2ae0f2a29aab.xhtml)，*添加抬头显示*中，我们将设计、开发和整合一个**抬头显示**（**HUD**）到我们的游戏中。我们将创建文本和图形，提供得分、健康和额外信息的视觉指示，以帮助玩家在游戏过程中保持对局势的了解。
