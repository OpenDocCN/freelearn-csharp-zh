- en: Changes in Requirements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求变更
- en: As progress is made on any application, new and different requirements will
    likely be added. Sometimes these requirements enhance the existing functionality
    of the application. At other times, these new requirements may conflict with the
    existing functionalities. When requirements conflict, it's important that issues
    are resolved so that the proper functionality can be built.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用程序的进展过程中，可能会添加新的和不同的需求。有时这些需求增强了应用程序的现有功能。在其他时候，这些新需求可能与现有功能冲突。当需求冲突时，重要的是要解决这些问题，以便构建适当的功能。
- en: So, what are the changes in requirements you might expect to see? Changes often
    consist of alterations to a business rule, new features or enhancements, or modifications
    needed to resolve a bug or defect discovered in the system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你可能会看到哪些需求的变化？变化通常包括对业务规则的修改、新功能或增强，或者对系统中发现的错误或缺陷所需的修改。
- en: As time goes on, there will often be a need to modify an existing business rule.
    This may be in response to user feedback, clarification from the business, or
    a need discovered through use of the system. When the need for change is discovered,
    then the existing application will need to change. A comprehensive test suite
    will ensure that the rest of the system still operates as expected once the new
    changes are implemented. Start by modifying and/or creating new tests to cover
    the new desired functionality of the system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，通常需要修改现有的业务规则。这可能是对用户反馈的反应、来自业务的澄清，或者通过系统使用过程中发现的需求。当发现需要变化时，现有的应用程序将需要做出改变。一个全面的测试套件将确保在实施新更改后，系统的其余部分仍然按预期运行。首先，通过修改和/或创建新的测试来覆盖系统的新期望功能。
- en: There's a common saying in software development that *software is never finished;
    it is merely abandoned*. That is to say that an application will continue to grow
    and evolve through new development if it is to continue to be useful. If new features
    aren't being added, then it is likely that the project has simply been abandoned.
    If an application is to continue to be of use, then you can expect that new features
    will need to be implemented. Again, start with the tests and add new tests which
    will help guide your implementation of any and all new features.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中有一个常见的说法，*软件永远不会完成；它只是被放弃*。也就是说，如果一个应用程序要继续有用，它将通过新的开发继续增长和演变。如果没有添加新功能，那么很可能项目已经被放弃。如果一个应用程序要继续有用，那么你可以预期需要实现新功能。再次强调，从测试开始，添加新的测试来帮助指导任何和所有新功能的实现。
- en: When a bug is discovered and the root cause identified, then a change will need
    to be made to resolve the issue. In order to prevent this bug from appearing again
    in the future, a new test, or series of tests, should be written to cover any
    potential scenarios that would result in the erroneous behavior.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当发现错误并确定根本原因时，需要做出更改以解决问题。为了防止这个错误在未来再次出现，应该编写一个新的测试或一系列测试来覆盖任何可能导致错误行为的潜在场景。
- en: 'In this chapter, we will gain an understanding of:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解：
- en: Changing requirements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求变更
- en: A new feature
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能
- en: Dealing with defects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理缺陷
- en: Changes to Speaker Meet
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Speaker Meet 的变更
- en: Premature optimization
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过早优化
- en: Hello World
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World
- en: Stepping back to one of our first examples, take a look at the sample *Hello
    World* application. Remember that, depending on the time of day, a different message
    is displayed to the user. Before noon, the user is greeted with Good morning,
    and after noon, Good afternoon is returned to the user.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾我们最早的例子之一，看看这个 *Hello World* 示例应用程序。记住，根据一天中的时间，用户会看到不同的消息。在中午之前，用户会被问候为早上好，中午之后，用户会收到下午好的问候。
- en: A change in requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求变更
- en: Depending on the time of day, the user is greeted with Good morning or Good
    afternoon. To extend the functionality and introduce a new feature, let's address
    the user with Good evening if the time of day is between 6 p.m. and midnight.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据一天中的时间，用户会被问候为早上好或下午好。为了扩展功能并引入新功能，如果一天中的时间是晚上6点到午夜，让我们用晚上好来称呼用户。
- en: Good evening
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 晚上好
- en: In order to introduce this new feature, begin with the tests. Modification of
    an existing test will be needed, as well as adding one or more new tests to cover
    the change in requirements.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引入这个新功能，从测试开始。需要修改现有的测试，以及添加一个或多个新的测试来覆盖需求的变化。
- en: 'Modify the `Theory` data provided to `GivenAfternoon_ThenAfternoonMessage`
    so that only noon through 6 p.m. are included for this test. Now, create a new
    test method, `GivenEvening_ThenEveningMessage`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 修改提供给`GivenAfternoon_ThenAfternoonMessage`的`Theory`数据，以便只包括中午到下午6点之间的测试。现在，创建一个新的测试方法，`GivenEvening_ThenEveningMessage`：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now make the `Theory` pass by modifying the existing code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过修改现有代码来使`Theory`通过：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a fairly simple example, for sure. The implementation is starting to
    grow a design with which you may or may not be satisfied. Feel free to experiment
    with alternative implementations. You should now have sufficient tests that you
    feel safe to refactor to a pattern with which you're happier. If you break the
    implementation or discover a bug you may have introduced, add a test for this
    scenario.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实是一个相当简单的例子。实现开始增长一个你可能满意或不满意的设计。你可以自由地尝试替代实现。你现在应该有足够的测试，让你感到安全地重构到一个你更喜欢的模式。如果你破坏了实现或发现了你引入的错误，为这个场景添加一个测试。
- en: FizzBuzz
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FizzBuzz
- en: Moving on to the FizzBuzz example from [Chapter 2](part0069.html#21PMQ0-d186949d2da74f5c95dd1712efae1195),
    *Setting Up the .NET Test Environment*, extend the classic behavior of this code
    kata and introduce some new behavior.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从[第2章](part0069.html#21PMQ0-d186949d2da74f5c95dd1712efae1195)的FizzBuzz示例，*设置.NET测试环境*，扩展这个代码kata的经典行为，并引入一些新行为。
- en: A new feature
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新特性
- en: A new requirement has been added to the classic FizzBuzz kata. The new requirement
    states that when a number is not divisible by 3 or 5, and is greater than 1, then
    the message Number not found should be returned. This should be easy enough. Start,
    once again, with the tests, and make the necessary modifications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 已经向经典的FizzBuzz kata添加了一个新要求。新的要求是，当一个数字不能被3或5整除，且大于1时，应返回“未找到数字”的消息。这应该足够简单。再次从测试开始，并做出必要的修改。
- en: Number not found
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未找到数字
- en: 'To get started, a new test method is needed to verify that the Number not found message
    is returned:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，需要一个新的测试方法来验证是否返回了“未找到数字”的消息：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, make the test pass by modifying the existing code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过修改现有代码来使测试通过：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This covers the first instance. However, does this satisfy the new requirement?
    Create a `Theory` set to force the proper solution:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了第一个实例。然而，这满足新的要求吗？创建一个`Theory`集来强制正确的解决方案：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make the test pass, the right way. Modify the existing code so that the desired
    results are returned:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正确地使测试通过。修改现有代码，以便返回所需的结果：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that all the existing tests should continue to pass throughout this exercise.
    If you find a bug, write a new test to verify the scenario, and correct the code
    accordingly.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在整个练习过程中，所有现有的测试都应该继续通过。如果你发现了一个错误，写一个新的测试来验证这个场景，并相应地纠正代码。
- en: TODO app
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TODO应用
- en: The *TODO* app was another one of our early TDD examples. This app is far from
    complete, and we have received new requirements from the business, asking to add
    a feature to the application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*TODO*应用是我们早期的TDD示例之一。这个应用远未完成，并且我们已经从业务那里收到了新的要求，要求向应用中添加一个功能。'
- en: The business now wants the ability to complete a task in the TODO list. This
    feature is *schedule current sprint* and is the next story for us to work on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在业务希望有完成TODO列表中任务的能力。这个特性是“当前迭代计划”的，是我们接下来要工作的下一个故事。
- en: Mark complete
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记完成
- en: For the *Mark complete* story, we have been asked to allow the user to complete
    any of the tasks in the TODO list. Adding this feature should be much like any
    other TDD exercise in this book. Before reading our solution to this problem,
    try to complete this one on your own. After you have passing tests, come back
    and look at the solution in this book.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“标记完成”的故事，我们被要求允许用户完成TODO列表中的任何任务。添加这个功能应该与这本书中的任何其他TDD练习类似。在阅读我们对这个问题的解决方案之前，试着独立完成这个任务。在你通过测试后，再回来查看这本书中的解决方案。
- en: Adding tests
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加测试
- en: 'In the `ToDoApplicationTests` file, we have added a `yak shaving` test to force
    us to create the complete method. This test also helps to define the API for the
    method:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ToDoApplicationTests`文件中，我们添加了一个“剃羊毛”测试来强迫我们创建完成方法。这个测试也有助于定义方法的API：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This causes us to create a method stub in the `TodoList` class. To get this
    test to pass, we had to remove the not implemented exception from the generated
    method. After creating the method, we added a skip to this test, similar to the
    previous `yak shaving` test in the same file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致我们在`TodoList`类中创建了一个方法存根。为了使这个测试通过，我们必须从生成的方法中移除未实现异常。创建方法后，我们添加了一个跳过到这个测试，类似于同一文件中之前的“剃羊毛”测试。
- en: 'Next, we needed to create a `TodoListCompleteTests` file to house the functionality
    tests for the complete method:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个`TodoListCompleteTests`文件来存放完成方法的函数测试：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After writing this first test and implementing the code to make it pass, we
    were hard pressed to write another test that would fail. So, we assume that we
    are done for now.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写第一个测试并实现代码使其通过之后，我们很难再编写另一个失败的测试。因此，我们假设现在我们已经完成了。
- en: Production code
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产代码
- en: 'The code to make the tests for completing a task is quite simple and only requires
    a single line method:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完成任务的测试代码相当简单，只需要一个单行方法：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That is all we need. We are now ready for the sprint demo.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要的所有内容。我们现在已经准备好进行冲刺演示。
- en: But don't remove from the list!
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但不要从列表中删除！
- en: During the sprint demo, our product owner asked what happened to the task when
    it was completed. We explained that it was removed from this list. This was not
    good. The product owner was hoping that we could provide metrics on tasks further
    down the road. She would like for us to track the completion of the task instead
    of deleting it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在冲刺演示期间，我们的产品负责人询问任务完成后发生了什么。我们解释说，它被从这份列表中移除了。这并不好。产品负责人希望我们能提供关于未来任务的指标。她希望我们跟踪任务的完成情况，而不是删除它。
- en: After some discussion with the other developers, we have decided the task will
    gain a completed attribute and be hidden from the list. To accomplish this, we
    will have to do a bit of refactoring and add new tests. Again, try to complete
    this exercise on your own and then look at our solution for comparison.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在与其他开发者讨论之后，我们决定任务将获得一个完成属性，并从列表中隐藏。为了实现这一点，我们不得不进行一些重构并添加新的测试。再次提醒，尝试自己完成这个练习，然后再看看我们的解决方案进行比较。
- en: Adding tests
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加测试
- en: 'This change required quite a few new tests. Before we could make new tests,
    though, we had to first rename our existing completion test to represent the correct
    functionality. Adding two more tests to the `TodoListCompleteTests` file, we verify
    both that the item is marked complete and that it is not removed from the TODO
    list:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改需要相当多的新测试。然而，在我们能够创建新测试之前，我们必须首先将现有的完成测试重命名，以表示正确的功能。在`TodoListCompleteTests`文件中添加两个额外的测试，我们验证了项目被标记为完成，并且它没有被从TODO列表中删除：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In order to add `ShowComplete`, we created a `yak shaving` test in the `ToDoApplicationTests`
    file for completeness:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加`ShowComplete`，我们在`ToDoApplicationTests`文件中创建了一个用于完整性的“剃毛”测试：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We also had to add a similar test to the `TodoModelTests` file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须在`TodoModelTests`文件中添加一个类似的测试：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Production code
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产代码
- en: 'For such a small code base, the changes required by the new tests caused a
    fairly significant change. First, we added an `IsComplete` property to the `Todo`
    model:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于如此小的代码库，新测试所需的变化相当显著。首先，我们在`Todo`模型中添加了一个`IsComplete`属性：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The rest of the changes affect the `TodoList` class. A boolean property was
    added to toggle the visibility of completed items, the `Complete` method was modified
    to only mark the item as complete, and a `where` clause was added to the items
    retrieved from the list:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的更改影响`TodoList`类。添加了一个布尔属性来切换已完成项的可见性，修改了`Complete`方法，使其仅标记项目为完成，并在从列表检索的项目中添加了一个`where`子句：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Changes to Speaker Meet
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Speaker Meet的更改
- en: Change is inevitable with any application. Requirements change as a result of
    a new business rule, feature enhancement, discovery and remediation of a defect,
    and so on. Change is especially certain when test driving an application. Luckily,
    through the process of TDD, your application should be easily and safely modifiable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用程序中，变化都是不可避免的。由于新的业务规则、功能增强、缺陷的发现和修复等原因，需求会发生变化。当进行测试驱动开发时，变化尤其确定。幸运的是，通过TDD的过程，你的应用程序应该可以轻松且安全地进行修改。
- en: If a system is loosely coupled, then changes to one part of a system should,
    in theory, have little to no impact on the rest of the system. A comprehensive
    suite of unit tests should alleviate the fear of making changes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个系统是松散耦合的，那么理论上，对系统某一部分的更改应该对系统的其余部分影响很小或没有影响。一套全面的单元测试应该减轻对做出更改的恐惧。
- en: Unfortunately, the tests are only valid for the scenarios which they define.
    If sufficient tests aren't written to cover certain scenarios or edge cases, then
    it is certainly possible that a bug could find its way into production. If the
    TDD approach is not taken, or worse, tests aren't written at all, then you may
    discover that it is quite easy for a bug to make it through all of the checks
    of your code review process and CI/CD build pipeline.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这些测试只对它们定义的场景有效。如果未能编写足够的测试来覆盖某些场景或边缘情况，那么确实有可能出现错误进入生产环境。如果不采用TDD方法，或者更糟糕的是，根本不编写测试，那么你可能会发现错误很容易通过你的代码审查过程和CI/CD构建管道的所有检查。
- en: Take a look at the new requirements for the Speaker Meet application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Speaker Meet应用的新要求。
- en: Changes to the back-end
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后端更改
- en: As the Speaker Meet application progressed, a new requirement was introduced.
    Speakers had to be *approved* before they were visible in parts of the system.
    This included the full listing of speakers, returning of speaker detail information,
    and through search results.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Speaker Meet应用的进展，引入了新的要求。演讲者必须在可见于系统部分之前被**批准**。这包括演讲者的完整列表、返回演讲者详细信息以及通过搜索结果。
- en: 'In this scenario, a developer came in to help out with the implementation.
    This developer was not familiar with TDD and did not write tests to validate his
    work. The new requirement was implemented and a code review was submitted:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一位开发者来帮忙实施。这位开发者不熟悉TDD，并且没有编写测试来验证他的工作。新要求得到了实施，并提交了代码审查：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And a change to the class was added:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 并且添加了对类的更改：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Can you spot the issue?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你能发现问题吗？
- en: The code was reviewed and comments left. However, the comments were misunderstood
    (or just flatly ignored) and the code was committed, merged, and pushed through
    the deployment process. A breakdown for sure, but one that happens from time to
    time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 代码被审查，并留下了评论。然而，评论被误解了（或者只是简单地被忽略了），代码被提交、合并并通过了部署流程。当然是一个故障，但这种情况有时会发生。
- en: The CI server ran the test suite. The existing tests passed. The bug was not
    discovered, as there was no existing scenario that would have caught the error.
    Since new tests were not created, there was no test failure. The CD process ran
    and the code made it into production.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: CI服务器运行了测试套件。现有的测试通过了。由于没有现有的场景会捕捉到这个错误，所以错误没有被发现。由于没有创建新的测试，所以没有测试失败。CD过程运行，代码进入了生产环境。
- en: 'So what test can be added to ensure the proper code is implemented? When dealing
    with bugs, it is often best to simply write the test that verifies the incorrect
    behavior. In this case, we want an error to be thrown. So, the below test should
    assert that the correct error is thrown:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么可以添加什么测试来确保正确代码的实现？在处理错误时，通常最好的做法是简单地编写验证错误行为的测试。在这种情况下，我们希望抛出一个错误。所以下面的测试应该断言抛出了正确的错误：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Make this new test pass by modifying the service:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改服务来使这个新测试通过：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: However, with this change, a number of existing tests will now break. This is
    because the default value for the `IsActive` property is `false`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着这个变化，现在将有一系列现有的测试会失败。这是因为`IsActive`属性的默认值是`false`。
- en: 'To quickly get these tests to pass, you could do something like:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速让这些测试通过，你可以做些类似的事情：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This could potentially introduce unexpected results, so be sure to create some
    guard tests to verify correctness.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会引入意外的结果，所以务必创建一些保护测试来验证正确性。
- en: This explains why this bug wasn't initially caught. The `IsActive` property
    was added to the database with a default value of `true`. The bug wasn't discovered
    until new speakers were added to the database with a value of `false` in the `IsActive`
    column. Once the incorrect behavior was discovered, the defect was easily identified
    and remedied.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了为什么这个错误最初没有被捕捉到。`IsActive`属性被添加到数据库中，默认值为`true`。直到新演讲者被添加到数据库中，`IsActive`列的值为`false`时，错误才被发现。一旦发现了不正确的行为，缺陷就很容易被识别和修复。
- en: Changes to the front-end
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端更改
- en: There is no difference, from a concept or approach perspective, for changes
    to the front-end. You will need to write the appropriate test to ensure the desired
    behavior from the application and then write the production code to make the test
    pass.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念或方法的角度来看，前端更改没有区别。你需要编写适当的测试来确保应用程序期望的行为，然后编写生产代码以使测试通过。
- en: As a quick example though, let's add a new feature to the front-end code we
    have been working on.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，让我们以一个快速示例为例，为我们在前端代码中添加一个新功能。
- en: Sorted by rating on client side
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按客户端评分排序
- en: The feature we are going to add is sorting the speakers by rating. In previous
    chapters, rating was not discussed or even enforced, so modifications will need
    to happen to include rating in the model that has been built so far. That is,
    of course, if you have not already completed the full model as defined by the
    C# code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要添加的功能是按评分对演讲者进行排序。在之前的章节中，评分并未讨论过，甚至没有强制执行，因此需要对迄今为止构建的模型进行修改，以包含评分。当然，如果你还没有按照C#代码定义完成整个模型，那就需要这样做。
- en: As with earlier examples in this chapter, try to add this behavior yourself
    and then look at our following solution .
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本章前面的例子一样，尝试自己添加这种行为，然后看看我们的后续解决方案。
- en: 'In the `speakerReducer.spec.js` file, we have added a single test for default
    sorting of speakers by rank. The test can be added to the describe block for the
    speaker reducer:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`speakerReducer.spec.js`文件中，我们为默认按排名排序演讲者添加了一个单一测试。该测试可以添加到演讲者还原器的describe块中：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And the code to make this test pass is in the `speakerReducer.js` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使这个测试通过的相关代码位于`speakerReducer.js`文件中：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What now?
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，接下来该做什么呢？
- en: Moving forward, it should be easy to implement any change necessary. This might
    include a new feature, a change in requirements, or a discovered defect. That
    isn't to say that the application is complete or error-free, but you should have
    some level of confidence that the application behaves in the ways accounted for
    with the existing test suite.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 今后，实施任何必要的变更都应该很容易。这可能包括新功能、需求变更或发现的缺陷。这并不是说应用程序已经完成或没有错误，但你应该对应用程序以现有测试套件所考虑的方式运行有一定的信心。
- en: Premature optimization
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过早优化
- en: For the purpose of clarification, we are defining optimization as anything that
    obfuscates the code, making it less clear or more difficult to understand, or
    anything that limits the possibilities further than the test requires. A premature
    optimization is an optimization that is done for any reason other than specified
    by a requirement.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清，我们将优化定义为任何使代码变得模糊、使其更难以理解或限制了测试要求之外的可能性的事情。过早优化是指出于任何非要求原因进行的优化。
- en: Typically, optimizations are done using performance as an excuse. Before these
    types of modifications of the code are done, a requirement specifying the need
    for the change should exist.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，优化工作是以性能为由进行的。在进行这些代码修改之前，应该存在一个明确说明需要变更的要求。
- en: Even through the practice of Test-Driven Development, it is possible to paint
    yourself into a corner. Often during refactoring or during the process of designing
    your next test, it is possible to solve too much of the problem at once or refactor
    too much.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是通过测试驱动开发（Test-Driven Development）的实践，也有可能把自己逼入死角。在重构或设计下一个测试的过程中，有时可能会一次性解决太多问题，或者重构得过多。
- en: Always keep in mind that, in TDD, we want to break a problem down into the smallest
    steps possible. Also, don't go for the solution in the first test if the solution
    is more than a line or two. At the same time, even for small solutions, if the
    solution is calculation or algorithm heavy, it should still be broken down, even
    if the eventual solution is a single line of production code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 总要记住，在TDD中，我们希望将问题分解成尽可能小的步骤。此外，如果解决方案超过一行或两行，不要在第一个测试中就追求解决方案。同时，即使是小解决方案，如果解决方案计算或算法密集，也应该分解，即使最终的解决方案只是一行生产代码。
- en: Beware of premature optimizations.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕过早优化。
- en: Refactoring, according to Kent Beck, is the process of removing duplication.
    Remember that while refactoring your tests. By only removing duplication, we can
    avoid premature optimization via refactoring. It is completely possible, and even
    attractive at times, to refactor a solution and reduce the code significantly,
    or even to use a fancy new language feature or Linq expression to make your test
    pass. These solutions are fine in the long run, but while the tests are still
    being built, these hidden optimizations can cause you and your tests to become
    derailed extremely quickly.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Kent Beck的说法，重构是去除重复的过程。记住，在重构测试时。仅通过去除重复，我们可以通过重构避免过早优化。有时重构解决方案并显著减少代码量，或者甚至使用一些花哨的新语言特性或Linq表达式来使测试通过，这是完全可能的，甚至在某些情况下是有吸引力的。但这些解决方案从长远来看是可行的，但在测试仍在构建的过程中，这些隐藏的优化可能会让你和你的测试迅速偏离轨道。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You can now see how a change in requirements, a new feature request, or a defect
    might require an application to change. Through TDD and a comprehensive suite
    of unit tests, these changes can be made safely and easily.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以看到，需求的变更、新的功能请求或缺陷可能需要应用程序进行更改。通过测试驱动开发（TDD）和一套全面的单元测试，这些更改可以安全且容易地进行。
- en: In [Chapter 12](part0386.html#BG3P40-d186949d2da74f5c95dd1712efae1195), *The
    Legacy Problem*, we'll discuss how to deal with a legacy application that may
    not have been written with testing in mind.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](part0386.html#BG3P40-d186949d2da74f5c95dd1712efae1195)，“遗留问题”，我们将讨论如何处理可能没有考虑到测试的遗留应用程序。
