["```cs\n{\n    \"id\": 2,\n    \"name\": \"buick skylark 320\",\n    \"mpg\": null,\n    \"cylinders\": null,\n    \"displacement\": null,\n    \"horsepower\": null,\n    \"weight\": null,\n    \"acceleration\": null,\n    \"modelYear\": null,\n    \"origin\": null,\n    \"is_Deleted\": null,\n    \"options\": [\n        {\n            \"optionId\": 1,\n            \"optionName\": \"Winter Package\",\n            \"optionPrice\": 3700\n        },\n        {\n            \"optionId\": 2,\n            \"optionName\": \"Mats\",\n            \"optionPrice\": 250\n        },\n        {\n            \"optionId\": 3,\n            \"optionName\": \"Summer Package\",\n            \"optionPrice\": 2250\n        }\n    ]\n}\n```", "```cs\nselect top(10) * from car c join options o on o.car_id = c.id\n```", "```cs\n  public class CarFlat : Car\n  {\n      public int? car_id { get; set; }\n      public int? option_id { get; set; }\n      public string? option_name { get; set; }\n      public float option_price { get; set; }\n  }\n```", "```cs\n    public class CarDto\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Mpg { get; set; }\n        public string Cylinders { get; set; }\n        public string Displacement { get; set; }\n        public string Horsepower { get; set; }\n        public string Weight { get; set; }\n        public string Acceleration { get; set; }\n        public string ModelYear { get; set; }\n        public string Origin { get; set; }\n        public string Is_Deleted { get; set; }\n        public List<OptionsDto> Options { get; set; }\n    }\n```", "```cs\n    public class OptionsDto\n    {\n        public int OptionId { get; set; }\n        public string OptionName { get; set; }\n        public float OptionPrice { get; set; }\n    }\n```", "```cs\nCreateMap<CarDto, Car>()\n    .ForMember(car => car.id, opt => opt.MapFrom(carDto => carDto.Id))\n    .ForMember(car => car.name, opt => opt.MapFrom(carDto => carDto.\n    Name))\n    .ForMember(car => car.mpg, opt => opt.MapFrom(carDto => carDto.\n    Mpg))\n    .ForMember(car => car.cylinders, opt => opt.MapFrom(carDto => \n    carDto.Cylinders))\n    .ForMember(car => car.displacement, opt => opt.MapFrom(carDto => \n    carDto.Displacement))\n    .ForMember(car => car.horsepower, opt => opt.MapFrom(carDto => \n    carDto.Horsepower))\n    .ForMember(car => car.weight, opt => opt.MapFrom(carDto => carDto.\n    Weight))\n    .ForMember(car => car.acceleration, opt => opt.MapFrom(carDto => \n    carDto.Acceleration))\n    .ForMember(car => car.model_year, opt => opt.MapFrom(carDto => \n    carDto.ModelYear))\n    .ForMember(car => car.origin, opt => opt.MapFrom(carDto => carDto.\n    Origin))\n    .ReverseMap();\n```", "```cs\nCreateMap<List<CarFlat>, CarDto>()\n     .ForPath(dest => dest.Id, opt => opt.MapFrom(src => src.First().\n     id))\n     .ForPath(dest => dest.Name, opt => opt.MapFrom(src => src.\n     First().name))\n     .ForMember(dest => dest.Options, opt => opt.MapFrom(src => src));\nCreateMap<OptionsDto, CarFlat>()\n     .ForMember(dest => dest.option_id, opt => opt.MapFrom(src => src.\n     OptionId))\n     .ForMember(dest => dest.option_name, opt => opt.MapFrom(src => \n     src.OptionName))\n     .ForMember(dest => dest.option_price, opt => opt.MapFrom(src => \n     src.OptionPrice))\n```", "```cs\n       [HttpGet(\"{id}\")]\n       public async Task<ActionResult<CarDto>> Get(int id)\n       {\n           var car = await _carService.Get(id);\n           if (car == null)\n           {\n               return NotFound();\n           }\n           var carDto = _mapper.Map<CarDto>(car);\n           return carDto;\n       }\n```", "```cs\npublic async Task<List<CarFlat>> Get(int id)\n {\n     if (id == 0)\n     {\n         throw new Exception(\"Invalid Id\");\n     }\n     return await _carRepository.Get(id);\n }\n```", "```cs\npublic async Task<List<CarFlat?>> Get(int id)\n {\n     var query = \"select * from car c left join options o on o.car_id \n     = c.id where c.id = @id\";\n     using var db = databaseConnectionFactory.GetConnection();\n     return (await db.QueryAsync<CarFlat>(query, new {id})).ToList();\n }\n```", "```cs\n{\n    \"id\": 2,\n    \"name\": \"buick skylark 320\",\n    \"mpg\": null,\n    \"cylinders\": null,\n    \"displacement\": null,\n    \"horsepower\": null,\n    \"weight\": null,\n    \"acceleration\": null,\n    \"modelYear\": null,\n    \"origin\": null,\n    \"is_Deleted\": null,\n    \"options\": [\n        {\n            \"optionId\": 1,\n            \"optionName\": \"Winter Package\",\n            \"optionPrice\": 3700\n        },\n        {\n            \"optionId\": 2,\n            \"optionName\": \"Mats\",\n            \"optionPrice\": 250\n        },\n        {\n            \"optionId\": 3,\n            \"optionName\": \"Summer Package\",\n            \"optionPrice\": 2250\n        }\n    ]\n}\n```", "```cs\npublic class Program\n {\n     static void Main(string[] args)\n     {\n         Console.WriteLine(\"Loading...\");\n         for(; ; )\n         {\n             ThrowException();\n         }\n     }\n```", "```cs\ntry\n{\n    Random rand = new Random();\n    var random = rand.Next(0, 10);\n    switch (random)\n    {\n        case 0:\n            throw new ArgumentException(\"Argument Exception\");\n        case 1:\n            throw new ArgumentNullException(\"Argument Null \n            Exception\");\n        case 2:\n            throw new ArgumentOutOfRangeException(\"Argument Out Of \n            Range Exception\");\n        case 3:\n            throw new DivideByZeroException(\"Divide By Zero \n            Exception\");\n        case 4:\n            throw new FileNotFoundException(\"File Not Found \n            Exception\");\n        case 5:\n            throw new FormatException(\"Format Exception\");\n        case 6:\n            throw new IndexOutOfRangeException(\"Index Out Of Range \n            Exception\");\n        case 7:\n            throw new InvalidOperationException(\"Invalid Operation \n            Exception\");\n        case 8:\n            throw new KeyNotFoundException(\"Key Not Found Exception\");\n        case 9:\n            throw new NotImplementedException(\"Not Implemented \n            Exception\");\n        case 10:\n            throw new NotSupportedException(\"Not Supported \n            Exception\");\n        default:\n            throw new Exception(\"Generic Exception - you should never \n            see this\");\n    }\n}\n```", "```cs\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.Message);\n    TableModel entity = new TableModel\n    {\n        PartitionKey = ex.GetType().Name,\n        RowKey = $\"TableStorageConsoleApp-{DateTime.UtcNow.\n        ToString(\"yyyy-MM-ddTHH:mm:ss.fffffffZ\")}\",\n        Message = ex.Message,\n        Timestamp = DateTimeOffset.UtcNow\n    };\n    TableServiceClient tableServiceClient = new \n    TableServiceClient(\"DefaultEndpointsProtocol=\n    https;AccountName=<your account name>;AccountKey=\n    <your account key>;EndpointSuffix=core.windows.net\");\n    var storageTableService = new \n    StorageTableService(tableServiceClient);\n    storageTableService.UpsertEntityAsync(entity).Wait();\n    Thread.Sleep(2000);\n}\n```", "```cs\npublic class TableModel : ITableEntity\n {\n     required public string PartitionKey { get; set; }\n     required public string RowKey { get; set; }\n     public DateTimeOffset? Timestamp { get; set; }\n     public string? Message { get; set; }\n     public ETag ETag { get; set; } = ETag.All;\n }\n```", "```cs\npublic async Task<Response> UpsertEntityAsync(TableModel entity)\n{\n     var response = await _tableCreationTask;\n     var table = _tableServiceClient.GetTableClient(response.Value.\n     Name);\n     return await table.UpsertEntityAsync(entity);\n}\n```", "```cs\nprivate readonly TableServiceClient _tableServiceClient;\nprivate readonly Task<Response<TableItem>> _tableCreationTask;\n```", "```cs\npublic StorageTableService(TableServiceClient tableServiceClient)\n{\n     _tableServiceClient = tableServiceClient;\n     _tableCreationTask = _tableServiceClient.\n     CreateTableIfNotExistsAsync(\"ExceptionsTable\");\n}\n```", "```cs\ngit clone https://github.com/MicrosoftDocs/mslearn-dotnet-cloudnative-devops.git eShopLite\n```", "```cs\n    builder.AddProject<Projects.Store>(\"store\");\n    ```", "```cs\n    builder.AddProject<Projects.Products>(\"Products\");\n    ```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar Products = builder.AddProject<Projects.Products>(\"Products\");\nbuilder.AddProject<Projects.Store>(\"store\")\n       .WithExternalHttpEndpoints()\n       .WithReference(Products);\nbuilder.Build().Run();\n```", "```cs\n{\n  \"DetailedErrors\": true,\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ProductEndpoint\": \"http://Products\",\n  \"ProductEndpointHttps\": \"https://Products\"\n}\n```", "```cs\n{\n    \"statePostalCode\": MA,\n    \"name\": \"Massachusetts\",\n    \"capital\": Boston,\n    \"cities\": [\n        {\n            \"city\" : \"Worchester\",\n            \"longitude\": \"100.01.93\",\n            \"latitude\": -907-45-33\n        },\n        {\n            \"city\": Acton,\n            \"longitude\": \"100.01.107\",\n            \"latitude\": -10-398-405\n        },\n    ]\n}\n```"]