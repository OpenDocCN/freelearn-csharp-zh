["```cs\nclass Class\n{\n  // Error CS0106: The modifier 'async' is not valid for this item\n  async int field;\n\n  // Error CS0106: The modifier 'readonly' is not valid for this item               \n  readonly static void M()         \n  {\n    // Error CS0106: The modifier 'readonly' is not valid for this item\n    readonly int local = 0;        \n    System.Console.WriteLine(local);\n  }\n}\n\n```", "```cs\nclass Class\n{\n  static void M(readonly int param)\n  {\n  }\n}\n\n```", "```cs\ndefault:\n  return IsPredefinedType(this.CurrentToken.Kind) || GetModifier(this.CurrentToken) != SyntaxModifier.None;\n\n```", "```cs\nwhile (true)\n{\n  if (!IsParameterModifier(this.CurrentToken.Kind, allowThisKeyword))\n  {\n    if (GetModifier(this.CurrentToken) != SyntaxModifier.None)\n    {\n      // Misplaced modifier\n      var misplacedModifier = this.EatToken();\n      misplacedModifier = this.AddError(misplacedModifier, ErrorCode.ERR_BadMemberFlag, misplacedModifier.Text);\n      modifiers.Add(misplacedModifier);\n      continue;\n    }\n\n    break;\n  }\n  ...\n\n```", "```cs\nclass Class\n{\n  static void M(readonly int param)\n  {\n  }\n}\n\n```", "```cs\ndefault:\n return IsPredefinedType(this.CurrentToken.Kind) || GetModifier(this.CurrentToken) != SyntaxModifier.None;\n\n```", "```cs\nclass Class\n{\n  int X { get; set; }\n\n  void M(int x)\n  {\n    // Warning CS1717 Assignment made to same variable; did you mean to \n    //assign something else?\n    X = X;     \n\n    // Warning CS0823 Use an explicit type for declaration as the \n    //initializer type 'string' is not apparent due to conversions\n    var y = x + \"\" ; \n  }\n}\n\n```", "```cs\n<data name=\"WRN_ImplicitlyTypedVariableNotRecommended\" xml:space=\"preserve\">\n  <value>\n    Use an explicit type for declaration as the initializer type '{0}' is not apparent due to conversions\n  </value>\n</data>\n\n<data name=\"WRN_ImplicitlyTypedVariableNotRecommended_Title\" xml:space=\"preserve\">\n  <value>\n    Use an explicit type for declaration as the initializer type is not apparent due to conversions\n  </value>\n</data>\n\n```", "```cs\nif (expression.Kind == BoundKind.BinaryOperator)\n{\n  var binaryOperation = (BoundBinaryOperator)expression;\n  if (!binaryOperation.Left.GetConversion().IsIdentity || !binaryOperation.Right.GetConversion().IsIdentity)\n  {\n    // Use an explicit type for declaration as the initializer type '{0}' is \n    //not apparent due to conversions.\n    Error(diagnostics, ErrorCode.WRN_ImplicitlyTypedVariableNotRecommended, errorSyntax, expression.Display);\n  }\n}\n\n```", "```cs\ncase BoundKind.PropertyAccess:\n  var prop1 = expr1 as BoundPropertyAccess;\n  var prop2 = expr2 as BoundPropertyAccess;\n  return prop1.PropertySymbol == prop2.PropertySymbol &&\n  (prop1.PropertySymbol.IsStatic || IsSameLocalOrField(prop1.ReceiverOpt, prop2.ReceiverOpt));\n\n```", "```cs\nclass Class\n{\n  int X { get; set; }\n\n  void M(int x)\n  {\n    X = X;\n    var y = x + \"\" ;\n  }\n}\n\n```", "```cs\n[Fact]\npublic void VarInferredTypeNotApparent()\n{\n  var source = @\"\n  class Class\n  {\n    void M(int x, string y)\n    {\n      var z = x + y;\n    }\n  }\";\n\n  CreateCompilationWithMscorlib(source).VerifyDiagnostics();\n}\n\n```", "```cs\n*<%USERS_FOLDER%>*\\.nuget\\packages\\xunit.runner.console\\2.2.0-beta4-build3444\\tools\\xunit.console.x86.exe \"*<%ROOT%>*\\Binaries\\Debug\\UnitTests\\CSharpCompilerSemanticTest\\Roslyn.Compilers.CSharp.Semantic.UnitTests.dll\" -html \"C:\\roslyn\\Binaries\\Debug\\UnitTests\\CSharpCompilerSemanticTest\\xUnitResults\\Roslyn.Compilers.CSharp.Semantic.UnitTests.html\" -noshadow -method Microsoft.CodeAnalysis.CSharp.UnitTests.ImplicitlyTypedLocalTests.VarInferredTypeNotApparent\n\n```", "```cs\nExpected:\nActual:\n // (6,7): warning CS0823: Use an explicit type for declaration as the initializer type 'string' is not apparent due to conversions\n // var z = x + y;\n Diagnostic(ErrorCode.WRN_ImplicitlyTypedVariableNotRecommended, \"z = x + y\").WithArguments(\"string\").WithLocation(6, 7)\n\nDiff:\n ++> Diagnostic(ErrorCode.WRN_ImplicitlyTypedVariableNotRecommended, \"z = x + y\").WithArguments(\"string\").WithLocation(6, 7)\n\n```", "```cs\n[Fact]\npublic void VarInferredTypeApparent_NoDiagnostic()\n{\n  var source = @\"\n  class Class\n  {\n    void M(int x, string y)\n    {\n      var z = (string)(x + y);\n    }\n  }\";\n\n  CreateCompilationWithMscorlib(source).VerifyDiagnostics();\n}\n\n```", "```cs\npublic void Method()\n{\n  Console.WriteLine(\"Hello world!\");\n}\n\n```", "```cs\nPublic Sub Method()\n  Console.Write(\"Hello World!\")\nEnd Sub\n\n```"]