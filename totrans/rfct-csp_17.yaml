- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Agile Refactoring
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷重构
- en: In this final chapter, we’ll talk about refactoring as part of an *agile* team,
    succeeding with larger refactoring efforts, recovering when things go wrong, and
    incorporating deployment strategies to help make sure they don’t go wrong again.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将讨论重构作为敏捷团队的一部分，成功进行大规模的重构工作，在事情出错时进行恢复，并纳入部署策略以确保它们不会再次出错。
- en: It’s possible to win many small refactoring battles with small pieces of offending
    code but lose the overall “war” when you can’t address large-scale design issues.
    This chapter explores how to continue to fight and win the smaller refactoring
    battles with your code from sprint to sprint. We will also cover the larger strategic
    battle of making sure your application has the right design – and correct it to
    something better when it doesn’t.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以通过处理小块有问题的代码赢得许多小的重构战役，但如果你无法解决大规模的设计问题，你可能会输掉整体的“战争”。本章探讨了如何从冲刺到冲刺，继续与你的代码进行小的重构战役并取得胜利。我们还将涵盖确保你的应用程序具有正确设计的大规模战略战役——并在它不正确时将其纠正为更好的设计。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Refactoring in an agile environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷环境中的重构
- en: Succeeding with agile refactoring strategies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过敏捷重构策略取得成功
- en: Accomplishing large-scale refactorings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成大规模重构
- en: Recovering when refactoring goes wrong
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构出错时的恢复
- en: Deploying large-scale refactorings
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署大规模重构
- en: Refactoring in an agile environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷环境中的重构
- en: Almost all development teams I work with use some form of **agile software development**
    to manage work over time in the form of short sprints, including any refactoring
    work.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎我合作的所有开发团队都使用某种形式的**敏捷软件开发**来管理以短期冲刺形式进行的工作，包括任何重构工作。
- en: In this section, we’ll cover the basics of agile workflows and how refactoring
    can fit into this type of environment. This is important because if refactoring
    work can’t fit into an agile workflow, refactoring simply won’t happen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍敏捷工作流程的基本知识以及重构如何适应这种环境。这很重要，因为如果重构工作无法适应敏捷工作流程，那么重构就不会发生。
- en: Key elements of agile teams
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷团队的关键要素
- en: 'Agile software development was officially codified in the *Manifesto for Agile
    Software Development* (commonly called the *Agile Manifesto*) and flows from the
    following core preferences:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷软件开发在**敏捷软件开发宣言**（通常称为**敏捷宣言**）中正式编纂，并源于以下核心偏好：
- en: '**Individuals and interactions** over processes and tools'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人和交互** 胜过流程和工具'
- en: '**Working software** over comprehensive documentation'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作软件** 胜过详尽的文档'
- en: '**Customer collaboration** over contract negotiation'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户协作** 胜过合同谈判'
- en: '**Responding to change** over following a plan'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应变化** 胜过遵循计划'
- en: 'Following these guiding principles, the exact “flavor” of agile differs from
    team to team, but most teams adopt the following key components:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些指导原则，敏捷的确切“风味”因团队而异，但大多数团队采用以下关键组件：
- en: '**Sprints**: Work is conducted during fixed-duration periods called sprints.
    These range anywhere from 1 to 4 weeks, but 2 weeks is the norm.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冲刺**：在固定时间段的冲刺期间进行工作。这些冲刺的时间从 1 到 4 周不等，但通常为 2 周。'
- en: '**User stories**: Work is tracked in the form of work items or user stories.
    Many teams require that any code change be associated with at least one work item.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户故事**：工作以工作项或用户故事的形式跟踪。许多团队要求任何代码更改至少与一个工作项相关联。'
- en: '**Backlogs**: The work for each sprint is taken from a prioritized backlog
    of user stories the team has previously reviewed and refined.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待办事项**：每个冲刺的工作来自团队之前审查和细化的优先级待办事项中的用户故事。'
- en: The exact details, roles, and names of things may vary from organization to
    organization, but these truths generally apply.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 具体的细节、角色和名称可能因组织而异，但这些真理通常适用。
- en: 'This process creates an iterative and cyclical process where the team works
    on the work items the business considers the most important in one sprint while
    prioritizing and refining items for the following sprint, as shown in *Figure
    17**.1*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程创建了一个迭代和循环的过程，其中团队在一个冲刺中处理业务认为最重要的工作项，同时优先考虑和细化下一个冲刺的项目，如图 *图 17.1* 所示：
- en: '![Figure 17.1 – The cycle of agile software development](img/B21324_17_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.1 – 敏捷软件开发周期](img/B21324_17_01.jpg)'
- en: Figure 17.1 – The cycle of agile software development
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.1 – 敏捷软件开发周期
- en: Agile is currently the best methodology we’ve found for software engineering
    in a business setting, but it does pose some unique obstacles to refactoring.
    See the *Further reading* section at the end of this chapter for additional resources
    on agile.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发目前是我们发现的最佳企业级软件开发方法论，但它确实在重构方面带来了一些独特的挑战。请参阅本章末尾的*进一步阅读*部分，以获取有关敏捷的更多资源。
- en: Understanding obstacles to refactoring
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解重构的障碍
- en: Agile is good for getting teams working on items that are important to the business
    and working through a prioritized backlog. Unfortunately, agile may not be the
    best development modality for proactive refactoring work.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发有利于团队专注于对业务重要的事项，并处理优先级较高的待办事项列表。不幸的是，敏捷可能不是主动重构工作的最佳开发模式。
- en: Most organizations require all code changes to be associated with at least one
    user story and developers are expected to be working on user stories when they
    have spare capacity.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织要求所有代码更改至少与一个用户故事相关联，并且当开发者有额外容量时，预期他们正在处理用户故事。
- en: This leaves engineers in a conundrum where they know the areas of code that
    need to be refactored and have the technical skills and knowledge to refactor
    them, yet it is not acceptable within the boundaries of their teams for them to
    proactively improve code outside the bounds of an assigned user story.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这让工程师陷入了两难境地，他们知道需要重构的代码区域，并且拥有重构它们的技术技能和知识，但在他们团队的边界内，主动改进代码是不被接受的。
- en: This causes technical debt to pile up and eventually decays the team’s velocity
    by slowing down work items. This also results in a greater number of bugs being
    introduced because the team has not been allowed to proactively manage the risk
    inherent in their legacy code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致技术债务累积，并最终通过减缓工作项来降低团队的速度。这也导致引入了更多的错误，因为团队没有被允许积极管理其遗留代码中固有的风险。
- en: This isn’t to say that agile is bad. Agile is the best process we’ve found so
    far to manage work in software engineering teams; however, it has some limitations
    that must be solved to help organizations achieve both short-term and long-term
    success.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说敏捷不好。敏捷是我们迄今为止发现的最佳软件工程团队管理工作流程；然而，它有一些限制，必须解决这些问题，以帮助组织实现短期和长期的成功。
- en: Succeeding with agile refactoring strategies
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成功实施敏捷重构策略
- en: Ongoing refactoring is important in an agile environment, so let’s talk about
    some ways of making sure code gets refactored regularly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷环境中，持续的重构很重要，所以让我们谈谈确保代码定期重构的一些方法。
- en: Dedicated work items for refactoring efforts
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专门的工作项用于重构努力
- en: Remember that every line of code you and your team write should deliver business
    value, including your refactoring efforts.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你和你的团队编写的每一行代码都应该带来商业价值，包括你的重构努力。
- en: Refactoring focuses on delivering value to the business by addressing known
    areas of technical risk and improving the speed the team can achieve in the future
    on related work in the targeted area.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重构专注于通过解决已知的技术风险和改善团队在未来相关领域工作中实现的速度来为业务带来价值。
- en: Given these facts, it makes sense that refactoring efforts should be represented
    inside a sprint as user stories. Just as one developer might get a user story
    about integrating with a new external system for a partner, another developer
    might get a user story to refactor and establish additional tests around the data
    access layer.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些事实，将重构努力表示为冲刺中的用户故事是有意义的。就像一个开发者可能会得到一个关于与合作伙伴的新外部系统集成的故事一样，另一个开发者可能会得到一个重构和围绕数据访问层建立额外测试的故事。
- en: 'In [*Chapter 15*](B21324_15.xhtml#_idTextAnchor316), we discussed tracking
    technical debt in a risk register. I didn’t make it explicit in that chapter,
    but you can use the same system that tracks your user stories to track your known
    technical risks as a specialized type of user story, such as the one shown in
    *Figure 17**.2*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第15章*](B21324_15.xhtml#_idTextAnchor316)中，我们讨论了在风险登记册中跟踪技术债务。在那个章节中，我没有明确指出，但你可以使用跟踪你的用户故事的相同系统来跟踪你的已知技术风险，作为一种特殊类型的用户故事，如图*17.2*所示：
- en: '![Figure 17.2 – A technical debt item in Azure DevOps](img/B21324_17_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图17.2 – Azure DevOps中的技术债务项](img/B21324_17_02.jpg)'
- en: Figure 17.2 – A technical debt item in Azure DevOps
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2 – Azure DevOps中的技术债务项
- en: These technical debt user stories should look just like normal user stories
    and have the same degree of polish and refinement. However, these user stories
    should have a different type or a property with a different value so that you
    can identify technical debt items in your backlog and sprints.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术债务用户故事应该看起来就像普通用户故事，并且具有相同的打磨和精炼程度。然而，这些用户故事应该有不同的类型或属性，具有不同的值，以便您可以在您的待办事项和冲刺中识别技术债务项。
- en: Additionally, it should be the responsibility of the developers on the team
    to write up these technical debt items and not the product owner, though the team
    will still need to walk the product owner through what the item is, the rough
    amount of effort needed to remediate it, and the risk the change is looking to
    resolve.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，编写这些技术债务项的责任应该由团队的开发者承担，而不是产品负责人，尽管团队仍然需要向产品负责人解释这个项目是什么，修复它所需的粗略工作量，以及这个变化试图解决的风险。
- en: Healthy agile teams should take a mixture of short-term and long-term items,
    with technical debt items typically falling in the long-term bucket.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 健康的敏捷团队应该采取短期和长期项目的混合，技术债务项目通常属于长期项目。
- en: There may be times when you cannot do anything but short-term work and there
    may be times when you work with a product owner that doesn’t understand the risk
    present in your technical debt. The suggestions from [*Chapter 15*](B21324_15.xhtml#_idTextAnchor316)
    may help with this, but sometimes, there won’t be an easy answer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有时候你只能做短期工作，也可能会有时候你与一个不理解你技术债务风险的产品负责人合作。[*第15章*](B21324_15.xhtml#_idTextAnchor316)中的建议可能有助于解决这个问题，但有时可能没有简单的答案。
- en: In these times, you may need to shift to a strategy of refactoring any code
    that changes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些时候，你可能需要转向重构任何变化代码的策略。
- en: Refactoring code as it changes
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随着代码变化重构代码
- en: Most of the technical debt I’ve addressed over my career has come from the conscious
    decision to refactor any code I touch.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我处理的大部分技术债务都来自于有意识地决定重构我接触到的任何代码。
- en: 'This approach of refactoring code that changes has several key benefits:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种重构变化代码的方法有几个关键优势：
- en: It ensures the areas that are changed most frequently get refactored.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保最频繁更改的区域得到重构。
- en: Since I’m working in that area anyway, I know I will be testing the code in
    question. This means that these testing efforts will help catch any issues that
    might be addressed as part of refactoring.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我正在那个区域工作，我知道我将测试相关的代码。这意味着这些测试工作将有助于捕捉到作为重构一部分可能解决的问题。
- en: It does not require the overhead of separate user stories for small, trivial
    refactoring efforts.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这不需要为小型、琐碎的重构工作创建单独的用户故事。
- en: In my experience, making it part of your policy to clean up and test the code
    around the areas you touch results in a much cleaner codebase over time.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的经验中，将清理和测试你接触到的区域的代码作为你的政策，随着时间的推移将导致代码库变得更加干净。
- en: 'This approach has its limitations: when you are making a minor change in one
    area of code and the code needs serious refactoring efforts, it is typically irresponsible
    to expand the scope of your work item beyond a certain point.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有其局限性：当你在一个代码区域进行微小更改且代码需要严肃的重构努力时，通常是不负责任地将你的工作范围扩展到一定程度之外。
- en: Additionally, some refactoring efforts cannot be achieved within the context
    of a single sprint and need more strategic thought and planning behind them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些重构工作无法在单个冲刺的背景下完成，需要更多的战略思考和规划。
- en: Refactoring sprints
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构冲刺
- en: One concept I’ve encountered once or twice has been the idea of a **refactoring
    sprint**. A refactoring sprint follows the mentality of crop rotation in farming.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经一两次遇到过一种**重构冲刺**的概念。重构冲刺遵循农业中轮作的心态。
- en: I’m no farmer, but my understanding of crop rotation is that you can use a field
    for several seasons, but over time, that field starts to lose the nutrient values
    from the soil and becomes less productive as years go on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是农民，但我对轮作的理解是，你可以使用一个田地几个季节，但时间久了，那个田地开始失去土壤中的养分价值，随着时间的推移变得不那么肥沃。
- en: 'To combat this, farmers learned to leave these fields fallow and not grow anything
    in them for a time, as shown in *Figure 17**.3*:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这种情况，农民学会了让这些田地休耕，并在一段时间内不种植任何作物，如图*图17.3*所示：
- en: '![Figure 17.3 – Rotating crops over several years](img/B21324_17_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图17.3 – 多年轮作作物](img/B21324_17_03.jpg)'
- en: Figure 17.3 – Rotating crops over several years
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3 – 多年轮作作物
- en: Applied to agile development, you might spend several sprints working on normal
    work items, but after a handful of sprints, you introduce a refactoring sprint
    where the team’s effort goes into refactoring the areas of code that concern the
    team the most.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷开发中，你可能会花几个冲刺的时间处理正常的工作项，但在几个冲刺之后，你引入一个重构冲刺，团队的努力将集中在最关心代码区域的重构上。
- en: In refactoring sprints, the development team can take on larger-scale efforts
    than they might otherwise try as part of a standard sprint.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在重构冲刺中，开发团队能够承担比标准冲刺中可能尝试的更大规模的工作。
- en: This also has the side effect of re-energizing your developers and getting them
    ready for another sequence of sprints around a key long-term business objective.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有助于重新激发开发者的活力，并为他们准备围绕关键长期业务目标的下一系列冲刺。
- en: In practicality, I’m not sure how well these sprints work regularly, but I’ve
    seen teams benefit from them tremendously in special scenarios. These refactoring
    sprints can be used to tackle larger problems or as a way of recharging the team
    after a major initiative is completed. I’ve also seen these sprints used as a
    way of keeping the team engaged during holiday seasons.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，我不确定这些冲刺是否能够定期有效地工作，但我看到在特殊情况下，团队从这些冲刺中获得了巨大的益处。这些重构冲刺可以用来解决更大的问题，或者在完成一项重大举措后作为团队充电的方式。我也看到这些冲刺被用作在假日季节保持团队参与度的手段。
- en: Refactoring sabbaticals
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构休假
- en: Most teams I’ve worked with simply can’t afford to have all their developers
    work primarily on refactoring efforts, even for a single sprint.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我合作过的多数团队都无法承担所有开发者主要专注于重构工作，即使只是一个冲刺。
- en: Teams like this may want to take the idea of a refactoring sprint and scale
    it down so that it applies to just a single team member.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的团队可能希望将重构冲刺的想法缩小规模，使其仅适用于单个团队成员。
- en: I call this concept a **refactoring sabbatical**, where the developer effectively
    splits off of the team for a short time to work on a refactoring project, only
    to rejoin the larger team in the next sprint.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我把这个概念称为**重构休假**，其中开发者实际上在短时间内从团队中分离出来，专注于重构项目，然后在下一个冲刺中重新加入更大的团队。
- en: 'In a future sprint, another developer gets to spend a sprint working on refactoring
    efforts while others work on traditional work items, as shown in *Figure 17**.4*:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的冲刺中，另一位开发者有机会花一个冲刺的时间来处理重构工作，而其他人则处理传统的工作项，如图17.4所示：
- en: '![Figure 17.4 – A rotating developer sabbatical over several sprints](img/B21324_17_04.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图17.4 – 在几个冲刺中轮换的开发者休假](img/B21324_17_04.jpg)'
- en: Figure 17.4 – A rotating developer sabbatical over several sprints
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4 – 在几个冲刺中轮换的开发者休假
- en: Under this model, the refactoring efforts the developer wants to take on should
    be pre-approved, reviewed, and tested by other developers on the team.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型下，开发者想要承担的重构工作应该事先获得批准，并由团队中的其他开发者进行审查和测试。
- en: The developer on “sabbatical” should still be available for questions and work
    on emergency items. The only major change is that their work for a sprint is self-directed
    toward known refactoring goals.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在“休假”期间的开发者仍然应该能够回答问题并处理紧急事项。唯一的主要变化是他们在一个冲刺中的工作将自我导向，以实现已知的重构目标。
- en: This has some of the same morale-boosting effects as a refactoring sprint but
    on a smaller scale. This also helps prevent teams from over-relying on any one
    person on the team, because people rotate into and out of sabbaticals frequently.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这与重构冲刺的一些相同的士气提升效果相似，但规模较小。这也帮助团队避免过度依赖团队中的任何一个人，因为人们经常轮流进入和退出休假。
- en: While this model may see success in small and medium-sized refactorings, it
    is less effective in large-scale refactorings. We’ll discuss ways of succeeding
    with larger refactorings next.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个模型在小规模和中等规模的重构中可能取得成功，但在大规模重构中效果较差。我们将在下一节讨论成功进行大规模重构的方法。
- en: Accomplishing large-scale refactorings
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成大规模重构
- en: In my experience, successfully performing large-scale refactorings is one of
    the hardest challenges in all of software engineering.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，成功执行大规模重构是软件工程中最具挑战性的任务之一。
- en: I define large-scale refactoring as something on the scale of replacing an application
    or a major architectural layer of an application. Moving an application from one
    database technology to another, replacing a REST API with a gRPC API, upgrading
    from Web Forms to Blazor, or replacing your entire service layer are all examples
    of this.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我将大规模重构定义为替换应用程序或应用程序的主要架构层。将应用程序从一个数据库技术迁移到另一个，用gRPC API替换REST API，从Web表单升级到Blazor，或替换整个服务层都是这种类型的例子。
- en: Why large refactorings are difficult
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么大规模重构如此困难
- en: These projects are challenging because they typically take longer than a single
    sprint to accomplish and must meet feature parity with software that has been
    developed over the years.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目具有挑战性，因为它们通常需要比单个冲刺更长的时间才能完成，并且必须与多年来开发的软件保持功能对等。
- en: Additionally, software engineering projects are notoriously hard to accurately
    estimate, which is one of the reasons developers prefer agile software development
    over more traditional project management methodologies such as **waterfall**.
    Delays in software development projects can be difficult to predict and manifest
    in the form of unexpected technical obstacles, such as previously unknown limitations
    of other components or platforms or subtle bugs slowing development.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，软件工程项目因其难以准确估计而臭名昭著，这也是开发者更喜欢敏捷软件开发而不是更传统的项目管理方法（如**瀑布**）的原因之一。软件开发项目的延误可能难以预测，并以意外技术障碍的形式出现，例如其他组件或平台之前未知的限制或缓慢开发进程中的微妙错误。
- en: Because of these factors, large refactoring efforts are significantly harder
    to achieve than medium refactoring efforts.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些因素，大规模重构比中等重构更难实现。
- en: Once completed, the results of these efforts can be daunting to move into production
    environments as well because they represent such a large change. Later in this
    chapter, we’ll talk about a few ways of reducing this risk, but the decision to
    replace or upgrade major parts of your application is not one without quality
    risks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，这些努力的成果在转移到生产环境时可能会令人畏惧，因为它们代表了如此大的变化。在本章的后面部分，我们将讨论几种降低这种风险的方法，但决定替换或升级应用程序的主要部分并不是没有质量风险的。
- en: This problem gets even more pronounced when teams choose to completely rewrite
    or replace software projects instead of refactoring them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当团队选择完全重写或替换软件项目而不是重构它们时，这个问题变得更加明显。
- en: The rewrite trap
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重写陷阱
- en: Rewrites take all the problems of large refactoring efforts and multiply them
    by a factor of at least 10.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重写将大型重构努力的全部问题放大了至少10倍。
- en: In this scenario, you are replacing an application that has been used for some
    time and typically has a significant number of active users and established features.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你正在替换一个已经使用了一段时间的应用程序，通常拥有大量的活跃用户和既定功能。
- en: It can be a struggle to re-implement years’ worth of features while keeping
    up with production bugs and other short-term work that must happen to keep the
    business running smoothly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在保持生产中的错误和其他必须发生以保持业务顺利运行的短期工作的同时，重新实现多年的功能可能是一场斗争。
- en: When a team is actively working on a rewrite, they usually see little value
    in targeted refactorings of the current system they’re working on replacing. This
    means that if a rewrite is canceled or put on hold, the team gets no value out
    of their investment and still has a legacy system that needs to be supported.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个团队正在积极地进行重写时，他们通常认为对当前正在替换的系统进行有针对性的重构价值很小。这意味着如果重写被取消或搁置，团队将无法从他们的投资中获得任何价值，并且仍然需要支持一个遗留系统。
- en: Since software projects are hard to estimate and manage, rewrites frequently
    take much longer than you expect them to. During this time, your engineers are
    working primarily on the rewrite, which takes capacity away from other initiatives.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于软件项目难以估计和管理，重写通常比预期的要花费更长的时间。在这段时间里，你的工程师主要在从事重写工作，这从其他倡议中夺取了资源。
- en: Remember that a rewrite usually provides no intrinsic value to the business
    or the users until it is active in a production environment and people are working
    with it live. This is why so few rewrite projects succeed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，重写通常在它活跃在生产环境并且人们实际使用它之前不会给业务或用户带来任何内在价值。这就是为什么如此少的重写项目能够成功。
- en: You can remediate this by offering early previews of a partial rewrite, but
    this is not always possible and may not be the best user experience if important
    features are not present yet in the rewrite.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过提供部分重写的早期预览来解决这个问题，但这并不总是可能的，如果重写中还没有重要功能，这可能不是最佳的用户体验。
- en: Lessons from the ship of Theseus
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提修斯之船的教训
- en: There’s a thought experiment about the Greek hero Theseus that is relevant to
    refactoring software.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个关于希腊英雄提修斯的思想实验与重构软件相关。
- en: In this thought experiment, **the ship of Theseus**, our hero, Theseus, sets
    sail on a long journey by sea. Throughout his long voyages, the crew gradually
    replaced pieces of the ship with spare materials and materials they made or found
    on their voyages. This continued for some time until there wasn’t a single piece
    of the original ship left in his ship as he returned home.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个思想实验中，我们的英雄提修斯的**提修斯之船**，提修斯本人，通过海上长途航行开始了漫长的旅程。在整个漫长的航行中，船员逐渐用备用材料以及他们在航行中制作或找到的材料替换了船上的部分部件。这种情况持续了一段时间，直到他回家时，他的船上没有一块原始船的部件。
- en: This thought experiment asks whether the ship that came home is the same, and
    if it isn’t, when did it stop being that ship?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个思想实验提出了一个问题：回家的船是否还是同一艘，如果不是，它是在什么时候停止成为那艘船的？
- en: While these are interesting philosophical questions, the concept is relevant
    to software engineering.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些问题很有趣，但这个概念与软件工程相关。
- en: Using refactoring, we can replace the “planks” of our virtual “ship” as technical
    debt takes hold in various areas. As we gradually refactor the components that
    need it the most, we continually evolve our software to stay relevant over time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用重构，我们可以在技术债务在各个领域占据主导地位时，替换我们虚拟“船”的“板”。随着我们逐渐重构最需要重构的组件，我们不断演进我们的软件，以保持其随时间的相关性。
- en: This is why I view refactoring code as you write code as a critically important
    practice in software engineering. Technical debt is an inescapable reality of
    software and you must keep it in mind with every change you make by doing what
    you can to prevent it from taking hold and paying down existing debt areas through
    refactoring.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我认为在编写代码时重构代码是软件工程中一个至关重要的实践。技术债务是软件的一个不可避免的现实，你必须每次更改时都牢记在心，通过尽可能防止其占据主导地位，并通过重构偿还现有债务区域。
- en: Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Gradual refactoring only goes so far. Progressive refactoring may help keep
    your virtual “boat” afloat, but it won’t turn a rowboat into a cruise liner or
    submarine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式重构只能走这么远。渐进式重构可能有助于保持你的虚拟“船”浮在水面上，但不会把一艘划船变成一艘游轮或潜艇。
- en: Put more clearly, refactoring won’t help you move from an antiquated technology
    to a more modern one. Let’s look at a tool that might help with that.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 更明确地说，重构不能帮助你从一个过时的技术过渡到一个更现代的技术。让我们看看可能有助于这一点的工具。
- en: Upgrading projects with.NET Upgrade Assistant
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用.NET升级助手升级项目
- en: As new versions of .NET come out and new technologies emerge within the .NET
    ecosystem, keeping up can be a challenge.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新的.NET版本推出和.NET生态系统内新技术的出现，跟上这些变化可能是一个挑战。
- en: 'To address this, Microsoft introduced **.NET Upgrade Assistant**, which helps
    you safely upgrade and modernize your applications. At the time of writing, this
    tool has been useful with projects written with the following technologies:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，微软推出了**.NET升级助手**，它可以帮助你安全地升级和现代化你的应用程序。在撰写本文时，这个工具对以下技术编写的项目很有用：
- en: '**ASP.NET**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET**'
- en: '**Universal Windows** **Platform** (**UWP**)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用Windows平台**（**UWP**）'
- en: '**Windows Communication** **Foundation** (**WCF**)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows通信基础**（**WCF**）'
- en: '**Windows Forms**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows窗体**'
- en: '**Windows Presentation** **Foundation** (**WPF**)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows表现层基础**（**WPF**）'
- en: '.NET Upgrade Assistant can be installed either as a global tool or as a Visual
    Studio extension, as shown in *Figure 17**.5*:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: .NET升级助手可以像*图17.5*所示那样作为全局工具或Visual Studio扩展安装：
- en: '![Figure 17.5 – Installing.NET Upgrade Assistant in Visual Studio](img/B21324_17_05.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图17.5 – 在Visual Studio中安装.NET升级助手](img/B21324_17_05.jpg)'
- en: Figure 17.5 – Installing.NET Upgrade Assistant in Visual Studio
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5 – 在Visual Studio中安装.NET升级助手
- en: Once the extension has been installed, you will be able to right-click on a
    project in **Solution Explorer** and choose **Upgrade**.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了扩展，你将能够在**解决方案资源管理器**中右键单击一个项目，并选择**升级**。
- en: From there, you’ll be able to configure a set of options on your project that
    will vary based on the technologies you use. You’ll also be able to configure
    the scope of the upgrade attempt and include and exclude files of your choosing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，你将能够配置项目的一组选项，这些选项将根据你使用的不同技术而有所不同。你还可以配置升级尝试的范围，并包括或排除你选择的文件。
- en: 'Once the upgrade runs, you’ll see a list of projects and files that were updated
    and see details in the log, as shown in *Figure 17**.6*:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦升级运行，你将看到更新了的项目和文件列表，并在日志中看到详细信息，如图17.6所示：
- en: '![Figure 17.6 – .NET Upgrade Assistant in action](img/B21324_17_06.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图17.6 – .NET升级助手正在运行](img/B21324_17_06.jpg)'
- en: Figure 17.6 – .NET Upgrade Assistant in action
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6 – .NET升级助手正在运行
- en: You should make sure your project is properly backed up and in source control
    before attempting an upgrade and you may need to resolve certain issues yourself,
    but this tool can be very useful for starting an upgrade in an automated manner.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试升级之前，你应该确保你的项目已经正确备份并置于源控制中，你可能需要自己解决某些问题，但这个工具对于以自动化方式开始升级非常有用。
- en: For applications that can’t be easily upgraded with .NET Upgrade Assistant,
    you may need some more creative strategies, which we’ll talk about next.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于无法使用.NET升级助手轻松升级的应用程序，你可能需要一些更具创造性的策略，我们将在下一节中讨论。
- en: Refactoring and the strangler fig pattern
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构与绞杀榕模式
- en: In 2004, Martin Folwer introduced the **strangler fig pattern** to the software
    community in a post he titled *StranglerFigApplication*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 2004年，马丁·福勒在一篇题为*StranglerFigApplication*的帖子中，将**绞杀榕模式**介绍给了软件社区。
- en: 'In this post, Martin Fowler describes how certain fig trees, such as the Banyan
    Tree pictured in *Figure 17**.7*, wrap themselves around other trees and gradually
    replace the structure of the other tree:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇帖子中，马丁·福勒描述了某些无花果树，如*图17.7*中所示，如何围绕其他树木缠绕并逐渐替换其他树木的结构：
- en: '![Figure 17.7 – Photo of a banyan tree by Ankit Bhattacharjee](img/B21324_17_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图17.7 – 安基特·巴特拉杰拍摄的无花果树照片](img/B21324_17_07.jpg)'
- en: Figure 17.7 – Photo of a banyan tree by Ankit Bhattacharjee
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7 – 安基特·巴特拉杰拍摄的无花果树照片
- en: Over time, this strangler fig assumes more and more of the structure of the
    tree and it effectively becomes a whole new tree.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，这个绞杀榕逐渐承担了越来越多的树的结构，它实际上变成了一棵全新的树。
- en: In this metaphor, the tree would be the legacy application you’re trying to
    replace while the various vines from the strangler fig represent your rewrite.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个比喻中，树代表你试图替换的遗留应用程序，而绞杀榕的各种藤蔓则代表你的重写工作。
- en: Under this model, you’re not trying to rewrite the entire application and replace
    it with a freshly rewritten application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型下，你并不是试图重写整个应用程序并用全新重写的应用程序来替换它。
- en: Instead, you take a single **vertical slice** of the application encompassing
    a core set of features and behaviors and you make a new implementation of them
    in a new technology. This might be a web page or a set of API endpoints, depending
    on what you’re writing.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你只需取应用程序的一个**垂直切片**，包括一组核心特性和行为，并在新技术中实现它们的新版本。这可能是一个网页或一组API端点，具体取决于你正在编写的内容。
- en: Once you’ve rewritten this capability in your new technology, you redirect traffic
    for that one area from the old application to the new application. This allows
    you to ship parts of your new application to users incrementally, validate things
    in production, and then take on another vertical slice of the application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在新技术中重写了这个功能，你将重定向该区域的流量从旧应用程序到新应用程序。这允许你逐步向用户发布新应用程序的部分，在生产环境中验证这些内容，然后承担应用程序的另一个垂直切片。
- en: Technical details
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 技术细节
- en: There are a few technologies that can help achieve this goal of replacing vertical
    slices of an application. Azure API Management can help direct web traffic to
    an appropriate endpoint in API Management. I’ve also seen people succeed with
    **Yet Another Reverse Proxy** (**YARP**) for these efforts. Links to both can
    be found in the *Further* *reading* section.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种技术可以帮助实现替换应用程序垂直切片的目标。Azure API管理可以帮助将网络流量引导到API管理中的适当端点。我也看到有人使用**另一个反向代理**（**YARP**）在这些工作中取得了成功。这两个链接可以在*进一步阅读*部分找到。
- en: As you expand your rewrite and validate it works, you can remove portions of
    the original application so that you no longer need to maintain them.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你重写工作的扩展和验证其有效性，你可以移除原始应用程序的部分，这样你就不需要维护它们了。
- en: For areas that your new application doesn’t support yet, you can have it link
    back to existing areas on the old application.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您的新应用程序尚未支持的区域，您可以将其链接回旧应用程序上的现有区域。
- en: 'The strangler fig approach has some key advantages compared to a full rewrite:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 与全面重写相比，**Strangler fig**方法有一些关键优势：
- en: It allows you to iteratively deliver your rewrite in stages
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许您分阶段迭代地交付您的重写
- en: It works better in an agile environment
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在敏捷环境中工作得更好
- en: It helps validate risk areas early instead of waiting for the full rewrite
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于在等待全面重写之前早期验证风险区域
- en: It allows you to remove replaced code from the original if you’d like
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您愿意，它允许您从原始代码中删除替换的代码
- en: It can be rolled out in parallel with the original as a preview
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以与原始版本并行推出作为预览
- en: Perhaps the biggest benefit of this pattern is that its success chance is significantly
    higher than attempting a total rewrite.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这个模式的最大好处是，它的成功概率比尝试全面重写要高得多。
- en: Let’s talk about what to do when refactoring isn’t as successful.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈当重构不太成功时应该做什么。
- en: Recovering when refactoring goes wrong
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当重构出错时的恢复
- en: Sometimes, despite your best efforts, refactoring efforts will fail. It may
    be due to gaps in your tests or mistaken assumptions about new technologies, but
    a certain percentage of your refactoring attempts will fail.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，尽管您尽了最大努力，重构工作仍会失败。这可能是由于测试中的差距或对新技术的错误假设，但您重构尝试中的一部分将会失败。
- en: The impact of failed refactorings
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 失败的重构的影响
- en: Failed refactorings can be both frustrating and a serious challenge to future
    refactoring work. After all, a significant barrier to refactoring is the belief
    that legacy code is so brittle that touching it will break it. When you change
    code and it breaks, you make it harder to change code in the future.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的重构既令人沮丧，也是对未来重构工作的严重挑战。毕竟，重构的一个重大障碍是认为遗留代码如此脆弱，以至于触摸它就会将其破坏。当您更改代码并使其崩溃时，您会使得未来更改代码变得更加困难。
- en: When refactoring fails, you sometimes get to make a quick patch to address the
    issue you introduced. In this case, the code is refactored and service gets restored,
    but you’ve lost some of the team’s trust.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当重构失败时，您有时可以快速修补以解决您引入的问题。在这种情况下，代码被重构，服务得到恢复，但您已经失去了一些团队的信任。
- en: Other times, failures in refactoring result in code getting rolled back to the
    previous version before you refactored it. Sometimes, you’ll get to make changes,
    add additional tests, and retry this refactoring, while other times, the team
    will decide that the refactoring is too dangerous to try again and you’ll lose
    your shot at improving the code for some time.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，重构失败会导致代码回滚到您重构之前的版本。有时，您将有机会进行更改，添加额外的测试，并重试此重构，而有时，团队将决定重构太危险了，无法再次尝试，您将失去一段时间内改进代码的机会。
- en: Ultimately, this conversation boils down to how much the business trusts you
    to not make mistakes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这次对话归结为业务对您不犯错误的信任程度。
- en: Mistakes in software development will happen because people are imperfect and
    make mistakes, assume things without realizing them, and don’t know everything.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发中的错误会发生，因为人们是不完美的，会犯错误，没有意识到就做出假设，并且不知道一切。
- en: Establishing safety in agile environments
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在敏捷环境中建立安全性
- en: What you want to do as a technologist is create an environment where mistakes
    are infrequent and can easily and safely be caught before they reach production
    environments.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 作为技术人员，您想做的事情是创建一个环境，在那里错误很少见，并且可以在它们达到生产环境之前轻松且安全地捕捉到。
- en: 'There are certain things you can do to reduce the odds of breaking software
    when refactoring:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以做一些事情来降低重构时破坏软件的概率：
- en: '**Testing**: Unit tests, manual tests, and having your peers test your code
    in a different environment can help you catch many mistakes and some assumptions.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：单元测试、手动测试以及让您的同事在不同的环境中测试您的代码可以帮助您捕捉到许多错误和一些假设。'
- en: '**Code review**: Teams that review changes before they ship to integration
    and production environments can catch bad assumptions, mistakes, and poor coding
    practices. Code review is also an opportunity for teams to share knowledge and
    techniques, as well as share knowledge of the codebase across the dev team.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码审查**：在将更改发布到集成和生产环境之前进行审查的团队可以捕捉到错误的假设、错误和糟糕的编码实践。代码审查也是团队分享知识和技巧的机会，以及在整个开发团队中共享代码库知识。'
- en: '**Code analysis**: Using the documented best practices in .NET and adhering
    to your team’s standards, as we talked about in *Part 3* of this book, can prevent
    issues the team has encountered before from recurring.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码分析**：使用我们在本书的*第3部分*中讨论的.NET中记录的最佳实践，并遵守你团队的标准，可以防止团队之前遇到的问题再次发生。'
- en: '**Automated tests**: Testing is so important I put it on here twice, but this
    time, I’m stressing that any change getting merged into a release branch needs
    to have automated tests run against it and pass before it can move on. This ensures
    that tests are reliably and repeatably run.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：测试非常重要，我把它放在这里两次，但这次我要强调的是，任何要合并到发布分支的变化都需要运行自动化测试并通过，然后才能继续。这确保了测试可以可靠和重复地运行。'
- en: '**Active monitoring**: Regular monitoring of error and warning logs can help
    you detect problems early in production and staging environments.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动监控**：定期监控错误和警告日志可以帮助你在生产环境和预发布环境中早期发现问题。'
- en: 'Be honest and transparent when an issue occurs and follow this sequence of
    steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当问题发生时，要诚实和透明，并遵循以下步骤：
- en: Confirm that the issue exists.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认问题确实存在。
- en: Understand the issue enough to resolve it.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对问题有足够的了解以解决它。
- en: Resolve the issue and restore service.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决问题并恢复服务。
- en: Determine how you could have prevented the issue from occurring.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定你是如何防止问题发生的。
- en: When you look at a bug getting past your defensive practices as a way of improving
    your processes and identifying gaps, it becomes a learning opportunity for your
    team.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将绕过你的防御性实践视为改进流程和识别差距的方法时，它就成为了你团队的学习机会。
- en: Unfortunately, these learning opportunities do come with a penalty of lost trust
    from others due to the issue.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这些学习机会确实伴随着由于问题而失去他人信任的代价。
- en: 'I’ve found that openly and honestly communicating the following things helps
    encourage understanding and somewhat heal lost trust:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现，公开和诚实地沟通以下事情有助于促进理解并一定程度上恢复失去的信任：
- en: The steps your team took to verify the item wouldn’t cause issues before release
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的团队在发布前验证项目不会引起问题的步骤。
- en: The nature of the bug and how it got past your team
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷的本质以及它是如何绕过你的团队的。
- en: What you did to resolve it and restore service
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你为解决问题和恢复服务所做的工作。
- en: What you’re doing to ensure that things like it won’t be issues in the future
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你正在做些什么来确保类似的事情在未来不会成为问题。
- en: This approach treats everyone with respect, shares understanding, provides opportunities
    for questions and suggestions, and assures them that the quality of the application
    is important to you and your team.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法尊重每个人，分享理解，提供提问和建议的机会，并确保他们知道应用程序的质量对你和你的团队来说非常重要。
- en: Before we close this chapter and this book as a whole, let’s talk about some
    helpful practices you may want to consider when deploying software.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们关闭这一章节以及整本书之前，让我们讨论一些你可能希望在部署软件时考虑的有用实践。
- en: Deploying large-scale refactorings
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署大规模重构。
- en: Let’s talk about some ways of deploying code that can help you catch any issues
    that slip through before they become major problems.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些部署代码的方法，这些方法可以帮助你捕捉到任何在成为大问题之前滑过的缺陷。
- en: Using feature flags
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用功能标志。
- en: '**Feature flags** are configuration settings that control whether features
    are active.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能标志**是控制功能是否激活的配置设置。'
- en: When you push out new code that includes a new capability, that code doesn’t
    have to be immediately available. You can deploy as usual with the new feature
    area disabled in the configuration.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当你推送包含新功能的代码时，该代码不必立即可用。你可以像往常一样部署，但在配置中禁用新功能区域。
- en: Once you’re confident the rest of the software is working as intended, you can
    enable the new feature. If the feature winds up having issues, you can quickly
    disable it by flipping the feature flag back to its inactive state.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确信软件的其他部分按预期工作，你就可以启用新功能。如果该功能最终出现问题，你可以通过将功能标志切换回非活动状态来快速禁用它。
- en: While feature flags are helpful when you’re releasing actual features, you can
    also use them with major refactoring efforts. For example, a feature flag might
    govern whether the system uses `LegacyBookingSystem` or `RevisedBookingSystem`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在发布实际功能时，功能标志很有帮助，但你也可以在主要重构工作中使用它们。例如，一个功能标志可能控制系统使用`LegacyBookingSystem`还是`RevisedBookingSystem`。
- en: Tip
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Feature flag libraries pair nicely with A/B testing libraries such as Scientist
    .NET, which we covered in [*Chapter 9*](B21324_09.xhtml#_idTextAnchor189).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志库与 A/B 测试库如 Scientist .NET 配合得很好，我们已在 [*第9章*](B21324_09.xhtml#_idTextAnchor189)
    中介绍过。
- en: Popular feature flag tools include **Azure App Configuration** and **Launchdarkly**,
    but Microsoft also offers an open-source feature management library called **.NET**
    **Feature Management**.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的功能标志工具包括 **Azure App Configuration** 和 **Launchdarkly**，但微软还提供了一个名为 **.NET
    功能管理** 的开源功能管理库。
- en: .NET Feature Management is surprisingly capable and integrates directly into
    your .NET applications, though it lacks some of the web monitoring capabilities
    a commercial software product might have.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 功能管理功能强大，可以直接集成到你的 .NET 应用程序中，尽管它缺少一些商业软件产品可能具有的网页监控功能。
- en: Feature flags add complexity to your application but give you options for when
    your features go live. This lets you enable a feature, evaluate it for correctness
    in a production environment, and then either disable it, patch any issues observed,
    or leave it on.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志增加了你的应用程序的复杂性，但为你提供了在功能上线时的选择。这让你可以启用一个功能，在生产环境中评估其正确性，然后要么禁用它，修复观察到的任何问题，或者保持开启状态。
- en: Phased rollouts and blue/green deployments
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分阶段发布和蓝绿部署
- en: '**Phased rollouts** or **blue/green deployments** take the idea of feature
    flags to a different level. In this model, you have distinct sets of servers,
    typically referred to as blue and green environments.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**分阶段发布** 或 **蓝绿部署** 将功能标志的概念提升到了一个新的层次。在这个模型中，你有不同的服务器集合，通常被称为蓝色和绿色环境。'
- en: 'In a blue/green deployment, you might start with 100% of your users using one
    environment. During this time, you patch the other server with your new update
    and verify that it appears to be running correctly, as shown in *Figure 17**.8*:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝绿部署中，你可能开始时让100%的用户使用一个环境。在这段时间里，你用新的更新修补另一个服务器，并验证它看起来运行正确，如图 *图17.8* 所示：
- en: '![Figure 17.8 – Users using the blue environment while the green one is being
    updated](img/B21324_17_08.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图17.8 – 在绿色环境更新时，用户正在使用蓝色环境](img/B21324_17_08.jpg)'
- en: Figure 17.8 – Users using the blue environment while the green one is being
    updated
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.8 – 在绿色环境更新时，用户正在使用蓝色环境
- en: Once you’re sure the new server is operational and running without issue, you
    can start diverting a percentage of your users onto the new server.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确认新服务器运行正常且没有问题，你就可以开始将一部分用户转移到新服务器上。
- en: 'This subset of users represents real production traffic and can be used to
    monitor the behavior of your new release with a minimal set of users, as shown
    in *Figure 17**.9*:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个用户子集代表了真实的生产流量，可以用它来监控你的新版本在少量用户中的行为，如图 *图17.9* 所示：
- en: '![Figure 17.9 – The blue environment running most users while a subset of users
    are on green](img/B21324_17_09.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图17.9 – 蓝色环境运行大多数用户，而一小部分用户在绿色环境中](img/B21324_17_09.jpg)'
- en: Figure 17.9 – The blue environment running most users while a subset of users
    are on green
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.9 – 蓝色环境运行大多数用户，而一小部分用户在绿色环境中
- en: If the new environment starts to have issues, you can quickly move users off
    of that server and onto the old one, then take the new environment offline for
    maintenance until you’ve addressed the issues and are ready to try again.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新环境开始出现问题，你可以快速将用户从该服务器转移到旧服务器，然后关闭新环境进行维护，直到你解决了问题并准备好再次尝试。
- en: Caution
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When migrating to a new revision and then rolling back to the old one, you must
    take special care to ensure any database migrations still work appropriately.
    Tools such as Entity Framework’s up-and-down scripts can help with this.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当迁移到新版本然后回滚到旧版本时，你必须特别注意确保任何数据库迁移仍然能够适当工作。例如，Entity Framework 的上下文脚本工具可以帮助你完成这项工作。
- en: 'If the new environment performs without issues, you can gradually “drain” users
    from the old environment onto the new environment. Eventually, your old environment
    will be empty and can be taken offline until the next deployment, as shown in
    *Figure 17**.10*:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新环境运行没有问题，你可以逐渐将用户从旧环境“排空”到新环境。最终，你的旧环境将变为空，可以关闭直到下一次部署，如图 *图17.10* 所示。10*：
- en: '![Figure 17.10 – The green environment handles all traffic and the blue one
    goes offline](img/B21324_17_10.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图17.10 – 绿色环境处理所有流量，蓝色环境关闭](img/B21324_17_10.jpg)'
- en: Figure 17.10 – The green environment handles all traffic and the blue one goes
    offline
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10 – 绿色环境处理所有流量，蓝色环境关闭
- en: The next time a deployment occurs, the roles will reverse and users will move
    from the green environment to the blue environment once the blue environment is
    updated to the next version.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 下次部署发生时，角色将颠倒，一旦蓝色环境更新到下一个版本，用户将从绿色环境转移到蓝色环境。
- en: This sounds complex, and to some extent it is, but a lot of this complexity
    can be automated and managed by your cloud provider. For example, Azure provides
    blue/green deployments in many of its services, as detailed in the *Further* *reading*
    section.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很复杂，在某种程度上确实如此，但很多这种复杂性可以通过自动化并由您的云提供商管理。例如，Azure 在其许多服务中提供了蓝/绿部署，如*进一步阅读*部分所述。
- en: Once you’ve migrated over to a blue/green deployment model, the complexity becomes
    largely irrelevant, and instead, blue/green deployment becomes another tool in
    your quality toolbox.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您迁移到蓝/绿部署模型，复杂性就变得在很大程度上无关紧要，相反，蓝/绿部署成为您质量工具箱中的另一个工具。
- en: The value of continuous integration and continuous delivery
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成和持续交付的价值
- en: All of this added complexity in the form of deployment and feature management
    sounds intimidating at first, but this level of maturity helps teams perform at
    very high levels and reduces the impact of any failures on the end users.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些以部署和功能管理形式增加的复杂性一开始可能显得令人畏惧，但这种成熟度有助于团队在非常高的水平上表现，并减少任何失败对最终用户的影响。
- en: This complexity can be a problem, but thankfully, **continuous integration and
    continuous delivery** (**CI/CD**) can help manage it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这种复杂性可能是一个问题，但幸运的是，**持续集成和持续交付**（**CI/CD**）可以帮助管理它。
- en: '**CI** is about verifying the correctness of your software any time it changes.
    This means running code analysis, unit tests, and any other checks you need to
    do any time a change is about to be merged into an integration branch.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI** 是指在软件更改时验证其正确性。这意味着在即将将更改合并到集成分支时，运行代码分析、单元测试和任何其他必要的检查。'
- en: '**CD** focuses on automating the deployment of software applications in a repeatable
    and reliable manner. Instead of deployments being done from one specialized developer’s
    machine, deployments are done using an automated script that is typically run
    in a cloud environment. Continuous delivery allows you to ship your software in
    a repeatable and reliable manner to whatever environment you want.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**CD** 专注于以可重复和可靠的方式自动化软件应用的部署。而不是从一位专业开发者的机器上执行部署，部署是通过通常在云环境中运行的自动化脚本来完成的。持续交付允许您以可重复和可靠的方式将软件部署到您想要的任何环境。'
- en: Some interpretations of CI/CD also include **Infrastructure as Code** (**IaC**)
    through tools such as **Terraform** or **Bicep**. IaC is used to configure cloud
    environments that have the same resources, security privileges, and configuration
    settings based on an IaC script. This means that deployments can be used to create
    missing cloud resources and secure resources, and generally make it easier for
    your team to create new environments consistently.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 的一些解释还包括通过 **基础设施即代码**（**IaC**）工具，如 **Terraform** 或 **Bicep**。IaC 用于根据
    IaC 脚本配置具有相同资源、安全权限和配置设置的云环境。这意味着部署可以用来创建缺失的云资源并保护资源，通常使您的团队能够一致地创建新环境变得更容易。
- en: When you put these tools and processes together, you get a well-defined and
    automated pipeline that checks new code for correctness, runs tests to ensure
    that the change doesn’t break anything, and can deploy changes to whatever environment
    you’d like – all without the possibility of human error in the process.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这些工具和流程结合起来时，你将得到一个定义明确且自动化的管道，该管道检查新代码的正确性，运行测试以确保更改不会破坏任何东西，并且可以将更改部署到您想要的任何环境——所有这些都不存在人为错误的可能性。
- en: Once you have a broad enough library of unit and integration tests, CI/CD allows
    you to deploy at whatever pace you’re comfortable with and is how some teams can
    deploy hundreds of times a day if they want to.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有足够广泛的单元和集成测试库，CI/CD 就允许你以你感到舒适的任何速度进行部署，这也是一些团队如果愿意的话，每天可以部署数百次的原因。
- en: This degree of process maturity gives teams the freedom to innovate at a rapid
    pace. These added safety nets of quality checks and automation further support
    refactoring efforts by taking the fear out of making the changes needed to keep
    your software clean and healthy.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这种程度的流程成熟度给团队提供了快速创新的自由。这些额外的质量检查和自动化安全网进一步支持重构工作，通过消除对进行保持软件清洁和健康所需更改的恐惧。
- en: Case study – Cloudy Skies Airlines
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究 – Cloudy Skies Airlines
- en: 'As we close this book, let’s take a final look at our case study company: Cloudy
    Skies Airlines.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本书之际，让我们最后回顾一下我们的案例研究公司：Cloudy Skies航空公司。
- en: Cloudy Skies started with unmaintainable systems they were afraid to touch for
    fear of introducing critical bugs. They carried out a systematic review of the
    technical debt in their codebase and the quality issues the team had encountered
    in the past year.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudy Skies从他们害怕触及的难以维护的系统开始，担心引入关键错误。他们对代码库中的技术债务以及团队在过去一年中遇到的质量问题进行了系统性的审查。
- en: As a result, the team was able to prioritize a list of key areas of technical
    debt and identify critical areas lacking unit tests. Cloudy Skies carried out
    several refactoring sprints to address the most critical areas first, putting
    a heavy emphasis on expanding their unit tests.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，团队能够优先处理技术债务的关键领域列表，并确定缺乏单元测试的关键区域。Cloudy Skies进行了几次重构冲刺，首先解决最关键的区域，并高度重视扩展他们的单元测试。
- en: Once the quality hotspots were largely addressed, Cloudy Skies went back to
    a standard agile development cadence but allocated about 30% of their work each
    sprint toward paying down technical debt.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦解决了大部分质量热点问题，Cloudy Skies就回归到标准的敏捷开发节奏，但每个冲刺将大约30%的工作分配给偿还技术债务。
- en: Many of the systems Cloudy Skies used were out of date, but Cloudy Skies was
    able to use .NET Upgrade Assistant to quickly modernize most of them.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudy Skies使用的许多系统都已过时，但Cloudy Skies能够使用.NET升级助手快速现代化其中大部分。
- en: For applications that could not be easily upgraded, development teams began
    following the strangler fig pattern to build a new application to cover vertical
    slices of the old application and tools such as YARP to route traffic to the new
    application where possible.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 对于难以升级的应用程序，开发团队开始遵循绞杀榕模式来构建新的应用程序，以覆盖旧应用程序的垂直切片，并在可能的情况下使用YARP等工具将流量路由到新应用程序。
- en: All of this was supported by a culture of trust and transparency and modern
    application management processes through feature flags and CI/CD.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都得到了信任和透明度文化的支持，以及通过功能标志和CI/CD的现代应用程序管理流程。
- en: While it will be some time before the developers are fully proud of their code,
    Cloudy Skies is heading in the right direction. The team has regained the respect
    of the larger organization and the added stability and agility is helping the
    business steer toward sunny horizons.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然开发者们还需要一段时间才能完全为自己的代码感到自豪，但Cloudy Skies正朝着正确的方向前进。团队重新赢得了更大组织的尊重，增加的稳定性和敏捷性正帮助业务驶向晴朗的远方。
- en: Summary
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the unique challenges of refactoring in an agile
    environment and strategies for including refactoring work inside agile sprints.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了在敏捷环境中重构的独特挑战以及如何在敏捷冲刺中包含重构工作的策略。
- en: We also looked at ways of accomplishing large-scale refactorings and how to
    respond when things don’t go as planned.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了实现大规模重构的方法以及当事情没有按计划进行时的应对策略。
- en: This chapter also touched on some deployment and automation processes that can
    reduce the impact of issues on end users and minimize the risk of human error
    through feature flags, blue/green deployments, and CI/CD practices.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还涉及了一些部署和自动化流程，这些流程可以减少问题对最终用户的影响，并通过功能标志、蓝绿部署和CI/CD实践最小化人为错误的风险。
- en: Toward more sustainable software
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向更可持续的软件迈进
- en: This book took you on a journey from the nature of technical debt to the procedures
    of refactoring. We talked about how to safely test and structure your software
    and how to evaluate code for best practices, prioritize, and communicate technical
    debt.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本书带您从技术债务的本质到重构流程的探讨。我们讨论了如何安全地测试和构建您的软件，以及如何评估代码以遵循最佳实践、优先级排序和沟通技术债务。
- en: We also talked about how the C# language and features of Visual Studio support
    you in this journey toward more sustainable software development.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了C#语言和Visual Studio的功能如何支持您在这条通往更可持续软件开发的道路上。
- en: Every year our world changes a little as Microsoft unveils new C# preview features
    at the beginning of the year and releases them near the end.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 每年，随着微软在年初公布新的C#预览功能并在年底发布它们，我们的世界都会发生一点变化。
- en: These capabilities give us a wide range of capabilities to tackle the development
    problems of today and tomorrow, but the reality is that software development continues
    to change.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这些能力为我们提供了广泛的能力来解决今天和明天的开发问题，但现实是软件开发仍在不断变化。
- en: Software and software development grows more complex each year. Meanwhile, many
    teams are stuck maintaining yesterday’s code.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 软件和软件开发每年都在变得更加复杂。与此同时，许多团队陷入了维护昨天代码的困境。
- en: It doesn’t have to be this way. You can modernize your software, and you can
    do it in an agile and responsible way while serving the needs of your business
    and its customers.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 不必是这样的。你可以使你的软件现代化，并且你可以以敏捷和负责任的方式做到这一点，同时满足你业务及其客户的需求。
- en: I’ve been writing software in some shape or form for over 35 years now. New
    developers assume that more experience results in fewer mistakes. While this has
    some truth to it, I’ve personally found that the more experience I get, the less
    I trust my ability to not make mistakes.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在以某种形式编写软件已经超过 35 年了。新开发者认为经验越多，错误越少。虽然这有些道理，但我个人发现，我越有经验，就越不相信自己不会犯错误的能力。
- en: Make room for yourself – and others – to make mistakes. Mistakes will happen
    and bugs will reach production, but when they do, you need to learn from them.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为自己和其他人留出犯错的空间。错误会发生，bug 也会进入生产环境，但当他们发生时，你需要从中学习。
- en: It is my sincere hope that you have learned something new from every chapter.
    Moreover, I want you to emerge from this book with hope – hope that your code
    can be a source of joy to you, or at least be less afraid to change.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我衷心希望你能从每一章中学到新的东西。此外，我希望你从这本书中带着希望离开——希望你的代码能成为你快乐的源泉，或者至少让你不那么害怕改变。
- en: Through the practices outlined in this book, I believe that you and your team
    can reach a better place through successfully refactoring with C#.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本书中概述的实践，我相信你和你团队可以通过成功重构 C# 来达到更好的地方。
- en: Questions
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can technical debt be paid down inside of an agile setting?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在敏捷环境中如何减少技术债务？
- en: Why are large rewrites hard? What processes can help with this?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么大规模的重写很难？有哪些流程可以帮助解决这个问题？
- en: What variances do you see right now in how you deploy and test software?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在在部署和测试软件方面看到了哪些差异？
- en: Further reading
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more information about the materials from this chapter at these
    URLs:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址找到有关本章材料的更多信息：
- en: '*Manifesto for Agile Software Development*: *StranglerFigApplication* *Post*:
    [https://martinfowler.com/bliki/StranglerFigApplication.html](https://martinfowler.com/bliki/StranglerFigApplication.html)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*敏捷软件开发宣言* *StranglerFigApplication* *帖子*：[https://martinfowler.com/bliki/StranglerFigApplication.html](https://martinfowler.com/bliki/StranglerFigApplication.html)'
- en: '*YARP*: [https://github.com/microsoft/reverse-proxy](https://github.com/microsoft/reverse-proxy)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*YARP*: [https://github.com/microsoft/reverse-proxy](https://github.com/microsoft/reverse-proxy)'
- en: '*Azure API* *Management*: [https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts](https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Azure API* *管理*: [https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts](https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts)'
- en: '*Overview of the.NET Upgrade* *Assistant*: [https://learn.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview](https://learn.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET 升级* *助手*：[https://learn.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview](https://learn.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview)'
- en: '*.NET Feature* *Management*: [https://github.com/microsoft/FeatureManagement-Dotnet](https://github.com/microsoft/FeatureManagement-Dotnet)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET 功能* *管理*: [https://github.com/microsoft/FeatureManagement-Dotnet](https://github.com/microsoft/FeatureManagement-Dotnet)'
- en: '*Blue-Green Deployment in Azure Container* *Apps*:[https://learn.microsoft.com/en-us/azure/container-apps/blue-green-deployment](https://learn.microsoft.com/en-us/azure/container-apps/blue-green-deployment)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Azure 容器应用中的蓝绿部署*：[https://learn.microsoft.com/en-us/azure/container-apps/blue-green-deployment](https://learn.microsoft.com/en-us/azure/container-apps/blue-green-deployment)'
- en: '*Vertical* *Slices:* [https://deviq.com/practices/vertical-slices](https://deviq.com/practices/vertical-slices)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*垂直* *切片*：[https://deviq.com/practices/vertical-slices](https://deviq.com/practices/vertical-slices)'
