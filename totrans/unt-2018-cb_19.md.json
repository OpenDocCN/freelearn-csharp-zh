["```cs\n    using UnityEngine;\n     using UnityEngine.TestTools;\n     using NUnit.Framework;\n     using System.Collections;\n\n     public class NewTestScript {\n         [Test]\n         public void NewTestScriptSimplePasses() {\n             // Use the Assert class to test conditions.\n         }\n\n         // A UnityTest behaves like a coroutine in PlayMode\n         // and allows you to yield null to skip a frame in EditMode\n         [UnityTest]\n         public IEnumerator NewTestScriptWithEnumeratorPasses() {\n             // Use the Assert class to test conditions.\n             // yield to skip a frame\n             yield return null;\n         }\n     } \n```", "```cs\n    using NUnit.Framework;\n\n     public class UnitTestSkeleton\n     {\n         [Test]\n         public void NewTestScriptSimplePasses()\n         {\n             // write your assertion(s) here\n         }\n     } \n```", "```cs\n    using NUnit.Framework;\n\n     class SimpleTester\n     {\n         [Test]\n         public void TestOnePlusOneEqualsTwo()\n         {\n             // Arrange\n             int n1 = 1;\n             int n2 = 1;\n             int expectedResult = 2;\n\n             // Act\n             int result = n1 + n2;\n\n             // Assert\n             Assert.AreEqual(expectedResult, result);\n         }\n     } \n```", "```cs\n    using NUnit.Framework;\n\n     class SimpleTester\n     {\n         [Test]\n         public void TestOnePlusOneEqualsTwo()\n         {\n             // Assert\n             Assert.AreEqual(2, 1 + 1);\n         }\n     } \n```", "```cs\n    Assert.AreEqual( <expectedValue>, <actualValue> ); \n```", "```cs\n    public void TestTwoEqualsThreeShouldFail() {\n         // Arrange\n         int expectedResult = 2;\n\n         // Act\n         int result = 1 + 2; // 3 !!!\n\n         // Assert\n         Assert.AreEqual(result, expectedResult);\n     } \n```", "```cs\n    using NUnit.Framework;\n\n     class DataProviderTester\n     {\n         [Test, TestCaseSource(\"AdditionProvider\")]\n         public void TestAdd(int num1, int num2, int expectedResult)\n         {\n             // Arrange\n             // (not needed - since values coming as arguments)\n\n             // Act\n             int result = num1 + num2;\n\n             // Assert\n             Assert.AreEqual(expectedResult, result);\n         }\n\n         // the data provider\n         static object[] AdditionProvider =\n         {\n             new object[] { 0, 0, 0 },\n             new object[] { 1, 0, 1 },\n             new object[] { 0, 1, 1 },\n             new object[] { 1, 1, 2 }\n         };\n     } \n```", "```cs\n    TestAdd(0,0,0)\n     TestAdd(1,0,1)\n     TestAdd(0,1,1)\n     TestAdd(1,1,2) \n```", "```cs\n    using UnityEngine;\n     using System.Collections;\n\n     public class Health\n     {\n         private float health = 1;\n\n         public float GetHealth()\n         {\n             return health;\n         }\n\n         public bool AddHealth(float heathPlus)\n         {\n             if(heathPlus > 0){\n                 health += heathPlus;\n                 return true;\n             } else {\n                 return false;\n             }\n         }\n\n         public bool KillCharacter()\n         {\n             health = 0;\n             return true;\n         }\n     } \n```", "```cs\nusing NUnit.Framework;\n\nclass TestHealth {\n   [Test]\n   public void TestReturnsOneWhenCreated()   {\n      // Arrange\n      Health h = new Health ();\n      float expectedResult = 1;\n\n      // Act\n      float result = h.GetHealth ();\n\n      // Assert\n      Assert.AreEqual (expectedResult, result);\n   }     \n\n    [Test]\n    public void TestPointTwoAfterAddPointOneTwiceAfterKill()    {\n        // Arrange\n        Health h = new Health();\n        float healthToAdd = 0.1f;\n        float expectedResult = 0.2f;\n\n        // Act\n        h.KillCharacter();\n        h.AddHealth(healthToAdd);\n        h.AddHealth(healthToAdd);\n        float result = h.GetHealth();\n\n        // Assert\n        Assert.AreEqual(expectedResult, result);\n    }\n\n    [Test]\n    public void TestNoChangeAndReturnsFalseWhenAddNegativeValue()     {\n        // Arrange\n        Health h = new Health();\n        float healthToAdd = -1;\n        bool expectedResultBool = false;\n        float expectedResultFloat = 1;\n\n        // Act\n        bool resultBool = h.AddHealth(healthToAdd);\n        float resultFloat = h.GetHealth();\n\n        // Assert\n        Assert.AreEqual(expectedResultBool, resultBool);\n        Assert.AreEqual(expectedResultFloat, resultFloat);\n    }\n\n    [Test]\n    public void TestReturnsZeroWhenKilled()    {\n        // Arrange\n        Health h = new Health();\n        float expectedResult = 0;\n\n        // Act\n        h.KillCharacter();\n        float result = h.GetHealth();\n\n        // Assert\n        Assert.AreEqual(expectedResult, result);\n    }\n\n    [Test]\n    public void TestHealthNotGoAboveOne()    {\n        // Arrange\n        Health h = new Health();\n        float expectedResult = 1;\n\n        // Act\n        h.AddHealth(0.1f);\n        h.AddHealth(0.5f);\n        h.AddHealth(1);\n        h.AddHealth(5);\n        float result = h.GetHealth();\n\n        // Assert\n        Assert.AreEqual(expectedResult, result);\n    }\n}\n```", "```cs\n    using UnityEngine;\n     using UnityEngine.TestTools;\n     using NUnit.Framework;\n     using System.Collections;\n\n     public class NewTestScript\n     {\n         [UnityTest]\n         public IEnumerator GameObject_WithRigidBody_WillBeAffectedByPhysics()\n         {\n             // Arrange\n             var go = new GameObject();\n             go.AddComponent<Rigidbody>();\n             var originalPosition = go.transform.position.y;\n\n             // Act\n             yield return new WaitForFixedUpdate();\n\n             // Assert\n             Assert.AreNotEqual(originalPosition, go.transform.position.y);\n         }\n     } \n```", "```cs\n    using System.Collections;\n     using NUnit.Framework;\n     using UnityEngine;\n     using UnityEngine.SceneManagement;\n     using UnityEngine.TestTools;\n\n     public class DoorTest\n     {\n         const int BASE_LAYER = 0;\n         private string initialScenePath;\n         private Animator doorAnimator;\n         private Scene tempTestScene;\n\n         // name of scene being tested by this class\n         private string sceneToTest = \"doorScene\";\n\n         [SetUp]\n         public void Setup()\n         {\n             // setup - load the scene\n             tempTestScene = SceneManager.GetActiveScene();\n         }\n     } \n```", "```cs\n    [UnityTest]\n     public IEnumerator TestDoorAnimationStateStartsClosed()\n     {\n         // load scene to be tested\n         yield return SceneManager.LoadSceneAsync(sceneToTest, LoadSceneMode.Additive);\n         SceneManager.SetActiveScene(SceneManager.GetSceneByName(sceneToTest));\n\n         // Arrange\n         doorAnimator = GameObject.FindWithTag(\"Door\").GetComponent<Animator>();\n         string expectedDoorAnimationState = \"DoorClosed\";\n\n         // immediate next frame\n         yield return null;\n\n         // Act\n         AnimatorClipInfo[] currentClipInfo = doorAnimator.GetCurrentAnimatorClipInfo(BASE_LAYER);\n         string doorAnimationState = currentClipInfo[0].clip.name;\n\n         // Assert\n         Assert.AreEqual(expectedDoorAnimationState, doorAnimationState);\n\n         // teardown - reload original temp test scene\n         SceneManager.SetActiveScene(tempTestScene);\n         yield return SceneManager.UnloadSceneAsync(sceneToTest);\n     } \n```", "```cs\n    [UnityTest]\n     public IEnumerator TestIsOpeningStartsFalse()\n     {\n         // load scene to be tested\n         yield return SceneManager.LoadSceneAsync(sceneToTest, LoadSceneMode.Additive);\n         SceneManager.SetActiveScene(SceneManager.GetSceneByName(sceneToTest));\n\n         // Arrange\n         doorAnimator = GameObject.FindWithTag(\"Door\").GetComponent<Animator>();\n\n         // immediate next frame\n         yield return null;\n\n         // Act\n         bool isOpening = doorAnimator.GetBool(\"Opening\");\n\n         // Assert\n         Assert.IsFalse(isOpening);\n\n         // teardown - reload original temp test scene\n         SceneManager.SetActiveScene(tempTestScene);\n         yield return SceneManager.UnloadSceneAsync(sceneToTest);\n     } \n```", "```cs\n    [UnityTest]\n     public IEnumerator TestDoorAnimationStateOpenAfterAFewSeconds()\n     {\n         // load scene to be tested\n         yield return SceneManager.LoadSceneAsync(sceneToTest, LoadSceneMode.Additive);\n         SceneManager.SetActiveScene(SceneManager.GetSceneByName(sceneToTest));\n\n         // wait a few seconds\n         int secondsToWait = 3;\n         yield return new WaitForSeconds(secondsToWait);\n\n         // Arrange\n         doorAnimator = GameObject.FindWithTag(\"Door\").GetComponent<Animator>();\n         string expectedDoorAnimationState = \"DoorOpen\";\n\n         // Act\n         AnimatorClipInfo[] currentClipInfo = doorAnimator.GetCurrentAnimatorClipInfo(BASE_LAYER);\n         string doorAnimationState = currentClipInfo[0].clip.name;\n         bool isOpening = doorAnimator.GetBool(\"Opening\");\n\n         // Assert\n         Assert.AreEqual(expectedDoorAnimationState, doorAnimationState);\n         Assert.IsTrue(isOpening);\n\n         // teardown - reload original temp test scene\n         SceneManager.SetActiveScene(tempTestScene);\n         yield return SceneManager.UnloadSceneAsync(sceneToTest);\n     } \n```", "```cs\n// load scene to be tested\n yield return SceneManager.LoadSceneAsync(sceneToTest, LoadSceneMode.Additive);\n     SceneManager.SetActiveScene(SceneManager.GetSceneByName(sceneToTest));\n\n // Arrange-Act-Assert goes here\n\n // teardown - reload original temp test scene\n SceneManager.SetActiveScene(tempTestScene);\n yield return SceneManager.UnloadSceneAsync(sceneToTest); \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n     using UnityEngine.TestTools;\n     using NUnit.Framework;\n     using System.Collections;\n     using UnityEngine.SceneManagement;\n\n     [TestFixture]\n     public class HealthBarPlayModeTests\n     {\n         private Scene tempTestScene;\n\n         // name of scene being tested by this class\n         private string sceneToTest = \"HealthBar\";\n\n         [SetUp]\n         public void Setup()\n         {\n             // setup - load the scene\n             tempTestScene = SceneManager.GetActiveScene();\n         }\n     } \n```", "```cs\n   [UnityTest]\n     public IEnumerator TestHealthBarImageMatchesPlayerHealth()\n     {\n         // load scene to be tested\n         yield return SceneManager.LoadSceneAsync(sceneToTest, LoadSceneMode.Additive);\n         SceneManager.SetActiveScene(SceneManager.GetSceneByName(sceneToTest));\n\n         // wait for one frame\n         yield return null;\n\n         // Arrange\n         Image healthBarFiller = GameObject.Find(\"image-health-bar-filler\").GetComponent<Image>();\n         PlayerManager playerManager = GameObject.FindWithTag(\"PlayerManager\").GetComponent<PlayerManager>();\n         float expectedResult = 0.9f;\n\n         // Act\n         playerManager.ReduceHealth();\n\n         // Assert\n         Assert.AreEqual(expectedResult, healthBarFiller.fillAmount);\n\n         // teardown - reload original temp test scene\n         SceneManager.SetActiveScene(tempTestScene);\n         yield return SceneManager.UnloadSceneAsync(sceneToTest);\n     } \n```", "```cs\n    using System;\n     using UnityEngine.TestTools;\n     using NUnit.Framework;\n     using UnityEngine;\n\n     public class EditModeUnitTests\n     {\n\n         // inner unit test classes go here\n\n     } \n```", "```cs\n    public class TestCorrectValues\n     {\n         [Test]\n         public void DefaultHealthOne()\n         {\n             // Arrange\n             Player player = new Player();\n             float expectedResult = 1;\n\n             // Act\n             float result = player.GetHealth();\n\n             // Assert\n             Assert.AreEqual(expectedResult, result);\n         }\n\n         [Test]\n         public void HealthCorrectAfterReducedByPointOne()\n         {\n             // Arrange\n             Player player = new Player();\n             float expectedResult = 0.9f;\n\n             // Act\n             player.ReduceHealth(0.1f);\n             float result = player.GetHealth();\n\n             // Assert\n             Assert.AreEqual(expectedResult, result);\n         }\n\n         [Test]\n         public void HealthCorrectAfterReducedByHalf()\n         {\n             // Arrange\n             Player player = new Player();\n             float expectedResult = 0.5f;\n\n             // Act\n             player.ReduceHealth(0.5f);\n             float result = player.GetHealth();\n\n             // Assert\n             Assert.AreEqual(expectedResult, result);\n         }\n     } \n```", "```cs\n    public class TestLimitNotExceeded\n     {\n         [Test]\n         public void HealthNotExceedMaximumOfOne()\n         {\n             // Arrange\n             Player player = new Player();\n             float expectedResult = 1;\n\n             // Act\n             player.AddHealth(1);\n             player.AddHealth(1);\n             player.AddHealth(0.5f);\n             player.AddHealth(0.1f);\n             float result = player.GetHealth();\n\n             // Assert\n             Assert.AreEqual(expectedResult, result);\n         }\n     } \n```", "```cs\n    public class TestEvents\n     {\n         [Test]\n         public void CheckEventFiredWhenAddHealth()\n         {\n             // Arrange\n             Player player = new Player();\n             bool eventFired = false;\n\n             Player.OnHealthChange += delegate\n             {\n                 eventFired = true;\n             };\n\n             // Act\n             player.AddHealth(0.1f);\n\n             // Assert\n             Assert.IsTrue(eventFired);\n         }\n\n         [Test]\n         public void CheckEventFiredWhenReduceHealth()\n         {\n             // Arrange\n             Player player = new Player();\n             bool eventFired = false;\n\n             Player.OnHealthChange += delegate\n             {\n                 eventFired = true;\n             };\n\n             // Act\n             player.ReduceHealth(0.1f);\n\n             // Assert\n             Assert.IsTrue(eventFired);\n         }\n     } \n```", "```cs\n    public class TestExceptions\n     {\n         [Test]\n         public void Throws_Exception_When_Add_Health_Passed_Less_Than_Zero()\n         {\n             // Arrange\n             Player player = new Player();\n\n             // Act\n\n             // Assert\n             Assert.Throws<ArgumentOutOfRangeException>(\n                 delegate\n                 {\n                     player.AddHealth(-1);\n                 }\n             );\n         }\n\n         [Test]\n         public void Throws_Exception_When_Reduce_Health_Passed_Less_Than_Zero()\n         {\n             // Arrange\n             Player player = new Player();\n\n             // Act\n\n             // Assert\n             Assert.Throws<ArgumentOutOfRangeException>(\n                 () => player.ReduceHealth(-1)\n             );\n         }\n   } \n```", "```cs\n    public class TestLogging\n     {\n         [Test]\n         public void Throws_Exception_When_Add_Health_Passed_Less_Than_Zero()\n         {\n             Debug.unityLogger.logEnabled = true;\n\n             // Arrange\n             Player player = new Player();\n             HealthChangeLogger healthChangeLogger = new HealthChangeLogger();\n             string expectedResult = \"health = 0.9\";\n\n             // Act\n             player.ReduceHealth(0.1f);\n\n             // Assert\n             LogAssert.Expect(LogType.Log, expectedResult);\n         }\n     } \n```", "```cs\nAssert.AreEqual(expectedResult, healthBarFiller.fillAmount); \n```"]