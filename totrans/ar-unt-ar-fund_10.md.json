["```cs\nusing UnityEngine;\npublic class EditPictureMode : MonoBehaviour\n{\n    public FramedPhoto currentPicture;\n    void OnEnable()\n    {\n        UIController.ShowUI(\"EditPicture\");\n    }\n}\n```", "```cs\n    using UnityEngine;\n    using UnityEngine.InputSystem;\n    public class GalleryMainMode : MonoBehaviour\n    {\n        void OnEnable()\n        {\n            UIController.ShowUI(\"Main\");\n        }\n    }\n    ```", "```cs\n    using UnityEngine.InputSystem;\n    ```", "```cs\n    public class GalleryMainMode : MonoBehaviour\n    {\n        [SerializeField] EditPictureMode editMode;\n    ```", "```cs\n        Camera camera;\n        void Start()\n        {\n            camera = Camera.main;\n        }\n    ```", "```cs\n        public void OnSelectObject(InputValue value)\n        {\n            Vector2 touchPosition = value.Get<Vector2>();\n            FindObjectToEdit(touchPosition);\n        }\n        void FindObjectToEdit(Vector2 touchPosition)\n        {\n            Ray ray = camera.ScreenPointToRay(touchPosition);\n            RaycastHit hit;\n            int layerMask =             1 << LayerMask.NameToLayer(\"PlacedObjects\");\n            if (Physics.Raycast(ray, out hit, Mathf.Infinity,            layerMask))\n            {\n                FramedPhoto picture = hit.collider.                GetComponentInParent<FramedPhoto>();\n                editMode.currentPicture = picture;\n                InteractionController.                EnableMode(\"EditPicture\");\n            }\n        }\n    ```", "```cs\n        [SerializeField] GameObject highlightObject;\n        bool isEditing;\n    ```", "```cs\n        public void Highlight(bool show)\n        {\n            if (highlightObject) // handle no object or app                                 end object destroyed\n                highlightObject.SetActive(show);\n        }\n    ```", "```cs\n        void Awake()\n        {\n            Highlight(false);\n        }\n    ```", "```cs\n       public void BeingEdited(bool editing)\n        {\n            Highlight(editing);\n            isEditing = editing;\n        }\n    ```", "```cs\n       void OnEnable()\n        {\n            UIController.ShowUI(\"EditPicture\");\n            if (currentPicture)\n                currentPicture.BeingEdited(true);\n        }\n    ```", "```cs\n        void OnDisable()\n        {\n            if (currentPicture)\n                currentPicture.BeingEdited(false);\n        }\n    ```", "```cs\n    using UnityEngine.InputSystem;\n    ```", "```cs\n        Camera camera;\n        void Start()\n        {\n            camera = Camera.main;\n        }\n    ```", "```cs\n        public void OnSelectObject(InputValue value)\n        {\n            Vector2 touchPosition = value.Get<Vector2>();\n            FindObjectToEdit(touchPosition);\n        }\n        void FindObjectToEdit(Vector2 touchPosition)\n        {\n            Ray ray = camera.ScreenPointToRay(touchPosition);\n            RaycastHit hit;\n            int layerMask =             1 << LayerMask.NameToLayer(\"PlacedObjects\");\n            if (Physics.Raycast(ray, out hit, 50f,            layerMask))\n            {\n                if (hit.collider.gameObject !=                currentPicture.gameObject)\n                {\n                    currentPicture.BeingEdited(false);\n                    FramedPhoto picture = hit.collider.                    GetComponentInParent<FramedPhoto>();\n                    currentPicture = picture;\n                    picture.BeingEdited(true);\n                }\n            }\n        }\n    ```", "```cs\n        [SerializeField] Collider boundingCollider;\n        int layer;\n    ```", "```cs\n        void Awake()\n        {\n            layer = LayerMask.NameToLayer(\"PlacedObjects\");\n            Highlight(false);\n        }\n    ```", "```cs\n        void OnTriggerStay(Collider other)\n        {\n            const float spacing = 0.1f;\n            if (isEditing && other.gameObject.layer == layer)\n            {\n                Bounds bounds = boundingCollider.bounds;\n                if (other.bounds.Intersects(bounds))\n                {\n                    Vector3 centerDistance =                     bounds.center - other.bounds.center;\n                    Vector3 distOnPlane =                     Vector3.ProjectOnPlane(centerDistance,                        transform.forward);\n                    Vector3 direction =                     distOnPlane.normalized;\n                    float distanceToMoveThisFrame =                     bounds.size.x * spacing;\n                    transform.Translate(direction *                    distanceToMoveThisFrame);\n                }\n            }\n        }\n    ```", "```cs\n        public void DeletePicture()\n        {\n            GameObject.Destroy(currentPicture.gameObject);\n            InteractionController.EnableMode(\"Main\");\n        }\n    ```", "```cs\n        [SerializeField] AddPictureMode addPicture;\n    ```", "```cs\n        public void ImageSelected(ImageInfo image)\n        {\n            addPicture.imageInfo = image;\n            InteractionController.EnableMode(\"AddPicture\");\n        }\n    ```", "```cs\n        [SerializeField] SelectImageMode selectImage;\n    ```", "```cs\n        void OnClick(ImageInfo image)\n        {\n            selectImage.ImageSelected(image);\n        }\n    ```", "```cs\n        [SerializeField] EditPictureMode editPicture;\n        public bool isReplacing = false;\n    ```", "```cs\n        public void ImageSelected(ImageInfo image)\n        {\n    currentPicture object. Otherwise, it behaves as it did previously for AddPicture-mode.Now, we need to make sure the `isReplacing` flag is set to `false` when *adding* and set to `true` when *replacing*. Again, this requires some refactoring. Currently, the main menu's `SelectImageToAdd` function in the `GalleryMainMode` script.\n    ```", "```cs\n        [SerializeField] SelectImageMode selectImage; \n    ```", "```cs\n        public void SelectImageToAdd ()\n        {\n            selectImage.isReplacing = false;\n            InteractionController.EnableMode(\"AddPicture\");\n        }\n    ```", "```cs\n        [SerializeField] SelectImageMode selectImage;\n    ```", "```cs\n        public void SelectImageToReplace()\n        {\n            selectImage.isReplacing = true;\n            InteractionController.EnableMode(\"SelectImage\");\n        }\n    ```", "```cs\n                GameObject spawned = Instantiate(placedPrefab,                position, rotation);\n                spawned.transform.SetParent(                transform.parent);\n    ```", "```cs\n    MovePicture movePicture;\n    ResizePicture resizePicture;\n    ```", "```cs\n        void Awake()\n        {\n            movePicture = GetComponent<MovePicture>();\n            resizePicture = GetComponent<ResizePicture>();\n            movePicture.enabled = false;\n            resizePicture.enabled = false;\n            layer = LayerMask.NameToLayer(\"PlacedObjects\"); \n            Highlight(false);   \n    }\n    ```", "```cs\n       public void BeingEdited(bool editing)\n        {\n            Highlight(editing);\n            movePicture.enabled = editing;\n            resizePicture.enabled = editing;\n            isEditing = editing;\n        }\n    ```", "```cs\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\nusing UnityEngine.InputSystem;\nusing UnityEngine.XR.ARFoundation;\nusing UnityEngine.XR.ARSubsystems;\npublic class MovePicture : MonoBehaviour\n{\n    ARRaycastManager raycaster;\n    List<ARRaycastHit> hits = new List<ARRaycastHit>();\n    void Start()\n    {\n        raycaster = FindObjectOfType<ARRaycastManager>();\n    }\n    void Start(){ }\n    public void OnMoveObject(InputValue value)\n    {\n        if (!enabled) return;\n        if (EventSystem.current.IsPointerOverGameObject(0))            return;\n        Vector2 touchPosition = value.Get<Vector2>();\n        MoveObject(touchPosition);\n    }\n    void MoveObject(Vector2 touchPosition)\n    {\n        if (raycaster.Raycast(touchPosition, hits,            TrackableType.PlaneWithinPolygon))\n        {\n            ARRaycastHit hit = hits[0];\n            Vector3 position = hit.pose.position;\n            Vector3 normal = -hit.pose.up;\n            Quaternion rotation =                 Quaternion.LookRotation(normal, Vector3.up);\n            transform.position = position;\n            transform.rotation = rotation;\n        }\n    }\n}\n```", "```cs\n        Camera camera;\n        int layerMask;\n        void Start() {\n            raycaster = FindObjectOfType<ARRaycastManager>();\n            camera = Camera.main;\n            layerMask =             1 << LayerMask.NameToLayer(\"PlacedObjects\");\n        }\n    ```", "```cs\n    void MoveObject(Vector2 touchPosition)\n    {\n       Ray ray = camera.ScreenPointToRay(touchPosition);\n        if (Physics.Raycast(ray, Mathf.Infinity, layerMask))\n        {\n            if (raycaster.Raycast(touchPosition, hits,                TrackableType.PlaneWithinPolygon))\n            {\n                ARRaycastHit hit = hits[0];\n                Vector3 position = hit.pose.position;\n                Vector3 normal = -hit.pose.up;\n                Quaternion rotation =                     Quaternion.LookRotation(normal,                         Vector3.up);\n                transform.position = position;\n                transform.rotation = rotation;\n            }\n        }\n    }\n```", "```cs\n    using UnityEngine;\n    using UnityEngine.EventSystems;\n    using UnityEngine.InputSystem;\n    public class ResizePicture : MonoBehaviour\n    {\n        [SerializeField] float pinchSpeed = 1f;\n        [SerializeField] float minimumScale = 0.1f;\n        [SerializeField] float maximumScale = 1.0f;\n        float previousDistance = 0f;\n        void Start() { }\n    ```", "```cs\n        public void OnResizeObject()\n        {\n            if (!enabled) return;\n            if (EventSystem.current.            IsPointerOverGameObject(0)) return;\n            Touchscreen ts = Touchscreen.current;\n            if (ts.touches[0].isInProgress &&             ts.touches[1].isInProgress)\n            {\n                Vector2 pos =                 ts.touches[0].position.ReadValue();\n                Vector2 pos1 =                 ts.touches[1].position.ReadValue();\n                TouchToResize(pos, pos1);\n            }\n            else\n            {\n                previousDistance = 0;\n            }\n        }\n    ```", "```cs\n        void TouchToResize(Vector2 pos, Vector2 pos1)\n        {\n            float distance = Vector2.Distance(pos, pos1);\n            if (previousDistance != 0)\n            {\n                float scale = transform.localScale.x;\n                float scaleFactor = (distance /                previousDistance) * pinchSpeed;\n                scale *= scaleFactor;\n                if (scale < minimumScale)\n                    scale = minimumScale;\n                if (scale > maximumScale)\n                    scale = maximumScale;\n                Vector3 localScale = transform.localScale;\n                localScale.x = scale;\n                localScale.y = scale;\n                transform.localScale = localScale;\n            }\n            previousDistance = distance;\n        }\n    }\n    ```"]