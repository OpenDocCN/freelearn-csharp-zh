- en: Scripting Victory and Defeat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we designed, scripted, and implemented our game's point system.
    We made changes to the appropriate GameObjects and wrote several scripts to manage
    the point system. We ensured the points were updated on our **Head's-Up Display**
    (**HUD**) for each frame of the game. In addition, we added the ability for the
    Cucumber Man to collect cherries from the cherry trees and use them as weapons
    against the Cucumber Beetles.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will design and script our game's victory and defeat conditions.
    We will update the scripts we created in other chapters to manage the Cucumber
    Man's health, providing frame-by-frame onscreen updates and ensuring a player
    life is lost when the health runs out. We will manage, through scripts, the lives
    remaining. We will also design and script the respawning of our player character.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will cover the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing the defeat and victory conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the player's health
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the victory logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the end-of-game logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the HUD with lives remaining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting the player character's respawning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing victory and defeat conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, our game has no clear end and does not implement any reward for the
    player's actions. In this section, we will design our game's victory and defeat
    conditions so that there is a clear goal or way to win the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 3](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml), *Designing the
    Game*, we identified three end-of-game conditions: two ending in defeat for our
    Cucumber Man, and only one resulting in defeat for our Cucumber Beetles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the victory conditions for our game:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Cucumber Beetles win if:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no cucumbers left in the game
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cucumber Man runs out of lives
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Cucumber Man wins if:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no Cucumber Beetles left in the game
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These victory and defeat conditions are pretty simple, and there can only be
    one winner. If the Cucumber Beetles win, the Cucumber Man loses.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to implement these conditions, we need to track the following with
    our scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of cucumbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of Cucumber Beetles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of Cucumber Man lives remaining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we wrote the necessary scripts to keep track of cucumbers and
    Cucumber Beetles. We also ensured the HUD is continuously updated with those counts.
    It is important for the player to have a sense of how they are doing in the game.
    Beyond just points, the player will want to continually review how many cucumbers
    and Cucumber Beetles there are in the game. The player will also want to know
    how many Cucumber Man lives remain.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will update our game so the number of lives are updated
    and the player's health bar is put into use. These will provide the player with
    much-needed visual components of the HUD during gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the player's health
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will fully implement our player's health. We will start
    the Cucumber Man with three lives, each with a full health value of 100\. We will
    update our scripts so that the Cucumber Man loses health when a cucumber beetle
    attacks him. Our approach will be to deduct one point from the Cucumber Man's
    health for every second that it is colliding with a Cucumber Beetle. We will also
    script the HUD's health bar and start with that task in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started, you should open your Unity game project. Alternatively,
    you can download the *Starting-Chapter-11** Unity* project available from the
    publisher's companion site.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting the health bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a new script and attach it to our HUD's health
    bar. We will edit the script and use it to manage our Cucumber Man's health and
    the visible status of the HUD's health bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by reviewing our health bar:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the `HUD_Canvas` | `Health_Slider`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, review the Slider (Script) component. As you can see
    in the following screenshot, there is a Value component with a slider at the bottom
    of the interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94572672-7913-46ac-adec-96ee531eb0c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Game view tab so you can see the HUD without being in game-mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, drag the Value slider and observe how the health bar
    functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see that the health bar already functions; we merely need to add a
    script to the slider so that it tracks the player''s health and updates the HUD
    during game play. Here are those steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script and name the script `HealthManager`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, click Favorites | All Scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `HealthManager` script to the `Assets` | `Custom Scripts` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `HealthManager` script to open it in an editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the script so that it matches the following code, the first section of
    the code contains the namespace `import` statements and the `HealthManager` class
    declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section of code declares our class variables. We will use `currentHealth`
    to hold the value of the Cucumber Man''s up-to-date health value. We will use
    `healthBar` as a reference to the slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `HealthManager` class has three methods; the first is the `Awake()` method.
    The first statement in this method gets a reference to the `Slider` component.
    The second statement sets the `currentHealth` to `100`. This is our maximum health
    starting point for the Cucumber Man:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Our second method is the `ReduceHealth()` method. This will be used by other
    scripts to call for a health reduction. As you can see, the first statement simply
    decrements the `currentHealth` value by one. The second statement updates the
    slider on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The last method for this class is the `Update()` method. We have one statement
    in that method to update the slider for each frame of the game. This results in
    the slider accurately depicting the player''s health:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will modify the appropriate script to call the `ReduceHealth()`
    method when the Cucumber Man is being bitten by a Cucumber Beetle.
  prefs: []
  type: TYPE_NORMAL
- en: Decrementing health
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `BeetleNPC` script already detects collisions with the Cucumber Man, so
    we can simply update that script to deduct a point from the Cucumber Man''s health
    when a collision is detected. We will do this by making a call to the `ReduceHealth()`
    method of the `HealthManager` script. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select Assets | Custom Scripts and double-click the `BeetleNPC`
    script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following statement in the class variables section of the script. This
    creates a variable we can use to reference the `HealthManager` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following two statements in the `OnCollisionEnter()` method after the
    first `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With these two statements, we obtain a reference to the `HealthManager` script
    of `Health_Slider`, and then call the `ReduceHealth()` method.
  prefs: []
  type: TYPE_NORMAL
- en: You can now test your game and watch the health bar change as Cucumber Beetles
    start attacking the Cucumber Man.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing victory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will implement the victory condition for the Cucumber Man.
    The only victory condition for the Cucumber Man is when the number of Cucumber
    Beetles is zero. Our `BeetleManager` script already provides functionality for
    counting Cucumber Beetles. As you will recall, that is how we update our Cucumber
    Beetle count on our HUD. We will make some modifications to that script and create
    a new script in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating an onscreen text component to display You Won! when
    the number of Cucumber Beetles reaches zero. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click an empty area of the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Create Empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, rename the new GameObject to `EndofGame`. We will use
    this as a container for our victory and defeat text labels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, drag the `EndofGame` GameObject to subordinate it to
    our `HUD_Canvas`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `EndofGame` GameObject selected, in the Inspector panel, select the
    Transform dropdown and click Reset. This resets the transform of the object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, right-click and select UI | Text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subordinate the new text object to the `EndofGame` GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new text object `Victory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next four steps are used to configure the Victory text object in the Inspector
    panel:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the text property to `You Won!`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Font Style to Bold
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the Font Size to 24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a bright Color for the text
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By clicking on the Game tab or putting the game into game mode, you can see
    the new victory text is displayed in the center of the screen. We only want that
    text displayed when the player has won the game. Let''s tackle that task:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure the Victory text component is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script and name the script `VictoryManager`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, click Favorites | All Scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `VictoryManager` script to the `Assets` | `Custom Scripts` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the VictoryManager script to open it in an editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the script so that it matches the following code, the first section of
    the code contains the namespace `import` statements and the `VictoryManager` class
    declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section of our script contains two class variable declarations and
    the `Awake()` method. In the `Awake()` method, we get the reference to the text
    component of our `Victory` UI object. We also set the initial text to null, so
    nothing will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The last section of our script is the `Update()` method. Here we set the value
    of count to the current count of Cucumber Beetles, then test whether the count
    equals zero. If the `(count == 0)` condition is true, we display the victory text
    on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Our next task is to update the `BeetleManager` script. We will make three changes
    to the script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `static` modifier to the `currentBeetleCount` class variable. The new
    line of code should be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the `Awake()` method, change `currentBeetleCount = 0;` to `currentBeetleCount
    =1;`.  This will help ensure the game does not think there are no Cucumber Beetles
    when the game starts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following statement as the final statement in the `Update()` method:
    `currentBeetleCount = beetles.Length;`. This will update the `currentBeetleCount`
    variable for each frame.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are now ready to test the game. Kill all your Cucumber Beetles to test
    the code changes you made. If something does not work correctly or you receive
    errors, please refer to the following updated `BeetleManager` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that the victory condition has been implemented, we are ready to implement
    our defeat conditions. We will do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing defeat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two game conditions in which the player can lose the game. The first
    condition is if there are no cucumbers left in the game. The second condition
    is if all three lives are gone. Let's look at each of these defeat conditions
    separately.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting defeat based on no cucumbers remaining
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our `CucumberManager` script already keeps track of the number of cucumbers
    in the game, so we merely need to give that script's `currentCucumberCount` class
    variable the static modifier and then update our `VictoryManager` script. Here
    are the steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `CucumberManager` script so the `currentCucumberCount` variable declaration
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the `Awake()` method, change `currentCucumberCount = 0;` to `currentCucumberCount
    = 1;`. This will help ensure the game does not think there are no cucumbers when
    the game starts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following statement at the end of the `Update()` method, `currentCucumberCount = cucumbers.Length;`.
    This will keep the counter updated in each frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Those were the only changes needed for the `CucumberManager` script. Next,
    we will edit the `VictoryManager` script:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `VictoryManager` script by adding the `int cucumberCount;` class variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code to the bottom of the `Update()` method. These
    lines will continually check to see whether there are no cucumbers remaining and
    display the You Lost! text when the count equals zero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You are now ready to test this defeat condition.
  prefs: []
  type: TYPE_NORMAL
- en: You can speed up your testing by deleting cucumbers from the Hierarchy panel
    when in game mode. When you exit game mode, all deleted objects will be restored.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting defeat for no lives remaining
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `CucumberManManager` script to keep track of the number of
    lives the Cucumber Man has remaining. Edit that script and make the following
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `public static int livesRemaining;` class variable. We will use this
    variable to track the number of remaining lives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `public Animator anim;` class variable. We will use this to play the
    Cucumber Man's death animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `livesRemaining = 3;` statement to the bottom of the `Awake()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `if` statement block to the bottom of the `Update()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the changes to our `Update()` method, we are simply checking
    the value of `livesRemaining` and, when no lives remain, we play the appropriate
    death animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test this defeat condition by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `static` modifier from the `public static int livesRemaining` statement
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the game in game-mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, click the `CucumberMan` GameObject
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, scroll to the Cucumber Man Manager (Script) component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the Lives Remaining to `0` (zero). See the following screenshot for
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be498c7e-b996-4414-9e47-4ae6bc0055c2.png)'
  prefs: []
  type: TYPE_IMG
- en: When your testing is complete, put the `static` modifier back into the statement
    from step 1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating the HUD with lives remaining
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we modified the `CucumberManManager` script to track
    the number of lives our player has remaining and, when none were left, the appropriate
    animation was played. In this section, we will continue modifying the `CucumberManManager`
    script to update the HUD with the number of lives remaining.
  prefs: []
  type: TYPE_NORMAL
- en: 'We only need to modify the `CucumberManManager` script''s `Update()` method.
    The completed `Update()` method is provided here with an explanation of the changes
    made:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We added conditional statements to check for the number of lives remaining.
    When two are left, we destroy the third life image. We destroy the second one
    when only one life remains, and destroy the first life image when no life remains.
    We used the `Destroy()` method to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting the player character's respawning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we modified the `CucumberManManager` script to track
    how many lives remain and to destroy the UI image elements as appropriate. In
    this section, we will modify that script to accomplish the following when a life
    is lost:'
  prefs: []
  type: TYPE_NORMAL
- en: Play the die animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respawn the player on a respawn pad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start by modifying the `CucumberManManager` script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following class variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the Hierarchy panel, select the `CucumberMan` GameObject and, in the Inspector
    panel, scroll until you locate the Cucumber Man Manager (Script) component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag `SpawnPad1`, `SpawnPad2`, and `SpawnPad3` from the Hierarchy view to the
    designated spots in the Inspector panel. See the following for details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b9033e5-038d-4ba4-97d4-590066db7680.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Modify the bottom section of the `Update()` method, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Reviewing the preceding code reveals that there are three conditions being
    checked based on the value of the `livesRemaining` variable. In each case, the
    appropriate UI image component is removed from the HUD, and we play the `CM_Die`
    animation. For the first two cases (`livesRemaining` equals two or one), we have
    a `StartCoroutine("RespawnCucumberMan");` method call. We will write that method
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the `ReSpawnCucumberMan()` method. Enter the following code after the
    `OnTriggerEnter()` methods in the `CucumberManManager` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Our `ReSpawnCucumberMan()` method starts by obtaining a random number of `1`,
    `2`, or `3`. We then check to see which random number was generated, and branch
    appropriately. We have a four-second delay in order for the die animation to complete.
    We then respawn the Cucumber Man to the spawn pad corresponding with the randomly
    generated number. Lastly, we play the idle animation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we designed and scripted our game's victory and defeat conditions.
    We updated our game's scripts to manage the Cucumber Man's health, including updating
    the HUD's health bar. We implemented our victory and end-of-game logic through
    scripting. We also implemented the lives remaining and the onscreen indicators
    of those lives. Lastly, we scripted the respawning of our player character.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will plan and implement audio and visual effects in
    our game to help enhance overall game play. Specifically, we will add audio to
    key events in our combat system and add several special effects using Unity's
    particle system to add to the game's visual appeal.
  prefs: []
  type: TYPE_NORMAL
