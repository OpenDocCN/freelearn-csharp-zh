- en: Building a Web Client (Consuming Web Services)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have created RESTful services so that we can call or
    consume these services either within or from outside the project. In this chapter,
    we will discuss some use cases of these services, as well as the techniques and
    approaches for consuming RESTful web services.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Consuming RESTful web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a REST web client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming RESTful web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have created RESTful services and discussed server-side code with
    the help of code examples. We have consumed these services using external third-party
    tools, such as Postman and Advanced RESTClient. We have also consumed these services
    using fake objects and during unit testing. While helpful, these examples of consumption
    have not shown the true strength of RESTful services, as they have either tested
    their functionality or verified its output.
  prefs: []
  type: TYPE_NORMAL
- en: 'There may be situations where you will need to consume or use these services
    within another application similar to a controller, or even your own application
    itself. These applications can be any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Console based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile or any other device based
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at one of the applications we''ve already discussed: let''s
    say you need some mechanism to implement or consume an external API (in this case,
    PayPal) while integrating an online payment system. In this case, the external
    tools we''ve already covered, such as Postman and Advanced RESTClient can’t help;
    to meet your needs, you require a REST client.'
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram illustrates how services can be consumed using a REST
    client with the help of an HTTP client. In the following diagram, the REST client
    is interacting (request, response) with both external and network services that
    have been developed in ASP.NET Core or are located on either the same or a different
    server.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a80a5a5f-efbd-4d42-a85e-16b910703271.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Web**, **Console**, **Mobile**, and so on, are the clients consuming these
    services with the help of the REST client.'
  prefs: []
  type: TYPE_NORMAL
- en: We will now discuss how to build a REST client that we can use to consume other
    RESTful web services (that is, APIs) in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Building a REST web client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RESTful services may or may not be a part of a web application. A web application
    may call or consume external APIs or services from the same application. The program
    that enables the interaction or communication (request, response) between the
    services and the application consuming those services is called a **client**.
  prefs: []
  type: TYPE_NORMAL
- en: A client helps applications to communicate (Request, Response) with APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will create a web client. A web client is an application
    or program written in ASP.NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Before we build a test web client, we need to discuss what we have to call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing our example of the FlixOne BookStore, the following table lists
    the produces and services that we will call and consume:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **API resource** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `GET /api/product` | Gets a list of products. |'
  prefs: []
  type: TYPE_TB
- en: '| `GET /api/product{id}` | Gets a product. |'
  prefs: []
  type: TYPE_TB
- en: '| `PUT /api/product{id}` | Updates an existing product. |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE /api/product{id}` | Deletes an existing product. |'
  prefs: []
  type: TYPE_TB
- en: '| `POST /api/product` | Adds a new product. |'
  prefs: []
  type: TYPE_TB
- en: 'Our FlixOne product service is designed for the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating an existing product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an existing product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have already ensured Swagger support for our product APIs (please refer
    to the previous chapters for more information), so let''s get going. To start
    with this project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, run Visual Studio 2017
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select File | Open
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the project FlixOne.BookStore.ProductService
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the project by pressing *F5* or clicking directly from the menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following URL: `http://localhost:10065/swagger/`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see Swagger documentation for your Product APIs, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4202f70f-415a-491c-affe-7cf9831b0210.png)'
  prefs: []
  type: TYPE_IMG
- en: Product APIs documentation
  prefs: []
  type: TYPE_NORMAL
- en: Cooking the web client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already discussed what APIs need to consume and which resource returns
    what, so now it''s time to cook our web client so we can consume and call our
    product APIs. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To create an entirely new solution for our new project, go to File | New | Project
    (or press *Ctrl* + *Shift* + *N*) as shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f232c75-ae75-41b4-84b9-5ff7b5735f92.png)'
  prefs: []
  type: TYPE_IMG
- en: From New Project, select ASP.NET Core Web Application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the project `FlixOne.BookStore.WebClient` and then click OK as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4dd65c06-4f52-43fd-9c75-68a654d22aae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the ASP.NET Core template window, select Web Application and click OK
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8014e2a-003d-4805-8349-e71cb4fc5e87.png)'
  prefs: []
  type: TYPE_IMG
- en: Now run the project Debug | Start Debugging or hit the *F5* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see a default website template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now create a web client using **RestSharp**. We need to add the support
    of RestSharp to get the facility to make a call over the HTTP protocol for our
    API resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RestSharp is a lightweight HTTP client library. You can make changes to suit
    your needs, as it is an open source library. You can find the complete repository
    at [https://github.com/restsharp/RestSharp](https://github.com/restsharp/RestSharp)
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a NuGet package using Open Package Manager (right-click on Solution from
    Solution Explorer), as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c88554eb-4b19-480f-8597-e0b8d2645b0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Search for RestSharp and check the checkbox saying include prerelease, and
    then click Install as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64ac9dd2-1ba4-409d-a422-2104d598a3f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the RestSharp NuGet package
  prefs: []
  type: TYPE_NORMAL
- en: 'The required packages will now be installed, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65a1722d-161f-4ab7-a8d5-0e24d31e113d.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing the RestSharp package
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going forward, let''s first make sure that our product APIs are working
    correctly. Run the product API project, open Swagger, and hit a `GET /api/product/productlist`
    resource as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2bd41c1-e23c-40be-805d-0fefb43d419d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After executing the previous resource, you should see a complete list of products,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbc16f11-5f14-4aa5-bbf3-a41d6d6c9cc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Try all available resources to make sure that your product APIs are working
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Writing code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have cooked the things required for writing code for our REST web
    client; in this section, we will be writing actual code:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a simple code to call or consume your product APIs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you created a new project in the same solution (refer to *step 1* of the
    section *Cooking the web client*), please make sure that the project Product API
    is running before you start your web client project.
  prefs: []
  type: TYPE_NORMAL
- en: Add a new class (*Ctrl* + *Shift* + *C*) in the `Client` folder and name it
    `RestSharpWebClient`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2981769f-110c-479f-a737-834a493a847b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now open the `RestSharpWebClient` class and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code initializes RestClient of RestSharp and accepts the base
    URL as a string or a URI.
  prefs: []
  type: TYPE_NORMAL
- en: URI stands for Uniform Resource Identifier and is a representation of a string
    used to identify resources.
  prefs: []
  type: TYPE_NORMAL
- en: You may come across a scenario where there are multiple environments; in this
    case, you should store a URI where you point it as per your environment. For example,
    you can have the URI `http://devserver:10065/api/` for your development environment
    or the URI `http://testenv:10068/api/` for your QA environment. You should store
    these keys in the `config` file or somewhere similar so that the values are easily
    accessible. We recommend using `new RestClient(somevariableforURI);`.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, product APIs are running on localhost and the listening
    port `10065`. This may be different in your case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss the following code snippet to call or consume the `GET /api/product
    /productlist` resource and populate the complete product list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are making a `GET` request using `RestRequest`, where we passed a resource
    and method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a particular product using `productid`, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, the `GetProductDetails` method does a similar thing
    to the method `GetProducts`. The difference is that it accepts the parameter `productId`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete code of our REST client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code snippet, you have now added the functionality that will
    call and consume your product APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a REST web client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RESTful services may or may not be a part of your web application, but we still
    need to understand how to implement them.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, now it''s time to do some real work. Add `ProductController` to the project,
    as well as the following action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the preceding code snippet. We have called the `GetProducts`
    method of `RestSharpWebClient` and populated our `Index.cshtml` view with a complete
    list of products.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add another action method, enter the following complete code of our `ProductController`.
    The following code snippet contains the `Index` action method and gives us a list
    of products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let's now look at two `Create` action methods: `HttpGet` and `HttpPost`. The
    first one provides us with an entry screen for input and the second posts all
    the data (the input values) using the `HttpPost` method. On the server side, you
    can receive all data in an `IFormCollection` parameter, and you can also easily
    write logic to get all of your values in `ProductViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can also write a `HttpPost` method that accepts a parameter of the type `ProductViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows us the code for the `Edit` action method,
    which is similar to the `Create` action method but except that it updates existing
    data rather than inserting new data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Delete` action method is meant to remove a specific record or data from
    a database or collection. The action method `Delete` of `HttpGet` fetches a record
    based on a given ID and displays the data ready for modification. Another `Delete` action
    of `HttpPost` sends modified data to the server for further processing. This means
    the system can delete data and records.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s open `_Layout.cshtml` from the `Shared` folder and add the following
    line to add a link to our newly added `ProductController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a new menu named Web Client when you run the project, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0860e52c-5016-46d2-a6df-d0812d31377e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now ready to see some results. Click on the Web Client menu, and you
    will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1626a7e2-dcdc-4ad2-983c-4410f4e9784a.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screen, you can perform other operations, as well as call
    and consume your product APIs—namely, Create, Edit, and Delete.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The creation of RESTful services is important for any project, but these services
    are of no use if there is no way of using them. In this chapter, we looked at
    how to add RestSharp support to our web project and consume our pre-developed
    product APIs. We also created a web client that could consume web services by
    rendering output on our web pages using ASP.NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the hot topic of microservices, the next
    level of the separation of services. We will discuss how microservices communicate,
    what their advantages are, and why we require them.
  prefs: []
  type: TYPE_NORMAL
