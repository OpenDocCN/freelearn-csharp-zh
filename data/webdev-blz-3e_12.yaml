- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Debugging the Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试代码
- en: In this chapter, we will take a look at debugging. The debugging experience
    of Blazor is a good one; hopefully, you haven’t gotten stuck earlier on in the
    book and had to jump to this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨调试。Blazor 的调试体验很好；希望你在本书前面的章节中没有遇到难题，不得不跳到这一章。
- en: Debugging code is an excellent way to solve bugs, understand the workflow, or
    look at specific values. Blazor has three different ways to debug code, and we
    will look at each one.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 调试代码是解决错误、理解工作流程或查看特定值的一种极好方式。Blazor 有三种不同的调试代码方式，我们将逐一查看。
- en: 'In this chapter, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Making things break
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让事情出问题
- en: Debugging Blazor Server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor Server 调试
- en: Debugging Blazor WebAssembly
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 调试
- en: Debugging Blazor WebAssembly in the browser
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中调试 Blazor WebAssembly
- en: Hot Reload
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热重载
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Make sure you have followed the previous chapters or use the `Chapter11` folder
    as a starting point.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经遵循了前面的章节，或者使用 `Chapter11` 文件夹作为起点。
- en: You can find the source code for this chapter’s end result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter12).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter12)
    找到本章末尾结果的源代码。
- en: If you are jumping into this chapter using the code from GitHub, make sure you
    have added `Auth0` account information in the settings files. You can find the
    instructions in *Chapter 8*, *Authentication and Authorization*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 GitHub 中的代码跳转到本章，请确保你已经在设置文件中添加了 `Auth0` 账户信息。你可以在 *第 8 章*，*身份验证和授权* 中找到说明。
- en: To debug something, we should first make something break!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试某个东西，我们首先应该让它出点问题！
- en: Making things break
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让事情出问题
- en: Edsger W. Dijkstra once said,
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 艾德加·W·迪杰斯特拉曾经说过，
- en: '*“If debugging is the process of removing software bugs, then programming must
    be the process of putting them in.”*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*“如果调试是移除软件错误的过程，那么编程就必须是放置它们的过程。”*'
- en: 'This is definitely true in this section because we will add a page that will
    throw an exception:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个部分中，这绝对是真实的，因为我们将添加一个会抛出异常的页面：
- en: In the `SharedComponents` project, in the `Pages` folder, create a new Razor
    component called `ThrowException.razor`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SharedComponents` 项目中，在 `Pages` 文件夹中，创建一个新的 Razor 组件，命名为 `ThrowException.razor`。
- en: 'Replace the contents of the file with the following code block:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件内容替换为以下代码块：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This page shows a button, and when you press it, it throws an exception.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面显示了一个按钮，当你按下它时，它会抛出一个异常。
- en: Great! We have our application’s Ivan Drago (he wants to break us, but we might
    just beat him with some fancy debugging).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们找到了我们应用程序的伊万·德拉戈（它想打败我们，但我们可能用一些花哨的调试技巧打败它）。
- en: The next step is to take a look at Blazor Server debugging.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是查看 Blazor Server 调试。
- en: Debugging Blazor Server
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Blazor Server 调试
- en: If you have debugged any .NET application in the past, you will feel right at
    home. Don’t worry; we will go through it if you haven’t. Debugging Blazor Server
    is just as we might expect and is the best debugging experience of the three different
    types we will cover.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前调试过任何 .NET 应用程序，你会感到非常熟悉。别担心；如果你还没有，我们会带你了解。调试 Blazor Server 就像我们可能预期的那样，并且是我们将要涵盖的三种不同类型中最好的调试体验。
- en: I usually keep my Razor pages in a shared library, and while building my project,
    I use Blazor Server for two reasons. First, running the project is a bit faster,
    and second, the debugging experience is better.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常将我的 Razor 页面放在共享库中，在构建我的项目时，我使用 Blazor Server 的原因有两个。首先，运行项目要快一些，其次，调试体验更好。
- en: Let’s give it a try!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试！
- en: Press *F5* to start the project (this time with debugging).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F5* 启动项目（这次带有调试）。
- en: Using the web browser, navigate to `https://localhost:portnumber/throwexception`
    (the port number may vary).
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器，导航到 `https://localhost:端口号/throwexception`（端口号可能不同）。
- en: Press *F12* to show the web browser developer tools.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F12* 显示网络浏览器开发者工具。
- en: In the developer tools, click **Console**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发者工具中，点击 **控制台**。
- en: Click the **Throw exception** button on our page.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们页面上的 **抛出异常** 按钮。
- en: 'At this point, Visual Studio should request focus, and it should show the exception
    as shown in *Figure 12.1*:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，Visual Studio 应该请求焦点，并且应该显示如图 *图 12.1* 所示的异常：
- en: '![Figure 12.1 – Exception in Visual Studio ](img/B21849_12_01.png)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 12.1 – Visual Studio 中的异常](img/B21849_12_01.png)'
- en: 'Figure 12.1: Exception in Visual Studio'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.1：Visual Studio 中的异常
- en: Press *F5* to continue and switch back to the web browser. We should now be
    able to see the exception message in the developer tools, as shown in *Figure
    12.2*:![Figure 12.2 – Exception in the web browser](img/B21849_12_02.png)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*继续并切换回网页浏览器。我们现在应该能够在开发者工具中看到异常信息，如图*图12.2*所示：![图12.2 – 网页浏览器中的异常](img/B21849_12_02.png)
- en: 'Figure 12.2: Exception in the web browser'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.2：网页浏览器中的异常
- en: As we can see in *Figure 12.1* and *Figure 12.2*, we get the exception both
    in Visual Studio while debugging and also in the developer tools.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们在*图12.1*和*图12.2*中看到的那样，我们在Visual Studio调试时以及在开发者工具中都会遇到异常。
- en: This makes it quite easy to find the problem if there is an exception in an
    app in production (perish the thought) – that feature has saved us many times.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在生产应用程序中发生异常，这会使问题变得非常容易找到（但愿不会发生）——这个功能已经帮我们节省了很多时间。
- en: 'Now let’s try a breakpoint:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们尝试一个断点：
- en: In Visual Studio, open `Pages/Home.razor`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，打开`Pages/Home.razor`。
- en: Anywhere in the `LoadPosts` method, set a breakpoint by clicking the leftmost
    border (making a red dot appear). We can also add a breakpoint by pressing *F9*.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LoadPosts`方法的任何地方，通过点击最左边的边框（出现一个红色圆点）来设置断点。我们也可以通过按*F9*来添加断点。
- en: Go back to the web browser and navigate to `https://localhost:portnumber/` (the
    port number may vary).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回网页浏览器并导航到`https://localhost:portnumber/`（端口号可能不同）。
- en: Visual Studio should now hit the breakpoint, and by hovering over variables,
    we should be able to see the current values.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio现在应该会触发断点，通过悬停在变量上，我们应该能够看到当前的值。
- en: Both breakpoints and exception debugging work as we might expect. Next, we will
    take a look at debugging Blazor WebAssembly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 断点和异常调试都按预期工作。接下来，我们将看看如何调试Blazor WebAssembly。
- en: Debugging Blazor WebAssembly
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Blazor WebAssembly调试
- en: Blazor WebAssembly can, of course, be debugged as well. There are a couple of
    things to keep in mind. Debugging `InteractiveWebAssembly`, like we are using
    in our blog, is going to work just the same as with Blazor Server. Breakpoints
    and exceptions will work just the same. However, there is an option to run Blazor
    WebAssembly as a standalone app. And that works a bit differently.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly当然也可以进行调试。有几件事情需要记住。像我们在博客中使用的`InteractiveWebAssembly`进行调试，将会与Blazor
    Server一样工作。断点和异常将按预期工作。然而，有一个选项可以将Blazor WebAssembly作为一个独立的应用程序运行。这会有一些不同。
- en: To be able to play around with that, we need to add another project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够玩转这个，我们需要添加另一个项目。
- en: Right-click on the **MyBlog solution**, select **Add**, **New Project**…, and
    select **Blazor WebAssembly Standalone App**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**MyBlog解决方案**，选择**添加**，**新建项目**…，然后选择**Blazor WebAssembly独立应用程序**。
- en: Change the project name to `BlazorWebAssemblyApp`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目名称更改为`BlazorWebAssemblyApp`。
- en: Leave the default values as is and click **Create**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认值不变并点击**创建**。
- en: Right-click on our **BlazorWebAssemblyApp** project and select **Set as Startup
    Project**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击我们的**BlazorWebAssemblyApp**项目并选择**设置为启动项目**。
- en: In the **Pages** folder, open `Counter.razor` and add a breakpoint on the `currentCount++`
    row.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Pages**文件夹中，打开`Counter.razor`并在`currentCount++`行上设置断点。
- en: Run the project by pressing *F5*, and lo and behold, the breakpoint is hit.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*F5*来运行项目，看看会发生什么，断点被触发了。
- en: This has not always been the case, and I was actually pleasantly surprised it
    worked that well. In previous versions of .NET, you had to click on another page
    and then back to have breakpoints hit.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不总是这样，我实际上对它工作得如此之好感到非常高兴。在.NET的早期版本中，你必须点击另一个页面然后再回来才能触发断点。
- en: 'Debugging Blazor WebAssembly is made possible by the following line of code
    in the `launchSettings.json` file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly的调试是通过`launchSettings.json`文件中的以下代码行实现的：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But it is supplied for us when we create the project, so we don’t need to add
    that manually.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但它在我们创建项目时已经为我们提供了，所以我们不需要手动添加。
- en: 'Now let’s see what happens with our exception:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看我们的异常会发生什么：
- en: Copy our `ThrowException.razor` file and put it in the `BlazorWebAssemblyApp/Pages`
    folder.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制我们的`ThrowException.razor`文件并将其放入`BlazorWebAssemblyApp/Pages`文件夹。
- en: In the copied file, remove the `@rendermode` line. Since the WebAssembly project
    is all WebAssembly, we don’t need to specify render mode.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复制的文件中，删除`@rendermode`行。由于WebAssembly项目全是WebAssembly，我们不需要指定渲染模式。
- en: In the web browser, navigate to `https://localhost:portnumber/throwexception`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中，导航到`https://localhost:portnumber/throwexception`。
- en: Click the **Throw exception** button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**抛出异常**按钮。
- en: 'The unhandled exception won’t get hit in Visual Studio. We get the exception
    in the developer tools in the web browser, as shown in *Figure 12.3*:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中不会遇到未处理的异常。我们将在网页浏览器的开发工具中遇到异常，如图 12.3 所示：
- en: '![Figure 12.3 – WebAssembly error](img/B21849_12_03.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – WebAssembly 错误](img/B21849_12_03.png)'
- en: 'Figure 12.3: WebAssembly error'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3：WebAssembly 错误
- en: The debugging experience in Blazor WebAssembly is not as polished as with Blazor
    Server, but it is polished enough to get the job done.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 的调试体验不如 Blazor Server 那么精致，但它已经足够精致，可以完成这项工作。
- en: We have one method left to explore – debugging in the web browser.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还剩下一种方法可以探索——在网页浏览器中进行调试。
- en: Debugging Blazor WebAssembly in the web browser
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网页浏览器中调试 Blazor WebAssembly
- en: 'The first debugging experience for Blazor WebAssembly was the ability to debug
    right in the web browser:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 的第一次调试体验是能够在网页浏览器中进行调试：
- en: In Visual Studio, start the project by pressing *Ctrl* + *F5* (run without debugging).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，按 *Ctrl* + *F5* 启动项目（不进行调试）。
- en: In the web browser, press *Shift* + *Alt* + *D*.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中，按 *Shift* + *Alt* + *D*。
- en: We will get an error message with instructions on how to start the web browser
    in debug mode.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将获得一个错误消息，其中包含如何以调试模式启动网页浏览器的说明。
- en: 'I am running Edge, so the way to start Edge would be something like this:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我正在运行 Edge，因此启动 Edge 的方式可能如下所示：
- en: '[PRE2]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `port` and `user-data-dir` values will differ from the example above. Copy
    the command from your web browser.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`port` 和 `user-data-dir` 的值将与上面的示例不同。从您的网页浏览器中复制命令。'
- en: Press *Win* + *R* and paste the command.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Win* + *R* 并粘贴命令。
- en: A new instance of Chrome or Edge will open. In this new instance, press *Shift*
    + *Alt* + *D*.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会打开一个新的 Chrome 或 Edge 实例。在这个新实例中，按 *Shift* + *Alt* + *D*。
- en: We should now see a **Sources** tab containing C# code from our project. From
    here, we can put breakpoints that will be hit and hover over variables. Make sure
    to have only this tab open in the web browser (not multiple tabs open).
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在应该看到一个包含来自我们项目的 C# 代码的**源**选项卡。从这里，我们可以设置将被触发的断点并悬停在变量上。请确保在网页浏览器中只打开此选项卡（而不是多个选项卡）。
- en: 'The debug UI can be seen in *Figure 12.4*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 调试用户界面可以在图 12.4 中看到：
- en: '![Figure 12.4 – Screenshot of the in-browser debug](img/B21849_12_04.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4 – 浏览器内调试的截图](img/B21849_12_04.png)'
- en: 'Figure 12.4: Screenshot of the in-browser debug UI'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4：浏览器内调试用户界面的截图
- en: Debugging C# code in the browser is pretty amazing, but since we have been directly
    debugging in Visual Studio, I don’t see much use for this kind of debugging.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中调试 C# 代码非常令人惊叹，但由于我们一直在 Visual Studio 中直接进行调试，我认为这种调试用途不大。
- en: Next, we will look at something that might not fall under debugging but is useful
    while developing Blazor apps.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨一些可能不属于调试但开发 Blazor 应用程序时很有用的内容。
- en: Hot Reload
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热重载
- en: In Visual Studio and the **dotnet CLI**, we can enable **Hot Reload**. This
    means that as soon as we make changes in our application, our Blazor app will
    automatically get reloaded, and we will (in most cases) not lose the state.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 和 **dotnet CLI** 中，我们可以启用**热重载**。这意味着只要我们在应用程序中进行更改，我们的 Blazor
    应用程序就会自动重新加载，并且（在大多数情况下）我们不会丢失状态。
- en: 'To set this up, do the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置此功能，请执行以下操作：
- en: In Visual Studio, there is a small fire icon. We can use this button to trigger
    **Hot Reload** manually.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，有一个小火焰图标。我们可以使用此按钮手动触发**热重载**。
- en: It is only clickable when the application is running (with or without debugging).
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有当应用程序正在运行时（无论是否进行调试）才可点击。
- en: Select the **Hot Reload on File Save** option.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**文件保存时热重载**选项。
- en: Start the project by pressing *Ctrl* + *F5*.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *F5* 启动项目。
- en: In the web browser, bring up the counter page by adding `/counter` to the URL.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中，通过将 `/counter` 添加到 URL 来打开计数器页面。
- en: Make a change to the `/Pages/Counter.razor` file and click **Save**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `/Pages/Counter.razor` 文件并点击**保存**。
- en: Our web browser should now reload, and the change will be shown. At the time
    of writing, my Hot Reload did not find any changes when running in Visual Studio,
    but it did work with `dotnet watch`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的网页浏览器应该会重新加载，并且更改将显示出来。在撰写本文时，我的热重载在 Visual Studio 中运行时没有找到任何更改，但使用 `dotnet
    watch` 时它确实有效。
- en: Hot Reload does save time and is pretty amazing. Not having to recompile the
    project and start up a web browser and seeing the changes in the browser just
    seconds after you save the file is simply amazing. However, there are some cases
    where our site behaves oddly, and then we need to rebuild. Therefore, you need
    to remember that if there is an unexplainable issue, you might need to build the
    project again.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 热重载确实节省了时间，而且非常神奇。无需重新编译项目、启动浏览器，只需在保存文件后几秒钟就能在浏览器中看到更改，这简直令人惊叹。然而，有些情况下我们的网站表现异常，这时我们就需要重新构建。因此，你需要记住，如果遇到无法解释的问题，你可能需要再次构建项目。
- en: 'This also works from the command line by running the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以通过运行以下命令从命令行进行：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Hot reload gets better and better with each release. I usually run preview versions
    of Visual Studio to get the best experience, but that can also sometimes have
    its drawbacks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 热重载随着每个版本的发布而越来越好。我通常运行 Visual Studio 的预览版以获得最佳体验，但这也可能有时有其缺点。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter looked at different ways to debug our Blazor application. There
    will always be moments when we need to step through the code to find a bug or
    see what is happening. When these moments are upon us, Visual Studio delivers
    world-class functionality to help us achieve our goals.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了调试我们的 Blazor 应用程序的不同方法。总会有需要逐步检查代码以找到错误或查看发生了什么的时候。当这些时刻到来时，Visual Studio
    提供了世界级的功能来帮助我们实现目标。
- en: The nice thing is that debugging Blazor applications, whether it’s Blazor Server
    or Blazor WebAssembly, will work as expected from a Microsoft product. We get
    C# errors that are (in most cases) easy to understand and solve.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好处在于，无论是 Blazor 服务器还是 Blazor WebAssembly，调试 Blazor 应用程序都能按照预期从 Microsoft 产品中工作。我们得到的
    C# 错误（在大多数情况下）都很容易理解和解决。
- en: In the next chapter, we will look at testing our Blazor components.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨测试我们的 Blazor 组件。
