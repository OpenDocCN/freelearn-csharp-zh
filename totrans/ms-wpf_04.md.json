["```cs\n{Binding Path=.} \n```", "```cs\n{Binding .} \n```", "```cs\n{Binding} \n```", "```cs\n{Binding PropertyName} \n```", "```cs\n{Binding PropertyName.AnotherPropertyName} \n```", "```cs\n{Binding [0].PropertyName} \n```", "```cs\n{Binding CollectionPropertyName[0].PropertyName} \n```", "```cs\n{Binding CollectionPropertyName[0, 0].PropertyName} \n{Binding CollectionPropertyName[0, 0, 0].PropertyName} \n... \n```", "```cs\n{Binding CollectionPropertyName/PropertyName} \n```", "```cs\n<StackPanel> \n  <ListBox ItemsSource=\"{Binding Users}\" \n    IsSynchronizedWithCurrentItem=\"True\" /> \n  <TextBlock Text=\"Selected User's Name:\" /> \n  <TextBlock Text=\"{Binding Users/Name}\" /> \n</StackPanel> \n```", "```cs\n<StackPanel> \n  <ListBox Name=\"ListBox\" ItemsSource=\"{Binding Users}\"  \n    IsSynchronizedWithCurrentItem=\"True\" /> \n  <TextBlock Text=\"Selected User's Name:\" /> \n  <TextBlock Text=\"{Binding SelectedItem.Name, ElementName=ListBox}\" /> \n</StackPanel> \n```", "```cs\n{Binding CollectionPropertyName/InnerCollectionPropertyName/PropertyName} \n```", "```cs\n{Binding (ClassName.PropertyName)} \n```", "```cs\n{Binding (XmlNamespacePrefix:ClassName.PropertyName)} \n```", "```cs\n{Binding Path=(Attached:TextBoxProperties.Label), \n  RelativeSource={RelativeSource AncestorType={x:Type TextBox}}}\n```", "```cs\n<TextBox Text=\"{Binding Description, \n  UpdateSourceTrigger=PropertyChanged, Delay=400}\" /> \n```", "```cs\n<TextBox Text=\"{Binding Name, TargetNullValue='Please enter your name'}\" />\n```", "```cs\n<Image Source=\"{Binding InternetSource, IsAsync=True, \n  FallbackValue='pack://application:,,,/CompanyName.ApplicationName;\n  component/Images/Default.png'}\" /> \n```", "```cs\n<TextBlock Text=\"{Binding Price, StringFormat='{0:C2}'}\" /> \n```", "```cs\n<TextBlock Text=\"{Binding Price, StringFormat={}{0:C2}}\" /> \n```", "```cs\n<StackPanel> \n  <TextBlock DataContext=\"{Binding User}\" Text=\"{Binding Name}\" /> \n  <TextBlock DataContext=\"{Binding User}\" Text=\"{Binding Age}\" /> \n</StackPanel> \n```", "```cs\n<StackPanel DataContext=\"{Binding User}\"> \n  <TextBlock Text=\"{Binding Name}\" /> \n  <TextBlock Text=\"{Binding Age}\" /> \n</StackPanel> \n```", "```cs\n<TextBlock Text=\"{Binding Source={x:Static System:DateTime.Today}, \n  Mode=OneTime, StringFormat='{}Â© {0:yyyy} CompanyName'}\" /> \n```", "```cs\n<DataTemplate DataType=\"{x:Type DataModels:User}\"> \n  <StackPanel> \n    <TextBlock Text=\"{Binding Name}\" /> \n    <TextBlock Text=\"{Binding DataContext.UserCount,   \n      RelativeSource={RelativeSource Mode=FindAncestor, \n      AncestorType={x:Type Views:UserView}}}\" /> \n  </StackPanel> \n</DataTemplate> \n```", "```cs\n<TextBlock Text=\"{Binding DataContext.UserCount,  \n  RelativeSource={RelativeSource \n  AncestorType={x:Type Views:UserView}}}\" /> \n```", "```cs\n<StackPanel Tag=\"Outer\"> \n  ... \n  <StackPanel Orientation=\"Horizontal\" Tag=\"Inner\"> \n    <TextBlock Text=\"{Binding Tag, RelativeSource={RelativeSource \n      Mode=FindAncestor, AncestorType={x:Type StackPanel}, \n      AncestorLevel=2}}\" /> \n    ... \n  </StackPanel> \n</StackPanel> \n```", "```cs\n<Rectangle Height=\"{Binding ActualWidth, \n  RelativeSource={RelativeSource Self}}\" Fill=\"Red\" /> \n```", "```cs\n<ControlTemplate x:Key=\"ProgressBar\" TargetType=\"{x:Type ProgressBar}\"> \n  ... \n  <TextBlock Text=\"{Binding Value, \n    RelativeSource={RelativeSource TemplatedParent}}\" /> \n  ... \n</ControlTemplate> \n```", "```cs\n<StackPanel Orientation=\"Horizontal\" Margin=\"20\"> \n  <CheckBox Name=\"Checkbox\" Content=\"Service\" Margin=\"0,0,10,0\" /> \n  <TextBox Text=\"{Binding Service}\" \n    Visibility=\"{Binding IsChecked, ElementName=Checkbox, \n    Converter={StaticResource BoolToVisibilityConverter}}\" /> \n</StackPanel> \n```", "```cs\n<DataTemplate DataType=\"{x:Type DataModels:User}\"> \n  <StackPanel> \n    <TextBlock Text=\"{Binding Name}\" /> \n    <TextBlock Text=\"{Binding DataContext.UserCount, ElementName=This}\" /> \n  </StackPanel> \n</DataTemplate> \n```", "```cs\n<TextBlock> \n  <TextBlock.Text> \n    <PriorityBinding> \n      <Binding Path=\"SlowString\" IsAsync=\"True\" /> \n      <Binding Path=\"FastString\" Mode=\"OneWay\" /> \n    </PriorityBinding> \n  </TextBlock.Text> \n</TextBlock> \n```", "```cs\npublic string FastString \n{ \n  get { return \"The value is being calculated...\"; } \n} \n```", "```cs\n<ControlTemplate x:Key=\"ProgressBar\" TargetType=\"{x:Type ProgressBar}\"> \n  ... \n  <TextBlock Text=\"{TemplateBinding Value}\" /> \n  ... \n</ControlTemplate> \n```", "```cs\n<TextBlock Text=\"{Binding Value, \n  RelativeSource={RelativeSource TemplatedParent}}\" /> \n```", "```cs\nBindingExpression bindingExpression = \n  BindingOperations.GetBindingExpression(textBox, TextBox.TextProperty); \nbindingExpression.UpdateSource(); \n```", "```cs\ntextBox.GetBindingExpression(TextBox.TextProperty); \n```", "```cs\npublic interface IValueConverter \n{ \n  object Convert(object value, Type targetType, object parameter,  \n    CultureInfo culture); \n  object ConvertBack(object value, Type targetType, object parameter,  \n    CultureInfo culture); \n} \n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  [ValueConversion(typeof(Enum), typeof(bool))] \n  public class EnumToBoolConverter : IValueConverter \n  { \n    public bool IsInverted { get; set; } \n\n    public object Convert(object value, Type targetType, object parameter,\n      CultureInfo culture) \n    { \n      if (value == null || parameter == null || (value.GetType() !=\n        typeof(Enum) && value.GetType().BaseType != typeof(Enum)))  \n        return DependencyProperty.UnsetValue; \n      string enumValue = value.ToString(); \n      string targetValue = parameter.ToString(); \n      bool boolValue = enumValue.Equals(targetValue,  \n        StringComparison.InvariantCultureIgnoreCase); \n      return IsInverted ? !boolValue : boolValue; \n    } \n\n    public object ConvertBack(object value, Type targetType, \n      object parameter, CultureInfo culture)\n    { \n      if (value == null || parameter == null) \n        return DependencyProperty.UnsetValue; \n      bool boolValue = (bool)value; \n      string targetValue = parameter.ToString(); \n      if ((boolValue && !IsInverted) || (!boolValue && IsInverted))  \n        return Enum.Parse(targetType, targetValue); \n      return DependencyProperty.UnsetValue; \n    } \n  } \n} \n```", "```cs\nusing System.Collections.ObjectModel; \nusing CompanyName.ApplicationName.DataModels.Enums;  \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.ViewModels \n{ \n  public class BitRateViewModel : BaseViewModel \n  { \n    private ObservableCollection<BitRate> bitRates = \n      new ObservableCollection<BitRate>();\n    private BitRate bitRate = BitRate.Sixteen; \n\n    public BitRateViewModel() \n    { \n      bitRates.FillWithMembers(); \n    } \n\n    public ObservableCollection<BitRate> BitRates \n    { \n      get { return bitRates; } \n      set { if (bitRates != value) { bitRates = value; \n        NotifyPropertyChanged(); } } \n    } \n\n    public BitRate BitRate \n    { \n      get { return bitRate; } \n      set { if (bitRate != value) { bitRate = value;  \n        NotifyPropertyChanged(); } } \n    } \n  } \n}\n```", "```cs\npublic static void FillWithMembers<T>(this ICollection<T> collection) \n{ \n  if (typeof(T).BaseType != typeof(Enum)) \n    throw new ArgumentException(\"The FillWithMembers<T> method can only be\n    called with an enum as the generic type.\");\n  collection.Clear(); \n  foreach (string name in Enum.GetNames(typeof(T)))  \n    collection.Add((T)Enum.Parse(typeof(T), name)); \n} \n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.BitRateView\"\n\n  xmlns:Converters=\"clr-namespace:CompanyName.ApplicationName.Converters; \n    assembly=CompanyName.ApplicationName.Converters\"> \n  <UserControl.Resources> \n    <Converters:EnumToBoolConverter x:Key=\"EnumToBoolConverter\" /> \n  </UserControl.Resources> \n  <GroupBox Header=\"Audio Quality\" HorizontalAlignment=\"Left\" \n    VerticalAlignment=\"Top\" Padding=\"5\"> \n    <StackPanel> \n      <RadioButton Content=\"16 bits\" IsChecked=\"{Binding BitRate,  \n        Converter={StaticResource EnumToBoolConverter},  \n        ConverterParameter=Sixteen}\" VerticalContentAlignment=\"Center\" /> \n      <RadioButton Content=\"24 bits\" IsChecked=\"{Binding BitRate,  \n        Converter={StaticResource EnumToBoolConverter}, ConverterParameter=\n        TwentyFour}\" VerticalContentAlignment=\"Center\" /> \n      <RadioButton Content=\"32 bits\" IsChecked=\"{Binding BitRate,  \n        Converter={StaticResource EnumToBoolConverter},  \n        ConverterParameter=ThirtyTwo}\" VerticalContentAlignment=\"Center\" /> \n    </StackPanel> \n  </GroupBox> \n</UserControl> \n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  public class HigherLowerConverter : IMultiValueConverter \n  { \n    public object Convert(object[] values, Type targetType, \n      object parameter, CultureInfo culture) \n    { \n      if (values == null || values.Length != 2 || \n        !(values[0] is int currentValue) || \n        !(values[1] is int previousValue)) \n        return DependencyProperty.UnsetValue;\n      return currentValue > previousValue ? \"->\" : \"<-\";\n    } \n\n    public object[] ConvertBack(object value, Type[] targetTypes, \n      object parameter, CultureInfo culture) \n    { \n      return new object[2] { DependencyProperty.UnsetValue,  \n        DependencyProperty.UnsetValue }; \n    } \n  } \n} \n```", "```cs\nusing System.Collections.Generic; \n\nnamespace CompanyName.ApplicationName.ViewModels \n{ \n  public class WeightMeasurementsViewModel : BaseViewModel \n  { \n    private List<int> weights = \n      new List<int>() { 90, 89, 92, 91, 94, 95, 98, 99, 101 }; \n\n    public List<int> Weights \n    { \n      get { return weights; } \n      set { weights = value; NotifyPropertyChanged(); } \n    } \n  } \n} \n```", "```cs\n<UserControl \n  x:Class=\"CompanyName.ApplicationName.Views.WeightMeasurementsView\" \n\n  xmlns:Converters=\"clr-namespace:CompanyName.ApplicationName.Converters; \n    assembly=CompanyName.ApplicationName.Converters\" \n  > \n  <UserControl.Resources> \n    <Converters:HigherLowerConverter x:Key=\"HigherLowerConverter\" /> \n  </UserControl.Resources> \n  <Border BorderBrush=\"Black\" BorderThickness=\"1\" CornerRadius=\"5\" \n    HorizontalAlignment=\"Left\" VerticalAlignment=\"Top\"> \n    <ItemsControl ItemsSource=\"{Binding Weights}\" Margin=\"20,20,0,20\"> \n      <ItemsControl.ItemsPanel> \n        <ItemsPanelTemplate> \n          <StackPanel Orientation=\"Horizontal\" /> \n        </ItemsPanelTemplate> \n      </ItemsControl.ItemsPanel> \n      <ItemsControl.ItemTemplate> \n        <DataTemplate DataType=\"{x:Type System:Int32}\"> \n          <StackPanel Margin=\"0,0,20,0\"> \n            <TextBlock Text=\"{Binding}\" /> \n            <TextBlock HorizontalAlignment=\"Center\"> \n              <TextBlock.Text> \n                <MultiBinding \n                  Converter=\"{StaticResource HigherLowerConverter}\"> \n                  <Binding /> \n                  <Binding \n                    RelativeSource=\"{RelativeSource PreviousData}\" /> \n                </MultiBinding> \n              </TextBlock.Text> \n            </TextBlock> \n          </StackPanel> \n        </DataTemplate> \n      </ItemsControl.ItemTemplate> \n    </ItemsControl> \n  </Border> \n</UserControl> \n```", "```cs\npublic static readonly DependencyProperty HoursProperty =\n  DependencyProperty.Register(nameof(Hours), typeof(int), \n  typeof(DurationPicker)); \n\npublic int Hours \n{  \n  get { return (int)GetValue(HoursProperty); } \n  set { SetValue(HoursProperty, value); }  \n} \n```", "```cs\npublic static readonly DependencyProperty HoursProperty =\n  DependencyProperty.Register(nameof(Hours), typeof(int), \n  typeof(DurationPicker), new PropertyMetadata(12), ValidateHours));\n\nprivate static bool ValidateHours(object value) \n{ \n  int intValue = (int)value; \n  return intValue > 0 && intValue < 25; \n} \n```", "```cs\npublic static readonly DependencyProperty HoursProperty = \n  DependencyProperty.Register(nameof(Hours), typeof(int), \n  typeof(DurationPicker), new PropertyMetadata(OnHoursChanged)); \n\nprivate static void OnHoursChanged(DependencyObject dependencyObject,  \n  DependencyPropertyChangedEventArgs e)  \n{ \n  // This is the signature of PropertyChangedCallback handlers \n} \n```", "```cs\npublic static readonly DependencyProperty HoursProperty = \n  DependencyProperty.Register(nameof(Hours), \n  typeof(int), typeof(DurationPicker), \n  new PropertyMetadata((d, e) => ((DurationPicker)d).OnHoursChanged(d,e)));   \n\nprivate void OnHoursChanged(DependencyObject dependencyObject,  \n  DependencyPropertyChangedEventArgs e)  \n{ \n  // This is the signature of non-static PropertyChangedCallback handlers \n} \n```", "```cs\n(d, e) => ((DurationPicker)d).OnHoursChanged(d, e)) \n```", "```cs\n(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n  => \n  ((DurationPicker)dependencyObject).OnHoursChanged(dependencyObject, e)) \n```", "```cs\npublic static readonly DependencyProperty HoursProperty = \n  DependencyProperty.Register(nameof(Hours), \n  typeof(int), typeof(DurationPicker), \n  new PropertyMetadata(0, OnHoursChanged, CoerceHoursValue));\n\n... \n\nprivate static object CoerceHoursValue(DependencyObject dependencyObject,  \n  object value) \n{ \n  // Access the instance of our class from the dependencyObject parameter   \n  DurationPicker durationPicker = (DurationPicker)dependencyObject; \n  int minimumValue = 1, maximumValue = durationPicker.MaximumValue; \n  int actualValue = (int)value; \n  return Math.Min(maximumValue, Math.Max(minimumValue, actualValue)); \n} \n```", "```cs\npublic static readonly DependencyProperty HoursProperty = \n  DependencyProperty.Register(nameof(Hours), typeof(int), \n  typeof(DurationPicker), new FrameworkPropertyMetadata(0, \n  FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, OnHoursChanged,  \n  CoerceHoursValue)); \n```", "```cs\npublic static readonly DependencyProperty HoursProperty = \n  DependencyProperty.Register(nameof(Hours), typeof(int), \n  typeof(DurationPicker), new FrameworkPropertyMetadata(0, \n  FrameworkPropertyMetadataOptions.BindsTwoWayByDefault | \n  FrameworkPropertyMetadataOptions.AffectsMeasure, OnHoursChanged, \n  CoerceHoursValue));\n```", "```cs\npublic static readonly DependencyProperty HoursProperty = \n  DependencyProperty.Register(nameof(Hours), typeof(int), \n  typeof(DurationPicker), new FrameworkPropertyMetadata(0, \n  FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, OnHoursChanged, \n  CoerceHoursValue, false, UpdateSourceTrigger.PropertyChanged)); \n```", "```cs\nprivate static readonly DependencyPropertyKey originalToolTipPropertyKey =\n  DependencyProperty.RegisterReadOnly(\"OriginalToolTip\", typeof(string),  \n  typeof(TooltipTextBox), new PropertyMetadata()); \n\npublic static readonly DependencyProperty OriginalToolTipProperty =  \n  originalToolTipPropertyKey.DependencyProperty; \n\npublic static string GetOriginalToolTip(DependencyObject dependencyObject) \n{ \n  return (string)dependencyObject.GetValue(OriginalToolTipProperty); \n} \n```", "```cs\npublic static DependencyProperty IsFocusedProperty = \n  DependencyProperty.RegisterAttached(\"IsFocused\", \n  typeof(bool), typeof(TextBoxProperties),\n  new PropertyMetadata(false, OnIsFocusedChanged)); \n\npublic static bool GetIsFocused(DependencyObject dependencyObject) \n{ \n  return (bool)dependencyObject.GetValue(IsFocusedProperty); \n} \n\npublic static void SetIsFocused(DependencyObject dependencyObject,  \n  bool value) \n{ \n  dependencyObject.SetValue(IsFocusedProperty, value); \n} \n\npublic static void OnIsFocusedChanged(DependencyObject dependencyObject,  \n  DependencyPropertyChangedEventArgs e) \n{ \n  TextBox textBox = dependencyObject as TextBox; \n  if ((bool)e.NewValue && !(bool)e.OldValue && !textBox.IsFocused)  \n    textBox.Focus(); \n} \n```", "```cs\n\n... \n<TextBox Attached:TextBoxProperties.IsFocused=\"{Binding IsFocused}\" \n  Text=\"{Binding User.Name}\" /> \n```", "```cs\nprivate void Focus() \n{ \n  IsFocused = false; \n  IsFocused = true; \n} \n```", "```cs\n<StackPanel TextElement.FontSize=\"20\"> \n  <TextBlock Text=\"Black Text\" /> \n  <StackPanel Orientation=\"Horizontal\" TextElement.Foreground=\"Red\"> \n    <TextBlock Text=\"Red Text\" /> \n  </StackPanel> \n</StackPanel> \n```", "```cs\n<StackPanel TextElement.FontSize=\"20\"> \n  <TextBlock Text=\"Black Text\" /> \n  <StackPanel Orientation=\"Horizontal\" TextElement.Foreground=\"Red\"> \n    <TextBlock Text=\"Red Text\" Margin=\"0,0,10,0\" /> \n    <TextBlock Text=\"Green Text\"> \n      <TextBlock.Style> \n        <Style TargetType=\"{x:Type TextBlock}\"> \n          <Setter Property=\"Foreground\" Value=\"Green\" /> \n        </Style> \n      </TextBlock.Style> \n    </TextBlock> \n  </StackPanel> \n</StackPanel> \n```", "```cs\n<Button Content=\"Blue Text\" FontSize=\"20\"> \n  <Button.Style> \n    <Style TargetType=\"{x:Type Button}\"> \n      <Setter Property=\"Foreground\" Value=\"Green\" /> \n      <Setter Property=\"Control.Template\"> \n        <Setter.Value> \n          <ControlTemplate TargetType=\"{x:Type Button}\"> \n            <ContentPresenter /> \n            <ControlTemplate.Triggers>                   \n              <Trigger Property=\"IsEnabled\" Value=\"True\"> \n                <Setter Property=\"Foreground\" Value=\"Blue\" /> \n              </Trigger> \n            </ControlTemplate.Triggers> \n          </ControlTemplate> \n        </Setter.Value> \n      </Setter> \n    </Style> \n  </Button.Style> \n</Button> \n```", "```cs\n<Button Content=\"Orange Text\" FontSize=\"20\"> \n  <Button.Style> \n    <Style TargetType=\"{x:Type Button}\"> \n      <Setter Property=\"Foreground\" Value=\"Green\" /> \n      <Setter Property=\"Control.Template\"> \n        <Setter.Value> \n          <ControlTemplate TargetType=\"{x:Type Button}\"> \n            <ContentPresenter /> \n            <ControlTemplate.Triggers> \n              <Trigger Property=\"IsEnabled\" Value=\"True\"> \n                <Setter Property=\"Foreground\" Value=\"Blue\" /> \n              </Trigger> \n            </ControlTemplate.Triggers> \n          </ControlTemplate> \n        </Setter.Value> \n      </Setter> \n      <Style.Triggers> \n        <Trigger Property=\"IsEnabled\" Value=\"True\"> \n          <Setter Property=\"Foreground\" Value=\"Orange\" /> \n        </Trigger> \n      </Style.Triggers> \n    </Style> \n  </Button.Style> \n</Button> \n```", "```cs\n<Style TargetType=\"{x:Type Button}\"> \n  <Setter Property=\"Foreground\" Value=\"Green\" /> \n</Style> \n```", "```cs\n<ControlTemplate TargetType=\"{x:Type Button}\"> \n  <ContentPresenter TextElement.Foreground=\"Red\" /> \n  <ControlTemplate.Triggers> \n    <Trigger Property=\"IsEnabled\" Value=\"True\"> \n      <Setter Property=\"Foreground\" Value=\"Blue\" /> \n    </Trigger> \n  </ControlTemplate.Triggers> \n</ControlTemplate> \n```", "```cs\n<TextBlock Text=\"{Binding Account.Amount, StringFormat={}{0:C}}\"  \n  Foreground=\"Green\"> \n  <TextBlock.Style> \n    <Style TargetType=\"{x:Type TextBlock}\"> \n      <Style.Triggers> \n        <DataTrigger Binding=\"{Binding Account.IsOverdrawn}\" Value=\"True\"> \n          <Setter Property=\"Foreground\" Value=\"Red\" /> \n        </DataTrigger> \n      </Style.Triggers> \n    </Style> \n  </TextBlock.Style> \n</TextBlock> \n```", "```cs\n<TextBlock Text=\"{Binding Account.Amount, StringFormat={}{0:C}}\"> \n  <TextBlock.Style> \n    <Style TargetType=\"{x:Type TextBlock}\"> \n      <Setter Property=\"Foreground\" Value=\"Green\" /> \n      <Style.Triggers> \n        <DataTrigger Binding=\"{Binding Account.IsOverdrawn}\" Value=\"True\"> \n          <Setter Property=\"Foreground\" Value=\"Red\" /> \n        </DataTrigger> \n      </Style.Triggers> \n    </Style> \n  </TextBlock.Style> \n</TextBlock> \n```", "```cs\n<Rectangle Width=\"300\" Height=\"300\" Fill=\"Orange\"> \n  <Rectangle.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard Storyboard.TargetProperty=\"Width\"> \n          <DoubleAnimation Duration=\"0:0:1\" To=\"50\" AutoReverse=\"True\"\n            RepeatBehavior=\"Forever\" /> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </Rectangle.Triggers> \n</Rectangle> \n```", "```cs\n<ItemsControl ItemsSource=\"{Binding Users}\" /> \n```", "```cs\npublic override string ToString() \n{ \n  return Name; \n} \n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public abstract class BaseDataModel : INotifyPropertyChanged \n  { \n    ... \n\n    public abstract override string ToString(); \n  } \n}\n```", "```cs\n<DataTemplate x:Key=\"UserTemplate\" DataType=\"{x:Type DataModels:User}\"> \n  <Border BorderBrush=\"Black\" BorderThickness=\"1\" CornerRadius=\"5\"  \n    Padding=\"5\" Margin=\"0,0,0,5\"> \n    <StackPanel Orientation=\"Horizontal\"> \n      <TextBlock Text=\"{Binding Name}\" Margin=\"0,0,3,0\" /> \n      <TextBlock Text=\"{Binding Age, StringFormat={}({0})}\" /> \n    </StackPanel> \n  </Border> \n</DataTemplate> \n```", "```cs\n<ContentControl Content=\"{Binding Users[0]}\"> \n  <ContentControl.ContentTemplate> \n    <DataTemplate DataType=\"{x:Type DataModels:User}\"> \n      ... \n    </DataTemplate> \n  </ContentControl.ContentTemplate> \n</ContentControl>\n```", "```cs\n<ListBox ItemsSource=\"{Binding Users}\"> \n  <ListBox.ItemTemplate> \n    <DataTemplate DataType=\"{x:Type DataModels:User}\"> \n      ... \n    </DataTemplate> \n  </ListBox.ItemTemplate> \n</ListBox> \n```", "```cs\n<ContentControl Content=\"{Binding Users[0]}\" \n  ContentTemplate=\"{StaticResource UserTemplate}\"> \n  <ContentControl.Resources> \n    <DataTemplate x:Key=\"UserTemplate\" DataType=\"{x:Type DataModels:User}\">\n      ... \n    </DataTemplate> \n  </ContentControl.Resources> \n</ContentControl> \n```", "```cs\n<UserControl.Resources> \n  <DataTemplate x:Key=\"UserTemplate\" DataType=\"{x:Type DataModels:User}\">\n    ... \n  </DataTemplate> \n</UserControl.Resources> \n<ListBox ItemsSource=\"{Binding Users}\" \n  ItemTemplate=\"{StaticResource UserTemplate}\" /> \n```", "```cs\n<DataTemplate DataType=\"{x:Type DataModels:User}\"> \n  ... \n</DataTemplate> \n```", "```cs\n<DataTemplate x:Key=\"InverseUserTemplate\" \n  DataType=\"{x:Type DataModels:User}\"> \n  <Border BorderBrush=\"White\" BorderThickness=\"1\" Background=\"Black\"     \n    TextElement.Foreground=\"White\" CornerRadius=\"5\" Padding=\"8,3,5,5\"\n    Margin=\"0,0,0,5\"> \n    <StackPanel Orientation=\"Horizontal\"> \n      <TextBlock Text=\"{Binding Name}\" Margin=\"0,0,3,0\" /> \n      <TextBlock Text=\"{Binding Age, StringFormat={}({0})}\" /> \n    </StackPanel> \n  </Border> \n</DataTemplate> \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \nusing CompanyName.ApplicationName.DataModels; \n\nnamespace CompanyName.ApplicationName.Views.DataTemplateSelectors \n{ \n  public class UserAgeDataTemplateSelector : DataTemplateSelector \n  { \n    public override DataTemplate SelectTemplate(object item,  \n      DependencyObject container) \n    { \n      FrameworkElement element = container as FrameworkElement; \n      if (element != null && item != null && item is User user) \n      { \n        if (user.Age < 35) return \n          (DataTemplate)element.FindResource(\"InverseUserTemplate\"); \n        else return (DataTemplate)element.FindResource(\"UserTemplate\"); \n      } \n      return null; \n    } \n  } \n} \n```", "```cs\nxmlns:DataTemplateSelectors=\n  \"clr-namespace:CompanyName.ApplicationName.Views.DataTemplateSelectors\"\n```", "```cs\n<DataTemplateSelectors:UserAgeDataTemplateSelector \n  x:Key=\"UserAgeDataTemplateSelector\" />\n```", "```cs\n<ItemsControl ItemsSource=\"{Binding Users}\" Padding=\"10\"  \n  ItemTemplateSelector=\"{StaticResource UserAgeDataTemplateSelector}\" />\n```", "```cs\nusing System.Collections.ObjectModel; \nusing System.Windows.Input; \n\nnamespace CompanyName.ApplicationName.ViewModels \n{ \n  public class MenuItemViewModel : BaseViewModel \n  { \n    private string header = string.Empty; \n    private ICommand command = null; \n    private ObservableCollection<MenuItemViewModel> menuItems = \n      new ObservableCollection<MenuItemViewModel>(); \n\n    public string Header \n    { \n      get { return header; } \n      set { if (header != value) { header = value; \n        NotifyPropertyChanged(); } } \n    } \n\n    public ICommand Command \n    { \n      get { return command; } \n      set { if (command != value) { command = value;\n        NotifyPropertyChanged(); } } \n    } \n\n    public ObservableCollection<MenuItemViewModel> MenuItems \n    { \n      get { return menuItems; } \n      set { if (menuItems != value) { menuItems = value;\n        NotifyPropertyChanged(); } } \n    } \n  } \n} \n```", "```cs\nprivate ObservableCollection<MenuItemViewModel> menuItems = \n  new ObservableCollection<MenuItemViewModel>();\n\npublic ObservableCollection<MenuItemViewModel> MenuItems \n{ \n  get { return menuItems; } \n  set { if (menuItems != value) { menuItems = value;\n    NotifyPropertyChanged(); } } \n} \n```", "```cs\nMenuItems.Add(new MenuItemViewModel() { Header = \"Users\", \n  MenuItems = new ObservableCollection<MenuItemViewModel>() { \n  new MenuItemViewModel() { Header = \"Details\", \n  MenuItems = new ObservableCollection<MenuItemViewModel>() { \n  new MenuItemViewModel() { Header = \"Banking\" }, \n  new MenuItemViewModel() { Header = \"Personal\" } } }, \n  new MenuItemViewModel() { Header = \"Security\" } } }); \nMenuItems.Add(new MenuItemViewModel() { Header = \"Administration\" }); \nMenuItems.Add(new MenuItemViewModel() { Header = \"View\" }); \nMenuItems.Add(new MenuItemViewModel() { Header = \"Help\", \n  MenuItems = new ObservableCollection<MenuItemViewModel>() { \n  new MenuItemViewModel() { Header = \"About\" } } }); \n```", "```cs\n<Menu ItemsSource=\"{Binding MenuItems}\" FontSize=\"14\" Background=\"White\"> \n  <Menu.ItemContainerStyle> \n    <Style TargetType=\"{x:Type MenuItem}\"> \n      <Setter Property=\"Command\" Value=\"{Binding Command}\" /> \n    </Style> \n  </Menu.ItemContainerStyle> \n  <Menu.ItemTemplate> \n    <HierarchicalDataTemplate \n      DataType=\"{x:Type ViewModels:MenuItemViewModel}\" \n      ItemsSource=\"{Binding MenuItems}\"> \n      <TextBlock Text=\"{Binding Header}\" /> \n    </HierarchicalDataTemplate> \n  </Menu.ItemTemplate> \n</Menu> \n```", "```cs\n<RadioButton Content=\"16 bits\" IsChecked=\"{Binding BitRate, \n  Converter={StaticResource EnumToBoolConverter}, \n  ConverterParameter=Sixteen}\" VerticalContentAlignment=\"Center\" />\n```", "```cs\n<UserControl.Resources> \n  ... \n  <Converters:EnumToDescriptionStringConverter \n    x:Key=\"EnumToDescriptionStringConverter\" /> \n  ... \n</UserControl.Resources> \n... \n<RadioButton Content=\"{Binding ., \n  Converter={StaticResource EnumToDescriptionStringConverter}}\" \n  IsChecked=\"{Binding BitRate, \n  Converter={StaticResource EnumToBoolConverter}, \n  ConverterParameter=Sixteen}\" VerticalContentAlignment=\"Center\" /> \n```", "```cs\n<RadioButton Content=\"{Binding ., \n  Converter={StaticResource EnumToDescriptionStringConverter}}\" \n  IsChecked=\"{Binding BitRate, \n  Converter={StaticResource EnumToBoolConverter}, \n  ConverterParameter={Binding}}\" VerticalContentAlignment=\"Center\" />\n```", "```cs\nA 'Binding' cannot be set on the 'ConverterParameter' property of type 'Binding'. A 'Binding' can only be set on a DependencyProperty of a DependencyObject.\n```", "```cs\n<RadioButton Content=\"{Binding ., \n  Converter={StaticResource EnumToDescriptionStringConverter}}\" \n  IsChecked=\"{Binding IsSelected, \n  RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}},  \n  FallbackValue=False}\" VerticalContentAlignment=\"Center\" /> \n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.BitRateView\"\n\n  xmlns:Converters=\"clr-namespace:CompanyName.ApplicationName.Converters; \n    assembly=CompanyName.ApplicationName.Converters\" \n  > \n  <UserControl.Resources> \n    <Converters:EnumToBoolConverter x:Key=\"EnumToBoolConverter\" /> \n  </UserControl.Resources> \n  <GroupBox Header=\"Audio Quality\" FontSize=\"14\" Margin=\"20\"  \n    HorizontalAlignment=\"Left\" VerticalAlignment=\"Top\" Padding=\"5\">\n    <ListBox ItemsSource=\"{Binding BitRates}\" \n      SelectedItem=\"{Binding BitRate}\"> \n      <ListBox.ItemTemplate> \n        <DataTemplate DataType=\"{x:Type Enums:BitRate}\"> \n          <RadioButton Content=\"{Binding ., Converter={StaticResource \n            EnumToDescriptionStringConverter}}\" \n            IsChecked=\"{Binding IsSelected, \n            RelativeSource={RelativeSource \n            AncestorType={x:Type ListBoxItem}}, FallbackValue=False}\" \n            VerticalContentAlignment=\"Center\" /> \n        </DataTemplate> \n      </ListBox.ItemTemplate> \n    </ListBox> \n  </GroupBox> \n</UserControl> \n```"]