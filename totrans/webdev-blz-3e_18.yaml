- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visiting .NET MAUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have talked about Blazor WebAssembly and Blazor Server, but what
    about the third option?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will visit **.NET MAUI**, Microsoft’s new cross-platform
    development platform.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will not be a deep dive into .NET MAUI, since that can be a book
    all in itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is .NET MAUI?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing for macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing for Tizen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea for this chapter is for you to use it as a reference so that you will
    be able to implement a new project on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is a reference chapter and is not connected in any way with the
    book’s other chapters.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter18](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter18).
  prefs: []
  type: TYPE_NORMAL
- en: What is .NET MAUI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll start with a bit of history.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin is a software company founded in May 2011 by the engineers who created
    Mono, a free and open-source version of .NET Framework. Microsoft acquired the
    company in 2016, and it is now a vital part of the .NET development platform,
    providing tools and services for building native cross-platform mobile apps using
    C# and .NET. Xamarin’s technology allows developers to write native iOS, Android,
    and Windows apps using a single shared code base, making it easier to develop
    and maintain apps for multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '**.NET Multi-Platform App UI** (**MAUI**) is the new framework from Microsoft,
    and is an evolution of Xamarin.Forms.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a way to create one UI, deploy it to many different platforms, and get
    native controls on each platform. .NET MAUI can also host Blazor, which is called
    Blazor Hybrid. This way, we can render Blazor content inside of a .NET MAUI app,
    using the same controls and code that we build for the web. The controls that
    are rendered using Blazor Hybrid are web controls, so we will not get the native
    controls. We can, however, mix native and Blazor Hybrid content.
  prefs: []
  type: TYPE_NORMAL
- en: Many years ago, I sat in a meeting with a bunch of consultants. The company
    I was working for wanted to invest in an app, and we turned to one of the big
    consultancy firms in Sweden to get some help on how we should proceed.
  prefs: []
  type: TYPE_NORMAL
- en: After a week, we had another meeting, during which they presented their findings.
    Their recommendation was to build natively and not use any of the cross-platform
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'They had a bunch of arguments, but two that really stuck with me are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Native apps look better and give the user a “real” device experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared code (between platforms) means that if one platform has a bug, the same
    bug is now in all platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since .NET MAUI (formerly Xamarin.Forms) uses native controls, there is no way
    for the users to know the difference between developing a native app and developing
    using .NET MAUI. In the end, it will look and feel like a native app. This is
    not true for Blazor Hybrid, which uses web controls. So, there are some valid
    arguments for the first point. Now, we must ask ourselves, how important is that
    native look and feel? Looking at the apps on my iPhone, not many apps look the
    same, so I would argue it is not that important as long as you uphold a good UX.
    The second argument made me so angry. Were they trying to convince us that sharing
    code was terrible? Yes, they were. Sharing code between platforms is fantastic;
    you only need to write the code once, fix a bug once, and fix it on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI gives us both options. We can use native UI with C# code or use Blazor
    Hybrid to get web controls.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop cross-platform applications, we must install cross-platform tools
    in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t done that, please open the Visual Studio installer and select
    the **.NET Multi-Platform App UI** development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: '.NET MAUI has a couple of templates: **.NET MAUI App**, **.NET MAUI Blazor
    Hybrid App**, and **.NET MAUI class library**.'
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The .NET MAUI App template uses XAML to create applications.
  prefs: []
  type: TYPE_NORMAL
- en: XAML is also used for **Windows Presentation Foundation** (**WPF**) and **Universal
    Windows Platform** (**UWP**). Every XAML version differs just a bit but if you
    have worked with WPF or UWP before, they should feel familiar.
  prefs: []
  type: TYPE_NORMAL
- en: The XAML is converted into native elements. This way, if our app runs on Windows,
    it will have the look and feel of a Windows application. If we run it on an iOS
    device, it will look and feel like a native iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: This is probably our best option if we want to use our C# skills to create a
    cross-platform application. Using this approach, we will get the native feel without
    the need to write native code in Kotlin or Swift.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI Class Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: .NET MAUI Class Library is used to share content, classes, and functionality
    between applications.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI Blazor Hybrid App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since this is a book about Blazor, we will focus on the .NET MAUI Blazor Hybrid
    `App` template. This is a template that embeds a Blazor application inside of
    a native shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the .NET MAUI Blazor App project, we need at least:'
  prefs: []
  type: TYPE_NORMAL
- en: Android 7.0 (API 24) or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS 14 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS 11 or higher, using Mac Catalyst
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The .NET MAUI Blazor Hybrid App project uses BlazorWebView to render the Blazor
    content. It is not the same as Blazor Server and does not run WebAssembly; it
    is simply the third option we have for hosting Blazor applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start a new project and dig a bit deeper:'
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, create a new .`NET MAUI Blazor Hybrid App` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the project `BlazorHybridApp` and make sure you select **.NET 8**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of Visual Studio, select **Windows Machine** and run the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it. We now have our first cross-platform Blazor Hybrid app!
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_18_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.1: .NET MAUI app running on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: We might need to enable developer mode on our machine. If there is a message
    asking us to, just follow the instructions and run the app again. Great! We now
    have a project. In the next section, we will take a look at what the template
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running the project, we should recognize the UI. It is the same *Hello,
    world!* page, the same counter, and the same weather forecast.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look in the `Components/Pages` folder, we’ll find the Razor components,
    and if we open the `Counter.razor` file, we will find a familiar component that
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To create a Blazor Hybrid app, adding components like this is all that you need
    to know to get started, but let’s dig a bit deeper. The template is .NET MAUI
    App with some added Blazor startup code.
  prefs: []
  type: TYPE_NORMAL
- en: To understand what is happening, we will start in the `Platforms` folder. In
    the `Platforms` folder, we will find different a folder for each platform we can
    develop for Android, iOS, Mac Catalyst, Tizen, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: This is the starting point for each platform, and they have a bit of a different
    implementation, but in the end, they all point to the `MauiProgram` file located
    at the project’s root.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MauiProgram` class sets everything up, like fonts and dependency injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The essential thing in the file is `UseMauiApp<App>`, which gives us a clue
    about what is happening next. The next step is to load the `App.xaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `App.xaml` file has a bunch of resources for styling. The Blazor magic
    starts to happen in `App.xaml.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It sets the application `MainPage` to an instance of the class `MainPage`.
    In `MainPage.xaml`, we have reached the first Blazor reference in the app, the
    `BlazorWebView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we are referring to `index.html`, located in the `wwwroot` folder,
    and also set up the root component (similar to what we do in `Program.cs` in Blazor
    Server and Blazor WebAssembly).
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can also add XAML components, which makes it possible to mix XAML and
    Blazor components. Even though the implementation looks different, we should be
    familiar with the concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `index.html` is almost the same as in Blazor WebAssembly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The only difference worth mentioning is the JavaScript that differs from the
    others (Blazor Server and Blazor WebAssembly implementations). From this point,
    the application is now running pure Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in the `MainPage.xaml`, we are loading a Razor file called `Routes`.
    This is a familiar name from the Blazor Web App template. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is where we find the router, where we configure where to find the Razor
    components, and handle the requests that are not found.
  prefs: []
  type: TYPE_NORMAL
- en: We will not go deeper into the Blazor parts because everything past our router
    is the same as any other Blazor hosting model (Blazor Server and Blazor WebAssembly).
    There is a `MainLayout`, `NavMenu`, and component for each function (`Hello, world!`,
    `Counter`, and `Weather`).
  prefs: []
  type: TYPE_NORMAL
- en: 'With Blazor Server and Blazor WebAssembly, we need to make JavaScript calls
    to access local resources like Bluetooth, a battery, and a flashlight, to name
    a few. Blazor Hybrid adds the ability to write code that directly accesses local
    resources. We can access the flashlight (because we all love things that light
    up) by using code similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code will not work if we run a Blazor Server or Blazor WebAssembly app.
    If we still want to share components between .NET MAUI and Blazor web apps, we
    can do that using dependency injection just like we have done a couple of times
    in the book already, one implementation for the web and one for mobile.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will get our amazing app to run on Android.
  prefs: []
  type: TYPE_NORMAL
- en: Developing for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two options when it comes to developing for Android. We can run our
    application in an *emulator* or on a *physical device*.
  prefs: []
  type: TYPE_NORMAL
- en: To publish our application, we need to have a Google Developer license, but
    we don’t need one for development and testing.
  prefs: []
  type: TYPE_NORMAL
- en: Running in an emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first need to install an emulator to run our app on an Android emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, open **Tools** | **Android** | **Android Device Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **New** button and configure a new device (the default settings should
    be OK):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21849_18_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.2: Android device configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** to download a device image and configure it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the newly created emulator at the top of Visual Studio and run the project.
    Starting the emulator will take a couple of minutes. When developing, make sure
    not to close the emulator for a faster deployment time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get the emulator to run fast, we can enable hardware acceleration, depending
    on the processor we use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable hardware acceleration, please refer to the official documentation:
    [https://learn.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows](https://learn.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! We now have our app running inside an Android emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21849_18_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3: App running inside an Android emulator'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will run the application on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: Running on a physical device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to try our application on a physical device, we need to do a few
    things on our Android device. This may differ from device to device.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to make sure the phone is developer-unlocked:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Settings** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **About phone**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap **Build Number** seven times until **You are now a developer!** is visible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Second, we need to enable USB debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Settings** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Developer options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on the **USB debugging** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some devices also need to enable **Install via USB**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now all set to try our app on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: Connect your device to the computer using a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the menu at the top of Visual Studio, click the arrow under **Android local
    devices** and select your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **Run**, and Visual Studio will deploy the application to the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have our application running on our device.
  prefs: []
  type: TYPE_NORMAL
- en: It is an extraordinary feeling to run code on another device. Over the years,
    I have developed over 100 applications for Windows 8 and Windows Phone. However,
    to this day, it still gives me the same feeling to see my application deploy to
    another physical device.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at what options we have for developing for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Developing for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple does not allow iOS code to be compiled on something that is not an Apple
    computer. There are also cloud options like MacinCloud and MacStadium, but we
    won’t go into those options in this book.
  prefs: []
  type: TYPE_NORMAL
- en: This means we must own a Mac (to use the simulator) or have an Apple Developer
    license (to use hot restart).
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable our iOS device to work, we need to set it in Developer Mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your iPhone’s **Settings** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down a bit and find **Privacy & Security**, then tap on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for something called **Developer Mode**. If you can’t find it, you might
    need to connect your phone to Xcode. It differs between versions of the operating
    system, but ask Google or Bing for help. There are many resources to be found
    on how to solve it with your versions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There should be a toggle switch; flip it to enable Developer Mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your iOS device might give you a heads-up about this potentially making your
    device a bit less secure. No worries, just tap **Restart** to move forward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your device reboots, unlock it. You’ll see another alert asking if you’re
    sure about enabling Developer Mode. Go ahead and tap **Turn On**, and if it asks
    for your passcode, enter it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hot restart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test our application on a physical device, we can use hot restart. The hot
    restart feature is only designed for us to test our application while we are developing
    it, and we will not be able to publish the application.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to have iTunes installed. If you don’t have iTunes, you can install
    that from the Windows store.
  prefs: []
  type: TYPE_NORMAL
- en: In the top menu in Visual Studio, if we select **iOS Local Device**, we will
    get a nice wizard telling us precisely what we need to do. The first steps are
    informative and let us install iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: Next, it’s time to enter our App Store Connect API key information. To be able
    to supply that information, we need to have an Apple Developer account. At the
    time of writing, it costs $99.
  prefs: []
  type: TYPE_NORMAL
- en: There are excellent instructions on where to find that information.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be prompted with this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_18_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.4: Apple Connect API Key information screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you will need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You can create a new key by going to [https://appstoreconnect.apple.com/access/api](https://appstoreconnect.apple.com/access/api).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Request API key** and then **Generate API Key**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name `Visual Studio` and select **Access Developer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the different values to Visual Studio, download the API key, and select
    the file as the **Private key path**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select a team, and we are all set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the application and see it run on your iPhone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21849_18_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.5: Application running on an iPhone'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how to set up a simulator.
  prefs: []
  type: TYPE_NORMAL
- en: Simulator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A simulator runs the app on a Mac but shows the result on a PC. A simulator
    differs from an emulator. An emulator runs the code on the machine (in our case,
    a PC). A simulator runs on top of the native OS (macOS), mimicking an iPad or
    an iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: To get simulators to work, we need to have an Apple computer on the same network.
    Visual Studio will help us along the way to set everything up. We must install
    Xcode. On your Mac, install Xcode from the App Store, and start it to agree to
    the license agreement and select what devices you want to develop for.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to open remote access to the Mac. We can do that by doing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Mac, invoke Spotlight by pressing *cmd* + *space*, searching for **remote
    login**, and then opening **Sharing System Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Remote Login** option to allow Visual Studio to connect to the
    Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set access for **Only these users** and ensure your user is included in the
    list or group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have everything prepared on the Mac. In Visual Studio on the PC, we
    can now pair our Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Tools** | **iOS** | **Pair to Mac**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions in the wizard (same as above).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Mac from the list and click **Connect**. Visual Studio can now help
    you install the things you need to get started. It might take a while for the
    Mac to install all the things, so if it doesn’t work, the simulators are probably
    not installed yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dropdown at the top of Visual Studio, we can select **iOS Simulators**,
    and then choose a device to run our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_18_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.6: Device selection in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app and the simulator will start. This is what the app would look like
    if we ran it on an iPad Mini:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21849_18_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.7: App running in an iPad simulator'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have two ways of running and testing on iOS devices. We can also connect
    an iPhone directly to the Mac and run the application over Wi-Fi. There is more
    information on debugging over Wi-Fi in the official docs: [https://learn.microsoft.com/en-us/xamarin/ios/deploy-test/wireless-deployment](https://learn.microsoft.com/en-us/xamarin/ios/deploy-test/wireless-deployment).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will build an app for macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Developing for macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We don’t have an option for macOS to run or deploy from a Windows machine.
    To run our application on the Mac, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Mac, open our project in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the time of writing, installing the .NET MAUI tooling in VS Code is still
    a bit of a preview, and Microsoft announced that VS for Mac is discontinued. This
    is the best source to keep up to date with installing the tools on a Mac: [https://learn.microsoft.com/en-us/dotnet/maui/get-started/installation?view=net-maui-8.0&tabs=visual-studio-code](https://learn.microsoft.com/en-us/dotnet/maui/get-started/installation?view=net-maui-8.0&tabs=visual-studio-code).
    Follow the instructions in the link.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the project, and our app will show up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21849_18_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.8: App running on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we are running the application on the same platform, with no emulators
    or simulators, which is much less complicated than running it on a separate device.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will run our application on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Developing for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running the application on Windows is what we did in *step 3* of the *.NET
    MAUI Blazor Hybrid App* section. To reiterate, perform the following step:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the dropdown to **Windows Machine** and run the project. We can see the
    result in *Figure 18.1* at the beginning of the chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As with macOS, we run the application on the same platform, with no emulators
    or simulators, which is much less complicated than running it on a separate device.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a look at Tizen.
  prefs: []
  type: TYPE_NORMAL
- en: Developing for Tizen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tizen is an operating system mainly for TVs and watches. My Samsung Gear S3
    runs Tizen. Samsung manages Tizen and not Microsoft. This ability for other manufacturers
    to hook into the platform just shows how great the .NET MAUI platform is.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the Tizen experience lags a bit. Since this is not an
    official platform and because of the state of the tooling, I have decided not
    to include a guide.
  prefs: []
  type: TYPE_NORMAL
- en: But Tizen is working on the tooling, so if you want to transfer your app to
    TVs running Tizen, you should look into it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at cross-platform development with Blazor Hybrid.
    I mentioned this before in this chapter, but it is worth mentioning again that
    running code on a phone or a device that is not a computer is such a fun thing
    to do. You can’t beat that feeling. Even if you don’t intend to develop for mobile
    devices, give it a try.
  prefs: []
  type: TYPE_NORMAL
- en: With .NET MAUI, we can leverage our existing C# knowledge and, perhaps more
    importantly, our Blazor knowledge to create mobile applications.
  prefs: []
  type: TYPE_NORMAL
