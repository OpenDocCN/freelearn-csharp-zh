- en: Testing Your Code with Unit Test Cases and TDD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单元测试用例和TDD测试您的代码
- en: When developing software, it is essential that you ensure that an application
    is bug-free and that it satisfies all specifications. This can be done by testing
    all the modules while they are being developed or when the overall application
    has been either completely or partially implemented.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发软件时，确保应用程序无错误并满足所有规范至关重要。这可以通过在开发过程中测试所有模块或在整体应用程序完全或部分实现后进行测试来实现。
- en: Performing all the tests manually is not a feasible option since most of the
    tests must be executed each time the application is modified, and, as explained
    throughout this book, modern software is being continuously modified to adapt
    the applications to the needs of a fast-changing market. This chapter discusses
    all the types of tests needed to deliver reliable software, and how to organize
    and automate them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数测试必须在每次修改应用程序时执行，手动执行所有测试不是一个可行的选项。正如本书中解释的那样，现代软件正在不断修改，以适应快速变化的市场需求。本章讨论了交付可靠软件所需的所有测试类型，以及如何组织和自动化它们。
- en: 'More specifically, this chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，本章涵盖了以下主题：
- en: Understanding automated tests and their usage
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解自动化测试及其用法
- en: Understanding the basics of **test-driven development** (**TDD**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解**测试驱动开发**（**TDD**）的基本原理
- en: Optimizing a software investment using TDD
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TDD优化软件投资
- en: Defining C# test projects in Visual Studio
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中定义C#测试项目
- en: In this chapter, we'll see which types of tests are worth implementing, and
    what unit tests are. We'll see the different types of projects available and how
    to write unit tests in them. By the end of the chapter, the book use case will
    help us to execute our tests in Azure DevOps during the **Continuous Integration/Continuous
    Delivery** (**CI/CD**) cycle of our applications automatically.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解哪些类型的测试值得实施，以及单元测试是什么。我们将了解可用的不同类型的项目以及如何在其中编写单元测试。到本章结束时，书籍用例将帮助我们自动在Azure
    DevOps中执行应用程序的**持续集成/持续交付**（**CI/CD**）周期中的测试。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires the 2019 free Community Edition with all database tools
    installed. It also requires a free Azure account; if you have not already created
    one, see the *Creating an Azure account* section in [Chapter 1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml), *Understanding
    the Importance of Software Architecture.*
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要安装所有数据库工具的2019免费社区版。它还需要一个免费的Azure账户；如果您尚未创建，请参阅[第1章](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml)，*理解软件架构的重要性*中的*创建Azure账户*部分。
- en: All concepts in this chapter are clarified with practical examples based on
    the WWTravelClub book use case. The code for this chapter is available at: [https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有概念都通过基于WWTravelClub书籍用例的实用示例进行了阐明。本章的代码可在以下网址找到：[https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8)。
- en: Understanding automated tests
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解自动化测试
- en: 'Delaying the application testing until immediately after most of its functionalities
    have been completely implemented must be avoided for the following reasons:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 必须避免在大多数功能完全实现后立即进行应用程序测试，原因如下：
- en: If a class or module has been incorrectly designed or implemented, it might
    have already influenced the way other modules were implemented. Therefore, at
    this point, fixing the problem might have a very high cost.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个类或模块设计或实现不当，它可能已经影响了其他模块的实现方式。因此，在此阶段，修复问题可能代价高昂。
- en: The possible combination of input that is needed to test all possible paths
    that execution can take grows exponentially with the number of modules or classes
    that are tested together. Thus, for instance, if the execution of a class method
    `A` can take three different paths, while the execution of another method `B`
    can take four paths, then testing `A` and `B` together would require 3 x 4 different
    inputs. In general, if we test several modules together, the total number of paths
    to test is the product of the number of paths to test in each module. If modules
    are tested separately, instead, the number of inputs required is just the sum of
    the paths needed to test each module.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要测试所有可能执行路径的输入组合的数量随着一起测试的模块或类的数量呈指数增长。例如，如果一个类方法`A`的执行可以采取三条不同的路径，而另一个方法`B`的执行可以采取四条路径，那么测试`A`和`B`一起就需要3
    x 4种不同的输入。一般来说，如果我们一起测试几个模块，需要测试的总路径数是每个模块测试路径数的乘积。相反，如果单独测试模块，所需的输入数量只是测试每个模块所需路径的总和。
- en: If a test of an aggregate made of N modules fails, then locating the origin
    of the bug among the N modules is usually a very time consuming activity.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由N个模块组成的聚合测试失败，那么在N个模块中定位错误源通常是一个非常耗时的活动。
- en: When N modules are tested together, we have to redefine all tests involving
    the N modules, even if just one of the N modules changes during the application's
    CI/CD cycle.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试N个模块时，我们必须重新定义涉及N个模块的所有测试，即使只是在应用程序的CI/CD周期中有一个N个模块发生变化。
- en: The preceding considerations show that it is more convenient to test each module
    method separately. Unluckily, a battery of tests that verifies all methods independently
    from their context is incomplete because some bugs may be caused by incorrect
    interactions between modules.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的考虑表明，单独测试每个模块的方法更为方便。不幸的是，一组独立于其上下文验证所有方法的测试是不完整的，因为一些错误可能是由模块之间不正确的交互引起的。
- en: 'Therefore, tests are organized into two stages:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，测试被组织成两个阶段：
- en: '**Unit tests**: These verify that all execution paths of each module behave
    properly. They are quite complete and usually cover all possible paths. This is
    feasible because there are not very many possible execution paths of each method
    or module compared to the possible execution paths of the whole application.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：这些测试验证每个模块的所有执行路径都表现正常。它们相当完整，通常覆盖所有可能的路径。这是可行的，因为与整个应用程序的可能执行路径相比，每个方法或模块的可能执行路径并不多。'
- en: '**Integration tests**: These are executed once the software passes all its
    unit tests. Integration tests verify all modules interact properly to get the
    expected results. Integration tests do not need to be complete since unit tests
    will have already verified that all execution paths of each module work properly.
    They need to verify all patterns of interaction, that is, all the possible ways
    the various modules may cooperate.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：这些测试在软件通过所有单元测试后执行。集成测试验证所有模块是否正确交互以获得预期结果。由于单元测试已经验证了每个模块的所有执行路径都正常工作，因此集成测试不需要完全覆盖。它们需要验证所有交互模式，即各种模块可能合作的所有可能方式。'
- en: 'Usually, each interaction pattern has more than one test associated with it:
    a typical activation of a pattern, and some extreme cases of activation. For instance,
    if a whole pattern of interaction receives an array as input, we will write a
    test for the typical size of the array, a test with a `null` array, a test for
    an empty array, and a test with a very big array. This way we verify that the
    way the single module was designed is compatible with the needs of the whole interaction
    pattern.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个交互模式都与多个测试相关联：一个典型的模式激活，以及一些激活的极端情况。例如，如果一个完整的交互模式接收一个数组作为输入，我们将为典型的数组大小编写一个测试，一个`null`数组的测试，一个空数组的测试，以及一个非常大的数组的测试。这样我们就可以验证单个模块的设计方式是否与整个交互模式的需求兼容。
- en: With the preceding strategy in place, if we modify a single module without changing
    its public interface, we need to change the unit tests for that module.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施上述策略的情况下，如果我们修改单个模块而不改变其公共接口，我们需要更改该模块的单元测试。
- en: If, instead, the change involves the way some modules interact, then we also
    have to add new integration tests or to modify existing ones. However, usually,
    this is not a big problem since most of the tests are unit tests, so rewriting
    a large percentage of all integration tests does not require too big an effort.
    Moreover, if the application was designed according to the **Single Responsibility,
    Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion** (**SOLID**)
    principles, then the number of integration tests that must be changed after a
    single code modification should be small since the modification should affect
    just a few classes that interact directly with the modified method or class.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果，相反，更改涉及某些模块的交互方式，那么我们也必须添加新的集成测试或修改现有的测试。然而，通常这并不是一个大问题，因为大多数测试都是单元测试，所以重写大部分集成测试不需要太大的努力。此外，如果应用程序是根据**单一职责、开闭原则、里氏替换原则、接口隔离原则、依赖倒置原则**（**SOLID**）设计的，那么在单次代码修改后必须更改的集成测试数量应该很小，因为修改应该只影响与修改的方法或类直接交互的几个类。
- en: At this point, it should be clear that both unit tests and integration tests
    must be reused during the entire lifetime of the software. That is why it is worth
    automating them. Automation of unit and integration tests avoids possible errors
    of manual test execution and saves time. A whole battery of several thousand automated
    tests can verify software integrity after each small modification in a few minutes,
    thus enabling the frequent changes needed in the CI/CD cycles of modern software.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，应该很清楚，单元测试和集成测试在整个软件生命周期中都必须被重用。这就是为什么自动化它们是值得的。单元和集成测试的自动化避免了手动测试执行中可能出现的错误，并节省了时间。几千个自动化测试的整个系列可以在几分钟内验证软件的完整性，在每次对软件进行的小修改之后，从而使得现代软件的CI/CD周期中所需的频繁更改成为可能。
- en: As new bugs are found, new tests are added to discover them so that they cannot
    reappear in future versions of the software. This way automated test always become
    more reliable and protect the software more form bugs added by new changes. Thus,
    the probability of adding new bugs (that are not immediately discovered) is greatly
    reduced.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新错误的发现，会添加新的测试来发现它们，以确保它们不会在未来版本的软件中再次出现。这样，自动化测试总是变得更加可靠，并更好地保护软件免受新更改引入的错误的影响。因此，添加新错误（不是立即被发现）的概率大大降低。
- en: The next section will give us the basics for organizing and designing automated
    unit and integration tests, as well as practical details on how to write a test
    in C# in the *C# Test Projects* section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将为我们提供组织和设计自动化单元和集成测试的基础，以及如何在“C# 测试项目”部分中用C#编写测试的实用细节。
- en: Writing automated (unit and integration) tests
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自动化（单元和集成）测试
- en: Tests are not written from scratch; all software development platforms have
    tools that help us to both write tests and launch them (or some of them). Once
    the selected tests have been executed, all tools show a report and give the possibility
    to debug the code of all failed tests.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 测试不是从头开始编写的；所有软件开发平台都有工具帮助我们编写和运行测试（或其中一些）。一旦选定的测试被执行，所有工具都会显示报告，并提供调试所有失败测试代码的可能性。
- en: 'More specifically, all unit and integration test frameworks are made of three
    important parts:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，所有单元和集成测试框架都由三个重要部分组成：
- en: '**Facilities for defining all tests: **They verify if the actual results correspond
    to expected results. Usually, a test is organized into test classes, where each
    test calls tests either a single application class or a single class method. Each
    test is split into three stages:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义所有测试的设施**：它们验证实际结果是否与预期结果相符。通常，一个测试被组织成测试类，其中每个测试调用一个单独的应用程序类或一个单独的类方法。每个测试分为三个阶段：'
- en: '**Test preparation**: The general environment needed by the test is prepared.
    This stage doesn''t prepare the single input each method to test must be called
    with, but just the global environment, such as objects to inject in class constructors
    or simulations of database tables. Usually, the same preparation procedure is
    used in several tests, so test preparations are factored out into dedicated modules.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试准备**：测试所需的一般环境已经准备就绪。这一阶段并不准备为每种方法单独输入的单个输入，而是仅准备全局环境，例如在类构造函数中注入的对象或数据库表的模拟。通常，相同的准备程序会在多个测试中使用，因此测试准备被提取到专门的模块中。'
- en: '**Test execution**: The methods to test are invoked with adequate input and
    all results of their executions are compared with expected results with constructs
    such as `Assert.Equal(x, y)`, `Assert.NotNull(x)`, and so on.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试执行**：使用适当的输入调用要测试的方法，并将它们的执行结果与预期结果进行比较，使用如`Assert.Equal(x, y)`、`Assert.NotNull(x)`等构造。'
- en: '**Tear-down**: The whole environment is cleaned up to avoid the execution of
    a test influencing other tests. This step is the converse of step 1.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**清理**：整个环境被清理，以避免测试的执行影响其他测试。这一步骤是步骤1的逆操作。'
- en: '**Mock facilities**: While integration tests use all (or almost all) classes
    involved in a pattern of objects cooperation, in unit tests the use of other application
    classes is forbidden. Thus, if a class under test, say, `A`, uses a method of
    another application class, `B`, that is injected in its constructor in one of
    its methods, `M`, then in order to test `M` we must inject a fake implementation
    of `B`. It is worth pointing out that only classes that do some processing are
    not allowed to use another class during unit tests, while pure data classes can.
    Mock frameworks contain facilities to define fake implementations of interfaces
    and interface methods that return data that can be defined in tests. Typically,
    fake implementations are also able to report information on all fake method calls.
    Such fake implementations do not need the definition of actual class files but
    are done online in the test code by calling methods such as `new Mock<IMyInterface>()`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟设施**：虽然集成测试使用所有（或几乎所有）参与对象合作模式的类，但在单元测试中禁止使用其他应用程序类。因此，如果一个正在测试的类，比如`A`，在其方法`M`中使用了另一个应用程序类`B`的方法，该方法是将其构造函数中注入的，那么为了测试`M`，我们必须注入`B`的模拟实现。值得注意的是，只有执行某些处理的类在单元测试期间不允许使用另一个类，而纯数据类可以。模拟框架包含定义接口和接口方法的模拟实现的功能，这些方法可以在测试中定义数据。通常，这些模拟实现也能报告所有模拟方法调用的信息。这种模拟实现不需要实际类文件的定义，而是在测试代码中通过调用如`new
    Mock<IMyInterface>()`这样的方法在线完成。'
- en: '**Execution and reporting tool**: This is a visual configuration-based tool
    that the developer may use to decide which tests to launch and when to launch
    them. Moreover, it also shows the final outcome of the tests as a report containing
    all successful tests, all failed tests, each test''s execution time, and other
    information that depends on the specific tool and on how it was configured. Usually,
    execution and reporting tools that are executed in development IDEs such as Visual
    Studio also give you the possibility of launching a debug session on each failed
    test.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行和报告工具**：这是一个基于可视配置的工具，开发者可以使用它来决定要启动哪些测试以及何时启动它们。此外，它还以包含所有成功测试、所有失败测试、每个测试的执行时间以及其他依赖于特定工具及其配置的信息的报告形式显示测试的最终结果。通常，在开发IDE（如Visual
    Studio）中执行的执行和报告工具还提供了在每个失败的测试上启动调试会话的可能性。'
- en: Since mock frameworks can only create fake implementations of interfaces but
    not of classes, we should inject interfaces or pure data classes (that don't need
    to be mocked) in class constructors and methods; otherwise, classes cannot be
    unit tested. Therefore, for each cooperating class that we want to inject into
    another class, we must define a corresponding interface.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模拟框架只能创建接口的模拟实现，而不能创建类的模拟实现，因此我们应该在类构造函数和方法中注入接口或纯数据类（不需要模拟），否则类无法进行单元测试。因此，对于每个我们想要注入到另一个类中的合作类，我们必须定义一个相应的接口。
- en: Moreover, classes should use instances that are injected in their constructors
    or methods, and not class instances available in the public static fields of other
    classes; otherwise, the hidden interactions might be forgotten while writing tests,
    and this might complicate the *preparation* step of tests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，类应该使用在其构造函数或方法中注入的实例，而不是其他类公共静态字段中可用的类实例；否则，在编写测试时可能会忘记隐藏的交互，这可能会使测试的*准备*步骤复杂化。
- en: The next section describes other types of test used in software development.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将描述在软件开发中使用的其他类型的测试。
- en: Writing acceptance and performance tests
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写验收和性能测试
- en: Acceptance tests define the contract between the project stakeholders and the
    development team. They are used to verify that the software developed actually
    behaves as agreed with them. Acceptance tests verify not only functional specifications
    but also constraints on the software usability and user interface. Since they also have
    the purpose of showing how the software appears and behaves on actual computer
    monitors and displays, they are never completely automatic but consist mainly
    of lists of recipes and verifications that must be followed by an operator.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接受测试定义了项目利益相关者与开发团队之间的合同。它们被用来验证开发的软件是否确实按照与他们的约定行事。接受测试不仅验证功能规范，还验证软件可用性和用户界面的约束。由于它们的目的还包括展示软件在实际计算机显示器和显示设备上的外观和行为，因此它们永远不会完全自动化，主要由必须由操作员遵循的食谱和验证列表组成。
- en: Sometimes, automatic tests are developed to verify just the functional specifications,
    but such tests usually bypass the user interface and inject the test input directly
    in the logic that is immediately behind the user interface. For instance, in the
    case of an ASP.NET Core MVC application, the whole website is run in a complete
    environment that includes all the needed storage filled with test data; input
    is not provided to HTML pages but is injected directly in the ASP.NET Core controllers.
    Tests that bypass the user interface are called subcutaneous tests. ASP.NET Core
    supplies various tools to perform subcutaneous tests and also tools that automate
    the interaction with HTML pages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，自动测试的开发是为了验证仅功能规范，但此类测试通常绕过用户界面，直接将测试输入注入到用户界面后面的逻辑中。例如，在ASP.NET Core MVC应用程序的情况下，整个网站在一个完整的环境中运行，包括所有需要的存储空间，并填充了测试数据；输入不提供给HTML页面，而是直接注入到ASP.NET
    Core控制器中。绕过用户界面的测试被称为皮下测试。ASP.NET Core提供了各种工具来执行皮下测试，以及自动化与HTML页面交互的工具。
- en: 'Subcutaneous tests are usually preferred in the case of automated tests, while
    full tests are executed manually for the following reasons:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动测试的情况下，通常更倾向于使用皮下测试，而完整测试则手动执行，以下是一些原因：
- en: No automatic test can verify how the user interface appears and how usable it
    is.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有自动测试可以验证用户界面的外观和可用性。
- en: Automating the actual interaction with the user interface is a very time-consuming
    task.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化与用户界面的实际交互是一个非常耗时的工作。
- en: User interfaces are changed frequently to improve their usability and to add
    new features, and also small changes in a single application screen, may force
    a complete rewrite of all tests that operate on that screen.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面经常更改以提高其可用性并添加新功能，而且单个应用程序屏幕的微小更改也可能迫使对该屏幕上运行的全部测试进行完全重写。
- en: In a few words, user interface tests are very expansive and have low reusability,
    so it's rarely worth automating them. However, ASP.NET Core supplies the `Microsoft.AspNetCore.Mvc.Testing`
    NuGet package to run the whole website in a testing environment. Using it together
    with the `AngleSharp` NuGet package, which parses HTML pages into DOM trees, you
    can write automated full tests with an acceptable programming effort. The automated
    ASP.NET Core acceptance tests will be described in detail in [Chapter 20](e61b3c5d-3abd-4442-9c9c-e12fd3acedcc.xhtml), *Automation
    for Software Testing*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，用户界面测试非常昂贵且可重用性低，因此很少值得自动化它们。然而，ASP.NET Core提供了`Microsoft.AspNetCore.Mvc.Testing`
    NuGet包，用于在测试环境中运行整个网站。使用它与`AngleSharp` NuGet包一起，该包将HTML页面解析成DOM树，您可以用可接受的编程工作量编写自动化全面测试。将在[第20章](e61b3c5d-3abd-4442-9c9c-e12fd3acedcc.xhtml)中详细描述ASP.NET
    Core接受测试，*软件测试自动化*。
- en: Performance tests apply a fake load to an application to see if it is able to
    handle the typical production load, to discover its load limits, and to locate
    bottlenecks. The application is deployed in a staging environment that is a copy
    of the actual production environment in terms of hardware resources. Then, fake
    requests are created and applied to the system, and response times and other metrics
    are collected. Fake request batches should have the same composition as the actual
    production batches. They can be generated from the actual production request logs
    if they are available.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试向应用程序施加模拟负载，以查看其是否能够处理典型的生产负载，以发现其负载限制，并定位瓶颈。应用程序部署在一个预演环境中，该环境在硬件资源方面是实际生产环境的副本。然后，创建并应用模拟请求到系统中，并收集响应时间和其他指标。模拟请求批次应与实际生产批次具有相同的组成。如果可用，它们可以从实际生产请求日志中生成。
- en: If response times are not satisfactory, other metrics are collected to discover
    possible bottlenecks (low memory, slow storages, or slow software modules). Once
    located, a software component that is responsible for the problem can be analyzed
    in the debugger to measure the execution time of the various method calls involved
    in a typical request.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应时间不满意，将收集其他指标以发现可能的瓶颈（低内存、慢速存储或慢速软件模块）。一旦定位到负责问题的软件组件，就可以在调试器中分析它，以测量典型请求中涉及的各个方法调用的执行时间。
- en: Failures in the performance tests may lead either to a redefinition of the hardware
    needed by the application or to the optimization of some software modules, classes
    or methods.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 性能测试中的失败可能导致对应用程序所需硬件的重定义，或者对某些软件模块、类或方法的优化。
- en: Both Azure and Visual Studio offer tools to create fake loads and to report
    execution metrics. However, they have been declared obsolete and will be discontinued
    in quite a short time (about one year from writing this book), and so we will
    not describe them. As an alternative, there are both open source and third-party
    tools that can be used. Some of them are listed in the *Further reading* section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 和 Visual Studio 都提供了创建模拟负载和报告执行指标的工具。然而，它们已被宣布过时，并将很快停止使用（从写这本书起大约一年），因此我们不会描述它们。作为替代方案，有开源和第三方工具可以使用。其中一些在*进一步阅读*部分列出。
- en: The next section describes a software development methodology that gives a central
    role to tests.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将描述一种将测试置于核心位置的软件开发方法。
- en: Understanding test-driven development (TDD)
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解测试驱动开发（TDD）
- en: '**Test-driven development** (**TDD**) is a software development methodology
    that gives a central and central role to unit tests. According to this methodology,
    unit tests are a formalization of the specifications of each class, so they must
    be written before the code of the class. Actually, a full test that covers all
    code paths univocally defines the code behavior, so it can be considered a specification
    for the code. It is not a formal specification that defines the code behavior
    through some formal language, but a specification based on behavior examples.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动开发**（**TDD**）是一种软件开发方法，它将单元测试置于核心和中心位置。根据这种方法，单元测试是每个类规范的正式化，因此必须在类的代码之前编写。实际上，一个覆盖所有代码路径的完整测试明确定义了代码行为，因此它可以被视为代码的规范。这不是通过某种正式语言定义代码行为的正式规范，而是一种基于行为示例的规范。'
- en: The ideal way to test software would be to write formal specifications of the
    whole software behavior and to verify with some completely automatic tools if
    the software that was actually produced conforms with them. In the past, some
    research effort was spent defining formal languages for describing code specifications,
    but expressing the behavior the developer has in mind with similar languages was
    a very difficult and error-prone task. Therefore, these attempts were quickly
    abandoned in favor of approaches based on examples. At that time, the main purpose
    was the automatic generation of code. Nowadays, automatic code generation has
    been substantially abandoned and survives in small application areas, such as
    the creation of device drivers. In these areas, the effort of formalizing the
    behavior in a formal language is worth the time saved in trying to test difficult-to-reproduce
    behaviors of parallel threads.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 测试软件的理想方式是编写整个软件行为的正式规范，并使用一些完全自动化的工具来验证实际产生的软件是否符合这些规范。在过去，一些研究工作被用于定义用于描述代码规范的正式语言，但使用类似语言表达开发者心中的行为是一个非常困难且容易出错的任务。因此，这些尝试很快就被放弃了，转而采用基于示例的方法。当时，主要目的是自动生成代码。如今，自动代码生成已被大量放弃，仅在小应用领域幸存，如设备驱动程序的开发。在这些领域，将行为在正式语言中形式化的努力值得在尝试测试难以重现的并行线程行为时节省的时间。
- en: Unit tests were initially conceived as a way to encode example-based specifications
    in a completely independent way, as a part of a specific agile development methodology
    called **Extreme Programming**. However, nowadays, TDD is used independently of
    Extreme Programming and is included as an obligatory prescription in other agile
    methodologies.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试最初被构想为以完全独立的方式编码基于示例的规范，作为名为**极限编程**（**Extreme Programming**）的特定敏捷开发方法的一部分。然而，如今，TDD
    可以独立于极限编程使用，并被纳入其他敏捷方法中的强制规定。
- en: While it is undoubtedly true that unit tests refined after finding hundreds
    of bugs act as reliable code specifications, it is not obvious that developers
    can easily design unit tests that can be immediately used as reliable specifications
    for the code to be written. In fact, generally, you need an infinite or at least
    an immense number of examples to univocally define a code's behavior if examples
    are chosen at random.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然毫无疑问，在发现数百个错误后经过优化的单元测试可以作为可靠的代码规范，但开发者是否能够轻松设计出可以直接用作编写代码的可靠规范的单元测试并不明显。实际上，通常情况下，如果随机选择示例，你需要无限或至少是大量的示例来唯一地定义代码的行为。
- en: 'The behavior can be defined with an acceptable number of examples only after
    you have understood all possible execution paths. In fact, at this point, it is
    enough to select a typical example for each execution path. Therefore, writing
    a unit test for a method after that method has been completely coded is easy:
    it simply requires selecting a typical instance for each execution path of the
    already existing code. However, writing unit tests this way does not protect from
    errors in the design of the execution paths themselves. For instance, it doesn''t
    prevent the typical error of forgetting to test a variable for the `null` value
    before invoking a member. That is why TDD suggests writing unit tests before the
    application code.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在你理解了所有可能的执行路径之后，才能用可接受数量的示例定义行为。实际上，在这个时候，选择每个执行路径的典型示例就足够了。因此，在完全编写完方法之后编写该方法的单元测试是很容易的：它只需要为现有代码的每个执行路径选择一个典型实例。然而，以这种方式编写单元测试并不能防止执行路径设计本身的错误。例如，它不能防止忘记在调用成员之前测试变量的`null`值的典型错误。这就是为什么TDD建议在编写应用程序代码之前编写单元测试。
- en: We may conclude that, while writing unit tests, the developer must forecast
    somehow all execution paths by looking for extreme cases and by possibly adding
    more examples than strictly needed. However, the developer can make mistakes while
    writing the application code, and he or she can also make mistakes in forecasting
    all possible execution paths while designing the unit tests.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以得出结论，在编写单元测试时，开发者必须通过寻找极端情况以及可能添加比严格需要的更多示例来预测所有可能的执行路径。然而，开发者可能在编写应用程序代码时犯错误，他们也可能在设计单元测试时预测所有可能的执行路径时犯错误。
- en: 'We have found the main drawback of TDD: unit tests themselves may be wrong.
    That is, not only application code, but also its associated TDD unit tests may
    be incoherent with the behavior the developer has in mind. Therefore, in the beginning,
    unit tests can''t be considered software specifications, but rather a possible
    wrong and incomplete description of the software behavior. Therefore, we have
    two descriptions of the behavior we have in mind, the application code itself
    and its TDD unit tests that were written before the application code.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现了TDD的主要缺点：单元测试本身可能是错误的。也就是说，不仅应用程序代码，与其相关的TDD单元测试也可能与开发者心中的行为不一致。因此，在开始时，单元测试不能被视为软件规范，而更可能是一个可能的错误和不完整的软件行为描述。因此，我们有两个关于我们心中所想行为的描述，即应用程序代码及其在应用程序代码之前编写的TDD单元测试。
- en: What makes TDD work is that the probability of making exactly the same error
    while writing the tests and while writing the code is very low. Therefore, whenever
    a test fails there is an error either in the tests or in the application code,
    and, conversely, if there is an error either in the application code or in the
    test, there is a very high probability a test will fail. That is, the usage of
    TDD ensures that most of the bugs are immediately found!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: TDD之所以有效，是因为在编写测试和编写代码时犯完全相同错误的概率非常低。因此，每当测试失败时，要么是测试中存在错误，要么是应用程序代码中存在错误，反之亦然，如果应用程序代码或测试中存在错误，那么有很高的概率测试会失败。也就是说，TDD的使用确保了大多数错误都能立即被发现！
- en: 'Writing a class method or a chunk of code with TDD is a loop composed of three
    stages:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TDD编写类方法或代码块是一个由三个阶段组成的循环：
- en: 'Red stage: In this stage, the developer designs new unit tests that must necessarily
    fail because at this time there is no code that implements the behavior they describe.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色阶段：在这个阶段，开发者设计新的单元测试，这些测试必然会失败，因为此时还没有代码实现他们所描述的行为。
- en: 'Green stage: In this stage, the developer writes the minimum code or makes
    the minimum modifications to existing code that are necessary to pass all unit
    tests.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色阶段：在这个阶段，开发者编写最少的代码或对现有代码进行必要的最小修改，以通过所有单元测试。
- en: 'Refactoring stage: Once the test is passed, code is refactored to ensure good
    code quality and the application of best practices and patterns. In particular,
    in this stage, some code can be factored out in other methods or in other classes.
    During this stage, we may also discover the need for other unit tests, because
    new execution paths or new extreme cases are discovered or created.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构阶段：一旦测试通过，代码将被重构以确保良好的代码质量并应用最佳实践和模式。特别是，在这个阶段，某些代码可以被提取到其他方法或其他类中。在这个阶段，我们可能还会发现需要其他单元测试，因为发现了新的执行路径或新的极端情况。
- en: The loop stops as soon as all tests pass without writing new code or modifying
    the existing code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 循环会在所有测试通过且没有编写新代码或修改现有代码的情况下立即停止。
- en: Sometimes, it is very difficult to design the initial unit tests because it
    is quite difficult to imagine how the code might work and the execution paths
    it might take. In this case, you can get a better understanding of the specific
    algorithm to use by writing an initial sketch of the application code. In this
    initial stage, we need to focus just on the main execution path, completely ignoring
    extreme cases and input verifications. Once we get a clear picture of the main
    ideas behind an algorithm that should work we can enter the standard three-stage
    TDD loop.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，设计初始单元测试非常困难，因为很难想象代码可能的工作方式和它可能采取的执行路径。在这种情况下，你可以通过编写应用程序代码的初始草图来更好地理解要使用的特定算法。在这个初始阶段，我们只需要关注主要执行路径，完全忽略极端情况和输入验证。一旦我们清楚地了解了应该工作的算法背后的主要思想，我们就可以进入标准的三个阶段的
    TDD 循环。
- en: In the next section, we will list all test projects available in Visual Studio
    and describe xUnit in detail.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将列出 Visual Studio 中所有可用的测试项目，并详细描述 xUnit。
- en: Defining C# test projects
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 C# 测试项目
- en: Visual Studio contains project templates for three types of unit testing frameworks,
    namely, MSTest, xUnit, and NUnit. Once you start the new project wizard, in order
    to visualize the version of all of them that is adequate for .NET Core C# applications,
    set Project type as Test, Language as C#, and Platform as Linux, since .NET Core
    projects are the only ones that can be deployed on Linux.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 包含三种单元测试框架的项目模板，分别是 MSTest、xUnit 和 NUnit。一旦你启动新项目向导，为了可视化所有这些框架的版本，适合
    .NET Core C# 应用程序，请将项目类型设置为测试，语言设置为 C#，平台设置为 Linux，因为 .NET Core 项目是唯一可以在 Linux
    上部署的项目。
- en: 'The following screenshot shows the selection that should appear:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了应出现的选项：
- en: '![](img/e137b957-4a21-44f1-8824-b7e36823e952.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e137b957-4a21-44f1-8824-b7e36823e952.png)'
- en: All the preceding projects automatically include the NuGet package for running
    all the tests in the Visual Studio test user interface (Visual Studio test runner).
    However, they do not include any facility for mocking interfaces, so you need
    to add the `Moq` NuGet package that contains a popular mocking framework.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的前述项目都自动包含在 Visual Studio 测试用户界面（Visual Studio 测试运行器）中运行所有测试的 NuGet 包。然而，它们不包含任何用于模拟接口的功能，因此你需要添加包含流行模拟框架的
    `Moq` NuGet 包。
- en: All test projects must contain a reference to the project to be tested.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试项目都必须包含对要测试的项目引用。
- en: In the next section, we will describe xUnit, since it is probably the most popular
    of the three frameworks. However, all three frameworks are quite similar and differ
    mainly in the names of the methods and in the names of the attributes used to
    decorate various testing stuff.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将描述 xUnit，因为它可能是三个框架中最受欢迎的一个。然而，所有三个框架都非常相似，主要区别在于方法名称和用于装饰各种测试内容的属性名称。
- en: Using the xUnit test framework
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 xUnit 测试框架
- en: In xUnit, tests are methods decorated with either with the `[Fact]` or with
    the `[Theory]` attributes. Tests are automatically discovered by the test runner
    that lists all of them in the user interface so the user can run either all of
    them or just a selection of them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 xUnit 中，测试是通过 `[Fact]` 或 `[Theory]` 属性装饰的方法。测试由测试运行器自动发现，并在用户界面中列出所有测试，以便用户可以运行所有测试或仅运行部分测试。
- en: A new instance of the test class is created before running each test, so the
    *test preparation* code contained in the class constructor is executed before
    each test of the class. If you also need *tear-down* code, the test class must
    implement the `IDisposable` interface so that the tear-down code can be included
    in the `IDisposable.Dispose` method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行每个测试之前，都会创建测试类的新的实例，因此类构造函数中包含的*测试准备*代码会在每个测试之前执行。如果您还需要*清理*代码，则测试类必须实现`IDisposable`接口，以便将清理代码包含在`IDisposable.Dispose`方法中。
- en: 'The test code invokes the methods to be tested and then tests the results with
    methods of the `Assert` static class, such as `Assert.NotNull(x)`, `Assert.Equal(x,
    y)`, and `Assert.NotEmpty(IEnumerable x)`. There are also methods that verify
    if a call throws an exception of a specific type, for instance:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 测试代码调用要测试的方法，然后使用`Assert`静态类的方法测试结果，例如`Assert.NotNull(x)`、`Assert.Equal(x, y)`和`Assert.NotEmpty(IEnumerable
    x)`。还有验证是否调用抛出特定类型异常的方法，例如：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When an assertion fails, an exception is thrown. A test fails if a not-intercepted
    exception is thrown either by the test code or by an assertion.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个断言失败时，会抛出一个异常。如果测试代码或断言抛出了未被捕获的异常，则测试失败。
- en: 'The following is an example of a method that defines a single test:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个定义单个测试的方法的示例：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `[Fact]` attribute is used when a method defines just one test, while the `[Theory]` attribute
    is used when the same method defines several tests, each on a different tuple
    of data. Tuples of data can be specified in several ways and are injected in the
    test as method parameters.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个方法仅定义一个测试时，使用`[Fact]`属性，而当同一个方法定义多个测试，每个测试在不同的数据元组上时，使用`[Theory]`属性。数据元组可以以多种方式指定，并作为方法参数注入测试中。
- en: 'The previous code can be modified to test `MethodToTest` on several input as
    follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可以修改为测试`MethodToTest`的多个输入，如下所示：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Each `InlineData` attribute specifies a tuple to be injected in the method
    parameters. Since just simple constant data can be included as attribute arguments,
    xUnit gives you also the possibility to take all data tuples from a class that
    implements `IEnumerable`, as shown in the following example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`InlineData`属性指定一个要注入方法参数的元组。由于可以将简单的常量数据作为属性参数包含在内，xUnit还为您提供从实现`IEnumerable`的类中获取所有数据元组的能力，如下面的示例所示：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The type of the class that provides the test data is specified with the `ClassData`
    attribute.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ClassData`属性指定提供测试数据的类的类型。
- en: 'It is also possible to take data from a static method of a class that returns
    an `IEnumerable` with the `MemberData` attribute, as shown in the following example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以从类的静态方法中获取数据，该静态方法返回一个`IEnumerable`，并使用`MemberData`属性，如下面的示例所示：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `MemberData` attribute is passed the method name as the first parameter,
    and the class type in the `MemberType` named parameter. If the static method is
    part of the same test class the `MemberType` parameter can be omitted.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`MemberData`属性将方法名称作为第一个参数传递，并将类类型作为`MemberType`命名参数。如果静态方法是同一测试类的一部分，则可以省略`MemberType`参数。'
- en: The next section shows how to deal with some advanced preparation and tear-down
    scenarios.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将展示如何处理一些高级准备和清理场景。
- en: Advanced test preparation and tear-down scenarios
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级测试准备和清理场景
- en: Sometimes the preparation code contains very time-consuming operations, such
    as opening a connection with a database, that don't need to be repeated before
    each test but can be executed once before all the tests contained in the same
    class. In xUnit, this kind of test preparation code can't be included in the test
    class constructor; since a different instance of the test class is created before
    every single test, it must be factored out in a separate class called a fixture
    class.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有时准备代码包含非常耗时的操作，例如与数据库建立连接，这些操作不需要在每次测试之前重复，但可以在同一类中包含的所有测试之前执行一次。在xUnit中，这种测试准备代码不能包含在测试类构造函数中；由于在每次单个测试之前都会创建测试类的不同实例，因此必须将其分解到单独的类中，称为固定类。
- en: If we also need a corresponding tear-down code, the fixture class must implement
    `IDisposable`. In other test frameworks, such as NUnit, the test class instances
    are created just once instead, so they don't need the fixture code to be factored
    out in other classes. However, test frameworks that, like NUnit, do not create
    a new instance before each test may suffer from bugs because of unwanted interactions
    between test methods.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还需要相应的清理代码，固定类必须实现 `IDisposable`。在其他测试框架中，如 NUnit，测试类实例仅创建一次，因此不需要将固定代码分解到其他类中。然而，像
    NUnit 这样的测试框架，在每次测试之前不创建新实例，可能会因为测试方法之间不希望有的交互而产生错误。
- en: 'The following is an example of an xUnit fixture class that opens and closes
    a database connection:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，展示了如何使用 xUnit 固定类打开和关闭数据库连接：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since a fixture class instance is created just once before all tests associated
    with the fixture are executed and the same instance is disposed of immediately
    after the tests, then the database connection is created just once when the fixture
    class is created and is disposed of immediately after the tests when the fixture
    object is disposed of.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于固定类实例仅在所有与固定类关联的测试执行之前创建一次，并且在测试完成后立即销毁，因此数据库连接仅在创建固定类时创建一次，并在销毁固定对象后立即销毁。
- en: 'The fixture class is associated with each test class by letting the test class
    implement the empty `IClassFixture<T>` interface, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 固定类通过让测试类实现空的 `IClassFixture<T>` 接口与每个测试类相关联，如下所示：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A fixture class instance is automatically injected in the test class constructor
    in order to make all data computed in the fixture test preparation available for
    the tests. This way, for instance, in our previous example we can get the database
    connection instance so that all test methods of the class can use it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 固定类实例会自动注入到测试类构造函数中，以便使在固定类测试准备中计算的所有数据对测试可用。这样，例如，在我们的上一个例子中，我们可以获取数据库连接实例，以便类中的所有测试方法都可以使用它。
- en: 'If we want to execute some test preparation code on all tests contained in
    a collection of test classes instead of a single test class, we must associate
    the fixture class to an empty class that represents the collection of test classes,
    as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在包含在测试类集合中的所有测试上执行一些测试准备代码，而不是单个测试类，我们必须将固定类关联到一个表示测试类集合的空类，如下所示：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `CollectionDefinition` attribute declares the name of the collection, and
    the `IClassFixture<T>` interface has been replaced with `ICollectionFixture<T>`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`CollectionDefinition` 属性声明了集合的名称，而 `IClassFixture<T>` 接口已被 `ICollectionFixture<T>`
    接口所取代。'
- en: 'Then we declare that a test class belongs to the previously defined collection
    by applying it to the `Collection` attribute with the name of the collection,
    as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过将集合名称应用于 `Collection` 属性来声明测试类属于先前定义的集合，如下所示：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `Collection` attribute declares which collection to use, while the `DataBaseFixture`
    argument in the test class constructor provides an actual fixture class instance,
    so it can be used in all class tests.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collection` 属性声明了要使用哪个集合，而测试类构造函数中的 `DataBaseFixture` 参数提供了一个实际的固定类实例，因此它可以用于所有类测试。'
- en: The next section shows how to mock interfaces with the Moq framework.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将展示如何使用 Moq 框架模拟接口。
- en: Mocking interfaces with Moq
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Moq 模拟接口
- en: Mocking capabilities are not included in any of the test frameworks we listed
    in this section as they are not included in xUnit. Therefore, they must be provided
    by installing a specific NuGet package. The Moq framework available in the `Moq`
    NuGet package is the most popular mock framework available for .NET and .NET Core.
    It is quite easy to use and will be briefly described in this section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟功能不包括在本节中列出的任何测试框架中，因为它们不包括在 xUnit 中。因此，它们必须通过安装特定的 NuGet 包来提供。`Moq` NuGet
    包中可用的 Moq 框架是 .NET 和 .NET Core 中最流行的模拟框架。它相当容易使用，本节将简要介绍。
- en: 'Once we''ve installed the NuGet package, we need to add a `using Moq` statement
    in our test files. A mock implementation is easily defined, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了 NuGet 包，我们需要在测试文件中添加一个 `using Moq` 语句。模拟实现很容易定义，如下所示：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The behavior of the mock dependency on specific input of the specific method
    can be defined with the `Setup/Return` method pair as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `Setup/Return` 方法对来定义模拟依赖对特定方法特定输入的行为，如下所示：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After `Return`, we may place another `Setup/Return` pair that defines either
    the behavior of different input of the same method or the behavior of a different
    method. This way we can specify an indefinite number of input/output behaviors.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Return`之后，我们可以放置另一个`Setup/Return`对，该对定义了同一方法的相同输入的不同行为或不同方法的行为。这样，我们可以指定无限数量的输入/输出行为。
- en: 'Instead of specific input values, we may also use wildcards that match a specific
    type as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用特定的输入值，我们也可以使用通配符来匹配特定类型，如下所示：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once configured the mock dependency we may extract the mocked instance from
    its `Object` property and use it as if it were an actual implementation, as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置了模拟依赖项，我们可以从其`Object`属性中提取模拟实例，并像使用实际实现一样使用它，如下所示：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: However, mocked methods are usually called by the code under test, so we just
    need to extract the mocked instance and use it as an input in our tests.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模拟方法通常由被测试的代码调用，所以我们只需要提取模拟实例并将其用作测试中的输入。
- en: 'We may also mock properties and async methods as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以按照以下方式模拟属性和异步方法：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With async methods, `Returns` must be replaced by `ReturnsAsync`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于异步方法，`Returns`必须替换为`ReturnsAsync`。
- en: 'Each mocked instance records all calls to its methods and properties, so we
    may use this information in our tests. The following code shows an example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模拟实例都会记录对其方法和属性的调用，因此我们可以在测试中使用这些信息。以下代码展示了示例：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding statement asserts `MyMethod` that has been invoked with the given
    arguments at least twice. There are also `Times.Never`, a `Times.Once` (that asserts
    the method was called just once), and more.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句断言`MyMethod`方法至少被调用过两次，并带有给定的参数。还有`Times.Never`、`Times.Once`（断言方法只被调用了一次）等更多选项。
- en: The Moq documentation summarized up to now should cover 99% of the needs that
    may arise in your tests, but Moq also offers more complex options. The *Further
    reading* section contains the link to the complete documentation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的Moq文档应该涵盖了您测试中可能出现的99%的需求，但Moq还提供了更复杂的选择。*进一步阅读*部分包含了完整文档的链接。
- en: The next section shows how to define in practice unit tests and how to run them
    both in Visual Studio and in Azure DevOps with the help of the book use case.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将展示如何在实践中定义单元测试以及如何在Visual Studio和Azure DevOps中运行它们，这得益于本书中的用例。
- en: Use case – automating unit tests in DevOps Azure
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例 - 在DevOps Azure中自动化单元测试
- en: In this section, we add some unit test projects to the example application we
    built in [Chapter 13](003ee8cb-5995-4364-8772-73d73df29cf8.xhtml), *Presenting
    ASP.NET Core MVC*. If you don't have it, you can download it from the [Chapter
    13](003ee8cb-5995-4364-8772-73d73df29cf8.xhtml), *Presenting ASP.NET Core MVC*,
    section of the GitHub repository associated with the book. The [Chapter 4](049a0a4b-74b6-41a1-92db-87a4f8af9fd1.xhtml),
    *Deciding The Best Cloud-Based Solution*, section of the GitHub repository contains
    the code we will add in this section and all the instructions to add it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向我们在[第13章](003ee8cb-5995-4364-8772-73d73df29cf8.xhtml)中构建的示例应用程序中添加一些单元测试项目，即*展示ASP.NET
    Core MVC*。如果您没有，您可以从GitHub仓库中与本书相关的[第13章](003ee8cb-5995-4364-8772-73d73df29cf8.xhtml)的*展示ASP.NET
    Core MVC*部分下载它。GitHub仓库中[第4章](049a0a4b-74b6-41a1-92db-87a4f8af9fd1.xhtml)的*决定最佳云解决方案*部分包含了本节将添加的代码以及所有添加这些代码的说明。
- en: As a first step, let's make a new copy of the solution folder and name it `PackagesManagementWithTests`.
    Then open the solution and add it to xUnit .NET Core C# test project named `PackagesManagementTest`.
    Finally, add a reference to the ASP.NET Core project (`PackagesManagement`), since
    we will test it, and a reference to the last version of the `Moq` NuGet package,
    since we need mocking capabilities. At this point, we are ready to write our tests.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，让我们复制解决方案文件夹并命名为`PackagesManagementWithTests`。然后打开解决方案并将其添加到名为`PackagesManagementTest`的xUnit
    .NET Core C#测试项目中。最后，添加对ASP.NET Core项目（`PackagesManagement`）的引用，因为我们将要对其进行测试，并添加对`Moq`
    NuGet包最新版本的引用，因为我们需要模拟功能。到这一点，我们就准备好编写测试了。
- en: 'As an example, we will write unit tests for the `Edit` method decorated with
    `[HttpPost]` of the `ManagePackagesController` controller, which is shown as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将为`ManagePackagesController`控制器中带有`[HttpPost]`属性的`Edit`方法编写单元测试，如下所示：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Before writing our test methods, let's rename the test class that was automatically
    included in the test project as `ManagePackagesControllerTests`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试方法之前，让我们将测试项目中自动包含的测试类重命名为`ManagePackagesControllerTests`。
- en: 'The first test verifies that in case there are errors in `ModelState` the action
    method renders a view with the same model it received as an argument so that the
    user can correct all errors. Let''s delete the existing test method and write
    an empty `DeletePostValidationFailedTest` method, as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次测试验证，如果`ModelState`中存在错误，动作方法会渲染一个与作为参数接收的相同模型视图，以便用户可以纠正所有错误。让我们删除现有的测试方法，并编写一个空的`DeletePostValidationFailedTest`方法，如下所示：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The method must be `async` since the `Edit` method that we have to test is
    `async`. In this test, we don''t need mocked objects since no injected object
    will be used. Thus, as a preparation for the test we just need to create a controller
    instance, and we must add an error to `ModelState` as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法必须是`async`，因为我们必须测试的`Edit`方法是`async`。在这个测试中，我们不需要模拟对象，因为不会使用注入的对象。因此，作为测试的准备，我们只需要创建一个控制器实例，并且我们必须向`ModelState`添加一个错误，如下所示：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then we invoke the method, injecting `ViewModel` and a `null` command handler
    as its arguments since the command handler will not be used:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用该方法，注入`ViewModel`和一个`null`命令处理程序作为其参数，因为命令处理程序将不会使用：
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the verification stage, we verify that the result is `ViewResult` and that
    it contains the same model that was injected in the controller:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证阶段，我们验证结果是否为`ViewResult`，并且它包含在控制器中注入的相同模型：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we also need a test to verify that in case there are no errors the command
    handler is called, and then the browser is redirected to the `Index` controller
    action method. We call the `DeletePostSuccessTest` method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还需要一个测试来验证如果没有错误，命令处理程序会被调用，然后浏览器会被重定向到`Index`控制器动作方法。我们调用`DeletePostSuccessTest`方法：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This time the preparation code must include the preparation of a command handler
    mock, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这次准备代码必须包括命令处理程序模拟的准备，如下所示：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Since the handler `HandleAsync` method returns no `async` value, we can''t
    use `ReturnsAsync`, but we have to return just a completed `Task` (`Task.Complete`)
    with the `Returns` method. The method to test is called with both `ViewModel`
    and the mocked handler:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于处理程序`HandleAsync`方法不返回任何`async`值，我们不能使用`ReturnsAsync`，但我们必须使用`Returns`方法只返回一个完成的`Task`（`Task.Complete`）。要测试的方法使用`ViewModel`和模拟的处理程序调用：
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this case, the verification code is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，验证代码如下：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As the first step, we verify that the command handler has actually been invoked
    once. A better verification should also include a check that it was invoked with
    a command that includes `ViewModel` passed to the action method. This can be done
    by extracting this information from `commandDependency.Invocations`. We will take
    it up as an exercise.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们验证命令处理程序确实被调用了一次。更好的验证还应包括检查它是否使用传递给动作方法的`ViewModel`调用命令。这可以通过从`commandDependency.Invocations`中提取此信息来完成。我们将将其作为练习。
- en: Then we verify that the action method returns `RedirectToActionResult` with
    the right action method name and with no controller name specified.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们验证动作方法返回带有正确动作方法名称的`RedirectToActionResult`，并且没有指定控制器名称。
- en: Once all tests are ready, if the test windows don't appear on the left bar of
    Visual Studio, we may simply select the Run all tests item from Visual Studio
    Test menu. Once the test window appears, further invocations can be launched from
    within this window.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有测试都准备好了，如果测试窗口没有出现在Visual Studio的左侧栏中，我们只需从Visual Studio Test菜单中选择运行所有测试项。一旦测试窗口出现，进一步的调用可以从该窗口内启动。
- en: If a test fails, we can add a breakpoint to its code, so we can launch a debug
    session on it by right-clicking on it in the test window and then by selecting
    Debug selected tests.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试失败，我们可以在其代码中添加一个断点，这样我们就可以通过在测试窗口中右键单击它并选择调试选定的测试来启动一个调试会话。
- en: 'The following steps show how to connect our solution with an Azure DevOps repository,
    and we will define an Azure DevOps pipeline that builds the project and launches
    its tests. In this way, every day after that all developers have pushed their
    changes we can launch the pipeline to verify that the repository code compiles
    and passes all the tests:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤显示了如何将我们的解决方案与Azure DevOps存储库连接起来，我们将定义一个Azure DevOps管道，该管道构建项目并启动其测试。这样，从那天起，每天开发人员推送更改后，我们都可以启动管道来验证存储库代码是否编译并通过所有测试：
- en: As a first step, we need a free DevOps subscription. If you don't already have
    one, please create one by clicking the Start Free button on this page: [https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/).
    Here, let's define an organization but stop before creating a project, since we
    will create the project from within Visual Studio.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，我们需要一个免费的 DevOps 订阅。如果你还没有，请通过点击此页面的“开始免费”按钮来创建一个：[https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/)。在这里，让我们定义一个组织，但在创建项目之前停止，因为我们将在
    Visual Studio 内部创建项目。
- en: 'Ensure you are logged into Visual Studio with your Azure account (the same
    used in the creation of the DevOps account). At this point, you may create a DevOps
    repository for your solution by right-clicking on the solution and by selecting
    Configure continuous delivery to Azure.... In the window that appears, an error
    message will inform you that you have no repository configured for your code:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已使用 Azure 账户（与创建 DevOps 账户时使用的相同）登录到 Visual Studio。在此阶段，你可以通过右键单击解决方案并选择“配置持续交付到
    Azure...”来为你的解决方案创建一个 DevOps 仓库。在出现的窗口中，一个错误消息会告知你你的代码尚未配置任何仓库：
- en: '![](img/dbc6d39a-7382-45bc-9bc0-9a16480889fd.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dbc6d39a-7382-45bc-9bc0-9a16480889fd.png)'
- en: 'Click the Add to source control now link. After that, the DevOps screen will
    appear in the Visual Studio Team Explorer tab:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“现在添加到源控制”链接。之后，DevOps 屏幕将出现在 Visual Studio Team Explorer 标签中：
- en: '![](img/ea638c5d-f9df-4efb-9900-55e2d82f91ac.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea638c5d-f9df-4efb-9900-55e2d82f91ac.png)'
- en: 'Once you click the Publish Git Repo button, you will be prompted to select
    your DevOps organization and a name for the repository. After you successfully
    publish your code to a DevOps repository, the DevOps screen should change as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“发布 Git 仓库”按钮后，系统会提示你选择你的 DevOps 组织和仓库名称。成功将代码发布到 DevOps 仓库后，DevOps 屏幕应如下所示：
- en: '![](img/fee29f8b-e302-4bba-a4c0-f5e238a8360f.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fee29f8b-e302-4bba-a4c0-f5e238a8360f.png)'
- en: The DevOps screen shows a link to your online DevOps project. In future when
    you open your solution, if the link does not appear, please click the DevOps screen
    Connect button or the Manage connections link (whichever appears) to select and
    connect your project.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 屏幕显示了你的在线 DevOps 项目的链接。未来当你打开你的解决方案时，如果链接没有出现，请点击 DevOps 屏幕上的“连接”按钮或“管理连接”链接（
    whichever appears）来选择并连接你的项目。
- en: Click this link to go to the online project. Once there, if you click the Repos item,
    on the left-hand menu, you will see the repository you just published.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此链接访问在线项目。一旦到达那里，如果你点击左侧菜单中的“Repos”项，你会看到你刚刚发布的仓库。
- en: 'Now, click the Pipelines menu item to create a DevOps pipeline to build and
    test your project. In the window that appears, click the button to create a new
    pipeline:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“管道”菜单项以创建一个用于构建和测试你的项目的 DevOps 管道。在出现的窗口中，点击按钮以创建一个新的管道：
- en: '![](img/d6b38797-da24-4450-9375-88d70a784da6.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d6b38797-da24-4450-9375-88d70a784da6.png)'
- en: 'You will be prompted to select where your repository is:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被提示选择你的仓库位置：
- en: '![](img/312d6a6e-71f3-4f9e-945c-df13b556ad9d.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/312d6a6e-71f3-4f9e-945c-df13b556ad9d.png)'
- en: 'Select Azure Repos Git and then your repository. Then you will be prompted
    about the kind of project:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“Azure Repos Git”然后选择你的仓库。然后你将被提示关于项目类型的问题：
- en: '![](img/dd35e542-279e-473b-9f8a-a6212f4fa607.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dd35e542-279e-473b-9f8a-a6212f4fa607.png)'
- en: 'Select ASP.NET Core. A pipeline for building and testing your project will
    be automatically created for you. Save it by committing the newly created `.yaml`
    file to your repository:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 ASP.NET Core。将为你自动创建一个用于构建和测试项目的管道。通过将新创建的 `.yaml` 文件提交到你的仓库来保存它：
- en: '![](img/c97e7062-e8f8-4ee0-a7f9-ae78f5c77746.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c97e7062-e8f8-4ee0-a7f9-ae78f5c77746.png)'
- en: 'The pipeline can be run by selecting the Queue button, but since the standard
    pipeline scaffolded by DevOps has a trigger on the master branch of the repository,
    it is automatically launched each time changes to this branch are committed and
    each time the pipeline is modified. The pipeline can be modified by clicking the
    Edit button:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过选择“排队”按钮来运行管道，但由于 DevOps 标准管道是在仓库的 master 分支上触发的，因此每次提交此分支的更改或修改管道时，它都会自动启动。可以通过点击“编辑”按钮来修改管道：
- en: '![](img/9d650049-a388-41e8-8617-ac1603d5b610.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9d650049-a388-41e8-8617-ac1603d5b610.png)'
- en: 'Once in edit mode, all pipeline steps can be edited by clicking the Settings link
    that appears above each of them. New pipeline steps can be added as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入编辑模式，可以通过点击每个步骤上出现的“设置”链接来编辑所有管道步骤。可以按照以下方式添加新的管道步骤：
- en: Write `task:` where the new step must be added and then accept one of the suggestions
    that appear while you are typing the task name.
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新步骤必须添加的位置写上`task:`，然后在你输入任务名称时接受出现的建议之一。
- en: After you have written a valid task name a Settings link appears above the new
    step, click it.
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你编写了一个有效的任务名称后，一个设置链接会出现在新步骤上方，点击它。
- en: Insert the desired task parameters in the window that appears and save.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的窗口中插入所需的任务参数并保存。
- en: 'In order to have our test working, we need to specify the criteria to locate
    all assemblies that contain tests. In our case, since we have a unique `.dll` file
    containing the tests, it is enough to specify its name. Click the Settings link
    of the `VSTest@2` test task, and replace the content that is automatically suggested
    for the Test files field with the following:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让我们的测试工作，我们需要指定定位包含测试的所有程序集的标准。在我们的案例中，因为我们有一个包含测试的唯一`.dll`文件，所以指定其名称就足够了。点击`VSTest@2`测试任务的设置链接，并将自动建议的测试文件字段的内容替换为以下内容：
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then click Add to modify the actual pipeline content. As soon as you confirm
    your changes in the Save and run dialog, the pipeline is launched, and if there
    are no errors, test results are computed. The results of tests launched during
    a specific build can be analyzed by selecting the specific build in the pipeline
    History tab and by clicking the Tests tab on the page that appears. In our case,
    we should see something like the following screenshot:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击“添加”以修改实际的管道内容。一旦你在“保存并运行”对话框中确认了你的更改，管道就会被启动，如果没有错误，测试结果将被计算。在特定构建期间启动的测试结果可以通过在管道历史记录标签页中选择特定的构建，并点击出现的页面上的“测试”标签来分析。在我们的案例中，我们应该看到以下截图类似的内容：
- en: '![](img/2f00596e-c2af-4fa5-94f6-fea25143eb4e.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f00596e-c2af-4fa5-94f6-fea25143eb4e.png)'
- en: 'If you click the Analytics tab of the pipeline page, you will see analytics
    about all builds, including analytics about the test results:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击管道页面的分析标签，你会看到关于所有构建的分析，包括关于测试结果的分析：
- en: '![](img/3826cfb0-e925-40f6-b796-29ea9865b12a.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3826cfb0-e925-40f6-b796-29ea9865b12a.png)'
- en: Clicking the test area of the Analytics page gets us a detailed report about
    all pipeline test results.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击分析页面的测试区域，我们可以获得所有管道测试结果的详细报告。
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explained why it is worth automating software tests, and
    then we focused on the importance of unit tests. We also listed all types of tests
    and their main features, focusing mainly on unit tests. We analyzed the advantages
    of TDD, and how to use it in practice. With this knowledge, you should be able
    to produce software that is both reliable and easy to modify.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了为什么自动化软件测试是值得的，然后我们关注了单元测试的重要性。我们还列出了所有测试类型及其主要特性，主要关注单元测试。我们分析了TDD的优势以及如何在实践中使用它。有了这些知识，你应该能够生产出既可靠又易于修改的软件。
- en: Finally, we analyzed all test tools available for .NET Core projects, focusing
    on the description of xUnit and Moq and showed how to use them in practice both
    in Visual Studio and in Azure DevOps with the help of the book use case.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们分析了适用于.NET Core项目的所有测试工具，重点关注xUnit和Moq的描述，并展示了如何在Visual Studio和Azure DevOps中通过本书用例的实际应用中使用它们。
- en: The next chapter looks at how to test and measure the quality of the code.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将探讨如何测试和衡量代码的质量。
- en: Questions
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why is it worth automating unit tests?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么自动化单元测试是值得的？
- en: What is the main reason TDD is able immediately to discover most bugs?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TDD能够立即发现大多数错误的主要原因是什么？
- en: What is the difference between the `[Theory]` and `[Fact]` attributes of xUnit?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Theory]`和`[Fact]`属性在xUnit中的区别是什么？'
- en: Which xUnit static class is used in test assertions?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试断言中使用了哪个xUnit静态类？
- en: Which methods allow the definition of the Moq mocked dependencies?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些方法允许定义Moq模拟的依赖项？
- en: Is it possible to mock async methods with Moq? If yes, how?
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否可以使用Moq模拟异步方法？如果是，如何？
- en: Further reading
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: While the documentation on xUnit included in the chapter is quite complete,
    it doesn't include the few configuration options offered by xUnit. The full xUnit
    documentation is available at [https://xunit.net/](https://xunit.net/). Documentation
    for MSTest and NUnit can be found at [https://github.com/microsoft/testfx](https://github.com/microsoft/testfx) and
    at [https://github.com/nunit/docs/wiki/NUnit-Documentation](https://github.com/nunit/docs/wiki/NUnit-Documentation) respectively.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管章节中包含的xUnit文档相当完整，但它并没有包括xUnit提供的少数配置选项。完整的xUnit文档可在[https://xunit.net/](https://xunit.net/)找到。MSTest和NUnit的文档分别可在[https://github.com/microsoft/testfx](https://github.com/microsoft/testfx)和[https://github.com/nunit/docs/wiki/NUnit-Documentation](https://github.com/nunit/docs/wiki/NUnit-Documentation)找到。
- en: Moq full documentation is at [https://github.com/moq/moq4/wiki/Quickstart](https://github.com/moq/moq4/wiki/Quickstart).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Moq的完整文档可在[https://github.com/moq/moq4/wiki/Quickstart](https://github.com/moq/moq4/wiki/Quickstart)找到。
- en: 'Here are some links to performance test frameworks for web applications:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些针对Web应用程序的性能测试框架的链接：
- en: '[https://jmeter.apache.org/](https://jmeter.apache.org/) (free and open source)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://jmeter.apache.org/](https://jmeter.apache.org/) (免费和开源)'
- en: '[https://www.neotys.com/neoload/overview](https://www.neotys.com/neoload/overview)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.neotys.com/neoload/overview](https://www.neotys.com/neoload/overview)'
- en: '[https://www.microfocus.com/en-us/products/loadrunner-load-testing/overview](https://www.microfocus.com/en-us/products/loadrunner-load-testing/overview)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.microfocus.com/en-us/products/loadrunner-load-testing/overview](https://www.microfocus.com/en-us/products/loadrunner-load-testing/overview)'
- en: '[https://www.microfocus.com/en-us/products/silk-performer/overview](https://www.microfocus.com/en-us/products/silk-performer/overview)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.microfocus.com/en-us/products/silk-performer/overview](https://www.microfocus.com/en-us/products/silk-performer/overview)'
