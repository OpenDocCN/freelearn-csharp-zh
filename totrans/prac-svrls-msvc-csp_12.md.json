["```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add service defaults & Aspire client integrations.\n**builder.****AddServiceDefaults****();**\n// Add application specific services\nbuilder.Services…..\n…\n// Build application host\nvar app = builder.Build();\n//Configure application\napp….\n…\n//Add default endpoints\n**app.****MapDefaultEndpoints****();**\napp.Run(); \n```", "```cs\n // Arrange\n//    var appHost = await DistributedApplicationTestingBuilder\n.CreateAsync<Projects.**MyAspireApp_AppHost**>();\n    //    appHost.Services.ConfigureHttpClientDefaults(clientBuilder =>\n//    {\n//        clientBuilder.AddStandardResilienceHandler();\n//    });        //\n//    await using var app = await appHost.BuildAsync();\n//    var resourceNotificationService = app.Services.\n    //    GetRequiredService<ResourceNotificationService>();\n//    await app.StartAsync();\n//    // Act\n//    var httpClient = app.CreateHttpClient(\"**webfrontend**\");\n//    await resourceNotificationService\n//    .WaitForResourceAsync(\"**webfrontend**\",\n//    KnownResourceStates.Running).WaitAsync(TimeSpan.FromSeconds(30));\n//    var response = await httpClient.GetAsync(\"/\"); \n```", "```cs\n\"Services\": {\n    \"myservice\": {\n      \"https\": [\n        \"10.46.24.91:80\"\n      ],\n       \"http\": [\n        \"10.46.24.91:443\"\n      ]\n    }\n  } \n```", "```cs\nbuilder.Services.AddServiceDiscovery(); \n```", "```cs\nbuilder.Services.AddServiceDiscovery()\n    .AddConfigurationServiceEndpointProvider(); \n```", "```cs\nbuilder.Services.Configure<ConfigurationServiceEndPointResolverOptions>(\n    static options =>\n    {\n        options.SectionName = \"MyCustomResolverSection\"\n    }); \n```", "```cs\nbuilder.Services.ConfigureHttpClientDefaults(http =>\n{\n    http.AddServiceDiscovery();\n}); \n```", "```cs\nbuilder.Services.ConfigureHttpClientDefaults(http =>\n{\n    http.AddStandardResilienceHandler();\n    http.AddServiceDiscovery();\n}); \n```", "```cs\nbuilder.Services.AddHttpClient(\"myclient\", static client =>\n{\n    client.BaseAddress = new(\"https://routes_planning\");\n})\n.AddServiceDiscovery(); \n```", "```cs\nvar routesPlanning = builder.AddProject<Projects.RoutesPlanningService>(\"routes_planning \")\n    .WithHttpsEndpoint(hostPort: 9999, name: \"aux\"); \n```", "```cs\n\"Services\": {\n    \"routes_planning\": {\n      \"https\": [\"https://localhost:8080\"],\n      \"aux\": [\"https://localhost:8090\"]   \n    }\n  } \n```", "```cs\nhttps://_aux.routes_planning \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\n  name: routes_planning\nspec:\n  selector:\n    name: routes_planning\n  ports:\n  - name: default\nport: 8080\n  - name: aux\n    port: 8090 \n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar sql = builder.AddSqlServer(\"sql\");\nvar db = sql.AddDatabase(\"mydatabase \"); \n```", "```cs\nbuilder.AddProject<Projects.MyExampleProject>()\n       .**WithReference****(db);** \n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar db = builder.AddConnectionString(\"parameterName\", \"database\"); \n```", "```cs\n{\n    \"Parameters\": {\n        \" parameterName \": \" SERVER=XXX.XXX.X.XX;DATABASE=DATABASENAME ……\"\n    }\n} \n```", "```cs\nbuilder.AddProject<Projects.MyExampleProject>()\n       .WithReference(db); \n```", "```cs\n     `\"myservicename \", \"relative/context/path\");` \n    ```", "```cs\nvar cache = builder.AddProject<Projects……\nvar apiService = builder.AddProject<Projects……\nbuilder.AddProject<Projects.MyAspireProject>(\"webfrontend\")   \n   .WithReference(cache)\n    .WaitFor(cache)\n    .WithReference(apiService)\n    .WaitFor(apiService); \n```", "```cs\nvar routesPlanning = builder.AddProject<Projects.RoutesPlanningService>(\"routes_planning \")\n    .WithEndpoint(hostPort: 9999, name: \"aux\"); \n```", "```cs\nvar sql = builder.AddSqlServer(\"sql\")\n                 .WithDataVolume();\nvar db = sql.AddDatabase(\"database\"); \n```", "```cs\nvar sql = builder.AddSqlServer(\"sql\")\n                 .WithBindMount(\"MyVolumeName\", \"/var/opt/mssql\");\nvar db = sql.AddDatabase(\"database\"); \n```", "```cs\nvar password = builder.AddParameter(\"sqlpassword\", secret: true); \n```", "```cs\nvar sql = builder.AddSqlServer(\"sql\", password)\n                 .WithBindMount(\"MyVolumeName\", \"/var/opt/mssql\");\nvar db = sql.AddDatabase(\"database\"); \n```", "```cs\n{ \n  \"Parameters\": {\n    \"sqlpassword\": \"my_password_value\",\n   …\n  },\n  …\n} \n```", "```cs\nvar myFunction = builder.AddAzureFunctionsProject<Projects.MyFunctionsProject>(\n \" MyFunction \"); \n```", "```cs\nbuilder.AddProject<Projects.MyOtherProject>()\n       .WithReference(myFunction)\n       .WaitFor(myFunction); \n```", "```cs\nvar storage = builder.AddAzureStorage(\"storage\")\n                     .RunAsEmulator();\nvar myFunction = builder.AddAzureFunctionsProject<Projects.MyFunctionsProject>(\n    \" MyFunction \")\n.WithHostStorage(storage) \n```", "```cs\nvar storage = builder.AddAzureStorage(\"storage\")\n                     .RunAsEmulator();\nvar blob = storage.AddBlobs(\"blob\");\nvar myFunction = builder.AddAzureFunctionsProject<Projects.MyFunctionsProject>(\n    \" MyFunction \")\n.WithHostStorage(storage)\n.WithReference(blob); \n```", "```cs\nvar app = builder.Build();\n**app.****MapDefaultEndpoints****();** \n```", "```cs\n{\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"environmentVariables\": {\n\n        //place here your environment variables\n\"ConnectionStrings__DefaultConnection\": \"Server=localhost;\n            Database=RoutesPlanning;User Id=sa;Password=Passw0rd_;\n            Trust Server Certificate=True;MultipleActiveResultSets=true\",\n        \"ConnectionStrings__RabbitMQConnection\": \"host=localhost:5672;\n username=guest;password=_myguest;\npublisherConfirms=true;timeout=10”,\n        \"Messages__SubscriptionIdPrefix\": \"routesPlanning\",\n        \"Topology__MaxDistanceKm\": \"50\",\n        \"Topology__MaxMatches\": \"5\",\n        \"Timing__HousekeepingIntervalHours\": \"48\",\n        \"Timing__HousekeepingDelayDays\": \"10\",\n        \"Timing__OutputEmptyDelayMS\": \"500\",\n        \"Timing__OutputBatchCount\": \"10\",\n        \"Timing__OutputRequeueDelayMin\": \"5\",\n        \"Timing__OutputCircuitBreakMin\": \"4\"\n      },\n      \"dotnetRunMessages\": true,\n      \"applicationUrl\": \"http://localhost:5212\"\n    },\n    \"Container (Dockerfile)\": {\n…\n… \n```", "```cs\n{\n  \"profiles\": {\n    \"FakeSource\": {\n      \"commandName\": \"Project\",\n      \"environmentVariables\": {\n        \"DOTNET_ENVIRONMENT\": \"Development\",\n        \"ConnectionStrings__RabbitMQConnection\":\n\"host=localhost:5672;username=guest;\n            password=_myguest;publisherConfirms=true;timeout=10\"\n      },\n      \"dotnetRunMessages\": true\n    },\n    \"Container (Dockerfile)\": {\n      \"commandName\": \"Docker\",\n      \"environmentVariables\": {\n        \"ConnectionStrings__RabbitMQConnection\":\n “host=host.docker.internal:5672;\n username=guest;password=_myguest;\n            publisherConfirms=true;timeout=10”\n      }\n    }\n  },\n  \"$schema\": \"https://json.schemastore.org/launchsettings.json\"\n} \n```", "```cs\n{\n  \"profiles\": {\n    \"FakeDestination\": {\n      \"commandName\": \"Project\",\n      \"environmentVariables\": {\n        \"DOTNET_ENVIRONMENT\": \"Development\",\n        \"ConnectionStrings__RabbitMQConnection\":\n\"host=localhost:5672;username=guest;\n            password=_myguest;publisherConfirms=true;timeout=10\"\n      },\n      \"dotnetRunMessages\": true\n    },\n    \"Container (Dockerfile)\": {\n      \"commandName\": \"Docker\",\n      \"environmentVariables\": {\n        \"ConnectionStrings__RabbitMQConnection\":\n “host=host.docker.internal:5672;\n username=guest;password=_myguest;\n publisherConfirms=true;timeout=10\"\n      }\n    }\n  },\n  \"$schema\": \"https://json.schemastore.org/launchsettings.json\"\n} \n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar fakeDestination=builder.AddProject<Projects.FakeDestination>(\"fakedestination\",\n \"FakeDestination\");\nvar routesPlanning = builder.AddProject<Projects.RoutesPlanning>(\"routesplanning\", \"http\")\n    .WaitFor(fakeDestination);\nbuilder.AddProject<Projects.FakeSource>(\"fakesource\", \"FakeSource\")\n    .WaitFor(routesPlanning);\nbuilder.Build().Run(); \n```", "```cs\nbuilder.AddConnectionString(\"RabbitMQParameterName\", \"RabbitMQConnection\"); \n```", "```cs\n{\n  \"Parameters\": {\n    \"RabbitMQParameterName\": \"host=localhost:5672;username=guest;\n            password=_myguest;\n        publisherConfirms=true;timeout=10\"\n    }\n} \n```", "```cs\nvar username = builder.AddParameter(\"rabbitmqusername\", secret: true);\nvar password = builder.AddParameter(\"rabbitmqpassword\", secret: true);\nvar rabbitmq = builder.AddRabbitMQ(\"RabbitMQConnection\", username, password)\n       .WithManagementPlugin()\n       .WithDataVolume(isReadOnly: false); \n```", "```cs\n{\n  \"Parameters\": {\n    \"rabbitmqusername\": \"<username>\",\n    \"rabbitmqpassword\": \"<password>\"\n    }\n} \n```", "```cs\n`amqp://username:password@<host url>:5672`. \n```", "```cs\n\"profiles\": {\n\"generate-manifest\": {\n\"commandName\": \"Project\",\n\"launchBrowser\": false,\n\"dotnetRunMessages\": true,\n\"commandLineArgs\": \"--publisher manifest --output-path aspire-\n                        manifest.json\"\n}\n… \n```"]