- en: A Better Foot Forward
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've made it to the final chapter of *Practical Test-Driven Development using
    C# 7*. We thank you. But, your journey as a **Test-Driven Development** (**TDD**)
    practitioner is just beginning. Soon it will be time for you to rejoin the world
    as a TDD expert.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll summarize the main topics from previous chapters and
    give you some pointers to help you continue on this voyage. In this chapter, we
    will gain an understanding of:'
  prefs: []
  type: TYPE_NORMAL
- en: Why TDD is important
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Growing applications through tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing TDD to your team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rejoining the world as a TDD expert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we've covered
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You're likely not yet an expert. That's okay. There will be times when you may
    become stuck or doubt the benefits of TDD. Fret not. Reading this book has been
    but a step on the journey to becoming a TDD master. The road is long but well
    worth the time and effort devoted to this journey. You are a professional, a craftsman
    devoted to your trade.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you should feel confident setting up your development environment. You
    can configure your IDE of choice to run your suite of unit tests. You should be
    comfortable with choosing a test runner and the specific nuances and features
    involved in that choice. And, of course, you know how to assemble a comprehensive
    set of unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: You can grow an application guided by tests. Refactoring should now be a breeze
    as you have the confidence to move code around without introducing breaking changes.
    You can demonstrate correctness to application stakeholders and you have guarded
    against regression bugs with the confidence provided by your tests.
  prefs: []
  type: TYPE_NORMAL
- en: The world in the TDD space makes perfect sense. You'll wonder how you ever lived
    without your new-found knowledge. Let's take a moment and review what we've learned.
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, where do you go from here? Hopefully, you're as excited about TDD as you
    were when you first successfully compiled a software application. Each successive
    passing test is proof of your hard work and understanding of the problem at hand.
    Celebrate each small victory for the accomplishment that it is. Validate your
    understanding along the way by introducing more and more functionality to the
    system through your tests.
  prefs: []
  type: TYPE_NORMAL
- en: As you continue in your career, it is up to you to choose to operate in a TDD
    fashion. Adherence to the philosophy and how well you maintain the TDD mindset
    is completely up to you. Don't be discouraged if your boss isn’t familiar with
    TDD. You don't need permission.
  prefs: []
  type: TYPE_NORMAL
- en: Continue to grow applications through tests. If others ask about TDD, share
    your knowledge and enthusiasm. Introduce the practice to your team, but do not
    force the practice on anyone who is not ready.
  prefs: []
  type: TYPE_NORMAL
- en: TDD is a personal practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First and foremost, TDD is a personal practice. It should not be a line item
    on anyone's budget. TDD is the way in which high-quality software is developed
    by those who care deeply about their craft.
  prefs: []
  type: TYPE_NORMAL
- en: If you suspect you might get pushback from your team, managers, or project sponsors
    then there is no need to involve them in the decision to develop software in this
    way.
  prefs: []
  type: TYPE_NORMAL
- en: It is often better that the development team is made aware that there are tests
    in the system so as to avoid breaking them, but it need not be necessary to seek
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need anyone's permission to do good work.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need permission
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you introduce TDD on a project that was not originally started that way,
    you may be asked who gave you permission to do so. You don't need anyone's permission
    to do good work. TDD is a personal practice to ensure you deliver high-quality
    software. You shouldn't need anyone's permission to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Take pride in your work and do the best that you know how. As you grow and become
    more comfortable with TDD, it will likely become your default method of software
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Grow applications through tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's easy to fall into the trap of *Big Design Upfront*. These design sessions
    are important, but the artifacts of these meetings are the exploratory ideas they
    generate, not a note-for-note plan of attack. Applications should be grown organically,
    guided by the tests written by you, the developer.
  prefs: []
  type: TYPE_NORMAL
- en: When developing a greenfield application, it’s much easier to get started with
    TDD. Designing with testing in mind from the beginning is much easier than trying
    to retrofit tests at a later date. Your applications will benefit greatly when
    developed from the beginning with testing in mind. Guided by tests, your software
    will be simpler and much easier to grow and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements, assuming the needs and expectations are clearly defined, are effortlessly
    added to a system through tests. If a user story has been well defined, then the
    requirements translate easily to a series of new tests. Subsequently, new production
    code can easily be added to the system by making the new tests pass. Fear of introducing
    new defects or changing existing behavior should be minimal, assuming an existing
    comprehensive suite of unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Defects can be addressed as they are discovered. Simply write one or more tests
    to define the expected behavior and modify the production code as you go. More
    defects may be uncovered, or existing behavior, and by extension existing tests
    may need to change as a result. Don't worry, the suite of tests is there to guard
    against bugs and to give you, the developer, a sense of security.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing TDD to your team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you are probably quite excited at sharing the wonderful world
    of TDD with your organization and fellow team members. Be aware that others may
    not have the same enthusiasm. Writing unit tests may be a scary proposition to
    someone that has never tried it before. There may be some negative connotations
    associated with the idea for some on your team.
  prefs: []
  type: TYPE_NORMAL
- en: As developers, we're paid to be the experts. We're expected to have the answers.
    When something new and unknown is introduced, it can be an anxiety-inducing experience.
    Work towards reducing the anxiety your team might feel when learning something
    new. Remember how it felt when you heard the term TDD and didn’t know where to
    begin. Think about how you felt before picking up this book.
  prefs: []
  type: TYPE_NORMAL
- en: There are good ways and not so good ways to introduce TDD to your team. If you
    truly want your team to adopt the practice, then think about ways in which to
    get them excited about the prospect.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t force TDD on anyone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There have been countless tales of woe associated with introducing TDD to a
    team. An over enthusiastic member tries to cram the merits of TDD down the throats
    of the rest of the team. Project leaders may balk and try to ban the process altogether.
  prefs: []
  type: TYPE_NORMAL
- en: If a team does decide to adopt the practice as a whole, be sure that each member
    of the team has a say. Everyone's voice is important. If a team member is not
    on board, team mates may recoil, and may even leave the project or the company.
  prefs: []
  type: TYPE_NORMAL
- en: Gamification of TDD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A great way to expose a new team to TDD is by making a game out of the process.
    Introduce the subject slowly and get people excited about the prospect of learning
    a new skill. Create a friendly rivalry or set of challenges for the team.
  prefs: []
  type: TYPE_NORMAL
- en: Lunch and learn sessions can be a great way to introduce the subject. There
    are countless video tutorials on YouTube and sites such as Pluralsight that can
    be a great introduction and social sharing event for your team.
  prefs: []
  type: TYPE_NORMAL
- en: Code Katas are an excellent way to expose someone to TDD. Small, 20-minute exercises
    are simple enough to get someone comfortable with the basic premise. Slowly introduce
    more complexity and different challenges as the members get more comfortable with
    the exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Code Challenges and/or homework may prove to be a good way to get your team
    involved. You should have a feel for who works best under what scenarios. Some
    may prefer homework and working on their own, while others may be more responsive
    to individual challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Showing your team the benefits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your best bet is to introduce testing slowly. If you're working to resolve a
    defect, look to wrap the existing method or function with a test to verify the
    defect. Correct the code to allow the new tests to pass. Share your results with
    your teammates. Explain how easy the process was and how much time and effort
    might have been saved as a result. Do not pressure, just inform.
  prefs: []
  type: TYPE_NORMAL
- en: New features to existing applications are a great time to explore TDD with your
    team. If you can show your co-workers how new features can be developed using
    TDD in an existing application, it may prove useful. It may be easier to introduce
    a foreign concept, such as TDD, within an existing application that developers
    are comfortable with. With the comfort of the known application, the unknown is
    kept to a minimum and the focus can be on TDD.
  prefs: []
  type: TYPE_NORMAL
- en: If you are beginning a new project it may be beneficial to take ownership of
    part of the application in order to develop this part using TDD. If at least part
    of the application is developed with TDD, then this can be used to demonstrate
    the basics to others on the team. Using this piece of the application as an example,
    you may convince others to explore spreading TDD into the rest of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to track progress along the way. You may find that individuals or parts
    of applications are better suited for TDD. If anyone is struggling, it may be
    difficult for them to admit their troubles. Keep an eye out and lend a hand where
    you can.
  prefs: []
  type: TYPE_NORMAL
- en: Review the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When introducing TDD to a team, be prepared to address any potential issues
    often associated with developers new to TDD. Useless tests will be written that
    provide no value. Look for these and other issues within the test suite.
  prefs: []
  type: TYPE_NORMAL
- en: If your team does not currently utilize pull-requests or code reviews, now would
    be a perfect time to introduce the practice. Make a habit of reviewing tests that
    are written. This will go a long way to spotting any potential trouble spots.
    This also has the added benefit of learning more about parts of the system with
    which you may not be familiar.
  prefs: []
  type: TYPE_NORMAL
- en: If you're working on an existing project, or any new feature over which you
    have control, begin by developing this feature with TDD. If you have a code review
    process in place, be sure that the reviewers are made aware and demonstrate the
    passing tests to them.
  prefs: []
  type: TYPE_NORMAL
- en: Rejoining the world as a TDD expert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is now time to rejoin the world as a TDD expert. Don't worry if you don't
    quite feel like an expert yet. You likely have more knowledge than at least one
    co-worker or peer. To them, you are the expert with knowledge to share. Go forth
    and share that knowledge. But remember, there is always more to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Seek a mentor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It may be beneficial to seek out a mentor or mentors. There is likely someone
    in your community with TDD knowledge who is willing to speak with you. They could
    be employees of your company or members of the tech community in your city. Seek
    them out and offer to buy them lunch or meet for coffee. You may find that they’re
    thrilled to find someone else willing and eager to discuss TDD as a practice.
  prefs: []
  type: TYPE_NORMAL
- en: User groups and meetups are a great place to network. Look for meetings in your
    area that you could attend. TDD has become a hot topic in recent years and you're
    likely to find a meeting close by. The programming language may be different from
    your daily routine (for example, Java vs C#), but the overall premise will likely
    be beneficial. Besides, exposure to new and different languages helps you explore
    paradigms with which you might not be familiar.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter is another great resource these days. The amount of technology professionals
    active on Twitter and other social media these days is staggering. Never before
    has it been possible to strike up a conversation with the giants of our industry.
    Don't be afraid to ping technologists on Twitter and the like, and express interest
    in gaining knowledge. You may be surprised at the response you receive.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming a mentor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same vein as seeking a mentor, you may also consider becoming a mentor.
    The same venues apply to becoming a mentor. You'll learn more by teaching. Share
    your knowledge with others and learn just as much from those you teach.
  prefs: []
  type: TYPE_NORMAL
- en: User groups and meetups are always interested in having someone speak. Consider
    putting together a presentation and sharing your interest in TDD. This could be
    anything from a 5- to 15-minute lightning talk, an hour-long presentation, or
    a full-day workshop.
  prefs: []
  type: TYPE_NORMAL
- en: Practice, practice, practice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's a reason doctors and lawyers define what they do as *practice*. Like
    these professions, the computer programmer is engaged fully in the practice of
    software development. It is a practice that requires practice.
  prefs: []
  type: TYPE_NORMAL
- en: Develop a habit of spending the first 20 minutes of each day working on a different
    Code Kata. Solve a new puzzle using TDD. Work on a problem you've solved before
    using a new or different technique. Try a different approach at developing a solution.
    Spend time on your craft and train yourself to look for alternate solutions that
    are testable and verifiable.
  prefs: []
  type: TYPE_NORMAL
- en: Review your work. Ensure that you are truly driving your application development
    through tests. Verify that you are actually testing your application and not simply
    going through the motions.
  prefs: []
  type: TYPE_NORMAL
- en: Most of all, have fun!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our journey has come to an end, but fear not. You now are well equipped to enter
    the world as a TDD master.
  prefs: []
  type: TYPE_NORMAL
- en: You not only understand how to develop with a TDD mindset, you also know why
    TDD is so important to develop testable, extensible, and maintainable software
    applications. Your IDE is set up to test C# and/or JavaScript applications and
    you have a continuous feedback loop on the quality of your software.
  prefs: []
  type: TYPE_NORMAL
- en: You understand the importance of defining and testing the boundaries of an application
    and the benefits of abstracting away third-party code (including the .NET Framework).
    Spies, mocks, and fakes, and how best to employ them are now well understood.
  prefs: []
  type: TYPE_NORMAL
- en: 'Approaching a green-field application with TDD is mind should now be almost
    trivial. Take the broader problem of the overall application and break it into
    meaningful chunks that can be developed independently. You have learned different
    approaches to developing an application such as: front to back, back to front,
    and inside out. Choose what is most appropriate.'
  prefs: []
  type: TYPE_NORMAL
- en: Taking requirements and assembled user stories and turning them into working
    software using TDD should be a breeze! Utilize all the skills you’ve assembled
    to test the boundaries, testing small, individual units.
  prefs: []
  type: TYPE_NORMAL
- en: Abstract away third-party libraries, including the .NET Framework. Remove dependencies
    on things such as `DateTime` and Entity Framework. You've learned ways to decouple
    your application from specific implementations to allow your application to be
    testable, but also much more flexible and easy to modify in the future.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when the requirements change? What happens if a bug is discovered?
    No problem, change a test or write a new one to cover the new requirement or to
    defend against the discovered bug. Then, write some new code or change some existing
    code to make all of our new/modified tests pass. If you do everything correctly
    you should feel safe to make these changes as our existing test suite will prevent
    you from introducing new bugs.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of applications out there without sufficient (any?) test coverage.
    Even fewer were written test-first. You're now aware of some of the major problems
    with legacy applications that weren't written with testability in mind and know
    how to best to rectify this.
  prefs: []
  type: TYPE_NORMAL
- en: You know how to safely modify a legacy application that wasn't written with
    testing in mind, and know how to add tests to minimize the potential for introducing
    new bugs when modifying existing code.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, TDD is a personal choice. You don't need anyone's permission to do
    good work. Now, rejoin the world as a TDD expert!
  prefs: []
  type: TYPE_NORMAL
