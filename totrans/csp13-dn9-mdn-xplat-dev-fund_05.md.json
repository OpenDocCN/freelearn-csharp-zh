["```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        **<TargetFramework>net9****.0****</TargetFramework>**\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n      </PropertyGroup>\n    </Project> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n     **<!--.NET Standard** **2.0****class****library****can****be****used****by****:**\n     **.****NET****Framework****,** **Xamarin****,** **modern** **.****NET****. -->**\n     **<****TargetFramework****>****netstandard2.0****</****TargetFramework****>**\n     **<!--****Compile****this****library****using****C****# 13** **so****we****can****use****most**\n    **modern****compiler****features****. -->**\n     **<****LangVersion****>13</****LangVersion****>**\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n     **<****ItemGroup****>**\n     **<****Using****Include****=\"****System.Console****\"** **Static****=\"****true****\" />**\n     **</****ItemGroup****>**\n    </Project> \n    ```", "```cs\nnamespace Packt.Shared\n{\n  public class Person\n  {\n  }\n} \n```", "```cs\n// All types in this file will be defined in this file-scoped namespace.\nnamespace Packt.Shared;\npublic class Person\n{\n} \n```", "```cs\n    // All types in this file will be defined in this file-scoped namespace.\n    namespace Packt.Shared;\n    public class Person\n    {\n    } \n    ```", "```cs\n        <ItemGroup>\n        <Using Include=\"System.Console\" Static=\"true\" />\n        </ItemGroup> \n        ```", "```cs\n        <Project Sdk=\"Microsoft.NET.Sdk\">\n          <PropertyGroup>\n            <OutputType>Exe</OutputType>\n            <TargetFramework>net9.0</TargetFramework>\n            <Nullable>enable</Nullable>\n            <ImplicitUsings>enable</ImplicitUsings>\n          </PropertyGroup>\n        **<****ItemGroup****>**\n        **<****ProjectReference****Include****=**\n        **\"../PacktLibraryNet2/PacktLibraryNet2.csproj\"** **/>**\n        **</****ItemGroup****>**\n        **<****ItemGroup****>**\n        **<****Using****Include****=****\"System.Console\"****Static****=****\"true\"** **/>**\n        **</****ItemGroup****>**\n        </Project> \n        ```", "```cs\n        dotnet build \n        ```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    partial class Program\n    {\n      private static void ConfigureConsole(\n        string culture = \"en-US\",\n        bool useComputerCulture = false,\n        bool showCulture = true)\n      {\n        OutputEncoding = System.Text.Encoding.UTF8;\n        if (!useComputerCulture)\n        {\n          CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(culture);\n        }\n        if (showCulture)\n        {\n          WriteLine($\"Current culture: {CultureInfo.CurrentCulture.DisplayName}.\");\n        }\n      }\n    } \n    ```", "```cs\n    using Packt.Shared; // To use Person.\n    ConfigureConsole(); // Sets current culture to US English.\n    // Alternatives:\n    // ConfigureConsole(useComputerCulture: true); // Use your culture.\n    // ConfigureConsole(culture: \"fr-FR\"); // Use French culture. \n    ```", "```cs\n// Person bob = new Person(); // C# 1 or later.\n// var bob = new Person(); // C# 3 or later.\nPerson bob = new(); // C# 9 or later.\nWriteLine(bob); // Implicit call to ToString().\n// WriteLine(bob.ToString()); // Does the same thing. \n```", "```cs\n    Current culture: English (United States).\n    Packt.Shared.Person \n    ```", "```cs\npublic class Person : System.Object \n```", "```cs\n    public class Person : object \n    ```", "```cs\n// In the file, France.Paris.cs\nnamespace France\n{\n  public class Paris\n  {\n  }\n}\n// In the file, Texas.Paris.cs\nnamespace Texas\n{\n  public class Paris\n  {\n  }\n}\n// In the file, Program.cs\nusing France;\nusing Texas;\nParis p = new(); \n```", "```cs\nError CS0104: 'Paris' is an ambiguous reference between 'France.Paris' and 'Texas.Paris' \n```", "```cs\nusing France; // To use Paris.\nusing Tx = Texas; // Tx becomes alias for the namespace, and it is not imported.\nParis p1 = new(); // Creates an instance of France.Paris.\nTx.Paris p2 = new(); // Creates an instance of Texas.Paris. \n```", "```cs\nusing Env = System.Environment;\nWriteLine(Env.OSVersion);\nWriteLine(Env.MachineName);\nWriteLine(Env.CurrentDirectory); \n```", "```cs\n    public class Person : object\n    {\n    **#****region** **Fields: Data or state for this person.**\n    **public****string****? Name;** **// ? means it can be null.**\n    **public** **DateTimeOffset Born;**\n    **#****endregion**\n    } \n    ```", "```cs\n    bob.Name = \"Bob Smith\";\n    bob.Born = new DateTimeOffset(\n      year: 1965, month: 12, day: 22,\n      hour: 16, minute: 28, second: 0,\n      offset: TimeSpan.FromHours(-5)); // US Eastern Standard Time.\n    WriteLine(format: \"{0} was born on {1:D}.\", // Long date.\n      arg0: bob.Name, arg1: bob.Born); \n    ```", "```cs\n    Bob Smith was born on Wednesday, December 22, 1965. \n    ```", "```cs\n    Person alice = new()\n    {\n      Name = \"Alice Jones\",\n      Born = new(1998, 3, 7, 16, 28, 0,\n        // This is an optional offset from UTC time zone.\n        TimeSpan.Zero)\n    };\n    WriteLine(format: \"{0} was born on {1:d}.\", // Short date.\n      arg0: alice.Name, arg1: alice.Born); \n    ```", "```cs\n    Alice Jones was born on 3/7/1998. \n    ```", "```cs\n    namespace Packt.Shared;\n    public enum WondersOfTheAncientWorld\n    {\n      GreatPyramidOfGiza,\n      HangingGardensOfBabylon,\n      StatueOfZeusAtOlympia,\n      TempleOfArtemisAtEphesus,\n      MausoleumAtHalicarnassus,\n      ColossusOfRhodes,\n      LighthouseOfAlexandria\n    } \n    ```", "```cs\n    public WondersOfTheAncientWorld FavoriteAncientWonder; \n    ```", "```cs\n    bob.FavoriteAncientWonder = WondersOfTheAncientWorld.StatueOfZeusAtOlympia;\n    WriteLine(\n      format: \"{0}'s favorite wonder is {1}. Its integer is {2}.\",\n      arg0: bob.Name,\n      arg1: bob.FavoriteAncientWonder,\n      arg2: (int)bob.FavoriteAncientWonder); \n    ```", "```cs\n    Bob Smith's favorite wonder is StatueOfZeusAtOlympia. Its integer is 2. \n    ```", "```cs\n    namespace Packt.Shared;\n    **[****Flags****]**\n    public enum WondersOfTheAncientWorld **:** **byte**\n    {\n      None                     **=** **0b****_0000_0000,** **// i.e. 0**\n      GreatPyramidOfGiza       **=** **0b****_0000_0001,** **// i.e. 1**\n      HangingGardensOfBabylon  **=** **0b****_0000_0010,** **// i.e. 2**\n      StatueOfZeusAtOlympia    **=** **0b****_0000_0100,** **// i.e. 4**\n      TempleOfArtemisAtEphesus **=** **0b****_0000_1000,** **// i.e. 8**\n      MausoleumAtHalicarnassus **=** **0b****_0001_0000,** **// i.e. 16**\n      ColossusOfRhodes         **=** **0b****_0010_0000,** **// i.e. 32**\n      LighthouseOfAlexandria   **=** **0b****_0100_0000** **// i.e. 64**\n    } \n    ```", "```cs\n    public WondersOfTheAncientWorld BucketList; \n    ```", "```cs\n    bob.BucketList =\n      WondersOfTheAncientWorld.HangingGardensOfBabylon\n      | WondersOfTheAncientWorld.MausoleumAtHalicarnassus;\n    // bob.BucketList = (WondersOfTheAncientWorld)18;\n    WriteLine($\"{bob.Name}'s bucket list is {bob.BucketList}.\"); \n    ```", "```cs\n    Bob Smith's bucket list is HangingGardensOfBabylon, MausoleumAtHalicarnassus. \n    ```", "```cs\n    public List<Person> Children = new(); \n    ```", "```cs\n    // Works with all versions of C#.\n    Person alfred = new Person();\n    alfred.Name = \"Alfred\";\n    bob.Children.Add(alfred);\n    // Works with C# 3 and later.\n    bob.Children.Add(new Person { Name = \"Bella\" });\n    // Works with C# 9 and later.\n    bob.Children.Add(new() { Name = \"Zoe\" });\n    WriteLine($\"{bob.Name} has {bob.Children.Count} children:\");\n    for (int childIndex = 0; childIndex < bob.Children.Count; childIndex++)\n    {\n      WriteLine($\"> {bob.Children[childIndex].Name}\");\n    } \n    ```", "```cs\n    Bob Smith has 3 children:\n    > Alfred\n    > Bella\n    > Zoe \n    ```", "```cs\n    namespace Packt.Shared;\n    public class BankAccount\n    {\n      public string? AccountName; // Instance member. It could be null.\n      public decimal Balance; // Instance member. Defaults to zero.\n      public static decimal InterestRate; // Shared member. Defaults to zero.\n    } \n    ```", "```cs\n    BankAccount.InterestRate = 0.012M; // Store a shared value in static field.\n    BankAccount jonesAccount = new();\n    jonesAccount.AccountName = \"Mrs. Jones\";\n    jonesAccount.Balance = 2400;\n    WriteLine(format: \"{0} earned {1:C} interest.\",\n      arg0: jonesAccount.AccountName,\n      arg1: jonesAccount.Balance * BankAccount.InterestRate);\n    BankAccount gerrierAccount = new();\n    gerrierAccount.AccountName = \"Ms. Gerrier\";\n    gerrierAccount.Balance = 98;\n    WriteLine(format: \"{0} earned {1:C} interest.\",\n      arg0: gerrierAccount.AccountName,\n      arg1: gerrierAccount.Balance * BankAccount.InterestRate); \n    ```", "```cs\n    Mrs. Jones earned $28.80 interest.\n    Ms. Gerrier earned $1.18 interest. \n    ```", "```cs\n    // Constant fields: Values that are fixed at compilation.\n    public const string Species = \"Homo Sapiens\"; \n    ```", "```cs\n    // Constant fields are accessible via the type.\n    WriteLine($\"{bob.Name} is a {Person.Species}.\"); \n    ```", "```cs\n    Bob Smith is a Homo Sapiens. \n    ```", "```cs\n    // Read-only fields: Values that can be set at runtime.\n    public readonly string HomePlanet = \"Earth\"; \n    ```", "```cs\n    // Read-only fields are accessible via the variable.\n    WriteLine($\"{bob.Name} was born on {bob.HomePlanet}.\"); \n    ```", "```cs\n    Bob Smith was born on Earth. \n    ```", "```cs\n    namespace Packt.Shared;\n    public class Book\n    {\n      // Needs .NET 7 or later as well as C# 11 or later.\n      public required string? Isbn;\n      public required string? Title;\n      // Works with any version of .NET.\n      public string? Author;\n      public int PageCount;\n    } \n    ```", "```cs\n        <ItemGroup>\n          <ProjectReference Include=\n        \"..\\PacktLibraryNet2\\PacktLibraryNet2.csproj\" />\n         **<ProjectReference Include=**\n        **\"..\\PacktLibraryModern\\PacktLibraryModern.csproj\"** **/>**\n        </ItemGroup> \n        ```", "```cs\n    Book book = new(); \n    ```", "```cs\n    C:\\cs13net9\\Chapter05\\PeopleApp\\Program.cs(137,13): error CS9035: Required member 'Book.Isbn' must be set in the object initializer or attribute constructor. [C:\\cs13net9\\Chapter05\\PeopleApp\\PeopleApp.csproj]\n    C:\\cs13net9\\Chapter05\\PeopleApp\\Program.cs(137,13): error CS9035: Required member 'Book.Title' must be set in the object initializer or attribute constructor. [C:\\cs13net9\\Chapter05\\PeopleApp\\PeopleApp.csproj]\n        0 Warning(s)\n        2 Error(s) \n    ```", "```cs\n    Book book = new()\n    **{**\n     **Isbn =** **\"978-1803237800\"****,**\n     **Title =** **\"C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals\"**\n    **}**; \n    ```", "```cs\n    WriteLine(\"{0}: {1} written by {2} has {3:N0} pages.\",\n      book.Isbn, book.Title, book.Author, book.PageCount); \n    ```", "```cs\n    // Read-only fields: Values that can be set at runtime.\n    public readonly string HomePlanet = \"Earth\";\n    **public****readonly** **DateTime Instantiated;**\n    #endregion\n    **#****region** **Constructors: Called when using new to instantiate a type.**\n    **public****Person****()**\n    **{**\n    **// Constructors can set default values for fields**\n    **// including any read-only fields like Instantiated.**\n     **Name =** **\"Unknown\"****;**\n     **Instantiated = DateTime.Now;**\n    **}**\n    **#****endregion** \n    ```", "```cs\n    Person blankPerson = new();\n    WriteLine(format:\n      \"{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.\",\n      arg0: blankPerson.Name,\n      arg1: blankPerson.HomePlanet,\n      arg2: blankPerson.Instantiated); \n    ```", "```cs\n    978-1803237800: C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals written by  has 0 pages.\n    Unknown of Earth was created at 11:58:12 on a Sunday \n    ```", "```cs\n    public Person(string initialName, string homePlanet)\n    {\n      Name = initialName;\n      HomePlanet = homePlanet;\n      Instantiated = DateTime.Now;\n    } \n    ```", "```cs\n    Person gunny = new(initialName: \"Gunny\", homePlanet: \"Mars\");\n    WriteLine(format:\n      \"{0} of {1} was created at {2:hh:mm:ss} on a {2:dddd}.\",\n      arg0: gunny.Name,\n      arg1: gunny.HomePlanet,\n      arg2: gunny.Instantiated); \n    ```", "```cs\n    Gunny of Mars was created at 11:59:25 on a Sunday \n    ```", "```cs\n    public class Book\n    {\n    **// Constructor for use with object initializer syntax.**\n    **public****Book****()** **{ }**\n    **// Constructor with parameters to set required fields.**\n    **public****Book****(****string****? isbn,** **string****? title****)**\n     **{**\n     **Isbn = isbn;**\n     **Title = title;**\n     **}** \n    ```", "```cs\n    **/***\n    **// Instantiate a book using object initializer syntax.**\n    Book book = new()\n    {\n      Isbn = \"978-1803237800\",\n      Title = \"C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals\"\n    };\n    ***/**\n    **Book book =** **new****(isbn:** **\"978-1803237800\"****, title:**\n    **\"C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals\"****)**\n    **{**\n     **Author =** **\"Mark J. Price\"****,**\n     **PageCount =** **821**\n    **};** \n    ```", "```cs\n    **using** **System.Diagnostics.CodeAnalysis;** **// To use [SetsRequiredMembers].**\n    namespace Packt.Shared;\n    public class Book\n    {\n      public Book() { } // For use with initialization syntax.\n     **[****SetsRequiredMembers****]**\n      public Book(string isbn, string title) \n    ```", "```cs\n    978-1803237800: C# 12 and .NET 8 - Modern Cross-Platform Development Fundamentals written by Mark J. Price has 821 pages. \n    ```", "```cs\n    #region Methods: Actions the type can perform.\n    public void WriteToConsole()\n    {\n      WriteLine($\"{Name} was born on a {Born:dddd}.\");\n    }\n    public string GetOrigin()\n    {\n      return $\"{Name} was born on {HomePlanet}.\";\n    }\n    #endregion \n    ```", "```cs\n    bob.WriteToConsole();\n    WriteLine(bob.GetOrigin()); \n    ```", "```cs\n    Bob Smith was born on a Wednesday.\n    Bob Smith was born on Earth. \n    ```", "```cs\n    public string SayHello()\n    {\n      return $\"{Name} says 'Hello!'\";\n    }\n    public string SayHelloTo(string name)\n    {\n      return $\"{Name} says 'Hello, {name}!'\";\n    } \n    ```", "```cs\n    WriteLine(bob.SayHello());\n    WriteLine(bob.SayHelloTo(\"Emily\")); \n    ```", "```cs\n    Bob Smith says 'Hello!'\n    Bob Smith says 'Hello, Emily!' \n    ```", "```cs\n    public string OptionalParameters(string command = \"Run!\",\n      double number = 0.0, bool active = true)\n    {\n      return string.Format(\n        format: \"command is {0}, number is {1}, active is {2}\",\n        arg0: command,\n        arg1: number,\n        arg2: active);\n    } \n    ```", "```cs\n    WriteLine(bob.OptionalParameters()); \n    ```", "```cs\n    command is Run!, number is 0, active is True \n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\"Jump!\", 98.5)); \n    ```", "```cs\n    command is Jump!, number is 98.5, active is True \n    ```", "```cs\n    WriteLine(bob.OptionalParameters(number: 52.7, command: \"Hide!\")); \n    ```", "```cs\n    command is Hide!, number is 52.7, active is True \n    ```", "```cs\n    WriteLine(bob.OptionalParameters(\"Poke!\", active: false)); \n    ```", "```cs\n    command is Poke!, number is 0, active is False \n    ```", "```cs\n    public string OptionalParameters(string command = \"Run!\",\n      double number = 0.0, bool active = true**,** **int** **count**) \n    ```", "```cs\n    Error CS1737 Optional parameters must appear after all required parameters. \n    ```", "```cs\n    public string OptionalParameters(**int** **count,**\n      string command = \"Run!\",\n      double number = 0.0, bool active = true) \n    ```", "```cs\n    WriteLine(bob.OptionalParameters(3));\n    WriteLine(bob.OptionalParameters(3, \"Jump!\", 98.5));\n    WriteLine(bob.OptionalParameters(3, number: 52.7, command: \"Hide!\"));\n    WriteLine(bob.OptionalParameters(3, \"Poke!\", active: false)); \n    ```", "```cs\n    public void PassingParameters(int w, in int x, ref int y, out int z)\n    {\n      // out parameters cannot have a default and they\n      // must be initialized inside the method.\n      z = 100;\n      // Increment each parameter except the read-only x.\n      w++;\n      // x++; // Gives a compiler error!\n      y++;\n      z++;\n      WriteLine($\"In the method: w={w}, x={x}, y={y}, z={z}\");\n    } \n    ```", "```cs\n    int a = 10;\n    int b = 20;\n    int c = 30;\n    int d = 40;\n    WriteLine($\"Before: a={a}, b={b}, c={c}, d={d}\");\n    bob.PassingParameters(a, b, ref c, out d);\n    WriteLine($\"After: a={a}, b={b}, c={c}, d={d}\"); \n    ```", "```cs\n    Before: a=10, b=20, c=30, d=40\n    In the method: w=11, x=20, y=31, z=101\n    After: a=10, b=20, c=31, d=101 \n    ```", "```cs\n    int e = 50;\n    int f = 60;\n    int g = 70;\n    WriteLine($\"Before: e={e}, f={f}, g={g}, h doesn't exist yet!\");\n    // Simplified C# 7 or later syntax for the out parameter.\n    bob.PassingParameters(e, f, ref g, out int h);\n    WriteLine($\"After: e={e}, f={f}, g={g}, h={h}\"); \n    ```", "```cs\n    Before: e=50, f=60, g=70, h doesn't exist yet!\n    In the method: w=51, x=60, y=71, z=101\n    After: e=50, f=60, g=71, h=101 \n    ```", "```cs\n    public void ParamsParameters(\n      string text, params int[] numbers)\n    {\n      int total = 0;\n      foreach(int number in numbers)\n      {\n        total += number;\n      }\n      WriteLine($\"{text}: {total}\");\n    } \n    ```", "```cs\n    bob.ParamsParameters(\"Sum using commas\",\n      3, 6, 1, 2);\n    bob.ParamsParameters(\"Sum using collection expression\",\n      [3, 6, 1, 2]);\n    bob.ParamsParameters(\"Sum using explicit array\",\n      new int[] { 3, 6, 1, 2 });\n    bob.ParamsParameters(\"Sum (empty)\"); \n    ```", "```cs\n    Sum using commas: 12\n    Sum using collection expression: 12\n    Sum using explicit array: 12\n    Sum (empty): 0 \n    ```", "```cs\npublic class TextAndNumber\n{\n  public string Text;\n  public int Number;\n}\npublic class LifeTheUniverseAndEverything\n{\n  public TextAndNumber GetTheData()\n  {\n    return new TextAndNumber\n    {\n      Text = \"What's the meaning of life?\",\n      Number = 42\n    };\n  }\n} \n```", "```cs\n    // Method that returns a tuple: (string, int).\n    public (string, int) GetFruit()\n    {\n      return (\"Apples\", 5);\n    } \n    ```", "```cs\n    (string, int) fruit = bob.GetFruit();\n    WriteLine($\"{fruit.Item1}, {fruit.Item2} there are.\"); \n    ```", "```cs\n    Apples, 5 there are. \n    ```", "```cs\n    // Method that returns a tuple with named fields.\n    public (string Name, int Number) GetNamedFruit()\n    {\n      return (Name: \"Apples\", Number: 5);\n    } \n    ```", "```cs\n    var fruitNamed = bob.GetNamedFruit();\n    WriteLine($\"There are {fruitNamed.Number} {fruitNamed.Name}.\"); \n    ```", "```cs\n`(string Name, int Number) fruitNamed = bob.GetNamedFruit();` \n```", "```cs\n    There are 5 Apples. \n    ```", "```cs\n    var thing1 = (\"Neville\", 4);\n    WriteLine($\"{thing1.Item1} has {thing1.Item2} children.\");\n    var thing2 = (bob.Name, bob.Children.Count);\n    WriteLine($\"{thing2.Name} has {thing2.Count} children.\"); \n    ```", "```cs\nusing UnnamedParameters = (string, int); // Aliasing a tuple type.\n// Aliasing a tuple type with parameter names.\nusing Fruit = (string Name, int Number); \n```", "```cs\n    using Fruit = (string Name, int Number); // Aliasing a tuple type. \n    ```", "```cs\n    // Without an aliased tuple type.\n    //var fruitNamed = bob.GetNamedFruit();\n    // With an aliased tuple type.\n    Fruit fruitNamed = bob.GetNamedFruit(); \n    ```", "```cs\n// Store return value in a tuple variable with two named fields.\n(string name, int number) namedFields = bob.GetNamedFruit();\n// You can then access the named fields.\nWriteLine($\"{namedFields.name}, {namedFields.number}\");\n// Deconstruct the return value into two separate variables.\n(string name, int number) = bob.GetNamedFruit();\n// You can then access the separate variables.\nWriteLine($\"{name}, {number}\"); \n```", "```cs\n    (string fruitName, int fruitNumber) = bob.GetFruit();\n    WriteLine($\"Deconstructed tuple: {fruitName}, {fruitNumber}\"); \n    ```", "```cs\n    Deconstructed tuple: Apples, 5 \n    ```", "```cs\n    // Deconstructors: Break down this object into parts.\n    public void Deconstruct(out string? name,\n      out DateTimeOffset dob)\n    {\n      name = Name;\n      dob = Born;\n    }\n    public void Deconstruct(out string? name,\n      out DateTimeOffset dob,\n      out WondersOfTheAncientWorld fav)\n    {\n      name = Name;\n      dob = Born;\n      fav = FavoriteAncientWonder;\n    } \n    ```", "```cs\n    var (name1, dob1) = bob; // Implicitly calls the Deconstruct method.\n    WriteLine($\"Deconstructed person: {name1}, {dob1}\");\n    var (name2, dob2, fav2) = bob;\n    WriteLine($\"Deconstructed person: {name2}, {dob2}, {fav2}\"); \n    ```", "```cs\n    Deconstructed person: Bob Smith, 12/22/1965 4:28:00 PM -05:00\n    Deconstructed person: Bob Smith, 12/22/1965 4:28:00 PM -05:00,\n    StatueOfZeusAtOlympia \n    ```", "```cs\n    // Method with a local function.\n    public static int Factorial(int number)\n    {\n      if (number < 0)\n      {\n        throw new ArgumentException(\n          $\"{nameof(number)} cannot be less than zero.\");\n      }\n      return localFactorial(number);\n      int localFactorial(int localNumber) // Local function.\n      {\n        if (localNumber == 0) return 1;\n        return localNumber * localFactorial(localNumber - 1);\n      }\n    } \n    ```", "```cs\n    // Change to -1 to make the exception handling code execute.\n    int number = 5;\n    try\n    {\n      WriteLine($\"{number}! is {Person.Factorial(number)}\");\n    }\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says: {ex.Message} number was {number}.\");\n    } \n    ```", "```cs\n    5! is 120 \n    ```", "```cs\n    System.ArgumentException says: number cannot be less than zero. number was -1. \n    ```", "```cs\n    public **partial** class Person \n    ```", "```cs\n    namespace Packt.Shared;\n    // This file simulates an auto-generated class.\n    public partial class Person\n    {\n    } \n    ```", "```cs\n// MyClass1.cs\npublic partial class MyClass\n{\n  // No method body in the declaration.\n  partial void OnSomethingHappened();\n  public void DoWork()\n  {\n    // Some work here.\n    // Call the partial method.\n    OnSomethingHappened();\n  }\n} \n```", "```cs\n// MyClass2.cs\npublic partial class MyClass\n{\n  partial void OnSomethingHappened()\n  {\n    Console.WriteLine(\"Something happened.\");\n  }\n} \n```", "```cs\n#region Properties: Methods to get and/or set data or state.\n// A readonly property defined using C# 1 to 5 syntax.\npublic string Origin\n{\n  get\n  {\n    return string.Format(\"{0} was born on {1}.\",\n      arg0: Name, arg1: HomePlanet);\n  }\n}\n// Two readonly properties defined using C# 6 or later\n// lambda expression body syntax.\npublic string Greeting => $\"{Name} says 'Hello!'\";\npublic int Age => DateTime.Today.Year - Born.Year;\n#endregion \n```", "```cs\n    Person sam = new()\n    {\n      Name = \"Sam\",\n      Born = new(1969, 6, 25, 0, 0, 0, TimeSpan.Zero)\n    };\n    WriteLine(sam.Origin);\n    WriteLine(sam.Greeting);\n    WriteLine(sam.Age); \n    ```", "```cs\n    Sam was born on Earth\n    Sam says 'Hello!'\n    54 \n    ```", "```cs\n    // A read-write property defined using C# 3 auto-syntax.\n    public string? FavoriteIceCream { get; set; } \n    ```", "```cs\n    // A private backing field to store the property value.\n    private string? _favoritePrimaryColor; \n    ```", "```cs\n    // A public property to read and write to the field.\n    public string? FavoritePrimaryColor\n    {\n      get\n      {\n        return _favoritePrimaryColor;\n      }\n      set\n      {\n        switch (value?.ToLower())\n        {\n          case \"red\":\n          case \"green\":\n          case \"blue\":\n            _favoritePrimaryColor = value;\n            break;\n          default:\n            throw new ArgumentException(\n              $\"{value} is not a primary color. \" +\n              \"Choose from: red, green, blue.\");\n        }\n      }\n    } \n    ```", "```cs\n    sam.FavoriteIceCream = \"Chocolate Fudge\";\n    WriteLine($\"Sam's favorite ice-cream flavor is {sam.FavoriteIceCream}.\");\n    string color = \"Red\";\n    try\n    {\n      sam.FavoritePrimaryColor = color;\n      WriteLine($\"Sam's favorite primary color is {sam.FavoritePrimaryColor}.\");\n    }\n    catch (Exception ex)\n    {\n      WriteLine(\"Tried to set {0} to '{1}': {2}\",\n        nameof(sam.FavoritePrimaryColor), color, ex.Message);\n    } \n    ```", "```cs\n    Sam's favorite ice-cream flavor is Chocolate Fudge.\n    Sam's favorite primary color is Red. \n    ```", "```cs\n    Tried to set FavoritePrimaryColor to 'Black': Black is not a primary color. Choose from: red, green, blue. \n    ```", "```cs\n    // This has been moved to PersonAutoGen.cs as a property.\n    // public WondersOfTheAncientWorld FavoriteAncientWonder; \n    ```", "```cs\n    private WondersOfTheAncientWorld _favoriteAncientWonder;\n    public WondersOfTheAncientWorld FavoriteAncientWonder\n    {\n      get { return _favoriteAncientWonder; }\n      set\n      {\n        string wonderName = value.ToString();\n        if (wonderName.Contains(','))\n        {\n          throw new ArgumentException(\n            message: \"Favorite ancient wonder can only have a single enum value.\",\n            paramName: nameof(FavoriteAncientWonder));\n        }\n        if (!Enum.IsDefined(typeof(WondersOfTheAncientWorld), value))\n        {\n          throw new ArgumentException(\n            $\"{value} is not a member of the WondersOfTheAncientWorld enum.\",\n            paramName: nameof(FavoriteAncientWonder));\n        }\n        _favoriteAncientWonder = value;\n      }\n    } \n    ```", "```cs\n    bob.FavoriteAncientWonder =\n      WondersOfTheAncientWorld.StatueOfZeusAtOlympia |\n      WondersOfTheAncientWorld.GreatPyramidOfGiza; \n    ```", "```cs\n    Unhandled exception. System.ArgumentException: Favorite ancient wonder can only have a single enum value. (Parameter 'FavoriteAncientWonder')\n       at Packt.Shared.Person.set_FavoriteAncientWonder(WondersOfTheAncientWorld value) in C:\\cs13net9\\Chapter05\\PacktLibraryNet2\\PersonAutoGen.cs:line 67\n       at Program.<Main>$(String[] args) in C:\\cs13net9\\Chapter05\\PeopleApp\\Program.cs:line 57 \n    ```", "```cs\n    bob.FavoriteAncientWonder = (WondersOfTheAncientWorld)128; \n    ```", "```cs\n    Unhandled exception. System.ArgumentException: 128 is not a member of the WondersOfTheAncientWorld enum. (Parameter 'FavoriteAncientWonder') \n    ```", "```cs\nstring alphabet = \"abcdefghijklmnopqrstuvwxyz\";\nchar letterF = alphabet[5]; // 0 is a, 1 is b, and so on. \n```", "```cs\n    #region Indexers: Properties that use array syntax to access them.\n    public Person this[int index]\n    {\n      get\n      {\n        return Children[index]; // Pass on to the List<T> indexer.\n      }\n      set\n      {\n        Children[index] = value;\n      }\n    }\n    #endregion \n    ```", "```cs\n    // A read-only string indexer.\n    public Person this[string name]\n    {\n      get\n      {\n        return Children.Find(p => p.Name == name);\n      }\n    } \n    ```", "```cs\n    sam.Children.Add(new() { Name = \"Charlie\",\n      Born = new(2010, 3, 18, 0, 0, 0, TimeSpan.Zero) });\n    sam.Children.Add(new() { Name = \"Ella\",\n      Born = new(2020, 12, 24, 0, 0, 0, TimeSpan.Zero) });\n    // Get using Children list.\n    WriteLine($\"Sam's first child is {sam.Children[0].Name}.\");\n    WriteLine($\"Sam's second child is {sam.Children[1].Name}.\");\n    // Get using the int indexer.\n    WriteLine($\"Sam's first child is {sam[0].Name}.\");\n    WriteLine($\"Sam's second child is {sam[1].Name}.\");\n    // Get using the string indexer.\n    WriteLine($\"Sam's child named Ella is {sam[\"Ella\"].Age} years old.\"); \n    ```", "```cs\n    Sam's first child is Charlie.\n    Sam's second child is Ella.\n    Sam's first child is Charlie.\n    Sam's second child is Ella.\n    Sam's child named Ella is 3 years old. \n    ```", "```cs\nCar car = new(\"Ford\");\nvar thing1 = car[0]; // What type is thing1? What is its value?\nDatabase db = new(\"Commerce\");\nvar thing2 = db[0]; // What type is thing2? What is its value?\nstring name = \"Mark\";\nvar thing3 = name[0]; // thing3 is a char. Its value is \"M\".\nList<int> numbers = new() { 27, 95, 13 };\nvar thing4 = numbers[0]; // thing4 is an int. Its value is 27. \n```", "```cs\n    // All the classes in this file will be defined in the following namespace.\n    namespace Packt.Shared;\n    public class Passenger\n    {\n      public string? Name { get; set; }\n    }\n    public class BusinessClassPassenger : Passenger\n    {\n      public override string ToString()\n      {\n        return $\"Business Class: {Name}\";\n      }\n    }\n    public class FirstClassPassenger : Passenger\n    {\n      public int AirMiles { get; set; }\n      public override string ToString()\n      {\n        return $\"First Class with {AirMiles:N0} air miles: {Name}\";\n      }\n    }\n    public class CoachClassPassenger : Passenger\n    {\n      public double CarryOnKG { get; set; }\n      public override string ToString()\n      {\n        return $\"Coach Class with {CarryOnKG:N2} KG carry on: {Name}\";\n      }\n    } \n    ```", "```cs\n    // An array containing a mix of passenger types.\n    Passenger[] passengers = {\n      new FirstClassPassenger { AirMiles = 1_419, Name = \"Suman\" },\n      new FirstClassPassenger { AirMiles = 16_562, Name = \"Lucy\" },\n      new BusinessClassPassenger { Name = \"Janice\" },\n      new CoachClassPassenger { CarryOnKG = 25.7, Name = \"Dave\" },\n      new CoachClassPassenger { CarryOnKG = 0, Name = \"Amit\" },\n    };\n    foreach (Passenger passenger in passengers)\n    {\n      decimal flightCost = passenger switch\n      {\n        FirstClassPassenger p when p.AirMiles > 35_000 => 1_500M,\n        FirstClassPassenger p when p.AirMiles > 15_000 => 1_750M,\n        FirstClassPassenger _                         => 2_000M,\n        BusinessClassPassenger _                      => 1_000M,\n        CoachClassPassenger p when p.CarryOnKG < 10.0 => 500M,\n        CoachClassPassenger _                         => 650M,\n        _                                             => 800M\n      };\n      WriteLine($\"Flight costs {flightCost:C} for {passenger}\");\n    } \n    ```", "```cs\n    Flight costs $2,000.00 for First Class with 1,419 air miles: Suman\n    Flight costs $1,750.00 for First Class with 16,562 air miles: Lucy\n    Flight costs $1,000.00 for Business Class: Janice\n    Flight costs $650.00 for Coach Class with 25.70 KG carry on: Dave\n    Flight costs $500.00 for Coach Class with 0.00 KG carry on: Amit \n    ```", "```cs\n    decimal flightCost = passenger switch\n    {\n      **/* C# 8 syntax**\n      FirstClassPassenger p when p.AirMiles > 35_000 => 1_500M,\n      FirstClassPassenger p when p.AirMiles > 15_000 => 1_750M,\n      FirstClassPassenger _                          => 2_000M, ***/**\n    **// C# 9 or later syntax**\n     **FirstClassPassenger p => p.AirMiles** **switch**\n     **{**\n     **>** **35****_000 =>** **1****_500M,**\n     **>** **15****_000 =>** **1****_750M,**\n     **_       =>** **2****_000M**\n     **},**\n      BusinessClassPassenger                        => 1_000M,\n      CoachClassPassenger p when p.CarryOnKG < 10.0 => 500M,\n      CoachClassPassenger                           => 650M,\n      _                                             => 800M\n    }; \n    ```", "```cs\nFirstClassPassenger { AirMiles: > 35000 } => 1500M,\nFirstClassPassenger { AirMiles: > 15000 } => 1750M,\nFirstClassPassenger                       => 2000M, \n```", "```cs\n    namespace Packt.Shared;\n    public class ImmutablePerson\n    {\n      public string? FirstName { get; init; }\n      public string? LastName { get; init; }\n    } \n    ```", "```cs\n    ImmutablePerson jeff = new()\n    {\n      FirstName = \"Jeff\",\n      LastName = \"Winger\"\n    };\n    jeff.FirstName = \"Geoff\"; \n    ```", "```cs\n    C:\\cs13net9\\Chapter05\\PeopleApp\\Program.cs(404,1): error CS8852: Init-only property or indexer 'ImmutablePerson.FirstName' can only be assigned in an object initializer, or on 'this' or 'base' in an instance constructor or an 'init' accessor. [/Users/markjprice/Code/Chapter05/PeopleApp/PeopleApp.csproj] \n    ```", "```cs\n    public record ImmutableVehicle\n    {\n      public int Wheels { get; init; }\n      public string? Color { get; init; }\n      public string? Brand { get; init; }\n    } \n    ```", "```cs\n    ImmutableVehicle car = new()\n    {\n      Brand = \"Mazda MX-5 RF\",\n      Color = \"Soul Red Crystal Metallic\",\n      Wheels = 4\n    };\n    ImmutableVehicle repaintedCar = car\n      with { Color = \"Polymetal Grey Metallic\" };\n    WriteLine($\"Original car color was {car.Color}.\");\n    WriteLine($\"New car color is {repaintedCar.Color}.\"); \n    ```", "```cs\n    Original car color was Soul Red Crystal Metallic.\n    New car color is Polymetal Grey Metallic. \n    ```", "```cs\n    namespace Packt.Shared;\n    public class AnimalClass\n    {\n      public string? Name { get; set; }\n    }\n    public record AnimalRecord\n    {\n      public string? Name { get; set; }\n    } \n    ```", "```cs\n    AnimalClass ac1 = new() { Name = \"Rex\" };\n    AnimalClass ac2 = new() { Name = \"Rex\" };\n    WriteLine($\"ac1 == ac2: {ac1 == ac2}\");\n    AnimalRecord ar1 = new() { Name = \"Rex\" };\n    AnimalRecord ar2 = new() { Name = \"Rex\" };\n    WriteLine($\"ar1 == ar2: {ar1 == ar2}\"); \n    ```", "```cs\n    ac1 == ac2: False\n    ar1 == ar2: True \n    ```", "```cs\n    int number1 = 3;\n    int number2 = 3;\n    WriteLine($\"number1: {number1}, number2: {number2}\");\n    WriteLine($\"number1 == number2: {number1 == number2}\"); \n    ```", "```cs\n    number1: 3, number2: 3\n    number1 == number2: True \n    ```", "```cs\n    Person p1 = new() { Name = \"Kevin\" };\n    Person p2 = new() { Name = \"Kevin\" };\n    WriteLine($\"p1: {p1}, p2: {p2}\");\n    WriteLine($\"p1.Name: {p1.Name}, p2.Name: {p2.Name}\");\n    WriteLine($\"p1 == p2: {p1 == p2}\"); \n    ```", "```cs\n    p1: Packt.Shared.Person, p2: Packt.Shared.Person\n    p1.Name: Kevin, p2.Name: Kevin\n    p1 == p2: False \n    ```", "```cs\n    Person p3 = p1;\n    WriteLine($\"p3: {p3}\");\n    WriteLine($\"p3.Name: {p3.Name}\");\n    WriteLine($\"p1 == p3: {p1 == p3}\"); \n    ```", "```cs\n    p3: Packt.Shared.Person\n    p3.Name: Kevin\n    p1 == p3: True \n    ```", "```cs\n    // string is the only class reference type implemented to\n    // act like a value type for equality.\n    WriteLine($\"p1.Name: {p1.Name}, p2.Name: {p2.Name}\");\n    WriteLine($\"p1.Name == p2.Name: {p1.Name == p2.Name}\"); \n    ```", "```cs\n    p1.Name: Kevin, p2.Name: Kevin\n    p1.Name == p2.Name: True \n    ```", "```cs\npublic record ImmutableAnimal\n{\n  public string Name { get; init; }\n  public string Species { get; init; }\n  public ImmutableAnimal(string name, string species)\n  {\n    Name = name;\n    Species = species;\n  }\n  public void Deconstruct(out string name, out string species)\n  {\n    name = Name;\n    species = Species;\n  }\n} \n```", "```cs\n    // Simpler syntax to define a record that auto-generates the\n    // properties, constructor, and deconstructor.\n    public record ImmutableAnimal(string Name, string Species); \n    ```", "```cs\n    ImmutableAnimal oscar = new(\"Oscar\", \"Labrador\");\n    var (who, what) = oscar; // Calls the Deconstruct method.\n    WriteLine($\"{who} is a {what}.\"); \n    ```", "```cs\n    Oscar is a Labrador. \n    ```", "```cs\npublic class Headset // Class definition.\n{\n  // Constructor.\n  public Headset(string manufacturer, string productName)\n  {\n    // You can reference manufacturer and productName parameters in\n    // the constructor and the rest of the class.\n  }\n} \n```", "```cs\npublic class Headset(string manufacturer, string productName); \n```", "```cs\n    namespace Packt.Shared;\n    public class Headset(string manufacturer, string productName); \n    ```", "```cs\n    Headset vp = new(\"Apple\", \"Vision Pro\");\n    WriteLine($\"{vp.ProductName} is made by {vp.Manufacturer}.\"); \n    ```", "```cs\n    namespace Packt.Shared;\n    public class Headset(string manufacturer, string productName)\n    **{**\n    **public****string** **Manufacturer {** **get****;** **set****; } = manufacturer;**\n    **public****string** **ProductName {** **get****;** **set****; } = productName;**\n    **}** \n    ```", "```cs\n    Vision Pro is made by Apple. \n    ```", "```cs\n    namespace Packt.Shared;\n    public class Headset(string manufacturer, string productName)\n    {\n      public string Manufacturer { get; set; } = manufacturer;\n      public string ProductName { get; set; } = productName;\n    **// Default parameterless constructor calls the primary constructor.**\n    **public****Headset****() :** **this****(****\"Microsoft\"****,** **\"HoloLens\"****)** **{ }**\n    } \n    ```", "```cs\n    Headset holo = new();\n    WriteLine($\"{holo.ProductName} is made by {holo.Manufacturer}.\");\n    Headset mq = new() { Manufacturer = \"Meta\", ProductName = \"Quest 3\" };\n    WriteLine($\"{mq.ProductName} is made by {mq.Manufacturer}.\"); \n    ```", "```cs\n    Vision Pro is made by Apple.\n    HoloLens is made by Microsoft.\n    Quest 3 is made by Meta. \n    ```", "```cs\nclass Car\n{\n  int Wheels { get; set; }\n  public bool IsEV { get; set; }\n  internal void Start()\n  {\n    Console.WriteLine(\"Starting...\");\n  }\n} \n```", "```cs\nCar fiat = new() { Wheels = 4, IsEV = true };\nfiat.Start(); \n```", "```cs\n    public List<Person> Children = new();\n    public List<Person> Children => new(); \n    ```"]