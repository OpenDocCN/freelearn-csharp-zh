- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Serverless Nanoservices Using Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to Azure Functions, which can be configured
    to only require server-side resources while they execute. They execute when they
    are triggered by an activity like a message sent to a queue or a file uploaded
    to Azure Storage, or at a regularly scheduled interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Azure Functions project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to timer and resource triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing an Azure Functions project to the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up Azure Functions resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Azure Functions** is an event-driven serverless compute platform. You can
    build and debug locally and later deploy to Microsoft Azure cloud. Azure Functions
    can be implemented in many languages, not just C# and .NET. It has extensions
    for Visual Studio 2022 and Visual Studio Code and a command-line tool.'
  prefs: []
  type: TYPE_NORMAL
- en: But first, you might be wondering, “How is it possible to have a service without
    a server?”
  prefs: []
  type: TYPE_NORMAL
- en: '*Serverless* does not literally mean there is no server. What serverless means
    is a service without a *permanently running server*, and usually that means not
    running for most of the time or running with low resources and scaling up dynamically
    when needed. This can save a lot of costs.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, organizations often have business functions that only need to run
    once per hour, once per month, or on an ad hoc basis. Perhaps the organization
    prints checks (cheques in England) to pay its employees at the end of the month.
    Those checks might need the salary amounts converted to words to print on the
    check. A function to convert numbers to words could be implemented as a serverless
    service.
  prefs: []
  type: TYPE_NORMAL
- en: For another example, with a content management system, editors might upload
    new images, and those images might need to be processed in various ways, like
    generating thumbnails and other optimizations. This work can be added to a queue,
    or an Azure function can be triggered when the file is uploaded to Blob Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions can be much more than just a single function. They support complex,
    stateful, workflows and event-driven solutions using **Durable Functions**.
  prefs: []
  type: TYPE_NORMAL
- en: 'I do not cover Durable Functions in this book, so if you are interested, you
    can learn more about implementing them using C# and .NET at the following link:
    [https://learn.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=csharp](https://learn.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=csharp).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions has a programming model based on triggers and bindings that
    enable your serverless service to respond to events and connect to other services
    like data stores.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions triggers and bindings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Triggers** and **bindings** are key concepts for Azure Functions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Triggers are what cause a function to execute. Each function must have one,
    and only one, trigger. The most common triggers are shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP**: This trigger responds to an incoming HTTP request, typically a `GET`
    or `POST`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure SQL**: This trigger responds when a change is detected on a SQL table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cosmos DB**: This trigger uses the Cosmos DB Change Feed to listen for inserts
    and updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timer**: This trigger responds to a scheduled time occurring. It does not
    retry if a function fails. The function is not called again until the next time
    on the schedule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SignalR**: This trigger responds to messages sent from Azure SignalR Service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Queue** and **RabbitMQ**: These triggers respond to a message arriving in
    a queue ready for processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blob Storage**: This trigger responds to a new or updated **binary large
    object** (**Blob**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Grid** and **Event Hub**: These triggers respond when a predefined
    event occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bindings allow functions to have inputs and outputs. Each function can have
    zero, one, or more bindings. Some common bindings are shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure SQL**: Read or write to a table in a SQL Server database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blob Storage**: Read or write to any file stored as a BLOB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cosmos DB**: Read or write documents to a cloud-scale data store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SignalR**: Receive or make remote method calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP**: Make an HTTP request and receive the response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Queue** and **RabbitMQ**: Write a message to a queue or read a message from
    a queue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SendGrid**: Send an email message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Twilio**: Send an SMS message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IoT hub**: Write to an internet-connected device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see the full list of supported triggers and bindings at the following
    link: [https://learn.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp#supported-bindings](https://learn.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp#supported-bindings).'
  prefs: []
  type: TYPE_NORMAL
- en: Triggers and bindings are configured differently for different languages. For
    C# and Java, you decorate methods and parameters with attributes. For the other
    languages, you configure a file named `function.json`.
  prefs: []
  type: TYPE_NORMAL
- en: NCRONTAB expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Timer** trigger uses **NCRONTAB expressions** to define the frequency
    of the timer. The default time zone is **Coordinated Universal Time** (**UTC**).
    This can be overridden but you really should use UTC for the reasons you learned
    about in *Chapter 7*, *Handling Dates, Times, and Internationalization*.
  prefs: []
  type: TYPE_NORMAL
- en: If you are hosting in an App Service plan, then you can alternatively use a
    `TimeSpan`, but I recommend learning NCRONTAB expressions for flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'An NCRONTAB expression consists of five or six parts (if seconds are included):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A star `*` in the value field above means all legal values, as in parentheses
    for that column. You can specify ranges using a hyphen, and a step value using
    `/`. Here are some examples of how values can be specified in this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0` means at that value. For example, for hours, at midnight.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0,6,12,18` means at those listed values. For example, for hours, at midnight,
    6 a.m., 12 noon, and 6 p.m.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3-7` means at that inclusive range of values. For example, for hours, at 3
    a.m., 4 a.m., 5 a.m., 6 a.m., and 7 a.m.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4/3` means a start value of `4` and a step value of `3`. For example, for
    hours, at 4 a.m., 7 a.m., 10 a.m., 1 p.m., 4 p.m., 7 p.m., and 10 p.m.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Table 10.1* shows some more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Expression** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `0 5 * * * *` | Once every hour of the day at minute 5 of each hour. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 0,10,30,40 * * * *` | Four times an hour – at minutes 0, 10, 30, and 40
    during every hour. |'
  prefs: []
  type: TYPE_TB
- en: '| `* * */2 * * *` | Every 2 hours. |'
  prefs: []
  type: TYPE_TB
- en: '| `0,15 * * * * *` | At 0 and 15 seconds every minute. |'
  prefs: []
  type: TYPE_TB
- en: '| `0/15 * * * * *` | At 0, 15, 30, and 45 seconds every minute, aka every 15
    seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| `0-15 * * * * *` | At 0, 1, 2, 3, and so on up to 15 seconds past each minute,
    but not 16 to 59 seconds past each minute. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 30 9-16 * * *` | Eight times a day – at hours 9:30 A.M, 10:30 A.M, and
    so on up to 4:30 P.M. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 */5 * * * *` | 12 times an hour – at second 0 of every 5^(th) minute of
    every hour. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 0 */4 * * *` | 6 times a day – at minute 0 of every 4^(th) hour of every
    day. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 30 9 * * *` | 9:30 AM every day. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 30 9 * * 1-5` | 9:30 AM every workday. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 30 9 * * Mon-Fri` | 9:30 AM every workday. |'
  prefs: []
  type: TYPE_TB
- en: '| `0 30 9 * Jan Mon` | 9:30 AM every Monday in January. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 10.1: Examples of NCRONTAB expressions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s build a simple console app to test your understanding of NCRONTAB
    expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new console app named `NCrontab.Console` to
    a `Chapter10` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `NCrontab.Console` project, treat warnings as errors, globally and statically
    import the `System.Console` class, and add a package reference for `NCrontab.Signed`,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The NCRONTAB library is only for parsing expressions. It is not itself a scheduler.
    You can learn more about it in the GitHub repository at the following link: [https://github.com/atifaziz/NCrontab](https://github.com/atifaziz/NCrontab).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `NCrontab.Console` project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the existing statements. Add statements to define a
    date range for the year 2023, output a summary of NCRONTAB syntax, and construct
    an NCRONTAB schedule, and then use it to output the next 40 occurrences that would
    occur in 2023, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default potential time span for occurrences is the whole year of 2023.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The default expression is `0,30 * * * * *`, meaning at 0 and 30 seconds of every
    minute of every hour of every day of every weekday of every month.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The formatting for the syntax help assumes each component will be three characters
    wide because `-3` is used for output formatting. You could write a cleverer algorithm
    to dynamically adjust the arrows to point to variable width components, but I
    was lazy. I will leave that as an exercise for you.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Our expression includes seconds, so when parsing, we must set that as an additional
    option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After defining the schedule, the schedule calls its `GetNextOccurrences` method
    to return a sequence of all the calculated occurrences.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The loop only outputs the first 40 occurrences. That should be enough to understand
    how most expressions work.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Start the console app without debugging, and note the occurrences are every
    30 seconds, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that although the start time is `Sun, 01 Jan 2023 00:00:00`, that value
    is excluded from the occurrences because it is not a “next” occurrence.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the console app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, modify the components of the expression to test some of the
    examples in the table, or make up your own examples. Try the expression `0 0 */4
    * * *`, and note it should have the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that although the start time is `Sun, 01 Jan 2023 00:00:00`, that value
    is excluded from the occurrences because it is not a “next” occurrence. So, Sunday
    only has five occurrences. Monday onward has the expected six occurrences per
    day.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions versions and languages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure Functions version 4 of the runtime host is the only version still generally
    available. All older versions have reached end-of-life.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Microsoft recommends using v4 for functions in all languages.
    v1, v2, and v3 are in maintenance mode and should be avoided.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Languages and platforms supported by Azure Functions v4 include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**C#, F#**: .NET 8, .NET 7, .NET 6, and .NET Framework 4.8\. Note that .NET
    6 and .NET 7 (and in future, .NET 9) are only supported in the isolated worker
    model because they are **Standard-Term Support** (**STS**) releases, or, in the
    case of .NET 6, they are older LTS releases. .NET 8 is supported in both isolated
    and in-process worker models because it is a **Long-Term Support** (**LTS**) release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript**: Node 14, 16, and 18\. TypeScript is supported via transpiling
    (transforming/compiling) to JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java** 8, 11, and 17.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PowerShell** 7.2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python** 3.7, 3.8, 3.9, and 3.10.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More Information**: You can review the whole table of languages at the following
    link: [https://learn.microsoft.com/en-us/azure/azure-functions/functions-versions?tabs=v4&pivots=programming-language-csharp#languages](https://learn.microsoft.com/en-us/azure/azure-functions/functions-versions?tabs=v4&pivots=programming-language-csharp#languages).'
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will only look at implementing Azure Functions using C# and
    .NET 8 so that we can use the in-process and isolated worker models and get LTS.
  prefs: []
  type: TYPE_NORMAL
- en: 'For advanced uses, you can even register a custom handler that would enable
    you to use any language you like for the implementation of an Azure function.
    You can read more about Azure Functions custom handlers at the following link:
    [https://learn.microsoft.com/en-us/azure/azure-functions/functions-custom-handlers](https://learn.microsoft.com/en-us/azure/azure-functions/functions-custom-handlers).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions worker models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Functions have two worker models, in-process and isolated, as described
    in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**In-process**: Your function is implemented in a class library that must run
    in the same process as the host, which means your functions must run on the most
    recent LTS release of .NET. The latest LTS release is .NET 8\. The next LTS release
    will be .NET 10 in November 2025, but .NET 8 will be the last release that supports
    in-process hosting. After .NET 8, only the isolated worker model will be supported
    for all versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Isolated**: Your function is implemented in a console app that runs in its
    own process. Your function can therefore execute on any supported .NET version,
    have full control over its `Main` entry point, and have additional features like
    invocation middleware. From .NET 9 onward, this will be the only worker model.
    You can read more about this decision at the following link: [https://techcommunity.microsoft.com/t5/apps-on-azure-blog/net-on-azure-functions-august-2023-roadmap-update/ba-p/3910098](https://techcommunity.microsoft.com/t5/apps-on-azure-blog/net-on-azure-functions-august-2023-roadmap-update/ba-p/3910098).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice**: New projects should use the isolated worker model.'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions hosting plans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After testing locally, you must deploy your Azure Functions project to an Azure
    hosting plan. There are three Azure Functions plans to choose from, as described
    in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consumption**: In this plan, host instances are dynamically added and removed
    based on activity. This plan is the closest to *serverless*. It scales automatically
    during periods of high load. The cost is only for compute resources when your
    functions are running. You can configure a timeout for function execution times
    to ensure your functions do not run forever.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium**: This plan supports elastic scaling up and down, perpetually warm
    instances to avoid cold starts, unlimited execution duration, multicore instance
    sizes up to four cores, potentially more predictable costs, and high-density app
    allocation for multiple Azure Functions projects. The cost is based on the number
    of core seconds and memory allocated across instances. At least one instance must
    be allocated at all times, so there will always be a minimum monthly cost per
    active plan, even if it never executes that month.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dedicated**: Executes in the cloud equivalent of a server farm. Hosting is
    provided by an Azure App Service plan that controls the allocated server resources.
    Azure App Service plans include Basic, Standard, Premium, and Isolated. This plan
    can be an especially good choice if you already have an App Service plan used
    for other projects like ASP.NET Core MVC websites, gRPC, OData, and GraphQL services,
    and so on. The cost is only for the App Service plan. You can host as many Azure
    Functions and other web apps in it as you like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning!** Premium and Dedicated plans both run on Azure App Service plans.
    You must carefully select the correct App Service plan that works with your Azure
    Functions hosting plan. For example, for Premium, you should choose an Elastic
    Premium plan like `EP1`. If you choose an App Service plan like `P1V1`, then you
    are choosing a dedicated plan that will not elastically scale!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can read more about your choices at the following link: [https://learn.microsoft.com/en-us/azure/azure-functions/functions-scale](https://learn.microsoft.com/en-us/azure/azure-functions/functions-scale).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Storage requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Functions requires an Azure Storage account for storing information for
    some bindings and triggers. These Azure Storage services can also be used by your
    code for its implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Files**: Stores and runs your function app code in a Consumption or
    Premium plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Blob Storage**: Stores state for bindings and function keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Queue Storage**: Used for failure and retry handling by some triggers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Table Storage**: Task hubs in Durable Functions use Blob, Queue, and
    Table Storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing locally with Azurite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azurite is an open-source local environment for testing Azure Functions with
    its related Blob, Queue, and Table Storage. Azurite is cross-platform on Windows,
    Linux, and macOS. Azurite supersedes the older Azure Storage Emulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Azurite:'
  prefs: []
  type: TYPE_NORMAL
- en: For Visual Studio 2022, Azurite is included.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Visual Studio Code, search for and install the Azurite extension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For JetBrains Rider, install the Azure Toolkit for Rider plugin, which includes
    Azurite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For installation at the command prompt, you must have Node.js version 8 or
    later installed and then you can enter the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you have locally tested an Azure function, you can switch to an Azure Storage
    account in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about Azurite at the following link: [https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions authorization levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Functions has three authorization levels that control whether an API
    key is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Anonymous**: No API key is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: A function-level key is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Admin**: The master key is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API keys are available through the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions support for dependency injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dependency injection in Azure Functions is built on the standard .NET dependency
    injection features, but there are implementation differences depending on your
    chosen worker model.
  prefs: []
  type: TYPE_NORMAL
- en: To register dependency services, create a class that inherits from the `FunctionsStartup`
    class and override its `Configure` method. Add the `[FunctionsStartup]` assembly
    attribute to specify the class name registered for startup. Add services to the
    `IFunctionsHostBuilder` instance passed to the method. You will do this in a task
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the class that implements an Azure Functions function is `static`
    with a `static` method. A `static` class is not instantiated with a constructor.
    Dependency injection uses constructor injection so that means you must use instance
    classes for injected services and for your function class implementation. You
    will see how to do this in the coding task.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Azure Functions Core Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Azure Functions Core Tools** provides the core runtime and templates for
    creating functions, which enable local development on Windows, macOS, and Linux
    using any code editor.'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions Core Tools is included in the **Azure development** workload
    of Visual Studio 2022, so you might already have it installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install the latest version of **Azure Functions Core Tools** from the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/azure-functions-core-tools](https://www.npmjs.com/package/azure-functions-core-tools)'
  prefs: []
  type: TYPE_NORMAL
- en: The page found at the preceding link has instructions for installing using **Microsoft
    Software Installer** (**MSI**) and `winget` on Windows, Homebrew on Mac, `npm`
    on any operating system, and common Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using JetBrains Rider, then install Azure Functions Core Tools via
    Rider.
  prefs: []
  type: TYPE_NORMAL
- en: Building an Azure Functions project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can create an Azure Functions project. Although they can be created
    in the cloud using the Azure portal, developers will have a better experience
    creating and running them locally first. You can then deploy to the cloud once
    you have tested your function on your own computer.
  prefs: []
  type: TYPE_NORMAL
- en: Each code editor has a slightly different experience to get started with an
    Azure Functions project, so let’s have a look at each in turn, starting with Visual
    Studio 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Using Visual Studio 2022
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you prefer to use Visual Studio 2022, here are the steps to create an Azure
    Functions project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio 2022, create a new project, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Azure Functions**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter10`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.AzureFunctions.Service`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions worker**: **.NET 8.0 Isolated (Long Term Support)**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: **Http trigger**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Azurite for runtime storage account (AzureWebJobsStorage)**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable** **Docker**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization level**: **Anonymous**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the startup project for the solution to be the current selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you prefer to use Visual Studio Code, here are the steps to create an Azure
    Functions project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio Code, navigate to **Extensions** and search for Azure Functions
    (`ms-azuretools.vscode-azurefunctions`). It has dependencies on two other extensions:
    Azure Account (`ms-vscode.azure-account`) and Azure Resources (`ms-azuretools.vscode-azureresourcegroups`),
    so those will be installed too. Click the **Install** button to install the extension.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder named `Northwind.AzureFunctions.Service`. (If you previously
    created the same project using Visual Studio 2022, then create a new folder named
    `Chapter10-vscode` and create this new project folder in there instead.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, open the `Northwind.AzureFunctions.Service` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **View** | **Command Palette**, type `azure f`, and then in the
    list of **Azure Functions** commands, click **Azure Functions: Create New Project…**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Northwind.AzureFunctions.Service` folder to contain your function
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompts, select the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select a language: **C#**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select a .NET runtime: **.NET 8 Isolated LTS**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select a template for your project’s first function: **HTTP trigger**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provide a function name: `NumbersToWordsFunction`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provide a namespace: `Northwind.AzureFunctions.Service`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the authorization level: **Anonymous**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to **Terminal** | **New Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt, build the project, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the func CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you prefer to use the command line and some other code editor, here are
    the steps to create and start an Azure Functions project:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Chapter10-cli` folder with a subfolder named `Northwind.AzureFunctions.Service`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In command prompt or terminal, in the `Northwind.AzureFunctions.Service` folder,
    create a new Azure Functions project using C#, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In command prompt or terminal, in the `Northwind.AzureFunctions.Service` folder,
    create a new Azure Functions function using `HTTP trigger` that can be called
    anonymously, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optionally, you can start the function locally, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you cannot find `func` at the command prompt or terminal, then try installing
    the Azure Functions Core Tools using Chocolatey, as described at the following
    link: [https://community.chocolatey.org/packages/azure-functions-core-tools](https://community.chocolatey.org/packages/azure-functions-core-tools).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the Azure Functions project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we write a function, let’s review what makes an Azure Functions project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the project file, and note the Azure Functions version and the package
    references needed to implement an Azure function that responds to HTTP requests,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `host.json`, note that logging to Application Insights is enabled but excludes
    `Request` types, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Application Insights is Azure’s monitoring and logging service. We will not
    be using it in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `local.settings.json`, confirm that during local development, your project
    will use local development storage and an isolated worker model, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the `AzureWebJobsStorage` setting is blank or missing, which might happen
    if you are using Visual Studio Code, then add it, set it to `UseDevelopmentStorage=true`,
    and then save changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`FUNCTIONS_WORKER_RUNTIME` is the language being used by your project. `dotnet`
    means a .NET class library; `dotnet-isolated` means a .NET console app. Other
    values include `java`, `node`, `powershell`, and `python`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Properties` folder, in `launchSettings.json`, note the randomly assigned
    port number for the web service, as shown in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the port number to `5101` and save the changes to the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing a simple function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s implement the function to convert numbers into words by using the `Humanizer`
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project file, add a package reference for Humanizer, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, in the `Northwind.AzureFunctions.Service`
    project, right-click `Function1.cs` and rename it to `NumbersToWordsFunction.cs`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `NumbersToWordsFunction.cs`, modify the contents to implement an Azure function
    to convert an amount as a number into words, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing a simple function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test the function in our local development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `Northwind.AzureFunctions.Service` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code, you will need to navigate to the **Run
    and Debug** pane, make sure that **Attach to .NET Functions** is selected, and
    then click the **Run** button.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, if you see a **Windows Security Alert** from **Windows Defender
    Firewall**, then click **Allow access**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that **Azure Functions Core Tools** hosts your function, as shown in the
    following output and in *Figure 10.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B19587_10_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.1: Azure Functions Core Tools hosting a function'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It might take a few minutes for the `Host` `lock` `lease` message to appear
    so do not worry if it doesn’t show immediately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the URL for your function and copy it to the clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the URL into the address box, append the query string `?amount=123456`,
    and note the successful response in the browser of **one hundred and twenty-three
    thousand four hundred and fifty-six**, as shown in *Figure 10.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_10_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: A successful call to the Azure function running locally'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command prompt or terminal, note the function was called successfully,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Try calling the function without an amount in the query string, or a non-integer
    value for the amount like `apples`, and note the function returns a `400` status
    code indicating a bad request with a custom message, `Failed to parse: apples`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server (or in Visual Studio Code, stop debugging).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Responding to timer and resource triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have seen an Azure Functions function that responds to an HTTP
    request, let’s build some that respond to other types of triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Support for HTTP and timer triggers is built in. Support for other bindings
    is implemented as extension packages.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a Timer triggered function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will make a function that runs every hour and requests a page from
    [amazon.com](https://www.amazon.com/) for the eighth edition of my book, *C# 12
    and .NET 8 – Modern Cross-Platform Development Fundamentals*, so that I can keep
    track of its Best Sellers Rank in the United States.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function will need to make HTTP `GET` requests so we should inject the
    HTTP client factory. To do that, we will need to add some extra package references
    and create a special startup class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.AzureFunctions.Service` project, add package references for
    working with Azure Functions extensions and timers, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.AzureFunctions.Service` project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import namespaces for working with dependency injection and
    HTTP media headers, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, add statements to configure a HTTP client factory for making
    requests to Amazon as if it was the Chrome browser as a dependency service, as
    shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Chrome version on June 5, 2023, was `114.0.5735.91`. The major version number
    usually increments monthly, so in November 2023, it will likely be `119`, and
    in November 2024, it will likely be `131`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a class file named `ScrapeAmazonFunction.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to implement a function that requests the page for the
    seventh edition of my book on the Amazon website and process the response, which
    is compressed using GZIP, to extract the book’s Best Seller Rank, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing the Timer triggered function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Information about a function can be retrieved by making an HTTP `GET` request
    in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://locahost:5101/admin/functions/<functionname>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can test the Timer function in our local development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `Northwind.AzureFunctions.Service` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code, you will need to make sure you have the
    Azurite extension installed and the Azurite services running. Navigate to the
    **Run and Debug** pane, make sure that **Attach to .NET Functions** is selected,
    and then click the **Run** button.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note there are now two functions, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `HttpRequests` folder, add a new file named `azurefunctions-scrapeamazon.http`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to define a global variable and two requests to the Azure
    Functions locally hosted service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the first request and note that a JSON document is returned with information
    about the `NumbersToWordsFunction` function, as shown in the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the second request and note that a JSON document is returned with information
    about the `ScrapeAmazonFunction` function. The most interesting information for
    this function is the binding type and schedule, as shown in the following partial
    response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a third request that will trigger the timer function manually without having
    to wait for the hour mark by sending a `POST` request with an empty JSON document
    in the body to its `admin` endpoint, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the third request and note that it was successfully accepted, as shown
    in the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `{}` in the body of the request, send it again, and note the client
    error response from which we can deduce that an empty JSON document is required,
    as shown in the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the empty JSON document back.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal for the Azure Functions service, note that
    the function was triggered by our call. It outputs the time it was triggered (13:49
    p.m.) and the time of its next occurrence in its normal timer schedule (2 p.m.)
    if I were to leave the service running, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optionally, wait until the hour mark and note that the next occurrence triggers,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If I were to stop the service running, wait for more than an hour, and then
    start the service, it would immediately run the function because it is past due,
    as shown highlighted in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Shut down the Azure Functions service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing a function that works with queues and BLOBs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTTP-triggered function responded directly to the `GET` request with plain
    text. We will now define a similar function to bind to Queue Storage and add a
    message to a queue to indicate that an image needs to be generated and uploaded
    to Blob Storage. This can then be printed as a check.
  prefs: []
  type: TYPE_NORMAL
- en: When running the service locally, we want to generate the image of the check
    BLOB in the local filesystem to make it easier to ensure it is working correctly.
    We will set a custom environment variable in local settings to detect that condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a font that looks like handwriting. Google has a useful website where
    you can search for, preview, and download fonts. The one we will use is Caveat,
    as shown at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://fonts.google.com/specimen/Caveat?category=Handwriting&preview.text=one%20hundred%20and%20twenty%20three%20thousand,%20four%20hundred%20and%20fifty%20six&preview.text_type=custom#standard-styles](https://fonts.google.com/specimen/Caveat?category=Handwriting&preview.text=one%20hundred%20and%20twenty%20three%20thousand,%20four%20hundred%20and%20fifty%20six&preview.text_type=custom#standard-styles)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the font at the link above, extract the ZIP file, and copy the files
    into a folder named `fonts`, as shown in Visual Studio 2022 in *Figure 10.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_10_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: The fonts folder with the Caveat font files in Visual Studio 2022'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Caveat-Regular.ttf` font file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Properties**, set **Copy to Output Directory** to **Copy always**, as
    shown in *Figure 10.3*. This adds an entry to the project file, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are using Visual Studio Code, manually add the preceding entry to the
    project file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Northwind.AzureFunctions.Service` project, add package references for
    working with the Azure Queue and Blob Storage extensions and drawing with `ImageSharp`,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.AzureFunctions.Service` project, add a new class named `NumbersToChecksFunction.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `NumbersToChecksFunction.cs`, add statements to register the function with
    an output binding for Queue Storage so that it can write to a named queue, and
    when the amount is successfully parsed to return the words to the queue, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `local.settings.json`, add an environment variable named `IS_LOCAL` with
    a value of `true`, as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a class file named `CheckGeneratorFunction.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `[QueueTrigger("checksQueue")] string message` parameter means the function
    is triggered by a message being added to the `checksQueue` and the queued item
    is automatically passed to the parameter named `message`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use ImageSharp to create a 1200x600 image of a check.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the current UTC date and time to name the BLOB to avoid duplicates. In
    a real implementation, you would need something more robust like GUIDs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `IS_LOCAL` environment variable is set to `true`, then we save the image
    as a PNG to the local filesystem in a `blobs` subfolder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We save the image as a PNG to a memory stream that is then returned as a byte
    array and uploaded to the BLOB container defined by the `[BlobOutput("checks-blob-container/check.png")]`
    attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the function that works with queues and BLOBs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test the function that works with queues and BLOBs in our local
    development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `Northwind.AzureFunctions.Service` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code, you will need to navigate to the **Run
    and Debug** pane, make sure that **Attach to .NET Functions** is selected, and
    then click the **Run** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note there are now four functions, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `HttpRequests` folder, add a new file named `azurefunctions-numberstochecks.http`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the request and note that a JSON document is returned with information
    about the `NumbersToWordsFunction` function, as shown in the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the command prompt or terminal, note the function call was successful and
    a message was sent to the queue that then triggered the `CheckGeneratorFunction`,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.AzureFunctions.Service\bin\Debug\net8.0\blobs` folder, note
    the image created locally in the `blobs` folder, as shown in *Figure 10.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_10_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: The check image generated in the project blobs folder'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the check image, as shown in *Figure 10.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_10_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: The check image opened in Windows Paint'
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an Azure Functions project to the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s create a function app and related resources in an Azure subscription,
    then deploy your functions to the cloud and run it there.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not already have an Azure account, then you can sign up for a free
    one at the following link: [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Visual Studio 2022 to publish
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Visual Studio 2022 has a GUI to publish to Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: In **Solution Explorer**, right-click the `Northwind.AzureFunctions.Service`
    project and select **Publish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure** and then click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure Function App (Linux)** and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in and enter your Azure credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your subscription; for example, I chose my subscription named **Pay-As-You-Go**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Function Instance** section, click the **+ Create New** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the dialog box, as shown in *Figure 10.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: This must be globally unique. It suggested a name based on the project
    name and the current date and time.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription name**: Select your subscription.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource group**: Select or create a new resource group to make it easier
    to delete everything later. I chose `apps-services-book`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plan Type**: **Consumption** (pay for only what you use).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: A data center nearest to you. I chose **UK South**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Storage**: Create a new account named `northwindazurefunctions` (or
    something else that is globally unique) in a data center nearest to you and choose
    **Standard – Locally Redundant Storage** for the account type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Insights**: **None**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B19587_10_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: Creating a new Azure function app'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**. This process can take a minute or more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Publish** dialog, click **Finish** and then click **Close**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Publish** window, click the **Publish** button, as shown in *Figure
    10.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_10_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.7: An Azure Function App ready to publish using Visual Studio 2022'
  prefs: []
  type: TYPE_NORMAL
- en: 'Review the output window, as shown in the following publishing output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the **Publish** window, click **Open site** and note your Azure Functions
    v4 host site is ready.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test the function in your browser by appending the following relative URL to
    the address box, as shown in *Figure 10.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/api/NumbersToWordsFunction?amount=987654321`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19587_10_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.8: Calling the function hosted in the Azure cloud'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Visual Studio Code to publish
  prefs:
  - PREF_IND
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can learn how to publish using Visual Studio Code at the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/azure/azure-functions/functions-develop-vs-code?tabs=csharp#sign-in-to-azure](https://learn.microsoft.com/en-us/azure/azure-functions/functions-develop-vs-code?tabs=csharp#sign-in-to-azure)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve successfully published your Azure Functions project to the cloud,
    it’s important to understand how to manage your resources efficiently. Let’s explore
    how to clean up our Azure Functions resources to avoid unnecessary costs and ensure
    tidy resource management.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up Azure Functions resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the following steps to delete the function app and its related
    resources to avoid incurring further costs:'
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, navigate to [https://portal.azure.com/](https://portal.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Azure portal, in your function app’s **Overview** blade, select **Resource
    Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that it contains only resources that you want to delete; for example,
    there should be a **Storage account**, a **Function App**, and an **App Service
    plan**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are sure you want to delete all the resources in the group, then click
    **Delete resource group** and accept any other confirmations. Alternatively, you
    can delete each resource individually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 10.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between the in-process and isolated worker models for
    Azure Functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What attribute do you use to cause a function to trigger when a message arrives
    in a queue?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What attribute do you use to make a queue available to send messages to?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What schedule does the following NCRONTAB expression define?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0 0 */6 * 6 6`'
  prefs: []
  type: TYPE_NORMAL
- en: How can you configure a dependency service for use in a function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 10.2 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page for more details on the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-10---building-serverless-nanoservices-using-azure-functions](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-10---building-serverless-nanoservices-using-azure-functions)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the concepts around Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build serverless services using Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to respond to HTTP, Timer, and Queue triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to bind to Queue and Blob Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deploy an Azure Functions project to the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about SignalR, a technology for performing
    real-time communication between client and server.
  prefs: []
  type: TYPE_NORMAL
