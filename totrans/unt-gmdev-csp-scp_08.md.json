["```cs\nusing UnityEngine;\npublic class ForceAndTorqueDemo : MonoBehaviour\n{\n    public float forceMagnitude = 10f;\n    public float torqueMagnitude = 5f;\n    private Rigidbody rb;\n    void Start()\n    {\n        // Get the Rigidbody component attached to this GameObject\n        rb = GetComponent<Rigidbody>();\n    }\n    void Update()\n    {\n        // Check for user input to apply force\n        if (Input.GetKeyDown(KeyCode.Space))\n        {\n            // Apply an upward force to the Rigidbody\n            rb.AddForce(Vector3.up * forceMagnitude,\n              ForceMode.Impulse);\n        }\n        // Check for user input to apply torque\n        if (Input.GetKeyDown(KeyCode.T))\n        {\n            // Apply a rotational force (torque) around the Z-axis\n            rb.AddTorque(Vector3.forward * torqueMagnitude,\n              ForceMode.Impulse);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class GravityAndImpulseDemo : MonoBehaviour\n{\n    public float jumpForce = 5f;\n    public Slider gravitySlider;\n    private Rigidbody rb;\n    void Start()\n    {\n        // Get the Rigidbody component attached to the GameObject\n        rb = GetComponent<Rigidbody>();\n        // Set the initial value of the gravity slider\n        if (gravitySlider != null)\n        {\n            gravitySlider.value = Physics.gravity.y;\n            gravitySlider.onValueChanged.AddListener\n                          (OnGravityChanged);\n        }\n    }\n    void Update()\n    {\n        // Check for user input to apply an impulse force\n        if (Input.GetKeyDown(KeyCode.Space))\n        {\n            // Apply an impulse force upwards to simulate a jump\n            rb.AddForce(Vector3.up * jumpForce,\n              ForceMode.Impulse);\n        }\n    }\n    // Method to handle gravity changes via the slider\n    void OnGravityChanged(float newGravity)\n    {\n        Physics.gravity = new Vector3(0, newGravity, 0);\n    }\n}\n```", "```cs\nvoid OnCollisionEnter(Collision collision)\n{\n    // Play sound\n    AudioSource audio = GetComponent<AudioSource>();\n    audio.Play();\n    // Change color to indicate damage\n    Renderer renderer = GetComponent<Renderer>();\n    renderer.material.color = Color.red;\n}\n```", "```cs\nusing UnityEngine;\npublic class PlayerController : MonoBehaviour\n{\n    Animator animator;\n    void Start()\n    {\n        animator = GetComponent<Animator>();\n    }\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.Space))\n        {\n            // Set the 'isJumping' parameter to true when the space bar is pressed\n            animator.SetBool(\"isJumping\", true);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class CharacterPhysicsReactions : MonoBehaviour\n{\n    public Animator animator;\n    public float stumbleForce = 5f;\n    private void OnCollisionEnter(Collision collision)\n    {\n        // Check if the collision was with an obstacle\n        if (collision.gameObject.tag == \"Obstacle\")\n        {\n            // Play the \"stumble\" animation\n            animator.SetTrigger(\"Stumble\");\n            // Apply a force to the character to make them stumble\n            GetComponent<Rigidbody>().AddForce(-\n              collision.contacts[0].normal * stumbleForce,\n              ForceMode.Impulse);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class InteractiveDoor : MonoBehaviour\n{\n    public Animator doorAnimator;\n    public float interactionRange = 2f;\n    private void Update()\n    {\n        // Check if the player is within the interaction range\n        if (Vector3.Distance(transform.position,\n            PlayerController.instance.transform.position)\n            <= interactionRange)\n        {\n            // Play the \"Open\" animation\n            doorAnimator.SetTrigger(\"Open\");\n        }\n        else\n        {\n            // Play the \"Close\" animation\n            doorAnimator.SetTrigger(\"Close\");\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class BridgeCollapse : MonoBehaviour\n{\n    public float maxWeight = 500f;\n    public float collapseSpeed = 2f;\n    public Animator bridgeAnimator;\n    private bool isCollapsing = false;\n    private void OnTriggerEnter(Collider other)\n    {\n        // Check if the colliding object is the player\n        if (other.CompareTag(\"Player\"))\n        {\n         // Get the total weight of the player and any carried objects\n            float totalWeight =\n              other.GetComponent<Rigidbody>().mass +\n              other.GetComponent<PlayerInventory>()\n              .totalWeight;\n            // If the total weight exceeds the bridge's capacity,\n            //start the collapse\n            if (totalWeight > maxWeight)\n            {\n                isCollapsing = true;\n                bridgeAnimator.SetTrigger(\"Collapse\");\n            }\n        }\n    }\n    private void Update()\n    {\n        // Gradually lower the bridge as it collapses\n        if (isCollapsing)\n        {\n            transform.Translate(Vector3.down *\n              collapseSpeed * Time.deltaTime);\n        }\n    }\n}\n```"]