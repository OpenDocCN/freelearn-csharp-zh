- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: The Anatomy of a Minimal API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小化API的解剖结构
- en: To understand how minimal APIs work, it makes sense to learn how they are put
    together in the context of an ASP.NET application. In ASP.NET project types such
    as **Model-View-Controller** ( **MVC** ) and **Web API** , various components
    are tied together to create the overall application, and minimal APIs are no different.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解最小化API是如何工作的，了解它们在ASP.NET应用程序的上下文中是如何组合起来的是有意义的。在ASP.NET项目类型，如**模型-视图-控制器**（**MVC**）和**Web
    API**中，各种组件被绑定在一起以创建整体应用程序，最小化API也不例外。
- en: By the end of this chapter, you will have learned how minimal APIs fit within
    the ASP.NET ecosystem and how the various components are combined to make them
    possible.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解最小化API如何在ASP.NET生态系统中定位，以及各种组件如何组合起来使其成为可能。
- en: The aim here is to ensure you have a deeper understanding of the wider context
    surrounding minimal APIs, which will inform the way you design and implement them
    in future projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的目的是确保你对最小API的更广泛背景有更深入的了解，这将指导你在未来的项目中设计和实现它们的方式。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Anatomy of a minimal API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化API的解剖结构
- en: Components of a minimal API Application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化API应用程序的组件
- en: The API request lifecycle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 请求生命周期
- en: Let’s get into the chapter!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入本章内容！
- en: Anatomy of a minimal API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小化API的解剖结构
- en: 'When referring to the *anatomy* of a minimal API, what we are really talking
    about is the pieces of the puzzle that fit together to bootstrap the application.
    Before ASP.NET Core, bootstrapping involved two classes: **Program.cs** and **Startup.cs**
    . The former stayed at the high level of the project, setting up an HTTP pipeline
    before calling the startup class to add components and features to the pipeline.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当提到最小化API的*解剖结构*时，我们真正谈论的是拼图中的各个部分，它们组合在一起以启动应用程序。在ASP.NET Core之前，启动涉及两个类：**Program.cs**和**Startup.cs**。前者保持在项目的高层次，在调用启动类以向管道添加组件和功能之前设置HTTP管道。
- en: ASP.NET Core majorly changed this by making it possible to configure the application
    in a single file. This simplified the process, paving the way for native support
    of minimal APIs. So, in the most recent iterations of .NET, we now only need **Program.cs**
    for bootstrapping an ASP.NET application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core主要通过允许在单个文件中配置应用程序来实现这一变化。这简化了过程，为原生支持最小化API铺平了道路。因此，在.NET的最新迭代中，我们现在只需要**Program.cs**来启动ASP.NET应用程序。
- en: 'The minimum that **Program.cs** does to create a minimal API is to build and
    run an instance of **WebApplication** . This **WebApplication** instance is built
    using another class, called **WebApplicationBuilder** . As you can see in the
    upcoming code, **WebApplication** uses a *factory* in the form of the **CreateBuilder**
    method to create an instance of **WebApplication** called **app** . You will have
    seen this code in code examples in the previous chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Program.cs**创建最小API所需的最小操作是构建和运行**WebApplication**实例。此**WebApplication**实例使用另一个名为**WebApplicationBuilder**的类构建。正如你将在下一章的代码示例中看到的那样，**WebApplication**使用**CreateBuilder**方法的形式作为*工厂*来创建一个名为**app**的**WebApplication**实例。你将在前一章的代码示例中看到此代码：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The result of this code is an instance of **WebApplication** on which endpoints
    can be mapped, using functions such as **MapGet** and **MapPost** .
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的结果是一个**WebApplication**实例，可以使用**MapGet**和**MapPost**等函数映射端点。
- en: '**WebApplication** embodies the overall API and is created using a builder
    pattern implementation via a **WebApplicationBuilder** object. This object allows
    configuration to be specified while building the **WebApplication** instance.
    For example, services can be registered for dependency injection (we will learn
    about dependency injection in [*Chapter 7*](B20968_07.xhtml#_idTextAnchor119)
    ) while the **WebApplication** is being built via the **WebApplicationBuilder**
    object.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebApplication**体现了整体API，并通过**WebApplicationBuilder**对象使用构建器模式实现来创建。此对象允许在构建**WebApplication**实例时指定配置。例如，可以在通过**WebApplicationBuilder**对象构建**WebApplication**实例时注册服务以进行依赖注入（我们将在[*第7章*](B20968_07.xhtml#_idTextAnchor119)中学习依赖注入）。 '
- en: 'An example of this initial setup of dependencies can be seen in the next code,
    where we use **AddScoped** to register the **PayrollRunner** type for dependency
    injection before the line of code on which the app is finally built using **builder.Build()**
    :'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了这种依赖项的初始设置示例，其中我们使用**AddScoped**在最终使用**builder.Build()**构建应用程序的代码行之前注册**PayrollRunner**类型以进行依赖注入：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A minimal API does not have its own dedicated project template in Visual Studio.
    Think of a minimal API as an option within an ASP.NET project, rather than its
    own project type. The reason for this is that minimal APIs are more often than
    not a part of another kind of project, although it is certainly common to have
    small ASP.NET projects consisting exclusively of minimal API endpoints.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API在Visual Studio中没有自己的专用项目模板。将最小API视为ASP.NET项目中的一个选项，而不是其自己的项目类型。这样做的原因是，最小API通常是另一种项目的一部分，尽管确实常见到只有最小API端点的小型ASP.NET项目。
- en: By default, an ASP.NET project creates a set of minimal API endpoints. You can
    see this using the **ASP.NET Core (Empty)** project template in Visual Studio.
    Despite the name, the template’s resulting project generates an example minimal
    API endpoint, as we saw in the *Hello World!* example in [*Chapter 1*](B20968_01.xhtml#_idTextAnchor014)
    .
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，ASP.NET项目创建了一组最小API端点。您可以使用Visual Studio中的**ASP.NET Core (Empty)**项目模板查看这一点。尽管名称如此，该模板生成的项目会生成一个示例最小API端点，正如我们在[*第1章*](B20968_01.xhtml#_idTextAnchor014)中的*Hello
    World!*示例中看到的那样。
- en: Components of a minimal API application
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小API应用程序的组件
- en: There are several components that go together to create a minimal API project,
    most of which are applicable to any ASP.NET web application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建最小API项目需要几个组件，其中大部分适用于任何ASP.NET Web应用程序。
- en: At the top level, the application is represented by an instance of **WebApplication**
    . This class holds together all the pieces that form the API system. Think of
    it like the application’s body.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶级上，应用程序由**WebApplication**的一个实例表示。这个类将构成API系统的所有部分组合在一起。将其视为应用程序的主体。
- en: 'Components that live inside **WebApplication** include the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 位于**WebApplication**内部的组件包括以下内容：
- en: '**Application Lifecycle** : As the application runs, various events will occur,
    such as application startup and shutdown, and thrown exceptions. **WebApplication**
    contains several **hooks** that can be used to handle these events. For example,
    you could execute specific functions or methods when the application starts up
    or change the way specific exception types are handled when caught.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序生命周期**：随着应用程序的运行，将发生各种事件，例如应用程序启动和关闭，以及抛出的异常。**WebApplication**包含几个可以用来处理这些事件的**钩子**。例如，您可以在应用程序启动时执行特定函数或方法，或者在捕获特定异常类型时更改处理这些异常的方式。'
- en: '**Services** : Your APIs will no doubt have reusable aspects that could be
    used across multiple use cases and different areas of the application. Creating
    *services* allows you to package up these reusable aspects into components that
    can be passed to various parts of your API using dependency injection. For example,
    several of your endpoints may rely on retrieving data from a SQL database, so
    it would not be good practice to write the code to access the database multiple
    times. Instead, a service can be written once and then injected into any classes
    that need to communicate with SQL.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：您的API无疑会有可重用的方面，这些方面可以用于多个用例和应用程序的不同区域。创建*服务*允许您将这些可重用方面打包成组件，可以通过依赖注入将这些组件传递到API的各个部分。例如，您的多个端点可能依赖于从SQL数据库检索数据，因此多次编写访问数据库的代码不是好的做法。相反，可以编写一次服务，然后将其注入到任何需要与SQL通信的类中。'
- en: '**Routing** : We talked about routing in the previous chapter. In the context
    of a minimal API’s anatomy, routing is a key component; it is responsible for
    ensuring that traffic is sent to the appropriate destination based on the endpoint
    URL and the HTTP method being used.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：我们在上一章中讨论了路由。在最小API结构中，路由是一个关键组件；它负责确保根据端点URL和使用的HTTP方法将流量发送到适当的目的地。'
- en: '**Middleware** : In ASP.NET, middleware is a pipeline that allows developers
    to interrupt the API flow with code that is executed during requests. The middleware
    pipeline is a chain of components executing any required logic. Examples of common
    middleware use cases include handling or modifying requests, authenticating clients,
    caching, and logging. Middleware can be a reusable component that is added to
    the pipeline or custom code.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中间件**：在ASP.NET中，中间件是一个管道，允许开发者在请求期间通过执行代码来中断API流程。中间件管道是由执行任何所需逻辑的组件链组成。常见的中间件用例包括处理或修改请求、验证客户端、缓存和日志记录。中间件可以是一个可重用的组件，可以添加到管道中或自定义代码。'
- en: Once a middleware component has finished running, the next component in the
    pipeline executes, until all components are finished. This is particularly useful
    because it can be applied globally, running on all incoming requests. It’s important
    to note that the pipeline can run both when the request comes in and when the
    response is sent back to the client, the difference being that the order of the
    middleware components in the pipeline is reversed when the response makes its
    way back to the client.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦中间件组件运行完成，管道中的下一个组件就会执行，直到所有组件都完成。这一点特别有用，因为它可以全局应用，运行在所有传入请求上。需要注意的是，管道在请求到来时和响应发送回客户端时都可以运行，区别在于当响应返回客户端时，管道中中间件组件的顺序会被反转。
- en: '**Configuration** : Most applications, including minimal APIs, require configuration
    to be specified, through connection strings for databases, authentication tokens,
    a flag to indicate whether the API is in developer mode, and so on. Think of these
    like environment variables. These variables are stored in an accessible location
    for use throughout the application’s lifecycle. For example, if you have a SQL
    database that several of your API endpoints need to work with data, they will
    need the relevant connection string to initiate the SQL connection. This can be
    stored as a configuration setting for any of these endpoints to obtain when they
    need it.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：大多数应用程序，包括最小的 API，都需要指定配置，通过数据库连接字符串、身份验证令牌、一个标志来指示 API 是否处于开发者模式等等。将这些想象成环境变量。这些变量存储在可访问的位置，以便在整个应用程序的生命周期中使用。例如，如果你有一个
    SQL 数据库，你的 API 端点需要与数据交互，它们将需要相关的连接字符串来初始化 SQL 连接。这可以作为任何这些端点的配置设置存储，以便它们在需要时获取。'
- en: So far, we have covered, at a basic level, the various components within an
    ASP.NET web application, including ones set up to host minimal API endpoints.
    To better understand the anatomy of a minimal API, it helps to also understand
    how a request travels through an ASP.NET API.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经从基本层面介绍了 ASP.NET 网络应用程序中的各种组件，包括用于托管最小 API 端点的组件。为了更好地理解最小 API 的结构，了解请求如何通过
    ASP.NET API 也很重要。
- en: The API request lifecycle
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 请求生命周期
- en: APIs share one thing in common, irrespective of the underlying technology –
    the conversation between client and server. The lifecycle of this conversation
    is visualized in *Figure 3* *.1* .
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: API 有一个共同点，无论底层技术如何——客户端和服务器之间的对话。这个对话的生命周期在 *图 3* *.1* 中被可视化。
- en: '![Figure 3.1: The journey of an HTTP request](img/B20968_03_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1：HTTP 请求的旅程](img/B20968_03_01.jpg)'
- en: 'Figure 3.1: The journey of an HTTP request'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：HTTP 请求的旅程
- en: 'Let’s explore this lifecycle in more detail. Specifically, for ASP.NET, and
    therefore minimal APIs, the steps we outline next are taken from the point a client
    makes a request, to the point a response is received:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨这个生命周期。特别是对于 ASP.NET 和因此最小的 API，我们下面概述的步骤是从客户端发起请求到收到响应的点：
- en: '**The request is parsed** – On receipt of the request, ASP.NET takes the incoming
    data and extracts critical information, such as the HTTP method in use (GET, POST,
    PUT, etc.). The URL is extracted, along with the request’s headers and body.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**请求被解析** – 在收到请求后，ASP.NET 接收传入的数据并提取关键信息，例如正在使用的 HTTP 方法（GET、POST、PUT 等）。提取
    URL，以及请求的头部和正文。'
- en: '**The middleware pipeline is executed** – Middleware sitting in the chain is
    processed, with each middleware component operating on the request as configured.
    For example, authentication middleware could check that the sender of the request
    is authenticated, custom middleware could alter the structure of the request,
    and logging middleware could reference the request in logs that it writes to various
    data sources.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**中间件管道执行** – 链中的中间件被处理，每个中间件组件按照配置对请求进行操作。例如，身份验证中间件可以检查请求发送者是否已认证，自定义中间件可以改变请求的结构，而日志记录中间件可以在它写入到各种数据源的日志中引用请求。'
- en: '**Routing** – Now that the application has parsed the request and processed
    it through any relevant middleware, it can match the extracted URL and HTTP method
    against the routes configured in the API. This allows the request’s content to
    be routed to the appropriate endpoint for handling. Routing is just another example
    of a middleware component. As such, its order of execution can be altered within
    the pipeline.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**路由** – 现在应用程序已经解析了请求并通过任何相关的中间件进行处理，它可以匹配提取的URL和HTTP方法与API中配置的路由。这允许将请求的内容路由到适当的端点进行处理。路由只是中间件组件的另一个例子。因此，可以在管道中更改其执行顺序。'
- en: '**Dependency injection** – Once the request has been routed to the correct
    request, the dependency injection container will resolve any dependencies required
    to process the request and inject them into the components containing the endpoint,
    making them available during processing.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**依赖注入** – 一旦请求被路由到正确的请求，依赖注入容器将解析处理请求所需的任何依赖项，并将它们注入到包含端点的组件中，使它们在处理过程中可用。'
- en: '**Request handling** – The request is effectively now *inside the endpoint*
    , as in, it is being processed by the logic a developer has written inside the
    body of a minimal API endpoint they have written. Parameters passed in can be
    used within the endpoint body to process the required logic.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**请求处理** – 请求现在实际上已经位于**端点内部**，也就是说，它正在由开发者编写在最小API端点主体中的逻辑进行处理。传递的参数可以在端点主体中使用以处理所需的逻辑。'
- en: '**Response generation** – Once the logic defined within the body of the endpoint
    has finished executing (or if an exception is thrown), a response will be generated.
    The response contains any expected data for the HTTP method on the endpoint, such
    as JSON or a simple string. It also has a status code appropriate to the processing
    result, for example, **200 OK** , **400 Bad Request** , or **500 Internal Server
    Error** . Once generated, the response is sent back to the client, and the HTTP
    conversation is over.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**响应生成** – 一旦端点主体中定义的逻辑执行完成（或抛出异常），将生成一个响应。响应包含端点上HTTP方法预期的任何数据，例如JSON或简单的字符串。它还有一个与处理结果适当的状态码，例如，**200
    OK**、**400 Bad Request**或**500 Internal Server Error**。一旦生成，响应将发送回客户端，HTTP会话结束。'
- en: Now that we have explored the journey of a request, let’s review what we have
    covered in this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了请求的旅程，让我们回顾一下本章所涵盖的内容。
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The chapter has detailed the different components that ASP.NET employs to construct
    an application capable of hosting minimal API endpoints. It explained how the
    **WebApplication** instance is configured using the **WebApplicationBuilder**
    . The chapter also described the integration of elements like routing, services,
    dependency injection, and middleware into the application. Additionally, it emphasized
    the importance of the application lifecycle and how lifecycle events can be managed
    through hooks. The journey of an HTTP request from the client to minimal API endpoints
    and back was also discussed. Finally, the chapter outlined the steps involved
    in matching incoming requests with the appropriate logic, and the process of handling
    the request in preparation for a client response.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍了ASP.NET用于构建能够托管最小API端点的应用程序的不同组件。它解释了如何使用**WebApplicationBuilder**配置**WebApplication**实例。本章还描述了将路由、服务、依赖注入和中间件等元素集成到应用程序中。此外，它强调了应用程序生命周期的重要性以及如何通过钩子管理生命周期事件。本章还讨论了HTTP请求从客户端到最小API端点以及返回的整个过程。最后，本章概述了将传入请求与适当的逻辑匹配的步骤，以及处理请求以准备客户端响应的过程。
- en: In the next chapter, we will move away from the conceptual and back to the practical
    with a more advanced guide on handling HTTP requests and routing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从概念转向实践，提供更高级的HTTP请求和路由处理指南。
- en: Part 2 - Data and Execution Flow
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分 - 数据和执行流程
- en: This part delves into the crucial aspects of how data flows through minimal
    APIs. You’ll learn how to handle various HTTP methods, set up routing, customize
    middleware pipelines, and integrate with different data sources. These chapters
    cover everything from dependency injection to working with databases using **Object-Relational
    Mapping** ( **ORM** ) tools.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分深入探讨了数据如何在最小API中流动的关键方面。您将学习如何处理各种HTTP方法、设置路由、自定义中间件管道以及与不同的数据源集成。这些章节涵盖了从依赖注入到使用**对象关系映射**（**ORM**）工具处理数据库的各个方面。
- en: 'This part has the following chapters:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分包含以下章节：
- en: '[*Chapter 4*](B20968_04.xhtml#_idTextAnchor081) , *Handling HTTP Methods and
    Routing*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第四章*](B20968_04.xhtml#_idTextAnchor081) ，*处理HTTP方法和路由*'
- en: '[*Chapter 5*](B20968_05.xhtml#_idTextAnchor094) , *The Middleware Pipeline*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第五章*](B20968_05.xhtml#_idTextAnchor094) ，*中间件管道*'
- en: '[*Chapter 6*](B20968_06.xhtml#_idTextAnchor105) , *Parameter Binding*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第六章*](B20968_06.xhtml#_idTextAnchor105) ，*参数绑定*'
- en: '[*Chapter 7*](B20968_07.xhtml#_idTextAnchor119) , *Dependency Injection in
    Minimal APIs*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第七章*](B20968_07.xhtml#_idTextAnchor119) ，*在最小API中进行依赖注入*'
- en: '[*Chapter 8*](B20968_08.xhtml#_idTextAnchor132) , *Integrating Minimal APIs
    with Data Sources*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第八章*](B20968_08.xhtml#_idTextAnchor132) ，*将最小API与数据源集成*'
- en: '[*Chapter 9*](B20968_09.xhtml#_idTextAnchor143) , *Object Relational Mapping
    with Entity Framework Core and Dapper*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第九章*](B20968_09.xhtml#_idTextAnchor143) ，*使用Entity Framework Core和Dapper进行对象关系映射*'
