- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Up and Running with Minimal API Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用最小 API 开发快速入门
- en: As users, we associate interacting with an application with a **User Interface**
    ( **UI** ). This interface consists of interactive elements that allow for interaction
    between the code and user. You can think of this like the *storefront* , a place
    where you can browse the available wares or request appropriate action, for example,
    booking a vacation or adding items to your shopping cart.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我们将与应用程序的交互与 **用户界面**（**UI**）联系起来。这个界面由允许代码与用户之间交互的交互元素组成。您可以将它想象成 *店面*，一个您可以浏览可用商品或请求适当操作的地方，例如预订假期或添加商品到购物车。
- en: If the UI is where customers interact with our *store* , an **Application Programming
    Interface** ( **API** ) is the back of the store. This is where we receive deliveries,
    move goods, process orders, and manage inventory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 UI 是客户与我们的 *商店* 交互的地方，那么 **应用程序编程接口**（**API**）就是商店的后方。这是我们接收货物、移动商品、处理订单和管理库存的地方。
- en: Most developers have some experience in interacting with or writing APIs, but
    what makes **minimal** **APIs** different?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者都有一些与 API 交互或编写 API 的经验，但是什么让 **最小** **API** 与其他 API 不同呢？
- en: Minimal APIs were introduced by Microsoft in 2021 with the release of .NET 6.
    The aim was to empower developers to create APIs with a minimum of boilerplate
    code, allowing them to focus on the essentials of the business logic in use between
    requests and responses.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 微软于 2021 年随着 .NET 6 的发布引入了最小 API。其目的是让开发者能够以最少的样板代码创建 API，从而让他们能够专注于请求和响应之间使用的业务逻辑的精髓。
- en: They offer a lightweight solution to API development, which is often a good
    starting point for projects, as they require much less effort to set them up.
    This is a key advantage when you’re looking to get a system up and running quickly,
    or where there is a low number of dependencies. It can also mean that performance
    is better in minimal APIs thanks to the reduced overhead compared to more traditional
    API formats. In this book, we will learn how to leverage these benefits of minimal
    APIs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它们为 API 开发提供了一个轻量级解决方案，这对于项目来说通常是一个好的起点，因为它们设置起来所需的努力要少得多。当您希望快速启动系统或依赖项数量较少时，这是一个关键优势。这也意味着由于与更传统的
    API 格式相比减少了开销，最小 API 的性能可能更好。在本章中，我们将学习如何利用最小 API 的这些优势。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding minimal APIs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解最小 API
- en: Contrasting minimal APIs with traditional API approaches
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将最小 API 与传统 API 方法进行对比
- en: The significance of minimal APIs in modern development
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小 API 在现代开发中的重要性
- en: Installing required tools and dependencies
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需的工具和依赖项
- en: Configuring development environments
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置开发环境
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the directions in this chapter, you’ll need to have the following
    installed on your Windows, macOS, or Linux machine:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的说明，您需要在您的 Windows、macOS 或 Linux 机器上安装以下内容：
- en: .NET 9.0 **Software Development** **Kit** ( **SDK** )
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 9.0 **软件开发** **工具包**（**SDK**）
- en: Visual Studio or Visual Studio Code
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 或 Visual Studio Code
- en: C# extension for Visual Studio Code (if you are using Visual Studio Code)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 扩展程序用于 Visual Studio Code（如果您正在使用 Visual Studio Code）
- en: If you’re working in Windows, it’s recommended that you use Visual Studio, although
    Visual Studio Code will still work. If you’re a Mac or Linux user, you should
    use Visual Studio Code. (At the time of writing, Visual Studio for Mac is set
    to be retired on August 31, 2024.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Windows 上工作，建议您使用 Visual Studio，尽管 Visual Studio Code 仍然可以使用。如果您是 Mac 或
    Linux 用户，您应该使用 Visual Studio Code。（在撰写本文时，Visual Studio for Mac 预计将于 2024 年 8
    月 31 日退役。）
- en: 'The code for this chapter is available in the GitHub repository at: [https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-9](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-9)
    .'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在 GitHub 仓库中找到：[https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-9](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-9)。
- en: Understanding minimal APIs
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解最小 API
- en: When it comes to designing and building APIs, we’re spoilt for choice with varying
    styles, approaches, and templates. .NET has proven itself over the years to be
    a fantastic choice for general-purpose API development. Modern .NET provides us
    with two main types of API framework, one more traditional than the other. One
    of the options is, of course, the minimal API, which is still a relatively new
    feature within .NET compared to its predecessor, the controller-based API.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到设计和构建API时，我们有各种各样的风格、方法和模板可供选择。多年来，.NET已经证明了自己是通用API开发的绝佳选择。现代.NET为我们提供了两种主要的API框架，一种比另一种更传统。其中一种选择当然是最小API，与它的前辈基于控制器的API相比，在.NET中这仍然是一个相对较新的功能。
- en: With minimal APIs, the aim is simplicity. Less code, less ceremony, and less
    complexity. As a result, minimal APIs are well suited to microservice architectures,
    where you have lots of small components all requiring a means of transferring
    data between each other.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API的目标是简洁。更少的代码、更少的仪式和更少的复杂性。因此，最小API非常适合微服务架构，在这种架构中，你有大量的小型组件，所有这些组件都需要一种在彼此之间传输数据的方式。
- en: Their simplicity also makes them easier to read, as a small block of code can
    take care of all the classic features of an API, such as receiving HTTP requests,
    routing, utilizing dependencies, accessing services, and sending responses to
    clients.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的简洁性也使得它们更容易阅读，因为一小块代码就可以处理API的所有经典功能，例如接收HTTP请求、路由、利用依赖项、访问服务和向客户端发送响应。
- en: One of the more admirable aspects of minimal APIs is the way they lower the
    barrier of entry to API development. They provide an alternative means of structuring
    your code that is more accessible, easier to read, and, in most cases, more performant
    owing to the decreased overhead.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API的一个值得称赞的方面是它们降低了API开发的门槛。它们提供了一种更易于访问、更易于阅读的代码结构方式，在大多数情况下，由于减少了开销，性能也更好。
- en: 'A simple API can be created using minimal APIs in just four lines of code.
    Here’s the classic *hello* *world* example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最小API，只需四行代码就可以创建一个简单的API。以下是一个经典的*hello* *world*示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Congratulations! You just created an API! Let’s dig deeper into what’s happening
    in the example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚创建了一个API！让我们更深入地了解示例中发生了什么：
- en: On the first line, we create an instance of **WebApplicationBuilder** by calling
    **CreateBuilder** and passing in any command-line arguments that we might need.
    Think of this as a blueprint for the API we’re creating. The minimal API is an
    ASP.NET core application like any other, and so it needs a pipeline for it to
    be run. **WebApplicationBuilder** provides us with this pipeline.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一行，我们通过调用**CreateBuilder**并传递可能需要的任何命令行参数来创建一个**WebApplicationBuilder**的实例。把这看作是我们创建的API的蓝图。最小API就像任何其他ASP.NET核心应用程序一样，因此它需要一个管道来运行。**WebApplicationBuilder**为我们提供了这个管道。
- en: Then, we call **Build()** on this instance we created, which results in an instance
    of **WebApplication** that we have called **app** . This is our API.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们调用我们创建的这个实例上的**Build()**，这会产生一个我们称为**app**的**WebApplication**实例。这是我们API。
- en: 'The third line maps any incoming HTTP GET requests on the root path of the
    application: **("/")** . Following this, we use a lambda statement to indicate
    the logic that should be executed when the request is received. In this case,
    we are returning the string **Hello World!** .'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三行将应用程序根路径上的任何传入HTTP GET请求映射：**("/")**。随后，我们使用lambda表达式来指示在接收到请求时应执行的逻辑。在这种情况下，我们返回字符串**Hello
    World!**。
- en: Finally, the fourth line starts the application, making it listen for incoming
    requests.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，第四行启动了应用程序，使其能够监听传入的请求。
- en: Now that you have a high-level understanding of minimal APIs, let’s compare
    them with more traditional API f ormats.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对最小API有了高层次的理解，让我们比较一下它们与更传统的API格式。
- en: Contrasting minimal APIs with traditional API approaches
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对比最小API与传统API方法
- en: The more traditional API format in .NET compared to minimal APIs is **controller-based
    APIs** . These are more commonly seen in ASP.NET **Model-View-Controller** ( **MVC**
    ) projects, or in ASP.NET web API projects. However, whether you’re building an
    MVC project or not, both API types utilize controllers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与最小API相比，.NET中更传统的API格式是**基于控制器的API**。这些在ASP.NET **模型-视图-控制器**（**MVC**）项目中或ASP.NET
    Web API项目中更为常见。然而，无论你是否在构建MVC项目，这两种API类型都使用控制器。
- en: 'Controllers are simply classes, with many responsibilities within the API,
    such as the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器只是简单的类，在API中有许多职责，如下所示：
- en: Handling incoming requests via *actions* , which are interacted with using various
    HTTP methods, such as **GET** , **POST** , **PUT** , **DELETE** , and **PATCH**
    .
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用各种 HTTP 方法（如 **GET**、**POST**、**PUT**、**DELETE** 和 **PATCH**）的 **actions**
    处理传入的请求。
- en: Processing data sent in the request via query string parameters or within the
    request body.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理请求中发送的数据，这些数据通过查询字符串参数或请求体内部发送。
- en: Interaction with data models and processing of business logic via services.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过服务与数据模型交互并处理业务逻辑。
- en: Generation of responses to calling clients. These responses could be in JSON,
    XML, or many other formats.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成对调用客户的响应。这些响应可以是 JSON、XML 或许多其他格式。
- en: Routing of requests to other areas of the application, that is, directing to
    a page at a specific URL.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将请求路由到应用程序的其他区域，即指向特定 URL 的页面。
- en: When using a controller-based API, each controller tends to be focused on one
    specific application domain. For example, you may have a controller dedicated
    to all things *employees* , and another dedicated to *inventory* . This is great
    for segregating business logic into relevant areas, but requires a lot of ceremony,
    such as the need to *inherit* from a base *controller* class, the need to add
    attributes for defining HTTP methods, or management of folder structures for each
    controller.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基于控制器的 API 时，每个控制器往往专注于一个特定的应用程序域。例如，您可能有一个专门处理所有 *employees* 的控制器，另一个专门处理
    *inventory*。这对于将业务逻辑分离到相关区域是很好的，但需要很多仪式，例如需要从基 *controller* 类继承，需要添加属性来定义 HTTP
    方法，或者为每个控制器管理文件夹结构。
- en: 'Here’s an example of an **Employee** controller. Notice the use of attributes
    for labeling the controller type ( **[ApiController]** ) and routing. Also observe
    how the class is required to derive from **ControllerBase** , along with dependency
    injection managed via a class constr uctor to get **IEmployeeRepository** , and
    this is only for *employees* ! We’d have to do it all over again in a separate
    class for our *inventory* controller, and so the ceremony continues:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 **Employee** 控制器的示例。注意控制器类型（**[ApiController]**）和路由的属性使用。同时观察类是如何需要从 **ControllerBase**
    继承的，以及通过类构造函数进行依赖注入以获取 **IEmployeeRepository**，而这仅适用于 *employees*！我们还需要在为 *inventory*
    控制器创建的单独类中再次执行所有这些操作，仪式就这样继续：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'By contrast, you can create a minimal API endpoint directly in the entry point
    of your application, with routing, dependency injection, and handlers all defined
    inline, like in the example here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，你可以在应用程序的入口点直接创建一个最小的 API 端点，其中路由、依赖注入和处理器都定义在内联，就像以下示例中那样：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, within a much simpler, smaller block of code (and without the
    need for a separate controller class), we’ve registered a service for dependency
    injection, added an HTTP **GET** endpoint, injected our service, ran the required
    logic, and retu rned a result.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在一个更简单、更小的代码块中（并且不需要单独的控制器类），我们已经注册了一个用于依赖注入的服务，添加了一个 HTTP **GET** 端点，注入了我们的服务，运行了所需的逻辑，并返回了结果。
- en: Dependency injection in minimal APIs versus controllers
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最小 API 与控制器中的依赖注入
- en: We’ll cover dependency injection later in the book, but it’s important to know
    that dependency injection as shown in the example requires more configuration
    in a controller-based API, as you typically register your dependencies at the
    startup of the application in **Startup.cs** . minimal APIs allow you to inject
    dependencies in a much lighter, straightforward way, wherever they are needed,
    without the need for **Startup.cs** . It’s also important to note that for the
    shown examples, you would need to create your own **IEmployeeRepository** for
    the code to work.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面部分介绍依赖注入，但重要的是要知道，如示例中所示，依赖注入在基于控制器的 API 中需要更多的配置，因为您通常在 **Startup.cs**
    中在应用程序启动时注册您的依赖项。最小 API 允许您以更轻量、更直接的方式在任何需要的地方注入依赖项，而不需要 **Startup.cs**。还重要的是要注意，对于所展示的示例，您需要创建自己的
    **IEmployeeRepository** 才能使代码工作。
- en: Having an overall understanding of minimal APIs and how they differ from other
    development approaches is critical for their optimal use. For more context, let
    us look at how minimal APIs fit within the context of modern software development.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对最小 API 以及它们与其他开发方法的不同之处有一个整体的理解对于它们的最佳使用至关重要。为了了解更多背景信息，让我们看看最小 API 如何适应现代软件开发的环境。
- en: The significance of minimal APIs in modern development
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小 API 在现代开发中的重要性
- en: The concept of creating more lightweight and simple APIs has been around for
    some time, but the adoption of minimal APIs has increased over the years. Flask
    and Express.js have historically promoted some elements of minimalism in API development
    within Python and Node.js, respectively, but compared to its counterparts, .NET’s
    recent entry into the market is specifically designed to exploit the advantages
    of lightweight, simple APIs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建更轻量级和简单的API的概念已经存在了一段时间，但最小化API的采用率在过去几年中有所增加。Flask和Express.js分别促进了Python和Node.js中API开发的某些最小化元素，但与竞争对手相比，.NET最近进入市场是专门设计来利用轻量级、简单API的优势。
- en: Now that minimal APIs have arrived and are being used in mainstream development
    projects, developers are enjoying the benefits of not having to perform lots of
    setup and configuration. They can have a working API up and running in two minutes
    and deploy it to the cloud in another two. This provides phenomenal advantages
    for industries in which getting software to market quickly is critical to success.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着最小化API的到来并在主流开发项目中得到应用，开发者们正在享受无需进行大量设置和配置的好处。他们可以在两分钟内拥有一个可工作的API并运行它，然后在另外两分钟内将其部署到云端。这对于快速将软件推向市场对成功至关重要的行业来说提供了巨大的优势。
- en: In addition, the APIs you write can take advantage of .NET’s mature, cross-platform
    ecosystem, with robust libraries and off-the-shelf security solutions for request
    validation, **cross-site request forgery** ( **CSRF** ) protection, and authorization.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您编写的API可以利用.NET成熟的跨平台生态系统，其中包括强大的库和现成的安全解决方案，用于请求验证、**跨站请求伪造**（**CSRF**）保护和授权。
- en: So far, we have taken a generic look at minimal APIs and their place within
    modern software development. Moving forward, we are going to start configuring
    our environment for building minimal API projects. As with most project setups,
    the first things to be configured are the tools and dependencies. Follow the steps
    in the next section to start preparing your development environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经对最小化API及其在现代软件开发中的位置进行了通用的探讨。接下来，我们将开始配置我们的环境以构建最小化API项目。与大多数项目设置一样，首先要配置的是工具和依赖项。按照下一节中的步骤开始准备您的开发环境。
- en: Installing required tools and dependencies
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需工具和依赖项
- en: For us to begin working with minimal APIs, we need to install some tools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用最小化API，我们需要安装一些工具。
- en: Let us start by installing the .NET 9.0 SDK. Navigate to Microsoft’s .NET SDK
    downloads page at [https://dotnet.microsoft.com/en-us/download/dotnet](https://dotnet.microsoft.com/en-us/download/dotnet)
    . (This can be skipped if you already have the SDK installed.)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装.NET 9.0 SDK开始。导航到微软.NET SDK下载页面[https://dotnet.microsoft.com/en-us/download/dotnet](https://dotnet.microsoft.com/en-us/download/dotnet)。（如果您已经安装了SDK，可以跳过此步骤。）
- en: 'At the time of writing, the SDK is available by doing the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，SDK可以通过以下步骤获得：
- en: Choos e the appropriate build for your operating system and system architecture.
    For example, if you are running 64-bit Windows, you would download **x64** . Likewise,
    if you were running a Mac with an ARM CPU, you would select **Arm64** next to
    **macOS** . Linux tends to be a little different because a package manager is
    used to obtain the SDK.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适合您操作系统和系统架构的适当构建版本。例如，如果您正在运行64位Windows，您将下载**x64**。同样，如果您正在运行带有ARM CPU的Mac，您将在**macOS**旁边选择**Arm64**。Linux通常有些不同，因为使用包管理器来获取SDK。
- en: 'If you are a Linux user, follow the relevant Microsoft documentation for your
    specific Linux distribution:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您是Linux用户，请遵循针对您特定Linux分发的相关微软文档：
- en: '![Figure 1.1: Choosing the right installer](img/B20968_01_01.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1：选择正确的安装程序](img/B20968_01_01.jpg)'
- en: 'Figure 1.1: Choosing the right installer'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：选择正确的安装程序
- en: 'Before we move on, let us quickly differentiate between installers and binaries.
    When software is added to a system, it usually consists of multiple files containing
    code to be executed when the program runs. These files are binaries: libraries
    or modules of code that make up the overall application. An installer automatically
    places all these components in the relevant locations on the host system. Because
    binaries are managed by installers, if you simply download the binaries, you will
    not automatically have them placed in specific locations. The configuration that
    would normally be orchestrated by an installer will not have taken place. This
    is sometimes necessary if you want to configure an application differently from
    how an installer would normally do it.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们快速区分安装程序和二进制文件。当软件被添加到系统中时，它通常包含多个文件，这些文件包含在程序运行时执行的代码。这些文件是二进制文件：构成整体应用程序的库或代码模块。安装程序会自动将这些组件放置在宿主系统上的相关位置。由于二进制文件由安装程序管理，如果您仅下载二进制文件，它们不会自动放置在特定位置。通常由安装程序执行的配置将不会发生。如果您想以不同于安装程序通常的方式配置应用程序，这有时是必要的。
- en: When you download .NET SDKs from Microsoft’s website, you usually get the choice
    between downloading an installer or a binary. The simplest option is to use an
    installer, as this will configure your .NET development environment for you automatically.
    It is the version used in examples shown in this book and I recommend you use
    it also.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从Microsoft的网站下载.NET SDK时，您通常可以选择下载安装程序或二进制文件。最简单的选项是使用安装程序，因为它会自动为您配置.NET开发环境。这是本书中示例所使用的版本，我也推荐您使用它。
- en: Once the installer has downloaded, open it and follow the prompts. You will
    need administrator permissions to install the SDK.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装程序下载完成，打开它并按照提示操作。您需要管理员权限来安装SDK。
- en: '![Figure 1.2: The .NET SDK installer](img/B20968_01_02.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2：.NET SDK安装程序](img/B20968_01_02.jpg)'
- en: 'Figure 1.2: The .NET SDK installer'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：.NET SDK安装程序
- en: Now that we have the SDK installed, it’s time to install Visual Studio (on Windows)
    or Visual Studio Code (on macOS or Linux). Either application can be obtained
    from the Visual Studio website at [https://visualstudio.microsoft.com/downloads](https://visualstudio.microsoft.com/downloads)
    .
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了SDK，是时候安装Visual Studio（在Windows上）或Visual Studio Code（在macOS或Linux上）了。您可以从Visual
    Studio网站[https://visualstudio.microsoft.com/downloads](https://visualstudio.microsoft.com/downloads)获取这两个应用程序中的任何一个。
- en: .NET versions
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: .NET版本
- en: The version of .NET shown after installation and the version of .NET shown in
    this example may differ.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后显示的.NET版本和本例中显示的.NET版本可能不同。
- en: Installing Visual Studio for Windows
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Windows上的Visual Studio
- en: 'Follow these steps to install Visual Studio on your device:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在您的设备上安装Visual Studio：
- en: On the downloads page, choose your desired Visual Studio edition. If you don’t
    have a Visual Studio license, you can select the **Community** edition.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下载页面，选择您想要的Visual Studio版本。如果您没有Visual Studio许可证，您可以选择**社区版**。
- en: Like when using the installer for the SDK, simply follow the prompts in the
    Visual Studio wizard to install to the desired location on your machine.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像使用SDK的安装程序一样，只需按照Visual Studio向导中的提示操作，将其安装到您的机器上的目标位置。
- en: You will be prompted to choose relevant workloads during the setup process.
    At a minimum, you would need to select **ASP.NET and web development** to develop
    minimal APIs. Following this, you will be asked about optional additions. None
    of these will be crucial for minimal API development, so you can simply click
    **Next** once you have passed the screen shown in *Figure 1* *.3* .
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置过程中，您将被提示选择相关的工作负载。至少，您需要选择**ASP.NET和Web开发**以开发最小API。之后，您将被告知有关可选添加的内容。这些内容对于最小API开发并非至关重要，因此一旦您通过了*图1.3*所示的屏幕，您只需简单地点击**下一步**即可。
- en: '![Figure 1.3: Workloads selection when installing Visual Studio](img/B20968_01_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3：安装Visual Studio时的工作负载选择](img/B20968_01_03.jpg)'
- en: 'Figure 1.3: Workloads selection when installing Visual Studio'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：安装Visual Studio时的工作负载选择
- en: Next, let’s install Visual Studio Code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们安装Visual Studio Code。
- en: Installing Visual Studio Code for Mac and Linux
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Mac和Linux上的Visual Studio Code
- en: 'Visual Studio Code is a free application. Simply download the relevant installer
    for your target operating system. Then, do the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是一个免费应用程序。只需下载针对您的目标操作系统的相关安装程序。然后，执行以下操作：
- en: Once downloaded, run the installer.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序。
- en: Open Visual Studio Code and click the **Extensions** button in the left ribbon
    (or use the keyboard shortcut, *Ctrl* + *Shift* + *X* ).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio Code 并点击左侧工具栏中的 **扩展** 按钮（或使用键盘快捷键，*Ctrl* + *Shift* + *X*）。
- en: In the search bar at the top of the extensions pane, search for **C#** . You
    will see an extension appear with the same name. This is the **C# for Visual Studio
    Code** extension, which you will need to program in C# in Visual Studio Code.
    Click I **nstall** .
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扩展面板顶部的搜索栏中搜索 **C#**。你会看到一个具有相同名称的扩展出现。这是 **Visual Studio Code 的 C# 扩展**，你将需要在
    Visual Studio Code 中用 C# 进行编程。点击 **安装**。
- en: '![Figure 1.4: Microsoft’s official C# extension for Visual Studio Code](img/B20968_01_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：Microsoft 为 Visual Studio Code 提供的官方 C# 扩展](img/B20968_01_04.jpg)'
- en: 'Figure 1.4: Microsoft’s official C# extension for Visual Studio Code'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：Microsoft 为 Visual Studio Code 提供的官方 C# 扩展
- en: You now have all the prerequisite tools for writing minimal APIs in .NET installed.
    Next, we will set up our development environment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经安装了编写 .NET 最小 API 所需的所有先决工具。接下来，我们将设置我们的开发环境。
- en: Configuring development environments
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置开发环境
- en: We’ll start to develop our first minimal API in the next chapter, but before
    that, let’s create the project structure needed for us to start writing code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章开始开发我们的第一个最小 API，但在那之前，让我们创建编写代码所需的项目结构。
- en: To build minimal APIs, we need to be working within an ASP.NET Core project.
    Depending on whether you are using Visual Studio or Visual Studio Code, there
    are several ways you can create this type of project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建最小 API，我们需要在一个 ASP.NET Core 项目中工作。根据你使用的是 Visual Studio 还是 Visual Studio
    Code，有几种方法可以创建此类项目。
- en: Creating a project in Visual Studio
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中创建一个项目
- en: 'Let’s begin by creating a project in Visual Studio:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Visual Studio 中创建一个项目开始：
- en: Open Visual Studio.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio。
- en: The screen shown in the following figure gives you the option to search for
    the type of project you wish to create. Search for **ASP.NET Core Empty** and
    select it from the list, before clicking **Next** . (Make sure you choose the
    C# version of the template. Do not use the F# version, as this is not within the
    scope of this book.)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个图所示的屏幕为你提供了搜索你希望创建的项目类型的选项。搜索 **ASP.NET Core Empty** 并从列表中选择它，然后点击 **下一步**。（确保你选择模板的
    C# 版本。不要使用 F# 版本，因为这不在本书的范围之内。）
- en: '![Figure 1.5: Visual Studio’s new project creation screen](img/B20968_01_05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：Visual Studio 的新项目创建界面](img/B20968_01_05.jpg)'
- en: 'Figure 1.5: Visual Studio’s new project creation screen'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：Visual Studio 的新项目创建界面
- en: Give your new project a name and choose a folder location in which it should
    be saved. Then, click **Next** .
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给你的新项目命名并选择一个文件夹位置来保存它。然后，点击 **下一步**。
- en: '![Figure 1.6: Project configuration (ASP.NET Core Empty) in Visual Studio](img/B20968_01_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6：Visual Studio 中的项目配置（ASP.NET Core Empty）](img/B20968_01_06.jpg)'
- en: 'Figure 1.6: Project configuration (ASP.NET Core Empty) in Visual Studio'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：Visual Studio 中的项目配置（ASP.NET Core Empty）
- en: Choose your preferred .NET version. This book uses .NET 9, and we have just
    installed the .NET 9 SDK, so select this version from the list. **Configure for
    HTTPS** should be checked by default. This can be left checked. Finally, click
    **Create** . Your project will then be created.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你喜欢的 .NET 版本。本书使用 .NET 9，我们刚刚安装了 .NET 9 SDK，因此从列表中选择此版本。**配置 HTTPS** 应该默认选中。这可以保持选中状态。最后，点击
    **创建**。然后你的项目将被创建。
- en: Visual Studio is arguably the most used IDE for this kind of project. However,
    it is possible to create minimal API projects in newer IDEs, such as Visual Studio
    Code. Let us explore how we can set up the same project in Visual Studio Code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，Visual Studio 是此类项目最常用的 IDE。然而，在较新的 IDE 中创建最小 API 项目也是可能的，例如 Visual Studio
    Code。让我们探索如何在 Visual Studio Code 中设置相同的项目。
- en: Creating a project in Visual Studio Code
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中创建一个项目
- en: 'Next, let’s create a project in Visual Studio Code in this section:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个 Visual Studio Code 中的项目：
- en: Open Visual Studio Code and open a terminal window by clicking **Terminal**
    and then **New Terminal Window** (or use the keyboard shortcut, *Ctrl* + *Shift*
    ).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio Code，通过点击 **终端** 然后点击 **新建终端窗口**（或使用键盘快捷键，*Ctrl* + *Shift*）来打开一个终端窗口。
- en: 'Enter the following commands into the terminal window, replacing **MyProjectName**
    with the name of your project:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下命令输入到终端窗口中，将 **MyProjectName** 替换为你的项目名称：
- en: '[PRE3]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When presented with dialog boxes asking whether you want to trust the authors
    and add required assets to the project, select **Yes** .
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当出现对话框询问你是否信任作者并向项目添加所需资产时，选择 **是**。
- en: 'Both project configurations will create the same minimal API example that we
    explored earlier in the chapter, returning **Hello World!** on an HTTP **GET**
    endpoint:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种项目配置都将创建我们在本章早期探索的最小化 API 示例，在 HTTP **GET** 端点上返回 **Hello World!**：
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You now have the basic foundations of a minimal API project.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在有了最小化 API 项目的坚实基础。
- en: We can get the output from this example in Visual Studio Code and Visual Studio
    by clicking the **Play** button. This will run the project in debug mode, opening
    a browser window that, in the case of this example, simply displays **Hello World!**
    . This button is in slightly different places depending on which IDE you are using.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过点击 Visual Studio Code 和 Visual Studio 中的 **播放** 按钮来获取此示例的输出。这将以调试模式运行项目，打开一个浏览器窗口，在这个例子中，它简单地显示
    **Hello World!** 。这个按钮的位置根据你使用的 IDE 而略有不同。
- en: 'In Visual Studio Code it looks like the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，它看起来如下所示：
- en: '![Figure 1.7: Debugging the project in Visual Studio Code](img/B20968_01_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7：在 Visual Studio Code 中调试项目](img/B20968_01_07.jpg)'
- en: 'Figure 1.7: Debugging the project in Visual Studio Code'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：在 Visual Studio Code 中调试项目
- en: 'While the button in Visual Studio looks like *Figure 1* *.8* :'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '当前的 Visual Studio 中的按钮看起来像 *图 1* *.8* :'
- en: '![Figure 1.8: Debugging the project in Visual Studio](img/B20968_01_08.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8：在 Visual Studio 中调试项目](img/B20968_01_08.jpg)'
- en: 'Figure 1.8: Debugging the project in Visual Studio'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：在 Visual Studio 中调试项目
- en: Let’s recap what we learnt in this chapter!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章所学的内容！
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the role of minimal APIs in modern application
    development, and you should now have a good general understanding of their advantages.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了最小化 API 在现代应用开发中的作用，你现在应该对它们的优点有一个很好的总体理解。
- en: You learned how minimal APIs differ from controller-based APIs in .NET, and
    gained an understanding of the advantages and disadvantages of these two formats.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何将最小化 API 与基于控制器的 .NET API 区分开来，并了解了这两种格式的优缺点。
- en: You installed the basic required libraries and tools to get started on your
    journey and learned how to create a new project in Visual Studio or Visual Studio
    Code.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经安装了基本所需的库和工具，以便开始你的旅程，并学习了如何在 Visual Studio 或 Visual Studio Code 中创建新项目。
- en: The key takeaway from this chapter is that minimal APIs promote simplicity,
    high performance, and maintainability.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的关键要点是，最小化 API 促进简单性、高性能和可维护性。
- en: In the next chapter, we will start writing our first Minimal API endpoints,
    which will be able to handle various HTTP methods on different routes. We will
    minimal build responses to send back to clients and make calls to our API.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始编写我们的第一个最小化 API 端点，它将能够处理不同路由上的各种 HTTP 方法。我们将构建最小化响应并发送回客户端，以及调用我们的
    API。
