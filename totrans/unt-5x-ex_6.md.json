["```cs\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------\npublic class PingPongMotion : MonoBehaviour \n{\n  //--------------------------------\n  //This transformation\n  private Transform ThisTransform = null;\n\n  //Original position\n  private Vector3 OrigPos = Vector3.zero;\n\n  //Axes to move on\n  public Vector3 MoveAxes = Vector2.zero;\n\n  //Speed\n  public float Distance = 3f;\n  //--------------------------------\n  // Use this for initialization\n  void Awake ()\n  {\n    //Get transform component\n    ThisTransform = GetComponent<Transform>();\n\n    //Copy original position\n    OrigPos = ThisTransform.position;\n  }\n  //--------------------------------\n  // Update is called once per frame\n  void Update () \n  {\n    //Update platform position with ping pong\n    ThisTransform.position = OrigPos + MoveAxes * Mathf.PingPong(Time.time, Distance);\n  }\n  //--------------------------------\n}\n//--------------------------------\n```", "```cs\n//--------------------------------\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------\npublic class KillZone : MonoBehaviour {\n    //--------------------------------\n    //Amount to damage player per second\n    public float Damage = 100f;\n    //--------------------------------\n    void OnTriggerStay2D(Collider2D other)\n    {\n        //If not player then exit\n        if(!other.CompareTag(\"Player\"))return;\n\n        //Damage player by rate\n        if(PlayerControl.PlayerInstance!=null)\n            PlayerControl.Health -= Damage * Time.deltaTime;\n    }\n    //--------------------------------\n}\n//--------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class HealthBar : MonoBehaviour\n{\n  //Reference to this transform component\n  private RectTransform ThisTransform = null;\n\n  //Catch up speed\n  public float MaxSpeed = 10f;\n\n    void Awake()\n    {\n      //Get transform component\n      ThisTransform = GetComponent<RectTransform>();\n    }\n\n    void Start()\n    {\n      //Set Start Health\n      if(PlayerControl.PlayerInstance!=null)\n        ThisTransform.sizeDelta = new Vector2(Mathf.Clamp(PlayerControl.Health,0,100),ThisTransform.sizeDelta.y);\n    }\n\n    // Update is called once per frame\n    void Update () \n    {\n      //Update health property\n      float HealthUpdate = 0f;\n\n      if(PlayerControl.PlayerInstance!=null)\n        HealthUpdate = Mathf.MoveTowards(ThisTransform.rect.width, PlayerControl.Health, MaxSpeed);\n\n        ThisTransform.sizeDelta = new Vector2(Mathf.Clamp(HealthUpdate,0,100),ThisTransform.sizeDelta.y);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------\npublic class Mover : MonoBehaviour \n{\n    //--------------------------------\n    public float Speed = 10f;\n    private Transform ThisTransform = null;\n    //--------------------------------\n    // Use this for initialization\n    void Awake() \n    {\n        ThisTransform = GetComponent<Transform>();\n    }\n    //--------------------------------\n    // Update is called once per frame\n    void Update () \n    {\n        //Update object position\n        ThisTransform.position += ThisTransform.forward * Speed * Time.deltaTime;\n    }\n    //--------------------------------\n}\n//-------------------------------- \n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//-----------------------------------------\npublic class Ammo : MonoBehaviour\n{    \n    //-----------------------------------------\n    //Damage inflicted on Player\n    public float Damage = 100f;\n\n    //Lifetime for ammo\n    public float LifeTime = 1f;\n    //-----------------------------------------\n    void Start()\n    {\n        Invoke (\"Die\", LifeTime);\n    }//-----------------------------------------\n\n    void OnTriggerEnter2D(Collider2D other)\n    {\n        //If not player then exit\n        if(!other.CompareTag(\"Player\"))return;\n\n        //Inflict damage\n        PlayerControl.Health -= Damage;\n    }\n    //-----------------------------------------\n    public void Die()\n    {\n        Destroy(gameObject);\n    }\n}\n//-----------------------------------------\n```", "```cs\n//--------------------------------\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------\npublic class CollideDestroy : MonoBehaviour\n{\n    //--------------------------------\n    //When hit objects with associated tag, then destroy\n    public string TagCompare = string.Empty;\n    //--------------------------------\n    void OnTriggerEnter2D(Collider2D other)\n    {\n        if(!other.CompareTag(TagCompare))return;\n\n        Destroy(gameObject);\n    }\n    //--------------------------------\n}\n//-------------------------------- \n```", "```cs\n//--------------------------------\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------\npublic class AmmoSpawner : MonoBehaviour \n{\n    //--------------------------------\n    //Reference to ammo prefab\n    public GameObject AmmoPrefab = null;\n\n    //Reference to transform\n    private Transform ThisTransform = null;\n\n    //Vector for time range\n    public Vector2 TimeDelayRange = Vector2.zero;\n\n    //Lifetime for ammo spawned\n    public float AmmoLifeTime = 2f;\n\n    //Ammo Speed\n    public float AmmoSpeed = 4f;\n\n    //Ammo Damage\n    public float AmmoDamage = 100f;\n    //--------------------------------\n    void Awake()\n    {\n        ThisTransform = GetComponent<Transform>();\n    }\n    //--------------------------------\n    void Start()\n    {\n        FireAmmo();\n    }\n    //--------------------------------\n    public void FireAmmo()\n    {\n        GameObject Obj = Instantiate(AmmoPrefab, ThisTransform.position, ThisTransform.rotation) as GameObject;\n        Ammo AmmoComp = Obj.GetComponent<Ammo>();\n        Mover MoveComp = Obj.GetComponent<Mover>();\n        AmmoComp.LifeTime = AmmoLifeTime;\n        AmmoComp.Damage = AmmoDamage;\n        MoveComp.Speed = AmmoSpeed;\n\n        //Wait until next random interval\n        Invoke(\"FireAmmo\", Random.Range(TimeDelayRange.x, TimeDelayRange.y));\n    }\n    //--------------------------------\n}\n//--------------------------------\n```", "```cs\n//--------------------------------\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------\n[System.Serializable]\npublic class Quest\n{\n    //Quest completed status\n    public enum QUESTSTATUS {UNASSIGNED=0,ASSIGNED=1,COMPLETE=2};\n    public QUESTSTATUS Status = QUESTSTATUS.UNASSIGNED;\n    public string QuestName = string.Empty;\n}\n//--------------------------------\npublic class QuestManager : MonoBehaviour\n{\n    //--------------------------------\n    //All quests in game\n    public Quest[] Quests;\n    private static QuestManager SingletonInstance = null;\n    public static QuestManager ThisInstance\n    {\n        get{\n                if(SingletonInstance==null)\n                {\n                    GameObject QuestObject = new GameObject (\"Default\");\n                    SingletonInstance = QuestObject.AddComponent<QuestManager>();\n                }\n                return SingletonInstance;\n            }\n    }\n    //--------------------------------\n    void Awake()\n    {\n        //If there is an existing instance, then destory\n        if(SingletonInstance)\n        {\n            DestroyImmediate(gameObject);\n            return;\n        }\n\n        //This is only instance\n        SingletonInstance = this;\n        DontDestroyOnLoad(gameObject);\n    }\n    //--------------------------------\n    public static Quest.QUESTSTATUS GetQuestStatus(string QuestName)\n    {\n        foreach(Quest Q in ThisInstance.Quests)\n        {\n            if(Q.QuestName.Equals(QuestName))\n                return Q.Status;\n        }\n\n        return Quest.QUESTSTATUS.UNASSIGNED;\n    }\n    //--------------------------------\n    public static void SetQuestStatus(string QuestName, Quest.QUESTSTATUS NewStatus)\n    {\n        foreach(Quest Q in ThisInstance.Quests)\n        {\n            if(Q.QuestName.Equals(QuestName))\n            {\n                Q.Status = NewStatus;\n                return;\n            }\n        }\n    }\n    //--------------------------------\n    //Resets quests back to unassigned state\n    public static void Reset()\n    {\n        if(ThisInstance==null)return;\n\n        foreach(Quest Q in ThisInstance.Quests)\n            Q.Status = Quest.QUESTSTATUS.UNASSIGNED;\n\n    }\n    //--------------------------------\n}\n//--------------------------------\n```", "```cs\n//--------------------------------\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.UI;\n//--------------------------------\npublic class QuestGiver : MonoBehaviour\n{\n    //--------------------------------\n    //Human readable quest name\n    public string QuestName = string.Empty;\n    //Reference to UI Text Box\n    public Text Captions = null;\n    //List of strings to say\n    public string[] CaptionText;\n    //--------------------------------\n    void OnTriggerEnter2D(Collider2D other) \n    {\n        if(!other.CompareTag(\"Player\"))return;\n\n        Quest.QUESTSTATUS Status = QuestManager.GetQuestStatus(QuestName);\n        Captions.text = CaptionText[(int) Status]; //Update GUI text\n    }\n    //--------------------------------\n    void OnTriggerExit2D(Collider2D other) \n    {\n        Quest.QUESTSTATUS Status = QuestManager.GetQuestStatus(QuestName);\n        if(Status == Quest.QUESTSTATUS.UNASSIGNED)\n            QuestManager.SetQuestStatus(QuestName, Quest.QUESTSTATUS.ASSIGNED);\n\n        if(Status == Quest.QUESTSTATUS.COMPLETE)\n            Application.LoadLevel(5); //Game completed, go to win screen\n    }\n}\n//--------------------------------\n```", "```cs\n//--------------------------------\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------\npublic class QuestItem : MonoBehaviour \n{\n    //--------------------------------\n    public string QuestName;\n    private AudioSource ThisAudio = null;\n    private SpriteRenderer ThisRenderer = null;\n    private Collider2D ThisCollider = null;\n    //--------------------------------\n    void Awake()\n    {\n        ThisAudio = GetComponent<AudioSource>();\n        ThisRenderer = GetComponent<SpriteRenderer>();\n        ThisCollider = GetComponent<Collider2D>();\n    }\n    //--------------------------------\n    // Use this for initialization\n    void Start () \n    {\n        //Hide object\n        gameObject.SetActive(false);\n\n        //Show object if quest is assigned\n        if(QuestManager.GetQuestStatus(QuestName) == Quest.QUESTSTATUS.ASSIGNED)\n            gameObject.SetActive(true);\n    }\n    //--------------------------------\n    //If item is visible and collected\n    void OnTriggerEnter2D(Collider2D other) \n    {\n        if(!other.CompareTag(\"Player\"))return;\n\n        if(!gameObject.activeSelf)return;\n\n        //We are collected. Now complete quest\n        QuestManager.SetQuestStatus(QuestName, Quest.QUESTSTATUS.COMPLETE);\n\n        ThisRenderer.enabled=ThisCollider.enabled=false;\n\n        if(ThisAudio!=null)ThisAudio.Play(); //Play sound if any attached\n    }\n    //-------------------------------\n}\n```"]