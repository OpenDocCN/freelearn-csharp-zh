- en: Chapter 7. Controlling 3D Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a character's Avatar and idle animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving your character with root motion and Blend Trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing animations with Layers and Masks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing States into Sub-State Machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming the Character Controller via script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding rigid props to animated characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Animation Events to throw an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying Ragdoll physics to a character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating the character's torso to aim a weapon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Mecanim** animation system has revolutionized how characters are animated
    and controlled within Unity. In this chapter, we will learn how to take advantage
    of its flexibility, power, and friendly and highly visual interface.
  prefs: []
  type: TYPE_NORMAL
- en: The big picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controlling a playable character with the Mecanim System might look like a complex
    task, but it is actually very straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: '![The big picture](img/1362OT_07_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully, by the end of the chapter, you will have gained at least a basic
    understanding of the Mecanim system. For a more complete overview of the subject,
    consider taking a look at Jamie Dean's *Unity Character Animation* with Mecanim,
    also published by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: An additional note—all the recipes will make use of **Mixamo** motion packs.
    Mixamo is a complete solution for character production, rigging, and animation.
    In fact, the character in use was designed with Mixamo's character creation software
    called **Fuse**, and rigged with the Mixamo **Auto-rigger**. You can find out
    more about Mixamo and their products at Unity's Asset Store ([https://www.assetstore.unity3d.com/en/#!/publisher/150](https://www.assetstore.unity3d.com/en/#!/publisher/150))
    or their website at [https://www.mixamo.com/](https://www.mixamo.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Please note that although Mixamo offers Mecanim-ready characters and animation
    clips, we will use, for the recipes in this chapter, unprepared animation clips.
    The reason is to make you more confident when dealing with assets obtained by
    other methods and sources.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a character's Avatar and idle animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A feature that makes Mecanim so flexible and powerful is the ability of quickly
    reassigning animation clips from one character to another. This is made possible
    through the use of **Avatars**, which are basically a layer between your character's
    original rig and the Unity's **Animator** system.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to configure an Avatar skeleton on a rigged
    character.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need the `MsLaser@T-Pose.fbx` and `Swat@rifle_aiming_idle.fbx`
    files, which are contained inside the `1362_07_code/character_and_clips/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To configure an Avatar skeleton, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `MsLaser@T-Pose.fbx` and `Swat@rifle_aiming_idle.fbx` files to your
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select from the **Project** view, the `MsLaser@T-Pose` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** view, under **MsLaser@T-Pose Import Settings**, activate
    the **Rig** section. Change **Animation Type** to **Humanoid**. Then, leave **Avatar
    Definition** as **Create From this Model**. Finally, click on the **Configure…**
    button.![How to do it...](img/1362OT_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inspector** view will show the newly created Avatar. Observe how Unity correctly
    mapped the bones of our character into its structure, assigning, for instance,
    the **mixamoRig:LeftForeArm** bone as the Avatar''s **Lower Arm**. We could, of
    course, reassign bones if needed. For now, just click on the **Done** button to
    close the view.![How to do it...](img/1362OT_07_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our Avatar ready, let's configure our animation for the **Idle**
    state. From the **Project** view, select the **Swat@rifle_aiming_idle** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Rig** section, change **Animation Type** to **Humanoid** and
    **Avatar Definition** to **Create From This Model**. Confirm by clicking on **Apply**.![How
    to do it...](img/1362OT_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Animations** section (to the right of the **Rig**). Select the
    **rifle_aiming_idle** clip (from the **Clips** list). The **Preview area** (at
    the bottom of the Inspector) will display the message as **No model is available
    for preview. Please** **drag a model into this Preview area**. Drag **MsLaser@T-Pose**
    to the **Preview** area to correct this.![How to do it...](img/1362OT_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With **rifle_aiming_idle** selected from the **Clips** list, check the **Loop
    Time** and **Loop Pose** options. Also, click on the **Clamp Range** button to
    adjust the timeline to the actual time of the animation clip. Then, under **Root
    Transform Rotation**, check **Bake Into Pose**, and select **Baked Upon** | **Original**.
    Under **Root Transform Position (Y)**, check **Bake Into Pose**, and select **Baked
    upon (at Start)** | **Original**. Under **Root Transform Position (XZ)**, leave
    **Bake Into Pose** unchecked, and select **Baked Upon (at Start)** | **Center
    of Mass**. Finally, click on **Apply** to confirm the changes.![How to do it...](img/1362OT_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to access animation clips and play them, we need to create a controller.
    Do this by clicking on the **Create** button from the **Project** view, and then
    selecting the **Animator Controller** option. Name it as `MainCharacter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **Animator Controller** to open the **Animator** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Animator** view, right-click on the grid to open a context menu.
    Then, select the **Create State** | **Empty** option**.** A new box named **New
    State** will appear. It will be in orange, indicating that it is the default state.![How
    to do it...](img/1362OT_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New State** and, in the **Inspector** view, change its name to `Idle`.
    Also, in the **Motion** field, choose **rifle_aiming_idle** by either selecting
    it from the list or dragging it from the **Project** view.![How to do it...](img/1362OT_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `MsLaser@T-Pose` model from the **Project** view into the **Hierarchy**
    view and place it on the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **MsLaser@T-Pose** from the **Hierarchy** view and observe its **Animator**
    component in the **Inspector** view. Then, assign the newly created **MainCharacter
    controller** to its **Controller** field.![How to do it...](img/1362OT_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play your scene to see the character correctly animated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Preparing our character for animation took many steps. First, we created its
    **Avatar**, based on the character model's original bone structure. Then, we set
    up the **animation clip** (which, as the character mesh, is stored in a `.fbx`
    file), using its own Avatar. After this, we adjusted the animation clip, clamping
    its size and making it a loop. We also baked its **Root Transform Rotation** to
    obey the original file's orientation. Finally, an **Animator Controller** was
    created, and the edited animation clip was made into its default **Animation state**.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of the Avatar is what makes Mecanim so flexible. Once you have a
    **Controller**, you can apply it to other humanoid characters, as long as they
    have an Avatar body mask. If you want to try it yourself, import `mascot.fbx`,
    which is also available inside the `charater_and_clips` folder, apply steps 3
    and 4 into this character, place it on the scene, and apply **MainCharacter**
    as its **Controller** in the **Animator** component. Then, play the scene to see
    the mascot playing the **rifle_aiming_idle** animation clip.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To read more information about the Animator Controller, check out Unity's documentation
    at [http://docs.unity3d.com/Manual/class-AnimatorController.html](http://docs.unity3d.com/Manual/class-AnimatorController.html).
  prefs: []
  type: TYPE_NORMAL
- en: Moving your character with root motion and Blend Trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mecanim animation system is capable of applying Root Motion to characters.
    In other words, it *actually* moves the character according to the animation clip,
    as opposed to arbitrarily translating the character model while playing an in-place
    animation cycle. This makes most of the Mixamo animation clips perfect for use
    with Mecanim.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of the animation system is **Blend Trees**, which can blend
    animation clips smoothly and easily. In this recipe, we will take advantage of
    these features to make our character walk/run forward and backwards, and also
    strafe right and left at different speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity package named `Character_02`, containing
    a character and featuring a basic Animator Controller. The package can be found
    inside the `1362_07_02` folder, along with the `.fbx` files for the necessary
    animation clips.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply the Root Motion to your character using **Blend Trees**, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import `Character_02.unityPackage` into a new project. Also, import `Swat@rifle_run,
    Swat@run_backwards, Swat@strafe, Swat@strafe_2, Swat@strafe_left, Swat@strafe_right,
    Swat@walking`, `and Swat@walking_backwards .fbx` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to configure our animation clips. From the **Project view**, select
    **Swat@rifle_run**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Rig** section. Change **Animation Type** to **Humanoid** and
    **Avatar Definition** to **Create From this Model**. Confirm by clicking on **Apply**.![How
    to do it...](img/1362OT_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, activate the **Animations** section (to the right of **Rig**). Select the
    **rifle_run** clip (from the **Clips** list). The **Preview area** (at the bottom
    of the **Inspector** view) will display the message as **No model is available
    for preview. Please drag a model into this Preview area**. Drag **MsLaser@T-Pose**
    onto the **Preview** area to correct this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With **rifle_run** selected from the **Clips** list, select the **rifle_run**
    clip (from the **Clips** list) and check the **Loop Time** and **Loop Pose** options.
    Also, click on the **Clamp Range** button to adjust the timeline to the actual
    time of the animation clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, under **Root Transform Rotation**, check **Bake Into Pose**, and select
    **Baked Upon (at Start)** | **Original**. Under **Root Transform Position (Y)**,
    check **Bake Into Pose**, and select **Baked Upon** | **Original**. Under **Root
    Transform Position (XZ)**, leave **Bake Into Pose** unchecked, and select **Baked
    Upon (at Start)** | **Center of Mass**. Finally, click on **Apply** to confirm
    the changes.![How to do it...](img/1362OT_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat steps 3 to 6 for each one of the following animation clips: **Swat@run_backwards**,
    **Swat@strafe**, **Swat@strafe_2**, **Swat@strafe_left**, **Swat@strafe_right**,
    **Swat@walking**, and **Swat@walking_backwards**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project view**, select the **MsLaser** prefab and drag it onto the
    **Hierarchy** view, placing it on the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Hierarchy** view, select the **MsLaser** GameObject and attach a
    **Character Controller** component to it (**menu Component** | **Physics** | **Character
    Controller**). Then, set its **Skin Width** as `0.0001`, and its **Center** as
    **X**: **0**, **Y**: **0.9**, **Z**: **0**; also change its **Radius** to **0.34**
    and its **Height** to **1.79**.![How to do it...](img/1362OT_07_11.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** **view**, open the **MainCharacter** controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top-left corner of the **Animator** view, activate the **Parameters**
    section and use the **+** sign to create three new **Parameters (Float)** named
    `xSpeed`, `zSpeed`, and `Speed`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We do have an **Idle** state for our character, but we need the new ones. Right-click
    on the gridded area and, from the context menu, navigate to **Create State** |
    **From New Blend Tree**. Change its name, from the **Inspector** view, to `Move`.![How
    to do it...](img/1362OT_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **Move** state. You will see the empty blend tree that you
    have created. Select it and, in the **Inspector** view, rename it to `Move`. Then,
    change its **Blend Type** to **2D Freeform Directional**, also setting **xSpeed**
    and **zSpeed** in the **Parameters** tab. Finally, using the **+** sign from the
    bottom of the **Motion** list, add nine new **Motion Fields**.![How to do it...](img/1362OT_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, populate the **Motion** list with the following motion clips and respective
    **Pos X** and **Pos Y** values: **run_backwards**, `0`, `-1`; **walking_backwards**,
    `0`,`-0.5`; **rifle_aiming_idle**, `0`, `0`; **walking**, `0`, `0.5`; **rifle_run**,
    `0`, `1`; **strafe**, `-1`, `0`; **strafe_left**, -`0.5`, `0`; **strafe_right**,
    `0.5`, `0`; **strafe_2**, `1`, `0`. You can populate the **Motion** list by selecting
    it from the list or, if there are more than one clip with the same name, you can
    drag it from the **Project view** onto the slot (by expanding the appropriate
    model icon).![How to do it...](img/1362OT_07_14.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the gridded area to go from the **Move** blend tree back to
    the **Base Layer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we have the `rifle_aiming_idle` Motion clip within our **Move** blend
    tree, we can get rid of the original **Idle** state. Right-click on the **Idle**
    state box and, from the menu, select **Delete**. The **Move** blend state will
    become the new default state, turning orange.![How to do it...](img/1362OT_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we must create the script that will actually transform the player's input
    into those variables that are created to control the animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project view**, create a new **C# Script** and name it as `BasicController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your script and replace everything with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and attach it to the **MsLaser** GameObject in the **Hierarchy**
    view. Then, add **Plane** (menu option **GameObject** | **3D Object** | **Plane**)
    and place it beneath the character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play your scene and test the game. You will be able to control your character
    with the arrow keys (or *WASD* keys). Keeping the *Shift* key pressed will slow
    it down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever the `BasicController` script detects any directional keys in use, it
    sets the `Speed` variable of the **Animator** state to a value higher than 0,
    changing the **Animator** state from **Idle** to **Move**. The **Move** state,
    in its turn, blends the motion clips that it was populated with, according to
    the input values for `xSpeed` (obtained from **Horizontal Axis** input, typically
    *A* and *D* keys) and `zSpeed` (obtained from **Vertical Axis** input, typically
    *W* and *S* keys). Since Mecanim is capable of applying root motion to the characters,
    our character will actually move in the resulting direction.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if *W* and *D* keys are pressed, `xSpeed` and `zSpeed` values
    will rise to 1.0\. From the **Inspector** view, it is possible to see that such
    combination will result in a blend between the motion clips called **rifle_run**
    and **strafe_2**, making the character run diagonally (front + right).
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1362OT_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our **BasicController** includes three checkboxes for more options: **Move
    Diagonally**—set as **true**, by default, which allows for blends between forward/backward
    and left/right clips; **Mouse Rotate**—set as **true**, by default, which allows
    for rotating the character with the mouse, changing their direction while moving;
    **Keyboard Rotate**—set as **false**, by default, which allows for rotating the
    character through simultaneous use of left/right and forward/backwards directional
    keys.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our blend tree used the **2D Freeform Directional Blend Type**. However, if
    we had only four animation clips (forward, backwards, left, and right), **2D Simple
    Directional** would have been a better option. Learn more on the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about Blend Trees and 2D blending from Unity''s Documentation at:
    [http://docs.unity3d.com/Manual/BlendTree-2DBlending.html](http://docs.unity3d.com/Manual/BlendTree-2DBlending.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, if you want to learn more about Mecanim Animation System, there are some
    links that you might want to check out, such as Unity''s documentation at: [http://docs.unity3d.com/Manual/AnimationOverview.html](http://docs.unity3d.com/Manual/AnimationOverview.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mecanim Example Scenes are available at Unity Asset Store at: [https://www.assetstore.unity3d.com/en/#!/content/5328](https://www.assetstore.unity3d.com/en/#!/content/5328).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mecanim Video Tutorial are available at: [http://unity3d.com/pt/learn/tutorials/topics/animation](http://unity3d.com/pt/learn/tutorials/topics/animation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing animations with Layers and Masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixing animations is a great way of adding complexity to your animated characters
    without requiring a vast number of animated clips. Using **Layers** and **Masks**,
    we can combine different animations by playing specific clips for the specific
    body parts of the character. In this recipe, we will apply this technique to our
    animated character, triggering animation clips for firing a rifle, and throwing
    a grenade with the character's upper body. We will do this while keeping the lower
    body moving or idle, according to the player's input.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `Mixing`, containing
    a basic scene that features an animated character. The package can be found inside
    the `1362_07_03` folder, along with the animation clips called `Swat@firing_rifle.fbx`
    and `Swat@toss_grenade.fbx`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To mix animations using layers and masks, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project and import the `Mixing` Unity Package. Then, from the **Project
    view**, open the **mecanimPlayground** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `Swat@firing_rifle.fbx` and `Swat@toss_grenade.fbx` files to the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to configure the animation clips. From the **Project view**, select
    the **Swat@firing_rifle** animation clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Rig** section. Change **Animation Type** to **Humanoid**, and
    **Avatar Definition** to **Create From this Model**. Confirm this by clicking
    on **Apply**.![How to do it...](img/1362OT_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, activate the **Animations** section. Select the **firing_rifle** clip (from
    the **Clips** list), click on the **Clamp Range** button to adjust the timeline,
    and check the **Loop Time** and **Loop Pose** options. Under **Root Transform
    Rotation**, check **Bake Into Pose**, and select **Baked Upon** | **Original**.
    Under **Root Transform Position (Y)**, check **Bake Into Pose**, and select **Baked
    Upon (at Start)** | **Original**. Under **Root Transform Position (XZ)**, leave
    **Bake Into Pose** unchecked. Click on **Apply** to confirm the changes.![How
    to do it...](img/1362OT_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Swat@toss_grenade** animation clip. Activate the **Rig** section.
    Then, change **Animation Type** to **Humanoid**, and **Avatar Definition** to
    **Create From this Model**. Confirm it by clicking on **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, activate the **Animations** section. Select the **toss_grenade** clip (from
    the **Clips** list), click on the button **Clamp Range** to adjust the timeline,
    and leave the **Loop Time** and **Loop Pose** options unchecked. Under **Root
    Transform Rotation**, check **Bake Into Pose**, and select **Baked Upon (at Start)**
    | **Original**. Under **Root Transform Position (Y)**, check **Bake Into Pose**,
    and select **Baked Upon (at Start)** | **Original)**. Under **Root Transform Position
    (XZ)**, leave **Bake Into Pose** unchecked. Click on **Apply** to confirm the
    changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create a Mask. From the **Project** view, click on the **Create** button
    and add an **Avatar Mask** to the project. Name it as **BodyMask**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **BodyMask** tab and, in the **Inspector** view, expand the **Humanoid**
    section to unselect the character's legs, base, and **IK** spots, turning their
    outline red.![How to do it...](img/1362OT_07_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, select the **MsLaser** character. Then, from the
    **Animator** component in the **Inspector** view, double-click on the **MainCharacter**
    controller to open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Animator** view, create a new layer by clicking on the **+** sign at
    the top-left **Layers** tab, above the **Base Layer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new layer as **UpperBody** and click on the gear icon for the settings.
    Then, change its **Weight** to `1`, and select the **BodyMask** in the **Mask**
    slot. Also, change Blending to **Additive**.![How to do it...](img/1362OT_07_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the **Animator** view, with the **UpperBody** layer selected, create
    three new empty states (by right-clicking on the gridded area and navigating to,
    from the menu, **Create State** | **Empty**). Name the default (orange) state
    **null**, and the other two as **Fire** and **Grenade**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, access the **Parameters** tab and add two new parameters of the Boolean
    type: `Fire` and `Grenade`.![How to do it...](img/1362OT_07_22.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Fire** state and, in the **Inspector** view, add the **firing_rifle**
    animation clip to the **Motion** field.![How to do it...](img/1362OT_07_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the **Grenade** state and, in the **Inspector** view, add the **toss_grenade**
    animation clip to the **Motion** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **null** state box and, from the menu, select **Make Transition**.
    Then, drag the white arrow onto the **Fire** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the arrow (it will turn blue). From the **Inspector** view, uncheck the
    **Has Exit Time** option. Then, access the **Conditions** list, click on the **+**
    sign to add a new condition, and set it as **Fire** and **true**.![How to do it...](img/1362OT_07_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, make a transition from **null** to **Grenade**. Select the arrow (it will
    turn blue). From the **Inspector** view, uncheck the **Has Exit Time** option.
    Then, access the **Conditions** list, click on the **+** sign to add a new condition,
    and set it as **Grenade** and **true**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create transitions from **Fire** to **null**, and from **Grenade** to **null**.
    Then, select the arrow that goes from **Fire** to **null** and, in the **Conditions**
    box, select the **Fire** and **false** options. Leave the **Has Exit Time** option
    checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, select the arrow that goes from **Grenade** to **null**. In the Conditions
    box, select the options `Grenade`, `false`. Leave the **Has Exit Time** option
    checked.![How to do it...](img/1362OT_07_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, select the **MsLaser** character. Locate, in the
    **Inspector** view, the **Basic Controller** component and open its script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Immediately before the end of the `Update()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script and play your scene. You will be able to trigger the **firing_rifle**
    and **toss_grenade** animations by clicking on the **fire** button and pressing
    the *F* key. Observe how the character's legs still respond to the **Move** animation
    state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the Avatar mask is created, it can be used as a way of filtering the body
    parts that would actually play the animation states of a particular layer. In
    our case, we have constrained our **fire_rifle** and **toss_grenade** animation
    clips to the upper body of our character, leaving the lower body free to play
    the movement-related animation clips, such as walking, running, and strafing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have noticed that the **UpperBody** layer has a parameter named **Blending**,
    which we have set to **Additive**. This means that animation states in this layer
    will be added to the ones from the lower layers. If changed to **Override**, the
    animation from this would override animation states from the lower layers when
    played. In our case, **Additive** helped in keeping the aim stable when firing
    while running.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on **Animation Layers** and **Avatar Body Masks**, check
    out Unity's documentation at [http://docs.unity3d.com/Manual/AnimationLayers.html](http://docs.unity3d.com/Manual/AnimationLayers.html)
    and [http://docs.unity3d.com/Manual/class-AvatarMask.html](http://docs.unity3d.com/Manual/class-AvatarMask.html).
  prefs: []
  type: TYPE_NORMAL
- en: Organizing States into Sub-state Machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever the Animator area gets too cluttered, you can always think of organizing
    your Animation States into Sub-State Machines. In this recipe, we will use this
    technique to organize animation states for turning the character. Also, since
    the provided animation clips do not include Root Motion, we will use the opportunity
    to illustrate how to overcome the lack of Root Motion via script, using it to
    turn the character 45 degrees to the left and right.
  prefs: []
  type: TYPE_NORMAL
- en: '![Organizing States into Sub-state Machines](img/1362OT_07_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `Turning`, containing
    a basic scene that features an animated character. The package can be found inside
    the `1362_07_04` folder, along with animation clips called `Swat@turn_right_45_degrees.fbx`
    and `Swat@turn_left.fbx`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply Root Motion via script, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project and import the `Turning` Unity Package. Then, from the
    **Project** view, open the **mecanimPlayground** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `Swat@turn_right_45_degrees.fbx` and `Swat@turn_left.fbx` files in
    the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to configure our animation clips. Select the **Swat@turn_left** file
    from the **Project** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Rig** section. Change **Animation Type** to **Humanoid**, and
    **Avatar Definition** to **Create From this Model**. Confirm by clicking on **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, activate the **Animations** section. Select the **turn_left** clip (from
    the **Clips** list), click on the **Clamp Range** button to adjust the timeline,
    and check the **Loop Time** option. Under **Root Transform Rotation**, check **Bake
    Into Pose**, and navigate to **Baked Upon (at Start)** | **Original**. Under **Root
    Transform Position (Y)**, check **Bake Into Pose**, and select **Baked Upon (at
    Start)** | **Original**. Under **Root Transform Position (XZ)**, leave **Bake
    Into Pose** unchecked. Click on **Apply** to confirm the changes.![How to do it...](img/1362OT_07_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 4 and 5 for **Swat@turning_right_45_degrees**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, select the **MsLaser** character. Then, from the
    **Animator** component in the **Inspector** view, open the **MainCharacter** controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top-left corner of the **Animator** view, activate the **Parameters**
    section and use the **+** sign to create the two new **Parameters (Boolean)**
    named `TurnLeft` and `TurnRight`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the gridded area. From the context menu, select **Create Sub-State
    Machine**. From the **Inspector** view, rename it `Turn`.![How to do it...](img/1362OT_07_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **Turn** sub-state machine. Right-click on the gridded area,
    select **Create State** | **Empty**, and add a new state. Rename it to `Turn Left`.
    Then, add another state named `Turn Right`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Inspector** view, populate `Turn Left` with the **turn_left** motion
    clip. Then, populate `Turn Right` with **turning_right_45_degrees**.![How to do
    it...](img/1362OT_07_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get out of the **Turn** sub-state machine back into the **Base Layer**. By right-clicking
    on each state and selecting the option **Make Transition**, create transitions
    between **Move** and **Turn Left**, and **Move** and **Turn Right**.![How to do
    it...](img/1362OT_07_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **Turn** sub-state machine. Then, create transitions from **Turn Left**
    and **Turn Right** into the **Move** state.![How to do it...](img/1362OT_07_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the arrow that goes form **Turn Right** to **(Up) Base Layer**. It will
    turn blue. From the **Inspector** view, uncheck the **Has Exit Time** option.
    Then, access the **Conditions** list, click the **+** sign to add a new condition,
    and set it as **TurnRight** and **false**.![How to do it...](img/1362OT_07_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the arrow that goes from **(Up) Base Layer** to **Turn Right**. From
    the **Inspector** view, uncheck the **Has Exit Time** option. Then, access the
    **Conditions** list, click the **+** sign to add a new condition, and set it as
    **TurnRight** and **true**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 14 and 15 with the arrows that go between **(Up) Base Layer** and
    **Turn Left**, using **TurnLeft** as a condition, this time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, select the **MsLaser** character. Then, from the
    **Inspector** view, open the script from the **BasicController** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Immediately after the `if(controller.isGrounded){` line, add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script. Then, select the **MsLaser** character and, from the **Inspector**
    view, access the **Basic Controller** component. Leave the **Move Diagonally**
    and **Mouse Rotate** options unchecked. Also, leave the **Keyboard Rotate** option
    checked. Finally, play the scene. You will be able to turn left and right by using
    the *Q* and *E* keys, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As it should be clear from the recipe, the sub-state machines work in a similar
    way to groups or folders, allowing you to encapsulate a series of state machines
    into a single entity for easier reference. States from the sub-state machines
    can be transitioned from external states, in our case, the **Move** state, or
    even from different sub-state machines.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the character's rotation, we have overcome the lack of root motion
    by using the `transform.Rotate(Vector3.up * (Time.deltaTime * -45.0f), Space.World);`
    command to make the character actually turn around when the *Q* and *E* keys are
    being held down. This command was used in conjunction with `animator.SetBool("TurnLeft",
    true);`, which triggers the right animation clip.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming the Character Controller via script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applying **Root Motion** to your character might be a very practical and accurate
    way to animate it. However, every now and then, you might need to manually control
    one or two aspects of the character movement. Perhaps you only have an in-place
    animation to work with, or maybe you want the character's movement to be affected
    by other variables. In these cases, you will need to override the root motion
    via script.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate this issue, this recipe makes use of an animation clip for jumping,
    which originally moves the character only in the Y-axis. In order to make her
    move forward or backwards while jumping, we will learn how to access the character's
    velocity to inform the jump's direction via the script.
  prefs: []
  type: TYPE_NORMAL
- en: '![Transforming the Character Controller via script](img/1362OT_07_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `Jumping`, containing
    a basic scene that features an animated character. The package can be found inside
    the `1362_07_05` folder, along with the animation clip called `Swat@rifle_jump`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply the Root Motion via script, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project and import the `Jumping` Unity Package. Then, from the
    **Project** view, open the **mecanimPlayground** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `Swat@rifle_jump.fbx` file to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to configure our animation clip. From the **Project** view, select the
    **Swat@rifle_jump** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the **Rig** section. Change **Animation Type** to **Humanoid**, and
    **Avatar Definition** to **Create From this Model**. Confirm this by clicking
    on **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, activate the **Animations** section. Select the **rifle_jump** clip (from
    the **Clips** list), click on the **Clamp Range** button to adjust the timeline,
    and check the **Loop Time** and **Loop Pose** options. Under **Root Transform
    Rotation**, check **Bake Into Pose**, and select **Baked Upon (at Start)** | **Original**.
    Under **Root Transform Position (Y)**, leave **Bake into Pose** unchecked, and
    select **Baked Upon (at Start)** | **Original**. Under **Root Transform Position
    (XZ)**, leave **Bake Into Pose** unchecked. Click on **Apply** to confirm the
    changes.![How to do it...](img/1362OT_07_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, select the **MsLaser** character. Then, from the
    **Animator** component in the **Inspector** view, open the **MainCharacter** controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top-left corner of the **Animator** view, activate the **Parameters**
    section, and use the **+** sign to create a new **Parameters (Boolean)** named
    `Jump`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the gridded area and, from the context menu, select **Create
    State** | **Empty**. Change its name, from the **Inspector** view, to `Jump`.![How
    to do it...](img/1362OT_07_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Jump** state. Then, from the **Inspector** view, populate it with
    the **rifle_jump** Motion clip.![How to do it...](img/1362OT_07_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and right-click on the **Any State**. Then, selecting the **Make Transition**
    option, create a transition from **Any State** to **Jump**. Select the transition,
    uncheck **Has Exit Time**, and use the **Jump** variable as a condition (**true**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create a transition from **Jump** to **Move**.![How to do it...](img/1362OT_07_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the transitions between **Jump** and **Move**, leaving **Has Exit
    Time** checked, and use the **Jump** variable as a condition (**false**).![How
    to do it...](img/1362OT_07_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, select the **MsLaser** character. Then, from the
    **Inspector** view, open the script from the **BasicController** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right before the `Start()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `Update()` function, find the line containing the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And add the following lines immediatly after it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a new function, following immediately before the final `}` of
    the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and play the scene. You will be able to jump around using the
    *Space* key. Observe how the character's velocity affects the direction of the
    jump.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe that once this function is added to the script, the **Apply Root Motion**
    field, in the **Animator** component, changes from a checked box to **Handled
    by Script**. The reason is that in order to override the animation clip''s original
    movement, we have placed, inside Unity''s `OnAnimatorMove()` function, a series
    of commands to move our character controller while jumping. The line of code:
    `controller.Move (deltaPosition);` basically replaces the jump''s direction from
    the original animation with the `deltaPosition` 3D Vector, which is made of the
    character''s velocity at the instant before the jump (*x* and *z*-axis) and the
    calculation between the `jumpHeight` variable and gravity force overtime (*y*-axis).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding rigid props to animated characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case you haven't included a sufficient number of props to your character
    when modeling and animating it, you might want to give her the chance of collecting
    new ones at runtime. In this recipe, we will learn how to instantiate a GameObject
    and assign it to a character, respecting the animation hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `Props`, containing
    a basic scene that features an animated character and a prefab named **badge**.
    The package can be found inside the `1362_07_06` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a rigid prop at runtime to an animated character, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project and import the `Props` Unity Package. Then, from the **Project**
    view, open the **mecanimPlayground** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Project** view, add the **badge** prop to the scene by dragging
    it onto the **Hierarchy** view. Then, make it a child of the **mixamorig:Spine2**
    transform (use the **Hierarchy** tree to navigate to **MsLaser** | **mixamorig:Hips**
    | **mixamorig:Spine** | **mixamorig:Spine1** | **mixamorig:Spine2**). Then, make
    the **badge** object visible above the character''s chest by changing its **Transform
    Position** to **X**: `-0.08`, **Y**: `0,` **Z**: `0.15`; and **Rotation** to **X**:
    `0.29`, **Y**: `0.14`, **Z**:`-13.29`.![How to do it...](img/1362OT_07_39.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a note of the **Position** and **Rotation** values, and delete the **badge**
    object from the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new **Cube** to the scene (drop-down **Create** | **3D Object** | **Cube**),
    rename it as **PropTrigger**, and change its Position to **X**: `0`, **Y**: `0.5`,
    **Z**: `2`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Inspector** view's **Box Collider** component, check the **Is Trigger**
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, create a new **C# Script** named `AddProp.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the script and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the **AddProp.cs** script to the **PropTrigger** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **PropTrigger** textbox and check out its **Add Prop** component.
    First, populate the **Prop** field with the **badge** prefab. Then, populate **Target
    Bone** with the **mixamorig:Spine2** transform. Finally, assign the **Position**
    and **Rotation** values that we have previously made a note of to the **Position
    Offset** and **Rotation Offset** fields, respectively (**Position Offset**: **X**:
    `-0.08`, **Y**: `0,` **Z**: `0.15`; **Rotation Offset**: **X**: `0.29`, **Y**:
    `0.14`, **Z**:`-13.29`).![How to do it...](img/1362OT_07_40.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the scene. Using the 'WASD' keyboard control scheme, direct the character
    to the **PropTrigger** textbox. Colliding with it will add a badge to the character.![How
    to do it...](img/1362OT_07_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once it's been triggered by the character, the script attached to **PropTrigger**
    instantiates the assigned prefab, making it a child of the bones that they have
    been "placed into". The **Position Offset** and **Rotation Offset** can be used
    to fine-tune the exact position of the prop (relative to its parent transform).
    As the props become parented by the bones of the animated character, they will
    follow and respect its hierarchy and animation. Note that the script checks for
    the preexisting props of the same name before actually instantiating a new one.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can make a similar script to remove the props. In this case, the `OnTriggerEnter`
    function will contain only the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using Animation Events to throw an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that your animated character is ready, you might want to coordinate some
    of her actions with her animation states. In this recipe, we will exemplify this
    by making the character throw an object whenever the appropriate animation clip
    reaches the right time. To do so, we will make use of **Animation Events**, which
    basically trigger a function from the animation clip's timeline. This feature,
    recently introduced to the **Mecanim** system, should feel familiar to those experienced
    with the **Add Event** feature of the classic **Animation** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Animation Events to throw an object](img/1362OT_07_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `Throwing`, containing
    a basic scene that features an animated character and a prefab named **EasterEgg**.
    The package can be found inside the `1362_07_07` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make an animated character throw an Easter egg (!), follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project and import the `Throwing` Unity Package. Then, from the
    **Project** view, open the **mecanimPlayground** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the level and press *F* on your keyboard. The character will move as if
    she is throwing something with her right hand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, create a new **C# Script** named `ThrowObject.cs.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the script and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the **ThrowObject.cs** script to the character's GameObject named **MsLaser**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **MsLaser** object. From the **Inspector** view, check out its **Throw
    Object** component. Then, populate the **Prop** field with a prefab named **EasterEgg**.
    Populate **Hand** with **mixamorig:RightHand**. Also, change **Pos Offset** to
    **X**: `0`; **Y**: `0.07`; **Z**: `0.04`. Finally, change **Force** to **X**:
    `0`; **Y**: `200`; **Z**: `500`.![How to do it...](img/1362OT_07_43.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, select the **Swat@toss_grenade** file. Then, from
    the **Inspector** view, access the **Animation** section and scroll down to the
    **Events** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Events** section. Drag the playhead to approximately **0:17 (017.9%)**
    of the animation timeline. Then, click on the button with the *marker +* icon
    to add an **Animation Event**. From the **Edit Animation Event** window, set **Function**
    as `Prepare`. Close the window.![How to do it...](img/1362OT_07_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new animation event at approximately **1:24 (057.1%)** of the animation
    timeline. This time, from the **Edit Animation Event** window, set **Function**
    as `Throw`. Close the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play your scene. Your character will now be able to throw an Easter egg when
    you press the *F* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the **toss_grenade** animation reaches the moments that we have set our
    **Events** to, the `Prepare()` and `throw()` functions are called. The former
    instantiates a prefab, now named **projectile**, into the character's hand (**Projectile
    Offset** values are used to fine-tune its position), also making it respect the
    character's hierarchy. Also, it disables the prefab's collider and destroys its
    `Rigidbody` component, provided it has one. The latter function enables the projectile's
    collider, and adds a `Rigidbody` component to it, making it independent from the
    character's hand. Finally, it adds a relative force to the projectile's `Rigidbody`
    component, so it will behave as if thrown by the character. The **Compensation
    YAngle** can be used to adjust the direction of the grenade, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Ragdoll physics to a character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Action games often make use of **Ragdoll physics** to simulate the character's
    body reaction to being unconsciously under the effect of a hit or explosion. In
    this recipe, we will learn how to set up and activate Ragdoll physics to our character
    whenever she steps in a landmine object. We will also use the opportunity to reset
    the character's position and animations a number of seconds after that event has
    occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `Ragdoll`, containing
    a basic scene that features an animated character and two prefabs, already placed
    into the scene, named **Landmine** and **Spawnpoint**. The package can be found
    inside the `1362_07_08` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply Ragdoll physics to your character, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project and import the `Ragdoll` Unity Package. Then, from the
    **Project** view, open the **mecanimPlayground** level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the animated MsLaser character and two discs: **Landmine** and
    **Spawnpoint**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, let's set up our **Ragdoll**. Access the **GameObject** | **3D Object**
    | **Ragdoll...** menu and the **Ragdoll wizard** will pop-up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assign the transforms as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Pelvis**: mixamorig:Hips'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left Hips**: mixamorig:LeftUpLeg'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left Knee**: mixamorig:LeftLeg'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left Foot**: mixamorig:LeftFoot'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right Hips**: mixamorig:RightUpLeg'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right Knee**: mixamorig:RightLeg'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right Foot**: mixamorig:RightFoot'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left Arm**: mixamorig:LeftArm'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Left Elbow**: mixamorig:LeftForeArm'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right Arm**: mixamorig:RightArm'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right Elbow**: mixamorig:RightForeArm'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Middle Spine**: mixamorig:Spine1'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Head**: mixamorig:Head'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total Mass**: 20'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strength**: 50'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1362OT_07_45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: From the **Project** view, create a new **C# Script** named `RagdollCharacter.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the script and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the **RagdollCharacter.cs** script to the **MsLaser** GameObject. Then,
    select the **MsLaser** character and, from the top of the **Inspector** view,
    change its tag to **Player**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, create a new **C# Script** named `Landmine.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the script and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the script to the **Landmine** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the scene. Using the *WASD* keyboard control scheme, direct the character
    to the **Landmine** GameObject. Colliding with it will activate the character's
    Ragdoll physics and apply an explosion force to it. As a result, the character
    will be thrown away to a considerable distance and will no longer be in the control
    of its body movements, akin to a ragdoll.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unity''s **Ragdoll Wizard** assigns, to selected transforms, the components
    `Collider`, `Rigidbody`, and `Character Joint`. In conjunction, those components
    make Ragdoll physics possible. However, those components must be disabled whenever
    we want our character to be animated and controlled by the player. In our case,
    we switch those components on and off using the `RagdollCharacter` script and
    its two functions: `ActivateRagdoll()` and `DeactivateRagdoll()`, the latter includes
    instructions to re-spawn our character in the appropriate place.'
  prefs: []
  type: TYPE_NORMAL
- en: For the testing purposes, we have also created the `Landmine` script, which
    calls `RagdollCharacter` script's function named `ActivateRagdoll()`. It also
    applies an explosion force to our ragdoll character, throwing it outside the explosion
    site.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of resetting the character's transform settings, you could have destroyed
    its GameObject and instantiated a new one over the respawn point using **Tags**.
    For more information on this subject, check Unity's documentation at [http://docs.unity3d.com/ScriptReference/GameObject.FindGameObjectsWithTag.html](http://docs.unity3d.com/ScriptReference/GameObject.FindGameObjectsWithTag.html).
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the character's torso to aim a weapon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When playing a third-person character, you might want her to aim her weapon
    at some target that is not directly in front of her, without making her change
    her direction. In these cases, you will need to apply what is called a *procedural
    animation*, which does not rely on premade animation clips, but rather on the
    processing of other data, such as player input, to animate the character. In this
    recipe, we will use this technique to rotate the character's spine by moving the
    mouse, allowing for adjustments in the character's aim. We will also use this
    opportunity to cast a ray from the character's weapon and display a crosshair
    over the nearest object on target. Please note that this approach will work with
    the cameras standing behind the third-person controlled characters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity Package named `AimPointer`, containing
    a basic scene that features a character armed with a laser pointer. The package,
    which also includes the `crossAim` sprite that is to be used as a crosshair for
    aiming, can be found inside the `1362_07_09` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project and import the `AimPointer` Unity Package. Then, from the
    **Project** view, open the **mecanimPlayground** level. You will see an animated
    character named **MsLaser** holding the **pointerPrefab** object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, create a new **C# Script** named `MouseAim.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the script and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, create a new **UI** | **Image** GameObject. Then,
    from the **Inspector** view, change its name to `crosshair`. Also, in **Rect**
    **Transform**, set its **Width** and **Height** to `16` and populate **Source
    Image** field with the **crossAim** sprite.![How to do it...](img/1362OT_07_46.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the **MouseAim.cs** script to the **MsLaser** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **MsLaser** GameObject and from the **Inspector** view's **Mouse
    Aim** component, populate the **Spine** field with **mixamorig:Spine**; the **Weapon**
    field with **pointerPrefab**; and the **Crosshair** field with the **crosshair**
    UI GameObject.![How to do it...](img/1362OT_07_47.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the scene. You will now be able to rotate the character's torso by moving
    the mouse. Even better, the crosshair GUI texture will be displayed at the top
    of the object that is being aimed at by the pointer.![How to do it...](img/1362OT_07_48.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have noticed that all the code for rotating the character's spine
    is inside the `LateUpdate` function, as opposed to the more common `Update` function.
    The reason for this is to make sure that all the transform manipulation will be
    executed after the original animation clip is played, overriding it.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the spine rotation, our script adds the horizontal and vertical speed
    of the mouse to the `xAxis` and `yAxis` float variables. These variables are then
    constrained within the specified limits, avoiding distortions to the character's
    model. Finally, the `spine` object transform rotation for *x* and *y* axes are
    set to `xAxis` and `yAxis` respectively. The *z*-axis is preserved from the original
    animation clip.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, our script uses a `Raycast` command to detect if there is any
    object's collider within the weapon's aim, in which case a crosshair will be drawn
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since this recipe's script was tailored for cameras standing behind the third-person
    controlled characters, we have included a more generic solution to the problem—in
    fact, a similar approach to the one presented in *Unity 4.x Cookbook*, *Packt
    Publishing*. An alternate script named `MouseAimLokkAt`, which can be found inside
    the `1362_07_09` folder, starts by converting our bi-dimensional mouse cursor
    screen's coordinates to the three-dimensional world space coordinates (stored
    in a `point` variable). Then, it rotates the character's torso towards the *point*
    location, using the `LookAt()` command to do so. Additionally, it makes sure that
    the spine does not extrapolate `minY` and `maxY` angles, otherwise causing distortions
    to the character model. Also, we have included a `Compensation YAngle` variable
    that makes it possible for us to fine-tune the character's alignment with the
    mouse cursor. Another addition is the option to freeze the X-axis rotation, in
    case you just want the character to rotate the torso laterally, but not look up
    or down. Again, this script uses a `Raycast` command to detect objects in front
    of the weapon's aim, drawing a crosshair on the screen when they are present.
  prefs: []
  type: TYPE_NORMAL
