- en: Using Tools to Write Better Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*, coding can be considered an art, but writing understandable
    code is surely more like philosophy. In the aforementioned chapter, we discussed
    practices that you, as a software architect, need for your developers. In this
    chapter, we will describe the techniques and tools for code analysis, so you have
    well-written code for your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying well-written code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the tools that can be used in the process to make things easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A book use case—implementing code inspection before publishing the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will be able to define which tools you are going
    to incorporate into your software development life cycle to enable code analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires Visual Studio 2017 or the 2019 free Community Edition
    or better. You will find the sample code for this chapter at [https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch16](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch16).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying a well-written code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not easy to define whether a code is well-written or not. The best practices
    described in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best Practices
    in Coding C# 8*, can certainly guide you as a software architect to define a standard
    for your team. But even with a standard, mistakes will happen and you will probably
    find them only after the code is in production. The decision to refactor code
    in production just because it does not follow all the standards you define is
    not an easy one to take, especially if this code is working properly. Some people
    conclude that a well-written code is one that works well in production. However,
    this surely can cause damage to the software's life, since developers can be inspired
    by that not-standard code.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, you—as a software architect—need to find ways to anticipate
    the lack of application of the coding standard you defined. Luckily, nowadays,
    we have many options for tools that can help us with this task. They are considered the
    automation of static code analysis; this technique is seen as a great opportunity
    to improve the software developed and to help the developers.
  prefs: []
  type: TYPE_NORMAL
- en: The reason your developers will evolve with code analysis is that you start
    to disseminate knowledge between them during code inspections. The tools that
    we have now have the same purpose. Better than that, with Roslyn they do this
    task while you are writing the code. Roslyn is the compiler platform for .NET,
    and it enables you to develop some tools for analyzing code. These analyzers can
    check style, quality, design, and other issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, look at the following code. It does not make any sense, but you
    can see that there are some mistakes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The idea of this code is to show you the power of some tools to improve the
    code you are delivering. Let's check each of them in the next topic, including
    how to set up them.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and applying tools that can evaluate C# code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The evolution of code analysis in Visual Studio is continuous. This means that
    Visual Studio 2019 certainly has more tools for this purpose than Visual Studio
    2017, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the issues that you (as a software architect) need to deal with is the
    *coding style of the team*. This certainly results in a better understanding of
    the code. For instance, if you go to *Visual Studio Menu | Tools | Options*, you
    will find ways to set up how to deal with different code style patterns, and it
    even indicates a bad coding style as an error in the Code Style option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48eb0404-e3c0-4b69-9b57-66271bda3e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For instance, the preceding screenshot suggests that Avoid unused parameters
    were considered an error. After this change, the result of the compilation of
    the same code presented at the beginning of the chapter was different, as you
    can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ea8d20a-4244-4630-bd72-3b963c7a8866.png)'
  prefs: []
  type: TYPE_IMG
- en: You can export your coding style configuration and attach it to your project
    so it will follow the rules you have defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good tool that Visual Studio 2019 provides is **Analyze and Code Cleanup**.
    In this tool, you are able to set up some code standards that can be cleaned from
    your code using the tool. For instance, in the following screenshot, it was set
    to remove unnecessary code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12335399-998f-491a-8ad6-1a19fb2a9753.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The way you run the code cleanup is by selecting it in the Solution Explorer
    area, as you can see in the following screenshot. This process will run in all
    the code files you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7becc52-bd75-441d-9830-4ac3e6abe935.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After solving the errors indicated by the Code Style and Code Cleanup tools,
    the sample code we are working on has some minimal simplifications, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is worth mentioning that the preceding code has many improvements that need
    to be. Beyond that, Visual Studio enables additional tools for the IDE by installing
    extensions to it. These tools can help you to improve your code quality since
    some of them were built to do code analysis. This section will list some free
    options so that you can decide the one that best fits your needs. There are certainly
    other options and even paid ones. The idea here is not to indicate a specific
    tool but to give you an idea of their abilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install these extensions, you will need to find the menu on Visual Studio.
    Here, you have a screenshot of the Extension Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8599d004-6a0f-4dd5-9df4-8b67cb8f7c9e.png)'
  prefs: []
  type: TYPE_IMG
- en: There are many other cool extensions that can improve the productivity and quality
    of your code and solution. Do a search for them in this manager.
  prefs: []
  type: TYPE_NORMAL
- en: After you select the extension that will be installed, you will need to restart
    Visual Studio. Most of them are easy to identify after installation since they
    modify the behavior of the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Applying extension tools to analyze code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although the sample code delivered after the Code Style and Code Cleanup tools
    is better than the one we presented at the beginning of the chapter, it is clearly
    far from the best practices discussed in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*. In the next sections, you will be able to check the
    behavior of three extensions that can help you evolve this code: Microsoft Code
    Analysis 2019, SonarLint for Visual Studio 2019, and Code Cracker for Visual Studio
    2017.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Microsoft Code Analysis 2019
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This extension is provided by Microsoft DevLabs and is an upgrade for the FxCop
    rules that we used to automate in the past. Basically, it has more than 100 rules
    for detecting problems in the code as you type it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, just by enabling the extension and rebuilding the small sample
    we are using in this chapter, Code Analysis found a new issue to solve, as you
    can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1dbc1824-4293-436f-8684-e25bbdd53f00.png)'
  prefs: []
  type: TYPE_IMG
- en: It is worth mentioning that we discussed the usage of empty `try-catch` statements
    as an anti-pattern in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*. So, it would be really good for the health of the code
    if this kind of problem could be exposed like this.
  prefs: []
  type: TYPE_NORMAL
- en: Applying SonarLint for Visual Studio 2019
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SonarLint is an open source initiative from the Sonar Source community to detect
    bugs and quality issues while you code. There is support for C#, VB .NET, C, C++,
    and JavaScript. The great thing about this extension is that it comes with explanations
    to resolve detected issues, and that is why we say developers learn how to code
    well while using these tools. Check out the following screenshot with the analysis
    made in the sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ea4fa63-d881-422b-b74d-3890dd2583f3.png)'
  prefs: []
  type: TYPE_IMG
- en: We can check that this extension was able to point other mistakes and, as they
    promise, there is an explanation for each warning. This is really useful not only
    for detecting problems but for training developers in good coding practices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Code Cracker for Visual Studio 2017 as a helper to write better code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code Cracker is another tool with the same idea of analyzing code using Roslyn.
    It is an initiative of some Microsoft MVPs and it is open source, too. According
    to Visual Studio Marketplace, more people are using this tool than any other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8461715-bc09-4a45-b7ee-aaf9f85e0edf.png)'
  prefs: []
  type: TYPE_IMG
- en: It is worth mentioning that there are new rules detected in this tool that were
    not found in the other tools. The reason why there are differences between the
    code analysis from one extension to others is that probably the rules programmed
    were not the same.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the final code after analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the analysis of the three extensions, we have finally solved all the
    issues presented. We can check the final code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the preceding code is not only easier to understand, it is safer
    and is enabled to consider different paths of programming since the default for
    the `switch-case` was programmed. This pattern was discussed in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*, too, which concludes that best practices can be easily
    followed using one (or all) of the extensions mentioned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Use case – evaluating the C# code before publishing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](bc26065f-b001-4123-9524-3bbfa87bfadd.xhtml), *Documenting Requirements
    with Azure DevOps*, we created the WWTravelClub repository in the platform. As
    we saw there, Azure DevOps enables continuous integration, and this can be really
    useful. In this section, we will discuss more reasons why the DevOps concept and
    the Azure DevOps platform are so useful.
  prefs: []
  type: TYPE_NORMAL
- en: For now, the only thing we would like to introduce is the possibility of analyzing
    code after it is committed by the developers but has not yet been published. Nowadays,
    in a SaaS world for application life cycle tools, this is only possible thanks
    to some of the SaaS code analysis platforms that we have. The use case will use
    Sonar Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sonar Cloud is free for open source code and can analyze code stored in GitHub,
    Bitbucket, and Azure DevOps. The registration needs a user for these platforms.
    As soon as you log in, you can follow the steps described in the following article
    to create the connection between your Azure DevOps and Sonar Cloud: [https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting up the connection between your project in Azure DevOps and Sonar
    Cloud, you will have a build pipeline like the one that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8f416cf-5b49-4049-86a7-3d3473ea33c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is worth mentioning that C# projects do not have a GUID number, and this
    is required by Sonar Cloud. You can easily generate one using this link ([https://www.guidgenerator.com/](https://www.guidgenerator.com/)),
    and it will need to be placed as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d65f12f2-601a-47fb-9fae-b3f63380b166.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as you finish the build, the result of code analysis will be presented
    in Sonar Cloud, as you can see in the next screenshot. If you want to navigate
    down to this project, you can visit: [https://sonarcloud.io/dashboard?id=WWWTravelClub](https://sonarcloud.io/dashboard?id=WWWTravelClub):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e05a3661-fb2d-48c8-a8f5-1a239b7557c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, by this time, the code analyzed is not in the release yet. So this can
    be really useful for getting the next step of quality before releasing your system.
    You can use this approach as a reference for automating code analysis during committal.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presented tools that can be used to apply the best practices of
    coding described in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*. We looked at the Roslyn compiler, which enables code
    analysis at the same time the developer is coding, and we looked at the use case—evaluating
    the C# code before publishing the application, which implements code analysis
    during the Azure DevOps building process using Sonar Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you apply to your projects everything you have learned in this chapter,
    the code analysis will give you the opportunity to improve the quality of the
    code you are delivering to your customer. This is a very important role of a software
    architect.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be deploying your application with Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can software be described as well-written code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Roslyn?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the importance of code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does Roslyn help in code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are Visual Studio extensions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the extension tools presented for code analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are some websites where you will find more information on the topics
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=GiovanniBassi-MVP.CodeCrackerforC](https://marketplace.visualstudio.com/items?itemName=GiovanniBassi-MVP.CodeCrackerforC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup](https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.guidgenerator.com/](https://www.guidgenerator.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
