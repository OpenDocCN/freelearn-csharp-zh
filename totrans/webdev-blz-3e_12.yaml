- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging the Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at debugging. The debugging experience
    of Blazor is a good one; hopefully, you haven’t gotten stuck earlier on in the
    book and had to jump to this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging code is an excellent way to solve bugs, understand the workflow, or
    look at specific values. Blazor has three different ways to debug code, and we
    will look at each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Making things break
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Blazor Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Blazor WebAssembly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Blazor WebAssembly in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have followed the previous chapters or use the `Chapter11` folder
    as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter’s end result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter12).
  prefs: []
  type: TYPE_NORMAL
- en: If you are jumping into this chapter using the code from GitHub, make sure you
    have added `Auth0` account information in the settings files. You can find the
    instructions in *Chapter 8*, *Authentication and Authorization*.
  prefs: []
  type: TYPE_NORMAL
- en: To debug something, we should first make something break!
  prefs: []
  type: TYPE_NORMAL
- en: Making things break
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Edsger W. Dijkstra once said,
  prefs: []
  type: TYPE_NORMAL
- en: '*“If debugging is the process of removing software bugs, then programming must
    be the process of putting them in.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is definitely true in this section because we will add a page that will
    throw an exception:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `SharedComponents` project, in the `Pages` folder, create a new Razor
    component called `ThrowException.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the contents of the file with the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This page shows a button, and when you press it, it throws an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Great! We have our application’s Ivan Drago (he wants to break us, but we might
    just beat him with some fancy debugging).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to take a look at Blazor Server debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Blazor Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have debugged any .NET application in the past, you will feel right at
    home. Don’t worry; we will go through it if you haven’t. Debugging Blazor Server
    is just as we might expect and is the best debugging experience of the three different
    types we will cover.
  prefs: []
  type: TYPE_NORMAL
- en: I usually keep my Razor pages in a shared library, and while building my project,
    I use Blazor Server for two reasons. First, running the project is a bit faster,
    and second, the debugging experience is better.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s give it a try!
  prefs: []
  type: TYPE_NORMAL
- en: Press *F5* to start the project (this time with debugging).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the web browser, navigate to `https://localhost:portnumber/throwexception`
    (the port number may vary).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F12* to show the web browser developer tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the developer tools, click **Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Throw exception** button on our page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, Visual Studio should request focus, and it should show the exception
    as shown in *Figure 12.1*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Exception in Visual Studio ](img/B21849_12_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 12.1: Exception in Visual Studio'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *F5* to continue and switch back to the web browser. We should now be
    able to see the exception message in the developer tools, as shown in *Figure
    12.2*:![Figure 12.2 – Exception in the web browser](img/B21849_12_02.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 12.2: Exception in the web browser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we can see in *Figure 12.1* and *Figure 12.2*, we get the exception both
    in Visual Studio while debugging and also in the developer tools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This makes it quite easy to find the problem if there is an exception in an
    app in production (perish the thought) – that feature has saved us many times.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let’s try a breakpoint:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Visual Studio, open `Pages/Home.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anywhere in the `LoadPosts` method, set a breakpoint by clicking the leftmost
    border (making a red dot appear). We can also add a breakpoint by pressing *F9*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the web browser and navigate to `https://localhost:portnumber/` (the
    port number may vary).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visual Studio should now hit the breakpoint, and by hovering over variables,
    we should be able to see the current values.
  prefs: []
  type: TYPE_NORMAL
- en: Both breakpoints and exception debugging work as we might expect. Next, we will
    take a look at debugging Blazor WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Blazor WebAssembly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blazor WebAssembly can, of course, be debugged as well. There are a couple of
    things to keep in mind. Debugging `InteractiveWebAssembly`, like we are using
    in our blog, is going to work just the same as with Blazor Server. Breakpoints
    and exceptions will work just the same. However, there is an option to run Blazor
    WebAssembly as a standalone app. And that works a bit differently.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to play around with that, we need to add another project.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **MyBlog solution**, select **Add**, **New Project**…, and
    select **Blazor WebAssembly Standalone App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the project name to `BlazorWebAssemblyApp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the default values as is and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on our **BlazorWebAssemblyApp** project and select **Set as Startup
    Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Pages** folder, open `Counter.razor` and add a breakpoint on the `currentCount++`
    row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the project by pressing *F5*, and lo and behold, the breakpoint is hit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This has not always been the case, and I was actually pleasantly surprised it
    worked that well. In previous versions of .NET, you had to click on another page
    and then back to have breakpoints hit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Debugging Blazor WebAssembly is made possible by the following line of code
    in the `launchSettings.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But it is supplied for us when we create the project, so we don’t need to add
    that manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s see what happens with our exception:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy our `ThrowException.razor` file and put it in the `BlazorWebAssemblyApp/Pages`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the copied file, remove the `@rendermode` line. Since the WebAssembly project
    is all WebAssembly, we don’t need to specify render mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the web browser, navigate to `https://localhost:portnumber/throwexception`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Throw exception** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The unhandled exception won’t get hit in Visual Studio. We get the exception
    in the developer tools in the web browser, as shown in *Figure 12.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – WebAssembly error](img/B21849_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: WebAssembly error'
  prefs: []
  type: TYPE_NORMAL
- en: The debugging experience in Blazor WebAssembly is not as polished as with Blazor
    Server, but it is polished enough to get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: We have one method left to explore – debugging in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Blazor WebAssembly in the web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first debugging experience for Blazor WebAssembly was the ability to debug
    right in the web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, start the project by pressing *Ctrl* + *F5* (run without debugging).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the web browser, press *Shift* + *Alt* + *D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will get an error message with instructions on how to start the web browser
    in debug mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'I am running Edge, so the way to start Edge would be something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `port` and `user-data-dir` values will differ from the example above. Copy
    the command from your web browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Win* + *R* and paste the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new instance of Chrome or Edge will open. In this new instance, press *Shift*
    + *Alt* + *D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now see a **Sources** tab containing C# code from our project. From
    here, we can put breakpoints that will be hit and hover over variables. Make sure
    to have only this tab open in the web browser (not multiple tabs open).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The debug UI can be seen in *Figure 12.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Screenshot of the in-browser debug](img/B21849_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Screenshot of the in-browser debug UI'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging C# code in the browser is pretty amazing, but since we have been directly
    debugging in Visual Studio, I don’t see much use for this kind of debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at something that might not fall under debugging but is useful
    while developing Blazor apps.
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Visual Studio and the **dotnet CLI**, we can enable **Hot Reload**. This
    means that as soon as we make changes in our application, our Blazor app will
    automatically get reloaded, and we will (in most cases) not lose the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set this up, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, there is a small fire icon. We can use this button to trigger
    **Hot Reload** manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is only clickable when the application is running (with or without debugging).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Hot Reload on File Save** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the project by pressing *Ctrl* + *F5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the web browser, bring up the counter page by adding `/counter` to the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a change to the `/Pages/Counter.razor` file and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our web browser should now reload, and the change will be shown. At the time
    of writing, my Hot Reload did not find any changes when running in Visual Studio,
    but it did work with `dotnet watch`.
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload does save time and is pretty amazing. Not having to recompile the
    project and start up a web browser and seeing the changes in the browser just
    seconds after you save the file is simply amazing. However, there are some cases
    where our site behaves oddly, and then we need to rebuild. Therefore, you need
    to remember that if there is an unexplainable issue, you might need to build the
    project again.
  prefs: []
  type: TYPE_NORMAL
- en: 'This also works from the command line by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Hot reload gets better and better with each release. I usually run preview versions
    of Visual Studio to get the best experience, but that can also sometimes have
    its drawbacks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter looked at different ways to debug our Blazor application. There
    will always be moments when we need to step through the code to find a bug or
    see what is happening. When these moments are upon us, Visual Studio delivers
    world-class functionality to help us achieve our goals.
  prefs: []
  type: TYPE_NORMAL
- en: The nice thing is that debugging Blazor applications, whether it’s Blazor Server
    or Blazor WebAssembly, will work as expected from a Microsoft product. We get
    C# errors that are (in most cases) easy to understand and solve.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at testing our Blazor components.
  prefs: []
  type: TYPE_NORMAL
