- en: Monitoring Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务监控
- en: When something goes wrong in a system, stakeholders will want to know what has
    happened, why it has happened, any hint or clue you can give for how it might
    be fixed, and how to prevent the same problem from occurring again in the future.
    This is one of the primary uses of monitoring. However, monitoring can also do
    much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统出现问题时，利益相关者将想知道发生了什么，为什么会发生，你可以提供的任何提示或线索来修复它，以及如何防止未来再次发生相同的问题。这是监控的主要用途之一。然而，监控还能做更多。
- en: In .NET monoliths, there are multiple monitoring solutions available to choose
    from. The monitoring target is always centralized, and monitoring is certainly
    easy to set up and configure. If something breaks down we know what to look for
    and where to look for it, since only a finite number of components participate
    in a system, and they have a fairly long lifespan.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET单体应用中，有多个监控解决方案可供选择。监控目标是始终集中的，监控设置和配置当然也很容易。如果出现问题，我们知道该寻找什么以及在哪里寻找，因为只有有限数量的组件参与系统，并且它们有相当长的生命周期。
- en: 'However, microservices are distributed systems and, by nature, more complex
    than monoliths. So resource utilization and health and performance monitoring
    are quite essential in a microservice production environment. We can use this
    diagnostic piece of information to detect and correct issues, and to also spot
    potential problems and prevent them from occurring. Monitoring microservices presents
    different challenges. In this chapter, we will primarily discuss the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，微服务是分布式系统，并且从本质上讲比单体应用更复杂。因此，在微服务生产环境中，资源利用、健康和性能监控是相当关键的。我们可以使用这些诊断信息来检测和纠正问题，同时也可以发现潜在的问题并防止其发生。监控微服务面临着不同的挑战。在本章中，我们将主要讨论以下主题：
- en: The need for monitoring
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控的需求
- en: Monitoring and logging challenges in microservices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务中的监控和日志记录挑战
- en: Monitoring strategies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控策略
- en: Available tools and strategies for microservices in the .NET monitoring space
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET监控空间中可用的工具和策略
- en: Use of Azure diagnostics and application insight
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure诊断和应用程序洞察
- en: A brief overview of the ELK stack and Splunk
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELK堆栈和Splunk的简要概述
- en: 'What does monitoring really mean? There is no formal definition of monitoring; however,
    the following is appropriate:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 监控究竟意味着什么？没有正式的监控定义；然而，以下定义是合适的：
- en: '''''Monitoring provides information around the behavior of an entire system
    or different parts of a system in their operational environment. This information
    can be used for diagnosing and gaining insight into the different characteristics
    of a system.'''''
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “监控提供了关于整个系统或系统不同部分在运行环境中的行为信息。这些信息可用于诊断并深入了解系统的不同特性。”
- en: Instrumentation and telemetry
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表化和遥测
- en: A monitoring solution is dependent upon instrumentation and telemetry. So it
    is natural that when we speak about monitoring microservices, we also discuss
    instrumentation and telemetry data. Logs are nothing more than an instrumentation
    mechanism.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 监控解决方案依赖于仪表化和遥测。因此，当我们谈论监控微服务时，自然也会讨论仪表化和遥测数据。日志不过是一种仪表化机制。
- en: Instrumentation
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表化
- en: 'Now let''s look at what instrumentation is. Instrumentation is one of the ways
    through which you can add diagnostic features to applications. It can be formally
    defined as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看仪表化的含义。仪表化是你可以添加诊断功能到应用程序的一种方式。它可以正式定义为以下内容：
- en: '''''Most applications will include diagnostic features that generate custom
    monitoring and debugging information, especially when an error occurs. This is
    referred to as instrumentation and is usually implemented by adding event and
    error handling code to the application."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “大多数应用程序将包括诊断功能，生成定制的监控和调试信息，尤其是在发生错误时。这被称为仪表化，通常通过向应用程序添加事件和错误处理代码来实现。”
- en: -MSDN
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: -MSDN
- en: Under normal conditions, data from informational events may not be required,
    thus reducing the cost of storage and the transactions required to collect it.
    However, when there is an issue with the application, you have to update the application
    configuration so that the diagnostic and instrumentation systems can collect informational
    event data as well as error and warning messages to assist in isolating and fixing
    faults. It may be necessary to run the application in this extended reporting
    mode for some time if the problem appears only intermittently.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常条件下，信息事件的数据可能不需要，从而减少了存储成本和收集这些数据所需的交易成本。然而，当应用程序出现问题时，您必须更新应用程序配置，以便诊断和仪器系统可以收集信息事件数据以及错误和警告消息，以帮助隔离和修复故障。如果问题仅间歇性出现，可能需要运行应用程序在这种扩展报告模式下一段时间。
- en: Telemetry
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遥测
- en: 'Telemetry, in its most basic form, is the process of gathering information
    generated by instrumentation and logging systems. Typically, it is performed using
    asynchronous mechanisms that support massive scaling and the wide distribution
    of application services. It can be defined as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 遥测在其最基本的形式中，是收集由仪器和日志系统生成信息的流程。通常，它使用支持大规模扩展和应用程序服务的广泛分布的异步机制来执行。它可以定义为如下：
- en: '"The process of gathering remote information that is collected by instrumentation
    is usually referred to as telemetry."'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “收集由仪器收集的远程信息的流程通常被称为遥测。”
- en: -MSDN
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: -MSDN
- en: In large and complex applications, information is usually captured in a data
    pipeline and stored in a form that makes it easier to analyze and display at different
    levels of granularity. This information is used to discover trends, gain insight
    into usage and performance, and detect and isolate faults.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型且复杂的应用程序中，信息通常被捕获在数据管道中，并以便于在不同粒度级别分析和显示的形式存储。这些信息用于发现趋势，深入了解使用和性能，并检测和隔离故障。
- en: Azure has no built-in system that directly provides a telemetry and reporting
    system of this type. However, a combination of the features exposed by all the
    Azure services, Azure diagnostics, and application insights allows you to create
    telemetry mechanisms that span the range of simple monitoring mechanisms to comprehensive
    dashboards. The complexity of the telemetry mechanism you require usually depends
    on the size of the application. This is based on several factors, such as the
    number of roles or virtual machine instances, the number of ancillary services
    it uses, the distribution of the application across different data centers, and
    other related factors.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Azure没有内置的系统直接提供此类遥测和报告系统。然而，所有Azure服务公开的功能、Azure诊断和应用程序洞察的组合允许您创建跨越简单监控机制到综合仪表板的遥测机制。您所需的遥测机制的复杂性通常取决于应用程序的大小。这基于几个因素，例如角色的数量或虚拟机实例的数量，它使用的辅助服务的数量，应用程序在不同数据中心之间的分布以及其他相关因素。
- en: The need for monitoring
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控需求
- en: Microservices are complex, distributed systems. Microservice implementation
    is the backbone of any modern IT business. Understanding the internals of the
    services along with their interactions and behaviors will help you make the overall
    business more flexible and agile. The performance, availability, scale, and security
    of microservices can directly affect a business and also its revenue. Hence, monitoring
    microservices is vital. It helps us observe and manage the quality of the service
    attributes. Let's discuss the scenarios where it is required.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是复杂的分布式系统。微服务实现是任何现代IT企业的支柱。了解服务的内部结构以及它们的交互和行为将帮助您使整体业务更加灵活和敏捷。微服务的性能、可用性、可扩展性和安全性可以直接影响业务及其收入。因此，监控微服务至关重要。它帮助我们观察和管理服务属性的质量。让我们讨论需要它的场景。
- en: Health monitoring
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 健康监控
- en: With health monitoring, we monitor the health of a system and its various components
    at a certain frequency, typically a few seconds. This ensures that the system
    and its components behave as expected. With the help of an exhaustive health monitoring
    system, we can keep tabs on the overall system health, including the CPU, memory
    utilization, and so on. It might be in the form of pings or extensive health monitoring
    endpoints, which emit the health status of services along with some useful metadata
    at that point in time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过健康监控，我们以一定频率（通常是几秒）监控系统的健康状态及其各种组件。这确保了系统和其组件按预期行为。借助详尽的健康监控系统，我们可以监控整体系统健康，包括CPU、内存利用率等。这可能以ping或广泛的健康监控端点形式出现，这些端点在那一刻会发出服务的健康状态以及一些有用的元数据。
- en: For health monitoring, we can use the rate of request failures and successes;
    we can also utilize techniques such as synthetic user monitoring. We will see
    synthetic user monitoring a little later in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于健康监控，我们可以使用请求失败和成功的比率；我们还可以利用诸如合成用户监控等技术。我们将在本章稍后看到合成用户监控。
- en: The metrics for health monitoring are based on the threshold values of success
    or failure rates. If the parameter value goes beyond the configured threshold,
    an alert is triggered. It is quite possible that some preventive action to maintain
    the health of the system would be triggered due to this failure. This action could
    be restarting the service in the failure state, or provisioning some server resource.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 健康监控的指标基于成功或失败率的阈值值。如果参数值超出配置的阈值，则会触发警报。很可能由于这种失败而触发了维护系统健康的预防措施。这种措施可能是重启失败状态下的服务，或者分配一些服务器资源。
- en: Availability monitoring
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用性监控
- en: Availability monitoring is quite similar to health status monitoring, which
    we just discussed. However, the subtle difference is that in availability monitoring,
    the focus is on the availability of systems rather than a snapshot of the health
    at that point in time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性监控与刚刚讨论的健康状态监控相当相似。然而，细微的区别在于，在可用性监控中，重点是系统的可用性，而不是该时间点的健康快照。
- en: Availability of systems is dependent on various factors, such as the overall
    nature and domain of the application, services, and service dependencies as well
    as infrastructure or environment. The availability monitoring system captures
    low-level data points related to these factors and represents them so as to make
    a business-level feature available. Many times, availability monitoring parameters
    are used to track business metrics and **service-level agreements** (**SLA**).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的可用性取决于各种因素，例如应用程序的整体性质和领域、服务以及服务依赖性，以及基础设施或环境。可用性监控系统捕获与这些因素相关的低级数据点，并将它们表示出来，以便使业务级功能可用。很多时候，可用性监控参数被用来跟踪业务指标和**服务级别协议**（**SLA**）。
- en: Performance monitoring
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能监控
- en: 'The performance of a system is often measured by key performance indicators.
    Some of the key performance indicators of any large web-based system are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的性能通常通过关键性能指标来衡量。任何大型基于Web的系统的一些关键性能指标如下：
- en: The number of requests served per hour
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每小时处理的请求数量
- en: The number of concurrent users served per hour
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每小时服务的并发用户数
- en: The average processing time required by users to perform business transactions,
    for example, placing an order
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户执行业务交易（例如，下订单）所需的平均处理时间
- en: 'Additionally, performance is also gauged by system-level parameters, such as:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，性能还通过系统级参数来衡量，例如：
- en: CPU utilization
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 利用率
- en: Memory utilization
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存利用率
- en: I/O rates
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I/O 比率
- en: Number of queued messages
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 队列中的消息数量
- en: If any of these key performance indicators are not met by the system, an alert
    is raised.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统未满足任何这些关键性能指标，则会触发警报。
- en: Often, while analyzing performance issues, historical data from previous benchmarks
    captured by the monitoring system is used to troubleshoot.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在分析性能问题时，监控系统捕获的先前基准的历史数据被用来进行故障排除。
- en: Security monitoring
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全监控
- en: Monitoring systems can detect unusual data pattern requests, unusual resource
    consumption patterns, and detect attacks on the system. Specifically, in the case
    of DoS, attacks or injection attacks can be identified beforehand and teams can
    be alerted. Security monitoring also keeps audit trails of authenticated users
    and keeps a history of users who have checked in and out of the system. It also
    comes in handy for satisfying compliance requirements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 监控系统可以检测异常的数据模式请求、异常的资源消耗模式，并检测对系统的攻击。具体来说，在DoS攻击或注入攻击的情况下，可以在事先识别并通知团队。安全监控还记录了已认证用户的审计轨迹，并保存了用户进出系统的历史记录。这对于满足合规要求也很有用。
- en: Security is a cross-cutting concern of distributed systems, including microservices,
    so there are multiple ways of generating this data in the system. Security monitoring
    can get data from various tools that are not part of the system but may be part
    of the infrastructure or environment in which the system is hosted. Different
    types of logs and database entries can serve as data sources. However, this really
    depends upon the nature of the system.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是分布式系统（包括微服务）的跨切关注点，因此系统中有多种生成这些数据的方式。安全监控可以从系统之外的多种工具中获取数据，这些工具可能是系统所在的基础设施或环境的一部分。不同类型的日志和数据库条目可以作为数据源。然而，这实际上取决于系统的性质。
- en: SLA monitoring
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SLA监控
- en: Systems with SLAs basically guarantee certain characteristics, such as performance
    and availability. For cloud-based services, this is a pretty common scenario.
    Essentially, SLA monitoring is all about monitoring those guaranteed SLAs for
    the system. SLA monitoring is enforced as a contractual obligation between a service
    provider and consumer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 具有SLA的系统基本上保证某些特性，如性能和可用性。对于基于云的服务，这是一个相当常见的场景。本质上，SLA监控就是监控系统保证的SLA。SLA监控作为服务提供商和消费者之间的合同义务得到执行。
- en: It is often defined on the basis of availability, response time, and throughput.
    Data points required for SLA monitoring can come from performance endpoint monitoring
    or logging and availability of monitoring parameters. For internal applications,
    many organizations track the number of incidences raised due to server downtime.
    The action taken against these incidences' **Root Cause Analysis** (**RCA**) mitigates
    the risk of repeating those issues and helps meet the SLAs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常基于可用性、响应时间和吞吐量来定义。用于SLA监控所需的数据点可以来自性能端点监控或日志记录以及监控参数的可用性。对于内部应用，许多组织跟踪因服务器宕机而引发的事件数量。对这些事件的**根本原因分析**（RCA）行动减轻了重复这些问题的风险，并有助于满足SLA。
- en: For internal purposes, an organization might also track the number and nature
    of incidents that had caused the service to fail. Learning how to resolve these
    issues quickly or eliminate them completely helps reduce downtime and meet SLAs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内部目的，一个组织还可能跟踪导致服务失败的事件的数量和性质。学习如何快速解决这些问题或完全消除这些问题有助于减少停机时间并满足SLA。
- en: Auditing sensitive data and critical business transactions
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计敏感数据和关键业务交易
- en: For any legal obligations or compliance reasons, the system might need to keep
    audit trails of user activities in the system, and record all their data accesses
    and modifications. Since audit information is highly sensitive in nature, it might
    be disclosed only to a few privileged and trusted individuals in the system. Audit
    trails can be part of a security subsystem or separately logged. You may need
    to transfer and store audit trails in a specific format, as stated by the regulation
    or compliance specifications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何法律义务或合规原因，系统可能需要记录系统内用户活动的审计轨迹，并记录所有数据访问和修改。由于审计信息性质高度敏感，可能仅向系统中的少数特权且值得信赖的个人披露。审计轨迹可以是安全子系统的组成部分或单独记录。您可能需要按照规定或合规规范以特定格式传输和存储审计轨迹。
- en: End user monitoring
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终用户监控
- en: In end user monitoring, the usage of the features of the system and/or the overall
    system usage by end users is tracked and logged. Usage monitoring can be done
    using various user-tracking parameters, such as the features used, the time required
    to complete a critical transaction for the specified user, or even enforced quotas.
    Enforced quotas are constraints or limits put on an end user in regard to system
    usage. In general, various pay-as-you-go services use enforced quotas; for example,
    a free trial, where you can upload files only up to 25 MB. The data source for
    this type of monitoring is typically collected in terms of logs and tracking user
    behavior.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端用户监控中，跟踪和记录系统功能和/或终端用户对整体系统的使用情况。使用情况监控可以使用各种用户跟踪参数来完成，例如使用的功能、完成指定用户关键交易所需的时间，甚至强制配额。强制配额是对终端用户在系统使用方面的约束或限制。通常，各种按使用付费的服务使用强制配额；例如，免费试用，您可以上传的文件大小最多为25
    MB。此类监控的数据源通常以日志和跟踪用户行为的形式收集。
- en: Troubleshooting system failures
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除系统故障
- en: The end users of a system might experience system failures. This can be in the
    form of either a system failure or a situation where users are not able to perform
    a certain activity. These kinds of issues are monitored using system logs; if
    not, the end user will need to provide a detailed information report. Also, sometimes
    server crash dumps or memory dumps can be immensely helpful. However, in the case
    of distributed systems, it will be a bit difficult to understand the exact root
    cause of the failures.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的终端用户可能会遇到系统故障。这可能表现为系统故障或用户无法执行某些活动的情况。这类问题可以通过系统日志进行监控；如果没有，终端用户将需要提供详细的信息报告。此外，有时服务器崩溃转储或内存转储可以非常有帮助。然而，在分布式系统中，理解故障的确切根本原因将会有点困难。
- en: In many monitoring scenarios, using only one monitoring technique is not effective.
    It is better to use multiple monitoring techniques and tools for diagnostics.
    In particular, monitoring a distributed system is quite challenging and requires
    data from various sources. In addition to analyzing the situation properly and
    deciding on the action points, we must consider a holistic view of monitoring
    rather than looking into only one type of system perspective.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多监控场景中，仅使用一种监控技术是无效的。使用多种监控技术和工具进行诊断会更好。特别是，监控分布式系统相当具有挑战性，需要来自各种来源的数据。除了正确分析情况并决定行动点外，我们还必须考虑监控的整体视角，而不仅仅是关注一种系统视角。
- en: Now that we have a better idea about what needs to be done for general purpose
    monitoring, let's revisit the microservice perspective. So we will discuss the
    different monitoring challenges presented by the microservice architectural style.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对一般用途监控需要做什么有了更好的了解，让我们重新审视微服务视角。因此，我们将讨论微服务架构风格所呈现的不同监控挑战。
- en: Monitoring challenges
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控挑战
- en: Microservice monitoring presents different challenges. There will be scenarios
    where one service could depend upon another service, or a client sends a request
    to one service and the response comes from another service that would make the
    operation complex; hence scaling a microservice would be a challenging task here.
    Similarly, process implementation, let's say DevOps, would be a challenging job
    while implementing a huge enterprise microservice application. So, let's discuss
    these challenges in this section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务监控面临着不同的挑战。可能会出现一种情况，其中一个服务可能依赖于另一个服务，或者客户端向一个服务发送请求，响应来自另一个服务，这会使操作变得复杂；因此，扩展微服务在这里将是一项具有挑战性的任务。同样，在实施大型企业级微服务应用时，流程实现，比如DevOps，也会是一项具有挑战性的工作。因此，让我们在本节中讨论这些挑战。
- en: Scale
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规模
- en: One service could be dependent upon the functionality provided by various other
    microservices. This yields complexity, which is not usual in the case of .NET
    monolith systems. Instrumenting all these dependencies is quite difficult. Another
    problem that comes along with scale is the rate of change. With the advancement
    of continuous deployment and container-based microservices, the code is always
    in a deployable state. Containers only live for minutes, if not seconds. The same
    is true for virtual machines. Virtual machines have a life of around a couple
    of minutes to a couple of hours.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个服务可能依赖于由各种其他微服务提供的功能。这导致了复杂性，这在.NET单体系统中并不常见。对所有的这些依赖进行监控相当困难。随着规模的增加，另一个问题是变化率。随着持续部署和基于容器的微服务的进步，代码始终处于可部署状态。容器仅存活几分钟，如果不是几秒钟。虚拟机也是如此。虚拟机的生命周期大约是几分钟到几个小时。
- en: In such a case, measuring regular signals, such as CPU usage and memory consumption
    usage per minute, does not make sense. Sometimes, container instances might not
    even be alive for a minute. Within a minute, the container instance might have
    already been disposed of. This is one of the challenges of microservice monitoring.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，测量每分钟的常规信号，如CPU使用率和内存消耗，是没有意义的。有时，容器实例甚至可能在一分钟内就不再存活。在一分钟内，容器实例可能已经被销毁。这是微服务监控的一个挑战。
- en: DevOps mindset
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps心态
- en: Traditionally, services or systems, once deployed, are owned and cared for by
    the operational teams. However, DevOps breaks down the silos between developers
    and operations teams. It comes with lots of practices, such as continuous integration
    and continuous delivery, as well as continuous monitoring. Along with these new
    practices come new tool sets.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，服务或系统一旦部署，就由运维团队拥有和照顾。然而，DevOps打破了开发者和运维团队之间的隔阂。它带来了许多实践，如持续集成、持续交付以及持续监控。随着这些新实践的诞生，也带来了新的工具集。
- en: However, DevOps is not just a set of practices or tools; it is, more importantly,
    a mindset. It is always a difficult and slow process to change the mindset of
    people. Microservice monitoring also requires a similar mindset shift.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，DevOps不仅仅是一套实践或工具；更重要的是，它是一种心态。改变人们的心态始终是一个困难和缓慢的过程。微服务监控也需要类似的思维转变。
- en: With the emergence of autonomy of services, developer teams now have to own
    services. This also means that they have to work through and fix development issues
    as well as keep an eye on all the operational parameters and SLAs of the services.
    Development teams will not be transformed overnight just by using state-of-the-art
    monitoring tools. This is true for operational teams as well. It won't suddenly
    become a *core platform team* (or whatever fancy name you prefer) overnight.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 随着服务自主性的出现，开发团队现在必须拥有服务。这也意味着他们必须解决开发问题，并关注所有服务的运营参数和SLA。开发团队不会仅仅通过使用最先进的监控工具就一夜之间转型。这对运维团队也是如此。它不会一夜之间成为*核心平台团队*（或你喜欢的任何花哨的名字）。
- en: To make microservices successful and meaningful for organizations, developers,
    and operations, teams need to help each other understand their own pain points
    and also think in the same direction, that is, how they can deliver value to the
    business together. Monitoring cannot happen without the instrumentation of services,
    which is where developer teams can help. Likewise, alerting and setting up of
    operational metrics and running books won't happen without the operational team's
    help. This is one of the challenges in delivering microservice monitoring solutions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使微服务对组织、开发者和运维团队来说成功且有意义，团队需要互相帮助理解自己的痛点，并朝着相同的方向思考，即他们如何共同为业务创造价值。没有服务的监控，监控是无法进行的，这是开发者团队可以提供帮助的地方。同样，没有运维团队的帮助，警报和操作指标的设置以及运行手册的编写也不会发生。这是提供微服务监控解决方案中的一个挑战。
- en: Data flow visualization
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据流可视化
- en: There are a number of tools present on the market for data flow visualization.
    Some of them are AppDynamics, New Relic, and so on. These tools are capable of
    handling visualizations of 10 to, maybe, 100s of microservices. However, in larger
    settings, where there are thousands of microservices, these tools are unable to
    handle visualization. This is one of the challenges in microservice monitoring.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上存在许多用于数据流可视化的工具。其中一些包括AppDynamics、New Relic等等。这些工具能够处理多达100个甚至更多的微服务的可视化。然而，在拥有数千个微服务的大型环境中，这些工具无法处理可视化。这是微服务监控中的一个挑战。
- en: Testing of monitoring tools
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控工具的测试
- en: We trust monitoring tools with the understanding that they depict a factual
    representation of the big picture of our microservice implementation. However,
    to make sure that they remain true to this understanding, we will have to test
    the monitoring tools. This is never a challenge in monolith implementations. However,
    when it comes to microservices, visualization of microservices is required for
    monitoring purposes. This means generating fake/synthetic transactions and time
    and utilizing the entire infrastructure rather than serving the customer. Hence,
    the testing of monitoring tools is a costly affair and presents a significant
    challenge in microservice monitoring.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们信任监控工具，因为我们相信它们能够描绘出我们微服务实现的整体真实情况。然而，为了确保它们始终符合这一理解，我们必须测试监控工具。在单体应用实现中，这从来不是个挑战。然而，当涉及到微服务时，为了监控目的，需要可视化微服务。这意味着生成虚假/合成的交易和时间，并利用整个基础设施，而不是服务于客户。因此，监控工具的测试是一项成本高昂的事务，并且在微服务监控中提出了重大挑战。
- en: Monitoring strategies
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控策略
- en: In this section, we will take a look at the monitoring strategies that make
    microservices observable. It is common to implement the following or more strategies
    to create a well-defined and holistic monitoring solution.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨使微服务可观察的监控策略。通常，为了创建一个定义明确且全面的监控解决方案，会实施以下策略或更多策略。
- en: Application/system monitoring
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序/系统监控
- en: This strategy is also called a **framework-based strategy**. Here, the application,
    or in our case microservice, itself generates the monitoring information within
    the given context of execution. The application can be dynamically configured
    based on the thresholds or trigger points in the application data, which can generate
    tracing statements. It is also possible to have a probe-based framework (such
    as .NET CLR, which provides hooks to get more information) to generate monitoring
    data. So, effective instrumentation points themselves can be embedded into the
    application to facilitate this kind of monitoring. On top of this, the underlying
    infrastructure, where microservices are hosted, can also raise critical events.
    These events can be listened to and recorded by the monitoring agents present
    on the same host as that of the application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略也被称为**基于框架的策略**。在这里，应用程序，或者在我们的案例中是微服务，本身在执行上下文中生成监控信息。应用程序可以根据应用程序数据中的阈值或触发点进行动态配置，从而生成跟踪语句。也可以有一个基于探针的框架（如.NET
    CLR，它提供了获取更多信息钩子的功能）来生成监控数据。因此，有效的仪器点本身可以嵌入到应用程序中，以促进这种类型的监控。此外，微服务托管的基础设施也可以触发关键事件。这些事件可以被同一主机上的监控代理监听和记录。
- en: Real user monitoring
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实用户监控
- en: This strategy is based on a real end user's transactional flow across the system.
    While the end user is using the system in real time, the parameters related to
    response time and latency, as well as the number of errors experienced by the
    user, can be captured using it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略基于真实最终用户的系统交易流程。当最终用户实时使用系统时，可以使用它捕获与响应时间和延迟相关的参数，以及用户遇到的错误数量。
- en: This is useful for specific troubleshooting and issue resolution. With this
    strategy, the system's hotspots and bottlenecks for service interactions can be
    captured as well. It is possible to record the entire end-to-end user flow or
    transactions to replay it at a later time. The benefits of this are that these
    kinds of recorded plays can be used for troubleshooting of issues as well as for
    various types of testing purposes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于特定的故障排除和问题解决非常有用。使用这种策略，可以捕获系统在服务交互中的热点和瓶颈。有可能记录整个端到端用户流程或交易，以便稍后回放。这种记录的好处是，这些记录的播放可以用于问题的故障排除，以及各种测试目的。
- en: Semantic monitoring and synthetic transactions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义监控和合成交易
- en: The semantic monitoring strategy focuses on business transactions; however,
    it is implemented through the use of synthetic transactions. In semantic monitoring,
    as the name suggests, we try to emulate end user flows. However, this is done
    in a controlled fashion and with dummy data so you can differentiate the output
    of the flow from the actual end user flow data. This strategy is typically used
    for service dependency, health checking, and diagnostics of problems occurring
    across the system. To implement synthetic transactions, we need to be careful
    while planning the flow; also, we need to be careful enough not to stress the
    system out. Here's an example: creating fake orders for fake product catalogs
    and observing the response time and output across this whole transaction propagating
    in the system.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 语义监控策略侧重于业务交易；然而，它是通过使用合成交易来实现的。在语义监控中，正如其名称所暗示的，我们试图模拟最终用户流程。然而，这是以一种受控的方式，并使用模拟数据来完成的，这样你就可以区分流程输出与实际最终用户流程数据。这种策略通常用于服务依赖性、健康检查和系统发生问题的诊断。要实现合成交易，我们需要在规划流程时小心谨慎；同时，我们也需要足够小心，以免对系统造成压力。以下是一个例子：为假的产品目录创建假订单，并观察整个交易在系统中的传播过程中的响应时间和输出。
- en: Profiling
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: This approach is specifically focused on solving performance bottlenecks across
    the system. This approach is different from the preceding approaches. Real and
    semantic monitoring focuses on business transactions or functional aspects of
    the system and collects data around it. Rather, profiling is all about system-level
    or low-level information capture. A few of these parameters are response time,
    memory, or threads. This approach uses a probing technique in the application
    code or framework and collects data. Utilizing the data points captured during
    the profiling, the relevant DevOps team can identify the cause of the performance
    problem. Profiling using probing should be avoided in production environments.
    However, it is perfectly fine for generating call times and so on without overloading
    the system at runtime. A good example of profiling, in general, is an ASP.NET
    MVC application profiled with an ASP.NET MiniProfiler, or even with Glimpse.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法特别关注解决系统中的性能瓶颈。这种方法与先前的不同。真实和语义监控关注业务交易或系统的功能方面，并收集相关的数据。相反，分析主要关注系统级或低级信息捕获。其中一些参数包括响应时间、内存或线程。这种方法在应用程序代码或框架中使用探针技术来收集数据。利用分析期间捕获的数据点，相关的DevOps团队可以确定性能问题的原因。在生产环境中应避免使用探针进行分析。然而，在生成调用时间等数据时，不会在运行时过载系统，这是完全可行的。一般来说，分析的一个好例子是使用ASP.NET
    MiniProfiler对ASP.NET MVC应用程序进行分析，或者甚至使用Glimpse。
- en: Endpoint monitoring
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点监控
- en: With this approach, we expose one or more endpoints of a service to emit diagnostic
    information related to the service itself as well as the infrastructure parameters.
    Generally, different endpoints focus on providing different information. For example,
    one endpoint can give the health status of the service, while the other could
    provide the HTTP 500 error information that occurred in that service execution.
    This is a very helpful technique for microservices since it inherently changes
    the monitoring from being a push model to a pull model and reduces the overhead
    of service monitoring. We can scrap data from these endpoints at a certain time
    interval and build a dashboard and collect data for operational metrics.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，我们暴露一个或多个服务的端点，以发出与该服务本身以及基础设施参数相关的诊断信息。通常，不同的端点专注于提供不同的信息。例如，一个端点可以提供服务的健康状态，而另一个可以提供在该服务执行过程中发生的HTTP
    500错误信息。这对于微服务来说是一个非常有用的技术，因为它本质上将监控从推模型转变为拉模型，并减少了服务监控的开销。我们可以在一定的时间间隔内从这些端点收集数据，构建仪表板并收集操作指标数据。
- en: Logging
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录
- en: Logging is a type of instrumentation made available by the system, its various
    components, or the infrastructure layer. In this section, we will first visit
    logging challenges and then discuss strategies to reach a solution for these challenges.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是由系统、其各种组件或基础设施层提供的一种类型的仪器。在本节中，我们将首先探讨日志记录的挑战，然后讨论解决这些挑战的策略。
- en: Logging challenges
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录挑战
- en: 'We will first try to understand the problem with log management in microservices:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先尝试了解微服务中日志管理的问题：
- en: To log the information related to a system event and parameter as well as the
    infrastructure state, we will need to persist log files. In traditional .NET monoliths,
    log files are kept on the same machine where the application is deployed. In the case
    of microservices, they are hosted either on virtual machines or containers. But
    virtual machines and containers are both ephemeral, which means they do not persist
    states. In this situation, if we persist log files with virtual machines or containers,
    we will lose them. This is one of the challenges of log management in microservices.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要记录与系统事件、参数以及基础设施状态相关的信息，我们需要持久化日志文件。在传统的.NET单体中，日志文件保存在应用程序部署的同一台机器上。在微服务的情况下，它们托管在虚拟机或容器上。但虚拟机和容器都是短暂的，这意味着它们不持久化状态。在这种情况下，如果我们使用虚拟机或容器持久化日志文件，我们将丢失它们。这是微服务日志管理中的一个挑战。
- en: In the microservice architecture, there are a number of services that constitute
    a transaction. Let's assume we have an order placement transaction where service
    A, service B, and service C take part in the transaction. If, say, service B fails
    during the transaction, how are we going to understand and capture this failure
    in the logs? Not only that but more importantly, how are we going to understand
    that a specific instance of service B has failed and it was taking part in a said
    transaction? This scenario presents another challenge to microservices.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在微服务架构中，有许多服务构成了一个事务。让我们假设我们有一个订单放置事务，其中服务A、服务B和服务C参与该事务。如果，比如说，服务B在事务期间失败，我们将如何理解和捕获这个失败在日志中？不仅如此，更重要的是，我们将如何理解特定实例的服务B已经失败，并且它参与了所述事务？这种情况为微服务带来了另一个挑战。
- en: Logging strategies
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录策略
- en: So far in this section, we have discussed logging, its challenges, and why we
    should implement logging. Multiple calls at the same time are possible so when
    we implement logging, we should implement it in such a way that we know the exact
    source of the logged transaction. We would go with correlation ID for logging.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本节中，我们已经讨论了日志、其挑战以及为什么我们应该实施日志记录。同时进行多次调用是可能的，因此当我们实施日志记录时，我们应该以这种方式实施，以便我们知道已记录事务的确切来源。我们将采用关联ID进行日志记录。
- en: Logging is not related to microservices specifically; it is also important for
    monolithic applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录与微服务特定无关；它对单体应用也很重要。
- en: To implement logging in microservices, we can use the keylogging strategies
    discussed in the following sections.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要在微服务中实施日志记录，我们可以使用以下章节中讨论的关键日志记录策略。
- en: Centralized logging
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集中式日志
- en: There is a difference between centralized logging and centralized monitoring.
    In centralized logging, we log all the details about the events that occur in
    our system—they may be errors or warnings or just for informational purposes—whereas
    in centralized monitoring, we monitor critical parameters, that is, specific information.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 集中式日志和集中式监控之间存在差异。在集中式日志中，我们记录系统中发生的事件的所有详细信息——它们可能是错误或警告，也可能是为了信息目的——而在集中式监控中，我们监控关键参数，即特定信息。
- en: With logs, we can understand what has actually happened in the system or a specific
    transaction. We will have all the details about the specific transaction, such
    as why it started, who triggered it, what kind of data or resources it recorded,
    and so on. In a complex distributed system, such as microservices, this is really
    the key piece of information with which we can solve the entire puzzle of information
    flow or errors. We also need to treat timeouts, exceptions, and errors as events
    that we need to log.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过日志，我们可以了解系统中或特定事务实际上发生了什么。我们将拥有关于特定事务的所有详细信息，例如为什么它开始，谁触发了它，它记录了哪些数据或资源，等等。在一个复杂的分布式系统，如微服务中，这实际上是解决整个信息流或错误谜团的关键信息。我们还需要将超时、异常和错误视为我们需要记录的事件。
- en: The information we record regarding a specific event should also be structured,
    and this structure should be consistent across our system. So, for example, our
    structured log entry might contain level-based information to state whether the
    log entry is for information, an error, or whether it's debugged information or
    statistics that have been recorded as log entry events. The structured log entry
    must also have a date and time so we know when the event happened. We should also
    include the hostname within our structured log so that we know where exactly the
    log entry came from. We should also include the service name and the service instance
    so we know exactly which microservice made the log entry.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们记录的特定事件的信息也应结构化，并且这种结构应在我们系统中保持一致。例如，我们的结构化日志条目可能包含基于级别的信息，以说明日志条目是信息、错误，还是调试信息或已记录为日志事件事件的统计数据。结构化日志条目还必须包含日期和时间，以便我们知道事件发生的时间。我们还应在结构化日志中包含主机名，以便我们知道日志条目确实切来自哪里。我们还应包含服务名称和服务实例，以便我们知道确切是哪个微服务创建了日志条目。
- en: Finally, we should also include a message in our structured logging format,
    which is the key piece of information associated with the event. So, for example,
    for an error, this might be the call stack or details regarding the exception.
    The key thing is that we keep our structured logging format consistent. A consistent
    format will allow us to query the logging information. Then, we can basically
    search for specific patterns and issues using our centralized logging tool. Another
    key aspect of centralized logging within a microservice architecture is to make
    distributed transactions more traceable.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还应该在结构化日志格式中包含一条消息，这是与事件相关联的关键信息。例如，对于错误，这可能包括调用堆栈或异常的详细信息。关键是要保持我们的结构化日志格式一致。一致的格式将允许我们查询日志信息。然后，我们可以使用我们的集中日志工具基本搜索特定的模式和问题。在微服务架构中，集中日志的另一个关键方面是使分布式事务更具可追踪性。
- en: Using a correlation ID in logging
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在日志中使用关联ID
- en: A correlation ID is a unique ID that is assigned to every transaction. So, when
    a transaction becomes distributed across multiple services, we can follow that
    transaction across different services using the logging information. The correlation
    ID is basically passed from service to service. All services that process that
    specific transaction receive the correlation ID and pass it to the next service,
    and so on, so that they can log any events associated with that transaction to
    our centralized logs. This helps us hugely when we have to visualize and understand
    what has happened with this transaction across different microservices.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 关联ID是分配给每个事务的唯一ID。因此，当事务分布在多个服务之间时，我们可以通过日志信息跟踪该事务在不同服务之间的流动。关联ID基本上是在服务之间传递。所有处理该特定事务的服务都会接收到关联ID并将其传递给下一个服务，依此类推，这样它们就可以将任何与该事务相关的事件记录到我们的集中日志中。这在我们需要可视化和理解跨不同微服务的事务发生情况时非常有帮助。
- en: Semantic logging
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义日志
- en: '**Event Tracing for Windows** (**ETW**) is a structural logging mechanism where
    you can store a structured payload with the log entry. This information is generated
    by event listeners and may include typed metadata about the event. This is merely
    an example of semantic logging. Semantic logging passes additional data along
    with the log entry so that the processing system can get the context structured
    around the event. Hence, semantic logging is also referred to as structured logging
    or typed logging.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows事件跟踪**（**ETW**）是一种结构化日志机制，您可以在日志条目中存储结构化有效负载。这些信息由事件监听器生成，可能包括有关事件的类型化元数据。这仅仅是一个语义日志的例子。语义日志在日志条目中传递额外的数据，以便处理系统可以获取围绕事件的上下文结构。因此，语义日志也被称为结构化日志或类型化日志。'
- en: For more information, refer to [https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/event-tracing-for-windows--etw-](https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/event-tracing-for-windows--etw-)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/event-tracing-for-windows--etw-](https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/event-tracing-for-windows--etw-)
- en: As an example, an event that indicates an order was placed can generate a log
    entry that contains the number of items as an integer value, the total value as
    a decimal number, the customer identifier as a long value, and the city for delivery
    as a string value. An order monitoring system can read the payload and easily
    extract the individual values. ETW is the standard, shipped feature with Windows.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个表示订单已下的事件可以生成一个包含项目数量作为整数值、总金额作为小数值、客户标识符作为长整数值以及配送城市作为字符串值的日志条目。一个订单监控系统可以读取有效负载并轻松提取个别值。ETW
    是 Windows 的标准、内置功能。
- en: In Azure Cloud, it is possible to get your log data source from ETW. The Semantic
    Logging Application Block developed by Microsoft's patterns and practices team
    is an example of a framework that makes comprehensive logging easier. When you
    write events to the custom event source, the Semantic Logging Application Block
    detects this and allows you to write the event to other logging destinations,
    such as a disk file, database, email message, and more. You can use the Semantic
    Logging Application Block in Azure applications that are written in .NET and run
    on Azure websites, cloud services, and virtual machines.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 云中，您可以从 ETW 获取日志数据源。微软模式与实践团队开发的语义日志记录应用程序块是一个框架示例，它使全面的日志记录更容易。当您将事件写入自定义事件源时，语义日志记录应用程序块会检测到这一点，并允许您将事件写入其他日志目标，例如磁盘文件、数据库、电子邮件消息等。您可以在使用
    .NET 编写并运行在 Azure 网站上的 Azure 应用程序中使用语义日志记录应用程序块。
- en: Monitoring in Azure Cloud
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 云中的监控
- en: There is no single, off-the-shelf solution or offering in Azure, or for that
    matter any cloud provider, to the monitoring challenges presented by microservices.
    Interestingly enough, there are not too many open source tools available that
    can work with .NET-based microservices.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 或任何云提供商中，都没有针对微服务带来的监控挑战的现成解决方案或产品。有趣的是，可用的开源工具并不多，它们可以与基于 .NET 的微服务一起工作。
- en: We are utilizing Microsoft Azure Cloud and cloud services for building our microservices,
    so it is useful to look for the monitoring capability it comes with. If you are
    looking to manage approximately a couple of hundred microservices, you can utilize
    a custom monitoring solution (mostly interweaving PowerShell scripts) based on
    a Microsoft Azure-based solution.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在利用微软 Azure 云和云服务来构建我们的微服务，因此查找它所提供的监控能力是有用的。如果您需要管理大约两百个微服务，您可以使用基于微软 Azure
    的自定义监控解决方案（主要是 PowerShell 脚本交织而成）。
- en: 'We will be primarily focusing on the following logging and monitoring solutions:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主要关注以下日志和监控解决方案：
- en: 'Microsoft Azure Diagnostics: This helps in collecting and analyzing resources
    through resource and activity logs.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软 Azure 诊断：这有助于通过资源和活动日志收集和分析资源。
- en: 'Application Insights: This helps in collecting all of the telemetry data about
    our microservices and analyzing them. This is a framework-based approach for monitoring.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Application Insights：这有助于收集我们微服务的所有遥测数据并进行分析。这是一种基于框架的监控方法。
- en: 'Log Analytics: Log Analytics analyzes and displays data and provides scalable
    querying capability over collected logs.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志分析：日志分析用于分析和显示数据，并提供了对收集日志的可扩展查询能力。
- en: 'Let''s look at these solutions from a different perspective. This perspective
    will help us visualize our Azure-based microservice monitoring solution. A microservice
    is composed of the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从不同的角度来审视这些解决方案。这种视角将帮助我们可视化我们的基于 Azure 的微服务监控解决方案。一个微服务由以下部分组成：
- en: 'Infrastructure layer: A virtual machine or an application container (for example,
    Docker container)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施层：一个虚拟机或应用程序容器（例如，Docker 容器）
- en: 'Application stack layer: Constitutes the operating system, .NET CLR, and the
    microservice application code'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序堆栈层：包括操作系统、.NET CLR 和微服务应用程序代码
- en: 'Each of these layer components can be monitored as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些层组件都可以按照以下方式进行监控：
- en: 'Virtual machine: Using Azure Diagnostics Logs'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机：使用 Azure 诊断日志
- en: 'Docker containers: Using container logs and Application Insights or a third-party
    container monitoring solution, such as cAdvisor, Prometheus, or Sensu'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 容器：使用容器日志和 Application Insights 或第三方容器监控解决方案，例如 cAdvisor、Prometheus 或
    Sensu
- en: 'Windows operating system: Using Azure Diagnostics Logs and Activity Logs'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 操作系统：使用 Azure 诊断日志和活动日志
- en: 'A microservice application: Using Application Insights'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务应用程序：使用 Application Insights
- en: 'Data visualization and metric monitoring: Using Log Analytics or third-party
    solutions, such as Splunk or ELK stack'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据可视化和指标监控：使用日志分析或第三方解决方案，例如Splunk或ELK堆栈
- en: Various Azure services come with an activity ID in their log entries. This activity
    ID is a unique GUID assigned for each request, which can be utilized as a correlation
    ID during log analysis.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 各种Azure服务在其日志条目中包含一个活动ID。这个活动ID是为每个请求分配的唯一GUID，可以在日志分析期间用作关联ID。
- en: Microsoft Azure Diagnostics
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure诊断
- en: Azure diagnostics logs give us the ability to collect diagnostic data for a
    deployed microservice. We can also use a diagnostic extension to collect data
    from various sources. Azure Diagnostics is supported by web and worker roles,
    Azure virtual machines, and all Azure App services. Other Azure services have
    their own separate diagnostics.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Azure诊断日志使我们能够收集已部署微服务的诊断数据。我们还可以使用诊断扩展从各种来源收集数据。Azure诊断支持Web和Worker角色、Azure虚拟机以及所有Azure应用服务。其他Azure服务有自己的独立诊断。
- en: 'Enabling Azure diagnostics logs and exploring various settings in the Azure
    app service is easy and available as a toggle switch, as shown in the following
    screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Azure诊断日志并在Azure应用服务中探索各种设置非常简单，就像以下截图所示，它是一个切换开关：
- en: '![](img/2c18c643-fb74-4a97-a371-5427ddef4ec5.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c18c643-fb74-4a97-a371-5427ddef4ec5.png)'
- en: 'Azure diagnostics can collect data from the following sources:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Azure诊断可以从以下来源收集数据：
- en: Performance counters
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能计数器
- en: Application logs
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序日志
- en: Windows event logs
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows事件日志
- en: .NET event sources
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET事件源
- en: IIS logs
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IIS日志
- en: Manifest-based ETW
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于清单的ETW
- en: Crash dumps
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 崩溃转储
- en: Custom error logs
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义错误日志
- en: Azure diagnostic infrastructure logs
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure诊断基础设施日志
- en: Storing diagnostic data using Azure storage
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure存储存储诊断数据
- en: Azure diagnostics logs are not permanently stored. They are rollover logs, that
    is, they are overwritten by newer ones. So, if we want to use them for any analysis
    work, we have to store them. Azure diagnostics logs can be either stored in a file
    system or transferred via FTP; better still, it can be stored in an Azure storage
    container.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Azure诊断日志不是永久存储的。它们是滚动日志，即它们会被新的日志覆盖。因此，如果我们想将它们用于任何分析工作，我们必须将它们存储起来。Azure诊断日志可以存储在文件系统中，或通过FTP传输；更好的是，它们可以存储在Azure存储容器中。
- en: 'There are different ways to specify an Azure storage container for diagnostics
    data for the specified Azure resource (in our case, microservices hosted on the
    Azure app service). These are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于指定的Azure资源（在我们的案例中，是托管在Azure应用服务上的微服务），指定用于诊断数据的Azure存储容器有不同方式。具体如下：
- en: CLI tools
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CLI工具
- en: PowerShell
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell
- en: Azure Resource Manager
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure资源管理器
- en: Visual Studio 2017 with Azure SDK 2.9 or later
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017与Azure SDK 2.9或更高版本
- en: Azure portal
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure门户
- en: Using Azure portal
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure门户
- en: 'The following screenshot depicts the Azure storage container provisioned through
    the Azure portal:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了通过Azure门户配置的Azure存储容器：
- en: '![](img/be4d9ee8-fc83-4d1a-845c-02b930ab472b.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be4d9ee8-fc83-4d1a-845c-02b930ab472b.png)'
- en: Specifying a storage account
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定存储账户
- en: Another way to specify the storage account for storing application-specific
    diagnostic data is by specifying the storage account in the `ServiceConfiguration.cscfg`
    file. This is also convenient as during development time itself, you can specify
    the storage account. It is also possible to specify an altogether different storage
    account during development and production. The Azure storage account might also
    be configured as one of the dynamic environment variables during the deployment
    process.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种指定用于存储特定应用程序诊断数据的存储账户的方法是在`ServiceConfiguration.cscfg`文件中指定存储账户。这也非常方便，因为在开发期间，您就可以指定存储账户。在开发和生产阶段，也可以指定完全不同的存储账户。在部署过程中，Azure存储账户也可能被配置为动态环境变量之一。
- en: 'The account information is defined as a connection string in a configuration
    setting. The following example shows the default connection string created for
    a new microservice project in Visual Studio:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 账户信息定义为配置设置中的连接字符串。以下示例显示了在Visual Studio中为新的微服务项目创建的默认连接字符串：
- en: '[PRE0]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can change this connection string to provide account information for an
    Azure storage account.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此连接字符串更改为提供Azure存储账户的账户信息。
- en: Now, let's see how Azure storage stores the diagnostic data. All the log entries
    are stored in either a blob or table storage container. The storage choice can
    be specified while we create and associate the Azure storage container.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Azure存储如何存储诊断数据。所有日志条目都存储在blob或表存储容器中。在创建和关联Azure存储容器时，可以指定存储选择。
- en: Azure storage schema for diagnostic data
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure存储诊断数据模式
- en: 'The structure of Azure table storage for storing diagnostic data is as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 存储诊断数据的Azure表存储结构如下：
- en: 'If the storage is in the form of tables, we will see the following tables schema:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存储是以表格的形式，我们将看到以下表结构：
- en: WadLogsTable: This table stores the log statements written during code execution,
    using the trace listener.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WadLogsTable：此表存储在代码执行期间使用跟踪监听器编写的日志语句。
- en: WADDiagnosticInfrastructureLogsTable: This table specifies the diagnostic monitor
    and configuration changes.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WADDiagnosticInfrastructureLogsTable：此表指定了诊断监控器和配置更改。
- en: WADDirectoriesTable: This table includes the directories that the diagnostic
    monitor is monitoring. This includes IIS logs, IIS-failed request logs, and custom
    directories. The location of the blob log file is specified in the container field
    and the name of the blob is in the RelativePath field. The AbsolutePath field
    indicates the location and the name of the file as it existed on the Azure virtual
    machine.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WADDirectoriesTable：此表包括诊断监控器正在监控的目录。这包括IIS日志、IIS-failed请求日志和自定义目录。blob日志文件的位置在容器字段中指定，blob的名称在RelativePath字段中。AbsolutePath字段指示文件的位置和名称，就像它在Azure虚拟机上存在的那样。
- en: WADPerformanceCountersTable: This table contains data related to the configured
    performance counters.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WADPerformanceCountersTable：此表包含与配置的性能计数器相关的数据。
- en: WADWindowsEventLogsTable: This table contains Windows' event tracing log entries.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WADWindowsEventLogsTable：此表包含Windows的事件跟踪日志条目。
- en: 'For a blob storage container, the diagnostic storage schema is as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于blob存储容器，诊断存储模式如下：
- en: 'wad-control-container: This is only for SDK 2.4 and previous versions. It contains
    the XML configuration files that control Azure diagnostics.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: wad-control-container：这仅适用于SDK 2.4及以前版本。它包含控制Azure诊断的XML配置文件。
- en: wad-iis-failedreqlogfiles: This contains information from the IIS-failed request
    logs.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: wad-iis-failedreqlogfiles：这包含来自IIS-failed请求日志的信息。
- en: wad-iis-logfiles: This contains information about IIS logs.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: wad-iis-logfiles：这包含有关IIS日志的信息。
- en: custom: This is a custom container based on the configuring directories that
    are monitored by the diagnostic monitor. The name of this blob container will
    be specified in WADDirectoriesTable.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: custom：这是一个基于由诊断监控器监控的配置目录的定制容器。此blob容器的名称将在WADDirectoriesTable中指定。
- en: An interesting fact to note here is that the WAD suffix, which can be seen on
    these container tables or blobs, comes from Microsoft Azure Diagnostics's previous
    product name, which is Windows Azure Diagnostics.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个值得注意的有趣事实：在这些容器表或blob上可以看到的WAD后缀，来源于Microsoft Azure Diagnostics的先前产品名称，即Windows
    Azure Diagnostics。
- en: You can use *Cloud Explorer* from Visual Studio to explore the stored Azure
    diagnostics data.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Visual Studio中的*Cloud Explorer*来探索存储的Azure诊断数据。
- en: Introduction of Application Insights
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用洞察的介绍
- en: Application Insights is an **application performance management** (**APM**)
    offering from Microsoft. It is a useful service offering for monitoring the performance
    of .NET-based microservices. It is useful for understanding the internal, operational
    behavior of individual microservices. Instead of just focusing on detecting and
    diagnosing issues, it will tune the service performance and understand the performance
    characteristics of your microservice. It is an example of the framework-based
    approach to monitoring. What that means is that during the development of a microservice,
    we will add the Application Insights package to the Visual Studio solution of
    our microservice. This is how Application Insights instruments your microservice
    for telemetry data. This might not always be an ideal approach for every microservice;
    however, it comes in handy if you have not given any good, thorough thought to
    monitoring your microservices. This way, monitoring comes out-of-the-box with
    your service.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Application Insights是微软提供的一种**应用性能管理**（APM）服务。它是监控基于.NET的微服务性能的有用服务。它有助于理解单个微服务的内部和操作行为。它不仅关注于检测和诊断问题，还会调整服务性能并了解微服务的性能特征。它是基于框架的监控方法的一个例子。这意味着在微服务的开发过程中，我们将Application
    Insights包添加到我们的微服务的Visual Studio解决方案中。这就是Application Insights如何为微服务提供遥测数据。这可能并不是每个微服务的理想方法；然而，如果你没有对微服务的监控进行过深思熟虑，它将非常有用。这样，监控将随服务一起提供。
- en: 'With the help of Application Insights, you can collect and analyze the following
    types of telemetry data types:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 借助Application Insights，你可以收集和分析以下类型的遥测数据：
- en: HTTP request rates, response times, and success rates
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP请求率、响应时间和成功率
- en: Dependency (HTTP and SQL) call rates, response times, and success rates
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖（HTTP和SQL）调用率、响应时间和成功率
- en: Exception traces from both server and client
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自服务器和客户端的异常跟踪
- en: Diagnostic log traces
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断日志跟踪
- en: Page view counts, user and session counts, browser load times, and exceptions
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面浏览量、用户和会话数、浏览器加载时间和异常
- en: AJAX call rates, response times, and success rates
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX调用率、响应时间和成功率
- en: Server performance counters
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器性能计数器
- en: Custom client and server telemetry
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义客户端和服务器遥测
- en: Segmentation by client location, browser version, OS version, server instance,
    custom dimensions, and more
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过客户端位置、浏览器版本、操作系统版本、服务器实例、自定义维度等进行的分段
- en: Availability tests
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用性测试
- en: Along with the preceding types, there are associated diagnostic and analytics
    tools available for alerting and monitoring with various different customizable
    metrics. With its own query language and customizable dashboards, Application
    Insights forms a good monitoring solution for .NET microservices.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的类型，还有相关的诊断和分析工具可用于通过各种不同的可自定义指标进行警报和监控。凭借其自己的查询语言和可自定义仪表板，Application
    Insights为.NET微服务提供了一个良好的监控解决方案。
- en: Other microservice monitoring solutions
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他微服务监控解决方案
- en: Now let's look at some of the popular monitoring solutions that can be used
    to build a custom microservice monitoring solution. Obviously, these solutions
    do not come out of-the-box; however, they are definitely time-tested by the open
    source community and can be easily integrated within .NET-based environments.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看一些流行的监控解决方案，这些解决方案可以用来构建定制的微服务监控解决方案。显然，这些解决方案并非即插即用；然而，它们无疑经过了开源社区的充分验证，并且可以轻松集成到.NET环境中。
- en: A brief overview of the ELK stack
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ELK堆栈的简要概述
- en: As we saw, one of the fundamental tools for monitoring is logging. For microservices,
    there will be an astounding number of logs generated that are sometimes not even
    comprehensible to humans. The ELK stack (also referred to as the elastic stack)
    is the most popular log management platform. It is also a good candidate for microservice
    monitoring because of its ability to aggregate, analyze, visualize, and monitor.
    The ELK stack is a toolchain that includes three distinct tools, namely Elasticsearch,
    Logstash, and Kibana. Let's look at them one by one to understand their role in
    the ELK stack.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，监控的基本工具之一是日志记录。对于微服务，将产生惊人的日志数量，有时甚至对人类来说都不易理解。ELK堆栈（也称为弹性堆栈）是最受欢迎的日志管理平台。由于其聚合、分析、可视化和监控的能力，它也是微服务监控的良好候选者。ELK堆栈是一个包含三个不同工具的工具链，即Elasticsearch、Logstash和Kibana。让我们逐一了解它们在ELK堆栈中的作用。
- en: Elasticsearch
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elasticsearch
- en: Elasticsearch is a full-text search engine based on the Apache Lucene library.
    The project is open source and developed in Java. Elasticsearch supports horizontal
    scaling, multitenancy, and clustering approaches. The fundamental element of Elasticsearch
    is its search index. This index is stored in forms of JSON internally. A single
    Elasticsearch server stores multiple indexes (each index represents a database),
    and a single query can search data with multiple indexes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch是基于Apache Lucene库的全文搜索引擎。该项目是开源的，用Java开发。Elasticsearch支持水平扩展、多租户和集群方法。Elasticsearch的基本元素是其搜索索引。该索引以JSON形式内部存储。单个Elasticsearch服务器存储多个索引（每个索引代表一个数据库），单个查询可以搜索多个索引中的数据。
- en: Elasticsearch can really provide near real-time searches and can scale with
    very low latency. The search and results programming model is exposed through
    the Elasticsearch API and available over HTTP.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch可以提供近乎实时的搜索，并且可以以非常低的延迟进行扩展。搜索和结果编程模型通过Elasticsearch API公开，并通过HTTP提供。
- en: Logstash
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Logstash
- en: Logstash plays the role of a log aggregator in the ELK stack. It is a log aggregation
    engine that collects, parses, processes, and persists the log entries in its persistent
    store. Logstash is extensive due to its data-pipeline-based architecture pattern.
    It is deployed as an agent, and it sends the output to Elasticsearch.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Logstash在ELK堆栈中扮演日志聚合器的角色。它是一个日志聚合引擎，它收集、解析、处理并持久化其持久存储中的日志条目。由于基于数据管道的架构模式，Logstash非常广泛。它作为代理部署，并将输出发送到Elasticsearch。
- en: Kibana
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kibana
- en: Kibana is an open source data visualization solution. It is designed to work
    with Elasticsearch. You use Kibana to search, view, and interact with the data
    stored in the Elasticsearch indices.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Kibana是一个开源的数据可视化解决方案。它旨在与Elasticsearch协同工作。您使用Kibana来搜索、查看和交互存储在Elasticsearch索引中的数据。
- en: It is a browser-based web application that lets you perform advanced data analysis
    and visualize your data in a variety of charts, tables, and maps. Moreover, it
    is a zero-configuration application. Therefore, it neither needs any coding nor
    additional infrastructure after the installation.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于浏览器的网络应用程序，允许您执行高级数据分析，并以各种图表、表格和地图的形式可视化您的数据。此外，它是一个零配置应用程序。因此，安装后既不需要任何编码也不需要额外的基础设施。
- en: Splunk
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Splunk
- en: Splunk is one of the best commercial log management solutions. It can handle
    terabytes of log data very easily. Over time, it has added many additional capabilities
    and is now recognized as a full-fledged leading platform for operational intelligence.
    Splunk is used to monitor numerous applications and environments.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk是最佳的商用日志管理解决方案之一。它可以轻松处理数以TB计的日志数据。随着时间的推移，它增加了许多附加功能，现在已成为运营智能的全面领先平台。Splunk用于监控众多应用程序和环境。
- en: It plays a vital role in monitoring any infrastructure and application in real
    time and is essential for identifying issues, problems, and attacks before they
    impact customers, services, and profitability. Splunk's monitoring abilities,
    specific patterns, trends and thresholds, and so on can be established as events
    for Splunk to look out for. This is so that specific individuals don't have to
    do this manually.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 它在实时监控任何基础设施和应用中发挥着至关重要的作用，并且在识别问题、问题和攻击在影响客户、服务和盈利能力之前是必不可少的。Splunk的监控能力、特定模式、趋势和阈值等可以设置为Splunk要关注的事件。这样，特定的个人就不必手动执行这些操作。
- en: Splunk has an alerting capability included in its platform. It can trigger alert
    notifications in real time so that appropriate action can be taken to avoid application
    or infrastructure downtime.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk在其平台中包含警报功能。它可以实时触发警报通知，以便采取适当的行动，避免应用程序或基础设施停机。
- en: 'Based on a trigger of alert and action configured, Splunk can:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 根据配置的警报和操作触发器，Splunk可以：
- en: Send an email
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送电子邮件
- en: Execute a script or trigger a runbook
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行脚本或触发运行手册
- en: Create an organizational support or action ticket
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建组织支持或操作票据
- en: 'Typically, Splunk monitoring marks might include the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Splunk监控标记可能包括以下内容：
- en: Application logs
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序日志
- en: Active Directory changes event data
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动目录更改事件数据
- en: Windows event logs
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows事件日志
- en: Windows performance logs
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows性能日志
- en: WMI-based data
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于WMI的数据
- en: Windows registry information
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows注册表信息
- en: Data from specific files and directories
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自特定文件和目录的数据
- en: Performance monitoring data
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能监控数据
- en: Scripted input to get data from the APIs and other remote data interfaces and
    message queues
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本输入以从API和其他远程数据接口以及消息队列获取数据
- en: Alerting
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报
- en: As with any monitoring solution, Splunk also has alert functionalities. It can
    be configured to set an alert based on any real-time or historical search patterns.
    These alert queries can be run periodically and automatically, and alerts can
    be triggered by the results of these real-time or historical queries.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何监控解决方案一样，Splunk也有警报功能。它可以配置为根据任何实时或历史搜索模式设置警报。这些警报查询可以定期和自动运行，并且可以通过这些实时或历史查询的结果触发警报。
- en: You can base your Splunk alerts on a wide range of threshold-and trend-based
    situations, such as conditions, critical server or application errors, or threshold
    amounts of resource utilization.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将Splunk警报基于广泛的阈值和趋势情况，例如条件、关键服务器或应用程序错误，或资源利用率的阈值量。
- en: Reporting
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告
- en: Splunk can report on alerts that have been triggered and executed as well as
    if they meet certain conditions. Splunk's alert manager can be used to create
    a report based on the preceding alert data.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Splunk可以报告已触发和执行的警报，以及它们是否满足某些条件。Splunk的警报管理器可以用于根据前面的警报数据创建报告。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Debugging and monitoring of microservices is not simple; it''s a challenging
    problem. We have used the word *challenging* on purpose: there is no silver bullet
    for this. There is no single tool that you can install that works like magic.
    However, with Azure Diagnostics and Application Insights, or with ELK stack or
    Splunk, you can come up with solutions that will help you solve microservice monitoring
    challenges. Implementing microservice monitoring strategies, such as application/system
    monitoring, real user monitoring, synthetic transactions, centralized logging,
    semantic logging block, and implementation of correlation ID throughout transactional
    HTTP requests, is a helpful way to monitor microservice implementations.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的调试和监控并不简单；这是一个具有挑战性的问题。我们特意使用了“具有挑战性”这个词：对此没有一劳永逸的解决方案。没有单一的工具可以安装并像魔法一样工作。然而，使用Azure诊断和Application
    Insights，或者使用ELK堆栈或Splunk，您可以提出有助于解决微服务监控挑战的解决方案。实施微服务监控策略，如应用程序/系统监控、真实用户监控、合成事务、集中式日志记录、语义日志块以及在事务性HTTP请求中实施关联ID，是监控微服务实现的有用方法。
- en: In the next chapter, we will see how we can scale microservices, and the solutions
    and strategies for scaling microservice solutions.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何扩展微服务，以及扩展微服务解决方案的解决方案和策略。
