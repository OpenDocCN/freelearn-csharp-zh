- en: Appendix A. Basic Cinder Functionality Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part of the book will help you find some basic Cinder functionalities used
    in this book for later reference. This reference is very basic, so if you are
    an experienced developer searching for detailed and in-depth function reference,
    you should take a look at the reference on the Cinder website ([http://libcinder.org](http://libcinder.org)),
    or as Cinder is open-source, at the actual source code of Cinder.
  prefs: []
  type: TYPE_NORMAL
- en: Basic types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are the basic types consumed by many other Cinder functions. This assumes
    that you are already familiar with `int`, `float`, and other basic data types
    in C++.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code represents a two-dimensional vector of `float` values (`x`
    and `y`). This is usually used to represent location or size in two-dimensional
    space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code represents a two-dimensional vector of `int` values (`x`
    and `y`). This is usually used to represent location or size in two-dimensional
    space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code represents a three-dimensional vector of `float` values (
    `x`, `y`, and `z`). This is usually used to represent location or size in three-dimensional
    space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code represents an abstract rectangle that is defined by the top-left
    and bottom-right corner coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the Color object or class represents color in the Cinder
    environment—`r` is for red, `g` is for green, `b` is for blue, and `a` is for
    alpha in range form `0.0f` to `1.0f`.
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following functions form the base of your Cinder application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setup()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`draw()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `setup()` for the preparation, `update()` for calculations in the run
    loop, and `draw()` for drawing on the screen. You can use the `shutdown()` method
    to do something (clear memory, store data, or communicate with remote server)
    before our application closes. Remember that your main Cinder application class
    should derive from the `BaseApp` class and that you should implement the methods
    in the class declaration first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to change the initial window size or other initial parameters of
    the application, use the `prepareSettings()` method (do not forget to declare
    this method first):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then, there are a couple of useful functions that you can use during setup and
    runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function returns the application window width as an `int` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function returns the application window height as an `int` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function returns the application window size as a `Vec2i` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, it is necessary to know the current frame rate of the application.
    The preceding function returns it as a `float` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function returns the number of seconds that have passed since
    the application has started as a `double` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function returns the number of frames that have elapsed since
    the start of the application as an `int` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Use the preceding function for debugging, for example, `console() << "debug
    text" << std::endl;`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function returns `true`, if the application is in the `fullscreen`
    mode, `false` if not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code sets the `fullscreen` state by passing `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make these functions work, you have to import the `AppBasic` header file
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Basic graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These functions are usually used within the `draw()` method implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code clears the screen with the color specified in `Color`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws a line from a point defined in `from` to a point defined
    in `to`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code sets the color that is then used in drawing shapes and lines.
    Color is defined as the separate `r`, `g`, `b`, and `a` (optional) float values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code sets the line width of Cinder line drawing functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws filled circle at the position defined in `center` and
    radius defined in `radius`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws just the outline of a circle whose position is defined
    in `center` and radius in `radius`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws a solid filled rectangle that is defined in `rect`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws an outline of a rectangle defined in `rect`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws a solid filled ellipse at the position defined in `position`.
    Radius along x axis is defined in `radiusX` and radius along y axis is defined
    in `radiusY`. `numSegments` is optional; that defines how many triangles are used
    for drawing the ellipse as this shape is drawn using OpenGL triangle fans. If
    it is `0`, the number of fans is decided automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws just the outline of an ellipse whose position is defined
    in `position`, radius along x axis in `radiusX`, radius along y axis in `radiusY`.
    and optionally, number of segments in `numSegments`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws a solid filled rectangle with rounded corners. Rectangle
    is defined in `rect`, its corner radius in `cornerRadius`, and it is possible
    to optionally define the number of segments that are used for drawing each corner
    in `numSegmentsPerCorner`. If it is set to `0`, the number of segments is decided
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws just the outline of a rectangle with rounded corners.
    Rectangle is defined in `rect`, its corner radius in `cornerRadius`, and it is
    possible to optionally define the number of segments that are used for drawing
    each corner in `numSegmentsPerCorner`. If it is set to `0`, the number of segments
    is decided automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make these functions work, you have to import the OpenGL header file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the basic code that loads an image into a texture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This texture then is drawn within the `draw()` function by using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the texture that contains the loaded image, and the second
    parameter is rectangle that is drawn within the texture.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this code example work, you have to import the following header files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Other functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please refer to all the chapters in this book, if you are interested in 3D,
    video, sound, or other kinds of function reference as this kind of functionality
    makes use of classes, and the reference and explanation of these functions would
    take the same amount of space as the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: If you want more of Cinder and you can't find what you are searching for in
    this book, please refer to the original Cinder function reference available at
    [http://libcinder.org](http://libcinder.org) or one of many C++ or OpenGL language
    references. Another great place to look for help is the friendly *libcinder.org*
    forum.
  prefs: []
  type: TYPE_NORMAL
- en: As Cinder is open source, it is a good idea to look at the Cinder source code
    if you are in trouble and feel experienced enough to be able to find what you
    are searching for, or fix issues that are standing in your way.
  prefs: []
  type: TYPE_NORMAL
- en: This book is just a brief introduction of what is actually possible with Cinder.
  prefs: []
  type: TYPE_NORMAL
