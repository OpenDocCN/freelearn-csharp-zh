["```cs\n\"ApiEndpoints\": {\n    \"DoctorsApi\": \"DOCTORS_API_ENDPOINT\",\n    \"PatientsApi\": \"PATIENTS_API_ENDPOINT\",\n    \"DocumentsApi\": \"DOCUMENTS_API_ENDPOINT\"\n  }\n```", "```cs\n    public class HttpRepository<T> : IHttpRepository<T> where T : class\n    {\n        private readonly HttpClient _client;\n        public HttpRepository(HttpClient client)\n        {\n            _client = client;\n        }\n        public async Task Create(string url, T obj)\n        {\n            await _client.PostAsJsonAsync(url, obj);\n        }\n        public async Task Delete(string url, int id)\n        {\n            await _client.DeleteAsync($\"{url}/{id}\");\n        }\n        public async Task<T> Get(string url, int id)\n        {\n            return await _client.GetFromJsonAsync<T>($\"{url}/\n              {id}\");\n        }\n        public async Task<T> GetDetails(string url, int id)\n        {\n            return await _client.GetFromJsonAsync<T>($\"{url}/\n              {id}/details\");\n        }\n        public async Task<List<T>> GetAll(string url)\n        {\n            return await _client.\n              GetFromJsonAsync<List<T>>($\"{url}\");\n        }\n        public async Task Update(string url, T obj, int id)\n        {\n            await _client.PutAsJsonAsync($\"{url}/{id}\", obj);\n        }\n    }\n```", "```cs\nsyntax = \"proto3\";\noption csharp_namespace = \"HealthCare.Documents.Api.Protos\";\npackage DocumentSearch;\nservice DocumentService {\n  rpc GetAll (Empty) returns (DocumentList);\n  rpc Get (DocumentId) returns (Document);\n}\nmessage Empty{}\nmessage Document {\n  string patientId = 1;\n  string name = 2;\n}\nmessage DocumentList{\n    repeated Document documents = 1; \n}\nmessage DocumentId {\n  string Id = 1;\n}\n```", "```cs\npublic class DocumentsService : DocumentService.\n    DocumentServiceBase\n    {\n        public override Task<Document> Get(DocumentId request, \n              ServerCallContext context)\n        {\n            return base.Get(request, context);\n        }\n        public override Task<DocumentList> GetAll(Empty \n              request, ServerCallContext context)\n        {\n            return base.GetAll(request, context);\n        }\n    }\n```", "```cs\n// The port number must match the port of the gRPC server.\nusing var channel = GrpcChannel.ForAddress(\"ADDRESS_OF_\n    SERVICE\");\nvar client = new DocumentService. DocumentService \n    Client(channel);\nvar document = await client.Get(\n                  new DocumentId { Id = \"DOCUMENT_ID\" });\n```"]