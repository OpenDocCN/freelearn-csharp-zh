- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Designing Interactive UI Elements – Menus and Player Interactions in Unity
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计交互式 UI 元素 – Unity 中的菜单和玩家交互
- en: Following an in-depth exploration of different data structures in Unity in the
    previous chapter, where we unraveled the complexities of organizing and managing
    game data efficiently, this chapter ventures into the equally critical and creative
    realm of the **User Interface** (**UI**). Here, we’ll explore menus and other
    player interactions, making them responsive to actions by the player. This chapter
    shifts the focus from the backend intricacies of game development to the forefront
    of user experience, illustrating how to craft engaging and intuitive UIs that
    players interact with directly. As we delve into the art of UI design and player
    interaction within Unity, using the versatile C# programming language, you’ll
    learn how to blend functionality with creativity, enhancing the overall gaming
    experience. From constructing dynamic menus that guide players through your game
    to scripting custom interaction behaviors, such as color change or size change,
    that breathe life into your GameObjects. This chapter provides a comprehensive
    toolkit for bringing your game’s visual and interactive elements to life.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中深入探讨了 Unity 中不同的数据结构，其中我们揭示了高效组织和管理游戏数据的复杂性，本章将进入同样关键且富有创造性的领域——**用户界面**（**UI**）。在这里，我们将探索菜单和其他玩家交互，使它们能够响应用户的操作。本章将重点从游戏开发的底层复杂性转移到用户体验的前沿，展示如何制作吸引人且直观的
    UI，让玩家直接与之交互。随着我们深入 UI 设计和 Unity 中的玩家交互的艺术，使用多才多艺的 C# 编程语言，您将学习如何将功能与创造力相结合，提升整体游戏体验。从构建引导玩家通过游戏的动态菜单到编写自定义交互行为，如颜色变化或大小变化，为您的
    GameObjects 呼吸生命。本章提供了一套全面的工具集，用于使您的游戏视觉和交互元素生动起来。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Designing UI elements in Unity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Unity 中设计 UI 元素
- en: Scripting player inputs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写玩家输入脚本
- en: Building dynamic menus
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建动态菜单
- en: Custom interactions with GameObjects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 GameObjects 的自定义交互
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To effectively follow along with this chapter, ensure you have the following
    installed:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地跟随本章内容，请确保您已安装以下内容：
- en: '**Unity Hub**: Manages Unity installations and project versions.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity Hub**：管理 Unity 安装和项目版本。'
- en: '**Unity Editor**: The main platform for developing and building your Unity
    projects.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity 编辑器**：开发并构建您的 Unity 项目的平台。'
- en: '**Integrated Development Environment (IDE)**: Used to edit and manage C# code.
    Recommended IDEs include Microsoft Visual Studio or JetBrains Rider, both of which
    integrate well with Unity for comprehensive coding and debugging.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成开发环境 (IDE)**: 用于编辑和管理 C# 代码。推荐的 IDE 包括 Microsoft Visual Studio 或 JetBrains
    Rider，它们都与 Unity 集成良好，适用于全面的编码和调试。'
- en: 'You can find the examples/files related to this chapter here: [https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter07](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter07)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到与本章节相关的示例/文件：[https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter07](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter07)
- en: Designing UI elements in Unity
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Unity 中设计 UI 元素
- en: Transitioning from the intricacies of data structures in game logic, we embark
    on a new journey into the visual realm of game development with a deep dive into
    designing UI elements in Unity. This section illuminates the foundational pillars
    of Unity’s UI system, guiding you through the assembly of essential UI components
    such as **Buttons**, **Text**, **Images**, and **Sliders**. The **RectTransform**
    component is crucial for positioning, scaling, and rotating UI elements, through
    both the **Inspector** window and C# scripts. We’ll explore how to infuse your
    interfaces with style and theme, ensuring visual consistency that resonates with
    your game’s aesthetic. Furthermore, we’ll tackle the challenges of responsive
    design, ensuring your UI gracefully adapts across various devices and resolutions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从游戏逻辑中数据结构的复杂性转向，我们开始新的旅程，深入 Unity 中设计 UI 元素，探索游戏开发的视觉领域。本节阐明了 Unity UI 系统的基础支柱，引导您通过组装必要的
    UI 组件，如 **按钮**、**文本**、**图像**和 **滑块**。**RectTransform** 组件对于通过 **检查器** 窗口和 C# 脚本定位、缩放和旋转
    UI 元素至关重要。我们将探索如何为您的界面注入风格和主题，确保与游戏美学的视觉一致性。此外，我们将解决响应式设计的挑战，确保您的 UI 能够在各种设备和分辨率上优雅地适应。
- en: UI component fundamentals
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UI 组件基础
- en: Unity’s UI system is a powerful toolset for creating interactive and visually
    appealing elements within your games. Whether you’re crafting a simple button
    or a complex game menu, understanding the fundamentals of Unity’s UI components
    is crucial. These elements serve as the bridge between your game and its players,
    enabling them to navigate menus, interact with the game world, and receive vital
    feedback during gameplay.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的UI系统是一个强大的工具集，用于在游戏中创建交互性和视觉吸引力元素。无论你是制作一个简单的按钮还是一个复杂的游戏菜单，理解Unity UI组件的基本原理至关重要。这些元素是游戏与玩家之间的桥梁，使玩家能够在游戏过程中导航菜单、与游戏世界互动并接收关键反馈。
- en: 'At the heart of Unity’s UI system lies a collection of versatile components,
    each designed to fulfill specific roles within your UI:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的UI系统核心是一个功能多样的组件集合，每个组件都旨在在你的UI中扮演特定的角色：
- en: '**Buttons**: The quintessential UI element, Buttons in Unity are incredibly
    versatile, allowing players to interact with the game through clicks or taps.
    Customizable in appearance and function, buttons can trigger any action, from
    starting a new game to selecting an in-game item.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按钮**: 按钮是典型的用户界面元素，在Unity中，按钮功能极其灵活，允许玩家通过点击或轻触与游戏互动。按钮的外观和功能均可自定义，可以触发任何动作，从开始新游戏到选择游戏内的物品。'
- en: '**Text**: The **Text** component is essential for conveying information to
    the player. From dialogue and instructions to scoreboards and UI labels, **Text**
    components are used to display readable content within the game.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**: **文本**组件对于向玩家传达信息至关重要。从对话和指令到得分板和UI标签，**文本**组件用于在游戏中显示可读内容。'
- en: '**Images**: Images add a visual layer to your UI, enhancing the aesthetic appeal
    of your game. They can serve various purposes, such as icons, background images,
    or decorative elements, contributing to the overall atmosphere and theme of your
    game.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像**: 图像为你的UI添加了一层视觉元素，增强了游戏的审美吸引力。它们可以用于各种目的，如图标、背景图像或装饰元素，有助于营造游戏的整体氛围和主题。'
- en: '**Sliders**: Sliders provide a visual and interactive means for players to
    adjust values within a predefined range. They’re commonly used for settings such
    as volume control or adjusting graphical options.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑块**: 滑块为玩家提供了一个视觉和交互式的方式，可以在预定义的范围内调整值。它们通常用于音量控制或调整图形选项等设置。'
- en: An essential aspect of Unity’s UI components is **RectTransform**, a powerful
    tool for positioning and sizing UI elements. Unlike the traditional **Transform**
    component used for 3D objects, **RectTransform** is specifically tailored for
    UI design, offering control over anchoring, pivots, and scaling. This makes it
    incredibly efficient for laying out UI elements, ensuring they look great on various
    screen sizes and resolutions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Unity UI组件的一个基本方面是**RectTransform**，这是一个强大的定位和调整UI元素大小的工具。与用于3D对象的传统**Transform**组件不同，**RectTransform**专门针对UI设计，提供了对锚点、旋转点和缩放的控制。这使得它在布局UI元素时非常高效，确保它们在各种屏幕尺寸和分辨率上看起来都很棒。
- en: To fully grasp the versatility of Unity’s UI components, let’s take a visual
    tour of the Unity Editor.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全掌握Unity UI组件的灵活性，让我们对Unity编辑器进行一次视觉之旅。
- en: Unity’s UI system provides a robust framework for designing interactive and
    visually captivating UIs. By mastering the UI components and harnessing the power
    of **RectTransform** for precise layout control, you can create UIs that not only
    look professional but also provide an intuitive and enjoyable experience for your
    players. As you continue to explore Unity’s UI capabilities, remember that these
    elements are the building blocks for crafting engaging and user-friendly interfaces
    that will elevate your game to new heights.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的UI系统提供了一个强大的框架，用于设计交互性和视觉吸引的UI。通过掌握UI组件并利用**RectTransform**进行精确布局控制，你可以创建不仅外观专业，而且为玩家提供直观和愉悦体验的UI。随着你继续探索Unity的UI功能，请记住，这些元素是构建引人入胜和用户友好界面的基石，将你的游戏提升到新的高度。
- en: '![Figure 7.1 – Adding a Button - TextMeshPro element to the Hierarchy window](img/B22128_07_1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 向层次结构窗口添加按钮 - TextMeshPro元素](img/B22128_07_1.jpg)'
- en: Figure 7.1 – Adding a Button - TextMeshPro element to the Hierarchy window
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 向层次结构窗口添加按钮 - TextMeshPro元素
- en: Right-clicking in the Hierarchy window brings up the GameObject menu (this can
    also be reached by selecting the **GameObject** menu). To do that, after right-clicking,
    scroll down to **UI** and then to the right, a listing will appear of all of the
    UI elements currently available in the Unity Editor.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次结构窗口中右键单击会弹出GameObject菜单（这也可以通过选择**GameObject**菜单来访问）。要做到这一点，在右键单击后，向下滚动到**UI**，然后向右，会出现一个列表，列出了Unity编辑器中当前可用的所有UI元素。
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: TextMeshPro is a powerful text rendering tool in Unity that provides advanced
    formatting and visual effects for text elements.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: TextMeshPro是Unity中一个强大的文本渲染工具，它为文本元素提供了高级格式化和视觉效果。
- en: 'To demonstrate how to connect UI elements with game logic, the following script
    shows how to use a button to equip a sword in a Unity game:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示如何将UI元素与游戏逻辑连接起来，以下脚本展示了如何在Unity游戏中使用按钮来装备剑：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This `Player` script demonstrates how to use Unity’s Event System to respond
    to button clicks. The `equipButton` field is serialized, allowing it to be assigned
    in the `equipButton` is assigned and adds a listener to the button’s `onClick`
    event, which calls the `EquipSword` method. The `EquipSword` method, when invoked,
    logs a message indicating that the sword has been equipped. To use this script
    in Unity, attach it to the `Player` GameObject. In the `equipButton` by clicking
    the circle with the dot next to the `equipButton` field and selecting the appropriate
    button from the list.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Player`脚本演示了如何使用Unity的事件系统来响应按钮点击。`equipButton`字段被序列化，允许在`equipButton`被分配后添加监听器到按钮的`onClick`事件，该事件调用`EquipSword`方法。当`EquipSword`方法被调用时，会记录一条消息，表明剑已被装备。要在Unity中使用此脚本，将其附加到`Player`GameObject上。在`equipButton`中，通过点击旁边带有点的圆圈并从列表中选择适当的按钮来完成分配。
- en: Unity’s event system offers a variety of options beyond `onClick`. These include
    `onMouseEnter` and `onMouseExit`, which trigger when the mouse cursor enters or
    leaves a UI element, respectively. `onMouseDown` and `onMouseUp` detect when a
    mouse button is pressed down or released over an element. Additionally, `onValueChanged`
    is used for UI components such as Sliders and dropdowns, activating when the value
    of the component changes. These events provide versatile ways to interact with
    UI elements, enhancing user interactions in your game.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的事件系统提供了比`onClick`更多的选项。这包括`onMouseEnter`和`onMouseExit`，分别触发鼠标光标进入或离开UI元素时。`onMouseDown`和`onMouseUp`检测鼠标按钮在元素上按下或释放。此外，`onValueChanged`用于如滑块和下拉菜单等UI组件，当组件的值发生变化时激活。这些事件提供了灵活的方式与UI元素交互，增强游戏中的用户交互。
- en: 'Unity offers a more complex way to manually assign an action to a button in
    the Unity Editor’s **Inspector** window. Follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在Unity编辑器的**Inspector**窗口中提供了一个更复杂的方法来手动将动作分配给按钮。按照以下步骤操作：
- en: First, ensure your button is selected in the Hierarchy.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确保您的按钮在层次结构中已被选中。
- en: In the `On Click()` section. Click the **+** icon to add a new event.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`On Click()`部分，点击**+**图标以添加一个新的事件。
- en: Drag the GameObject containing the script you want to attach from the Hierarchy
    into the empty slot labeled `None (Object)`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含您想要附加的脚本的GameObject从层次结构拖动到标记为`None (Object)`的空槽中。
- en: Next, use the drop-down menu to select the script and then choose the specific
    method you want to execute when the button is clicked.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用下拉菜单选择脚本，然后选择当按钮被点击时要执行的具体方法。
- en: Next, let’s look at styling and theming.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看样式和主题。
- en: Styling and theming
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式和主题
- en: 'Transitioning from our exploration of the core UI components in Unity, we now
    delve into the equally crucial aspect of UI development: styling and theming.
    This section is dedicated to elevating the visual coherence and appeal of your
    UIs, ensuring that they not only function seamlessly but also resonate with the
    overall aesthetic of your game.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们对Unity核心UI组件的探索过渡，我们现在深入探讨UI开发的同样关键方面：样式和主题。本节致力于提升UI的视觉一致性和吸引力，确保它们不仅功能无缝，而且与游戏的整体美学相呼应。
- en: The visual design of your UI elements plays a pivotal role in the player’s experience,
    influencing both the usability and the immersive quality of your game. Unity’s
    UI system provides a flexible framework for applying consistent styles and themes
    across various UI components, allowing for a unified look and feel.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您UI元素的视觉设计在玩家的体验中起着至关重要的作用，影响着游戏的可使用性和沉浸感。Unity的UI系统提供了一个灵活的框架，用于在各种UI组件上应用一致的样式和主题，从而实现统一的视觉和触觉体验。
- en: 'Several critical design strategies that can improve functionality and elevate
    the aesthetic appeal of your game include the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 几种可以提高功能性和提升游戏美学吸引力的关键设计策略包括以下内容：
- en: '**Using Unity’s UI image component**: The **UI Image** component is a versatile
    tool for applying graphical elements to your UI. It can be used to set backgrounds
    for panels and buttons, create icons, or even display decorative artwork. By carefully
    selecting images that align with your game’s theme, you can enhance the visual
    consistency and thematic alignment of your UI.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Unity的UI图像组件**：**UI Image**组件是一个多功能的工具，用于将图形元素应用到UI上。它可以用来设置面板和按钮的背景，创建图标，甚至显示装饰性艺术作品。通过仔细选择与游戏主题相符的图像，你可以增强UI的视觉一致性和主题一致性。'
- en: '**Text styling**: The legibility and appearance of text within your UI are
    paramount. Unity offers a range of options for text styling, including font selection,
    size, color, and alignment. Choosing the right typography can significantly affect
    the readability of your UI and its alignment with the game’s theme. Consider using
    custom fonts that complement your game’s genre and setting while ensuring that
    the text contrast stands out against background elements for clear visibility.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本风格**：UI中文字的可读性和外观至关重要。Unity提供了一系列文本风格选项，包括字体选择、大小、颜色和对齐方式。选择合适的字体可以显著影响UI的可读性和与游戏主题的契合度。考虑使用与游戏类型和背景相匹配的自定义字体，同时确保文字对比度突出，以便在背景元素上清晰可见。'
- en: '**Consistency across elements**: To achieve a cohesive UI, it’s essential to
    apply consistent styling rules across all UI elements. This includes uniform use
    of color schemes, font styles, and button shapes. Consistency helps in creating
    a seamless user experience, making the UI intuitive and predictable for the player.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元素间的一致性**：为了实现统一的UI，在所有UI元素上应用一致的样式规则至关重要。这包括统一使用色彩方案、字体样式和按钮形状。一致性有助于创建无缝的用户体验，使UI对玩家来说直观且可预测。'
- en: '**Thematic integration**: Your UI should feel like an integral part of the
    game’s world. This means that the styling of your UI elements should reflect the
    game’s setting and atmosphere. Whether you’re creating a futuristic sci-fi game
    or a medieval fantasy adventure, the UI should echo the thematic elements of your
    game, from color palettes to texture choices.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题整合**：你的UI应该感觉像是游戏世界的有机组成部分。这意味着你的UI元素的风格应该反映游戏的背景和氛围。无论你是在创建未来科幻游戏还是中世纪幻想冒险游戏，UI都应该呼应游戏的主题元素，从色彩搭配到纹理选择。'
- en: Good UI design is fundamental to creating an engaging and intuitive player experience.
    It not only makes the game more accessible but also significantly enhances its
    visual appeal, drawing players into the game’s world. A well-designed UI guides
    players smoothly from one task to another, minimizing frustration and maximizing
    enjoyment. It serves as the bridge between players and the game mechanics, making
    it crucial for the UI to be clear, attractive, and cohesive with the game’s overall
    theme.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的UI设计对于创造引人入胜且直观的玩家体验至关重要。它不仅使游戏更易于访问，而且显著提升了其视觉吸引力，将玩家吸引到游戏的世界中。一个设计良好的UI可以引导玩家顺利地从一项任务过渡到另一项任务，最小化挫败感，最大化乐趣。它作为玩家和游戏机制之间的桥梁，因此UI的清晰、吸引力和与游戏整体主题的统一性至关重要。
- en: As we move forward, the concept of responsive design will become paramount,
    ensuring that our beautifully styled UIs adapt flawlessly across different devices
    and screen resolutions, providing all players with an optimal experience.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，响应式设计的概念将变得至关重要，确保我们精心设计的UI在不同设备和屏幕分辨率上完美适应，为所有玩家提供最佳体验。
- en: Responsive design
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式设计
- en: 'The cornerstone of responsive UI design in Unity is the **Canvas Scaler** component.
    This powerful tool automatically adjusts the scale and size of UI elements to
    fit various screen dimensions, maintaining the intended layout and design across
    different devices:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中响应式UI设计的基石是**Canvas Scaler**组件。这个强大的工具会自动调整UI元素的缩放和大小，以适应各种屏幕尺寸，确保在不同设备上保持预期的布局和设计：
- en: '**Canvas Scaler**: The **Canvas Scaler** component, attached to the UI Canvas,
    offers several scaling options, including **Constant Pixel Size**, **Scale With
    Screen Size**, and **Constant Physical Size**. For most responsive designs, **Scale
    With Screen Size** is the preferred choice as it adjusts the UI based on the screen’s
    width and height while keeping the aspect ratio intact.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**画布缩放器**：附加到UI画布上的**画布缩放器**组件提供了多种缩放选项，包括**固定像素大小**、**根据屏幕大小缩放**和**固定物理大小**。对于大多数响应式设计，**根据屏幕大小缩放**是首选选择，因为它根据屏幕的宽度和高度调整UI，同时保持宽高比不变。'
- en: '**Anchors and pivots**: The use of anchors and pivots within the **RectTransform**
    component is crucial for responsive design. Anchors define how UI elements position
    themselves relative to their parent canvas or container, allowing elements to
    stay in place or move dynamically with screen size changes. Pivots determine the
    point around which UI elements scale or rotate, adding another layer of adaptability
    to your UI.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锚点和中心点**：在**RectTransform**组件中使用锚点和中心点对于响应式设计至关重要。锚点定义了UI元素相对于其父画布或容器的位置，允许元素保持位置或随着屏幕尺寸的变化动态移动。中心点确定UI元素缩放或旋转的点，为UI添加了另一层适应性。'
- en: '![Figure 7.2 – Anchor presets have been selected from the Canvas GameObject’s
    Inspector window. The pop-up window displays the 24 available options](img/B22128_07_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 从画布GameObject的检查器窗口中选择了锚点预设。弹出窗口显示了24个可用选项](img/B22128_07_02.jpg)'
- en: Figure 7.2 – Anchor presets have been selected from the Canvas GameObject’s
    Inspector window. The pop-up window displays the 24 available options
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 从画布GameObject的检查器窗口中选择了锚点预设。弹出窗口显示了24个可用选项
- en: Transitioning from the use of UI element anchor points, Unity offers several
    layout group components to enhance UI adaptability.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从使用UI元素锚点点的使用过渡到Unity，提供了几个布局组组件来增强UI的适应性。
- en: Leveraging layout groups
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用布局组
- en: 'To further enhance the adaptability of your UI, Unity provides several Layout
    Group components that automate the organization of UI elements within a container.
    Let’s take a look at the different layout groups:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步增强UI的适应性，Unity提供了几个布局组组件，这些组件可以自动化容器内UI元素的组织。让我们来看看不同的布局组：
- en: '**Horizontal and vertical layout groups**: These layout groups arrange UI elements
    in a line, either horizontally or vertically. They are ideal for menus or lists
    where elements need to be aligned in a single direction.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平和垂直布局组**：这些布局组将UI元素排列成一行，无论是水平还是垂直。它们非常适合菜单或列表，其中元素需要沿单一方向对齐。'
- en: '**Grid layout group**: For more complex UI structures, the grid layout group
    organizes elements into a grid format. This is particularly useful for inventory
    screens, ability hotbars, or any UI component that benefits from a grid arrangement.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格布局组**：对于更复杂的UI结构，网格布局组将元素组织成网格格式。这对于库存屏幕、技能快捷栏或任何从网格排列中受益的UI组件特别有用。'
- en: Each of these layout groups offers a range of settings to control spacing, alignment,
    and the child elements’ distribution, further empowering developers to create
    dynamic and flexible UIs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些布局组中的每一个都提供了一系列设置来控制间距、对齐和子元素分布，进一步赋予开发者创建动态和灵活UI的能力。
- en: '![Figure 7.3 – Screenshot of three different UI elements, each with a different
    layout group: horizontal, vertical, and grid](img/B22128_07_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 三种不同UI元素的截图，每个元素属于不同的布局组：水平、垂直和网格](img/B22128_07_03.jpg)'
- en: 'Figure 7.3 – Screenshot of three different UI elements, each with a different
    layout group: horizontal, vertical, and grid'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 三种不同UI元素的截图，每个元素属于不同的布局组：水平、垂直和网格
- en: Responsive design is a fundamental aspect of UI development in Unity, ensuring
    that your game interfaces look great and function well on any device. By mastering
    Canvas Scaler, utilizing anchors and pivots, and employing layout groups, you
    can build UIs that not only captivate with their aesthetics but also excel in
    usability and accessibility. Transitioning from the use of UI element anchor points,
    Unity offers several layout group components to enhance UI adaptability. These
    tools automate the organization of UI elements within a container, allowing for
    streamlined arrangement in horizontal, vertical, or grid formats—ideal for various
    interface components from menus to inventory screens. Each layout group provides
    settings to fine-tune spacing, alignment, and distribution, empowering developers
    to create dynamic and flexible UIs efficiently. As we continue to navigate the
    multifaceted world of UI design in Unity, the skills and techniques discussed
    in this section will serve as a solid foundation for creating versatile and player-friendly
    interfaces.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式设计是Unity中UI开发的基本方面，确保你的游戏界面在任何设备上看起来都很棒，并且功能良好。通过掌握Canvas Scaler，利用锚点和枢轴，以及使用布局组，你可以构建不仅在外观上吸引人，而且在可用性和可访问性方面也表现出色的UI。从使用UI元素锚点点的使用过渡到Unity，提供了几个布局组组件来增强UI的适应性。这些工具自动化了容器内UI元素的组织，允许以水平、垂直或网格格式进行流畅的排列——非常适合从菜单到库存屏幕的各种界面组件。每个布局组都提供设置来微调间距、对齐和分布，使开发者能够高效地创建动态和灵活的UI。随着我们继续在Unity中探索多方面的UI设计世界，本节中讨论的技能和技术将为创建多才多艺且玩家友好的界面提供一个坚实的基础。
- en: Let’s now turn our focus to the dynamic interaction between these elements and
    the player, delving into the art of scripting player inputs to create engaging
    and interactive user experiences.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将重点转向这些元素与玩家之间的动态互动，深入探讨脚本化玩家输入的艺术，以创建引人入胜和互动的用户体验。
- en: Scripting player inputs
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本玩家输入
- en: Building on our journey through the versatile world of UI elements in Unity,
    we now transition to a new phase that delves deeper into the dynamic interplay
    between these elements and the user. This section is dedicated to unveiling the
    intricacies of creating engaging and interactive user experiences, a cornerstone
    in the art of game design. As we pivot from the foundational aspects of UI components,
    we’ll explore the realm of user interaction, where the principles of design meet
    the practicalities of implementation, setting the stage for a richer, more immersive
    gaming experience.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中UI元素的多才多艺世界中继续我们的旅程后，我们现在过渡到一个新的阶段，深入探讨这些元素与用户之间的动态互动。本节致力于揭示创建引人入胜和互动用户体验的复杂性，这是游戏设计艺术的基础。随着我们从UI组件的基础方面转向，我们将探索用户交互领域，在这里，设计原则与实施的实用性相遇，为更丰富、更沉浸式的游戏体验奠定基础。
- en: Overview of the input methods
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入方法概述
- en: The diversity of input methods available in Unity allows for a broad spectrum
    of game genres and player experiences. The traditional keyboard and mouse setup
    offers precision and a wide range of inputs ideal for complex games such as strategy
    titles or first-person shooters. On the other hand, touch inputs open doors to
    intuitive and direct interactions, making them perfect for mobile games and applications
    designed for a broader audience, including casual gamers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中可用的输入方法多样性允许游戏类型和玩家体验范围广泛。传统的键盘和鼠标设置提供了精确性和广泛的输入，非常适合需要复杂交互的游戏，如策略游戏或第一人称射击游戏。另一方面，触摸输入为直观和直接的交互打开了大门，使它们非常适合移动游戏和面向更广泛受众的应用程序，包括休闲玩家。
- en: 'Here are some of the input methods:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些输入方法：
- en: '**Keyboard**: The backbone of PC gaming, keyboard inputs allow for intricate
    control schemes and quick access to numerous game functions, making them indispensable
    for genres requiring complex interactions.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘**：PC游戏的基础，键盘输入允许复杂的控制方案和快速访问众多游戏功能，对于需要复杂交互的游戏类型来说是不可或缺的。'
- en: '**Mouse**: Offering precision pointing and clicking, the mouse is not only
    an extension of the keyboard’s functionality but also provides a natural way for
    players to interact with the game world, especially in point-and-click adventures,
    RTS games, and more.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标**：提供精确的指针定位和点击，鼠标不仅是键盘功能的扩展，还为玩家提供了一个与游戏世界自然互动的方式，尤其是在点按冒险、RTS游戏等方面。'
- en: '**Touch**: The touch interface has revolutionized game design for mobile platforms,
    offering a direct and tactile way to interact with games. It supports gestures
    and multi-touch, enabling innovative gameplay mechanics and controls.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸**：触摸界面已经彻底改变了移动平台的游戏设计，提供了一种直接和触觉化的方式来与游戏互动。它支持手势和多点触摸，使创新的游戏机制和控制成为可能。'
- en: Understanding the nuances of each input method is pivotal in designing games
    that are both engaging and accessible. By tailoring the input scheme to the game’s
    genre and intended audience, developers can enhance the player experience, making
    gameplay more intuitive and enjoyable. As we move forward, the next section will
    dive into the technical aspects of capturing and responding to these diverse player
    inputs within Unity, laying the groundwork for interactive and dynamic game environments.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 理解每种输入方法的细微差别对于设计既吸引人又易于访问的游戏至关重要。通过根据游戏类型和目标受众调整输入方案，开发者可以增强玩家体验，使游戏玩法更加直观和愉悦。随着我们继续前进，下一节将深入探讨在
    Unity 中捕获和响应这些多样化的玩家输入的技术细节，为交互式和动态游戏环境奠定基础。
- en: Capturing player input
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捕获玩家输入
- en: Unity’s robust input system provides a comprehensive framework for capturing
    player interactions, whether it’s a simple tap on a mobile screen or a complex
    combination of keyboard commands. The Event system further complements this by
    offering a way to manage input events in a more structured manner, which is especially
    useful in UI interactions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 的强大输入系统提供了一个全面的框架，用于捕获玩家交互，无论是简单的触摸屏幕还是复杂的键盘命令组合。事件系统通过提供一种更结构化的方式来管理输入事件，进一步补充了这一点，这在
    UI 交互中特别有用。
- en: 'Here are some of the various components Unity offers that receive inputs from
    players:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些 Unity 提供的、从玩家接收输入的各种组件：
- en: '**Unity Input System**: At its core, this system allows for the detection of
    keypresses, mouse clicks, and joystick movements, translating them into actions
    within the game. It’s versatile enough to accommodate a wide range of input devices
    and methods.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity 输入系统**：在核心上，该系统允许检测按键、鼠标点击和摇杆移动，并将它们转换为游戏内的动作。它足够灵活，可以适应各种输入设备和方法。'
- en: '**Event System**: Primarily used for UI interactions, the Event system works
    in tandem with the Input System to ensure that input events are handled efficiently,
    providing a seamless experience when navigating through menus or interacting with
    in-game objects.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件系统**：主要用于 UI 交互，事件系统与输入系统协同工作，确保输入事件得到有效处理，在浏览菜单或与游戏内对象交互时提供无缝体验。'
- en: '**Touch inputs**: Handling touch inputs involves recognizing gestures and touches
    on the screen, crucial for mobile gaming. Unity offers specific functionalities
    to capture such interactions, allowing for the development of touch-friendly interfaces
    and gameplay.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸输入**：处理触摸输入涉及识别屏幕上的手势和触摸，这对于移动游戏至关重要。Unity 提供了特定的功能来捕获此类交互，允许开发触摸友好的界面和游戏玩法。'
- en: From detecting simple button presses to handling complex touch inputs, these
    components are vital for creating responsive gameplay. Let’s delve deeper into
    these concepts with a practical example. Next, you’ll find a sample C# code snippet
    that demonstrates how to implement one of these input systems, keyboard input.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从检测简单的按钮按下到处理复杂的触摸输入，这些组件对于创建响应式游戏玩法至关重要。让我们通过一个实际示例深入了解这些概念。接下来，你将找到一个示例 C#
    代码片段，演示如何实现这些输入系统之一，即键盘输入。
- en: 'Here’s a simple C# script example that demonstrates how to capture keyboard
    input to move a GameObject in Unity:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的 C# 脚本示例，演示了如何在 Unity 中捕获键盘输入以移动 GameObject：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script allows a GameObject to move based on the player’s input from the
    keyboard, utilizing the horizontal and vertical axes defined in Unity’s Input
    Manager.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本允许 GameObject 根据玩家的键盘输入进行移动，利用 Unity 输入管理器中定义的水平轴和垂直轴。
- en: The ability to accurately capture and process player inputs is fundamental to
    crafting engaging and dynamic games. Through Unity’s Input and Event systems,
    developers are equipped with the tools needed to create responsive gameplay that
    reacts to every player action. As we progress to the next section, we’ll explore
    how to effectively respond to these inputs, translating them into meaningful in-game
    actions that enrich the player’s experience.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 准确捕捉和处理玩家输入的能力对于制作引人入胜且动态的游戏至关重要。通过Unity的输入和事件系统，开发者拥有了创建对每个玩家动作做出反应的响应式游戏所需的工具。随着我们进入下一节，我们将探讨如何有效地响应这些输入，将它们转化为丰富玩家体验的有意义的游戏内动作。
- en: Responding to player actions
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应玩家操作
- en: The essence of game interactivity lies in the game’s responsiveness to player
    inputs. Unity, armed with its versatile scripting capabilities in C#, offers a
    broad canvas to paint these interactions vividly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏交互的本质在于游戏对玩家输入的响应性。Unity凭借其C#脚本的多功能性，提供了一个广阔的画布来生动地描绘这些互动。
- en: 'The following are some examples of where player input is most significant in
    a game:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些玩家输入在游戏中最为重要的例子：
- en: '**Character movement**: One of the most fundamental responses to player input
    is character movement. By mapping input commands to character actions, players
    gain control over the game’s protagonists, immersing themselves deeper into the
    game’s narrative.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色移动**：对玩家输入的最基本响应之一是角色移动。通过将输入命令映射到角色动作，玩家可以控制游戏的主角，更深入地沉浸在游戏的叙事中。'
- en: '**Menu navigation**: Responsive UI elements, such as menus and buttons, rely
    on input detection to function. Scripting these elements to react to player choices
    enhances the usability and accessibility of the game’s interface.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**菜单导航**：响应式UI元素，如菜单和按钮，依赖于输入检测来工作。将这些元素脚本化以对玩家的选择做出反应，增强了游戏界面的可用性和可访问性。'
- en: '**In-game actions**: Beyond navigation, player inputs can trigger a wide range
    of in-game actions, from simple object interactions to complex gameplay mechanics.
    Scripting these responses adds depth and richness to the gaming experience.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏内操作**：除了导航之外，玩家输入可以触发各种游戏内操作，从简单的对象交互到复杂的游戏机制。脚本这些响应为游戏体验增添了深度和丰富性。'
- en: Responding to player inputs in a meaningful way is what breathes life into a
    game, transforming static scenes into immersive experiences. Through Unity’s C#
    scripting, developers can create a dynamic interplay between the player and the
    game, ensuring that each input is met with a corresponding and coherent reaction.
    As we move forward, we’ll continue to build upon these concepts, further exploring
    the vast potential of Unity and C# in bringing game worlds to life.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以有意义的方式响应玩家操作是赋予游戏生命力的关键，将静态场景转变为沉浸式体验。通过Unity的C#脚本，开发者可以创建玩家与游戏之间的动态互动，确保每个输入都得到相应的、连贯的反应。随着我们继续前进，我们将继续构建这些概念，进一步探索Unity和C#在使游戏世界栩栩如生方面的巨大潜力。
- en: Building dynamic menus
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建动态菜单
- en: Transitioning from the foundational aspects of scripting player inputs, we now
    turn our attention to the art of building dynamic menus in Unity. This section
    is dedicated to elevating the player’s navigational experience through well-designed
    and intuitive menu systems. Here, we’ll explore the essential principles of menu
    design, delving into the layout, flow, and aesthetic harmony that make menus not
    just functional but a seamless extension of the game itself. From the basics of
    constructing menu screens to the intricacies of scripting interactive elements,
    this section will guide you through the process of creating menus that enrich
    the player’s interaction with your game, ensuring every menu is an integral part
    of the gaming experience.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从脚本玩家输入的基础方面过渡，我们现在将注意力转向在Unity中构建动态菜单的艺术。本节致力于通过精心设计和直观的菜单系统提升玩家的导航体验。在这里，我们将探讨菜单设计的核心原则，深入探讨布局、流程和美学和谐，使菜单不仅功能性强，而且成为游戏本身的无缝延伸。从构建菜单屏幕的基础到脚本交互元素的复杂性，本节将指导您创建丰富玩家与游戏互动的菜单，确保每个菜单都是游戏体验不可或缺的一部分。
- en: Menu design principles
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单设计原则
- en: 'As we delve into the realm of building dynamic menus, it’s imperative to start
    with the foundation: menu design principles. Let’s unravel the key considerations
    that underpin the creation of user-friendly and intuitive menus. The essence of
    effective menu design lies in its ability to guide players smoothly through options
    and choices, enhancing their overall game experience without overwhelming or confusing
    them.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们深入到构建动态菜单的领域时，从基础开始：菜单设计原则至关重要。让我们揭开支撑创建用户友好且直观菜单的关键考虑因素。有效菜单设计的精髓在于其引导玩家顺畅地通过选项和选择的能力，增强他们的整体游戏体验，而不会让他们感到不知所措或困惑。
- en: 'Here are the key considerations in menu design:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是菜单设计的关键考虑因素：
- en: '**Layout**: A well-thought-out layout is the backbone of any effective menu.
    It should be structured in a way that is logical and easy to navigate, with the
    most important or frequently used options readily accessible. The layout should
    cater to the natural reading patterns of the target audience, usually top to bottom
    and left to right for most languages.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：周到的布局是任何有效菜单的骨架。它应该以逻辑性和易于导航的方式构建，最重要的或最常使用的选项应易于访问。布局应适应目标受众的自然阅读模式，对于大多数语言来说通常是自上而下和从左到右。'
- en: '**Navigation flow**: The flow of navigation within your menus should be intuitive,
    allowing players to move between options effortlessly. Complex nested menus should
    be avoided where possible, or designed in such a way that players can easily backtrack
    without getting lost in a maze of choices.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航流程**：您菜单内的导航流程应该是直观的，允许玩家轻松地在选项之间移动。应尽可能避免复杂的嵌套菜单，或者设计得让玩家可以轻松地回溯，而不会在选择的迷宫中迷失。'
- en: '**Aesthetic consistency**: The visual design of your menus should harmonize
    with the overall theme and aesthetic of your game. Consistent use of colors, fonts,
    and artistic styles not only strengthens your game’s brand but also contributes
    to a more immersive player experience. Menus that look like they belong to the
    game world enhance the sense of immersion and engagement.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**美学一致性**：您菜单的视觉设计应与游戏的整体主题和美学相协调。一致地使用颜色、字体和艺术风格不仅能够加强您游戏的品牌形象，而且有助于提升玩家的沉浸式体验。看起来像是游戏世界一部分的菜单可以增强沉浸感和参与感。'
- en: The principles of menu design serve as the guiding star in creating interfaces
    that are not only functional but also an integral part of the player’s journey
    through your game. By prioritizing clarity in layout, simplicity in navigation,
    and harmony in aesthetics, developers can craft menus that elevate the gaming
    experience. As we move forward, these foundational principles will guide the more
    technical aspects of implementing menu functionality and interactivity, ensuring
    that the menus not only serve their purpose but also delight the players.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单设计的原则是创建既实用又成为玩家游戏旅程不可或缺部分的界面的指南星。通过优先考虑布局的清晰度、导航的简洁性和美学的和谐性，开发者可以打造提升游戏体验的菜单。随着我们继续前进，这些基础原则将指导实现菜单功能和技术方面的更多细节，确保菜单不仅完成其功能，还能让玩家感到愉悦。
- en: Implementing menu functionality
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现菜单功能
- en: Building upon the foundational principles of menu design, we now progress to
    the practical implementation of menu functionality within Unity. In this section,
    we will learn about the technical layers involved in bringing menus to life, transitioning
    from the conceptual design to the tangible creation of both simple and complex
    menu systems. Through the lens of Unity and C#, we will explore how to script
    the core interactions and transitions that make menus an interactive gateway for
    players.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单设计的基础原则之上，我们现在进入Unity中菜单功能实现的实际操作。在本节中，我们将了解使菜单栩栩如生的技术层次，从概念设计过渡到简单和复杂菜单系统的实际创建。通过Unity和C#的视角，我们将探讨如何编写核心交互和过渡脚本，使菜单成为玩家互动的门户。
- en: Unity’s flexible environment, coupled with C#’s robust programming capabilities,
    offers a powerful framework for developing dynamic menu systems, ranging from
    simple start screens to complex nested menus.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Unity灵活的环境，结合C#强大的编程能力，为开发动态菜单系统提供了一个强大的框架，从简单的启动屏幕到复杂的嵌套菜单。
- en: 'Here’s a step-by-step guide to creating these interactive menu structures:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建这些交互式菜单结构的分步指南：
- en: '**Setting up basic menu screens**: Begin by establishing the foundational menu
    structures, such as the main menu, pause menu, and settings panels. Utilize Unity’s
    UI components, such as **Canvas**, **Panel**, and **Button**, to create a basic
    navigational interface for the player.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置基本菜单屏幕**：首先建立基础菜单结构，如主菜单、暂停菜单和设置面板。利用Unity的UI组件，如**画布**、**面板**和**按钮**，为玩家创建基本的导航界面。'
- en: '**Scripting interactions**: The core of any menu is its interactivity. Use
    C# to script the interactions within the menus. Define the actions that occur
    when a player clicks a button or selects an option, whether it’s starting a new
    game, adjusting settings, or exiting to the main menu. Each choice should trigger
    a specific response, bringing the menu to life through well-defined code.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写交互脚本**：任何菜单的核心是其交互性。使用C#编写菜单内的交互脚本。定义玩家点击按钮或选择选项时发生的动作，无论是开始新游戏、调整设置还是退出到主菜单。每个选择都应触发特定的响应，通过定义良好的代码使菜单生动起来。'
- en: '**Transitions between menus**: Ensure a seamless navigation experience by implementing
    smooth transitions between different menu screens. This can involve scripting
    animations or changing screens when moving from one menu to another. Effective
    transitions enhance the visual feedback and overall usability of the menu system,
    making it intuitive and engaging for players.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**菜单之间的过渡**：通过在不同菜单屏幕之间实现平滑过渡，确保无缝的导航体验。这可能包括编写动画脚本或在不同菜单之间切换屏幕。有效的过渡增强了视觉反馈和菜单系统的整体可用性，使玩家操作直观且引人入胜。'
- en: 'Consider the following C# script example, which demonstrates a basic menu interaction
    for loading a new game scene:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下C#脚本示例，它演示了加载新游戏场景的基本菜单交互：
- en: '[PRE2]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this script, the `StartGame` function loads a new game scene, while the `QuitGame`
    function closes the game application, showcasing fundamental menu functionalities.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在此脚本中，`StartGame`函数加载新游戏场景，而`QuitGame`函数关闭游戏应用，展示了基本的菜单功能。
- en: The implementation of menu functionality is a critical step in transforming
    static designs into interactive experiences. Through Unity and C#, developers
    have the tools at their fingertips to create responsive menus that engage players
    and smoothly guide them through the game’s interface. As we advance to the next
    topic, we’ll delve deeper into the integration of interactive UI components within
    these menus, such as **Sliders**, **toggles**, and **dropdowns**, further enriching
    the player’s interaction with the game.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将菜单功能实现是静态设计转变为交互式体验的关键步骤。通过Unity和C#，开发者可以轻松地创建响应式菜单，吸引玩家并引导他们顺畅地浏览游戏界面。随着我们进入下一个主题，我们将更深入地探讨这些菜单中交互式UI组件的集成，例如**滑块**、**开关**和**下拉菜单**，进一步丰富玩家与游戏的互动。
- en: Interactive elements in menus
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单中的交互元素
- en: Transitioning from the fundamental aspects of implementing menu functionality,
    we delve into the dynamic world of interactive elements in menus. This section
    emphasizes the significance of embedding interactive UI components such as **Buttons**,
    **Sliders**, **toggles**, and **dropdowns** within your game menus. These elements
    not only enrich the player’s navigational experience but also provide them with
    the control to tailor game settings to their preferences, thereby enhancing the
    overall engagement with your game.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从实现菜单功能的基本方面过渡到菜单中交互元素的动态世界。本节强调在游戏菜单中嵌入交互式UI组件（如**按钮**、**滑块**、**开关**和**下拉菜单**）的重要性。这些元素不仅丰富了玩家的导航体验，还为他们提供了根据个人喜好调整游戏设置的控制权，从而增强了玩家与游戏的整体互动。
- en: Enhancing menus with interactive elements
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在菜单中添加交互元素
- en: 'Interactive components serve as the building blocks for a versatile and user-friendly
    menu system. Each element plays a unique role:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 交互组件是灵活且用户友好的菜单系统的构建块。每个元素都扮演着独特的角色：
- en: '**Buttons**: The primary tool for player interaction within menus, buttons
    can be programmed to execute a wide range of actions, from starting the game to
    accessing the settings menu.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按钮**：菜单中玩家交互的主要工具，按钮可以编程执行从开始游戏到访问设置菜单的广泛操作。'
- en: '**Sliders**: Ideal for adjusting settings that range in value, such as volume
    or graphics quality, sliders offer a visual and intuitive means for players to
    fine-tune their game experience.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑块**：适用于调整范围值设置，如音量或图形质量，滑块为玩家提供了一个直观的视觉方式来微调游戏体验。'
- en: '**Toggles**: Used for binary settings, such as enabling/disabling sound effects
    or switching between different game modes, toggles provide a simple switch mechanism
    in the UI.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开关**：用于二进制设置，例如启用/禁用音效或在不同游戏模式之间切换，开关在用户界面中提供了一个简单的切换机制。'
- en: '**Dropdowns**: When multiple options are available, but space is limited, drop-down
    menus are a compact solution for choices such as screen resolution or language
    selection.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下拉菜单**：当有多个选项可用但空间有限时，下拉菜单是屏幕分辨率或语言选择等选项的紧凑解决方案。'
- en: Scripting these components in Unity involves not just visual placement but also
    defining their behavior and interaction with the game settings. For example, a
    slider might adjust the background music volume, while a toggle could activate
    a game’s night mode.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中编写这些组件的脚本不仅涉及视觉放置，还包括定义它们的行为以及与游戏设置之间的交互。例如，滑块可能调整背景音乐的音量，而开关可能激活游戏的夜间模式。
- en: 'Consider this simple C# script example that adjusts game volume using a slider:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个简单的C#脚本示例，它使用滑块调整游戏音量：
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This script demonstrates how a slider’s value, represented by the player’s input,
    directly influences the game’s volume settings, showcasing the interactivity within
    menus.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本演示了滑块值（代表玩家的输入）如何直接影响游戏音量设置，展示了菜单内的交互性。
- en: Integrating interactive UI components into menus not only makes them more engaging
    but also empowers players by giving them control over their game environment.
    Through thoughtful design and precise scripting in Unity, developers can create
    menus that are not just a series of options but a pivotal part of the player’s
    journey. As we continue to explore the depths of game development, the role of
    interactive menus in crafting immersive experiences becomes increasingly evident,
    bridging the gap between player preference and game functionality.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将交互式UI组件集成到菜单中不仅使它们更具吸引力，还通过让玩家控制他们的游戏环境来赋予他们权力。通过精心设计和Unity中的精确脚本编写，开发者可以创建不仅是一系列选项，而且是玩家旅程关键部分的菜单。随着我们继续探索游戏开发的深度，交互式菜单在创造沉浸式体验中的作用变得越来越明显，它弥合了玩家偏好和游戏功能之间的差距。
- en: Here, we’ve covered the essentials of crafting intuitive menus, from design
    principles and functionality to incorporating interactive elements. Moving forward,
    we’ll explore crafting custom interactions with GameObjects, focusing on creating
    unique gameplay mechanics and dynamics to enhance player engagement and deepen
    the gameplay experience.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们涵盖了构建直观菜单的基本要素，从设计原则和功能到融入交互元素。展望未来，我们将探讨使用GameObject创建自定义交互，重点关注创造独特的游戏机制和动态，以增强玩家参与度和深化游戏体验。
- en: Custom interactions with GameObjects
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与GameObject的自定义交互
- en: In this section, we will explore the creation of unique gameplay elements that
    elevate player engagement and enrich the game’s depth. By defining custom interactions
    and delving into the scripting of interaction mechanics with C# in Unity, we unlock
    new dimensions of gameplay. From intricate puzzle mechanisms to immersive narrative
    elements and dynamic combat systems, this section provides practical examples
    and guides on implementing these custom interactions, showcasing the transformative
    impact they have on the gaming experience.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨创建独特的游戏元素，这些元素可以提升玩家参与度并丰富游戏的深度。通过定义自定义交互并深入研究使用Unity中的C#编写的交互机制脚本，我们解锁了游戏的新维度。从复杂的谜题机制到沉浸式的叙事元素和动态战斗系统，本节提供了实现这些自定义交互的实用示例和指南，展示了它们对游戏体验的变革性影响。
- en: Defining custom interactions
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义自定义交互
- en: Exploring custom interactions in game development enhances player engagement
    and adds complexity, creating a more immersive experience that invites deeper
    exploration into the game world. These unique elements, from novel puzzle solutions
    to interactive story twists and innovative combat mechanics, serve as cornerstones
    for memorable gaming moments. By breaking the monotony of standard gameplay and
    challenging players to think creatively, these interactions enrich the narrative
    and infuse games with a unique personality, ensuring each playthrough feels fresh
    and engaging.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 探索游戏开发中的自定义交互可以增强玩家的参与度，并增加复杂性，创造一个更具沉浸感的体验，邀请玩家更深入地探索游戏世界。这些独特的元素，从新颖的谜题解决方案到互动的故事转折和创新性的战斗机制，都是难忘游戏时刻的基石。通过打破标准游戏的单调性，挑战玩家进行创造性思考，这些交互丰富了叙事，并为游戏注入了独特的个性，确保每一次游戏体验都感觉新鲜且引人入胜。
- en: So, in essence, defining and integrating custom interactions into games is pivotal
    for creating compelling and immersive experiences. Such interactions enrich the
    gameplay, making it more engaging and dynamic, and ultimately contribute to the
    game’s depth and replayability.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本质上，定义和集成自定义交互到游戏中对于创造引人入胜和沉浸式的体验至关重要。这样的交互丰富了游戏玩法，使其更具吸引力和动态性，并最终有助于游戏的深度和可玩性。
- en: Scripting interaction mechanics
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写交互机制脚本
- en: Delving into the scripting of interaction mechanics is a crucial phase in game
    development, transforming theoretical designs into dynamic gameplay through C#
    coding within Unity’s versatile environment. At the core of this process is the
    adept use of methods and event handlers, which allow GameObjects to meaningfully
    interact with players, enhancing responsiveness and immersion. For example, event
    handlers can trigger a character’s jump in response to a keypress or activate
    puzzle mechanisms when interacting with specific objects.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究交互机制脚本编写是游戏开发的关键阶段，通过在Unity的灵活环境中使用C#编码将理论设计转化为动态游戏玩法。这个过程的核心是熟练使用方法和事件处理器，这允许GameObject与玩家进行有意义的互动，增强响应性和沉浸感。例如，事件处理器可以在按键时触发角色的跳跃或在与特定对象交互时激活谜题机制。
- en: So, scripting interaction mechanics is a fundamental step in breathing life
    into game designs, transforming static elements into dynamic entities that engage
    with players. Through careful scripting and the strategic use of Unity’s C# capabilities,
    developers can create a rich tapestry of interactions that elevate the gaming
    experience.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，编写交互机制脚本是将生命注入游戏设计的基本步骤，将静态元素转化为与玩家互动的动态实体。通过仔细的脚本编写和Unity的C#能力的战略使用，开发者可以创建丰富的交互体验，提升游戏体验。
- en: Examples of custom interactions
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义交互的例子
- en: 'Exploring examples of custom interactions unveils the diverse possibilities
    within game development, showcasing how unique mechanics can significantly enhance
    gameplay. From intricate puzzles and narrative-driven choices to innovative combat
    systems, these elements encourage deeper player immersion and interaction:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 探索自定义交互的例子揭示了游戏开发中的多样性可能性，展示了独特的机制如何显著增强游戏体验。从复杂的谜题和叙事驱动的选择到创新的战斗系统，这些元素鼓励玩家更深入地沉浸和互动：
- en: 'Consider a puzzle mechanism where players must align symbols to unlock a door,
    implemented through a simple rotation interaction:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑一个谜题机制，玩家必须对齐符号来解锁一扇门，通过简单的旋转交互实现：
- en: '[PRE4]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is a script that would be attached to a symbolic GameObject in the scene.
    A script on the player would listen for the assigned input, such as pressing the
    *R* key, and then contact this symbol script. Additionally, it would keep track
    of the rotations and report when the symbol is in the correct position.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个将被附加到场景中象征性GameObject上的脚本。玩家脚本会监听分配的输入，例如按下*R*键，然后与这个象征性脚本接触。此外，它还会跟踪旋转并报告符号是否处于正确的位置。
- en: 'For an interactive narrative, player choices could impact the story’s direction,
    with a script managing the narrative flow based on those choices:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一个交互式叙事，玩家的选择可能会影响故事的方向，脚本会根据这些选择管理叙事流程：
- en: '[PRE5]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The script would be placed on an NPC. It’s a skeleton structure that needs to
    be completed for the expected interaction. An example might be choosing between
    a red pill or a blue pill.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个脚本将被放置在NPC上。它是一个需要完成以实现预期交互的骨架结构。一个例子可能是选择红色药丸或蓝色药丸。
- en: 'In a unique combat system, a special attack might be activated when players
    perform a specific combo:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个独特的战斗系统中，当玩家执行特定的组合时可能会激活特殊攻击：
- en: '[PRE6]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The script we looked at would be placed on an NPC. Each time the NPC fights,
    it checks this script. If it is the third fight, the NPC will fight differently.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们所查看的脚本将被放置在NPC上。每次NPC战斗时，它都会检查这个脚本。如果是第三次战斗，NPC将会有不同的战斗方式。
- en: These examples illustrate the breadth of custom interactions achievable in Unity.
    Through creative scripting and the versatile use of C#, developers can craft experiences
    that captivate and challenge players in novel ways.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子展示了在Unity中可以实现的定制交互的广度。通过创造性的脚本编写和C#的灵活使用，开发者可以创造出以新颖方式吸引和挑战玩家的体验。
- en: So, custom interactions represent the heart of innovative game design, offering
    fresh avenues for player engagement. Whether through puzzles, narrative choices,
    or combat, these interactions deepen the gameplay experience, demonstrating how
    your creativity can leverage the comprehensive mechanics in Unity to craft limitless
    game possibilities.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，自定义交互代表了创新游戏设计的核心，为玩家参与提供了新的途径。无论是通过谜题、叙事选择还是战斗，这些交互加深了游戏体验，展示了你的创造力如何利用Unity中的全面机制来创造无限的游戏可能性。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve journeyed through the intricacies of building dynamic
    menus and scripting custom interactions, uncovering the potential of Unity and
    C# to create engaging UI elements and unique gameplay mechanics. From designing
    intuitive menus to implementing novel puzzle mechanisms and interactive narratives,
    we’ve laid a foundation for crafting immersive game experiences.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了构建动态菜单和编写自定义交互的复杂性，揭示了Unity和C#在创建引人入胜的UI元素和独特游戏机制方面的潜力。从设计直观的菜单到实现新颖的谜题机制和交互式叙事，我们为打造沉浸式游戏体验奠定了基础。
- en: As we transition to the next chapter, our focus shifts from the abstract realm
    of UI and interaction design to the tangible world of physics and animation in
    Unity, where we’ll explore how to breathe life and realism into our game worlds,
    making every movement and interaction feel authentic.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们过渡到下一章，我们的焦点从UI和交互设计的抽象领域转向Unity中物理和动画的实体世界，我们将探讨如何为我们的游戏世界注入生命和现实感，使每一个动作和交互都显得真实。
