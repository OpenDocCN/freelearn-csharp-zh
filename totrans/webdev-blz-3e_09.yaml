- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sharing Code and Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the book, we have been building a project that can run in many different
    hosting models. This is a great way to build our projects if we want to switch
    technologies further down the road or, as we do at work, share components between
    the customer portal and our internal **customer relationship management** (**CRM**)
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Always think about if there might be a sharable part of the component we are
    building; that way, we can reuse it, and if we add something to the component,
    we get that benefit for all our components.
  prefs: []
  type: TYPE_NORMAL
- en: But it’s not only about sharing components inside our own projects. What if
    we want to create a library that can be shared with other departments, or even
    an open-source project sharing components with the world?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at some of the things we already use when sharing
    components, and also at sharing CSS and other static files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have followed the previous chapters or use the `Chapter08` folder
    as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter’s result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: If you are jumping into this chapter using the code from GitHub, make sure you
    have added `Auth0` account information in the settings files. You can find the
    instructions in *Chapter 8*, *Authentication and Authorization*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding static files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blazor can use static files, such as images, CSS, and JavaScript. If we put
    our files in the `wwwroot` folder, they will automatically be exposed to the internet
    and be accessible from the root of our site. The nice thing about Blazor is that
    we can do the same with a library; it is super easy to distribute static files
    within a library.
  prefs: []
  type: TYPE_NORMAL
- en: At work, we share components between all of our Blazor projects, and the shared
    library can also depend on other libraries. By sharing components and building
    our own components (sometimes on top of other libraries), we ensure we have the
    same look and feel throughout a site. We also share static content like images
    and CSS, and this makes it simple and fast if we need to change something and
    we want all of our sites to be affected.
  prefs: []
  type: TYPE_NORMAL
- en: To link to a resource in another library/assembly, we can use the `_content`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The HTML `link` tag, `rel`, and `href` are ordinary HTML tags and attributes,
    but adding the URL that starts with `_content` tells us that the content we want
    to access is in another library. The name of the library (assembly name), in our
    case, `SharedComponents`, is followed by the file we want to access, which is
    stored in the `wwwroot` folder in our library.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor is, in the end, just HTML, and HTML can be styled using CSS. As mentioned,
    the Blazor templates are using Bootstrap by default, and we will continue to use
    that as well.
  prefs: []
  type: TYPE_NORMAL
- en: There is an excellent site with easy-to-use Bootstrap themes ready to be downloaded,
    which can be found at [https://bootswatch.com/](https://bootswatch.com/).
  prefs: []
  type: TYPE_NORMAL
- en: I like the Darkly theme, so that’s the one we’ll use, but feel free to experiment
    with this later on.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I often get asked about how to style Blazor apps, and the truth is you can use
    all the things you are used to. In the end, Blazor will output HTML. There are
    many languages and frameworks we can use to write our CSS.
  prefs: []
  type: TYPE_NORMAL
- en: We can use CSS, **Syntactically Awesome Stylesheets** (**SASS**), and **Leaner
    CSS** (**LESS**). As long as the output is CSS, we can use it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will stick with Bootstrap and continue using CSS. SASS and
    LESS are beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Tailwind is a popular framework for Blazor, and it is absolutely possible to
    use it together with Blazor. Tailwind is very component focused and needs a bit
    of configuration to start, but if it is something you have worked with and like,
    you can use it together with Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many templates use Bootstrap as a base, so if you are looking for a design for
    your website, using a Bootstrap-based template will be an easy implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with Bootstrap (and why some people don’t like it) is that many
    sites use Bootstrap and “all sites look the same.” This can be good if we are
    building a **line of business** (**LOB**), but it can be bad if we are trying
    to be innovative. Bootstrap is also quite large when it comes to downloading,
    so that is also an argument against it.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is about making our blog look a bit nicer, so we will stick with
    Bootstrap, but we should know that if we use something else to handle our CSS,
    it will work with Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of these template sites is `Bootswatch`, which gives us some nice variations
    from the traditional Bootstrap themes:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://bootswatch.com/darkly/](https://bootswatch.com/darkly/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top menu called `Darkly`, there are some links. Download `bootstrap.min.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `SharedComponents` project, in the `wwwroot` folder, add the `bootstrap.min.css`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have all the prerequisites and CSS that we can add to our site.
  prefs: []
  type: TYPE_NORMAL
- en: Adding CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, it’s time to add a new style to our site:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `BlazorWebApp` project, open `Components/App.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate this row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the preceding row with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the project by pressing *Ctrl* + *F5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! Our Blazor project is now updated to use the new style. The main color
    should now be dark, but there is still some work to do.
  prefs: []
  type: TYPE_NORMAL
- en: Making the admin interface more usable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now clean it up some more. We have only started with the admin functionality,
    so let’s make it more accessible. The menu on the left is no longer required,
    so let’s change it so that it is only visible if you are an administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Components/Layout/MainLayout.razor` and put `AuthorizeView` around the
    `sidebar` `div` like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we are not specifying `Authorized` or `NotAuthorized`. The default
    behavior is `Authorized`, so if we are only looking for an authorized state, we
    don’t need to specify it by name.
  prefs: []
  type: TYPE_NORMAL
- en: Start the project to see it in action. The menu should not be shown if we are
    not logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to make the menu look better. Even though the counter is really
    fun to click on, it doesn’t make much sense regarding our blog.
  prefs: []
  type: TYPE_NORMAL
- en: Making the menu more useful
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We should replace the links with links to our admin pages instead:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `BlazorWebApp` project, open the `Components/Layout/Navmenu.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the code so that it looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we start the project and resize the screen, we will notice that the menu
    shows up on large screens but is hidden on smaller ones. One thing worth noticing
    is that `NavMenu` doesn’t contain code, so the menu hiding and showing up depending
    on screen size is all done using CSS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! Our blog is looking more like a blog, but we can do more!
  prefs: []
  type: TYPE_NORMAL
- en: Making the blog look like a blog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The admin interface is done (at least, for now), and we should focus on the
    front page of our blog. The front page should have the title of the blog post
    and some descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `SharedComponents` project, open the `Pages/Home.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `using` statement for `Markdig` at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `OnInitializedAsync` method to handle the instantiation of the `Markdig`
    pipeline (this is the same code we have in the `Post.razor` file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `Virtualize` component, change the content (`RenderFragment`) to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also, remove the `<ul>` tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, run the project using *Ctrl* + *F5* and look at our new front page. Our
    blog is starting to take form, but we still have work to do.
  prefs: []
  type: TYPE_NORMAL
- en: CSS isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In .NET 5, Microsoft added something called isolated CSS. This is something
    that many other frameworks have as well. The idea is to write CSS specifically
    for one component. The upside, of course, is that the CSS that we create won’t
    impact any of the other components.
  prefs: []
  type: TYPE_NORMAL
- en: The template for Blazor uses isolated CSS for `Components/Layout/MainLayout.razor`
    and `NavMenu.Razor`. If we expand `MainLayout.razor`, we’ll see a file called
    `MainLayout.razor.css`. The tree is made possible thanks to using the same naming.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use SASS here by adding a file called `MainLayout.razor.scss`. The
    important thing is that the file we add should generate a file called `MainLayout.razor.css`
    for the compiler to pick up.
  prefs: []
  type: TYPE_NORMAL
- en: This naming convention will make sure to rewrite CSS and the HTML output.
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS has the following naming convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It will be rewritten as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This means the elements need to have an attribute called `b-bfl5h5967n` (in
    this case) for the style to be applied. This is a randomly generated string for
    this component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `div` tag that has the `CSS` tag within the `MainLayout` component will
    be outputted like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For all of this to happen, we also need to have a link to the CSS (which is
    provided by the template), and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This becomes useful for component libraries. We have components that have isolated
    CSS in our shared library (`NavMenu` and `MainLayout`), and the CSS for the `NavMenu`
    component is included in the `{Assemblyname}.styles.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: We don’t have to do anything extra to include our shared CSS. If we are creating
    a library for anyone, we should consider using the isolated CSS approach if our
    components need some CSS to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: If we are starting our Blazor project from an empty template, we need to add
    a link to the isolated CSS.
  prefs: []
  type: TYPE_NORMAL
- en: This way, our users won’t have to add a reference to our CSS, and there is no
    risk of our CSS breaking something in the user’s app (since it’s isolated). The
    important thing is that we use the right approach when it makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we are creating a component that has very specific styles, which only
    that component will use. In that case, isolated CSS is a great way to go, it is
    easier to find (right by the component), and we can use CSS variables for colors
    and such.
  prefs: []
  type: TYPE_NORMAL
- en: We should be careful when styling similar things inside of the isolated CSS,
    so we don’t end up having a bunch of different CSS files styling a button, for
    example.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, the isolated CSS only affects the HTML tags inside the component,
    but what if we have a component inside our component?
  prefs: []
  type: TYPE_NORMAL
- en: If we open `Component/Layout/NavMenu.razor.css`, we can see that for the `.nav-item`
    styles, some of them are using the `::deep` keyword;this is to say that even child
    components should also be affected by this style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It is targeting the `<a>` tag, but the Razor code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It is the `NavLink` component that renders the `<a>` `t`ag; by adding `::deep`,
    we are saying we want to apply this style to all elements with the `.nav-item`
    class and all the `<a>` `t`ags inside that element.
  prefs: []
  type: TYPE_NORMAL
- en: There is one more thing we need to know about – `::deep`; it makes sure to share
    the ID of the attribute (`b-bfl5h5967n`, for example), and it needs an HTML tag
    to do so. So, if we have a component that consists of other components (not adding
    any HTML tags at all), we need to add an HTML tag around the content to make `::deep`
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Before we summarize this chapter, let us do one more thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s fix the background color of the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Components/Layout/MainLayout.razor.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the `.sidebar` style and replace it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `.top-row` style with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We replaced the background color and removed a border.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `.top-row ::deep a, .top-row ::deep .btn-link` style, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we are able to see the login/logout link a bit better.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a working admin interface and a good-looking site.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have added shared CSS.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to create shared libraries (for others to use). This is also a great
    way to structure our in-house projects (so that it is easy to change from Blazor
    Server to Blazor WebAssembly, or the other way around).
  prefs: []
  type: TYPE_NORMAL
- en: If you have a site already, you can build your Blazor components in a shared
    library, which we have done throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Using components as part of your site (using Blazor Server), you can get started
    with Blazor bit by bit until you have converted the whole thing. When that is
    done, you can decide whether or not to keep using Blazor Server (as I mentioned,
    we use Blazor Server at my workplace) or move to Blazor WebAssembly, or use both
    as our project does.
  prefs: []
  type: TYPE_NORMAL
- en: We talked about how we can use SASS and CSS in our site, both *regular* CSS
    and *isolated* CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the one thing we are trying to avoid
    (at least, I am) as Blazor developers – JavaScript.
  prefs: []
  type: TYPE_NORMAL
