["```cs\ndotnet new console\n```", "```cs\ndotnet add package Microsoft.Extensions.Hosting\n```", "```cs\ndotnet add reference ../Fundamentals/Fundamentals.csproj\n```", "```cs\nusing Fundamentals;\nnamespace EventSourcing;\npublic record EventSourceId(string Value) :\n  ConceptAs<string>(Value)\n{\n    public static EventSourceId New() =>\n      new(Guid.NewGuid().ToString());\n}\n```", "```cs\nusing Fundamentals;\nnamespace EventSourcing;\npublic record EventSequenceNumber(ulong Value) :\n  ConceptAs<ulong>(Value)\n{\n    public static implicit operator\n      EventSequenceNumber(ulong value) => new(value);\n}\n```", "```cs\nnamespace EventSourcing;\n[AttributeUsage(AttributeTargets.Class, AllowMultiple =\n  false)]\npublic sealed class ObserverAttribute : Attribute\n{\n}\n```", "```cs\nnamespace EventSourcing;\npublic record EventContext(\n    EventSourceId EventSourceId,\n    EventSequenceNumber SequenceNumber,\n    DateTimeOffset Occurred);\n```", "```cs\nnamespace EventSourcing;\npublic interface IEvent { }\n```", "```cs\nvoid <name-of-method>(YourEventType @event);\nvoid <name-of-method>(YourEventType @event, EventContext\n  context);\n```", "```cs\nTask <name-of-method>(YourEventType @event);\nTask <name-of-method>(YourEventType @event, EventContext\n  context);\n```", "```cs\nusing System.Reflection;\nnamespace EventSourcing;\npublic class ObserverHandler\n{\n    readonly Dictionary<Type, IEnumerable<MethodInfo>>\n      _methodsByEventType;\n    readonly IServiceProvider _serviceProvider;\n    readonly Type _targetType;\n    public IEnumerable<Type> EventTypes =>\n      _methodsByEventType.Keys;\n    public ObserverHandler(IServiceProvider\n      serviceProvider, Type targetType)\n    {\n        _serviceProvider = serviceProvider;\n        _targetType = targetType;\n        _methodsByEventType =\n          targetType.GetMethods(BindingFlags.Instance |\n          BindingFlags.NonPublic | BindingFlags.Public)\n                                        .Where(_ =>\n                                      IsObservingMethod(_))\n                                        .GroupBy(_ =>\n                                      _.GetParameters()[0].\n                                      ParameterType)\n                                        .ToDictionary(_ =>\n                                      _.Key, _ =>\n                                      _.ToArray()\n                                      .AsEnumerable());\n    }\n}\n```", "```cs\nbool IsObservingMethod(MethodInfo methodInfo)\n{\n    var isObservingMethod =\n      methodInfo.ReturnType.IsAssignableTo(typeof(Task)) ||\n                            methodInfo.ReturnType ==\n                              typeof(void);\n    if (!isObservingMethod) return false;\n    var parameters = methodInfo.GetParameters();\n    if (parameters.Length >= 1)\n    {\n        isObservingMethod = parameters[0]\n          .ParameterType.IsAssignableTo(typeof(IEvent));\n        if (parameters.Length == 2)\n        {\n            isObservingMethod &= parameters[1]\n              .ParameterType == typeof(EventContext);\n        }\n        else if (parameters.Length > 2)\n        {\n            isObservingMethod = false;\n        }\n        return isObservingMethod;\n    }\n    return false;\n}\n```", "```cs\npublic async Task OnNext(IEvent @event, EventContext\n  context)\n{\n    var eventType = @event.GetType();\n    if (_methodsByEventType.ContainsKey(eventType))\n    {\n        var actualObserver =\n          _serviceProvider.GetService(_targetType);\n        Task returnValue;\n        foreach (var method in\n          _methodsByEventType[eventType])\n        {\n            var parameters = method.GetParameters();\n            if (parameters.Length == 2)\n            {\n                returnValue =\n                  (Task)method.Invoke(actualObserver, new\n                  object[] { @event, context })!;\n            }\n            else\n            {\n                returnValue =\n                  (Task)method.Invoke(actualObserver, new\n                  object[] { @event })!;\n            }\n            if (returnValue is not null) await returnValue;\n        }\n    }\n}\n```", "```cs\nnamespace EventSourcing;\npublic interface IObservers\n{\n    Task OnNext(IEvent @event, EventContext context);\n}\n```", "```cs\nusing System.Reflection;\nusing Fundamentals;\nnamespace EventSourcing;\n[Singleton]\npublic class Observers : IObservers\n{\n    readonly IEnumerable<ObserverHandler> _handlers;\n    public Observers(ITypes types, IServiceProvider\n      serviceProvider)\n    {\n        _handlers = types.All.Where(_ =>\n          _.HasAttribute<ObserverAttribute>())\n                            .Select(_ =>\n                            {\n                                var observer =\n                                  _.GetCustomAttribute\n                                  <ObserverAttribute>()!;\n                                return new\n                                  ObserverHandler(\n                                  serviceProvider, _);\n                            });\n    }\n}\n```", "```cs\npublic Task OnNext(IEvent @event, EventContext context)\n{\n    var tasks = _handlers.Where(_ =>\n      _.EventTypes.Contains(@event.GetType()))\n                        .Select(_ => _.OnNext(@event,\n                          context));\n    return Task.WhenAll(tasks);\n}\n```", "```cs\nnamespace EventSourcing;\npublic interface IEventLog\n{\n    Task Append(EventSourceId eventSourceId, IEvent\n      @event);\n}\n```", "```cs\nnamespace EventSourcing;\npublic class EventLog : IEventLog\n{\n    readonly IObservers _observers;\n    EventSequenceNumber _sequenceNumber = 0;\n    public EventLog(IObservers observers)\n    {\n        _observers = observers;\n    }\n    public async Task Append(EventSourceId eventSourceId,\n      IEvent @event)\n    {\n        // TODO: persist the event\n        await _observers.OnNext(\n            @event,\n            new EventContext(eventSourceId,\n              _sequenceNumber, DateTimeOffset.UtcNow));\n        _sequenceNumber++;\n    }\n}\n```", "```cs\nusing EventSourcing;\nnamespace Chapter12;\npublic record BankAccountOpened(string CustomerName) :\n  IEvent;\npublic record BankAccountClosed() : IEvent;\npublic record DepositPerformed(decimal Amount) : IEvent;\npublic record WithdrawalPerformed(decimal Amount) : IEvent;\n```", "```cs\nusing EventSourcing;\nnamespace Chapter12;\n[Observer]\npublic class AccountLifecycle\n{\n    public Task Opened(BankAccountOpened @event)\n    {\n        Console.WriteLine($\"Account opened for\n          {@event.CustomerName}\");\n        return Task.CompletedTask;\n    }\n    public Task Closed(BankAccountClosed @event,\n      EventContext context)\n    {\n        Console.WriteLine($\"Account with id\n          {context.EventSourceId} closed\");\n        return Task.CompletedTask;\n    }\n}\n```", "```cs\nusing EventSourcing;\nnamespace Chapter12;\n[Observer]\npublic class AccountBalance\n{\n    public Task DepositPerformed(DepositPerformed @event,\n      EventContext context)\n    {\n        Console.WriteLine($\"Deposit of {@event.Amount}\n          performed on {context.EventSourceId}\");\n        return Task.CompletedTask;\n    }\n    public Task WithdrawalPerformed(WithdrawalPerformed\n      @event, EventContext context)\n    {\n        Console.WriteLine($\"Withdrawal of {@event.Amount}\n          performed on {context.EventSourceId}\");\n        return Task.CompletedTask;\n    }\n}\n```", "```cs\nusing Chapter12;\nusing EventSourcing;\nusing Fundamentals;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nvar host = Host.CreateDefaultBuilder()\n    .ConfigureServices((context, services) =>\n    {\n        var types = new Types();\n        services.AddSingleton<ITypes>(types);\n        services.AddBindingsByConvention(types);\n        services.AddSelfBinding(types);\n    })\n    .Build();\n```", "```cs\nvar eventLog = host.Services\n  .GetRequiredService<IEventLog>();\nvar bankAccountId = EventSourceId.New();\neventLog.Append(bankAccountId, new BankAccountOpened(\"Jane\n  Doe\"));\neventLog.Append(bankAccountId, new DepositPerformed(100));\neventLog.Append(bankAccountId, new\n  WithdrawalPerformed(32));\neventLog.Append(bankAccountId, new BankAccountClosed());\n```", "```cs\nAccount opened for Jane Doe\nDeposit of 100 performed on a3d7dbae-9e2a-4d2d-a070-\nead70e48f87a\nWithdrawal of 32 performed on a3d7dbae-9e2a-4d2d-a070-\nead70e48f87a\nAccount with id a3d7dbae-9e2a-4d2d-a070-ead70e48f87a closed\n```", "```cs\npublic interface IObserveEvent<TEvent> where TEvent :\n  IEvent\n{\n    Task Handle(TEvent @event, EventContext context);\n}\n```", "```cs\npublic class AccountLifecycle :\n    IObserveEvent<BankAccountOpened>,\n    IObserveEvent<BankAccountClosed>\n{\n    public Task Handle(BankAccountOpened @event,\n      EventContext context)\n    {\n        Console.WriteLine($\"Account opened for\n          {@event.CustomerName}\");\n        return Task.CompletedTask;\n    }\n    public Task Handle(BankAccountClosed @event,\n      EventContext context)\n    {\n        Console.WriteLine($\"Account with id\n          {context.EventSourceId} closed\");\n        return Task.CompletedTask;\n    }\n}\n```"]