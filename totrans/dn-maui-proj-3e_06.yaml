- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Photo Gallery App Using CollectionView and CarouselView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build an app that shows photos from the camera roll
    (photo gallery) of a user’s device. The user will also be able to select photos
    as favorites. We will then look at the different ways to display photos—in carousels
    and in multi-column grid control. By using the .NET MAUI `CarouselView` control
    to display a group of images, the user can swipe through them to view each image.
    To display a large group of images, we will use the .NET MAUI `CollectionView`
    control and vertical scrolling to allow the user to view all the images. By learning
    how to use these controls, we will be able to use them in a lot of other cases
    when we build real-world apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Requesting permissions from the user to access data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to import photos from the iOS and Mac Catalyst photo gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to import photos from the Android photo gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to import photos from the Windows photo gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use `CarouselView` in .NET MAUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use `CollectionView` in .NET MAUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to complete this project, you will need to have Visual Studio for
    Mac or Windows installed, as well as the necessary .NET MAUI workloads. See *Chapter
    1*, *Introduction to .NET MAUI*, for more details on how to set up your environment.
  prefs: []
  type: TYPE_NORMAL
- en: To build an iOS app using Visual Studio for your PC, you have to have a **Macintosh**
    (**Mac**) device connected. If you don’t have access to a Mac at all, you can
    just follow the Android and Windows part of this project.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the full source for the code in this chapter at [https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition/](https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition/).
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost all apps visualize collections of data, and in this chapter, we will
    focus on two of the .NET MAUI controls that can be used to display data collections—`CollectionView`and
    `CarouselView`. Our app will show the photos that users have on their devices;
    to do that, we need to create a photo importer for each platform—one for iOS and
    Mac Catalyst, one for Windows, and one for Android.
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is about 60 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Building the photo gallery app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project, like all the rest, is a **File** | **New** | **Project...**-style
    project, which means that we will not be importing any code at all. So, this first
    section is all about creating the project and setting up the basic project structure.
  prefs: []
  type: TYPE_NORMAL
- en: It’s time to start building the app using the following steps. Let’s begin!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to create a new .NET MAUI project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio 2022 and select **Create a** **new project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.1 – Visual Studio 2\uFEFF022](img/Figure_6.1_B19214.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Visual Studio 2022
  prefs: []
  type: TYPE_NORMAL
- en: This will open the **Create a new** **project** wizard.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the search field, type in `maui` and select the **.NET MAUI App** item from
    the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.2 – Create a new proje\uFEFFct](img/Figure_6.2_B19214.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Create a new project
  prefs: []
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the next step of the wizard by naming your project. We will be calling
    our application `GalleryApp` in this case. Move on to the next dialog box by clicking
    **Next**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.3 – Configure your new proje\uFEFFct](img/Figure_6.3_B19214.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Configure your new project
  prefs: []
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last step will prompt you for the version of .NET Core to support. At the
    time of writing, .NET 6 is available as **Long-Term Support** (**LTS**), and .NET
    7 is available as **Standard-Term Support**. For the purposes of this book, we
    will assume that you will be using .NET 7.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Additional information](img/Figure_6.4_B19214.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Additional information
  prefs: []
  type: TYPE_NORMAL
- en: Finalize the setup by clicking **Create** and wait for Visual Studio to create
    the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just like that, the app is created. Let’s start by getting some photos to display.
  prefs: []
  type: TYPE_NORMAL
- en: Importing photos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The importing of photos is something that is carried out for all the platforms,
    so we will create a photo importer interface. The interface will have two `Get`
    methods—one that supports paging and one that gets photos with specified filenames.
    Both methods will also take a quality argument, but we will only use that argument
    in the iOS photo importer. The quality argument will be an `enum` type with two
    options—`High` and `Low`. However, before we create the interface, we will create
    a model class that will represent an imported photo using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `Models` in the `GalleryApp` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new class named `Photo` in the recently created folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have created the model class, we can continue to create the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `Services` in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new interface named `IPhotoImporter` in the `Services` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Services` folder, add a new file and create an `enum` type named `Quality`
    with two members—`Low` and `High`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Services` folder, create a new class named `PhotoImporter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This class provides us with the base for the platform-specific implementations.
    By marking it `partial`, we are telling the compiler that there is more to this
    class in other files. We will be putting the implementation in the platform-specific
    folders later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the interface, we can add app permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting app permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your app doesn’t require any of the device’s extra features, such as location,
    camera, or internet, then you will need to use permissions to request access to
    those resources. While each platform implements permissions slightly differently,
    .NET MAUI maps the platform-specific permissions into a common set of permissions
    to make things simpler. The permission system in .NET MAUI is also extensible
    so that you can create your own permissions to best suit your app.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a specific example to see how requesting permissions works. `GalleryApp`
    displays images from a device’s photo library. In the case of iOS and Android,
    the app must declare and request access to the photo library before it can use
    it. While these permissions are configured and named differently, .NET MAUI defines
    a `Photo` permission that hides those implementation details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add a permission check to `GalleryApp`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class named `AppPermissions` in the `GalleryApp` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the class definition to add a `partial` modifier, and remove the default
    constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following class definition to the `AppPermissions` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This creates a type named `AppPermission` that derives from the default .NET
    MAUI `Photos` permission class. It is also marked `partial` to allow for platform-specific
    implementation details to be added. Spoiler alert: we will need to have some platform-specific
    permissions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following method to the `AppPermissions` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CheckRequiredPermission` method is used to ensure our app has the right
    permissions before we attempt any operations that might fail if we don’t. Its
    implementation is to call the .NET MAUI `CheckSyncStatus` with our `AppPermission`
    type. It returns a `PermissionStatus`, which is an `enum` type. We are mostly
    interested in the `Denied` and `Granted` values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `CheckAndRequestRequiredPermission` method to the `AppPermissions`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CheckAndRequestRequiredPermission` method handles the intricacies of requesting
    access from the user. The first step is to simply check whether the permission
    has already been granted, and if it has, return the status. Next, if you are on
    iOS and the permission has been denied, it cannot be requested again, so you must
    instruct the user on how to grant permission to the app by using the settings
    panel. In the request behavior, Android includes the ability to nag the user if
    they have denied access. This behavior is exposed through .NET MAUI with the `ShouldShowRationale`
    method. It will return `false` for any platform that does not support this behavior;
    on Android, it will return `true` the first time the user denies access and `false`
    if the user denies it a second time. Finally, we request access for `AppPermission`
    from the user. Again, .NET MAUI is hiding all the platform implementation details
    from us, making checking and requesting access to certain resources very straightforward.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Look familiar?
  prefs: []
  type: TYPE_NORMAL
- en: If the preceding code looks familiar, it might be. This is the same implementation
    that is described in the .NET MAUI documentation. You can find it at [https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/appmodel/permissions](https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/appmodel/permissions).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the shared `AppPermissions` in place, we can start with the
    platform implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Importing photos from the iOS photo gallery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we will write the iOS code. To access photos, we need permission from
    the user, and we need to explain why we are asking for permission. To do that,
    we add text that explains why we need permission to the `info.plist` file. This
    text will be displayed when we ask the users for permission. To open the `info.plist`
    file, right-click on the file in the `Platforms/iOS` folder and click `Info.plist`
    editor. Add the following text to the end of the `<``dict>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing we will do is implement the `Import` method that reads what
    photos can be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `GalleryApp` project in the `Platforms/iOS` folder, create a new class
    called `PhotoImporter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the namespace declaration from `GalleryApp.Platforms.iOS` to `GalleryApp.Services`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The partial class definitions must be in the same namespace, even though they
    are in different folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `partial` modifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resolve all the references.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `private` field with a `PHAsset` dictionary named `assets`. This will
    be used to store photo information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `private partial` method named `Import`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Import` method, request authorization using the `AppPermissions.Check``AndRequestRequiredPermission`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the user has granted access, fetch all the image assets by using `PHAsset.FetchAssets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we have fetched `PHAssets`for all the photos, but to show the photo, we
    need to get the actual photo. On iOS, to do that, we need to request the image
    for the asset. This is something that is carried out asynchronously, so we will
    use `ObservableCollection`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have what we need to start implementing the two `Get` methods from
    the interface. We will start with the partial `Task<ObservableCollection<Photo>>
    Get(int start, int count, Quality quality = Quality.Low)`method, which will be
    used to get photos from the `CollectionView`view that loads photos incrementally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The other method from the `IPhotoImporter` interface, `Task<ObservableCollection<Photo>>
    Get(List<string> filenames, Quality quality = Quality.Low)`, is very similar to
    the `Task<ObservableCollection<Photo>> Get(int start, int count, Quality quality
    = Quality.Low)` method. The only difference is that there is no code to handle
    indexes, and the `foreach` loop that loops through the result’s array contains
    an `if` statement that checks whether the filename is the same as the current
    `PHAsset` object, and if it is, it calls the `AddImage` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we set `NetworkAccessAllowed = true`. We do this to make
    it possible to download photos from **iCloud**.
  prefs: []
  type: TYPE_NORMAL
- en: Now, one of the four photo importers of our project is complete. The Mac Catalyst
    importer will be the next one we implement.
  prefs: []
  type: TYPE_NORMAL
- en: Importing photos from the Mac Catalyst photo gallery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Mac Catalyst importer is exactly the same as what we just did for iOS.
    However, there isn’t a convenient way to say, “*I need this class for just iOS
    and Mac Catalyst, and nothing else.*” So we will take the path of least resistance
    and just copy the class into the Mac Catalyst platform folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `PhotoImporter.cs` file in the `Platforms/iOS` folder in the
    project and select **Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Platforms/MacCatalyst` folder and select **Paste**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the `Info.plist` file in the `Platforms/MacCatalyst` folder
    and click `<``dict>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That concludes the Mac Catalyst implementation of the `PhotoImporter` class.
    Next, we will work on the Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: Importing photos from the Android photo gallery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have created an implementation for iOS, we will do the same for
    Android. Before we jump right into the importer, we need to address the permissions
    on Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Android API version 33, three new permissions were added to enable read
    access to media files: `ReadMediaImages`, `ReadMediaVideos`, and `ReadMediaAudio`.
    Prior to API version 33, all that was required was the `ReadExternalStorage` permission.
    To properly request the correct permission for the API version of the device,
    create a new file named `AppPermissions` in the `Platform/Android` folder and
    modify it to look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The first two lines add the required permissions to the `AndroidManifet.xml`
    file, similar to what we did manually with the iOS `info.plist` file. However,
    we only need `ReadMediaImages` for API 33+ and `ReadExternalStorage` for API versions
    below 33, so we set `MaxSdkVersion` for the `ReadExternalStorage` property. Then,
    we extend the `AppPermission` class with an implementation of the `RequirePermissions`
    property. In `RequirePermissions`, we return an array containing the `ReadMediaImages`
    permissions if the API version is 33 or higher, or the `ReadExternalStorage` permission
    if the API version is lower than 33\. The Boolean value that is part of the `perms`
    array indicates whether the permission requires requesting access at runtime from
    the user. Now, when the app launches, it will request access for the correct permission
    based on the API level of the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the Android-specific permissions sorted, we can import images
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class named `PhotoImporter` in the project in the `Platforms/Android`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the namespace declaration from `GalleryApp.Platforms.Android` to `GalleryApp.Services`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The partial class definitions must be in the same namespace, even though they
    are in different folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `partial` modifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `using` statement for `GalleryApp.Models` to use the `Photo` class later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Like the iOS implementation, we will start by implementing the `Import` method.
    Add a new method named `Import` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request permissions from the user to get the photos (highlighted in the following
    code block):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, use `ContentResolver` to query for the files and add them to the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will then start editing the `Task<ObservableCollection<Photo>> Get(int start,
    int count, Quality quality = Quality.Low)` method. If the import succeeds, we
    will continue to write the code that handles which photos should be imported in
    this loading of images. Conditions are specified with the `start` and `count`
    parameters. Use the following code listing to implement the first `Get` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Let’s review the preceding code. The first step is to call the `Import` method
    and verify that there are photos to import. If there are none, we simply return
    an empty list. If there are photos to import, then we need to know `startIndex`
    and `endIndex` in the `photos` array to import. The code defaults to `endIndex`
    being `startIndex` plus the count of photos to import. If the count of photos
    to import is greater than the number of photos returned from the `Import` method,
    then `endindex` is adjusted to the length of the photos returned from the `Import`
    method. If `startIndex` is greater than `endIndex`, then we return the list of
    photos. Finally, we can read the images from `startIndex` to `endIndex` from the
    array of photos and return the bytes from the file and just the name of the file
    for each entry.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will continue with the other `Task<ObservableCollection<Photo>> Get`
    **(List<string> filenames, Quality quality =** `Quality.Low)` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `foreach` loop to loop through all the photos and to check whether
    each photo is specified in the `filenames`parameter. If a photo is specified in
    the `filenames` parameter, read the photo from the path, as in the first `Get`method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With the Android importer finished, we can move to the final importer for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Importing photos from the Windows photo gallery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final importer that we need is for the Windows platform. The code will
    follow the same pattern as for the other platforms; however, for Windows, we will
    use the **Windows Search** service to get the list of photos. Let’s see how this
    platform is implemented by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `tlbimp-Windows.Search.Interop` and `System.Data.OleDB` NuGet packages.
    These are needed to search the filesystem for images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `GalleryApp` project by double-clicking it in **Solution Explorer**;
    edit the new imports to add a condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new class called `PhotoImporter` in the `Windows` platform folder,
    and mark it as `partial`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the namespace declaration from `GalleryApp.Platforms.Windows` to `GalleryApp.Services`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `partial` class definitions must be in the same namespace, even though they
    are in different folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `using` directives, so that we can use the classes in those namespaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `private` field to hold the `QueryHelper` reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Like the previous implementations, we will start by implementing the `Import`
    method, so add a new method named `Import` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request permissions from the user to get the photos (highlighted in the following
    code block):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, using `QueryHelper`, get all the image paths:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `QueryHelper` is used to create a SQL query, and we use `OleDbConnection`
    to query the search index for all the matching files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now start editing the `Task<ObservableCollection<Photo>> Get(int start,
    int count, Quality quality = Quality.Low)` method. Add the following declaration
    to the `PhotoImporter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will start the implementation of the method by setting up file patterns
    and the locations we will search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'These arrays define the file extensions and folders that we will search for
    photos. We will then create `QueryHelper` from the `tlbimp-Windows.Search.Interop`
    NuGet package and, using the arrays, configure the query parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`QueryMaxResults` is set so that we only retrieve the results we are looking
    for. Then, we specify that the only data column to return is `"System.ItemPathDisplay"`.
    Next, we set `QueryWhereRestictions` from our list of extensions. Note the use
    of the `range` operator to remove the trailing `"OR"` in the query string. We
    use the same technique to add the locations to `QueryWhereRestrictions`. Finally,
    we set the sort order.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The remainder of the method is going to be very similar to those of the previous
    platforms. If the import succeeds, we will continue to handle what photos should
    be imported in this loading of images. Conditions are specified with the `start`
    and `count` parameters. Use the following code listing to complete the implementation
    of the first `Get` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Let’s quickly review the preceding code. The first step is to call the `Import`
    method and verify that there are photos to import. If there are none, we simply
    return an empty list. If there are photos to import, then we need to know `startIndex`
    and `endIndex` in the `photos` array to import. `startIndex` and `endIndex` are
    adjusted to make sure they are valid for the photos to import. Then, we can read
    the images from `startIndex` to `endIndex` from the array of photos and return
    the bytes from the file and just the name of the file for each entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will continue with the other `Task<ObservableCollection<Photo>> Get(List<string>
    filenames, Quality quality = Quality.Low)` method. Add the following declaration
    to the `PhotoImporter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will start the implementation of the method by setting the search parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For this method, we only need to add all the filenames to `QueryWhereRestrictions`.
    Following that, call the `Import` method, and if it returns results, then use
    a `foreach` loop to loop through all the photos and to check whether each photo
    is specified in the `filenames`parameter. If a photo is specified in the `filenames`
    parameter, read the photo from the path, as in the first `Get`method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The photo importers are now finished, and we are ready to write the rest of
    the app, which will mostly involve adding code that is shared between the platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the app-initializing code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have now written the code that we will use to get data to the app. Let’s
    continue to build the app, starting with initializing the core parts of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up dependency injection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By using dependency injection as a pattern, we can keep our code cleaner and
    more testable. This app will use constructor injection, which means that all the
    dependencies that a class has must be passed through its constructor. The container
    then constructs objects for you, so you don’t have to care too much about the
    dependency chain. Since .NET MAUI already includes a dependency injection framework,
    **Microsoft.Extensions.DependencyInjection**, there is nothing extra to install.
  prefs: []
  type: TYPE_NORMAL
- en: Confused about dependency injection?
  prefs: []
  type: TYPE_NORMAL
- en: Check out the *Wiring up a dependency injection* section in *Chapter 2*, *Building
    Our First .NET MAUI App*, for more details on dependency injection.
  prefs: []
  type: TYPE_NORMAL
- en: While it is recommended to use extension methods to group the types together,
    we have very few types in this app to register so we will use a different method
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Registering PhotoImporter with dependency injection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s add the required code to register the types we have created so far, as
    shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `GalleryApp` project, open `MauiProgram.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the following changes to the `MauiProgram` class (the changes are highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The .NET MAUI `MauiAppBuilder` class exposes the `Services` property, which
    is the dependency injection container. We simply need to add the types we want
    dependency injection to know about and the container will do the rest for us.
    Think of a builder as something that collects a lot of information on what needs
    to be done, and then builds the object we need. It’s a very useful pattern on
    its own, by the way.
  prefs: []
  type: TYPE_NORMAL
- en: We only use the builder for one thing at the moment. Later on, we will use it
    to register any class in the assembly that inherits from our abstract `ViewModel`class
    and our views. The container is now prepared for us to ask for these types.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main navigation for this app will be tabs at the bottom of the screen.
    The app will have a fly-out menu with two options—**Home** and **Gallery**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `Views` in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Views` folder, create two new files using the `MainView` and one named
    `GalleryView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `MainPage.Xaml` and `MainPage.Xaml.cs` files from the root of the
    project since we won’t be needing those.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `AppShell.xaml` file in the root of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add both views to the `Shell` object using the `ContentTemplate` property of
    `ShellContent`. Use the `DataTemplate` markup extension to load the view from
    the dependency injection container:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since the views are loaded via `DataTemplates`, they must be registered with
    dependency injection. Add the highlighted code to `MauiProgram.cs`, after the
    `IPhotoInmporter` line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have created a shell, let’s continue with some other base code before
    we start to create the views.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a base view model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we create an actual view model, we will create an abstract base view
    model that all view models can inherit from. The idea behind this base view model
    is that we can write common code in it. In this case, we will implement the `INotifyPropertyChanged`
    interface by going through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `GalleryApp` project, create a folder named `ViewModels`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a NuGet reference to `CommunityToolkit.Mvvm`; we use `CommunityToolkit.Mvvm`
    for implementing the `INotifyPropertyChanged` interface, as we have in other chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new abstract class named `ViewModel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this app’s `ViewModel` class, we have added an abstract method for `Initialize`.
    Each `ViewModel` implementation will override this method and load the images
    asynchronously for display. The `IsBusy` and `NotIsBusy` properties are used as
    flags to indicate when the data has completed loading.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have a `ViewModel` base that we can use for all `ViewModel` instances
    that we will create later in this project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the gallery view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will start to build the views. We will start with the gallery view,
    which will show the photos as a grid. We will start with `GalleryViewModel`, and
    then create `GalleryView`. Creating the view model first allows Visual Studio
    to use the `GalleryViewModel` definition to check the syntax of the data bindings
    in the XAML file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating GalleryViewModel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`GalleryViewModel`is the class that will be responsible for fetching the data
    and handling the view logic. Because photos will be added asynchronously to the
    photo collection, we don’t want to set `IsBusy`to `false`immediately after we
    call the `Get`method of `PhotoImporter`. We will instead wait 3 seconds first.
    However, we will also add an event listener to the collection so that we can listen
    for changes. If the collection changes and there are items in it, we will set
    `IsBusy`to `false`. Create a class named `GalleryViewModel` in the `ViewModels`
    folder and add the following code to implement this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, register `GalleryViewModel` with dependency injection in `MauiProgram`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now, `GalleryViewModel` is ready, so we can start to create `GalleryView`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating GalleryView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we will create a converter that will convert `byte[]` to `Microsft.Maui.Controls.ImageSource`.
    In the `GalleryApp` project, create a new folder named `Converters`, and inside
    the folder, create a new class named `BytesToImageConverter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: To use the converter, we need to add it as a resource. We will do this by adding
    it to a `Resource` **Dictionary** object in the `Resources` property of `GalleryView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `GalleryView.xaml`, and add the following highlighted code to the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: To be able to bind to `ViewModel`, we will set `BindingContext`to `GalleryViewModel`.
    Use the constructor dependency injection in `GalleryView.xaml.cs` to create an
    instance of `GalleryViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `GalleryView.xaml.cs`, and add the following highlighted code to the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: x:Class=" GalleryApp.Views.GalleryView"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <CollectionView x:Name="Photos" ItemsSource="{Binding Photos}">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <CollectionView.ItemsLayout>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <GridItemsLayout Orientation="Vertical" Span="3"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: HorizontalItemSpacing="0" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </CollectionView.ItemsLayout>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <CollectionView.ItemTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <DataTemplate x:DataType="models:Photo">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Grid>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Image Aspect="AspectFill" Source="{Binding Bytes,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Converter={StaticResource ToImage}}" HeightRequest="120" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </Grid>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </DataTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </CollectionView.ItemTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </CollectionView>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <CollectionView :Name="Photos" ItemsSource="{Binding Photos}"
  prefs: []
  type: TYPE_NORMAL
- en: EmptyView="{Binding}">
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: <CollectionView.EmptyViewTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: <DataTemplate x:DataType="viewModels:GalleryViewModel">
  prefs: []
  type: TYPE_NORMAL
- en: <Grid>
  prefs: []
  type: TYPE_NORMAL
- en: <ActivityIndicator IsVisible="{Binding IsBusy}" />
  prefs: []
  type: TYPE_NORMAL
- en: <Label Text="No photos to import could be found"
  prefs: []
  type: TYPE_NORMAL
- en: IsVisible="{Binding IsNotBusy}" HorizontalOptions="Center"
  prefs: []
  type: TYPE_NORMAL
- en: VerticalOptions="Center" HorizontalTextAlignment="Center" />
  prefs: []
  type: TYPE_NORMAL
- en: </Grid>
  prefs: []
  type: TYPE_NORMAL
- en: </DataTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: </CollectionView.EmptyViewTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: </CollectionView>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: private int itemsAdded;
  prefs: []
  type: TYPE_NORMAL
- en: private void Collection_CollectionChanged(object sender, System.
  prefs: []
  type: TYPE_NORMAL
- en: Collections.Specialized.NotifyCollectionChangedEventArgs args)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: foreach (Photo photo in args.NewItems)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: itemsAdded++;
  prefs: []
  type: TYPE_NORMAL
- en: Photos.Add(photo);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (itemsAdded == 20)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: var collection = (ObservableCollection<Photo>)sender;
  prefs: []
  type: TYPE_NORMAL
- en: collection.CollectionChanged -= Collection_CollectionChanged;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: private int currentStartIndex = 0;
  prefs: []
  type: TYPE_NORMAL
- en: '[RelayCommand]'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task LoadMore()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: currentStartIndex += 20;
  prefs: []
  type: TYPE_NORMAL
- en: itemsAdded = 0;
  prefs: []
  type: TYPE_NORMAL
- en: var collection = await photoImporter.Get(currentStartIndex, 20);
  prefs: []
  type: TYPE_NORMAL
- en: collection.CollectionChanged += Collection_CollectionChanged;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: <CollectionView x:Name="Photos" EmptyView="{Binding}"
  prefs: []
  type: TYPE_NORMAL
- en: ItemsSource="{Binding Photos}" RemainingItemsThreshold="5"
  prefs: []
  type: TYPE_NORMAL
- en: RemainingItemsThresholdReachedCommand="{Binding LoadMoreCommand}">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: public interface ILocalStorage
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: void  Store(string filename);
  prefs: []
  type: TYPE_NORMAL
- en: List<string> Get();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: namespace GalleryApp.Services;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: using System.Text.Json;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'public class MauiLocalStorage : ILocalStorage'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public const string FavoritePhotosKey = "FavoritePhotos";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public List<string> Get()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (Preferences.ContainsKey(FavoritePhotosKey))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var filenames = Preferences.Get(FavoritePhotosKey,string.Empty);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return JsonSerializer.Deserialize<List<string>>(filenames);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return new List<string>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void Store(string filename)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var filenames = Get();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: filenames.Add(filename);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var json = JsonSerializer.Serialize(filenames);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Preferences.Set(FavoritePhotosKey, json);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: builder.Services.AddSingleton<IPhotoImporter>(serviceProvider => new
  prefs: []
  type: TYPE_NORMAL
- en: PhotoImporter());
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<ILocalStorage>(ServiceProvider => new
  prefs: []
  type: TYPE_NORMAL
- en: MauiLocalStorage());
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<ViewModels.MainViewModel>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: private readonly IPhotoImporter photoImporter;
  prefs: []
  type: TYPE_NORMAL
- en: private readonly ILocalStorage localStorage;
  prefs: []
  type: TYPE_NORMAL
- en: public GalleryViewModel(IPhotoImporter photoImporter, ILocalStorage
  prefs: []
  type: TYPE_NORMAL
- en: localStorage)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: this.photoImporter = photoImporter;
  prefs: []
  type: TYPE_NORMAL
- en: this.localStorage = localStorage;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: namespace GalleryApp.Services;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: internal static class Messages
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public const string FavoritesAddedMessage =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: nameof(FavoritesAddedMessage);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[RelayCommand]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void AddFavorites(List<Photo> photos)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: foreach (var photo in photos)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: localStorage.Store(photo.Filename);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: WeakReferenceMessenger.Default.Send<string>(Messages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: FavoritesAddedMessage);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <CollectionView x:Name="Photos"
  prefs: []
  type: TYPE_NORMAL
- en: EmptyView="{Binding}" ItemsSource="{Binding Photos}"
  prefs: []
  type: TYPE_NORMAL
- en: SelectionMode="Multiple" RemainingItemsThreshold="5"
  prefs: []
  type: TYPE_NORMAL
- en: RemainingItemsThresholdReachedCommand="{Binding LoadMore}">
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: <ContentPage.Resources>
  prefs: []
  type: TYPE_NORMAL
- en: <ResourceDictionary>
  prefs: []
  type: TYPE_NORMAL
- en: <converters:BytesToImageConverter x:Key="ToImage" />
  prefs: []
  type: TYPE_NORMAL
- en: <Style TargetType="Grid">
  prefs: []
  type: TYPE_NORMAL
- en: <Setter Property="VisualStateManager.VisualStateGroups">
  prefs: []
  type: TYPE_NORMAL
- en: <VisualStateGroupList>
  prefs: []
  type: TYPE_NORMAL
- en: <VisualStateGroup x:Name="CommonStates">
  prefs: []
  type: TYPE_NORMAL
- en: <VisualState x:Name="Normal" />
  prefs: []
  type: TYPE_NORMAL
- en: <VisualState x:Name="Selected">
  prefs: []
  type: TYPE_NORMAL
- en: <VisualState.Setters>
  prefs: []
  type: TYPE_NORMAL
- en: <Setter Property="Opacity" Value="0.5" />
  prefs: []
  type: TYPE_NORMAL
- en: </VisualState.Setters>
  prefs: []
  type: TYPE_NORMAL
- en: </VisualState>
  prefs: []
  type: TYPE_NORMAL
- en: </VisualStateGroup>
  prefs: []
  type: TYPE_NORMAL
- en: </VisualStateGroupList>
  prefs: []
  type: TYPE_NORMAL
- en: </Setter>
  prefs: []
  type: TYPE_NORMAL
- en: </Style>
  prefs: []
  type: TYPE_NORMAL
- en: </ResourceDictionary>
  prefs: []
  type: TYPE_NORMAL
- en: </ContentPage.Resources>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: <ContentPage.ToolbarItems>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <ToolbarItem Text="Select" Clicked="SelectToolBarItem_
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicked" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ContentPage.ToolbarItems>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: using GalleryApp.Models;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: using GalleryApp.ViewModels;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private void SelectToolBarItem_Clicked(object sender, EventArgs e)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (!Photos.SelectedItems.Any())
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: DisplayAlert("No photos", "No photos selected", "OK");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var viewModel = (GalleryViewModel)BindingContext;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: viewModel.AddFavoritesCommand.Execute(Photos.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SelectedItems.Select(x =>(Photo)x).ToList());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: DisplayAlert("Added", "Selected photos have been added to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: favorites", "OK");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: namespace GalleryApp.ViewModels;
  prefs: []
  type: TYPE_NORMAL
- en: using CommunityToolkit.Mvvm.ComponentModel;
  prefs: []
  type: TYPE_NORMAL
- en: using CommunityToolkit.Mvvm.Messaging;
  prefs: []
  type: TYPE_NORMAL
- en: using GalleryApp.Models;
  prefs: []
  type: TYPE_NORMAL
- en: using GalleryApp.Services;
  prefs: []
  type: TYPE_NORMAL
- en: using System.Collections.ObjectModel;
  prefs: []
  type: TYPE_NORMAL
- en: 'public partial class MainViewModel : ViewModel'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: private readonly IPhotoImporter photoImporter;
  prefs: []
  type: TYPE_NORMAL
- en: private readonly ILocalStorage localStorage;
  prefs: []
  type: TYPE_NORMAL
- en: '[ObservableProperty]'
  prefs: []
  type: TYPE_NORMAL
- en: private ObservableCollection<Photo> recent;
  prefs: []
  type: TYPE_NORMAL
- en: '[ObservableProperty]'
  prefs: []
  type: TYPE_NORMAL
- en: private ObservableCollection<Photo> favorites;
  prefs: []
  type: TYPE_NORMAL
- en: public MainViewModel(IPhotoImporter photoImporter, ILocalStorage
  prefs: []
  type: TYPE_NORMAL
- en: localStorage)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: this.photoImporter = photoImporter;
  prefs: []
  type: TYPE_NORMAL
- en: this.localStorage = localStorage;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: override protected internal async Task Initialize()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: var photos = await photoImporter.Get(0, 20, Quality.Low);
  prefs: []
  type: TYPE_NORMAL
- en: Recent = photos;
  prefs: []
  type: TYPE_NORMAL
- en: await LoadFavorites();
  prefs: []
  type: TYPE_NORMAL
- en: WeakReferenceMessenger.Default.Register<string>(this, async
  prefs: []
  type: TYPE_NORMAL
- en: (sender, message) => {
  prefs: []
  type: TYPE_NORMAL
- en: if( message == Messages.FavoritesAddedMessage )
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await MainThread.InvokeOnMainThreadAsync(LoadFavorites);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: private async Task LoadFavorites()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: var filenames = localStorage.Get();
  prefs: []
  type: TYPE_NORMAL
- en: var favorites = await photoImporter.Get(filenames, Quality.Low);
  prefs: []
  type: TYPE_NORMAL
- en: Favorites = favorites;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services.AddTransient<ILocalStorage>(ServiceProvider
  prefs: []
  type: TYPE_NORMAL
- en: => new MauiLocalStorage());
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<ViewModels.MainViewModel>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<ViewModels.GalleryViewModel>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: public MainView(MainViewModel viewModel)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InitializeComponent();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: BindingContext = viewModel;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: MainThread.InvokeOnMainThreadAsync(viewModel.Initialize);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <ContentPage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: x:Class="GalleryApp.Views.MainView"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: x:DataType="viewModels:MainViewModel"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Title="My Photos">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <ContentPage.Resources>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <ResourceDictionary>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <converters:BytesToImageConverter x:Key="ToImage" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ResourceDictionary>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ContentPage.Resources>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Grid>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Grid.RowDefinitions>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <RowDefinition Height="*" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <RowDefinition Height="50" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <RowDefinition Height="*" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <RowDefinition Height="20" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </Grid.RowDefinitions>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <CarouselView ItemsSource="{Binding Recent}"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PeekAreaInsets="40,0,40,0" >
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <CarouselView.ItemsLayout>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <LinearItemsLayout Orientation="Horizontal"  SnapPointsAlignment="Start"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SnapPointsType="Mandatory" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </CarouselView.ItemsLayout>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <CarouselView.ItemTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <DataTemplate x:DataType="models:Photo">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Image Source="{Binding Bytes,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Converter={StaticResource ToImage}}" Aspect="AspectFill" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </DataTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </CarouselView.ItemTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </CarouselView>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </Grid>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ContentPage>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <Grid>
  prefs: []
  type: TYPE_NORMAL
- en: <!—Code omitted for brevity -->
  prefs: []
  type: TYPE_NORMAL
- en: <CarouselView>
  prefs: []
  type: TYPE_NORMAL
- en: <!—Code omitted for brevity -->
  prefs: []
  type: TYPE_NORMAL
- en: </CarouselView>
  prefs: []
  type: TYPE_NORMAL
- en: <Label Grid.Row="1" Margin="10" Text="Favorites" FontSize="Subtitle"
  prefs: []
  type: TYPE_NORMAL
- en: FontAttributes="Bold" />
  prefs: []
  type: TYPE_NORMAL
- en: <CarouselView Grid.Row="2" ItemsSource="{Binding Favorites}"
  prefs: []
  type: TYPE_NORMAL
- en: PeekAreaInsets="0,0,40,0" IndicatorView="Indicator">
  prefs: []
  type: TYPE_NORMAL
- en: <CarouselView.ItemsLayout>
  prefs: []
  type: TYPE_NORMAL
- en: <LinearItemsLayout Orientation="Horizontal"
  prefs: []
  type: TYPE_NORMAL
- en: SnapPointsAlignment="Start" SnapPointsType="MandatorySingle" />
  prefs: []
  type: TYPE_NORMAL
- en: </CarouselView.ItemsLayout>
  prefs: []
  type: TYPE_NORMAL
- en: <CarouselView.EmptyViewTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: <DataTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: <Label Text="No favorites selected" />
  prefs: []
  type: TYPE_NORMAL
- en: </DataTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: </CarouselView.EmptyViewTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: <CarouselView.ItemTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: <DataTemplate x:DataType="models:Photo">
  prefs: []
  type: TYPE_NORMAL
- en: <Border Grid.RowSpan="2" StrokeShape="RoundRectangle
  prefs: []
  type: TYPE_NORMAL
- en: 15,15,15,15" Padding="0" Margin="0,0,0,0" BackgroundColor="#667788" >
  prefs: []
  type: TYPE_NORMAL
- en: <Image Source="{Binding Bytes, Converter={StaticResource
  prefs: []
  type: TYPE_NORMAL
- en: ToImage}}" Aspect="AspectFill" />
  prefs: []
  type: TYPE_NORMAL
- en: </Border>
  prefs: []
  type: TYPE_NORMAL
- en: </DataTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: </CarouselView.ItemTemplate>
  prefs: []
  type: TYPE_NORMAL
- en: </CarouselView>
  prefs: []
  type: TYPE_NORMAL
- en: <IndicatorView Grid.Row="3" x:Name="Indicator" HorizontalOptions="Center" SelectedIndicatorColor="Red"
    IndicatorColor="LightGray" />
  prefs: []
  type: TYPE_NORMAL
- en: </Grid>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
