["```cs\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5050\n```", "```cs\n\"timeUnixNano\":\"1673832588236902400\",\n\"severityNumber\":9, \"severityText\":\"Information\",\n\"body\":{\"stringValue\":\"Now listening on: {address}\"},\n\"attributes\":[\n  {\"key\":\"dotnet.ilogger.category\",\n     \"value\":{\"stringValue\":\"Microsoft.Hosting.Lifetime\"}},\n  {\"key\":\"Id\",\"value\":{\"intValue\":\"14\"},\n  {\"key\":\"address\",\n     \"value\":{\"stringValue\":\"http://[::]:5050\"}}], \"traceId\":\"\",\n        \"spanId\":\"\"}\n```", "```cs\nprivate readonly ILogger<RetryHandler> _logger;\npublic RetryHandler(ILogger<RetryHandler> logger) =>\n    _logger = logger;\n```", "```cs\n\"Logging\": {\n  \"LogLevel\": {\n    \"frontend\": \"Information\",\n    \"Microsoft.Hosting.Lifetime\": \"Information\",\n    \"Default\": \"Warning\"\n  }\n}\n```", "```cs\nif (!response.IsSuccessStatusCode &&\n     _logger.IsEnabled(LogLevel.Debug))\n  _logger.LogDebug(\"got response: {status} {body} {url}\",\n    (int)response.StatusCode,\n    await response.Content.ReadAsStringAsync(),\n    response.RequestMessage?.RequestUri);\n}\n```", "```cs\n[LoggerMessage(EventId = 1, Level = LogLevel.Information,\n  Message = \"download {memeSize} {memeName}\")]\nprivate partial void DownloadMemeEvent(long? memeSize,\n  string memeName);\n```", "```cs\nbuilder.Logging.AddOpenTelemetry(b => {\n  b.SetResourceBuilder(resource);\n  b.ParseStateValues = true;\n  b.AddOtlpExporter();\n});\n```", "```cs\n$ select * from otel_logs order by Timestamp desc\n```", "```cs\n│ 2023-01-17 03:28:37.446217500 │ 1bf63116f826fcc34a1e255\n4b633580e │ 2a6bbdfee21d260a │         1 │ Information │ 9\n│ frontend │ download {memeSize} {memeName}│\n{'service.instance.id':'833fb55a4717','service.name':'front\nend'} │ {'dotnet.ilogger.category':'frontend\n.StorageService',\n'Id':'1','Name':'DownloadMemeEvent',\n'memeSize':'65412', 'memeName':'this is fine'}\n```", "```cs\nselect LogAttributes['memeName'], count(*) as downloads\nfrom otel_logs\nwhere ServiceName='frontend' and\n  LogAttributes['Name']='DownloadMemeEvent'\ngroup by LogAttributes['memeName'] order by downloads desc\nlimit 3\n```", "```cs\nlogs:\n  receivers: [otlp]\n  processors: [batch]\n  exporters: [file]\nlogs/sampled:\n  receivers: [otlp]\n  processors: [batch, filter]\n  exporters: [clickhouse]\n```", "```cs\nfilter:\n  logs:\n    log_record:\n      - 'flags == 0 and trace_id != TraceID\n        (0x00000000000000000000000000000000)'\n```", "```cs\n    var foo = 42;\n    ```", "```cs\n    var bar = \"bar\";\n    ```", "```cs\n    logger.LogInformation($\"hello world: {foo}, {bar}\");\n    ```"]