- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Applying Security from the Start
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一开始就应用安全
- en: Next to performance, security should always be a top priority when building
    web applications. The ability to create secure web applications continues to be
    a problem with the evolving landscape of internet threats such as **cross-site
    scripting** (**XSS**) and injection techniques. While the best developer can safeguard
    an application against even the worst threat, most attacks succeed through human
    interaction and environmental issues. The best approach for developers to protect
    their applications is to start from the ground up and create as many roadblocks
    as possible to deter even the most vigilant attackers from gaining access to their
    systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了性能之外，在构建网络应用程序时，安全始终应该是首要任务。在互联网威胁不断演变的背景下，如**跨站脚本**（**XSS**）和注入技术，创建安全网络应用程序的能力仍然是一个问题。尽管最好的开发者可以保护应用程序免受最严重的威胁，但大多数攻击是通过人为交互和环境问题成功的。开发者保护其应用程序的最佳方法是从零开始，并尽可能多地设置障碍，以阻止最警觉的攻击者访问他们的系统。
- en: First, we’ll learn how to identify highly sensitive data and how to secure access.
    We’ll then move on to common security practices and provide various ASP.NET Core
    features that you can apply to your applications. Finally, we’ll review the top
    three security threats according to the **Open Worldwide Application Security
    Project** (**OWASP**) and how to safeguard your application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将学习如何识别高度敏感数据以及如何确保访问安全。然后，我们将继续讨论常见的安全实践，并提供各种 ASP.NET Core 特性，你可以将这些特性应用到你的应用程序中。最后，我们将回顾根据**开放式全球应用程序安全项目**（**OWASP**）评定的前三大安全威胁，以及如何保护你的应用程序。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Developing Security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发安全
- en: Common Security Practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见安全实践
- en: Safeguarding Against the Top 3 Security Threats
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防御前三大安全威胁
- en: By the end of this chapter, you’ll understand what is considered sensitive data,
    a variety of common security practices in the industry, and how to safeguard yourself
    against the top three threats according to the OWASP Foundation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解什么被认为是敏感数据，行业中的各种常见安全实践，以及根据 OWASP 基金会如何保护自己免受前三大威胁。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: While we will talk about security in this chapter, most of the discussion will
    contain small snippets of code that you can include in your projects. Access to
    a code editor isn’t necessary for this chapter to understand the essentials of
    security at a developer level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将在本章讨论安全，但大部分讨论将包含你可以包含到你的项目中的小段代码。理解开发者级别的安全基本要素不需要访问代码编辑器。
- en: 'The code files for this chapter can be found here: https://github.com/PacktPublishing/ASP.NET-Core-8-Best-Practices.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在以下位置找到：https://github.com/PacktPublishing/ASP.NET-Core-8-Best-Practices。
- en: Developing Security
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发安全
- en: In this section, we’ll examine terms and concepts regarding how to identify
    the data you need to secure and explain three extremely important ways to secure
    your website.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查有关如何识别需要保护的数据的术语和概念，并解释三种极其重要的保护网站的方法。
- en: 'Too often, when developers start to build an ASP.NET web project, security
    is usually applied at the end of a project as opposed to being proactive and aware
    of security measures. One approach for implementing security is to examine your
    applications and look for these types of highly sensitive data throughout:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 太频繁地，当开发者开始构建一个 ASP.NET 网络项目时，安全通常是在项目结束时才被应用，而不是主动地意识到安全措施。实现安全的一种方法是在你的应用程序中检查，并寻找以下这些高度敏感的数据：
- en: Name and location
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称和位置
- en: Usernames and passwords
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名和密码
- en: Contact information (phone number, email address, and so on)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系信息（电话号码、电子邮件地址等）
- en: Social security number
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社会安全号码
- en: Financials (customer plans, credit cards, and so on)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 财务信息（客户计划、信用卡等）
- en: Database connections
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库连接
- en: Custom settings
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义设置
- en: Depending on the intent of the web application, other types might be involved,
    such as specific access to a section where permissions are implied. Other types
    of data could be considered sensitive based on industry or even government regulations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据网络应用程序的目的，可能还会涉及其他类型，例如对权限隐含的特定区域的访问。根据行业或甚至政府法规，某些类型的数据可能被认为是敏感的。
- en: Security in your application should be examined based on the criteria discussed
    in the following sections.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 应根据以下章节中讨论的标准来检查应用程序中的安全。
- en: Do I have any sensitive data to protect?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我是否有任何敏感数据需要保护？
- en: Based on your application and the list in the previous section, ask yourself,
    “If any of the data is leaked and made public, would there be a problem?”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您应用程序和上一节中的列表，问问自己：“如果任何数据泄露并公开，会出现问题吗？”
- en: Exposing any data from the aforementioned sources would be a disaster. Keep
    sensitive information contained using encryption, access controls, and secure
    coding practices, and use it only when necessary.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述来源暴露任何数据将是一场灾难。使用加密、访问控制和安全的编码实践来保持敏感信息的安全，并且仅在必要时使用。
- en: Am I exposing anything through the application?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我是否通过应用程序暴露了任何内容？
- en: When moving from one web page to another, am I passing something sensitive when
    maneuvering through the site? Is the application using primary keys in the URL?
    How is data passed to the next page?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当从一个网页切换到另一个网页时，我在浏览网站时是否传递了敏感信息？应用程序是否在 URL 中使用主键？数据是如何传递到下一页的？
- en: Be mindful of visible clues to the users that contain information such as primary
    keys or sensitive information. We’ll discuss this later in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意用户可见的线索，这些线索包含诸如主键或敏感信息等信息。我们将在本章后面讨论这一点。
- en: Am I sanitizing user input?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我是否清理了用户输入？
- en: When requesting input from a user, it’s always a good practice to sanitize the
    data. Sanitization, or scrubbing, is the process of taking user input and confirming
    it’s not malicious content that could compromise the system. One philosophy is
    to never trust submitted data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当从用户那里请求输入时，始终是一个好习惯对数据进行清理。清理，或称为擦洗，是获取用户输入并确认它不是可能损害系统的恶意内容的过程。一种哲学是永远不要信任提交的数据。
- en: It’s extremely important to use light validation with JavaScript/HTML on the
    client side, along with heavy validation and sanitization of data on the server.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端使用 JavaScript/HTML 进行轻量级验证，同时在服务器端进行大量验证和数据清理，这一点极其重要。
- en: Light validation would include ensuring the required fields are populated and
    contain the minimum and maximum length of data, and that certain fields meet a
    particular format (such as phone numbers, credit cards, and so on).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 轻量级验证包括确保所需字段已填充，并包含最小和最大数据长度，以及某些字段符合特定格式（如电话号码、信用卡等）。
- en: Heavier validation would reaffirm the light validation but also confirm various
    scenarios, such as that a user has access to something, referenced entities exist,
    or data disguised to cause malicious activity.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 重量级验证将重申轻量级验证，但也会确认各种场景，例如用户有权访问某些内容，引用的实体存在，或数据伪装以造成恶意活动。
- en: Securing Access
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护访问
- en: When building a website, it’s best to think about whether a user is required
    to log in to your site or not. If you’re creating a blog, there wouldn’t be a
    need to have users log in to view a post. They would just view it anonymously.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网站时，最好考虑用户是否需要登录到您的网站。如果您正在创建一个博客，用户不需要登录就可以查看帖子。他们只需匿名查看即可。
- en: However, if you require a user to log in to your website, there is a minimum
    of three mandatory requirements you must understand to *begin* to secure your
    application. We’ll look at them in the following sections.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您要求用户登录到您的网站，您必须了解至少三个强制性的要求，才能开始保护您的应用程序。我们将在接下来的章节中探讨它们。
- en: Authentication
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证
- en: When authenticating a user, you are *identifying and validating who they are*
    when they log in to your system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当验证用户时，您在用户登录到您的系统时正在*识别和验证他们的身份*。
- en: This is the primary concept of Microsoft’s Identity framework. It offers various
    methods to authenticate a user using either username/password, the ability to
    use third-party social networks (such as Facebook, Google, or Twitter), use **two-factor
    authentication** (**2FA**), or even use third-party authenticators.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是微软身份框架的核心概念。它提供了各种方法来验证用户，无论是使用用户名/密码，还是使用第三方社交网络（如Facebook、Google或Twitter），使用**双因素认证**（**2FA**），甚至使用第三方验证器。
- en: You may have already experienced this on a website where you have to enter your
    username and password. That is step one in authenticating a user. Once verified,
    you are then asked to enter the code that’s been sent to your email or the authenticator
    app on your phone. That is step two.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经在网站上体验过这种情况，您需要输入用户名和密码。这是验证用户的第一步。一旦验证通过，您将被要求输入发送到您的电子邮件或手机上的验证器应用程序的代码。这是第二步。
- en: Many websites use a username and password to log in. While this is the bare
    minimum to secure a website, it may help to implement additional security measures
    when authenticating a user.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站使用用户名和密码进行登录。虽然这是保护网站的最基本方法，但在验证用户时实施额外的安全措施可能会有所帮助。
- en: Again, it’s a better approach to create as many additional roadblocks to protect
    your application from attackers as possible. The more obstacles, the less likely
    your site will be compromised.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，创建尽可能多的额外障碍来保护你的应用程序免受攻击者侵害是一个更好的方法。障碍越多，你的网站被破坏的可能性就越小。
- en: Authorization
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 授权
- en: Once the user has authenticated, what can they do in the system? This is where
    authorization enters the picture.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户完成身份验证，他们可以在系统中做什么？这就是授权介入的地方。
- en: Authorization is the *process of granting permission to do something in a system
    or on a website*. For example, authors of a blog are permitted to update their
    articles when they log in, but they are not allowed to edit other articles unless
    they are authorized to do so by an administrator. An authorization system would
    need to be in place for this to work.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 授权是**在系统或网站上允许做某事的进程**。例如，博客的作者在登录时可以更新他们的文章，但除非管理员授权，否则他们不允许编辑其他文章。为了实现这一点，需要一个授权系统。
- en: As mentioned in the *Authentication* section, Microsoft’s Identity framework
    contains various techniques for implementing role-based and user-based claims
    throughout the system. In our previous example, we mentioned that authors are
    only allowed to update their own articles. In a role-based system, the authors
    could be grouped into an “Authors” role, allowing them to create and update their
    own articles. In a user-based system, special privileges could be assigned at
    the user level, such as editing other authors’ articles.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如在**身份验证**部分所述，Microsoft的Identity框架包含各种技术，用于在整个系统中实现基于角色和基于用户的声明。在我们之前的例子中，我们提到作者只能更新他们自己的文章。在一个基于角色的系统中，作者可以被分组到一个“作者”角色中，允许他们创建和更新他们自己的文章。在一个基于用户的系统中，可以在用户级别分配特殊权限，例如编辑其他作者的文章。
- en: While Microsoft Identity is flexible enough to incorporate any kind of authorization
    mechanism, developers should think about how to structure application-level authorizations
    from the very beginning before writing one line of code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Microsoft Identity足够灵活，可以整合任何类型的授权机制，但开发者在编写代码之前应该从一开始就考虑如何构建应用程序级别的授权。
- en: Authorizations are extremely important when you’re identifying what a logged-in
    user can (and can’t) do on your website.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你确定登录用户可以在你的网站上做什么（以及不能做什么）时，授权非常重要。
- en: Secure Sockets Layer (SSL)
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全套接字层（SSL）
- en: If you’re building a website, SSL is *absolutely required*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在构建一个网站，SSL是**绝对必需的**。
- en: 'The necessity to have an SSL-enabled website protects you for the following
    reasons:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有启用SSL的网站是必要的，原因如下：
- en: You want your visitors to know they are on a secure website.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想让你的访客知道他们在一个安全的网站上。
- en: It prevents others on the same network viewing your login credentials.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它防止同一网络上的其他人查看你的登录凭证。
- en: HTTPS helps prevent a **Man-in-the-Middle** (**MITM**) attack, where an attacker
    inserts themselves into a conversation between two users, possibly altering the
    exchange of data.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTPS有助于防止**中间人攻击**（**MITM**），攻击者将自己插入两个用户之间的对话中，可能会更改数据交换。
- en: '**Search Engine Optimization** (**SEO**). Google and other search engines use
    HTTPS as a ranking signal (reference: https://developers.google.com/search/blog/2014/08/https-as-ranking-signal).
    If you wanted to increase your chances of reaching number one in the search results,
    you should make your site SSL-enabled.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索引擎优化**（**SEO**）。谷歌和其他搜索引擎将HTTPS作为排名信号（参考：https://developers.google.com/search/blog/2014/08/https-as-ranking-signal）。如果你想增加你的网站在搜索结果中达到第一名的机会，你应该让你的网站启用SSL。'
- en: Most hosting companies *include* an SSL certificate free of charge for your
    sites. That’s how important SSL is to a website.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数托管公司**免费**为你的网站提供SSL证书。这就是SSL对网站的重要性。
- en: In this section, we identified what is considered sensitive data and learned
    about how to secure access using three critical concepts when building an ASP.NET
    Core application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们确定了被认为是敏感数据的内容，并了解了在构建ASP.NET Core应用程序时如何使用三个关键概念来确保访问安全。
- en: In the next section, we’ll look over some common security practices you can
    immediately start using in your applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将回顾一些你可以立即在你的应用程序中开始使用的常见安全实践。
- en: Common Security Practices
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的安全实践
- en: As a developer, security seems to be a black box sometimes. You always hear
    about incidents where websites have been hacked, but you might think to yourself,
    “That couldn’t happen to me,” until it happens to you. When you witness a website
    you built being attacked first-hand, it’s a humbling experience.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，安全有时似乎是一个黑盒子。你总是听到网站被黑客攻击的事件，但你自己可能会想，“那不可能发生在我身上，”直到它真的发生。当你亲眼目睹你构建的网站被攻击时，这是一种令人谦卑的经历。
- en: While the techniques we’re about to cover only scratch the surface for ASP.NET
    websites, they encourage developers to become more *proactive* in their coding
    as opposed to finding out they were hacked and immediately becoming *reactive*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们即将介绍的技巧只是对 ASP.NET 网站表面的触及，但它们鼓励开发者在其编码中更加*主动*，而不是等到发现被黑客攻击后立即变得*被动*。
- en: In this section, we’ll review common security practices in the industry you
    can use to protect yourself so that you know what your system is doing and are
    not exposing too much to the world. We’ll learn about the different types of logs,
    how to update libraries and frameworks, and how to remove header information.
    We’ll finish this chapter by learning how to encrypt Entity Framework Core database
    columns.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾行业内常见的安全实践，你可以使用这些实践来保护自己，以便你知道你的系统在做什么，并且不会向世界暴露太多。我们将了解不同类型的日志、如何更新库和框架以及如何删除头部信息。我们将通过学习如何加密
    Entity Framework Core 数据库列来结束本章。
- en: Logging
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录
- en: Once you’ve created your website, some extra features are required before you
    can roll out the red carpet for everyone to enjoy it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建网站之后，在你可以为所有人铺上红地毯之前，还需要一些额外的功能。
- en: How do you know what’s going on with your website? How will you know when someone
    deletes a post? How about a transaction? How long does it take for your Web API
    to make a full trip to present data? These questions should be answered by creating
    audit trails and enabling general logging for your application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何知道你的网站发生了什么？当有人删除帖子时，你会怎么知道？关于交易呢？你的 Web API 完成整个数据呈现请求需要多长时间？这些问题应该通过创建审计跟踪并启用应用程序的一般记录来回答。
- en: Audit trails are a type of logging where you keep track of every action a user
    has executed in your system. Microsoft Identity should already be in place with
    logging code to sprinkle throughout the application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 审计跟踪是一种日志类型，你可以跟踪用户在你的系统中执行的每一个操作。Microsoft Identity 应该已经内置了用于在应用程序中散布的日志代码。
- en: 'IIS Logs are a type of audit trail. Every user accessing your system, including
    anonymous users, is logged through IIS. A simple log entry is shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: IIS 日志是一种审计跟踪。每个访问你系统的用户，包括匿名用户，都会通过 IIS 进行记录。这里显示了一个简单的日志条目：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Standard data used in an audit trail would contain the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 审计跟踪中使用的标准数据将包含以下内容：
- en: Date/time
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期/时间
- en: IP address/port
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 地址/端口
- en: URL
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL
- en: Action taken
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的操作
- en: The user who executed the action
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行操作的用戶
- en: An entity state before and after the action was executed (*optional*)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行操作前后的实体状态（可选）
- en: 'General logging is carried out more at an application level as opposed to a
    system level. Most general logging includes data such as this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一般记录通常在应用层面而不是系统层面进行。大多数一般记录包括如下数据：
- en: Date/time
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期/时间
- en: URL
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL
- en: Log type (informational, warning, or error)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志类型（信息性、警告或错误）
- en: A comment about the action
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于操作的评论
- en: Method/action/section name performing the action
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行操作的方 法/操作/部分名称
- en: The duration of the process (*optional*)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过程持续时间（可选）
- en: These types of logs are essential in the API world. These logs are created by
    the developer and stored on a disk or in a database. Once you create a Web API,
    there will be moments when you’ll wonder what it’s doing and why it’s taking so
    long to complete a request. Logs are windows to the system. What exactly is happening
    there?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的日志在 API 世界中至关重要。这些日志由开发者创建并存储在磁盘或数据库中。一旦你创建了一个 Web API，你可能会想知道它在做什么，以及为什么它需要这么长时间来完成一个请求。日志是了解系统的窗口。那里到底发生了什么？
- en: When it comes to security, your logs are gold. If someone impersonates another
    user, you can immediately examine the logs, identify the user and IP, and take
    the necessary actions to prevent it from happening again. This could be done by
    resetting a password, disconnecting or disabling a user from logging in, or even
    removing the user from the system overall.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到安全时，你的日志就是金子。如果有人冒充其他用户，你可以立即检查日志，识别用户和 IP，并采取必要的措施防止其再次发生。这可以通过重置密码、断开或禁用用户登录，甚至从系统中删除用户来实现。
- en: Without logging, you’ll be unaware of events occurring in your system.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 没有日志记录，你将无法了解系统中发生的事件。
- en: Keep your Framework and Libraries Current
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持您的框架和库最新。
- en: Every developer has their favorite libraries and frameworks. With .NET, there
    are times when the framework requires an update to prevent possible security threats.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发者都有自己的库和框架。在使用.NET时，有时框架需要更新以防止可能的安全威胁。
- en: Once you are aware of these security updates, it’s your responsibility to update
    the framework and/or libraries or notify someone who *can* perform the update
    (in case developers are not allowed to update servers) to protect against any
    type of threat based on the update’s vulnerabilities.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你意识到这些安全更新，就有责任更新框架和/或库，或者通知某人*可以*执行更新（如果开发者不允许更新服务器），以防止基于更新漏洞的任何类型的安全威胁。
- en: Twice in my career, a .NET version had a security issue and a security update
    was released to be applied to the framework. The patch wasn’t applied immediately.
    Two weeks later, there was a breach and it was concluded the breach could’ve been
    prevented if the patch was applied two weeks earlier.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，有两个.NET版本存在安全问题，并发布了安全更新以应用于框架。补丁没有立即应用。两周后，发生了安全漏洞，结论是如果两周前应用了补丁，漏洞本可以预防。
- en: It was a bad day for the company.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对公司来说，那是一个糟糕的日子。
- en: To see whether there is a security patch for .NET, refer to the Microsoft Update
    Catalog at https://www.catalog.update.microsoft.com/home.aspx.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看.NET是否有安全补丁，请参考微软更新目录，网址为 https://www.catalog.update.microsoft.com/home.aspx。
- en: Always Force SSL
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总是强制使用SSL。
- en: If a visitor arrives through an HTTP URL and not HTTPS, it’s best to redirect
    them over to the secure portion of your site.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果访客通过HTTP URL而不是HTTPS到达，最好将他们重定向到您网站的加密部分。
- en: '**HTTP Strict Transport Security Protocol** (**HSTS**) is a security enhancement
    specified by the web application through a response header. When the browser receives
    an HSTS header, it prevents the user from using untrusted or invalid certificates.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP严格传输安全协议**（**HSTS**）是通过响应头由Web应用指定的安全增强功能。当浏览器接收到HSTS头时，它阻止用户使用不受信任或无效的证书。'
- en: 'However, there are limitations to using this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用它有一些限制：
- en: Modern clients must support HSTS
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代客户端必须支持HSTS。
- en: HSTS must establish one HTTPS connection to establish an HSTS policy
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HSTS必须建立一个HTTPS连接来建立HSTS策略。
- en: The web application must examine every HTTP request and redirect or reject the
    HTTP request
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web应用必须检查每个HTTP请求，并重定向或拒绝HTTP请求。
- en: 'To implement this in your code, you must revisit the middleware and add the
    HSTS extension to a production environment. If you’ve just created a new web app,
    this is automatically added by default. Here is an example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要在代码中实现这一点，你必须重新检查中间件，并将HSTS扩展添加到生产环境中。如果你刚刚创建了一个新的Web应用，这将默认自动添加。以下是一个示例：
- en: '[PRE1]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `app.UseHttpsRedirection()` method must appear after the `app.UseHsts()`
    extension method for the redirect to occur. This ensures your users will be visiting
    an SSL-enabled website.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.UseHttpsRedirection()` 方法必须在 `app.UseHsts()` 扩展方法之后出现，以确保用户将访问一个启用了SSL的网站。'
- en: Never Trust the Client
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 永远不要信任客户端。
- en: I’ve always likened this approach with the old saying, “Wearing suspenders with
    a belt.” At least you wouldn’t be caught with your pants down (as I use this as
    a security metaphor).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是将这种方法比作古老的谚语，“腰间系上背带，再系上皮带。”至少你不会被发现裤子掉下来（我将其用作安全隐喻）。
- en: As mentioned near the beginning of this chapter, the intent here is to validate
    and sanitize data that’s been submitted by the client as best you can with JavaScript
    and HTML and then follow up with additional validation using C# when a form is
    submitted.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所述，这里的意图是尽可能使用JavaScript和HTML验证和清理客户端提交的数据，然后在表单提交时使用C#进行额外的验证。
- en: 'For example, HTML 5 is now available in almost every browser, with the ability
    to apply a certain type to a text input, such as `type="number"` or `type="date"`.
    A welcome addition to this collection of input types is the ability to add a regex
    pattern to make validation even easier on the client side:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，HTML 5现在几乎在所有浏览器中都可用，能够将某些类型应用于文本输入，例如 `type="number"` 或 `type="date"`。这个输入类型的集合中一个受欢迎的补充是能够添加正则表达式模式，使客户端侧的验证更加容易：
- en: '[PRE2]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This pattern allows for either 740 or 614 area codes to be in a phone number.
    If the pattern doesn’t match, you will receive a tooltip message stating why it’s
    not valid:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式允许电话号码中包含740或614区号。如果模式不匹配，你将收到一个提示信息，说明为什么它无效：
- en: '![Figure 4.1 – The effect of a failed validation on an input](img/Figure_4.01_B19493.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – 输入验证失败的影响](img/Figure_4.01_B19493.jpg)'
- en: Figure 4.1 – The effect of a failed validation on an input
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 输入验证失败的影响
- en: However, this does not justify neglecting validation on the server. For every
    field where a user inputs data, this same effort regarding validation should be
    applied when the server receives the data.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不能证明在服务器上忽略验证是合理的。对于用户输入数据的每个字段，当服务器接收到数据时，都应该应用相同的验证努力。
- en: Always Encode User Input
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总是编码用户输入
- en: One of the easiest methods of sanitizing user input on the server is **encoding**.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上清理用户输入的最简单方法之一是**编码**。
- en: 'If a user enters data and the data will be displayed on a page at any time,
    it’s best to encode the data to prevent XSS. The easiest way to encode user input
    is to dependency inject `HtmlEncoder` into a method to perform the encoding, as
    shown in the following code snippet:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入的数据将在任何时间显示在页面上，最好对数据进行编码以防止XSS攻击。编码用户输入的最简单方法是将`HtmlEncoder`依赖注入到方法中以执行编码，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: .NET has various injectable services already defined. `HtmlEncoder` is one such
    service and is injected automatically by adding a `[FromServices]` attribute.
    Once we have our encoder, we can encode the string that’s been passed in and safely
    perform the action that’s been requested.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: .NET已经定义了各种可注入的服务。`HtmlEncoder`就是其中之一，并且可以通过添加`[FromServices]`属性自动注入。一旦我们有了编码器，我们就可以对传入的字符串进行编码，并安全地执行请求的操作。
- en: In this section, you learned how to encode user input from the client, making
    your site safe from malicious data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何从客户端编码用户输入，使你的网站免受恶意数据的影响。
- en: In the next section, you’ll learn how to hide what your servers are telling
    the world and how to make a reusable middleware component.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何隐藏服务器向世界传达的信息，以及如何创建可重用的中间件组件。
- en: Securing Your Headers
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护你的头信息
- en: By default, several headers are added to HTTP requests to identify a server,
    the version used, what technology stack you’re using, and what powers your website.
    While these default headers are helpful, some of them aren’t required, while others
    can make your site more secure.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，HTTP请求会添加几个头信息以识别服务器、使用的版本、所使用的技术堆栈以及支撑网站的技术。虽然这些默认头信息很有帮助，但其中一些不是必需的，而另一些可以使你的网站更加安全。
- en: In this section, we’ll focus on securing the recommended header changes through
    ASP.NET’s Middleware.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于通过ASP.NET的中间件来保护推荐的头部更改。
- en: Removing Server Headers
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除服务器头信息
- en: It’s generally not a good idea to announce to the world what server you’re running
    and its version to an anonymous user. This exposes the type of web server you’re
    running and allows attackers to find IIS-specific techniques to gain access to
    your web server.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，向世界宣布你正在运行的服务器和版本并不是一个好主意，尤其是对于一个匿名用户来说。这样做会暴露你正在运行的Web服务器类型，并允许攻击者找到针对IIS的特定技术来访问你的Web服务器。
- en: 'In ASP.NET, you can disable the server header for Kestrel (which is the open
    source server used in ASP.NET) in `Program.cs`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET中，你可以在`Program.cs`中禁用Kestrel（ASP.NET中使用的开源服务器）的服务器头：
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When we set `AddServerHeader` to `false`, the header doesn’t display the type
    and version of the server.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`AddServerHeader`设置为`false`时，头信息不会显示服务器类型和版本。
- en: 'In addition to the server header, we also need to remove the `X-Powered-By`
    header to avoid exposing too much information. This can be achieved through middleware,
    as shown here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 除了服务器头之外，我们还需要移除`X-Powered-By`头，以避免暴露过多信息。这可以通过中间件实现，如下所示：
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'However, you’ll also have to add it to `web.config`, which should exist in
    the root of your project. Here are the only reasons `web.config` should exist
    in your project:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你还需要将其添加到`web.config`文件中，该文件应位于项目的根目录下。以下是`web.config`文件应存在于项目中的唯一原因：
- en: Compression configuration
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩配置
- en: Removing specific IIS headers
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除特定的IIS头信息
- en: Custom MIME mappings
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义MIME映射
- en: 'If it doesn’t exist, add it to your project and add the following path to remove
    the `X-Powered-By` header:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它不存在，将其添加到你的项目中，并添加以下路径以移除`X-Powered-By`头：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Other header values to remove include `X-Aspnet-Version` and `X-AspnetMvc-Version`.
    The reason you should remove these headers is that they provide detailed information
    about what technology you’re running on your server. If there is a security flaw
    specifically for ASP.NET or ASP.NET Core MVC, these headers would make your site
    easier for attackers to narrow down their attacks and cause an inevitable security
    event.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 需要移除的其他头部值包括 `X-Aspnet-Version` 和 `X-AspnetMvc-Version`。你应该移除这些头部的原因是它们提供了关于你在服务器上运行的技术详细信息的详细资料。如果有针对
    ASP.NET 或 ASP.NET Core MVC 的特定安全漏洞，这些头部会使你的网站更容易被攻击者缩小攻击范围，并导致不可避免的安全事件。
- en: 'To remove these two headers, add the following two lines to the middleware
    in your `Program.cs` file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除这两个头部，请将以下两行添加到你的 `Program.cs` 文件中的中间件：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: No Sniffing Allowed
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁止嗅探
- en: 'When you include `X-Content-Type-Options` in a header, this tells the browser
    to adhere to the MIME types registered in the `Content-Type` headers. These shouldn’t
    be changed or followed:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在头部包含 `X-Content-Type-Options` 时，这告诉浏览器遵守 `Content-Type` 头部中注册的 MIME 类型。这些不应该被更改或遵循：
- en: '[PRE8]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This marker tells the browser that these MIME types were intentionally configured
    to avoid MIME-type sniffing. This helps prevent attacks based on MIME-type confusion,
    where non-MIME types could be considered valid MIME types.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标记告诉浏览器这些 MIME 类型是故意配置为避免 MIME 类型嗅探的。这有助于防止基于 MIME 类型混淆的攻击，其中非 MIME 类型可能会被视为有效的
    MIME 类型。
- en: No Framing Either
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 也禁止框架使用
- en: 'When the browser sees an `X-Frame-Options` header response, it indicates whether
    or not the browser should render the web page in `<frame>`, `<iframe>`, `<embed>`,
    or `<object>`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器看到 `X-Frame-Options` 头部响应时，它表示浏览器是否应该在 `<frame>`、`<iframe>`、`<embed>` 或
    `<object>` 中渲染网页：
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `X-Frame-Options` header prevents clickjacking attacks, where someone could
    embed your content into other sites using frames, embeds, or objects. Setting
    this to `DENY` protects you from such attacks.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`X-Frame-Options` 头部防止点击劫持攻击，其中有人可能会使用框架、嵌入或对象将你的内容嵌入到其他网站。将此设置为 `DENY` 可以保护你免受此类攻击。'
- en: Creating a security middleware component
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个安全中间件组件
- en: To finalize this section, we’ll create a simple middleware component we can
    reuse in our .NET Core web applications.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本节，我们将创建一个简单的中间件组件，我们可以在我们的 .NET Core Web 应用程序中重用它。
- en: 'Since we created our middleware skeleton in [*Chapter 3*](B19493_03.xhtml#_idTextAnchor070),
    we can reuse the code for our `RemoveInsecureHeadersMiddleware` component, as
    shown here:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在 [*第 3 章*](B19493_03.xhtml#_idTextAnchor070) 中创建了我们的中间件框架，我们可以重用 `RemoveInsecureHeadersMiddleware`
    组件的代码，如下所示：
- en: '[PRE10]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Don’t forget our extension method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记我们的扩展方法：
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can use newly created security extension in our `Program.cs` file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的 `Program.cs` 文件中使用新创建的安全扩展：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While we’ve added the most obvious headers, the good news is that you can update
    this component by adding additional headers to increase the security of your site
    even further.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经添加了最明显的头部，但好消息是你可以通过添加额外的头部来更新这个组件，从而进一步提高你网站的安全性。
- en: In this section, you learned how to secure your headers and create a reusable
    middleware component for all of your web applications. In the next section, you’ll
    learn how to secure Entity Framework by encrypting your data, using stored procedures,
    and using parameterized queries.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何保护你的头部并创建一个可重用的中间件组件，用于所有你的 Web 应用程序。在下一节中，你将学习如何通过加密数据、使用存储过程和使用参数化查询来保护
    Entity Framework。
- en: Securing Entity Framework Core
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护 Entity Framework Core
- en: Entity Framework Core is one of those technologies that continues to amaze me.
    Every version of Entity Framework Core that’s released provides some new performance
    enhancement, a better approach to a technique, or some other method to make our
    lives a little bit easier.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework Core 是那些让我持续感到惊奇的技术之一。Entity Framework Core 每次发布的版本都提供了一些新的性能提升、改进的技术方法，或者一些其他方法来让我们的工作变得稍微容易一些。
- en: In this section, we’ll learn about how we can encrypt our data at the database
    level.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何在数据库级别加密我们的数据。
- en: Encrypting Your Data
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加密您的数据
- en: One of the most valuable things to a company is data. To prevent an attack,
    one of the security measures you can take is to encrypt the data in the table.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对公司来说最有价值的东西之一就是数据。为了防止攻击，你可以采取的一种安全措施是在表中加密数据。
- en: At the beginning of this chapter, we explained the types of data that require
    special attention, such as phone numbers, email addresses, and credit card data.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们解释了需要特别注意的数据类型，例如电话号码、电子邮件地址和信用卡数据。
- en: The best approach is to apply security at the database level by using the database’s
    encryption technology, whether it’s SQL Server or a similar database.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳做法是在数据库级别应用安全，无论使用的是SQL Server还是类似的数据库。
- en: 'SQL Server encrypts specific columns by using the **Encrypt Columns…** option
    in **SQL Server Management Studio** (**SSMS**), as shown in *Figure 4**.2*:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server通过使用SQL Server Management Studio（**SSMS**）中的“加密列…”选项来加密特定的列，如图*4.2*所示：
- en: '![Figure 4.2 – The Encrypt Columns… option in SQL Server Management Studio](img/Figure_4.02_B19493.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – SQL Server Management Studio中的“加密列…”选项](img/Figure_4.02_B19493.jpg)'
- en: Figure 4.2 – The Encrypt Columns… option in SQL Server Management Studio
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – SQL Server Management Studio中的“加密列…”选项
- en: If you are using Entity Framework, generating a DbContext will take the secure
    columns into account. Again, when creating encryption at the database level, it
    would be another roadblock to dissuade attackers from accessing sensitive data.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Entity Framework，生成DbContext时会考虑安全列。同样，在数据库级别创建加密时，这将是阻止攻击者访问敏感数据的另一个障碍。
- en: In this section, we examined the best approach to protecting your data – that
    is, by encrypting your data using SQL Server’s **Encrypt Columns…** feature. In
    the next section, we’ll look at how to protect your pages from a **cross-site
    request forgery** (**XSRF**) attack.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了保护数据的最佳方法——即通过使用SQL Server的“加密列…”功能来加密数据。在下一节中，我们将探讨如何保护您的页面免受**跨站请求伪造**（**XSRF**）攻击。
- en: Use Microsoft Entra for Securing Applications
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Microsoft Entra保护应用程序
- en: As mentioned previously, when logging into a website, it’s best to protect the
    database from intruders by encrypting the database. This means using existing
    methods as opposed to writing custom encryption algorithms. Creating a custom
    encryption algorithm should be avoided since most algorithms are easily broken
    through hacker tools. It’s best to use an existing framework like Microsoft Identity
    (now called Entra).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在登录网站时，最好通过加密数据库来保护数据库免受入侵者侵害。这意味着使用现有方法而不是编写自定义加密算法。应避免创建自定义加密算法，因为大多数算法都很容易被黑客工具破解。最好使用现有的框架，如Microsoft
    Identity（现在称为Entra）。
- en: With Blazor and SPAs (Single-Page Applications) all the rage, it can be hard
    to secure an application using APIs. Previously, using Microsoft Identity through
    an API required a lot of effort making it harder to implement secure applications.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Blazor和SPA（单页应用程序）的流行，使用API保护应用程序可能会很困难。以前，通过API使用Microsoft Identity需要大量工作，这使得实现安全应用程序变得更加困难。
- en: 'With the latest .NET 8, Microsoft Entra introduces API-based calls for every
    aspect of security for web applications for **Single-Page Applications** (**SPAs**).
    When creating a new application, the following code adds an Entra-enabled REST-based
    API to an application:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在最新的.NET 8中，Microsoft Entra为**单页应用程序**（**SPA**）的Web应用程序的每个安全方面引入了基于API的调用。在创建新应用程序时，以下代码将一个启用Entra的基于REST的API添加到应用程序中：
- en: '[PRE13]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code creates our web application and defines a JwtBearerDefault
    authentication scheme and adds a Web API specifically for Microsoft Identity.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建我们的Web应用程序，并定义了一个JwtBearerDefault身份验证方案，并添加了一个专门针对Microsoft Identity的Web
    API。
- en: 'If JWT Tokens are not an option, .NET 8 also introduces Bearer Tokens as shown
    here:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JWT令牌不是选项，.NET 8还引入了Bearer令牌，如下所示：
- en: '[PRE14]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The ability to write fast APIs along with simple authentication and authorization
    gives web developers more options when writing web applications using Blazor and
    SPAs. We’ll cover Microsoft Entra more in [*Chapter 9*](B19493_09.xhtml#_idTextAnchor207)
    when looking at creating better web APIs.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 快速编写API以及简单的身份验证和授权能力，为使用Blazor和SPA（单页应用程序）编写Web应用程序的Web开发者提供了更多选择。在探讨创建更好的Web
    API时，我们将在[*第9章*](B19493_09.xhtml#_idTextAnchor207)中更详细地介绍Microsoft Entra。
- en: Protecting Your Pages with Anti-Forgery
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用反伪造保护您的页面
- en: Cross-site request forgery, or XSRF, is where an attack occurs, tricking a user
    to execute unwanted actions in a web application in which they’re currently authenticated.
    For example, a user could be tricked into using their credit card on a different
    site without them even knowing it.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站请求伪造，或XSRF，是指攻击发生的地方，欺骗用户在当前已认证的Web应用程序中执行不受欢迎的操作。例如，用户可能会被欺骗在不知道的情况下使用他们的信用卡在不同的网站上。
- en: To prevent an XSRF attack through your web forms, the recommended approach is
    to use anti-forgery tokens.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止通过您的Web表单进行XSRF（跨站请求伪造）攻击，建议的方法是使用反伪造令牌。
- en: 'To add some to our Middleware, we will add them to our pipeline, as shown in
    the following code snippet:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一些到我们的中间件中，我们将它们添加到我们的管道中，如下面的代码片段所示：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When an HTML form is created, anti-forgery tokens are automatically generated
    when a `<form>` tag contains `method="post"` and one of the following conditions
    is true:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建HTML表单时，如果`<form>`标签包含`method="post"`并且以下条件之一为真，则会自动生成反伪造令牌：
- en: The action attribute is empty (`action=""`)
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作属性为空（`action=""`）
- en: The action attribute isn’t supplied (`<``form method="post">`)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作属性未提供（`<form method="post">`）
- en: 'If you have other attributes attached to the form tag, you can explicitly add
    an `HtmlHelper` called `AntiForgeryToken()` inside the form tag:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在表单标签中附加了其他属性，您可以在表单标签内显式添加一个名为`AntiForgeryToken()`的`HtmlHelper`：
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will generate a hidden input with an arbitrary value. If the value that
    comes back from the client is not the same as when the server originally sent
    it, the request will be denied.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个具有任意值的隐藏输入。如果客户端返回的值与服务器最初发送的不相同，则请求将被拒绝。
- en: In this section, you learned about audit trails and general logging, how to
    keep your frameworks and libraries current, how to always force SSL to make your
    connections secure, and to never trust the client’s input. You also learned that
    every user input should be encoded when received by the server, how to secure
    your headers, how to secure your database by using Entity Framework Core, and,
    finally, how to protect your forms from cross-site request forgery attacks by
    using the `.AddAntiForgery()` Middleware service.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了审计跟踪和常规日志记录，如何保持您的框架和库最新，如何始终强制使用SSL以使您的连接安全，以及永远不要信任客户端的输入。您还了解到，每当服务器接收到用户输入时，都应该对其进行编码，如何保护您的标题，如何使用Entity
    Framework Core保护您的数据库，以及最后如何通过使用`.AddAntiForgery()`中间件服务来保护您的表单免受跨站请求伪造攻击。
- en: In the next section, we’ll look at some real-world issues and how to solve the
    top three threats according to OWASP.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些现实世界的问题以及如何根据OWASP解决前三大威胁。
- en: Safeguarding Against the Top 3 Security Threats
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防御前三大安全威胁
- en: 'The Open Worldwide Application Security Project, or OWASP, is a non-profit
    foundation dedicated to improving the security of software. Since new threats
    are emerging all the time, they keep a list called the OWASP Top 10, which is
    meant to keep software developers up to date regarding the latest security threats
    and how to prevent them. The Top 10 list includes the following security threats:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 开放式全球应用程序安全项目（Open Worldwide Application Security Project，简称OWASP）是一个非营利性基金会，致力于提高软件的安全性。由于新的威胁不断出现，他们保持一个名为OWASP
    Top 10的列表，旨在使软件开发者了解最新的安全威胁以及如何预防它们。Top 10列表包括以下安全威胁：
- en: Broken Access Control
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 破坏的访问控制
- en: Cryptographic Failures
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码学失败
- en: Injection
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注入
- en: Insecure Design
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不安全的设计
- en: Security Misconfiguration
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全配置错误
- en: Vulnerable and Outdated Components
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 易受攻击和过时的组件
- en: Identification and Authentication Failures
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 身份识别和身份验证失败
- en: Software and Data Integrity Failures
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件和数据完整性失败
- en: Security Logging and Monitoring Failures
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全日志记录和监控失败
- en: '**Server-Side Request** **Forgery** (**SSRF**)'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**服务器端请求伪造**（**SSRF**）'
- en: In this section, we’ll cover the top three threats and how to safeguard your
    ASP.NET Core application from these threats – that is, Broken Access Control,
    Cryptographic Failures, and Injection.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍前三大威胁以及如何保护您的ASP.NET Core应用程序免受这些威胁——即破坏的访问控制、密码学失败和注入。
- en: Broken Access Control
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 破坏的访问控制
- en: Broken access control is when a user can perform a particular act in the system
    outside of their intended permissions. Permission checks could be missing in the
    software, or the correct permissions might not have been checked in the software.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 破坏的访问控制是指用户可以在系统外部执行超出其预期权限的特定操作。软件中可能缺少权限检查，或者软件中可能没有正确检查权限。
- en: The key word to focus on here is **authorization**. Authorizing users into your
    system is a big responsibility.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要关注的重点关键字是**授权**。将用户授权进入您的系统是一项重大的责任。
- en: Let’s look at how to get better at access control.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何提高访问控制的水平。
- en: Denying Access by Default
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认拒绝访问
- en: When someone visits a site, consider them anonymous and restricted from the
    administrative area. When an administrator adds someone to the system, they are
    now authenticated and should be able to log in to the system.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人访问网站时，请将其视为匿名用户，并限制其访问管理区域。当管理员将某人添加到系统中时，他们现在已通过身份验证，应该能够登录到系统中。
- en: Your authorization system should be thoroughly tested. Even though a user is
    allowed to log in, they shouldn’t be able to do anything unless an administrator
    authorizes them.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您的授权系统应该进行全面测试。即使用户被允许登录，除非管理员授权，否则他们不应能够做任何事情。
- en: “Deny by default” means that when a user uses the system, they should be denied
    access until permissions are granted.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: “默认拒绝”意味着当用户使用系统时，他们应该被拒绝访问，直到权限被授予。
- en: 'For Razor Pages, you can use the `.AddRazorPages()` Middleware component configuration
    to authorize certain pages and folders, as shown in the following code snippet:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Razor Pages，您可以使用`.AddRazorPages()`中间件组件配置来授权某些页面和文件夹，如下面的代码片段所示：
- en: '[PRE17]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the `AddRazorPages` method, we are only allowing authenticated users into
    the `Admin` area; anonymous users can only go to the root of the website.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AddRazorPages`方法中，我们只允许认证用户进入`Admin`区域；匿名用户只能访问网站的根目录。
- en: 'For controller-based pages such as ASP.NET MVC, you can use the `[Authorize]`
    attribute to allow authenticated users to view the page, as shown here:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于控制器的页面，例如ASP.NET MVC，您可以使用`[Authorize]`属性允许认证用户查看页面，如下所示：
- en: '[PRE18]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code, the `Index` page isn’t available to the authenticated
    user because the `[Authorize]` attribute is on `MySecretController`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，由于`MySecretController`上存在`[Authorize]`属性，认证用户无法访问`Index`页面。
- en: 'If you only want the `Index` page to be available to authenticated users, put
    the `[Authorize]` attribute on the `Index()` method, as shown here:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想让认证用户可以访问`Index`页面，请将`[Authorize]`属性放在`Index()`方法上，如下所示：
- en: '[PRE19]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: These techniques deny anonymous users by default, which should be the proper
    approach.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术默认拒绝匿名用户，这应该是正确的做法。
- en: Avoid Exposing Keys
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免暴露密钥
- en: When you’re building a blog, it’s best to have a URL without a post ID as an
    integer. When I’ve written blog posts, I’ve seen hits on my page before the page
    was public. It was great to see people were interested in looking at my latest
    post, but how were they getting to it? They would go to my blog, pull up the latest
    post, and add `1` to the post ID. There it was – an unfinished post in all its
    unfinished glory.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建博客时，最好有一个不带帖子ID的URL作为整数。当我写博客文章时，我见过在页面公开之前我的页面上的点击。看到人们对我的最新帖子感兴趣真是太好了，但他们是如何到达那里的呢？他们会去我的博客，拉出最新帖子，然后给帖子ID加`1`。那里就是——一篇未完成的帖子，以其未完成的所有荣耀呈现。
- en: 'Imagine this type of scenario on a bank website. A user logs in to their account
    and they see the following URL: https://www.bobsbank.com/view/accountid=511324.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下在银行网站上出现这种情况。用户登录到他们的账户，他们看到以下URL：https://www.bobsbank.com/view/accountid=511324。
- en: A curious user could add `1` to the account ID and view another person’s account.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好奇的用户可能会将账户ID加`1`，然后查看另一个人的账户。
- en: Avoid exposing accounts or primary keys to users and, if a user does guess an
    account number, confirm the authenticated user is the owner of their account before
    viewing it.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 避免向用户暴露账户或主键，并且如果用户猜出了账户号码，在查看之前确认认证用户是该账户的所有者。
- en: Final Notes on Broken Access Controls
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于损坏的访问控制的最后注意事项
- en: 'Here are some other things you should consider:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一些您应该考虑的事项：
- en: Audit trails and logs are gold. They will help you identify risks and patterns
    with users.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计跟踪和日志是宝贵的。它们将帮助您识别用户的风险和模式。
- en: Confirm your authorization system works by running unit tests and integration
    tests. We’ll cover unit and integration tests in a later chapter.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行单元测试和集成测试来确认您的授权系统是否正常工作。我们将在后面的章节中介绍单元和集成测试。
- en: In this section, we learned how to protect ourselves from broken access controls
    by denying users by default, hiding primary keys, and protecting certain pages
    by confirming users are allowed to view that page, as well as how to implement
    audit trails and logs and battle-test our authorization system.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何通过默认拒绝用户、隐藏主键以及确认用户是否有权查看特定页面来保护自己免受损坏的访问控制的影响，以及如何实现审计跟踪和日志并测试我们的授权系统。
- en: In this next section, we’ll look at how to protect against cryptographic failures.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何防止密码学失败。
- en: Cryptographic Failures
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码学失败
- en: OWASP considers cryptographic failures as sensitive data that is unencrypted,
    failed security measures that use invalid access control, and even stale server
    environments, such as servers that don’t contain the latest security patches.
    This includes using industry-proven encryption algorithms which are already included
    in Microsoft Entra.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP将加密失败视为未加密的敏感数据、使用无效访问控制的安全措施，甚至包括过时的服务器环境，如不包含最新安全补丁的服务器。这包括使用已在Microsoft
    Entra中包含的行业标准加密算法。
- en: The following sections detail more common incidents in the industry.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分详细介绍了行业中更常见的事件。
- en: Transmitting Clear Text
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明文传输
- en: If you are transmitting sensitive data across the wire, it should be encrypted
    by using an SSL connection.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在通过电线传输敏感数据，应该使用SSL连接对其进行加密。
- en: A general rule of thumb is that the client should be the one sending sensitive
    data to the server, not the other way around.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一个普遍的规则是，客户端应该是向服务器发送敏感数据的一方，而不是反过来。
- en: If you need to send sensitive data back to the client for approval, it’s best
    to mask the data somehow for display purposes (for example, using XXXX-XXXX-XXXX-9999
    for credit cards) and, when updated, confirm this by having the authenticated
    user re-enter their password or providing some way to authenticate them again.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要将敏感数据发送回客户端以供批准，最好以某种方式对数据进行屏蔽以供显示（例如，使用XXXX-XXXX-XXXX-9999作为信用卡号）并在更新时，通过让已认证的用户重新输入密码或提供某种方式再次验证他们来确认这一点。
- en: Invalid/Expired SSL Certificates
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无效/过期SSL证书
- en: Once your code gets to a server, its primary job is to deliver the data as fast
    and as securely as possible.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的代码到达服务器，其主要任务是以尽可能快和尽可能安全的方式交付数据。
- en: Certificates are required for SSL to create secure connections that have an
    expiration date. There should be some reminder or notification letting administrators
    know when a certificate expires. It’s not recommended to continue using an expired
    certificate on your site.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 证书对于SSL来说，是创建具有过期日期的安全连接所必需的。应该有一些提醒或通知让管理员知道证书何时过期。不建议在网站上继续使用过期的证书。
- en: Unencrypted Database
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未加密的数据库
- en: Again, if your database contains sensitive information, it’s best to be proactive
    and encrypt the database using the database’s recommended encryption method.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，如果你的数据库包含敏感信息，最好采取主动措施，使用数据库推荐的加密方法对数据库进行加密。
- en: Final Notes on Cryptographic Failures
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于加密失败的最后注意事项
- en: 'Let’s look at some final notes:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些最后的注意事项：
- en: Avoid weak algorithms such as MD5, SHA1, or PKCS number 1 v1.5, which are easy
    algorithms to break.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用MD5、SHA1或PKCS 1 v1.5等弱算法，这些算法很容易被破解。
- en: Avoid sending sensitive data to the client. If this is necessary, mask the data.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免将敏感数据发送到客户端。如果这是必要的，请屏蔽数据。
- en: Use proper access key management, storing keys in safe locations such as Microsoft’s
    Key Vault, Google’s Cloud Key Management, or Amazon’s Key Management Service.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用适当的访问密钥管理，将密钥存储在安全位置，如Microsoft的密钥保管库、Google的云密钥管理或Amazon的密钥管理服务。
- en: In this section, we learned how to avoid cryptographic failures by avoiding
    sending clear text, updating stale or invalid SSL certificates, and always encrypting
    the database if it contains sensitive data.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何通过避免发送明文、更新过时或无效的SSL证书以及始终对包含敏感数据的数据库进行加密来避免加密失败。
- en: In the final section, we’ll look at how injection can impact your application.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们将探讨注入如何影响你的应用程序。
- en: Injection
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注入
- en: In 2017, OWASP reported SQL injection was the top threat when writing code for
    the web. Now, their Top 10 includes simply “injection,” which is an umbrella term
    covering SQL injection and XSS as well.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年，OWASP报告称，在编写Web代码时，SQL注入是最大的威胁。现在，他们的前10名包括仅仅是“注入”，这是一个涵盖SQL注入和XSS的通用术语。
- en: SQL Injection
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL注入
- en: We already mentioned that you should never trust the client and always sanitize
    and encode user input, but it bears repeating since it is still considered a threat,
    even if it did move down two spots to number three.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到，你永远不应该信任客户端，并且始终清理和编码用户输入，但由于它仍然被视为一种威胁，即使它已经下降到第三位，这一点仍然值得重复。
- en: The great news is that Entity Framework Core supports parameterized queries
    to help you avoid SQL injection. However, this feature doesn’t mean you don’t
    have to sanitize input from users.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，Entity Framework Core支持参数化查询，可以帮助你避免SQL注入。然而，这并不意味着你不需要对用户输入进行清理和编码。
- en: Script Injection
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本注入
- en: Script injection is when someone enters a script tag in a text box and the value
    is accepted and saved in the database. When the data is displayed on the page,
    the script is triggered and performs a particular action.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本注入是指有人在一个文本框中输入一个脚本标签，其值被接受并保存在数据库中。当数据在页面上显示时，脚本被触发并执行特定的操作。
- en: 'Here is a simple extension method that searches for and destroys malicious
    tags from HTML using regex:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的扩展方法，它使用正则表达式搜索并销毁HTML中的恶意标签：
- en: '[PRE20]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: While this `.Sanitize()` extension method removes any malicious tags from a
    string, if you are passing in HTML-formatted text, it also removes any tag using
    any JavaScript events on tags (such as `onclick='alert("gotcha");'`). It then
    returns the sanitized string for use.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`.Sanitize()`扩展方法会从字符串中移除任何恶意标签，如果你传递的是HTML格式的文本，它也会移除任何带有JavaScript事件的标签（例如`onclick='alert("gotcha");'`）。然后返回清洗后的字符串以供使用。
- en: 'Use this extension method like any other extension method with a string:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用其他任何字符串扩展方法一样使用这个扩展方法：
- en: '[PRE21]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You could even extend the method further so that it includes other safeguards,
    such as encoding the string before returning it.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以进一步扩展该方法，使其包括其他安全措施，例如在返回之前对字符串进行编码。
- en: Always validate, filter, and sanitize input from the user. No matter what.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 总是验证、过滤和清洗用户输入。无论什么情况。
- en: Final Notes on Injection
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注射攻击的最终注意事项
- en: 'Here are some final things you should consider:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你应该考虑的最终事项：
- en: The further you can keep users (and users with malicious intent) away from the
    database, the better
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能将用户（以及有恶意意图的用户）与数据库保持的距离越远，就越好。
- en: Confirm you have a `maxlength` attribute on single-line inputs to minimize how
    many characters are acceptable and limit the ability to allow scripts in HTML
    input fields
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在单行输入上有一个`maxlength`属性，以最小化可接受的字符数并限制在HTML输入字段中允许脚本的能力。
- en: Injection continues to be a credible threat and has always been listed on OWASP’s
    Top 10 list.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 注射攻击持续构成一个可信的威胁，并且始终被列入OWASP的前10大风险列表。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to safeguard our code by understanding what
    sensitive data is and how to secure it using authentication, authorization, and
    SSL-enabled connections.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过理解敏感数据是什么以及如何使用身份验证、授权和启用SSL的连接来保护我们的代码。
- en: In the second part of this chapter, we reviewed some common standards in the
    industry, such as logging, keeping our frameworks and libraries up-to-date, and
    always redirecting to SSL-enabled sites. After that, we learned to never trust
    client data and that we should validate, filter, and sanitize it and always encode
    it, and not announce to the world what server and version we’re running by adding
    or removing security headers. We even created a reusable security middleware component.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们回顾了行业中的某些常见标准，例如日志记录、保持我们的框架和库更新，以及始终重定向到启用SSL的站点。之后，我们学习了永远不要信任客户端数据，我们应该验证、过滤和清洗它，并且始终编码它，不要通过添加或删除安全头信息向世界宣布我们正在运行的服务器和版本。我们甚至创建了一个可重用的安全中间件组件。
- en: We also touched on encrypting database columns with SQL Server and how it’s
    important to protect fields by being proactive, and why creating a custom encryption
    algorithm should be avoided.. We also learned how to avoid cross-site request
    forgery by using anti-forgery tokens.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提到了如何使用SQL Server加密数据库列，以及通过主动保护字段的重要性，以及为什么应该避免创建自定义加密算法。我们还学习了如何通过使用反伪造令牌来避免跨站请求伪造。
- en: Finally, we examined the top three threats as determined by the OWASP Foundation
    and how to properly protect ourselves from Broken Access Control, Cryptographic
    Failures, and Injection of all types.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查了由OWASP基金会确定的三大威胁，以及如何正确保护自己免受破坏性访问控制、加密失败和所有类型的注入攻击。
- en: In the next chapter, we’ll pick up the discussion of Entity Framework Core once
    more and learn how to optimize data access using Entity Framework Core by using
    some intuitive techniques.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将再次讨论Entity Framework Core，并学习如何通过使用一些直观的技术来优化使用Entity Framework Core的数据访问。
