- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Applying Industrial Principles to Software
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将工业原则应用于软件
- en: This chapter explains what can be done to make IT a real industry, and this
    begins with applying the main principles of industrialization, namely cutting
    complexity into small pieces and then standardizing the modules, and in particular
    their interfaces. We will make a comparison with the development of cities, where
    the normalization of water pipes, electricity, and other interfaces has allowed
    for continuous evolution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何使信息技术成为一个真正的行业，这始于应用工业化的主要原则，即把复杂性切割成小块，然后标准化模块及其接口。我们将与城市发展进行比较，其中水管的标准化、电力的标准化和其他接口的标准化已经允许持续进化。
- en: In this chapter, we will explain the very concept of industry, as this is a
    very often used name, but not necessarily every time with a precise understanding
    of its meaning. We will also learn about how industrialization works by cutting
    complex problems into small ones and then making the small ones simple and repeatable,
    principally by means of standardization. We’ll also understand what benefits can
    be drawn from such an approach, in particular in information systems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解释行业的概念，因为这个名称被非常频繁地使用，但并不一定每次都能精确理解其含义。我们还将了解通过将复杂问题切割成小问题，然后通过标准化使小问题变得简单和可重复，工业化的运作方式。我们还将了解从这种做法中可以得出什么好处，特别是在信息系统方面。
- en: 'We’ll cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: What is an industry?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是行业？
- en: Management of complexity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂性的管理
- en: The benefits of standards and norms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准和规范的好处
- en: The urbanism metaphor of information systems
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息系统中的城市主义隐喻
- en: What is an industry?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是行业？
- en: In the previous chapter, we compared craftsmanship to industrialization, hopefully
    showing that, while the former has nothing to be ashamed of, the latter is its
    natural evolution in time. All industries start with artisans and, with the work
    becoming more and more controlled and repeatable, potentially end up as real industries
    where the artisans have gradually converted to engineer competencies and jobs.
    Most people understand this without any need for explanation because it can be
    seen in many day-to-day experiences. When one, for example, first attempts at
    realizing a new task (say, cutting hair), the first trials are not comparable
    to the ensuing ones. After a period of time, the process starts to become more
    regular (the hair is cut fine, and the initial customer who accepted to be your
    *guinea pig* does not complain anymore). Given enough training, one gets expertise
    in the field and develops a routine (the hair is cut at a defined length and with
    the expected shape, in a way that can be precisely reproduced in a future haircut).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们将手工艺与工业化进行了比较，希望表明，虽然前者没有什么可羞愧的，但后者是其随时间自然演化的结果。所有行业都是从工匠开始的，随着工作越来越受控和可重复，最终可能成为真正的行业，工匠逐渐转化为工程师能力和工作。大多数人无需解释就能理解这一点，因为这在许多日常经验中都可以看到。例如，当一个人第一次尝试完成一项新任务（比如剪发）时，最初的尝试与随后的尝试不可比。经过一段时间，这个过程开始变得更加规律（头发被剪得很细，最初接受成为你的*小白鼠*的客户也不再抱怨）。经过足够的训练，一个人就会在该领域获得专业知识，并发展出一套常规（头发被剪到定义的长度和预期的形状，以一种可以在未来的剪发中精确复制的方式）。
- en: How about trying to formalize what is behind industrialization, though? In other
    terms, how do we characterize what constitutes industrialization? As we saw, there
    is the concept of being reproducible, which means there is a measured norm that
    should be met. Also, this norm is shared between all knowledgeable people in the
    field, which means it becomes a standard. In our example with haircuts, there
    are names for haircuts, and everybody in the field knows what “trimmed” or “shortened”
    means, which makes it safe for customers not to leave the hairdresser with a hairstyle
    they did not expect. Also, from one hairdresser to another, one can expect to
    obtain a globally similar result once stated using the right vocabulary. We obtain
    a homogeneous quality in this way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将工业化背后的东西形式化如何？换句话说，我们如何描述构成工业化的要素？正如我们所见，有一个可复制的概念，这意味着应该达到一个可测量的规范。此外，这个规范在所有领域的知识人士之间是共享的，这意味着它成为了一个标准。在我们的理发例子中，有剪发的名称，该领域的每个人都了解“修剪”或“缩短”的含义，这使得顾客不会带着他们没有预期的发型离开理发师。此外，从一位理发师到另一位理发师，一旦使用正确的词汇表达出来，就可以期待获得一个全球相似的结果。我们就是这样获得同质化的质量的。
- en: 'In industrialization, just like in hairdressing, there is also the concept
    of addressing small parts of the whole. Except if you would like to look like
    a well-known person, you will not describe your haircut as a whole but describe
    small parts that form a complete hairstyle. For example (although not a good one,
    from an aesthetic point of view): long at the back, short on the top, tapered
    on the side. Addressing the parts instead of the whole and cutting a complex problem
    into small, simple ones that can be solved simply is the basis for industrialization,
    engineering, and even problem-solving as a whole.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业化过程中，就像在理发一样，也存在关注整体中各个小部分的概念。除非你想要看起来像名人，否则你不会将你的发型描述为整体，而是描述构成完整发型的各个小部分。例如（尽管从美学角度来看不是很好）：后面长，顶部短，侧面渐细。关注部分而不是整体，将复杂问题分解成简单的小问题，这些小问题可以简单地解决，这是工业化的基础，也是工程乃至整体问题解决的基础。
- en: A good hairdresser may be a fine artisan, but once you can get a similar haircut
    from many professionals in the field, it has simply become an **industry**. In
    the following sections, we will apply this definition to IT and show how industrialization
    happens there. In order to do so, we will first dive a bit deeper into what really
    stands behind the concept, in terms of actions to realize.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的理发师可能是一位优秀的工匠，但一旦你可以在该领域的许多专业人士那里得到类似的发型，它就简单地变成了一个**行业**。在接下来的章节中，我们将应用这个定义来探讨信息技术领域，并展示工业化是如何发生的。为了做到这一点，我们首先需要更深入地了解实现该概念背后的真正含义。
- en: The two roots of industrialization – modularization and standardization
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工业化的两个根源——模块化和标准化
- en: After a simple example as an introduction to what we are going to call industrialization
    when applying it to Information Technology, we are going to dive a bit deeper
    into two associated movements in the concept, namely cutting big problems into
    small ones, which can be called **modularization** (as we expect small modules
    of a whole system) and solving these small problems with a normalized approach
    to reach homogeneous quality, which can be called **standardization**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单介绍我们将应用于信息技术领域时所说的工业化概念之后，我们将更深入地探讨概念中的两个相关运动，即把大问题分解成小问题，这可以称为**模块化**（因为我们期望整个系统的小模块），以及用标准化的方法解决这些小问题以达到均匀的质量，这可以称为**标准化**。
- en: Modularity to reduce complexity
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化以降低复杂性
- en: 'Before explaining the concept of complexity, let’s see with another example
    how it relates to modularity. This time, we will use a mechanical comparison by
    analyzing the different modules of a car. A modern car is a feat of engineering,
    gathering so many parts in a sophisticated manner that is it virtually impossible
    for a person alone to build such a system. When one decomposes a car into modules,
    there are definitely clear-cut, well-separated modules that each have a purpose:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释复杂性的概念之前，让我们通过另一个例子来看看它与模块化的关系。这次，我们将通过分析汽车的各个模块来进行机械比较。现代汽车是工程学的杰作，将许多部件以复杂的方式组合在一起，以至于一个人单独构建这样的系统几乎是不可能的。当将汽车分解为模块时，肯定有明确、分离的模块，每个模块都有其目的：
- en: The engine will provide power to displace the car
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发动机将为汽车提供动力
- en: The body will protect the driver and passengers
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车身将保护驾驶员和乘客
- en: The wheels and driving train will transform power into motion
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮胎和驱动系统将把动力转化为运动
- en: The chassis will hold the other modules together in a rigid way, and so on
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底盘将以刚性的方式将其他模块固定在一起，等等
- en: 'The engine alone still is quite a beast, but we can decompose it further, into
    sub-modules:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 发动机本身仍然相当强大，但我们可以进一步将其分解为子模块：
- en: The injection system will bring gas into the chamber
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注射系统会将气体引入气室
- en: The pistons will transform the explosion into linear motion
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活塞会将爆炸转化为线性运动
- en: The crankshaft will convert linear motion into rotary motion
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曲轴将线性运动转化为旋转运动
- en: The lubrication system will ensure the system does not degrade due to wearing,
    heating, and so on
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 润滑系统将确保系统不会因磨损、加热等原因而退化
- en: 'Again, the complexity has lowered, and, if we go one step further into decomposing
    modules, the lubrication system can be described as the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，复杂性已经降低，如果我们进一步分解模块，润滑系统可以描述如下：
- en: A pump ensures oil circulation
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 泵确保油液循环
- en: The oil performs cooling and allows for frictionless movements
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 油液起到冷却作用并允许无摩擦运动
- en: The oil filter removes small debris that could otherwise increase friction and
    wear, and so on
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 油滤清器可以去除可能增加摩擦和磨损的小碎片，等等
- en: 'This time, we have reached such a small level of complexity that almost anyone
    could act on these modules: adding oil can be done by anyone owning a car, provided
    they know where to pour it; replacing an oil filter is as simple as unscrewing
    the old one and screwing a new one into the same place.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们已经达到了如此低的复杂性水平，以至于几乎任何人都可以对这些模块采取行动：换油可以由任何知道在哪里倒油的汽车车主完成；更换油滤清器就像拧下旧的，然后拧上新的，放在同一个地方一样简单。
- en: 'Modularity, really, is the art of cutting complex things into small parts that
    are easier to manage. If modularization is done well, complexity decreases at
    each step. Imagine we had separated the engine as left and right portions of it:
    we surely would not have made it easier to observe and maintain. Indeed, modularity
    is not simply the cutting of the system; it is the art of cutting it in an intelligent
    way so that complexity decreases. But how can we do that? This is where the experience
    of artisans and the help of a long history of making comes into place, providing
    enough expertise to know where the system should be and what will make it simpler.
    The first engines surely did not have an oil filter, but after some time being
    obliged to remove all the oil from the engine after a few hundred kilometers,
    filter it, and pour it back into the engine, it became obvious inserting a filter
    into the engine oil flow was the clever thing to do. If we try to summarize this
    in just one sentence, modules should be carved out after functions. The oil filter
    is there because, in the process of lubrication, there has to be a filtering function.
    It does make sense to assign this function to one and only one module.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化，实际上是将复杂事物切割成更小部分以便于管理的艺术。如果模块化做得好，每一步都会降低复杂性。想象一下，如果我们把发动机分成左右两部分：我们肯定不会让它更容易观察和维护。确实，模块化不仅仅是系统的切割；它是在智能方式下切割的艺术，以便降低复杂性。但我们如何做到这一点呢？这就是工匠的经验和长期制造历史的帮助发挥作用的地方，提供了足够的专长来知道系统应该在何处，以及什么会使它更简单。最初的发动机肯定没有油滤清器，但经过一段时间，在行驶了几百公里后被迫从发动机中取出所有油，过滤它，然后再倒回发动机，很明显，在发动机油流中插入一个滤清器是明智之举。如果我们试图用一句话来总结这一点，模块应该在功能之后被切割。油滤清器之所以存在，是因为在润滑过程中，必须有一个过滤功能。将这个功能分配给一个模块是有意义的。
- en: Standardization to ensure modularity is helpful
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为了确保模块化，标准化是有帮助的
- en: 'The relationship between the different modules, the way they fit together,
    and how they interact are other criteria that must be taken into account. Cutting
    down is not enough: if one wants the whole system to function, defining smaller
    modules is the first step, but once created, they must be put back together to
    reach the global goal. This is where the way the modules have been cut is important,
    and we have explained previously that it should follow functions.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不同模块之间的关系、它们如何组合以及它们如何相互作用，这些都是必须考虑的其他标准。仅仅减少模块数量是不够的：如果想让整个系统正常运作，定义更小的模块是第一步，但一旦创建，它们必须重新组合以达到全局目标。这正是模块切割方式的重要性所在，我们之前已经解释过，它应该遵循功能划分。
- en: 'But how about putting them back together? If modules are aligned with functions,
    how can we make sure they fit together well? In fact, the problem is quite simple
    to explain and sometimes extremely hard to solve, needing large engineering teams
    to do so: we have to ensure that the common function they share is exactly the
    same. If two functions have to be reassembled, that means they have a small connecting
    sub-function in common, which is generally called the interface. This interface
    has to be defined in a similar pattern on both sides.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但如何将它们重新组合呢？如果模块与功能对齐，我们如何确保它们能够很好地结合？实际上，这个问题解释起来很简单，但有时解决起来却极其困难，需要大型工程团队来完成：我们必须确保它们共享的公共功能完全相同。如果两个功能需要重新组装，这意味着它们有一个小的连接子功能是共同的，这通常被称为接口。这个接口必须在两边以类似的方式定义。
- en: 'Let’s take the example of our oil filter again: it has been separated from
    the rest of the lubrication system and engine for its definition, but it also
    has to be put back in the engine system to operate and participate in the higher
    level of function, namely providing power to the car. To do so, it has been explained
    the oil filter has to be screwed back to the position in the engine, and this
    is where an interface will be needed. This interface is simply a screw thread:
    the oil filter will present a threaded oil and the engine a threaded growth at
    the place where the filter has to be placed, with of course a hole in it, allowing
    oil to flow in and from the filter. The interface itself is defined with functions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次以我们的油滤清器为例：它已经从润滑系统和其他发动机部分分离出来进行定义，但它也必须放回发动机系统中才能运行并参与更高层次的功能，即向汽车提供动力。为此，已经解释了油滤清器必须拧回到发动机中的位置，这就是需要接口的地方。这个接口只是一个螺纹：油滤清器将提供一个螺纹油，发动机在滤清器必须放置的位置提供一个螺纹凸起，当然，它有一个孔，允许油流入和流出滤清器。接口本身由功能定义：
- en: It should provide a stable attachment
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该提供稳定的连接
- en: It should be tight enough to be oil-proof
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该足够紧以防止漏油
- en: It should allow enough fluid circulation, and so on
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该允许足够的流体循环，等等
- en: 'We are one step forward, but there remains another step to do in order to reach
    industrialization: the interface must be standardized, which means all the preceding
    functions should be specified in such a way that replacement is easy and each
    provider can participate in the higher-level module simply by knowing the interface.
    In our example, the oil filter, in order to participate in the engine system,
    has to adhere to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向前迈出了一步，但为了达到工业化，还有另一步要做：接口必须标准化，这意味着所有前面的功能都应该以易于替换的方式指定，以便每个供应商只需了解接口就可以参与更高层次的模块。在我们的例子中，为了参与发动机系统，油滤清器必须遵守以下规定：
- en: Use the precise thread diameter (for European oil filters, it is a 20-millimeter
    diameter, with a thread step of 1.5 millimeters)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用精确的螺纹直径（对于欧洲油滤清器，它是20毫米直径，螺纹步进为1.5毫米）
- en: Oil-proofness is ensured by a circular joint that is 62 millimeters wide in
    the same standard
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一个直径为62毫米的圆形接口确保了防漏油
- en: The capacity to retain debris based on fluid circulation, and thus the duration
    of the filter use, is determined by the volume of the filter, which comes in two
    standard sizes, and so on
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于流体循环保留碎屑的能力，以及因此滤清器使用的持续时间，由滤清器的体积决定，有两种标准尺寸，等等
- en: 'Here is a very low-grade schema of how an oil filter is attached to a car engine:
    a threaded hole in the oil filter adapts to a threaded piece of metal with a hole
    in it that is on the external part of the engine, for easy access:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何将油滤清器连接到汽车发动机的非常低级的示意图：油滤清器上的螺纹孔与发动机外部的带孔金属螺纹件相适配，以便于访问：
- en: '![Figure 2.1 – Schematic positioning of an oil filter on a car engine](img/B21293_02_1.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 油滤清器在汽车发动机上的示意图位置](img/B21293_02_1.jpg)'
- en: Figure 2.1 – Schematic positioning of an oil filter on a car engine
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 油滤清器在汽车发动机上的示意图位置
- en: There we have it! If we now go back to the explanation, we have modules that
    are so standardized that one can buy them anywhere and they will have the same
    interfaces, although their inner functions may be different; modules put together
    will each have their function but provide a higher-level, more sophisticated function
    to the global system they form together. A few steps more and the whole system
    operated by the many modules and submodules will have a complexity that could
    not have been addressed without this industrial approach.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们要找的！如果我们现在回到解释，我们会发现模块非常标准化，可以在任何地方购买，它们将具有相同的接口，尽管它们的内部功能可能不同；组合在一起的模块将各自具有其功能，但为它们共同形成的全局系统提供更高层次、更复杂的功能。再走几步，由许多模块和子模块组成的整个系统将具有这种工业方法无法解决的问题的复杂性。
- en: To take another example that is more associated with our day-to-day experience,
    small batteries, and chargers are currently the target of a push to standardization
    by governments. This is particularly visible in the European Community, where
    USB-C has been pushed down the throat even to massive opponents such as Apple.
    Large companies have been using many different non-compatible connectors and chargers
    for decades, leading to a huge waste of electronic systems and complexity in the
    everyday lives of the users, forcing them to juggle many different pieces of equipment.
    This law is already having some results in making charging a phone less complex
    for the public.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以另一个与我们日常经验更相关的例子来说明，小型电池和充电器目前正受到政府标准化推动的目标。这在欧洲共同体中尤为明显，USB-C甚至被强推给像苹果这样的大规模反对者。大型公司几十年来一直在使用许多不同的非兼容连接器和充电器，导致电子系统的大量浪费和用户日常生活中的复杂性，迫使他们在许多不同的设备之间来回切换。这项法律已经在使公众为手机充电变得更加简单方面产生了一些效果。
- en: Talking about complexity, we will have to define more precisely what is behind
    this term, and this is what we are going to do in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 谈及复杂性，我们不得不更精确地定义这个术语背后的含义，这正是我们将在下一节中要做的。
- en: Management of complexity
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂性的管理
- en: The word *complexity* refers to the quality of something that is composed of
    many different parts. It is often confused with *complication*, which brings the
    meaning of something hard to understand. Most information systems are complex,
    and how this complexity is handled can make them complicated.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*复杂性*指的是由许多不同部分组成的某物的特性。它常常与*复杂性*混淆，后者意味着某物难以理解。大多数信息系统都是复杂的，而如何处理这种复杂性可以使它们变得复杂。
- en: Different types of complexity
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂性的不同类型
- en: The concept of complexity was introduced previously when talking about how to
    reduce it by cutting large, difficult-to-operate systems into small ones that
    are easier to deal with. In this section, we will come back to this concept of
    complexity and start by stating that there are two kinds of complexity, namely
    the **intrinsic**, functional one and the avoidable, **accidental** one. The first
    one comes from the function itself, and if a module is to provide this function,
    it cannot do less than this. The second one is everything that is added when implementing
    the function to make it operate, and that cannot be considered as purely necessary
    for the function itself. Of course, the whole deal will be to reduce as much as
    possible the second one, since the two add up and the first one cannot be reduced
    by definition.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论如何通过将大型、难以操作的系统切割成更小的、更容易处理的小系统来减少复杂性时，我们之前引入了复杂性的概念。在本节中，我们将回到这个复杂性的概念，并首先声明存在两种类型的复杂性，即**内在的**、功能性的和**可避免的**、**偶然的**。第一种来自功能本身，如果一个模块要提供这个功能，它不能做得少于这一点。第二种是在实现功能时添加的一切，这不能被视为功能本身的纯粹必要部分。当然，整个目标将是尽可能减少第二种，因为两者相加，而第一种根据定义不能减少。
- en: 'In our example of an oil filter for a car engine, the folding of the absorbing
    paper inside the filter is intrinsic complexity, because the different stacks
    of paper and how they form a complex path for the oil are the way the filter functions,
    retaining the heavy metal particles in the foldings of paper, while the oil reaches
    the output of the filter with cleaner, purer characteristics. The metal casing
    of the filter, really, cannot be considered as a participant in the filtering
    operation. Sure – it is helpful to hold the paper sheets together and facilitate
    manipulation, but it does not participate in filtering: this is accidental complexity
    in the oil filter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们关于汽车发动机油滤清器的例子中，滤清器内部吸收纸的折叠是内在的复杂性，因为不同的纸张堆叠以及它们如何形成复杂的油流路径是滤清器工作的方式，在纸张的折叠处保留重金属颗粒，而油以更清洁、更纯净的特性到达滤清器的输出端。实际上，滤清器的金属外壳不能被视为过滤操作的参与者。当然——它有助于将纸张片固定在一起并便于操作，但它并不参与过滤：这是油滤清器中的偶然复杂性。
- en: Information systems are filled with accidental complexity, and considering that
    the smallest text notes application nowadays uses thousands of lines of code and
    megabytes of memory, this only starts to show the problem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 信息系统中充满了偶然的复杂性，考虑到如今最小的文本笔记应用也使用了数千行代码和数兆字节的内存，这仅仅开始显示出问题的严重性。
- en: Computer science as a way to deal with complexity
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算机科学作为处理复杂性的方法
- en: It may sound weird that complexity has reached such a level considering that
    computers have been designed with added productivity in mind. After all, early
    computers were built to strongly accelerate calculations that otherwise would
    take days, weeks, or even months, and required careful double-checking in order
    to avoid errors as much as possible. The cost of investment in creating a computer
    was huge due to increasing complexity at first (designing modern computers and
    electronic chips is one of the most complex endeavors of our civilization), but
    the using of the computer to quickly produce accurate results for many problems
    would largely pay for the investment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到计算机的设计初衷是提高生产力，复杂性达到如此高的水平可能听起来有些奇怪。毕竟，早期的计算机是为了大幅加速那些否则需要几天、几周甚至几个月的计算而建造的，并且需要仔细的双重检查以尽可能避免错误。由于最初设计的复杂性增加，投资于创建计算机的成本巨大（设计现代计算机和电子芯片是我们文明中最复杂的任务之一），但使用计算机快速产生大量问题的准确结果在很大程度上可以弥补投资。
- en: 'A lot of work currently done by computers today is of a high level of technical
    complexity: displaying high-resolution real-time pictures from 3D modeling in
    games, performing long calculations such as discrete Fourier transforms or Monte
    Carlo simulations, and so on. Lots of these operations could not be realized with
    the same level of accuracy and low error level by humans or even large groups
    of them. Thus, we can consider IT has helped reduce complexity.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 目前计算机所做的许多工作都具有高度的技术复杂性：在游戏中显示来自3D建模的高分辨率实时图像、执行如离散傅里叶变换或蒙特卡洛模拟等长时间计算等。许多这些操作无法由人类或甚至大量人群以相同的精度和低错误率实现。因此，我们可以认为IT有助于降低复杂性。
- en: Information systems and complexity
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息系统与复杂性
- en: But at the same time, and this is particularly true for people like me who have
    been in the software field for more than 30 years, it just looks like computers
    actually did not bring the incredible functional advances that the huge increase
    in computing power would lead us to believe. GPUs are millions of times quicker,
    but games are only a few times better. Personal computers are hundreds of times
    more powerful, but vocal typing is still far from perfect, and word processing
    has basically not changed, with new features being – most of the time – useless
    at best, and bloatware at worst.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但与此同时，尤其是对于像我这样在软件领域工作了30多年的人来说，这看起来就像是计算机实际上并没有带来那些巨大的功能进步，而这些进步本应是我们对计算能力大幅提升的预期。GPU的速度快了数百万倍，但游戏体验仅提高了几倍。个人电脑的功率强了数百倍，但语音打字仍然远未完美，文字处理基本没有变化，新功能——大多数时候——充其量是无用的，最糟糕的是变成了臃肿的软件。
- en: It just happens that, along with the capacity of computers, we have asked them
    to do more and more. And while some of these additional operations are bringing
    new value (optimization of mechanical models, capacity to simulate complex physical
    models, and so on), a lot are non-value-adding features (larger screens, infinity
    of nuances of colors) that really make for additional comfort but, in **line-of-business**
    (**LOB**) software applications, do not bring anything to the functional value.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正好，随着计算机容量的增加，我们要求它们做更多的事情。虽然其中一些额外的操作带来了新的价值（如机械模型的优化、模拟复杂物理模型的能力等），但很多都是非增值特性（更大的屏幕、无限的颜色细微差别），这些特性确实增加了额外的舒适度，但在**业务线**（**LOB**）软件应用中，并没有为功能性价值带来任何东西。
- en: To summarize, it looks very much like accidental complexity has grown almost
    at the same rhythm as computational power, and thus, the remaining power has brought
    very little performance in handling intrinsic, business-oriented complexity.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，偶然的复杂性几乎与计算能力的增长同步，因此，剩余的计算能力在处理内在的、以业务为导向的复杂性方面带来的性能提升非常有限。
- en: The concept of “as a service”
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “作为服务”的概念
- en: Luckily, there is also good news on the evolution of information systems, and
    the “as a service” approach is one such example. The “as a service” approach means
    that something of value is provided to the user without the material part. **Infrastructure
    as a service** (**IaaS**), for example, brings you memory and CPU without the
    hardware part of the computer; that is dealt with by someone else, generally the
    cloud provider. **Software as a service** (**SaaS**) provides you with working
    software that you can call with a simple web browser without having to worry about
    prerequisites, installation, purchase of licenses, and so on.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，关于信息系统的发展也有一些好消息，而“作为服务”的方法就是其中之一。 “作为服务”的方法意味着向用户提供有价值的东西，而不涉及物质部分。例如，**基础设施即服务**（**IaaS**）为您提供了内存和CPU，而不涉及计算机的硬件部分；这由其他人处理，通常是云服务提供商。**软件即服务**（**SaaS**）为您提供可以简单通过网页浏览器调用的软件，而无需担心先决条件、安装、购买许可证等等。
- en: 'If we consider this approach with respect to the concepts of complexity exposed
    previously, we can say that the goal is to reduce accidental complexity to almost
    zero by providing not even the function alone but only the results of the function,
    which is the service requested. If almost nothing of the surrounding artifacts
    remains; only the outcome of the software-assisted procedure is obtained. For
    example, in IaaS, infrastructure as a whole is not what is needed per se by the
    buyer: one does not crave physical computers consuming space, needing local temperature
    control, racks, and so on, but has to go through this accidental complexity to
    obtain CPU power, RAM usage, storage space, or network bandwidth and connectivity.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这种方法与之前提出的复杂性概念联系起来考虑，我们可以这样说，目标是通过对函数本身不提供，而只提供函数的结果，即所需的服务，来将偶然复杂性降低到几乎为零。如果周围的大部分工件都不存在；只获得了软件辅助程序的结果。例如，在IaaS中，整体基础设施本身并不是买家真正需要的：买家并不渴望占用空间的物理计算机、需要局部温度控制、机架等等，但必须经历这种偶然复杂性才能获得CPU能力、RAM使用、存储空间或网络带宽和连接性。
- en: The “as a service” concept has considerably diminished the perceived complexity
    of information systems. Of course, there is no free lunch, and the overall complexity
    is still there (it has even increased). But the separation, not modules by modules
    this time, but functions by functions, has established a clear cut between the
    high technical complexity that is handled by the provider of the service and the
    low complexity that remains for the user. The financial transfer from the latter
    to the former is explained by the fact that the user gets a great advantage of
    focusing only on value-adding, business-oriented complexity. How the provider
    of the service gains a financial interest in handling higher technical complexity
    (which would be accidental for a mere user, but is standard business complexity
    for the provider) comes from the fact that they are an expert in it, handle large
    volumes for many users, and apply scale-related cost savings. In the end, everyone
    benefits from a clear cut of complexity, which can also be described as a separation
    of responsibility and task specialization, which is consubstantial with industrialization,
    as explained previously.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: “作为服务”的概念大大降低了信息系统感知的复杂性。当然，没有免费的午餐，整体复杂性仍然存在（甚至有所增加）。但这次不是模块与模块之间的分离，而是功能与功能之间的分离，在服务提供商处理的高技术复杂性和用户保留的低复杂性之间建立了一个清晰的界限。从后者到前者的财务转移可以用这样一个事实来解释：用户获得了专注于增值、面向业务复杂性的巨大优势。服务提供商如何从处理更高的技术复杂性中获得财务利益（对于一个普通用户来说可能是偶然的，但对于服务提供商来说是标准业务复杂性），这来自于他们是这方面的专家，为许多用户处理大量业务，并应用规模相关的成本节约。最终，每个人都从复杂性的清晰划分中受益，这也可以描述为责任和任务专业化的分离，正如之前所解释的那样，这与工业化是一致的。
- en: Link to a minimum viable product
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接到一个最小可行产品
- en: 'Lots of people working with Agile methods know a famous picture illustrating
    the concept of a **minimum viable product** (**MVP**), from Henrik Kniberg, who
    created it in the mid-2010s ([https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png](https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png)):
    it shows a first line of product evolution from a wheel to two wheels linked,
    then to two wheels and a body, and finally a car. During this evolution, a smiley
    frowns all the time and is only satisfied at the last step. In the second line
    of the image, the steps are replaced by a skateboard (sad smiley), then a bike
    (neutral smiley), followed by a motorbike (reasonably happy), and finally a convertible
    car (extremely happy smiley).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 许多使用敏捷方法工作的人都知道一张著名的图片，它展示了最小可行产品（MVP）的概念，这是Henrik Kniberg在2010年代中期创造的（[https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png](https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png)）：它展示了产品演化的第一行，从轮子到两个轮子相连，然后到两个轮子和车身，最后变成汽车。在这个过程中，笑脸一直皱着眉头，只有在最后一步才满意。在图片的第二行中，步骤被滑板（悲伤的笑脸）、自行车（中性的笑脸）、摩托车（相当高兴）和敞篷汽车（极度高兴的笑脸）所取代。
- en: It has been studied a lot and is a great description of the concept of the evolution
    of a software application from MVP (the skateboard) to a full-fledged project
    (the car on the right). Lots of imitations do not carry as much meaning because
    they miss a few details. For example, some of them end up with the same car on
    the two lines, which is completely wrong as Kniberg purposefully showed different
    cars at the end of the two processes. The whole story is perfectly explained at
    [https://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp](https://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp),
    and I am certainly not going to paraphrase it, but rather try to make a link with
    what was written previously about the “as a service” approach.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经被广泛研究，并且是对软件应用从最小可行产品（滑板）到完整项目（右侧的汽车）这一演变概念的绝佳描述。许多模仿版本并没有传达出太多的意义，因为它们遗漏了一些细节。例如，其中一些最终在两条线上结束于同一辆汽车，这完全错误，正如Kniberg故意在两个过程的最后展示了不同的汽车。整个故事在[https://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp](https://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp)上得到了完美的解释，我当然不会对其进行释义，而是尝试将其与之前关于“作为服务”方法的讨论联系起来。
- en: What is the service that is talked about in that famous picture? Does it have
    a car? No – owning a car or driving it is merely a side-effect on the service
    itself, which is “going from one point to another.” Using an MVP will help us
    collect feedback as quickly as possible on the actual needs of the users. Now,
    if we go to the extreme of the “as a service” approach and consider displacement
    of the person (and possible luggage) as the one and only request, science-fiction-like
    teleportation would be absolutely perfect! And we are a bit more reasonable with
    possibility and price; as Kniberg says, maybe the most basic approach should be
    to provide the user with a bus ticket.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 那张著名的图片中提到的服务是什么？它有汽车吗？没有——拥有或驾驶汽车仅仅是服务本身的一个副作用，而这个服务是“从一个地方到另一个地方”。使用最小可行产品（MVP）将帮助我们尽快收集关于用户实际需求的反馈。现在，如果我们走向“作为服务”方法的极端，并将人的位移（以及可能的行李）作为唯一请求，科幻般的传送就会变得绝对完美！而且我们对可能性和价格更加合理；正如Kniberg所说，可能最基本的方法是向用户提供一张公交车票。
- en: 'This would also be a valuable MVP, but that would be forgetting the fact that
    an MVP does not mean the designer does not have the final destination in mind:
    we provide the skateboard to collect feedback (for example, “stability is important”)
    while still having in mind that we want a car in the end, maybe because the initially
    expressed need is that of autonomous travel.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会是一个有价值的MVP，但这是忘记了一个事实：MVP并不意味着设计师没有考虑最终目标：我们提供滑板来收集反馈（例如，“稳定性很重要”），同时仍然想着我们最终想要一辆汽车，也许是因为最初表达的需求是自主旅行。
- en: 'What is of uttermost importance – and we will come back to why the cars are
    not the same in the end – is that, while taking into account feedback, stability
    was important in this example and the design quickly evolved to a bike, which
    is more stable and easier to stay on. But this is not the only feedback that was
    received. For example, the fact that the vehicle was not covered was not really
    an issue, and the design evolved into a bike and then a motorbike, which has no
    wind or rain protection. In the end, the proposed car has no roof: not only because
    it is simply not requested, but because the interest in driving with hair in the
    wind may have arisen from the feedback loop. If one had created the car directly,
    maybe the customer would not have thought of an open roof. But asking for continuous
    feedback has shown an additional desirable feature (not a need, though, but just
    a “bonus”) that would have not been detected otherwise.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是什么——我们将会回到为什么最终汽车不一样的原因——那就是，在考虑反馈的同时，在这个例子中稳定性很重要，设计迅速演变为自行车，这辆自行车更稳定，更容易保持平衡。但这并不是收到的唯一反馈。例如，车辆没有覆盖并不是真正的问题，设计演变为自行车，然后是摩托车，没有风或雨的保护。最终，提出的汽车没有车顶：这不仅是因为它根本就没有被要求，而且因为驾驶时头发飘在风中的兴趣可能源于反馈循环。如果直接创造了汽车，也许客户就不会想到一个敞篷车顶。但要求持续的反馈已经显示出一种额外的期望特征（虽然不是需求，而只是一个“额外奖励”），否则可能无法检测到。
- en: This is what companies talk about when they express their desire to “delight
    their customers.” Most of us engineers do not immediately get it because we tend
    to see problems with one optimized solution that derives from initial specifications,
    but the best solutions bring value to customers that they would not even have
    thought about initially. And guess what? Since all companies are generally good
    at creating the expected features, these unexpected and delightful features will
    be the ones your customers will use to differentiate your service from your competitors!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是公司在表达他们希望“取悦客户”的愿望时所谈论的内容。我们大多数工程师并不立即理解这一点，因为我们倾向于看到从初始规范中衍生出的一个优化解决方案的问题，但最好的解决方案为客户带来了他们甚至最初都没有考虑过的价值。而且你知道吗？由于所有公司通常都擅长创造预期的功能，这些意外和令人愉悦的功能将成为客户用来区分你的服务与竞争对手的服务的东西！
- en: Now that the concept of complexity should be clear, we will propose a first
    approach to how to reduce it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在复杂性的概念应该已经清晰了，我们将提出一种如何减少复杂性的初步方法。
- en: The benefits of standards and norms
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准和规范的好处
- en: The first section of this chapter, *What is an industry?*, started talking about
    standardization and how it is essential for modularization to make sense. Let’s
    imagine the contrary and a system that has been arbitrarily cut into several smaller
    ones, without reflection on the way to define these parts, how they interact,
    and how they each can be replaced by improved versions. The result would be that
    modules could not be designed without knowing the whole and could not be replaced
    by existing modules since the way they are glued to the rest would not already
    exist. At best, this would only make the whole problem a bit easier to address;
    at worst, the added difficulty of putting everything back together would largely
    overcome the reduction of complexity with respect to addressing the whole system
    at once.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一节*什么是行业？*开始讨论标准化以及它是模块化有意义所必需的。让我们想象相反的情况，一个系统被任意切割成几个更小的部分，没有考虑如何定义这些部分，它们如何相互作用，以及它们如何可以被改进的版本所替代。结果将是，模块不能在没有了解整体的情况下设计，也不能由现有的模块所替代，因为它们粘合到其余部分的方式可能已经不存在。至多，这只会使整个问题更容易解决；最坏的情况是，将一切重新组合起来的额外难度将大大超过一次性解决整个系统所带来的复杂性减少。
- en: This is the reason why the cutting interfaces of the modules and their standardization
    are so important, and why we will dedicate the next section to stressing this
    with additional examples.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么模块的切割界面及其标准化如此重要，为什么我们将用额外的例子在下一节中强调这一点。
- en: Docker, containers, and OCI
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker、容器和OCI
- en: The **Docker** technology is a great way to talk about norms and standards because
    its very name starts with a metaphor for an industrial concept that prospered
    through standardization, namely freight and shipping containers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker**技术是讨论规范和标准的一个很好的方式，因为它的名字本身就以一个工业概念的隐喻开头，这个概念通过标准化而繁荣，即货运和集装箱。'
- en: 'Until the 1950s, freight transportation was not standardized at all, and filling
    a ship with freight was quite a craftsmanship: packages came in all sizes and
    weights, some of them being soft, some of them being hard. The way to bind them
    together so that they did not move during transportation was customized at every
    different shipping. It was extremely hard to correctly fill a vehicle since there
    was little chance all packages would fit nicely to occupy all space while keeping
    fragile and lightweight packages at the top and heavy, solid ones at the bottom.
    If you then add the problems of load balance, humidity, or temperature effects
    that could transmit from one package to another, and the occasional last-minute
    package that was too heavy to put on top of the other ones and forced the dockers
    to unload part of the shipment and rearrange everything, you start to get an understanding
    of what a complicated job freight shipping was at that time.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 直到20世纪50年代，货物运输根本未实现标准化，用货物装满一艘船是一项相当精细的手艺：包装大小和重量各异，有的柔软，有的坚硬。将它们绑在一起以便在运输过程中不移动的方法在每个不同的运输中都是定制的。正确填充车辆极其困难，因为几乎没有机会让所有包装都能完美地占据所有空间，同时将脆弱和轻便的包装放在顶部，将沉重和坚固的包装放在底部。如果你再考虑负载平衡、湿度或温度效应，这些效应可能会从一个包装传递到另一个包装，以及偶尔出现的最后一分钟包装，它太重以至于无法放在其他包装的顶部，迫使码头工人卸下一部分货物并重新安排一切，你开始理解当时货物运输是多么复杂的一项工作。
- en: 'Meet Malcolm McLean, who devised in 1956 a shipping system based on wood boxes
    that could be easily transferred from trucks to trains and boats. After only 10
    years, in 1967, this great idea was used so much that the **International Organization
    for Standardization** (**ISO**) defined three standard sizes of “containers.”
    Despite road/train/sea transportation activities being a huge, worldwide business,
    after only a few decades, virtually every operator on earth uses standard-sized
    metal containers that allow optimization of the whole logistics chain and have
    the following benefits:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 见证马尔科姆·麦克莱恩，他在1956年设计了一种基于木箱的运输系统，这种木箱可以轻易地从卡车转移到火车和船上。仅在10年后，即1967年，这个伟大的想法被广泛使用，以至于**国际标准化组织**（**ISO**）定义了三种“容器”的标准尺寸。尽管道路/铁路/海上运输活动是一个庞大、全球性的业务，但在仅仅几十年后，地球上几乎每个运营商都使用标准尺寸的金属容器，这有助于优化整个物流链，并具有以下优点：
- en: '**Ease of loading**: Any expediter can get their hands on a container and load
    it at their own rhythm, then contact a transporter and have them carry the container,
    without any risk of refuse because they cannot take care of a particular shape.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**装载便捷**：任何调度员都可以轻松地拿到一个容器，按照自己的节奏装载它，然后联系运输公司，让他们携带容器，而不用担心被拒绝，因为他们无法处理特定的形状。'
- en: '**Improvement in the handling of goods**: Since the metal boxes have standardized
    sizes and corners with handling holes, there is no use anymore in changing manipulation
    tools that are needed to press the package (and potentially break its content).
    Now, the prehensile tools simply lock the four corners of the container and lift
    them. The speed of handling is also improved as there is no need to handle different
    packages one by one: the machines lift a container – that carries many different
    packages inside – as a single unit.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**货物处理改进**：由于金属箱具有标准尺寸和带有处理孔的角落，因此不再需要更换用于压包（并可能损坏其内容）所需的工具。现在，抓取工具只需锁定容器的四个角落并抬起它们。处理速度也得到了提高，因为不需要逐个处理不同的包装：机器将一个容器（内部携带许多不同的包装）作为一个单一单元抬起。'
- en: '**Optimized storage**: Industrial containers are plain, parallelepiped-shaped
    boxes. Their stacking wastes almost no place but the width of the walls. Today,
    large ships are sized around containers for size optimization.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化存储**：工业容器是简单的平行六面体形状的箱子。它们的堆叠几乎不浪费空间，只是墙壁的宽度。今天，大型船只的尺寸是根据容器进行优化的。'
- en: '**Interchangeable material**: Containers have become such commodities that
    there is almost no question of property. A container can be easily repaired or
    replaced by another. A container basically never travels empty. Some of them have
    traveled several times around the world without their initial buyer seeing them
    again.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可互换材料**：容器已经变得如此商品化，以至于几乎不存在产权问题。容器可以轻易地修复或被另一个容器替换。容器基本上从不空载。其中一些已经环游世界多次，而它们的最初买家再也没有见过它们。'
- en: 'The Docker name and logo clearly state the philosophy behind the technology:
    the term *docker* refers to the job of loading freight on ships, and Docker’s
    logo shows a whale carrying containers on its back. The link is quite obvious
    to the transportation business, and the company wants to become the equivalent
    of industrial containers for application shipping.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的名称和标志清晰地阐述了这项技术的哲学：术语*docker*指的是在船上装载货物的任务，而Docker的标志展示了一只鲸鱼背上的集装箱。这个联系对于运输业来说非常明显，公司希望成为应用运输的工业集装箱的等同物。
- en: 'Just as with industrial shipping containers, Docker containers provide standard-based
    advantages:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如工业运输集装箱一样，Docker容器提供了基于标准的优势：
- en: Whatever is inside the container (Java process, .NET web, Python script, NodeJS
    API, and so on), the external interface is exactly the same, and one can simply
    type `docker run` and have the container up and running.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论容器内部是什么（Java进程、.NET Web、Python脚本、NodeJS API等等），外部接口都是完全相同的，人们只需简单地输入`docker
    run`命令，容器就可以启动并运行。
- en: Once put inside a Docker image, an application can be shipped to any place on
    the planet through registries and it will be executed in the same manner, whichever
    country it is used in.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦应用被放入Docker镜像中，它就可以通过注册表发送到地球上的任何地方，并在任何国家以相同的方式执行。
- en: '**Independence from the underlying architecture**: Docker containers do not
    know or care whether they are operated on a Windows machine, a Linux server, or
    even a Kubernetes cluster. Since they have a standard size, they can fit anywhere.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立于底层架构**：Docker容器不知道或关心它们是在Windows机器、Linux服务器上还是在Kubernetes集群上运行。由于它们具有标准尺寸，它们可以适应任何地方。'
- en: 'With all these nice features, Docker quickly became the de facto standard for
    application deployment. Docker itself could even have become the definitive standard,
    but there were a few shortcomings, and a higher-level, more widespread standard
    appeared a few years later: **Open Container Initiative** (**OCI**) created a
    low-denominator, but undeniable standard that every container technology (Docker,
    but also other technologies, though less known) adheres to.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些优秀特性的加持下，Docker迅速成为了应用部署的事实标准。Docker本身甚至可能成为最终标准，但存在一些不足，几年后出现了一个更高层次、更广泛的标准：**开放容器倡议**（**OCI**）创建了一个低门槛但不可否认的标准，每个容器技术（包括Docker，以及其他虽然不太知名的技术）都必须遵守。
- en: Containers have undoubtedly industrialized and strongly improved the way applications
    are deployed. The rise of microservices is strongly related to container technologies
    since the deployment of numerous small applications would have been extremely
    complicated with the old approach of manually setting up dependencies and resources
    for each application. Some even say microservices architecture appeared only because
    Docker allowed them to exist.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 容器无疑使应用部署工业化并极大地改善了应用部署的方式。微服务的兴起与容器技术密切相关，因为使用旧的方法手动为每个应用设置依赖项和资源，部署大量小型应用将变得极其复杂。有些人甚至说，微服务架构的出现仅仅是因为Docker允许它们存在。
- en: Docker is an example of how a technology that normalizes a given software-related
    function (in this case, application deployment) can have a huge impact and replace,
    through a single standardized approach, loads of proprietary, manual approaches.
    But this is not the only time this happened in the industry...
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是技术如何规范特定软件相关功能（在这种情况下，应用部署）并产生巨大影响的一个例子，通过单一标准化方法，可以取代大量专有和手动方法。但这并不是行业里唯一发生这种情况的时候...
- en: Another example with IAM
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IAM的另一个例子
- en: '**Identity and access management** (**IAM**) is another field of IT where normalization
    has brought a great deal of help and positively changed a difficult situation
    in the last decades. Remember when each and every software application had its
    own user management and passwords? Let alone different, not compatible, ways of
    handling groups and authorization management, and so on. Such a mess... Everyone
    in the field was glad when the first approaches of **single sign-on** (**SSO**)
    appeared, and the **Central Authentication Service** (**CAS**) implemented it
    in readily available software. Identity and authentication providers made the
    field more complex to grasp for beginners, but avoided hundreds of thousands of
    badly-designed IAM systems, replacing them with online, always-accessible identities.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份和访问管理**（**IAM**）是IT领域的另一个领域，标准化在过去几十年中带来了巨大的帮助，并积极改变了困难的情况。还记得每个软件应用都有自己的用户管理和密码吗？更不用说处理组和授权管理方式的不同、不兼容，等等。这样的混乱...当第一个**单点登录**（**SSO**）方法出现时，该领域的每个人都感到很高兴，**中央认证服务**（**CAS**）在可用的软件中实现了它。身份和认证提供商使该领域对初学者来说更加复杂，但避免了成千上万的糟糕设计的IAM系统，用在线、始终可访问的身份取而代之。'
- en: '**Security Assertion Markup Language** (**SAML**) quickly became a standard,
    and tools such as Shibboleth help diffuse the capacity of handling in a correct,
    open source, manner. More recently, **OpenID Connect** (**OIDC**), OAuth 2.0,
    **JSON Web Token** (**JWT**), and other standardized approaches basically killed
    any discussion on the best way to identify, authenticate, and authorize accounts,
    accounting for new features that needed to be taken into account and now covering
    virtually any needs in the field. Keycloak is a production-ready, standard-based,
    open source application that can act as the glue between standards, which means
    we now have all the tools to really deal with IAM in a standard way. The benefits
    are such that companies not using these approaches yet will be obliged in the
    next years to take steps to do so, as security issues are going to make it mandatory
    to stop trying to deal with IAM on proprietary, fragile implementations.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全断言标记语言**（**SAML**）迅速成为标准，像Shibboleth这样的工具帮助以正确、开源的方式扩散处理能力。最近，**OpenID
    Connect**（**OIDC**）、OAuth 2.0、**JSON Web Token**（**JWT**）和其他标准化方法基本上结束了关于最佳识别、认证和授权账户方式的任何讨论，考虑到需要考虑的新功能，现在几乎覆盖了该领域的所有需求。Keycloak是一个生产就绪的、基于标准的开源应用程序，可以作为标准之间的粘合剂，这意味着我们现在有了所有真正以标准方式处理身份和访问管理（IAM）的工具。这些好处如此之大，以至于尚未采用这些方法的公司在接下来的几年里将不得不采取措施这样做，因为安全问题将使停止在专有、脆弱的实现上处理IAM成为强制性的。'
- en: 'There again, the function of IAM has become a commodity owing to standards
    and an industrial approach of separating modules, each of them with its own responsibility:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，由于标准和模块化分离的方法，IAM的功能已经变成了商品：
- en: Identification deals with who the accounts and individual owners of accounts
    are, with all associated metadata. **Lightweight Directory Access Protocol** (**LDAP**)
    and **LDAP Data Interchange Format** (**LDIF**) come to mind as standards for
    this responsibility, but **System for Cross-domain Identity Management** (**SCIM**)
    also can be used, as well as extensions such as SCIM Enterprise Profile to incorporate
    organizational charts, for example. JWTs can be used to carry this data in a normalized
    way.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别涉及账户及其个人所有者的身份，以及所有相关的元数据。**轻量级目录访问协议**（**LDAP**）和**LDAP数据交换格式**（**LDIF**）是这方面的标准，但**跨域身份管理系统**（**SCIM**）也可以使用，以及如SCIM企业配置文件这样的扩展，例如，以纳入组织结构图。JWT可以用来以规范化的方式携带这些数据。
- en: Authentication is about proving the identity of accounts. OIDC, of course, comes
    to mind, but **Fast IDentity Online** (**FIDO**) and **Universal 2nd Factor**
    (**U2F**) are standards related to authentication as well, introducing physical
    devices to improve authentication management.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证是关于证明账户身份的过程。当然，会想到OIDC，但**快速身份在线**（**FIDO**）和**通用第二因素**（**U2F**）也是与认证相关的标准，它们引入了物理设备来改善认证管理。
- en: Authorization is – once identity is established with proof of authentication
    – the way to deal with what the person is allowed to do in the software (or, otherwise,
    remembering that information systems are mostly, but not only, about software).
    **eXtensible Access Control Markup Language** (**XACML**) is an XML-based norm
    for this, but there exist also more recent approaches such as **Open Policy**
    **Agent** (**OPA**).
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权——一旦通过身份验证证明了身份——就是处理软件（或者，记住信息系统主要但不仅仅是关于软件）中允许人们做什么的方式。**可扩展访问控制标记语言**（**XACML**）是这方面的一个基于XML的标准，但还存在更近期的方法，例如**开放策略代理**（**OPA**）。
- en: 'In conclusion, IAM is another example of how information systems have positively
    evolved once the recipe of industrialization has been applied: dividing this complex
    subject into clear-cut, separate responsibilities, and then applying norms and
    standards to each of them.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，IAM是工业化的配方一旦被应用后，信息系统如何积极进化的另一个例子：将这个复杂主题划分为明确的、单独的责任，然后对每个责任应用规范和标准。
- en: The last part of this chapter will make an analogy with other systems that may
    be highly complex and use lots of standards, namely the cities in which lots of
    us live. And I am not talking about smart cities, where software serves urban
    management, but just cities in their organization emerging over time.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一部分将与其他可能高度复杂且使用大量标准的系统进行类比，即我们许多人居住的城市。我说的不是智能城市，在那里软件服务于城市管理，而是随着时间的推移在组织上出现的城市。
- en: The urbanism metaphor of information systems
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息系统的城市主义隐喻
- en: Why did I spend so much time and use so much text talking about technologies
    that became standards and had a great impact on the ease of use and capacity of
    the evolution of information systems inside of which they are used? Well, because
    what has been done for application deployment and IAM can be done for any function
    in a software system. There may not be an undeniable, internationally approved
    standard behind every functionality you need to operate in your system, but deploying
    a locally approved standard will provide the exact same benefits inside the perimeter
    of your own information system.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我要花费这么多时间和使用这么多文字来谈论那些已经成为标准并对信息系统的易用性和进化能力产生了巨大影响的技术呢？好吧，因为为应用部署和身份访问管理（IAM）所做的一切都可以应用于软件系统中的任何功能。在你系统中需要操作的每个功能可能都没有一个不可否认的、国际认可的标准，但部署一个本地认可的标准将在你自己的信息系统范围内提供完全相同的益处。
- en: 'This approach of industrializing an information system by cutting it into zones
    and standardizing the interfaces between them is the best approach to keep it
    in a functional state of health over time. Depending on the context, you may hear
    about “business/IT alignment,” “enterprise architecture,” or “urbanization of
    information systems.” The third expression refers to a metaphor where the information
    system is compared to a modern city:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这种通过将信息系统划分为区域并标准化它们之间接口来工业化的方法是保持其长期功能健康状态的最佳方法。根据上下文，你可能会听到“业务/IT对齐”、“企业架构”或“信息系统的城市化”。第三个表达是指一个隐喻，其中信息系统被比作一个现代城市：
- en: '**The organization follows hierarchical zoning**: Large zones are dedicated
    to housing, commerce, or industry. Inside these zones, one will find neighborhoods
    that define a smaller portion of the zone. Finally, blocks articulate buildings
    together inside a neighborhood. One will find the same hierarchy inside a well-groomed
    information system with large business domain zones (for example, administration),
    inside of which specialized direction will appear (let’s say human resources),
    and finally blocks of functions (in our example, hiring management).'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织遵循层级分区**：大区域专门用于住宅、商业或工业。在这些区域内，人们会发现定义区域较小部分的社区。最后，街区将社区内的建筑物连接在一起。在一个精心打理的信息系统中，人们会发现同样的层级，其中包含大型业务领域区域（例如，行政），在这些区域内会出现专业方向（比如说人力资源），最后是功能块（在我们的例子中，是招聘管理）。'
- en: '**Fluids are standardized for a city to operate correctly**: If firefighters
    had to adapt to different pipe diameters in different parts of the city, there
    would, of course, be a problem. The same goes for electricity, water, waste pipes,
    and so on. That may sound crazy today since all this has been perfectly normalized
    for decades, but at the beginning of the 20th century, a city such as Paris had
    several different electricity companies, some of them operating 110 volts, some
    220 volts, some in **alternating current** (**AC**), some in **constant current**
    (**CC**), some at 50 Hz, some at 60 Hz, and most of them with different plug formats.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流体标准化是为了城市能够正确运行**：如果消防员必须适应城市不同地区的不同管道直径，当然会出现问题。同样的情况也适用于电力、水管、排水管等等。今天这听起来可能有些疯狂，因为所有这些都已经完美标准化了几十年，但在20世纪初，像巴黎这样的城市有多个不同的电力公司，其中一些运营110伏，一些运营220伏，一些使用**交流电**（**AC**），一些使用**直流电**（**CC**），一些频率为50
    Hz，一些频率为60 Hz，而且大多数使用不同的插头格式。'
- en: A large city always evolves, and work in progress in the east of the city is
    meant to have as little impact on the life of inhabitants of the west side. The
    same goes for information systems where change is the only constant, and the impact
    on one piece should be as much as possible without impact on other applications.
    Town architects provide a global vision and direction of evolution but the day-to-day
    changes of the city are organic and can happen because of normalization. Well-established
    information systems can do the same.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个大城市总是在不断发展，城市东部的在建工程旨在对西区的居民生活影响最小。同样的情况也适用于信息系统，其中变化是唯一的不变因素，对某一部分的影响应尽可能小，以免影响其他应用程序。城市建筑师提供全局的视野和演变方向，但城市的日常变化是有机的，并且可能因为标准化而发生。成熟的信息系统也可以做到这一点。
- en: Sadly, it seems that enterprise architecture is not very widespread. This partly
    comes from the fact that this is a complex activity; but it also comes from a
    lack of knowledge and information spread, against which this book proposes to
    humbly provide a remedy. I will try in the next chapters to show that industrial
    and standardization approaches in information systems can bring a lot of value
    and radically reduce stiffness and difficulty to evolve for most information systems
    and that the knowledge and practices to reach this are far from being as complicated,
    as most IT architects think.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，企业架构似乎并不十分普及。这部分的缘由在于这是一个复杂的活动；但也因为缺乏知识和信息的传播，而本书旨在谦逊地提供一种补救措施。我将在接下来的章节中尝试展示，信息系统中的工业化和标准化方法可以带来很多价值，并且可以极大地减少大多数信息系统的僵化和变革难度，而这些知识和实践远不如大多数IT架构师所认为的那样复杂。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explained at length the concepts of industrialization and standardization
    and then explained how they can be applied to the field of software and computer
    science. Lots of information systems nowadays have difficulty evolving, as stated
    in the previous chapter, and industrialization, though a recent field in computer
    science, is a way to strongly improve their efficiency.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细解释了工业化和标准化的概念，然后解释了它们如何应用于软件和计算机科学领域。正如前一章所述，如今许多信息系统都难以进化，尽管工业化是计算机科学中的一个新兴领域，但它是一种显著提高其效率的方法。
- en: In the next chapter, we are going to get a bit more practical, starting from
    the – admittedly theoretical – material in this chapter, and explain methods to
    put the industrial approach in place in information systems. The most known approach
    that will be presented is called “business/IT alignment.” In a few words, it states
    that the structure of IT must reflect the structure of the business processes
    the information system is there to help.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更加注重实践，从本章中——诚然是理论性的——材料开始，并解释如何在信息系统中实施工业方法。将要介绍的最知名的方法被称为“业务/IT对齐”。简而言之，它指出IT的结构必须反映信息系统旨在帮助的业务流程的结构。
