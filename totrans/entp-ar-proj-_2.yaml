- en: Introduction to Unity for AR Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity AR开发入门
- en: This chapter will introduce you to Unity, a real-time 3D development platform
    that has become one of the main tools for multi-platform **Augmented Reality**
    (**AR**) development. Its versatility, extensive documentation, and active forums
    allow for a fast learning curve, and the already created scenes, examples, and
    varied resources of its Asset Store will help you create amazing AR experiences
    in a fast and simple way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍Unity，这是一个实时3D开发平台，已成为多平台**增强现实**（**AR**）开发的主要工具之一。其多功能性、广泛的文档和活跃的论坛使得学习曲线快速，并且其Asset
    Store中已创建的场景、示例和多样化的资源将帮助您以快速简单的方式创建令人惊叹的AR体验。
- en: The main goal of this chapter is that you get comfortable around Unity before
    using it in AR projects. You will learn how to install and use Unity, how the
    user interface is distributed, and the names and purpose of the main components.
    Then, you will create a simple C# script to understand the power of scripting
    to be able to customize 3D scenes. By the end of this chapter, you will have basic
    knowledge under your belt so that you can explore Unity further by integrating
    and working with the AR **Software Development Kits** (**SDKs**) we are going
    to introduce in the following chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是让您在使用AR项目之前对Unity感到舒适。您将学习如何安装和使用Unity，了解用户界面的分布，以及主要组件的名称和用途。然后，您将创建一个简单的C#脚本，以了解脚本编写的强大功能，以便能够自定义3D场景。到本章结束时，您将掌握基本知识，以便可以通过集成和与以下章节中将要介绍的AR**软件开发工具包**（**SDKs**）一起工作来进一步探索Unity。
- en: Unity is one of the most powerful tools in AR development; it's multiplatform
    and most of the AR SDKs have specific packages that are compatible with Unity.
    In this book, [Chapter 5](a35bc701-516c-47dc-abb1-f6494cacf5af.xhtml), *AR for
    Marketing with EasyAR*, [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml),
    *AR for Retail with Vuforia*, and [Chapter 7](4ee2c3b3-2856-4b78-a17c-5575cafafc3b.xhtml),
    *AR for Automation with Vuforia and Epson Glasses*, will be developed with Unity
    and although their example projects are implemented in Android devices, they can
    also be built (except for the Epson glasses, which only run with Android OS) for
    iOS devices with nearly zero code changes. Furthermore, [Chapter 3](2d2b4e6f-1ee8-46ab-9041-24e36d57f949.xhtml),
    *AR for Manufacturing with ARCore*, and [Chapter 8](4c04e2f4-ef78-4061-bf73-41777381d9ad.xhtml),
    *AR for Tourism with ARKit*, can also be implemented within Unity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Unity是AR开发中最强大的工具之一；它是跨平台的，大多数AR SDKs都有与Unity兼容的特定包。在本书中，[第5章](a35bc701-516c-47dc-abb1-f6494cacf5af.xhtml)，*使用EasyAR进行营销的AR*，[第6章](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml)，*使用Vuforia进行零售的AR*，和[第7章](4ee2c3b3-2856-4b78-a17c-5575cafafc3b.xhtml)，*使用Vuforia和Epson眼镜进行自动化的AR*，将使用Unity开发，尽管它们的示例项目是在Android设备上实现的，但它们也可以构建（Epson眼镜除外，它只能在Android操作系统上运行）为iOS设备，几乎不需要代码更改。此外，[第3章](2d2b4e6f-1ee8-46ab-9041-24e36d57f949.xhtml)，*使用ARCore进行制造的AR*，和[第8章](4c04e2f4-ef78-4061-bf73-41777381d9ad.xhtml)，*使用ARKit进行旅游的AR*，也可以在Unity中实现。
- en: Thus, the importance of this introductory chapter, where you will learn how
    to create a Unity 3D project and build it for a specific platform, serving as
    the basis for more complex projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章的重要性在于，您将学习如何创建Unity 3D项目并为特定平台构建它，这将为更复杂的项目奠定基础。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Unity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Unity
- en: Preparing your system for Unity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Unity准备您的系统
- en: Understanding the Unity interface
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Unity界面
- en: Unity main components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity主要组件
- en: Scripting – first example in C#
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本编写 – 第一个C#示例
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: 'Hardware (from [https://docs.unity3d.com/2019.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2019.1/Documentation/Manual/system-requirements.html)):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件（从[https://docs.unity3d.com/2019.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2019.1/Documentation/Manual/system-requirements.html)）：
- en: 'CPU: SSE2 instruction set support'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU：支持SSE2指令集
- en: 'GPU: Graphics card with DX10 (shader model 4.0) capabilities'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU：具有DX10（着色器模型4.0）功能的显卡
- en: 'Operating system:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统：
- en: 'Windows: 7 SP1+, 8, 10, and 64-bit versions only'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: 7 SP1+，8，10，仅限64位版本'
- en: 'macOS: 10.12+'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'macOS: 10.12+'
- en: 'Linux: Fixed at Ubuntu 16.04, 18.04, and CentOS 7'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux: 固定在Ubuntu 16.04，18.04和CentOS 7'
- en: 'Software for Android development:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Android开发软件：
- en: Java Development Kit (1.8.0 in this book)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java开发工具包（本书中为1.8.0）
- en: Unity 3D (2019.1.2f1 in this book)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 3D（本书中为2019.1.2f1）
- en: Android SDK (included in the Unity installation)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android SDK（包含在 Unity 安装中）
- en: Microsoft Visual Studio Community 2017 (included in the Unity installation)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio Community 2017（包含在 Unity 安装中）
- en: The resources and the code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter02](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter02).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源和相关代码文件可以在以下链接找到：[https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter02](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter02)。
- en: Although we will develop our Unity projects for Android devices, you can also
    build them for iOS. In this case, the requirements would be a macOS and Xcode
    9.4 or higher.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将为 Android 设备开发 Unity 项目，但你也可以为 iOS 构建它们。在这种情况下，要求是 macOS 和 Xcode 9.4 或更高版本。
- en: Introducing Unity
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Unity
- en: 'When we think of tools that we can use to develop video games that have had
    a great impact in recent years, one name stands out above all others: Unity. Unity
    is a graphics engine that helps us in developing video games, interactive projects,
    visualizations, and 2D and 3D animations in real-time for different platforms.
    Unity offers a complete visual editor with scripting so that we can create applications
    with a professional finish.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到近年来对游戏开发产生重大影响的工具时，一个名字脱颖而出：Unity。Unity 是一个图形引擎，帮助我们开发视频游戏、交互式项目、可视化以及在不同平台上进行实时
    2D 和 3D 动画。Unity 提供了一个完整的可视化编辑器和脚本，使我们能够创建具有专业完成度的应用程序。
- en: For this purpose, Unity is composed of a package of tools that have been designed
    to facilitate the tasks of designing and programming the different aspects of
    a video game, including graphics, physics, animations, and artificial intelligence.
    Unity is a unique development system that focuses on assets and not on the code
    like other similar 3D modeling applications do. The content of the game is built
    from the editor and the game is programmed using the C# scripting language.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，Unity 由一系列旨在简化设计游戏的不同方面的任务（包括图形、物理、动画和人工智能）的工具包组成。Unity 是一个独特的开发系统，它专注于资产而不是像其他类似的
    3D 建模应用程序那样关注代码。游戏内容是从编辑器构建的，游戏则是使用 C# 脚本语言编写的。
- en: Unity also includes a land editor, which is where you can create a terrain (such
    as a blank sheet) using visual tools, paint, or textures, and also add other elements
    that have been imported from 3D applications, such as Blender, 3ds Max, and Maya.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 还包括一个地形编辑器，你可以在这里使用可视化工具、绘画或纹理创建地形（例如空白纸张），还可以添加从 3D 应用程序（如 Blender、3ds
    Max 和 Maya）导入的其他元素。
- en: 'Unity has had rapid growth in the market as has been adopted by companies and
    professionals due to certain characteristics. These characteristics make Unity
    stand out from other game engines:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 在市场上迅速增长，并因其某些特性而被公司和专业人士采用，这些特性使 Unity 在其他游戏引擎中脱颖而出：
- en: Unity is a multi-platform tool that allows us to publish 2D and 3D content for
    multiple platforms, such as Windows, OS X, GNU/Linux, Flash, Xbox One, PS4, Nintendo
    Switch, Android, and iOS, including web-based games over **Web Graphics Library**
    (**WebGL**) technology (a standard specification for rendering 3D graphics in
    any web browser).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 是一个多平台工具，允许我们为多个平台发布 2D 和 3D 内容，例如 Windows、OS X、GNU/Linux、Flash、Xbox One、PS4、Nintendo
    Switch、Android 和 iOS，包括基于 **Web 图形库**（**WebGL**）技术的网络游戏（这是一个在任何网络浏览器中渲染 3D 图形的标准规范）。
- en: Unity possesses a fully functional free license for learning purposes and for
    independent developers, as well as different scalable pricing plans according
    to the business volume of the developer companies.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 为学习和独立开发者提供了一套完整的免费许可证，以及根据开发者公司业务量不同而具有不同可扩展定价计划的许可证。
- en: Unity is one of the most popular engines for AR and **Virtual Reality** (**VR**)
    development, supporting the industry from an early stage. Around two-thirds of
    all AR and VR apps on the market have been built using Unity.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 是最受欢迎的 AR 和 **虚拟现实**（**VR**）开发引擎之一，从早期就支持行业发展。市场上三分之二以上的 AR 和 VR 应用都是使用
    Unity 开发的。
- en: Unity is an extensible environment, which can be increased by our own or third-party
    plugins, and grows in a scalable way with new elements and functionalities that
    it wasn't originally created to handle.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 是一个可扩展的环境，可以通过我们自己的或第三方插件进行扩展，并且以可扩展的方式随着新元素和功能的发展而增长，这些元素和功能并非它最初创建时设计的。
- en: Unity offers a portal that we can use to buy and sell all kinds of extensions
    and resources, both free and paid, called the Asset Store. This portal is not
    only useful for developers but also offers the business market the ability to
    create specific companies, whose business models are to create tools and content
    so that they can sell their own resources in this online store.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity提供了一个门户，我们可以用它来购买和销售各种免费和付费的扩展和资源，称为Asset Store。这个门户不仅对开发者有用，还让商业市场能够创建特定的公司，这些公司的商业模式是创建工具和内容，以便他们可以在这个在线商店中销售自己的资源。
- en: Unity incorporates additional services, most of which are free, that allow us
    to generate profits in different business models of the video game world. Some
    of these services are, for example, Unity Ads, which allows you to add advertising;
    Unity Analytics, which provides information about the interaction of users; and
    Unity Networking, which provides infrastructure for the development of online
    games.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity集成了额外的服务，其中大部分是免费的，使我们能够在不同的视频游戏世界的商业模式中产生利润。例如，这些服务包括Unity Ads，允许您添加广告；Unity
    Analytics，提供有关用户互动的信息；以及Unity Networking，为在线游戏开发提供基础设施。
- en: Now that we understand what Unity is and its many features, we can start preparing
    our system so that we can install the necessary software.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Unity是什么以及它的众多特性，我们可以开始准备我们的系统，以便安装必要的软件。
- en: Preparing your system for Unity
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Unity准备您的系统
- en: In this book, we are going to use Unity to develop Android mobile applications.
    To create Android apps, we need to have the **Java Development Kit** (**JDK**)
    and Android **Software Development Kit** (**SDK**) installed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用Unity来开发Android移动应用程序。为了创建Android应用程序，我们需要安装**Java开发工具包**（**JDK**）和Android**软件开发工具包**（**SDK**）。
- en: As we mentioned in the *Technical requirements* section, we can easily run the
    same projects for iOS, provided that we run Unity on a macOS computer with Xcode.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*技术要求*部分提到的，如果我们在一个运行macOS计算机上的Xcode上运行Unity，我们可以轻松地运行相同的项目用于iOS。
- en: Since Unity directly provides the Android SDK installation, we will install
    the JDK first and then proceed to install Unity on our computer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Unity直接提供Android SDK安装，我们将首先安装JDK，然后继续在我们的计算机上安装Unity。
- en: Installing Java Development Kit (JDK)
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Java开发工具包（JDK）
- en: 'To install the JDK, follow these steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装JDK，请按照以下步骤操作：
- en: 'Go to Oracle''s download page at [https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html):'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Oracle的下载页面[https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)：
- en: '![](img/2c0b5b86-d70d-4629-93ae-76dac2503b66.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c0b5b86-d70d-4629-93ae-76dac2503b66.png)'
- en: Ensure that you accept the Oracle Binary Code License Agreement for Java SE.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您接受Java SE的二进制代码许可协议。
- en: Select the latest Java SE Development Kit (in our case, this is the Java SE
    Development Kit 8u201).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最新的Java SE开发工具包（在我们的例子中，这是Java SE开发工具包8u201）。
- en: Once downloaded, run the installation file and let it install JDK and JRE into
    their default folders.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载后，运行安装文件，并让它将JDK和JRE安装到默认文件夹中。
- en: Starting with Unity 2019.2, the Unity installation allows you to install OpenJDK
    inside the Android Build Support options (see the *Installing Unity* section).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unity 2019.2版本开始，Unity安装允许您在Android构建支持选项中安装OpenJDK（请参阅*安装Unity*部分）。
- en: Now that you have installed the JDK, let's install Unity.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了JDK，让我们安装Unity。
- en: Installing Unity
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Unity
- en: We are going to install Unity using the Unity Hub, a tool that allows us to
    install and manage different versions of Unity on our computer. You can download
    the Unity Hub from [https://unity3d.com/get-unity/download](https://unity3d.com/get-unity/download).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Unity Hub安装Unity，这是一个允许我们在计算机上安装和管理不同版本的Unity的工具。您可以从[https://unity3d.com/get-unity/download](https://unity3d.com/get-unity/download)下载Unity
    Hub。
- en: 'Follow these steps to install Unity:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装Unity：
- en: Download and install the Unity Hub.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装Unity Hub。
- en: 'Run the Unity Hub. The first time you do this, it will notify you that the
    license is missing, as shown in the following screenshot. Click on MANAGE LICENSE:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Unity Hub。第一次运行时，它会通知您缺少许可证，如下面的截图所示。点击**管理许可证**：
- en: '![](img/38999e46-c876-4c95-8cc5-ccfdce0dcd6e.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38999e46-c876-4c95-8cc5-ccfdce0dcd6e.png)'
- en: No valid license message
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无有效许可证信息
- en: 'In the License window, another message will appear, asking you to log in in
    order to add a license. Click on LOGIN:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在许可窗口中，将出现另一条消息，要求你登录以添加许可。点击登录：
- en: '![](img/2b7fe249-3f43-4c01-82b5-a67705c331b9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2b7fe249-3f43-4c01-82b5-a67705c331b9.png)'
- en: LOGIN message in the License window
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 许可窗口中的登录消息
- en: 'A pop-up window will appear, asking for your Email and Password. If you don''t
    have an account, you can create one by clicking on create one. You can also Sign
    in with google or Sign in with facebook:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会出现一个弹出窗口，要求你输入电子邮件和密码。如果你没有账户，你可以通过点击创建一个账户来创建一个账户。你也可以使用谷歌或Facebook登录：
- en: '![](img/529e6efd-efbf-4785-ad5f-913d535fb3e7.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/529e6efd-efbf-4785-ad5f-913d535fb3e7.png)'
- en: Signing into Unity
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 登录Unity
- en: 'Now, select one of the license options and click DONE. (You can use Unity for
    free with the Personal license if you meet the requirements. If you don''t, you
    have to purchase Unity Plus or Pro on their web page ([https://store.unity.com](https://store.unity.com)):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择一个许可选项，然后点击完成。(如果你符合要求，可以使用个人许可免费使用Unity。如果不满足条件，你必须在他们的网页上购买Unity Plus或Pro
    ([https://store.unity.com](https://store.unity.com))。)
- en: '![](img/4d4fc4ce-c83b-48f0-afec-ac75b66b88fc.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d4fc4ce-c83b-48f0-afec-ac75b66b88fc.png)'
- en: Selecting a license for the product
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 选择产品的许可
- en: 'Now, go back, click on the Installs tab, and then on ADD to add a new Unity
    installation:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回，点击安装选项卡，然后点击添加以添加新的Unity安装：
- en: '![](img/05740b8d-08c1-4d17-9eeb-f139fb051600.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/05740b8d-08c1-4d17-9eeb-f139fb051600.png)'
- en: Adding a new Unity version
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的Unity版本
- en: 'In the pop-up window that appears, select the Unity Version you want to install
    and the modules to add. In our case, we''re using the 2019.1.2f1 version and we
    will install Microsoft Visual Studio Community 2017 to code and Android Build
    Support and Android SDK & NDK Tools to develop in Android, as shown in the following
    screenshot:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的弹出窗口中，选择你想要安装的Unity版本和要添加的模块。在我们的例子中，我们使用的是2019.1.2f1版本，我们将安装Microsoft Visual
    Studio Community 2017进行编码和Android构建支持，以及Android SDK & NDK Tools进行Android开发，如下面的截图所示：
- en: '![](img/804e5691-6344-424b-b310-0f0929ca8004.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/804e5691-6344-424b-b310-0f0929ca8004.png)'
- en: Choosing the Unity version and modules
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Unity版本和模块
- en: Unity Hub always shows the latest compilation of each version. If you want to
    install a specific version, such as the one we are using here, you can find it
    and install it through the Hub from the Unity Archive: [https://unity3d.com/es/get-unity/download/archive](https://unity3d.com/es/get-unity/download/archive).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Hub总是显示每个版本的最新编译版本。如果你想安装特定版本，例如我们在这里使用的版本，你可以在Unity存档中找到它并通过Hub安装：[https://unity3d.com/es/get-unity/download/archive](https://unity3d.com/es/get-unity/download/archive)。
- en: Starting with Unity 2019.2, a new option appears under Android Build Support
    so that you can directly install OpenJDK.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unity 2019.2版本开始，在Android构建支持下出现了一个新选项，可以直接安装OpenJDK。
- en: 'If you plan to develop with Vuforia, which is what we will do in [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml),
    *AR for Retail with Vuforia*, and [Chapter 7](4ee2c3b3-2856-4b78-a17c-5575cafafc3b.xhtml),
    *AR for Automation with Vuforia and Epson Glasses*, check the Vuforia Augmented
    Reality Support option shown in the following screenshot. Then, click NEXT and
    finish the installation:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你计划使用Vuforia进行开发，正如我们在第6章[AR for Retail with Vuforia](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml)和第7章[AR
    for Automation with Vuforia and Epson Glasses](4ee2c3b3-2856-4b78-a17c-5575cafafc3b.xhtml)中将要做的，请检查以下截图中的Vuforia增强现实支持选项。然后，点击下一步并完成安装：
- en: '![](img/016351da-2e4f-4e6d-8c47-02ad079a30f0.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/016351da-2e4f-4e6d-8c47-02ad079a30f0.png)'
- en: Selecting Vuforia Augmented Reality Support
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Vuforia增强现实支持
- en: Most recent versions of Unity might not always support Vuforia. If you don't
    see Vuforia on the list, don't panic! It is because the latest version of Unity
    doesn't support it yet and an older version should be installed that supports
    Vuforia
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的最新版本可能并不总是支持Vuforia。如果你在列表中没有看到Vuforia，不要慌张！这是因为最新的Unity版本还没有支持它，你应该安装一个支持Vuforia的旧版本。
- en: 'When you''ve finished the installation, you will be sent back to the Installs window,
    where you will see the new version and the installed modules, as shown in the
    following screenshot:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，你将被送回到安装窗口，在那里你会看到新版本和已安装的模块，如下面的截图所示：
- en: '![](img/1795e381-3742-4536-9c47-c9be6a3779df.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1795e381-3742-4536-9c47-c9be6a3779df.png)'
- en: Installs window with the new Unity version
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 新Unity版本的安装窗口
- en: 'If during the installation process you forgot to add a module or you want to
    add it at a later date, you only have to click on the three dots button in the
    top right corner and select Add Modules, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在安装过程中你忘记添加一个模块或者你想稍后添加，你只需点击右上角的三点按钮，然后选择添加模块，如下所示：
- en: '![](img/17152331-a8b5-4f1a-bccd-8387531d06e2.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17152331-a8b5-4f1a-bccd-8387531d06e2.png)'
- en: Adding a new module after finishing the installation
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后添加新模块
- en: 'Now, click on the Projects tab. Here, we will create a new project by pressing
    on the NEW button, as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“项目”标签页。在这里，我们将通过点击NEW按钮来创建一个新的项目，如下所示：
- en: '![](img/4ac2cd94-5b5f-4b96-8087-df4b029b3a06.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4ac2cd94-5b5f-4b96-8087-df4b029b3a06.png)'
- en: Creating a new project
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目
- en: 'We will create a 3D project (already selected). In the Settings panel, give
    the project a Name and set a Location, as shown in the following screenshot. Then,
    click on CREATE:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个3D项目（已经选中）。在设置面板中，给项目命名并设置位置，如下面的截图所示。然后，点击CREATE：
- en: '![](img/a19d7f32-8410-4ada-99f8-ff6ba7684f1d.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a19d7f32-8410-4ada-99f8-ff6ba7684f1d.png)'
- en: Setting up the new Unity project
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 设置新的Unity项目
- en: 'Unity will now open the new project and you can start working with it. If you
    close the Unity window, you can reopen the project by selecting it from Unity
    Hub''s Projects window, as shown in the following screenshot:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Unity将打开新项目，你可以开始使用它。如果你关闭Unity窗口，你可以通过从Unity Hub的项目窗口中选择它来重新打开项目，如下面的截图所示：
- en: '![](img/896665ec-471a-4323-ba47-ff2a87680448.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/896665ec-471a-4323-ba47-ff2a87680448.png)'
- en: The new project appears in the Projects window
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 新项目出现在项目窗口中
- en: And that's it. Now, you have installed Unity on your computer and your first
    project is open so that you can start working with it. In the next section, we
    will provide a tour of the Unity interface in order to see the possibilities Unity
    offers and how to use each tool.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。现在，你已经将Unity安装到你的电脑上，你的第一个项目已经打开，你可以开始使用它了。在下一节中，我们将提供Unity界面的导游，以便了解Unity提供的可能性以及如何使用每个工具。
- en: Understanding the Unity interface
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Unity界面
- en: 'The first time you open the Unity editor, you will see a layout with different
    bars and windows, similar to what can be seen in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次打开Unity编辑器时，你会看到一个带有不同栏和窗口的布局，类似于以下截图所示：
- en: '![](img/861f49c8-a515-45ea-969e-b45f38304c1a.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/861f49c8-a515-45ea-969e-b45f38304c1a.png)'
- en: The initial Unity layout
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 初始Unity布局
- en: 'At first glance, the Unity configuration slightly reminds us of 3D modeling
    tools, with the 3D scene in the middle, although it has more panels on the sides
    than modeling tools does. Although it can look a bit daunting to understand everything
    if you are not familiarized with 3D tools, the Unity interface is quite straightforward
    and has remained very much the same throughout the Unity versions. The main components
    that can be seen in the preceding screenshot are as follows (from top left to
    bottom right):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，Unity的配置略带3D建模工具的感觉，中间是3D场景，尽管它比建模工具多了几个面板。如果你不熟悉3D工具，可能会觉得理解所有内容有些令人畏惧，但Unity的界面相当直观，并且在Unity各个版本中保持得很一致。前一个截图中所看到的主要组件如下（从左上角到右下角）：
- en: '**The Toolbar**: Here, we have the main buttons so that we can manipulate objects
    in the Scene view to test the scene.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具栏**：在这里，我们有主要的按钮，以便我们可以在场景视图中操作对象以测试场景。'
- en: '**The Hierarchy window**: The Hierarchy window shows the elements in the Scene
    view ordered hierarchically.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层次结构窗口**：层次结构窗口按层次顺序显示场景视图中的元素。'
- en: '**The Scene view, Game view, and Asset Store window**: These three tabs have
    different purposes. The Scene view shows all the elements in the 3D scene. The
    Game view shows, from the camera perspective, how the scene will look when built.
    The Asset Store window can be used to download packages and assets from the Unity
    Store so that we can include them in our project.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景视图、游戏视图和资产商店窗口**：这三个标签页有不同的用途。场景视图显示3D场景中的所有元素。游戏视图从摄像机的视角显示场景构建后的样子。资产商店窗口可以用来从Unity商店下载包和资产，以便我们可以将它们包含在我们的项目中。'
- en: '**The Inspector window**: When an element is selected in the Hierarchy window
    or the Scene view, its features and components will appear in this window.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查器窗口**：当在层次结构窗口或场景视图中选择一个元素时，其特性和组件将显示在这个窗口中。'
- en: '**The Project window and Console window**: The former shows all the directories
    and files of the project that we can (or not) use in the scene, while the latter
    shows the log messages.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目窗口和控制台窗口**：前者显示项目中所有目录和文件，我们可以（或不能）在场景中使用，而后者显示日志消息。'
- en: Now, we're going to explore each component in detail and learn how to change
    this layout to our needs and tastes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将详细探讨每个组件，并学习如何根据我们的需求和喜好更改此布局。
- en: The Toolbar
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具栏
- en: 'This Toolbar is fixed on the screen and allows us to access Unity''s main features.
    It''s divided into three sections: the tools to manipulate objects on the scene,
    the Game view controls, and a group of buttons to access Unity services and manage
    the layers and UI layout:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具栏固定在屏幕上，使我们能够访问Unity的主要功能。它分为三个部分：用于操作场景中对象的工具、游戏视图控件以及一组按钮，用于访问Unity服务和管理图层和UI布局：
- en: 'On the left-hand side, we can see the main tools that we can use to manipulate
    the Scene view and the objects on it. These are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们可以看到我们可以用来操作场景视图及其上对象的工具。以下是这些工具：
- en: Hand tool
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动工具
- en: Move tool
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动工具
- en: Rotate tool
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转工具
- en: Scale tool
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放工具
- en: Rect tool
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩形工具
- en: Combined tool
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合工具
- en: Center/Pivot button
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中心/旋转点按钮
- en: 'Local/Global button:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地/全局按钮：
- en: '![](img/003cf082-0bae-4a75-ab1d-d516b35cb702.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/003cf082-0bae-4a75-ab1d-d516b35cb702.png)'
- en: Buttons on the left of the toolbar
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏左侧的按钮
- en: 'Let''s take a look at these tools, one by one:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看这些工具：
- en: '**Hand tool**: This is the navigation tool for the scene. It has three uses:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动工具**：这是场景的导航工具。它有三个用途：'
- en: '**Move**: Left-click + Drag to move through the scene without altering any
    of its objects. A hand icon appears in the Toolbar and Scene view. ![](img/04bbc9fc-8c03-4e57-a647-6926062082bc.png)'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动**：左键点击 + 拖动以在场景中移动而不会更改其任何对象。工具栏和场景视图中出现一个手形图标。![图片](img/04bbc9fc-8c03-4e57-a647-6926062082bc.png)'
- en: '**Orbit**: *Alt* + Left-click + Drag to orbit in the scene. An eye icon appears
    in the Toolbar and Scene view. ![](img/09480e16-40c5-446c-9267-8992227b2343.png)'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环绕**：*Alt* + 左键点击 + 拖动以在场景中环绕。工具栏和场景视图中出现一个眼睛图标。![图片](img/09480e16-40c5-446c-9267-8992227b2343.png)'
- en: '**Zoom**: *Alt* + Right-click + Drag to zoom in and out of the scene. A magnifying
    glass icon appears in the Toolbar and Scene view. ![](img/263a77fc-52ef-4dff-9899-6fdc257e944b.png)'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：*Alt* + 右键点击 + 拖动以在场景中缩放和缩小。工具栏和场景视图中出现一个放大镜图标。![图片](img/263a77fc-52ef-4dff-9899-6fdc257e944b.png)'
- en: You can use move at any time by pressing the wheel of the mouse and dragging.
    You can also access zoom in and out, using the mouse scroll wheel.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过按鼠标滚轮并拖动来随时使用移动功能。您还可以使用鼠标滚轮进行缩放和缩小。
- en: '**Move tool**: When this button is selected, you can move the objects on the
    scene into the three axes by dragging the corresponding arrow. You can also drag
    the small squares that appear on the intersection of the arrows to move the object
    into a plane (two axes) instead of a single axis:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动工具**：当选择此按钮时，您可以通过拖动相应的箭头将场景中的对象移动到三个轴上。您还可以拖动出现在箭头交点上的小正方形，将对象移动到平面（两个轴）而不是单个轴上：'
- en: '![](img/f7ad758b-282f-447d-92a6-37e2b06f3ae6.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f7ad758b-282f-447d-92a6-37e2b06f3ae6.png)'
- en: Moving a 3D element
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 移动3D元素
- en: '**Rotate tool**: When this button is selected, you can rotate the objects on
    the scene in the three axes by dragging the corresponding circle:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转工具**：当选择此按钮时，您可以通过拖动相应的圆圈在三个轴上旋转场景中的对象：'
- en: '![](img/d967dfeb-1ddf-470d-8db8-9ab9f4917f3d.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d967dfeb-1ddf-470d-8db8-9ab9f4917f3d.png)'
- en: Rotating a 3D element
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转3D元素
- en: '**Scale tool**: When this button is selected, you can scale the objects on
    the scene in the three axes by dragging the corresponding arrow (ending on a small
    cube). You can also drag the central cube to scale the object uniformly on the
    three axes:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放工具**：当选择此按钮时，您可以通过拖动相应的箭头（以小立方体结束）在三个轴上缩放场景中的对象。您还可以拖动中心立方体以在三个轴上均匀缩放对象：'
- en: '![](img/37445d6f-a285-4edf-8410-1973145fb90f.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/37445d6f-a285-4edf-8410-1973145fb90f.png)'
- en: Scaling a 3D element
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放3D元素
- en: '**Rect tool**: The tools we have seen so far are thought to manipulate 3D models.
    The rect tool, however, is specifically used for the **User Interface** (**UI**)
    elements on the scene and it works in two dimensions. In the following screenshots,
    we are manipulating a button:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**矩形工具**：我们之前看到的工具被认为是用来操作3D模型的。然而，矩形工具专门用于场景中的**用户界面（UI**）元素，并且它在二维空间中工作。在以下屏幕截图中，我们正在操作一个按钮：'
- en: 'You can *move* a UI element by dragging it:'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过拖动来移动UI元素：
- en: '![](img/bb2b80cd-6b3d-4096-9ea7-09a683413f48.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb2b80cd-6b3d-4096-9ea7-09a683413f48.png)'
- en: Moving a UI element
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 移动UI元素
- en: 'To rotate an element, hover over the corner until the rotation icon appears.
    Then, click and drag:'
  id: totrans-139
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要旋转一个元素，将鼠标悬停在角落直到出现旋转图标。然后，点击并拖动：
- en: '![](img/682b7ef5-d76b-4dcb-a9ba-d09ae27b57fc.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/682b7ef5-d76b-4dcb-a9ba-d09ae27b57fc.png)'
- en: Rotating a UI element
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转UI元素
- en: 'You can scale the element by dragging it from the corners:'
  id: totrans-142
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过从角落拖动来缩放元素：
- en: '![](img/ef910298-671b-4204-ba52-1693b78692b8.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef910298-671b-4204-ba52-1693b78692b8.png)'
- en: Scaling a UI element
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放UI元素
- en: '**Combined Move, Rotate, and Scale tool**: This button combines the Move, Rotate, and
    Scale options:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组合移动、旋转和缩放工具**：此按钮组合了移动、旋转和缩放选项：'
- en: '![](img/6a69bd42-6ffb-4a68-b509-ed59d1ccb653.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a69bd42-6ffb-4a68-b509-ed59d1ccb653.png)'
- en: All the guides appearing together to manipulate the object
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所有引导线一起出现以操纵对象
- en: '**Center**/**Pivot button**: When Center is selected, the translation, rotation,
    and scale operations will be performed from the object''s center point. In the
    following screenshot, the camera and directional light have been selected and
    the guide appears in the center point of the resulting group. In this case, the
    camera and light *will rotate around that central point*:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中心**/**轴点按钮**：当选择中心时，平移、旋转和缩放操作将从对象的中心点执行。在以下截图中，相机和方向光被选中，引导线出现在结果组的中心点。在这种情况下，相机和灯光*将围绕该中心点旋转*：'
- en: '![](img/eaab95bf-7fe9-45ce-a2e6-b402c3e551b6.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaab95bf-7fe9-45ce-a2e6-b402c3e551b6.png)'
- en: Center option active
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 中心选项已激活
- en: 'When Pivot is selected, operations will be performed from each pivot point.
    In this case, the camera and light *will rotate around their respective pivot
    points*:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择轴点时，操作将从每个轴点执行。在这种情况下，相机和灯光*将围绕各自的轴点旋转*：
- en: '![](img/2d6f798a-0705-4f1d-818b-b8235fec4481.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d6f798a-0705-4f1d-818b-b8235fec4481.png)'
- en: Pivot point option active
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 轴点选项已激活
- en: '**Local**/**Global button**: When Local is selected, the translation, rotation,
    and scale operations will be performed relative to the selected object''s origin.
    In the following screenshot the light is rotated, and its coordinate system also
    appears rotated:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地**/**全局按钮**：当选择本地时，平移、旋转和缩放操作将相对于所选对象的起点执行。在以下截图中，灯光被旋转，其坐标系也相应旋转：'
- en: '![](img/6c32b3e7-e18a-4dc1-af9b-edae04f4537c.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c32b3e7-e18a-4dc1-af9b-edae04f4537c.png)'
- en: Local option selected
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本地选项已选择
- en: 'When Global is selected, the operations will be performed relative to the world''s
    origin:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择全局时，操作将相对于世界原点执行：
- en: '![](img/25f29a57-118c-4e71-8010-51a308df3348.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25f29a57-118c-4e71-8010-51a308df3348.png)'
- en: Global option selected
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 全局选项已选择
- en: 'On the center of the Toolbar, we have the play, pause, and step buttons, which
    we can use to control the Game view:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具栏的中心，我们有播放、暂停和步进按钮，我们可以使用它们来控制游戏视图：
- en: '![](img/3e017b64-7603-4ff4-8ea8-c112f3fe726c.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e017b64-7603-4ff4-8ea8-c112f3fe726c.png)'
- en: Buttons on the center
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 中心位置的按钮
- en: 'On the right-hand side, we have some buttons that we can use to access Unity
    collaborate services, Unity cloud services (the cloud icon), our Unity Account,
    the Layers visibility menu, and the Layout menu. We will be using the Layout menu
    later in this section to create a custom layout for our projects:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，我们有几个按钮，我们可以使用它们来访问Unity协作服务、Unity云服务（云图标）、我们的Unity账户、图层可见性菜单和布局菜单。我们将在本节后面使用布局菜单来为我们的项目创建自定义布局：
- en: '![](img/898876aa-bde3-4081-a956-4a34caa7b5f8.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/898876aa-bde3-4081-a956-4a34caa7b5f8.png)'
- en: Buttons on the right-hand side
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的按钮
- en: Now that we have seen the functionality of the Toolbar, let's look at the Scene
    view.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了工具栏的功能，让我们看看场景视图。
- en: The Scene view
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景视图
- en: The Scene view is the window where you will interact with the current scene
    and the 3D world you are creating on it. Here, you will have all the content that
    forms the scene and you will be able to manipulate them visually using the commands
    on the Toolbar. With this view, we can navigate through the whole scene and see
    it from all its angles so that we can place the 3D objects and make sure they
    are in the correct position. In this view, we can also manipulate the UI elements.
    The main element we want to talk about in this window is the Gizmo, which is located
    on the top right-hand side of the window.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 场景视图是您将与当前场景以及您在上面创建的3D世界交互的窗口。在这里，您将拥有构成场景的所有内容，您将能够使用工具栏上的命令直观地操纵它们。使用此视图，我们可以导航整个场景，从所有角度查看它，以便我们可以放置3D对象并确保它们处于正确的位置。在此视图中，我们还可以操纵UI元素。在这个窗口中，我们想要讨论的主要元素是Gizmo，它位于窗口的右上角。
- en: '**T****he Gizmo**: You can use the Gizmo to quickly change the view (Top, Bottom, Right, Left, Front, Back)
    and switch between Perspective and Isometric (orthographic) modes. When changing
    the view, the *x*, *y*, and *z* arrows in the Gizmo will be pointing in the direction
    of each axis:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gizmo**：您可以使用Gizmo快速更改视图（顶部、底部、右侧、左侧、前视图、后视图）并在透视和等距（正交）模式之间切换。在更改视图时，Gizmo中的*x*、*y*和*z*箭头将指向每个轴的方向：'
- en: '![](img/0f4cb8dc-8d77-486c-8262-ec1c7894f848.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0f4cb8dc-8d77-486c-8262-ec1c7894f848.png)'
- en: Gizmo with different arrows on the Front, Top, and Right views
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 前视图、顶视图和右视图上具有不同箭头的 Gizmo
- en: 'The little icon on the left-hand side of the view name shows whether it''s
    a Perspective or Isometric (orthographic) view, as shown in the following screenshot.
    You can switch between them by clicking on the little icon:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 视图名称左侧的小图标显示它是一个透视或等距（正交）视图，如下面的屏幕截图所示。您可以通过单击小图标在它们之间切换：
- en: '![](img/9fbe05e7-32e2-4cd3-8a97-0b3f445af330.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9fbe05e7-32e2-4cd3-8a97-0b3f445af330.png)'
- en: Perspective and Isometric (Orthographic) views allow us to adjust the objects
    in the scene
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 透视和等距（正交）视图允许我们调整场景中的对象
- en: Now, let's look at the Hierarchy window and how it works.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看层级窗口以及它是如何工作的。
- en: The Hierarchy window
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层级窗口
- en: This window is a hierarchical view of the elements in the Scene view, which
    are represented by their names. On the top, we will always have the scene, and
    all the objects we add to the scene will hang from it. In the following screenshot,
    we have different elements, with some of them (Cube, Canvas) containing more elements.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口是场景视图中元素的分层视图，这些元素通过它们的名称来表示。在顶部，我们始终会有场景，并且我们添加到场景中的所有对象都将悬挂在它上面。在下面的屏幕截图中，我们有不同的元素，其中一些元素（立方体、画布）包含更多的元素。
- en: 'The hierarchical view allows us to easily find the elements and the relationships
    between them (parenting) that affect the way they behave. For example, if we move
    the Cube element, its child object, ChildOfCube, will move along with it. However,
    if we only want to move the ChildOfCube element, we would select it in the Hierarchy
    window and move it, without affecting its parent Cube. In terms of the *local/global* positioning
    we explained in the previous section, the children''s local position, rotation,
    and scale will be relative to those of the father:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 分层视图使我们能够轻松找到元素及其之间的关系（父子关系），这些关系会影响它们的行为方式。例如，如果我们移动立方体元素，它的子对象ChildOfCube将随之一同移动。然而，如果我们只想移动ChildOfCube元素，我们会在层级窗口中选择它并移动它，而不会影响其父对象立方体。在上一节中我们解释的*局部/全局*定位方面，子对象的局部位置、旋转和缩放将相对于父对象：
- en: '![](img/627652ab-0521-45f1-a404-a432533525cb.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/627652ab-0521-45f1-a404-a432533525cb.png)'
- en: The Cube object being selected in the Hierarchy window and Scene view
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在层级窗口和场景视图中选中的立方体对象
- en: We will also use this window to quickly add new elements by right-clicking on
    it and selecting the one we want to add to the scene.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用此窗口通过右键单击并选择我们想要添加到场景中的元素来快速添加新元素。
- en: On the other hand, objects in the scene can be selected by clicking on them
    in the Scene view or in the Hierarchy window. The latter is very useful when an
    object has multiple children since we can ensure that we are selecting the correct
    element. In the Scene view, they could be overlapping.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，可以通过在场景视图中或层级窗口中单击对象来选择场景中的对象。当对象有多个子对象时，后者非常有用，因为我们可以确保我们选择了正确的元素。在场景视图中，它们可能会重叠。
- en: 'A quick tip: double-clicking on the name of an object in the Hierarchy window
    makes the scene zoom into that object.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小技巧：在层级窗口中双击对象的名称可以使场景缩放到该对象。
- en: The Scene view and Hierarchy window are the two windows we can use to manipulate
    the elements in a scene, that is, the elements that we will build into our device.
    Now, we are going to learn how the Inspector window works when one of the elements
    in the scene is selected.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 场景视图和层级窗口是我们可以使用来操作场景中元素的两个窗口，即我们将构建到我们的设备中的元素。现在，我们将学习当场景中的一个元素被选中时，检查器窗口是如何工作的。
- en: The Inspector window
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查器窗口
- en: 'This window displays the properties and components of the currently selected
    object. From here, you will be able to edit, delete, and add new components to
    the object. Since the different objects in the scene will have different properties,
    the Inspector window will change accordingly to show the corresponding information
    in each moment. This window can be seen in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口显示当前选中对象的属性和组件。从这里，你可以编辑、删除和向对象添加新组件。由于场景中的不同对象将具有不同的属性，检查器窗口将相应地改变，以在每个时刻显示对应的信息。此窗口可以在以下屏幕截图中看到：
- en: '![](img/7ce79143-5eca-4f7f-ae2f-0e7ffd5a95d3.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ce79143-5eca-4f7f-ae2f-0e7ffd5a95d3.png)'
- en: Two different Inspector windows for the Main Camera and a Cube
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 主摄像机和立方体的两个不同的检查器窗口
- en: As shown in the preceding screenshot, every element in the scene will have a
    Transform component so that it can move, rotate, and scale that element in the
    scene. However, apart from this, the Main Camera and Cube elements of the image
    don't have more components in common. In the case of the camera, it has, as expected,
    a Camera component, while the Cube has a mesh, a renderer (to visualize the object),
    and a collider that marks the physical boundaries of such an object.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，场景中的每个元素都将有一个变换组件，以便它可以移动、旋转和缩放场景中的该元素。然而，除了这个之外，图像中的主摄像机和立方体元素没有更多共同的组件。对于摄像机来说，它有一个预期的摄像机组件，而立方体有一个网格、一个渲染器（用于可视化对象）和一个标记该对象物理边界的碰撞器。
- en: 'The components in the Inspector window can be maximized and minimized so that
    we can organize the view. This way, if we have many components in a GameObject,
    we only see the ones that we require at each moment. For that, we can use the
    small arrow next to each component, as shown in the following screenshot, where
    the same Main Camera has had its components collapsed:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器窗口中的组件可以被最大化或最小化，这样我们就可以组织视图。这样，如果我们有一个GameObject中有许多组件，我们只看到在每一时刻所需的那些。为此，我们可以使用每个组件旁边的小箭头，如以下屏幕截图所示，其中相同的Main
    Camera已将其组件折叠：
- en: '![](img/bee35c56-559e-40e8-92fb-e8d3f2a7c2d2.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bee35c56-559e-40e8-92fb-e8d3f2a7c2d2.png)'
- en: The Main Camera with its components collapsed
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 主摄像机及其组件已折叠
- en: Now, let's look at how the Project window works.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看项目窗口是如何工作的。
- en: The Project window
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目窗口
- en: 'This window shows all the assets that are available for your project. When
    you import a new asset into your project, it will appear on this window and, from
    here, you will be able to drag it into your scenes. It''s a hierarchical view
    with files organized in folders:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口显示了项目中所有可用的资产。当你将新资产导入到项目中时，它将出现在此窗口上，从这里，你可以将其拖动到你的场景中。这是一个层次视图，文件按文件夹组织：
- en: '![](img/5187e2f4-64ce-4ba5-b9eb-1a45def43d17.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5187e2f4-64ce-4ba5-b9eb-1a45def43d17.png)'
- en: Project window displaying the main folders in the Assets folder
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 显示资产文件夹中主要文件夹的项目窗口
- en: '**Important!** When building an application, not every asset that appears in
    the Project window will be built into it. Except for some special folders, which
    can be found here: [https://docs.unity3d.com/Manual/SpecialFolders.html](https://docs.unity3d.com/Manual/SpecialFolders.html). Assets
    are only included in the final bundle if they are connected to the scene (directly
    appearing on it, called from scripts, and so on).'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要！** 在构建应用程序时，并非项目窗口中出现的每个资产都会被构建进去。除了一些特殊文件夹，可以在以下位置找到：[https://docs.unity3d.com/Manual/SpecialFolders.html](https://docs.unity3d.com/Manual/SpecialFolders.html)。只有当资产与场景连接时（直接出现在场景上、通过脚本调用等），它们才会被包含在最终的包中。'
- en: Now, we will take a look at the Game view, which, as we mentioned at the beginning
    of this section, is located in a tab next to the Scene view.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看游戏视图，正如我们在本节开头提到的，它位于场景视图旁边的标签中。
- en: The Game view
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏视图
- en: 'This window shows how the scene has been rendered by the camera(s) in your
    world. You can use the play, pause, and step buttons from the Toolbar to play
    your scene and see how it will look when published:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口显示了场景是如何由你世界中的摄像机（们）渲染的。你可以使用工具栏中的播放、暂停和步进按钮来播放你的场景，并查看发布后的外观：
- en: '![](img/df18ffee-8f46-4628-97d1-b1a10968b72a.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df18ffee-8f46-4628-97d1-b1a10968b72a.png)'
- en: The Button and Cube objects from the Main Camera object's perspective
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 从主摄像机对象的视角看，按钮和立方体对象
- en: '**Important!** Any change you make in play mode is temporary and *will disappear*
    once you quit this mode by clicking on the play button again. This is useful when
    you want to try different approaches (for example, object rotation or color) before
    selecting the one that suits you, but make sure you don''t lose important work
    because you forgot to switch play mode off!'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要！**在播放模式下所做的任何更改都是临时的，并且*将在您再次点击播放按钮退出此模式时消失*。当您想尝试不同的方法（例如，对象旋转或颜色）以选择适合您的方法时，这很有用，但请确保您没有丢失重要的工作，因为您忘记关闭播放模式了！'
- en: The tab next to this window is the Asset Store window. Let's take a look.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口旁边的标签是资产商店窗口。让我们看看。
- en: The Asset Store window
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产商店窗口
- en: 'This window connects to the Unity Asset Store, which is where developers and
    designers upload their assets. You can download and import any asset from the
    Asset Store for your project from this window:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口连接到Unity资产商店，这是开发者和设计师上传他们的资产的地方。您可以从此窗口下载并导入资产商店中的任何资产到您的项目中：
- en: '![](img/e3362a62-1296-4456-a567-4d743168d462.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e3362a62-1296-4456-a567-4d743168d462.png)'
- en: Asset Store window from within Unity
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的资产商店窗口
- en: The Asset Store offers free and paid content, such as 2D and 3D models and scenes,
    audio files, templates, complete projects, and much more, all of which you can
    download and import directly into your projects. All of these assets make the
    process of creating a project easier and faster.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 资产商店提供免费和付费内容，如2D和3D模型和场景、音频文件、模板、完整项目等，您可以直接将这些资产下载并导入到您的项目中。所有这些资产都使创建项目的过程更加容易和快速。
- en: Last but not least, let's learn how the Console window works and what it is
    useful for.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，让我们学习控制台窗口的工作原理及其用途。
- en: The Console window
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制台窗口
- en: 'Here, you can find the log of your project. This window displays warnings,
    errors, and information logs about your project, as shown in the following screenshot. If
    you struggle while troubleshooting error codes, the Unity forums ([https://forum.unity.com/](https://forum.unity.com/))
    is a valuable tool so that you can search for similar cases and ask for help:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以找到您项目的日志。此窗口显示有关项目的警告、错误和信息日志，如下面的截图所示。如果您在调试错误代码时遇到困难，Unity论坛（[https://forum.unity.com/](https://forum.unity.com/））是一个非常有用的工具，您可以搜索类似案例并寻求帮助：
- en: '![](img/26802d2a-1fef-41bb-883f-b848e9e39816.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/26802d2a-1fef-41bb-883f-b848e9e39816.png)'
- en: The Console window displaying different types of information, warning messages,
    and errors
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 显示不同类型信息、警告消息和错误的控制台窗口
- en: 'The main elements of this window and their functions are as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 本窗口的主要元素及其功能如下：
- en: The Clear button removes all messages except compilation errors. You will have
    to correct these errors before making any other changes to the current scene or
    playing it.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除按钮移除所有消息（除了编译错误）。您必须在更改当前场景或播放它之前纠正这些错误。
- en: You can use Collapse to join the same messages into an only message line.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用折叠功能将相同的消息合并成一条消息行。
- en: Use Clear on Play to delete all the messages the moment you hit the play button
    on the Toolbar.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“在播放时清除”来删除您在工具栏上点击播放按钮时产生的所有消息。
- en: Error Pause allows you to pause the execution of the scene when an error occurs.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误暂停允许在发生错误时暂停场景的执行。
- en: Use the three buttons on the right-hand side to show/hide the different types
    of messages (information, warning, and error).
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用右侧的三个按钮来显示/隐藏不同类型的消息（信息、警告和错误）。
- en: By now, you should have pretty good knowledge of how the Unity interface works.
    Before going any further, however, we are going to learn how to change the layout
    configuration. It's simple and useful to customize the various windows according
    to our needs and tastes.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经对Unity界面的工作方式有了相当的了解。然而，在继续之前，我们将学习如何更改布局配置。根据我们的需求和喜好自定义各种窗口既简单又实用。
- en: Changing the layout
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改布局
- en: Now that we've looked at the main windows and know how they function, the first
    thing we are going to do is change the disposition of these windows on the screen
    so that they fit our project's needs. For this book, we are going to use a modified
    version of the 2 by 3 layout, which will allow us to see the AR scene and game
    at the same time. However, once you are comfortable using Unity, feel free to
    select the layout that suits you the most.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'For the modified version, follow these steps:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'First, select the 2 by 3 layout on the top right drop-down menu of the Toolbar,
    just above the Inspector window:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e2df74b-4596-4827-bc5e-92b3b3627aa7.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: Selecting 2 by 3 on the Layout drop-down menu
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, drag the Project window so that it''s below the Hierarchy window:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5a3fa37-2de5-426b-b679-d28b9bd3bcfe.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: Dragging the Project window so that it's below the Hierarchy window
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the list view on the Project window by dragging the bottom scrollbar
    all the way to the left:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8059468-7320-4650-95d0-aaf9d96b71c2.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Moving the horizontal scrollbar to the left
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new aspect ratio of the Game view called `1280 x 720` and insert the
    following values: Width: `1280`, Height: `720`:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c5cf391-80ea-4266-813f-b40ddf7492ba.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: Creating a new Aspect Ratio
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Console window, press *Ctrl* + *Shift* + *C* orWindow|General|Console
    and drag it so that it''s a tab beside the Game view:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f688d09d-bff7-47e4-b8cd-ee459a985d90.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
- en: Dragging the Console window next to the Game view
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to ensure this layout is available every time you open Unity, go to
    Layouts, select Save Layout..., and give it a name:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3654394-5e84-4152-a814-13cb3d7a7221.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: Saving the created layout
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have our layout ready so that it can be used in our AR projects. By
    now, you should be acquainted with the different windows and tools Unity offers
    and how they work. In the next section, we will take a look at the main elements
    we can find in a Unity project.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Unity's main elements
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An application built in Unity will be made up of a project. This project will
    contain all the necessary elements that we'll need in order to develop the application,
    such as models, scripts, plans, menus, and much more. When you start up Unity,
    you can open a project by pointing to its root folder.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Each project contains one or more documents, called **scenes**. The projects
    that are created in Unity are structured into scenes, where a scene can be any
    part of the project. When we talk about applications, a scene can be from the
    start menu to any level or area of it. A single scene will contain many elements,
    such as a user interface, 3D objects, scripts, and so on.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main elements you can find in a Unity project are as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GameObjects
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripts
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefabs
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will look at Assets.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity refers to the files that will be used to create your project as an **asset**. They
    are the building blocks inside a Unity project and they can be in the form of
    image files, 3D models, sound files, code files, and so on. Assets from Unity,
    such as materials, textures, animations or scripts can be created in a *project* by
    either clicking on Assets|Create on the top menu bar or by right-clicking inside
    a folder on the Project window and selecting Create.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Unity将用于创建项目的文件称为**资产**。它们是Unity项目中的构建块，可以是图像文件、3D模型、声音文件、代码文件等形式。Unity中的资产，如材质、纹理、动画或脚本，可以通过在顶部菜单栏中点击Assets|Create，或者在项目窗口中的文件夹上右键单击并选择Create来在项目中创建。
- en: When we work with external assets, such as an image that's been downloaded from
    the internet or a 3D model we've designed, we can add them to the project by dragging
    them from an external folder (for example, from a folder on Windows Explorer)
    into one of the folders of the Project window or by right-clicking inside a folder
    of the Project window and selecting Import New Asset....
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理外部资产时，例如从互联网下载的图像或我们设计的3D模型，我们可以通过将它们从外部文件夹（例如，从Windows资源管理器中的一个文件夹）拖动到项目窗口中的一个文件夹，或者在项目窗口中的文件夹上右键单击并选择Import
    New Asset...，将它们添加到项目中。
- en: 'Use one of these methods to add *two* images from your computer gallery to
    the project''s `Assets` folder (we will be using one now and the other later),
    as shown in the following screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法之一将来自您计算机相册的**两个**图像添加到项目的`Assets`文件夹中（我们现在将使用一个，稍后使用另一个），如图所示：
- en: '![](img/09079c31-f747-4b0f-84d1-d678f03e7200.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/09079c31-f747-4b0f-84d1-d678f03e7200.png)'
- en: Adding an image to the project
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 向项目中添加图像
- en: Another way to import assets is to import a whole package containing several
    assets through Import-Package. This option can be found in the Assets menu of
    the menu bar or by right-clicking on the Project view.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种导入资产的方法是通过Import-Package导入包含多个资产的整个包。这个选项可以在菜单栏的Assets菜单中找到，或者在项目视图中右键单击。
- en: To delete an asset from your project, right-click on it and press Delete. It's
    important to notice that, once you delete an asset from the project, you can't
    recover it again.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要从项目中删除资产，右键单击它并按Delete。重要的是要注意，一旦从项目中删除了资产，就无法再恢复它。
- en: Now, let's look at what GameObjects are.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看什么是GameObject。
- en: GameObjects
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GameObjects
- en: When an asset is used in a scene, it becomes a GameObject. GameObjects can be
    added to the scene by either clicking on GameObject on the top menu bar or by
    right-clicking in the Scene view or Hierarchy window.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个资产在场景中使用时，它就变成了一个GameObject。可以通过在顶部菜单栏中点击GameObject，或者在场景视图或层次结构窗口中右键单击来将GameObject添加到场景中。
- en: 'Use one of these methods to add a 3D Object|Cube to the scene and move it so
    that it''s in front of the Main Camera and is visible in the Game view:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法之一将3D Object|Cube添加到场景中，并将其移动到主摄像机前面，在游戏视图中可见：
- en: '![](img/27af82d7-569c-42a4-80c4-59fb49476a1a.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27af82d7-569c-42a4-80c4-59fb49476a1a.png)'
- en: Creating a Cube in the Hierarchy window
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次结构窗口中创建一个立方体
- en: Now, let's talk about components.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈组件。
- en: Components
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: Components come in different forms and they are in charge of adding functionality
    to GameObjects. They can be used to create behavior (for example, scripts), define
    the appearance of GameObject (for example, renderers), and influence other aspects
    of the function of an object in the project.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 组件有不同的形式，它们负责为GameObject添加功能。它们可以用来创建行为（例如，脚本），定义GameObject的外观（例如，渲染器），并影响项目中对象功能的其他方面。
- en: All GameObjects contain at least one component. We start with the Transform component.
    This component is in charge of telling the Unity engine the position, rotation,
    and scale of an object. Other common component elements include Renderer and Collider.
    We will be looking at their uses in the upcoming chapters in this book.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的GameObject都至少包含一个组件。我们从Transform组件开始。这个组件负责告诉Unity引擎一个对象的位置、旋转和缩放。其他常见的组件元素包括Renderer和Collider。我们将在本书接下来的章节中探讨它们的使用。
- en: Components are added to a GameObject by selecting the object and then clicking
    on the Component menu of the menu bar or by hitting the Add Component button on
    the Inspector window.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择对象然后点击菜单栏上的Component菜单，或者在检查器窗口上点击Add Component按钮，将组件添加到GameObject中。
- en: Components can also be dragged from the Project window into the GameObject (for
    example, you can drag a script from the Project window onto a cube on the Scene view
    and the script will automatically appear in the Inspector window).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 组件也可以从项目窗口拖动到游戏对象（例如，您可以从项目窗口将脚本拖动到场景视图中的立方体上，脚本将自动出现在检查器窗口中）。
- en: 'Drag one of the images you added to the Project window previously into the
    cube of the Scene view to convert it into a texture:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前添加到项目窗口中的其中一个图像拖动到场景视图的立方体中，将其转换为纹理：
- en: '![](img/951ea1fb-f939-45c9-b9f0-d32882129ca6.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/951ea1fb-f939-45c9-b9f0-d32882129ca6.png)'
- en: The cube in the scene with the image as a texture
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 以图像作为纹理的场景中的立方体
- en: 'Now that we know about the visible elements of a project, let''s talk about
    the invisible ones: the scripts.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了项目中的可见元素，让我们来谈谈不可见的元素：脚本。
- en: Prefabs
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预制体
- en: Prefabs are GameObjects with customized properties and components (for example,
    a light with a script added to it to make it blink) that you can store in your Project window
    so that you can reuse them in different scenes/moments. They can be created or
    copied at any time (including runtime) and, whenever you alter a property of the
    original prefab, unless otherwise defined, all its instances will be updated automatically.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 预制体是具有自定义属性和组件的游戏对象（例如，添加了脚本来使其闪烁的光源），您可以将它们存储在项目窗口中，以便在不同的场景/时刻中重复使用。它们可以在任何时间（包括运行时）创建或复制，并且每当您更改原始预制体的属性时，除非另有定义，否则所有实例都将自动更新。
- en: Scripts
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本
- en: Scripts, which are actually a type of component, are an essential part of Unity
    since they define the behavior of the different elements in the project. You can
    manipulate (add/edit/delete) a script like any other component.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本，实际上是一种组件，是Unity不可或缺的一部分，因为它们定义了项目中不同元素的行为。您可以像操作其他组件一样操作（添加/编辑/删除）脚本。
- en: 'Right-click on the Project window and press Create|C# Script to create a new
    script and give it a name (for example, `CubeHandler.cs`):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击项目窗口，然后按Create|C# Script创建一个新的脚本并给它命名（例如，`CubeHandler.cs`）：
- en: '![](img/2f324d1b-bc14-4717-bbab-9dfc83992cb4.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f324d1b-bc14-4717-bbab-9dfc83992cb4.png)'
- en: Creating a new script
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的脚本
- en: In the Inspector window, you'll see that the newly created script has some default
    code in it. We'll talk about this code in the next section. Now that we have knowledge
    about the different elements of unity, let's learn to script in the following
    section.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器窗口中，您会看到新创建的脚本中包含一些默认代码。我们将在下一节中讨论此代码。现在我们已经了解了Unity的不同元素，让我们在下一节学习如何编写脚本。
- en: Scripting – first example in C#
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本编写 – C#中的第一个示例
- en: To see all the potential of scripts in Unity, we are going to take a look at
    the script we created in the previous section, `CubeHandler.cs`. As its name suggests,
    we are going to add some code to it to manipulate the cube in the scene.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解Unity中脚本的所有潜力，我们将查看上一节中创建的脚本`CubeHandler.cs`。正如其名称所暗示的，我们将向其中添加一些代码来操作场景中的立方体。
- en: Double-click on the name of the script in the Project window to open it in Visual
    Studio.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 双击项目窗口中脚本的名称，在Visual Studio中打开它。
- en: 'If you already had Visual Studio installed on your computer before you installed
    Unity, it''s possible that Unity won''t detect it automatically when double-clicking
    on the script. If so, you''ll have to go to Edit|Preferences and go to External
    Tools. From there, select the path to the `.exe` file of Visual Studio:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在安装Unity之前已经在计算机上安装了Visual Studio，那么在双击脚本时，Unity可能不会自动检测它。如果是这样，您将不得不转到Edit|Preferences并转到外部工具。从那里，选择Visual
    Studio `.exe` 文件的路径：
- en: '![](img/3be1bccb-d3e3-45ea-9049-e150c29f6fb8.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3be1bccb-d3e3-45ea-9049-e150c29f6fb8.png)'
- en: Preferences window with Visual Studio assigned as the External Script Editor
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 已将Visual Studio分配为外部脚本编辑器的首选项窗口
- en: 'Upon opening the script, you will see the following auto-generated code:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 打开脚本后，您将看到以下自动生成的代码：
- en: '[PRE0]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first three lines are the calls to three references. The first two are commonly
    used collections, while the third one is the reference that we need so that we
    can work with the Unity engine.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 前三行是调用三个引用。前两个是常用集合，而第三个是我们需要的工作与Unity引擎的引用。
- en: 'Then, you have the class declaration. The name of the class must be the same
    as the `.cs` script. By default, the classes that are generated through Unity
    will inherit from `MonoBehaviour`, which allows us to use the following two methods:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你有类声明。类的名称必须与`.cs`脚本相同。默认情况下，通过Unity生成的类将继承自`MonoBehaviour`，这允许我们使用以下两个方法：
- en: The `Start` method, which is called automatically as soon as the Unity scene
    is generated and before the first frame update. Therefore, this method is useful
    when it comes to initializing variables.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Start`方法会在Unity场景生成后立即自动调用，并在第一帧更新之前。因此，当初始化变量时，这个方法很有用。'
- en: The `Update` method is called once per frame, meaning that the code inside this
    method will be executed repeatedly.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Update`方法在每个帧上被调用一次，这意味着该方法内的代码将被重复执行。'
- en: 'Let''s try to add some code to control the cube on the scene:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试添加一些代码来控制场景中的立方体：
- en: 'First, we are going to declare a variable called `speed`, just after the declaration
    of the class, and before the `Start` method:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在类声明之后、`Start`方法之前声明一个名为`speed`的变量：
- en: '[PRE1]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we are going to initialize the value of `speed` in the `Start` method:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在`Start`方法中初始化`speed`的值：
- en: '[PRE2]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we are going to use this variable in the `Update` method to tell the
    cube to rotate at a certain speed:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将在`Update`方法中使用这个变量来告诉立方体以一定的速度旋转：
- en: '[PRE3]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This last line accesses the `transform` component of the current GameObject
    element, which is in charge of its position, rotation, and scale. We are telling
    the `transform` component that we want to rotate the object in the vertical axis
    (`Vector3.up`) with the speed we set previously.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一行访问当前GameObject元素的`transform`组件，该组件负责其位置、旋转和缩放。我们告诉`transform`组件，我们想要以我们之前设置的速度在垂直轴（`Vector3.up`）上旋转对象。
- en: 'By itself, the script won''t do anything because it doesn''t know which object''s
    transform we are referring to. To tell the script which objects from the scene
    we want to manipulate, go back to the Unity editor and drag the script onto the
    cube. Make sure that it appears as one of its components in the Inspector window.
    This way, we are telling the script that it''s the Cube we want to rotate. The
    full code should look as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅凭脚本本身不会做任何事情，因为它不知道我们指的是哪个对象的`transform`。为了告诉脚本我们想要操作场景中的哪些对象，请回到Unity编辑器并将脚本拖放到立方体上。确保它在检查器窗口中作为其组件之一出现。这样，我们就告诉脚本我们想要旋转的是立方体。完整的代码应该如下所示：
- en: '[PRE4]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, if you press the play button on the Toolbar, the Game view will show the
    cube rotating:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你在工具栏上按下播放按钮，游戏视图将显示立方体旋转：
- en: '![](img/b2a5ce0d-b383-4aa4-ae77-66004f4d0ea1.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b2a5ce0d-b383-4aa4-ae77-66004f4d0ea1.png)'
- en: When playing the scene, the cube will start rotating
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 当播放场景时，立方体将开始旋转
- en: Press play again to stop the simulation. Try changing the value of the `speed`
    to see how it affects the rotation speed of the cube.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按播放按钮以停止模拟。尝试更改`speed`的值，看看它如何影响立方体的旋转速度。
- en: 'The `transform` component is a little special because it has its own name.
    To access any other component, we need to use the `GetComponent<ComponentName>()` function.
    As an example, we can use this if we want to change the texture of the cube (the
    image we dragged into it previously). The component that''s in charge of materials
    and textures is the `Renderer`. Let''s include this code in our script:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform`组件有点特殊，因为它有自己的名称。要访问任何其他组件，我们需要使用`GetComponent<ComponentName>()`函数。例如，如果我们想更改立方体的纹理（我们之前拖入的图像），我们可以使用这个函数。负责材质和纹理的组件是`Renderer`。让我们将以下代码包含到我们的脚本中：'
- en: 'First, add the following line of code below the speed definition, which declares a
    variable of the `Texture2D` type:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在速度定义下方添加以下代码行，它声明了一个`Texture2D`类型的变量：
- en: '[PRE5]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, add the following two lines to the `Update` method, which is below the
    transformed line:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下两行代码添加到`Update`方法中，该方法位于转换行下方：
- en: '[PRE6]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we are saying that, if the system detects that the *A* key has been pressed,
    the texture of the object's `Renderer` component will change to the new one. As
    you can see, in this case, we haven't initialized the texture in the `Start` method.
    Instead, we have made it `public` and we are going to assign it from within Unity.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说的是，如果系统检测到*A*键被按下，对象的`Renderer`组件的纹理将更改为新的纹理。正如你所见，在这种情况下，我们并没有在`Start`方法中初始化纹理。相反，我们将其设置为`public`，并将在Unity内部对其进行赋值。
- en: 'Go back to the Unity editor. You will see that a new line has been added to
    the script component in the Inspector window. To assign the other image to it,
    you can either drag it from the Project window or click on the circle on the right
    and select it from the project:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity编辑器。你将看到在检查器窗口中脚本组件中已添加了一条新行。要将其他图像分配给它，你可以从项目窗口拖动它，或者点击右侧的圆圈并从项目中选择它：
- en: '![](img/454f3260-a5d7-4e4c-bbcc-9619e2d1dc4d.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/454f3260-a5d7-4e4c-bbcc-9619e2d1dc4d.png)'
- en: The last component of the cube is the script with the new line for selecting
    a Texture
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 立方体的最后一个组件是带有新行以选择纹理的脚本
- en: 'Now, press play again. When the cube is rotating, press the *A* key. You will
    see how the texture of the cube changes:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次按下播放。当立方体旋转时，按下*A*键。你将看到立方体的纹理如何变化：
- en: '![](img/dbb0a14f-e843-4c88-98be-63dad572bd49.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dbb0a14f-e843-4c88-98be-63dad572bd49.png)'
- en: Pressing the A key on the keyboard to see the texture of the cube change
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 按下键盘上的A键以查看立方体的纹理变化
- en: Now, you know about all of the logic behind a Unity project and have the basis
    to create more complex scripts. In the upcoming chapters, we will be using scripts
    for purposes such as showing elements in AR or interacting with the user through
    the user interface.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经了解了Unity项目背后的所有逻辑，并具备了创建更复杂脚本的基礎。在接下来的章节中，我们将使用脚本来实现诸如在AR中显示元素或通过用户界面与用户交互等目的。
- en: Summary
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install Unity and the necessary modules to
    make it work so that we can build mobile applications. We also introduced how
    the Unity interface is designed, its main windows, and how to customize their
    composition for our needs. We took a look at the main windows, their tools, and
    how to use them. Then, we learned about the main elements we can find in a Unity
    project and how to create/import them. Finally, we created our first script with
    a few lines of code to understand how easily we can control and alter objects
    on a scene.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装Unity以及使其工作的必要模块，以便我们可以构建移动应用程序。我们还介绍了Unity界面的设计，其主要窗口，以及如何根据我们的需求自定义它们的组成。我们查看了一些主要窗口、它们的工具以及如何使用它们。然后，我们学习了在Unity项目中可以找到的主要元素以及如何创建/导入它们。最后，我们通过几行代码创建了我们第一个脚本，以了解我们如何轻松地控制和更改场景中的对象。
- en: In the next chapter and the ones that follow, we will work with all of the elements
    we learned about in this chapter in order to generate fully functional AR projects.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章及随后的章节中，我们将使用本章所学的所有元素来生成功能齐全的AR项目。
