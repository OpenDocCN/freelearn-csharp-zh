- en: Contribute Simple Functionality to Roslyn C# Compiler Open Source Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Roslyn enlistment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a new syntax error in the C# compiler code base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a new semantic error in the C# compiler code base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing unit tests for a new error in C# compiler code base
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Roslyn Syntax Visualizer to view Roslyn syntax tokens and nodes for a
    source file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending a Roslyn Pull request to contribute to next version of C# compiler and
    VS IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter enables developers to add new functionality to the Roslyn C# compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s briefly walk through the different parts of the Roslyn source tree.
    You can take a quick look at the topmost source folder of the Roslyn repo in the
    VS2017 branch: [https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src](https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d251ab68-d073-46e3-b62c-658b8681a930.png) [](https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src)'
  prefs: []
  type: TYPE_IMG
- en: 'The most important source folders and corresponding components are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Compilers`: This implements the Roslyn C# and VB compilers and the core Microsoft
    Code Analysis layer, which exposes the rich-language agnostic API to perform syntactic
    and semantic analysis of source code. Core concepts of this layer are SyntaxTree
    (source file), SemanticModel (semantics of a source file), Symbol (declaration
    in source), and Compilation (collection of source files and options).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Workspaces`**:** This implements the Workspaces layer and the corresponding
    APIs to do workspace-level code analysis and refactoring of projects and solutions.
    This layer is completely agnostic to the host operating on the workspace, such
    as Visual Studio or command-line tools. Core concepts of this layer are Document
    (syntax tree with an associated semantic model), Project (collection of documents
    and assembly references comprising a compilation and properties for configuring
    a compilation), Solution (collection of projects), and Workspace-level Options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Features`**:** Extensible IDE features built on top of the Workspaces layer,
    such as Code fixes, refactorings, intellisense, completion, find references, navigate
    to definition, edit and continue (EnC), diagnostics, and so on, lie in this layer.
    This layer is not coupled to Visual Studio and can be hosted within different
    hosts or command-line tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VisualStudio`**:** Visual Studio-specific components built on top of the Features
    and Workspaces layers provide an end-to-end C# and VB IDE experience. Core concepts
    of this layer are the *Visual Studio* *Workspace*, Project system (component that
    bridges the gap between static program representation to a live IDE representation
    by populating the workspace and lighting up the above noted IDE features), and
    Language services (core language semantic services exposed to the project system).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExpressionEvaluator`**:** C# and VB expression evaluators to parse and evaluate
    simple expressions and compute the runtime results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Samples`**:** Samples and walkthroughs to demonstrate Roslyn API usage. You
    can read more details at [https://github.com/dotnet/roslyn/wiki/Samples-and-Walkthroughs](https://github.com/dotnet/roslyn/wiki/Samples-and-Walkthroughs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read a more detailed Roslyn overview at [https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview](https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Roslyn enlistment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the steps to install the required
    tools, enlist in Roslyn, build the Roslyn compiler sources and deploy, debug,
    and run tests for the locally-built compiler toolset.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
    Ensure that C#, VB, MSBuild, and Visual Studio Extensibility are included in the
    selected workloads. More specifically, add the .NET desktop development workload
    and Visual Studio Extensibility tools workloads to your VS install. [](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install GitHub for desktop by following the steps at [https://desktop.github.com/](https://desktop.github.com/)
    and sign in to GitHub using your GitHub profile. If you do not have a profile,
    you can create one at [https://github.com/join](https://github.com/join).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following commands from the *Git Shell* to enlist and restore Roslyn
    compiler sources with VS2017 tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: git clone https://github.com/dotnet/roslyn c:\Roslyn
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cd c:\Roslyn
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: git checkout tags/Visual-Studio-2017
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Restore.cmd
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build the Roslyn compiler subtree from a VS2017 admin developer command prompt:
    `msbuild /m /v:m Compilers.sln`. You can also build the entire Roslyn source tree
    using either `Build.cmd` or `msbuild /m /v:m Roslyn.sln`. This step builds the
    sources and deploys the locally-built compiler toolset (or entire Roslyn IDE +
    compiler toolset) into the **RoslynDev** hive.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'NOTE: If you get build errors due to strong name signing failures, execute
    the following command from an admin developer command prompt to disable strong
    name verification: `sn -Vr *` , and then execute the build.'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Roslyn.sln` in VS2017 and set `Compilers\CompilerExtension.csproj` as
    the startup project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *Ctrl* + *F5* to deploy the locally built compiler toolset into a separate
    Visual Studio hive and start a new Visual Studio instance from this hive (RoslynDev).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the new instance of Visual Studio, create a new C# class library project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the msbuild output verbosity from *Minimal* to *Normal* by opening Tools
    | Options | Projects and Solutions | Build and Run | MSBuild project build output
    verbosity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the C# class library project and open the Output Window to confirm that
    locally built <q>csc.exe</q> was used to build the library and it was executed
    from the Visual Studio RoslynDev hive: `C:\USERS\<%USER_NAME%>\APPDATA\LOCAL\MICROSOFT\VISUALSTUDIO\15.0_XXXXXXXXROSLYNDEV\EXTENSIONS\MICROSOFT\ROSLYN
    COMPILERS\42.42.42.42424\csc.exe`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on `Compilers\CSharpCompilerSemanticTest.csproj` and open project
    Properties | Debug page. Execute the C# compiler semantic unit tests by executing
    the xunit console exe specified in the Start external program textbox with arguments
    from the Command line arguments textbox: `C:\Users\<%USER_NAME%>\.nuget\packages\xunit.runner.console\<%VERSION%>\tools\xunit.console.x86.exe
    "<%REPO_ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\\Roslyn.Compilers.CSharp.Semantic.UnitTests.dll"
    -html "<%REPO_ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\\xUnitResults\Roslyn.Compilers.CSharp.Semantic.UnitTests.html"
    -noshadow`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can get more detailed instructions on enlisting, building, and testing Roslyn
    sources at [https://github.com/dotnet/roslyn/blob/dev16/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md](https://github.com/dotnet/roslyn/blob/dev16/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a new syntax error in the C# compiler code base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will enable Roslyn contributors to make changes to the C# parser
    to add a new syntax error. The C# parser reports a diagnostic *CS0106* (t*he modifier
    ''modifier'' is not valid for this* item) ([https://msdn.microsoft.com/en-us/library/3dd3ha66.aspx](https://msdn.microsoft.com/en-us/library/3dd3ha66.aspx))
    when an incorrect modifier is used in symbol declarations such as fields, methods,
    locals, and so on. For example, the following erroneous code generates three *CS0106*
    instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you declare a parameter with an incorrect modifier, say `readonly
    int param`, it doesn''t generate *CS0106*, instead it generates a large number
    of unhelpful syntax errors and squiggles related to missing tokens, invalid identifiers,
    and so on. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following set of errors and squiggles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/734e2d61-fb46-43a1-b916-acd118645928.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we will modify the C# parser to implement a better error recovery
    mechanism for such invalid parameter modifiers and report a single *CS0106* syntax
    error, which is more helpful to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to ensure that you have installed *Git* tools, VS2017, with .NET development
    and VS Extensiblity workloads and have enlisted and built Roslyn sources with
    the VS2017 tag. For reference, see the recipe Setting up Roslyn enlistment, at
    the start of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open `Roslyn.sln` at the root of the Roslyn repo in VS2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Parser\LanguageParser.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to private method `IsPossibleParameter` (line 4060) and add the highlighted
    `||` clause to the default case return statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to private method `ParseParameterModifiers` (line 4234), and replace
    the existing `while (IsParameterModifier(this.CurrentToken.Kind, allowThisKeyword))`
    with a `while (true)` loop, add the following if statement at the start of the
    while loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Build the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `VisualStudio\VisualStudioSetup.Next.csproj` as the startup project and
    click on *Ctrl* + *F5* to start a new VS instance with the locally built compiler
    and IDE toolset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# class library project, say `ClassLibrary`, and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Verify that there is a single *CS0106* diagnostic in the error list for the
    invalid `readonly` modifier and also that the editor has a single squiggle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f4b6f12-be09-473a-af01-11f9f09e747d.png)'
  prefs: []
  type: TYPE_IMG
- en: Build the project and verify that the build output has a single *CS0106* diagnostic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can view all the parser changes made in this recipe at [https://github.com/mavasani/roslyn/commit/02b7be551b46fa9a8e054c3317bc2ae7957b563c.](https://github.com/mavasani/roslyn/commit/02b7be551b46fa9a8e054c3317bc2ae7957b563c)
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parsing, syntax analysis, or syntactic analysis is the process of analyzing
    a string of symbols, either in natural language or in computer languages, conforming
    to the rules of a formal grammar.
  prefs: []
  type: TYPE_NORMAL
- en: The C# language parser is the first phase of the compiler tool chain that parses
    the source files according to the C# language specification to produce syntax
    trees. The primary entry point for parsing each source file is `SyntaxFactory.ParseCompilationUnit`
    ([http://source.roslyn.io/#q=SyntaxFactory.ParseCompilationUnit](http://source.roslyn.io/#q=SyntaxFactory.ParseCompilationUnit)),
    which transforms the given source text into a `CompilationUnitSyntax` with syntax
    nodes, tokens, and trivia.
  prefs: []
  type: TYPE_NORMAL
- en: Use [http://source.roslyn.io/](http://source.roslyn.io/) for a rich semantic
    search and navigation of Roslyn source code. Note that the version of source code
    indexed at this website corresponds to the latest sources in the *master* branch
    of the Roslyn repo and may differ from the sources for the *Visual-Studio-2017*
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: '`LanguageParser.ParseCompilationUnitCore` ([http://source.roslyn.io/#q=LanguageParser.ParseCompilationUnitCore](http://source.roslyn.io/#q=LanguageParser.ParseCompilationUnitCore))
    is the core method of the LanguageParser that parses the outermost namespace declaration,
    if any, and then parses type and member declarations within the namespace body.
    It uses the **Lexer** ([http://source.roslyn.io/#q=Lexer.cs](http://source.roslyn.io/#q=Lexer.cs))
    to read the next token and uses a very sophisticated error recovery mechanism
    to provide meaningful syntax errors for erroneous code with misplaced or invalid
    tokens.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we identified a case of invalid modifiers on parameters, where
    the C# compiler doesn't perform optimal error recovery and changed the parser
    code to look for invalid modifiers on parameters and parse them with the *CS0601*
    diagnostic.
  prefs: []
  type: TYPE_NORMAL
- en: The following highlighted change in step 3 to the default case return statement
    in `IsPossibleParameter` ensures that we don't completely skip over the parameter
    list when we encounter a member-level modifier such as readonly, public, private,
    and so on, in the modifier list of a parameter declaration. Instead, we associate
    the modifier with the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `If` statement added in the while loop of the `ParseParameterModifiers`
    method in step 4 ensures that we parse both valid and invalid modifiers into the
    parameter modifier list (as opposed to just the valid modifiers in the original
    code) and generate appropriate *CS0106* syntax errors on the invalid modifiers.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a new semantic error in the C# compiler code base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will enable the Roslyn contributor to make changes to the C# binder/semantic
    analysis phase to add a new semantic diagnostic. Additionally, we will also show
    how to extend an existing semantic diagnostic reported during the local rewriting
    (lowering) phase to cover more cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage of implicitly typed declarations with the `var` keyword is a very subjective
    matter. The C# compiler only reports non-subjective semantic errors on implicitly
    typed declarations where the type cannot be inferred or is invalid. However, there
    are certain cases where the type of the initializer is valid and can be inferred,
    but not at all apparent due to conversions in the initializer expression. For
    example, consider the expressions `var x = 1 + 1.0, var y = "string" + 1`. The
    initializers for *x* and *y* contain implicit conversions on the left/right sides
    of the binary expression, which may also involve user defined implicit operator
    conversions, hence, the inferred type of the variables is not apparent. We will
    extend the C# binder to report a new warning **CS0823** for such cases: `Warning
    CS0823: Use an explicit type for declaration as the initializer type ''{0}'' is
    not apparent due to conversions`.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, in this recipe we will extend *CS1717* (Assignment made to same
    variable; did you mean to assign something else?) ([https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717))
    to be reported on self-assigning property access. Currently, it only covers self-assigning
    field, local, parameter, and event access.
  prefs: []
  type: TYPE_NORMAL
- en: 'With both the preceding changes, we will see the following new warnings for
    the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to ensure that you have installed *Git* tools, VS2017 with .NET development,
    and VS Extensiblity workloads, and have enlisted and built Roslyn sources with
    the VS2017 tag. For reference, see the recipe *Setting up Roslyn enlistment* at
    the start of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open `Roslyn.sln` at the root of the Roslyn repo in VS2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Errors\ErrorCode.cs`
    and add the following new Warning ID at line 566: `WRN_ImplicitlyTypedVariableNotRecommended
    = 823,`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the resx file `<q><%ROOT%>\src\Compilers\CSharp\Portable\CSharpResources.resx</q>`
    and add the following new resource strings for warning messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Errors\ErrorFacts.cs`
    and add a new switch case in the method `GetWarningLevel` at line 320: `ErrorCode.WRN_ImplicitlyTypedVariableNotRecommended:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs`
    and add the following if statement in method `BindInferredVariableInitializer`
    at line 702:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Lowering\DiagnosticsPass_Warnings.cs`
    and add the following switch section in method `IsSameLocalOrField` at line 204:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Build the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `VisualStudio\VisualStudioSetup.Next.csproj` as the startup project and
    click on *Ctrl* + *F5* to start a new VS instance with the locally built compiler
    and IDE toolset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# class library project, say `ClassLibrary`, and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the new warnings *CS0823* and *CS1717* show up in the error list and
    squiggles appear in the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35dfbc71-878b-48b1-aae6-38ac3ec9356e.png)'
  prefs: []
  type: TYPE_IMG
- en: Build the project and verify that the build output also has the new diagnostics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can view all the source changes made in this recipe for *CS0823* at [https://github.com/mavasani/roslyn/commit/a155824a41150414966c6f03493b0bb05a45a59e](https://github.com/mavasani/roslyn/commit/a155824a41150414966c6f03493b0bb05a45a59e)
    and for *CS1717* at [https://github.com/mavasani/roslyn/commit/9f33d6809202d9b2b7ef5e0fa79df0b56ea46110](https://github.com/mavasani/roslyn/commit/9f33d6809202d9b2b7ef5e0fa79df0b56ea46110)
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Semantic analysis, also context sensitive analysis, is a process in compiler
    construction, usually after parsing, to gather necessary semantic information
    from the source code.
  prefs: []
  type: TYPE_NORMAL
- en: C# binder is the second phase of the compiler tool chain that operates on syntax
    trees, nodes, tokens, and trivia that comes out from the parser and analyzes the
    semantics of the code according to the C# language specification. This phase produces
    **BoundTrees** and reports semantic diagnostics. A bound tree is essentially an
    abstract syntax tree with rich semantic information associated with each node
    in the tree. All the semantic information provided by the **SemanticModel** APIs
    at the CodeAnalysis layer is from the bound nodes associated with the syntax.
    The primary entry points for binding statements and expressions are [Binder.BindStatement](http://source.roslyn.io/#q=Binder.BindStatement)
    and [Binder.BindExpression](http://source.roslyn.io/#q=Binder.BindExpression),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Use [http://source.roslyn.io/](http://source.roslyn.io/) for rich semantic search
    and navigation of Roslyn source code. Note that the version of source code indexed
    at this website corresponds to the latest sources in the *master* branch of the
    Roslyn repo, and may differ from the sources for the *Visual-Studio-2017* tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we showed you how to make the following changes in the binder
    to add a new diagnostic *CS0823*:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new error code to the `ErrorCode` enum.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add new resource strings for the compiler diagnostic message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new semantic diagnostic to the method to bind the implicit variable initializer
    when the initializer is a binary expression involving non-apparent implicit conversions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C# local rewriter or lowering is the third phase of the compiler tool chain
    that simplifies the bound trees into very simple bound nodes. Additionally, it
    also performs flow analysis and reports flow analysis diagnostics (such as unreachable
    code). Then output of the local rewriter is fed to the code generator that generates
    MSIL for the simplified bound tree.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we extended the existing local rewriting diagnostic pass to
    report *CS1717* for self-assigning property access expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit tests for a new error in the C# compiler code base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will enable you to add unit tests to the C# compiler. This has
    the following set of unit test projects in Roslyn.sln:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CSharpCompilerSyntaxTest`: Unit tests for parsing and syntax errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CSharpCompilerSemanticTest`: Unit tests for semantic errors and semantic model
    APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CSharpCompilerSymbolTest`: Unit tests for symbols defined in the compiler
    layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CSharpCommandLineTest`: Unit tests for the compiler''s command-line options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CSharpCompilerEmitTest`: Unit tests for the code generation phase that verify
    the generated MSIL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will add unit tests to `CSharpCompilerSemanticTest` for
    a newly added semantic error.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to ensure that you have executed the previous recipe in this chapter,
    *Implementing a new semantic error in the C# compiler code base,* to add a new
    semantic diagnostic to the C# compiler: `Warning CS0823: Use an explicit type
    for declaration as the initializer type ''{0}'' is not apparent due to conversions`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open `Roslyn.sln` at the root of the Roslyn repo in VS2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open source file `<%ROOT%>\src\Compilers\CSharp\Test\Semantic\Semantics\ImplicitlyTypedLocalsTests.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following new unit test to the source file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Build the test project and execute the unit test on a command-line console
    using the command line copied from the project''s `Debug` property page, appending
    `-method` switch for the newly added unit test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the unit test fails with the missing *CS0823* diagnostic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the missing diagnostic as an argument to the `VerifyDiagnostics` invocation
    in our unit test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bee7e297-96e7-4734-bb36-8237213514ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Re-execute the unit test by repeating step 4 and verify that the test passes
    now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you get a `DirectoryNotFoundException`, ensure that the test results directory
    exists on the machine: `<%ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\xUnitResults`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another unit test to verify that the diagnostic does not fire for a case
    where the initializer binary expression has no implicit conversions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Execute the new unit test and verify that it passes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also execute the unit tests inside Visual Studio using the Test Explorer
    window, but the test discovery for `Roslyn.sln` is quite slow due to thousands
    of unit tests across the solution. Hence, you might have to wait for a few minutes
    before you can execute the first unit test.
  prefs: []
  type: TYPE_NORMAL
- en: Using Roslyn Syntax Visualizer to view Roslyn syntax tokens and nodes for a
    source file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Syntax Visualizer is a Visual Studio extension that facilitates the inspection
    and exploration of Roslyn syntax trees and can be used as a debugging aid when
    you develop your own applications atop the .NET Compiler Platform (Roslyn) APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will show you how to install and use the Roslyn Syntax Visualizer
    to view the syntax tree, nodes, and properties of C# and Visual Basic source code
    in Visual Studio. You can also view the semantics associated with the syntax nodes,
    such as symbol information, type information, and compile time constant value
    of expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to install the `.NET Compiler Platform SDK` to install the Roslyn Syntax
    Visualizer. For guidance on installing the SDK, refer to the recipe, *Creating,
    debugging, and executing an analyzer project in Visual Studio*, in [Chapter 1](9928750a-c427-42e6-b8a2-cf67eb5465af.xhtml),
    *Writing Diagnostic Analyzers.*
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio and start the Roslyn Syntax Visualizer with the command View
    | Other Windows | Syntax Visualizer and dock it to the left side of the Visual
    Studio window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# class library project, say `ClassLibrary`*,* and add the following
    method to `Class1.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the code for the invocation `Console.WriteLine("Hello world!")` and
    view the Syntax Visualizer hierarchical tree view: `CompilationUnit` containing
    a `NamespaceDeclaration`, which contains a `ClassDeclaration`, which contains
    a `MethodDeclaration` with a `Block` whose first statement is an `ExpressionStatement`
    with an `InvocationExpression`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19dcd0d3-2887-4c1d-8792-dc9e435c813a.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the InvocationExpression node in SyntaxTree pane of the Syntax
    Visualizer and click on View Symbol (if any) command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ddc2f5ea-28bd-4a91-8c5c-80ee77cd397c.png)'
  prefs: []
  type: TYPE_IMG
- en: You can view the `Properties` of the PE metadata symbol `System.Console.WriteLine`
    that is bound to the invocation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9468dced-3cca-420f-b500-6e576a9057d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a new VB class library project to the solution, say `ClassLibrary1`, and
    add the following method to the existing class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the invocation expression `Console.Write("Hello World!")` in the editor
    and you can view the Syntax tree, nodes, and properties of the VB code in the
    Syntax Visualizer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ace532c-cde2-49ae-abdc-3a11eba9f7d8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can read a more detailed overview of the Syntax Visualizer tool at [https://github.com/dotnet/roslyn/wiki/Syntax%20Visualizer](https://github.com/dotnet/roslyn/wiki/Syntax%20Visualizer).
  prefs: []
  type: TYPE_NORMAL
- en: Sending a Roslyn pull request to contribute to next version of C# compiler and
    VS IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the steps to follow to send a pull
    request to contribute to the next version of the Roslyn compilers and Visual Studio
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to ensure that you have installed Git tools, VS2017 with .NET development
    and VS Extensiblity workloads and have enlisted and built Roslyn sources. For
    reference, see the recipe, *Setting up Roslyn enlistment*, at the start of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is recommended that you create a Roslyn issue at [https://github.com/dotnet/roslyn/issues](https://github.com/dotnet/roslyn/issues)
    for your planned work and also discuss it with Roslyn team members prior to coding
    to avoid any unnecessary or redundant work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the source changes that you would like to contribute to the Roslyn code
    base in your local enlistment. For example, execute the recipe, *Implementing
    a new semantic error in the C# compiler code base,* covered earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add sufficient unit tests for your code changes. For example, execute the recipe,
    *Writing unit tests for a new error in C# compiler code base,* covered earlier
    in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `Test.cmd` at the root of the repo to build and run all the tests to
    confirm that there are no regressions with your changes. For reference, see the
    recipe, *Setting up Roslyn enlistment* at the start of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new git branch, add and commit your changes, and push them to the origin.
    For git help, search at [https://help.github.com/](https://help.github.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign the .NET **Contributor License Agreement** (**CLA**) at [http://cla2.dotnetfoundation.org/](http://cla2.dotnetfoundation.org/)
    before sending the pull request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the steps at [https://help.github.com/articles/creating-a-pull-request/](https://help.github.com/articles/creating-a-pull-request/)
    to start a new pull request with your branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the pull request template in the description tab of the pull request.
    You can edit this information even after creating a pull request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating a pull request, add a new comment tagging the compiler and/or
    the IDE team to review the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Compiler team: `@dotnet/roslyn-compiler`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IDE team: `@dotnet/roslyn-ide`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the requested code changes from the reviewers and ensure there are no merge
    conflicts in your branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you get at least two approvals and all the tests pass on the pull request,
    you can request your changes to be merged in by the team members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can read the Contributing Code guidelines for the Roslyn repo at [https://github.com/dotnet/roslyn/wiki/Contributing-Code](https://github.com/dotnet/roslyn/wiki/Contributing-Code)
    for further details.
  prefs: []
  type: TYPE_NORMAL
