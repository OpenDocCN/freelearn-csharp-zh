["```cs\n    using System.Collections.Generic;\n    namespace Weather.Models\n    {\n        public class Main\n        {\n            public double temp { get; set; }\n            public double temp_min { get; set; }\n            public double temp_max { get; set; }\n            public double pressure { get; set; }\n            public double sea_level { get; set; }\n            public double grnd_level { get; set; }\n            public int humidity { get; set; }\n            public double temp_kf { get; set; }\n        }\n        public class Weather\n        {\n            public int id { get; set; }\n            public string main { get; set; }\n            public string description { get; set; }\n            public string icon { get; set; }\n        }\n        public class Clouds\n        {\n            public int all { get; set; }\n        }\n        public class Wind\n        {\n            public double speed { get; set; }\n            public double deg { get; set; }\n        }\n        public class Rain\n        {\n        }\n        public class Sys\n        {\n            public string pod { get; set; }\n        }\n        public class List\n        {\n            public long dt { get; set; }\n            public Main main { get; set; }\n            public List<Weather> weather { get; set; }\n            public Clouds clouds { get; set; }\n            public Wind wind { get; set; }\n            public Rain rain { get; set; }\n            public Sys sys { get; set; }\n            public string dt_txt { get; set; }\n        }\n        public class Coord\n        {\n            public double lat { get; set; }\n            public double lon { get; set; }\n        }\n        public class City\n        {\n            public int id { get; set; }\n            public string name { get; set; }\n            public Coord coord { get; set; }\n            public string country { get; set; }\n        }\n        public class WeatherData\n        {\n            public string cod { get; set; }\n            public double message { get; set; }\n            public int cnt { get; set; }\n            public List<List> list { get; set; }\n            public City city { get; set; }\n        }\n    }\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Weather.Models\n    {\n        public class ForecastItem\n        {\n            public DateTime DateTime { get; set; }\n            public string TimeAsString => DateTime.ToShortTimeString();\n            public double Temperature { get; set; }\n            public double WindSpeed { get; set; }\n            public string Description { get; set; }\n            public string Icon { get; set; }\n        }\n    }\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Weather.Models;\n    public class Forecast\n    {\n        public string City { get; set; }\n        public List<ForecastItem> Items { get; set; }\n    }\n    ```", "```cs\n    using System.Threading.Tasks;\n    using Weather.Models;\n    namespace Weather.Services;\n    public interface IWeatherService\n    {\n        Task<Forecast> GetForecastAsync(double latitude, double longitude);\n    }\n    ```", "```cs\n    using System;\n    using System.Globalization;\n    using Weather.Models;\n    using System.Text.Json;\n    namespace Weather.Services;\n    public class OpenWeatherMapWeatherService : IWeatherService\n    {\n        public async Task<Forecast> GetForecastAsync(double latitude, double longitude)\n        {\n        }\n    }\n    ```", "```cs\n    public async Task<Forecast> GetForecastAsync(double latitude, double longitude)\n    {\n     var language = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;\n     var apiKey = “{AddYourApiKeyHere}”;\n     var uri = $”https://api.openweathermap.org/data/2.5/forecast?lat={latitude}&lon={longitude}&units=metric&lang={language}&appid={apiKey}”;\n    }\n    ```", "```cs\n    public async Task<Forecast> GetForecastAsync(double latitude, double longitude)\n    {\n        var language = CultureInfo.CurrentUICulture.\n    TwoLetterISOLanguageName;\n        var apiKey = “{AddYourApiKeyHere}”;\n        var uri = $”https://api.openweathermap.org/data/2.5/forecast?lat={latitude}&lon={longitude}&units=metric&lang={language}&appid={apiKey}”;\n     var httpClient = new HttpClient();\n     var result = await httpClient.GetStringAsync(uri);\n     var data = JsonSerializer.Deserialize<WeatherData>(result);\n     var forecast = new Forecast()\n     {\n     City = data.city.name,\n     Items = data.list.Select(x => new ForecastItem()\n     {\n     DateTime = ToDateTime(x.dt),\n     Temperature = x.main.temp,\n     WindSpeed = x.wind.speed,\n     Description = x.weather.First().description,\n     Icon = $”http://openweathermap.org/img/w/{x.weather.First().icon}.png”\n     }).ToList()\n     };\n     return forecast;\n    }\n    ```", "```cs\nprivate DateTime ToDateTime(double unixTimeStamp)\n{\n    DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n    dateTime = dateTime.AddSeconds(unixTimeStamp).ToLocalTime();\n    return dateTime;\n}\n```", "```cs\n    <key>NSLocationWhenInUseUsageDescription</key>\n    <string>We are using your location to find a forecast for you</string>\n    ```", "```cs\n    public abstract partial class ViewModel : ObservableObject\n    {\n    }\n    ```", "```cs\n    public class MainViewModel : ViewModel\n    {\n        private readonly IWeatherService weatherService;\n        public MainViewModel(IWeatherService weatherService)\n        {\n            this.weatherService = weatherService;\n        }\n    }\n    ```", "```cs\n    public async Task LoadDataAsync()\n    {\n        var location = await Geolocation.GetLocationAsync();\n        var forecast = await weatherService.GetForecastAsync(location.Latitude, location.Longitude);\n    }\n    ```", "```cs\n    using System;\n    namespace Weather.Models;\n    public class ForecastGroup : List<ForecastItem>\n    {\n        public ForecastGroup() { }\n        public ForecastGroup(IEnumerable<ForecastItem> items)\n        {\n            AddRange(items);\n        }\n        public DateTime Date { get; set; }\n        public string DateAsString => Date.ToShortDateString();\n        public List<ForecastItem> Items => this;\n    }\n    ```", "```cs\n    public partial class MainViewModel : ViewModel\n    {\n        [ObservableProperty]\n     private string city;\n    [ObservableProperty]\n     private ObservableCollection<ForecastGroup> days;\n        // Rest of the class is omitted for brevity\n    }\n    ```", "```cs\n    public async Task LoadDataAsync()\n    {\n        var location = await Geolocation.GetLocationAsync();\n        var forecast = await weatherService.GetForecastAsync(location.Latitude, location.Longitude);\n        var itemGroups = new List<ForecastGroup>();\n        foreach (var item in forecast.Items)\n        {\n            if (!itemGroups.Any())\n            {\n                itemGroups.Add(new ForecastGroup(new List<ForecastItem>() { item })\n                {\n                    Date = item.DateTime.Date\n                });\n                continue;\n            }\n            var group = itemGroups.SingleOrDefault(x => x.Date == item.DateTime.Date);\n            if (group == null)\n            {\n                itemGroups.Add(new ForecastGroup(new List<ForecastItem>() { item })\n                {\n                    Date = item.DateTime.Date\n                });\n                continue;\n            }\n            group.Items.Add(item);\n        }\n        Days = new ObservableCollection<ForecastGroup>(itemGroups);\n        City = forecast.City;\n    }\n    ```", "```cs\n    public MainView (MainViewModel mainViewModel)\n    {\n        InitializeComponent ();\n        BindingContext = mainViewModel;\n    }\n    ```", "```cs\n        protected override void OnNavigatedTo(NavigatedToEventArgs args)\n        {\n            base.OnNavigatedTo(args);\n     if (BindingContext is MainViewModel viewModel)\n     {\n     MainThread.BeginInvokeOnMainThread(async () =>\n     {\n     await viewModel.LoadDataAsync();\n     });\n     }\n        }\n    ```", "```cs\n    <ContentPage\n        xmlns=”http://schemas.microsoft.com/dotnet/2021/maui”\n        xmlns:x=”http://schemas.microsoft.com/winfx/2009/xaml”\n        x:Class=”Weather.Views.Desktop.MainView”\n        Title=”{Binding City}”>\n    ```", "```cs\n    <Grid>\n      <ScrollView BackgroundColor=”Transparent”>\n        <FlexLayout BindableLayout.ItemsSource=”{Binding Days}” Direction=”Column”>\n          <BindableLayout.ItemTemplate>\n            <DataTemplate>\n              <!--Content will be added here -->\n            </DataTemplate>\n          </BindableLayout.ItemTemplate>\n        </FlexLayout>\n      </ScrollView>\n    </Grid>\n    ```", "```cs\n    <StackLayout>\n      <ContentView Padding=”10” BackgroundColor=”#9F5010”>\n        <Label Text=”{Binding DateAsString}” TextColor=”White” FontAttributes=”Bold” />\n      </ContentView>\n    </StackLayout>\n    ```", "```cs\n    <FlexLayout BindableLayout.ItemsSource=”{Binding Items}” Wrap=”Wrap” JustifyContent=”Start” AlignItems=”Start”>\n    </FlexLayout>\n    ```", "```cs\n<BindableLayout.ItemTemplate>\n  <DataTemplate>\n    <StackLayout Margin=”10” Padding=”20” WidthRequest=”150” BackgroundColor=”#99FFFFFF”>\n      <Label FontSize=”16” FontAttributes=”Bold” Text=”{Binding TimeAsString}” HorizontalOptions=”Center” />\n      <Image WidthRequest=”100” HeightRequest=”100” Aspect=”AspectFit” HorizontalOptions=”Center” Source=”{Binding Icon}” />\n      <Label FontSize=”14” FontAttributes=”Bold” Text=”{Binding Temperature, StringFormat=’{0}° C’}” HorizontalOptions=”Center” />\n      <Label FontSize=”14” FontAttributes=”Bold” Text=”{Binding Description}” HorizontalOptions=”Center” />\n    </StackLayout>\n  </DataTemplate>\n</BindableLayout.ItemTemplate>\n```", "```cs\n    using System.Collections.ObjectModel;\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using CommunityToolkit.Mvvm.Input;\n    using Weather.Models;\n    using Weather.Services;\n    ```", "```cs\n        public async Task RefreshAsync()\n        {\n            await LoadDataAsync();\n        }\n    ```", "```cs\n    [RelayCommand]\n        public async Task RefreshAsync()\n        {\n            await LoadDataAsync();\n        }\n    ```", "```cs\n    <ContentPage.ToolbarItems>\n      <ToolbarItem IconImageSource=”refresh.png” Text=”Refresh” Command=”{Binding RefreshCommand}” />\n    </ContentPage.ToolbarItems>\n    ```", "```cs\n        [ObservableProperty]\n        private bool isRefreshing;\n    ....// The rest of the code is omitted for brevity\n    public async Task LoadData()\n    {\n        IsRefreshing = true;\n    ....// The rest of the code is omitted for brevity\n        IsRefreshing = false;\n    }\n    ```", "```cs\n    <Frame IsVisible=”{Binding IsRefreshing}” BackgroundColor=”#99FFFFFF” WidthRequest=”100” HeightRequest=”100” VerticalOptions=”Center” HorizontalOptions=”Center”>\n      <ActivityIndicator Color=”Black” IsRunning=”True” />\n    </Frame>\n    ```", "```cs\n    <ContentPage xmlns=”http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=”http://schemas.microsoft.com/winfx/2009/xaml”\n        x:Class=”Weather.Views.Desktop.MainView”\n        Title=”{Binding City}”>\n      <ContentPage.ToolbarItems>\n        <ToolbarItem Icon=”refresh.png” Text=”Refresh” Command=”{Binding RefreshCommand}” />\n      </ContentPage.ToolbarItems>\n     <Grid>\n     <Image Aspect=”AspectFill”>\n     <Image.Source>\n     <UriImageSource Uri=”https://upload.wikimedia.org/wikipedia/commons/7/79/Solnedg%C3%A5ng_%C3%B6ver_Laholmsbukten_augusti_2011.jpg” CachingEnabled=”true” CacheValidity=”5” />\n     </Image.Source>\n     </Image>\n        <ScrollView BackgroundColor=”Transparent”>\n    <!-- The rest of the code is omitted for brevity -->\n    ```", "```cs\n    public MainView (MainViewModel mainViewModel)\n    {\n        InitializeComponent();\n        BindingContext = mainViewModel;\n    }\n    ```", "```cs\n        protected override void OnNavigatedTo(NavigatedToEventArgs args)\n        {\n            base.OnNavigatedTo(args);\n     if (BindingContext is MainViewModel viewModel)\n     {\n     MainThread.BeginInvokeOnMainThread(async () =>\n     {\n     await viewModel.LoadDataAsync();\n     });\n     }\n        }\n    ```", "```cs\n    <ContentPage xmlns=”http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=”http://schemas.microsoft.com/winfx/2009/xaml”\n        x:Class=”Weather.Views.Desktop.MainView”\n        Title=”{Binding City}”>\n    ```", "```cs\n    <CollectionView ItemsSource=”{Binding Days}” IsGrouped=”True” BackgroundColor=”Transparent”>\n    </CollectionView>\n    ```", "```cs\n    <CollectionView ItemsSource=”{Binding Days}” IsGrouped=”True” BackgroundColor=”Transparent”>\n     <CollectionView.GroupHeaderTemplate>\n     <DataTemplate>\n     <ContentView Padding=”15,5” BackgroundColor=”#9F5010”>\n     <Label FontAttributes=”Bold” TextColor=”White” Text=”{Binding DateAsString}” VerticalOptions=”Center”/>\n     </ContentView>\n     </DataTemplate>\n     </CollectionView.GroupHeaderTemplate>\n    </CollectionView>\n    ```", "```cs\n    <CollectionView.ItemTemplate>\n      <DataTemplate>\n        <Grid Padding=”15,10” ColumnSpacing=”10” BackgroundColor=”#99FFFFFF”>\n          <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=”*” />\n            <ColumnDefinition Width=”50” />\n            <ColumnDefinition Width=”*” />\n            <ColumnDefinition Width=”*” />\n          </Grid.ColumnDefinitions>\n          <Label FontAttributes=”Bold” Text=”{Binding TimeAsString}” VerticalOptions=”Center” />\n          <Image Grid.Column=”1” HeightRequest=”50” WidthRequest=”50” Source=”{Binding Icon}” Aspect=”AspectFit” VerticalOptions=”Center” />\n          <Label Grid.Column=”2” Text=”{Binding Temperature, StringFormat=’{0}° C’}”\n    VerticalOptions=”Center” />\n          <Label Grid.Column=”3” Text=”{Binding Description}” VerticalOptions=”Center” />\n        </Grid>\n      </DataTemplate>\n    </CollectionView.ItemTemplate>\n    ```", "```cs\n    <RefreshView Command=”{Binding Refresh}” IsRefreshing=”{Binding IsRefreshing}”>\n      <CollectionView ItemsSource=”{Binding Days}” IsGrouped=”True” BackgroundColor=”Transparent”>\n    ....\n      </CollectionView>\n    </RefreshView>\n    ```", "```cs\n    #if DEBUG\n        builder.Logging.AddDebug();\n    #endif\n     builder.Services.AddSingleton<IWeatherService, OpenWeatherMapWeatherService>();\n     builder.Services.AddTransient<MainViewModel, MainViewModel>();\n        return builder.Build();\n    ```", "```cs\n    public partial class MainView : ContentPageViews\\Mobile\\MainView.xaml.cs and add the IMainView interface to the class:\n\n    ```", "```cs\n\n    ```", "```cs\n    #if DEBUG\n        builder.Logging.AddDebug();\n    #endif\n        builder.Services.AddSingleton<IWeatherService, OpenWeatherMapWeatherService>();\n        builder.Services.AddTransient<MainViewModel, MainViewModel>();\n     if (DeviceInfo.Idiom == DeviceIdiom.Phone)\n     {\n     builder.Services.AddTransient<IMainView, Views.Mobile.MainView>();\n     }\n     else\n     {\n     builder.Services.AddTransient<IMainView, Views.Desktop.MainView>();\n     }\n        return builder.Build();\n    ```", "```cs\n    <StackLayout Margin=”10” Padding=”20” WidthRequest=”150” BackgroundColor=”#99FFFFFF”>\n     <VisualStateManager.VisualStateGroups>\n     <VisualStateGroup>\n     </VisualStateGroup>\n     </VisualStateManager.VisualStateGroups>\n    ......\n    </StackLayout>\n    ```", "```cs\n    <VisualStateGroup>\n     <VisualState Name=”Portrait”>\n     <VisualState.Setters>\n     <Setter Property=”WidthRequest” Value=”150” />\n     </VisualState.Setters>\n     </VisualState>\n     <VisualState Name=”Landscape”>\n     <VisualState.Setters>\n     <Setter Property=”WidthRequest” Value=”200” />\n     </VisualState.Setters>\n     </VisualState>\n    </VisualStateGroup>\n    ```", "```cs\n    <Image WidthRequest=”100” HeightRequest=”100” Aspect=”AspectFit” HorizontalOptions=”Center” Source=”{Binding Icon}”>\n     <VisualStateManager.VisualStateGroups>\n     <VisualStateGroup>\n     <VisualState Name=”Portrait”>\n     <VisualState.Setters>\n     <Setter Property=”WidthRequest” Value=”100” />\n     <Setter Property=”HeightRequest” Value=”100” />\n     </VisualState.Setters>\n     </VisualState>\n     <VisualState Name=”Landscape”>\n     <VisualState.Setters>\n     <Setter Property=”WidthRequest” Value=”150” />\n     <Setter Property=”HeightRequest” Value=”150” />\n     </VisualState.Setters>\n     </VisualState>\n     </VisualStateGroup>\n     </VisualStateManager.VisualStateGroups>\n    </Image>\n    ```", "```cs\n    using System;\n    namespace Weather.Behaviors;\n    public class FlexLayoutBehavior : Behavior<FlexLayout>\n    {\n        private FlexLayout view;\n    }\n    ```", "```cs\n    private void SetState(VisualElement view, string state)\n    {\n        VisualStateManager.GoToState(view, state);\n        if (view is Layout layout)\n        {\n            foreach (VisualElement child in layout.Children)\n            {\n                SetState(child, state);\n            }\n        }\n    }\n    ```", "```cs\n    private void UpdateState()\n    {\n        MainThread.BeginInvokeOnMainThread(() =>\n        {\n            var page = Application.Current.MainPage;\n            if (page.Width > page.Height)\n            {\n                SetState(view, “Landscape”);\n                return;\n            }\n            SetState(view, “Portrait”);\n        });\n    }\n    ```", "```cs\n    protected override void OnAttachedTo(FlexLayout view)\n    {\n        this.view = view;\n        base.OnAttachedTo(view);\n        UpdateState();\n        Application.Current.MainPage.SizeChanged += MainPage_SizeChanged;\n    }\n    void MainPage_SizeChanged(object sender, EventArgs e)\n    {\n        UpdateState();\n    }\n    ```", "```cs\n    protected override void OnDetachingFrom(FlexLayout view)\n    {\n        base.OnDetachingFrom(view);\n        Application.Current.MainPage.SizeChanged -= MainPage_SizeChanged;\n        this.view = null;\n    }\n    ```", "```cs\n    <ContentPage xmlns=”http://schemas.microsoft.com/dotnet/2021/maui”\n                 xmlns:x=”http://schemas.microsoft.com/winfx/2009/xaml”\n     xmlns:behaviors=”clr-namespace:Weather.Behaviors” \n        x:Class=”Weather.Views.Desktop.MainView”\n        Title=”{Binding City}”>\n    ```", "```cs\n<FlexLayout ItemsSource=”{Binding Items}” Wrap=”Wrap” JustifyContent=”Start” AlignItems=”Start”>\n <FlexLayout.Behaviors>\n <behaviors:FlexLayoutBehavior />\n </FlexLayout.Behaviors>\n<FlexLayout.ItemsTemplate>\n```"]