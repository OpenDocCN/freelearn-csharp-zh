- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Deep Dive into C# Libraries and Frameworks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解C#库和框架
- en: Embarking on a journey through the dynamic and expansive domain of **C#** development
    becomes considerably smoother when you are well-acquainted with its core libraries
    and frameworks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当您熟悉C#的核心库和框架时，开始探索动态且广泛的C#开发领域会变得相当顺畅。
- en: In this chapter, we aim to serve as your reliable guide, steering you through
    the vital and powerful resources that C# proudly presents. We venture deep into
    the functionalities of the **Entity Framework**, a powerhouse for data management,
    and explore the vast potential of **ASP.NET Core** in the sphere of web development.
    Moreover, we cast a spotlight on the remarkable capabilities of **MAUI**/**Xamarin**,
    opening doors to the exciting world of cross-platform mobile development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的目标是成为您可靠的指南，引导您探索C#所自豪呈现的宝贵和强大的资源。我们深入研究了**Entity Framework**的功能，这是一个数据管理的强大工具，并探讨了**ASP.NET
    Core**在Web开发领域的巨大潜力。此外，我们还聚焦于**MAUI**/**Xamarin**的显著能力，为跨平台移动开发的激动人心世界打开大门。
- en: 'In this chapter, we’ll cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Essential C# libraries and frameworks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要的C#库和框架
- en: Entity Framework and data access
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Entity Framework和数据访问
- en: ASP.NET Core for web development
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core用于Web开发
- en: Exploring essential C# libraries and frameworks
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索必要的C#库和框架
- en: In the vibrant world of programming, the ability to utilize libraries and frameworks
    proficiently stands as a hallmark of an adept developer. As we venture into the
    realm of C#, a language renowned for its versatility and robustness, it becomes
    imperative to familiarize ourselves with the essential libraries and frameworks
    that augment its capabilities. This chapter unfolds as a guided journey, introducing
    you to the pivotal tools and resources that have cemented C# as a powerhouse in
    the software development landscape. Brace yourselves as we delve deep into the
    intricacies of C# libraries and frameworks, unlocking the potential that can propel
    your coding skills to unprecedented heights.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在充满活力的编程世界中，能够熟练地利用库和框架是熟练开发者的一大标志。随着我们进入以灵活性和健壮性著称的C#语言领域，熟悉增强其能力的必要库和框架变得至关重要。本章将作为一次引导之旅，向您介绍巩固C#在软件开发领域作为强大工具地位的关键工具和资源。准备好深入探索C#库和框架的复杂性，解锁能够将您的编码技能提升到前所未有的高度。
- en: What libraries and tools would you recommend for developing automated testing
    systems in C#?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您会推荐哪些库和工具来开发C#的自动化测试系统？
- en: 'When it comes to building automated testing systems in C#, several libraries
    and tools can significantly facilitate this process. Here are some that I would
    highly recommend:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到在C#中构建自动化测试系统时，有几个库和工具可以显著简化这一过程。以下是我强烈推荐的一些：
- en: '**NUnit**: A well-regarded library for unit testing. It offers attributes to
    specify test cases and assert the expected results, helping to create a robust
    testing framework.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NUnit**: 一个备受推崇的单元测试库。它提供了属性来指定测试用例和断言预期结果，有助于创建一个健壮的测试框架。'
- en: '**xUnit**: This is another widely used framework for unit testing; it is known
    for being more modern and extensible compared to NUnit. It allows for more precise
    control over test running and more options for creating reusable test code.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xUnit**: 这是另一个广泛使用的单元测试框架；与NUnit相比，它以更现代和可扩展而闻名。它允许对测试运行有更精确的控制，并为创建可重用测试代码提供了更多选项。'
- en: '**Moq**: This library is instrumental in creating mock objects for unit testing,
    helping to isolate units of code for more accurate and efficient testing.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Moq**: 这个库在创建用于单元测试的模拟对象方面起着关键作用，有助于隔离代码单元以进行更准确和高效的测试。'
- en: '**Selenium**: A powerful tool for controlling a web browser through the program.
    It’s functional for browser automation and can be used effectively for testing
    web applications by automating user actions.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium**: 一个通过程序控制网络浏览器的强大工具。它在浏览器自动化方面功能强大，可以通过自动化用户操作有效地用于测试Web应用程序。'
- en: '**Playwright**: This is a recent addition to the automation landscape, allowing
    for the scripting of actions in multiple web browsers, which can be used for both
    testing and web scraping.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Playwright**: 这是自动化领域的新增成员，允许在多个网络浏览器中编写操作脚本，可用于测试和网页抓取。'
- en: '**SpecFlow**: A tool that supports **behavior-driven development** (**BDD**),
    enabling the description of test cases in natural, business-readable language,
    fostering better communication and collaboration among stakeholders.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SpecFlow**：一个支持**行为驱动开发**（**BDD**）的工具，允许使用自然、易于业务理解的语言描述测试用例，从而促进利益相关者之间的更好沟通和协作。'
- en: Additional tools and libraries can be explored based on the specific requirements
    of your project, including integration with continuous integration and continuous
    delivery/deployment (CI/CD) pipelines and compatibility with other tools in your
    technology stack.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您项目的具体需求，可以探索额外的工具和库，包括与持续集成和持续交付/部署（CI/CD）管道的集成以及与您技术堆栈中其他工具的兼容性。
- en: Could you delve deeper into the process of optimizing application performance
    using C# libraries and tools?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能否深入探讨使用C#库和工具优化应用程序性能的过程？
- en: 'Optimizing the performance of applications in C# is a multi-faceted process
    involving various strategies and approaches. Here are some essential steps and
    methodologies to consider:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 优化C#应用程序的性能是一个多方面的过程，涉及各种策略和方法。以下是一些需要考虑的基本步骤和方法：
- en: '**Code profiling**: Utilizing tools such as the **Visual Studio** profiler
    helps in identifying bottlenecks in the code. It’s crucial to regularly profile
    the code to spot potential areas where optimizations can be made.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码分析**：利用如**Visual Studio**分析器等工具可以帮助识别代码中的瓶颈。定期分析代码以发现可以进行优化的潜在区域至关重要。'
- en: '**Asynchronous programming**: Implementing asynchronous methods can significantly
    improve the responsiveness of your application. It helps to reduce the waiting
    time and makes the application more scalable by efficiently using system resources.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步编程**：实现异步方法可以显著提高应用程序的响应性。它有助于减少等待时间，并通过有效利用系统资源使应用程序更具可扩展性。'
- en: '**Database query optimization**: Leveraging ORM tools, such as **Entity Framework**
    or **Dapper**, for optimal database operations can significantly enhance performance.
    This includes using lazy loading wisely, optimizing LINQ queries, and avoiding
    N+1 query problems.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库查询优化**：利用ORM工具，如**Entity Framework**或**Dapper**，进行最优的数据库操作可以显著提高性能。这包括明智地使用延迟加载，优化LINQ查询，并避免N+1查询问题。'
- en: '**Caching**: Employing caching systems, such as **MemoryCache** or **Redis**,
    can reduce the database load and enhance the application’s performance. It helps
    to store frequently accessed data in the memory to avoid redundant database calls,
    thereby speeding up data retrieval processes.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：采用缓存系统，如**MemoryCache**或**Redis**，可以减少数据库负载并提高应用程序的性能。它有助于将频繁访问的数据存储在内存中，以避免冗余的数据库调用，从而加快数据检索过程。'
- en: '**Parallelization**: Utilizing the **Task Parallel Library** helps to parallelize
    tasks, thus improving the application’s throughput. Implementing parallel algorithms
    where applicable can significantly reduce the time taken for CPU-bound operations.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行化**：利用**Task Parallel Library**可以帮助并行化任务，从而提高应用程序的吞吐量。在适用的情况下实现并行算法可以显著减少CPU密集型操作所需的时间。'
- en: Furthermore, it is beneficial to stay updated with the latest advancements in
    the **.NET** ecosystem and continuously explore new libraries and tools that can
    potentially enhance your application’s performance. Regular code reviews, adhering
    to best practices, and adopting a performance-oriented mindset are key to building
    high-performing applications in C#.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，保持对**.NET**生态系统最新进展的了解，并持续探索可能增强应用程序性能的新库和工具，这对您来说是有益的。定期进行代码审查，遵循最佳实践，以及采用以性能为导向的思维模式，是构建高性能C#应用程序的关键。
- en: What libraries would you recommend for implementing a microservices architecture
    in C# projects?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您会推荐哪些库来实现C#项目的微服务架构？
- en: 'To implement a microservices architecture in C# projects, I would recommend
    utilizing the following libraries and tools:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要在C#项目中实现微服务架构，我建议使用以下库和工具：
- en: '**ASP.NET Core**: A lightweight and flexible platform that is highly favored
    for creating microservices. It allows for the development of high-performance
    and modern microservices architectures, offering various features to build scalable
    and maintainable services.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core**：一个轻量级且灵活的平台，非常适合创建微服务。它允许开发高性能和现代的微服务架构，提供各种功能来构建可扩展和可维护的服务。'
- en: '**Docker**: A vital tool for containerizing and facilitating the easy deployment
    of microservices. It ensures that the application runs the same regardless of
    where it’s deployed, thus enhancing the scalability and maintainability of the
    services.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**: 一个用于容器化和简化微服务部署的重要工具。它确保应用程序无论部署在哪里都能以相同的方式运行，从而增强了服务的可扩展性和可维护性。'
- en: '**RabbitMQ** or **Kafka**: These are robust tools for implementing reliable
    messaging systems between microservices. They allow for asynchronous communication
    and can help in decoupling services, making the system more resilient and scalable.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RabbitMQ** 或 **Kafka**: 这些是实施微服务之间可靠消息系统的强大工具。它们允许异步通信，并有助于解耦服务，使系统更具弹性和可扩展性。'
- en: '**Ocelot** or **YARP**: An API gateway that assists in managing routing and
    load balancing between microservices. It acts as a reverse proxy to forward requests
    to appropriate microservices, handling various cross-cutting concerns such as
    authentication and logging.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ocelot** 或 **YARP**：一个 API 网关，它有助于管理微服务之间的路由和负载均衡。它充当反向代理，将请求转发到适当的微服务，处理各种横切关注点，如身份验证和日志记录。'
- en: '**IdentityServer**: A tool that facilitates the implementation of authentication
    and authorization in a microservices architecture. It helps to secure microservices
    and allows for centralized identity management, which is crucial in a microservices
    environment.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IdentityServer**: 一个有助于在微服务架构中实现身份验证和授权的工具。它有助于保护微服务，并允许集中式身份管理，这在微服务环境中至关重要。'
- en: What memory management strategies would you recommend when processing large
    datasets in C#, and what approaches might be useful in this case?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 C# 中处理大量数据集时，您会推荐哪些内存管理策略，以及在这种情况下可能有哪些有用的方法？
- en: 'When processing large datasets in C#, I would recommend adopting the following
    strategies and utilizing these approaches:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中处理大量数据集时，我建议采用以下策略并利用这些方法：
- en: '**Data** **s****treaming**: Utilize streams to handle large volumes of data
    in chunks instead of loading the entire dataset into memory simultaneously, thus
    preventing memory overflow and ensuring efficient memory usage.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据** **流**：利用流以分块的形式处理大量数据，而不是一次性将整个数据集加载到内存中，从而防止内存溢出并确保高效的内存使用。'
- en: '**Garbage collector (GC) optimization**: Enhance memory management by avoiding
    frequent memory allocations and garbage collections, which can potentially slow
    down the application. Understanding and optimizing the garbage collection process
    can lead to improved performance.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垃圾收集器（GC）优化**：通过避免频繁的内存分配和垃圾收集，从而提高内存管理。理解和优化垃圾收集过程可以提高性能。'
- en: '**Memory-mapped files**: Employ memory-mapped files for the efficient management
    of large data volumes. This technique allows you to work with large files while
    keeping memory usage under control, enhancing the application’s performance.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存映射文件**：使用内存映射文件来高效管理大量数据。这项技术允许你在控制内存使用的同时处理大文件，从而提高应用程序的性能。'
- en: '**Parallel computing libraries**: Utilize libraries, such as the **Task Parallel
    Library** (**TPL**), for parallel data processing and optimal system resource
    utilization. This approach allows for the efficient handling of large datasets
    by distributing the workload across multiple processors, thus speeding up the
    computation process.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行计算库**：利用库，如 **任务并行库（TPL**），进行并行数据处理和最佳系统资源利用。这种方法通过将工作负载分配到多个处理器来高效处理大量数据集，从而加快计算过程。'
- en: '**System.IO.Pipelines**: This library is a crucial tool for efficient data
    stream processing in C#. It enables the easy implementation of high-performance
    data-processing pipelines by breaking down data into smaller pieces and handling
    them asynchronously. This can significantly enhance the performance of an application
    when dealing with large datasets, reducing memory pressure and improving processing
    speed.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**System.IO.Pipelines**: 这个库是 C# 中高效数据流处理的关键工具。它通过将数据分解成更小的部分并异步处理它们，使得实现高性能数据处理管道变得简单。这可以在处理大量数据集时显著提高应用程序的性能，减少内存压力并提高处理速度。'
- en: What is the .NET Foundation, and can you name some projects that are part of
    it?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 基金会是什么？你能列出一些属于它的项目吗？
- en: 'The **.NET Foundation** is an independent organization established to foster
    innovation in the .NET developer community. It provides resources and support
    for open source projects related to the .NET ecosystem. Numerous projects are
    part of the .NET Foundation, including but not limited to the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET 基金会**是一个独立的组织，旨在促进 .NET 开发者社区的创新发展。它为与 .NET 生态系统相关的开源项目提供资源和支持。.NET
    基金会包括众多项目，包括但不限于以下内容：'
- en: '**Orleans**: A framework that provides a straightforward approach to building
    distributed high-scale computing applications, without the need to learn and apply
    complex concurrency or other scaling patterns.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Orleans**：一个框架，提供了一种简单的方法来构建分布式高规模计算应用程序，无需学习和应用复杂的并发或其他扩展模式。'
- en: '**ASP.NET Core**: A framework for building modern web applications and services,
    offering features that enable the development of high-performance web APIs and
    apps.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core**：一个用于构建现代 Web 应用程序和服务的框架，提供使开发高性能 Web API 和应用程序成为可能的功能。'
- en: '**Entity Framework** : An object-relational mapper (ORM) facilitating the work
    with databases in .NET, allowing developers to work with database objects and
    data using .NET objects.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Entity Framework**：一个对象关系映射器（ORM），简化了在 .NET 中与数据库的工作，允许开发者使用 .NET 对象与数据库对象和数据交互。'
- en: '**ML.NET**: A library offering machine learning (ML) capabilities within the
    .NET ecosystem, providing tools and services for building custom ML models using
    C# or F# without requiring expertise in ML.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ML.NET**：一个在 .NET 生态系统内提供机器学习（ML）功能的库，提供使用 C# 或 F# 构建自定义 ML 模型的工具和服务，无需具备
    ML 专业知识。'
- en: '**NuGet**: A package manager for .NET, facilitating the discovery, installation,
    and management of thousands of useful .NET libraries and tools.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NuGet**：.NET 的包管理器，简化了数千个有用 .NET 库和工具的发现、安装和管理。'
- en: '**Roslyn**: A compiler and APIs for analyzing and generating C# and visual
    basic code, enabling developers to build code analyzers, refactoring providers,
    and other code-aware tools.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Roslyn**：用于分析和生成 C# 和 Visual Basic 代码的编译器和 API，使开发者能够构建代码分析器、重构提供程序和其他代码感知工具。'
- en: These projects, and many others within the .NET Foundation’s umbrella, demonstrate
    a commitment to fostering a robust, innovative, and collaborative .NET community.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目，以及 .NET 基金会旗下许多其他项目，展示了培养强大、创新和协作的 .NET 社区的承诺。
- en: What do the “Community Toolkit” projects entail, and what is their primary goal?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “社区工具包”项目包括哪些内容，它们的主要目标是什么？
- en: The **Community Toolkit** projects comprise a collection of tools, libraries,
    and components developed by the community to simplify and enhance the development
    process within the .NET ecosystem. The primary goal of these projects is to provide
    developers with resources for quick and efficient application development, offering
    ready-to-use components that can be easily integrated into their projects.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**社区工具包**项目包括社区开发的工具、库和组件集合，旨在简化并增强 .NET 生态系统中的开发过程。这些项目的主要目标是向开发者提供快速高效的应用程序开发资源，提供易于集成的现成组件。'
- en: What key features make Entity Framework a popular choice for working with databases
    in C#?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪些关键特性使 Entity Framework 成为在 C# 中处理数据库的流行选择？
- en: 'The key features that make **Entity Framework** a popular choice for working
    with databases in C# include the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使 **Entity Framework** 成为在 C# 中处理数据库的流行选择的关键特性包括以下内容：
- en: '**Object-relational mapper** (**ORM**): This allows you to work with databases
    using object-oriented paradigms, facilitating the mapping between object code
    and relational databases'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系映射器**（**ORM**）：这允许您使用面向对象范式与数据库交互，促进对象代码与关系数据库之间的映射。'
- en: '**Language Integrated Query** (**LINQ**): It enables the formulation of database
    queries using LINQ, simplifying the writing and reading of queries'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言集成查询**（**LINQ**）：它允许使用 LINQ 表达数据库查询，简化了查询的编写和读取。'
- en: '**Code-first approach**: This permits developers to define models and their
    relationships in code, followed by automatically generating a database schema
    from this code'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码优先方法**：这允许开发者通过代码定义模型及其关系，然后自动从该代码生成数据库模式。'
- en: '**Database migrations**: A tool for database version control that allows the
    tracking and management of changes in the database schema'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库迁移**：一个数据库版本控制工具，允许跟踪和管理数据库模式的变化。'
- en: '**Lazy loading**: A feature for the automatic loading of related data upon
    request, helping to optimize performance and resource utilization'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**懒加载**：一种在请求时自动加载相关数据的功能，有助于优化性能和资源利用'
- en: Can you name and characterize a few popular libraries for web development on
    the ASP.NET Core platform?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能列举并描述一些在ASP.NET Core平台上用于Web开发的流行库吗？
- en: 'A few popular libraries for web development on the ASP.NET Core platform include
    the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core平台上进行Web开发的一些流行库包括以下：
- en: '**Model View Controller** (**MVC**): A framework for creating web applications
    with a clear separation of responsibilities between the model, view, and controller'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器**（**MVC**）：一个用于创建具有模型、视图和控制器之间明确责任分离的Web应用程序的框架'
- en: '**SignalR**: A library for implementing real-time web functionalities through
    web sockets and other technologies'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**：一个库，通过Web套接字和其他技术实现实时Web功能'
- en: '**Blazor**: A framework for building interactive web interfaces using C# instead
    of JavaScript'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor**：一个使用C#而不是JavaScript构建交互式Web界面的框架'
- en: '**Entity Framework Core**: An ORM for working with databases, facilitating
    easy integration and interaction with databases in ASP.NET Core applications'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Entity Framework Core**：一个用于与数据库工作的ORM，便于在ASP.NET Core应用程序中轻松集成和交互数据库'
- en: What capabilities do Xamarin and MAUI offer for developing cross-platform mobile
    applications?
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin和MAUI为开发跨平台移动应用程序提供了哪些功能？
- en: '**Xamarin** and **MAUI** provide a range of capabilities for developing cross-platform
    mobile applications, including the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Xamarin**和**MAUI**为开发跨平台移动应用程序提供了一系列功能，包括以下：'
- en: '**Unified code base**: Both Xamarin and MAUI allow for the creation of applications
    for different platforms (iOS, Android, etc.) using a single code base, thus promoting
    code reuse and reducing development time'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一的代码库**：Xamarin和MAUI都允许使用单个代码库创建适用于不同平台（iOS、Android等）的应用程序，从而促进代码重用并减少开发时间'
- en: '**Native performance and experience**: MAUI enables developers to build applications
    that offer native performance and user experience by allowing access to native
    APIs'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原生性能和体验**：MAUI通过允许访问原生API，使开发者能够构建提供原生性能和用户体验的应用程序'
- en: '**Flexible UI design**: MAUI, an evolution of Xamarin, offers new functionalities
    for creating flexible user interfaces with .NET MAUI graphics and reusable controls,
    making the UI design process more streamlined and efficient'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的UI设计**：作为Xamarin的演变，MAUI提供了使用.NET MAUI图形和可重用控件创建灵活用户界面的新功能，使UI设计过程更加流畅和高效'
- en: '**Community and corporate support**: As part of the Microsoft ecosystem, MAUI
    benefits from strong community and corporate support, providing developers with
    a rich set of resources, including documentation, tutorials, and community forums'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和企业支持**：作为微软生态系统的一部分，MAUI受益于强大的社区和企业支持，为开发者提供丰富的资源，包括文档、教程和社区论坛'
- en: '**Integration with modern development tools**: Xamarin and MAUI integrate well
    with modern development tools, such as Visual Studio, offering features such as
    XAML Hot Reload for a more productive development experience'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与现代开发工具的集成**：Xamarin和MAUI与现代开发工具（如Visual Studio）集成良好，提供XAML热重载等特性，以提供更高效的开发体验'
- en: By leveraging these capabilities, developers can build cross-platform mobile
    applications more efficiently while ensuring high performance and a native-like
    user experience.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些功能，开发者可以更高效地构建跨平台移动应用程序，同时确保高性能和类似原生的用户体验。
- en: Could you recommend a few libraries for creating RESTful APIs in C#?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能推荐一些用于创建RESTful API的库吗？
- en: 'I would recommend the following for creating RESTful APIs in C#:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我会推荐以下用于创建RESTful API的库：
- en: '**ASP.NET Web API**: A framework that facilitates the easy creation of HTTP
    services accessible from any client, including browsers and mobile devices'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Web API**：一个框架，便于轻松创建任何客户端（包括浏览器和移动设备）可访问的HTTP服务'
- en: '**ServiceStack**: A high-performance framework for creating web services, supporting
    various formats, including JSON, XML, and others'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ServiceStack**：一个高性能框架，用于创建支持包括JSON、XML在内的各种格式的Web服务'
- en: '**Swashbuckle**: A library integrated into Swagger UI for automatic API documentation
    generation, enhancing the ease of developing and maintaining APIs'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swashbuckle**：一个集成到Swagger UI的库，用于自动生成API文档，增强了开发和维护API的便捷性'
- en: In your opinion, what are the best libraries for developing graphical interfaces
    in C#?
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在你看来，哪些库是开发图形界面的最佳选择？
- en: 'For developing graphical interfaces in C#, I would recommend the following
    libraries:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在C#中开发图形界面，我会推荐以下库：
- en: '**Windows Presentation Foundation** (**WPF**): A robust framework for developing
    desktop applications with rich graphical interfaces'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Presentation Foundation**（**WPF**）：一个用于开发具有丰富图形界面的桌面应用的强大框架'
- en: '**WinForms**: A traditional framework for creating desktop applications utilizing
    window forms, offering a wide array of tools and controls'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WinForms**：一个传统的框架，用于创建使用窗口表单的桌面应用，提供广泛的工具和控制'
- en: '**Universal Windows Platform** (**UWP**): A framework for developing applications
    that can run on all devices equipped with Windows 10, enhancing the uniformity
    of applications across different devices'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用Windows平台**（**UWP**）：一个用于开发可在所有配备Windows 10的设备上运行的应用的框架，增强了不同设备间应用的统一性'
- en: '**Avalonia**: A cross-platform framework for creating graphical interfaces,
    allowing development across various operating systems, promoting flexibility and
    broader reach'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Avalonia**：一个跨平台框架，用于创建图形界面，允许跨各种操作系统进行开发，促进灵活性和更广泛的覆盖范围'
- en: '**MAUI**: Enables the creation of mobile applications with a shared graphical
    interface component for both Android and iOS, fostering code reuse and streamlined
    development'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MAUI**：允许创建具有共享图形界面组件的移动应用，适用于Android和iOS，促进代码重用和开发流程的简化'
- en: What are the main frameworks available for unit testing in C#, and what are
    their distinctive features?
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#中可用的主要单元测试框架有哪些，它们各自的特点是什么？
- en: 'For unit testing in C#, the following main frameworks are available, each having
    its distinctive features:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于C#的单元测试，以下是一些主要框架，每个框架都有其独特的特点：
- en: '**NUnit**: A popular unit testing framework boasting a rich set of functionalities
    and attributes to facilitate test organization and execution'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NUnit**：一个功能丰富的单元测试框架，拥有丰富的功能属性，便于测试组织和执行'
- en: '**xUnit**: A modern testing framework supporting parallel test execution and
    integrated assertions, fostering efficient and effective testing processes'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xUnit**：一个现代测试框架，支持并行测试执行和集成断言，促进高效有效的测试流程'
- en: '**MSTest**: An integrated framework for unit testing in Visual Studio, characterized
    by its simplicity and ease of use and integration, serving as a reliable tool
    for developers'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSTest**：Visual Studio中用于单元测试的集成框架，以其简单易用和易于集成而著称，作为开发者可靠的工具'
- en: '**Moq**: A library that specializes in creating mock objects, which is often
    used in conjunction with other unit testing frameworks to test interactions between
    components, enhancing the depth and reliability of testing efforts'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Moq**：一个专注于创建模拟对象的库，通常与其他单元测试框架结合使用来测试组件间的交互，增强测试的深度和可靠性'
- en: Could you name and explain a few popular libraries for multimedia processing
    in C# and the criteria for selecting them?
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能否列举并解释一些C#中多媒体处理的流行库以及选择它们的准则？
- en: 'Here are a few popular libraries for multimedia processing in C#:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些C#中多媒体处理的流行库：
- en: '**NAudio**: A library that specializes in audio processing, offering functionalities
    to play, record, and manipulate audio files with ease'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NAudio**：一个专注于音频处理的库，提供轻松播放、录制和操作音频文件的功能'
- en: '**Accord.NET**: A comprehensive library providing a wide array of functionalities
    for image, video, and audio processing, facilitating multimedia application development'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Accord.NET**：一个提供广泛功能的库，包括图像、视频和音频处理，促进多媒体应用开发'
- en: '**Emgu CV**: A .NET wrapper for OpenCV, enabling operations such as image processing
    and facial recognition, fostering the development of computer vision applications'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Emgu CV**：OpenCV的.NET包装器，能够进行图像处理和面部识别等操作，促进计算机视觉应用的开发'
- en: The criteria for selecting a library include support for the required formats
    and functions, community backing and documentation, and ease of integration and
    utilization in your project, ensuring a smooth development process.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 选择库的准则包括对所需格式和功能的支持、社区支持与文档，以及项目中的集成和利用的简便性，确保开发过程顺利。
- en: Which C# libraries would you recommend for real-time data processing?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您会推荐哪些C#库用于实时数据处理？
- en: 'For real-time data processing in C#, I would recommend the following libraries:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于C#的实时数据处理，我会推荐以下库：
- en: '**SignalR**: A library that facilitates the easy addition of real-time functionality
    regarding your applications, enabling real-time interaction between client and
    server and enhancing the responsiveness and interactivity of your applications'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**：一个库，简化了向应用程序添加实时功能，实现客户端和服务器之间的实时交互，并增强了应用程序的响应性和交互性'
- en: '**RabbitMQ**: A popular message broker service that is suitable for implementing
    high-performance solutions for real-time message exchange, fostering seamless
    communication in distributed systems'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RabbitMQ**：一种流行的消息代理服务，适用于实现高性能的实时消息交换解决方案，促进分布式系统中的无缝通信'
- en: '**Redis**: A high-performance in-memory database management system capable
    of being utilized for real-time data-processing solutions, enhancing the speed
    and efficiency of data handling in your applications'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redis**：一个高性能的内存数据库管理系统，可用于实时数据处理解决方案，提高应用程序中数据处理的速度和效率'
- en: '**Apache Kafka**: A scalable and high-performance data stream processing platform,
    allowing for the implementation of complex solutions for real-time data processing,
    which facilitates the development of robust data pipelines and analytics systems'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Kafka**：一个可扩展且高性能的数据流处理平台，允许实现复杂的数据处理解决方案，便于开发健壮的数据管道和分析系统'
- en: Could you name and describe a few renowned libraries for task automation and
    scripting in C# projects?
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能否列举并描述一些在C#项目中用于任务自动化和脚本的知名库？
- en: 'Certainly. Here are a few renowned libraries for task automation and scripting
    in C# projects:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当然。以下是一些在C#项目中用于任务自动化和脚本的知名库：
- en: '**PowerShell SDK**: Allows for the integration and execution of PowerShell
    scripts directly from C# code, facilitating the automation of various administrative
    and management tasks'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PowerShell SDK**：允许从C#代码中直接集成和执行PowerShell脚本，便于自动化各种管理和行政任务'
- en: '**Roslyn**: A .NET compiler and API for code analysis and generation, which
    can be utilized for automating tasks related to code analysis and modification,
    enhancing code quality and maintainability'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Roslyn**：一个.NET编译器和API，用于代码分析和生成，可用于自动化与代码分析和修改相关的任务，提高代码质量和可维护性'
- en: '**Fluent automation**: A library for web application testing automation, allowing
    for the creation of scripts for automatic browser control, enhancing the testing
    efficiency and coverage'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fluent automation**：一个用于Web应用程序自动化测试的库，允许创建用于自动浏览器控制的脚本，提高测试效率和覆盖率'
- en: Could you name and describe a few popular libraries and protocols for implementing
    client-server communication in C#?
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能否列举并描述一些在C#中实现客户端-服务器通信的流行库和协议？
- en: 'Here are a few popular libraries and protocols for implementing client-server
    communication in C#:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些在C#中实现客户端-服务器通信的流行库和协议：
- en: '**Windows Communication Foundation** (**WCF**): Covers a wide range of protocols
    and patterns for building client-server applications, providing a unified and
    comprehensive framework for communication'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Communication Foundation**（**WCF**）：涵盖了构建客户端-服务器应用程序的广泛协议和模式，提供了一个统一和全面的通信框架'
- en: '**gRPC**: A modern, high-performance protocol for client-server communication
    based on **HTTP/2** and **Protocol Buffers**, ensuring efficient and scalable
    communication'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gRPC**：一个基于**HTTP/2**和**Protocol Buffers**的现代、高性能的客户端-服务器通信协议，确保高效和可扩展的通信'
- en: '**SignalR**: Facilitates the easy implementation of real-time bi-directional
    communication between client and server, enhancing application interactivity and
    responsiveness'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**：简化了客户端和服务器之间实时双向通信的实现，增强了应用程序的交互性和响应性'
- en: '**REST/HTTP**: Utilizes the HTTP protocol to implement RESTful APIs, allowing
    for organized interaction between clients and servers through standard HTTP methods
    and facilitating interoperable and scalable solutions'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST/HTTP**：利用HTTP协议实现RESTful API，通过标准HTTP方法实现客户端和服务器之间的有序交互，促进互操作性和可扩展的解决方案'
- en: What modern alternatives to Entity Framework could you recommend for working
    with databases in C#, and what are their advantages?
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能推荐一些现代的Entity Framework替代方案，用于在C#中处理数据库，以及它们的优点吗？
- en: 'Modern alternatives to Entity Framework for working with databases in C# include
    the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中与数据库工作的现代替代方案包括以下内容：
- en: '**Dapper**: A lightweight ORM that offers high performance and flexibility
    when working with databases, providing a streamlined approach to data access.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dapper**：一个轻量级的ORM，在处理数据库时提供高性能和灵活性，提供了一种简化的数据访问方法。'
- en: '**NHibernate**: A full-featured ORM with rich mapping and configuration capabilities,
    offering a comprehensive solution for complex data management tasks.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NHibernate**：一个功能齐全的ORM，具有丰富的映射和配置能力，为复杂的数据管理任务提供全面的解决方案。'
- en: '**Micro ORM**: This category includes small ORMs that provide basic functionality
    for database operations without additional overhead, allowing for faster and more
    direct database interactions.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微ORM**：这个类别包括提供基本数据库操作功能的小型ORM，没有额外的开销，允许更快速和直接的数据库交互。'
- en: '**Linq2db**: An open source ORM that allows developers to work with databases
    using LINQ syntax in C#. It provides a type-safe data access layer, allowing for
    the compile-time validation of queries, which can help to catch errors before
    runtime. It supports a wide range of database providers and offers good performance
    and flexibility, making it a valuable tool for developers looking to maintain
    the benefits of LINQ while working with databases.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linq2db**：一个开源ORM，允许开发者在C#中使用LINQ语法与数据库交互。它提供了一个类型安全的数据访问层，允许在编译时验证查询，这有助于在运行时之前捕获错误。它支持广泛的数据库提供程序，并提供良好的性能和灵活性，是希望在使用数据库时保持LINQ优势的开发者的宝贵工具。'
- en: The advantages of these modern alternatives, when compared to Entity Framework,
    include greater performance and flexibility and the ability to have more detailed
    control over database operations, enhancing application efficiency and maintainability.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与Entity Framework相比，这些现代替代品的优点包括更高的性能和灵活性，以及对数据库操作有更详细的控制能力，从而提高了应用程序的效率和可维护性。
- en: Could you discuss the features and recommendations for using gRPC in C# projects?
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能否讨论在C#项目中使用gRPC的特性和建议？
- en: '**gRPC** is an open standard for high-performance and modern remote procedure
    call (RPC) communication. Here are some features and recommendations for its use
    in C# projects:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**gRPC**是一个高性能和现代远程过程调用（RPC）通信的开放标准。以下是一些在C#项目中使用gRPC的特性和建议：'
- en: '**High performance**: gRPC utilizes the HTTP/2 protocol, offering high-performance
    and low bandwidth usage, ensuring efficient communication'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：gRPC利用HTTP/2协议，提供高性能和低带宽使用，确保高效通信。'
- en: '**Support for multiple programming languages**: gRPC supports many popular
    programming languages, including C#, facilitating cross-language development and
    integration'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持多种编程语言**：gRPC支持许多流行的编程语言，包括C#，便于跨语言开发和集成。'
- en: '**Contract-first API development**: Through Protocol Buffers, gRPC promotes
    contract-based API development, which simplifies maintenance and scalability,
    ensuring well-defined and consistent interfaces'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于契约的API开发**：通过Protocol Buffers，gRPC促进了基于契约的API开发，这简化了维护和可扩展性，确保了接口的明确性和一致性。'
- en: '**Streaming**: gRPC supports data streaming, enabling the implementation of
    complex interaction scenarios, enhancing application capabilities in real-time
    communication'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流式传输**：gRPC支持数据流，使得实现复杂的交互场景成为可能，增强了应用程序在实时通信中的能力。'
- en: '**Suitability in modern architectures**: gRPC is well-suited for modern microservices
    architectures and distributed systems, providing a robust and scalable solution
    for contemporary software development needs'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在现代架构中的适用性**：gRPC非常适合现代微服务架构和分布式系统，为当代软件开发需求提供强大且可扩展的解决方案。'
- en: How can the Orleans framework facilitate the simplification of developing distributed
    systems and microservices in C#?
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Orleans框架如何简化C#中分布式系统和微服务的开发？
- en: 'The **Orleans** framework can greatly aid in simplifying the development of
    distributed systems and microservices in C# through the following means:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下方式，**Orleans**框架可以极大地帮助简化C#中分布式系统和微服务的开发：
- en: '**Abstraction of distributed system complexity**: Orleans abstracts away much
    of the complexity of building distributed systems by automating the management
    of distributed instances, also known as virtual actors. This means developers
    can focus more on business logic rather than the intricacies of distributed computing,
    thereby simplifying the programming model.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式系统复杂性的抽象**：Orleans通过自动化分布式实例（也称为虚拟演员）的管理，抽象掉了构建分布式系统的大部分复杂性。这意味着开发者可以更多地关注业务逻辑，而不是分布式计算的复杂性，从而简化了编程模型。'
- en: '**Virtual actor model**: Orleans employs a virtual actor model where actors
    are single-threaded components with an isolated state, making concurrency management
    simpler. This programming model promotes the building of systems that are easier
    to reason about, as developers can work with the high-level abstraction that automatically
    manages the distribution of actors across a cluster of servers.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟演员模型**: Orleans 采用虚拟演员模型，其中演员是具有隔离状态的单一线程组件，这使得并发管理变得简单。这种编程模型促进了易于推理的系统构建，因为开发者可以与自动管理演员在服务器集群中分布的高级抽象进行工作。'
- en: '**Scalability**: The framework facilitates the easy scalability of applications
    by automatically distributing the workload among servers, which facilitates the
    efficient use of resources and improves application performance as demand increases.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可伸缩性**: 该框架通过在服务器之间自动分配工作负载，简化了应用程序的可伸缩性，从而促进了资源的有效利用，并在需求增加时提高了应用程序的性能。'
- en: '**Fault recovery**: Orleans ensures fault handling and the recovery of actors
    after failures. It reduces the complexity of developing resilient systems and
    minimizes downtime, ensuring that actor activations can be restored on other servers
    in the event of a failure.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障恢复**: Orleans 确保了故障处理和演员在失败后的恢复。它简化了开发弹性系统，并最小化了停机时间，确保在发生故障时，演员激活可以在其他服务器上恢复。'
- en: '**State preservation**: Orleans allows for the storage of actor states in external
    repositories, which simplifies the development of fault-tolerant applications
    by ensuring data persistence and consistency across system components.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态保持**: Orleans 允许将演员状态存储在外部存储库中，通过确保系统组件之间的数据持久性和一致性，简化了容错应用程序的开发。'
- en: '**Digital Twins concept**: Orleans can be utilized to implement the digital
    twins concept, where virtual representations (twins) of physical or other complex
    digital assets are created. These digital twins can communicate and interact with
    each other in a distributed environment, facilitating complex simulations, real-time
    monitoring, and control systems, offering a powerful tool for building sophisticated,
    distributed IoT, and AI applications.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字孪生概念**: Orleans 可以用来实现数字孪生概念，即创建物理或其他复杂数字资产（孪生体）的虚拟表示。这些数字孪生可以在分布式环境中相互通信和交互，促进复杂模拟、实时监控和控制系统的实现，为构建复杂的分布式物联网和人工智能应用提供了一个强大的工具。'
- en: Through these features and concepts, Orleans facilitates the development of
    robust, scalable, and efficient distributed systems and microservices, making
    it easier for developers to create complex applications in C#.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些特性和概念，Orleans 促进了健壮、可伸缩和高效的分布式系统和微服务的发展，使得开发者更容易在 C# 中创建复杂的应用程序。
- en: Could you name a few libraries for computational science and data processing
    in C#?
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能列举一些 C# 中用于计算科学和数据处理的库吗？
- en: 'Hare a few libraries for computational science and data processing in C#:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些 C# 中用于计算科学和数据处理的库：
- en: '**Math.NET Numerics**: This library provides a wide range of mathematical and
    numerical methods, supporting complex computations and analyses in various scientific
    and engineering domains'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Math.NET Numerics**: 这个库提供了一系列的数学和数值方法，支持在各个科学和工程领域进行复杂的计算和分析。'
- en: '**Accord.NET**: This is a comprehensive framework for scientific computing
    that includes methods for ML, statistical analyses, and image processing, offering
    a robust toolset for data science and analytics applications in C#'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Accord.NET**: 这是一个全面的科学计算框架，包括机器学习、统计分析和方法，为 C# 中的数据科学和分析应用提供了一个强大的工具集。'
- en: What libraries and tools would you recommend for developing security and encryption
    systems in C#?
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能推荐一些用于开发 C# 中安全性和加密系统的库和工具吗？
- en: 'For developing security and encryption systems in C#, I would recommend the
    following libraries and tools:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 C# 中开发安全性和加密系统，我会推荐以下库和工具：
- en: '**System.Security.Cryptography**: A suite of classes in .NET that offer a broad
    spectrum of cryptographic services, including encryption, decryption, hashing,
    and digital signatures'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**System.Security.Cryptography**: .NET 中提供了一系列类，提供广泛的加密服务，包括加密、解密、哈希和数字签名。'
- en: '**Bouncy Castle**: A popular library for cryptography that supports a wide
    range of cryptographic algorithms and protocols'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bouncy Castle**: 一个流行的加密库，支持广泛的加密算法和协议。'
- en: '**PCLCrypto**: A portable library that facilitates cryptographic operations
    across various platforms, offering flexibility and code reuse'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PCLCrypto**: 一个便携式库，便于在各种平台上进行加密操作，提供灵活性和代码重用'
- en: '**Libsodium**: A modern, easy-to-use, and secure library for cryptography,
    offering various tools for secure communication and data encryption'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Libsodium**: 一个现代、易于使用且安全的加密库，提供各种安全通信和数据加密工具'
- en: Can you provide an overview of popular libraries for graphics processing and
    data visualization in C#?
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能概述一下C#中流行的图形处理和数据可视化库吗？
- en: 'Here are a few popular libraries for graphics processing and data visualization
    in C#:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些C#中流行的图形处理和数据可视化库：
- en: '**OxyPlot**: An open source framework for creating graphs and charts in .NET
    applications, offering a variety of visualization tools and options'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OxyPlot**: 一个用于在.NET应用程序中创建图形和图表的开源框架，提供各种可视化工具和选项'
- en: '**LiveCharts**: A lightweight library for data visualization that enables the
    creation of animated, interactive graphs and charts, enhancing data presentation
    and analysis'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LiveCharts**: 一个轻量级的可视化库，能够创建动画、交互式的图表和图形，增强数据展示和分析'
- en: '**ScottPlot**: A library designed for the quick and easy creation of scientific
    graphs in .NET, catering to data scientists and researchers'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ScottPlot**: 一个专为.NET中快速、轻松创建科学图形而设计的库，满足数据科学家和研究者的需求'
- en: '**Microsoft chart controls**: A set of controls from Microsoft for creating
    various types of charts and diagrams in .NET applications, offering a rich set
    of features and customization options'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft图表控件**: 来自Microsoft的一套控件，用于在.NET应用程序中创建各种类型的图表和图形，提供丰富的功能和定制选项'
- en: '**GGPlot**: A .NET port of the popular R ggplot2 library, offering data visualization
    using high-level syntax and facilitating the creation of complex, multi-faceted
    visualizations'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GGPlot**: R ggplot2库的.NET版本，提供使用高级语法的数据可视化，并促进创建复杂、多角度的视觉呈现'
- en: What other frameworks and libraries in C#, besides Xamarin/MAUI, would you recommend
    for mobile application development?
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 除了Xamarin/MAUI之外，你还会推荐哪些C#框架和库用于移动应用开发？
- en: 'For mobile application development in C#, besides Xamarin/MAUI, you might consider
    the following frameworks and libraries:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中进行移动应用开发时，除了Xamarin/MAUI，你还可以考虑以下框架和库：
- en: '**Uno platform**: A framework that allows for the development of mobile applications
    for various platforms (Windows, Android, and iOS) with a single codebase in C#,
    promoting code reuse and reducing development time'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Uno平台**: 一个允许使用C#单一代码库在多个平台（Windows、Android和iOS）上开发移动应用的框架，促进代码重用并减少开发时间'
- en: '**Flutter with Dart and C#**: Although Flutter primarily uses Dart as its main
    language, you can employ C# for writing business logic through the Flutter platform,
    utilizing plugins and packages for integration, thus leveraging C#’s capabilities
    in a Flutter project'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dart和C#与Flutter**: 虽然Flutter主要使用Dart作为其主语言，但你可以在Flutter平台上使用C#编写业务逻辑，通过插件和包进行集成，从而在Flutter项目中利用C#的能力'
- en: '**React Native with C#**: Similar to Flutter, you can integrate C# into React
    Native projects through various plugins and packages, allowing for the creation
    of mobile applications that take advantage of both technologies'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C#与React Native**: 与Flutter类似，你可以通过各种插件和包将C#集成到React Native项目中，从而创建能够利用这两种技术的移动应用'
- en: '**Avalonia**: While primarily being a framework for creating cross-platform
    desktop applications, Avalonia can also be utilized for mobile developments, offering
    a unified approach to multi-platform development'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Avalonia**: 虽然主要是用于创建跨平台桌面应用的框架，但Avalonia也可以用于移动开发，提供统一的多平台开发方法'
- en: As we conclude our expedition, we hope that you have garnered an enriched understanding
    of the indispensable C# libraries and frameworks. These utilities serve not just
    as tools but as trusted allies in the journey of crafting remarkable software
    solutions. Remember, the mastery of these frameworks isn’t an endpoint but a continual
    process of exploration and learning. We encourage you to experiment, innovate,
    and, above all, cultivate a deep-seated curiosity that drives you to unearth the
    boundless possibilities that lie within the dynamic ecosystem of C#. On this note,
    we bid you adieu with the confidence that you are well on your way to becoming
    a proficient C# developer, equipped with the knowledge and skills to navigate
    the complex yet rewarding world of software development.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们结束这次探险，我们希望您已经获得了对不可或缺的C#库和框架的丰富理解。这些实用工具不仅作为工具，而且在构建卓越软件解决方案的旅途中是值得信赖的盟友。请记住，对这些框架的掌握不是一个终点，而是一个持续探索和学习的过程。我们鼓励您进行实验、创新，最重要的是，培养一种深植于内心的好奇心，驱使您挖掘C#动态生态系统中的无限可能性。在此，我们带着信心向您告别，相信您正朝着成为一名熟练的C#开发者迈进，拥有了导航复杂但有益的软件开发世界的知识和技能。
- en: With the foundations of C# now firmly within your grasp, let us turn the page
    and delve into the realm of data management with Entity Framework.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经牢固掌握了C#的基础，让我们翻到新的一页，深入探讨使用实体框架的数据管理领域。
- en: Introduction to Entity Framework and data access
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体框架和数据访问简介
- en: In the contemporary era of software development, efficient data handling is
    a cornerstone of robust and scalable applications. As we embark on this chapter,
    we prepare to unravel the nuances of Entity Framework, a pivotal tool in the C#
    developer’s arsenal for seamless data access and manipulation. Recognized for
    its ability to bridge the gap between complex databases and object-oriented programming
    paradigms, Entity Framework stands as a beacon of innovation and efficiency. Let
    us commence this journey of understanding, where we explore the dynamic synergy
    between Entity Framework and adept data access strategies, paving the path for
    proficient and streamlined development.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今软件开发的时代，高效的数据处理是构建健壮和可扩展应用程序的基石。随着我们开始这一章节，我们准备揭示实体框架的微妙之处，这是C#开发者工具箱中一个关键的、用于无缝数据访问和操作的工具。因其能够弥合复杂数据库和面向对象编程范式之间的差距而闻名，实体框架成为创新和效率的灯塔。让我们开始这段理解之旅，探索实体框架和熟练的数据访问策略之间的动态协同作用，为熟练和高效的开发铺平道路。
- en: What is Entity Framework, and what role does it play in the .NET ecosystem?
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是实体框架，它在.NET生态系统中扮演什么角色？
- en: '**Entity Framework** (**EF**) is an **object-relational mapping** (**ORM**)
    framework that allows developers to interact with databases using .NET objects.
    It simplifies database interactions by automating many aspects of data management.
    Within the .NET ecosystem, EF provides a unified and cohesive approach to data
    manipulation and retrieval. It integrates seamlessly with LINQ, enabling developers
    to write database queries directly in C# code, enhancing the efficiency and maintainability
    of data-related operations.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**实体框架**（**EF**）是一个**对象关系映射**（**ORM**）框架，允许开发者使用.NET对象与数据库进行交互。它通过自动化数据管理的许多方面来简化数据库交互。在.NET生态系统中，EF提供了一个统一和一致的方法来处理和检索数据。它与LINQ无缝集成，使开发者能够直接在C#代码中编写数据库查询，从而提高数据相关操作的高效性和可维护性。'
- en: What are the main mapping strategies in EF, and what are their distinctive characteristics?
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EF中的主要映射策略有哪些，它们的独特特点是什么？
- en: 'In EF, there are three primary mapping strategies, each with its unique characteristics:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在EF中，有三种主要的映射策略，每种策略都有其独特的特点：
- en: '**Database first**: This approach involves generating models and context based
    on an existing database. It is convenient when you already have a database with
    a defined structure, facilitating a straightforward mapping between the database
    schema and the object model.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库优先**：这种方法涉及根据现有的数据库生成模型和上下文。当您已经有一个具有定义结构的数据库时，这种方法很方便，因为它可以方便地将数据库模式和对象模型之间的映射变得直接。'
- en: '**Model first**: In this case, the model is created first, from which the database
    schema is then generated. This allows developers to focus on defining a domain
    model initially, promoting a design-driven approach to database schema creation.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型优先**：在这种情况下，首先创建模型，然后根据模型生成数据库模式。这允许开发者首先关注定义领域模型，促进以设计为导向的数据库模式创建方法。'
- en: '**Code first**: Developers initially create classes representing the domain
    model objects, and then EF uses these classes to generate the database schema.
    This offers more control over the code and the database structure, fostering a
    code-centric development process where the database schema evolves with the codebase.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码优先**：开发者最初创建表示领域模型对象的类，然后EF使用这些类来生成数据库模式。这提供了对代码和数据库结构的更多控制，促进了一个以代码为中心的开发过程，其中数据库模式随着代码库的演变而演变。'
- en: Each of these strategies has its advantages and disadvantages, and the choice
    depends on the specific needs of the project and the requirements of the development
    process, allowing for flexibility and alignment with different project methodologies.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 每种策略都有其优点和缺点，选择取决于项目的具体需求和开发过程的要求，从而提供了灵活性和与不同项目方法的兼容性。
- en: How is transaction management implemented in EF, and can you provide an example?
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EF中事务管理是如何实现的？你能提供一个示例吗？
- en: 'Transaction management in EF can be handled using the methods provided by the
    `DbContext` class. Here is an example of a transactional operation in EF:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: EF中的事务管理可以使用`DbContext`类提供的方法来处理。以下是一个EF中事务操作的示例：
- en: '[PRE0]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding example, two addition operations are carried out within a single
    transaction. If any of them fails, the transaction is rolled back, reversing all
    changes.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，两个加法操作在一个事务内执行。如果其中任何一个失败，事务将被回滚，撤销所有更改。
- en: What features (such as “lazy loading”) are available in EF for performance optimization?
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EF中用于性能优化的功能有哪些（例如“延迟加载”）？
- en: 'EF offers several features for performance optimization, including the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: EF提供了几个性能优化的功能，包括以下内容：
- en: '**Lazy loading**: This mechanism automatically loads related data as they are
    requested. It can help reduce the database load by preventing the loading of large
    amounts of data simultaneously.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟加载**：此机制在需要时自动加载相关数据。它可以通过防止同时加载大量数据来帮助减少数据库负载。'
- en: '**Eager loading**: This approach involves loading the main data along with
    related data all at once. This can be implemented using the **Include** and **ThenInclude**
    methods.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**急切加载**：这种方法涉及一次性加载主数据和相关数据。这可以通过使用**Include**和**ThenInclude**方法来实现。'
- en: '**AsNo tracking**: This method is used to disable change tracking for queries,
    which can enhance performance for read-only operations.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无跟踪**：此方法用于禁用查询的更改跟踪，这可以提高只读操作的性能。'
- en: '**Stored procedures**: You can utilize stored procedures to optimize certain
    database operations, facilitating complex operations and enhancing security.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储过程**：您可以使用存储过程来优化某些数据库操作，简化复杂操作并提高安全性。'
- en: Can you discuss the advantages and disadvantages of using the code-first approach
    compared to the database-first approach in EF?
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能讨论一下与数据库优先方法相比，在EF中使用代码优先方法的优缺点吗？
- en: 'Here are some pros and cons of the code-first and database-first approaches:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码优先和数据库优先方法的优缺点：
- en: '**Code-first approach**:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码优先方法**：'
- en: 'Advantages:'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：'
- en: Greater flexibility and control over the code
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对代码有更大的灵活性和控制力
- en: Easier to make changes to the model and migrate these to the database
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易更改模型并将这些更改迁移到数据库
- en: Promotes a code-first development practice where the focus is initially on business
    logic
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进以代码优先的开发实践，最初关注业务逻辑
- en: 'Disadvantages:'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：'
- en: It can be challenging to use with large, existing databases
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与大型现有数据库一起使用可能具有挑战性
- en: There might be a need to manually manage complex migrations
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能需要手动管理复杂的迁移
- en: '**Database-first approach**:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库优先方法**：'
- en: 'Advantages:'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：'
- en: Ideally suited for projects with existing databases
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想适用于具有现有数据库的项目
- en: It can be a quicker way to start working with large databases
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可能是开始使用大型数据库的更快方式
- en: 'Disadvantages:'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：'
- en: Less control over the automatically generated code
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对自动生成的代码的控制较少
- en: Changes in the database may require additional synchronization code or new code
    generation
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库中的更改可能需要额外的同步代码或新的代码生成
- en: Both approaches have their place in development, and the choice between them
    often depends on the specific circumstances of the project; this allows for tailored
    strategies that align with project goals and existing infrastructure.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法在开发中都有其位置，它们之间的选择通常取决于项目的具体环境；这允许制定与项目目标和现有基础设施相一致的自定义策略。
- en: How does EF handle concurrent data access situations?
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EF如何处理并发数据访问情况？
- en: In EF, concurrent data access situations can be managed using optimistic locking.
    This is typically achieved through the usage of the `[ConcurrencyCheck]` or `[Timestamp]`
    attributes in the models. When a concurrency conflict arises (i.e., two users
    trying to update the same record simultaneously), EF throws a `DbUpdateConcurrencyException`,
    which can be caught and handled appropriately, perhaps by prompting the user to
    review the changes and try again.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在EF中，可以使用乐观锁定来管理并发数据访问情况。这通常通过在模型中使用`[ConcurrencyCheck]`或`[Timestamp]`属性来实现。当出现并发冲突（即两个用户同时尝试更新同一记录）时，EF会抛出`DbUpdateConcurrencyException`，这可以被捕获并适当处理，例如提示用户检查更改并重试。
- en: Can you explain how LINQ is utilized in EF to formulate and execute SQL queries?
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能解释LINQ在EF中是如何用来构建和执行SQL查询的吗？
- en: In EF, LINQ is utilized to formulate and execute SQL queries directly from C#
    code. This allows developers to construct database queries in the form of C# expressions,
    which are then automatically translated by EF into corresponding SQL queries.
    By using LINQ, various types of data operations, including selection, insertion,
    updating, and deletion, can be performed using the convenient syntax of object-oriented
    programming.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在EF中，LINQ被用来直接从C#代码中构建和执行SQL查询。这允许开发者以C#表达式的形式构建数据库查询，然后由EF自动将其转换为相应的SQL查询。通过使用LINQ，可以使用面向对象的编程的便捷语法执行各种类型的数据操作，包括选择、插入、更新和删除。
- en: What tools and methodologies are recommended for conducting database migrations
    in EF?
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐用于在EF中执行数据库迁移的工具和方法是什么？
- en: 'For conducting database migrations in EF, the following tools and methodologies
    are recommended:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在EF中执行数据库迁移，以下工具和方法被推荐：
- en: '**EF migrations**: These are a set of tools that allow for the automatic generation
    of migration scripts based on changes in the models. Commands such as **''Add-Migration''**,
    **''Update-Database''**, and others can be utilized to manage migrations.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EF迁移**：这是一组工具，允许根据模型中的更改自动生成迁移脚本。可以使用诸如`''Add-Migration''`、`''Update-Database''`等命令来管理迁移。'
- en: '**SQL scripts**: You can manually create and apply SQL scripts for complex
    migrations or when greater control over the migration process is required.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL脚本**：您可以手动创建和应用SQL脚本以进行复杂的迁移或当需要更多控制迁移过程时。'
- en: '**Seed data**: This is used to populate the database with certain data during
    migration, facilitating the initialization of essential data in the database.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**种子数据**：在迁移过程中，使用这些数据填充数据库，有助于初始化数据库中的基本数据。'
- en: Can you describe some commonly used repository patterns when working with EF?
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能描述一些在EF中工作时常用的存储库模式吗？
- en: 'The repository pattern is a design pattern that isolates data access logic
    in a separate class, facilitating the easier testing and maintenance of the code.
    Here are a few commonly used repository patterns when working with EF:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库模式是一种设计模式，它将数据访问逻辑隔离在单独的类中，从而便于代码的测试和维护。以下是当使用EF时一些常用的存储库模式：
- en: '**Generic repository**: This pattern creates a generic repository class that
    can be used for any entity type, reducing code duplication'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**泛型存储库**：这种模式创建了一个泛型存储库类，可用于任何实体类型，从而减少了代码重复。'
- en: '**Repository and unit of work**: This pattern combines the repository pattern
    with the “unit of work” pattern, allowing for the grouping of several operations
    in a single transaction, simplifying transaction management'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库和工作单元模式**：这种模式将存储库模式与“工作单元”模式相结合，允许在单个事务中组合多个操作，从而简化事务管理。'
- en: What best practices would you recommend for the effective management of connections
    and sessions in EF to achieve high performance and scalability?
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于EF中连接和会话的有效管理以实现高性能和可伸缩性，您推荐哪些最佳实践？
- en: 'For the effective management of connections and sessions in EF and to achieve
    high performance and scalability, the following best practices are recommended:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在EF中有效管理连接和会话并实现高性能和可伸缩性，以下最佳实践被推荐：
- en: Utilize short lifecycles for connections and contexts to minimize the risk of
    blockages and conflicts
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用短的生命周期来管理连接和上下文，以最小化阻塞和冲突的风险。
- en: Employ connection pooling to reduce the overhead of opening new connections
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用连接池来减少打开新连接的开销。
- en: Optimize queries using techniques, such as lazy and eager loading, cautiously
    to avoid the N+1 query problem or loading too much data at once
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谨慎使用诸如延迟加载和预加载等技术来优化查询，以避免N+1查询问题或一次性加载过多数据。
- en: Use asynchronous methods for database queries to enhance performance and scalability
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用异步方法进行数据库查询以增强性能和可扩展性
- en: Implement caching strategies to reduce the number of database queries and increase
    performance
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施缓存策略以减少数据库查询次数并提高性能
- en: Conduct the profiling and optimization of SQL queries to enhance performance
    and avoid bottlenecks
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对SQL查询进行性能分析和优化，以提升性能并避免瓶颈
- en: Utilizing these practices can help create more efficient and scalable applications
    based on EF.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些实践可以帮助创建基于EF的更高效和可扩展的应用程序。
- en: What is the “N+1 query problem” in EF, and what methods do you use to prevent
    performance issues arising from it?
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在EF中，“N+1查询问题”是什么，你使用哪些方法来防止由此产生的性能问题？
- en: The **N+1 query problem** in EF occurs when the code executes one query to retrieve
    the main entities and then an additional query for each entity to fetch related
    data, leading to *N* additional queries for *N* entities, which can severely degrade
    performance. Essentially, it means making one too many database calls, which can
    be highly inefficient and slow down the application.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: EF中的“N+1查询问题”发生在代码执行一个查询以检索主实体，然后对每个实体执行额外的查询以获取相关数据时，导致对*N*个实体的*N*个额外查询，这可能会严重降低性能。本质上，这意味着多执行了一次数据库调用，这可能会非常低效并减慢应用程序的速度。
- en: 'To prevent the **N+1 query problem** in EF, I employ the following strategies:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止EF中的**N+1查询问题**，我采用以下策略：
- en: '**Eager loading**: Use the **.Include** and **.ThenInclude** methods to load
    related data in one query'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预加载**：使用**.Include**和**.ThenInclude**方法在一个查询中加载相关数据'
- en: '**Explicit loading**: Load related data separately using the **.****Load**
    method'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显式加载**：使用**.Load**方法单独加载相关数据'
- en: '**Selective loading**: Only load necessary fields through projection (using
    the **.****Select** method)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择性加载**：通过投影（使用**.Select**方法）仅加载必要的字段'
- en: '**Utilizing caching**: To reduce the number of queries to the database'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用缓存**：减少对数据库的查询次数'
- en: '**Query optimization**: The careful analysis and optimization of queries to
    avoid unnecessary operations'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询优化**：仔细分析和优化查询以避免不必要的操作'
- en: Can you discuss strategies for optimizing LINQ queries in EF for the efficient
    handling of large volumes of data?
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能讨论在EF中优化LINQ查询以高效处理大量数据的策略吗？
- en: 'Here are several strategies for optimizing LINQ queries in EF when dealing
    with large volumes of data:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大量数据时，以下是优化EF中LINQ查询的几个策略：
- en: '**Projection**: Using the **.Select** method to select only necessary fields
    instead of loading the entire object'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投影**：使用**.Select**方法仅选择必要的字段，而不是加载整个对象'
- en: '**Pagination**: Using the **.Skip** and **.Take** methods to limit the number
    of returned rows'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分页**：使用**.Skip**和**.Take**方法限制返回的行数'
- en: '**Query compilation**: Using compiled queries to enhance the performance of
    repetitive queries'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询编译**：使用编译查询来提高重复查询的性能'
- en: '**Asynchronous operations**: Using asynchronous methods to enhance I/O performance'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步操作**：使用异步方法来提高I/O性能'
- en: '**Batching**: Grouping several operations into a single transaction to reduce
    the costs associated with individual transactions'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批处理**：将多个操作组合成一个事务以减少与单个事务相关的成本'
- en: How do you configure and adapt the Identity framework in projects using EF for
    managing user access and authentication?
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何配置和调整使用EF的项目中的Identity框架以管理用户访问和认证？
- en: 'When configuring and adapting the Identity framework in projects using EF,
    I typically undertake the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置和调整使用EF的项目中的Identity框架时，我通常采取以下步骤：
- en: '**Identity configuration**: Configuring Identity settings through the **AddIdentity**
    and **ConfigureServices** methods in the **Startup.cs** file'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份配置**：通过**Startup.cs**文件中的**AddIdentity**和**ConfigureServices**方法配置Identity设置'
- en: '**Extending user and role classes**: Creating custom user and role classes
    by inheriting them from the base Identity classes'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展用户和角色类**：通过从基础Identity类继承来创建自定义用户和角色类'
- en: '**Configuring security policies**: Defining and setting up security policies
    for role-based or permission-based access control'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置安全策略**：定义和设置基于角色或基于权限的访问控制的安全策略'
- en: '**Customizing the authentication process**: Adjusting authentication parameters,
    such as utilizing external identity providers'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义认证过程**：调整认证参数，例如利用外部身份提供者'
- en: '**Database migration**: Executing migrations to create Identity tables in the
    database'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库迁移**：执行迁移以在数据库中创建Identity表'
- en: Can you share any complex scenarios you have encountered during database migration
    in EF and how you resolved them?
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你在EF数据库迁移过程中遇到过任何复杂场景吗？你是如何解决的？
- en: 'Yes, here are a few complex situations I encountered during database migration
    in EF, along with the ways I addressed them:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，以下是我遇到的一些EF数据库迁移中的复杂情况以及我解决它们的方法：
- en: '**Schema conflicts**: These can occur when changing the structure of models.
    I resolved this by carefully planning the changes and utilizing methods, such
    as **HasColumnOrder**, to specify the column order.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构冲突**：当更改模型结构时可能会发生。我通过仔细规划更改并利用如**HasColumnOrder**等方法来指定列顺序来解决。'
- en: '**Dependency issues**: These can arise when removing or modifying elements
    that are referenced by other parts of the schema. I tackled this by updating dependencies
    before executing the migration.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖问题**：当移除或修改其他部分架构中引用的元素时，可能会出现这些问题。我通过在执行迁移之前更新依赖关系来解决。'
- en: '**Performance issues**: During the migration of large volumes of data, a decrease
    in performance can occur. I resolved this by optimizing queries and using batching
    to reduce the number of transactions.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能问题**：在迁移大量数据时，可能会出现性能下降。我通过优化查询和使用批处理来减少事务数量来解决此问题。'
- en: Can you provide examples of integrating EF with other technologies or frameworks
    to enhance its functionality?
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能提供一些将EF与其他技术或框架集成以增强其功能的示例吗？
- en: 'Yes, here are a few examples of integrating EF with other technologies and
    frameworks:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，以下是将EF与其他技术和框架集成的几个示例：
- en: '**ASP.NET Core Identity**: To implement user and role management functionality'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core Identity**：为了实现用户和角色管理功能'
- en: '**Dapper**: To optimize certain queries using a more low-level ORM'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dapper**：为了使用更底层的ORM优化某些查询'
- en: '**Hangfire**: To integrate with a library for scheduling tasks and background
    operations'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hangfire**：为了集成一个用于任务调度和后台操作的库'
- en: '**GraphQL**: To create an API that allows clients to request only the necessary
    data, integrated with EF for executing database queries'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraphQL**：为了创建一个允许客户端请求必要数据的API，并与EF集成以执行数据库查询'
- en: '**Redis**: To integrate a caching system for improving performance and scalability'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redis**：为了集成一个缓存系统以提升性能和可扩展性'
- en: Using these integrations can help expand the capabilities of EF and create more
    powerful and flexible applications.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些集成可以帮助扩展EF的功能，并创建更强大和灵活的应用程序。
- en: What is your approach to unit testing and integration testing in an environment
    where EF is extensively used?
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在EF广泛使用的环境中，你的单元测试和集成测试方法是什么？
- en: 'In an environment where EF is extensively utilized, my approach to testing
    includes the following strategies:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在EF广泛使用的环境中，我的测试方法包括以下策略：
- en: '**Unit testing**:'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：'
- en: 'Mocking: I use mocking to simulate database behavior, utilizing libraries,
    such as Moq or NSubstitute'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟：我使用模拟来模拟数据库行为，利用如Moq或NSubstitute等库
- en: 'In-memory database: I employ an in-memory database to create an isolated testing
    environment'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存数据库：我使用内存数据库来创建一个隔离的测试环境
- en: '**Integration testing**:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：'
- en: 'Test database: I establish a separate test database to conduct integration
    tests'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试数据库：我建立了一个单独的测试数据库来执行集成测试
- en: 'Data seeding: I use data seeding techniques to initialize the testing environment
    before each test'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据初始化：我使用数据初始化技术在每个测试之前初始化测试环境
- en: '**Automated testing**: I automate the testing process using frameworks, such
    as xUnit or NUnit, to create and execute test suites'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：我使用框架，如xUnit或NUnit，来自动化测试过程，创建和执行测试套件'
- en: What design patterns and architectural solutions would you recommend for building
    high-performance and scalable systems based on EF?
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你会推荐哪些设计模式和架构解决方案来构建基于EF的高性能和可扩展系统？
- en: 'For building high-performance and scalable systems based on EF, I recommend
    the following patterns and solutions:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于EF构建高性能和可扩展的系统，我推荐以下模式和解决方案：
- en: '**Repository pattern**: To abstract data access logic and facilitate data source
    replacement'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓储模式**：为了抽象数据访问逻辑并便于数据源替换'
- en: '**Unit of Work pattern**: To group several operations into a single transaction'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作单元模式**：为了将多个操作组合成一个单一的事务'
- en: '**Command query responsibility segregation** (**CQRS**): To separate read and
    write logic, enhancing performance and scalability'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令查询责任分离**（**CQRS**）：为了分离读取和写入逻辑，提高性能和可扩展性'
- en: '**Domain-driven design** (**DDD**): To concentrate on business logic and ensure
    design flexibility'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域驱动设计（Domain-driven design**）（**DDD**）: 专注于业务逻辑并确保设计灵活性'
- en: '**Microservices architecture**: To construct scalable and independent modules
    that can be deployed separately'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务架构（Microservices architecture）**: 构建可扩展且独立的模块，可以单独部署'
- en: Can you discuss your experience in optimizing database performance in the context
    of using EF?
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能否讨论一下在使用EF的背景下，你在优化数据库性能方面的经验？
- en: 'Yes, here are a few strategies I have employed to optimize database performance
    in the context of using EF:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，以下是我使用EF优化数据库性能所采用的一些策略：
- en: '**Lazy loading**: I attempted to avoid the N+1 query problem through the mindful
    use of lazy loading and eager loading techniques'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟加载（Lazy loading）**: 我通过谨慎使用延迟加载和预加载技术来尝试避免N+1查询问题'
- en: '**Indexing**: I optimized queries by properly indexing the database tables'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引（Indexing）**: 我通过合理索引数据库表来优化查询'
- en: '**Batch operations**: I utilized batch operations to reduce the number of individual
    queries to the database'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批量操作（Batch operations）**: 我利用批量操作来减少对数据库的单个查询次数'
- en: '**Caching**: I implemented caching to decrease the load on the database by
    storing frequently queried data in the memory'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存（Caching）**: 我实现了缓存，通过在内存中存储频繁查询的数据来减少数据库的负载'
- en: '**Asynchronous programming**: I adopted asynchronous programming to enhance
    performance in scenarios with high I/O operations'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步编程（Asynchronous programming）**: 我采用了异步编程来提高高I/O操作场景下的性能'
- en: How do you integrate DDD approaches into EF, and what key decisions have you
    had to make?
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你是如何将DDD方法集成到EF中，以及你不得不做出的关键决策？
- en: 'When integrating DDD approaches into EF, I have utilized the following strategies
    and made the subsequent decisions:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 当将DDD方法集成到EF中时，我采用了以下策略并做出了以下决策：
- en: '**Rich domain model**: I developed a rich domain model that encapsulates business
    logic and rules'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丰富的领域模型（Rich domain model）**: 我开发了一个封装业务逻辑和规则的丰富领域模型'
- en: '**Aggregates**: I used aggregates to group related objects and ensure data
    consistency'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合（Aggregates）**: 我使用聚合来分组相关对象并确保数据一致性'
- en: '**Repositories**: I implemented repositories to provide an abstraction layer
    for data access'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库（Repositories）**: 我实现了仓库来提供数据访问的抽象层'
- en: '**Domain events**: I utilized domain events to document significant changes
    in the domain, facilitating the development of decoupled systems'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域事件（Domain events）**: 我利用领域事件来记录领域中的重大变化，便于开发解耦系统'
- en: '**Bounded contexts**: I defined bounded contexts to isolate different parts
    of the business domain and ensure the clear separation of responsibilities'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边界上下文（Bounded contexts）**: 我定义了边界上下文来隔离业务领域的不同部分，并确保职责的清晰分离'
- en: Can you elaborate on the use of AOP for implementing interceptors and filters
    in projects utilizing EF?
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能否详细说明在利用EF的项目中如何使用AOP来实现拦截器和过滤器？
- en: '**Aspect-oriented programming** (**AOP**) serves as a powerful tool for implementing
    interceptors and filters in projects utilizing EF. Here are several ways I utilize
    AOP:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向方面编程（Aspect-oriented programming**）（**AOP**）是用于在利用EF的项目中实现拦截器和过滤器的强大工具。以下是我利用AOP的几种方式：'
- en: '**Logging**: Implementing the automatic logging of operations by using aspects
    to intercept methods and record information in logs'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录（Logging）**: 通过使用方面来拦截方法并记录日志中的信息来实现操作的自动日志记录'
- en: '**Transaction management**: Managing transactions through aspects, which allow
    for the centralization of transaction management logic'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事务管理（Transaction management）**: 通过方面管理事务，允许集中管理事务管理逻辑'
- en: '**Caching**: Implementing aspects for the automatic caching of frequently invoked
    method results'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存（Caching）**: 实现自动缓存频繁调用的方法结果'
- en: '**Error handling**: Centralizing error handling through aspects, which helps
    to avoid duplicating error handling code'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理（Error handling）**: 通过方面集中处理错误，有助于避免重复错误处理代码'
- en: '**Authorization**: Implementing aspects to verify access to methods based on
    authorization rules'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权（Authorization）**: 通过实现方面来验证基于授权规则的方法访问'
- en: Utilizing AOP enables the creation of clean and flexible code, simplifying the
    implementation of interceptors and filters.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 利用AOP可以创建干净且灵活的代码，简化拦截器和过滤器的实现。
- en: Could you mention some of the lesser-known but powerful features of EF and how
    they can be utilized more effectively?
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能否提及一些EF中不太为人所知但功能强大的特性以及如何更有效地利用它们？
- en: 'Certainly, several lesser-known but powerful features of EF include the following:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，EF中一些不太为人所知但功能强大的特性包括以下内容：
- en: '**Shadow properties**: These can be used to store additional information that
    is not part of the main model'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阴影属性**：这些可以用来存储不属于主模型的部分额外信息'
- en: '**Global query filters**: These allow you to automatically apply filters to
    all queries, which can be useful for functionalities such as soft deletion'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局查询过滤器**：这些允许您自动将过滤器应用于所有查询，这对于如软删除等功能可能很有用'
- en: '**Alternate keys**: These can be used to specify additional unique keys besides
    the primary keys'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备选键**：这些可以用来指定除了主键之外的额外唯一键'
- en: '**Custom conventions**: This feature allows you to customize the ways EF Core
    interprets models'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义约定**：此功能允许您自定义 EF Core 解释模型的方式'
- en: '**Interceptors**: These can be utilized to intercept and modify SQL queries
    before execution'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拦截器**：这些可以用来在执行前拦截和修改 SQL 查询'
- en: Do you have experience in adapting EF for interaction with unconventional databases?
    Can you provide a few examples?
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你有将 EF 适应于与非常规数据库交互的经验吗？你能提供几个例子吗？
- en: 'I have experience adapting EF to work with unconventional databases. Here are
    a few examples:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我有将 EF 适应于与非常规数据库工作的经验。以下是一些例子：
- en: Using EF with in-memory databases for testing
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 EF 与内存数据库进行测试
- en: Adapting EF to work with document-oriented databases, such as **MongoDB**, by
    using specialized providers
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用专用提供程序将 EF 适应于与文档导向数据库（如 **MongoDB**）工作
- en: Implementing custom providers to integrate with unconventional database management
    systems (DBMs)
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现自定义提供程序以与非常规数据库管理系统（DBMS）集成
- en: Have you encountered unforeseen issues while working with EF, and how did you
    resolve them?
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你在用 EF 工作时遇到过意外问题，你是如何解决的？
- en: 'Yes, here are a few unforeseen issues I encountered and the ways I resolved
    them:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，以下是我遇到的一些意外问题和解决方法：
- en: '**Performance issues due to the incorrect use of lazy loading**: I resolved
    this by assessing and optimizing LINQ queries'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**由于错误使用延迟加载导致的性能问题**：我通过评估和优化 LINQ 查询来解决这个问题'
- en: '**Concurrent access conflicts**: I addressed this by implementing optimistic
    concurrency control'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发访问冲突**：我通过实现乐观并发控制来解决这个问题'
- en: '**Database migration issues**: I handled this by manually managing migrations
    and adjusting migration scripts'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库迁移问题**：我通过手动管理迁移和调整迁移脚本来处理这个问题'
- en: Have you integrated EF with alternative data management approaches, for instance,
    with NoSQL databases? How was this implemented?
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你将 EF 与替代数据管理方法（例如，NoSQL 数据库）集成过吗？是如何实现的？
- en: 'Yes, I have experience in integrating EF with alternative data management approaches.
    Here is how it was implemented:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我有将 EF 与替代数据管理方法集成的经验。以下是实现方式：
- en: Utilizing a hybrid architecture where some parts of the application used relational
    databases (through EF) and others used NoSQL databases
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用混合架构，其中应用程序的一些部分使用关系数据库（通过 EF）而其他部分使用 NoSQL 数据库
- en: Employing the repository pattern to abstract data sources and provide a uniform
    interface for interacting with different types of databases
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用存储库模式来抽象数据源，并为与不同类型的数据库交互提供统一的接口
- en: Creating custom data providers to integrate EF with NoSQL databases
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义数据提供程序以将 EF 与 NoSQL 数据库集成
- en: Have you had experience optimizing EF for use in high-load or real-time systems?
    What strategies and tools were applied?
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你在优化 EF 以用于高负载或实时系统时有过经验吗？应用了哪些策略和工具？
- en: 'Yes, I have experience optimizing EF for high-load systems. Here are several
    strategies and tools that I have utilized:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我有将 EF 优化用于高负载系统的经验。以下是我使用的一些策略和工具：
- en: '**Asynchronous programming**: To enhance efficiency and scalability (the asynchronous
    methods of EF were employed)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步编程**：为了提高效率和可伸缩性（使用了 EF 的异步方法）'
- en: '**Caching**: To reduce the load on the database by caching a portion of the
    queries'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：通过缓存部分查询来减少对数据库的负载'
- en: '**LINQ query optimization**: To increase performance through the analysis and
    optimization of LINQ queries'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LINQ 查询优化**：通过分析和优化 LINQ 查询来提高性能'
- en: '**Utilization of indexes**: To improve query performance through the appropriate
    creation and utilization of indexes in the database'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引利用**：通过在数据库中适当创建和使用索引来提高查询性能'
- en: Can you compare your experience working with EF in new (“greenfield”) projects
    to working with existing (“brownfield”) projects? What challenges did you encounter,
    and what strategies were applied?
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能比较一下你在新（“绿地”）项目中使用 EF 与在现有（“棕地”）项目中使用 EF 的经验吗？你遇到了哪些挑战，采取了哪些策略？
- en: In **greenfield** projects, there’s the advantage of starting with a clean slate,
    allowing developers to design and implement a database structure and data models
    that adhere to current best practices and design patterns, aiming for scalability,
    efficiency, and performance from the beginning. Conversely, **brownfield** projects
    involve working with pre-existing databases, where developers are tasked with
    modifying or enhancing legacy systems, which may introduce constraints due to
    outdated structures or previously implemented, less optimal design choices.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在**绿色田野**项目中，有从一张白纸开始的优势，允许开发者设计和实现符合当前最佳实践和设计模式的数据库结构和数据模型，从一开始就追求可扩展性、效率和性能。相反，**棕色田野**项目涉及与现有的数据库一起工作，开发者负责修改或增强遗留系统，这可能会由于过时的结构或之前实施的、不那么优化的设计选择而引入限制。
- en: In **greenfield** projects, the challenge is to create an efficient and scalable
    system, which is met by applying best practices to database design and architecture
    from the start. Meanwhile, in **brownfield** projects, the challenge involves
    working within the constraints of existing systems. The strategies here include
    careful refactoring and incremental improvements to integrate modern solutions
    without disrupting legacy operations.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在**绿色田野**项目中，挑战是创建一个高效且可扩展的系统，这通过从一开始就应用最佳实践于数据库设计和架构来实现。同时，在**棕色田野**项目中，挑战在于在现有系统的限制内工作。这里的策略包括谨慎的重构和渐进式改进，以在不干扰遗留操作的情况下集成现代解决方案。
- en: Can you provide examples of the successful integration of EF into technologies
    or frameworks that are not typically associated with the .NET ecosystem?
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能提供EF成功集成到通常与.NET生态系统不相关的技术或框架的例子吗？
- en: Certainly, one example would be integrating EF into frontend frameworks, such
    as **Angular** or **React**, to create comprehensive web applications. Another
    example might be utilizing EF in conjunction with **NoSQL** databases, such as
    MongoDB, to implement hybrid data management solutions. This involves creating
    custom data providers and using the repository pattern to abstract and unify interaction
    with various types of databases.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一个例子就是将EF集成到前端框架中，例如**Angular**或**React**，以创建全面的Web应用程序。另一个例子可能是利用EF与**NoSQL**数据库（如MongoDB）结合，以实现混合数据管理解决方案。这涉及到创建自定义数据提供者和使用存储库模式来抽象和统一与各种类型数据库的交互。
- en: As we draw the curtain on this enlightening section, we hope that you now hold
    a foundational grasp of EF and its pivotal role in data access. The journey of
    learning is perennial, and we encourage you to delve deeper, exploring the multi-faceted
    avenues that EF opens up in the realm of data management and application development.
    Remember, a skilled craftsman constantly hones his tools, and in the world of
    software development, knowledge is your most potent tool. We part with the anticipation
    that you will forge ahead, leveraging the potent capabilities of EF to craft applications
    that are not only robust but also finely attuned to the ever-evolving demands
    of the digital landscape.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们结束这个启发性的章节，我们希望你现在已经掌握了EF及其在数据访问中的关键作用。学习的旅程是永无止境的，我们鼓励你深入探索，研究EF在数据管理和应用开发领域开启的多方面途径。记住，熟练的工匠会不断磨练他的工具，而在软件开发的世界里，知识是你的最强大工具。我们满怀期待地与你告别，希望你能利用EF的强大功能，打造出不仅稳健而且能够适应数字景观不断变化需求的优秀应用。
- en: In transitioning from the structured world of databases, we now shift our focus
    to the dynamic realm of web development.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在从数据库的有序世界过渡之后，我们现在将焦点转向动态的Web开发领域。
- en: ASP.NET Core for web development
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core用于Web开发
- en: In the vibrant sphere of web development, ASP.NET Core emerges as a front-runner,
    encapsulating a wealth of features that facilitate the creation of dynamic, scalable,
    and modern web applications. As we step into this section, we aim to equip you
    with the foundational knowledge and skills to harness the full potential of this
    powerful framework. With its roots deeply embedded in the Microsoft ecosystem,
    ASP.NET Core offers a seamless amalgamation of performance, security, and flexibility.
    Join us as we embark on a journey through the intricate corridors of ASP.NET Core,
    fostering a deeper comprehension and appreciation for the boundless opportunities
    it presents in the realm of web development.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在充满活力的Web开发领域，ASP.NET Core脱颖而出，包含丰富的功能，这些功能有助于创建动态、可扩展和现代的Web应用程序。当我们进入这一部分时，我们的目标是为您提供利用这个强大框架全部潜力的基础知识和技能。ASP.NET
    Core的根源深深植根于微软生态系统，它提供了一个无缝的结合，包括性能、安全性和灵活性。加入我们，我们将开始一段旅程，穿越ASP.NET Core错综复杂的走廊，培养对它在Web开发领域提供的无限机会的更深入的理解和欣赏。
- en: Why should one consider using ASP.NET Core for web application development compared
    to other popular frameworks?
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与其他流行的框架相比，为什么应该考虑使用ASP.NET Core进行Web应用程序开发？
- en: 'ASP.NET Core is a compelling choice for web application development for various
    reasons:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core是Web应用程序开发的吸引人选择，原因有很多：
- en: '**High performance**: ASP.NET Core is well-known for its performance. The framework
    is lightweight and has been benchmarked to be faster than other popular frameworks
    in many scenarios. Performance optimizations are provided out of the box and can
    be further enhanced by the developer.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能**：ASP.NET Core因其性能而闻名。该框架轻量级，并且在许多场景下已被基准测试为比其他流行的框架更快。性能优化是开箱即用的，并且可以由开发者进一步优化。'
- en: '**Cross-platform capability**: It is a cross-platform framework, meaning it
    can run on various operating systems such as Windows, Linux, and macOS. This flexibility
    ensures that applications can reach a wider audience and can be hosted on different
    platforms, providing more hosting options.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台能力**：它是一个跨平台框架，这意味着它可以在各种操作系统上运行，例如Windows、Linux和macOS。这种灵活性确保了应用程序可以触及更广泛的受众，并且可以在不同的平台上托管，提供更多的托管选项。'
- en: '**Modularity**: The modular architecture of ASP.NET Core allows developers
    to include only the necessary components in their applications. This not only
    makes the application lighter but also reduces its surface area for attacks, potentially
    increasing security.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：ASP.NET Core的模块化架构允许开发者仅将必要的组件包含在他们的应用程序中。这不仅使应用程序更轻量，还减少了其攻击面，从而可能提高安全性。'
- en: '**Security**: ASP.NET Core comes with built-in features to protect against
    many common web vulnerabilities, such as CSRF, XSS, and SQL injection. Microsoft
    regularly updates the framework to address new security threats.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：ASP.NET Core内置了防止许多常见Web漏洞的功能，例如CSRF、XSS和SQL注入。微软定期更新框架以应对新的安全威胁。'
- en: '**Community and support**: There is a robust and active community around ASP.NET
    Core. Microsoft provides long-term support for the framework, ensuring that applications
    can be maintained with up-to-date tools and security features. Additionally, the
    vast community contributes to the availability of resources, third-party libraries,
    and troubleshooting support.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和支持**：ASP.NET Core周围有一个强大而活跃的社区。微软为该框架提供长期支持，确保应用程序可以使用最新的工具和安全功能进行维护。此外，庞大的社区为资源的可用性、第三方库和故障排除支持做出了贡献。'
- en: Compared to other frameworks, ASP.NET Core stands out for its enterprise readiness,
    scalability, and the backing of Microsoft, which can be crucial for businesses
    requiring reliable and long-term support for their applications.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架相比，ASP.NET Core因其企业就绪性、可扩展性和微软的支持而脱颖而出，这对于需要对其应用程序进行可靠和长期支持的企业来说可能至关重要。
- en: Can you explain the concept of Middleware in ASP.NET Core and its implementation?
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能解释一下ASP.NET Core中中间件的概念及其实现吗？
- en: '**Middleware** in ASP.NET Core is a piece of software that’s assembled into
    an application pipeline to handle requests and responses. For each component,
    it provides the following actions:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**中间件**在ASP.NET Core中是一段软件，它被组装到应用程序管道中以处理请求和响应。对于每个组件，它提供以下操作：'
- en: Chooses whether to pass the request on to the next component in the pipeline
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择是否将请求传递给管道中的下一个组件
- en: Can perform work before and after the next component in the pipeline
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在管道中的下一个组件之前和之后执行工作
- en: The concept is central to ASP.NET Core applications, which are built from multiple
    middleware components. This allows for building a pipeline for requests and responses,
    where each middleware instance can perform a specific task, such as authentication,
    error handling, logging, or serving static files.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念是 ASP.NET Core 应用程序的核心，这些应用程序由多个中间件组件构建。这允许构建请求和响应的管道，其中每个中间件实例可以执行特定任务，例如身份验证、错误处理、日志记录或提供静态文件。
- en: When a request is made to an ASP.NET Core application, it travels through the
    configured middleware pipeline. Each middleware aspect has the opportunity to
    process the request and decide if it should pass it to the next aspect in the
    pipeline or not. This allows for a highly configurable request handling process,
    where you can add, remove, or change the order of middleware components to suit
    your application’s needs.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 当向 ASP.NET Core 应用程序发出请求时，它将通过配置的中间件管道。每个中间件方面都有机会处理请求并决定是否将其传递到管道中的下一个方面。这允许高度可配置的请求处理过程，您可以添加、删除或更改中间件组件的顺序以满足应用程序的需求。
- en: 'Implementation-wise, Middleware components are C# classes that implement the
    `IMiddleware` interface, although, in practice, they’re often set up as simple
    classes with a specific convention-based method signature:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现上，中间件组件是实现了 `IMiddleware` 接口的 C# 类，尽管在实践中，它们通常被设置为具有特定约定方法签名的简单类：
- en: '[PRE1]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To use middleware, you add it to your application’s request pipeline configuration
    in the `Configure` method of the `Startup` class, like so:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用中间件，您需要在 `Startup` 类的 `Configure` 方法中将它添加到应用程序的请求管道配置中，如下所示：
- en: '[PRE2]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In .NET 6 and onwards, including .NET 7, the typical `Startup.cs` class was
    replaced with a new minimal hosting model that simplifies the bootstrapping and
    configuration process of an ASP.NET Core application. This model makes use of
    the `Program.cs` file, which is used to set up the app’s services and middleware
    in a more streamlined and top-level statement syntax.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 从 .NET 6 开始，包括 .NET 7，典型的 `Startup.cs` 类被新的最小托管模型所取代，该模型简化了 ASP.NET Core 应用程序的启动和配置过程。此模型利用
    `Program.cs` 文件，该文件用于以更简洁和高级语句语法设置应用程序的服务和中间件。
- en: '[PRE3]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or, we can use the following middleware class:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下中间件类：
- en: '[PRE4]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This flexible system allows ASP.NET Core applications to be tailored to specific
    needs by plugging in various middleware components.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这个灵活的系统允许通过插入各种中间件组件来定制 ASP.NET Core 应用程序以满足特定需求。
- en: What is the difference between Middleware and Filters in ASP.NET Core?
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 中中间件和过滤器有什么区别？
- en: 'Middleware and **Filters** in ASP.NET Core serve similar purposes—they handle
    incoming and outgoing HTTP requests and responses. However, there are key differences:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 中的中间件和 **过滤器** 具有类似的目的——它们处理传入和传出的 HTTP 请求和响应。然而，它们之间存在关键差异：
- en: '**Scope of Application**: Middleware has components that operate at the application
    level and are used to handle HTTP requests and responses across the entire pipeline.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用范围**：中间件包含在应用程序级别运行的组件，用于处理整个管道中的 HTTP 请求和响应。'
- en: Filters are applied at the level of controllers and actions, making them more
    specific to **MVC** and **Razor Pages**.
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过滤器在控制器和动作级别应用，使它们更具体于 **MVC** 和 **Razor Pages**。
- en: '**Processing stages**: Middleware works in the earlier stages of request processing—it
    encounters the request soon after it enters the system and before it reaches MVC.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理阶段**：中间件在请求处理的早期阶段工作——它在请求进入系统后不久就会遇到请求，在它达到 MVC 之前。'
- en: Filters perform tasks after routing has determined which controller and action
    will be executed. They can intervene at various stages of action execution, such
    as before or after the controller action method.
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过滤器在路由确定哪个控制器和动作将被执行之后执行任务。它们可以在动作执行的各种阶段进行干预，例如在控制器动作方法之前或之后。
- en: '**Functionality**: Middleware is often used for tasks such as authentication,
    logging, and serving static files.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能**：中间件通常用于身份验证、日志记录和提供静态文件等任务。'
- en: Filters can be used to customize authentication, authorization, error handling,
    caching, and other tasks that are specific to particular actions or controllers.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过滤器可以用来自定义身份验证、授权、错误处理、缓存以及其他特定于特定操作或控制器任务的作业。
- en: '**Control over processing**: Middleware does not have direct access to the
    MVC execution context, such as the action context or results operating at a lower
    level.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理控制**：中间件没有直接访问 MVC 执行上下文，例如动作上下文或较低级别的结果操作。'
- en: Filters can interact with the MVC execution context and modify it.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 过滤器可以与MVC执行上下文交互并修改它。
- en: Therefore, the choice between using middleware or Filters depends on the scope
    of the application, the desired flexibility, and the specific needs for request
    or response handling in an ASP.NET Core application.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用中间件或过滤器之间的选择取决于应用程序的范围、所需的灵活性和在ASP.NET Core应用程序中处理请求或响应的具体需求。
- en: How can user authentication and authorization be implemented in ASP.NET Core?
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在ASP.NET Core中实现用户身份验证和授权？
- en: 'In ASP.NET Core, you can implement user authentication and authorization using
    built-in services and middleware. Here are the primary steps to achieve this:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，您可以使用内置服务和中间件来实现用户身份验证和授权。以下是实现此功能的主要步骤：
- en: '**Setting up Identity**: Utilize ASP.NET Core Identity to manage users and
    their roles'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置身份（Setting up Identity）**: 利用ASP.NET Core Identity来管理用户及其角色'
- en: '**Authentication**: Configure authentication using appropriate schemes (for
    example, JWT, OAuth, cookies, etc.)'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份验证（Authentication）**: 使用适当的方案（例如JWT、OAuth、cookies等）配置身份验证'
- en: '**Authorization**: Employ authorization policies to define the access rules
    to the resources in your application'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**授权（Authorization）**: 使用授权策略来定义对应用程序中资源的访问规则'
- en: '**Applying attributes**: Utilize the **''[Authorize]''** attribute to enforce
    access restrictions at the controller or action levels'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用属性（Applying attributes）**: 使用**''[Authorize]''**属性在控制器或操作级别强制执行访问限制'
- en: '**Validation and handling**: Add appropriate error handling and credential
    verification to ensure the secure operation of your web application'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证和处理（Validation and handling）**: 添加适当的错误处理和凭证验证以确保您的Web应用程序安全运行'
- en: How can sessions and states be managed in ASP.NET Core?
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在ASP.NET Core中管理会话和状态？
- en: 'Managing sessions and states in ASP.NET Core can be carried out via the following
    mechanisms:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，可以通过以下机制管理会话和状态：
- en: '**Sessions**: Use the session service to store and retrieve data at the session
    level. Before using sessions, you need to configure the session middleware in
    the **ConfigureServices** and **Configure** methods in the **Startup** class.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话（Sessions）**: 使用会话服务在会话级别存储和检索数据。在使用会话之前，您需要在**Startup**类中的**ConfigureServices**和**Configure**方法中配置会话中间件。'
- en: '**Cookies**: Utilize cookies to store information on the client side.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookies**: 利用cookies在客户端存储信息。'
- en: '**Caching**: Employ caching mechanisms to temporarily store frequently used
    data, reducing the load on the database or other external systems.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存（Caching）**: 使用缓存机制临时存储频繁使用的数据，以减少对数据库或其他外部系统的负载。'
- en: '**Application state**: Although server-level application state management is
    limited in ASP.NET Core, you can still use means, such as databases or distributed
    caching systems, to store the global state of the application.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序状态（Application state）**: 虽然在ASP.NET Core中，服务器级别的应用程序状态管理有限，但您仍然可以使用数据库或分布式缓存系统等手段来存储应用程序的全局状态。'
- en: What are the main differences between JWT tokens, sessions, and cookies in the
    context of authorization and user state preservation?
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在授权和用户状态保留的背景下，JWT令牌、会话和cookies之间有哪些主要区别？
- en: '**JSON web token** (**JWT**): It is an open standard that defines a way to
    securely transmit information between parties in the form of a JSON object. JWTs
    are often used for authentication and authorization in web applications.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON Web令牌（JSON web token）(**JWT**)：这是一个开放标准，定义了一种以JSON对象的形式安全地在各方之间传输信息的方式。JWTs通常用于Web应用程序中的身份验证和授权。'
- en: '**Sessions**: Sessions are used to store user state information between requests.
    Session data are stored on the server, and the client is given a unique session
    identifier, which can be stored in cookies.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话（Sessions）**: 会话用于在请求之间存储用户状态信息。会话数据存储在服务器上，客户端会收到一个唯一的会话标识符，该标识符可以存储在cookies中。'
- en: '**Cookies**: These are small text files stored on the client side and are used
    to preserve information between browser sessions. Cookies can be used to store
    session identifiers, user preferences, and more.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cookies**: 这些是存储在客户端的小型文本文件，用于在浏览器会话之间保留信息。Cookies可以用来存储会话标识符、用户偏好设置等。'
- en: What are the primary design patterns recommended for use when developing web
    applications on ASP.NET Core?
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发ASP.NET Core Web应用程序时，推荐使用哪些主要设计模式？
- en: 'When developing web applications on ASP.NET Core, the following design patterns
    are often utilized:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core上开发Web应用程序时，以下设计模式经常被使用：
- en: '**Model View Controller** (**MVC**): This pattern is integral to ASP.NET Core,
    offering a clear division between data models, user interfaces (views), and control
    logic (controllers). It aligns well with ASP.NET Core’s emphasis on the separation
    of concerns, making it easier to manage complex applications.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型视图控制器**（**MVC**）：此模式对于 ASP.NET Core 至关重要，它提供了数据模型、用户界面（视图）和控制逻辑（控制器）之间的清晰划分。它与
    ASP.NET Core 强调的关注点分离相一致，使得管理复杂应用程序变得更加容易。'
- en: '**Repository pattern**: In ASP.NET Core, this pattern is useful for abstracting
    data access logic from business logic. It helps to manage data operations, making
    the code more maintainable and testable, especially in applications with complex
    data models.'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库模式**：在 ASP.NET Core 中，此模式对于从业务逻辑中抽象数据访问逻辑非常有用。它有助于管理数据操作，使代码更易于维护和测试，尤其是在具有复杂数据模型的应用程序中。'
- en: '**Unit of Work**: This pattern complements the repository pattern in ASP.NET
    Core by managing transactions across multiple repositories. It ensures consistency
    and atomic operations, which are crucial in applications that handle complex transactions.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作单元**：此模式通过管理多个存储库之间的事务来补充 ASP.NET Core 中的存储库模式。它确保了一致性和原子操作，这对于处理复杂事务的应用程序至关重要。'
- en: '**Dependency injection**: ASP.NET Core has built-in support for dependency
    injection, making it simpler to implement. This pattern is key for creating loosely
    coupled, easily testable components, representing a core principle in ASP.NET
    Core application development.'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖注入**：ASP.NET Core 内置了对依赖注入的支持，这使得实现变得更加简单。此模式对于创建松散耦合、易于测试的组件至关重要，它是 ASP.NET
    Core 应用程序开发的核心原则之一。'
- en: '**Command query responsibility segregation** (**CQRS**): This pattern separates
    read and write operations into distinct models, which can optimize performance
    and scalability, especially in complex applications with diverse data operation
    requirements.'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令查询责任分离**（**CQRS**）：此模式将读取和写入操作分离到不同的模型中，这可以优化性能和可伸缩性，特别是在具有多样化数据操作要求的复杂应用程序中。'
- en: How would you organize exception handling in an ASP.NET Core web application
    to ensure reliability and security?
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你会如何组织 ASP.NET Core Web 应用程序中的异常处理以确保可靠性和安全性？
- en: 'To organize exception handling in ASP.NET Core, the following approaches can
    be utilized:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 ASP.NET Core 中组织异常处理，可以利用以下方法：
- en: '**Custom middleware**: Develop custom middleware aspects to intercept and handle
    exceptions effectively'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义中间件**：开发自定义中间件方面，以有效地拦截和处理异常。'
- en: '**Global exception handler**: Utilize a global exception handler using methods
    such as **UseExceptionHandler** or **UseDeveloperExceptionPage**, depending on
    the environment (development or production)'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局异常处理器**：根据环境（开发或生产）使用 **UseExceptionHandler** 或 **UseDeveloperExceptionPage**
    等方法利用全局异常处理器。'
- en: '**Logging**: Integrate with logging systems to record exception details and
    monitor the application’s state'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：与日志记录系统集成，以记录异常细节并监控应用程序的状态。'
- en: '**Status codes**: Configure appropriate HTTP status codes to inform the client
    about the nature of the error, facilitating improved user experience and system
    reliability'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态码**：配置适当的 HTTP 状态码，以告知客户端错误的性质，从而改善用户体验和系统可靠性。'
- en: What tools and strategies would you recommend for testing web applications on
    ASP.NET Core?
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你会推荐哪些工具和策略来测试 ASP.NET Core 上的 Web 应用程序？
- en: 'For testing web applications on ASP.NET Core, the following tools and strategies
    are recommended:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 ASP.NET Core 上测试 Web 应用程序，以下工具和策略是推荐的：
- en: '**xUnit**: A popular framework for unit testing in the .NET ecosystem'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xUnit**：在 .NET 生态系统中的一个流行的单元测试框架。'
- en: '**Moq**: A library for creating mock objects, which simplifies unit testing
    by isolating components'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Moq**：一个用于创建模拟对象的库，它通过隔离组件简化了单元测试。'
- en: '**Selenium**: A tool for browser automation that allows for functional testing
    of web applications'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium**：一个用于浏览器自动化的工具，它允许对 Web 应用程序进行功能测试。'
- en: '**Postman**: A tool for API testing, enabling the easy creation and execution
    of requests to web applications'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Postman**：一个用于 API 测试的工具，它能够轻松创建和执行对 Web 应用程序的请求。'
- en: '**Integration testing**: Use classes, such as **TestServer** and **WebApplicationFactory**,
    for the integration testing of web applications'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：使用 **TestServer** 和 **WebApplicationFactory** 等类进行 Web 应用程序的集成测试。'
- en: '**Continuous integration and continuous****delivery/deployment** (**CI/CD**):
    Implement CI/CD pipelines to automate the testing and deployment processes, ensuring
    rapid feedback and consistent deployments'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成和持续交付/部署（CI/CD**）: 实施CI/CD管道来自动化测试和部署过程，确保快速反馈和一致的部署'
- en: What strategies and approaches have you used to optimize the performance of
    ASP.NET Core web applications in high-traffic systems?
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你使用了哪些策略和方法来优化高流量系统中ASP.NET Core Web应用程序的性能？
- en: 'To optimize the performance in high-traffic systems, the following strategies
    can be employed:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在高流量系统中优化性能，可以采用以下策略：
- en: '**Caching**: Utilize caching mechanisms to reduce the load on the database
    and improve response times'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**: 利用缓存机制来减少对数据库的负载并提高响应时间'
- en: '**Asynchronous programming**: Implement asynchronous operations to enhance
    the performance of web applications by allowing the non-blocking execution of
    code'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步编程**: 通过允许代码的非阻塞执行来提高Web应用程序的性能，实现异步操作'
- en: '**Load balancing**: Employ load balancers to evenly distribute the load among
    servers, ensuring the better utilization of resources and preventing server overloads'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**: 使用负载均衡器在服务器之间均匀分配负载，确保资源的更好利用并防止服务器过载'
- en: '**Database query optimization**: Analyze and optimize SQL queries to enhance
    database operation efficiency, avoiding potential bottlenecks'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库查询优化**: 分析和优化SQL查询以提高数据库操作效率，避免潜在的瓶颈'
- en: '**Conducting stress testing**: Regularly conduct stress tests to identify and
    eliminate system bottlenecks, preparing the application to handle real-world load
    scenarios more effectively'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行压力测试**: 定期进行压力测试以识别和消除系统瓶颈，使应用程序能够更有效地处理现实世界的负载场景'
- en: '**Redis**: A multi-faceted tool used for ensuring efficient distributed locking,
    enabling rapid session management in web applications, and facilitating high-performance
    data caching'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redis**: 一个多功能的工具，用于确保高效的分布式锁定，使Web应用程序能够快速进行会话管理，并促进高性能数据缓存'
- en: How have you utilized the innovations and features of ASP.NET Core to create
    innovative web solutions? Can you provide specific examples or cases?
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你是如何利用ASP.NET Core的创新和功能的来创建创新的Web解决方案的？你能提供具体的例子或案例吗？
- en: 'By using ASP.NET Core, various innovations can be leveraged to create innovative
    web solutions, such as the following:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用ASP.NET Core，可以利用各种创新来创建创新的Web解决方案，例如以下内容：
- en: '**Blazor**: This feature can be utilized to build interactive web interfaces
    using C# instead of JavaScript, facilitating the development of more dynamic and
    responsive web applications'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor**: 该功能可以用来使用C#而不是JavaScript构建交互式Web界面，促进开发更动态和响应式的Web应用程序'
- en: '**SignalR**: It enables the implementation of real-time functionalities in
    web applications, allowing the creation of chat applications, games, and other
    interactive services that require real-time updates and communications'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**: 它使得在Web应用程序中实现实时功能成为可能，允许创建需要实时更新和通信的聊天应用、游戏和其他交互式服务'
- en: '**gRPC**: A framework that can be used to create high-performance, strongly
    typed APIs, enhancing communication between distributed systems'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gRPC**: 一个可以用来创建高性能、强类型API的框架，增强分布式系统之间的通信'
- en: '**Containerization and microservices**: Leveraging **Docker** and **Kubernetes**
    to create scalable and easily deployable web applications, facilitating efficient
    development and deployment workflows'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器化和微服务**: 利用**Docker**和**Kubernetes**创建可扩展且易于部署的Web应用程序，促进高效的开发和部署工作流程'
- en: How can you ensure the secure storage of database connection strings and other
    confidential data during development?
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你是如何确保在开发过程中安全存储数据库连接字符串和其他机密数据的？
- en: 'To ensure the secure storage of confidential data during the development phase,
    the following approaches can be adopted:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保在开发阶段安全存储机密数据，可以采用以下方法：
- en: '**Secret manager**: A tool that allows for the local storage of confidential
    data during development without including them in the project code, thus preventing
    the accidental exposure of sensitive information'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥管理器**: 一个工具，允许在开发过程中本地存储机密数据，而无需将其包含在项目代码中，从而防止敏感信息的意外泄露'
- en: '**Environment variables**: Utilizing environment variables to store and transfer
    confidential data securely, segregating sensitive information from the application’s
    codebase'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境变量**：利用环境变量安全地存储和传输机密数据，将敏感信息与应用程序的代码库隔离开来'
- en: '**Azure Key Vault or similar services**: Employing specialized services for
    the centralized and secure storage of confidential data, facilitating the secure
    access and management of sensitive information across different environments and
    deployments'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Key Vault或类似服务**：采用专门的服务进行集中和安全的存储机密数据，便于在不同环境和部署中安全地访问和管理敏感信息'
- en: What are the main differences between ASP.NET and ASP.NET Core, and why should
    Core be chosen for new projects?
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET与ASP.NET Core之间有哪些主要差异，为什么应该为新项目选择Core？
- en: 'The primary differences and advantages of using ASP.NET Core compared to ASP.NET
    include the following:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 与ASP.NET相比，使用ASP.NET Core的主要差异和优势包括以下内容：
- en: '**Cross-platform capability**: ASP.NET Core can be utilized across various
    operating systems, including Windows, Linux, and MacOS, whereas ASP.NET is restricted
    to Windows. This flexibility facilitates the development process and allows for
    a broader reach.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台能力**：ASP.NET Core可以在各种操作系统上使用，包括Windows、Linux和MacOS，而ASP.NET则仅限于Windows。这种灵活性促进了开发过程，并允许更广泛的适用范围。'
- en: '**Open source**: ASP.NET Core is open source, promoting greater transparency
    and opportunities for the developer community to contribute and innovate.'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**：ASP.NET Core是开源的，这促进了更高的透明度和开发社区贡献和创新的机会。'
- en: '**Modularity and flexibility**: ASP.NET Core offers a more modular and flexible
    architecture, making it easier to add or remove components, thereby enhancing
    the adaptability of web applications to changing requirements.'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化和灵活性**：ASP.NET Core提供了一种更模块化和灵活的架构，这使得添加或删除组件变得更容易，从而增强了Web应用程序对变化需求的适应性。'
- en: '**Container support**: It offers superior support for containers and microservices,
    simplifying deployment and scaling processes, which is beneficial for creating
    modern, scalable applications.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器支持**：它提供了对容器和微服务的卓越支持，简化了部署和扩展过程，这对于创建现代、可扩展的应用程序是有益的。'
- en: '**Improved performance**: ASP.NET Core is optimized for higher performance
    compared to traditional ASP.NET, enabling the development of more efficient and
    responsive web applications.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的性能**：与传统的ASP.NET相比，ASP.NET Core进行了优化，以实现更高的性能，从而能够开发出更高效和响应迅速的Web应用程序。'
- en: How is container and microservice support implemented within ASP.NET Core?
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，容器和微服务支持是如何实现的？
- en: 'In ASP.NET Core, support for containers and microservices is realized through
    the following features:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，通过以下功能实现容器和微服务的支持：
- en: '**Docker integration**: The easy creation of Docker images for ASP.NET Core
    applications facilitates deployment and management in containerized environments,
    offering streamlined deployment processes'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker集成**：轻松创建ASP.NET Core应用程序的Docker镜像，便于在容器化环境中进行部署和管理，提供简化的部署流程'
- en: '**Microservice architecture**: The ability to break the application into several
    independent microservices, each of which can be deployed and scaled separately,
    allowing for more scalable and maintainable systems'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务架构**：将应用程序拆分为几个独立的微服务的能力，每个微服务都可以单独部署和扩展，从而实现更可扩展和可维护的系统'
- en: '**Orchestration**: Smooth integration with orchestration systems, such as Kubernetes,
    aids in automating the deployment, scaling, and management of containerized applications,
    promoting efficient and automated operational workflows'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编排**：与编排系统（如Kubernetes）的平滑集成有助于自动化容器化应用程序的部署、扩展和管理，促进高效和自动化的操作流程'
- en: '**Configuration and secret management**: Tools are available for the centralized
    and secure management of configurations and secrets in microservice environments,
    ensuring the safe handling of sensitive information'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置和密钥管理**：在微服务环境中，有工具可用于集中和安全管理配置和密钥，确保敏感信息的安全处理'
- en: '**API gateway**: Support for utilizing API gateways to route and aggregate
    requests to various microservices enhances the organization and security of microservice
    architectures'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API网关**：支持使用API网关路由和聚合对各种微服务的请求，增强了微服务架构的组织和安全'
- en: What strategies and practices do you recommend for maintaining security in web
    applications developed based on ASP.NET Core?
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你推荐哪些策略和实践来维护基于ASP.NET Core开发的Web应用程序的安全性？
- en: 'To ensure security in web applications developed on ASP.NET Core, I recommend
    employing the following strategies and practices:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保在 ASP.NET Core 上开发的 Web 应用程序的安全性，我建议采用以下策略和实践：
- en: Utilizing HTTPS to encrypt data in transit, safeguarding sensitive information
    during communication
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 HTTPS 加密传输中的数据，保护通信过程中的敏感信息
- en: The authentication and authorization of users using built-in features of ASP.NET
    Core Identity, ensuring secure access control mechanisms
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core Identity 的内置功能对用户进行身份验证和授权，确保安全的访问控制机制
- en: Protecting against common web attacks, such as SQL Injection, XSS, and CSRF,
    by using built-in security mechanisms, mitigating vulnerabilities and potential
    exploits
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用内置的安全机制来防止常见的 Web 攻击，如 SQL 注入、XSS 和 CSRF，减轻漏洞和潜在利用的风险
- en: Employing security header policies, such as **content security policy** (**CSP**),
    to reduce the risk of potential attacks, adding an extra layer of security to
    your web application
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用安全头策略，如**内容安全策略**（**CSP**），以降低潜在攻击的风险，为您的 Web 应用程序添加额外的安全层
- en: Regularly updating dependencies and components to the latest secure versions,
    keeping the application safe from known vulnerabilities
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期更新依赖项和组件到最新安全版本，使应用程序免受已知漏洞的侵害
- en: Implementing logging and monitoring activities for quick detection and response
    to security incidents, facilitating proactive security management
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现日志记录和监控活动，以便快速检测和响应安全事件，促进主动安全管理的实施
- en: How can SQL and NoSQL databases be integrated and utilized in ASP.NET Core projects?
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在 ASP.NET Core 项目中集成和利用 SQL 和 NoSQL 数据库？
- en: 'The integration and utilization of SQL and NoSQL databases in ASP.NET Core
    projects can involve the following steps:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 项目中集成和使用 SQL 和 NoSQL 数据库可能涉及以下步骤：
- en: Choosing an appropriate ORM or library to work with the specific type of database
    (for instance, EF for SQL databases), facilitating efficient data management
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择合适的 ORM 或库来与特定类型的数据库（例如，EF 用于 SQL 数据库）一起工作，以促进高效的数据管理
- en: Configuring connection strings and other configuration parameters in the **appsettings.json**
    file, setting up the necessary configurations for database connections
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **appsettings.json** 文件中配置连接字符串和其他配置参数，设置数据库连接的必要配置
- en: Creating data models and configuring mappings to represent the database structure
    in the code, organizing the data structure for application usage
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据模型并配置映射以在代码中表示数据库结构，为应用程序使用组织数据结构
- en: Using LINQ to formulate and execute queries to SQL databases and the relevant
    APIs for NoSQL databases, facilitating efficient data retrieval and manipulation
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 LINQ 构建和执行对 SQL 数据库的查询以及 NoSQL 数据库的相关 API，以促进高效的数据检索和操作
- en: Implementing repositories or services to manage data operations, such as adding,
    updating, deleting, and retrieving, creating a structured approach to data management
    in the application
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现存储库或服务来管理数据操作，如添加、更新、删除和检索，为应用程序中的数据管理创建一种结构化方法
- en: What are the recommended approaches to developing and deploying highly available
    and scalable web applications based on ASP.NET Core?
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于ASP.NET Core开发高度可用和可扩展的Web应用程序，以下方法被推荐：
- en: 'For the development of highly available and scalable web applications using
    ASP.NET Core, the following approaches are recommended:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 ASP.NET Core 开发高度可用和可扩展的 Web 应用程序，以下方法被推荐：
- en: Utilize stateless applications to facilitate horizontal scaling
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无状态应用程序以促进水平扩展
- en: Consider utilizing cloud services for automatic scaling and resource management,
    enhancing the scalability and reliability of the applications
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑利用云服务进行自动扩展和资源管理，增强应用程序的可扩展性和可靠性
- en: Use a **content delivery network** (**CDN**) for distributing static content,
    which can help to reduce server load and improve content delivery speed
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**内容分发网络**（**CDN**）分发静态内容，这有助于减少服务器负载并提高内容分发速度
- en: Optimize database operations by implementing caching and connection pooling
    to enhance performance and reduce latency
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过实现缓存和连接池来优化数据库操作，提高性能并减少延迟
- en: Implement monitoring and logging to identify and address issues in real-time,
    ensuring continuous service availability and performance optimization
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现监控和日志记录以实时识别和解决问题，确保持续的服务可用性和性能优化
- en: How can ASP.NET Core be integrated within cloud services and platforms?
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在云服务和平台中将 ASP.NET Core 集成进去？
- en: ASP.NET Core can be integrated within various cloud services by using the SDKs
    or APIs provided by cloud service providers. For instance, the **Azure** SDK can
    be used for integration with Azure, and the **AWS** SDK for AWS integration. Additionally,
    consider using libraries for authentication, data storage, and working with message
    queues, among other functionalities, to streamline the integration process and
    take advantage of cloud platform features.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用云服务提供商提供的SDK或API将ASP.NET Core集成到各种云服务中。例如，可以使用**Azure** SDK进行Azure集成，以及使用**AWS**
    SDK进行AWS集成。此外，考虑使用用于身份验证、数据存储和与消息队列等功能的库，以简化集成过程并利用云平台功能。
- en: What are the key components of ASP.NET Core, and what are their roles in web
    development?
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core的关键组件是什么，它们在Web开发中扮演什么角色？
- en: 'The primary components of ASP.NET Core include the following:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core的主要组件包括以下内容：
- en: '**Kestrel**: A lightweight, high-performance web server that serves as the
    foundational server for ASP.NET Core applications'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kestrel**：一个轻量级、高性能的Web服务器，作为ASP.NET Core应用程序的基础服务器'
- en: '**Middleware components**: These can be used for processing HTTP requests in
    a pipeline, allowing for modular and customizable request handling'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中间件组件**：这些可以用于在管道中处理HTTP请求，允许模块化和可定制的请求处理'
- en: '**MVC**: A design pattern for developing web applications that incorporate
    models, views, and controllers, facilitating an organized and maintainable code
    structure'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MVC**：一种用于开发包含模型、视图和控制器等元素的Web应用程序的设计模式，便于构建有序且可维护的代码结构'
- en: '**Razor Pages**: An alternative approach to creating web interfaces that simplifies
    the programming model for ASP.NET Core applications'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Razor Pages**：创建Web界面的另一种方法，简化了ASP.NET Core应用程序的编程模型'
- en: '**Dependency injection**: A built-in system for dependency injection, promoting
    code modularity and testability'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖注入**：一个内置的依赖注入系统，促进代码模块化和可测试性'
- en: '**Configuration**: A system for managing settings in a structured and centralized
    manner, facilitating configuration management across different environments'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：一个用于以结构化和集中方式管理设置的系统，便于在不同环境中进行配置管理'
- en: How does routing work in ASP.NET Core, and how can it be configured?
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core中的路由是如何工作的，以及如何进行配置？
- en: In ASP.NET Core, routing is utilized to determine how HTTP requests are handled
    within the application. The routes are defined by using templates that specify
    which controller and action will handle a particular request. To configure routing,
    the `UseRouting()` and `UseEndpoints()` methods can be used in the request processing
    pipeline, allowing for a structured and customizable routing setup.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，路由用于确定如何在应用程序内处理HTTP请求。路由是通过使用模板定义的，这些模板指定了哪个控制器和操作将处理特定的请求。要配置路由，可以在请求处理管道中使用`UseRouting()`和`UseEndpoints()`方法，从而实现结构化和可定制的路由设置。
- en: What popular libraries and packages are recommended for developing web applications
    on ASP.NET Core?
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪些流行的库和包被推荐用于在ASP.NET Core上开发Web应用程序？
- en: 'During the development process on ASP.NET Core, the following libraries and
    packages are often utilized:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core的开发过程中，通常会使用以下库和包：
- en: '**EF Core**: An ORM for working with databases, facilitating data access and
    management'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EF Core**：一个用于与数据库工作的ORM，便于数据访问和管理'
- en: '**AutoMapper** or **Mapster**: For automating the mapping between objects,
    reducing the amount of boilerplate code required for object transformations'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AutoMapper** 或 **Mapster**：用于自动化对象之间的映射，减少对象转换所需的样板代码量'
- en: '**Serilog** or **NLog**: These are used for logging and helping to track and
    diagnose issues in the application'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Serilog** 或 **NLog**：用于日志记录，并帮助跟踪和诊断应用程序中的问题'
- en: '**Swagger** and **Swashbuckle**: These are used for API documentation to aid
    in creating professional and interactive API documentation'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swagger** 和 **Swashbuckle**：这些用于API文档，以帮助创建专业且交互式的API文档'
- en: '**Polly**: This is used for implementing resilience patterns to enhance the
    stability and reliability of the application in the face of transient faults and
    failures'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Polly**：用于实现弹性模式，以增强应用程序在面对暂时性故障和失败时的稳定性和可靠性'
- en: How do you create and integrate custom Middleware aspects in ASP.NET Core projects?
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何在ASP.NET Core项目中创建和集成自定义中间件方面？
- en: 'To create and utilize custom middleware aspects in ASP.NET Core projects, adhere
    to the following steps:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 要在ASP.NET Core项目中创建和使用自定义中间件方面，请遵循以下步骤：
- en: Create a class that incorporates an **Invoke** or **InvokeAsync** method, which
    accepts **HttpContext** as a parameter
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含**Invoke**或**InvokeAsync**方法的类，该方法接受**HttpContext**作为参数
- en: Utilize the aforementioned methods to handle HTTP requests within middleware
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用上述方法在中间件中处理HTTP请求
- en: Register middleware in the request processing pipeline by using the **UseMiddleware**
    method in the **Startup** class
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**Startup**类中使用**UseMiddleware**方法在请求处理管道中注册中间件
- en: This structure allows for the streamlined integration of custom middleware aspects
    into your ASP.NET Core projects, facilitating enhanced request handling and project
    functionality.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构允许将自定义中间件方面无缝集成到您的ASP.NET Core项目中，从而促进增强的请求处理和项目功能。
- en: What methods of dependency injection are present in ASP.NET Core, and how do
    they contribute to the development of flexible and testable applications?
  id: totrans-484
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core中存在哪些依赖注入方法，以及它们如何有助于开发灵活和可测试的应用程序？
- en: 'In ASP.NET Core, there are three primary types of dependency injection: **singleton**,
    **scoped**, and **transient**. These methods promote the creation of flexible
    and testable applications by separating specific implementations from interfaces,
    which simplifies the testing and maintenance of the code. Here is a detailed explanation
    of each:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，有三种主要的依赖注入类型：**单例**、**范围**和**瞬态**。这些方法通过将特定实现从接口中分离出来，促进了灵活和可测试应用程序的创建，从而简化了代码的测试和维护。以下是每个方法的详细说明：
- en: '**Singleton**:'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单例**：'
- en: 'Definition: In this method, a single instance of the service is created and
    shared across the entire application, and it exists for the lifetime of the application'
  id: totrans-487
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义：在此方法中，创建单个服务实例并在整个应用程序中共享，它存在于应用程序的生命周期内。
- en: 'Contribution to flexibility and testability: Singleton services improve application
    flexibility with global state access but can complicate testability due to persistent
    states between tests'
  id: totrans-488
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对灵活性和可测试性的贡献：单例服务通过全局状态访问提高了应用程序的灵活性，但可能会因为测试之间的持久状态而使可测试性复杂化。
- en: 'Resource optimization: As only a single instance is created, this helps in
    optimizing resources, especially for services that are expensive to create or
    maintain'
  id: totrans-489
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源优化：由于只创建单个实例，这有助于优化资源，特别是对于创建或维护成本高昂的服务。
- en: 'State persistence: Singleton services can retain their data state persistently
    throughout the application lifecycle'
  id: totrans-490
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态持久化：单例服务可以在整个应用程序生命周期内持久化其数据状态
- en: 'Ease of configuration: Simplifies configuration by centralizing service instance
    management'
  id: totrans-491
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置简化：通过集中管理服务实例来简化配置
- en: 'Testing challenges: It might pose challenges in testing scenarios where isolated
    service instances are required, as the shared instance can retain its state between
    test cases'
  id: totrans-492
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试挑战：在需要隔离服务实例的测试场景中可能会带来挑战，因为共享实例可以在测试用例之间保留其状态。
- en: '**Scoped**:'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：'
- en: 'Definition: A new instance of the service is created once per request or per
    “scope”. The created instance is shared across components during a single HTTP
    request.'
  id: totrans-494
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义：每次请求或每次“范围”创建服务的新实例。创建的实例在单个HTTP请求期间跨组件共享。
- en: 'Contribution to flexibility and testability: Scoped services provide a balance
    between the broad availability of singletons and the isolated, per-use basis of
    transients, enhancing flexibility by sharing a state within a request while still
    allowing for clean, separate instances in different requests, thereby improving
    testability.'
  id: totrans-495
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对灵活性和可测试性的贡献：范围服务在单例的广泛可用性和瞬态的隔离、按使用基础之间提供了平衡，通过在请求内共享状态来提高灵活性，同时仍然允许在不同请求中拥有干净的、独立的实例，从而提高了可测试性。
- en: 'Data isolation: Helps to isolate data for individual requests, which can prevent
    potential issues related to concurrent access and data consistency.'
  id: totrans-496
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据隔离：有助于隔离单个请求的数据，从而可以防止与并发访问和数据一致性相关的问题
- en: 'Resource management: Facilitates better resource management by allowing the
    creation of service instances on a per-request basis.'
  id: totrans-497
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源管理：通过按请求创建服务实例，促进更好的资源管理。
- en: 'Simplified testing: This makes it easier to test applications by allowing the
    creation of isolated service instances for each test case or request scenario.'
  id: totrans-498
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化测试：这使得通过为每个测试用例或请求场景创建隔离的服务实例来测试应用程序变得更容易。
- en: '**Transient**:'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**瞬态**：'
- en: 'Definition: Transient services are created each time they are requested. This
    means a new instance is provided to each controller and every service or component
    that requests it.'
  id: totrans-500
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义：瞬态服务在每次请求时都会创建。这意味着每个控制器以及每个请求它的服务或组件都会提供一个新实例。
- en: 'Contribution to flexibility and testability: Transient services increase flexibility
    by providing fresh, independent instances to every component that requires them,
    ensuring no shared state across operations, which greatly aids in creating isolated,
    predictable unit tests for components.'
  id: totrans-501
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对灵活性和可测试性的贡献：瞬态服务通过为每个需要它们的组件提供新鲜、独立的实例来增加灵活性，确保操作之间没有共享状态，这极大地有助于为组件创建隔离、可预测的单元测试。
- en: 'Isolated instances: Ensures that each component gets a fresh, isolated instance,
    preventing the potential side effects from shared states.'
  id: totrans-502
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立实例：确保每个组件都获得一个新鲜、独立的实例，防止共享状态可能产生的潜在副作用。
- en: 'Fine-grained control: Offers fine-grained control over service instances, allowing
    developers to manage the lifecycle and dependencies more precisely.'
  id: totrans-503
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 细粒度控制：提供对服务实例的细粒度控制，允许开发者更精确地管理生命周期和依赖关系。
- en: 'Facilitates testing: Simplifies testing by enabling the creation of separate
    instances for each test, which can be configured or mocked independently.'
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进测试：通过为每个测试创建独立的实例来简化测试，这些实例可以独立配置或模拟。
- en: By utilizing these dependency injection methods, developers can create applications
    that are more modular, maintainable, and testable. It encourages the separation
    of concerns and adherence to the SOLID principles, fostering the development of
    robust and scalable applications in ASP.NET Core.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些依赖注入方法，开发者可以创建更模块化、可维护和可测试的应用程序。这鼓励关注点的分离和遵循SOLID原则，促进在ASP.NET Core中开发健壮和可扩展的应用程序。
- en: How do you plan to organize automated testing for a web application developed
    on ASP.NET Core?
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你计划如何组织基于ASP.NET Core开发的Web应用的自动化测试？
- en: 'To organize automated testing in ASP.NET Core, the following approaches can
    be utilized:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 要在ASP.NET Core中组织自动化测试，可以采用以下方法：
- en: '**Unit testing**: Employing frameworks, such as xUnit or NUnit, to test individual
    parts of the code, ensuring the reliability of the code components'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：采用如xUnit或NUnit等框架测试代码的各个部分，确保代码组件的可靠性'
- en: '**Integration testing**: Creating tests that verify the interaction between
    system components, providing a holistic view of system functionality and the integration
    points'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：创建测试以验证系统组件之间的交互，提供系统功能及其集成点的整体视图'
- en: '**UI testing**: Using tools such as **Selenium** for automating user interface
    testing, ensuring the user interface functions correctly and meets user requirements'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI测试**：使用如**Selenium**等工具进行自动化用户界面测试，确保用户界面功能正确且满足用户需求'
- en: '**CI/CD**: Setting up continuous integration and delivery pipelines to automate
    the testing and deployment process, enhancing the development lifecycle and facilitating
    quicker releases'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD**：设置持续集成和持续交付管道来自动化测试和部署过程，增强开发周期并促进更快地发布'
- en: What challenges have you encountered during the deployment of large-scale web
    applications on ASP.NET Core, and how did you overcome them?
  id: totrans-512
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在部署基于ASP.NET Core的大规模Web应用时，你遇到了哪些挑战，以及你是如何克服它们的？
- en: 'During the deployment of large-scale web applications on ASP.NET Core, several
    challenges might be encountered, including performance optimization, resource
    management, security assurance, database migration, and maintaining a state when
    both the old and new services are running concurrently. Here’s how these challenges
    can be mitigated:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署基于ASP.NET Core的大规模Web应用时，可能会遇到一些挑战，包括性能优化、资源管理、安全保证、数据库迁移，以及当旧服务和新服务同时运行时维护状态。以下是如何缓解这些挑战的方法：
- en: '**Performance optimization**: To ensure optimal performance, it’s vital to
    conduct regular performance testing and optimize the code and resources based
    on the insights gathered. Implementing caching strategies and optimizing database
    queries are some of the steps that can be taken to enhance performance.'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能优化**：为确保最佳性能，定期进行性能测试并根据收集到的见解优化代码和资源至关重要。实施缓存策略和优化数据库查询是一些可以采取的步骤，以增强性能。'
- en: '**Resource management**: Effective resource management involves optimizing
    server resources to prevent bottlenecks and ensure smooth operation even during
    peak times. This might include strategies such as load balancing and utilizing
    cloud resources effectively.'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源管理**：有效的资源管理涉及优化服务器资源以防止瓶颈并确保即使在高峰时段也能平稳运行。这可能包括负载均衡和有效利用云资源的策略。'
- en: '**Security assurance**: Security is a paramount concern in large-scale deployments.
    Implementing modern security practices, such as SSL encryption, utilizing secure
    coding practices to prevent vulnerabilities, and regularly updating the system
    to patch any security holes are essential steps.'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全保证**：在大型部署中，安全性是一个至关重要的关注点。实施现代安全实践，如 SSL 加密，利用安全的编码实践来防止漏洞，并定期更新系统以修补任何安全漏洞是基本步骤。'
- en: '**Database migration**: Large-scale deployments often involve database migrations,
    which can be challenging. Utilizing migration scripts and tools that facilitate
    smooth migration without data loss is crucial. It is also essential to have backup
    strategies in place to prevent data loss and to test the migration process thoroughly
    before implementation to identify and fix any potential issues.'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库迁移**：大规模部署通常涉及数据库迁移，这可能具有挑战性。利用迁移脚本和工具，以无数据损失的方式促进平滑迁移是至关重要的。同时，制定备份策略以防止数据丢失，并在实施前彻底测试迁移过程以识别和修复任何潜在问题也是必不可少的。'
- en: '**Supporting a state across old and new services**: During the transition phase,
    where both old and new services are running concurrently, maintaining state consistency
    can be a significant challenge. Implementing strategies, such as feature flags,
    to gradually transition users to new services and utilizing stateful distributed
    databases that can synchronize states across both systems are ways to ensure a
    seamless transition.'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持旧服务和新服务之间的状态一致性**：在旧服务和新服务同时运行的过渡阶段，保持状态一致性可能是一个重大的挑战。实施策略，如功能标志，逐步将用户过渡到新服务，并利用能够同步两个系统状态的具有状态性的分布式数据库，是确保无缝过渡的方法。'
- en: '**Scaling**: Scaling strategies, including both horizontal (adding more machines)
    and vertical scaling (adding more power to the existing machines), can be employed
    to handle increased load and ensure stability.'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展性**: 扩展性策略，包括水平扩展（添加更多机器）和垂直扩展（为现有机器添加更多性能），可以用来处理增加的负载并确保稳定性。'
- en: By adopting these strategies, it is possible to overcome challenges and ensure
    the robust, scalable, and secure deployment of large-scale web applications on
    ASP.NET Core. Continuous monitoring and adapting strategies based on real-time
    insights can further enhance the reliability and performance of the deployment.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用这些策略，可以克服挑战并确保在 ASP.NET Core 上大规模 Web 应用的稳健、可扩展和安全的部署。根据实时洞察不断监控和调整策略可以进一步提高部署的可靠性和性能。
- en: How can you integrate ASP.NET Core with modern frontend frameworks such as Angular
    or React? Do you have practical experience with this?
  id: totrans-521
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你如何将 ASP.NET Core 与现代前端框架如 Angular 或 React 集成？你在这方面有实践经验吗？
- en: 'Integrating ASP.NET Core with modern frontend frameworks, such as Angular or
    React, can be achieved by using several approaches:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用以下几种方法可以将 ASP.NET Core 与现代前端框架，如 Angular 或 React，集成：
- en: '**Creating single-page applications** (**SPAs**): ASP.NET Core can serve as
    the back end for SPAs developed with Angular or React, facilitating a seamless
    user experience'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建单页应用程序**（**SPAs**）：ASP.NET Core 可以作为使用 Angular 或 React 开发的 SPAs 的后端，从而实现无缝的用户体验'
- en: '**Using templates**: ASP.NET Core offers project templates for Angular and
    React, which simplify the integration process by providing a structured setup'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用模板**：ASP.NET Core 为 Angular 和 React 提供项目模板，通过提供结构化的设置来简化集成过程'
- en: '**API integration**: You can create RESTful APIs in ASP.NET Core to facilitate
    data exchange by using the frontend part of the application'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 集成**：您可以在 ASP.NET Core 中创建 RESTful API，通过使用应用程序的前端部分来促进数据交换'
- en: What strategies do you propose for ensuring data security and user confidentiality
    in web applications developed on ASP.NET Core?
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你建议采用哪些策略来确保在 ASP.NET Core 上开发的 Web 应用程序中的数据安全和用户隐私？
- en: 'To ensure data security and user confidentiality in web applications developed
    on ASP.NET Core, the following strategies can be employed:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保在 ASP.NET Core 上开发的 Web 应用程序中的数据安全和用户隐私，可以采用以下策略：
- en: '**Data encryption**: Utilize robust encryption algorithms to safeguard data
    confidentiality'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据加密**：利用强大的加密算法来保护数据机密性'
- en: '**Authentication and authorization**: Implement reliable authentication and
    authorization systems to restrict access to sensitive information, thereby protecting
    user privacy and data integrity'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证和授权**：实施可靠的认证和授权系统，限制对敏感信息的访问，从而保护用户隐私和数据完整性'
- en: '**Protection against common attacks**: Shield your web application from prevalent
    attacks, such as SQL injection, cross-site scripting (XSS), and cross-site request
    forgery (CSRF), by leveraging the built-in security mechanisms of ASP.NET Core'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防范常见攻击**：通过利用ASP.NET Core内置的安全机制，保护你的网络应用程序免受常见的攻击，如SQL注入、跨站脚本（XSS）和跨站请求伪造（CSRF）'
- en: Can you provide some examples of the successful use of ASP.NET Core in complex
    business projects or innovative developments?
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能提供一些ASP.NET Core在复杂商业项目或创新开发中成功应用的例子吗？
- en: 'ASP.NET Core has been successfully applied in various high-traffic and innovative
    projects. Here are a few examples:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core已在各种高流量和创新项目中成功应用。以下是一些例子：
- en: '**Financial platforms**: Developing reliable and scalable financial platforms
    capable of handling a large volume of transactions efficiently, showcasing the
    robustness of ASP.NET Core in handling complex computational tasks'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金融平台**：开发可靠且可扩展的金融平台，能够高效处理大量交易，展示了ASP.NET Core在处理复杂计算任务方面的稳健性'
- en: '**E-commerce**: Crafting intricate e-commerce solutions that offer high levels
    of security and can withstand substantial traffic, demonstrating the framework’s
    scalability and reliability'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子商务**：构建复杂的电子商务解决方案，提供高安全级别并能承受大量流量，展示了该框架的可扩展性和可靠性'
- en: '**Educational platforms**: Creating interactive and innovative educational
    platforms that utilize virtual reality and other cutting-edge technologies, underscoring
    the flexibility of ASP.NET Core in incorporating new technologies'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**教育平台**：创建利用虚拟现实和其他尖端技术的互动和创新教育平台，强调ASP.NET Core在融合新技术方面的灵活性'
- en: '**Healthcare and telemedicine**: Developing platforms for providing online
    medical services and remote patient health monitoring, highlighting the versatility
    of ASP.NET Core in facilitating healthcare advancements'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**医疗保健和远程医疗**：开发提供在线医疗服务和远程患者健康监测的平台，突显ASP.NET Core在促进医疗进步方面的多功能性'
- en: These projects exemplify the flexibility and potency of ASP.NET Core as a tool
    for developing modern web applications that meet the demands of various business
    domains.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目展示了ASP.NET Core作为开发满足各种商业领域需求的现代网络应用程序工具的灵活性和强大功能。
- en: As we reach the terminus of this enlightening section, we trust that your perspective
    on web development has been enriched through the lens of ASP.NET Core. This framework,
    with its modernized approach and robust capabilities, stands ready to be the cornerstone
    of your future web development projects. It is our aspiration that you carry forth
    this knowledge as a beacon, guiding you in the crafting of web solutions that
    are not only efficient but also innovative. As we part ways, remember that the
    journey with ASP.NET Core is far from over; it is a dynamic field that is ever-evolving
    and ripe with opportunities for further exploration and mastery. Forge ahead with
    curiosity and determination as you sculpt the next generation of web experiences
    by using ASP.NET Core.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们到达这个启发性的部分终点，我们希望你的网络开发视角通过ASP.NET Core的视角得到了丰富。这个框架，以其现代化的方法和强大的功能，准备成为你未来网络开发项目的基石。我们希望你能将这一知识作为灯塔，引导你构建既高效又创新的网络解决方案。当我们分别时，请记住，与ASP.NET
    Core的旅程远未结束；这是一个动态的领域，充满了进一步探索和精通的机会。带着好奇心和决心，通过使用ASP.NET Core塑造下一代网络体验。
- en: Summary
  id: totrans-539
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we draw this enriching chapter to a close, we are optimistic that you now
    find yourself significantly better prepared, with a deeper understanding and appreciation
    for the essential C# libraries and frameworks. The insights and guidance encapsulated
    within these pages not only aspire to bolster your development skills but also
    stand to robustly prepare you to face the rigors of technical interviews with
    a newfound confidence.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们结束这个丰富的章节，我们乐观地认为你现在准备得更好，对必要的C#库和框架有了更深入的理解和欣赏。这些页面中包含的见解和指导不仅旨在增强你的开发技能，而且能够帮助你以新的信心面对技术面试的挑战。
- en: Remember, the secret to mastering coding challenges is not confined to mere
    knowledge acquisition; it extends to the strategic and efficient application of
    this knowledge. We fervently hope that the expertise and insights accrued from
    this chapter will serve as a robust pillar in your evolving journey as a C# developer,
    gearing you up to embrace and conquer the diverse and thrilling challenges that
    the tech arena continually presents.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，掌握编码挑战的秘诀并不仅限于知识的获取；它还扩展到战略和高效地应用这些知识。我们衷心希望，从本章积累的专业知识和洞察力将成为你在作为 C# 开发者不断成长旅程中的坚固支柱，为你迎接并征服技术领域不断提出的各种多样和激动人心的挑战做好准备。
- en: With a solid grasp of C# libraries and ASP.NET now under your belt, in the next
    chapter, we’ll transition smoothly into covering the practical strategies for
    acing coding challenges during interviews, ensuring you’re well-prepared on all
    fronts for the multi-faceted role of a modern C# developer.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了 C# 库和 ASP.NET 的坚实基础，在下一章中，我们将顺利过渡到介绍在面试中应对编码挑战的实际策略，确保你在现代 C# 开发者多面角色的各个方面都做好了充分准备。
- en: Additional reading
  id: totrans-543
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加阅读
- en: '*Web Development with Blazor - Second Edition*, by Jimmy Engström'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Blazor Web 开发 - 第二版*，由 Jimmy Engström 撰写'
- en: '[https://www.packtpub.com/product/web-development-with-blazor-second-edition/9781803241494](https://www.packtpub.com/product/web-development-with-blazor-second-edition/9781803241494)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/product/web-development-with-blazor-second-edition/9781803241494](https://www.packtpub.com/product/web-development-with-blazor-second-edition/9781803241494)'
- en: '*Microsoft Azure For .NET Developers [Video]*, by Trevoir Williams'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Microsoft Azure For .NET Developers [视频]*，由 Trevoir Williams 撰写'
- en: '[https://www.packtpub.com/product/microsoft-azure-for-net-developers-video/9781835465059](https://www.packtpub.com/product/microsoft-azure-for-net-developers-video/9781835465059)'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/product/microsoft-azure-for-net-developers-video/9781835465059](https://www.packtpub.com/product/microsoft-azure-for-net-developers-video/9781835465059)'
