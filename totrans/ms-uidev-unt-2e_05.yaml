- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Universal Design and Accessibility for UI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When designing your interface, you want to consider all the different types
    of players who may interact with your game. You want to consider their size, their
    age, their current situation, their ambient location, their output device, their
    input device, their cognition, their preferences, their mobility levels, and more.
    You want your interface to be usable by as many types of people as possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to consider these factors at the beginning of the design process
    as designing your UI initially with these things in mind is significantly easier
    than incorporating them later when your UI is already designed, built, and implemented.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: What are universal design and accessible design?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Universal design principles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessibility design
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are universal design and accessible design?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ronald Mace coined the term **universal design** and defined it as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: “The design of products and environments to be usable by all people, to the
    greatest extent possible, without the need for adaptation or specialized design.”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Universal design is the concept of designing products that are usable by all
    people regardless of age, size, preference, ability, disability, condition, or
    situation. It does not focus on designing for a specific group of people but instead
    focuses on designing products that are useable by the widest range of people.
    While initially focused on architecture, the concepts of universal design have
    been expanded to include the design for all types of products, including video
    games. **Accessible design** is a design that specifically focuses on usability
    by those with impairments and disabilities and is a subset of universal design.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: For a design to be effective, purposeful decisions must be made to ensure that
    the design is both functional and useful to all types of people. When designing
    a user interface, you should consider how to make it usable and accessible to
    all people from the beginning of the design process. It is much easier to design
    a universally usable and accessible UI if you start with these considerations
    in mind than it is to retrofit features on top of pre-existing interfaces.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, I will discuss considerations for designing user
    interfaces using the principles of universal design as well as the special considerations
    you should take to make your interface accessible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Since this book is on the development of UI within Unity, which is primarily
    a video game engine, the majority of the examples and use cases I will describe
    will be related to video games.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Universal design principles
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 1997, a working group at North Carolina State University developed the 7
    Principles of Universal Design. These principles are meant to help guide the design
    of products so that they can be universally usable. These principles are formally
    defined in terms of different types of designs with an emphasis on architecture.
    I will paraphrase each principle in terms of its application to digital user interfaces
    and then provide examples of how each principle can be used in video game interface
    design. If you’d like to view the list of principles and their specific guidelines,
    you can visit [https://universaldesign.ie/what-is-universal-design/the-7-principles/](https://universaldesign.ie/what-is-universal-design/the-7-principles/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Many of these principles overlap and some of the examples I will provide could
    apply to multiple principles.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Equitable use
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The equitable use principle states that a design should be equally usable and
    appealing to all. If an identical experience is not possible for all, they should
    have an equivalent experience. An interface should be designed to appeal to all
    users and should not stigmatize or segregate users. This is the first principle
    because it ultimately drives all the other principles.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: For example, high-contrasting colors should be used in interfaces. High-contrasting
    interfaces are not only appealing to all users but they help mobile users sitting
    in direct sunlight see your interface and they avoid stigmatizing users with visual
    impairments such as low vision and color blindness.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the goal of universal design is not explicitly about designing
    for accessibility (that is, designing for groups with disabilities). Utilizing
    something like a high-contrasting color scheme is beneficial to all, not just
    those with visual impairments. It is also not a setting that explicitly needs
    to be turned on, such as turning on a color blind mode, which would be designing
    for accessibility. I’ll discuss designing for accessibility later in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: If you’re making a PC game, you don’t want to hide information so that it is
    only accessible by a mouse. Allowing information to be navigated to via the d-pad
    on a controller or tabbed to by a keyboard will allow users who are using different
    input devices (due to personal preference or vision impairments) to access the
    same information as a mouse user.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Flexibility in use
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The flexibility in use principle states that people with a wide range of preferences
    and abilities should be accommodated by the design and people should be provided
    choice in how they use the design. The key to this principle is providing users
    with choices when it comes to interacting with your game.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: If you’re making a mobile game, you can provide left and right-handed modes
    that swap which side of the screen the buttons are on, as I did in my game Barkeology,
    which is shown in the following figure. This allows players to easily interact
    with the interface without blocking the gameplay with their dominant hand.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1: Left-handed mode versus right-handed mode in Barkeology for iOS](img/Figure_4.1_B18327.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Left-handed mode versus right-handed mode in Barkeology for iOS'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Fantasy Life Online lets you choose between three locations for the placement
    of the “fury button” – a button that appears whenever a special attack is available
    to the player. This allows the player to pick a location that is most comfortable
    to them based on their playstyle and the way they hold their phone.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: For PC games, you can allow players to choose different input devices. For example,
    you can provide the option to play with a keyboard and mouse or a controller.
    You can allow players to map the keyboard or controller however they wish or give
    them predefined schemes to choose from. Allowing players to choose controller
    button schemes is also applicable to consoles.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: If your game has text, allow users to change the size or the speed at which
    it is presented to them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: There are many more examples of ways in which you can allow flexibility in your
    interfaces. When designing your interfaces, just be sure to consider the different
    preferences your players may have so that you can lay out your interface and map
    your inputs accordingly.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Simple and intuitive use
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simple and intuitive use principle states that a design should be easy to
    understand for people, regardless of their past knowledge, experience, skill,
    or language level.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Don’t make your interfaces overly complicated. If you have to explain it, it
    probably needs to be redesigned. Players who have never played a video game before
    should be able to understand your interface just as easily as a veteran.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Place the most important information in the most visible locations and make
    them the easiest to find. Don’t hide common functionality behind multiple button
    clicks and menus. If your menu system is nested and particular menus are accessed
    more frequently than others, consider mapping them to hotkeys or buttons.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Provide feedback to the user to let them know when they are interacting with
    your interface. If you have on-screen buttons meant to be interacted with by a
    tap or mouse click, have them provide feedback to the user to let them know when
    they have highlighted them or clicked on them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Provide prompts to the user that signal to the player which parts of your interface
    are interactable. You can accomplish this by designing buttons that look physically
    pressable or by drawing attention to items with animations or color schemes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s important to remember that your users will have various reading levels
    and may speak different languages. Reduce your dependency on text by using more
    **icon metaphors** when possible. Metaphors are symbols whose meanings are widely
    recognized. For example, most people will recognize the meaning of the buttons
    shown in the following figure as play, pause, menu, settings, close/cancel, confirm,
    mute, and save:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2: Examples of interface metaphors](img/Figure_4.2_B18327.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Examples of interface metaphors'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Accompany the icon metaphors with text so that users have multiple ways of perceiving
    what specific icons mean.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: It’s not always possible to completely remove all text from your game’s UI and
    replace it with icons and imagery. So, translating your game into multiple languages
    could increase your UI’s universal perceptibility. In [*Chapter 11*](B18327_11.xhtml#_idTextAnchor292),
    I will discuss things you can do while building your UI to make the translation
    process go more smoothly, as well as cover an example of creating a UI translation
    system.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Perceptible information
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The perceptible information principle states that information should be conveyed
    to users in a perceptible way regardless of the environment they are in or their
    sensory abilities. When considering this principle, you want to think of alternate
    ways in which information can be conveyed and how you can clearly convey it in
    multiple scenarios. Remember that the interface is the lens through which the
    player perceives and interacts with your game. So, they must be able to understand
    it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The colors of the UI should stand out compared to the background, but it should
    also not stand out so much that it causes eye strain. There is no specific color
    scheme you have to use for your game, but as a general rule, split complementary
    color schemes are the best for reducing eye strain while also producing enough
    contrast to make items distinguishable.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: High-contrast text will make it easier to see in different lighting. Make sure
    the text is appropriately sized so that it’s visible and allow the text to be
    resized to the user’s preference. Also, choose fonts that are clear and easy to
    read.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Voiceover isn’t just for dialogue! You can provide voiceover for your menus
    as well. Far Cry 6, for example, has an automated voice read out the various menu
    options on the start screen to allow those with visual impairments to still perceive
    the items on the screen. This option is turned on by default and does not require
    users to interact with a menu to access it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: If you’re making a console game, consider the fact that your players will have
    different types of TVs with different resolutions and brightness settings. Upon
    starting a PlayStation or Xbox game, you may have seen a prompt to adjust the
    brightness until an image was visible or maybe saw a prompt to move the corners
    of a box until they reached the edge of your screen. These prompts are safeguards
    to ensure that the game appears correctly to players regardless of their TV.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Tolerance of error
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tolerance of error principle states that adverse consequences of interacting
    with the design should be minimized. We’ve all accidentally saved over or deleted
    a save file at one point in our life without meaning to because we hit the wrong
    button or misread the directions. The tolerance of error principle is meant to
    minimize these types of occurrences.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: A well-designed interface doesn’t necessarily have to be convenient or easy
    to use. People love to click or tap quickly through things. Sometimes, we want
    to make that more difficult for them. The concept of **designing for inconvenience**
    involves making interfaces less convenient or more difficult to interact with.
    This may seem like a counterintuitive design, but if the interface that lets you
    delete that last save file you accidentally deleted were less convenient, perhaps
    your save file would still be with us.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Warning popups that ask users to double confirm a deletion, switching the location
    of affirmation buttons so that users don’t click quickly through things, adding
    timers between clicks, and requiring press and hold are all ways that we can make
    our interfaces slightly less convenient for the user to interact with when the
    consequences of interacting with it may be detrimental.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Low physical effort
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The low physical effort principle states that the design should be comfortable
    to use and fatigue and discomfort should be minimized. One of the guidelines for
    this principle states to minimize repetitive actions. This may seem impossible
    to do in video games, which, let’s face it, tend to require a lot of repetitive
    actions, but organizing your interfaces in ways that reduce clicks and mouse drags
    can improve the quality of your UI.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: One way to reduce physical effort with your interface is to group similar actions
    on the screen. Don’t make users bounce back and forth on the screen. Don’t require
    users to jump to multiple menus when it would be easier for them to do something
    all in a single view menu. You can reduce mouse usage/drag by assigning actions
    to hotkeys or creating shortcuts. Also, allowing users to navigate through menus
    with arrow keys or controller buttons rather than just the mouse may be more comfortable
    for some users.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: When designing UI in VR, the amount of physical effort needed to interact with
    your interface jumps exponentially compared to a game on a traditional 2D screen.
    Grouping similar items and allowing users to navigate menus with the controller
    rather than pointing will make interacting with your interface much more comfortable.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The rumble feature can be a great way to provide feedback for your interface
    and gameplay, but it can also be considered uncomfortable to some players and
    has been purportedly linked to hand-arm vibration syndrome. If you include it,
    be sure to allow users to turn it off.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: One frustrating interaction on a console game is entering information into a
    form. If you have players enter long text strings with an on-screen keyboard,
    having to navigate to each letter gets very tedious, very fast. Consider the possibility
    of allowing players to enter these long strings on their phone or computer and
    send the data to the game, instead of on the console.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Size and space for approach and use
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The size and space for approach and use principle states that interfaces should
    allow users to interact with them regardless of their mobility, size, posture,
    or position. This principle ties closely to the previous principle of low physical
    effort in that you want them to not only be able to physically interact with your
    interface but also do so comfortably.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: When determining the keyboard layout for your game, make sure that the player
    does not have to stretch their hands in ways that are either impossible or uncomfortable
    for those with smaller hands. If you have two buttons on a controller that are
    frequently used together, you want to make sure that the button combination is
    doable. For example, you do not want to ask them to hold down both the X button
    and the B button on the Xbox controller at the same time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Allowing for multiple types of input devices is key to this principle as it
    will allow people to use input devices designed for their specific size and mobility.
    For example, with a PC game, some people may find interacting with a controller
    easier than a keyboard.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, allowing for the sensitivity of your inputs to be adjusted can
    help those with different mobility issues. For example, I have problems with hand
    pain and tremors. When I can adjust the sensitivity on controllers and mice, this
    makes it easier for me to interact with the game in a way that doesn’t affect
    gameplay and can reduce the pain I experience doing so.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: When designing a VR interface, don’t put UI items too high or too far away from
    the player’s reach. This could make it impossible for smaller players, players
    sitting down, or players with mobility issues to interact with your UI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B18327_02.xhtml#_idTextAnchor024), we discussed the thumb zone.
    This is a location of the screen that can be easily reached by the player’s thumb
    while they’re holding their phone and where most of your interactable UI should
    be placed. We also want to make sure that buttons are as big as possible on mobile
    screens. You don’t want the buttons to be so small and so close together that
    those with larger hands would not be able to interact with them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve reviewed the various principles of universal design, let’s look
    at how we could design specifically for those with impairments and disabilities.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Accessibility design
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recall that universal design involves designing UI that is universally usable
    for all people. Accessibility design, on the other hand, involves designing with
    specific impairments and disabilities in mind. In this section, I will discuss
    a few very specific types of impairments and disabilities and how you can design
    your UI in such a way that it is accessible to individuals with these impairments
    and disabilities. A few of these examples will overlap with the ones that I discussed
    in the universal design section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Vision
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing your interfaces, you should consider different types of visual
    impairments and disabilities, including (but not limited to) color blindness,
    low vision, and blindness.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Essential information should never be conveyed by color alone and you should
    always include another way of conveying that information. For example, let’s say
    a game has a number that is red when negative and green when positive. That number
    could also have negative and positive symbols to indicate the sign. If the number
    represents some change, maybe it can fly up when positive and fly down with negative.
    This will make sure those who have color blindness will still be able to see these
    important pieces of information.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Whenever possible, you should avoid color combinations that will be indistinguishable
    for those who are color blind; if it’s not possible, use other indicators to make
    items distinct. For example, if you have a match three game that uses colors to
    indicate matchable pieces, also include symbols on the pieces to make them easier
    to distinguish.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'The following websites offer very good information on designing accessible
    UI for color blindness:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/theuxblog/how-to-design-for-color-blindness-a6f083b08e12](https://medium.com/theuxblog/how-to-design-for-color-blindness-a6f083b08e12)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.smashingmagazine.com/2016/06/improving-color-accessibility-for-color-blind-users/](https://www.smashingmagazine.com/2016/06/improving-color-accessibility-for-color-blind-users/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As stated earlier in this chapter, you should make sure that your text and
    other UI elements have very high contrast. This makes it easier for those with
    color blindness and those with low vision to be able to clearly perceive your
    UI. The following website is an excellent resource for being able to check the
    contrast between two colors: [https://webaim.org/resources/contrastchecker/](https://webaim.org/resources/contrastchecker/).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: While the preceding website shows if colors meet a contrast ratio required by
    web regulations, the information translates well to video games.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: If you have important information that only appears temporarily on the screen
    in the form of a popup, make sure it appears in the player’s line of sight. Placing
    it outside of the line of sight could be difficult for those with low peripheral
    vision to see. Better yet, allow the player to choose where on the screen the
    important information will pop up.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Remember, according to the principles of universal design, choice is very important.
    Allow players to change settings for as many of the visual elements as possible.
    If your game uses a crosshair or cursor, allow the player to change the appearance
    of the crosshair or cursor. Allow your players to change the size of the interface
    or text. Allow players to change the font of the interface to one that has higher
    kerning or spacing or is less frilly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: It’s also important to indicate information in ways that are not purely visible.
    For example, suppose your UI turns red to indicate your player has low health
    and you have a red health meter on the screen. You can also include a beeping
    sound and a vibration of the controller to indicate low health. This will help
    those with both low vision and color blindness be able to perceive the low health
    status.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: If you have input boxes, you can use speech as a way to input text, rather than
    just a visual keyboard for input.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can also use a description track to describe all of the user interface
    elements of your game, thus allowing those with low vision and blindness to still
    be able to perceive what is on the screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Hearing and speech
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are multiple ways in which you can make your interface accessible to those
    with hearing and speech impairments in disabilities. Essentially, you do not want
    any important information to be conveyed through sound alone and you do not want
    to require speech for any of your inputs. Additionally, if your UI makes any type
    of noise, keep overlapping noises to a minimum.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: In the low-health example I described previously, there were multiple ways other
    than just the beeping sound in which the player was made aware of the low health.
    If your UI includes speech input, make sure that it is not the only form of input
    and allows users to input information through other means.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: While it might not seem like an interface design, including subtitles for all
    spoken dialogue, would need to be designed as a UI element. Your UI for subtitles
    will need to be clear and readable. Usually, you should put them in some sort
    of box so that they easily contrast against the background. You also want to make
    sure that they sync up with the spoken speech in the game.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Mobility
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing your interfaces, you want to make sure they are accessible for
    people with all levels of mobility. The best way to make your game accessible
    to mobility levels is to include as many options as possible for input devices,
    input mappings, and configurations. Allowing the player to choose for themselves
    how they interact with your interface might ensure that it fits their particular
    mobility needs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: You want your controls to be as simple as possible and require as few buttons
    as possible. If your controls are particularly complicated, provide alternatives
    that simplify the control scheme.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, don’t require the player to use an input for a small part of the
    game that is different than the rest of the game. For example, if most of the
    game is controlled by a keyboard, don’t require the start screen to be interacted
    with by a mouse. Allow the player to use the same input device for all aspects
    of the game.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Cognitive and emotional
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s important to consider the cognitive and emotional states of your players
    as well as their language skills when designing your user interface.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Don’t assume that your player can read the language in which you have created
    your UI or that they can read quickly. If your game contains text, use other contextual
    elements and images to convey the text’s intent. If you have text that displays
    in your UI and then goes away, allow players the ability to choose when it goes
    away rather than having it do so at its own speed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Use your UI to remind players of important gameplay elements and important information
    about how to interact with your interface. Remind your players of what the controls
    are by prominently displaying them in your UI. Use your UI to clearly indicate
    interactive elements and objectives.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Don’t place flickering images or repetitive patterns in your UI as this could
    be triggering to individuals prone to seizures.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: While this is probably more related to your gameplay than your user interface,
    I would like to point out that content warnings in your games with particularly
    triggering content can be helpful to prepare your user for things that may cause
    distress. For example, many games now come with a content warning if they have
    upsetting content (such as Doki Doki Literature Club).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is so much more I could say about the universal design and accessibility
    design aspects of user interfaces, but alas, this is not a book about designing
    UI it is about the development of UI. I hope this chapter at least gave you an
    insight into how important it is to consider these elements and how important
    it is to consider them at the beginning of your user interface development.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我本可以就用户界面的通用设计和可访问性设计方面说很多，但遗憾的是，这不是一本关于设计UI的书，而是关于UI开发的书。我希望这一章至少让你认识到考虑这些元素的重要性，以及它们在用户界面开发初期考虑的重要性。
- en: 'If you’d like to learn more about accessibility design, I highly recommend
    that you review the information provided at the following website: [https://gameaccessibilityguidelines.com/full-list/](https://gameaccessibilityguidelines.com/full-list/).
    It provides an extensive list of best practices related to accessibility for video
    games. Additionally, it provides multiple examples of best practices that you
    can use for reference.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于可访问性设计的知识，我强烈建议你查看以下网站提供的信息：[https://gameaccessibilityguidelines.com/full-list/](https://gameaccessibilityguidelines.com/full-list/)。它提供了一系列关于视频游戏可访问性的最佳实践。此外，它还提供了多个最佳实践示例，你可以作为参考使用。
- en: You can also visit [https://caniplaythat.com/](https://caniplaythat.com/), a
    website that provides information about accessibility in the gaming industry.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以访问[https://caniplaythat.com/](https://caniplaythat.com/)，这是一个提供游戏行业可访问性信息的网站。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed some key considerations for designing your UI
    so that it will be as universally perceivable as possible. We discussed the principles
    of universal design and reviewed some considerations you can implement in your
    designs to improve their accessibility.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些设计UI的关键考虑因素，以便使其尽可能普遍可感知。我们讨论了通用设计的原则，并回顾了一些你可以实施在设计中的考虑因素，以改善其可访问性。
- en: In the next chapter, we will leave the design discussion behind and start looking
    at how to implement UI. We’ll review the different interface systems available
    in Unity so that you can start putting some of this design knowledge to use!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将结束设计讨论，开始探讨如何实现UI。我们将回顾Unity中可用的不同界面系统，这样你就可以开始应用一些设计知识了！
