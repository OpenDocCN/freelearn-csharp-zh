- en: Snap it! Adding Filters to Pictures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create an application that will allow us to add an
    overlay over a person's head. If this application sounds familiar, that is because
    there are many applications that are on the market that do just this, and today, you
    will learn how to do so as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating OpenCV into Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a prototype project using OpenCV and Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project makes heavy use of facial recognition-and-detection algorithms,
    which requires knowledge of OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: two hours'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover a few things that you will need and some optional
    items for more in depth building from source requirements.
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV 3.4.1, which you can find at [https://opencv.org/releases.html](https://opencv.org/releases.html),
    is the library itself in pure source form or in library form. If you want the
    Unity specific plugin, you can purchase it from [https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088](https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088),
    along with the sister library file at [https://enoxsoftware.com/dlibfacelandmarkdetector/](https://enoxsoftware.com/dlibfacelandmarkdetector/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity 2018 can be download from [https://store.unity.com/](https://store.unity.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio, a requirement for writing or compiling source code, can be downloaded
    from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CMake, which you can download from [https://CMake.org/download/](https://cmake.org/download/),
    is required when building your own version of the library, the plugin, and the
    source for OpenCV.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python, which is a requirement if you need to build your own library for OpenCV,
    can be downloaded from [https://www.python.org/getit/](https://www.python.org/getit/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is OpenCV?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OpenCV** stands for **Open Computer Vision**. OpenCV is an open source computer
    vision and machine learning software library that was built with C++ and has C++,
    Python, Java, and Matlab interfaces to support Windows, Linux, Android, and macOS.'
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV mainly focuses on real-time vision applications, although it can be used
    for machine learning very nicely. The library has many optimized algorithms and
    functions to compose or support such algorithms for state-of-the-art computer
    vision and machine learning, with roughly 2,500\. To break down the ratio here,
    there are roughly 500 algorithms, and the rest are functions to compose or support
    these algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Talking about algorithms is fun and all, but I’m sure you are more interested
    in knowing what these algorithms are capable of doing. The algorithms are designed
    to be used to detect faces, recognize faces, identify objects, detect and classify
    human actions in video feeds, track camera movements, move object tracking, extraction
    of 3D models from objects, produce point clouds from stereo cameras in 3D, stitch
    images together for high resolution images, quickly find the same or similar images
    from an image database, red-eye removal, eye tracking, detect scenery, and establish
    markers for augmented reality overlay, and so much more.
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV can work with TensorFlow, Caffe, Torch, Yolo, Vuforia, ARCore, and ARKit
    with ease. OpenCV can be used for **Augmented Reality** (**AR**), **Virtual Reality**
    (**VR**), and **Mixed Reality** (**MR**). You can use visual scripting options,
    such as PlayMaker, and have access to all methods available in OpenCV. OpenCV
    also works with tons of different hardware, such as HoloLens, Oculus Rift, Telepathy,
    Kinect, and Raspberry Pi, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: We have two different options for gaining access to OpenCV. The first one is
    to build from source and create our own wrappers to create a Unity plugin for
    OpenCV. The second option is to purchase OpenCV for Unity from the Unity Asset
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to go the easy route and purchase the Unity extension, it will cost
    70 dollars, unless you have a Unity Plus/Pro membership, which will decrease the
    cost to 56 dollars. The good news is that it supports Unity Version 5.6 or greater
    and is based on OpenCV 3.4.1.
  prefs: []
  type: TYPE_NORMAL
- en: There are sample assets packs that you can download from the Unity Asset Store
    or from GitHub that will give you prebuilt examples for working with HoloLens
    Face Detection Overlay, FaceLandmark Detection, Facemasking, Real-time Face Recognition,
    Markerless AR. Face Swapping, Kinect with OpenCV, Facetracking, working with Vuforia
    and OpenCV, and marker-based AR.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the other option, in other words, the cheap route, because, let's be honest,
    the Unity plugin is rather pricey, especially for younger developers or those
    who just want to try out OpenCV to see whether it is a good fit, is to build from
    source. What benefits do we gain from build from source, besides the low cost?
  prefs: []
  type: TYPE_NORMAL
- en: We get to decide which aspects of the library we need, for one. This is a huge
    bonus, as we can remove bloat to reduce the file and compile size. However, even
    when doing this, you can have the same features, or even more than the Unity plugin,
    since you are building from source.
  prefs: []
  type: TYPE_NORMAL
- en: The downside is that there are many things you need to get the full compilation
    of the source taken care of, which is dependent on whether you want to use prebuilt
    binaries or building your own library from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: To build from scratch, you will need Visual Studio with C++ modules installed,
    CMake, Python Version 2.7 or later, Numpy, **Intel Threading Building Blocks**
    (**TBB**), **Intel Integrated Performance Primitives** (**IPP**), Intel IPP Asynchronous
    C/C++, Eigen, CUDA Toolkit, OpenEXR, OpenNI Framework, and Doxygen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project with paid assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will use the Unity asset files, as they are a bit shorter
    to set up. The Dlib FaceLandmark Detector costs 40 dollars, and OpenCV for Unity
    costs 70 dollars. That means to build this project, you will need to have spent
    110 dollars. Sadly, there are no free alternatives in the Unity Asset store, and
    if you want to build the project without purchasing the assets, you will need
    to build the wrappers and implementations on your own. Now, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a brand new Unity Project. I will call mine `Snap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64f7bcea-1fb3-4ca0-b3e8-2b5e35ce97c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure your `Assets` directory is completely empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f324d43-9919-4ab8-8c67-1ab91427bc03.png)'
  prefs: []
  type: TYPE_IMG
- en: The text in this screenshot is not important. It indicates that the Assets directory
    is empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by importing OpenCV into Unity. This will take some time to complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/890e2dc0-d64b-4681-be2e-6393cfc91f44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will have many examples that include some very nice shaders that can be
    used in other projects, so import everything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/524a3073-d311-4eb9-afad-05e1f3fb44df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your `Assets` directory should have an `OpenCVForUnity` and a `Realistic_Water_Fountain`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f6005e6e-6c14-4336-b053-eaa6ec51ed9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we will need to import the Dlib Facelandmark Detector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last asset we will need is the FaceMask Example. Click on this link: [https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999](https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999).
    [](https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This package contains some additional scripts, as well as some examples of how
    to apply face masking to the camera, to be able to record videos or take a picture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the FaceMask Example scene, and this will create our basic prototype.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a working prototype for Snap it. You can add more features such
    as different items to cover the face, cover only a small portion of the head,
    add shader effects to the scene, and so much more to create your own feature-rich
    AR application based on OpenCV and the Dlib Facelandmark Detector.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and building OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, what if you don’t have the funds to build this project with paid assets
    that would make your life easier? Well, the option is to build from scratch. It
    is much more involved and is generally a rabbit hole that more experienced developers
    tend to go down than beginners.
  prefs: []
  type: TYPE_NORMAL
- en: This isn’t to say that beginners can’t follow along and build from scratch themselves;
    in fact, I suggest that if you are a beginner, follow along, as there are many
    new things to learn from this exercise, from dealing with other people’s source
    files, to incorporating them into your own projects with an understanding of that
    code base.
  prefs: []
  type: TYPE_NORMAL
- en: To get OpenCV set up to run with Unity, we have a few steps we need to go through.
    We need to download OpenCV and CMake. OpenCV is the library we will be heavily
    utilizing, and CMake is the software that allows us to manage the build process
    in any given operating system and compiler with independence in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started by first downloading OpenCV. We could go down the route
    of getting the pure source files or by getting the prebuilt binaries, both of
    which have their own pros and cons associated with them. For example, the pure
    source files version would require us to have every library used within OpenCV
    and language associated installed and configured to be able to build our own binaries.
    We will simplify the process just a hair, by going with the prebuilt binaries
    approach. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with building OpenCV from prebuilt binaries, we first need to
    download the files we need. There are two possibilities for this, [https://opencv.org/opencv-3-3.html](https://opencv.org/opencv-3-3.html) or [https://sourceforge.net/projects/opencvlibrary/](https://sourceforge.net/projects/opencvlibrary/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e809b27c-d8c5-4827-b9c7-15e9deb929ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to choose the installation version we want; in this case, I am going
    to go with the latest version, which is `3.4.1`, as it is the same as the Unity
    extension version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db0ce217-96bd-4d8a-b2da-8a1eb5777a33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The executable file is 172 MB in size, so, depending on your internet connection
    speeds, you could have a long download time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ba285fe-7f10-473c-b197-64858e3846b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new folder to house the extracted OpenCV files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da706ce1-662a-43fa-bc2e-308d8bebb54f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have our OpenCV self-extracting file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c4aa73f-92da-4d5a-a5d1-ac538038b2f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on the installer file, and select Run as administrator. We need
    to have elevated privileges to make sure the project extracts correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5a4224b-4f59-4e2e-ae9b-fdebf4a02a5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the folder you created as the installation location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2b5cffa-114f-4302-952c-38e4d5b6f868.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extracting the files should not take long:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a4c8b69-656f-40d7-90de-6c598a0dc69b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have extracted OpenCV.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading CMake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that OpenCV has been download, it is time to do the same for CMake, as both
    of these files are integral to continuing properly.
  prefs: []
  type: TYPE_NORMAL
- en: This is only the case if you decided to go with the source direction instead
    of the binaries method, so I will touch on these steps a little as well.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading CMake is a rather quick and painless process, regardless of whether
    you are using Linux, macOS, or Windows. Since I want to build with Windows, I
    will showcase the steps with that particular OS in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [CMake.org](http://cmake.org); click on download latest, and scroll down
    to latest release to download CMake:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa543085-c027-4290-969c-00071cb4f76f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on CMake to run the setup wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81fb3d13-abaa-45b1-a644-b1675689ef39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Put a check mark in the *License Agreement* block and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/503a8932-2986-4376-940f-225476bca0c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to Add CMake to the system PATH for current or all users, depending
    on your preference. Just make sure that it is set to the system path before clicking
    Next**:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f6792e1-5178-40bd-b1c6-219b29b9bd80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Next to install CMake to whatever folder you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/895b373b-3549-4e5d-9c85-04075fc19475.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To install CMake, it requires elevated privilges, so if you have UAC enabled
    and don''t have admin rights, make sure you have someone nearby that can give
    you access to install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1dc79725-65c3-4e93-b1b0-415709c97e70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Installation will take a few minutes to complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7638fe0b-cd20-4ced-9cd4-03beb389e82b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Finish to complete the installation process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e33cc4b8-c7ec-4b02-b02c-79215c18c6cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the CMake and OpenCV source files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can move on to configuring CMake and getting everything set up to build
    OpenCV as a library to utilize within Unity. Now, to do this, you need the full-on
    source code of OpenCV, instead of the binaries, which you can grab from [https://github.com/opencv/opencv/archive/3.3.0.zip](https://github.com/opencv/opencv/archive/3.3.0.zip).
    or [https://github.com/opencv/opencv/archive/3.3.0.zip](https://github.com/opencv/opencv/archive/3.3.0.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Start *CMake (*`CMake-gui`*)*. You may again enter it in the start menu search
    or get it from All Programs | CMake 2.8 | CMake (`CMake-gui`). First, select the
    directory for the source files of the OpenCV library (1). Then, specify a directory
    where you will build the binary files for OpenCV library (2).
  prefs: []
  type: TYPE_NORMAL
- en: Press the Configure button to specify the compiler (and the IDE) you want to
    use. Note that you can choose between different compilers for making either 64
    bit or 32 bit libraries. Select the one you use in your application development.
  prefs: []
  type: TYPE_NORMAL
- en: CMake will start based on your system variables and will try to automatically
    locate as many packages as possible. You can modify the packages to use for the
    build in the *WITH ‣ WITH_X* menu points (where *X* is the package abbreviation).
  prefs: []
  type: TYPE_NORMAL
- en: Select all the packages you want to use, and again press the Configure button.
    For an easier overview of the build options, make sure the Grouped option under
    the binary directory selection is turned on. For some of the packages, CMake may
    not find all of the required files or directories. If it doesn't find all of them,
    CMake will throw an error in its output window (located at the bottom of the GUI)
    and set its field values to not-found constants.
  prefs: []
  type: TYPE_NORMAL
- en: Press the Configure button again and ensure that no errors are reported. CMake
    will create the project files by pushing the Generate button. Go to the build
    directory and open the created OpenCVsolution. Depending on just how many options
    you have selected, the solution may contain quite a lot of projects, so be tolerant
    on the IDE at the startup. Now, you need to build both the Release and the Debug binaries.
    Use the drop-down menu on your IDE to change to another of these after building
    for one of them.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, you can observe the built binary files inside the bin directory.
  prefs: []
  type: TYPE_NORMAL
- en: To collect the header and the binary files, which you will use during your own
    projects, into a separate directory (similarly to how the pre-built binaries ship),
    you need to explicitly build the Install project.
  prefs: []
  type: TYPE_NORMAL
- en: To test your build, just go into the Build/bin/Debug or the Build/bin/Release directory
    and start a couple of applications, such as `contours.exe`. If they run, you are
    done.
  prefs: []
  type: TYPE_NORMAL
- en: For more in-depth information on this, go to [https://docs.opencv.org/3.0-beta/doc/tutorials/introduction/windows_install/windows_install.html](https://docs.opencv.org/3.0-beta/doc/tutorials/introduction/windows_install/windows_install.html).
    The OpenCV documentation will go into this in more detail, along with the other
    tools you will need to install to go down this route.
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV with Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can now move on to importing our dlls into Unity and writing our wrapper
    classes to handle interfacing with OpenCV and Unity. That way, we can then create
    our scripts to build our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder. I will call mine `ConfigureOpenCV`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3edd7e61-e7b6-4d7b-b13f-955a660da48e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to create a new empty C++ project in Visual Studio. I will call mine
    `ConfigureOpenCV`, with the location being set in the `ConfigureOpenCV` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d660bf5-5a49-44cf-9ef0-ebc1f10cbc98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the platform to be x64 in Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f55c008-b1d3-409a-a190-d25f909da730.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on the project properties file and select Properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb89f7de-2ded-4b07-b162-e323f75f57bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open our properties window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae69cc62-b35f-4c71-b226-a6ace13773cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing we need to do is change Target Extension in the General tab
    from `.exe` to `.dll`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0689343f-c04e-4bd8-b999-4f3da3d80307.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to change the Configuration Type from Application (.exe) to Dynamic
    Library (.dll):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f7f6cfb-5012-4327-8ea9-e881014a1c40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Over in VC++ Directories, add our `OPENCV_DIRs` to include it in Include Directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/598d5514-5071-4414-8a86-c8e04593f4e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Over in Linker’s General Tab, add `$(OPENCV_DIR)\lib\Debug` to the Additional
    Library Directories option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce80415d-0e19-4f1f-8506-144a981ddc66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, in the Linker’s Input tab, we need to add a few items to the Additional
    Dependencies option. Those items will be the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`opencv_core310.lib` (or `opencv_world330.lib`, depending on your OpenCV version)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opencv_highgui310.lib`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opencv_objdetect310.lib`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opencv_videoio310.lib`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opencv_imgproc310.lib`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a184e3dd-cefb-4278-a556-710f1ac4fe0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure shows the location of Additional Dependencies in the Linker's Input tab
    with opencv_core added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can create a new CPP file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/065b7a6c-3440-4dd3-bfc3-7b5c91533284.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now incorporate the headers and namespaces we absolutely need here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare a `struct` that will be used to pass data from C++ to Mono:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`CascadeClassifer` is a class used for object detection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a string that will serve as the name of the window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Video Capture is a class used to open a video file, or capture a device or
    an IP video stream for video capture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an integer value to store the scale:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`extern "C"`, as a refresher, will avoid name mangling from C++. Our first
    method is `Init` for initialization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create an `if` statement to load the LBP face `cascade.xml` file that
    is part of `CVFeatureParams`; if it cannot load, then it will exit with a return
    code of `-1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will open the video capture stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If the video stream is not opened, then we will exit with a return code of
    `-2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will set the camera width:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And we also need to set the camera height:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to make sure that we create a method to close the capture stream
    and release the video capture device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create a method that sets the video scale:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we will create a method that allows us to detect an object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, if the frame is empty, we need to guard against possible errors from
    this by exiting from the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Create a vector called `faces`*:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create Mat, which is one of the various constructors that forms a matrix
    with the name of `grayscaleFrame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to convert the frame to grayscale from RGB colorspace for proper
    cascade detection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to scale down for better performance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we will detect the `faces`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now create a for loop to draw the faces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will send this information to the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have a matrix, we need to make sure that we don''t exceed the limits
    of the array. To do this, we will break if the faces count is equal to the max
    amount of faces count we have allocated; if it is, exit from the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing we need to do is display the debug output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, build the `dll` file, and we can now begin to work in Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenCV and Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can finally start working in Unity in this section. This is the easier
    part, where we just need to create our wrapper and our `MonoBehaviour` script
    to attach to an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `dll` file that we created. This should be in the x64 | Debug
    folder of the source project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38201014-b86b-40bc-ab33-12366254ab8a.png)'
  prefs: []
  type: TYPE_IMG
- en: Create two folder called `Plugins` and `Scripts` in Unity, just as we did in
    `Chapter3`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create two scripts. One for our `Wrapper` class, and the other
    for our `MonoBehaviour`. The `Wrapper` class will be called `OpenCVWrapper`, and
    the `MonoBehaviour` class will be called `OpenCVFaceDetection`.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `OpenCVWrapper` class in Visual Studio. It is time to write some more
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We only need to use the `InteropServices` namespace for this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create an `internal static class` this time around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We will import the `Init` function that we created in the last step, and we
    need to make sure that we reference the parameters. The `ref` keyword is very
    similar to the `&` keyword in C++:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We will import the `Close` function, which closes the connection and will avoid
    memory leaks when we use the functions that we''ve created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We will import the `SetScale` function we created, along with keeping the parameters
    that we required in C++:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We will import the `Detect` function, and this one is a bit different, as we
    are actually using a pointer; this will be very important very soon, as this deals
    with unsafe code in C# and Unity. If you aren''t familiar, the `*` keyword denotes
    a pointer, which is the address of the object in memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we will create a structure that needs to be sequential and with the
    correct byte size (3 ints = 4 bytes * 3 = 12 bytes) for CvCircle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This takes care of the wrapper class, and we can now move over to our `MonoBehaviour`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a few namespaces, as they will be fully utilized in this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We have our class named the same as the file in the Unity Editor and inherit
    from `MonoBehaviour`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The main thing to notice here is that I have a reference to the camera and
    a `WebCamTexture`. This is because we will feed the data from the webcam to the
    camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `Start` method, we get everything set up and running. We also check
    to make sure that the `cascades.xml` file is able to be found (more on that in
    the next section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This method will make sure that the connections are closed to the webcam. This
    will free up the resources and make sure that we don''t leak any memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This `Update` method makes sure that the orientation of the webcam is corrected,
    checks whether the camera is read or not, and actively tracks for face detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and go back to the Unity Editor. You will immediately notice
    that Unity will show an error along the lines of *unsafe code needs to be allowed*.
    Let's go ahead and enable this feature. To do this, go to your Player Settings,
    which is located inside the Build Settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the Player Settings, look down at the configuration inside Other Settings,
    and there is a checkbox called Allow ''unsafe'' Code. Make sure that it is checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f76df7c-042d-4539-9be0-99b572b37bb9.png)'
  prefs: []
  type: TYPE_IMG
- en: In the `Scripts` folder, you need one more file to be added; in my example file
    that you can download, I have quite a few more `.xml` files than what I am going
    to tell you to add. The reason for this is to allow you to play around with the
    different `.xml` files to see their results. You will have to update the C++ plugin
    to account for the proper `.xml` file you want to use; alternatively, you can
    update the `Init` function to take a string parameter to be able to change the
    `.xml` file in the Unity Editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `OpenCV` folder, navigate to `OpenCV\opencv\build\etc\lbpcascades`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/018651ad-d491-4274-8547-159c82b3f5ef.png)'
  prefs: []
  type: TYPE_IMG
- en: You want to copy `lbpcascade_frontalface.xml` into the scripts folder in Unity.
    (My project has everything in an `XML` folder, as I have many more `.xml` files
    to play with.)
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we just need to create a plane to face the camera.
  prefs: []
  type: TYPE_NORMAL
- en: The last step is to attach the `OpenCVFaceDetection` script to the plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the project will compile and run appropriately (if you get a dll import
    error, make sure you have the dll set to x86-x64 and that the project is built
    for Windows):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f110ed7-1497-4c1b-ae33-1cd683788c50.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use CMake to build OpenCV from source, to
    import it into Unity, and create an AR application similar to many on the market
    that are able to add images over a person's face and track their movements reliably,
    by using OpenCV and DLib FaceLandmark Detector, using Dlib C++Library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next, and final, chapter, we will look into building for MR devices such
    as HoloLens. As a short teaser, MR incorporates elements from AR and VR into a
    single game or application, which can prove to have massive and interesting effects.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenCV is cross-platform and can work with Android, Linux, MacOS, iOS, Windows,
    HoloLens, and Oculus Rift:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'The Dlib C++ Library is required to make OpenCV work on Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenCV cannot be built from source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity is not compatible with OpenCV:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use OpenCV with ARKit, ARCore, and Vuforia:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenCV is a library designed for machine learning and computer vision:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenCV can be used with AR, VR, and MR project types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the free assets that give you deeper insight into how to use OpenCV with
    Unity, you can download them from this GitHub link: [https://github.com/EnoxSoftware/OpenCVForUnity](https://github.com/EnoxSoftware/OpenCVForUnity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To read the documentation on the Dlib C++ library, go to [http://dlib.net/](http://dlib.net/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn about the methods, properties, fields, and OpenCV tutorials in C++,
    Python, and Javascript, and to gain deeper understanding of how OpenCV is put
    together, you can go to this link: [https://docs.opencv.org/3.4.1/](https://docs.opencv.org/3.4.1/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
