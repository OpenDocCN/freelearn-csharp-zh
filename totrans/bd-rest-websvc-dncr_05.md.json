["```cs\n// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n  if (env.IsDevelopment())\n  {\n    app.UseDeveloperExceptionPage();\n  }\n  app.UseMvc();\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app)\n{\n  async Task Middleware(HttpContext context, Func<Task> next)\n  {\n    //other stuff\n    await next.Invoke();\n    //other stuff\n  }\n  app.Use(Middleware);\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app, ILoggerFactory logger)\n{\n  logger.AddConsole();\n  //add more stuff that does not responses client\n  async Task RequestDelegate(HttpContext context)\n  {\n    await context.Response.WriteAsync(\"This ends the request or \n    short circuits request.\");\n  }\n  app.Run(RequestDelegate);\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app)\n{\n  app.UseMvc();\n  app.Map(\"/testroute\", TestRouteHandler);\n  async Task RequestDelegate(HttpContext context)\n  {\n    await context.Response.WriteAsync(\"This ends the request or \n    short circuit request.\");\n  }\n  app.Run(RequestDelegate);\n}\n```", "```cs\nprivate static void  TestRouteHandler(IApplicationBuilder app) \n{\n  async Task Handler(HttpContext context)\n  {\n    await context.Response.WriteAsync(\"This is called from testroute.\n    \" + \"This ends the request or short circuit request.\");\n  }\n  app.Run(Handler);\n}\n```", "```cs\npublic class Product\n{\n  public Guid Id { get; set; }\n  public string Name { get; set; }\n  public string Description { get; set; }\n  public string Image { get; set; }\n  public decimal Price { get; set; }\n  public Guid CategoryId { get; set; }\n  public virtual Category Category { get; set; }\n}\n```", "```cs\npublic interface IProductRepository\n{\n  void Add(Product product);\n  IEnumerable<Product> GetAll();\n  Product GetBy(Guid id);\n  void Remove(Guid id);\n  void Update(Product product);\n}\n```", "```cs\npublic class ProductRepository : IProductRepository\n{\n  private readonly ProductContext _context;\n  public ProductRepository(ProductContext context) => \n  _context = context;\n  public IEnumerable<Product> GetAll() => _context.Products.\n  Include(c => c.Category).ToList();\n  public Product GetBy(Guid id) => _context.Products.Include\n  (c => c.Category).FirstOrDefault(x => x.Id == id);\n  public void Add(Product product)\n  {\n    _context.Products.Add(product);\n    _context.SaveChanges();\n  }\n  public void Update(Product product)\n  {\n    _context.Update(product);\n    _context.SaveChanges();\n  }\n  public void Remove(Guid id)\n  {\n    var product = GetBy(id);\n    _context.Remove(product);\n    _context.SaveChanges();\n  }\n}\n```", "```cs\nservices.AddScoped<IProductRepository, ProductRepository>();\nservices.AddDbContext<ProductContext>(\no => o.UseSqlServer(Configuration.GetConnectionString\n(\"ProductConnection\")));\nservices.AddSwaggerGen(swagger =>\n{\n  swagger.SwaggerDoc(\"v1\", new Info { Title = \"Product APIs\", \n  Version = \"v1\" });\n});\n```", "```cs\n\"ConnectionStrings\": \n{\n  \"ProductConnection\": \"Data Source=.;Initial \n  Catalog=ProductsDB;Integrated \n  Security=True;MultipleActiveResultSets=True\"\n}\n```", "```cs\n[HttpGet]\n[Route(\"productlist\")]\npublic IActionResult GetList()\n{\n  return new \n  OkObjectResult(_productRepository.GetAll().\n  Select(ToProductvm).ToList());\n}\n```", "```cs\nprivate ProductViewModel ToProductvm(Product productModel)\n{\n  return new ProductViewModel\n  {\n    CategoryId = productModel.CategoryId,\n    CategoryDescription = productModel.Category.Description,\n    CategoryName = productModel.Category.Name,\n    ProductDescription = productModel.Description,\n    ProductId = productModel.Id,\n    ProductImage = productModel.Image,\n    ProductName = productModel.Name,\n    ProductPrice = productModel.Price\n  };\n}\n```", "```cs\nprivate readonly IProductRepository _productRepository;\npublic ProductController(IProductRepository productRepository)\n{\n  _productRepository = productRepository;\n}\n```", "```cs\npublic class LogActions \n{\n  public const int InsertProduct = 1000;\n  public const int ListProducts = 1001;\n  public const int GetProduct = 1002;\n  public const int RemoveProduct = 1003;\n}\n```", "```cs\nprivate readonly IProductRepository _productRepository;\nprivate readonly ILogger _logger;\npublic ProductController(IProductRepository productRepository, ILogger logger)\n{\n  _productRepository = productRepository;\n  _logger = logger;\n}\n```", "```cs\n[HttpGet]\n[Route(\"productlist\")]\npublic IActionResult GetList()\n{\n  _logger.LogInformation(LogActions.ListProducts, \"Getting all\n  products.\");\n  return new \n  OkObjectResult(_productRepository.GetAll().Select(ToProductvm).\n  ToList()); \n}\n```", "```cs\nprivate readonly IProductRepository _productRepository;\nprivate readonly ILogger<ProductController> _logger;\npublic ProductController(IProductRepository productRepository, ILogger<ProductController> logger)\n{\n  _productRepository = productRepository;\n  _logger = logger;\n}\n```", "```cs\npublic static void Main(string[] args)\n{\n  var webHost = new WebHostBuilder()\n  .UseKestrel()\n  .UseContentRoot(Directory.GetCurrentDirectory())\n  .ConfigureAppConfiguration((hostingContext, config) =>\n  {\n    var env = hostingContext.HostingEnvironment;\n    config.AddJsonFile(\"appsettings.json\", optional: true,\n    reloadOnChange: true)\n    .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", \n    optional: true, reloadOnChange: true);\n    config.AddEnvironmentVariables();\n  })\n  .ConfigureLogging((hostingContext, logging) =>\n  {\n    logging.AddConfiguration(hostingContext.Configuration.\n    GetSection(\"Logging\"));\n    logging.AddConsole();\n    logging.AddDebug();\n  })\n  .UseStartup<Startup>()\n  .Build();\n  webHost.Run();\n}\n```", "```cs\n{\n  \"ApplicationInsights\": \n  {\n    \"InstrumentationKey\": \"\"\n  },\n  \"Logging\": \n  {\n    \"IncludeScopes\": false,\n    \"Console\": \n    {\n      \"LogLevel\": \n      {\n        \"Default\": \"Warning\",\n        \"System\": \"Information\",\n        \"Microsoft\": \"Information\"\n      }\n    }\n  },\n  \"ConnectionStrings\": \n  {\n    \"ProductConnection\": \"Data Source=.;Initial\n    Catalog=ProductsDB;Integrated   \n    Security=True;MultipleActiveResultSets=True\"\n  }\n}\n```", "```cs\nprivate readonly RequestDelegate _next;\nprivate readonly ILogger<FlixOneLoggerMiddleware> _logger;\npublic FlixOneLoggerMiddleware(RequestDelegate next, ILogger<FlixOneLoggerMiddleware> logger)\n{\n  _next = next;\n  _logger = logger;\n}\n```", "```cs\npublic async Task Invoke(HttpContext httpContext)\n{\n  _logger.LogInformation(await  \n  GetFormatedRequest(httpContext.Request));\n  var originalBodyStream = httpContext.Response.Body;\n  using (var responseBody = new MemoryStream())\n  {\n    httpContext.Response.Body = responseBody;\n    await _next(httpContext);\n    _logger.LogInformation(await \n    GetFormatedResponse(httpContext.Response));\n    await responseBody.CopyToAsync(originalBodyStream);\n  }\n}\n```", "```cs\nloggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\nloggerFactory.AddDebug();\n//custom middleware\napp.UseFlixOneLoggerMiddleware();\n```", "```cs\npublic static class FlixOneStoreLoggerExtension\n{\n  public static IApplicationBuilder UseFlixOneLoggerMiddleware\n  (this IApplicationBuilder applicationBuilder)\n  {\n    return applicationBuilder.UseMiddleware<FlixOneLoggerMiddleware>();\n  }\n}\n```"]