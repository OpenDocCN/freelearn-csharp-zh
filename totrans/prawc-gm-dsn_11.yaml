- en: User Interface and User Experience
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll introduce you to the basics of User Interface (UI) and
    User Experience (UX) design—a complex craft that often blends art, animation,
    graphic design, and visual effects with game design itself.
  prefs: []
  type: TYPE_NORMAL
- en: While most professional teams have a dedicated artist taking care of the UI/UX
    side of the product, it’s imperative for any game designer that they learn the
    principles of designing interfaces and polishing the end-user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Even in a large, well-staffed development team, game designers will have to
    work side by side with the UI/UX specialists to plan and create interfaces and
    experiences that are informative, empowering, and delightful to interact with.
    So, without further ado, let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: User Experience
  prefs: []
  type: TYPE_NORMAL
- en: User Experience refers to a person's overall perception, emotional response,
    and attitude towards the use of a particular product or system. In the context
    of game development, UX can encompass anything that affects the overall feel of
    the game with exception to the rule set and game content. In practice, UX translates
    into input mechanisms (controls), menu and interaction flows, interface animations
    and sound effects, camera systems, and game feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Player input
  prefs: []
  type: TYPE_NORMAL
- en: The design and execution of input methods (that is, controls) can make or break
    your game. In this day and age, players expect the developer to adhere to a set
    of gold standards in the input department. For this exact reason, platform holders
    such as Sony, Nintendo, and Microsoft have created their own set of guidelines
    to ensure that platform-specific input methods and control functions (that is,
    how to pause the game) are adhered to.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, console action games are almost certain to use the left analog stick
    to move and right stick to look around, while PC ones are sure to use WSAD keys
    for movement, mouse to look and Spacebar to vault or jump over obstacles. Regardless
    of game genre, using anything but Esc to enter the pause menu on PC can be seen
    as a cardinal sin.
  prefs: []
  type: TYPE_NORMAL
- en: Although the majority of your controls are not influenced by the platform holder,
    going against well-established paradigms is a very risky move. Try to give your
    players a way to modify and personalize their controls, but remember, the default
    settings are unlikely to be changed by most players. If your default controls
    are hard to use and unintuitive, you run a real risk of frustrating the audience
    to a point of leaving the game—no matter how extensive your control options are.
  prefs: []
  type: TYPE_NORMAL
- en: It's more than likely that the games you'll work on come with a strong reference
    in the controls department (a similar game in your genre), and a set of player
    expectations (well-established paradigms). Innovation is where things become much
    more difficult. Novel control methods should be well-justified by innovative mechanics
    that cannot be effectively expressed with a familiar and well-established control
    mapping. That is, unless you're planning on focusing your entire game on having
    the players try to master the controls, as seen in games like the old flash-hit
    QWOP and the hilarious Surgeon Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The principles of ergonomic design (be it of objects, processes, or spaces)
    revolve around maximizing the productivity of the users and minimizing their fatigue
    and discomfort. When applied to video game controls, these rules can be summed
    up with the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: Ergonomic controls are easy to execute in the most common context.
  prefs: []
  type: TYPE_NORMAL
- en: A single key or button press is easy enough on its own. However, pressing P
    while controlling your character with WSAD keys and the mouse requires you to
    stop and lift your hand, and therefore, is not an ergonomic solution.
  prefs: []
  type: TYPE_NORMAL
- en: Actions that require multiple inputs (double taps) or more than one finger to
    execute are harder to pull off and memorize. This includes specific modifiers
    such as holding Alt, Shift, Ctrl, or a trigger on a gamepad.
  prefs: []
  type: TYPE_NORMAL
- en: Well executed controls match the expected paradigm (for example, pressing R
    to reload in a shooter) and are easy to perform (no need for compound controls).
    They also shouldn't make us fight our instincts (a practice is known as natural
    mapping), for example, holding a button to release something in-game always feels
    a bit off.
  prefs: []
  type: TYPE_NORMAL
- en: When considering controls and input mechanisms, it helps to list your game mechanics
    in order of priority and frequency of use. Afterward, go through the list and
    assign the most ergonomic and fitting actions to the most important and frequently
    used mechanics first. Following that, any actions that do not need to be performed
    quickly and efficiently (turning a flashlight, opening the inventory or map screen)
    can be put on inputs that are less accessible.
  prefs: []
  type: TYPE_NORMAL
- en: Use control prompts if you can afford the space! Control prompts such as press
    [E] to Open Door do not need to end with your tutorial. Unintrusive but persistent
    on-screen control prompts can be incredibly useful throughout a player's lifecycle.
    What's obvious to you (or a seasoned player) may not be obvious to someone who
    picks up the game after a year, especially if you map a whole array of obscure
    keys to a laundry list of actions.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Control types
  prefs: []
  type: TYPE_NORMAL
- en: When designing your controls, it's important to understand the differences and
    implications of different input types available on your target platform.
  prefs: []
  type: TYPE_NORMAL
- en: Digital input
  prefs: []
  type: TYPE_NORMAL
- en: This is the most basic input type, capable of returning one of two states, active
    (1) or inactive (0). A simple example of digital input lies in the keys of a standard
    computer keyboard. A single key can either be pressed or not pressed at all, there's
    no other state in between.
  prefs: []
  type: TYPE_NORMAL
- en: Analog input
  prefs: []
  type: TYPE_NORMAL
- en: 'Analog input can return one or more continuous values. The most popular example
    would be an analog stick found on any modern console controller. When a stick
    is tilted, the controller tracks separate values for up/down and left/right positions
    as well as the degree of the tilt. The formatting could look like this: (0, -1)
    for a stick that''s turned left all the way, (-0.5, 0.3) for a stick that''s tilted
    down halfway and 30% to the right. This allows for more subtle and natural control
    over things like movement or cursor speed.'
  prefs: []
  type: TYPE_NORMAL
- en: Just because the controller grants you access to continuous states does not
    mean you should always use them. You could program the game to detect simple up
    and down states based on a single value, a tilt of 75% to 100% in Y-axis would
    be used for up and -75% to -100% for down. The zone between -75% and 75% is a
    so-called dead zone where the input is deemed insignificant and ignored. In this
    case, you're essentially turning analog input into digital input.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Complex analog input
  prefs: []
  type: TYPE_NORMAL
- en: Some controllers offer features like motion and position tracking, giving you
    access to very complex information. A simple shake of the controller would result
    in the creation of a set of vectors that track the speed, direction, and acceleration
    of the movement in all three axes as well as (for more advanced, camera-enabled
    systems) the starting and ending position in 3D space.
  prefs: []
  type: TYPE_NORMAL
- en: Designing motion controls can be a very complex process that requires close
    cooperation with a highly-skilled programmer. Compound motion controls (such as
    doing a figure of 8) are very hard to implement in a way that works reliably for
    most players and devices. Unless you're working on a motion controlled or virtual
    reality game and have a team of very experienced programmers, it's advisable to
    avoid motion controls (and especially complex ones) for core gameplay mechanics.
    You can, however, try to use the accelerometer for cosmetic effects. For example,
    by making the background of your user interface move as you tilt your mobile device
    (thus creating an illusion of depth).
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Touch screen controls
  prefs: []
  type: TYPE_NORMAL
- en: 'Some modern touchscreens are capable of tracking as many as 10 individual points
    of contact. Nevertheless, a simple set of single-finger taps and swipes can usually
    get you a long way. It''s recommended to not rely on more than 4 fingertips as
    going above that number increases the chances of misinterpreting the input and
    reduces the number of compatible devices. A touch interface can provide you with:'
  prefs: []
  type: TYPE_NORMAL
- en: A unique ID for each contact point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The origin of contact (starting position).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change in position and time since last update (used to track movement).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Status since the last frame (touch started, moved, stationary, released and
    canceled):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cancellation can happen if more than 5 inputs are detected simultaneously or
    the device detects being put next to the user's ear (light sensor and position
    tracking).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The intensity of the touch, which only works on a select few devices that support
    3D Touch or equivalent technology. This feature allows you to distinguish between
    regular touch input and force touch, where the screen has been pressed in a more
    significant matter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly to motion controls, you need to tread with great care when integrating
    complex touch behaviors. Utilizing simple taps, swipes, drags, and pinches or
    following a pattern on the screen is all very easy and natural, but asking the
    user to use multiple fingers and 3D Touch without clear prompts is a recipe for
    disaster. There's no such thing as a simple 4-finger pinch. You may also want
    to discard any touch input that's too close to the currently active one, as a
    single finger can sometimes be read as two. It's common practice to manipulate
    interactive areas (hitboxes) of actors or buttons to make them bigger/smaller
    than their in-game artwork would suggest, making them easier/harder to tap on.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Camera systems
  prefs: []
  type: TYPE_NORMAL
- en: In-game camera is one of the most important interfaces between the player and
    the game world. A well-designed camera exhibits behaviors and settings that not
    only help to inform the player but also highlight what’s important and improve
    the player's ability to interact with the game.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple camera types and perspectives. A game can use a single camera
    with a fixed setting or switch between different cameras and settings depending
    on the context.
  prefs: []
  type: TYPE_NORMAL
- en: To create a perfect camera system, you'll often have to work closely with the
    rest of your team, merging game design goals with technical solutions (intelligent
    camera focus and pathfinding) and an elusive artistic sensitivity (focused around
    framing, angles, and transitions).
  prefs: []
  type: TYPE_NORMAL
- en: Let's dive into the complexities of camera design by analyzing different camera
    types and perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: Camera types
  prefs: []
  type: TYPE_NORMAL
- en: Selection of a camera type often happens on a subconscious level; you simply
    imagine the game being played one way or another. That said, it's important to
    acknowledge the reasons behind a particular camera type and remain open to alternatives.
    By switching from a manual to static or tracking camera one could find a brand
    new way of presenting the game, reshaping the experience and potentially spawning
    an entirely new sub-genre of games. Don't be afraid to experiment!
  prefs: []
  type: TYPE_NORMAL
- en: Static
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple, stationary cameras are used in many games where the game board is entirely
    contained on the screen such as Tetris. There are games that use a series of static
    cameras and toggle between them as needed. Examples of such systems can also be
    found in old semi-3D games such as the first Resident Evil, which often relied
    on pre-rendered backdrops. Controlling an avatar in 3D space with fixed cameras
    that often switch angles is particularly challenging and should be avoided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00161.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In Resident Evil 1, ambiguous angles and disconnection between the camera and
    the character made for difficult controls
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly enough, the effect of static cameras on 2D spaces is entirely
    opposite, and games like Super Meat Boy are a testament to the increased precision
    one can get from removing camera movement in a 2D environment.
  prefs: []
  type: TYPE_NORMAL
- en: Static cameras are also a very popular choice for puzzle games and mobile titles,
    where the free-form mouse, touch, and drag inputs are reserved for interactions
    with the game world and not camera operation. A static camera can also provide
    a natural parallel to interacting with a fictional workspace or computer interface,
    as seen in Her Story, where the player solves a murder case by operating an old
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: Taking the static camera to the limit and restricting yourself to one screen
    can act as a limitation that fosters creativity in level design, and makes the
    game easier to grasp for the casual audience (not having to move the camera around
    lowers the cognitive load).
  prefs: []
  type: TYPE_NORMAL
- en: Manual camera
  prefs: []
  type: TYPE_NORMAL
- en: 'Not attached to any actor, with players being in control of the camera work
    in varying degrees, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Two or three-dimensional movement panning the camera as well as zooming in and
    out
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pivot (horizontal rotation)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pitch (angle to the ground or the subject, vertical rotation)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manual cameras can be found in many strategy games. Some, such as Black & White,
    allow the player to pivot and pitch the camera freely with little limitations.
    Others, such as StarCraft 2, restrict the controls to simple two-dimensional movement
    (west, east, north, south), zooming in and out.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting the camera pitch and pivot controls can be done to prevent players
    from getting lost and disoriented by selecting angles that limit playability.
    Without limitations, players could not only look straight up into the sky but
    also flip the view of the game world upside down (by adjusting the pitch more
    than 180 degrees).
  prefs: []
  type: TYPE_NORMAL
- en: 'A restricted camera can also be designed to automatically adjust certain settings
    such as pitch. For example, zooming in can lower the pitch to create a more cinematic
    angle, while zooming out could tilt the camera towards a more tactical, top-down
    perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In StarCraft 2, the camera pitch shifts towards a more side-on angle as you
    zoom in
  prefs: []
  type: TYPE_NORMAL
- en: Tracking camera
  prefs: []
  type: TYPE_NORMAL
- en: 'Tracking cameras allow your players to enjoy big playable spaces without the
    burden of having to manually adjust the framing. Depending on gameplay and portrayed
    actors, the camera will either follow a single character, a point between multiple
    characters, or simply focus on the action itself and drag the players along:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the actor: This is the default option for presenting character driven
    gameplay, from platform games to third person shooters and racing games. Moving
    the avatar moves the camera—simple, elegant, and effective.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Following the action: An entirely autonomous first-person camera was often
    used in old arcade shooters such as Virtua Cop and House of the Dead. A camera
    that''s on-rails sets the pacing and leaves little agency to the players who are
    simply taken in for a ride. On the other hand, we have third-person action games
    such as God of War and Bayonetta that feature semi-autonomous cameras that follow
    the character''s journey across the environment but aren''t directly attached
    to it. This design choice caters to the fast and jerky actions and complex encounters
    with a multitude of enemies coming from all sides. A semi-autonomous camera also
    allows for some very cinematic moments. There are also games that only use a semi-autonomous
    camera in some of their multiplayer modes, in order to portray all players on
    the same screen. From Super Smash Bros and Micro Machines to Super Mario 3D World,
    the camera will either follow the leader of a race who dictates the tempo or try
    to zoom out to keep all actors visible at the same time.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The decision on what to track is an important one as it dictates the pace and
    framing of the action. A degree of autonomous behavior can let players focus on
    pure execution of gameplay mechanics, but it also opens up the possibility of
    time-consuming implementation and case-by-case adjustments. If players cannot
    adjust the camera themselves, you need to make sure they're always offered the
    optimal view of the action.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compound Camera
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, a single solution does not cover the entirety of available gameplay
    scenarios. A compound camera is one that defaults to one of the above solutions
    but allows players to tweak or alter its behavior. This gives us two distinct
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A tracking camera that can be manually adjusted or taken control over:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Found in many 3D action adventure games that do not depend on ranged combat
    or platformers such as Super Mario Galaxy. Such a camera requires no agency until
    players are required to take aim or identify an area of interest that’s outside
    of their current view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Manual camera with lock-on or focus options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fast paced close-quarters combat inside a 3D space can make aiming very tricky.
    The camera lock-on system allows you to track a chosen enemy target and aims your
    attacks in their direction. The lock-on camera is an essential element of combat
    mechanics in games such as Dark Souls and The Legend of Zelda: Ocarina of Time.
    On a side note, I''ve met designers that call lock-on systems an outcome of bad
    camera design and controls, but most players accept this solution without questioning
    it (especially if your combat is about timing and positioning, and not analyzing
    angles between characters on screen).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As for camera focus, it's a mechanic that can be found in games such as Gears
    of War and The Last of Us, where players are sometimes prompted to press a button
    to move their camera towards a point of interest (something that's relevant to
    the story or player's current objective). Players are free to focus their view
    for a few seconds, take a quick glimpse, or ignore the point of interest completely.
    You can never be sure if they followed the hint, but at least you don't take away
    their controls and interrupt them rudely with a cutscene.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Viewing perspectives
  prefs: []
  type: TYPE_NORMAL
- en: Similarly to camera type, the viewing perspective is often subconsciously set
    in your brain from the very first moment you think of the game being played.
  prefs: []
  type: TYPE_NORMAL
- en: It's good to be aware of the implications of the perspective of your choosing,
    and question whether it’s the best choice, or if there are alternatives you should
    prototype. A new perspective can result in a completely different feel and create
    space for previously unavailable game mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As pictured by the tower defense genre, changing the camera can lead to a vastly
    different gameplay experience. From the left: Fieldrunners, Dungeon Defenders,
    Sanctum'
  prefs: []
  type: TYPE_NORMAL
- en: First person
  prefs: []
  type: TYPE_NORMAL
- en: We live our lives in first person perspective, and thanks to the depth perception
    provided by a set of forward-facing eyes, we can judge distance accurately and
    navigate the three-dimensional world with ease. However, the most natural viewing
    perspective is not necessarily the easiest to control…
  prefs: []
  type: TYPE_NORMAL
- en: 'First person games started simple, with slow-paced dungeon crawlers and keyboard
    only shooters such as Wolfenstein 3D. But not long after, the addition of mouse
    controls and the prevalence of strafing, jumping, and ducking made things much
    more complicated for the players:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The steady movements of Wolfenstein 3D (1992) stand in stark contrast to the
    highly vertical action of Titanfall 2 (2017), filled with sliding, wall-running,
    and grappling hooks
  prefs: []
  type: TYPE_NORMAL
- en: For many casual gamers, learning to move the character and camera separately
    comes with great difficulty. Contrary to what we gamers tend to believe, it's
    neither simple nor natural. Moreover, fast-paced first person games are known
    to cause dizziness in a portion of the population. Take these factors into consideration
    if the audience you’re creating for is not very experienced with first person
    games.
  prefs: []
  type: TYPE_NORMAL
- en: On the plus side, first person perspective puts players right into the middle
    of the action, creating some of the most immersive experiences (a natural fit
    for virtual reality). First person cameras are also simple to implement and tweak.
    And if you're working on a single player title, you could save a lot of time by
    reducing or eliminating the need for character modeling and animation.
  prefs: []
  type: TYPE_NORMAL
- en: Third person
  prefs: []
  type: TYPE_NORMAL
- en: We'll now explore the wide range of third person cameras where players become
    an external observer, looking at the game and its world through the portal of
    the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You could be a god, an army commander or a ZOO manager looking down at their
    creation. You might be in control of Nathan Drake or Mario, but you do not experience
    the world through their eyes. You embody a camera floating around in thin air,
    always close, yet somehow detached from the avatar on screen.
  prefs: []
  type: TYPE_NORMAL
- en: Third person perspective excels in storytelling. A single framing can effectively
    convey complex interactions between any number of characters and the world they
    inhabit. No wonder it's arguably the most popular perspective in art and visual
    media, from graphic novels to theatre, movies, and of course games.
  prefs: []
  type: TYPE_NORMAL
- en: In video games, there are countless iterations of third person cameras to choose
    from. We tend to narrow down the classification of Third Person Perspective (TPP)
    towards the classic over the shoulder games like Tomb Raider, but in fact, we
    have to consider any perspective that isn't first person. Let’s go into the details
    of the most popular variants!
  prefs: []
  type: TYPE_NORMAL
- en: Behind an Avatar
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons why cameras positioned behind or over the shoulder of
    an in-game character are so popular. By exiting the first person perspective,
    we open the possibilities of extensive characterization through avatar's visual
    design, customization, and animation. Despite not being in the dead-center of
    the action, we quickly establish a powerful link between ourselves and the character.
    The epic on-screen adventures might not happen to me, but they do happen to Lara
    Croft, and in this world, I am Lara Croft.
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay wise, since we see the actors, we can switch control between multiple
    characters with ease, something that's harder to pull off in first person games.
    Moreover, having the camera detached from the character gives us the ability to
    peek behind corners and cover, and spot dangers and obstacles around/behind our
    character. This increases our situational awareness and brings it a bit closer
    to the standard we have in real-life. The nauseating effects of first person perspective
    are also reduced as the camera moves less erratically and doesn't bob (move up
    and down) with each step. Interacting with the environment and engaging in full-body
    movements is also much clearer when the whole character is visible on screen,
    from vaulting above obstacles to pulling crates and casting spells.
  prefs: []
  type: TYPE_NORMAL
- en: As with everything, there are some downsides to keep in mind. For one, you may
    need to add complex character animations that could be omitted if you were making
    a single player game in first person, or if the camera was pulled further away.
    Moreover, you might need to either be very careful with the level design or invest
    considerable programming effort into ensuring that the camera behaves correctly
    in cramped environments. Low ceilings, narrow rooms and layers of obstacles such
    as tree branches will all make your camera struggle. In combat, having the main
    character occupy the middle of the screen can get in the way of aiming, forcing
    you to offset the view to the side (as seen in Uncharted and modern Tomb Raider
    games.).
  prefs: []
  type: TYPE_NORMAL
- en: Top Down
  prefs: []
  type: TYPE_NORMAL
- en: Top down perspective is a perfect fit for any game that relies on two-dimensional
    planning and 360-degree horizontal visibility, making it a popular choice for
    fast-paced arcade action games, dungeon crawlers, strategy, and management titles.
    While it may struggle with accurately reflecting height, a top down camera can
    offer a clear view of countless actors and obstacles with little to no obstruction.
    Even the most complex buildings and mazes suddenly become easy to navigate floorplans.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, a truly top down perspective is rare. Most 3D games opt to tilt the
    camera while 2D ones cheat with the perspective and show a side-skewed view of
    the actors and/or the world. This means that characters are rarely reduced to
    uninspiring sets of heads and shoulders.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00163.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first Grand Theft Auto augmented its top-down camera with an illusion of
    depth provided by angled building faces
  prefs: []
  type: TYPE_NORMAL
- en: Isometric
  prefs: []
  type: TYPE_NORMAL
- en: In the context of video games, isometric camera refers to a form of two dimensional,
    axonometric projection (an orthographic projection with an oblique angle but without
    any perspective). It is a viewpoint that allows to more effectively exhibit depth
    in a 2D space and create a three-dimensional effect, something that’s hard to
    do in a purely top-down perspective or side view.
  prefs: []
  type: TYPE_NORMAL
- en: Isometric projection can easily be associated with some of the most memorable
    PC games of the 1990s. This view was applied en-masse to role-playing games like
    Fallout or Baldur’s Gate, and dominated the huge strategy and simulation genres,
    from Age of Empires to Simcity 2.
  prefs: []
  type: TYPE_NORMAL
- en: As we write this book, a set of easily accessible 3D engines is dominating the
    market, and yet, isometric perspective is alive and well. In fact, isometric games
    are arguably some of the most popular ones on the planet… After all, casual titles
    like Farmville and Clash of Clans were able to easily attract millions of players
    into their isometric worlds.
  prefs: []
  type: TYPE_NORMAL
- en: Creating high-quality isometric art can be very time-consuming and pose a significant
    challenge to an inexperienced artist. To help with the process, an artist can
    either used advanced perspective settings or even 3D tools to model, rotate and
    export the assets.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Side view
  prefs: []
  type: TYPE_NORMAL
- en: By restricting movements to two dimensions, side view cameras can present an
    easy to read environment that's not unlike what we see with our own eyes—our world
    may not be flat, but it's definitely easier to read from the side than from the
    top. Platformers and fighting games can benefit greatly from more predictable
    character movements, distances and jump curves. Easy to read contours, angles
    and environments can also be infused with simple to understand 2D physics, spawning
    a genre of physics games from Angry Birds to Worms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some games opt to forego some of these benefits in order to infuse their side
    projections with elements of depth. This can be seen in old 2D adventure games
    such as The Secret of Monkey Island as well as many side-scrolling beats ''em
    ups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00172.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Trine effectively merges 2D gameplay and physics with 3D assets creating a 2.5D
    platformer
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the mechanics and structure of the game you're making, the benefits
    of using a side view camera can turn into shortcomings. Restricted movement equals
    somewhat restricted exploration. The surface level can get disproportionately
    insignificant, meaning a big chunk of navigation will result in either climbing
    or digging. Some games like Terraria and Spelunky have managed to find ways around
    the problem with a myriad of navigational tools (ladders, ropes, grappling hooks,
    jetpacks, and so on), but gravity can often get in the way of your players exploring
    the environment.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Choosing camera settings
  prefs: []
  type: TYPE_NORMAL
- en: The pitch, field of view, and distance are three key components of any camera.
    They have to be set and possibly adjusted during gameplay to fit the context and
    tempo of the game.
  prefs: []
  type: TYPE_NORMAL
- en: The default horizontal field of view should be set depending on the predicted
    distance from the screen and its size. The closer the players are to the screen
    and the larger it is, the higher the in-game FOV (field of view) can be. This
    is due to the screen occupying a proportionally broader angle of your actual vision.
    If we wanted to create a perfect window into the game world we'd need to match
    the FOV to the angle between the player's eyes and the borders of the screen,
    and in most cases, we'd end up with a very narrow view space. Fortunately for
    us, most players are accustomed to slightly higher FOVs, but we still need to
    make device and platform specific considerations. For example, first person shooters
    on consoles operate with a horizontal FOV of around 60-65 degrees as players tend
    to sit far away from the TV. On PC, on the other hand, players sit much closer
    and thus the FOV should default to 80-90 (and allow for that setting to be raised
    even higher). As a result, the PC players will see more of the action to the left
    and right, but the contents of the screen will seem a bit further away (and perhaps
    even appear distorted). Moreover, if you were to play a console shooter while
    sitting close to the screen, you could experience a feeling of tunnel vision and
    dizziness, as 90 degrees of your natural field of vision translate to only 60
    degrees in the game.
  prefs: []
  type: TYPE_NORMAL
- en: On another note, the larger the FOV, the more processing power you'll use on
    rendering geometry each frame—always something to keep in mind!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00170.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's helpful to understand the language of camera movement in 3D space
  prefs: []
  type: TYPE_NORMAL
- en: Most modern action games adjust the camera depending on actions performed by
    the player. A wide, zoomed out camera helps with fast-paced navigation and split
    decision making, showcasing a larger portion of geometry and the threats and opportunities
    around the player. For actions that require precision, such as aiming, an alternative
    camera setting comes into play, with lower field of view, a closer (zoomed-in)
    state, and possibly a lowered camera control sensitivity.
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal and vertical planes can be easily transferred to the flat planes
    of our screens, but without VR or stereoscopic 3D technology, depth perception
    becomes a real challenge. Both of our eyes have to take in the same information,
    making platforming in third person games a huge challenge. Players can easily
    misjudge jump distances and have difficulties in aligning themselves with small
    objects (think of Mario trying to hit a [?] block suspended in mid-air). To help
    alleviate that, you can raise your camera and pitch it down towards the ground.
    This will help in assessing the distance between objects. Just be aware that while
    a more top-down perspective can help with horizontal navigation, it lowers the
    overall vision radius and impedes vertical perception (height).
  prefs: []
  type: TYPE_NORMAL
- en: Depth perception matters more up close (especially in melee combat) than it
    does at a distance, where its significance is reduced. In first person shooters,
    aiming at erratically moving enemies who are far away is more of a 2D exercise
    of aligning the aim with the target, and less of an activity involving spatial
    awareness. Bring the enemy much closer and you’ll realize how much more difficult
    the combat scenario can get, as players are forced to consider distance and movement
    speeds in all three dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: You need to select the camera perspective based on the game mechanics and distance
    to action. Do not force an up close camera angle if you require players to be
    aware of what's happening around them. On the other hand, if you want them to
    more comfortably engage with targets at great distances, a closer camera can help
    with aiming.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once you settle on the distance and field of view, it's important to adjust
    the framing. The default camera settings should focus the camera on what's most
    relevant to the player's immediate decision making. If players follow a single
    avatar, you do not need to make it a centerpiece that obscures the most important
    parts of the screen. There are better places to showcase your character art, be
    it menu screens, cutscenes, or even a garage (if your avatar is a vehicle). Focus
    on what changes the most, that is, the environment and the challenges it poses.
  prefs: []
  type: TYPE_NORMAL
- en: Point the camera towards the objective and you'll help guide the players without
    a single word or a path marker. For this exact reason, in Super Mario Bros, the
    camera always starts offset—with the character standing on the left side of the
    screen, facing right. From the very first moment, the flow of action is natural.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the end, you may find that no single camera setting fits every action and
    situation in your game. Fortunately, there are several solutions, some of which
    can be combined:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Put players in control: Allow players to pitch the camera, zoom in and out
    and maneuver it freely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Switch between cameras based on context: For example, moving into cover or
    getting the gun out immediately changes the view for one that suits the scenario.
    For example, by putting our main character to the side so they do not get in the
    way of aiming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Develop environmentally aware camera: This can be complex, but ultimately would
    let the camera decide on the pitch and distance based on player''s surroundings.
    If the player enters a cramped space, the camera is brought in and behind the
    character (or even transitions into first person view). If the scene features
    many ledges and jumps in an open space, the camera is pulled out to show more
    of the terrain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let the level designer adjust the settings: This is a technically simpler,
    but perhaps more labor-intensive way of handling an environmentally driven camera.
    A set of camera tools can be provided to the level designer. With these tools,
    the designer can define unique camera presets and place special areas or in-game
    triggers, which are invisible to the player and activate different camera settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the more advanced, environment and context aware camera features are
    now being supported by modern game engines. For example, the free Cinemachine
    plugin for Unity 3D.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: No matter what you decide to do, sometimes you'll need to take away the controls
    and show something that simply cannot be missed. Even wordless cutscenes that
    simply slide the camera to the object of interest can be invaluable. Adding black
    cinematic bars to the top and bottom parts of the screen may seem cheesy, but
    nowadays, players are predisposed to sit back and enjoy the cutscene the moment
    they see them.
  prefs: []
  type: TYPE_NORMAL
- en: Unskippable cutscenes are a cardinal sin, especially if there's no checkpoint/autosave
    immediately after one. However, accidentally skipping a relevant part of the story
    is another threat altogether. There are few ways to safeguard against this. First
    of all, try putting a 2-step confirmation to skip any cutscene, where first input
    shows a Press [key] to skip cutscene. tip and requires a specific action. Secondly,
    and especially if you have no 2-step process, make sure that skipping is not possible
    during the first few seconds of a cutscene; this way input from the gameplay phase
    won't accidentally skip a cutscene someone's keen to see.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Feedback
  prefs: []
  type: TYPE_NORMAL
- en: Games are interactive systems full of interconnected rules and elements. Clearly
    communicating the results of interactions and the changing state of the game is
    what feedback is all about. As a rule of thumb, if the player doesn't realize
    that things are happening, they might as well not have happened at all.
  prefs: []
  type: TYPE_NORMAL
- en: Well incorporated feedback will make your game easier to understand and make
    for a more satisfying experience. Remember, we're making games, not corporate
    banking apps; the feedback systems you create can be a source of pure, visceral
    fun.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s a wide variety of tools to tap into:'
  prefs: []
  type: TYPE_NORMAL
- en: 'UI feedback: A well-designed interface reacts promptly and clearly to every
    single input (keystrokes, button presses, tapping, clicking, and so on) as well
    as to more subtle states such as highlighting objects before input confirmation
    (for example, cursor hover states, pressing without release). If an action is
    invalid in the current context, it still deserves a response—either via abstract
    negative feedback (for example, by using red coloring and stop sign iconography)
    or by communicating the failure with an on-screen text prompt (for example, You
    can''t use weapons within city gates). Explaining why things don''t work can be
    as useful as providing feedback to successful interactions. Another role of UI
    feedback is to reflect and highlight any significant changes to the game state.
    Don''t simply update a numerical value from one number to another - many players
    will completely miss that it happened. Make sure the whole indicator flashes and
    the numbers pulsate as they go up and down.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Character and object animation: This includes obvious real-world actions such
    as running, jumping, and opening doors, as well as abstract animations that do
    not occur in real life. Growing, shrinking, pulsating, moving, rotating, and even
    re-coloring objects can be done fairly easily in code (without a single frame
    of animation required). If you can, make good use of these cheap and efficient
    techniques. For anything else, it''ll be down to the use of bespoke, artist-driven
    animations and...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Physics: Another way to make objects and characters visibly react and move
    is to introduce them as objects in your physics engine. A collapsing tree does
    not need to be animated, it just needs to be detached from the ground and allowed
    to fall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual effects: Smoke, flames, sparks, light—a bonfire is practically made
    out of particle effects, which can either be pre-rendered and exported as flat
    2D animations or created dynamically by the game engine. Special effects used
    in the game-world provide an additional level of feedback and intensity to in-game
    actions. They are also invaluable in portraying more abstract or immaterial things
    that cannot be feasibly expressed with physics and animation. You can also use
    VFX on the UI layer to stylize it and go hand-in-hand with more classic UI feedback.
    Particle effect editors are not hard to operate and learning their basics can
    be a helpful skill for almost any game designer!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Screen effects: Color tints, light flashes, screen shaking, and other full-screen
    effects are a great way of reflecting important information (Red overlay?! I''m
    hurt!) or adding impact (BOOM! *screen shake*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tactile feedback: By allowing you to physically connect the players to the
    game world, tactile feedback can make your game much more immersive. Some developers
    go as far as to integrate the vibration function right into their cutscenes. Nevertheless,
    vibration is not for everyone and should only be used as an optional, additional
    source of feedback. Some players find it distracting, while others, especially
    on mobile, want to limit the noise produced by constant rumbling. When integrating
    tactile functions, try to limit the intensity and duration of common actions and
    reserve the stronger, longer responses to fittingly significant occasions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Audio: The main roles of sound effects are to reinforce the visual feedback
    of in-game actions and to convey additional information about the game world that
    cannot be expressed with visual cues (for example, the footsteps of approaching
    foes). Music, on the other hand, can have a multitude of roles. It can help to
    set and reinforce the emotional tone of whatever''s going on, build an aural scenery
    of the game world, and even serve as an additional source of feedback. To provide
    feedback with music, implement a system that adjusts it dynamically to the overall
    state of the game (I hear boss fight music, everyone get ready!) or a player''s
    individual perspective (Oh... combat music? I must''ve been spotted!). As useful
    as sound effects and music are, not everyone can hear them... When it comes to
    mobile and portable platforms, unless you''re working on a music game, you should
    never depend on audio feedback as the sole way of conveying important information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Textual feedback: While old-school health bars and combat logs (that is, lists
    of gameplay actions and calculations) can definitely classify as a part of UI
    feedback, damage and status indicators are often displayed right inside the game
    world, usually above the actor. If your game contains systems of progression that
    rely on manipulating numbers, using text to reflect them becomes near-mandatory.
    This can apply to anything from damage and healing to combo scores and resource
    production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing UIs
  prefs: []
  type: TYPE_NORMAL
- en: The main objectives of any UI are to facilitate interaction and communicate
    the state of the game to the player.
  prefs: []
  type: TYPE_NORMAL
- en: Some products can get away with little UI other than game menus and occasional
    control prompts, while others try to avoid using any text in their interface and
    operate purely on iconography. The efforts to try and minimize the amount of UI
    and communicate the state of the game purely with game feedback and UX are applaudable
    and can result in very elegant designs.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, the more complex your game systems get, the more complex the states
    they produce. Deep and extensive user interfaces are often unavoidable, and knowing
    how to design them (or at least how to support and understand the professionals
    that do it for you) is a very important skill.
  prefs: []
  type: TYPE_NORMAL
- en: Listing and prioritizing information
  prefs: []
  type: TYPE_NORMAL
- en: 'As game designers, we often strive to provide our audience with deep, complex
    decisions. We sometimes think that, if players are confused, perhaps showing more
    of the stuff that''s happening behind the hood will help explain the complexities
    of our systems. Unfortunately, in spite of our intentions, the tendency to show
    everything can actually impede decision making. This leads to players getting
    overwhelmed and struggling to focus on what''s relevant and what''s not. In short:'
  prefs: []
  type: TYPE_NORMAL
- en: Total disclosure can lead to information overload.
  prefs: []
  type: TYPE_NORMAL
- en: Think of it this way. In a racing game, there's often no need to constantly
    highlight to the player that they're on the right way. Instead, we simply opt
    to display the wrong way indicator when they're actually going astray. We can
    extend this principle further by, for example, hiding the health indicators when
    the health is full. By not providing health information to the player we signal
    that health has no significance, which means there's nothing to act on or be concerned
    about (either health must be full or nothing can hurt me now).
  prefs: []
  type: TYPE_NORMAL
- en: 'The more complex your game interface, the more you can benefit from a systematic
    way of prioritizing information based on context. This applies to both working
    on your own or with a UI specialist. A potentially complex or novel set of screens
    and features can easily be broken down, analyzed, and put together by following
    a three-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the primary, secondary, and stretch goals for the interface you're designing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the expected player behavior, possible interactions, and intentions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a list of the potential elements and contents of each screen that fit the
    goals and enable the expected behavior of your audience.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the goals, intentions, and contents all set, you should be able to map
    out and categorize each element of the UI based on their role:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Critical: Objects of high relevance, they directly support primary function
    of the interface and remain important in most contexts. For example, a heads-up
    display (HUD) marker that points towards the location of the mission objective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supportive: Any part of UI that (in most contexts) is not crucial to player''s
    ability to interact with the system, but should be readily available to support
    their decision making and guide the interactions. For example, a minimap or weapon
    and ammo indicator that can be peeked at and assessed with ease.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Contextual: Information that is only relevant in a particular context is the
    least important of all and can be hidden behind an additional interaction. For
    example, a detailed full-screen map is only relevant when we want to plan our
    next moves or have a hard time navigating with the minimap and the objective markers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following such processes can help you design screens that support player behavior
    and place a manageable amount of information and options in suitable places.
  prefs: []
  type: TYPE_NORMAL
- en: UI mockups
  prefs: []
  type: TYPE_NORMAL
- en: In the context of user interface design, a mockup is a prototype version of
    the interface, created with the purpose of establishing the design direction,
    demonstrating or documenting the functionality, and validating the usability.
  prefs: []
  type: TYPE_NORMAL
- en: A UI mockup is likely to contain no actual art aside from basic geometric shapes,
    placeholder icons and text labels. Thanks to their simplicity and fast turnarounds,
    mockups allow for quick iterations on different layouts and ways of surfacing
    information to the players.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at a simple yet effective wire-frame mockup created by one of SpaceApe''s
    in-house UI and UX experts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Following that, we have the in-game version of the very same screen, as seen
    in Transformers: Earth Wars:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Try to think of UI mockups as equivalent to the prototypes of game mechanics.
    Even though most designs are likely to change and evolve once implemented, the
    process itself greatly reduces the risk of investing many hours of code and artwork,
    just to realize that a late addition requires a total overhaul.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In case of more complex screens, a wire-frame version can quickly demonstrate
    usability issues and areas to improve. Let''s take a look at another example from
    the same game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00200.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There''s a lot going on in there, especially if you consider that we''re designing
    for a 5-inch screen. Fortunately, wire-frames are quick to change and multiple
    versions can be compared next to one another. Here''s the final version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The in-game implementation swaps things around, streamlining and prioritizes
    the stats and status of the main character. The grid of owned and missing robots
    takes a backseat. Duplicated or irrelevant information has been removed. The disabled
    Rank Up section was replaced by an active call to action. Relevant resource counters
    have been added. The little blue eye icon has been replaced by a light textual
    instruction making the whole combiner a big invisible button that can be pressed
    to enter the view mode.
  prefs: []
  type: TYPE_NORMAL
- en: Paper sketches
  prefs: []
  type: TYPE_NORMAL
- en: Paper is a great medium for visualizing simple designs and mapping out rough
    ideas. It's common for game and UI designers to use whiteboards or post-it notes
    to explain their ideas to their colleagues, who'll often carry the design towards
    a more robust prototype.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the design is complicated, highly interactive, dependent on animation,
    or if you'd like to create a set of many ideas that differ in small details (such
    as icon size, button placement, and so on), it's best to migrate to a digital
    medium.
  prefs: []
  type: TYPE_NORMAL
- en: Digital wireframes
  prefs: []
  type: TYPE_NORMAL
- en: Digital mockups often take shape of wireframes—designs that use geometric shapes,
    flat colors, and simple icons instead of game art.
  prefs: []
  type: TYPE_NORMAL
- en: However, some designers opt to validate the artistic direction of the interface
    at this stage. To do so, a digital wireframe can be imbued with effects, fonts,
    and art found on the internet, allowing the designer to swiftly assemble a good
    approximation of the look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: Animated and interactive prototypes
  prefs: []
  type: TYPE_NORMAL
- en: With the help of modern design tools, one can easily create polished, animated,
    and interactive prototypes that allow for accurate approximation of the final
    user experience and interface flow.
  prefs: []
  type: TYPE_NORMAL
- en: This process is especially advised when seeking design validation for features
    that utilize complicated, nested screen flows, or when trying to establish an
    animated look-and-feel. An interactive design speaks more than a thousand words.
    When it comes to the quality and efficiency of communication, even the most basic
    prototype is better than a five-page-long description of what the interface is
    supposed to contain and how it should work.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-based prototyping tools allow you to upload or create your wireframes
    and link various parts of the screens together and create an interactive flow,
    which can be sent out and viewed on any device. This is especially useful when
    designing mobile interfaces and seeking validation on the size of objects and
    buttons. I've also successfully used these tools to mock-up and present game ideas
    and even approximate gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: It's hard to pinpoint a single solution, as the market for these tools is evolving
    fast and each has it's pros and cons. Nevertheless, to get you started, I can
    recommend you check out Flinto, Framer, InVision, Balsamiq Mockups, Fluid UI,
    Axure RP, and JustInMind. That said, a quick search for UI prototyping tools is
    often all you need to get a nice and more up to date lineup.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, you don't even need specific UI design tools to create
    effective and interactive prototypes. I found great success in using simple presentation
    tools like Microsoft Powerpoint. With the help of the humble shape tool, hyperlinking,
    and artwork found on the Internet, you can quickly put your UI and UX ideas into
    an understandable design.
  prefs: []
  type: TYPE_NORMAL
- en: UI Tips and Tricks
  prefs: []
  type: TYPE_NORMAL
- en: With UI and UX design, you learn most by constantly re-evaluating the end-user
    experience, observing players, gathering feedback, and repeatedly iterating. That
    said, there's a range of tips, tricks, and good practices that stuck with me over
    the years.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a fitting state and progress indicator
  prefs: []
  type: TYPE_NORMAL
- en: 'Information can be displayed in a variety of ways. It''s important to evaluate
    the efficacy of your UI indicators and settle for ones that best fit the context:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Progress Bars: Good for progress, but even better at showing capacities, such
    as ammo or health. We are used to bars changing their state in both directions.
    A reasonably sized bar allows people to easily recognize ~10 different fill states.
    This means that our peripheral vision can acknowledge a 10% change in fill-state
    as a significantly different situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Circular Indicators: Great at efficiently representing time! A circular indicator
    being filled in a radial manner can result in up to 36 unique positions being
    easily recognizable by the human eye. Radially filled circular indicators are
    best reserved for parameters that have clear maximum values such as time, speed,
    fuel, temperature, pressure, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Color Grading: Color grading relies on shifting between multiple colors and
    hues to reflect changing states. Think of water temperature going from blue (cold)
    to red (hot). Color grading is not very effective on its own and should be used
    as a supplementary solution (with a counter or a progress bar to provide more
    precise feedback). Subtle color grading also makes things particularly hard to
    read for colorblind people. An average human can comfortably register ~5-6 different
    states between two very distinct colors (red-green) or shades (black-white).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider using notification badges
  prefs: []
  type: TYPE_NORMAL
- en: 'Colloquially known as roosters, notification badges are displayed next to buttons,
    category tabs, items, and so on in order to bring them to your attention. Roosters
    can help you guide players through multiple levels of menu depth, asking them
    to take specific action or at least acknowledge the presence of new information.
    If the number of new objects can get very large and hard to track (like in a standard
    email inbox) consider using a number in the rooster to help players keep track
    of changes in areas they''re aware of but not fully caught up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notification badge with number of actionable items
  prefs: []
  type: TYPE_NORMAL
- en: Match the pop-up with the context
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows that pop up automatically on top of the screen can be both useful and
    irritating. There are three distinct types:'
  prefs: []
  type: TYPE_NORMAL
- en: A modal dialog blocks the players and requires action to progress - it is best
    used for confirmations of any potentially destructive or time-consuming behaviors.
    For example, loading the save game (but only while playing), selling high-value
    items, or traveling to a different map. Such dialog should either come front and
    center or appear right next to the origin of the prompting interaction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A nonmodal (or modeless) dialog can be kept open and acted upon at our convenience.
    These are usually smaller and tucked away on the side of the screen. They tackle
    non-essential actions like accepting raid party invites in MMO games and should
    not interfere with the core gameplay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Toast notification, a non modal, informational dialog that requires no action—Toasts
    are used to display brief, auto-expiring notifications such as Game saved or Your
    friend is now online.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understand the limitations of tooltips
  prefs: []
  type: TYPE_NORMAL
- en: Tooltips are small boxes containing contextually relevant information on the
    highlighted UI element. They are used widely in PC interfaces (most likely via
    mouse-over) and any controls that can support a highlighted but not activated
    state, a flexible cursor some kind of selector that can be moved with keys or
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Using tooltips on mobile devices can be tricky! Touch interfaces operate best
    when pressing directly on the objects (tapping and holding on an object is an
    awkward and unnatural action). Therefore, on touch interfaces, tooltips should
    not be put on buttons or other elements that have an on-release action assigned
    to them. You can, however, put them on elements that do not have such interaction,
    for example, a metal ore resource indicator can be tapped to show a tooltip explaining
    the purpose of the resource and your current production rate.
  prefs: []
  type: TYPE_NORMAL
- en: Consider labeling your UI
  prefs: []
  type: TYPE_NORMAL
- en: Text labels appear next to, or on top of, other UI elements such as toggles,
    bars, buttons, and so on. While an icon of a musical note with a checkbox next
    to it requires no label (it's obviously a sound ON/OFF toggle), players can easily
    get lost in the crowded interface full of new functionalities. Text labeling is
    often essential as even the most descriptive iconography can leave your players
    guessing. It's important to ensure that any labels you use (be it on or under
    your UI elements) are ready to be localized (translated) and can adjust their
    font size accordingly to the available space - what takes 5 characters in English
    may need 15 in another language. Speaking of languages, we'll dive deeper into
    localization in the following chapter on accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: Do not reinvent the wheel!
  prefs: []
  type: TYPE_NORMAL
- en: The rules of intuitive control design apply to the user interface. Do not break
    established paradigms unless you have strong reasons to do so. The potential friction
    caused by changes that go against player expectations can only be offset with
    ideas that are either simpler or far superior.
  prefs: []
  type: TYPE_NORMAL
- en: Use movement, contrast, and saturation to grab the user's attention
  prefs: []
  type: TYPE_NORMAL
- en: Our eyes are naturally predisposed to prioritize movement; after all, it can
    signify a potential threat or prey. A pulsating button will draw attention even
    if placed in our peripheral vision (should it persist, it can also become really
    annoying). Another tool you can use is color contrast. Some color pairings are
    stronger than others; red and green have a stronger effect than blue and yellow,
    even though both colors are considered strongly contrasting and are placed on
    the opposite sides of the color wheel. This could be traced to our ingrown ability
    to distinguish between ripe and unripe fruit. Differences in color saturation
    and brightness are more effective if they are used sparsely and consciously. Contrast
    is a subtle art; if everything is brightly colored, nothing has a chance to stand
    out. Reserve the contrasting treatment to the critical elements of the UI (going
    back to the prioritization process described earlier).
  prefs: []
  type: TYPE_NORMAL
- en: Request or create a style guide and enforce it
  prefs: []
  type: TYPE_NORMAL
- en: The person responsible for the visual style of the interface has to develop
    and maintain a UI style guide. A document that sets the standards for the entire
    game, starting with the color scheme (including colors behind confirmation, rejection,
    and neutrality), as well as text and title fonts, the shapes and shading styles
    of buttons, tabs, text boxes and any other common UI building blocks. A style
    guide simplifies the day-to-day challenges, ensures the game sends a cohesive
    message and reduces player confusion. Once the style is set, stick to it. Avoid
    special cases and exceptions at all costs. If you change something, make sure
    the change is reflected across the board.
  prefs: []
  type: TYPE_NORMAL
- en: Keep theme and pacing in mind
  prefs: []
  type: TYPE_NORMAL
- en: The style and execution of the UI should reinforce the pace and theme of the
    game. The subtle UI in Dead Space— where indicators and menus are holographically
    projected onto or from the character—fits the slower pacing of an immersive horror
    game. It also makes menu management a potentially risky move as the game is not
    paused when navigating various screens. Since all information is embedded right
    into the game world, players are driven further into it. Even the health indicator
    is part of the character's suit, blending with it seamlessly until players get
    hurt in which case it serves as a constant, brightly flashing reminder of the
    threat they're in. Embedding the UI into the game world is known as a diagetic
    interface. It may not be the best fit for you, but it serves as a reminder of
    how to properly consider theme and pacing as part of the design process!
  prefs: []
  type: TYPE_NORMAL
- en: Confirm risky actions
  prefs: []
  type: TYPE_NORMAL
- en: This may sound like a pure formality but you'd be surprised how many games allow
    you to break valuable objects and lose hours of progress with an accidental click.
    Confirm anything that has an irreversible (and potentially negative) outcome for
    the player. You'd be right to be cautious of constant confirmations getting in
    the way, but you can easily remove them from strictly positive actions. You can
    also build in a way to opt out of certain confirmations altogether.
  prefs: []
  type: TYPE_NORMAL
- en: Count the time and steps to play
  prefs: []
  type: TYPE_NORMAL
- en: The shorter the play session length, the more important it becomes to get players
    straight into action. Long title sequences, nested menu options, and confirmations
    can all get in the way of gameplay. Your players may often have just a few minutes,
    do all you can to ensure their time is not all spent in menus and loading screens.
  prefs: []
  type: TYPE_NORMAL
- en: Screens differ – often widely
  prefs: []
  type: TYPE_NORMAL
- en: The game interface will often need to support a variety of different devices,
    aspect ratios, resolutions, and pixel densities. The trend towards responsive
    design in web development is a good one to adhere to. Objects should not scale
    endlessly but be capped to a set minimum and maximum size. When it comes to placement,
    do not use absolute positions, but try to use relative (percentage) distances
    instead. Anchor all big chunks of the UI to the various parts of the screen (edges,
    corners, center), then attach all smaller elements (such as buttons inside the
    pop-up) to their parent object. A well thought out interface only has to be implemented
    once, then verified on the minimum and maximum settings.
  prefs: []
  type: TYPE_NORMAL
- en: Do not analyze mobile interfaces on computer screens. Use paper sketches or
    put digital mock ups on small-screened devices and see how they fare against people
    with relatively large fingers.
  prefs: []
  type: TYPE_NORMAL
- en: UI placement is a science
  prefs: []
  type: TYPE_NORMAL
- en: 'People in western cultures are used to reading content from left to right,
    top to bottom, in a Z-shaped pattern referred to as the Gutenberg Principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Gutenberg Diagram pictured above divides the reading space into four quadrants
    and illustrates the Z-shaped reading pattern, as well as the direction of reading
    gravity. Which means that as our eyes sweep in horizontal lines, from top to bottom,
    they tend to get pulled away from the left edge of the screen and more towards
    the right.
  prefs: []
  type: TYPE_NORMAL
- en: While the Gutenberg Principle finds most use in web-design, its utility can
    be extended into video game interfaces. It's no coincidence that several years
    ago, the default interface of World of Warcraft adhered to these rules. Player
    health was attached to the top-left corner, as it's the most relevant information
    we need to monitor. Minimap occupied the top-right area. The in-game chat was
    on the bottom-left, and finally, the combat log sat quietly in the bottom-right.
    That's because the combat log is only relevant if we consciously seek the information
    contained in it, otherwise, it remains unnoticeable even though it's constantly
    scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: As screen size gets smaller, a reduced portion of the screen falls into our
    peripheral vision, reducing the importance of the Z-shaped pattern and placing
    more emphasis on the center area of the screen. However, the small-screened touch
    interfaces have a different set of issues. Most importantly, fingers can get into
    way! This is why status updates and destructive actions (such as deleting something)
    should be contained to the top, with the bottom part of the screen being dedicated
    to very popular areas and buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the research published by UX Matters ([`http://www.uxmatters.com/mt/archives/2013/02/how-do-users-really-hold-mobile-devices.php`](http://www.uxmatters.com/mt/archives/2013/02/how-do-users-really-hold-mobile-devices.php)),
    49% of users use one hand to operate their phone, 36% cradle the phone with their
    second hand, and 15% use the device with both hands. Let''s take a look at a set
    of heat-maps that help understand the ergonomics of the dominant use-case, that
    is, a phone held and operated exclusively with the right hand, in portrait orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00160.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Credit: UX Matters'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the bigger the display, the harder it is to reach across it!
    Nevertheless, in most cases, the bottom-left quadrant is the easiest part to access,
    and the top-left one of the hardest.
  prefs: []
  type: TYPE_NORMAL
- en: For more information and extensive research on mobile UX, visit [`https://www.uxmatters.com`](https://www.uxmatters.com)
    and take a dive into some great articles by Steven Hoober, starting with the three-part
    article Design for Fingers, Touch, and People.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend that you to misuse these in any way. For more information please
    consult the terms and conditions of the publishers mentioned in the Disclaimer
    section of this book.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: '"A complex craft that often blends art, animation, graphic design, and visual
    effects with game design itself."'
  prefs: []
  type: TYPE_NORMAL
- en: That's how we described UI and UX design in the introduction to this chapter.
    A few dozen pages later, we've hopefully provided you with a strong introduction
    to the concepts of input methods, cameras, perspectives, and utilizing feedback
    , all in the bid of reinforcing your gameplay and crafting a game that's immersive,
    responsive, understandable, and delightful to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: We strongly encourage that you deconstruct existing games, analyze their feedback
    mechanics, and even re-create their UI in the form of digital mock ups. As with
    any blend of art and craft, practice makes perfect!
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we'll naturally extend the concepts of this chapter and apply our user-oriented
    mindset towards making your games more accessible.
  prefs: []
  type: TYPE_NORMAL
