- en: Chapter 4. Creating Maps and Materials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic material with Standard Shader (Specular setup)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adapting a basic material from Specular setup to Metallic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying Normal maps to a material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Transparency and Emission maps to a material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting materials at mouse-over
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Detail maps to a material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fading the transparency of a material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing videos inside a scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity 5 introduces in new **Physically-Based Shaders**. Physically-Based Rendering
    is a technique that simulates the appearance of materials based on how the light
    reacts with that material (more specifically, the *matter* from which that material
    is made) in the real world. Such a technique allows for more realistic and consistent
    materials. So, your creations in Unity should look better than ever. Creating
    materials in Unity has also become more efficient now. Once you have chosen between
    the available workflows (**Metallic** or **Specular setup**; we'll get back to
    that later), there is no longer the need to browse the drop-down menus in search
    of specific features, as Unity optimizes the shader for the created material,
    removing unnecessary code for unused properties once the material has been set
    up and the texture maps have been assigned.
  prefs: []
  type: TYPE_NORMAL
- en: For a deep understanding of Physically-Based Rendering, we recommend you to
    take a look at *The Comprehensive PBR Guide*, written by Wes McDermott from Allegorithmic,
    freely available in two volumes at [http://www.allegorithmic.com/pbr-guide](http://www.allegorithmic.com/pbr-guide).
    Allegorithmic's guide contains invaluable information on PBR theory and techniques,
    having been a fundamental reference for this chapter. A great resource that we'd
    recommend you take a look at is *Mastering Physically Based Shading in Unity 5*
    by Renaldas Zioma (Unity), Erland Körner (Unity), and Wes McDermott (Allegorithmic),
    available at [http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5](http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5).
  prefs: []
  type: TYPE_NORMAL
- en: Another resource is *Physically Based Shading in Unity* by Aras Pranckevičius
    (Unity), available at [http://aras-p.info/texts/files/201403-GDC_UnityPhysicallyBasedShading_notes.pdf](http://aras-p.info/texts/files/201403-GDC_UnityPhysicallyBasedShading_notes.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and saving texture maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The visual aspects of a material can be modified through the use of textures.
    In order to create and edit image files, you will need an image editor such as
    Adobe Photoshop (the industry standard, and has its native format supported by
    Unity), GIMP, and so on. In order to follow the recipes in this chapter, it's
    strongly recommended that you have access to a few pieces of software like these.
  prefs: []
  type: TYPE_NORMAL
- en: 'When saving texture maps, especially the ones that have an Alpha Channel, you
    might want to choose an adequate file format. **PSD**, Photoshop''s native format,
    is practical for preserving the original artwork in many layers. The PNG format
    is also a great option, but please note that Photoshop doesn''t handle PNG''s
    Alpha channel independently of the transparency, possibly compromising the material''s
    appearance. Also, PNG files don''t support layers. For this chapter, we will often
    use the TIF format for three main reasons: (a) it''s open to those not using Photoshop;
    (b) it uses layers; (c) it preserves the Alpha Channel information. The file size
    is significantly greater than in PSDs and PNGs, so feel free to save your work
    as PSDs (if you have Photoshop) or PNGs (if you don''t need layers and, if using
    Photoshop, Alpha Channels).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a word of advice - although it's possible to manually create texture
    maps for our materials by using the traditional image editing software, new tools
    such as Allegorthmic's Substance Painter and Bitmap2Material make this work much
    more efficient, complete, and intuitive, complementing the traditional texture-making
    process or replacing it altogether - in a similar way to what zBrush and Mudbox
    did for 3D modeling. For design professionals, we strongly recommend at least
    trying such tools. Note, however, that products from Allegorithmic won't make
    use of Unity's Standard Shader, relying on the **substance** files (which are
    natively supported by Unity).
  prefs: []
  type: TYPE_NORMAL
- en: The big picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand the new Standard Shaders, it''s a good idea to know the workflows,
    their properties, and how they affect the material''s appearance. There are, however,
    many possible ways to work with materials - texture map requirements, for instance,
    might change from engine to engine, or from one tool to another. Presently, Unity
    supports two different workflows: one based on Specular, and another based on
    Metallic values. Although both workflows share similar properties (such as Normal,
    Height, Occlusion, and Emission), they differ in the way the diffuse color and
    reflectance properties are set up.'
  prefs: []
  type: TYPE_NORMAL
- en: Specular workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unity''s Standard Shader (Specular setup) uses Albedo and Specular/Smoothness
    maps, combining them to create some of the material''s aspect—mainly its color
    and reflectance qualities. The following shows the difference between Albedo and
    Smoothness maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Albedo**: This is the material''s diffused color. Plainly and simply, this
    is how you usually describe the appearance of the material (the British flag is
    red, white and blue; Ferrari''s logo is a black horse in a yellow setting; some
    sunglasses'' lenses are semi-transparent gradients, and more). This description,
    however, can be deceptive. Purely metallic objects (such as aluminum, chrome,
    gold, and others) should have black as their diffuse color. Their colors, as we
    perceive them, have originated from their specular channel. Non-metallic objects
    (plastic, wood, and even painted or rusted metal), on the other hand, do have
    very distinct diffuse colors. Texture maps for the Albedo property feature RGB
    channels for colors and (optionally) an Alpha Channel for transparency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specular/Smoothness**: This refers to the shininess of the material. Texture
    maps make use of RGB channels for specular color (which informs hue and intensity),
    and Alpha Channel for smoothness/gloss (dark values for less shiny surfaces and
    blurred reflections; light/white values for shiny, mirror-like appearance). It
    is important to note that non-metallic objects feature neutral, very dark specular
    colors (with plastic, for instance, you should work with a grey value around 59).
    Metallic objects, on the other hand, feature very light values, and are also a
    bit yellowish in hue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To illustrate such concepts, we have created a battery object (shown below),
    featuring brushed metal caps and a plastic body. Observe how each map contributes
    to the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Specular workflow](img/1362OT_04_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The metallic workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unity''s default Standard Shader combines Albedo and Metallic/Glossiness maps
    to create the color and reflectance qualities of the material. The following are
    the differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Albedo**: As in the Specular workflow, this is the material''s diffuse color;
    how you would describe the material. However, Albedo maps for the Metallic workflow
    should be configured in a slightly different way than ones for Specular workflow.
    This time around, the perceived diffuse color of metallic materials (grey for
    iron, yellow/orange for golden, and so on) have to be present in the Albedo map.
    Again, Albedo maps feature RGB channels for the colors and (optionally) an Alpha
    channel for transparency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metallic/Smoothness**: This refers to how metallic the material looks. Metallic
    texture maps make use of the Red channel for the Metallic value (black for non-metallic
    and white for metallic materials that are not painted or rusted) and the Alpha
    Channel for smoothness (in a similar way to the Specular workflow). Please note
    that Metallic maps do not include any information on hue, and in these cases the
    yellow-ish nature of the metallic gloss should be applied to the Albedo map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To reproduce the battery that illustrated the Specular workflow by using the
    Metallic workflow, maps would have to be recreated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The metallic workflow](img/1362OT_04_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might have noticed that we''ve used white to convey a metallic object.
    Technically, since only the Red channel is relevant, we could have used red (R:
    255, G: 0, B: 0), yellow (R: 255, G: 255, B: 0) or, for that matter, any color
    that has a red value of 255.'
  prefs: []
  type: TYPE_NORMAL
- en: Other material properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s also worth mentioning that Unity''s Standard Shaders support other maps
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normal maps**: The normal map adds detailed bumpiness into the material,
    simulating a more complex geometry. For instance, the internal ring on the positive
    (top) node of the battery that illustrated shader workflows is not modeled in
    the 3D object''s geometry, but rather created through a simple normal map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Occlusion maps**: A greyscale map is used to simulate the dark sections of
    an object under ambient light. Usually, it is used to emphasize joints, creases,
    and other details of geometry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Height maps**: These add a displacement effect, giving the impression of
    depth without the need for complex geometry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emission maps**: These add color emitted by the material, as if self-illuminated,
    such as fluorescent surfaces or LCDs. Texture maps for Emission feature RGB channels
    for color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity samples and documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you start, it might be a good idea to read Unity's documentation on textures.
    It can be found online at [http://unity3d.com/support/documentation/Manual/Textures.html](http://unity3d.com/support/documentation/Manual/Textures.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, Unity has put together a great resource for those looking for some
    pointers regarding how to set up maps for a variety of materials: the **Shader
    Calibration Scene**, which can be downloaded (for free) from the Unity Asset Store.
    It is a fantastic collection, featuring sample materials (both Metallic and Specular
    setup) for wood, metal, rubber, plastic, glass, skin, mud, and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic material with Standard Shader (Specular setup)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a basic material using the new Standard
    Shader (Specular Setup), an Albedo map, and a Specular/Smoothness map. The material
    will feature both metallic and non-metallic parts, with various smoothness levels.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Two files have been prepared to support this recipe: a 3D model (in FBX format)
    of a battery, and an UVW template texture (in PNG format) to guide us when creating
    the diffuse texture map. 3D models and UVW templates can be made with 3D modeling
    software, such as 3DS MAX, Maya, or Blender. All necessary files are available
    in the `1362_04_01` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a basic material, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `battery.FBX` and `uvw_template.png` files to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the **battery** model in the scene by dragging it from the **Assets**
    folder, in the **Project** view, to the **Hierarchy** view. Select it on the **Hierarchy**
    view and make sure, via the **Transform** component on the **Inspector** view,
    that it is positioned at **X: 0**, **Y: 0**, **Z: 0**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's create a Specular/Smoothness map for our object. Open the image file
    called `uvw_template.png` in your image editor (we'll use Adobe Photoshop to illustrate
    the next steps). Note that the image file has only a single layer, mostly transparent,
    containing the UVW mapping templates that we will use as guidelines for our specular
    map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new layer and place it beneath the one with the guidelines. Fill the
    new layer with dark gray (**R: 56**, **G: 56**, **B: 56**). The guidelines will
    be visible at the top of the solid black fill:![How to do it...](img/1362OT_04_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new layer and select the upper section of the image (the one with
    the circles). Then, fill that area with a slightly hued light gray (**R: 196**,
    **G: 199**, **B: 199**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The RGB values for our specular map are not arbitrary: Physically-Based Shading
    takes out most of the guesswork from the mapping process, replacing it with the
    research for references. In our case, we have used colors based on the reflectance
    values of iron (the slightly hued light gray) and plastic (the dark gray). Check
    out the chapter''s conclusion for a list of references.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the text elements in white to add a brand, size, and positive/negative indicators
    to the battery body. Then, hide the guidelines layer.![How to do it...](img/1362OT_04_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all your layers and organize them into a group (in Photoshop, this can
    be done by clicking on the drop-down menu in the **Layers** window and navigating
    to **Window** | **New Group from Layers…**). Name the new group `Specular`:![How
    to do it...](img/1362OT_04_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate the `Specular` group (in the **Layers** window, right-click on the
    group's name and select **Duplicate Group…**). Name the duplicated group `Smoothness`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide the `Smoothness` group. Then, expand the `Specular` group and hide all
    text layers:![How to do it...](img/1362OT_04_43.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unhide the `Smoothness` group, and hide the `Specular` group. Select the dark
    gray layer. Then, make an area selection around the upper region of the battery
    body, and fill it with light gray (**R: 220**, **G: 220**, **B: 220**). Rescale
    and rearrange the **Text** layers if needed:![How to do it...](img/1362OT_04_44.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate the layer that contains the gray fill for the upper section of the
    image (the one that went over the circles).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add a brushed quality to this material, add a **Noise** filter to the duplicated
    layer (in Photoshop, this can be done by navigating to **Filter** | **Noise**
    | **Add Noise...**). Use **50%** as the **Amount** and set **Monochromatic** to
    `true`. Then, apply a **Motion Blur** filter (**Filter** | **Blur** | **Motion
    Blur...**) using **30 Pixels** as the **Distance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate the `Smoothness` group. Then, select the duplicated group and merge
    it into a single layer (on the **Layers** window, right-click on the group's name
    and select **Merge Group**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the merged layer, use the *CTRL* + *A* key combination to select the
    entire image, and copy it using the *CTRL* + *C* keys:![How to do it...](img/1362OT_04_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide the merged layer and the `Smoothness` group. Then, unhide the `Specular`
    group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your image editor, access the image channels window (in Photoshop, this can
    be done by navigating to **Window** | **Channels**). Create a **New Channel**.
    This will be our **Alpha** Channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the image that you previously copied (from the merged layer) in to the
    **Alpha** Channel. Then, set all channels as `visible`:![How to do it...](img/1362OT_04_46.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your image in the Project's **Assets** folder as `Battery_specular`, either
    in Photoshop format (PSD) or TIF format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's work on the Albedo map. Save a copy of `Battery_specular` as `Battery_albedo`.
    Then, from the **Channels** window, delete the **Alpha** Channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Layers** window, hide the `Smoothness copy` merged layer, and unhide
    the `Smoothness` group. Finally, expand the `Smoothness` group, and hide the layer
    where the **Noise** filter was applied:![How to do it...](img/1362OT_04_47.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the color of the upper rectangle to black. Then, change the light gray
    area to dark red (**R: 204**, **G: 0**, **B: 0**), and the dark gray to red (**R:
    255**, **G: 0**, **B: 0**). Rename the group `Albedo` and save the file:![How
    to do it...](img/1362OT_04_48.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to Unity and make sure that both files were imported. Then, from the
    **Project** view, create a new **Material**. Name it `Battery_MAT`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: An easy way to create new materials is to access the **Project** view, click
    on the **Create** drop-down menu, and choose **Material**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select `Battery_MAT`. From the **Inspector** view, change the Shader to **Standard
    (Specular setup),** and make sure that the rendering mode is set to **Opaque**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `Battery_specular` as the **Specular** map, and `Battery_albedo` as the
    **Albedo** map for `Battery_MAT`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `Battery_MAT` material from the **Project** view and drop it into the
    **battery** object in the **Hierarchy** view:![How to do it...](img/1362OT_04_49.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `Battery_MAT` material from the **Project** view and, in the **Hierarchy**
    view, drop it into the **battery** object:![How to do it...](img/1362OT_04_50.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ultimately, the visual aspect of the battery is a combination of three properties
    of its material: Specular, Smoothness, and Albedo.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To compose the dark red part of the plastic body, for instance, we have mixed
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Specular** map (RGB): Very dark grey specularity (for non-metallic appearance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Smoothness** (the Alpha channel of the Specular map): Light gray (for
    a glossy aspect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Albedo** map: Dark red (for a dark red color)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The light red portion, on the other hand, combines the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Specular** map (RGB): That same dark grey specular'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Smoothness** (the Alpha Channel of the Specular map): Dark gray (for
    a matte aspect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Albedo** map: Red (for a red color)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the brushed metal used for the top and bottom covers combines the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Specular** map (RGB): Light grey (for a metallic aspect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Smoothness** (the Alpha Channel of the Specular map): A blurred grey
    noise pattern (for a brushed aspect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Albedo** map: Black (for a red color)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regarding how the image layers are structured, it's good practice to organize
    your layers into groups named after the property that they are related to. As
    texture maps get more diversified, it can be a good idea to keep a file that contains
    all the maps for quick reference and consistency.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few things you should have in mind when working with Albedo maps are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the texture type for an image file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since image files can be used for several purposes within Unity (texture maps,
    GUI textures, cursors, and more), it's a good idea to check if the right **Texture
    Type** is assigned to your file. This can be done by selecting the image file
    in the **Project** view, and in the **Inspector** view by using the drop-down
    menu to select the right **Texture Type** (in this case, `Texture`). Please note
    that other settings can be adjusted, such as **Wrap Mode**, **Filter Mode**, and
    **Maximum Size**. This last parameter is very useful if you want to keep your
    texture maps small in size for your game, while still being able to edit them
    in full size.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the map with color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When editing a material, the color picker to the right of the **Albedo** map
    slot, on the **Inspector** view, can be used to select the material's color, in
    case there is no texture map. If a texture map is being used, the selected color
    will be multiplied to the image, allowing variations on the material's color hue.
  prefs: []
  type: TYPE_NORMAL
- en: Adapting a basic material from Specular setup to Metallic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a better understanding of the differences between Metallic and Specular
    workflows, we will modify the Albedo and Specular/Smoothness maps that are used
    on a Specular setup material, in order to adapt them to the Metallic workflow.
    The material to be generated will feature both metallic and non-metallic parts,
    with various smoothness levels.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity package containing a battery model
    and its original material (made with Standard Shader—Specular setup). The package
    includes two image files for the original Albedo and Specular/Smoothness maps
    which, throughout the recipe, should be adapted for use with the Metallic setup.
    The package is available in the `1362_04_02` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a basic material, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `battery_prefab` Unity package into a new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, select the **battery_prefab** element. Then, from
    **Inspector**, access its material (named **Battery_MAT**) and change its **Shader**
    to **Standard** (as opposed to its current shader—**Standard (Specular setup)**.![How
    to do it...](img/1362OT_04_51.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, find the `Battery_specular` map and rename it `Battery_metallic`.
    Open it in your image editor (we'll use Adobe Photoshop to illustrate the following
    steps).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the layer group named **Specular** and rename it **Metallic**. Then, fill
    the light gray layer (named **Layer 2**, in the **Metallic** group) with white
    (**R: 255**, **G: 255**, **B: 255**), and the dark gray layer (named **Layer 1**,
    in the **Metallic** group) with black (**R: 0**, **G: 0**, **B: 0)**. Save the
    file:![How to do it...](img/1362OT_04_52.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to Unity. From the **Inspector** view, set the modified **Battery_metallic**
    map as the **Metallic** map of the **Battery_MAT** material. Also, set **None**
    as the **Albedo** map for that material. This will give you an idea of how the
    material is coming along:![How to do it...](img/1362OT_04_53.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s adjust the Albedo texture map. From the **Project** view, locate
    the `Battery_albedo` map and open it in your image editor. Then, use the **Paint
    Bucket** tool to fill the black area of **Layer 2**, in the **Albedo** group,
    with light gray (R: `196`, G: `199`, B: `199`). Save the file:![How to do it...](img/1362OT_04_54.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to Unity. From the **Inspector** view, set the modified **Battery_albedo**
    map as the **Albedo** map of the **Battery_MAT** material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your material is ready, combining visual properties based on the different maps
    that you have edited and assigned.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1362OT_04_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The visual aspect of the battery is a combination of three properties of its
    material: Metallic, Smoothness, and Albedo.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To compose the dark red part of the plastic body, for instance, we have mixed
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Metallic** map (RGB): Black (for a non-metallic appearance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Smoothness** (the Alpha Channel of a Metallic map): Light gray (for a
    glossy appearance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Albedo** map: Dark red (for a dark red color)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The light red portion, on the other hand, combines the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Metallic** map (RGB): Black'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Smoothness** (the Alpha Channel of the Metallic map): dark gray (for
    a matte appearance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Albedo** map: red (for a red color)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the brushed metal used for the top and bottom covers combines the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Metallic** map (RGB): white (for a metallic aspect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Smoothness** (the Alpha Channel of the Metallic map): blurred grey noise
    pattern (for a brushed appearance);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Albedo** map: light grey (for an iron-like appearance)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember to organize your layers in to groups named after the property that
    they are related to.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Normal maps to a material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normal maps are generally used to simulate complex geometry that would be too
    expensive, in terms of computer processing, to be actually represented by the
    3D polygons during the game's runtime. Oversimplifying, Normal maps fake complex
    geometry on low-definition 3D meshes. These maps can be generated either by projecting
    high-definition 3D meshes onto low-poly ones (a technique usually referred to
    as *baking*), or, as will be the case for this recipe, from another texture map.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will prepare two texture maps: the **Heightmap** and the
    **Normal map**. The former will be made from simple shapes in an image editor.
    The latter will be automatically processed from the Heightmap. Although there
    are a number of tools that can be used to generate Normal maps (see the *There
    is more* section of this chapter for a list of resources), we will use a free
    online tool, Windows and Mac compatible, to generate our texture. Developed by
    Christian Petry, the **NormalMap Online** feature can be accessed at [http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/).'
  prefs: []
  type: TYPE_NORMAL
- en: To help you with this recipe, it's been provided a Unity package, containing
    a prefab made of a 3D object and its material; and also an UVW template texture
    (in PNG format) to guide you when creating the diffuse texture map. All the files
    are in the `1362_04_03` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To apply a Normal map to a material, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `1362_04_03.unitypackage` file to your project. Select the `batteryPrefab`
    object from the **Assets** | `1362_04_03` folder, in the **Project** view. After
    comparing it with some reference photos, inform yourself about the features that
    should be reproduced by the Normal map: (**A**) a bumpy ring at the top; and (**B**)
    some circular creases at the bottom, shown in the following image:![How to do
    it...](img/1362OT_04_14.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In an image editor, open `uvw_template.png`. Create a new layer, fill it with
    grey (RGB: 128), and position it below the pre-existing layer as shown:![How to
    do it...](img/1362OT_04_15.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On a separate layer, draw a white circle centered on the battery's top. Then,
    on another layer, draw a black circle, centered on the battery's bottom, as shown
    below:![How to do it...](img/1362OT_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have used vector shapes to make the circles, rasterize their layers (in
    Adobe Photoshop, right-click on the layer's name and select the **Rasterize Layer**
    option from the context menu).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blur the white circle (in Photoshop, this can be done by navigating to **Filter**
    | **Blur** | **Gaussian Blur...**). Use **4,0** pixels as the **Radius**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide the UVW template layer and save the image as `Battery_height.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to convert the Heightmap directly from Unity, import it to your
    project. Select it from the **Project** view and, from the **Inspector** view,
    change its **Texture Type** to **Normal map**. Check the **Create from Grayscale**
    option, adjust **Bumpiness** and **Filtering** as you like, and click on **Apply**
    to save the changes:![How to do it...](img/1362OT_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To convert your Heightmap externally, access the website at [http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/).
    Then, drag the `HEIGHT_battery.png` file to the appropriate image slot. Feel free
    to play with the **Strength**, **Level** and **Blur/Sharp** parameters:![How to
    do it...](img/1362OT_04_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the resulting Normal map as `Battery_normal.jpg` and add it to your Unity
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Unity, select `Battery_normal` from the **Project** view. Then, from the
    **Inspector** view, change its **Texture Type** to **Normal**, leaving the **Create
    from Grayscale** box unchecked. Click on **Apply** to save the changes:![How to
    do it...](img/1362OT_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** view, select `batteryPrefab`. Then, in the **Inspector**
    view, scroll down to the **Material** component, and assign `Battery_normal` to
    the **Normal Map** slot. To adjust its intensity and direction, change its value
    to `-0.35`:![How to do it...](img/1362OT_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Normal** map was calculated from the grey values on the **Heightmap**,
    where the lighter tones were interpreted as recesses (applied to the top of the
    battery), and the darker tones as bulges (applied to the bottom). Since the desired
    output was actually the opposite, it was necessary to adjust the Normal map to
    a negative value (`-0.35`). Another possible solution to the issue would have
    been to redraw the Heightmap and switch the colors for the white and black circles.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you wish to explore Normal mapping beyond the limitations of NormalMap Online,
    there is an ever-growing list of full-featured software that can produce Normal
    maps (and much more). Here are some resources that you might want to check out:'
  prefs: []
  type: TYPE_NORMAL
- en: '*CrazyBump* is a standalone tool for Windows and Mac, which is available at
    [http://www.crazybump.com](http://www.crazybump.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*nDo* is a Photoshop plugin by Quixel (Windows only), available at [http://quixel.se/ndo](http://quixel.se/ndo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GIMP normalmap Plugin*, available for Windows only, is available at [http://code.google.com/p/gimp-normalmap/](http://code.google.com/p/gimp-normalmap/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NVIDIA Texture Tools for Adobe Photoshop*, available for Windows only, is
    available at [http://developer.nvidia.com/nvidia-texture-tools-adobe-photoshop](http://developer.nvidia.com/nvidia-texture-tools-adobe-photoshop)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bitmap2Material* is an amazing texture generating tool from Allegorithmic,
    which is available at [http://www.allegorithmic.com/](http://www.allegorithmic.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Transparency and Emission maps to a material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Emission** property can be used to simulate a variety of self-illuminated
    objects, from the LEDs of mobile displays to futuristic Tron suits. **Transparency**,
    on the other hand, can make the diffuse color of a material more or less visible.
    In this recipe, you will learn how to configure these properties to produce a
    toy's cardboard packaging that features a plastic case and glow-in-the-dark text.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity package containing a prefab made of
    a 3D object, its material, and its respective diffused texture map (in PNG format).
    All files are in the `1362_04_04` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add transparency and color emissions to a material, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import `TransparencyEmission.unitypackage` to your project. Select the `DIFF_package`
    texture from the `Assets` folder, in the **Project** view. Then, open it in your
    image editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we will add transparency to the image by deleting the white areas around
    the package (and the hang hole). Make a selection of those areas (in Photoshop,
    this can be done with the **Magic Wand** Tool).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you unlock the **Background** layer by clicking on the lock icon,
    to the left of the layer's name, as shown below:![How to do it...](img/1362OT_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the previously-made selection (this can be done in Photoshop by pressing
    the *Delete* key). The background of the image should be transparent, as shown
    below. Save the file:![How to do it...](img/1362OT_04_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in Unity, in the **Assets** folder, expand the **packagePrefab** list and
    select the **PackageCard** object. Now, in the **Inspector** view, scroll down
    to the **Material** component and change its **Rendering Mode** to **Cutout**,
    and adjust its **Alpha Cutoff** to `0.9`:![How to do it...](img/1362OT_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Choosing **Cutout** means that your material can be either invisible or fully
    visible, not allowing for semi-transparency. The **Alpha Cutoff** is used to get
    rid of unwanted pixels around the transparent borders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the expanded **packagePrefab**, select the **PackagePlastic** object. In
    the **Inspector** view, scroll down to the **Material** component and change its
    **Rendering Mode** to **Transparent**. Then, use the **Diffuse** color picker
    to change the color's **RGB** values to `56`, and **Alpha** to `25`. Also, change
    the **Smoothness** level to `0.9`:![How to do it...](img/1362OT_04_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have taken care of our transparency needs, we need to work on the
    **Emission** map. From the **Assets** folder, duplicate the `DIFF_package` texture,
    rename it `EMI_package`, and open it in your image editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all the characters from the **Ms. Laser** inscription and the green star
    (in Photoshop, this can be done with the Magic Wand tool, keeping the *Shift*
    key pressed while selecting multiple areas).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste your selection into a new layer. Then, select it and apply a
    Noise filter to it (in Photoshop, this can be done by navigating to **Filter**
    | **Noise** | **Add Noise...**). Use **50%** as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new layer and, using a tool such as the **Paint Bucket**, fill it
    with black (R: `0`, G: `0`, B: `0`). Place this black layer beneath the one with
    the colored elements.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Flatten your image (in Photoshop this can be done by navigating to **Layer**
    | **Flatten Image**) and save your file:![How to do it...](img/1362OT_04_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in Unity, in the **Assets** folder, expand **packagePrefab** and select
    the **PackageCard** object. Now, in the **Inspector** view, scroll down to the
    **Material** component and assign the `EMI_package` texture to its **Emission**
    slot. Then, change the **Emission** color slot to white (**R**: `255`; **G**:
    `255`; **B**: `255`), and turn down its intensity to `0.25`, as shown in the following
    screenshot. Also, change its **GI** option to **None**, so that its glow won''t
    be added to the Lightmaps or influence the illumination in real time:![How to
    do it...](img/1362OT_04_26.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place an instance of the **packagePrefab** in your scene and check out the results.
    Your material is ready:![How to do it...](img/1362OT_04_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unity is able to read four channels of a texture map: R (Red), G (Green), B
    (Blue) and A (Alpha). When set to `Transparent` or Cutout, the Alpha channel of
    the diffuse texture map sets the transparency of the material according to each
    pixel''s brightness level (the **Cutout** mode will not render semi-transparency—only
    fully visible or invisible pixels). You might have noticed that we didn''t add
    an Alpha channel—this is because Photoshop exports the PNG''s Alpha map, based
    on its transparency. To help you visualize the Alpha map, the `1362_04_04` folder
    contains a `DIFF_packageFinal.TIF` file featuring an Alpha map that works exactly
    in the same way as the PNG file that we have generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1362OT_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Regarding the Emission texture map, Unity assigns its RGB colors to the material,
    combining them with the appropriate color selection slot, and also allowing adjustments
    to the intensity of that Emission.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let look at a little more information on Transparency and Emission.
  prefs: []
  type: TYPE_NORMAL
- en: Using texture maps with Transparent Mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that you can use a bitmap texture for the **Diffuse** map in the
    **Transparent** render mode. In this case, RGB values will be interpreted as the
    Diffuse color, while the Alpha will be used to determine that pixel's transparency
    (in this case, semi-transparent materials are allowed).
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding issues with the semi-transparent objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might have noticed that the plastic case was made from two objects (**PackagePlastic**
    and **innerPlastic**). This was done to avoid z-sorting problems, where faces
    are rendered in front of other geometry when they should be behind it. Having
    multiple meshes instead of a single one allows these faces to be correctly sorted
    for rendering. Materials in the `Cutout` mode are not affected by this problem,
    though.
  prefs: []
  type: TYPE_NORMAL
- en: Emitting light over other objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Emission** value can be used to calculate the material's light projection
    over other objects when using Lightmaps.
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting materials at mouse over
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changing the color of an object at runtime can be a very effective way of letting
    players know that they can interact with it. This is very useful in a number of
    game *genres*, such as puzzles and point-and-click adventures, and it can also
    be used to create 3D user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll use objects created directly in Unity. Alternatively,
    you can use any 3D model you like.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To highlight a material at mouse-over, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project, and add a **Cube** to the scene (from the **Hierarchy**
    view, navigate to **Create** | **3D Object** | **Cube**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, click the **Create** drop-down menu and choose **Material**.
    Name it `HighlightMaterial`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **HighlightMaterial**, and, from the **Inspector** view, change its
    **Albedo** color to gray (R: `135`, G: `135`, B: `135`), its **Emission** intensity
    to `1`, as shown in the screenshot below, and it''s **Emission** color to R: `1`,
    G: `1`, **B:** `1`:![How to do it...](img/1362OT_04_56.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign **HighlightMaterial** to the **Cube** that you previously created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, click on the **Create** drop-down menu and choose
    **C# Script**. Rename it `HighlightObject` and open it in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace everything with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and attach it to the **Cube**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Cube**, and, in the **Inspector** view, set the **Highlight Color**
    and **Mousedown Color** values to any colors that you would like:![How to do it...](img/1362OT_04_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using the script with your own imported 3D mesh, please make sure
    you add a **Collider** component to your object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the scene. The **Cube** will be highlighted red when the mouse is over
    it (and green when clicked on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The cube is automatically sent the mouse enter/exit/down/up events as the user
    moves the mouse pointer over and away from the part of the screen where the cube
    is visible. Our script adds a behavior to the cube when these events are detected.
    The `Start()` method gets a reference to the `Renderer` component of the GameObject
    that the script has been added to, and stores it in the variable `myRenderer`
    (note that 'renderer' already has a meaning in Unity so it is not appropriate
    as a private variable name for this script). The Boolean variable called `mouseon`
    records whether or not the mouse pointer is currently over the object. When the
    mouse button is released, we use the `mouseon` variable to decide whether to change
    the cube back to its initial color (`mouseon` FALSE, so the mouse pointer is away
    from the cube), or back to its highlight color (`mouseon` TRUE, so the mouse pointer
    is over the cube).
  prefs: []
  type: TYPE_NORMAL
- en: The reason we needed to change the material's original **Emission** color to
    ultra, dark gray is that leaving it black would have caused Unity to optimize
    the Shader by removing the **Emission** property from the material. Our script
    wouldn't have worked if this had happened.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can achieve other interesting results by changing the other properties of
    your material (by changing the `_EmissionColor` script to `_Color` or `"_SpecularColor`,
    for instance). For a full list of properties, select your material, and, in the
    **Inspector** view, click on the **Edit** button, at the side of the **Shader**
    drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Detail maps to a material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When creating a large object, there is not only the desire to texture it as
    a whole, but also to add details that can make it look better at closer distances.
    To overcome the need for gigantic texture maps, the use of Detail maps can make
    a real difference. In this recipe, we will add Detail maps to a rocket toy by
    applying a Detail mask and a Detail Normal map. In our case, we want to add a
    textured quality (and a stripe pattern) to the green plastic, except in the region
    where there is a battery compartment and the toy''s logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Detail maps to a material](img/1362OT_04_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a Unity package, containing the prefab for
    a rocket toy. The prefab includes the 3D model and a material, featuring a Diffuse
    map and a Normal map (made from a Heightmap). The file can be found in the `1362_04_06`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the Detail maps to your object, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `rocket.unitypackage` file into your project. Then, select the prefab
    named `rocketToy` from the **Assets** folder, in the **Project** view, and place
    it in your scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, expand the **rocketToy** GameObject and select
    its child called **rocketLevel1**. Then, scroll down the **Inspector** view to
    the **Material** component. Observe that it uses the `DIFF_ship` texture as the
    **Diffuse** map. Duplicate this file and rename the new copy `COPY_ship`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `COPY_ship` in your image editor. Select all the solid green pixels around
    the logo and battery compartment (in Photoshop, this can be done with the Magic
    Wand tool, keeping the *Shift* key pressed while selecting multiple areas):![How
    to do it...](img/1362OT_04_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keeping your selection active, access the image **Channels** window (in Photoshop,
    this can be done by navigating to **Window** | **Channels**). Click on **New Channel**.
    This will be our **Alpha** channel:![How to do it...](img/1362OT_04_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hide the **Red**, **Green** and **Blue** channels. Select the **Alpha** channel
    and paint the selection white. Then, select the area of the battery compartment
    and paint it grey (R, G and B: `100`):![How to do it...](img/1362OT_04_33.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save it in the TIFF format as `MASK_ship.TIF`, in the `Assets` folder. Make
    sure that you include **Alpha Channels**:![How to do it...](img/1362OT_04_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have the mask, let''s create a diffuse map for our detail. In your
    image editor, create a new image with the following dimensions: **width**: `64`,
    and **height**: `64`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill the new image with grey (R, G and B: `128`). Then, use shapes or rectangular
    fills to create a dark grey (R, G, and B: `100`) horizontal line that is about
    16 pixels tall:![How to do it...](img/1362OT_04_35.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the image as `DIFF_detail.PNG` in the `Assets` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new 64 x 64 image. Use a **Gradient** tool to create a black and white
    **Radial Gradient** (in Photoshop, this can be done with the **Gradient** Tool
    in **Radial** mode):![How to do it...](img/1362OT_04_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the image as `HEIGHT_detail.PNG` in the `Assets` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to Unity. From the `Assets` folder, select `HEIGHT_detail`. Then, from
    the **Inspector** view, change its **Texture Type** to **Normal map**, check the
    **Create from Grayscale** option, adjust **Bumpiness** to `0.25`, and set **Filtering**
    to `smooth`. Click on **Apply** to save the changes:![How to do it...](img/1362OT_04_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, expand the **rocketToy** GameObject and select
    its child called **rocketLevel1**. Then, scroll down the **Inspector** view to
    the **Material** component. Assign `MASK_ship` to the **Detail Mask** slot; `DIFF_detail`
    as **Secondary Maps** | **Detail Diffuse x 2**; and `HEIGHT_detail` as **Secondary
    Maps** | **Normal Map**. Also, turn the **Normal Map** intensity down to `0.6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Secondary Maps** section, change the **Tiling** values to **X**: `200`,
    and **Y**: `50`. You might notice that the pattern is not seamless. This is because
    we are using the same **UV Set** from our **Diffuse** texture. However, the object
    has been assigned to two different **UV channels** (back when it was being modeled).
    While UV channel 1 contains the mapping for our **Diffuse** map, UV channel 2
    uses a basic cylindrical mapping. We need to change the **Secondary Maps** section''s
    **UV Set** from **UV0** to **UV1**. The Detail map for your material is ready:![How
    to do it...](img/1362OT_04_38.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When in use, **Secondary Maps** are blended onto the material''s primary **Diffuse**
    and **Normal** maps (that''s why our object is green even after the **Detail Diffuse**
    is applied: the grey tones are superimposed on the original **Diffuse** texture).
    By using a **Detail Mask**, the artist defines which areas of the object should
    be affected by Secondary Maps. This is great for customization, and also for creating
    nuances (like the semi-bumped battery compartment in our example).'
  prefs: []
  type: TYPE_NORMAL
- en: Another helpful feature is the possibility of using a separate UV channel for
    Details maps and Tiling. Besides adding variation to texture mapping, this allows
    us to paint the details that can be perceived even at a very close distance by
    dramatically enhancing the visual quality of our objects.
  prefs: []
  type: TYPE_NORMAL
- en: Fading the transparency of a material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an object that, once clicked, fades out and disappears.
    However, the script will be flexible enough to allow us adjust the initial and
    final alpha values. Plus, we will have the option of making the object self-destructible
    when turned invisible.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Sphere** to your scene by accessing the **GameObject** | **3D Object**
    | **Sphere** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Sphere** and make sure it has a collider (if you are using a custom
    3D object, you might have to add a collider through the **Components | Physics**
    menu).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new material. The easiest way to do that is to access the **Project**
    view, click the **Create** drop-down menu, and choose **Material**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename your new material. For this example, let's call it `Fade_MAT`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your material. From the **Inspector** view, use the drop-down menu to
    change its **Rendering Mode** to **Fade**:![How to do it...](img/1362OT_04_57.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Fade** rendering mode is specifically designed for situations like this.
    Other rendering modes, such as Transparent, will fade turn the Albedo color transparent,
    but not the specular highlights nor the reflections, in which case the object
    will still be visible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Apply the **FadeMaterial** to **Sphere** by dragging it from the **Project**
    view into the **Sphere** Game Object name in the **Hierarchy** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, click the **Create** drop down menu and choose **C#
    Script**. Rename it as `FadeMaterial` and open it in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace your script with the code below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and apply it to the **Sphere** Game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play your scene and click on the **Sphere** to see it fade away and self-destruct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since the opaqueness of the material using a transparent Shader is determined
    by the alpha value of its main color, all we need to do in order to fade it is
    changing that value over a given amount of time. This transformation is expressed,
    in our script, on the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You could call the `FadeAlpha` function in other circumstances (such as a `Rigidbody`
    collision, for instance). In fact, you could even call it from another Game Object''s
    script by using the `GetComponent` command. The script would be something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Playing videos inside a scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TV sets, projectors, monitors.... If you want complex animated materials in
    your level, you can play video files as texture maps. In this recipe, we will
    learn how to apply a video texture to a cube. We will also implement a simple
    control scheme that plays or pauses the video whenever that cube is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unity imports video files through Apple Quicktime. If you don't have it installed
    in your machine, please download it at [http://www.apple.com/quicktime/download/](http://www.apple.com/quicktime/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you need a video file to follow this recipe, please use the `videoTexture.mov`
    included in the folder `1632_04_08`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a cube to the scene through the **GameObject** | **3D Object** | **Cube**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided `videoTexture.mov` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, use the **Create** drop-down menu to create a new
    **Material**. Rename it `Video_MAT` and, from the **Inspector** view, change its
    **Shader** to **Unlit/Texture**:![How to do it...](img/1362OT_04_58.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply `videoTexture` to the texture slot of `Video_MAT` by dragging it from
    the **Project** view into the appropriate slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the `Video_MAT` to the **Cube** you have previously created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand `videoTexture` on the **Project** view to reveal its correspondent **Audio
    Clip**. Then, apply that audio clip to the **Cube** (you can do it by dragging
    it from the **Project** view to the **Cube** in the **Hierarchy** view, or a **Scene**
    view).![How to do it...](img/1362OT_04_59.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Cube**. Make sure there is a **Collider** component visible from
    the **Inspector** view. In case there isn't one, add it via the **Component**
    | **Physics** | **Box Collider** menu. Colliders are needed for mouse collision
    detection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we need to create a script for controlling the movie texture and associated
    audio clip. From **Project** view, use the **Create** drop-down menu to add a
    **C# Script**. Name it `PlayVideo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the script and replace it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and attach it to the **Cube**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your scene. You should be able to see the movie being played in the cube
    face, and also pause/play it by clicking on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, our script makes the movie texture play in loop mode. There is,
    however, a Boolean variable than can be changed through the **Inspector** panel,
    where it is represented by a check box. Likewise, there is a check box that can
    be used to prevent the movie from playing when the level starts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some other movie texture commands and parameters that can be played
    with. Don't forget to check out Unity's scripting guide at [http://docs.unity3d.com/Documentation/ScriptReference/MovieTexture.html](http://docs.unity3d.com/Documentation/ScriptReference/MovieTexture.html).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has covered a number of techniques used to create, often manually
    and sometimes automatically, texture maps that are capable of giving distinctive
    features to materials. Hopefully, you are now more confident about working with
    Unity's new Physically-Based Shading, which is capable of understanding differences
    between available workflows, is aware of the role of each material property, and
    is ready to make better-looking materials for your games. We have also explored
    ways of changing the properties of materials during runtime by accessing an object's
    material via script.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Physically-Based Rendering is a complex (and current) topic, so it's a good
    idea to study it a bit by familiarizing yourself with the tools and concepts behind
    it. To help you with this task, we have included a non-exhaustive list of resources
    below that you should take a look at.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s a list of interesting, detailed material on Physically-Based Rendering
    (within and outside Unity):'
  prefs: []
  type: TYPE_NORMAL
- en: '*The Comprehensive PBR Guide Volumes 1 and 2* by Wes McDermott (Allegorithmic),
    available at [http://www.allegorithmic.com/pbr-guide](http://www.allegorithmic.com/pbr-guide).
    This guide takes an in-depth look at the practical and theoretical aspects of
    PBR, including great analysis of possible workflows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Physically Based Shading in Unity 5* by Renaldas Zioma (Unity),
    Erland Körner (Unity), and Wes McDermott (Allegorithmic), is available at [http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5](http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5).
    This is a detailed presentation about using PBS in Unity. Originally presented
    at the Unite 2014 conference, it contains some out-of-date information, but, nevertheless,
    it is still worth taking a look at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Physically Based Shading in Unity 5* by Aras Pranckevičius, from Unity, is
    available at [http://aras-p.info/texts/talks.html](http://aras-p.info/texts/talks.html).
    Slides and notes from a presentation on the subject are given at the GDC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tutorial: Physically Based Rendering, And You Can Too!* by Joe "EarthQuake"
    Wilson is available at [http://www.marmoset.co/toolbag/learn/pbr-practice](http://www.marmoset.co/toolbag/learn/pbr-practice).
    It is a great overview from the makers of **Marmoset Toolbag** and **Skyshop**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Polycount PBR Wiki*, which is available at [http://wiki.polycount.com/wiki/PBR](http://wiki.polycount.com/wiki/PBR),
    is a list of resources compiled by the Polycount community.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a new generation of texturing software for you to check out, in case
    you haven''t yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Substance Painter* is a 3D painting application from Allegorithmic. It is
    available at [http://www.allegorithmic.com/products/substance-painter](http://www.allegorithmic.com/products/substance-painter).
    Again, it''s worth mentioning that Allegorithmic products won''t make use of Unity''s
    Standard Shader, relying instead on substance files that are natively supported
    by Unity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Bitmap2Material* creates full-featured materials (including normal maps, specular
    maps, and more) from a single bitmap image. Also, it is from Allegorithmic, and
    it is available at [http://www.allegorithmic.com/products/bitmap2material](http://www.allegorithmic.com/products/bitmap2material).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quixel DDO* is a plugin for creating PBR-ready textures in Adobe Photoshop.
    From Quixel, it is available at [http://www.quixel.se/ddo](http://www.quixel.se/ddo).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quixel NDO* is a plugin for creating Normal maps in Adobe Photoshop. From
    Quixel, it is available at [http://www.quixel.se/ndo](http://www.quixel.se/ndo).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mari* is a 3D painting tool from The Foundry. It is available at [http://www.thefoundry.co.uk/products/mari/](http://www.thefoundry.co.uk/products/mari/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
