["```cs\n// 1\\. Obtaining the data source.\n int[] numbers = new int[3] { 0, 1, 2};\n// 2\\. Query creation.\nvar numQuery =\nfrom num in numbers\nwhere (num % 2) == 0\nselect num;\n// 3\\. Query execution.\nforeach (int num in numQuery)\n{\n     Console.Write(\"{0,1} \", num);\n}\n```", "```cs\n// Create a data source from an XML document. // \nusing System.Xml.Linq; \nXElement students = XElement.Load(@\"c:\\students.xml\"); \n```", "```cs\n int i = 1;\n FileStream f = new FileStream(\"test.txt\", FileMode.Open);\n string s = i + f; // This line gives a compile error\n```", "```cs\nvar i = 1;\nFileStream f = new FileStream(\"test.txt\", FileMode.Open);\nstring s = i + f; // This line gives a compile error\n```", "```cs\nDictionary<string, IEnumerable<Tuple<Type, int>>> implicitData = new Dictionary<string, IEnumerable<Tuple<Type, int>>>();\nvar implicitData = new Dictionary<string, IEnumerable<Tuple<Type, int>>>();\n```", "```cs\npublic class Student\n{\n     public int rollNum { get; set; }\n     public string Name { get; set; }\n}\n```", "```cs\nStudent p = new Student();\np.rollNum = 1;\np.Name = \"James\";\nStudent p2 = new Student();\np2.rollNum = 2;\np2.Name = \"Donohoe\";\n```", "```cs\n// Creating and initializing a new object in a single step\nPerson p = new Person\n{\n    FirstName =\"James\",\n    LastName = \"Doe\"\n};\n```", "```cs\nvar students = new List<Student>\n{\n    new Student\n    {\n        rollNum = 1,\n        Name = \"James\"\n    },\n    new Student\n    {\n        rollNum = 2,\n        Name = \"Donohoe\"\n    }\n};\n```", "```cs\nFunc<int, int> anonymousFunc = delegate (int y)\n{\n    return y * 5;\n};\nConsole.WriteLine(anonymousFunc(1));'. \n```", "```cs\nFunc<int, int> anonymousFuncLambda = y => y * 5; \nConsole.WriteLine(anonymousFuncLambda(1));\n```", "```cs\npublic static class IntExtensions\n{\n    public static int MultiplyExtension(this int x, int y)\n    {\n        return x * y;\n    }\n}\nint z = 6;\nConsole.WriteLine(z.MultiplyExtension(5));\nConsole.ReadLine();     \n```", "```cs\nvar anonymousType = new\n{\n    PropertyNum1 = \"One\",\n    PropertyNum2 = 2,\n    PropertyNum3 = true\n};\nConsole.WriteLine(anonymousType.GetType().ToString());             \n```", "```cs\nint[] numbers = new int[3] { 0, 1, 2 };\nvar numQuery =\nfrom num in numbers\nselect num;\n\nforeach(var n in numQuery)\n{\n     Console.Write(n);\n}\n```", "```cs\nstring[] array =\n{\n     \"Introduction\",\n     \"In\",\n     \"C#\"\n};\nvar result = array.SelectMany(element => element.ToCharArray());\nforeach (char letter in result)\n{\n     Console.Write(letter);\n}\n```", "```cs\npublic class Student\n{\n     public int rollNum { get; set; }\n     public string Name { get; set; }\n     public string classID { get; set; }\n}\npublic class ClassDetail\n{\n     public string classID { get; set; }\n     public string className { get; set; }\n}\n```", "```cs\n List<ClassDetail> classNames = new List<ClassDetail>();\n classNames.Add(new ClassDetail { classID = \"1\", className = \"First Standard\" });\n classNames.Add(new ClassDetail { classID = \"2\", className = \"Second Standard\" });\n classNames.Add(new ClassDetail { classID = \"3\", className = \"Third Standard\" });\n List<Student> students = new List<Student>();\n students.Add(new Student { rollNum = 1, classID = \"1\", Name = \"Sia Bhalla\" });\n students.Add(new Student { rollNum = 2, classID = \"2\", Name = \"James Donohoe\" });\n students.Add(new Student { rollNum = 3, classID = \"1\", Name = \"Myra Thareja\" });\n var list = (from s in students\n join d in classNames on s.classID equals d.classID\n select new\n {\n     StudentName = s.Name,\n     ClassName = d.className\n });\n foreach (var e in list)\n {\n     Console.WriteLine(\"Student Name = {0} , Class Name = {1}\", e.StudentName, e.ClassName);\n }\n```", "```cs\nint[] dataElements = { 8, 11, 6, 3, 9 };\nvar resultOrder = from dataElement in dataElements\n                  where dataElement > 5\n                  orderby dataElement descending\n                  select dataElement;\nConsole.WriteLine(string.Join(\", \", resultOrder));\n```", "```cs\n public class Student\n {\n     public int rollNum { get; set; }\n     public string Name { get; set; }\n     public string classID { get; set; }\n     public int age { get; set; }\n }\n```", "```cs\nList<Student> students = new List<Student>();\nstudents.Add(new Student { rollNum = 1, classID = \"1\", Name = \"Sia Bhalla\", age = 1 });\nstudents.Add(new Student { rollNum = 2, classID = \"2\", Name = \"James Donohoe\", age = 35 });\nstudents.Add(new Student { rollNum = 3, classID = \"1\", Name = \"Myra Thareja\", age = 8 }); \n```", "```cs\nvar avg = students.Average(s => s.age); \n```", "```cs\npublic class Student\n{\n     public int rollNum { get; set; }\n     public string Name { get; set; }\n     public string classID { get; set; }\n     public int age { get; set; }\n}\n```", "```cs\nList<Student> students = new List<Student>();\nstudents.Add(new Student { rollNum = 1, classID = \"1\", Name = \"Sia Bhalla\", age = 1 });\nstudents.Add(new Student { rollNum = 2, classID = \"2\", Name = \"James Donohoe\", age = 35 });\nstudents.Add(new Student { rollNum = 3, classID = \"1\", Name = \"Myra Thareja\", age = 8 });\nstudents.Add(new Student { rollNum = 4, classID = \"3\", Name = \"Simaranjit Bhalla\", age = 33 });\nstudents.Add(new Student { rollNum = 5, classID = \"3\", Name = \"Jimmy Bhalla\", age = 33 });\nstudents.Add(new Student { rollNum = 6, classID = \"2\", Name = \"Misha Thareja\", age = 35 });\n```", "```cs\n List<Student> students = new List<Student>();\n students.Add(new Student { rollNum = 1, classID = \"1\", Name = \"Sia Bhalla\", age = 1 });\n students.Add(new Student { rollNum = 2, classID = \"2\", Name = \"James Donohoe\", age = 35 });\n students.Add(new Student { rollNum = 3, classID = \"1\", Name = \"Myra Thareja\", age = 8 });\n students.Add(new Student { rollNum = 4, classID = \"3\", Name = \"Simaranjit Bhalla\", age = 33 });\n students.Add(new Student { rollNum = 5, classID = \"3\", Name = \"Jimmy Bhalla\", age = 33 });\n students.Add(new Student { rollNum = 6, classID = \"2\", Name = \"Misha Thareja\", age = 35 });\n var groupedResult = from s in students\n group s by s.classID;\n //iterate each group \n foreach (var classGroup in groupedResult)\n {\n     Console.WriteLine(\"Class Group: {0}\", classGroup.Key); \n     foreach (Student s in classGroup) \n     Console.WriteLine(\"Student Name: {0}\", s.Name);\n }\n```", "```cs\npublic static IEnumerable<TSource> Where(\n    this IEnumerable<TSource> source,\n    Func<TSource, bool> predicate)\n```", "```cs\npublic static class LinqExtensions\n{\n    public static IEnumerable<TSource> Where<TSource>(\n        this IEnumerable<TSource> source,\n        Func<TSource, bool> predicate)\n    {\n        foreach (TSource item in source)\n        {\n            if (predicate(item))\n            {\n                yield return item;\n            }\n        }\n    }\n}\n```", "```cs\nString xml = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n                <Students>\n                    <Student Name=\"\"Simaranjit\"\" rollNum=\"\"1\"\">\n                        <contactdetails>\n                            <emailaddress>sbhalla@gmail.com</emailaddress>\n                            <phoneNumber>0416274824</phoneNumber>\n                        </contactdetails>\n                    </Student>\n                    <Student Name=\"\"James\"\" rollNum=\"\"2\"\">\n                        <contactdetails>\n                            <emailaddress>jamesdonohoe@gmail.com</emailaddress>\n                        </contactdetails>\n                     </Student>\n                 </Students>\";\n```", "```cs\nXDocument doc = XDocument.Parse(xml);\nIEnumerable<string> studentNames = from p in doc.Descendants(\"Student\")\n                                  select (string)p.Attribute(\"Name\")\n                                  + \" \" + (string)p.Attribute(\"rollNum\");\nforeach (string s in studentNames)\n{\n         Console.WriteLine(s);\n}\n```", "```cs\nXDocument docFil = XDocument.Parse(xml);\nIEnumerable<string> studentNamesFilter = from p in docFil.Descendants(\"Student\")\n                                         where p.Descendants(\"phoneNumber\").Any()\n                                         select (string)p.Attribute(\"Name\")\n                                         + \" \" + (string)p.Attribute(\"rollNum\");\nforeach (string s in studentNamesFilter)\n{\n         Console.WriteLine(s);\n}\n```", "```cs\nXElement root = new XElement(\"Student\",\nnew List<XElement>\n{\n     new XElement(\"Marks\"),\n     new XElement(\"Attendance\")\n},\nnew XAttribute(\"Roll Number\", 1));\nroot.Save(\"StudentTestResults.xml\");\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <Student RollNumber=\"1\">\n         <Marks />\n         <Attendance />\n    </Student> \n```", "```cs\nXElement rootUpd = XElement.Parse(xml);\nforeach (XElement p in rootUpd.Descendants(\"Student\"))\n{\n     XElement contactDetails = p.Element(\"contactdetails\");\n     contactDetails.Add(new XElement(\"MobileNumber\", \"12345678\")); \n}\nrootUpd.Save(\"testupd.xml\"); \n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Students>\n     <Student Name=\"Simaranjit\" rollNum=\"1\">\n         <contactdetails>\n             <emailaddress>sbhalla@gmail.com</emailaddress>\n             <phoneNumber>0416274824</phoneNumber>\n             <MobileNumber>12345678</MobileNumber>\n         </contactdetails>\n     </Student>\n     <Student Name=\"James\" rollNum=\"2\">\n         <contactdetails>\n             <emailaddress>jamesdonohoe@gmail.com</emailaddress>\n             <MobileNumber>12345678</MobileNumber>\n             </contactdetails>\n     </Student>\n</Students>\n```"]