["```cs\n    namespace News.ViewModels;\n    public abstract class ViewModel\n    {\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    [ObservableObject]\n    public abstract partial class ViewModel\n    {\n    }\n    ```", "```cs\n    namespace News.ViewModels;\n    public class HeadlinesViewModel : ViewModel\n    {\n        public HeadlinesViewModel()\n        {\n        }\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <ContentPage \n\n        x:Class=\"News.Views.HeadlinesView\"\n        Title=\"Home\">\n        <VerticalStackLayout>\n            <Label\n                Text=\"HeadLinesView!\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\" />\n        </VerticalStackLayout>\n    </ContentPage>\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <ContentPage \n\n        x:Class=\"News.Views.ArticleView\"\n        Title=\"ArticleView\">\n        <VerticalStackLayout>\n            <Label\n                Text=\"ArticleView!\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\" />\n        </VerticalStackLayout>\n    </ContentPage>\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <ContentPage \n\n        x:Class=\"News.Views.AboutView\"\n        Title=\"AboutView\">\n        <VerticalStackLayout>\n            <Label\n                Text=\"AboutView!\"\n                VerticalOptions=\"Center\"\n                HorizontalOptions=\"Center\" />\n        </VerticalStackLayout>\n    </ContentPage>\n    ```", "```cs\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                })\n            .RegisterAppTypes();\n            return builder.Build();\n        }\n        public static MauiAppBuilder RegisterAppTypes(this MauiAppBuilder mauiAppBuilder)\n        {\n            // ViewModels\n            mauiAppBuilder.Services.AddTransient<ViewModels.\n            HeadlinesViewModel>();\n            // Views\n            mauiAppBuilder.Services.AddTransient<Views.AboutView>();\n            mauiAppBuilder.Services.AddTransient<Views.\n    ArticleView>();\n            mauiAppBuilder.Services.AddTransient<Views.\n    HeadlinesView>();\n            return mauiAppBuilder;\n        }\n    }\n    ```", "```cs\n<!-- Custom Fonts -->\n<MauiFont Include=\"Resources\\Fonts\\*\" />\n```", "```cs\n.ConfigureFonts(fonts =>\n{\n    fonts.AddFont(\"FontAwesome.otf\", \"FontAwesome\");\n    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n})\n```", "```cs\n    <ResourceDictionary>\n      <ResourceDictionary.MergedDictionaries>\n        <ResourceDictionary Source=\"Resources/Styles/Colors.xaml\" />\n        <ResourceDictionary Source=\"Resources/Styles/Styles.xaml\" />\n      </ResourceDictionary.MergedDictionaries>\n      <FontImage x:Key=\"HomeIcon\" FontFamily=\"FontAwesome\" Glyph=\"&#xf015;\" Size=\"22\" Color=\"Black\" />\n      <FontImage x:Key=\"HeadlinesIcon\" FontFamily=\"FontAwesome\" Glyph=\"&#xf70e;\" Size=\"22\" />\n      <FontImage x:Key=\"NewsIcon\" FontFamily=\" FontAwesome\" Glyph=\"&#xf1ea;\" Size=\"22\" />\n      <FontImage x:Key=\"SettingsIcon\" FontFamily=\"FontAwesome\" Glyph=\"&#xf013;\" Size=\"22\" Color=\"Black\" />\n      <FontImage x:Key=\"AboutIcon\" FontFamily=\"FontAwesome\" Glyph=\"&#xf05a;\" Size=\"22\" Color=\"Black\" />\n    </ResourceDictionary>\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <Shell \n\n        x:Class=\"News.AppShell\">\n        <FlyoutItem Title=\"Home\" Icon=\"{StaticResource HomeIcon}\">\n          <ShellContent Title=\"Headlines\" Icon=\"{StaticResource HeadlinesIcon}\" >\n          <ContentPage Title=\"Headlines\" />\n          </ShellContent>\n          <Tab Title=\"News\" Icon=\"{StaticResource NewsIcon}\">\n            <ContentPage Title=\"Local\" />\n            <ContentPage Title=\"Global\" />\n          </Tab>\n        </FlyoutItem>\n        <FlyoutItem Title=\"Settings\" Icon=\"{StaticResource SettingsIcon}\">\n          <ContentPage Title=\"Settings\" />\n        </FlyoutItem>\n        <ShellContent Title=\"About\" Icon=\"{StaticResource AboutIcon}\">\n          <ContentPage Title=\"About\"/>\n        </ShellContent>\n    </Shell>\n    ```", "```cs\n    namespace News;\n    internal static class Settings\n    {\n        public static string NewsApiKey => \"<Your APIKEY Here>\";\n    }\n    ```", "```cs\n    namespace News.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.Text.Json.Serialization;\n    public class Source\n    {\n        [JsonPropertyName(\"id\")]\n        public string Id { get; set; }\n        [JsonPropertyName(\"name\")]\n        public string Name { get; set; }\n    }\n    public class Article\n    {\n        [JsonPropertyName(\"source\")]\n        public Source Source { get; set; }\n        [JsonPropertyName(\"author\")]\n        public string Author { get; set; }\n        [JsonPropertyName(\"title\")]\n        public string Title { get; set; }\n        [JsonPropertyName(\"description\")]\n        public string Description { get; set; }\n        [JsonPropertyName(\"url\")]\n        public string Url { get; set; }\n        [JsonPropertyName(\"urlToImage\")]\n        public string UrlToImage { get; set; }\n        [JsonPropertyName(\"publishedAt\")]\n        public DateTime PublishedAt { get; set; }\n        [JsonPropertyName(\"content\")]\n        public string Content { get; set; }\n    }\n    public class NewsResult\n    {\n        [JsonPropertyName(\"status\")]\n        public string Status { get; set; }\n        [JsonPropertyName(\"totalResults\")]\n        public int TotalResults { get; set; }\n        [JsonPropertyName(\"articles\")]\n        public List<Article> Articles { get; set; }\n    }\n    ```", "```cs\n    namespace News.Services;\n    public enum NewsScope\n    {\n        Headlines,\n        Local,\n        Global\n    }\n    ```", "```cs\n    namespace News.Services;\n    using News.Models;\n    public interface INewsService\n    {\n        public Task<NewsResult> GetNews(NewsScope scope);\n    }\n    ```", "```cs\n    namespace News.Services;\n    using News.Models;\n    using System.Net.Http.Json;\n    public class NewsService : INewsService, IDisposable\n    {\n        private bool disposedValue;\n        const string UriBase = \"https://newsapi.org/v2\";\n        readonly HttpClient httpClient = new() {\n            BaseAddress = new(UriBase),\n            DefaultRequestHeaders = { { \"user-agent\", \"maui-projects-news/1.0\" } }\n        };\n        public async Task<NewsResult> GetNews(NewsScope scope)\n        {\n            NewsResult result;\n            string url = GetUrl(scope);\n            try\n            {\n                result = await httpClient.GetFromJsonAsync<NewsResult>(url);\n            }\n            catch (Exception ex) {\n                result = new() { Articles = new() { new() { Title = $\"HTTP Get failed: {ex.Message}\", PublishedAt = DateTime.Now} } };\n            }\n            return result;\n        }\n        private string GetUrl(NewsScope scope) => scope switch\n        {\n            NewsScope.Headlines => Headlines,\n            NewsScope.Global => Global,\n            NewsScope.Local => Local,\n            _ => throw new Exception(\"Undefined scope\")\n        };\n        private static string Headlines => $\"{UriBase}/top-headlines?country=us&apiKey={Settings.NewsApiKey}\";\n        private static string Local => $\"{UriBase}/everything?q=local&apiKey={Settings.NewsApiKey}\";\n        private static string Global => $\"{UriBase}/everything?q=global&apiKey={Settings.NewsApiKey}\";\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!disposedValue)\n            {\n                if (disposing)\n                {\n                    httpClient.Dispose();\n                }\n                disposedValue = true;\n            }\n        }\n        public void Dispose()\n        {\n            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method\n            Dispose(disposing: true);\n            GC.SuppressFinalize(this);\n        }\n    }\n    ```", "```cs\n    namespace News.ViewModels;\n    using System.Threading.Tasks;\n    using System.Web;\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using CommunityToolkit.Mvvm.Input;\n    using News.Models;\n    using News.Services;\n    public partial class HeadlinesViewModel : ViewModel\n    {\n        private readonly INewsService newsService;\n        [ObservableProperty]\n        private NewsResult currentNews;\n        public HeadlinesViewModel(INewsService newsService)\n        {\n            this.newsService = newsService;\n        }\n        public async Task Initialize(string scope) =>\n            await Initialize(scope.ToLower() switch\n            {\n                \"local\" => NewsScope.Local,\n                \"global\" => NewsScope.Global,\n                \"headlines\" => NewsScope.Headlines,\n                _ => NewsScope.Headlines\n            });\n        public async Task Initialize(NewsScope scope)\n        {\n            CurrentNews = await newsService.GetNews(scope);\n        }\n        [RelayCommand]\n        public void ItemSelected(object selectedItem)\n        {\n            var selectedArticle = selectedItem as Article;\n            var url = HttpUtility.UrlEncode(selectedArticle.Url);\n            // Placeholder for more code later on\n        }\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ContentPage \n\n        x:Name=\"headlinesview\"\n        x:Class=\"News.Views.HeadlinesView\"\n                  x:DataType=\"viewModels:HeadlinesViewModel\"\n        Title=\"Home\" Padding=\"14\">\n      <CollectionView ItemsSource=\"{Binding CurrentNews.Articles}\">\n        <CollectionView.EmptyView>\n          <Label Text=\"Loading\" />\n        </CollectionView.EmptyView>\n        <CollectionView.ItemTemplate>\n          <DataTemplate x:DataType=\"models:Article\">\n            <ContentView>\n              <ContentView.GestureRecognizers>\n                <TapGestureRecognizer Command=\"{Binding BindingContext.ItemSelectedCommand, Source={x:Reference headlinesview}}\" CommandParameter=\"{Binding .}\" />\n              </ContentView.GestureRecognizers>\n              <views:ArticleItem />\n            </ContentView>\n          </DataTemplate>\n        </CollectionView.ItemTemplate>\n      </CollectionView>\n    </ContentPage>\n    ```", "```cs\n    namespace News.Views\n    using System.Threading.Tasks;\n    using News.Services;\n    using News.ViewModels;\n    public partial class HeadlinesView : ContentPage\n    {\n        readonly HeadlinesViewModel viewModel;\n        public HeadlinesView(HeadlinesViewModel viewModel)\n        {\n            this.viewModel = viewModel;\n            InitializeComponent();\n            Task.Run(async () => await Initialize(GetScopeFromRoute()));\n        }\n        private async Task Initialize(string scope)\n        {\n            BindingContext = viewModel;\n            await viewModel.Initialize(scope);\n        }\n        private string GetScopeFromRoute()\n        {\n            var route = Shell.Current.CurrentState.Location\n            .OriginalString.Split(\"/\").LastOrDefault();\n            return route;\n        }\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ContentView \n\n        x:Class=\"News.Views.ArticleItem\"\n        x:DataType=\"models:Article\">\n      <Grid Margin=\"0\">\n        <Grid.RowDefinitions>\n          <RowDefinition Height=\"10\" />\n          <RowDefinition Height=\"40\" />\n          <RowDefinition Height=\"15\" />\n          <RowDefinition Height=\"10\" />\n          <RowDefinition Height=\"1\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n          <ColumnDefinition Width=\"65\" />\n          <ColumnDefinition Width=\"*\" />\n        </Grid.ColumnDefinitions>\n        <Label Grid.Row=\"1\" Grid.Column=\"1\" Text=\"{Binding Title}\" Padding=\"10,0\" FontSize=\"Small\" FontAttributes=\"Bold\" />\n        <Label Grid.Row=\"2\" Grid.Column=\"1\" Text=\"{Binding PublishedAt, StringFormat='{0:MMMM d, yyyy}'}\" Padding=\"10,0,0,0\" FontSize=\"Micro\" />\n        <Border Grid.Row=\"1\" Grid.RowSpan=\"2\" StrokeShape=\"RoundRectangle 15,15,15,15\" Padding=\"0\" Margin=\"0,0,0,0\" BackgroundColor=\"#667788\" >\n          <Image Source=\"{Binding UrlToImage}\" Aspect=\"AspectFill\" HeightRequest=\"55\" HorizontalOptions=\"Center\" VerticalOptions=\"Center\" />\n        </Border>\n        <BoxView Grid.Row=\"4\" Grid.ColumnSpan=\"2\" BackgroundColor=\"LightGray\" />\n      </Grid>\n    </ContentView>\n    ```", "```cs\n    public static MauiAppBuilder RegisterAppTypes(this MauiAppBuilder mauiAppBuilder)\n    {\n        // Services\n         mauiAppBuilder.Services.AddSingleton<Services.INewsService>((serviceProvider) => new Services.NewsService());\n        // ViewModels\n        mauiAppBuilder.Services.AddTransient<ViewModels.HeadlinesViewModel>();\n        //Views\n        mauiAppBuilder.Services.AddTransient<Views.AboutView>();\n        mauiAppBuilder.Services.AddTransient<Views.ArticleView>();\n        mauiAppBuilder.Services.AddTransient<Views.HeadlinesView>();\n        return mauiAppBuilder;\n    }\n    ```", "```cs\n    <Shell\n        x:Class=\"News.AppShell\"\n\n        >\n        <FlyoutItem Title=\"Home\" Icon=\"{StaticResource HomeIcon}\">\n            <ShellContent Title=\"Headlines\" Route=\"headlines\" Icon=\"{StaticResource HeadlinesIcon}\" ContentTemplate=\"{DataTemplate views:HeadlinesView}\" />\n            <Tab Title=\"News\" Route=\"news\" Icon=\"{StaticResource NewsIcon}\">\n                <ShellContent Title=\"Local\" Route=\"local\" ContentTemplate=\"{DataTemplate views:HeadlinesView}\" />\n                <ShellContent Title=\"Global\" Route=\"global\" ContentTemplate=\"{DataTemplate views:HeadlinesView}\" />\n            </Tab>\n        </FlyoutItem>\n        <FlyoutItem Title=\"Settings\" Icon=\"{StaticResource SettingsIcon}\">\n            <ContentPage Title=\"Settings\" />\n        </FlyoutItem>\n        <ShellContent Title=\"About\" Icon=\"{StaticResource AboutIcon}\">\n            <ContentPage Title=\"About\"/>\n        </ShellContent>\n    </Shell>\n    ```", "```cs\n    namespace News.ViewModels;\n    public interface INavigate\n    {\n        Task NavigateTo(string route);\n        Task PushModal(Page page);\n        Task PopModal();\n    }\n    ```", "```cs\n    namespace News;\n    using News.ViewModels;\n    public class Navigator : INavigate\n    {\n        public async Task NavigateTo(string route) => await Shell.Current.GoToAsync(route);\n        public async Task PushModal(Page page) => await Shell.Current.Navigation.PushModalAsync(page);\n        public async Task PopModal() => await Shell.Current.Navigation.PopModalAsync();\n    }\n    ```", "```cs\n    public static MauiAppBuilder RegisterAppTypes(this MauiAppBuilder mauiAppBuilder)\n    {\n        // Services\n        mauiAppBuilder.Services.AddSingleton<Services.INewsService>((serviceProvider) => new Services.NewsService());\n        mauiAppBuilder.Services.AddSingleton<ViewModels.INavigate>((serviceProvider) => new Navigator());\n        // ViewModels\n    …\n    }\n    ```", "```cs\n    public abstract class ViewModel\n    {\n        public INavigate Navigation { get; init; }\n        internal ViewModel(INavigate navigation) => Navigation = navigation;\n    }\n    ```", "```cs\n    public HeadlinesViewModel(INewsService newsService, INavigate navigation) : base (navigation)\n    ```", "```cs\n    [RelayCommand]\n    public async Task ItemSelected(object selectedItem)\n    {\n        var selectedArticle = selectedItem as Article;\n        var url = HttpUtility.UrlEncode(selectedArticle.Url);\n        await Navigation.NavigateTo($\"articleview?url={url}\");\n    }\n    ```", "```cs\n    namespace News.Views;\n    using System.Web;\n    [QueryProperty(\"Url\", \"url\")]\n    public partial class ArticleView : ContentPage\n    {\n        public string Url\n        {\n            set\n            {\n                BindingContext = new UrlWebViewSource\n                {\n                    Url = HttpUtility.UrlDecode(value)\n                };\n            }\n        }\n        public ArticleView()\n        {\n            InitializeComponent();\n        }\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <ContentPage \n\n        x:Class=\"News.Views.ArticleView\"\n        Title=\"ArticleView\">\n        <WebView Source=\"{Binding .}\" />\n    </ContentPage>\n    ```", "```cs\n    namespace News;\n    public partial class AppShell : Shell\n    {\n        public AppShell()\n        {\n            InitializeComponent();\n            Routing.RegisterRoute(\"articleview\", typeof(Views.ArticleView));\n        }\n    }\n    ```"]