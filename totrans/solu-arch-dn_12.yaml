- en: '*Chapter 9*: Architecting Modern Web Solutions with ASP.NET Core and Azure'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building rich and dynamic web solutions with **ASP.NET Core** and hosting them
    in **Azure** offers greater value over the traditional approach to web development
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides us with a foundational understanding of how to architect
    web solutions with modern .NET technologies and cloud hosting scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of modern web solution characteristics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to choose between traditional web apps and **Single-Page Apps**
    (**SPAs**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the project structure in the popular SPA frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring hosting options in Azure with high-level recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will have learned how to architect cross-platform
    modern web solutions with ASP.NET Core to take advantage of its improved performance,
    which is one of the most obvious benefits of this framework along with its cloud-based
    development support.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we will get to know how to choose between traditional web apps and
    SPAs along with a quick comparison of **Angular**, **React**, and **Vue**. We
    will also learn how to choose the best Azure hosting approach for our solution.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the characteristics of modern web solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Irrespective of the industry or business of the clients, the user expectations
    from modern web solutions are increasing with time. End users expect to use responsive
    web solutions that can be accessed from different devices with various screen
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the web solutions must be secure, flexible, and scalable to allow
    adding new features within a short time and with less effort. Modern web solutions
    are expected to be easy to use with a well-developed user experience. This offers
    our clients a unique competitive advantage to retain their customers and distinguish
    themselves from their competitors. In this section, we are going to highlight
    the main characteristics of modern web solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Scalable and cloud-hosted solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the current modern era, cloud adoption is a way to accelerate digital transformation
    for many reasons, such as the ability to automatically scale up or down the allocation
    of resources based on emerging needs. Moreover, cloud hosting offers various tools
    to automate business operations along with strong security measures that ensure
    the protection of personal data and customer information that might be associated
    with the web solution.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core is the best option, dealing perfectly with these factors. It is
    a cross-platform web framework that is optimized for cloud solutions. It is developed
    with performance and scalability in mind, which means less RAM and CPU consumption,
    and this will save us costs in infrastructure and hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Modular and loosely-coupled architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modular architecture is a design approach that consists of assembling multiple
    modules to construct a system. The main benefits of the modular concept are flexibility,
    which allows us to easily bring additional features to the system, and loosely
    coupled modules, which allow reducing the costs of maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: It is worthwhile to use ASP.NET Core to implement the modular concept in modern
    web solutions. It is an open-source framework that is developed out of different
    **NuGet** packages. This means our web solution will only compile packages that
    are really needed in the solution, and it won't include additional libraries that
    are never used, as is the case with .NET Framework. By eliminating the libraries
    that are not needed in the solution, we reduce security vulnerabilities in one
    way or another.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core is designed to allow for **dependency injection**. This is a design
    technique used to reduce the dependency problems between components or classes
    through the use of an interface, or by injecting the concrete implementation of
    a low-level class into a higher one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the Microsoft documentation for more information about dependency
    injection: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0.](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Automated testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Testing** is an essential phase to certify the product we are developing.
    While manual testing is still important for many reasons, such as exploratory
    testing and visual testing, automated tests offer great benefits such as saved
    costs, increased productivity, high-quality products, and better performance.'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core allows us to easily test the system we are developing because the
    framework is flexible and reliable, allowing fast automated testing. It provides
    capabilities to easily write unit tests for **Model-View-Controller** (**MVC**)
    **apps** as well as **Web APIs** that are mandatory for modern web solutions.
    It is seamlessly integrated with Azure allowing us to have full access to the
    latest features in **DevOps** testing tools, which is very valuable to the product
    and the development team.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional and single-page application support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SPAs are trendy in the web world, though it doesn't mean that every web solution
    should be developed using this technique. Traditional web solutions based on the
    MVC framework are still in demand and can be used in many cases. Traditional web
    solutions with **ASP.NET MVC** rely on the server to deal with the requests and
    render back the views, while SPAs rely heavily on Web APIs to get the data needed
    to render the components.
  prefs: []
  type: TYPE_NORMAL
- en: Many web solutions, nowadays, involve both the behaviors of traditional web
    apps and SPAs. ASP.NET supports having an MVC web application along with a web
    API in the same Visual Studio project. Moreover, it allows building web apps using
    any of the modern frontend frameworks, such as Angular, React, and Vue, along
    with a server-side backend web API.
  prefs: []
  type: TYPE_NORMAL
- en: Fast deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is essential to easily deploy new changes to web solutions. With **Azure
    DevOps** pipelines, we can automate the deployment process of ASP.NET Core solutions
    as part of the **continuous integration** and **continuous delivery** pipeline.
    Microsoft Azure is also integrated with **Git** repositories, allowing the automatic
    deployment of new changes that are made to a particular Git branch or tag.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we can use the tools and practices provided by GitHub, which are fully
    integrated with Azure, to deliver our products faster. Through GitHub Actions,
    which are similar to Azure pipelines, we can automate software development processes
    with the usage of workflows that are made up of steps and jobs. These workflows
    can help us build, test, package, release, and deploy any project on GitHub with
    an automated workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the available GitHub actions for Azure, check the
    following reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/developer/github/github-actions](https://docs.microsoft.com/en-us/azure/developer/github/github-actions'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Progressive web apps with Blazor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Blazor** is a web framework that provides awesome capabilities to build interactive
    web applications using **C#** instead of **JavaScript**. It relies on open web
    standards with no need to install any kind of plugin. It can be used to build
    SPAs as well as **Progressive Web Applications** (**PWAs**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'PWAs are web apps that make use of the latest technologies of the browser to
    deliver a user experience that is similar to mobile apps. They are a powerful
    trend in mobile and web development. Blazor **WebAssembly** is the client-side
    framework that can be used to build PWA apps. Here are the benefits of this technique:'
  prefs: []
  type: TYPE_NORMAL
- en: It allows for seamless offline operations and the app can load instantly. Later,
    it can sync with the server to send back the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low development costs because we don't have to build different versions for
    multiple devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides users with a similar UI/UX to mobile apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The possibility to push notifications from the server like with native apps,
    even when users are not using the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need to publish the app to a store for distribution and discovery. The app
    can be accessed through a link or a shortcut link that can be placed in the Start
    menu or on the home screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we highlighted a set of key characteristics of modern web solutions.
    In the next section, we will learn how to choose between traditional web apps
    and SPAs.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between traditional web apps and single-page apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen that there are two approaches to building web applications.
    One approach is the traditional way, where all the application logic is served
    on the server side. The other one is the modern approach represented by SPAs,
    where all the user interaction is handled by the browser using a client-side framework
    that communicates with the web server by consuming a web API. There is also a
    way to have a hybrid solution by combining the two approaches together in one
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the two approaches. We can see that in the **Single
    Page Application**, we have multiple templates that will be rendered in one single
    page using a client-side framework; also, there is no full-page refresh in this
    approach. While in the **Traditional Web Application**, we can see multiple pages
    that enforce a full refresh of the page when navigating from one page to another:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1: Single-page application versus traditional web application](img/Figure_9.01_B17366.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Single-page application versus traditional web application'
  prefs: []
  type: TYPE_NORMAL
- en: A question that usually comes to mind every time we want to architect and develop
    a new web solution is, *which approach should we adopt – traditional or single
    page?* Let's learn how to choose between these two approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting traditional web applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start discussing the key reasons for choosing traditional web applications,
    let''s understand the page lifecycle of this approach. Here is a diagram showing
    the request lifecycle in a traditional web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2: Traditional page lifecycle](img/Figure_9.02_B17366.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Traditional page lifecycle'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, we can see the initial request is made by the user
    to browse a page. This request is received by the server, which will process it
    and return an HTML page as a response, which is considered as a full-page refresh.
    It is the same behavior when we post a form to the server.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of this approach is the classic ASP.NET MVC application that
    is not making use of any JavaScript framework to render views through **AJAX**
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s get to know when we should choose the traditional web application
    approach:'
  prefs: []
  type: TYPE_NORMAL
- en: If the client-side requirements of the application are simple, then the traditional
    approach is a good fit. For example, most **CMS** websites are used by users to
    read content with a minor need for client-side functionalities. In this case,
    the traditional approach should be adopted to develop such applications where
    the actual logic is executed on the server and the response is returned as HTML
    to the user's browser. Check the *New York Times* website – you will notice that
    when you navigate from one article to another, the URL in the browser changes,
    which is a sign that this website is built using the traditional approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If JavaScript and famous frontend frameworks such as Angular, React, and Vue
    have not been adopted by our team and there is not enough time to train them before
    we start a project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the client request is to load the web app without JavaScript support, in
    this case, all JavaScript libraries will be disabled by default in the browser.
    In most cases, this is requested in intranet web apps and not online websites.
    In online websites, it is a must to have JavaScript enabled, otherwise, we won't
    be able to open the website from various devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If SEO is an essential matter in the project to improve content marketing and
    drive more leads and readers to the website. It is possible to configure the SPA
    to improve the SEO ranking of the application. However, this ranking shows better
    results with multiple pages having proper URLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the main key factors that will lead us to choose the traditional approach.
    In the next section, we will learn when to choose the SPA approach.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing single-page applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An SPA is a one-page application with multiple views that are rendered using
    JavaScript on a single page. In the following diagram, we will explore the request
    lifecycle in an SPA:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3: Single-page application lifecycle](img/Figure_9.03_B17366.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Single-page application lifecycle'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding diagram, we can see the initial request is triggered by the
    end user opening the SPA app for the first time. The server will answer by returning
    the full HTML of the home page. Moreover, the user will trigger another functionality
    such as updating data in the database and refreshing the view.
  prefs: []
  type: TYPE_NORMAL
- en: This will be achieved through an **AJAX** technique that is used by most of
    the famous frontend frameworks. The **AJAX** call will consume a web service or
    a web API and return a **JSON** object, then it will refresh the view only without
    having a full-page refresh. This creates a fluid user experience allowing users
    to feel like they are using a native app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s get to know when we should choose the SPA approach:'
  prefs: []
  type: TYPE_NORMAL
- en: If it is requested to provide users with the ability to work offline when they
    are not connected to the network or the internet. The SPA approach will give users
    the ability to sync their data with the server when the application is connected
    to the network again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If consuming less bandwidth is essential. It is known that SPA apps load their
    resources once during the initial request and they consume less bandwidth than
    traditional web apps because they do not load and transmit the full HTML page
    on every request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the response time and user experience are crucial for the client. It is well
    known that the response time of requests in SPAs is way better than traditional
    applications. Moreover, the seamless and rich user experience can significantly
    affect the business of our clients and eventually increase leads and sales.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If SEO is not important for the web application and if your team is knowledgeable
    with JavaScript, TypeScript, and any of the frontend frameworks such as Angular,
    React, Vue, or Blazor WebAssembly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we learned how to choose between traditional web applications
    and SPA web applications. We also explained the request lifecycle for both approaches.
    In the next section, we are going to have a quick overview of some common SPA
    architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the structure of SPAs with ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With proper architecture, features can easily be developed, and we can reach
    an outstanding client's satisfaction. This approach is challenging because it
    requires solid architectural expertise and a proper hosting approach, but it always
    succeeds in delivering a decent solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will get to know the structure of SPAs with ASP.NET Core.
    We will explore the project structure of the three top modern SPA technologies:
    Angular, React, and Vue.'
  prefs: []
  type: TYPE_NORMAL
- en: Angular SPAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular offers a full MVC pattern implementation. It is still one of the best
    JavaScript frameworks that is used to build SPAs. Today, with the latest version
    of **Visual Studio**, we can create a new ASP.NET web application with Angular
    enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The project will be a combination of the Angular `ClientApp` folder along with
    the web API that is usually included in the `Controllers` folder, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4: Structure of an Angular app with ASP.NET Core](img/Figure_9.04_B17366.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Structure of an Angular app with ASP.NET Core'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ClientApp` folder usually contains all the files related to an Angular
    CLI-based frontend application and the `Controllers` folder contains all the API
    endpoints. The following list explains the main files and folders under the Angular
    client app shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e2e`: This folder is used to create the different types of testing and it
    relies on a testing library called `Protractor`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This folder contains the frontend code that we will develop to render
    the components; we will spend most of the time writing code in this folder. It
    includes the styling file along with the configuration files to run the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`angular.json`: This is the configuration file where we can specify the HTML
    starting page along with the main TypeScript file that should be executed at the
    beginning of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.editorconfig`: This is the configuration file where we set the settings that
    should be applied by the editor when adding or modifying files in the Angular
    app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This file contains the list of dependencies that need to be
    available to develop and deploy the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.md`: This contains, by default, the basic project documentation in
    Markdown format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.json`: This contains the configuration needed for the TypeScript
    compiler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tslint.json`: This contains a list of rules that should be checked by the
    **tslint** tool to validate the quality of the TypeScript code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React SPAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**React** is one of the most popular JavaScript libraries used to build fast
    and interactive SPAs. It focuses on the views part of the application, mainly
    the UI components, therefore it requires using additional libraries to build the
    entire SPA.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio, we can make use of the existing project templates to create
    a new ASP.NET Core application with React. The following screenshot shows the
    project structure of the React application. The `ClientApp` folder contains all
    the files related to React and we can see the `Controllers` folder, which holds
    the .NET Web API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5: Structure of the React app with ASP.NET Core](img/Figure_9.05_B17366.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Structure of the React app with ASP.NET Core'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list explains the main files and folders under the React client
    app shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public`: This folder contains the static files of the application such as
    the HTML index page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This folder contains all the dynamic components that we will develop.
    It also contains the `App.js` file, which acts as the main `index.js` file, it
    represents the entry point of the application that triggers the `registerServiceWorker.js`
    file, which is used to cache the assets of the application. This caching mechanism
    helps load the application faster and allows offline capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This file contains the list of dependencies used in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue SPAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Vue** is a JavaScript framework that, when combined with other libraries,
    is used to build modern SPAs. Unlike other monolithic frameworks, Vue is a lightweight
    and easy-to-learn framework. In Visual Studio, we can create an ASP.NET Core application
    with Vue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the other project templates, the Vue files are included within the
    `ClientApp` folder and the `Controllers` folder, which contains the Web API controllers,
    as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: Structure of the Vue app with ASP.NET Core](img/Figure_9.06_B17366.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Structure of the Vue app with ASP.NET Core'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list explains the main files and folders under the React client
    app shown in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public`: This folder contains the static files of the application such as
    the HTML index page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This folder contains all the dynamic components that we will develop.
    It also contains the `App.vue` file, which acts as the root component of the application.
    The `main.js` JavaScript file is responsible for initializing the root component
    and introducing the required plugins. As for the `assets` folder, it contains
    all the static assets, such as the CSS files and the images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This file contains the list of dependencies used in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After this quick overview of the structure of these three frameworks (Angular,
    React, and Vue), we may ask ourselves, *which framework should we use?* It is
    difficult to answer this question because it is hard to find a framework that
    works for every situation. Here is a table showing a quick comparison between
    the three frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: A quick comparison between Angular, React, and Vue](img/Figure_9.07_B17366.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: A quick comparison between Angular, React, and Vue'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although Angular and React are perfect frameworks to build large-scale and
    enterprise web solutions with complex components and very dynamic content, writing
    code in React is easier and faster than Angular. According to a Stack Overflow
    Developer Survey conducted in 2020, React is the second most popular framework
    after **jQuery**: [https://insights.stackoverflow.com/survey/2020#most-popular-technologies](https://insights.stackoverflow.com/survey/2020#most-popular-technologies).'
  prefs: []
  type: TYPE_NORMAL
- en: While Vue is lightweight and easy to learn, it demonstrates the best performance
    between the three frameworks. Also, the Vue development community is rising steadily
    compared to React and Angular.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will get to know the three main options to host our
    web applications with Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Azure hosting recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure hosting offers great hosting capabilities for every business out there,
    whichever sector the web application is serving. It provides a wide range of cloud
    services that support us to host and scale web solutions. It helps us to deal
    with business challenges rather than spending time focusing on the infrastructure
    that we need to host the solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways to host web applications in Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App Service Web Apps**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Machines** (**VMs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Service Web Apps is the recommended hosting approach for most scenarios
    as it offers a fully managed **Platform as a Service** (**PaaS**) that is optimized
    in a way that lets our clients focus on their business, while Azure takes care
    of the required infrastructure, including scaling the application. Moreover, we
    can make use of Azure **Static Web Apps** to automatically deploy full-stack web
    apps that are built using libraries and frameworks such as Angular, React, and
    Vue to Azure from a code repository that can be on GitHub or Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important Note:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the Microsoft documentation for more information about the step-by-step
    deployment process with Azure App Service: [https://docs.microsoft.com/en-us/learn/modules/host-a-web-app-with-azure-app-service/](https://docs.microsoft.com/en-us/learn/modules/host-a-web-app-with-azure-app-service/).
    Here is another link for the same thing: [https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-app-service/](https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-app-service/).'
  prefs: []
  type: TYPE_NORMAL
- en: For applications that implement microservice architecture, it is recommended
    to host them using a container-based approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important Note:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a Microsoft reference link on how to deploy a container instance in
    Azure using the Azure portal: [https://docs.microsoft.com/en-us/azure/container-instances/container-instances-quickstart-portal](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-quickstart-portal).
    Here is another reference link on how to deploy a container instance in Azure
    using the Docker CLI: [https://docs.microsoft.com/en-us/azure/container-instances/quickstart-docker-cli](https://docs.microsoft.com/en-us/azure/container-instances/quickstart-docker-cli).'
  prefs: []
  type: TYPE_NORMAL
- en: If your application is not fully ready to be hosted on the cloud and if you
    would like to have more control over the hosting environment, you can choose **Azure
    Virtual Machines**, which is an **Infrastructure as a Service** (**IaaS**). However,
    if you choose this option, you must take into consideration that you need an ongoing
    maintenance effort to manage the VM environment and keep it up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important Note:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a reference on how to create a Windows virtual machine in the Azure
    portal: [https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal).
    Here is a Microsoft reference on how to create a Linux virtual machine in the
    Azure portal: [https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal).
    Here is another step-by-step guide on how to deploy a website with Azure virtual
    machines: [https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-virtual-machines/](https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-virtual-machines/).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored some key characteristics of modern web solutions
    that we must know to build scalable and cloud-hosted solutions. We learned about
    the difference between traditional web applications and SPAs, and how to choose
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we had an overview of the project structure for the three modern frontend
    frameworks to build SPAs with the ASP.NET Core Web API, and we provided a quick
    comparison table between these frameworks. Later in this chapter, we explored
    the main options to host web applications in Azure with high-level recommendations
    to know how to choose the best hosting approach for our solution.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dig deep into designing and implementing **Microsoft
    DevOps** solutions and we will learn about their benefits.
  prefs: []
  type: TYPE_NORMAL
