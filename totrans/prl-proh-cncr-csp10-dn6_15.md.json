["```cs\n[Fact]\n```", "```cs\nprivate async Task GetBookAsync_Returns_A_Book()\n```", "```cs\n{\n```", "```cs\n    // Arrange\n```", "```cs\n    BookService bookService = new();\n```", "```cs\n    var bookId = 123;\n```", "```cs\n    // Act\n```", "```cs\n    var book = await bookService.GetBookAsync(bookId);\n```", "```cs\n    // Assert\n```", "```cs\n    Assert.NotNull(book);\n```", "```cs\n    Assert.Equal(bookId, book.Id);\n```", "```cs\n}\n```", "```cs\n    public async Task<List<string>> \n        GetCustomerOrdersAsync(int customerId)\n    {\n        if (customerId < 1)\n        {\n            throw new ArgumentException(\"Customer ID must \n                be greater than zero.\", nameof\n                    (customerId));\n        }\n        var orders = new List<string>\n        {\n            customerId + \"1\",\n            customerId + \"2\",\n            customerId + \"3\",\n            customerId + \"4\",\n            customerId + \"5\",\n            customerId + \"6\"\n        };\n        // Simulate time to fetch orders\n        await Task.Delay(1500);\n        return orders;\n    }\n    ```", "```cs\n    [Fact]\n    public async Task GetCustomerOrdersAsync_Returns_\n        Orders_For_Valid_CustomerId()\n    {\n        var service = new BookOrderService();\n        int customerId = 3;\n        var orders = await service.GetCustomerOrdersAsync\n            (customerId);\n        Assert.NotNull(orders);\n        Assert.True(orders.Any());\n        Assert.StartsWith(customerId.ToString(), \n            orders[0]);\n    }\n    ```", "```cs\n    [Fact]\n    public void GetCustomerOrdersAsync_Returns_Orders\n        _For_Valid_CustomerId_Sync()\n    {\n        var service = new BookOrderService();\n        int customerId = 5;\n        List<string> orders = service.GetCustomer\n            OrdersAsync(customerId).GetAwaiter()\n                .GetResult();\n        Assert.NotNull(orders);\n        Assert.True(orders.Any());\n        Assert.StartsWith(customerId.ToString(), \n            orders[0]);\n    }\n    ```", "```cs\n    [Fact]\n    public async Task GetCustomerOrdersAsync_\n        Throws_Exception_For_Invalid_CustomerId()\n    {\n        var service = new BookOrderService();\n        await Assert.ThrowsAsync<ArgumentException>(async \n            () => await service.GetCustomerOrdersAsync\n                (-2));\n    }\n    ```", "```cs\n    public async Task EnqueueOrders(List<int> customerIds)\n    {\n        var tasks = new List<Task>();\n        foreach (int id in customerIds)\n        {\n            tasks.Add(EnqueueOrders(id));\n        }\n        await Task.WhenAll(tasks);\n    }\n    ```", "```cs\n    public async Task EnqueueOrders()\n    {\n        await EnqueueOrders(new List<int> { 1, 2 });\n    }\n    ```", "```cs\n    [Fact]\n    public async Task EnqueueOrders_Creates_Orders_For_\n        All_Customers()\n    {\n        var orderService = new OrderService();\n        var orderNumbers = new List<int> { 2, 5, 9 };\n        await orderService.EnqueueOrders(orderNumbers);\n        var orders = orderService.DequeueOrders();\n        Assert.NotNull(orders);\n        Assert.True(orders.Any());\n        Assert.Contains(orders, o => o.CustomerId == 2);\n        Assert.Contains(orders, o => o.CustomerId == 5);\n        Assert.Contains(orders, o => o.CustomerId == 9);\n    }\n    ```", "```cs\n    public int EnqueueCount = 0;\n    ```", "```cs\n    private async Task EnqueueOrders(int customerId)\n    {\n        for (int i = 1; i < 6; i++)\n        {\n            ...\n        }\n        EnqueueCount++;\n    }\n    ```", "```cs\n    public void EnqueueOrdersSync(List<int> customerIds)\n    {\n        EnqueueCount = 0;\n        var tasks = new List<Task>();\n        foreach (int id in customerIds)\n        {\n            tasks.Add(EnqueueOrders(id));\n        }\n    }\n    ```", "```cs\n    [Fact]\n    public void EnqueueOrders_Creates_Orders_For_All\n        _Customers_SpinWait()\n    {\n        var orderService = new OrderService();\n        var orderNumbers = new List<int> { 2, 5, 9 };\n        orderService.EnqueueOrdersSync(orderNumbers);\n    SpinWait.SpinUntil(() => orderService.EnqueueCount \n            == orderNumbers.Count);\n        var orders = orderService.DequeueOrders();\n        Assert.NotNull(orders);\n        Assert.True(orders.Any());\n        Assert.Contains(orders, o => o.CustomerId == 2);\n        Assert.Contains(orders, o => o.CustomerId == 5);\n        Assert.Contains(orders, o => o.CustomerId == 9);\n    }\n    ```", "```cs\n    public List<string> ProcessText(List<string> \n        textValues)\n    {\n        List<string> result = new();\n        Parallel.ForEach(textValues, (txt) => \n        {\n            if (string.IsNullOrEmpty(txt))\n            {\n                throw new Exception(\"Strings cannot be \n                    empty\");\n            }\n            result.Add(string.Concat(txt, \n                Environment.TickCount));\n        });\n        return result;\n    }\n    ```", "```cs\n    public async Task<List<string>> \n        ProcessTextAsync(List<string> textValues)\n    {\n        List<string> result = new();\n        await Parallel.ForEachAsync(textValues, async \n            (txt, _) =>\n        {\n            if (string.IsNullOrEmpty(txt))\n            {\n                throw new Exception(\"Strings cannot \n                    be empty\");\n            }\n            result.Add(string.Concat(txt, \n                Environment.TickCount));\n            await Task.Delay(100);\n        });\n        return result;\n    }\n    ```", "```cs\n    [Fact]\n    public void ProcessText_Returns_Expected_Strings()\n    {\n        var service = new TextService();\n        var fruits = new List<string> { \"apple\", \"orange\", \n            \"banana\", \"peach\", \"cherry\" };\n        var results = service.ProcessText(fruits);\n        Assert.Equal(fruits.Count, results.Count);\n    }\n    [Fact]\n    public void ProcessText_Throws_Exception_For\n        _Empty_String()\n    {\n        var service = new TextService();\n        var fruits = new List<string> { \"apple\", \"orange\", \n            \"banana\", \"peach\", \"\" };\n        Assert.Throws<AggregateException>(() => \n            service.ProcessText(fruits));\n    }\n    ```", "```cs\n    [Fact]\n    public async Task ProcessTextAsync_Returns_Expected\n        _Strings()\n    {\n        var service = new TextService();\n        var fruits = new List<string> { \"apple\", \"orange\", \n            \"banana\", \"peach\", \"cherry\" };\n        var results = await service.ProcessTextAsync\n             (fruits);\n        Assert.Equal(fruits.Count, results.Count);\n    }\n    [Fact]\n    public async Task ProcessTextAsync_Throws_Exception\n        _For_Empty_String()\n    {\n        var service = new TextService();\n        var fruits = new List<string> { \"apple\", \"orange\", \n            \"banana\", \"peach\", \"\" };\n        await Assert.ThrowsAsync<Exception>(async () => \n            await service.ProcessTextAsync(fruits));\n    }\n    ```", "```cs\n    public class Worker : IDisposable\n    {\n        public void Dispose()\n        {\n            // dispose objects here\n        }\n        public void DoWork(object? sender, \n            System.Timers.ElapsedEventArgs e)\n        {\n            Parallel.For(0, 5, (x) =>\n            {\n                Thread.Sleep(100);\n            });\n        }\n    }\n    ```", "```cs\n    public void WorkWithTimer()\n    {\n        using var worker = new Worker();\n        var timer = new System.Timers.Timer(1000);\n        timer.Elapsed += worker.DoWork;\n        timer.Start();\n        Thread.Sleep(5000);\n    }\n    ```", "```cs\n    using JetBrains.dotMemoryUnit;\n    [assembly: SuppressXUnitOutputExceptionAttribute]\n    namespace MemoryExample.Tests\n    {\n        public class WorkServiceMemoryTests\n        {\n            [Fact]\n            public void WorkWithSquares_Releases_Memory_\n                From_Bitmaps()\n            {\n                var service = new WorkService();\n                service.WorkWithTimer();\n                GC.Collect();\n                // Make sure there are no Worker \n                    objects in memory\n                dotMemory.Check(m => Assert.Equal(0, \n                    m.GetObjects(o =>\n                        o.Type.Is<Worker>())\n                            .ObjectsCount));\n            }\n        }\n    }\n    ```", "```cs\n    .\\dotMemoryUnit.exe \"c:\\Program Files\\dotnet\\dotnet.exe\" – test \"c:\\dev\\net6.0\\MemoryExample.Tests.dll\"\n    ```", "```cs\n    public void WorkWithTimer()\n    {\n        using var worker = new Worker();\n        using var timer = new System.Timers.Timer(1000);\n        timer.Elapsed += worker.DoWork;\n        timer.Start();\n        Thread.Sleep(5000);\n        timer.Stop();\n        timer.Elapsed -= worker.DoWork;\n    }\n    ```"]