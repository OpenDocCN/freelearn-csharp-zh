["```cs\ndotnet run -- -h\n```", "```cs\nusing System.CommandLine;\nnamespace bookmarkr.Commands;\npublic class ExportCommand : Command\n{\n    #region Constructor\n    public ExportCommand(string name, string? description = null)\n        : base(name, description)\n    {\n    }\n    #endregion\n}\n```", "```cs\n#region Options\nprivate Option<FileInfo> outputfileOption = new Option<FileInfo>(\n    [\"--file\", \"-f\"],\n    \"The output file that will store the bookmarks\"\n)\n{\n    IsRequired = true\n}.LegalFileNamesOnly();\n#endregion\n```", "```cs\n#region Constructor\npublic ExportCommand(string name, string? description = null)\n    : base(name, description)\n{\n    AddOption(outputfileOption);\n}\n#endregion\n```", "```cs\n#region Constructor\npublic ExportCommand(string name, string? description = null)\n    : base(name, description)\n{\n    AddOption(outputfileOption);\n    this.SetHandler(async (context) =>\n    {\n        FileInfo? outputfileOptionValue = context.ParseResult.\n        GetValueForOption(outputfileOption);\n        var token = context.GetCancellationToken();\n        await OnExportCommand(outputfileOptionValue!, token);\n    });\n}\n#endregion\n```", "```cs\n#region Handler method\nprivate async Task OnExportCommand(FileInfo outputfile,\n    CancellationToken token)\n{\n    // method body removed for brevity.\n    // It is exactly similar to the one from the previous chapters.\n}\n#endregion\n```", "```cs\nusing System.Text.Json;\n```", "```cs\nnamespace bookmarkr.Services;\npublic interface IBookmarkService\n{\n    void AddLink(string name, string url, string category);\n    void AddLinks(string[] names, string[] urls, string[] categories);\n    void ListAll();\n    List<Bookmark> GetAll();\n    void Import(List<Bookmark> bookmarks);\n    BookmarkConflictModel? Import(Bookmark bookmark);\n    List<Bookmark> GetBookmarksByCategory(string category);\n}\n```", "```cs\nnamespace bookmarkr.Services;\npublic class BookmarkService : IBookmarkService\n{\n    // method body removed for brevity.\n    // It is exactly similar to the one from the previous chapters.\n}\n```", "```cs\nusing System.CommandLine;\nusing System.Text.Json;\nusing bookmarkr.Services;\nnamespace bookmarkr.Commands;\npublic class ExportCommand : Command\n{\n    #region Properties\n    private IBookmarkService _service;\n    #endregion\n    #region Constructor\n    public ExportCommand(IBookmarkService service, string name, \n    string? description = null)\n        : base(name, description)\n    {\n        _service = service;\n        AddOption(outputfileOption);\n        this.SetHandler(async (context) =>\n        {\n            FileInfo? outputfileOptionValue = context.ParseResult.\n            GetValueForOption(outputfileOption);\n            var token = context.GetCancellationToken();\n            await OnExportCommand(outputfileOptionValue!, token);\n        });\n    }\n    #endregion\n  // The \"Options\" region hasn't changed and removed for brevity.\n#region Handler method\n    private async Task OnExportCommand(FileInfo outputfile, \n    CancellationToken token)\n    {\n    // …\n    var bookmarks = _service.GetAll();\n    // …\n    }\n    #endregion\n}\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nclass Program\n{\n    static async Task<int> Main(string[] args)\n    {\n        FreeSerilogLoggerOnShutdown();\n        /** DECLARE A VARIABLE FOR THE IBookmarkService **/\n        IBookmarkService _service;\n        /** INSTANTIATE THE ROOT COMMAND **/\n        var rootCommand = new RootCommand(\n            \"Bookmarkr is a bookmark manager provided as a CLI \n            application.\")\n        {\n        };\n        rootCommand.SetHandler(OnHandleRootCommand);\n        /** CONFIGURE DEPENDENCY INJECTION FOR THE IBookmarkService \n        **/\n        var host = Host.CreateDefaultBuilder(args)\n            .ConfigureServices((hostContext, services) =>\n            {\n                // Register your services here\n                services.AddSingleton<IBookmarkService, \n                BookmarkService>();\n            })\n            .Build();\n        _service = host.Services.GetRequiredService<IBookmarkService>();\n        /** REGISTER SUBCOMMANDS OF THE ROOT COMMAND **/\n        rootCommand.AddCommand(new ExportCommand(_service, \"export\", \n        \"Exports all bookmarks to a file\"));\n        /** THE BUILDER PATTERN **/\n        // code removed for brevity.\n    }\n    /** HANDLER OF THE ROOT COMMAND **/\n    static void OnHandleRootCommand()\n    {\n        Console.WriteLine(\"Hello from the root command!\");\n    }\n    static void FreeSerilogLoggerOnShutdown()\n    {\n        // code removed for brevity.\n    }\n    static void ExecuteShutdownTasks()\n    {\n        // code removed for brevity.\n    }\n}\n```", "```cs\ndotnet run export --file 'bookmarks33.json'\n```", "```cs\nusing System.CommandLine;\nnamespace bookmarkr.Options;\npublic class FileInfoOption : Option<FileInfo>\n{\n    public FileInfoOption(string[] aliases, string? description = \n    null, bool onlyAllowLegalFileNames = true, bool isRequired = true)\n        : base(aliases, description)\n    {\n        if(onlyAllowLegalFileNames == true)\n        {\n            this.LegalFileNamesOnly();\n        }\n        this.IsRequired = isRequired;\n    }\n}\n```", "```cs\nvar outputfileOption = new FileInfoOption([\"--file\", \"-f\"], \"The output file path\");\n```", "```cs\npublic class ExportCommand : Command\n{\n    #region Constructor\n    public ExportCommand(IBookmarkService service, string name, \n    string? description = null)\n        : base(name, description)\n    {\n        _service = service;\n        outputfileOption = new FileInfoOption([\"--file\", \"-f\"], \"The \n        output file path\");\n        AddOption(outputfileOption);\n        // remaining of the code removed for brevity.\n    }\n    #endregion\n    #region Options\n    private FileInfoOption outputfileOption;\n    #endregion\n    // remaining of the code removed for brevity.\n}\n```", "```cs\nusing System.CommandLine;\nnamespace bookmarkr.Commands.Base;\npublic class CommandWithBaseHandler : Command\n{\n    public CommandWithBaseHandler(string name, string? description = \n    null)\n        : base(name, description)\n    {\n    }\n    public virtual async Task OnExportCommand(FileInfo outputfile, \n    CancellationToken token)\n    {\n        // method body removed for brevity.\n    }\n}\n```", "```cs\nusing System.CommandLine;\nusing System.Text.Json;\nusing bookmarkr.Services;\nusing bookmarkr.Options;\nusing bookmarkr.Commands.Base;\nnamespace bookmarkr.Commands;\npublic class ExportCommand : CommandWithBaseHandler\n{\n    // the remaining code is not shown for brevity.\n    // the OnExportCommand method is removed from this class since it \n    // has been moved to the CommandWithBaseHandler base class.\n}\n```"]