- en: '*Chapter 5*: Configuring WebHostBuilder'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When reading [*Chapter 4*](B17996_04_ePub.xhtml#_idTextAnchor066), *Configuring
    and Customizing HTTPS with Kestrel*, you might have asked yourself a question:'
  prefs: []
  type: TYPE_NORMAL
- en: '*How can I use user secrets to pass the password to the HTTPS configuration?*'
  prefs: []
  type: TYPE_NORMAL
- en: You might even be wondering whether you can fetch the configuration from within
    `Program.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to answer these questions through the following
    topic:'
  prefs: []
  type: TYPE_NORMAL
- en: Re-examining `WebHostBuilderContext`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topic in this chapter refers to the hosting layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The ASP.NET Core architecture](img/Figure_5.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – The ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the descriptions in this chapter, you will need to create an **ASP.NET**
    **Core** application. To do this, open your console, shell, or Bash terminal,
    and change to your working directory. Then, use the following command to create
    a new web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the project in Visual Studio by double-clicking the project file,
    or in Visual Studio Code by typing the following command in the already-open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The simple `web` project template changed in .NET 6.0\. In version 6.0, Microsoft
    introduced **minimal APIs** and changed the project template to use the minimal
    API approach. I'm going to show you the differences between these templates within
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: All of the code samples in this chapter can be found in the **GitHub** repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: Re-examining WebHostBuilderContext
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember the `WebHostBuilder` Kestrel configuration in the `Program.cs` file
    that we looked at in [*Chapter 4*](B17996_04_ePub.xhtml#_idTextAnchor066), *Configuring
    and Customizing HTTPS with Kestrel*? In that chapter, we saw that you should use
    user secrets to configure the certificates password, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This snippet is still valid for .NET 5.0 and prior versions, and it still is
    valid for almost all web projects in .NET 6.0\. But it is not valid for the `web`
    project template we use in the technical requirements section. The `Program.cs`
    file for a minimal API looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This means the configuration we implemented in the last chapter would look
    like this within a minimal API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The following is valid for all project templates in .NET 6.0 and prior versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, you are not able to fetch the configuration inside this code. You
    need to know that the `UseKestrel()` method is overloaded, as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This first argument is a `WebHostBuilderContext` instance, which you can use
    to access the configuration. So, let''s rewrite the lambda a little bit to use
    this context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we write the keys using the colon divider, as this is the
    way in which you need to read nested configurations from `appsettings.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: This is just a sample of how to read configurations to configure **Kestrel**.
    Please never, *ever* store any credentials inside the code. Use the following
    concepts instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are also able to read from the user secrets store where the keys are set
    up with the following **.NET** **CLI** commands that you need to execute in the
    project folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This also applies to environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Since the user secrets store is for local development only, you should pass
    credentials via environment variables to the application in production, or production-like
    applications. Also, the app settings configuration you will make in Azure will
    be passed as environment variables to your application.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does this all work?
  prefs: []
  type: TYPE_NORMAL
- en: How does it work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Do you remember the days back when you needed to set app configurations in
    the `Startup.cs` file in ASP.NET Core 1.0? They were configured in the constructor
    of the `StartUp` class and looked similar to this if you added user secrets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This code is now wrapped inside the `CreateDefaultBuilder` method (as you can
    see on GitHub – refer to the *Further reading* section for details) and looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is almost the same code, and it is one of the first things that gets executed
    when building the `WebHost`.
  prefs: []
  type: TYPE_NORMAL
- en: This needs to be one of the first things we set up because Kestrel is configurable
    via the app configuration. You can specify ports, URLs, and more by using environment
    variables or `appsettings.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find these lines in `WebHost.cs` on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that you are able to add these lines to `appsettings.json` to configure
    Kestrel endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, environment variables such as the following can be used to configure
    endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let's now recap everything we've covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inside `Program.cs`, you are able to make app configurations inside the lambdas
    of the configuration methods, provided you have access to the `WebHostBuilderContext`.
    This way, you can use all the configurations you like to configure `WebHostBuilder`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to have a look at the hosting details. You
    will learn about different hosting models and how to host an ASP.NET Core application
    in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `WebHost.cs` file in the ASP.NET GitHub repository: [https://github.com/aspnet/MetaPackages/blob/d417aacd7c0eff202f7860fe1e686aa5beeedad7/src/Microsoft.AspNetCore/WebHost.cs](https://github.com/aspnet/MetaPackages/blob/d417aacd7c0eff202f7860fe1e686aa5beeedad7/src/Microsoft.AspNetCore/WebHost.cs).'
  prefs: []
  type: TYPE_NORMAL
