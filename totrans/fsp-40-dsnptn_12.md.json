["```cs\n        type T = interface end // base \n        type S() = interface T // an implementation \n        let f (x: T) = () // a function upon base \n        f(S()) // application does not require coercion! \n\n```", "```cs\ntype OrderType = Sale | Refund \ntype Transaction = Transaction of OrderType * decimal \n\n```", "```cs\nlet sale total cost = total + cost \nlet refund total cost = total - cost \n\n```", "```cs\nlet Order total = function \n| Transaction(OrderType.Sale, cost) -> sale total cost \n| Transaction(OrderType.Refund, cost) -> refund total cost \nlet Cancellation total = function \n| Transaction(OrderType.Sale, cost) -> refund total cost \n| Transaction(OrderType.Refund, cost) -> sale total cost \n\n```", "```cs\nopen System \ntype PayBy = ACH | Check | Wire \n             override x.ToString() = \n                match x with \n                | ACH -> \"By ACH\" \n                | Check -> \"By Check\" \n                | Wire -> \"By Wire\" \ntype Payment = string \ntype BankReqs = { ABA: string; Account: string} \ntype Merchant = { MerchantId: Guid; Requisites: BankReqs } \n\n```", "```cs\ntype ITemplate = \n    abstract GetPaymentDue: Guid -> Merchant*decimal \n    abstract FormatPayment: Merchant*decimal -> Payment \n    abstract SubmitPayment: Payment ->bool \n\n```", "```cs\nlet Template  payBy = \n    { new ITemplate with \n        member __.GetPaymentDuemerchantId = \n          printfn \"Getting payment due of %s\" \n          (merchantId.ToString()) \n        (* mock access to ERP getting Accounts payable due for\n            merchantId *) \n        ({ MerchantId = merchantId; \n          Requisites = {ABA=\"021000021\"; \n          Account=\"123456789009\"} }, 25366.76M) \n        member __.FormatPayment (m,t)  = \n          printfn \"Formatting payment of %s\" \n          (m.MerchantId.ToString()) \n        sprintf \"%s:%s:%s:%s:%.2f\" \"Payment to\" m.Requisites.ABA \n          m.Requisites.Account (payBy.ToString()) t \n        member __.SubmitPayment p = \n          printfn \"Submitting %s...\" p \n          true \n     } \n\n```", "```cs\nlet makePaymentmerchantIdpayBy  = \n    let template = Template payBy in \ntemplate.GetPaymentDuemerchantId \n    |>template.FormatPayment \n    |>template.SubmitPayment \n\n```", "```cs\nopen System \nopen System.Data \ntype InvoiceFormat = \n| Excel \n| Csv \nlet load (format: InvoiceFormat) (path: String) = \n    let dt = new DataTable() in \n    (* IMPLEMENTATION GOES HERE *) \ndt \nlet merge (target: string) (dt: DataTable) = \n    (* IMPLEMENTATION GOES HERE *) \n    () \n\n```", "```cs\ntype ILoadVendorInvoices = \n    abstract LoadInvoices: String ->DataTable \n    abstract member MergeInvoices: DataTable -> unit \n\n```", "```cs\nlet LoadFedex = \n    { new ILoadVendorInvoices with \n        member __.LoadInvoices path = load Csv path \n        member __.MergeInvoicesdataTable = \n            merge \"Fedex\" dataTable \n    } \nlet LoadLasership = \n    { new ILoadVendorInvoices with \n        member __.LoadInvoices path = load Excel path \n        member __.MergeInvoicesdataTable = \n            merge \"Lasership\" dataTable \n    } \n\n```", "```cs\nlet importEDIData (loader: ILoadVendorInvoices) path = \n    loader.LoadInvoices path |>loader.MergeInvoices \n\n```"]