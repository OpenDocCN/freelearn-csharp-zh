["```cs\nusing System;\nConsole.WriteLine(\"Hello world!\");\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <TargetFramework>net5.0</TargetFramework>\n        <OutputType>Exe</OutputType>\n    </PropertyGroup>\n</Project>\n```", "```cs\nHello world!\n```", "```cs\n<ImplicitUsings>enable</ImplicitUsings>\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.Run();\n```", "```cs\napp.MapGet(\"minimal-endpoint-inline\", () => \"GET!\");\n```", "```cs\nGET!\n```", "```cs\napp.MapGet(\"minimal-endpoint-inline\", () => \"GET!\");\n```", "```cs\napp.MapGet(\"minimal-endpoint-method\", MyMethod);\nvoid MyMethod() { }\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-input-route-implicit/{id}\", \n    (int id) => $\"The id was {id}.\"\n);\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-input-route-explicit/{id}\",\n    ([FromRoute] int id) => $\"The id was {id}.\"\n);\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-input-service/{value}\",\n    (string value, SomeInternalService service)\n        => service.Respond(value)\n);\npublic class SomeInternalService {\n    public string Respond(string value)\n        => $\"The value was {value}\";\n}\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-input-HttpContext/\",\n    (HttpContext context)\n        => context.Response.WriteAsync(\"HttpContext!\")\n);\napp.MapGet(\n    \"minimal-endpoint-input-HttpResponse/\",\n    (HttpResponse response)\n        => response.WriteAsync(\"HttpResponse!\")\n);\n```", "```cs\npublic static bool TryParse(string value, TSelf out result);\npublic static bool TryParse(string value, IFormatProvider provider, TSelf out result);\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-input-Coordinate/\",\n    (Coordinate coordinate) => coordinate\n);\npublic class Coordinate : IParsable<Coordinate>\n{\n    public double Latitude { get; set; }\n    public double Longitude { get; set; }\n    public static Coordinate Parse(\n        string value, \n        IFormatProvider? provider)\n    {\n        if (TryParse(value, provider, out var result))\n        {\n            return result;\n        }\n        throw new ArgumentException(\n            \"Cannot parse the value into a Coordinate.\",\n            nameof(value)\n        );\n    }\n    public static bool TryParse(\n        [NotNullWhen(true)] string? s,\n        IFormatProvider? provider,\n        [MaybeNullWhen(false)] out Coordinate result)\n    {\n        var segments = s?.Split(\n            ',',\n            StringSplitOptions.TrimEntries |\n            StringSplitOptions.RemoveEmptyEntries\n        );\n        if (segments?.Length == 2)\n        {\n            var latitudeIsValid = double.TryParse(\n                segments[0],\n                out var latitude\n            );\n            var longitudeIsValid = double.TryParse(\n                segments[1],\n                out var longitude\n            );\n            if (latitudeIsValid && longitudeIsValid)\n            {\n                result = new() {\n                    Latitude = latitude,\n                    Longitude = longitude\n                };\n                return true;\n            }\n        }\n        result = null;\n        return false;\n    }\n}\n```", "```cs\n/minimal-endpoint-input-Coordinate?coordinate=45.501690%2C%20-73.567253\n```", "```cs\n{\n  \"latitude\": 45.50169,\n  \"longitude\": -73.567253\n}\n```", "```cs\npublic static ValueTask<TSelf?> BindAsync(HttpContext context, ParameterInfo parameter);\npublic static ValueTask<TSelf?> BindAsync(HttpContext context);\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-input-Person/\",\n    (Person person) => person\n);\npublic class Person : IBindableFromHttpContext<Person>\n{\n    public required string Name { get; set; }\n    public required DateOnly Birthday { get; set; }\n    public static ValueTask<Person?> BindAsync(\n        HttpContext context,\n        ParameterInfo parameter)\n    {\n        var name = context.Request.Query[\"name\"].Single();\n        var birthdayIsValid = DateOnly.TryParse(\n            context.Request.Query[\"birthday\"],\n            out var birthday\n        );\n        if (name is not null && birthdayIsValid) {\n            var person = new Person() {\n                Name = name,\n                Birthday = birthday\n            };\n            return ValueTask.FromResult(person)!;\n        }\n        return ValueTask.FromResult(default(Person));\n    }\n}\n```", "```cs\n/minimal-endpoint-input-Person?name=John%20Doe&birthday=2023-06-14\n```", "```cs\n{\n  \"name\": \"John Doe\",\n  \"birthday\": \"2023-06-14\"\n}\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-input-Person2/\",\n    ([AsParameters] Person2 person) => person\n);\npublic class Person2\n{\n    public required string Name { get; set; }\n    public required DateOnly Birthday { get; set; }\n}\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-output-coordinate/\",\n    () => new Coordinate {\n        Latitude = 43.653225,\n        Longitude = -79.383186\n    }\n);\n```", "```cs\n{\n  \"latitude\": 43.653225,\n  \"longitude\": -79.383186\n}\n```", "```cs\napp.MapGet(\n    \"minimal-endpoint-output-coordinate-ok1/\",\n    () => Results.Ok(new Coordinate {\n        Latitude = 43.653225,\n        Longitude = -79.383186\n    })\n);\napp.MapGet(\n    \"minimal-endpoint-output-coordinate-ok2/\",\n    () => TypedResults.Ok(new Coordinate {\n        Latitude = 43.653225,\n        Longitude = -79.383186\n    })\n);\n```", "```cs\napp.MapGet(\n    \"multiple-TypedResults/\",\n    Results<Ok, Conflict> ()\n        => Random.Shared.Next(0, 100)  %  2  ==  0\n            ? TypedResults.Ok()\n            : TypedResults.Conflict()\n);\n```", "```cs\napp.MapGet(\n    \"multiple-TypedResults-delegate/\",\n    MultipleResultsDelegate\n);\nResults<Ok, Conflict> MultipleResultsDelegate()\n{\n    return Random.Shared.Next(0, 100) % 2 == 0\n        ? TypedResults.Ok()\n        : TypedResults.Conflict();\n}\n```", "```cs\nvar metadataGroup = app\n    .MapGroup(\"minimal-endpoint-metadata\")\n    .WithTags(\"Metadata Endpoints\")\n    .WithOpenApi()\n;\n```", "```cs\nconst string NamedEndpointName = \"Named Endpoint\";\nmetadataGroup\n    .MapGet(\n        \"with-name\",\n        () => $\"Endpoint with name '{NamedEndpointName}'.\"\n    )\n    .WithName(NamedEndpointName)\n    .WithOpenApi(operation => {\n        operation.Description = \"An endpoint that returns its name.\";\n        operation.Summary = $\"Endpoint named '{NamedEndpointName}'.\";\n        operation.Deprecated = true;\n        return operation;\n    })\n;\n```", "```cs\nmetadataGroup\n    .MapGet(\n        \"url-of-named-endpoint/{endpointName?}\",\n        (string? endpointName, LinkGenerator linker) => {\n            var name = endpointName ?? NamedEndpointName;\n            return new {\n                name,\n                uri = linker.GetPathByName(name)\n            };\n        }\n    )\n    .WithDescription(\"Return the URL of the specified named endpoint.\")\n    .WithOpenApi(operation => {\n        var endpointName = operation.Parameters[0];\n        endpointName.Description = \"The name of the endpoint to get the URL for.\";\n        endpointName.AllowEmptyValue = true;\n        endpointName.Example = new OpenApiString(NamedEndpointName);\n        return operation;\n    })\n;\n```", "```cs\n{\n  \"name\": \"Named Endpoint\",\n  \"uri\": \"/minimal-endpoint-metadata/with-name\"\n}\n```", "```cs\nmetadataGroup\n    .MapGet(\"excluded-from-open-api\", () => { })\n    .ExcludeFromDescription()\n;\n```", "```cs\nbuilder.Services.ConfigureHttpJsonOptions(options => {\n    options.SerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.KebabCaseLower;\n});\n```", "```cs\nvar kebabSerializer = new JsonSerializerOptions(JsonSerializerDefaults.Web)\n{\n    PropertyNamingPolicy = JsonNamingPolicy.KebabCaseLower\n};\njsonGroup.MapGet(\n    \"kebab-person/\",\n    () => TypedResults.Json(new {\n        FirstName = \"John\",\n        LastName = \"Doe\"\n    }, kebabSerializer)\n);\n```", "```cs\nvar enumSerializer = new JsonSerializerOptions(JsonSerializerDefaults.Web);\nenumSerializer.Converters.Add(new JsonStringEnumConverter());\njsonGroup.MapGet(\n    \"enum-as-string/\",\n    () => TypedResults.Json(new {\n        FirstName = \"John\",\n        LastName = \"Doe\",\n        Rating = Rating.Good,\n    }, enumSerializer)\n);\n```", "```cs\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"rating\": \"Good\"\n}\n```", "```cs\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"rating\": 2\n}\n```", "```cs\ninlineGroup\n    .MapGet(\"basic\", () => { })\n    .AddEndpointFilter((context, next) =>\n    {\n        return next(context);\n    });\n```", "```cs\npublic enum Rating\n{\n    Bad = 0,\n    Ok,\n    Good,\n    Amazing\n}\n// ...\ninlineGroup\n    .MapGet(\"good-rating/{rating}\", (Rating rating)\n        => TypedResults.Ok(new { Rating = rating }))\n    .AddEndpointFilter(async (context, next) =>\n    {\n        var rating = context.GetArgument<Rating>(0);\n        if (rating == Rating.Bad)\n        {\n            return TypedResults.Problem(\n                detail: \"This endpoint is biased and only accepts positive ratings.\",\n                statusCode: StatusCodes.Status400BadRequest\n            );\n        }\n        return await next(context);\n    });\n```", "```cs\nfilterGroup\n    .MapGet(\"good-rating/{rating}\", (Rating rating)\n        => TypedResults.Ok(new { Rating = rating }))\n    .AddEndpointFilter<GoodRatingFilter>();\n;\nfilterGroup\n    .MapPut(\"good-rating/{rating}\", (Rating rating)\n        => TypedResults.Ok(new { Rating = rating }))\n    .AddEndpointFilter<GoodRatingFilter>();\n;\npublic class GoodRatingFilter : IEndpointFilter\n{\n    public async ValueTask<object?> InvokeAsync(\n        EndpointFilterInvocationContext context, \n        EndpointFilterDelegate next)\n    {\n        var rating = context.GetArgument<Rating>(0);\n        if (rating == Rating.Bad)\n        {\n            return TypedResults.Problem(\n                detail: \"This endpoint is biased and only accepts positive ratings.\",\n                statusCode: StatusCodes.Status400BadRequest\n            );\n        }\n        return await next(context);\n    }\n}\n```", "```cs\ninlineGroup\n    .MapGet(\"endpoint-filter-factory\", () => \"RAW\")\n    .AddEndpointFilterFactory((filterFactoryContext, next) =>\n    {\n        // Building RequestDelegate code here.\n        var logger = filterFactoryContext.ApplicationServices\n            .GetRequiredService<ILoggerFactory>()\n            .CreateLogger(\"endpoint-filter-factory\");\n        logger.LogInformation(\"Code that runs when ASP.NET Core builds the RequestDelegate\");\n        // Returns the EndpointFilterDelegate ASP.NET Core executes as part of the pipeline.\n        return async invocationContext =>\n        {\n            logger.LogInformation(\"Code that ASP.NET Core executes as part of the pipeline\");\n            // Filter code here\n            return await next(invocationContext);\n        };\n    });\n```", "```cs\n[11:22:56.673] info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:7298\n[11:22:56.698] info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5085\n[11:22:56.702] info: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\n[11:22:56.705] info: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\n[11:22:56.708] info: Microsoft.Hosting.Lifetime[0]\n      Content root path: .../C05/Minimal.API\n[11:23:28.349] info: endpoint-filter-factory[0]\n      Code that runs when ASP.NET Core builds the RequestDelegate\n[11:23:45.181] info: endpoint-filter-factory[0]\n      Code that runs when ASP.NET Core builds the RequestDelegate\n[11:24:56.043] info: endpoint-filter-factory[0]\n      Code that ASP.NET Core executes as part of the pipeline\n[11:24:57.439] info: endpoint-filter-factory[0]\n      Code that ASP.NET Core executes as part of the pipeline\n[11:24:58.443] info: endpoint-filter-factory[0]\n      Code that ASP.NET Core executes as part of the pipeline\n[11:24:59.262] info: endpoint-filter-factory[0]\n      Code that ASP.NET Core executes as part of the pipeline\n[11:25:00.154] info: endpoint-filter-factory[0]\n      Code that ASP.NET Core executes as part of the pipeline\n```", "```cs\nasync invocationContext =>\n{\n    logger.LogInformation(\"Code that ASP.NET Core executes as part of the pipeline\");\n    return await next(invocationContext);\n};\n```", "```cs\n// Create a reusable logger\nvar loggerFactory = app.ServiceProvider\n    .GetRequiredService<ILoggerFactory>();\nvar groupLogger = loggerFactory\n    .CreateLogger(\"organizing-endpoints\");\n// Create the group\nvar group = app\n    .MapGroup(\"organizing-endpoints\")\n    .WithTags(\"Organizing Endpoints\")\n    .AddEndpointFilter(async (context, next) => {\n        groupLogger.LogTrace(\"Entering organizing-endpoints\");\n        // Omited argument logging \n        var result = await next(context);\n        groupLogger.LogTrace(\"Exiting organizing-endpoints\");\n        return result;\n    })\n;\n// Map endpoints in the group\ngroup.MapGet(\"demo/\", ()\n    => \"GET endpoint from the organizing-endpoints group.\");\ngroup.MapGet(\"demo/{id}\", (int id)\n    => $\"GET {id} endpoint from the organizing-endpoints group.\");\n```", "```cs\n[23:55:01.516] trce: organizing-endpoints[0]\n      Entering organizing-endpoints\n[23:55:01.516] trce: organizing-endpoints[0]\n      Exiting organizing-endpoints\n[23:55:06.028] trce: organizing-endpoints[0]\n      Entering organizing-endpoints\n[23:55:06.028] dbug: organizing-endpoints[0]\n      Argument 1: Int32 = 123\n[23:55:06.028] trce: organizing-endpoints[0]\n      Exiting organizing-endpoints\n```", "```cs\nnamespace Minimal.API;\npublic static class OrganizingEndpoints\n{\n    public static void MapOrganizingEndpoints(\n        this IEndpointRouteBuilder app)\n    {\n        // Map endpoints and groups here\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.MapOrganizingEndpoints();\napp.Run();\n```", "```cs\nnamespace Minimal.API;\npublic static class OrganizingEndpoints\n{\n    public static IEndpointRouteBuilder MapOrganizingEndpointsFluently(\n        this IEndpointRouteBuilder app)\n    {\n        var group = app\n            .MapGroup(\"organizing-endpoints-fluently\")\n            .WithTags(\"Organizing Fluent Endpoints\")\n        ;\n        // Map endpoints and groups here\n        return app;\n    }\n}\n```", "```cs\napp\n    .MapOrganizingEndpointsFluently()\n    .MapOrganizingEndpoints()\n;\n```", "```cs\nnamespace Minimal.API;\npublic static class OrganizingEndpoints\n{\n    public static RouteGroupBuilder MapOrganizingEndpointsComposable(\n        this IEndpointRouteBuilder app)\n    {\n        var group = app\n            .MapGroup(\"organizing-endpoints-composable\")\n            .WithTags(\"Organizing Composable Endpoints\")\n        ;\n        // Map endpoints and groups here\n        return group;\n    }\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n    <ItemGroup>\n        <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n    </ItemGroup>\n</Project>\n```", "```cs\nnamespace Shared.Models;\npublic record class Customer(\n    int Id,\n    string Name,\n    List<Contract> Contracts\n);\npublic record class Contract(\n    int Id,\n    string Name,\n    string Description,\n    WorkStatus Status,\n    ContactInformation PrimaryContact\n);\npublic record class WorkStatus(int TotalWork, int WorkDone)\n{\n    public WorkState State =>\n        WorkDone == 0 ? WorkState.New :\n        WorkDone == TotalWork ? WorkState.Completed :\n        WorkState.InProgress;\n}\npublic record class ContactInformation(\n    string FirstName,\n    string LastName,\n    string Email\n);\npublic enum WorkState\n{\n    New,\n    InProgress,\n    Completed\n}\n```", "```cs\nusing Shared.Models;\nnamespace Shared.Data;\npublic interface ICustomerRepository\n{\n    Task<IEnumerable<Customer>> AllAsync(\n        CancellationToken cancellationToken);\n    Task<Customer> CreateAsync(\n        Customer customer, \n        CancellationToken cancellationToken);\n    Task<Customer?> DeleteAsync(\n        int customerId, \n        CancellationToken cancellationToken);\n    Task<Customer?> FindAsync(\n        int customerId, \n        CancellationToken cancellationToken);\n    Task<Customer?> UpdateAsync(\n        Customer customer, \n        CancellationToken cancellationToken);\n}\n```", "```cs\n// PUT raw/customers/1\ngroup.MapPut(\"/{customerId}\", async (int customerId, Customer input, ICustomerRepository customerRepository, CancellationToken cancellationToken) =>\n{\n    var updatedCustomer = await customerRepository.UpdateAsync(\n        input, \n        cancellationToken\n    );\n    if (updatedCustomer == null)\n    {\n        return Results.NotFound();\n    }\n    return Results.Ok(updatedCustomer);\n});\n```", "```cs\nPUT {{Minimal.API.BaseAddress}}/customers/1\nContent-Type: application/json\n{\n  \"id\": 1,\n  \"name\": \"Some new name\",\n  \"contracts\": []\n}\n```", "```cs\n{\n  \"id\": 1,\n  \"name\": \"Some new name\",\n  \"contracts\": []\n}\n```", "```cs\n{\n  \"id\": 1,\n  \"name\": \"Jonny Boy Inc.\",\n  \"contracts\": [\n    {\n      \"id\": 1,\n      \"name\": \"First contract\",\n      \"description\": \"This is the first contract.\",\n      \"status\": {\n        \"totalWork\": 100,\n        \"workDone\": 100,\n        \"state\": \"Completed\"\n      },\n      \"primaryContact\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@jonnyboy.com\"\n      }\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Some other contract\",\n      \"description\": \"This is another contract.\",\n      \"status\": {\n        \"totalWork\": 100,\n        \"workDone\": 25,\n        \"state\": \"InProgress\"\n      },\n      \"primaryContact\": {\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Doe\",\n        \"email\": \"jane.doe@jonnyboy.com\"\n      }\n    }\n  ]\n}\n```", "```cs\nvar group = routes\n    .MapGroup(\"/dto/customers\")\n    .WithTags(\"Customer DTO\")\n    .WithOpenApi()\n;\ngroup.MapGet(\"/\", GetCustomersSummaryAsync)\n    .WithName(\"GetAllCustomersSummary\");\ngroup.MapGet(\"/{customerId}\", GetCustomerDetailsAsync)\n    .WithName(\"GetCustomerDetailsById\");\ngroup.MapPut(\"/{customerId}\", UpdateCustomerAsync)\n    .WithName(\"UpdateCustomerWithDto\");\ngroup.MapPost(\"/\", CreateCustomerAsync)\n    .WithName(\"CreateCustomerWithDto\");\ngroup.MapDelete(\"/{customerId}\", DeleteCustomerAsync)\n    .WithName(\"DeleteCustomerWithDto\");\n```", "```cs\nnamespace Shared.DTO;\npublic record class ContractDetails(\n    int Id,\n    string Name,\n    string Description,\n    int StatusTotalWork,\n    int StatusWorkDone,\n    string StatusWorkState,\n    string PrimaryContactFirstName,\n    string PrimaryContactLastName,\n    string PrimaryContactEmail\n);\npublic record class CustomerDetails(\n    int Id,\n    string Name,\n    IEnumerable<ContractDetails> Contracts\n);\npublic record class CustomerSummary(\n    int Id,\n    string Name,\n    int TotalNumberOfContracts,\n    int NumberOfOpenContracts\n);\npublic record class CreateCustomer(string Name);\npublic record class UpdateCustomer(string Name);\n```", "```cs\n// PUT dto/customers/1\nprivate static async Task<Results<\n    Ok<CustomerDetails>,\n    NotFound,\n    Conflict\n>> UpdateCustomerAsync(\n        int customerId,\n        UpdateCustomer input,\n        ICustomerRepository customerRepository,\n        CancellationToken cancellationToken)\n{\n    // Get the customer\n    var customer = await customerRepository.FindAsync(\n        customerId,\n        cancellationToken\n    );\n    if (customer == null)\n    {\n        return TypedResults.NotFound();\n    }\n    // Update the customer's name using the UpdateCustomer DTO\n    var updatedCustomer = await customerRepository.UpdateAsync(\n        customer with { Name = input.Name },\n        cancellationToken\n    );\n    if (updatedCustomer == null)\n    {\n        return TypedResults.Conflict();\n    }\n    // Map the updated customer to a CustomerDetails DTO\n    var dto = MapCustomerToCustomerDetails(updatedCustomer);\n    // Return the DTO\n    return TypedResults.Ok(dto);\n}\n```", "```cs\n{\n  \"id\": 1,\n  \"name\": \"Some new name\",\n  \"contracts\": [\n    {\n      \"id\": 1,\n      \"name\": \"First contract\",\n      \"description\": \"This is the first contract.\",\n      \"statusTotalWork\": 100,\n      \"statusWorkDone\": 100,\n      \"statusWorkState\": \"Completed\",\n      \"primaryContactFirstName\": \"John\",\n      \"primaryContactLastName\": \"Doe\",\n      \"primaryContactEmail\": \"john.doe@jonnyboy.com\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Some other contract\",\n      \"description\": \"This is another contract.\",\n      \"statusTotalWork\": 100,\n      \"statusWorkDone\": 25,\n      \"statusWorkState\": \"InProgress\",\n      \"primaryContactFirstName\": \"Jane\",\n      \"primaryContactLastName\": \"Doe\",\n      \"primaryContactEmail\": \"jane.doe@jonnyboy.com\"\n    }\n  ]\n}\n```", "```cs\n// GET: dto/customers\nprivate static async Task<Ok<IEnumerable<CustomerSummary>>> GetCustomersSummaryAsync(\n    ICustomerRepository customerRepository,\n    CancellationToken cancellationToken)\n{\n    // Get all customers\n    var customers = await customerRepository\n        .AllAsync(cancellationToken);\n    // Map customers to CustomerSummary DTOs\n    var customersSummary = customers.Select(customer => new CustomerSummary(\n        Id: customer.Id,\n        Name: customer.Name,\n        TotalNumberOfContracts: customer.Contracts.Count,\n        NumberOfOpenContracts: customer.Contracts\n            .Count(x => x.Status.State != WorkState.Completed)\n    ));\n    // Return the DTOs\n    return TypedResults.Ok(customersSummary);\n}\n```", "```cs\n[\n  {\n    \"id\": 1,\n    \"name\": \"Some new name\",\n    \"totalNumberOfContracts\": 2,\n    \"numberOfOpenContracts\": 1\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Some mega-corporation\",\n    \"totalNumberOfContracts\": 1,\n    \"numberOfOpenContracts\": 1\n  }\n]\n```"]