["```cs\n    <Movie>\n      <ID>1</ID>\n      <Title>Jurassic Park</Title>\n      <OscarNominations>3</OscarNominations>\n      <OscarWins>3</OscarWins>\n    </Movie> \n```", "```cs\n    public class Movie\n    {\n      public string ID { get; set; }\n      public string Title { get; set; }\n      public string OscarNominations { get; set; }\n      public string OscarWins { get; set; }\n    } \n```", "```cs\n    class Program\n    {\n      static string url = @\"Data\";\n      static XDocument films = XDocument.Load(url + \"MoviesDB.xml\");\n      static List<Movie> movies = new List<Movie>();\n      static void Main(string[] args)\n      {\n        var movieCollection =\n            (from f in films.Descendants(\"Movie\")\n        select new Movie\n        {\n          ID = f.Element(\"Title\").Value,\n          Title = f.Element(\"Title\").Value,\n          OscarNominations = f.Element(\"OscarNominations\").Value,\n             OscarWins = f.Element(\"OscarWins\").Value\n        }).ToList();\n        Console.WriteLine(\"Movie Titles\");\n        Console.WriteLine(\"------------\");\n        foreach (var movie in movieCollection.Take(10))\n        Console.WriteLine(movie.Title);\n        Console.ReadLine();\n      }\n    } \n```", "```cs\n    public class XMLMovieReader\n    {\n      static string url = @\"Data\";\n      static XDocument films = XDocument.Load(url + \"MoviesDB.xml\");\n      static List<Movie> movies = new List<Movie>();\n      public List<Movie> ReadMovies()\n      {\n        var movieCollection =\n           (from f in films.Descendants(\"Movie\")\n        select new Movie\n        {\n          ID = f.Element(\"Title\").Value,\n          Title = f.Element(\"Title\").Value,\n          OscarNominations = f.Element(\"OscarNominations\").Value,\n          OscarWins = f.Element(\"OscarWins\").Value\n        }).ToList();\n        return movieCollection;\n      }\n    } \n```", "```cs\n    static void Main(string[] args)\n    {\n      XMLMovieReader mr = new XMLMovieReader();\n      var movieCollection = mr.ReadMovies();\n      Console.WriteLine(\"Movie Titles\");\n      Console.WriteLine(\"------------\");\n      foreach (var movie in movieCollection.Take(10))\n      Console.WriteLine(movie.Title);\n      Console.ReadLine();\n    }\n```", "```cs\n    public class JSONMovieReader\n    {\n      static string file = @\"Data\\MoviesDB.json\";\n      static List<Movie> movies = new List<Movie>();\n      static string cadMovies;\n      public List<Movie> ReadMovies(string file)\n      {\n        var moviesText = File.ReadAllText(file);\n        return JsonConvert.DeserializeObject<List<Movie>>(moviesText);\n      }\n    } \n```", "```cs\n    interface IMovieReader\n    {\n      List<Movie> ReadMovies();\n    } \n```", "```cs\n    public class XMLMovieReader : IMovieReader\n    ...\n    public class JSONMovieReader : IMovieReader\n    ... \n```", "```cs\n    public class ReaderFactory\n    {\n      public IMovieReader _IMovieReader { get; set; }\n      public ReaderFactory(string fileType)\n      {\n        switch (fileType)\n        {\n          case \"XML\":\n          _IMovieReader = new XMLMovieReader();\n          break;\n          case \"JSON\":\n          _IMovieReader = new JSONMovieReader();\n          break;\n          default:\n          break;\n        }\n      }\n    }  \n```", "```cs\n    class Program3\n    {\n     static IMovieReader _IMovieReader;\n     static void Main(string[] args)\n      {\n       Console.SetWindowSize(60, 15);\n       Console.WriteLine(\"Please, select the file type to read (1)\n         XML, (2) JSON: \");\n       var ans = Console.ReadLine();\n       var fileType = (ans == \"1\") ? \"XML\" : \"JSON\";\n       _IMovieReader = new ReaderFactory(fileType)._IMovieReader;\n       var typeSelected = _IMovieReader.GetType().Name;\n       var movieCollection = _IMovieReader.ReadMovies();\n       Console.WriteLine($\"Movie Titles ({typeSelected})\");\n       Console.WriteLine(\"------------\");\n       foreach (var movie in movieCollection.Take(10))\n       Console.WriteLine(movie.Title);\n       Console.ReadLine();\n      }\n    }\n```", "```cs\n    public class ConsoleDisplayFactory\n    {\n     // Both properties asume a default (initial) configuration\n     public ConsoleColor ForeColor { get; set; } = ConsoleColor.White;\n     public ConsoleColor BackColor { get; set; } = ConsoleColor.Black;\n     public ConsoleDisplayFactory ConfigureConsole (string theme)\n     {\n       switch (theme)\n       {\n         case \"light\":\n         BackColor = ConsoleColor.Yellow;\n         ForeColor = ConsoleColor.DarkBlue;\n         break;\n         case \"dark\":\n         BackColor = ConsoleColor.DarkBlue;\n         ForeColor = ConsoleColor.Yellow;\n         break;\n         default:\n         break;\n       }\n       return this;\n     }\n    }\n```", "```cs\n    class Program4\n    {\n      static ConsoleDisplayFactory cdf = new ConsoleDisplayFactory();\n      static void Main(string[] args)\n      {\n        // Initial config\n        cdf.ConfigureConsole(\"default\");\n        Console.BackgroundColor = cdf.BackColor;\n        Console.ForegroundColor = cdf.ForeColor;\n        Console.WriteLine(\"Console Information\");\n        Console.WriteLine(\"-------------------\");\n        Console.WriteLine(\"Initial configuration: \\n\");\n        Console.WriteLine($\"Back Color: { cdf.BackColor}\");\n        Console.WriteLine($\"Fore Color: { cdf.ForeColor }\");\n        // User's config\n        Console.WriteLine(\"New theme ('light', 'dark',\n            'Enter'=>default):\");\n        var newTheme = Console.ReadLine();\n        cdf.ConfigureConsole(newTheme);\n        Console.BackgroundColor = cdf.BackColor;\n        Console.ForegroundColor = cdf.ForeColor;\n        Console.WriteLine(\"New configuration: \\n\");\n        Console.WriteLine($\"Back Color: { cdf.BackColor}\");\n        Console.WriteLine($\"Fore Color: { cdf.ForeColor }\");\n        Console.ReadLine();\n      }      \n    }\n```", "```cs\n    private void btnClose_Click(object sender, EventArgs e)\n    {\n      this.Close();\n    } \n```", "```cs\n    this.btnClose.Click += new System.EventHandler(this.btnClose_Click);\n```", "```cs\n    public class FormClosingEventArgs : CancelEventArgs\n    {\n     //\n     // Summary:\n     // Initializes a new instance of the \n            System.Windows.Forms.FormClosingEventArgs class.\n     //\n     // Parameters:\n     // closeReason:\n     // A System.Windows.Forms.CloseReason value that represents \n         the reason why the form\n     // is being closed.\n     //\n     // cancel:\n     // true to cancel the event; otherwise, false.\n     public FormClosingEventArgs(CloseReason closeReason, bool cancel);\n\n     //\n     // Summary:\n     // Gets a value that indicates why the form is being closed.\n     //\n     // Returns:\n     // One of the System.Windows.Forms.CloseReason enumerated values.\n     public CloseReason CloseReason { get; }\n   }  \n```", "```cs\n    private void frmMethodInjection_FormClosing(object sender,\n       FormClosingEventArgs e)\n    {\n      if(e.CloseReason == CloseReason.UserClosing)\n      {\n        var res = MessageBox.Show(\"Confirm application exit?\", \"Notice\",\n        MessageBoxButtons.YesNo, MessageBoxIcon.Question);\n        if (res == DialogResult.Yes)\n        FormClosingExtended?.Invoke(this, DateTime.Now.ToLongTimeString());\n        else e.Cancel = true;\n      }\n    }\n    public event EventHandler<string> FormClosingExtended; \n```", "```cs\n    private void FrmMethodInjection_FormClosingExtended(object\n       sender, string e)\n    {\n      var ans = MessageBox.Show($\"Save Closing time: ({e})?\",\"Notice\",\n      MessageBoxButtons.YesNo,MessageBoxIcon.Question);\n      if (ans == DialogResult.Yes)\n      {\n         File.WriteAllText(\"ClosingTime.txt\", e);\n      }  \n    } \n```", "```cs\n    public frmMethodInjection()\n    {\n      InitializeComponent();\n      this.FormClosing += frmMethodInjection_FormClosing;\n      FormClosingExtended += FrmMethodInjection_FormClosingExtended;\n    }\n```", "```cs\n     // Data Access Layer\n     public interface IBookReader\n     {\n       void ReadBooks();\n     }\n     public class XMLBookReader : IBookReader\n     {\n       public void ReadBooks()\n       {\n         Console.WriteLine(\"Books read in XML Format\");\n       }\n     }\n     public class JSONBookReader : IBookReader\n     {\n       public void ReadBooks()\n       {\n         Console.WriteLine(\"Books read in JSON Format\");\n       }\n     }\n```", "```cs\n    public class BookManager\n    {\n      public IBookReader bookReader;\n      public BookManager(IBookReader reader)\n      {\n        bookReader = reader;\n      }\n      public void ReadBooks()\n      {\n        bookReader.ReadBooks();\n      }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      UnityContainer uc = new UnityContainer();\n      BookManager bm;\n      Console.WriteLine(\"Please, select reading type (XML, JSON)\");\n      var ans = Console.ReadLine();\n      if (ans.ToLower() == \"xml\")\n      {\n         bm = new BookManager(new XMLBookReader());\n      }\n      else { bm = new BookManager(new JSONBookReader()); }\n        bm.ReadBooks();\n      Console.ReadLine();\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      UnityContainer uc = new UnityContainer();\n      uc.RegisterType<BookManager>();\n      uc.RegisterType<IBookReader, XMLBookReader>();\n      uc.RegisterType<IBookReader, JSONBookReader>();\n      BookManager bm = uc.Resolve<BookManager>();\n      bm.ReadBooks();\n      Console.ReadLine();\n   }\n```", "```cs\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Please, select reading type (XML, JSON)\");\n      // we asume a predefault value\n      var format = (Console.ReadLine() != \"xml\") ? \"json\" : \"xml\";\n      UnityContainer uc = new UnityContainer();\n      uc.RegisterType<IBookReader, XMLBookReader>(\"xml\");\n      uc.RegisterType<IBookReader, JSONBookReader>(\"json\");\n      IBookReader ibr = uc.Resolve<IBookReader>(format);\n      ibr.ReadBooks();\n      Console.ReadLine();\n    }\n```", "```cs\n    public class UnityRegistration\n    {\n      public void Register()\n      {\n        using (var container = new UnityContainer())\n        {\n          container.RegisterTypes(\n          AllClasses.FromLoadedAssemblies(),\n          WithMappings.FromAllInterfaces,\n          WithName.Default,\n          WithLifetime.ContainerControlled);\n        }\n      }\n    }\n```", "```cs\n    using Castle.Windsor;\n    using Castle.MicroKernel.Registration; \n```", "```cs\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Please, select reading type (XML, JSON)\");\n      // we asume a predefault value\n      var format = (Console.ReadLine() != \"xml\") ? \"json\" : \"xml\";\n      var container = new WindsorContainer();\n      container.Register(Component.For<IBookReader>().\n         ImplementedBy<XMLBookReader>().Named(\"xml\"));\n      container.Register(Component.For<IBookReader>().\n           ImplementedBy<JSONBookReader>().Named(\"json\"));\n      IBookReader ibr = container.Resolve<IBookReader>(format);\n      ibr.ReadBooks();\n      Console.ReadLine();\n      // clean up, application exits\n      container.Dispose();\n    }\n```", "```cs\n    var container1 = new Container(c =>\n    {\n      c.For<IFoo>().Use<Foo>();\n      c.For<IBar>().Use<Bar>();\n    });\n```", "```cs\n    public class FooBarRegistry : Registry\n    {\n      public FooBarRegistry()\n      {\n        For<IFoo>().Use<Foo>();\n        For<IBar>().Use<Bar>();\n      }\n    }\n    var container1 = new Container(new FooBarRegistry()); \n```", "```cs\n     using StructureMap;\n```", "```cs\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Please, select reading type (XML, JSON)\");\n      // we asume a predefault value\n      var format = (Console.ReadLine() != \"xml\") ? \"json\" : \"xml\";\n      var container = new Container();\n\n      // container configuration\n      container = new Container(x => {\n      x.For<IBookReader>().Add<XMLBookReader>().Named(\"xml\");\n      x.For<IBookReader>().Add<JSONBookReader>().Named(\"json\");\n    });\n      var ibr = container.GetInstance<IBookReader>(format);\n      ibr.ReadBooks();\n      Console.ReadLine();\n      // clean up, application exits\n      container.Dispose();\n    }\n```", "```cs\ncontainer à For <Interface> à Add(Class) à Named(\"alias\")\n```", "```cs\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Please, select reading type\n         (XML, JSON)\");\n      // we asume a predefault value\n      var builder = new ContainerBuilder();\n      if (Console.ReadLine() != \"json\")\n      {\n        builder.RegisterType<XMLBookReader>().As<IBookReader>();\n      }\n      else\n      {\n        builder.RegisterType<JSONBookReader>().As<IBookReader>();\n      }\n      var container = builder.Build();\n      var ibr = container.Resolve<IBookReader>();\n      ibr.ReadBooks();\n      Console.ReadLine();\n    }\n```", "```cs\n    <!DOCTYPE html>\n    <html>\n    <head>\n     <meta charset=\"utf-8\" />\n     <title>Dependency Injection Demo</title>\n     <script src=\"img/angular.js\"></script>\n    </head>\n    <body ng-app=\"app\">\n     <h1>Dependency Injection Demo</h1>\n     <h3>Current time: {{ time }}</h3>\n     <script>\n       var app = angular.module(\"app\", []);\n     </script>\n    </body>\n    </html>\n```", "```cs\n    <h3 ng-controller=\"TimeController\">Current time: \n       {{ time }}</h3>\n```", "```cs\n    <body ng-app=\"app\">\n    <h1>Demo Dependency Injection</h1>\n    <h3 ng-controller=\"TimeController\">Current time: \n       {{ time }}</h3>\n    <script>\n      var app = angular.module(\"app\", []);\n      app.controller(\"TimeController\", function ($scope) {\n      $scope.time = new Date().toLocaleTimeString();\n     });\n    </script>\n    </body>\n```"]