- en: Testing RESTful Web Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试RESTful Web服务
- en: A system cannot mature until it is tested in various scenarios. These scenarios
    are usually based on the experience of domain experts or existing production environments.
    There is always a chance that a system can crash in a production environment,
    even when the system is called a perfect system. For web applications, the conditions
    are even more critical due to performance glitches, bad user experience, and so
    on. A system should be put through a process or series of development principles
    to tackle these kinds of issues. Simply put, we must test the system. Testing
    is a process that ensures the quality of a system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个系统在经过各种场景的测试之前无法成熟。这些场景通常基于领域专家的经验或现有的生产环境。即使在系统被称为完美系统的情况下，系统在生产环境中崩溃的可能性总是存在的。对于Web应用程序，由于性能问题、糟糕的用户体验等原因，条件更为关键。系统应该通过一系列开发原则的过程来应对这些问题。简单来说，我们必须测试系统。测试是一个确保系统质量的过程。
- en: In other words, quality assurance, or testing, is a way to assess a system from
    different aspects. This process is also useful when a system requires testing
    to identify erroneous code, or if we want to assess its business compliance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，质量保证或测试是从不同方面评估系统的一种方式。当系统需要测试以识别错误代码，或者我们想要评估其业务合规性时，这个过程也非常有用。
- en: Quality assurance is a process that assesses a system and ensures its quality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 质量保证是一个评估系统并确保其质量的过程。
- en: Testing is entirely dependent on the architectural style of the system and it
    varies from system to system; everything depends on how we strategize our testing
    approach or plan.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完全依赖于系统的架构风格，并且因系统而异；一切取决于我们如何策略性地规划测试方法或计划。
- en: In this chapter, we will mainly focus on testing RESTful services and making
    our code better by following the test-driven development approach. At the end
    of this chapter, you will be able to use the testing paradigm in day-to-day development
    activities with knowledge of stubs, mocks an understanding of integration and
    security, and performance testing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要关注测试RESTful服务，并通过遵循测试驱动开发方法来使我们的代码更佳。在本章结束时，你将能够使用测试范式在日常开发活动中进行测试，了解存根、模拟以及了解集成和安全性和性能测试。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Test paradigms (the basics of quality assurance, including test case creation)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试范式（包括测试用例创建在内的质量保证基础）
- en: Testing the ASP.NET core controller (unit testing)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试ASP.NET核心控制器（单元测试）
- en: Stubs and mocking
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存根和模拟
- en: Security testing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全测试
- en: Integration testing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: Fake objects
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟对象
- en: Testing service calls using Postman, Advanced RESTClient, and so on
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Postman、Advanced RESTClient等工具进行服务调用测试
- en: User acceptance testing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户验收测试
- en: Performance or load testing
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能或负载测试
- en: Test paradigms
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试范式
- en: In the previous section, we saw that testing and quality assurance is one of
    the most important parts of the software development cycle. We should take steps
    to design a framework that tests the software, which is called a **test paradigm**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们了解到测试和质量保证是软件开发周期中最重要的部分之一。我们应该采取措施设计一个测试软件的框架，这被称为**测试范式**。
- en: A test paradigm is a framework of testing. It is based on the way one plans
    on implementing testing. In short, a test paradigm is a testing methodology.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 测试范式是一种测试框架。它基于一个人计划实施测试的方式。简而言之，测试范式是一种测试方法。
- en: A test method is where you decide how to create test cases, including what its
    language will be, how you will document the test cases, and so on. This also tells
    you how you are going to execute the test methods (for example, with black box
    testing).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法是你决定如何创建测试用例的地方，包括它的语言将是什么，你将如何记录测试用例，等等。这也告诉你你将如何执行测试方法（例如，使用黑盒测试）。
- en: A test method is an approach that tests or verifies the specific output on the
    basis of specific inputs, without knowing the internal functionality of a system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法是一种基于特定输入测试或验证特定输出的方法，而不了解系统的内部功能。
- en: Before we create test cases or develop a test paradigm or framework for testing,
    we need to get to grips with some important terminology.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建测试用例或开发测试范式或测试框架之前，我们需要掌握一些重要的术语。
- en: Test coverage and code coverage
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试覆盖率和代码覆盖率
- en: In general terms, coverage is what is covered and how you measure that coverage.
    From a developer's point of view, writing a unit test in test-driven development
    tells us how and what area of code is covered.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上讲，覆盖率是指覆盖的内容以及如何衡量这种覆盖率。从开发者的角度来看，在测试驱动开发中编写单元测试告诉我们如何以及覆盖了代码的哪个区域。
- en: A measurement of code executed during testing is code coverage.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 测试期间执行的代码测量称为代码覆盖率。
- en: A measurement of test cases executed during testing is test coverage.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 测试期间执行的测试用例的测量称为测试覆盖率。
- en: The code is unit tested and it is proven that covered code is tested. In this
    code coverage, there would be many things that have been covered, namely, lines
    of code, functions, conditions, expressions, API resources, and so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 代码经过单元测试，并已证明被覆盖的代码已通过测试。在这个代码覆盖率中，会有许多被覆盖的内容，包括代码行、函数、条件、表达式、API资源等。
- en: For software testing terms, refer to [http://castb.org/wp-content/uploads/2014/05/istqb_glossary_of_testing_terms_v2.3.pdf](http://castb.org/wp-content/uploads/2014/05/istqb_glossary_of_testing_terms_v2.3.pdf).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件测试术语，请参阅[http://castb.org/wp-content/uploads/2014/05/istqb_glossary_of_testing_terms_v2.3.pdf](http://castb.org/wp-content/uploads/2014/05/istqb_glossary_of_testing_terms_v2.3.pdf)。
- en: 'Test coverage and code coverage can also cover any of the following testing
    types:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 测试覆盖率和代码覆盖率也可以涵盖以下任何测试类型：
- en: Unit testing
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Security testing
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全测试
- en: Integration testing
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: In the upcoming sections, we will look at these tests in detail using code examples.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将通过代码示例详细查看这些测试。
- en: Tasks, scenarios, and use cases
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务、场景和用例
- en: 'When someone is working with a test paradigm, they should know the terms task,
    scenario, and use case. In this section, we will discuss these terms in detail:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当某人使用测试范式工作时，他们应该了解任务、场景和用例等术语。在本节中，我们将详细讨论这些术语：
- en: '**Task**: A task is a generic word not only relevant to the software industry
    but to many others, too. This is an act or piece of work that needs to be completed.
    There will be different ways to complete the task, but the overall intention with
    a task is that it should be completed. In different areas, tasks have different
    purposes. In scrum development ([https://whatis.techtarget.com/definition/storyboard](https://whatis.techtarget.com/definition/storyboard)),
    a storyboard or task board helps developers understand the work that needs to
    be completed.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：任务是一个通用词汇，不仅与软件行业相关，还与许多其他行业相关。这是一项需要完成的行动或工作。完成任务会有不同的方法，但任务的整体意图是应该完成。在不同的领域，任务有不同的目的。在敏捷开发中（[https://whatis.techtarget.com/definition/storyboard](https://whatis.techtarget.com/definition/storyboard)），故事板或任务板帮助开发者理解需要完成的工作。'
- en: 'The following diagram illustrates what we mean by a task:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了我们所说的任务：
- en: '![](img/0fc656b2-600e-46d8-91ce-87c5ca35cf67.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图表](img/0fc656b2-600e-46d8-91ce-87c5ca35cf67.png)'
- en: The preceding diagram is that of a story or task board; it displays the various
    tasks needed to finish a book, from data collection to the technical review. There
    are a lot of free or paid tools available on the market to manage these types
    of tasks.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表是故事板或任务板的示例；它显示了完成一本书所需的各种任务，从数据收集到技术审查。市场上有很多免费或付费的工具可用于管理这些类型的任务。
- en: '**Scenario**: Typically, a scenario is nothing but a situation where a system
    has failed after interaction with a customer. In other words, a scenario is a
    way of understanding and writing steps in detail. For example, there are a few
    situations that can cause a system''s login functionality to fail, and these will
    be documented as a scenario. In software testing, scenarios are also known as
    test scenarios. A scenario usually leads to one or more tests.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景**：通常，场景只是系统在与客户交互后失败的情况。换句话说，场景是一种详细理解和编写步骤的方式。例如，有几种情况可能导致系统登录功能失败，这些情况将被记录为场景。在软件测试中，场景也称为测试场景。一个场景通常会导致一个或多个测试。'
- en: '**Use case**: A use case is a set of possible sequences of interactions between
    a system and a user. It can also be a collection of possible scenarios that should
    be assessed when a system is implemented. These use cases are more detailed and
    documented, and are divided into various steps, as shown in the following flowchart:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：用例是一组系统与用户之间可能交互的序列集合。它也可以是一组在系统实施时应评估的可能场景集合。这些用例更加详细和文档化，并分为多个步骤，如下面的流程图所示：'
- en: '![](img/b2948f3e-a32d-4cd8-9be3-b9fdefae3de7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图表](img/b2948f3e-a32d-4cd8-9be3-b9fdefae3de7.png)'
- en: In the preceding diagram, it is clear that **TEST CASE** is the sub-set of **TEST
    SCENARIOS**, and that **USE CASE** is the superset of **TEST SCENARIOS**. Whenever
    you create a test case, it comes down from a test scenario.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，很明显，“**测试用例**”是“**测试场景**”的子集，而“**用例**”是“**测试场景**”的超集。每次创建测试用例时，它都是从测试场景中下来的。
- en: Checklist
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清单
- en: In general, a checklist is nothing but a list of items, where an action is required
    in order to achieve a goal. A checklist could be a to-do list, a list of your
    day-to-day activities, or a list of a developer's tasks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，清单不过是一系列需要采取行动以实现目标的项目列表。清单可以是待办事项列表，日常活动列表，或开发者的任务列表。
- en: In the world of testing, a list could contain test cases to verify, a list of
    tests that need to be executed, and so on. A checklist varies from person to person,
    developer to developer, or even from organization to organization, but the purpose
    of a checklist is always to limit the very human behavior of forgetting something.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试的世界里，列表可能包含要验证的测试用例，需要执行的测试列表等。清单因人而异，从开发者到开发者，甚至从组织到组织，但清单的目的是始终限制人类忘记某些事情的行为。
- en: Bugs and defects
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺陷和错误
- en: The terms bug and defect are the some of the most frequently used terms in the
    industry. In some organizations, these terms are used interchangeably. In general,
    however, a bug is related to something that is done correctly but executes an
    unexpected output, for example, 2 + 3 = 6\. On the other hand, a defect is something
    that has been missed during planning.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 缺陷和错误是行业中用得最多的术语之一。在一些组织中，这些术语可以互换使用。然而，一般来说，缺陷是指执行正确但产生意外输出的东西，例如，2 + 3 = 6。另一方面，缺陷是指在规划过程中被遗漏的东西。
- en: 'Some things to note about bugs and defects:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关于缺陷和错误的一些注意事项：
- en: A bug is almost always due to the impure implementation of a requirement, for
    example, code that incorrectly fulfills a basic requirement
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷几乎总是由于需求的纯实现不当，例如，错误地满足基本需求的代码
- en: Bugs are normally identified during development or in the testing phase
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷通常在开发阶段或测试阶段被识别
- en: A defect is related to a design or requirements gap that has slipped past a
    client or customer during production
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷与设计或需求差距有关，这种差距在生产过程中被客户或客户遗漏。
- en: A defect often indicates human error
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷通常表明人为错误
- en: Bugs can be fixed when caught during testing
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试过程中发现缺陷时可以修复
- en: Defects can lead to a faulty system, which can lead to design issues
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷可能导致系统出现故障，进而导致设计问题
- en: Testing approach
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试方法
- en: In general, a testing approach is an execution path illustrating how testing
    will be carried out. These approaches vary system to system; if one system requires
    a consultative approach, it does not mean that another system does. Different
    systems need different testing approaches.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，测试方法是一个执行路径，说明了测试将如何进行。这些方法因系统而异；如果一个系统需要咨询方法，并不意味着另一个系统也是如此。不同的系统需要不同的测试方法。
- en: A testing approach is a test strategy that is nothing but an implementation
    of a system or project.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法是一种测试策略，它只是系统或项目的实现。
- en: Testing strategies should be clear to everyone so that the created tests can
    help non-technical members of the team (such as stakeholders) understand how the
    system is working. Such tests can be automated, such as testing the business flow,
    or they can be manual tests that can be performed by a user working on the User
    Acceptance Testing system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 测试策略应该对每个人都很清晰，以便创建的测试可以帮助非技术团队成员（如利益相关者）了解系统是如何工作的。这些测试可以是自动化的，例如测试业务流程，也可以是用户验收测试系统上的用户可以执行的手动测试。
- en: 'Testing strategies or approaches have the following techniques:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 测试策略或方法有以下技术：
- en: '**Proactive**: This is a kind of early approach and tries to fix defects before
    the build is created from initial test designs'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动式**：这是一种早期方法，试图在从初始测试设计中创建构建之前修复缺陷'
- en: '**Reactive**: In this approach, testing is started once coding is complete'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反应式**：在这种方法中，一旦编码完成就开始测试'
- en: Test pyramid
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试金字塔
- en: The testing pyramid is a strategy or a way of defining what you should test
    in RESTful services. In other words, we can say a test pyramid helps us to define
    the testing scope of RESTful services.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 测试金字塔是一种策略或定义在RESTful服务中应该测试什么的途径。换句话说，我们可以这样说，测试金字塔帮助我们定义RESTful服务的测试范围。
- en: The concept of the testing pyramid was developed by Mike Cohn ([http://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid](http://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid))
    in 2009.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 测试金字塔的概念是由 Mike Cohn 在 2009 年开发的 ([http://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid](http://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid))。
- en: There are various flavors of the testing pyramid; different authors have described
    this by indicating how they placed or prioritized their testing scope.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 测试金字塔有各种版本；不同的作者通过说明他们如何放置或优先考虑他们的测试范围来描述这一点。
- en: 'The following diagram depicts the same concept as defined by Mike Cohn:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表示意了 Mike Cohn 定义的相同概念：
- en: '![](img/d1feb9ca-0354-4166-aa4d-0919ac8ed78c.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1feb9ca-0354-4166-aa4d-0919ac8ed78c.png)'
- en: Let's talk about these layers in detail.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论这些层。
- en: '**Unit tests**: These are tests that test small functionalities in units of
    an application of RESTful services developed in ASP.NET Core'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：这些是测试在 ASP.NET Core 中开发的 RESTful 服务应用的单元中的小功能性的测试'
- en: '**RESTful service tests (Acceptance tests)**: These are tests that test an
    independent service or a service that communicates with another, often external,
    service'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RESTful 服务测试（验收测试）**：这些是测试独立服务或与另一个服务（通常是外部服务）通信的服务的测试'
- en: '**GUI tests (REST Client Tests)**: These tests belong to the client or consumer
    who will consume RESTful services; they help in testing an entire system with
    an aspect of the user interface and are end-to-end tests'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GUI 测试（REST 客户端测试）**：这些测试属于将消费 RESTful 服务的客户端或消费者；它们有助于测试整个系统，并具有用户界面方面的特性，是端到端测试'
- en: We will be discussing testing in respect to an application of a RESTful service
    developed in ASP.NET Core.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论与在 ASP.NET Core 中开发的 RESTful 服务应用相关的测试。
- en: Types of tests
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试类型
- en: In the previous section, we discussed test approaches or testing strategies.
    These strategies decide how we will proceed with the testing of a system. In this
    section, we will discuss the various types of tests used in our application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了测试方法或测试策略。这些策略决定了我们将如何进行系统的测试。在本节中，我们将讨论我们应用中使用的各种测试类型。
- en: Testing the ASP.NET Core controller (unit testing)
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 ASP.NET Core 控制器（单元测试）
- en: Unit tests are tests that typically test a single function call to ensure that
    the smallest piece of the program is tested. So, these tests are meant to verify
    specific functionality without considering other components. Here, testing strategies
    come in handy and ensure that the best quality assurance of a system will be performed.
    It adds more power when it comes with the **test-driven development** (**TDD**)
    approach.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试通常是测试单个函数调用，以确保程序的最小部分得到测试。因此，这些测试旨在验证特定功能，而不考虑其他组件。在这里，测试策略派上用场，并确保系统将执行最佳的质量保证。当它与
    **测试驱动开发**（**TDD**）方法结合使用时，它增加了更多的力量。
- en: You can learn and practice TDD with the help of Katas at [https://github.com/garora/TDD-Katas](https://github.com/garora/TDD-Katas).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 [https://github.com/garora/TDD-Katas](https://github.com/garora/TDD-Katas)
    上的 Katas 学习和实践 TDD。
- en: 'We will discuss this with the help of a code example. Before we proceed further,
    please take a look at the following prerequisites:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将借助代码示例来讨论这一点。在继续之前，请查看以下先决条件：
- en: Visual Studio 2017 Update 3 or later
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017 更新 3 或更高版本
- en: .NET Core 2.0 or later
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core 2.0 或更高版本
- en: C# 7.0 or later
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 7.0 或更高版本
- en: ASP.NET Core 2.0 or later
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.0 或更高版本
- en: Entity Framework Core 2.0 or later
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Entity Framework Core 2.0 或更高版本
- en: xUnit and MS tests
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: xUnit 和 MS 测试
- en: The moq framework
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: moq 框架
- en: Getting ready for the tests
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备测试
- en: In this section, we will create an ASP.NET Core API and then unit test it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个 ASP.NET Core API 并对其进行单元测试。
- en: 'Complete the following steps to create your application:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下步骤以创建您的应用程序：
- en: Open Visual Studio.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio。
- en: 'Go to File | New | Project or press *Ctrl* + *Shift* + *F5*:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往文件 | 新建 | 项目或按 *Ctrl* + *Shift* + *F5*：
- en: '![](img/c8aa8911-2719-4598-8e60-d91b0d2ec725.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8aa8911-2719-4598-8e60-d91b0d2ec725.png)'
- en: Select ASP.NET Core Web Application.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 ASP.NET Core Web 应用程序。
- en: From the template window, select ASP.NET Core API—make sure you select .NET
    Core 2.0.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模板窗口中选择 ASP.NET Core API—确保您选择了 .NET Core 2.0。
- en: Name the project, choose the path for the solution, and click OK.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目命名，选择解决方案的路径，然后点击确定。
- en: Add the `Core` folder—in Solution Explore, right-click and select Add New Folder,
    and name it `Model`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `Core` 文件夹—在 Solution Explore 中，右键单击并选择添加新文件夹，并将其命名为 `Model`。
- en: Add the `Interfaces` and `Model` folders under the `Core` folder.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Core`文件夹下添加`Interfaces`和`Model`文件夹。
- en: Add a new class under the `Model` folder—right-click on the `Model` folder in
    Solution Explorer and select Add New Item. Then, select **Class** or click *Shift*
    + *Alt* + *C.*
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Model`文件夹下添加一个新类——在解决方案资源管理器中右键单击`Model`文件夹并选择“添加新项”。然后，选择**类**或点击*Shift*
    + *Alt* + *C*。
- en: Please note that the shortcut key varies as per your settings for Visual Studio.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，快捷键根据您对 Visual Studio 的设置而有所不同。
- en: 'Name it`Product.cs` and add the following code to this class:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`Product.cs`并将以下代码添加到此类中：
- en: '[PRE0]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Repeat *steps 7* and* 8* to add `Category.cs` and `ProductViewModel.cs`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 7*和*步骤 8*以添加`Category.cs`和`ProductViewModel.cs`。
- en: Repeat *step 6* and add the `Infrastructure` folder.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 6*并添加`Infrastructure`文件夹。
- en: Add a new class under the `Infrastructure` folder—right-click on the `Infrastructure`
    folder in Solution Explorer, select Add New Item, and in that, select Class or
    click *Shift* + *Alt* + *C.*
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Infrastructure`文件夹下添加一个新类——在解决方案资源管理器中右键单击`Infrastructure`文件夹，选择“添加新项”，然后选择类或点击*Shift*
    + *Alt* + *C*。
- en: Name it as `ProductContext.cs`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`ProductContext.cs`。
- en: In this demo project, we are not following the test-driven development approach;
    we will unit test our application just for demonstration purposes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示项目中，我们不是遵循测试驱动开发方法；我们将仅为了演示目的对应用程序进行单元测试。
- en: 'Now, open the `appsettings.json` file and add the following code snippet:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`appsettings.json`文件并添加以下代码片段：
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Right-click on Project in Solution Explorer and select Manage Nuget Package.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中右键单击项目，然后选择“管理 Nuget 包”。
- en: Under the Nuget Package Manager screen, search `Swashbuckle.AspNetCore` and
    install it.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Nuget 包管理器屏幕下，搜索`Swashbuckle.AspNetCore`并安装它。
- en: '**Swagger** is open source and adheres to open specifications ([https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)).
    Swagger allows you to describe an API''s structure. Swagger provides documentation
    to users (devs who are going to use APIs). There are a lot of open source and
    commercial tools available that can integrate with Swagger.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swagger**是开源的，遵循开放规范([https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md))。Swagger
    允许您描述 API 的结构。Swagger 为用户提供文档（将要使用 API 的开发者）。有许多开源和商业工具可以与 Swagger 集成。'
- en: '**Swagger CodeGen** ([https://swagger.io/swagger-codegen/](https://swagger.io/swagger-codegen/))
    helps to generate client libraries for an API.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swagger CodeGen**([https://swagger.io/swagger-codegen/](https://swagger.io/swagger-codegen/))有助于为
    API 生成客户端库。'
- en: '**Swagger UI** ([https://swagger.io/swagger-ui/](https://swagger.io/swagger-ui/))
    helps to generate an API''s documentation.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swagger UI**([https://swagger.io/swagger-ui/](https://swagger.io/swagger-ui/))有助于生成
    API 的文档。'
- en: '**Swashbuckle.AspNetCore** ([https://github.com/domaindrivendev/Swashbuckle.AspNetCore](https://github.com/domaindrivendev/Swashbuckle.AspNetCore))
    is a tool that helps document APIs built on ASP.NET Core.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swashbuckle.AspNetCore**([https://github.com/domaindrivendev/Swashbuckle.AspNetCore](https://github.com/domaindrivendev/Swashbuckle.AspNetCore))是一个帮助文档基于
    ASP.NET Core 的 API 的工具。'
- en: Add `interface IProductRepository` under `Core/Interfaces`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Core/Interfaces`下添加`interface IProductRepository`。
- en: 'Add the following code to the `IProductRepository` interface:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`IProductRepository`接口中：
- en: '[PRE2]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Please note that for the complete source code, refer to the GitHub repository
    at [https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core](https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于完整的源代码，请参阅 GitHub 仓库[https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core](https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core)。
- en: Add the `ProductRepository` class under the `Infrastructure` folder.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Infrastructure`文件夹下添加`ProductRepository`类。
- en: 'Add the following code to `ProductRepository`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将以下代码添加到`ProductRepository`:'
- en: '[PRE3]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the `Startup.cs` file and add the following code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Startup.cs`文件并添加以下代码：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Your project hierarchy should now look like the following screenshot of Solution
    Explorer:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目层次结构现在应该看起来像以下解决方案资源管理器截图：
- en: '![](img/e5070b6c-5e6f-4ccb-b42e-a388e9bdb319.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5070b6c-5e6f-4ccb-b42e-a388e9bdb319.png)'
- en: 'Now, you are ready to play with the application! Run the application from Menu
    or press *F5*. In a web browser, add the suffix `/swagger` to the URL in the address
    bar, as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好与应用程序互动了！从菜单运行应用程序或按*F5*。在网页浏览器中，将后缀`/swagger`添加到地址栏中的 URL，如下面的截图所示：
- en: '![](img/96471cff-b54d-45c4-a2f2-90ea4dadb59b.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/96471cff-b54d-45c4-a2f2-90ea4dadb59b.png)'
- en: 'This URL should show the swagger API documentation, as shown in the following
    screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此 URL 应显示 Swagger API 文档，如下所示截图：
- en: '![](img/74fc5f0e-76a7-4926-9bf0-83d9bf381747.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/74fc5f0e-76a7-4926-9bf0-83d9bf381747.png)'
- en: 'If you click on GET /api/Product/productlist, it should return a list of products,
    as shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击 GET /api/Product/productlist，它应该返回产品列表，如下所示截图：
- en: '![](img/0408d5e3-949b-49f2-9e3b-2c09732aaf6a.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/0408d5e3-949b-49f2-9e3b-2c09732aaf6a.png)'
- en: Writing unit tests
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: In this section, we will add a test project using ASP.NET Core 2.0 and write
    unit tests using xUnit. Before we start writing tests, we should set up a test
    project in our existing application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 ASP.NET Core 2.0 添加一个测试项目，并使用 xUnit 编写单元测试。在我们开始编写测试之前，我们应该在我们的现有应用程序中设置一个测试项目。
- en: 'The following are a few simple steps needed for our test project setup:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置我们的测试项目，以下是一些简单的步骤：
- en: 'From Solution Explorer in Visual Studio, right-click on Solution ''Chap06_01''
    (1 project) and click on Add | New Project... , as shown in the following screenshot:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 的解决方案资源管理器中，右键单击解决方案 'Chap06_01'（1个项目），然后单击“添加”|“新建项目...”，如下所示截图：
- en: '![](img/f253fcb9-d4a8-4094-a762-4a95b2126c47.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/f253fcb9-d4a8-4094-a762-4a95b2126c47.png)'
- en: 'From the Add New Project template, select .NET Core and xUnit Test Project
    (.NET Core) and provide a meaningful name, for example, `Chap06_01_Test`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“添加新项目”模板中选择 .NET Core 和 xUnit 测试项目 (.NET Core)，并提供一个有意义的名称，例如 `Chap06_01_Test`：
- en: '![](img/cb6caf7c-c5a4-4216-96f5-424f1be5f6eb.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/cb6caf7c-c5a4-4216-96f5-424f1be5f6eb.png)'
- en: 'Add folders named `Fake` and `Services`. (Refer to the previous section to
    see how to add a new folder from the solution explorer.) Your project structure
    should now look like the following screenshot:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为 `Fake` 和 `Services` 的文件夹。（参考前一个部分，了解如何从解决方案资源管理器中添加新文件夹。）现在，你的项目结构应该看起来像以下截图：
- en: '![](img/0f2450f7-127e-429e-b405-f9db08517906.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/0f2450f7-127e-429e-b405-f9db08517906.png)'
- en: 'The `ProductData.cs` class should look like the following:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ProductData.cs` 类应该看起来如下所示：'
- en: '[PRE5]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code snippet, we created fake data for `Products` and `ProductsViewModel`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们为 `Products` 和 `ProductsViewModel` 创建了假数据。
- en: The full code is available to download from [https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core](https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码可以从以下链接下载：[https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core](https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core)。
- en: '`ProductTest.cs`, our unit testing class, looks like the following:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ProductTest.cs`，我们的单元测试类，看起来如下所示：'
- en: 'Important terms for xUnit:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: xUnit 的重要术语：
- en: '**Fact** is an attribute and is used for a normal test method that is without
    parameters'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事实（Fact）** 是一个属性，用于没有参数的正常测试方法'
- en: '**Theory** is an attribute and is used for a parameterized test method'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理论（Theory）** 是一个属性，用于参数化测试方法'
- en: '[PRE6]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code snippet, we are simply testing our `ProductController`,
    which is a `Get` resource, `GetList`. In this code, we are mocking the list; we
    are not actually hitting the database but instead testing our `Controller` methods
    using fake data.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们只是测试我们的 `ProductController`，它是一个 `Get` 资源，`GetList`。在这段代码中，我们模拟了列表；我们实际上并没有击中数据库，而是使用假数据测试我们的
    `Controller` 方法。
- en: 'Run tests from Test Explorer; if your test passes, you should see something
    like the following screenshot:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从测试资源管理器运行测试；如果你的测试通过，你应该会看到以下截图：
- en: '![](img/134b6fd3-8ba7-4ed5-8c7d-aec0215473b8.png)'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_IMG
  zh: '![截图](img/134b6fd3-8ba7-4ed5-8c7d-aec0215473b8.png)'
- en: Stubs and mocking
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存根和模拟
- en: 'Stubs are canned responses to calls made during a test, whereas mocks are meant
    to set expectations. They can be further explained as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 存根是对测试期间发出的调用的预定义响应，而模拟是为了设置期望。它们可以进一步解释如下：
- en: '**Stubs**: In the `stubs` object, we always get a valid stubbed response. The
    response doesn''t care what input you provided. In any circumstance, the output
    will be the same.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存根（Stubs）**：在 `stubs` 对象中，我们总是得到一个有效的存根响应。响应不关心你提供了什么输入。在任何情况下，输出都将相同。'
- en: '**Mocks**: In the `mock` object, we can test or validate methods that can be
    called on mocked objects. This is a fake object that validates whether a unit
    test failed or passed. In other words, we can say that mock objects are just replicas
    of our actual object.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟（Mocks）**：在 `mock` 对象中，我们可以测试或验证可以调用模拟对象的函数。这是一个验证单元测试是否失败或通过的假对象。换句话说，我们可以这样说，模拟对象只是我们实际对象的复制品。'
- en: In the previous section, *Writing unit tests*, we used the moq framework to
    implement the mocked objects.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的“编写单元测试”部分中，我们使用了 moq 框架来实现模拟对象。
- en: Security testing
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全测试
- en: Security is a very wide-reaching term and can't be explained in a few lines.
    In general, security testing is a way of testing whether an application is secure
    or if there is any chance of leaking someone's data.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是一个非常广泛的概念，不能在几行文字中解释清楚。一般来说，安全测试是一种测试应用程序是否安全或是否存在泄露他人数据的任何可能性的方法。
- en: Security and secure systems will be discussed in [Chapter 8](18479f1e-2030-404b-b016-1764984f46ed.xhtml),
    *Securing RESTful Web Services*.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和安全的系统将在第 8 章 [Securing RESTful Web Services](18479f1e-2030-404b-b016-1764984f46ed.xhtml)
    中讨论。
- en: Security testing is very important, especially when we working in web-based
    applications. Web applications are publicly available and vulnerable to attack,
    so authentication and authorization are the most important factors here.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 安全测试非常重要，尤其是在我们处理基于 Web 的应用程序时。Web 应用程序是公开可用的，容易受到攻击，因此认证和授权是这里最重要的因素。
- en: FxCop ([https://en.wikipedia.org/wiki/FxCop](https://en.wikipedia.org/wiki/FxCop)),
    which is shipped with Visual Studio and VeraCode ([https://www.veracode.com/](https://www.veracode.com/)),
    is one of the most popular tools used in security testing.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: FxCop ([https://en.wikipedia.org/wiki/FxCop](https://en.wikipedia.org/wiki/FxCop))，它是与
    Visual Studio 和 VeraCode ([https://www.veracode.com/](https://www.veracode.com/))
    一起提供的，是安全测试中最受欢迎的工具之一。
- en: Integration testing
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: In unit testing, we test a single unit of code, whereas, in integration testing
    in a Web API, we test all services that work together (internal and external,
    including third-party components). Service calls should be made to ensured integration
    with external services.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元测试中，我们测试单个代码单元，而在 Web API 的集成测试中，我们测试所有协同工作的服务（包括内部和外部服务，以及第三方组件）。应确保服务调用与外部服务集成。
- en: Run tests
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Let''s take the same application we created in the previous section for unit
    tests:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以上一节中创建的相同应用程序进行单元测试：
- en: 'Add a new project for integration tests, and make sure the project structure
    looks like the following screenshot:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的集成测试项目，并确保项目结构看起来如下截图所示：
- en: '![](img/4c85e8fd-558e-4a73-bc28-f2800cfcb41b.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c85e8fd-558e-4a73-bc28-f2800cfcb41b.png)'
- en: 'Write the following code in the constructor of `ProductTest.cs`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ProductTest.cs` 的构造函数中编写以下代码：
- en: '[PRE7]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code block, we initialized `TestServer` , where we used `TestStartup`
    as our startup entry file. Finally, we created a `private readonly HttpClient
    _client;` of our `WebHostBuilder()`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们初始化了 `TestServer`，其中我们使用 `TestStartup` 作为我们的启动入口文件。最后，我们创建了一个 `WebHostBuilder()`
    的 `private readonly HttpClient _client;`。
- en: 'Then, write a simple method that calls the productlist resource:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，编写一个简单的调用产品列表资源的函数：
- en: '[PRE8]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we are consuming our resource `GET api/product/productlist`
    and testing it to see if it returns the expected output.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在消费我们的资源 `GET api/product/productlist` 并测试它是否返回预期的输出。
- en: To run the code smoothly, you need to add the `Microsoft.AspNetCore.Hosting;`
    and `Microsoft.AspNetCore.TestHost;` namespaces in the code.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使代码运行顺畅，你需要在代码中添加 `Microsoft.AspNetCore.Hosting;` 和 `Microsoft.AspNetCore.TestHost;`
    命名空间。
- en: This test also makes sure that the internal component, or any external service
    call made by this method, is working as expected.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试还确保内部组件或此方法做出的任何外部服务调用按预期工作。
- en: 'Complete the code for `ProductTes.cs`  as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下所示完成 `ProductTes.cs` 的代码：
- en: '[PRE9]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Write the code for the `TestStartup` file as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下所示编写 `TestStartup` 文件代码：
- en: '[PRE10]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, our `TestStartup` class inherited the `Startup` class,
    meaning we are now using its members and methods.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们的 `TestStartup` 类继承了 `Startup` 类，这意味着我们现在正在使用其成员和方法。
- en: You need to make the methods `ConfigureServices` and `Configure` virtual to
    override these in the `TestStartup` class.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将方法 `ConfigureServices` 和 `Configure` 声明为虚拟的，以便在 `TestStartup` 类中重写它们。
- en: Take a look into our `InitConfiguration()` method; this method adds your test
    configuration file so that you can use test config values in any other environment.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下我们的 `InitConfiguration()` 方法；此方法添加了你的测试配置文件，这样你就可以在任何其他环境中使用测试配置值。
- en: In our `TestStartup` class, we overrode the `ConfigureServices` and `Configure`
    methods so that we could configure test services or any utilities class that was
    created specifically for testing purposes.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `TestStartup` 类中，我们重写了 `ConfigureServices` 和 `Configure` 方法，以便我们可以配置测试服务或任何专门为测试目的创建的实用工具类。
- en: Now we are all set to run our tests, open Test Explorer and run a selected test.
    You can also run tests from the `ProductTest.cs` file (just right-click and select
    Run tests).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好运行我们的测试，打开测试资源管理器并运行选定的测试。您也可以从`ProductTest.cs`文件中运行测试（只需右键单击并选择运行测试）。
- en: 'In case you need to debug the code, you can debug tests as well. If you do,
    you should get the following results:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要调试代码，您也可以调试测试。如果您这样做，您应该得到以下结果：
- en: '![](img/c6e3e6d4-a9c7-4a62-9d6b-2558c762313a.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c6e3e6d4-a9c7-4a62-9d6b-2558c762313a.png)'
- en: You can write as many tests as you want. Tests also depend on what code you
    want to test.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以编写尽可能多的测试。测试也取决于您想测试的代码。
- en: Fake objects
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟对象
- en: As the name suggests, fake objects are objects that are not real. Fake objects
    are for testing purposes and contain actual code, but not with all of the genuine
    functionality. For instance, we can create a fake object to fetch data records
    using Entity Framework Core; in this case, we prefer to use InMemory ([https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/in-memory](https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/in-memory))
    instead of a direct DB connection.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，模拟对象是非真实对象。模拟对象用于测试目的，包含实际代码，但并非所有真实功能。例如，我们可以创建一个模拟对象来使用Entity Framework
    Core获取数据记录；在这种情况下，我们更倾向于使用内存数据库（[https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/in-memory](https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/in-memory)）而不是直接数据库连接。
- en: Run tests
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试
- en: Let's take the application we developed in the previous section on unit testing.
    Follow the steps mentioned in the preceding section and add a new xUnit test project.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们参考上一节中开发的单元测试应用程序。按照前面章节中提到的步骤添加一个新的xUnit测试项目。
- en: We are looking for fake objects or data for testing purposes, so we will not
    be hitting our actual database server. Instead, here we will use the InMemory
    database.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在寻找用于测试目的的模拟对象或数据，所以我们将不会连接到实际的数据库服务器。相反，这里我们将使用内存数据库。
- en: You need to add the `Microsoft.EntityFrameworkCore.InMemory` NuGet package to
    start the InMemory database.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要添加`Microsoft.EntityFrameworkCore.InMemory` NuGet包以启动内存数据库。
- en: 'We are not going to change anything here, but we will create fake data and
    records to test. To proceed, add the following code to the `TestStartup.cs` file
    in the `ConfigureServices` method:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不会做任何更改，但我们将创建模拟数据和记录以进行测试。要继续，请将以下代码添加到`TestStartup.cs`文件中的`ConfigureServices`方法：
- en: '[PRE11]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we are using the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用以下内容：
- en: The InMemory database, used only for testing purposes, by adding  `.UseInMemoryDatabase`
    to the `TestStartup` class
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅用于测试目的的InMemory数据库，通过在`TestStartup`类中添加`.UseInMemoryDatabase`来实现。
- en: For our actual code, our database server will remain unchanged in the `Startup.cs`
    class, that is, `.UseSqlServer`
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于我们的实际代码，数据库服务器在`Startup.cs`类中保持不变，即`.UseSqlServer`
- en: 'Now we need fake data and records, so add the following method in the `TestStartup` class:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要模拟数据和记录，所以请在`TestStartup`类中添加以下方法：
- en: '[PRE12]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, call the `FakeData(context)` method from the `Configure(IApplicationBuilder
    app, IHostingEnvironment env)` method, as shown in the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从`Configure(IApplicationBuilder app, IHostingEnvironment env)`方法中调用`FakeData(context)`方法，如下所示：
- en: '[PRE13]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we are ready to run tests, so open Test Explorer and hit Run All. If the
    tests pass, you should see something like the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好运行测试，所以打开测试资源管理器并运行所有测试。如果测试通过，你应该会看到以下截图：
- en: '![](img/5129795f-ced5-473e-a3d8-30e15138ddb3.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5129795f-ced5-473e-a3d8-30e15138ddb3.png)'
- en: 'To double-check that the tests are not hitting the actual database, let''s
    debug the test code. Open the `ProductTest.cs` class and set a breakpoint for
    the following test:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保测试没有实际连接到数据库，让我们调试测试代码。打开`ProductTest.cs`类，并为以下测试设置断点：
- en: '[PRE14]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now right-click on Debug Test, use step-into (the *F11* key) to go into the
    controller and the repository, and check to see what the actual list of products
    is. You can see that our test is returning fake data, which means they are not
    hitting the actual database. The following is a screenshot of the debugged code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在右键单击“调试测试”，使用单步进入（*F11*键）进入控制器和仓储，并检查实际的产品列表。您可以看到我们的测试返回的是模拟数据，这意味着它们没有连接到实际的数据库。以下是被调试代码的截图：
- en: '![](img/2ed6222f-bd5a-4546-9fd8-3f1cd16100e3.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2ed6222f-bd5a-4546-9fd8-3f1cd16100e3.png)'
- en: The preceding screenshot is from a small application that we used to demonstrate
    testing with fake objects. With this testing approach, our fake objects were always
    hit instead of any actual code.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图来自我们用来演示使用模拟对象进行测试的小型应用程序。在这种测试方法中，我们的模拟对象总是被击中，而不是任何实际代码。
- en: Testing service calls using Postman, Advanced REST Client, and more
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Postman、高级 REST 客户端等测试服务调用
- en: There are a lot of tools available for testing RESTful web services and APIs.
    These tools provide the actual output.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多工具可用于测试 RESTful 网络服务和 API。这些工具提供实际输出。
- en: Web service testing tools are very useful when you have only API resources and
    want to test the expected output in different scenarios but do not have actual
    source code.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当您只有 API 资源并想在不同场景中测试预期的输出，但没有实际源代码时，网络服务测试工具非常有用。
- en: We will test our product APIs with the following two tools.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下两个工具测试我们的产品 API。
- en: Postman
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Postman
- en: '**Postman** ([https://www.getpostman.com/](https://www.getpostman.com/)) is
    one of the most popular tools when testing web service output. It also comes with
    a Google Chrome extension:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**Postman**（[https://www.getpostman.com/](https://www.getpostman.com/））是测试网络服务输出时最受欢迎的工具之一。它还附带一个
    Google Chrome 扩展程序：'
- en: Launch Postman. If you don't have it, install it from the preceding link.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Postman。如果您还没有它，可以从前面的链接安装它。
- en: Select the Resource type as GET and enter the URL of the API; in our case, it
    is `http://localhost:60431/api/Product/productlist`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择资源类型为 GET 并输入 API 的 URL；在我们的例子中，它是 `http://localhost:60431/api/Product/productlist`。
- en: Click on Send (alternatively, you can click on Send and Download, if you need
    data in the file).
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击发送（或者，如果您需要将数据保存在文件中，您也可以点击发送并下载）。
- en: 'If the test passes, you should see something like the following screenshot:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果测试通过，你应该会看到以下截图类似的内容：
- en: '![](img/194c48ce-b5ca-4707-9973-14ec1c106d6e.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/194c48ce-b5ca-4707-9973-14ec1c106d6e.png)'
- en: Advanced Rest Client
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 Rest 客户端
- en: '**Advanced rest client** (**ARC**) is another popular tool and also comes as
    a Chrome extension. You can either install it from the Chrome Extension store
    or directly from [https://install.advancedrestclient.com/](https://install.advancedrestclient.com/):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级 rest 客户端**（**ARC**）是另一个流行的工具，也作为 Chrome 扩展程序提供。您可以从 Chrome 扩展程序商店安装它，或者直接从
    [https://install.advancedrestclient.com/](https://install.advancedrestclient.com/)
    安装：'
- en: Install the Chrome extension for ARC, if not yet installed.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未安装，请安装 ARC 的 Chrome 扩展程序。
- en: Launch ARC.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 ARC。
- en: Pass the GET resource.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 GET 资源。
- en: 'If the test passes, you should see something like the following screenshot:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果测试通过，你应该会看到以下截图类似的内容：
- en: '![](img/8c2d00ed-feed-489d-b4e5-956405437e09.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c2d00ed-feed-489d-b4e5-956405437e09.png)'
- en: User acceptance testing
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户验收测试
- en: As the name suggests, **user acceptance testing** (**UAT**) is testing that
    is done by users or accepted by users. In this testing methodology, users who
    might be an application's end user are involved directly with testing. There might
    be scenarios that users test in the production environment, or they may have access
    to the pre-tested results that they can accept or reject.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，**用户验收测试**（**UAT**）是由用户执行或用户接受的测试。在这种测试方法中，可能成为应用程序最终用户的用户将直接参与测试。可能会有用户在生产环境中进行的测试场景，或者他们可能有权访问他们可以接受或拒绝的预测试结果。
- en: This kind of testing depends on the actual user who would be using the application
    in a production environment. This testing usually happens in a UAT or pre-production
    environment.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这种测试取决于实际将在生产环境中使用应用程序的用户。这种测试通常在 UAT 或预生产环境中进行。
- en: The typical environments in the industry are known as development, staging,
    QA, UAT, pre-production, and production. In your organization, you might not have
    all the environments as per your project requirements; if so, refer to [https://www.guru99.com/user-acceptance-testing.html](https://www.guru99.com/user-acceptance-testing.html).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 行业中典型的环境被称为开发、预发布、QA、UAT、预生产和生产。在您的组织中，您可能不会根据项目需求拥有所有这些环境；如果是这样，请参阅 [https://www.guru99.com/user-acceptance-testing.html](https://www.guru99.com/user-acceptance-testing.html)。
- en: UAT testing is also seen as final testing, and its acceptance or rejection tells
    us whether a current release will be deployed to production or not. The main focus
    of this testing is business-related. This testing does not deal with test code
    or the implementation of various patterns; it simply makes sure that all the business
    rules and requirements have been implemented.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: UAT测试也被视为最终测试，其接受或拒绝决定告诉我们当前版本是否将被部署到生产环境中。这种测试的主要重点是业务相关的。这种测试不涉及测试代码或各种模式的实现；它只是确保所有业务规则和需求都已实现。
- en: Performance or load testing
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能或负载测试
- en: For a web application's performance, scalability is very important. An application
    can be very secure, well tested, and created with good code but still be avoided
    by the user if it's not scalable.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web应用程序的性能，可伸缩性非常重要。一个应用程序可以非常安全、经过良好测试，并且使用良好的代码创建，但如果它不可伸缩，用户仍然可能会避免使用它。
- en: We will discuss scaling RESTful web services in detail in [Chapter 9](dfa68fd5-a510-4446-be5c-fe23d0ca08cd.xhtml), *Scaling
    RESTful Services (Performance of Web Services)*.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](dfa68fd5-a510-4446-be5c-fe23d0ca08cd.xhtml)中详细讨论RESTful Web服务的扩展，*扩展RESTful服务（Web服务的性能）*。
- en: Performance is very important for a good API, so we need to test and make sure
    that our application is able to load or stress large requests. Load testing is
    a non-functional type of testing ([https://www.guru99.com/non-functional-testing.html](https://www.guru99.com/non-functional-testing.html)) and
    the main aim of load testing is not to verify the code or test the code's health.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个好的API来说，性能非常重要，因此我们需要测试并确保我们的应用程序能够处理或承受大量请求。负载测试是一种非功能性测试([https://www.guru99.com/non-functional-testing.html](https://www.guru99.com/non-functional-testing.html))，负载测试的主要目的不是验证代码或测试代码的健康状况。
- en: The main purpose of this testing is to ensure that the web API is performing
    well based on various measures such as scalability, reliability, and so on.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这种测试的主要目的是确保基于各种指标（如可伸缩性、可靠性等）的Web API表现良好。
- en: 'The following are techniques or types of performance testing:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些性能测试的技术或类型：
- en: '**Load testing**: This tests the behavior of the system under various circumstances
    of specific load. This also covers critical transactions, database load, application
    servers, and so on.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载测试**：这种测试在特定负载的各种情况下测试系统的行为。这也包括关键交易、数据库负载、应用服务器等。'
- en: '**Stress testing**: This is an approach where a system goes under regress testing
    and finds the upper-limit of a system''s capacity. It is also determined by how
    a system behaves in a critical situation where the current load goes above the
    expected maximum load.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压力测试**：这是一种方法，系统在回归测试中进行，以找到系统容量的上限。它还取决于系统在当前负载超过预期最大负载的关键情况下的行为。'
- en: '**Soak testing**: This is also known as endurance testing. In this test, the
    main purpose is to monitor memory utilization, memory leaks, or various factors
    which affect system performance.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浸泡测试**：这也被称为耐久测试。在这个测试中，主要目的是监控内存利用率、内存泄漏或影响系统性能的各种因素。'
- en: '**Spike testing**: This is an approach where we make sure that the system is
    able to sustain the workload. One of the best tasks for determining performance
    is suddenly increasing the user loads.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**峰值测试**：这是一种确保系统能够承受工作负载的方法。确定性能的最佳任务之一是突然增加用户负载。'
- en: 'In ASP.NET Core, we can perform load testing with the help of the following:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，我们可以使用以下方法进行负载测试：
- en: '**Visual Studio**: If you have Visual Studio Enterprise Edition, you can easily
    create a load testing project; visit the following link for more information:
    [https://docs.microsoft.com/en-us/vsts/load-test](https://docs.microsoft.com/en-us/vsts/load-test).'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio**：如果你有Visual Studio Enterprise Edition，你可以轻松创建一个负载测试项目；更多信息，请访问以下链接：[https://docs.microsoft.com/en-us/vsts/load-test](https://docs.microsoft.com/en-us/vsts/load-test)。'
- en: '**WebSurge**: This is a load testing use for APIs. You can use it in the cloud
    or for free for learning purposes. For more information, visit [http://websurge.west-wind.com/](http://websurge.west-wind.com/).'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebSurge**：这是一种用于API的负载测试工具。你可以用于云服务或免费用于学习目的。更多信息，请访问[http://websurge.west-wind.com/](http://websurge.west-wind.com/)。'
- en: '**BenchmarkDotNet**: This tool tells us how much of our code is performant.
    It tests different blocks of codes that give the same result to see which performs
    best. For more information, visit [https://github.com/dotnet/BenchmarkDotNet](https://github.com/dotnet/BenchmarkDotNet).'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BenchmarkDotNet**：这个工具告诉我们代码中有多少是高效的。它测试不同代码块，这些代码块给出相同的结果，以查看哪个性能最好。更多信息，请访问
    [https://github.com/dotnet/BenchmarkDotNet](https://github.com/dotnet/BenchmarkDotNet)。'
- en: '**Netling**: This is a load testing tool for web applications. With Netling,
    you can make changes and retest your code to meet your performance scale. For
    more information, visit [https://github.com/hallatore/Netling](https://github.com/hallatore/Netling).'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Netling**：这是一个针对网络应用的负载测试工具。使用 Netling，你可以修改代码并重新测试以符合你的性能规模。更多信息，请访问 [https://github.com/hallatore/Netling](https://github.com/hallatore/Netling)。'
- en: Explanations, along with working examples, of these tools and Visual Studio
    Load Testing is beyond the scope of this book.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具和 Visual Studio 负载测试的解释，以及工作示例，超出了本书的范围。
- en: In this section, we will simply test our product APIs to check how much time
    it takes them to list the products we request.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简单地测试我们的产品 API，以检查它们列出我们请求的产品所需的时间。
- en: You can also test the request time of APIs using a simple web client. In [Chapter
    10](9fcac4d2-710a-48a2-98be-ed0034525cee.xhtml), *Building a Web Client (Consuming
    Web Services)*, we will discuss how to build a web client in detail.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用简单的网络客户端测试 API 的请求时间。在第 10 章 [Building a Web Client (Consuming Web Services)](9fcac4d2-710a-48a2-98be-ed0034525cee.xhtml)
    中，我们将详细讨论如何构建网络客户端。
- en: 'Take a look at the code of our `ProductTest` class, as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的 `ProductTest` 类的代码，如下所示：
- en: '[PRE15]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code is self-explanatory. We are simply calculating the time taken
    by single and multiple requests, and checking whether this reaches our benchmark.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是自我解释的。我们只是在计算单个和多次请求所需的时间，并检查是否达到我们的基准。
- en: The complete code is available to download from [https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core](https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以从 [https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core](https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-DotNET-Core)
    下载。
- en: Run tests
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'To run tests, you need to make sure that your APIs are running and accessible
    using the URL. To do so, use the CLI to complete the following steps:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试，你需要确保你的 API 正在运行，并且可以通过 URL 访问。为此，使用 CLI 完成以下步骤：
- en: Open the Visual Studio command prompt
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 命令提示符
- en: Locate the folder of your API project
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到你的 API 项目文件夹
- en: Fire the command `dotnet run`
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行命令 `dotnet run`
- en: 'You should now a screen similar to the one in the following screenshot:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该会看到一个类似于以下屏幕截图的屏幕：
- en: '![](img/5007496a-c067-4591-9173-ea6772db3043.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5007496a-c067-4591-9173-ea6772db3043.png)'
- en: 'Follow these steps to run tests using Visual Studio Test Explorer:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 Visual Studio 测试资源管理器运行测试：
- en: Open the `ProductTest.cs` file
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ProductTest.cs` 文件
- en: Open Test Explorer
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开测试资源管理器
- en: Click Run
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击运行
- en: 'This will run all the tests; you should see an output similar to the following
    screenshot:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行所有测试；你应该会看到一个类似于以下屏幕截图的输出：
- en: '![](img/d18d7381-017c-40f6-aef6-76afa017f194.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d18d7381-017c-40f6-aef6-76afa017f194.png)'
- en: 'We can also check the exact time taken for a request to be completed by individual
    APIs. To do this, click on **Output** in the test explorer of a particular `TestCase`
    result, and you should see the following screen:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查单个 API 完成请求所花费的确切时间。为此，在特定 `TestCase` 结果的测试资源管理器中点击 **输出**，你应该会看到以下屏幕：
- en: '![](img/8ea433e9-9ccf-4342-b233-a5c7f6e69fee.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8ea433e9-9ccf-4342-b233-a5c7f6e69fee.png)'
- en: 'You can also run these tests using the CLI, as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 CLI 运行这些测试，如下所示：
- en: Open the Visual Studio command prompt
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 命令提示符
- en: Locate the folder of your API project
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到你的 API 项目文件夹
- en: Fire the command `dotnet test`
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行命令 `dotnet test`
- en: 'The preceding command will run all the tests; if they pass, you should see
    the following screen:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将运行所有测试；如果它们通过，你应该会看到一个类似于以下屏幕截图的输出：
- en: '![](img/48deb5d8-fe65-4a84-8ff8-769f704632c8.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/48deb5d8-fe65-4a84-8ff8-769f704632c8.png)'
- en: Visit [https://docs.microsoft.com/en-us/dotnet/core/tools/?tabs=netcore2x](https://docs.microsoft.com/en-us/dotnet/core/tools/?tabs=netcore2x)
    to check all the available CLI commands.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://docs.microsoft.com/en-us/dotnet/core/tools/?tabs=netcore2x](https://docs.microsoft.com/en-us/dotnet/core/tools/?tabs=netcore2x)
    检查所有可用的 CLI 命令。
- en: In this section, we tried a simple load test that was based on request times.
    We tried a single call and multiple calls.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们尝试了一个基于请求时间的简单负载测试。我们尝试了单个调用和多次调用。
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Testing helps to ensure our code is error-free. Testing is also a practice for
    all developers who want to make their code clean and maintainable. In this chapter,
    we covered testing paradigms in the day-to-day activities of a development team,
    with the knowledge of stubs and mocks, as well as the importance of understanding
    integration, security, and performance testing.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 测试有助于确保我们的代码无错误。测试也是所有希望使代码整洁和易于维护的开发者的实践。在本章中，我们涵盖了开发团队日常活动中测试范式，包括对存根和模拟的了解，以及理解集成、安全性和性能测试的重要性。
- en: In the coming chapters, we will discuss security, including following the OWASP
    security standard and JWT authentication. We will cover more complex scenarios
    with the use of custom filters and input validations. Data protection is always
    a high priority for any web application, so we will also take a look at sensitive
    data persistence and storage.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论安全性，包括遵循OWASP安全标准和JWT认证。我们将使用自定义过滤器和输入验证来涵盖更复杂的场景。数据保护对于任何Web应用来说始终是最高优先级，因此我们还将探讨敏感数据的持久化和存储。
