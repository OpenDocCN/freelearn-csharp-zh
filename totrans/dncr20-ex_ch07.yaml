- en: To the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have learned and explored the fundamentals of ASP.NET Core 2.0 by
    developing applications that ran locally in our machines. The real value of these
    apps can be realized only when these apps are deployed and available on the internet,
    so that they can be accessed from virtually anywhere and everywhere on the planet.
    To do so, we need to learn to deploy our ASP.NET Core 2.0 apps in the cloud, Microsoft
    Azure. An obvious question that comes to mind is *Why should I care about the
    cloud?* In this chapter, we will answer this question and get introduced to Microsoft
    Azure, our cloud platform, and learn its basics. So far, we deliberately developed
    applications that did not do any data persistence and hence did not use a relational
    database. We will also learn to develop an end-to-end application that uses a
    relational database for data persistence and learn about Entity Framework Core
    in the process. We will grasp these concepts by developing a simple movie booking
    web app and then deploy this web app on Azure. Finally, we will integrate the
    Chatbot that we developed earlier in the book with our movie booking site. We
    have a lot of ground to cover, so let's get into the cloud!
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following  topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the cloud, we're all in.
  prefs: []
  type: TYPE_NORMAL
- en: – Steve Ballmer
  prefs: []
  type: TYPE_NORMAL
- en: At our core, Microsoft is the productivity and platform company for the mobile-first
    and cloud-first world.
  prefs: []
  type: TYPE_NORMAL
- en: – Satya Nadella
  prefs: []
  type: TYPE_NORMAL
- en: These two quotes from the former and current Microsoft CEO highlight the importance
    of the cloud. The cloud has been one of the hottest buzzwords over the last few
    years but you shouldn't be surprised to know that we have been using the cloud
    for a decade, maybe more, without realizing it. Gmail, Facebook, Skype, Dropbox,
    OneDrive, and so on are all examples of cloud solutions that we use almost everyday.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing is an **information technology** (**IT**) paradigm that enables
    ubiquitous access to shared pools of configurable system resources and higher-level
    services that can be rapidly provisioned with minimal management effort, often
    over the internet. Cloud computing relies on the sharing of resources to achieve
    coherence and economy of scale, similar to a utility. Clouds enable organizations
    to focus on their core businesses instead of expending resources on computer infrastructure
    and maintenance. Cloud computing allows enterprises to get their applications
    up and running faster, with improved manageability and less maintenance, and it
    enables IT teams to more rapidly adjust resources to meet fluctuating and unpredictable
    business demand.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental idea behind the cloud is that we can access all the information
    over the internet without worrying about detailed information about the infrastructure
    needed to enable it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cloud provides businesses and organizations with:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexibility**: Based on the business requirements, such as enhancing a basic
    plan to a premium plan, we can scale the number of servers up or down. Imagine
    a cake business web app. During the Christmas holiday season, the demand for cakes
    and thus traffic to the website increases manyfold. So to serve this increased
    load, the number of servers can be increased during the holiday season, and during
    a lean phase, it can be decreased. This flexibility is key in today''s economy
    where businesses have to save and excel in every little margin.almost instantly
    by the consumer as and when needed without any human'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**On-demand self-service**: The services can be provisioned or decommissioned
    almost instantly by the consumer as and when needed without any human intervention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Security is paramount. Rest assured that your data is more secure
    in the cloud than in the desktop located at your desk or the laptop that you carry.
    A lost/stolen laptop is a frequently encountered issue. More than financial cost,
    loss of sensitive data is exorbitantly costly, not just financially but also regarding
    reputation and trust. The cloud gives you better security when this happens. As
    the data is stored in the cloud, you can access it no matter what happens to your
    machine. You can even remotely wipe out data from your machine, if it falls into
    the wrong hands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost**: Using the cloud saves on maintenance costs and the high cost of hardware.
    No more servers, software, and update fees. You simply *pay as you go* and enjoy
    a subscription. You also save on the cost of people to procure the hardware, maintain
    it, and update it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disaster recovery**:A robust disaster recovery plan in needed for any large
    or small enterprise as one disaster can put you out of business. The cloud lets
    you do it easier than ever.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic updates**: Since all the servers are off-premise on the cloud, you
    don’t have to worry about wasting time maintaining the system yourself. The cloud
    provider takes care of maintenance for you and rolls out regular software updates.
    This keeps you free to focus on the things that matter, such as growing your business.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration**:When your teams can access, edit, and share documents anytime
    from anywhere, they''re able to do more things better collaboratively. Cloud-based
    workflow and file sharing apps help them make updates in real time and give them
    full visibility of their collaborations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Work from home**: Why just home? Work from anywhere you have the internet.
    Yes, that''s a reality with the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This and many more benefits make the cloud indispensable for any modern day
    IT professional. I would go one step ahead and say that:'
  prefs: []
  type: TYPE_NORMAL
- en: <q>*If you are not in cloud, you are out of IT.*</q>
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's have a look at different types of cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Types of cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Broadly speaking, the cloud deployment model can be classified into:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public cloud:** This is the most commonly used cloud deployment model. A
    public cloud is one in which the service provider makes resources such as services,
    applications, or storage available to the general public over the internet. Public
    cloud services may be *free* or offered on a *pay as you go* model. Some examples
    of public cloud services are Microsoft Azure, Amazon **Elastic Compute ****Cloud** (**EC2**),
    IBM''s Blue Cloud, Google App Engine, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private cloud:** A private cloud offers similar advantages to a public cloud,
    but through a proprietary architecture. Unlike a public cloud, a private cloud
    is dedicated to a single organization. Since there is a lot of cost involved,
    only a large organization can invest in private clouds. Organizations with a lot
    of software developers are use cases for private clouds, as developers have frequent
    requests for new virtual machines. For example, the **State Bank of India** (**SBI**)
    has built a private cloud named **Meghdoot** which powers multiple business services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid cloud:** This is a combination of public cloud services and private
    clouds. It is not necessary to have a private cloud in order to use a hybrid cloud.
    A hybrid cloud can also be a combination of virtualized, on-premise data centers and
    public cloud services. A hybrid cloud can also be seen as a bridge between the
    public and private clouds, which enables moving workloads between the earlier
    two deployments based on policy, costs, and so on.  Most companies today operate
    using this deployment model. For example, Marriot and Dominos Pizza make use of
    hybrid clouds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cloud computing services can be categorized into three service delivery models:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure as a Service** (**IaaS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform as a Service** (**PaaS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software as a Service** (**SaaS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram should illustrates these service delivery models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b5afee2-7074-4350-8fa2-a55229b15636.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that:'
  prefs: []
  type: TYPE_NORMAL
- en: In **On-Premises** deployment, the customer has to manage each and every thing
    from hardware to software; for example, any software deployed in the server hosted
    on company premises.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In**IaaS**, all the required infrastructure is managed by the vendor. The customer
    just manages the operating system, software, runtime, and the application and
    its data; for example, Amazon EC2, Microsoft Azure, and Google Compute Engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In **PaaS**, the infrastructure as well as the operating system and runtime
    is managed by the vendor. The customer just manages the applications and its data;
    for example, Google App Engine, Heroku, and Microsoft Azure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In**SaaS**, the entire infrastructure and software is managed by the vendor.
    The customer just consumes the software as a service; for example, Microsoft Office
    365, Gmail, and OneDrive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we are aware of the basics of the cloud, it's time to get started with the
    cloud platform that is the future and we all need to embrace, Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure (formerly called Windows Azure) is the cloud service created
    by Microsoft for building, testing, deploying, and managing web applications and
    services through a global network of Microsoft-managed data centers. It provides
    SaaS, PaaS, and IaaS, and supports many different programming languages, tools,
    and frameworks, including both Microsoft-specific and third-party software and
    systems. All the examples in this book are developed in a **virtual machine**
    (**VM**) hosted in Azure. Since we also needed a Linux VM to demonstrate ASP.NET
    Core 2.0 cross-platform support, the Linux VM is also created and hosted in Azure.
    This is the best example to demonstrate how flexible and easy it is for developers
    to embrace and use Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'An obvious question that may come to your mind is: why use Azure and not Amazon''s
    AWS or Google Cloud? Fair enough, I am completely biased on this one and I strongly
    believe Microsoft Azure is way ahead of its competitors in numerous parameters.
    Some them are highlighted in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security compliance and trust**: Azure has more comprehensive compliance
    coverage with more than 70 compliance offerings and is the first major cloud provider
    to contractually commit to the requirements of the **General Data Protection Regulation**
    (**GDPR**). To protect your organization, Azure embeds security, privacy, and
    compliance into its development methodology and has been recognized as the most
    trusted cloud for US government institutions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global presence with most regions**: Azure has the largest number of regions
    in the world covered, with 42 announced Azure regions—more than any other cloud
    provider. You can choose the data center and region which is right for you and
    your customers, with the performance and support you need, where you need it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support for multiple development tools and language**: When Satya Nadella
    said <q>*"Microsoft ♥ Linux"*</q>, it gave a strong message to the world that
    Microsoft is actively listening to its customers and embracing open source at
    its core. The same strategy shows in the Microsoft cloud as well, which supports
    numerous tools, frameworks, and languages. Microsoft is the leading open source
    contributor on GitHub and actively supports multiple open source community projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real hybrid cloud approach**: Azure offers hybrid consistency everywhere
    from application development, security, identity management, and data platforms.
    This helps reduce the risk and cost of the hybrid cloud environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unmatched artificial intelligence**: It''s never been easier to develop intelligent
    solutions that scale using Microsoft Cognitive services, bots, machine learning,
    and **Blockchain as a Service** (**BaaS**) capabilities that can be found only
    with Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Big data with advanced analytics**: Azure Cosmos DB enables you to scale
    your application limitlessly with big data support. Then the advanced business
    analytic services provided by Azure make you go way higher than your competitors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manage and optimize cloud cost**: With free Azure cost management, it is
    easy to optimize cloud resources and budget them within your allocated funds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IoT ready**: You can quickly develop the most common IoT scenarios, such
    as remote monitoring, using the pre-configured solutions in the Azure IoT suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unmatched developer productivity**: Azure is developer-friendly, and as we
    will see in a short while, we can develop, deploy, and test our app in Azure from
    within Visual Studio or PowerShell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A data center is a facility composed of networked computers and storage that
    businesses or other organizations use to organize, process, store, and disseminate
    large amounts of data. A business typically relies heavily upon the applications,
    services, and data contained within a data center, making it a focal point and
    critical asset for everyday operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure is an expanding network of data centers around the world. These data
    centers form **regions**. This provides us with the flexibility to use the region
    of our choice to deploy the resources/applications for the best performance. The
    following screenshot showing the Microsoft Azure website ([https://azure.microsoft.com/en-us/](https://azure.microsoft.com/en-us/))
    illustrates these different regions on the world map. We can see multiple regions
    in the United States, UK, Europe, India, and Japan. When we deploy an application,
    we need to select a region for the deployment. I might select a specific region
    to keep the application geographically close to me or my customers. I live in
    India, so I might use the West or Central or South India region for my development
    purposes. I can also deploy to multiple regions if I wanted some redundancy. The
    takeaway from this diagram is that Microsoft Azure is running millions of computer
    servers, physical machines that are spread around these regions around the world,
    and Microsoft ensures that these machines are up and running, healthy, and physically
    secure. We just need to leverage a portion of this enormous computing power to
    do our work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b19ad482-faaf-42fe-a5c5-6fd90cd8bcbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have the fundamental concepts of the cloud (and Microsoft Azure)
    in place, let's get started using the Azure platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, you will need to register your account with Azure. To do so,
    go to [https://portal.azure.com/](https://portal.azure.com/) and register with
    any of your Microsoft accounts, such as Hotmail, MSN, Outlook, or Live. At the
    time of writing this chapter, Azure offered the following great and free benefits
    when creating an account. These may vary by the time you read the book:'
  prefs: []
  type: TYPE_NORMAL
- en: 12 months' free access to popular products. You also get 25 always free products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A $200 credit to use on any Azure products for 30 days.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure uses credit card information only for identity verification and you are
    not charged until you change your subscription to a *pay as you go* subscription.
    If you work in a large enterprise or a Microsoft partner, or a BizSpark program
    or MSDN subscriber, you already get a subscription to Azure cloud resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you are registered, you will see a nice dashboard. This is the Azure management
    portal. The dashboard user interface keeps getting better and is updated from
    time to time, so by the time you read this chapter, the user interface may be
    different from what it is right now. The important thing to notice is that there
    is a left panel which lists all of the Azure services that you can use. First-time
    users should take the guided tour of Azure to get themselves familiar with the
    user interface as it is very rich in features. Let''s have a quick look at the
    user interface. The following screenshot illustrates the Azure dashboard after
    you log in. We have marked the user interface with numbers so that we can see
    each of these items in reasonable depth:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04230ebf-6964-4c60-9e74-af6da1b72bbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at the different components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hamburger button**: Shows the hamburger menu on the left panel. This has
    the standard hamburger button behavior. When expanded, it shows the icon as well
    as a description of the various services that Azure provides. On collapse, it
    increases the real estate for the right column (where the Dashboard is showing
    up) as only icons are displayed in the collapsed left panel.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New: Creates a new resource. On clicking, displays the resource that needs
    to be created from the Marketplace. You can also use this to view the wide variety
    of services in Azure Marketplace.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Left panel hub displaying favorite Azure services**: All your favorite or
    commonly used services/resources that Azure offers are displayed in this area
    that we call a hub. This is the place to go when you want to create or manage
    the resources that you own in Azure. Don''t get confused with the word resource;
    just like a software developer is referred to as a resource when managers talk,
    everything that we can create from virtual machines to web apps, Redis Cache,
    and so on, are generally called resource. Well, there are so many Azure resources
    that not all of them can fit in the hub, so what can be shown are shown and the
    rest are shown under the item More Services.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Dashboard on right panel**: In the screenshot, this is displaying the Azure
    Dashboard from all the subscriptions. We can have two types of dashboard: private
    and shared. Shared dashboards can be shared with other users, while private is
    as the name suggests. The intent of the dashboard is to have quick access to the
    resources you use, so that you can view and manage them quickly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New dashboard: This presents an option to create a new dashboard where you
    can customize the tiles for resources to be shown in the way you want them to
    show up. You can pin, move, or resize the resource tiles the way you want.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit dashboard: Enables you to edit the dashboard. You can remove a tile from
    the dashboard, or add a new one, or maybe just drag and change its position. You
    can make a tile smaller or larger as per your preference.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Share: Enables you to share the dashboard with other users. You can share the
    dashboard by publishing it as an Azure resource. Azure **Role-Based Access Control**
    (**RBAC**) will determine who has access to the dashboard. Access to individual
    tiles can differ from access to the dashboard itself.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fullscreen: Displays the portal full-screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone: Clones the dashboard.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete: Deletes the dashboard.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Search**: To search the resource/services you are looking for.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Notifications**: Clicking on this bell-like icon displays notifications and
    status updates, such as billing updates, resource start/stop/error notifications,
    and other information.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cloud Shell**: Using this command prompt-like icon, you can select bash or
    PowerShell. You can change shells any time through the environment selector in
    the Cloud Shell toolbar. The most recently used environment will be the default
    for your next session.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Settings**: The gear icon represent settings in the current portal. It allows
    you to customize the portal settings, themes, language, and so on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Feedback**: To share the feedback from the Azure portal with the Microsoft
    Azure product team.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Help**: To get help and support. You can create or track a support ticket
    and monitor the health of your Azure services and resources. You can also check
    the keyboard shortcuts, with a guided tour here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Account information**: Switch directories, change your password, view permissions,
    submit an idea, or view your bill.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Service Health: Personalized guidance and support when issues in Azure services
    affect you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Marketplace: Discover, purchase, and manage add-ons and services from Microsoft
    partners.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What''s new: Keeps you updated with the latest and greatest information on
    Azure.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Feedback: Same as *Step 15*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Azure classic portal: To view the old classic Azure portal, for old users of
    Azure who are comfortable with the old portal.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Help + support: Same as *Step 16*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'All resources: Displays all resources and services from the subscription that
    you are using.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Though we have discussed and defined tiles here, please note that since the
    dashboard is customizable, you can choose to have a tile or remove it altogether.
    So, a few of the tiles may show / not show in your dashboard. The intent here
    is to make you aware of the portal. Also there are tiles numbered 25, 26, and
    27 in the screenshot, which I have pinned after creating these resources (actually,
    Azure pins resource to the Dashboard as soon as you create it based on a setting).
    These tiles display the resources/services that I am using and their status. In
    the screenshot, 25 is a tile named DotNetCore2\. It is a virtual machine and it
    has stopped. 26 shows a web app named testdecompression which is stopped as well.
    27 is a web app named packtletschat, which is up and running. Hopefully, this
    discussion has got you started with the Azure management portal. Next we will
    create a virtual machine and web app in Azure and then see how we can deploy our
    ASP.NET Core 2.0 apps published in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VM in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn to create a VM in Azure. Developers need VMs
    all the time. If you are wondering what I mean, just imagine that you wanted to
    try out out some new version of a tool or software that is not yet production-ready
    and you do not wish to try it out on your own laptop due to probable instability
    issues this new untested software may cause. I always do so, whenever I am trying
    out nightly builds of products or getting hands-on with any new product. Azure
    provides you with great flexibility and choice. There are numerous choices and
    configurations available to select the operating system that you want and the
    size that you require. We, being passionate .NET developers, may want a VM which
    has the great Visual Studio 2017 installed, so that we can start developing as
    soon as we provision the VM. To this end, we will learn to create a VM in Azure.
    To do so, let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left panel (hub) of the Azure management portal, click on Virtual machines.
    Ensure you click on Virtual machines and not Virtual machines (classic). We will
    discuss the difference between classic and the resource manager later in this
    section.![](img/01e58050-df5e-4f70-9e6b-dcc631fcff22.png)You will see a Virtual
    machines screen, which lists all the virtual machines that you have as well as
    providing the user interface to Add a virtual machine, Start, Stop, Delete, and
    Restart a virtual machine, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7059ce1e-90d6-472f-932e-a7f28273bd04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Add button. This will open a new fly-out on the right side, displaying
    a number of virtual machine images to choose from. This fly-out is what we call
    a blade. You can have Red Hat Linux, Windows Server, Ubuntu, or anything else
    based on your requirements. Since we need a Windows 10 machine with Visual Studio
    2017 Community Edition installed, let''s search for `Visual Studio 2017`. This
    shows the following list of results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47fc6595-1fcc-4d8f-9428-a5e26d5f7c88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the image that best suits your needs. On doing so, a new blade will
    appear displaying the details of the virtual machine image, its publisher, useful
    links, last updated date, its desktop screenshot, deployment model, and so on.
    Always select the deployment model as Resource Manager as it gives you the ability
    to automate with PowerShell, unlike Classic. This blade can be seen in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/118b9cb6-b7c2-4696-9ddd-146d2d1bb716.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On clicking the Create button, the following screen will display, which has
    four basic steps to create a virtual machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Basics
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Size
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Settings
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Basics section gathers fundamental information about the virtual machine
    to be created, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: The name of the virtual machine, which has to be unique.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: VM disk type: This can be **solid-state drive** (**SSD**), which offers consistent,
    low-latency performance and is ideal for production use or standard disks (HDD)
    that are backed by magnetic drives and are preferred for applications where data
    is accessed infrequently.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User name: The username to log in to the virtual machine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password,Confirm password: These should be the same as the user name and this
    password will be used with the username to log in to the virtual machine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscription**:** This is auto-populated. If you have numerous subscriptions,
    you can choose the one with which you wish to create the virtual machine.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resource group: A resource group is a collection of resources that share the
    same life cycle, permissions, and policies. For better management, you can choose
    to Create new or reuse an existing resource group.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Location: The Azure data center that you wish to use for creating the virtual
    machine. Based on your location or your customer''s location, you may want to
    choose the closest location for performance and low latency. Click OK:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/27e7650d-cbcf-4e26-a217-0f2388817fff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Size section, choose the size that suits your needs. Azure lists recommended
    sizes in the blade, but if it doesn''t fit your requirements, click on View all
    and you will see a lot more configurations to choose from. You can also customize
    the supported hard disk type, minimum CPU, and memory by moving the slider bars
    against these parameters. Azure lists CPUs, memory, number of data disks, disk
    size, and other included features with an important parameter for the cost in
    local currency that you would need to shell out per month to use it, so use this
    wisely. Once you nail down on size, click Select:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c22daa02-636c-4517-a094-5f5170b3b2b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Settings section includes important yet auto-populated settings for the
    VM. Some important ones are discussed here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Availability set: Azure has an availability SLA of 99.95%. For high availability
    of the virtual machine, it is recommended to have redundancy and group two or
    more VMs in an availability set. The advantage is that in the event of planned
    or unplanned maintenance, at least one virtual machine will be available, meeting
    the Azure availability SLA of 99.95%. This setting cannot be changed after the
    virtual machine is created. In our case, we do not need this, so we will go with
    the default value of None.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use managed disk: This feature may not be available in all the regions. When
    this is set to Yes, Azure automatically manages the availability of the disks
    to provide data redundancy and fault tolerance.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Auto-shutdown: This feature is very important, at least financially. While
    your virtual machine is running, every minute, so keep it switched on only when
    you need it to keep your bills affordable. If you enable auto-shutdown, you can
    configure the VM to shut down daily at a specified time. For example, if the VM
    is being used only during office hours, it makes perfect sense to shut it down
    out of office hours and save on money. The Settings blade is shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e682a864-3ea1-492d-813c-18a4ad70fd16.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK. A Summary page with all the settings will be displayed in the Summary
    blade along with terms of use. If you agree to it, click Create and your virtual
    machine will start to be created. You will be taken to your Dashboard page, which
    will now has a new tile added with the name of your virtual machine and it will
    show the status of this resource. Within a matter of a few minutes your virtual
    machine will be provisioned. Once it is provisioned, you will get a notification
    stating that the virtual machine is successfully deployed and the dashboard tile
    of the virtual machine will display the state as Running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the tile of the virtual machine that we have created. It will take
    us to the Overview blade of the virtual machine, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1b9bc28c-7c77-4598-bdfe-a5af9dd0a248.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect: On clicking Connect, the **Remote Desktop Protocol** (RDP) file will
    be downloaded. Clicking on this downloaded RDP will enable remote desktop connection
    to the virtual machine, after providing the username and password that you used
    while creating the virtual machine.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Start: Starts the virtual machine, if it''s not started. The button will be
    enabled only if virtual machine is not running.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restart: Restarts the virtual machine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stop: Stops the virtual machine and deallocates it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Capture: This can be used to create a virtual machine image. We generally use
    it if we need a base image with additional configuration.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Move: To move the virtual machine to another resource group or subscription.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete: To delete the virtual machine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refresh: To refresh the status of the virtual machine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure has great documentation and cool training videos. They also have getting
    started guides and architecture recommendations to create and use Azure resources.
    You can find the documentation, the SDK, on the Azure site at [https://docs.microsoft.com/en-us/azure/](https://docs.microsoft.com/en-us/azure/).
    Training, webinars, events, code samples, videos, whitepapers, and case studies
    can be found at [https://azure.microsoft.com/en-us/resources/](https://azure.microsoft.com/en-us/resources/).
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have created our very first virtual machine on the cloud (Azure)
    and we can use it as well by clicking the remote desktop file that we downloaded.
    On clicking the `.rdp` file, it will prompt for the username and password in the
    standard way as any other remote desktop connection does. It's just that this
    virtual machine is hosted in the cloud, in Azure. Once you are logged in, you
    can use it the way you want. Remember, once the virtual machine is started, irrespective
    of whether you use it or not, it starts costing you. So, if you wish to be cost-efficient,
    ensure you turn it off when you are not using it and start it when you do. This
    concludes our discussion on virtual machines. Next, we will see how we can use
    PowerShell to automate resource creation and management in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Automating using PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn to automate resource creation and management
    in Azure using PowerShell. The user interface route to creating resources in Azure
    is very effective and easy. You may be wondering: Do you have to log in to the
    Azure portal to do every single thing? No. Everything that you can set and do
    in the Azure portal can also be automated by writing a program, or by writing
    a script. Also, being a developer, I prefer my code to do the work rather than
    going to the portal and doing operations manually. The code can also help us do
    the automation, so preventing the need for human intervention. There are SDKs
    available for many languages, from C#, to JavaScript, to Ruby, and so on. We will
    look at how to start and stop the virtual machine that we just created using PowerShell
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the URL at [https://azure.microsoft.com/en-us/downloads/](https://azure.microsoft.com/en-us/downloads/).
    This is the central place where you can get SDKs and command-line tools. On this
    page, we can see there are SDKs for .NET developers, Java developers, Node.js,
    and so on. If we scroll down a little, we can see command-line tools. Click on
    the Windows install link under PowerShell. It will download the installer executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a732706-62be-47ef-8a01-9a062c16a56c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the executable once the download is complete, following the installation
    instructions. Now open PowerShell ISE.  It should be installed already. If not,
    you can also use PowerShell by searching for Windows Powershell on your Windows
    10 machine. The first thing that we need to do is associate our PowerShell session
    with the Azure account. We can do that with the `Login-AzureRmAccount` command.
    PowerShell has tab completion, so after typing a few chars in your tab, it will
    try to complete the command. When you press Enter, you''ll be given an interface
    where you need to log in with your Microsoft account, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d712d0ec-d6cb-46e8-a63c-d0088effa737.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter your username and password. If you have two-factor authentication enabled,
    you may need to enter code as well. Type the `Get-AzureRmSubscription` command.
    This will show the list of all the subscriptions displaying the subscription name,
    subscription ID, tenant ID, and state; that is, whether it is enabled or inactive.
    The PowerShell cmdlet has `AzureRm` in the name, `Rm` being resource manager:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a6704a6-4af5-487e-a3bd-6178be363237.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we check `Get-AzureRmContext`.This cmdlet gives the current context,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/969135fa-2140-4eb9-a6af-d632669e87d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let us get a list of all the virtual machines that are in the subscription.
    We can get that with `Get-AzureRmVM`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2451c792-fcf8-4463-8d90-7b872d43e2f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To start the virtual machine, we will use the cmdlet `Start-AzureRmVM`, passing
    `Name` and `ResourceGroupName` as parameters, as shown in the following screenshot.
    The command will take a while to start the virtual machine, as can be seen from
    the `StartTime` and `EndTime` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3256711-a226-4a30-8d33-3158a1422b1f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To stop the virtual machine, we can use the cmdlet `Stop-AzureRmVM`, passing `Name` and  `ResourceGroupName` as
    parameters with the `Force` flag . The `Force` parameter is used just to make
    it non-interactive; otherwise, there will be a prompt for confirmation. Like the `Start-AzureRmVM`
    command, this command also takes a while, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9b180f1-72cc-41eb-9b98-9f62ec482fd7.png)'
  prefs: []
  type: TYPE_IMG
- en: We saw how easy it is to manage a virtual machine from PowerShell. Managing
    it from the portal is easier, as it is just a click of a button, but the intent
    here is to demonstrate the flexibility provided by Azure. We can also execute
    these PowerShell commands in the Cloud Shell that we saw earlier in this chapter;
    that is, we execute the commands directly in the shell opened in a browser on
    the Azure portal. This needs additional storage and hence cost. This is a very
    basic getting-started discussion on Azure automation using PowerShell. There is
    an ocean of information to be learned and grasped. An enthusiastic learner should
    go through the documentation to enhance their knowledge and get a handle on the
    subject from the official Microsoft Azure documentation at [https://docs.microsoft.com/en-us/powershell/azure/overview?view=azurermps-5.1.1](https://docs.microsoft.com/en-us/powershell/azure/overview?view=azurermps-5.1.1).
    There are books and sample modules as well, built by the Microsoft and the Azure
    community for a variety of scenarios, that the reader can leverage to learn, understand,
    and experiment. These can be seen at [https://docs.microsoft.com/en-us/azure/automation/automation-runbook-gallery](https://docs.microsoft.com/en-us/azure/automation/automation-runbook-gallery).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn to publish a web app in Azure, which is the most commonly
    used operation.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a web app in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn to publish a web app in Azure. As discussed in
    the previous two sections, we can create a resource from the Azure portal or we
    can write code on top of the SDK of our preferred language; for example, C#, PowerShell,
    and so on. As a developer working on Microsoft technologies, most of my productive
    work time is spent on Microsoft Visual Studio, so I would like to publish the
    web app  on Azure. This is the most common scenario that we perform as, after
    developing the web app, it should be hosted in the cloud for it to be available
    for a larger audience and more users. If we look at the Azure portal, we will
    see a service called App Services in the left panel or hub. Let's discuss App
    Services first.
  prefs: []
  type: TYPE_NORMAL
- en: Azure App Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure App Services is the solution if we want to build an application or an
    API that runs on a platform in the cloud. App Services supports a wide variety
    of technologies and application types from traditional web applications, such
    as a blog, or an e-commerce site, or a **content management system** (**CMS**).
    We can write the application in ASP.NET, Node.js or PHP, for that matter, many
    other frameworks and languages. If we just want to build a service/API and serve
    data, modern-day **Single-Page Applications** (**SPA**), or a logic app, App Services
    supports all of these. The process that we used to create the virtual machines
    in the last section on the Azure portal can be used to create an App Service as
    well. With virtual machines, we selected the operating system that we wanted.
    With App Services, we can go with a pre-configured App Service. For example, if
    we wanted to set up a WordPress blog, we could select the WordPress entry and
    click Create, and, with a little more configuration, we would have a WordPress
    site up and running. The name of the App Service that we want to create should
    be unique on [azurewebsites.net](https://azure.microsoft.com/en-us/), where the
    app will eventually be hosted. Next, we have to select a resource group. We can
    use an existing resource group or create a new resource group. Since it's a logical
    container for the resources, I prefer having separate resource groups, so once
    I am done with that resource, I can get rid of the entire resource in one go.
    The next thing we are asked by the Azure portal is to choose an App Service Plan.
    If we have to draw an analogy, think of it as something very similar to size when
    we created a virtual machine. The concept of the App Service Plan is very important. Every
    **web application** we will create will be placed into a **single App Service**
    dedicated to that application. And then every **App Service** maps to a single
    **App Service Plan**. A plan describes the performance characteristics of the
    machine that will host the App Service. Behind the scenes, the App Service Plan
    uses a virtual machine, but the virtual machine is abstracted away by Azure. We
    don't need to worry about managing the virtual machine as Azure takes care of
    it and abstracts this away from the end user. We can simply use the App Service
    Plan to describe how many CPUs  and how much memory we need; Azure takes care
    of the rest. One important point to note about the App Service Plan is that we
    can deploy multiple App Services into Azure and have them all mapped to the same
    App Service Plan. Select an existing App Service Plan or a new App Service Plan,
    based on your web app needs. If you need to serve a lot of users, if there are
    going to be a lot of users using your web app, then we can select a bigger service
    plan from the portal which can serve a higher number of requests, we can reuse
    an existing service plan (if we have one already), or we can use a free or less
    costly plan. After completing all the configurations, we are good to click on
    Create. Since all this is very similar to virtual machine creation, we are not
    delving much into the details. Within a few minutes, the App Service should be
    up and running. Now that we have our App Service created, we can publish our web
    app to this created App Service.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the web app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s publish an ASP.NET Core 2.0 web app in Azure using Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new ASP.NET Core 2.0 project in Visual Studio or use one of the existing
    applications that we have created thus far in the book. We will use one of the
    web apps that we developed in the book thus far for illustration purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click the project. On the context menu, click Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbc6894f-cb69-466a-af1f-c41809f882a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will display a nice-looking user interface, presenting us with three options.
    We can publish on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Microsoft Azure App Service: The container for the web app.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IIS, FTP: For deploying on IIS or FTP on a virtual machine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Folder: To publish the app in the local filesystem.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Import profile**:** To import a publish profile from the Azure portal and publish
    the app. We will see this later in the chapter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure Virtual Machines**:** To publish the app in a virtual machine
    hosted in Azure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will select the Microsoft Azure App Service. That gives us two options:
    either to select an existing App Service or create a new one. We can use either
    of the options. This is to illustrate that we can create a brand new App Service
    directly from within Visual Studio or use an existing App Service that you created. Click
    on the Publish button and we will get a series of dialogs. If you are not logged
    in with your Azure subscription credentials, you will need to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89a3b336-e3c4-42bf-a4d8-e1f57e494378.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will notice that on the top right, it shows my Microsoft account with which
    I am logged in. I need to enter an App Name that is unique. Subscription will
    be auto-populated. But, if you have multiple subscriptions, you must choose the
    subscription that you wish to use. Both Resource Group and App Service Plan can
    be either created brand new or chosen from an existing one. Here, in the screenshot,
    I have chosen an already existing one. Click Create. It will show a Summary screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0cd05a32-a119-4db3-aaa8-4f549f168cf8.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Publish and the app will be published on Azure. Visual Studio saves
    the publish settings file for the project. This can take a while the first time
    we publish because Visual Studio has to push up all the assemblies and artifacts
    that are needed for the App Service. But once it's published into Azure, and we
    just make a change to something like a Razor view file or script file and publish
    the next time, all Visual Studio needs to do is upload just the few changed files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3b4eca5-3a3e-4308-a9ce-c194d57a149e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After some time, upon successful publishing, the deployed application will
    open in the browser, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45ad37c1-0956-4103-be45-f2d6b76a3d78.png)'
  prefs: []
  type: TYPE_IMG
- en: Behind the scenes a publishing profile is created by Visual Studio, so let's
    have a quick look at it.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Upon publishing, Visual Studio will create a publishing profile. It''s basically
    a folder containing files created in the project, and can be seen in the Properties
    node of the project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fbf3c05-d031-4edb-84dc-ad36e152cb8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can have multiple profiles and these profiles will be stored in the `PublishProfiles`
    folder with the file extension `.pubxml`, as these are XML files. `.pubxml` files
    contain information such as the type of build ; for example, the release/debug
    build. It has URLs and a username that are part of the deployment credentials,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The file doesn''t contain a password. So it can be checked in the source control
    without worrying about compromising security. The deployment password by default
    is placed into a different file that is not part of the project but is in the
    same folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e448369-e9db-4a00-8762-452090dde00c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is the `pubxml.user` file. The file does not contain the password in plain
    text. It''s encrypted with a logged-in user-specific key, so if the file is copied
    and pasted and used by another user, the password will not decrypt correctly (as
    the key is user-specific, it will not match), hence the password will not work
    for them. So the obvious question that comes to mind is: What if I miss the password
    or delete the `pubxml.user` file and want to publish the app? We can do so by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Azure portal, and the Overview blade of the App Service that we wish
    to publish to. Click on Get publish profile to download the publish profile, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/85ec1a17-e4e9-433c-b9a6-b90f68139586.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Visual Studio, right-click on the project and click Publish; select Import
    profile and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9a11f743-c0bb-45ab-98ba-b16a43911ce2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Publish and the web app will be published.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's have a look at a few of the commonly used features of Azure that
    every .NET developer must be conversant with.
  prefs: []
  type: TYPE_NORMAL
- en: App Service features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we look at the App Service items that we created, we will notice a plethora
    of things. To describe them in detail would need a chapter of its own, so we will
    quickly look at few of the most common and important ones from a .NET developer
    perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1622f3d5-d39d-4d90-9b3a-dff0eebae4f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, there are subsections for DEPLOYMENT, SETTINGS, APP SERVICE
    PLAN, DEVELOPMENT TOOLS, MOBILE, API, MONITORING, SUPPORT + TROUBLESHOOTING. Let
    us discuss each of these sections so that we know everything Azure has to offer
    and we can then leverage it as and when needed. The most basic and most frequently
    used ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Overview: Gives a complete overall picture of the App Service. We can browse
    the service, and start/stop/restart/delete the service from here. We can also
    download the publish profile of the service and reset the publish profile to invalidate
    previously downloaded publish profiles. The charts display the statistics of the
    App Service, such as the number of HTTP 5xx or server errors with the timeline,
    data in and out, number of requests, and average response time to serve a request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagnose and solve problems: This provides an easy way to diagnose and solve
    problems with web apps. There are pre-defined categories of problem available
    which you can select and get a diagnosis using the Azure Health Checkup web app,
    which gives an in-depth overview of the app health based on requests, CPU usage,
    and memory usage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DEPLOYMENT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this category, the options are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Quickstart: Provides guidance to get you up and running with app deployment.
    Quickstart has handy guidance for ASP.NET, Java, Node.js, PHP, and Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment slots: Deployment slots let us deploy different versions of web apps
    to different URLs. We can test a certain version and then swap the content and
    configuration between slots. Deployment slots enable us to validate that the app
    is working properly in Azure, before we promote the app into production. This
    also eliminates downtime, and gives the new deployment a chance to warm up before
    customers use it.  We can have more than one slot with the right App Service Plan.
    For example, we might want one slot for testing, one for staging, and one for
    production. And once it has been validated that the deployment into staging is
    working, we can swap the slots; that is, we can take what is tested in the staging
    slot, and with a click of a button (or a PowerShell script), we can make the staging
    deployment into the new production. In the worst case, if something goes wrong
    it's very easy to swap these back and take the last working production deployment
    and put it into production again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deployment options: To configure the source control of your choice for deployment.
    **Visual Studio Team Services** (**VSTS**), OneDrive, Git, Bitbucket, and Dropbox
    are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Continuous Delivery: This is currently in preview at the time of writing this
    chapter. Continuous delivery in Visual Studio Team Services simplifies setting
    up a robust deployment pipeline. The pipeline builds, runs load tests, and deploys
    to the staging slot and then to production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SETTINGS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here the options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Application settings: The place where we can define and overwrite application
    settings and connection strings. We will see this in action in the next chapter,
    when we build our movie booking web app. This is also the place where we will
    enable WebSockets for our SignalR-based applications and convert the application
    to always-on; otherwise, the web application gets unloaded if it remains idle.
    Remote debugging is also enabled and disabled from this blade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication / Authorization**: To enable/disable authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backups**: Configures backups to create restorable archive copies of web
    app content, configurations, and databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom domains**: This is the place to configure and manage custom hostnames
    assigned to the web app. For example, my blog site is `rishabhverma.net`. If I
    want to link this domain with the web app, this is where I need to make the configuration.
    I can also enable an HTTPS-only flag here, so that all the traffic for HTTP is
    redirected to HTTPS, making my app more secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale up**: To serve the increased/decreased load or demands of the web app,
    we need a higher/lower configuration of the App Service Plan and this is the blade
    to use for this purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scale out: In this blade, we can enable autoscaling, which will automatically
    scale the app, if the load increases based on the configured rule. We can also
    choose the instance count of the machines hosting the App Service in this blade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automation script: In this blade, we can automate deploying resources with
    Azure Resource Manager templates in a single, coordinated operation. We can also
    define resources and configurable input parameters and deploy with script or code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have discussed the App Service Plan in some length, so as an exercise readers
    are expected to understand and learn the details of the App Service Plan, as that
    is directly linked to the performance and cost of the web app that you host in
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: DEVELOPMENT TOOLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at the options:'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Tools: Advanced Tools (Kudu) provides a collection of developer-oriented
    tools and extensibility points for the App Service. This will be one of the  most
    frequently used blades, once we deploy our app in Azure. I would highly encourage
    readers to read the Kudu wiki at [https://github.com/projectkudu/kudu/wiki](https://github.com/projectkudu/kudu/wiki) as
    it gives detailed information about Kudu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance test**: In this blade, we can perform the load testing of our
    App Service by simulating the virtual load of any number of users and the duration
    that we want to test against by specifying the number of users and test duration.
    We can specify either an API endpoint URL or a Visual Studio Web Test to run for
    performance testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensions:  Extensions add functionality to the App Service, such as the image
    optimizer for an image upload application, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API definition**: API definition lets us configure the location of the Swagger
    2.0 metadata describing the API exposed through the App Service. This makes it
    easy for others to discover and consume the API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CORS**: **Cross-Origin Resource Sharing** (**CORS**) allows JavaScript code
    running in a browser on an external host to interact with the App Service backend.
    We can specify the origins that should be allowed to make cross-origin calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MONITORING
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at the available options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application Insights: **It helps us detect and diagnose quality issues in
    web apps and web services, and helps us understand what users are actually using
    in the App Service. This is of tremendous importance to analyze the performance
    and error characteristics of the App Service. We will make use of application
    insights while building our movie booking app in the next chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alerts**: This is one of the superb features of Azure. If we want to know
    when our web app is performing poorly or there is a high CPU or memory usage due
    to load, we can configure rule-based email alerts in this blade and we will be
    notified by email if the rule criteria are met. Then with the help of other diagnostics
    we can figure out and fix the issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diagnostic logs**: In this blade, we can enable/disable application logging
    in a filesystem or blob. We can also enable/disable detailed error messages and
    failed request tracing. One thing to notice here is that filesystem logging is
    automatically disabled after 12 hours to keep the logs from bloating the filesystem,
    whereas blob logging will keep on going indefinitely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process explorer**: To monitor/kill the processes running the App Service
    and monitor their memory and CPU usages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SUPPORT + TROUBLESHOOTING
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource health: **Resource health watches resource and tells us if they''re
    running as expected and if not, what actions can be taken.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Service Advisor: **App Service Advisor provides insights for improving
    the app experience on the App Service platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio provides very rich extensibility support. There are numerous
    extensions for Azure as well. One great extension for Azure is Cloud Explorer,
    which should already be available with Visual Studio 2017\. If not, I highly recommend
    you try it out. To search, download, and install any available Visual Studio extensions,
    click **Tools** | **Extensions and Updates**. Then search `Cloud Explorer` after
    clicking **Online** on the left panel of the window. Cloud explorer can be opened
    by clicking on View | Cloud Explorer**.** Cloud Explorer can be thought of as
    a minified version of the Azure management portal, which can be used from within
    Visual Studio IDE. We can start/stop a VM or App Service, profile the App Service, 
    download the publish profile and logs, attach the debugger to Azure, and much
    more from this extension. The following screenshot displays the Cloud Explorer
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0a9515d-5d0f-4d1c-9907-b9cf33fba0fa.png)'
  prefs: []
  type: TYPE_IMG
- en: And this concludes our discussion of Azure. Next we will discuss cloud storage
    and Azure functions that provide cheap serverless computing.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are all aware of SQL Server (if not, do not worry). Azure SQL is just SQL
    Server deployed on Azure. We will not be discussing Azure SQL in this section
    as we will be using Azure SQL in the next chapter and hence will be discussing
    it at length then. We will check out the storage accounts. Storage accounts can
    store hundreds of terabytes (roughly speaking 1 Terabyte = 1,000 Gigabytes) of
    data. We will discuss how to use Azure storage as a place to keep uploaded files
    for our web application and how we can enable users to download files from storage by
    creating and handing out what's known as a **shared access signature** (**SAS**).
    So, lets get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Azure portal, click on New and select Storage and then click Storage
    account - blob, file, table, queue, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ceca2877-708d-4b32-b183-0966f3bdfa87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also a link to a Quickstart tutorial, which I would highly recommend
    as it has great getting-started videos and tutorials from the leading tech evangelists
    to get you up and running with Azure storage. On clicking Storage account - blob,
    file, table, queue, a new blade named Create storage account will display, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e1926e2-eb9c-4ae4-9010-5378d1bbff13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the blade, enter the required fields:'
  prefs: []
  type: TYPE_NORMAL
- en: Name**:** This should comprise 3-24 characters in lowercase or numeric text
    that should be unique across all Azure storage, as it is exposed on .core.windows.net.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment model: This should be kept as Resource manager.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account kind: This can be a general storage V1 or V2 or dedicated blob storage.
    We will keep it as general storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Performance: This can be chosen as Premium or Standard as required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure transfer required: This should be Enabled for any serious web app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource group: This can be created new or reused.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Location: Select the location which is nearest to your business requirement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can choose to pin the storage account to the dashboard by checking the
    Pin to dashboard checkbox. Click Create. After a while, the storage account will
    be created. Once the storage account is created, click on the pinned tile on the
    dashboard and it will take you to the storage account overview blade, which summarizes
    the storage account details. The important thing to note is in the middle of the
    blade and lists the different types of storage, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97edaf95-ccb0-4cab-a4e8-481962c158c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So we can use four types of storage with the storage account. Let''s briefly
    discuss these:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blob storage**: Blob is an abbreviation of **Binary large object**. We can
    store any type of file in blob storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table storage**: Table storage is a no-SQL database and is similar to a document
    DB but instead of storing documents, table storage is optimized for storing key
    value pairs. Table storage is really cheap and it''s a good place to store large
    volumes of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File storage**: File storage allows us to set up **Server Message Block** (SMB
    3.0 protocol) file shares in the cloud. This storage is preferred generally when we
    have an existing application that needs to be migrated to Azure and the application
    already uses file shares.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Queue storage**: Queues allow us to store and retrieve messages. And they
    are an important technology to have if we want to build reliable high-scale websites
    because they allow us to put a buffer between an application and the backend services
    that it uses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blobs and queues are more frequently used and we shall be using blob storage
    in our next chapter when we develop our movie booking site, so we will conclude
    our brief discussion of storage. How to upload and download data from storage
    using an SAS token is something we will see in the next chapter in detail. This
    brings us to the end of this discussion and chapter on cloud introduction. We
    should now be ready to develop and deploy in Azure, which we will do in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what the cloud is and why the modern-day developer
    should be conversant with cloud technologies. We also got started with Azure,
    and made ourselves aware of the Azure management portal. We learned to create
    a virtual machine from the portal and saw that this could be automated using PowerShell
    or other languages by using the SDK. We then managed a virtual machine using PowerShell
    and saw how to start and stop it. We also learned how to create a web app in Azure
    from Visual Studio 2017 itself and learned about publish profiles. We took an
    overview of App Services, and a quick look at Azure storage. Now that we have
    a grasp of the fundamentals, we will develop a movie booking application and deploy
    it in Azure in the next chapter.
  prefs: []
  type: TYPE_NORMAL
