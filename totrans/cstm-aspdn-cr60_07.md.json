["```cs\ndotnet new mvc -n HostedServiceSample -o HostedServiceSample\n```", "```cs\ncd HostedServiceSample\ncode .\n```", "```cs\npublic class SampleHostedService : IHostedService\n{\n    public Task StartAsync(CancellationToken \n      cancellationToken)\n    {\n    }\n    public Task StopAsync(CancellationToken \n     cancellationToken)\n    {\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<IHostedService, SampleHostedService>();\n```", "```cs\n    namespace HostedServiceSample;\n    public class SampleHostedService : IHostedService\n    {\n        private readonly ILogger<SampleHostedService> \n          logger;\n        // inject a logger\n        public \n          SampleHostedService(ILogger<SampleHostedService> \n            logger)\n        {\n            this.logger = logger;\n        }\n        public Task StartAsync(CancellationToken \n          cancellationToken)\n        {\n        }\n        public Task StopAsync(CancellationToken \n          cancellationToken)\n        {\n        }\n    }\n    ```", "```cs\n    public Task StopAsync(CancellationToken \n      cancellationToken)\n    {\n        logger.LogInformation(\"Hosted service stopping\");\n        return Task.CompletedTask;\n    }\n    ```", "```cs\n    public Task StartAsync(CancellationToken \n      cancellationToken)\n    {\n        logger.LogInformation(\"Hosted service starting\");\n        return Task.Factory.StartNew(async () =>\n        {\n            // loop until a cancelation is requested\n            while \n             (!cancellationToken.IsCancellationRequested)\n            {\n                logger.LogInformation($\"Hosted service \n                  executing - {DateTime.Now}\");\n                try\n                {\n                    // wait for 2 seconds\n                    await \n                     Task.Delay(TimeSpan.FromSeconds(2), \n                       cancellationToken);\n                }\n                catch (OperationCanceledException) { }\n            }\n        }, cancellationToken);\n    }\n    ```", "```cs\n    dotnet run\n    ```", "```cs\n    namespace HostedServiceSample;\n    public class SampleBackgroundService : \n      BackgroundService\n    {\n        private readonly ILogger<SampleHostedService> \n          logger;\n        // inject a logger\n        public SampleBackgroundService(\n            ILogger<SampleHostedService> logger)\n        {\n            this.logger = logger;\n        }\n    }\n    ```", "```cs\n    public override async Task StopAsync(CancellationToken \n      cancellationToken)\n    {\n        logger.LogInformation(\"Background service \n          stopping\");\n        await Task.CompletedTask;\n    }\n    ```", "```cs\n    protected override async Task \n      ExecuteAsync(CancellationToken cancellationToken)\n    {\n        logger.LogInformation(\"Background service \n          starting\");\n        await Task.Factory.StartNew(async () =>\n        {\n            while \n              (!cancellationToken.IsCancellationRequested)\n            {\n                logger.LogInformation($\"Background service \n                  executing - {DateTime.Now}\");\n                try\n                {\n                    await \n                      Task.Delay(TimeSpan.FromSeconds(2), \n                        cancellationToken);\n                }\n                catch (OperationCanceledException) {}\n            }\n        }, cancellationToken);\n    }\n    ```", "```cs\nbuilder.Services.AddHostedService<SampleBackgroundService>();\n```", "```cs\ndotnet run\n```", "```cs\ndotnet new worker -n BackgroundServiceSample -o BackgroundServiceSample\n```", "```cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n    public static IHostBuilder CreateHostBuilder(string[] \n      args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureServices((hostContext, services) =>\n            {\n                services.AddHostedService<Worker>();\n            });\n}\n```", "```cs\nusing BackgroundServiceSample;\nIHost host = Host.CreateDefaultBuilder(args)\n    .ConfigureServices(services =>\n    {\n        services.AddHostedService<Worker>();\n    })\n    .Build();\nawait host.RunAsync();\n```"]