- en: Mock Test 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟测试 1
- en: 'We have a class called `LogException`. The class implements a `CaptureException`
    method using the following code segment: `public static void CaptureException(Exception
    ex)`. Pick one of the following syntaxes to make sure all exceptions in the class
    are captured and rethrow the original exception, including the stack:'
  id: totrans-1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个名为 `LogException` 的类。该类使用以下代码段实现 `CaptureException` 方法：`public static void
    CaptureException(Exception ex)`。从以下语法中选择一个，以确保捕获类中的所有异常并重新抛出原始异常，包括堆栈：
- en: '`catch (Exception ex)`'
  id: totrans-2
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`catch (Exception ex)`'
- en: '`{`'
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`LogException.CaptureException(ex);`'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LogException.CaptureException(ex);`'
- en: '`throw;`'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`throw;`'
- en: '`}`'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`catch (Exception ex)`'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`catch (Exception ex)`'
- en: '`{`'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`LogException.CaptureException(ex);`'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LogException.CaptureException(ex);`'
- en: '`throw ex;`'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`throw ex;`'
- en: '`}`'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`catch`'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`catch`'
- en: '`{`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`LogException(new Exception());`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LogException(new Exception());`'
- en: '`}`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`catch`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`catch`'
- en: '`{`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`var ex = new Exception();`'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`var ex = new Exception();`'
- en: '`throw ex;`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`throw ex;`'
- en: '`}`'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'You are creating a class named `Store`, which should have a `Store Type` member
    that meets the following requirements:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你正在创建一个名为 `Store` 的类，该类应有一个满足以下要求的 `Store Type` 成员：
- en: The member must be accessible publicly.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该成员必须是公开可访问的。
- en: The member must only acquire a restricted set of values.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该成员必须仅获取一组受限的值。
- en: While setting the value, the member must ensure that it validates the input
    set in the member.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置值时，该成员必须确保它验证成员中设置的输入。
- en: In which form should you implement the score member?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现分数成员时应采用哪种形式？
- en: '`public string storeType;`'
  id: totrans-26
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public string storeType;`'
- en: '`protected String StoreType` `{` `get{}` `set{}` `}`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`protected String StoreType` `{` `get{}` `set{}` `}`'
- en: '`private enum StoreType { Department, Store, Warehouse}`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`private enum StoreType { Department, Store, Warehouse}`'
- en: '`public StoreType StoreTypeProperty`'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public StoreType StoreTypeProperty`'
- en: '`{`'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`get{}`'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get{}`'
- en: '`set{}`'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`set{}`'
- en: '`}`'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`private enum StoreType { Department, Store, Warehouse}`'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`private enum StoreType { Department, Store, Warehouse}`'
- en: '`private StoreType StoreTypeProperty`'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`private StoreType StoreTypeProperty`'
- en: '`{`'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`get{}`'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get{}`'
- en: '`set{}`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`set{}`'
- en: '`` `}` ``'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`` `}` ``'
- en: 'Write an extension method for a string; it should have an `IsEmail` method
    . The method should check whether the string is a valid email. Select the syntax
    and map it to the places where it should be placed:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为字符串编写一个扩展方法；它应该有一个 `IsEmail` 方法。该方法应检查字符串是否为有效的电子邮件。选择语法并将其映射到应放置的位置：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`protected static class StringExtensions`'
  id: totrans-42
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`protected static class StringExtensions`'
- en: '`public static class StringExtensions`'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static class StringExtensions`'
- en: '`public static bool IsEmail(this String str)`'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static bool IsEmail(this String str)`'
- en: '`public static bool IsEmail(String str)`'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static bool IsEmail(String str)`'
- en: '`public class StringExtensions`'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class StringExtensions`'
- en: You need to write an application in which we ensure that the garbage collector
    does not release an object's resources until the process completes. Which of the
    following syntaxes would you use?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要编写一个应用程序，确保垃圾回收器在进程完成之前不释放对象的资源。以下哪种语法你会使用？
- en: '`WaitForFullGCComplete()`'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`WaitForFullGCComplete()`'
- en: '`RemoveMemoryPressure()`'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RemoveMemoryPressure()`'
- en: '`SuppressFinalize()`'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SuppressFinalize()`'
- en: '`collect()`'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`collect()`'
- en: 'For a list collection, someone has written the following code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于列表集合，有人编写了以下代码：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Which of the following code segments is the correct representation of the corresponding
    Lambda expression?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个代码段是相应 Lambda 表达式的正确表示？
- en: '`var findState = states.First(x => x == stateName);`'
  id: totrans-55
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var findState = states.First(x => x == stateName);`'
- en: '`var findState = states.Where(x => x == stateName);`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var findState = states.Where(x => x == stateName);`'
- en: '`var findState = states.Exists(x => x.Equals(stateName));`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var findState = states.Exists(x => x.Equals(stateName));`'
- en: '`` `var findState = states.Where(x => x.Equals(stateName));` ``'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`` `var findState = states.Where(x => x.Equals(stateName));` ``'
- en: Which of the following collection objects would fulfill the following requirements?
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个集合对象能满足以下要求？
- en: It must internally store a key and value pair for each item.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须内部存储每个项目的键值对。
- en: It must allow us to iterate over the collection in order of the key.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须允许我们按键的顺序遍历集合。
- en: It allows us to access the objects using the key.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们使用键访问对象。
- en: 'The collection objects are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 收集对象如下：
- en: Dictionary
  id: totrans-64
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字典
- en: Stack
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 栈
- en: List
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表
- en: SortedList
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排序列表
- en: 'You are creating an application that has a `Student` class. The application
    must have a `Save` method that should satisfy the following:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你正在创建一个包含 `Student` 类的应用程序。该应用程序必须有一个 `Save` 方法，该方法应满足以下要求：
- en: It must be strongly typed.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须是强类型的。
- en: The method must only accept types inherited from the `Animal` class that use
    a constructor that accepts no parameters.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法必须仅接受从 `Animal` 类继承且使用不接受任何参数的构造函数的类型。
- en: 'The options are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 选项如下：
- en: '`public static void Save(Student target)`'
  id: totrans-72
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static void Save(Student target)`'
- en: '`{`'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`}`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public static void Save<T>(T target) where T : Student , new()`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static void Save<T>(T target) where T : Student , new()`'
- en: '`{`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`}`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public static void Save<T>(T target) where T : new(), Student`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static void Save<T>(T target) where T : new(), Student`'
- en: '`{`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`}`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public static void Save<T>(T target) where T : Student`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static void Save<T>(T target) where T : Student`'
- en: '`{`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`` `}` ``'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`` `}` ``'
- en: 'We are writing an application that is receives a JSON input from another application
    in the following format:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在编写一个应用程序，它从另一个应用程序接收以下格式的 JSON 输入：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have written the following code in our application to process the input.
    What would be the correct syntax in the `ConvertFromJSON` method to ensure that
    we convert the input to its equivalent student format?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的应用程序中编写了以下代码来处理输入。在 `ConvertFromJSON` 方法中，为了确保将输入转换为等效的学生格式，正确的语法是什么？
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The options are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 选项如下：
- en: '`Return ser.Desenalize (json, typeof(Student));`'
  id: totrans-89
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Return ser.Desenalize (json, typeof(Student));`'
- en: '`Return ser.ConvertToType<Student>(json);`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Return ser.ConvertToType<Student>(json);`'
- en: '`Return ser.Deserialize<Student>(json);`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Return ser.Deserialize<Student>(json);`'
- en: '`Return ser.ConvertToType (json, typeof (Student));`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Return ser.ConvertToType (json, typeof (Student));`'
- en: You have an array of integers with `studentId` values in them. Which code logic
    would you use to do the following?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您有一个包含 `studentId` 值的整数数组。您将使用哪种代码逻辑来完成以下操作？
- en: Only select the unique `studentID`
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅选择唯一的 `studentID`
- en: Remove a particular `studentID` from the array
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数组中删除特定的 `studentID`
- en: Sort the result in descending order into another array
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将结果按降序排序到另一个数组中
- en: 'Your options are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您的选项如下：
- en: '`int[] filteredStudentIDs = studentIDs.Distinct().Where(value => value != studentIDToRemove).OrderByDescending(x
    => x).ToArray();`'
  id: totrans-98
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int[] filteredStudentIDs = studentIDs.Distinct().Where(value => value != studentIDToRemove).OrderByDescending(x
    => x).ToArray();`'
- en: '`int[] filteredStudentIDs = studentIDs.Where(value => value != studentIDToRemove).OrderBy(x
    => x).ToArray();`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int[] filteredStudentIDs = studentIDs.Where(value => value != studentIDToRemove).OrderBy(x
    => x).ToArray();`'
- en: '`int[] filteredStudentIDs = studentIDs.Where(value => value != studentIDToRemove).OrderByDescending(x
    => x).ToArray();`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int[] filteredStudentIDs = studentIDs.Where(value => value != studentIDToRemove).OrderByDescending(x
    => x).ToArray();`'
- en: '`int[] filteredStudentIDs = studentIDs.Distinct().OrderByDescending(x => x).ToArray();`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int[] filteredStudentIDs = studentIDs.Distinct().OrderByDescending(x => x).ToArray();`'
- en: 'Identify the missing line in the following line of code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码行中识别缺失的行：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`while (reader.Read())`'
  id: totrans-104
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while (reader.Read())`'
- en: '`while (reader.NextResult())`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while (reader.NextResult())`'
- en: '`while (reader.Being())`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while (reader.Being())`'
- en: '`` `while (reader.Exists())` ``'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`` `while (reader.Exists())` ``'
- en: 'Write the following `StudentCollection` class in such a way that you can process
    each object in the collection using a `foreach` loop:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以便使用 `foreach` 循环处理集合中的每个对象，请按以下方式编写 `StudentCollection` 类：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`: IComparable`'
  id: totrans-110
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`: IComparable`'
- en: '`: IEnumerable`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`: IEnumerable`'
- en: '`: IDisposable`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`: IDisposable`'
- en: '`public void Dispose()`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public void Dispose()`'
- en: '`return students.GetEnumerator();`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`return students.GetEnumerator();`'
- en: '`return obj == null ? 1: students.Length;`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`return obj == null ? 1: students.Length;`'
- en: '`` `public IEnumerator GetEnumerator()` ``'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`` `public IEnumerator GetEnumerator()` ``'
- en: Which of the following lines of code would you use if you are writing code to
    open a file in line with the following conditions?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在编写代码以按照以下条件打开文件，您会使用以下哪一行代码？
- en: No changes should be made to the file.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不应更改文件。
- en: The application should throw an error if the file does not exist.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件不存在，应用程序应抛出错误。
- en: No other processes should be allowed to update this file while the operation
    is in progress.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在操作进行时，不允许其他进程更新此文件。
- en: '`var fs = File.Open(Filename, FileMode.OpenOrCreate, FileAccess.Read, FileShare.ReadWrite);`'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var fs = File.Open(Filename, FileMode.OpenOrCreate, FileAccess.Read, FileShare.ReadWrite);`'
- en: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);`'
- en: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.Read, FileShare.Read);`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.Read, FileShare.Read);`'
- en: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.ReadWrite, FileShare.Read);`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.ReadWrite, FileShare.Read);`'
- en: 'Which of the following lines of code would you use while converting a float
    to an int? You need to ensure that the conversion will not throw the `Float floatPercentage;`
    exception:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将浮点数转换为整数时，您会使用以下哪一行代码？您需要确保转换不会抛出 `Float floatPercentage;` 异常：
- en: '`int roundPercentage = (int)floatPercentage;`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = (int)floatPercentage;`'
- en: '`int roundPercentage = (int)(double)floatPercentage;`'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = (int)(double)floatPercentage;`'
- en: '`int roundPercentage = floatPercentage;`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = floatPercentage;`'
- en: '`int roundPercentage = (int)(float)floatPercentage;`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = (int)(float)floatPercentage;`'
- en: 'Which of the following lines of code would you use while converting a float
    to an int? You need to ensure that the conversion will not throw the `Float floatPercentage;`
    exception:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪行代码用于将浮点数转换为整数？你需要确保转换不会抛出`Float floatPercentage;`异常：
- en: '`int roundPercentage = (int)floatPercentage;`'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = (int)floatPercentage;`'
- en: '`int roundPercentage = (int)(double)floatPercentage;`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = (int)(double)floatPercentage;`'
- en: '`int roundPercentage = floatPercentage;`'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = floatPercentage;`'
- en: '`int roundPercentage = (int)(float)floatPercentage;`'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int roundPercentage = (int)(float)floatPercentage;`'
- en: We are creating a `Student` class with a `StudentType` attribute. We need to
    ensure that the `StudentType` property can only be accessed within the `Student`
    class or by a class inheriting from the the `Student` class. Which of the following
    implementations would you use?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建一个具有`StudentType`属性的`Student`类。我们需要确保`StudentType`属性只能在`Student`类内部或由继承自`Student`类的类访问。以下哪种实现你会使用？
- en: '`public class Student`'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class Student`'
- en: '`{`'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`protected string StudentType`'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`protected string StudentType`'
- en: '`{`'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`get;`'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get;`'
- en: '`set;`'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`set;`'
- en: '`}`'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public class Student`'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class Student`'
- en: '`{`'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`internal string StudentType`'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`internal string StudentType`'
- en: '`{`'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`get;`'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get;`'
- en: '`set;`'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`set;`'
- en: '`}`'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public class Student`'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class Student`'
- en: '`{`'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`private string StudentType`'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`private string StudentType`'
- en: '`{`'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`get;`'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get;`'
- en: '`set;`'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`set;`'
- en: '`}`'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`public class Student`'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class Student`'
- en: '`{`'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`public string StudentType`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public string StudentType`'
- en: '`{`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`get;`'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`get;`'
- en: '`set;`'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`set;`'
- en: '`}`'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'We are writing an application in which we have declared a `Car` class that
    has two attributes, `CarCategory` and `CarName`. In the execution, we need to
    convert the class to its JSON string representation. Refer to the following code
    snippet:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在编写一个应用程序，其中我们声明了一个具有两个属性`CarCategory`和`CarName`的`Car`类。在执行过程中，我们需要将类转换为它的JSON字符串表示。参考以下代码片段：
- en: '[PRE6]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Which of the following lines of code would you use to get the correct structure
    for the JSON representation?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪行代码用于获取JSON表示的正确结构？
- en: '`new DataContractSerializer(typeof(Car))`'
  id: totrans-171
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`new DataContractSerializer(typeof(Car))`'
- en: '`new XmlSerializer(typeof(Car))`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`new XmlSerializer(typeof(Car))`'
- en: '`new NetDataContractSerializer()`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`new NetDataContractSerializer()`'
- en: '`new DataContractJsonSerializer(typeof(Car))`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`new DataContractJsonSerializer(typeof(Car))`'
- en: 'We are writing an application for a bank in which we use the following code
    to find out the interest amount for a specified number of months, and the initial
    amount deposited in the bank:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在为一家银行编写一个应用程序，其中我们使用以下代码来计算指定月份的利息金额以及银行初始存入的金额：
- en: '[PRE7]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We've learned that the application is calculating incorrect interest amounts
    if the number of months is 6\. If the number of months is 6, the interest rate
    should be 6.2%. Which of the lines of code would you change?
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，如果月份是6，应用程序计算出的利息金额是不正确的。如果月份是6，利率应该是6.2%。以下哪行代码会进行更改？
- en: Replace line 7 with `interest = 0.062m`
  id: totrans-178
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第7行替换为`interest = 0.062m`
- en: Replace line 11 with `interest = 0.06m`
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第11行替换为`interest = 0.06m`
- en: Replace line 4 with `decimal interest = 0.062m`
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第4行替换为`decimal interest = 0.062m`
- en: Replace line 15 with `interest = 0.062m`
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第15行替换为`interest = 0.062m`
- en: 'We are writing an application in which we are making asynchronous calls to
    three different services, as described in the following example:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在编写一个应用程序，其中我们正在对三个不同的服务进行异步调用，如下例所示：
- en: '[PRE8]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Which of the following lines would you insert if you need to wait for the results
    from all three preceding services before control can be transferred back to the
    calling function?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制权可以返回到调用函数之前，你需要等待从前面三个服务获取结果，以下哪一行代码你会插入？
- en: '`await Task.Yield();`'
  id: totrans-185
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`await Task.Yield();`'
- en: '`await Task.WhenAll(task1, task2, task3);`'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`await Task.WhenAll(task1, task2, task3);`'
- en: '`await Task.WaitForCompletion(task1, task2, task3);`'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`await Task.WaitForCompletion(task1, task2, task3);`'
- en: '`await Task.WaitAll();`'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`await Task.WaitAll();`'
- en: We are writing an application in which we are executing multiple operations,
    such as assigning, modifying, and replacing on string variables. Which of the
    following keywords would you use to make sure the operations consume as little
    memory as possible?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在编写一个应用程序，其中我们正在执行多个操作，如字符串变量的赋值、修改和替换。以下哪个关键字会用来确保操作尽可能少地消耗内存？
- en: '`String.Concat`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`String.Concat`'
- en: '`+ operator`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`+ operator`'
- en: '`StringBuilder`'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`StringBuilder`'
- en: '`` `String.Add` ``'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`` `String.Add` ``'
- en: We are writing an application in which we are maintaining students scores in
    a list, as shown in the following code block. We need to write a statement to
    filter out scores greater that 75\. Which of the statements would you use?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在编写一个应用程序，其中我们在列表中维护学生的分数，如下面的代码块所示。我们需要编写一个语句来过滤出大于75分的分数。您会使用哪个语句？
- en: '[PRE9]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`var filteredScores = scores.Skip(75);`'
  id: totrans-196
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var filteredScores = scores.Skip(75);`'
- en: '`var filteredScores = scores.Where(i => i > 75);`'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var filteredScores = scores.Where(i => i > 75);`'
- en: '`var filteredScores = scores.Take(75);`'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var filteredScores = scores.Take(75);`'
- en: '`var filteredScores = from i in scores`'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`var filteredScores = from i in scores`'
- en: '`groupby i into tempList`'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`groupby i into tempList`'
- en: '`where tempList.Key > 75`'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`where tempList.Key > 75`'
- en: '`select i;`'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`select i;`'
