- en: Chapter 11. Improving Performance of an ASP.NET Core Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 提高ASP.NET Core应用程序的性能
- en: When you think about frequently accessed applications (the ones that we use
    daily), such as Google, YouTube, and Facebook, it is the performance of these
    applications that distinguishes them from similar applications. Think for a moment.
    If Google took more than 10 seconds to provide search results, most people would
    switch over to Bing or some other search engine. So, performance is one of the
    primary factors in an application's success.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑经常访问的应用程序（我们每天使用的那些），例如Google、YouTube和Facebook时，正是这些应用程序的性能使它们与类似的应用程序区分开来。思考一下。如果Google在提供搜索结果时需要超过10秒，大多数人会转而使用Bing或其他搜索引擎。因此，性能是应用程序成功的一个主要因素。
- en: 'In this chapter, we are going to learn about the following things:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: The approach to analyzing the performance issues of an application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析应用程序性能问题的方法
- en: How to make use of browser developer tools to analyze the performance of an
    application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何利用浏览器开发者工具分析应用程序的性能
- en: Performance improvements in the UI layer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面层性能改进
- en: Performance improvements in the web/application layer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应用层性能改进
- en: Performance improvements in the database layer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库层性能改进
- en: Normally, when people talk about the performance of an application, they think
    about the application's speed. Though speed contributes significantly to the performance
    of the application, we also need to consider maintainability, scalability, and
    reusability of the application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当人们谈论应用程序的性能时，他们会想到应用程序的速度。虽然速度对应用程序的性能有重大贡献，但我们还需要考虑应用程序的可维护性、可扩展性和可重用性。
- en: A well-maintained code will be clear and have less technical debt, which in
    turn will increase the productivity of the developer. When we write code based
    on service-oriented architecture or micro services, our code will be more usable
    by others. This would also make our code scalable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一份维护良好的代码将更加清晰，并且技术债务较少，这反过来又会提高开发者的生产力。当我们基于面向服务的架构或微服务编写代码时，我们的代码将更容易被他人使用。这也会使我们的代码更具可扩展性。
- en: Normally, people think about the performance of the application when they have
    almost completed the development of the application and pilot users are complaining
    about the speed of the application. The right time to discuss performance is before
    the development of the application; we need to work with the product owners, business
    analysts, and actual users in order to arrive at a standard of an acceptable level
    of performance for the application. Then we design and code with this expected
    level of performance as our goal.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当应用程序的开发几乎完成，试点用户对应用程序的速度表示不满时，人们才会考虑应用程序的性能。讨论性能的正确时机是在应用程序开发之前；我们需要与产品所有者、业务分析师和实际用户合作，以确定应用程序可接受性能水平的标准。然后我们以这个预期的性能水平为目标进行设计和编码。
- en: This also depends on the domain of the application. For example, a mission-critical
    healthcare application would demand great performance (they might expect responses
    in less than a second), whereas the performance of a back-office application may
    not demand so much. So, it is critical to understand the domain in which we are
    working.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这也取决于应用程序的领域。例如，一个关键任务型医疗保健应用程序会要求极高的性能（他们可能期望在不到一秒内得到响应），而后台应用程序的性能可能不需要那么高。因此，了解我们正在工作的领域至关重要。
- en: If you have been asked to tune the performance of an existing application, it
    is also important to understand the existing architecture of the application.
    With ASP.NET Core, you can build a simple CRUD application to a mission-critical
    application serving millions of users across the world. A large application might
    have many other components, such as a load balancer, separate caching servers,
    **Content Delivery Networks** ( **CDN** ), an array of slave DB servers, and so
    on. So, when you analyze the performance of the application, first you need to
    study architecture, analyze each of the individual components involved, measure
    the performance of each of the components, and try to optimize them when the application
    does not suit your acceptable performance. The main thing is not to jump into
    performance improvement techniques without studying and analyzing the architecture
    of the application. If you are creating a new application, you can think about
    performance right from the start of the application's creation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你被要求调整现有应用的性能，了解应用的现有架构也同样重要。使用 ASP.NET Core，你可以构建一个简单的 CRUD 应用，也可以构建一个服务于全球数百万用户的任务关键型应用。大型应用可能还有许多其他组件，例如负载均衡器、独立的缓存服务器、**内容分发网络**（**CDN**）、一组从属
    DB 服务器等等。因此，在分析应用性能时，首先你需要研究架构，分析涉及的每个单独组件，测量每个组件的性能，并在应用不符合你可接受的性能时尝试优化它们。主要的事情不是在没有研究和分析应用架构的情况下直接跳到性能改进技术。如果你正在创建一个新应用，你可以在应用创建的初期就考虑性能问题。
- en: 'We will examine a typical web application setup, shown in the following screenshot. We
    will then analyze it and consider how to improve it:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查一个典型的 Web 应用设置，如下面的截图所示。然后我们将分析它并考虑如何改进：
- en: '![Improving Performance of an ASP.NET Core Application](img/Image00219.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![提高 ASP.NET Core 应用性能](img/Image00219.jpg)'
- en: 'The following steps show the process of using a web application:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了使用 Web 应用的过程：
- en: The user accesses an ASP.NET Core web application from a browser, such as Internet
    Explorer, Firefox, or Chrome. When the user types the URL into the browser and
    presses the  *Enter* key, the browser creates a session and fires the HTTP request.
    This is not specific to an ASP.NET Core application. This behavior is the same
    for all web applications, irrespective of the technology on which they are built.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户通过浏览器（如 Internet Explorer、Firefox 或 Chrome）访问 ASP.NET Core 网络应用。当用户在浏览器中输入
    URL 并按下 *Enter* 键时，浏览器会创建一个会话并触发 HTTP 请求。这并不特定于 ASP.NET Core 应用。这种行为对所有基于不同技术构建的
    Web 应用都是相同的。
- en: The request reaches the web server. If it is a simple request, the web server
    itself will serve that request. Serving a static HTML file is a typical example
    of this. If the request is a bit complex, for example, returning some data based
    on the business logic, the request will be forwarded to the application server.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求到达 Web 服务器。如果这是一个简单请求，Web 服务器本身将处理该请求。提供静态 HTML 文件是这种类型的典型例子。如果请求稍微复杂一些，例如基于业务逻辑返回一些数据，请求将被转发到应用服务器。
- en: The application server will query the database to get the data. Then it might
    do some business processing on the received data before returning the data to
    the web server. Sometimes, the web server might act as an application server for
    a smaller web application.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用服务器将查询数据库以获取数据。然后它可能在将数据返回给 Web 服务器之前对收到的数据进行一些业务处理。有时，Web 服务器可能作为较小 Web 应用的应用服务器。
- en: Then, the web server will return the response, typically in HTML, to the requesting
    client.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，Web 服务器将返回响应，通常是 HTML 格式，给请求的客户。
- en: Thus, we can categorize these components into three layers—the UI layer, the
    web/application layer, and the DB layer. With respect to improving the overall
    performance of the ASP.NET Core application, we need to have a thorough look at
    how we can improve the performance of each of the layers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将这些组件分为三个层次——UI 层、Web/应用层和 DB 层。为了提高 ASP.NET Core 应用的整体性能，我们需要彻底了解如何提高每一层的性能。
- en: Before implementing any performance improvement techniques, we need to first
    analyze the performance in each of the layers in the application. Only then can
    we suggest ways improve the overall performance of the application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施任何性能改进技术之前，我们首先需要分析应用中每一层的性能。只有在此基础上，我们才能提出提高应用整体性能的方法。
- en: The UI layer
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 层
- en: 'The UI layer represents all the events (and associated stuff) happening between
    the browser and the server. There are many events, including, but not limited
    to, the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: UI层代表浏览器和服务器之间发生的所有事件（以及相关内容）。有许多事件，包括但不限于以下内容：
- en: Firing the HTTP request
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送HTTP请求
- en: Getting the response
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取响应
- en: Downloading the resources
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载资源
- en: Rendering them in the browser
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中渲染它们
- en: Any JavaScript code execution
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何JavaScript代码执行
- en: Reducing the number of HTTP requests
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少HTTP请求的数量
- en: A typical web page might not have only HTML content. It may have references
    to CSS files, JS files, and images, or other sources. So, when you try to access
    a web page, the client will fire HTTP requests for each of these references and
    download those references from the server to the client.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的网页可能不仅仅包含HTML内容。它可能包含对CSS文件、JS文件、图片或其他资源的引用。因此，当你尝试访问一个网页时，客户端将为每个这些引用发送HTTP请求，并将这些引用从服务器下载到客户端。
- en: Browser developer tools come in handy when you want to analyze the HTTP requests
    being fired from the client. Most of the browsers have developer tools that you
    can make use of.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想分析客户端发出的HTTP请求时，浏览器开发者工具非常有用。大多数浏览器都有你可以使用的开发者工具。
- en: 'When you press *F12* in Internet Explorer, the **Developer Tools** window will
    open at the bottom of the Internet Explorer window, as shown in the following
    screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Internet Explorer中按下*F12*键时，**开发者工具**窗口将在Internet Explorer窗口的底部打开，如下面的截图所示：
- en: '![Reducing the number of HTTP requests](img/Image00220.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![减少HTTP请求的数量](img/Image00220.jpg)'
- en: 'Click on the **Network** tab. Before entering the URL in the browser, click
    the *Start* button (the green play button), or click the green play button and
    refresh the page:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**网络**标签页。在浏览器中输入URL之前，点击*开始*按钮（绿色播放按钮），或者点击绿色播放按钮并刷新页面：
- en: '![Reducing the number of HTTP requests](img/Image00221.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![减少HTTP请求的数量](img/Image00221.jpg)'
- en: Once you press the **Network** tab's start button, Internet Explorer's **Network**
    tab will listen to each of the requests that are fired from the current tab. Each
    request will contain information, such as the URL, protocol, method, result (the
    HTTP status code), and other information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦按下**网络**标签页的启动按钮，Internet Explorer的**网络**标签页将监听来自当前标签页的所有请求。每个请求将包含信息，例如URL、协议、方法、结果（HTTP状态码）以及其他信息。
- en: 'I ran the application again with ( **Tracking Network Requests** option ON)
    and I could see the requests being tracked, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我再次运行了应用程序，并开启了（**跟踪网络请求**选项），可以看到请求被跟踪，如下面的截图所示：
- en: '![Reducing the number of HTTP requests](img/Image00222.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![减少HTTP请求的数量](img/Image00222.jpg)'
- en: There are many useful pieces of data available in the Network tab. To begin
    with, the URL column shows the resource that is being accessed. The Protocol column,
    as the name implies, shows the protocol being used for accessing the resource.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 网络标签页中有很多有用的数据。首先，URL列显示了正在访问的资源。正如其名称所暗示的，协议列显示了用于访问资源的协议。
- en: To begin with, the URL column shows the resource that is being accessed. The
    Protocol column, as the name implies, shows the protocol being used for accessing
    the resource. The Method column shows the type of request, and in the Result column,
    we can see the HTTP status code of the request (HTTP 200 response means a successful
    GET request).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，URL列显示了正在访问的资源。正如其名称所暗示的，协议列显示了用于访问资源的协议。方法列显示了请求的类型，而在结果列中，我们可以看到请求的HTTP状态码（HTTP
    200响应表示成功的GET请求）。
- en: The Type column shows the type of resource that is being accessed, and the Taken
    column shows how much time it has taken to receive the file from the server. The
    Received column shows the size of the file that was downloaded as part of the
    request.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 类型列显示了正在访问的资源类型，而耗时列显示了从服务器接收文件所需的时间。接收列显示了作为请求一部分下载的文件大小。
- en: Using GZip compression
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GZip压缩
- en: 'When you are serving the content, you can compress the content using GZip so
    that a smaller amount of data will be sent across the wire. You need to add the
    appropriate HTTP headers so that the browser can understand the mode of content
    being delivered. In IIS, this option is enabled for static resources by default.
    You can verify this by accessing the `applicationHost.config`  file at the path
    `C:\Windows\System32\inetsrv\config` :'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你提供服务时，你可以使用GZip压缩内容，这样就可以通过网络发送更少的数据。你需要添加适当的HTTP头信息，以便浏览器可以理解正在发送的内容模式。在IIS中，默认情况下为静态资源启用此选项。你可以通过访问路径`C:\Windows\System32\inetsrv\config`下的`applicationHost.config`文件来验证这一点：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If it is not available in your `applicationHost.config` file, you have to make
    the necessary changes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在你的`applicationHost.config`文件中不可用，你必须进行必要的更改。
- en: Using the Content Delivery Network (CDN)
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内容分发网络（CDN）
- en: A Content Delivery Network is a system of distributed servers situated across
    the globe to serve the content based on the geographical location from where the
    content is accessed. Amazon's **CloudFront** is one example of a CDN. Amazon has
    edge locations (locations where servers are located) all over the world so that
    content can be served to users from the nearest location.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 内容分发网络（Content Delivery Network，CDN）是一个分布在全球各地的服务器系统，根据内容访问的地理位置来提供服务。亚马逊的**CloudFront**是CDN的一个例子。亚马逊在全球各地都有边缘位置（服务器所在的位置），以便从最近的位置向用户提供服务。
- en: 'In the following line, we are accessing the jQuery from the CDN provided by
    the official jQuery website:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下行中，我们是从官方jQuery网站提供的CDN中访问jQuery：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using JavaScript wherever possible
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽可能使用JavaScript
- en: If you can use JavaScript to achieve a functionality, then do it. For example,
    before validating the data of the form on the server, always try to do client-side
    validation first. This approach has a couple of advantages—the site will be very
    fast, as everything is done at the client-side itself, and the server would handle
    a larger number of requests, as some of the requests are handled on the client-side.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以使用JavaScript来实现一个功能，那么就去做。例如，在服务器上验证表单数据之前，总是先尝试进行客户端验证。这种方法有几个优点——网站将会非常快，因为所有的事情都是在客户端完成的，服务器将处理更多的请求，因为一些请求是在客户端处理的。
- en: '![Using JavaScript wherever possible](img/Image00223.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![尽可能使用JavaScript](img/Image00223.jpg)'
- en: Using CSS stylesheets
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS样式表
- en: As the browser renders the web page progressively (the browser will display
    whatever content it has, as soon as it receives it), it is better to place the
    stylesheets at the top rather than at the end of the web page. If we place the
    stylesheets at the bottom, it prohibits the progressive rendering as the browser
    has to redraw the content with the styles.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浏览器是逐步渲染网页的（浏览器会在收到内容后立即显示它），因此将样式表放在顶部而不是网页的末尾会更好。如果我们把样式表放在底部，它会阻止渐进式渲染，因为浏览器需要用样式重新绘制内容。
- en: 'Most of the browsers will block parallel downloads when it comes to downloading
    the JavaScript files, so it is better to place the script at the bottom. This
    means that your content is shown to the user while the browser downloads the scripts.
    The following is the sample layout file created in an ASP.NET Core application
    where CSS files are referenced at the top and JavaScript files are referenced
    at the bottom:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器在下载JavaScript文件时都会阻止并行下载，因此最好将脚本放在底部。这意味着在浏览器下载脚本的同时，用户可以看到你的内容。以下是在ASP.NET
    Core应用程序中创建的示例布局文件，其中CSS文件在顶部引用，JavaScript文件在底部引用：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Minification of JavaScript and CSS files and their combination
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript和CSS文件的压缩及其合并
- en: The time taken to download the related resources of a web page is directly proportional
    to the size of the files that are downloaded. If we reduce the size of the file
    without changing the actual content, it will greatly increase the performance.
    Minification is the process of changing the content of the file in order to reduce
    the size of the file. Removing the extraneous white spaces and changing the variable
    names to shorter names are both common techniques used in the minification process.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下载网页相关资源所需的时间与下载的文件大小成正比。如果我们在不改变实际内容的情况下减小文件大小，这将大大提高性能。压缩是改变文件内容以减小文件大小的过程。移除多余的空白和将变量名更改为更短的名字都是在压缩过程中常用的技术。
- en: 'Popular JavaScript libraries such as jQuery and frontend frameworks provide
    minified files by default. You can use them as they are. In the following screenshot,
    I have downloaded the compressed version of jQuery. You can minify the custom
    JavaScript and CSS files that you have written for your application:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如jQuery和前端框架等流行的JavaScript库默认提供压缩文件。你可以直接使用它们。在下面的屏幕截图中，我已下载了jQuery的压缩版本。你可以压缩你为应用程序编写的自定义JavaScript和CSS文件：
- en: '![Minification of JavaScript and CSS files and their combination](img/Image00224.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript和CSS文件的压缩及其组合](img/Image00224.jpg)'
- en: '**Bundling** is the process where you can combine two or more files into one.
    Bundling and minification, when used together, will reduce the size of the payload,
    thereby increasing the performance of the application.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**捆绑**是将两个或多个文件合并为一个的过程。当捆绑和压缩一起使用时，将减少负载的大小，从而提高应用程序的性能。'
- en: 'You can install the **Bundler & Minifier**  Visual Studio extension from the
    following URL:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从以下URL安装**Bundler & Minifier** Visual Studio扩展：
- en: '[https://visualstudiogallery.msdn.microsoft.com/9ec27da7-e24b-4d56-8064-fd7e88ac1c40](https://visualstudiogallery.msdn.microsoft.com/9ec27da7-e24b-4d56-8064-fd7e88ac1c40)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://visualstudiogallery.msdn.microsoft.com/9ec27da7-e24b-4d56-8064-fd7e88ac1c40](https://visualstudiogallery.msdn.microsoft.com/9ec27da7-e24b-4d56-8064-fd7e88ac1c40)'
- en: 'Once you have installed this Visual Studio extension, you can select the files
    that you want to bundle and minify by selecting the files and selecting the **Bundler
    & Minifier** option from the **Context** menu, brought up by right-clicking. It
    is shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了这个Visual Studio扩展，你可以通过选择文件并从右键点击弹出的**上下文**菜单中选择**Bundler & Minifier**选项来选择你想要捆绑和压缩的文件。如下面的屏幕截图所示：
- en: '![Minification of JavaScript and CSS files and their combination](img/Image00225.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript和CSS文件的压缩及其组合](img/Image00225.jpg)'
- en: 'Once you select the **Bundle and Minify Files** option, it will ask you to
    save the bundled file as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择**捆绑和压缩文件**选项，它将要求你保存捆绑文件，如下面的屏幕截图所示：
- en: '![Minification of JavaScript and CSS files and their combination](img/Image00226.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript和CSS文件的压缩及其组合](img/Image00226.jpg)'
- en: 'You can name the file of your wish and save the file. Once you save the file,
    another file would have been created in your solution—in our case, it is the `bundleconfig.json`
    file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以命名你想要的文件并保存文件。一旦保存文件，你的解决方案中就会创建另一个文件——在我们的例子中，它是`bundleconfig.json`文件：
- en: '![Minification of JavaScript and CSS files and their combination](img/Image00227.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript和CSS文件的压缩及其组合](img/Image00227.jpg)'
- en: 'This file will have the information on the input files and the bundled output
    file. The following is one such example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将包含输入文件和捆绑输出文件的信息。以下是一个示例：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can use this bundled file in your application, resulting in increased performance.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在应用程序中使用这个捆绑文件，从而提高性能。
- en: The caching process
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存过程
- en: Caching is the process of copying the data and having it in memory instead of
    getting the data again through an external resource, such as a network, file,
    or database. The data used in caching is ephemeral and can be removed at any time.
    As we are directly accessing the data, caching can greatly improve the performance
    of the application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是将数据复制到内存中，而不是再次通过外部资源（如网络、文件或数据库）获取数据的过程。缓存中使用的数据是短暂的，可以随时删除。因为我们直接访问数据，所以缓存可以大大提高应用程序的性能。
- en: Caching can be done in any of the layers—client-side at the browser, at the
    proxy server (or at some middleware), or at the web/application server. For database
    layer caching, we might not need to do any custom coding. Based on the type of
    database server being used, you might need to make some configuration changes.
    However, most of the databases these days are powerful enough to cache the data
    as and when it is needed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存可以在任何层进行——在浏览器端的客户端，在代理服务器（或某些中间件）上，或者在Web/应用程序服务器上。对于数据库层缓存，我们可能不需要进行任何自定义编码。根据使用的数据库服务器类型，可能需要做一些配置更改。然而，如今的大多数数据库都有足够强大的功能，可以在需要时缓存数据。
- en: Client-side caching
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端缓存
- en: 'We can cache at the client-side if we add the appropriate HTTP response headers.
    For example, if we want to cache all the static assets, such as CSS, images, and
    JavaScript files, we can add the **max-age** response header in the **Cache-Control**
    header:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加适当的HTTP响应头，我们可以在客户端进行缓存。例如，如果我们想缓存所有静态资源，如CSS、图像和JavaScript文件，我们可以在**Cache-Control**头中添加**max-age**响应头：
- en: '![Client-side caching](img/Image00228.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![客户端缓存](img/Image00228.jpg)'
- en: In the preceding screenshot of the **Developer Tool** window's **Network** tab,
    when the requests are fired again, we get *HTTP*   *304 response* (Not modified)
    as the response. This means the same files are not transferred back twice across
    the wire, as they are available in the browser itself.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张**开发者工具**窗口的**网络**选项卡截图，当再次发起请求时，我们得到*HTTP* *304响应*（未修改）。这意味着相同的文件不会在网络上两次传输，因为它们已经在浏览器中可用。
- en: Implementing browser caching for static files is pretty easy, and it involves
    just a couple of steps—adding dependencies and configuring the application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 实现静态文件的浏览器缓存相当简单，只需要几个步骤——添加依赖项和配置应用程序。
- en: 'Add the following `NuGet` package to the list of dependencies in the `project.json`
    file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下`NuGet`包添加到`project.json`文件中的依赖项列表中：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following namespaces to the `Startup.cs` file and configure the application
    to use those static files:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下命名空间添加到`Startup.cs`文件中，并配置应用程序使用这些静态文件：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Response caching
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应缓存
- en: In response caching, cache-related HTTP headers are added to HTTP responses
    when MVC actions are returned. The Cache-Control header is the primary HTTP header
    that gets added to the response.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应缓存中，当MVC动作返回时，会在HTTP响应中添加与缓存相关的HTTP头。`Cache-Control`头是添加到响应的主要HTTP头。
- en: '![Response caching](img/Image00229.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![响应缓存](img/Image00229.jpg)'
- en: The preceding diagram shows response caching in action. In the first request,
    we are calling a Controller's action method; the request comes from the client
    and passes through the proxy server, actually hitting the web server. As we have
    added a response cache, any subsequent requests will not be forwarded to the web
    server, and the responses will be returned from the proxy server itself. This
    will reduce the number of requests to the web server, which in turn will reduce
    the load on the web server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图展示了响应缓存的工作原理。在第一次请求中，我们调用控制器（Controller）的动作方法；请求来自客户端，并通过代理服务器，实际上击中（访问）了web服务器。由于我们添加了响应缓存，任何后续的请求将不会转发到web服务器，响应将由代理服务器本身返回。这将减少对web服务器的请求次数，从而减少对web服务器的负载。
- en: 'Caching the response of the Controller''s action method is pretty easy. Just
    add the `ResponseCache` attribute with a duration parameter. In the following
    action method, we have added the response cache with a duration of 60 seconds,
    so that, for the next 60 seconds, if any requests come again, the responses will
    be returned from the proxy server itself instead of going to the web server:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存控制器动作方法的响应相当简单。只需添加带有持续时间参数的`ResponseCache`属性。在以下动作方法中，我们添加了持续时间为60秒的响应缓存，因此，在接下来的60秒内，如果再次有请求，响应将直接从代理服务器返回，而不是发送到web服务器：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The web/application layer
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络应用层
- en: The web/application layer is composed of whatever happens between receiving
    the request from the client and sending back the response (or querying the DB
    layer to get the required data). Most of the web/application layer will be in
    a server-side language, such as C#, so when you try to optimize the web/application
    layer, you need to incorporate the best practices of ASP.NET MVC and C#.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用层由从接收客户端请求到发送响应（或查询数据库层以获取所需数据）之间发生的一切组成。网络应用层的大部分内容将使用服务器端语言，如C#，因此当您尝试优化网络应用层时，需要结合ASP.NET
    MVC和C#的最佳实践。
- en: No business logic in Views
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图中没有业务逻辑
- en: A View is what is rendered to the browser, and it can contain presentation logic.
    Presentation logic represents where and how the data is to be displayed. ViewModels
    (actually, models specific to the View) are models that hold the data for a particular
    view.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是渲染到浏览器的内容，它可以包含表示逻辑。表示逻辑表示数据要显示的位置和方式。视图模型（实际上是针对视图的特定模型）是包含特定视图数据的模型。
- en: Neither Views nor ViewModels should contain any business logic as this violates
    the separation of concerns principle.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 视图（Views）和视图模型（ViewModels）都不应包含任何业务逻辑，因为这违反了关注点分离原则。
- en: 'Look at the following Razor View code. We are just looping through the list
    in the model and presenting the data in tabular format—nothing else:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的Razor视图代码。我们只是在模型中的列表上进行循环，并以表格格式展示数据——没有其他内容：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In some code, there might be a repository layer in ViewModel, which should never
    be the case. Please be extra cautious about what is there in the View/ViewModel
    code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些代码中，视图模型中可能会有一个仓库层（repository layer），这绝不应该发生。请特别小心查看View/ViewModel代码中的内容。
- en: Using asynchronous logging
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用异步日志记录
- en: Try to use asynchronous logging, wherever possible, to improve the performance.
    Most logging frameworks, such as **Log4Net** , provide an option for logging asynchronously.
    With respect to the ASP.NET Core, you can implement the logging through a Dependency
    Injection.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能地使用异步日志记录来提高性能。大多数日志框架，如 **Log4Net**，提供了异步日志记录的选项。就 ASP.NET Core 而言，你可以通过依赖注入来实现日志记录。
- en: 'The following is a typical example of the implementation of a logging framework
    in an MVC Controller:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 MVC 控制器中实现日志框架的典型示例：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The DB layer
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库层
- en: Though the DB layer is not directly related to ASP.NET Core applications, it
    is the developer's responsibility to take complete ownership of the application's
    performance, and that includes taking care of the database's performance as well.
    We will now look at a few of the areas in the DB layer that we need to consider
    when improving the performance of an ASP.NET Core application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据库层与 ASP.NET Core 应用程序没有直接关系，但开发者有责任完全掌控应用程序的性能，这包括关注数据库的性能。现在我们将探讨在提高 ASP.NET
    Core 应用程序性能时需要考虑的数据库层的一些区域。
- en: Understanding the queries generated by the ORM
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 ORM 生成的查询
- en: In most applications these days, we use **Object-Relational Mapping** ( **ORM**
    ), such as Entity Framework or **NHibernate** . As you might know, the primary
    objective of the ORM is to enable you to write the data access layer using domain-based
    classes and objects instead of writing queries directly. However, it does not
    mean that you never need to understand the basics of the SQL queries generated,
    or the optimization of these queries. Sometimes, the generated query from Entity
    Framework may not be optimized, so a better practice would be to run the profiler,
    analyze the generated queries, and tune them as per your needs. You can use the
    interceptors in Entity Framework to log the SQL queries.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的大多数应用程序中，我们使用 **对象关系映射** ( **ORM** )，例如 Entity Framework 或 **NHibernate**。正如你可能知道的，ORM
    的主要目标是让你能够使用基于域的类和对象来编写数据访问层，而不是直接编写查询。但这并不意味着你永远不需要理解生成的 SQL 查询的基本知识，或者这些查询的优化。有时，Entity
    Framework 生成的查询可能没有优化，因此更好的做法是运行分析器，分析生成的查询，并根据你的需求进行调整。你可以使用 Entity Framework
    中的拦截器来记录 SQL 查询。
- en: Using classic ADO.NET if you really want to
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果你真的想使用经典 ADO.NET
- en: ASP.NET Core is just a web development framework, and it is not tied to any
    data access framework or technology. If the ORM that you use in your application
    does not support the performance that you expect it to, you can use the classic
    ADO.NET and manually write the queries/stored procedures.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 只是一个 Web 开发框架，它与任何数据访问框架或技术都没有绑定。如果你在应用程序中使用的 ORM 无法提供你期望的性能，你可以使用经典的
    ADO.NET 并手动编写查询/存储过程。
- en: Return only the required data
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只返回所需数据
- en: Always return only the data that you need nothing more, nothing less. This approach
    reduces the data that we send across the wire (from the database server to the
    web/application server).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 总是只返回你需要的数据，不多也不少。这种方法减少了我们在网络中发送的数据量（从数据库服务器到 Web/应用程序服务器）。
- en: 'For example, we would not use the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们不会使用以下：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Instead, we would use this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们会使用这个：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The latter query would get only the required fields from the table, and, thus,
    only the required data is passed across to the calling client.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 后者查询只会从表中获取所需的字段，因此，只有所需的数据被传递给调用客户端。
- en: Fine tuning the indices
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 紧凑调整索引
- en: Beginners tend to add indices whenever they face a problem with the database.
    Adding an index to every column in the table is bad practice, and will reduce
    performance. The right approach is to take the list of queries that are most frequently
    executed. Once you have this list, try to fine tune them—remove unnecessary joins,
    avoid correlated subqueries, and so on. Only when you have tried and exhausted
    all query tuning options at your end should you start adding the indices. The
    important thing to note here is that you should add indices only on the required
    number of columns.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者倾向于在遇到数据库问题时添加索引。在表的每一列上添加索引是坏习惯，会降低性能。正确的方法是列出最常执行的查询。一旦你有了这个列表，尝试调整它们——移除不必要的连接，避免相关子查询等。只有在你尝试并耗尽所有查询调整选项后，你才开始添加索引。这里要注意的重要一点是，你应该只在所需的列数上添加索引。
- en: Using the correct column type and size for your database columns
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为你的数据库列使用正确的列类型和大小
- en: When you want to use int as a datatype for a column, use an integer. Don't use
    double. This will save a lot of space if you have lots of rows in your table.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要将int用作列的数据类型时，使用整数。不要使用double。如果你表中有大量行，这将节省很多空间。
- en: Avoiding correlated subqueries
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免使用相关子查询
- en: Correlated subqueries use values from their parent query, which in turn makes
    it run row by row. This would significantly affect the query performance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 相关子查询使用其父查询的值，这反过来又使得它逐行运行。这会显著影响查询性能。
- en: 'The following is one such example of a correlated subquery:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个相关子查询的示例：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Generic performance improvement tips
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用性能改进技巧
- en: Here are a couple of pointers to improve the overall application performance
    in an ASP.NET Core Web Application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些提高ASP.NET Core Web应用程序整体性能的技巧。
- en: Avoiding the Response.Redirect method
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用Response.Redirect方法
- en: When we want to do client-side redirection, developers can call the `Response.Redirect`
     method with the URL passed as a parameter. But there is a small problem with
    this approach. If we use `Response.Redirect` , the browser will send the request
    to the server again, which needs another round trip to the server. So, if possible,
    it is better to avoid the `Response.Redirect`  method and instead use `RedirectToAction`
     method if possible.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要进行客户端重定向时，开发者可以通过传递URL作为参数调用`Response.Redirect`方法。但这种方法存在一个小问题。如果我们使用`Response.Redirect`，浏览器将再次向服务器发送请求，这需要再次往返服务器。因此，如果可能的话，最好避免使用`Response.Redirect`方法，如果可能的话，可以使用`RedirectToAction`方法。
- en: Using string builder
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字符串构建器
- en: If your application involves a lot of string manipulation, it is preferable
    to use string builder instead of the usual string concatenation. String concatenation
    results in creating a new string object for each of the operations, whereas string
    builder works on the single object itself. We can achieve significantly better
    performance when we use string builder in large string manipulation operations.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序涉及大量的字符串操作，最好使用字符串构建器而不是常规的字符串连接。字符串连接会在每次操作时创建一个新的字符串对象，而字符串构建器则直接在单个对象上操作。当我们在大规模字符串操作中使用字符串构建器时，可以显著提高性能。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to analyze the performance of web applications
    and which layers to target when improving the performance. Then we discussed how
    to improve the performance in each of the layers—the UI layer, the web/application
    layer, and the DB layer.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何分析Web应用程序的性能以及提高性能时应该针对哪些层。然后我们讨论了如何在每个层中提高性能——UI层、Web/应用程序层和数据库层。
