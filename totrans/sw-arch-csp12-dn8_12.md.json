["```cs\n{\n\"indexingMode\": \"consistent\",\n\"automatic\": true,\n    ... \n```", "```cs\n{\n    ...\n    \"includedPaths\": [\n{\n\"path\": \"/*\",\n\"indexes\": [\n{\n\"kind\": \"Range\",\n\"dataType\": \"Number\",\n\"precision\": -1\n},\n{\n\"kind\": \"Range\",\n\"dataType\": \"String\",\n\"precision\": -1\n},\n{\n\"kind\": \"Spatial\",\n\"dataType\": \"Point\"\n}\n]\n}\n]\n},\n... \n```", "```cs\n ...\n    \"excludedPaths\": [\n{\n\"path\": \"/\\\"_etag\\\"/?\"\n}\n] \n```", "```cs\npublic static async Task CreateCosmosDB()\n{\n    using var cosmosClient = new CosmosClient(endpoint, key);\n    Database database = await\n        cosmosClient.CreateDatabaseIfNotExistsAsync(databaseId);\n    ContainerProperties cp = new ContainerProperties(containerId,\n        \"/DestinationName\");\n    Container container = await database.CreateContainerIfNotExistsAsync(cp);\n    await AddItemsToContainerAsync(container);\n} \n```", "```cs\npublic class Destination\n{\n    [JsonPropertyName(\"id\")]\n    public string Id { get; set; }\n    public string DestinationName { get; set; }\n    public string Country { get; set; }\n    public string Description { get; set; }\n    public Package[] Packages { get; set; }\n} \n```", "```cs\n    context.Database.EnsureCreated(); \n    ```", "```cs\n    builder.Entity<MyEntity>()\n         .ToContainer(\"collection-name\"); \n    ```"]