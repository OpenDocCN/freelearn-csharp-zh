["```cs\n \"iisSettings\": {\n     \"windowsAuthentication\": false,\n     \"anonymousAuthentication\": true,\n     \"iisExpress\": {\n         \"applicationUrl\": \"http://localhost:52845/\",\n         \"sslPort\": 0\n     }\n },\n \"profiles\": {\n     \"IIS Express\": {\n     \"commandName\": \"IISExpress\",\n     \"launchBrowser\": true,\n     \"environmentVariables\": {\n     \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n     }\n },\n \"GettingStarted\": {\n     \"commandName\": \"Project\",\n     \"launchBrowser\": true,\n     \"environmentVariables\": {\n         \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n     },\n     \"applicationUrl\": \"http://localhost:52846/\"\n     }\n   }\n}\n```", "```cs\n  {\n     \"Logging\": {\n     \"IncludeScopes\": false,\n     \"LogLevel\": {\n     \"Default\": \"Warning\"\n     }\n }\n}\n```", "```cs\n{\n \"name\": \"asp.net\",\n \"private\": true,\n \"dependencies\": {\n     \"bootstrap\": \"3.3.7\",\n     \"jquery\": \"2.2.0\",\n     \"jquery-validation\": \"1.14.0\",\n     \"jquery-validation-unobtrusive\": \"3.2.6\"\n     }\n}\n```", "```cs\n[\n     {\n        // The name and relative path of output minified css file.\n        \"outputFileName\": \"wwwroot/css/site.min.css\",\n         // An array of relative input file paths. Globbing patterns \n            supported\n         \"inputFiles\": [\n             \"wwwroot/css/site.css\"\n         ]\n     },\n     {\n         // The name and relative path of output minified JavaScript \n            file.\n         \"outputFileName\": \"wwwroot/js/site.min.js\",\n         // The array of relative input file paths.\n         \"inputFiles\": [\n             \"wwwroot/js/site.js\"\n         ],\n         // Optionally specify minification options\n         \"minify\": {\n             \"enabled\": true,\n             \"renameLocals\": true\n         },\n         // Optionally generate .map file\n         \"sourceMap\": false\n     }\n ]\n```", "```cs\npublic class Program\n{\n     public static void Main(string[] args)\n     {\n         BuildWebHost(args).Run();\n     }\n\n     public static IWebHost BuildWebHost(string[] args) => \n        WebHost.CreateDefaultBuilder(args)\n        .UseStartup<Startup>()\n        .Build();\n}\n```", "```cs\n public class Startup\n {\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    // This method gets called by the runtime. Use this method to  \n       add services to the container.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc();\n    }\n\n    // This method gets called by the runtime. Use this method to \n       configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, \n    IHostingEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n            app.UseBrowserLink();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n        app.UseStaticFiles();\n        app.UseMvc(routes =>\n        {\n            routes.MapRoute(\n                name: \"default\",\n                template: \"{controller=Home}/{action=Index}/{id?}\");\n        });\n    }\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n     <PropertyGroup>\n         <TargetFramework>netcoreapp2.0</TargetFramework> \n     </PropertyGroup>\n     <ItemGroup>\n         <PackageReference Include=\"Microsoft.AspNetCore.All\" \n         Version=\"2.0.0\" />\n     </ItemGroup>\n     <ItemGroup>\n         <DotNetCliToolReference \n         Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\"  \n         Version=\"2.0.0\"           />\n     </ItemGroup>\n</Project>\n```", "```cs\n<ItemGroup>\n     <PackageReference Include=\"Microsoft.AspNetCore.All\" \n     Version=\"2.0.0\" />\n     <PackageReference Include=\"Microsoft.AspNetCore.SignalR\" \n     Version=\"1.0.0-alpha1-final\" />\n </ItemGroup>\n```", "```cs\nnpm install @aspnet/signalr-client\n```", "```cs\n//// Adds SignalR to the services container.\n services.AddSignalR();\n```", "```cs\n//// Use - SignalR & let it know to intercept and map any request having gameHub.\n app.UseSignalR(routes => \n {\n        routes.MapHub<GameHub>(\"gameHub\");\n });\n```", "```cs\n // This method gets called by the run-time. Use this method to add \n    services to the container.\n public void ConfigureServices(IServiceCollection services)\n {\n     services.AddMvc();\n     //// Adds SignalR to the services container.\n services.AddSignalR();\n }\n\n // This method gets called by the runtime. Use this method to \n    configure the HTTP request pipeline.\n public void Configure(IApplicationBuilder app, IHostingEnvironment \n env)\n {\n       if (env.IsDevelopment())\n       {\n            app.UseDeveloperExceptionPage();\n            app.UseBrowserLink();\n       }\n       else\n       {\n           app.UseExceptionHandler(\"/Home/Error\");\n       }  \n\n    app.UseStaticFiles();\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\n            name: \"default\",\n            template: \"{controller=Home}/{action=Index}/{id?}\");\n     });\n\n   //// Use - SignalR & let it know to intercept and map any request \n        having gameHub.\n app.UseSignalR(routes => \n {\n routes.MapHub<GameHub>(\"gameHub\");\n });\n```", "```cs\n/// <summary>\n/// The player class. Each player of Tic-Tac-Toe game would \n    be an instance of this class.\n/// </summary>\ninternal class Player\n{\n     /// <summary>\n     /// Gets or sets the name of the player. This would be \n         set at the time user registers.\n     /// </summary>\n     public string Name { get; set; }\n\n    /// <summary>\n    /// Gets or sets the opponent player. The player \n        against whom the player would be playing.\n    /// This is determined/ set when the players click Find \n        Opponent Button in the UI.\n    /// </summary>\n    public Player Opponent { get; set; }\n\n    /// <summary>\n    /// Gets or sets a value indicating whether the player \n        is playing.\n    /// This is set when the player starts a game.\n    /// </summary>\n    public bool IsPlaying { get; set; }\n\n    /// <summary>\n    /// Gets or sets a value indicating whether the player \n        is waiting for opponent to make a move.\n    /// </summary>\n    public bool WaitingForMove { get; set; }\n\n    /// <summary>\n    /// Gets or sets a value indicating whether the player \n        is searching for opponent.\n    /// </summary>\n    public bool IsSearchingOpponent { get; set; }\n\n    /// <summary>\n    /// Gets or sets the time when the player registered.\n    /// </summary>\n    public DateTime RegisterTime { get; set; }\n\n    /// <summary>\n    /// Gets or sets the image of the player.\n    /// This would be set at the time of registration, if \n        the user selects the image.\n    /// </summary>\n    public string Image { get; set; }\n\n    /// <summary>\n    /// Gets or sets the connection id of the player \n        connection with the gameHub.\n    /// </summary>\n    public string ConnectionId { get; set; }\n}\n```", "```cs\n<script src=\"img/jquery.js\"></script> <!-- jQuery-->\n<script src=\"img/signalr-client-1.0.0-alpha1-final.js\"></script> <!-- SignalR-->\n```", "```cs\n<div id=\"divPreviewImage\"> <!-- To display the browsed image-->\n        <fieldset>\n            <div class=\"form-group\"> \n                <div class=\"col-lg-2\">\n                    <image src=\"img/\" id=\"previewImage\" \n                    style=\"height:100px;width:100px;border:solid \n                    2px dotted; float:left\" />\n                </div>\n                <div class=\"col-lg-10\" id=\"divOpponentPlayer\"> <!-- \n                To display image of opponent player-->\n                    <image src=\"img/\" id=\"opponentImage\" \n                    style=\"height:100px;width:100px;border:solid \n                    2px dotted; float:right;\" />\n                </div>\n            </div>\n        </fieldset>\n    </div> \n\n<div id=\"divRegister\"> <!-- Our Registration form-->\n     <fieldset>\n         <legend>Register</legend>\n         <div class=\"form-group\">\n             <label for=\"name\" class=\"col-lg-2 control-\n             label\">Name</label>\n             <div class=\"col-lg-10\">\n                 <input type=\"text\" class=\"form-control\" id=\"name\" \n                 placeholder=\"Name\">\n             </div>\n         </div>\n         <div class=\"form-group\">\n             <label for=\"image\" class=\"col-lg-2 control-\n             label\">Avatar</label>\n             <div class=\"col-lg-10\">\n                 <input type=\"file\" class=\"form-control\" id=\"image\" \n                 />\n             </div>\n         </div>\n         <div class=\"form-group\">\n             <div class=\"col-lg-10 col-lg-offset-2\">\n                 <button type=\"button\" class=\"btn btn-primary\" \n                 id=\"btnRegister\">Register</button>\n             </div>\n         </div>\n     </fieldset>\n </div>\n```", "```cs\n let hubUrl = '/gameHub';\n let httpConnection = new signalR.HttpConnection(hubUrl);\n let hubConnection = new signalR.HubConnection(httpConnection);\n var playerName = \"\";\n var playerImage = \"\";\n var hash = \"#\";\n hubConnection.start();\n\n$(\"#btnRegister\").click(function () {  //// Fires on button click\n        playerName = $('#name').val();   //// Sets the player name \n        with the input name.\n        playerImage = $('#previewImage').attr('src'); //// Sets the \n        player image variable with specified image\n        var data = playerName.concat(hash, playerImage); //// The \n        registration data to be sent to server.\n        hubConnection.invoke('RegisterPlayer', data); //// Invoke \n        the \"RegisterPlayer\" method on gameHub.\n    });\n\n$(\"#image\").change(function () { //// Fires when image is changed.\n        readURL(this); //// HTML 5 way to read the image as data \n        url.\n    });\n\n    function readURL(input) {\n        if (input.files && input.files[0]) { //// Go in only if \n        image is specified.\n            var reader = new FileReader();\n            reader.onload = imageIsLoaded;\n            reader.readAsDataURL(input.files[0]);\n        }\n    }\n\n    function imageIsLoaded(e) {\n        if (e.target.result) {\n            $('#previewImage').attr('src', e.target.result); //// \n            Sets the image source for preview.\n            $(\"#divPreviewImage\").show();\n        }\n    };\n```", "```cs\n/// <summary>\n/// The Game Hub class derived from Hub\n/// </summary>\npublic class GameHub : Hub\n{\n     /// <summary>\n     /// To keep the list of all the connected players \n         registered with the game hub. We could have      \n     /// used normal list but used concurrent bag as its thread \n         safe.\n     /// </summary>\n     private static readonly ConcurrentBag<Player> players = \n     new ConcurrentBag<Player>();\n\n     /// <summary>\n     /// Registers the player with name and image.\n     /// </summary>\n     /// <param name=\"nameAndImageData\">The name and image data \n         sent by the player.</param>\n     public void RegisterPlayer(string nameAndImageData)\n     {\n         var splitData = nameAndImageData?.Split(new char[] { \n         '#' }, StringSplitOptions.None);\n         string name = splitData[0];\n         string image = splitData[1];\n         var player = players?.FirstOrDefault(x => \n         x.ConnectionId == Context.ConnectionId);\n         if (player == null)\n         {\n             player = new Player { ConnectionId = \n             Context.ConnectionId, Name = name, IsPlaying =                \n             false, IsSearchingOpponent = false, RegisterTime = \n             DateTime.UtcNow, Image = image };\n             if (!players.Any(j => j.Name == name))\n             {\n                 players.Add(player);\n             }\n         }\n\n         this.OnRegisterationComplete(Context.ConnectionId);\n       }\n\n       /// <summary>\n       /// Fires on completion of registration.\n       /// </summary>\n       /// <param name=\"connectionId\">The connectionId of the \n           player which registered</param>\n       public void OnRegisterationComplete(string connectionId)\n       {\n           //// Notify this connection id that the registration \n                is complete.\n           this.Clients.Client(connectionId).\n           InvokeAsync(Constants.RegistrationComplete);\n       }\n}\n```", "```cs\nthis.Clients.Client(connectionId).InvokeAsync(Constants.RegistrationComplete);\n```", "```cs\n<div id=\"divFindOpponentPlayer\"> <!-- Section to display Find Opponent -->\n     <fieldset>\n         <legend>Find a player to play against!</legend>\n         <div class=\"form-group\">\n             <input type=\"button\" class=\"btn btn-primary\" \n             id=\"btnFindOpponentPlayer\" value=\"Find Opponent                 \n             Player\" />\n         </div>\n     </fieldset>\n </div>\n     <div id=\"divFindingOpponentPlayer\"> <!-- Section to display \n     opponent not found, wait -->\n     <fieldset>\n         <legend>Its lonely here!</legend>\n         <div class=\"form-group\">\n             Looking for an opponent player. Waiting for someone to \n             join!\n         </div>\n     </fieldset>\n </div>\n <div id=\"divGameInformation\" class=\"form-group\"> <!-- Section to \n display game information-->\n     <div class=\"form-group\" id=\"divGameInfo\"></div>\n     <div class=\"form-group\" id=\"divInfo\"></div>\n </div>\n <div id=\"divGame\" style=\"clear:both\"> <!-- Section where the game \n board would be displayed -->\n     <fieldset>\n         <legend>Game On</legend>\n         <div id=\"divGameBoard\" style=\"width:380px\"></div>\n     </fieldset>\n </div>\n```", "```cs\n $(\"#btnFindOpponentPlayer\").click(function () {\n        hubConnection.invoke('FindOpponent');\n    });\n\nhubConnection.on('registrationComplete', data => { //// Fires on registration complete. Invoked by server hub\n     $(\"#divRegister\").hide();  // hide the registration div\n     $(\"#divFindOpponentPlayer\").show(); // display find opponent \n     player div.\n });\n\n hubConnection.on('opponentNotFound', data => { //// Fires when no opponent is found.\n        $('#divFindOpponentPlayer').hide(); //// hide the find \n        opponent player section.\n        $('#divFindingOpponentPlayer').show(); //// display the \n        finding opponent player div.\n    });\n\n   hubConnection.on('opponentFound', (data, image) => { //// Fires \n   when opponent player is found.\n        $('#divFindOpponentPlayer').hide();   \n        $('#divFindingOpponentPlayer').hide();\n        $('#divGame').show();  //// Show game board section.\n        $('#divGameInformation').show(); //// Show game information\n        $('#divOpponentPlayer').show(); //// Show opponent player \n        image.\n        opponentImage = image;  //// sets the opponent player image \n        for display\n        $('#opponentImage').attr('src', opponentImage); //// Binds \n        the opponent player image\n        $('#divGameInfo').html(\"<br/><span><strong> Hey \" + \n        playerName + \"! You are playing against <i>\" + data + \"</i>\n        </strong></span>\");  //// displays the information of \n        opponent that the player is playing against.\n        //// Draw the tic-tac-toe game board, A 3x3 grid :) by  \n        proper styling.\n        for (var i = 0; i < 9; i++) {\n            $(\"#divGameBoard\").append(\"<span class='marker' id=\" + i \n            + \" style='display:block;border:2px solid \n           black;height:100px;width:100px;float:left;margin:10px;'>\" \n           + i + \"</span>\");\n        }\n    });\n```", "```cs\ninternal class Game\n{\n     /// <summary>\n     /// Gets or sets the value indicating whether the \n         game is over.\n     /// </summary>\n     public bool IsOver { get; private set; }\n\n     /// <summary>\n     /// Gets or sets the value indicating whether the \n         game is draw.\n     /// </summary>\n     public bool IsDraw { get; private set; }\n\n     /// <summary>\n     /// Gets or sets Player 1 of the game\n     /// </summary>\n     public Player Player1 { get; set; }\n\n     /// <summary>\n     /// Gets or sets Player 2 of the game\n     /// </summary>\n     public Player Player2 { get; set; }\n\n     /// <summary>\n     /// For internal housekeeping, To keep track of value in each \n         of the box in the grid.\n     /// </summary>\n     private readonly int[] field = new int[9];\n\n     /// <summary>\n     /// The number of moves left. We start the game with 9 moves \n         remaining in a 3x3 grid.\n     /// </summary>\n     private int movesLeft = 9;\n\n     /// <summary>\n     /// Initializes a new instance of the \n         <see cref=\"Game\"/> class.\n     /// </summary>\n     public Game()\n     {\n         //// Initialize the game\n         for (var i = 0; i < field.Length; i++)\n         {\n             field[i] = -1;\n         }\n     }\n     /// <summary>\n     /// Place the player number at a given position for a player\n     /// </summary>\n     /// <param name=\"player\">The player number would be 0 or    \n         1</param>\n     /// <param name=\"position\">The position where player number  \n         would be placed, should be between 0 and        \n     ///8, both inclusive</param>\n     /// <returns>Boolean true if game is over and \n         we have a winner.</returns>\n     public bool Play(int player, int position)\n     {\n         if (this.IsOver)\n         {\n             return false;\n         }\n         //// Place the player number at the given position\n         this.PlacePlayerNumber(player, position);\n         //// Check if we have a winner. If this returns true, \n         //// game would be over and would have a winner, else game \n              would continue.\n         return this.CheckWinner();\n     }\n }\n```", "```cs\n/// <summary>\n/// The list of games going on.\n/// </summary>\nprivate static readonly ConcurrentBag<Game> games = new ConcurrentBag<Game>();\n\n/// <summary>\n/// To simulate the coin toss. Like heads and tails, 0 belongs to  \n    one player and 1 to opponent.\n/// </summary>\nprivate static readonly Random toss = new Random();\n\n/// <summary>\n/// Finds the opponent for the player and sets the Seraching for \n    Opponent property of player to true. \n/// We will use the connection id from context to identify the \n    current player.\n/// Once we have 2 players looking to play, we can pair them and \n    simulate coin toss to start the game.\n/// </summary>\npublic void FindOpponent()\n{\n    //// First fetch the player from our players collection having \n         current connection id\n    var player = players.FirstOrDefault(x => x.ConnectionId == \n    Context.ConnectionId);\n    if (player == null)\n    {\n        //// Since player would be registered before making this \n             call,\n        //// we should not reach here. If we are here, something \n             somewhere in the flow above is broken.\n        return;\n     }\n\n     //// Set that player is seraching for opponent.\n     player.IsSearchingOpponent = true;\n\n     //// We will follow a queue, so find a player who registered \n          earlier as opponent. \n     //// This would only be the case if more than 2 players are \n          looking for opponent.\n     var opponent = players.Where(x => x.ConnectionId != \n     Context.ConnectionId && x.IsSearchingOpponent && \n     !x.IsPlaying).OrderBy(x =>x.RegisterTime).FirstOrDefault();\n     if (opponent == null)\n     {\n         //// Could not find any opponent, invoke opponentNotFound \n              method in the client.\n         Clients.Client(Context.ConnectionId)\n         .InvokeAsync(Constants.OpponentNotFound);\n         return;\n     }\n\n     //// Set both players as playing.\n     player.IsPlaying = true;\n     player.IsSearchingOpponent = false; //// Make him unsearchable \n     for opponent search\n\n     opponent.IsPlaying = true;\n     opponent.IsSearchingOpponent = false;\n\n      //// Set each other as opponents.\n      player.Opponent = opponent;\n      opponent.Opponent = player;\n\n      //// Notify both players that they can play by invoking \n           opponentFound method for both the players.\n      //// Also pass the opponent name and opoonet image, so that \n           they can visualize it.\n      //// Here we are directly using connection id, but group is a \n           good candidate and use here.\n      Clients.Client(Context.ConnectionId)\n      .InvokeAsync(Constants.OpponentFound, opponent.Name,    \n      opponent.Image);\n      Clients.Client(opponent.ConnectionId)\n      .InvokeAsync(Constants.OpponentFound, player.Name, \n      player.Image);\n\n       //// Create a new game with these 2 player and add it to \n            games collection.\n       games.Add(new Game { Player1 = player, Player2 = opponent });\n  }\n```", "```cs\n//// Triggers on clicking the grid cell.\n $(document).on('click', '.marker', function () {\n     if ($(this).hasClass(\"notAvailable\")) { //// Cell is already \n     taken.\n     return;\n     }\n\n    hubConnection.invoke('MakeAMove', $(this)[0].id); //// Cell is \n    valid, send details to hub.\n});\n\n//// Fires when player has to make a move.\nhubConnection.on('waitingForMove', data => {\n    $('#divInfo').html(\"<br/><span><strong> Your turn <i>\" + \n    playerName + \"</i>! Make a winning move! </strong></span>\");\n});\n\n//// Fires when move is made by either player.\nhubConnection.on('moveMade', data => { \n    if (data.Image == playerImage) { //// Move made by player.\n        $(\"#\" + data.ImagePosition).addClass(\"notAvailable\");\n        $(\"#\" + data.ImagePosition).css('background-image', \n        'url(' + data.Image + ')'); \n        $('#divInfo').html(\"<br/><strong>Waiting for <i>\" + \n        data.OpponentName + \"</i> to make a move.            \n        </strong>\");\n    }\n    else {\n        $(\"#\" + data.ImagePosition).addClass(\"notAvailable\");\n        $(\"#\" + data.ImagePosition).css('background-image', \n        'url(' + data.Image + ')');\n        $('#divInfo').html(\"<br/><strong>Waiting for <i>\" + \n        data.OpponentName + \"</i> to make a move.            \n        </strong>\");\n    }\n});\n\n//// Fires when the game ends.\nhubConnection.on('gameOver', data => {\n    $('#divGame').hide();\n    $('#divInfo').html(\"<br/><span><strong>Hey \" + playerName + \n    \"! \" + data + \" </strong></span>\");\n    $('#divGameBoard').html(\" \");\n    $('#divGameInfo').html(\" \");\n    $('#divOpponentPlayer').hide();\n});\n\n//// Fires when the opponent disconnects.\nhubConnection.on('opponentDisconnected', data => {\n        $(\"#divRegister\").hide();\n        $('#divGame').hide();\n        $('#divGameInfo').html(\" \");\n        $('#divInfo').html(\"<br/><span><strong>Hey \" + playerName + \n        \"! Your opponent disconnected or left     the battle! You \n        are the winner ! Hip Hip Hurray!!!</strong></span>\");\n    });\n\n```", "```cs\n /// <summary>\n /// While playing the game, players would make moves. This class \n     contains the information of those moves.\n /// </summary>\n internal class MoveInformation\n {\n     /// <summary>\n     /// Gets or sets the opponent name.\n     /// </summary>\n     public string OpponentName { get; set; }\n\n     /// <summary>\n     /// Gets or sets the player who made the move.\n     /// </summary>\n     public string MoveMadeBy { get; set; }\n\n     /// <summary>\n     /// Gets or sets the image position. The position in the game \n         board (0-8) where the player placed his         \n     /// image.\n     /// </summary>\n     public int ImagePosition { get; set; }\n\n     /// <summary>\n     /// Gets or sets the image. The image of the player that he \n         placed in the board (0-8)\n     /// </summary>\n     public string Image { get; set; }\n  }\n```", "```cs\n /// <summary>\n /// Invoked by the player to make a move on the board.\n /// </summary>\n /// <param name=\"position\">The position to place \n     the player</param>\n public void MakeAMove(int position)\n {\n        //// Lets find a game from our list of games where one of  \n             the player has the same connection Id as the current \n             connection has.\n            var game = games?.FirstOrDefault(x => \n            x.Player1.ConnectionId == Context.ConnectionId || \n            x.Player2.ConnectionId == Context.ConnectionId);\n\n            if (game == null || game.IsOver)\n            {\n                //// No such game exist!\n                return;\n            }\n\n            //// Designate 0 for player 1\n            int symbol = 0;\n\n            if (game.Player2.ConnectionId == Context.ConnectionId)\n            {\n                //// Designate 1 for player 2.\n                symbol = 1;\n            }\n\n            var player = symbol == 0 ? game.Player1 : game.Player2;\n\n            if (player.WaitingForMove)\n            {\n                return;\n            }\n\n            //// Update both the players that move is made.\n            Clients.Client(game.Player1.ConnectionId)\n            .InvokeAsync(Constants.MoveMade, new MoveInformation {  \n            OpponentName = player.Name, ImagePosition = position,   \n            Image = player.Image });\n            Clients.Client(game.Player2.ConnectionId)\n            .InvokeAsync(Constants.MoveMade, new MoveInformation {    \n            OpponentName = player.Name, ImagePosition = position, \n            Image = player.Image });\n\n            //// Place the symbol and look for a winner after every \n                 move.\n            if (game.Play(symbol, position))\n            {\n                Remove<Game>(games, game);\n                Clients.Client(game.Player1.ConnectionId)\n                .InvokeAsync(Constants.GameOver, $\"The winner is   \n                {player.Name}\");\n                Clients.Client(game.Player2.ConnectionId)\n                .InvokeAsync(Constants.GameOver, $\"The winner is    \n                {player.Name}\");\n                player.IsPlaying = false;\n                player.Opponent.IsPlaying = false;\n                this.Clients.Client(player.ConnectionId)\n                .InvokeAsync(Constants.RegistrationComplete);\n                this.Clients.Client(player.Opponent.ConnectionId)\n                .InvokeAsync(Constants.RegistrationComplete);\n            }\n\n            //// If no one won and its a tame draw, update the \n                 players that the game is over and let them \n                 look for new game to play.\n            if (game.IsOver && game.IsDraw)\n            {\n                Remove<Game>(games, game);\n                Clients.Client(game.Player1.ConnectionId)\n                .InvokeAsync(Constants.GameOver, \"Its a tame  \n                draw!!!\");\n                Clients.Client(game.Player2.ConnectionId)\n                .InvokeAsync(Constants.GameOver, \"Its a tame \n                draw!!!\");\n                player.IsPlaying = false;\n                player.Opponent.IsPlaying = false;\n                this.Clients.Client(player.ConnectionId)\n                .InvokeAsync(Constants.RegistrationComplete);\n                this.Clients.Client(player.Opponent.ConnectionId)\n                .InvokeAsync(Constants.RegistrationComplete);\n            }\n\n            if (!game.IsOver)\n            {\n                player.WaitingForMove = !player.WaitingForMove;\n                player.Opponent.WaitingForMove =    \n                !player.Opponent.WaitingForMove;\n                Clients.Client(player.Opponent.ConnectionId)\n                .InvokeAsync(Constants.WaitingForOpponent,   \n                player.Opponent.Name);\n                Clients.Client(player.ConnectionId)\n                .InvokeAsync(Constants.WaitingForOpponent, \n                player.Opponent.Name);\n            }\n        }\n```"]