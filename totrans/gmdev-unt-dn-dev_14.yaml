- en: '*Chapter 11*: Working with Microsoft Game Dev, Azure Cloud, PlayFab, and Unity'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 11 章*：与 Microsoft Game Dev、Azure 云、PlayFab 和 Unity 一起工作'
- en: This is the last chapter of this book. In the previous chapters, we have learned
    about the various modules that can be used to develop games with the Unity engine,
    such as the UI module, the physics module, and the animation module, and also
    covered some advanced topics – for example, Unity's rendering pipelines and the
    new Data-Oriented Technology Stack. Also, in [*Chapter 10*](B17146_10_Final_ASB_ePub.xhtml#_idTextAnchor181),
    *Serialization System and Assets Management in Unity and Azure*, we not only discussed
    Unity's serialization system and assets management but also covered some knowledge
    related to Microsoft Azure Cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的最后一章。在前面的章节中，我们学习了可以使用 Unity 引擎开发游戏的各个模块，例如 UI 模块、物理模块和动画模块，还涵盖了某些高级主题
    – 例如，Unity 的渲染管线和新的面向数据技术堆栈。此外，在 [*第 10 章*](B17146_10_Final_ASB_ePub.xhtml#_idTextAnchor181)
    中，*Unity 和 Azure 中的序列化系统和资产管理*，我们不仅讨论了 Unity 的序列化系统和资产管理，还涵盖了与 Microsoft Azure
    云相关的某些知识。
- en: This chapter will continue to explore **Microsoft Game Dev** (previously known
    as Microsoft Game Stack), the **Microsoft Azure cloud**, and **Microsoft Azure
    PlayFab** because the tools needed in modern game development are not limited
    to game engines; other tools and services such as the cloud are increasingly used
    in game development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将继续探讨 **Microsoft Game Dev**（之前称为 Microsoft Game Stack）、**Microsoft Azure
    云** 和 **Microsoft Azure PlayFab**，因为现代游戏开发所需工具不仅限于游戏引擎；其他工具和服务，如云，在游戏开发中的应用越来越广泛。
- en: 'The following key topics will be included in our learning path:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的学习路径将包括以下关键主题：
- en: Introducing Microsoft Game Dev, Microsoft Azure Cloud, and Azure PlayFab
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Microsoft Game Dev、Microsoft Azure 云和 Azure PlayFab
- en: Setting up Azure PlayFab for a Unity project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Unity 项目设置 Azure PlayFab
- en: Signing up and logging in players using Azure PlayFab in Unity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure PlayFab 在 Unity 中注册和登录玩家
- en: Implementing a leaderboard using Azure PlayFab in Unity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Unity 中使用 Azure PlayFab 实现排行榜
- en: By the end of this chapter, you will understand what Microsoft Game Dev, Microsoft
    Azure Cloud, and Microsoft Azure PlayFab are and how to set up Azure PlayFab in
    a Unity project and use Azure PlayFab's API to implement registration, login,
    and leaderboard functions in Unity.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解 Microsoft Game Dev、Microsoft Azure 云和 Microsoft Azure PlayFab 是什么，以及如何在
    Unity 项目中设置 Azure PlayFab 并使用 Azure PlayFab 的 API 实现注册、登录和排行榜功能。
- en: Sounds exciting! Now, let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很激动人心！现在，让我们开始吧！
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the example project that will be used in this chapter, namely
    `Chapter11-AzurePlayFabAndUnity`, in the following GitHub repository: [https://github.com/PacktPublishing/Game-Development-with-Unity-for-.NET-Developers](https://github.com/PacktPublishing/Game-Development-with-Unity-for-.NET-Developers).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下 GitHub 仓库中找到本章将使用的示例项目，即 `Chapter11-AzurePlayFabAndUnity`：[https://github.com/PacktPublishing/Game-Development-with-Unity-for-.NET-Developers](https://github.com/PacktPublishing/Game-Development-with-Unity-for-.NET-Developers)。
- en: Introducing Microsoft Game Dev, Microsoft Azure Cloud, and Azure PlayFab
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Microsoft Game Dev、Microsoft Azure 云和 Azure PlayFab
- en: We have learned how to use the Unity engine to develop games. However, modern
    game development requires not only game engines but also other tools, such as
    cloud services.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用 Unity 引擎开发游戏。然而，现代游戏开发不仅需要游戏引擎，还需要其他工具，例如云服务。
- en: Microsoft Game Dev
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Game Dev
- en: 'In 2019, Microsoft announced Microsoft Game Stack, now known as Microsoft Game
    Dev, which aims to provide game developers with the tools and services they need
    to easily create and operate games:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2019 年，微软宣布了 Microsoft Game Stack，现在称为 Microsoft Game Dev，旨在为游戏开发者提供他们轻松创建和运营游戏所需的工具和服务：
- en: '![Figure 11.1 – Microsoft Game Dev products (from the Game Dev website)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.1 – Microsoft Game Dev 产品（来自 Game Dev 网站）'
- en: '](img/Figure_11.01_B17146.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.01_B17146.jpg)'
- en: Figure 11.1 – Microsoft Game Dev products (from the Game Dev website)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – Microsoft Game Dev 产品（来自 Game Dev 网站）
- en: These tools and services in Microsoft Game Dev include not only DirectX, Visual
    Studio, Xbox Services, App Center, and Havok, which are commonly used by game
    developers to complete game development and content creation, but also cloud-based
    services such as Microsoft Azure Cloud and Azure PlayFab, which all come together
    to form a powerful ecosystem that every game developer can use, as shown in *Figure
    11.1*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 微软游戏开发中的这些工具和服务不仅包括 DirectX、Visual Studio、Xbox 服务、App Center 和 Havok，这些都是游戏开发者完成游戏开发和内容创作时常用的，还包括基于云的服务，如微软
    Azure 云和 Azure PlayFab，所有这些共同构成了一个强大的生态系统，每个游戏开发者都可以使用，如图 *图 11.1* 所示。
- en: The Microsoft Azure cloud and Azure PlayFab are important parts of Microsoft
    Game Dev. Not only are more and more modern games requiring multiplayer support
    but it is also becoming more common for single-player games to store player data
    in the cloud. Therefore, the cloud is becoming more and more important in game
    development.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 微软 Azure 云和 Azure PlayFab 是微软游戏开发的重要组成部分。不仅越来越多的现代游戏需要多人支持，而且单机游戏将玩家数据存储在云中的情况也越来越普遍。因此，云在游戏开发中的重要性日益增加。
- en: At the Game Developers Conference in March 2022, Microsoft announced a new program,
    **ID@Azure**, designed to help game developers develop games using the Microsoft
    Azure cloud and Azure PlayFab services. Any game developer can apply to join the
    program, whether they are an independent game developer or a game studio. After
    joining the program, you can get up to $5,000 in Azure credits, so you can access
    many cloud services, get a free Azure PlayFab Standard Plan, get expert support,
    and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2022 年 3 月的游戏开发者大会上，微软宣布了一个新的计划，**ID@Azure**，旨在帮助游戏开发者使用微软 Azure 云和 Azure
    PlayFab 服务来开发游戏。任何游戏开发者都可以申请加入该计划，无论他们是独立游戏开发者还是游戏工作室。加入该计划后，您可以获得高达 5,000 美元的
    Azure 信用额度，因此您可以访问许多云服务，获得免费的 Azure PlayFab 标准计划，获得专家支持等等。
- en: Note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are interested in the ID@Azure program, you can find more information
    at [https://aka.ms/idazure](https://aka.ms/idazure).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对 ID@Azure 计划感兴趣，您可以在 [https://aka.ms/idazure](https://aka.ms/idazure) 找到更多信息。
- en: Now that you have an understanding of what Microsoft Game Dev is, let's move
    on to exploring what the Microsoft Azure cloud and Azure PlayFab are.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了微软游戏开发是什么，让我们继续探讨微软 Azure 云和 Azure PlayFab 是什么。
- en: Microsoft Azure Cloud
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微软 Azure 云
- en: 'Microsoft Azure is a cloud computing service platform where you can find the
    following services:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微软 Azure 是一个云计算服务平台，您可以在其中找到以下服务：
- en: '**Cloud computing** services, such as Azure App Service, Azure Functions, and
    Azure Virtual Machines'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云计算**服务，例如 Azure 应用服务、Azure 函数和 Azure 虚拟机'
- en: '**Database** services, such as Cosmos DB, Azure SQL Database, and Azure Cache
    for Redis'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**服务，例如 Cosmos DB、Azure SQL 数据库和 Azure Cache for Redis'
- en: '**Storage** services, such as an Azure Storage account and Data Lake Storage'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**服务，例如 Azure 存储帐户和数据湖存储'
- en: '**Networking** services, such as Azure Application Gateway, Azure Firewall,
    and Azure Load Balancer'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**服务，例如 Azure 应用网关、Azure 防火墙和 Azure 负载均衡器'
- en: '**Analytics** services, such as Azure Data Factory and Azure Synapse Analytics'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**服务，例如 Azure 数据工厂和 Azure Synapse 分析'
- en: '**Security** services, such as Azure Defender and Azure DDoS Protection'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**服务，例如 Azure 防御者和 Azure DDoS 保护'
- en: '**AI** services, such as Azure Cognitive Services and Azure Bot Service'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人工智能**服务，例如 Azure 认知服务和 Azure 机器人服务'
- en: 'In the game industry, game servers are usually deployed in data centers as
    close as possible to players, which not only reduces network latency but also
    meets data sovereignty requirements in certain countries and regions:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏行业中，游戏服务器通常部署在尽可能靠近玩家的数据中心，这不仅减少了网络延迟，还满足了一些国家和地区的数据主权要求：
- en: '![Figure 11.2 – The Microsoft Azure global infrastructure'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.2 – 微软 Azure 全球基础设施'
- en: '](img/Figure_11.02_B17146.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.02_B17146.jpg)'
- en: Figure 11.2 – The Microsoft Azure global infrastructure
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 微软 Azure 全球基础设施
- en: According to data from Microsoft, the Microsoft Azure cloud covers 140 countries
    and regions around the world, and the number of available areas is more than any
    other cloud platform. The huge global coverage helps game developers quickly deploy
    game services for target countries or regions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据微软的数据，微软 Azure 云覆盖了全球 140 个国家和地区，可用的区域数量超过任何其他云平台。巨大的全球覆盖范围有助于游戏开发者快速为目标国家或地区部署游戏服务。
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can find more information about the Microsoft Azure Global Infrastructure
    at [https://infrastructuremap.microsoft.com/explore](https://infrastructuremap.microsoft.com/explore).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://infrastructuremap.microsoft.com/explore](https://infrastructuremap.microsoft.com/explore)找到有关Microsoft
    Azure全球基础设施的更多信息。
- en: In addition to using Azure data centers to host games, game developers can also
    develop games using Azure virtual machines on the Microsoft Azure cloud. A new
    Azure Game Development Virtual Machine was announced at the Game Developers Conference
    in March 2022, which is customized for game developers and pre-installed with
    tools such as the Microsoft Game Development Kit, Visual Studio 2019 Community
    Edition, and Blender to enable game production on the cloud.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Azure数据中心托管游戏外，游戏开发者还可以在Microsoft Azure云上使用Azure虚拟机开发游戏。2022年3月在游戏开发者大会上宣布了一款新的Azure游戏开发虚拟机，它针对游戏开发者定制，并预装了如Microsoft游戏开发工具包、Visual
    Studio 2019社区版和Blender等工具，以实现云上游戏制作。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are interested in the Azure Game Development Virtual Machine, you can
    find more information at [https://aka.ms/gamedevvmdocs](https://aka.ms/gamedevvmdocs).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Azure游戏开发虚拟机感兴趣，您可以在[https://aka.ms/gamedevvmdocs](https://aka.ms/gamedevvmdocs)找到更多信息。
- en: Azure PlayFab
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure PlayFab
- en: PlayFab is a complete backend service for building and operating real-time games.
    In early 2018, Microsoft acquired PlayFab. Now, PlayFab has joined the Azure family
    and changed its name to Azure PlayFab, becoming a part of Azure. Azure PlayFab
    combines the Azure cloud with PlayFab; the Azure cloud brings reliability, global-scale
    accessibility, and enterprise-grade security, while PlayFab provides game developers
    with a complete game backend service.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: PlayFab是构建和运营实时游戏的完整后端服务。2018年初，微软收购了PlayFab。现在，PlayFab已加入Azure家族，并将其名称更改为Azure
    PlayFab，成为Azure的一部分。Azure PlayFab将Azure云与PlayFab结合；Azure云带来可靠性、全球可访问性和企业级安全性，而PlayFab为游戏开发者提供完整的游戏后端服务。
- en: 'As a complete backend service solution, Azure PlayFab mainly provides the following
    functions for game developers to develop games:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为完整的后端服务解决方案，Azure PlayFab主要提供以下功能，供游戏开发者开发游戏：
- en: Built-in authentication that game developers can use to enable player registration,
    login, and even track players across devices
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏开发者可以使用内置的身份验证来启用玩家注册、登录，甚至跨设备跟踪玩家
- en: The ability to create dynamically scaled multiplayer servers and manage player
    data on the cloud
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够创建动态扩展的多玩家服务器并在云上管理玩家数据
- en: The ability to easily implement a leaderboard on the backend server
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够轻松在后台服务器上实现排行榜
- en: Note
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Azure PlayFab also provides other services for maintaining and operating games,
    such as **Liveops** (short for **Live Operations**) and data analytics services,
    which can be used to manage game content, such as making updates to a game without
    releasing a new version, and reporting and analyzing game data daily. They are
    beyond what we need here, but if you're interested, you can find out more at [https://docs.microsoft.com/en-us/gaming/playfab](https://docs.microsoft.com/en-us/gaming/playfab).
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Azure PlayFab还提供其他用于维护和运营游戏的服务，例如**Liveops**（即**实时操作**）和数据分析服务，这些服务可以用来管理游戏内容，例如在不发布新版本的情况下更新游戏，以及每日报告和分析游戏数据。它们超出了我们在这里的需求，但如果您感兴趣，您可以在[https://docs.microsoft.com/en-us/gaming/playfab](https://docs.microsoft.com/en-us/gaming/playfab)了解更多信息。
- en: In the rest of this chapter, we will integrate Azure PlayFab into a Unity project
    to implement player registration, login, data saving, loading, and a leaderboard.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的剩余部分，我们将集成Azure PlayFab到Unity项目中，以实现玩家注册、登录、数据保存、加载和排行榜。
- en: Let's move on!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进！
- en: Setting up Azure PlayFab for a Unity project
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Unity项目中设置Azure PlayFab
- en: 'In this example, we will add player registration, login, data saving, loading,
    and leaderboard functions to a *Flappy Bird*-style game in Unity:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将向Unity中的*Flappy Bird*风格游戏添加玩家注册、登录、数据保存、加载和排行榜功能：
- en: '![Figure 11.3 – The Unity project'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.3 – Unity项目'
- en: '](img/Figure_11.03_B17146.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.03_B17146.jpg)'
- en: Figure 11.3 – The Unity project
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – Unity项目
- en: Next, we will first create a new Azure PlayFab account, set up a game studio
    and a game title in Azure PlayFab, and then set up the Azure PlayFab SDK in this
    Unity project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将首先创建一个新的Azure PlayFab账户，在Azure PlayFab中设置游戏工作室和游戏标题，然后在此Unity项目中设置Azure
    PlayFab SDK。
- en: Creating a new Azure PlayFab account
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的Azure PlayFab账户
- en: 'First of all, we need a new Azure PlayFab account. To create a new Azure Playfab
    account, let''s perform the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个新的 Azure PlayFab 账户。要创建新的 Azure Playfab 账户，让我们执行以下步骤：
- en: 'Visit the home page of Microsoft Azure PlayFab at [https://playfab.com/](https://playfab.com/)
    and click the **SIGN UP** button at the upper-right corner to open the sign-up
    page:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Microsoft Azure PlayFab 的主页 [https://playfab.com/](https://playfab.com/)
    并点击右上角的**注册**按钮以打开注册页面：
- en: '![Figure 11.4 – The home page of Azure PlayFab'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.4 – Azure PlayFab 的主页'
- en: '](img/Figure_11.04_B17146.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.04 – B17146.jpg](img/Figure_11.04_B17146.jpg)'
- en: Figure 11.4 – The home page of Azure PlayFab
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – Azure PlayFab 的主页
- en: 'Enter your email address and password on the sign-up page and click the **Create
    a free account** button:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册页面输入您的电子邮件地址和密码，然后点击**创建免费账户**按钮：
- en: '![Figure 11.5 – Creating a free account'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.5 – 创建免费账户'
- en: '](img/Figure_11.05_B17146.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.05 – B17146.jpg](img/Figure_11.05_B17146.jpg)'
- en: Figure 11.5 – Creating a free account
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 创建免费账户
- en: 'You will then receive a verification email from Azure PlayFab to verify your
    email address; click **VERIFY YOUR EMAIL ADDRESS**:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将收到来自 Azure PlayFab 的验证邮件以验证您的电子邮件地址；点击**验证您的电子邮件地址**：
- en: '![Figure 11.6 – An email address verification from Azure PlayFab'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.6 – Azure PlayFab 的电子邮件地址验证'
- en: '](img/Figure_11.06_B17146.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.06 – B17146.jpg](img/Figure_11.06_B17146.jpg)'
- en: Figure 11.6 – An email address verification from Azure PlayFab
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – Azure PlayFab 的电子邮件地址验证
- en: 'After the email address verification is complete, you can log in with the Azure
    PlayFab account you just created, and you can see your game studio and a game
    title already set up in the Azure PlayFab developer portal, also known as **Game
    Manager** in Azure PlayFab:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 邮件地址验证完成后，您可以使用您刚刚创建的 Azure PlayFab 账户登录，您可以在 Azure PlayFab 开发者门户中看到您的游戏工作室和已设置的游戏标题，在
    Azure PlayFab 中也称为**游戏管理器**：
- en: '![Figure 11.7 – My Game Studio in Azure PlayFab'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.7 – Azure PlayFab 中的我的游戏工作室'
- en: '](img/Figure_11.07_B17146.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.07 – B17146.jpg](img/Figure_11.07_B17146.jpg)'
- en: Figure 11.7 – My Game Studio in Azure PlayFab
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – Azure PlayFab 中的我的游戏工作室
- en: Now that we have created a new Azure PlayFab account, we can start looking at
    how to set up a game studio and a game title in Azure PlayFab.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经创建了新的 Azure PlayFab 账户，我们可以开始了解如何在 Azure PlayFab 中设置游戏工作室和游戏标题。
- en: Setting up a game studio and a game title in Azure PlayFab
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Azure PlayFab 中设置游戏工作室和游戏标题
- en: 'After creating an Azure PlayFab account, the next task is to set up your own
    game studio and game title:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure PlayFab 中创建账户后，下一个任务是设置您自己的游戏工作室和游戏标题：
- en: 'The default game studio is called **My Game Studio**, which doesn''t make much
    sense, so you can click **...** | **Studio settings** on the right to open the
    **Edit Studio** page:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认游戏工作室称为**我的游戏工作室**，这也没有什么意义，因此您可以点击右侧的**...** | **工作室设置**以打开**编辑工作室**页面：
- en: '![](img/Figure_11.08_B17146.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.08 – B17146.jpg](img/Figure_11.08_B17146.jpg)'
- en: Figure 11.8 – Opening the Edit Studio page
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 打开编辑工作室页面
- en: 'On the `UnityBook` and click the **Save studio** button to save:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `UnityBook` 上点击**保存工作室**按钮以保存：
- en: '![Figure 11.9 – Changing the studio name to UnityBook'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.9 – 将工作室名称更改为 UnityBook'
- en: '](img/Figure_11.09_B17146.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.09 – B17146.jpg](img/Figure_11.09_B17146.jpg)'
- en: Figure 11.9 – Changing the studio name to UnityBook
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 将工作室名称更改为 UnityBook
- en: 'Similarly, the default game title is **My Game**, which also doesn''t make
    much sense. As shown in the following figure, you can click the gear button and
    then **Edit title info** to open the **Edit Title** page:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，默认游戏标题是**我的游戏**，这也没有什么意义。如图所示，您可以点击齿轮按钮，然后**编辑标题信息**以打开**编辑标题**页面：
- en: '![Figure 11.10 – Opening the Edit Title page'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.10 – 打开编辑标题页面'
- en: '](img/Figure_11.10_B17146.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.10 – B17146.jpg](img/Figure_11.10_B17146.jpg)'
- en: Figure 11.10 – Opening the Edit Title page
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 打开编辑标题页面
- en: 'On the `Chapter11-AzurePlayfabAndUnity` and click **Save title** to save:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter11-AzurePlayfabAndUnity` 上点击**保存标题**以保存：
- en: '![Figure 11.11 – Changing the title name'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.11 – 更改标题名称'
- en: '](img/Figure_11.11_B17146.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.11 – B17146.jpg](img/Figure_11.11_B17146.jpg)'
- en: Figure 11.11 – Changing the title name
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 更改标题名称
- en: Now that we have set up a game studio and a game title in Azure PlayFab, let's
    turn our attention to setting up the Azure PlayFab SDK in the Unity project!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经设置了 Azure PlayFab 中的游戏工作室和游戏标题，让我们将注意力转向在 Unity 项目中设置 Azure PlayFab SDK！
- en: Setting up the Azure PlayFab SDK in the Unity project
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Unity 项目中设置 Azure PlayFab SDK
- en: 'In order to access the API in Azure PlayFab from Unity, we need to import the
    Azure PlayFab SDK into the Unity project first:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 Unity 访问 Azure PlayFab 中的 API，我们首先需要将 Azure PlayFab SDK 导入到 Unity 项目中：
- en: 'You can find the Azure PlayFab SDK at [https://docs.microsoft.com/en-us/gaming/playfab/sdks/unity3d/](https://docs.microsoft.com/en-us/gaming/playfab/sdks/unity3d/).
    Here, you can also find the link to the Unity PlayFab SDK GitHub repository, as
    shown in *Figure 11.12*:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.microsoft.com/en-us/gaming/playfab/sdks/unity3d/](https://docs.microsoft.com/en-us/gaming/playfab/sdks/unity3d/)
    找到 Azure PlayFab SDK。在这里，您还可以找到 Unity PlayFab SDK GitHub 仓库的链接，如图 *Figure 11.12*
    所示：
- en: '![Figure 11.12 – The Azure PlayFab SDK download links'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.12 – Azure PlayFab SDK 下载链接'
- en: '](img/Figure_11.12_B17146.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.12_B17146.jpg)'
- en: Figure 11.12 – The Azure PlayFab SDK download links
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 11.12 – Azure PlayFab SDK 下载链接
- en: 'Drag and drop the `UnitySDK` package you just downloaded into the Unity Editor.
    The **Import Unity Package** window will pop up, where you can preview the contents
    of the package, and then click the **Import** button to import it into this Unity
    project:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您刚刚下载的 `UnitySDK` 包拖放到 Unity 编辑器中。将弹出的 **导入 Unity 包** 窗口，在这里您可以预览包的内容，然后点击
    **导入** 按钮将其导入到这个 Unity 项目中：
- en: '![Figure 11.13 – Importing the Azure PlayFab SDK'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.13 – 导入 Azure PlayFab SDK'
- en: '](img/Figure_11.13_B17146.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.13_B17146.jpg)'
- en: Figure 11.13 – Importing the Azure PlayFab SDK
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 11.13 – 导入 Azure PlayFab SDK
- en: 'Once the SDK has been imported, you will find the PlayFab menu in the Unity
    Editor toolbar. Then, you can click on **PlayFab** > **MakePlayFabSharedSettings**
    to open the **PlayFabSharedSettings** window, where you need to configure settings
    to connect this Unity project to the game title in Azure PlayFab:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDK 导入后，您将在 Unity 编辑器工具栏中找到 PlayFab 菜单。然后，您可以点击 **PlayFab** > **MakePlayFabSharedSettings**
    以打开 **PlayFabSharedSettings** 窗口，在那里您需要配置设置以将此 Unity 项目连接到 Azure PlayFab 中的游戏标题：
- en: '![Figure 11.14 – The PlayFab SDK has been imported'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.14 – PlayFab SDK 已导入'
- en: '](img/Figure_11.14_B17146.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.14_B17146.jpg)'
- en: Figure 11.14 – The PlayFab SDK has been imported
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 11.14 – PlayFab SDK 已导入
- en: 'In the **Play Fab Shared Settings** window, you should provide the game title
    ID and the developer secret key of your game title, as shown in *Figure 11.15*:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Play Fab 共享设置** 窗口中，您应提供游戏标题的标题 ID 和开发者密钥，如图 *Figure 11.15* 所示：
- en: '![Figure 11.15 – The Play Fab Shared Settings window'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.15 – 游戏标题共享设置窗口'
- en: '](img/Figure_11.15_B17146.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.15_B17146.jpg)'
- en: Figure 11.15 – The Play Fab Shared Settings window
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 11.15 – Play Fab 共享设置窗口
- en: 'In order to find out the game title ID and the developer secret key, you need
    to go back to the developer portal of Azure PlayFab, where you can find the game
    title ID on the game title item:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了找到游戏标题 ID 和开发者密钥，您需要返回 Azure PlayFab 的开发者门户，在那里您可以在游戏标题项中找到游戏标题 ID：
- en: '![Figure 11.16 – The game title ID'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.16 – 游戏标题 ID'
- en: '](img/Figure_11.16_B17146.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.16_B17146.jpg)'
- en: Figure 11.16 – The game title ID
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 11.16 – 游戏标题 ID
- en: 'The developer secret key is tightly coupled to the game title in Azure PlayFab,
    so on the developer portal, you first need to click on the title item to open
    the overview page of the game title. As shown in the following figure, you need
    to click on the gear button and then click **Title settings** to open the settings
    page of the game title:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者密钥与 Azure PlayFab 中的游戏标题紧密相关，因此您需要在开发者门户上首先点击标题项以打开游戏标题的概述页面。如图所示，您需要点击齿轮按钮，然后点击
    **标题设置** 以打开游戏标题的设置页面：
- en: '![Figure 11.17 – The Overview page of the game title'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.17 – 游戏标题概述页面'
- en: '](img/Figure_11.17_B17146.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.17_B17146.jpg)'
- en: Figure 11.17 – The Overview page of the game title
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 11.17 – 游戏标题概述页面
- en: 'In the settings page of the game title, select the **Secret Keys** tab to switch
    to the secret keys settings, where you can find the default developer secret key:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏标题的设置页面中，选择 **密钥** 选项卡以切换到密钥设置，在那里您可以找到默认的开发者密钥：
- en: '![Figure 11.18 – The Secret Keys page'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.18 – 密钥页面'
- en: '](img/Figure_11.18_B17146.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.18_B17146.jpg)'
- en: Figure 11.18 – The Secret Keys page
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 11.18 – 密钥页面
- en: Go back to the **Play Fab Shared Settings** window in Unity, and use the title
    ID and the developer secret key you just got from the Azure PlayFab developer
    portal to set the title ID and the developer secret key.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Unity 中的 **游戏标题共享设置** 窗口，并使用您刚刚从 Azure PlayFab 开发者门户获取的标题 ID 和开发者密钥设置标题 ID
    和开发者密钥。
- en: Now that we have set up the Azure PlayFab SDK for this Unity project, you should
    now have an understanding of Azure PlayFab, including the Azure PlayFab developer
    portal, (which is also called Game Manager), how to set up a game studio and a
    game title, and how to import Azure PlayFab's SDK into a Unity project and connect
    the game title in Azure PlayFab to the project. Next, let's move on to exploring
    how to register and log in a player via Azure PlayFab.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为这个Unity项目设置了Azure PlayFab SDK，你应该已经了解了Azure PlayFab，包括Azure PlayFab开发者门户（也称为游戏管理器），如何设置游戏工作室和游戏标题，以及如何将Azure
    PlayFab的SDK导入Unity项目并将Azure PlayFab中的游戏标题连接到项目。接下来，让我们继续探讨如何通过Azure PlayFab注册和登录玩家。
- en: Signing up and logging in players using Azure PlayFab in Unity
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure PlayFab在Unity中注册和登录玩家
- en: 'In the demo project mentioned in the *Technical requirements* section, you
    can find the signup and login UI panel in **AzurePlayFabIntegration folder** |
    **StartScene**, which we will use to implement the signup and login functionality:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在*技术要求*部分提到的演示项目中，你可以在**AzurePlayFabIntegration文件夹** | **StartScene**中找到注册和登录UI面板，我们将使用它来实现注册和登录功能：
- en: '![Figure 11.19 – The signup tab (left) and the login tab (right) on the UI
    panel'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.19 – UI面板上的注册标签页（左）和登录标签页（右）]'
- en: '](img/Figure_11.19_B17146.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.19_B17146.jpg)'
- en: Figure 11.19 – The signup tab (left) and the login tab (right) on the UI panel
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.19 – UI面板上的注册标签页（左）和登录标签页（右）
- en: As shown in *Figure 11.19*, like many common signup and login pages, the signup
    and login UI panels in our example also have two tabs, namely the signup tab and
    the login tab, which can be switched by clicking the red reminder text on the
    panel. The signup tab requires the player to provide a username, email, and password
    to create a new player account in Azure PlayFab, while the login tab only requires
    the player to provide the email and password to log in.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图11.19*所示，像许多常见的注册和登录页面一样，我们示例中的注册和登录UI面板也有两个标签页，即注册标签页和登录标签页，可以通过点击面板上的红色提醒文本进行切换。注册标签页要求玩家提供用户名、电子邮件和密码以在Azure
    PlayFab中创建新的玩家账户，而登录标签页仅要求玩家提供电子邮件和密码进行登录。
- en: Signing up players in Azure PlayFab
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Azure PlayFab中注册玩家
- en: 'Next, let''s take a look at how to implement the signup function first:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们首先看看如何实现注册功能：
- en: 'Create a new folder in the `AzurePlayFabIntegration` folder and name it `Scripts`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AzurePlayFabIntegration`文件夹中创建一个新的文件夹并命名为`Scripts`：
- en: '![Figure 11.20 – Creating a Scripts folder'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.20 – 创建一个Scripts文件夹'
- en: '](img/Figure_11.20_B17146.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.20_B17146.jpg)'
- en: Figure 11.20 – Creating a Scripts folder
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.20 – 创建一个Scripts文件夹
- en: 'Create a new C# script in the `Scripts` folder, name it `AzurePlayFabAccountManager`,
    and add the following code:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Scripts`文件夹中创建一个新的C#脚本，命名为`AzurePlayFabAccountManager`，并添加以下代码：
- en: '[PRE0]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is quite a long script; let''s break down the code as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当长的脚本；让我们如下分解代码：
- en: We add `System.Security.Cryptography` and the `System.Text` namespace with the
    `using` keyword to encrypt the password in the `Encrypt` method.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`using`关键字添加`System.Security.Cryptography`和`System.Text`命名空间，以便在`Encrypt`方法中加密密码。
- en: We add `PlayFab` and the `PlayFab.ClientModels` namespace with the `using` keyword
    to access the API that Azure PlayFab offers.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`using`关键字添加`PlayFab`和`PlayFab.ClientModels`命名空间，以便访问Azure PlayFab提供的API。
- en: In the `fields` section, we reference three `InputField` UI elements to provide
    the username, email address, and password. Also, we get a reference to the `Text`
    UI element to display the message from Azure PlayFab.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`fields`部分，我们引用了三个`InputField` UI元素来提供用户名、电子邮件地址和密码。同时，我们还获取了`Text` UI元素的引用来显示来自Azure
    PlayFab的消息。
- en: We create a new instance of `RegisterPlayFabUserRequest` and call `PlayFabClientAPI.RegisterPlayFabUser`
    to register this user in Azure PlayFab.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建一个`RegisterPlayFabUserRequest`的新实例，并调用`PlayFabClientAPI.RegisterPlayFabUser`来在Azure
    PlayFab中注册此用户。
- en: We also have two callbacks – `OnRegisterSuccess`, which is called when the result
    is received, and `OnError`, which is called when an error occurs.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还有两个回调函数 —— `OnRegisterSuccess`，当接收到结果时会被调用，以及`OnError`，当发生错误时会被调用。
- en: In `OnRegisterSuccess`, we create a new instance of `UpdateUserTitleDisplayNameRequest`
    and call `PlayFabClientAPI.UpdateUserTitleDisplayName` to update the user's display
    name with the username at registration; otherwise, the user's display name is
    an empty string by default. Also, you can use this method to allow the user to
    change the account's display name in the future.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `OnRegisterSuccess` 中，我们创建了一个新的 `UpdateUserTitleDisplayNameRequest` 实例，并调用
    `PlayFabClientAPI.UpdateUserTitleDisplayName` 来更新用户在注册时的用户名作为显示名；否则，用户的显示名默认为空字符串。此外，您还可以使用此方法允许用户在未来更改账户的显示名。
- en: 'Drag and drop `AzurePlayFabAccountManager.cs` onto the **SignupAndLogin** GameObject
    in the scene, and assign the UI elements to the corresponding fields, as shown
    in *Figure 11.21*:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `AzurePlayFabAccountManager.cs` 拖放到场景中的 **SignupAndLogin** GameObject 上，并将
    UI 元素分配到相应的字段，如图 *图 11.21* 所示：
- en: '![Figure 11.21 – Setting up AzurePlayFabAccountManager'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.21 – 设置 AzurePlayFabAccountManager'
- en: '](img/Figure_11.21_B17146.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.21_B17146.jpg)'
- en: Figure 11.21 – Setting up AzurePlayFabAccountManager
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21 – 设置 AzurePlayFabAccountManager
- en: 'Select the `AzurePlayFabAccountManager` is attached to, and finally, select
    the method defined in the `AzurePlayFabAccountManager` class that will be called
    when the button is clicked, namely `OnSignUpButtonClick`, as shown in *Figure
    11.22*:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择附加了 `AzurePlayFabAccountManager` 的对象，最后，选择在按钮点击时将在 `AzurePlayFabAccountManager`
    类中调用的方法，如图 *图 11.22* 所示：
- en: '![](img/Figure_11.22_B17146.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.22_B17146.jpg)'
- en: Figure 11.22 – Setting up the sign-up button
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – 设置注册按钮
- en: 'Run the game, and enter the username, email address, and password in the `register
    user` request to Azure PlayFab. As shown in the following figure, a new account
    is created:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行游戏，并在向 Azure PlayFab 发送的 `register user` 请求中输入用户名、电子邮件地址和密码。如图所示，创建了一个新账户：
- en: '![Figure 11.23 – A new account is created'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.23 – 创建了一个新账户'
- en: '](img/Figure_11.23_B17146.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.23_B17146.jpg)'
- en: Figure 11.23 – A new account is created
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.23 – 创建了一个新账户
- en: 'Let''s go back to the dashboard of the game title in Azure PlayFab. In the
    dashboard, you can see that there is a new API call and a new user has been created.
    Then, we can also click the **Players** button to open the **Players** page for
    more information:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到 Azure PlayFab 中游戏标题的仪表板。在仪表板中，您可以看到有一个新的 API 调用和一个新用户已被创建。然后，我们也可以点击 **Players**
    按钮打开 **Players** 页面以获取更多信息：
- en: '![Figure 11.24 – The dashboard of the game title'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.24 – 游戏标题仪表板'
- en: '](img/Figure_11.24_B17146.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.24_B17146.jpg)'
- en: Figure 11.24 – The dashboard of the game title
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.24 – 游戏标题仪表板
- en: 'Take a look at the player list on the **Players** page; you can see the new
    account we just created. There is also some information about the account, such
    as the last login time, the time the account was created, and which country the
    player logged in from:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看**玩家**页面上的玩家列表；您可以看到我们刚刚创建的新账户。还有一些关于账户的信息，例如最后登录时间、账户创建时间以及玩家登录的国家：
- en: '![Figure 11.25 – The Players page'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.25 – 玩家页面'
- en: '](img/Figure_11.25_B17146.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.25_B17146.jpg)'
- en: Figure 11.25 – The Players page
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.25 – 玩家页面
- en: Now that we've implemented the registration function, it's time to implement
    the login function for the players who have accounts.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了注册功能，是时候为已有账户的玩家实现登录功能了。
- en: Logging in players in Azure PlayFab
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Azure PlayFab 中登录玩家
- en: 'By taking the following steps, we will require players to provide an email
    and password to log in, and if the login is successful, they will jump to our
    *Flappy Bird*-style game scene:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤，我们将要求玩家提供电子邮件和密码进行登录，如果登录成功，他们将跳转到我们的 *Flappy Bird*-风格游戏场景：
- en: 'Go back to the `AzurePlayFabAccountManager` script and add the following code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `AzurePlayFabAccountManager` 脚本，并添加以下代码：
- en: '[PRE1]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s break down the newly added code as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下方式分解新添加的代码：
- en: First of all, the `UnityEngine.SceneManagement` namespace is added with the
    `using` keyword. This is because if the player logs in successfully, we need to
    switch the scene from the login scene to the game scene, and the logic related
    to scene loading is defined in this namespace.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，使用 `using` 关键字添加了 `UnityEngine.SceneManagement` 命名空间。这是因为如果玩家成功登录，我们需要将场景从登录场景切换到游戏场景，而与场景加载相关的逻辑定义在这个命名空间中。
- en: We create a new instance of `LoginWithEmailAddressRequest` and call `PlayFabClientAPI.LoginWithEmailAddress`
    to log the player into Azure PlayFab.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个新的 `LoginWithEmailAddressRequest` 实例，并调用 `PlayFabClientAPI.LoginWithEmailAddress`
    来将玩家登录到 Azure PlayFab。
- en: In addition to using email to log in, Azure PlayFab also offers multiple login
    methods, such as calling `PlayFabClientAPI .LoginWithFacebook` to log in with
    a Facebook access token, and calling `PlayFabClientAPI.LoginWithGameCenter` to
    log in with an iOS Game Center player identifier.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了使用电子邮件登录外，Azure PlayFab 还提供多种登录方式，例如通过调用 `PlayFabClientAPI.LoginWithFacebook`
    使用 Facebook 访问令牌登录，以及调用 `PlayFabClientAPI.LoginWithGameCenter` 使用 iOS Game Center
    玩家标识符登录。
- en: The `SceneManager.LoadScene` method will be called when the player logs in successfully.
    The `SceneManager.LoadScene` method takes an `int` parameter, which is the index
    of the target scene.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当玩家成功登录时，将调用 `SceneManager.LoadScene` 方法。`SceneManager.LoadScene` 方法接受一个 `int`
    参数，即目标场景的索引。
- en: There are two scenes in this example – the first one is `StartScene`, with an
    index of `0`, which allows players to register or log in here; and the second
    is GameScene, with an index of `1`, which allows players to play the game, so
    we use an index of `1` to switch from `StartScene` to `GameScene`.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本例中有两个场景 – 第一个是 `StartScene`，索引为 `0`，允许玩家在此处注册或登录；第二个是 `GameScene`，索引为 `1`，允许玩家玩游戏，因此我们使用索引
    `1` 从 `StartScene` 切换到 `GameScene`。
- en: 'Select the `AzurePlayFabAccountManager` is attached to, and finally, select
    the method defined in the `AzurePlayFabAccountManager` class that will be called
    when the `OnLoginButtonClick` method, as shown in *Figure 11.26*:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `AzurePlayFabAccountManager` 所附加的对象，最后选择在 `OnLoginButtonClick` 方法中调用的 `AzurePlayFabAccountManager`
    类中定义的方法，如图 *图 11.26* 所示：
- en: '![](img/Figure_11.26_B17146.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![img/Figure_11.26_B17146.jpg]'
- en: Figure 11.26 – Setting up the Login button
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.26 – 设置登录按钮
- en: 'Run the game, switch to the login tab, enter the email address and password,
    and then click the **Login** button to send a login user request to Azure PlayFab,
    as shown in the following figure:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行游戏，切换到登录选项卡，输入电子邮件地址和密码，然后点击 **登录** 按钮向 Azure PlayFab 发送登录用户请求，如下图所示：
- en: '![Figure 11.27 – The login tab'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.27 – The login tab'
- en: '](img/Figure_11.27_B17146.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_11.27_B17146.jpg]'
- en: Figure 11.27 – The login tab
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.27 – 登录选项卡
- en: 'Then, if the player logs in successfully, the game scene will be loaded and
    the game will start, as shown in the following figure:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，如果玩家成功登录，游戏场景将被加载，游戏将开始，如下图所示：
- en: '![Figure 11.28 – Playing the game'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.28 – 游戏进行中'
- en: '](img/Figure_11.28_B17146.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_11.28_B17146.jpg]'
- en: Figure 11.28 – Playing the game
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.28 – 游戏进行中
- en: In this section, you learned how to use the Azure PlayFab API to register a
    user, how to update a user's display name in Azure PlayFab via the Azure PlayFab
    API, and how to use that to log into Azure PlayFab from a Unity game. Next, we
    will explore how to implement a leaderboard in a Unity game using Azure PlayFab.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何使用 Azure PlayFab API 注册用户，如何通过 Azure PlayFab API 更新 Azure PlayFab
    中的用户显示名称，以及如何使用它从 Unity 游戏中登录 Azure PlayFab。接下来，我们将探讨如何在 Unity 游戏中使用 Azure PlayFab
    实现排行榜。
- en: Implementing a leaderboard using Azure PlayFab in Unity
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Unity 中使用 Azure PlayFab 实现排行榜
- en: Most games today use leaderboards, which indicate who is the best performer
    in a game and increase gamer engagement with a game. In this section, we will
    be exploring how to implement a leaderboard using Azure PlayFab in our Unity project.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的大多数游戏都使用排行榜，这表明谁是游戏中的最佳表现者，并增加了玩家对游戏的参与度。在本节中，我们将探讨如何在我们的 Unity 项目中使用 Azure
    PlayFab 实现排行榜。
- en: Setting up a leaderboard in Azure PlayFab
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Azure PlayFab 中设置排行榜
- en: 'In order to use Azure PlayFab''s leaderboard feature, we first need to set
    up a leaderboard in the developer portal of Azure PlayFab:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Azure PlayFab 的排行榜功能，我们首先需要在 Azure PlayFab 的开发者门户中设置一个排行榜：
- en: 'Go back to the dashboard of the game title in Azure PlayFab. In the dashboard,
    you will find the **Leaderboards** option in the left column; click it to open
    the **Leaderboards** page:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Azure PlayFab 中游戏标题的仪表板。在仪表板中，你将在左侧列中找到 **排行榜** 选项；点击它以打开 **排行榜** 页面：
- en: '![Figure 11.29 – The Leaderboards option'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.29 – The Leaderboards option'
- en: '](img/Figure_11.29_B17146.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_11.29_B17146.jpg]'
- en: Figure 11.29 – The Leaderboards option
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.29 – 排行榜选项
- en: 'As shown in the following figure, no leaderboard has been created yet, so click
    the **New leaderboard** button to create a new leaderboard in Azure PlayFab:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，尚未创建排行榜，因此请点击 **新建排行榜** 按钮在 Azure PlayFab 中创建一个新的排行榜：
- en: '![Figure 11.30 – Creating a new leaderboard'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.30 – Creating a new leaderboard'
- en: '](img/Figure_11.30_B17146.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_11.30_B17146.jpg]'
- en: Figure 11.30 – Creating a new leaderboard
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.30 – 创建新的排行榜
- en: 'In the **New Leaderboard** settings panel, we will set up three properties
    for this leaderboard, namely **Statistic name**, **Reset frequency**, and **Aggregation
    method**, as shown in *Figure 11.31*:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **新排行榜** 设置面板中，我们将为此排行榜设置三个属性，即 **统计名称**、**重置频率** 和 **聚合方法**，如图 *11.31* 所示：
- en: '![Figure 11.31 – Setting up a new leaderboard'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.31 – 设置新的排行榜'
- en: '](img/Figure_11.31_B17146.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.31_B17146.jpg)'
- en: Figure 11.31 – Setting up a new leaderboard
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.31 – 设置新的排行榜
- en: 'Let''s explain these three properties one by one:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一解释这三个属性：
- en: '`UnityBookGame` in this example.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UnityBookGame` 在此示例中。'
- en: '**Reset frequency** determines how often the leaderboard should be reset. There
    are five options:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重置频率** 决定了排行榜应该多久重置一次。有五个选项：'
- en: '**Manually**: This is the default value, and we leave the reset frequency set
    to this so that the leaderboard doesn''t reset automatically.'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动**：这是默认值，我们保留重置频率设置为这个值，以便排行榜不会自动重置。'
- en: '**Hourly**: Automatically resets the leaderboard every hour.'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每小时**：每小时自动重置排行榜。'
- en: '**Daily**: Automatically resets the leaderboard every day.'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每日**：每天自动重置排行榜。'
- en: '**Weekly**: Automatically resets the leaderboard every week.'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每周**：每周自动重置排行榜。'
- en: '**Monthly**: Automatically resets the leaderboard every month.'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每月**：每月自动重置排行榜。'
- en: '**Aggregation method** determines how the scores from the players are saved.
    There are four options:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合方法** 决定了玩家分数的保存方式。有四个选项：'
- en: '**Last**: This is the default option; it is always updated with a new value,
    regardless of whether it is higher or lower than the existing value.'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最后**：这是默认选项；无论新值是否高于现有值，都会更新为新的值。'
- en: '**Minimum**: Always use the lowest value.'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小值**：始终使用最低值。'
- en: '**Maxmum**: Always use the highest value. We choose this option to save the
    highest score of a player in our game.'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大值**：始终使用最高值。我们选择此选项以保存游戏中玩家的最高分数。'
- en: '**Sum**: Add this value to the existing value.'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总和**：将此值添加到现有值。'
- en: 'Click the **Save** button in the **New Leaderboard** settings panel; then,
    we have an empty leaderboard set up in Azure PlayFab:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **新排行榜** 设置面板中的 **保存** 按钮；然后，我们在 Azure PlayFab 中设置了一个空排行榜：
- en: '![Figure 11.32 – A new empty leaderboard'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.32 – 一个新的空排行榜'
- en: '](img/Figure_11.32_B17146.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.32_B17146.jpg)'
- en: Figure 11.32 – A new empty leaderboard
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.32 – 一个新的空排行榜
- en: 'In order to allow the Unity game to post player statistics requests to Azure
    PlayFab, we also need to enable the **Allow client to post player statistics**
    option in Azure PlayFab. So, click the gear icon at the upper-left corner first,
    and then select the **Title settings** option to open the settings page of the
    game title, as shown in the following figure:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了允许 Unity 游戏向 Azure PlayFab 发布玩家统计信息请求，我们还需要在 Azure PlayFab 中启用 **允许客户端发布玩家统计信息**
    选项。因此，首先点击左上角的齿轮图标，然后选择 **标题设置** 选项以打开游戏标题的设置页面，如图所示：
- en: '![Figure 11.33 – Open the Title settings page'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.33 – 打开标题设置页面'
- en: '](img/Figure_11.33_B17146.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.33_B17146.jpg)'
- en: Figure 11.33 – Open the Title settings page
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.33 – 打开标题设置页面
- en: 'On the settings page, click on the **API Features** tab to switch to the **API
    Features** settings:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置页面，点击 **API 功能** 选项卡以切换到 **API 功能** 设置：
- en: '![](img/Figure_11.34_B17146.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.34_B17146.jpg)'
- en: Figure 11.34 – The API Features settings
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.34 – API 功能设置
- en: 'Scroll down to the **ENABLE API FEATURES** section, enable the **Allow client
    to post player statistics** option, and save, as shown in *Figure 11.35*:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到 **启用 API 功能** 部分，启用 **允许客户端发布玩家统计信息** 选项，并保存，如图 *11.35* 所示：
- en: '![](img/Figure_11.35_B17146.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.35_B17146.jpg)'
- en: Figure 11.35 – Enable the Allow client to post player statistics option
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.35 – 启用允许客户端发布玩家统计信息选项
- en: Now that we've created and set up a leaderboard in Azure PlayFab, let's move
    on to explore how to update the score of a player from Unity using the Azure PlayFab
    API.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 Azure PlayFab 中创建并设置了排行榜，让我们继续探索如何使用 Azure PlayFab API 从 Unity 更新玩家的分数。
- en: Updating the score of a player from Unity using the Azure PlayFab API
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Azure PlayFab API 从 Unity 更新玩家的分数
- en: 'When a player completes a game and has a higher score than before, we want
    to update the player''s score on the leaderboard in Azure PlayFab. Let''s perform
    the following steps to implement it:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家完成游戏并且分数高于之前时，我们希望更新 Azure PlayFab 中的排行榜上的玩家分数。让我们执行以下步骤来实现它：
- en: 'Create a new C# script in the `Scripts` folder, name it `AzurePlayFabLeaderboardManager`,
    and add the following code:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Scripts` 文件夹中创建一个新的 C# 脚本，命名为 `AzurePlayFabLeaderboardManager`，并添加以下代码：
- en: '[PRE2]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s break down the code, as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下方式分解代码：
- en: In the `UpdateLeaderboardInAzurePlayFab` method, we create a new instance of
    the `StatisticUpdate` class, which encapsulates the data that needs to be updated
    for the leaderboard. Here, we provide the name of the leaderboard and the player's
    score.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `UpdateLeaderboardInAzurePlayFab` 方法中，我们创建了一个新的 `StatisticUpdate` 类实例，它封装了需要更新排行榜的数据。在这里，我们提供了排行榜的名称和玩家的分数。
- en: Then, we create a list of `StatisticUpdate` and add the instance of `StatisticUpdate`
    that we just created to it.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个 `StatisticUpdate` 列表并添加了我们刚刚创建的 `StatisticUpdate` 实例到它里面。
- en: After that, we create a new instance of the `UpdatePlayerStatisticsRequest`
    class, which encapsulates the `StatisticUpdate` list we used to update the leaderboard,
    and call `PlayFabClientAPI.UpdatePlayerStatistics` to update the leaderboard in
    Azure PlayFab.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之后，我们创建了一个新的 `UpdatePlayerStatisticsRequest` 类实例，它封装了我们用来更新排行榜的 `StatisticUpdate`
    列表，并调用 `PlayFabClientAPI.UpdatePlayerStatistics` 来更新 Azure PlayFab 中的排行榜。
- en: We also have two callbacks – `OnUpdateSuccess`, which is called when the result
    is received, and `OnError`, which is called when an error occurs.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还有两个回调函数 – `OnUpdateSuccess`，当接收到结果时被调用，以及 `OnError`，当发生错误时被调用。
- en: 'Then, we need to make sure that the `UpdateLeaderboardInAzurePlayFab` method
    will be called when the game is over. So, let''s open the example project''s **Game**
    scene in the **BasicGame** | **Scenes** folder, as shown in *Figure 11.36*:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要确保当游戏结束时将调用 `UpdateLeaderboardInAzurePlayFab` 方法。因此，让我们打开 **BasicGame**
    | **Scenes** 文件夹中的示例项目的 **Game** 场景，如图 *图 11.36* 所示：
- en: '![](img/Figure_11.36_B17146.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.36_B17146.jpg)'
- en: Figure 11.36 – The example game scene
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.36 – 示例游戏场景
- en: 'Create a new GameObject in the `AzurePlayFabManager`, and then drag and drop
    `AzurePlayFabLeaderboardManager.cs` onto it, as shown in *Figure 11.37*:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AzurePlayFabManager` 中创建一个新的 GameObject，然后将 `AzurePlayFabLeaderboardManager.cs`
    拖放到它上面，如图 *图 11.37* 所示：
- en: '![Figure 11.37 – Setting up the GameObject'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.37 – Setting up the GameObject'
- en: '](img/Figure_11.37_B17146.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.37_B17146.jpg)'
- en: Figure 11.37 – Setting up the GameObject
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.37 – 设置 GameObject
- en: 'Next, we need to modify an existing C# script in the example project. You can
    find the `ExampleGameManager.cs` file in the **BasicGame** > **Scripts** folder;
    double-click it to open it, as shown in *Figure 11.38*:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改示例项目中现有的 C# 脚本。您可以在 **BasicGame** > **Scripts** 文件夹中找到 `ExampleGameManager.cs`
    文件；双击它以打开它，如图 *图 11.38* 所示：
- en: '![](img/Figure_11.38_B17146.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.38_B17146.jpg)'
- en: Figure 11.38 – The ExampleGameManager.cs file
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.38 – ExampleGameManager.cs 文件
- en: 'Add the following code to the `ExampleGameManager` class:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `ExampleGameManager` 类中：
- en: '[PRE3]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s break down the added code, as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按以下方式分解添加的代码：
- en: First, we add a new field to get the reference to the instance of `AzurePlayFabLeaderboardManager`.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们添加一个新的字段来获取 `AzurePlayFabLeaderboardManager` 实例的引用。
- en: Then, we call the `UpdateLeaderboardInAzurePlayFab` method in `GameOver` to
    update the leaderboard.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们在 `GameOver` 中调用 `UpdateLeaderboardInAzurePlayFab` 方法来更新排行榜。
- en: 'Remember to assign the reference to the `AzurePlayFabLeaderboardManager` instance
    to the field we just added:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住将 `AzurePlayFabLeaderboardManager` 实例的引用分配到我们刚刚添加的字段：
- en: '![Figure 11.39 – Assigning the reference to the field'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.39 – Assigning the reference to the field'
- en: '](img/Figure_11.39_B17146.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.39_B17146.jpg)'
- en: Figure 11.39 – Assigning the reference to the field
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.39 – 分配引用到字段
- en: 'Let''s go back to the **Start** scene and run the game in the Editor, using
    the player account we created in the previous section to log in and play. In the
    following screenshot, we have **4** points at the end of the game:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到 **Start** 场景并在编辑器中运行游戏，使用我们在上一节中创建的玩家账户登录并玩游戏。在下面的屏幕截图中，我们在游戏结束时获得了 **4**
    分：
- en: '![](img/Figure_11.40_B17146.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_11.40_B17146.jpg)'
- en: Figure 11.40 – We have 4 points in the game
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.40 – 游戏中有 4 分
- en: 'At the same time, go to the **Leaderboard** dashboard of Azure PlayFab, where
    you can see that the player''s highest score is **4** points and they rank first:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，转到 Azure PlayFab 的 **Leaderboard** 仪表板，您可以看到玩家的最高分数是 **4** 分，并且排名第一：
- en: '![Figure 11.41 – The leaderboard in Azure PlayFab'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.41 – Azure PlayFab 中的排行榜'
- en: '](img/Figure_11.41_B17146.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.41_B17146.jpg)'
- en: Figure 11.41 – The leaderboard in Azure PlayFab
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.41 – Azure PlayFab 中的排行榜
- en: We have called the API to update the score of a player on the leaderboard in
    Azure PlayFab from Unity. Our next challenge will be to load the leaderboard data
    from it.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经调用了API来更新Azure PlayFab中Unity排行榜上玩家的分数。我们的下一个挑战将是从中加载排行榜数据。
- en: Loading the leaderboard data from Azure PlayFab in Unity
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Unity中从Azure PlayFab加载排行榜数据
- en: 'In the example project, you also can find the leaderboard panel in **BasicGame**
    | **Scenes** | **GameScene**, which we will use to display the top 10 players
    on the leaderboard loaded from Azure PlayFab. By default, this UI panel is not
    activated, so now, we can''t see it in the **Game** view:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例项目中，你还可以在**BasicGame** | **Scenes** | **GameScene**中找到排行榜面板，我们将使用它来显示从Azure
    PlayFab加载的前10名玩家。默认情况下，此UI面板未激活，因此现在在**Game**视图中看不到它：
- en: '![Figure 11.42 – The leaderboard panel'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.42 – 排行榜面板'
- en: '](img/Figure_11.42_B17146.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.42_B17146.jpg)'
- en: Figure 11.42 – The leaderboard panel
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.42 – 排行榜面板
- en: 'Before we start exploring how to load leaderboard information from Azure PlayFab,
    let''s register more players and add more items to the **UnityBookGame** leaderboard,
    as shown in the following figure:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探索如何从Azure PlayFab加载排行榜信息之前，让我们注册更多玩家并向**UnityBookGame**排行榜添加更多项目，如下面的图所示：
- en: '![Figure 11.43 – The UnityBookGame leaderboard'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.43 – UnityBookGame排行榜'
- en: '](img/Figure_11.43_B17146.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.43_B17146.jpg)'
- en: Figure 11.43 – The UnityBookGame leaderboard
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.43 – UnityBookGame排行榜
- en: 'Then, our first task is to call the Azure PlayFab API in Unity to get leaderboard
    data. To do so, proceed as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的第一个任务是调用Unity中的Azure PlayFab API以获取排行榜数据。为此，请按照以下步骤操作：
- en: 'Go back to the `AzurePlayFabLeaderboardManager` script and add the code, as
    follows:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`AzurePlayFabLeaderboardManager`脚本，并添加以下代码：
- en: '[PRE4]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s break down the added code, as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解添加的代码，如下：
- en: We create a new method and name it `LoadLeaderboardDataFromAzurePlayFab`.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个新方法，并将其命名为`LoadLeaderboardDataFromAzurePlayFab`。
- en: In the `LoadLeaderboardDataFromAzurePlayFab` method, we create a new instance
    of `GetLeaderboardRequest` and call `PlayFabClientAPI.` `GetLeaderboard` to retrieve
    up to `10` entries from the `UnityBookGame` leaderboard, starting at index `0`.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`LoadLeaderboardDataFromAzurePlayFab`方法中，我们创建了一个新的`GetLeaderboardRequest`实例，并调用`PlayFabClientAPI.GetLeaderboard`来从`UnityBookGame`排行榜中检索最多`10`条记录，起始索引为`0`。
- en: We also add a new callback, `OnLoadSuccess`, which is called when the result
    is received to print "`Load Success!`" in the console window.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还添加了一个新的回调`OnLoadSuccess`，当收到结果时在控制台窗口中打印"`Load Success!`"。
- en: 'Then, go back to `ExampleGameManager.cs` and update the code as follows:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，返回到`ExampleGameManager.cs`并更新以下代码：
- en: '[PRE5]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The newly added code will get leaderboard information from Azure PlayFab when
    the game is over.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 新添加的代码将在游戏结束后从Azure PlayFab获取排行榜信息。
- en: 'Run the game and take a look at the console window when the game is over; we
    successfully load leaderboard data from Azure PlayFab, as shown in the following
    screenshot:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏结束后，运行游戏并查看控制台窗口；我们成功从Azure PlayFab加载了排行榜数据，如下面的截图所示：
- en: '![Figure 11.44 – Load Success!'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.44 – 加载成功！'
- en: '](img/Figure_11.44_B17146.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.44_B17146.jpg)'
- en: Figure 11.44 – Load Success!
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.44 – 加载成功！
- en: 'Now that we''ve received successful results from Azure PlayFab, our next task
    is display this data in the leaderboard UI panel in our Unity project:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从Azure PlayFab收到了成功的结果，我们的下一个任务是将在Unity项目中排行榜UI面板中显示这些数据：
- en: 'Go back to the `AzurePlayFabLeaderboardManager` script again and update the
    code, as follows:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次返回到`AzurePlayFabLeaderboardManager`脚本并更新以下代码：
- en: '[PRE6]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s break down the newly added code, as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解新添加的代码，如下：
- en: In the `fields` section, we reference the `Leaderboard` GameObject in the scene;
    this is because the leaderboard panel is not activated by default, and we want
    to activate it at the end of the game to display leaderboard information from
    Azure PlayFab. Additionally, we get a reference to the list of `Text` UI elements
    used to display each item on the leaderboard.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`fields`部分，我们引用场景中的`Leaderboard`GameObject；这是因为排行榜面板默认未激活，我们希望在游戏结束时激活它以显示从Azure
    PlayFab加载的排行榜信息。此外，我们获取用于显示排行榜上每个项目的`Text`UI元素列表的引用。
- en: In `OnLoadSuccess`, we activate the `Leaderboard` GameObject in the scene and
    receive the leaderboard information from Azure PlayFab. Then, call the `CreateRankingItemsInUnity`
    method, which takes `List<PlayerLeaderboardEntry>` as a parameter.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`OnLoadSuccess`中，我们激活场景中的`Leaderboard`GameObject，并从Azure PlayFab接收排行榜信息。然后，调用`CreateRankingItemsInUnity`方法，该方法以`List<PlayerLeaderboardEntry>`作为参数。
- en: In `CreateRankingItemsInUnity`, we update the `Text` UI elements to display
    information about each item, including the player's rank, display name, and score.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`CreateRankingItemsInUnity`中，我们更新了`Text` UI元素，以显示有关每个项目的信息，包括玩家的排名、显示名称和得分。
- en: 'Don''t forget to assign these UI elements to these newly added fields accordingly
    in the `AzurePlayFabManager` GameObject in the **Game** scene, as shown in *Figure
    11.45*:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记将这些UI元素相应地分配到**游戏**场景中**AzurePlayFabManager** GameObject的新增字段中，如图*图 11.45*所示：
- en: '![](img/Figure_11.45_B17146.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图片 11.45_B17146](img/Figure_11.45_B17146.jpg)'
- en: Figure 11.45 – Assigning the UI elements to the newly added fields
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.45 – 将UI元素分配给新添加的字段'
- en: 'Let''s go back to the **Start** scene and run the game. In the following screenshot,
    we can see that the leaderboard UI panel appears at the end of the game and displays
    the ranking information for the top 10 players:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到**开始**场景并运行游戏。在下面的屏幕截图中，我们可以看到排行榜UI面板在游戏结束时出现，并显示了前10名玩家的排名信息：
- en: '![Figure 11.46 – The leaderboard in Unity'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.46 – Unity中的排行榜'
- en: '](img/Figure_11.46_B17146.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 11.46_B17146](img/Figure_11.46_B17146.jpg)'
- en: Figure 11.46 – The leaderboard in Unity
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.46 – Unity中的排行榜'
- en: By reading this section, you should now know how to set up a leaderboard in
    Azure PlayFab, how to update leaderboard data from a Unity game using the Azure
    PlayFab API, and how to use the Azure PlayFab API to get leaderboard data from
    Azure PlayFab and display it in Unity.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读本节，你应该现在知道如何在Azure PlayFab中设置排行榜，如何使用Azure PlayFab API从Unity游戏中更新排行榜数据，以及如何使用Azure
    PlayFab API从Azure PlayFab获取排行榜数据并在Unity中显示。
- en: Summary
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter is the last chapter of the book and the final level of our long
    adventure. Along the way, you've learned a lot of different topics on how to develop
    games with the Unity game engine, which may include areas you're familiar with,
    such as how to implement UI in Unity using the MVVM architectural pattern, or
    there may be content that you have never touched upon before, such as rendering
    pipelines and related mathematical knowledge. I hope you enjoyed the journey and
    are ready for the new challenges ahead.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是本书的最后一章，也是我们漫长冒险的最终阶段。在这个过程中，你学习了如何使用Unity游戏引擎开发游戏的各种不同主题，这可能包括你熟悉的领域，例如如何在Unity中使用MVVM架构模式实现UI，或者可能包含你之前从未接触过的内容，例如渲染管线和相关数学知识。我希望你喜欢这段旅程，并准备好迎接新的挑战。
- en: In addition to the Unity engine itself, this chapter also focuses on Microsoft
    Game Dev, the Microsoft Azure cloud, and Azure PlayFab. We discussed what they
    are and why we should consider using them in game development. Then, we used an
    example project to demonstrate how to create a new Azure PlayFab developer account,
    set up the Azure PlayFab SDK in the Unity project, and implement the registration,
    login and leaderboard functions in Unity through the Azure PlayFab API.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Unity引擎本身之外，本章还重点介绍了Microsoft Game Dev、Microsoft Azure云和Azure PlayFab。我们讨论了它们是什么，以及为什么我们应该考虑在游戏开发中使用它们。然后，我们通过一个示例项目演示了如何创建新的Azure
    PlayFab开发者账户，在Unity项目中设置Azure PlayFab SDK，并通过Azure PlayFab API在Unity中实现注册、登录和排行榜功能。
- en: By reading this chapter and this book, I hope that you now understand that the
    knowledge required for game development is not limited to how to use a game engine;
    it also involves knowledge of programming, computer graphics, and even cloud services.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读本章和本书，我希望你现在明白，游戏开发所需的知识不仅仅局限于如何使用游戏引擎；它还涉及编程、计算机图形学，甚至云服务方面的知识。
- en: While this chapter is the end of the book, this book is only the beginning of
    your game developer journey. Keep learning, and keep growing!
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章是本书的结束，但这本书只是你游戏开发者旅程的开始。继续学习，不断成长！
