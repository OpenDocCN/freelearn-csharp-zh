["```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    public class ConsoleWriter\n    {\n      private object _locker = new object(); \n    }\n    ```", "```cs\n    public void WriteNumbersUnprotected()\n    {\n      for (int numbers = 0; numbers < 5; numbers++)\n      {\n        Thread.Sleep(100);\n        Console.Write(numbers + \",\");\n      }\n      Console.WriteLine();\n    }\n    ```", "```cs\n    public void WriteNumbers()\n    {\n      Monitor.Enter(_locker);\n      try\n      {\n        for (int number = 0; number <= 5; number++)\n        {\n          Thread.Sleep(100);\n          Console.Write(number + \",\");\n        }\n        Console.WriteLine();\n      }\n      finally\n      {\n        Monitor.Exit(_locker);\n      }\n    }\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Main(string[] args)\n    {  \n      var writer = new ConsoleWriter();\n      var taskList = new List<Task>();\t\n    }\n    ```", "```cs\n    for (int i = 0; i < 3; i++)\n    {\n      taskList.Add(Task.Factory.StartNew(()=>\n        {\n          writer.WriteNumbersUnprotected();\n        }));                \n    }\n    ```", "```cs\n    Task.WaitAll(taskList.ToArray());\n    Console.WriteLine(\"Finished. Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    for (int i = 0; i < 3; i++)\n    {\n      taskList.Add(Task.Factory.StartNew(()=>\n        {\n          writer.WriteNumbers();\n        }));                \n    }\n    ```", "```cs\nMonitor.Enter(_locker);\ntry\n{\n\t// Critical Section\n}\nfinally\n{\n  Monitor.Exit(_locker);\n```", "```cs\n    using System.Text;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private double _balance;\n    private object _locker = new object();\n    ```", "```cs\n    public Account(double initialBalance)\n    {\n     _balance = initialBalance;\n    }\n\n    ```", "```cs\n    public double Withdraw(double amount)\n    {\n\n      if (_balance < 0)\n      throw new Exception(\"Account has a negative balance.\");\n      }\n\n      lock (_locker)\n      {\n        if (_balance >= amount)\n        {\n          Console.WriteLine(\"Starting balance :  \" + _balance);\n          Console.WriteLine(\"Withdraw  amount : -\" + amount);\n          _balance = _balance - amount;\n          Console.WriteLine(\"Current balance :  \" + _balance);\n          return amount;\n        }\n        else\n        {\n          return 0;\n        }\n      }\n    }\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void DoTransactions(Account account)\n    {\n      Random r = new Random();\n      for (int i = 0; i < 10; i++)\n      {\n        account.Withdraw((double)r.Next(1, 100));\n      }\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n      Account account = new Account(1000);\n      Task task1 = Task.Factory.StartNew(() => DoTransactions(account));\n      Task task2 = Task.Factory.StartNew(() => DoTransactions(account));\n      Console.ReadLine();\n    }\n    ```", "```cs\nlock (this)\n{\n  //This is the critical section\n}\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    class Account\n    {\n      public int Balance { get; set; }\n    }\n    ```", "```cs\n    var account = new Account();\n    var spinLock = new SpinLock();\n    var taskList = new List<Task>();\n    ```", "```cs\n    for (int i = 0; i < 5; i++)\n    {\n      taskList.Add(Task.Factory.StartNew(() =>\n      {\n        for (int x = 0; x < 50; x++)\n        {\n          bool lockAquired = false;\n          try\n          {\n            spinLock.Enter(ref lockAquired); \n            Thread.Sleep(50);\n            account.Balance = account.Balance + 10;\n            Console.WriteLine(\"Task {0} added 10 to the balance.\", \n                Thread.CurrentThread.ManagedThreadId);     \n          }\n          finally\n          {\n            if(lockAquired) spinLock.Exit();\n          }\n        }\n      }));\n    }\n    ```", "```cs\n    Task.WaitAll(taskList.ToArray());\n    Console.WriteLine(\"Expected account balance: 2500,  Actual account balance:      {0}\", account.Balance);\n    Console.ReadLine();\n    ```", "```cs\nbool lockAquired = false;\ntry\n{\n  spinLock.Enter(ref lockAquired); \n  //Critical section                               \n}\nfinally\n{\n  if(lockAquired) spinLock.Exit();\n}\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    class Account\n    {\n      public int Balance = 0;\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n      var account = new Account();            \n      var taskList = new List<Task>();  \n    }\n    ```", "```cs\n    for (int i = 0; i < 5; i++)\n    {\n      taskList.Add(Task.Factory.StartNew(() =>\n      {\n        for (int x = 0; x < 50; x++)\n        {\n          Thread.Sleep(50);\n          Interlocked.Add(ref account.Balance, 10);\n          Console.WriteLine(\"Task {0} added 10 to the balance.\", \n            Thread.CurrentThread.ManagedThreadId);                       \n        }\n      }));\n    }\n    ```", "```cs\n    Task.WaitAll(taskList.ToArray());\n    Console.WriteLine(\"Expected account balance: 2500,  \n        Actual account balance: {0}\", account.Balance);\n    Console.ReadLine();\n    ```", "```cs\nInterlocked.Add(ref account.Balance, 10);\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void OperationWithBarrier(Barrier barrier)\n    {\n\n    }\n    ```", "```cs\n    for (int i = 0; i < 3; ++i)\n    {\n      var threadId = Thread.CurrentThread.ManagedThreadId;\n      Console.WriteLine(\"Thread {0} has reached wait.\", threadId);\n      barrier.SignalAndWait(100);\n      Console.WriteLine(\"Thread {0} after wait wait.\", threadId);\n    }\n    ```", "```cs\n    var barrier = new Barrier(4, (b) => \n      Console.WriteLine(\"Barrier phase {0} reached.\", b.CurrentPhaseNumber));\n    ```", "```cs\n    var task1 = Task.Factory.StartNew(() => OperationWithBarrier(barrier));\n    var task2 = Task.Factory.StartNew(() => OperationWithBarrier(barrier));\n    var task3 = Task.Factory.StartNew(() => OperationWithBarrier(barrier));\n    var task4 = Task.Factory.StartNew(() => OperationWithBarrier(barrier));\n    ```", "```cs\n    Task.WaitAll(task1, task2, task3, task4);\n    Console.ReadLine();\n    ```", "```cs\nBarrier barrier = new Barrier(4, (b) => \n  Console.WriteLine(\"Barrier phase {0} reached.\", b.CurrentPhaseNumber));\n```", "```cs\nbarrier.SignalAndWait(100);\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Text;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Write()\n    {\n      int id = Thread.CurrentThread.ManagedThreadId;\n      for (int i = 0; i < MaxNumberValues; ++i)\n      {\n        _lock.EnterWriteLock();\n        Console.WriteLine(\"Entered WriteLock on thread {0}\", id);\n        _array[i] = i*i;\n        Console.WriteLine(\"Added {0} to array on thread {1}\", \n            _array[i], id);\n\n        Console.WriteLine(\"Exiting WriteLock on the thread {0}\", \n            id);\n        _lock.ExitWriteLock();\n        Thread.Sleep(1000);\n      }\n    }\n    ```", "```cs\n    static void Read()\n    {\n      int idNumber = Thread.CurrentThread.ManagedThreadId;\n      for (int i = 0; i < MaxNumberValues; ++i)\n      {\n        _lock.EnterReadLock();\n        Console.WriteLine(\"Entered ReadLock on the thread {0}\", \n                  idNumber);\n        StringBuilder sbObj = new StringBuilder();\n        for (int j = 0; j < i; j++)\n        {\n          if (sbObj.Length > 0) sbObj.Append(\", \");\n          sbObj.Append(_array[j]);\n        }\n        Console.WriteLine(\"Array: {0} on the thread {1}\", sbObj, \n                  idNumber);\n        Console.WriteLine(\"Exiting the ReadLock on thread {0}\", \n                  idNumber);\n        _lock.ExitReadLock();\n        Thread.Sleep(2000);\n      }\n    }\n    ```", "```cs\n    const int MaxNumberValues = 5;\n    static int[] _array = new int[MaxNumberValues];\n    static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim();\n    ```", "```cs\n    static void Main(string[] args)\n    {\n      var taskList = new List<Task>();\n      taskList.Add(Task.Factory.StartNew(() => Write()));\n      Thread.Sleep(1000);\n      for (int i = 0; i < 3; i++)\n      {\n        taskList.Add(Task.Factory.StartNew(()=>Read()));\n      }\n      Task.WaitAll(taskList.ToArray());\n      Console.WriteLine(\"Finished. Press <Enter> to exit.\");\n      Console.ReadKey();\n    }\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    class Account\n    {\n      public int Balance { get; set; }\n    }\n    ```", "```cs\n    var account = new Account();\n    var mutex = new Mutex();\n    var taskList = new List<Task>();\n    ```", "```cs\n    for (int i = 0; i < 5; i++)\n    {\n      taskList.Add(Task.Factory.StartNew(() =>\n      {\n        for (int x = 0; x < 50; x++)\n        {\n          bool lockAquired = false;\n          try\n          {\n            lockAquired = mutex.WaitOne();\n            Thread.Sleep(50);\n            account.Balance = account.Balance + 10;\n            Console.WriteLine(\"Task {0} added 10 to the balance.\", \n              Thread.CurrentThread.ManagedThreadId);\n          }\n          finally\n          {\n            if (lockAquired) mutex.ReleaseMutex();\n          }\n        }\n      }));\n    }\n    ```", "```cs\n    Task.WaitAll(taskList.ToArray());\n    Console.WriteLine(\"Expected account balance: 2500,  \n          Actual account balance: {0}\", account.Balance);\n    Console.ReadLine();\n    ```", "```cs\nbool lockAquired = false;\ntry\n{\n  lockAquired = mutex.WaitOne(); \n  //Critical section                               \n}\nfinally\n{\n  if(lockAquired) mutex.ReleaseMutex();\n}\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static CountdownEvent _countdownEvent;\n    private const int BEGIN_TASKS = 2;\n    private const int END_TASKS = 6;\n    ```", "```cs\n    private static void SimulateTasks(int taskCount)\n    {\n      for (int i = 0; i < taskCount; i++)\n      {\n        Task.Factory.StartNew((num) =>\n          {\n            try\n            {\n              var taskNumber = (int)num;\n              Thread.Sleep(2500);\n              Console.WriteLine(\"Task {0} simultated.\", \n                  taskNumber);\n            }\n            finally\n            {\n              _countdownEvent.Signal();\n            }\n          },i);\n      }\n    }\n    ```", "```cs\n    _countdownEvent = new CountdownEvent(BEGIN_TASKS);\n    ```", "```cs\n    var task1 = Task.Factory.StartNew(() =>\n    {\n      for (int i = BEGIN_TASKS; i <= END_TASKS; i++)\n      {\n        Console.WriteLine(\"**** Start simulating {0} tasks.\", i);\n        _countdownEvent.Reset(i);\n        SimulateTasks(i);\n        _countdownEvent.Wait();\n        Console.WriteLine(\"**** End simulating {0} tasks.\", i);\n      }\n    });\n    ```", "```cs\n    try\n    {\n      task1.Wait();\n      Console.WriteLine(\"Finished. Press <Enter> to exit.\");\n    }\n    finally\n    {\n      _countdownEvent.Dispose();\n    }\n    Console.ReadLine();\n    ```", "```cs\n_countdownEvent = new CountdownEvent(BEGIN_TASKS);\n```", "```cs\nfor (int i = BEGIN_TASKS; i <= END_TASKS; i++)\n{\n  Console.WriteLine(\"**** Start simulating {0} tasks.\", i);\n _countdownEvent.Reset(i);\n  SimulateTasks(i);\n _countdownEvent.Wait();\n  Console.WriteLine(\"**** End simulating {0} tasks.\", i);\n}\n```", "```cs\nTask.Factory.StartNew((num) =>\n{\n  try\n  {\n    var taskNumber = (int)num;\n    Thread.Sleep(2500);\n    Console.WriteLine(\"Task {0} simultated.\", taskNumber);\n  }\n  finally\n  {\n _countdownEvent.Signal();\n  }\n},i);\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static void StartTasks()   \n    {   \n      for (int i = 0; i < 5; i++)   \n      {\n        Task.Factory.StartNew(()=>\n        {   \n          Thread.Sleep(2000);   \n          Console.WriteLine(\"Task {0} waiting for event...\", \n            Thread.CurrentThread.ManagedThreadId);   \n          resetEvent.Wait();   \n          Console.WriteLine(\"Task {0} event signalled\", \n            Thread.CurrentThread.ManagedThreadId);   \n        } );   \n      }               \n    }\n    ```", "```cs\n    resetEvent = new ManualResetEventSlim(false); \n    StartTasks();\n    ```", "```cs\n    Thread.Sleep(1000);\n    Console.WriteLine(\"Main thread setting event\");\n    resetEvent.Set();\n    ```", "```cs\n    Thread.Sleep(500);\n    Console.WriteLine(\"Main thread re-setting event\");\n    resetEvent.Reset();\n    ```", "```cs\n    Thread.Sleep(1000);\n    Console.WriteLine(\"Main thread setting event again\");\n    resetEvent.Set();\n\n    Console.WriteLine(\"Finished. Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\nTask.Factory.StartNew(()=>\n{   \n  ...   \n  resetEvent.Wait();   \n  ...   \n} );\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Enter(object id)\n    {\n      Console.WriteLine(\"Task {0} is trying to enter.\",id);\n      _semaphoreSlim.Wait();\n      Console.WriteLine(\"Task {0} has entered.\", id);   \n      Thread.Sleep(2000); //Shared resource           \n      Console.WriteLine(\"Task {0} is leaving.\", id); \n      _semaphoreSlim.Release();\n    }\n    ```", "```cs\n    static SemaphoreSlim _semaphoreSlim = new SemaphoreSlim(3);\n    ```", "```cs\n    for (int i = 1; i <= 5; i++)\n    {\n      Task.Factory.StartNew((num) =>\n        {\n          Enter(num);\n        }, i);\n    }\n    Console.ReadLine();\n    ```", "```cs\nstatic SemaphoreSlim _semaphoreSlim = new SemaphoreSlim(3);\n```", "```cs\nstatic void Enter(object id)\n{\n\t _semaphoreSlim.Wait();\n\t//Shared resource   \n\t_semaphoreSlim.Release();\n}\n```"]