["```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class InputHandler : MonoBehaviour\n{\n    void Update()\n    {\n        if (Input.GetKeyDown(\"space\"))\n        {\n            CharacterController.Jump();\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class InputHandler : MonoBehaviour\n{\n    [SerializedField]\n    private Controller _characterController;\n\n    private Command _spaceButton;\n\n    void Start()\n    {\n        _spaceButton = new JumpCommand();\n    }\n\n    void Update()\n    {\n        if (Input.GetKeyDown(\"space\"))\n            _spaceButton.Execute(_characterController);\n    }\n}\n```", "```cs\npublic abstract class Command\n{\n    public abstract void Execute();\n}\n```", "```cs\nnamespace Chapter.Command\n{\n    public class ToggleTurbo : Command\n    {\n        private BikeController _controller;\n\n        public ToggleTurbo(BikeController controller)\n        {\n            _controller = controller;\n        }\n\n        public override void Execute()\n        {\n            _controller.ToggleTurbo();\n        }\n    }\n}\n```", "```cs\nnamespace Chapter.Command\n{\n    public class TurnLeft : Command\n    {\n        private BikeController _controller;\n\n        public TurnLeft(BikeController controller)\n        {\n            _controller = controller;\n        }\n\n        public override void Execute()\n        {\n            _controller.Turn(BikeController.Direction.Left);\n        }\n    }\n}\n```", "```cs\nnamespace Chapter.Command\n{\n    public class TurnRight : Command\n    {\n        private BikeController _controller;\n\n        public TurnRight(BikeController controller)\n        {\n            _controller = controller;\n        }\n\n        public override void Execute()\n        {\n            _controller.Turn(BikeController.Direction.Right);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace Chapter.Command\n{\n    class Invoker : MonoBehaviour\n    {\n        private bool _isRecording;\n        private bool _isReplaying;\n        private float _replayTime;\n        private float _recordingTime;\n        private SortedList<float, Command> _recordedCommands = \n            new SortedList<float, Command>();\n\n        public void ExecuteCommand(Command command)\n        {\n            command.Execute();\n\n            if (_isRecording) \n                _recordedCommands.Add(_recordingTime, command);\n\n            Debug.Log(\"Recorded Time: \" + _recordingTime);\n            Debug.Log(\"Recorded Command: \" + command);\n        }\n\n        public void Record()\n        {\n            _recordingTime = 0.0f;\n            _isRecording = true;\n        }\n```", "```cs\n        public void Replay()\n        {\n            _replayTime = 0.0f;\n            _isReplaying = true;\n\n            if (_recordedCommands.Count <= 0)\n                Debug.LogError(\"No commands to replay!\");\n\n            _recordedCommands.Reverse();\n        }\n\n        void FixedUpdate()\n        {\n            if (_isRecording) \n                _recordingTime += Time.fixedDeltaTime;\n\n            if (_isReplaying)\n            {\n                _replayTime += Time.deltaTime;\n\n                if (_recordedCommands.Any()) \n                {\n                    if (Mathf.Approximately(\n                        _replayTime, _recordedCommands.Keys[0])) {\n\n                        Debug.Log(\"Replay Time: \" + _replayTime);\n                        Debug.Log(\"Replay Command: \" + \n                                  _recordedCommands.Values[0]);\n\n                        _recordedCommands.Values[0].Execute();\n                        _recordedCommands.RemoveAt(0);\n                    }\n                }\n                else\n                {\n                    _isReplaying = false;\n                }\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Command\n{\n    public class InputHandler : MonoBehaviour\n    {\n        private Invoker _invoker;\n        private bool _isReplaying;\n        private bool _isRecording;\n        private BikeController _bikeController;\n        private Command _buttonA, _buttonD, _buttonW;\n\n        void Start()\n        {\n            _invoker = gameObject.AddComponent<Invoker>();\n            _bikeController = FindObjectOfType<BikeController>();\n\n            _buttonA = new TurnLeft(_bikeController);\n            _buttonD = new TurnRight(_bikeController);\n            _buttonW = new ToggleTurbo(_bikeController);\n        }\n\n        void Update()\n        {\n            if (!_isReplaying && _isRecording)\n            {\n                if (Input.GetKeyUp(KeyCode.A)) \n                    _invoker.ExecuteCommand(_buttonA);\n\n                if (Input.GetKeyUp(KeyCode.D)) \n                    _invoker.ExecuteCommand(_buttonD);\n\n                if (Input.GetKeyUp(KeyCode.W)) \n                    _invoker.ExecuteCommand(_buttonW);\n            }\n        }\n```", "```cs\n        void OnGUI()\n        {\n            if (GUILayout.Button(\"Start Recording\"))\n            {\n                _bikeController.ResetPosition();\n                _isReplaying = false;\n                _isRecording = true;\n                _invoker.Record();\n            }\n\n            if (GUILayout.Button(\"Stop Recording\"))\n            {\n                _bikeController.ResetPosition();\n                _isRecording = false;\n            }\n\n            if (!_isRecording)\n            {\n                if (GUILayout.Button(\"Start Replay\"))\n                {\n                    _bikeController.ResetPosition();\n                    _isRecording = false;\n                    _isReplaying = true;\n                    _invoker.Replay();\n                }\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class BikeController : MonoBehaviour\n{\n    public enum Direction\n    {\n        Left = -1,\n        Right = 1\n    }\n\n    private bool _isTurboOn;\n    private float _distance = 1.0f;\n\n    public void ToggleTurbo()\n    {\n        _isTurboOn = !_isTurboOn;\n        Debug.Log(\"Turbo Active: \" + _isTurboOn.ToString());\n    }\n\n    public void Turn(Direction direction)\n    {\n        if (direction == Direction.Left) \n            transform.Translate(Vector3.left * _distance);\n\n        if (direction == Direction.Right)\n            transform.Translate(Vector3.right * _distance);\n    }\n\n    public void ResetPosition()\n    {\n        transform.position = new Vector3(0.0f, 0.0f, 0.0f);\n    }\n}\n\n```"]