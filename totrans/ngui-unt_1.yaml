- en: Chapter 1. Getting Started with NGUI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. NGUI 入门
- en: In this first chapter, we will talk about the overall workflow of NGUI before
    we import the plugin and create our first UI. Then we will look into the UI's
    structure, important parameters, and general behavior.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们导入插件并创建第一个 UI 之前，我们将讨论 NGUI 的整体工作流程。然后我们将查看 UI 的结构、重要参数和一般行为。
- en: What is NGUI?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 NGUI？
- en: The **Next-Gen User Interface** kit is a plugin for Unity 3D. It has the great
    advantage of being easy to use, very powerful, and optimized compared to Unity's
    built-in GUI system, **UnityGUI**. Since it is written in C#, it is easily understandable
    and you may tweak it or add your own features, if necessary.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一代用户界面**套件是 Unity 3D 的插件。它具有易于使用、非常强大且与 Unity 内置 GUI 系统 **UnityGUI** 相比进行了优化的巨大优势。由于它是用
    C# 编写的，因此易于理解，您可以根据需要对其进行调整或添加自己的功能。'
- en: The **NGUI Standard License** costs $95\. With this, you will have useful example
    scenes included. I recommend this license to start comfortably—a free evaluation
    version is available, but it is limited, outdated, and not recommended.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**NGUI 标准许可证**的价格为 95 美元。购买此许可证，您将获得有用的示例场景。我建议您从舒适开始使用此许可证——免费评估版本是可用的，但它有限、过时，不推荐使用。'
- en: The **NGUI Professional License** , priced at $200, gives you access to NGUI's
    GIT repository to access the latest beta features and releases in advance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**NGUI 专业许可证**，价格为 200 美元，让您可以访问 NGUI 的 GIT 仓库，提前访问最新的测试版功能和发布。'
- en: A $2000 **Site License** is available for an unlimited number of developers
    within the same studio.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2000 美元的 **站点许可证**适用于同一工作室内的无限数量开发者。
- en: Let's have an overview of the main features of this plugin and see how they
    work.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们概述一下此插件的主要功能，并看看它们是如何工作的。
- en: UnityGUI versus NGUI
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UnityGUI 与 NGUI 的比较
- en: With Unity's GUI, you must create the entire UI in code by adding lines that
    display labels, textures, or any other UI element on the screen. These lines have
    to be written inside a special function, `OnGUI()`, that is called for every frame.
    This is no longer necessary; with NGUI, UI elements are simple GameObjects!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Unity 的 GUI，您必须通过在屏幕上显示标签、纹理或任何其他 UI 元素的代码中添加行来创建整个 UI。这些行必须写在每次调用时都会被调用的特殊函数
    `OnGUI()` 中。这不再是必要的；使用 NGUI，UI 元素是简单的 GameObject！
- en: You can create widgets—this is what NGUI calls labels, sprites, input fields,
    and so on—move them, rotate them, and change their dimensions using handles or
    the Inspector. Copying, pasting, creating prefabs, and every other useful feature
    of Unity's workflow is also available.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建小部件——这是 NGUI 所称的标签、精灵、输入字段等——通过手柄或检查器移动它们、旋转它们并更改它们的尺寸。复制、粘贴、创建预制体以及 Unity
    的工作流程中的所有其他有用功能也都可以使用。
- en: These widgets are viewed by a camera and rendered on a layer that you can specify.
    Most of the parameters are accessible through Unity's Inspector, and you can see
    what your UI looks like directly in the Game window, without having to hit the
    Play button.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些小部件由相机查看，并渲染在您可以指定的层上。大多数参数都可以通过 Unity 的检查器访问，您可以直接在游戏窗口中看到您的 UI 看起来是什么样子，而无需按播放按钮。
- en: Atlases
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图集
- en: Sprites and fonts are all contained in a large texture called atlas. With only
    a few clicks, you can easily create and edit your atlases. If you don't have any
    images to create your own UI assets, simple default atlases come with the plugin.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵和字体都包含在一个称为图集的大纹理中。只需几步点击，您就可以轻松创建和编辑您的图集。如果您没有图像来创建自己的 UI 资产，插件中附带了一些简单的默认图集。
- en: That system means that for a complex UI window composed of different textures
    and fonts, the same material and texture will be used when rendering. This results
    in only one draw call for the entire window. This, along with other optimizations,
    makes NGUI the perfect tool to work on mobile platforms.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统意味着对于由不同纹理和字体组成的复杂 UI 窗口，在渲染时将使用相同的材质和纹理。这导致整个窗口只有一个绘制调用。这，加上其他优化，使 NGUI
    成为在移动平台上工作的完美工具。
- en: Events
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'NGUI also comes with an easy-to-use event framework that is written in C#.
    The plugin comes with a large number of additional components that you can attach
    to GameObjects. These components can perform advanced tasks depending on which
    events are triggered: hover, click, input, and so on. Therefore, you may enhance
    your UI experience while keeping it simple to configure. Code less, get more!'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: NGUI 还附带了一个易于使用的 C# 编写的事件框架。该插件附带了许多额外的组件，您可以将它们附加到 GameObject 上。这些组件可以根据触发哪些事件执行高级任务：悬停、点击、输入等。因此，您可以在保持配置简单的同时增强您的
    UI 体验。代码更少，收获更多！
- en: Localization
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化
- en: 'NGUI comes with its own localization system, enabling you to easily set up
    and change your UI''s language with the push of a button. All your strings are
    located in the `.txt` files: one file per language.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: NGUI自带本地化系统，使您能够轻松地通过点击按钮设置和更改UI的语言。所有字符串都位于`.txt`文件中：每种语言一个文件。
- en: Shaders
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 着色器
- en: Lighting, normal mapping, and refraction shaders are supported in NGUI, which
    can give you beautiful results. Clipping is also a shader-controlled feature with
    NGUI, used for showing or hiding specific areas of your UI.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: NGUI支持光照、法线贴图和折射着色器，这些可以为您带来美观的效果。裁剪也是NGUI控制的一个着色器功能，用于显示或隐藏UI的特定区域。
- en: We've now covered what NGUI's main features are, and how it can be useful to
    us as a plugin, and now it's time to import it inside Unity.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经介绍了NGUI的主要功能以及它作为插件对我们有用的方式，现在是时候将其导入Unity中。
- en: Importing NGUI
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入NGUI
- en: 'After buying the product from the Asset Store or getting the evaluation version,
    you have to download it. Perform the following steps to do so:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Asset Store购买产品或获取评估版本后，您必须下载它。执行以下步骤进行下载：
- en: Create a new Unity project.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Unity项目。
- en: Navigate to **Window** | **Asset Store**. Select your download library.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**窗口** | **Asset Store**。选择您的下载库。
- en: 'Click on the **Download** button next to **NGUI: Next-Gen UI**.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击**NGUI: Next-Gen UI**旁边的**下载**按钮。'
- en: When the download completes, click on the NGUI icon / product name in the library
    to access the product page.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，点击库中的NGUI图标/产品名称以访问产品页面。
- en: Click on the **Import** button and wait for a pop-up window to appear.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**导入**按钮，等待弹出窗口出现。
- en: Check the checkbox for **NGUI v.3.0.2.unitypackage** and click on **Import**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**NGUI v.3.0.2.unitypackage**旁边的复选框，然后点击**导入**。
- en: In the Project view, navigate to **Assets** | **NGUI** and double-click on **NGUI
    v.3.0.2**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目视图中，导航到**Assets** | **NGUI**，然后双击**NGUI v.3.0.2**。
- en: A new imported pop-up window will appear. Click on **Import** again.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个新的导入弹出窗口。再次点击**导入**。
- en: Click any button on the toolbar to refresh it. The NGUI tray will appear!
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具栏上的任何按钮以刷新它。NGUI托盘将出现！
- en: 'The NGUI tray will look like the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: NGUI托盘将看起来如下截图所示：
- en: '![Importing NGUI](img/8667OT_01_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![导入NGUI](img/8667OT_01_01.jpg)'
- en: You have now successfully imported NGUI to your project. Let's create your first
    2D UI.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已成功将NGUI导入到项目中。让我们创建您的第一个2D UI。
- en: Creating your UI
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的UI
- en: We will now create our first 2D user interface with NGUI's UI Wizard. This wizard
    will add all the elements needed for NGUI to work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用NGUI的UI向导创建我们的第一个2D用户界面。此向导将为NGUI工作添加所有必需的元素。
- en: Before we continue, please save your scene as `Menu.unity`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，请将场景保存为`Menu.unity`。
- en: UI Wizard
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UI向导
- en: Create your UI by opening the UI Wizard by navigating to **NGUI** | **Open**
    | **UI Wizard** from the toolbar. Let's now take a look at the UI Wizard window
    and its parameters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在工具栏中导航到**NGUI** | **打开** | **UI向导**来打开UI向导创建您的UI。现在让我们看看UI向导窗口及其参数。
- en: Window
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 窗口
- en: 'You should now have the following pop-up window with two parameters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该有一个带有两个参数的弹出窗口：
- en: '![Window](img/8667OT_01_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![窗口](img/8667OT_01_02.jpg)'
- en: Parameters
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'The two parameters are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 两个参数如下：
- en: '**Layer**: This is the layer on which your UI will be displayed'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层**：这是UI将显示的层'
- en: '**Camera**: This will decide if the UI will have a camera, and its drop-down
    options are as follows:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相机**：这将决定UI是否会有相机，其下拉选项如下：'
- en: '**None**: No camera will be created'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无**：不会创建相机'
- en: '**Simple 2D**: Uses a camera with orthographic projection'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单2D**：使用正交投影相机'
- en: '**Advanced 3D**: Uses a camera with perspective projection'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级3D**：使用透视投影相机'
- en: Separate UI Layer
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离UI层
- en: 'I recommend that you separate your UI from other usual layers. We should do
    it as shown in the following steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您将UI与其他常用层分开。我们应该按照以下步骤进行：
- en: Click on the drop-down menu next to the **Layer** parameter.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**层**参数旁边的下拉菜单。
- en: Select **Add Layer**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**添加层**。
- en: Create a new layer and name it `GUI2D`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的层并将其命名为`GUI2D`。
- en: Go back to the UI Wizard window and select this new **GUI2D** layer for your
    UI.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回UI向导窗口并选择此新的**GUI2D**层用于UI。
- en: You can now click on the **Create Your UI** button. Your first 2DUI has been
    created!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以点击**创建您的UI**按钮。您的第一个2DUI已经创建！
- en: Your UI structure
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的UI结构
- en: 'The wizard has created four new GameObjects on the scene for us:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 向导已为我们场景创建了四个新的GameObject：
- en: UI Root (2D)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI根（2D）
- en: Camera
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机
- en: Anchor
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锚点
- en: Panel
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板
- en: Let's now review each in detail.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在详细审查每个参数。
- en: UI Root (2D)
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UI Root (2D)
- en: The **UIRoot** component scales widgets down to keep them at a manageable size.
    It is also responsible for the **Scaling Style**—it will either scale UI elements
    to remain pixel perfect or to occupy the same percentage of the screen, depending
    on the parameters you specify.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**UIRoot**组件将小部件缩放以保持它们的大小可管理。它还负责**缩放样式**——它将根据您指定的参数将UI元素缩放以保持像素完美或占用屏幕的相同百分比。'
- en: 'Select the **UI Root (2D)** GameObject in the Hierarchy. It has the `UIRoot.cs`
    script attached to it. This script adjusts the scale of the GameObject it''s attached
    to in order to let you specify widget coordinates in pixels, instead of Unity
    units as shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次结构中选择**UI Root (2D)** GameObject。它附有`UIRoot.cs`脚本。此脚本调整其附加的GameObject的缩放，以便您可以使用像素指定小部件坐标，而不是如图所示使用Unity单位：
- en: '![UI Root (2D)](img/8667OT_01_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![UI Root (2D)](img/8667OT_01_03.jpg)'
- en: Parameters
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'The **UIRoot** component has four parameters:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**UIRoot**组件有四个参数：'
- en: '**Scaling Style**: The following are the available scaling styles:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放样式**: 以下是可以用的缩放样式：'
- en: '**PixelPerfect**: This will ensure that your UI will always try to remain at
    the same size in pixels, no matter what resolution. In this scaling mode, a 300
    x 200 window will be huge on a 320 x 240 screen and tiny on a 1920 x 1080 screen.
    That also means that if you have a smaller resolution than your UI, it will be
    cropped.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**像素完美**: 这将确保您的UI始终尝试保持相同的像素大小，无论分辨率如何。在这种缩放模式下，一个300 x 200的窗口在320 x 240的屏幕上会显得非常大，而在1920
    x 1080的屏幕上会显得非常小。这也意味着，如果您UI的分辨率小于屏幕分辨率，它将被裁剪。'
- en: '**FixedSize**: This will ensure that your UI will be proportionally resized
    depending on the screen''s height. The result is that your UI will not be pixel
    perfect but will scale to fit the current screen size.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定大小**: 这将确保您的UI将根据屏幕高度成比例调整大小。结果是，您的UI将不会是像素完美的，但会缩放以适应当前屏幕大小。'
- en: '**FixedSizeOnMobiles**: This will ensure fixed size on mobiles and pixel perfect
    everywhere else.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定大小在移动设备上**: 这将确保在移动设备上固定大小，在其他所有地方保持像素完美。'
- en: '**Manual Height**: With the **FixedSize** scaling style, the scale will be
    based on this height. If your screen''s height goes over or under this value,
    it will be resized to be displayed identically while maintaining the aspect ratio
    (width/height proportional relationship).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动高度**: 使用**固定大小**缩放样式，缩放将基于此高度。如果您的屏幕高度超过或低于此值，它将被调整大小以显示相同的大小，同时保持宽高比（宽度/高度成比例关系）。'
- en: '**Minimum Height**: With the **PixelPerfect** scaling style, this parameter
    defines the minimum height for the screen. If your screen height goes below this
    value, your UI will resize. It will be as if the **Scaling Style** parameter was
    set to **FixedSize** with **Manual Height** set to this value.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小高度**: 使用**像素完美**缩放样式，此参数定义了屏幕的最小高度。如果您的屏幕高度低于此值，您的UI将调整大小。它将类似于将**缩放样式**参数设置为**固定大小**，并将**手动高度**设置为此值。'
- en: '**Maximum Height**: With the **PixelPerfect** scaling style, this parameter
    defines the maximum height for the screen. If your screen height goes over this
    value, your UI will resize. It will be as if the **Scaling Style** parameter was
    set to **FixedSize** with **Manual Height** set to this value.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大高度**: 使用**像素完美**缩放样式，此参数定义了屏幕的最大高度。如果您的屏幕高度超过此值，您的UI将调整大小。它将类似于将**缩放样式**参数设置为**固定大小**，并将**手动高度**设置为此值。'
- en: Note
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please set the **Scaling Style** parameter to **FixedSize** with a **Manual
    Height** value of 1080\. This will allow us to have the same UI on any screen
    size up to 1920 x 1080.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请将**缩放样式**参数设置为**固定大小**，并将**手动高度**设置为1080。这将允许我们在1920 x 1080的任何屏幕尺寸上拥有相同的UI。
- en: Even though the UI will look the same on different resolutions, the **aspect
    ratio** is still a problem since the rescale is based on the screen's height only.
    If you want to cover both 4:3 and 16:9 screens, your UI should not be too large—try
    to keep it square. Otherwise, your UI might be cropped on certain screen resolutions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管UI在不同分辨率上看起来相同，但由于缩放仅基于屏幕高度，**宽高比**仍然是一个问题。如果您想覆盖4:3和16:9的屏幕，您的UI不应太大——尽量保持它为正方形。否则，您的UI可能在某些屏幕分辨率上被裁剪。
- en: 'On the other hand, if you want a 16:9 UI, I recommend you force this aspect
    ratio only. Let''s do it now for this project by performing the following steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您想要16:9的UI，我建议您仅强制执行此宽高比。让我们通过以下步骤现在为此项目执行此操作：
- en: Navigate to **Edit** | **Project Settings** | **Player**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**编辑** | **项目设置** | **玩家**。
- en: In the **Inspector** option, unfold the **Resolution and Presentation** group.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**选项中，展开**分辨率和展示**组。
- en: Unfold the **Supported Aspect Ratios** group.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**支持的纵横比**组。
- en: Check only the **16:9** box.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只勾选**16:9**框。
- en: Now that we have seen the UI Root's different parameters, let's discuss the
    camera.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了UI根的不同参数，让我们来讨论一下相机。
- en: Camera
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相机
- en: Select the **Camera** GameObject in the **Hierarchy** view. It has the `UICamera.cs`
    script attached to it. This script must be attached to any camera that needs to
    interact with your UI.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中选择**相机**GameObject。它附带了`UICamera.cs`脚本。此脚本必须附加到任何需要与UI交互的相机上。
- en: Its purpose is to send different messages concerning events that happen to UI
    elements such as colliders attached to a button. Some of the more frequently used
    events are `OnClick()` and `OnHover()`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 其目的是发送有关UI元素（如附加到按钮的碰撞器）发生的事件的不同消息。一些更常用的事件是`OnClick()`和`OnHover()`。
- en: You may have multiple cameras if you consider it necessary; for example, you
    can have an orthographic camera for 2D in-game UI elements and a separate perspective
    camera for a 3D pause menu.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为有必要，你可以有多个相机；例如，你可以有一个用于2D游戏UI元素的正交相机，以及一个用于3D暂停菜单的独立透视相机。
- en: For the purpose of this book, we will stick with only one camera.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们将只使用一个相机。
- en: Parameters
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'The `UICamera.cs` script has a large number of parameters as shown in the following
    screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`UICamera.cs`脚本具有大量参数，如下面的截图所示：'
- en: '![Parameters](img/8667OT_01_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![参数](img/8667OT_01_04.jpg)'
- en: 'These parameters are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数如下：
- en: '**Event Type**: Select which event type this camera will send.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件类型**：选择此相机将发送哪种事件类型。'
- en: '**World**: This is used for interacting with 3D-world GameObjects'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**世界**：这是用于与3D世界GameObject交互的'
- en: '**UI**: This is used for interacting with the 2D UI'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI**：这是用于与2D UI交互的'
- en: '**Event Mask**: Select which layer will be used to receive events.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件遮罩**：选择将用于接收事件的层。'
- en: In our case, we will set it to **GUI2D** since our UI will reside on it.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将将其设置为**GUI2D**，因为我们的UI将驻留在其上。
- en: '**Debug**: This consists of the enable or disable debug mode options. This
    option is useful when you have unwanted behavior.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试**：这包括启用或禁用调试模式选项。此选项在出现不希望的行为时很有用。'
- en: 'Enabled: When **Debug** is enabled, the currently hovered object will be displayed
    on the top left-hand corner of the screen'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用：当**调试**启用时，当前悬停的对象将显示在屏幕的左上角
- en: '**Allow Multi Touch**: This consists of the enable or disable touch mode options
    that allow simultaneous touches. This is mandatory if you want to use pinch-to-zoom
    or other such gestures on mobile platforms.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许多点触控**：这包括启用或禁用触摸模式选项，允许同时触摸。如果你想在移动平台上使用捏合缩放或其他此类手势，这是强制性的。'
- en: '**Sticky Press**: This consists of the enable or disable sticky press mode
    options.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粘性按下**：这包括启用或禁用粘性按下模式选项。'
- en: 'Enabled: If you drag your finger out of a pressed button, it will remain in
    the pressed state and no other element will receive upcoming events from that
    finger until it is released'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用：如果你将手指从按下的按钮中拖出，它将保持按下状态，并且直到释放之前，其他元素都不会从该手指接收即将发生的事件
- en: 'Disabled: If you drag your finger out of a pressed button, it will no longer
    be pressed and other elements will receive upcoming events from that finger'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用：如果你将手指从按下的按钮中拖出，它将不再被按下，其他元素将接收来自该手指的即将发生的事件
- en: '**Sticky Tooltip**: It consists of the enable or disable sticky tool tip mode
    options.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粘性工具提示**：这包括启用或禁用粘性工具提示模式选项。'
- en: 'Enabled: The tool tip disappears when the mouse moves out of the widget'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用：当鼠标移出小部件时，工具提示消失
- en: 'Disabled: The tool tip disappears as soon as the mouse moves'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用：当鼠标移出按下按钮时，工具提示立即消失
- en: '**Tooltip Delay**: It consists of the required stationary time in seconds before
    the widget''s tool tip is displayed.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具提示延迟**：它包括在显示小部件的工具提示之前所需的静止时间（以秒为单位）。'
- en: '**Raycast Range**: A raycast is an invisible ray that is cast from one point
    towards a specific direction and is stopped if it encounters another object. The
    camera uses raycasts from the mouse or touch position towards the camera''s forward
    direction to detect collisions and handle events. You may set the range of this
    raycast if you need to limit the interaction to a certain range. The default **-1**
    value implies that the raycast''s range will be as far as the camera can see.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**射线投射范围**：射线投射是从一个点向特定方向发射的不可见射线，如果遇到另一个对象则停止。摄像机使用从鼠标或触摸位置向摄像机前方方向的射线投射来检测碰撞和处理事件。如果您需要限制交互到一定范围，您可以设置此射线投射的范围。默认的**-1**值表示射线投射的范围将延伸到摄像机能看到的距离。'
- en: '**Event Sources**: These Booleans let you specify what events this camera listens
    to.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件源**：这些布尔值让您可以指定此摄像机监听哪些事件。'
- en: '**Mouse**: This is used for mouse movements, left/right/middle click, and scroll
    wheel.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标**：这是用于鼠标移动、左右/中键点击和滚轮。'
- en: '**Touch**: This is used for touch-enabled devices.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸**：这是用于触摸设备的。'
- en: '**Keyboard**: This is used for keyboard input. It uses the `OnKey()` event.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘**：这是用于键盘输入。它使用`OnKey()`事件。'
- en: '**Controller**: This is used for joystick-based devices. It uses the `OnKey()`
    event.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这是用于基于摇杆的设备。它使用`OnKey()`事件。'
- en: '**Thresholds**: These values come in handy when you want to specify the minimum
    values before a particular event is triggered. This may vary from one game/app
    to another.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阈值**：当您想要指定触发特定事件前的最小值时，这些值会很有用。这可能会因游戏/应用程序而异。'
- en: '**Mouse Drag**: When a mouse button is pressed (the `OnPress()` event is triggered),
    this value determines how far in pixels the mouse must move before it is considered
    a drag, and sends `OnDrag()` events to the dragged object'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标拖动**：当鼠标按钮被按下（触发`OnPress()`事件）时，此值确定鼠标必须移动多少像素才被认为是拖动，并发送`OnDrag()`事件到被拖动的对象。'
- en: '**Mouse Click**: When a mouse button is pressed (the `OnPress()` event is triggered),
    this value determines how far in pixels the mouse can travel before the button
    release has no effect (the `OnClick()` event is not triggered)'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标点击**：当鼠标按钮被按下（触发`OnPress()`事件）时，此值确定鼠标在按钮释放时没有效果（不触发`OnClick()`事件）之前可以移动的像素距离。'
- en: '**Touch Drag**: This is the same as **Mouse Drag**, but for touch-based devices'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸拖动**：这与**鼠标拖动**相同，但用于基于触摸的设备。'
- en: '**Touch Tap**: This is the same as **Mouse Click**, but for touch-based devices'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸点击**：这与**鼠标点击**相同，但用于基于触摸的设备。'
- en: '**Axes and Keys**: These parameters let you assign Unity input axes and keys
    to NGUI''s input system.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轴和键**：这些参数让您可以将Unity输入轴和键分配给NGUI的输入系统。'
- en: '**Horizontal**: This is the input axis for horizontal movement (the left and
    right key events)'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平**：这是水平移动的输入轴（左/右按键事件）。'
- en: '**Vertical**: This is the input axis for vertical movement (the up and down
    key events)'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直**：这是垂直移动的输入轴（上/下按键事件）。'
- en: '**Scroll**: This is the input axis for scrolling'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动**：这是滚动的输入轴。'
- en: '**Submit 1**: This is the primary keycode for validation'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交1**：这是验证的主要键码。'
- en: '**Submit 2**: This is the secondary keycode for validation'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交2**：这是验证的次要键码。'
- en: '**Cancel 1**: This is the primary keycode for cancel.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取消1**：这是取消的主要键码。'
- en: '**Cancel 2**: This is the secondary keycode for cancel.'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取消2**：这是取消的次要键码。'
- en: Note
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: You can edit Unity inputs at any time by navigating to **Edit** | **Project
    Settings** | **Input**.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在任何时间通过导航到**编辑** | **项目设置** | **输入**来编辑Unity输入。
- en: Ok, we have seen what the main parameters of the `UICamera` component are. We
    have to see what the camera's anchor child is.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经看到了`UICamera`组件的主要参数。我们必须看看摄像机的锚点子项。
- en: Anchor
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 锚点
- en: An anchor is used to attach GameObjects to the same area inside the camera view.
    For example, you can attach them to borders or corners of the screen, or another
    widget.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 锚点用于将GameObject附加到摄像机视图内的同一区域。例如，您可以将其附加到屏幕的边缘或角落，或另一个小部件。
- en: Select the **Anchor** GameObject in the **Hierarchy** view. It has the **UIAnchor**
    component attached to it. It is configured to center content on the screen based
    on the parent camera.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中选择**锚点**GameObject。它附有**UIAnchor**组件。它配置为根据父摄像机在屏幕上居中内容。
- en: Before we create widgets, we must understand how these **UIAnchor** parameters
    modify their placement behavior.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建小部件之前，我们必须了解这些**UIAnchor**参数如何修改它们的放置行为。
- en: Parameters
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'The **UIAnchor** component has seven parameters as seen in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**UIAnchor**组件如以下截图所示有七个参数：'
- en: '![Parameters](img/8667OT_01_05.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![参数](img/8667OT_01_05.jpg)'
- en: 'These parameters are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数如下：
- en: '**Ui Camera**: This is the reference camera from which our anchor bounds are
    determined. By default, it is set to the camera used by the UI.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI相机**: 这是确定我们的锚定边界所使用的参考相机。默认情况下，它设置为UI使用的相机。'
- en: '**Container**: If you drag and drop a GameObject in this field, it will overwrite
    the camera anchoring. This can be useful if you need to anchor your panels or
    widgets based on a container GameObject, instead of a camera. Your content will
    be placed using the assigned container''s position.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**: 如果您将GameObject拖放到此字段，它将覆盖相机锚定。如果您需要根据容器GameObject而不是相机来锚定面板或小部件，这可能很有用。您的内容将使用分配的容器的位置进行放置。'
- en: '**Side**: Do you want your child GameObjects to be centered or attached to
    one side or corner of your referenced camera/container? You can choose your anchor
    point here.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边**: 您希望您的子GameObject是居中、附着到参考相机/容器的某一边或角落吗？您可以在此处选择您的锚定点。'
- en: '**Half Pixel Offset**: You should leave this Boolean checked. It makes widget
    positions pixel perfect on Windows machines.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半像素偏移**: 您应该勾选此布尔值。它使小部件在Windows机器上的位置像素完美。'
- en: '**Run Only Once**: This Boolean can be checked if your screen resolution never
    changes, or if you want it to remove it on start. As a result, your anchor will
    be executed at the start and then removed and no longer be updated.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅运行一次**: 如果您的屏幕分辨率从不更改，或者您希望在开始时将其删除，则可以勾选此布尔值。结果，您的锚定将在开始时执行，然后删除并不再更新。'
- en: '**Relative Offset**: This `Vector2` class takes two values between -1 and 1
    to add a relative offset to the final position. With a value of 0.12 for **X**
    and 0.32 for **Y**, it will result in an offset of 12% horizontally and 32% vertically—it
    will look the sameon any resolution because the offset depends on the screen size.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相对偏移**: 这个`Vector2`类接受介于-1和1之间的两个值，以向最终位置添加相对偏移。对于**X**值为0.12和**Y**值为0.32，它将在水平方向上偏移12%，在垂直方向上偏移32%——在任何分辨率下看起来都一样，因为偏移取决于屏幕大小。'
- en: '**Pixel Offset**: This parameter is like **Relative Offset**, but it is absolute
    instead of relative. You can enter the offset in pixels—it will look differentdepending
    on the resolution because the offset will stay identical in pixels on all screen
    sizes.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**像素偏移**: 此参数类似于**相对偏移**，但它绝对而不是相对。您可以输入像素偏移——它将根据分辨率不同而看起来不同，因为偏移在所有屏幕大小上都将保持相同。'
- en: We have explained the different **UIAnchor** parameters, but what is this last
    child, Panel? Let's look into that, and we'll be ready to create our first widget!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经解释了不同的**UIAnchor**参数，但这个最后的子项，面板是什么？让我们来看看，然后我们将准备好创建我们的第一个小部件！
- en: Panel
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面板
- en: Select the **Panel** GameObject in the **Hierarchy** view. It has a **UIPanel**
    component attached.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中选择**面板**GameObject。它附加了一个**UIPanel**组件。
- en: A panel's purpose is to hold widgets and render geometry in only one draw call.
    You may create multiple panels to split your UI, but it will add a draw call per
    new panel.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 面板的作用是仅在一个绘制调用中持有小部件并渲染几何形状。您可能需要创建多个面板来分割您的UI，但每个新面板都会添加一个绘制调用。
- en: Parameters
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'The `UIPanel.cs` script has eight parameters as shown in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIPanel.cs`脚本如以下截图所示有八个参数：'
- en: '![Parameters](img/8667OT_01_06.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![参数](img/8667OT_01_06.jpg)'
- en: 'These parameters are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数如下：
- en: '**Alpha**: You may change the **transparency level** of the entire panel. All
    child widgets will be affected by this alpha value, but nested panels won''t.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alpha**: 您可以更改整个面板的**透明度级别**。所有子小部件都将受此Alpha值的影响，但嵌套面板不会。'
- en: '**Depth**: This is used to define which panel is rendered over another. A panel
    with a depth value of 1 will appear in front of a panel with a depth value of
    0\. You can use either the **Back** or **Forward** button to change the **Depth**
    or simply enter a number in the field. Panels can also have negative depth.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度**: 这用于定义哪个面板覆盖另一个面板。深度值为1的面板将出现在深度值为0的面板之前。您可以使用**后退**或**前进**按钮更改**深度**，或者简单地在此字段中输入一个数字。面板也可以有负深度。'
- en: '**Normals**: This Boolean must be checked if you need it to react to lightingusing
    shaders. It will calculate normals for your UI geometry.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**法线**: 如果您需要它通过着色器对光照做出反应，则必须勾选此布尔值。它将为您的UI几何形状计算法线。'
- en: '**Cull**: This Boolean gives you the ability to disable the child widgets rendering
    while the panel is being dragged, which improves performance.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**裁剪**：这个布尔值允许在拖动面板时禁用子小部件的渲染，从而提高性能。'
- en: '**Static**: If all your panel''s widgets are static and won''t ever move, check
    this—it will improve performance!'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态**：如果您所有的面板小部件都是静态的并且永远不会移动，请选中此选项——这将提高性能！'
- en: '**Show All**: This will show all draw calls in the **Inspector** view.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示所有**：这将显示**检查器**视图中的所有绘制调用。'
- en: '**Panel Tool**: This is a panel managing tool. You can visualize and select
    each panel in the scene. You can open it with *Alt* + *Shift* + *P* or navigate
    to **NGUI** | **Open** | **Panel Tool**. Will this panel show in the **Panel Tool**
    parameter? This should be unchecked for dynamically created temporary panels through
    code, like a warning message or ammo pick-up notification.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面板工具**：这是一个面板管理工具。您可以在场景中可视化和选择每个面板。您可以通过*Alt* + *Shift* + *P*打开它，或者导航到**NGUI**
    | **打开** | **面板工具**。这个面板会在**面板工具**参数中显示吗？对于通过代码动态创建的临时面板，如警告消息或弹药拾取通知，应该取消选中。'
- en: '**Clipping**: This will let us hide widgets outside a given rectangle. When
    turned on, you will be able to choose the clipping rectangle''s dimensions with
    the `Center` and `Size` parameters. Anything outside this rectangle will be hidden.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**裁剪**：这将允许我们隐藏给定矩形之外的小部件。当开启时，您可以使用`中心`和`大小`参数选择裁剪矩形的尺寸。此矩形之外的所有内容都将被隐藏。'
- en: '**None**: No clipping—the entire panel will be displayed.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无**：无裁剪——整个面板将显示出来。'
- en: '**Hard Clip**: Clipping enabled—rough clipping of widgets outside the box.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬裁剪**：裁剪已启用——对框外小部件的粗糙裁剪。'
- en: '**Soft Alpha**: Clipping enabled—soft clipping with fade-out / fade-in borders.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软透明度**：裁剪已启用——带有淡出/淡入边框的软裁剪。'
- en: We've now taken a look at the parameters of the **UIPanel** component, which
    will be used to hold our widgets.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在已经查看了**UIPanel**组件的参数，它将被用来容纳我们的小部件。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: During this chapter, we discussed NGUI's basic workflow—it works with GameObjects,
    uses atlases to combine multiple textures in one large texture, has an event system,
    can use shaders, and has a localization system.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了NGUI的基本工作流程——它与GameObject一起工作，使用图集将多个纹理组合到一个大纹理中，具有事件系统，可以使用着色器，并且有本地化系统。
- en: After importing the NGUI plugin, we created our first 2D UI with the UI Wizard,
    reviewed its parameters, and created our own GUI 2D layer for our UI to reside
    on.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入NGUI插件后，我们使用UI向导创建了我们的第一个2D UI，审查了其参数，并为我们的UI创建了自己的GUI 2D层。
- en: 'Finally, we analyzed the four GameObjects that were created automatically for
    us by NGUI. After reviewing their parameters, we can summarize their roles as
    follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们分析了NGUI为我们自动创建的四个GameObject。在审查它们的参数后，我们可以总结它们的作用如下：
- en: The **UI Root** holds the UI and scales it for pixel perfect or fixed sizes
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI根节点**包含UI并将其缩放以实现像素完美或固定大小'
- en: The **Camera** views the UI and sends messages to the widgets for interactions
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相机**视图查看UI并向小部件发送交互消息'
- en: The **Anchor** can attach elements to the borders of screen or objects and add
    offsets
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锚点**可以将元素附加到屏幕边缘或对象上，并添加偏移量'
- en: The **Panel** holds our widgets and renders them, with or without clipping
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面板**容纳我们的小部件并对其进行渲染，是否裁剪均可。'
- en: We are now ready to create our first widget. It's time to move on to the next
    chapter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好创建我们的第一个小部件了。是时候进入下一章了。
