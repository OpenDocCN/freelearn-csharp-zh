- en: Chapter 9. Preparing Xamarin.iOS Apps for Distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss activities related to preparing a Xamarin.iOS
    app for distribution and look at the various options for distributing apps. While
    many of the activities we will discuss are an integral part of any iOS app deployment,
    we will try and narrow the scope of our coverage to aspects that are unique to
    developing an app with Xamarin.iOS. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: App profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS Build settings for distributing apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App distribution options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for distribution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, our app is built and functioning the way we want; most of the
    work is done. We now turn our attention to preparing our app for distribution.
    This section discusses the following three aspects of preparing an app for distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App profiling**: Here we will be looking at memory allocation issues and
    performance bottlenecks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS Application settings**: Here we will be updating informational settings
    such as version and build numbers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS Build settings**: Here we will be adjusting settings that affect the
    code being generated based on target devices, desired performance characteristics,
    and deployable size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling Xamarin.iOS apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Profiling allows developers to monitor their apps during execution and identify
    issues related to memory allocation and performance bottlenecks. The activity
    of profiling can be performed throughout the life cycle of developing an app,
    but it is especially beneficial to incorporate profiling into the latter stages
    of the process as a final verification prior to distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xamarin.iOS developers have two tools to choose from for profiling apps: MonoTouch
    Profiler and Apple''s Instruments app. We will not replicate the existing documentation
    for these apps but simply provide the following links for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tool | URL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| MonoTouch Profiler | [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/monotouch_profiler/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/monotouch_profiler/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Apple''s Instruments app | [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/walkthrough_Apples_instrument/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/walkthrough_Apples_instrument/)
    |'
  prefs: []
  type: TYPE_TB
- en: iOS Application (Info.plist) settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s likely that most of the settings you need to make in `Info.plist` will
    have already been made by the time you are ready to start the distribution process.
    However, there are a few settings you likely need to update, specifically, the
    version and build settings. The following screenshot shows the **iOS Application**
    settings screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iOS Application (Info.plist) settings](img/0838OT_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: iOS Build settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xamarin.iOS provides numerous options to optimize the build process based on
    the devices that are being targeted, the size of the deployable app, and the execution
    speed. The following sections discuss the most important settings related to producing
    a final build for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: SDK Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SDK version should be set to the minimum iOS version that the app can be
    deployed to. It's likely that this setting would have already been established
    during the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Linker Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The mTouch tool used to build Xamarin.iOS apps includes a linker, where the
    aim of the linker is to reduce the size of the resulting app. The linker accomplishes
    this by performing static analysis on the code in your app, evaluating which classes
    and methods in the referenced assemblies are actually used, and removing classes,
    methods, and properties that are not used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options for the linker can be set in **Project Options** | **iOS Build** under
    the **General** tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linker Options](img/0838OT_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following options can be set to control the linking process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Don''t link**: This option disables the linker and ensures that all referenced
    assemblies are included without modification. You should note that this is the
    default setting for builds that target the iOS simulator because excluding the
    time-consuming static analysis process saves time. From this, the resulting large
    DLLs can still be deployed relatively quickly to the simulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link SDK assemblies only**: This option tells the linker to operate on only
    the SDK assemblies (which are the assemblies that ship with Xamarin.iOS). This
    is the default setting for builds that target a device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link all assemblies**: This option tells the linker to operate on the entire
    app as well as on all referenced assemblies. This allows the linker to use a larger
    set of optimizations and results in the smallest possible application. However,
    when the linker runs in this mode, there is a greater chance that it will break
    portions of your code due to false assumptions made by the static analysis process.
    In particular, static analysis can get tripped up through usage of reflection,
    serialization, or any code where a type or member instance is not statically referenced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table summarizes the results of linking the two versions of the
    `NationalParks` app produced in [Chapter 6](ch06.html "Chapter 6. The Sharing
    Game"), *The Sharing Game*:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | File linking version | PCL version |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Don''t link** | 47.5 MB | 48.4 MB |'
  prefs: []
  type: TYPE_TB
- en: '| **Link SDK assemblies only** | 6.7 MB | 7.3 MB |'
  prefs: []
  type: TYPE_TB
- en: '| **Link all assemblies** | 5.8 MB | 6.4 MB |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the table, the biggest difference in application size is
    achieved when going from **Don't link** to **Link SDK assemblies only**.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the linker
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The linker provides great benefits as demonstrated in the previous section.
    However, there might be times when you need to override the default behavior of
    the linker as the linker might remove type and member instances that are actually
    used by your app. This will result in runtime exceptions relating to these types
    and/or member not being found. The following table describes three ways to alter
    the behavior of the linker in order to avoid losing important types and members:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Technique | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Preserving code | If you determine from testing that the linker is removing
    classes or methods needed by your app, you can explicitly tell the linker to always
    include them by using the `Preserve` attribute on a class and/or method.To preserve
    the entire type use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To preserve a single member use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Skipping assemblies | In some cases, you might need to tell the linker to
    skip entire assemblies because you do not have the ability to modify the source
    code (third-party libraries). This can be accomplished by using the command line
    option `linkskip`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Disable **Link Away** | One optimization the linker employs is to remove
    code that is very unlikely to be used on an actual device; those features that
    are marked as unsupported or disallowed. On rare occasions, these features might
    be needed for your app to function. This optimization can be disabled by using
    the command line option `--nolinkaway`. |'
  prefs: []
  type: TYPE_TB
- en: Debugging options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debugging options should always be disabled for release builds. Enabling debugging
    can result in significantly larger binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Code generation options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Code generation options control the code being created during the build process
    based on the processor(s) being targeted and the performance characteristics desired.
    The option we have under this setting are explained in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Supported architectures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Supported architectures identify the processor architectures that should be
    supported by the resulting build. The original iPhone through to the iPhone 3G,
    used an ARMv6 CPU. Newer models of iPhone and iPad use either the ARMv7 or ARMv7s
    architecture while the iPhone 5s introduced the use of A7 processor based on the
    ARMv8a architecture.
  prefs: []
  type: TYPE_NORMAL
- en: ARMv6 has not supported Xcode versions prior to Xcode 4.5\. If you need to build
    for older devices, you will need to use an earlier version of Xcode installed.
  prefs: []
  type: TYPE_NORMAL
- en: LLVM optimizing compiler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Xamarin.iOS comes with two different code generation engines: the normal Mono
    code generation engine and the one based on the LLVM optimizing compiler. The
    LLVM engine produces both faster and smaller code than the Mono engine at the
    cost of compile time. Thus, the Mono code generation engine is convenient to use
    as you develop an app, whereas the LLVM engine is preferred for builds that will
    be distributed.'
  prefs: []
  type: TYPE_NORMAL
- en: ARM thumb instruction set
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The ARM thumb instruction set is a more compact instruction set used by ARM
    processors. By enabling the Thumb support, you can reduce the size of your executable
    at the expense of slower execution times. Thumb is supported by ARMv6, ARMv7,
    and ARMv7s.
  prefs: []
  type: TYPE_NORMAL
- en: Distributing Xamarin.iOS apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin.iOS supports all of the traditional distribution methods that iOS developers
    have access to. There is a great deal of information about distribution of iOS
    apps on the Xamarin website and the Apple developer website. We make no attempt
    to replicate those comprehensive repositories. The following sections are intended
    to provide a general overview from a Xamarin.iOS perspective.
  prefs: []
  type: TYPE_NORMAL
- en: The Ad Hoc and enterprise distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ad Hoc distribution and enterprise distributions allow an app to be distributed
    without going through the App Store. Ad Hoc is generally used to support testing
    efforts leading up to a general release. Enterprise is used to distribute apps
    that are not intended for the general public, but are instead intended for use
    by users within a single enterprise. In either case, an iOS App Store Package
    (IPA) must be created.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Producing an enterprise distribution requires an Enterprise account from Apple
    and an Enterprise Xamarin.iOS license.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an IPA, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and install a distribution profile for your app on [developer.apple.com](http://developer.apple.com).
    Detailed instructions for this procedure can be found in the section titled *Creating
    and Installing a Distribution Profile* at [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Provisioning profile** option to be used for the build of the newly
    installed profile by navigating to **Project Options** | **Build** | **iOS Bundle
    Signing**, as shown in the following screenshot:![The Ad Hoc and enterprise distributions](img/0838OT_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Bundle Identifier** option on the app to the same value that was used
    while creating the distribution profile by navigating to **Project Options** |
    **Build** | **iOS Application**, as shown in the following screenshot:![The Ad
    Hoc and enterprise distributions](img/0838OT_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the IPA has been created, simply navigate to the IPA in finder, double-click
    on it, and it will be opened in iTunes. iTunes can now be used to sync the app
    on devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TestFlight distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**TestFlight** is a cloud-based app distribution service used to distribute
    pre-released versions of your app. Xamarin Studio provides its integration with
    the **TestFlight** service so that **Ad Hoc** builds can be uploaded to **TestFlight**
    directly from within the IDE. Prior to uploading a build, you must establish an
    account and define the testing team(s) and app within the **TestFlight** service.
    This can be accomplished by [https://www.testflightapp.com](https://www.testflightapp.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload a build to TestFlight, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Ad Hoc** for the build type and navigate from **Project** | **Publish**
    to **TestFlight** from the main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **API token** and **Team token** values assigned by **TestFlight**
    when you set up your app and team. You can click on the link next to these fields
    to display the appropriate value in a browser.![TestFlight distribution](img/0838OT_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Release notes** to let the testers know what has been fixed and/or added
    in the new release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Distribution lists** and turn on **Notify team members** to have an
    e-mail notification sent out with the release notes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the options, **Replace existing binaries with the same name** and **Upload
    dSYMs**, and click on **Publish**. Xamarin Studio will build the app and upload
    it to TestFlight.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: App Store submission
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Distributing apps through the App Store is much the same for Xamarin.iOS apps
    as any other iOS app. With the exception of producing a release build, most of
    the work is done outside of Xamarin Studio. You do need to enter the **Provisioning
    Profile** value in the **iOS Bundle Signing** section of the **Project Options**
    dialog box.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link provides detailed steps to publish a Xamarin.iOS app to
    the App Store: [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the activities related to preparing an app for
    distribution, the distribution channels available, and the processes involved
    in distributing an app. In the next chapter, we will look at the same aspects
    of distributing a Xamarin.Android app.
  prefs: []
  type: TYPE_NORMAL
