- en: Lights and Effects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灯光与效果
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Directional Light with a cookie Texture to simulate a cloudy day
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cookie纹理模拟多云天气的方向光
- en: Creating and applying a cookie Texture to a spotlight
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为聚光灯创建并应用cookie纹理
- en: Adding a custom reflection map to a scene
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向场景添加自定义反射贴图
- en: Creating a laser aim with a projector
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用投影仪创建激光瞄准
- en: Enhancing the laser aim with a line renderer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用线渲染器增强激光瞄准
- en: Setting up an environment with Procedural Skybox and Directional Light
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用程序化Skybox和方向光设置环境
- en: Reflecting surrounding objects with reflection probes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用反射探针反射周围物体
- en: Using material emission to bake light from a glowing lamp onto scene objects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用材质发射烘焙来自发光灯的光线到场景物体上
- en: Lighting a scene with lightmaps and light probes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用光照贴图和光照探针照亮场景
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Whether you're trying to make a better-looking game or you want to add interesting
    features, lights and effects can boost your project and help you deliver a higher
    quality product. Modern game engines, including Unity, use complex mathematics
    and physical modelling of how light from light sources interacts with objects
    in a **Scene**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是试图制作外观更好的游戏还是想添加有趣的功能，灯光和效果都可以提升您的项目并帮助您交付更高品质的产品。现代游戏引擎，包括Unity，使用复杂的数学和物理建模来模拟光源与**场景**中物体之间的光线交互。
- en: For visually realistic virtual game **Scenes**, the game engine must model sources
    of light, how light falls directly from those sources onto surfaces, and also
    how light then indirectly bounces from those surfaces to other objects in the
    scene, and again onto other objects and so on. For rich, complex **Scenes** containing
    many objects and light sources, it would be impossible to calculate everything
    from scratch every frame, so pre-computation needs to take place to model these
    light source and surface interactions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于视觉上逼真的虚拟游戏**场景**，游戏引擎必须模拟光源、光线如何直接从这些光源照射到表面上，以及光线随后如何间接地从这些表面反弹到场景中的其他物体上，然后再次反弹到其他物体上，依此类推。对于包含许多物体和光源的丰富、复杂**场景**，每帧从头开始计算一切是不可能的，因此需要预先计算来模拟这些光源和表面之间的相互作用。
- en: In this chapter, we will look at the creative ways of using lights and effects,
    and also take a look at some of Unity's key **Lighting** features, such as Procedural
    Skyboxes, Reflection emissive **Materials**, Probes, Light Probes, custom Reflection
    Sources, and **Global Illumination** (**GI**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨使用灯光和效果的创意方式，并查看Unity的一些关键**光照**功能，例如程序化Skyboxes、反射发射**材质**、探针、光照探针、自定义反射源和**全局光照**（**GI**）。
- en: The big picture
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体概念
- en: There are many ways of creating light sources in Unity. Here's a quick overview
    of the most common methods.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中创建光源有许多方法。以下是对最常见方法的快速概述。
- en: Lights
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灯光
- en: 'Lights are placed into the scene as GameObjects, featuring a Light component.
    They can function in Realtime, Baked, or Mixed modes. Among the other properties,
    they can have their Range, Color, Intensity, and Shadow Type set by the user.
    There are four types of lights:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 灯光作为具有灯光组件的GameObject放置到场景中。它们可以在实时、烘焙或混合模式下工作。在其他属性中，用户可以设置它们的范围、颜色、强度和阴影类型。有四种类型的灯光：
- en: '**Directional Light**: This is normally used to simulate the sunlight'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向光**：这通常用于模拟阳光'
- en: '**Spot Light**: This works like a cone-shaped spot light'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚光灯**：这就像一个圆锥形聚光灯'
- en: '**Point Light**: This is a bulb-like, omnidirectional light'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点光**：这是一种类似灯泡的全向光'
- en: '**Area Light**: This baked-only light type is emitted in all directions from
    a rectangle-shaped entity, allowing for a smooth, realistic shading'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域光**：这是一种仅烘焙的灯光类型，从矩形实体向所有方向发射，允许实现平滑、逼真的着色'
- en: 'The following screenshot illustrates different types of lights, with their
    scene panel icons:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了不同类型的灯光及其场景面板图标：
- en: '![](img/1cf7e68d-aa83-492f-a1a8-423f8e583a2c.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1cf7e68d-aa83-492f-a1a8-423f8e583a2c.png)'
- en: Environment lighting
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境光照
- en: Unity's Environment Lighting is often achieved through the combination of a
    Skybox **Material** and sunlight defined by the scene's **Directional Light**.
    Such a combination creates an ambient light that is integrated into the scene's
    environment, and which can be set as real-time or baked into **Lightmaps**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的环境光照通常是通过结合Skybox**材质**和场景中定义的**方向光**的阳光来实现的。这种组合创建了一种环境光，它被集成到场景的环境中，并且可以设置为实时或烘焙到**光照贴图**中。
- en: 'Ambient lighting doesn''t come from any locational source, as it exists evenly
    throughout the scene. Ambient light can be used to influence the overall brightness
    of a scene:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 环境光照并不来自任何特定位置，因为它在整个场景中均匀分布。环境光可以用来影响场景的整体亮度：
- en: '![](img/af27aa4e-7612-4a3d-b7ae-06b79a62fe02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/af27aa4e-7612-4a3d-b7ae-06b79a62fe02.png)'
- en: Emissive materials
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发光材料
- en: 'When applied to static objects, materials featuring the Emission colors or
    maps will cast light over surfaces nearby, in both **Real-Time** and **Baked**
    modes, as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于静态物体时，具有发射颜色或图的材料将在**实时**和**烘焙**模式下在附近的表面上投射光线，如下面的截图所示：
- en: '![](img/e935fb04-6498-4e0d-9853-ae197c5df3ea.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e935fb04-6498-4e0d-9853-ae197c5df3ea.png)'
- en: Projector
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投影仪
- en: 'As its name suggests, a Projector can be used to simulate projected lights
    and shadows, basically by projecting a material and its **Texture** map onto the
    other objects:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，投影仪可以通过将材料及其**纹理**图投影到其他物体上来模拟投影光和阴影：
- en: '![](img/75b02737-7317-418c-924b-a50ed54ed431.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/75b02737-7317-418c-924b-a50ed54ed431.png)'
- en: Lightmaps
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光照贴图
- en: Lightmaps are basically **Texture** maps generated from the **Scene's** lighting
    information and applied to the scene's static objects in order to avoid the use
    of processing-intensive **Real-Time** lighting.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 光照贴图基本上是从**场景**的光照信息生成的**纹理**图，并将其应用于场景中的静态物体，以避免使用处理密集型的**实时**光照。
- en: Pre-computation of lighting in a **Scene** is known as Lightmap *Baking. Static* –
    immovable – parts of the scene (lights and other objects) can have their lighting
    "baked" (pre-computed), before the game is run. Then, during **Run-Time**, game
    performance is improved, since the pre-calculated Lightmaps can be used rather
    than having to re-calculate each frame at **Run-Time** (although this does require
    more memory to store the pre-computations).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在**场景**中预计算光照被称为光照贴图**烘焙**。静态的（不可移动的）场景部分（灯光和其他物体）可以在游戏运行之前将它们的照明“烘焙”（预计算）。然后，在**运行时**，由于可以使用预计算的光照贴图而不是在**运行时**每帧重新计算，因此游戏性能得到提高（尽管这需要更多的内存来存储预计算）。
- en: Unity offers two lightmappers, Enlighten, and more recently the Progressive
    lightmapper. Enlighten can work well for Precomputed real-time Global Illumination
    (ambient lighting). The Progressive lightmapper is recommended for Baked Lightmaps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Unity提供了两个光照贴图器，Enlighten和较新的Progressive光照贴图器。Enlighten可以很好地用于预计算的实时全局光照（环境光照）。Progressive光照贴图器建议用于烘焙光照贴图。
- en: Light probes
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光探针
- en: Light Probes are a way of sampling the **Scene's** illumination at specific
    points in order to have it applied onto dynamic objects without the use of **Real-Time**
    lighting. *Moving* (dynamic) objects can use Light Probes so that their lighting
    changes in relation to where the baked light sources are located in the **Scene**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 光探针是一种在**场景**的特定点采样光照的方法，以便在没有使用**实时**光照的情况下将其应用于动态物体。**移动**（动态）的物体可以使用光探针，以便它们的照明随烘焙光源在**场景**中的位置变化而变化。
- en: The Lighting settings window
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灯光设置窗口
- en: 'The Lighting window, (menu: Window | Rendering | Lighting Settings), is the
    hub for setting and adjusting the scene''s illumination features, such as Lightmaps,
    Global Illumination, Fog, and much more:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 灯光窗口，（菜单：窗口 | 渲染 | 灯光设置），是设置和调整场景照明功能（如光照贴图、全局光照、雾等）的中心：
- en: '![](img/0a6dba89-0bc9-4b8a-ac62-cc7f2b5f3d22.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a6dba89-0bc9-4b8a-ac62-cc7f2b5f3d22.png)'
- en: The Light Explorer panel
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光照探索器面板
- en: When working with Lights and Lighting, a useful tool in Unity is the Lighting
    Explorer panel, which allows editing and viewing the properties of all of the
    lights in the current scene. The Lighting Explorer panel lists all Lights in a
    single panel, making it easy to work with each individually, or change the settings
    of several at the same time. It can be a great time-saving tool when working with
    scenes involving lots of Light Game Objects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Unity中处理灯光和光照时，一个有用的工具是光照探索器面板，它允许编辑和查看当前场景中所有灯光的属性。光照探索器面板列出了单个面板中的所有灯光，这使得单独处理每个灯光或同时更改多个灯光的设置变得容易。当处理涉及大量灯光游戏对象的场景时，它是一个节省时间的强大工具。
- en: 'To display the Light Explorer panel, choose the following menu: Window | Rendering
    | Light Explorer:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示光照探索器面板，请选择以下菜单：窗口 | 渲染 | 光照探索器：
- en: '![](img/5ac03c9f-1459-45f7-8197-ae1fdc54c015.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5ac03c9f-1459-45f7-8197-ae1fdc54c015.png)'
- en: Cucoloris cookies
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 棕色纸板
- en: Lights can have a cookie **Texture** applied. Cookies are **Textures** used
    to cast shadows or silhouettes in a **Scene**. They are produced by using the
    cookie Texture as a mask between the light source and the surfaces being rendered.
    Their name, and usage, comes from the use of physical devices called cucoloris
    (nicknamed cookies) used in theatre and movie production, to give the shadow effects
    implying environments such as moving clouds, the bars of a prison window, or the
    sunlight broken up by a jungle leaf canopy.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 灯光可以应用cookie **纹理**。cookie是用于在**场景**中投射阴影或轮廓的**纹理**。它们是通过使用cookie纹理作为光源和被渲染表面之间的遮罩来产生的。它们的名称和用途来源于在剧院和电影制作中使用的物理设备cucoloris（昵称cookie），用于产生暗示环境效果的阴影，如移动的云彩、监狱窗户的栅栏或被丛林树叶遮挡的阳光。
- en: Color space (Gamma and Linear)
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 色彩空间（伽玛和线性）
- en: 'Unity now offers a choice of two Color spaces: Gamma (the default) and Linear.
    You can select your desired Color Space via the following menu: Edit | Project
    Settings | Player. While Linear space has significant advantages, it isn''t supported
    by all hardware (especially mobile systems), so which you choose will depend on
    which platform you are deploying for.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Unity现在提供了两种色彩空间的选择：伽玛（默认）和线性。您可以通过以下菜单选择您想要的色彩空间：编辑 | 项目设置 | 玩家。虽然线性空间具有显著的优势，但并非所有硬件（尤其是移动系统）都支持它，因此您选择哪种将取决于您部署的平台。
- en: Further resources
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步的资源
- en: 'This chapter aims to present you with some of Unity''s lighting features, and
    offer a few tricks with lights and effects. As you work through the recipes in
    this chapter, you may wish to learn more about this chapter''s topics from some
    of these sources:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在向您介绍Unity的一些照明功能，并提供一些关于灯光和效果的技巧。在您学习本章中的食谱时，您可能希望从以下这些来源中了解更多关于本章主题的信息：
- en: 'The Unity lighting manual entry: [https://docs.unity3d.com/Manual/Lighting.html](https://docs.unity3d.com/Manual/Lighting.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity照明手册条目：[https://docs.unity3d.com/Manual/Lighting.html](https://docs.unity3d.com/Manual/Lighting.html)
- en: 'Unity''s **Global Illumination** (**GI**) pages:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity的**全局照明**（**GI**）页面：
- en: '[https://docs.unity3d.com/Manual/GIIntro.html](https://docs.unity3d.com/Manual/GIIntro.html)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.unity3d.com/Manual/GIIntro.html](https://docs.unity3d.com/Manual/GIIntro.html)'
- en: '[http://docs.unity3d.com/Manual/GlobalIllumination.html](http://docs.unity3d.com/Manual/GlobalIllumination.html)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.unity3d.com/Manual/GlobalIllumination.html](http://docs.unity3d.com/Manual/GlobalIllumination.html)'
- en: 'Unity''s information about cookie **Textures** can be found at their manual
    page: [https://docs.unity3d.com/Manual/Cookies.html](https://docs.unity3d.com/Manual/Cookies.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity关于cookie **纹理**的信息可以在他们的手册页面找到：[https://docs.unity3d.com/Manual/Cookies.html](https://docs.unity3d.com/Manual/Cookies.html)
- en: 'Another source about Unity and cookie **Textures** is the *CgProgramming WikiBook*
    for Unity: [https://en.wikibooks.org/wiki/Cg_Programming/Unity/Cookies](https://en.wikibooks.org/wiki/Cg_Programming/Unity/Cookies)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个关于Unity和cookie **纹理**的来源是Unity的*CgProgramming WikiBook*：[https://en.wikibooks.org/wiki/Cg_Programming/Unity/Cookies](https://en.wikibooks.org/wiki/Cg_Programming/Unity/Cookies)
- en: 'Unity manual about choosing a color space: [https://unity3d.com/learn/tutorials/topics/graphics/choosing-color-space](https://unity3d.com/learn/tutorials/topics/graphics/choosing-color-space)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity手册关于选择色彩空间：[https://unity3d.com/learn/tutorials/topics/graphics/choosing-color-space](https://unity3d.com/learn/tutorials/topics/graphics/choosing-color-space)
- en: 'Unity manual about the Lighting Explorer panel: [https://docs.unity3d.com/Manual/LightingExplorer.html](https://docs.unity3d.com/Manual/LightingExplorer.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity手册关于照明探索器面板的信息：[https://docs.unity3d.com/Manual/LightingExplorer.html](https://docs.unity3d.com/Manual/LightingExplorer.html)
- en: 'About Linear and Gamma lighting workflows: [https://docs.unity3d.com/Manual/LinearRendering-LinearOrGammaWorkflow.html](https://docs.unity3d.com/Manual/LinearRendering-LinearOrGammaWorkflow.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于线性伽玛照明工作流程的信息：[https://docs.unity3d.com/Manual/LinearRendering-LinearOrGammaWorkflow.html](https://docs.unity3d.com/Manual/LinearRendering-LinearOrGammaWorkflow.html)
- en: 'LMHPoly article on 7 tips for better Unity Lighting: [https://lmhpoly.com/7-tips-for-better-lighting-in-unity/](https://lmhpoly.com/7-tips-for-better-lighting-in-unity/)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LMHPoly关于在Unity中改善照明的7个技巧的文章：[https://lmhpoly.com/7-tips-for-better-lighting-in-unity/](https://lmhpoly.com/7-tips-for-better-lighting-in-unity/)
- en: Directional Light with cookie Texture to simulate a cloudy day
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cookie纹理模拟多云天气的方向光
- en: As can be seen in many first-person shooters and survival horror games, lights
    and shadows can add a great deal of realism to a **Scene**, helping to create
    the right atmosphere for the game immensely. In this recipe, we will create a
    cloudy outdoor environment using cookie **Textures**. Cookie **Textures** work
    as masks for lights. It functions by adjusting the intensity of the light projection
    to the cookie texture's alpha channel. This allows for a silhouette effect (just
    think of the bat signal) or, as in this particular case, subtle variations that
    give a filtered quality to the lighting.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如许多第一人称射击游戏和生存恐怖游戏中可以看到的那样，灯光和阴影可以为场景增添许多真实感，极大地帮助创造适合游戏的氛围。在这个菜谱中，我们将使用cookie
    **纹理**创建一个多云的户外环境。Cookie **纹理**充当灯光的遮罩。它通过调整灯光投影到cookie纹理的alpha通道的强度来工作。这可以实现轮廓效果（想想蝙蝠信号），或者在这个特定案例中，细微的变化，给灯光带来过滤后的质感。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have access to an image editor, or prefer to skip the **Texture**
    map elaboration in order to focus on the implementation, we have provided the
    prepared cookie image file cloudCookie.tga, inside the `07_01` folder.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法访问图像编辑器，或者希望跳过**纹理**映射的详细说明，以便专注于实现，我们已经在`07_01`文件夹中提供了准备好的cookie图像文件cloudCookie.tga。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To simulate a cloudy outdoor environment, follow these steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟多云的户外环境，请按照以下步骤操作：
- en: In your image editor, create a new 512 x 512 pixel image.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的图像编辑器中创建一个新的512 x 512像素图像。
- en: 'Using black as the foreground color and white as the background color, apply
    the Clouds filter – in Photoshop, choose the following menu: Filter | Render |
    Clouds:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用黑色作为前景色和白色作为背景色，应用云彩滤镜 - 在Photoshop中，选择以下菜单：滤镜 | 渲染 | 云彩：
- en: '![](img/2d798ed3-09b7-469e-944d-e3b5734a00b4.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2d798ed3-09b7-469e-944d-e3b5734a00b4.png)'
- en: Learning about the Alpha channel is useful, but you could get the same result
    without it. Skip steps 3 to 7, save your image as cloudCookie.png and, when changing
    texture type in step 9, leave Alpha from Greyscale checked.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 了解alpha通道很有用，但您可以在没有它的情况下得到相同的结果。跳过步骤3到7，将图像保存为cloudCookie.png，并在步骤9更改纹理类型时，保留灰度中的Alpha选中。
- en: Select your entire image and copy it.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的整个图像并复制它。
- en: 'Open the Channels window (in Photoshop, this can be done choosing the following
    menu: Window | Channels.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开通道窗口（在Photoshop中，可以通过以下菜单操作：窗口 | 通道。
- en: 'There should be three channels: Red, Green, and Blue. Create a new channel.
    This will be the Alpha channel.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该有三个通道：红色、绿色和蓝色。创建一个新的通道。这将是一个alpha通道。
- en: 'In the Channels window, select the Alpha 1 channel and paste your image into
    it:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在通道窗口中，选择Alpha 1通道并将您的图像粘贴进去：
- en: '![](img/091ede6b-80fd-4f7f-adf1-a43d80bfedd7.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/091ede6b-80fd-4f7f-adf1-a43d80bfedd7.png)'
- en: Save your image file as cloudCookie.PSD or TGA.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像文件保存为cloudCookie.PSD或TGA。
- en: Import your image file to Unity and select it in the **Project** panel.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像文件导入Unity并在项目面板中选择它。
- en: 'From the **Inspector**, change its Texture Type to Cookie and its Light Type
    to Directional. Then, click on Apply, as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**中，将其纹理类型更改为Cookie，其灯光类型更改为方向。然后，按照以下方式点击应用：
- en: '![](img/08ab0e68-3598-4d9d-8b16-8cab91722c8f.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08ab0e68-3598-4d9d-8b16-8cab91722c8f.png)'
- en: 'Let''s add a light to our scene. Since we want to simulate sunlight, the best
    option is to create a **Directional Light**. Choose the Hierarchy menu: Create
    | Light | Directional Light.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在场景中添加一束光。由于我们想要模拟阳光，最佳选项是创建一个**方向光**。选择层次菜单：创建 | 光 | 方向光。
- en: 'We will need a surface to actually see the lighting effect. You can either
    add a 3D plane to your scene (menu: GameObject | 3D Object | Plane), or create
    a 3D Terrain (menu: GameObject | 3D Object | Terrain).'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个表面来真正看到灯光效果。您可以在场景中添加一个3D平面（菜单：游戏对象 | 3D对象 | 平面），或者创建一个3D地形（菜单：游戏对象 |
    3D对象 | 地形）。
- en: In the Inspector, reset the light's Transform Position to (`0, 0, 0`) and its
    Rotation to (`90, 0, 0`).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将灯光的变换位置重置为（`0, 0, 0`）及其旋转重置为（`90, 0, 0`）。
- en: 'In the Cookie field, select the cloudCookie texture that you imported earlier.
    Change the Cookie Size field to 15, or a value that you feel is more appropriate
    for the **Scene''s** dimensions. Set the Shadow Type as No Shadows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cookie字段中，选择您之前导入的cloudCookie纹理。将Cookie Size字段更改为15，或您认为更适合场景尺寸的值。将阴影类型设置为无阴影：
- en: '![](img/6dfecb4f-03ad-4dcc-b58b-53a72a383e52.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6dfecb4f-03ad-4dcc-b58b-53a72a383e52.png)'
- en: 'Create a new C# script class named ShadowMover, and add an instance object
    as a component to the **Directional Light**:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本类名为ShadowMover，并将实例对象作为组件添加到**方向光**：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Select the Directional Light. In the Inspector, change the parameters Wind Speed
    X and Wind Speed Z to different values.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择方向光。在检查器中，将参数风速 X 和风速 Z 更改为不同的值。
- en: Play your scene. The shadows will now be moving.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放你的场景。现在阴影将会移动。
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The script class offers two public values for the X- and Z- speeds of movement
    (simulating wind).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本类提供了两个公共值，用于 X 和 Z 方向的速度（模拟风速）。
- en: When the scene starts, first, the initial position of the Directional Light
    is stored. Then, the size of the cookie is read from the sibling Light component,
    and used to calculate maximum X and Z values. Finally, a Vector3 is created, for
    the amount to move our light by in seconds, based on the X and Z window speeds
    (Y is zero, since we don't need to move the Directional Light in the Y axis).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当场景开始时，首先，存储方向光的初始位置。然后，从同级光组件中读取饼干的大小，并用于计算最大 X 和 Z 值。最后，创建一个 Vector3，用于在秒内移动我们的光，基于
    X 和 Z 窗口速度（Y 为零，因为我们不需要在 Y 轴上移动方向光）。
- en: The `WrapValue(...)` method is defined, which returns a value. If the positive
    value of the first parameter exceeds the second parameter (the limit), then the
    third parameter (the initial value) is returned. Otherwise, the value of the first
    parameter is returned. This allows is to ensure that if a value (for example,
    our X or Z coordinate) goes beyond a limit, we can "wrap" it back to its start
    value.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`WrapValue(...)` 方法被定义，它返回一个值。如果第一个参数（正数）的值超过第二个参数（限制），则返回第三个参数（初始值）。否则，返回第一个参数的值。这允许我们确保如果一个值（例如，我们的
    X 或 Z 坐标）超出了限制，我们可以将其“包裹”回起始值。'
- en: The `Update()` method is executed in each frame. The next position for the light
    is calculated (current position plus the current frame's proportion of the wind
    speed per second vector). The X and Z values of this new position are set using
    our `WrapValue(...)` method, so we know that their limit values are not exceeded.
    Finally, the position of the light is set to this new position, `Vector3`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update()` 方法在每一帧执行。计算光的下一个位置（当前位置加上当前帧每秒风速向量的比例）。使用我们的 `WrapValue(...)` 方法设置这个新位置的
    X 和 Z 值，这样我们知道它们的限制值不会超过。最后，将光的位置设置为这个新位置，`Vector3`。'
- en: The reason we are not enabling shadows is because the light angle for the X
    axis must be 90 degrees (or there will be a noticeable gap when the light resets
    to the original position). If you want dynamic shadows in your scene, please add
    a second **Directional Light**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有启用阴影的原因是因为 X 轴的光角度必须是 90 度（否则当光重置到原始位置时会有明显的间隙）。如果你想在场景中实现动态阴影，请添加第二个 **方向光**。
- en: Creating and applying a cookie texture to a spotlight
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并应用饼干纹理到聚光灯上
- en: Cookie Textures can work well with Unity **Spotlight**s to simulate shadows
    coming from projectors, windows, and so on. An example of this would be for the
    bars of a prison window.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 饼干纹理可以很好地与 Unity **聚光灯**一起工作，以模拟来自投影仪、窗户等处的阴影。一个例子是监狱窗户的栅栏。
- en: 'In this recipe, we''ll create and apply a cookie **Texture** suitable to use
    with Unity **Spotlights**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建并应用一个适合与 Unity **聚光灯**一起使用的饼干**纹理**：
- en: '![](img/f1e123b2-093a-4a82-8397-0653e9e437d0.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1e123b2-093a-4a82-8397-0653e9e437d0.png)'
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have access to an image editor, or prefer to skip the **Texture**
    map elaboration in order to focus on the implementation, we have provided the
    prepared cookie image file called spotCookie.tif inside the `07_02` folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有访问图像编辑器的权限，或者希望跳过**纹理**映射的详细说明，以便专注于实现，我们在 `07_02` 文件夹中提供了名为 spotCookie.tif
    的准备好的饼干图像文件。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To create and apply a cookie texture to a spotlight, follow these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建并应用饼干纹理到聚光灯上，请按照以下步骤操作：
- en: In your image editor, create a new 512 x 512 greyscale pixel image.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的图像编辑器中，创建一个 512 x 512 灰度像素图像。
- en: 'Ensure that the border is completely black by setting the brush tool color
    to black and drawing around the four edges of the image. Then, draw some criss-crossed
    lines. Save your image, naming it spotCookie:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将画笔工具颜色设置为黑色并在图像的四周边缘绘制，确保边界完全为黑色。然后，绘制一些交叉的线条。保存你的图像，命名为 spotCookie：
- en: '![](img/a45d26bf-879e-4eaa-aede-eba662c5a63d.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a45d26bf-879e-4eaa-aede-eba662c5a63d.png)'
- en: Import your image file to Unity and select it in the Project panel.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的图像文件导入 Unity 并在项目面板中选择它。
- en: 'From the Inspector, change its Texture Type to Cookie and its Light Type to
    Spotlight, and set the Alpha Source to From Grayscale. Then, click on Apply, as
    follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，将其纹理类型更改为Cookie，并将光类型更改为聚光灯，然后将Alpha源设置为从灰度。然后，按照以下方式点击应用：
- en: '![](img/944c9df7-c815-45f6-ab0b-051b460b5062.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/944c9df7-c815-45f6-ab0b-051b460b5062.png)'
- en: 'Create a scene containing the following:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的场景：
- en: A flat 3D Terrain or Plane as our ground
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个平坦的3D地形或平面作为我们的地面
- en: A 3D Cube or Plane, stretched to act as a wall
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个3D立方体或平面，拉伸以充当墙壁
- en: Two or three other 3D objects in front of the wall
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 墙壁前面的两到三个其他3D对象
- en: Position the **Main Camera** to be showing the 3D objects in front of the "wall".
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**主摄像机**定位为显示“墙壁”前面的3D对象。
- en: 'Now, add a Spotlight to the scene by choosing the following menu: Create |
    Light | Spotlight.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过选择以下菜单将聚光灯添加到场景中：创建 | 光 | 聚光灯。
- en: Orient the Spotlight to be pointing in the direction of the **Main Camera** 
    – you'll probably have to rotate the Y value by 180 degrees.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将聚光灯定位为主摄像机指向的方向——你可能需要将Y值旋转180度。
- en: Set Shadow Type to No Shadows, and drag your spotCookie **Texture** from the
    Project panel into the Cookie slot.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将阴影类型设置为无阴影，并将你的spotCookie **纹理**从项目面板拖动到Cookie槽中。
- en: Play your Scene. You should now see the spotlight casting shadows as if a light
    had been shone through a grid of planks of wood or metal.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放你的场景。你现在应该看到聚光灯投射出阴影，就像光线穿过木条或金属板的网格一样。
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created a greyscale Texture for use with Unity Spotlights – that's completely
    black around the edges – so that light does not "bleed" around the edge of our
    Spotlight emission. The black lines in the Texture are used by Unity to create
    shadows in the light emitted from the Spotligh, creating the effect that there
    are some straight beams of wood or metal through which the Spotlight is being
    shone.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个用于Unity聚光灯的灰度纹理——边缘完全为黑色——这样光线就不会“溢出”到我们的聚光灯发射边缘。纹理中的黑色线条被Unity用来在从聚光灯发出的光中创建阴影，从而产生一些直的木棍或金属杆的光束效果。
- en: 'You can learn more about creating Spotlight cookies in Unity at the Unity tutorial
    page: [http://docs.unity3d.com/Manual/HOWTO-LightCookie.html](http://docs.unity3d.com/Manual/HOWTO-LightCookie.html).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Unity教程页面了解更多关于创建聚光灯cookie的信息：[http://docs.unity3d.com/Manual/HOWTO-LightCookie.html](http://docs.unity3d.com/Manual/HOWTO-LightCookie.html)。
- en: Adding a custom Reflection map to a scene
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向场景添加自定义反射图
- en: 'Unity''s Standard Shader gets its reflection from the scene''s Reflection Source,
    as configured in the scene section of the Lighting window. The level of reflectiveness
    for each Material is defined by its Metallic value or Specular value, depending
    on which Shader is being used. This approach can be a real time-saver, allowing
    you to quickly assign the same reflection map to every object in the scene. It
    also helps keep the overall look of the scene coherent and cohesive. In this recipe,
    we will learn how to take advantage of the Reflection Source feature:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的标准着色器从场景的反射源获取反射，这是在照明窗口的场景部分中配置的。每种材质的反射程度由其金属值或光泽值定义，具体取决于正在使用的着色器。这种方法可以节省大量时间，允许你快速将相同的反射图分配给场景中的每个对象。它还有助于保持场景的整体外观协调一致。在本菜谱中，我们将学习如何利用反射源功能：
- en: '![](img/10c82279-c87a-4a62-a0d6-d9cbcc483828.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/10c82279-c87a-4a62-a0d6-d9cbcc483828.png)'
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will prepare a Reflection Cubemap, which is basically the
    environment to be projected as a reflection onto the material. It can be made
    from either six or, as shown in this recipe, a single image file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将准备一个反射立方体贴图，这基本上是将环境投影到材质上的反射。它可以由六个或，如本菜谱所示，一个单独的图像文件制作。
- en: To help us with this recipe, we have provided a Unity package (batteryPrefab.unitypackage),
    containing a prefab made of a 3D object and a basic Material (using a TIFF as
    a Diffuse map), and also a JPG file to be used as the reflection map. All of these
    files are inside the `07_03` folder.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们完成这个菜谱，我们提供了一个Unity包（batteryPrefab.unitypackage），其中包含一个由3D对象和基本材质（使用TIFF作为漫反射图）组成的预制件，以及一个用于反射图的JPG文件。所有这些文件都在`07_03`文件夹中。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To add Reflectiveness and Specularity to a material, follow these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要给材质添加反射性和光泽度，请按照以下步骤操作：
- en: Import the batteryPrefab.unitypackage package into a new project. Then, select
    the battery_prefab object from the Assets folder, in the **Project** panel.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将batteryPrefab.unitypackage包导入新项目。然后，从**项目**面板中选择Assets文件夹中的battery_prefab对象。
- en: 'From the Inspector, expand the **Material** component and observe the asset
    preview window. Thanks to the Specular map, the material already features a reflective
    look. However, it looks as if it is reflecting the scene''s default Skybox, as
    shown in the following screenshot:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从检查器中展开**材质**组件，观察资产预览窗口。多亏了高光贴图，材质已经具有反射外观。然而，它看起来像是在反射场景的默认天空盒，如下面的截图所示：
- en: '![](img/bb7e8060-e994-4381-a5f5-09fb4a21f8e5.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb7e8060-e994-4381-a5f5-09fb4a21f8e5.png)'
- en: Import the CustomReflection.jpg image file. Ensure that this asset is selected
    in the Project panel.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入CustomReflection.jpg图像文件。确保在项目面板中选中此资产。
- en: 'In the Inspector for its Import Settings, set the following properties:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其导入设置检查器中，设置以下属性：
- en: '**Texture Type**: Default'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纹理类型**: 默认'
- en: '**Texture Shape**: Cube'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纹理形状**: 立方体'
- en: '**Mapping**: Latitude-Longitude Layout (Cylindrical)'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**映射**: 纬度-经度布局（圆柱形）'
- en: '**Convolution Type**: None'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卷积类型**: 无'
- en: '**Fixup Edge Seams**: Checked'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修复边缘接缝**: 已勾选'
- en: '**Filter Mode**: Trilinear'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤模式**: 三线性'
- en: 'Now, click on the Apply button, as follows:'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，点击应用按钮，如下所示：
- en: '![](img/77e0476b-b1f9-434e-b874-07a5da933ff7.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/77e0476b-b1f9-434e-b874-07a5da933ff7.png)'
- en: 'Let''s replace the scene''s Skybox with our newly created Cubemap as the Reflection
    map for our scene (menu: Window | Rendering | Lighting Settings).'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将场景的天空盒替换为我们新创建的立方体贴图，作为场景的反射贴图（菜单：窗口 | 渲染 | 灯光设置）。
- en: 'Select the **Scene** section and use the drop-down menu to change the Reflection
    Source to Custom. Finally, assign the newly created CustomReflection texture as
    the Cubemap, as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**场景**部分，并使用下拉菜单将反射源更改为自定义。最后，将新创建的CustomReflection纹理作为立方体贴图分配，如下所示：
- en: '![](img/a3f86985-e065-4875-9955-64ecdf9782db.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a3f86985-e065-4875-9955-64ecdf9782db.png)'
- en: Check out the new reflections on the battery_prefab object.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看电池_prefab对象上的新反射。
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The material's specular map provides a reflective look, including the intensity
    and smoothness of the reflection. However, the image you see in the refection
    itself is given by the Cubemap that we created.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 材质的高光贴图提供了反射外观，包括反射的强度和光滑度。然而，反射中看到的图像是由我们创建的立方体贴图提供的。
- en: There's more...
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: Reflection Cubemaps can be achieved in many ways and have different mapping
    properties.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 反射立方体贴图可以通过多种方式实现，并且具有不同的映射属性。
- en: Mapping coordinates
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射坐标
- en: The Cylindrical mapping that we applied was well-suited for the photograph that
    we used. However, depending on how the reflection image is generated, a Cubic-
    or Spheremap-based mapping can be more appropriate. Also, note that the Fixup
    Edge Seams option will try to make the image seamless.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的圆柱形映射非常适合我们使用的照片。然而，根据反射图像的生成方式，基于立方体或球体贴图的映射可能更合适。此外，请注意，修复边缘接缝选项将尝试使图像无缝。
- en: Sharp reflections
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锐利反射
- en: You might have noticed that the reflection is somewhat blurry compared to the
    original image; this is because we have ticked the Glossy Reflections box. To
    get a sharper-looking reflection, deselect this option; in this case, you can
    also leave the Filter Mode option as default (Bilinear).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，与原始图像相比，反射有些模糊；这是因为我们勾选了光泽反射框。为了获得更清晰的反射效果，取消选中此选项；在这种情况下，你还可以将过滤模式选项保留为默认（双线性）。
- en: Maximum size
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大尺寸
- en: At 512 x 512 pixels, our reflection map will probably run fine on lower-end
    machines. However, if the quality of the reflection map is not very important
    in your game's context, and the original image dimensions are big (say, 4,096
    x 4,096), you might want to change the texture's Max Size from the Import Settings menu
    to a lower number.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在512 x 512像素时，我们的反射贴图可能在低端机器上运行良好。然而，如果你的游戏中反射贴图的质量不是很重要，并且原始图像的尺寸很大（比如说，4096
    x 4096），你可能想将导入设置菜单中的纹理最大尺寸从高数值降低。
- en: Creating a laser aim with a projector
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用投影仪创建激光瞄准
- en: 'Although using UI elements, such as a cross-hair, is a valid way to allow players
    to aim, replacing (or combining) it with a projected laser dot might be a more
    interesting approach. In this recipe, we will use a light projector to implement
    this concept:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用UI元素，如准星，是允许玩家瞄准的有效方法，但用投影激光点替换（或结合）它可能是一个更有趣的方法。在这个菜谱中，我们将使用灯光投影仪来实现这个概念：
- en: '![](img/8c056206-f8fc-4668-92e3-9449290e9aca.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c056206-f8fc-4668-92e3-9449290e9aca.png)'
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To help us with this recipe, in the `07_04` folder, we've provided a Unity package
    (laserAssets.unitypackage) containing a sample scene featuring a character holding
    a laser pointer, and also a texture map named LineTexture.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您完成这个食谱，在 `07_04` 文件夹中，我们提供了一个 Unity 包（laserAssets.unitypackage），其中包含一个包含一个手持激光指示器的角色示例场景，以及一个名为
    LineTexture 的纹理图。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a laser dot aim with a Projector, follow these steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Projector 创建激光点瞄准，请按照以下步骤操作：
- en: Start a new 3D project.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的 3D 项目。
- en: We'll be importing the Projectors components from the **Unity Standard Assets**.
    If you didn't install the **Standard Assets** when you installed Unity, go the
    the **Asset Store** and install the free **Standard Assets** now.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将导入 **Unity 标准资产** 中的 Projectors 组件。如果您在安装 Unity 时没有安装 **标准资产**，请访问 **资产商店**
    并现在安装免费的 **标准资产**。
- en: Import `laserAssets.unitypackage` into a new project. Then, open the scene named
    basic_scene_MsLaser. This is a basic scene, featuring a player character in a
    maze, with standard arrow keys or WASD movement.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `laserAssets.unitypackage` 导入到一个新项目中。然后，打开名为 basic_scene_MsLaser 的场景。这是一个基本场景，包含一个在迷宫中的玩家角色，可以使用标准箭头键或
    WASD 进行移动。
- en: 'Import the **Projectors** contents from the Effects Unity Standard Assets package
    folder:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Effects Unity 标准资产包文件夹导入 **Projectors** 内容：
- en: '![](img/1b104465-fe16-4357-bf92-835121da42c0.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b104465-fe16-4357-bf92-835121da42c0.png)'
- en: From the **Inspector**, locate the ProjectorLight shader (inside the Assets
    | Standard Assets | Effects | Projectors | Shaders folder). Duplicate the file
    and name the new copy as ProjectorLaser.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **检查器** 中，找到 ProjectorLight 着色器（在 Assets | Standard Assets | Effects | Projectors
    | Shaders 文件夹内部）。复制文件，并将新副本命名为 ProjectorLaser。
- en: 'Open ProjectorLaser. From the first line of the code, change Shader `"Projector/Light"`
    to Shader `"Projector/Laser"`. Then, locate `Blend DstColor One` and change it
    to `Blend One One`. Save and close the file:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 ProjectorLaser。从代码的第一行开始，将 Shader `"Projector/Light"` 更改为 Shader `"Projector/Laser"`。然后，找到
    `Blend DstColor One` 并将其更改为 `Blend One One`。保存并关闭文件：
- en: '![](img/2b81dbb7-7f13-44a0-89ee-4983dc962b0b.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b81dbb7-7f13-44a0-89ee-4983dc962b0b.png)'
- en: The reason for editing the shader for the laser was to make it stronger by changing
    its blend type to Additive. Shader programming is a complex subject, which is
    beyond the scope of this book. However, if you want to learn more about it, check
    out Unity's documentation on the subject, which is available at [http://docs.unity3d.com/Manual/SL-Reference.html](http://docs.unity3d.com/Manual/SL-Reference.html),
    and also the book called *Unity Shaders and Effects Cookbook*, published by Packt.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑激光着色器的目的是通过将其混合类型更改为叠加来增强其效果。着色器编程是一个复杂的话题，超出了本书的范围。然而，如果您想了解更多，请查看 Unity
    关于该主题的文档，可在 [http://docs.unity3d.com/Manual/SL-Reference.html](http://docs.unity3d.com/Manual/SL-Reference.html)
    找到，以及由 Packt 出版的名为 *Unity Shaders and Effects Cookbook* 的书籍。
- en: Create a new material called m_laser. In the Inspector, change its Shader to
    Projector/Laser.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 m_laser 的新材质。在检查器中，将其着色器更改为 Projector/Laser。
- en: Locate the Falloff Texture in the **Project** panel (inside Effects | Projectors
    | Textures).
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 面板中找到 Falloff Texture（在 Effects | Projectors | Textures 内部）。
- en: 'Open it in your image editor and, except for the first and last columns column
    of pixels, which should be black, paint everything white. Save the changed image
    file as Falloff_laser and go back to Unity:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的图像编辑器中打开它，除了第一列和最后一列像素应该是黑色之外，将其他所有内容涂成白色。将更改后的图像文件保存为 Falloff_laser 并返回
    Unity：
- en: '![](img/975973c3-39ff-43e4-8bb6-78b4e70dce8b.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/975973c3-39ff-43e4-8bb6-78b4e70dce8b.png)'
- en: 'Select the m_laser asset in the **Project** panel. In the Inspector, set the
    Main Color to red (RGB: 255, 0, 0). Then, from the texture slots, drag **Texture**
    Light into the Cookie slot, and **Texture** Falloff_laser into the Falloff slot
    (these **Textures** are inside your imported folder, Effects | Projectors | Textures):'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 面板中选择 m_laser 资产。在检查器中，将主颜色设置为红色（RGB：255, 0, 0）。然后，从纹理槽中拖动 **Texture**
    Light 到 Cookie 槽中，并将 **Texture** Falloff_laser 拖动到 Falloff 槽中（这些 **纹理** 在您导入的文件夹中，Effects
    | Projectors | Textures 内部）：
- en: '![](img/1c593dac-3b31-443f-8def-b81718501e15.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c593dac-3b31-443f-8def-b81718501e15.png)'
- en: 'From the **Hierarchy**, find and select the pointerPrefab object (MsLaser |
    mixamorig:Hips | mixamorig:Spine | mixamorig:Spine1 | mixamorig:Spine2 | mixamorig:RightShoulder
    | mixamorig:RightArm | mixamorig:RightForeArm | mixamorig:RightHand | pointerPrefab).
    Then, create a new child GameObject (menu: Create | Create Empty Child). Rename
    this new child laserProjector:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**中找到并选择pointerPrefab对象（MsLaser | mixamorig:Hips | mixamorig:Spine |
    mixamorig:Spine1 | mixamorig:Spine2 | mixamorig:RightShoulder | mixamorig:RightArm
    | mixamorig:RightForeArm | mixamorig:RightHand | pointerPrefab）。然后，创建一个新的子GameObject（菜单：创建
    | 创建空子对象）。将这个新子对象重命名为laserProjector：
- en: '![](img/b5fd3c3e-d3cc-45b6-9685-a3c913efd00b.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5fd3c3e-d3cc-45b6-9685-a3c913efd00b.png)'
- en: Select the laserProjector object. Then, from the **Inspector**, click the Add
    Component button and navigate to Effects | Projector. Then, from the new Projector
    component, set the Orthographic option as true and set Orthographic Size as `0.1`.
    Finally, select m_laser from the Material slot.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择激光投影仪对象。然后，从**检查器**中点击添加组件按钮，导航到效果 | 投影仪。接着，从新的投影仪组件中，将正交选项设置为true，并将正交大小设置为`0.1`。最后，从材质槽中选择m_laser。
- en: Run the scene. You will be able to see the laser aim dot.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行场景。您将能够看到激光瞄准点。
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, the size of the aim dot has been exaggerated. Should you need
    a more realistic thickness for your laser pointer, change the Orthographic Size
    of the **Projector** component to something smaller, like 0.025.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，瞄准点的尺寸已经被夸大了。如果您需要激光指针更真实的厚度，请将**投影仪**组件的正交大小更改为更小的值，如0.025。
- en: The laser aim effect was achieved by using a Projector. A Projector can be used
    to simulate light, shadows, and more, and is a component that projects a Material
    (and its Texture) onto other game objects. By attaching a projector to the laserPointer
    object, we have ensured that it will face the right direction at all times. To
    get the desired, vibrant look, we edited the projector Material's Shader code,
    making it brighter.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 激光瞄准效果是通过使用投影仪实现的。投影仪可以用来模拟光线、阴影等，它是一个将材质（及其纹理）投影到其他游戏对象的组件。通过将投影仪附加到激光指针对象上，我们确保它始终面向正确的方向。为了获得所需的鲜艳外观，我们编辑了投影仪材质的Shader代码，使其更亮。
- en: There's more...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Here are some ways to enhance this recipe.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强这个食谱的方法。
- en: Limiting the range of the laser with Raycast hit to limit the far clip plane
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Raycast击中限制激光范围以限制远裁剪平面
- en: 'Our laser target should highlight the first object it hits – it shouldn''t
    go through all of the objects ahead of it. The project''s far clip plane defined
    the distance at which the projector stops. We can use a simple script to fire
    a Raycast, and use the distance to the first object it hits as a guide for setting
    this far clip plane:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标激光应该突出显示它击中的第一个对象——它不应该穿过前面的所有对象。项目的远裁剪平面定义了投影仪停止的距离。我们可以使用一个简单的脚本来发射Raycast，并使用击中第一个对象的距离作为设置此远裁剪平面的指南：
- en: '[PRE1]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the Raycast hits an object, we set the **Projector** far clip plane to that
    distance, plus a little margin if 0.5 Unity units (for example, it might be a
    curved surface).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Raycast击中一个对象，我们将**投影仪**的远裁剪平面设置为该距离，再加上0.5个Unity单位的小边距（例如，它可能是一个曲面）。
- en: 'We scripted a way to prevent projections from going through objects, by setting
    its far clip plane on approximately the same level of the first object that is
    receiving the projection. The line of code that is responsible for this action
    is as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过设置其远裁剪平面在接收投影的第一个对象的大致同一水平上，编写了一个脚本，以防止投影穿过对象。负责此操作的代码行如下：
- en: '[PRE2]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Further reading
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Learn more about projectors from the Unity manual page: [https://docs.unity3d.com/Manual/class-Projector.html](https://docs.unity3d.com/Manual/class-Projector.html).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity手册页面了解有关投影仪的更多信息：[https://docs.unity3d.com/Manual/class-Projector.html](https://docs.unity3d.com/Manual/class-Projector.html)。
- en: Enhancing the laser aim with a Line Renderer
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Line Renderer增强激光瞄准
- en: 'Let''s improve the previous recipe by displaying a laser beam from the character''s
    laser gun to the projected laser target. We''ll implement the laser beam through
    scripting a Line Renderer, which is being redrawn each frame:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过显示从角色的激光枪到投影激光目标的光束来改进之前的食谱。我们将通过编写一个每帧重绘的Line Renderer脚本来实现激光束：
- en: '![](img/12ea8a77-6e6f-4674-a686-7eb991393261.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12ea8a77-6e6f-4674-a686-7eb991393261.png)'
- en: Getting ready
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe ­is based on the previous one, so make a copy of that project and
    work with its copy. You'll also need a **Texture** for the beam color; one is
    provided in the `07_05` folder called beam.psd.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方基于之前的配方，因此复制该项目并使用其副本进行工作。您还需要一个用于光束颜色的**纹理**；在`07_05`文件夹中提供了一个名为beam.psd的纹理。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To enhance the laser aim with a Line Renderer, follow these steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Line Renderer增强激光瞄准，请按照以下步骤操作：
- en: Our Line Renderer will need a **Material** to work with. Create a new Material
    named m_beam.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的Line Renderer需要一个**材质**来工作。创建一个新的材质，命名为m_beam。
- en: 'In the **Inspector**, set the Shader of the m_beam to Particles/Additive. Also,
    set its Tint Color to red (**RGB**: `255;0;0`).'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**中，将m_beam的着色器设置为Particles/Additive。同时，将其色调颜色设置为红色（**RGB**：`255;0;0`）。
- en: 'Import the beam image file. Then, set it as the Particle **Texture** for the
    m_beam, as follows:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入光束图像文件。然后，将其设置为m_beam的粒子**纹理**，如下所示：
- en: '![](img/e1d367f2-f940-403c-a420-42bee06ca636.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e1d367f2-f940-403c-a420-42bee06ca636.png)'
- en: 'Create a new C# script class named LaserBeam, and add an instance object as
    a component to the Game Object''s Laser Projector:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本类名为LaserBeam，并将实例对象作为组件添加到游戏对象的激光投影器中：
- en: '[PRE3]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Select the LaserProjector Game Object. From the Inspector, find the Laser Beam
    (Script) component and drag the m_beam Material from the Project panel into the
    Beam Material.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择激光投影器游戏对象。从检查器中，找到激光束（脚本）组件并将m_beam材质从项目面板拖动到光束材质中。
- en: Play the scene. The red laser beam should be shining in a line from the laser
    gun to the first object hit by the beam.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。红色激光束应该从激光枪到被光束击中的第一个物体形成一条线。
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The laser aim effect was achieved by using a dynamic Line Renderer, which created
    and updated each frame through code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 激光瞄准效果是通过使用动态Line Renderer实现的，它通过代码在每一帧创建和更新。
- en: In this recipe, the width of the laser beam has been exaggerated. Should you
    need a more realistic thickness for your beam, change the Line Width field of
    the Laser Beam (Script) component to 0.05\. Also, remember to make the beam more
    opaque by setting the Regular Color of the Laser Beam component brighter. You'll
    probably want to match the size of the laser aim Projector, too, so set the Orthographic
    Size of the **Projector** component to something smaller, such as 0.025.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，激光束的宽度被夸大了。如果您需要更逼真的厚度，请将激光束（脚本）组件的线宽字段更改为0.05。同时，记得通过设置激光束组件的常规颜色更亮来使光束更不透明。您可能还想匹配激光瞄准投影器的大小，因此将投影器组件的正交大小设置为更小的值，例如0.025。
- en: Regarding the Line Renderer, we have opted to create it dynamically, via code,
    instead of manually adding the component to the game object.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Line Renderer，我们选择通过代码动态创建它，而不是手动将组件添加到游戏对象中。
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some ways to enhance this recipe.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强此配方的方法。
- en: Changing the beam color when the Fire key is held down
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当按下火焰键时更改光束颜色
- en: 'It''s always good to provide the player with audio or visual feedback when
    they do something. So, when the player presses the *Fire* button (for example,
    the mouse button) let''s change the color of the beam. Do the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家执行某些操作时，提供音频或视觉反馈总是好的。所以，当玩家按下**火焰**按钮（例如，鼠标按钮）时，让我们改变光束的颜色。请执行以下操作：
- en: 'Add a new public variable for the fire beam color:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为火焰光束颜色添加一个新的公共变量：
- en: '[PRE4]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a new method to set up changing a color (using a Sine wave value):'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的方法来设置颜色变化（使用正弦波值）：
- en: '[PRE5]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add statements at the end of the `Update()` method to detect when the Fire
    button is pressed/released to trigger a color change:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Update()`方法的末尾添加语句以检测当按下/释放火焰按钮时触发颜色变化：
- en: '[PRE6]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Setting up an environment with Procedural Skybox and Directional Light
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置程序化Skybox和方向光的环境
- en: 'Besides the traditional six-sided and Cubemap Skyboxes, Unity also features
    a third type of skybox: the Procedural Skybox. Easy to create and set up, the
    Procedural Skybox can be used in conjunction with a Directional Light to provide
    Environment Lighting in your scene. In this recipe, we will learn about the different
    parameters of the Procedural Skybox:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的六边形和Cubemap Skyboxes之外，Unity还提供了一种第三种类型的skybox：程序化Skybox。易于创建和设置，程序化Skybox可以与方向光结合使用，为场景提供环境光照。在本配方中，我们将了解程序化Skybox的不同参数：
- en: '![](img/1ce3efd7-fb5a-4ba9-a8a6-839ab2563b02.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1ce3efd7-fb5a-4ba9-a8a6-839ab2563b02.png)'
- en: How to do it...
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To set up Environment Lighting using the Procedural Skybox and **Directional
    Light**, follow these steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用程序化天空盒和 **方向光** 设置环境照明，请按照以下步骤操作：
- en: 'Create a new **Scene** inside a Unity project. Observe that a new scene already
    includes two objects: the Main Camera and a Directional Light.'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 项目内创建一个新的 **场景**。观察到一个新的场景已经包括两个对象：主摄像机和一个方向光。
- en: In the scene, create a 3D Plane named Plane-ground; positioned at (0, 0, 0)
    and scaled to (`20, 20, 20`).
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中创建一个名为 Plane-ground 的 3D 平面；定位在 (0, 0, 0) 并缩放到 (`20, 20, 20`)。
- en: 'Add some 3D Cubes to your scene, like so:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的场景添加一些 3D 立方体，如下所示：
- en: '![](img/db1ab526-ed1f-4ee3-8a1a-74d7626c56af.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/db1ab526-ed1f-4ee3-8a1a-74d7626c56af.png)'
- en: Create a new **Material** asset file named m_skybox. In the Inspector, change
    the Shader from Standard to Skybox/Procedural.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 m_skybox 的新 **材质** 资产文件。在检查器中，将着色器从标准更改为 Skybox/程序化。
- en: Open the Lighting window (Window | Rendering | Lighting Settings), and access
    the scene section. In the Environment Lighting subsection, populate the Skybox
    slot with the m_skybox Material, and the Sun slot with the scene's default Directional
    Light. Ensure that the real-time Global Illumination option is checked (from real-time
    Lighting), and that the Environment Ambient Mode is set to real-time.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开照明窗口（窗口 | 渲染 | 照明设置），并访问场景部分。在环境照明子部分，将 m_skybox 材质填充到天空盒槽中，并将场景的默认方向光填充到太阳槽中。确保实时全局照明选项被勾选（来自实时照明），并且环境环境模式设置为实时。
- en: 'From the **Project** panel, select m_skybox. Then, from the Inspector, set
    the Sun Size as 0.05 and the Atmosphere Thickness as 1.4\. Experiment by changing
    the Sky Tint color to RGB: 148; 128; 128, and the Ground color to a value that
    resembles the scene cube floor''s color (such as RGB: 202; 202; 202). If you feel
    that the scene is too bright, try bringing the Exposure level down to 0.85, as
    follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目** 面板中选择 m_skybox。然后，从检查器中设置太阳大小为 0.05 和大气厚度为 1.4。通过改变天空色调颜色到 RGB：148；128；128，并将地面颜色设置为类似于场景立方体地板颜色的值（例如
    RGB：202；202；202）进行实验。如果你觉得场景太亮，尝试将曝光级别降低到 0.85，如下所示：
- en: '![](img/bbebd520-8302-4a77-a6bb-b01c3a73b3d9.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bbebd520-8302-4a77-a6bb-b01c3a73b3d9.png)'
- en: Select the Directional Light and change its Rotation to 5, 170, 0\. Also ensure
    that its Light Mode setting is real-time (not baked or Mixed).
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择方向光并将其旋转设置为 5, 170, 0。同时确保其光模式设置为实时（不是烘焙或混合）。
- en: Run the scene  – it should resemble a dawning environment.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行场景 – 它应该类似于黎明环境。
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Ultimately, the appearance of Unity''s native Procedural Skyboxes depends on
    the five parameters that make them up:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Unity 本地程序化天空盒的外观取决于构成它们的五个参数：
- en: 'Sun size: The size of the bright yellow sun that is drawn onto the Skybox is
    located according to the Directional Light''s Rotation on the X and Y axes.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 太阳大小：绘制到天空盒上的明亮黄色太阳的大小是根据方向光在 X 和 Y 轴上的旋转定位的。
- en: 'Atmosphere Thickness: This simulates how dense the atmosphere is for this Skybox.
    Lower values (less than 1.0) are good for simulating the outer space settings.
    Moderate values (around 1.0) are suitable for earth-based environments. Values
    that are slightly above 1.0 can be useful when simulating air pollution and other
    dramatic settings. Exaggerated values (for example, more than 2.0) can help to
    illustrate extreme conditions or even alien settings.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大气厚度：这模拟了此天空盒的大气密度。较低的值（小于1.0）适合模拟外太空设置。中等值（大约1.0）适合地球环境。略高于1.0的值在模拟空气污染和其他戏剧性设置时可能很有用。夸张的值（例如，大于2.0）可以帮助说明极端条件或甚至外星环境。
- en: 'Sky Tint: This is the color that is used to tint the Skybox. It is useful for
    fine-tuning or creating stylized environments.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天空色调：这是用于着色天空盒的颜色。它对于微调或创建风格化环境很有用。
- en: 'Ground: This is the color of the ground. It can really affect the Global Illumination
    of the scene. So, choose a value that is close to the level''s terrain and/or
    geometry (or a neutral one).'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面：这是地面的颜色。它真的会影响场景的全局照明。因此，选择一个接近关卡地形和/或几何形状（或中性）的值。
- en: 'Exposure: This determines the amount of light that gets in the Skybox. The
    higher levels simulate overexposure, while the lower values simulate underexposure.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曝光：这决定了进入天空盒的光量。较高的级别模拟过曝，而较低的值模拟欠曝。
- en: It is important to note that the Skybox appearance will respond to the scene's
    Directional Light, playing the role of the sun. In this case, rotating the light
    around its X axis can create dawn and sunset scenarios, whereas rotating it around
    its Y axis will change the position of the sun, changing the cardinal points of
    the scene.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，天空盒的外观将响应场景的方向光，扮演太阳的角色。在这种情况下，围绕X轴旋转光线可以创建黎明和日落场景，而围绕Y轴旋转则会改变太阳的位置，改变场景的方位点。
- en: Also, regarding the Environment Lighting, note that although we have used the
    Skybox as the Ambient Source, we could have chosen a Gradient or a single color
    instead, in which case the scene's illumination wouldn't be attached to the Skybox's
    appearance.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 关于环境照明，也请注意，尽管我们使用了天空盒作为环境光源，但我们也可以选择渐变或单色，在这种情况下，场景的照明就不会附着于天空盒的外观。
- en: Finally, also regarding the Environment Lighting, please note that we have set
    the Ambient GI to real-time. The reason for this was to allow the real-time changes
    in the GI, promoted by the rotating Directional Light. In case we didn't need
    these changes at runtime, we could have chosen the baked alternative.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于环境照明，请注意，我们已经将环境光漫反射设置为实时。这样做的原因是为了允许由旋转的方向光促进的实时光漫反射变化。如果我们不需要在运行时进行这些变化，我们可以选择烘焙的替代方案。
- en: There's more...
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some ways to enhance this recipe.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强这道菜谱的方法。
- en: Setting and rising the sun through scripted rotation of Directional Light
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过脚本旋转方向光设置和升起太阳
- en: Let's make things even more interesting by using code to change the rotation
    of the Directional Light. This will give a dynamic rising/setting sun effect as
    our scene runs.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用代码更改方向光的旋转，让事情变得更加有趣。这将给我们的场景带来动态的日出/日落效果。
- en: 'Ceate a new C# script class named RotateLight, and add an instance object as
    a component to the Directional Light Game Object:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本类名为RotateLight，并将一个实例对象作为组件添加到方向光游戏对象：
- en: '[PRE7]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, when you run the scene, you will see the sun rising/setting and the lighting
    colors changing accordingly.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行场景时，你会看到太阳升起/落下，照明颜色相应地改变。
- en: Adding a sun flare
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加光晕
- en: Let's add a sun flare effect to our scene.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在场景中添加一个光晕效果。
- en: For this step, you will need to import Unity's Standard Assets Effects package,
    which you should have installed when you installed Unity, but you can also add
    it to an individual project via the Unity Asset Store.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一步，你需要导入Unity的标准资产效果包，你应该在安装Unity时安装了它，但你也可以通过Unity资产商店将其添加到单个项目中。
- en: Import the Light Flares contents from the Effects Unity Standard Assets package
    folder.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从效果Unity标准资产包文件夹导入光晕内容。
- en: Select the Directional Light. In the Inspector, for the Light component, populate
    the Flare slot with the sun flare (from the project panel, the Effects | Light
    Flares | Flares folder).
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择方向光。在检查器中，对于灯光组件，将光晕槽填充为太阳光晕（从项目面板，效果 | 灯光光晕 | 光晕文件夹）。
- en: 'From the scene section of the Lighting window, find the Other Settings subsection.
    Then, set Flare Fade Speed to 1 and Flare Strength to 0.46, as follows:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在照明窗口的场景部分，找到其他设置子部分。然后，将光晕淡入速度设置为1，光晕强度设置为0.46，如下所示：
- en: '![](img/977297a5-2005-4b84-a05b-e6021e33e58e.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/977297a5-2005-4b84-a05b-e6021e33e58e.png)'
- en: Play the scene. A sun flare effect should have been applied to the scene's lighting.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。应该已经将光晕效果应用于场景的照明。
- en: Reflecting surrounding objects with Reflection Probes
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反射探针反射周围对象
- en: If you want your scene's environment to be reflected by Game Objects by featuring
    reflective Materials (such as the ones with high Metallic or Specular levels),
    then you can achieve such an effect by using Reflection Probes. They allow for
    real-time, baked, or even Custom reflections through the use of Cubemaps.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让你的场景环境通过具有反射材料（如具有高金属或高镜面级别的材料）的Game Objects反射，那么你可以通过使用反射探头来实现这种效果。它们允许通过使用立方体贴图实现实时、烘焙或自定义反射。
- en: 'real-time reflections can be expensive in terms of processing; in which case,
    you should favor baked reflections, unless it''s really necessary to display dynamic
    objects being reflected (mirror-like objects, for instance). Still, there are
    some ways real-time reflections can be optimized. In this recipe, we will test
    three different configurations for reflection probes:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 实时反射在处理方面可能会很昂贵；在这种情况下，你应该优先考虑烘焙反射，除非确实有必要显示动态对象被反射（例如，类似镜子的对象）。尽管如此，还有一些方法可以优化实时反射。在这个食谱中，我们将测试反射探针的三个不同配置：
- en: real-time reflections (constantly updated)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时反射（持续更新）
- en: real-time reflections (updated on-demand via scripting)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时反射（通过脚本按需更新）
- en: baked reflections (from the editor)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 烘焙反射（来自编辑器）
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we have prepared a basic scene, featuring three sets of reflective
    objects: one is constantly moving, one is static, and one moves whenever it is
    interacted with. The `reflectionProbes.unitypackage` package that is containing
    the scene can be found inside the `07_07` folder.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们准备了一个基本场景，其中包括三组反射对象：一组是持续移动的，一组是静态的，还有一组在交互时移动。包含场景的`reflectionProbes.unitypackage`包可以在`07_07`文件夹中找到。
- en: How to do it...
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To reflect the surrounding objects using the Reflection Probes, follow these
    steps:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用反射探针反射周围的对象，请按照以下步骤操作：
- en: Import the Unity package `reflectionProbes.unitypackage`. Then, open the scene
    named reflective_objects. This is a basic scene featuring three sets of reflective
    objects.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入Unity包`reflectionProbes.unitypackage`。然后，打开名为reflective_objects的场景。这是一个包含三组反射对象的基本场景。
- en: 'Ensure that the Quality setting for the project has enabled real-time Reflection
    Probes. Do this by choosing menu: Edit | Project Settings | Quality, and ensuring
    that the real-time Reflection Probes option is checked for the quality setting
    you wish to use.'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保项目的质量设置已启用实时反射探针。通过选择菜单：编辑 | 项目设置 | 质量，并确保要使用的质量设置中已选中实时反射探针选项。
- en: Play the scene. Observe that one of the systems is dynamic, one is static, and
    one rotates randomly, whenever a key is pressed.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。观察到一个系统是动态的，一个是静态的，还有一个在按下键时随机旋转。
- en: Stop the scene.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止场景。
- en: 'First, let''s create a constantly updated real-time Reflection Probe for the scene
    (menu: Create | Light | Reflection Probe). Name it ReflectionProbe-real-time.'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们为场景创建一个持续更新的实时反射探针（菜单：创建 | 光 | 反射探针）。将其命名为ReflectionProbe-real-time。
- en: 'Make ReflectionProbe-real-time a child of the Game Object System 1 real-time
    | MainSphere. Then, in the Inspector, set its Transform Position to (0, 0, 0):'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ReflectionProbe-real-time设置为游戏对象系统1实时 | MainSphere的子对象。然后，在检查器中，将其变换位置设置为（0,
    0, 0）：
- en: '![](img/a3b50102-891d-44f1-875d-145f4d30f154.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a3b50102-891d-44f1-875d-145f4d30f154.png)'
- en: 'In the Inspector, find the Reflection Probe component. Set the Type as real-time,
    Refresh Mode as Every Frame, and Time Slicing as No time slicing, as follows:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器中，找到反射探针组件。将类型设置为实时，刷新模式设置为每帧，时间切片设置为无时间切片，如下所示：
- en: '![](img/c4253593-b2c5-44f6-8e20-c2af70874c7d.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c4253593-b2c5-44f6-8e20-c2af70874c7d.png)'
- en: Play the scene. The reflections on System 1 real-time will now be updated in
    real-time. Stop the scene.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。现在，系统1实时上的反射将实时更新。停止场景。
- en: 'Observe that the only object displaying the real-time reflections is System
    1 real-time | MainSphere. The reason for this is the size of the box of the Reflection
    Probe. From the Reflection Probe component, change its size to (25, 10, 25). Note
    that the small red spheres are now affected as well. However, it is important
    to note that all objects display the same reflection. Since our Reflection Probe''s
    origin is placed at the same location as the MainSphere, all reflective objects
    will display reflections from that point of view:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，唯一显示实时反射的对象是系统1实时 | MainSphere。原因是反射探针的盒子大小。从反射探针组件中，将其大小更改为（25, 10, 25）。请注意，现在小红色球体也会受到影响。然而，重要的是要注意所有对象都显示相同的反射。由于我们的反射探针的起点与MainSphere的位置相同，所有反射对象都将从这个视角显示反射：
- en: '![](img/f3446e6a-e0d9-41b8-99e0-bc5164cb79b0.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f3446e6a-e0d9-41b8-99e0-bc5164cb79b0.png)'
- en: 'If you want to eliminate the reflection from the reflective objects within
    the Reflection Probe, such as the small red spheres, select the objects and, from
    the Mesh Renderer component, set Reflection Probes as Off, as shown in the following
    screenshot:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要消除Reflection Probe内反射对象的反射，例如小红色球，选择这些对象，从Mesh Renderer组件中，将Reflection
    Probes设置为关闭，如下所示：
- en: '![](img/ebb2c12a-221a-4f57-83c0-ae8ae69c33ab.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ebb2c12a-221a-4f57-83c0-ae8ae69c33ab.png)'
- en: Add a new Reflection Probe to the scene. This time, name it ReflectionProbe-onDemand
    and make it a child of the System 2 On Demand | MainSphere GameObject. Then, in
    the Inspector, change its transform position to (0,0,0).
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向场景中添加一个新的Reflection Probe。这次，将其命名为ReflectionProbe-onDemand，并使其成为System 2 On
    Demand | MainSphere GameObject的子对象。然后，在检查器中，将变换位置更改为(0,0,0)。
- en: 'Now, go to the Reflection Probe component. Set Type as real-time, Refresh Mode
    as Via scripting, and Time Slicing as Individual faces, as shown in the following
    screenshot:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往Reflection Probe组件。将类型设置为实时，刷新模式设置为通过脚本，时间切片设置为单个面，如下所示：
- en: '![](img/8920f18b-65a6-4d85-a52d-b83fb1ca4e72.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8920f18b-65a6-4d85-a52d-b83fb1ca4e72.png)'
- en: 'Create a new C# script class named UpdateProbe, and add an instance object
    as a component to GameObject ReflectionProbe-onDemand:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本类名为UpdateProbe，并将实例对象作为组件添加到ReflectionProbe-onDemand GameObject：
- en: '[PRE8]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, find the script class named RandomRotation, which is attached to the System
    2 On Demand | Spheres object, and replace it with the following:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，找到名为RandomRotation的脚本类，它附加到System 2 On Demand | Spheres对象上，并将其替换为以下内容：
- en: '[PRE9]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save the script and test your scene. Observe how the Reflection Probe is updated
    whenever a key is pressed.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并测试你的场景。观察每当按下键时Reflection Probe是如何更新的。
- en: Stop the scene. Add a third Reflection Probe to the scene. Name it ReflectionProbe-custom
    and make it a child of the System 3 On Custom | MainSphere GameObject. Then, from
    the Inspector, change its Transform Position to (0,0,0).
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止场景。向场景中添加第三个Reflection Probe。将其命名为ReflectionProbe-custom，并使其成为System 3 On
    Custom | MainSphere GameObject的子对象。然后，在检查器中，将变换位置更改为(0,0,0)。
- en: 'Go to the Reflection Probe component. Set Type as Custom and click on the Bake
    button, as follows:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Reflection Probe组件。将类型设置为Custom，然后点击Bake按钮，如下所示：
- en: '![](img/6743b6f1-ab65-40a9-b4fd-1fd00639c0f7.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6743b6f1-ab65-40a9-b4fd-1fd00639c0f7.png)'
- en: A Save File dialog window will show up. Save the file as ReflectionProbe-custom-reflectionHDR.exr.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个保存文件对话框。将文件保存为ReflectionProbe-custom-reflectionHDR.exr。
- en: 'Observe that the reflection map does not include the reflection of red spheres
    on it. To change this, you have two options: set the System 3 On Custom | Spheres
    GameObject (and all its children) as Reflection Probe Static, like so:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，反射贴图不包括红色球在其上的反射。要更改这一点，你有两种选择：将System 3 On Custom | Spheres GameObject（及其所有子对象）设置为Reflection
    Probe Static，如下所示：
- en: '![](img/598c9a68-f0ae-4fb3-8ebc-769daec38cfd.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/598c9a68-f0ae-4fb3-8ebc-769daec38cfd.png)'
- en: Or check the Dynamic Objects option Reflection Probe component of the ReflectionProbe-custom
    GameObject. Note that with this option, you will also see a reflection of the
    other two large spheres and their belt of red spheres in the reflection on the
    MainSphere of System 3 Custom.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者检查ReflectionProbe-custom GameObject的Reflection Probe组件中的Dynamic Objects选项。注意，使用此选项时，你也会在System
    3 Custom的MainSphere上的反射中看到其他两个大球及其红色球带的反射。
- en: Select GameObject ReflectionProbe-custom, and click the Bake button again. You
    should now see the reflection of red spheres on it.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择ReflectionProbe-custom GameObject，然后再次点击Bake按钮。你现在应该能看到红色球在其上的反射。
- en: 'If you want your reflection Cubemap to be dynamically baked while you edit
    your scene, you can set the Reflection Probe Type to baked, open the Lighting
    window (menu: Window | Rendering | Lighting Settings), access the scene section,
    and check the Auto Generate option, as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你希望在编辑场景时动态烘焙你的反射立方体贴图，可以将Reflection Probe类型设置为baked，打开照明窗口（菜单：窗口 | 渲染 | 照明设置），访问场景部分，并检查自动生成选项，如下所示：
- en: '![](img/ec69e6fb-7c18-4432-ba07-5768ab822e07.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec69e6fb-7c18-4432-ba07-5768ab822e07.png)'
- en: This mode won't include dynamic objects in the reflection, so be sure to set
    System 3 Custom | Spheres and System 3 Custom | MainSphere as Reflection Probe
    Static.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式不会包括动态对象在反射中，所以请确保将System 3 Custom | Spheres和System 3 Custom | MainSphere设置为Reflection
    Probe Static。
- en: How it works...
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Reflection Probes element acts like omnidirectional cameras that render
    Cubemaps and applies them onto the objects within their constraints. When creating
    Reflection Probes, it''s important to be aware of how the different types work:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 反射探针元素类似于全向摄像机，它渲染Cubemaps并将它们应用到其约束内的对象上。在创建反射探针时，了解不同类型的工作方式很重要：
- en: '**Real-time Reflection Probes**: **Cubemaps** are updated at runtime. The real-time
    Reflection Probes have three different Refresh Modes: On Awake (Cubemap is baked
    once, right before the scene starts); Every frame (Cubemap is constantly updated);
    Via scripting (Cubemap is updated whenever the RenderProbe function is used). Since
    Cubemaps feature six sides, the Reflection Probes features Time Slicing, so each
    side can be updated independently. There are three different types of Time Slicing:
    All Faces at Once (renders all faces at once and calculates mipmaps over 6 frames.
    It updates the probe in 9 frames); Individual Faces (each face is rendered over
    a number of frames. It updates the probe in 14 frames. The results can be a bit
    inaccurate, but it is the least expensive solution in terms of frame rate impact);
    No Time Slicing (the Probe is rendered and mipmaps are calculated in one frame.
    It provides high accuracy, but it also the most expensive in terms of frame rate).'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时反射探针**：**Cubemaps**在运行时更新。实时反射探针有三种不同的刷新模式：在唤醒时（Cubemap在场景开始前烘焙一次）；每帧（Cubemap不断更新）；通过脚本（每当使用RenderProbe函数时更新Cubemap）。由于Cubemaps有六个面，反射探针具有时间切片功能，因此每个面可以独立更新。有三种不同类型的时间切片：一次性更新所有面（一次渲染所有面，并在6帧内计算米普图。在9帧内更新探针）；单独更新面（每个面在多帧内渲染。在14帧内更新探针。结果可能有点不准确，但这是在帧率影响方面最经济的解决方案）；无时间切片（探针在一帧内渲染，米普图在一帧内计算。它提供高精度，但也是帧率影响中最昂贵的）。'
- en: 'baked: Cubemaps are baked when editing the screen. Cubemaps can be either manually
    or automatically updated, depending on whether the Auto Generation option is checked
    (it can be found at the Scene section of the Lighting Settings window).'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 烘焙：当编辑屏幕时，Cubemaps会被烘焙。Cubemaps可以是手动或自动更新，这取决于是否勾选了自动生成选项（可以在光照设置窗口的场景部分找到）。
- en: 'Custom: The Custom Reflection Probes can be either manually baked from the
    scene (and even include Dynamic objects), or created from a premade Cubemap.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义：自定义反射探针可以是手动从场景烘焙（甚至包括动态对象），或者从预制的Cubemap创建。
- en: There's more...
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a number of additional settings that can be tweaked, such as Importance,
    Intensity, Box Projection, Resolution, HDR (Hight Dynamic Range), and so on. For
    a complete view on each of these settings, we strongly recommend that you read
    Unity's documentation on the subject, which is available at [http://docs.unity3d.com/Manual/class-ReflectionProbe.html](http://docs.unity3d.com/Manual/class-ReflectionProbe.html).
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他设置可以调整，例如重要性、强度、盒子投影、分辨率、HDR（高动态范围）等。为了全面了解每个设置，我们强烈建议您阅读Unity关于该主题的文档，该文档可在[http://docs.unity3d.com/Manual/class-ReflectionProbe.html](http://docs.unity3d.com/Manual/class-ReflectionProbe.html)找到。
- en: Using Material Emission to bake light from a glowing lamp onto scene objects
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用材质发射将发光灯的光线烘焙到场景对象上
- en: 'As well as Lights, other objects can also emit light if their Materials have
    Emmision properties (such as a Texture, and/or tint color). In this recipe we''ll
    create a lamp that glows green via its Emission Texture. The lamp and other 3D
    objects in the scene will be baked in order to create a pre-computed Lightmap
    for the scene:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 除了灯光之外，其他对象如果它们的材质具有发射属性（例如纹理和/或着色颜色），也可以发光。在这个配方中，我们将创建一个通过其发射纹理发出绿色光的灯。场景中的灯和其他3D对象将被烘焙，以创建场景的预计算光照图：
- en: '![](img/72bc19b6-ed07-4243-8c82-8c248898838e.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72bc19b6-ed07-4243-8c82-8c248898838e.png)'
- en: Getting ready
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have provided a 3D lamp model (lamp), as well as a green
    Texture (lamp_emission) in the `lamp.unitypackage` Unity package in the `07_08`
    folder .
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们在`07_08`文件夹中的`lamp.unitypackage` Unity包中提供了一个3D灯模型（lamp），以及一个绿色纹理（lamp_emission）。
- en: How to do it...
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a glowing lamp using Material Emission, follow these steps:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用材质发射创建发光灯，请按照以下步骤操作：
- en: Create a new 3D Project. You should start with a basic **scene** containing
    a Main Camera and a Directional Light.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的3D项目。你应该从一个包含主摄像机和方向光的**场景**开始。
- en: Import the Unity package `lamp.unitypackage` containing the 3D lamp model (lamp),
    as well as a green Texture (lamp_emission).
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入包含3D灯模型（灯）以及绿色纹理（lamp_emission）的Unity包`lamp.unitypackage`。
- en: 'With the 3D model asset lamp selected in the Project panel, in the Inspector,
    check its Generate Lightmap UVs option, and click on the Apply button to confirm
    the changes:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中选择了3D模型资产灯后，在检查器中勾选其生成光照图UV选项，并点击应用按钮以确认更改：
- en: '![](img/b9f09f3a-3ac6-475a-9b55-eb1c5a3aefb2.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b9f09f3a-3ac6-475a-9b55-eb1c5a3aefb2.png)'
- en: 'In the Project panel, select Material m_lamp. Check the Emission option, and
    then assign Texture lamp_emission to its Emission Color property. Set the Global
    Illumination drop-down menu to baked. This will make the lamp object emit a green
    light that will be baked into the Lightmap:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择材质m_lamp。勾选发射选项，然后将纹理lamp_emission分配给其发射颜色属性。将全局光照下拉菜单设置为烘焙。这将使灯对象发出绿色光，并将其烘焙到光照图中：
- en: '![](img/25a9c5cc-44c6-4b12-8fcd-87ce395edfe9.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/25a9c5cc-44c6-4b12-8fcd-87ce395edfe9.png)'
- en: 'Also, for **Material** m_lamp, click the HDR color box, and increase the intensity
    of this light emitting Material to 1 or 2 (this is a value you may wish to play
    with and "tweak" in order to get your desired settings for a scene):'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，对于**材质**m_lamp，点击HDR颜色框，并增加这个发光材质的强度到1或2（这是一个你可能需要调整以获得场景所需设置的值）：
- en: '![](img/3625d0fc-d38f-481b-a77e-ccc329e3a0e7.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3625d0fc-d38f-481b-a77e-ccc329e3a0e7.png)'
- en: Add some 3D GameObjects to create a simple 3D scene containing a 3D Plane (the
    ground) and three 3D cubes. Position and scale the 3D cubes so that there is large
    one at the back of the 3D Plane, a medium sized one in the middle, and a small
    one in the front.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些3D游戏对象以创建一个简单的3D场景，包含一个3D平面（地面）和三个3D立方体。调整3D立方体的位置和大小，使有一个大立方体位于3D平面的后方，一个中等大小的立方体位于中间，一个小立方体位于前方。
- en: 'Now, drag an instance of the 3D lamp model from the Project panel into the
    scene, placing it near the front-most 3D cube:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将3D灯模型的一个实例从项目面板拖动到场景中，放置在最近的3D立方体前方：
- en: '![](img/f30a7637-0f32-4ad2-b990-d92d2f0b533c.png)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f30a7637-0f32-4ad2-b990-d92d2f0b533c.png)'
- en: You may need to adjust the Main Camera position and rotation so that you can
    see the lamp and the three 3D cubes sitting on the 3D Plane.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能需要调整主相机的位置和旋转，以便可以看到灯和位于3D平面上方的三个3D立方体。
- en: 'Baked lighting only works for static objects, so, with the exception of the
    Main Camera, select everything in the Hierarchy and check the Static option at
    the top-right of the Inspector panel:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 烘焙光照仅适用于静态对象，因此，除了主摄像机外，选择层级中的所有内容，并在检查器面板右上角勾选静态选项：
- en: '![](img/0dffc329-6fdc-4607-a0c6-19a9bddc41a1.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0dffc329-6fdc-4607-a0c6-19a9bddc41a1.png)'
- en: 'Now, select the Directional Light in the Hierarchy and change its Light Mode
    drop-down menu property to baked:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在层级中选择方向光，并将其光模式下拉菜单属性更改为烘焙：
- en: '![](img/558568d7-d39a-461a-bb3f-867941a07e66.png)'
  id: totrans-339
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/558568d7-d39a-461a-bb3f-867941a07e66.png)'
- en: 'We can now assign the **Directional Light** as an Environmental Lighting Sun
    source. Open the Lighting Settings window (choose menu: Window | Rendering | Lighting
    Settings), and drag the **Directional Light** from the **Hierarchy** into the
    Sun slot for the scene Environment properties. Also, set the Environment Lighting
    Ambient Mode drop-down menu to baked. In the Debug Settings, uncheck Auto Generate
    and click the Generate Lighting button to "bake" the Ambient light and green lamp
    emission light into the Scene:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以将**方向光**分配为环境光照太阳光源。打开光照设置窗口（选择菜单：窗口 | 渲染 | 光照设置），并将**方向光**从**层级**拖动到场景环境属性中的太阳槽中。同时，将环境光照环境模式下拉菜单设置为烘焙。在调试设置中，取消自动生成，并点击生成光照按钮以“烘焙”环境光和绿色灯发射光到场景中：
- en: '![](img/7d55fc5d-37d4-4cc4-992f-d8b15ae8ccb2.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7d55fc5d-37d4-4cc4-992f-d8b15ae8ccb2.png)'
- en: 'For a few seconds (depending on the speed of your computer and the complexity
    of the scene), you''ll see a progess bar of the Lightmap baking process at the
    bottom-right of the Unity Editor application window:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟内（取决于你电脑的速度和场景的复杂度），你将在Unity编辑器应用程序窗口的右下角看到光照烘焙过程的进度条：
- en: '![](img/8aae3ffc-2d07-4b23-a377-60ce4cd5b95a.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8aae3ffc-2d07-4b23-a377-60ce4cd5b95a.png)'
- en: Play your **Scene**. You should see how the **Scene** objects are lit both by
    the Directional Light, and by the green Texture emitted from the lamp.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放你的**场景**。你应该能看到**场景**对象既被方向光照亮，也被来自灯的绿色纹理发出的光照亮。
- en: Change the rotation of the Directional Light, and try setting its Light Intensity
    and Indirect Multiplier to 0.5\. Also, play with the HDR intensity of the Material
    m_lamp, and re-bake the Lightmap to make the lamp emission more emphasized (and
    the **Directional Light** play a lessor role).
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变方向光的旋转，并尝试将其光强度和间接乘数设置为0.5。同时，调整材质m_lamp的HDR强度，并重新烘焙光照贴图，以使灯的发射更加突出（并且**方向光**的作用更小）。
- en: How it works...
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have added an emissive **Material** to a GameObject (the lamp), and baked
    a Lightmap based on the static objects in the **Scene** (which include the lamp,
    the **Directional Light**, and the 3D Plane and cubes). The environment's Global
    Illumination ambient lighting is sourced from the Directional Light settings.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为一个游戏对象（灯）添加了一个发射**材质**，并根据场景中的静态对象（包括灯、**方向光**、3D平面和立方体）烘焙了光照贴图。环境的全局光照环境光照来自方向光的设置。
- en: 'Lightmaps are basically Texture maps including scene lights/shadows, global
    illumination, indirect illumination, and objects featuring the Emissive Materials.
    They can be generated automatically or on demand by Unity''s lighting engine.
    However, there are some points that you should pay attention to, such as the following:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 光照贴图基本上是包含场景灯光/阴影、全局光照、间接光照以及具有发射材质的物体的纹理贴图。它们可以由Unity的光照引擎自动生成或在需要时生成。然而，有一些需要注意的点，如下所示：
- en: Set all the non-moving objects and lights to be baked as Static
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有非移动对象和灯光设置为烘焙为静态
- en: Set the game lights as Baked
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏灯光设置为烘焙
- en: Set the scene's Ambient GI as Baked
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将场景的环境全局光照设置为烘焙
- en: Set the Global Illumination option of the emissive materials as baked
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将发射材质的全局光照选项设置为烘焙
- en: Generate Light UVs for all 3D meshes (specially the imported ones)
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有3D网格（特别是导入的网格）生成光照UV
- en: Either build the Lightmaps manually from the Lighting Settings window, or check
    the Auto Generate option
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以从光照设置窗口手动构建光照贴图，或者检查自动生成选项
- en: Lighting a simple scene with Lightmaps and Light Probes
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用光照贴图和光探针照明简单场景
- en: Lightmaps are a great alternative to real-time lighting, as they can provide
    the desired look to an environment without being processor-intensive. There is
    one downside, though – since there is no way of baking Lightmaps onto the dynamic
    objects, the lighting of the important elements of the game (such as player characters
    themselves) can look artificial, failing to match the intensity of the surrounding
    area. The solution? Light Probes.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 光照贴图是实时照明的优秀替代品，因为它们可以在不占用处理器资源的情况下为环境提供所需的外观。然而，有一个缺点——由于无法将光照贴图烘焙到动态对象上，游戏中的重要元素（如玩家角色本身）的照明可能看起来很假，无法与周围区域的强度相匹配。解决方案？光探针。
- en: 'Light Probes work by sampling the light intensity over the location that they
    are placed at. Dynamic objects, once Light Probe-enabled, will be lit according
    to the interpolation of the nearest probes around them:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 光探针通过采样它们放置位置的光强度来工作。一旦启用光探针，动态对象将根据它们周围最近的探针进行插值来照明：
- en: '![](img/5e09c847-75d9-42bc-859a-3f5c5f281e9f.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e09c847-75d9-42bc-859a-3f5c5f281e9f.png)'
- en: Getting ready
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared a basic Unity package (rollerballLevel.unitypackage),
    including a game environment containing emissive lamps (from the previous recipe!),
    and Game Objects, making a suitable level for a RollerBall game. The Game Objects
    are static, and the Directional Light and Emissive Material are set to baked,
    so the scene has been set up as a baked Lightmapped scene.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们准备了一个基本的Unity包（rollerballLevel.unitypackage），包括一个包含发射灯（来自上一个配方！）的游戏环境，以及游戏对象，使其成为一个适合RollerBall游戏的合适关卡。游戏对象是静态的，方向光和发射材质被设置为烘焙，因此场景已经被设置为烘焙光照贴图场景。
- en: The rollerBallLevel.unitypackage package, containing the scene, can be found
    inside the `07_09` folder. You'll also find the two PNG images you need to create
    the RollerBall Material (RollerBallAlbedo.png and RollerBallSpecularGloss.png).
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 包含场景的rollerBallLevel.unitypackage包位于`07_09`文件夹中。你还可以找到创建RollerBall材质所需的两个PNG图像（RollerBallAlbedo.png和RollerBallSpecularGloss.png）。
- en: The geometry for this scene was created using ProBuilder, an extension developed
    by ProCore, which is now free as part of Unity 2018\. ProBuilder is a fantastic
    level design tool that speeds up the design process considerably for both simple
    and complex level design. You can learn more at [http://www.procore3d.com](http://www.procore3d.com) and [https://blogs.unity3d.com/2018/02/15/probuilder-joins-unity-offering-integrated-in-editor-advanced-level-design/](https://blogs.unity3d.com/2018/02/15/probuilder-joins-unity-offering-integrated-in-editor-advanced-level-design/).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 该场景的几何形状是使用ProBuilder创建的，这是由ProCore开发的扩展，现在是Unity 2018的一部分免费提供。ProBuilder是一个出色的关卡设计工具，可以显著加快简单和复杂关卡设计的设计过程。你可以在[http://www.procore3d.com](http://www.procore3d.com)和[https://blogs.unity3d.com/2018/02/15/probuilder-joins-unity-offering-integrated-in-editor-advanced-level-design/](https://blogs.unity3d.com/2018/02/15/probuilder-joins-unity-offering-integrated-in-editor-advanced-level-design/)了解更多信息。
- en: How to do it...
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To reflect the surrounding objects using the Reflection Probes, follow these
    steps:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Reflection Probes反射周围对象，请按照以下步骤操作：
- en: Import rollerBallLevel.unitypackage into a new project. Then, open the scene
    named scene0_level_baked. The scene features a basic environment, with a Directional
    Light and some green emissive lamps.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将rollerBallLevel.unitypackage导入到一个新项目中。然后，打开名为scene0_level_baked的场景。该场景具有一个基本环境，包括一个方向光和一些绿色的发射灯。
- en: 'Import Standard Assets into your project. We need three packages, as follows:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Standard Assets导入到你的项目中。我们需要三个包，如下所示：
- en: Cameras
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机
- en: Characters (we need the RollerBall, so you can uncheck FirstPersonCharacter
    and ThirdPersonCharacter when importing)
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色（我们需要RollerBall，所以在导入时可以取消选中FirstPersonCharacter和ThirdPersonCharacter）
- en: Effects (we just need the Projectors assets, so you can uncheck all other folders
    apart from that one when importing)
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 效果（我们只需要Projectors资产，所以在导入时可以取消选中除该文件夹外的所有其他文件夹）
- en: Drag the RollerBall prefab from the **Project** panel (Standard Assets | Characters
    | RollerBall | Prefabs) into the scene.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将RollerBall prefab从**Project**面板（Standard Assets | Characters | RollerBall |
    Prefabs）拖入场景。
- en: Drag the FreeLookCameraRig prefab from the **Project** panel (Standard Assets
    | Cameras | Prefabs) into the scene. If this does not automatically target the
    RollerBall character, then drag the RollerBall Game Object from the **Hierarchy**
    into the Free Look Cam (Script) Target slot in the **Inspector**.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将FreeLookCameraRig prefab从**Project**面板（Standard Assets | Cameras | Prefabs）拖入场景。如果这没有自动针对RollerBall角色，那么将RollerBall
    GameObject从**Hierarchy**拖入**Inspector**中的Free Look Cam (Script) Target槽位。
- en: Let's add a little color to our RollerBall by creating and applying a new **Material**
    for this GameObject. Create a new Material m_rollerballColor with a Specular setup.
    Set the Albedo Texture to RollerBallAlbedo and its tint to 127/127/127\. Set the
    Specular Texture to RollerBallSpecularGloss.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在RollerBall上添加一点颜色，通过为这个GameObject创建并应用一个新的**材质**。创建一个新的名为m_rollerballColor的材质，并设置Specular设置。将Albedo
    Texture设置为RollerBallAlbedo，其色调为127/127/127。将Specular Texture设置为RollerBallSpecularGloss。
- en: Select Game Object RollerBall in the **Hierarchy**. Apply the m_rollerballColor **Material**
    to the RollerBall Game Object. This should now be a two-colored ball.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Hierarchy**中选中GameObject RollerBall。将m_rollerballColor **材质**应用到RollerBall
    GameObject上。现在应该是一个双色球。
- en: 'We now need to ensure that the RollerBall GameObject will be dynamically affected
    by Light Probes, so with Game Object RollerBall still selected in the Hierarchy,
    for the Mesh Renderer component for the Light Probes option, choose the Blend
    Probes option from the drop-down menu:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要确保RollerBall GameObject将动态地受到Light Probes的影响，因此在Hierarchy中仍然选中GameObject
    RollerBall，对于Light Probes选项的Mesh Renderer组件，从下拉菜单中选择Blend Probes选项：
- en: '![](img/d3b17fbc-c1d1-409a-b690-745e2db1ad2c.png)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3b17fbc-c1d1-409a-b690-745e2db1ad2c.png)'
- en: 'Now, we need to create the Light Probes for the scene. Choose the Hierarchy
    menu: Create | Light | Light Probe Group. This will give you a basic group of
    eight Light Probes, arranged in pairs to form a cubic volume.'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为场景创建Light Probes。选择Hierarchy菜单：Create | Light | Light Probe Group。这将为你提供一个基本的包含八个Light
    Probes的组，成对排列以形成一个立方体体积。
- en: It is important to note that even if you are working on a level that is flat,
    you shouldn't place all your probes on the same level, as Light Probe Groups will
    form a volume in order for the interpolation to be calculated correctly.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：即使你正在处理一个平坦的水平面，你也不应该将所有探针放置在同一水平面上，因为Light Probe Groups将形成一个体积，以便正确计算插值。
- en: 'To facilitate the manipulation of the probes, type **Probe** into the search
    field of the Hierarchy panel. This will isolate the newly created Light Probe
    Group, making it the only editable object on the scene:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要便于操作探针，在层次面板的搜索字段中输入**探针**。这将隔离新创建的光探针组，使其成为场景中唯一的可编辑对象：
- en: '![](img/d1cc991c-8776-40d9-ba91-193396c50b6e.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d1cc991c-8776-40d9-ba91-193396c50b6e.png)'
- en: 'Change your viewport layout to 4 Split by choosing Window | Layouts | 4 Split.
    Then, set viewports as Top, Front, Right, and Persp. Optionally, change Top, Front,
    and Right views to Wireframe mode. Finally, make sure that they are set to Orthographic
    view, as shown in the following screenshot. This will make it easier for you to
    position the Light Probes:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择窗口 | 布局 | 4 分割来将视口布局更改为4分割。然后，设置视口为顶部、前面、右侧和透视。可选地，将顶部、前面和右侧视图更改为线框模式。最后，确保它们设置为正交视图，如下面的截图所示。这将使您更容易定位光探针：
- en: '![](img/d470e30f-9659-4ce5-9704-84340d157293.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d470e30f-9659-4ce5-9704-84340d157293.png)'
- en: 'Position the initial Light Probes at the corners of the top room of the level.
    To move the Probes around, simply click and drag them, as follows:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将初始光探针放置在关卡顶部房间的角落。要移动探针，只需点击并拖动它们，如下所示：
- en: '![](img/333f2e3e-1ed4-47a6-a342-6d0b3eb9a8f6.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/333f2e3e-1ed4-47a6-a342-6d0b3eb9a8f6.png)'
- en: 'Select the four probes to the left side of the tunnel''s entrance. Then, duplicate
    them (use the *Ctrl/Cmd + D* keys). Finally, drag the new probes slightly to the
    right, to a point that they are no longer over the shadow that is projected by
    the wall, as follows:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择隧道入口左侧的四探针。然后，复制它们（使用*Ctrl/Cmd + D*键）。最后，将新探针稍微向右拖动，直到它们不再位于墙投射的阴影上方，如下所示：
- en: '![](img/2ed9c4e6-67cb-4df5-b159-c45bb722c52f.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2ed9c4e6-67cb-4df5-b159-c45bb722c52f.png)'
- en: 'Repeat the last step, this time duplicating the probes next to the tunnel''s
    entrance and bringing them inward toward the group. To delete the selected probes,
    either use the respective button on the Light Probe Group component, or use the
    *Ctrl/Cmd + Backspace* keys:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复最后一步，这次复制隧道入口旁边的探针，并将它们向内移动到组中。要删除选定的探针，可以使用光探针组组件上的相应按钮，或者使用*Ctrl/Cmd + Backspace*键：
- en: '![](img/7704c28b-874e-4a22-b873-f34c77a2fc43.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7704c28b-874e-4a22-b873-f34c77a2fc43.png)'
- en: 'Duplicate and reposition the four probes that are nearest to the tunnel, repeating
    the operation five times and conforming each duplicate set to the shadow projected
    by the tunnel:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并重新定位距离隧道最近的前四个探针，重复此操作五次，并使每个复制的探针组与隧道投射的阴影相吻合：
- en: '![](img/8beb8aca-bcf0-4409-9a45-5b45aa6295dd.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8beb8aca-bcf0-4409-9a45-5b45aa6295dd.png)'
- en: 'Use the Add Probe button to place the three probes over well-lit areas of the
    scene:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用添加探针按钮将三个探针放置在场景中光照良好的区域：
- en: '![](img/beaef73f-b81e-416b-967f-005384f857ab.png)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/beaef73f-b81e-416b-967f-005384f857ab.png)'
- en: 'Now, add Light Probes within the shadow that is projected by the L-shaped wall:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在L形墙投射的阴影内添加光探针：
- en: '![](img/6093f2df-5778-4305-9047-51375d48c138.png)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6093f2df-5778-4305-9047-51375d48c138.png)'
- en: 'Since the Rollerball is able to jump, place the higher probes even higher so
    that they will sample the lighting above the shadowed areas of the scene:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于滚球能够跳跃，将较高的探针放置得更高，以便它们能够采样场景中阴影区域的上方光线：
- en: '![](img/6805e6ad-fca4-41f2-9abd-9cd5f466332a.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6805e6ad-fca4-41f2-9abd-9cd5f466332a.png)'
- en: 'Placing too many Light Probes on a scene might be memory intensive. Try optimizing
    the Light Probes Group by removing the probes from the regions that the player
    won''t have access to. Also, avoid overcrowding the regions of continuous lighting
    conditions by removing the probes that are too close to others in the same lighting
    condition:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景上放置过多的光探针可能会占用大量内存。尝试通过从玩家无法访问的区域移除探针来优化光探针组。此外，通过移除与同一光照条件下其他探针距离过近的探针，避免在连续光照条件区域过度拥挤：
- en: '![](img/bc5888fa-5610-42cc-a2db-84aed4342886.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bc5888fa-5610-42cc-a2db-84aed4342886.png)'
- en: 'To check out which Light Probes are influencing the Rollerball at any place,
    move the Rollerball Game Object around the scene. A polyhedron will indicate which
    probes are being interpolated at that position, as follows:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查哪些光探针在任何位置影响滚球，请将滚球游戏对象在场景中移动。一个多面体会指示在该位置正在插值的探针，如下所示：
- en: '![](img/99f89ca1-7468-4067-a51c-29e931c04614.png)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/99f89ca1-7468-4067-a51c-29e931c04614.png)'
- en: From the bottom of the Lighting Settings window, click on the Generate Lighting
    button and wait for the Lightmaps to be baked.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从灯光设置窗口的底部，点击生成灯光按钮，等待灯光图烘焙完成。
- en: 'Test the scene. The Rollerball will be lit according to the Light Probes:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试场景。滚球的光照将根据光照探头进行：
- en: '![](img/f115318f-ebc8-4883-ae64-8b64b081a35d.png)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f115318f-ebc8-4883-ae64-8b64b081a35d.png)'
- en: Keep adding probes until the level is completely covered.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续添加探头，直到完全覆盖水平面。
- en: How it works...
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Light Probes work by sampling the scene's illumination at the point that they're
    placed at. A dynamic object that has Use Light Probes enabled has its lighting
    determined by the interpolation between the lighting values of the four Light
    Probes, defining a volume around it (or, in case there are no probes suited to
    define a volume around the dynamic object, a triangulation between the nearest
    probes is used).
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 光探头通过在它们放置的点采样场景的照明来工作。启用了使用光探头功能的动态对象，其光照由四个光探头之间的插值确定，定义了它周围的体积（或者，如果没有适合定义动态对象周围体积的探头，则使用最近探头的三角剖分）。
- en: More information on this subject can be found in the Unity's documentation at [http://docs.unity3d.com/Manual/LightProbes.html](http://docs.unity3d.com/Manual/LightProbes.html).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于这个主题的信息可以在Unity的文档中找到，请参阅[http://docs.unity3d.com/Manual/LightProbes.html](http://docs.unity3d.com/Manual/LightProbes.html)。
- en: There's more...
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In case you can spare some processing power, you can exchange the use of Light
    probes for a Mixed light.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能腾出一些处理能力，可以将光探头的使用与混合光照交换。
- en: 'Do the following:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: Delete the Light Probe Group from your scene.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的场景中删除光照探头组。
- en: Select the **Directional Light** and, from the Light component, change Baking
    to Mixed.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**方向光**，从光照组件中，将烘焙更改为混合。
- en: 'Set Shadow Type as Soft Shadows and Strength as 0.5, as shown in the following
    screenshot:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将阴影类型设置为软阴影，强度设置为0.5，如下截图所示：
- en: '![](img/9e3fd18f-9612-4bfc-8122-87001918ac49.png)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9e3fd18f-9612-4bfc-8122-87001918ac49.png)'
- en: Finally, click on the Generate Lighting button and wait for the Lightmaps to
    be baked. The **Real-Time** light/shadows will be cast into/from the dynamic objects,
    such as Rollerball.
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击生成光照按钮，等待光照图烘焙完成。**实时**光照/阴影将被投射到/来自动态对象，例如滚球。
