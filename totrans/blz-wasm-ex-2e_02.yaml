- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Building Your First Blazor WebAssembly Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您的第一个Blazor WebAssembly应用程序
- en: '**Razor components** are the building blocks of Blazor WebAssembly applications.
    A Razor component is a chunk of user interface that can be shared, nested, and
    reused. Razor components are ordinary C# classes and can be placed anywhere in
    a project.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Razor组件**是Blazor WebAssembly应用程序的构建块。Razor组件是一块用户界面，它可以被共享、嵌套和重用。Razor组件是普通的C#类，可以放置在项目的任何位置。'
- en: Razor components.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Razor组件。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Building blocks of Blazor apps.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Blazor应用程序的构建块。
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nestable magic.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可嵌套的魔法。
- en: In this chapter, we will learn about Razor components. We will learn how to
    use them, how to apply parameters, and how to create them. We will also become
    familiar with their life cycle and their structure. We will learn how to use the
    `@page` directive to define routing and we will learn how to use **Razor syntax**
    to combine C# code with HTML markup. Finally, we will introduce the **Hot Reload**
    experience.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于Razor组件的内容。我们将学习如何使用它们，如何应用参数，以及如何创建它们。我们还将熟悉它们的生命周期和结构。我们将学习如何使用`@page`指令来定义路由，以及如何使用**Razor语法**将C#代码与HTML标记组合。最后，我们将介绍**热重载**体验。
- en: The Blazor WebAssembly project in this chapter will be created by using the
    **Blazor WebAssembly App project template** provided by Microsoft. After we create
    the project, we will examine it to further familiarize ourselves with Razor components.
    We will learn how to use them, how to add parameters, how to apply routing, how
    to use Razor syntax, and how to separate the Razor markup and code into separate
    files. As we make edits to the code, we will use `Hot Reload` to automatically
    update the browser.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的Blazor WebAssembly项目将通过使用Microsoft提供的**Blazor WebAssembly App项目模板**来创建。创建项目后，我们将检查它以进一步熟悉Razor组件。我们将学习如何使用它们，如何添加参数，如何应用路由，如何使用Razor语法，以及如何将Razor标记和代码分离到不同的文件中。在编辑代码时，我们将使用`Hot
    Reload`来自动更新浏览器。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Razor components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Razor组件
- en: Routing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: Razor syntax
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Razor语法
- en: Hot Reload
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热重载
- en: Creating the demo WebAssembly project
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建demo WebAssembly项目
- en: Creating the Demo Blazor WebAssembly Project Technical Requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Demo Blazor WebAssembly项目的技术要求
- en: To complete this project, you need to have Microsoft Visual Studio 2022 installed
    on your PC. For instructions on how to install the free community edition of Microsoft
    Visual Studio 2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的PC上安装Microsoft Visual Studio 2022。有关如何安装Microsoft Visual Studio
    2022免费社区版的说明，请参阅*第1章*，*Blazor WebAssembly简介*。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下GitHub仓库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02)。
- en: 'The Code in Action video is available here: [https://packt.link/Ch2](https://packt.link/Ch2).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在行动视频在此处可用：[https://packt.link/Ch2](https://packt.link/Ch2)。
- en: Razor components
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Razor组件
- en: Blazor WebAssembly is a component-driven framework. Razor components are the
    fundamental building blocks of a Blazor WebAssembly application. They are classes
    that are implemented using a combination of C#, HTML, and Razor syntax. When the
    web app loads, the classes get downloaded into the browser as normal .NET assemblies
    (DLLs).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly是一个以组件为驱动的框架。Razor组件是Blazor WebAssembly应用程序的基本构建块。它们是使用C#、HTML和Razor语法组合实现的类。当Web应用程序加载时，这些类会以正常的.NET程序集（DLLs）的形式下载到浏览器中。
- en: '**IMPORTANT NOTE**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: In this book, the terms Razor component and component are used interchangeably.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，术语“Razor组件”和“组件”是可互换使用的。
- en: Using components
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用组件
- en: HTML element syntax is used to add one component to another component. The markup
    looks like an HTML tag where the name of the tag is the component type.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML元素语法将一个组件添加到另一个组件中。标记看起来像一个HTML标签，其中标签的名称是组件类型。
- en: 'The following markup in the `Pages/Index.razor` file of the `Demo` project,
    which we will create later in this chapter, will render a `SurveyPrompt` instance:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章稍后我们将创建的`Demo`项目的`Pages/Index.razor`文件中的以下标记将渲染一个`SurveyPrompt`实例：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding `SurveyPrompt` element includes an attribute parameter named `Title`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`SurveyPrompt`元素包含一个名为`Title`的属性参数。
- en: Parameters
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: Component parameters are used to make components dynamic. Parameters are public
    properties of the component that are decorated with either the `Parameter` attribute
    or the `CascadingParameter` attribute. Parameters can be simple types, complex
    types, functions, **RenderFragments**, or event callbacks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 组件参数用于使组件动态化。参数是组件的公共属性，用 `Parameter` 属性或 `CascadingParameter` 属性装饰。参数可以是简单类型、复杂类型、函数、**RenderFragments**
    或事件回调。
- en: 'The following code for a component named `Hello` includes a parameter named
    `Text`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下名为 `Hello` 的组件的代码包括一个名为 `Text` 的参数：
- en: '**Hello.razor**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hello.razor**'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To use the `Hello` component, include the following HTML syntax within another
    component:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `Hello` 组件，请在另一个组件中包含以下 HTML 语法：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding example, the `Text` attribute of the `Hello` component is
    the source of the `Text` parameter. This screenshot shows the results of using
    the component as indicated:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`Hello` 组件的 `Text` 属性是 `Text` 参数的来源。此截图显示了使用组件的结果：
- en: '![Figure 2.1 – HelloWorld component ](img/B18471_02_01.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – HelloWorld 组件](img/B18471_02_01.png)'
- en: 'Figure 2.1: The Hello component'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：Hello 组件
- en: A parameter’s `get` and `set` accessors must not contain custom logic. They
    are only intended as a channel to allow information to flow to the child from
    the parent. Also, as mentioned earlier, they must be public.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的 `get` 和 `set` 访问器不得包含自定义逻辑。它们仅作为从父组件流向子组件的信息通道。此外，如前所述，它们必须是公共的。
- en: '**IMPORTANT NOTE**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: The application will enter an infinite loop if a child component includes a
    parameter that causes rerendering of the parent component.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果子组件包含导致父组件重新渲染的参数，应用程序将进入无限循环。
- en: Required parameters
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 必需参数
- en: 'You can specify that a parameter is required by the editor by decorating it
    with the `EditorRequired` attribute. In the following version of the `Hello2`
    component, the `Text` parameter is required:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `EditorRequired` 属性来装饰参数，指定编辑器需要该参数。在 `Hello2` 组件的以下版本中，`Text` 参数是必需的：
- en: '**Hello2.razor**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hello2.razor**'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we try to use `Hello2` in a component and do not include the `Text` attribute,
    Visual Studio will display the following warning:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在一个组件中使用 `Hello2` 并不包括 `Text` 属性，Visual Studio 将显示以下警告：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_02.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序 描述自动生成](img/B18471_02_02.png)'
- en: 'Figure 2.2: Missing parameter warning'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：缺少参数警告
- en: The preceding warning will not prevent the application from building, and it
    is not enforced at runtime. It is only used by the editor.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的警告不会阻止应用程序构建，并且在运行时也不强制执行。它仅由编辑器使用。
- en: '**IMPORTANT NOTE**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Decorating a parameter with the `EditorRequired` attribute does not guarantee
    that the parameter will have a value at runtime.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `EditorRequired` 属性装饰参数不能保证在运行时参数将有值。
- en: Query strings
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询字符串
- en: A component can also receive parameters from the query string. A query string
    is used to assign values to the specified parameters. To indicate that the parameter
    can come from the query string, we decorate the parameter with the **SupplyParameterFromQuery**
    attribute.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 组件还可以从查询字符串接收参数。查询字符串用于将值分配给指定的参数。为了指示参数可以来自查询字符串，我们用 **SupplyParameterFromQuery**
    属性装饰参数。
- en: 'In the following example, the `Increment` parameter has been decorated with
    the `SupplyParameterFromQuery` attribute:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`Increment` 参数已被 `SupplyParameterFromQuery` 属性装饰：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is the code to set the value of `Increment` to `5`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将 `Increment` 的值设置为 `5` 的代码：
- en: '[https://localhost:7097/counter?increment=5](https://localhost:7097/counter?increment=5)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://localhost:7097/counter?increment=5](https://localhost:7097/counter?increment=5)'
- en: In the preceding example, everything after the question mark is the query string.
    The query string is not case sensitive. Also, the preceding example assumes that
    we are running our application locally on port 7097\. Since the port that is used
    will vary by application, we will exclude the port in the rest of our examples.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，问号之后的所有内容都是查询字符串。查询字符串不区分大小写。此外，前面的示例假设我们在本地端口 7097 上运行我们的应用程序。由于所使用的端口会因应用程序而异，因此我们将在其余示例中省略端口。
- en: '**TIP**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The **applicationUrl** is defined in the `Properties/launchSettings.json` file.
    Each time we create a new Blazor project using a Microsoft project template, the
    `applicationUrl` will randomly reference a different port.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**applicationUrl** 在 `Properties/launchSettings.json` 文件中定义。每次我们使用 Microsoft
    项目模板创建新的 Blazor 项目时，`applicationUrl` 将随机引用不同的端口。'
- en: 'The parameters provided by the query string are restricted to the following
    types, arrays of the following types, and their nullable variants:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 查询字符串提供的参数限于以下类型、以下类型的数组及其可空变体：
- en: '`bool`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`'
- en: '`DateTime`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTime`'
- en: '`decimal`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal`'
- en: '`double`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double`'
- en: '`float`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float`'
- en: '`Guid`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Guid`'
- en: '`int`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`'
- en: '`long`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long`'
- en: '`string`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`'
- en: They can also consist of arrays of the preceding types.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也可以由前面类型组成的数组。
- en: Naming components
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件命名
- en: The name of a Razor component must be in title case. Therefore, `hello` would
    not be a valid name for a Razor component since the h is not capitalized. Also,
    Razor components use the `RAZOR` extension rather than the `CSHTML` extension
    that is used by `Razor` Pages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Razor 组件的名称必须使用标题格式。因此，`hello` 不是一个有效的 Razor 组件名称，因为 h 没有被大写。此外，Razor 组件使用 `RAZOR`
    扩展名，而不是 `Razor` Pages 使用的 `CSHTML` 扩展名。
- en: '**IMPORTANT NOTE**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Razor components must start with a capital letter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Razor 组件必须以大写字母开头。
- en: Component life cycle
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件生命周期
- en: 'Razor components inherit from the `ComponentBase` class. The `ComponentBase`
    class includes both asynchronous and synchronous methods that are used to manage
    the life cycle of a component. In this book, we will be using the asynchronous
    versions of the methods since they execute without blocking other operations.
    This is the order in which the methods in the life cycle of a component are invoked:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Razor 组件继承自 `ComponentBase` 类。`ComponentBase` 类包含异步和同步方法，用于管理组件的生命周期。在本书中，我们将使用方法的异步版本，因为它们执行时不会阻塞其他操作。组件生命周期中方法的调用顺序如下：
- en: '**SetParametersAsync**: This method sets the parameters that are supplied by
    the component’s parent in the render tree.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SetParametersAsync**：此方法设置组件父级在渲染树中提供的参数。'
- en: '**OnInitializedAsync**: This method is invoked after the parameters have been
    set and the component has been successfully initialized.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OnInitializedAsync**：此方法在参数设置完成后，组件成功初始化后调用。'
- en: '**OnParametersSetAsync**: This method is invoked after the component initializes
    and each time the component rerenders. A component will rerender when the parent
    component rerenders and at least one parameter has changed. Also, a component
    will rerender when the **StateHasChanged** method of the component is called.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OnParametersSetAsync**：此方法在组件初始化后以及每次组件重新渲染时调用。当父组件重新渲染且至少有一个参数已更改时，组件将重新渲染。此外，当调用组件的
    **StateHasChanged** 方法时，组件也会重新渲染。'
- en: '**OnAfterRenderAsync**: This method is invoked after the component has finished
    rendering. This method is for working with JavaScript since JavaScript requires
    the **Document Object Model** (**DOM**) elements to be rendered before they can
    do any work.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OnAfterRenderAsync**：此方法在组件完成渲染后调用。此方法用于与 JavaScript 一起使用，因为 JavaScript 需要在执行任何工作之前渲染
    **Document Object Model** (**DOM**) 元素。'
- en: Component structure
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件结构
- en: 'The following diagram shows code from the `Counter` component of the `Demo`
    project that we will create in this chapter:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示展示了我们将在此章节中创建的 `Demo` 项目的 `Counter` 组件的代码：
- en: '![Graphical user interface, text  Description automatically generated](img/B18471_02_03.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本  自动生成的描述](img/B18471_02_03.png)'
- en: 'Figure 2.3: Component structure'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：组件结构
- en: 'The code in the preceding example is divided into three sections:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例中的代码分为三个部分：
- en: Directives
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指令
- en: Markup
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记
- en: Code Block
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码块
- en: Each of the sections has a different purpose.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部分都有不同的用途。
- en: Directives
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指令
- en: Directives are used to add special functionality, such as routing, layout, and
    dependency injection. File-level directives are defined within Razor, and you
    cannot define your own directives. Razor directives start with the `@` symbol.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 指令用于添加特殊功能，例如路由、布局和依赖注入。文件级指令在 Razor 中定义，并且不能定义自己的指令。Razor 指令以 `@` 符号开头。
- en: 'In the preceding example, there is only one directive used – the `@page` directive.
    The `@page` directive is used for routing. In this example, the following URL
    will route the user to the `Counter` component:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，只使用了单个指令——`@page` 指令。`@page` 指令用于路由。在此示例中，以下 URL 将将用户路由到 `Counter` 组件：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A typical page can include many directives at the top of the page. Also, many
    pages have more than one `@page` directive.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the directives in Razor can be used in a Blazor WebAssembly application.
    These are the Razor directives that are used in Blazor, in alphabetical order:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`@attribute`: This directive adds a class-level attribute to the component.
    The following example adds the `[Authorize]` attribute:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`@code`: This directive adds class members to the component. In the example,
    it is used to distinguish the code block.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@implements`: This directive implements an interface for the specified class.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@inherits`: This directive provides full control of the class that the view
    inherits.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@inject`: This directive is used for dependency injection. It enables the
    component to inject a service from the dependency injection container into the
    view. The following example injects the **HttpClient** defined in the `Program.cs`
    file into the component:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`@layout`: This directive is used to specify a layout for the Razor components
    that include an `@page` directive.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@namespace`: This directive sets the component’s namespace. You only need
    to use this directive if you do not want to use the default namespace for the
    component. The default namespace is based on the location of the component.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@page`: This directive is used for routing.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@preservewhitespace`: This directive is used to preserve the whitespace in
    the rendered markup. If it is set to `true`, the whitespace is preserved. The
    default is `false`.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@using`: This directive controls the components that are in scope.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markup
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Markup is HTML with Razor syntax. The Razor syntax can be used to render text
    and allows C# to be included as part of the markup. We will cover more about Razor
    syntax later in this chapter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Code block
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code block contains the logic for the page. It begins with the `@code` directive.
    By convention, the code block is at the bottom of the page. It is the only file-level
    directive that is not placed at the top of the page.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: The code block is where we add C# fields, properties, and methods to the component.
    Later in this chapter, we will move the code block to a separate code-behind file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Razor components are the building blocks of a Blazor WebAssembly application.
    They are easy to use since they are simply a combination of HTML markup and C#
    code. They are structured with directives, markup, and code blocks. Components
    have a clearly defined life cycle. They can be nested and leverage different types
    of parameters to make them dynamic. In the next section, we will explain how routing
    is used to navigate between components.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Blazor WebAssembly, routing is handled on the client, not on the server.
    As you navigate in the browser, Blazor intercepts that navigation and renders
    the component with the matching route.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'The URLs are resolved relative to the base path that is specified in the `wwwroot/index.html`
    file. The base path is specified in the `head`element using the following syntax:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: URL 是相对于在 `wwwroot/index.html` 文件中指定的基本路径解析的。基本路径使用以下语法在 `head` 元素中指定：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Unlike other frameworks that you may have used, the route is not inferred from
    the location of its file. For example, in the `Demo` project, the `Counter` component
    is in the `/Pages/Counter` folder, yet it uses the following route:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与您可能使用过的其他框架不同，路由不是从其文件位置推断出来的。例如，在 `Demo` 项目中，`Counter` 组件位于 `/Pages/Counter`
    文件夹中，但它使用以下路由：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the `@page` directive used by the `Counter` component:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Counter` 组件使用的 `@page` 指令：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Route parameters
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由参数
- en: Route parameters can be used to populate the parameters of a component. The
    parameters of both the component and the route must have the same name, but they
    are not case-sensitive.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数可以用来填充组件的参数。组件和路由的参数必须具有相同的名称，但它们不区分大小写。
- en: 'You can provide more than one `@page` directive to a component. The following
    `RoutingExample` component demonstrates how to include multiple `@page` parameters:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为组件提供多个 `@page` 指令。以下 `RoutingExample` 组件演示了如何包含多个 `@page` 参数：
- en: '**RoutingExample.razor**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**RoutingExample.razor**'
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code, the first `@page` directive allows navigation to the
    component without a parameter, while the second `@page` directive includes a route
    parameter. If a value for `text` is provided, it is assigned to the `Text` property
    of the component. If the `Text` property of the component is `null`, it is set
    to `fantastic`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，第一个 `@page` 指令允许在无参数的情况下导航到组件，而第二个 `@page` 指令包含一个路由参数。如果提供了 `text` 的值，它将被分配给组件的
    `Text` 属性。如果组件的 `Text` 属性为 `null`，则将其设置为 `fantastic`。
- en: 'The following URL will route the user to the `RoutingExample` component:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 URL 将将用户路由到 `RoutingExample` 组件：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following URL will also route the user to the `RoutingExample` component,
    but this time, the `Text` parameter will be set by the route:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 URL 也将将用户路由到 `RoutingExample` 组件，但这次 `Text` 参数将由路由设置：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This screenshot shows the results of using the indicated route:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了使用指示路由的结果：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_02_04.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_02_04.png)'
- en: 'Figure 2.4: The RoutingExample component'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：`RoutingExample` 组件
- en: '**IMPORTANT NOTE**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Route parameters are not case-sensitive.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 路由参数不区分大小写。
- en: Optional route parameters
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选路由参数
- en: 'Optional route parameters are supported by Blazor. In the following version
    of the `RoutingExample` component, the `Text` property is optional:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 支持可选路由参数。在以下 `RoutingExample` 组件版本中，`Text` 属性是可选的：
- en: '**RoutingExample.razor**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**RoutingExample.razor**'
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The difference between this version of the `RoutingExample` component and the
    original version is that the two `@page` directives have been combined and the
    `text` route parameter has been changed to a nullable type. By using an optional
    route parameter, we can reduce the number of `@page` directives that are required
    by the application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`RoutingExample` 组件的这个版本与原始版本的区别在于，两个 `@page` 指令已被合并，并且 `text` 路由参数已被更改为可空类型。通过使用可选路由参数，我们可以减少应用程序所需的
    `@page` 指令数量。'
- en: '**TIP**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you need a component to navigate to itself with a different optional parameter
    value, you should set the value in the `OnParametersSet` event instead of the
    `OnInitialized` event.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要组件使用不同的可选参数值导航到自身，您应该在 `OnParametersSet` 事件中设置该值，而不是在 `OnInitialized` 事件中。
- en: Catch-all route parameters
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通配符路由参数
- en: Catch-all route parameters are used to capture paths across multiple folder
    boundaries. This type of route parameter is a `string` type and can only be placed
    at the end of the URL. Catch-all route parameters are designated with an asterisk.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符路由参数用于捕获跨越多个文件夹边界的路径。此类路由参数是 `string` 类型，并且只能放置在 URL 的末尾。通配符路由参数用星号表示。
- en: 'This is a sample component that uses a catch-all route parameter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用通配符路由参数的示例组件：
- en: '**CatchAll.razor**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**CatchAll.razor**'
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For the `/error/type/3` URL, the preceding code will set the value of the `Path`
    parameter to `type/3`, as shown in the following image:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `/error/type/3` URL，前面的代码将设置 `Path` 参数的值为 `type/3`，如下所示图所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_05.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_02_05.png)'
- en: 'Figure 2.5: Catch-all route parameter example'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：通配符路由参数示例
- en: Route constraints
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由约束
- en: 'Route constraints are used to enforce the datatype of a route parameter. To
    define a constraint, add a colon followed by the constraint type to the parameter.
    In the following example, the route is expecting a route parameter named `Increment`
    with the type of `int`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 路由约束用于强制路由参数的数据类型。要定义约束，请在参数后添加冒号和约束类型。在以下示例中，路由期望一个名为`Increment`且类型为`int`的路由参数：
- en: '[PRE16]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For route constraints, the following types, and their nullable variants, are
    supported:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于路由约束，以下类型及其可空变体都受到支持：
- en: '`bool`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`'
- en: '`datetime`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datetime`'
- en: '`decimal`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decimal`'
- en: '`double`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double`'
- en: '`float`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float`'
- en: '`guid`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`guid`'
- en: '`int`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`'
- en: '`long`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long`'
- en: '**IMPORTANT NOTE**'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Route constraints use the invariant culture and do not support localization.
    For example, dates are only valid in the form MM-dd-yyyy or yyyy-MM-dd, and Boolean
    values must be either `true` or `false`.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路由约束使用不变文化，并且不支持本地化。例如，日期仅以MM-dd-yyyy或yyyy-MM-dd的形式有效，布尔值必须是`true`或`false`。
- en: 'The following types are not currently supported as constraints:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类型目前不支持作为约束：
- en: Regular expressions
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式
- en: Enums
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举
- en: Custom constraints
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义约束
- en: 'Route constraints support optional parameters. In the following example, the
    route parameter named `increment` with the type of `int` is optional:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 路由约束支持可选参数。在以下示例中，名为`increment`且类型为`int`的路由参数是可选的：
- en: '[PRE17]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Routing is handled on the client. Each routable component can include one or
    more routes. We can use both route parameters and catch-all route parameters to
    define routing. Route constraints are used to ensure that a route parameter is
    of the required datatype. Razor components use Razor syntax to seamlessly merge
    HTML with C# code, which is what we will see in the next section.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 路由在客户端处理。每个可路由组件可以包含一个或多个路由。我们可以使用路由参数和通配符路由参数来定义路由。路由约束用于确保路由参数是所需的数据类型。Razor组件使用Razor语法将HTML与C#代码无缝合并，这是我们将在下一节中看到的。
- en: Razor syntax
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Razor语法
- en: Razor syntax is made up of HTML, Razor markup, and C#. Rendering HTML from a
    Razor component is the same as rendering HTML from an HTML file. Razor syntax
    uses both inline expressions and control structures to render dynamic values.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Razor语法由HTML、Razor标记和C#组成。从Razor组件渲染HTML与从HTML文件渲染HTML相同。Razor语法使用内联表达式和控制结构来渲染动态值。
- en: Inline expressions
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联表达式
- en: 'Inline expressions start with an `@` symbol followed by a variable or function
    name. This is an example of an inline expression:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 内联表达式以`@`符号开头，后跟变量或函数名。这是一个内联表达式的示例：
- en: '[PRE18]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, Blazor will interpret the text after the `@` symbol
    as either a property name or a method name.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，Blazor将`@`符号后面的文本解释为属性名或方法名。
- en: Control structures
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制结构
- en: 'Control structures also start with an `@` symbol. The content within the curly
    brackets is evaluated and rendered to the output. This is an example of an `if`
    statement from the `FetchData` component in the `Demo` project that we will create
    later in this chapter:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 控制结构也以`@`符号开头。花括号内的内容将被评估并渲染到输出中。这是一个来自我们将在本章后面创建的`Demo`项目中的`FetchData`组件的`if`语句示例：
- en: '[PRE19]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Conditionals
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件语句
- en: 'The following types of conditionals are included in Razor syntax:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Razor语法包括以下类型的条件语句：
- en: '`if` statements'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`语句'
- en: '`switch`statements'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`语句'
- en: 'This is an example of an `if` statement:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`if`语句的示例：
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code uses an `if` statement to check if the current day of the
    week is Friday and/or the current day of the month is the 13th. The result renders
    the appropriate `p` element.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用`if`语句检查当前星期几是否为星期五以及/或当前月份是否为13日。结果渲染相应的`p`元素。
- en: 'This is an example of a `switch` statement:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`switch`语句的示例：
- en: '[PRE21]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding `switch` statement compares the `value` variable to `1` and `42`.
    The result renders the appropriate `p` element.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`switch`语句将`value`变量与`1`和`42`进行比较。结果渲染相应的`p`元素。
- en: Loops
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环
- en: 'The following types of loops are provided in Razor syntax:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Razor语法提供了以下类型的循环：
- en: '**for** loops'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**for**循环'
- en: '**foreach** loops'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**foreach**循环'
- en: '**while** loops'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**while**循环'
- en: '**do while** loops'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**do while**循环'
- en: Each of the following examples loops through an array of the `WeatherForecast`
    items to display the `Summary` property of each item in the array.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的每个示例都循环遍历 `WeatherForecast` 项的数组，以显示数组中每个项的 `Summary` 属性。
- en: 'This is an example of a `for` loop:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `for` 循环的示例：
- en: '[PRE22]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is an example of a `foreach` loop:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `foreach` 循环的示例：
- en: '[PRE23]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is an example of a `while` loop:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `while` 循环的示例：
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This is an example of a `do while` loop:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `do while` 循环的示例：
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: All the preceding examples of loops render the same output. There are many ways
    to loop through a collection using Razor syntax.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的前述循环示例都渲染相同的输出。使用 Razor 语法循环遍历集合有许多方法。
- en: Razor syntax is easy to learn if you already know C#. It includes both inline
    expressions and control structures such as conditionals and loops. By using `Hot
    Reload`, we can edit our code and view the results immediately in the browser.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经了解 C#，Razor 语法很容易学习。它包括内联表达式和控制结构，如条件语句和循环。通过使用 `Hot Reload`，我们可以在浏览器中立即编辑代码并查看结果。
- en: Hot Reload
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热重载
- en: '`Hot Reload` allows developers to edit the markup and C# code of a currently
    running app without requiring the app to be rebuilt or refreshed. Also, it does
    all of that while maintaining the app’s state.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hot Reload` 允许开发者在无需重新构建或刷新应用程序的情况下编辑正在运行的应用程序的标记和 C# 代码。同时，它还保持应用程序的状态。'
- en: You can use `Hot Reload` with or without the debugger. To trigger `Hot Reload`,
    you can either use the **Hot Reload** drop-down button on the toolbar or press
    *Alt*+*F10*.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用或不需要调试器来使用 `Hot Reload`。要触发 `Hot Reload`，你可以使用工具栏上的 **热重载** 下拉按钮或按 *Alt*+*F10*。
- en: 'This is the **Hot Reload** drop-down button that is accessed from the toolbar:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从工具栏访问的 **热重载** 下拉按钮：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_06.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序  自动生成的描述](img/B18471_02_06.png)'
- en: 'Figure 2.6: Hot Reload drop-down button'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6：热重载下拉按钮
- en: As you can see from the **Hot Reload** drop-down button, you can set **Hot Reload**
    to automatically be triggered whenever you save a file. There are more settings
    available via the **Settings** option on the menu. **Hot Reload** is supported
    for most changes to a component, including stylesheets. However, sometimes a change
    will require that the application be restarted.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，从 **热重载** 下拉按钮中，你可以设置 **热重载** 在你保存文件时自动触发。通过菜单上的 **设置** 选项还有更多设置可用。**热重载**
    支持对组件的大部分更改，包括样式表。但是，有时更改可能需要重启应用程序。
- en: 'This is a list of some of the activities that require a restart:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个需要重启的一些活动的列表：
- en: Adding new local functions
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的局部函数
- en: Adding new lambdas
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的 lambda 表达式
- en: Adding new fields
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的字段
- en: Changing a parameter’s name
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改参数的名称
- en: Adding an await operator
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 await 操作符
- en: 'If a restart is required, the following dialog is displayed:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要重启，将显示以下对话框：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_07.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序  自动生成的描述](img/B18471_02_07.png)'
- en: 'Figure 2.7: Hot Reload warning dialog'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：热重载警告对话框
- en: If you check the **Always rebuild when updates can’t be applied** checkbox,
    Visual Studio will automatically rebuild and reload the app when `Hot Reload`
    is unable to automatically apply the changes. Also, this dialog will no longer
    be displayed until this setting is changed in **Settings** or the solution is
    closed.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你勾选了 **当无法应用更新时始终重新构建** 复选框，Visual Studio 将在 `Hot Reload` 无法自动应用更改时自动重新构建和重新加载应用程序。此外，此对话框将不再显示，直到在
    **设置** 中更改此设置或关闭解决方案。
- en: '**IMPORTANT NOTE**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: '`Hot Reload` will not work if native code debugging is enabled. Also, you can
    disable it at the project level by setting `hotReloadEnabled` to `false` in the
    project’s `Properties/launchSettings.json` file.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了原生代码调试，则 `Hot Reload` 将无法工作。此外，你可以在项目的 `Properties/launchSettings.json`
    文件中将 `hotReloadEnabled` 设置为 `false` 来在项目级别禁用它。
- en: Hot Reload makes you more efficient since you don’t have to stop and restart
    your application every time you make an update.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 热重载使你更有效率，因为你不需要每次更新时都停止并重新启动你的应用程序。
- en: Creating the Demo Blazor WebAssembly project
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建演示 Blazor WebAssembly 项目
- en: The Blazor WebAssembly application that we are going to build in this chapter
    is a simple three-page application. Each page will be used to demonstrate one
    or more features of Razor components.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将要构建的 Blazor WebAssembly 应用程序是一个简单的三页应用程序。每一页都将用于演示 Razor 组件的一个或多个功能。
- en: 'This is a screenshot of the completed `Demo` project:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们完成的`Demo`项目的截图：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_08.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_02_08.png)'
- en: 'Figure 2.8: Home page of the Demo project'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：`Demo`项目的首页
- en: The build time for this project is approximately 60 minutes.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的构建时间大约为60分钟。
- en: Project overview
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: The `Demo` project that we are creating is based on one of the sample projects
    that are provided by the `Blazor WebAssembly App` project template. After we have
    used the template to create the project, we will examine the files in the sample
    project and update some of the files to demonstrate how to use Razor components.
    To elevate the development experience, we will enable `Hot Reload`. Finally, we
    will separate the code block of one of the components into a separate file to
    demonstrate how to use the code-behind technique to separate the markup from the
    code.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建的`Demo`项目是基于`Blazor WebAssembly App`项目模板提供的示例项目之一。在用模板创建项目后，我们将检查示例项目中的文件，并更新一些文件以展示如何使用Razor组件。为了提升开发体验，我们将启用`热重载`。最后，我们将一个组件的代码块分离到一个单独的文件中，以展示如何使用代码后技术将标记与代码分离。
- en: Getting started with the project
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用项目
- en: 'Visual Studio comes with quite a few project templates. We are going to use
    the **Blazor WebAssembly App** project template to create our first Blazor WebAssembly
    project. Since this project template can be used to create many different types
    of Blazor projects, it is important to follow these instructions precisely:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio附带了许多项目模板。我们将使用**Blazor WebAssembly App**项目模板来创建我们的第一个Blazor WebAssembly项目。由于此项目模板可以用来创建许多不同类型的Blazor项目，因此必须精确遵循这些说明：
- en: Open Microsoft Visual Studio 2022.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Microsoft Visual Studio 2022。
- en: Click the **Create a new project** button.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新项目**按钮。
- en: In the **Search for templates** (*Alt*+*S*) textbox, enter `Blazor` and hit
    the *Enter* key.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索模板**（*Alt*+*S*）文本框中输入`Blazor`并按*Enter*键。
- en: 'The following screenshot shows the **Blazor WebAssembly App** project template
    that we will be using:'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了我们将要使用的**Blazor WebAssembly App**项目模板：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_02_09.png)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息  自动生成的描述](img/B18471_02_09.png)'
- en: 'Figure 2.9: Blazor WebAssembly App project template'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.9：Blazor WebAssembly App项目模板
- en: Select the **Blazor WebAssembly App** project template and click the **Next**
    button.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Blazor WebAssembly App**项目模板并点击**下一步**按钮。
- en: Enter `Demo` in the **Project name** textbox and click the **Next** button.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目名称**文本框中输入`Demo`并点击**下一步**按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是配置我们新项目的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_02_10.png)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_02_10.png)'
- en: 'Figure 2.10: The Configure your new project dialog'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.10：配置新项目的对话框
- en: '**TIP**'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `Demo` project into the `E:\Blazor`
    folder. However, the location of this project is not important.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将`Demo`项目放置在`E:\Blazor`文件夹中。然而，这个项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**框架**版本选择为**.NET 7.0**。
- en: Select **None** as the **Authentication type**.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**身份验证类型**选择为**无**。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**配置为HTTPS**复选框。
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选**ASP.NET Core 承载**复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选**渐进式Web应用程序**复选框。
- en: Check the **Do not use top-level statements** checkbox.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**不使用顶级语句**复选框。
- en: 'This is a screenshot of the dialog used to create our new Blazor WebAssembly
    application:'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是创建我们新的Blazor WebAssembly应用程序时使用的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_02_11.png)Figure 2.11: Additional information for the Blazor
    WebAssembly App dialog'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_02_11.png)图2.11：Blazor WebAssembly
    App对话框的附加信息'
- en: Click the **Create** button.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: You have created the `Demo` project.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您已创建`Demo`项目。
- en: Running the Demo project
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行`Demo`项目
- en: 'Once the project has been created, you need to run it to get an understanding
    of what it does. The `Demo` project contains three pages: **Home**, **Counter**,
    and **Fetch data**:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，你需要运行它来了解它所做的工作。`Demo` 项目包含三个页面：**首页**、**计数器**和**获取数据**：
- en: From the **Debug** menu, select the **Start Without Debugging** (*Ctrl*+*F5*)
    option to run the `Demo` project.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**调试**菜单中选择**不调试启动**（*Ctrl*+*F5*）选项来运行 `Demo` 项目。
- en: '**IMPORTANT NOTE**'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: If this is your first web app, Visual Studio will ask to set up a certificate
    for hosting the web app. You should trust the certificate.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果这是你的第一个 Web 应用程序，Visual Studio 将要求设置 Web 应用的证书。你应该信任该证书。
- en: 'This is a screenshot of the **Home** page from the `Demo` project:'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 `Demo` 项目的 **首页** 的截图：
- en: '![Figure 2.10 – The Home page ](img/B18471_02_12.png)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 2.10 – 首页](img/B18471_02_12.png)'
- en: 'Figure 2.12: The Home page'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.12：首页
- en: The **Home** page is split into two sections. The navigation menu is on the
    left side of the page and the body is on the right side of the page. The body
    of the **Home** page consists of some static text and a link to a survey.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**首页**分为两个部分。导航菜单位于页面左侧，主体位于页面右侧。**首页**的主体包含一些静态文本和一个指向调查的链接。'
- en: Click the **Counter** option on the navigation menu to navigate to the **Counter**
    page.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击导航菜单上的 **计数器** 选项，导航到 **计数器** 页面。
- en: 'This is a screenshot of the **Counter** page from the `Demo` project:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 `Demo` 项目的 **计数器** 页面的截图：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_02_13.png)'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息  描述自动生成](img/B18471_02_13.png)'
- en: 'Figure 2.13: The Counter page'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.13：计数器页面
- en: The body of the **Counter** page includes the **Current count** and a **Click
    me** button. Each time the button on the **Counter** page is clicked, the **Current
    count** is incremented.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**计数器** 页面的主体包含 **当前计数** 和一个 **点击我** 按钮。每次点击 **计数器** 页面上的按钮，**当前计数** 就会增加。'
- en: '**IMPORTANT NOTE**'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Since the `Demo` project is a **single-page application** (**SPA**), only the
    section of the page that has changed is updated.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 `Demo` 项目是一个**单页应用程序**（**SPA**），只有页面变化的部分会被更新。
- en: Click the **Fetch data** option on the navigation menu to navigate to the **Fetch
    data** page.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击导航菜单上的 **获取数据** 选项，导航到 **获取数据** 页面。
- en: 'This is a screenshot of the **Fetch data** page from the `Demo` project:'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 `Demo` 项目的 **获取数据** 页面的截图：
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B18471_02_14.png)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面  描述自动生成，置信度中等](img/B18471_02_14.png)'
- en: 'Figure 2.14: The Fetch data page'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.14：获取数据页面
- en: The body of the **Fetch data** page includes a table that shows a fabricated
    weather forecast for the second week in January 2022\. As you will see, the data
    displayed in the table is just static data from the `wwwroot\sample-data\weather.json`
    file.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**获取数据** 页面的主体包含一个表格，显示 2022 年 1 月第二周的虚构天气预报。正如你将看到的，表格中显示的数据只是来自 `wwwroot\sample-data\weather.json`
    文件的静态数据。'
- en: Examining the Demo project’s structure
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查 `Demo` 项目的结构
- en: Now let’s return to Visual Studio to examine the files in the `Demo` project.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到 Visual Studio 来检查 `Demo` 项目中的文件。
- en: 'The following figure shows the file structure of the project:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了项目的文件结构：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_02_15.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  描述自动生成](img/B18471_02_15.png)'
- en: 'Figure 2.15: File structure of the Demo project'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15：`Demo` 项目的文件结构
- en: The project includes quite a few files with some of them divided into their
    own folders. Let’s examine them.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 项目包含相当多的文件，其中一些被分到了自己的文件夹中。让我们来检查它们。
- en: The Properties folder
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性文件夹
- en: The `Properties` folder contains the `launchSettings.json` file. This file contains
    various settings that can be defined for each profile. As mentioned earlier in
    this chapter, the `applicationUrl` is defined in this file. Also, `Hot Reload`
    can be disabled by setting `hotReloadEnabled` to `false`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`Properties` 文件夹包含 `launchSettings.json` 文件。此文件包含为每个配置文件定义的各种设置。如本章前面所述，`applicationUrl`
    在此文件中定义。此外，可以通过将 `hotReloadEnabled` 设置为 `false` 来禁用 `Hot Reload`。'
- en: '**TIP**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The settings in the `launchSettings.json` file are only applied to your local
    development machine.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`launchSettings.json` 文件中的设置仅适用于你的本地开发机器。'
- en: The wwwroot folder
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: wwwroot 文件夹
- en: The `wwwroot` folder is the application’s web root. Only the files in this folder
    are web addressable. The `wwwroot` folder contains a collection of **Cascading
    Style Sheets** (**CSS**), a sample data file, icon files, a font, and `index.html`.
    Later in this book, in addition to these types of files, we will use this folder
    for public static resources such as images and JavaScript files.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`wwwroot` 文件夹是应用程序的 Web 根目录。只有此文件夹中的文件是可通过 Web 地址访问的。`wwwroot` 文件夹包含一系列 **层叠样式表**（**CSS**）、一个示例数据文件、图标文件、字体和
    `index.html` 文件。在本书的后续部分，除了这些类型的文件外，我们还将使用此文件夹来存储公共静态资源，如图片和 JavaScript 文件。'
- en: The `index.html` file is the root page of the web application. Whenever a page
    is initially requested, the contents of the `index.html` page are rendered and
    returned in the response. The `head` element of the `index.html` file includes
    links to each of the CSS files in the `css` folder and specifies the base path
    to use for the web app. The `body` element of the `index.html` file includes two
    `div` elements and a reference to the `blazor.webassembly.js` file.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html` 文件是 Web 应用的根页面。每当请求页面时，`index.html` 页面的内容都会在响应中渲染并返回。`index.html`
    文件的 `head` 元素包含对 `css` 文件夹中每个 CSS 文件的链接，并指定用于 Web 应用的基本路径。`index.html` 文件的 `body`
    元素包含两个 `div` 元素和对 `blazor.webassembly.js` 文件的引用。'
- en: 'This is the code in the `head` element of the `index.html` file:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `index.html` 文件 `head` 元素中的代码：
- en: '[PRE26]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `base` element is used to indicate the base path for the URLs that are expressed
    with the `@path` directive. In the `Demo` project, the `href` attribute points
    to the root of the application. The `base` element is required in the `index.html`
    file.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`base` 元素用于指示使用 `@path` 指令表示的 URL 的基本路径。在 `Demo` 项目中，`href` 属性指向应用程序的根目录。`index.html`
    文件中需要 `base` 元素。'
- en: The `index.html` references three different stylesheets. The `bootstrap.min.css`
    file is for `Bootstrap 5.1` and is in the /`css/bootstrap` folder. The `app.css`
    file is in the /`css` folder. It includes the styles that are applied globally
    to the `Demo` project. Finally, the `Demo.styles.css` file is used for bundling
    any of the CSS files that are defined at the component level into one file. This
    is done to enable CSS isolation. The bundled CSS file is created at build time
    in the `obj` folder.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html` 引用了三个不同的样式表。`bootstrap.min.css` 文件用于 `Bootstrap 5.1`，位于 `/css/bootstrap`
    文件夹中。`app.css` 文件位于 `/css` 文件夹中，它包含应用于 `Demo` 项目的全局样式。最后，`Demo.styles.css` 文件用于将定义在组件级别的任何
    CSS 文件捆绑到一个文件中。这样做是为了实现 CSS 隔离。捆绑的 CSS 文件在构建时在 `obj` 文件夹中创建。'
- en: '**TIP**'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: A copy of `Demo.styles.css` for the `Demo` project is in `…\Demo\Demo\obj\Debug\net7.0\scopedcss\bundle`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`Demo` 项目的 `Demo.styles.css` 的副本位于 `…\Demo\Demo\obj\Debug\net7.0\scopedcss\bundle`。'
- en: 'This is the code in the `body` element of the `index.html` file:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `index.html` 文件 `body` 元素中的代码：
- en: '[PRE27]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The highlighted `div` element in the preceding code loads the `App` component.
    As you can see, the `App` component includes a loading progress indicator. Since
    the `Demo` project is very simple, you may not have noticed it when you ran the
    application since it loads so quickly. This is an image of the loading progress
    indicator:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，高亮的 `div` 元素加载了 `App` 组件。如您所见，`App` 组件包含一个加载进度指示器。由于 `Demo` 项目非常简单，您在运行应用程序时可能没有注意到它，因为它加载得非常快。这是加载进度指示器的图片：
- en: '![A picture containing diagram  Description automatically generated](img/B18471_02_16.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![包含图表的图片 自动生成描述](img/B18471_02_16.png)'
- en: 'Figure 2.16: Loading Progress Indicator'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16：加载进度指示器
- en: 'You can remove the loading progress indicator by updating the highlighted `div`
    to the following:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过更新高亮的 `div` 为以下内容来移除加载进度指示器：
- en: '[PRE28]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Also, you can customize the look and feel of the loading progress indicator
    by updating the relevant styles in the `\css\app.css` file.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以通过更新 `\css\app.css` 文件中的相关样式来自定义加载进度指示器的外观和感觉。
- en: The `blazor-error-ui div` element is for displaying unhandled exceptions. The
    styling for this `div` element is also in the `\css\app.css` file. The `blazor.webassembly.js`
    file is the script that downloads the .NET runtime, your application’s assemblies,
    and your application’s dependencies. It also initializes the runtime to run the
    web app.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`blazor-error-ui div` 元素用于显示未处理的异常。此 `div` 元素的样式也位于 `\css\app.css` 文件中。`blazor.webassembly.js`
    文件是下载 .NET 运行时、您的应用程序的组件和依赖项的脚本。它还初始化运行时以运行 Web 应用程序。'
- en: The App component
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: App 组件
- en: 'The `App` component is defined in the `App.razor` file:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`App` 组件在 `App.razor` 文件中定义：'
- en: '**App.razor**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**App.razor**'
- en: '[PRE29]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `App` component is the root component of a Blazor WebAssembly application.
    It uses the `Router` component to set up the routing for the web app. In the preceding
    code, if the route is found, the `RouteView` component receives `RouteData` and
    renders the specified component using the indicated `DefaultLayout`. If the route
    is not found, the `NotFound` template is used and `LayoutView` is rendered using
    the indicated `Layout`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`App` 组件是 Blazor WebAssembly 应用程序的根组件。它使用 `Router` 组件来设置 web 应用的路由。在前面代码中，如果找到路由，`RouteView`
    组件接收 `RouteData` 并使用指定的 `DefaultLayout` 渲染指定的组件。如果未找到路由，则使用 `NotFound` 模板，并使用指定的
    `Layout` 渲染 `LayoutView`。'
- en: As you can see, in the `Demo` project, both the `Found` template and the `NotFound`
    template use the same layout. They are both using the `MainLayout` component.
    However, they do not need to use the same layout component. We will examine the
    `MainLayout` component later in this chapter.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在 `Demo` 项目中，`Found` 模板和 `NotFound` 模板都使用了相同的布局。它们都使用了 `MainLayout` 组件。然而，它们不需要使用相同的布局组件。我们将在本章后面检查
    `MainLayout` 组件。
- en: 'The `Found` template includes a `FocusOnNavigate` component. It takes two properties:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`Found` 模板包含一个 `FocusOnNavigate` 组件。它包含两个属性：'
- en: '`RouteData` – the route data from the `Router` component'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RouteData` – 来自 `Router` 组件的路由数据'
- en: '`Selector` – the CSS selector for the element that should have the focus when
    the navigation completes'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selector` – 当导航完成时应该获得焦点的元素的 CSS 选择器'
- en: In the preceding code, when the Router navigates to a new page, the focus will
    be on the first `h1` element on that page.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，当 Router 导航到新页面时，焦点将放在该页面的第一个 `h1` 元素上。
- en: The Shared folder
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 共享文件夹
- en: The `Shared` folder in the `Demo` project includes the shared Razor components,
    including the `MainLayout` component. Each of these components may be used one
    or more times by other Razor components. None of the components in the `Shared`
    folder include an `@page` directive since they are not routable.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`Demo` 项目的 `Shared` 文件夹包含共享的 Razor 组件，包括 `MainLayout` 组件。这些组件中的每一个都可能被其他 Razor
    组件使用一次或多次。`Shared` 文件夹中的所有组件都不包含 `@page` 指令，因为它们不是可路由的。'
- en: The Pages folder
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面文件夹
- en: The `Pages` folder includes the routable Razor components used by the project.
    The routable components are `Counter`, `FetchData`, and `Index`. Each of these
    components includes an `@page` directive that is used to route the user to the
    page.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pages` 文件夹包含项目使用的可路由 Razor 组件。可路由组件是 `Counter`、`FetchData` 和 `Index`。这些组件中的每一个都包含一个
    `@page` 指令，用于将用户路由到页面。'
- en: The Client folder
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端文件夹
- en: 'The `Client` folder contains the `Program.cs` file. The `Program.cs` file is
    the entry point for the application. It contains the method called `Main`:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`Client` 文件夹包含 `Program.cs` 文件。`Program.cs` 文件是应用程序的入口点。它包含名为 `Main` 的方法：'
- en: '[PRE30]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding method, the `WebAssemblyHost` is built and run. As part of
    that process, the `App` component is defined as the `RootComponent` and is placed
    into the `app` object of the `wwwroot/index.html` file. Also, the `HttpClient`
    base address is configured when the `HttpClient` is registered in the dependency
    injection service. Registered services can be injected into components using the
    `@inject` directive. For more information on dependency injection, see *Chapter
    7*, *Building a Shopping Cart Using AppState*.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，构建并运行了 `WebAssemblyHost`。作为该过程的一部分，`App` 组件被定义为 `RootComponent` 并放置在
    `wwwroot/index.html` 文件的 `app` 对象中。此外，当 `HttpClient` 在依赖注入服务中注册时，配置了 `HttpClient`
    的基本地址。可以使用 `@inject` 指令将注册的服务注入到组件中。有关依赖注入的更多信息，请参阅 *第 7 章*，*使用 AppState 构建购物车*。
- en: '**TIP**'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The `HttpClient` allows the application to send HTTP requests and receive HTTP
    responses.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpClient` 允许应用程序发送 HTTP 请求并接收 HTTP 响应。'
- en: The _Imports.razor file
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`_Imports.razor` 文件'
- en: The `_Imports.razor` file includes common Razor directives that are shared by
    multiple Razor components. By including them in this file, they do not need to
    be included in the individual components. A project can include multiple `_Imports.razor`
    files. Each one is applied to its current folder and subfolders.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`_Imports.razor` 文件包含多个 Razor 组件共享的常见 Razor 指令。通过将它们包含在这个文件中，它们不需要包含在各个组件中。一个项目可以包含多个
    `_Imports.razor` 文件。每个文件应用于其当前文件夹和子文件夹。'
- en: Any `@using` directives in the `_Imports.razor` file are only applied to Razor
    (RAZOR) files. They are not applied to C# (CS) files. This distinction is important
    when using the code-behind technique that we will examine later in this chapter.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`_Imports.razor`文件中的任何`@using`指令仅应用于Razor（RAZOR）文件。它们不应用于C#（CS）文件。当我们在本章后面讨论代码隐藏技术时，这种区别很重要。'
- en: The `Demo` project includes many types of files divided into various folders.
    Next, we will examine the contents of the `Shared` folder.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`Demo`项目包括许多类型的文件，分为不同的文件夹。接下来，我们将检查`Shared`文件夹的内容。'
- en: Examining the shared Razor components
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查共享Razor组件
- en: 'The shared Razor components are in the `Shared` folder. There are three shared
    Razor components in the `Demo` project:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 共享Razor组件位于`Shared`文件夹中。`Demo`项目中有三个共享Razor组件：
- en: The `MainLayout` component
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainLayout`组件'
- en: The `NavMenu` component
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NavMenu`组件'
- en: The `SurveyPrompt` component
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SurveyPrompt`组件'
- en: The MainLayout component
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MainLayout`组件'
- en: 'The `MainLayout` component is used to define the page layout for the `Demo`
    project:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainLayout`组件用于定义`Demo`项目的页面布局：'
- en: '**Shared/MainLayout.razor**'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**Shared/MainLayout.razor**'
- en: '[PRE31]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The highlighted code indicates that the `MainLayout` component inherits from
    the `LayoutComponentBase` class. The `LayoutComponentBase` class represents a
    layout and has only one property, which is the `Body` property. The `Body` property
    gets the content to be rendered inside the layout.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 突出的代码表明`MainLayout`组件继承自`LayoutComponentBase`类。`LayoutComponentBase`类代表一个布局，并且只有一个属性，即`Body`属性。`Body`属性获取要渲染在布局内的内容。
- en: 'The following diagram illustrates the layout of a page as defined by the `MainLayout`
    component of the `Demo` project:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了由`Demo`项目的`MainLayout`组件定义的页面布局：
- en: '![Figure 2.14 – Screen layout ](img/B18471_02_17.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14 – 屏幕布局](img/B18471_02_17.png)'
- en: 'Figure 2.17: Page layout of the Demo project'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17：Demo项目的页面布局
- en: '**TIP**'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The `Blazor WebAssembly App` project template uses `Bootstrap 5.1` to style
    its pages. If you are unfamiliar with Bootstrap 5.1, you can refer to [https://getbootstrap.com/docs/5.1/getting-started/introduction/](https://getbootstrap.com/docs/5.1/getting-started/introduction/)
    to familiarize yourself with its syntax. Regrettably, the project template provided
    by Microsoft does not use the most current version of Bootstrap. To learn more
    about the current version of Bootstrap, refer to [https://getbootstrap.com](https://getbootstrap.com).
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blazor WebAssembly App`项目模板使用`Bootstrap 5.1`来样式化其页面。如果你不熟悉Bootstrap 5.1，可以参考[https://getbootstrap.com/docs/5.1/getting-started/introduction/](https://getbootstrap.com/docs/5.1/getting-started/introduction/)来熟悉其语法。遗憾的是，Microsoft提供的项目模板并没有使用Bootstrap的最新版本。要了解更多关于Bootstrap最新版本的信息，请参考[https://getbootstrap.com](https://getbootstrap.com)。'
- en: The `MainLayout` component includes its own dedicated CSS styles that are defined
    in the `MainLayout.razor.css` file. This is an example of **CSS isolation**. By
    using CSS isolation, we can reduce the number of global styles and avoid style
    conflicts in nested content. As we mentioned earlier, all the component-level
    styles will be bundled together into one CSS file during the build process.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainLayout`组件包括其自己的专用CSS样式，这些样式定义在`MainLayout.razor.css`文件中。这是一个**CSS隔离**的例子。通过使用CSS隔离，我们可以减少全局样式的数量，并避免嵌套内容中的样式冲突。正如我们之前提到的，所有组件级别的样式将在构建过程中打包到一个CSS文件中。'
- en: The NavMenu component
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NavMenu`组件'
- en: 'The `NavMenu` component defines the navigation menu for the `Demo` project.
    It uses multiple `NavLink` components to define the various menu options. This
    is the section of the `NavMenu` component that references the `NavLink` components
    used for the project’s navigation:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavMenu`组件定义了`Demo`项目的导航菜单。它使用多个`NavLink`组件来定义各种菜单选项。这是`NavMenu`组件引用用于项目导航的`NavLink`组件的部分：'
- en: '[PRE32]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `NavLink` component is defined in the `Microsoft.AspNetCore.Components.Routing`
    namespace. It behaves like an `a` element, except it has added functionality that
    highlights the current URL. This is the HTML that is rendered by `NavLink` for
    the `Counter` component when the `Counter` component is selected:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavLink`组件定义在`Microsoft.AspNetCore.Components.Routing`命名空间中。它表现得像一个`a`元素，但它增加了突出当前URL的功能。这是当`Counter`组件被选中时`NavLink`为`Counter`组件渲染的HTML：'
- en: '[PRE33]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The style used for the `nav-link` class is from Bootstrap.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`nav-link`类的样式来自Bootstrap。
- en: The `NavMenu` component includes its own dedicated CSS styles that are defined
    in the `NavMenu.razor.css` file. This is another example of CSS isolation.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: The SurveyPrompt component
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `SurveyPrompt` component creates a link to a brief survey on Blazor.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: In the `Demo` project, the `Shared` folder contains the non-routable components.
    Next, we will examine the routable components in the `Pages` folder.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Examining the routable Razor components
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The routable Razor components are in the `Pages` folder. A routable Razor component
    includes one or more `@page` directives at the top of the file. There are three
    routable Razor components in the `Demo` project:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: The `Index` component
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Counter` component
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FetchData` component
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Index component
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Home` page of the `Demo` project uses the `Index` component that is defined
    in the `Pages/Index.razor` file:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '**Pages/Index.razor**'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding code includes an `@page` directive that references the root of
    the web app and some markup. The markup includes both a `PageTitle` component
    and a `SurveyPrompt` component.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: The `PageTitle` component is a built-in Razor component that renders an HTML
    `title` element. The `title` element is used to define the page’s title in the
    browser and is the text displayed on the tab in the browser. It also is used when
    the page is added to favorites.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: If your component includes more than one `PageTitle` component, only the last
    one to be rendered will be used. The other ones will be ignored.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: The `SurveyPrompt` component is a custom component that is defined in the `Shared`
    folder.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: The Counter component
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Counter` component is more complex than the `Index` component. Like the
    `Index` component, it contains an `@page` directive that is used for routing and
    some markup. However, it also contains a C# code block:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '**Pages/Counter.razor**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the preceding code block, a private `currentCount` variable is used to hold
    the number of times that the button has been clicked. Each time the `Counter`
    button is clicked, the `Counter` component’s registered `@onclick` handler is
    called. In this case, it is the `IncrementCount` method.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: The `IncrementCount` method increments the value of the `currentCount` variable,
    and the `Counter` component regenerates its render tree. Blazor compares the new
    render tree against the previous one and applies any modifications to the browser’s
    DOM. This results in the displayed count being updated.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: The FetchData component
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `FetchData` component is by far the most complex component in the `Demo`
    project.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the directives in the `Pages/FetchData.razor` file:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `@page` directive is used for routing and the `@inject` directive is used
    for dependency injection. In this component, the `HttpClient` that is defined
    in the `Program.cs` file is being injected into the view. For more information
    on dependency injection, refer to *Chapter 7*, *Building a Shopping Cart Using
    Application State*.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: The following markup demonstrates the use of a very important pattern that you
    will often use when developing a Blazor WebAssembly application. Because the application
    runs on the browser, all data access must be asynchronous. That means that when
    the page first loads, the data will be `null`. For that reason, you always need
    to test for the `null` case before attempting to process the data.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的标记演示了在开发 Blazor WebAssembly 应用程序时经常使用的一个非常重要的模式。因为应用在浏览器上运行，所以所有数据访问都必须是异步的。这意味着当页面首次加载时，数据将是
    `null`。因此，在尝试处理数据之前，您始终需要测试 `null` 的情况。
- en: 'This is the markup in the `Pages/FetchData.razor` file:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Pages/FetchData.razor` 文件中的标记：
- en: '[PRE37]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The preceding markup includes an `if` statement and a `foreach` loop. While
    the value of `forecasts` is `null`, a `Loading` message is displayed. Once the
    value of `forecasts` is no longer `null`, all the items in the array are presented
    in a table.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的标记包括一个 `if` 语句和一个 `foreach` 循环。当 `forecasts` 的值为 `null` 时，会显示 `Loading` 消息。一旦
    `forecasts` 的值不再为 `null`，数组中的所有项都会以表格的形式呈现。
- en: '**IMPORTANT NOTE**'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: The value of `forecasts` will be `null` the first time that the page is rendered.
    If you do not handle the case when the value of `forecasts` is `null`, the framework
    will throw an exception.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 页面首次渲染时，`forecasts` 的值将是 `null`。如果您没有处理 `forecasts` 的值为 `null` 的情况，框架将抛出异常。
- en: As previously mentioned, Blazor components have a well-defined life cycle. The
    `OnInitializedAsync` method is invoked when the component is rendered. After the
    `OnInitializedAsync` method completes, the component is rerendered.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Blazor 组件有一个定义良好的生命周期。当组件被渲染时，会调用 `OnInitializedAsync` 方法。在 `OnInitializedAsync`
    方法完成后，组件将被重新渲染。
- en: 'This is the code block in the `Pages/FetchData.razor` file:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Pages/FetchData.razor` 文件中的代码块：
- en: '[PRE38]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: First, the preceding code block declares a parameter to contain a nullable array
    of the type `WeatherForecast`. Next, it uses the `OnInitializedAsync` asynchronous
    method to populate the array. To populate the array, the `GetFromJsonAsync` method
    of the `HttpClient` service is used. For more information on `HttpClient`, refer
    to *Chapter 11*, *Building a Task Manager Using the* *ASP.NET* *Web API*.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，前面的代码块声明了一个参数来包含类型为 `WeatherForecast` 的可空数组。然后，它使用 `OnInitializedAsync` 异步方法填充数组。为了填充数组，使用了
    `HttpClient` 服务的 `GetFromJsonAsync` 方法。有关 `HttpClient` 的更多信息，请参阅 *第 11 章*，*使用
    *ASP.NET* *Web API* 构建 Task Manager*。
- en: Using a component
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用组件
- en: 'Razor components are used by including them in the markup of another component.
    We will add a `Counter` component to the `Home` page. We do this as follows:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在另一个组件的标记中包含它们来使用 Razor 组件。我们将向 `Home` 页面添加一个 `Counter` 组件。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Open the `Pages/Index.razor` file.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Index.razor` 文件。
- en: Delete all the markup after the `PageTitle` component.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `PageTitle` 组件之后的所有标记。
- en: Be sure you do not remove the `@page` directive at the top of the file.
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您不要删除文件顶部的 `@page` 指令。
- en: 'Add the following markup below the `PageTitle` component:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PageTitle` 组件下方添加以下标记：
- en: '[PRE39]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: From the **Build** menu, select the **Build Solution** option.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **构建** 菜单中选择 **构建解决方案** 选项。
- en: Return to the browser and navigate to the **Home** page. If the `Demo` project
    is not running, from the **Debug** menu, select the **Start Without Debugging**
    (*Ctrl*+*F5*) option to run it.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回浏览器并导航到 **首页**。如果 `Demo` 项目没有运行，从 **调试** 菜单中选择 **不调试启动** (*Ctrl*+*F5*) 选项来运行它。
- en: Press *Ctrl*+*R* to refresh the browser.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*R* 刷新浏览器。
- en: '**TIP**'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Whenever you update your C# code, you need to refresh the browser for the browser
    to load the updated DLL unless you use `Hot Reload`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您更新 C# 代码时，您需要刷新浏览器以便浏览器加载更新的 DLL，除非您使用 `热重载`。
- en: Click the **Click me** button 3 times to test the `Counter` component.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Click me` 按钮三次以测试 `Counter` 组件。
- en: The **Current value** is now `3`.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**当前值**现在是 `3`。'
- en: We have nested a Razor component within another Razor component. Next, we will
    update a component using `Hot Reload`.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在另一个 Razor 组件内部嵌套了一个 Razor 组件。接下来，我们将使用 `热重载` 更新组件。
- en: Modifying a component
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改组件
- en: 'By using `Hot Reload`, we can automatically update the app without having to
    rebuild it or refresh the browser. We will update the `Counter` component and
    rebuild the app using `Hot Reload`. We do this as follows:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `热重载`，我们可以自动更新应用，而无需重新构建它或刷新浏览器。我们将使用 `热重载` 更新 `Counter` 组件并重新构建应用。我们这样做如下：
- en: Return to Visual Studio, without closing the browser.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio，无需关闭浏览器。
- en: If you can, configure your screen to display both the browser and Visual Studio
    at the same time.
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果可以，请配置您的屏幕同时显示浏览器和Visual Studio。
- en: Open the `Pages/Counter.razor` file.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/Counter.razor`文件。
- en: 'Change the text in the `h1` element to the following:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`h1`元素中的文本更改为以下内容：
- en: '[PRE40]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Click the **Hot Reload** drop-down button on the toolbar or press *Alt*+*F10*.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏上点击**Hot Reload**下拉按钮或按*Alt*+*F10*。
- en: Verify that the text on the browser has changed.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证浏览器上的文本是否已更改。
- en: Click the **Click me** button 3 times.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**点击我**按钮3次。
- en: The **Current value** is now `6`.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**当前值**现在是`6`。'
- en: '**IMPORTANT NOTE**'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: The value of the current count did not change when `Hot Reload` was used to
    update the code.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`Hot Reload`更新代码时，当前计数的值没有改变。
- en: Use the **Hot Reload** drop-down button on the toolbar to select **Hot Reload
    on File Save**.
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用工具栏上的**Hot Reload**下拉按钮选择**文件保存时Hot Reload**。
- en: 'Update the markup below the `PageTitle` component to the following:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`PageTitle`组件下方的标记为以下内容：
- en: '[PRE41]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The preceding code will add some formatting to the `Counter` component and change
    the label from **Current count** to **Current value**.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码将为`Counter`组件添加一些格式，并将标签从**当前计数**更改为**当前值**。
- en: 'Add the following code to the top of the code block:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块的顶部：
- en: '[PRE42]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Click *Ctrl*+*S*.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击*Ctrl*+*S*。
- en: The **Hot Reload** warning dialog is displayed.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示**Hot Reload**警告对话框。
- en: Check the **Always rebuild when updates can’t be applied** checkbox.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**当更新无法应用时始终重新构建**复选框。
- en: Click the **Rebuild and Apply Changes** button.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**重建并应用更改**按钮。
- en: 'Update the `IncrementCount` method to the following:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`IncrementCount`方法更新为以下内容：
- en: '[PRE43]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Click *Ctrl*+*S*.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击*Ctrl*+*S*。
- en: The app rebuilds and refreshes the browser without displaying the **Hot Reload**
    warning dialog.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序重新构建并刷新浏览器，而不显示**Hot Reload**警告对话框。
- en: By using `Hot Reload`, we were able to make changes to our code and see those
    changes immediately reflected in the browser. In this example, we were not in
    debug mode, but it is important to remember that `Hot Reload` also works in debug
    mode. Next, we need to set the value of the increment.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`Hot Reload`，我们能够修改代码并立即在浏览器中看到这些更改。在这个例子中，我们并没有处于调试模式，但重要的是要记住`Hot Reload`在调试模式下也有效。接下来，我们需要设置增量的值。
- en: Adding a parameter to a component
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向组件添加参数
- en: 'Most components require parameters. To add a parameter to a component, use
    the `Parameter` attribute. We will add a parameter to specify the increment used
    by the `IncrementCount` method. We do this as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组件都需要参数。要将参数添加到组件中，请使用`Parameter`属性。我们将添加一个参数来指定`IncrementCount`方法使用的增量。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Open the `Pages/Counter.razor` file.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/Counter.razor`文件。
- en: 'Add the following code to the top of the code block to define the new parameter:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块的顶部以定义新参数：
- en: '[PRE44]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the following `OnParametersSet` method to set the value of `increment`
    to the value of the `Increment` parameter:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`OnParametersSet`方法，将`increment`的值设置为`Increment`参数的值：
- en: '[PRE45]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Adding the `OnParametersSet` method will require a restart, as indicated by
    the following image:'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加`OnParametersSet`方法将需要重启，如下图所示：
- en: '![Graphical user interface, text, email  Description automatically generated](img/B18471_02_18.png)'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，电子邮件  自动生成的描述](img/B18471_02_18.png)'
- en: 'Figure 2.18: Page layout of the Demo project'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.18：Demo项目的页面布局
- en: Select **Restart Application** from the **Hot Reload** drop-down button.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Hot Reload**下拉按钮中选择**重启应用程序**。
- en: 'Change the text in the `h1` element to the following:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`h1`元素中的文本更改为以下内容：
- en: '[PRE46]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Update the address bar to the following
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新地址栏为以下内容
- en: '[PRE47]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Click the **Click me** button 3 times.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**点击我**按钮3次。
- en: The **Current value** is now `15`.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**当前值**现在是`15`。'
- en: We have added a parameter that can obtain its value from the query string. It
    can also obtain its value from an attribute. Next, we will add a `Counter` component
    to the `Index` component that increments its value by 7 each time it is clicked.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个参数，可以从查询字符串中获取其值。它也可以从属性中获取其值。接下来，我们将向`Index`组件添加一个`Counter`组件，每次点击时增加其值7。
- en: Using a parameter with an attribute
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用具有属性的参数
- en: 'We will add another instance of the `Counter` component to the `Home` page
    that uses the new parameter. We do this as follows:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`Home`页面上添加另一个`Counter`组件实例，该实例使用新的参数。我们这样做如下：
- en: Open the `Pages/Index.razor` file.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/Index.razor`文件。
- en: 'Add the following markup to the bottom of the `Index.razor` file:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到`Index.razor`文件的底部：
- en: '[PRE48]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'As you add the markup, **IntelliSense** is provided for the new `Increment`
    parameter:'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在添加标记时，会为新的 `Increment` 参数提供 **IntelliSense** 支持：
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_02_19.png)'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，团队描述自动生成](img/B18471_02_19.png)'
- en: 'Figure 2.19: IntelliSense'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.19：IntelliSense
- en: Press *Ctrl*+*S*.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*S*。
- en: Return to the browser.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回浏览器。
- en: Navigate to the **Home** page.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **首页**。
- en: The **Home** page now contains two instances of the `Counter` component. If
    you click the first **Click me** button, the first counter will be incremented
    by 1; if you click the second **Click me** button, the second counter will be
    incremented by 7.
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在的 **首页** 包含了两个 `Counter` 组件的实例。如果你点击第一个 **Click me** 按钮，第一个计数器会增加 1；如果你点击第二个
    **Click me** 按钮，第二个计数器会增加 7。
- en: Click each of the **Click me** buttons to verify they both work as intended.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击每个 **Click me** 按钮，以验证它们是否按预期工作。
- en: Adding a route parameter
  id: totrans-473
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加路由参数
- en: 'Components can have multiple `@page` directives. We will add an `@page` directive
    to the `Counter` component that uses a parameter. We do this as follows:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以拥有多个 `@page` 指令。我们将向 `Counter` 组件添加一个使用参数的 `@page` 指令。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Open the `Pages/Counter.razor` file.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Counter.razor` 文件。
- en: Remove the `SupplyParameterFromQuery` attribute from the `Increment` parameter.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Increment` 参数中移除 `SupplyParameterFromQuery` 属性。
- en: 'Add the following `@page` directive to the top of the file:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下 `@page` 指令：
- en: '[PRE49]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `Counter` component now includes two `@page` directives.
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Counter` 组件现在包含两个 `@page` 指令。'
- en: Press *Ctrl*+*S*.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*S*。
- en: Navigate to the `Counter` page.
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `Counter` 页面。
- en: 'Update the URL to the following:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 URL 到以下：
- en: '[PRE50]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '**IMPORTANT NOTE**'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Since the page is automatically reloaded when you change the URL, you do not
    need to refresh the browser to reload the page.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 由于页面在更改 URL 时会自动重新加载，因此你不需要刷新浏览器来重新加载页面。
- en: Click the **Click me** button.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Click me** 按钮。
- en: The counter should now increment by 4.
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计数器现在应该增加 4。
- en: 'Update the URL to an invalid route:'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 URL 到无效的路由：
- en: '[PRE51]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Since this is not a valid route, you will be directed to the `NotFound` content
    defined in the `App` component:'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这不是一个有效的路由，你将被重定向到 `App` 组件中定义的 `NotFound` 内容：
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_02_20.png)'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，团队描述自动生成](img/B18471_02_20.png)'
- en: 'Figure 2.20: Page not found'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.20：页面未找到
- en: '**TIP**'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you need to navigate to a URL in code, you should use `NavigationManager`.
    `NavigationManager` provides a `NavigateTo` method that is used to navigate the
    user to the specified URI without forcing a page load.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在代码中导航到 URL，你应该使用 `NavigationManager`。`NavigationManager` 提供了一个 `NavigateTo`
    方法，用于将用户导航到指定的 URI，而不会强制页面加载。
- en: Using partial classes to separate markup from code
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用部分类将标记与代码分离
- en: 'Many developers prefer to separate their markup from their C# fields, properties,
    and methods. Since Razor components are regular C# classes, they support partial
    classes. The `partial` keyword is used to create a partial class. We will use
    a partial class to move the code block from the `RAZOR` file to a `CS` file. We
    do this as follows:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者更喜欢将他们的标记与 C# 字段、属性和方法分开。由于 Razor 组件是常规的 C# 类，它们支持部分类。使用 `partial` 关键字创建部分类。我们将使用部分类将代码块从
    `RAZOR` 文件移动到 `CS` 文件。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Right-click the `Pages` folder and select **Add**, **Class** from the menu.
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Pages` 文件夹，从菜单中选择 **Add**，**Class**。
- en: Name the new class `Counter.razor.cs`.
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为 `Counter.razor.cs`。
- en: 'Update the `Counter` class to be a partial class by using the `partial` keyword:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `partial` 关键字将 `Counter` 类更新为部分类：
- en: '[PRE52]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Open the `Pages/Counter.razor` file.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Counter.razor` 文件。
- en: Copy all the code in the code block to the partial `Counter` class in the `Counter.razor.cs`
    file.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码块中的所有代码复制到 `Counter.razor.cs` 文件中的部分 `Counter` 类。
- en: Delete the code block from the `Counter.razor` file.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Counter.razor` 文件中删除代码块。
- en: Press *Ctrl*+*S*.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*S*。
- en: Navigate to the **Counter** page.
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **Counter** 页面。
- en: Click the **Click me** button to verify that it still works.
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Click me** 按钮以验证它是否仍然工作。
- en: Close the browser.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: Using partial classes gives you the flexibility to move the code in the code
    block to a separate file, allowing you to use the code-behind technique.
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用部分类可以让你将代码块中的代码移动到单独的文件，从而允许你使用代码隐藏技术。
- en: '**TIP**'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: A quick way to create the code-behind page is to right-click on the code block
    and use the **Quick Actions and Refactorings** option to extract the block to
    code behind.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 创建代码后页面的快速方法是右键单击代码块，并使用**快速操作和重构**选项将块提取到代码后。
- en: We have created a `Demo` project by using the **Blazor WebAssembly App**project
    template provided by Microsoft. We added a parameter to the `Counter` component
    and moved the code in the code block of the `Counter` component to a separate
    file.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Microsoft提供的**Blazor WebAssembly App**项目模板创建了一个`Demo`项目。我们为`Counter`组件添加了一个参数，并将`Counter`组件代码块中的代码移动到了一个单独的文件中。
- en: Summary
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to create a Blazor WebAssembly application.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够创建一个Blazor WebAssembly应用程序。
- en: In this chapter, we introduced Razor components. We learned about their parameters,
    naming conventions, life cycle, and structure. We also learned about routing and
    Razor syntax. Finally, we learned how to use `Hot Reload`.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Razor组件。我们学习了它们的参数、命名约定、生命周期和结构。我们还学习了路由和Razor语法。最后，我们学习了如何使用`热重载`。
- en: After that, we used the **Blazor WebAssembly App** project template provided
    by Microsoft to create the `Demo` project. We examined each of the files in the
    `Demo` project. We added a parameter to the `Counter` component and examined how
    routing works. Finally, we practiced using `Hot Reload`.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用了Microsoft提供的**Blazor WebAssembly App**项目模板创建了`Demo`项目。我们检查了`Demo`项目中的每个文件。我们为`Counter`组件添加了一个参数，并检查了路由的工作方式。最后，我们练习了使用`热重载`。
- en: Questions
  id: totrans-518
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您考虑：
- en: Can Razor components include JavaScript?
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Razor组件可以包含JavaScript吗？
- en: What types of loops are supported by Razor syntax?
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Razor语法支持哪些类型的循环？
- en: Can the parameter of a component be defined using a POCO?
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组件的参数可以使用POCO定义吗？
- en: Will `Hot Reload` render changes to CSS files?
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`热重载`会渲染CSS文件中的更改吗？'
- en: How can a child component trigger an infinite loop?
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子组件如何触发无限循环？
- en: Further reading
  id: totrans-525
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了有关本章主题的更多信息：
- en: For more information on Bootstrap, refer to [https://getbootstrap.com](https://getbootstrap.com).
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Bootstrap的更多信息，请参阅[https://getbootstrap.com](https://getbootstrap.com)。
- en: For more information on Razor syntax, refer to [https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor](https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor).
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Razor语法的更多信息，请参阅[https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor](https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor)。
- en: For more information on `Hot Reload`, refer to [https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload](https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload).
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`热重载`的更多信息，请参阅[https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload](https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload)。
