["```cs\n// Assert\nIsSaved.Should().BeTrue();\n```", "```cs\n// Assert\nAssert(true, IsSaved);\n```", "```cs\n// Act\nvar exception = Record.Exception(() => sut.LoginUser(…));\n```", "```cs\n// Arrange\nconst double NEXT_T = 3.3;\nconst double DAY5_T = 7.7;\nvar today = new DateTime(2022, 1, 1);\nvar realWeatherTemps = new[] \n    {2, NEXT_T, 4, 5.5, 6, DAY5_T, 8};\nvar loggerMock = \n    Substitute.For<ILogger<WeatherController>>();\nvar nowWrapperMock = Substitute.For<INowWrapper>();\nvar randomWrapperMock = Substitute.For<IRandomWrapper>();\nvar clientMock = Substitute.For<IClient>();\nclientMock.OneCallAsync(Arg.Any<decimal>(), Arg.Any<decimal>(), \n    Arg.Any<IEnumerable<Excludes>>(), Arg.Any<Units>())\n    .Returns(x => \n    {\n        const int DAYS = 7;\n        OneCallResponse res = new OneCallResponse();\n        res.Daily = new Daily[DAYS];\n        for (int i = 0; i < DAYS; i++)\n        {\n            res.Daily[i] = new Daily();\n            res.Daily[i].Dt = today.AddDays(i);\n            res.Daily[i].Temp = new Temp();\n            res.Daily[i].Temp.Day = \n                realWeatherTemps.ElementAt(i);\n        }\n        return Task.FromResult(res);\n    });\nvar controller = new WeatherController(loggerMock, \n    clientMock, nowWrapperMock, randomWrapperMock);\n…\n```", "```cs\nprivate const double NEXT_T = 3.3;\nprivate const double DAY5_T = 7.7;\nprivate readonly DateTime _today = new(2022, 1, 1);\nprivate readonly double[] _realWeatherTemps = new[]\n    { 2, NEXT_T, 4, 5.5, 6, DAY5_T, 8 };\nprivate readonly ILogger<WeatherForecastController> _loggerMock \n  = Substitute.For<ILogger<WeatherForecastController>>();\nprivate readonly INowWrapper _nowWrapperMock = \n    Substitute.For<INowWrapper>();\nprivate readonly IRandomWrapper _randomWrapperMock = \n    Substitute.For<IRandomWrapper>();\nprivate readonly IClient _clientMock = \n    Substitute.For<IClient>();\nprivate readonly WeatherForecastController _sut;\npublic WeatherTests()\n{\n   _sut = new WeatherForecastController(_loggerMock,\n       _clientMock,_nowWrapperMock, _randomWrapperMock);\n}\n```", "```cs\n// Arrange\n_clientMock.OneCallAsync(Arg.Any<decimal>(), \n    Arg.Any<decimal>(),\n    Arg.Any<IEnumerable<Excludes>>(), Arg.Any<Units>())\n    .Returns(x =>\n    {\n        const int DAYS = 7;\n        OneCallResponse res = new OneCallResponse();\n        res.Daily = new Daily[DAYS];\n        for (int i = 0; i < DAYS; i++)\n        {\n            res.Daily[i] = new Daily();\n            res.Daily[i].Dt = _today.AddDays(i);\n            res.Daily[i].Temp = new Temp();\n            res.Daily[i].Temp.Day = \n                _realWeatherTemps.ElementAt(i);\n        }\n        return Task.FromResult(res);\n    });\n…\n```", "```cs\npublic class OneCallResponseBuilder\n{\n    private int _days = 7;\n    private DateTime _today = new (2022, 1, 1);\n    private double[] _temps = {2, 3.3, 4, 5.5, 6, 7.7, 8};\n    public OneCallResponseBuilder SetDays(int days)\n    {\n        _days = days;\n        return this;\n    }\n    public OneCallResponseBuilder SetToday(DateTime today)\n    {\n        _today = today;\n        return this;\n    }\n    public OneCallResponseBuilder SetTemps(double[] temps)\n    {\n        _temps = temps;\n        return this;\n    }\n    public OneCallResponse Build()\n    {\n        var res = new OneCallResponse();\n        res.Daily = new Daily[_days];\n        for (int i = 0; i < _days; i++)\n        {\n            res.Daily[i] = new Daily();\n            res.Daily[i].Dt = _today.AddDays(i);\n            res.Daily[i].Temp = new Temp();\n            res.Daily[i].Temp.Day = _temps.ElementAt(i);\n        }\n        return res;\n    }\n}\n```", "```cs\n    OneCallResponse res = new OneCallResponseBuilder()\n        .SetDays(7)\n        .SetTemps(new []{ 0, 3.3, 0, 0, 0, 0, 0 })\n        .Build();\n    ```", "```cs\n// Arrange\nOneCallResponse res = new OneCallResponseBuilder()\n    .SetTemps(new []{ 0, 3.3, 0, 0, 0, 0, 0 })\n    .Build();\n_clientMock.OneCallAsync(Arg.Any<decimal>(),  \n    Arg.Any<decimal>(), Arg.Any<IEnumerable<Excludes>>(),\n    Arg.Any<Units>())\n    .Returns(res);\n```", "```cs\npublic async Task<IEnumerable<WeatherForecast>> GetReal()\n{\n    const decimal GREENWICH_LAT = 51.4810m;\n    const decimal GREENWICH_LON = 0.0052m;\n    OneCallResponse res = await _client.OneCallAsync\n     (GREENWICH_LAT, GREENWICH_LON, new[]{Excludes.Current,   \n     Excludes.Minutely, Excludes.Hourly, Excludes.Alerts},\n     Units.Metric);\n    WeatherForecast[] wfs = new \n        WeatherForecast[FORECAST_DAYS];\n    for (int i = 0; i < wfs.Length; i++)\n    {\n        var wf = wfs[i] = new WeatherForecast();\n        wf.Date = res.Daily[i + 1].Dt;\n        double forecastedTemp = res.Daily[i + 1].Temp.Day;\n        wf.TemperatureC = (int)Math.Round(forecastedTemp);\n        wf.Summary = MapFeelToTemp(wf.TemperatureC);\n    }\n    return wfs;\n}\nprivate string MapFeelToTemp(int temperatureC)\n{\n    …\n}\n```", "```cs\nGetReal_NotInterestedInTodayWeather_WFStartsFromNextDay\nGetReal_5DaysForecastStartingNextDay_\n    WF5ThDayIsRealWeather6ThDay\nGetReal_ForecastingFor5DaysOnly_WFHas5Days\nGetReal_WFDoesntConsiderDecimal_RealWeatherTempRoundedProperly\nGetReal_TodayWeatherAnd6DaysForecastReceived_\n    RealDateMatchesLastDay\nGetReal_TodayWeatherAnd6DaysForecastReceived_\n    RealDateMatchesNextDay\nGetReal_RequestsToOpenWeather_MetricUnitIsUsed\nGetReal_Summary_MatchesTemp(string summary, double temp)\n```", "```cs\npublic bool IsEven(int number)\n{\n    if(number % 2 == 0) return true;\n    else return false;\n}\n```", "```cs\n    public interface IRandomWrapper\n    {\n        int Next(int minValue, int maxValue);\n    }\n    public class RandomWrapper : IRandomWrapper\n    {\n        private readonly Random _random = Random.Shared;\n        public int Next(int minValue, int maxValue)\n        {\n            return _random.Next(minValue, maxValue);\n        }\n    }\n    ```", "```cs\npublic class SampleTests \n{\n    private int _instanceField = 0;\n    [Fact]\n    public void UnitTest1()\n    {\n        _instanceField += 1;\n        Assert.Equal(1, _instanceField);\n    }\n    [Fact]\n    public void UnitTest2()\n    {\n        _instanceField += 5;\n        Assert.Equal(5, _instanceField);\n    }\n}\n```", "```cs\npublic class SampleTests \n{\n    private static int _staticField = 0;\n    [Fact]\n    public void UnitTest1()\n    {\n        _staticField += 1;\n        Assert.Equal(1, _staticField);\n    }\n    [Fact]\n    public void UnitTest2()\n    {\n        _staticField += 5;\n        Assert.Equal(6, _staticField);\n    }\n}\n```", "```cs\nprivate readonly static InMemoryTerritoriesDB = \n   GetTerritories();\n```", "```cs\npublic interface INowWrapper\n{\n    DateTime Now { get; }\n}\npublic class NowWrapper : INowWrapper\n{\n    public DateTime Now => DateTime.Now;\n}\n```", "```cs\nbuilder.Services.AddSingleton<INowWrapper>(_ => new \n    NowWrapper());\n```", "```cs\nprivate readonly INowWrapper _nowWrapper;\npublic MyService(INowWrapper nowWrapper) \n{\n    _nowWrapper = nowWrapper;\n}    \npublic DateTime GetTomorrow() =>\n    _nowWrapper.Now.AddDays(1).Date;\n```", "```cs\npublic void GetTomorrow_NormalDay_TomorrowIsRight()\n{\n    // Arrange\n    var today = new DateTime(2022, 1, 1);\n    var expected = new DateTime(2022, 1, 2);\n    var nowWrapper = Substitute.For<INowWrapper>();\n    nowWrapper.Now.Returns(today);\n    var myService = new MyService(nowWrapper);\n    // Act\n    var actual = myService.GetTomorrow();\n    // Assert\n    Assert.Equal(expected, actual);\n}\n```"]