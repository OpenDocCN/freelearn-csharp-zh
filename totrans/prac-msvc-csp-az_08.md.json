["```cs\nazd init\n```", "```cs\nazd auth login\nazd up\n```", "```cs\nazd down\n```", "```cs\nname: Codebreaker backend workflow\non:\n  workflow-dispatch:\npush:\n    branches:\n      - main\n    paths:\n    - 'src/**'\n```", "```cs\npermissions:\n  id-token: write\n  contents: read\n```", "```cs\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    env:\n      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}\n      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}\n      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}\n      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}\n      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}\n```", "```cs\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Install azd\n        uses: Azure/setup-azd@v1.0.0\n      - name: Install .NET Aspire workload\n        run: dotnet workload install aspire\n# Code removed for brevity\n```", "```cs\n      - name: Log in with Azure (Federated Credentials)\n        if: ${{ env.AZURE_CLIENT_ID != '' }}\n        run: |\nazd auth login `\n            --client-id \"$Env:AZURE_CLIENT_ID\" `\n            --federated-credential-provider \"github\" `\n            --tenant-id «$Env:AZURE_TENANT_ID»\n        shell: pwsh\n```", "```cs\n- name: Log in with Azure (Client Credentials)\n   if: ${{ env.AZURE_CREDENTIALS != '' }}\n   run: |\n     $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;\n     Write-Host \"::add-mask::$($info.clientSecret)\"\n     azd auth login `\n       --client-id \"$($info.clientId)\" `\n       --client-secret \"$($info.clientSecret)\" `\n       --tenant-id \"$($info.tenantId)\"\n   shell: pwsh\n   env:\n     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n```", "```cs\n      - name: Provision Infrastructure\n        run: azd provision --no-prompt\n      - name: Deploy Application\n        run: azd deploy --no-prompt\n```", "```cs\nazd auth login\nazd pipeline config --auth-type federated --principal-name github-codebreaker-dev\n```", "```cs\naz account show --query tenantId -o tsv\n```", "```cs\naz account show --query id -o tsv\n```", "```cs\nname: Shared workflow to build and test a .NET project\non:\n  workflow_call:\n    inputs:\n      project-name:\n        description: 'The name of the project'\n        required: true\n        type: string\n      solution-path:\n        description: 'The solution file of the project to build and run tests'\n        required: true\n        type: string\n      dotnet-version:\n        description: 'The version of .NET to use'\n        required: false\n        type: string\n        default: '8.0.x'\n```", "```cs\njobs:\n  run-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout to the branch\n        uses: actions/checkout@v4\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v4\n        with:\n          dotnet-version: ${{ inputs.dotnet-version }}\n      - name: Install .NET Aspire workload\n        run: dotnet workload install aspire\n      - name: Restore NuGet Packages\n        run: dotnet restore ${{ inputs.solution-path }}\n      - name: Run unit tests\n        run: dotnet test --logger trx --results-directory \"TestResults-${{ inputs.project-name}}\" --no-restore ${{ inputs.solution-path }}\n      - name: Upload the test results\n        uses: actions/upload-artifact@v4\n        with:\n          name: test-results-${{ inputs.project-name}}\n          path: TestResults-${{ inputs.project-name}}\n        if: always()\n```", "```cs\n# code removed for brevity\njobs:\n  build-and-test:\n    uses: ./.github/workflows/shared-test.yml\n    with:\n      project-name: 'Codebreaker-Backend'\n      solution-path: 'src/Chapter08.sln'\n```", "```cs\nname: Shared workflow to deploy a .NET Aspire project\non:\n  workflow_call:\n    inputs:\n# code removed for brevity\n    secrets:\n      AZURE_CLIENT_ID:\n        required: true\n      AZURE_TENANT_ID:\n        required: true\n      AZURE_SUBSCRIPTION_ID:\n        required: true\n```", "```cs\n# code removed for brevity\njobs:\n  build-and-test:\n    uses: ./.github/workflows/shared-test.yml\n    with:\n      project-name: Codebreaker-Backend\n      solution-path: src/Chapter08.sln\n  build-and-deploy:\n    needs:  build-and-test\n    uses: ./.github/workflows/shared-deploy.yml\n    with:\n      environment-name: ${{ vars.AZURE_ENV_NAME }}\n      location: ${{ vars.AZURE_LOCATION }}\n    secrets:\n      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}\nAZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}\n      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}\n```", "```cs\nazd env new codebreaker-08-prod\n```", "```cs\nazd env list\n```", "```cs\nazd env select codebreaker-dev\n```", "```cs\nazd env get-values\n```", "```cs\nazd env set AZURE_LOCATION eastus3\n```", "```cs\nazd pipeline config --auth-type federated --principal-name github-codebreaker-prod\n```", "```cs\n# code removed for brevity\n  workflow_call:\ninputs:\n      environment-name:\n        description: 'The environment to deploy to'\n        required: true\n        type: string\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    environment: ${{ inputs.environment-name }}\n```", "```cs\n# code removed for brevity\njobs:\n  build-and-deploy:\n    uses: ./.github/workflows/shared-deploy-withenvironment.yml\n    secrets: inherit\n    with:\n      environment-name: codebreaker-08-prod\n```", "```cs\n  <ItemGroup>\n    <None Include=\"package/readme.md\" Pack=\"true\" PackagePath=\"\\\" />\n    <None Include=\"package/codebreaker.jpeg\" Pack=\"true\" \n     PackagePath=\"\\\" />\n  </ItemGroup>\n```", "```cs\n  <PropertyGroup>\n    <PackageId>\n      CNinnovation.Codebreaker.KiotaClient\n    </PackageId>\n    <PackageTags>\n      Codebreaker;CNinnovation;Kiota\n    </PackageTags>\n    <Description>\n      This library contains Kiota-generated classes for communication \n      with the Codebreaker games API service.\n      See https://github.com/codebreakerapp for more information on \n        the complete solution.\n    </Description>\n    <PackageReadmeFile>readme.md</PackageReadmeFile>\n    <PackageIcon>codebreaker.jpeg</PackageIcon>\n  </PropertyGroup>\n```", "```cs\n// code removed for brevity\nbuilder.Services.AddFeatureManagement()\n  .AddFeatureFilter<TargetingFilter>()\n  .AddFeatureFilter<TimeWindowFilter>();\n```", "```cs\n  builder.Configuration.AddAzureAppConfiguration(options =>\n  {\n    options.Connect(new Uri(endpoint), credential)\n      .Select(\"GamesAPI*\")\n      .ConfigureKeyVault(kv =>\n      {\n        kv.SetCredential(credential);\n      })\n      .UseFeatureFlags();\n  });\n```", "```cs\nvar app = builder.Build();\nif (solutionEnvironment == \"Azure\")\n{\n  app.UseAzureAppConfiguration();\n}\n```", "```cs\npublic static class FeatureManagerExtensions\n{\n  private static List<string>? s_featureNames;\n  public static async Task<bool> IsGameTypeAvailable(this \n    IFeatureManager featureManager, GameType gameType)\n  {\n    async Task<List<string>> GetFeatureNamesAsync()\n    {\n      List<string> featureNames = [];\n      await foreach (string featureName in featureManager.\n        GetFeatureNamesAsync())\n      {\n        featureNames.Add(featureName);\n      }\n      return featureNames;\n    }\n    string featureName = $\"Feature{gameType}\";\n    if ((s_featureNames ?? await GetFeatureNamesAsync()).\n    Contains(featureName))\n    {\n      return await featureManager.IsEnabledAsync(featureName);\n    }\n    else\n    {\n      return true;\n    }\n  }\n}\n```", "```cs\ngroup.MapPost(\"/\", async Task<Results<Created<CreateGameResponse>, BadRequest<GameError>>> (\n  CreateGameRequest request,\n  IGamesService gameService,\n  IFeatureManager featureManager,\n  HttpContext context,\n  CancellationToken cancellationToken) =>\n  {\n    Game game;\n    try\n    {\n      bool featureAvailable = await featureManager.\n        IsGameTypeAvailable(request.GameType);\n      if (!featureAvailable)\n      {\n        GameError error = new(ErrorCodes.\n          GameTypeCurrentlyNotAvailable, \"Game type currently not \n          available\", context.Request.GetDisplayUrl());\n        return TypedResults.BadRequest(error);\n      }\n      game = await gameService.StartGameAsync(request.GameType.\n        ToString(), request.PlayerName, cancellationToken);}\n// code removed for brevity\n```"]