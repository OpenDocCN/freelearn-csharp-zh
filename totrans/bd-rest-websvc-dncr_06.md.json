["```cs\nnamespace Chap06_01.Core.Model\n{\n  public class Product\n  {\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Image { get; set; }\n    public decimal Price { get; set; }\n    public Guid CategoryId { get; set; }\n    public virtual Category Category { get; set; }\n  }\n}\n```", "```cs\n\"ConnectionStrings\": \n{\n  \"ProductConnection\": \"Data Source=.;Initial\n  Catalog=ProductsDB;Integrated\n  Security=True;MultipleActiveResultSets=True\"\n}\n```", "```cs\nnamespace Chap06_01.Core.Interfaces\n{\n  public interface IProductRepository\n  {\n    void Add(Product product);\n    IEnumerable<Product> GetAll();\n    Product GetBy(Guid id);\n    void Remove(Guid id);\n    void Update(Product product);\n  }\n}\n```", "```cs\nnamespace Chap06_01.Infrastructure\n{\n  public class ProductRepository : IProductRepository\n  {\n    private readonly ProductContext _context;\n    public ProductRepository(ProductContext context)\n    => _context = context;\n    public IEnumerable<Product> GetAll() =>\n    _context.Products.Include(c => \n    c.Category).ToList();\n    public Product GetBy(Guid id) => _context.Products.\n    Include(c => c.Category).FirstOrDefault(x => x.Id == id);\n    public void Add(Product product)\n    {\n      _context.Products.Add(product);\n      _context.SaveChanges();\n    }\n    public void Update(Product product)\n    {\n      _context.Update(product);\n      _context.SaveChanges();\n    }\n    public void Remove(Guid id)\n    {\n      var product = GetBy(id);\n      _context.Remove(product);\n      _context.SaveChanges();\n    }\n  }\n}\n```", "```cs\nservices.AddScoped<IProductRepository, ProductRepository>();\nservices.AddDbContext<ProductContext>\n(\n  o => o.UseSqlServer(Configuration.GetConnectionString\n  (\"ProductConnection\"))\n);\nservices.AddSwaggerGen\n(\n  swagger =>\n  {\n    swagger.SwaggerDoc(\"v1\", new Info { Title = \"Product \n    APIs\", Version = \"v1\" });\n  }\n);\n```", "```cs\nnamespace Chap06_01_Test.Fake\n{\n  public class ProductData\n  {\n    public IEnumerable<ProductViewModel> GetProducts()\n    {\n      var productVm = new List<ProductViewModel>\n      {\n        new ProductViewModel\n        {\n          CategoryId = Guid.NewGuid(),\n          CategoryDescription = \"Category Description\",\n          CategoryName = \"Category Name\",\n          ProductDescription = \"Product Description\",\n          ProductId = Guid.NewGuid(),\n          ProductImage = \"Image full path\",\n          ProductName = \"Product Name\",\n          ProductPrice = 112M\n        },\n        new ProductViewModel\n        {\n          CategoryId = Guid.NewGuid(),\n          CategoryDescription = \"Category Description-01\",\n          CategoryName = \"Category Name-01\",\n          ProductDescription = \"Product Description-01\",\n          ProductId = Guid.NewGuid(),\n          ProductImage = \"Image full path\",\n          ProductName = \"Product Name-01\",\n          ProductPrice = 12M\n        }\n      };\n      return productVm;\n    }\n    public IEnumerable<Product> GetProductList()\n    {\n      return new List<Product>\n      {\n        new Product\n        {\n          Category = new Category(),\n          CategoryId = Guid.NewGuid(),\n          Description = \"Product Description-01\",\n          Id = Guid.NewGuid(),\n          Image = \"image full path\",\n          Name = \"Product Name-01\",\n          Price = 12M\n        },\n        new Product\n        {\n          Category = new Category(),\n          CategoryId = Guid.NewGuid(),\n          Description = \"Product Description-02\",\n          Id = Guid.NewGuid(),\n          Image = \"image full path\",\n          Name = \"Product Name-02\",\n          Price = 125M\n        }\n      };\n    }\n  }\n}\n```", "```cs\nnamespace Chap06_01_Test.Services\n{\n  public class ProductTests\n  {\n    [Fact]\n    public void Get_Returns_ActionResults()\n    {\n      // Arrange\n      var mockRepo = new Mock<IProductRepository>();\n      mockRepo.Setup(repo => repo.GetAll()).Returns(new\n      ProductData().GetProductList());\n      var controller = new ProductController(mockRepo.Object);\n      // Act\n      var result = controller.GetList();\n      // Assert\n      var viewResult = Assert.IsType<OkObjectResult>(result);\n      var model = \n      Assert.IsAssignableFrom<IEnumerable<ProductViewModel>>\n      (viewResult.Value);\n      Assert.NotNull(model);\n      Assert.Equal(2, model.Count());\n    }\n  }\n}\n```", "```cs\nvar server = new TestServer\n(\n  new WebHostBuilder()\n  .UseStartup<TestStartup>()\n);\n_client = server.CreateClient();\n```", "```cs\n[Fact]\npublic async Task ReturnProductList()\n{\n  // Act\n  var response = await _client.GetAsync(\"api/Product\n  /productlist\");\n  response.EnsureSuccessStatusCode();\n  var responseString = await response.Content.ReadAsStringAsync();\n  // Assert\n  Assert.NotEmpty(responseString);\n}\n```", "```cs\nnamespace Chap06_02_Test.Services\n{\n  public class ProductTest\n  {\n    public ProductTest()\n    {\n      // Arrange\n      var server = new TestServer(new WebHostBuilder()\n      .UseStartup<TestStartup>());\n      _client = server.CreateClient();\n    }\n    private readonly HttpClient _client;\n    [Fact]\n    public async Task ReturnProductList()\n    {\n      // Act\n      var response = await\n      _client.GetAsync(\"api/Product/productlist\");\n      response.EnsureSuccessStatusCode();\n      var responseString = await\n      response.Content.ReadAsStringAsync();\n      // Assert\n      Assert.NotEmpty(responseString);\n    }\n  }\n}\n```", "```cs\nnamespace Chap06_02_Test\n{\n  public class TestStartup : Startup\n  {\n    public TestStartup(IConfiguration configuration) : \n    base(configuration)\n    {  }\n    public static IConfiguration InitConfiguration()\n    {\n      var config = new ConfigurationBuilder()\n      .AddJsonFile(\"appsettings.json\")\n      .Build();\n      return config;\n    }\n    public override void ConfigureServices(\n    IServiceCollection services)\n    {\n      //mock context\n      services.AddDbContext<ProductContext>\n      (\n        o => o.UseSqlServer\n        (\n          InitConfiguration().GetConnectionString\n          (\n            \"ProductConnection\"\n          )\n        )\n      );\n      services.AddMvc();\n      services.AddScoped<IProductRepository, \n      ProductRepository>();\n    }\n    public override void Configure\n    (\n      IApplicationBuilder app, IHostingEnvironment env\n    )\n    {\n      app.UseStaticFiles();\n      app.UseMvc();\n    }\n  }\n}\n```", "```cs\n//for tests use InMemory db\nservices.AddDbContext<ProductContext>\n(\n  o => o.UseInMemoryDatabase\n  (\n    InitConfiguration().GetConnectionString\n    (\n      \"ProductConnection\"\n    )\n  )\n);\n```", "```cs\nprivate static void FakeData(DbContext context)\n{\n  var category = new Category\n  {\n    Id = ToGuid(\"A5DBF00D-2E29-4993-A0CA-7E861272C6DC\"),\n    Description = \"Technical Videos\",\n    Name = \"Videos\"\n  };\n  context.Add(category);\n  var product = new Product\n  {\n    Id = ToGuid(\"02341321-C20B-48B1-A2BE-47E67F548F0F\"),\n    CategoryId = category.Id,\n    Description = \"Microservices for .NET Core\",\n    Image = \"microservices.jpeg\",\n    Name = \"Microservices for .NET\",\n    Price = 651,\n    InStock = 5\n  };\n  context.Add(product);\n  context.SaveChanges();\n}\n```", "```cs\npublic override void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    var context = app.ApplicationServices.GetService<ProductContext>();\n    FakeData(context);\n    app.UseStaticFiles();\n    app.UseMvc();\n}\n```", "```cs\n[Fact]\npublic async Task ReturnProductList()\n{\n  // Act\n  var response = await _client.GetAsync(\"api/Product/productlist\");\n  response.EnsureSuccessStatusCode();\n  var responseString = await response.Content.ReadAsStringAsync();\n  // Assert\n  Assert.NotEmpty(responseString);\n}\n```", "```cs\npublic class ProductTest\n  {\n    public ProductTest(ITestOutputHelper output)\n    {\n      _output = output;\n    }\n    private const double ExpectedRequestTime = 1000;\n    private const int ApiLoad = 100;\n    private const string RequestUri = \n    \"http://localhost:60431/api/product/productlist\";\n    private readonly ITestOutputHelper _output;\n    private static double RequestCallTime()\n    {\n      DateTime start;\n      DateTime end;\n      using (var client = new HttpClient())\n      {\n        start = DateTime.Now;\n        var response = client.GetAsync(RequestUri).Result;\n        end = DateTime.Now\n      }\n      var actual = (end - start).TotalMilliseconds;\n      return actual;\n    }\n    [Fact]\n    public void SingleCallRequestTime()\n    {\n      var actual = RequestCallTime();\n      _output.WriteLine($\"Actual time: {ExpectedRequestTime}\n      millisecond. \n      Expected time: {actual} millisecond.\");\n      Assert.True(actual <= ExpectedRequestTime);\n    }\n    //code truncated\n}\n```"]