["```cs\n    // Boxing and Unboxing\n    int y = 3; // this is declared in the stack\n    // Boxing y in a Heap reference z\n    // If we change z, y remains the same.\n    object z = y;\n    // Unboxing y into h (the value of\n    // z is copied to the stack)\n    int h = (int)z;\n    ```", "```cs\n    static short counter = 1;\n    private void btnLaunch_Click(object sender, RoutedEventArgs e)\n    {\n      // Establish a reference to this window\n      Type windowType = this.GetType();\n      // Creates an instance of the Window\n      object objWindow = Activator.CreateInstance(windowType);\n      // cast to a MainWindow type\n      MainWindow aWindow = (MainWindow)objWindow;\n      aWindow.Title = \"Reflected Window No: \" + (++counter).ToString();\n      aWindow.Show();\n    }\n    ```", "```cs\nvoid btnLaunch_Click(object sender, RoutedEventArgs e)\n```", "```cs\nthis.btnLaunch.Click += new System.Windows.RoutedEventHandler(this.btnLaunch_Click);\n```", "```cs\npublic delegate void RoutedEventHandler(object sender, RoutedEventArgs e);\n```", "```cs\nstatic List<int> numberList;\nstatic List<int> divisibleNumbers = new List<int>();\nprivate void CheckMod2(int x)\n{\n  if (x % 2 == 0) divisibleNumbers.Add(x);\n}\nprivate void CheckMod3(int x)\n{\n  if (x % 3 == 0) divisibleNumbers.Add(x);\n}\n```", "```cs\ndelegate void DivisibleBy(int number);\nprivate void ClassicDelegateMethod()\n{\n  DivisibleBy ed = new DivisibleBy(CheckMod2);\n  // Invocation of several methods (Multicasting)\n  ed += CheckMod3;\n  // Every call to ed generates a multicast sequence\n  foreach (int x in numberList) { ed(x); }\n}\n```", "```cs\n// Generic delegate way\nnumberList = Enumerable.Range(1, 100).ToList();\nClassicDelegateMethod();\nPrintResults(\"Numbers divisible by 2 and 3\");\n```", "```cs\n// Define a generic Dictionary (the\n// comma is enough for the compiler to infer number of\n// parameters, but we didn't decide the types yet.\nType generic = typeof(Dictionary<,>);\nShowTypeData(generic);\n\n// We define an array of types for the Dictionary (Key, Value)\n// Key is of type string, and Value is of -this- type (Program)\n// Notice that types could be -in this case- of any kind\nType[] typeArgs = { typeof(string), typeof(Program) };\n\n// Now we use MakeGenericType to create a Type representing\n// the actualType generic type.\nType actualType = generic.MakeGenericType(typeArgs);\nShowTypeData(actualType);\n```", "```cs\npublic class Customer\n{\n  public string Name { get; set; }\n  public string Country { get; set; }\n  public int Balance { get; set; }\n  public static string[] Countries = { \"US\", \"UK\", \"India\", \"Canada\", \t    \"China\" };\n  public static List<Customer> customersList(int number)\n  {\n    List<Customer> list = new List<Customer>();\n    Random rnd = new Random(System.DateTime.Now.Millisecond);\n    for (int i = 1; i <= number; i++)\n    {\n      Customer c = new Customer();\n      c.Name = Path.GetRandomFileName().Replace(\".\", \"\");\n      c.Country = Countries[rnd.Next(0, 4)];\n      c.Balance = rnd.Next(0, 100000);\n      list.Add(c);\n    }\n    return list;\n  }\n}\n```", "```cs\npublic class CustomerComparer : IComparer<Customer>\n{\n  public int Compare(Customer x, Customer y)\n  {\n    // Implementation of IComparer returns an int\n    // indicating if object x is less than, equal to or\n    // greater than y.\n    if (x.Balance < y.Balance) { return -1; }\n    else if (x.Balance > y.Balance) return 1;\n    else { return 0; } // they're equal\n  }\n}\n```", "```cs\npublic class GenericCustomers\n{\n  public static void Main()\n  {\n    List<Customer> theList = Customer.customersList(25);\n    CustomerComparer cc = new CustomerComparer();\n    // Sort now uses our own definition of comparison\n    theList.Sort(cc);\n    Console.WriteLine(\" List of customers ordered by Balance\");\n    Console.WriteLine(\" \" + string.Concat(Enumerable.Repeat(\"-\", 36)));\n    foreach (var item in theList)\n    {\n      Console.WriteLine(\" Name: {0},  Country: {1}, \\t Balance: {2}\",\n      item.Name, item.Country, item.Balance);\n    }\n    Console.ReadKey();\n  }\n}\n```", "```cs\npublic interface IPersonBalance\n{\n  int Balance { get; set; }\n}\n```", "```cs\npublic class Provider : IPersonBalance\n{\n  public string ProviderName { get; set; }\n  public string ShipCountry { get; set; }\n  public int Balance { get; set; }\n\n  public static string[] Countries = { \"US\", \"Spain\", \"India\", \"France\", \"Italy\" };\n  public static List<Provider> providersList(int number)\n  {\n    List<Provider> list = new List<Provider>();\n    Random rnd = new Random(System.DateTime.Now.Millisecond);\n    for (int i = 1; i <= number; i++)\n    {\n      Provider p = new Provider();\n      p.ProviderName = Path.GetRandomFileName().Replace(\".\", \"\");\n      p.ShipCountry = Countries[rnd.Next(0, 4)];\n      p.Balance = rnd.Next(0, 100000);\n      list.Add(p);\n    }\n    return list;\n  }\n}\n```", "```cs\npublic class GenericComparer : IComparer<IPersonBalance>\n{\n  public int Compare(IPersonBalance x, IPersonBalance y)\n  {\n    if (x.Balance < y.Balance) { return -1; }\n    else if (x.Balance > y.Balance) return 1;\n    else { return 0; }\n  }\n}\n```", "```cs\npublic static void Main()\n{\n  List<Provider> providerList = Provider.providersList(25);\n  GenericComparer gc = new GenericComparer();\n  // Sort now uses our own definition of comparison\n  providerList.Sort(gc);\n  Console.WriteLine(\" List of providers ordered by Balance\");\n  Console.WriteLine(\" \" + (\"\").PadRight(36, '-'));\n  foreach (var item in providerList)\n  {\n    Console.WriteLine(\" ProviderName: {0}, S.Country: {1}, \\t Balance: {2}\",\n    item.ProviderName, item.ShipCountry, item.Balance);\n  }\n  Console.ReadKey();\n}\n```", "```cs\n// Anonymous object\nvar obj = new { Name = \"John\", Age = 35 };\n```", "```cs\n( [list of arguments] ) => { [list of sentences] }\n```", "```cs\nDivisibleBy3Or7 ed3 = x => ((x % 3 == 0) || (x % 7 == 0));\n```", "```cs\n// Method Where in generic lists\nnumberList = numberList.Where(x => ((x % 3 == 0) || (x % 7 == 0))) .ToList();\n```", "```cs\n// We can create a more complex function including\n// any number of conditions\nAction<int> MultipleConditions = n =>\n{\n  if ((n % 3 == 0) && (n % 2 == 0))\n  {\n    if (n.ToString().StartsWith(\"5\")) {\n      selectedNumbers.Add(n);\n    }\n  }\n};\nnumberList.ForEach(MultipleConditions);\n```", "```cs\nExpression<Func<int, bool>> DivBy3 = x => (x % 3) == 0;\n```", "```cs\n// Lambda defined as an expression tree.\nExpression<Func<int, bool>> xTree = num => num > 3 ;\n```", "```cs\n// Decompose the expression tree.\nParameterExpression param = (ParameterExpression)exprTree.Parameters[0];\nBinaryExpression operation = (BinaryExpression)exprTree.Body;\nParameterExpression left = (ParameterExpression)operation.Left;\nConstantExpression right = (ConstantExpression)operation.Right;\n// And print the results, just to check.\nConsole.WriteLine(\"Expression: {0} => {1} {2} {3}\",\n  param.Name, left.Name, operation.NodeType, right.Value);\n```", "```cs\nvar query = from [element] in [collection]\nwhere [condition1 | condition2 ...]\nselect [new] [element];\n```", "```cs\n// generate a few numbers\nvar numbers = Enumerable.Range(50, 200);\n// use of linq to filter\nvar selected = from n in numbers\n  where n % 3 == 0 && n % 7 == 0\n  select n;\nConsole.WriteLine(\"Numbers divisible by 3 and 7 \\n\\r\");\n// Now we use a lambda (Action) to print out results\nselected.ToList().ForEach(n => Console.WriteLine(\"Selected: {0} \", n));\n```", "```cs\nvar totalNumbers = (from n in numbers\n  where n % 3 == 0 && n % 7 == 0\n  orderby n descending\n  select n).Count();\n```", "```cs\nstring[] words = { \"Packt\", \"Publishing\", \"Editorial\", \"Books\", \"CSharp\", \"Chapter\" };\nvar wordsGrouped = from w in words\ngroup w by w[0] into groupOfWords\nselect new { FirstLetter = groupOfWords.Key, Words = groupOfWords };\nConsole.WriteLine(\" List of words grouped by starting letter\\n\\r\");\nforeach (var indGroup in wordsGrouped)\n{\n  Console.WriteLine(\" Starting with letter '{0}':\", indGroup.FirstLetter);\n  foreach (var word in indGroup.Words)\n  {\n    Console.WriteLine(\" \" + word);\n  }\n}\n```", "```cs\nvar numbersStartingBy7 = from n in numbers\nwhere n.ToString().StartsWith(\"7\")\nselect n;\n```", "```cs\nvar doubleMultiplesBeg7 = from n in selected\njoin n7 in numbersStartingBy7\non n equals n7\nselect n;\n```", "```cs\nvar proj = from n in selected\njoin n7 in numbersStartingBy7 on n equals n7\nselect new { Num = n, DivBy2 = (n % 2 == 0) ? \"Even\" : \"Odd\" };\n```", "```cs\npublic static class StringExtension\n{\n  public static string ExtendedString(this string s)\n  {\n    return \"{{ \" + s + \" }}\";\n  }\n}\n```", "```cs\nConsole.WriteLine(\"The word \" + \"evaluate\".ExtendedString() + \" is extended\");\n```"]