["```cs\n    using System;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static void TaskMethod(string name)\n    {\n      WriteLine($\"Task {name} is running on a thread id \" +\n          $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n          $\"{CurrentThread.IsThreadPoolThread}\");\n    }\n    ```", "```cs\n    var t1 = new Task(() => TaskMethod(\"Task 1\"));\n    var t2 = new Task(() => TaskMethod(\"Task 2\"));\n    t2.Start();\n    t1.Start();\n    Task.Run(() => TaskMethod(\"Task 3\"));\n    Task.Factory.StartNew(() => TaskMethod(\"Task 4\"));\n    Task.Factory.StartNew(() => TaskMethod(\"Task 5\"), TaskCreationOptions.LongRunning);\n    Sleep(TimeSpan.FromSeconds(1));\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static Task<int> CreateTask(string name)\n    {\n      return new Task<int>(() => TaskMethod(name));\n    }\n\n    static int TaskMethod(string name)\n    {\n      WriteLine($\"Task {name} is running on a thread id \" +\n         $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n         $\"{CurrentThread.IsThreadPoolThread}\");\n      Sleep(TimeSpan.FromSeconds(2));\n      return 42;\n    }\n    ```", "```cs\n    TaskMethod(\"Main Thread Task\");\n    Task<int> task = CreateTask(\"Task 1\");\n    task.Start();\n    int result = task.Result;\n    WriteLine($\"Result is: {result}\");\n\n    task = CreateTask(\"Task 2\");\n    task.RunSynchronously();\n    result = task.Result;\n    WriteLine($\"Result is: {result}\");\n\n    task = CreateTask(\"Task 3\");\n    WriteLine(task.Status);\n    task.Start();\n\n    while (!task.IsCompleted)\n    {\n      WriteLine(task.Status);\n      Sleep(TimeSpan.FromSeconds(0.5));â€©} \n\n    WriteLine(task.Status);\n    result = task.Result;\n    WriteLine($\"Result is: {result}\");\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds)\n    {\n      WriteLine(\n        $\"Task {name} is running on a thread id \" +\n        $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\");\n      Sleep(TimeSpan.FromSeconds(seconds));\n      return 42 * seconds;\n    }\n    ```", "```cs\n    var firstTask = new Task<int>(() => TaskMethod(\"First Task\", 3));\n    var secondTask = new Task<int>(() => TaskMethod(\"Second Task\", 2));\n\n    firstTask.ContinueWith(\n      t => WriteLine(\n        $\"The first answer is {t.Result}. Thread id \" +\n        $\"{CurrentThread.ManagedThreadId}, is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\"),\n      TaskContinuationOptions.OnlyOnRanToCompletion);\n\n    firstTask.Start();\n    secondTask.Start();\n\n    Sleep(TimeSpan.FromSeconds(4));\n\n    Task continuation = secondTask.ContinueWith(\n      t => WriteLine(\n        $\"The second answer is {t.Result}. Thread id \" +\n        $\"{CurrentThread.ManagedThreadId}, is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\"),\n      TaskContinuationOptions.OnlyOnRanToCompletion \n        | TaskContinuationOptions.ExecuteSynchronously);\n\n    continuation.GetAwaiter().OnCompleted(\n      () => WriteLine(\n        $\"Continuation Task Completed! Thread id \" +\n        $\"{CurrentThread.ManagedThreadId}, is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\"));\n\n    Sleep(TimeSpan.FromSeconds(2));\n    WriteLine();\n\n    firstTask = new Task<int>(() =>\n    {\n      var innerTask = Task.Factory.StartNew(() => TaskMethod(\"Second Task\", 5),TaskCreationOptions.AttachedToParent);\n\n      innerTask.ContinueWith(t => TaskMethod(\"Third Task\", 2),\n            TaskContinuationOptions.AttachedToParent);\n\n      return TaskMethod(\"First Task\", 2);\n    });\n\n    firstTask.Start();\n\n    while (!firstTask.IsCompleted)\n    {\n      WriteLine(firstTask.Status);\n      Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    WriteLine(firstTask.Status);\n\n    Sleep(TimeSpan.FromSeconds(10));\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    delegate string AsynchronousTask(string threadName);\n    delegate string IncompatibleAsynchronousTask(out int threadId);\n\n    static void Callback(IAsyncResult ar)\n    {\n      WriteLine(\"Starting a callback...\");\n      WriteLine($\"State passed to a callbak: {ar.AsyncState}\");\n      WriteLine($\"Is thread pool thread: {CurrentThread.IsThreadPoolThread}\");\n      WriteLine($\"Thread pool worker thread id: {CurrentThread.ManagedThreadId}\");\n    }\n\n    static string Test(string threadName)\n    {\n      WriteLine(\"Starting...\");\n      WriteLine($\"Is thread pool thread: {CurrentThread.IsThreadPoolThread}\");\n      Sleep(TimeSpan.FromSeconds(2));\n      CurrentThread.Name = threadName;\n      return $\"Thread name: {CurrentThread.Name}\";\n    }\n\n    static string Test(out int threadId)\n    {\n      WriteLine(\"Starting...\");\n      WriteLine($\"Is thread pool thread: {CurrentThread.IsThreadPoolThread}\");\n      Sleep(TimeSpan.FromSeconds(2));\n      threadId = CurrentThread.ManagedThreadId;\n      return $\"Thread pool worker thread id was: {threadId}\";\n    }\n    ```", "```cs\n    int threadId;\n    AsynchronousTask d = Test;\n    IncompatibleAsynchronousTask e = Test;\n\n    WriteLine(\"Option 1\");\n    Task<string> task = Task<string>.Factory.FromAsync(\n      d.BeginInvoke(\"AsyncTaskThread\", Callback, \n        \"a delegate asynchronous call\"), d.EndInvoke);\n\n    task.ContinueWith(t => WriteLine(\n        $\"Callback is finished, now running a continuation! Result: {t.Result}\"));\n\n    while (!task.IsCompleted)\n    {\n      WriteLine(task.Status);\n      Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    WriteLine(task.Status);\n    Sleep(TimeSpan.FromSeconds(1));\n\n    WriteLine(\"----------------------------------------------\");\n    WriteLine();\n    WriteLine(\"Option 2\");\n\n    task = Task<string>.Factory.FromAsync(\n      d.BeginInvoke, d.EndInvoke, \"AsyncTaskThread\", \"a delegate asynchronous call\");\n\n    task.ContinueWith(t => WriteLine(\n        $\"Task is completed, now running a continuation! Result: {t.Result}\"));\n    while (!task.IsCompleted)\n    {\n      WriteLine(task.Status);\n      Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    WriteLine(task.Status);\n    Sleep(TimeSpan.FromSeconds(1));\n\n    WriteLine(\"----------------------------------------------\");\n    WriteLine();\n    WriteLine(\"Option 3\");\n\n    IAsyncResult ar = e.BeginInvoke(out threadId, Callback, \"a delegate asynchronous call\");\n    task = Task<string>.Factory.FromAsync(ar, _ => e.EndInvoke(out threadId, ar));\n\n    task.ContinueWith(t => \n      WriteLine(\n            $\"Task is completed, now running a continuation! \" +\n            $\"Result: {t.Result}, ThreadId: {threadId}\"));\n\n    while (!task.IsCompleted)\n    {\n      WriteLine(task.Status);\n      Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    WriteLine(task.Status);\n\n    Sleep(TimeSpan.FromSeconds(1));\n    ```", "```cs\n    using System;\n    using System.ComponentModel;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds)\n    {\n      WriteLine(\n        $\"Task {name} is running on a thread id \" +\n        $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\");\n\n      Sleep(TimeSpan.FromSeconds(seconds));\n      return 42 * seconds;\n    }\n    ```", "```cs\n    var tcs = new TaskCompletionSource<int>();\n\n    var worker = new BackgroundWorker();\n    worker.DoWork += (sender, eventArgs) =>\n    {\n      eventArgs.Result = TaskMethod(\"Background worker\", 5);\n    };\n\n    worker.RunWorkerCompleted += (sender, eventArgs) =>\n    {\n      if (eventArgs.Error != null)\n      {\n        tcs.SetException(eventArgs.Error);\n      }\n      else if (eventArgs.Cancelled)\n      {\n        tcs.SetCanceled();\n      }\n      else\n      {\n        tcs.SetResult((int)eventArgs.Result);\n      }\n    };\n\n    worker.RunWorkerAsync();\n\n    int result = tcs.Task.Result;\n\n    WriteLine($\"Result is: {result}\");\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds, CancellationToken token)\n    {\n      WriteLine(\n        $\"Task {name} is running on a thread id \" +\n        $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\");\n\n      for (int i = 0; i < seconds; i ++)\n      {\n        Sleep(TimeSpan.FromSeconds(1));\n        if (token.IsCancellationRequested) return -1;\n      }\n      return 42*seconds;\n    }\n    ```", "```cs\n    var cts = new CancellationTokenSource();\n    var longTask = new Task<int>(() => TaskMethod(\"Task 1\", 10, cts.Token), cts.Token);\n    WriteLine(longTask.Status);\n    cts.Cancel();\n    WriteLine(longTask.Status);\n    WriteLine(\"First task has been cancelled before execution\");\n\n    cts = new CancellationTokenSource();\n    longTask = new Task<int>(() => TaskMethod(\"Task 2\", 10, cts.Token), cts.Token);\n    longTask.Start();\n    for (int i = 0; i < 5; i++ )\n    {\n      Sleep(TimeSpan.FromSeconds(0.5));\n      WriteLine(longTask.Status);\n    }\n    cts.Cancel();\n    for (int i = 0; i < 5; i++)\n    {\n      Sleep(TimeSpan.FromSeconds(0.5));\n      WriteLine(longTask.Status);\n    }\n\n    WriteLine($\"A task has been completed with result {longTask.Result}.\");\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds)\n    {\n      WriteLine(\n        $\"Task {name} is running on a thread id \" +\n        $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\");\n\n      Sleep(TimeSpan.FromSeconds(seconds));\n      throw new Exception(\"Boom!\");\n      return 42 * seconds;\n    }\n    ```", "```cs\n    Task<int> task;\n    try\n    {\n      task = Task.Run(() => TaskMethod(\"Task 1\", 2));\n      int result = task.Result;\n      WriteLine($\"Result: {result}\");\n    }\n    catch (Exception ex)\n    {\n      WriteLine($\"Exception caught: {ex}\");\n    }\n    WriteLine(\"----------------------------------------------\");\n    WriteLine();\n\n    try\n    {\n      task = Task.Run(() => TaskMethod(\"Task 2\", 2));\n      int result = task.GetAwaiter().GetResult();\n          WriteLine($\"Result: {result}\");\n    }\n    catch (Exception ex)\n    {\n      WriteLine($\"Exception caught: {ex}\");\n    }\n    WriteLine(\"----------------------------------------------\");\n    WriteLine();\n\n    var t1 = new Task<int>(() => TaskMethod(\"Task 3\", 3));\n    var t2 = new Task<int>(() => TaskMethod(\"Task 4\", 2));\n    var complexTask = Task.WhenAll(t1, t2);\n    var exceptionHandler = complexTask.ContinueWith(t => \n        WriteLine($\"Exception caught: {t.Exception}\"), \n        TaskContinuationOptions.OnlyOnFaulted\n      );\n    t1.Start();\n    t2.Start();\n\n    Sleep(TimeSpan.FromSeconds(5));\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds)\n    {\n      WriteLine(\n        $\"Task {name} is running on a thread id \" +\n        $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n        $\"{CurrentThread.IsThreadPoolThread}\");\n\n      Sleep(TimeSpan.FromSeconds(seconds));\n      return 42 * seconds;\n    }\n    ```", "```cs\n    var firstTask = new Task<int>(() => TaskMethod(\"First Task\", 3));\n    var secondTask = new Task<int>(() => TaskMethod(\"Second Task\", 2));\n    var whenAllTask = Task.WhenAll(firstTask, secondTask);\n\n    whenAllTask.ContinueWith(t =>\n      WriteLine($\"The first answer is {t.Result[0]}, the second is {t.Result[1]}\"),\n      TaskContinuationOptions.OnlyOnRanToCompletion);\n\n    firstTask.Start();\n    secondTask.Start();\n\n    Sleep(TimeSpan.FromSeconds(4));\n\n    var tasks = new List<Task<int>>();\n    for (int i = 1; i < 4; i++)\n    {\n      int counter = i;\n      var task = new Task<int>(() => TaskMethod($\"Task {counter}\", counter));\n      tasks.Add(task);\n      task.Start();\n    }\n\n    while (tasks.Count > 0)\n    {\n      var completedTask = Task.WhenAny(tasks).Result;\n      tasks.Remove(completedTask);\n      WriteLine($\"A task has been completed with result {completedTask.Result}.\");\n    }\n\n    Sleep(TimeSpan.FromSeconds(1));\n    ```", "```cs\n    <TextBlock Name=\"ContentTextBlock\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"44,134,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"425\"\n    Height=\"40\"/>\n    <Button Content=\"Sync\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"45,190,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"75\"\n    Click=\"ButtonSync_Click\"/>\n    <Button Content=\"Async\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"165,190,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"75\"\n    Click=\"ButtonAsync_Click\"/>\n    <Button Content=\"Async OK\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"285,190,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"75\"\n    Click=\"ButtonAsyncOK_Click\"/>\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using System.Windows;\n    using System.Windows.Input;\n    ```", "```cs\n    void ButtonSync_Click(object sender, RoutedEventArgs e)\n    {\n      ContentTextBlock.Text = string.Empty;\n      try\n      {\n        //string result = TaskMethod(\n        //  TaskScheduler.FromCurrentSynchronizationContext()).Result;\n        string result = TaskMethod().Result;\n        ContentTextBlock.Text = result;\n      }\n      catch (Exception ex)\n      {\n        ContentTextBlock.Text = ex.InnerException.Message;\n      }\n    }\n\n    void ButtonAsync_Click(object sender, RoutedEventArgs e)\n    {\n      ContentTextBlock.Text = string.Empty;\n      Mouse.OverrideCursor = Cursors.Wait;\n      Task<string> task = TaskMethod();\n      task.ContinueWith(t => \n        {\n          ContentTextBlock.Text = t.Exception.InnerException.Message;\n          Mouse.OverrideCursor = null;\n        }, \n        CancellationToken.None,\n        TaskContinuationOptions.OnlyOnFaulted,\n        TaskScheduler.FromCurrentSynchronizationContext());\n    }\n\n    void ButtonAsyncOK_Click(object sender, RoutedEventArgs e)\n    {\n      ContentTextBlock.Text = string.Empty;\n      Mouse.OverrideCursor = Cursors.Wait;\n      Task<string> task = TaskMethod(\n        TaskScheduler.FromCurrentSynchronizationContext());\n\n      task.ContinueWith(t => Mouse.OverrideCursor = null,\n        CancellationToken.None,\n        TaskContinuationOptions.None,\n        TaskScheduler.FromCurrentSynchronizationContext());\n    }\n\n    Task<string> TaskMethod()\n    {\n      return TaskMethod(TaskScheduler.Default);\n    }\n\n    Task<string> TaskMethod(TaskScheduler scheduler)\n    {\n      Task delay = Task.Delay(TimeSpan.FromSeconds(5));\n\n      return delay.ContinueWith(t =>\n      {\n        string str =\n          \"Task is running on a thread id \" +\n          $\"{CurrentThread.ManagedThreadId}. Is thread pool thread: \" +\n          $\"{CurrentThread.IsThreadPoolThread}\";\n\n        ContentTextBlock.Text = str;\n        return str;\n      }, scheduler);\n    }\n    ```"]