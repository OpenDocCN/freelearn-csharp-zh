["```cs\npublic  IMvxCommand ParkSelected { get; protected set; }\n```", "```cs\nprotected void ParkSelectedExec(NationalPark park)\n{\n   . . .// logic goes here\n}\n```", "```cs\nParkSelected =\n    new MvxCommand<NationalPark> (ParkSelectedExec);\n```", "```cs\npublic class NationalPark : INotifyPropertyChanged\n{\n  public event PropertyChangedEventHandler\n     PropertyChanged;\n  // rather than use \"… code\" it is safer to use\n  // the comment form \n  string _name;\n  public string Name\n  {\n    get { return _name; }\n    set\n    {\n        if (value.Equals (_name,\n            StringComparison.Ordinal))\n        {\n      // Nothing to do - the value hasn't changed;\n      return;\n        }\n        _name = value;\n        OnPropertyChanged();\n    }\n  }\n  . . . \n  void OnPropertyChanged(\n    [CallerMemberName] string propertyName = null)\n  {\n      var handler = PropertyChanged;\n  if (handler != null)\n  {\n      handler(this,\n            new PropertyChangedEventArgs(propertyName));\n  }\n  }\n}\n```", "```cs\n<TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/descrTextView\"\n    local:MvxBind=\"Text Park.Description\" />\n```", "```cs\nthis.CreateBinding (this.descriptionLabel).\n    To ((DetailViewModel vm) => vm.Park.Description).\n    Apply ();\n```", "```cs\nShowViewModel<DetailViewModel>();\n```", "```cs\npublic class DetailParams\n{\n    public int ParkId { get; set; }\n}\n\n// using the parameters class\nShowViewModel<DetailViewModel>(\nnew DetailViewParam() { ParkId = 0 });\n```", "```cs\npublic class DetailViewModel : MvxViewModel\n{\n    . . .\n    public void Init(DetailViewParams parameters)\n    {\n        // use the parameters here . . .\n    }\n}\n```", "```cs\nRegisterAppStart<ViewModels.MasterViewModel>();\n```", "```cs\nprotected override IMvxApplication CreateApp()\n{\n    return new Core.App();\n}\n```", "```cs\n[Activity(\n  Label=\"NationalParks.Droid\", MainLauncher = true,\n  Icon=\"@drawable/icon\", Theme=\"@style/Theme.Splash\",\n  NoHistory=true,\n  ScreenOrientation = ScreenOrientation.Portrait)]\npublic class SplashScreen : MvxSplashScreenActivity\n{\n    public SplashScreen():base(Resource.Layout.SplashScreen)\n    {\n    }\n}\n```", "```cs\npublic override bool FinishedLaunching (\n    UIApplication app, NSDictionary options)\n{\n    _window = new UIWindow (UIScreen.MainScreen.Bounds);\n\n    var setup = new Setup(this, _window);\n    setup.Initialize();\n    var startup = Mvx.Resolve<IMvxAppStart>();\n    startup.Start();\n\n    _window.MakeKeyAndVisible ();\n\n    return true;\n}\n```", "```cs\n    public class NationalPark : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler\n            PropertyChanged;\n        . . .\n    }\n    ```", "```cs\n    void OnPropertyChanged(\n        [CallerMemberName] string propertyName = null)\n    {\n        var handler = PropertyChanged;\n        if (handler != null)\n        {\n            handler(this,\n                new PropertyChangedEventArgs(propertyName));\n        }\n    }\n    ```", "```cs\n    string _name;\n    public string Name\n    {\n      get { return _name; }\n      set\n      {\n        if (value.Equals (_name, StringComparison.Ordinal))\n        {\n          // Nothing to do - the value hasn't changed;\n      return;\n        }\n        _name = value;\n        OnPropertyChanged();\n      }\n    }\n    ```", "```cs\n    . . .\n    using Cirrious.CrossCore.Platform;\n    using Cirrious.MvvmCross.ViewModels;\n    . . .\n    namespace NationalParks.Core.ViewModels\n    {\n      public class MasterViewModel : MvxViewModel\n      {\n             . . .\n       }\n    }\n    ```", "```cs\n    private List<NationalPark> _parks;\n    public List<NationalPark> Parks\n    {\n        get { return _parks; }\n        set { _parks = value;\n              RaisePropertyChanged(() => Parks);\n        }\n     }\n    ```", "```cs\n    . . .\n    using NationalParks.PortableData;\n    . . .\n    public async override void Start ()\n    {\n        base.Start ();\n        await NationalParksData.Instance.Load ();\n        Parks = new List<NationalPark> (\n            NationalParksData.Instance.Parks);\n    }\n    ```", "```cs\n    RegisterAppStart<ViewModels.MasterViewModel>();\n    ```", "```cs\n    <Mvx.MvxListView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/parksListView\" />\n    ```", "```cs\n        . . .\n        android:id=\"@+id/parksListView\"\n        local:MvxBind=\"ItemsSource Parks\" />\n    ```", "```cs\n    local:MvxItemTemplate=\"@layout/nationalparkitem\"\n    ```", "```cs\n    <LinearLayout \n\n        android:orientation=\"vertical\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\">\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"40sp\"/>\n        <TextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"20sp\"/>\n    </LinearLayout>\n    ```", "```cs\n    . . .\n            local:MvxBind=\"Text Name\" />\n    . . .\n            local:MvxBind=\"Text Description\" />\n    . . .\n    ```", "```cs\n    using Cirrious.MvvmCross.Droid.Views;\n    using NationalParks.Core.ViewModels;\n    . . .\n    namespace NationalParks.Droid.Views\n    {\n        [Activity(Label = \"Parks\")]\n        public class MasterView : MvxActivity\n        {\n            . . .\n        }\n    }\n    ```", "```cs\n    protected override IMvxApplication CreateApp()\n    {\n     NationalParksData.Instance.FileHandler =\n     new FileHandler ();\n     NationalParksData.Instance.DataDir =\n     System.Environment.GetFolderPath(\n     System.Environment.SpecialFolder.MyDocuments);\n     return new Core.App();\n    }\n\n    ```", "```cs\n    protected NationalPark _park;\n    public NationalPark Park\n    { \n        get { return _park; }\n        set { _park = value;\n              RaisePropertyChanged(() => Park);\n         }\n    }\n    ```", "```cs\n    public class DetailViewModel : MvxViewModel\n    {\n        public class Parameters\n        {\n            public string ParkId { get; set; }\n        }\n        . . .\n    ```", "```cs\n    public void Init(Parameters parameters)\n    {\n        Park = NationalParksData.Instance.Parks.\n            FirstOrDefault(x => x.Id == parameters.ParkId);\n    }\n    ```", "```cs\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/nameTextView\"\n        local:MvxBind=\"Text Park.Name\" />\n    ```", "```cs\n    protected IMvxCommand ParkSelected { get; protected set; }\n    ```", "```cs\n    protected void ParkSelectedExec(NationalPark park)\n    {\n        ShowViewModel<DetailViewModel> (\n            new DetailViewModel.Parameters ()\n                { ParkId = park.Id });\n    }\n    ```", "```cs\n    ParkClicked =\n        new MvxCommand<NationalPark> (ParkSelectedExec);\n    ```", "```cs\n    local:MvxBind=\"ItemsSource Parks; ItemClick ParkClicked\"\n    ```", "```cs\n    public void Init(Parameters parameters)\n    {\n        if (string.IsNullOrEmpty (parameters.ParkId))\n            Park = new NationalPark ();\n        else\n            Park =\n                NationalParksData.Instance.\n                Parks.FirstOrDefault(\n                x => x.Id == parameters.ParkId);\n    }\n    ```", "```cs\n    protected IMvxCommand NewParkClicked { get; set; }\n    protected void NewParkClickedExec()\n    {\n      ShowViewModel<EditViewModel> ();\n    }\n    ```", "```cs\n    case Resource.Id.actionNew:\n        ((MasterViewModel)ViewModel).\n            NewParkClicked.Execute ();\n        return true; \n    ```", "```cs\n    protected IMvxCommand EditPark { get; protected set;}\n    protected void EditParkHandler()\n    {\n        ShowViewModel<EditViewModel> (\n            new EditViewModel.Parameters ()\n                { ParkId = _park.Id });\n    }\n    ```", "```cs\n    EditPark =\n        new MvxCommand<NationalPark> (EditParkHandler);\n    ```", "```cs\n    case Resource.Id.actionEdit:\n        ((DetailViewModel)ViewModel).EditPark.Execute ();\n        return true;\n    ```", "```cs\n    // ios7 layout\n    if (RespondsToSelector(new\n        Selector(\"edgesForExtendedLayout\")))\n        EdgesForExtendedLayout = UIRectEdge.None;\n    ```", "```cs\n    MvxStandardTableViewSource _source;\n    . . .\n    _source = new MvxStandardTableViewSource(\n        parksTableView,\n        UITableViewCellStyle.Subtitle,\n        new NSString(\"cell\"),\n        \"TitleText Name; DetailText Description\",\n         0);\n    parksTableView.Source = _source;\n    ```", "```cs\n    var set = this.CreateBindingSet<MasterView,\n        MasterViewModel>();\n    set.Bind (_source).To (vm => vm.Parks);\n    set.Apply();\n    ```", "```cs\n    this.CreateBinding (this.nameLabel).\n        To ((DetailViewModel vm) => vm.Park.Name).Apply ();\n    this.CreateBinding (this.descriptionLabel).\n        To ((DetailViewModel vm) => vm.Park.Description).\n            Apply ();\n    this.CreateBinding (this.stateLabel).\n        To ((DetailViewModel vm) => vm.Park.State).Apply ();\n    this.CreateBinding (this.countryLabel).\n        To ((DetailViewModel vm) => vm.Park.Country).\n            Apply ();\n    this.CreateBinding (this.latLabel).\n        To ((DetailViewModel vm) => vm.Park.Latitude).\n            Apply ();\n    this.CreateBinding (this.lonLabel).\n        To ((DetailViewModel vm) => vm.Park.Longitude).\n            Apply ();\n    ```", "```cs\n    . . .\n        _source.SelectedItemChanged += ParkSelected;\n    . . .\n    protected void ParkSelected(object sender, EventArgs e)\n    {\n        . . .\n    }\n    ```", "```cs\n    ((MasterViewModel)ViewModel).ParkSelected.Execute (\n            (NationalPark)_source.SelectedItem);\n    ```", "```cs\n    protected void DoneClicked (object sender, EventArgs e)\n    {\n        ((EditViewModel)ViewModel).Done.Execute();\n    }\n    ```", "```cs\n    NavigationItem.SetRightBarButtonItem(\n        new UIBarButtonItem(UIBarButtonSystemItem.Done,\n            DoneClicked), true);  \n    ```", "```cs\n    protected void NewParkClicked(object sender,\n            EventArgs e)\n    {\n        ((MasterViewModel)ViewModel).\n                NewParkClicked.Execute ();\n    }\n    ```", "```cs\n    NavigationItem.SetRightBarButtonItem(\n        new UIBarButtonItem(UIBarButtonSystemItem.Add,\n            NewParkClicked), true);\n    ```", "```cs\n    protected void EditParkClicked (object sender,\n        EventArgs e)\n    {\n        ((DetailViewModel)ViewModel).EditPark.Execute ();\n    }\n    ```", "```cs\n    NavigationItem.SetRightBarButtonItem(\n        new UIBarButtonItem(UIBarButtonSystemItem.Edit,\n            EditParkClicked), true);\n    ```", "```cs\n    public override void ViewDidAppear (bool animated)\n    {\n        base.ViewDidAppear (animated);\n        parksTableView.ReloadData();\n    }\n    ```"]