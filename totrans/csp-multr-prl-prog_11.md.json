["```cs\n        using System.Threading;\n        using System.IO;\n    ```", "```cs\n    public static void Main()\n            {\n                byte[] FileData = new byte[1000];\n\n                FileStream FS = new FileStream(\"c:\\\\projects\\\\InputData.txt\", FileMode.Open, FileAccess.Read,  FileShare.Read, 1024, FileOptions.Asynchronous);\n\n                Console.WriteLine(\"To start async read press return.\");\n                Console.ReadLine();\n\n                IAsyncResult result = FS.BeginRead(FileData, 0, FileData.Length, null, null);\n\n                // Work being done while we wait on the async //read.\n                Console.WriteLine(\"\\r\\n\");\n                Console.WriteLine(\"Doing Some other work here. \\r\\n\");\n                Console.WriteLine(\"\\r\\n\");\n\n                //Calling EndRead will block the main thread //until the async work has finished.\n                int num = FS.EndRead(result);\n\n                FS.Close();\n\n                Console.WriteLine(\"Read {0}  bytes from the file. \\r\\n\", num);\n                Console.WriteLine(\"Is the async read completed - {0}. \\r\\n\", result.IsCompleted.ToString());\n                Console.WriteLine(BitConverter.ToString(FileData));\n\n                Console.ReadLine();\n       }\n    ```", "```cs\npublic override IAsyncResult BeginRead(\n   byte[] array,\n   int offset,\n   int numBytes,\n   AsyncCallback userCallback,\n   Object stateObject\n)\n```", "```cs\npublic override int EndRead(\n   IAsyncResult asyncResult\n)\n```", "```cs\nFileStream FS = new FileStream(\"c:\\\\projects\\\\InputData.txt\", FileMode.Open, FileAccess.Read,\n            FileShare.Read, 1024, FileOptions.Asynchronous);\n```", "```cs\n            IAsyncResult result = FS.BeginRead(FileData, 0, FileData.Length, null, null);\n```", "```cs\n            // Work being done while we wait on the async read.\n            Console.WriteLine(\"\\r\\n\");\n            Console.WriteLine(\"Doing Some other work here. \\r\\n\");\n            Console.WriteLine(\"\\r\\n\");\n```", "```cs\n            //Calling EndRead will block the main thread until the async work has finished.\n            int num = FS.EndRead(result);\n```", "```cs\n            Console.WriteLine(\"Read {0}  bytes from the file. \\r\\n\", num);\n            Console.WriteLine(\"Is the async read completed - {0}. \\r\\n\", result.IsCompleted.ToString());\n```", "```cs\npublic override IAsyncResult BeginRead(\n   byte[] array,\n   int offset,\n   int numBytes,\n   AsyncCallback userCallback,\n   Object stateObject\n)\n```", "```cs\n              using System.Threading;\n              using System.IO;\n    ```", "```cs\n    public static void Main()\n            {\n\n                FileStream FS = new FileStream(\"c:\\\\projects\\\\InputData.txt\", FileMode.Open, FileAccess.Read,\n                FileShare.Read, 1024, FileOptions.Asynchronous);\n\n                Console.WriteLine(\"To start async read press return.\");\n                Console.ReadLine();\n\n                IAsyncResult result = FS.BeginRead(FileData, 0, FileData.Length, ReadComplete, FS);\n\n                // Work being done while we wait on the async //read.\n                Console.WriteLine(\"\\r\\n\");\n                Console.WriteLine(\"Doing Some other work here. \\r\\n\");\n                Console.WriteLine(\"\\r\\n\");\n\n                Console.ReadLine();\n            }\n    ```", "```cs\n             private static byte[] FileData = new byte[1000];\n    ```", "```cs\n    private static void ReadComplete(IAsyncResult AResult)\n            {\n                // Write out the id of the thread that is //performing the read.\n                Console.WriteLine(\"The read operation is being done on thread id: {0}.\",\n                   Thread.CurrentThread.ManagedThreadId);\n\n                // Get the FileStream out of the IAsyncResult object.\n                FileStream FS = (FileStream)AResult.AsyncState;\n\n                // Get the results from the read operation.\n                int num = FS.EndRead(AResult);\n\n                // Make sure to close the FileStream.\n                FS.Close();\n\n                //Now, write out the results.\n                Console.WriteLine(\"Read {0}  bytes from the file. \\r\\n\", num);\n                Console.WriteLine(\"Is the async read completed - {0}. \\r\\n\", AResult.IsCompleted.ToString());\n                Console.WriteLine(BitConverter.ToString(FileData));\n           }\n    ```", "```cs\n        public static void Main()\n        {\n\n            FileStream FS = new FileStream(\"c:\\\\projects\\\\InputData.txt\", FileMode.Open, FileAccess.Read,\n            FileShare.Read, 1024, FileOptions.Asynchronous);\n\n            Console.WriteLine(\"To start async read press return.\");\n            Console.ReadLine();\n\n            IAsyncResult result = FS.BeginRead(FileData, 0, FileData.Length, ReadComplete, FS);\n\n            // Work being done while we wait on the async read.\n            Console.WriteLine(\"\\r\\n\");\n            Console.WriteLine(\"Doing Some other work here. \\r\\n\");\n            Console.WriteLine(\"\\r\\n\");\n\n            Console.ReadLine();\n        }\n```", "```cs\nIAsyncResult result = FS.BeginRead(FileData, 0, FileData.Length, ReadComplete, FS);\n```", "```cs\n        private static void ReadComplete(IAsyncResult AResult)\n        {\n            // Write out the id of the thread that is performing the read.\n            Console.WriteLine(\"The read operation is being done on thread id: {0}.\",\n               Thread.CurrentThread.ManagedThreadId);\n\n            // Get the FileStream out of the IAsyncResult object.\n            FileStream FS = (FileStream)AResult.AsyncState;\n\n            // Get the results from the read operation.\n            int num = FS.EndRead(AResult);\n\n            // Make sure to close the FileStream.\n            FS.Close();\n\n            //Now, write out the results.\n            Console.WriteLine(\"Read {0}  bytes from the file. \\r\\n\", num);\n            Console.WriteLine(\"Is the async read completed - {0}. \\r\\n\", AResult.IsCompleted.ToString());\n            Console.WriteLine(BitConverter.ToString(FileData));\n        }\n```", "```cs\nFileStream FS = (FileStream)AResult.AsyncState;\n```", "```cs\nint num = FS.EndRead(AResult);\n```", "```cs\n            Console.WriteLine(\"Read {0}  bytes from the file. \\r\\n\", num);\n            Console.WriteLine(\"Is the async read completed - {0}. \\r\\n\", AResult.IsCompleted.ToString());\n            Console.WriteLine(BitConverter.ToString(FileData));\n```", "```cs\n              using System.Threading;\n              using System.IO;\n    ```", "```cs\n    static void Main()\n            {\n                Console.WriteLine(\"The ID of the Main method: {0}. \\r\\n\",\n                    Thread.CurrentThread.ManagedThreadId);\n\n                //Wait on the user to begin the reading of the //file.\n                Console.ReadLine();\n\n                // Create task, start it, and wait for it to //finish.\n                Task task = new Task(ProcessFileAsync);\n                task.Start();\n                task.Wait();\n\n                //Wait for a return before exiting.\n                Console.ReadLine();\n           }\n    ```", "```cs\n    static async void ProcessFileAsync()\n            {\n                // Write out the id of the thread of the task //that will call the async method to read the file.\n                Console.WriteLine(\"The thread id of the ProcessFileAsync method: {0}. \\r\\n\",\n                   Thread.CurrentThread.ManagedThreadId);\n\n                // Start the HandleFile method.\n                Task<String> task = ReadFileAsync(\"C:\\\\projects\\\\InputData.txt\");\n\n                // Perform some other work.\n                Console.WriteLine(\"Do some other work. \\r\\n\");\n\n                Console.WriteLine(\"Proceed with waiting on the read to complete. \\r\\n\");\n                Console.ReadLine();\n\n                // Wait for the task to finish reading the //file.\n                String results = await task;\n                Console.WriteLine(\"Number of characters read are: {0}. \\r\\n\", results.Length);\n\n                Console.WriteLine(\"The file contents are: {0}. \\r\\n\", results);\n          }\n    ```", "```cs\n    static async Task<String> ReadFileAsync(string file)\n            {\n                // Write out the id of the thread that is //performing the read.\n                Console.WriteLine(\"The thread id of the ReadFileAsync method: {0}. \\r\\n\",\n                   Thread.CurrentThread.ManagedThreadId);\n\n                Console.WriteLine(\"Begin Reading file asynchronously. \\r\\n\");\n\n                // Read the specified file.\n                String DataRead = \"\";\n                using (StreamReader reader = new StreamReader(file))\n                {\n                    string character = await reader.ReadToEndAsync();\n\n                    //Build string of data read.\n                    DataRead = DataRead + character;\n\n                    //Slow down the process.\n                    System.Threading.Thread.Sleep(10000);\n\n                }\n\n                Console.WriteLine(\"Done Reading File asynchronously. \\r\\n\");\n                return DataRead;\n          }\n    ```", "```cs\n        static void Main()\n        {\n            Console.WriteLine(\"The of ID the Main method: {0}. \\r\\n\",\n                Thread.CurrentThread.ManagedThreadId);\n\n            //Wait on the user to begin the reading of the file.\n            Console.ReadLine();\n\n            // Create task, start it, and wait for it to finish.\n            Task task = new Task(ProcessFileAsync);\n            task.Start();\n            task.Wait();\n\n            //Wait for a return before exiting.\n            Console.ReadLine();\n        }\n```", "```cs\n        static async void ProcessFileAsync()\n        {\n            // Write out the id of the thread of the task that will call the async method to read the file.\n            Console.WriteLine(\"The thread id of the ProcessFileAsync method: {0}. \\r\\n\",\n               Thread.CurrentThread.ManagedThreadId);\n\n            // Start the HandleFile method.\n            Task<String> task = ReadFileAsync(\"C:\\\\projects\\\\InputData.txt\");\n\n            // Perform some other work.\n            Console.WriteLine(\"Do some other work. \\r\\n\");\n\n            Console.WriteLine(\"Proceed with waiting on the read to complete. \\r\\n\");\n            Console.ReadLine();\n\n            // Wait for the task to finish reading the file.\n            String results = await task;\n            Console.WriteLine(\"Number of characters read are: {0}. \\r\\n\", results.Length);\n\n            Console.WriteLine(\"The file contents are: {0}. \\r\\n\", results);\n        }\n```", "```cs\nTask<String> task = ReadFileAsync(\"C:\\\\projects\\\\InputData.txt\");\n```", "```cs\nString results = await task;\n```", "```cs\n        static async Task<String> ReadFileAsync(string file)\n        {\n            // Write out the id of the thread that is performing the read.\n            Console.WriteLine(\"The thread id of the ReadFileAsync method: {0}. \\r\\n\",\n               Thread.CurrentThread.ManagedThreadId);\n\n            Console.WriteLine(\"Begin Reading file asynchronously. \\r\\n\");\n\n            // Read the specified file.\n            String DataRead = \"\";\n            using (StreamReader reader = new StreamReader(file))\n            {\n                string character = await reader.ReadToEndAsync();\n\n                //Build string of data read.\n                DataRead = DataRead + character;\n\n                //Slow down the process.\n                System.Threading.Thread.Sleep(10000);\n\n            }\n\n            Console.WriteLine(\"Done Reading File asynchronously. \\r\\n\");\n            return DataRead;\n        }\n```", "```cs\nstring character = await reader.ReadToEndAsync();\n```", "```cs\n            Console.WriteLine(\"Proceed with waiting on the read to complete. \\r\\n\");\n            Console.ReadLine();\nConsole.WriteLine(\"Done Reading File asynchronously. \\r\\n\");\n```"]