- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Integration with the Data Access Layer
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与数据访问层的集成
- en: In this chapter, we will learn about some basic ways to add a data access layer
    to the minimal APIs in .NET 6.0\. We will see how we can use some topics covered
    previously in the book to access data with **Entity Framework** (**EF**) and then
    with Dapper. These are two ways to access a database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习一些基本方法，将这些方法添加到.NET 6.0中最小API的数据访问层。我们将看到如何使用本书中之前覆盖的一些主题，使用**Entity
    Framework**（**EF**）和Dapper来访问数据。这是访问数据库的两种方式。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using Entity Framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Entity Framework
- en: Using Dapper
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Dapper
- en: By the end of this chapter, you will be able to use EF from scratch in a minimal
    API project, and use Dapper for the same goal. You will also be able to tell when
    one approach is better than the other in a project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够在最小API项目中从头开始使用EF，并使用Dapper达到相同的目的。你还将能够判断在项目中哪种方法比另一种方法更好。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, you will need to create an ASP.NET Core
    6.0 Web API application. You can use either of the following options:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，你需要创建一个ASP.NET Core 6.0 Web API应用程序。你可以选择以下任一选项：
- en: Click on the **New Project** option in the **File** menu of Visual Studio 2022,
    then choose the **ASP.NET Core Web API** template, select a name and the working
    directory in the wizard, and be sure to uncheck the **Use controllers** option
    in the next step.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022的**文件**菜单中点击**新建项目**选项，然后选择**ASP.NET Core Web API**模板，在向导中选择名称和工作目录，并确保在下一步中取消选中**使用控制器**选项。
- en: 'Open your console, shell, or Bash terminal, and change to your working directory.
    Use the following command to create a new Web API application:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开你的控制台、shell或Bash终端，切换到你的工作目录。使用以下命令创建一个新的Web API应用程序：
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking on the project file
    or, in Visual Studio Code, type the following command in the already open console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件或在Visual Studio Code中输入以下命令打开项目：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, you can safely remove all the code related to the `WeatherForecast`
    sample, as we don’t need it for this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以安全地删除与`WeatherForecast`示例相关的所有代码，因为本章我们不需要它。
- en: All the code samples in this chapter can be found in the GitHub repository for
    this book at [https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter07](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter07).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的GitHub仓库中找到，网址为[https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter07](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter07)。
- en: Using Entity Framework
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Entity Framework
- en: We can absolutely say that if we are building an API, it is very likely that
    we will interact with data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以绝对地说，如果我们正在构建一个API，我们很可能需要与数据交互。
- en: In addition, this data most probably needs to be persisted after the application
    restarts or after other events, such as a new deployment of the application. There
    are many options for persisting data in .NET applications, but EF is the most
    user-friendly and common solution for a lot of scenarios.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些数据很可能需要在应用程序重启或其他事件（如应用程序的新部署）后持久化。在.NET应用程序中持久化数据有许多选项，但EF对于许多场景来说是最用户友好的和最常用的解决方案。
- en: '**Entity Framework Core** (**EF Core**) is an extensible, open source, and
    cross-platform data access library for .NET applications. It enables developers
    to work with the database by using .NET objects directly and removes, in most
    cases, the need to know how to write the data access code directly in the database.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Entity Framework Core**（**EF Core**）是一个可扩展的、开源的、跨平台的数据访问库，用于.NET应用程序。它使开发者能够通过直接使用.NET对象与数据库交互，并在大多数情况下消除了直接在数据库中编写数据访问代码的需要。'
- en: On top of this, EF Core supports a lot of databases, including SQLite, MySQL,
    Oracle, Microsoft SQL Server, and PostgreSQL.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，EF Core支持许多数据库，包括SQLite、MySQL、Oracle、Microsoft SQL Server和PostgreSQL。
- en: In addition, it supports an in-memory database that helps to write tests for
    our applications or to make the development cycle easier because you don’t need
    a real database up and running.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它支持内存数据库，这有助于编写我们应用程序的测试或使开发周期更容易，因为你不需要一个真实数据库运行起来。
- en: In the next section, we will see how to set up a project for using EF and its
    main features.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何设置使用EF的项目及其主要功能。
- en: Setting up the project
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'From the project root, create an `Icecream.cs` class and give it the following
    content:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目根目录创建一个 `Icecream.cs` 类，并给它以下内容：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `Icecream` class is an object that represents an ice cream in our project.
    This class should be called a data model, and we will use this object in the next
    sections of this chapter to map it to a database table.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Icecream` 类是我们项目中代表冰淇淋的对象。这个类应该被称为数据模型，我们将在本章的下一部分中使用这个对象将其映射到数据库表。'
- en: Now it’s time to add the EF Core NuGet reference to the project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将 EF Core NuGet 引用到项目中了。
- en: 'In order to do that, you can use one of the following methods:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，你可以使用以下方法之一：
- en: 'In a new terminal window, enter the following code to add the EF Core `InMemory`
    package:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口中，输入以下代码以添加 EF Core `InMemory` 包：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you would like to use Visual Studio 2022 to add the reference, right-click
    on `Microsoft.EntityFrameworkCore.InMemory` and install the package.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要使用 Visual Studio 2022 来添加引用，右键单击 `Microsoft.EntityFrameworkCore.InMemory`
    并安装包。
- en: In the next section, we will be adding EF Core to our project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向项目中添加 EF Core。
- en: Adding EF Core to the project
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向项目中添加 EF Core
- en: In order to store the ice cream objects in the database, we need to set up EF
    Core in our project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将冰淇淋对象存储在数据库中，我们需要在我们的项目中设置 EF Core。
- en: 'To set up an in-memory database, add the following code to the bottom of the
    `Program.cs` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置内存数据库，将以下代码添加到 `Program.cs` 文件底部：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`DbContext` object represents a connection to the database, and it’s used to
    save and query instances of entities in the database.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbContext` 对象代表与数据库的连接，并用于在数据库中保存和查询实体的实例。'
- en: The `DbSet` represents the instances of the entities, and they will be converted
    into a real table in the database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbSet` 代表实体的实例，它们将被转换为数据库中的实际表。'
- en: In this case, we will have just one table in the database, called `Icecreams`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将只有一个名为 `Icecreams` 的表。
- en: 'In `Program.cs`, after the builder initialization, add the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在初始化构建器之后，添加以下代码：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we are ready to add some API endpoints to start interacting with the database.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好添加一些 API 端点以开始与数据库交互。
- en: Adding endpoints to the project
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向项目中添加端点
- en: 'Let’s add the code to create a new item in the `icecreams` list. In `Program.cs`,
    add the following code before the `app.Run()` line of code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `Program.cs` 中添加创建 `icecreams` 列表中新项目的代码。在 `app.Run()` 代码行之前添加以下代码：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first parameter of the `MapPost` function is the DbContext. By default,
    the minimal API architecture uses dependency injection to share the instances
    of the DbContext.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapPost` 函数的第一个参数是 DbContext。默认情况下，最小 API 架构使用依赖注入来共享 DbContext 的实例。'
- en: Dependency injection
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入
- en: If you want to know more about dependency injection, go to [*Chapter 4*](B17902_04.xhtml#_idTextAnchor061)*,
    Dependency Injection in a Minimal API Project*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于依赖注入的信息，请参阅[*第 4 章*](B17902_04.xhtml#_idTextAnchor061)*，最小 API 项目中的依赖注入。
- en: In order to save an item into the database, we use the `AddSync` method directly
    from the entity that represents the object.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将项目保存到数据库中，我们直接从表示对象的实体中使用 `AddSync` 方法。
- en: To persist the new item in the database, we need to call the `SaveChangesAsync()`
    method, which is responsible for saving all the changes that happen to the database
    before the last call to `SaveChangesAsync()`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将新项目持久化到数据库中，我们需要调用 `SaveChangesAsync()` 方法，该方法负责在最后一次调用 `SaveChangesAsync()`
    之前保存数据库中发生的所有更改。
- en: In a very similar way, we can add the endpoint to retrieve all the items in
    the `icecreams` database.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以非常相似的方式，我们可以添加端点以检索 `icecreams` 数据库中的所有项目。
- en: 'After the code to add an ice cream, we can add the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加冰淇淋的代码之后，我们可以添加以下代码：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Also, in this case, the DbContext is available as a parameter and we can retrieve
    all the items in the database directly from the entities in the DbContext.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在这种情况下，DbContext 作为参数可用，我们可以直接从 DbContext 中的实体检索数据库中的所有项目。
- en: With the `ToListAsync()` method, the application loads all the entities in the
    database and sends them back as the endpoint result.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ToListAsync()` 方法，应用程序将加载数据库中的所有实体并将它们作为端点结果发送回去。
- en: Make sure you have saved all your changes in the project and run the app.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经保存了项目中的所有更改并运行了应用程序。
- en: 'A new browser window will open, and you can navigate to the `/swagger` URL:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将打开一个新的浏览器窗口，你可以导航到 `/swagger` URL：
- en: '![Figure 7.1 – Swagger browser window ](img/Figure_7.01_B17902.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – Swagger 浏览器窗口](img/Figure_7.01_B17902.jpg)'
- en: Figure 7.1 – Swagger browser window
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Swagger浏览器窗口
- en: Select the **POST/icecreams** button, followed by **Try it out**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**POST/icecreams**按钮，然后点击**尝试操作**。
- en: 'Replace the request body content with the following JSON:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将请求体内容替换为以下JSON：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Click on **Execute**:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**执行**：
- en: '![Figure 7.2 – Swagger response ](img/Figure_7.02_B17902.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – Swagger响应](img/Figure_7.02_B17902.jpg)'
- en: Figure 7.2 – Swagger response
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – Swagger响应
- en: Now we have at least one item in the database, and we can try the other endpoint
    to retrieve all the items in the database.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们数据库中至少有一个条目，我们可以尝试其他端点来检索数据库中的所有条目。
- en: Scroll down the page a little bit and select **GET/icecreams**, followed by
    **Try it out** and then **Execute**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将页面向下滚动一点，然后选择**GET/icecreams**，接着点击**尝试操作**，然后**执行**。
- en: You will see the list with one item under **Response Body**.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在**响应体**下看到包含一个条目的列表。
- en: 'Let’s see how to finalize this first demo by adding the other CRUD operations
    to our endpoints:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过向我们的端点添加其他CRUD操作来最终完成这个第一个演示。
- en: 'To get an item by ID, add the following code under the `app.MapGet` route you
    created earlier:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过ID获取条目，请将以下代码添加到您之前创建的`app.MapGet`路由下：
- en: '[PRE9]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To check this out, you can launch the application again and use the Swagger
    UI as before.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这一点，你可以再次启动应用程序，并像以前一样使用Swagger UI。
- en: Next, add an item in the database by performing a post call (as in the previous
    section).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过执行一个post调用（如前节所述）在数据库中添加一个条目。
- en: Click **GET/icecreams/{id)** followed by **Try it out**.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**GET/icecreams/{id}**，然后点击**尝试操作**。
- en: Insert the value `1` in the `id` parameter field and then click on **Execute**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`id`参数字段中插入值`1`，然后点击**执行**。
- en: You will see the item in the **Response Body** section.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将在**响应体**部分看到条目。
- en: 'The following is an example of a response from the API:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是从API返回的示例响应：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is what the response looks like:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是响应的样子：
- en: '![Figure 7.3 – Response result ](img/Figure_7.03_B17902.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 响应结果](img/Figure_7.03_B17902.jpg)'
- en: Figure 7.3 – Response result
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 响应结果
- en: 'To update an item by ID, we can create a new `MapPut` endpoint with two parameters:
    the item with the entity values and the ID of the old entity in the database that
    we want to update.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过ID更新条目，我们可以创建一个新的`MapPut`端点，包含两个参数：具有实体值的条目和数据库中要更新的旧实体的ID。
- en: 'The code should be like the following snippet:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 代码应该像以下片段一样：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Just to be clear, first of all, we need to find the item in the database with
    the ID from the parameters. If we don’t find an item in the database, it’s a good
    practice to return a `Not Found` HTTP status to the caller.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确起见，首先，我们需要使用参数中的ID在数据库中找到条目。如果我们没有在数据库中找到条目，向调用者返回`Not Found` HTTP状态是一个好的做法。
- en: If we find the entity in the database, we update the entity with the new values
    and we save all the changes in the database before sending back the HTTP status
    `No Content`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在数据库中找到实体，我们将使用新值更新实体，并在发送回HTTP状态`No Content`之前将所有更改保存到数据库中。
- en: The last CRUD operation we need to perform is to delete an item from the database.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后需要执行的CRUD操作是从数据库中删除条目。
- en: This operation is very similar to the update operation because, first of all,
    we need to find the item in the database and then we can try to perform the delete
    operation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作与更新操作非常相似，因为首先我们需要在数据库中找到该条目，然后我们才能尝试执行删除操作。
- en: 'The following code snippet shows how to implement a delete operation with the
    right HTTP verb of the minimal API:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何使用最小API的正确HTTP动词实现删除操作：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this section, we have learned how to use EF in a minimal API project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在最小API项目中使用EF。
- en: We saw how to add the NuGet packages to start working with EF, and how to implement
    the entire set of CRUD operations in a minimal API .NET 6 project.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何添加NuGet包以开始使用EF，以及如何在最小API .NET 6项目中实现整个CRUD操作集。
- en: In the next section, we will see how to implement the same project with the
    same logic but using Dapper as the primary library to access data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何使用Dapper作为主要库来访问数据，以实现具有相同逻辑的相同项目。
- en: Using Dapper
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dapper
- en: Dapper is an `IDbConnection` object and provides a lot of methods to query the
    database. This means we have to write queries that are compatible with the database
    provider.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Dapper是一个`IDbConnection`对象，并提供了许多查询数据库的方法。这意味着我们必须编写与数据库提供程序兼容的查询。
- en: 'It supports synchronous and asynchronous method executions. This is a list
    of the methods that Dapper adds to the `IDbConnection` interface:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持同步和异步方法执行。以下是Dapper添加到`IDbConnection`接口的方法列表：
- en: '`Execute`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Execute`'
- en: '`Query`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Query`'
- en: '`QueryFirst`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QueryFirst`'
- en: '`QueryFirstOrDefault`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QueryFirstOrDefault`'
- en: '`QuerySingle`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QuerySingle`'
- en: '`QuerySingleOrDefault`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QuerySingleOrDefault`'
- en: '`QueryMultiple`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QueryMultiple`'
- en: As we mentioned, it provides an async version for all these methods. You can
    find the right methods by adding the `Async` keyword at the end of the method
    name.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，它为所有这些方法提供了一个异步版本。你可以在方法名末尾添加`Async`关键字来找到正确的方法。
- en: In the next section, we will see how to set up a project for using Dapper with
    a SQL Server LocalDB.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何设置一个项目以使用Dapper和SQL Server LocalDB。
- en: Setting up the project
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置项目
- en: The first thing we are going to do is to create a new database. You can use
    your SQL Server LocalDB instance installed with Visual Studio by default or another
    SQL Server instance in your environment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的第一件事是创建一个新的数据库。你可以使用默认安装的Visual Studio SQL Server LocalDB实例或你环境中另一个SQL
    Server实例。
- en: 'You can execute the following script in your database to create one table and
    populate it with data:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的数据库中执行以下脚本以创建一个表并填充数据：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once we have the database, we can install these NuGet packages with the following
    command in the Visual Studio terminal:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了数据库，我们就可以使用以下Visual Studio终端中的命令安装这些NuGet包：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we can continue to add the code to interact with the database. In this example,
    we are going to use a repository pattern.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续添加与数据库交互的代码。在这个例子中，我们将使用存储库模式。
- en: Creating a repository pattern
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建存储库模式
- en: 'In this section, we are going to create a simple repository pattern, but we
    will try to make it as simple as possible so we can understand the main features
    of Dapper:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个简单的存储库模式，但我们会尽量让它尽可能简单，这样我们就可以理解Dapper的主要功能：
- en: 'In the `Program.cs` file, add a simple class that represents our entity in
    the database:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中，添加一个简单的类来表示数据库中的实体：
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After this, modify the `appsettings.json` file by adding the connection string
    at the end of the file:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过在文件末尾添加连接字符串来修改`appsettings.json`文件：
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you are using LocalDB, the connection string should be the right one for
    your environment as well.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用LocalDB，连接字符串应该适合你的环境。
- en: 'Create a new class in the root of the project called `DapperContext` and give
    it the following code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中创建一个名为`DapperContext`的新类，并给它以下代码：
- en: '[PRE17]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We injected with dependency injection the `IConfiguration` interface to retrieve
    the connection string from the settings file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过依赖注入注入了`IConfiguration`接口来从设置文件中检索连接字符串。
- en: Now we are going to create the interface and the implementation of our repository.
    In order to do that, add the following code to the `Program.cs` file.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的存储库的接口和实现。为了做到这一点，请将以下代码添加到`Program.cs`文件中。
- en: '[PRE18]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the next sections, we will be adding some code to the interface and to the
    implementation of the repository.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向接口及其存储库的实现中添加一些代码。
- en: Finally, we can register the context, the interface, and its implementation
    as a service.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将上下文、接口及其实现注册为服务。
- en: 'Let’s put the following code after the builder initialization in the `Program.cs`
    file:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`Program.cs`文件中初始化构建器之后放置以下代码：
- en: '[PRE19]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now we are ready to implement the first query.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备实现第一个查询。
- en: Using Dapper to query the database
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Dapper查询数据库
- en: 'First of all, let’s modify the `IIcecreamsRepository` interface by adding a
    new method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过添加一个新方法来修改`IIcecreamsRepository`接口：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, let’s implement this method in the `IcecreamsRepository` class:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们在`IcecreamsRepository`类中实现这个方法：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let’s try to understand all the steps in this method. We created a string called
    `query`, where we store the SQL query to fetch all the entities from the database.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试理解这个方法中的所有步骤。我们创建了一个名为`query`的字符串，其中存储了从数据库获取所有实体的SQL查询。
- en: Then, inside the `using` statement, we used `DapperContext` to create the connection.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`using`语句内部，我们使用了`DapperContext`来创建连接。
- en: Once the connection was created, we used it to call the `QueryAsync` method
    and passed the query as an argument.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了连接，我们就用它来调用`QueryAsync`方法，并将查询作为参数传递。
- en: Dapper, when the results return from the database, converted them into `IEnumerable<T>`
    automatically.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当结果从数据库返回时，Dapper会自动将它们转换为`IEnumerable<T>`。
- en: 'The following is the final code of the interface and our first implementation:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们接口和第一次实现的最终代码：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the next section, we will see how to add a new entity to the database and
    how to use the `ExecuteAsync` method to run a query.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何向数据库添加新实体以及如何使用 `ExecuteAsync` 方法来运行查询。
- en: Adding a new entity in the database with Dapper
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Dapper 在数据库中添加新实体
- en: Now we are going to manage adding a new entity to the database for future implementations
    of the API post request.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将管理添加新实体到数据库，以供 API 带有未来实现请求。
- en: 'Let’s modify the interface by adding a new method called `CreateIcecream` with
    an input parameter of the `Icecream` type:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加一个名为 `CreateIcecream` 的新方法来修改接口，该方法接受 `Icecream` 类型的输入参数：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we must implement this method in the repository class:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须在仓储类中实现此方法：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we create the query and a dynamic parameters object to pass all the values
    to the database.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建查询和一个动态参数对象，将所有值传递到数据库。
- en: We populate the parameters with the values from the `Icecream` object in the
    method parameter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在方法参数中用 `Icecream` 对象的值填充参数。
- en: We create the connection with the Dapper context and then we use the `ExecuteAsync`
    method to execute the `INSERT` statement.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Dapper 上下文创建连接，然后使用 `ExecuteAsync` 方法执行 `INSERT` 语句。
- en: This method returns an integer value as a result, representing the number of
    affected rows in the database. In this case, we don’t use this information, but
    you can return this value as the result of the method if you need it.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个整数值作为结果，表示数据库中受影响的行数。在这种情况下，我们不使用此信息，但如果你需要，你可以将此值作为方法的结果返回。
- en: Implementing the repository in the endpoints
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在端点中实现仓储
- en: 'To add the final touch to our minimal API, we need to implement the two endpoints
    to manage all the methods in our repository pattern:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我们的最小 API 添加最后的润色，我们需要实现两个端点来管理仓储模式中的所有方法：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In both map methods, we pass the repository as a parameter because, as usual
    in the minimal API, the services are passed as parameters in the map methods.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个映射方法中，我们传递仓储作为参数，因为在最小 API 中，服务通常作为参数传递给映射方法。
- en: This means that the repository is always available in all parts of the code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着仓储始终在代码的所有部分中可用。
- en: In the `MapGet` endpoint, we use the repository to load all the entities from
    the implementation of the repository and we use the result as the result of the
    endpoint.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MapGet` 端点中，我们使用仓储从仓储的实现中加载所有实体，并将结果用作端点的结果。
- en: In the `MapPost` endpoint, in addition to the repository parameter, we accept
    also the `Icecream` entity from the body of the request and we use the same entity
    as a parameter to the `CreateIcecream` method of the repository.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MapPost` 端点中，除了仓储参数外，我们还接受来自请求体的 `Icecream` 实体，并使用相同的实体作为仓储中 `CreateIcecream`
    方法的参数。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we learned how to interact with a data access layer in a minimal
    API project with the two most common tools in a real-world scenario: EF and Dapper.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在最小 API 项目中使用最常用的工具与数据访问层交互：EF 和 Dapper。
- en: For EF, we covered some basic features, such as setting up a project to use
    this ORM and how to perform some basic operations to implement a full CRUD API
    endpoint.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 EF，我们介绍了一些基本功能，例如设置项目以使用此 ORM 以及如何执行一些基本操作以实现完整的 CRUD API 端点。
- en: We did basically the same thing with Dapper as well, starting from an empty
    project, adding Dapper, setting up the project for working with a SQL Server LocalDB,
    and implementing some basic interactions with the entities of the database.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也用 Dapper 做了基本上相同的事情，从一个空项目开始，添加 Dapper，设置项目以与 SQL Server LocalDB 一起工作，并实现与数据库实体的一些基本交互。
- en: In the next chapter, we’ll focus on authentication and authorization in a minimal
    API project. It’s important, first of all, to protect your data in the database.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注最小 API 项目中的身份验证和授权。首先，保护数据库中的数据非常重要。
- en: 'Part 3: Advanced Development and Microservices Concepts'
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：高级开发与微服务概念
- en: In this advanced section of the book, we want to show more scenarios that are
    typical in backend development. We will also go over the performance of this new
    framework and understand the scenarios in which it is really useful.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的高级部分，我们希望展示更多在后端开发中典型的场景。我们还将讨论这个新框架的性能，并了解它在哪些场景中非常有用。
- en: 'We will cover the following chapters in this section:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下章节：
- en: '[*Chapter 8*](B17902_08.xhtml#_idTextAnchor109), *Adding Authentication and
    Authorization*'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B17902_08.xhtml#_idTextAnchor109), *添加身份验证和授权*'
- en: '[*Chapter 9*](B17902_09.xhtml#_idTextAnchor125), *Leveraging Globalization
    and Localization*'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B17902_09.xhtml#_idTextAnchor125), *利用全球化和本地化*'
- en: '[*Chapter 10*](B17902_10.xhtml#_idTextAnchor140), *Evaluating and Benchmarking
    the Performance of Minimal APIs*'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B17902_10.xhtml#_idTextAnchor140), *评估和基准测试最小API的性能*'
