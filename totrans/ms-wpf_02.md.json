["```cs\nSystem.Windows.Data Error: 40 : BindingExpression path error:\n'ViewName' property not found on 'object' ''MainViewModel'\n(HashCode=3910657)'. BindingExpression:Path=ViewName;\nDataItem='MainViewModel' (HashCode=3910657); target element is 'TextBox'\n(Name='NameTextBox'); target property is 'Text' (type 'String')\n```", "```cs\nSystem.Windows.Data Error: 40 : BindingExpression path error: 'PropertyOfBindingSource' property not found on 'object' ''TypeOfBindingSource' (HashCode=HashCodeOfBindingSource)'. BindingExpression:Path=UsedBindingPath; DataItem='TypeOfBindingSource' (HashCode=HashCodeOfBindingSource); target element is 'TypeOfBindingTarget' (Name='NameOfBindingTarget'); target property is\n'PropertyOfBindingTarget' (type 'TypeOfBindingTargetProperty') \n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<configuration> \n  <startup>  \n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.6.1\" /> \n  </startup> \n  <system.diagnostics> \n    <sources> \n      <source name=\"System.Windows.Data\" switchName=\"Switch\"> \n        <listeners> \n          <add name=\"TextListener\" /> \n        </listeners> \n      </source> \n    </sources> \n    <switches> \n      <add name=\"Switch\" value=\"All\" /> \n    </switches> \n    <sharedListeners> \n      <add name=\"TextListener\"  \n        type=\"System.Diagnostics.TextWriterTraceListener\"  \n        initializeData=\"Trace.txt\" /> \n    </sharedListeners> \n    <trace indentsize=\"4\" autoflush=\"true\"></trace> \n  </system.diagnostics> \n</configuration> \n```", "```cs\n<add name=\"Switch\" value=\"Error\" /> \n```", "```cs\n<source name=\"System.Windows.Data\" switchName=\"Switch\"> \n  <listeners> \n    <add name=\"TextListener\" /> \n    <remove name=\"Default\" /> \n  </listeners> \n</source> \n```", "```cs\n<source name=\"System.Windows.Data\" switchName=\"Switch\"> \n  <listeners> \n    <add name=\"TextListener\" /> \n    <add name=\"OutputListener\" /> \n  </listeners> \n</source> \n```", "```cs\n<source name=\"System.Windows.Data\" switchName=\"Switch\"> \n  <listeners> \n    <add name=\"TextListener\" /> \n  </listeners> \n</source> \n<source name=\"System.Windows.DependencyProperty\" switchName=\"Switch\"> \n  <listeners> \n    <add name=\"OutputListener\" /> \n  </listeners> \n</source> \n... \n<sharedListeners> \n  <add name=\"TextListener\"  \n    type=\"System.Diagnostics.TextWriterTraceListener\"  \n    initializeData=\"Trace.txt\" /> \n  <add name=\"OutputListener\"  \n    type=\"System.Diagnostics.ConsoleTraceListener\" /> \n</sharedListeners> \n```", "```cs\n<source name=\"System.Windows.Data\" switchName=\"ErrorSwitch\"> \n  <listeners> \n    <add name=\"TextListener\" /> \n  </listeners> \n</source> \n<source name=\"System.Windows.DependencyProperty\" switchName=\"AllSwitch\"> \n  <listeners> \n    <add name=\"OutputListener\" /> \n  </listeners> \n</source> \n... \n<switches> \n  <add name=\"AllSwitch\" value=\"All\" /> \n  <add name=\"ErrorSwitch\" value=\"Error\" /> \n</switches> \n```", "```cs\n<source name=\"CompanyName.ApplicationName\" switchName=\"Switch\"> \n  <listeners> \n    <add name=\"TextListener\" /> \n  </listeners> \n</source> \n```", "```cs\nTraceSource traceSource = new TraceSource(\"CompanyName.ApplicationName\");\ntraceSource.TraceEvent(TraceEventType.Information, eventId, \"Data loaded\"); \n// Alternative way to output information with an event id of 0 \ntraceSource.TraceInformation(\"Data loaded\"); \n```", "```cs\ntraceSource.TraceEvent(TraceEventType.Error, eventId, \"Data not loaded\"); \n```", "```cs\ntraceSource.Flush(); \n```", "```cs\ntraceSource.Close(); \n```", "```cs\n<source name=\"CompanyName.ApplicationName\" switchName=\"OffSwitch\"> \n  <listeners> \n    <add name=\"TextListener\" /> \n  </listeners> \n</source> \n... \n<switches>\n  <add name=\"AllSwitch\" value=\"All\" /> \n  <add name=\"OffSwitch\" value=\"Off\" /> \n</switches> \n```", "```cs\n<source name=\"CompanyName.ApplicationName\" switchName=\"AllSwitch\"> \n  <listeners> \n    <add name=\"TextListener\" /> \n  </listeners> \n</source> \n```", "```cs\nTrace.Refresh(); \n```", "```cs\nHKEY_CURRENT_USER\\Software\\Microsoft\\Tracing\\WPF \n```", "```cs\n<Style x:Key=\"SmallButtonStyle\" TargetType=\"{x:Type Button}\" \n  BasedOn=\"{StaticResource BaseButtonStyle}\"> \n  <Setter Property=\"Height\" Value=\"24\" /> \n  <Setter Property=\"Width\" Value=\"24\" /> \n</Style> \n```", "```cs\npublic static DependencyProperty OnEnterKeyDownProperty =  \n  DependencyProperty.RegisterAttached(\"OnEnterKeyDown\", \n  typeof(ICommand), typeof(TextBoxProperties), \n  new PropertyMetadata(OnOnEnterKeyDownChanged)); \n\n...\n\npublic static void OnOnEnterKeyDownChanged(\n  DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\n{ \n  TextBox textBox = (TextBox)dependencyObject; \n  if (e.OldValue == null && e.NewValue != null)  \n    textBox.PreviewKeyDown += TextBox_OnEnterKeyDown; \n  else if (e.OldValue != null && e.NewValue == null)  \n    textBox.PreviewKeyDown -= TextBox_OnEnterKeyDown; \n} \n```", "```cs\n[ValueConversion(typeof(object), typeof(object))] \npublic class DebugConverter : IValueConverter \n{ \n  public object Convert(object value, Type targetType, object parameter,\n    CultureInfo culture) \n  { \n    if (Debugger.IsAttached) Debugger.Break(); \n    return value; \n  } \n\n  public object ConvertBack(object value, Type targetType, \n    object parameter, CultureInfo culture) \n  { \n    if (Debugger.IsAttached) Debugger.Break(); \n    return value; \n  } \n}\n```", "```cs\nxmlns:Converters=\"clr-namespace:CompanyName.ApplicationName.Converters; \n  assembly=CompanyName.ApplicationName.Converters\" \n... \n<UserControl.Resources> \n  <Converters:DebugConverter x:Key=\"Debug\" /> \n</UserControl.Resources> \n... \n<ListBox ItemsSource=\"{Binding Items, Converter={StaticResource Debug}}\" />\n```", "```cs\n[ValueConversion(typeof(object), typeof(object))] \npublic class DebugConverter : IValueConverter \n{ \n  public object Convert(object value, Type targetType, object parameter,\n    CultureInfo culture)\n  {\n    Break(value); \n    return value; \n  } \n\n  public object ConvertBack(object value, Type targetType, \n    object parameter, CultureInfo culture) \n  { \n    Break(value); \n    return value; \n  } \n\n  [Conditional(\"DEBUG\")]\n  private void Break(object value)\n  {\n    Debugger.Break();\n  }\n} \n```"]