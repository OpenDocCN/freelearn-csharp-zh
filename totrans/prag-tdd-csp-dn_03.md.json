["```cs\nprivate readonly ILogger<WeatherForecastController> \n    _logger;\npublic double ConvertCToF(double c)\n{\n    double f = c * (9d / 5d) + 32;\n    _logger.LogInformation(\"conversion requested\");\n    return f;\n}\n```", "```cs\nprivate readonly IClient _client;\npublic async Task<IEnumerable<WeatherForecast>> GetReal()\n{\n    …\n    OneCallResponse res = await _client.OneCallAsync(…\n    …\n}\n```", "```cs\ndotnet new xunit -o Uqs.Weather.Tests.Unit -f net6.0\n```", "```cs\ndotnet sln add Uqs.Weather.Tests.Unit\n```", "```cs\ndotnet add Uqs.Weather.Tests.Unit reference Uqs.Weather\n```", "```cs\nusing Xunit;\nnamespace Uqs.Weather.Tests.Unit;\npublic class UnitTest1\n{\n    [Fact]\n    public void Test1()\n    {\n    }\n}\n```", "```cs\ndotnet test\n```", "```cs\n[Fact]\npublic void ConvertCToF_0Celsius_32Fahrenheit()\n{\n    const double expected = 32d;\n    var controller = new WeatherForecastController(\n        null!, null!, null!, null!);\n    double actual = controller.ConvertCToF(0);\n    Assert.Equal(expected, actual);\n}\n```", "```cs\n_logger.LogInformation(\"conversion requested\");\n```", "```cs\nvar logger = \n    NullLogger<WeatherForecastController>.Instance;\nvar controller = new WeatherForecastController(\n    logger, null!, null!, null!);\n```", "```cs\npublic void ConvertCToF_1Celsius_33p8Fahrenheit() {…}\n…\npublic void ConvertCToF_Minus1Celsius_30p2Fahrenheit() {…}\n```", "```cs\n[Theory]\n[InlineData(-100 , -148)]\n[InlineData(-10.1,  13.8)]\n[InlineData(10   ,  50)]\npublic void ConvertCToF_Cel_CorrectFah(double c, double f)\n{\n    var logger = \n        NullLogger<WeatherForecastController>.Instance;\n    var controller = new WeatherForecastController(\n        logger, null!, null!, null!);\n    double actual = controller.ConvertCToF(c);\n    Assert.Equal(f, actual, 1);\n}\n```", "```cs\n[Fact]\npublic void ConvertCToF_0Celsius_32Fahrenheit()\n{\n    // Arrange\n    const double expected = 32d;\n    var controller = new WeatherForecastController(…);\n    // Act\n    double actual = controller.ConvertCToF(0);\n\n    // Assert\n    Assert.Equal(expected, actual);\n}\n```", "```cs\n%USERPROFILE%\\Documents\\Visual Studio 2022\\Code Snippets\\Visual \nC#\\My Code Snippets\n```", "```cs\n[Fact]\npublic void Method_Condition_Expectation()\n{\n    // Arrange\n    // Act\n    // Assert\n}\n```", "```cs\nvar sut = new ProductionCode(…);\n```", "```cs\npublic class SampleTests\n{\n    private int _instanceField = 0;\n    private static int _staticField = 0;\n    [Fact]\n    public void UnitTest1()\n    {\n        _instanceField++;\n        _staticField++;\n        Assert.Equal(1, _instanceField);\n        Assert.Equal(1, _staticField);\n    }\n    [Fact]\n    public void UnitTest2()\n    {\n        _instanceField++;\n        _staticField++;\n        Assert.Equal(1, _instanceField);\n        Assert.Equal(2, _staticField);\n    }\n}\n```", "```cs\n    Assert.Equal(true, isPositive);\n    // or\n    Assert.True(isPositive);\n    ```", "```cs\n[Fact]\npublic void Load_InvalidJson_FormatException()\n{\n    // Arrange\n    string input = \"{not a valid JSON\";\n    // Act\n    var exception = Record.Exception(() => \n        JsonParser.Load(input));\n\n    // Assert\n    Assert.IsType<FormatException>(exception);\n}\n```", "```cs\npublic interface IArithmeticOperation {}\npublic class Addition : IArithmeticOperation\n{\n    public double Add(double left, double right) => \n        left + right;\n}\npublic class Subtraction : IArithmeticOperation { … }\npublic class Calculation\n{\n    public double Calculate(IArithmeticOperation op, \n        double left, double right) => \n        op switch\n        {\n          Addition addition => addition.Add(left, right),\n          Subtraction sub => sub.Subtract(left, right),\n          //Multiplication mul => mul.Multiply(left,right),\n          _ => throw new NotImplementedException()\n        };\n}\n```", "```cs\npublic interface IArithmeticOperation \n{\n    public double Operate(double left, double right);\n}\npublic class Addition : IArithmeticOperation\n{\n    public double Operate(double left, double right) => \n        left + right;\n}\npublic class Subtraction : IArithmeticOperation { … }\n// public class Multiplication : IArithmeticOperation { … }\npublic class Calculation\n{\n    public double Calculate(IArithmeticOperation op, \n        double left, double right) => \n            op.Operate(left, right);\n}\n```", "```cs\npublic abstract class Bird\n{\n    public abstract void Fly();\n    public abstract void Walk();\n}\npublic class Robin : Bird\n{\n    public override void Fly() => Console.WriteLine(\"fly\");\n    public override void Walk() => \n        Console.WriteLine(\"walk\");\n}\npublic class Ostrich : Bird \n{\n    public override void Fly() => \n        throw new InvalidOperationException();\n    public override void Walk() =>\n        Console.WriteLine(\"walk\");\n}\n```", "```cs\npublic abstract class Bird\n{\n    public abstract void Walk();\n}\npublic abstract class FlyingBird : Bird\n{\n    public abstract void Fly();\n}\npublic class Robin : FlyingBird\n{\n    public override void Fly() => Console.WriteLine(\"fly\");\n    public override void Walk() => \n        Console.WriteLine(\"walk\");\n}\npublic class Ostrich : Bird \n{\n    public override void Walk() => \n        Console.WriteLine(\"walk\");\n}\n```", "```cs\npublic class List<T> : ICollection<T>, IEnumerable<T>,  \n  IList<T>, IReadOnlyCollection<T>, IReadOnlyList<T>, IList\n```"]