["```cs\nnamespace Core.Mappers;\npublic interface IMapper<TSource, TDestination>\n{\n    TDestination Map(TSource entity);\n}\n```", "```cs\n// Input stock DTOs\npublic record class AddStocksCommand(int Amount);\npublic record class RemoveStocksCommand(int Amount);\n// Output stock DTO\npublic record class StockLevel(int QuantityInStock);\n// Output \"read all products\" DTO\npublic record class ProductDetails(int Id, string Name, int QuantityInStock);\n// Output Exceptions DTO\npublic record class ProductNotFound(int ProductId, string Message);\npublic record class NotEnoughStock(int AmountToRemove, int QuantityInStock, string Message);\n```", "```cs\npublic class ProductMapper : IMapper<Product, ProductDetails>\n{\n    public ProductDetails Map(Product entity)\n        => new(entity.Id ?? default, entity.Name, entity.QuantityInStock);\n}\n```", "```cs\npublic class ExceptionsMapper : IMapper<ProductNotFoundException, ProductNotFound>, IMapper<NotEnoughStockException, NotEnoughStock>\n{\n    public ProductNotFound Map(ProductNotFoundException exception)\n        => new(exception.ProductId, exception.Message);\n    public NotEnoughStock Map(NotEnoughStockException exception)\n        => new(exception.AmountToRemove, exception.QuantityInStock, exception.Message);\n}\n```", "```cs\napp.MapGet(\"/products\", async (\n    IProductRepository productRepository, \n    CancellationToken cancellationToken) =>\n{\n    var products = await productRepository.AllAsync(cancellationToken);\n    return products.Select(p => new\n    {\n        p.Id,\n        p.Name,\n        p.QuantityInStock\n    });\n});\n```", "```cs\napp.MapGet(\"/products\", async (\n    IProductRepository productRepository, \n    IMapper<Product, ProductDetails> mapper, \n    CancellationToken cancellationToken) =>\n{\n    var products = await productRepository.AllAsync(cancellationToken);\n    return products.Select(p => mapper.Map(p));\n});\n```", "```cs\napp.MapPost(\"/products/{productId:int}/remove-stocks\", async (\n    int productId, \n    RemoveStocksCommand command, \n    StockService stockService, \n    CancellationToken cancellationToken) =>\n{\n    try\n    {\n        var quantityInStock = await stockService.RemoveStockAsync(productId, command.Amount, cancellationToken);\n        var stockLevel = new StockLevel(quantityInStock);\n        return Results.Ok(stockLevel);\n    }\n    catch (NotEnoughStockException ex)\n    {\n        return Results.Conflict(new\n        {\n            ex.Message,\n            ex.AmountToRemove,\n            ex.QuantityInStock\n        });\n    }\n    catch (ProductNotFoundException ex)\n    {\n        return Results.NotFound(new\n        {\n            ex.Message,\n            productId,\n        });\n    }\n});\n```", "```cs\napp.MapPost(\"/products/{productId:int}/remove-stocks\", async (\n    int productId, \n    RemoveStocksCommand command, \n    StockService stockService, \n    IMapper<ProductNotFoundException, ProductNotFound> notFoundMapper, \n    IMapper<NotEnoughStockException, NotEnoughStock> notEnoughStockMapper, \n    CancellationToken cancellationToken) =>\n{\n    try\n    {\n        var quantityInStock = await stockService.RemoveStockAsync(productId, command.Amount, cancellationToken);\n        var stockLevel = new StockLevel(quantityInStock);\n        return Results.Ok(stockLevel);\n    }\n    catch (NotEnoughStockException ex)\n    {\n        return Results.Conflict(notEnoughStockMapper.Map(ex));\n    }\n    catch (ProductNotFoundException ex)\n    {\n        return Results.NotFound(notFoundMapper.Map(ex));\n    }\n});\n```", "```cs\n.AddSingleton<IMapper<Product, ProductDetails>, ProductMapper>()\n.AddSingleton<IMapper<ProductNotFoundException, ProductNotFound>, ExceptionsMapper>()\n.AddSingleton<IMapper<NotEnoughStockException, NotEnoughStock>, ExceptionsMapper>()\n```", "```cs\n.AddSingleton<ExceptionsMapper>()\n.AddSingleton<IMapper<ProductNotFoundException, ProductNotFound>, ExceptionsMapper>(sp => sp.GetRequiredService<ExceptionsMapper>())\n.AddSingleton<IMapper<NotEnoughStockException, NotEnoughStock>, ExceptionsMapper>(sp => sp.GetRequiredService<ExceptionsMapper>())\n```", "```cs\npublic interface IProductMappers\n{\n    IMapper<Product, ProductDetails> EntityToDto { get; }\n    IMapper<InsertProduct, Product> InsertDtoToEntity { get; }\n    IMapper<UpdateProduct, Product> UpdateDtoToEntity { get; }\n}\npublic class ProductMappers : IProductMappers\n{\n    public ProductMappers(IMapper<Product, ProductDetails> entityToDto, IMapper<InsertProduct, Product> insertDtoToEntity, IMapper<UpdateProduct, Product> updateDtoToEntity)\n    {\n        EntityToDto = entityToDto ?? throw new ArgumentNullException(nameof(entityToDto));\n        InsertDtoToEntity = insertDtoToEntity ?? throw new ArgumentNullException(nameof(insertDtoToEntity));\n        UpdateDtoToEntity = updateDtoToEntity ?? throw new ArgumentNullException(nameof(updateDtoToEntity));\n    }\n    public IMapper<Product, ProductDetails> EntityToDto { get; }\n    public IMapper<InsertProduct, Product> InsertDtoToEntity { get; }\n    public IMapper<UpdateProduct, Product> UpdateDtoToEntity { get; }\n}\npublic class ProductsController : ControllerBase\n{\n    private readonly IProductMappers _mapper;\n    // Constructor injection, other methods, routing attributes, ...\n    public ProductDetails GetProductById(int id)\n    {\n        Product product = ...; // Fetch a product by id\n        ProductDetails dto = _mapper.EntityToDto.Map(product);\n        return dto;\n    }\n}\n```", "```cs\npublic interface IProductMapperService : \n    IMapper<Product, ProductDetails>, \n    IMapper<InsertProduct, Product>, \n    IMapper<UpdateProduct, Product>\n{\n}\npublic class ProductMapperService : IProductMapperService\n{\n    private readonly IMapper<Product, ProductDetails> _entityToDto;\n    private readonly IMapper<InsertProduct, Product> _insertDtoToEntity;\n    private readonly IMapper<UpdateProduct, Product> _updateDtoToEntity;\n    // Omitted constructor injection code\n    public ProductDetails Map(Product entity)\n    {\n        return _entityToDto.Map(entity);\n    }\n    public Product Map(InsertProduct dto)\n    {\n        return _insertDtoToEntity.Map(dto);\n    }\n    public Product Map(UpdateProduct dto)\n    {\n        return _updateDtoToEntity.Map(dto);\n    }\n}\n```", "```cs\npublic class ProductsController : ControllerBase\n{\n    private readonly IProductMapperService _mapper;\n    // Omitted constructor injection, other methods, routing attributes, ...\n    public ProductDetails GetProductById(int id)\n    {\n        Product product = ...; // Fetch a product by id\n        ProductDetails dto = _mapper.Map(product);\n        return dto;\n    }\n}\n```", "```cs\nnamespace Core.Mappers;\npublic interface IMappingService\n{\n    TDestination Map<TSource, TDestination>(TSource entity);\n}\n```", "```cs\nnamespace Core.Mappers;\npublic class ServiceLocatorMappingService : IMappingService\n{\n    private readonly IServiceProvider _serviceProvider;\n    public ServiceLocatorMappingService(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));\n    }\n    public TDestination Map<TSource, TDestination>(TSource entity)\n    {\n        var mapper = _serviceProvider.GetService<IMapper<TSource, TDestination>>();\n        if (mapper == null)\n        {\n            throw new MapperNotFoundException(typeof(TSource), typeof(TDestination));\n        }\n        return mapper.Map(entity);\n    }\n}\n```", "```cs\n.AddSingleton<IMappingService, ServiceLocatorMappingService>();\n```", "```cs\napp.MapPost(\"/products/{productId:int}/remove-stocks\", async (\n    int productId, \n    RemoveStocksCommand command, \n    StockService stockService, \n    IMappingService mapper, \n    CancellationToken cancellationToken) => {\n    try\n    {\n        var quantityInStock = await stockService.RemoveStockAsync(productId, command.Amount, cancellationToken);\n        var stockLevel = new StockLevel(quantityInStock);\n        return Results.Ok(stockLevel);\n    }\n    catch (NotEnoughStockException ex)\n    {\n        return Results.Conflict(mapper.Map<NotEnoughStockException, NotEnoughStock>(ex));\n    }\n    catch (ProductNotFoundException ex)\n    {\n        return Results.NotFound(mapper.Map<ProductNotFoundException, ProductNotFound>(ex));\n    }\n});\n```", "```cs\nusing AutoMapper;\npublic class WebProfile : Profile\n{\n    public WebProfile()\n    {\n        CreateMap<Product, ProductDetails>();\n        CreateMap<NotEnoughStockException, NotEnoughStock>();\n        CreateMap<ProductNotFoundException, ProductNotFound>();\n    }\n}\n```", "```cs\nbuilder.Services.AddAutoMapper(typeof(WebProfile).Assembly);\n```", "```cs\napp.MapGet(\"/products\", async (\n    IProductRepository productRepository, \n    IMapper mapper, \n    CancellationToken cancellationToken) =>\n{\n    var products = await productRepository.AllAsync(cancellationToken);\n    return products.Select(p => mapper.Map<Product, ProductDetails>(p));\n});\napp.MapPost(\"/products/{productId:int}/add-stocks\", async (\n    int productId, \n    AddStocksCommand command, \n    StockService stockService, \n    IMapper mapper, \n    CancellationToken cancellationToken) =>\n{\n    try\n    {\n        var quantityInStock = await stockService.AddStockAsync(productId, command.Amount, cancellationToken);\n        var stockLevel = new StockLevel(quantityInStock);\n        return Results.Ok(stockLevel);\n    }\n    catch (ProductNotFoundException ex)\n    {\n        return Results.NotFound(mapper.Map<ProductNotFound>(ex));\n    }\n});\napp.MapPost(\"/products/{productId:int}/remove-stocks\", async (\n    int productId, \n    RemoveStocksCommand command, \n    StockService stockService, \n    IMapper mapper, \n    CancellationToken cancellationToken) =>\n{\n    try\n    {\n        var quantityInStock = await stockService.RemoveStockAsync(productId, command.Amount, cancellationToken);\n        var stockLevel = new StockLevel(quantityInStock);\n        return Results.Ok(stockLevel);\n    }\n    catch (NotEnoughStockException ex)\n    {\n        return Results.Conflict(mapper.Map<NotEnoughStock>(ex));\n    }\n    catch (ProductNotFoundException ex)\n    {\n        return Results.NotFound(mapper.Map<ProductNotFound>(ex));\n    }\n});\n```", "```cs\npublic IEnumerable<ProductDto> GetAllProducts()\n{\n    return _mapper.ProjectTo<ProductDto>(_db.Products);\n}\n```", "```cs\npublic partial class Program { }\n```", "```cs\nnamespace Web;\npublic class StartupTest\n{\n    [Fact]\n    public async Task AutoMapper_configuration_is_valid()\n    {\n        // Arrange\n        await using var application = new AutoMapperAppWebApplication();\n        var mapper = application.Services.GetRequiredService<IMapper>();\n        mapper.ConfigurationProvider.AssertConfigurationIsValid();\n    }\n}\ninternal class AutoMapperAppWebApplication : WebApplicationFactory<Program>{}\n```", "```cs\nCreateMap<NotEnoughStockException, Product>();\n```", "```cs\npublic class StartupTest\n{\n    [Fact]\n    public async Task The_products_endpoint_should_be_reachable()\n    {\n        await using var application = new AutoMapperAppWebApplication();\n        using var client = application.CreateClient();\n        using var response = await client.GetAsync(\"/products\");\n        response.EnsureSuccessStatusCode();\n    }\n    // Omitted AutoMapper_configuration_is_valid method\n}\ninternal class AutoMapperAppWebApplication : WebApplicationFactory<Program>\n{\n    private readonly string _databaseName;\n    public AutoMapperAppWebApplication([CallerMemberName]string? databaseName = default)\n    {\n        _databaseName = databaseName ?? nameof(AutoMapperAppWebApplication);\n    }\n    protected override IHost CreateHost(IHostBuilder builder)\n    {\n        builder.ConfigureServices(services =>\n        {\n            services.AddScoped(sp =>\n            {\n                return new DbContextOptionsBuilder<ProductContext>()\n                    .UseInMemoryDatabase(_databaseName)\n                    .UseApplicationServiceProvider(sp)\n                    .Options;\n            });\n        });\n        return base.CreateHost(builder);\n    }\n}\n```", "```cs\n[Mapper]\npublic partial class ProductMapper\n{\n    public partial ProductDetails MapToProductDetails(Product product);\n}\n```", "```cs\npublic partial class ProductMapper\n{\n    public partial ProductDetails MapToProductDetails(Product product)\n    {\n        var target = new ProductDetails(\n            product.Id ?? throw new ArgumentNullException(nameof(product.Id)),\n            product.Name, \n            product.QuantityInStock\n        );\n        return target;\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<ProductMapper>();\n```", "```cs\napp.MapGet(\"/products\", async (\n    IProductRepository productRepository, \n    ProductMapper mapper, \n    CancellationToken cancellationToken) =>\n{\n    var products = await productRepository.AllAsync(cancellationToken);\n    return products.Select(p => mapper.MapToProductDetails(p));\n});\n```", "```cs\npublic interface IMapper\n{\n    NotEnoughStock MapToDto(NotEnoughStockException source);\n    ProductNotFound MapToDto(ProductNotFoundException source);\n    ProductDetails MapToProductDetails(Product product);\n}\n[Mapper]\npublic partial class Mapper : IMapper\n{\n    public partial NotEnoughStock MapToDto(NotEnoughStockException source);\n    public partial ProductNotFound MapToDto(ProductNotFoundException source);\n    public partial ProductDetails MapToProductDetails(Product product);\n}\n```", "```cs\n<PropertyGroup>\n    <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n</PropertyGroup>\n```", "```cs\n[Mapper]\npublic static partial class ExceptionMapper\n{\n    public static partial ProductNotFound Map(ProductNotFoundException exception);\n}\n```", "```cs\npublic static partial class ExceptionMapper\n{\n    public static partial ProductNotFound Map(ProductNotFoundException exception)\n    {\n        var target = new ProductNotFound(\n            exception.ProductId, \n            exception.Message\n        );\n        return target;\n    }\n}\n```", "```cs\ncatch (ProductNotFoundException ex)\n{\n    return Results.NotFound(ExceptionMapper.Map(ex));\n}\n```", "```cs\npublic static partial NotEnoughStock ToDto(this NotEnoughStockException exception);\n```", "```cs\npublic static partial NotEnoughStock ToDto(this NotEnoughStockException exception)\n{\n    var target = new NotEnoughStock(\n        exception.AmountToRemove, \n        exception.QuantityInStock, \n        exception.Message\n    );\n    return target;\n}\n```", "```cs\ncatch (NotEnoughStockException ex)\n{\n    return Results.Conflict(ex.ToDto());\n}\n```", "```cs\npublic static partial Product NotEnoughStockExceptionToProduct(\n    NotEnoughStockException exception\n);\n```", "```cs\nRMG013 Core.Models.Product has no accessible constructor with mappable arguments\n```", "```cs\nRMG020 The member TargetSite on the mapping source type Core.ProductNotFoundException is not mapped to any member on the mapping target type ProductNotFound\n```"]