- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploring WinUI Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WinUI 3 and the Windows App SDK offer many controls and APIs for developers
    building desktop applications for Windows. The WinUI controls include some controls
    not previously available to Windows developers, as well as updated controls that
    were already available in WinUI 2.x and **UWP**. Using these new and updated controls
    with WinUI 3 enables their use in older versions of Windows that did not previously
    support this full suite of components. Developers can also leverage Windows App
    SDK APIs to get direct access to Windows features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning more about the controls that are available in WinUI 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the **WinUI 3 Gallery** app for Windows to learn about the WinUI controls
    and design guidance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How other Windows App SDK APIs provide Windows developers access to features
    such as power management and notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement `SplitButton` and `TeachingTip` controls in your own apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a greater understanding of the controls
    and libraries in WinUI 3\. You will also feel comfortable using the WinUI 3 Gallery
    app for Windows to explore the controls and find samples that demonstrate how
    to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the examples in this chapter, please reference the *Technical
    requirements* section of [*Chapter 2*](B20908_02.xhtml#_idTextAnchor044), *Configuring
    the Development Environment and Creating* *the Project*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available on GitHub here: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter05](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter05).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what WinUI offers developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B20908_01.xhtml#_idTextAnchor015), *Introduction to WinUI*,
    you learned some background information about the origins of WinUI and UWP. That
    chapter also covered some of the controls available in the various releases of
    WinUI. Now, it’s time to explore a few of these in more detail. Let’s start by
    looking at a list of controls available to developers in WinUI 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – List of WinUI 3 controls](img/B20908_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – List of WinUI 3 controls
  prefs: []
  type: TYPE_NORMAL
- en: This is quite an extensive list of controls available to developers in the Windows
    App SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'For an up-to-date list of the available controls, you can check this page on
    *Microsoft* *Learn*: [https://learn.microsoft.com/windows/apps/design/controls/#alphabetical-index](https://learn.microsoft.com/windows/apps/design/controls/#alphabetical-index).'
  prefs: []
  type: TYPE_NORMAL
- en: If you have developed Windows applications before, most of these control names
    probably look familiar to you. In the sections ahead, we’ll get an overview of
    some controls that you may not have seen before.
  prefs: []
  type: TYPE_NORMAL
- en: Animated visual player (Lottie)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AnimatedVisualPlayer` control, shown in *Figure 5**.2*, is a WinUI control
    that can display **Lottie animations**. Lottie is an open source library that
    can parse and display animations on Windows, the web, iOS, and Android. These
    animations are created by designers in tools such as **Adobe After Effects** and
    exported in JSON format. You can learn more about Lottie animations at the official
    website, [http://airbnb.io/lottie/#/](http://airbnb.io/lottie/#/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The AnimatedVisualPlayer control](img/B20908_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The AnimatedVisualPlayer control
  prefs: []
  type: TYPE_NORMAL
- en: Navigation View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NavigationView` provides a user-friendly page navigation system. Use it to
    give users quick access to all your application’s top-level pages. `NavigationView`
    can be configured to appear as a menu at the top of the application, with each
    page’s link appearing like a tab across the top of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – NavigationView configured at the top of a page](img/B20908_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – NavigationView configured at the top of a page
  prefs: []
  type: TYPE_NORMAL
- en: '`NavigationView` can also be configured to appear on the left-hand side of
    the page. This is a view that should be familiar to Windows and Android users.
    This menu format is commonly known as a **hamburger menu**. This is how the view
    appears when the menu is in a collapsed state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – A collapsed left NavigationView control](img/B20908_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – A collapsed left NavigationView control
  prefs: []
  type: TYPE_NORMAL
- en: 'In either configuration, `NavigationView` can hide or show a back arrow to
    navigate to the previous page and has a **Settings** menu item to show the application’s
    settings page. If your application does not have a settings page, this item should
    be hidden. When the left menu is expanded by clicking the *hamburger* icon below
    the back arrow, the menu text is displayed, along with the respective icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The expanded left NavigationView control](img/B20908_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – The expanded left NavigationView control
  prefs: []
  type: TYPE_NORMAL
- en: Everything on the menu is configurable. You can group pages with the `NavigationView`.
  prefs: []
  type: TYPE_NORMAL
- en: Parallax view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ParallaxView` control brings this concept to your WinUI applications. You
    link `ParallaxView` to `ListView` and a background image, and it will provide
    a parallax effect when `ListView` is scrolled. There are settings to control the
    relationship between scrolling the list and the amount the image scrolls. This
    effect has a great impact on users when it is not overused:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – The ParallaxView control scrolled to the top of a list](img/B20908_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – The ParallaxView control scrolled to the top of a list
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – The ParallaxView control scrolled partially through a list](img/B20908_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – The ParallaxView control scrolled partially through a list
  prefs: []
  type: TYPE_NORMAL
- en: Rating control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Everyone is familiar with rating controls. You see them on shopping websites,
    streaming apps, and online surveys. The WinUI `RatingControl` control allows users
    to rate items in your application from 1 to 5 stars:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – RatingControl displaying the user’s rating](img/B20908_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – RatingControl displaying the user’s rating
  prefs: []
  type: TYPE_NORMAL
- en: The control can also allow you to clear a rating by swiping left on the control
    and can show a placeholder value before the user has provided their own rating.
    Applications frequently use the placeholder value as a means of showing users
    the average rating given by other users.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed a few of the controls that were added with WinUI,
    let’s explore a Windows application that makes it easy to explore them on your
    own.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the WinUI 3 Gallery app for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because there are so many powerful and configurable WinUI controls available,
    the WinUI team at Microsoft decided to create an application that allows Windows
    developers to explore and even try the controls. **WinUI 3 Gallery** is a great
    tool to get familiar with the controls, decide which ones are a good fit for your
    application, and get some sample code and design guidance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is also a **WinUI 2 Gallery** app for UWP developers. The two apps used
    to be a single app called **XAML** **Controls Gallery**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the WinUI 3 Gallery app, you can visit its Microsoft Store page
    on the web ([https://apps.microsoft.com/store/detail/winui-3-gallery/9P3JFPWWDZRC](https://apps.microsoft.com/store/detail/winui-3-gallery/9P3JFPWWDZRC))
    or launch the Microsoft Store app for Windows and search for `WinUI 3 Gallery`.
    The Gallery app itself is open source. You can browse the code to learn more about
    it on GitHub: [https://github.com/microsoft/WinUI-Gallery](https://github.com/microsoft/WinUI-Gallery).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s been installed, launch the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – The WinUI 3 Gallery application](img/B20908_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – The WinUI 3 Gallery application
  prefs: []
  type: TYPE_NORMAL
- en: In the `NavigationView` control, and the left-hand menu allows for quickly browsing
    or searching the various controls in the gallery.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you search for the controls shown in the previous section, you may notice
    that the screenshots provided for the controls in this chapter were taken from
    the WinUI 3 Gallery application.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the ScrollViewer control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose you were considering adding scrolling capability to a region of a page
    in your application. In the gallery application, you can click `ScrollViewer`
    control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – The ScrollViewer control detail page in XAML Controls Gallery](img/B20908_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – The ScrollViewer control detail page in XAML Controls Gallery
  prefs: []
  type: TYPE_NORMAL
- en: The control details page includes several sections. The header area provides
    a brief description of the control and its purpose. The right pane provides useful
    links to online documentation, other related controls in the gallery, and a link
    to provide feedback on the current gallery page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The middle area of the page itself contains three sections: a rendered control,
    a functional control, and a properties panel. Using the properties panel, you
    can update some of the properties of `ScrollViewer` and see the rendered control
    immediately update. In the bottom center, you will find a panel containing the
    source code for the rendered control. The source control pane is very handy for
    copying the code to use as a starting point in your own project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The gallery application’s design also responds well to being resized. If you
    drag the right-hand side of the window to make it as narrow as possible, you will
    see the left and right panels collapse, and the center area will realign to a
    single vertical column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – The gallery application resized horizontally](img/B20908_05_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – The gallery application resized horizontally
  prefs: []
  type: TYPE_NORMAL
- en: You can imagine this view would fit well on a **Microsoft Surface Go laptop**
    or other small PC.
  prefs: []
  type: TYPE_NORMAL
- en: Take some time to explore the controls in the gallery. Some of the code samples
    can be quite lengthy. Try changing some control properties and notice how the
    XAML code updates to reflect the new property values. This is a great way to learn
    XAML and familiarize yourself with the WinUI controls.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s take a tour of the new features of WinUI 3.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing what’s new in WinUI 3 and the Windows App SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although WinUI 3 is a major release, the number of new features, as compared
    to WinUI 2.x, is not extensive. That may be surprising to many people, but simply
    creating WinUI 3 and the Windows App SDK as a standalone release was quite an
    undertaking. We’ll look at the most significant features in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Backward compatibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make WinUI applications compatible with more versions of Windows (it works
    with Windows 10, version 1809 and later), the WinUI team had to extract the UWP
    controls from the Windows SDK and move them to the new `Microsoft.UI.*` libraries
    in the Windows App SDK. The result of this work not only creates compatibility
    with more versions of Windows but also enables developers to consume WinUI, regardless
    of whether they are using .NET or Win32 as the underlying platform. C# developers
    can build .NET apps with WinUI for Desktop projects, and C++ developers can consume
    WinUI on the Win32 platform.
  prefs: []
  type: TYPE_NORMAL
- en: Fluent UI and modern look and feel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developers who maintain **Windows Presentation Form** (**WPF**), WinForms, and
    **Microsoft Foundation Class** (**MFC**) applications aren’t easily able to achieve
    the modern look and feel of Windows with **Fluent UI** the way you can in WinUI.
    We will be covering Fluent UI in depth in [*Chapter 7*](B20908_07.xhtml#_idTextAnchor152),
    *Fluent Design System for* *Windows Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio can now add WinUI project templates without installing a separate
    extension from the Visual Studio Marketplace. As discussed in the opening chapter,
    WinUI support can be added along with the **.NET Desktop Development** workload
    for Visual Studio. Starting a new project with WinUI in Visual Studio is literally
    as easy as going to **File** | **New Project**.
  prefs: []
  type: TYPE_NORMAL
- en: The WebView2 control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One new control available to developers in WinUI 3 is `WebView2`. This new version
    of `WebView` is built on the Chromium-based Microsoft Edge web browser. If you
    need to embed some web content into your app, `WebView2` is the control you should
    use to ensure maximum compatibility with modern web standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of **WebView2** running in the **WinUI 3** **Gallery**
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – WebView2 running in the WinUI 3 Gallery application](img/B20908_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – WebView2 running in the WinUI 3 Gallery application
  prefs: []
  type: TYPE_NORMAL
- en: 'Web content can be loaded into the control from the web or local network, from
    files in local storage, or from files embedded into the application’s binaries.
    Here are some examples of loading into `WebView2` from each type of source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you have an existing application written for the web, then the `WebView2`
    control is a great way to integrate it into your new WinUI client application.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s shift gears for a moment and talk about some features of the Windows App
    SDK outside of the WinUI 3 controls.
  prefs: []
  type: TYPE_NORMAL
- en: What’s new in the Windows App SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You know by now that WinUI 3 is a part of the Windows App SDK. The Windows
    App SDK has its own versions, while WinUI 3 will always be known as WinUI 3\.
    The latest stable release of the Windows App SDK at the time of this writing is
    version 1.4\. In this section, we will review some of the Windows App SDK features
    that are outside the controls in WinUI. For a complete list of the current Windows
    App SDK features, you can review this page on *Microsoft* *Learn*: [https://learn.microsoft.com/windows/apps/windows-app-sdk/#windows-app-sdk-features](https://learn.microsoft.com/windows/apps/windows-app-sdk/#windows-app-sdk-features).'
  prefs: []
  type: TYPE_NORMAL
- en: Power management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Your app can subscribe and respond to power management events as part of the
    Windows App SDK’s app lifecycle API. Some of the events exposed by the `PowerManager`
    class in the SDK include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BatteryStatusChanged`: Raised when the status of the battery in the system
    has changed. Use the `BatteryStatus` property to get the current status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayStatusChanged`: Raised when the status of the display where the app
    is running changes. Use the `DisplayStatus` property to get the current status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EffectivePowerModeChanged`: Raised when the effective power mode of the system
    has changed. These can also be referred to as power plans, such as battery saver
    and high performance. Use the `EffectivePowerMode` property to get the current
    mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SystemSuspendStatusChanged`: Raised when the system is suspended or resumes.
    In UWP, these types of events were part of the built-in lifecycle in the `App`
    class. Use the `SystemSuspendStatus` property to get the current status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserPresenceStatusChanged`: Raised when the system detects a change in the
    user’s presence. Use the `UserPresenceStatus` property to get the current status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A full list of `PowerManager` events and properties can be viewed on *Microsoft*
    *Learn*: [https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.windows.system.power.powermanager).'
  prefs: []
  type: TYPE_NORMAL
- en: Responding to changes in these events can help your app be intelligent in how
    and when it performs resource-intensive actions. You may have some background
    processing that should only be performed when a system is plugged in or its battery
    capacity is above a certain percentage. You could also choose to suspend screen
    animations or dashboard updates when a user’s screen is dimmed or turned off in
    order to conserve power.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s discuss the windowing capabilities in the Windows App SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Window management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Windows App SDK has some limited window management capabilities that can
    be leveraged by using the `AppWindow` class. By using some of the interop APIs,
    your app can get the `HWND` and `WindowId` values for the current window. In Win32
    development, a `WindowId` can then be used to get a reference to the current `AppWindow`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Most of the properties on `AppWindow` are read-only. You can get information
    such as its size, position, visibility, and the `WindowId` value of its owner.
    One writable property of `AppWindow` is `Title`. Setting `Title` allows you to
    change the text in the title bar of the current window.
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications and app notifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Push notifications** can be used to either interact with the app without
    notifying the user or display a toast notification in Windows. The latter is considered
    an **app notification** and is most familiar to users. The other raw notifications
    that trigger within the app are used for things such as waking the app from an
    inactive state or for data syncing purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Windows App SDK supports both types of notifications. The APIs for these
    are in the `Microsoft.Windows.PushNotifications` and `Microsoft.Windows.AppNotifications`
    namespaces. Exploring notifications is beyond the scope of this chapter, but you
    can explore some quick starts on *Microsoft Learn* from the *Push notifications
    overview* page: [https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/](https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/).
    We will add notifications to our project in [*Chapter 8*](B20908_08.xhtml#_idTextAnchor197),
    *Adding Windows Notifications to* *WinUI Applications*.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve learned about some of the new features in WinUI and the Windows
    App SDK, let’s get back to our project and add a couple of new controls to it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding some new controls to the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to use two controls that are only available to
    Windows applications with WinUI. We are going to change the `SplitButton` to allow
    users to save and return to a list of items, or save and continue adding another
    item to the item details page. Then, we will add a `TeachingTip` control to inform
    users of the new saving capabilities. To follow along with these steps, you can
    use the starter project on GitHub ([https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter05/Start](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter05/Start)).
    Let’s start by updating the **Save** button.
  prefs: []
  type: TYPE_NORMAL
- en: Using the SplitButton control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in `ItemDetailsViewModel`, add a new `SaveItemAndContinue` method to
    be bound to the `Click` event of our new `SplitButton` control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `SaveItemAndContinue` method, we are calling `Save` and then resetting
    all the item state data so that it’s ready for a new item to be entered. The one
    problem here is that `Save` currently navigates back to the previous page. Let’s
    fix that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To remove the call from `Save` to return to the previous page, we need a new
    method for the `SaveItemAndReturn`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are calling `Save` and then navigating back to the previous page. The
    call to `_navigationService.GoBack` can now be removed from `Save`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We’re currently using `x:Bind` to bind directly to the save methods instead
    of using `ICommand`. So, you can remove the `RelayCommand` attribute from `Save`
    and the `CanSaveItem` method from `ItemDetailsViewModel`. You will also need to
    remove the `NotifyCanExecuteChangedFor` attribute from the `isDirty` private member.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, open `ItemDetailsPage` and update the `SplitButton` control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The content of `SplitButton` has been updated to `Save and Return`. We’ve also
    updated the binding to use the `Click` event to invoke the action and the `IsEnabled`
    property with `IsDirty`. A new child `Flyout` item is also added. `Flyout` contains
    a `StackPanel` control with `Button` controls for both the `Click` event invoking
    `SaveItemAndContinue`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'That’s it! Now, run the application and try out this new feature. Here’s how
    the new button looks when you click the drop-down arrow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Using the new SplitButton control to save items](img/B20908_05_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Using the new SplitButton control to save items
  prefs: []
  type: TYPE_NORMAL
- en: Adding a TeachingTip control to the Save button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `TeachingTip` control is a great way to educate users about features in your
    application. It is a small popup with header text and content text. You may have
    seen them in some of the Windows applications you use.
  prefs: []
  type: TYPE_NORMAL
- en: '`TeachingTip` can either be linked to a control on the page or it can be placed
    directly on the page with an optional `PreferredPlacement` property, controlling
    where it appears on the page. It can be configured to be dismissed by the user
    with a **Close** button or automatically when the user starts interacting with
    the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a `TeachingTip` control for our `SplitButton` control, add it to the
    `Resources` control in `ItemDetailsPage`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `TeachingTip` control, we’re binding `Target` to `SaveButton` and
    setting `Title` and `Subtitle` to educate users about the new **Save and create**
    **new** feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s an additional call needed in the `ItemDetailsPage` constructor to make
    the tip appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you run the application now, `TeachingTip` is going to appear every time
    the user opens `ItemDetailsPage`. This is going to quickly annoy our users. We
    can add a little bit of code to `ItemDetailsPage.xaml.cs` to save a user-level
    setting indicating that the current user has already seen this `TeachingTip` control.
    Then, the next time we load the page, we’ll check this setting so that the app
    can skip the code that displays the tip.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to leverage Windows local storage to save and load the user setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, the user will only see this tip the first time they load `ItemDetailsPage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see our `TeachingTip` control in action. Run the application, select
    an item, and click `ItemDetailsPage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Using the new TeachingTip control](img/B20908_05_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Using the new TeachingTip control
  prefs: []
  type: TYPE_NORMAL
- en: Now, the application has a new feature and a great way to inform users of how
    to use it. Let’s wrap up and discuss what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored many of the controls available in WinUI 3\. We
    learned that the **WinUI 3 Gallery** application is a great tool for exploring
    the controls available to WinUI developers. We also explored some of the features
    in the Windows App SDK that are not part of WinUI. At the end, we learned about,
    and added, a couple of new WinUI controls to our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn more about services and will start persisting
    the data for our media items between sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which WinUI control can display Lottie animations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which WinUI control can display HTML content with the Chromium-based Microsoft
    Edge browser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you create a WinUI 3 app with C++?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which control would you use to educate users about a new feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which application can you download from the Microsoft Store to learn about all
    the WinUI controls?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of control can be used to save and load user settings between sessions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Windows App SDK feature would you use to notify users when your app has
    a new message to be viewed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
