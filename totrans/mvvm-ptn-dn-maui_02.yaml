- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: What is .NET MAUI?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是.NET MAUI？
- en: Writing mobile applications for different platforms is hard, especially when
    it comes to creating cross-platform apps that run smoothly on different devices
    and operating systems. **.NET MAUI** (**Multi-platform App UI**) is a framework
    that aims to simplify this process by allowing developers to build native and
    performant cross-platform desktop and mobile apps for iOS, macOS, Android, and
    Windows – all from a single code base.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为不同平台编写移动应用程序很困难，尤其是当涉及到创建在不同设备和操作系统上运行顺畅的跨平台应用程序时。**.NET MAUI**（**多平台应用程序用户界面**）是一个旨在通过允许开发者构建针对iOS、macOS、Android和Windows的原生和性能卓越的跨平台桌面和移动应用程序来简化这一过程的框架——所有这些都可以从单个代码库中完成。
- en: In this chapter, we’ll take a look at the .NET MAUI framework. In order to thoroughly
    understand what this framework is and what it does, we’ll discuss its core concept,
    how it works, its features, and its benefits. We will also look at what is needed
    to start building a .NET MAUI app, installing the necessary bits, and creating
    a new app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将探讨.NET MAUI框架。为了彻底理解这个框架是什么以及它做什么，我们将讨论其核心概念、工作原理、特性和优势。我们还将查看开始构建.NET
    MAUI应用程序所需的要素，安装必要的组件，以及创建新应用程序。
- en: After reading this chapter, you will have a solid understanding of what the
    .NET MAUI framework is and how it works. You will also know how to install the
    necessary tools to start building a .NET MAUI app and be able to create a new
    app from scratch. With this knowledge, you’ll be well equipped to start developing
    cross-platform apps using the .NET MAUI framework.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章后，您将对.NET MAUI框架及其工作原理有一个扎实的理解。您还将了解如何安装必要的工具以开始构建.NET MAUI应用程序，并能够从头开始创建新应用程序。有了这些知识，您将准备好开始使用.NET
    MAUI框架开发跨平台应用程序。
- en: 'In this chapter, we will go through the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将探讨以下主要主题：
- en: .NET MAUI in a nutshell
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET MAUI概述
- en: How does it work?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: Creating your first .NET MAUI app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个.NET MAUI应用程序
- en: Before we start applying MVVM to .NET MAUI, it is essential to know the framework
    itself.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始将MVVM应用于.NET MAUI之前，了解该框架本身是至关重要的。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The final section of this chapter, *Creating your first .NET MAUI app*, guides
    you through everything you need to set up in order to create a .NET MAUI app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分，*创建您的第一个.NET MAUI应用程序*，将指导您完成创建.NET MAUI应用程序所需的所有设置。
- en: The sample code can be found on GitHub at [https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter02](https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter02).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可以在GitHub上找到：[https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter02](https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter02)。
- en: .NET MAUI in a nutshell
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET MAUI概述
- en: '**.NET MAUI** is a framework from Microsoft for building native and performant
    cross-platform desktop and mobile apps for iOS, macOS, Android, and Windows, all
    from a single code base. Moreover, .NET MAUI’s reach extends beyond these primary
    platforms, thanks to Samsung’s efforts in adding support for Tizen OS. This additional
    support opens up possibilities for developers to target a wider variety of devices,
    such as smart TVs, wearables, and IoT devices that run on Tizen. However, for
    the purposes of this book, we’ll focus on building apps for iOS, macOS, Android,
    and Windows. Using .NET MAUI, developers can create native cross-platform user
    interfaces using XAML or C#. The key idea is to share your code, both business
    logic and UI, across all the supported platforms (*Figure 2**.1*).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET MAUI** 是微软的一个框架，用于构建针对iOS、macOS、Android和Windows的原生和性能卓越的跨平台桌面和移动应用程序，所有这些都可以从单个代码库中完成。此外，得益于三星在添加对Tizen
    OS支持方面的努力，.NET MAUI的适用范围超出了这些主要平台。这种额外的支持为开发者提供了针对更广泛设备的机会，例如运行Tizen的智能电视、可穿戴设备和物联网设备。然而，为了本书的目的，我们将专注于为iOS、macOS、Android和Windows构建应用程序。使用.NET
    MAUI，开发者可以使用XAML或C#创建原生跨平台用户界面。关键思想是在所有支持的平台上共享代码，包括业务逻辑和UI（*图2.1*）。'
- en: '![Figure 2.1: .NET MAUI high-level overview](img/Image_B20941_02_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1：.NET MAUI高级概述](img/Image_B20941_02_01.jpg)'
- en: 'Figure 2.1: .NET MAUI high-level overview'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：.NET MAUI高级概述
- en: It’s important to notice that having this shared code base in .NET MAUI doesn’t
    restrict you from accessing native platform-specific APIs using C#. In fact, .NET
    MAUI is designed to allow developers to access native features while maintaining
    a consolidated code base. .NET MAUI’s rich library of cross-platform APIs forms
    an abstraction layer for common tasks that are typically platform-specific. Yet,
    when a certain feature requires a native platform API that is not available in
    .NET MAUI’s cross-platform API, you still have the ability to directly use native
    platform APIs via C#. Through mechanisms such as partial classes, compiler directives,
    or dependency injection, .NET MAUI ensures that developers can achieve the optimal
    level of customization and functionality for their applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，在.NET MAUI中拥有这个共享代码库并不会限制你使用C#访问原生平台特定API。实际上，.NET MAUI旨在允许开发者访问原生功能，同时保持统一的代码库。.NET
    MAUI丰富的跨平台API库为常见任务提供了一个抽象层，这些任务通常是特定平台的。然而，当某个功能需要.NET MAUI的跨平台API中不可用的原生平台API时，你仍然可以直接通过C#使用原生平台API。通过部分类、编译器指令或依赖注入等机制，.NET
    MAUI确保开发者能够为他们的应用实现最佳程度的定制和功能。
- en: Reminiscent of Xamarin.Forms
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回忆起Xamarin.Forms
- en: This might sound familiar to developers who previously have heard of or have
    worked with **Xamarin.Forms**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能对之前听说过或使用过**Xamarin.Forms**的开发者来说很熟悉。
- en: In fact, .NET MAUI is an evolution of Xamarin.Forms with many obvious and subtle
    differences. One of the significant differences is its integration into .NET starting
    with .NET 6\. This integration means that developers no longer need to install
    additional NuGet packages or extensions for .NET MAUI, simplifying the setup process.
    Once the required **.NET workloads** for MAUI are installed, developers can start
    building applications right away.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，.NET MAUI是Xamarin.Forms的演变，具有许多明显和微妙的不同之处。其中一个显著的不同点是其从.NET 6开始集成到.NET中。这种集成意味着开发者不再需要安装额外的NuGet包或扩展来使用.NET
    MAUI，简化了设置过程。一旦安装了MAUI所需的**.NET工作负载**，开发者就可以立即开始构建应用程序。
- en: Also, as a first-class citizen of .NET, MAUI benefits from improved tooling
    and developer experience in Visual Studio, making it more convenient and efficient
    to create mobile apps using the framework. This seamless integration and enhanced
    tooling help developers build cross-platform applications more easily and effectively.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，作为.NET的一等公民，MAUI从Visual Studio中受益于改进的工具和开发者体验，使得使用该框架创建移动应用变得更加方便和高效。这种无缝集成和增强的工具支持开发者更轻松、更有效地构建跨平台应用。
- en: 'But the main core idea remains the same: enabling developers to build native
    and performant cross-platform applications using .NET, with a single shared code
    base for both business logic and UI code. This approach simplifies the development
    process and promotes code reusability across different platforms, while providing
    the flexibility to access platform-specific APIs when needed, ensuring that developers
    can leverage native features and customize their applications as required.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但主要的核心思想保持不变：使开发者能够使用.NET构建原生和性能卓越的跨平台应用，同时拥有单一共享的代码库，用于业务逻辑和UI代码。这种方法简化了开发过程，并促进了不同平台间的代码重用，同时提供了在需要时访问平台特定API的灵活性，确保开发者能够利用原生功能并按需定制他们的应用。
- en: .NET MAUI is built upon the same foundational principles as Xamarin.Forms, but
    additionally incorporates all the learnings from almost a decade of developer
    experience from its predecessor. By improving various aspects such as performance,
    project structure, and tooling, .NET MAUI aims to simplify the process of creating
    cross-platform applications while maintaining the core ideas of sharing business
    logic and UI code, and allowing easy access to platform-specific APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI建立在Xamarin.Forms相同的基础原则上，但还结合了其前驱近十年的开发者经验。通过改进性能、项目结构和工具等方面，.NET MAUI旨在简化创建跨平台应用的过程，同时保持共享业务逻辑和UI代码的核心思想，并允许轻松访问平台特定API。
- en: Cross-platform UI and more
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台UI和更多
- en: One of the things .NET MAUI does is, of course, allowing us to create a shared
    UI for mobile and desktop apps. The framework offers us concepts such as `Grid`,
    `VerticalStackLayout`, `AbsoluteLayout`, and so on, which gives us the ability
    to carry out layout controls in many different ways. As a developer, you get the
    choice of whether you want to define your layouts in XAML or in code. Whatever
    approach you choose, the same thing can be achieved with both. On top of that,
    we also get data binding, an essential concept for effectively doing MVVM, as
    we learned in the previous chapter. With built-in page types such as `FlyoutPage`,
    `TabbedPage`, `NavigationPage`, and others, we can create applications with advanced
    navigation patterns. And remember, all of this eventually gets transformed into
    a native app running a native UI!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI当然允许我们为移动和桌面应用程序创建共享UI。该框架为我们提供了诸如`Grid`、`VerticalStackLayout`、`AbsoluteLayout`等概念，这使我们能够以许多不同的方式执行布局控制。作为开发者，你可以选择是否要在XAML中或代码中定义你的布局。无论你选择哪种方法，都可以实现相同的效果。此外，我们还获得了数据绑定，这是我们在上一章中学到的MVVM的一个基本概念。通过内置的页面类型，如`FlyoutPage`、`TabbedPage`、`NavigationPage`等，我们可以创建具有高级导航模式的应用程序。记住，所有这些最终都会转换成运行本地UI的原生应用！
- en: Cross-platform APIs
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨平台API
- en: 'But let’s not forget that there is more to .NET MAUI than just the UI stuff.
    .NET MAUI provides cross-platform APIs that abstract away the platform-specific
    implementations for common tasks, enabling developers to access native device
    features using a single, unified API – accessing the device’s compass, geolocation,
    filesystem, and so on – just to name a few. This allows us to write platform-agnostic
    code for such tasks, further simplifying the development process and promoting
    code reusability across different platforms. Some of the cross-platform APIs offered
    by .NET MAUI include the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不要忘记.NET MAUI不仅仅只是UI相关。.NET MAUI提供了跨平台API，这些API抽象了常见任务的平台特定实现，使开发者能够使用单个统一的API访问原生设备功能——访问设备的指南针、地理位置、文件系统等——仅举几个例子。这使我们能够为这些任务编写平台无关的代码，进一步简化开发过程并促进不同平台间的代码重用。.NET
    MAUI提供的跨平台API包括以下内容：
- en: '**Device Information**: Retrieve device-specific information, such as model,
    manufacturer, platform, and OS version.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备信息**: 获取设备特定的信息，例如型号、制造商、平台和操作系统版本。'
- en: '**Geolocation**: Access the device’s location services to obtain GPS coordinates,
    perform geocoding and reverse geocoding, and track the device’s movement.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理位置**: 访问设备的位置服务以获取GPS坐标，执行地理编码和反向地理编码，并跟踪设备的移动。'
- en: '**Connectivity**: Determine the device’s network connectivity status and monitor
    for changes.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接性**: 确定设备的网络连接状态并监控变化。'
- en: '**Permissions**: Request and manage various runtime permissions required by
    your application, such as location, camera, and storage access.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限**: 请求和管理应用程序所需的各项运行时权限，如位置、相机和存储访问。'
- en: '**Sensors**: Utilize device sensors such as the accelerometer, gyroscope, magnetometer,
    and barometer to gather data about the device’s orientation, movement, and environment.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传感器**: 利用设备传感器，如加速度计、陀螺仪、磁力计和气压计，来收集有关设备方向、运动和环境的数据。'
- en: '**Preferences**: Store and retrieve simple key-value data for app settings
    and user preferences. Use the **Secure Storage** API to do this for sensitive
    data that needs to be secured.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首选项**: 存储和检索用于应用程序设置和用户首选项的简单键值数据。使用**安全存储**API来存储需要安全的数据。'
- en: '**Launcher**: Launch another app using that application’s URI scheme. There
    is also the **Browser** API if you want to open a website using the OS default
    browser.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动器**: 使用该应用的URI方案启动另一个应用。如果您想使用操作系统的默认浏览器打开网站，还可以使用**浏览器**API。'
- en: And there are many, many more!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多许多其他功能！
- en: What about Xamarin.Essentials?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Xamarin.Essentials呢？
- en: Xamarin.Essentials is an open source library that was created to assemble cross-platform
    APIs for mobile applications, serving as an abstraction on top of common platform-specific
    tasks. With the evolution of Xamarin.Forms into .NET MAUI, these APIs are now
    more seamlessly integrated into the framework itself. This means the Xamarin.Essentials
    NuGet package is not needed in .NET MAUI applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Essentials是一个开源库，旨在为移动应用程序创建跨平台的API，作为常见平台特定任务的抽象层。随着Xamarin.Forms向.NET
    MAUI的演变，这些API现在更无缝地集成到框架本身中。这意味着在.NET MAUI应用程序中不需要Xamarin.Essentials NuGet包。
- en: Cross-platform life cycle events
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨平台生命周期事件
- en: .NET MAUI introduces a **uniform app life cycle**, which simplifies the management
    of application state across different platforms. In traditional Xamarin.Forms
    development, each platform had its own life cycle events and patterns, which sometimes
    led to inconsistencies and increased complexity when dealing with cross-platform
    scenarios.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI引入了**统一的app生命周期**，这简化了跨平台应用状态的管理。在传统的Xamarin.Forms开发中，每个平台都有自己的生命周期事件和模式，这有时会导致在处理跨平台场景时出现不一致性和复杂性增加。
- en: Through the `Window` class, we can now react to the life cycle of our applications
    using a single set of events, regardless of the target platform.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Window`类，我们现在可以使用单一的事件集来响应我们应用程序的生命周期，无论目标平台是什么。
- en: The easiest way to subscribe to these events is by getting a reference to the
    application window via the `CreateMethod` in your `App` class and then subscribing
    to the events relevant to you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅这些事件的最简单方法是通过在`App`类中的`CreateMethod`获取应用程序窗口的引用，然后订阅相关的事件。
- en: These events allow us to handle a couple of life cycle events in a consistent
    manner across all supported platforms. Depending on our needs or our scenario,
    we can use these event handlers, for example, to stop long-running processes (in
    the `Stopped` event handler) or refresh the data on the current page (on the `Resumed`
    event). A pattern I often see in banking apps is that the app’s UI gets obfuscated
    or blurred when it’s put in the background or when it hasn’t got focus. This could
    typically be handled in a cross-platform way with the help of the `Deactivated`
    and `Activated` events.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件使我们能够以一致的方式处理所有支持平台上的几个生命周期事件。根据我们的需求或场景，我们可以使用这些事件处理器，例如，在`Stopped`事件处理器中停止长时间运行的过程，或者在`Resumed`事件中刷新当前页面的数据。在银行应用程序中，我经常看到当应用程序被置于后台或没有获得焦点时，其UI会变得模糊或模糊不清。这通常可以通过使用`Deactivated`和`Activated`事件以跨平台的方式进行处理。
- en: 'As always with .NET MAUI, abstractions such as these should not prevent you
    from accessing platform APIs or doing platform-specific things. If you need to
    react to a certain platform-specific life cycle event, you can still do that.
    Through the `ConfigureLifecycleEvents` extension method of `MauiAppBuilder`, we
    can define delegates that should be invoked on the life cycle events of the underlying
    platforms:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与.NET MAUI一样，这些抽象不应阻止您访问平台API或执行特定平台的事情。如果您需要响应某个特定平台的生命周期事件，您仍然可以这样做。通过`MauiAppBuilder`的`ConfigureLifecycleEvents`扩展方法，我们可以在底层平台的生命周期事件上定义应该被调用的委托：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, if we want our app to be activated through a custom URI scheme,
    we might want to intercept the URL that triggered the app to open and react to
    that. Getting a hold on that URL can only be done on specific life cycle events
    on each platform: the `OnCreate` method on Android and `OpenUrl` on iOS. We can
    override these methods in `MainActivity` or `AppDelegate`, respectively, as we
    used to do with Xamarin.Forms. Alternatively, we can hook into these platform
    events with the earlier-mentioned `ConfigureLifecycleEvents`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想让我们的应用程序通过自定义URI方案激活，我们可能希望拦截触发应用程序打开的URL并对其做出反应。要获取该URL，只能在每个平台的特定生命周期事件上完成：Android上的`OnCreate`方法和iOS上的`OpenUrl`。我们可以分别在`MainActivity`或`AppDelegate`中重写这些方法，就像我们以前使用Xamarin.Forms一样。或者，我们可以使用前面提到的`ConfigureLifecycleEvents`钩入这些平台事件：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Instead of having this kind of code scattered throughout your solution in platform-specific
    classes and files, I think the preceding solution is a lot more elegant as everything
    is in one place. I think this improves the readability and maintainability of
    your code a lot!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与在平台特定的类和文件中分散这种类型的代码相比，我认为前面的解决方案要优雅得多，因为所有内容都在一个地方。我认为这大大提高了代码的可读性和可维护性！
- en: Single project structure (multi-targeting)
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单个项目结构（多目标）
- en: .NET MAUI also introduces a brand-new single project structure. Instead of having
    different projects per targeted platform and one project for the shared code,
    with .NET MAUI, we can build apps for different platforms from just one project.
    Not only the shared code, but also the platform-specific implementations, and
    resources, such as images, fonts, and app icons, are included directly within
    this one single project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI还引入了一种全新的单项目结构。与每个目标平台都有一个项目以及一个共享代码项目不同，使用.NET MAUI，我们可以从单个项目构建针对不同平台的应用程序。不仅共享代码，还包括平台特定的实现、资源，如图像、字体和应用程序图标，都直接包含在这个单一的项目中。
- en: 'This is possible thanks to the `MSBuild`, the build system used by .NET and
    .NET MAUI. With multi-targeting, we can basically put all our code in one project
    and define for what platforms the project should be built. These target platforms
    are defined in the project’s `csproj` file. By default, in .NET MAUI, it looks
    like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这得益于 `MSBuild`，它是 .NET 和 .NET MAUI 所使用的构建系统。通过多目标构建，我们基本上可以将所有代码放在一个项目中，并定义项目应该为哪些平台构建。这些目标平台在项目的
    `csproj` 文件中定义。在 .NET MAUI 中，默认情况下看起来是这样的：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, for a standard .NET MAUI project, this means we are targeting Android, iOS,
    Mac Catalyst, and Windows – the latter only when running on Windows.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于一个标准的 .NET MAUI 项目，这意味着我们针对的是 Android、iOS、Mac Catalyst 和 Windows – 后者仅在
    Windows 上运行时。
- en: 'When compiling, `MSBuild` will build for all the configured platforms, only
    taking the source files that are relevant to the platform it is compiling for
    and handling dependencies based on the specified target framework. In other words:
    one project results in multiple compiled libraries or apps, which on their own
    only contain the source code that is relevant for the platform it is compiled
    for. But how does `MSBuild` know which platform-specific files to take? There
    are a few ways of informing the build system which sources to take:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，`MSBuild` 会为所有配置的平台构建，只取与它编译的平台相关的源文件，并根据指定的目标框架处理依赖项。换句话说：一个项目会产生多个编译库或应用，这些库或应用本身只包含为编译平台相关的源代码。但
    `MSBuild` 如何知道要取哪些特定平台的文件呢？有几种方法可以通知构建系统要取哪些源文件：
- en: '`#if`, `#elif`, `#else`, and `#endif`) in your code to conditionally compile
    platform-specific code blocks. These directives enable you to include platform-specific
    code within a single source file, making it easier to share code across platforms
    and reducing the need for multiple files. For example, code surrounded by `#if
    ANDROID` and `#endif` will only be included and compiled when explicitly compiling
    for Android. The previous code sample about handling platform-specific life cycle
    events also contains these directives as the code they surround is only relevant
    to a particular platform and uses APIs specific to that platform.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的代码中使用 `#if`, `#elif`, `#else`, 和 `#endif` 来条件编译特定平台的代码块。这些指令允许你在单个源文件中包含特定平台的代码，从而更容易地在不同平台间共享代码，并减少对多个文件的需求。例如，被
    `#if ANDROID` 和 `#endif` 包围的代码只有在明确编译为 Android 时才会被包含和编译。关于处理特定平台生命周期事件的先前代码示例中也包含这些指令，因为它们所包围的代码仅与特定平台相关，并使用该平台特定的
    API。
- en: '`MSBuild` will only include the contents of `Platforms/Android`, `Platforms/iOS`,
    `Platforms/Windows`, or `Platforms/MacCatalyst` when compiling for the corresponding
    platform. This allows us, without using preprocessor directives, to write platform-specific
    code in these folders that accesses native APIs. Proof of this is when looking
    at the default `Program` class in `Platforms/iOS`, there is a `UIKit.UIApplication`
    object being used, which is an object specific to iOS. To give an analogy, the
    `MainActivity` class in `Platforms/Android` uses `Android.App.ActivityAttribute`,
    something specifically for Android.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当为相应平台编译时，`MSBuild` 只会包含 `Platforms/Android`、`Platforms/iOS`、`Platforms/Windows`
    或 `Platforms/MacCatalyst` 中的内容。这允许我们，在不使用预处理器指令的情况下，在这些文件夹中编写访问原生 API 的特定平台代码。这一点可以从查看默认的
    `Platforms/iOS` 中的 `Program` 类中得到证明，其中使用了 `UIKit.UIApplication` 对象，这是一个特定于 iOS
    的对象。为了类比，`Platforms/Android` 中的 `MainActivity` 类使用了 `Android.App.ActivityAttribute`，这是特定于
    Android 的。
- en: Not only do these platform-specific folders contain platform-specific code,
    but they also contain resources that are unique to the specific platform –`Package.appxmanifest`
    in `Platforms/Windows` or `Info.plist` in `Platforms/MacCatalyst`, for example.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不仅这些特定平台的文件夹包含特定平台的代码，还包含特定平台独有的资源 – 例如 `Platforms/Windows` 中的 `Package.appxmanifest`
    或 `Platforms/MacCatalyst` 中的 `Info.plist`。
- en: '`csproj` file for this. This can be combined with platform-specific folders
    as well.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将这些与特定平台的文件夹结合使用在 `csproj` 文件中。
- en: Take a look at [https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting](https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting)
    to get a detailed approach on how to configure filename-based multi-targeting
    and how to combine it with platform-specific folders. Whatever approach you want
    to use is mostly personal preference and is completely up to you and your team
    to decide.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请查看 [https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting](https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting)
    以获取有关如何配置基于文件名的多目标配置以及如何将其与特定平台文件夹结合使用的详细方法。您想使用的方法主要是个人偏好，完全取决于您和您的团队来决定。
- en: 'In Visual Studio, when inside a .NET MAUI project, there is an additional dropdown
    available, called the **Platform Selector**, which allows you to select one of
    the target platforms. By default, this dropdown can be found in the top left of
    your code editor when inside a C# code file (*Figure 2**.2*):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '在 Visual Studio 中，当处于 .NET MAUI 项目内部时，还有一个额外的下拉菜单可用，称为 **平台选择器**，允许您选择一个目标平台。默认情况下，当在
    C# 代码文件中时，此下拉菜单位于代码编辑器的右上角 (*图 2.2*):'
- en: '![Figure 2.2: Platform Selector](img/Image_B20941_02_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2：平台选择器](img/Image_B20941_02_02.jpg)'
- en: 'Figure 2.2: Platform Selector'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：平台选择器
- en: Selecting an entry in this dropdown doesn’t affect the compilation. The selected
    platform’s purpose is to configure the development environment for that specific
    platform. That means, when working with preprocessor directives, it displays platform-specific
    code and makes sure IntelliSense and code navigation features are adjusted to
    work on the platform-specific code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在此下拉菜单中选择一个条目不会影响编译。所选平台的作用是为该特定平台配置开发环境。这意味着，当使用预处理器指令时，它会显示特定平台的代码，并确保智能感知和代码导航功能调整以在特定平台的代码上工作。
- en: '*Figure 2**.3* shows how the IDE grays out code that doesn’t get compiled in
    the selected target platform (Android).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.3* 展示了 IDE 如何将所选目标平台（Android）中未编译的代码变灰。'
- en: '![Figure 2.3: Android as the selected target platform](img/Image_B20941_02_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3：Android 作为选定的目标平台](img/Image_B20941_02_03.jpg)'
- en: 'Figure 2.3: Android as the selected target platform'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：Android 作为选定的目标平台
- en: 'In the selected configuration, the code surrounded with `#if ANDROID` will
    get compiled; the iOS-specific code, however, will be ignored. Moreover, we don’t
    get red squiggles in the IDE even though the iOS part has an error: the `OpenUrls`
    method doesn’t exist, as `OpenUrl` is the correct name. This error only becomes
    visible when selecting iOS as the target platform in the **Platform Selector**
    dropdown (*Figure 2**.4*).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在所选配置中，被 `#if ANDROID` 包围的代码将被编译；然而，iOS 特定的代码将被忽略。此外，即使在 IDE 中 iOS 部分有错误（`OpenUrls`
    方法不存在，因为 `OpenUrl` 是正确的名称），我们也不会得到红色的波浪线。只有在将目标平台在 **平台选择器** 下拉菜单中选为 iOS 时，此错误才会变得可见
    (*图 2.4*).
- en: '![Figure 2.4: iOS as the selected target platform](img/Image_B20941_02_04.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4：iOS 作为选定的目标平台](img/Image_B20941_02_04.jpg)'
- en: 'Figure 2.4: iOS as the selected target platform'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：iOS 作为选定的目标平台
- en: By selecting iOS as the build target, all the iOS-specific code lights up, while
    code specific to other platforms gets grayed out.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择 iOS 作为构建目标，所有特定于 iOS 的代码都会亮起，而其他平台的特定代码则会变灰。
- en: This dropdown helps tremendously when writing platform-specific code!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此下拉菜单在编写特定平台的代码时非常有帮助！
- en: Note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To conclude, .NET MAUI is *a modern framework for building cross-platform native
    applications for mobile and desktop devices*. It supports Android, iOS, macOS,
    and Windows. It offers a shared UI layer with a rich set of controls, cross-platform
    APIs for common tasks, unified app life cycle events across different platforms,
    and a single project structure that simplifies development and deployment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，.NET MAUI 是 *一个用于构建移动和桌面设备的跨平台原生应用的现代框架*。它支持 Android、iOS、macOS 和 Windows。它提供了一个共享的
    UI 层，包含丰富的控件，跨平台的常见任务 API，不同平台间统一的应用生命周期事件，以及简化开发和部署的单个项目结构。
- en: How does it work?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: So now that we have a good understanding of .NET MAUI, you might wonder how
    this actually works. How does this .NET code eventually end up as a native app
    with a native UI on different platforms? It’s not magic, but to understand how
    it works, we need to take a look under the hood.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经对 .NET MAUI 有了一个很好的理解，你可能会想知道这实际上是如何工作的。这段 .NET 代码最终是如何变成在不同平台上具有本地 UI
    的原生应用的？这并不是魔法，但要理解它是如何工作的，我们需要看看它的内部结构。
- en: Native apps with .NET
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 .NET 创建原生应用
- en: At compile time, native apps for each selected platform are being created. The
    necessary parts of the .NET **Base Class Library** (**BCL**), which contains the
    .NET datatypes, interfaces, and libraries, are embedded in the native app and
    tailored to the target platform. The BCL relies on the **.NET runtime** to create
    an execution environment for your application code. For Android, iOS, and macOS
    platforms, the **Mono runtime** serves as the .NET runtime implementation that
    powers the execution environment. Meanwhile, on Windows, **.NET CoreCLR** is responsible
    for providing the runtime environment for your application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，为每个选定的平台创建原生应用程序。.NET **基类库**（**BCL**）的必要部分，其中包含 .NET 数据类型、接口和库，被嵌入到原生应用程序中，并针对目标平台进行定制。BCL
    依赖于 **.NET 运行时**来为您的应用程序代码创建执行环境。对于 Android、iOS 和 macOS 平台，**Mono 运行时**作为 .NET
    运行时实现，为执行环境提供动力。同时，在 Windows 上，**.NET CoreCLR** 负责为您的应用程序提供运行时环境。
- en: This mechanism isn’t specific to .NET MAUI. This is actually the foundation
    for **.NET for Android**, **.NET for iOS**, **.NET for Mac**, and **WinUI**. These
    things might sound like something new, but in fact, these are the new names for
    the things that we previously might have known as **Xamarin.Android**, **Xamarin.iOS**,
    and **Xamarin.Mac**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种机制并不仅限于 .NET MAUI。这实际上是 **.NET for Android**、**.NET for iOS**、**.NET for Mac**
    和 **WinUI** 的基础。这些听起来可能像是新事物，但实际上，这些是我们之前可能知道的新名字，即 **Xamarin.Android**、**Xamarin.iOS**
    和 **Xamarin.Mac**。
- en: .NET for Android, .NET for iOS, and .NET for Mac provide bindings to platform-specific
    APIs, enabling developers to access specific features and controls using familiar
    .NET constructs. On Android, when the application is compiled, the .NET code is
    packaged with the Mono runtime, and the app is executed using **Just-in-Time**
    (**JIT**) compilation on Android devices. Due to Apple’s restrictions on JIT compilation,
    .NET for iOS applications is compiled using **Ahead-of-Time** (**AOT**) compilation,
    which translates the .NET code into native ARM code that runs directly on iOS
    devices.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: .NET for Android、.NET for iOS 和 .NET for Mac 提供了对平台特定 API 的绑定，使开发者能够使用熟悉的 .NET
    结构访问特定的功能和控件。在 Android 上，当应用程序编译时，.NET 代码与 Mono 运行时一起打包，并在 Android 设备上使用 **即时编译**（**JIT**）执行。由于苹果对
    JIT 编译的限制，.NET for iOS 应用程序使用 **提前编译**（**AOT**）编译，将 .NET 代码转换为在 iOS 设备上直接运行的本地
    ARM 代码。
- en: WinUI is a modern, native UI framework for building Windows applications using
    C# and XAML, using .NET. It is the latest version of **Windows UI Library**, which
    provides a set of UI controls, styles, and features for building fluent and high-performance
    Windows applications. Instead of the Mono runtime, it uses .NET CoreCLR as an
    execution environment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: WinUI 是一个使用 C# 和 XAML 构建 Windows 应用程序的现代、原生 UI 框架，它基于 .NET。这是 **Windows UI 库**的最新版本，它提供了一套
    UI 控件、样式和功能，用于构建流畅且高性能的 Windows 应用程序。它使用 .NET CoreCLR 作为执行环境，而不是 Mono 运行时。
- en: Each of these frameworks can be used to create native applications with .NET,
    utilizing the UI patterns and paradigms specific to each platform to build the
    UI.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些框架中的每一个都可以用来创建使用 .NET 的原生应用程序，利用每个平台特有的 UI 模式和范式来构建 UI。
- en: Tip
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Even though .NET for Android and .NET for iOS offer a way to share a significant
    amount of code, creating and maintaining apps with a native UI for each platform
    can still be very challenging. Developers need to be proficient in the specifics
    of each platform and have a deep understanding of the differences between them.
    This can lead to higher development costs, longer time-to-market, and increased
    maintenance efforts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 .NET for Android 和 .NET for iOS 提供了一种共享大量代码的方法，但为每个平台创建和维护具有原生 UI 的应用程序仍然可能非常具有挑战性。开发者需要精通每个平台的具体细节，并深入了解它们之间的差异。这可能导致更高的开发成本、更长的上市时间和增加的维护工作量。
- en: .NET MAUI, another abstraction layer
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI，另一个抽象层
- en: This is where .NET MAUI comes in. It provides a convenient and efficient way
    to create truly native mobile apps for multiple platforms using a single code
    base. .NET MAUI adds an abstraction layer on top of the previously mentioned .NET
    platforms, allowing us to build a shared UI for all of them (*Figure 2**.5*).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正是在这里，.NET MAUI 出现了。它提供了一种方便且高效的方法，使用单个代码库为多个平台创建真正的原生移动应用程序。.NET MAUI 在之前提到的
    .NET 平台上添加了一个抽象层，使我们能够为它们构建共享的 UI (*图 2**.5*)。
- en: '![Figure 2.5: .NET MAUI architecture](img/Image_B20941_02_05.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5: .NET MAUI 架构](img/Image_B20941_02_05.jpg)'
- en: 'Figure 2.5: .NET MAUI architecture'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.5: .NET MAUI 架构'
- en: The code in your .NET MAUI app primarily interacts with the .NET MAUI API, which
    in turn communicates with native platform APIs. Additionally, your .NET MAUI code
    can directly access platform-specific APIs to leverage unique platform features
    or customizations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 .NET MAUI 应用中的代码主要与 .NET MAUI API 交互，该 API 又反过来与原生平台 API 进行通信。此外，您的 .NET
    MAUI 代码可以直接访问特定平台的 API，以利用独特的平台功能或自定义。
- en: Let’s explore the process of transforming a cross-platform-defined UI into a
    native UI specific to each platform.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索将跨平台定义的 UI 转换为特定于每个平台的原生 UI 的过程。
- en: From virtual to native view
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从虚拟视图到原生视图
- en: When defining a UI in .NET MAUI, the platform-agnostic **controls** or **virtual
    views** are mapped to native UI elements or **native views** on each platform
    at runtime. The definition of .NET MAUI controls is often the most common denominator
    of the native controls it represents on all supported platforms. In some cases,
    platform-specific functionality is made available through platform-specific extensions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET MAUI 中定义 UI 时，平台无关的 **控件** 或 **虚拟视图** 在运行时会映射到每个平台的原生 UI 元素或 **原生视图**。.NET
    MAUI 控件的定义通常是它在所有支持平台上表示的原生控件的共同分母。在某些情况下，特定平台的功能通过特定平台的扩展提供。
- en: But how do we go from a virtual view to a native view?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何从虚拟视图转换到原生视图呢？
- en: The **handlers** architecture, introduced in .NET MAUI, manages the mapping
    of the virtual views to the native UI elements for each supported platform. Handlers
    are lightweight and performant components that replace the traditional renderers
    used in Xamarin.Forms. Each MAUI control has corresponding handlers that are responsible
    for creating, updating, and managing the native UI element on a specific platform.
    Handlers handle property changes, events, and platform-specific customizations,
    translating the shared MAUI control code into platform-specific native controls
    and behaviors.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 中引入的 **处理程序** 架构负责将虚拟视图映射到每个支持平台的原生 UI 元素。处理程序是轻量级且性能良好的组件，它们取代了在
    Xamarin.Forms 中使用的传统渲染器。每个 MAUI 控件都有相应的处理程序，负责在特定平台上创建、更新和管理原生 UI 元素。处理程序处理属性更改、事件和平台特定的自定义，将共享的
    MAUI 控件代码转换为特定平台的原生控件和行为。
- en: '*Figure 2**.6* shows how an instance of `Microsoft.Maui.Controls.Button` (Virtual
    View) gets mapped to a specific Native View:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.6* 展示了 `Microsoft.Maui.Controls.Button`（虚拟视图）实例如何映射到特定的原生视图：'
- en: On iOS, a handler maps the button to `UIKit.UIButton`. As .NET MAUI leverages
    Mac Catalyst to create native macOS applications, the same `UIKit.UIButton` is
    used for macOS. Mac Catalyst is a technology developed by Apple that allows developers
    to leverage the same project and source code to create native apps across iOS,
    iPadOS, and macOS.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 上，处理程序将按钮映射到 `UIKit.UIButton`。由于 .NET MAUI 利用 Mac Catalyst 创建原生 macOS
    应用程序，因此 macOS 也使用相同的 `UIKit.UIButton`。Mac Catalyst 是苹果开发的一项技术，允许开发者利用相同的项目和源代码在
    iOS、iPadOS 和 macOS 上创建原生应用。
- en: On Android, the button is being mapped by a handler to an instance of `AndroidX.AppCompat.Widget.AppCompatButton`.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 上，按钮是通过处理程序映射到 `AndroidX.AppCompat.Widget.AppCompatButton` 实例。
- en: An instance of `Microsoft.UI.Xaml.Controls.Button` is created by a handler on
    Windows when mapping a .NET MAUI button.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当映射 .NET MAUI 按钮时，Windows 上的处理程序创建 `Microsoft.UI.Xaml.Controls.Button` 实例。
- en: As you can see in *Figure 2**.6*, `ButtonHandlers` don’t have a direct reference
    to the `Button` implementation; neither does the `Button` implementation have
    a reference to `ButtonHandlers`. Instead, every control implements an interface
    that abstracts the control. The handlers are accessed through the control-specific
    interface, such as `IButton` for `Button`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 2.6* 所示，`ButtonHandlers` 没有直接引用 `Button` 实现；同样，`Button` 实现也没有引用 `ButtonHandlers`。相反，每个控件都实现了一个抽象控件的接口。处理程序通过特定于控件的接口访问，例如
    `IButton` 用于 `Button`。
- en: '![Figure 2.6: .NET MAUI’s handlers architecture](img/Image_B20941_02_06.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6：.NET MAUI 的处理程序架构](img/Image_B20941_02_06.jpg)'
- en: 'Figure 2.6: .NET MAUI’s handlers architecture'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6：.NET MAUI 的处理程序架构
- en: We’ve talked a lot about *mapping* but that is, in essence, really what is happening
    in these handlers. It is not a coincidence that a handler has one or more `PropertyMapper`
    but allows for an extra parameter to be passed. Handling cross-platform events
    such as `ScrollTo` on `ScrollView` is such an example. In order to make the native
    view scroll to the requested position, the position itself needs to be passed
    to the handler as an argument. This way, the handler can use this argument value
    to invoke the necessary action on the native view.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了很多关于 *映射* 的内容，但本质上，这正是这些处理器中发生的事情。处理器有一个或多个 `PropertyMapper` 并允许传递额外的参数并不是巧合。处理跨平台事件，例如
    `ScrollView` 上的 `ScrollTo`，就是一个例子。为了使原生视图滚动到请求的位置，位置本身需要作为参数传递给处理器。这样，处理器就可以使用这个参数值在原生视图中调用必要的操作。
- en: 'Compared to Xamarin.Forms’ renderers implementation, the handlers’ architecture
    offers several benefits: improved performance, easier customization, and better
    maintainability, making it a significant improvement point in transitioning from
    Xamarin.Forms to .NET MAUI.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Xamarin.Forms 的渲染器实现相比，处理器的架构提供了几个优点：改进的性能、更容易的自定义和更好的可维护性，这使得它在从 Xamarin.Forms
    过渡到 .NET MAUI 时成为一个重要的改进点。
- en: Now that we’ve covered a substantial amount of theory and you understand how
    things work under the hood, it’s time to roll up our sleeves and start creating
    something tangible. I know you’re keen to dive in, so let’s embark on building
    our very first .NET MAUI application!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了大量的理论，并且您了解了底层的工作原理，是时候卷起袖子开始创建一些有形的东西了。我知道您迫不及待地想要深入其中，那么让我们开始构建我们的第一个
    .NET MAUI 应用程序！
- en: Creating your first .NET MAUI app
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个 .NET MAUI 应用
- en: 'Let’s create our first .NET MAUI app! Before we can start writing any code,
    we need to set up our machine by installing some bits. So, let’s walk through
    these initial setup steps together and see what options we have. Once we’re set
    up, we’ll move on to the exciting part: creating a .NET MAUI app from scratch,
    step by step.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个 .NET MAUI 应用！在我们开始编写任何代码之前，我们需要通过安装一些组件来设置我们的机器。所以，让我们一起走过这些初始设置步骤，看看我们有哪些选择。一旦设置完成，我们就会进入令人兴奋的部分：从头开始逐步创建一个
    .NET MAUI 应用。
- en: Setting up your machine
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置您的机器
- en: Getting started with .NET MAUI development is pretty simple, especially if you
    are using Visual Studio as your IDE. But even if you don’t want to use Visual
    Studio, the installation should be quite straightforward.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 .NET MAUI 进行开发相当简单，尤其是如果您使用 Visual Studio 作为您的 IDE。即使您不想使用 Visual Studio，安装过程也应该相当直接。
- en: About .NET SDK versions and workloads
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于 .NET SDK 版本和工作负载
- en: '.NET MAUI is available from .NET 6, and at the time of writing the book, **.NET
    8** is the most recent version. It is important to note that every version of
    .NET comes with a specific support policy: there are **Long-Term Support** (**LTS**)
    releases, which provide 3 years of free support and patches, and there are **Standard-Term
    Support** (**STS**) releases, which are good for 18 months of free support and
    patches. However, for .NET MAUI, this doesn’t apply. Microsoft needs to make sure
    .NET MAUI supports the latest and greatest APIs on all of the supported platforms.
    New features and improvements will be mainly developed for the next version of
    .NET, and some may be backported to the current version. So, when it comes to
    .NET MAUI, the support policy is different than the general .NET support policy.
    It’s best to use the latest available version of .NET so you have access to the
    newest platform APIs and the best-performing version of .NET MAUI, regardless
    of whether it’s an LTS or STS release.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 从 .NET 6 开始提供，在撰写本书时，**.NET 8** 是最新的版本。需要注意的是，每个 .NET 版本都有一项特定的支持策略：有提供
    3 年免费支持和补丁的**长期支持**（**LTS**）版本，以及提供 18 个月免费支持和补丁的**标准支持**（**STS**）版本。然而，对于 .NET
    MAUI 来说，这并不适用。微软需要确保 .NET MAUI 支持所有受支持平台上的最新和最优秀的 API。新功能和改进将主要针对下一个版本的 .NET 开发，其中一些可能会回滚到当前版本。因此，当涉及到
    .NET MAUI 时，支持策略与一般的 .NET 支持策略不同。最好使用可用的最新版本的 .NET，这样您就可以访问最新的平台 API 和性能最佳的 .NET
    MAUI 版本，无论它是 LTS 还是 STS 版本。
- en: .NET 6 introduced the concept of **workloads**. A workload is a set of tools,
    templates, and libraries for a particular development scenario or target platform.
    When installing the .NET MAUI workload, we are installing everything that is needed
    to build cross-platform native apps with .NET. It will install the .NET MAUI class
    libraries, build and runtime components, platform-specific SDKs and tools, project
    templates, and so on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6 引入了 **工作负载** 的概念。工作负载是一组工具、模板和库，用于特定的开发场景或目标平台。当安装 .NET MAUI 工作负载时，我们正在安装构建跨平台原生应用程序所需的全部内容。它将安装
    .NET MAUI 类库、构建和运行时组件、特定平台的 SDK 和工具、项目模板等。
- en: 'The .NET MAUI workload can be installed and managed in two ways: using the
    Visual Studio Installer or via the command line if you choose not to work with
    Visual Studio.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 工作负载可以通过两种方式安装和管理：使用 Visual Studio 安装程序或如果您选择不使用 Visual Studio，则通过命令行。
- en: Tip
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'In order for your .NET MAUI workload to remain in a stable state, it is important
    to stick with one and only one of the following options: you either install it
    with Visual Studio and manage it from there, or you do it from the command line.
    Don’t mix the two!'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您的 .NET MAUI 工作负载保持稳定状态，重要的是坚持以下选项之一：您要么使用 Visual Studio 安装并从那里管理它，要么从命令行进行操作。不要混合使用两种方法！
- en: Installing Visual Studio and the .NET MAUI workload
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Visual Studio 和 .NET MAUI 工作负载
- en: 'When working with Visual Studio (2022 17.3 or greater), we can use the Visual
    Studio Installer to install the .NET MAUI workload. This is by far the easiest
    way to install and manage your workloads. .NET MAUI development is supported on
    all versions of Visual Studio: from the free Community edition to the paid Enterprise
    edition.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Visual Studio（2022 17.3 或更高版本）时，我们可以使用 Visual Studio 安装程序来安装 .NET MAUI 工作负载。这是迄今为止安装和管理您的工作负载最简单的方法。.NET
    MAUI 开发支持所有版本的 Visual Studio：从免费的社区版到付费的企业版。
- en: If Visual Studio is not yet installed on your machine, you first need to download
    the Visual Studio Installer by going to [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
    Once the installer is downloaded, launch it, and choose **Install** (*Figure 2**.7*)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的计算机上尚未安装 Visual Studio，您首先需要通过访问 [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
    下载 Visual Studio 安装程序。一旦安装程序下载完成，启动它，并选择 **安装** (*图 2.7*)。
- en: '![Figure 2.7: Installing Visual Studio](img/Image_B20941_02_07.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7：安装 Visual Studio](img/Image_B20941_02_07.jpg)'
- en: 'Figure 2.7: Installing Visual Studio'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：安装 Visual Studio
- en: Or, if you already have Visual Studio installed, you can launch the Visual Studio
    Installer and select **Modify** (*Figure 2**.8*).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您已经安装了 Visual Studio，您可以启动 Visual Studio 安装程序并选择 **修改** (*图 2.8*)。
- en: '![Figure 2.8: Modifying Visual Studio](img/Image_B20941_02_08.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8：修改 Visual Studio](img/Image_B20941_02_08.jpg)'
- en: 'Figure 2.8: Modifying Visual Studio'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：修改 Visual Studio
- en: Whether you are installing Visual Studio or modifying it, in the next dialog,
    you can choose the workloads you want to install. As shown in *Figure 2**.9*,
    this is where we need to check **.NET Multi-platform App** **UI development**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是在安装 Visual Studio 还是修改它，在下一个对话框中，您可以选择要安装的工作负载。如图 *图 2.9* 所示，这是我们需要检查 **.NET
    多平台应用程序** **UI 开发** 的地方。
- en: '![Figure 2.9: Installing the .NET MAUI workload](img/Image_B20941_02_09.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9：安装 .NET MAUI 工作负载](img/Image_B20941_02_09.jpg)'
- en: 'Figure 2.9: Installing the .NET MAUI workload'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：安装 .NET MAUI 工作负载
- en: This will install all the bits and pieces in order for you to be able to build
    .NET MAUI apps.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装所有必要的组件，以便您能够构建 .NET MAUI 应用程序。
- en: Having Visual Studio freshly installed, launch it, and select **Continue without
    code** (*Figure 2**.10*).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 新鲜安装后，启动它，并选择 **继续不使用代码** (*图 2.10*)。
- en: '![Figure 2.10: Starting Visual Studio without code](img/Image_B20941_02_10.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10：不使用代码启动 Visual Studio](img/Image_B20941_02_10.jpg)'
- en: 'Figure 2.10: Starting Visual Studio without code'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：不使用代码启动 Visual Studio
- en: 'In order to be able to debug on an Android emulator or an iOS simulator, we
    need to install or configure the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在 Android 模拟器或 iOS 模拟器上调试，我们需要安装或配置以下内容：
- en: Go to **Tools** | **Android** | **Android Device Manager**. From there, you
    can add Android emulators that you can use to deploy your .NET MAUI app.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往 **工具** | **Android** | **Android 设备管理器**。从这里，您可以添加您可以使用来部署您的 .NET MAUI 应用程序的
    Android 模拟器。
- en: From **Tools** | **iOS** | **Pair to Mac**, you can follow the steps in order
    to connect to a Mac in your network. When connected to a Mac, you can debug your
    app on an iOS simulator or on a physical device plugged into your Mac.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 **工具** | **iOS** | **连接到 Mac**，您可以按照步骤连接到您网络中的 Mac。连接到 Mac 后，您可以在 iOS 模拟器或连接到您的
    Mac 的物理设备上调试您的应用。
- en: Hot Restart
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 热重启
- en: Of course, you can also debug on a physical device, plugged into your PC. This
    is possible even on an iOS device! With Visual Studio **Hot Restart**, you can
    debug right onto your iPhone without having a Mac connected to your Windows machine.
    The only caveat is that you need an **Apple Developer Account**, an active **Apple
    Developer Program** enrollment (which is paid), and iTunes installed on your PC.
    As soon as you connect your iOS device to your computer and select it in Visual
    Studio as your debug target, Visual Studio will guide you through setting up Hot
    Restart, which will require you to enter your Apple Developer Account details.
    I would recommend heading over to [https://learn.microsoft.com/dotnet/maui/ios/hot-restart](https://learn.microsoft.com/dotnet/maui/ios/hot-restart)
    to get step-by-step guidance on how to set up Hot Restart on iOS. While this is
    great for debugging, in order to release an iOS or macOS app, you still need a
    Mac to build and sign your app!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以在连接到您的 PC 的物理设备上进行调试。这在 iOS 设备上也是可能的！使用 Visual Studio **热重启**，您可以直接在
    iPhone 上进行调试，而无需将 Mac 连接到 Windows 机器。唯一的限制是您需要一个 **Apple 开发者账号**、一个活跃的 **Apple
    开发者计划** 注册（这是付费的），并且需要在您的 PC 上安装 iTunes。一旦您将 iOS 设备连接到您的计算机并在 Visual Studio 中将其选为调试目标，Visual
    Studio 将引导您设置热重启，这需要您输入您的 Apple 开发者账号详细信息。我建议您访问 [https://learn.microsoft.com/dotnet/maui/ios/hot-restart](https://learn.microsoft.com/dotnet/maui/ios/hot-restart)
    以获取如何设置 iOS 上热重启的逐步指南。虽然这对于调试来说很棒，但为了发布 iOS 或 macOS 应用，您仍然需要一个 Mac 来构建和签名您的应用！
- en: Installing the .NET MAUI workload with the command line
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用命令行安装 .NET MAUI 工作负载
- en: Alternatively, if you are choosing an IDE other than Visual Studio, you need
    to install the .NET MAUI workload manually through the command line.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您选择的是除 Visual Studio 以外的其他 IDE，您需要通过命令行手动安装 .NET MAUI 工作负载。
- en: 'But before installing .NET MAUI, you need to make sure .NET is installed on
    your machine. You can do this by running the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 但在安装 .NET MAUI 之前，您需要确保您的机器上已安装 .NET。您可以通过运行以下命令来完成此操作：
- en: '[PRE3]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It should give you an overview of all .NET SDKs installed. As said earlier,
    .NET 6 is the minimum required .NET SDK needed to do .NET MAUI development. If
    the preceding command fails, as shown in *Figure 2**.11*, it means .NET is not
    yet installed on your machine. You should go to [https://dotnet.microsoft.com/download/dotnet](https://dotnet.microsoft.com/download/dotnet),
    select the latest version of .NET, and download the appropriate installer or binaries.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会为您提供所有已安装 .NET SDK 的概述。如前所述，.NET 6 是进行 .NET MAUI 开发所需的最低 .NET SDK。如果前面的命令失败，如
    *图 2**.11* 所示，这意味着 .NET 尚未安装到您的机器上。您应该访问 [https://dotnet.microsoft.com/download/dotnet](https://dotnet.microsoft.com/download/dotnet)，选择
    .NET 的最新版本，并下载适当的安装程序或二进制文件。
- en: '![Figure 2.11: ‘dotnet’ is not recognized](img/Image_B20941_02_11.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11: ''dotnet'' 不可识别](img/Image_B20941_02_11.jpg)'
- en: 'Figure 2.11: ‘dotnet’ is not recognized'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.11: ''dotnet'' 不可识别'
- en: 'Once a recent version of .NET is installed on your machine, you can install
    the .NET MAUI workload via the command line by using the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在您的机器上安装了最新的 .NET 版本，您可以通过以下命令通过命令行安装 .NET MAUI 工作负载：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will install everything that is needed to be able to build cross-platform
    apps with .NET MAUI using your favorite IDE.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装构建跨平台应用所需的全部内容，使用您喜欢的 IDE 通过 .NET MAUI 进行开发。
- en: Do note that this doesn’t install any additional tools for managing Android
    emulators, for example, nor does it give you out-of-the-box tools that allow you
    to easily connect to a Mac or deploy to an iPhone.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这不会安装任何用于管理 Android 模拟器的额外工具，例如，也不会提供开箱即用的工具，让您轻松连接到 Mac 或部署到 iPhone。
- en: Installing Visual Studio Code and the .NET MAUI extension
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Visual Studio Code 和 .NET MAUI 扩展
- en: 'If you prefer working with **Visual Studio Code**, whether it is on Windows,
    macOS, or even Linux, there’s some good news. The **.NET MAUI extension**, together
    with the **C# Dev Kit extension**, gives you everything you need to start creating
    MAUI apps with Visual Studio Code. The supported target platforms depend on the
    OS you are running. On Windows, you can create Windows and Android apps; on macOS,
    you are able to develop all but Windows apps; and on Linux, you can only create
    Android apps. Let’s see how we can get Visual Studio Code up and running for creating
    .NET MAUI apps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用 **Visual Studio Code**，无论是在 Windows、macOS 还是甚至 Linux 上，都有一些好消息。**.NET
    MAUI 扩展** 与 **C# 开发工具包扩展** 一起，为您提供开始使用 Visual Studio Code 创建 MAUI 应用所需的一切。支持的目标平台取决于您运行的操作系统。在
    Windows 上，您可以创建 Windows 和 Android 应用；在 macOS 上，您可以开发除 Windows 之外的所有应用；在 Linux
    上，您只能创建 Android 应用。让我们看看如何将 Visual Studio Code 配置好以创建 .NET MAUI 应用：
- en: 'Install Visual Studio Code from [https://code.visualstudio.com/](https://code.visualstudio.com/).
    Install the .NET MAUI extension from the `maui`, as shown in *Figure 2**.12*:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://code.visualstudio.com/](https://code.visualstudio.com/) 安装 Visual
    Studio Code。从 `maui` 安装 .NET MAUI 扩展，如图 2.12* 所示：
- en: '![Figure 2.12: .NET MAUI extension](img/Image_B20941_02_12.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12: .NET MAUI 扩展](img/Image_B20941_02_12.jpg)'
- en: 'Figure 2.12: .NET MAUI extension'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.12: .NET MAUI 扩展'
- en: 'Once the extension is installed, the **Welcome** page pops up in Visual Studio
    Code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了扩展，Visual Studio Code 中就会弹出 **欢迎** 页面：
- en: '![Figure 2.13: .NET MAUI extension Welcome page](img/Image_B20941_02_13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13: .NET MAUI 扩展欢迎页面](img/Image_B20941_02_13.jpg)'
- en: 'Figure 2.13: .NET MAUI extension Welcome page'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.13: .NET MAUI 扩展欢迎页面'
- en: This **Welcome** page guides you through every additional step you need to take
    to get your environment up and running. It covers everything from the installation
    of the .NET MAUI workload to downloading and installing Microsoft OpenJDK, which
    is essential for building and debugging Android apps. Additionally, it tells you
    to install Xcode and Xcode Command Line Tools on a Mac, which are needed for building
    and debugging iOS and macOS applications.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 **欢迎** 页面会指导您完成所有额外的步骤，以使您的环境启动并运行。它涵盖了从安装 .NET MAUI 工作负载到下载和安装 Microsoft
    OpenJDK 的所有内容，这对于构建和调试 Android 应用至关重要。此外，它还告诉您在 Mac 上安装 Xcode 和 Xcode 命令行工具，这对于构建和调试
    iOS 和 macOS 应用是必需的。
- en: Now that we have got our preferred development environment all set up, let’s
    create a .NET MAUI app! Note that throughout this book, the walk-throughs describe
    the workflow as in Visual Studio. However, it shouldn’t be an issue to follow
    along in your IDE of choice.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将首选的开发环境全部设置好，让我们创建一个 .NET MAUI 应用！请注意，在本书中，说明流程与 Visual Studio 中的流程相同。然而，在您选择的
    IDE 中跟随应该不会成问题。
- en: Hello “Recipes!” app
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “食谱！”应用
- en: Throughout this book, we will be working on the *Recipes!* app. With this app,
    users add their favorite recipes and share them with the world, allowing other
    users to rate and review them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我们将致力于开发 *食谱！* 应用。通过这个应用，用户可以添加他们喜欢的食谱并与全世界分享，允许其他用户对其进行评分和评论。
- en: So, let’s go ahead and create a .NET MAUI app that will serve as a starting
    point for our *Recipes!* app.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续创建一个 .NET MAUI 应用，它将作为我们 *食谱！* 应用的起点。
- en: Creating a new project
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新项目
- en: 'With the excitement building, we’re about to take our first steps toward developing
    our *Recipes!* app. To kick things off, we’ll start by creating a new project
    in Visual Studio:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 随着兴奋感的增加，我们即将迈出开发 *食谱！* 应用的第一步。为了开始，我们将在 Visual Studio 中创建一个新项目：
- en: 'Fire up Visual Studio and select **Create a new project**, as shown in *Figure
    2**.14*:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio 并选择 **创建新项目**，如图 2.14* 所示：
- en: '![Figure 2.14: Create a new project](img/Image_B20941_02_14.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14: 创建新项目](img/Image_B20941_02_14.jpg)'
- en: 'Figure 2.14: Create a new project'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.14: 创建新项目'
- en: Next, select `maui` in the search bar at the top to query the list.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在顶部的搜索栏中输入 `maui` 以查询列表。
- en: '![Figure 2.15: Choosing the .NET MAUI App template](img/Image_B20941_02_15.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15: 选择 .NET MAUI 应用模板](img/Image_B20941_02_15.jpg)'
- en: 'Figure 2.15: Choosing the .NET MAUI App template'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.15: 选择 .NET MAUI 应用模板'
- en: Next, enter the relevant details for **Project name**, **Location,** and **Solution
    name**.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入 **项目名称**、**位置** 和 **解决方案名称** 的相关详细信息。
- en: '![Figure 2.16: Configure your new project](img/Image_B20941_02_16.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16: 配置您的新的项目](img/Image_B20941_02_16.jpg)'
- en: 'Figure 2.16: Configure your new project'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.16: 配置您的新的项目'
- en: On the final screen, select **.NET 8 (Long Term Support)** or any other .NET
    framework you want to target.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一页，选择**.NET 8（长期支持）**或任何其他你想要的目标.NET框架。
- en: Hit the **Create** button.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: 'This creates a solution containing a .NET MAUI project with the provided names
    at the given location, as shown in *Figure 2**.17*:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在指定位置创建一个包含提供名称的.NET MAUI项目的解决方案，如图*图2.17*所示。：
- en: '![Figure 2.17: Recipes! .NET MAUI project](img/Image_B20941_02_17.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图2.17：.NET MAUI项目](img/Image_B20941_02_17.jpg)'
- en: 'Figure 2.17: Recipes! .NET MAUI project'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17：.NET MAUI项目
- en: Running your app
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行你的应用程序
- en: 'Right off the bat, you can run your brand-new cross-platform application on
    Windows by pressing *F5* or by clicking the **run** button in Visual Studio. The
    **run** button should have **Windows Machine** next to it, indicating you are
    going to run your app natively on Windows. If the button doesn’t show **Windows
    Machine**, you can click the downward-pointing arrow for additional options, as
    shown in *Figure 2**.18*:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，你就可以通过按*F5*键或在Visual Studio中点击**运行**按钮来运行你全新的跨平台应用程序。**运行**按钮旁边应该有**Windows
    Machine**字样，表示你将原生在Windows上运行你的应用程序。如果按钮没有显示**Windows Machine**，你可以点击向下箭头以获取更多选项，如图*图2.18*所示。18*：
- en: '![Figure 2.18: Choosing a Debug target](img/Image_B20941_02_18.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图2.18：选择调试目标](img/Image_B20941_02_18.jpg)'
- en: 'Figure 2.18: Choosing a Debug target'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18：选择调试目标
- en: When debugging a Windows app for the first time, Visual Studio might prompt
    you to enable **Developer Mode** in Windows. After that, your shiny new app should
    be deployed and running on Windows!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次调试Windows应用程序时，Visual Studio可能会提示你启用Windows中的**开发者模式**。之后，你那闪亮的新应用程序应该已经在Windows上部署并运行了！
- en: 'We can also debug right away on Android: click the arrow next to **Windows
    Machine** that points downward, select **Android Emulators**, and select an emulator
    from the list. If this is your first time running an Android app, you will get
    an error message inside **Error List** in Visual Studio, prompting you to accept
    the Android SDK licenses. Double-clicking the message should open **Android SDK
    – License Agreement**, which you should accept in order to continue. Hit *F5*
    again, or click the **run** button – which should contain the name of your emulator
    – in Visual Studio. Starting the emulator for the first time and deploying it
    might take a while, but after some time, you will see an emulator popping up with
    your native Android app running on it.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以立即在Android上进行调试：点击**Windows Machine**旁边的向下箭头，选择**Android模拟器**，并从列表中选择一个模拟器。如果你是第一次运行Android应用程序，你将在Visual
    Studio的**错误列表**中看到一个错误消息，提示你接受Android SDK许可。双击该消息将打开**Android SDK – 许可协议**，你应该接受它以继续。再次按*F5*键，或在Visual
    Studio中点击包含你的模拟器名称的**运行**按钮。第一次启动模拟器并部署可能需要一些时间，但过一段时间后，你将看到一个带有你的原生Android应用程序运行的模拟器弹出。
- en: In comparison, if you are connected to a Mac, you can select an iOS simulator
    as well and see your native iOS running on an iOS simulator! If you have an Android
    or iOS device connected to your PC, it should appear in the list as well. Selecting
    it and running the application should deploy your app onto your physical device.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，如果你连接到Mac，你也可以选择iOS模拟器，并看到你的原生iOS在iOS模拟器上运行！如果你有连接到你的PC的Android或iOS设备，它也应该出现在列表中。选择它并运行应用程序应该会将你的应用程序部署到你的物理设备上。
- en: .NET Hot Reload and XAML Hot Reload
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET热重载和XAML热重载
- en: With **.NET Hot Reload**, developers can make changes to their source code while
    the application is running, without the need to pause or rebuild the app. It enables
    faster iteration and real-time feedback on code modifications. Why don’t we go
    ahead and make some changes to our code while the app is running?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**.NET热重载**，开发人员可以在应用程序运行时对其源代码进行更改，而无需暂停或重新构建应用程序。它使迭代更快，并能够实时反馈代码更改。我们为什么不趁应用程序运行时对我们的代码进行一些更改呢？
- en: Open the `MainPage.xaml.cs` file.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainPage.xaml.cs`文件。
- en: In the `OnCounterClicked` method, change `count++` to `count +=` `2`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnCounterClicked`方法中，将`count++`改为`count += 2`。
- en: Save your changes or manually hit **Hot Reload** (*Alt* + *F10*) in Visual Studio.
    In the drop-down menu of this button, you can also find a **Hot Reload on File
    Save** setting that you might want to check. Having this checked should automatically
    trigger **Hot Reload** when you save your changes.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存你的更改或手动在Visual Studio中点击**热重载**（*Alt* + *F10*）。在这个按钮的下拉菜单中，你还可以找到一个**文件保存时热重载**设置，你可能想要检查一下。勾选这个设置应该会在你保存更改时自动触发**热重载**。
- en: '![Figure 2.19: Hot Reload](img/Image_B20941_02_19.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.19: Hot Reload'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the running app and click the button in the app and you should see
    that the counter is incremented by two every time you click it.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additionally, with **XAML Hot Reload**, we can even update the XAML code while
    the app is running and immediately see the updated UI. So, while our app is running,
    let’s update some things on the screen:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Run your app on your platform of choice.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the app is running, go to Visual Studio and open `MainPage.xaml`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `Text` property of the first `Label` from `"Hello, World"` to `"Recipes!"`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <Label
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: FontSize="18"
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: HorizontalOptions="Center"
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'BackgroundColor property to Button and give it the value of "#FCB64A", and
    set the TextColor property to "white":'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the changes you have made, and you should see the UI changes immediately
    being reflected in your running app.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET Hot Reload and XAML Hot Reload are fantastic tools as they avoid needing
    to stop, rebuild, and redeploy your app for small, incremental changes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Adding a splash screen and app icons
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With .NET MAUI’s single-project approach comes the ability to manage all of
    the app’s resources (such as images, icons, fonts, and so on) in that single project.
    During compilation, all the resources inside the relevant `Platforms` folder are
    picked up together with everything inside the `Resources` folder. All of this
    is embedded in the resulting native app.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if you want, you can add a `Platforms` subfolder. The same goes for `Platforms`
    subfolders. But, in MAUI, there is a much easier way: .NET MAUI can generate splash
    screens and app icons for us. Let’s see how:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: In the `splash.svg` file.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Splash` folder, select `Chapter 02``/Assets/recipes-logo.svg`
    file, which can be found in the code repository shared at the start of this chapter.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the file to `splash.svg` and set **Build Action** to **MauiSplashScreen**.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the project’s `csproj` file by clicking on your MAUI project in the `csproj`
    file, find the `MauiSplashScreen` tag. You can add a `Color` property to define
    the background color that needs to be used for the splash screen. The given `svg`
    will be centered on the splash screen with the defined background color:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Clean and rebuild your solution and run your app again. You should now see
    the updated splash screen, as shown in *Figure 2**.20*:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.20: The Recipes! app splash screen on iOS and Android](img/Image_B20941_02_20.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.20: The Recipes! app splash screen on iOS and Android'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: When deploying on a physical iOS device from your Windows PC by using Hot Restart,
    your splash screen will not get updated and the standard .NET splash screen will
    remain. This is a limitation of Hot Restart, even though you have correctly configured
    your custom splash screen. In order to verify your splash screen, it’s best to
    deploy it on a physical device that is connected to a Mac.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only is .NET MAUI capable of generating a splash screen for us, but .NET
    MAUI can also generate app icons for our app as well! Here’s how:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅 .NET MAUI 能够为我们生成启动画面，它还可以生成我们的应用图标！以下是方法：
- en: In the `appicon.svg` and `appiconfg.svg` files.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `appicon.svg` 和 `appiconfg.svg` 文件中。
- en: Right-click the `Resources` folder, select `Chapter` `02``/Assets/recipes-appicon.svg`
    file.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Resources` 文件夹，选择 `Chapter` `02``/Assets/recipes-appicon.svg` 文件。
- en: Rename the file to `appicon.svg` and set **Build Action** to **MauiIcon**.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件重命名为 `appicon.svg` 并将 **构建操作** 设置为 **MauiIcon**。
- en: 'Look into the project’s `csproj` file and look for the `MauiIcon` tag. Add
    a `Color` property:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看项目的 `csproj` 文件，寻找 `MauiIcon` 标签。添加一个 `Color` 属性：
- en: '[PRE9]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Clean and rebuild your solution to make sure your app icon gets shown on your
    device. You might want to delete the app from your device as well prior to deploying
    it. Once you have deployed your app, you should see your updated app icon:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 清理并重新构建你的解决方案，以确保你的应用图标在设备上显示。在部署之前，你可能还想从你的设备上删除应用。一旦部署了你的应用，你应该能看到你的更新后的应用图标：
- en: '![Figure 2.21: The Recipes! app’s icon on Android, Windows, and iOS](img/Image_B20941_02_21.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图2.21：Recipes! 应用在Android、Windows和iOS上的图标](img/Image_B20941_02_21.jpg)'
- en: 'Figure 2.21: The Recipes! app’s icon on Android, Windows, and iOS'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.21：Recipes! 应用在Android、Windows和iOS上的图标
- en: And there you have it! With very little effort, we’ve created a cross-platform
    app, complete with a splash screen and app icons.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们付出了很少的努力，就创建了一个包含启动画面和应用图标的跨平台应用。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we provided an overview of .NET MAUI: what it is, how it works,
    and how to get started with creating a cross-platform app using .NET MAUI. We
    walked through the process of creating an app, complete with a splash screen and
    app icons. Additionally, we examined .NET Hot Reload and XAML Hot Reload, features
    that enable us to update code while the app is running, dramatically increasing
    our efficiency. Now that you have a holistic understanding of .NET MAUI and the
    MVVM design pattern, we can continue our journey by exploring how to effectively
    apply this pattern within the .NET MAUI framework.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了 .NET MAUI 的概述：它是什么，它是如何工作的，以及如何使用 .NET MAUI 创建跨平台应用。我们详细介绍了创建应用的过程，包括启动画面和应用图标。此外，我们还探讨了
    .NET 热重载和 XAML 热重载，这些功能使我们能够在应用运行时更新代码，大大提高了我们的效率。现在，你已经对 .NET MAUI 和 MVVM 设计模式有了全面的理解，我们可以继续我们的旅程，探索如何在
    .NET MAUI 框架中有效地应用此模式。
- en: In [*Chapter 3*](B20941_03.xhtml#_idTextAnchor051), *Data Binding Building Blocks
    in .NET MAUI*, we’ll explore the components available in .NET MAUI that enable
    us to build cross-platform apps using the MVVM pattern.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第3章*](B20941_03.xhtml#_idTextAnchor051) 中，我们将探讨 .NET MAUI 中可用的数据绑定构建块，这些构建块使我们能够使用
    MVVM 模式构建跨平台应用。
- en: Further reading
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章所涉及主题的信息，请查看以下资源：
- en: '*Creating a splash screen in .NET* *MAUI*: [https://learn.microsoft.com/dotnet/maui/user-interface/images/splashscreen](https://learn.microsoft.com/dotnet/maui/user-interface/images/splashscreen)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 .NET MAUI 中创建启动画面*：[https://learn.microsoft.com/dotnet/maui/user-interface/images/splashscreen](https://learn.microsoft.com/dotnet/maui/user-interface/images/splashscreen)'
- en: '*Working with app icons in .NET* *MAUI*: [https://learn.microsoft.com/dotnet/maui/user-interface/images/app-icons](https://learn.microsoft.com/dotnet/maui/user-interface/images/app-icons)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 .NET MAUI 中使用应用图标*：[https://learn.microsoft.com/dotnet/maui/user-interface/images/app-icons](https://learn.microsoft.com/dotnet/maui/user-interface/images/app-icons)'
- en: '*Configure* *multi-targeting*: [https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting](https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置* 多目标：[https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting](https://learn.microsoft.com/dotnet/maui/platform-integration/configure-multi-targeting)'
- en: '*.NET MAUI app* *lifecycle*: [https://learn.microsoft.com/dotnet/maui/fundamentals/app-lifecycle](https://learn.microsoft.com/dotnet/maui/fundamentals/app-lifecycle)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET MAUI 应用* 生命周期：[https://learn.microsoft.com/dotnet/maui/fundamentals/app-lifecycle](https://learn.microsoft.com/dotnet/maui/fundamentals/app-lifecycle)'
- en: '*.NET MAUI* *installation*: [https://learn.microsoft.com/dotnet/maui/get-started/installation](https://learn.microsoft.com/dotnet/maui/get-started/installation)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET MAUI* 安装：[https://learn.microsoft.com/dotnet/maui/get-started/installation](https://learn.microsoft.com/dotnet/maui/get-started/installation)'
- en: '*Pair to* *Mac*: [https://learn.microsoft.com/dotnet/maui/ios/pair-to-mac](https://learn.microsoft.com/dotnet/maui/ios/pair-to-mac)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与* Mac *配对：[https://learn.microsoft.com/dotnet/maui/ios/pair-to-mac](https://learn.microsoft.com/dotnet/maui/ios/pair-to-mac)'
- en: '*Android* *emulator*: [https://learn.microsoft.com/dotnet/maui/android/emulator/device-manager](https://learn.microsoft.com/dotnet/maui/android/emulator/device-manager)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Android* *模拟器*: [https://learn.microsoft.com/dotnet/maui/android/emulator/device-manager](https://learn.microsoft.com/dotnet/maui/android/emulator/device-manager)'
- en: '*Setting up an Android device for* *debugging*: [https://learn.microsoft.com/dotnet/maui/android/device/setup](https://learn.microsoft.com/dotnet/maui/android/device/setup)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为调试设置 Android 设备*: [https://learn.microsoft.com/dotnet/maui/android/device/setup](https://learn.microsoft.com/dotnet/maui/android/device/setup)'
- en: '*.NET MAUI Support* *Policy*: [https://dotnet.microsoft.com/platform/support/policy/maui](https://dotnet.microsoft.com/platform/support/policy/maui)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET MAUI 支持* *策略*: [https://dotnet.microsoft.com/platform/support/policy/maui](https://dotnet.microsoft.com/platform/support/policy/maui)'
