- en: Chapter 4. Enterprise Application Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 企业应用集成
- en: A middleware system or service that enables applications to connect to each
    other to exchange data is known as Enterprise Application Integration or EAI.
    In BizTalk Services, EAI is oriented towards a developer persona and Visual Studio
    is the primary tool for development and deployment of services. Integration between
    applications is possible using a bridge for messaging. We will explore the e-commerce
    example from the first chapter in more detail as we look at the concepts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使应用程序相互连接以交换数据的中间件系统或服务被称为企业应用集成或 EAI。在 BizTalk Services 中，EAI 面向开发者角色，Visual
    Studio 是开发和部署服务的主要工具。应用程序之间的集成可以通过消息桥接实现。随着我们探讨这些概念，我们将更详细地探讨第一章中的电子商务示例。
- en: 'Specifically, in this chapter, we will focus on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在本章中，我们将重点关注以下主题：
- en: Understanding EAI capabilities in Azure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Azure 中的 EAI 功能
- en: Understanding bridges, sources, and destinations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解桥接、源和目标
- en: Understanding custom code using message inspectors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用消息检查器理解自定义代码
- en: Understanding hybrid connectivity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解混合连接
- en: Enterprise application integration scenarios
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业应用集成场景
- en: 'Consider the following scenarios:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下场景：
- en: Contoso is a movie ticketing company and sells tickets through Point-Of-Sale
    terminals across different cities. They wish to consolidate their end-of-day sales
    data from the terminals to their SAP Line-of-Business system. In the absence of
    any form of middleware, the POS data needs to be collected manually and the data
    has to be merged and converted to a format matching the target system. Using EAI,
    the entire process can be automated and set up in a matter of minutes with BizTalk
    Services.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Contoso 是一家电影票务公司，在多个城市的销售点终端销售票务。他们希望将终端的每日销售数据汇总到他们的 SAP 业务线系统中。在没有任何形式的中间件的情况下，POS
    数据需要手动收集，并且数据需要合并并转换为与目标系统匹配的格式。使用 EAI，整个流程可以自动化，并在几分钟内通过 BizTalk Services 设置完成。
- en: Fabrikam is a software vendor and uses Salesforce to manage their customer pipeline
    and sales orders. All approved orders from Salesforce need to be managed centrally
    in their ERP system like Oracle, which resides on-premises. Using hybrid connectivity
    all connections to Oracle on-premises can be managed using BizTalk Adapter Services.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fabrikam 是一家软件供应商，使用 Salesforce 来管理他们的客户管道和销售订单。所有来自 Salesforce 的已批准订单都需要在他们的
    ERP 系统中集中管理，如位于本地的 Oracle 系统。使用混合连接，所有连接到本地 Oracle 的连接都可以通过 BizTalk Adapter Services
    进行管理。
- en: Northwind is an online retailer who manages an e-commerce website for customer
    purchases. They also receive bulk orders from event firms and corporates for their
    goods. Northwind needs to develop a solution to validate orders and also route
    requests to the right inventory location for delivery of the goods. Using EAI
    in BizTalk Services, they develop a common solution to process purchase orders
    from consumers over XML as well as purchase orders in EDI from event firms.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Northwind 是一家在线零售商，负责管理电子商务网站以供客户购买。他们还从活动公司和公司那里接收大量订单。Northwind 需要开发一个解决方案来验证订单，并将请求路由到正确的库存位置以交付商品。通过在
    BizTalk Services 中使用 EAI，他们开发了一个通用解决方案来处理来自消费者的 XML 格式的采购订单以及来自活动公司的 EDI 格式的采购订单。
- en: Each of these scenarios can be modelled as an EAI solution on BizTalk Services.
    The incoming requests (ticketing sales, sales orders, and invoices) can be XML
    or flat file messages and need to be transformed into a target Line of Business
    format and routed to the on-premises systems. If the destination is on-premises,
    then relay endpoints are set up using hybrid connectivity.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些场景中的每一个都可以在 BizTalk Services 上建模为 EAI 解决方案。传入的请求（票务销售、销售订单和发票）可以是 XML 或平面文件消息，需要转换为目标业务线格式并路由到本地系统。如果目标是在本地，则使用混合连接设置中继端点。
- en: EAI in BizTalk Services
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BizTalk Services 中的 EAI
- en: Let's look at each of the concepts in more detail and understand their capabilities.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地查看每个概念并了解其功能。
- en: Sources
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源
- en: 'Sources receive a message from an external application. BizTalk Services v1
    supports five common out-of-the-box sources: **SFTP**, **FTP**, **HTTP**, **Service
    Bus Queue**, and **Service Bus Subscription**. By default, the bridge exposes
    the HTTPs endpoint secured by the Access Control service. The various sources
    of bridges are shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 源接收来自外部应用程序的消息。BizTalk Services v1支持五个常见的开箱即用的源：**SFTP**、**FTP**、**HTTP**、**Service
    Bus Queue**和**Service Bus Subscription**。默认情况下，桥梁暴露由访问控制服务保护的HTTPS端点。桥梁的各种源在以下屏幕截图中显示：
- en: '![Sources](img/7401EN_04_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![源](img/7401EN_04_01.jpg)'
- en: Sources of bridges
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 桥梁的源
- en: Bridges and the VETER pattern
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桥梁和VETER模式
- en: 'Bridges are composed of sources, pipelines, and destinations. Pipelines connect
    two messaging systems and are composed of a series of stages to process the messages
    flowing from source to destination. The stages perform decoding, validation, enrichment,
    transformation, and routing of the messages. Each stage can be enabled or disabled
    for deployment from the Visual Studio properties pane. The set of stages are fixed,
    and out of the box, BizTalk Services v1 enables the **VETER** pattern. This is
    shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 桥梁由源、管道和目的地组成。管道连接两个消息系统，由一系列阶段组成，以处理从源到目的地的消息流。阶段执行解码、验证、富集、转换和路由消息。每个阶段都可以通过Visual
    Studio属性面板启用或禁用以进行部署。阶段集是固定的，并且BizTalk Services v1开箱即用启用**VETER**模式。这在上面的屏幕截图中显示：
- en: '![Bridges and the VETER pattern](img/7401EN_04_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![桥梁和VETER模式](img/7401EN_04_02.jpg)'
- en: Bridges with VETER pattern
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 带有VETER模式的桥梁
- en: 'The following are the stages of the VETER pattern:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为VETER模式的阶段：
- en: '| Stage | Description |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 阶段 | 描述 |'
- en: '| --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Validate (V) | Validate the incoming message against the schema |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 验证 (V) | 将传入的消息与模式进行验证 |'
- en: '| Enrich (E) | Enrich the message with properties promoted from the message
    header, body, or lookup (see [Chapter 3](ch03.html "Chapter 3. Bridges"), *Bridges*)
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 富集 (E) | 使用从消息头、正文或查找中提升的属性来丰富消息（参见[第3章](ch03.html "第3章。桥梁")，*桥梁*) |'
- en: '| Transform (T) | Map the message from one format to another (see [Chapter
    2](ch02.html "Chapter 2. Messages and Transforms"), *Messages and Transforms*)
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 转换 (T) | 将消息从一种格式映射到另一种格式（参见[第2章](ch02.html "第2章。消息和转换")，*消息和转换*) |'
- en: '| Enrich (E) | Enrich the new message post transform |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 富集 (E) | 在转换后丰富新的消息 |'
- en: '| Route (R) | Route to one of the target destinations |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 路由 (R) | 路由到目标目的地之一 |'
- en: '| Decode | For flat file processing, decode the message |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 解码 | 对于平面文件处理，解码消息 |'
- en: Destinations
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目的地
- en: '**Destinations** are where messages are is submitted to after pipeline processing.
    In bridges, the route to a destination is based on the SQL-92 expression syntax.
    A message will be sent to only one destination whose route rule evaluates to true.
    The route stage is also explained in [Chapter 2](ch02.html "Chapter 2. Messages
    and Transforms"), *Messages and Transforms*. The various destinations are shown
    in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**目的地**是管道处理后的消息提交的地方。在桥梁中，到目的地的路由基于SQL-92表达式语法。只有当路由规则评估为真时，消息才会发送到目的地。路由阶段也在[第2章](ch02.html
    "第2章。消息和转换")，*消息和转换*中解释。各种目的地在以下屏幕截图中显示：'
- en: '![Destinations](img/7401EN_04_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![目的地](img/7401EN_04_03.jpg)'
- en: Destinations with bridges
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 带有桥梁的目的地
- en: Attributes of bridges
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桥梁的属性
- en: 'Here are some interesting attributes of bridges:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些桥梁的有趣属性：
- en: '**State**: Pipelines as part of bridges are stateless, that is, at no point
    during the processing is the message persisted. If there is a crash or restart
    of the system while messages are inflight, the message would have to be resubmitted
    for processing. This also means message processing is synchronous.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：桥梁中的管道是无状态的，即在处理过程中不会持久化消息。如果在消息正在传输时系统崩溃或重启，则必须重新提交消息以进行处理。这也意味着消息处理是同步的。'
- en: '**Error handling**: If an error occurs during message processing, a fault is
    thrown back to the sender of the message to take action. As there is no separate
    suspend endpoint in EAI bridges, error must be handled at the client side.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：如果在消息处理过程中发生错误，则会向消息的发送者抛出异常以采取行动。由于EAI桥梁中没有单独的挂起端点，因此必须在客户端处理错误。'
- en: '**One-way/Two-way**: Bridges support both one-way and two-way communication.
    In the case of one-way communication, only the HTTP codes are passed back to the
    sender of the message. However, in the case of two-way communication, a response
    message can be sent back. Two-way bridges in BizTalk Services support the VETER
    pattern on the request side and ETER on the response side. The message on the
    response side is assumed to be valid since this is coming from the target Line-of-Business
    system or service. Note that a pass-through-bridge is a special case of a one-way
    bridge that has only the E-R of the VETER pattern.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单向/双向**：桥接器支持单向和双向通信。在单向通信的情况下，只有HTTP代码被传回消息的发送者。然而，在双向通信的情况下，可以发送响应消息。BizTalk服务的双向桥接器在请求侧支持VETER模式，在响应侧支持ETER模式。响应侧的消息被认为是有效的，因为这是来自目标业务线系统或服务的。请注意，透传桥接器是单向桥接的一种特殊情况，它只有VETER模式的E-R。'
- en: '**Message formats**: Messages can be sent in plain old XML, SOAP, and flat
    file formats. Flat file messages can only be used with one-way bridges. Other
    formats such as JSON may be added in future, but those different formats need
    custom code to normalize the data to XML before processing. We will discuss custom
    code later in this chapter.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息格式**：消息可以以纯XML、SOAP和平文件格式发送。平文件消息只能与单向桥接一起使用。未来可能会添加其他格式，例如JSON，但那些不同的格式在处理之前需要自定义代码将数据标准化为XML。我们将在本章后面讨论自定义代码。'
- en: '**Chaining**: Multiple bridges can be chained by adding one bridge as the destination
    of another bridge. This may be used to centralize the processing of messages through
    a single bridge. For example, multiple bridges may pump messages from different
    sources all connecting to a single bridge that routes to an on-premises endpoint.
    Also, selectively disabling stages can enable newer messaging patterns. For example,
    ETEVR can be achieved by chaining two VETER bridges.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链式**：可以通过将一个桥接器作为另一个桥接器的目标来链式多个桥接器。这可以用来通过单个桥接器集中处理消息。例如，多个桥接器可能从不同的来源抽取消息，所有这些消息都连接到单个桥接器，该桥接器将消息路由到本地端点。此外，选择性禁用阶段可以启用新的消息模式。例如，通过链式两个VETER桥接器可以实现ETEVR。'
- en: Hybrid connectivity
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合连接
- en: Organizations that have made IT investments in ERPs and services on premises
    may not transition all of their IT assets to the cloud. There is a need to connect
    to those services and resources using hybrid connectivity from the cloud.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在ERP和本地服务上进行了IT投资的组织可能不会将所有IT资产迁移到云中。需要从云中通过混合连接连接到那些服务和资源。
- en: The BizTalk Adapter Service
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BizTalk适配器服务
- en: The **BizTalk Adapter Service** (**BAS**) is a service which enables an application
    running on-premises to receive data from the cloud. The on-premises applications
    such as ERPs and BizTalk Server can be exposed outside of the corporate network
    using Service Bus relays for hybrid connectivity. The Service Bus Relay service
    on Azure acts as an intermediary where a client and an on-premises service can
    connect with each other. The client in this case is the BizTalk Services' bridge
    and the service running on-premises is the BizTalk Adapter Service talking to
    an ERP. Once the BizTalk Adapter Service and the bridge authenticate with the
    Service Bus Relay service, all messages from the bridge are forwarded to the BizTalk
    Adapter Service.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**BizTalk适配器服务**（**BAS**）是一种服务，它使运行在本地环境中的应用程序能够从云中接收数据。本地应用程序，如ERP和BizTalk服务器，可以通过使用服务总线中继实现混合连接，在企业网络之外公开。Azure上的服务总线中继服务充当中介，客户端和本地服务可以通过它相互连接。在这种情况下，客户端是BizTalk服务的桥接器，而本地运行的服务是
    BizTalk适配器服务，它与ERP进行通信。一旦BizTalk适配器服务和桥接器通过服务总线中继服务进行身份验证，所有来自桥接器的消息都将转发到BizTalk适配器服务。'
- en: The BAS architecture
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BAS架构
- en: 'The overall BAS architecture is shown in the following figure:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图中展示了BAS架构的整体结构：
- en: '![The BAS architecture](img/7401EN_04_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![BAS架构](img/7401EN_04_04.jpg)'
- en: The BizTalk Adapter Service architecture
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: BizTalk适配器服务架构
- en: The BizTalk Adapter Service runs on the client machine and is hosted in IIS
    to handle management operations such as start/stop of endpoints as well as runtime
    operations to route messages from the cloud to the on-premises systems. There
    is one management service along with one or more runtime services that can be
    managed using the management service. The meta-data of the relay configurations
    is stored in the storage account of the BizTalk Services deployment specified
    during installation. The BizTalk Adapter Service relies on the BizTalk Adapter
    pack to connect to Line-of-Business (LOB) systems such as Oracle DB, Oracle EBS,
    SAP, Siebel, and SQL Server.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: BizTalk Adapter 服务在客户端机器上运行，并在 IIS 中托管以处理管理操作，如端点的启动/停止以及从云到本地系统的运行时操作。有一个管理服务以及一个或多个可以通过管理服务管理的运行时服务。中继配置的元数据存储在安装期间指定的
    BizTalk 服务部署的存储账户中。BizTalk Adapter 服务依赖于 BizTalk Adapter 包来连接到业务线（LOB）系统，如 Oracle
    DB、Oracle EBS、SAP、Siebel 和 SQL Server。
- en: Management operations are exposed through Visual Studio Server Explorer or through
    PowerShell cmdlets, both of which talk to the **BAService**, the application hosting
    the `ManagementService.svc` service in IIS on the on-premises machine where BizTalk
    Adapter Service is installed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 管理操作通过 Visual Studio 服务器资源管理器或通过 PowerShell 命令行进行暴露，它们都与 **BAService** 通信，该服务在本地机器上安装
    BizTalk Adapter 服务时，在 IIS 上托管 `ManagementService.svc` 服务。
- en: Runtime operations are managed as per the Service Bus Relay by creating new
    applications in IIS hosting `RuntimeService.svc`. Each LOB can create a new relay
    or use an existing relay configured for another LOB. When there are more than
    one LOB per relay, the sub-paths in the runtime address beyond the relay URL help
    direct the calls to the right adapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时操作按照服务总线中继进行管理，通过在 IIS 中创建新的应用程序托管 `RuntimeService.svc`。每个 LOB 可以创建一个新的中继或使用为另一个
    LOB 配置的现有中继。当每个中继有多个 LOB 时，运行时地址中超过中继 URL 的子路径有助于将调用引导到正确的适配器。
- en: 'When the LOB relay is created, based on user configuration a new or existing
    application is used in IIS as the service host. The generated WSDL contains the
    message to be relayed as well as the operation action. Operations such as `INSERT`,
    `UPDATE`, `DELETE`, and `SELECT` are passed as part of the `SOAPAction` header
    in the following format: `TableOp/{Operation}/schema/Tablename`. The exact SOAP
    Action string can be determined from the relay configuration''s properties window
    in Visual Studio.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建 LOB 中继时，根据用户配置，在 IIS 中使用新的或现有的应用程序作为服务宿主。生成的 WSDL 包含要中继的消息以及操作动作。`INSERT`、`UPDATE`、`DELETE`
    和 `SELECT` 等操作作为以下格式的 `SOAPAction` 报头的一部分传递：`TableOp/{Operation}/schema/Tablename`。确切的
    SOAP 动作字符串可以从 Visual Studio 中继配置的属性窗口中确定。
- en: 'Every message passing via the relay needs to authenticate with the LOB. Authentication
    credentials are passed using one of the following four ways:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过中继传递的每条消息都需要对 LOB 进行身份验证。身份验证凭证通过以下四种方式之一传递：
- en: Username and password preconfigured and stored in the BAS store
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名和密码预先配置并存储在 BAS 存储中
- en: Active Directory domain credentials
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Active Directory 域凭证
- en: SOAP header containing credentials of the LOB
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含 LOB 凭证的 SOAP 报头
- en: WS-Security credentials
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WS-Security 凭证
- en: BAS installation and configuration
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BAS 安装和配置
- en: 'BAS installation is part of the BizTalk Services SDK setup. During setup, the
    URL of the BizTalk Services deployment needs to be entered. This is added to `web.config`
    under `C:\Program Files\Microsoft BizTalk Adapter Service\BAService`. In Visual
    Studio Server Explorer, the on-premises management service URL along with the
    ACS credentials of the deployment need to be entered. Hybrid connectivity can
    now be set up for each of the following LOBs using a wizard-driven interface as
    shown:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: BAS 安装是 BizTalk 服务 SDK 设置的一部分。在设置过程中，需要输入 BizTalk 服务部署的 URL。此 URL 被添加到 `C:\Program
    Files\Microsoft BizTalk Adapter Service\BAService` 下的 `web.config` 中。在 Visual
    Studio 服务器资源管理器中，需要输入本地管理服务 URL 以及部署的 ACS 凭证。现在可以使用向导驱动的界面为以下每个 LOB 设置混合连接，如下所示：
- en: '![BAS installation and configuration](img/7401EN_04_05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![BAS 安装和配置](img/7401EN_04_05.jpg)'
- en: BizTalk Adapter Service configuration in Visual Studio Server Explorer
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 服务器资源管理器中的 BizTalk Adapter 服务配置
- en: 'For example, setting up the relay connectivity with on-premises SQL Server
    Express running on localhost with DemoDB as the database involves the following
    steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，设置与运行在本地主机上的 SQL Server Express 和 DemoDB 数据库的中继连接涉及以下步骤：
- en: In the **Server Explorer** BAS view, right-click on **LOB Types** | **SQL**
    and choose **Add SQL Target**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **服务器资源管理器** BAS 视图中，右键单击 **LOB 类型** | **SQL** 并选择 **添加 SQL 目标**。
- en: In the pop-up wizard, read the instructions and click on **Next**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出向导中，阅读说明并点击 **下一步**。
- en: Enter values for the server name, instance, and catalog (say `localhost`, `SQLExpress`,
    and `DemoDB`, respectively). Use Windows authentication or the username and password
    as configured and click on **Next**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入服务器名称、实例和目录的值（例如 `localhost`、`SQLExpress` 和 `DemoDB` 分别）。使用 Windows 身份验证或配置的用户名和密码，并点击
    **下一步**。
- en: Navigate to **Tables** (or **Views**) is exposed via relay, choose the table,
    and select **Insert** as the operation. Click on **Properties** to see the WSDL
    generated. Click on **Next**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过中继导航到 **表**（或 **视图**），选择表，并将操作选择为 **插入**。点击 **属性** 以查看生成的 WSDL。点击 **下一步**。
- en: Configure the **Runtime security type** when the message passes via relay. These
    are the four options we mentioned earlier. Enter the credentials and click on
    **Next**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当消息通过中继传递时，配置 **运行时安全类型**。这些是我们之前提到的四个选项。输入凭据并点击 **下一步**。
- en: In **Specify the LOB Relay URL**, choose **Create a new LOB relay** and enter
    the Service Bus credentials. Enter any name for **LOB relay path** and **LOB relay
    subpath**. Click on **Next**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **指定 LOB 中继 URL** 中，选择 **创建新的 LOB 中继** 并输入服务总线凭据。为 **LOB 中继路径** 和 **LOB 中继子路径**
    输入任何名称。点击 **下一步**。
- en: Click on **Create** to complete the creation of the relay and the BAS endpoint.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 以完成中继和 BAS 端点的创建。
- en: Once the relay has been successfully set up, each connection will appear under
    the corresponding LOB Type.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦中继成功设置，每个连接将出现在相应的 LOB 类型下。
- en: Consuming BAS with bridges
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用桥接器消费 BAS
- en: 'Create a new BizTalk Services project or open an existing one. There are three
    parts to using the BAS configuration with a bridge:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 BizTalk 服务项目或打开现有的项目。使用桥接器使用 BAS 配置有三个部分：
- en: From the Server Explorer, we can now right-click on the relay connection configured
    earlier and choose **Add Schemas to Project**. The relevant schemas to send and
    receive the target LOB are added in the project. These can be used for mapping
    and validation purposes within the bridge.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器资源管理器中，我们现在可以右键单击之前配置的中继连接，并选择 **将架构添加到项目**。将发送和接收目标 LOB 的相关架构添加到项目中。这些可以在桥接器内部用于映射和验证目的。
- en: Drag-and-drop the connection from the Server Explorer into the Bridge design
    surface. This will create the necessary icon to add a destination connection from
    the bridge.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务器资源管理器中的连接从服务器资源管理器拖放到桥接器设计表面上。这将创建必要的图标，以便从桥接器添加目标连接。
- en: Click on the relay connection and navigate to the **Operations** field in Visual
    Studio properties window. Expand the view and note down the values to the right
    of each of the index [0], [1]. Each of these are the SOAP Action values. To add
    this value, go the Route Action in VS properties and launch the **Route Actions**
    window. Click on **Add** and in the **Edit Route Action** pop up, enter Expression
    as the soap action value copied earlier. Choose **Type** as **Soap** and **Identifier**
    as **Action**. Click on **OK** to accept the changes.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击中继连接，在 Visual Studio 属性窗口中导航到 **操作** 字段。展开视图，并记下每个索引 [0]、[1] 右侧的值。这些值都是 SOAP
    动作值。要添加此值，转到 VS 属性中的路由操作，并启动 **路由操作** 窗口。点击 **添加**，在 **编辑路由操作** 弹出窗口中，输入之前复制的
    SOAP 动作值。选择 **类型** 为 **Soap** 和 **标识符** 为 **Action**。点击 **确定** 以接受更改。
- en: Custom code in EAI
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EAI 中的自定义代码
- en: Now that we understand hybrid connectivity, let's look at one more functionality
    of bridges, which is to support custom code. Not all capabilities will be available
    out of the box from BizTalk Services. Customization enables developers to plug
    in new functionality that augments the existing message flow. For example, we
    can choose to convert an incoming invoice XML to a user-readable PDF format as
    well as archive the same for legal reasons.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了混合连接，让我们看看桥接器的另一个功能，即支持自定义代码。BizTalk 服务不会提供所有功能。自定义允许开发者插入新的功能，以增强现有的消息流。例如，我们可以选择将传入的发票
    XML 转换为用户可读的 PDF 格式，以及出于法律原因存档。
- en: Customization in a bridge is possible at the stage level, route configuration,
    or in transforms. Transforms and its customization were covered in [Chapter 2](ch02.html
    "Chapter 2. Messages and Transforms"), *Messages and Transforms*. In this section,
    we will look at bridge customization.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在桥梁中可以在阶段级别、路由配置或转换中进行定制。转换及其定制已在[第2章](ch02.html "第2章。消息和转换")，*消息和转换*中介绍。在本节中，我们将查看桥梁定制。
- en: Message inspectors
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息检查器
- en: 'Message inspectors are custom code hooks for every entry or exit of a stage
    in a bridge. Custom code must implement the `IMessageInspector` interface:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 消息检查器是桥梁中每个阶段进入或退出的自定义代码钩子。自定义代码必须实现`IMessageInspector`接口：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Message inspectors are implemented using the Task programming model in the .NET4
    Task Parallel Library. Traces in custom code can be emitted using the `ITracer`
    interface in the `IMessageInspectorContext` interface.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 消息检查器使用.NET4任务并行库中的Task编程模型实现。可以使用`IMessageInspectorContext`接口中的`ITracer`接口在自定义代码中发出跟踪。
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following are key points to remember when developing custom code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发自定义代码时，以下是一些关键点要记住：
- en: User code is expected to be resilient, but in some cases, it could throw an
    exception. In this case, this is treated as a stage level failure and the corresponding
    track record is generated.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期用户代码具有弹性，但在某些情况下可能会抛出异常。在这种情况下，这被视为阶段级失败，并生成相应的跟踪记录。
- en: User code in the VS project must have references to `Microsoft.BizTalk.Services.dll`
    from `C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\ide\Extensions`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS项目中的用户代码必须引用`Microsoft.BizTalk.Services.dll`，该文件位于`C:\Program Files (x86)\Microsoft
    Visual Studio 11.0\Common7\ide\Extensions`。
- en: User code assemblies must be added as reference in the BizTalk Services project
    with `Copy Local` set to true.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户代码组件必须在BizTalk服务项目中添加为引用，并将`Copy Local`设置为true。
- en: Whenever the user code assemblies are deployed in BizTalk Services, the service
    must be restarted as the DLLs need to be reloaded in the .NET AppDomain. The restart
    option is available in the VS deploy and in the PS cmdlet.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户代码组件在BizTalk服务中部署时，必须重新启动服务，因为DLL需要在.NET AppDomain中重新加载。重启选项在VS部署和PS cmdlet中可用。
- en: Artifacts of the bridge such as the schema or map are not accessible within
    the user code.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥梁的工件，如架构或映射，在用户代码中不可访问。
- en: Properties can be defined and promoted in the custom code. In code, they must
    be string property with C# attribute `PipelinePropertyAttribute` set with the
    `Name` attribute. This attribute is set in the VS Property Configuration in the
    Message Inspector configuration window as seen in the *Custom code configuration
    with bridges* figure in the *Configuring the bridge* section.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在自定义代码中定义和提升属性。在代码中，它们必须是具有C#属性`PipelinePropertyAttribute`并设置`Name`属性的字符串属性。此属性在VS属性配置中的消息检查器配置窗口中设置，如*配置桥梁*部分中*带有桥梁的自定义代码配置*图所示。
- en: Tracking
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪
- en: Tracking helps in storing interesting properties of a message in the tracking
    store. The tracking store is an Azure SQL database configured during BizTalk Services
    provisioning time. All message properties are stored in the `PipelineTrackRecords`
    and `SourceTrackRecords` tables. Tracking for troubleshooting is detailed in [Chapter
    7](ch07.html "Chapter 7. Tracking and Troubleshooting"), *Tracking and Troubleshooting*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪有助于在跟踪存储中存储消息的有趣属性。跟踪存储是在BizTalk服务配置期间配置的Azure SQL数据库。所有消息属性都存储在`PipelineTrackRecords`和`SourceTrackRecords`表中。跟踪故障排除的详细信息请参阅[第7章](ch07.html
    "第7章。跟踪和故障排除")，*跟踪和故障排除*。
- en: To enable tracking at the EAI bridge, select the bridge in VS and choose **Track
    Properties** from the properties window. The tracked properties can be seen in
    the BizTalk Services portal's Tracking view.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在EAI桥梁上启用跟踪，请在VS中选择桥梁，并在属性窗口中选择**跟踪属性**。跟踪的属性可以在BizTalk服务门户的跟踪视图中看到。
- en: '![Tracking](img/7401EN_04_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![跟踪](img/7401EN_04_06.jpg)'
- en: Configure tracking properties with bridges
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 配置桥梁跟踪属性
- en: Scenario walk-through
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景演练
- en: Let's revisit the EAI scenario with the following changes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下带有以下更改的EAI场景。
- en: Northwind is an online retailer who manages an e-commerce website for customer
    purchases. Instead of processing orders, let's say they now receive invoices from
    their suppliers for the goods sold. For readability and regulatory reasons, they
    need to store this in PDF format in an on-premises system.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind 是一家在线零售商，管理着客户购买的电子商务网站。而不是处理订单，假设他们现在从供应商那里收到销售商品的发票。为了可读性和法规原因，他们需要将此存储在本地系统中的
    PDF 格式。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is assumed that the BizTalk Services SDK has been installed and Visual Studio
    shows the following projects:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 BizTalk Services SDK 已安装，并且 Visual Studio 显示以下项目：
- en: 'BizTalk Service project: Create/Deploy bridges, schemas, and maps'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BizTalk Service 项目：创建/部署桥接器、架构和映射
- en: 'BizTalk Service artifacts project: Create/Deploy schemas, and maps'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BizTalk Service 艺术品项目：创建/部署架构和映射
- en: Prerequisites
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: Northwind creates a new BizTalk Services deployment. See [Chapter 1](ch01.html
    "Chapter 1. Hello BizTalk Services"), *Hello BizTalk Services* on creating a BizTalk
    Services deployment and registering the BizTalk portal. We are going to use the
    PDFTemplate utility from [pdftemplate.codeplex.com](http://pdftemplate.codeplex.com)
    to generate PDF-formatted invoice messages. The utility is available under the
    GPLv2 license.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind 创建一个新的 BizTalk Services 部署。参见[第 1 章](ch01.html "第 1 章. 欢迎使用 BizTalk
    Services")，*欢迎使用 BizTalk Services*，了解创建 BizTalk Services 部署和注册 BizTalk 门户。我们将使用来自
    [pdftemplate.codeplex.com](http://pdftemplate.codeplex.com) 的 PDFTemplate 工具来生成
    PDF 格式的发票消息。此实用程序可在 GPLv2 许可下使用。
- en: Solution
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: The solution would take the invoice XML and generate the PDF in a blob store.
    To get started, let's first create the schema, add the code to generate the PDF,
    and finally plug that logic into the bridge configuration.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案将接收发票 XML 并在 blob 存储中生成 PDF。要开始，让我们首先创建架构，添加生成 PDF 的代码，最后将该逻辑插入到桥接器配置中。
- en: Creating a schema
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建架构
- en: 'Create a sample schema for use with the incoming message. The sample used in
    this flow is provided along with this chapter. Perform the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为传入的消息创建一个示例架构。本流程中使用的示例与此章节一起提供。执行以下步骤：
- en: Using the Visual Studio schema editor, create a simple schema called `InvoiceSchema.xsd`
    for the invoice.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 架构编辑器，为发票创建一个简单的架构，称为 `InvoiceSchema.xsd`。
- en: 'From the Visual Studio command prompt, run the following command to generate
    `InvoiceSchema.cs` for this xsd:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Visual Studio 命令提示符运行以下命令以为此 xsd 生成 `InvoiceSchema.cs`：
- en: '[PRE2]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will load this `InvoiceSchema.cs` file in the next step.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在下一步中加载此 `InvoiceSchema.cs` 文件。
- en: Creating custom code
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义代码
- en: 'Let''s now add the custom code to generate the PDF for the invoice we just
    created:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加用于生成我们刚刚创建的发票的 PDF 的自定义代码：
- en: Create a C# class library project and add a reference to `Microsoft.BizTalk.Services.dll`
    and the PDF dependencies.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 C# 类库项目，并将对 `Microsoft.BizTalk.Services.dll` 和 PDF 依赖项的引用添加到项目中。
- en: 'Implement a class for the `IMessageInspector` interface. In the example, we
    have extracted the message body to the `Order` message object as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `IMessageInspector` 接口的一个类。在示例中，我们将消息体提取到 `Order` 消息对象中，如下所示：
- en: '[PRE3]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'PDFGenerator describes the layout of the PDF structure in `layout.xml` as required
    by the codeplex tool. The XML itself is passed within the custom code DLL as an
    embedded resource and must be extracted before use as shown in the following code
    snippet:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PDFGenerator 以 `layout.xml` 中所需的格式描述 PDF 结构，该格式由 codeplex 工具要求。XML 本身作为嵌入资源传递在自定义代码
    DLL 中，必须在使用前提取，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Fill in the header, body, loop, and footer data of the PDF file using the data
    from the `Order` object. Use the PDFGenerator using the information shown in the
    following code snippet:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用来自 `Order` 对象的数据填写 PDF 文件的标题、正文、循环和页脚数据。使用以下代码片段中显示的信息使用 PDFGenerator：
- en: '[PRE5]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Write the PDF data back as a new message shown in the following code snippet:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 PDF 数据写回以下代码片段中显示的新消息：
- en: '[PRE6]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Sign the assembly output from the project. Note that all the DLL dependencies
    are needed to be signed.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对项目的输出程序集进行签名。请注意，所有 DLL 依赖项都需要签名。
- en: Configuring the bridge
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置桥接器
- en: 'Perform the following steps to configure the bridge:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以配置桥接器：
- en: Add a BizTalk Services project to the same solution and add references to the
    signed custom code.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一解决方案中添加 BizTalk Services 项目，并将对已签名自定义代码的引用添加到项目中。
- en: Add a bridge, in this case, a **Pass-Through** bridge, and call it Invoice2PDF.
    Also add the route for the message to a Windows Azure blob destination. Let's
    call the blob storage **PDFArchiveBlobs** as shown in the following figure:![Configuring
    the bridge](img/7401EN_04_07.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个桥梁，在这种情况下，一个**透传**桥梁，并将其命名为Invoice2PDF。同时将消息的路由添加到 Windows Azure 块存储目的地。以下图所示为**PDFArchiveBlobs**：![配置桥梁](img/7401EN_04_07.jpg)
- en: Invoice2PDF bridge sample in BizTalk Services project
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BizTalk 服务项目中的 Invoice2PDF 桥梁示例
- en: In the bridge properties, fill the required fields. For the bridge, add the
    BizTalk Services **Runtime Address** and **Routing Table** values. For the blob,
    add the **Shared Access Signature URL**. Click on the bridge, and from the properties
    window, open **Track Properties** on the bridge window to enable tracking.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在桥梁属性中填写所需字段。对于桥梁，添加 BizTalk 服务**运行时地址**和**路由表**值。对于块，添加**共享访问签名 URL**。点击桥梁，并从属性窗口中，在桥梁窗口上打开**跟踪属性**以启用跟踪。
- en: 'Get the full qualified assembly name of this custom code. If this is specified
    incorrectly, you will get an error during deployment. You can use the **GetAssemblyQualifiedTypeName**
    sample in MSDN Code Gallery, [http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-EAI-56915d1c/view/SourceCode](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-EAI-56915d1c/view/SourceCode),
    or alternatively, run `sn -T` on the DLL to determine the public key and determine
    the full qualified name. It should look something like this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取此自定义代码的全限定程序集名称。如果指定不正确，部署期间将出现错误。您可以使用 MSDN 代码库中的**GetAssemblyQualifiedTypeName**示例，[http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-EAI-56915d1c/view/SourceCode](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-EAI-56915d1c/view/SourceCode)，或者运行
    `sn -T` 在 DLL 上以确定公钥并确定全限定名称。它应该看起来像这样：
- en: '[PRE7]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Double-click on the pass-through bridge and click on the Enrich stage. From
    the properties window, click on **On-Exit Message Inspector** and add the full
    qualified name in the **Specify Custom Code Inspector** pop-up window, as shown
    in the following screenshot:![Configuring the bridge](img/7401EN_04_08.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击透传桥梁并点击 enrich 阶段。从属性窗口中，点击**退出消息检查器**并在**指定自定义代码检查器**弹出窗口中添加全限定名称，如图所示：![配置桥梁](img/7401EN_04_08.jpg)
- en: Custom code configuration with bridges
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用桥梁进行自定义代码配置
- en: Deploying the bridge
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署桥梁
- en: 'We can now deploy the bridge to the BizTalk Services deployment with the following
    steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以按照以下步骤将桥梁部署到 BizTalk 服务部署中：
- en: Launch VS and select the **Deploy** command from the **Build** menu and enter
    the BizTalk Service deployment details.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 VS 并从**构建**菜单中选择**部署**命令，并输入 BizTalk 服务部署详细信息。
- en: If the project is being deployed more than once, you need to check the **Refresh
    Service after deploy** checkbox so that the updated custom code DLLs are picked-up.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果项目部署多次，需要勾选**部署后刷新服务**复选框，以便更新自定义代码 DLL 被拾取。
- en: 'The VS output block will be similar to the one shown as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: VS 输出块将与以下所示类似：
- en: '![Deploying the bridge](img/7401EN_04_09.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![部署桥梁](img/7401EN_04_09.jpg)'
- en: VS output for bridge deployment
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: VS 桥梁部署输出
- en: Sending messages
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发送消息
- en: Use the Message Sender tool from MSDN Code Gallery samples for BizTalk Services
    to send messages to the bridge, or you can also download the BizTalk Services
    Explorer plugin for VS Server Explorer. This allows you to explore the deployment
    and also send test messages.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 MSDN 代码库示例中的 Message Sender 工具向桥梁发送消息，或者你也可以下载 BizTalk 服务探索插件用于 VS 服务器资源管理器。这允许你探索部署并发送测试消息。
- en: Once the messages are sent successfully, go to the container with the SAS URL
    and save the blob locally. Rename the file to a `.PDF` extension and you should
    be able to view the archived PDFs.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦消息成功发送，转到具有 SAS URL 的容器并本地保存块。将文件重命名为`.PDF`扩展名，你应该能够查看存档的 PDF 文件。
- en: Viewing tracking data
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看跟踪数据
- en: Click on the Tracking view in the navigation bar of the BizTalk Services portal
    to see the status of message flow on the bridge. It's also possible to view this
    information from the BizTalk Service Explorer in VS on a per-bridge basis.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 BizTalk 服务门户导航栏中的跟踪视图以查看桥梁上消息流的状态。也可以从 VS 中的 BizTalk 服务探索器按桥梁基础查看此信息。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started with the basic concepts of EAI on Azure, notably
    bridges, sources, destinations, hybrid connectivity, and custom code. We walked
    through a simple scenario in BizTalk Services generating PDF invoices and archiving
    in a blob store. It is possible to encounter an error while using custom code
    in bridges. We will cover aspects of troubleshooting in [Chapter 7](ch07.html
    "Chapter 7. Tracking and Troubleshooting"), *Tracking and Troubleshooting*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先介绍了 Azure 上 EAI 的基本概念，特别是桥梁、源、目标、混合连接和自定义代码。我们通过一个简单的场景在 BizTalk 服务中生成
    PDF 发票并在 Blob 存储中归档进行了演示。在使用桥梁中的自定义代码时可能会遇到错误。我们将在[第 7 章](ch07.html "第 7 章。跟踪和故障排除")
    *跟踪和故障排除*中介绍故障排除的各个方面。
- en: In the next chapter, we will look at another key scenario supported in BizTalk
    Services—integrating across businesses using B2B capabilities.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 BizTalk 服务支持的另一个关键场景——利用 B2B 功能实现跨企业集成。
