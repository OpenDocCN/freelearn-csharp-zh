- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Building a Modal Dialog Using Templated Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板组件构建模态对话框
- en: A modal dialog is a dialog box that appears on top of all other content in a
    window and requires user interaction to close it. A templated component is a component
    that accepts one or more UI templates as parameters. The UI templates of a templated
    component can contain any Razor markup.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 模态对话框是一个出现在窗口所有其他内容之上的对话框，需要用户交互才能关闭它。模板组件是一个接受一个或多个UI模板作为参数的组件。模板组件的UI模板可以包含任何Razor标记。
- en: In this chapter, we will learn about **RenderFragment** parameters, **EventCallback**
    parameters, and CSS isolation. `RenderFragment` parameters are used when a parent
    component needs to share information with a child component, and conversely, `EventCallback`
    parameters are used when a child component needs to share information with its
    parent component. CSS isolation is used to scope CSS styles to a specific component.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习**RenderFragment**参数、**EventCallback**参数以及CSS隔离。当父组件需要与子组件共享信息时，会使用`RenderFragment`参数，反之，当子组件需要与其父组件共享信息时，会使用`EventCallback`参数。CSS隔离用于将CSS样式限定在特定的组件范围内。
- en: In this chapter, we will create a modal dialog component. The component will
    be a templated component that can render different HTML based on its parameters.
    It will use event callbacks to return events to the calling component. It will
    use CSS isolation to add the formatting that will make it behave like a modal
    dialog. We will test the modal dialog component by adding it to another component.
    Finally, we will move the component to a **Razor class library** so that it can
    be easily shared with other projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个模态对话框组件。该组件将是一个模板组件，可以根据其参数渲染不同的HTML。它将使用事件回调将事件返回给调用组件。它将使用CSS隔离来添加使其表现得像模态对话框的格式。我们将通过将其添加到另一个组件来测试模态对话框组件。最后，我们将该组件移动到**Razor类库**中，以便它可以轻松地与其他项目共享。
- en: Custom components
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自定义组件
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: can be used over again.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可以重复使用。
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make a library!
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 创建库！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using `RenderFragment` parameters
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`RenderFragment`参数
- en: Using `EventCallback` parameters
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`EventCallback`参数
- en: Understanding CSS isolation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解CSS隔离
- en: Creating a Razor class library
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Razor类库
- en: Creating the modal dialog project
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模态对话框项目
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的PC上安装Visual Studio 2022。有关如何安装Visual Studio 2022免费社区版的说明，请参阅*第1章*，*Blazor
    WebAssembly简介*。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter04).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下GitHub仓库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter04)。
- en: 'The Code in Action video is available here: [https://packt.link/Ch4](https://packt.link/Ch4).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 《Code in Action》视频在此处可用：[https://packt.link/Ch4](https://packt.link/Ch4)。
- en: Using RenderFragment parameters
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`RenderFragment`参数
- en: A `RenderFragment` parameter is a segment of UI content. It is used to communicate
    UI content from the parent to the child. The UI content can include plain text,
    HTML markup, Razor markup, or another component.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`RenderFragment`参数是UI内容的一部分。它用于从父组件向子组件传递UI内容。UI内容可以包括纯文本、HTML标记、Razor标记或另一个组件。
- en: 'The following code is for the `Alert` component. The UI content of the `Alert`
    component is displayed when the value of its `Show` property is `true`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是`Alert`组件的代码。当`Alert`组件的`Show`属性值为`true`时，会显示其UI内容：
- en: '**Alert.razor**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alert.razor**'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code, for the `Alert` component, includes three different types
    of parameters: simple type, `EventCallback`, and `RenderFragment`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码，对于`Alert`组件，包括三种不同类型的参数：简单类型、`EventCallback`和`RenderFragment`：
- en: The first parameter is the `Show` property. It is of type `Boolean`, which is
    a simple type. For more information on using simple types as parameters, see *Chapter
    2*, *Building Your First Blazor WebAssembly Application*.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是`Show`属性。它是一个简单类型，类型为`Boolean`。有关如何将简单类型用作参数的更多信息，请参阅*第2章*，*构建您的第一个Blazor
    WebAssembly应用程序*。
- en: The second parameter is the `OnOk` property. It is of type `EventCallback`.
    We will learn more about `EventCallback` parameters in the next section.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是 `OnOk` 属性。它属于 `EventCallback` 类型。在下一节中，我们将了解更多关于 `EventCallback` 参数的信息。
- en: The last parameter is the `ChildContent` property. It is of type `RenderFragment`
    and is the subject of this section.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数是 `ChildContent` 属性。它属于 `RenderFragment` 类型，是本节的主题。
- en: 'The following markup uses the `Alert` component to display the current day
    of the week in a dialog when the **Show Alert** button is clicked. The Razor markup
    between the opening tag and the closing tag of the `Alert` element is bound to
    the `ChildContent` property of the `Alert` component:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标记使用 `Alert` 组件在点击 **Show Alert** 按钮时在对话框中显示当前星期几。在 `Alert` 元素的开始标签和结束标签之间的
    Razor 标记绑定到 `Alert` 组件的 `ChildContent` 属性：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the dialog that is displayed when the **Show
    Alert** button is clicked:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了点击 **Show Alert** 按钮时显示的对话框：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_04_01.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_04_01.png)'
- en: 'Figure 4.1: Sample alert'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：示例警报
- en: 'The name of the `RenderFragment` parameter must be `ChildContent` to use the
    content of the element without explicitly specifying the parameter’s name. For
    example, the following markup results in the same output as the preceding markup
    that did not explicitly specify the `ChildContent` element:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用元素的内容而不明确指定参数的名称，`RenderFragment` 参数的名称必须是 `ChildContent`。例如，以下标记的结果与前面未明确指定
    `ChildContent` 元素的标记相同：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ChildContent` element is highlighted in the preceding markup.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段标记中突出显示了 `ChildContent` 元素。
- en: '**IMPORTANT NOTE**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: By convention, the name of the `RenderFragment` parameter used to capture the
    content of a parent element must be `ChildContent`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，用于捕获父元素内容的 `RenderFragment` 参数的名称必须是 `ChildContent`。
- en: It is possible to include multiple `RenderFragment` parameters in a component
    by explicitly specifying each parameter’s name in the markup. We will use multiple
    `RenderFragment` parameters to complete the project in this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在标记中明确指定每个参数的名称，可以在组件中包含多个 `RenderFragment` 参数。在本章中，我们将使用多个 `RenderFragment`
    参数来完成项目。
- en: A `RenderFragment` parameter enables a parent component to communicate the UI
    content to be used by its child component, while an `EventCallback` parameter
    is used to communicate from the child component back to the parent component.
    In the next section, we will explain how to use `EventCallback` parameters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`RenderFragment` 参数允许父组件将其要由子组件使用的 UI 内容传达给子组件，而 `EventCallback` 参数用于从子组件向父组件传达。在下一节中，我们将解释如何使用
    `EventCallback` 参数。'
- en: Using EventCallback parameters
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 EventCallback 参数
- en: An event callback is a method that is passed to another method when a particular
    event occurs. For example, when the button on the `Alert` component is clicked,
    the `@onclick` event uses the `OnOk` parameter to determine the method that should
    be called. The method that the `OnOK` parameter references is defined in the parent
    component.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 事件回调是在特定事件发生时传递给另一个方法的函数。例如，当 `Alert` 组件上的按钮被点击时，`@onclick` 事件使用 `OnOk` 参数来确定应该调用哪个方法。`OnOK`
    参数引用的方法是在父组件中定义的。
- en: As previously stated, `EventCallback` parameters are used to share information
    from the child component to the parent component. They share information with
    their parent and notify their parent when something, such as a button click, has
    occurred. The parent component simply specifies the method to call when the event
    is triggered.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`EventCallback` 参数用于从子组件向父组件共享信息。它们与父组件共享信息，并在发生某些事件，例如按钮点击时通知父组件。父组件只需指定在事件触发时调用的方法。
- en: 'This is an example of an `EventCallback` parameter:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `EventCallback` 参数的示例：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following example uses a **lambda expression** for the `OnOk` method. When
    the `OnOk` method is called, the value of the `showAlert` property is set to `false`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用 lambda 表达式为 `OnOk` 方法。当调用 `OnOk` 方法时，`showAlert` 属性的值设置为 `false`：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A lambda expression is used to create an anonymous function. However, we do
    not need to use anonymous functions when using `EventCallback` parameters. The
    following example shows how to use a method for the `OnOk` method instead of an
    anonymous function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 lambda 表达式创建匿名函数。然而，在使用 `EventCallback` 参数时，我们不需要使用匿名函数。以下示例展示了如何使用方法而不是匿名函数来更新
    `OnOk` 方法：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code defines a new `OkClickHandler` method that is called when
    the button is clicked.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码定义了一个新的 `OkClickHandler` 方法，当按钮被点击时调用。
- en: When writing the `Alert` component, you might be tempted to update the `Show`
    parameter directly from the `OnOk` event on the component. You must not do so
    because if you update the values directly in the component and the component needs
    to be re-rendered, any state changes will be lost. If you need to maintain state
    in the component, you should add a private field to the component.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写 `Alert` 组件时，你可能想直接从组件上的 `OnOk` 事件更新 `Show` 参数。你必须不要这样做，因为如果你直接在组件中更新值，并且组件需要重新渲染，任何状态更改都将丢失。如果你需要在组件中维护状态，你应该向组件添加一个私有字段。
- en: '**IMPORTANT NOTE**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Components should never write to their own parameters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 组件不应向自己的参数写入数据。
- en: For more information on using events, refer to *Chapter 8*, *Building a Kanban
    Board Using Events*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用事件的更多信息，请参阅 *第8章*，*使用事件构建看板*。
- en: The `Alert` component displays text on the page, but it does not yet work like
    a modal dialog. To make it work like a modal dialog, we need to update the style
    sheets that are used by the component. We can do that by using CSS isolation.
    In the next section, we will explain how to use CSS isolation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Alert` 组件在页面上显示文本，但它还没有像模态对话框那样工作。要使其像模态对话框一样工作，我们需要更新组件使用的样式表。我们可以通过使用 CSS
    隔离来实现这一点。在下一节中，我们将解释如何使用 CSS 隔离。'
- en: Understanding CSS isolation
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 CSS 隔离
- en: The location of the **cascading style sheets** (**CSS**) used to style our Blazor
    WebAssembly apps is usually the `wwwroot` folder. Usually, the styles defined
    in those CSS files are applied to all the components in the web app. However,
    there are times when we want more control over the styles that are applied to
    a particular component. To achieve that, we use CSS isolation. With CSS isolation,
    the styles in the designated CSS file will override the global styles and will
    target only a specific component and its child components.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 用于样式化我们的 Blazor WebAssembly 应用程序的 **级联样式表**（**CSS**）的位置通常是 `wwwroot` 文件夹。通常，这些
    CSS 文件中定义的样式应用于 Web 应用程序中的所有组件。然而，有时我们希望对应用于特定组件的样式有更多的控制。为了实现这一点，我们使用 CSS 隔离。使用
    CSS 隔离，指定 CSS 文件中的样式将覆盖全局样式，并且仅针对特定组件及其子组件。
- en: Enabling CSS isolation
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 CSS 隔离
- en: To add a CSS file that is scoped to a specific component, create a CSS file
    in the same folder as the component with the same name as the component, but with
    a CSS file extension. For example, the CSS file for the `Alert.razor` component
    would be called `Alert.razor.css`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个针对特定组件的 CSS 文件，请在与组件相同的文件夹中创建一个与组件同名的 CSS 文件，但带有 CSS 文件扩展名。例如，`Alert.razor`
    组件的 CSS 文件将被称为 `Alert.razor.css`。
- en: 'The following markup is for an updated version of the `Alert` component. In
    this version, we have added the two highlighted classes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标记是 `Alert` 组件的更新版本。在这个版本中，我们添加了两个突出显示的类：
- en: '**Alert.razor**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alert.razor**'
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following `Alert.razor.css` file defines the styles used by the new classes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `Alert.razor.css` 文件定义了新类所使用的样式：
- en: '**Alert.razor.css**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Alert.razor.css**'
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding CSS includes styles for both the `dialog-container` class and
    the `dialog` class:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 CSS 包含了 `dialog-container` 类和 `dialog` 类的样式：
- en: '`dialog-container`: This class sets the background color of the element to
    black with 60% opacity and places it on top of the other elements, by setting
    its z-index to 2,000.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialog-container`: 此类将元素的背景色设置为带有 60% 透明度的黑色，并通过将其 z-index 设置为 2,000 将其放置在其他元素之上。'
- en: '`dialog`: This class sets the background color of the element white, centers
    it horizontally within its parent, and sets its width to 15 REM.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialog`: 此类将元素的背景色设置为白色，将其水平居中在其父元素内，并将其宽度设置为 15 REM。'
- en: 'To enable the project to use the CSS, we need to add a link to the `wwwroot/index.html`
    file. By convention, the name of the CSS file that needs to be linked is the assembly’s
    name followed by `.styles.css`. For example, if the name of the project is `Demo4`,
    a link to `Demo4.styles.css` needs to be added to the `wwwroot/index.html` file.
    The following highlighted markup shows the link to apply the styles defined in
    the `Alert.razor.css` file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使项目能够使用 CSS，我们需要在 `wwwroot/index.html` 文件中添加一个链接。按照惯例，需要链接的 CSS 文件名是程序集的名称后跟
    `.styles.css`。例如，如果项目的名称是 `Demo4`，则需要将 `Demo4.styles.css` 的链接添加到 `wwwroot/index.html`
    文件中。以下高亮标记显示了应用于 `Alert.razor.css` 文件中定义的样式的链接：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the `Alert` component using the preceding `Alert.razor.css`
    file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用前面的 `Alert.razor.css` 文件创建的 `Alert` 组件：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_04_02.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序  描述由自动生成](img/B18471_04_02.png)'
- en: 'Figure 4.2: Alert component'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：Alert 组件
- en: In the preceding example, the linked `Demo4.style.css` file is created at build
    time. When it is created, the Blazor engine rewrites the CSS and HTML for each
    component by appending a string generated by the framework that is unique for
    each component. The rewritten CSS styles are bundled into one file and saved as
    a static resource.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，链接的 `Demo4.style.css` 文件是在构建时创建的。当它被创建时，Blazor 引擎通过附加框架为每个组件生成的唯一字符串重写每个组件的
    CSS 和 HTML。重写的 CSS 样式被捆绑到一个文件中，并保存为静态资源。
- en: 'This is a portion of the `Demo4.styles.css` file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Demo4.styles.css` 文件的一部分：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the rewritten HTML that references the rewritten styles:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是引用重写样式的重写 HTML：
- en: '![A picture containing text  Description automatically generated](img/B18471_04_03.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图片  描述由自动生成](img/B18471_04_03.png)'
- en: 'Figure 4.3: Rewritten HTML'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：重写的 HTML
- en: By convention, the contents of the `Demo4.styles.css` file are in the `obj/{CONFIGURATION}/{TARGET
    FRAMEWORK}/scopedcss/projectbundle/{ASSEMBLY NAME}.bundle.scp.css` file. In the
    preceding example, the file was in the `\Demo4\obj\Debug\net7.0\scopedcss\bundle`
    folder.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，`Demo4.styles.css` 文件的内容位于 `obj/{CONFIGURATION}/{TARGET FRAMEWORK}/scopedcss/projectbundle/{ASSEMBLY
    NAME}.bundle.scp.css` 文件中。在上面的例子中，文件位于 `\Demo4\obj\Debug\net7.0\scopedcss\bundle`
    文件夹中。
- en: Supporting child components
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持子组件
- en: By default, when using CSS isolation, the CSS styles only apply to the current
    component. If we want the CSS styles to apply to a child component of the current
    component, we need to use the `::deep` pseudo-element within our style. This pseudo-element
    selects the elements that are descendants of the element’s identifier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当使用 CSS 隔离时，CSS 样式只应用于当前组件。如果我们想让 CSS 样式应用于当前组件的子组件，我们需要在我们的样式中使用 `::deep`
    伪元素。这个伪元素选择元素标识符的子元素。
- en: 'For example, the following style will be applied to any `H1` headings within
    the current component, as well as any `H1` headings within the child components
    of the current component:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下样式将应用于当前组件内的任何 `H1` 标题，以及当前组件的子组件内的任何 `H1` 标题：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: CSS isolation is useful if you don’t want your component to use the global styles
    or want to share your component via a Razor class library.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想你的组件使用全局样式或者想要通过 Razor 类库共享你的组件，CSS 隔离是有用的。
- en: '**IMPORTANT NOTE**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Scoped CSS does not apply to Razor components. It only applies to the HTML elements
    that are rendered by the Razor component.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域 CSS 不适用于 Razor 组件。它只适用于由 Razor 组件渲染的 HTML 元素。
- en: Now let’s take a look at the project that we will be building in this chapter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看本章我们将要构建的项目。
- en: Creating the modal dialog project
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模态对话框项目
- en: In this chapter, we will build a modal dialog component. We will enable both
    the `Title` and the `Body` of the modal dialog component to be customized using
    Razor markup. We will add the modal dialog component to another component.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个模态对话框组件。我们将通过 Razor 标记启用模态对话框组件的 `Title` 和 `Body` 可以自定义。我们将把模态对话框组件添加到另一个组件中。
- en: 'This is a screenshot of the modal dialog:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模态对话框的截图：
- en: '![Graphical user interface  Description automatically generated with low confidence](img/B18471_04_04.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面  描述由低置信度自动生成](img/B18471_04_04.png)'
- en: 'Figure 4.4: Modal dialog'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4：模态对话框
- en: After we have completed the modal dialog component, we will move it into a Razor
    class library so that it can be shared with other projects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成模态对话框组件后，我们将将其移动到 Razor 类库中，以便它可以与其他项目共享。
- en: The build time for this project is approximately 90 minutes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的构建时间大约为 90 分钟。
- en: Project overview
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: The `ModalDialog` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. We
    will add a `Dialog` component that includes multiple sections and use CSS isolation
    to apply styles that make it behave like a modal dialog. We will use `EventCallback`
    parameters to communicate from the component back to the parent when a button
    is clicked. We will use `RenderFragment` parameters to allow Razor markup to be
    communicated from the parent to the component. Finally, we will create a Razor
    class library and move the `Dialog` component into it so that the modal dialog
    can be shared with other projects.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModalDialog` 项目将通过使用 Microsoft 的 **Blazor WebAssembly App 空项目模板** 创建一个空的 Blazor
    WebAssembly 项目。我们将添加一个包含多个部分的 `Dialog` 组件，并使用 CSS 隔离来应用使其表现得像模态对话框的样式。我们将使用 `EventCallback`
    参数在按钮点击时从组件向父组件通信。我们将使用 `RenderFragment` 参数允许 Razor 标记从父组件向组件通信。最后，我们将创建一个 Razor
    类库并将 `Dialog` 组件移动到其中，以便模态对话框可以与其他项目共享。'
- en: Getting started with the project
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目入门
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的 Blazor WebAssembly 应用程序。我们这样做如下：
- en: Open Visual Studio 2022.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2022。
- en: Click the **Create a new project** button.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建新项目** 按钮。
- en: Press *Alt*+*S* to enter the search for the templates textbox.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Alt*+*S* 进入搜索模板文本框。
- en: Enter `Blazor` and press the *Enter* key.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `Blazor` 并按 *Enter* 键。
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 **Blazor WebAssembly App 空项目模板**。
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_04_05.png)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息  自动生成的描述](img/B18471_04_05.png)'
- en: 'Figure 4.5: Blazor WebAssembly App Empty project template'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.5：Blazor WebAssembly App 空项目模板
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Blazor WebAssembly App 空项目模板** 并点击 **下一步** 按钮。
- en: Enter `ModalDialog` in the **Project name** textbox and click the **Next** button.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目名称** 文本框中输入 `ModalDialog` 并点击 **下一步** 按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一张用于配置我们新项目的对话框截图：
- en: '![](img/B18471_04_06.png)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18471_04_06.png)'
- en: 'Figure 4.6: Configure your new project dialog'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.6：配置新项目对话框
- en: '**TIP**'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `ModalDialog` project into the `E:\Blazor`
    folder. However, the location of this project is not important.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将 `ModalDialog` 项目放置到了 `E:\Blazor` 文件夹中。然而，这个项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **.NET 7.0** 作为要使用的 **框架** 版本。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选 **配置为 HTTPS** 复选框。
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选 **ASP.NET Core 承载** 复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选 **渐进式 Web应用程序** 复选框。
- en: This is a screenshot of the dialog used to collect additional information about
    our new project.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一张用于收集关于我们新项目额外信息的对话框截图。
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_04_07.png)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_04_07.png)'
- en: 'Figure 4.7: Additional information dialog'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.7：附加信息对话框
- en: Click the **Create** button.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 按钮。
- en: We have created the `ModalDialog` Blazor WebAssembly project. However, it is
    practically empty. Let’s add the `Dialog` component.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了 `ModalDialog` Blazor WebAssembly 项目。然而，它实际上是一个空项目。让我们添加 `Dialog` 组件。
- en: Adding the Dialog component
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Dialog 组件
- en: 'The `Dialog` component will be shared. Therefore, we will add it to the `Shared`
    folder. We do this as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dialog` 组件将被共享。因此，我们将将其添加到 `Shared` 文件夹中。我们这样做如下：'
- en: Right-click the `ModalDialog` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `ModalDialog` 项目并从菜单中选择 **添加**，**新建文件夹** 选项。
- en: Name the new folder `Shared`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为 `Shared`。
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Shared` 文件夹并从菜单中选择 **添加**，**Razor 组件** 选项。
- en: Name the new component `Dialog`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为 `Dialog`。
- en: Click the **Add** button.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Replace the markup in the `Dialog.razor` file with the following markup:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Dialog.razor` 文件中的标记替换为以下标记：
- en: '[PRE11]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code, the `Show` property is used to show and hide the contents
    of the component.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用 `Show` 属性来显示和隐藏组件的内容。
- en: We have added a `Dialog` component, but it will not behave like a modal dialog
    box until the appropriate styles have been added to the project.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了一个 `Dialog` 组件，但除非向项目中添加了适当的样式，否则它不会像模态对话框那样表现。
- en: Add a CSS file
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 CSS 文件
- en: 'The preceding markup includes five classes that we will use to style the `Dialog`
    component to make it behave like a modal dialog:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的标记包括五个我们将用于将 `Dialog` 组件样式化为模态对话框的类：
- en: '`dialog-container`: This class is used to set the background color of the element
    to black with 60% opacity and place it on top of the other elements, by setting
    its z-index to 2,000.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialog-container`：此类用于将元素的背景颜色设置为黑色，60% 透明度，并通过将其 z-index 设置为 2,000 将其放置在其他元素之上。'
- en: '`dialog`: This class is used to set the background color of the element to
    white, center it horizontally within its parent, and set its width to 25 REM.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialog`：此类用于将元素的背景颜色设置为白色，在其父元素内水平居中，并将其宽度设置为 25 REM。'
- en: '`dialog-title`: This class is used to set the background color to dark gray,
    set the text to white, and add some padding.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialog-title`：此类用于将背景颜色设置为深灰色，将文本设置为白色，并添加一些填充。'
- en: '`dialog-body`: This class is used to add some padding to the body.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialog-body`：此类用于向主体添加一些填充。'
- en: '`dialog-buttons`: This class is used to set the background color to silver
    and add some padding.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialog-buttons`：此类用于将背景颜色设置为银色并添加一些填充。'
- en: 'We need to create a `CSS` file to define how to style each of these classes.
    We do this as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个 `CSS` 文件来定义如何为这些类设置样式。我们这样做如下：
- en: Right-click the `Shared` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Shared` 文件夹，从菜单中选择 **添加**、**新建项** 选项。
- en: Enter `css` in the **Search** box.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索** 框中输入 `css`。
- en: Select **Style Sheet**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **样式表**。
- en: Name the style sheet `Dialog.razor.css`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将样式表命名为 `Dialog.razor.css`。
- en: Click the **Add** button.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Enter the following styles into the `Dialog.razor.css` file:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下样式输入到 `Dialog.razor.css` 文件中：
- en: '[PRE12]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the `wwwroot/index.html` file.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `wwwroot/index.html` 文件。
- en: 'Uncomment the following `link` element to the bottom of the `head` element:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消注释以下 `link` 元素并将其添加到 `head` 元素的底部：
- en: '[PRE13]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The styles in the `Dialog.razor.cs` file will only be used by the `Dialog` component
    due to CSS isolation. Next, let’s test the `Dialog` component.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CSS 隔离，`Dialog.razor.cs` 文件中的样式只将由 `Dialog` 组件使用。接下来，让我们测试 `Dialog` 组件。
- en: Test the Dialog component
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Dialog 组件
- en: 'To test the `Dialog` component, we need to add it to another component. We
    will add it to the `Index` component that is used as the `Home` page of the application.
    We do this as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 `Dialog` 组件，我们需要将其添加到另一个组件中。我们将将其添加到用作应用程序 `Home` 页面的 `Index` 组件中。我们这样做如下：
- en: Open the `_Imports.razor` file.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `_Imports.razor` 文件。
- en: 'Add the following `using` statement:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `using` 语句：
- en: '[PRE14]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open the `Pages/Index.razor` file.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Index.razor` 文件。
- en: Remove the `h1` element from the `Index.razor` file.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Index.razor` 文件中删除 `h1` 元素。
- en: 'Add the following markup to the `Index.razor` file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `Index.razor` 文件添加以下标记：
- en: '[PRE15]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**IMPORTANT NOTE**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Do not remove the `@page` directive from the top of the file while editing the
    `Index` component.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑 `Index` 组件时，不要从文件顶部删除 `@page` 指令。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 启动应用程序，不进行调试。
- en: Click the **Show Dialog** button.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **显示对话框** 按钮。
- en: 'This is the modal dialog that is displayed:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是显示的模态对话框：
- en: '![Shape, rectangle  Description automatically generated with medium confidence](img/B18471_04_08.png)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![形状，矩形  描述由中等置信度自动生成](img/B18471_04_08.png)'
- en: 'Figure 4.8: Sample modal dialog'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.8：示例模态对话框
- en: Click the **Ok** button.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **确定** 按钮。
- en: Nothing happens when you click the **Ok** button because we have not yet added
    an `@onclick` event.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你点击 **确定** 按钮时没有发生任何事情，因为我们还没有添加 `@onclick` 事件。
- en: Close the browser.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We will add a couple of `EventCallback` parameters to communicate from the `Dialog`
    component back to the `Index` component.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加几个 `EventCallback` 参数，以便从 `Dialog` 组件与 `Index` 组件进行通信。
- en: Add EventCallback parameters
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加事件回调参数
- en: 'We need to add `@onclick` events for both the **Ok** button and the **Cancel**
    button. We do this as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为 **确定** 按钮和 **取消** 按钮添加 `@onclick` 事件。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Open the `Shared/Dialog.razor` file.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Shared/Dialog.razor` 文件。
- en: 'Add `@onclick` events to each of the buttons as indicated by the following
    highlighted code:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加如下高亮显示的代码指示的每个按钮的 `@onclick` 事件：
- en: '[PRE16]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following parameters to the code block:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向代码块添加以下参数：
- en: '[PRE17]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**TIP**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The `Parameter` attribute does not need to be on the same line as the property
    that it applies to.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`Parameter`属性不需要与它应用的属性在同一行上。'
- en: Open the `Pages/Index.razor` file.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/Index.razor`文件。
- en: 'Update the markup for the `Dialog` element by adding the highlighted markup:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下高亮标记来更新`Dialog`元素的标记：
- en: '[PRE18]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following methods to the code block:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下方法添加到代码块中：
- en: '[PRE19]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**TIP**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Since `e` is not being used in the preceding methods, we do not need to specify
    `MouseEventArgs` in the method’s definition. We have included it for demonstration
    purposes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`e`在前面方法中没有使用，我们不需要在方法定义中指定`MouseEventArgs`。我们包括它是为了演示目的。
- en: Press *Ctrl+F5* to start the application without debugging.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl+F5*启动应用程序而不进行调试。
- en: Click the **Show Dialog** button.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**显示对话框**按钮。
- en: Click the **Ok** button.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮。
- en: The dialog box closes when you click the **Ok** button.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**确定**按钮时，对话框将关闭。
- en: Now let’s update the `Dialog` component to allow us to customize both the `Title`
    and `Body` properties of the modal dialog that it creates.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更新`Dialog`组件，以便我们可以自定义它创建的模态对话框的`Title`和`Body`属性。
- en: Add RenderFragment parameters
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加`RenderFragment`参数
- en: 'We will use `RenderFragment` parameters for both the `Title` and `Body` properties
    of the `Dialog` component. We do this as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`Dialog`组件的`Title`和`Body`属性使用`RenderFragment`参数。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Open the `Shared/Dialog.razor` file.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Shared/Dialog.razor`文件。
- en: 'Update the markup for `dialog-title` to the following:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`dialog-title`的标记更新为以下内容：
- en: '[PRE20]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Update the markup for `dialog-body` to the following:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`dialog-body`的标记更新为以下内容：
- en: '[PRE21]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following parameters to the code block:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下参数添加到代码块中：
- en: '[PRE22]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Open the `Pages/Index.razor` file.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/Index.razor`文件。
- en: 'Update the markup for the `Dialog` element to the following:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Dialog`元素的标记更新为以下内容：
- en: '[PRE23]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding markup will change the title of the dialog to `Quick List` and
    provide a textbox for the user to enter items for a list.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的标记将对话框的标题更改为`快速列表`并为用户提供一个文本框来输入列表项。
- en: 'Add the following markup under the `Dialog` element:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Dialog`元素下添加以下标记：
- en: '[PRE24]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding code will display each of the items in the `Items` list in an
    ordered list.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将在有序列表中显示`Items`列表中的每个项目。
- en: 'Add the following variables to the top of the code block:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码块顶部添加以下变量：
- en: '[PRE25]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update `DialogCancelHandler` to the following:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`DialogCancelHandler`更新为以下内容：
- en: '[PRE26]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding code will clear the textbox and hide the contents of the `Dialog`
    component.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将清除文本框并隐藏`Dialog`组件的内容。
- en: 'Update `DialogOkHandler` to the following:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`DialogOkHandler`更新为以下内容：
- en: '[PRE27]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code will add `NewItem` to the `Items` list, clear the textbox,
    and hide the contents of the `Dialog` component.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将`NewItem`添加到`Items`列表中，清除文本框，并隐藏`Dialog`组件的内容。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*启动应用程序而不进行调试。
- en: Click the **Show Dialog** button.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**显示对话框**按钮。
- en: Enter some text in the **Enter New Item** field.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**输入新项**字段中输入一些文本。
- en: Click the **Ok** button.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮。
- en: Repeat.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复。
- en: 'Each time the **Ok** button is clicked, the text in the **Enter New Item**
    field will be added to the list. The following screenshot shows a list where three
    items have already been added and a fourth item is about to be added using the
    modal dialog:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次点击**确定**按钮，**输入新项**字段中的文本将被添加到列表中。以下截图显示了一个已添加三个项目并即将使用模态对话框添加第四个项目的列表：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_04_09.png)'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_04_09.png)'
- en: 'Figure 4.9: Sample Quick List'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.9：示例快速列表
- en: Close the browser.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: To share this new component with other projects, we need to add it to a Razor
    class library.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此新组件与其他项目共享，我们需要将其添加到Razor类库中。
- en: Create a Razor class library
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Razor类库
- en: 'We can share components across projects by using a Razor class library. To
    create a Razor class library, we will use the **Razor Class Library** project
    template. We do this as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用Razor类库在项目之间共享组件。要创建Razor类库，我们将使用**Razor类库**项目模板。我们这样做如下：
- en: Right-click the solution and select the **Add**, **New Project** option from
    the menu.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击解决方案，从菜单中选择**添加**、**新建项目**选项。
- en: Enter `Razor Class Library` in the **Search for templates** textbox to locate
    the **Razor Class Library** project template.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索模板**文本框中输入`Razor类库`以定位**Razor类库**项目模板。
- en: 'The following screenshot shows the **Razor Class Library** project template:'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, chat or text message  Description automatically
    generated](img/B18471_04_10.png)'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.10: Razor Class Library project template'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Razor Class Library** project template.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the project `MyComponents` and click the **Next** button.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Support pages and views** checkbox.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `ModalDialog` project and select the **Add**, **Project Reference**
    option from the menu.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `MyComponents` checkbox and click the **OK** button.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the `MyComponents` Razor class library, and we have added a
    reference to it from the `ModalDialog` project. Let’s test it.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Test the Razor class library
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MyComponents` Razor class library that we have just created using the
    project template includes one component, called `Component1`. Before we continue,
    we need to test that the new Razor class library is working properly. We do this
    as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ModalDialog.Pages/Index.razor` file.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following using statement right below the `@page` directive:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**TIP**'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you will be using this project on multiple pages, you should consider adding
    the `using` statement to the `ModalDialog._Imports.razor` file so that you do
    not need to include it in every component that uses it.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup below the `PageTitle` element:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the `Component1` component should render:'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![A picture containing shape  Description automatically generated](img/B18471_04_11.png)'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.11: Component1'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `Component1` component is missing its styling, it is because the CSS
    file is cached. Use the following key combination, *Ctrl*+*Shift*+*R*, to empty
    the cache and reload the page.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `Component1` element from the `Index` component.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have finished testing the `MyComponents` Razor class library. Now it’s time
    to add our custom `Dialog` component to the `MyComponents` Razor class library.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Add a component to the Razor class library
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To share the `Dialog` component, we need to move it into the Razor class library
    that we just created and tested. We do this as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ModalDialog.Shared/Dialog.razor` file and select the **Copy**
    option from the menu.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `MyComponents` project and select the **Paste** option from
    the menu.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `MyComponents.Dialog.razor` file and select the **Rename** option
    from the menu.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the file `BweDialog.razor`.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, `Bwe` stands for *Blazor WebAssembly by Example*.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When naming components in a Razor class library, you should give them unique
    names to avoid ambiguous reference errors. Most organizations prefix all their
    shared components with the same text. For example, a company named **One Stop
    Designs** (**OSD**) might prefix all their shared components with `Osd`.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在命名 Razor 类库中的组件时，你应该给它们唯一的名称以避免模糊引用错误。大多数组织都会在所有共享组件前加上相同的文本。例如，名为 **One Stop
    Designs** （**OSD**） 的公司可能会在所有共享组件前加上 `Osd`。
- en: Open the `ModalDialog.Pages/Index.razor` file.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ModalDialog.Pages/Index.razor` 文件。
- en: Rename the `Dialog` element `BweDialog`.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Dialog` 元素重命名为 `BweDialog`。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: Click the **Show Dialog** button.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Show Dialog** 按钮。
- en: Enter some text in the **Enter New Item** field.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Enter New Item** 字段中输入一些文本。
- en: Click the **Ok** button.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Ok** 按钮。
- en: Repeat.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复。
- en: The `BweDialog` component is now being used from the `MyComponents` Razor class
    library. Since the `BweDialog` component is included in a Razor class library,
    it can easily be shared with other projects.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`BweDialog` 组件现在正从 `MyComponents` Razor 类库中使用。由于 `BweDialog` 组件包含在 Razor 类库中，它可以很容易地与其他项目共享。'
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to create a modal dialog and share it with multiple projects
    by using a Razor class library.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够通过使用 Razor 类库创建一个模态对话框，并将其与多个项目共享。
- en: In this chapter, we introduced `RenderFragment` parameters, `EventCallback`
    parameters, and CSS isolation.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 `RenderFragment` 参数、`EventCallback` 参数和 CSS 隔离。
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project. We created a `Dialog` component that acts like a modal dialog.
    The `Dialog` component uses both `RenderFragment` parameters and `EventCallback`
    parameters to share information between it and its parent. Also, it uses CSS isolation
    for its styles.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用了 **Blazor WebAssembly App Empty** 项目模板来创建一个新的项目。我们创建了一个 `Dialog` 组件，它就像一个模态对话框。`Dialog`
    组件使用 `RenderFragment` 参数和 `EventCallback` 参数在它与其父组件之间共享信息。此外，它还使用 CSS 隔离来设置样式。
- en: In the last part of the chapter, we created a Razor custom library and moved
    the `Dialog` component to the new library.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们创建了一个 Razor 自定义库，并将 `Dialog` 组件移动到了新的库中。
- en: So far, in this book, we have avoided using JavaScript. Unfortunately, there
    are still some functions that we can only accomplish with JavaScript. In the next
    chapter of this book, we will learn how to use JavaScript interop to use JavaScript
    in a Blazor WebAssembly app.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们避免使用 JavaScript。不幸的是，还有一些功能我们只能通过 JavaScript 来完成。在这本书的下一章中，我们将学习如何使用
    JavaScript interop 在 Blazor WebAssembly 应用中调用 JavaScript。
- en: Questions
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您思考：
- en: How can you replace a table with a templated component?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何用模板组件替换表格？
- en: How would you add default values for the `Title` property and the `Body` property
    of the `Dialog` component?
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何为 `Dialog` 组件的 `Title` 属性和 `Body` 属性添加默认值？
- en: How can you determine which button was clicked when handling the `@onclick`
    event?
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理 `@onclick` 事件时，你如何确定哪个按钮被点击了？
- en: Can you distribute your `Dialog` component using a NuGet package?
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能否使用 NuGet 包分发你的 `Dialog` 组件？
- en: Further reading
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了关于本章主题的更多信息：
- en: For more information on CSS, refer to [https://www.w3schools.com/css/default.asp](https://www.w3schools.com/css/default.asp).
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 CSS 的更多信息，请参阅[https://www.w3schools.com/css/default.asp](https://www.w3schools.com/css/default.asp)。
- en: For more information on lambda expressions, refer to [https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions).
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 lambda 表达式的更多信息，请参阅[https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions)。
- en: For more information on ASP.NET Core Razor components class libraries, refer
    to [https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries](https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries).
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 ASP.NET Core Razor 组件类库的更多信息，请参阅[https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries](https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries)。
- en: For more information on NuGet, refer to [https://www.nuget.org](https://www.nuget.org).
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 NuGet 的更多信息，请参阅[https://www.nuget.org](https://www.nuget.org)。
- en: Join our community on Discord
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
- en: '![](img/Discord_QR.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Discord_QR.png)'
