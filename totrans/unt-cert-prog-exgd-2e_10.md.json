["```cs\n      public MusicMode musicMode;\n      public enum MusicMode\n      {\n        noSound, fadeDown, musicOn\n      }\n    ```", "```cs\n    using System.Collections;\n    ```", "```cs\n IEnumerator MusicVolume(MusicMode musicMode)\n  {\n```", "```cs\n        switch (musicMode)\n        {\n    ```", "```cs\n    case MusicMode.noSound :\n          {\n            GetComponentInChildren<AudioSource>().Stop();\n            break;\n          }\n    ```", "```cs\n     case MusicMode.fadeDown :\n          {\n            GetComponentInChildren<AudioSource>().volume -=\n               Time.deltaTime/3;\n            break;\n          }\n    ```", "```cs\n    case MusicMode.musicOn :\n          {\n            if (GetComponentInChildren<AudioSource>().clip != null)\n            {\n              GetComponentInChildren<AudioSource>().Play();\n              GetComponentInChildren<AudioSource>().volume = 1;\n            }\n            break;\n    ```", "```cs\n      }\n    }\n      yield return new WaitForSeconds(0.1f);\n  }\n```", "```cs\n            if (GetComponentInChildren<AudioSource>().clip ==   null)\n            {\n              AudioClip lvlMusic = Resources.Load<AudioClip>\n                 (\"Sound/lvlMusic\") as AudioClip;\n              GetComponentInChildren<AudioSource>().clip = lvlMusic;\n              GetComponentInChildren<AudioSource>().Play();\n            }\n    ```", "```cs\nStartCoroutine(MusicVolume(MusicMode.fadeDown));\n```", "```cs\n      default :\n      {\n        GetComponentInChildren<AudioSource>().clip = null;\n        break;\n      }\n```", "```cs\n StartCoroutine(MusicVolume(MusicMode.noSound));\n```", "```cs\n  public void ResetScene()\n  {\n    StartCoroutine(MusicVolume(MusicMode.noSound));\n    gameTimer = 0;\n    SceneManager.LoadScene(GameManager.currentScene);\n  }\n```", "```cs\nStartCoroutine(MusicVolume(MusicMode.musicOn));\n```", "```cs\n  void NextLevel()\n  {\n    gameEnding = false;\n    gameTimer = 0;\n    SceneManager.LoadScene(GameManager.currentScene+1);\n      StartCoroutine(MusicVolume(MusicMode.musicOn));\n  }\n```", "```cs\n    void Start()\n   {\n      StartCoroutine(MusicVolume(MusicMode.musicOn));\n      SceneManager.sceneLoaded += OnSceneLoaded;\n   }\n```", "```cs\n     private void OnSceneLoaded(Scene aScene, LoadSceneMode aMode)\n   {\n    StartCoroutine(MusicVolume(MusicMode.musicOn));\n    GetComponent<GameManager> ().SetLivesDisplay(GameManager.\n        playerLives);\n    if (GameObject.Find(\"score\"))\n    {\n      GameObject.Find(\"score\").GetComponent<Text>().text =\n         GetComponent<ScoreManager>().PlayersScore.ToString();\n    } \n   }\n```", "```cs\n    using UnityEngine.UI;\n    using UnityEngine;\n    public class PauseComponent : MonoBehaviour \n    {\n    ```", "```cs\n     [SerializeField]\n              GameObject pauseScreen;\n    }\n    ```", "```cs\n      void Awake()\n      {\n        pauseScreen.SetActive(false);\n      }\n    ```", "```cs\n      void SetPauseButtonActive(bool switchButton)\n      {\n    ```", "```cs\n    ColorBlock col = GetComponentInChildren<Toggle>().colors;\n    ```", "```cs\n    if (switchButton == false)\n    {\n      col.normalColor = new Color32(0,0,0,0);\n      col.highlightedColor = new Color32(0,0,0,0);\n      col.pressedColor = new Color32(0,0,0,0);\n      col.disabledColor = new Color32(0,0,0,0); \n      GetComponentInChildren<Toggle>().interactable =     false;\n    }\n```", "```cs\n        else\n        {\n          col.normalColor = new Color32(245,245,245,255);\n          col.highlightedColor = new Color32(245,245,245,255);\n          col.pressedColor = new Color32(200,200,200,255);\n          col.disabledColor = new Color32(200,200,200,128); \n          GetComponentInChildren<Toggle>().interactable = true;\n        }\n    ```", "```cs\n    GetComponentInChildren<Toggle>().colors = col;\n    GetComponentInChildren<Toggle>()\n      .transform.GetChild(0).GetChild(0).gameObject.SetActive\n         (switchButton);\n    }\n    ```", "```cs\n      void Awake()\n      {\n        pauseScreen.SetActive(false);\n        SetPauseButtonActive(false);\n        Invoke(\"DelayPauseAppear\",5);\n      }\n    ```", "```cs\n      void DelayPauseAppear()\n      {\n        SetPauseButtonActive(true);\n      }\n    ```", "```cs\n      public void PauseGame()\n      {\n        pauseScreen.SetActive(true);\n        SetPauseButtonActive(false);\n        Time.timeScale = 0;\n      }\n    ```", "```cs\n      public void Resume()\n      {\n        pauseScreen.SetActive(false);\n        SetPauseButtonActive(true);\n        Time.timeScale = 1;\n      }\n    ```", "```cs\n      public void Quit()\n      {\n        Time.timeScale = 1;\n        GameManager.Instance.GetComponent<ScoreManager>().    ResetScore();\n        GameManager.Instance.GetComponent<ScenesManager>().    BeginGame(0);\n      }\n    ```", "```cs\n    void Update()\n    ```", "```cs\nvoid FixedUpdate()\n```", "```cs\n       void Update ()\n      {\n        if(Time.timeScale == 1)\n        {\n          Movement();\n          Attack();\n        }\n      }\n    ```"]