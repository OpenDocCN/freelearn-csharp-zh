["```cs\nusing UnityEngine;\nusing UnityEngine.Pool;\nusing System.Collections;\n\nnamespace Chapter.ObjectPool \n{\n    public class Drone : MonoBehaviour \n    {\n        public IObjectPool<Drone> Pool { get; set; }\n\n        public float _currentHealth;\n\n        [SerializeField] \n        private float maxHealth = 100.0f;\n\n        [SerializeField] \n        private float timeToSelfDestruct = 3.0f;\n\n        void Start() \n        {\n            _currentHealth = maxHealth;\n        }\n\n        void OnEnable() \n        {\n            AttackPlayer();\n            StartCoroutine(SelfDestruct());\n        }\n\n        void OnDisable() \n        {\n            ResetDrone();\n        }\n```", "```cs\n        IEnumerator SelfDestruct() \n        {\n            yield return new WaitForSeconds(timeToSelfDestruct);\n            TakeDamage(maxHealth);\n        }\n\n        private void ReturnToPool() \n        {\n            Pool.Release(this);\n        }\n\n        private void ResetDrone() \n        {\n            _currentHealth = maxHealth;\n        }\n\n        public void AttackPlayer() \n        {\n            Debug.Log(\"Attack player!\");\n        }\n\n        public void TakeDamage(float amount) \n        {\n            _currentHealth -= amount;\n\n            if (_currentHealth <= 0.0f)\n                ReturnToPool();\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Pool;\n\nnamespace Chapter.ObjectPool \n{\n    public class DroneObjectPool : MonoBehaviour\n    {\n        public int maxPoolSize = 10;\n        public int stackDefaultCapacity = 10;\n\n        public IObjectPool<Drone> Pool \n        {\n            get \n            {\n                if (_pool == null)\n                    _pool = \n                        new ObjectPool<Drone>(\n                            CreatedPooledItem, \n                            OnTakeFromPool, \n                            OnReturnedToPool, \n                            OnDestroyPoolObject, \n                            true, \n                            stackDefaultCapacity,\n                            maxPoolSize);\n                return _pool;\n            }\n        }\n\n        private IObjectPool<Drone> _pool;\n```", "```cs\npublic IObjectPool<Drone> Pool \n{\n get \n {\n if (_pool == null)\n            _pool = \n                new ObjectPool<Drone>(\n                    CreatedPooledItem, \n                    OnTakeFromPool, \n                    OnReturnedToPool, \n                    OnDestroyPoolObject, \n                    true, \n                    stackDefaultCapacity,\n                    maxPoolSize);\n        return _pool;\n    }\n}\n```", "```cs\n        private Drone CreatedPooledItem() \n        {\n            var go = \n                GameObject.CreatePrimitive(PrimitiveType.Cube);\n\n            Drone drone = go.AddComponent<Drone>();\n\n            go.name = \"Drone\";\n            drone.Pool = Pool;\n\n            return drone;\n        }\n\n        private void OnReturnedToPool(Drone drone) \n        {\n            drone.gameObject.SetActive(false);\n        }\n\n        private void OnTakeFromPool(Drone drone) \n        {\n            drone.gameObject.SetActive(true);\n        }\n\n        private void OnDestroyPoolObject(Drone drone) \n        {\n            Destroy(drone.gameObject);\n        }\n\n        public void Spawn() \n        {\n            var amount = Random.Range(1, 10);\n\n            for (int i = 0; i < amount; ++i) \n            {\n                var drone = Pool.Get();\n\n                drone.transform.position = \n                    Random.insideUnitSphere * 10;\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.ObjectPool\n{\n    public class ClientObjectPool : MonoBehaviour\n    {\n        private DroneObjectPool _pool;\n\n        void Start()\n        {\n            _pool = gameObject.AddComponent<DroneObjectPool>();\n        }\n\n        void OnGUI()\n        {\n            if (GUILayout.Button(\"Spawn Drones\"))\n                _pool.Spawn();\n        }\n    }\n}\n```"]