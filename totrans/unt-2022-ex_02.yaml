- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Foundational Knowledge of Unity 2022
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 2022 的基础知识
- en: Getting started in Unity 2022 is easy with **Unity Hub**. Unity Hub serves a
    few very useful purposes, and we’ll be going through installing it and learning
    about its features. In this chapter, we’ll not only install Unity Hub and the
    **Unity Editor**, but we’ll also break down the different templates that are available
    to kickstart your game and AR/VR projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Unity Hub** 开始 Unity 2022 的学习非常简单。Unity Hub 扮演着几个非常实用的角色，我们将介绍如何安装它并了解其功能。在本章中，我们不仅将安装
    Unity Hub 和 **Unity 编辑器**，还将分解不同的模板，以便启动您的游戏和 AR/VR 项目。
- en: In addition to templates that provide a starting foundation for your new project,
    Unity also provides added functionality through the Package Manager. The Package
    Manager allows Unity to give a small project size footprint and not bloat the
    Editor with a default installation of unneeded or unwanted tooling (referring
    to relatively simple add-on programs that combine to accomplish a task). Being
    familiar with and understanding what packages are available will surely help save
    time and increase the quality of your project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供新项目起始基础的模板外，Unity 还通过包管理器提供额外的功能。包管理器允许 Unity 保持项目的小型尺寸，并且不会通过默认安装不需要或不想要的工具（指相对简单的组合程序，用于完成一项任务）来膨胀编辑器。熟悉和理解可用的包将无疑有助于节省时间并提高项目的质量。
- en: Finding your way around the Unity Editor is only half an introduction. The second
    half of this chapter teaches you how to create content and make things interactable.
    We’ll do this by first creating a simple 2D character right in the Editor using
    built-in tooling. This all starts with the **GameObject** – Unity’s building block.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 编辑器中找到您的路径只是介绍的一半。本章的后半部分将教您如何创建内容并使事物可交互。我们将通过在编辑器中首先创建一个简单的 2D 角色来实现这一点，使用内置工具。这一切都始于
    **GameObject** – Unity 的构建块。
- en: The book takes a project-based approach to learning, so we’ll walk through designing
    a game, creating a game, and solving problems along the way.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书采用基于项目的学习方法，因此我们将一步步设计游戏、创建游戏并在过程中解决问题。
- en: In this chapter, we’re going to cover the following main topics.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题。
- en: Unity Hub – choosing the **2D Universal Render Pipeline (****URP) template**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity Hub – 选择 **2D Universal Render Pipeline (URP) 模板**
- en: Getting to know the Unity Editor and installing packages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Unity 编辑器和安装包
- en: Introducing the GameObject! All about the **Transform** and **components**
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 GameObject！关于 **Transform** 和 **组件** 的全部内容
- en: '**2D Sprites** with **Sprite Creator** – understanding the **Sprite Renderer**
    and draw ordering'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2D Sprites** 使用 **Sprite Creator** – 理解 **Sprite Renderer** 和绘制顺序'
- en: '**Game Design Document** (**GDD**) – introducing the 2D collection game'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏设计文档**（GDD） – 介绍 2D 收藏品游戏'
- en: By the end of this chapter, you’ll be able to create a new Unity project, be
    comfortable finding your way around the Unity Editor, understand the initial criteria
    for a game design document, and be prepared to create the **2D Sprite**-based
    character that is the first element of our game.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够创建新的 Unity 项目，熟悉在 Unity 编辑器中找到您的路径，理解游戏设计文档的初始标准，并准备好创建基于 **2D Sprite**
    的角色，这是我们游戏的第一元素。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along in this chapter, you’ll need a computer with Windows 7+ 64-bit,
    Mac OS X 10.12+, or Linux (Ubuntu 16.04, 18.04, and CentOS 7) running. You’ll
    need sufficient free hard drive space for not only the Unity Editor installation
    but also the project files. We recommend 25 GB for the Unity install folder, with
    3 GB of free space for the installation temp files (the temp files are usually
    located on your OS installation drive), and 10 GB should be sufficient for the
    project files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的内容，您需要一个运行 Windows 7+ 64 位、Mac OS X 10.12+ 或 Linux（Ubuntu 16.04、18.04
    和 CentOS 7）的计算机。您需要足够的空闲硬盘空间，不仅用于 Unity 编辑器的安装，还用于项目文件。我们建议 Unity 安装文件夹为 25 GB，安装临时文件（通常位于您的操作系统安装驱动器上）的空闲空间为
    3 GB，项目文件应有 10 GB 即可。
- en: Unity Hub – Choosing the 2D URP template
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity Hub – 选择 2D URP 模板
- en: The Unity Hub makes it simple to manage the installed Unity Editor versions
    and add or remove modules for installed Editors, and it helps manage your different
    projects. If you’re entirely new to Unity, then that previous sentence might be
    a bit confusing. Why would we have to manage different installed Editors? Simply
    put, software changes. As the Unity Editor evolves, it introduces new features
    and changes to its scripting API.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Hub使管理已安装的Unity编辑器版本和为已安装的编辑器添加或删除模块变得简单，并有助于管理您不同的项目。如果您是Unity的完全新手，那么上一句话可能有点令人困惑。为什么我们必须管理不同的已安装编辑器？简单来说，软件会发生变化。随着Unity编辑器的演变，它引入了新的功能和对其脚本API的更改。
- en: Tip
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: As a general rule of thumb, you should not upgrade the Unity Editor version
    for your project once you’ve started production. Doing so can have undesirable
    effects, such as broken renderings or code that no longer compiles. We’ll discuss
    this more in the following sections when installing the Unity Editor and selecting
    our project template.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据一般原则，一旦您开始生产，就不应该升级您项目使用的Unity编辑器版本。这样做可能会产生不良影响，例如渲染损坏或无法编译的代码。我们将在安装Unity编辑器和选择项目模板的后续部分中进一步讨论这个问题。
- en: Installing Unity Hub
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Unity Hub
- en: Let’s get started on our journey by first getting Unity Hub installed. We’ll
    be using the **Unity Personal** license throughout this book, which is the free
    version of Unity. Free here doesn’t mean we will be limited in features or capabilities
    in building our games. It just means you are only allowed to use this version
    for free if you fall under the criteria for requiring a paid license (if you earned
    less than $100K of revenue or funds raised in the last 12 months).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装Unity Hub，开始我们的旅程。在这本书中，我们将使用**Unity个人版**许可证，这是Unity的免费版本。这里的免费并不意味着我们在构建游戏的功能或能力上会受到限制。它只是意味着，如果您符合需要付费许可证的标准（如果您在过去的12个月内收入或筹集的资金少于10万美元），则可以免费使用此版本。
- en: Important note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are an eligible student, you may want to check out the **Unity Student
    plan** at [https://unity.com/products/unity-student](https://unity.com/products/unity-student).
    It provides access to **Unity Pro**, a selection of quality assets, and **Unity
    Gaming Services**, such as **Cloud Build**, that professionals and studios building
    games use on Unity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是符合条件的在校学生，您可能想查看[https://unity.com/products/unity-student](https://unity.com/products/unity-student)上的**Unity
    学生计划**。它提供对**Unity Pro**、一系列优质资源和**Unity 游戏服务**的访问，例如**云构建**，这些是专业人员和工作室在 Unity
    上构建游戏时使用的。
- en: 'Okay, let’s do this. Perform the following steps to install the Unity Hub:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧。按照以下步骤安装Unity Hub：
- en: Go to [https://unity.com/download](https://unity.com/download) and select the
    download link for your OS. This will download `UnityHubSetup.exe` to your `Downloads`
    folder.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://unity.com/download](https://unity.com/download)并选择您操作系统的下载链接。这将把`UnityHubSetup.exe`下载到您的`下载`文件夹中。
- en: Click on the executable from your web browser, navigate to your `Downloads`
    folder, and double-click the executable to launch the installation.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中点击可执行文件，导航到您的`下载`文件夹，然后双击可执行文件以启动安装。
- en: Keep the defaults or change the installation path if you want to install to
    a different hard drive location (only use local drives and not network drives,
    as this could cause problems).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认设置或更改安装路径，如果您想将安装位置安装到不同的硬盘驱动器（仅使用本地驱动器，不要使用网络驱动器，因为这可能会引起问题）。
- en: After clicking **Install** and letting the installation process complete, click
    **Finish** to run Unity Hub.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**并完成安装过程后，点击**完成**以运行Unity Hub。
- en: When opening Unity Hub for the first time, you will be prompted to **Sign in**
    or **Create account** if you have not created one already. Your Unity account,
    known as **Unity ID**, will be used for licensing. Unity requires an active license
    to install the Unity Editor. The Personal Edition license is free, and Unity Hub
    will generate one for you.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次打开Unity Hub时，如果您还没有创建，系统会提示您**登录**或**创建账户**。您的Unity账户，也称为**Unity ID**，将用于许可。Unity要求有效的许可证才能安装Unity编辑器。个人版许可证是免费的，Unity
    Hub会为您生成一个。
- en: With Unity Hub now installed, let’s continue installing the Unity Editor.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Unity Hub已经安装，让我们继续安装Unity编辑器。
- en: Installing the Unity Editor – What version?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Unity编辑器 – 选择哪个版本？
- en: We have a new installation of Unity Hub and are now ready to install a Unity
    Editor version. As previously mentioned, Unity Hub allows you to have multiple
    versions of the Unity Editor installed to manage the different projects you’ll
    create over time. Opening Unity Hub without any Editor version installed will
    default to prompting the latest Unity Editor version in the **LTS** stream to
    be installed. LTS simply means **long-term support**. This is usually the best
    version choice to lock in and base a new project on because it will be the most
    stable version available and is guaranteed to be supported for the next two years.
    To ensure stability with the LTS version, no new features are added to the tooling
    or scripting API. If you want to create with the latest engine features, you’ll
    have to choose one of the newer **tech streams** since no additional tools or
    technologies will be introduced in the LTS stream.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装了新的Unity Hub，现在准备安装Unity编辑器版本。如前所述，Unity Hub允许你安装多个Unity编辑器版本，以管理你将在未来创建的不同项目。在没有安装任何编辑器版本的情况下打开Unity
    Hub将默认提示安装**LTS**流中的最新Unity编辑器版本。LTS简单来说就是**长期支持**。这通常是锁定并基于新项目构建的最佳版本选择，因为它将是可用的最稳定版本，并且保证在未来两年内得到支持。为了确保LTS版本的稳定性，不会向工具或脚本API添加新功能。如果你想使用最新的引擎功能，你必须选择一个较新的**技术流**，因为LTS流中不会引入额外的工具或技术。
- en: Okay, simply stated, what does this mean?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，简单来说，这意味着什么？
- en: If you’re starting production today or about to ship, and you desire stability
    and support over the lifetime of your development and release cycle, choose the
    LTS stream. At the time of writing, this is 2020.3 LTS.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你今天开始生产或即将发货，并且希望在开发发布周期的整个过程中获得稳定性和支持，请选择LTS流。在撰写本文时，这是2020.3 LTS。
- en: If you’re starting production today but want to leverage newer tools and technology,
    and the latest official release version is close to becoming the new LTS stream,
    choose the latest official release version. At the time of writing, this is 2021.2
    (becoming the latest LTS stream when 2021.3 is officially released).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你今天开始生产但想利用更新的工具和技术，并且最新官方发布版本即将成为新的LTS流，请选择最新官方发布版本。在撰写本文时，这是2021.2（当2021.3正式发布时将成为最新的LTS流）。
- en: If you want to create on the cutting edge of the tools and technology available
    and don’t mind managing potential crashes and bugs, then choose the latest pre-release
    (beta) version.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想在可用工具和技术的最前沿进行创作，并且不介意管理潜在的崩溃和错误，那么请选择最新的预发布（beta）版本。
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This book is written specifically for Unity 2022\. If you have an earlier version
    of Unity already installed, then the instructions or features may differ, so it
    may be difficult – or impossible – to follow along. We recommend installing the
    latest version of Unity 2022 to complete the projects we’ll create in the following
    chapters.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本书专门为Unity 2022编写。如果你已经安装了更早版本的Unity，那么说明或功能可能会有所不同，因此可能很难——或者不可能——跟随操作。我们建议安装Unity
    2022的最新版本，以完成我们在以下章节中创建的项目。
- en: 'To gauge your production schedule against the Unity LTS releases, refer to
    the following timeline:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的生产进度与Unity LTS版本进行比较，请参考以下时间线：
- en: '![Figure 1.1 – Unity platform release timeline](img/B18347_01_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – Unity平台发布时间线](img/B18347_01_01.jpg)'
- en: Figure 1.1 – Unity platform release timeline
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – Unity平台发布时间线
- en: Unity provides detailed LTS release information on the **Unity QA** resources
    page at [https://unity3d.com/unity/qa/lts-releases](https://unity3d.com/unity/qa/lts-releases).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Unity在[https://unity3d.com/unity/qa/lts-releases](https://unity3d.com/unity/qa/lts-releases)的**Unity
    QA**资源页上提供了详细的LTS发布信息。
- en: 'Proceed to install the Unity 2022 Editor with the following steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤安装Unity 2022编辑器：
- en: If you’ve just finished installing Unity Hub, you’ll be prompted to install
    the latest LTS version of the Unity Editor. We want to install a Unity 2022 release
    specifically, so proceed by clicking **Skip installation** in the lower-right
    corner of the dialog, unless, at the time you’re reading this, the 2022 LTS version
    has been released, in which case you can just install it and skip the remaining
    steps!
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你刚刚完成Unity Hub的安装，你将被提示安装Unity编辑器的最新LTS版本。我们想要安装一个特定的Unity 2022版本，因此请通过点击对话框右下角的**跳过安装**继续，除非在你阅读本文时，2022
    LTS版本已经发布，在这种情况下，你可以直接安装它并跳过剩余步骤！
- en: In the main Unity Hub window, select **Installs** in the left-side pane.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity Hub主窗口中，在左侧面板中选择**安装**。
- en: Click the **Install Editor** button in the window’s top-right corner.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口右上角的**安装编辑器**按钮。
- en: The **Official releases** tab should be selected by default (the latest beta
    versions can be found under the **Pre-releases** tab).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**官方发布**标签应该默认选中（最新的测试版可以在**预发布**标签下找到）。'
- en: In the **OTHER VERSIONS** section below the **LONG TERM SUPPORT (LTS)** section,
    find the latest 2022 release version listed and click **Install**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**长期支持（LTS）**部分下面的**其他版本**部分，找到列出的最新2022年发布版本并点击**安装**。
- en: The next screen you’ll be presented with is selecting the dev tools, platforms,
    and documentation modules. Since we’re assuming you’re installing Unity for the
    first time, and we don’t currently have any specific requirements for our first
    project, we’ll just keep the defaults. Click on **Continue**.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将要看到的下一个屏幕是选择开发工具、平台和文档模块。由于我们假设你是第一次安装Unity，并且我们目前对我们的第一个项目没有具体的要求，所以我们只需保留默认设置。点击**继续**。
- en: Unity Hub will now download and install the selected version. Depending on your
    internet connection and hard drive speed, this will take a bit of time – an average
    base installation requires roughly 3 GB of downloads (temporary files) and approximately
    7 GB of free hard drive space for installation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Hub现在将下载并安装所选版本。根据你的互联网连接和硬盘速度，这需要一些时间——平均基础安装需要大约3GB的下载（临时文件）和大约7GB的空闲硬盘空间用于安装。
- en: In this section, we learned about the different Unity Editor versions available
    and how to install them. In the next section, we’ll learn about render pipelines
    to determine how to proceed with a new project.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了可用的不同Unity编辑器版本以及如何安装它们。在下一节中，我们将了解渲染管道，以确定如何进行新项目的开发。
- en: What is a render pipeline?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染管道是什么？
- en: 'In the next section, when we create our project, we’ll select a template to
    base our project on. This requires a bit of explanation to understand the templates’
    options fully. We’ll create a 2D game (a two-dimensional game represented by planar
    images), so selecting a 2D template makes sense, but these are the available template
    names for 2D: **2D**, **2D (URP)**, and **2D Mobile**. We won’t be creating a
    mobile game, so we can rule out **2D Mobile**, but what does **(****URP)** mean?'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，当我们创建项目时，我们将选择一个模板作为项目的基础。这需要一些解释才能完全理解模板的选项。我们将创建一个2D游戏（由平面图像表示的两个维度的游戏），因此选择2D模板是有意义的，但这些是2D可用的模板名称：**2D**、**2D
    (URP**)和**2D Mobile**。我们不会创建移动游戏，因此我们可以排除**2D Mobile**，但**（****URP）**是什么意思？
- en: If you’re unfamiliar with how video games work under the hood, **rendering**
    refers to how the 2D graphics or 3D models are drawn to the screen to generate
    an image. Over time, as Unity evolved its rendering technology to better suit
    the types of games creators were making, they understood the need to make changes
    and improve the rendering technology. A performant and customizable render pipeline
    architecture was introduced to serve creators best called a **Scriptable Render
    Pipeline** (**SRP**). The template named **2D** will use Unity’s **built-in renderer**,
    whereas **2D (URP)** will use the **Universal Render Pipeline** (**Universal RP**,
    or **URP**). The Universal RP is a default SRP Unity provides as a starting basis
    for making performant games on the broadest device platforms – this will eventually
    replace the built-in legacy renderer as the default.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对视频游戏内部的工作原理不熟悉，**渲染**指的是如何将2D图形或3D模型绘制到屏幕上以生成图像。随着时间的推移，随着Unity将渲染技术进化以更好地适应创作者制作的各类游戏，他们意识到需要做出改变并改进渲染技术。引入了一种性能良好且可定制的渲染管道架构，以最佳方式服务于创作者，这被称为**可脚本渲染管道**（**SRP**）。名为**2D**的模板将使用Unity的**内置渲染器**，而**2D
    (URP**)将使用**通用渲染管道**（**Universal RP**，或**URP**）。通用RP是Unity提供的一个默认SRP，作为在广泛设备平台上制作高性能游戏的起始基础，这最终将取代内置的遗留渲染器作为默认设置。
- en: Important note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We’ll discuss the URP feature set relevant to adding renderer features to the
    projects throughout the book but not compare it directly with the built-in renderer
    features. A feature comparison table between URP and the built-in renderer can
    be found at [https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal%407.1/manual/universalrp-builtin-feature-comparison.xhtml](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal%407.1/manual/universalrp-builtin-feature-comparison.xhtml)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整本书中讨论与向项目中添加渲染器功能相关的URP功能集，但不会直接将其与内置渲染器功能进行比较。URP与内置渲染器之间的功能比较表可以在[https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal%407.1/manual/universalrp-builtin-feature-comparison.xhtml](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal%407.1/manual/universalrp-builtin-feature-comparison.xhtml)找到。
- en: This section taught you what a render pipeline is and how to select the correct
    2D project template. Now you’ll use what you learned to create our first project!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本节教你什么是渲染管线以及如何选择正确的2D项目模板。现在，你将使用所学知识来创建我们的第一个项目！
- en: Creating a project
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: We’ll be creating our project from scratch using one of the templates Unity
    Hub provides to make sure everything is set up correctly for our game’s rendering
    requirements. Since we’ll start by creating a 2D game, we’ll select the **2D (URP)
    Core** template. Core means that the template won’t provide any example assets,
    samples, or learning content in this context. It will give an empty 2D project
    with a pre-configured URP 2D renderer setup – perfect, just what we need!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Unity Hub提供的模板之一从头开始创建我们的项目，以确保为我们的游戏渲染需求正确设置一切。由于我们将从创建2D游戏开始，我们将选择**2D
    (URP) Core**模板。Core意味着在此上下文中，模板不会提供任何示例资产、样本或学习内容。它将提供一个带有预配置URP 2D渲染器设置的空2D项目——这正是我们所需要的！
- en: 'Proceed with the following steps to create a new 2D URP project in Unity Hub:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Unity Hub中创建一个新的2D URP项目：
- en: With **Projects** selected in the left-side pane, click the **New project**
    button in the window’s top-right corner.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中选择**项目**，然后点击窗口右上角的**新建项目**按钮。
- en: Verify that the Editor version at the top of the window is set to the installed
    2022 version.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认窗口顶部的编辑器版本设置为已安装的2022版本。
- en: Find the **2D (URP)** template in the list and click to select it.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表中找到**2D (URP**)模板并点击选择它。
- en: Next, in the right-side pane, give your project a name by entering it in the
    **Project** **name** field.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在右侧面板中，通过在**项目** **名称**字段中输入名称来给你的项目命名。
- en: And finally, verify the installation path in the **Location** field, then click
    on **Create project**.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在**位置**字段中验证安装路径，然后点击**创建项目**。
- en: 'Now you can create your project with the preceding steps while referring to
    the following screenshot (making sure to have the correct **Editor version** selected
    at the top in case you have multiple versions installed already):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以按照前面的步骤创建你的项目，同时参考以下截图（确保在顶部已正确选择**编辑器版本**，以防你已经安装了多个版本）：
- en: '![Figure 1.2 – Unity Hub project templates](img/B18347_01_02.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – Unity Hub项目模板](img/B18347_01_02.jpg)'
- en: Figure 1.2 – Unity Hub project templates
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – Unity Hub项目模板
- en: In this section, you learned how to install the Unity Hub and installed a specific
    version of the Unity Editor. Then, you learned what a render pipeline is and how
    that relates to creating a new project. We’ll continue discussing the Unity Editor
    now by introducing its main features.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何安装Unity Hub并安装了特定版本的Unity编辑器。然后，你学习了渲染管线是什么以及它与创建新项目的关系。现在，我们将通过介绍其主功能来继续讨论Unity编辑器。
- en: Getting to know the Unity Editor and installing packages
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Unity编辑器和安装包
- en: Having just created a new 2D URP project and opened up the Editor, let’s take
    a tour of the Unity 2022 interface! We’ll cover only the most common features
    in this section and dig deeper into the features of the specific windows and toolbars
    as we work through our projects in the later chapters, providing the information
    in the context of the required task.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚创建了一个新的2D URP项目并打开了编辑器，让我们来浏览一下Unity 2022的界面！在本节中，我们将仅介绍最常用的功能，而在后续章节中处理我们的项目时，我们将更深入地探讨特定窗口和工具栏的功能，并在所需任务的上下文中提供信息。
- en: 'When we open the Unity Editor for the first time, it will use the default Windows
    layout, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次打开Unity编辑器时，它将使用默认的Windows布局，如下面的截图所示：
- en: '![Figure 1.3 – The Unity 2022 Editor default layout](img/B18347_01_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – Unity 2022编辑器默认布局](img/B18347_01_03.jpg)'
- en: Figure 1.3 – The Unity 2022 Editor default layout
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – Unity 2022编辑器默认布局
- en: 'The common Editor windows that you’ll be using most of the time are the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您将最常使用的通用编辑器窗口如下：
- en: '**Scene** – this is the window where we build our content visually. Objects
    added to the **Scene Hierarchy** with renderer components will be visible in the
    scene and game views.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景** – 这是构建我们内容的可视化窗口。添加到**场景层次结构**并具有渲染组件的对象将在场景和游戏视图中可见。'
- en: '**Game** – the simulation you see in the game view represents what players
    will see rendered in your final playable distribution builds. You will also playtest
    your game in this window when entering **Play Mode**.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏** – 您在游戏视图中看到的模拟代表玩家将在最终可玩发行版中渲染的内容。您也将在这个窗口中进入**播放模式**时进行游戏测试。'
- en: '**Project** – the **Project** window is comparable to your OS’s file manager.
    It’s where you’ll import and organize the files that make up the **Assets** for
    the project you’re creating (such as 3D models, 2D images, sounds & music, plugins,
    and so on).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目** – **项目**窗口类似于您操作系统的文件管理器。这是您导入和组织构成您正在创建的项目**资产**（例如3D模型、2D图像、声音与音乐、插件等）的文件的地方。'
- en: '**Hierarchy** – this is the scene’s **GameObject Hierarchy** (more on GameObjects
    in the next section). Understanding how to organize your scene’s objects in the
    **Hierarchy** window (as in parent-child relationships) will be essential to work
    on your projects effectively, so this will be a topic of discussion in the coming
    chapters.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层次结构** – 这就是场景的**GameObject层次结构**（关于GameObject的更多内容将在下一节中介绍）。了解如何在**层次结构**窗口中组织场景的对象（例如父子关系）对于有效地工作在您的项目中将至关重要，因此这将是接下来章节讨论的主题。'
- en: '**Inspector** – in the natural order of things in Unity, the **Inspector**
    window comes next as it’s tied directly to the GameObjects’ in the **Hierarchy**
    window. When an object is selected in the **Scene Hierarchy**, the **Inspector**
    shows all its details (**Transform** and components).'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查器** – 在Unity的自然顺序中，**检查器**窗口紧随其后，因为它直接与**层次结构**窗口中的GameObject相关联。当在**场景层次结构**中选择一个对象时，**检查器**会显示其所有详细信息（**变换**和组件）。'
- en: '**Console** – information, warnings, errors, and any relevant trace information
    are displayed in a list view that can be sorted and filtered. Debugging any problems
    occurring in your project will be performed from the **Console** information displayed.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台** – 信息、警告、错误以及任何相关的跟踪信息都会在一个可排序和过滤的列表视图中显示。调试项目中出现的任何问题将执行**控制台**信息显示。'
- en: Note that in the default layout, clicking on a tab, such as **Game** or **Console**
    in *Figure 1**.3*, will bring it to the “front” for interaction. Tabs can also
    be dragged and docked to other windows to provide a fully customized layout.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在默认布局中，点击标签页，例如*图1.3*中的**游戏**或**控制台**，它将“浮出”到“前台”以便交互。标签页也可以拖动并停靠到其他窗口，以提供完全定制的布局。
- en: 'In addition to these windows, Unity also has some toolbars, such as the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些窗口之外，Unity还有一些工具栏，例如以下这些：
- en: '![Figure 1.4 – The Unity 2022 Editor toolbars](img/B18347_01_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – Unity 2022编辑器工具栏](img/B18347_01_04.jpg)'
- en: Figure 1.4 – The Unity 2022 Editor toolbars
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – Unity 2022编辑器工具栏
- en: '**Main Toolbar** (*A*) – the buttons on the upper left provide access to your
    **Unity Account** (Unity ID), **Unity Cloud Services**, and the current **version
    control system** (**VCS**) (we’ll tackle version control in a later chapter).
    The centered buttons are the play (for entering **Play Mode**), pause, and step
    controls. On the right side, the buttons are **Undo History**, **Global Search**,
    the **Layers Visibility** dropdown, and finally, the **Editor Layout** dropdown
    (as noted earlier, we’re looking at the default window layout; you can change
    the layout using one of the presets or save your own).'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主工具栏**（*A*） – 上左角的按钮提供对您的**Unity账户**（Unity ID）、**Unity云服务**以及当前**版本控制系统**（**VCS**）的访问（我们将在后面的章节中处理版本控制）。中间的按钮是播放（用于进入**播放模式**）、暂停和步进控制。在右侧，按钮是**撤销历史记录**、**全局搜索**、**图层可见性**下拉菜单，最后是**编辑器布局**下拉菜单（如前所述，我们正在查看默认窗口布局；您可以使用预设之一或保存自己的布局）。'
- en: '**Scene Toolbar** (*B*) – the tools, starting on the left side, are:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景工具栏**（*B*） – 从左侧开始的工具包括：'
- en: '**Tool Handle Position** (Center, Pivot) – when moving objects in the scene,
    the action will be based on this position, either the Center of the object or
    the object’s Pivot.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具句柄位置**（中心、旋转中心） – 当在场景中移动对象时，动作将基于此位置，要么是对象的中心，要么是对象的旋转中心。'
- en: Tip
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: If the **Anchor** position of your GameObject in the scene View doesn’t look
    correct, don’t forget to check this setting!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的GameObject在场景视图中的**锚点位置**看起来不正确，别忘了检查这个设置！
- en: '**Tool Handle Rotation** (Global, Local) – when rotating objects in the scene,
    they rotate relative to their Transform in **Global** or **Local** space.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具句柄旋转**（全局，本地） – 在场景中旋转对象时，它们相对于**全局**或**本地**空间中的变换进行旋转。'
- en: Tip
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may need to change between Global or Local space settings to rotate an object
    correctly. If your rotations don’t look correct, don’t forget to check this setting!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要在不同空间设置（全局或本地）之间切换，才能正确旋转对象。如果您的旋转看起来不正确，别忘了检查这个设置！
- en: The remainder of the tools include grid visibility and snapping settings, **Draw
    Mode**, 2D or 3D scene View (we are currently in 2D), toggles for scene lighting,
    audio, effects, hidden objects, scene View camera settings, and Gizmos. There’s
    a lot to unpack here, but don’t worry, we’ll touch on these as we work through
    the projects we’ll be creating in the coming chapters.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩余的工具包括网格可见性和吸附设置、**绘制模式**、2D或3D场景视图（我们目前处于2D模式），场景照明、音频、效果、隐藏对象、场景视图相机设置和Gizmos的切换。这里有很多内容需要解释，但不用担心，随着我们在接下来的章节中创建项目，我们会逐一介绍这些功能。
- en: '**Manipulation Tools Toolbar** (*C*) – a floating toolbar, also known as **Overlays**,
    within the **Scene** window. This toolbar provides the essential tools for working
    with GameObjects within the scene View. The tools include View, Move, Rotate,
    Scale, Rect, and Transform.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作工具栏**（*C*） – 一个浮动工具栏，也称为**叠加层**，位于**场景**窗口内。此工具栏提供了在场景视图中与GameObject一起工作的基本工具。这些工具包括视图、移动、旋转、缩放、矩形和变换。'
- en: One more “toolbar” along the bottom of the Editor window is called the **Status
    bar** (not pictured). The Status bar mostly provides the current status of specific
    processes, such as the last **Console** warning or error message (left-side),
    the progress of lighting generation (right-side), and the code compilation spinner
    (right-corner).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口底部还有一个名为**状态栏**的工具栏（图中未显示）。状态栏主要提供特定进程的当前状态，例如最后的**控制台**警告或错误消息（左侧），光照生成的进度（右侧），以及代码编译的旋转图标（右下角）。
- en: Additional reading | Unity documentation
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多 | Unity文档
- en: You can find more information on Unity’s interface at [https://docs.unity3d.com/2022.3/Documentation/Manual/UsingTheEditor.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/UsingTheEditor.xhtml)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.unity3d.com/2022.3/Documentation/Manual/UsingTheEditor.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/UsingTheEditor.xhtml)找到更多关于Unity界面的信息。
- en: In this section, you learned about the familiar Editor windows and toolbars
    and how they can manipulate objects in the scene View. Let’s see how we can extend
    the features and tooling in the Editor now with Packages.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了熟悉的编辑器窗口和工具栏以及它们如何操作场景视图中的对象。现在，让我们看看如何通过包扩展编辑器中的功能和工具。
- en: The Unity Package Manager
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity包管理器
- en: 'Without knowing, you were already introduced to packages earlier when we discussed
    the Universal RP. Since we started with a URP template, we didn’t have to do anything
    special, but Unity provides **Scriptable Render Pipeline** support through packages!
    Packages provide a way for Unity to offer multiple versions of an engine feature
    or service without requiring a new installation of the Editor. You can even try
    out the latest pre-release version of a package to stay on the cutting edge of
    the technology and quickly revert to a stable or alternate version should you
    encounter any problems. The Package Manager is accessible from the top menu: **Window**
    | **Package Manager**.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解通用RP之前，您已经通过这些包接触到了包的概念。由于我们从URP模板开始，所以我们不需要做任何特殊操作，但Unity通过包提供了**可脚本渲染管线**的支持！包提供了一种方式，让Unity能够在不要求安装新编辑器的情况下，提供多个版本的引擎功能或服务。您甚至可以尝试包的最新预发布版本，以保持在技术前沿，并在遇到任何问题时快速回退到稳定或备用版本。包管理器可以从顶部菜单访问：**窗口**
    | **包管理器**。
- en: '![Figure 1.5 – The Unity Package Manager](img/B18347_01_05.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – Unity包管理器](img/B18347_01_05.jpg)'
- en: Figure 1.5 – The Unity Package Manager
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – Unity包管理器
- en: Feature sets in the **Package Manager** are bundles of common tooling that provide
    a simpler and more streamlined install experience. The **2D** feature set (selected
    in *Figure 1**.4*) is for creators working with 2D projects. In our case, again,
    having started from the **2D URP** template, the **2D** feature set has already
    been imported to our project (indicated by the green checkmark). We’re good to
    go!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**包管理器**中的功能集是一组常见的工具包，它提供了一种更简单、更流畅的安装体验。**2D**功能集（如*图 1*.4*所示）是为使用2D项目的创作者设计的。在我们的案例中，由于我们又从**2D
    URP**模板开始，**2D**功能集已经导入到我们的项目中（由绿色勾选标记表示）。我们可以开始了！'
- en: Should you need to make any changes to the packages in your project, from the
    dropdown in the **Package Manager** top menu, you can see what packages are available
    from what is already in your project via **In Project**, or either the **Unity
    Registry** or **My Assets** (which are assets you’ve purchased in the Unity Asset
    Store) selections. Managing a package is as simple as selecting it in the list
    and choosing an available function from the buttons displayed in the bottom-right
    window. For example, **Download**, **Install**, **Remove**, or **Update**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要修改项目中任何包，从顶部菜单的**包管理器**下拉菜单中，您可以通过**项目内**查看已存在于项目中的包，或者选择**Unity 注册表**或**我的资产**（您在
    Unity 资产商店购买的资产）。管理包就像在列表中选择它，然后从底部右窗格显示的按钮中选择一个可用功能一样简单。例如，**下载**、**安装**、**移除**或**更新**。
- en: Tip
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Packages are project-specific, so you will need to ensure you have the desired
    packages installed for each new project you create!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 包是项目特定的，因此您需要确保为每个新创建的项目安装所需的包！
- en: New to Unity 2022
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 新增功能：Unity 2022
- en: In the **Package Manager** window, you can now multi-select packages in the
    list for adding, updating, or removing in a single operation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在**包管理器**窗口中，您现在可以多选列表中的包，以单个操作添加、更新或移除。
- en: In this section, you learned about the Editor windows and toolbars and how to
    add/remove features and tooling with packages that extend the Editor’s capabilities.
    Next, we’ll start learning about the GameObject.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了关于编辑器窗口和工具栏的内容，以及如何使用扩展编辑器功能的包添加/移除功能和工具。接下来，我们将开始学习 GameObject。
- en: Introducing the GameObject – All about Transform and components
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 GameObject – 关于 Transform 和组件的所有内容
- en: Simply put, anything you want to add to your scene will be added as a GameObject.
    The GameObject is the base building block for everything that exists in a scene.
    It also acts as a container for adding functionality with components. When a GameObject
    is added to the **Hierarchy**, is it active by default but can be deactivated
    – “turning off” all components added to it – with the checkbox to the left of
    the name field (to the left of **Main Camera** in *Figure 1**.6*). A component
    can be for either visual or functional purposes, or in some cases, both! Functional
    components implement Unity’s scripting API, and Unity provides components for
    supporting the engine’s many features. You’ll create custom component scripts
    using the C# language, which will be covered in [*Chapter 2*](B18347_02.xhtml#_idTextAnchor041).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，您想添加到场景中的任何内容都将作为 GameObject 添加。GameObject 是场景中所有存在的物体的基础构建块。它还充当添加功能的容器，通过组件添加功能。当一个
    GameObject 被添加到**层次结构**中时，它默认是激活的，但可以通过名称字段左侧的复选框（*图 1*.6*中的**主摄像机**左侧）将其停用——“关闭”添加到其中的所有组件。组件可以是视觉的或功能性的，或者在某些情况下，两者都是！功能组件实现了
    Unity 的脚本 API，Unity 提供了支持引擎许多功能的组件。您将使用 C# 语言创建自定义组件脚本，这将在[*第 2 章*](B18347_02.xhtml#_idTextAnchor041)中介绍。
- en: In this section, you will learn how GameObjects are added to a scene, then you’ll
    be introduced to the Transform component, and you’ll learn how to work with components.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何将 GameObject 添加到场景中，然后您将介绍 Transform 组件，并学习如何与组件一起工作。
- en: Adding GameObjects to the scene
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 GameObject 添加到场景中
- en: New empty GameObjects and objects of a specific type are easily added to the
    **Hierarchy** with the **Create** menu. The **Create** menu is easily accessible
    from Unity’s top menu under GameObject, from the **Hierarchy** window directly
    with the **+** (plus sign) icon dropdown menu at the top, or by right-clicking
    anywhere in the **Hierarchy** window. GameObjects in the form of **Prefabs** and
    other supported types can be added to the scene View directly by dragging and
    dropping from the **Project** window – this is often the quickest way to accomplish
    some tasks, and we’ll be exploiting this feature while building the book’s projects.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **创建** 菜单可以轻松地将新的空游戏对象和特定类型的对象添加到 **层次结构** 中。**创建** 菜单可以从 Unity 的顶部菜单中的 GameObject
    下轻松访问，从 **层次结构** 窗口直接使用顶部的 **+**（加号）图标下拉菜单，或者通过在 **层次结构** 窗口中的任何位置右键单击。可以将 **预制件**
    和其他支持类型的游戏对象直接通过从 **项目** 窗口中拖放添加到场景视图中 – 这通常是完成某些任务的最快方式，我们将在构建本书的项目时利用这一功能。
- en: The Transform component
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变换组件
- en: GameObjects added to the scene have a default Transform component that dictates
    its **Position**, **Rotation**, and **Scale** in 3D space – a Cartesian coordinate
    system using three mutually perpendicular coordinate axes with Y-Up, namely X-axis,
    Y-axis, and Z-axis. Positioning graphics in the scene can be performed by either
    manipulating the Transform manually (by typing in values), with the **Manipulation
    Tools** (clicking and dragging in the **Scene** window), or through code by using
    the Unity scripting API to access the GameObject’s **Transform** properties and
    methods.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到场景中的游戏对象都有一个默认的变换组件，它决定了其在 3D 空间中的 **位置**、**旋转** 和 **缩放** – 这是一个使用三个相互垂直的坐标轴（Y-Up，即
    X 轴、Y 轴和 Z 轴）的笛卡尔坐标系。可以通过手动操作变换（通过输入值）、使用 **操纵工具**（在 **场景** 窗口中点击和拖动）或通过代码（使用
    Unity 脚本 API 访问游戏对象的 **变换** 属性和方法）来执行场景中图形的位置操作。
- en: 'In the following screenshot, we can see the `Vector3`) is represented in 3D
    space:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到 `Vector3` 在 3D 空间中的表示：
- en: '![Figure 1.6 – Inspector Transform and related 3D coordinate system](img/B18347_01_06.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 变换检查器和相关的 3D 坐标系统](img/B18347_01_06.jpg)'
- en: Figure 1.6 – Inspector Transform and related 3D coordinate system
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 变换检查器和相关的 3D 坐标系统
- en: In the preceding figure, we can see that the `0`, `0`, `0` where all axes intersect).
    The **Rotation** values on all axes are at 0, meaning no rotation is applied to
    this GameObject. Similarly, the **Scale** value on all axes is at 1, meaning no
    scaling is applied to the default scale of this GameObject. We’ll modify these
    values in context while creating our player character graphics in the *2D sprites
    with Sprite Creator – Understanding the Sprite Renderer and draw* *ordering* section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到所有轴相交的 `0`、`0`、`0`（即所有轴相交的点）。所有轴上的 **旋转** 值都是 0，这意味着没有对此游戏对象应用旋转。同样，所有轴上的
    **缩放** 值都是 1，这意味着没有对此游戏对象的默认缩放应用缩放。我们将在创建我们的玩家角色图形时修改这些值，在 *2D 精灵与 Sprite Creator
    – 理解精灵渲染器和绘制 * *顺序* * 部分中。
- en: Before creating our player, let’s discuss components in more detail since we’ll
    be directly working with them.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的玩家之前，让我们更详细地讨论组件，因为我们将会直接与它们打交道。
- en: Components
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件
- en: Below the **Transform** section, we can see several components already added
    that provide functionality for the GameObject’s purpose as our scene’s main camera
    (cameras in our **Scene Hierarchy** determine what the player sees rendered in
    the game view). To add more functionality to this camera, click the **Add Component**
    button at the bottom of the **Inspector** window. You’ll be presented with a filtered
    and searchable list of available components to add. The components will include
    not only the ones provided by Unity, such as the **Camera** component in *Figure
    1**.6*, but also any scripts you’ve already created and added to the project.
    In the next chapter, we’ll tackle creating our scripts and adding them as components.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **变换** 部分下方，我们可以看到已经添加了几个组件，这些组件提供了用于我们的场景主相机（**场景层次结构**中的相机决定了玩家在游戏视图中看到的渲染内容）的功能。要为这个相机添加更多功能，请点击
    **检查器** 窗口底部的 **添加组件** 按钮。您将看到一个过滤和可搜索的组件列表，可以添加到项目中。这些组件不仅包括 Unity 提供的，如 *图 1.6*
    中的 **相机** 组件，还包括您已经创建并添加到项目中的任何脚本。在下一章中，我们将讨论创建脚本并将它们作为组件添加。
- en: Components can be added, removed, and copied/pasted, and their values can be
    copied/pasted and even saved as presets! This is all accomplished via the **Component**
    header section. Click and hold the header to manually reposition a component up/down
    in the **Inspector** window or right-click for moving and other functions. All
    of the aforementioned functions are accessible either through the right-click
    dialog popup or the icons on the right side of the component header; those are
    **Reference**, **Presets**, and a vertical ellipsis equivalent to right-clicking
    in the title.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加、删除和复制/粘贴组件，并且可以复制/粘贴它们的值，甚至可以将它们保存为预设！所有这些都可以通过**组件**标题部分完成。点击并按住标题，可以在**检查器**窗口中手动上下移动组件，或右键单击以移动和其他功能。所有上述功能都可以通过右键单击对话框弹出窗口或组件标题右侧的图标访问；那些是**引用**、**预设**和一个垂直省略号，相当于在标题上右键单击。
- en: Components add powerful features to your projects, but things come together
    even more when components combine and work together with other components. Unity
    is based on this **component architecture**. We will be diving into how to structure
    your projects best to leverage Unity components in a well-structured single-responsibility
    design pattern that is easy to work with and friendly for both designers and developers
    to use.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 组件为您的项目添加了强大的功能，但当组件结合并与其他组件协同工作时，事物会变得更加完美。Unity 基于这种**组件架构**。我们将深入了解如何最佳地构建您的项目以利用
    Unity 组件，采用易于工作且对设计师和开发者都友好的单一职责设计模式。
- en: In this section, you learned about the importance of components and how to work
    with them in **Inspector**. We’ll be working with components throughout the book,
    starting with the **Sprite Renderer** in the next section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了组件的重要性以及如何在**检查器**中与之协同工作。我们将贯穿整本书使用组件，从下一节的**精灵渲染器**开始。
- en: 2D sprites with Sprite Creator – Understanding the Sprite Renderer and draw
    ordering
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sprite Creator 创建 2D 精灵 – 理解精灵渲染器和绘制顺序
- en: Let’s dig right in and put into practice what we just learned about GameObjects
    by creating a simple sprite-based character we’ll be using as the player in a
    collection game. This will be our first project in the book! We’ll make the player
    character from scratch using Unity’s built-in **Sprite** **Creator** graphics.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接深入实践我们刚刚学到的关于 GameObjects 的知识，通过创建一个简单的基于精灵的角色来作为集合游戏中的玩家使用。这将是我们书中的第一个项目！我们将使用
    Unity 内置的**精灵** **创建器**图形从头开始制作玩家角色。
- en: In this section, we’ll create a new scene, add sprites, and learn how to manipulate
    and layer sprites together to make our player character.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个新场景，添加精灵，并学习如何操纵和分层精灵以制作我们的玩家角色。
- en: Creating a new scene
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新场景
- en: First, let’s create a new scene by going to **File** | **New Scene** (or using
    the *Ctrl/Cmd + N* shortcut). This will open the **New Scene** dialog and prompt
    us to select a **Scene Template**. We’re going to be using the **Lit 2D (URP)**
    template since we’ll be working with 2D while also using the Universal RP, and
    we want to take advantage of all the advanced lighting features URP offers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过转到**文件** | **新建场景**（或使用*Ctrl/Cmd + N*快捷键）来创建一个新场景。这将打开**新建场景**对话框，并提示我们选择**场景模板**。我们将使用**Lit
    2D (URP)**模板，因为我们将在使用通用 RP 的同时处理 2D，并且我们想充分利用 URP 提供的所有高级照明功能。
- en: Important note
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When the scene opens, it’s good practice to save it immediately! Save it now
    by going to **File** | **Save** (or by pressing *Ctrl/Cmd + S*), selecting a folder
    in your project (usually **Assets/Scenes**), and giving it a descriptive name.
    Now, anytime you make changes and want to save your progress, simply use the *Ctrl/Cmd
    + S* shortcut to save. You’ll want to do this regularly and make it a habit –
    crashes occur when you least expect it, and you don’t want to lose any significant
    progress that will have to be recreated.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当场景打开时，立即保存是一个好习惯！现在通过转到**文件** | **保存**（或按*Ctrl/Cmd + S*），选择您的项目中的一个文件夹（通常是**Assets/Scenes**），并给它一个描述性的名称。现在，每次您进行更改并想要保存进度时，只需使用*Ctrl/Cmd
    + S*快捷键来保存。您希望定期这样做并养成习惯——意外崩溃时，您不希望丢失任何重要的进度，这些进度将需要重新创建。
- en: With our new scene being created, let’s add some sprites!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的新场景后，让我们添加一些精灵！
- en: Creating a sprite using Sprite Creator
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sprite Creator 创建精灵
- en: Next, create a sprite in our scene using the `(0`, `0`, `0`). Yay!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的场景中使用`(0`, `0`, `0`)创建一个精灵。耶！
- en: 'Let’s parent this to a new empty GameObject to create our player object with
    a good structure – separating the graphics from the functionality we’ll add as
    components to the root GameObject. We’ll do this by performing the following steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个对象设置为一个新的空GameObject的父对象，以创建具有良好结构的玩家对象——将图形与我们将作为组件添加到根GameObject的功能性分开。我们将通过以下步骤来完成：
- en: Create a new empty GameObject by, again, right-clicking within the `(0`, `0`,
    `0`).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`(0, 0, 0)`内再次右键单击，创建一个新的空GameObject。
- en: The default name of a new GameObject, as you guessed it, is **GameObject**.
    It is highlighted for editing by default, so you can easily rename it without
    additional steps. We’ll use the default name for now, so hit the *Enter* key.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新GameObject的默认名称，正如你所猜想的，是**GameObject**。它默认被突出显示以供编辑，因此你可以轻松地不进行额外步骤地重命名它。现在我们将使用默认名称，所以按*Enter*键。
- en: Create another new GameObject, but this time name it `Graphics`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个新的GameObject，但这次将其命名为`Graphics`。
- en: Now, we’ll set up the player character’s GameObject structure by drag and drop.
    First, click and drag the **Circle** object to **Graphics**, then click and drag
    the **Graphics** object to **GameObject**.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过拖放设置玩家角色的GameObject结构。首先，点击并拖动**圆形**对象到**图形**，然后点击并拖动**图形**对象到**GameObject**。
- en: Important note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We could have saved a few steps by first selecting the **Circle** GameObject
    in the **Scene Hierarchy**, right-clicking on it to open the **Create** menu,
    then selecting **Create Empty Parent**. The previous process was essential to
    demonstrate how GameObjects in the **Hierarchy** window can be parented and moved
    to other positions in the **Hierarchy**. To give this a try now, undo the parenting
    by going to **Edit** | **Undo** (or *Ctrl/Cmd + Z*) and then redo the parenting
    of the GameObjects.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以通过首先在**场景层次结构**中选择**圆形**GameObject，右键单击它以打开**创建**菜单，然后选择**创建空父对象**来节省几个步骤。前面的过程对于演示**层次结构**窗口中的GameObject如何被设置为父对象并移动到其他位置是至关重要的。现在尝试一下，通过转到**编辑**
    | **撤销**（或*Ctrl/Cmd + Z*）来撤销父化，然后重新进行GameObject的父化。
- en: 'Finally, rename the root object from `GameObject` to `Player`. First, select
    it in the **Hierarchy** window and press the *F2* (Windows) or *Enter* (Mac) key.
    Alternatively, with the chosen item in the **Hierarchy**, use the name field at
    the top of the **Inspector** window to rename it. You should end up with the following
    sprite and GameObject setup in your scene:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将根对象从`GameObject`重命名为`Player`。首先，在**层次结构**窗口中选择它，并按*F2*（Windows）或*Enter*（Mac）键。或者，在**层次结构**中选择已选项目，使用**检查器**窗口顶部的名称字段来重命名它。你应该在你的场景中获得以下精灵和GameObject设置：
- en: '![Figure 1.7 – 2D Sprite player character GameObject Hierarchy](img/B18347_01_07.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – 2D精灵玩家角色GameObject层次结构](img/B18347_01_07.jpg)'
- en: Figure 1.7 – 2D Sprite player character GameObject Hierarchy
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 2D精灵玩家角色GameObject层次结构
- en: You learned how to add a sprite shape to your scene and understand the parenting
    of GameObjects to create a good structure. Before tapping fully into your arcane
    artistic talents to create our player character, knowing how to get around in
    the scene View first will surely be beneficial.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何将精灵形状添加到场景中，并理解了将GameObject设置为父对象以创建良好结构的方法。在我们完全发挥你那神秘的美术才能来创建玩家角色之前，首先了解如何在场景视图中导航将肯定是有益的。
- en: Navigating the scene View
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在场景视图中导航
- en: 'Moving around in the scene **View** will help your drawing efforts by zooming
    in/out on details and focusing on the part you’re working on. While in **2D Mode**,
    you’ll exclusively be using both panning and zooming:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景**视图**中移动可以帮助你的绘图工作，通过放大/缩小细节并专注于你正在工作的部分。在**2D模式**下，你将仅使用平移和缩放：
- en: '**Pan** the scene View around by pressing the right-mouse button, using the
    **View Tool** (“hand” icon in the **Toolbar Overlay**) by clicking and dragging,
    or you can also use the keyboard by pressing the arrow keys.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过按住右鼠标按钮，使用**视图工具**（**工具栏叠加**中的“手”图标）点击并拖动，或你也可以使用键盘，按箭头键来**平移**场景视图。
- en: '**Zoom** in/out of the scene View by scrolling the mouse wheel.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**场景视图，通过滚动鼠标滚轮进行放大或缩小。'
- en: Additionally, you can bring focus on an object in the scene View by double-clicking
    it in the **Hierarchy** window.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，你还可以通过在**层次结构**窗口中双击对象来在场景视图中将其聚焦。
- en: Additional reading | Unity documentation
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity文档
- en: You can read more about scene View navigation at [https://docs.unity3d.com/2022.3/Documentation/Manual/SceneViewNavigation.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/SceneViewNavigation.xhtml)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.unity3d.com/2022.3/Documentation/Manual/SceneViewNavigation.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/SceneViewNavigation.xhtml)上了解更多关于场景视图导航的信息。
- en: We’re all set to start building our character in the next section.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好在下一节开始构建我们的角色了。
- en: Creating our player character
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的玩家角色
- en: We will create a ladybug for the player character in our collection game project.
    We’ll use **Sprite Creator** sprites to design our character right inside the
    Unity Editor! In a later chapter, we’ll be importing original art assets to use
    as the different sprites in the game. For now, we’ll be limited to using some
    basic shapes to build out our character design, but with some creativity, the
    results can look quite lovely. The Transform values for **Position**, **Rotation**,
    and **Scale** and their corresponding **Manipulation Tools** (**Toolbar Overlay**)
    will be used extensively to draw our character.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的收集游戏项目中，我们将为玩家角色创建一只瓢虫。我们将在 Unity 编辑器中直接使用**精灵创建器**精灵来设计我们的角色！在后面的章节中，我们将导入原始艺术资产，用作游戏中的不同精灵。现在，我们将限制使用一些基本形状来构建我们的角色设计，但只要有些创意，结果可以看起来相当漂亮。我们将广泛使用**位置**、**旋转**和**缩放**的变换值及其相应的**操作工具**（**工具栏覆盖**）来绘制我们的角色。
- en: Important note
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Placeholder graphics created by a programmer during early development – and
    in some cases, before an artist has finalized artwork – are commonly referred
    to as “programmer art.” This term is sometimes used negatively to indicate mediocre
    artwork, but don’t let that stop you from being creative! Games such as Geometry
    Dash, 140, and VVVVVV all use simple graphics to great effect.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期开发阶段由程序员创建的占位符图形，在某些情况下，甚至在艺术家完成艺术品之前，通常被称为“程序员艺术”。这个术语有时被负面使用，以表示平庸的艺术作品，但不要让这阻止你发挥创意！像
    Geometry Dash、140 和 VVVVVV 这样的游戏都使用了简单的图形，效果极佳。
- en: Let’s start by selecting the **Circle** object (that we previously created)
    in the **Hierarchy** window (or double-clicking to bring it into focus in the
    scene View) – note that we’ll want to keep all our new sprites as children of
    the **Graphics** object in the **Hierarchy** (as seen in *Figure 1**.8*). This
    will be the ladybug’s body, so let’s give it a nice red color.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在**层次结构**窗口中选择**圆形**对象（我们之前创建的）开始（或双击以在场景视图中将其聚焦）——请注意，我们希望将所有新的精灵都作为**图形**对象在**层次结构**中的子项（如*图
    1**.8*所示）。这将作为瓢虫的身体，所以让我们给它一个漂亮的红色。
- en: The **Sprite Renderer** component has a field for color just below the **Sprite**
    field that indicates we’re using the **Circle** sprite shape. Clicking the color
    will pop up the **Color Picker** dialog (see *Figure 1**.8*). When you have a
    nice shade of red selected – as indicated in the top-right corner of the dialog
    – simply click the close button in the dialog’s title bar (the **x**).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**精灵渲染器**组件在**精灵**字段下方有一个用于颜色的字段，表示我们正在使用**圆形**精灵形状。点击颜色会弹出**颜色选择器**对话框（见*图
    1**.8*）。当你选择了一个漂亮的红色调——如对话框右上角所示——只需点击对话框标题栏中的关闭按钮（**x**）。'
- en: '![Figure 1.8 – The Ladybug Sprite Renderer component and the Color Picker dialog](img/B18347_01_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 –瓢虫精灵渲染器组件和颜色选择器对话框](img/B18347_01_08.jpg)'
- en: Figure 1.8 – The Ladybug Sprite Renderer component and the Color Picker dialog
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 –瓢虫精灵渲染器组件和颜色选择器对话框
- en: With our body sprite having a nice shade of red, we can now shape it by manipulating
    its **Transform** in the next section.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的身体精灵拥有漂亮的红色调，我们可以在下一节中通过操作其**变换**来塑造它。
- en: Using Manipulation Tools
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用操作工具
- en: In *Figure 1**.8*, you can see that we’ve already gone ahead and finished our
    ladybug character design. Let’s walk through the process of creating it now. You
    should have a red circle in your scene View, but it needs to be… less circular.
    Let’s turn it into an ellipse by scaling it on its Y-axis. This can be accomplished
    by either typing in a value in the **Transform** | **Scale** | **Y** field or
    adjusting manually using the **Rect Tool** (selected in the **Toolbar Overlay**
    in *Figure 1**.8*, and **Scale Tool** may also be used).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 1**.8*中，你可以看到我们已经完成了瓢虫角色设计。现在让我们回顾一下创建它的过程。你应该在场景视图中有一个红色圆圈，但它需要变得…不那么圆形。让我们通过在
    Y 轴上缩放它来将其变成一个椭圆。这可以通过在**变换**|**缩放**|**Y**字段中输入一个值或手动使用**矩形工具**（在*图 1**.8*中的**工具栏覆盖**中选中，也可以使用**缩放工具**）来实现。
- en: Important note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The 2D scene View is represented by the X and Y axes for horizontal and vertical
    values, respectively. The Z-axis would represent depth, but in **2D Mode**, we
    won’t be manipulating the Z-axis value and will be using **Sprite Sorting** and
    **Ordering** **in Layers**.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 2D场景视图由X轴和Y轴分别表示水平和垂直值。Z轴将表示深度，但在**2D模式**中，我们不会操作Z轴值，而是使用**精灵排序**和**图层顺序**。
- en: While manipulating manually with the **Rect Tool**, click and drag on the edge
    (1 axis) or corner (2 axes) of the box surrounding the **Circle** object to resize
    it.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用**矩形工具**手动操作时，单击并拖动围绕**圆形**对象的边缘（1个轴）或角落（2个轴）以调整其大小。
- en: Two modifier keys that can help create shapes more easily are the *Shift* and
    *Alt* keys – but keep the keys pressed while dragging, do not press them before
    doing so.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 两个可以帮助更容易地创建形状的修改键是**Shift**和**Alt**键——但请按住这些键进行拖动，不要在这样做之前按它们。
- en: To maintain the current aspect ratio while scaling, hold down the *Shift* key
    while dragging.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在缩放时保持当前宽高比，同时按住**Shift**键进行拖动。
- en: To scale an object equally on both sides from the center pivot, hold down the
    *Alt* key while dragging.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从中心支点均匀地缩放对象的两边，在拖动时按住**Alt**键。
- en: Tip
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can hold both the *Shift* and *Alt* keys down while manipulating an object.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在操作对象时同时按住**Shift**和**Alt**键。
- en: When you have a body shape that looks good, let’s move on by creating an outline
    for it. An outline will help provide a good separation of our player character
    from the background environment. With the **Circle** object still selected (you
    can simply click on shapes in the scene View to select them), press *Ctrl/Cmd
    + D* to duplicate it. This will create a copy of the **Circle** sprite and append
    a number incrementally to the name for every duplicate made. Set the new shape’s
    color to black and scale it up uniformly to be slightly larger than the red circle.
    While performing this action, you’ll likely realize that we now have a problem
    – the black shape hides the red body. Let’s fix it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有一个看起来不错的身体形状时，让我们继续创建它的轮廓。轮廓将有助于将我们的玩家角色与背景环境之间提供良好的分离。在仍然选中**圆形**对象的情况下（您可以在场景视图中简单地单击形状来选择它们），按*Ctrl/Cmd
    + D*进行复制。这将创建一个**圆形**精灵的副本，并为每个复制的副本在名称中递增一个数字。将新形状的颜色设置为黑色，并均匀地将其缩放得略大于红色圆形。在执行此操作时，您可能会意识到我们现在有一个问题——黑色形状隐藏了红色身体。让我们修复它。
- en: Sprite Layers and Ordering
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精灵图层和排序
- en: 'In **Inspector**, **Additional Settings** is a section within the **Sprite
    Renderer** component. If the **Sorting Layer** and **Order in Layer** fields are
    not visible directly underneath it, click on **Additional Settings** to expand
    it (refer to the bottom of the **Inspector** window in *Figure 1**.7*). We can
    change the drawing order of sprites in two ways: 1) by specifying **Sorting Layer**
    or 2) by a value specified in the **Order in** **Layer** field.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在**检查器**中，**附加设置**是**精灵渲染器**组件中的一个部分。如果**排序图层**和**图层顺序**字段没有直接显示在它下面，请单击**附加设置**以展开它（参见图1.7的**检查器**窗口底部）。我们可以通过两种方式更改精灵的绘制顺序：1）通过指定**排序图层**或2）通过在**图层顺序**字段中指定的值。
- en: Sorting Layers is a topic we’ll be diving into in the coming chapters since
    we only need a single Layer for our current purpose – think of Layers as pages
    in a book where the order in which they are read front to back can be rearranged.
    Now, working with the `0`, putting every shape at the same depth. Since we want
    the black shape to be in the back of the red shape, set its `-1`. You can now
    readjust its size to give a nice outline thickness to the red shape.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 排序图层是我们将在接下来的章节中深入探讨的主题，因为我们目前只需要一个图层——将图层想象成书中的页面，其中它们从前到后的顺序可以重新排列。现在，将`0`放在每个形状上，使每个形状处于相同的深度。由于我们希望黑色形状位于红色形状的后面，将其设置为`-1`。现在您可以调整其大小，为红色形状提供一个漂亮的轮廓厚度。
- en: Tip
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can select multiple shapes and change the **Order in Layer** value for all
    at once by holding the *Ctrl* or *Shift* key when selecting.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在选择时按住**Ctrl**或**Shift**键，选择多个形状并一次性更改所有形状的**图层顺序**值。
- en: Creating the rest of the ladybug character is just a matter of duplicating a
    sprite shape already in the scene or creating a new one. The **Sprite Creator**
    shapes available are **square**, **circle**, **capsule**, **diamond**, and **hexagon**.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 创建剩余的瓢虫角色只是复制场景中已有的精灵形状或创建一个新的形状的问题。可用的**精灵创建器**形状有**方形**、**圆形**、**胶囊形**、**菱形**和**六边形**。
- en: Move the shapes into position by simply clicking and dragging on the sprite
    in the scene View and placing it in position. Hovering the mouse pointer near
    the corner point (blue dot) will show the rotation cursor. While this cursor is
    showing, clicking and dragging will rotate it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在场景视图中单击并拖动精灵并将它放置到适当位置来移动形状。将鼠标指针悬停在角落点（蓝色圆点）附近将显示旋转光标。当此光标显示时，单击并拖动可以旋转它。
- en: Additional reading | Unity documentation
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读 | Unity 文档
- en: You can read more about positioning GameObjects at [https://docs.unity3d.com/2022.3/Documentation/Manual/PositioningGameObjects.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/PositioningGameObjects.xhtml)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以阅读更多关于定位 GameObject 的信息，请参阅 [https://docs.unity3d.com/2022.3/Documentation/Manual/PositioningGameObjects.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/PositioningGameObjects.xhtml)
- en: Go ahead and create your own ladybug player character now. Use all of the **Transform**
    fields, **Rect Tool** with the modifier keys, and the **Order in Layer** field
    to draw. You will perform these actions repeatedly throughout creating the projects
    in the book for not only sprites but also UI elements. Have fun with it!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就创建你自己的瓢虫玩家角色吧。使用所有的 **变换** 字段，**矩形工具** 和修饰键，以及 **层顺序** 字段来绘制。你将在创建本书中的项目时反复执行这些动作，不仅限于精灵，还包括
    UI 元素。享受这个过程吧！
- en: In this section, you learned how to create a new **Scene**, add and duplicate
    sprites, and manipulate those sprites to make our player character with the **Order
    in Layer** value. Next, before wrapping up this chapter, we’ll discuss game design.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何创建一个新的 **场景**，添加和复制精灵，并使用 **层顺序** 值来操纵这些精灵以制作我们的玩家角色。在结束这一章之前，我们将讨论游戏设计。
- en: Game Design Document (GDD) – Introducing the 2D collection game
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏设计文档 (GDD) – 介绍 2D 收集游戏
- en: 'Throughout the book, the game we’ll be creating will be defined and structured
    using what is known as **Game Design Document** (**GDD**). This document will
    serve as our point of reference as we decide how to develop the game’s core aspects.
    Our game is going to be pretty simple but packed with features. Most of the information
    written in the GDD is self-explanatory, but a few concepts might be new, so let’s
    start by reviewing them:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将使用所谓的 **游戏设计文档** (**GDD**) 来定义和构建我们将要创建的游戏。这份文档将作为我们决定如何开发游戏核心方面的参考点。我们的游戏将会很简单，但功能丰富。GDD
    中写的大部分信息都是不言自明的，但一些概念可能比较新，所以让我们先来回顾一下它们：
- en: What is the name of the game?
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏的名称是什么？
- en: This one is self-explanatory, so just don’t stress over this now! Anything as
    a working title will work just fine – have fun with it.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个很简单，所以现在不要过于担心！任何作为工作标题的东西都行得通 – 享受这个过程吧！
- en: What is the game’s **core loop**?
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏的核心循环是什么？
- en: The core loop is what makes your game an enjoyable and satisfying experience
    for players. It is the series of actions the player repeatedly performs to accomplish
    the objective.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心循环是使您的游戏成为玩家享受和满意的体验的关键。它是玩家为了完成目标而反复执行的一系列动作。
- en: 'Let’s see an example GDD filled out for the 2D collection game we’ll make throughout
    the book:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个示例 GDD，它将填充我们将在整本书中制作的 2D 收集游戏：
- en: '| **Name** **of Game** | Outer World |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| **游戏名称** | 外部世界 |'
- en: '| **What is the theme, setting,** **or genre?** | 2D Sci-fi Platformer |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| **主题、背景** **或类型是什么？** | 2D 科幻平台游戏 |'
- en: '| **Summary****What’s the** **big picture?** | An adventure game that takes
    the player on a journey from peaceful farming to battling robotic systems infected
    by an evil alien plant entity. The game takes place on an alien planet where the
    player’s race has established a habitat on the planet’s surface. The habitat is
    fully automated and maintained by robots managed by a central control system.
    An evil alien plant entity has infiltrated the control systems and taken over
    the robots individually and the central system. The goal of the alien entity is
    not known, but it must be stopped if the player’s race is to survive on this planet.
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| **摘要** **整体是什么？** | 一款冒险游戏，将玩家带上一段从和平的耕作到与被邪恶的外星植物实体感染的机器人系统战斗的旅程。游戏发生在一个外星星球上，玩家种族在星球表面建立了栖息地。栖息地是完全自动化的，并由中央控制系统管理的机器人维护。一个邪恶的外星植物实体已经渗透到控制系统中，并分别控制了机器人和中央系统。外星实体的目标尚不清楚，但必须阻止它，否则玩家种族将无法在这个星球上生存。
    |'
- en: '| **What is the game’s** **unique feature?** | Multiple game modes provide
    a novel and exciting approach to gameplay: simulation, adventure, and shooting.
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| **游戏独特的特色是什么？** | 多种游戏模式提供新颖且令人兴奋的游戏体验：模拟、冒险和射击。 |'
- en: '| **What games inspired you** **and why?** | Metroid, Mega Man, and Stardew
    Valley. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| **哪些游戏启发了你** **以及为什么？** | Metroid、Mega Man 和 Stardew Valley。 |'
- en: '| **Describe the gameplay, the core loop, and** **the progression.** | Collect
    energy shards to clean seedlings in a space station habitat as the timer ticks
    down! |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| **描述游戏玩法、核心循环和** **进步。** | 在计时器倒数的压力下收集能量碎片，清理太空站栖息地中的幼苗！ |'
- en: Table 1.1 – GDD for the game
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1 – 游戏设计文档 (GDD)
- en: As needed, we’ll be adding to the GDD over time, but this will serve us well
    as a starting point. Yay!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我们将根据需要添加到 GDD 中，但这将为我们提供一个良好的起点。耶！
- en: This section introduced you to a simple GDD template and you learned the basic
    but essential questions to answer when making a remarkable game.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本节向您介绍了简单的 GDD 模板，并学习了在制作引人注目的游戏时需要回答的基本但关键问题。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was a quick introduction to installing Unity Hub, installing the
    Unity Editor, and why we chose the 2D Universal RP template for creating our new
    2D project. In this chapter, you learned the importance of **Package Manager**
    for adding tooling and features to the Unity Editor specific to our project’s
    needs. You then learned how to make your way around the different windows and
    toolbars, and you used them to create and manipulate GameObjects in our new 2D
    scene. We also got a headstart on building the collection game by drawing our
    player character within the Unity Editor – learning the importance of Layer sorting
    order in the process.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了安装 Unity Hub、安装 Unity 编辑器和选择 2D 通用 RP 模板创建新 2D 项目的原因。在本章中，你学习了 **包管理器**
    对于添加针对我们项目需求特定的工具和功能到 Unity 编辑器的重要性。然后你学习了如何浏览不同的窗口和工具栏，并使用它们在我们的新 2D 场景中创建和操作
    GameObjects。我们还通过在 Unity 编辑器中绘制我们的玩家角色，提前开始了构建收集游戏的工作——在这个过程中学习了层排序顺序的重要性。
- en: Finally, we started defining what the game we’re creating will be by deciding
    on a name for the game, writing our summary, and specifying some gameplay in the
    GDD – this will provide the necessary direction for the production of the game.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过为游戏命名、撰写摘要和指定 GDD 中的某些游戏玩法来开始定义我们正在创建的游戏。这将为游戏的生产提供必要的方向。
- en: In the next chapter, we’ll dive into creating the “Outer World” collection game
    environment, learning how to implement game mechanics through scripts, and adding
    a basic UI.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨创建“外部世界”收集游戏环境，学习如何通过脚本实现游戏机制，并添加基本 UI。
- en: Image sources
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片来源
- en: '*Figure 1**.1* – Unity platform release timeline'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1**.1* – Unity 平台发布时间线'
- en: '**Webpage** **reference**: [https://blog.unity.com/engine-platform/unity-20221-tech-stream-is-now-available](https://blog.unity.com/engine-platform/unity-20221-tech-stream-is-now-available)'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**网页** **参考**: [https://blog.unity.com/engine-platform/unity-20221-tech-stream-is-now-available](https://blog.unity.com/engine-platform/unity-20221-tech-stream-is-now-available)'
- en: '**Image** **URL**: [https://blog-api.unity.com/sites/default/files/2022-05/image2.jpg](https://blog-api.unity.com/sites/default/files/2022-05/image2.jpg)'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图片** **URL**: [https://blog-api.unity.com/sites/default/files/2022-05/image2.jpg](https://blog-api.unity.com/sites/default/files/2022-05/image2.jpg)'
