- en: Chapter 4. Developing Your First iOS App with Xamarin.iOS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用Xamarin.iOS开发您的第一个iOS应用
- en: 'In this chapter, we finally get to jump in and start writing some code. We
    will develop a sample app that demonstrates the basics of developing Xamarin.iOS
    apps and will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们终于可以开始编写一些代码了。我们将开发一个样例应用，展示开发Xamarin.iOS应用的基础，并将涵盖以下主题：
- en: Overview of the sample app
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样例应用的概述
- en: Creating a Xamarin.iOS app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Xamarin.iOS应用
- en: Running and debugging apps with Xamarin Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xamarin Studio运行和调试应用
- en: Using Xamarin iOS Designer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xamarin iOS设计器
- en: Extending the sample app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展样例应用
- en: MonoTouch.Dialog
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MonoTouch.Dialog
- en: The sample national parks app
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样例国家公园应用
- en: 'In this chapter, we will create a sample app that we will continue to work
    with through [Chapter 8](ch08.html "Chapter 8. Sharing with Xamarin.Forms"), *Sharing
    with Xamarin.Forms*. The app will allow you to view, create, edit, and delete
    information about national parks, and will have a similar user interface and flow
    as the iOS 7 Contacts app. The following screen mock-ups depict how the user interface
    will be organized:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个样例应用，我们将在[第8章](ch08.html "第8章。与Xamarin.Forms共享")*与Xamarin.Forms共享*中继续使用它。该应用将允许您查看、创建、编辑和删除有关国家公园的信息，并将具有与iOS
    7联系人应用类似的用户界面和流程。以下屏幕截图展示了用户界面将如何组织：
- en: '![The sample national parks app](img/0838OT_04_18.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![样例国家公园应用](img/0838OT_04_18.jpg)'
- en: 'The following are the different views of national park apps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是国家公园应用的不同视图：
- en: '**List view**: This view displays a list of national parks that allows a park
    to be viewed and also a new park to be created'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表视图**：此视图显示国家公园列表，允许查看公园并创建新的公园'
- en: '**Detail view**: This view displays all the properties of a national park in
    read-only mode, and allows navigation to see photos of a park or see directions
    to a park'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详情视图**：此视图以只读模式显示国家公园的所有属性，并允许导航查看公园的照片或查看前往公园的路线'
- en: '**Edit view**: This view allows you to edit new or existing parks as well as
    delete parks'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑视图**：此视图允许您编辑新的或现有的公园，以及删除公园'
- en: Creating the sample app
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建样例应用
- en: A Xamarin.iOS template will be used to create the sample app, giving us much
    of the required functionality that is already in place.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用Xamarin.iOS模板来创建样例应用，为我们提供大部分已经就位的功能。
- en: Throughout the chapter, we will present sample code from the downloaded solutions.
    Feel free to deviate in any manner to take the app in any direction you see fit.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将展示从下载的解决方案中提取的样例代码。请随意以任何方式偏离，以将应用引导到您认为合适的方向。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)下载示例代码文件，以获取您购买的所有Packt
    Publishing书籍。如果您在其他地方购买了此书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以将文件直接通过电子邮件发送给您。
- en: 'To create the national parks sample app, perform the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建国家公园样例应用，请执行以下步骤：
- en: Launch Xamarin Studio.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Xamarin Studio。
- en: From the **File** menu, navigate to **New** | **Solution**. The **New Solution**
    dialog box will be presented, as shown in the following screenshot:![Creating
    the sample app](img/0838OT_04_01.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中，导航到**新建** | **解决方案**。将显示**新建解决方案**对话框，如下截图所示：![创建样例应用](img/0838OT_04_01.jpg)
- en: Navigate to **C#** | **iOS** | **iPhone Storyboard** on the left-hand side of
    the dialog box and **Master-Detail Application** in the middle section.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框的左侧导航到**C#** | **iOS** | **iPhone Storyboard**，在中间部分选择**主-详情应用**。
- en: Enter `NationalParks.iOS` in the **Name** field, select the location where you
    would like to place your code by clicking on the **Browse** button, change the
    **Solution name** to `NationalParks`, leave **Create directory for solution**
    checked, and click on **OK**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入`NationalParks.iOS`，通过点击**浏览**按钮选择您想要放置代码的位置，将**解决方案名称**更改为`NationalParks`，保留**为解决方案创建目录**复选框，然后点击**确定**。
- en: One reason for naming the project `NationalParks.iOS` is that in future chapters,
    we will add a new project named `NationalParks.Droid` to the same solution. This
    project will clearly identify which platform is supported by each project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为`NationalParks.iOS`的一个原因是在未来的章节中，我们将向同一个解决方案中添加一个名为`NationalParks.Droid`的新项目。这个项目将清楚地标识每个项目支持的平台。
- en: Xamarin Studio will create both the solution and project folders, generate a
    number of files for solution and project, and then open the new solution and project.
    The following screenshot depicts Xamarin Studio with the newly created project
    open:![Creating the sample app](img/0838OT_04_02.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xamarin Studio将创建解决方案和项目文件夹，为解决方案和项目生成一些文件，然后打开新的解决方案和项目。以下截图显示了打开新项目的Xamarin
    Studio：![创建示例应用](img/0838OT_04_02.jpg)
- en: By selecting the Master-Detail template, Xamarin Studio has generated a functioning
    application with a master view (list) and a detail view along with everything
    that is needed to navigate between the two.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择Master-Detail模板，Xamarin Studio已生成一个具有主视图（列表）和详细视图的功能性应用，以及在这两个视图之间导航所需的一切。
- en: 'Let''s take a brief look at what was automatically created:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要看看自动创建的内容：
- en: '`MainStoryboard.storyboard`: A storyboard file containing the user interface
    definitions was created and named `MainStoryboard.storyboard`. Double-click on
    this file to open it in Xcode. You will notice that the storyboard contains two
    view controllers: `MasterViewController` and `DetailViewController` with a single
    segue between them.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainStoryboard.storyboard`：创建了一个包含用户界面定义的故事板文件，并命名为`MainStoryboard.storyboard`。双击此文件以在Xcode中打开它。您会注意到故事板包含两个视图控制器：`MasterViewController`和`DetailViewController`，它们之间有一个单一的转场。'
- en: '`MasterViewController`: The `MasterViewController.cs` and the corresponding
    `MasterViewController.designer.cs` files were created as a result of `MasterViewController`
    defined in the storyboard. `MasterViewController.cs` is the file where we will
    add code, while we override methods and add logic.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MasterViewController`：由于在故事板中定义了`MasterViewController`，创建了`MasterViewController.cs`及其对应的`MasterViewController.designer.cs`文件。`MasterViewController.cs`是我们将添加代码的文件，而在这里我们重写方法和添加逻辑。'
- en: '`DataSource`: `MasterViewController` contains an inner class named `DataSource`,
    which is a specialization of `UITableViewSource`. The `DataSource` class is responsible
    for providing populated `UICellViews` to the table view on `MasterViewController`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataSource`：`MasterViewController`包含一个名为`DataSource`的内部类，这是一个`UITableViewSource`的特化。`DataSource`类负责向`MasterViewController`上的表格视图提供填充的`UICellViews`。'
- en: '`DetailViewController`: The `DetailViewController.cs` and its corresponding
    `DetailViewController.designer.cs` files were created as a result of `DetailViewController`
    defined in the storyboard. This is used to display properties of a specific item
    from the table view on `MasterViewController`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetailViewController`：由于在故事板中定义了`DetailViewController`，创建了`DetailViewController.cs`及其对应的`DetailViewController.designer.cs`文件。这用于在`MasterViewController`上的表格视图中显示特定项的属性。'
- en: The Project Options view
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目选项视图
- en: 'There are numerous options that can be set that affect how an iOS app is built
    and executed. These options can be viewed and adjusted from the **Project Options**
    view. The following sections are of the most interest for iOS apps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可以设置，这些选项会影响iOS应用的构建和执行方式。这些选项可以在**项目选项**视图中查看和调整。以下部分对iOS应用最为重要：
- en: '**iOS Application**: This includes settings that describe the application,
    including the devices supported, iOS target version, orientations supported, icons,
    and more'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS应用**：这包括描述应用的设置，包括支持的设备、iOS目标版本、支持的朝向、图标等'
- en: '**iOS IPA Options**: This includes settings related to creating an IPA package
    for ad hoc distribution'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS IPA选项**：这包括与创建用于ad hoc分发的IPA包相关的设置'
- en: '**iOS Bundle Signing**: This includes settings that control how the bundle
    is signed during the build process'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS捆绑签名**：这包括在构建过程中控制如何对捆绑进行签名的设置'
- en: '**iOS Build**: This includes settings used by the compile and link process
    to optimize the resulting executable'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS构建**：这包括编译和链接过程使用的设置，用于优化生成的可执行文件'
- en: 'Prior to running the app, we need to choose a setting for our target version
    of iOS. To adjust this setting, follow these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用之前，我们需要为我们的iOS目标版本选择一个设置。要调整此设置，请按照以下步骤操作：
- en: Select the sample app project under the sample app solution in the **Solution**
    pad.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案**面板下选择示例应用解决方案中的示例应用项目。
- en: Right-click and select **Options**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择**选项**。
- en: Select the **iOS Application** section and set the **Deployment Target** option
    to **7.0** and click on **OK**.![The Project Options view](img/0838OT_04_19.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**iOS应用程序**部分，并将**部署目标**选项设置为**7.0**，然后点击**确定**。![项目选项视图](img/0838OT_04_19.jpg)
- en: Running and debugging within Xamarin Studio
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中运行和调试
- en: Now that we have a good understanding of what was created for us, let's take
    a few minutes to look at the capabilities Xamarin Studio provides to run and debug
    apps. The way in which a tool supports running and debugging apps has a big impact
    on developer productivity. Xamarin Studio provides a robust set of debugging capabilities
    comparable to the most modern development environments that can be used with either
    the iOS Simulator or a physical device. As with an iOS development, using a physical
    device provides the most accurate results.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对我们所创建的内容有了很好的理解，让我们花几分钟时间看看Xamarin Studio提供的运行和调试应用程序的功能。工具支持运行和调试应用程序的方式对开发者的生产力有重大影响。Xamarin
    Studio提供了一套强大的调试功能，与最现代的开发环境相当，可以使用iOS模拟器或物理设备。与iOS开发一样，使用物理设备可以提供最准确的结果。
- en: 'The two dropdowns on the upper-left hand corner of Xamarin Studio control the
    type of build (**Release** or **Debug**) that will be produced and, when **Debug**
    is selected, which of the iOS Simulators should be used. Build types include **Ad-Hoc**,
    **AppStore**, **Debug**, and **Release**. All of these build types except **Debug**
    will be discussed in [Chapter 9](ch09.html "Chapter 9. Preparing Xamarin.iOS Apps
    for Distribution"), *Preparing Xamarin.iOS Apps for Distribution*. The **Debug**
    build type is shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio左上角的两个下拉菜单控制要生成的构建类型（**发布**或**调试**），以及当选择**调试**时，应使用哪个iOS模拟器。构建类型包括**Ad-Hoc**、**AppStore**、**调试**和**发布**。除了**调试**之外的所有构建类型将在[第9章](ch09.html
    "第9章。准备Xamarin.iOS应用程序以分发")*准备Xamarin.iOS应用程序以分发*中讨论。以下截图显示了**调试**构建类型：
- en: '![Running and debugging within Xamarin Studio](img/0838OT_04_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![在Xamarin Studio中运行和调试](img/0838OT_04_03.jpg)'
- en: Note that **Debug** is selected for the type of build and the various options
    available for the iOS Simulator. Selecting **iOS Device** allows you to debug
    the app on an attached device.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于构建类型和iOS模拟器提供的各种选项，都选择了**调试**。选择**iOS设备**允许你在连接的设备上调试应用程序。
- en: 'To debug an app, follow the given steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试一个应用程序，请按照以下步骤操作：
- en: Select **Debug** for the build type, and select **iOS 7.1** from **iPhone Retina
    (4-inch 64-bit)** for the **iOS Simulator** option.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建类型选择为**调试**，并从**iPhone Retina (4英寸64位)**中选择**iOS模拟器**选项为**iOS 7.1**。
- en: Start the debugging session by clicking on the **Start** button from the taskbar
    on the left-hand side. You can also initiate the debugging session by navigating
    to **Run** | **Start Debugging** from the main menu bar.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击左侧任务栏上的**开始**按钮启动调试会话。您也可以通过主菜单栏导航到**运行** | **开始调试**来启动调试会话。
- en: Xamarin Studio will compile the app, launch the iOS Simulator, install the app
    on the simulator and finally launch the app. Xamarin Studio keeps you informed
    of what is going in the status window in the middle of the taskbar. The following
    screenshot shows the status window during the build process:![Running and debugging
    within Xamarin Studio](img/0838OT_04_04.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xamarin Studio将编译应用程序，启动iOS模拟器，在模拟器上安装应用程序，并最终启动应用程序。Xamarin Studio通过任务栏中间的状态窗口通知您正在发生的事情。以下截图显示了构建过程中的状态窗口：![在Xamarin
    Studio中运行和调试](img/0838OT_04_04.jpg)
- en: An empty list is initially presented. Click the **+** (add) button a few times
    and you will see the date/time fields being added to the list. Select an entry
    and the **Detail** view is displayed, as shown in the following screenshot:![Running
    and debugging within Xamarin Studio](img/0838OT_04_09.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始时显示一个空列表。点击**+**（添加）按钮几次，你将看到日期/时间字段被添加到列表中。选择一个条目，**详细**视图将显示，如下截图所示：![在Xamarin
    Studio中运行和调试](img/0838OT_04_09.jpg)
- en: Open `MasterViewController.cs` by double-clicking the **Solution** pad on the
    left-hand side. Set a breakpoint on the first line in the `AddNewItem()` method.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过双击左侧的**解决方案**垫打开`MasterViewController.cs`。在`AddNewItem()`方法的第一行设置断点。
- en: Click on the **+** (add) button in the app. You will notice the app has stopped
    on the breakpoint, as follows:![Running and debugging within Xamarin Studio](img/0838OT_04_05.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中点击**+**（添加）按钮。你会注意到应用程序在断点处停止，如下所示：![在Xamarin Studio中运行和调试](img/0838OT_04_05.jpg)
- en: You will find the basic flow controls in the taskbar. These allow you to continue
    execution, step over current line, step into current function, and step out of
    the current function. The taskbar will appear:![Running and debugging within Xamarin
    Studio](img/0838OT_04_06.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在任务栏中找到基本流程控制。这些允许您继续执行、跳过当前行、进入当前函数和退出当前函数。任务栏将出现：![在 Xamarin Studio 中运行和调试](img/0838OT_04_06.jpg)
- en: Tip
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A complete set of flow control and debugging options can be found under the
    **Run** main menu.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完整的流程控制和调试选项可以在 **运行** 主菜单下找到。
- en: From the first line in `AddNewItem()`, select `DateTime.Now`, right-click, and
    select **Expression Evaluator**. This dialog box allows you to quickly view the
    status of objects during your app's execution, as follows:![Running and debugging
    within Xamarin Studio](img/0838OT_04_07.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `AddNewItem()` 的第一行开始，选择 `DateTime.Now`，右键单击，并选择 **表达式评估器**。此对话框允许您快速查看应用程序执行期间对象的状态，如下所示：![在
    Xamarin Studio 中运行和调试](img/0838OT_04_07.jpg)
- en: You will also notice a set of panels at the bottom of Xamarin Studio, which
    contain tabs for **Watch**, **Locals**, **Breakpoints**, **Threads**, **Application
    Output**, and **Call Stack**.![Running and debugging within Xamarin Studio](img/0838OT_04_08.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还会注意到 Xamarin Studio 底部的一组面板，其中包含 **观察**、**局部变量**、**断点**、**线程**、**应用程序输出**
    和 **调用堆栈** 选项卡。![在 Xamarin Studio 中运行和调试](img/0838OT_04_08.jpg)
- en: Click the continue icon to allow the app to continue running.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续图标以允许应用继续运行。
- en: As you can see from the previous exercise, Xamarin Studio and the iOS Simulator
    provide a robust set of features to run and debug applications.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从之前的练习中看到的，Xamarin Studio 和 iOS 模拟器提供了一套强大的功能来运行和调试应用程序。
- en: Extending the sample app
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展示例应用
- en: 'Now, it''s time to extend the app. We have two primary tasks before us:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候扩展应用了。我们面前有两个主要任务：
- en: Create a way for national parks to be loaded and saved from a file
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一种方法，以便从文件中加载和保存国家公园
- en: Enhance the user interface to show all of the appropriate attributes and allow
    to view and edit data
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强用户界面以显示所有适当的属性，并允许查看和编辑数据
- en: Storing and loading national parks
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储和加载国家公园
- en: We will use a simple JSON-formatted text file to store information. .NET provides
    libraries to accomplish this, but the library I have had the most success with
    is Json.NET. Json.NET is an open source library created by James Newton-King,
    and this is definitely worth considering. Json.NET is also available in the Xamarin
    component store, so we can add it to our project directly from there.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的 JSON 格式的文本文件来存储信息。.NET 提供了库来完成这项任务，但我最有成功经验的库是 Json.NET。Json.NET
    是由 James Newton-King 创建的开源库，这绝对值得考虑。Json.NET 也可在 Xamarin 组件商店中找到，因此我们可以直接从那里将其添加到我们的项目中。
- en: Adding Json.NET
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Json.NET
- en: 'To add Json.NET to the sample app, perform the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Json.NET 添加到示例应用中，请执行以下步骤：
- en: Expand the `NationalParks.iOS` project, select the `Components` folder, and
    choose **Edit Components**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开 `NationalParks.iOS` 项目，选择 `Components` 文件夹，并选择 **编辑组件**。
- en: In the upper-right corner, click on **Get More Components** and enter `Json.NET`
    in the search field.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，单击 **获取更多组件** 并在搜索字段中输入 `Json.NET`。
- en: Select **Json.NET** from the list and choose **Add to App**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择 **Json.NET** 并选择 **添加到应用**。
- en: Creating an entity class
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个实体类
- en: 'We now need an entity class that represents our subject: national parks. This
    will be a simple .NET class with a handful of properties.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要一个表示我们主题的实体类：国家公园。这将是一个具有少量属性的简单 .NET 类。
- en: 'To create an entity class, perform the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建实体类，请执行以下步骤：
- en: Right-click on `NationalParks.iOS` project and select the **New File** option.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `NationalParks.iOS` 项目并选择 **新建文件** 选项。
- en: In the **New File** dialog box, select the **General** section, select **Empty
    Class**, enter `NationalPark` in the **Name** field, and click on **New**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **新建文件** 对话框中，选择 **常规** 部分，选择 **空类**，在 **名称** 字段中输入 `NationalPark`，然后单击 **新建**。
- en: 'The following code demonstrates what is needed for the entity class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了实体类所需的代码：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding a JSON-formatted file
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 JSON 格式化文件
- en: Now, we need a file filled with JSON-formatted national parks. You can find
    such a file in the assets folder of the downloaded solutions. The name of the
    file is `NationalParks.json`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个包含 JSON 格式化国家公园的文件。您可以在下载的解决方案的 assets 文件夹中找到此类文件。该文件的名称是 `NationalParks.json`。
- en: 'To add the data file to the project, perform the following steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要将数据文件添加到项目中，请执行以下步骤：
- en: Copy the `NationalParks.json` file to the `NationalParks.iOS` project folder.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `NationalParks.json` 文件复制到 `NationalParks.iOS` 项目文件夹。
- en: Right-click on the `NationalParks.iOS` project and choose **Add Files**, select
    `NationalParks.json` and click on **Open**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `NationalParks.iOS` 项目并选择 **添加文件**，选择 `NationalParks.json` 并单击 **打开**。
- en: Double-click on the `NationalParks.json` file to open it and view the content.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `NationalParks.json` 文件以打开它并查看内容。
- en: There are several file properties that must be set that determine how the file
    is handled during the compilation and deployment process. We want the file to
    be treated as content and placed in the same folder as the app during deployment.
    The following screenshot shows the settings required to accomplish this. The panels
    to adjust these settings are in the **Properties** tab on the right-hand side
    of Xamarin Studio.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译和部署过程中处理文件时，必须设置几个文件属性，以确定如何处理文件。我们希望文件被视为内容，并在部署时放置在与应用相同的文件夹中。以下截图显示了完成此操作所需的设置。调整这些设置的选项卡位于
    Xamarin Studio 右侧的 **属性** 选项卡上。
- en: '![Adding a JSON-formatted file](img/0838OT_04_10.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![添加 JSON 格式的文件](img/0838OT_04_10.jpg)'
- en: This is not an ideal location for apps to store their data for a production
    distribution, but will work for our purpose in this chapter. In [Chapter 5](ch05.html
    "Chapter 5. Developing Your First Android App with Xamarin.Android"), *Developing
    Your First Android App with Xamarin.Android*, we will build a more robust storage
    mechanism when we discuss sharing code between iOS and Android apps.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是应用程序在生产分发中存储数据的理想位置，但在这个章节中可以达到我们的目的。在[第 5 章](ch05.html "第 5 章。使用 Xamarin.Android
    开发您的第一个 Android 应用")，*使用 Xamarin.Android 开发您的第一个 Android 应用*中，当我们讨论在 iOS 和 Android
    应用之间共享代码时，我们将构建一个更健壮的存储机制。
- en: Loading objects from a JSON-formatted file
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 JSON 格式的文件中加载对象
- en: Now, we need to add the logic to load data from the file to a list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加将数据从文件加载到列表中的逻辑。
- en: 'To load objects from a file, perform the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要从文件加载对象，执行以下步骤：
- en: 'As you recall, when our app was generated, the `UITableViewSource` file placed
    in `MasterViewController.cs` used a `List<object>` object to populate the list.
    We need to convert this to `List<NationalPark>` `Parks`, as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所忆，当我们的应用生成时，放置在 `MasterViewController.cs` 中的 `UITableViewSource` 文件使用 `List<object>`
    对象来填充列表。我们需要将其转换为 `List<NationalPark>` 的 `Parks`，如下所示：
- en: '[PRE1]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that we do not instantiate the `Parks` list; Json.NET will do this for
    us when we deserialize the JSON string.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们不需要实例化 `Parks` 列表；Json.NET 将在我们反序列化 JSON 字符串时为我们完成这项工作。
- en: 'We also need to convert the `Objects` property defined on `DataSource` to the
    following:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要将 `DataSource` 上定义的 `Objects` 属性转换为以下内容：
- en: '[PRE2]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the `using` clauses for `System.IO` and `Newtonsoft.Json` in preparation
    to add the load and deserialize steps:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加加载和反序列化步骤之前，添加 `System.IO` 和 `Newtonsoft.Json` 的 `using` 语句。
- en: '[PRE3]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The JSON file will be placed in the `app` folder; the `Environment.CurrentDirectory`
    property gives us the path to this location. Loading objects from this file requires
    two basic steps. The first step is to read the text into a string with `File.ReadAllText()`.
    The second step is to deserialize the objects into a list using `JsonConvert.DeserializeObject<>()`.
    The following code sample demonstrates what needs to be placed in the constructor
    of the `DataSource` class:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSON 文件将放置在 `app` 文件夹中；`Environment.CurrentDirectory` 属性为我们提供了到这个位置的路径。从该文件加载对象需要两个基本步骤。第一步是使用
    `File.ReadAllText()` 将文本读取到字符串中。第二步是使用 `JsonConvert.DeserializeObject<>()` 将对象反序列化到列表中。以下代码示例演示了需要在
    `DataSource` 类的构造函数中放置的内容：
- en: '[PRE4]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Saving objects to a JSON-formatted file
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将对象保存到 JSON 格式的文件
- en: 'Saving objects to a JSON-formatted file is just as simple as loading them.
    Simply call `JsonConvert.SerializeObject()` to create a JSON representation of
    the object(s) in a string and write the resulting string to a text file using
    `File.WriteAllText()`. The following code demonstrates what is needed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象保存到 JSON 格式的文件与加载它们一样简单。只需调用 `JsonConvert.SerializeObject()` 创建对象（s）的 JSON
    表示形式并将其写入到文本文件中，使用 `File.WriteAllText()`。以下代码演示了需要的内容：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will use this logic in the upcoming section titled *Implementing the Done
    Clicked event handler*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中，标题为 *实现 Done Clicked 事件处理程序* 中使用这个逻辑。
- en: Running the app
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用
- en: 'We are now ready to take a look at some of our work. Run the app and notice
    the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以查看一些我们的工作了。运行应用并注意以下内容：
- en: '`MasterViewController` is populated with information from `NationalParks.json`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MasterViewController` 使用 `NationalParks.json` 中的信息填充'
- en: Selecting a park displays `DetailViewController` populated with the name of
    the park
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个公园将显示填充有公园名称的`DetailViewController`
- en: Clicking on the **Add** button from `MasterViewController` adds a new park with
    the name **New Park**
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击`MasterViewController`中的**添加**按钮，可以添加一个名为**新公园**的新公园。
- en: Enhancing the UI
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强UI
- en: 'We will now turn our attention to create a more robust UI that will support
    listing items, view item details, and edit new and existing items. This is a common
    pattern for mobile apps and we already have about 75 percent of what we need.
    We need to make the following additions:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将注意力转向创建一个更健壮的UI，它将支持列出项目、查看项目详情以及编辑新的和现有项目。这是移动应用中常见的模式，我们已经有大约75%的需求。我们需要进行以下添加：
- en: Add a new view controller named `EditViewController` that can be used to edit
    new or existing national parks.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`EditViewController`的新视图控制器，它可以用来编辑新的或现有的国家公园。
- en: Change the **Add** button on `MasterViewController` to open a new national park
    entry in `EditViewController`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MasterViewController`中的**添加**按钮更改为在`EditViewController`中打开一个新的国家公园条目。
- en: Add fields to `DetailViewController` that will display all the properties of
    a national park and an **Edit** button that will navigate to `EditViewController`
    to edit the current item.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`DetailViewController`添加字段，用于显示国家公园的所有属性和一个**编辑**按钮，该按钮将导航到`EditViewController`以编辑当前项。
- en: 'As we discussed in [Chapter 2](ch02.html "Chapter 2. Demystifying Xamarin.iOS"),
    *Demystifying Xamarin.iOS*, we have two options to edit storyboards: Xcode Interface
    Builder and the Xamarin.iOS Designer. Either of these tools can be used based
    on preference. Within Xamarin Studio, you can choose which tool to launch by selecting
    a storyboard file, right-click on it and select **Open With**. The following screenshot
    shows the storyboard context menu:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.html "第2章。揭秘Xamarin.iOS")中讨论的，*揭秘Xamarin.iOS*，我们有两种编辑故事板的方法：Xcode界面构建器和Xamarin.iOS设计器。可以根据个人喜好选择使用任何一种工具。在Xamarin
    Studio中，你可以通过选择一个故事板文件，右键单击它并选择**打开方式**来选择要启动的工具。以下截图显示了故事板上下文菜单：
- en: '![Enhancing the UI](img/0838OT_04_15.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![增强UI](img/0838OT_04_15.jpg)'
- en: 'The rest of this chapter will be based on using the Xamarin.iOS Designer. If
    you choose to work with Xcode Interface Builder, you need to be aware that when
    changes are made in Xcode, there is a synchronization process that takes place
    when the Xamarin Studio becomes active again. This process synchronizes changes
    made in Xcode with C# designer class files and creates appropriate outlets and
    actions. The following screenshot shows Xamarin Studio''s status bar during synchronization:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将基于使用Xamarin.iOS设计器。如果你选择使用Xcode界面构建器，你需要知道，当Xamarin Studio再次激活时，会进行一个同步过程。这个过程将Xcode中的更改与C#设计器类文件同步，并创建适当的输出和动作。以下截图显示了同步期间Xamarin
    Studio的状态栏：
- en: '![Enhancing the UI](img/0838OT_04_24.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![增强UI](img/0838OT_04_24.jpg)'
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you would like more guidance with Xamarin.iOS Designer or need a kick start
    or refresher course on using Xcode Interface Builder, the following links provide
    tutorials:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多关于Xamarin.iOS设计器的指导，或者需要Xcode界面构建器的入门或复习课程，以下链接提供了教程：
- en: Xamarin Tutorial for using Xamarin.iOS Designer available at [http://developer.xamarin.com/guides/ios/user_interface/designer/](http://developer.xamarin.com/guides/ios/user_interface/designer/)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在[http://developer.xamarin.com/guides/ios/user_interface/designer/](http://developer.xamarin.com/guides/ios/user_interface/designer/)找到的Xamarin教程，用于使用Xamarin.iOS设计器。
- en: Apple Tutorial for Xcode Interface Builder available at [https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/chapters/edit_user_interface.html](https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/chapters/edit_user_interface.html)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在[https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/chapters/edit_user_interface.html](https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/chapters/edit_user_interface.html)找到的Apple教程，用于Xcode界面构建器。
- en: Xamarin Tutorial for using Xcode Interface Builder available at [http://docs.xamarin.com/guides/ios/user_interface/tables/part_5_-_using_xcode,_interface_builder,_and_storyboards/](http://docs.xamarin.com/guides/ios/user_interface/tables/part_5_-_using_xcode,_interface_builder,_and_storyboards/)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在[http://docs.xamarin.com/guides/ios/user_interface/tables/part_5_-_using_xcode,_interface_builder,_and_storyboards/](http://docs.xamarin.com/guides/ios/user_interface/tables/part_5_-_using_xcode,_interface_builder,_and_storyboards/)找到的Xamarin教程，用于使用Xcode界面构建器。
- en: Touring the Xamarin.iOS Designer
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索Xamarin.iOS设计器
- en: 'Xamarin.iOS Designer provides a full set of tools to create and edit storyboard
    files. As this might be your first time using the tool, we will devote a few minutes
    to get familiar with it. To do so, follow the given steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS Designer 提供了一套完整的工具来创建和编辑故事板文件。由于这可能是您第一次使用此工具，我们将花几分钟时间熟悉它。为此，请按照以下步骤操作：
- en: Double-click on `MainStoryboard.storyboard` to open the storyboard in Xamarin.iOS
    Designer. You will see `NavigationController`, `MasterViewController`, `DetailViewController`,
    and segues that connect everything, as shown in following screenshot:![Touring
    the Xamarin.iOS Designer](img/0838OT_04_21.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `MainStoryboard.storyboard` 以在 Xamarin.iOS Designer 中打开故事板。您将看到 `NavigationController`、`MasterViewController`、`DetailViewController`
    以及连接一切的任务，如下面的截图所示：![浏览 Xamarin.iOS Designer](img/0838OT_04_21.jpg)
- en: Note the **Toolbox** pad in the lower right-hand corner of Xamarin Studio. It
    contains all the items that can be used within a storyboard. You can search for
    items using the search field. The **Toolbox** pad is shown in the following screenshot:![Touring
    the Xamarin.iOS Designer](img/0838OT_04_16.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意位于 Xamarin Studio 右下角的 **工具箱** 选项卡。它包含可以在故事板中使用的所有项目。您可以使用搜索字段搜索项目。**工具箱**
    选项卡如下面的截图所示：![浏览 Xamarin.iOS Designer](img/0838OT_04_16.jpg)
- en: Note the **Document Outline** pad in the upper-right hand corner of Xamarin
    Studio. This view depicts the content of the storyboard in a hierarchical form
    that you can use to drill down to view increasing levels of detail. The **Document
    Outline** pad is very helpful to view and select specific elements in a storyboard,
    as shown in the following screenshot:![Touring the Xamarin.iOS Designer](img/0838OT_04_17.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意位于 Xamarin Studio 右上角的 **文档大纲** 选项卡。此视图以分层形式显示故事板的内容，您可以使用它来查看更详细的级别。**文档大纲**
    选项卡对于查看和选择故事板中的特定元素非常有帮助，如下面的截图所示：![浏览 Xamarin.iOS Designer](img/0838OT_04_17.jpg)
- en: Note the **Properties** pad in the upper-right hand corner of Xamarin Studio;
    you can access it by clicking on the tab labeled **Properties**. The **Properties**
    pad allows you to edit properties for the currently selected item. Entering a
    name for a control in the **Widget** section will automatically create an outlet
    and entering names in the **Events** section will automatically create an action.
    The **Properties** pad is shown in the following screenshot:![Touring the Xamarin.iOS
    Designer](img/0838OT_04_22.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意位于 Xamarin Studio 右上角的 **属性** 选项卡；您可以通过点击标签为 **属性** 的选项卡来访问它。**属性** 选项卡允许您编辑当前选中项的属性。在
    **小部件** 部分输入控件的名称将自动创建一个出口，在 **事件** 部分输入名称将自动创建一个动作。**属性** 选项卡如下面的截图所示：![浏览 Xamarin.iOS
    Designer](img/0838OT_04_22.jpg)
- en: Note the top of the designer that contains a number of controls to adjust options,
    such as iOS version, device size, device orientation, and level of zoom. There
    are also controls to establish constraints, as shown in the following screenshot:![Touring
    the Xamarin.iOS Designer](img/0838OT_04_23.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意设计师顶部的部分，其中包含调整选项的多个控件，例如 iOS 版本、设备大小、设备方向和缩放级别。还有用于建立约束的控件，如下面的截图所示：![浏览
    Xamarin.iOS Designer](img/0838OT_04_23.jpg)
- en: 'Selecting items in the designer can be a little tricky, particularly when selecting
    a view controller. If you click in the middle of the view controller, the view
    will be selected and not the view controller. There are three different ways to
    select a view controller:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计师中选择项目可能有点棘手，尤其是在选择视图控制器时。如果您在视图控制器的中间点击，将选择视图而不是视图控制器。有三种不同的方法来选择视图控制器：
- en: Right-click in the middle of the view controller and navigate to **View Controller**
    | **Select**, as shown in the following screenshot:![Touring the Xamarin.iOS Designer](img/0838OT_04_25.jpg)
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图控制器的中间右键单击并导航到 **视图控制器** | **选择**，如下面的截图所示：![浏览 Xamarin.iOS Designer](img/0838OT_04_25.jpg)
- en: Click on the bar at the bottom of the view controller, as shown in the following
    screenshot:![Touring the Xamarin.iOS Designer](img/0838OT_04_26.jpg)
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击视图控制器底部的栏，如下面的截图所示：![浏览 Xamarin.iOS Designer](img/0838OT_04_26.jpg)
- en: Select the view controller in the **Document Outline** pad
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **文档大纲** 选项卡中选择视图控制器
- en: Adding EditViewController and segues
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 EditViewController 和 segue
- en: With a basic understanding of Xamarin.iOS Designer, we are now ready to add
    a new view controller and segues.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在对 Xamarin.iOS Designer 有基本了解之后，我们现在可以添加一个新的视图控制器和 segue。
- en: 'To add `EditViewController` and segues, perform the following steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 `EditViewController` 和 segue，请执行以下步骤：
- en: Double-click on `MainStoryboard.storyboard` to open the storyboard in Xamarin.iOS
    Designer. You will see `MasterViewController` and `DetailViewController` in the
    file with a segue between them.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`MainStoryboard.storyboard`以在Xamarin.iOS设计器中打开故事板。您将在文件中看到`MasterViewController`和`DetailViewController`，它们之间有一个转换。
- en: Create a new `UIViewController` by selecting the **View Controller** item from
    the **Toolbox** pad and drag-and-drop it on the designer view.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从**工具箱**垫中选择**视图控制器**项并拖放到设计视图中创建一个新的`UIViewController`。
- en: Name the new view controller `EditViewController` by clicking on the bar at
    the bottom to select it, switch to the **Properties** pad, and enter `EditViewController`
    for the **Class** field. The following screenshot depicts the **Properties** pad:![Adding
    EditViewController and segues](img/0838OT_04_20.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击底部栏以选择它，切换到**属性**垫，并在**类**字段中输入`EditViewController`来命名新的视图控制器。以下截图显示了**属性**垫：![添加EditViewController和转换](img/0838OT_04_20.jpg)
- en: Add a Bar Button Item to the right-hand side of the Navigation Item on `DetailViewController`
    and set the **Identifier** button to **Edit** on the **Widget** section of the
    **Properties** pad.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DetailViewController`的导航项右侧添加一个栏按钮项，并将**标识符**按钮在**属性**垫的**小部件**部分设置为**编辑**。
- en: Add a push segue from the **Edit** button on `DetailViewController` to the new
    controller, `EditViewController`. Press and hold the *Ctrl* key, click and hold
    the **Edit** button, drag it to the bar at the bottom of `EditViewController`,
    let go of the mouse, choose **Push** and enter `editFromDetail` for the **Identifier**
    option on the **Widget** section of the **Properties** pad.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`DetailViewController`的**编辑**按钮到新控制器`EditViewController`添加一个推送转换。按住*Ctrl*键，点击并按住**编辑**按钮，将其拖到`EditViewController`底部的栏上，释放鼠标，在**属性**垫的**小部件**部分的**标识符**选项中选择**推送**，并输入`editFromDetail`。
- en: Add a Bar Button Item to the right-hand side of the Navigation Item on `MasterViewController`
    and set the **Identifier** button to **Add**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MasterViewController`的导航项右侧添加一个栏按钮项，并将**标识符**按钮设置为**添加**。
- en: Add a push segue from the **Add** button on `MasterViewController` to the new
    controller, `EditViewController`. Press and hold the *Ctrl* key, click and hold
    the **Add** button, drag it to the bar at the bottom of `EditViewController`,
    let go of the mouse, choose **Push**, and enter `editFromMaster` for the **Identifier**
    option on the **Widget** section of the **Properties** pad.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`MasterViewController`的**添加**按钮到新控制器`EditViewController`添加一个推送转换。按住*Ctrl*键，点击并按住**添加**按钮，将其拖到`EditViewController`底部的栏上，释放鼠标，在**属性**垫的**小部件**部分的**标识符**选项中选择**推送**，并输入`editFromMaster`。
- en: Add a Bar Button Item to the right-hand side of the Navigation Item on `EditViewController`
    and set the **Identifier** option to **Done**. Name the button `DoneButton`. Naming
    the button will create an outlet that can later be used as a reference to assign
    a traditional .NET event handler.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditViewController`的导航项右侧添加一个栏按钮项，并将**标识符**选项设置为**完成**。按钮命名为`DoneButton`。命名按钮将创建一个出口，稍后可以用作分配传统.NET事件处理器的引用。
- en: Add a label, `UILabel`, to the center of `EditViewController`. This will be
    used temporarily to display the name of an item, while we test and debug the navigation
    of the app. Name this `UILabel` instance as `editDescriptionLabel`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditViewController`的中心添加一个标签`UILabel`。这将被临时用来显示项目的名称，在我们测试和调试应用的导航时使用。将此`UILabel`实例命名为`editDescriptionLabel`。
- en: Add a `UIButton` instance to `EditViewController` and set the **Title** option
    to **Delete**. Add an action named `DeleteClicked` to the **Touch Down** event
    in the **Events** section of the **Properties** pad. Creating an action will generate
    a partial method that we can later complete with logic to implement the `DeleteClicked`
    event handler.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditViewController`中添加一个`UIButton`实例，并将**标题**选项设置为**删除**。在**属性**垫的**事件**部分的**触摸**事件中添加一个名为`DeleteClicked`的操作。创建操作将生成一个部分方法，我们稍后可以用逻辑来完成以实现`DeleteClicked`事件处理器。
- en: Save all of the changes made.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有做出的更改。
- en: 'Now, we need to write some code to tie everything together. Let''s start by
    looking at some of the code that was generated as a result of our work in Xamarin.iOS
    Designer. You will find two files that have been added for `EditViewController`,
    a designer file named `EditViewController.designer.cs` nested under a nondesigner
    file named `EditViewController.cs`. Double-click on the designer class to view
    the contents, as shown in the following code snippet:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要编写一些代码来将所有这些内容串联起来。让我们先看看由于我们在 Xamarin.iOS Designer 中的工作而生成的一些代码。你会找到为
    `EditViewController` 添加的两个文件，一个名为 `EditViewController.designer.cs` 的设计器文件，嵌套在一个非设计器文件
    `EditViewController.cs` 之下。双击设计器类以查看内容，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that `EditViewController` is a partial class; the two outlets and the actions
    were generated based on the specifications we made.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`EditViewController` 是一个部分类；这两个输出和动作是基于我们制定的规格生成的。
- en: Implementing the DoneClicked event handler
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现DoneClicked事件处理器
- en: For the **Done** button, we created an outlet so we will have a reference to
    the object that can be used to assign a .NET event handler at runtime. When **Done**
    is clicked on, we need to do a few things. First, check whether we are dealing
    with a new object and add it to the `_parks` collection. If so, then we need to
    save the `_parks` collection to `NationalParks.json`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **完成** 按钮，我们创建了一个输出，这样我们就可以在运行时将 .NET 事件处理器分配给该对象。当点击 **完成** 时，我们需要做一些事情。首先，检查我们是否处理的是新对象并将其添加到
    `_parks` 集合中。如果是这样，那么我们需要将 `_parks` 集合保存到 `NationalParks.json`。
- en: 'To implement the **Done** button, perform the following steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现 **完成** 按钮，请执行以下步骤：
- en: 'Create a method to save changes to `NationalParks.json`, as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个保存更改到 `NationalParks.json` 的方法，如下所示：
- en: '[PRE7]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a .NET event handler named `DoneClicked` and add logic to add `_park`
    to the `_parks` collection. If it''s a new park, call the `SaveParks()` method
    to save updates to `NationalParks.json`, and to return to the previous view controller,
    use the following code snippet:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `DoneClicked` 的 .NET 事件处理器，并添加逻辑将 `_park` 添加到 `_parks` 集合中。如果是新公园，调用
    `SaveParks()` 方法将更新保存到 `NationalParks.json`，并使用以下代码片段返回到上一个视图控制器：
- en: '[PRE8]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Implementing the DeleteClicked action
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现DeleteClicked动作
- en: We created an action for the **Delete** button, which caused a partial method
    to be created in the designer class. We now need to create an implementation for
    the partial method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 **删除** 按钮创建了一个动作，这导致在设计师类中创建了一个部分方法。我们现在需要为部分方法创建一个实现。
- en: 'To implement the **Delete** action all you need to do is add a `partial` method
    implementation for `DeleteClicked` that removes `_park` from the `parks` collection
    and saves the change to the `NationalParks.json` file, which will then return
    to the `MasterViewController`. This can be done by:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现 **删除** 动作，你只需要为 `DeleteClicked` 添加一个 `partial` 方法实现，从 `parks` 集合中移除 `_park`
    并将更改保存到 `NationalParks.json` 文件中，然后返回到 `MasterViewController`。这可以通过以下方式完成：
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The two approaches demonstrated to implement event handlers accomplish essentially
    the same thing without having a clear advantage over the other. As we don't have
    the event handler assignment in `ViewDidLoad()` for the action, it's slightly
    less coded. It really comes down to which method you prefer and become most comfortable
    with.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 展示的两种实现事件处理器的方案基本上完成了相同的事情，没有明显的优势。由于我们没有在 `ViewDidLoad()` 中为动作进行事件处理器分配，所以代码稍微少一些。这实际上取决于你更喜欢哪种方法，并感到最舒适。
- en: Passing data
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递数据
- en: 'All iOS apps have a need to navigate between views and pass data. As we are
    using storyboards and segues for the UI, most of the work related to navigation
    is done for us. However, we need to pass data between the views. There are two
    parts to accomplish this: define a way that a view controller will accept data
    and use this mechanism from the initiating view controller. As far as accepting
    data is concerned, this can be accomplished with the use of simple properties
    on the view controller, or by defining a method that accepts the data and saves
    it to private variables. We will go with defining a method to accept navigation
    data, which is also the approach the code that was generated for us uses.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 iOS 应用都需要在视图之间导航并传递数据。由于我们使用故事板和转场来处理 UI，与导航相关的大部分工作都由我们完成。然而，我们需要在视图之间传递数据。这需要两个部分来完成：定义一个视图控制器将接受数据的方式，并从发起视图控制器使用此机制。就接受数据而言，这可以通过在视图控制器上使用简单的属性或定义一个接受数据并将其保存到私有变量的方法来完成。我们将采用定义一个接受导航数据的方法，这也是为我们生成的代码所采用的方法。
- en: 'To complete the logic to accept navigation data, perform the following steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成接受导航数据的逻辑，执行以下步骤：
- en: Open `DetailViewController` and locate the `SetDetailItem` method.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `DetailViewController` 并定位 `SetDetailItem` 方法。
- en: Let's start by changing the name to be a little more meaningful. Select the
    `SetDetailItem` text in the editor, right-click and navigate to **Refactor** |
    **Rename**. Enter `SetNavData` and click on **OK**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先从更改名称开始，使其更具意义。在编辑器中选择 `SetDetailItem` 文本，右键单击并导航到 **重构** | **重命名**。输入 `SetNavData`
    并点击 **确定**。
- en: Let's also rename `ConfigureView ()` to `ToUI()` using the same method.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也使用相同的方法将 `ConfigureView ()` 重命名为 `ToUI()`。
- en: 'Change the `SetNavData()` method so that it accepts a list of `NationalPark`
    items as well as the single park that should be displayed and saves these parameters
    to a set of private variables. Also, remove the call to `ToUI()`; we will move
    this to a more appropriate place in the next step, as shown in the following code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `SetNavData()` 方法，使其接受一个 `NationalPark` 项目列表以及应该显示的单个公园，并将这些参数保存到一组私有变量中。同时，移除对
    `ToUI()` 的调用；我们将在下一步将此移动到更合适的位置，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Override `ViewWillAppear()` to call `ToUI()`, as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写 `ViewWillAppear()` 方法以调用 `ToUI()`，如下所示：
- en: '[PRE11]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Update `ToUI()` so that it populates `UILabel` using the private `_park` variable,
    as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `ToUI()` 方法，使其使用私有 `_park` 变量填充 `UILabel`，如下所示：
- en: '[PRE12]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, add `SetNavData()` and `ToUI()` methods to `EditViewController` that has
    the same function as `DetailViewController`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将 `SetNavData()` 和 `ToUI()` 方法添加到与 `DetailViewController` 具有相同功能的 `EditViewController`
    中。
- en: Now that we have taken care of receiving navigation data, we turn our attention
    to passing data. When using segues, iOS view controller has the `PrepareForSegue()`
    method that can be overridden to prepare the target view controller for display.
    We need to override `PrepareForSegue()` in both `MasterViewController` and `DetailViewController`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经处理了接收导航数据，我们将注意力转向传递数据。当使用 segue 时，iOS 视图控制器有一个可以重写的 `PrepareForSegue()`
    方法，用于准备目标视图控制器以进行显示。我们需要在 `MasterViewController` 和 `DetailViewController` 中重写
    `PrepareForSegue()`。
- en: 'To complete the logic to pass navigation data, perform the following steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成传递导航数据的逻辑，执行以下步骤：
- en: Open `MasterViewController` and locate the existing `PrepareForSegue()` method.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MasterViewController` 并定位现有的 `PrepareForSegue()` 方法。
- en: '`MasterViewController` actually has two segues: the original segue that navigates
    to `DetailViewController` and the new one we added that navigates to `EditViewController`.
    The `PrepareForSegue()` method provides a segue parameter that has an `Identifier`
    property that can be used to determine which navigation path is being taken. Change
    the code in `PrepareForSegue()` so that it calls `SetNavData()` on the appropriate
    view controller based on the segue identifier, as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MasterViewController` 实际上有两个 segue：原始的 segue 用于导航到 `DetailViewController`，以及我们添加的用于导航到
    `EditViewController` 的新 segue。`PrepareForSegue()` 方法提供了一个具有 `Identifier` 属性的 segue
    参数，可以用来确定正在采取哪个导航路径。修改 `PrepareForSegue()` 中的代码，使其根据 segue 标识符在适当的视图控制器上调用 `SetNavData()`，如下所示：'
- en: '[PRE13]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, open `DetailViewController` and create an override for `PrepareForSegue()`
    that passes navigation data to `EditViewController`, as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `DetailViewController` 并为 `PrepareForSegue()` 创建一个覆盖，以便将导航数据传递给 `EditViewController`，如下所示：
- en: '[PRE14]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the app
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用
- en: 'We have made a lot of changes and are now ready to run the app to test the
    basic navigation. Start the app and test navigation to the various views; observe
    the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经做了很多修改，现在可以运行应用来测试基本导航。启动应用并测试导航到各个视图；观察以下内容：
- en: When you click the **+** (add) button on `MasterViewController`, a new national
    park is displayed in `EditViewController`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在 `MasterViewController` 上点击 **+**（添加）按钮时，在 `EditViewController` 中将显示一个新的国家公园。
- en: When you click the **Edit** button on `DetailViewController`, the app navigates
    to `EditViewController` that shows the current park.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在 `DetailViewController` 上点击 **编辑** 按钮，应用将导航到显示当前公园的 `EditViewController`。
- en: When you click on **Done** on `EditViewController`, it will take you to the
    previous view controller, either `MasterViewController` or `DetailViewController`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在 `EditViewController` 上点击 **完成** 按钮，它将带你回到之前的视图控制器，无论是 `MasterViewController`
    还是 `DetailViewController`。
- en: When you click on **Delete** on `EditViewController`, it will take you to `MasterViewController`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在 `EditViewController` 上点击 **删除** 按钮，它将带你到 `MasterViewController`。
- en: 'The following screenshots depict what you should see:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了你应该看到的内容：
- en: '![Running the app](img/0838OT_04_11.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用](img/0838OT_04_11.jpg)'
- en: Finishing the sample app
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成示例应用
- en: The view controllers and navigation are now in place. All we need now is to
    add some addition controls to view and edit information and a little logic.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 视图控制器和导航现在已就位。我们现在需要添加一些额外的控件来查看和编辑信息，以及一点逻辑。
- en: Finishing DetailViewController
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成DetailViewController
- en: To finish `DetailViewController`, we need a set of `UILabel` controls that can
    be used to display the properties of a park, and add buttons that can initiate
    actions to view photos or receive directions.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成`DetailViewController`，我们需要一组`UILabel`控件，用于显示公园的属性，并添加可以启动查看照片或接收方向的按钮。
- en: 'To finish `DetailViewController`, perform the following steps:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成`DetailViewController`，执行以下步骤：
- en: Add a `UIScrollView` onto the View for `DetailViewController`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DetailViewController`的视图中添加一个`UIScrollView`。
- en: Add `UILabel` controls for each property defined on `NationalPark` except for
    the `Id` property. Also add `UILabel` controls that can be used as labels for
    the properties. Use the screen mockups from the *The sample national parks app*
    section as a guide to lay out the controls.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`NationalPark`上定义的每个属性（除了`Id`属性）添加`UILabel`控件。同时添加可以用于属性标签的`UILabel`控件。使用*示例国家公园应用*部分中的屏幕截图作为布局控件的指南。
- en: Enter a name for each `UILabel` control that will be used to display park properties
    so that outlets can be created.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个将用于显示公园属性的`UILabel`控件输入一个名称，以便创建输出。
- en: 'Update the `ToUI()` method so that the `UILabel` controls are populated with
    data from the park, as follows:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`ToUI()`方法，以便`UILabel`控件填充来自公园的数据，如下所示：
- en: '[PRE15]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Add a `UIButton` instance with a title of photos with an action named `PhotoClicked`
    in the `Touch Down` event.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Touch Down`事件中添加一个标题为“照片”的`UIButton`实例，并命名为`PhotoClicked`。
- en: 'Add an implementation for the `PhotoClicked` action, which opens a URL to view
    photos on [www.bing.com](http://www.bing.com) that uses the park''s name as the
    search parameter:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`PhotoClicked`操作添加实现，该操作打开一个URL以查看在[www.bing.com](http://www.bing.com)上使用公园名称作为搜索参数的照片：
- en: '[PRE16]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add a `UIButton` instance with a title of directions with an action named `DirectionsClicked`
    in the `Touch Down` event.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Touch Down`事件中添加一个标题为“方向”的`UIButton`实例，并命名为`DirectionsClicked`。
- en: 'Add an implementation for the `DirectionsClicked` action, which opens a URL
    to receive directions to a park that uses the park''s latitude and longitude coordinates:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`DirectionsClicked`操作添加实现，该操作打开一个URL以接收公园的经纬度坐标的路线：
- en: '[PRE17]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Add appropriate constraints to `UIScrollView` and and `UILables` so that scrolling
    and layout works as desired in the landscape and portrait modes. Take a look at
    the example for more clarity.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`UIScrollView`和`UILabel`添加适当的约束，以便在横屏和竖屏模式下滚动和布局按预期工作。查看示例以获得更多清晰度。
- en: Finishing EditViewController
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成EditViewController
- en: To finish `EditViewController`, we need to add labels and edit controls in order
    to edit the park data. We also need to do some data conversion and save the updates.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成`EditViewController`，我们需要添加标签和编辑控件以编辑公园数据。我们还需要进行一些数据转换并保存更新。
- en: 'To finish `EditViewController`, perform the following steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成`EditViewController`，执行以下步骤：
- en: Add a `UIScrollView` instance on the View for `EditViewController`.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditViewController`的视图中添加一个`UIScrollView`实例。
- en: Add controls to the `EditViewController` class along with the corresponding
    outlets to allow editing of each property on the `NationalPark` entity. The `UITextField`
    controls can be used for everything except the description property, which is
    better suited to a `UITextView` control. Also add `UITextLabel` controls to label
    properties of the park. You can again use the screen mockups from the *The sample
    national parks app* section as a guide.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditViewController`类中添加控件以及相应的输出，以便编辑`NationalPark`实体上的每个属性。`UITextField`控件可用于除描述属性之外的所有内容，该属性更适合使用`UITextView`控件。同时添加`UITextLabel`控件来标记公园的属性。您还可以再次使用*示例国家公园应用*部分中的屏幕截图作为指南。
- en: 'Update the `ToUI()` method to account for the new fields:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`ToUI()`方法以考虑新字段：
- en: '[PRE18]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a new method that moves data from the UI controls to the entity class
    prior to saving it, as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的方法，在保存之前将数据从UI控件移动到实体类，如下所示：
- en: '[PRE19]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update the `DoneClicked()` action to call `ToPark()` in order to move values
    to the park object prior to saving changes to `NationalParks.json`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`DoneClicked()`操作，以便在将更改保存到`NationalParks.json`之前调用`ToPark()`，将值移动到公园对象：
- en: '[PRE20]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Add appropriate constraints to `UIScrollView` and `UITextFields` so that scrolling
    and layout works as desired in landscape and portrait modes. Take a look at the
    reference solution for more clarity.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `UIScrollView` 和 `UITextFields` 添加适当的约束，以便在横屏和竖屏模式下滚动和布局按预期工作。查看参考解决方案以获得更多清晰度。
- en: Add logic to scroll the active `UITextField` into view when the keyboard is
    displayed. There are several methods of accomplishing this. Refer to the example
    for reference solution.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当键盘显示时，添加逻辑以将活动 `UITextField` 滚动到视图中。有几种实现此功能的方法。请参考示例以获取解决方案。
- en: Running the app
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行应用
- en: 'Okay, we now have a fairly functional app. Run the app in the simulator and
    test each screen and navigation path. The following screenshots show the final
    result of the three view controllers:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在有一个功能相当完善的应用。在模拟器中运行应用并测试每个屏幕和导航路径。以下截图显示了三个视图控制器最终的结果：
- en: '![Running the app](img/0838OT_04_12.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用](img/0838OT_04_12.jpg)'
- en: MonoTouch.Dialog
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MonoTouch.Dialog
- en: '**MonoTouch.Dialog** (**MT.D**) is a framework for Xamarin.iOS that provides
    a declarative approach to develop the user interface and eliminates writing a
    lot of the tedious code. MT.D is based on using `UITableView` controls to provide
    navigation and allow users to interact with data.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**MonoTouch.Dialog**（**MT.D**）是用于 Xamarin.iOS 的一个框架，它提供了一种声明式的方法来开发用户界面，并消除了编写大量繁琐代码的需要。MT.D
    基于使用 `UITableView` 控件来提供导航并允许用户与数据交互。'
- en: More information about MT.D can be found at [http://docs.xamarin.com/guides/ios/user_interface/monotouch.dialog/](http://docs.xamarin.com/guides/ios/user_interface/monotouch.dialog/).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 MT.D 的信息可以在 [http://docs.xamarin.com/guides/ios/user_interface/monotouch.dialog/](http://docs.xamarin.com/guides/ios/user_interface/monotouch.dialog/)
    找到。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a sample Xamarin.iOS app and demonstrated the concepts
    that need to be understood to work with the Xamarin.iOS platform. While we did
    not demonstrate all of the features that we can use in an iOS app, you should
    now feel comfortable with how to access these features.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个示例 Xamarin.iOS 应用并展示了在使用 Xamarin.iOS 平台时需要理解的概念。虽然我们没有展示我们可以在 iOS
    应用中使用到的所有功能，但现在你应该对如何访问这些功能感到舒适。
- en: In the next chapter, we will build the same sample app for Android.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为 Android 构建相同的示例应用。
