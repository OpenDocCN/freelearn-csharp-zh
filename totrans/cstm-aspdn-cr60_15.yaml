- en: '*Chapter 15*: Working with Caches'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will have a look into cache techniques. ASP.NET Core provides
    multiple ways to cache and we will learn to use and to customize them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The need for caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP-based caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching using ResponseCachingMiddleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predefining caching strategies using cache profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching specific areas using CacheTagHelper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching Manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics in this chapter refer to the MVC layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – ASP.NET Core architecture](img/Figure_15.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal, and change to
    your working directory. Use the following command to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in Visual Studio by double-clicking the project file
    or, in VS Code, by typing the following command in the already open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All of the code samples in this chapter can be found in the GitHub repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter15).
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need caching?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caching speeds up performance, by storing the results in memory or in a distributed
    cache like a fast Redis database, you can also store cached data in files if it
    makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: A distributed cache is needed in case you run multiple instances of an application
    to scale for availability of your application. The instances will run on multiple
    Docker containers, in a Kubernetes cluster or just on more than one Azure App
    Services. In that case, the instances should share a cache.
  prefs: []
  type: TYPE_NORMAL
- en: Most application caches are in-memory caches that store data for a short period
    of time. This is good for most scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Also, browser do cache the websites or the web applications output. The browsers
    usually store the entire result in files. As an ASP.NET developer you can control
    the browsers cache by adding HTTP headers that specify whether the browser should
    cache or not and that specify how long the cached item should be valid.
  prefs: []
  type: TYPE_NORMAL
- en: A browser cache reduces the number of requests to the server. A cache handling
    in your code might reduce the number of database access or reduce the access to
    another time-consuming action.
  prefs: []
  type: TYPE_NORMAL
- en: Both client-side caches and server side caches are useful to increase the performance
    of your application. Let's have a detailed look at the client side cache.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP-based caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To control the browsers cache you can set a `Cache-Control` HTTP header. Usually,
    the `StaticFileMiddleware` doesn''t set a Cache-Control header. This means the
    clients are free to cache how they prefer. If you like to limit the cache time
    to just one day, you can do this by passing `StaticFileOptions` to the middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This sets the `Cache-Control` header to every static file that is requested
    before it gets sent to the client. The `Cache-Control` is set to public, which
    means it can be publicly cached on every client. The maximum age of the cache
    items should not be older than 86,400 seconds, which is one day.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the headers to the static file is just an example. You can set the header
    to every response that needs cache control. You can also disable the cache by
    setting the Cache-Control header to no-cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the `Cache-Control` header, see the following URL: https://datatracker.ietf.org/doc/html/rfc7234#section-5.2'
  prefs: []
  type: TYPE_NORMAL
- en: Also, the `Expires` header might be useful, to specify when the responded content
    get invalid and should get renewed from the server. See https://datatracker.ietf.org/doc/html/rfc7234#section-5.3
  prefs: []
  type: TYPE_NORMAL
- en: The `Vary` header specifies a criteria that tells the clients about cache variations.
    It checks for specific headers to be available. See https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.4
  prefs: []
  type: TYPE_NORMAL
- en: This controls the clients directly via the response object.
  prefs: []
  type: TYPE_NORMAL
- en: Caching using ResponseCachingMiddleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ResponseCachingMiddleware` caches the responses on the server side and
    creates responses based on the cached responses. The middleware respects the `Cache-Control`
    header in the same way as clients do. That means you are able to control the middleware
    by setting the specific headers as described in the previews section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get it working you need to add the `ResponseCachingMiddleware` to the Dependency
    Injection container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should use that middleware to the pipeline after the static files and
    routing got added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you added a CORS configuration, the `UseCors` method should be called before,
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: The `ResponseCachingMiddleware` gets affected by specific HTTP headers. For
    example, if the `Authentication` header is set the response doesn't get cached,
    same with the `Set-Cookie` header. It also only caches responses that result in
    a 200 OK result. Error pages and other status codes don't get cached.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the full list of criteria at this URL: https://docs.microsoft.com/en-us/aspnet/core/performance/caching/middleware?view=aspnetcore-6.0#http-headers-used-by-response-caching-middleware.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `ResponseCacheAttribute` on controller level, actions level or pages
    level you can set the right headers to control the `ResponseCachingMiddleware`
    by using `ResponseCacheAttribute`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This snippet sets the `Cache-Control` to public with max-age to one day, like
    the sample in the previews section.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is pretty powerful, you can also set Vary headers in different
    ways, as well as the indicator to not cache the output at all. Even a `CacheProfileName`
    can be set. We are going to have a look at cache profiles in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are properties you can set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Duration`: Time range in seconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Location`: The location where to store the cache: Client, Any, or none'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NoStore`: Disables the cache if it is set to true'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VaryByHeader`: A header value that varies the cache'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VaryByQueryKeys`: An array of query key names that varies the cache'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predefining caching strategies using cache profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can predefine caching strategies in a so-called cache profile to reuse them
    wherever you need. The `CacheProfile` type has the same properties as the `ResponseCache`
    attribute. To define cache profiles, you need to set options to the MVC services.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, the `AddControllersWithViews method` has an overload to configure
    the `MvcOptions`. Here, you can also add cache profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You might need to add a `using` statement to `Microsoft.AspNetCore.Mvc`.
  prefs: []
  type: TYPE_NORMAL
- en: This snippet adds two different cache profiles, the first one with a 30 second
    cache and the second one with a 60 second cache. Both profiles tell the cache
    to vary by the `"User-Agent"` header.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a profile, you can use the profile name in the response caching attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Instead of setting all the properties of `ResponseCacheAttribute`, you can just
    set `CacheProfileName`. Let's see how to use caches the declarative way.
  prefs: []
  type: TYPE_NORMAL
- en: Caching specific areas using CacheTagHelper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also cache specific areas of the view. In a scenario where you are not
    able to cache an entire view, you would be able to just cache a specific area
    by surrounding it with the `CacheTagHelper`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test that, add the following snippet to the `index.cshtml`, that you can
    find in the `/Views/Home/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This snippet contains two identical p-tags that write out the current time.
  prefs: []
  type: TYPE_NORMAL
- en: The second one is wrapped in a `CacheTagHelper` that has a sliding expiration
    of 7 seconds defined.
  prefs: []
  type: TYPE_NORMAL
- en: Start the application and see what happens. Navigate to the `Index` page and
    refresh the browser several times. You will see that only the first time will
    change while refreshing the page. The second one is cached and stays the same
    for 7 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 - Cached and uncached values ](img/Figure_15.2_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 - Cached and uncached values
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at what we should do if we need to cache more specifically
  prefs: []
  type: TYPE_NORMAL
- en: Caching Manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes it makes sense to cache specifically inside the C# code. For example,
    if you need to fetch data from an external source or database, it would save time
    and traffic if you cache the results and don't access the result every time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try it out by using two different ways to use create and access cache
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To try it out we will extend the `HomeController` a little bit. Start by injecting
    an instance of the `IMemoryCache` to the controller and store it in a field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Models` folder, create a file called `Person.cs` and place the following
    lines in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to add two super complex methods that do some magic for us. Actually,
    these methods just create fake data and aren''t really complex:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first method uses `GenFu` that is also used in previous chapters to create
    a list of `Person` and fill them with random but valid data. The second method
    creates a `Dictionary` of 10 items that also contains random data. The random
    data make sense to show that the data are actually cached. If the data don't change
    on the user interface, the data came out of the cache.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type the following command in the project folder to install `GenFu`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines at the beginning of the index action to store the data
    of the first method in the cache or to load the data out of the cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will at first try to load the data out of the cache by using the `ExternalSource`
    cache key. If the cached data doesn't exist, you need to load them from the original
    source and store them in the cache using the `Set` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The other way to create and load cached data is to use the `GetOrCreate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It works the same way but is pretty much simpler to use. The value that needs
    to be cached will be returned in the lambda expression directly while the lambda
    retrieves the cache entry that can be configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the data are there you can return them to the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The model that gets returned looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the next snippet to `Index.cshtml` right after `CacheTagHelper` to visualize
    the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates two lists in two side-by-side columns. Now run the application,
    call it in the browser, and try to refresh the page. The displayed data shouldn''t
    change even though the data are completely random. Without the cache, the data
    would change on every reload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 - Changing data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.3_B17996.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 - Changing data
  prefs: []
  type: TYPE_NORMAL
- en: That's it. The cache expires every 30 seconds as configured.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caches help us to create high performance applications by reducing the calls
    to resources that are less performant, such as databases, external APIs, or complex
    calculations. In this chapter, you learned to use the response cache using the
    `ResponseCachingMiddleware` and the `ResponseCacheAttribute`, and the in-memory
    cache by using the `CacheTagHelper` as well as by using the `IMemoryCache` manually
    in the C# code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to create custom `TagHelper`.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'More about caching in the ASP.NET Core docs: [https://docs.microsoft.com/en-us/aspnet/core/performance/caching/response?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/performance/caching/response?view=aspnetcore-6.0).'
  prefs: []
  type: TYPE_NORMAL
