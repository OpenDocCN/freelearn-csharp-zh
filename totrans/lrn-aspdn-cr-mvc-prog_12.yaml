- en: Chapter 12. ASP.NET Core Identity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。ASP.NET Core Identity
- en: Security is essential to all types of applications, including web applications.
    Would you use Facebook if anyone could update your status by impersonating you?
    If that were possible, then no one would come back to Facebook. From this example,
    we can see that security is not so much a feature as it is a necessity for all
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性对所有类型的应用程序都是必不可少的，包括 Web 应用程序。如果任何人都可以通过冒充您来更新您的状态，您会使用 Facebook 吗？如果这是可能的，那么没有人会再回到
    Facebook。从这个例子中，我们可以看到安全性与其说是一个特性，不如说是一个对所有应用程序的必需品。
- en: 'In this chapter, we are going to learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Authentication and authorization
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证和授权
- en: ASP.NET Identity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Identity
- en: How to implement security in an ASP.NET Core application using ASP.NET Identity
    with Entity Framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 ASP.NET Core 应用程序中使用 ASP.NET Identity 和 Entity Framework 实现安全性
- en: When we talk about the security of an application, we primarily want to prevent
    any unauthorized access, meaning that only the people who have access to the information
    should be able to access it—nothing more, nothing less.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论应用程序的安全性时，我们主要希望防止任何未经授权的访问，这意味着只有有权访问信息的人才能访问它——不多也不少。
- en: Before proceeding further, I would like to clarify some of the core concepts
    regarding security.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我想澄清一些关于安全性的核心概念。
- en: Authentication
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证
- en: Authentication is the process of validating whether the user has access to the
    system. In any application, users will be authenticated first. This can be achieved
    by asking the user to enter their user ID and password.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是验证用户是否有权访问系统的过程。在任何应用程序中，用户首先都会进行认证。这可以通过要求用户输入他们的用户 ID 和密码来实现。
- en: Authorization
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权
- en: Authorization is the process where we verify whether the user has access to
    the requested resource. They might have legitimate access to the system, but they
    might not have access to the requested resource as they do not have the required
    access. For example, only the admin user can access the configuration page of
    the application, whereas normal users should not be allowed to use this page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 授权是验证用户是否有权访问请求的资源的过程。他们可能对系统有合法的访问权限，但他们可能没有访问请求资源的权限，因为他们没有所需的访问权限。例如，只有管理员用户可以访问应用程序的配置页面，而普通用户不应被允许使用此页面。
- en: ASP.NET Identity provides several features for securing the application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Identity 为保护应用程序提供了几个功能。
- en: 'Let us consider the following simple scenario where the user tries to access
    the **Secure Page** , a page to which only authorized people should have access.
    As the user is not logged in, they will be redirected to the **Login Page** so
    that we can authenticate and authorize the user. Upon successful authentication,
    the user is redirected to the **Secure Page** . If for any reason, we can not
    authenticate and authorize the user, we can redirect them to the **"Access denied"
    Page** :'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下简单场景，其中用户试图访问 **受保护页面**，这是一个只有授权人员才能访问的页面。由于用户未登录，他们将被重定向到 **登录页面**，以便我们可以对用户进行认证和授权。认证成功后，用户将被重定向到
    **受保护页面**。如果由于任何原因我们无法对用户进行认证和授权，我们可以将他们重定向到 **“访问被拒绝”页面**：
- en: '![Authorization](img/Image00230.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![授权](img/Image00230.jpg)'
- en: 'ASP.NET Core Identity is a membership system that enables you to secure the
    application easily, and which has features such as adding login functionality
    to your application. The following are the steps that we need to follow in order
    to use **ASP.NET Identity** (with Entity Framework) for our application:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 是一个会员系统，它使您能够轻松地保护应用程序，并具有添加登录功能到应用程序等特性。以下是我们需要遵循的步骤，以便在我们的应用程序中使用
    **ASP.NET Identity**（与 Entity Framework 结合）：
- en: Add the relevant dependencies to the `project.json` file.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相关依赖项添加到 `project.json` 文件中。
- en: Create an `appsettings.json` file and store the database connection string.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `appsettings.json` 文件并存储数据库连接字符串。
- en: Create an `ApplicationUser` class and `ApplicationDbContext` class.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `ApplicationUser` 类和 `ApplicationDbContext` 类。
- en: Configure the application to use ASP.NET Identity.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置应用程序以使用 ASP.NET Identity。
- en: Create ViewModels for registration and login.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建注册和登录的 ViewModels。
- en: Create the necessary controller and associated action methods and Views.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建必要的控制器和相关动作方法和视图。
- en: Adding the relevant dependencies to the project.json file
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将相关依赖项添加到 project.json 文件中
- en: 'If you want to use ASP.NET Identity with Entity Framework in your application,
    you need to add the following dependencies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在应用程序中使用 ASP.NET Identity 和 Entity Framework，您需要添加以下依赖项：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create an `appsettings.json` file and store the database connection string.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `appsettings.json` 文件并存储数据库连接字符串。
- en: 'Create a file with the name `appsettings.json` at the root level of the project,
    as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根级别创建一个名为 `appsettings.json` 的文件，如以下截图所示：
- en: '![Adding the relevant dependencies to the project.json file](img/Image00231.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![将相关依赖项添加到 project.json 文件中](img/Image00231.jpg)'
- en: 'Store the following connection string in `appsettings.json` . This connection
    string will be used by ASP.NET Identity to store the data in relevant tables:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下连接字符串存储在 `appsettings.json` 中。此连接字符串将由 ASP.NET Identity 用于在相关表中存储数据：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding ApplicationUser and ApplicationDbContext classes
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 ApplicationUser 和 ApplicationDbContext 类
- en: 'Create a **Models** folder and a couple of files— **ApplicationDbContext.cs**
    and **ApplicationUser.cs—** as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 **Models** 文件夹和几个文件——**ApplicationDbContext.cs** 和 **ApplicationUser.cs**——如以下截图所示：
- en: '![Adding ApplicationUser and ApplicationDbContext classes](img/Image00232.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![添加 ApplicationUser 和 ApplicationDbContext 类](img/Image00232.jpg)'
- en: 'The `ApplicationUser` class inherits from the `IdentityUser` class (available
    at the `AspNet.Identity.EntityFramework6` namespace) as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationUser` 类从 `AspNet.Identity.EntityFramework6` 命名空间中的 `IdentityUser`
    类继承，如下所示：'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can add properties to the user as per the needs of your application. I have
    not added any properties as I would like to keep things simple to show the features
    of ASP.NET Identity.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据应用程序的需求向用户添加属性。我没有添加任何属性，因为我希望保持简单，以展示 ASP.NET Identity 的功能。
- en: The `ApplicationDbContext` class inherits from the `IdentityDbContext` class
    of `ApplicationUser` . In the constructor method, we pass the `connectionstring`
    , which is eventually passed to the base class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationDbContext` 类从 `ApplicationUser` 的 `IdentityDbContext` 类继承。在构造函数方法中，我们传递
    `connectionstring`，它最终传递到基类。'
- en: 'Even the `OnModelCreating` method is overridden. If you want to change any
    table names (to be generated by Identity), you can do so as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至 `OnModelCreating` 方法也被重写。如果您想更改任何表名（由 Identity 生成），可以按以下方式操作：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once we create the `Models` file, we need to configure the application and services.
    You can configure these in `Configure` and `ConfigureServices` , which are found
    in the `Startup` class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了 `Models` 文件，我们需要配置应用程序和服务。您可以在 `Startup` 类中的 `Configure` 和 `ConfigureServices`
    中配置这些。
- en: Configuring the application to use Identity
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置应用程序以使用 Identity
- en: 'In order to use Identity, we just need to add the following line in the `Configure`
    method of the `Startup` class:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Identity，我们只需在 `Startup` 类的 `Configure` 方法中添加以下行：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The complete `Configure` method is shown in the following code, along with
    the call of the `UseIdentity` method, which is `app.UseIdentity()` :'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '以下代码显示了完整的 `Configure` 方法，包括对 `UseIdentity` 方法的调用，即 `app.UseIdentity()` :'
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `ConfigureServices` method, we will make the following changes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ConfigureServices` 方法中，我们将进行以下更改：
- en: We will add the `ApplicationDbContext` class with the connection string taken
    from the `appsettings.json` file
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将添加 `ApplicationDbContext` 类，其连接字符串来自 `appsettings.json` 文件
- en: We will add Identity with `UserStore` and `RoleStore`
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将添加 `UserStore` 和 `RoleStore` 以使用 Identity
- en: Finally, we will ask ASP.NET Core to return `AuthMessageSender` whenever we
    ask for the `IEmailSender` and `ISMSSender` classes
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将要求 ASP.NET Core 在我们请求 `IEmailSender` 和 `ISMSSender` 类时返回 `AuthMessageSender`
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating ViewModels
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 ViewModels
- en: Next, we will be creating several ViewModels that we will be using in our Views
    model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建几个 ViewModels，我们将在我们的视图模型中使用它们。
- en: 'To start with, we will create a `RegisterViewModel` class that contains three
    properties—`Email` , `Password` , and `ConfirmPassword` . We decorate the properties
    with appropriate attributes so that we can use client-side validation using an
    unobtrusive jQuery validation. We are making all the fields required as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个包含三个属性——`Email`、`Password` 和 `ConfirmPassword` 的 `RegisterViewModel`
    类。我们使用适当的属性装饰这些属性，以便我们可以使用无障碍 jQuery 验证进行客户端验证。我们将所有字段都设置为必填项，如下所示：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can create the `LoginViewModel model` , which the user can use to log
    in to your application. There is an additional property, `RememberMe` , which,
    when checked, will enable you to log in without having to enter the password again:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建`LoginViewModel`模型，用户可以使用它来登录到你的应用程序。还有一个额外的属性`RememberMe`，当勾选时，将允许你登录而无需再次输入密码：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating Controllers and associated action methods
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器和相关操作方法
- en: 'Now we need to create an `AccountController` class, where we will define the
    action methods for authentication and authorization:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个`AccountController`类，我们将在这里定义认证和授权的操作方法：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, we are using services provided by different components.
    `UserManager` and `SignInManager` are provided by ASP.NET Identity. The `IEmailSender`
    and `ISmsSender` are custom classes that we have written which will be used for
    sending e-mails and SMS messages. We will look more at e-mail and SMS later in
    this chapter. Logging is provided by the Microsoft Logging extension. The following
    is a simple login `HTTPGET` method. It simply stores the URL from where the `Login`
    method is accessed and returns the login page:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在使用不同组件提供的服务。`UserManager`和`SignInManager`由ASP.NET Identity提供。`IEmailSender`和`ISmsSender`是我们编写的自定义类，将用于发送电子邮件和短信。我们将在本章后面更详细地了解电子邮件和短信。日志记录由Microsoft
    Logging扩展提供。以下是一个简单的登录`HTTPGET`方法。它只是存储访问`Login`方法的URL并返回登录页面：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating Views
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'Now, we will create respective View page for the login. In this View page,
    we are just showing the following details:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建相应的登录视图页面。在这个视图页面中，我们只是显示了以下详细信息：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Creating Views](img/Image00233.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图](img/Image00233.jpg)'
- en: 'When the user logs into the application for the first time, they might not
    have any login credentials, so our application should provide a feature that they
    can use to create a login for themselves. We will create a simple `Register` action
    method that will just return a View with which the user can register themselves:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户首次登录应用程序时，他们可能没有任何登录凭证，因此我们的应用程序应该提供一个功能，让他们可以创建自己的登录账户。我们将创建一个简单的`Register`操作方法，该方法将仅返回一个视图，用户可以通过该视图注册自己：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will also create the corresponding View that contains input controls for
    e-mail, password, password confirmation, and a `Register` button:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建相应的视图，其中包含电子邮件、密码、密码确认和`Register`按钮的输入控件：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the corresponding `POST` action method for registration. Here,
    the program checks whether the model is valid, and, if it is valid, it will create
    an `ApplicationUser` object using the model data and call the Identity API (the
    `CreateAsync` method). If it can create the `user` variable, the user will log
    in using that user ID and be redirected to the `Home` page:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的注册`POST`操作方法。在这里，程序检查模型是否有效，如果有效，它将使用模型数据创建一个`ApplicationUser`对象，并调用身份验证API（`CreateAsync`方法）。如果可以创建`user`变量，用户将使用该用户ID登录并重定向到`Home`页面：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The log-out functionality is pretty simple. It just needs to call the `SignoutAsync`
    method of Identity API and be redirected to the `Index` page:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 登出功能相当简单。只需调用身份验证API的`SignoutAsync`方法，然后重定向到`Index`页面：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Coming back to the log-in functionality, the following is the respective action
    method. We are calling the `PasswordSignInAsync` method of Identity API. Upon
    a successful login, we redirect the URL from where the log-in functionality is
    accessed:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 回到登录功能，以下是对应的操作方法。我们调用身份验证API的`PasswordSignInAsync`方法。登录成功后，我们将重定向到登录功能访问的URL：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: E-mail and SMS services
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件和短信服务
- en: 'If you want to add e-mail and SMS services to your application''s authentication
    capabilities, you can do so by creating the interfaces and classes shown here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将电子邮件和短信服务添加到应用程序的认证功能中，你可以通过创建这里显示的接口和类来实现：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Securing an action method in a Controller
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在控制器中保护操作方法
- en: For the sake of explanation, let us assume that the **About** page is a secure
    page and only authenticated users should be able to access it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释方便，让我们假设**关于**页面是一个受保护的页面，只有经过认证的用户才能访问它。
- en: 'We just have to decorate the `About` action method in the `Home` controller
    with an`[Authorize]` attribute:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在`Home`控制器中的`About`操作方法上装饰一个`[Authorize]`属性：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Making the preceding change will redirect the user to the log-in page when
    the user tries to access the log-in page without logging in to the application:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 进行上述更改后，当用户尝试访问登录页面而未登录应用程序时，将重定向用户到登录页面：
- en: '![Securing an action method in a Controller](img/Image00234.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![在控制器中保护操作方法](img/Image00234.jpg)'
- en: In the following screenshot, you will notice an additional query parameter,
    `ReturnURL,` in the URL. This `ReturnURL` parameter will redirect the application
    to that specific page (the value passed in the `ReturnURL` parameter— **Home**
    / **About** in our case).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您将注意到URL中有一个额外的查询参数，`ReturnURL`。这个`ReturnURL`参数将把应用程序重定向到特定的页面（在我们的例子中，是`ReturnURL`参数传递的值——**首页**
    / **关于**）。
- en: 'Once you log in, you''ll be redirected to the page that you requested earlier:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦登录，您将被重定向到您之前请求的页面：
- en: '![Securing an action method in a Controller](img/Image00235.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![在控制器中保护操作方法](img/Image00235.jpg)'
- en: When you register a new user, the details of the user will be stored in the
    relevant tables created by ASP.NET Identity.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当您注册新用户时，用户的详细信息将被存储在ASP.NET Identity创建的相关表中。
- en: 'Open the SQL Server Object Explorer window by selecting the option **View**
    | **SQL Server Object Explorer** , as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**视图** | **SQL Server对象资源管理器**选项打开SQL Server对象资源管理器窗口，如下面的屏幕截图所示：
- en: '![Securing an action method in a Controller](img/Image00236.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![在控制器中保护操作方法](img/Image00236.jpg)'
- en: Once you select the **SQL Server Object Explorer** option, you will see a window
    similar to the following screenshot. ASP.NET Identity creates a database for us
    by using Entity Framework and the connection string that we provided earlier in
    the `appsettings.json` package.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择**SQL Server对象资源管理器**选项，您将看到一个类似于以下屏幕截图的窗口。ASP.NET Identity使用Entity Framework和我们之前在`appsettings.json`包中提供的连接字符串为我们创建数据库。
- en: 'ASP.NET Identity creates several tables to maintain identity-related information
    and the database migration history of Entity Framework. As we are using ASP.NET
    Identity at the basic level, none of the identity-related tables will get populated,
    apart from  **dbo.AspNetUsers** .:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Identity创建多个表来维护与身份相关的信息和Entity Framework的数据库迁移历史。由于我们在基本级别使用ASP.NET
    Identity，除了  **dbo.AspNetUsers** 表外，没有任何与身份相关的表会被填充：
- en: '![Securing an action method in a Controller](img/Image00237.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![在控制器中保护操作方法](img/Image00237.jpg)'
- en: 'You can right-click on the **dbo.AspNetUsers** table and select **View Data**
    to see the data:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以右键单击**dbo.AspNetUsers**表并选择**查看数据**来查看数据：
- en: '![Securing an action method in a Controller](img/Image00238.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![在控制器中保护操作方法](img/Image00238.jpg)'
- en: As only one user has been registered in our application, only one row has been
    created. Please note that the hashed password (marked by ASP.NET Identity for
    us) and no blank passwords will get stored in the table.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在我们的应用程序中只注册了一个用户，因此只创建了一行。请注意，哈希密码（由ASP.NET Identity为我们标记）和空白密码将不会存储在表中。
- en: 读累了记得休息一会哦~
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about authentication and authorization. We also
    learned how to implement ASP.NET Identity in an ASP.NET Core application by following
    a step-by-step process. We also discussed the tables involved in ASP.NET Identity
    and learned how to see the data created by ASP.NET Identity.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了身份验证和授权。我们还学习了如何通过逐步过程在ASP.NET Core应用程序中实现ASP.NET Identity。我们还讨论了ASP.NET
    Identity中涉及的表，并学习了如何查看ASP.NET Identity创建的数据。
