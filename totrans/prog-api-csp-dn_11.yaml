- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What’s Next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By this point, you’ve seen and worked with the fundamentals and advanced topics
    of creating .NET APIs. The obvious question is, *“What next?”* There are a number
    of areas where you may want to expand your knowledge and expertise. This chapter
    will list some of the most important ones.
  prefs: []
  type: TYPE_NORMAL
- en: C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The #1 place to put your effort is advanced C#. The more you know about C#,
    the easier it will be to create world-class APIs. Pay particular attention to
    Linq as much of your retrieval code will make extensive use of it. Even if you
    don’t write in Linq, other API creators will, and you’ll need a solid working
    knowledge of Linq to understand their work.'
  prefs: []
  type: TYPE_NORMAL
- en: SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next most important place to put your effort is expanding your SQL skills.
    The API programmer is, very often, called upon to retrieve the requested data
    from a database, and in most cases, that will require a working knowledge of SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are different flavors of SQL depending on what database you
    are using; however, the core of SQL is the same across platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to expanding your SQL skills, you will want to become as proficient
    as you can in the database platform you’re working with (e.g., Entity Framework).
    As noted previously, the SQL you’ll use will vary a bit depending on which platform
    you choose (or was chosen for you).
  prefs: []
  type: TYPE_NORMAL
- en: API architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are numerous books that delve into the finer points of architecting APIs.
    They can be very helpful when designing a very complex API.
  prefs: []
  type: TYPE_NORMAL
- en: Dapper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dapper is a powerful object relational mapper that we’ve been using throughout
    this book. There is more to Dapper than we’ve needed, however, and it will be
    valuable to learn some of the more advanced features. You can learn more about
    Dapper at [https://dappertutorial.net/](https://dappertutorial.net/) .
  prefs: []
  type: TYPE_NORMAL
- en: AutoMapper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used AutoMapper to map our DTOs to their related **Plain Old C# Objects**
    ( **POCOs** ) objects. AutoMapper can map any two objects, which can come in handy
    in solving more advanced API issues. You can learn more at [https://automapper.org/](https://automapper.org/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio is your primary tool for creating APIs, and the more you can learn
    about it, the easier your life will be. Pay particular attention to creating snippets
    as they can save you a lot of time. There are a great many features in Visual
    Studio that we didn’t need to go into but are worth learning about. Be sure to
    become proficient in using Visual Studio to interact with your version control
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in the book, while there are other version control systems, the
    great majority of the C# community (and most other programming languages and platforms)
    has settled on Git. Becoming proficient in Git in both Visual Studio and at the
    command line will save you a great deal of time and can prevent panic when you
    think you’ve lost your work (you almost certainly have not).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the numerous tutorials available online, I have a book, *Git
    For Programmers* , published by Packt, that covers using Git in both the command
    line and Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Housing your version control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three very popular places to house your Git repository:'
  prefs: []
  type: TYPE_NORMAL
- en: On-premises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-premises simply means that your Git repository is on your own computer. This
    can be convenient, but also dangerous. If your repository is on a local computer,
    damage to that computer can cause your work and work history to be lost.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft offers two homes for Git. GitHub is popular with open source and smaller
    applications. For open source applications and small individual users, it is free.
    The alternative is to put your repository on Azure Repos. Azure DevOps offers
    a limited free tier, which may suffice for small teams or individual users. It
    also provides several paid tiers that include additional features tailored for
    larger projects and more complex team requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for sticking with us, and good luck with your work building REST APIs.
    We know that, armed with this book, you will be successful.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you again,
  prefs: []
  type: TYPE_NORMAL
- en: Jesse Liberty
  prefs: []
  type: TYPE_NORMAL
- en: Joseph Dluzen
  prefs: []
  type: TYPE_NORMAL
