["```cs\n    public class FileData\n    {\n        public List<FileInfo> FileInfoList { get; set; } = \n            new();\n        public long TotalSize { get; set; } = 0;\n        public string LastWrittenFileName \n            { get; set; } = \"\";\n        public DateTime LastFileWriteTime { get; set; }\n    }\n    ```", "```cs\n    public static FileData GetInfoForFiles(string[] files)\n    {\n        var results = new FileData();\n        var fileInfos = new List<FileInfo>();\n        long totalFileSize = 0;\n        DateTime lastWriteTime = DateTime.MinValue;\n        string lastFileWritten = \"\";\n        object dateLock = new();\n        Parallel.For(0, files.Length,\n                index => {\n    FileInfo fi = new(files[index]);\n                    long size = fi.Length;\n    DateTime lastWrite = \n                        fi.LastWriteTimeUtc;\n                    lock (dateLock)\n                    {\n                        if (lastWriteTime < lastWrite)\n                        {\n                            lastWriteTime = lastWrite;\n                            lastFileWritten = fi.Name;\n    }\n                    }\n    Interlocked.Add(ref totalFileSize, \n                        size);\n                    fileInfos.Add(fi);\n                });\n        results.FileInfoList = fileInfos;\n        results.TotalSize = totalFileSize;\n        results.LastFileWriteTime = lastWriteTime;\n        results.LastWrittenFileName = lastFileWritten;\n        return results;\n    }\n    ```", "```cs\n    private GroupBox FileProcessorGroup;\n    private Button FolderProcessButton;\n    private Button FolderBrowseButton;\n    private TextBox FolderToProcessTextBox;\n    private Label label1;\n    private TextBox FolderResultsTextBox;\n    private Label label2;\n    private FolderBrowserDialog folderToProcessDialog;\n    ```", "```cs\n    private void FolderBrowseButton_Click(object sender, \n        EventArgs e)\n    {\n        var result = folderToProcessDialog.ShowDialog();\n        if (result == DialogResult.OK)\n        {\n            FolderToProcessTextBox.Text = \n                folderToProcessDialog.SelectedPath;\n        }\n    }\n    ```", "```cs\n    private void FolderProcessButton_Click(object sender, \n        EventArgs e)\n    {\n        if (!string.IsNullOrWhiteSpace\n            (FolderToProcessTextBox.Text) &&\n            Directory.Exists(FolderToProcessTextBox.Text))\n        {\n            string[] filesToProcess = Directory.GetFiles\n                (FolderToProcessTextBox.Text);\n            FileData? results = FileProcessor\n                .GetInfoForFiles(filesToProcess);\n            if (results == null)\n            {\n                FolderResultsTextBox.Text = \"\";\n                return;\n            }\n            StringBuilder resultText = new();\n            resultText.Append($\"Total file count: \n                {results.FileInfoList.Count}; \");\n            resultText.AppendLine($\"Total file size: \n                {results.TotalSize} bytes\");\n            resultText.Append($\"Last written file: \n                {results.LastWrittenFileName} \");\n            resultText.Append($\"at \n                {results.LastFileWriteTime}\");\n            FolderResultsTextBox.Text = \n                resultText.ToString();\n        }\n    }\n    ```", "```cs\npublic static FileData GetInfoForFilesThreadLocal(string[] \n```", "```cs\n    files)\n```", "```cs\n{\n```", "```cs\n    var results = new FileData();\n```", "```cs\n    var fileInfos = new List<FileInfo>();\n```", "```cs\n    long totalFileSize = 0;\n```", "```cs\n    DateTime lastWriteTime = DateTime.MinValue;\n```", "```cs\n    string lastFileWritten = \"\";\n```", "```cs\n    object dateLock = new();\n```", "```cs\n    Parallel.For<long>(0, files.Length, () => 0,\n```", "```cs\n        (index, loop, subtotal) => {\n```", "```cs\n            FileInfo fi = new(files[index]);\n```", "```cs\n            long size = fi.Length;\n```", "```cs\n            DateTime lastWrite = fi.LastWriteTimeUtc;\n```", "```cs\n            lock (dateLock)\n```", "```cs\n            {\n```", "```cs\n                if (lastWriteTime < lastWrite)\n```", "```cs\n                {\n```", "```cs\n                    lastWriteTime = lastWrite;\n```", "```cs\n                    lastFileWritten = fi.Name;\n```", "```cs\n                }\n```", "```cs\n            }\n```", "```cs\n            subtotal += size;\n```", "```cs\n            fileInfos.Add(fi);\n```", "```cs\n            return subtotal;\n```", "```cs\n            },\n```", "```cs\n(runningTotal) => Interlocked.Add(ref \n```", "```cs\n            totalFileSize, runningTotal)\n```", "```cs\n    );\n```", "```cs\n    results.FileInfoList = fileInfos;\n```", "```cs\n    results.TotalSize = totalFileSize;\n```", "```cs\n    results.LastFileWriteTime = lastWriteTime;\n```", "```cs\n    results.LastWrittenFileName = lastFileWritten;\n```", "```cs\n    return results;\n```", "```cs\n}\n```", "```cs\n    private static Bitmap ConvertJpgToBitmap(string \n        fileName)\n    {\n        Bitmap bmp;\n        using (Stream bmpStream = File.Open(fileName, \n            FileMode.Open))\n        {\n            Image image = Image.FromStream(bmpStream);\n            bmp = new Bitmap(image);\n        }\n        return bmp;\n    }\n    ```", "```cs\n    public static List<Bitmap> ConvertFilesToBitmaps\n        (List<string> files)\n    {\n        var result = new List<Bitmap>();\n        Parallel.ForEach(files, file =>\n        {\n            FileInfo fi = new(file);\n            string ext = fi.Extension.ToLower();\n            if (ext == \".jpg\" || ext == \".jpeg\")\n            {\n                result.Add(ConvertJpgToBitmap(file));\n            }\n        });\n        return result;\n    }\n    ```", "```cs\n    private void ProcessJpgsButton_Click(object sender, \n        EventArgs e)\n    {\n        if (!string.IsNullOrWhiteSpace\n            (FolderToProcessTextBox.Text) &&\n            Directory.Exists(FolderToProcessTextBox.Text))\n        {\n            List<string> filesToProcess = Directory\n                .GetFiles(FolderToProcessTextBox.Text)\n                    .ToList();\n            List<Bitmap> results = FileProcessor\n                .ConvertFilesToBitmaps(filesToProcess);\n            StringBuilder resultText = new();\n            foreach (var bmp in results)\n            {\n                resultText.AppendLine($\"Bitmap height: \n                    {bmp.Height}\");\n            }\n            FolderResultsTextBox.Text = \n                resultText.ToString();\n        }\n    }\n    ```", "```cs\n    public static async Task<List<Bitmap>> \n        ConvertFilesToBitmapsAsync(List<string> files, \n            CancellationTokenSource cts)\n    {\n        ParallelOptions po = new()\n        {\n            CancellationToken = cts.Token,\n    MaxDegreeOfParallelism = \n                Environment.ProcessorCount == 1 ? 1\n                          : Environment.ProcessorCount - 1\n        };\n        var result = new List<Bitmap>();\n        try\n        {\n    await Parallel.ForEachAsync(files, po, async \n    (file, _cts) => \n            {\n                FileInfo fi = new(file);\n                string ext = fi.Extension.ToLower();\n                if (ext == \".jpg\" || ext == \"jpeg\")\n                {\n                    result.Add(ConvertJpgToBitmap(file));\n                    await Task.Delay(2000, _cts);\n                }\n            });\n        }\n        catch (OperationCanceledException e)\n        {\n            MessageBox.Show(e.Message);\n        }\n        finally\n        {\n            cts.Dispose();\n        }\n        return result;\n    }\n    ```", "```cs\n    private CancellationTokenSource _cts;\n    ```", "```cs\nprivate async void ProcessJpgsButton_Click(object \n    sender, EventArgs e)\n{\n    if (!string.IsNullOrWhiteSpace\n        (FolderToProcessTextBox.Text) &&\n        Directory.Exists(FolderToProcessTextBox.Text))\n    {\n        _cts = new CancellationTokenSource();\n        List<string> filesToProcess = Directory\n           .GetFiles(FolderToProcessTextBox.Text)\n               .ToList();\n        List<Bitmap> results = await FileProcessor\n            .ConvertFilesToBitmapsAsync\n(filesToProcess, _cts);\n        StringBuilder resultText = new();\n        foreach (var bmp in results)\n        {\n            resultText.AppendLine($\"Bitmap height: \n                {bmp.Height}\");\n        }\n        FolderResultsTextBox.Text = resultText\n            .ToString();\n    }\n}\n```", "```cs\n    private void CancelButton_Click(object sender, \n        EventArgs e)\n    {\n        if (_cts != null)\n        {\n            _cts.Cancel();\n        }\n    }\n    ```", "```cs\nParallel.Invoke(DoFirstAction, DoSectionAction);\n```", "```cs\nList<Task> taskList = new();\n```", "```cs\ntaskList.Add(Task.Run(DoFirstAction));\n```", "```cs\ntaskList.Add(Task.Run(DoSectionAction));\n```", "```cs\nTask.WaitAll(taskList.ToArray());\n```", "```cs\nList<Task> taskList = new();\n```", "```cs\ntaskList.Add(Task.Run(DoFirstAction));\n```", "```cs\ntaskList.Add(Task.Run(DoSectionAction));\n```", "```cs\nawait Task.WhenAll(taskList.ToArray());\n```", "```cs\nawait Task.Run(() => Parallel.Invoke(DoFirstTask, \n```", "```cs\n    DoSecondTask));\n```", "```cs\n    public void DoFirstItem()\n    {\n        Console.WriteLine(\"Starting DoFirstItem\");\n        Thread.SpinWait(1000000);\n        Console.WriteLine(\"Finishing DoFirstItem\");\n    }\n    public void DoSecondItem()\n    {\n        Console.WriteLine(\"Starting DoSecondItem\");\n        Thread.SpinWait(1000000);\n        Console.WriteLine(\"Finishing DoSecondItem\");\n    }\n    public void DoThirdItem()\n    {\n        Console.WriteLine(\"Starting DoThirdItem\");\n        Thread.SpinWait(1000000);\n        Console.WriteLine(\"Finishing DoThirdItem\");\n    }\n    ```", "```cs\n    public void DoAllWork()\n    {\n        Console.WriteLine(\"Starting DoAllWork\");\n        Task parentTask = Task.Factory.StartNew(() =>\n        {\n            var child1 = Task.Factory.StartNew\n                 (DoFirstItem);\n            var child2 = Task.Factory.StartNew\n                  (DoSecondItem);\n            var child3 = Task.Factory.StartNew\n                  (DoThirdItem);\n        });\n        parentTask.Wait();\n        Console.WriteLine(\"Finishing DoAllWork\");\n    }\n    ```", "```cs\n    using ParallelTaskRelationshipsSample;\n    var parallelWork = new ParallelWork();\n    parallelWork.DoAllWork();\n    Console.ReadKey();\n    ```", "```cs\n    public void DoAllWorkAttached()\n    {\n        Console.WriteLine(\"Starting DoAllWorkAttached\");\n        Task parentTask = Task.Factory.StartNew(() =>\n        {\n            var child1 = Task.Factory.StartNew\n                (DoFirstItem, TaskCreationOptions\n                    .AttachedToParent);\n            var child2 = Task.Factory.StartNew\n                (DoSecondItem, TaskCreationOptions\n                    .AttachedToParent);\n            var child3 = Task.Factory.StartNew\n                (DoThirdItem, TaskCreationOptions\n                    .AttachedToParent);\n        });\n        parentTask.Wait();\n        Console.WriteLine(\"Finishing DoAllWorkAttached\");\n    }\n    ```", "```cs\n    public void DoAllWorkDenyAttach()\n    {\n        Console.WriteLine(\"Starting DoAllWorkDenyAttach\");\n        Task parentTask = Task.Factory.StartNew(() =>\n        {\n            var child1 = Task.Factory.StartNew\n                (DoFirstItem, TaskCreationOptions\n                    .AttachedToParent);\n            var child2 = Task.Factory.StartNew\n                 (DoSecondItem, TaskCreationOptions\n                     .AttachedToParent);\n            var child3 = Task.Factory.StartNew\n                (DoThirdItem, TaskCreationOptions\n                    .AttachedToParent);\n        }, TaskCreationOptions.DenyChildAttach);\n        parentTask.Wait();\n        Console.WriteLine(\"Finishing DoAllWork\n            DenyAttach\");\n    }\n    ```"]