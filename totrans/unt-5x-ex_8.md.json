["```cs\nusing UnityEngine;\nusing System.Collections;\n//------------------------------------------\npublic class LineSight : MonoBehaviour\n{\n  //------------------------------------------\n  //How sensitive should we be to sight\n  public enum SightSensitivity {STRICT, LOOSE};\n\n  //Sight sensitivity\n  public SightSensitivity Sensitity = SightSensitivity.STRICT;\n\n  //Can we see target\n  public bool CanSeeTarget = false;\n\n  //FOV\n  public float FieldOfView = 45f;\n\n  //Reference to target\n  private Transform Target = null;\n\n  //Reference to eyes\n  public Transform EyePoint = null;\n\n  //Reference to transform component\n  private Transform ThisTransform = null;\n\n  //Reference to sphere collider\n  private SphereCollider ThisCollider = null;\n\n  //Reference to last know object sighting, if any\n  public Vector3 LastKnowSighting = Vector3.zero;\n  //------------------------------------------\n  void Awake()\n  {\n    ThisTransform = GetComponent<Transform>();\n    ThisCollider = GetComponent<SphereCollider>();\n    LastKnowSighting = ThisTransform.position;\n    Target = GameObject.FindGameObjectWithTag(\"Player\").GetComponent<Transform>();\n  }\n  //------------------------------------------\n  bool InFOV()\n  {\n    //Get direction to target\n    Vector3 DirToTarget = Target.position - EyePoint.position;\n\n    //Get angle between forward and look direction\n    float Angle = Vector3.Angle(EyePoint.forward, DirToTarget);\n\n    //Are we within field of view?\n    if(Angle <= FieldOfView)\n      return true;\n\n    //Not within view\n    return false;\n  }\n  //------------------------------------------\n  bool ClearLineofSight()\n  {\n    RaycastHit Info;\n\n    if(Physics.Raycast(EyePoint.position, (Target.position - EyePoint.position).normalized, out Info, ThisCollider.radius))\n    {\n      //If player, then can see player\n      if(Info.transform.CompareTag(\"Player\"))\n        return true;\n    }\n\n    return false;\n  }\n  //------------------------------------------\n  void UpdateSight()\n  {\n    switch(Sensitity)\n    {\n      case SightSensitivity.STRICT:\n        CanSeeTarget = InFOV() && ClearLineofSight();\n      break;\n\n      case SightSensitivity.LOOSE:\n        CanSeeTarget = InFOV() || ClearLineofSight();\n      break;\n    }\n  }\n  //------------------------------------------\n  void OnTriggerStay(Collider Other)\n  {\n    UpdateSight();\n\n    //Update last known sighting\n    if(CanSeeTarget)\n      LastKnowSighting =  Target.position;\n  }\n  //------------------------------------------\n  void OnTriggerExit(Collider Other)\n  {\n    if(!Other.CompareTag(\"Player\"))return;\n\n    CanSeeTarget = false;\n  }\n  //------------------------------------------\n}\n//------------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//------------------------------------------\npublic class AI_Enemy : MonoBehaviour\n{\n  //------------------------------------------\n  public enum ENEMY_STATE {PATROL, CHASE, ATTACK};\n  //------------------------------------------\n  public ENEMY_STATE CurrentState\n  {\n    get{return currentstate;}\n\n    set\n    {\n      //Update current state\n      currentstate = value;\n\n      //Stop all running coroutines\n      StopAllCoroutines();\n\n      switch(currentstate)\n      {\n        case ENEMY_STATE.PATROL:\n          StartCoroutine(AIPatrol());\n        break;\n\n        case ENEMY_STATE.CHASE:\n          StartCoroutine(AIChase());\n        break;\n\n        case ENEMY_STATE.ATTACK:\n          StartCoroutine(AIAttack());\n        break;\n      }\n    }\n  }\n  //------------------------------------------\n  [SerializeField]\n  private ENEMY_STATE currentstate = ENEMY_STATE.PATROL;\n\n  //Reference to line of sight component\n  private LineSight ThisLineSight = null;\n\n  //Reference to nav mesh agent\n  private NavMeshAgent ThisAgent = null;\n\n  //Reference to player transform\n  private Transform PlayerTransform = null;\n\n  //------------------------------------------\n  void Awake()\n  {\n    ThisLineSight = GetComponent<LineSight>();\n    ThisAgent = GetComponent<NavMeshAgent>();\n    PlayerTransform = GameObject.FindGameObjectWithTag(\"Player\").GetComponent<Transform>();\n  }\n  //------------------------------------------\n  void Start()\n  {\n\n    //Configure starting state\n    CurrentState = ENEMY_STATE.PATROL;\n  }\n  //------------------------------------------\n  public IEnumerator AIPatrol()\n  {\n      yield break;\n\n  }\n  //------------------------------------------\n  public IEnumerator AIChase()\n  {\n\n      yield break;\n  }\n  //------------------------------------------\n  public IEnumerator AIAttack()\n  {\n    yield break;\n  }\n  //------------------------------------------\n}\n//------------------------------------------\n```", "```cs\n  void Start()\n  {\n    //Get random destination\n    GameObject[] Destinations = GameObject.FindGameObjectsWithTag(\"Dest\");\n    PatrolDestination = Destinations[Random.Range(0, Destinations.Length)].GetComponent<Transform>();\n\n    //Configure starting state\n    CurrentState = ENEMY_STATE.PATROL;\n  }\n  //------------------------------------------\n  public IEnumerator AIPatrol()\n  {\n    //Loop while patrolling\n    while(currentstate == ENEMY_STATE.PATROL)\n    {\n      //Set strict search\n      ThisLineSight.Sensitity = LineSight.SightSensitivity.STRICT;\n\n      //Chase to patrol position\n      ThisAgent.Resume();\n      ThisAgent.SetDestination(PatrolDestination.position);\n\n      //Wait until path is computed\n      while(ThisAgent.pathPending)\n        yield return null;\n\n      //If we can see the target then start chasing\n      if(ThisLineSight.CanSeeTarget)\n      {\n        ThisAgent.Stop();\n        CurrentState = ENEMY_STATE.CHASE;\n        yield break;\n      }\n\n      //Wait until next frame\n      yield return null;\n    }\n  }\n```", "```cs\n  public IEnumerator AIChase()\n  {\n    //Loop while chasing\n    while(currentstate == ENEMY_STATE.CHASE)\n    {\n      //Set loose search\n      ThisLineSight.Sensitity = LineSight.SightSensitivity.LOOSE;\n\n      //Chase to last known position\n      ThisAgent.Resume();\n      ThisAgent.SetDestination(ThisLineSight.LastKnowSighting);\n\n      //Wait until path is computed\n      while(ThisAgent.pathPending)\n        yield return null;\n\n      //Have we reached destination?\n      if(ThisAgent.remainingDistance <= ThisAgent.stoppingDistance)\n      {\n        //Stop agent\n        ThisAgent.Stop();\n\n        //Reached destination but cannot see player\n        if(!ThisLineSight.CanSeeTarget)\n          CurrentState = ENEMY_STATE.PATROL;\n        else //Reached destination and can see player. Reached attacking distance\n          CurrentState = ENEMY_STATE.ATTACK;\n\n        yield break;\n      }\n\n      //Wait until next frame\n      yield return null;\n    }\n  }\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//------------------------------------------\npublic class AI_Enemy : MonoBehaviour\n{\n  //------------------------------------------\n  public enum ENEMY_STATE {PATROL, CHASE, ATTACK};\n  //------------------------------------------\n  public ENEMY_STATE CurrentState\n  {\n    get{return currentstate;}\n\n    set\n    {\n      //Update current state\n      currentstate = value;\n\n      //Stop all running coroutines\n      StopAllCoroutines();\n\n      switch(currentstate)\n      {\n        case ENEMY_STATE.PATROL:\n          StartCoroutine(AIPatrol());\n        break;\n\n        case ENEMY_STATE.CHASE:\n          StartCoroutine(AIChase());\n        break;\n\n        case ENEMY_STATE.ATTACK:\n          StartCoroutine(AIAttack());\n        break;\n      }\n    }\n  }\n  //------------------------------------------\n  [SerializeField]\n  private ENEMY_STATE currentstate = ENEMY_STATE.PATROL;\n\n  //Reference to line of sight component\n  private LineSight ThisLineSight = null;\n\n  //Reference to nav mesh agent\n  private NavMeshAgent ThisAgent = null;\n\n  //Reference to player health\n  private Health PlayerHealth = null;\n\n  //Reference to player transform\n  private Transform PlayerTransform = null;\n\n  //Reference to patrol destination\n  private Transform PatrolDestination = null;\n\n  //Damage amount per second\n  public float MaxDamage = 10f;\n  //------------------------------------------\n  void Awake()\n  {\n    ThisLineSight = GetComponent<LineSight>();\n    ThisAgent = GetComponent<NavMeshAgent>();\n    PlayerHealth = GameObject.FindGameObjectWithTag(\"Player\").GetComponent<Health>();\n    PlayerTransform = PlayerHealth.GetComponent<Transform>();\n  }\n  //------------------------------------------\n  void Start()\n  {\n    //Get random destination\n    GameObject[] Destinations = GameObject.FindGameObjectsWithTag(\"Dest\");\n    PatrolDestination = Destinations[Random.Range(0, Destinations.Length)].GetComponent<Transform>();\n\n    //Configure starting state\n    CurrentState = ENEMY_STATE.PATROL;\n  }\n  //------------------------------------------\n  public IEnumerator AIPatrol()\n  {\n    //Loop while patrolling\n    while(currentstate == ENEMY_STATE.PATROL)\n    {\n      //Set strict search\n      ThisLineSight.Sensitity = LineSight.SightSensitivity.STRICT;\n\n      //Chase to patrol position\n      ThisAgent.Resume();\n      ThisAgent.SetDestination(PatrolDestination.position);\n\n      //Wait until path is computed\n      while(ThisAgent.pathPending)\n        yield return null;\n\n      //If we can see the target then start chasing\n      if(ThisLineSight.CanSeeTarget)\n      {\n        ThisAgent.Stop();\n        CurrentState = ENEMY_STATE.CHASE;\n        yield break;\n      }\n\n      //Wait until next frame\n      yield return null;\n    }\n  }\n  //------------------------------------------\n  public IEnumerator AIChase()\n  {\n    //Loop while chasing\n    while(currentstate == ENEMY_STATE.CHASE)\n    {\n      //Set loose search\n      ThisLineSight.Sensitity = LineSight.SightSensitivity.LOOSE;\n\n      //Chase to last known position\n      ThisAgent.Resume();\n      ThisAgent.SetDestination(ThisLineSight.LastKnowSighting);\n\n      //Wait until path is computed\n      while(ThisAgent.pathPending)\n        yield return null;\n\n      //Have we reached destination?\n      if(ThisAgent.remainingDistance <= ThisAgent.stoppingDistance)\n      {\n        //Stop agent\n        ThisAgent.Stop();\n\n        //Reached destination but cannot see player\n        if(!ThisLineSight.CanSeeTarget)\n          CurrentState = ENEMY_STATE.PATROL;\n        else //Reached destination and can see player. Reached attacking distance\n          CurrentState = ENEMY_STATE.ATTACK;\n\n        yield break;\n      }\n\n      //Wait until next frame\n      yield return null;\n    }\n  }\n  //------------------------------------------\n  public IEnumerator AIAttack()\n  {\n    //Loop while chasing and attacking\n    while(currentstate == ENEMY_STATE.ATTACK)\n    {\n      //Chase to player position\n      ThisAgent.Resume();\n      ThisAgent.SetDestination(PlayerTransform.position);\n\n      //Wait until path is computed\n      while(ThisAgent.pathPending)\n        yield return null;\n\n      //Has player run away?\n      if(ThisAgent.remainingDistance > ThisAgent.stoppingDistance)\n      {\n        //Change back to chase\n        CurrentState = ENEMY_STATE.CHASE;\n        yield break;\n      }\n      else\n      {\n        //Attack\n        PlayerHealth.HealthPoints -= MaxDamage * Time.deltaTime;\n      }\n\n      //Wait until next frame\n      yield return null;\n    }\n\n    yield break;\n  }\n  //------------------------------------------\n}\n//------------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class Health : MonoBehaviour \n{\n  public float HealthPoints\n  {\n    get{return healthPoints;}\n    set\n    {\n      healthPoints = value;\n\n      //If health is < 0 then die\n      if(healthPoints <= 0)\n        Destroy(gameObject);\n    }\n  }\n\n  [SerializeField]\n  private float healthPoints = 100f;\n}\n```"]