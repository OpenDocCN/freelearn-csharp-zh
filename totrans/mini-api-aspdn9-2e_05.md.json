["```cs\npublic class MySuperSimpleMiddlewareClass\n{\n    private readonly RequestDelegate _next;\n    public MySuperSimpleMiddlewareClass(\n        RequestDelegate next)\n    {\n        _next = next;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        Console.WriteLine(\n            \"Request handled by middleware component\");\n        await _next(context);\n        Console.WriteLine(\n            \"Response handled by middleware component\");\n    }\n}\n```", "```cs\nWebApplicationBuilder builder =\n    WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.UseMiddleware<MySuperSimpleMiddlewareClass>();\napp.Run();\n```", "```cs\napp.Use(async (context, next) =>\n{\n    Console.WriteLine(\n        \"Request handled by inline middleware component\");\n    await next(context);\n    Console.WriteLine(\n        \"Response handled by inline middleware component\");\n});\n```", "```cs\napp.Use(async (context, next) =>\n{\n});\n```", "```cs\napp.Use(async (context, next) =>\n{\n    Console.WriteLine(\n        $\"Request: {context.Request.Method}\n        {context.Request.Path}\");\n    await next(context);\n});\n```", "```cs\napp.Use(async (context, next) =>\n{\n    Console.WriteLine(\n        $\"Request: {context.Request.Method}\n        {context.Request.Path}\");\n    await next(context);\n    Console.WriteLine(\n        $\"Response: {context.Response.StatusCode}\");\n});\n```", "```cs\npublic class LoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n    public LoggingMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        Console.WriteLine(\n            $\"Request: {context.Request.Method}\n            {context.Request.Path}\");\n        await _next(context);\n        Console.WriteLine(\n            $\"Response: {context.Response.StatusCode}\");\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.UseMiddleware<LoggingMiddleware>();\napp.MapGet(\"/\", () => \"Hello World!\");\napp.Run();\n```", "```cs\npublic class IPBlockingMiddleware\n{\n    private readonly RequestDelegate _next;\n    public IPBlockingMiddleware(RequestDelegate next,\n        IEnumerable<string> blockedIPs)\n    {\n        _next = next;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        await _next(context);\n    }\n}\n```", "```cs\nvar requestIP =\n    context.Connection.RemoteIpAddress?.ToString();\n```", "```cs\nprivate readonly HashSet<string> _blockedIPs;\n```", "```cs\npublic IPBlockingMiddleware(RequestDelegate next,\n    IEnumerable<string> blockedIPs)\n    {\n        _next = next;\n        _blockedIPs = new HashSet<string>(blockedIPs);\n    }\n```", "```cs\npublic async Task InvokeAsync(HttpContext context)\n    {\n        var requestIP =\n            context.Connection.RemoteIpAddress?.ToString();\n        if (_blockedIPs.Contains(requestIP))\n        {\n            context.Response.StatusCode = 403;\n            Console.WriteLine(\n                $\"IP {requestIP} is blocked.\");\n            await context.Response.WriteAsync(\n                \"Your IP is blocked.\");\n            return;\n        }\n        Console.WriteLine($\"IP {requestIP} is allowed.\");\n        await _next(context);\n    }\n```", "```cs\npublic class IPBlockingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly HashSet<string> _blockedIPs;\n    public IPBlockingMiddleware(RequestDelegate next,\n        IEnumerable<string> blockedIPs)\n    {\n        _next = next;\n        _blockedIPs = new HashSet<string>(blockedIPs);\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var requestIP =\n            context.Connection.RemoteIpAddress?.ToString();\n        if (_blockedIPs.Contains(requestIP))\n        {\n            context.Response.StatusCode = 403;\n            await context.Response.WriteAsync(\n                \"Your IP is blocked.\");\n            return;\n        }\n        await _next(context);\n    }\n}\n```", "```cs\n//Create the list of blocked Ips\nprivate readonly List<string> _blockedIPs =\n    new List<string> { \"192.168.1.1\", \"203.0.113.0\" };\napp.UseMiddleware<IPBlockingMiddleware>(_blockedIPs);\n```", "```cs\napp.UseMiddleware<IPBlockingMiddleware>(\n    new List<string> { \"::1\" }\n);\n```", "```cs\npublic class ExceptionHandlingMiddleware\n{\n    private readonly RequestDelegate _next;\n    public ExceptionHandlingMiddleware(\n        RequestDelegate next)\n    {\n        _next = next;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\n                $\"Exception caught: {ex.Message}\");\n            context.Response.StatusCode = 500;\n            await context.Response.WriteAsync(\n                \"An unexpected error occurred.\");\n        }\n    }\n}\n```", "```cs\napp.MapGet(\"/employees/exceptionexample\", () =>\n{\n    throw new NotImplementedException();\n});\n```"]