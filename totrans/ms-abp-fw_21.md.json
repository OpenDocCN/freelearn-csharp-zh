["```cs\npublic static class MultiTenancyConsts\n{\n    public const bool IsEnabled = true;\n}\n```", "```cs\nConfigure<AbpMultiTenancyOptions>(options =>\n{\n    options.IsEnabled = MultiTenancyConsts.IsEnabled;\n});\n```", "```cs\nbuilder.ConfigureTenantManagement();\n```", "```cs\ndotnet ef migrations add Removed_TenantManagement\n```", "```cs\ndotnet ef database update\n```", "```cs\nif (MultiTenancyConsts.IsEnabled)\n{\n    app.UseMultiTenancy();\n}\n```", "```cs\nConfigure<AbpTenantResolveOptions>(options =>\n{\n    options.AddDomainTenantResolver(\"{0}.yourdomain.com\");\n});\n```", "```cs\npublic class MyService : ITransientDependency\n{\n    private readonly ICurrentTenant _currentTenant;\n    public MyService(ICurrentTenant currentTenant)\n    {\n        _currentTenant = currentTenant;\n    }\n\n    public async Task DoItAsync()\n    {\n        Guid? tenantId = _currentTenant.Id;\n        string tenantName = _currentTenant.Name;\n    }\n}\n```", "```cs\npublic class MyAppService : ApplicationService\n{\n    public async Task DoItAsync()\n    {\n        Guid? tenantId = CurrentTenant.Id;\n    }\n}\n```", "```cs\npublic class MyAppService : ApplicationService\n{\n    public async Task DoItAsync(Guid tenantId)\n    {\n        // Before the using block\n        using (CurrentTenant.Change(tenantId))\n        {\n            // Inside the using block\n            // CurrentTenant.Id equals to tenantId \n        }\n        // After the using block\n    }\n}\n```", "```cs\npublic class ProductAppService : ApplicationService\n{\n    private readonly IRepository<Product, Guid>\n        _productRepository;\n    public ProductAppService(\n        IRepository<Product, Guid> productRepository)\n    {\n        _productRepository = productRepository;\n    }\n    public async Task<long> GetTotalProductCountAsync()\n    {\n        using (DataFilter.Disable<IMultiTenant>())\n        {\n            return await\n                _productRepository.GetCountAsync();\n        }\n    }\n}\n```", "```cs\npublic class Product : AggregateRoot<Guid>, IMultiTenant\n{\n    public Guid? TenantId { get; set; }\n    public string Name { get; set; }\n}\n```", "```cs\npublic class MyAppFeatureDefinitionProvider :\n    FeatureDefinitionProvider\n{\n    public override void Define(\n        IFeatureDefinitionContext context)\n    {\n        var myGroup = context.AddGroup(\"MyApp\");        \n        myGroup.AddFeature(\n            \"MyApp.StockManagement\",\n            defaultValue: \"false\",\n            displayName: L(\"StockManagement\"),\n            isVisibleToClients: true);        \n        myGroup.AddFeature(\n            \"MyApp.MaxProductCount\", \n            defaultValue: \"100\",\n            displayName: L(\"MaxProductCount\"));\n    }\n    private ILocalizableString L(string name)\n    {\n        return \n            LocalizableString.Create<MtDemoResource>(name);\n    }\n}\n```", "```cs\n[RequiresFeature(\"MyApp.StockManagement\")]\npublic class StockAppService : ApplicationService,\n    IStockAppService\n{\n}\n```", "```cs\npublic class ProductAppService : ApplicationService\n{\n    ...    \n    [RequiresFeature(\"MyApp.StockManagement\")]\n    public async Task<long> GetStockCountAsync()\n    {\n        return await _productRepository.GetCountAsync();\n    }\n}\n```", "```cs\npublic async Task<long> GetStockCountAsync()\n{\n    if (await FeatureChecker\n             .IsEnabledAsync(\"MyApp.StockManagement\"))\n    {\n        return await _productRepository.GetCountAsync();\n    }\n    // TODO: Your fallback logic or error message\n}\n```", "```cs\npublic async Task<long> GetStockCountAsync()\n{\n    await FeatureChecker.CheckEnabledAsync(\"MyApp.StockManagement\");\n    return await _productRepository.GetCountAsync();\n}\n```", "```cs\npublic async Task CreateAsync(string name)\n{\n    var currentProductCount = await\n        _productRepository.GetCountAsync();\n    var maxProductCount = await\n           FeatureChecker.GetAsync<int>(\n               \"MyApp.MaxProductCount\");\n    if (currentProductCount >= maxProductCount)\n    {\n        // TODO: Throw a business exception\n    }    \n    // TODO: Continue to create the product\n}\n```", "```cs\nif (abp.features.isEnabled('MyApp.StockManagement'))\n{\n  // TODO: ...\n}\n```", "```cs\nmyGroup.AddFeature(\n    \"MyApp.StockManagement\",\n    defaultValue: \"false\",\n    displayName: L(\"StockManagement\"),\n    isVisibleToClients: true,\n    valueType: new ToggleStringValueType());\nmyGroup.AddFeature(\n    \"MyApp.MaxProductCount\", \n    defaultValue: \"100\",\n    displayName: L(\"MaxProductCount\"),\n    valueType: new FreeTextStringValueType(\n                   new NumericValueValidator()));\n```", "```cs\npublic class MyCustomerService : DomainService\n{\n    private readonly IFeatureManager _featureManager;\n    public MyCustomerService(IfeatureManager\n                             featureManager)\n    {\n        _featureManager = featureManager;\n    }\n\n    public async Task EnableStockManagementAsync(Guid\n                                                 tenantId)\n    {\n        await _featureManager.SetForTenantAsync(\n            tenantId,\n            \"MyApp.StockManagement\",\n            \"true\"\n        );\n    }\n}\n```"]