["```cs\n{\n```", "```cs\n  \"employee\": [\n```", "```cs\n    {\n```", "```cs\n      \"employeeid\": 1,\n```", "```cs\n      \"name\": \"Ravindra\",\n```", "```cs\n      \"salary\": 100,\n```", "```cs\n      \"Projects\": [\n```", "```cs\n        {\n```", "```cs\n          \"id\": 1,\n```", "```cs\n                  \"name\": \"project1\",\n```", "```cs\n        },\n```", "```cs\n        {\n```", "```cs\n                     \"id\": 2,\n```", "```cs\n                  \"name\": \"project2\",\n```", "```cs\n        }\n```", "```cs\n      ]\n```", "```cs\n    }\n```", "```cs\n  ]\n```", "```cs\n}\n```", "```cs\n    dotnet new console --framework net6.0 --name EcommerceSample\n    ```", "```cs\n    dotnet add package Microsoft.Azure.Cosmos -s https://api.nuget.org/v3/index.json\n    ```", "```cs\n    string Uri = \"YOUR URI HERE \";\n    string PrimaryKey = \"YOUR PRIMARY KEY HERE\";\n    ```", "```cs\n    using (CosmosClient cosmosClient = new CosmosClient(Uri,\n     PrimaryKey))\n    {\n     DatabaseResponse createDatabaseResponse\n    = await cosmosClient.CreateDatabaseIfNotExistsAsync\n    (\"ECommerce\");\n     Database database = createDatabaseResponse.Database;\n    }\n    ```", "```cs\n    var containerProperties = new ContainerProperties\n    (\"Products\", \"/Name\");\n    var createContainerResponse = await \n    database.CreateContainerIfNotExistsAsync(\n    containerProperties, 10000); \n    var productContainer = createContainerResponse.\n    Container;\n    ```", "```cs\n{\n  \"Id\": \"Book.1\",\n  \"Name\": \"Mastering enterprise application\n      development Book\",\n  \"Category\": \"Books\",\n  \"Price\": 100,\n  \"Quantity\": 100,\n  \"CreatedDate\": \"20-02-2020T00:00:00Z\",\n  \"ImageUrls\": [],\n  \"Rating\": [\n    {\"Stars\": 5, \"Percentage\": 95},\n    {\"Stars\": 4, \"Percentage\": 5}\n  ],\n  \"Format\": [\"PDF\",\"Hard Cover\"],\n  \"Authors\": [\"Rishabh Verma\",\"Neha Shrivastava\",\n      \"Ravindra Akela\",\"Bhupesh Guptha\"],\n  \"Size\": [],\n  \"Color\": []\n}\n```", "```cs\n    public class Rating{\n        public int Stars { get; set; }\n        public int Percentage { get; set; }\n    }\n    public class Product{\n        [JsonProperty(PropertyName = \"id\")]\n        public string ProductId { get; set; }\n        public string Name { get; set; }\n        public string Category { get; set; }\n        public int Price { get; set; }\n        public int Quantity { get; set; }\n        public DateTime CreatedDate { get; set; }\n        public List<string>  ImageUrls { get; set; }\n        public List<Rating> Rating { get; set; }\n        public List<string> Format { get; set; }\n        public List<string> Authors { get; set; }\n        public List<int> Size { get; set; }\n        public List<string> Color { get; set; }\n    }\n    ```", "```cs\n    Product book = new Product()\n    {\n        ProductId = \"Book.1\", Category = \"Books\", Price =\n        100,\n        Name = \"Mastering enterprise application\n        development Book\",                    \n        Rating = new List<Rating>() { new Rating { Stars =\n        5, Percentage = 95 }, new Rating { Stars = 4,\n        Percentage = 5 } },\n        Format = new List<string>() { \"PDF\", \"Hard Cover\" \n        },\n        Authors = new List<string>() { \"Suneel\", \"Arun\", \n          \"Ravindra\", \"Bhupesh\" }\n    };\n    ```", "```cs\n    try\n    {\n        // Check if item it exists.  \n        ItemResponse<Product> productBookResponse = await \n          productContainer.ReadItemAsync<Product>(\n          book.ProductId, new PartitionKey(book.Name));\n    }\n    catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n    {\n        ItemResponse<Product> productBookResponse = await \n          productContainer.CreateItemAsync<Product>(book, \n          new PartitionKey(book.Name));\n        Console.WriteLine($\"Created item \n          {productBookResponse.Resource.ProductId}\");\n    }\n    ```", "```cs\n    string getAllProductsByBooksCAtegory = \"SELECT * FROM p WHERE p.Category = 'Books'\";\n    QueryDefinition query = new QueryDefinition(getAllProductsByBooksCAtegory);\n    FeedIterator<Product> iterator = productContainer.GetItemQueryIterator<Product>(query);\n    while (iterator.HasMoreResults)\n    {\n        FeedResponse<Product> result = await \n          iterator.ReadNextAsync();\n        foreach (Product product in result)\n        {\n            Console.WriteLine($\"Book retrived –\n            {product.Name}\");\n        }\n    }\n    ```", "```cs\n       string connectionString = «CONNECTION_STRING\";\n       string containerName = «fileuploadsample\";\n       string blobFileName = «sample.png\";\n       // Upload file to blob            \n       BlobContainerClient containerClient = new \n       BlobContainerClient(connectionString, \n       containerName);\n       await containerClient.CreateIfNotExistsAsync(\n         PublicAccessType.None);//Making blob private.\n    ```", "```cs\n    BlobClient blobClient = new BlobClient(connectionString, \n    containerName, blobFileName);\n    using FileStream fileStream = File.OpenRead(blobFileName); // blobFileName is relative path of the file.\n    await blobClient.UploadAsync(fileStream, true);\n    fileStream.Close();\n    Console.WriteLine(blobClient.Uri.ToString());\n    ```", "```cs\nBlobSasBuilder sasBuilder = new BlobSasBuilder()\n{\n    BlobContainerName = containerClient.Name,\n    Resource = \"b\", // c for container\n    BlobName = blobClient.Name\n};\nsasBuilder.ExpiresOn = DateTimeOffset.UtcNow.AddHours(1); // Setting expiry time of the SAS link to 1 hour\nsasBuilder.SetPermissions(BlobContainerSasPermissions.Read);\nif (blobClient.CanGenerateSasUri)\n{\n    Uri blobSasUri = \n      blobClient.GenerateSasUri(sasBuilder);\n    Console.WriteLine(blobSasUri.ToString());\n}\nConsole.ReadLine();\n```", "```cs\npublic virtual DbSet<Employee> Employees { get; set; }\n```", "```cs\n    dotnet new webapp --framework net6.0 --name EmployeeEF\n    ```", "```cs\n        public class Address\n        {\n         public int AddressId { get; set; }\n         public int EmployeeId { get; set; }\n         public string City { get; set; }\n         public Employee Employee { get; set; }\n        }\n        public class Employee\n        {\n         public int EmployeeId { get; set; }\n         public string Name { get; set; }\n         public string Email { get; set; }\n         public ICollection<Address> Address { get; set; }\n        }   \n    ```", "```cs\n        public class EmployeeContext : DbContext\n        {\n            public DbSet<Employee> Employees { get; set;}\n            public DbSet<Address> Addresses { get; set;}\n             public EmployeeContext (DbContextOptions\n             <EmployeeContext> options)\n                : base(options)\n            {}\n            protected override void OnModelCreating\n            (ModelBuilder modelBuilder)\n            {\n                modelBuilder.Entity<Employee>().ToTable\n                (\"Employee\");\n                modelBuilder.Entity<Address>().ToTable\n                (\"Address\");\n            }\n        }\n    ```", "```cs\n      \"ConnectionStrings\": {\n        \"EmployeeContext\": \"Data Source=Employee.db\"\n      }\n    ```", "```cs\n    builder.Services.AddDbContext<EmployeeContext>(options =>\n    { \n     options.UseSqlite(builder.Configuration.GetConnectionString(\"EmployeeContext\"));\n    });\n    ```", "```cs\n        public static void SeedData(this EmployeeContext\n        context)\n        {\n            SeedEmployees(context);            \n        }\n        private static void SeedEmployees(EmployeeContext\n        context)\n        {\n            if (context.Employees.Any())\n            {\n                return;\n            }\n            var employees = new Employee[]\n            {\n                new Employee{EmployeeId = 1, Name =\n                \"Sample1\", Email=\"Sample@sample.com\"},\n                new Employee{EmployeeId = 2, Name =\n                \"Sample2\", Email=\"Sample2@sample.com\"},\n                new Employee{EmployeeId = 3, Name =\n                \"Sample3\", Email=\"Sample3@sample.com\"}\n             };\n            context.Employees.AddRange(employees);\n            var adresses = new Address[]\n            {\n             new Address{AddressId = 1, City = \"City1\",\n             EmployeeId = 1},\n             new Address{AddressId = 2, City = \"City2\",\n             EmployeeId = 1},\n             new Address{AddressId = 3, City = \"City1\",\n             EmployeeId = 2},\n            };\n            context.Addresses.AddRange(adresses);\n            context.SaveChanges();\n        }\n    ```", "```cs\n    using (var serviceScope = ((IApplicationBuilder)app).ApplicationServices?.GetService<IServiceScopeFactory>()?.CreateScope())\n        {\n          using (var context = \n            serviceScope?.ServiceProvider\n            .GetRequiredService<EmployeeContext>())\n          {\n            context?.SeedData();\n          }\n        }\n    ```", "```cs\n    dotnet tool install --global dotnet-ef --ignore-failed-sources //Installing dotnet ef.\n    dotnet ef migrations add InitialCreate //Generate DB migrations.\n    dotnet ef database update //Update database.\n    ```", "```cs\n    public class IndexModel : PageModel\n        {\n            private readonly EmployeeContext context;\n            public IndexModel(EmployeeContext context)\n            {\n                this.context = context;\n            }\n             public Ilist<Employee> Employees { get; set; \n             }\n             public async Task OnGetAsync()\n            {\n                this.Employees = await this.context.\n                Employees.Include(x => x.Address).\n                AsNoTracking().ToListAsync();\n            }\n        }\n    ```", "```cs\n    <table class=\"table\">\n    <tbody>\n        @foreach (var item in Model.Employees)\n        {<tr>\n                <td>@Html.DisplayFor(modelItem =>\n                item.EmployeeId)</td>\n                <td>@Html.DisplayFor(modelItem =>\n                item.Name)</td>\n                <td>@Html.DisplayFor(modelItem =>\n                item.Email)</td>\n                <td>\n                    @foreach (var address in item.Address)\n                    {\n                        @Html.DisplayFor(modelItem =>\n                        address.City) @Html.DisplayName(\"\n                         \")\n                    }\n                </td>\n            </tr>\n        }\n    </tbody>\n    </table>\n    ```", "```cs\nScaffold-DbContext \"Data Source=.;Initial Catalog=Employee.DB;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -Namespace Api.Data.Models -ContextNamespaceApi.Data -ContextDir Api.Data/Abstraction -Context EmployeeContext -Force\n```", "```cs\n    {\n      \"Id\": \"1\",\n      \"Name\": \"John\",\n      \"Email\": \"John@xyz.com\",\n      \"Address\":[{\"Address1\":\"Gachibowli\",\"City\":\n          \"Hyderabad\",\"Country\":\"India\"}],\n      \"PhoneNumber\":12345\n    }\n    ```", "```cs\n    {\n      \"Id\": \"1\",\n      \"UserId\": \"1\",\n      \"Products\": [{\"Id\":\"1\",\"Name\":\n          \"T-Shirt\",\"Quantity\": 1,\"Price\": 10}],\n      \"OrderStatus\" : \"Processed\",\n      \"OrderPlacedDate\" : \"20-02-2020T00:00:00Z\",\n      \"ShippingAddress\": {\"Address1\":\"Gachibowli\",\n          \"City\":\"Hyderabad\",\"Country\":\"India\"},\n      \"TrackingId\": 1,\n      \"DeliveryDate\":\"28-02-2020T00:00:00Z\"\n    }\n    ```", "```cs\n    {\n      \"Id\": \"1\",\n      \"OrderId\": \"1\",\n      \"PaymentMode\": \"Credit Card\",\n      \"ShippingAddress\": {\"Address1\":\"Gachibowli\",\n         \"City\":\"Hyderabad\",\"Country\":\"India\"},\n      \"SoldBy\": {\"SellerName\": \"Seller1\",  \"Email\":\n         \"seller@ecommerce.com\", \"Phone\": \"98765432\"},  \n      \"Products\": [{\"Id\":\"1\", \"Name\": \"T-Shirt\", \n         \"Quantity\": 1, \"Price\": 10}]\n    }\n    ```", "```cs\npublic class BaseRepository<TEntity> : IBaseRepository<TEntity>\n```", "```cs\nwhere TEntity : class\n```", "```cs\n        private readonly Container container;\n```", "```cs\n        public BaseRepository(CosmosClient cosmosClient,\n```", "```cs\n        string databaseName, string containerName)\n```", "```cs\n        {\n```", "```cs\n            if (cosmosClient == null)\n```", "```cs\n            {\n```", "```cs\n                throw new Exception(\"Cosmos client is\n```", "```cs\n                 null\");\n```", "```cs\n            }\n```", "```cs\n            this.container = cosmosClient.GetContainer\n```", "```cs\n            (databaseName, containerName);\n```", "```cs\n        }\n```", "```cs\n    public class ProductRepository :\n```", "```cs\n    BaseRepository<Product>, IProductRepository\n```", "```cs\n    {\n```", "```cs\n        private readonly IOptions<DatabaseSettingsOptions>\n```", "```cs\n        databaseSettings;\n```", "```cs\n        public ProductRepository(CosmosClient,\n```", "```cs\n        IOptions<DatabaseSettingsOptions>\n```", "```cs\n        databaseSettingsOption)\n```", "```cs\n            : base(cosmosClient, databaseSettingsOption.\n```", "```cs\n              Value.DataBaseName, \"Products\")\n```", "```cs\n        {\n```", "```cs\n            this.databaseSettings = databaseSettingsOption;\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n  \"CosmosDB\": {\n```", "```cs\n    \"DataBaseName\": \"Ecommerce\",\n```", "```cs\n    \"AccountEndPoint\": \"\",\n```", "```cs\n    \"AuthKey\": \"\"\n```", "```cs\n  }\n```", "```cs\n    public static class RepositoryExtensions\n```", "```cs\n    {\n```", "```cs\n        public static IServiceCollection\n```", "```cs\n        AddRepositories(this IServiceCollection services)\n```", "```cs\n        {\n```", "```cs\n            services.AddScoped<IproductRepository,\n```", "```cs\n            ProductRepository>();\n```", "```cs\n            return services;\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\nbuilder.Services.AddOptions();\n```", "```cs\nbuilder.Services.Configure<DatabaseSettingsOptions>(builder.Configuration.GetSection(\"CosmosDB\"));\n```", "```cs\nstring accountEndPoint = builder.Configuration.GetValue<string>(\"CosmosDB:AccountEndPoint\");\n```", "```cs\nstring authKey = builder.Configuration.GetValue<string>(\"CosmosDB:AuthKey\");\n```", "```cs\nbuilder.Services.AddSingleton(s => new CosmosClient(accountEndPoint, authKey));\n```", "```cs\nbuilder.Services.AddRepositories();\n```"]