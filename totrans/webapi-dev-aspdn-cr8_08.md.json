["```cs\n    AuthenticationDemo. Open the project in VS Code. You can find the start project in the /samples/chapter8/AuthenticationDemo/BasicAuthenticationDemo/start folder.\n    ```", "```cs\n    public class AppUser : IdentityUser{}\n    ```", "```cs\n    public class AppDbContext(DbContextOptions<AppDbContext> options, IConfiguration configuration) : IdentityDbContext<AppUser>(options){    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)    {        base.OnConfiguring(optionsBuilder);        optionsBuilder.UseSqlServer(_configuration.GetConnectionString(\"DefaultConnection\"));    }}\n    \"ConnectionStrings\": {    \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=AuthenticationDemo;Trusted_Connection=True;MultipleActiveResultSets=true\"}\n    ```", "```cs\n    public class AddOrUpdateAppUserModel{    [Required(ErrorMessage = \"User name is required\")]    public string UserName { get; set; } = string.Empty;    [EmailAddress]    [Required(ErrorMessage = \"Email is required\")]    public string Email { get; set; } = string.Empty;    [Required(ErrorMessage = \"Password is required\")]    public string Password { get; set; } = string.Empty;}\n    ```", "```cs\n    public class LoginModel{    [Required(ErrorMessage = \"User name is required\")]    public string UserName { get; set; } = string.Empty;    [Required(ErrorMessage = \"Password is required\")]    public string Password { get; set; } = string.Empty;}\n    public class AppUser : IdentityUser{    public string FirstName { get; set; }    public string LastName { get; set; }    public string ProfilePicture { get; set; }}\n    ```", "```cs\n    \"JwtConfig\": {    \"ValidAudiences\": \"http://localhost:5056\",    \"ValidIssuer\": \"http://localhost:5056\",    \"Secret\": \"c1708c6d-7c94-466e-aca3-e09dcd1c2042\"  }\n    ```", "```cs\n    // Omitted for brevitybuilder.Services.AddControllers();builder.Services.AddDbContext<AppDbContext>();builder.Services.AddIdentityCore<AppUser>()    .AddEntityFrameworkStores<AppDbContext>()    .AddDefaultTokenProviders();builder.Services.AddAuthentication(options =>{    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;}).AddJwtBearer(options =>{    var secret = builder.Configuration[\"JwtConfig:Secret\"];    var issuer = builder.Configuration[\"JwtConfig:ValidIssuer\"];    var audience = builder.Configuration[\"JwtConfig:ValidAudiences\"];    if (secret is null || issuer is null || audience is null)    {        throw new ApplicationException(\"Jwt is not set in the configuration\");    }    options.SaveToken = true;    options.RequireHttpsMetadata = false;    options.TokenValidationParameters = new TokenValidationParameters()    {        ValidateIssuer = true,        ValidateAudience = true,        ValidAudience = audience,        ValidIssuer = issuer,        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret))    };});// Omitted for brevityapp.UseHttpsRedirection();app.UseAuthentication();app.UseAuthorization();// Omitted for brevity\n    ```", "```cs\n    dotnet ef migrations add InitialDbdotnet ef database update\n    ```", "```cs\n    using (var serviceScope = app.Services.CreateScope()){    var services = serviceScope.ServiceProvider;    // Ensure the database is created.    var dbContext = services.GetRequiredService<AppDbContext>();    dbContext.Database.EnsureCreated();}\n    ```", "```cs\n    [Authorize][ApiController][Route(\"[controller]\")]public class WeatherForecastController : ControllerBase{    // ...}\n    ```", "```cs\n        [ApiController][Route(\"[controller]\")]public class AccountController(UserManager<AppUser> userManager, IConfiguration configuration) : ControllerBase{}\n        ```", "```cs\n        [HttpPost(\"register\")]public async Task<IActionResult> Register([FromBody] AddOrUpdateAppUserModel model){    // Check if the model is valid    if (ModelState.IsValid)    {        var existedUser = await userManager.FindByNameAsync(model.UserName);        if (existedUser != null)        {            ModelState.AddModelError(\"\", \"User name is already taken\");            return BadRequest(ModelState);        }        // Create a new user object        var user = new AppUser()        {            UserName = model.UserName,            Email = model.Email,            SecurityStamp = Guid.NewGuid().ToString()        };        // Try to save the user        var result = await userManager.CreateAsync(user, model.Password);        // If the user is successfully created, return Ok        if (result.Succeeded)        {            var token = GenerateToken(model.UserName);            return Ok(new { token });        }        // If there are any errors, add them to the ModelState object        // and return the error to the client        foreach (var error in result.Errors)        {            ModelState.AddModelError(\"\", error.Description);        }    }    // If we got this far, something failed, redisplay form    return BadRequest(ModelState);}\n        private string? GenerateToken(string userName){    var secret = _configuration[\"JwtConfig:Secret\"];    var issuer = _configuration[\"JwtConfig:ValidIssuer\"];    var audience = _configuration[\"JwtConfig:ValidAudiences\"];    if (secret is null || issuer is null || audience is null)    {        throw new ApplicationException(\"Jwt is not set in the configuration\");    }    var signingKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret));    var tokenHandler = new JwtSecurityTokenHandler();    var tokenDescriptor = new SecurityTokenDescriptor    {        Subject = new ClaimsIdentity(new[]        {            new Claim(ClaimTypes.Name, userName)        }),        Expires = DateTime.UtcNow.AddDays(1),        Issuer = issuer,        Audience = audience,        SigningCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256Signature)    };    var securityToken = tokenHandler.CreateToken(tokenDescriptor);    var token = tokenHandler.WriteToken(securityToken);    return token;}\n        ```", "```cs\n        {  \"userName\": \"admin\",  \"email\": \"admin@example.com\",  \"password\": \"Passw0rd!\"}\n        ```", "```cs\n[HttpPost(\"login\")]public async Task<IActionResult> Login([FromBody] LoginModel model)\n{\n    // Get the secret in the configuration\n    // Check if the model is valid\n    if (ModelState.IsValid)\n    {\n        var user = await _userManager.FindByNameAsync(model.UserName);\n        if (user != null)\n        {\n            if (await _userManager.CheckPasswordAsync(user, model.Password))\n            {\n                var token = GenerateToken(model.UserName);\n                return Ok(new { token });\n            }\n        }\n        // If the user is not found, display an error message\n        ModelState.AddModelError(\"\", \"Invalid username or password\");\n    }\n    return BadRequest(ModelState);\n}\n```", "```cs\n{  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```", "```cs\n{  \"unique_name\": \"admin\",\n  \"nbf\": 1679779000,\n  \"exp\": 1679865400,\n  \"iat\": 1679779000,\n  \"iss\": \"http://localhost:5056\",\n  \"aud\": \"http://localhost:5056\"\n}\n```", "```cs\nvar httpClient = new HttpClient();// Create a post request with the user name and password\nvar request = new HttpRequestMessage(HttpMethod.Post, \"http://localhost:5056/authentication/login\");\nrequest.Content = new StringContent(JsonSerializer.Serialize(new LoginModel()\n{\n    UserName = userName,\n    Password = password\n}), Encoding.UTF8, \"application/json\");\nvar response = await httpClient.SendAsync(request);\nvar token = string.Empty;\nif (response.IsSuccessStatusCode)\n{\n    var content = await response.Content.ReadAsStringAsync();\n    var jwtToken = JsonSerializer.Deserialize<JwtToken>(content);\n    Console.WriteLine(jwtToken.token);\n    token = jwtToken.token;\n}\n```", "```cs\nrequest = new HttpRequestMessage(HttpMethod.Get, \"http://localhost:5056/WeatherForecast\");// Add the token to the request header\nrequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\nresponse = await httpClient.SendAsync(request);\nif (response.IsSuccessStatusCode)\n{\n    var content = await response.Content.ReadAsStringAsync();\n    var weatherForecasts = JsonSerializer.Deserialize<IEnumerable<WeatherForecast>>(content);\n    foreach (var weatherForecast in weatherForecasts)\n    {\n        Console.WriteLine(\"Date: {0:d}\", weatherForecast.Date);\n        Console.WriteLine($\"Temperature (C): {weatherForecast.TemperatureC}\");\n        Console.WriteLine($\"Temperature (F): {weatherForecast.TemperatureF}\");\n        Console.WriteLine($\"Summary: {weatherForecast.Summary}\");\n    }\n}\n```", "```cs\nbuilder.Services.AddSwaggerGen(c =>{\n    c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme\n    {\n        Description = \"JWT Authorization header using the Bearer scheme. Example: \\\"Authorization: Bearer {token}\\\"\",\n        Name = \"Authorization\",\n        In = ParameterLocation.Header,\n        Type = SecuritySchemeType.ApiKey,\n        Scheme = \"Bearer\"\n    });\n    c.AddSecurityRequirement(new OpenApiSecurityRequirement\n    {\n        {\n            new OpenApiSecurityScheme\n            {\n                Reference = new OpenApiReference\n                {\n                    Type = ReferenceType.SecurityScheme,\n                    Id = \"Bearer\"\n                }\n            },\n            new string[] { }\n        }\n    });\n});\n```", "```cs\n    AppRoles that is defined as follows:\n\n    ```", "```cs\n\n    ```", "```cs\n    // Use the `AddRoles()` methodbuilder.Services.AddIdentityCore<AppUser>()    .AddRoles<IdentityRole>()    .AddEntityFrameworkStores<AppDbContext>()    .AddDefaultTokenProviders();\n    ```", "```cs\n    using (var serviceScope = app.Services.CreateScope()){    var services = serviceScope.ServiceProvider;    var roleManager = app.Services.GetRequiredService<RoleManager<IdentityRole>>();    if (!await roleManager.RoleExistsAsync(AppRoles.User))    {        await roleManager.CreateAsync(new IdentityRole(AppRoles.User));    }    if (!await roleManager.RoleExistsAsync(AppRoles.VipUser))    {        await roleManager.CreateAsync(new IdentityRole(AppRoles.VipUser));    }    if (!await roleManager.RoleExistsAsync(AppRoles.Administrator))    {        await roleManager.CreateAsync(new IdentityRole(AppRoles.Administrator));    }}\n    ```", "```cs\n    // Omitted for brevity// Try to save the uservar userResult = await userManager.CreateAsync(user, model.Password);// Add the user to the \"User\" rolevar roleResult = await userManager.AddToRoleAsync(user, AppRoles.User);// If the user is successfully created, return Okif (userResult.Succeeded && roleResult.Succeeded){    var token = GenerateToken(model.UserName);    return Ok(new { token });}\n    ```", "```cs\n    var userRoles = await userManager.GetRolesAsync(user);var claims = new List<Claim>{    new(ClaimTypes.Name, userName)};claims.AddRange(userRoles.Select(role => new Claim(ClaimTypes.Role, role)));var tokenDescriptor = new SecurityTokenDescriptor{    Subject = new ClaimsIdentity(claims),    Expires = DateTime.UtcNow.AddDays(1),    Issuer = issuer,    Audience = audience,    SigningCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256Signature)};\n    ```", "```cs\n    {  \"unique_name\": \"admin\",  \"role\": \"Administrator\",  \"nbf\": 1679815694,  \"exp\": 1679902094,  \"iat\": 1679815694,  \"iss\": \"http://localhost:5056\",  \"aud\": \"http://localhost:5056\"}\n    ```", "```cs\n    [HttpGet(\"admin\", Name = \"GetAdminWeatherForecast\")][Authorize(Roles = AppRoles.Administrator)]public IEnumerable<WeatherForecast> GetAdmin(){    return Enumerable.Range(1, 20).Select(index => new WeatherForecast    {        Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),        TemperatureC = Random.Shared.Next(-20, 55),        Summary = Summaries[Random.Shared.Next(Summaries.Length)]    })    .ToArray();}\n    ```", "```cs\n[HttpGet(Name = \"GetWeatherForecast\")][Authorize(Roles = $\"{AppRoles.User},{AppRoles.VipUser},{AppRoles.Administrator}\")]\npublic IEnumerable<WeatherForecast> Get()\n{\n    // Omitted for brevity\n}\n```", "```cs\n[HttpGet(\"vip\", Name = \"GetVipWeatherForecast\")][Authorize(Roles = AppRoles.User)]\n[Authorize(Roles = AppRoles.VipUser)]\npublic IEnumerable<WeatherForecast> GetVip()\n{\n    // Omitted for brevity\n}\n```", "```cs\nbuilder.Services.AddAuthorization(options =>{\n    options.AddPolicy(\"RequireAdministratorRole\", policy => policy.RequireRole(AppRoles.Administrator));\n    options.AddPolicy(\"RequireVipUserRole\", policy => policy.RequireRole(AppRoles.VipUser));\n    options.AddPolicy(\"RequireUserRole\", policy => policy.RequireRole(AppRoles.User));\n    options.AddPolicy(\"RequireUserRoleOrVipUserRole\", policy => policy.RequireRole(AppRoles.User, AppRoles.VipUser));\n});\n```", "```cs\n[HttpGet(\"admin-with-policy\", Name = \"GetAdminWeatherForecastWithPolicy\")][Authorize(Policy = \"RequireAdministratorRole\")]\npublic IEnumerable<WeatherForecast> GetAdminWithPolicy()\n{\n    // Omitted for brevity\n}\n```", "```cs\n    ClaimTypes class that contains the common claim types, such as NameIdentifier,  DateOfBirth, Email, Gender, GivenName, Name, PostalCode, and others, including Role. This is why we said that roles are also claims. You can also define your own claim types. For example, we can define the following claim types in the AppClaimTypes class:\n\n    ```", "```cs\n\n    ```", "```cs\n    public static class AppAuthorizationPolicies{    public const string RequireDrivingLicenseNumber = \"RequireDrivingLicenseNumber\";    public const string RequireAccessNumber = \"RequireAccessNumber\";}\n    ```", "```cs\n    // Omitted for brevityvar tokenDescriptor = new SecurityTokenDescriptor{    Subject = new ClaimsIdentity(new[]    {        new Claim(ClaimTypes.Name, userName),        // Suppose the user's information is stored in the database so that we can retrieve it from the database        new Claim(ClaimTypes.Country, \"New Zealand\"),        // Add our custom claims        new Claim(AppClaimTypes.AccessNumber, \"12345678\"),        new Claim(AppClaimTypes.DrivingLicenseNumber, \"123456789\")    }),    Expires = DateTime.UtcNow.AddDays(1),    Issuer = issuer,    Audience = audience,    SigningCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256Signature)};// Omitted for brevity\n    ```", "```cs\n    builder.Services.AddAuthorization(options =>{    options.AddPolicy(AppAuthorizationPolicies.RequireDrivingLicense, policy => policy.RequireClaim(AppClaimTypes.DrivingLicenseNumber));    options.AddPolicy(AppAuthorizationPolicies.RequireAccessNumber, policy => policy.RequireClaim(AppClaimTypes.AccessNumber));});\n    ```", "```cs\n    [Authorize(Policy = AppAuthorizationPolicies.RequireDrivingLicense)][HttpGet(\"driving-license\")]public IActionResult GetDrivingLicense(){    var drivingLicenseNumber = User.Claims.FirstOrDefault(c => c.Type == AppClaimTypes.DrivingLicenseNumber)?.Value;    return Ok(new { drivingLicenseNumber });}\n    ```", "```cs\n    {  \"unique_name\": \"user\",  \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\": \"New Zealand\",  \"AccessNumber\": \"12345678\",  \"DrivingLicenseNumber\": \"123456789\",  \"nbf\": 1679824749,  \"exp\": 1679911149,  \"iat\": 1679824749,  \"iss\": \"http://localhost:5056\",  \"aud\": \"http://localhost:5056\"}\n    ```", "```cs\n    builder.Services.AddAuthorization(options =>{    // Omitted for brevity    options.AddPolicy(AppAuthorizationPolicies.RequireCountry, policy => policy.RequireClaim(ClaimTypes.Country, \"New Zealand\"));});\n    options.AddPolicy(AppAuthorizationPolicies.RequireCountry, policy => policy.RequireClaim(ClaimTypes.Country, \"New Zealand\", \"Australia\"));\n    ```", "```cs\n    [Authorize(Policy = AppAuthorizationPolicies.RequireCountry)][HttpGet(\"country\")]public IActionResult GetCountry(){    var country = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Country)?.Value;    return Ok(new { country });}\n    ```", "```cs\n[Authorize(Policy = AppAuthorizationPolicies.RequireDrivingLicense)][Authorize(Policy = AppAuthorizationPolicies.RequireAccessNumber)]\n[HttpGet(\"driving-license-and-access-number\")]\npublic IActionResult GetDrivingLicenseAndAccessNumber()\n{\n    var drivingLicenseNumber = User.Claims.FirstOrDefault(c => c.Type == AppClaimTypes.DrivingLicenseNumber)?.Value;\n    var accessNumber = User.Claims.FirstOrDefault(c => c.Type == AppClaimTypes.AccessNumber)?.Value;\n    return Ok(new { drivingLicenseNumber, accessNumber });\n}\n```", "```cs\nbuilder.Services.AddAuthorization(options =>{\n    // Omitted for brevity\n    options.AddPolicy(AppAuthorizationPolicies.RequireDrivingLicenseAndAccessNumber, policy => policy.RequireAssertion(context =>\n    {\n        var hasDrivingLicenseNumber = context.User.HasClaim(c => c.Type == AppClaimTypes.DrivingLicenseNumber);\n        var hasAccessNumber = context.User.HasClaim(c => c.Type == AppClaimTypes.AccessNumber);\n        return hasDrivingLicenseNumber && hasAccessNumber;\n    }));\n});\n```", "```cs\n[Authorize(Policy = AppAuthorizationPolicies.RequireDrivingLicenseAndAccessNumber)][HttpGet(\"driving-license-and-access-number\")]\npublic IActionResult GetDrivingLicenseAndAccessNumber()\n{\n    // Omitted for brevity\n}\n```", "```cs\npublic void AddPolicy(string name, Action<AuthorizationPolicyBuilder> configurePolicy){\n    // Omitted for brevity\n}\n```", "```cs\npublic AuthorizationPolicyBuilder RequireRole(IEnumerable<string> roles){\n    ArgumentNullThrowHelper.ThrowIfNull(roles);\n    Requirements.Add(new RolesAuthorizationRequirement(roles));\n    return this;\n}\n```", "```cs\npublic AuthorizationPolicyBuilder RequireClaim(string claimType){\n    ArgumentNullThrowHelper.ThrowIfNull(claimType);\n    Requirements.Add(new ClaimsAuthorizationRequirement(claimType, allowedValues: null));\n    return this;\n}\n```", "```cs\npublic IList<IAuthorizationRequirement> Requirements { get; set; } = new List<IAuthorizationRequirement>();\n```", "```cs\n// RolesAuthorizationRequirementpublic class RolesAuthorizationRequirement : AuthorizationHandler<RolesAuthorizationRequirement>, IAuthorizationRequirement\n{\n    // Omitted for brevity\n}\n// ClaimsAuthorizationRequirement\npublic class ClaimsAuthorizationRequirement : AuthorizationHandler<ClaimsAuthorizationRequirement>, IAuthorizationRequirement\n{\n    // Omitted for brevity\n}\n```", "```cs\npublic abstract class AuthorizationHandler<TRequirement> : IAuthorizationHandler        where TRequirement : IAuthorizationRequirement\n{\n    /// <summary>\n    /// Makes a decision if authorization is allowed.\n    /// </summary>\n    /// <param name=\"context\">The authorization context.</param>\n    public virtual async Task HandleAsync(AuthorizationHandlerContext context)\n    {\n        foreach (var req in context.Requirements.OfType<TRequirement>())\n        {\n            await HandleRequirementAsync(context, req).ConfigureAwait(false);\n        }\n    }\n    /// <summary>\n    /// Makes a decision if authorization is allowed based on a specific requirement.\n    /// </summary>\n    /// <param name=\"context\">The authorization context.</param>\n    /// <param name=\"requirement\">The requirement to evaluate.</param>\n    protected abstract Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement);\n}\n```", "```cs\npublic RolesAuthorizationRequirement(IEnumerable<string> allowedRoles){\n    ArgumentNullThrowHelper.ThrowIfNull(allowedRoles);\n    if (!allowedRoles.Any())\n    {\n        throw new InvalidOperationException(Resources.Exception_RoleRequirementEmpty);\n    }\n    AllowedRoles = allowedRoles;\n}\n/// <summary>\n/// Gets the collection of allowed roles.\n/// </summary>\npublic IEnumerable<string> AllowedRoles { get; }\n/// <summary>\n/// Makes a decision if authorization is allowed based on a specific requirement.\n/// </summary>\n/// <param name=\"context\">The authorization context.</param>\n/// <param name=\"requirement\">The requirement to evaluate.</param>\nprotected override Task HandleRequirementAsync(AuthorizationHandlerContext context, RolesAuthorizationRequirement requirement)\n{\n    if (context.User != null)\n    {\n        var found = false;\n        foreach (var role in requirement.AllowedRoles)\n        {\n            if (context.User.IsInRole(role))\n            {\n                found = true;\n                break;\n            }\n        }\n        if (found)\n        {\n            context.Succeed(requirement);\n        }\n    }\n    return Task.CompletedTask;\n}\n```", "```cs\npublic static IApplicationBuilder UseAuthorization(this IApplicationBuilder app){\n    // Omitted for brevity\n    return app.UseMiddleware<AuthorizationMiddleware>();\n}\n```", "```cs\n// Omitted for brevityvar authorizeData = endpoint?.Metadata.GetOrderedMetadata<IAuthorizeData>() ?? Array.Empty<IAuthorizeData>();\nvar policies = endpoint?.Metadata.GetOrderedMetadata<AuthorizationPolicy>() ?? Array.Empty<AuthorizationPolicy>();\n// Omitted for brevity\nvar policyEvaluator = context.RequestServices.GetRequiredService<IPolicyEvaluator>();\nvar authenticateResult = await policyEvaluator.AuthenticateAsync(policy, context);\n// Omitted for brevity\nvar authorizeResult = await policyEvaluator.AuthorizeAsync(policy, authenticateResult!, context, resource);\n// Omitted for brevity\n```", "```cs\npublic interface IPolicyEvaluator{\n    Task<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context);\n    Task<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy, AuthenticateResult authenticationResult, HttpContext context, object? resource);\n}\n```", "```cs\npublic interface IAuthorizationService{\n    Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object? resource, IEnumerable<IAuthorizationRequirement> requirements);\n    Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object? resource, string policyName);\n}\n```", "```cs\npublic virtual async Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object? resource, IEnumerable<IAuthorizationRequirement> requirements){\n    ArgumentNullThrowHelper.ThrowIfNull(requirements);\n    var authContext = _contextFactory.CreateContext(requirements, user, resource);\n    var handlers = await _handlers.GetHandlersAsync(authContext).ConfigureAwait(false);\n    foreach (var handler in handlers)\n    {\n        await handler.HandleAsync(authContext).ConfigureAwait(false);\n        if (!_options.InvokeHandlersAfterFailure && authContext.HasFailed)\n        {\n            break;\n        }\n    }\n    var result = _evaluator.Evaluate(authContext);\n    if (result.Succeeded)\n    {\n        _logger.UserAuthorizationSucceeded();\n    }\n    else\n    {\n        _logger.UserAuthorizationFailed(result.Failure);\n    }\n    return result;\n}\n```", "```cs\n    public static class AppClaimTypes{    public const string Subscription = \"Subscription\";}public static class AppAuthorizationPolicies{    public const string SpecialPremiumContent = \"SpecialPremiumContent\";}\n    ```", "```cs\n    private string? GenerateToken(string userName, string country){    // Omitted for brevity    var tokenDescriptor = new SecurityTokenDescriptor    {        Subject = new ClaimsIdentity(new[]        {            new Claim(ClaimTypes.Name, userName),            new Claim(AppClaimTypes.Subscription, \"Premium\"),            new Claim(ClaimTypes.Country, country)        }),        Expires = DateTime.UtcNow.AddDays(1),        Issuer = issuer,        Audience = audience,        SigningCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256Signature)    };    // Omitted for brevity}\n    ```", "```cs\n    [HttpPost(\"login-new-zealand\")]public async Task<IActionResult> LoginNewZealand([FromBody] LoginModel model){    if (ModelState.IsValid)    {        var user = await userManager.FindByNameAsync(model.UserName);        if (user != null)        {            if (await userManager.CheckPasswordAsync(user, model.Password))            {                var token = GenerateToken(model.UserName, \"New Zealand\");                return Ok(new { token });            }        }        // If the user is not found, display an error message        ModelState.AddModelError(\"\", \"Invalid username or password\");    }    return BadRequest(ModelState);}[HttpPost(\"login\")]public async Task<IActionResult> Login([FromBody] LoginModel model){    if (ModelState.IsValid)    {        var user = await userManager.FindByNameAsync(model.UserName);        if (user != null)        {            if (await userManager.CheckPasswordAsync(user, model.Password))            {                var token = GenerateToken(model.UserName, \"Australia\");                return Ok(new { token });            }        }        // If the user is not found, display an error message        ModelState.AddModelError(\"\", \"Invalid username or password\");    }    return BadRequest(ModelState);}\n    ```", "```cs\n    public class SpecialPremiumContentRequirement : IAuthorizationRequirement{    public string Country { get; }    public SpecialPremiumContentRequirement(string country)    {        Country = country;    }}\n    ```", "```cs\n    public class SpecialPremiumContentAuthorizationHandler : AuthorizationHandler<SpecialPremiumContentRequirement>{    protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, SpecialPremiumContentRequirement requirement)    {        var hasPremiumSubscriptionClaim = context.User.HasClaim(c => c.Type == \"Subscription\" && c.Value == \"Premium\");        if (!hasPremiumSubscriptionClaim)        {            return Task.CompletedTask;        }        var countryClaim = context.User.FindFirst(c => c.Type == ClaimTypes.Country);        if (countryClaim == null || string.IsNullOrWhiteSpace(countryClaim.ToString()))        {            return Task.CompletedTask;        }        if (countryClaim.Value == requirement.Country)        {            context.Succeed(requirement);        }        return Task.CompletedTask;    }}\n    ```", "```cs\n    builder.Services.AddAuthorization(options =>{    options.AddPolicy(AppAuthorizationPolicies.SpecialPremiumContent, policy =>    {        policy.Requirements.Add(new SpecialPremiumContentRequirement(\"New Zealand\"));    });});builder.Services.AddSingleton<IAuthorizationHandler, SpecialPremiumContentAuthorizationHandler>();\n    ```", "```cs\n    [Authorize(Policy = AppAuthorizationPolicies.SpecialPremiumContent)][HttpGet(\"special-premium\", Name = \"GetPremiumWeatherForecast\")]public IEnumerable<WeatherForecast> GetPremium(){    // Omitted for brevity}\n    ```", "```cs\n    builder.Services.AddAuthorization(options =>  {      options.AddPolicy(AppAuthorizationPolicies.PremiumContent, policy =>      {          policy.Requirements.Add(new PremiumContentRequirement(\"New Zealand\"));      });      options.InvokeHandlersAfterFailure = false;  });\n    ```", "```cs\n    builder.Services.AddAuthorization();builder.Services.AddDbContext<AppDbContext>();\n    ```", "```cs\n    dotnet ef migrations add InitialDbdotnet ef database update\n    ```", "```cs\n    builder.Services.AddIdentityApiEndpoints<AppUser>().AddEntityFrameworkStores<AppDbContext>();\n    ```", "```cs\n    app.MapGroup(\"/identity\").MapIdentityApi<AppUser>();\n    ```", "```cs\n    [Authorize] [ApiController] [Route(\"[controller]\")] public class WeatherForecastController : ControllerBase {     // Omitted for brevity }\n    ```", "```cs\n    {   \"userName\": \"admin\",   \"email\": \"admin@example.com\",   \"password\": \"Passw0rd!\" }\n    {   \"email\": \"admin@example.com\",   \"password\": \"Passw0rd!\" }\n    ```", "```cs\n    {   \"tokenType\": \"Bearer\",   \"accessToken\": \"CfDJ8L-NUxrCjhBJqmxaYaETqK0P0...\",   \"expiresIn\": 3600,   \"refreshToken\": \"CfDJ8L-NUxrCjhBJqmxaYaETqK2U...\" }\n    ```", "```cs\nhttps://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&redirect_uri=https%3A%2F%2Fwww.linkedin.com%2Fgenie%2Ffinishauth&scope=openid%20email%20People.Read&response_type=code&state=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```", "```cs\napp.UseHttpsRedirection();\n```", "```cs\nbuilder.Services.Configure<IdentityOptions>(options =>{\n    // Password settings\n    options.Password.RequireDigit = true;\n    options.Password.RequireLowercase = true;\n    options.Password.RequireNonAlphanumeric = true;\n    options.Password.RequireUppercase = true;\n    options.Password.RequiredLength = 8;\n    options.Password.RequiredUniqueChars = 1;\n    // User settings\n    options.User.AllowedUserNameCharacters =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\";\n    options.User.RequireUniqueEmail = true;\n});\n```", "```cs\nbuilder.Services.Configure<IdentityOptions>(options =>{\n    // Omitted for brevity\n    // Lockout settings\n    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\n    options.Lockout.MaxFailedAccessAttempts = 3;\n    options.Lockout.AllowedForNewUsers = true;\n});\n```", "```cs\n[HttpPost(\"login\")]public async Task<IActionResult> Login([FromBody] LoginModel model)\n{\n    // Check if the model is valid\n    if (ModelState.IsValid)\n    {\n        var user = await _userManager.FindByNameAsync(model.UserName);\n        if (user != null)\n        {\n            var result =\n                await _signInManager.CheckPasswordSignInAsync(user, model.Password, lockoutOnFailure: true);\n            if (result.Succeeded)\n            {\n                var token = GenerateToken(model.UserName);\n                return Ok(new { token });\n            }\n        }\n        // If the user is not found, display an error message\n        ModelState.AddModelError(\"\", \"Invalid username or password\");\n    }\n    return BadRequest(ModelState);\n}\n```", "```cs\nbuilder.Services.AddIdentityCore<AppUser>()    .AddSignInManager()\n    .AddEntityFrameworkStores<AppDbContext>()\n    .AddDefaultTokenProviders();\n```", "```cs\n{  \"userName\": \"user\",\n  \"email\": \"user@example.com\",\n  \"password\": \"123456\"\n}\n```", "```cs\n{  \"\": [\n    \"Passwords must be at least 8 characters.\",\n    \"Passwords must have at least one non alphanumeric character.\",\n    \"Passwords must have at least one lowercase ('a'-'z').\",\n    \"Passwords must have at least one uppercase ('A'-'Z').\"\n  ]\n}\n```", "```cs\n// Create an action to register a new user[HttpPost(\"register\")]\npublic async Task<IActionResult> Register([FromBody] AddOrUpdateAppUserModel model)\n{\n    // Check if the model is valid\n    if (ModelState.IsValid)\n    {\n        // Omitted for brevity\n    }\n    return BadRequest(ModelState);\n}\n```", "```cs\npublic class AddOrUpdateAppUserModel{\n    [Required(ErrorMessage = \"User name is required\")]\n    public string UserName { get; set; } = string.Empty;\n    [EmailAddress]\n    [Required(ErrorMessage = \"Email is required\")]\n    public string Email { get; set; } = string.Empty;\n    [Required(ErrorMessage = \"Password is required\")]\n    public string Password { get; set; } = string.Empty;\n}\n```", "```cs\npublic class AdultAttribute : ValidationAttribute{\n    public string GetErrorMessage() => $\"You must be at least 18 years old to register.\";\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        var birthDate = (DateTime)value;\n        var age = DateTime.Now.Year - birthDate.Year;\n        if (DateTime.Now.Month < birthDate.Month || (DateTime.Now.Month == birthDate.Month && DateTime.Now.Day < birthDate.Day))\n        {\n            age--;\n        }\n        if (age < 18)\n        {\n            return new ValidationResult(GetErrorMessage());\n        }\n        return ValidationResult.Success;\n    }\n}\n```", "```cs\npublic class AddOrUpdateAppUserModel{\n    // Omitted for brevity\n    [Required(ErrorMessage = \"Birthday is required\")]\n    [Adult]\n    public DateTime Birthday { get; set; }\n}\n```", "```cs\n// Create an action to register a new user[HttpPost(\"register\")]\npublic async Task<IActionResult> Register([FromBody] AddOrUpdateAppUserModel model)\n{\n    // Check if the email is unique\n    if (await _userManager.FindByEmailAsync(model.Email) != null)\n    {\n        ModelState.AddModelError(\"Email\", \"Email already exists\");\n        return BadRequest(ModelState);\n    }\n    if (ModelState.IsValid)\n    {\n        // Omitted for brevity\n    }\n    return BadRequest(ModelState);\n}\n```"]