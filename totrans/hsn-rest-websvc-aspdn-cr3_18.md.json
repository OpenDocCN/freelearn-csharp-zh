["```cs\ndotnet tool install --global dotnet-dev-certs\n```", "```cs\ndotnet dev-certs https -ep <path_to_certificate>/certificate.pfx -p <certificate_password>\n```", "```cs\nversion: \"3.7\"\nservices:\n  catalog_api:\n    container_name: catalog_api\n    build:\n      context: .\n      dockerfile: containers/api/Dockerfile\n volumes:\n - ./<path_to_certificate>/:/root/.dotnet/https\n    env_file:\n      - containers/api/api.env\n    networks:\n      - my_network\n    ports:\n      - 5000:5000\n - 5001:5001\n    depends_on:\n      - catalog_db\n      - catalog_esb\n\n ...\n```", "```cs\nASPNETCORE_ENVIRONMENT=Integration\nASPNETCORE_URLS=https://*:5001\nASPNETCORE_Kestrel__Certificates__Default__Password=<certificate_password>\nASPNETCORE_Kestrel__Certificates__Default__Path=/root/.dotnet/https/certificate.pfx\n```", "```cs\napp.UseHttpsRedirection();\n```", "```cs\nusing System.Net;\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Server.Kestrel.Core;\n\nnamespace Catalog.API\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args)\n        {\n            return WebHost.CreateDefaultBuilder(args)\n                .ConfigureKestrel(options =>\n {\n options.Listen(IPAddress.Any, 5002,listenOptions =>\n {\n listenOptions.Protocols = HttpProtocols.Http2;\n });\n })\n                .UseStartup<Startup>();\n        }\n    }\n}\n```", "```cs\nnamespace Catalog.API\n{\n    public class Startup\n    {\n       ...\n\n        public void Configure(IApplicationBuilder app, \n        IWebHostingEnvironment env)\n        {\n            ...\n            app.UseCors(cfg =>\n {\n cfg.AllowAnyOrigin();\n });\n\n            ..\n        }\n    }\n}\n```", "```cs\nnamespace Catalog.API\n{\n    public class Startup\n    {\n       ...\n        public void Configure(IApplicationBuilder app, \n        IWebHostingEnvironment env)\n        {\n            ...\n            app.UseCors(cfg =>\n {\n cfg.AllowAnyOrigin(\"https://samuele.dev\");\n });\n            ...\n        }\n    }\n}\n```", "```cs\nnamespace Catalog.API\n{\n    public class Startup\n    {\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n            services.AddCors(opt =>\n            {\n                opt.AddPolicy(\"BlogDomainPolicy\", cfg => \n                { cfg.WithOrigins(\"https://samuele.dev\"); });\n            });\n            ..\n        }\n\n        public void Configure(IApplicationBuilder app, \n        IWebHostingEnvironment env)\n        {\n           ...\n            app.UseCors(\"BlogDomainPolicy\");\n           ...\n        }\n    }\n}\n```", "```cs\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    [JsonException]\n    [EnableCors(\"BlogDomainPolicy\")]\n    public class ItemController : ControllerBase\n    {\n\n        ...\n    }\n}\n```", "```cs\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    [JsonException]\n    [EnableCors(\"BlogDomainPolicy\")]\n    public class ItemController : ControllerBase\n    {\n        ...\n\n        [HttpGet(\"{id:guid}\")]\n        [EnableCors(\"GetByIdActionPolicy\")]\n        public async Task<IActionResult> GetById(string id)\n        {\n            ...\n        }\n\n        ...\n    }\n}\n```", "```cs\n{   \"alg\": \"HS256\",   \"typ\": \"JWT\" }\n```", "```cs\n{\n  \"email\": \"example@handsonaspnetcore.com\",\n  \"nbf\": 1546196276,\n  \"exp\": 1546801076,\n  \"iat\": 1546196276\n}\n```", "```cs\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbXVlbGUucmVzY2FAZ21haWwuY29tIiwibmJmIjoxNTQ2MTk2Mjc2LCJleHAiOjE1NDY4MDEwNzYsImlhdCI6MTU0NjE5NjI3Nn0.yQGT1TJYL4U_IqBpoQ6MjUchET06BRE-YJ0sf-MRA\n```", "```cs\ndotnet add Catalog.Domain package Microsoft.AspNetCore.Authentication.JwtBearer\ndotnet add Catalog.Infrastructure package Microsoft.AspNetCore.Identity.EntityFrameworkCore\n```", "```cs\nusing Microsoft.AspNetCore.Identity;\n\nnamespace Catalog.Domain.Entities\n{\n    public class User : IdentityUser\n    {\n        public string Name { get; set; }\n    }\n}\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Domain.Repositories\n{\n    public interface IUserRepository\n    {\n        Task<bool> AuthenticateAsync(string email, string password, \n            CancellationToken cancellationToken = default);\n        Task<bool> SignUpAsync(User user, string password, \n            CancellationToken cancellationToken = default);\n        Task<User> GetByEmailAsync(string requestEmail, \n            CancellationToken cancellationToken = default);\n    }\n}\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Repositories;\nusing Catalog.Domain.Requests.User;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Services\n{\n    public interface IUserService\n    {\n        Task<UserResponse> GetUserAsync(GetUserRequest request, \n            CancellationToken cancellationToken = default);\n        Task<UserResponse> SignUpAsync(SignUpRequest request, \n            CancellationToken cancellationToken = default);\n        Task<TokenResponse> SignInAsync(SignInRequest request, \n            CancellationToken cancellationToken = default);\n    }\n}\n```", "```cs\nnamespace Catalog.Domain.Requests.User\n{\n    public class GetUserRequest\n    {\n        public string Email { get; set; }\n    }\n\n    public class SignInRequest\n    {\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n\n    public class SignUpRequest\n    {\n        public string Email { get; set; }\n        public string Password { get; set; }\n        public string Name { get; set; }\n    }\n}\n```", "```cs\nnamespace Catalog.Domain.Responses\n{\n    public class TokenResponse\n    {\n        public string Token { get; set; }\n    }\n\n    public class UserResponse\n    {\n        public string Name { get; set; }\n        public string Email { get; set; }\n    }\n}\n```", "```cs\nusing System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Repositories;\nusing Catalog.Domain.Requests.User;\nusing Catalog.Domain.Responses;\nusing Microsoft.Extensions.Options;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace Catalog.Domain.Services\n{\n    public class UserService : IUserService\n    {\n private readonly AuthenticationSettings \n            _authenticationSettings;\n private readonly IUserRepository _userRepository;\n\n        public UserService(IUserRepository userRepository, \n IOptions<AuthenticationSettings> authenticationSettings)\n        {\n            _userRepository = userRepository;\n            _authenticationSettings = authenticationSettings.Value;\n        }\n```", "```cs\n namespace Catalog.Domain.Configurations\n{\n    public class AuthenticationSettings\n    {\n        public string Secret { get; set; }\n        public int ExpirationDays { get; set; }\n    }\n}\n```", "```cs\n...\npublic async Task<UserResponse> GetUserAsync(GetUserRequest request, \n    CancellationToken cancellationToken)\n{\n    var response = await _userRepository.GetByEmailAsync(request.Email, \n        cancellationToken);\n\n    return new UserResponse { Name = response.Name, Email = \n        response.Email };\n}\n\npublic async Task<UserResponse> SignUpAsync(SignUpRequest request, \n    CancellationToken cancellationToken)\n{\n    var user = new Entities.User { Email = request.Email, UserName = \n        request.Email, Name = request.Name };\n\n    bool result = await _userRepository.SignUpAsync(user, \n        request.Password, cancellationToken);\n\n    return !result ? null : new UserResponse { Name = request.Name, \n        Email = request.Email };\n}\n...\n```", "```cs\n...\npublic async Task<TokenResponse> SignInAsync(SignInRequest request,     CancellationToken cancellationToken)\n{\n    bool response = await _userRepository.\n       AuthenticateAsync(request.Email, request.Password,\n       cancellationToken);\n\n    return response == false ? null : new TokenResponse { Token = \n        GenerateSecurityToken(request)          k . };\n\n}\n\nprivate string GenerateSecurityToken(SignInRequest request)\n{\n    var tokenHandler = new JwtSecurityTokenHandler();\n    var key = Encoding.ASCII.GetBytes(_authenticationSettings.Secret);\n\n    var tokenDescriptor = new SecurityTokenDescriptor\n    {\n        Subject = new ClaimsIdentity(new[]\n        {\n            new Claim(ClaimTypes.Email, request.Email)\n        }),\n        Expires = \n        DateTime.UtcNow.AddDays\n        (_authenticationSettings.ExpirationDays),\n        SigningCredentials = new SigningCredentials(new \n        SymmetricSecurityKey(key), \n            SecurityAlgorithms.HmacSha256Signature)\n    };\n\n    var token = tokenHandler.CreateToken(tokenDescriptor);\n    return tokenHandler.WriteToken(token);\n}\n...\n```", "```cs\nusing System.Text;\nusing Catalog.Domain.Configurations;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.IdentityModel.Tokens;\nnamespace Catalog.Infrastructure.Extensions\n{\n    public static class AuthenticationExtensions\n    {\n        public static IServiceCollection AddTokenAuthentication(this \n            IServiceCollection services, IConfiguration configuration)\n        {\n            var settings = configuration.GetSection\n                (\"AuthenticationSettings\");\n            var settingsTyped = settings.Get<AuthenticationSettings>();\n\n            services.Configure<AuthenticationSettings>(settings);\n            var key = Encoding.ASCII.GetBytes(settingsTyped.Secret);\n            services.AddAuthentication(x =>\n                {\n                    x.DefaultAuthenticateScheme = \n                        JwtBearerDefaults.AuthenticationScheme;\n                    x.DefaultChallengeScheme = \n                        JwtBearerDefaults.AuthenticationScheme;\n                })\n                .AddJwtBearer(x =>\n                {\n                    x.TokenValidationParameters = new \n                        TokenValidationParameters\n                        {\n                            IssuerSigningKey = new \n                                SymmetricSecurityKey(key),\n                            ValidateIssuer = false,\n                            ValidateAudience = false\n                        };\n                });\n            return services;\n        }\n    }\n}\n```", "```cs\n.AddJwtBearer(x =>\n{\n    x.TokenValidationParameters = new TokenValidationParameters\n    {\n        IssuerSigningKey = new SymmetricSecurityKey(key),\n        ValidateIssuer = true,\n ValidateAudience = true,\n ValidIssuer = \"yourhostname\",\n ValidAudience = \"yourhostname\"\n    };\n});\n```", "```cs\n...\n\"AuthenticationSettings\": {\n    \"Secret\": \"My Super long secret\",\n    \"ExpirationDays\": \"7\"\n}\n...\n```", "```cs\nnamespace Catalog.API\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration, \n        IWebHostingEnvironment environment)\n        {\n            Configuration = configuration;\n            CurrentEnvironment = environment;\n        }\n\n        ...\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n\n            services\n                 .AddTokenAuthentication(Configuration)\n\n            ...\n        }\n\n        public void Configure(IApplicationBuilder app, \n        IHostingEnvironment env)\n        {\n            ...\n          app.UseAuthentication();\n            app.UseAuthorization(); app.UseEndpoints(endpoints =>     {     endpoints.MapControllers();});\n        }\n    }\n}\n```", "```cs\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Catalog.API.Filters;\nusing Catalog.Domain.Requests.User;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Authorize]\n    [ApiController]\n    [Route(\"api/user\")]\n    [JsonException]\n    public class UserController : ControllerBase\n    {\n        private readonly IUserService _userService;\n\n        public UserController(IUserService userService)\n        {\n            _userService = userService;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Get()\n        {\n            var claim = HttpContext.User.Claims.FirstOrDefault(x => \n                x.Type == ClaimTypes.Email);\n\n            if (claim == null) return Unauthorized();\n\n            var token = await _userService.GetUserAsync(new \n                GetUserRequest { Email = claim.Value });\n            return Ok(token);\n        }\n\n        [AllowAnonymous]\n        [HttpPost(\"auth\")]\n        public async Task<IActionResult> SignIn(SignInRequest request)\n        {\n            var token = await _userService.SignInAsync(request);\n\n            if (token == null) return BadRequest();\n\n            return Ok(token);\n        }\n\n        [AllowAnonymous]\n        [HttpPost]\n        public async Task<IActionResult> SignUp(SignUpRequest request)\n        {\n            var user = await _userService.SignUpAsync(request);\n            if (user == null) return BadRequest();\n            return CreatedAtAction(nameof(Get), new { }, null);\n        }\n    }\n}\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Catalog.Infrastructure.Repositories\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly SignInManager<User> _signInManager;\n        private readonly UserManager<User> _userManager;\n\n        public UserRepository(UserManager<User> userManager, \n            SignInManager<User> signInManager)\n        {\n            _userManager = userManager;\n            _signInManager = signInManager;\n        }\n\n        public async Task<bool> AuthenticateAsync(string email, \n            string password, CancellationToken cancellationToken)\n        {\n            var result = await _signInManager.PasswordSignInAsync(\n                email, password, false, false);\n            return result.Succeeded;\n        }\n\n        public async Task<bool> SignUpAsync(User user, string password, \n            CancellationToken cancellationToken)\n        {\n            var result = await _userManager.CreateAsync(user, \n                password);\n            return result.Succeeded;\n        }\n\n        public async Task<User> GetByEmailAsync(string requestEmail, \n            CancellationToken cancellationToken)\n        {\n            return await _userManager\n                .Users\n                .FirstOrDefaultAsync(u => u.Email == requestEmail, \n                    cancellationToken);\n        }\n    }\n}\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Identity.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\nusing Catalog.SchemaDefinitions;\n\nnamespace Catalog.Infrastructure\n{\n    public class CatalogContext : IdentityDbContext<User>, IUnitOfWork\n    {\n          ...\n\n        protected override void OnModelCreating(ModelBuilder \n            modelBuilder)\n        {\n            modelBuilder.ApplyConfiguration(new \n                ItemEntitySchemaDefinition());\n            modelBuilder.ApplyConfiguration(new \n                GenreEntitySchemaConfiguration());\n            modelBuilder.ApplyConfiguration(new \n                ArtistEntitySchemaConfiguration());\n\n            base.OnModelCreating(modelBuilder);\n        }\n    }\n}\n```", "```cs\nusing System.Text;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.IdentityModel.Tokens;\nusing Catalog.Domain;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Infrastructure.Extensions\n{\n    public static class AuthenticationExtensions\n    {\n        public static IServiceCollection AddTokenAuthentication(this \n        IServiceCollection services, AuthenticationSettings settings)\n        {\n            var key = Encoding.ASCII.GetBytes(settings.Secret);\n\n            services.AddIdentity<User, IdentityRole>()\n .AddEntityFrameworkStores<CatalogContext>();\n\n            ...\n            return services;\n        }\n    }\n}\n```", "```cs\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n            services.AddScoped<IUserRepository, UserRepository>();            \n```", "```cs\npublic static IServiceCollection AddServices(this IServiceCollection services)\n{\n    services\n          ...\n        .AddScoped<IUserService, UserService>();\n\n    return services;\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\nusing Microsoft.AspNetCore.Identity;\nusing Moq;\n\nnamespace Catalog.Fixtures\n{\n    public class UsersContextFactory\n    {\n        private readonly PasswordHasher<User> _passwordHasher;\n        private readonly IList<User> _users;\n\n        public UsersContextFactory()\n        {\n            _passwordHasher = new PasswordHasher<User>();\n\n            _users = new List<User>();\n\n            var user = new User\n            {\n                Id = \"test_id\",\n                Email = \"samuele.resca@example.com\",\n                Name = \"Samuele Resca\"\n            };\n            user.PasswordHash = _passwordHasher.HashPassword(user, \n            \"P@$$w0rd\");\n\n            _users.Add(user);\n        }\n\n        public IUserRepository InMemoryUserManager => \n        GetInMemoryUserManager();\n\n        private IUserRepository GetInMemoryUserManager()\n {\n ...\n }\n    }\n}\n```", "```cs\nnamespace Catalog.Fixtures\n{\n    public class UsersContextFactory\n    {\n    ...\n        private IUserRepository GetInMemoryUserManager()\n        {\n            var fakeUserService = new Mock<IUserRepository>();\n\n            fakeUserService.Setup(x => \n            x.AuthenticateAsync(It.IsAny<string>(), \n            It.IsAny<string>(), CancellationToken.None))\n                .ReturnsAsync((string email, string password, \n                CancellationToken token) =>\n                {\n                    var user = _users.FirstOrDefault(x => \n                    x.Email == email);\n\n                    if (user == null) return false;\n\n                    var result = _passwordHasher.\n                        VerifyHashedPassword(user,  \n                    user.PasswordHash, password);\n                    return result == PasswordVerificationResult.\n                        Success;\n                });\n            fakeUserService.Setup(x => \n            x.GetByEmailAsync(It.IsAny<string>(), \n                CancellationToken.None))\n                .ReturnsAsync((string email, CancellationToken token) \n            => \n                 _users.First(x => x.Email == email));\n            fakeUserService.Setup(x => x.SignUpAsync(It.IsAny<User>(), \n            It.IsAny<string>(), CancellationToken.None))\n                .ReturnsAsync((User user, string password,  \n                CancellationToken token) =>\n                {\n                    user.PasswordHash = \n                        _passwordHasher.HashPassword(user, \n                    password);\n                    _users.Add(user);\n                    return true;\n                });\n            return fakeUserService.Object;\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\n...\nnamespace Catalog.Domain.Tests.Services\n{\n    public class UserServiceTests : IClassFixture<UsersContextFactory>\n    {\n        private readonly IUserService _userService;\n\n        public UserServiceTests(UsersContextFactory \n            usersContextFactory)\n        {\n            _userService = new UserService(usersContextFactory.\n             InMemoryUserManager, Options.Create( \n             new AuthenticationSettings { Secret = \n             \"Very Secret key-word to match\", ExpirationDays = 7 }));\n        }\n        [Fact]\n        public async Task \n        signin_with_invalid_user_should_return_a_valid_token_response()\n        {\n            var result =\n                await _userService.SignInAsync(new SignInRequest { \n                Email = \"invalid.user\", Password = \"invalid_password\" });\n            result.ShouldBeNull();\n        }\n        [Fact]\n        public async Task \n        signin_with_valid_user_should_return_a_valid_token_response()\n        {\n            var result =\n                await _userService.SignInAsync(new SignInRequest { \n                Email = \"samuele.resca@example.com\",\n                Password = \"P@$$w0rd\" });\n            result.Token.ShouldNotBeEmpty();\n        }\n        ...\n    }\n}\n```", "```cs\nusing System;\n...\n\nnamespace Catalog.Fixtures\n{\n    public class InMemoryApplicationFactory<TStartup>\n        : WebApplicationFactory<TStartup> where TStartup : class\n    {\n        protected override void ConfigureWebHost(IWebHostBuilder \n            builder)\n        {\n            builder\n                .UseEnvironment(\"Testing\")\n                .ConfigureTestServices(services =>\n                {\n                    ...\n                    services.Replace(ServiceDescriptor.Scoped(_ => new       \n                    UsersContextFactory().InMemoryUserManager));\n\n                    var sp = services.BuildServiceProvider();\n\n                    using var scope = sp.CreateScope();\n                    var scopedServices = scope.ServiceProvider;\n                    var db = scopedServices.GetRequiredService\n                    <CatalogContext>();\n                    db.Database.EnsureCreated();\n                });\n        }\n    }\n}\n```", "```cs\nusing System.Net;\n...\nnamespace Catalog.API.Tests.Controllers\n{\n    public class UserControllerTests : \n IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        private readonly InMemoryApplicationFactory<Startup> _factory;\n\n        public UserControllerTests(InMemoryApplicationFactory<Startup> \n        factory)\n\n        {\n            _factory = factory;\n        }\n\n        [Theory]\n        [InlineData(\"/api/user/auth\")]\n        public async Task sign_in_should_retrieve_a_token(string url)\n        {\n            var client = _factory.CreateClient();\n            var request = new SignInRequest { Email = \n            \"samuele.resca@example.com\", Password = \"P@$$w0rd\" };\n            var httpContent =\n                new StringContent(JsonConvert.SerializeObject(request), \n                Encoding.UTF8, \"application/json\");\n\n            var response = await client.PostAsync(url, httpContent);\n            string responseContent = await \n            response.Content.ReadAsStringAsync();\n\n            response.EnsureSuccessStatusCode();\n            response.StatusCode.ShouldBe(HttpStatusCode.OK);\n            responseContent.ShouldNotBeEmpty();\n        }\n\n        [Theory]\n        [InlineData(\"/api/user/auth\")]\n        public async \n        Task sign_in_should_retrieve_bad_request_with_invalid_password\n        (string url)\n        {\n            var client = _factory.CreateClient();\n            var request = new SignInRequest { Email = \n            \"samuele.resca@example.com\", Password = \"NotValidPWD\" };\n            var httpContent =\n                new StringContent(JsonConvert.SerializeObject(request), \n                Encoding.UTF8, \"application/json\");\n\n            var response = await client.PostAsync(url, httpContent);\n            string responseContent = await \n            response.Content.ReadAsStringAsync();\n            response.StatusCode.ShouldBe(HttpStatusCode.BadRequest);\n            responseContent.ShouldNotBeEmpty();\n        }\n            ...\n        }\n    }\n}\n```", "```cs\n...\n\n[Theory]\n[InlineData(\"/api/user\")]\npublic async Task get_with_authorized_user_should_retrieve_the_right_user(string url)\n{\n    var client = _factory.CreateClient();\n\n    var signInRequest = new SignInRequest { Email = \n    \"samuele.resca@example.com\", Password = \"P@$$w0rd\" };\n    var httpContent = new StringContent(JsonConvert.SerializeObject\n    (signInRequest), Encoding.UTF8, \"application/json\");\n\n    var response = await client.PostAsync(url + \"/auth\", httpContent);\n    string responseContent = await \n        response.Content.ReadAsStringAsync();\n\n    response.EnsureSuccessStatusCode();\n\n    var tokenResponse = JsonConvert.DeserializeObject<TokenResponse>\n    (responseContent);\n\n    client.DefaultRequestHeaders.Authorization =\n        new AuthenticationHeaderValue(\"Bearer\", tokenResponse.Token);\n\n    var restrictedResponse = await client.GetAsync(url);\n\n    restrictedResponse.EnsureSuccessStatusCode();\n    restrictedResponse.StatusCode.ShouldBe(HttpStatusCode.OK);\n}\n...\n```", "```cs\ncurl -X POST \\\n  https://localhost:5001/api/users \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"email\": \"newuser@example.com\",\n    \"password\": \"<my_secret_password>\",\n    \"name\": \"Your name\"\n}'\n```", "```cs\ncurl -X POST \\\n  https://localhost:5001/api/users/auth \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"email\": \"newuser@example.com\",\n    \"password\": \"<my_secret_password>\"\n}'\n```", "```cs\ncurl -X GET https://localhost:5001/api/users -H 'Authorization: Bearer <my_token>'\n```"]