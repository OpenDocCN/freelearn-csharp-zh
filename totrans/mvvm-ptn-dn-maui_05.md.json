["```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    namespace Recipes.Client.Core.ViewModels;\n    public class IngredientsListViewModel :\n      ObservableObject\n    {\n        private int _numberOfServings = 4;\n        public int NumberOfServings\n        {\n            ...\n        }\n        //ToDo: add list of Ingredients\n    }\n    ```", "```cs\n    public int NumberOfServings\n    {\n        get => _numberOfServings;\n        set => SetProperty(ref _numberOfServings, value);\n    }\n    ```", "```cs\n    private bool _hideAllergenInformation = true;\n    public bool HideAllergenInformation\n    {\n        get => _hideAllergenInformation;\n        set => SetProperty(ref _hideAllergenInformation, value);\n    }\n    ```", "```cs\n    public RecipeDetailViewModel()\n    {\n        AddAsFavoriteCommand =\n            new RelayCommand(AddAsFavorite,\n              CanAddAsFavorite);\n        RemoveAsFavoriteCommand =\n            new RelayCommand(RemoveAsFavorite,\n              CanRemoveAsFavorite);\n        SetFavoriteCommand =\n               new RelayCommand<bool>(SetFavorite,\n                 CanSetFavorite);\n    }\n    ```", "```cs\n    public IRelayCommand AddAsFavoriteCommand\n    {\n        get;\n    }\n    public IRelayCommand RemoveAsFavoriteCommand\n    {\n        get;\n    }\n    public IRelayCommand SetFavoriteCommand\n    {\n        get;\n    }\n    ```", "```cs\n    public bool? IsFavorite\n    {\n        get => _isFavorite;\n        private set\n        {\n            if(SetProperty(ref _isFavorite, value))\n            {\n                AddAsFavoriteCommand\n                    .NotifyCanExecuteChanged();\n                RemoveAsFavoriteCommand\n                    .NotifyCanExecuteChanged();\n                SetFavoriteCommand\n                    .NotifyCanExecuteChanged();\n            }\n        }\n    }\n    ```", "```cs\npublic partial class RecipeDetailViewModel :\n  ObservableObject\n```", "```cs\n[ObservableProperty]\nprivate bool _hideExtendedAllergenList = true;\n```", "```cs\n[ObservableProperty]\n[NotifyCanExecuteChangedFor(nameof(AddAsFavoriteCommand))]\n[NotifyCanExecuteChangedFor(nameof(RemoveAsFavoriteCommand))]\n[NotifyCanExecuteChangedFor(nameof(SetFavoriteCommand))]\nprivate bool? _isFavorite = false;\n```", "```cs\n[RelayCommand]\nprivate void RemoveAsFavorite() => IsFavorite = false;\n```", "```cs\n    [RelayCommand(CanExecute = nameof(CanSetFavorite))]\n    private void SetFavorite(bool isFavorite)\n        => IsFavorite = isFavorite;\n    [RelayCommand(CanExecute = nameof(CanAddAsFavorite))]\n    private void AddAsFavorite() => IsFavorite = true;\n    [RelayCommand(CanExecute = nameof\n      (CanRemoveAsFavorite))]\n    private void RemoveAsFavorite() => IsFavorite = false;\n    ```", "```cs\n    builder.UseMauiCommunityToolkit();\n    ```", "```cs\n    public string[] Allergens { get; }\n        = new string[]{ \"Milk\", \"Eggs\", \"Nuts\", \"Sesame\" };\n    ```", "```cs\n    xmlns:toolkit=http://schemas.microsoft.com/dotnet/2022\n      /maui/toolkit\n    ```", "```cs\n    <ContentPage.Resources>\n        ...\n        <toolkit:ListToStringConverter\n          x:Key=\"listToStringConverter\" Separator=\", \" />\n    </ContentPage.Resources>\n    ```", "```cs\n    <Label IsVisible=\"{Binding HideAllergenInformation,\n      Mode=OneWay, Converter={StaticResource\n        inverseBoolConverter}}\"\n       Text=\"{Binding Allergens, Converter={StaticResource\n    ListToStringConverter, we can bind the Allergens property of the ViewModel to the Text property of the label. This converter will take the items from the Allergens array and concatenate them to show them as one string value.\n    ```", "```cs\n    [RelayCommand]\n    private void UserIsBrowsing()\n    {\n        //Do Logging\n    }\n    RelayCommand attribute is used to generate UserIsBrowsingCommand, but you could write a RelayCommand yourself as well, of course.\n    ```", "```cs\n    <ScrollView>\n        <ScrollView.Behaviors>\n            <toolkit:EventToCommandBehavior\n              Command=\"{Binding UserIsBrowsingCommand}\"\n                EventName=\"Scrolled\" />\n        </ScrollView.Behaviors>\n        ...\n    </ScrollView>\n    ```", "```cs\n    <Grid ColumnDefinitions=\"*, Auto\">\n        <Label\n            FontAttributes=\"Bold\" FontSize=\"22\"\n            Text=\"{Binding Path=Title, Mode=OneTime}\"\n            VerticalOptions=\"Center\" />\n        <Image\n            x:Name=\"favoriteIcon\"\n            Grid.Column=\"1\" Margin=\"5\"\n            HeightRequest=\"35\" Source=\"favorite.png\"\n            VerticalOptions=\"Center\" WidthRequest=\"35\">\n        </Image>\n    </Grid>\n    ```", "```cs\n    <Image\n        x:Name=\"favoriteIcon\"\n        ...>\n        <Image.Behaviors>\n            <toolkit:IconTintColorBehavior\n                TintColor=\"#E9E9E9E9\" />\n        </Image.Behaviors>\n    </Image>\n    ```", "```cs\n    <toolkit:BoolToObjectConverter\n        x:Key=\"isFavoriteToColorConverter\"\n        x:TypeArguments=\"Color\"\n        FalseObject=\"#E9E9E9E9\"\n        TrueObject=\"#FF0000\" />\n    ```", "```cs\n    <toolkit:IconTintColorBehavior TintColor=\"{Binding\n      Source={x:Reference favoriteIcon},\n        Path=BindingContext.IsFavorite,\n          Converter={StaticResource\n    TintColor is effectively bound to the IsFavorite property on the ViewModel and isFavoriteToColorConverter determines the color to use.\n    ```"]