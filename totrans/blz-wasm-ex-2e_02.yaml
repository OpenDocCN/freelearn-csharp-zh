- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Your First Blazor WebAssembly Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Razor components** are the building blocks of Blazor WebAssembly applications.
    A Razor component is a chunk of user interface that can be shared, nested, and
    reused. Razor components are ordinary C# classes and can be placed anywhere in
    a project.'
  prefs: []
  type: TYPE_NORMAL
- en: Razor components.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Building blocks of Blazor apps.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nestable magic.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we will learn about Razor components. We will learn how to
    use them, how to apply parameters, and how to create them. We will also become
    familiar with their life cycle and their structure. We will learn how to use the
    `@page` directive to define routing and we will learn how to use **Razor syntax**
    to combine C# code with HTML markup. Finally, we will introduce the **Hot Reload**
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: The Blazor WebAssembly project in this chapter will be created by using the
    **Blazor WebAssembly App project template** provided by Microsoft. After we create
    the project, we will examine it to further familiarize ourselves with Razor components.
    We will learn how to use them, how to add parameters, how to apply routing, how
    to use Razor syntax, and how to separate the Razor markup and code into separate
    files. As we make edits to the code, we will use `Hot Reload` to automatically
    update the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Razor components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Razor syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the demo WebAssembly project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Demo Blazor WebAssembly Project Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Microsoft Visual Studio 2022 installed
    on your PC. For instructions on how to install the free community edition of Microsoft
    Visual Studio 2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch2](https://packt.link/Ch2).'
  prefs: []
  type: TYPE_NORMAL
- en: Razor components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blazor WebAssembly is a component-driven framework. Razor components are the
    fundamental building blocks of a Blazor WebAssembly application. They are classes
    that are implemented using a combination of C#, HTML, and Razor syntax. When the
    web app loads, the classes get downloaded into the browser as normal .NET assemblies
    (DLLs).
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: In this book, the terms Razor component and component are used interchangeably.
  prefs: []
  type: TYPE_NORMAL
- en: Using components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML element syntax is used to add one component to another component. The markup
    looks like an HTML tag where the name of the tag is the component type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following markup in the `Pages/Index.razor` file of the `Demo` project,
    which we will create later in this chapter, will render a `SurveyPrompt` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `SurveyPrompt` element includes an attribute parameter named `Title`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Component parameters are used to make components dynamic. Parameters are public
    properties of the component that are decorated with either the `Parameter` attribute
    or the `CascadingParameter` attribute. Parameters can be simple types, complex
    types, functions, **RenderFragments**, or event callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code for a component named `Hello` includes a parameter named
    `Text`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hello.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the `Hello` component, include the following HTML syntax within another
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the `Text` attribute of the `Hello` component is
    the source of the `Text` parameter. This screenshot shows the results of using
    the component as indicated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – HelloWorld component ](img/B18471_02_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: The Hello component'
  prefs: []
  type: TYPE_NORMAL
- en: A parameter’s `get` and `set` accessors must not contain custom logic. They
    are only intended as a channel to allow information to flow to the child from
    the parent. Also, as mentioned earlier, they must be public.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The application will enter an infinite loop if a child component includes a
    parameter that causes rerendering of the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: Required parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can specify that a parameter is required by the editor by decorating it
    with the `EditorRequired` attribute. In the following version of the `Hello2`
    component, the `Text` parameter is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hello2.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try to use `Hello2` in a component and do not include the `Text` attribute,
    Visual Studio will display the following warning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Missing parameter warning'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding warning will not prevent the application from building, and it
    is not enforced at runtime. It is only used by the editor.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Decorating a parameter with the `EditorRequired` attribute does not guarantee
    that the parameter will have a value at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Query strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A component can also receive parameters from the query string. A query string
    is used to assign values to the specified parameters. To indicate that the parameter
    can come from the query string, we decorate the parameter with the **SupplyParameterFromQuery**
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `Increment` parameter has been decorated with
    the `SupplyParameterFromQuery` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the code to set the value of `Increment` to `5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://localhost:7097/counter?increment=5](https://localhost:7097/counter?increment=5)'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, everything after the question mark is the query string.
    The query string is not case sensitive. Also, the preceding example assumes that
    we are running our application locally on port 7097\. Since the port that is used
    will vary by application, we will exclude the port in the rest of our examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The **applicationUrl** is defined in the `Properties/launchSettings.json` file.
    Each time we create a new Blazor project using a Microsoft project template, the
    `applicationUrl` will randomly reference a different port.
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameters provided by the query string are restricted to the following
    types, arrays of the following types, and their nullable variants:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateTime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decimal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`double`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Guid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`int`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`long`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can also consist of arrays of the preceding types.
  prefs: []
  type: TYPE_NORMAL
- en: Naming components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The name of a Razor component must be in title case. Therefore, `hello` would
    not be a valid name for a Razor component since the h is not capitalized. Also,
    Razor components use the `RAZOR` extension rather than the `CSHTML` extension
    that is used by `Razor` Pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Razor components must start with a capital letter.
  prefs: []
  type: TYPE_NORMAL
- en: Component life cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Razor components inherit from the `ComponentBase` class. The `ComponentBase`
    class includes both asynchronous and synchronous methods that are used to manage
    the life cycle of a component. In this book, we will be using the asynchronous
    versions of the methods since they execute without blocking other operations.
    This is the order in which the methods in the life cycle of a component are invoked:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SetParametersAsync**: This method sets the parameters that are supplied by
    the component’s parent in the render tree.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OnInitializedAsync**: This method is invoked after the parameters have been
    set and the component has been successfully initialized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OnParametersSetAsync**: This method is invoked after the component initializes
    and each time the component rerenders. A component will rerender when the parent
    component rerenders and at least one parameter has changed. Also, a component
    will rerender when the **StateHasChanged** method of the component is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OnAfterRenderAsync**: This method is invoked after the component has finished
    rendering. This method is for working with JavaScript since JavaScript requires
    the **Document Object Model** (**DOM**) elements to be rendered before they can
    do any work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram shows code from the `Counter` component of the `Demo`
    project that we will create in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text  Description automatically generated](img/B18471_02_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Component structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the preceding example is divided into three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the sections has a different purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Directives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Directives are used to add special functionality, such as routing, layout, and
    dependency injection. File-level directives are defined within Razor, and you
    cannot define your own directives. Razor directives start with the `@` symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, there is only one directive used – the `@page` directive.
    The `@page` directive is used for routing. In this example, the following URL
    will route the user to the `Counter` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A typical page can include many directives at the top of the page. Also, many
    pages have more than one `@page` directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the directives in Razor can be used in a Blazor WebAssembly application.
    These are the Razor directives that are used in Blazor, in alphabetical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@attribute`: This directive adds a class-level attribute to the component.
    The following example adds the `[Authorize]` attribute:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`@code`: This directive adds class members to the component. In the example,
    it is used to distinguish the code block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@implements`: This directive implements an interface for the specified class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@inherits`: This directive provides full control of the class that the view
    inherits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@inject`: This directive is used for dependency injection. It enables the
    component to inject a service from the dependency injection container into the
    view. The following example injects the **HttpClient** defined in the `Program.cs`
    file into the component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`@layout`: This directive is used to specify a layout for the Razor components
    that include an `@page` directive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@namespace`: This directive sets the component’s namespace. You only need
    to use this directive if you do not want to use the default namespace for the
    component. The default namespace is based on the location of the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@page`: This directive is used for routing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@preservewhitespace`: This directive is used to preserve the whitespace in
    the rendered markup. If it is set to `true`, the whitespace is preserved. The
    default is `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@using`: This directive controls the components that are in scope.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Markup is HTML with Razor syntax. The Razor syntax can be used to render text
    and allows C# to be included as part of the markup. We will cover more about Razor
    syntax later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Code block
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code block contains the logic for the page. It begins with the `@code` directive.
    By convention, the code block is at the bottom of the page. It is the only file-level
    directive that is not placed at the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: The code block is where we add C# fields, properties, and methods to the component.
    Later in this chapter, we will move the code block to a separate code-behind file.
  prefs: []
  type: TYPE_NORMAL
- en: Razor components are the building blocks of a Blazor WebAssembly application.
    They are easy to use since they are simply a combination of HTML markup and C#
    code. They are structured with directives, markup, and code blocks. Components
    have a clearly defined life cycle. They can be nested and leverage different types
    of parameters to make them dynamic. In the next section, we will explain how routing
    is used to navigate between components.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Blazor WebAssembly, routing is handled on the client, not on the server.
    As you navigate in the browser, Blazor intercepts that navigation and renders
    the component with the matching route.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URLs are resolved relative to the base path that is specified in the `wwwroot/index.html`
    file. The base path is specified in the `head`element using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike other frameworks that you may have used, the route is not inferred from
    the location of its file. For example, in the `Demo` project, the `Counter` component
    is in the `/Pages/Counter` folder, yet it uses the following route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the `@page` directive used by the `Counter` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Route parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Route parameters can be used to populate the parameters of a component. The
    parameters of both the component and the route must have the same name, but they
    are not case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can provide more than one `@page` directive to a component. The following
    `RoutingExample` component demonstrates how to include multiple `@page` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RoutingExample.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the first `@page` directive allows navigation to the
    component without a parameter, while the second `@page` directive includes a route
    parameter. If a value for `text` is provided, it is assigned to the `Text` property
    of the component. If the `Text` property of the component is `null`, it is set
    to `fantastic`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following URL will route the user to the `RoutingExample` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following URL will also route the user to the `RoutingExample` component,
    but this time, the `Text` parameter will be set by the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This screenshot shows the results of using the indicated route:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_02_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: The RoutingExample component'
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Route parameters are not case-sensitive.
  prefs: []
  type: TYPE_NORMAL
- en: Optional route parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Optional route parameters are supported by Blazor. In the following version
    of the `RoutingExample` component, the `Text` property is optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RoutingExample.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The difference between this version of the `RoutingExample` component and the
    original version is that the two `@page` directives have been combined and the
    `text` route parameter has been changed to a nullable type. By using an optional
    route parameter, we can reduce the number of `@page` directives that are required
    by the application.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: If you need a component to navigate to itself with a different optional parameter
    value, you should set the value in the `OnParametersSet` event instead of the
    `OnInitialized` event.
  prefs: []
  type: TYPE_NORMAL
- en: Catch-all route parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Catch-all route parameters are used to capture paths across multiple folder
    boundaries. This type of route parameter is a `string` type and can only be placed
    at the end of the URL. Catch-all route parameters are designated with an asterisk.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a sample component that uses a catch-all route parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CatchAll.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `/error/type/3` URL, the preceding code will set the value of the `Path`
    parameter to `type/3`, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Catch-all route parameter example'
  prefs: []
  type: TYPE_NORMAL
- en: Route constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Route constraints are used to enforce the datatype of a route parameter. To
    define a constraint, add a colon followed by the constraint type to the parameter.
    In the following example, the route is expecting a route parameter named `Increment`
    with the type of `int`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For route constraints, the following types, and their nullable variants, are
    supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decimal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`double`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`guid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`int`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`long`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Route constraints use the invariant culture and do not support localization.
    For example, dates are only valid in the form MM-dd-yyyy or yyyy-MM-dd, and Boolean
    values must be either `true` or `false`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following types are not currently supported as constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Route constraints support optional parameters. In the following example, the
    route parameter named `increment` with the type of `int` is optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Routing is handled on the client. Each routable component can include one or
    more routes. We can use both route parameters and catch-all route parameters to
    define routing. Route constraints are used to ensure that a route parameter is
    of the required datatype. Razor components use Razor syntax to seamlessly merge
    HTML with C# code, which is what we will see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Razor syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Razor syntax is made up of HTML, Razor markup, and C#. Rendering HTML from a
    Razor component is the same as rendering HTML from an HTML file. Razor syntax
    uses both inline expressions and control structures to render dynamic values.
  prefs: []
  type: TYPE_NORMAL
- en: Inline expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inline expressions start with an `@` symbol followed by a variable or function
    name. This is an example of an inline expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, Blazor will interpret the text after the `@` symbol
    as either a property name or a method name.
  prefs: []
  type: TYPE_NORMAL
- en: Control structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Control structures also start with an `@` symbol. The content within the curly
    brackets is evaluated and rendered to the output. This is an example of an `if`
    statement from the `FetchData` component in the `Demo` project that we will create
    later in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Conditionals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following types of conditionals are included in Razor syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if` statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switch`statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example of an `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code uses an `if` statement to check if the current day of the
    week is Friday and/or the current day of the month is the 13th. The result renders
    the appropriate `p` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a `switch` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `switch` statement compares the `value` variable to `1` and `42`.
    The result renders the appropriate `p` element.
  prefs: []
  type: TYPE_NORMAL
- en: Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following types of loops are provided in Razor syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '**for** loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**foreach** loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**while** loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do while** loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the following examples loops through an array of the `WeatherForecast`
    items to display the `Summary` property of each item in the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of a `foreach` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of a `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of a `do while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: All the preceding examples of loops render the same output. There are many ways
    to loop through a collection using Razor syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Razor syntax is easy to learn if you already know C#. It includes both inline
    expressions and control structures such as conditionals and loops. By using `Hot
    Reload`, we can edit our code and view the results immediately in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Hot Reload` allows developers to edit the markup and C# code of a currently
    running app without requiring the app to be rebuilt or refreshed. Also, it does
    all of that while maintaining the app’s state.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use `Hot Reload` with or without the debugger. To trigger `Hot Reload`,
    you can either use the **Hot Reload** drop-down button on the toolbar or press
    *Alt*+*F10*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the **Hot Reload** drop-down button that is accessed from the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Hot Reload drop-down button'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the **Hot Reload** drop-down button, you can set **Hot Reload**
    to automatically be triggered whenever you save a file. There are more settings
    available via the **Settings** option on the menu. **Hot Reload** is supported
    for most changes to a component, including stylesheets. However, sometimes a change
    will require that the application be restarted.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a list of some of the activities that require a restart:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding new local functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new lambdas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing a parameter’s name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an await operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a restart is required, the following dialog is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Hot Reload warning dialog'
  prefs: []
  type: TYPE_NORMAL
- en: If you check the **Always rebuild when updates can’t be applied** checkbox,
    Visual Studio will automatically rebuild and reload the app when `Hot Reload`
    is unable to automatically apply the changes. Also, this dialog will no longer
    be displayed until this setting is changed in **Settings** or the solution is
    closed.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Hot Reload` will not work if native code debugging is enabled. Also, you can
    disable it at the project level by setting `hotReloadEnabled` to `false` in the
    project’s `Properties/launchSettings.json` file.'
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload makes you more efficient since you don’t have to stop and restart
    your application every time you make an update.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Demo Blazor WebAssembly project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Blazor WebAssembly application that we are going to build in this chapter
    is a simple three-page application. Each page will be used to demonstrate one
    or more features of Razor components.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the completed `Demo` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_02_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Home page of the Demo project'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 60 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Demo` project that we are creating is based on one of the sample projects
    that are provided by the `Blazor WebAssembly App` project template. After we have
    used the template to create the project, we will examine the files in the sample
    project and update some of the files to demonstrate how to use Razor components.
    To elevate the development experience, we will enable `Hot Reload`. Finally, we
    will separate the code block of one of the components into a separate file to
    demonstrate how to use the code-behind technique to separate the markup from the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Visual Studio comes with quite a few project templates. We are going to use
    the **Blazor WebAssembly App** project template to create our first Blazor WebAssembly
    project. Since this project template can be used to create many different types
    of Blazor projects, it is important to follow these instructions precisely:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Microsoft Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Search for templates** (*Alt*+*S*) textbox, enter `Blazor` and hit
    the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Blazor WebAssembly App** project template
    that we will be using:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_02_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.9: Blazor WebAssembly App project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Demo` in the **Project name** textbox and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_02_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.10: The Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `Demo` project into the `E:\Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **None** as the **Authentication type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Do not use top-level statements** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to create our new Blazor WebAssembly
    application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_02_11.png)Figure 2.11: Additional information for the Blazor
    WebAssembly App dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have created the `Demo` project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Running the Demo project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the project has been created, you need to run it to get an understanding
    of what it does. The `Demo` project contains three pages: **Home**, **Counter**,
    and **Fetch data**:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Debug** menu, select the **Start Without Debugging** (*Ctrl*+*F5*)
    option to run the `Demo` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If this is your first web app, Visual Studio will ask to set up a certificate
    for hosting the web app. You should trust the certificate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is a screenshot of the **Home** page from the `Demo` project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.10 – The Home page ](img/B18471_02_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.12: The Home page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Home** page is split into two sections. The navigation menu is on the
    left side of the page and the body is on the right side of the page. The body
    of the **Home** page consists of some static text and a link to a survey.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Counter** option on the navigation menu to navigate to the **Counter**
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the **Counter** page from the `Demo` project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_02_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.13: The Counter page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The body of the **Counter** page includes the **Current count** and a **Click
    me** button. Each time the button on the **Counter** page is clicked, the **Current
    count** is incremented.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since the `Demo` project is a **single-page application** (**SPA**), only the
    section of the page that has changed is updated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Fetch data** option on the navigation menu to navigate to the **Fetch
    data** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the **Fetch data** page from the `Demo` project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B18471_02_14.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.14: The Fetch data page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The body of the **Fetch data** page includes a table that shows a fabricated
    weather forecast for the second week in January 2022\. As you will see, the data
    displayed in the table is just static data from the `wwwroot\sample-data\weather.json`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Examining the Demo project’s structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s return to Visual Studio to examine the files in the `Demo` project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the file structure of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_02_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: File structure of the Demo project'
  prefs: []
  type: TYPE_NORMAL
- en: The project includes quite a few files with some of them divided into their
    own folders. Let’s examine them.
  prefs: []
  type: TYPE_NORMAL
- en: The Properties folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Properties` folder contains the `launchSettings.json` file. This file contains
    various settings that can be defined for each profile. As mentioned earlier in
    this chapter, the `applicationUrl` is defined in this file. Also, `Hot Reload`
    can be disabled by setting `hotReloadEnabled` to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The settings in the `launchSettings.json` file are only applied to your local
    development machine.
  prefs: []
  type: TYPE_NORMAL
- en: The wwwroot folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `wwwroot` folder is the application’s web root. Only the files in this folder
    are web addressable. The `wwwroot` folder contains a collection of **Cascading
    Style Sheets** (**CSS**), a sample data file, icon files, a font, and `index.html`.
    Later in this book, in addition to these types of files, we will use this folder
    for public static resources such as images and JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: The `index.html` file is the root page of the web application. Whenever a page
    is initially requested, the contents of the `index.html` page are rendered and
    returned in the response. The `head` element of the `index.html` file includes
    links to each of the CSS files in the `css` folder and specifies the base path
    to use for the web app. The `body` element of the `index.html` file includes two
    `div` elements and a reference to the `blazor.webassembly.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code in the `head` element of the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `base` element is used to indicate the base path for the URLs that are expressed
    with the `@path` directive. In the `Demo` project, the `href` attribute points
    to the root of the application. The `base` element is required in the `index.html`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The `index.html` references three different stylesheets. The `bootstrap.min.css`
    file is for `Bootstrap 5.1` and is in the /`css/bootstrap` folder. The `app.css`
    file is in the /`css` folder. It includes the styles that are applied globally
    to the `Demo` project. Finally, the `Demo.styles.css` file is used for bundling
    any of the CSS files that are defined at the component level into one file. This
    is done to enable CSS isolation. The bundled CSS file is created at build time
    in the `obj` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: A copy of `Demo.styles.css` for the `Demo` project is in `…\Demo\Demo\obj\Debug\net7.0\scopedcss\bundle`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code in the `body` element of the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The highlighted `div` element in the preceding code loads the `App` component.
    As you can see, the `App` component includes a loading progress indicator. Since
    the `Demo` project is very simple, you may not have noticed it when you ran the
    application since it loads so quickly. This is an image of the loading progress
    indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing diagram  Description automatically generated](img/B18471_02_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Loading Progress Indicator'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can remove the loading progress indicator by updating the highlighted `div`
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can customize the look and feel of the loading progress indicator
    by updating the relevant styles in the `\css\app.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: The `blazor-error-ui div` element is for displaying unhandled exceptions. The
    styling for this `div` element is also in the `\css\app.css` file. The `blazor.webassembly.js`
    file is the script that downloads the .NET runtime, your application’s assemblies,
    and your application’s dependencies. It also initializes the runtime to run the
    web app.
  prefs: []
  type: TYPE_NORMAL
- en: The App component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `App` component is defined in the `App.razor` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**App.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `App` component is the root component of a Blazor WebAssembly application.
    It uses the `Router` component to set up the routing for the web app. In the preceding
    code, if the route is found, the `RouteView` component receives `RouteData` and
    renders the specified component using the indicated `DefaultLayout`. If the route
    is not found, the `NotFound` template is used and `LayoutView` is rendered using
    the indicated `Layout`.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, in the `Demo` project, both the `Found` template and the `NotFound`
    template use the same layout. They are both using the `MainLayout` component.
    However, they do not need to use the same layout component. We will examine the
    `MainLayout` component later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Found` template includes a `FocusOnNavigate` component. It takes two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RouteData` – the route data from the `Router` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Selector` – the CSS selector for the element that should have the focus when
    the navigation completes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the preceding code, when the Router navigates to a new page, the focus will
    be on the first `h1` element on that page.
  prefs: []
  type: TYPE_NORMAL
- en: The Shared folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Shared` folder in the `Demo` project includes the shared Razor components,
    including the `MainLayout` component. Each of these components may be used one
    or more times by other Razor components. None of the components in the `Shared`
    folder include an `@page` directive since they are not routable.
  prefs: []
  type: TYPE_NORMAL
- en: The Pages folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Pages` folder includes the routable Razor components used by the project.
    The routable components are `Counter`, `FetchData`, and `Index`. Each of these
    components includes an `@page` directive that is used to route the user to the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: The Client folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Client` folder contains the `Program.cs` file. The `Program.cs` file is
    the entry point for the application. It contains the method called `Main`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding method, the `WebAssemblyHost` is built and run. As part of
    that process, the `App` component is defined as the `RootComponent` and is placed
    into the `app` object of the `wwwroot/index.html` file. Also, the `HttpClient`
    base address is configured when the `HttpClient` is registered in the dependency
    injection service. Registered services can be injected into components using the
    `@inject` directive. For more information on dependency injection, see *Chapter
    7*, *Building a Shopping Cart Using AppState*.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The `HttpClient` allows the application to send HTTP requests and receive HTTP
    responses.
  prefs: []
  type: TYPE_NORMAL
- en: The _Imports.razor file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `_Imports.razor` file includes common Razor directives that are shared by
    multiple Razor components. By including them in this file, they do not need to
    be included in the individual components. A project can include multiple `_Imports.razor`
    files. Each one is applied to its current folder and subfolders.
  prefs: []
  type: TYPE_NORMAL
- en: Any `@using` directives in the `_Imports.razor` file are only applied to Razor
    (RAZOR) files. They are not applied to C# (CS) files. This distinction is important
    when using the code-behind technique that we will examine later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `Demo` project includes many types of files divided into various folders.
    Next, we will examine the contents of the `Shared` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the shared Razor components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The shared Razor components are in the `Shared` folder. There are three shared
    Razor components in the `Demo` project:'
  prefs: []
  type: TYPE_NORMAL
- en: The `MainLayout` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `NavMenu` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SurveyPrompt` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MainLayout component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `MainLayout` component is used to define the page layout for the `Demo`
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared/MainLayout.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code indicates that the `MainLayout` component inherits from
    the `LayoutComponentBase` class. The `LayoutComponentBase` class represents a
    layout and has only one property, which is the `Body` property. The `Body` property
    gets the content to be rendered inside the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the layout of a page as defined by the `MainLayout`
    component of the `Demo` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Screen layout ](img/B18471_02_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: Page layout of the Demo project'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The `Blazor WebAssembly App` project template uses `Bootstrap 5.1` to style
    its pages. If you are unfamiliar with Bootstrap 5.1, you can refer to [https://getbootstrap.com/docs/5.1/getting-started/introduction/](https://getbootstrap.com/docs/5.1/getting-started/introduction/)
    to familiarize yourself with its syntax. Regrettably, the project template provided
    by Microsoft does not use the most current version of Bootstrap. To learn more
    about the current version of Bootstrap, refer to [https://getbootstrap.com](https://getbootstrap.com).
  prefs: []
  type: TYPE_NORMAL
- en: The `MainLayout` component includes its own dedicated CSS styles that are defined
    in the `MainLayout.razor.css` file. This is an example of **CSS isolation**. By
    using CSS isolation, we can reduce the number of global styles and avoid style
    conflicts in nested content. As we mentioned earlier, all the component-level
    styles will be bundled together into one CSS file during the build process.
  prefs: []
  type: TYPE_NORMAL
- en: The NavMenu component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `NavMenu` component defines the navigation menu for the `Demo` project.
    It uses multiple `NavLink` components to define the various menu options. This
    is the section of the `NavMenu` component that references the `NavLink` components
    used for the project’s navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NavLink` component is defined in the `Microsoft.AspNetCore.Components.Routing`
    namespace. It behaves like an `a` element, except it has added functionality that
    highlights the current URL. This is the HTML that is rendered by `NavLink` for
    the `Counter` component when the `Counter` component is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The style used for the `nav-link` class is from Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: The `NavMenu` component includes its own dedicated CSS styles that are defined
    in the `NavMenu.razor.css` file. This is another example of CSS isolation.
  prefs: []
  type: TYPE_NORMAL
- en: The SurveyPrompt component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `SurveyPrompt` component creates a link to a brief survey on Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Demo` project, the `Shared` folder contains the non-routable components.
    Next, we will examine the routable components in the `Pages` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the routable Razor components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The routable Razor components are in the `Pages` folder. A routable Razor component
    includes one or more `@page` directives at the top of the file. There are three
    routable Razor components in the `Demo` project:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Index` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Counter` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FetchData` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Index component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Home` page of the `Demo` project uses the `Index` component that is defined
    in the `Pages/Index.razor` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pages/Index.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code includes an `@page` directive that references the root of
    the web app and some markup. The markup includes both a `PageTitle` component
    and a `SurveyPrompt` component.
  prefs: []
  type: TYPE_NORMAL
- en: The `PageTitle` component is a built-in Razor component that renders an HTML
    `title` element. The `title` element is used to define the page’s title in the
    browser and is the text displayed on the tab in the browser. It also is used when
    the page is added to favorites.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: If your component includes more than one `PageTitle` component, only the last
    one to be rendered will be used. The other ones will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: The `SurveyPrompt` component is a custom component that is defined in the `Shared`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: The Counter component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Counter` component is more complex than the `Index` component. Like the
    `Index` component, it contains an `@page` directive that is used for routing and
    some markup. However, it also contains a C# code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pages/Counter.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, a private `currentCount` variable is used to hold
    the number of times that the button has been clicked. Each time the `Counter`
    button is clicked, the `Counter` component’s registered `@onclick` handler is
    called. In this case, it is the `IncrementCount` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `IncrementCount` method increments the value of the `currentCount` variable,
    and the `Counter` component regenerates its render tree. Blazor compares the new
    render tree against the previous one and applies any modifications to the browser’s
    DOM. This results in the displayed count being updated.
  prefs: []
  type: TYPE_NORMAL
- en: The FetchData component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `FetchData` component is by far the most complex component in the `Demo`
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the directives in the `Pages/FetchData.razor` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `@page` directive is used for routing and the `@inject` directive is used
    for dependency injection. In this component, the `HttpClient` that is defined
    in the `Program.cs` file is being injected into the view. For more information
    on dependency injection, refer to *Chapter 7*, *Building a Shopping Cart Using
    Application State*.
  prefs: []
  type: TYPE_NORMAL
- en: The following markup demonstrates the use of a very important pattern that you
    will often use when developing a Blazor WebAssembly application. Because the application
    runs on the browser, all data access must be asynchronous. That means that when
    the page first loads, the data will be `null`. For that reason, you always need
    to test for the `null` case before attempting to process the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the markup in the `Pages/FetchData.razor` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The preceding markup includes an `if` statement and a `foreach` loop. While
    the value of `forecasts` is `null`, a `Loading` message is displayed. Once the
    value of `forecasts` is no longer `null`, all the items in the array are presented
    in a table.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The value of `forecasts` will be `null` the first time that the page is rendered.
    If you do not handle the case when the value of `forecasts` is `null`, the framework
    will throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: As previously mentioned, Blazor components have a well-defined life cycle. The
    `OnInitializedAsync` method is invoked when the component is rendered. After the
    `OnInitializedAsync` method completes, the component is rerendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code block in the `Pages/FetchData.razor` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: First, the preceding code block declares a parameter to contain a nullable array
    of the type `WeatherForecast`. Next, it uses the `OnInitializedAsync` asynchronous
    method to populate the array. To populate the array, the `GetFromJsonAsync` method
    of the `HttpClient` service is used. For more information on `HttpClient`, refer
    to *Chapter 11*, *Building a Task Manager Using the* *ASP.NET* *Web API*.
  prefs: []
  type: TYPE_NORMAL
- en: Using a component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Razor components are used by including them in the markup of another component.
    We will add a `Counter` component to the `Home` page. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete all the markup after the `PageTitle` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure you do not remove the `@page` directive at the top of the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup below the `PageTitle` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the **Build** menu, select the **Build Solution** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the browser and navigate to the **Home** page. If the `Demo` project
    is not running, from the **Debug** menu, select the **Start Without Debugging**
    (*Ctrl*+*F5*) option to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*R* to refresh the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you update your C# code, you need to refresh the browser for the browser
    to load the updated DLL unless you use `Hot Reload`.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Click me** button 3 times to test the `Counter` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Current value** is now `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have nested a Razor component within another Razor component. Next, we will
    update a component using `Hot Reload`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Modifying a component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By using `Hot Reload`, we can automatically update the app without having to
    rebuild it or refresh the browser. We will update the `Counter` component and
    rebuild the app using `Hot Reload`. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio, without closing the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you can, configure your screen to display both the browser and Visual Studio
    at the same time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `Pages/Counter.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the text in the `h1` element to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Hot Reload** drop-down button on the toolbar or press *Alt*+*F10*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the text on the browser has changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Click me** button 3 times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Current value** is now `6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The value of the current count did not change when `Hot Reload` was used to
    update the code.
  prefs: []
  type: TYPE_NORMAL
- en: Use the **Hot Reload** drop-down button on the toolbar to select **Hot Reload
    on File Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the markup below the `PageTitle` component to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will add some formatting to the `Counter` component and change
    the label from **Current count** to **Current value**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the top of the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click *Ctrl*+*S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Hot Reload** warning dialog is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Always rebuild when updates can’t be applied** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Rebuild and Apply Changes** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `IncrementCount` method to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click *Ctrl*+*S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app rebuilds and refreshes the browser without displaying the **Hot Reload**
    warning dialog.
  prefs: []
  type: TYPE_NORMAL
- en: By using `Hot Reload`, we were able to make changes to our code and see those
    changes immediately reflected in the browser. In this example, we were not in
    debug mode, but it is important to remember that `Hot Reload` also works in debug
    mode. Next, we need to set the value of the increment.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a parameter to a component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most components require parameters. To add a parameter to a component, use
    the `Parameter` attribute. We will add a parameter to specify the increment used
    by the `IncrementCount` method. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Pages/Counter.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the top of the code block to define the new parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `OnParametersSet` method to set the value of `increment`
    to the value of the `Increment` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adding the `OnParametersSet` method will require a restart, as indicated by
    the following image:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, email  Description automatically generated](img/B18471_02_18.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.18: Page layout of the Demo project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Restart Application** from the **Hot Reload** drop-down button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the text in the `h1` element to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the address bar to the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Click me** button 3 times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Current value** is now `15`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added a parameter that can obtain its value from the query string. It
    can also obtain its value from an attribute. Next, we will add a `Counter` component
    to the `Index` component that increments its value by 7 each time it is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Using a parameter with an attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add another instance of the `Counter` component to the `Home` page
    that uses the new parameter. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the bottom of the `Index.razor` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you add the markup, **IntelliSense** is provided for the new `Increment`
    parameter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_02_19.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.19: IntelliSense'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Home** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Home** page now contains two instances of the `Counter` component. If
    you click the first **Click me** button, the first counter will be incremented
    by 1; if you click the second **Click me** button, the second counter will be
    incremented by 7.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click each of the **Click me** buttons to verify they both work as intended.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a route parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Components can have multiple `@page` directives. We will add an `@page` directive
    to the `Counter` component that uses a parameter. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Pages/Counter.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `SupplyParameterFromQuery` attribute from the `Increment` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@page` directive to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Counter` component now includes two `@page` directives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `Counter` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the URL to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Since the page is automatically reloaded when you change the URL, you do not
    need to refresh the browser to reload the page.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Click me** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The counter should now increment by 4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the URL to an invalid route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since this is not a valid route, you will be directed to the `NotFound` content
    defined in the `App` component:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_02_20.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.20: Page not found'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to navigate to a URL in code, you should use `NavigationManager`.
    `NavigationManager` provides a `NavigateTo` method that is used to navigate the
    user to the specified URI without forcing a page load.
  prefs: []
  type: TYPE_NORMAL
- en: Using partial classes to separate markup from code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many developers prefer to separate their markup from their C# fields, properties,
    and methods. Since Razor components are regular C# classes, they support partial
    classes. The `partial` keyword is used to create a partial class. We will use
    a partial class to move the code block from the `RAZOR` file to a `CS` file. We
    do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Pages` folder and select **Add**, **Class** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `Counter.razor.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `Counter` class to be a partial class by using the `partial` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Pages/Counter.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy all the code in the code block to the partial `Counter` class in the `Counter.razor.cs`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the code block from the `Counter.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Counter** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Click me** button to verify that it still works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using partial classes gives you the flexibility to move the code in the code
    block to a separate file, allowing you to use the code-behind technique.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: A quick way to create the code-behind page is to right-click on the code block
    and use the **Quick Actions and Refactorings** option to extract the block to
    code behind.
  prefs: []
  type: TYPE_NORMAL
- en: We have created a `Demo` project by using the **Blazor WebAssembly App**project
    template provided by Microsoft. We added a parameter to the `Counter` component
    and moved the code in the code block of the `Counter` component to a separate
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to create a Blazor WebAssembly application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we introduced Razor components. We learned about their parameters,
    naming conventions, life cycle, and structure. We also learned about routing and
    Razor syntax. Finally, we learned how to use `Hot Reload`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used the **Blazor WebAssembly App** project template provided
    by Microsoft to create the `Demo` project. We examined each of the files in the
    `Demo` project. We added a parameter to the `Counter` component and examined how
    routing works. Finally, we practiced using `Hot Reload`.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: Can Razor components include JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What types of loops are supported by Razor syntax?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can the parameter of a component be defined using a POCO?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Will `Hot Reload` render changes to CSS files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can a child component trigger an infinite loop?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Bootstrap, refer to [https://getbootstrap.com](https://getbootstrap.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on Razor syntax, refer to [https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor](https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on `Hot Reload`, refer to [https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload](https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
