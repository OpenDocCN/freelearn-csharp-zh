- en: Chapter 2. Hello, Platforms!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with developing applications using Visual Studio on Windows,
    then using Xamarin Studio should be very straightforward. Xamarin uses the same
    concept of a **solution** containing one or more **projects**, and it has created
    several new project types for iOS and Android applications. There are also several
    project templates to jump-start your development of common applications.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin Studio supports several out-of-the-box project types, including standard
    `.NET` class libraries and console applications. You cannot natively develop Windows
    applications on a Mac with Xamarin Studio, but you can certainly develop the shared
    code portion of your application in Xamarin Studio. We'll focus on sharing code
    in the later chapters, but keep in mind that Xamarin enables you to share a common
    C# backend between most platforms that support C#.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a "Hello World" application for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple's MVC pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode and storyboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a "Hello World" application for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin's Android designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your first iOS application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Launch Xamarin Studio and start a new solution. Just like in Visual Studio,
    there are lots of project types that can be created from the **New Solution**
    dialog. Xamarin Studio, formerly **MonoDevelop**, supports the development of
    many different types of projects such as C# console applications targeting the
    Mono runtime, NUnit test projects, and even other languages besides C#, such as
    VB or C++.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xamarin Studio supports the following project types for iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iPhone or iPad project**: These categories of projects use storyboards to
    lay out the UI and target either the iPad or iPhone only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal project**: This category supports both iPhone and iPad in the same
    iOS application. This is the preferred project type if you need to target both
    types of devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single View Application**: This is the basic project type that sets up an
    iOS storyboard along with a single view and controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tabbed Application**: This is a project type that automatically sets up **UITabViewController**
    for applications with a tab layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WebView Application**: This project type is for creating *hybrid* applications
    that are partially HTML and partially native. The application is set up to take
    advantage of the Razor templating features of Xamarin Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS binding project**: This is an iOS project that can create C# bindings
    for an Objective-C library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS unit test project**: This is a special iOS application project that can
    run NUnit tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS library project**: This is a class library used within other iOS application
    projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get started, navigate to **iOS** | **iPhone**, and create **Single View
    Application** in the directory of your choice, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building your first iOS application](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll notice that several files and folders are automatically created from
    the project template. These files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Components`: This folder will contain any components added from the Xamarin
    Component Store. See [Chapter 9](part0070_split_000.html#page "Chapter 9. Third-party
    Libraries"), *Third-party Libraries*, for more information about the Xamarin Component
    Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resources`: This directory will contain any images or plain files that you
    want to be copied directly to your application bundle. Note that this will contain
    a black splash screen image, by default. This ensures that your iOS application
    runs full screen on the iPhone 5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppDelegate.cs`: This is Apple''s main class that handles application-level
    events in your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Entitlements.plist`: This is a settings file Apple uses to declare permissions
    for certain iOS features such as push notifications and iCloud. You will generally
    only have to use it for advanced iOS features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*ViewController.cs`: This is the controller that represents the first screen
    in your app. It will have the same name as your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Info.plist`: This is Apple''s version of a `manifest` file that can declare
    various settings for your application such as the app title, icon, splash screens,
    and other common settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Main.cs`: This file contains the standard entry point for a C# program: `static
    void Main()`. It''s most likely that you will not need to modify this file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MainStoryboard.storyboard`: This is the storyboard definition file for your
    application. It will contain the layouts for the views in your app, list of controllers,
    and the transitions used to navigate throughout your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s run the application to see what we get by default from the project
    template. Click on the large play button in the top-left corner of Xamarin Studio.
    You will be greeted by the simulator running your first iOS application, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building your first iOS application](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So far, your app is just a plain white screen, which is not very exciting or
    useful. Let's get a little more background on iOS development before moving forward.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your application's minimum iOS target, you can also run the application
    on different versions of the iOS simulator. Apple also provides simulators for
    iPad and all the different iOS devices currently in the market. It is also important
    to know that these are simulators and not emulators. An emulator will run an encapsulated
    version of the mobile OS (just as Android does). Emulators generally exhibit slower
    performance but give you a closer replica of the real OS. Apple's simulators run
    in native Mac applications and are not true operating systems. The benefit is
    that they are very fast in comparison to Android emulators.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Apple's MVC pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before getting too far with iOS development, it is really important to get a
    foundation with Apple's design pattern to develop on iOS. You might have used
    the **Model View Controller** (**MVC**) pattern with other technologies such as
    **ASP.NET**, but Apple implements this paradigm in a slightly different way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MVC design pattern includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This is the backend business logic that drives the application.
    This can be any code that, for example, makes web requests to a server or saves
    data to a local **SQLite** database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This is the actual user interface seen on the screen. In iOS terms,
    this is any class that derives from `UIView`. Examples are toolbars, buttons,
    and anything else the user would see on the screen and interact with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: This is the workhorse of the MVC pattern. The controller interacts
    with the Model layer and updates the View layer with the results. Similar to the
    View layer, any controller class will derive from `UIViewController`. This is
    where a good portion of the code in iOS applications resides.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows you the MVC design pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Apple''s MVC pattern](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To understand this pattern better, let''s walk you through the following example
    of a common scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: We have an iOS application with a search box that needs to query a website for
    a list of jobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user will enter some text into the `UITextField` textbox and click on the
    `UIButton` button to start the search. This is the View layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some code will respond to the button by interacting with the view, display a
    `UIActivityIndicatorView` spinner, and call a method in another class to perform
    the search. This is the Controller layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A web request will be made in the called class and a list of jobs will be returned
    asynchronously. This is the Model layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The controller will then update the view with the list of jobs and hide the
    spinner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on Apple's MVC pattern, see the documentation site at [https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/MVC.html](https://developer.apple.com/library/mac/documentation/general/conceptual/devpedia-cocoacore/MVC.html).
  prefs: []
  type: TYPE_NORMAL
- en: A point to note is that you are free to do anything you want in the Model layer
    of your application. This is where we can use plain C# classes that can be reused
    on other platforms such as Android. This includes any functionality using the
    C# **Base Class Libraries** (**BCL**), such as working with web services or a
    database. We'll dive deeper into cross-platform architecture and code-sharing
    concepts later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Using the iOS designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our plain white application is quite boring, let's modify the View layer
    of our application with some controls. To do this, we will modify the `MainStoryboard.storyboard`
    file in your project in Xamarin Studio. Optionally, you can open the storyboard
    file in Xcode, which was previously the method of editing storyboard files before
    the designer was available in Xamarin Studio. Using Xcode can still be useful
    if there is a feature in iOS storyboards that isn't available yet in the Xamarin
    designer or if you need to edit an older iOS format such as `XIB` files. However,
    Xcode is not quite as good of an experience, since custom controls in Xcode render
    as a plain white square. Xamarin's designer actually runs your drawing code in
    custom controls, so that you get an accurate view of what your application will
    look like at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the iOS designer](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add some controls to our app by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project you created earlier in this chapter in Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `MainStoryboard.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The iOS designer will open, and you will see the layout for the single controller
    in your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Document Outline** tab on the right-hand side, you'll see that your
    controller contains a single view in its layout hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top-left corner, you'll notice a toolbox that contains several types
    of objects that you can drag and drop onto your controller's view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, search for `UILabel` and drag the label onto your view at
    a location of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the label to edit the text of the label to anything you wish.
    You can also fill out this value from the **Properties** tab in the bottom-right
    corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Likewise, search for `UIButton` and drag the button onto your view somewhere
    above or below the label. You can edit the text on the button using the **Properties**
    tab. Double-clicking on the button will add a click event handler as you might
    be familiar in Visual Studio when developing for other platforms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your application should start looking a lot more like a real application, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the iOS designer](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now you might be wondering about adding user interaction options to the app
    at this point. In Xcode's iOS designer, you can make an **outlet** that will make
    each view visible from C#. An outlet is a reference to a view in a storyboard
    or `XIB` file that will be filled out with an instance of the view at runtime.
    You can compare this concept to naming a control in other technologies such as
    ASP.NET MVC, WebForms, or **Windows Presentation Foundation** (**WPF**). Luckily,
    Xamarin's iOS designer is a bit simpler than setting up an outlet in Xcode. You
    merely fill out the **Name** field in the **Properties** tab, and Xamarin Studio
    will generate a property in **partial class**, which gives you access to the label
    and button from your controller. Additionally, you can wire an **action** from
    a storyboard file, which is a method that will be called when an event occurs.
    Xamarin Studio exposes iOS actions as partial methods to be implemented in your
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some interactions to the app as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch back to Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `MainStoryboard.storyboard` file again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the label you created earlier and go to the **Properties** pane and make
    sure that you have the **Widget** tab selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name `label` in the **Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for the button, and enter the name `button` into its **Name**
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Xamarin has improved this experience greatly from what the experience used to
    be in Xcode. Xcode has a strange interface for those used to Visual Studio. The
    method used to create an outlet involved clicking and dragging from the control
    onto an Objective-C header file. Merely filling out a **Name** field is much simpler
    and much more intuitive for developers that have a C# background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have two outlets defined, two new properties will be available
    from your controller. Expand the `*ViewController.cs` file in your solution and
    open the `*ViewController.designer.cs` file. You will see your properties defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is not a good idea to modify this file since Xamarin Studio can rebuild it
    if you make further changes in the designer or Xcode. Nevertheless, it is a good
    practice to learn how things are actually working behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `*ViewController.cs` file, and let''s enter the following code in
    your controller''s `ViewDidLoad` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When the `ViewDidLoad` method is called, your controller's view is loaded for
    the first time. This happens once in the lifetime of your controller. We subscribed
    to the `TouchUpInside` event, which is fired when the button is clicked; iOS does
    not have a click event, which might be what you are used to on Windows platforms.
    We also used C#'s convenient lambda expression syntax to update the label when
    the event is fired. A lambda expression is shorthand for an anonymous method,
    which is a feature that has been part of C# since .NET 4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your application, and you will be able to interact with your button and
    increment the value displayed in the label, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the iOS designer](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to make a transition from one controller to another. To do this,
    iOS has a concept called **segue**, which is basically some kind of animation
    that switches from one controller to the next. There are several types of segues,
    but the most common segue slides transition to a new controller from the right
    or bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add a second controller to the application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to your project in Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `MainStoryboard.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new controller from the object library that is usually in the bottom-left
    corner next to the first controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the controller to select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Properties** pane and make sure you are on the **Widget** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name such as `SecondController` for the controller into the **Class**
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's add a segue for the transition from the first controller to this one.
    Hold the *Ctrl* key while clicking on the button from the original controller
    to your new controller. A blue line will appear followed by a small pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **modal** from the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application from Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we set up a modal segue from the first controller's button, your second
    controller will appear while clicking on it. However, there isn't a way to exit
    the new controller yet. If you return to Xamarin Studio, you'll notice that a
    `SecondController.cs` file and a `SecondController.designer.cs` file have been
    automatically created for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a button to `SecondController` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `MainStoryboard.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a button from the object library onto the second controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Properties** pane and **Widget** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Name** of the button to `close`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Title** of the button to `Close`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `SecondController.cs` file and add the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you compile and run your application, clicking on the button will increment
    the value on the label and display the modal second controller. You can then close
    the second controller by tapping on the **Close** button. Notice the neat sliding
    animation; iOS automatically applies these kinds of transition effects and are
    very easy to customize on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the iOS designer](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Since we have gone over the basics of laying out controls in Xamarin's iOS designer
    and interacting with outlets in C#, let's go over the standard lifecycle of an
    iOS application. The primary location for handling application-level events is
    in the `AppDelegate` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open your `AppDelegate.cs` file, you can override the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FinishedLaunching`: This is the first entry point for the application, which
    should return `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DidEnterBackground`: This means that the user clicked on the home button on
    their device or another app, such as a phone call, came to the foreground. You
    should perform any action needed to save the user''s progress or state of the
    UI as the iOS might close your application to save memory once pushed to the background.
    While your application is in the background, the user could be navigating through
    the home screen or opening other apps. Your application is effectively paused
    in memory until resumed by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WillEnterForeground`: This means that the user has reopened your application
    from the background. You might need to perform other actions here such as refreshing
    the data on the screen and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnResignActivation`: This happens if the operating system displays a system
    popup on top of your application. Examples of this are calendar reminders or the
    menu the user can swipe down from the top of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnActivated`: This happens immediately after the `OnResignActivation` method
    is executed as the user returns to your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReceiveMemoryWarning`: This is a warning from the operating system to free
    up the memory in your application. It is not commonly needed with Xamarin because
    of the C#''s garbage collector, but if there are any heavy objects such as images
    throughout your app, this is a good place to dispose them. If enough memory cannot
    be freed, the operating system can terminate your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HandleOpenUrl`: This is called if you implement a **URL scheme**, which is
    the iOS equivalent of file extension associations on a desktop platform. If you
    register your app to open different types of files or URLs, this method will be
    called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Likewise, in your `*ViewController.cs` file, you can override the following
    methods on your controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ViewDidLoad`: This occurs when the view associated with your controller is
    loaded. It will occur only once on devices running iOS 6 or higher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ViewWillAppear`: This occurs prior to your view appearing on the screen. If
    there are any views that need to be refreshed while navigating throughout your
    app, this is generally the best place to do it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ViewDidAppear`: This occurs after the completion of any transition animations
    and your view is displayed on the screen. In some uncommon situations, you might
    need to perform actions here instead of in `ViewWillAppear`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ViewWillDisappear`: This method is called prior to your view being hidden.
    You might need to perform some cleanup operations here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ViewDidDisappear`: This occurs after any transition animations are completed
    for displaying a different controller on the screen. Just like the methods for
    appearing, this occurs after `ViewWillDisappear`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are several more methods available to override, but many are deprecated
    for recent versions of iOS. Familiarize yourself with Apple's documentation site
    at [http://developer.apple.com/library/ios](http://developer.apple.com/library/ios).
    It is very helpful to read the documentation on each class and method when trying
    to understand how Apple's APIs work. Learning how to read (not necessarily code)
    Objective-C is also a useful skill to learn so that you are able to convert Objective-C
    examples to C# when developing iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: Building your first Android application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up an Android application in Xamarin Studio is just as easy as it is
    for iOS and is very similar to the experiences in Visual Studio. Xamarin Studio
    includes several project templates that are specific for Android to jump-start
    your development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xamarin Studio includes the following project templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android application**: A standard Android application that targets the newest
    Android SDKs installed on your machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Honeycomb application**: A project that targets Android Honeycomb,
    which is **API** (**Application Programming Interface**) level 12 and higher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Ice Cream Sandwich application**: A project that targets Android
    Ice Cream Sandwich, which is API level 15 and above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android library project**: A class library that can only be referenced by
    Android application projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Java bindings library**: A project for setting up a Java library
    to be called from C#.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android OpenGL application**: A project template to use low-level OpenGL
    for 3D or 2D rendering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android WebView application**: A project template for a hybrid app using
    HTML for certain parts. Support for Razor templating is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android unit test project**: A project for running NUnit tests on Android.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launch Xamarin Studio and start a new solution. From the **New Solution** dialog,
    create a new **Android Application** under the **Android** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will end up with a solution looking something similar to what is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building your first Android application](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll see that the following files and folders specific to Android have been
    created for you:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Components` folder: This is the same as for iOS projects; the place where
    components from the Xamarin Component Store can be added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Assets` folder: This directory will contain files with a `build` action
    of `AndroidAsset`. This folder will contain raw files to be bundled with an Android
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Properties/AndroidManifest.xml` file: This file contains standard declarations
    about your Android applications, such as the application name, ID, and permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Resources` folder: Resources are images, layouts, strings, and so on that
    can be loaded via Android''s resource system. Each file will have an ID generated
    in `Resources.designer.cs` that you can use to load the resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Resources/drawable` folder: Any images used by your application are generally
    placed here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Resources/layout` folder: This contains any `*.axml` (Android XML) files
    that Android uses to declare UIs. Layouts can be used for an entire **activity**,
    **fragment**, **dialog**, or **child control** to be displayed on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Resources/values` folder: This contains XML files to declare key-value
    pairs for strings (and other types) throughout an application. This is how localization
    for multiple languages is normally set up on Android.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `MainActivity.cs` file: This is the `MainLauncher` action and the first
    activityof your Android application. There is no `static void Main` function in
    Android apps; execution begins on the activity that has `MainLauncher` set to
    `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s perform the following steps to run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the play button to compile and run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **Select Device** dialog will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the emulator of your choice and click on **Start Emulator**. If you have
    set up the x86 emulator in [Chapter 1](part0014_split_000.html#page "Chapter 1. Setting
    Up Xamarin"), *Setting Up Xamarin*, I would recommend that you use it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait a few seconds for the emulator to start. Once it starts, it is a good idea
    to leave it running as long as you are working on an Android project. This will
    save you a good deal of time waiting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the emulator now enabled in the list of devices; select it, and
    click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The very first time you deploy to an emulator or device, Xamarin Studio will
    have to install a few things such as the Mono shared runtime and Android platform
    tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch over to the Android emulator and your application will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When all is done, you have deployed your first Android application, complete
    with a single button. Your app will look like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building your first Android application](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Android activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android operating system is very focused on the concept of an activity.
    An activity is a task or unit of work that users can perform on their screen.
    For example, users would perform a phone **activity** to dial a number and carry
    out a second activity that involves interacting with their address book to locate
    the number. Each Android application is a collection of one or more activities
    that users can launch and press the hardware's back key on their device to exit
    or cancel. The user's history is kept in the Android **back stack**, which you
    can manipulate from code in special cases. When a new activity starts, the previous
    one is paused and maintained in memory for later use, unless the operating system
    is running low on memory.
  prefs: []
  type: TYPE_NORMAL
- en: Activities are loosely coupled with each other; in some ways, you can think
    of them as having completely separate states from one another in memory. Static
    values will persist the life of the application as in .NET applications, but the
    common practice is to pass a state through an Android **bundle**. An Android bundle
    is a set of key-value pairs used to pass data from one Android object to another.
    This is useful to pass an identifier for an item displayed in a list to edit that
    item in a new activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activities have the following lifecycle callback methods that you can override:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnCreate`: This is the first method called when your activity is created.
    Set up your views and perform other loading logic here. Most importantly, you
    will call `SetContentView` here to set up your activity''s view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnResume`: This is called when your activity''s view is visible on the screen.
    It is called if your activity is displayed for the first time, and when the user
    returns to it from another activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnPause`: This is called to notify that the user has left your activity. It
    can happen prior to navigating to a new activity within your app, locking the
    screen, or hitting the home button. Assume that the user might not return, so
    you need to save any changes the user made here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnStart`: This occurs immediately before `OnResume` when the activity''s view
    is about to be displayed on the screen. It occurs when an activity starts and
    when a user returns to it from another activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnStop`: This occurs immediately after `OnPause` when the activity''s view
    is no longer displayed on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnRestart`: This method occurs when the user returns to your activity from
    a previous activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnActivityResult`: This method is used to communicate with other activities
    in other applications on Android. It is used in conjunction with `StartActvityForResult`;
    for example, you will use this to interact with the Facebook application to log
    in a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnDestroy`: This is called when your activity is about to be freed from memory.
    Perform any additional cleanup that could help the operating system here, such
    as disposing of any other heavyweight objects the activity was using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A flowchart of the Android lifecycle is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android activities](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Unlike iOS, Android does not enforce any design patterns upon its developers.
    However, it is not possible to get away without understanding the Android activity
    lifecycle to some degree. Many concepts with activities are parallel to controllers
    on iOS; for example, `OnStart` is equivalent to `ViewWillAppear` and `OnResume`
    is equivalent to `ViewDidAppear`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other methods for working with activities are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StartActivity(Type type)`: This method starts a new activity within your application
    and passes no extra information to the activity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StartActivity(Intent intent)`: This is an overload method to start a new activity
    with `Intent`. This gives you the ability to pass additional information to the
    new activity, and you can also launch activities in other applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StartActivityForResult`: This method starts a new activity with the anticipation
    of receiving `OnActivityResult` when the activity''s operation is completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Finish`: This will close the current activity and invoke `OnDestroy` when
    it is completely closed and no longer displayed on the screen. Depending on what
    is currently on the back stack, the user will return to a previous activity or
    the home screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SetContentView`: This method sets the primary view to be displayed for an
    activity. It should be called within the `OnCreate` method prior to the activity
    being displayed on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FindViewById`: This is a method to locate the view displayed in your activity.
    It has a generic version to return a view of the appropriate type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can think of `intent` as an object that describes the transition from one
    activity to another. You can pass additional data through intents as well as modify
    how the activity is displayed and the user's navigation history.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to activities, Android has the concept of a fragment. You can think
    of a fragment to be a miniature activity that is displayed inside a parent activity.
    Fragments are useful for reusing different pieces of a UI throughout your apps
    and can also help you implement split screen navigation on tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin's Android designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default template for Android projects has a little more built-in functionality
    than iOS. Android user interface layouts are defined in XML files that are readable
    by humans and editable. However, Xamarin Studio has provided an excellent design
    tool that allows you to drag and drop controls to define your Android layouts.
    Let's add some more features to your application and start using the Android designer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to Xamarin Studio and carry out the following steps to add features
    to your app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Android project you created earlier in this chapter in Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Resources** | **layout** in your project and open `Main.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the Android designer open in Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag **TextView** from the **Toolbox** section on the right to the layout just
    above the button labeled **Hello World, Click Me!**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type some default text such as `Count: 0` into the label.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** pane on the right, you'll see the **id** value is set
    to `@+id/textView1`. Let's change it to `@+id/myText`, in order to be consistent
    with the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While we're here, go ahead and change the text on the button to something more
    appropriate such as `Add`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the play button to compile and run the application. If you still have
    the Android emulator, you can simply switch to it. Otherwise, you will have to
    start it again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Android application will now look identical to the changes you made in
    the designer as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Xamarin''s Android designer](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's interact with the new label from the code. Switch back to Xamarin
    Studio and open `MainActivity.cs`. Let's modify the activity to interact with
    the **TextView** field instead of the button. We use the `FindViewById` method
    to retrieve a view by the ID we set up in the layout file. Xamarin Studio has
    also auto-generated a static class named `Resource` to reference your identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s retrieve the instance of the **TextView** field by placing this code
    in `OnCreate` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `Resource` class is a static class that the Xamarin designer will populate
    for you. For future reference, you might have to build your Android project for
    new IDs and other resources to show up in your C# files in Xamarin Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s update the `Click` event on the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will rewire the button to update the text in **TextView** instead of on
    the button itself. Now if we run the application, we''ll get an Android app that
    functions identically to the iOS one in the previous chapter. The Android app
    will look like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Xamarin''s Android designer](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Since we added some of our own views to our layout, let's add a second activity
    to build on our understanding of activities in Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to Xamarin Studio and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If needed, open the Android project you created earlier in the chapter in Xamarin
    Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Android activity in the project under the **Android** section.
    Name it `SecondActivity.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Resources** | **layouts**, and create a new Android layout named
    `Second.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `SecondActivity.cs` and add the following code to `OnCreate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `MainActivity.cs` and add the following line of code to the `Click` event
    of your button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `Second.axml` and drag a button into the view. Set its text to `Finish`,
    for example, and set its ID to `@+id/finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, open `SecondActivity.cs` and add the following lines to its `OnCreate`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your application''s button will now launch a new activity in addition to incrementing
    the count on the label. Once `SecondActivity` is visible, you can click on its
    button to finish the activity and return to the first activity. Down the road,
    if you need to pass information from one activity to another, you will need to
    create an `Intent` object to pass to `StartActivity`. The second activity of your
    app is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Xamarin''s Android designer](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created our first iOS application in Xamarin Studio. We
    covered Apple's MVC design pattern to better understand the relationship between
    `UIViewController` and `UIView` and also covered how to use the iOS designer in
    Xamarin Studio to edit storyboard files. Next, we created our first Android application
    in Xamarin Studio and learned the activity lifecycle in Android. We also used
    Xamarin's Android designer to make changes to Android XML layouts.
  prefs: []
  type: TYPE_NORMAL
- en: From the topics covered in this chapter, you should be fairly confident in developing
    simple apps for iOS and Android using Xamarin's tools. You should have a basic
    understanding of the native SDKs and design patterns to accomplish tasks on iOS
    and Android.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll cover various techniques used to share code across
    platforms with Xamarin Studio. We'll go over different ways of architecting your
    cross-platform application and how to set up Xamarin Studio projects and solutions.
  prefs: []
  type: TYPE_NORMAL
