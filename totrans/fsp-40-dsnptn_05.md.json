["```cs\nlet tuple = (1,\"2\",fun() ->3) \n\n```", "```cs\nlet a = 1, \"car\" \na = (1, \"car\") \n\n```", "```cs\ntuple = (1,\"2\",fun() ->3) \n\n```", "```cs\na < (2,\"jet\") \n\n```", "```cs\nlet (elem1, elem2) = a \nprintfn \"(%i,%s)\" elem1 elem2 \n\n```", "```cs\nlet (_,_,f) = tuple in \nf() \n\n```", "```cs\nlet a = 1,\"car\" \ntype System.Tuple<'T1,'T2> with \n  member t.AsString() = \n    sprintf \"[[%A]:[%A]]\" t.Item1 t.Item2 \n(a |> box :?> System.Tuple<int,string>).AsString() \n\n```", "```cs\ntype transport = { code: int; name: string } \nlet a = { code = 1; name = \"car\" } \n\n```", "```cs\nlet b = { name = \"jet\"; code = 2 } \n\n```", "```cs\nlet c = { b with transport.name = \"plane\" } \n\n```", "```cs\n[<ReferenceEquality>] \ntype Transport = { code: int; name: string } \nlet x = {Transport.code=5; name=\"boat\" } \nlet y = { x with name = \"boat\"} \nlet noteq = x = y \nlet eq = x = x \n\n```", "```cs\nlet  { transport.code = _; name = aName } = a \n\n```", "```cs\nlet { transport.name = aname} = a \n\n```", "```cs\ntype Configuration = { \n  Database: string \n  RetryCount: int \n} \n\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]  \n[<AutoOpen>] \nmodule Configuration = \n  let private singleton = ref { Database  = \"(local)\"; RetryCount = 3 } \n  let private guard = obj() \n\n  type Configuration with \n    static member Current \n    with get() = lock guard <| fun() -> !singleton \n    and set value = lock guard <| fun() -> singleton := value \n\nprintfn \"Default start-up config: %A\" Configuration.Current \n\nConfiguration.Current <- { Configuration.Current with Database =    \".\\SQLExpress\" } \n\nprintfn \"Updated config: %A\" Configuration.Current \n\n```", "```cs\ntype ChargeAttempt =  \n  | Original \n  | Retry of int \n\n```", "```cs\nlet cco = Original \n// equivalent let cco = ChargeAttempt.Original \nlet ccr = Retry 4 \n// equivalent let ccr = ChargeAttempt.Retry(4) \n\n```", "```cs\ntype Brightness = Brightness of int \ntype Voltage = Voltage of int \ntype Bulb = { voltage: Voltage; brightness: Brightness } \n\nlet myBulb = { voltage = Voltage(110); brightness= Brightness(2500)} \n\n```", "```cs\nlet lamp1br = Brightness(2500) \nlamp1br = Brightness(2500) // true \nlamp1br < Brightness(2100) // false \n\n```", "```cs\nmatch myBulb.brightness with \n| Brightness(v) -> v \n// retrieves back 2500 wrapped upon construction \n\n```", "```cs\ntype PaymentInstrumentDiscount = \n  | CreditCard of decimal  \n  | DebitCard of decimal \n  | ACH of decimal \n\n  member x.ApplyDiscount payment = \n    match x with \n    | CreditCard d -> payment - d \n    | DebitCard d -> payment - d \n    | ACH d -> payment - d \n\n```"]