["```cs\nsudo apt-get update\nsudo apt-get install -y wget apt-transport-https\n```", "```cs\nwget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\n```", "```cs\nsudo apt-get update\nsudo apt-get install -y dotnet-runtime-8.0\n```", "```cs\ndotnet --list-runtimes\n```", "```cs\nsudo apt-get update\nsudo apt-get install -y dotnet-sdk-8.0\n```", "```cs\ndotnet --list-sdks\n```", "```cs\ndotnet new console\n```", "```cs\ndotnet build .\n```", "```cs\n./dvroegop\n```", "```cs\n\"WSL\": {\n  \"commandName\": \"WSL2\",\n  \"environmentVariables\": {\n    \"DOTNET_ENVIRONMENT\": \"Development\"\n  },\n  \"distributionName\": \"Ubuntu-22.04\"\n```", "```cs\nwsl –-list\n```", "```cs\nWindows Subsystem for Linux Distributions:\nUbuntu-22.04 (Default)\ndocker-desktop-data\ndocker-desktop\nUbuntu-20.04\n```", "```cs\nwsl –-set-default Ubuntu-22.04\n```", "```cs\nif(OperatingSystem.IsWindows())\n    _logger.LogInformation(\"Worker running on Windows\");\nelse if(OperatingSystem.IsLinux())\n    _logger.LogInformation(\"Worker running on Linux\");\n```", "```cs\nC:\\Users\\dvroe\n```", "```cs\n/home/dvroegop\n```", "```cs\nvar directorySeparatorChar = Path.DirectorySeparatorChar;\nvar pathSeparator = Path.PathSeparator;\nvar currentPath = Directory.GetCurrentDirectory();\nvar newPath = currentPath + directorySeparatorChar + \"newFolder\";\nvar betterWay = Path.Combine(currentPath, \"newFolder\");\nvar twoPaths = currentPath + pathSeparator + newPath;\n$\"DirectorySeparatorChar: {directorySeparatorChar}\".Dump(consoleColor);\n$\"PathSeparator: {pathSeparator}\".Dump(consoleColor);\n$\"Current Path: {currentPath}\".Dump(consoleColor);\n$\"newPath: {newPath}\".Dump(consoleColor);\n$\"betterWay: {betterWay}\".Dump(consoleColor);\n$\"twoPaths: {twoPaths}\".Dump(consoleColor);\n```", "```cs\n$\"End of the output: {Environment.NewLine}\".Dump(consoleColor);\n```", "```cs\n[Unit]\nDescription=My .NET Core Worker Service\nAfter=network.target\n[Service]\nWorkingDirectory=/home/dvroegop/service\nExecStart=/usr/bin/dotnet /home/dvroegop/service/14_CrossPlatformService.dll\nRestart=always\n# Restart service after 10 seconds if the dotnet service crashes:\nRestartSec=10\nKillSignal=SIGINT\nSyslogIdentifier=crossplatformservice\nUser=dvroegop\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\n[Install]\nWantedBy=multi-user.target\n```", "```cs\nsudo mv crossplatformservice.service /etc/systemd/system\n```", "```cs\nsudo systemctl daemon-reload\n```", "```cs\nsudo systemctl enable crossplatformservice\n```", "```cs\nsudo systemctl start crossplatformservice\n```", "```cs\nsudo systemctl status crossplatformservice\n```", "```cs\nsudo journalctl -u crossplatformservice\n```", "```cs\n    sudo systemctl stop crossplatformservice\n    ```", "```cs\n    sudo systemctl disable crossplatformservice\n    ```", "```cs\n    sudo rm /etc/systemd/system/crossplatformservice. Service\n    ```", "```cs\n    sudo systemctl daemon-reload\n    ```", "```cs\n    sudo systemctl status crossplatformservice\n    ```", "```cs\nprivate void RegisterSignalHandlers()\n{\n    // This is the default behavior for SIGTERM\n    AppDomain.CurrentDomain.ProcessExit +=\n        (sender, eventArgs) => $\"Process exit\".Dump();\n    // Handle the signals\n    UnixSignal[] signals =\n    {\n        new(Signum.SIGINT),\n        new(Signum.SIGTERM)\n    };\n    var signalThread = new Thread(() =>\n    {\n        while (true)\n        {\n            var index = UnixSignal.WaitAny(signals);\n            SignalHandler(signals[index].Signum);\n        }\n    })\n    {\n        IsBackground = true\n    };\n    signalThread.Start();\n}\n```", "```cs\nprivate void SignalHandler(Signum signal)\n{\n    switch (signal)\n    {\n        case Signum.SIGINT:\n            _logger.LogInformation(\"Received SIGINT\");\n            break;\n        case Signum.SIGTERM:\n            _logger.LogInformation(\"Received SIGTERM\");\n            break;\n        default:\n            _logger.LogInformation($\"Received signal {(int)signal}\");\n            break;\n    }\n    Environment.Exit(0);\n}\n```"]