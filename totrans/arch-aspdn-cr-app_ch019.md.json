["```cs\nnamespace SimpleEndpoint;\npublic class ShuffleText\n{\n    public record class Request(string Text);\n    public record class Response(string Text);\n    public class Endpoint\n    {\n        public Response Handle(Request request)\n        {\n            var chars = request.Text.ToArray();\n            Random.Shared.Shuffle(chars);\n            return new Response(new string(chars));\n        }\n    }\n}\n```", "```cs\nusing SimpleEndpoint;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddSingleton<ShuffleText.Endpoint>();\nvar app = builder.Build();\napp.MapGet(\n    \"/shuffle-text/{text}\",\n    ([AsParameters] ShuffleText.Request query, ShuffleText.Endpoint endpoint)\n        => endpoint.Handle(query)\n);\napp.Run();\n```", "```cs\nGET https://localhost:7289/shuffle-text/I%20love%20ASP.NET%20Core\n```", "```cs\n{\n  \"text\": \"eo .e vNrCAT PSElIo\"\n}\n```", "```cs\nnamespace SimpleEndpoint;\npublic class RandomNumber\n{\n    public record class Request(int Amount, int Min, int Max);\n    public record class Response(IEnumerable<int> Numbers);\n    public class Handler\n    {\n        public Response Handle(Request request)\n        {\n            var result = new int[request.Amount];\n            for (var i = 0; i < request.Amount; i++)\n            {\n                result[i] = Random.Shared.Next(request.Min, request.Max);\n            }\n            return new Response(result);\n        }\n    }\n    public static Response Endpoint([AsParameters] Request query, Handler handler)\n        => handler.Handle(query);\n}\n```", "```cs\nbuilder.Services.AddSingleton<RandomNumber.Handler>();\n// ...\napp.MapGet(\n    \"/random-number/{Amount}/{Min}/{Max}\", \n    RandomNumber.Endpoint\n);\n```", "```cs\nhttps://localhost:7289/random-number/5/0/100\n```", "```cs\n{\n  \"numbers\": [\n    60,\n    27,\n    78,\n    63,\n    87\n  ]\n}\n```", "```cs\nnamespace SimpleEndpoint;\npublic static class UpperCase\n{\n    public record class Request(string Text);\n    public record class Response(string Text);\n    public class Handler\n    {\n        public Response Handle(Request request)\n        {\n            return new Response(request.Text.ToUpper());\n        }\n    }\n    public static IServiceCollection AddUpperCase(this IServiceCollection services)\n    {\n        return services.AddSingleton<Handler>();\n    }\n    public static IEndpointRouteBuilder MapUpperCase(this IEndpointRouteBuilder endpoints)\n    {\n        endpoints.MapGet(\n            \"/upper-case/{Text}\",\n            ([AsParameters] Request query, Handler handler)\n                => handler.Handle(query)\n        );\n        return endpoints;\n    }\n}\n```", "```cs\nbuilder.Services.AddUpperCase();\n// ...\napp.MapUpperCase();\n```", "```cs\nGET https://localhost:7289/upper-case/I%20love%20ASP.NET%20Core\n```", "```cs\n{\n  \"text\": \"I LOVE ASP.NET CORE\"\n}\n```", "```cs\ndotnet add package FluentValidation.AspNetCore\ndotnet add package ForEvolve.ExceptionMapper\ndotnet add package ForEvolve.FluentValidation.AspNetCore.Http\ndotnet add package Microsoft.EntityFrameworkCore.InMemory\ndotnet add package Riok.Mapperly\n```", "```cs\nusing Web.Features;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.AddFeatures();\nvar app = builder.Build();\napp.MapFeatures();\nawait app.SeedFeaturesAsync();\napp.Run();\n```", "```cs\nusing FluentValidation;\nusing FluentValidation.AspNetCore;\nusing System.Reflection;\nnamespace Web.Features;\npublic static class Features\n{\n    public static IServiceCollection AddFeatures(\n        this WebApplicationBuilder builder){}\n    public static IEndpointRouteBuilder MapFeatures(\n        this IEndpointRouteBuilder endpoints){}\n    public static async Task SeedFeaturesAsync(\n        this WebApplication app){}\n}\n```", "```cs\npublic static IServiceCollection AddFeatures(this WebApplicationBuilder builder)\n{\n    // Register fluent validation\n    builder.AddFluentValidationEndpointFilter();\n    return builder.Services\n        .AddFluentValidationAutoValidation()\n        .AddValidatorsFromAssembly(Assembly.GetExecutingAssembly())\n        // Add features\n        .AddProductsFeature()\n        .AddBasketsFeature()\n    ;\n}\n```", "```cs\npublic static IEndpointRouteBuilder MapFeatures(this IEndpointRouteBuilder endpoints)\n{\n    var group = endpoints\n        .MapGroup(\"/\")\n        .AddFluentValidationFilter();\n    ;\n    group\n        .MapProductsFeature()\n        .MapBasketsFeature()\n    ;\n    return endpoints;\n}\n```", "```cs\npublic static async Task SeedFeaturesAsync(this WebApplication app)\n{\n    using var scope = app.Services.CreateScope();\n    await scope.SeedProductsAsync();\n    await scope.SeedBasketAsync();\n}\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Diagnostics;\nnamespace Web.Features;\npublic static partial class Baskets\n{\n    // Baskets.cs\n    public record class BasketItem(int CustomerId, int ProductId, int Quantity);\n    public class BasketContext : DbContext {}\n    public static IServiceCollection AddBasketsFeature(this IServiceCollection services) {}\n    public static IEndpointRouteBuilder MapBasketsFeature(this IEndpointRouteBuilder endpoints) {}\n    public static Task SeedBasketsAsync(this IServiceScope scope) {}\n    // Baskets.AddItem.cs\n    public partial class AddItem {}\n    public static IServiceCollection AddAddItem(this IServiceCollection services) {}\n    public static IEndpointRouteBuilder MapAddItem(this IEndpointRouteBuilder endpoints) {}\n    // Baskets.FetchItems.cs\n    public partial class FetchItems {}\n    public static IServiceCollection AddFetchItems(this IServiceCollection services) {}\n    public static IEndpointRouteBuilder MapFetchItems(this IEndpointRouteBuilder endpoints) {}\n    // Baskets.RemoveItem.cs\n    public partial class RemoveItem {}\n    public static IServiceCollection AddRemoveItem(this IServiceCollection services) {}\n    public static IEndpointRouteBuilder MapRemoveItem(this IEndpointRouteBuilder endpoints) {}\n    // Baskets.UpdateQuantity.cs\n    public partial class UpdateQuantity {}\n    public static IServiceCollection AddUpdateQuantity(this IServiceCollection services) {}\n    public static IEndpointRouteBuilder MapUpdateQuantity(this IEndpointRouteBuilder endpoints) {}\n}\n```", "```cs\npublic record class BasketItem(\n    int CustomerId, \n    int ProductId, \n    int Quantity\n);\n```", "```cs\npublic class BasketContext : DbContext\n{\n    public BasketContext(DbContextOptions<BasketContext> options)\n        : base(options) { }\n    public DbSet<BasketItem> Items => Set<BasketItem>();\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n        modelBuilder\n            .Entity<BasketItem>()\n            .HasKey(x => new { x.CustomerId, x.ProductId })\n        ;\n    }\n}\n```", "```cs\npublic static IServiceCollection AddBasketsFeature(this IServiceCollection services)\n{\n    return services\n        .AddAddItem()\n        .AddFetchItems()\n        .AddRemoveItem()\n        .AddUpdateQuantity()\n        .AddDbContext<BasketContext>(options => options\n            .UseInMemoryDatabase(\"BasketContextMemoryDB\")\n            .ConfigureWarnings(builder => builder.Ignore(InMemoryEventId.TransactionIgnoredWarning))\n        )\n    ;\n}\n```", "```cs\npublic static IEndpointRouteBuilder MapBasketsFeature(this IEndpointRouteBuilder endpoints)\n{\n    var group = endpoints\n        .MapGroup(nameof(Baskets).ToLower())\n        .WithTags(nameof(Baskets))\n    ;\n    group\n        .MapFetchItems()\n        .MapAddItem()\n        .MapUpdateQuantity()\n        .MapRemoveItem()\n    ;\n    return endpoints;\n}\n```", "```cs\npublic static Task SeedBasketsAsync(this IServiceScope scope)\n{\n    return Task.CompletedTask;\n}\n```", "```cs\nusing FluentValidation;\nusing Microsoft.EntityFrameworkCore;\nusing Riok.Mapperly.Abstractions;\nnamespace Web.Features;\npublic partial class Baskets\n{\n    public partial class AddItem\n    {\n        public record class Command(\n            int CustomerId,\n            int ProductId,\n            int Quantity\n        );\n        public record class Response(\n            int ProductId,\n            int Quantity\n        );\n        [Mapper]\n        public partial class Mapper {}\n        public class Validator : AbstractValidator<Command> {}\n        public class Handler {}\n    }\n    public static IServiceCollection AddAddItem(this IServiceCollection services) {}\n    public static IEndpointRouteBuilder MapAddItem(this IEndpointRouteBuilder endpoints) {}\n}\n```", "```cs\npublic static IServiceCollection AddAddItem(this IServiceCollection services)\n{\n    return services\n        .AddScoped<AddItem.Handler>()\n        .AddSingleton<AddItem.Mapper>()\n    ;\n}\n```", "```cs\npublic static IEndpointRouteBuilder MapAddItem(\n    this IEndpointRouteBuilder endpoints)\n{\n    endpoints.MapPost(\n        \"/\",\n        async (AddItem.Command command, AddItem.Handler handler, CancellationToken cancellationToken) =>\n        {\n            var result = await handler.HandleAsync(\n                command, \n                cancellationToken\n            );\n            return TypedResults.Created(\n                $\"/products/{result.ProductId}\", \n                result\n            );\n        }\n    );\n    return endpoints;\n}\n```", "```cs\npublic class Handler\n{\n    private readonly BasketContext _db;\n    private readonly Mapper _mapper;\n    public Handler(BasketContext db, Mapper mapper)\n    {\n        _db = db ?? throw new ArgumentNullException(nameof(db));\n        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));\n    }\n    public async Task<Response> HandleAsync(Command command, CancellationToken cancellationToken)\n    {\n        var itemExists = await _db.Items.AnyAsync(\n            x => x.CustomerId == command.CustomerId && x.ProductId == command.ProductId,\n            cancellationToken: cancellationToken\n        );\n        if (itemExists)\n        {\n            throw new DuplicateBasketItemException(command.ProductId);\n        }\n        var item = _mapper.Map(command);\n        _db.Add(item);\n        await _db.SaveChangesAsync(cancellationToken);\n        var result = _mapper.Map(item);\n        return result;\n    }\n}\n```", "```cs\n[Mapper]\npublic partial class Mapper\n{\n    public partial BasketItem Map(Command item);\n    public partial Response Map(BasketItem item);\n}\n```", "```cs\npublic class Validator : AbstractValidator<Command>\n{\n    public Validator()\n    {\n        RuleFor(x => x.CustomerId).GreaterThan(0);\n        RuleFor(x => x.ProductId).GreaterThan(0);\n        RuleFor(x => x.Quantity).GreaterThan(0);\n    }\n}\n```", "```cs\nPOST https://localhost:7252/baskets\nContent-Type: application/json\n{\n    \"customerId\": 1, \n    \"productId\": 3, \n    \"quantity\": 10\n}\n```", "```cs\n{\n  \"productId\": 3,\n  \"quantity\": 10\n}\n```", "```cs\nLocation: /products/3\n```", "```cs\npublic record class Query(int CustomerId);\n```", "```cs\npublic record class Response(IEnumerable<Item> Items) : IEnumerable<Item>\n{\n    public IEnumerator<Item> GetEnumerator()\n        => Items.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator()\n        => ((IEnumerable)Items).GetEnumerator();\n}\npublic record class Item(int ProductId, int Quantity);\n```", "```cs\n[Mapper]\npublic partial class Mapper\n{\n    public partial Response Map(IQueryable<BasketItem> items);\n}\npublic class Validator : AbstractValidator<Query>\n{\n    public Validator()\n    {\n        RuleFor(x => x.CustomerId).GreaterThan(0);\n    }\n}\n```", "```cs\npublic static IServiceCollection AddFetchItems(this IServiceCollection services)\n{\n    return services\n        .AddScoped<FetchItems.Handler>()\n        .AddSingleton<FetchItems.Mapper>()\n    ;\n}\n```", "```cs\npublic static IEndpointRouteBuilder MapFetchItems(this IEndpointRouteBuilder endpoints)\n{\n    endpoints.MapGet(\n        \"/{CustomerId}\",\n        ([AsParameters] FetchItems.Query query, FetchItems.Handler handler, CancellationToken cancellationToken)\n            => handler.HandleAsync(query, cancellationToken)\n    );\n    return endpoints;\n}\n```", "```cs\npublic class Handler\n{\n    private readonly BasketContext _db;\n    private readonly Mapper _mapper;\n    public Handler(BasketContext db, Mapper mapper)\n    {\n        _db = db ?? throw new ArgumentNullException(nameof(db));\n        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));\n    }\n    public async Task<Response> HandleAsync(Query query, CancellationToken cancellationToken)\n    {\n        var items = _db.Items.Where(x => x.CustomerId == query.CustomerId);\n        await items.LoadAsync(cancellationToken);\n        var result = _mapper.Map(items);\n        return result;\n    }\n}\n```", "```cs\nGET https://localhost:7252/baskets/1\n```", "```cs\n[\n  {\n    \"productId\": 3,\n    \"quantity\": 10\n  }\n]\n```", "```cs\nWeb.Features.DuplicateBasketItemException: The product '3' is already in your shopping cart.\n   at Web.Features.Baskets.AddItem.Handler.HandleAsync(Command command, CancellationToken cancellationToken) in C18\\REPR\\Web\\Features\\Baskets\\Baskets.AddItem.cs:line 57\n   at Web.Features.Baskets.<>c.<<MapAddItem>b__2_0>d.MoveNext() in C18\\REPR\\Web\\Features\\Baskets\\Baskets.AddItem.cs:line 82\n--- End of stack trace from previous location ---\n```", "```cs\nusing Microsoft.AspNetCore.Diagnostics;\nnamespace Web;\npublic class MyExceptionMiddleware : IMiddleware\n{\n    public async Task InvokeAsync(HttpContext context, RequestDelegate next)\n    {\n        var exceptionHandlerPathFeature = context.Features\n            .Get<IExceptionHandlerFeature>() ?? throw new NotSupportedException();\n        var exception = exceptionHandlerPathFeature.Error;\n        await context.Response.WriteAsJsonAsync(new\n        {\n            Error = exception.Message\n        });\n        await next(context);\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<MyExceptionMiddleware>();\n```", "```cs\napp.UseExceptionHandler(errorApp =>\n{\n    errorApp.UseMiddleware<MyExceptionMiddleware>();\n});\n```", "```cs\napp.UseExceptionHandler(errorApp =>\n{\n    errorApp.Use(async (context, next) =>\n    {\n        var exceptionHandlerPathFeature = context.Features\n            .Get<IExceptionHandlerFeature>() ?? throw new NotSupportedException();\n        var logger = context.RequestServices\n            .GetRequiredService<ILoggerFactory>()\n            .CreateLogger(\"ExceptionHandler\");\n        var exception = exceptionHandlerPathFeature.Error;\n        logger.LogWarning(\n            \"An exception occurred: {message}\",\n            exception.Message\n        );\n        await next(context);\n    });\n    errorApp.UseMiddleware<MyExceptionMiddleware>();\n});\n```", "```cs\n{\n  \"error\": \"The product \\u00273\\u0027 is already in your shopping cart.\"\n}\n```", "```cs\n// Add the dependencies to the container\nbuilder.AddExceptionMapper();\n// Register the middleware\napp.UseExceptionMapper();\n```", "```cs\n{\n  \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.10\",\n  \"title\": \"The product \\u00273\\u0027 is already in your shopping cart.\",\n  \"status\": 409,\n  \"traceId\": \"00-74bdbaa08064fd97ba1de31802ec6f8f-31ffd9ea8215b706-00\",\n  \"debug\": {\n    \"type\": {\n      \"name\": \"DuplicateBasketItemException\",\n      \"fullName\": \"Web.Features.DuplicateBasketItemException\"\n    },\n    \"stackTrace\": \"...\"\n  }\n}\n```", "```cs\nusing ForEvolve.ExceptionMapper;\nnamespace Web.Features;\npublic class DuplicateBasketItemException : ConflictException\n{\n    public DuplicateBasketItemException(int productId)\n        : base($\"The product '{productId}' is already in your shopping cart.\")\n    {\n    }\n}\n```", "```cs\nbuilder.AddExceptionMapper(builder =>\n{\n    builder\n        .Map<DbUpdateException>()\n        .ToStatusCode(StatusCodes.Status409Conflict)\n    ;\n    builder\n        .Map<DbUpdateConcurrencyException>()\n        .ToStatusCode(StatusCodes.Status409Conflict)\n    ;\n});\n```", "```cs\n{\n  \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.10\",\n  \"title\": \"Exception of type \\u0027Microsoft.EntityFrameworkCore.DbUpdateException\\u0027 was thrown.\",\n  \"status\": 409,\n  \"traceId\": \"00-74bdbaa08064fd97ba1de31802ec6f8f-a5ac17f17da8d2db-00\",\n  \"debug\": {\n    \"type\": {\n      \"name\": \"DbUpdateException\",\n      \"fullName\": \"Microsoft.EntityFrameworkCore.DbUpdateException\"\n    },\n    \"stackTrace\": \"...\"\n  },\n  \"entries\": []\n}\n```", "```cs\n[Fact]\npublic async Task Should_add_the_new_item_to_the_basket()\n{\n    // Arrange\n    await using var application = new C18WebApplication();\n    var client = application.CreateClient();\n    // Act\n    var response = await client.PostAsJsonAsync(\n        \"/baskets\",\n        new AddItem.Command(4, 1, 22)\n    );\n    // Assert the response\n    Assert.NotNull(response);\n    Assert.True(response.IsSuccessStatusCode);\n    var result = await response.Content\n        .ReadFromJsonAsync<AddItem.Response>();\n    Assert.NotNull(result);\n    Assert.Equal(1, result.ProductId);\n    Assert.Equal(22, result.Quantity);\n    // Assert the database state\n    using var seedScope = application.Services.CreateScope();\n    var db = seedScope.ServiceProvider\n        .GetRequiredService<BasketContext>();\n    var dbItem = db.Items.FirstOrDefault(x => x.CustomerId == 4 && x.ProductId == 1);\n    Assert.NotNull(dbItem);\n    Assert.Equal(22, dbItem.Quantity);\n}\n```", "```cs\n[Fact]\npublic async Task Should_return_a_valid_product_url()\n{\n    // Arrange\n    await using var application = new C18WebApplication();\n    await application.SeedAsync<Products.ProductContext>(async db =>\n    {\n        db.Products.RemoveRange(db.Products);\n        db.Products.Add(new(\"A test product\", 15.22m, 1));\n        await db.SaveChangesAsync();\n    });\n    var client = application.CreateClient();\n    // Act\n    var response = await client.PostAsJsonAsync(\n        \"/baskets\",\n        new AddItem.Command(4, 1, 22)\n    );\n    // Assert\n    Assert.NotNull(response);\n    Assert.Equal(HttpStatusCode.Created, response.StatusCode);\n    Assert.NotNull(response.Headers.Location);\n    var productResponse = await client\n        .GetAsync(response.Headers.Location);\n    Assert.NotNull(productResponse);\n    Assert.True(productResponse.IsSuccessStatusCode);\n}\n```", "```cs\n[Fact]\npublic async Task Should_return_a_ProblemDetails_with_a_Conflict_status_code()\n{\n    // Arrange\n    await using var application = new C18WebApplication();\n    await application.SeedAsync<BasketContext>(async db =>\n    {\n        db.Items.RemoveRange(db.Items);\n        db.Items.Add(new(\n            CustomerId: 1,\n            ProductId: 1,\n            Quantity: 10\n        ));\n        await db.SaveChangesAsync();\n    });\n    var client = application.CreateClient();\n    // Act\n    var response = await client.PostAsJsonAsync(\n        \"/baskets\",\n        new AddItem.Command(\n            CustomerId: 1,\n            ProductId: 1,\n            Quantity: 20\n        )\n    );\n    // Assert the response\n    Assert.NotNull(response);\n    Assert.False(response.IsSuccessStatusCode);\n    Assert.Equal(HttpStatusCode.Conflict, response.StatusCode);\n    var problem = await response.Content\n        .ReadFromJsonAsync<ProblemDetails>();\n    Assert.NotNull(problem);\n    Assert.Equal(\"The product \\u00271\\u0027 is already in your shopping cart.\", problem.Title);\n    // Assert the database state\n    using var seedScope = application.Services.CreateScope();\n    var db = seedScope.ServiceProvider\n        .GetRequiredService<BasketContext>();\n    var dbItem = db.Items.FirstOrDefault(x => x.CustomerId == 1 && x.ProductId == 1);\n    Assert.NotNull(dbItem);\n    Assert.Equal(10, dbItem.Quantity);\n}\n```", "```cs\nif (item.Quantity != command.Quantity)\n{\n    _db.Items.Update(itemToUpdate);\n    await _db.SaveChangesAsync(cancellationToken);\n}\n```", "```cs\n[Fact]\npublic async Task Should_not_touch_the_database_when_the_quantity_is_the_same()\n{\n    // Arrange\n    await using var application = new C18WebApplication();\n    await application.SeedAsync<BasketContext>(async db =>\n    {\n        db.Items.RemoveRange(db.Items.ToArray());\n        db.Items.Add(new BasketItem(2, 1, 5));\n        await db.SaveChangesAsync();\n    });\n    using var seedScope = application.Services.CreateScope();\n    var db = seedScope.ServiceProvider\n        .GetRequiredService<BasketContext>();\n    var mapper = seedScope.ServiceProvider\n        .GetRequiredService<UpdateQuantity.Mapper>();\n    db.SavedChanges += Db_SavedChanges;\n    var saved = false;\n    var sut = new UpdateQuantity.Handler(db, mapper);\n    // Act\n    var response = await sut.HandleAsync(\n        new UpdateQuantity.Command(2, 1, 5),\n        CancellationToken.None\n    );\n    // Assert\n    Assert.NotNull(response);\n    Assert.False(saved);\n    void Db_SavedChanges(object? sender, SavedChangesEventArgs e)\n    {\n        saved = true;\n    }\n}\n```"]