- en: Chapter 3. Financial Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you run a company, a non-profit organization, or an educational institute,
    doing proper bookkeeping is mandatory and required by the government.
  prefs: []
  type: TYPE_NORMAL
- en: This makes the financial management the most used part of Microsoft Dynamics
    NAV and the least obvious place to make changes, as federal regulations do not
    allow much creativity in this part of the application.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of this chapter is all about the look, learn, and love principle
    that we discussed in the previous chapter. We cannot integrate our application
    with financial management without knowing the basic functionality and structure
    of the tool.
  prefs: []
  type: TYPE_NORMAL
- en: In the second part of the chapter, we will look at some examples of how to change
    or expand the way financial management works.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will look at how to create a posting in the general ledger from a
    newly designed posting routine.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you should be able to set up financial management
    in a new database and create basic postings to the general ledger and understand
    how to integrate financial management with your application.
  prefs: []
  type: TYPE_NORMAL
- en: Chart of accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **chart of accounts** (**COA**) is a list of the accounts used by an organization
    to define each class of items for which money or the equivalent is spent or received.
    It is used to organize the finances of the entity and to segregate expenditures,
    revenue, assets, and liabilities in order to give interested parties a better
    understanding of the financial health of the entity.
  prefs: []
  type: TYPE_NORMAL
- en: Every financial system starts with a COA and although the numbering might differ
    from country to country, we all have income statements and balance accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart of accounts](img/0365EN_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Microsoft Dynamics NAV also has some other special accounts: **Heading**, **Begin-Total**,
    and **End-Total** accounts.'
  prefs: []
  type: TYPE_NORMAL
- en: With these accounts, you can make the COA more readable. The accounts within
    the total accounts are automatically indented.
  prefs: []
  type: TYPE_NORMAL
- en: Posting accounts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a new posting account, there are several options to choose. Most
    of them are not mandatory but they make it easier to push the end users to using
    the correct account while generating entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the options by opening a **G/L Account Card**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting accounts](img/0365EN_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first and most important decision to make is the type of account to be created.
    It can be either **Income Statement** or **Balance Sheet**. Income statement accounts
    are reset to zero every new fiscal year, while balance sheet accounts continue
    indefinitely. The total of the balance sheet accounts should always match the
    total of the income statement accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting accounts](img/0365EN_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create two total accounts to check whether the balance in your G/L is
    accurate. Take a total of all income statements and all balance sheets.
  prefs: []
  type: TYPE_NORMAL
- en: You can also force an account to only accept debit or credit postings. The **No.
    Of Blank Lines** and **New Page** fields are used when printing reports and have
    no effect on the system. **Reconciliation Account** is hardly used anymore unless,
    you do not use sub accounting.
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatic Ext. Texts** creates the extra texts discussed in [Chapter 1](ch01.html
    "Chapter 1. Introduction to Microsoft Dynamics NAV"), *Introduction to Microsoft
    Dynamics NAV*, automatically when you use this account in a sales or purchasing
    document.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Direct Posting** is a very important option. It is highly recommended to
    disable this option when an account is used in one of the posting setups. When
    **Direct Posting** is enabled, an end user can create entries in this account,
    disrupting the balance between the general ledger and the sub administration.
    We''ll discuss this in more detail later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: When you do allow **Direct Posting**, the fields on the **Posting** tab are
    very important.
  prefs: []
  type: TYPE_NORMAL
- en: '**Gen. Posting Type** determines whether the account is used for purchase and/or
    sales for the VAT calculation and filtering in the VAT statements. A more detailed
    VAT specification is determined by the VAT business and product posting group.
    The general business and product posting groups can be used to automatically populate
    these fields, when this account is used.'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Consolidation** tab, you can populate the consolidation accounts used
    when consolidating two or more companies. We'll discuss consolidation later in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV allows an additional reporting currency to be used. This
    is an inheritance from the days before the Euro in Europe and was very popular
    in the years of Euro introduction. Today, it is used by international companies,
    for example, a company based in the USA with a Dutch Parent company. In the **Reporting**
    tab, you can determine how you want to handle exchange rate adjustments when using
    this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: VAT versus sales tax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV allows the calculation of both European VAT and North
    American Sales Tax. The examples in this book are based on European VAT.
  prefs: []
  type: TYPE_NORMAL
- en: For sales tax, the **Tax Area Code** and **Tax Group Code** fields are used
    instead of the VAT Business Posting Group and the VAT Product Posting Group.
  prefs: []
  type: TYPE_NORMAL
- en: The entry tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in [Chapter 1](ch01.html "Chapter 1. Introduction to Microsoft
    Dynamics NAV"), *Introduction to Microsoft Dynamics NAV*, the entries for the
    general ledger are created in the general journals when you post a sales or purchase
    document. So, let's have a closer look at this functionality and see what we can
    do with it.
  prefs: []
  type: TYPE_NORMAL
- en: Sub accounting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In theory, you could run Microsoft Dynamics NAV with just the G/L Entry table,
    but in accounting, we have invented sub administrations.
  prefs: []
  type: TYPE_NORMAL
- en: Sub administrations are very old. Before computers were invented, people would
    have cards for all customers and vendors to keep track of their balance. Updating
    these cards was a manual and time-consuming process with a high probability of
    making mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Microsoft Dynamics NAV, this is taken care of automatically. In the general
    ledger, we have four sub administrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bank**: For every transaction on a bank account, a bank ledger entry is created.
    The total of all bank ledger entries should match your bank account''s balance.
    It allows you to quickly find payments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer**: Whenever you sell something to a customer or a customer pays
    a customer ledger, an entry is created. It allows you to analyze payment history
    and send out reminders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vendor**: When you buy something using a vendor, the system creates a vendor
    ledger entry. We can use the vendor ledger entries to determine which invoice
    needs to be paid. The vendor ledger entries are the opposite of the customer ledger
    entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VAT/TAX**: These entries help us to easily create clear VAT/TAX statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As discussed earlier, it is very important that the total of the sub administration
    matches the general ledger. For example, when your bank account balance is **2.846,54**,
    the G/L Account should also have that amount.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sub accounting](img/0365EN_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For this, you can disable the **Direct Posting** option we discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Working with general journals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we open a general journal, we can start making transactions. Let's discuss
    the possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with general journals](img/0365EN_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The most important fields of a general journal are the **Posting Date** and
    the **Document No**. The total of amounts for each combination of these fields
    should always be in balance. In other words, all journal lines for any particular
    combination of **Posting Date** and **Document No.** should always add up to zero.
  prefs: []
  type: TYPE_NORMAL
- en: There are different account types we can post to. When we post directly to a
    **G/L Account**, it is clear what will happen; a new **G/L Entry** will be created
    for that amount. When we choose another **Account Type**, the sub administrations
    will start to work. For example, when we choose **Customer**, a **Customer Ledger
    Entry** will be created as well as a **G/L Entry**. Which **G/L account** is used
    is determined by the posting group, which we will discuss later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we also see the **Gen. Posting Type**, **General Business** and **Product
    Posting** groups and **VAT Business** and **Product Posting** groups come back.
    These are inherited from the **G/L Account** we discussed earlier, but you can
    choose a different one if you want.
  prefs: []
  type: TYPE_NORMAL
- en: The VAT options determine the VAT calculation that is done automatically. A
    VAT entry is created with the VAT amount and additional **G/L Entries** are created.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways of balancing a general ledger. We can create two lines with
    the same debit and credit amount or we can use the balance fields.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see some of this in an example. We have made a purchase somewhere at an
    irregular vendor. All we have is a small cash receipt with the amount and the
    VAT, which we want to bring into our company.
  prefs: []
  type: TYPE_NORMAL
- en: 'The amount is 440 including 10 percent VAT, so we want to create the following
    transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Cost | VAT | Current account |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 400,00 | 40,00 | 440,00 |'
  prefs: []
  type: TYPE_TB
- en: 'The transaction can also be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with general journals](img/0365EN_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that Microsoft Dynamics NAV calculates the **VAT Amount** and by
    populating the balance account, we only need one line, which is always in balance.
  prefs: []
  type: TYPE_NORMAL
- en: When we **Navigate** this transaction, we see that we have three **G/L Entries**
    and one **VAT Entry**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with general journals](img/0365EN_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Opening the **G/L Entries** shows the correct amounts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with general journals](img/0365EN_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In another example, we'll create a customer payment via the bank journal.
  prefs: []
  type: TYPE_NORMAL
- en: Entry application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A bank journal is a general journal with a specific page ID. This allows the
    application to have a different user interface based on the same business logic.
    A specific feature of a bank journal is the possibility to easily apply payments
    to invoices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Entry application](img/0365EN_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bank journal does not directly post to a G/L Account but uses other account
    types. In this case, the **Account Type** is **Customer** and the **Balance Account
    Type** is **Bank Account**. Instead of a list with G/L Accounts, the **Account
    No.** field now refers to the **Customers** and the **Balance Account No.** fields
    refer to the **Bank Account**. The latter is automatically populated from the
    Journal Batch definition.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use the **Apply Entries** feature to determine which invoice this payment
    applies to. If we did not do this, the system would not know which invoice is
    paid.
  prefs: []
  type: TYPE_NORMAL
- en: Another option would be to automatically apply entries, but when a customer
    decides to skip a payment, the system might get confused, so it is highly recommended
    to apply entries manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we post this journal and navigate the entries, we see that all necessary
    sub administrations are updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Entry application](img/0365EN_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Posting groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we talked about using customer numbers and bank account
    numbers as an account number in the general journal. The system can then figure
    out what G/L Account numbers to use. But how does that work?
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done using the various posting group matrices. Most application parts
    that post to the general ledger have their own posting group table. There are
    two types of posting groups: single layer and matrix layer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The single layer has direct G/L Account columns and the matrix layer has an
    additional setup table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Single layer | Matrix layer |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Customer posting groupVendor posting groupInventory posting groupJob posting
    groupBank account posting groupFA posting group | Gen. business posting groupGen.
    product posting groupVAT business posting groupVAT product posting groupInventory
    posting setup |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each country uses different account schedules and regulations. The G/L Accounts
    in this book are used for the CRONUS example database. These can be different
    in each country and implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at **Customer Posting Groups**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting groups](img/0365EN_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We see three different codes with their own accounts. So where is this code
    used? Let''s open **Customer Card**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting groups](img/0365EN_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the **Invoicing** tab, we see the customer posting group. So this is what
    determines the customer G/L Accounts.
  prefs: []
  type: TYPE_NORMAL
- en: We also see other posting groups on **Customer Card**. There is a **Gen. Bus.
    Posting Group** and a **VAT Bus. Posting Group**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our list, they are matrix layers. So they don''t directly point to a G/L
    Account. When we open **Gen. Bus. Posting Group**, we see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting groups](img/0365EN_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just a simple table connecting it to a **Default VAT Business Posting Group**.
    To see where the G/L Accounts are defined, we need to go to the **General Posting
    Setup**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting groups](img/0365EN_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we can see that, when combined with a **Gen. Prod. Posting Group**, the
    G/L Accounts can be determined. So where does the **Gen. Prod. Posting Group**
    come from? To find out, we need to go to **Item Card**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting groups](img/0365EN_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see the same tab, **Invoicing**, with the product posting groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our journey ends here, as we can see the last matrix posting group, **Inventory**.
    When we open this setup, we see that it is determined by the combination of **Inventory
    Posting Group** and **Location Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting groups](img/0365EN_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dimensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the general ledger and sub administrations, Microsoft Dynamics NAV
    allows a third level of posting. An unlimited number of dimensions can be attached
    to every posting and used to cross-analyze the system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using more dimensions results in increased database activity during the processing
    of transactions and a more complex setup of the system. This should be carefully
    considered during the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions originated from the old project code and department code functionality,
    allowing you to consolidate or differentiate costs and profits. The dimensions
    are determined via a filtering mechanism. Every master data record can have dimension
    definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the sample dimension codes and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dimensions](img/0365EN_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Dimension Code Area** has several **Dimension Values**. Here, you can
    also have total records, just as in the general ledger.
  prefs: []
  type: TYPE_NORMAL
- en: When more than one master data record has the same dimension code with different
    values, it is able to set priorities. It is also possible to block combination
    of dimensions to be posted.
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions are a powerful tool for analyzing data and structuring the system
    to avoid incorrect entries. However, it requires a lot of time and special skills
    to determine these combinations and maintain the setup.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see more of dimensions as we discuss the reporting possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Budgeting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV allows budgeting as well. We can create our own budgeting
    codes. A budgeting code can be a year, or a department, or just some budget we
    want to try and throw away later.
  prefs: []
  type: TYPE_NORMAL
- en: Budgeting can be done on G/L Accounts but also on any dimension.
  prefs: []
  type: TYPE_NORMAL
- en: The decision of budgeting periods is very important. If you want to compare
    monthly budgets with real figures, it does not make sense to create a yearly budget.
    Most companies use monthly budgets. It is also most likely that we want to create
    budgets for income statement accounts, not for balance sheets.
  prefs: []
  type: TYPE_NORMAL
- en: '![Budgeting](img/0365EN_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Importing and exporting budgets to Excel is a very important feature. Here,
    we can easily copy and paste and, for example, automatically have the same values
    each month.
  prefs: []
  type: TYPE_NORMAL
- en: Creating budget entries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Budget entries are created by simply entering new amounts in the columns. In
    previous versions of Microsoft Dynamics NAV, a built-in mechanism would handle
    the creation of the entry based on deltas between the previous value and the newly
    entered value.
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV 2009, this was changed from the Role Tailored Client
    to C/AL Code. The matrix page object that handles the amount is Budget Matrix
    (9203). This page uses the Matrix Management Codeunit (9200) to simulate the classic
    built-in algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Accounting periods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While most companies have accounting periods from January 1 to December 31 divided
    into months, there can be exceptions to this.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is supported by Microsoft Dynamics NAV and set up in **Accounting Periods**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accounting periods](img/0365EN_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are completely free to set up our own desired posting periods as long as
    there is a date algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accounting periods](img/0365EN_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A posting period should also be closed when appropriate. When closing a posting
    period, all Income Statement G/L Accounts are set to zero and the profit/loss
    is posted to a balance account.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accounting periods](img/0365EN_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we run this batch, a general journal is populated with the postings. It
    is not recommended to make changes here.
  prefs: []
  type: TYPE_NORMAL
- en: Closing dates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After closing the income statement, it is still possible to make transactions
    but with special posting dates called closing dates. When putting a **C** character
    in front of the posting date, the system will accept this as a special transaction
    and allow you to post it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Closing dates](img/0365EN_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When filtering on `01-01-2013..31-12-2013`, the system will not include the
    entries on the closing dates. Filtering on `01-01-2013..C31-12-2013` and `01-01-2013..31-01-2014`
    will include the entries on the closing dates.
  prefs: []
  type: TYPE_NORMAL
- en: Currencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides having the possibility of the extra reporting currency, every transaction
    in Microsoft Dynamics NAV can have its own currency. The transaction is transformed
    into **Local Currency** (**LCY**) with the current currency exchange rates.
  prefs: []
  type: TYPE_NORMAL
- en: Handling currency is simple, as long as the exchange rates do not change. After
    that, it can get complex. The exchange rate can change as often as you want but
    with a maximum of one per day. Before you consider implementing a daily change
    of exchange rates, you should look at the consequences.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you change the currency exchange rate, everything in the system gets adjusted,
    which can lead to a huge number of transactions in your system. Changing the currency
    exchange rate requires the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter new values. In our case, the new **USD** rate in 2010 is **60**:![Currencies](img/0365EN_03_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the value and generate the entries.![Currencies](img/0365EN_03_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consolidation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consolidation means taking (part of) the general ledger of two or more companies
    together in one consolidated company. To handle consolidation in Microsoft Dynamics
    NAV, first the consolidation accounts have to be populated in the G/L Accounts.
    These consolidation accounts have to be valid accounts in the consolidation company.
  prefs: []
  type: TYPE_NORMAL
- en: A consolidation company is a "dummy" company in the database that just exists
    for consolidation purposes. The consolidation company has a business unit for
    each consolidated company.
  prefs: []
  type: TYPE_NORMAL
- en: The data can be exported out of the database via an XML or TXT format.
  prefs: []
  type: TYPE_NORMAL
- en: '![Consolidation](img/0365EN_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The data is imported via the **Business Unit** list in the consolidation company.
  prefs: []
  type: TYPE_NORMAL
- en: '![Consolidation](img/0365EN_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The other option is to import it from within the database with the **Import
    Database** function.
  prefs: []
  type: TYPE_NORMAL
- en: VAT statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most companies can issue VAT statements to get back the VAT they paid to vendors
    and pay the VAT they've received from customers. This is done in the VAT statement.
    This is a straightforward list where we can filter on the VAT entries.
  prefs: []
  type: TYPE_NORMAL
- en: '![VAT statement](img/0365EN_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Every country has its own VAT statement and many countries have localizations
    in this application area.
  prefs: []
  type: TYPE_NORMAL
- en: Data analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some companies do bookkeeping because it is mandatory and do very little with
    the generated information, but there is a lot you can do with the information
    the system creates.
  prefs: []
  type: TYPE_NORMAL
- en: In bigger companies, using analysis tools is often the only way to get a clear
    view on the company's assets.
  prefs: []
  type: TYPE_NORMAL
- en: Chart of accounts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The chart of accounts is a reporting tool. The total accounts give a lot of
    information and by applying limit totals (flow filters), we can narrow down this
    information.
  prefs: []
  type: TYPE_NORMAL
- en: '![Chart of accounts](img/0365EN_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This example filters on G/L Account no. larger than or equal to 6000 and limits
    totals to 2014 and Department PROD.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can save these views by clicking on the page name **Chart of Accounts**
    and then **Save View As**. By choosing a name that makes sense like Income Statement
    2010 Production, it is easy to find.
  prefs: []
  type: TYPE_NORMAL
- en: Account schedules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For advanced reporting requirements, we can use the account schedules. Like
    the VAT statement, it allows us to filter on the G/L Entries in this case. We
    can filter on individual G/L Accounts or use the total filter. If the filter gets
    complex, we can sum individual rows and hide the source rows. We can also apply
    up to four dimensions to each account schedule.
  prefs: []
  type: TYPE_NORMAL
- en: '![Account schedules](img/0365EN_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The account schedules also let you define your column layout. You can use multiple
    column layouts per schedule and reuse **Column Layouts** across other schedules.
  prefs: []
  type: TYPE_NORMAL
- en: '![Account schedules](img/0365EN_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The column layout can contain formulas and date filters. We can show either
    the budget or G/L Entries per column.
  prefs: []
  type: TYPE_NORMAL
- en: '![Account schedules](img/0365EN_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For very valuable information on how to use account schedules, refer to [http://dynamicsnavfinancials.com/](http://dynamicsnavfinancials.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Analysis by dimensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As discussed earlier in this chapter, Microsoft Dynamics NAV allows an unlimited
    number of dimensions to be posted in the general ledger. To analyze this information,
    we need to tell the system what to compare. This is done in analysis by dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Each analysis view gets a unique code. An analysis view can be generated for
    an ad hoc requirement and thrown away afterwards or be in the system permanently
    for periodical reporting. Analysis views generate redundant information that can
    always be discarded and regenerated.
  prefs: []
  type: TYPE_NORMAL
- en: '![Analysis by dimensions](img/0365EN_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is recommended to use a copy of the database on a separate system to use
    with analysis views and to update them during the night.
  prefs: []
  type: TYPE_NORMAL
- en: When updated, the analysis view contains all data within the filters in the
    analysis view entries. When not properly maintained, this can be a gigantic table
    with data.
  prefs: []
  type: TYPE_NORMAL
- en: The result of an analysis view can be viewed in a matrix where all values can
    be used as rows, columns, and filters.
  prefs: []
  type: TYPE_NORMAL
- en: '![Analysis by dimensions](img/0365EN_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, we view the results of a sales campaign per area and sales
    person.
  prefs: []
  type: TYPE_NORMAL
- en: The setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Financial management has a single general ledger setup table, which is important
    as many of these setup fields will determine how the core of Microsoft Dynamics
    NAV behaves.
  prefs: []
  type: TYPE_NORMAL
- en: '![The setup](img/0365EN_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will discuss the setup options to find out what they do and to explore the
    possibilities of creating a flexible setup for an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Allow Posting From** and **Allow Posting To**: These limit the freedom of
    people to choose posting dates while posting to the general ledger. It is highly
    recommended to enable this feature to avoid posting dates like 01012090 instead
    of 01012009.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Register Time**: This allows you to create an entry in the time register
    each time a user logs in and out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local Address Format** and **Local Cont. Addr. Format**: This refers to how
    the address should be printed for the local country. In Microsoft Dynamics NAV,
    it is best practice to leave **Country Code** and **Currency Code** blank for
    local values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inv. Rounding Precision (LCY)** and **Inv. Rounding Type (LCY)**: These define
    how the rounding on your invoices is calculated. **Nearest** is a best practice
    and allows your customers to easily register your invoice in their system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow G/L Acc Deletion Before**: This allows you to clean up closed fiscal
    years. It is hardly ever used and you should consult your partner before using
    this feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check G/L Account Usage**: This checks whether the G/L Account is used in
    setup tables before it is deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EMU Currency**: This is the currency that has a fixed conversion rate to
    the Euro in the European Union. The **LCY Code** field is used when printing reports
    to indicate the companies'' local currency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pmt. Disc. Excl. VAT**: This indicates whether or not VAT is calculated when
    you apply payment discounts. When you check this field, you need to think about
    the **Adjust for Payment Disc.** field, as this will recalculate the VAT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unrealized VAT**: This should only be checked if your company has to deal
    with this issue. Otherwise, it will lead to unnecessary postings. This is VAT
    that is only valid when the customer pays the invoice rather than when the invoice
    is issued.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prepayment Unrealized VAT**: This should only be checked if your company
    handles **Unrealized VAT** and if you want to implement this for the prepayment
    features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max. VAT Difference Allowed**: This field determines the maximum amount of
    VAT differences. Most of the time, the VAT difference will be not more than 0,
    01.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can post VAT differences by selecting **FULL VAT** in the **VAT Calculation
    Type** for the VAT business posting group.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**VAT Rounding Type**: This determines how the VAT remainder is calculated.
    It recommended **Nearest**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bill-to/Sell-to VAT Calc.**: This allows you to change what the source for
    the VAT business posting group is, whether it is the Bill-to Customer or Sell-to
    Customer and Pay-to Vendor or Buy-from Vendor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Print VAT specification**: This field allows VAT on your invoices to always
    be in your local currency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bank Account Nos.**: This is almost always number series that is manually
    determined. Most companies have up to 10 bank accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global Dimensions**: This determines which dimensions are posted directly
    to the G/L Entries and sub administrations. These you can most often use when
    limiting totals and should be considered carefully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shortcut Dimensions**: These are easier to access when you enter journals
    and documents. They can easily be switched later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Additional Reporting Currency**: This is a useful feature for international
    companies. Remember that it requires extra effort if the exchange rates change.
    You can change this later but a batch job will start, which might take a long
    time if you have a large database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VAT Exchange Rate Adjustment**: This makes it possible to recalculate VAT
    if the reporting currency exchange rates changes. Think about this thoroughly
    before you activate it. It is most likely to generate information that is difficult
    to analyze and use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appln Rounding Precision**: This can be used to allow rounding differences
    when applying different currencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pmt. Disc. Tolerance Warning**: This field when checked, a warning will appear
    whenever a difference is posted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pmt. Disc. Tolerance Posting**: This determines if the payment tolerance
    amount is posted to a special account or to the normal discount account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payment Discount Grace Period**: This can be used whether you want to be
    tolerant when people are one or two days late with their payment and still deduct
    the discount amount.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payment Tolerance Warning**: This option will show a warning whenever there
    is a tolerance amount posted to the general ledger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payment Tolerance Posting**: This determines if a special G/L Account is
    used to post this amount.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payment Tolerance %**: This determines the tolerance percentage. To change
    this, a batch function is used that updates open entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max. Payment Tolerance Amount**: This field sets a maximum value to the amount
    so an invoice that is issued for 100.000 cannot have a tolerance amount of more
    than 5.000 if the percentage is set to 5 percent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing financial management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As financial management is regulated by the government and the standard functionality
    is already very complete, this application area is unlikely to have many changes,
    even though we have some examples of where the functionality is changed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The examples in this chapter are included in the objects we used in [Chapter
    2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Sales line description to G/L Entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we post a sales invoice, the system will generate the G/L Entries based
    on the sales lines. To avoid creating too many entries, they are compacted. This
    is done using a buffer table, the Invoice Post. Buffer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales line description to G/L Entries](img/0365EN_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Only for the combination of the preceding listed fields, a G/L Entry record
    is created. As we can see, the description is not one of these. This results in
    G/L Entries with the posting description of the sales header, which is often confusing
    for accountants when looking at the G/L Entries.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we will generate a sales invoice with one G/L Account line selling
    one of these books.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales line description to G/L Entries](img/0365EN_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we post this invoice, we will get these G/L Entries. Note that the description
    has gone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales line description to G/L Entries](img/0365EN_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To change this behavior, we have to change the **Invoice Post. Buffer** table.
    The description field needs to be part of the unique combination since the grouping
    is done using a `FIND` command in the `UpdInvPostingBuffer` function in `Sales-Post
    Codeunit (80)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This requires the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to add the description field to the table.![Sales line description to
    G/L Entries](img/0365EN_03_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to add this new field to the key.![Sales line description to G/L Entries](img/0365EN_03_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A key in Microsoft Dynamics NAV can only contain 252 bytes, so be careful not
    to add too many fields to this table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When this is done, a change is required in populating the buffer table. This
    is done in the `PrepareSales` function in the table `Invoice Post. Buffer (49)`
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The last change we are going to make is in the posting routine of the sales
    documents. This is the Sales-Post codeunit (80) we discussed in [Chapter 2](ch02.html
    "Chapter 2. A Sample Application"), *A Sample Application*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the posting description of the sales header, we will now use the
    new field in the buffer table. When we post the same invoice again, this is the
    changed result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales line description to G/L Entries](img/0365EN_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This makes it a lot easier to read the general ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Making this change might cause our system to create more G/L Entries if we have
    large invoices with different descriptions. Creating extra G/L Entries takes more
    time during a posting routine, resulting in longer running posting transactions
    and a larger database.
  prefs: []
  type: TYPE_NORMAL
- en: Extra fields in the G/L Entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the G/L Entry table has a lot of information, some companies want to
    add extra fields to it and populate these in the posting process.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will use the database with the squash court application
    from [Chapter 2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*.
    For this business, it might be very useful to have the **Squash Court No.** as
    a field in the G/L Entries to analyze.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to add the field to the G/L Entry table and make sure we have
    a table relation with the source table.
  prefs: []
  type: TYPE_NORMAL
- en: '![Extra fields in the G/L Entries](img/0365EN_03_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have learned that the G/L Entries are generated from the general journal
    so we need to add this field there as well. This can be done with copy and paste.
  prefs: []
  type: TYPE_NORMAL
- en: '![Extra fields in the G/L Entries](img/0365EN_03_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The last step is to make sure we move the information from the journal to the
    ledger entry table. Like in our sample squash application, this is done in the
    `Gen. Jnl.-Post Line Codeunit (12)` only this codeunit has much more code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to find the place where the G/L Entries are created and add our field
    there. This is done in the `InitGLEntry` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is all that is required in Microsoft Dynamics NAV to add a field to the
    financial posting process. Of course, it does not make sense to do this unless
    we use it, so a logical next step could be to add this new field to the Invoice
    Post. Buffer table from our previous example.
  prefs: []
  type: TYPE_NORMAL
- en: This shows how easy it is to combine solutions in Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with financial management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although it is not likely to make big changes in financial management, it might
    be necessary to create G/L Entries in a new posting routine.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we already pointed out briefly that during posting
    transactions in Microsoft Dynamics NAV, the actual journal line records are never
    really inserted in the database. They are used as temporary containers to hold
    the data during posting. Doing an actual `INSERT` would require defining a journal
    template name, journal batch name, and line no. and could cause locking in the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new codeunit that will create a G/L transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a G/L transaction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After creating the codeunit, we need to set up the two variables that are the
    minimum requirement to post something to the general ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a G/L transaction](img/0365EN_03_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows two variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GenJnlLine**: This is a reference to the `General Journal Line table (81)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GenJnlPostLine**: The `Gen. Jnl.-Post Line Codeunit (12)` creates the G/L
    Entries, the register, and the other financial entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C/AL code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a new G/L Entry requires some of mandatory fields. All the other fields
    in the general journal line are either optional for basic entries or mandatory
    in combination with more advanced postings, as we will find out later.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by writing this code to the `OnRun` trigger, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we execute this C/AL code, we will receive the following error message,
    which indicates that our transaction will result in an unbalanced chart of accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The C/AL code](img/0365EN_03_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can fix this by creating a balance transaction for `-100` in the same `OnRun`
    trigger, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the codeunit, we can navigate on our document no. to see the
    G/L Entries we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The C/AL code](img/0365EN_03_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This was a very simple example of how to integrate with financial management;
    let's create a more advanced example.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced entries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will create a new customer ledger entry with dimensions. To do this, we
    should change one of the C/AL parts we created to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'But when we execute this C/AL code, we receive the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced entries](img/0365EN_03_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This means we need to implement dimensions. Let''s add the following C/AL code
    to the routine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will use dimension set entry `3`, which contains the dimensions that are
    required for this transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This article on MSDN at [http://msdn.microsoft.com/en-us/library/jj552498(v=nav.71).aspx](http://msdn.microsoft.com/en-us/library/jj552498(v=nav.71).aspx)
    explains how dimension sets are used in the Microsoft Dynamics NAV 2013 architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we navigate on **PACKT**, we see that the system has created a **Customer
    Ledger** entry and a **Detailed Cust. Ledg. Entry**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced entries](img/0365EN_03_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Look, learn, and love
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Microsoft Dynamics NAV, there are many examples of how to integrate with
    financial management. The following is a list of interesting codeunits that create
    general journal lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sales-Post (80)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Purch.-Post (90)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Job Calculate WIP (1000)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CheckManagement (367)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Sales-Post Prepayments (442)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Inventory Posting To G/L (5802)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Serv-Posting Journals Mgt. (5987)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go ahead and have a look inside these codeunits to learn how Microsoft does
    the integration.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the financial heart of Microsoft Dynamics NAV.
    Understanding the flow of the entries is important as it is the way the posting
    groups are set up. It is important to regularly check whether the sub administrations
    are balanced with the general ledger.
  prefs: []
  type: TYPE_NORMAL
- en: The reporting possibilities offer great insight if the system is set up correctly.
    Be careful with changing the setup options on a running system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the opposite of this module; relationship
    management. While the financial management system is strict, relationship management
    system is flexible and expandable.
  prefs: []
  type: TYPE_NORMAL
