["```cs\n[  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n  },\n  {\n    \"userId\": 1,\n    \"id\": 2,\n    \"title\": \"qui est esse\",\n    \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\n  },\n...\n]\n```", "```cs\n{  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\n```", "```cs\n400 Bad Request{ \"error_code\": 1, \"message\": \"The post is locked and cannot be updated.\"}\n```", "```cs\nopenapi: 3.0.0servers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/yanxiaodi/MyBlog/1.0.0\ninfo:\n  description: This is a simple API\n  version: '1.0.0'\n  title: Sample Blog System API\n  contact:\n    email: you@your-company.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: admins\n    description: Secured Admin-only calls\n  - name: developers\n    description: Operations available to regular developers\npaths:\n  /posts:\n    get:\n      tags:\n        - developers\n      summary: searches posts\n      operationId: searchPost\n      description: |\n        By passing in the appropriate options, you can search for\n        available blogs in the system\n      parameters:\n        - in: query\n          name: searchString\n          description: pass an optional search string for looking up post\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: skip\n          description: number of records to skip for pagination\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n        - in: query\n          name: limit\n          description: maximum number of records to return\n          schema:\n            type: integer\n            format: int32\n            minimum: 0\n            maximum: 50\n      responses:\n        '200':\n          description: search results matching criteria\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Post'\n        '400':\n          description: bad input parameter\n```", "```cs\nPOST https://rpc.example.com/calculator-service HTTP/1.1Content-Type: application/json\nContent-Length: ...Accept: application/json\n{\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": 1}\n```", "```cs\n{ \"jsonrpc\": \"2.0\", \"result\": 19, \"id\": 3 }\n```", "```cs\nsyntax = \"proto3\";option csharp_namespace = \"GrpcGreeter\";\npackage greet;\nservice Greeter {\n  // Sends a greeting message.\n  rpc SayHello (HelloRequest) returns (HelloReply);\n}\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n// The response message containing the greeting.\nmessage HelloReply {\n  string message = 1;\n}\n```", "```cs\noption csharp_namespace = \"GrpcMyBlogs\";syntax = \"proto3\";\npackage myBlogs;\nservice Greeter {\n  rpc GetPost(GetPostRequest) returns (Post);\n  rpc CreatePost(CreatePostRequest) returns (Post);\n  rpc UpdatePost(UpdatePostRequest) returns (Post);\n  rpc SearchPosts(SearchPostsRequest) returns (SearchPostsResponse);\n  // More methods...\n  ...\n}\nmessage GetPostRequest {\n  string post_id = 1;\n}\nmessage CreatePostRequest {\n  string category_id = 1;\n  string title = 2;\n  string content = 3;\n  // More properties below\n  ...\n}\nmessage UpdatePostRequest {\n  string post_id = 1;\n  string category_id = 2;\n  string title = 3;\n  string content = 4;\n  // More properties below\n  ...\n}\nmessage SearchPostsRequest {\n  string keyword = 1;\n}\nmessage Post {\n  string post_id = 1;\n  Category category = 2;\n  string title = 3;\n  string content = 4;\n  // More properties below\n  ...\n}\nmessage Category {\n  string category_id = 1;\n  string name = 2;\n  // More properties below\n  ...\n}\nmessage SearchPostsResponse {\n  int32 page_number = 1;\n  int32 page_size = 2 [default = 10];\n  repeated Post posts = 3;\n}\n```", "```cs\ntype Query {  posts: [Post]\n  post(id: ID!): Post\n}\ntype Post {\n  id: ID!\n  title: String\n  content: String\n  category: Category\n  publishDate: String\n  isPublished: Boolean\n  relatedPosts: [Post]\n}\ntype Category {\n  id: ID!\n  name: String\n}\n```", "```cs\n{  posts {\n    id\n    title\n    content\n    category {\n      id\n      name\n    }\n    publishDate\n    // If we do not need the `isPublished` field, we can omit it.\n    // isPublished\n    relatedPosts {\n      id\n      title\n      category {\n        id\n        name\n      }\n      publishDate\n    }\n  }\n}\n```", "```cs\nmutation {  createPost(\n    categoryId: ID!\n    title: String!\n    content: String!\n  ) {\n    post {\n      id\n      title\n      content\n      category {\n        id\n        name\n      }\n      publishDate\n      isPublished\n    }\n  }\n}\n```", "```cs\nconst socket = new WebSocket('wss://websocket.example.com/ws/updates');\n```"]