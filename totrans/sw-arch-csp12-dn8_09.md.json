["```cs\n    public int MaximumGrade(int[] grades)\n    {\n        throw new NotImplementedException();\n    } \n    ```", "```cs\n    int MaximumGrade(int[] grades)\n    {\n        if(grades == null) return 0;\n        int result= 0;\n        for(int i = 0; i < grades.Length; i++)\n        {\n            if (grades[i]> result) result= grades[i];\n        }\n        return result;\n    } \n    ```", "```cs\n    int MaximumGrade(int[] grades)\n    {\n        if(grades == null) throw new ArgumentException();\n        int result= 0;\n        foreach(int grade in grades)\n        {\n            if (grade > result) result= grade;\n        }\n        return result;\n    } \n    ```", "```cs\nint result=0; \n```", "```cs\nint result= int.MinValue; \n```", "```cs\nGiven the first number is 50\nAnd the second number is 70\nWhen the two numbers are added\nThen the result should be 120 \n```", "```cs\n[Given(\"the first number is (.*)\")]\npublic void GivenTheFirstNumberIs(int number)\n{\n     _calculator.FirstNumber = number;\n} \n```", "```cs\nprivate readonly Calculator _calculator = new Calculator(); \n```", "```cs\n Assert.Throws<MyException>(() => {/* test code */ ...}). \n```", "```cs\n[Fact]\npublic void Test1()\n{\n    var myInstanceToTest = new ClassToTest();\n    Assert.Equal(5, myInstanceToTest.MethodToTest(1));\n} \n```", "```cs\n[Theory]\n[InlineData(1, 5)]\n[InlineData(3, 10)]\n[InlineData(5, 20)]\npublic void Test1(int testInput, int testOutput)\n{\n    var myInstanceToTest = new ClassToTest();\n    \t Assert.Equal(testOutput,\n        myInstanceToTest.MethodToTest(testInput));\n} \n```", "```cs\npublic class Test1Data: IEnumerable<object[]>\n{\n    public IEnumerator<object[]> GetEnumerator()\n    {\n        yield return new object[] { 1, 5};\n        yield return new object[] { 3, 10 };\n        yield return new object[] { 5, 20 };\n    }\n    IEnumerator IEnumerable.GetEnumerator()=>GetEnumerator();  \n}\n...\n[Theory]\n[ClassData(typeof(Test1Data))]\npublic void Test1(int testInput, int testOutput)\n{\n    var myInstanceToTest = new ClassToTest();\n    Assert.Equal(testOutput,\n    myInstanceToTest.MethodToTest(testInput));\n} \n```", "```cs\n[Theory]\n[MemberData(nameof(MyStaticClass.Data),\n    MemberType= typeof(MyStaticClass))]\npublic void Test1(int testInput, int testOutput)\n{\n    ... \n```", "```cs\npublic class DatabaseFixture : IDisposable\n{\n    public DatabaseFixture()\n    {\n        Db = new SqlConnection(\"MyConnectionString\");\n    }\n    public void Dispose()\n    {\n        Db.Close()\n    }\n    public SqlConnection Db { get; private set; }\n} \n```", "```cs\npublic class MyTestsClass : IClassFixture<DatabaseFixture>\n{\n    private readonly DatabaseFixture fixture;\n    public MyDatabaseTests(DatabaseFixture fixture)\n    {\n        this.fixture = fixture;\n    }\n    ...\n} \n```", "```cs\n[CollectionDefinition(\"My Database collection\")]\npublic class DatabaseCollection : ICollectionFixture<DatabaseFixture>\n{\n    // this class is empty, since it is just a placeholder\n} \n```", "```cs\n[Collection(\"My Database collection\")]\npublic class MyTestsClass\n{\n    DatabaseFixture fixture;\n    public MyDatabaseTests(DatabaseFixture fixture)\n    {\n        this.fixture = fixture;\n    }\n    ...\n} \n```", "```cs\n var myMockDependency = new Mock<IMyInterface>(); \n```", "```cs\nmyMockDependency.Setup(x=>x.MyMethod(5)).Returns(10); \n```", "```cs\nmyMockDependency.Setup(x => x.MyMethod(It.IsAny<int>()))\n                  .Returns(10); \n```", "```cs\nvar myMockedInstance=myMockDependency.Object;\n...\nmyMockedInstance.MyMethod(10); \n```", "```cs\nmyMockDependency.Setup(x => x.MyProperty)\n                  .Returns(42);\n...\nmyMockDependency.Setup(x => x.MyMethodAsync(1))\n                    .ReturnsAsync(\"aasas\");\nvar res=await myMockDependency.Object\n    .MyMethodAsync(1); \n```", "```cs\nmyMockDependency.Verify(x => x.MyMethod(1), Times.AtLeast(2)); \n```", "```cs\nservices.AddHttpClient(), \n```", "```cs\npublic class HttpClientFixture\n{\n    public HttpClientFixture()\n    {\n        var serviceCollection = new ServiceCollection();\n        serviceCollection\n            .AddHttpClient();\n         ServiceProvider = serviceCollection.BuildServiceProvider();\n    }\n    public ServiceProvider ServiceProvider { get; private set; }\n} \n```", "```cs\npublic class MyUnitTestClass:IClassFixture<HttpClientFixture>\n{\n    private readonly ServiceProvider _serviceProvider;\n    public UnitTest1(HttpClientFixture fixture)\n    {\n        _serviceProvider = fixture.ServiceProvider;\n    }\n    [Fact]\n    public void MyTest()\n    {\n        var factory =\n            _serviceProvider.GetService<IHttpClientFactory>())\n\n            HttpClient client = factory.CreateClient();\n    }\n} \n```", "```cs\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.ChromeDriver;\npublic class MyUnitTestClass:IClassFixture<HttpClientFixture>\n{\n    [Fact]\n    public void MyTest()\n    {\n        Using (IWebDriver driver = new ChromeDriver())\n        {\n            driver.Navigate().GoToUrl(\"https://localhost:5001/mypage\");\n            //use driver to interact with the loaded page here\n            ...\n            var title = driver.Title;\n           Assert().Equal(\"My Application â€“ My Page\", title);\n           ...\n\t   var submitButton =\n\t\tdriver.FindElement(By.ClassName(\"confirm-changes\"));\n \t   submitButton.Clikck();\n \t   ...\n       }\n\n    }\n} \n```", "```cs\npublic class MynitTest\n    : IClassFixture<WebApplicationFactory<MyProject.Program>>\n{\n    private readonly\n        WebApplicationFactory<MyProject.Program> _factory;\n    public UnitTest1 (WebApplicationFactory<MyProject.Program> factory)\n    {\n        _factory = factory;\n    }\n    [Theory]\n    [InlineData(\"/\")]\n    [InlineData(\"/Index\")]\n    [InlineData(\"/About\")]\n    ....\n    public async Task MustReturnOK(string url)\n    {\n        var client = _factory.CreateClient();\n        // here both client and server are ready\nvar response = await client.GetAsync(url);\n        //get the response\n        response.EnsureSuccessStatusCode();\n        // verify we got a success return code.\n    }\n    ...\n    ---\n} \n```", "```cs\npublic partial class Program { } \n```"]