["```cs\npublic class MyType\n{\n    public string StringProperty { get; set; } =\n      String.Empty;\n}\n```", "```cs\nvar parameter = Expression.Parameter(typeof(MyType));\n```", "```cs\nvar property = typeof(MyType).GetProperty\n  (nameof(MyType.StringProperty))!;\n```", "```cs\nvar propertyExpression = Expression.Property\n  (parameter,property);\n```", "```cs\nvar assignExpression = Expression.Assign(\n    propertyExpression,\n    Expression.Constant(\"Hello world\"));\n```", "```cs\nvar parameter = Expression.Parameter(typeof(MyType));\nvar property = typeof(MyType).GetProperty\n  (nameof(MyType.StringProperty))!;\nvar propertyExpression = Expression.Property\n  (parameter,property);\nvar assignExpression = Expression.Assign(\n    propertyExpression,\n    Expression.Constant(\"Hello world\"));\n```", "```cs\nvar lambdaExpression = Expression.Lambda<Action<MyType>>\n  (assignExpression, parameter);\n```", "```cs\nvar expressionAction = lambdaExpression.Compile();\nvar instance = new MyType();\nexpressionAction(instance);\nConsole.WriteLine(instance.StringProperty);\n```", "```cs\nHello world\n```", "```cs\n{ \"FirstName\": \"Jane\", \"LastName\": \"Doe\", \"Age\": 57 }\n```", "```cs\n{\n    \"LastName\": \"Doe\"\n}\n```", "```cs\n{\n    \"LastName\": \"Doe\",\n    \"Age\": 57\n}\n```", "```cs\n{\n    \"LastName\": \"Doe\",\n    \"$or\": [\n        {\n            \"Age\": 57\n        }\n    ]\n}\n```", "```cs\n{\n    \"Age\": {\n        \"$gt\": 50\n    }\n}\n```", "```cs\ndotnet new console\n```", "```cs\nusing System.Linq.Expressions;\nusing System.Text.Json;\nnamespace Chapter8;\npublic static class QueryParser\n{\n    static readonly ParameterExpression\n      _dictionaryParameter = Expression.Parameter(typeof\n      (IDictionary<string, object>), \"input\");\n}\n```", "```cs\nleft-hand (operand) right-hand\n```", "```cs\nLastName equals Doe\n```", "```cs\nstatic Expression GetLeftValueExpression(JsonProperty\n  parentProperty, JsonProperty property)\n{\n    var keyParam =\n      Expression.Constant(parentProperty.Name);\n    var indexer = typeof(IDictionary<string,\n      object>).GetProperty(\"Item\")!;\n    var indexerExpr = Expression.Property(\n      _dictionaryParameter, indexer, keyParam);\n    return property.Value.ValueKind switch\n    {\n        JsonValueKind.Number =>\n          Expression.Unbox(indexerExpr, typeof(int)),\n        JsonValueKind.String =>\n          Expression.TypeAs(indexerExpr, typeof(string)),\n        JsonValueKind.True or JsonValueKind.False =>\n          Expression.TypeAs(indexerExpr, typeof(bool)),\n        _ => indexerExpr\n    };\n}\n```", "```cs\nstatic Expression GetRightValueExpression(JsonProperty\n  property)\n{\n    return property.Value.ValueKind switch\n    {\n        JsonValueKind.Number =>\n          Expression.Constant(property.Value.GetInt32()),\n        JsonValueKind.String => Expression.Constant(\n          (object)property.Value.GetString()!),\n        JsonValueKind.True or JsonValueKind.False =>\n          Expression.Constant((object)property.Value\n          .GetBoolean()),\n        _ => Expression.Empty()\n    };\n}\n```", "```cs\nstatic Expression GetNestedFilterExpression(JsonProperty\n  property)\n{\n    Expression? currentExpression = null;\n    foreach (var expressionProperty in\n      property.Value.EnumerateObject())\n    {\n        var getValueExpression = GetLeftValueExpression(\n          property, expressionProperty);\n        var valueConstantExpression =\n          GetRightValueExpression(expressionProperty);\n        Expression comparisonExpression =\n          expressionProperty.Name switch\n        {\n            \"$lt\" => Expression.LessThan(\n              getValueExpression, valueConstantExpression),\n            \"$lte\" => Expression.LessThanOrEqual(\n              getValueExpression, valueConstantExpression),\n            \"$gt\" => Expression.GreaterThan(\n              getValueExpression, valueConstantExpression),\n            \"$gte\" => Expression.GreaterThanOrEqual(\n              getValueExpression, valueConstantExpression),\n            _ => Expression.Empty()\n        };\n        if (currentExpression is not null)\n        {\n            currentExpression = Expression.And(\n              currentExpression, comparisonExpression);\n        }\n        else\n        {\n            currentExpression = comparisonExpression;\n        }\n    }\n    return currentExpression ?? Expression.Empty();\n}\n```", "```cs\nstatic Expression GetFilterExpression(JsonProperty\n  property)\n{\n    return property.Value.ValueKind switch\n    {\n        JsonValueKind.Object =>\n          GetNestedFilterExpression(property),\n        _ => Expression.Equal(GetLeftValueExpression(\n          property, property), GetRightValueExpression(\n          property))\n    };\n}\n```", "```cs\nstatic Expression GetOrExpression(Expression expression,\n  JsonProperty property)\n{\n   Foreach (var element in property.Value.EnumerateArray())\n   {\n       var elementExpression = GetQueryExpression(element);\n       expression = Expression.OrElse(expression,\n         elementExpression);\n   }\n   return expression;\n}\n```", "```cs\nstatic Expression GetQueryExpression(JsonElement element)\n{\n    Expression? currentExpression = null;\n    foreach (var property in element.EnumerateObject())\n    {\n        Expression expression = property.Name switch\n        {\n            \"$or\" => GetOrExpression(currentExpression!,\n              property),\n            _ => GetFilterExpression(property)\n        };\n        if (currentExpression is not null && expression is\n          not BinaryExpression)\n        {\n            currentExpression = Expression.And(\n              currentExpression, expression);\n        }\n        else\n        {\n            currentExpression = expression;\n        }\n    }\n    return currentExpression ?? Expression.Empty();\n}\n```", "```cs\npublic static Expression<Func<IDictionary<string, object>,\n  bool>> Parse(JsonDocument json)\n{\n    var element = json.RootElement;\n    var query = GetQueryExpression(element);\n    return Expression.Lambda<Func<IDictionary<string,\n      object>, bool>>(query, _dictionaryParameter);\n}\n```", "```cs\n[\n    { \"FirstName\": \"Jane\", \"LastName\": \"Doe\", \"Age\": 57 },\n    { \"FirstName\": \"John\", \"LastName\": \"Doe\", \"Age\": 55 },\n    { \"FirstName\": \"Michael\", \"LastName\": \"Corleone\",\n      \"Age\": 47 },\n    { \"FirstName\": \"Anthony\", \"LastName\": \"Soprano\",\n      \"Age\": 51 },\n    { \"FirstName\": \"Paulie\", \"LastName\": \"Gualtieri\",\n      \"Age\": 58 }\n]\n```", "```cs\n{\n    \"Age\": {\n        \"$gte\": 52\n    },\n    \"$or\": [\n        {\n            \"LastName\": \"Doe\"\n        }\n    ]\n}\n```", "```cs\nvar query = File.ReadAllText(\"query.json\");\nvar queryDocument = JsonDocument.Parse(query);\nvar expression = QueryParser.Parse(queryDocument);\nvar documentsRaw = File.ReadAllText(\"data.json\");\nvar serializerOptions = new JsonSerializerOptions();\nserializerOptions.Converters.Add(new Dictionary\n  StringObjectJsonConverter());\nvar documents = JsonSerializer.Deserialize<Ienumerable\n  <Dictionary<string, object>>>(documentsRaw,\n    serializerOptions)!;\nvar filtered = documents.AsQueryable().Where(expression);\nforeach (var document in filtered)\n{\n    Console.WriteLine(JsonSerializer.Serialize(document));\n}\n```", "```cs\n{\"FirstName\":\"Jane\",\"LastName\":\"Doe\",\"Age\":57}\n{\"FirstName\":\"John\",\"LastName\":\"Doe\",\"Age\":55}\n{\"FirstName\":\"Paulie\",\"LastName\":\"Gualtieri\",\"Age\":58}\n```"]