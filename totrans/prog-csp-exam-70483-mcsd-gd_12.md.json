["```cs\npublic static void EncryptSymmetric(SymmetricAlgorithm sem)\n{\n    //Read content from file\n    string filecontent = File.ReadAllText(\"..\\\\..\\\\inputfile.txt\");\n    //Create encryptor using key and vector\n    ICryptoTransform encryptor = sem.CreateEncryptor(sem.Key, sem.IV);\n    //create memory stream used at runtime to store data\n    using (MemoryStream outputstream = new MemoryStream())\n    {\n        //Create crypto stream in write mode\n        using (CryptoStream encStream = new CryptoStream(outputstream, encryptor, CryptoStreamMode.Write))\n        {\n            //use streamwrite \n            using (StreamWriter writer = new StreamWriter(encStream))\n            {\n                // Write the text in the stream writer \n                writer.Write(filecontent);\n            }\n        }\n        // Get the result as a byte array from the memory stream \n        byte[] encryptedDataFromMemory = outputstream.ToArray();\n        // Write the data to a file \n        File.WriteAllBytes(\"..\\\\..\\\\Outputfile.txt\", encryptedDataFromMemory);\n    }\n}\n```", "```cs\npublic static string DecryptSymmetric(SymmetricAlgorithm sem)\n{\n    string result = string.Empty;\n    //Create decryptor\n    ICryptoTransform decryptor = sem.CreateDecryptor(sem.Key, sem.IV);\n    //read file content\n    byte[] filecontent = File.ReadAllBytes(\"..\\\\..\\\\Outputfile.txt\");\n    //read file content to memory stream\n    using (MemoryStream outputstream = new MemoryStream(filecontent))\n    {\n        //create decrypt stream\n        using (CryptoStream decryptStream = new CryptoStream(outputstream, decryptor, CryptoStreamMode.Read))\n        {\n            using (StreamReader reader = new StreamReader(decryptStream))\n            {\n                //read content of stream till end\n                result = reader.ReadToEnd();\n            }\n        }\n    }\n    return result;\n\n}\n```", "```cs\n static void Main(string[] args)\n {\n     Console.WriteLine(\"Using AES symmetric Algorithm\");\n     SymmetricAlgorithm sem = new AesManaged();\n     Console.WriteLine(\"Encrypting data from inputfile\");\n     EncryptDecryptHelper.EncryptSymmetric(sem);\n     Console.WriteLine(\"Data Encrypted. You can check in outputfile. Press any key to decrypt message\");\n     System.Console.ReadKey();\n     Console.WriteLine(\"Decrypting content form outputfile\");\n     string message = EncryptDecryptHelper.DecryptSymmetric(sem);\n     Console.WriteLine($\"Decrypted data : {message}\");\n     // Keep the console window open in debug mode.\n     System.Console.WriteLine(\"Press any key to exit.\");\n     System.Console.ReadKey();\n }\n```", "```cs\npublic static byte[] EncryptAsymmetric(string publicKey, string texttoEncrypt)\n{\n    byte[] result;\n    UnicodeEncoding uc = new UnicodeEncoding();\n    byte[] databytes = uc.GetBytes(texttoEncrypt);\n    using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())\n    {\n        rsa.FromXmlString(publicKey);\n        result = rsa.Encrypt(databytes, true);\n    }\n    return result;\n}\n```", "```cs\npublic static string DecryptAsymmetric(string privateKey, byte[] bytestoDecrypt)\n{\n    byte[] result;\n    using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())\n    {\n        rsa.FromXmlString(privateKey);\n        result = rsa.Decrypt(bytestoDecrypt, true);\n    }\n    UnicodeEncoding uc = new UnicodeEncoding();\n    string resultText = uc.GetString(result);\n    return resultText;\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    #region asymmetric Encryption\n    Console.WriteLine(\"Using asymmetric Algorithm\");\n    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();\n string publicKey = rsa.ToXmlString(false);\n string privateKey = rsa.ToXmlString(true);\n    Console.WriteLine(\"Encrypting data \");\n    byte[] resultbytes = EncryptDecryptHelper.EncryptAsymmetric(publicKey,\"This is a dummy text to encrypt\");\n    Console.WriteLine(\"Data Encrypted. Press any key to decrypt message\");\n    System.Console.ReadKey();\n    Console.WriteLine(\"Decrypting content\");\n    string resultText = EncryptDecryptHelper.DecryptAsymmetric(pricateKey, resultbytes);\n    Console.WriteLine($\"Decrypted data : {resultText}\");\n    #endregion\n\n    // Keep the console window open in debug mode.\n    System.Console.WriteLine(\"Press any key to exit.\");\n    System.Console.ReadKey();\n}\n```", "```cs\npublic static void DigitalSignatureSample(string senderPrivatekey, string receiverspublickey, string texttoEncrypt)\n{\n UnicodeEncoding uc = new UnicodeEncoding();\n Console.WriteLine(\"Converting to bytes from text\");\n //get bytearray from the message\n byte[] databytes = uc.GetBytes(texttoEncrypt);\n Console.WriteLine(\"Creating cryptoclass instance\");\n //Creating instance for RSACryptoservice provider as we are using for sender and receiver\n RSACryptoServiceProvider rsasender = new RSACryptoServiceProvider();\n RSACryptoServiceProvider rsareceiver = new RSACryptoServiceProvider();\n //getting private and public key\n rsasender.FromXmlString(senderPrivatekey);\n rsareceiver.FromXmlString(receiverspublickey);\n Console.WriteLine(\"Creating signature formatter instance\");\n //GEt signature from RSA\n RSAPKCS1SignatureFormatter signatureFormatter = new RSAPKCS1SignatureFormatter(rsasender);\n //set hashalgorithm\n signatureFormatter.SetHashAlgorithm(\"SHA1\");\n //encrypt message\n Console.WriteLine(\"encrypting message\");\n byte[] encryptedBytes = rsareceiver.Encrypt(databytes, false);\n //compute hash\n byte[] computedhash = new SHA1Managed().ComputeHash(encryptedBytes);\n Console.WriteLine(\"Creating signature\");\n //create signature for the message\n byte[] signature = signatureFormatter.CreateSignature(computedhash);\n Console.WriteLine(\"Signature: \" + Convert.ToBase64String(signature));\n Console.WriteLine(\"Press any key to continue...\");\n Console.ReadKey();\n //receive message then recompute hash\n Console.WriteLine(\"recomputing hash\");\n byte[] recomputedHash = new SHA1Managed().ComputeHash(encryptedBytes);\n //signature deformatter\n Console.WriteLine(\"Creating signature dformatter instance\");\n RSAPKCS1SignatureDeformatter signatureDFormatter = new RSAPKCS1SignatureDeformatter(rsareceiver);\n signatureDFormatter.SetHashAlgorithm(\"SHA1\");\n //verify signature\n Console.WriteLine(\"verifying signature\");\n if (!signatureDFormatter.VerifySignature(recomputedHash, signature))\n {\n  Console.WriteLine(\"Signature did not match from sender\");\n }\n Console.WriteLine(\"decrypting message\");\n //decrypt message\n byte[] decryptedText = rsasender.Decrypt(encryptedBytes, false);\n Console.WriteLine(Encoding.UTF8.GetString(decryptedText));\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    #region Digital Signatures\n    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();\n    string publicKey = rsa.ToXmlString(false);\n    string pricateKey = rsa.ToXmlString(true);\n    EncryptDecryptHelper.DigitalSignatureSample(pricateKey, publicKey,\"This is a sample text for Digital signatures\");\n    #endregion\n\n    // Keep the console window open in debug mode.\n    System.Console.WriteLine(\"Press any key to exit.\");\n    System.Console.ReadKey();\n}\n```", "```cs\npublic static void HashvalueSample(string texttoEncrypt)\n{\n    UnicodeEncoding uc = new UnicodeEncoding();\n    Console.WriteLine(\"Converting to bytes from text\");\n    byte[] databytes = uc.GetBytes(texttoEncrypt);\n    byte[] computedhash = new SHA1Managed().ComputeHash(databytes);\n    foreach (byte b in computedhash)\n    {\n        Console.Write(\"{0} \", b);\n    }\n    Console.WriteLine(\"Press any key to continue...\");\n    byte[] reComputedhash = new SHA1Managed().ComputeHash(databytes);\n    bool result = true;\n    for (int x = 0; x < computedhash.Length; x++)\n    {\n        if (computedhash[x] != reComputedhash[x])\n        {\n            result = false;\n        }\n        else\n        {\n            result = true;\n        }\n    }\n\n    if (result)\n    {\n        Console.WriteLine(\"Hash value is same\");\n    }\n    else\n    {\n        Console.WriteLine(\"Hash value is not same\");\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{ \n    #region Hashvalue\n    EncryptDecryptHelper.HashvalueSample(\"This a sample text for hashvalue sample\");\n    #endregion\n\n    // Keep the console window open in debug mode.\n    System.Console.WriteLine(\"Press any key to exit.\");\n    System.Console.ReadKey();\n}\n```"]