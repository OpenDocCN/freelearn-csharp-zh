- en: '*Chapter 6*: Using Different Hosting Models'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will talk about how to customize hosting in ASP.NET Core.
    We will look into the hosting options and different kinds of hosting, and take
    a quick look at hosting on IIS. This chapter is just an overview. It is possible
    to go into much greater detail for each topic, but that would fill a complete
    book on its own!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up `WebHostBuilder`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Kestrel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up `HTTP.sys`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting on IIS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Nginx or Apache on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – ASP.NET Core architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.1_B17996.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter tackles the following topics of the server architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – ASP.NET server architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.2_B17996.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – ASP.NET server architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, we just need to set up a small, empty web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. Open it with Visual Studio Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Et voilà*! A simple project opens in Visual Studio Code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found on GitHub here: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up WebHostBuilder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in the last chapter, we will focus on `Program.cs` in this section. `WebHostBuilder`
    is our friend. This is where we configure and create the web host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is the default configuration of every new ASP.NET
    Core web project we create using `dotnet new` command with the .NET CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we already know from previous chapters, the default builder has all the necessary
    stuff preconfigured. All you require in order to run an application successfully
    on Azure or an on-premises IIS is configured for you.
  prefs: []
  type: TYPE_NORMAL
- en: But you are able to override almost all of these default configurations, including
    the hosting configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's set up Kestrel.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Kestrel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After `WebHostBuilder` is created, we can use various functions to configure
    the builder. Here, we can see one of them, which specifies the `Startup` class
    that should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in [*Chapter 4*](B17996_04_ePub.xhtml#_idTextAnchor066), *Configuring
    and Customizing HTTPS with Kestrel*, Kestrel is one possibility when it comes
    to hosting your application. Kestrel is a web server built into .NET and based
    on .NET socket implementations. Previously, it was built on top of **libuv**,
    which is the same web server that is used by Node.js. Microsoft removed the dependency
    to **libuv** and created their own web server implementation based on .NET sockets.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last chapter, we saw the `UseKestrel` method to configure the Kestrel
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This first argument is `WebHostBuilderContext` to access already-configured
    hosting settings or the configuration itself. The second argument is an object
    to configure Kestrel. This code snippet shows what we did in the last chapter
    to configure the socket endpoints where the host needs to listen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: (You might need to add a `using` to `System.Net`.)
  prefs: []
  type: TYPE_NORMAL
- en: This will override the default configuration where you are able to pass in URLs,
    for example, using the `applicationUrl` property of `launchSettings.json` or an
    environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at how to set up `HTTP.sys`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up HTTP.sys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is another hosting option, a different web server implementation. `HTTP.sys`
    is a pretty mature library, deep within Windows, that can be used to host your
    ASP.NET Core application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`HTTP.sys` is different from Kestrel. It cannot be used in IIS because it is
    not compatible with the ASP.NET Core module for IIS.'
  prefs: []
  type: TYPE_NORMAL
- en: The main reason for using `HTTP.sys` instead of Kestrel is `HTTP.sys` if you
    need to expose your application to the internet without IIS.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: IIS has been running on top of `HTTP.sys` for years. This means that `UseHttpSys()`
    and IIS are using the same web server implementation. To learn more about `HTTP.sys`,
    please read the documentation, links to which can be found in the *Further reading*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at using IIS for hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting on IIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ASP.NET Core application shouldn't be directly exposed to the internet, even
    if it's supported for Kestrel or `HTTP.sys`. It would be best to have something
    such as a reverse proxy in between, or at least a service that watches the hosting
    process. For ASP.NET Core, IIS isn't just a reverse proxy. It also takes care
    of the hosting process, in case it breaks because of an error. If that happens,
    IIS will restart the process. Nginx may be used as a reverse proxy on Linux that
    also takes care of the hosting process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be sure you created a new project or removed the Kestrel configuration of the
    previous section. This won't work with IIS.
  prefs: []
  type: TYPE_NORMAL
- en: To host an ASP.NET Core web on IIS or Azure, you need to publish it first. Publishing
    doesn't only compile the project; it also prepares the project for hosting on
    IIS, Azure, or a web server on Linux, such as Nginx.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will publish the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When viewed in a system browser, this should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – A .NET published folder](img/Figure_6.3_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – A .NET published folder
  prefs: []
  type: TYPE_NORMAL
- en: This produces an output that can be mapped in IIS. It also creates a `web.config`
    to add settings for IIS or Azure. It contains the compiled web application as
    a DLL.
  prefs: []
  type: TYPE_NORMAL
- en: If you publish a self-contained application, it also contains the runtime itself.
    A self-contained application brings its own .NET Core runtime, but the size of
    the delivery increases a lot.
  prefs: []
  type: TYPE_NORMAL
- en: 'And on IIS? Just create a new web and map it to the folder where you placed
    the published output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – The .NET publishing dialog](img/Figure_6.4_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – The .NET publishing dialog
  prefs: []
  type: TYPE_NORMAL
- en: It gets a little more complicated if you need to change the security, if you
    have some database connections, and so on. This could be a topic for a separate
    chapter on its own.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Hello World! viewed in a browser](img/Figure_6.5_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Hello World! viewed in a browser
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.5* shows the output of the small `MapGet` in the `Program.cs` of
    the demo project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next up, we'll discuss some alternatives for Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Using Nginx or Apache on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Publishing an ASP.NET Core application on Linux looks very similar to the way
    it looks on IIS, but preparing it for the reverse proxy requires some additional
    steps. You will need a web server such as Nginx or Apache as a reverse proxy that
    forwards the traffic to Kestrel and the ASP.NET Core application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to allow your app to accept two specific forwarded headers.
    To do this, open `Startup.cs` and add the following lines to the `Configure` method
    before the `UseAuthentication` middleware:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You also need to trust the incoming traffic from the reverse proxy. This requires
    you to add the following lines to the `ConfigureServices` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You might need to add a `using` to `Microsoft.AspNetCore.HttpOverrides`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the IP address of the proxy here. This is just a sample.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, you need to publish the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the build output to a folder called `/var/www/yourapplication`. You should
    also do a quick test on Linux by calling the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `yourapplication.dll` is the compiled application, including the path.
    If it is all working correctly, you should be able to call your web on `http://localhost:5000/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If it is working, the application should run as a service. This requires you
    to create a service file on `/etc/systemd/system/`. Call the file `kestrel-yourapplication.service`
    and place the following content in it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that the paths in lines 5 and 6 point to the folder where you placed
    the build output. This file defines that your app should run as a service on the
    default port. It also watches the app and restarts it in case it crashes. It also
    defines environment variables that get passed in to configure your application.
    See [*Chapter 1*](B17996_01_ePub.xhtml#_idTextAnchor019), *Customizing Logging*,
    to learn how to configure your application using environment variables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next up, we'll see how to configure Nginx.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Nginx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you can tell Nginx what to do using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This tells Nginx to forward calls on port `80` to `example.com`, and subdomains
    of it to `http://localhost:5000`, which is the default address of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Apache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Apache configuration looks pretty similar to the Nginx method, and does
    the same things at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That's it for Nginx and Apache. Let's now wrap up this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core and the .NET CLI already contain all the tools to get them running
    on various platforms and to set it up to get it ready for Azure and IIS, as well
    as Nginx. This is super easy and well described in the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, we have `WebHostBuilder`, which creates the hosting environment of
    the applications. In version 3.0, we have `HostBuilder`, which is able to create
    a hosting environment that is completely independent of any web context.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core 6.0 has a feature to run tasks in the background inside the application.
    To learn more about that, read the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information you can refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kestrel documentation**: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-6.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP.sys documentation**: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-6.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Core**: [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/aspnet-core-module?view=aspnetcore-6.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
