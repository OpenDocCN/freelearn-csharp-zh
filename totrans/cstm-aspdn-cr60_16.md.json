["```cs\ndotnet new mvc -n TagHelperSample -o TagHelperSample\n```", "```cs\ncd TagHelperSample\ncode .\n```", "```cs\n<!-- old fashioned HtmlHelper -->\n@Html.ActionLink(\"Home\", \"Index\", \"Home\")\n<!-- new TagHelper -->\n<a asp-controller=\"Home\" asp-action=\"Index\">Home</a>\n```", "```cs\n<environment include=\"Development\">\n    <link rel=\"stylesheet\" \n        href=\"~/lib/bootstrap/dist/css/bootstrap.css\" />\n    <link rel=\"stylesheet\" href=\"~/css/site.css\" />\n</environment>\n<environment exclude=\"Development\">\n    <link rel=\"stylesheet\" \n        href=\"https://ajax.aspnetcdn.com/ajax/bootstrap/\n              3.3.7/css/bootstrap.min.css\"\n            asp-fallback-href=\n              \"~/lib/bootstrap/dist/css/bootstrap.min.css\"\n            asp-fallback-test-class=\"sr-only\" \n            asp-fallback-test-property=\"position\" \n            asp-fallback-test-value=\"absolute\" />\n    <link rel=\"stylesheet\" \n        href=\"~/css/site.min.css\" \n        asp-append-version=\"true\" />\n</environment>\n```", "```cs\n@addTagHelper *, TagHelperSample\n```", "```cs\n    <p strong color=\"red\">Use this area to provide \n      additional information.</p>\n    ```", "```cs\n    using Microsoft.AspNetCore.Razor.TagHelpers;\n\n    namespace TagHelperSample.TagHelpers;\n    [HtmlTargetElement(Attributes = \"strong\")]\n    public class StrongTagHelper : TagHelper\n    {\n        public string Color { get; set; }\n        public override void Process(\n            TagHelperContext context, \n            TagHelperOutput output)\n        {\n            output.Attributes.RemoveAll(\"strong\");\n            output.Attributes.Add(\"style\", \n                \"font-weight:bold;\");\n            if (!String.IsNullOrWhiteSpace(Color))\n            {\n                output.Attributes.RemoveAll(\"style\");\n                output.Attributes.Add(\"style\", \n                    $\"font-weight:bold;color:{Color};\");\n            }\n        }\n    }\n    ```", "```cs\n    <p style=\"font-weight:bold;color:red;\">Use this area \n      to provide additional information.</p>\n    ```", "```cs\n    using Microsoft.AspNetCore.Razor.TagHelpers;\n\n    namespace TagHelperSample.TagHelpers;\n    public class GreeterTagHelper : TagHelper\n    {\n        [HtmlAttributeName(\"name\")]\n        public string Name { get; set; }\n        public override void Process(\n            TagHelperContext context, \n            TagHelperOutput output)\n        {\n            output.TagName = \"p\";\n            output.Content.SetContent($\"Hello {Name}\");\n        }\n    2\n    ```", "```cs\n    <greeter name=\"Readers\"></greeter>\n    ```", "```cs\n    <p>Hello Readers</p>\n    ```", "```cs\n    using Microsoft.AspNetCore.Razor.TagHelpers;\n\n    namespace TagHelperSample.TagHelpers;\n    public class DataGridTagHelper : TagHelper\n    {\n        [HtmlAttributeName(\"Items\")]\n        public IEnumerable<object> Items { get; set; }\n        public override void Process(\n            TagHelperContext context, \n            TagHelperOutput output)\n        {\n            output.TagName = \"table\";\n            output.Attributes.Add(\"class\", \"table\");\n            var props = GetItemProperties();\n            TableHeader(output, props);\n            TableBody(output, props);\n        }\n    }\n    ```", "```cs\n    using System.Reflection;\n    using System.ComponentModel;\n    ```", "```cs\n    private PropertyInfo[] GetItemProperties()\n    {\n        var listType = Items.GetType();\n        Type itemType;\n        if (listType.IsGenericType)\n        {\n            itemType = listType.GetGenericArguments()\n                .First();\n            return itemType.GetProperties(\n                BindingFlags.Public | \n                BindingFlags.Instance);\n        }\n        return new PropertyInfo[] { };\n    }\n    ```", "```cs\n    private void TableHeader(\n        TagHelperOutput output, \n        PropertyInfo[] props)\n    {\n        output.Content.AppendHtml(\"<thead>\");\n        output.Content.AppendHtml(\"<tr>\");\n        foreach (var prop in props)\n        {\n            var name = GetPropertyName(prop);\n            output.Content.AppendHtml($\"<th>{name}</th>\");\n        }\n        output.Content.AppendHtml(\"</tr>\");\n        output.Content.AppendHtml(\"</thead>\");\n    }\n    ```", "```cs\n    private string GetPropertyName(\n        PropertyInfo property)\n    {\n        var attribute = property\n            .GetCustomAttribute<DisplayNameAttribute>();\n        if (attribute != null)\n        {\n            return attribute.DisplayName;\n        }\n        return property.Name;\n    }\n    ```", "```cs\n    private void TableBody(\n        TagHelperOutput output, \n        PropertyInfo[] props)\n    {\n        output.Content.AppendHtml(\"<tbody>\");\n        foreach (var item in Items)\n        {\n            output.Content.AppendHtml(\"<tr>\");\n            foreach (var prop in props)\n            {\n                var value = GetPropertyValue(prop, item);\n                output.Content.AppendHtml(\n                    $\"<td>{value}</td>\");\n            }\n            output.Content.AppendHtml(\"</tr>\");\n        }\n        output.Content.AppendHtml(\"</tbody>\");\n    }\n    ```", "```cs\n    private object GetPropertyValue(\n        PropertyInfo property, \n        object instance)\n    {\n        return property.GetValue(instance);\n    }\n    ```", "```cs\n    <data-grid items=\"Model.Persons\"></data-grid>\n    ```", "```cs\n    using System.ComponentModel;\n\n    namespace TagHelperSample.Models;\n    public class Person\n    {\n        [DisplayName(\"First name\")]\n        public string FirstName { get; set; }\n        [DisplayName(\"Last name\")]\n        public string LastName { get; set; }\n        public int Age { get; set; }\n        [DisplayName(\"Email address\")]\n        public string EmailAddress { get; set; }\n    }\n    ```", "```cs\n    using TagHelperSample.Models;\n    using GenFu;\n\n    namespace TagHelperSample.Services;\n\n    public interface IService\n    {\n        IEnumerable<Person> AllPersons();\n    }\n    internal class PersonService : IService\n    {\n        public IEnumerable<Person> AllPersons()\n        {\n            return A.ListOf<Person>(25);\n        }\n    }\n    ```", "```cs\n    dotnet add package GenFu\n    ```", "```cs\n    builder.Services.AddTransient<IService, PersonService>();\n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc;\n    using TagHelperSample.Models;\n    using TagHelperSample.Services;\n\n    namespace TagHelperSample.Controllers;\n\n    public class HomeController : Controller\n    {\n        private readonly IService _service;\n\n        public HomeController(\n            IService service)\n        {\n            _service = service;\n        }\n\n        public IActionResult Index()\n        {\n            ViewData[\"Message\"] = \"Your application           description page.\";\n\n            var persons = _service.AllPersons();\n            return View(new IndexViewModel\n            {\n                Persons = persons\n            });\n        }\n    ```"]