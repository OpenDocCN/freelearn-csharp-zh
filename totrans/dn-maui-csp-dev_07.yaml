- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Understanding Navigation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解导航
- en: Until now, we’ve been working with one page at a time, with no way to get to
    a page except by setting it in `AppShell.xaml`. Of course, this will not do for
    a real application, so in this chapter, we’ll look at various options for navigating
    from page to page. As you’ll see, .NET MAUI uses *shell navigation*, a process
    we’ll look at in some depth.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一次只处理一个页面，没有其他方式可以到达页面，除非在`AppShell.xaml`中设置它。当然，这对于实际应用来说是不够的，所以在本章中，我们将探讨从页面到页面的各种导航选项。您将看到，.NET
    MAUI使用*shell导航*，我们将深入探讨这个过程。
- en: 'This chapter includes the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Exploring the TabBar
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索TabBar
- en: Creating the About and Buddies pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建关于和伙伴页面
- en: Shell navigation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 壳导航
- en: Routing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: Passing values from page to page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从页面到页面传递值
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To get the most out of this chapter, you’ll need a copy of Visual Studio. The
    source code for the completed code shown in this chapter can be found here: [https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Navigation](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Navigation).
    If you want to follow along, start with the code from the completion of [*Chapter
    6*](B19723_06.xhtml#_idTextAnchor115).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用本章内容，您需要Visual Studio的副本。本章中显示的完成代码的源代码可以在以下位置找到：[https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Navigation](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Navigation)。如果您想跟随，从[*第6章*](B19723_06.xhtml#_idTextAnchor115)的完成代码开始。
- en: Exploring the TabBar
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索TabBar
- en: 'ForgetMeNot’s principal form of navigation will be the `TabBar control`. A
    Tab Bar is a way to jump to a specific page without going through other pages.
    It consists of icons, and sometimes descriptive text, across the bottom of every
    page, as shown in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ForgetMeNot的主要导航形式将是`TabBar`控件。Tab Bar是一种在不通过其他页面的情况下跳转到特定页面的方式。它由每个页面底部的图标和有时描述性文本组成，如下面的截图所示：
- en: '![Figure 7.1 – Tab Bar in the completed project'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 – 完成项目中的标签栏'
- en: '](img/B19723_Figure_7.1.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19723_Figure_7.1.jpg)'
- en: Figure 7.1 – Tab Bar in the completed project
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 完成项目中的标签栏
- en: The four tabs at the bottom, as shown in *Figure 7**.1*, will take the user
    directly to the respective page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 底部的四个标签，如图*图7.1*所示，将直接将用户带到相应的页面。
- en: The Home page
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 主页
- en: Here you see the tabs we created on `MainPage,` which we created in [*Chapter
    4*](B19723_04.xhtml#_idTextAnchor054), one of which we’ve titled **Home**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们在`MainPage`上创建的标签，我们在[*第4章*](B19723_04.xhtml#_idTextAnchor054)中创建了它，其中一个我们将其命名为**主页**。
- en: 'You create `TabBar` in `AppShell.xaml`. Within the `TabBar` tags, you provide
    one `ShellContent` element for each page. `ShellContent` has a `Title` property
    (the text displayed), an `Icon` property (the image displayed), and `ContentTemplate`,
    which specifies the content for this tab:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您在`AppShell.xaml`中创建`TabBar`。在`TabBar`标签内，为每个页面提供一个`ShellContent`元素。`ShellContent`具有`Title`属性（显示的文本）、`Icon`属性（显示的图像）和`ContentTemplate`，它指定了此标签的内容：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we need to create the pages that each `ContentTemplate` points to so that
    we can see `TabBar` at work.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建每个`ContentTemplate`指向的页面，这样我们才能看到`TabBar`在工作。
- en: Creating the About and Buddies pages
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建关于和伙伴页面
- en: 'To see this navigation work, you’ll need to add the missing pages: **About**
    and **Buddies**. Creating the **About** page is very straightforward. Right-click
    on the **View** folder and choose **Add New Item**. If needed, expand the **AddNewItem**
    dialog.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这种导航工作，您需要添加缺失的页面：**关于**和**伙伴**。创建**关于**页面非常直接。右键单击**视图**文件夹，然后选择**添加新项**。如果需要，展开**添加新项**对话框。
- en: 'From the left panel, choose `AboutPage.xaml`, as shown in *Figure 7**.2*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧面板中选择`AboutPage.xaml`，如图*图7.2*所示：
- en: '![Figure 7.2 – Creating AboutPage'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2 – 创建AboutPage'
- en: '](img/B19723_Figure_7.2.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B19723_Figure_7.2.jpg)'
- en: Figure 7.2 – Creating AboutPage
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 创建AboutPage
- en: The **About** page is very simple and does not require any new types of controls.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于**页面非常简单，不需要任何新的控件类型。'
- en: Assembling the About page
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组装关于页面
- en: 'Let’s assemble the `BindingContext`. Finally, we’ll need `ViewModel`. Eventually,
    the **About** page will ask the service for its version number, but for now, we’ll
    hardcode that:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们组装`BindingContext`。最后，我们需要`ViewModel`。最终，**关于**页面将向服务请求其版本号，但到目前为止，我们将硬编码它：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The code-behind file looks like this (for now):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 后台代码文件看起来像这样（目前）：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And, finally, `ViewModel` looks like this (for now):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`ViewModel`看起来像这样（目前）：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The **About** page currently looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于**页面目前看起来像这样：'
- en: '![Figure 7.3 – The About page'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.3 – 关于页面'
- en: '](img/B19723_Figure_7.3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B19723_Figure_7.3.jpg]'
- en: Figure 7.3 – The About page
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 关于页面
- en: That will give us something to work with.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供一些可以操作的东西。
- en: Next, we need a **BuddiesPage**, that is, a page that lists all the user’s friends
    and relatives. Each Buddy will have a list of **preferences** that we can use
    when it is time to buy them a present.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个**BuddiesPage**，即列出所有用户的朋友和亲戚的页面。每个朋友都将有一个我们可以用来在他们需要礼物时使用的**偏好**列表。
- en: 'For now, we’ll just use the out-of-the-box page that we get when we right-click
    on **View** and add a new **.NET MAUI XAML** page, as shown in *Figure 7**.4*:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只需使用当我们右键点击**视图**并添加一个新的**.NET MAUI XAML**页面时获得的现成页面，如图*图7.4*所示：
- en: '![Figure 7.4 – Creating the Buddies page'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.4 – 创建Buddies页面'
- en: '](img/B19723_Figure_7.4.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B19723_Figure_7.4.jpg]'
- en: Figure 7.4 – Creating the Buddies page
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 创建Buddies页面
- en: 'Next, open `BuddiesPage.xaml` and make one small change. Where the `Text` field
    of the `Label` control says, `Welcome to .NET MAUI!` change it to `Buddies Page`
    so that we’ll know where we are when we navigate there. If you want, add a space
    between the words in the title as well:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`BuddiesPage.xaml`并做一个小改动。在`Label`控制的`Text`字段中，将`Welcome to .NET MAUI!`改为`Buddies
    Page`，这样当我们导航到那里时就会知道我们在哪里。如果你愿意，在标题中的单词之间也可以添加一个空格：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, create `BuddiesViewModel` by right-clicking on the **ViewModel** folder
    and choosing **Add** | **Class**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过右键点击**ViewModel**文件夹并选择**添加** | **类**来创建`BuddiesViewModel`。
- en: 'Finally, we need to tell the app where to start. We’ll do that in `App.xaml.cs`
    where we will set `MainPage` to be the new `AppShell` (which is how we’ll kick
    off the program and set ourselves up for shell navigation as described):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要告诉应用程序从哪里开始。我们将在`App.xaml.cs`中这样做，我们将`MainPage`设置为新的`AppShell`（这是我们启动程序并为我们设置shell导航的方式，如前所述）：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is what `AppShell.xaml` should look like now:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`AppShell.xaml`现在应该看起来像的样子：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: One more thing. Notice that each tab has an icon. To make that work and look
    as intended, you’ll either need to find icons online or get them by checking out
    the source code for this chapter in the `Navigation` branch.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一件额外的事情。注意每个标签页都有一个图标。为了使其工作并达到预期效果，你可能需要在网上找到图标，或者通过检查本章的`Navigation`分支的源代码来获取它们。
- en: In either case, simply copy the images to the `resources\image` folder of your
    project, replacing the three dots with the full path on your computer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，只需将图像复制到项目的`resources\image`文件夹中，将三个点替换为计算机上的完整路径。
- en: Image support
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图片支持
- en: Those of you who have worked with `Xamarin.Forms` will be delighted to know
    that the days of creating different size images and distributing them to the various
    folders for both iOS and Android are now over. Put the `.svg` file into the `images`
    folder and .NET MAUI will do all the rest for you! (You can use a `.png` file,
    but it won’t scale as nicely. To make the point, I made our flower image a `.``png`
    file.)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些使用过`Xamarin.Forms`的人来说，将不再需要为iOS和Android创建不同尺寸的图像并将它们分发到各个文件夹的日子将令人高兴。将`.svg`文件放入`images`文件夹，.NET
    MAUI将为你完成所有剩余的工作！（你也可以使用`.png`文件，但它不会很好地缩放。为了说明这一点，我将我们的花朵图像保存为`.png`文件。）
- en: Run the application and click on the various tabs. You should see it navigating
    to the various pages we’ve created. Notice in *Figure 7**.5* that the current
    tab *lights up* – you get the effect for free and you do not have to create two
    icons, one for each of the currently selected and not selected icons.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序并点击各个标签页。你应该看到它导航到我们创建的各个页面。注意在*图7.5*中，当前标签页*点亮*了——你得到这种效果是免费的，你不需要为当前选中和不选中的图标各创建一个图标。
- en: '![Figure 7.5 – The Home tab “lit up”'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.5 – 主标签页“点亮”'
- en: '](img/B19723_Figure_7.5.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B19723_Figure_7.5.jpg]'
- en: Figure 7.5 – The Home tab “lit up”
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 主标签页“点亮”
- en: Now that our tabs and pages are in place, it is time to look at how you move
    from one page to another when there aren’t tabs for the pages you want to navigate
    to.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了标签页和页面，是时候看看在没有标签页的页面之间导航时如何从一个页面移动到另一个页面了。
- en: Shell navigation
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shell导航
- en: That would be all you need to know about navigation if your app was just going
    to have the four pages that we’re accessing by the TabBar. Of course, you’ll almost
    certainly have more pages than that, and you’ll want a way to navigate from one
    page to another.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序只是通过TabBar访问我们访问的四个页面，那么你需要的关于导航的知识就到此为止了。当然，你几乎肯定会有比这更多的页面，并且你将需要一个从页面导航到页面的方法。
- en: To see navigation from one page to another without using `TabBar`, we’ll need
    another page to navigate to. Let’s create the **BuddyDetailsPage**, which we’ll
    navigate to from the **Buddies** page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要在不使用`TabBar`的情况下查看页面间的导航，我们需要另一个要导航到的页面。让我们创建**BuddyDetailsPage**，我们将从**Buddies**页面导航到它。
- en: 'Once again, take the out-of-the-box page, but change `Label` to say `Buddy`
    `Details Page`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，使用现成的页面，但将`Label`改为显示“Buddy”`Details Page`：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, return to the `Button` that says `Go to details` and give it the `GoToDetailsCommand`
    command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，回到显示“转到详情”的`Button`，并给它分配`GoToDetailsCommand`命令：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `GoToDetails` command. The goal of our handler will be to navigate to
    **BuddyDetails**. We do that with *shell navigation*. Here’s the code to do so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GoToDetails`命令中。我们处理器的目标是导航到**BuddyDetails**。我们通过*shell navigation*来实现这一点。以下是实现此功能的代码：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: BindingContext
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: BindingContext
- en: Remember that for the `GoToDetails` command to work, you must bind the XAML
    to `ViewModel` by setting `BindingContext` in the code-behind file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，为了让`GoToDetails`命令生效，你必须在代码隐藏文件中通过设置`BindingContext`将XAML绑定到`ViewModel`。
- en: In this common construct, you pass in the page name to the `GoToAsync` static
    method on `Shell.Current`. The key question is, *how does it know what buddydetailspage
    is*, *given that* `buddydetailspage` *is a string?* The answer to that lies in
    *routing*, which we’ll cover next.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个常见的结构中，你将页面名称传递给`Shell.Current`上的`GoToAsync`静态方法。关键问题是，*它如何知道*buddydetailspage*是什么，*鉴于*buddydetailspage*是一个字符串？*这个答案在于*路由*，我们将在下一节中介绍。
- en: Routing
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: 'In .NET MAUI, you register your routes in `AppShell.xaml.cs`. For example,
    to connect the `buddydetailspage` string to the actual `BuddyDetailsPage,` you
    would add this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET MAUI中，你将在`AppShell.xaml.cs`中注册你的路由。例如，要将`buddydetailspage`字符串连接到实际的`BuddyDetailsPage`，你需要添加以下内容：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We’ll create a routing entry for all of the pages, including the ones we can
    access through tabs. This will give us the greatest flexibility:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为所有页面创建一个路由条目，包括我们可以通过标签访问的页面。这将给我们最大的灵活性：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now the routing works as if by magic. You tell it where you want to go, passing
    in the route, and .NET MAUI handles the navigation. Start up the program if it
    isn’t already running and tap on the **Buddies** tab. On the **Buddies** page,
    tap on the **Details** button, and hey presto! You should be on the **Buddy Details**
    page. Easy peasy.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在路由就像魔法一样工作。你告诉它你想去哪里，传递路由，.NET MAUI处理导航。如果程序尚未运行，请启动程序并轻触**Buddies**标签。在**Buddies**页面上，轻触**Details**按钮，嘿，你就在**Buddy
    Details**页面上！简单得很。
- en: It’s great to be able to move from one page to another, but often the first
    page has data that the second page needs. So, let’s look at how you send that
    data to the second page.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从一个页面导航到另一个页面是很好的，但通常第一个页面有第二个页面需要的数据。所以，让我们看看如何将数据发送到第二个页面。
- en: Passing values from page to page
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从页面到页面传递值
- en: 'When navigating from one page to another, you’ll often want to pass in a value.
    There are a few ways to do this; here are the two most common:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当从一个页面导航到另一个页面时，你通常会想要传递一个值。有几种方法可以做到这一点；这里是最常见的两种：
- en: Using the `url (?)` syntax as you might with a URL to navigate to a page on
    the web
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与在网页上导航到页面时相同的`url (?)`语法
- en: Using navigation parameters with a dictionary
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用字典传递导航参数
- en: Passing values with the url (?) syntax
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用url (?)语法传递值
- en: Let’s return to the `Buddies` page. Right now, the `Button` has a `GoToDetailsCommand`command.
    But the **Details** page needs to know which Buddy to show details about.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`Buddies`页面。目前，`Button`有一个`GoToDetailsCommand`命令。但是，**Details**页面需要知道要显示哪个Buddy的详细信息。
- en: 'We’ll modify `RelayCommand` in `ViewModel` to pass in `BuddyId`. To make this
    work, we need a `Buddy` object (which will have the `Id`). However, Buddy is just
    one of the types of users of this program, so let’s start by defining the `User`
    type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改`ViewModel`中的`RelayCommand`以传递`BuddyId`。为了使这生效，我们需要一个`Buddy`对象（它将具有`Id`）。然而，Buddy只是这个程序用户类型之一，所以让我们首先定义`User`类型：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[1] Here is the `Id` property we’ll need.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 这里是我们需要的`Id`属性。'
- en: '[2] A user may have a collection of `buddies` (we’ll come back to this).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 用户可能有一组`buddies`（我们稍后会回到这一点）。'
- en: '[3] A user may have a collection of `invitations`, which are sent out to potential
    `buddies` (we’ll come back to this too).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 用户可能有一组`invitations`，这些邀请被发送给潜在的`buddies`（我们稍后会回到这一点）。'
- en: '[4] The user has a list of `preference` objects, as we’ve seen earlier.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 用户有一个`preference`对象的列表，正如我们之前看到的。'
- en: 'The `Buddy` class derives from the `User` class. Here it is in full, though
    we won’t be using most of these properties for now:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Buddy`类继承自`User`类。以下是完整的类定义，尽管我们现在不会使用这些属性中的大多数：'
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Inheriting ObservableObject
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 继承`ObservableObject`
- en: Notice that `Buddy` is not marked with the `ObservableObject` attribute. That
    is because it inherits from `User`, which is marked as `ObservableObject`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`Buddy`类没有标记`ObservableObject`属性。这是因为它继承自标记为`ObservableObject`的`User`类。
- en: We will want to give the new page the `Id` of the `Buddy` object we’re passing
    in. We can do that using either of the methods for passing data (for example,
    the URL approach or the dictionary).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将新页面分配给传递的`Buddy`对象的`Id`。我们可以使用传递数据的方法之一（例如，URL方法或字典）来实现这一点。
- en: Passing the Buddy Id
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传递Buddy Id
- en: 'Returning to the `Id` to the `Id` using the `?` syntax:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`?`语法将`Id`返回到`Id`：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you want to pass two properties, for example, `Id` and `Name`, you concatenate
    them with `&&`. This should all be familiar to you from URLs you might use in
    a browser:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想传递两个属性，例如`Id`和`Name`，您可以使用`&&`将它们连接起来。这应该与您在浏览器中使用的URL非常熟悉：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This won’t work if we don’t have `Id` and `Name` in `BuddiesViewModel`, so
    let’s add that here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有在`BuddiesViewModel`中包含`Id`和`Name`，则这不会起作用，所以让我们在这里添加它们：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The call to `GoToAsync` will change pages to `BuddyDetailsPage` and send the
    parameters to the associated `ViewModel` (`BuddyDetailsViewModel`).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`GoToAsync`的调用将更改页面到`BuddyDetailsPage`，并将参数发送到相关的`ViewModel`（`BuddyDetailsViewModel`）。'
- en: QueryProperty
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: QueryProperty
- en: We mark up the receiving `ViewModel` with the `QueryProperty` attribute along
    with the name of the property to associate it with `ViewModel` and the string
    used in the `GoToAsync` method.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`QueryProperty`属性以及属性名称标记接收的`ViewModel`，以便将其与`ViewModel`和`GoToAsync`方法中使用的字符串关联起来。
- en: 'To make that clearer, let’s create `BuddyDetailsViewModel`, and mark it as
    `ObservableObject`. We’ll give it two properties: `Id` and `Name`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这更清晰，让我们创建`BuddyDetailsViewModel`，并将其标记为`ObservableObject`。我们将给它两个属性：`Id`和`Name`：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We want the first parameter we passed in (`id`) to be assigned to the `Id`
    property, and we want the second parameter we passed in to be assigned to the
    `Name` property. For that, we use the `QueryProperty` attribute (placed above
    the class):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将传入的第一个参数（`id`）分配给`Id`属性，希望将传入的第二个参数分配给`Name`属性。为此，我们使用`QueryProperty`属性（放置在类上方）：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that you are comfortable with the two ways to pass data, let’s take a look
    at how we can integrate that into the flow of the program.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经熟悉了两种传递数据的方式，让我们看看如何将它们集成到程序的流程中。
- en: Putting it together
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整合起来
- en: On the **Buddies** page, the user clicks on **GoToDetails**.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Buddies**页面上，用户点击**GoToDetails**。
- en: This fires the `GoToDetails` relay command in `BuddiesViewModel`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这在`BuddiesViewModel`中触发了`GoToDetails`中继命令。
- en: 'That method calls the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法调用以下方法：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This call to `GoToAsync` transfers us to `BuddyDetailsPage`, but passes in the
    two parameters (`Id` and `Name`) to `BuddyDetailsViewModel`!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`GoToAsync`调用将我们转移到`BuddyDetailsPage`，但将两个参数（`Id`和`Name`）传递给`BuddyDetailsViewModel`！
- en: '`BuddyDetailsViewModel` parses the `QueryProperty` attributes and distributes
    the values to the associated properties.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`BuddyDetailsViewModel`解析`QueryProperty`属性并将值分配给相关属性。'
- en: The net effect is that you are now on `BuddyDetailsPage` with the `Id` and `Name`
    properties in the associated `ViewModel` populated with values.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最终效果是您现在在`BuddyDetailsPage`上，与`ViewModel`关联的`Id`和`Name`属性已填充了值。
- en: To see this at work, go to the `BuddyDetailsPage.xaml` file and add two Label
    controls, one bound to `Id` and the other to `Name`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这个效果，请转到`BuddyDetailsPage.xaml`文件并添加两个标签控件，一个绑定到`Id`，另一个绑定到`Name`。
- en: 'Here’s the XAML page:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是XAML页面：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Remember to set `BindingContext` in the code-behind page.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在代码-behind页面中设置`BindingContext`。
- en: Run the program and click on the **Buddies** tab. On the **Buddies** page, click
    on **GoToDetails** You will be transferred to the **BuddiesDetails** page, and
    the two values will be displayed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序并点击**Buddies**标签。在**Buddies**页面上，点击**GoToDetails**。您将被转移到**BuddiesDetails**页面，并且将显示两个值。
- en: Stop right there
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 立即停止
- en: Make sure you understand how all this hangs together before going ahead. If
    necessary, re-read starting with the *Passing values from page to* *page* section.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，确保您理解所有这些是如何联系在一起的。如果需要，从“从页面传递到页面”部分重新阅读。
- en: Passing values with a dictionary
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字典传递值
- en: At times, you will want to pass an entire object (or more) to the receiving
    `ViewModel`. You do this by instantiating a dictionary where the key is a string,
    and the value is an object.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你将想要传递整个对象（或更多）到接收的 `ViewModel`。你这样做是通过实例化一个字典，其中键是一个字符串，值是一个对象。
- en: 'Let’s revise `GoToDetails` to take an entire `Buddy` object. First, we need
    to create a `Buddy` object and put it into `BuddyViewModel`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改 `GoToDetails` 以接受整个 `Buddy` 对象。首先，我们需要创建一个 `Buddy` 对象并将其放入 `BuddyViewModel`：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we need to create our dictionary. We can pick any arbitrary string as
    the key, and pass in the `Buddy` object (`rodrigo`) that we just created:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建我们的字典。我们可以选择任何任意的字符串作为键，并传入我们刚刚创建的 `Buddy` 对象 (`rodrigo`)：
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once again, we are redirected to the `Buddy` object itself is passed in. At
    the top of the `Buddy` object field to assign the incoming `Buddy` to, and we
    use the key from the dictionary:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们被重定向到 `Buddy` 对象本身被传入。在 `Buddy` 对象字段顶部分配传入的 `Buddy`，我们使用字典中的键：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We’ll add three properties for the page to bind to:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为页面添加三个属性以进行绑定：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Notice that `website` is a nullable string. This is because it is marked as
    `nullable` in the `Buddy` definition. To make this work, you’ll want to enable
    `nullable`, at least on this page if not for the project.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`website` 是一个可空字符串。这是因为它在 `Buddy` 定义中被标记为 `nullable`。为了使这可行，你将想要启用 `nullable`，至少在这个页面上，如果不是整个项目。
- en: 'The easiest way to manage the incoming `Buddy` object is as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 管理传入的 `Buddy` 对象的最简单方法是以下：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you go to `BuddyDetailsPage.xaml` and add a label whose text binds to `website`,
    the result will be as shown in *Figure 7**.5*:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你转到 `BuddyDetailsPage.xaml` 并添加一个文本绑定到 `website` 的标签，结果将如图 *图 7.6* 所示：
- en: '![Figure 7.6 – The Buddy Details page after passing in the Buddy object'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 在传入 Buddy 对象后的 Buddy 详情页面](img/B19723_Figure_7.6.jpg)'
- en: '](img/B19723_Figure_7.6.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 在传入 Buddy 对象后的 Buddy 详情页面](img/B19723_Figure_7.6.jpg)'
- en: Figure 7.6 – The Buddy Details page after passing in the Buddy object
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 传入 Buddy 对象后的 Buddy 详情页面
- en: Putting it together
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合起来
- en: This can, at first, be confusing enough that it is worth going through the flow
    step by step.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这一开始可能会让人感到困惑，因此值得一步一步地了解整个过程。
- en: In `BuddiesPage,` the user clicks on `GoToDetailsCommand`, which is handled
    in `BuddiesViewModel`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `BuddiesPage` 中，用户点击 `GoToDetailsCommand`，该命令在 `BuddiesViewModel` 中处理。
- en: In `ViewModel`, we have a `Buddy` property (as defined in the `Models` folder).
    The identifier for that `Buddy` object is `rodrigo`, and three of its fields are
    initialized.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ViewModel` 中，我们有一个 `Buddy` 属性（如 `Models` 文件夹中定义）。该 `Buddy` 对象的标识符是 `rodrigo`，并且初始化了它的三个字段。
- en: We then assemble a dictionary to use as the parameter to the `GoToAsync` method.
    We pass in the name of the page we want to navigate to (as recorded in the `AppShell.xaml.cs`
    file in the `Routing.RegisterRoute` method).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们组装一个字典，将其用作 `GoToAsync` 方法的参数。我们传入我们想要导航到的页面的名称（如记录在 `AppShell.xaml.cs`
    文件中的 `Routing.RegisterRoute` 方法）。
- en: We also pass in the dictionary we just created.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还传入了我们刚刚创建的字典。
- en: .NET MAUI navigates to the page, and our dictionary is routed to the associated
    `ViewModel` (`BuddyDetailsViewModel`). There, the `QueryProperty` attribute associates
    the `MyBuddy` property with `queryid`, which we used in `BuddiesPage`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 导航到页面，我们的字典通过关联的 `ViewModel` (`BuddyDetailsViewModel`) 进行路由。在那里，`QueryProperty`
    属性将 `MyBuddy` 属性与 `queryid` 关联，我们在 `BuddiesPage` 中使用了它。
- en: The property it matches is a `Buddy` type, so we can set the local properties
    with the properties from the `Buddy` object passed in (`value`).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它匹配的属性是 `Buddy` 类型，因此我们可以使用传入的 `Buddy` 对象的属性设置本地属性（`value`）。
- en: Since `BuddyDetailsPage` has `Labels` that bind to these properties in `ViewModel`,
    the right things are displayed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `BuddyDetailsPage` 有 `Labels` 绑定到 `ViewModel` 中的这些属性，所以会显示正确的内容。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have focused on how you can move from one page to another
    without using `TabBar`, by using shell navigation and routesinstead.. We also
    looked at how you can pass data from the first page to the second using either
    URL syntax or by passing a dictionary containing the object or values you want
    to send.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们重点介绍了如何在不使用 `TabBar` 的情况下从一个页面跳转到另一个页面，通过使用壳导航和路由。我们还探讨了如何使用 URL 语法或通过传递包含您想要发送的对象或值的字典来从第一个页面传递数据到第二个页面。
- en: In the next chapter, we will examine storing and retrieving data.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨存储和检索数据。
- en: Quiz
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问答
- en: Where do you define `TabBar`?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在哪里定义 `TabBar`？
- en: What are the three properties of `TabBar ShellContent`?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TabBar ShellContent` 的三个属性是什么？'
- en: Where are routes registered?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由在哪里注册？
- en: What is the method for navigating to another page?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到另一个页面的方法是什么？
- en: What are the ways we’ve seen to pass data to a page?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们都看到了哪些方法可以将数据传递到页面？
- en: You try it
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你试试看
- en: Modify `RelayCommand Submit` in `LoginViewModel` to display the progress bar
    and then navigate to the **Buddies** page. Pass in the username and password,
    first as strings, then as a dictionary. Temporarily modify the **Buddies** page
    to display the values passed in.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LoginViewModel` 中修改 `RelayCommand Submit` 以显示进度条，然后导航到**好友**页面。首先以字符串的形式传入用户名和密码，然后以字典的形式传入。暂时修改**好友**页面以显示传入的值。
