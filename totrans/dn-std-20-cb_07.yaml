- en: Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络编程
- en: 'In this chapter, we will be looking at these recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下食谱：
- en: A library that displays an IP address and the name using sockets
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用套接字显示IP地址和名称的库
- en: Creating a classic Windows application to use the library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的经典Windows应用程序
- en: Creating a library that sends mail
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个发送邮件的库
- en: Creating a WPF application to use the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的WPF应用程序
- en: Creating a library to call a REST API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于调用REST API的库
- en: Creating an ASP.NET MVC application to use the library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的ASP.NET MVC应用程序
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备基本的C#知识。他们还应了解如何使用Visual Studio，使用NuGet安装包，以及在其他项目中引用项目中的库。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter07](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter07)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter07](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter07)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际运行情况：
- en: '[https://goo.gl/Wj2VD9](https://goo.gl/Wj2VD9)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/Wj2VD9](https://goo.gl/Wj2VD9)'
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Microsoft .NET Framework provides you with a set of class libraries that make
    it easy to work with internet services. These libraries allow you to easily integrate
    services with your applications. In this chapter, we will be using a few of these
    classes within the System.Net namespace. We will be looking at how to get these
    into a .NET Standard 2.0 library, and use it across different flavors of .NET
    applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft .NET Framework为您提供了一套类库，使您能够轻松地与互联网服务一起工作。这些库允许您轻松地将服务集成到您的应用程序中。在本章中，我们将使用System.Net命名空间中的几个这些类。我们将探讨如何将这些类放入.NET
    Standard 2.0库中，并在不同的.NET应用程序版本中使用它。
- en: A library that displays an IP address and the name using sockets
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用套接字显示IP地址和名称的库
- en: In this recipe, we will be building a .NET Standard 2.0 class library that displays
    the IP address of the current machine you are on. Then, we will be creating an
    application that uses the library.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将构建一个.NET Standard 2.0类库，该类库可以显示当前机器的IP地址。然后，我们将创建一个使用该库的应用程序。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest Visual Studio 2017 installed and configured for
    creating a .NET Standard 2.0 library before you start building the library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建库之前，请确保已安装并配置了最新的Visual Studio 2017，用于创建.NET Standard 2.0库。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | Project to create a project.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“项目”以创建项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left
    pane and select Visual Studio Solutions. In the right pane, select Blank Solution.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择“Visual Studio解决方案”。在右侧窗格中，选择“空白解决方案”。
- en: 'In the Name: textbox, type `Chapter7.Networking` and in the Location: textbox
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，键入`Chapter7.Networking`，并在“位置”文本框中选择下拉框中的路径或单击“浏览...”按钮定位路径：
- en: '![](img/2b9e3189-dc93-40b8-9d4e-caf36033eb12.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b9e3189-dc93-40b8-9d4e-caf36033eb12.png)'
- en: Click OK.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的解决方案资源管理器（*Ctrl* + *Alt* + *L*）应如下所示：
- en: '![](img/838c1674-4e35-4551-94fd-6e6f5d7d6164.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/838c1674-4e35-4551-94fd-6e6f5d7d6164.png)'
- en: Now, click the right mouse button on the `Chapter7.Networking` label in the
    Solution Explorer and select Add | New Project.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中右键单击`Chapter7.Networking`标签，并选择“添加”|“新建项目”。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点。
- en: 'Select .NET Standard in the left pane and Class Library (.NET Standard) in
    the right pane:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库 (.NET Standard)：
- en: '![](img/21c4f4da-9275-4c60-8a5b-5142ed401e7a.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21c4f4da-9275-4c60-8a5b-5142ed401e7a.png)'
- en: 'In the Name: textbox, type `Chapter7.Networking.ReadIPLib`, leave the other
    defaults as is, and click OK:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，键入`Chapter7.Networking.ReadIPLib`，保留其他默认设置，然后单击“确定”：
- en: '![](img/77cd7188-bea5-46f5-b06a-e64fa211d5e4.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77cd7188-bea5-46f5-b06a-e64fa211d5e4.png)'
- en: 'Now the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应如下所示：
- en: '![](img/a3be1d0b-3751-454c-98fe-19073dd02b04.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3be1d0b-3751-454c-98fe-19073dd02b04.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `IPReader.cs`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，并按*F2*将文件重命名为`IPReader.cs`。
- en: Answer Yes to the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认对话框中询问是否重命名类名时，请回答“是”。
- en: Double-click on the `IPReader.cs` label in the Solution Explorer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中双击`IPReader.cs`标签。
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s create this `public` method inside the `IPReader` class:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在`IPReader`类中创建这个`public`方法：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查语法。
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 11, we added a blank solution and added a .NET Standard 2.0 class
    library to the solution. In these steps, we have given proper names to the solution
    and the project. Then, in step 12 we changed the name of the default `Class1.cs`
    generated from Visual Studio. In step 15, we added the required `using` directive
    to the code. We have mainly used `System.Net` and `System.Net.Sockets` to access
    the required classes and read the IP address, and then added the `System.Collecitons.Generic`
    namespace to create a generic `string List` to hold the IP addresses.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到11中，我们添加了一个空白解决方案，并将一个.NET Standard 2.0类库添加到解决方案中。在这些步骤中，我们已为解决方案和项目赋予了适当的名称。然后，在第12步中，我们将Visual
    Studio生成的默认`Class1.cs`的名称进行了更改。在第15步中，我们向代码中添加了所需的`using`指令。我们主要使用了`System.Net`和`System.Net.Sockets`来访问所需的类并读取IP地址，然后添加了`System.Collections.Generic`命名空间以创建一个通用的`string
    List`来存储IP地址。
- en: In step 16, we added a public method that will read all the available IP addresses
    of the local machine you are on. In the first line, we stored the host name of
    the system in a variable and in the second line we used it to get the host addresses.
    Then, we created an empty list to store the IP addresses.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在第16步中，我们添加了一个公共方法，该方法将读取您所在本地计算机上的所有可用IP地址。在第一行中，我们将系统主机名存储在一个变量中，在第二行中，我们使用它来获取主机地址。然后，我们创建了一个空列表来存储IP地址。
- en: After that, we used a `foreach` loop to go through all the IP addresses we found
    and store them in the list after checking whether it was an IP address on the
    internal network. Finally, we returned the list of IP addresses we stored.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用`foreach`循环遍历所有找到的IP地址，并在检查是否为内部网络上的IP地址后，将它们存储在列表中。最后，我们返回存储的IP地址列表。
- en: In step 17, we did a quick build to check syntax.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第17步中，我们进行了快速构建以检查语法。
- en: Creating a classic Windows application to use the library
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个经典Windows应用程序以使用库
- en: In this recipe, we will be creating a classic Windows application to use the
    library. We will be creating a UI using the Visual Studio designer, adding code
    to use the library, and displaying the list of IP addresses picked from the library
    itself.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个经典Windows应用程序来使用库。我们将使用Visual Studio设计器创建UI，添加代码以使用库，并显示从库本身选择的IP地址列表。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest version of Visual Studio 2017 and have completed
    the previous recipe. We will be using the solution we built in the previous recipe.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您拥有Visual Studio 2017的最新版本，并且已经完成了前面的配方。我们将使用前面配方中构建的解决方案。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution or
    press *Ctrl* + *Shift* + *O* and select the `Chapter7.Networkings` solution.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开前面配方中的解决方案。点击 文件 | 打开 | 打开项目/解决方案 或按 *Ctrl* + *Shift* + *O* 并选择`Chapter7.Networkings`解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check everything is fine.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查一切是否正常。
- en: Now, click on the `Chapter7.Networking` solution label. Click File | Add | New
    Project.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`Chapter7.Networking`解决方案标签。点击 文件 | 添加 | 新项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left pane.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的Visual C#节点。
- en: 'Select Windows Classic Desktop and select Windows Forms App (.NET Framework) in
    the right pane:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择Windows经典桌面，并选择Windows窗体应用程序(.NET Framework)：
- en: '![](img/2857fe40-c3c8-4da0-9238-566772d8e242.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2857fe40-c3c8-4da0-9238-566772d8e242.png)'
- en: 'In the Name: textbox, type `Chapter7.Networking.IPListWindows` as the name
    of the project. The rest of the fields can be left at the defaults:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，将项目名称输入为`Chapter7.Networking.IPListWindows`。其余字段可以保留默认值：
- en: '![](img/f1a83087-173a-46b6-8a26-000f925c4c92.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f1a83087-173a-46b6-8a26-000f925c4c92.png)'
- en: Click OK.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/1aad3cd0-98bf-4ea6-985d-b94f311704f2.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1aad3cd0-98bf-4ea6-985d-b94f311704f2.png)'
- en: Click the right mouse button on the References label in `Chapter7.Networking.IPListWindows`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter7.Networking.IPListWindows`中的“引用”标签上点击鼠标右键。
- en: Select Add Reference.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“添加引用”。
- en: 'In the Reference Manager, click on the Projects label in the right pane:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器中，点击右侧面板中的“项目”标签：
- en: '![](img/ad375516-6a63-4fac-8ea3-555df7fdecca.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad375516-6a63-4fac-8ea3-555df7fdecca.png)'
- en: Check the `Chapter7.Networking.ReadIPLib` project in the left pane.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中检查`Chapter7.Networking.ReadIPLib`项目。
- en: Click OK.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now click on the `Form1.cs` from the project list and rename it to `MainForm.cs`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击项目列表中的`Form1.cs`并将其重命名为`MainForm.cs`。
- en: Answer Yes to the confirmation dialog box.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对确认对话框回答“是”。
- en: Now click on the MainForm.cs[Design] tab.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击“MainForm.cs[设计]”选项卡。
- en: 'From the toolbox, add a Button control and a ListBox control to the MainWindow
    form:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具箱中，将一个按钮控件和一个列表框控件添加到MainWindow窗体：
- en: '![](img/4c3b684b-5859-46da-8353-f7f9fb3d5ccd.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4c3b684b-5859-46da-8353-f7f9fb3d5ccd.png)'
- en: Select the button and press *F4* to load the Properties window.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择按钮并按*F4*加载属性窗口。
- en: 'Now change the following properties:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在更改以下属性：
- en: '| **Control** | **Property** | **Value** |'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **控件** | **属性** | **值** |'
- en: '| Form | Text | `IP List` |'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 表单 | 文本 | `IP 列表` |'
- en: '| Button | Name | `ShowButton` |'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 名称 | `ShowButton` |'
- en: '| Button | Text | `Show IP List` |'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 文本 | `显示IP列表` |'
- en: '| ListBox | Name | `IPListBox` |'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 列表框 | 名称 | `IPListBox` |'
- en: Double-click on the Show IP List button to reach the code window.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击“显示IP列表”按钮以到达代码窗口。
- en: Scroll up till you reach the `using` directives.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上滚动，直到你到达`using`指令。
- en: 'Add the following `using` directive to the last line of the directives:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`using`指令添加到指令的最后一行：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, again scroll down till you reach the `ShowButton_Click()` method.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次向下滚动，直到你到达`ShowButton_Click()`方法。
- en: 'Type the following code inside the method:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法内部输入以下代码：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now press *F5* to debug the code.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按*F5*调试代码。
- en: Click on the Show IP List button.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“显示IP列表”按钮。
- en: 'You should see output like this:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到如下输出：
- en: '![](img/02f98440-554a-4201-bbbb-59898822dd99.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/02f98440-554a-4201-bbbb-59898822dd99.png)'
- en: Close the window.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭窗口。
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 10, we opened the previously built solution and did a quick build
    to check everything was intact. Then, we added a Classic Windows Forms application
    to the solution. In steps 11 to 14, we added the reference to the .NET Standard
    2.0 class library that we built in the previous recipe. In steps 15 to 20, we
    renamed the main window and then we added the UI. Finally, we changed the properties
    of the controls in a meaningful way.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到10中，我们打开了之前构建的解决方案并快速构建以检查一切是否完好。然后，我们向解决方案中添加了一个经典Windows窗体应用程序。在步骤11到14中，我们添加了对我们在上一个菜谱中构建的.NET
    Standard 2.0类库的引用。在步骤15到20中，我们重命名了主窗口并添加了UI。最后，我们以有意义的方式更改了控件属性。
- en: In step 23, we referenced the class library in the code. In step 25, we created
    an instance of the `IPReader` class and then used the `GetMyIPAddress()` method.
    In the same line, we output the return `List<string>` as an array and used the
    `ListBox`, `AddRange` method to populate the list box.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤23中，我们在代码中引用了类库。在步骤25中，我们创建了一个`IPReader`类的实例，然后使用了`GetMyIPAddress()`方法。在同一行中，我们将返回的`List<string>`作为数组输出，并使用`ListBox`和`AddRange`方法填充列表框。
- en: In steps 26 to 29, we executed the code and tested the results.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤26到29中，我们执行了代码并测试了结果。
- en: Creating a library that sends mail
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个发送邮件的库
- en: In this recipe, we will be looking at another area of the `System.Net` namespace.
    We will be using it to create and send an email. Mainly, we will be looking at
    the `SmptClient` class to do the hard work for us.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨`System.Net`命名空间中的另一个区域。我们将使用它来创建和发送电子邮件。主要，我们将查看`SmtpClient`类来为我们做艰苦的工作。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest version of Visual Studio 2017 and all the updates
    installed. We will be building a .NET Standard 2.0 library to send an email.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装Visual Studio 2017的最新版本和所有更新。我们将构建一个.NET Standard 2.0库来发送电子邮件。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open Visual Studio 2017.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Project to create a project.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目 以创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left
    pane and select Visual Studio Solutions. In the right pane, select Blank Solution.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧面板中的“其他项目类型”节点，并选择Visual Studio解决方案。在右侧面板中，选择空白解决方案。
- en: 'In the Name: textbox, type `Chapter7.MailBox` and in the Location: textbox
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，键入`Chapter7.MailBox`，并在“位置”文本框中选择下拉框中的路径或单击“浏览...”按钮以定位路径：
- en: '![](img/93cddef5-a4c6-4865-b65a-94eb88d7dd2e.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93cddef5-a4c6-4865-b65a-94eb88d7dd2e.png)'
- en: Click OK.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/d5cd10dd-f7bd-49f3-827a-f8acf459cbb8.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d5cd10dd-f7bd-49f3-827a-f8acf459cbb8.png)'
- en: Now, click the right mouse button on the `Chapter7.MailBox` label in the Solution
    Explorer and select Add | New Project.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的`Chapter7.MailBox`标签上右击，然后选择“添加”|“新建项目”。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开 Visual C# 节点。
- en: 'Select .NET Standard in the left pane and Class Library (.NET Standard) in
    the right pane:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中选择.NET Standard，在右侧面板中选择类库 (.NET Standard)：
- en: '![](img/0f43fcd3-fcb5-4047-8fff-49de0e96d419.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0f43fcd3-fcb5-4047-8fff-49de0e96d419.png)'
- en: 'In the Name: textbox, type `Chapter7.MailBox.MailerLib`, leave the other defaults
    as is, and click OK:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，键入`Chapter7.MailBox.MailerLib`，保留其他默认设置，然后单击“确定”：
- en: '![](img/5af711fc-96d5-4897-be09-8e4001ea0741.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5af711fc-96d5-4897-be09-8e4001ea0741.png)'
- en: 'Now the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/b99018d5-a3eb-45eb-9804-a1ddfb0f9ce8.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b99018d5-a3eb-45eb-9804-a1ddfb0f9ce8.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `SendMail.cs`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，然后按*F2*键将文件重命名为`SendMail.cs`。
- en: Answer Yes to the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对确认对话框中的问题回答“是”，以将类名也重命名。
- en: Now double-click on the `SendMail.cs` label in the Solution Explorer.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击`SendMail.cs`标签。
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following four properties to the `SendMail` class:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下四个属性添加到`SendMail`类中：
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, add this `public` method to create and send mail:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加以下`public`方法以创建和发送邮件：
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按*Ctrl* + *Shift* + *B*进行快速构建。
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 11, we created a blank solution and added a .NET Standard 2.0
    class library project to it. Then, we properly named the solution and its project.
    In steps 12 to 14, we renamed the default class generated from Visual Studio.
    In step 15, we added the necessary namespaces to send a mail in the `using` directive
    section. In step 16, we added four properties to the main class. These properties
    will store the mail addresses, subject, and the body of the mail.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 11 中，我们创建了一个空白解决方案，并向其中添加了一个 .NET Standard 2.0 类库项目。然后，我们正确地命名了解决方案及其项目。在步骤
    12 到 14 中，我们将 Visual Studio 生成的默认类重命名。在步骤 15 中，我们在 `using` 指令部分添加了必要的命名空间以发送邮件。在步骤
    16 中，我们在主类中添加了四个属性。这些属性将存储邮件地址、主题和邮件正文。
- en: In step 17, we wrote the actual code to prepare and send the mail. In the first
    two lines, we used the from and to addresses and converted them to `MailAddress`
    type. Then, we created a `MailMessage` and attached the body and the subject,
    along with the addresses. Then, we created the network credentials required to
    access the given SMTP server.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 17 中，我们编写了准备和发送邮件的实际代码。在前两行中，我们使用了发件人和收件人地址，并将它们转换为`MailAddress`类型。然后，我们创建了一个`MailMessage`，并附加了正文和主题，以及地址。然后，我们创建了访问给定
    SMTP 服务器的网络凭证。
- en: Then, we created an `SmtpClient` object, attached the credentials, and sent
    the mail. Finally, we did a quick build to check the syntax.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了一个`SmtpClient`对象，附加了凭证并发送了邮件。最后，我们快速构建以检查语法。
- en: Creating a WPF application to use the library
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 WPF 应用程序以使用库
- en: In this recipe, we will be creating a Windows Presentation Foundation application
    to use the library we have created. We will be creating a UI to send an email
    using the library.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个 Windows 表单应用程序来使用我们创建的库。我们将创建一个用户界面，使用库发送电子邮件。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the previous recipe for sending an email. If you
    have completed it, open it up and do a quick build to check everything works fine.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了发送电子邮件的先前食谱。如果你已经完成，请打开它并快速构建以检查一切是否正常工作。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution or
    press *Ctrl* + *Shift* + *O* and select the `Chapter7.MailBox` solution.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开上一个菜谱中的解决方案。点击 文件 | 打开 | 打开项目/解决方案 或按 *Ctrl* + *Shift* + *O* 并选择 `Chapter7.MailBox`
    解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check everything is fine.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建以检查一切是否正常。
- en: Click on the `Chapter7.MailBox` solution label. Click File | Add | New Project.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Chapter7.MailBox` 解决方案标签。点击 文件 | 添加 | 新项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left pane.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 添加新项目 模板对话框中，展开左侧窗格中的 Visual C# 节点。
- en: 'Select Windows Classic Desktop and select WPF App (.NET Framework) in the right
    pane:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择 Windows Classic Desktop 并选择 WPF 应用 (.NET Framework)：
- en: '![](img/bb2b6901-75b8-4ee1-9fa1-81519d178fa5.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb2b6901-75b8-4ee1-9fa1-81519d178fa5.png)'
- en: 'Now, in the Name: textbox type `Chapter7.MailBox.WPFMail` as the name of the
    project. The rest of the fields can be left at the defaults:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 名称：文本框中输入 `Chapter7.MailBox.WPFMail` 作为项目的名称。其余字段可以保留默认值：
- en: '![](img/82fb0d48-1ada-4117-946f-012ea816ac81.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82fb0d48-1ada-4117-946f-012ea816ac81.png)'
- en: Click OK.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按 *Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/1fb688fa-0973-4347-9a75-36dfdb59b54a.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1fb688fa-0973-4347-9a75-36dfdb59b54a.png)'
- en: Click the right mouse button on the References label in `Chapter7.MailBox.WPFMail`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter7.MailBox.WPFMail` 上的 引用 标签上单击鼠标右键。
- en: Select Add Reference.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择添加引用。
- en: 'In the Reference Manager, click on the Projects label in the right pane:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器中，点击右侧窗格中的 项目 标签：
- en: '![](img/574883d9-dcd3-4406-90ff-e5d2a36efa34.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/574883d9-dcd3-4406-90ff-e5d2a36efa34.png)'
- en: Check the `Chapter7.MailBox.MailerLib` project in the left pane.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中检查 `Chapter7.MailBox.MailerLib` 项目。
- en: Click OK.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now click on the `MainWindow.xaml` tab.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 `MainWindow.xaml` 选项卡。
- en: 'From the toolbox, add four TextBox controls and a Button control to the MainWindow
    form. Arrange them as shown:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具箱中，向 MainWindow 表单添加四个文本框控件和一个按钮控件。按照以下方式排列：
- en: '![](img/58afb945-b867-48b4-bfc4-d8c2a4efca3b.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58afb945-b867-48b4-bfc4-d8c2a4efca3b.png)'
- en: Select the TextBox and press *F4* to load the Properties window.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文本框并按 *F4* 加载属性窗口。
- en: 'Now change the following properties (from the top as per the previous UI):'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在更改以下属性（按照上一个 UI 中的顺序从顶部开始）：
- en: '| **Control** | **Property** | **Value** |'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **控件** | **属性** | **值** |'
- en: '| TextBox | Name | `FromTextBox` |'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 名称 | `FromTextBox` |'
- en: '| TextBox | Text | `From Address` |'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 文本 | `发件人地址` |'
- en: '| TextBox | Name | `ToTextBox` |'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 名称 | `ToTextBox` |'
- en: '| TextBox | Text | `To Address` |'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 文本 | `收件人地址` |'
- en: '| TextBox | Name | `SubjectTextBox` |'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 名称 | `SubjectTextBox` |'
- en: '| TextBox | Text | `Subject` |'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 文本 | `主题` |'
- en: '| TextBox | Name | `BodyTextBox` |'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 名称 | `BodyTextBox` |'
- en: '| TextBox | Text | `Body` |'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 文本 | `正文` |'
- en: '| TextBox | AcceptReturn (*turning on this property will make the text box
    multi-line*) | True |'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 接受回车 (*开启此属性将使文本框多行*) | 是 |'
- en: '| Button | Name | `SendButton` |'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 名称 | `SendButton` |'
- en: '| Button | Text | `Send` |'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 文本 | `发送` |'
- en: 'Now your UI should look like this:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的 UI 应该看起来像这样：
- en: '![](img/fcb61820-7c21-481e-b69e-becef42cf0c5.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcb61820-7c21-481e-b69e-becef42cf0c5.png)'
- en: Double-click on the Send button to open up the code window.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击发送按钮以打开代码窗口。
- en: Scroll up till you reach the `using` directives.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上滚动，直到你到达 `using` 指令。
- en: 'Add the following `using` directive to the last line of the directives:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `using` 指令添加到指令的最后一行：
- en: '[PRE7]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Scroll down until you reach the `SendButton_Click()` method and add the following
    code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到 `SendButton_Click()` 方法，并添加以下代码：
- en: '[PRE8]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make sure you have changed the required credentials in the library for your
    SMTP server.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已更改库中 SMTP 服务器所需的凭据。
- en: 'Let''s test our application by pressing *F5*:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *F5* 来测试我们的应用程序：
- en: '![](img/1c961489-ef1a-4231-9c84-34e124f7920b.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c961489-ef1a-4231-9c84-34e124f7920b.png)'
- en: Click OK and close the window.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定并关闭窗口。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 14, we opened the solution with the library. Then, we added a
    WPF application project to the solution. Later, we added the reference to the
    class library. In steps 16 to 20, we built the UI and changed a few properties.
    In step 22, we created the reference to the library at the code level.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 14 中，我们打开了带有库的解决方案。然后，我们将 WPF 应用程序项目添加到解决方案中。稍后，我们添加了对类库的引用。在步骤 16 到
    20 中，我们构建了 UI 并更改了一些属性。在步骤 22 中，我们在代码级别创建了到库的引用。
- en: Finally, we added the code for a button click, which is straightforward, created
    an instance of the `SendMail` class, and then populated the properties from the
    UI itself. Finally, in steps 24 and 25 we tested the output.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了按钮点击的代码，这是直接的，创建了一个`SendMail`类的实例，然后从UI本身填充了属性。最后，在步骤24和25中测试了输出。
- en: Creating a library to call a REST API
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个库来调用REST API
- en: In this recipe, we will be looking at a .NET Standard 2.0 library that calls
    a REST API. RESTful APIs are services that allow you to access its functionality
    through HTTP. We will be using the `System.Net.Http` namespace inside the library
    to send a message to an API and get back the results.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将查看一个调用REST API的.NET Standard 2.0库。RESTful API是允许你通过HTTP访问其功能的服务。我们将在库中使用`System.Net.Http`命名空间向API发送消息并获取结果。
- en: Getting ready
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest version of Visual Studio 2017\. Also make sure
    you have a basic understanding of accessing a web service, what a `GET` method
    is, what a `POST` method is, and so on. We will be using a test API service provided
    by `JSONPlaceHolder`. It's a simple REST API test bed for developers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你有Visual Studio 2017的最新版本。同时确保你有一个基本的了解，如何访问Web服务，什么是`GET`方法，什么是`POST`方法等等。我们将使用由`JSONPlaceHolder`提供的测试API服务。它是一个简单的REST
    API测试平台，供开发者使用。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Project to create a project.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件 | 新建 | 项目”来创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left
    pane and select Visual Studio Solutions. In the right pane, select Blank Solution.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择“Visual Studio解决方案”。在右侧窗格中，选择“空白解决方案”。
- en: 'In the Name: textbox, type `Chapter7.RestAPI` and in the Location: textbox
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中输入`Chapter7.RestAPI`，在“位置：”文本框中选择下拉框中的路径或点击“浏览...”按钮定位路径：
- en: '![](img/e66020c2-8865-4489-b4af-ae36a24d6f68.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e66020c2-8865-4489-b4af-ae36a24d6f68.png)'
- en: Click OK.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/da4df78c-8fa1-4e53-9303-e29983c2f6c9.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/da4df78c-8fa1-4e53-9303-e29983c2f6c9.png)'
- en: Now, click the right mouse button on the `Chapter7.RestAPI` label in the Solution
    Explorer and select Add | New Project.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的`Chapter7.RestAPI`标签上右击鼠标，然后选择“添加 | 新建项目”。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点。
- en: 'Select .NET Standard in the left pane and Class Library (.NET Standard) in
    the right pane:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库(.NET Standard)：
- en: '![](img/59a03e8e-44af-4782-a237-64e336b958eb.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59a03e8e-44af-4782-a237-64e336b958eb.png)'
- en: 'Now, in the Name: textbox type `Chapter7.RestAPI.RestLib`, leave the other
    defaults as they are, and click OK:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中输入`Chapter7.RestAPI.RestLib`，保留其他默认设置，然后点击“确定”：
- en: '![](img/85f42896-0ce2-43ad-87c6-be4f6161438b.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/85f42896-0ce2-43ad-87c6-be4f6161438b.png)'
- en: 'Now the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/2b97c05d-429c-4c5a-9158-ed5bbacf5b1b.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2b97c05d-429c-4c5a-9158-ed5bbacf5b1b.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `PostsReader.cs`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，然后按*F2*将文件重命名为`PostsReader.cs`。
- en: Answer Yes to the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对确认对话框中的将类名重命名的问题回答“是”。
- en: Now, double-click on the `PostsReader.cs` label in the Solution Explorer.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击`PostsReader.cs`标签。
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE9]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, create this class-wide `private` variable to hold the URL:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个用于存储URL的类级`private`变量：
- en: '[PRE10]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s create the default constructor to update the previous variable:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建默认构造函数来更新之前的变量：
- en: '[PRE11]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, let''s add the method to read from the REST service:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们添加从REST服务读取的方法：
- en: '[PRE12]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查语法。
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 11, we created an empty solution. Then we added a .NET Standard
    2.0 library to that solution. Again, as a good practice we properly named the
    solution and the class library project. In steps 12 and 13, we changed the name
    of the default `Class1.cs` created by Visual Studio. In step 15, we added `using`
    directives required for our task. In step 16, we created a class-wide private
    variable to hold the service URL. Then, in step 16 we created the default constructor
    with a `string` parameter that updates the private variable in step 15.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 11 中，我们创建了一个空解决方案。然后我们向该解决方案添加了一个 .NET Standard 2.0 库。再次，作为一个好的实践，我们正确地命名了解决方案和类库项目。在步骤
    12 和 13 中，我们更改了 Visual Studio 默认创建的 `Class1.cs` 的名称。在步骤 15 中，我们添加了执行任务所需的 `using`
    指令。在步骤 16 中，我们创建了一个类级别的私有变量来保存服务 URL。然后，在步骤 16 中，我们创建了一个带有 `string` 参数的默认构造函数，该参数更新了步骤
    15 中的私有变量。
- en: In step 18, we created the `public` method that did the actual work of reading
    the RESTful API. In the first line of code, we created a `string` variable that
    held the output from the service. Then, we created an instance of the `HttpClient`
    class inside a `using` statement. This is a good practice that will make sure
    the class is destroyed after we exit the `using` statement.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 18 中，我们创建了执行读取 RESTful API 实际工作的 `public` 方法。在代码的第一行，我们创建了一个 `string` 变量，用于保存服务的输出。然后，我们在
    `using` 语句内部创建了一个 `HttpClient` 类的实例。这是一个好的实践，它将确保在退出 `using` 语句后销毁该类。
- en: Then we populated the **Universal Resource Indicator** (**URI**) to the service.
    After that, we did the actual call to the service and stored it inside a `HttpResponseMessage`
    variable. Finally, we got the output from the response and returned the output.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 **通用资源标识符** (**URI**) 填充到服务中。之后，我们实际调用服务，并将结果存储在 `HttpResponseMessage`
    变量中。最后，我们从响应中获取输出并返回输出。
- en: Creating an ASP.NET MVC application to use the library
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的 ASP.NET MVC 应用程序
- en: In this recipe, we will be creating an ASP.NET MVC application to use the library
    we have created.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个 ASP.NET MVC 应用程序来使用我们创建的库。
- en: Getting ready
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: Make sure you have completed the previous recipe. If not, you need to complete
    it before going through this one. If you have already done it, open it and do
    a quick build before we start.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了上一个菜谱。如果没有，你需要在此之前完成它。如果你已经完成了，请打开它，在我们开始之前进行快速构建。
- en: How to do it..
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution or
    press *Ctrl* + *Shift* + *O* and select the `Chapter7.RestAPI` solution.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个菜谱中的解决方案。点击“文件”|“打开”|“打开项目/解决方案”或按 *Ctrl* + *Shift* + *O* 并选择 `Chapter7.RestAPI`
    解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check everything is fine.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建以检查一切是否正常。
- en: Now click on the `Chapter7.RestAPI` solution label. Click File | Add | New Project.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击“Chapter7.RestAPI”解决方案标签。点击“文件”|“添加”|“新建项目”。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left pane.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的“Visual C#”节点。
- en: 'Select Web and select ASP.NET Web Application (.NET Framework) in the right
    pane:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择 Web，然后选择 ASP.NET Web 应用程序 (.NET Framework)：
- en: '![](img/faf4537a-9012-4a0b-90b3-6d565ab89c6a.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faf4537a-9012-4a0b-90b3-6d565ab89c6a.png)'
- en: 'Now, in the Name: textbox type `Chapter7.RestAPI.RestMVC` as the name and leave
    the Location: textbox at its default value:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中输入 `Chapter7.RestAPI.RestMVC` 作为名称，并将“位置：”文本框保留为其默认值：
- en: '![](img/5198b734-2d06-44ed-867f-cb7ca9c4d757.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5198b734-2d06-44ed-867f-cb7ca9c4d757.png)'
- en: In the New ASP.NET Web Application dialog box, select Empty from the template
    list.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建 ASP.NET Web 应用程序”对话框中，从模板列表中选择“空”。
- en: 'Select MVC for the Add folders and core references for: option:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“MVC”作为“添加文件夹和核心引用”选项：
- en: '![](img/2536cab0-2ef4-4409-9fb6-b89acef01432.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2536cab0-2ef4-4409-9fb6-b89acef01432.png)'
- en: Leave the rest as is and click OK to create the default ASP.NET MVC Web application
    template.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其他设置不变，然后点击“确定”以创建默认的 ASP.NET MVC Web 应用程序模板。
- en: 'Now Solution Explorer should look like this:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/9812b404-a8a7-46c2-a28a-4ec6f9e397e0.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9812b404-a8a7-46c2-a28a-4ec6f9e397e0.png)'
- en: Now, click the right mouse button on the References label under the `Chapter7.RestAPI.RestMVC`
    project and select Add Reference.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击 `Chapter7.RestAPI.RestMVC` 项目下的“引用”标签，并选择“添加引用”。
- en: 'In the Reference Manager dialog box, select Projects in the left pane and select
    `Chapter7.RestAPI.RestLib` in the right pane:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“引用管理器”对话框中，在左侧窗格中选择“项目”，并在右侧窗格中选择 `Chapter7.RestAPI.RestLib`：
- en: '![](img/c72f1dd8-5969-4779-a36d-7bd41ffe9ce7.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c72f1dd8-5969-4779-a36d-7bd41ffe9ce7.png)'
- en: Click OK.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, click the right mouse button on the `Controllers` folder inside the `Chapter7.RestAPI.RestMVC`
    project.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Chapter7.RestAPI.RestMVC`项目中的“Controllers”文件夹内，右键单击“Controllers”文件夹。
- en: Select Add | Controller.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“添加”|“控制器”。
- en: 'In the Add Scaffold dialog box, select MVC 5 Controller - Empty from the template
    list and click Add:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加Scaffold”对话框中，从模板列表中选择“MVC 5 Controller - Empty”并点击“添加”：
- en: '![](img/57bc63dd-4140-4a3e-9d76-35f34aa6fdd8.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57bc63dd-4140-4a3e-9d76-35f34aa6fdd8.png)'
- en: 'Now, in the Add Controller dialog box type `HomeController` in the Controller
    name: textbox:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“添加控制器”对话框中，在“控制器名称”文本框中输入`HomeController`：
- en: '![](img/5b6a25b8-c003-4ece-b956-5cdfa3410f68.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5b6a25b8-c003-4ece-b956-5cdfa3410f68.png)'
- en: Click Add.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”。
- en: Double-click on the `HomeController.cs` label under the `Controllers` folder.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击“Controllers”文件夹下的`HomeController.cs`标签。
- en: In the code window, click the right mouse button on the `Index()` method name
    and select Add View.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，右键单击`Index()`方法名称，并选择“添加视图”。
- en: 'Leave the defaults in the Add View dialog box and click Add:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加视图”对话框中保留默认设置，然后点击“添加”：
- en: '![](img/68ce1334-981b-46ac-a75b-5da006e03360.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/68ce1334-981b-46ac-a75b-5da006e03360.png)'
- en: Click on the `HomeController.cs` tab in the code window.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中点击`HomeController.cs`标签页。
- en: 'Add this `using` directive at the top of the code, next to the last line of
    all the directives:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码顶部，紧邻所有指令的最后一行旁边添加此`using`指令：
- en: '[PRE13]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now change the `default Index()` action to the following:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将`default Index()`动作更改为以下内容：
- en: '[PRE14]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following code inside the `Index()` method:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Index()`方法内部添加以下代码：
- en: '[PRE15]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s open up the `Index.cshtml` file and add the following code beneath
    the `<h2>Index</h2>` tag:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们打开`Index.cshtml`文件，并在`<h2>Index</h2>`标签下方添加以下代码：
- en: '[PRE16]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, make sure you have set your MVC project as the default project.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，确保您已将MVC项目设置为默认项目。
- en: 'Press *F5* and you should see an output like this:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*键，你应该会看到如下输出：
- en: '![](img/ed71174e-1108-42fb-ad57-bb4071e63887.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed71174e-1108-42fb-ad57-bb4071e63887.png)'
- en: How it works...
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In steps 1 to 11, we opened the solution and added an ASP.NET MVC project. Then,
    we gave a proper name to the project. In steps 12 and 13, we added the reference
    to the library we built in the previous recipe. In steps 16 to 18, we added an
    empty controller to the project. Then, in steps 21 and 22 we added a view to the
    `Index()` action in the `HomeController`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到11中，我们打开了解决方案并添加了一个ASP.NET MVC项目。然后，我们为项目命名。在步骤12和13中，我们添加了之前食谱中构建的库的引用。在步骤16到18中，我们向项目中添加了一个空控制器。然后，在步骤21和22中，我们在`HomeController`中添加了一个视图到`Index()`动作。
- en: In step 23, we added the code-level reference to the library itself and added
    two more namespaces required for our task. In step 24, we changed the `Index()`
    action to an `async` method. This is required since we will be using an `async`
    method from the library itself. In step 26, we created the service URL for our
    test bed. Then, we created an instance of the `PostsReader` class. In the third
    line, we used the `GetPostById()` method to get the result from the service. Again,
    in the fourth line of code, we used a method from the `JavaScriptSerializer` class
    to deserialize the output that came from the service to a Dictionary.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤23中，我们添加了对库本身的代码级引用，并添加了两个我们任务所需的更多命名空间。在步骤24中，我们将`Index()`动作更改为`async`方法。这是必需的，因为我们将从库本身使用`async`方法。在步骤26中，我们为测试床创建了服务URL。然后，我们创建了一个`PostsReader`类的实例。在第三行中，我们使用`GetPostById()`方法从服务中获取结果。再次，在代码的第四行中，我们使用`JavaScriptSerializer`类的一个方法将来自服务的结果反序列化为字典。
- en: Finally, we stored the result in a `ViewBag` and passed it to the `Index` view.
    In step 27, we got the Dictionary out of the `ViewBag` and displayed the content
    using `Razor` syntax.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将结果存储在`ViewBag`中，并将其传递给`Index`视图。在第27步中，我们从`ViewBag`中获取了字典，并使用`Razor`语法显示内容。
- en: Finally, we tested the output in step 29.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在第29步测试了输出。
