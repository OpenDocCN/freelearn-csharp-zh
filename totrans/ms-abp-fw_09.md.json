["```cs\npublic class ProductController : Controller\n{\n    public async Task<List<ProductDto>> GetListAsync()\n    {\n    }\n    [Authorize]\n    public async Task CreateAsync(ProductCreationDto input)\n    {\n    }    \n    [Authorize]\n    public async Task DeleteAsync(Guid id)\n    {\n    }\n}\n```", "```cs\n[Authorize]\npublic class ProductController : Controller\n{\n    [AllowAnonymous]\n    public async Task<List<ProductDto>> GetListAsync()\n    {\n    }\n    public async Task CreateAsync(ProductCreationDto input)\n    {\n    }\n\n    public async Task DeleteAsync(Guid id)\n    {\n    }\n}\n```", "```cs\npublic class ProductManagementPermissionDefinitionProvider\n    : PermissionDefinitionProvider\n{\n    public override void Define(\n        IPermissionDefinitionContext context)\n    {\n        var myGroup = context.AddGroup(\n            \"ProductManagement\");\n        myGroup.AddPermission(\n            \"ProductManagement.ProductCreation\");\n        myGroup.AddPermission(\n            \"ProductManagement.ProductDeletion\");\n    }\n}\n```", "```cs\npublic class ProductManagementPermissionDefinitionProvider\n    : PermissionDefinitionProvider\n{\n    public override void Define(\n        IPermissionDefinitionContext context)\n    {\n        var myGroup = context.AddGroup(\n            «ProductManagement»,\n            L(\"ProductManagement\"));\n        myGroup.AddPermission(\n            \"ProductManagement.ProductCreation\",\n            L(\"ProductCreation\"));\n        myGroup.AddPermission(\n            \"ProductManagement.ProductDeletion\",\n            L(\"ProductDeletion\"));\n    }\n\n    private static LocalizableString L(string name)\n    {\n        return LocalizableString\n            .Create<ProductManagementResource>(name);\n    }\n}\n```", "```cs\npublic class ProductController : Controller\n{\n    public async Task<List<ProductDto>> GetListAsync()\n    {\n    }\n    [Authorize(\"ProductManagement.ProductCreation\")]\n    public async Task CreateAsync(ProductCreationDto input)\n    {\n    }    \n    [Authorize(\"ProductManagement.ProductDeletion\")]\n    public async Task DeleteAsync(Guid id)\n    {\n    }\n}\n```", "```cs\npublic class ProductController : Controller\n{\n    private readonly IAuthorizationService \n        _authorizationService;\n    public ProductController(\n        IAuthorizationService authorizationService)\n    {\n        _authorizationService = authorizationService;\n    }\n\n    public async Task CreateAsync(ProductCreationDto input)\n    {\n        if (await _authorizationService.IsGrantedAsync(  \n            \"ProductManagement.ProductCreation\"))\n        {\n            // TODO: Create the product\n        }\n        else\n        {\n            // TODO: Handle unauthorized case\n        }\n    }\n}\n```", "```cs\npublic async Task CreateAsync(ProductCreationDto input)\n{\n    await _authorizationService\n        .CheckAsync(\"ProductManagement.ProductCreation\");\n    //TODO: Create the product\n}\n```", "```cs\nabp.auth.isGranted('ProductManagement.ProductCreation');\n```", "```cs\npublic override void Define(IpermissionDefinitionContext\n                            context)\n{\n    var myGroup = context.AddGroup(\n        \"ProductManagement\",\n        L(\"ProductManagement\"));\n    var parent = myGroup.AddPermission(\n        \"MyParentPermission\");\n    parent.AddChild(\"MyChildPermission\");\n}\n```", "```cs\npublic class ProductCreationRequirement : \n    IAuthorizationRequirement\n{ }\n```", "```cs\npublic class ProductCreationRequirementHandler \n    : AuthorizationHandler<ProductCreationRequirement>\n{\n    protected override Task HandleRequirementAsync(\n        AuthorizationHandlerContext context,\n        ProductCreationRequirement requirement)\n    {\n        if (context.User.HasClaim(c => c.Type == \n            \"productManager\"))\n        {\n            context.Succeed(requirement);\n        }\n\n        return Task.CompletedTask;\n    }\n}\n```", "```cs\npublic override void ConfigureServices(\n    ServiceConfigurationContext context)\n{\n    Configure<AuthorizationOptions>(options =>\n    {\n        options.AddPolicy(\n            \"ProductManagement.ProductCreation\",\n            policy => policy.Requirements.Add(\n                new ProductCreationRequirement()\n            )\n        );\n    });\n    context.Services.AddSingleton<IAuthorizationHandler, \n        ProductCreationRequirementHandler>();\n}\n```", "```cs\npublic class ProductAppService\n    : ApplicationService, IProductAppService\n{\n    [Authorize(\"ProductManagement.ProductCreation\")]\n    public Task CreateAsync(ProductCreationDto input)\n    {\n        // TODO\n    }\n}\n```", "```cs\npublic class ProductAppService\n    : ApplicationService, IProductAppService\n{\n    public Task CreateAsync(ProductCreationDto input)\n    {\n        // TODO\n    }\n}\n```", "```cs\npublic class ProductCreationDto\n{\n    [Required]\n    [StringLength(100)]\n    public string Name { get; set; }\n\n    [Range(0, 999.99)]\n    public decimal Price { get; set; }\n\n    [Url]\n    public string PictureUrl { get; set; }\n    public bool IsDraft { get; set; }\n}\n```", "```cs\npublic class ProductCreationDto : IValidatableObject\n{\n    ...\n    [Url]\n    public string PictureUrl { get; set; }    \n    public bool IsDraft { get; set; }    \n    public IEnumerable<ValidationResult> Validate(\n        ValidationContext context)\n    {\n        if (IsDraft == false &&\n            string.IsNullOrEmpty(PictureUrl))\n        {\n            yield return new ValidationResult(\n                \"Picture must be provided to publish a\n                 product\",\n                new []{ nameof(PictureUrl) }\n            );\n        }\n    }\n}\n```", "```cs\npublic IEnumerable<ValidationResult> Validate(\n    ValidationContext context)\n{\n    if (IsDraft == false &&\n        string.IsNullOrEmpty(PictureUrl))\n    {\n        var localizer = context.GetRequiredService\n            <IStringLocalizer<ProductManagementResource>\n            >();\n\n        yield return new ValidationResult(\n            localizer[\"PictureIsMissingErrorMessage\"],\n            new []{ nameof(PictureUrl) }\n        );\n    }\n}\n```", "```cs\npublic async Task CreateAsync(ProductCreationDto input)\n{\n    if (await HasExistingProductAsync(input.Name))\n    {\n        throw new AbpValidationException(\n            new List<ValidationResult>\n            {\n                new ValidationResult(\n                    \"Product name is already in use!\",\n                    new[] {nameof(input.Name)}\n                )\n            }\n        );\n    }\n}\n```", "```cs\n[DisableValidation]\npublic async Task CreateAsync(ProductCreationDto input)\n{\n}\n```", "```cs\npublic class SomeServiceWithValidation\n    : IValidationEnabled, ITransientDependency\n{\n    ...\n}\n```", "```cs\nabp add-package Volo.Abp.FluentValidation\n```", "```cs\npublic class ProductCreationDtoValidator\n    : AbstractValidator<ProductCreationDto>\n{\n    public ProductCreationDtoValidator()\n    {\n        RuleFor(x => x.Name).NotEmpty().MaximumLength(100);\n        RuleFor(x => x.Price).ExclusiveBetween(0, 1000);\n        //...\n    }\n}\n```", "```cs\nPublic async Task ExampleAsync()\n{\n    throw new Exception(\"my error message...\");\n}\n```", "```cs\npublic async Task ExampleAsync()\n{\n    throw new UserFriendlyException(\n        \"This message is available to the user!\");\n}\n```", "```cs\npublic class EventRegistrationManager : DomainService\n{\n    public async Task RegisterAsync(\n        Event @event,\n        AppUser user)\n    {\n        if (Clock.Now > @event.EndTime)\n        {\n            throw new BusinessException(EventHubErrorCodes\n                .CantRegisterOrUnregisterForAPastEvent);\n        }\n        ...\n    }\n}\n```", "```cs\nConfigure<AbpExceptionLocalizationOptions>(options =>\n{\n    options.MapCodeNamespace(\n        \"EventHub\", typeof(EventHubResource));\n});\n```", "```cs\n{\n  \"culture\": \"en\",\n  \"texts\": {\n    \"EventHub:CantRegisterOrUnregisterForAPastEvent\": \n        \"You can not register to or unregister from an \n         event in the past, sorry!\"\n  }\n}\n```", "```cs\nthrow new BusinessException(\n    EventHubErrorCodes.OrganizationNameAlreadyExists\n).WithData(\"Name\", name);\n```", "```cs\n\"EventHub:OrganizationNameAlreadyExists\": \"The organization {Name} already exists. Please use another name.\"\n```", "```cs\npublic class OrganizationNameAlreadyExistsException\n    : BusinessException\n{\n    public string Name { get; private set; }\n    public OrganizationNameAlreadyExistsException(\n        string name) : base(EventHubErrorCodes\n        .OrganizationNameAlreadyExists)\n    {\n        Name = name;\n        WithData(\"Name\", name);\n    }\n}\n```", "```cs\nthrow new OrganizationNameAlreadyExistsException(name);\n```", "```cs\npublic class MyException : Exception, IHasLogLevel\n{\n    public LogLevel LogLevel { get; set; } =\n        LogLevel.Warning;\n    //...\n}\n```", "```cs\npublic class MyException\n    : Exception, IExceptionWithSelfLogging\n{\n    public void Log(ILogger logger)\n    {\n        //...log additional info\n    }\n}\n```", "```cs\nservices.Configure<AbpExceptionHttpStatusCodeOptions>(\n    options =>\n{\n    options.Map(\n        EventHubErrorCodes.OrganizationNameAlreadyExists,\n        HttpStatusCode.Conflict);\n});\n```"]