["```cs\n    var options = new ParallelOptions { MaxDegreeOfParallelism = 2 };\n    ```", "```cs\n    Parallel.For(0, 10, options, (i, state) => {\n    ```", "```cs\n        if (i == 5) {\n    ```", "```cs\n            state.Break();\n    ```", "```cs\n            return;\n    ```", "```cs\n        }\n    ```", "```cs\n        Console.WriteLine($\"Processing item {i}\");\n    ```", "```cs\n    });\n    ```", "```cs\n    Parallel.ForEach(dataCollection, (data, state) => {\n    ```", "```cs\n        if (someCondition) {\n    ```", "```cs\n            state.Stop();\n    ```", "```cs\n            return;\n    ```", "```cs\n        }\n    ```", "```cs\n        // Process data\n    ```", "```cs\n    });\n    ```", "```cs\nawait Parallel.ForEachAsync(dataCollection, async (data, cancellationToken) => {\n    // Asynchronous processing of each data item\n    await ProcessDataAsync(data);\n});\n```", "```cs\n    _ = DoSomeAsync();\n    ```", "```cs\n    public async Task ProcessDataAsync(IEnumerable<Data> dataList) {\n    ```", "```cs\n        var tasks = new List<Task>();\n    ```", "```cs\n        foreach (var data in dataList) {\n    ```", "```cs\n            tasks.Add(ProcessSingleDataAsync(data));\n    ```", "```cs\n        }\n    ```", "```cs\n        await Task.WhenAll(tasks);\n    ```", "```cs\n    }\n    ```", "```cs\n    public async Task ProcessSingleDataAsync(Data data) {\n    ```", "```cs\n        await Task.Delay(TimeSpan.FromSeconds(1));\n    ```", "```cs\n        return data;\n    ```", "```cs\n    }\n    ```", "```cs\npublic static class ExtensionMethods\n{\n    public static void MyMethod<T>(this T obj)\n    {\n        // Implementation here\n    }\n}\n```", "```cs\nThread myThread = new Thread(new ThreadStart(MyFunction));\nmyThread.Start();\n```"]