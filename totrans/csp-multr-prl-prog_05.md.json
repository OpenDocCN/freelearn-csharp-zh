["```cs\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n            static void WriteNumbers()\n            {\n                //Set thread name.\n                Thread.CurrentThread.Name = \"Thread 1\";\n\n                for (int i = 0; i < 20; i++)\n                {\n    Console.WriteLine(\"Thread name {0}, Number: {1}\", Thread.CurrentThread.Name, i);\n                    Thread.Sleep(2000);\n                }\n            }\n\n            static void WriteWords()\n            {\n                //Set thread name.\n                Thread.CurrentThread.Name = \"Thread 2\";\n\n                String localString = \"This is an example for using tasks\";\n                String[] localWords = localString.Split(' ');\n                foreach (String s in localWords)\n                {\n    Console.WriteLine(\"Thread name {0}, Word: {1}\", Thread.CurrentThread.Name, s);\n                    Thread.Sleep(2000);\n                }\n\n            }\n\n            static void WriteColors()\n            {\n                //Set thread name.\n                Thread.CurrentThread.Name = \"Thread 3\";\n\n    String[] localColors = {\"red\", \"orange\", \"blue\", \"green\", \"yellow\", \"white\", \"black\"};\n                foreach (String s in localColors)\n                {\n    Console.WriteLine(\"Thread name {0}, Colors: {1}\",Thread.CurrentThread.Name, s);\n                    Thread.Sleep(2000);\n                }\n            } \n    ```", "```cs\n                //Create the 3 Tasks.\n                Task t1 = new Task(() => WriteNumbers());\n                Task t2 = new Task(() => WriteWords());\n                Task t3 = new Task(() => WriteColors());\n\n                //Run the 3 Tasks.\n                t1.Start();\n                t2.Start();\n                t3.Start();\n\n                Console.ReadLine();\n    ```", "```cs\n                //Create the 3 Tasks.\n                //Task t1 = new Task(() => WriteNumbers());\n                //Task t2 = new Task(() => WriteWords());\n                //Task t3 = new Task(() => WriteColors());\n\n                //Run the 3 Tasks.\n                //t1.Start();\n                //t2.Start();\n                //t3.Start();\n                Parallel.Invoke\n                (\n                    new Action(WriteNumbers),\n                    new Action(WriteWords),\n                    new Action(WriteColors)\n                );\n         Console.ReadLine();\n    ```", "```cs\npublic delegate void Action<in T>(\n   T obj\n)\n```", "```cs\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            //Create the 3 Tasks.\n            Task<String> t1 = new Task<String>(() => WriteNumbers());\n            Task<String> t2 = new Task<String>(() => WriteWords());\n            Task<String> t3 = new Task<String>(() => WriteColors());\n\n            //Run the 3 Tasks.\n            t1.Start();\n            t2.Start();\n            t3.Start();\n\n            Console.WriteLine(t1.Result);\n            Console.WriteLine(t2.Result);\n            Console.WriteLine(t3.Result);\n\n            Console.ReadLine();\n\n        }\n\n        static String WriteNumbers()\n        {\n            //Set thread name.\n            Thread.CurrentThread.Name = \"Task 1\";\n\n            for (int i = 0; i < 20; i++)\n            {\nConsole.WriteLine(\"Thread name {0}, Number: {1}\",Thread.CurrentThread.Name, i);\n                Thread.Sleep(2000);\n            }\n\nreturn String.Format(\"This Task has completed - {0}\", Thread.CurrentThread.Name);\n        }\n\n        static String WriteWords()\n        {\n            //Set thread name.\n            Thread.CurrentThread.Name = \"Task 2\";\n\n            String localString = \"This is an example for using tasks\";\n            String[] localWords = localString.Split(' ');\n            foreach (String s in localWords)\n            {\nConsole.WriteLine(\"Thread name {0}, Word: {1}\", Thread.CurrentThread.Name, s);\n                Thread.Sleep(2000);\n            }\n\nreturn String.Format(\"This Task has completed - {0}\", Thread.CurrentThread.Name);\n        }\n\n        static String WriteColors()\n        {\n            //Set thread name.\n            Thread.CurrentThread.Name = \"Task 3\";\n\nString[] localColors = { \"red\", \"orange\", \"blue\", \"green\", \"yellow\", \"white\", \"black\" };\n            foreach (String s in localColors)\n            {\nConsole.WriteLine(\"Thread name {0}, Colors: {1}\",Thread.CurrentThread.Name, s);\n                Thread.Sleep(2000);\n            }\n\nreturn String.Format(\"This Task has completed - {0}\", Thread.CurrentThread.Name);\n        }\n    }\n```", "```cs\nTask<String> t1 = new Task<String>(() => WriteNumbers());\n```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Threading;\n    using System.Threading.Tasks;\n\n    class ConcurrentCollection\n    { \n        static void Main()\n        {\n            ConcurrentQueue<int> queue = new ConcurrentQueue<int>();\n\n            //Sum of a single thread adding the numbers as we queue them.\n            int SingleThreadSum = 0;\n\n            // Populate the queue. \n            for (int i = 0; i < 5000; i++)\n            {\n                SingleThreadSum += i;\n                queue.Enqueue(i);\n            }\n\n            //Print the Sum of 0 to 5000.\n            Console.WriteLine(\"Single Thread Sum = {0}\", SingleThreadSum);\n\n            //Sum of a multithread adding of the numbers.\n            int MultiThreadSum = 0;\n\n            //Create an Action delegate to dequeue items and sum them.\n            Action localAction = () =>\n            {\n                int localSum = 0;\n                int localValue;\n\n                while (queue.TryDequeue(out localValue)) localSum += localValue;\n\n                Interlocked.Add(ref MultiThreadSum, localSum);\n            };\n\n            // Run 3 concurrent Tasks.\n            Parallel.Invoke(localAction, localAction, localAction);\n\n            //Print the Sum of 0 to 5000 done by 3 separate threads.\n            Console.WriteLine(\"MultiThreaded  Sum = {0}\", MultiThreadSum);\n\n            Console.ReadLine();\n        }\n    }\n    ```", "```cs\nConcurrentQueue<int> queue = new ConcurrentQueue<int>();\n```", "```cs\nfor (int i = 0; i < 5000; i++)\n        {\n            SingleThreadSum += i;\n            queue.Enqueue(i);\n        }\n```", "```cs\nqueue.TryDequeue(out localValue)) localSum += localValue;\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TaskFactoryExample\n{\n    class TaskFactoryExample\n    {\n\n        static TaskFactory TF = new TaskFactory(TaskScheduler.Default);\n\n        static void Main(string[] args)\n        {\n            List<Task> tasklist = new List<Task>();\n\n            tasklist.Add(TF.StartNew(() => Worker(\"Task 1\"), CancellationToken.None, TaskCreationOptions.PreferFairness, TaskScheduler.Default));\n            tasklist.Add(TF.StartNew(() => Worker(\"Task 2\"), CancellationToken.None, TaskCreationOptions.PreferFairness, TaskScheduler.Default));\n            tasklist.Add(TF.StartNew(() => Worker(\"Task 3\"), CancellationToken.None, TaskCreationOptions.PreferFairness, TaskScheduler.Default));\n            tasklist.Add(TF.StartNew(() => Worker(\"Task 4\"), CancellationToken.None, TaskCreationOptions.PreferFairness, TaskScheduler.Default));\n            tasklist.Add(TF.StartNew(() => Worker(\"Task 5\"), CancellationToken.None, TaskCreationOptions.PreferFairness, TaskScheduler.Default));\n\n            //wait for all tasks to complete.\n            Task.WaitAll(tasklist.ToArray());\n\n            //Wait for input before ending program.\n            Console.ReadLine();\n        }\n\n        static void Worker(String taskName)\n        {\n            Console.WriteLine(\"This is Task - {0}\", taskName);\n        }\n    }\n}\n```", "```cs\nstatic TaskFactory TF = new TaskFactory(TaskScheduler.Default);\n```", "```cs\nTF.StartNew(() => Worker(\"Task 1\"), CancellationToken.None, TaskCreationOptions.PreferFairness, TaskScheduler.Default)\n```", "```cs\n() => Worker(\"Task 1\")\n```", "```cs\nTask.WaitAll(tasklist.ToArray());\n```", "```cs\n        // Named method.\n        Parallel.For(0, 5, Method);\n\n        //Anonymous method.\n        Parallel.For(0, 5, delegate(int i)\n        {\n            // Do something\n        });\n\n        //Lambda expression.\n        Parallel.For(0, 5, i =>\n        {\n            // Do something\n        });\n```", "```cs\nParallel.ForEach(IEnumerable<TSource> source, Action<TSource> body)\n```", "```cs\n    using System;\n    using System.IO;\n    using System.Threading;\n    using System.Threading.Tasks;\n    class SimpleForEach\n    {\n        static void Main()\n        {\n            string[] localStrings = \"I am doing a simple example of a Parallel foreach loop\".Split(' ');\n\n            Parallel.ForEach(localStrings, currentString =>\n                    {\n\n                        Console.WriteLine(\"Current word is - {0}, and the current thread is - {1}\", currentString,\n                                            Thread.CurrentThread.ManagedThreadId);\n                    } \n                 ); \n\n            Console.ReadLine();\n        }\n    }\n    ```", "```cs\n            Action task1Method;\n            task1Method = new Action(WriteNumbers);\n            Task t1 = new Task(task1Method);\n```", "```cs\nTask t1 = new Task(() => WriteNumbers());\n```"]