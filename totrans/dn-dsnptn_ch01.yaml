- en: Chapter 1. An Introduction to Patterns and Pattern Catalogs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 模式和模式目录简介
- en: 'Design patterns have always fascinated software developers, yet true knowledge
    of their applicability and consequences has eluded many. The various solutions
    that have been created and applied to solve similar problems have been studied
    over time by experienced developers and architects. A movement slowly began to
    catalog such time-tested and successful solutions, which served as a blueprint
    for software design. The applicability of design patterns exhibited maturity (even
    though over-engineering was a perceived risk) in solution architecture (in terms
    of stability, consistency, maintainability, and extensibility), and became a core
    skill for serious developers and architects. In this introduction to patterns
    and pattern catalogs, the authors wish to provide a detailed illustration of the
    movement in the software development industry that led to the discovery and consolidation
    of the various patterns and pattern catalogs. It is equally important to understand
    the evolution of patterns, idioms, programming languages, and standards that led
    to standardization of these technology-agnostic blueprints, which form the basis
    of enterprise application development today. We will cover the following topics
    in this regard:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式一直令软件开发者着迷，然而，对其适用性和后果的真正了解却让许多人望而却步。随着时间的推移，经验丰富的开发者和架构师研究了为解决类似问题而创建和应用的各种解决方案。一个缓慢的运动开始记录这些经过时间考验且成功的解决方案，这些解决方案成为了软件设计的蓝图。设计模式的适用性在解决方案架构（从稳定性、一致性、可维护性和可扩展性方面）上表现出成熟度（尽管过度设计被视为风险），并成为严肃的开发者和架构师的核心技能。在这本关于模式和模式目录的介绍中，作者希望详细说明导致各种模式和模式目录被发现和巩固的软件开发生态运动。同样重要的是要理解导致这些技术无关蓝图标准化的模式、习语、编程语言和标准的发展演变，这些蓝图构成了今天企业应用开发的基础。我们将在此方面涵盖以下主题：
- en: History of **object-oriented programming** (**OOP**) techniques, idioms, and
    patterns
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）技术、习语和模式的历史
- en: Patterns and pattern movement
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式和模式运动
- en: Key patterns and pattern catalogs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键模式和模式目录
- en: Key C# language features that facilitate implementation of OOP techniques, idioms,
    and patterns
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进面向对象编程（OOP）技术、习语和模式实现的C#语言关键特性
- en: OOP - A short history
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程 - 简史
- en: 'OOP is a programming model that is supposed to combine structure (data) and
    behavior (methods) to deliver software functionality. This was a marked contrast
    from the procedural programming model, which was mostly in vogue when the OOP
    model gained prominence. The primary unit of composition in a procedural programming
    model is a procedure (mostly a function with side-effects). Data is fed into a
    series of procedures that constitutes the process or algorithm in a solution context.
    In the case of OOP, the data and related functions are represented together as
    a class, which acts as a fundamental unit in the programming model. Schematically
    it is as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）是一种编程模型，旨在将结构（数据）和行为（方法）结合起来以提供软件功能。这与当时在OOP模型获得显著地位时盛行的过程式编程模型形成了鲜明对比。在过程式编程模型中，主要的组成单元是过程（大多数是带有副作用的功能）。数据被输入到一系列过程中，这些过程构成了在解决方案上下文中的过程或算法。在面向对象的案例中，数据和相关的函数被一起表示为一个类，它在编程模型中作为一个基本单元。示意图如下：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As a programmer, one can create many instances of a class during the execution
    of a program. Since class encapsulates data and its associated operations to provide
    a coherent entity, the problems (or rather side-effects) associated with global
    variables/data (being used as payload for the procedures) went away all of a sudden.
    This helped to manage the complexity of developing large software.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，在程序执行过程中可以创建许多类的实例。由于类封装了数据和相关的操作以提供一个连贯的实体，因此与全局变量/数据（用作过程的负载）相关的所有问题（或更确切地说，副作用）突然消失了。这有助于管理开发大型软件的复杂性。
- en: OOP revolutionized the way programmers modeled the problem domain, with class
    compositions leveraging encapsulation, association, inheritance, and polymorphism.
    Additionally, with the flexibility to model hierarchies (that closely represent
    the problem domain) with ease, it became natural for developers to think in terms
    of objects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）革命性地改变了程序员对问题域的建模方式，类组合利用封装、关联、继承和多态。此外，由于能够轻松地用对象来表示层次结构（这紧密地代表了问题域），因此对于开发者来说，以对象为思考方式变得自然。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The origin of OOP can be traced back to the Simula programming language created
    by Kristen Nygaard and Ole-Johan Dahl, released in the year 1965\. The advent
    of the **Smalltalk** system helped the ideas of OOP to percolate to the academia
    and some consulting circles. Smalltalk was a dynamically typed language, and primarily
    designed as a message passing system. Later, they added Simula's class-based Object
    model. Alan Kay, Dan Inaglis, and Adele Goldberg at Xerox PARC designed the language.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的起源可以追溯到Kristen Nygaard和Ole-Johan Dahl在1965年创建的Simula编程语言。**Smalltalk**系统的出现帮助面向对象的思想渗透到学术界和一些咨询领域。Smalltalk是一种动态类型语言，最初被设计为一个消息传递系统。后来，他们添加了Simula的基于类的对象模型。Xerox
    PARC的Alan Kay、Dan Inaglis和Adele Goldberg设计了这种语言。
- en: The OOP model reached a critical mass in the early 1990s, with the popularity
    of the C++ programming language. Even though Smalltalk and C++ were OOP languages,
    Smalltalk was a dynamically typed programming language, and C++ was a statically
    typed (though weakly enforced) programming language. The C++ programming language
    was created by Bjarne Stroustrup at the AT&T Bell Laboratories, as an extension
    of C (for wider adoption). In this regard, C++, as a programming language, has
    issues in terms of usage because of the compulsion to make it C-compatible. The
    story of evolution of the language is well chronicled in, *The Design and Evolution
    of C++*, a book written by Bjarne himself. The book deals with the rationale of
    designing the language and the design choices available for him to incorporate
    features such as single inheritance, multiple inheritance, virtual methods, exception
    handling, templates (Generics), I/O streams, and so on. Any serious C++ developer
    should not miss this particular book, as it helps to understand the reason why
    the C++ programming language is the way it is!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象（OOP）模型在20世纪90年代初达到了临界质量，这得益于C++编程语言的普及。尽管Smalltalk和C++都是面向对象的编程语言，但Smalltalk是一种动态类型编程语言，而C++是一种静态类型（尽管执行力度较弱）的编程语言。C++编程语言是由Bjarne
    Stroustrup在AT&T贝尔实验室创建的，作为C语言（为了更广泛的应用）的扩展。在这方面，C++作为一种编程语言，由于必须使其与C语言兼容，因此在使用方面存在一些问题。关于该语言演变的历程，在Bjarne本人所著的《C++的设计与演化》一书中得到了很好的记录。这本书讨论了设计该语言的原理以及他为了整合诸如单一继承、多重继承、虚方法、异常处理、模板（泛型）、输入/输出流等功能而可供选择的设计方案。任何严肃的C++开发者都不应该错过这本书，因为它有助于理解为什么C++编程语言是这样的！
- en: There were attempts to make protocol-based development using middleware technologies
    like Microsoft's **Component Object Model** (**COM**) and OMG's **Common Object
    Request Broker Architecture** (**CORBA**). Both CORBA and COM were very similar,
    and both facilitated object interoperability at the binary level. Each protocol
    had its own binary encoding format, and interoperability between these two standards
    became a problem. Some enterprising companies made a living by writing COM/CORBA
    bridge to rectify this problem. Also, COM was mostly available only on Microsoft
    Windows, making it a platform-specific solution.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 曾尝试使用中间件技术，如微软的**组件对象模型**（**COM**）和OMG的**公共对象请求代理架构**（**CORBA**）来构建基于协议的开发。CORBA和COM都非常相似，并且都促进了二进制级别的对象互操作性。每个协议都有自己的二进制编码格式，这两个标准之间的互操作性成为了一个问题。一些有进取心的公司通过编写COM/CORBA桥来解决这个问题谋生。此外，COM主要只在微软Windows上可用，使其成为一种特定平台的解决方案。
- en: Then, in 1996, Sun Microsystems came up with a language which was marketed as
    a programming language to write applications that are hosted in a browser (Applets).
    They named it Java. However, due to performance and political reasons, applet
    development did not took off. The language, along with its associated platform,
    was soon projected as a server-side programming system. This was a tremendous
    success, and the Java language made a strong comeback, further popularizing the
    OOP programming model. The primary architect of the Java language was James Gosling.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在1996年，Sun Microsystems推出了一种语言，它被宣传为一种用于编写在浏览器中运行的应用程序（Applets）的编程语言。他们将其命名为Java。然而，由于性能和政治原因，Applet开发并没有起飞。这种语言及其相关平台很快被定位为服务器端编程系统。这是一个巨大的成功，Java语言也因此强势回归，进一步普及了面向对象的编程模型。Java语言的主要架构师是James
    Gosling。
- en: In the year 2001, Microsoft released C#, a brand new OOP language for their
    new virtual machine development platform, known as .NET. Later, Microsoft did
    add support for generics, lambda, dynamic typing, and LINQ, among others, to make
    C# one of the most powerful programming languages in the world. The primary architect
    of the language was Anders Hejlsberg.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在2001年，微软发布了C#，这是一种全新的面向对象语言，用于他们新的虚拟机开发平台，即.NET。后来，微软还添加了对泛型、lambda、动态类型和LINQ等特性的支持，使C#成为世界上最强大的编程语言之一。该语言的主要架构师是安德斯·海尔斯伯格。
- en: Meanwhile, languages such as Ruby and Python made an appearance, and are still
    relevant in certain areas. Then, there were object-functional languages such as
    F#, Scala, Groovy, Clojure, and so on. However, the OOP model is symbolized by
    C++, C#, and Java.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，像Ruby和Python这样的语言出现了，并在某些领域仍然相关。然后，出现了诸如F#、Scala、Groovy、Clojure等面向对象-函数式语言。然而，面向对象模型由C++、C#和Java等语言代表。
- en: Patterns and pattern movement
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式和模式运动
- en: Programmers of the early 1990s struggled a lot to understand OOP, and how to
    effectively use them in large projects. Without a viral medium such as the Internet,
    it was quite a struggle for them. Early adopters published technical reports,
    wrote in periodicals/journals, and conducted seminars to popularize OOP techniques.
    Magazines such as *Dr. Dobbs Journal* and *C++ Report* carried columns featuring
    OOP.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 20世纪90年代初的程序员在理解面向对象（OOP）以及如何在大型项目中有效使用它们方面遇到了很多困难。在没有像互联网这样的病毒式传播媒介的情况下，这对他们来说是一场相当大的挑战。早期采用者发表了技术报告，在期刊/杂志上撰写文章，并举办研讨会来普及面向对象技术。例如，《Dr.
    Dobbs Journal》和《C++ Report》等杂志都设有介绍面向对象技术的专栏。
- en: A need was felt to transfer the wisdom of the experts to the ever-increasing
    programming community, but this knowledge propagation was not happening. The legendary
    German mathematician Carl Friedrich Gauss once remarked, *"Always learn from the
    masters"*. Even though Gauss had mathematics in mind, it is true for any non-trivial
    human endeavor. However, there were very few masters of the OOP techniques, and
    the apprenticeship model was not scaling well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 人们感到有必要将专家的智慧传授给不断增长的编程社区，但这种知识传播并没有发生。传奇的德国数学家卡尔·弗里德里希·高斯曾说过，“总是向大师学习”*。尽管高斯当时是在考虑数学，但这适用于任何非平凡的人类努力。然而，精通面向对象（OOP）技术的专家寥寥无几，学徒制模式也未能很好地扩展。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: James Coplien published an influential book titled *Advanced C++ Programming
    Styles and Idioms*, which dealt with low-level patterns (idioms) associated with
    the usage of the C++ programming language. Despite being not widely cited, authors
    consider this a notable book towards cataloguing the best practices and techniques
    of OOP.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 詹姆斯·科普林出版了一本有影响力的书，名为《高级C++编程风格和习惯用法》，该书涉及与C++编程语言使用相关的低级模式（习惯用法）。尽管引用并不广泛，但作者认为这是一本值得注意的书，用于记录面向对象的最佳实践和技术。
- en: 'It was during this time that Erich Gamma began his work on a pattern catalog
    as part of his PhD thesis, inspired by an architect named Christopher Alexander.
    Christopher Alexander''s *A Pattern Language - Towns, Buildings, Construction*
    was a source of inspiration for Erich Gamma. Then, people with similar ideas,
    namely Ralph Johnson, John Vlissides, and Richard Helm, joined hands with Erich
    Gamma to create a catalog of 23 patterns, now popularly known as the **Gang of
    Four** (**GoF**) design patterns. Addison Wesley published the book *Design Patterns:
    Elements of Reusable Object-Oriented Software* in the year 1994\. This soon became
    a great reference for the programmer, and fueled software development based on
    patterns. The GoF catalog was mostly focused on software design.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就在这段时间，埃里希·伽玛开始在他的博士论文中研究一个模式目录，受到了一位名叫克里斯托弗·亚历山大的建筑师的启发。克里斯托弗·亚历山大的《模式语言 -
    城市、建筑、建筑》是埃里希·伽玛的灵感来源。随后，持有相似想法的人，即拉尔夫·约翰逊、约翰·弗利斯、理查德·赫尔姆，与埃里希·伽玛携手合作，创建了一个包含23个模式的目录，现在广为人知为**四人帮**（**GoF**）设计模式。1994年，Addison
    Wesley出版了《设计模式：可重用面向对象软件元素》一书。这本书很快成为程序员的宝贵参考资料，并推动了基于模式的软件开发。GoF目录主要关注软件设计。
- en: In the year 1996, a group of engineers from Siemens published a book titled
    *Pattern-Oriented Software Architecture*, which focused mostly on the architectural
    aspects of building a system. The entire **Pattern-Oriented Software Architecture**
    (**POSA**) pattern catalog was documented in five books published by John Wiley
    and Sons. The group was joined by Douglas Schmidt, the creator of the **Adaptive
    Communication Environment** (**ACE**) network programming library and **TAO**
    (**The ACE ORB**). He later became the chair of **Object Management Group** (**OMG**),
    which develops, adopts, and maintains standards such as CORBA and UML.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1996年，一群来自西门子的工程师出版了一本名为*面向模式的软件架构*的书，主要关注构建系统的架构方面。整个**面向模式的软件架构**（**POSA**）模式目录由约翰·威利父子公司的五本书详细记录。该团队后来加入了道格拉斯·施密特，他是**自适应通信环境**（**ACE**）网络编程库和**TAO**（**ACE
    ORB**）的创造者。他后来成为**对象管理组**（**OMG**）的主席，该组织开发、采用和维护标准，如CORBA和UML。
- en: Another influential catalog was published by Martin Fowler in a book titled
    *Patterns of Enterprise Application Architecture* in the year 2001\. The book
    mostly focused on patterns that come up while developing enterprise applications
    using the JEE and .NET frameworks. Incidentally, most of the code snippets were
    in Java and C#.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个有影响力的目录是马丁·福勒在2001年出版的一本名为*企业应用架构模式*的书。本书主要关注使用JEE和.NET框架开发企业应用时出现的模式。顺便提一下，大多数代码片段都是用Java和C#编写的。
- en: Gregor Hohpe and Bobby Woolf published a pattern catalog to document the patterns
    that arise in the enterprise integration scenario. Their catalog titled *Enterprise
    Integration Patterns*, published as part of the Martin Fowler signature book series,
    is widely recognized as a source of ideas regarding enterprise integration techniques.
    The Apache Camel integration library is inspired by this book.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格雷戈尔·霍普和博比·沃尔夫出版了一个模式目录，以记录企业集成场景中出现的模式。他们的目录名为*企业集成模式*，作为马丁·福勒签名书系列的一部分出版，被广泛认为是关于企业集成技术的思想来源。Apache
    Camel集成库受到了这本书的启发。
- en: '*Core J2EE Patterns: Best Practices and Design Strategies* (by Deepak Alur
    et al.), although a platform-specific catalog, is a rich source of ideas regarding
    the structuring of an enterprise application. The book includes patterns for presentation,
    data, and service tiers in web application development.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*核心J2EE模式：最佳实践和设计策略*（由Deepak Alur等人所著），虽然是一个特定平台的目录，但它是关于企业应用结构化思想的丰富来源。本书包括用于Web应用开发中的表示层、数据层和服务层模式。'
- en: '*Domain-Driven Design*, published by Eric Evans in the year 2003, deals with
    a technique called **domain-driven design** (**DDD**). The book uses GoF and **Patterns
    of Enterprise Application Architecture** (**POEAA**) patterns to put forward a
    design methodology that focuses on building a persistent ignorant domain model.
    The book also introduces some patterns and idioms for structuring domain logic.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*领域驱动设计*，由埃里克·埃文斯于2003年出版，讨论了一种称为**领域驱动设计**（**DDD**）的技术。本书使用GoF和**企业应用架构模式**（**POEAA**）模式提出了一种设计方法论，该方法论侧重于构建一个持久的无知领域模型。本书还介绍了一些用于结构化领域逻辑的模式和惯用语。'
- en: Jim Arlow and Ila Nuestadt published a book entitled *Enterprise Patterns and
    MDA*, which catalogued a set of patterns based on the *Jungian Archetypes*. This
    catalog contains nine top-level archetypes and 168 business archetypes for developing
    applications.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 吉姆·阿罗和伊拉·纽斯塔特出版了一本名为*企业模式和MDA*的书，该目录基于*荣格原型*列出了一系列模式。该目录包含九个顶级原型和168个业务原型，用于开发应用程序。
- en: 'The following figure illustrates the evolution of design methodologies, programming
    languages, and pattern catalogs:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了设计方法论、编程语言和模式目录的演变：
- en: '![Patterns and pattern movement](img/B05691_01_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![模式和模式运动](img/B05691_01_01.jpg)'
- en: Key pattern catalogs
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键模式目录
- en: Patterns are most often catalogued in some kind of pattern repository. Some
    of them are published as books. The most popular and widely used pattern catalog
    is GoF, named after the four collaborators that produced them. They are Eric Gama,
    Ralph Johnson, John Vlissides, and Richard Helm.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 模式通常被编目在某种模式存储库中。其中一些被出版为书籍。最受欢迎和广泛使用的模式目录是GoF，以生产它们的四位合作者的名字命名。他们是埃里克·甘玛、拉尔夫·约翰逊、约翰·弗利斯和理查德·赫尔姆。
- en: GoF patterns
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GoF模式
- en: The GoF catalog, named after the four creators of the catalog, started the pattern
    movement. The creators mostly focused on designing and architecting object-oriented
    software. The ideas of Christopher Alexander were borrowed to the software engineering
    discipline, and applied to application architecture, concurrency, security, and
    so on. The GoF divided the catalog into structural, creational, and behavioral
    patterns. The original book used C++ and Smalltalk to explain the concepts. These
    patterns have been ported and leveraged in most of the programming languages that
    exist today.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以目录的四位创建者命名的GoF目录，开启了模式运动。创建者主要关注面向对象软件的设计和架构。克里斯托弗·亚历山大的思想被借用到软件工程学科，并应用于应用架构、并发、安全等领域。GoF将目录分为结构型、创建型和行为型模式。原始书籍使用C++和Smalltalk来解释概念。这些模式已经移植并利用在当今大多数编程语言中。
- en: '| **Sr. no** | **Pattern type** | **Patterns** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式类型** | **模式** |'
- en: '| 1 | Creational patterns | Abstract factory, builder, factory method, prototype,
    singleton. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 创建型模式 | 抽象工厂、建造者、工厂方法、原型、单例。|'
- en: '| 2 | Structural patterns | Adapter, bridge, composite, decorator, facade,
    flyweight, proxy. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 结构模式 | 适配器、桥接、组合、装饰者、外观、享元、代理。|'
- en: '| 3 | Behavioral patterns | Chain of responsibility, command, interpreter,
    iterator, mediator, memento, observer, state, strategy, template method, visitor.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 行为模式 | 责任链、命令、解释器、迭代器、中介者、备忘录、观察者、状态、策略、模板方法、访问者。|'
- en: We believe that a good understanding of the GoF patterns is necessary for any
    programmer. These patterns occur everywhere, regardless of the application domain.
    GoF patterns help us to communicate and reason about systems in a language-agnostic
    manner. They are widely implemented in the .NET and Java world.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为，对GoF模式有良好的理解对任何程序员都是必要的。这些模式无处不在，无论应用领域如何。GoF模式帮助我们以语言无关的方式沟通和推理系统。它们在.NET和Java世界中得到了广泛的应用。
- en: POSA catalog
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: POSA目录
- en: 'POSA Volume 5 is an influential book series, which covers most of the applicable
    patterns while developing mission-critical systems. An element of bias is seen
    towards native code programming; perhaps C++ was the prevalent OOP language during
    the time of research. The catalog, which spanned five published volumes, is listed
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: POSA第5卷是一本有影响力的书籍系列，涵盖了在开发关键任务系统时的大部分适用模式。在原生代码编程方面存在一定的偏见；也许在研究期间C++是流行的面向对象编程语言。跨越五卷出版的目录如下：
- en: '| **Sr. no** | **Pattern type** | **Patterns** |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式类型** | **模式** |'
- en: '| 1 | Architectural | Layers, pipes and filters, blackboard, broker, MVC, presentation-abstraction-control,
    microkernel, reflection. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 架构模式 | 层次、管道和过滤器、黑板、经纪人、MVC、表示-抽象-控制、微内核、反射。|'
- en: '| 2 | Design | Whole-part, mater-slave, proxy, command processor, view handler,
    forwarder-receiver, client-dispatcher-server, publisher-subscriber. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 设计模式 | 整体-部分、主-从、代理、命令处理器、视图处理器、转发器-接收器、客户端-调度器-服务器、发布者-订阅者。|'
- en: '| 3 | Service access and configuration patterns | Wrapper façade, component
    configurator, interceptor, extension interface. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 服务访问和配置模式 | 包装外观、组件配置器、拦截器、扩展接口。|'
- en: '| 4 | Event handling patterns | Reactor, proactor, asynchronous completion
    token, acceptor-connector. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 事件处理模式 | 反应器、先行者、异步完成令牌、接受者-连接器。|'
- en: '| 5 | Synchronization patterns | Scoped locking, strategized locking, thread-safe
    interface, double-checked locking optimization. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 同步模式 | 作用域锁定、策略锁定、线程安全接口、双重检查锁定优化。|'
- en: '| 6 | Concurrency patterns | Active object, monitor object, half-sync/half-async,
    leader/followers, thread-specific storage. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 并发模式 | 活动对象、监控对象、半同步/半异步、领导者/跟随者、线程特定存储。|'
- en: '| 7 | Resource acquisition patterns | Lookup, lazy acquisition, eager acquisition,
    partial acquisition. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 资源获取模式 | 查找、延迟获取、立即获取、部分获取。|'
- en: '| 8 | Resource lifecycle | Caching, pooling, coordinator, resource lifecycle
    manager. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 资源生命周期 | 缓存、池化、协调器、资源生命周期管理器。|'
- en: '| 9 | Resource release patterns | Leasing, evictor. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 资源释放模式 | 出租、驱逐者。|'
- en: '| 10 | A pattern language for distributive computing | Consolidation of patterns
    from different catalogs in the context of distributed programming. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 分布式计算的模式语言 | 在分布式编程的背景下，对不同目录中模式的整合。|'
- en: '| 11 | On patterns and pattern languages | This last volume gives some meta
    information about patterns, pattern languages, and their usage. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 11 | 关于模式和模式语言 | 这最后一卷提供了有关模式、模式语言及其使用的元信息。 |'
- en: We believe the POSA catalog is very important (to the extent, one of the author
    feels, that if someone has not heard about the POSA catalog, he or she does not
    understand patterns) if one is writing middleware servers and scalable web infrastructure.
    For some reason, it has not got the kind of traction that it deserves. They are
    very useful for writing server-class software infrastructure such as web containers,
    application containers, and other middleware components.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为POSA目录非常重要（在某种程度上，一位作者认为，如果有人没有听说过POSA目录，那么他或她就不理解模式），如果一个人在编写中间件服务器和可扩展的Web基础设施。由于某种原因，它没有得到应有的关注。它们对于编写服务器级软件基础设施，如Web容器、应用程序容器和其他中间件组件非常有用。
- en: POEAA catalog
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: POEAA目录
- en: Martin Fowler, along with some co-authors, published a book entitled *Patterns
    of Enterprise Application Architecture*. The book is a treasure trove of patterns,
    that helps one to structure and organize the design of enterprise applications
    using .NET and Java. Some of Fowler's pattern has been leveraged in the context
    of distributed computing by POSA-Volume 4 authors.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 马丁·福勒（Martin Fowler）和一些合著者出版了一本名为《企业应用架构模式》（Patterns of Enterprise Application
    Architecture）的书。这本书是模式的宝库，帮助人们使用.NET和Java对企业应用程序的设计进行结构和组织。Fowler的一些模式在POSA-Volume
    4作者关于分布式计算的环境中得到了应用。
- en: '| **Sr. no** | **Pattern type** | **Patterns** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式类型** | **模式** |'
- en: '| 1 | Domain logic | Transaction script, domain model, table module, service
    layer. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 领域逻辑 | 事务脚本、领域模型、表模块、服务层。 |'
- en: '| 2 | Data source architectural patterns | Table data gateway, row data gateway,
    active record, data mapper. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 数据源架构模式 | 表数据网关、行数据网关、活动记录、数据映射器。 |'
- en: '| 3 | Object-relational behavioral patterns | Unit of work, identity map, lazy
    load. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 对象关系行为模式 | 工作单元、身份映射、延迟加载。 |'
- en: '| 4 | Object-relational structural patterns | Identity field, foreign key mapping,
    association table mapping, dependent mapping, embedded value, serialized LOB,
    single table inheritance, class table inheritance, concrete table inheritance,
    inheritance mappers. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 对象关系结构模式 | 身份字段、外键映射、关联表映射、依赖映射、嵌入值、序列化LOB、单表继承、类表继承、具体表继承、继承映射器。 |'
- en: '| 5 | Object-relational metadata mapping patterns | Metadata mapping, query
    object, repository. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 对象关系元数据映射模式 | 元数据映射、查询对象、存储库。 |'
- en: '| 6 | Web presentation patterns | Model view controller, page controller, front
    controller, template view, transform view, two-step view, application controller.
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 6 | Web展示模式 | 模型-视图-控制器、页面控制器、前端控制器、模板视图、转换视图、两步视图、应用程序控制器。 |'
- en: '| 7 | Distribution patterns | Remote facade, data transfer object. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 分布式模式 | 远程外观、数据传输对象。 |'
- en: '| 8 | Offline concurrency patterns | Optimistic offline lock, pessimistic offline
    lock, coarse grained lock, implicit lock. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 线下并发模式 | 乐观锁、悲观锁、粗粒度锁、隐式锁。 |'
- en: '| 9 | Session state patterns | Client session state, server session state,
    database session state. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 会话状态模式 | 客户端会话状态、服务器会话状态、数据库会话状态。 |'
- en: '| 10 | Base patterns | Gateway, mapper, layer supertype, separated interface,
    registry, value object, money, special case, plugin, service stub, record set.
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 基础模式 | 网关、映射器、层超类型、分离接口、注册表、值对象、货币、特殊案例、插件、服务存根、记录集。 |'
- en: The POEAA catalog is a rich source of ideas when it comes to enterprise application
    software development. Some of these patterns are implemented by frameworks such
    as Spring (including Spring.NET), Nhibernate/Entity Framework, **Windows Communication
    Foundation** (**WCF**), and **Windows Presentation Foundation** (**WPF**). Awareness
    about the POEAA catalog helps one to reason about the architecture of pretty much
    everything happening in the .NET platform.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到企业应用程序软件开发时，POEAA目录是一个丰富的思想来源。其中一些模式由Spring（包括Spring.NET）、Nhibernate/Entity
    Framework、**Windows Communication Foundation**（**WCF**）和**Windows Presentation
    Foundation**（**WPF**）等框架实现。了解POEAA目录有助于人们推理.NET平台上的几乎所有架构。
- en: EIP catalog
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: EIP目录
- en: A modern day enterprise requires information to flow from one application to
    another, in real time or while offline. Since applications use different implementation
    technologies, we require message passing systems to transfer the data. Most often,
    these communications happen in an asynchronous manner. The **Enterprise Integration
    Patterns** (**EIP**) catalog deals with time-tested solutions by professionals,
    who have cut their teeth on integration issues for recurring problems.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当代企业需要信息在实时或离线状态下从一个应用程序流向另一个应用程序。由于应用程序使用不同的实现技术，我们需要消息传递系统来传输数据。这些通信通常以异步方式进行。**企业集成模式**（**EIP**）目录处理了专业人士经过时间考验的解决方案，这些专业人士在解决重复性问题方面有着丰富的集成经验。
- en: '| **Sr. no** | **Pattern type** | **Patterns** |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式类型** | **模式** |'
- en: '| 1 | Messaging systems | Message channel, message, pipes and filters, message
    router, message translator, message endpoint. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 消息系统 | 消息通道、消息、管道和过滤器、消息路由器、消息翻译器、消息端点。 |'
- en: '| 2 | Messaging channels | Point-to-point channel, publish-subscribe channel,
    datatype channel, invalid message channel, dead letter channel, guaranteed delivery,
    channel adapter, messaging bridge, message bus. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 消息通道 | 点对点通道、发布-订阅通道、数据类型通道、无效消息通道、死信通道、保证投递、通道适配器、消息桥、消息总线。 |'
- en: '| 3 | Message construction | Command message, document message, event message,
    request-reply, return address, correlation identifier, message sequence, message
    expiration, format indicator. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 消息构建 | 命令消息、文档消息、事件消息、请求-响应、回送地址、关联标识符、消息序列、消息过期、格式指示符。 |'
- en: '| 4 | Message routing | Content-based router, message filter, dynamic router,
    recipient list, splitter, aggregator, resequencer, composed message processor,
    scatter-gather, routing slip, process manager, message broker. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 消息路由 | 基于内容的路由器、消息过滤器、动态路由器、接收者列表、分割器、聚合器、重新排序器、复合消息处理器、分散-收集、路由条、进程管理器、消息代理。
    |'
- en: '| 5 | Message transformation | Envelope wrapper, content enricher, content
    filter, claim check, normalizer, canonical data model. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 消息转换 | 封装包装器、内容丰富器、内容过滤器、索赔检查、标准化器、规范数据模型。 |'
- en: '| 6 | Messaging endpoints | Messaging gateway, messaging mapper, transactional
    client, polling consumer, event-driven consumer, competing consumers, message
    dispatcher, selective consumer, durable subscriber, idempotent receiver, service
    activator. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 消息端点 | 消息网关、消息映射器、事务客户端、轮询消费者、事件驱动消费者、竞争消费者、消息调度器、选择性消费者、持久订阅者、幂等接收者、服务激活器。
    |'
- en: '| 7 | System management | Control bus, detour, wire tap, message history, message
    store, smart proxy, test message, channel purger. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 系统管理 | 控制总线、绕行、线截听、消息历史、消息存储、智能代理、测试消息、通道清理器。 |'
- en: The EIP catalog is a very influential one in transferring knowledge about strategies
    for asynchronous messaging and point-to-point synchronous communication between
    applications. The Apache Camel library implements most of the commonly occurring
    patterns, while doing **Enterprise Application Integration** (**EAI**). The authors
    feel that this catalog is worth studying should one embark on a project that requires
    information/data flow from one system to another, including mobile device communication
    with backend services (MBAAS) that involves data synchronization and queuing mechanisms.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: EIP目录是关于在应用程序之间传输异步消息和点对点同步通信策略的非常有影响力的目录。Apache Camel库实现了在执行**企业应用集成**（**EAI**）时大多数常见模式。作者认为，如果一个人开始一个需要从系统到系统传输信息/数据的项目的学习，包括涉及数据同步和排队机制的移动设备与后端服务的通信（MBAAS），那么这个目录是值得研究的。
- en: J2EE design patterns catalog
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: J2EE设计模式目录
- en: 'This is a catalog that captures design experience in the form of a book entitled
    *Core J2EE Patterns: Best Practices and Design Strategies* by Deepak Alur, John
    Crupi, and Dan Malks. The book and the associated website deals with common solutions
    that can be leveraged while writing enterprise web applications. Even though conceived
    for the J2EE platform, the patterns outlined in the catalog can be used in any
    context where there is a programming model similar to the J2EE platform. Fortunately,
    the .NET server-side model is very similar to J2EE.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '这是一个以《核心J2EE模式：最佳实践和设计策略》（Core J2EE Patterns: Best Practices and Design Strategies）为书名，由Deepak
    Alur、John Crupi和Dan Malks编写的书籍所捕捉的设计经验目录。这本书和相关的网站讨论了在编写企业级Web应用程序时可以利用的常见解决方案。尽管是为J2EE平台设计的，但目录中概述的模式可以在任何存在类似J2EE平台编程模型的环境中应用。幸运的是，.NET服务器端模型与J2EE非常相似。'
- en: '| **Sr. no** | **Pattern class** | **Patterns** |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式类别** | **模式** |'
- en: '| 1 | Business tier pattern | Business delegate, session facade, service locator,
    transfer object, composite entity, transfer object, assembler, value list handler,
    business object, application service. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 业务层模式 | 业务代理，会话外观，服务定位器，传输对象，组合实体，传输对象，装配器，值列表处理器，业务对象，应用程序服务。|'
- en: '| 2 | Presentation tier patterns | Intercepting filter, front controller, composite
    view, view helper, service to worker, dispatcher view, context object, application
    controller. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 表示层模式 | 拦截过滤器，前端控制器，组合视图，视图助手，服务到工作者，视图调度器，上下文对象，应用程序控制器。|'
- en: '| 3 | Integration patterns | Data access object, service activator, domain
    store, web service broker. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 集成模式 | 数据访问对象，服务激活器，领域存储，Web服务代理。|'
- en: The authors believe that the J2EE catalog has been used extensively in the .NET
    platform, especially after Microsoft released the ASP.Net MVC programming model.
    The catalog is a rich source of ideas to structure your enterprise web application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作者认为，J2EE 目录在 .NET 平台上得到了广泛的应用，尤其是在微软发布 ASP.Net MVC 编程模型之后。该目录是构建企业级Web应用程序的丰富思想来源。
- en: DDD-based patterns
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于DDD的模式
- en: The book entitled *Domain-Driven Design* by Eric J. Evans, released in the year
    2003, is not a book on patterns in itself. The primary goal of the book is to
    outline a method by which one can create persistent ignorant domain models by
    leveraging the ubiquitous language used by the stakeholders in a business scenario.
    The book contains a lot of patterns and idioms for architecture, design, and application
    integration, in a model-driven manner.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Eric J. Evans 编著，于 2003 年发布的《领域驱动设计》（Domain-Driven Design）一书本身并不是一本关于模式的书籍。该书的主要目标是概述一种方法，通过利用业务场景中利益相关者使用的通用语言，可以创建持久的无知领域模型。书中包含了许多用于架构、设计和应用程序集成的模式和惯用语，以模型驱动的方式进行。
- en: '| **Sr. no** | **Pattern type** | **Patterns** |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式类型** | **模式** |'
- en: '| 1 | Patterns for supple design | Intention-revealing interfaces, side-effect-free
    functions, assertions, conceptual contours, standalone classes, closure of operations,
    declarative design. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 适应性设计模式 | 表明意图的接口，无副作用函数，断言，概念轮廓，独立类，操作封闭，声明性设计。|'
- en: '| 2 | Patterns for domain model expression | Associations, entities (reference
    objects), value objects, services, modules (packages). |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 领域模型表达式模式 | 关联，实体（引用对象），值对象，服务，模块（包）。|'
- en: '| 3 | Patterns for domain model integrity | Bounded context, context map, shared
    kernel, anticorruption layer, open host service, published language. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 领域模型完整性模式 | 限界上下文，上下文映射，共享内核，反腐败层，开放主机服务，发布语言。|'
- en: '| 4 | Patterns for domain model distillation | Core domain, generic subdomains,
    segregated core, abstract core. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 领域模型提炼模式 | 核心领域，通用子领域，隔离核心，抽象核心。|'
- en: This is one of the most influential books in terms of thought leadership towards
    creating a methodology that goes along with the Agile development models. The
    ideas from this book have percolated deep into building the present day software
    systems.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在创建与敏捷开发模型相匹配的方法论方面的最具影响力的书籍之一。这本书中的思想已经深入到构建当今的软件系统中。
- en: Arlow/Nuestadt patterns
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Arlow/Nuestadt 模式
- en: Jim Arlow and Ila Nuestadt published a book entitled *Enterprise Patterns and
    MDA*. The book is based on the concept of an archetype borrowed from the works
    of Carl Gustav Jung. Archetypes are primordial entities that occur time and again
    in the sociocultural context across cultures. Business archetypes are entities
    that occur in a business context (where business is a socio-economic activity).
    The business archetypes covered in the book include party, CRM, product, business
    rules, order, inventory, units, and so on. Archetypes help model the business
    problem, and this gives a clear indication of the expected composition and behavior
    of the solution. Archetypes are a powerful meme that provide direct mapping between
    the business and solution models, thereby avoiding mismatch during business analysis,
    design, and implementation. The ideas and schema from the book can be used to
    write better enterprise software products.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 吉姆·阿罗和伊拉·纽斯塔特出版了一本名为《企业模式和MDA》的书。这本书基于卡尔·古斯塔夫·荣格作品中的原型概念。原型是原始实体，在跨文化的社会文化背景下反复出现。商业原型是在商业环境中出现的实体（其中商业是一种社会经济活动）。书中涵盖的商业原型包括聚会、CRM、产品、业务规则、订单、库存、单位等。原型有助于建模业务问题，这为解决方案的预期组成和行为提供了明确的指示。原型是一种强大的文化基因，它提供了业务模型和解决方案模型之间的直接映射，从而避免了在业务分析、设计和实施过程中的不匹配。书中的思想和模式可以用来编写更好的企业级软件产品。
- en: '| **Sr. no** | **Pattern type** | **Patterns** |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式类型** | **模式** |'
- en: '| 1 | Party archetype pattern | PartyIdentifier, RegisteredIdentifier, PartySignature,
    PartyAuthentication, address, person, ISOGender, ethnicity, BodyMetrics, PersonName,
    organization, company, company names, identifiers for companies, company organizational
    units, partnerships and sole proprietors, preferences, PartyManager. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 聚会原型模式 | 聚会标识符，注册标识符，聚会签名，聚会认证，地址，个人，ISOGender，种族，身体测量，个人姓名，组织，公司，公司名称，公司标识符，公司组织单位，合伙人和个体经营者，偏好，聚会管理员。
    |'
- en: '| 2 | Party relationship archetype pattern | PartyRole, PartyRoleType, PartyRelationshipType,
    responsibilities, capabilities. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 聚会关系原型模式 | 聚会角色，聚会角色类型，聚会关系类型，责任，能力。 |'
- en: '| 3 | Customer relationship management archetype pattern | Customer, CustomerCommunicationManager,
    customer communication, CustomerServiceCase. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 客户关系管理原型模式 | 客户，客户沟通管理器，客户沟通，客户服务案例。 |'
- en: '| 4 | Product archetype pattern | ProductType, ProductInstance, SerialNumber,
    batch, product specification, ProductCatalog, CatalogEntry, packages, PackageType,
    package instance, combining ProductTypes, rule-driven package specification, ProductRelationships,
    price, package pricing, measured products, services, ServiceType and ServiceInstance,
    product pleomorphs. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 产品原型模式 | 产品类型，产品实例，序列号，批量，产品规格，产品目录，目录条目，包装，包装类型，包装实例，组合产品类型，规则驱动的包装规格，产品关系，价格，包装定价，测量产品，服务，服务类型和服务实例，产品多形态。
    |'
- en: '| 5 | Inventory archetype pattern | The inventory archetype, ProductInventoryEntry,
    ServiceInventoryEntry, inventory capacity planning, inventory management, availability,
    reservations. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 库存原型模式 | 库存原型，产品库存条目，服务库存条目，库存容量规划，库存管理，可用性，预订。 |'
- en: '| 6 | Order archetype pattern | The order archetype, PurchaseOrder, SalesOrder,
    OrderLine, PartySummaryRoleInOrder, DeliveryReceiver, ChargeLine, OrderManager,
    OrderEvents, order status, LifeCycleEvents, AmendEvents, AmendOrderLineEvent,
    AmendPartySummaryEvent, AmendTermsAndConditionsEvent, DiscountEvent, DespatchEvent,
    ReceiptEvent, OrderPayment, PaymentEvents, payment strategy, PurchaseOrder process,
    PurchaseOrder cancellation, process PurchaseOrder, SalesOrder process archetype,
    SalesOrder process, process SalesOrder, OrderProcess documentation. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 订单原型模式 | 订单原型，采购订单，销售订单，订单行，订单中的聚会摘要角色，交货接收者，费用行，订单管理员，订单事件，订单状态，生命周期事件，修正事件，修正订单行事件，修正聚会摘要事件，修正条款和条件事件，折扣事件，发货事件，收货事件，订单支付，支付事件，支付策略，采购订单流程，采购订单取消，处理采购订单，销售订单流程原型，销售订单流程，处理销售订单，订单流程文档。
    |'
- en: '| 7 | Quantity archetype pattern | Quantity archetype pattern, metric, units/SystemOfUnits,
    SIBaseUnit, DerivedUnit, ManHour, quantity, StandardConversion/UnitConverter.
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 数量原型模式 | 数量原型模式，度量，单位/系统单位，SIBaseUnit，派生单位，人工小时，数量，标准转换/单位转换器。 |'
- en: '| 8 | Money archetype pattern | Money archetype pattern, currency, locale,
    ISOCountryCode, ExchangeRate/CurrencyConverter, payment. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 货币原型模式 | 货币原型模式，货币，地区，ISOCountryCode，汇率/货币转换器，支付。|'
- en: '| 9 | Rule archetype pattern | Rule archetype pattern, business rules/system
    rules, RuleElement, RuleContext, rule evaluation, ActivityRule, RuleSet, RuleOverride.
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 规则原型模式 | 规则原型模式，业务规则/系统规则，RuleElement，RuleContext，规则评估，ActivityRule，RuleSet，RuleOverride。|'
- en: The authors have borrowed ideas from the book, while creating an ontology for
    realizing a **domain-specific language** (**DSL**) on a mobile-based healthcare
    application. If one is embarking on creating a DSL-based system architecture,
    this book can be a good starting point for rich domain models based on business
    archetypes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作者在为基于移动医疗应用程序实现**领域特定语言**（**DSL**）创建本体时借鉴了书中的想法。如果一个人开始创建基于 DSL 的系统架构，这本书可以是一个基于业务原型的丰富领域模型的好起点。
- en: Should we use all of these?
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们是否应该使用所有这些？
- en: Pattern catalogs are available to deal with various concerns of software development,
    be it design, architecture, security, data, and so on. Most applications, or even
    frameworks, leverage only a fraction of the patterns listed earlier. Understanding
    the pattern catalogs and their applicability is a rich source of design ideas
    for any software developer. A developer should be careful to avoid the malady
    of so-called **pattern diarrhoea**.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 模式目录可用于处理软件开发的各种关注点，无论是设计、架构、安全、数据等等。大多数应用程序，甚至框架，只利用了之前列出的模式的一小部分。理解模式目录及其适用性是任何软件开发者设计灵感的丰富来源。开发者应小心避免所谓的**模式腹泻**。
- en: '| **Sr. no** | **Pattern catalog** | **Primary use-case** |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **模式目录** | **主要用例** |'
- en: '| 1 | GoF patterns | These are fundamental patterns which occur time and again,
    regardless of the domain. These are used in a context agnostic manner. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 1 | GoF 模式 | 这些是无论在哪个领域都会反复出现的根本模式。它们以无上下文的方式使用。|'
- en: '| 2 | POSA catalog | The areas where these patterns are relevant include concurrency
    management, distributed programming, middleware software, and so on. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 2 | POSA 目录 | 这些模式相关的领域包括并发管理、分布式编程、中间件软件等等。|'
- en: '| 3 | POEAA catalog | Enterprise web application development using .NET and
    JEE platforms. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 3 | POEAA 目录 | 使用 .NET 和 JEE 平台进行企业级 Web 应用程序开发。|'
- en: '| 4 | EIP | Application integration in modern enterprises. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 4 | EIP | 现代企业中的应用集成。|'
- en: '| 5 | J2EE design patterns | Writing web applications using .NET and Java.
    |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 5 | J2EE 设计模式 | 使用 .NET 和 Java 编写 Web 应用程序。|'
- en: '| 6 | DDD | In fact, this book is a framework for developing rich domain models
    in a persistent ignorant manner. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 6 | DDD | 事实上，这本书是一个用于以持久无知的方式开发丰富领域模型的框架。|'
- en: '| 7 | Arlow/Nuestadt | Very useful when we are writing enterprise applications,
    and no need to break one''s head to create the database schema. Most of the entities
    are available here as a business archetype. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 7 | Arlow/Nuestadt | 非常适用于编写企业应用程序时，无需费心创建数据库模式。大多数实体都作为业务原型在这里可用。|'
- en: The C# language and the .NET platform
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C# 语言和 .NET 平台
- en: Microsoft (MS) initially placed their bets on an enterprise architecture strategy
    called **Windows DNA**, centered on the **Distributed Component Object Model**
    (**DCOM**). The advent and traction of the Java programming model forced Microsoft
    to rework their strategy, so they decided to create a virtual machine platform
    called .NET. The .NET platform was released in 2002, and it was monikered Microsoft's
    Java. The old adage i*mitation is the sincerest form of flattery* was echoed by
    industry pundits. Web development is done using the ASP.Net Web Forms programming
    model, and desktop development is based on Windows forms. They also created a
    new language for the new platform, named C#. For platform interoperability, they
    created .NET remoting architecture, which became the gateway for communication
    between homogeneous systems (including CLR-managed and unmanaged) via TCP and
    DCOM protocols. For communication with heterogeneous systems, open standards such
    as SOAP and WSDL were leveraged by remoting objects, either self-hosted or hosted,
    within an IIS context.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 微软（MS）最初押注于一种名为**Windows DNA**的企业架构策略，该策略以**分布式组件对象模型**（**DCOM**）为中心。Java编程模型的兴起和普及迫使微软重新调整其策略，因此他们决定创建一个名为.NET的虚拟机平台。.NET平台于2002年发布，被称为微软的Java。行业专家们重申了古老的谚语“模仿是最真诚的恭维”。Web开发使用ASP.Net
    Web Forms编程模型，桌面开发基于Windows窗体。他们还为这个新平台创建了一种新语言，命名为C#。为了平台互操作性，他们创建了.NET远程架构，该架构成为通过TCP和DCOM协议在同类系统（包括CLR托管和非托管）之间通信的门户。对于与异构系统的通信，远程对象利用了如SOAP和WSDL等开放标准，这些远程对象可以是自托管的或托管在IIS上下文中。
- en: 'In 2003, Microsoft released .NET v1.1, which fixed many of the bugs in .NET
    v1.0\. The release of Microsoft .NET 1.1 encouraged people to bet their future
    on this platform. There was no application server in its offering. This led to
    some delay in the adoption of the platform. A code snippet in C#, which computes
    the average of a series of numbers through the command line, is shown as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在2003年，微软发布了.NET v1.1，该版本修复了.NET v1.0中的许多错误。Microsoft .NET 1.1的发布鼓励人们在这个平台上押注他们的未来。它没有提供应用程序服务器。这导致了对该平台的采用出现了一些延迟。以下是一个C#代码片段，它通过命令行计算一系列数字的平均值：
- en: '[PRE1]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In 2005, Microsoft added a lot of features to their platform, which included
    generics and anonymous delegates. With C# 2.0, we can rewrite the average computation
    program by using generics and anonymous delegates as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在2005年，微软为他们平台添加了许多功能，其中包括泛型和匿名委托。在C# 2.0中，我们可以通过使用泛型和匿名委托来重写平均计算程序，如下所示：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The release of .NET platform 3.0 overcame the shortcomings of the previous releases
    by introducing WCF, WPF, and **Windows Workflow Foundation** (**WF**), which coincided
    with the release of the Vista platform.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: .NET平台3.0的发布通过引入WCF、WPF和**Windows Workflow Foundation**（**WF**）克服了先前版本的不足，这些都与Vista平台的发布相吻合。
- en: 'Microsoft released version 3.5 of the platform with some key features including
    LINQ, lambda, and anonymous types. They also released the C# 3.0 programming language.
    Using type inference and lambda expressions, the average computation program is
    rewritten as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 微软发布了平台3.5版本，其中包括LINQ、lambda和匿名类型等关键特性。他们还发布了C# 3.0编程语言。通过类型推断和lambda表达式，平均计算程序被重写如下：
- en: '[PRE3]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With Visual Studio 2010, Microsoft released C# 4.0 with support for dynamic
    programming. The following code snippet demonstrates dynamic typing (based on
    `DynamicObject`) and ExpandoObjects. The following code snippet shows how one
    can create a custom object that can add arbitrary properties and methods:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio 2010中，微软发布了支持动态编程的C# 4.0。以下代码片段演示了动态类型（基于`DynamicObject`）和ExpandoObjects。以下代码片段展示了如何创建一个可以添加任意属性和方法的自定义对象：
- en: '[PRE4]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following code snippet shows how one can use `ExpandoObject` to add a property
    to a type we created. We will be leveraging the dynamic feature of C# 4.0:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何使用`ExpandoObject`为我们创建的类型添加属性。我们将利用C# 4.0的动态特性：
- en: '[PRE5]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In 2012, Microsoft released version 5.0 of the C# programming language, which
    incorporated a declarative concurrency model based on the `async`/`await` paradigm.
    The following C# code demonstrates the usage of `async`/`await`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在2012年，微软发布了C#编程语言的5.0版本，该版本引入了一个基于`async`/`await`范式的声明式并发模型。以下C#代码演示了`async`/`await`的用法：
- en: '[PRE6]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With Visual Studio 2015, Microsoft released C# 6.0, which mostly contains cosmetic
    changes to the language. Additionally, C# 7.0 does not add many features to the
    language. The .NET Core released by Microsoft runs on Windows GNU Linux and MAC
    OS X, promises to make C# a multiplatform/cross platform language. The acquisition
    of Xamarin has helped Microsoft to foray into cross-platform, native code-based
    mobile development.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Visual Studio 2015的发布，微软发布了C# 6.0，它主要包含对语言的细微改动。此外，C# 7.0并没有为语言添加很多新特性。微软发布的.NET
    Core可以在Windows、GNU/Linux和MAC OS X上运行，承诺使C#成为一种多平台/跨平台语言。Xamarin的收购帮助微软进入了基于原生代码的跨平台移动开发领域。
- en: C# language and the singleton pattern
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#语言与单例模式
- en: The authors consider the singleton pattern, the way it was presented in the
    GoF book, as some kind of anti-pattern. A lot has been written about how to implement
    it in a multi-core/multi-threaded environment. Constructs such as the double-checked
    locking pattern have been implemented to incorporate lazy loading while implementing
    singleton.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 作者认为单例模式，正如在GoF（设计模式：可复用面向对象软件的基础）一书中所描述的那样，是一种反模式。关于如何在多核/多线程环境中实现它的讨论已经有很多。例如，双重检查锁定模式已经被实现，以在实现单例的同时引入懒加载。
- en: The C# programming language has got a nifty feature called a static constructor,
    which helps to implement the singleton pattern in a thread-safe manner. The static
    constructor is guaranteed to be called before any method (including the constructor)
    is called. We believe we can stop cutting down trees in order to write about the
    singleton pattern, at least in the .NET world.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: C#编程语言有一个叫做静态构造函数的巧妙特性，它有助于以线程安全的方式实现单例模式。静态构造函数保证在调用任何方法（包括构造函数）之前被调用。我们认为我们可以停止砍伐树木来撰写关于单例模式的文章，至少在.NET世界中是这样。
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The pattern movement has revolutionized the way people are developing software.
    By capturing the wisdom of experts in their respective areas, pattern catalogs
    can be used for software engineering, library design, and all areas where they
    are available. The famous GoF pattern book started the whole movement in the year
    1994\. Some notable catalogs include POSA, POEAA, EIP, J2EE, DDD, and Arlow/Nuestadt.
    We have also seen how a multi-paradigm language such as C# is well-suited for
    pattern-based software development, considering the language's evolution in terms
    of features. We will continue to explore the applicability and consequence of
    patterns in the following chapters. We will also be looking at the key design
    principles, and will explain the need for design patterns using an application
    case study.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 模式运动彻底改变了人们开发软件的方式。通过捕捉各自领域的专家智慧，模式目录可以用于软件工程、库设计以及它们可用的所有领域。著名的GoF模式书籍在1994年启动了整个运动。一些值得注意的目录包括POSA、POEAA、EIP、J2EE、DDD以及Arlow/Nuestadt。我们也看到了像C#这样的多范式语言如何非常适合基于模式的软件开发，考虑到语言在功能方面的演变。我们将在接下来的章节中继续探讨模式的应用性和后果。我们还将探讨关键设计原则，并使用应用案例研究来解释设计模式的需求。
