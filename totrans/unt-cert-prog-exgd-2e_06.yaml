- en: '*Chapter 6*: Purchasing In-Game Items and Advertisements'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue with building our shop scene by adding functionality
    such as introducing the player's in-game currency and looking at how to deduct
    and increase it.
  prefs: []
  type: TYPE_NORMAL
- en: Monetization is when a game is free to download (typically titled **free-to-play**)
    and the developer encourages or offers the player to buy items, such as the latest
    weapon, extra art modification visuals, and more, with the player's real money
    (with a bank/debit card). Another way of creating profit from a free-to-play game
    is by offering adverts that are incorporated into the game. For example, if the
    player wants a new ship or an extra life, they can watch a 30-second advert at
    no real monetary cost to them, but as the developer, we can receive revenue when
    an advert is watched. Of course, a balance must be considered when a game is made,
    and some companies will use all sorts of addictive psychology to encourage the
    player to buy upgrades or watch as many adverts as possible. This could lead a
    single player to sometimes pay well into the thousands of their real money. It
    is up to you how you want to plan and make your own game outside of this book;
    but for this chapter, we will create our own shop that offers players the chance
    to watch an advert to gain extra in-game credits.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Buying upgrades for our player's ship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buying items, watching adverts, and preparing to start a game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the `PlayerSpawner` script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will understand the process of when to trigger
    an advert and how we can reward the player, while giving constant feedback. We
    will make use of the asset store and Unity's online dashboard system.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: The core exam skills covered in this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*We will cover programming core interactions in this chapter*:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and configuring game object behavior and physics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and configuring inputs and controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*We will also cover developing application systems*:'
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting scripts for the application interface flow, such as menu systems,
    UI navigation, and application settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpreting scripts for user-controlled customization, such as character creators,
    inventories, storefronts, and in-app purchases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing scripts for user progression features, such as scoring, leveling,
    and in-game economies, utilizing technologies such as Unity Analytics and PlayerPrefs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing scripts for two-dimensional overlays, such as **Heads-Up Displays**
    (**HUDs**), minimaps, and advertisements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying scripts for saving and retrieving application and user data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*We will also cover programming for scene and environment design*:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying methods for implementing game object instantiation, destruction,
    and management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Finally, we will cover working in professional software development teams*:'
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing techniques for structuring scripts for modularity, readability,
    and reusability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project content for this chapter can be found at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_06](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_06).
  prefs: []
  type: TYPE_NORMAL
- en: You can download the entirety of each chapter's project files at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: All of the content for this chapter is held in the chapter's `unitypackage`
    file. There is no `Complete` folder for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3MASWFJ](https://bit.ly/3MASWFJ).'
  prefs: []
  type: TYPE_NORMAL
- en: Buying upgrades for our player's ship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will cover the process of buying upgrades for our player''s
    ship. This includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Credit balance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option to buy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting the player know the item has been sold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows our shop scene with its selection grid and two
    purchased items marked as **SOLD**. Above the selection grid, to the left, is
    the user''s current in-game bank balance and an image showing what the player''s
    ship currently looks like with the two upgrades applied. Lastly, to the right
    is the option to buy the currently selected item, which is **C. Bomb**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Our shop scene with currency, a sold sign, and an option to
    buy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.01_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Our shop scene with currency, a sold sign, and an option to buy
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will return to the script that is responsible for purchasing
    upgrades and applying them to the player's ship. In the `PlayerShipBuild` script,
    we will add global variables that will hold the player's weapon upgrades in an
    array, as well as game object buttons and the player's in-bank balance.
  prefs: []
  type: TYPE_NORMAL
- en: We will then hook up each of these new variables to the text and game object
    buttons in our scene and from there, we will add our own methods to turn buttons
    on or off and to determine whether the player has enough in-game credits to make
    purchases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by entering these new variables into our shop scene by going to
    the `PlayerShipBuild` script in the `Assets/Script` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following variables to our `PlayerShipBuild` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have mainly added game objects that hold the visualization of our shop scene,
    but we have also added a scriptable object that's used to give the player's ship
    its own property values, such as speed, health, what type of bullets are used,
    and more. We will make use of some of these variables in the next code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will update the `PlayerShipBuild` script by adding code to the `Start`
    function by getting a reference to the bank game object and the **BUY?** button
    in our shop scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code resets or assigns the variables to game objects in the **Hierarchy**
    window of the Unity Editor. I will explain these variables briefly here and go
    into more detail when we use them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`purchaseMade` is a Boolean variable that will only accept a `true` or `false` value.
    We are setting it to `false` here as a form of reset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bankObj`: In the `bank`. We are assigning that game object of this variable
    for later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then take the `bank` integer, which currently contains a value of `600`,
    and we cast (assign) it as a `string` value so that it displays the value in our
    shop scene under the three-dimensional model of the player's ship.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last variable is then assigned the `BUY ?` game object so that we can activate
    and deactivate the buy functionality whenever required in the **Scene** or **Game** window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TurnOffPlayerShipVisuals`: This method will reset the visuals of the player''s
    ship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PreparePlayerShipForUpgrade`: This method creates a player''s ship so that
    when it has all the upgrades applied, it can be sent into the game to be played.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have our variables made and assigned, we can move on to the conditions
    of the code. Scroll down in the script until you get to the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `if` statement, we are going to check whether the item we are attempting
    to buy has not already sold out in the shop (the only reason for an item to be
    sold out is because we have already bought it) and that we can afford it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We start by entering a comment to notify ourselves or any other programmer that
    at this point in the code, we are going to check whether the item we are attempting
    to buy is not already sold out. From here, we add an `if` statement condition
    that checks the `target` variable (the item we raycasted, as mentioned in the
    *Selecting game objects with raycasts* section of the previous chapter) to see
    whether it contains a `TextMesh` component holding a `string` (text) value that
    doesn't already hold the `"SOLD"` value. If it does, then we run the `SoldOut`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: If the item hasn't already sold out, then we run two methods—the first is `Affordable`,
    which means we're going to check whether we can buy the item with the current
    amount of credit we have. If we don't have enough credit, the `LackOfCredits`
    method is run.
  prefs: []
  type: TYPE_NORMAL
- en: We have created three new methods, called `Affordable`, `LackOfCredits`, and
    `SoldOut`; let's now go through each one, starting with `Affordable`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Outside of the `AttemptSelection` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Affordable` method checks whether the `bank` integer (which currently contains
    the value `600`) is equal or greater than the value of the button that we have
    selected (`target`).
  prefs: []
  type: TYPE_NORMAL
- en: Next is an `if` statement that checks whether the `bank` integer value is greater
    than or equal to the `string cost` value of the selected item. Because we can't
    compare the value of a `string` variable to an `int` variable, we need to convert
    the `string` variable to an `int` variable. To do this, we use `System.Int32.Parse()`
    and enter the `ShopSelection.cost` string value in the parse brackets.
  prefs: []
  type: TYPE_NORMAL
- en: If we can buy the item, then we set `buyButton` to active, which is a button
    the player can press to buy the item. Above `buyButton.SetActive(true)` is a log
    to Unity's **Console** window to confirm that a purchase is being made for bug-checking
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The second method we wrote earlier was the `LackOfCredits` method, which checks
    in a similar way by casting the `TextMesh` component value if it's less than the
    `bank` integer value. If it is, we send a `"CAN'T BUY"` message to Unity's `.Find` is
    much slower compared to something like `.GetComponent` used on its own. `.Find` has
    to go through each game object until it finds the matching string—if it even exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We could also compare performance versus flexibility as well—for example, `transform.GetChild` ([https://docs.unity3d.com/ScriptReference/Transform.GetChild.html](https://docs.unity3d.com/ScriptReference/Transform.GetChild.html))
    will get the child that is specific to the number given to it in its parameter,
    which is also faster than using `.Find`. However, if the game object's hierarchy
    has changed during development, this would cause an error as it is no longer able
    to find the game object. The same could be said for `.GetComponent`, which can
    cause errors if it doesn't exist in the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The third is the `SoldOut` method, which is currently set to log to the Unity
    Editor `SOLD OUT`, but yet again, we could add other functionality to this at
    a later date, such as applying a sound effect or playing an animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make two empty methods. We will fill their content in later on in the chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script and return to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reflecting on this section, we have coded in our variables and assigned them
    when the script begins with the `Start` function. We have also coded in a few
    methods that check the balance credit compared to the selected value.
  prefs: []
  type: TYPE_NORMAL
- en: We can now move on to updating our player ship's visuals in the shop scene and
    we can also see what the player's ship looks like in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Updating visual representations of our player's ship
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to code in capability so that the player's ship
    visuals update when a purchase is made and create and update another ship behind
    the scenes so that it can be sent on to the next scene to play.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Selecting game objects with raycasts* section of the previous chapter,
    we dragged and dropped our `SelectionQuad` game objects from the **Hierarchy**
    window into the **Inspector** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the majority of the `shop` game objects grayed
    out on the **Inspector** window so that we can focus on the new variable entries
    under **Visual Weapons**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Visual Weapons displaying what will be attached to the player''s
    ship'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.02_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Visual Weapons displaying what will be attached to the player's
    ship
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the housing of the potential player ship upgrades, we need to apply
    the following to the `Visual Weapons` game object array using the previous screenshot
    as reference:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the three empty game object fields, click on the circle on the right of
    the field, and in the dropdown, begin typing `energy +1` into the search bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as you see **energy + 1**, double-click it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for `c. Bomb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for `b. Shot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, update the `Player_Default` asset file via the small remote circle to
    the right of it. We will go into more detail about this when we put it into practice
    in code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene and return to the `PlayerShipBuild` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now enter the content for our `TurnOffPlayerShipVisuals` method. This
    method is implemented in the `Start` function to simply reset the scene so that
    the only visual representation is the three-dimensional model of the player''s
    ship:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code runs a `for` loop that goes through each of the game objects in the
    array of the `Visual Weapons` object that we dragged and dropped into the **Inspector**
    window.
  prefs: []
  type: TYPE_NORMAL
- en: We have updated our player's ship model so that when we buy an item, it will
    update in the **Scene**/**Game** window by simply manipulating the activity of
    our game objects.
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to focus more on the player's ship code and the two other buttons
    on the selection grid—**BUY?** and **WATCH AD**.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our player's ship to be used in the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is aimed at preparing our player's ship so that it can be sent
    to the next scene to play. We will create a standard ship first that the player
    will not be able to see, apart from a visual representation of it (there are two
    ships in the scene but the player can only see one).
  prefs: []
  type: TYPE_NORMAL
- en: So, if the player makes some purchases in our shop, we need to create a ship
    and add its visual and physical upgrades so that we can see it in action in the
    next scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to return to the `PlayerShipBuild` script and add the content to our
    empty `PreparePlayerShipForUpgrade` method to help support making a player''s
    ship with its new upgrades:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The method creates (`instantiates`) a `Player_Ship` game object from the `Resources`
    folder. We then turn off (`enabled` = `false`) its own script attachment; otherwise,
    we would be able to move and shoot with it in the shop scene.
  prefs: []
  type: TYPE_NORMAL
- en: We then move the `Player_Ship` object completely out of the **Scene**/**Game**
    window view.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we assign it the `defaultPlayerShip` asset file that we dragged and
    dropped into the scriptable object field in the **Inspector** window in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we revisited the `PlayerShipBuild` script and added more global
    variables and functionality to support the shop scene. Our game now has an in-game
    credit score and works out whether the player can afford a game item or not; the
    rest of the code in this section was for hiding game objects and preparing our
    player's ship to be carried over into the game scene.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will carry on with the `PlayerShipBuild` script and
    look into actually starting a game to play with the player's ship. We will also
    look at how the player can buy in-game credits by watching adverts with the use
    of the Unity dashboard and Unity Monetization from the Asset store.
  prefs: []
  type: TYPE_NORMAL
- en: Buying items, watching adverts, and preparing to start a game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at adding three more buttons to our shop scene.
    The first is `BUY?` for when we want to purchase an item. The second is `Watch
    Ad`—as soon as the player presses this button, an advert will load; once it's
    finished, the player is rewarded with `300` credits. Lastly, we'll add the `START`
    button, which will take the player to the `testLevel` scene with the upgrades
    they have purchased (if any).
  prefs: []
  type: TYPE_NORMAL
- en: We need to head back to the `PlayerShipBuild` script and scroll down to the
    `AttemptSelection` method, where we will add three `else if` statements to launch
    three different types of methods. The reason for this is that the three selections
    don't follow on from the scriptable object buttons; therefore, these items will
    never have outcomes such as `SOLD` or `itemText`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the complete `AttemptSelection` method with
    the focus drawn to the other three non-scriptable object buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Our shop buttons with three alternative methods to load when
    pressed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.03_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Our shop buttons with three alternative methods to load when pressed
  prefs: []
  type: TYPE_NORMAL
- en: We are going to look at the `BUY?` button first as it relates to what we are
    covering in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the BUY? button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will be hooking up the **BUY?** button so that it appears
    at the right time in the description panel. This button will only be displayed
    if the player hasn't already bought the item and if they have enough credits.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our shop scene with the **BUY?** button highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – BUY? button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.04_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – BUY? button
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start by coding the `PlayerShipBuild` script:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `PlayerShipBuild` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down to the `AttemptSelection` method after the curly brace, as in the
    following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `else if` code, as indicated in the preceding code. We can
    also use the screenshot from the previous section as a reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So, if the player clicks on the `target.name` equals the name of `BuyItem`
    method is called. Inside this method, the following code is executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We message the `purchaseMade` to `true`. This Boolean value is used later when
    we leave the shop scene to start the game. If `purchaseMade` is `true`, a set
    of procedures follows. The next line turns off the `buyButton` function as we
    no longer need to display the results. Finally, we remove the selection from the
    grid at the bottom of the screen as a refresh.
  prefs: []
  type: TYPE_NORMAL
- en: Following on from the `BuyItem` method, we now turn our focus to the `visualWeapons`
    game object, which, if you remember from earlier in this chapter, covers the visual
    representation of what we have bought and what our player ship will look like
    when playing in a game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing on inside the `BuyItem` method, add the following code to name and
    make all cases of `visualWeapons` active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We run a `for` loop to count how many `visualWeapons` objects we have in the
    array. Within the `if` statement, we check each `visualWeapon` name from the array
    to see whether it matches with the selection made in the selection grid's name.
    If it does, then we turn that particular `visualWeapon` object on so that we can
    see it in the shop selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing on in the `BuyItem` method, we add another method to send our upgrades
    to our player''s ship, along with our `bank` credit, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We run another method, called `UpgradeToShip`. This method will load the game
    object of the item purchased to the player ship we play in our game; we will go
    into further detail about this method shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we deduct from the `bank` value (using `System.Int32.Parse`, so it reads
    the `string` value as an `int` value) with the selection's `cost` scriptable object.
    We then represent the deduction by grabbing the reference from the bank's game
    object, called `bankText`, and updating its `text` value in the `TextMesh` component.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we update the selection from the selection grid that the item has been
    sold. This is updated to the button's value text.
  prefs: []
  type: TYPE_NORMAL
- en: That brings us to the end of the `BuyItem` method. But, as mentioned, we run
    the `UpgradeToShip` method, which loads the game object of that particular ship
    part and attaches it to a ship that is away from the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still, in the `PlayerShipBuild` script, let''s add the `UpgradeToShip` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `UpgradeToShip` method takes a `string` parameter titled `upgrade`. Earlier,
    we sent it the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This line of code came from the selection's scriptable object item name. This
    item's name (`ShopSelection.iconName`) is sent to `UpgradeToShip` as a `string`
    name (`upgrade`).
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `UpgradeToShip` method, we create (`instantiate`) a game object in
    the resources folder from the name of the shop's selection icon and store it in
    a game object variable, `shipItem`.
  prefs: []
  type: TYPE_NORMAL
- en: We then attach this `shipItem` game object to our `playerShip` object. This
    is the `playerShip` object that is not in the **Game** window view but will be
    sent to the next scene—the game-playing scene.
  prefs: []
  type: TYPE_NORMAL
- en: The `shipItem` game object's local position (its position compared to its parent
    game object, `playerShip`) is set to `0` (that is, its *x*, *y*, and *z* positions
    are set to `0`).
  prefs: []
  type: TYPE_NORMAL
- en: Save the script and return to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Play** button to begin play mode, and in the **Game** window,
    select the first item in the selection grid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have the ability to buy this item. If we click on buy, the button
    will no longer say the value, but instead will display **SOLD**, and the **BUY?**
    button will disappear if we attempt to select the same item again.
  prefs: []
  type: TYPE_NORMAL
- en: We have two buttons left to hook up and then we will have a fully functioning
    shop. Let's continue with the **START** button.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the START button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**START** is the button the player presses when they want to leave the shop
    scene and move on to playing the game.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows where the **START** button is located in the
    shop scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – START button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.07_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – START button
  prefs: []
  type: TYPE_NORMAL
- en: So, we can recall that in the previous section, we were coding in our `AttemptSelection`
    method, which runs when the player presses one of the buttons on the selection
    grid in the shop.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of this method are three `else if` statements. We have already
    set up one of the three buttons, the `else if` statement, which is the `AttemptSelection`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – START button will load the StartGame() method'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.06_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – START button will load the StartGame() method
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will be making sure that our player has purchased an item or upgrade
    from the shop (if anything) and load our first level:'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, at the bottom of the `AttemptSelection` method in our `PlayerBuild` script,
    enter the following `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When our `target` game object selection carries the `START` game object name,
    we fall into the `else if` statement and run the `StartGame` method. This method
    is small and the majority of its code depends on whether a purchase has been made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing on in our `PlayerShipBuild` script, add the `StartGame` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If `purchaseMade` is set to `true`, we fall into the `if` statement and name
    our `playerShip` game object `"UpgradedShip"`. We then check whether the `playerShip`
    object has made a purchase for more health (`"energy +1(Clone)"`). If the player
    has bought more health, we will set our `playerShip` object's `health` value to
    `2`. This means that our player can get hit twice before dying.
  prefs: []
  type: TYPE_NORMAL
- en: The `DontDestroyOnLoad` function takes the argument of `playerShip`, which means
    when the next scene loads, the `playerShip` game object will be carried over to
    the next scene.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we start our `testLevel` scene.
  prefs: []
  type: TYPE_NORMAL
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, after a purchase (or no purchase) is made, our shop scene will close and
    our `testLevel` will open with or without any purchases made. However we will
    not see the visual upgrades until we update our `PlayerSpawner` script later on
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Return to the Unity Editor and run **Play** mode to check whether the player
    ship upgrade is carried over.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now move on to the final `if else` statement—the **WATCH AD** button.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the WATCH AD button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last button we will be covering in this chapter is the **WATCH AD** button.
    In a lot of mobile devices' (Android's/iOS') free-to-play games (the game is free
    to play but makes money back with in-game purchases or adverts), the option for
    the player to enhance their experience with the game is to receive upgrades and
    modifications, gain in-game credits, and more if the player watches a 30-second
    advert. After watching the advert, the player is rewarded with credit. In this
    section, we are going to create this functionality with our code and Unity's online
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the location of the **WATCH AD** button in the
    selection grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_6.07_B183811.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – WATCH AD button
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to turn on Unity''s ad services in the Unity Editor and follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As before, if the **Services** tab isn''t available, we can find it under the
    Unity Editor **Window** tab | **General**, followed by **Services**, as in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Services location'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.08_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – Services location
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Services** tab and select **Ads**, as in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Turning Ads ON'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.09_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – Turning Ads ON
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, you may have a warning notification at the top of
    the **Services** window saying you don't have a project ID (marked with an *****
    in the screenshot). If you don't have this warning, you can skip the next set
    of instructions and set up the Ads service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix the issue with no project ID set up, we need to attach ours by doing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click the **Ads** section in the **Services** window, the **Project
    Settings** window appears. In the **Project Settings** window, **Services** would
    be expanded out from the list and **Ads** will be selected, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Project Settings with no project ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.10_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Project Settings with no project ID
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Select organization** under the **Create a Unity Project ID** heading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your organization will be on the list. Click on it (this was created when you
    created your account with Unity. Mine is called retrophil).
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Create project ID** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's likely the **Console** window will give off a few warnings, errors, and
    so on. Do not worry about these for now. Keep your attention on the **Project
    Settings** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will be presented with the following update to the **Project Settings**
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Project linked successfully'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.11_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – Project linked successfully
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue setting up **Ads** in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: We are asked if our app is targeted at children under age 13\. Our project isn't
    targeted for children in that range, so select **No** from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our project is now ready to have **Ads** turned on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **OFF** to turn our **Ads** service **ON**, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Ads Package'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.12_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.12 – Ads Package
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to activate the **Monetization** service via **Dashboard**.
    To do that, click the **Dashboard** link in the **Ads** section. This will load
    the Unity Dashboard in a browser. In the **Monetization** section click **Complete
    Activation**, then **Unity Ads**. You will then be allocated your Game Ids. Return
    to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By the time you''re reading this book, it is likely there will be an update
    for the Ads Package; if possible, install 3.7.5 still as it''s likely the later
    version will have a different/unfinished setup, meaning the following instructions
    will likely not relate or there might be unfinished methods. But if you want to
    (or have to) install the latest version, be sure to follow the Unity Ads documentation:
    [https://docs.unity.com/ads/UnityAdsHome.html](https://docs.unity.com/ads/UnityAdsHome.html).'
  prefs: []
  type: TYPE_NORMAL
- en: We are now at the point where Unity Ads is connected to our project. The **Project
    Settings** window also displays our Game Id for Android and iOS operating systems.
    These IDs are references for our game that the Google Play and Apple App Store
    will use to identify our game when it comes to sending adverts.
  prefs: []
  type: TYPE_NORMAL
- en: Each game ID will be different, so your game ID will be different from mine.
    When it comes to entering your game ID code, make sure you refer to yours, not
    mine.
  prefs: []
  type: TYPE_NORMAL
- en: We can now return to our `PlayerShipBuild` script and make a start with hooking
    up our **WATCH AD** button to display adverts.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching Unity reward adverts to our script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we are going to take placement information and extra functionality
    from the **Advertisement** library to create our reward adverts:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Unity Editor, from the `Assets/Script` folder, then take the following
    steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `PlayerShipBuild` script and at the top of the code that we need,
    import two extra libraries alongside our `UnityEngine` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`System.Collections` contain extra tools, such as `IEnumerator`, which is used
    for the `StartCoroutine` functions, which we will cover shortly.'
  prefs: []
  type: TYPE_NORMAL
- en: The other line of code imports Unity's **Advertisement** library, which we downloaded
    from our Ads Service, which will also be displayed in our Package Manager. Also,
    make sure you have Android selected as your platform in Build Settings.
  prefs: []
  type: TYPE_NORMAL
- en: What Is the Package Manager?
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity holds most of its add-ons/extra software and updates for components in
    the Package Manager. We can also check for updates for these packages. If you
    would like to know more about the Package Manager, check out the following link:
    [https://docs.unity3d.com/Manual/Packages.html](https://docs.unity3d.com/Manual/Packages.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add two interfaces to our `PlayerShipBuild` script as they are
    required for the Ads Services to work, `IUnityAdsInitializationListener` and `IUnityAdsListener`,
    and implement these in our class. These interfaces will give us callback (a callback
    is a method that runs when a process is done executing a specific task) methods
    to tell us what state our ads are in and when we can add code, such as rewards.
  prefs: []
  type: TYPE_NORMAL
- en: Further Information
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to know more about the Ads content, you can check out the
    Unity Documentation here: [https://docs.unity.com/ads/UnityAPI.html](https://docs.unity.com/ads/UnityAPI.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Carrying on with the `PlayerShipBuild` script, we declare our class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Our script will underline these interfaces with error lines because we haven't
    implemented their methods. We can do this now and fill them out correctly later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of typing the required methods out, we can highlight one of the interfaces
    in Visual Studio and let it type out the methods for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the `PlayerShipBuild` script, highlight one of the interfaces
    with your mouse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Highlighted interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.13_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – Highlighted interface
  prefs: []
  type: TYPE_NORMAL
- en: A dropdown will appear with what needs adding to our class. Click on **Show
    potential fixes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Show potential fixes dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.14_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – Show potential fixes dialog box
  prefs: []
  type: TYPE_NORMAL
- en: We will then be presented with a list of methods (A). Click `PlayerShipBuild`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a box appears asking to confirm the changes, click **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for the other interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, scroll down to the bottom of the `PlayerShipBuild` script to see
    our extra methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned, we will return to these methods and fill them out with regard
    to adding debug messages if an error occurs. The main method will be the `OnUnityAdsDidFinish`
    method, because that's where we will be rewarding the player with credit to their
    bank after watching an advert.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now continue adding the variables that will hold the ids to distinguish
    what platform we are running on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll back up to the top of the `PlayerShipBuild` script and add the following
    global variables with the others:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`androidGameId` and `iOSGameId` will hold the game IDs that we saw earlier
    when setting up the Ads Service in the **Project Settings** folder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`testMode` is set to `true`. On an actual device under test mode, you''ll get
    a proper Unity video test ad. You can test skipping or watching it in full. When
    you disable test mode for release, live video ads from Unity Ads advertisers will
    appear.'
  prefs: []
  type: TYPE_NORMAL
- en: '`adId` will hold a string that will be an ID for what type of advert you want
    to load. We will go into this a bit more shortly.'
  prefs: []
  type: TYPE_NORMAL
- en: Seeing as we have made our new variables accessible from the `SerializeField`
    attribute, we can add our Android and iOS Game Ids to these variables next.
  prefs: []
  type: TYPE_NORMAL
- en: Before we add any more code, save your `PlayerShipBuild` script and return to
    the Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your shop scene, expand out the **ShopManager** game object in the **Hierarchy**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand out **BuyingSelection** as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **shop** game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** window, we can see blank spaces for our Ids.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, all we need to do is open our **Project Settings** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Services** then **Ads** from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the **Android** ID and paste it into the **Android Game Id** field in the
    **Inspector** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the **iOS** ID and paste that into the **IOS Game Id** field in the **Inspector**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Copy Game id from Project Settings to Inspector'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.15_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.15 – Copy Game id from Project Settings to Inspector
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to add a function in our `PlayerShipBuild` script, that checks
    which device (iPhone/Samsung) is running our game. When we know which device is
    running, we can add the correct game ID and reward id to our advertisement initializer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we can add an `Awake` function and inside it, we will call a function that
    we haven''t added yet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can move on to declaring the `CheckPlatform` function; in the next
    line down from the `Awake` function, we can add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We've declared our function name and added a `gameId` variable that defaults
    to null.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will use conditional compilation to differentiate between what platform
    we are playing our game on so we can hook up the correct ids:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So, if we are using an iPhone/iPad device, we will assign the iOS game id to
    the variable called `gameId`. We will also be assigning the iOS reward to `adId`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: And, as you've probably guessed, we have an "else if" (it is spelled `elif`)
    that checks for an Android operating system (Samsung, Google Pixel devices, and
    so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we send the chosen `gameId` and its test mode condition and receive
    our Unity Ads callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Further Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you would like to know more about conditional compilation, check out this
    link: [https://docs.unity3d.com/Manual/PlatformDependentCompilation.html](https://docs.unity3d.com/Manual/PlatformDependentCompilation.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can imagine, when we load up our `SHOP` scene, our game checks to see
    whether it's being played through a portable device. If it is being played through
    a portable device, it will send the correct ids out to Unity. Next, we will need
    to load the advert so if the player does request an advert, we have it ready to
    show.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to load our advert with a small function. First, we need to
    check to see whether the Advertisement has finished initializing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To check and load an advert for our game scroll up to the `Start` function
    and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A coroutine will give us the ability to wait until the advert is initialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Outside of the `Start` function, enter the following code to check for when
    our advert can begin to load ready for the player:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code will loop until our `Advertisement` is initialized. Once it is initialized,
    the `LoadAd` method will run.
  prefs: []
  type: TYPE_NORMAL
- en: The `LoadAd` method will add an event listener, which will callback to our methods
    when specific tasks have been completed (when an advert is ready to be viewed,
    if there was an error, if the advert has started playing) that we've implemented
    from our two interfaces. The other thing the `LoadAd` method will do is take whichever
    advert id has been sent to it and load an advert specifically for the platform.
  prefs: []
  type: TYPE_NORMAL
- en: The next method is for our `PlayerShipBuild` script to load the advert ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It's important to note, whenever a Listener is added, remember to remove it
    when it's no longer required. If a listener is made, and the object is destroyed,
    this can cause issues as the listener may still be active. Also, if another listener
    is added that is doing the same job, you would be doubling or tripling callbacks,
    which in our case would mean doubling and tripling players' shop credits.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now move on to setting up the `WatchAdvert` function, which will be
    the beginning of our advert to trigger on mobile devices when the player presses
    the **WATCH AD** button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in the `PlayerShipBuild` script, scroll down to the `AttemptSelection`
    method, where we already have the two `else if` statements, and enter the final
    `else if` statement to trigger an advert when the player presses the **WATCH**
    **AD** button in our shop scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If this button is pressed, we run a method called `WatchAdvert`. We will talk
    about this method next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll to some space outside of all the other methods/functions and enter the
    following method to set up an advert for the player:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `WatchAdvert` method is very simple. It runs the static `Advertisement.Show`
    method and takes the reward id.
  prefs: []
  type: TYPE_NORMAL
- en: Our Advert is nearly hooked up. We can now go down to the bottom of the script
    and fill in our callback methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The methods and their purposes, in no particular order, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnInitializationComplete()`'
  prefs: []
  type: TYPE_NORMAL
- en: This method will run when our advert service has been initialized.
  prefs: []
  type: TYPE_NORMAL
- en: '`OnInitializationFailed(UnityAdsInitializationError error, string message)`'
  prefs: []
  type: TYPE_NORMAL
- en: If the advert service initialization has failed.
  prefs: []
  type: TYPE_NORMAL
- en: '`OnUnityAdsReady(string placementId)`'
  prefs: []
  type: TYPE_NORMAL
- en: When a Unity advert is ready to play.
  prefs: []
  type: TYPE_NORMAL
- en: '`OnUnityAdsDidError(string message)`'
  prefs: []
  type: TYPE_NORMAL
- en: An error happened with loading the advert.
  prefs: []
  type: TYPE_NORMAL
- en: '`OnUnityAdsDidStart(string placementId)`'
  prefs: []
  type: TYPE_NORMAL
- en: The advert has started playing.
  prefs: []
  type: TYPE_NORMAL
- en: '`OnUnityAdsDidFinish(string placementId, ShowResult showResult)`'
  prefs: []
  type: TYPE_NORMAL
- en: The advert has finished playing.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these methods has a line of code that fires an exception error because
    we haven't filled the methods in. It doesn't mean anything is wrong, it works
    more as a reminder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete all lines of code that have this code in the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will stop our errors. If you want to add a `Debug.Log()` to each of these
    methods, you can, so you know either of these methods fire. I will focus only
    on three of the methods, two of them for Initialization and one to add the reward
    to the shop's bank.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll to the method called `OnInitializationComplete()` and within its curly
    braces, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the second method, direct yourself to `OnInitializationFailed(UnityAdsInitializationError
    error, string message)` and enter the following code within its curly braces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `$` is used as an interpolation expression, which basically means whatever
    follows within curly braces will also be logged with the rest of the `string`.
    `error` will be the type of error, while `message` will carry a description of
    the error.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to know more about interpolation expressions, check out the
    following link: [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated).'
  prefs: []
  type: TYPE_NORMAL
- en: The last method is our reward given to the player. Navigate to the `OnUnityAdsDidFinish(string
    placementId, ShowResult showResult)` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have three possible outcomes for if an advert is viewed. The possibilities
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Finished`: Full advert has been watched.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Skipped`: The advert was skipped.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Failed`: Advert failed to load.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These states will come from the `showResult` variable. Let''s enter the three
    possible `if` statements and then we can fill the rest of the method in:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `OnUnityAdsDidFinish(string placementId, ShowResult showResult)`
    method''s curly braces, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For our game, we only need to add content to the `ShowResult.Finished` statement.
    Replace `// REWARD PLAYER` with the following code to reward the player with `300`
    credits to their bank:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first line we entered is a simple log to say the advert has landed in the
    `Finished` state. Next, we add `300` credits to our existing bank. Finally, we
    send the value to the `bankObj` `TextMesh` `text` value.
  prefs: []
  type: TYPE_NORMAL
- en: After the last `else if` in the `OnUnityAdsDidFinish` method, we finish by adding
    two lines of code. The first line loads another advert using the same reward id.
    The second line is a method that deselects all buttons in the shop (we covered
    this method in the last chapter).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, still just outside the last `else if` curly brace, enter the following
    two lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now in a position to test our **WATCH AD** button in our shop scene
    to see whether our advert template will load:'
  prefs: []
  type: TYPE_NORMAL
- en: Save the `PlayerShipBuild` script and return to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure your **Build Settings** are pointing to an Android build. Click the
    **Play** button in the Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Game** window, click on the **WATCH AD** button. We should be presented
    with the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Unity''s advert placeholder screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.16_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.16 – Unity's advert placeholder screen
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Close** button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hopefully, your on-screen credit should have gone from `600` to `900`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is the end of adding the functionality for the **WATCH AD** button. Save
    the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our shop scene is complete and fully functioning with the ability to watch an
    advert to gain credits so that the player can purchase items to use in their game.
    We now need to expand the `PlayerSpawner` script to support new items that can
    potentially be added to the player ship.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the PlayerSpawner script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If an item is purchased from our shop scene, this will affect what happens
    to our game scene when our player''s ship loads into the game. Our current `PlayerSpawner`
    script will not accommodate the `shop` scene ship, so we need to revisit this
    script to update its `CreatePlayer` method:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Unity Editor's `PlayerSpawner` script (`Assets/Script`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the `PlayerSpawner` script, with the other variables, add a `bool`
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `upgradedShip` Boolean will switch to `true` if a modified player ship is
    found in the level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the `Start` function in the `PlayerSpawner` script and add this
    as the last line with the `Start` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Currently, our `PlayerShipBuild` script disables the `Player` script in the
    `shop` scene, to stop the player from shooting in the `shop`. When we start our
    `testLevel`, we need to turn the `Player` script back on so they can move and
    shoot We also add the camera setup from being close up to the shop's display from
    all the way back on it's z-axis for our `testLevel` as a temporary fix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the content of the `CreatePlayer` method with the following code to
    update detection of what ship is in our scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We first need to confirm that the `PlayerSpawner` script can see whether an
    upgrade has been purchased in the scene. If a purchase has been made, the modified
    player ship will carry over to the level scene. If this is the case, we set the
    `upgradedShip` variable to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing on with the `PlayerSpawner` script, and still within the `CreatePlayer`
    method, we add an `if` statement, which instantiates the player:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Continuing on inside the `CreatePlayer` method, we will now need to check whether
    there is a player ship in the scene or whether the player has died. If there hasn't
    been an upgrade or the player has died, we will create a default player ship with
    the following code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `if` statement, we create our default player ship by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the `Died` property to `false` to stop the `if` statement repeating if the
    player has died.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate the `Player_Default` scriptable object, which contains all the standard
    properties for our player's ship, and store it in a variable named `actorModel`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we instantiate our player's ship, position it, and rotate it in the correct
    direction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in this `if` statement, we issue the `actorModel` variable containing
    all the properties that the player ship game object needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, if our player has been shopping and bought one or more upgrades, this
    will fall into the `else` condition, where we will find a game object called `UpgradedShip`.
    We will attach this game object to our `playerShip` game object variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code to set a store reference to `playerShip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our `playerShip` game object stored as an instance, we can now set it up
    so that it's in the correct position and has the correct size, rotation, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following functions to set our `playerShip` object up for the start
    of a game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We then move on to the last bit of code for the `PlayerSpawner` script where
    our player's ship is set up ready to start. Take note that even if the player
    purchases an upgrade, this won't create any complications with regard to getting
    the reference of the player ship.
  prefs: []
  type: TYPE_NORMAL
- en: Set the rotation so the player's ship faces the correct way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale the player's ship correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn the `Player` script off so the player can't control the ship while it carries
    out its intro animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the player's ship `Player`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, set the player's ship as a child to the `playerSpawner` game object
    as it belongs to the `playerSpawner` game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the `GameManager` script, scroll down to `void CameraSetup()` and
    change it's access modifier to `public`. So it reads `public void CameraSetup()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have updated the player's ship so that it is created for a default ship or
    as a customized one from the shop scene. Also, we have made it aware of the `PlayerTransition`
    script so that when the player's ship is created, it won't get stuck in the screen
    boundaries or the player won't be in a position where they aren't able to control
    the ship until its introductory animation has finished.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we now need to create and add our `b. Shot` weapon asset to our game.
    The majority of the scripting has already been done; it just needs to be attached
    to the correct components.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give our `b. Shot` prefab weapon its behavior, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Assets/Resources` and select `b. Shot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the `BShot Component` until it appears in the drop-down list, and then
    select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to apply our `bShotComponent` to the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the small, round remote circle next to the `player_BshotBullet`, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.17 – B Shot Component script with player_BshotBullet game object'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.17_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.17 – B Shot Component script with player_BshotBullet game object
  prefs: []
  type: TYPE_NORMAL
- en: Our `b. Shot` weapon will now fire. Next, we need to make the bullet travel,
    following a similar process as we did in *Chapter 2*, *Adding and Manipulating
    Objects*, where we made our first player bullet fire and travel across the screen.
    This means we can use the script we've already made and attach it to the `player_BshotBullet`
    prefab.
  prefs: []
  type: TYPE_NORMAL
- en: 'To attach and customize the `player_BshotBullet` prefab, we need to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Assets/Prefab/Player` and select `player_BshotBullet`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `PlayerBullet` until you see it in the drop-down list, and then select
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the `Assets/ScriptableObject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in the open space on the right side of the **Project** window and
    select **Create** | **Create Actor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new file in the `bShotBullet` and select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give it the following values in the **Inspector** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.18 – ShotBullet Scriptable Object and its properties'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.18_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.18 – ShotBullet Scriptable Object and its properties
  prefs: []
  type: TYPE_NORMAL
- en: 'We are approaching the end of this chapter. Now is the time to check everything
    out to see how it all plays out for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Save all the open scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the **Shop** scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Play** mode in the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try and buy all three ship upgrades (you will need to watch a couple of the
    Unity notification advert displays to get them all).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **START** button and you should see a screen such as the following
    one with our ship holding all three upgrades:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Our player ship with all the upgrades'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.19_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.19 – Our player ship with all the upgrades
  prefs: []
  type: TYPE_NORMAL
- en: Our player is fully equipped! If the player gets hit, they will lose a shield
    and the front cover on the ship will disappear. If the ship fires with the firepower
    upgrade, it will wipe out all the enemies. The atom bomb currently isn't programmed
    to do anything.
  prefs: []
  type: TYPE_NORMAL
- en: If you have come across any issues with this final section, you can check the
    official Unity guide, which also contains other information about adverts and
    rewards, if you are interested ([https://unityads.unity3d.com/help/unity/integration-guide-unity](https://unityads.unity3d.com/help/unity/integration-guide-unity)).
    Or compare our script and scene with the `Complete` folder of `Chapter6` from
    the downloaded project files link at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have reached the end of this chapter and also the end of
    the shop scene! Hopefully, you found this beneficial and can appreciate how Unity
    is keen to encourage developers to look at alternative ways of making money from
    a game with adverts instead of simply selling the games they develop. We will
    now summarize what we covered in this chapter and look at how we will build our
    game even further.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a scene that we can interact with to modify our
    player with in-app purchases and that we can also use to gain more in-game credits
    by watching adverts on an iPhone or Android phone to buy more items to further
    upgrade the player. We will look at building the game on mobile in the [*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245)
    section of this book, as well as how to hide the **AD** button on PC/macOS platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we carried all the items we bought over into the game, because of which
    the player's gameplay has been altered thanks to the modifications.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned a few times in this chapter, the scene had already been made for
    us in terms of the art. The reason for this was to allow you to experience raycasting
    objects and to understand that this is an alternative way of interacting in a
    scene. But what if the platform we are playing this game on is an iPad? An iPad
    is more of a square shape, compared to the letterbox shape of an iPhone or Android
    phone. If this is the case, our game camera would clip parts of our shop scene
    out.
  prefs: []
  type: TYPE_NORMAL
- en: You could also think of a more efficient way of using things such as `.Find`
    in your coding. If this is a concern of yours, don't worry—we address these issues
    in [*Chapter 9*](B18381_09_Epub.xhtml#_idTextAnchor161), *Creating a 2D Shop Interface
    and In-Game HUD*, where we implement Unity's own event system. For now, however,
    let's look at what we will cover in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to link up all of our scenes to create what
    we refer to as a game loop. This will help us understand the actual game layout
    as a whole.
  prefs: []
  type: TYPE_NORMAL
