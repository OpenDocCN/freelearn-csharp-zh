["```cs\napiVersion: v2\nname: myhelmdemo\ndescription: My Helm chart\ntype: application\nversion: 1.3.0\nappVersion: 1.2.0 \n```", "```cs\nchoco install kubernetes-helm \n```", "```cs\nhelm repo add <my-repo-local-name> https://mycharts.helm.sh/stable \n```", "```cs\nhelm repo update <my-repo-local-name 1> <my-repo-local-name 2>â€¦ \n```", "```cs\nhelm install <instance name> <my-repo-local-name>/<package name> -n <namespace> \n```", "```cs\nhelm status <instance name> \n```", "```cs\nhelm ls \n```", "```cs\nhelm delete <instance name> \n```", "```cs\nhelm install <instance name> <my-repo-local-name>/<package name> -f values.yaml --version <version> \n```", "```cs\n...--set <variable1>=<value1>,<variable2>=<value2>... \n```", "```cs\nhelm upgrade <instance name> <my-repo-local-name>/<package name>... \n```", "```cs\ndocker run -d \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  --privileged \\\n  --name rancher \\\n  rancher/rancher:stable \n```", "```cs\ndocker logs rancher 2>&1 | grep \"Bootstrap Password:\" \n```", "```cs\ncurl --insecure -sfL https://host.docker.internal/v3/import/6rd2jg4nntmkkw9z9mjhttrjfjj64cz9vl8zr6pr6tskbt6cc98zfz_c-2p47w.yaml | kubectl apply -f - \n```", "```cs\ncurl --insecure -sfL https://host.docker.internal/v3/import/6rd2jg4nntmkkw9z9mjhttrjfjj64cz9vl8zr6pr6tskbt6cc98zfz_c-2p47w.yaml > install.yaml \n```", "```cs\nkubectl apply -f install.yaml \n```", "```cs\nkubectl delete -f install.yaml \n```", "```cs\nminikube start --memory=6g --extra-config=kubelet.authentication-token-webhook=true --extra-config=kubelet.authorization-mode=Webhook --extra-config=scheduler.bind-address=0.0.0.0 --extra-config=controller-manager.bind-address=0.0.0.0 -p <your profile name> \n```", "```cs\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\nhelm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace\nhelm install grafana grafana/grafana --namespace monitoring \n```", "```cs\nkubectl get all -n monitoring \n```", "```cs\nkubectl --namespace monitoring port-forward service/prometheus-server 9090:80\nkubectl --namespace monitoring port-forward service/grafana 3000:80 \n```", "```cs\nkubectl get secret --namespace monitoring grafana -o jsonpath=\"{.data.admin-password}\" \n```", "```cs\necho -n <string to decode> | base64 -d \n```", "```cs\nhelm delete grafana\nhelm delete prometheus \n```", "```cs\nKcpu*<virtual CPU seconds> + Kmem*<Gigabytes seconds> + Kreq*<requests per seconds> \n```", "```cs\n<application name>-<revision name>.<environment>.<zone>.azurecontainerapps.io \n```", "```cs\n<application name>--<revision label>.<environment>.<zone>.azurecontainerapps.io \n```", "```cs\naz upgrade\naz extension add --name containerapp --upgrade \n```", "```cs\naz provider register --namespace Microsoft.App\naz provider register --namespace Microsoft.OperationalInsights \n```", "```cs\naz containerapp up '\n  --name <CONTAINER_APP_NAME> '\n  --image <REGISTRY_SERVER>/<IMAGE_NAME>:<IMAGE TAG> '\n  --ingress external '\n  --target-port <PORT NUMBER> '\n  --registry-server <REGISTRY SERVER URL> '\n  --registry-username <REGISTRY USERNAME> '\n  --registry-password <REGISTRY PASSWORD> \n```", "```cs\naz group create '\n  --name <resource group name> '\n  --location centralus\naz containerapp up --name <CONTAINER_APP_NAME> --image gcr.io/google-samples/hello-app:1.0 '\n  --resource-group <resource group name> '\n  --location centralus '\n  --environment <environment name> '\n  --ingress external --target-port 8080 '\n  --query properties.configuration.ingress.fqdn \n```", "```cs\naz containerapp show '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  -o yaml \n```", "```cs\naz containerapp update '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  --yaml mymodified.yaml \n```", "```cs\naz group delete --name <resource group name> \n```", "```cs\naz containerapp env create '\n  --name <CONTAINERAPPS_ENVIRONMENT> '\n  --resource-group <RESOURCE_GROUP> '\n  --location \"<AZURE LOCATION NAME>\" \n```", "```cs\naz group create '\n  --name <RESOURCE_GROUP> '\n  --location \"<AZURE LOCATION NAME>\" \n```", "```cs\naz containerapp env workload-profile add '\n  --resource-group <RESOURCE_GROUP> '\n  --name <ENVIRONMENT_NAME> '\n  --workload-profile-type <WORKLOAD_PROFILE_TYPE> '\n  --workload-profile-name <WORKLOAD_PROFILE_NAME> '\n  --min-nodes <MIN_INSTANCES> '\n  --max-nodes <MAX_INSTANCES> \n```", "```cs\naz containerapp env workload-profile delete '\n  --resource-group \"<RESOURCE_GROUP>\" '\n  --name <ENVIRONMENT_NAME> '\n  --workload-profile-name <WORKLOAD_PROFILE_NAME> \n```", "```cs\naz containerapp create '\n  --name <CONTAINER_APP_NAME> '\n  --image <REGISTRY_SERVER>/<IMAGE_NAME>:<TAG> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  --environment <ENVIRONMENT_NAME> '\n  --ingress <external or internal or omit this option> '\n  --target-port <PORT_NUMBER> '\n  --registry-server <REGISTRY SERVER URL> '\n  --registry-username <REGISTRY USERNAME> '\n  --registry-password <REGISTRY PASSWORD> \n```", "```cs\n az containerapp show '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  -o yaml \n```", "```cs\naz containerapp update '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  --yaml mymodified.yaml \n```", "```cs\naz containerapp create '\n  --name <CONTAINER_APP_NAME> '\n  --environment <ENVIRONMENT_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  --yaml myapp.yaml \n```", "```cs\naz containerapp revision list '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP> \n```", "```cs\naz containerapp replica list '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP> '\n  --revision <REVISIONNAME> \n```", "```cs\naz containerapp exec `\n  --name <CONTAINER_APP_NAME> `\n  --resource-group <RESOURCE_GROUP> `\n  --revision <REVISION_NAME> `\n  --replica <REPLICA_NAME> \n```", "```cs\naz containerapp delete '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> \n```", "```cs\naz containerapp env delete '\n  --name <ENVIRONMENT_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> \n```", "```cs\naz containerapp update '\n  --name <CONTAINER_APP_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  --yaml myappconfiguration.yaml \n```", "```cs\nidentity:\n...\nproperties:\nenvironmentId: \"/subscriptions/<subscription_id>/resourceGroups/â€¦..\"\nworkloadProfileName: My-GP-01\nconfiguration:\ningress:\nâ€¦\nmaxInactiveRevisions: 10\nsecrets:\n- name: <nome>\nvalue: <valore>\nregistries:\n- server: <server URL>\nusername: <user name>\npasswordSecretRef: <name of the secret that contains the password>\n- server: <server URL>\nidentity: <application identity resource id>\ntemplate:\ncontainers:\n- â€¦\ninitContainers:\n- ...\nscale:\nminReplicas: 1\nmaxReplicas: 5\nrules:\n- ...\nvolumes:\n- ... \n```", "```cs\n    - name: my-http-rule,\n      http:\n          metadata:\n                concurrentRequests: 100\n    - name: my-tcp-rule,\n      tcp:\n          metadata:\n                concurrentConnections: 100 \n    ```", "```cs\n - image: <IMAGE URL>:<TAG>\nname: <CONTAINER NAME>\nenv:\n- name: <variable name>\nvalue: <variable name>\n- name: <variable name>\nsecretRef: <secret name>\nresources:\ncpu: 0.2\nmemory: 100Mi\nprobes:\n- type: liveness\nâ€¦\n- type: readiness\nâ€¦\n- type: startup\nâ€¦\nvolumeMounts:\n- mountPath: /mypath\nvolumeName: myvolume \n```", "```cs\n ingress:\nexternal: true\ntargetPort: 3000\n# only for TCP communication. HTTP/S always use 80 and 443 ports\nexposedPort: 5000\nallowInsecure: false # false or true\nclientCertificateMode: accept # accept required or ignore\ncorsPolicy:\nallowCredentials: true\nmaxAge: 5000 (pre-flight caching time in seconds)\nallowedOrigins:\n- \"https://example.com\"\nallowedMethods:\n- \"GET\"\n- \"POST\"\nâ€¦\nallowedHeaders: []\n        exposeHeaders: []\n      traffic:\n- weight: 100\nrevisionName: testcontainerApp0-ab1234\nlabel: production\nstickySessions:\naffinity: sticky \n```", "```cs\naz containerapp revision list '\n  --name <APPLICATION_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  -o table \n```", "```cs\naz containerapp revision show '\n  --name <APPLICATION_NAME> '\n  --revision <REVISION_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> \n```", "```cs\naz containerapp revision label <add or remove> '\n  --revision <REVISION_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  --label <LABEL_NAME> \n```", "```cs\naz containerapp revision set-mode '\n  --name <APPLICATION_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> '\n  --mode <single or multiple> \n```", "```cs\naz containerapp revision <activate or deactivate or restart> '\n  --revision <REVISION_NAME> '\n  --resource-group <RESOURCE_GROUP_NAME> \n```", "```cs\naz containerapp ingress traffic set \\\n    --name <APP_NAME> \\\n    --resource-group <RESOURCE_GROUP> \\\n    --label-weight <LABEL_1>=80 <LABEL_2>=20 â€¦ \n```", "```cs\n volumes:\n- name: myempty\nstorageType: EmptyDir\n- name: my-azure-files-volume\nstorageType: AzureFile\nstorageName: mystorage \n```", "```cs\n    az storage account create '\n      --resource-group <RESOURCE GROUP > '\n      --name <STORAGE ACCOUNT NAME> '\n      --location <AZURE LOCATION > '\n      --kind StorageV2 ' ðŸ¡¨ type (generic usage type)\n      --sku Standard_LRS ' ðŸ¡¨ performance level (this is a standard level)\n      --enable-large-file-share '\n      --query provisioningState ðŸ¡¨ returns the provisioning state \n    ```", "```cs\n    az storage share-rm create '\n      --resource-group <RESOURCE GROUP> '\n      --storage-account <STORAGE ACCOUNT NAME>'\n      --name <STORAGE SHARE NAME> '\n      --quota 1024 ' ðŸ¡¨ megabyte to share\n      --enabled-protocols SMB ' ðŸ¡¨ SMB or NFS, SMB is usually better\n      --output table ðŸ¡¨ return information on the created share in table format \n    ```", "```cs\n    STORAGE_ACCOUNT_KEY='az storage account keys list -n <STORAGE ACCOUNT NAME> --query \"[0].value\" -o tsv' \n    ```", "```cs\n    az containerapp env storage set '\n      --access-mode ReadWrite '\n      --azure-file-account-name <STORAGE ACCOUNT NAME> '\n      --azure-file-account-key $STORAGE_ACCOUNT_KEY '\n      --azure-file-share-name <STORAGE SHARE NAME> '\n      --storage-name <STORAGE_MOUNT_NAME> '\n      --name <ENVIRONMENT NAME> '\n      --resource-group <RESOURCE GROUP> '\n      --output table ðŸ¡¨ return details in table format \n    ```", "```cs\n - name: my-azure-files-volume\nstorageType: AzureFile\nstorageName: <STORAGE MOUNT NAME> \n```", "```cs\naz containerapp identity assign '\n--name my-container-app '\n--resource-group my-container-app-rg '\n--system-assigned \n```", "```cs\nidentity:\ntype: SystemAssigned \n```", "```cs\naz identity create --resource-group <GROUP_NAME> --name <IDENTITY_NAME> --output json \n```", "```cs\nAz containerapp identity assign --resource-group <GROUP_NAME> --name <APP_NAME> '\n--user-assigned <IDENTITY RESOURCE ID> \n```", "```cs\nidentity:\ntype: UserAssigned\nuserAssignedIdentities:\n<IDENTITY1_RESOURCE_ID>: {}\n        <IDENTITY2_RESOURCE_ID>: {} \n```", "```cs\naz acr show --name <REGISTRY NAME> --query id --output tsv \n```", "```cs\naz role assignment create '\n--assignee <IDENTITY RESOURCE ID> '\n--role AcrPull '\n--scope <ACR_RESOURCE_ID> \n```", "```cs\naz containerapp registry set '\n--name my-container-app '\n--resource-group my-container-app-rg '\n--server <ACR_NAME>.azurecr.io '\n--identity system ðŸ¡¨ system if system assigned or the id of the user defined identity \n```", "```cs\n- server: <server URL>\nidentity: <application identity resource id> \n```"]