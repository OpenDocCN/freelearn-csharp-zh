["```cs\n    using System.Text.RegularExpressions;\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Runtime;\n    using System.Text;\n    ```", "```cs\n    DataExportToCsv();\n    ReadCsvBroken();\n    ReadCsvPredictive();\n    Console.ReadKey();\n    ```", "```cs\n    private static string _filename \n    = @\"G:\\Temp\\SampleData.csv\";\n    ```", "```cs\n    private static void DataExportToCsv()\n    {\n        int row = 0;\n        try\n        {\n        File.Delete(_filename);\n        using (FileStream fs = new FileStream(_filename, \n        FileMode.OpenOrCreate))\n        {\n            fs.Write(Encoding.Unicode.GetBytes(\"Id, \n                Name, Description\\n\"));\n                for (int i = 0; i <= 491616373; i++)\n                {\n                    row = i;\n                    Console.WriteLine($\"Writing row {row} to \n                        CSV data. There are {491616373-row} \n                            rows remaining.\");\n                    fs.Write(Encoding.Unicode.GetBytes\n                      ($\"{i}, Name {i}, Description {i}\\n\"));\n        }\n      }\n    }\n    catch (Exception ex)\n        {\n            Console.WriteLine($\"DataExportToCsv: \n                {ex.GetBaseException().Message}\")\n        }\n    }\n    ```", "```cs\n    private static void ReadCsvBroken()\n    {\n        int row = 0;\n        try\n        {\n            string csv = File.ReadAllText(_filename);\n        }\n        catch (OutOfMemoryException oomex)\n        {\n        Console.WriteLine($\"ReadCsvBroken:\n            {oomex.GetBaseException().Message}\");\n        }\n    }\n    ```", "```cs\n    private static void ReadCsvPredictive()\n    {\n        int row = 0;\n        try\n        {\n            string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n            using (new MemoryFailPoint(alphabet.length))\n            {\n                string alpha = alphabet;\n            }\n            FileInfo fi = new FileInfo(_filename);\n            Int length = unchecked((int)fi.length);\n            using (new MemoryFailPoint(length))\n            {\n                string csv = File.ReadAllText(_filename);\n            }\n        }\n        catch (OutOfMemoryException oomex)\n        {\n            Console.WriteLine($\"ReadCsvPredictive: \n                {oomex.GetBaseException().Message}\");\n        }\n    }\n    ```", "```cs\n    internal class ReferenceObject\n    {\n    public int Id { get; set; }\n    public string Name { get; set; }\n    }\n    ```", "```cs\n    private readonly List<ReferenceObject> Objects \n    = new List<ReferenceObject>();\n    ```", "```cs\n    public void Add(ReferenceObject o)\n    {\n    Objects.Add(o);\n    }\n    ```", "```cs\n    public void ListObjects()\n    {\n        Console.WriteLine(\"Long Weak Reference Objects: \");\n        foreach (var reference in Objects)\n            Console.WriteLine($\"- {reference.Name}\");\n    }\n    ```", "```cs\n    private readonly List<WeakReference<ReferenceObject>> \n      Objects \n    = new List<WeakReference<ReferenceObject>>();\n    ```", "```cs\n    public void Add(ReferenceObject o)\n    {\n    Objects.Add(new WeakReference<ReferenceObject>(o));\n    }\n    ```", "```cs\n    public void ListObjects()\n    {\n    Console.WriteLine(\"Short Weak Reference Objects: \");\n    foreach (var reference in Objects)\n    {\n        reference.TryGetTarget(\n            out ReferenceObject referenceObject\n        );\n        if (referenceObject != null)\n            Console.WriteLine($\"- {referenceObject.Name}\");\n    }\n    }\n    ```", "```cs\n    private static readonly StrongReferenceObjectManager \n      StrongReferences = new StrongReferenceObjectManager();\n    private static readonly WeakReferenceObjectManager \n      WeakReferences = new WeakReferenceObjectManager();\n    ```", "```cs\n    TestLongWeakReferences();\n    TestStrongReferences();\n    TestShortWeakReferences();\n    ProcessReferences();\n    ```", "```cs\n    private static void TestStrongReferences()\n    {\n    var o1 = new ReferenceObject() { \n        Id = 1, Name = \"Object 1\" \n    };\n    var o2 = new ReferenceObject() { \n        Id = 2, Name = \"Object 2\" \n    };\n    var o3 = new ReferenceObject() { \n        Id = 3, Name = \"Object 3\" \n    };\n    StrongReferences.Add(o1);\n    StrongReferences.Add(o2);\n    StrongReferences.Add(o3);\n    }\n    ```", "```cs\n    private static void TestWeakReferences()\n    {\n    var o1 = new ReferenceObject() { \n        Id = 1, Name = \"Object 4\" \n    };\n    var o2 = new ReferenceObject() { \n        Id = 2, Name = \"Object 5\" \n    };\n    var o3 = new ReferenceObject() { \n        Id = 3, Name = \"Object 6\" \n    };\n    WeakReferences.Add(o1);\n    WeakReferences.Add(o2);\n    WeakReferences.Add(o3);\n    o1 = null;\n    o2 = null;\n    o3 = null;\n    }\n    ```", "```cs\n    private static void ProcessReferences()\n    {\n    int x = 0;\n    while(x < 10)\n    {\n        StrongReferences.ListObjects();\n        WeakReferences.ListObjects();\n        Thread.Sleep(2000);\n        GC.Collect();\n        x++;\n    }\n    }\n    ```", "```cs\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public decimal UnitPrice { get; set; }\n    ```", "```cs\n    public Product()\n    {\n    Console.WriteLine(\"Product constructor.\");\n    }\n    ```", "```cs\n    ~Product()\n    {\n    Console.WriteLine(\"Product finalizer.\");\n    }\n    ```", "```cs\n    public override string ToString()\n    {\n      return $\"Id: {Id}, Name: {Name},\n      Description: {Description}, Unit Price: {UnitPrice}\";\n    }\n    ```", "```cs\n    private static Product _product;\n    ```", "```cs\n    static void Main(string[] _)\n    {\n    InstantiateObject();\n    PrintObjectData();\n    RemoveObjectReference();\n    RunGarbageCollector();\n    InstantiateLocalObject();\n    RunGarbageCollector();\n    DisplayGeneration(_product);\n    RemoveObjectReference();\n    RunGarbageCollector();\n    }\n    ```", "```cs\n    private static void InstantiateObject()\n    {\n      Console.WriteLine(\"Instantiating Product.\");\n      _product = new Product()\n    {\n        Id = 1,\n        Name = \"Polly Parrot\",\n        Description = \"Cudly child's toy.\",\n        UnitPrice = 7.99M\n    };\n    }\n    ```", "```cs\n    private static void PrintObjectData()\n    {\n    Console.WriteLine(_product.ToString());\n    }\n    ```", "```cs\n    private static void RemoveObjectReference()\n    {\n        _product = null;\n    }\n    ```", "```cs\n    private static void RunGarbageCollector()\n    {\n        GC.Collect();\n    }\n    ```", "```cs\n    private static void InstantiateLocalObject()\n    {\n          var product = new Product()\n          {\n              Id = 2,\n              Name = \"Cute Kittie\",\n              Description = \"Cudly child's toy.\",\n              UnitPrice = 5.75M\n          };\n          DisplayGeneration(product);\n          _product = product;\n          GC.Collect();\n    }\n    ```", "```cs\n    private static void DisplayGeneration(Product product)\n    {\n          Console.WriteLine($\"local product: \n              generation {GC.GetGeneration(product)}\");\n    }\n    ```", "```cs\n    public class DisposableBase : IDisposable\n    {\n          public void Dispose()\n          {\n             Dispose(true);\n          }\n          private void Dispose(bool disposing)\n          {\n              if (disposing)\n              GC.SuppressFinalize(this);\n              ReleaseManagedResources();\n              ReleaseUnmanagedResources();\n          }\n    protected virtual void ReleaseManagedResources(){} \n    protected virtual void ReleaseUnmanagedResources(){}\n    }\n    ```", "```cs\n    static void Main(string[] _)\n    {\n          Finalization();\n          Disposing();\n    }\n    ```", "```cs\nprivate static void Finalization()\n{\n      Console.WriteLine(\"--- Finalization ---\");\n      InstantiateObject(\"Finalization\");\n      PrintObjectData();\n      RemoveObjectReference();\n      RunGarbageCollector();\n      InstantiateLocalObject(\"Finalization\");\n      RunGarbageCollector();\n      DisplayGeneration(_product);\n      RemoveObjectReference();\n      RunGarbageCollector();\n}\n```", "```cs\n    private static void Disposing()\n    {\n    Console.WriteLine(\"--- Disposing ---\");\n    InstantiateObject(\"Disposing\");\n    PrintObjectData();\n    DisposeOfObject();\n    InstantiateLocalObject(\"Disposing\");\n    DisplayGeneration(_product);\n    DisposeOfObject();\n    RunGarbageCollector();\n    }\n    ```", "```cs\n    private static void DisposeOfObject()\n    {\n          _product.Dispose();\n    }\n    ```", "```cs\n    private string _cleanUpMethod;\n    public Product(string cleanUpMethod)\n    {\n      Console.WriteLine(\"Product constructor.\");\n      _cleanUpMethod = cleanUpMethod;\n    }\n    ~Product()\n    {\n      Console.WriteLine($\"Product destructor: {_\n        cleanUpMethod}.\");\n    }\n    ```", "```cs\n    private static void InstantiateObject(string \n        cleanUpMethod)\n    {\n    Console.WriteLine(\"Instantiating Product.\");\n    _product = new Product(cleanUpMethod)\n    {\n               Id = 1,\n               Name = \"Polly Parrot\",\n               Description = \"Cudly child's toy.\",\n               UnitPrice = 7.99M\n    };\n    }\n    ```", "```cs\n    private static void InstantiateLocalObject(string \n        cleanUpMethod)\n    {\n    var product = new Product(cleanUpMethod)\n    {\n        Id = 2,\n        Name = \"Cute Kittie\",\n        Description = \"Cudly child's toy.\",\n        UnitPrice = 5.75M\n    };\n    DisplayGeneration(product);\n    _product = product;\n    }\n    ```", "```cs\n    protected override void ReleaseManagedResources()\n    {\n    base.ReleaseManagedResources();\n    Console.WriteLine(\"Releasing managed resources.\");\n    }\n    ```", "```cs\n    protected override void ReleaseUnmanagedResources()\n    {\n    base.ReleaseUnmanagedResources();\n    Console.WriteLine(\"Releasing unmanaged resources.\");\n    }\n    ```", "```cs\nprivate static void UsingDispose()\n```", "```cs\n{\n```", "```cs\n      Console.WriteLine(\"--- UsingDispose() ---\");\n```", "```cs\n      using (var product = new Product(\"using\")\n```", "```cs\n          {\n```", "```cs\n              Id = 2,\n```", "```cs\n              Name = \"Cute Kittie\",\n```", "```cs\n              Description = \"Cudly child's toy.\",\n```", "```cs\n              UnitPrice = 5.75M\n```", "```cs\n          }\n```", "```cs\n      )\n```", "```cs\n      {\n```", "```cs\n          DisplayGeneration(product);\n```", "```cs\n      }\n```", "```cs\n}\n```", "```cs\n<ItemGroup>\n```", "```cs\n      <COMReference Include=\"Microsoft.Office.Excel.dll\">\n```", "```cs\n          <WrapperTool>tlbimp</WrapperTool>\n```", "```cs\n          <VersionMinor>9</VersionMinor>\n```", "```cs\n          <VersionMajor>1</VersionMajor>\n```", "```cs\n          <Guid>00020813-0000-0000-c000-000000000046</Guid>\n```", "```cs\n          <Lcid>0</Lcid>\n```", "```cs\n          <Isolated>false</Isolated>\n```", "```cs\n          <EmbedInteropTypes>True</EmbedInteropTypes>\n```", "```cs\n          <Private>true</Private>\n```", "```cs\n    </COMReference>\n```", "```cs\n  </ItemGroup>\n```", "```cs\nusing Microsoft.Office.Interop.Excel;\n```", "```cs\nusing System;\n```", "```cs\nusing System.Diagnostics;\n```", "```cs\nusing System.IO;\n```", "```cs\nusing System.Runtime.InteropServices;\n```", "```cs\nusing Excel = Microsoft.Office.Interop.Excel;\n```", "```cs\npublic void RunExcelExamples()\n```", "```cs\n{\n```", "```cs\n      for (int i = 0; i < 10; i++)\n```", "```cs\n          NotReleasingExcelComObjects();\n```", "```cs\n      for (int i = 0; i < 10; i++)\n```", "```cs\n          ReleasingExcelComObjects();\n```", "```cs\n}\n```", "```cs\nprivate static void NotReleasingExcelComObjects()\n```", "```cs\n{\n```", "```cs\n      string filename = @\"C:\\Temp\\BucketList.xlsx\";\n```", "```cs\n      Excel.Application application = new Excel.Application();\n```", "```cs\n      application.Visible = false;\n```", "```cs\n      Excel.Workbook workbook = application.Workbooks.Add();\n```", "```cs\n      Excel.Sheets sheets = workbook.Sheets;\n```", "```cs\n      Excel.Worksheet worksheet =(Worksheet)sheets\n```", "```cs\n      .Add(sheets[1], Type.Missing, Type.Missing, \n```", "```cs\n            Type.Missing);\n```", "```cs\n      worksheet.Range[\"A1\"].Value = \"Bucket List\";\n```", "```cs\n      worksheet.Range[\"A2\"].Value = \"Visit New Zealand\";\n```", "```cs\n      worksheet.Range[\"A1\"].Value = \"Visit Australia\";\n```", "```cs\n      if (File.Exists(filename))\n```", "```cs\n          File.Delete(filename);\n```", "```cs\n      workbook.SaveAs(filename);\n```", "```cs\n      workbook.Close();\n```", "```cs\n      application.Quit();\n```", "```cs\n}\n```", "```cs\n      for (int i = 0; i < 10; i++)\n```", "```cs\n          ReleasingExcelComObjects();\n```", "```cs\n[System.Diagnostics.CodeAnalysis SuppressMessage\n```", "```cs\n  (\"Interoperability\",\"CA1416:Validate platform compatibility\",\n```", "```cs\n    Justification = \"Windows only code.\")]\n```", "```cs\nprivate static void ReleasingExcelComObjects()\n```", "```cs\n{\n```", "```cs\n      Excel.Application application = null;\n```", "```cs\n      Excel.Workbooks workbooks = null;\n```", "```cs\n      Excel.Workbook workbook = null;\n```", "```cs\n      Excel.Sheets worksheets = null;\n```", "```cs\n      Excel.Worksheet worksheet = null;\n```", "```cs\n      Excel.Range range = null;\n```", "```cs\n      Try\n```", "```cs\n      {\n```", "```cs\n          string filename = @\"C:\\Temp\\BucketList.xlsx\";\n```", "```cs\n          application = new Excel.Application();\n```", "```cs\n          application.Visible = false;\n```", "```cs\n          workbooks = application.Workbooks;\n```", "```cs\n          workbook = workbooks.Add();\n```", "```cs\n          worksheets = workbook.Sheets;\n```", "```cs\n          worksheet = (Worksheet)worksheets.Add(worksheets[1], \n```", "```cs\n              Type.Missing, Type.Missing, Type.Missing);\n```", "```cs\n          range = worksheet.Range[\"A1\"];\n```", "```cs\n          range.Value = \"Bucket List\";\n```", "```cs\n          range = worksheet.Range[\"A2\"];\n```", "```cs\n          range.Value = \"Visit New Zealand\";\n```", "```cs\n          range = worksheet.Range[\"A3\"];\n```", "```cs\n          range.Value = \"Visit Australia\";\n```", "```cs\n          if (File.Exists(filename))\n```", "```cs\n              File.Delete(filename);\n```", "```cs\n          workbook.SaveAs(filename);\n```", "```cs\n          workbook.Close();\n```", "```cs\n          application.Quit();\n```", "```cs\n      }\n```", "```cs\n      Finally\n```", "```cs\n      {\n```", "```cs\n          if (range != null) \n```", "```cs\n              Marshal.FinalReleaseComObject(range);\n```", "```cs\n          if (worksheet != null) \n```", "```cs\n              Marshal.FinalReleaseComObject(worksheet);\n```", "```cs\n          if (worksheets != null) \n```", "```cs\n              Marshal.FinalReleaseComObject(worksheets);\n```", "```cs\n          if (workbook != null) \n```", "```cs\n              Marshal.FinalReleaseComObject(workbook);\n```", "```cs\n          if (workbooks != null) \n```", "```cs\n              Marshal.FinalReleaseComObject(workbooks);\n```", "```cs\n          if (application != null) \n```", "```cs\n              Marshal.FinalReleaseComObject(application);\n```", "```cs\n          range = null;\n```", "```cs\n          worksheet = null;\n```", "```cs\n          worksheets = null;\n```", "```cs\n          workbook = null;\n```", "```cs\n          worksheets = null;\n```", "```cs\n          application = null;\n```", "```cs\n          GC.Collect();\n```", "```cs\n          GC.WaitForPendingFinalizers();\n```", "```cs\n          Process[] processes = \n```", "```cs\n              Process.GetProcessesByName(\"EXCEL\");\n```", "```cs\n          foreach (Process process in processes)\n```", "```cs\n              process.Kill();\n```", "```cs\n      }\n```", "```cs\n}\n```", "```cs\ninternal class EventSubscriber\n```", "```cs\n{\n```", "```cs\n      public EventSubscriber(Control control)\n```", "```cs\n      {\n```", "```cs\n          Control.TextChanged += OnTextChanged\n```", "```cs\n      }\n```", "```cs\n      private void OnTextChanged(\n```", "```cs\n          object sender, \n```", "```cs\n          EventArgs eventArgs\n```", "```cs\n      )\n```", "```cs\n      {\n```", "```cs\n          Text ((Control)sender).Text;\n```", "```cs\n      }\n```", "```cs\n}\n```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    public event EventHandler OnEventRaised;\n    private static int _count;\n    public static int Count { get { return _count; } }\n    ```", "```cs\n    public EventOne()\n    {\n          Interlocked.Increment(ref _count);\n    }\n    ```", "```cs\n    public void RaiseEvent(EventArgs e)\n    {\n          EventHandler eventHandler = OnEventRaised;\n                if (eventHandler != null)\n                      eventHandler(this, e);\n    }\n    ```", "```cs\n    ~EventOne()\n    {\n          Interlocked.Decrement(ref _count);\n    }\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Windows.Forms;\n    ```", "```cs\n    private static int _count;\n    public static int Count { get { return _count; } }\n    public string Text { get; private set; }\n    ```", "```cs\n    public EventTwo(Control control)\n    {\n          Interlocked.Increment(ref _count);\n          control.TextChanged += OnTextChanged;\n    }\n    ```", "```cs\n    private void OnTextChanged(object sender, EventArgs \n        eventArgs)\n    {\n          Text = ((Control)sender).Text;\n    }\n    ```", "```cs\n    ~EventTwo()\n    {\n          Interlocked.Decrement(ref _count);\n    }\n    ```", "```cs\n    private int _eventsGeneratedCount;\n    private int _eventSubscriberCount;\n    ```", "```cs\n    private void SetTitleText()\n    {\n          Text = $\"{_eventsGeneratedCount}/{EventOne.Count} – \n              {_eventSubscriberCount}/{EventTwo.Count}\";\n    }\n    ```", "```cs\n    private void SetInformationLabelText()\n    {\n          StringBuilder sb = new StringBuilder();\n          sb.AppendLine($\"Raised Events (No Memory Leak):\n              {_eventsGeneratedCount},  Alive Events: \n                {EventOne.Count}\");\n          sb.AppendLine($\"Raised Events (Memory Leak): \n              {_eventSubscriberCount},  Alive Events: \n                {EventTwo.Count}\");\n          InformationLabel.Text = sb.ToString();\n    }\n    ```", "```cs\n    private void RaiseEvent(object sender, EventArgs e)\n    {\n          ProgressLabel.Text = $\"Event Raised: \n              {DateTime.Now}\";\n          ProgressLabel.Invalidate();\n          ProgressLabel.Update();\n    }\n    ```", "```cs\n    private void MemoryLeakMethod(EventArgs e)\n    {\n          int count = 10000;\n          for (int x = 0; x < count; x++)\n          {\n                var eventTwo = new EventTwo(this);\n          }\n          _eventTwoCount += count;\n    }\n    ```", "```cs\n    private void NoMemoryLeakMethod(EventArgs e)\n    {\n          int count = 10000;\n          for (int x = 0; x < count; x++)\n          {\n          EventOne eventOne = new EventOne();\n          eventOne.OnEventRaised += RaiseEvent;\n          eventOne.RaiseEvent(e);\n          }\n          _eventOneCount += count;\n    }\n    ```", "```cs\n    NoMemoryLeakMethod(e);\n    MemoryLeakMethod(e);\n    SetInformationLabelText();\n    SetTitleText();\n    ```", "```cs\n    internal class Website\n    {\n          public event EventHandler<EventArgs> Login;\n          public event EventHandler<EventArgs> Logout;\n    }\n    ```", "```cs\n    public void Login()\n    {\n          Website website = new Website();\n          void LoginHandler(object sender, EventArgs args)\n          {\n              Debug.WriteLine(\"Anonymous login event handler \n                using a local method.\");\n              website.Login -= LoginHandler;\n          };\n          website.Login += LoginHandler;\n          LoginHandler(this, new EventArgs());\n    }\n    ```", "```cs\n    public void Logout()\n    {\n          Website website = new Website();\n          void LogoutHandler(object sender, EventArgs args)\n          {\n              Debug.WriteLine(\"Anonymous logout event handler \n                using a local method.\");\n              website.Logout -= LogoutHandler;\n          };\n          website.Logout += LogoutHandler;\n          LogoutHandler(this, new EventArgs());\n    }\n    ```", "```cs\n    private static void UseAnonymousEventSubscriptions()\n    {\n          for (int x = 0; x < 1000000; x++)\n          {\n              AnonymousEventSubscription aes = new \n                AnonymousEventSubscription();\n              aes.Login();\n              aes.Logout();\n          }\n    }\n    ```", "```cs\n    internal class SampleClass\n    {\n          public event EventHandler<EventArgs> RaiseEvent;\n          public void DoSomething()\n          {\n              OnRaiseEvent();\n          }\n          protected virtual void OnRaiseEvent()\n          {\n              RaiseEvent?.Invoke(this, EventArgs.Empty);\n          }\n    }\n    ```", "```cs\n    using System;\n    using System.Diagnostics;\n    using WeakEventListener;\n    ```", "```cs\n    public void RaiseWeakReferenceEvents()\n    {\n          bool isOnEventTriggered = false;\n          bool isOnDetachTriggered = false;\n          SampleClass sample = new SampleClass();\n          WeakEventListener<SampleClass, object, EventArgs> \n            weak = new WeakEventListener<SampleClass, object, \n                    EventArgs>(sample);\n          weak.OnEventAction = (instance, source, eventArgs) \n            => { isOnEventTriggered = true; };\n          weak.OnDetachAction = (listener) =>\n            {isOnDetachTriggered = true; };\n          sample.Raisevent += weak.OnEvent;\n          sample.DoSomething();\n          Debug.Assert(isOnEventTriggered);\n          weak.Detach();\n          Debug.Assert(isOnDetachTriggered);\n    }\n    ```"]