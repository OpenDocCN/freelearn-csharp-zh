["```cs\n01 //------------------------------------\n02 using UnityEngine;\n03 using UnityEditor;\n04 using System.Collections;\n05 //------------------------------------\n06 public class BatchRename : ScriptableWizard\n07 {\n08 //Base name\n09 public string BaseName = \"MyObject_\";\n10 \n11 //Start Count\n12 public int StartNumber = 0;\n13 \n14 //Increment\n15 public int Increment = 1;\n16 \n17 [MenuItem(\"Edit/Batch Rename...\")]\n18     static void CreateWizard()\n19     {\n20         ScriptableWizard.DisplayWizard(\"Batch Rename\",typeof(BatchRename),\"Rename\");\n21     }\n22 //------------------------------------\n23 //Called when the window first appears\n24 void OnEnable()\n25 {\n26       UpdateSelectionHelper();\n27 }\n28 //------------------------------------\n29 //Function called when selection changes in scene\n30 void OnSelectionChange()\n31 {\n32       UpdateSelectionHelper();\n33 }\n34 //------------------------------------\n35 //Update selection counter\n36 void UpdateSelectionHelper()\n37 {\n38        helpString = \"\";\n39 \n40        if (Selection.objects != null)\n41 helpString = \"Number of objects selected: \" + Selection.objects.Length;\n42 }\n43 //------------------------------------\n44 //Rename\n45 void OnWizardCreate()\n\n46 {\n47       //If selection empty, then exit\n48       if (Selection.objects == null)\n49              return;\n50 \n51       //Current Increment\n52       int PostFix = StartNumber;\n53 \n54       //Cycle and rename\n55       foreach(Object O in Selection.objects)\n56       {\n57              O.name = BaseName + PostFix;\n58              PostFix += Increment;\n59       }\n60 }\n61 //------------------------------------\n62 }\n63 //------------------------------------\n```", "```cs\npublic float MyNumber = 0;\n```", "```cs\n [Range(0f,1f)]\npublic float MyNumber = 0;\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 using System.Reflection;\n04 using System;\n05 \n06 public class MyTestScript : MonoBehaviour \n07 {\n08 // Use this for initialization\n09 void Start () \n10 {\n11        //List all classes in assembly\n12 foreach(Type t in Assembly.GetExecutingAssembly().GetTypes())\n\n13        {\n14              Debug.Log (t.Name);\n15        }\n16 }\n17 }\n```", "```cs\n //Function to list all public variables for class t\n public void ListAllPublicVariables(Type t)\n {\n    //Loop through all public variables\n    foreach(FieldInfo FI in t.GetFields(BindingFlags.Public | BindingFlags.Instance)\n    {\n         //Print name of variable\n         Debug.Log (FI.Name);\n    }\n }\n```", "```cs\n01 public void ListAllAttributes(Type t)\n02 {\n03 foreach(Attribute attr in t.GetCustomAttributes(true))\n04 {\n05        //List the type of attribute found\n06        Debug.Log (attr.GetType());\n07 }\n08 }\n```", "```cs\n[System.Serializable]\n public class ColorBlend : System.Object\n {\n    public Color SourceColor = Color.white;\n    public Color DestColor = Color.white;\n    public Color BlendedColor = Color.white;\n    public float BlendFactor = 0f;\n }\n```", "```cs\n01 public class ColorRangeAttribute : PropertyAttribute\n02 {\n03 //------------------------------------------------------------\n04 public Color Min;\n05 public Color Max;\n06 //------------------------------------------------------------\n07 public ColorRangeAttribute(float r1, float g1, float b1, float a1,\n08                            float r2, float g2, float b2, float a2)\n09 {\n10       this.Min = new Color(r1, g1, b1, a1);\n11       this.Max = new Color(r2, g2, b2, a2);\n12 }\n13 //------------------------------------------------------------\n14 }\n```", "```cs\npublic class ColorAdjuster : MonoBehaviour \n{\n   [ColorRangeAttribute(1f,0f,0f,0f,   0f,1f,0f,1f)]\n   public ColorBlend MyColorBlend;\n}\n```", "```cs\n01 using UnityEngine;\n02 using UnityEditor; //Be sure to include UnityEditor for all extension classes\n03 using System.Collections;\n04 //------------------------------------------------------------\n05 //CustomPropertyDrawer attribute for overriding drawing of all ColorRangeAttribute members\n\n06 [CustomPropertyDrawer(typeof(ColorRangeAttribute))]\n07 public class ColorRangeDrawer : PropertyDrawer\n08 {\n09 //------------------------------------------------------------\n10 //Event called by Unity Editor for updating GUI drawing of controls\n\n11 public override void OnGUI (Rect position, SerializedProperty property, GUIContent label)\n\n12 {\n13        //Get color range attribute meta data\n14 ColorRangeAttribute range  = attribute as ColorRangeAttribute;\n15 \n16        //Add label to inspector\n17 position = EditorGUI.PrefixLabel (position, new GUIContent (\"Color Lerp\"));\n18 \n19        //Define sizes for color rect and slider controls\n20 Rect ColorSamplerRect = new Rect(position.x, position.y, 100, position.height);\n\n21 Rect SliderRect = new Rect(position.x+105, position.y, 200, position.height);\n22 \n23       //Show color rect control\n24 EditorGUI.ColorField(ColorSamplerRect, property.FindPropertyRelative(\"BlendedColor\").colorValue);\n25 \n26      //Show slider control\n27 property.FindPropertyRelative(\"BlendFactor\").floatValue = EditorGUI.Slider(SliderRect, property.FindPropertyRelative(\"BlendFactor\").floatValue, 0f, 1f);\n28 \n29      //Update blended color based on slider\n30 property.FindPropertyRelative(\"BlendedColor\").colorValue = Color.Lerp(range.Min, range.Max, property.FindPropertyRelative(\"BlendFactor\").floatValue);\n31 }\n32 //------------------------------------------------------------\n33 }\n34 //------------------------------------------------------------\n```", "```cs\n //----------------------------------------------\n using UnityEngine;\n using System.Collections;\n //----------------------------------------------\n [System.Serializable]\n public class ClassWithProperties : System.Object\n {\n    //Class with some properties\n    //----------------------------------------------\n public int MyIntProperty\n    {\n          get{return _myIntProperty;}â€©\n          //Performs some validation on values\n    set{if(value <= 10)_myIntProperty = value;else _myIntProperty=0;}\n    }\n    //----------------------------------------------\n    public float MyFloatProperty\n   {\n          get{return _myFloatProperty;}\n          set{_myFloatProperty = value;}\n   }\n    //----------------------------------------------\n public Color MyColorProperty\n   {\n          get{return _myColorProperty;}\n          set{_myColorProperty = value;}\n    }\n    //----------------------------------------------\n    //Private members\n    private int _myIntProperty;\n    private float _myFloatProperty;\n    private Color _myColorProperty;\n    //----------------------------------------------\n }\n //----------------------------------------------\n```", "```cs\n using UnityEngine;\n using System.Collections;\n\n public class LargerClass : MonoBehaviour \n {\n    public ClassWithProperties MyPropClass;\n }\n```", "```cs\n01 //Custom Editor class to expose global properties of a class\n02 //----------------------------------------------\n03 using UnityEngine;\n04 using UnityEditor;\n05 using System.Collections;\n06 using System.Reflection;\n07 //----------------------------------------------\n08 [CustomPropertyDrawer(typeof(ClassWithProperties))]\n09 public class PropertyLister : PropertyDrawer\n10 {\n11 //Height of inspector panel\n12 float InspectorHeight = 0;\n13 \n14 //Height of single row in pixels\n15 float RowHeight = 15;\n16 \n17 //Spacing between rows\n18 float RowSpacing = 5;\n19 \n20 // Draw the property inside the given rect\n21 public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) \n22 {\n23        EditorGUI.BeginProperty(position, label, property);\n24 \n25        //Get referenced object\n26        object o = property.serializedObject.targetObject;\n27 ClassWithProperties CP = o.GetType().GetField(property.name).GetValue(o) as ClassWithProperties;\n28 \n29        int indent = EditorGUI.indentLevel;\n30        EditorGUI.indentLevel = 0;\n31 \n32       //Layout\n33 Rect LayoutRect = new Rect(position.x, position.y, position.width, RowHeight);\n34 \n35       //Find all properties for object\n36 foreach(var prop in typeof(ClassWithProperties).GetProperties(BindingFlags.Public | BindingFlags.Instance))\n37       {\n38              //If integer property\n39              if(prop.PropertyType.Equals(typeof(int)))\n40              {\n41 prop.SetValue(CP, EditorGUI.IntField(LayoutRect, prop.Name, (int)prop.GetValue(CP,null)), null);\n\n42 LayoutRect = new Rect(LayoutRect.x, LayoutRect.y + RowHeight+RowSpacing, LayoutRect.width, RowHeight);\n43              }\n44 \n45             //If float property\n46             if(prop.PropertyType.Equals(typeof(float)))\n47             {\n48 prop.SetValue(CP, EditorGUI.FloatField(LayoutRect, prop.Name, (float)prop.GetValue(CP,null)), null);\n\n49 LayoutRect = new Rect(LayoutRect.x, LayoutRect.y + RowHeight+RowSpacing, LayoutRect.width, RowHeight);\n50             }\n51 \n52             //If color property\n53              if(prop.PropertyType.Equals(typeof(Color)))\n54              {\n55 prop.SetValue(CP, EditorGUI.ColorField(LayoutRect, prop.Name, (Color)prop.GetValue(CP,null)), null);\n\n56 LayoutRect = new Rect(LayoutRect.x, LayoutRect.y + RowHeight+RowSpacing, LayoutRect.width, RowHeight);\n57             }\n58        }\n59 \n60        //Update inspector height\n61        InspectorHeight = LayoutRect.y-position.y;\n62 \n63        EditorGUI.indentLevel = indent;\n64        EditorGUI.EndProperty();\n65 }\n66 //----------------------------------------------\n67 //This function returns how high (in pixels) the field should be\n68 //This is to make controls not overlap\n69 public override float GetPropertyHeight (SerializedProperty property, GUIContent label)\n70 {\n71        return InspectorHeight;\n72 }\n73 //----------------------------------------------\n74 }\n75 //----------------------------------------------\n```", "```cs\n<?xml version=\"1.0\"?>\n<text>\n    <language id=\"english\">\n         <text_entry id=\"text_01\"><![CDATA[new game]]></text_entry>\n         <text_entry id=\"text_02\"><![CDATA[load game]]></text_entry>\n         <text_entry id=\"text_03\"><![CDATA[save game]]></text_entry>\n         <text_entry id=\"text_04\"><![CDATA[exit game]]></text_entry>\n   </language>\n   <language id=\"yoda\">\n         <text_entry id=\"text_01\"><![CDATA[new game, you start]]></text_entry>\n         <text_entry id=\"text_02\"><![CDATA[load game, you will]]></text_entry>\n         <text_entry id=\"text_03\"><![CDATA[game save, you have]]></text_entry>\n         <text_entry id=\"text_04\"><![CDATA[leave now, you must]]></text_entry>\n   </language>\n</text>\n```", "```cs\nusing UnityEngine;\n using System.Collections;\n\n //Attribute to attach to string objects\n public class LocalizationTextAttribute : System.Attribute\n {\n    //ID to assign\n    public string LocalizationID = string.Empty;\n\n    //Constructor\n    public LocalizationTextAttribute(string ID)\n    {\n           LocalizationID = ID;\n   }\n }\n```", "```cs\n//----------------------------------------------\n using UnityEngine;\n using System.Collections;\n //----------------------------------------------\n public class SampleGameMenu : MonoBehaviour \n {\n    [LocalizationTextAttribute(\"text_01\")]\n    public string NewGameText = string.Empty;\n\n    [LocalizationTextAttribute(\"text_02\")]\n    public string LoadGameText = string.Empty;\n\n   [LocalizationTextAttribute(\"text_03\")]\n   public string SaveGameText = string.Empty;\n\n    [LocalizationTextAttribute(\"text_04\")]\n    public string ExitGameText = string.Empty;\n }\n //----------------------------------------------\n```", "```cs\n01 //-------------------------------------------\n02 using UnityEngine;\n03 using UnityEditor;\n04 using System.Collections;\n05 using System.Xml;\n06 using System.Linq;\n07 using System.Reflection;\n08 //-------------------------------------------\n09 public class LanguageSelector\n10 {\n11 [MenuItem (\"Localization/English\")]\n12 public static void SelectEnglish()\n13 {\n14        LanguageSelector.SelectLanguage(\"english\");\n15 }\n16 \n17 [MenuItem (\"Localization/French\")]\n18 public static void SelectFrench()\n19 {\n20        LanguageSelector.SelectLanguage(\"french\");\n21 }\n22 \n23 [MenuItem (\"Localization/Yoda\")]\n24 public static void SelectYoda()\n25 {\n26        LanguageSelector.SelectLanguage(\"yoda\");\n27 }\n28 \n29 public static void SelectLanguage(string LanguageName)\n30 {\n31        //Access XML Text File in Project\n32 TextAsset textAsset = Resources.Load(\"LocalText\") as TextAsset;\n33 \n34        //Load text into XML Reader object\n35         XmlDocument xmlDoc = new XmlDocument();\n36         xmlDoc.LoadXml(textAsset.text);\n37 \n38       //Get language nodes\n39 XmlNode[] LanguageNodes = (from XmlNode Node in xmlDoc.GetElementsByTagName(\"language\")\n\n40 where Node.Attributes[\"id\"].Value.ToString().Equals(LanguageName.ToLower())\n41       select Node).ToArray();\n42 \n43        //If no matching node found, then exit\n44        if(LanguageNodes.Length <= 0)\n45              return;\n46 \n47       //Get first node\n48       XmlNode LanguageNode = LanguageNodes[0];\n49 \n50      //Get text object\n51 SampleGameMenu GM = Object.FindObjectOfType<SampleGameMenu>() as SampleGameMenu;\n52 \n53      //Loop through child xml nodes\n54      foreach (XmlNode Child in LanguageNode.ChildNodes)\n55        {\n56              //Get text Id for this node\n57              string TextID = Child.Attributes[\"id\"].Value;\n58               string LocalText = Child.InnerText;\n59 \n60              //Loop through all fields\n61 foreach(var field in GM.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy))\n62              {\n63                    //If field is a string then is relevant\n64                    if(field.FieldType == typeof(System.String))\n65                    {\n66                          //Get custom attributes for field\n67 System.Attribute[] attrs = field.GetCustomAttributes(true) as System.Attribute[];\n\n68 \n69                    foreach (System.Attribute attr in attrs)\n70                    {\n71        if(attr is LocalizationTextAttribute)\n72                                 {\n73                                     //We've found text\n74 LocalizationTextAttribute LocalAttr = attr as LocalizationTextAttribute;\n75 \n76               if(LocalAttr.LocalizationID.Equals( TextID ))\n77                           {\n78                          //id matches, now set value\n79                          field.SetValue(GM, LocalText);\n80                           }\n81                     }\n82              }\n83              }\n84       }\n85       }\n86 }\n87 }\n88 //-------------------------------------------\n```"]