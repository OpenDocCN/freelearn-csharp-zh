- en: 'Chapter 10: Publishing Projects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After finishing a **proof of concept** (**POC**) or a **minimum viable product**
    (**MVP**), (which means a demo or pilot project with the main functionalities
    implemented, as discussed in [*Chapter 8*](B17873_08_ePub.xhtml#_idTextAnchor100),
    *Web Tools and Hot Reload*), we need to deploy our changes to see how the project
    works in a real scenario and share the published project with our customers. Visual
    Studio has a set of tools to deploy our projects. We can choose an option to deploy
    the project in our local environment, but we can also use services in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to deploy your project with just a few clicks
    and Visual Studio 2022\. These tools will help you to save time and reduce complexity
    when you need to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss and review the following topics, which are the options to publish
    projects with Visual Studio 2022:'
  prefs: []
  type: TYPE_NORMAL
- en: The options to publish a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing in a folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing in **internet information services** (**IIS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing in Microsoft Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's dive in and learn all about publishing projects.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To publish a project following the steps provided in this chapter, you must
    have previously installed Visual Studio 2022 with the web development workload,
    as shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013), *Getting Started
    with Visual Studio 2022*. It's important to have the SPA base project that you
    created in [*Chapter 4*](B17873_04_ePub.xhtml#_idTextAnchor052), *Creating Projects
    and Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: For the *Publishing in Microsoft Azure* section, you will need to have an Azure
    account with credits to complete the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the changes made to the project at the following link: [https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter10](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter10).'
  prefs: []
  type: TYPE_NORMAL
- en: The options to publish a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio has two ways to access the **Publish** option and then display
    the possibilities incorporated to deploy a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the menu, we can access this option by navigating to **Build** | **Publish
    [Project name]**. By default, the main project in the current solution is selected,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The Publish SPAProject option in the Build menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.01_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – The Publish SPAProject option in the Build menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Another possibility is to right-click on the project that we want to publish
    in the **Solution Explorer** tab (see *Figure 10.2*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – The Publish… option on the menu after right-clicking'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.02_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – The Publish… option on the menu after right-clicking
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever the chosen option, Visual Studio will display a modal window to give
    you the deployment types supported for the main project in the solution or the
    project selected, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – The options to publish a project in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.03_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – The options to publish a project in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review these options one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure**: The project will be deployed in Azure using a service, depending
    on the technology used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker Container Registry**: This option helps us publish a Docker container,
    including our website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Folder**: This option publishes the project in a folder chosen in the filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FTP/FTPS Server**: With this option, the files of the publication will be
    transferred to an FTP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Server (IIS)**: Deploys the project in IIS, the default server in Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import Profile**: Allows us to import another configuration to publish a
    project already created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will review some of these options in the following sections. We will convert
    the project with the **Azure**, **Folder**, and **Web Server (IIS)** options because
    **Docker Container Registry** is a little more complex to set up, and for FTP/FTPS
    server, we need to have an FTP server running, which is not very common in modern
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you know how to access the **Publish** option that Visual Studio
    contains to deploy a web application. Let's now explore a few preferred options
    to publish a project in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing in a folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common options for publishing a project is to use our filesystem
    and save the site in a folder, including all the resources to use it in a local
    server, such as IIS, Apache, or NGINX. Visual Studio has an option to publish
    our projects with this approach easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use any option to navigate to the publishing functionality, which we
    reviewed in the *The options to publish a project* section, and then select **Folder**,
    followed by a click on **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – The Folder option to publish a project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.04_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – The Folder option to publish a project
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next window, we can specify the folder where we want to save the published
    project using the **Browse…** option. We can use absolute and relative paths.
    Then, we can finish the configuration by clicking on **Finish**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – The folder location to publish the project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.05_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – The folder location to publish the project
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The folder selected must be empty. If you select a folder that contains files,
    this could create conflicts in the files. Visual Studio will try to replace the
    files with the same name using the files generated in the publishing process.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the publishing configuration, Visual Studio will generate
    a file with the `.pubxml` extension that contains the options we chose before
    in XML format. Now, we can use the **Publish** button to publish the project in
    the selected folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – The .pubxml file created with the configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.06_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – The .pubxml file created with the configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on **Publish**, Visual Studio will show a **Publishing to Folder…**
    message and a console log, where you can check all the steps performed during
    this process. In *Figure 10.7*, you can see the log in the **Output** panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Publishing in progress after clicking on Publish'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.7_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Publishing in progress after clicking on Publish
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, after waiting for some seconds, we will see a **Publish succeeded**
    confirmation message, which means the process was completed with no issues (see
    *Figure 10.8*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – The publish success message and the publish folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.08_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – The publish success message and the publish folder
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 10.8*, we can see that the folder on the right side contains all
    the files associated with the publication of our projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have some additional settings that we can change using the pencil icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – The option to delete an existing file in the target location'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.09_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.9 – The option to delete an existing file in the target location
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Delete existing files** option, we will see some additional
    settings that we can change according to our needs (see *Figure 10.10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Additional settings to publish a project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.10_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.10 – Additional settings to publish a project
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review all the options in *Figure 10.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration**: We can choose between **Debug** and **Release**. The latter
    is optimized for production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target Framework**: Normally, it''s the same version used in the project,
    but we can select a specific version to run our project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment Mode**: We can select **Framework-dependent**, which means the
    framework should be installed on the server, or **Self-contained**, which means
    the publication will include the framework and all the dependencies to run the
    project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target Runtime**: This is the system architecture and operating system where
    the application will be published.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete all existing files prior to publish**: This allows Visual Studio to
    delete all the existing files in the folder selected for publishing the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's best practice to check the **Delete all existing files prior to publish**
    option to avoid conflict with existing files during the publishing process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You now know how to publish in a folder in Visual Studio. You only need to select
    the folder where you prefer to deploy your application and then use the publish
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing in IIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IIS is the most popular server in the Windows ecosystem. It is included by default
    in all Windows Server versions, and there is an option to install it on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install IIS in Windows 8, 10, 11, or later, you can follow this guide in
    the *Step 1 – Install IIS and ASP.NET* section of the Microsoft document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/windows/msix/app-installer/web-install-iis](https://docs.microsoft.com/windows/msix/app-installer/web-install-iis)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily deploy a web application in IIS using Visual Studio. First,
    you need to open the **Publish** option that we reviewed in the *The options to
    publish a project* section and select **Web Server (IIS)** (see *Figure 10.11*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – The Web server (IIS) option to publish a project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.11_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.11 – The Web server (IIS) option to publish a project
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: If you already have a `.pubxml` file in the publishing profiles folder, you
    need to delete it to create a new one with a new configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting **Web Server (IIS)**, you can click on **Next** and continue
    with the process. You will see two options to choose from (see *Figure 10.12*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – The options to deploy in IIS – Web Deploy and Web Deploy Package'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.12_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.12 – The options to deploy in IIS – Web Deploy and Web Deploy Package
  prefs: []
  type: TYPE_NORMAL
- en: 'We have two options for deploying in IIS:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web Deploy**: Deploy the folder, including all the files, in IIS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.zip` file, including all the files within the publishing folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, we will select **Web Deploy** and click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to fill in the **Server**, **Site name**, and **Destination URL**
    fields (see *Figure 10.13*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.13 – The configuration to publish on a default web site in IIS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.13_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.13 – The configuration to publish on a default web site in IIS
  prefs: []
  type: TYPE_NORMAL
- en: We will use the default website created in IIS. If you are already using this
    site with another application, you can set up another site name in IIS.
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Validate Connection** button, you can check whether Visual Studio
    can create the site and complete the publication using the setup provided. You
    can use the **Finish** button to complete the setup.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You need to execute Visual Studio as admin to give access to IIS; otherwise,
    you will receive an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing all the steps, you will get a **Ready to publish** message
    and some options to edit the configuration. We are ready to use the **Publish**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.14 – The project ready to publish using IIS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.14_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.14 – The project ready to publish using IIS
  prefs: []
  type: TYPE_NORMAL
- en: 'Automatically, Visual Studio will open in a new window in the browser, with
    the URL of the site that we set up in the configuration (see *Figure 10.13*) in
    the `http://localhost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15 – The project running in IIS after publishing it'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.15_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.15 – The project running in IIS after publishing it
  prefs: []
  type: TYPE_NORMAL
- en: You just learned how to deploy a web application in IIS using Visual Studio.
    Visual Studio minimizes the steps to complete the setup and sets all the files
    in a folder inside IIS. Now, let's review another way to deploy an application
    using Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing in Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Azure** is a cloud provider created by Microsoft, and it''s one of the most
    popular among start-ups and .NET developers. Since Azure and Visual Studio are
    supported by the same company and community, there is good integration between
    the technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy our SPAProject in Azure, we need to select a publish option using
    the method we reviewed in the *The options to publish a project* section, select
    **Azure**, and then on the next screen, select **Azure App Service (Windows)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.16 – The possibilities to publish in Azure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.16_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.16 – The possibilities to publish in Azure
  prefs: []
  type: TYPE_NORMAL
- en: Remember to delete any `.pubxml` file in the project to create a new configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: To complete the steps in this section and publish the SPAProject in Azure, you
    will need an Azure account with credits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio provides some options to deploy in Azure. Let''s review them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure App Service (Windows)**: Publish the project in a **platform as a service**
    (**PaaS**) container using Windows as the operating system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure App Service (Linux)**: Publish the project in a PaaS container using
    Linux as the operating system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure App Service Container**: Run up a container in an Azure App using an
    Azure App Service container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Container Registry**: Publish the application as a Docker image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Virtual Machine**: Publish a folder in a virtual machine and then manually
    use IIS to run the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After clicking on **Next**, you will get a new window to perform authentication
    in Azure and connect with the services and resources in Azure for your account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.17 – The Azure account sign-in'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.17_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.17 – The Azure account sign-in
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 10.17*, we see a new window, where we need to authenticate with
    Azure using the **Sign In…** button to continue with the setup and integrate Visual
    Studio with the resources in our Azure account. After performing the authentication,
    we can select the subscription and create a new web app instance using the green
    cross button (see *Figure 10.18*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.18 – The option to select a subscription and create a new app service'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.18_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.18 – The option to select a subscription and create a new app service
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to select a hosting plan for our SPAProject:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.19 – The hosting plan for a new app service'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.19_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.19 – The hosting plan for a new app service
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we can use a free plan in Azure with limited time to run our web
    app. It's perfect for performing demos and trying this publishing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To analyze and compare other plans in Azure, you can navigate to the following
    link: [https://azure.microsoft.com/pricing/details/app-service/windows/](https://azure.microsoft.com/pricing/details/app-service/windows/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the hosting plan, we can finish the configuration by choosing
    a name and resource group for our project (see *Figure 10.20*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.20 – The app service configuration for our SAPProject'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.20_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.20 – The app service configuration for our SAPProject
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 10.21*, we can see a preview of the project created, and we can
    complete using the **Finish** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.21 – The web app for the created SPAProject'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.21_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.21 – The web app for the created SPAProject
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in the last step, we have two options to complete the integration
    with Azure (see *Figure 10.22*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.22 – The deployment options in Azure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.22_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.22 – The deployment options in Azure
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review these options to choose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.pubxml` file with the configuration. We need to publish the project manually
    using the **Publish** button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.yml` file that contains **continuous integration** (**CI**) and **continuous
    deployment** (**CD**) configurations to deploy the project after every change
    in code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this example, we will choose **Publish (generates pubxml file)** and click
    on **Finish** to complete the setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with *Figure 10.14,* we will see the `.pubxml` file created and the **Publish**
    button. Click on **Publish** to publish our project in Azure. After publishing
    the project, Visual Studio will open the site using the URL from Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.23 – The SPAProject running using an app service in Azure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.23_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.23 – The SPAProject running using an app service in Azure
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 10.23*, we can see a new tab opened by Visual Studio that shows the
    URL of our project in Azure. This URL has the name of the project followed by
    the `azurewebsites.net` domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'You now know how to publish a project in Azure using only the UI in Visual
    Studio and some clicks. To see more details about the integration between Visual
    Studio and Azure, check out this link: [https://docs.microsoft.com/aspnet/core/tutorials/publish-to-azure-webapp-using-vs](https://docs.microsoft.com/aspnet/core/tutorials/publish-to-azure-webapp-using-vs).'
  prefs: []
  type: TYPE_NORMAL
- en: After reviewing the main options to deploy an application using Visual Studio,
    we conclude this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you know how to navigate in Visual Studio to access
    the `.pubxml` file.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B17873_11_ePub.xhtml#_idTextAnchor130), *Implementing Git
    Integration*, we will review all the tools included in Visual Studio to connect
    with Git repositories and GitHub in particular. You will learn how to see the
    status of your changes using a visual interface and publish your project in a
    public or private repository easily.
  prefs: []
  type: TYPE_NORMAL
