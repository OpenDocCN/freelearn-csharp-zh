- en: Shader Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Shader Graph project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a simple a Shader Graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing properties to the Inspector via Shader Graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a glowing highlight system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First released in Unity 2018.1, Shader Graph allows you to create shaders using
    a visual interface by connecting nodes instead of having to dive into the code.
    This will allow developers, including artists, to be able to create shaders in
    a similar manner to material editors in 3D modeling programs such as Autodesk
    Maya and Blender, or the material editor in the Unreal Engine. At the time of
    writing, Shader Graph is only supported for certain kinds of projects and doesn't
    allow the same flexibility as writing the shaders from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Shader Graph project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike all of the previous shaders we have written, the Shader Graph tool requires
    users to have a project that is using the Lightweight Render Pipeline. The Lightweight
    Render Pipeline is meant for lower-end hardware, and is focused on drawing with
    a single-pass and decreasing the draw count wherever possible. For this first
    recipe, you will ensure that your project is set up correctly, by using the settings
    that Shader Graph needs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, we first need to create our new project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Unity Hub, when creating a new project, set the Template to Lightweight
    RP (Preview):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Shader Graph is currently only compatible with the Lightweight Render Pipeline,
    so this ensures that the graph will work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Shader Graph is only available with Unity 2018.1 and above. If you are using
    a prior version, make sure to upgrade before continuing with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once selected, press the Create project button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this project already includes a number of assets inside it.
  prefs: []
  type: TYPE_NORMAL
- en: When the Unity Editor opens, the Shader Graph is not included by default in
    the Unity editor. To access it, you'll need to make use of the Unity Package Manager.
    From the top menu, go to Window | Package Manager. The Package Manager will allow
    you to install or uninstall different aspects of Unity. You'll notice two buttons,
    one for packages that are in the project (In Project) and one for all the packages
    that are currently available to be downloaded (All).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Package Manager window, hit the All button, scroll down until you
    see the Shader Graph button, and select it. From there, click on the Install 1.1.9-preview
    button, and wait for it to complete the download and import the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once everything has been downloaded, go to the Project tab, select Create |
    Shader, and see if you can find the following new options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PBR Graph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sub Graph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlit Graph
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned before, Shader Graph is currently only compatible with the Lightweight
    Render Pipeline. The easiest way to ensure that a project is using that pipeline
    is by selecting it as the Template when creating the project.
  prefs: []
  type: TYPE_NORMAL
- en: Once the project has been created, we make use of the newly added Package Manager,
    which allows you to install or uninstall different aspects of Unity. In this case,
    you have added the Shader Graph functionality.
  prefs: []
  type: TYPE_NORMAL
- en: If everything's included, Shader Graph has been installed successfully, and
    you should be able to work on the rest of the recipes for this chapter!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a simple a Shader Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get acquainted with the interface of the Shader Graph, let's create something
    similar to what we have seen before by sampling a texture to create a simple shader.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ensure that you have created a project using the Lightweight Render Pipeline,
    as described in the *Create a Shader Graph project* recipe. Afterward, complete
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene, if you haven't done so already, by going to File | New Scene
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterward, we need to have something to show our shader, so let''s create a
    new sphere by going to Game Object | 3D Object| Sphere:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start off by creating a simple shader graph.
  prefs: []
  type: TYPE_NORMAL
- en: From the Project window, create a new shader by going to Create | Shader | PBR
    Graph, and name it `SimpleGraph`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, create a new material by going to Create | Material (I named mine
    `SimpleGraphMat`). Next, assign the shader to the material by selecting the Material,
    then from the Inspector tab, you should select the Shader dropdown at the top
    and select graphs/SimpleGraph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As always, you can also drag and drop the shader on top of the material as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, drag and drop the material onto our spherical object in the scene so
    we can see our shader being used in action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the setup is done, we can start creating the graph. If you select
    the shader, you should notice, the Inspector tab that there is a button that says
    Open Shader Editor. Click on the button and the Shader Graph Editor will open
    automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To move within the Shader Graph Editor, you can use the mouse wheel to zoom
    in and out, and you can hold the middle mouse button and drag to pan the graph.
    Alternatively, you can also use *Alt* + left mouse button.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, let''s add a texture. Right-click to the left of the PBR Master
    and select Create Node. From there, you''ll see a menu that allows you to either
    type in the name of a node or select from the menus. To go through the menus,
    select Input | Texture| Sample Texture 2D. Alternatively, you can type in `tex`,
    then select the Sample Texture 2D option using the arrow keys, and then press
    *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also create a new node by moving your mouse over where you want to create
    one and pressing the Space key.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Feel free to click and drag any of the nodes on the Shader Graph to make it
    easier to see.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left-hand side of the Sample Texture 2D node, click on the circle with
    the dot in it to assign the texture as something that we can use (I used the Ground_Albedo
    property included with the project):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Afterward, you should see the data from the texture given in an image under
    the node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click and drag the pink circle on the right-hand side of the Sample Texture
    2D node to the input Albedo node on the PBR Master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Just like we've learned in previous chapters, we can give a `fixed4` to a `fixed3`
    and it will just disregard the fourth parameter.
  prefs: []
  type: TYPE_NORMAL
- en: If you are ever interested in what a particular node does or what the properties
    stand for, feel free to right click on it and select Open Documentation. It will
    open a window that will give you a description of what the node does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Save Asset button on the top menu and then return to the Unity
    editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the shader has now been updated to contain the information from
    the Shader Graph editor!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From Shader Graph, we are introduced to the first nodes we have encountered.
    Of note is the PBR Master section on the screen. This is where all of the information
    about the shader will go to. You may notice that the properties are very similar
    to the regular Standard Shader we've used in the past, and we can modify the properties
    in a similar manner now, but we can also create additional nodes and connect them
    together to create unique effects.
  prefs: []
  type: TYPE_NORMAL
- en: The Sample Texture2D node allows us to give the Texture property as an input
    and then give the data from it as an RGBA output on the right-hand side (things
    on the right side of a node are outputs while things on the left side are inputs,
    such as the Albedo property on the PBR Master node).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the color of the circle from the Texture input is red (the T stands
    for texture), the output of RGBA is pink (the 4 stands for `fixed4`), and the
    input for the Albedo input of the PBR Master node is yellow (the 3 stands for `fixed3`).
  prefs: []
  type: TYPE_NORMAL
- en: Exposing properties to the Inspector via Shader Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is great to be able to create graphs and set up their properties using the
    graph editor, but sometimes it is nice to use the same shader with a simple tweak
    in the same manner that we've used with the previous shaders we've created. To
    do this, we can make use of the blackboard panel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ensure that you have created the SimpleGraph shader in the previous recipe.
    Afterward, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Project tab, select the SimpleGraph shader and duplicate it by pressing
    *Ctrl* + *D*. Once duplicated, name the newly created shader `ExposeProperty`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a new material (`ExposePropertyMat`) and set the shader it uses
    to the graphs/ExposeProperty selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assign the material to the sphere in our scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The project should look the same as what we had in the previous recipe since
    we are using a duplicate of the previous shader.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you look at our shader from the Inspector tab, you may notice the Texture
    property with the Ground_Albedo image we assigned in the last recipe. A property
    like this could be something we want to modify, but, by default, it is grayed
    out so that we cannot change it without going into the Shader Graph. To adjust
    this, we can expose the property using the Blackboard aspect of the Shader Graph
    Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on the ExposeProperty shader to open up the Shader Graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice, on the bottom left, the graphs/ExposeProperty blackboard menu. This
    will contain a list of all the parameters we are able to modify via the Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: As you may already know, Shader Graph is brand new and as such is prone to issues,
    such as the Blackboard not being visible by default. Unfortunately, at this time,
    there's no way to turn it on and off through a menu. If you do not see the Blackboard,
    you might try to save your graph and return. Alternatively, you can reset your
    layout by going into Layout | Revert Factory Settings...
  prefs: []
  type: TYPE_NORMAL
- en: 'From the blackboard panel, click on the + icon and select Texture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From there, you can give the property a name (I used `TextureProperty`). Note
    that, under Default, you can assign a texture in the same way as done previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From there, to hook the property to our current shader, drag and drop the button
    with the property name on Shader Graph. Alternatively, you can right-click and
    select Create Node. Once at the menu, you can select Properties | Property: TextureProperty.
    Afterward, connect the TextureProperty output of the Property node to the Texture
    input of the Sample Texture 2D node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Afterward, hit the Save Asset button and dive back into the Unity editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, you should be able to assign the TextureProperty to whatever you want,
    through the Inspector, and you won't have to dive back into the graph to make
    those changes!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Blackboard menu allows you to create variables that are accessible from
    the Inspector. This works in a similar manner to the `Properties` block in previous
    chapters. Currently, it supports the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: Vector1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Texture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cubemap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties added to the Blackboard can be reordered by dragging them around,
    and each property can be renamed by double-clicking on the name.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the Blackboard, check out the following link: [https://github.com/Unity-Technologies/ShaderGraph/wiki/Blackboard](https://github.com/Unity-Technologies/ShaderGraph/wiki/Blackboard).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a glowing highlight system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have some background information on how to build shaders, let's
    look at a real-world example of a shader we could potentially use. When playing
    certain kinds of games, you may notice that, when the player faces an object they
    can interact with, the object may glow such as in Dontnod Entertainment's *Life
    is Strange*, The Fullbright Company‎'s *Gone Home*, and even in recent mobile
    games such as Jam City's *Harry Potter Hogwarts Mystery*. This is something that
    we can easily do in Shader Graph, which will also allow us to see a non-trivial
    example of Shader Graph being used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ensure that you have created a project using the Lightweight Render Pipeline,
    as described in the *Creating a Shader Graph project* recipe. Afterward, complete
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene, if you haven't done so already, by going to File | New Scene
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, we need to have something to show our shader, so let's create a new
    sphere by going to Game Object | 3D Object | Sphere
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start off by creating a simple shader graph:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Project window, create a new shader by going to Create Shader PBR Graph, and
    name it `GlowGraph`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, create a new material by going to Create | Material (I named mine `GlowGraphMat`).
    Next, assign the shader to the material by selecting the material, and then, from
    the Inspector tab, you should select the Shader dropdown at the top and select graphs/GlowGraph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, drag and drop the material onto our sphere object in the scene, so we
    can see our shader being used in action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the setup is done, we can start creating the graph. If you select the
    shader, you should see that, from the Inspector tab, there will be a button that
    says Open Shader Graph. Click on the button and the Shader Graph Editor will open
    automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firstly, we will add a new node called a Fresnel (pronounced fer-nel) Effect.
    To add it, go to the left-hand side of the PBR Master node, right-click, and select
    Create Node. From there, type in `Fresnel`, and once it has been selected press
    the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Fresnel Effect is often used to provide rim-lighting for objects. For more
    information on it, check out: [https://github.com/Unity-Technologies/ShaderGraph/wiki/Fresnel-Effect-Node](https://github.com/Unity-Technologies/ShaderGraph/wiki/Fresnel-Effect-Node).
  prefs: []
  type: TYPE_NORMAL
- en: Once created, connect the Out of the Fresnel Effect node to the Emission property
    of the PBR Master node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make it easier to tell what each node does, click on the grey color to the
    left of the Albedo property and change it to a different color, such as a bright
    pink:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the Fresnel effect is applied on top of the Albedo color due to it
    using that value for the Emission property.
  prefs: []
  type: TYPE_NORMAL
- en: We just want the edges of our object to glow, so change the `Power` property
    of the Fresnel Effect node to `4`. Currently, the light around our object is white,
    but we can make it a different color instead by multiplying it by a color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To do this, go to the Blackboard and create a new color by clicking on the +
    icon and then selecting Color. Once created, give it a name (`HoverColor`) and
    then set the Default color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once created, drag and drop the property beneath the Fresnel Effect node in
    the same way we learned in the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to multiply these together. Create a new node between them by
    selecting Math | Basic | Multiply. Connect the Out of the Fresnel Effect node
    to the A of the Multiply node. Then, connect the HoverColor property to the B
    of the Multiply node. Afterward, connect the Out of the Multiply node to the Emission
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Save the graph and dive back into the Unity editor. You should notice that the
    effect is indeed working as intended.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Project tab, select the `GlowGraph` shader we''ve created. Notice
    that the Inspector tab includes information on the properties used in the shader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Even though we are using the name HoverColor in the shader graph, throughout
    code it is referred to as `Color_AA468061`. If we wish to refer to this in the
    code, we will need to use this name latter instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new C# Script called `HighlightOnHover`. Double-click on it to enter
    your IDE, and use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save your script and return to the Unity editor. From there, attach the component
    to your sphere and start the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, when we highlight the object with the mouse, we will see the hover effect,
    but, otherwise, it will turn itself off!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Emission property is reflective of the light that an object receives. If
    the Emission is white it will be fully lit with that color. If black, it will
    act as if it doesn't exist. We make use of that by using black by default. However,
    if we do put our mouse over the object, the `OnMouseOver` function will trigger,
    causing it to use the color mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: I could write much more on the subject of Shader Graph, but, unfortunately,
    there isn't enough space in the book. If you would like to explore Shader Graph
    even more, Andy Touch has put together a lovely group of examples of Shader Graph
    being used that could be great research material. Check it out at [https://github.com/UnityTechnologies/ShaderGraph_ExampleLibrary](https://github.com/UnityTechnologies/ShaderGraph_ExampleLibrary).
  prefs: []
  type: TYPE_NORMAL
