["```cs\nusing var serialPort = new SerialPort(\n    \"COM3\",\n    9600,\n    Parity.None,\n    8,\n    StopBits.One);\nserialPort.Open();\ntry\n{\n    serialPort.Write([42],0, 1);\n}\nfinally\n{\n    serialPort.Close();\n}\n```", "```cs\n#define LedPin 13\n#define SoundPin 8\nint _prevResult = LOW;\nvoid setup() {\n  pinMode(LedPin, OUTPUT);\n  pinMode(SoundPin, INPUT);\n  Serial.begin(9600);\n}\nvoid loop() {\n  int soundPinData = digitalRead(SoundPin);\n  if(soundPinData != _prevResult){\n    _prevResult = soundPinData;\n    if(soundPinData == HIGH)\n    {\n      Serial.write(1);\n      digitalWrite(LED_BUILTIN, HIGH);\n    }\n    else\n    {\n      Serial.write(\"0\");\n      digitalWrite(LED_BUILTIN, LOW);\n    }\n    delay(100);\n  }\n}\n```", "```cs\npublic interface IComPortWatcher : Idisposable\n{\n    event EventHandler<ComPortChangedEventArgs>? ComportAddedEvent;\n    event EventHandler<ComPortChangedEventArgs>? ComportDeletedEvent;\n    void Start();\n    void Stop();\n    string FindMatchingComPort(string partialMatch);\n}\n```", "```cs\npublic string FindMatchingComPort(string partialMatch)\n{\n    string comPortName;\n    var searcher = new ManagementObjectSearcher(\n        @$\"Select * From Win32_PnPEntity Where Caption Like           '%{partialMatch}%'\");\n    var devices = searcher.Get();\n    if ( devices.Count > 0)\n    {\n        var firstDevice = devices.Cast<ManagementObject>().First();\n        comPortName = GetComPortName(firstDevice[\"Caption\"].          ToString());\n    }\n    else\n    {\n        comPortName = string.Empty;\n    }\n    return comPortName;\n}\n```", "```cs\nprivate string GetComPortName(string foundCaption)\n{\n    var regExPattern = @\"(COM\\d+)\";\n    var match = Regex.Match(foundCaption, regExPattern);\n    return match.Success? Match.Groups[1].Value : string.Empty;}\n```", "```cs\nprivate ManagementEventWatcher? _comPortDeletedWatcher;\nprivate ManagementEventWatcher? _comPortInsertedWatcher;\n```", "```cs\npublic void Start()\n{\n    if (_isRunning)\n        return;\n    var queryInsert = \"SELECT * FROM __InstanceCreationEvent WITHIN 1                       \" +\n                      \"WHERE TargetInstance ISA 'Win32_PnPEntity' \" +\n                      \"AND TargetInstance.Caption  LIKE\n                      '%Arduino%'\";\n    var queryDelete = \"SELECT * FROM __InstanceDeletionEvent WITHIN 1                       \" +\n                      \"WHERE TargetInstance ISA\n                      'Win32_PnPEntity' \" +\n                      \"AND TargetInstance.Caption  LIKE\n                      '%Arduino%'\";\n    _comPortInsertedWatcher = new\n       ManagementEventWatcher(queryInsert);\n    _comPortInsertedWatcher.EventArrived += HandleInsertEvent;\n    _comPortInsertedWatcher.Start();\n    _comPortDeletedWatcher = new ManagementEventWatcher(queryDelete);\n    _comPortDeletedWatcher.EventArrived += HandleDeleteEvent;\n    _comPortDeletedWatcher.Start();\n    _isRunning = true;\n}\n```", "```cs\nprivate void HandleInsertEvent(object sender, EventArrivedEventArgs e)\n{\n    var newInstance = e.NewEvent[\"TargetInstance\"] as       ManagementBaseObject;\n    var comPortName = GetComPortName(newInstance[\"Caption\"].      ToString());\n    Task.Run(() => ComportAddedEvent?.Invoke(this, new       ComPortChangedEventArgs(comPortName)));\n}\n```", "```cs\npublic interface IasyncSerial\n{\n    bool IsOpen { get; }\n    void Open(string portName,\n        int baudRate = 9600,\n        Parity parity = Parity.None,\n        int dataBits = 8,\n        StopBits stopBits = StopBits.One);\n    void Close();\n    Task<byte> ReadByteAsync(CancellationToken stoppingToken);\n}\n```", "```cs\nprivate SerialPort? _serialPort;\n```", "```cs\npublic void Open(\n    string portName,\n    int baudRate = 9600,\n    Parity parity = Parity.None,\n    int dataBits = 8,\n    StopBits stopBits = StopBits.One)\n{\n    if (IsOpen) throw new InvalidOperationException(\"Serial port is       already open\");\n    _serialPort = new SerialPort(\n        portName,\n        baudRate,\n        parity,\n        dataBits,\n        stopBits);\n    _serialPort.Open();\n    IsOpen = true;\n}\n```", "```cs\npublic Task<byte> ReadByteAsync(CancellationToken stoppingToken)\n{\n    return Task.Run(() =>\n    {\n        if (!IsOpen) throw new InvalidOperationException(\"Serial port           is not open\");\n        var buffer = new byte[1];\n        try\n        {\n            _serialPort?.Read(buffer, 0, 1);\n        }\n        catch (OperationCanceledException)\n        {\n            // This happens when the device has been unplugged\n            // We pass it a 0xFF to indicate that the device is no             // longer available\n            buffer[0] = 255;\n        }\n        return buffer[0];\n    }, stoppingToken);\n}\n```", "```cs\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Services.AddTransient<IComPortWatcher, ComPortWatcher>();\nbuilder.Services.AddTransient<IAsyncSerial, AsyncSerial>();\nbuilder.Services.AddHostedService<Worker>();\nvar host = builder.Build();\nhost.Run();\n```", "```cs\npublic Worker(ILogger<Worker> logger,\n    IAsyncSerial serial,\n    IComPortWatcher comPortWatcher)\n{\n    _logger = logger;\n    _serial = serial;\n    _comPortWatcher = comPortWatcher;\n    _comPortName = _comPortWatcher.FindMatchingComPort(\"Arduino\");\n    _deviceIsAvailable = !string.IsNullOrWhiteSpace(_comPortName);\n    _comPortWatcher.ComportAddedEvent += HandleInsertEvent;\n    _comPortWatcher.ComportDeletedEvent += HandleDeleteEvent;\n    _comPortWatcher.Start();\n    if (_deviceIsAvailable) StartSerialConnection();\n}\n```", "```cs\nprivate void StartSerialConnection()\n{\n    if (_serial.IsOpen)\n        return;\n    _serial.Open(_comPortName);\n    _deviceIsAvailable = true;\n}\n```", "```cs\nprivate void HandleInsertEvent(object? sender, ComPortChangedEventArgs e)\n{\n    _comPortName = e.ComPortName;\n    _logger.LogInformation($\"New COM port detected: {_comPortName}\");\n    if (!string.IsNullOrEmpty(_comPortName))\n        StartSerialConnection();\n}\n```", "```cs\nprotected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    while (!stoppingToken.IsCancellationRequested)\n    {\n        if (_deviceIsAvailable)\n        {\n            var receivedByte = await _serial?.              ReadByteAsync(stoppingToken);\n            if (receivedByte == 0xFF)\n            {\n                StopSerialConnection();\n                _logger.LogWarning(\"Device is ejected.\");\n            }\n            else\n            {\n                _logger.LogInformation($\"Data received:                   {receivedByte:X}\");\n            }\n        }\n        await Task.Delay(10, stoppingToken);\n    }\n}\n```", "```cs\npublic void Start()\n{\n    _timer = new Timer(2000);\n    _timer.Elapsed += (sender, args) =>\n    {\n        // Trigger the event every second\n        if (_deviceIsAvailable)\n        {\n            ComportDeletedEvent?.Invoke(this, new               ComPortChangedEventArgs(\"COM4\"));\n        }\n        else\n        {\n            ComportAddedEvent?.Invoke(this, new               ComPortChangedEventArgs(\"COM4\"));\n        }\n        _deviceIsAvailable = !_deviceIsAvailable;\n    };\n    _timer.Start();\n}\n```", "```cs\n#define FAKESERIAL\nusing _09_SerialMonitor;\nusing _09_SerialMonitor.Fakes;\nvar builder = Host.CreateApplicationBuilder(args);\n#if FAKESERIAL\n    builder.Services.AddTransient<IComPortWatcher, FakeComPortWatcher>();\n    builder.Services.AddTransient<IAsyncSerial, FakeAsyncSerial>();\n#else\n    builder.Services.AddTransient<IComPortWatcher, ComPortWatcher>();\n    builder.Services.AddTransient<IAsyncSerial, AsyncSerial>();\n#endif\nbuilder.Services.AddHostedService<Worker>();\nvar host = builder.Build();\nhost.Run();\n```", "```cs\ntry\n{\n    // Attempt to read from the serial port\n}\ncatch (TimeoutException)\n{\n    // Handle timeout, possibly retry\n}\ncatch (IOException ex)\n{\n    // Handle I/O errors\n    // Log or attempt recovery\n}\n```"]