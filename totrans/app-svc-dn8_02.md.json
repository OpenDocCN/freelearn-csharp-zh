["```cs\n    Server=tcp:apps-services-book.database.windows.net,1433;\n    Initial Catalog=Northwind;\n    Persist Security Info=False;\n    User ID=markjprice;\n    Password={your_password};\n    MultipleActiveResultSets=False;\n    Encrypt=True;\n    TrustServerCertificate=False;\n    Connection Timeout=30; \n    ```", "```cs\nDECLARE @WholeNumber INT; -- Declare a variable and specify its type.\nSET @WholeNumber = 3; -- Set the variable to a literal value.\nSET @WholeNumber = @WholeNumber + 1; -- Increment the variable.\nSELECT @WholeNumber = COUNT(*) FROM Employees; -- Set to the number of employees.\nSELECT @WholeNumber = EmployeeId FROM Employees WHERE FirstName = 'Janet'; \n```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference Include=****\"Microsoft.Data.SqlClient\"** **Version=****\"5.1.2\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<Using Include=****\"System.Console\"** **Static=****\"true\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    partial class Program\n    {\n      private static void ConfigureConsole(string culture = \"en-US\",\n        bool useComputerCulture = false)\n      {\n        // To enable Unicode characters like Euro symbol in the console.\n        OutputEncoding = System.Text.Encoding.UTF8;\n        if (!useComputerCulture)\n        {\n          CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(culture);\n        }\n        WriteLine($\"CurrentCulture: {CultureInfo.CurrentCulture.DisplayName}\");\n      }\n      private static void WriteLineInColor(string value, \n        ConsoleColor color = ConsoleColor.White)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = color;\n        WriteLine(value);\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlInfoMessageEventArgs.\n    using System.Data; // To use StateChangeEventArgs.\n    partial class Program\n    {\n      private static void Connection_StateChange(\n        object sender, StateChangeEventArgs e)\n      {\n        WriteLineInColor(\n          $\"State change from {e.OriginalState} to {e.CurrentState}.\",\n          ConsoleColor.DarkYellow);\n      }\n      private static void Connection_InfoMessage(\n        object sender, SqlInfoMessageEventArgs e)\n      {\n        WriteLineInColor($\"Info: {e.Message}.\", ConsoleColor.DarkBlue);\n      }\n    } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnection and so on.\n    ConfigureConsole();\n    #region Set up the connection string builder\n    SqlConnectionStringBuilder builder = new()\n    {\n      InitialCatalog = \"Northwind\",\n      MultipleActiveResultSets = true,\n      Encrypt = true,\n      TrustServerCertificate = true,\n      ConnectTimeout = 10 // Default is 30 seconds.\n    };\n    WriteLine(\"Connect to:\");\n    WriteLine(\"  1 - SQL Server on local machine\");\n    WriteLine(\"  2 - Azure SQL Database\");\n    WriteLine(\"  3 – Azure SQL Edge\");\n    WriteLine();\n    Write(\"Press a key: \");\n    ConsoleKey key = ReadKey().Key;\n    WriteLine(); WriteLine();\n    switch (key)\n    {\n      case ConsoleKey.D1 or ConsoleKey.NumPad1:\n        builder.DataSource = \".\";\n        break;\n      case ConsoleKey.D2 or ConsoleKey.NumPad2:\n        builder.DataSource = \n          // Use your Azure SQL Database server name.\n          \"tcp:apps-services-book.database.windows.net,1433\";\n        break;\n      case ConsoleKey.D3 or ConsoleKey.NumPad3:\n        builder.DataSource = \"tcp:127.0.0.1,1433\";\n        break;\n      default:\n        WriteLine(\"No data source selected.\");\n        return;\n    }\n    WriteLine(\"Authenticate using:\");\n    WriteLine(\"  1 – Windows Integrated Security\");\n    WriteLine(\"  2 – SQL Login, for example, sa\");\n    WriteLine();\n    Write(\"Press a key: \");\n    key = ReadKey().Key;\n    WriteLine(); WriteLine();\n    if (key is ConsoleKey.D1 or ConsoleKey.NumPad1)\n    {\n      builder.IntegratedSecurity = true;\n    }\n    else if (key is ConsoleKey.D2 or ConsoleKey.NumPad2)\n    {\n      Write(\"Enter your SQL Server user ID: \");\n      string? userId = ReadLine();\n      if (string.IsNullOrWhiteSpace(userId))\n      {\n        WriteLine(\"User ID cannot be empty or null.\");\n        return;\n      }\n      builder.UserID = userId;\n      Write(\"Enter your SQL Server password: \");\n      string? password = ReadLine();\n      if (string.IsNullOrWhiteSpace(password))\n      {\n        WriteLine(\"Password cannot be empty or null.\");\n        return;\n      }\n      builder.Password = password;\n      builder.PersistSecurityInfo = false;\n    }\n    else\n    {\n      WriteLine(\"No authentication selected.\");\n      return;\n    }\n    #endregion\n    #region Create and open the connection\n    SqlConnection connection = new(builder.ConnectionString);\n    WriteLine(connection.ConnectionString);\n    WriteLine();\n    connection.StateChange += Connection_StateChange;\n    connection.InfoMessage += Connection_InfoMessage;\n    try\n    {\n      WriteLine(\"Opening connection. Please wait up to {0} seconds...\", \n        builder.ConnectTimeout);\n      WriteLine();\n      connection.Open();\n      WriteLine($\"SQL Server version: {connection.ServerVersion}\");\n    }\n    catch (SqlException ex)\n    {\n      WriteLineInColor($\"SQL exception: {ex.Message}\", \n        ConsoleColor.Red);\n      return;\n    }\n    #endregion\n    connection.Close(); \n    ```", "```cs\n    Connect to:\n      1 - SQL Server on local machine\n      2 - Azure SQL Database\n      3 - Azure SQL Edge\n    Press a key: 1\n    Authenticate using:\n      1 - Windows Integrated Security\n      2 - SQL Login, for example, sa\n    Press a key: 1\n    Data Source=.;Initial Catalog=Northwind;Integrated Security=True;Multiple Active Result Sets=True;Connect Timeout=10;Encrypt=True;Trust Server Certificate=True\n    Opening connection. Please wait up to 10 seconds...\n    State change from Closed to Open.\n    SQL Server version: 15.00.2101\n    State change from Open to Closed. \n    ```", "```cs\n    Enter your SQL Server user ID: markjprice\n    Enter your SQL Server password: [censored]\n    Data Source=tcp:apps-services-book.database.windows.net,1433;Initial Catalog=Northwind;Persist Security Info=False;User ID=markjprice;Password=[censored];Multiple Active Result Sets=True;Connect Timeout=10;Encrypt=True;Trust Server Certificate=True\n    Opening connection. Please wait up to 10 seconds...\n    State change from Closed to Open.\n    SQL Server version: 12.00.5168\n    State change from Open to Closed. \n    ```", "```cs\n    Enter your SQL Server user ID: markjprice\n    Enter your SQL Server password: 123456\n    Data Source=tcp:apps-services-book.database.windows.net,1433;Initial Catalog=Northwind;Persist Security Info=False;User ID=markjprice;Password=123456;Multiple Active Result Sets=True;Connect Timeout=10;Encrypt=True;Trust Server Certificate=True\n    Opening connection. Please wait up to 10 seconds...\n    SQL exception: Login failed for user 'markjprice'. \n    ```", "```cs\n    SQL exception: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 0 - No such host is known.) \n    ```", "```cs\n    using System.Data; // To use CommandType. \n    ```", "```cs\n    SqlCommand cmd = connection.CreateCommand();\n    cmd.CommandType = CommandType.Text;\n    cmd.CommandText = \"SELECT ProductId, ProductName, UnitPrice FROM Products\";\n    SqlDataReader r = cmd.ExecuteReader();\n    string horizontalLine = new string('-', 60);\n    WriteLine(horizontalLine);\n    WriteLine(\"| {0,5} | {1,-35} | {2,10} |\", \n      arg0: \"Id\", arg1: \"Name\", arg2: \"Price\");\n    WriteLine(horizontalLine);\n    while (r.Read())\n    {\n      WriteLine(\"| {0,5} | {1,-35} | {2,10:C} |\",\n        r.GetInt32(\"ProductId\"), \n        r.GetString(\"ProductName\"),\n        r.GetDecimal(\"UnitPrice\"));\n    }\n    WriteLine(horizontalLine);\n    r.Close(); \n    ```", "```cs\n    ----------------------------------------------------------\n    |    Id | Name                                |    Price |\n    ----------------------------------------------------------\n    |     1 | Chai                                |   $18.00 |\n    |     2 | Chang                               |   $19.00 |\n    ...\n    |    76 | Lakkalikööri                        |   $18.00 |\n    |    77 | Original Frankfurter grüne Soße     |   $13.00 |\n    ---------------------------------------------------------- \n    ```", "```cs\n    **Write(****\"Enter a unit price: \"****);**\n    **string****? priceText = ReadLine();**\n    **if****(!****decimal****.TryParse(priceText,** **out****decimal** **price))**\n    **{**\n     **WriteLine(****\"You must enter a valid unit price.\"****);**\n    **return****;**\n    **}**\n    SqlCommand cmd = connection.CreateCommand();\n    cmd.CommandType = CommandType.Text;\n    cmd.CommandText = \"SELECT ProductId, ProductName, UnitPrice FROM Products\" \n     **+** **\" WHERE UnitPrice >= @minimumPrice**\";\n    **cmd.Parameters.AddWithValue(****\"minimumPrice\"****, price);** \n    ```", "```cs\n    Enter a unit price: 50\n    ----------------------------------------------------------\n    |    Id | Name                                |    Price |\n    ----------------------------------------------------------\n    |     9 | Mishi Kobe Niku                     |   $97.00 |\n    |    18 | Carnarvon Tigers                    |   $62.50 |\n    |    20 | Sir Rodney's Marmalade              |   $81.00 |\n    |    29 | Thüringer Rostbratwurst             |  $123.79 |\n    |    38 | Côte de Blaye                       |  $263.50 |\n    |    51 | Manjimup Dried Apples               |   $53.00 |\n    |    59 | Raclette Courdavault                |   $55.00 |\n    ---------------------------------------------------------- \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnection.\n    using System.Collections; // To use IDictionary. \n    ```", "```cs\n    private static void OutputStatistics(SqlConnection connection)\n    {\n      // Remove all the string values to see all the statistics.\n      string[] includeKeys = { \n        \"BytesSent\", \"BytesReceived\", \"ConnectionTime\", \"SelectRows\" \n      };\n      IDictionary statistics = connection.RetrieveStatistics();\n      foreach (object? key in statistics.Keys)\n      {\n        if (!includeKeys.Any() || includeKeys.Contains(key))\n        {\n          if (int.TryParse(statistics[key]?.ToString(), out int value))\n          {\n            WriteLineInColor($\"{key}: {value:N0}\", ConsoleColor.Cyan);\n          }\n        }\n      }\n    } \n    ```", "```cs\n    WriteLine($\"SQL Server version: {connection.ServerVersion}\");\n    **connection.StatisticsEnabled =** **true****;** \n    ```", "```cs\n    **OutputStatistics(connection);**\n    connection.Close(); \n    ```", "```cs\n    BytesReceived: 3,888\n    BytesSent: 336\n    SelectRows: 77\n    ExecutionTime: 25 \n    ```", "```cs\n    **await** connection.Open**Async**(); \n    ```", "```cs\n    SqlDataReader r = **await** cmd.ExecuteReader**Async**(); \n    ```", "```cs\n    while (**await** r.Read**Async**())\n    {\n      WriteLine(\"| {0,5} | {1,-35} | {2,8:C} |\",\n        **await** r.Get**FieldValueAsync<****int****>**(\"ProductId\"),\n        **await** r.Get**FieldValueAsync<****string****>**(\"ProductName\"),\n        **await** r.Get**FieldValueAsync<****decimal****>**(\"UnitPrice\"));\n    } \n    ```", "```cs\n    **await** r.Close**Async**();\n    **await** connection.Close**Async**(); \n    ```", "```cs\n    CREATE PROCEDURE [dbo].[GetExpensiveProducts]\n      @price money,\n      @count int OUT\n    AS\n      PRINT 'Getting expensive products: ' + \n        TRIM(CAST(@price AS NVARCHAR(10)))\n      SELECT @count = COUNT(*)\n      FROM Products\n    \tWHERE UnitPrice >= @price\n      SELECT * \n      FROM Products\n      WHERE UnitPrice >= @price\n    RETURN 0 \n    ```", "```cs\n    SqlCommand cmd = connection.CreateCommand();\n    **WriteLine(****\"Execute command using:\"****);**\n    **WriteLine(****\"  1 - Text\"****);**\n    **WriteLine(****\"  2 - Stored Procedure\"****);**\n    **WriteLine();**\n    **Write(****\"Press a key: \"****);**\n    **key = ReadKey().Key;**\n    **WriteLine(); WriteLine();**\n    **SqlParameter p1, p2 =** **new****(), p3 =** **new****();**\n    **if** **(key** **is** **ConsoleKey.D1** **or** **ConsoleKey.NumPad1)**\n    **{**\n      cmd.CommandType = CommandType.Text;\n      cmd.CommandText = \"SELECT ProductId, ProductName, UnitPrice FROM Products\"\n        + \" WHERE UnitPrice >= @minimumPrice\";\n      cmd.Parameters.AddWithValue(\"minimumPrice\", price);\n    **}**\n    **else****if** **(key** **is** **ConsoleKey.D2** **or** **ConsoleKey.NumPad2)**\n    **{**\n     **cmd.CommandType = CommandType.StoredProcedure;**\n     **cmd.CommandText =** **\"GetExpensiveProducts\"****;**\n     **p1 =** **new****()**\n     **{**\n     **ParameterName =** **\"price\"****,**\n     **SqlDbType = SqlDbType.Money,**\n     **SqlValue = price**\n     **};**\n     **p2 =** **new****()**\n     **{**\n     **Direction = ParameterDirection.Output,**\n     **ParameterName =** **\"count\"****,**\n     **SqlDbType = SqlDbType.Int**\n     **};**\n     **p3 =** **new****()**\n     **{**\n     **Direction= ParameterDirection.ReturnValue,**\n     **ParameterName =** **\"rv\"****,**\n     **SqlDbType = SqlDbType.Int**\n     **};**\n     **cmd.Parameters.AddRange(****new****[] { p1, p2, p3 });**\n    **}**\n    SqlDataReader r = await cmd.ExecuteReaderAsync(); \n    ```", "```cs\n    await r.CloseAsync();\n    **if** **(key** **is** **ConsoleKey.D2** **or** **ConsoleKey.NumPad2)**\n    **{**\n     **WriteLine(****$\"Output count:** **{p2.Value}****\"****);**\n     **WriteLine(****$\"Return value:** **{p3.Value}****\"****);**\n    **}**\n    await connection.CloseAsync(); \n    ```", "```cs\n    Enter a unit price: 60\n    Execute command using:\n      1 - Text\n      2 - Stored Procedure\n    Press a key: 2\n    Info: Getting expensive products: 60.00.\n    ----------------------------------------------------------\n    |    Id | Name                                |    Price |\n    ----------------------------------------------------------\n    |     9 | Mishi Kobe Niku                     |   $97.00 |\n    |    18 | Carnarvon Tigers                    |   $62.50 |\n    |    20 | Sir Rodney's Marmalade              |   $81.00 |\n    |    29 | Thüringer Rostbratwurst             |  $123.79 |\n    |    38 | Côte de Blaye                       |  $263.50 |\n    ----------------------------------------------------------\n    Output count: 5\n    Return value: 0\n    State change from Open to Closed. \n    ```", "```cs\n    using System.Text.Json; // To use Utf8JsonWriter, JsonSerializer.\n    using static System.Environment;\n    using static System.IO.Path; \n    ```", "```cs\n    **// Define a file path to write to.**\n    **string** **jsonPath = Combine(CurrentDirectory,** **\"products.json\"****);**\n    **await****using** **(FileStream jsonStream = File.Create(jsonPath))**\n    **{**\n     **Utf8JsonWriter jsonWriter =** **new****(jsonStream);**\n     **jsonWriter.WriteStartArray();**\n      while (await r.ReadAsync())\n      {\n        WriteLine(\"| {0,5} | {1,-35} | {2,10:C} |\",\n          await r.GetFieldValueAsync<int>(\"ProductId\"),\n          await r.GetFieldValueAsync<string>(\"ProductName\"),\n          await r.GetFieldValueAsync<decimal>(\"UnitPrice\"));\n     **jsonWriter.WriteStartObject();**\n     **jsonWriter.WriteNumber(****\"productId\"****,** \n    **await** **r.GetFieldValueAsync<****int****>(****\"ProductId\"****));**\n     **jsonWriter.WriteString(****\"productName\"****,** \n    **await** **r.GetFieldValueAsync<****string****>(****\"ProductName\"****));**\n     **jsonWriter.WriteNumber(****\"unitPrice\"****,** \n    **await** **r.GetFieldValueAsync<****decimal****>(****\"UnitPrice\"****));**\n     **jsonWriter.WriteEndObject();**\n      }\n     **jsonWriter.WriteEndArray();**\n     **jsonWriter.Flush();**\n     **jsonStream.Close();**\n    **}**\n    **WriteLineInColor(****$\"Written to:** **{jsonPath}****\"****, ConsoleColor.DarkGreen);** \n    ```", "```cs\n    Written to: C:\\apps-services-net8\\Chapter02\\Northwind.Console.SqlClient\\bin\\Debug\\net8.0\\products.json \n    ```", "```cs\n    [{\"productId\":9,\"productName\":\"Mishi Kobe Niku\",\"unitPrice\":97.0000},{\"productId\":18,\"productName\":\"Carnarvon Tigers\",\"unitPrice\":62.5000},{\"productId\":20,\"productName\":\"Sir Rodney\\u0027s Marmalade\",\"unitPrice\":81.0000},{\"productId\":29,\"productName\":\"Th\\u00FCringer Rostbratwurst\",\"unitPrice\":123.7900},{\"productId\":38,\"productName\":\"C\\u00F4te de Blaye\",\"unitPrice\":263.5000}] \n    ```", "```cs\n    namespace Northwind.Models;\n    public class Product\n    {\n      public int ProductId { get; set; }\n      public string? ProductName { get; set; }\n      public decimal? UnitPrice { get; set; }\n    } \n    ```", "```cs\n    **List<Product> products =** **new****(capacity:** **77****);**\n    await using (FileStream jsonStream = File.Create(jsonPath)) \n    ```", "```cs\n    while (await r.ReadAsync())\n    {\n     **Product product =** **new****()**\n     **{**\n     **ProductId =** **await** **r.GetFieldValueAsync<****int****>(****\"ProductId\"****),**\n     **ProductName =** **await** **r.GetFieldValueAsync<****string****>(****\"ProductName\"****),**\n     **UnitPrice =** **await** **r.GetFieldValueAsync<****decimal****>(****\"UnitPrice\"****)**\n     **};**\n     **products.Add(product);**\n      ...\n    } \n    ```", "```cs\n    **WriteLineInColor(JsonSerializer.Serialize(products),**\n     **ConsoleColor.Magenta);**\n    await r.CloseAsync(); \n    ```", "```cs\n    Written to: C:\\apps-services-net8\\Chapter02\\Northwind.Console.SqlClient\\bin\\Debug\\net8.0\\products.json\n    [{\"ProductId\":9,\"ProductName\":\"Mishi Kobe Niku\",\"UnitPrice\":97.0000},{\"ProductId\":18,\"ProductName\":\"Carnarvon Tigers\",\"UnitPrice\":62.5000},{\"ProductId\":20,\"ProductName\":\"Sir Rodney\\u0027s Marmalade\",\"UnitPrice\":81.0000},{\"ProductId\":29,\"ProductName\":\"Th\\u00FCringer Rostbratwurst\",\"UnitPrice\":123.7900},{\"ProductId\":38,\"ProductName\":\"C\\u00F4te de Blaye\",\"UnitPrice\":263.5000}] \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.1.2\" />\n     **<PackageReference Include=****\"Dapper\"** **Version=****\"2.1.21\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    namespace Northwind.Models;\n    public class Supplier\n    {\n      public int SupplierId { get; set; }\n      public string? CompanyName { get; set; }\n      public string? City { get; set; }\n      public string? Country { get; set; }\n    } \n    ```", "```cs\n    WriteLineInColor(\"Using Dapper\", ConsoleColor.DarkGreen);\n    connection.ResetStatistics(); // So we can compare using Dapper.\n    IEnumerable<Supplier> suppliers = connection.Query<Supplier>(\n      sql: \"SELECT * FROM Suppliers WHERE Country=@Country\",\n      param: new { Country = \"Germany\" });\n    foreach (Supplier s in suppliers)\n    {\n      WriteLine(\"{0}: {1}, {2}, {3}\",\n        s.SupplierId, s.CompanyName, s.City, s.Country);\n    }\n    WriteLineInColor(JsonSerializer.Serialize(suppliers),\n      ConsoleColor.Green);\n    OutputStatistics(connection); \n    ```", "```cs\n    Using Dapper\n    11: Heli Süßwaren GmbH & Co. KG, Berlin, Germany\n    12: Plutzer Lebensmittelgroßmärkte AG, Frankfurt, Germany\n    13: Nord-Ost-Fisch Handelsgesellschaft mbH, Cuxhaven, Germany\n    [{\"SupplierId\":11,  \"CompanyName\":\"Heli S\\u00FC\\u00DFwaren GmbH \\u0026 Co. KG\",\n      \"City\":\"Berlin\",\"Country\":\"Germany\"},\n     {\"SupplierId\":12,\n      \"CompanyName\":\"Plutzer Lebensmittelgro\\u00DFm\\u00E4rkte AG\",\n      \"City\":\"Frankfurt\",\"Country\":\"Germany\"},\n     {\"SupplierId\":13,\n      \"CompanyName\":\"Nord-Ost-Fisch Handelsgesellschaft mbH\",\n      \"City\":\"Cuxhaven\",\"Country\":\"Germany\"}]\n    BytesReceived: 1,430\n    BytesSent: 240\n    SelectRows: 3\n    ExecutionTime: 5 \n    ```", "```cs\n    IEnumerable<Product> productsFromDapper = \n      connection.Query<Product>(sql: \"GetExpensiveProducts\",\n      param: new { price = 100M, count = 0 }, \n      commandType: CommandType.StoredProcedure);\n    foreach (Product p in productsFromDapper)\n    {\n      WriteLine(\"{0}: {1}, {2}\",\n        p.ProductId, p.ProductName, p.UnitPrice);\n    }\n    WriteLineInColor(JsonSerializer.Serialize(productsFromDapper),\n      ConsoleColor.Green); \n    ```", "```cs\nInfo: Getting expensive products: 100.00.\n29: Thüringer Rostbratwurst, 123.7900\n38: Côte de Blaye, 263.5000\n[{\"ProductId\":29,\"ProductName\":\"Th\\u00FCringer Rostbratwurst\",\"UnitPrice\":123.7900},{\"ProductId\":38,\"ProductName\":\"C\\u00F4te de Blaye\",\"UnitPrice\":263.5000}] \n```"]