- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Managing Relational Data Using SQL Server
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL Server管理关系数据
- en: This chapter is about managing relational data stored in SQL Server, Azure SQL
    Database, or Azure SQL Edge. First, you will learn how to manage the data using
    native Transact-SQL statements. Next, you will learn how to manage data at a low
    level using ADO.NET libraries (`Microsoft.Data.SqlClient`). Finally, you will
    use Dapper to make it easier to work with entity models.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于管理存储在SQL Server、Azure SQL Database或Azure SQL Edge中的关系数据。首先，您将学习如何使用原生Transact-SQL语句管理数据。接下来，您将学习如何使用ADO.NET库（`Microsoft.Data.SqlClient`）以低级别管理数据。最后，您将使用Dapper来简化与实体模型的工作。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding modern databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解现代数据库
- en: Managing data with Transact-SQL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Transact-SQL管理数据
- en: Managing SQL Server data with low-level APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用低级API管理SQL Server数据
- en: Managing SQL Server data with Dapper
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Dapper管理SQL Server数据
- en: Cleaning up data resources
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理数据资源
- en: Understanding modern databases
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解现代数据库
- en: Two of the most common places to store data are in a **Relational Database Management
    System** (**RDBMS**) such as **SQL Server**, **PostgreSQL**, **MySQL**, and **SQLite**,
    or in a **NoSQL** database such as **Azure Cosmos DB**, **MongoDB**, **Redis**,
    and **Apache Cassandra**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据最常见的两个地方是在**关系数据库管理系统**（**RDBMS**）中，如**SQL Server**、**PostgreSQL**、**MySQL**和**SQLite**，或者是在**NoSQL**数据库中，如**Azure
    Cosmos DB**、**MongoDB**、**Redis**和**Apache Cassandra**。
- en: In this chapter, we will focus on the most popular RDBMS for Windows, which
    is SQL Server. This product is also available in a version for Linux. For cross-platform
    development, you can use either Azure SQL Database, which stores the data in the
    cloud, or Azure SQL Edge, which can run in a Docker container on Windows, macOS,
    or Linux, on both Intel and ARM architecture CPUs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注Windows上最受欢迎的RDBMS，即SQL Server。此产品也有适用于Linux的版本。对于跨平台开发，您可以使用Azure
    SQL Database，它将数据存储在云中，或者使用Azure SQL Edge，它可以在Windows、macOS或Linux上的Docker容器中运行，无论是在Intel还是ARM架构的CPU上。
- en: Using a sample relational database
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用示例关系数据库
- en: To learn how to manage an RDBMS using .NET, it would be useful to have a sample
    one so that you can practice on a database that has a medium complexity and a
    decent number of sample records.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何使用.NET管理RDBMS，拥有一个示例数据库会很有用，这样您就可以在一个具有中等复杂性和相当数量的示例记录的数据库上练习。
- en: Microsoft offers several sample databases, most of which are too complex for
    our needs, so instead, we will use a database that was first created in the early
    1990s known as **Northwind**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了几个示例数据库，其中大多数对我们来说过于复杂，因此，我们将使用一个在20世纪90年代初首次创建的数据库，称为**Northwind**。
- en: 'Let’s take a minute to look at a diagram of the Northwind database and its
    eight most important tables. You can use the diagram in *Figure 2.1* to refer
    to as we write code and queries throughout this book:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一分钟时间看看Northwind数据库及其八个最重要的表的图表。您可以使用图2.1在本书编写代码和查询时进行参考：
- en: '![](img/B19587_02_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_02_01.png)'
- en: 'Figure 2.1: The Northwind database tables and relationships'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：Northwind数据库表和关系
- en: 'Note that:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: Each category has a unique identifier, name, description, and picture. The picture
    is stored as a byte array in JPEG format.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个类别都有一个唯一的标识符、名称、描述和图片。图片以JPEG格式存储为字节数组。
- en: Each product has a unique identifier, name, unit price, number of units in stock,
    and other columns.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品都有一个唯一的标识符、名称、单价、库存数量和其他列。
- en: Each product is associated with a category by storing the category’s unique
    identifier.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品都与一个类别相关联，通过存储该类别的唯一标识符。
- en: The relationship between `Categories` and `Products` is one-to-many, meaning
    each category can have zero, one, or more products.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Categories`和`Products`之间的关系是一对多，这意味着每个类别可以有零个、一个或多个产品。'
- en: Each product is supplied by a supplier company indicated by storing the supplier’s
    unique identifier.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品由一个供应商公司提供，通过存储供应商的唯一标识符来表示。
- en: The quantity and unit price of a product is stored for each detail of an order.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个订单的每个细节都存储了产品的数量和单价。
- en: Each order is made by a customer, taken by an employee, and shipped by a shipping
    company.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个订单都是由客户下单、由员工接收并由物流公司发货的。
- en: Each employee has a name, address, contact details, birth, and hire dates, a
    reference to their manager (except for the boss, whose `ReportsTo` field is `null`),
    and a photo stored as a byte array in JPEG format. The table has a one-to-many
    relationship to itself because one employee can manage many other employees.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每位员工都有一个姓名、地址、联系详情、出生日期和雇佣日期，以及一个指向其经理的引用（除了老板，其`ReportsTo`字段为`null`），并且照片以JPEG格式存储为字节数组。由于一个员工可以管理许多其他员工，因此该表与其自身具有一对一的关系。
- en: Connecting to a SQL Server database
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到SQL Server数据库
- en: 'To connect to a SQL Server database, we need to know multiple pieces of information,
    as shown in the following list:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到SQL Server数据库，我们需要知道以下列表中的多个信息：
- en: The name of the server (and the name of the instance if it has more than the
    default one). This can include the protocol, IP address, and port number if connecting
    over a network.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器（如果它具有默认值以上的名称）的名称。如果通过网络连接，这可能包括协议、IP地址和端口号。
- en: The name of the database.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库的名称。
- en: Security information, such as the username and password, or if we should pass
    the currently logged-on user’s credentials automatically using Windows Authentication.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全信息，例如用户名和密码，或者是否应自动使用Windows身份验证传递当前登录用户的凭据。
- en: We specify this information in a **connection string**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在**连接字符串**中指定此信息。
- en: 'For backward compatibility, there are multiple possible keywords we can use
    in a SQL Server connection string for the various parameters, as shown in the
    following list:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，我们可以在SQL Server连接字符串中使用多个可能的关键字来表示各种参数，如下所示列表所示：
- en: '`Data Source`, `server`, or `addr`: These keywords are the name of the server
    (and an optional instance). You can use a dot (`.`) to mean the local server.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data Source`、`server`或`addr`: 这些关键字是服务器（以及可选的实例）的名称。您可以使用点（`.`）表示本地服务器。'
- en: '`Initial Catalog` or `database`: These keywords are the name of the database
    that will be active initially. A SQL statement could change that using the command:
    `USE <databasename>`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Initial Catalog`或`database`: 这些关键字是初始将处于活动状态的数据库的名称。可以使用以下命令更改SQL语句：`USE <databasename>`。'
- en: '`Integrated Security` or `trusted_connection`: These keywords are set to `true`
    or `SSPI` to pass the thread’s current user credentials using Windows Authentication.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Integrated Security`或`trusted_connection`: 这些关键字设置为`true`或`SSPI`，以使用Windows身份验证传递线程的当前用户凭据。'
- en: '`User Id` and `Password`: These keywords are used to authenticate with any
    edition of SQL Server. This is important for Azure SQL Database or Azure SQL Edge
    because they do not support Windows Authentication. The full edition of SQL Server
    on Windows supports both username with password and Windows Authentication.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User Id`和`Password`: 这些关键字用于使用SQL Server的任何版本进行身份验证。这对于Azure SQL Database或Azure
    SQL Edge非常重要，因为它们不支持Windows身份验证。Windows上的SQL Server完整版支持用户名和密码以及Windows身份验证。'
- en: '`Authentication`: This keyword is used to authenticate by using Azure AD identities
    that can enable password-less authentication. Values can be `Active Directory
    Integrated`, `Active Directory Password`, and `Sql Password`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Authentication`: 这个关键字用于使用Azure AD身份进行身份验证，可以启用无密码身份验证。值可以是`Active Directory
    Integrated`、`Active Directory Password`和`Sql Password`。'
- en: '`Persist Security Info`: If set to `false`, this keyword tells the connection
    to remove the `Password` from the connection string after authenticating.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Persist Security Info`: 如果设置为`false`，此关键字告诉连接在身份验证后从连接字符串中删除`Password`。'
- en: '`Encrypt`: If set to `true`, this keyword tells the connections to use SSL
    to encrypt transmissions between client and server.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Encrypt`: 如果设置为`true`，此关键字告诉连接使用SSL加密客户端和服务器之间的传输。'
- en: '`TrustServerCertificate`: Set to `true` if hosting locally and you get the
    error “A connection was successfully established with the server, but then an
    error occurred during the login process. (provider: SSL Provider, error: 0 - The
    certificate chain was issued by an authority that is not trusted.)”.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TrustServerCertificate`: 如果本地托管并且您收到错误“与服务器成功建立了连接，但在登录过程中发生错误。（提供程序：SSL提供程序，错误：0
    - 由不受信任的权威机构签发的证书链。）”，则将其设置为`true`。'
- en: '`Connection Timeout`: This keyword defaults to 30 seconds.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Connection Timeout`: 此关键字默认为30秒。'
- en: '`MultipleActiveResultSets`: This keyword is set to `true` to enable a single
    connection to be used to work with multiple tables simultaneously to improve efficiency.
    It is used for lazy loading rows from related tables.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultipleActiveResultSets`: 将此关键字设置为`true`以启用单个连接同时用于处理多个表以提高效率。它用于从相关表懒加载行。'
- en: 'As described in the list above, when you write code to connect to a SQL Server
    database, you need to know its server name. The server name depends on the edition
    and version of SQL Server that you will connect to, as shown in *Table 2.1*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如上列表所述，当您编写代码连接到 SQL Server 数据库时，您需要知道其服务器名称。服务器名称取决于您将要连接的 SQL Server 版本和版本，如
    *表 2.1* 所示：
- en: '| **SQL Server edition** | **Server name \ Instance name** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **SQL Server 版本** | **服务器名称 \ 实例名称** |'
- en: '| LocalDB 2012 | `(localdb)\v11.0` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| LocalDB 2012 | `(localdb)\v11.0` |'
- en: '| LocalDB 2016 or later | `(localdb)\mssqllocaldb` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| LocalDB 2016 或更高版本 | `(localdb)\mssqllocaldb` |'
- en: '| Express | `.\sqlexpress` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Express | `.\sqlexpress` |'
- en: '| Full/Developer (default instance) | `.` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 全功能/开发者版（默认实例） | `.` |'
- en: '| Full/Developer (named instance) | `.\apps-services-book` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 全功能/开发者版（命名实例） | `.\apps-services-book` |'
- en: '| Azure SQL Edge (local Docker) | `tcp:127.0.0.1,1433` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Azure SQL Edge（本地 Docker） | `tcp:127.0.0.1,1433` |'
- en: '| Azure SQL Database | `tcp:[custom server name].database.windows.net,1433`
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| Azure SQL 数据库 | `tcp:[自定义服务器名称].database.windows.net,1433` |'
- en: 'Table 2.1: Server name examples for various editions of SQL Server'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1：SQL Server 各版本的示例服务器名称
- en: '**Good Practice**: Use a dot (.) as shorthand for the local computer name (localhost).
    Remember that server names for SQL Server can be made up of two parts: the name
    of the computer and the name of a SQL Server instance. You provide instance names
    during custom installation.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：使用点（.）作为本地计算机名称（localhost）的缩写。请记住，SQL Server 的服务器名称可以由两部分组成：计算机名称和
    SQL Server 实例名称。您在自定义安装期间提供实例名称。'
- en: Installing and setting up SQL Server locally
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地安装和设置 SQL Server
- en: Microsoft offers various editions of its popular and capable SQL Server product
    for Windows, Linux, and Docker containers. If you have Windows, then you can use
    a free version that runs standalone, known as SQL Server Developer Edition. You
    can also use the Express edition or the free SQL Server LocalDB edition that can
    be installed with Visual Studio 2022 for Windows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 微软为 Windows、Linux 和 Docker 容器提供了其流行的、功能强大的 SQL Server 产品的各种版本。如果您有 Windows，则可以使用免费的单机运行版本，称为
    SQL Server 开发者版。您还可以使用 Express 版本或与 Visual Studio 2022 for Windows 一起安装的免费 SQL
    Server LocalDB 版本。
- en: 'If you do not have a Windows computer or if you want to use a cross-platform
    database system, then you can skip ahead to the topic *Setting up Azure SQL Database*,
    or the online-only section *Installing Azure SQL Edge in Docker* found at the
    following link:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有 Windows 计算机，或者您想使用跨平台的数据库系统，则可以跳到主题 *设置 Azure SQL 数据库*，或者在线部分 *在 Docker
    中安装 Azure SQL Edge*，该部分可在以下链接中找到：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch02-sql-edge.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch02-sql-edge.md)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch02-sql-edge.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch02-sql-edge.md)'
- en: 'If you prefer to install SQL Server locally on Linux, then you will find instructions
    at the following link: [https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-setup](https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-setup).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在 Linux 上本地安装 SQL Server，您可以在以下链接中找到说明：[https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-setup](https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-setup)。
- en: Installing SQL Server Developer Edition for Windows
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Windows 的 SQL Server 开发者版
- en: 'On Windows, if you want to use the full edition of SQL Server instead of the
    simplified LocalDB or Express editions, then you can find all SQL Server editions
    at the following link: [https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，如果您想使用 SQL Server 的完整版而不是简化的 LocalDB 或 Express 版本，您可以在以下链接中找到所有
    SQL Server 版本：[https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads)。
- en: 'Take the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Download the **Developer** edition.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 **开发者** 版本。
- en: Run the installer.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序。
- en: Select the **Custom** installation type.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **自定义** 安装类型。
- en: Select a folder for the installation files and then click **Install**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择安装文件的文件夹，然后点击 **安装**。
- en: Wait for the 1.5 GB of installer files to download.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待 1.5 GB 的安装文件下载。
- en: 'In **SQL Server Installation Center**, click **Installation**, and then click
    **New SQL Server stand-alone installation or add features to an existing installation**,
    as shown in *Figure 2.2*:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **SQL Server 安装中心**，点击 **安装**，然后点击 **新建 SQL Server 独立安装或向现有安装添加功能**，如图 *图
    2.2* 所示：
- en: '![](img/B19587_02_02.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_02_02.png)'
- en: 'Figure 2.2: Installing a new instance of SQL Server'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：安装新的 SQL Server 实例
- en: Select **Developer** as the free edition and then click **Next**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开发者**版作为免费版，然后点击**下一步**。
- en: Accept the license terms and then click **Next**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受许可条款，然后点击**下一步**。
- en: Review the **Microsoft Update** options and then click **Next**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**Microsoft 更新**选项，然后点击**下一步**。
- en: Review the install rules, fix any issues although you might want to ignore any
    firewall warnings since you might not want to expose those ports anyway, and then
    click **Next**.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查安装规则，修复任何问题，尽管你可能想忽略任何防火墙警告，因为你可能根本不想暴露这些端口，然后点击**下一步**。
- en: In **Feature Selection**, select **Database Engine Services**, and then click
    **Next**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**功能选择**中，选择**数据库引擎服务**，然后点击**下一步**。
- en: In **Azure Extension for SQL Server**, you can turn this off.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Azure SQL Server 扩展**中，你可以将其关闭。
- en: In **Instance Configuration**, select **Default instance**, and then click **Next**.
    If you already have a default instance configured, then you could create a named
    instance, perhaps called `apps-services-book`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**实例配置**中，选择**默认实例**，然后点击**下一步**。如果您已经配置了默认实例，则可以创建一个命名实例，例如 `apps-services-book`。
- en: In **Server Configuration**, note the **SQL Server Database Engine** is configured
    to start automatically. If not already set by default, then set the **SQL Server
    Browser** to start automatically, and then click **Next**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器配置**中，注意**SQL Server 数据库引擎**已配置为自动启动。如果默认情况下尚未设置，则将**SQL Server 浏览器**设置为自动启动，然后点击**下一步**。
- en: In **Database Engine Configuration**, on the **Server Configuration** tab, set
    **Authentication Mode** to **Mixed**, set the **sa** account password to a strong
    password, click **Add Current User**, and then click **Next**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库引擎配置**中，在**服务器配置**选项卡上，将**身份验证模式**设置为**混合**，将**sa**账户密码设置为强密码，点击**添加当前用户**，然后点击**下一步**。
- en: In **Ready to Install**, review the actions that will be taken, and then click
    **Install**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**准备安装**中，检查将要执行的操作，然后点击**安装**。
- en: In **Complete**, note the successful actions taken, and then click **Close**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**完成**中，注意已执行的操作，然后点击**关闭**。
- en: In **SQL Server Installation Center**, in **Installation**, click **Install
    SQL Server Management Tools**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SQL Server 安装中心**中，在**安装**部分，点击**安装 SQL Server 管理工具**。
- en: In the browser window, click to download the latest version of SSMS, as shown
    in *Figure 2.3*:![](img/B19587_02_03.png)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器窗口中，点击下载 SSMS 的最新版本，如图 2.3 所示：![](img/B19587_02_03.png)
- en: 'Figure 2.3: Downloading SQL Server Management Studio (SSMS)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.3：下载 SQL Server 管理工具 (SSMS)
- en: 'The direct link to download SSMS is as follows: [https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms](https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms).'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下载 SSMS 的直接链接如下：[https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms](https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms)。
- en: Run the SSMS installer and click **Install**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 SSMS 安装程序并点击**安装**。
- en: When the installer has finished, click **Restart** if needed or **Close**.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当安装程序完成时，如果需要，请点击**重启**，或者点击**关闭**。
- en: '**Azure Data Studio** (**ADS**) is automatically installed alongside SSMS.
    ADS is cross-platform and open-source, so you can use it to work with SQL Server
    databases on any desktop operating system.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure 数据工作室**（**ADS**）会自动与 SSMS 一起安装。ADS 是跨平台和开源的，因此您可以使用它在任何桌面操作系统上与 SQL
    Server 数据库一起工作。'
- en: Visual Studio Code extension for working with SQL Server
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Visual Studio Code 扩展用于与 SQL Server 一起工作
- en: 'There are many tools that make it easy to work with SQL Server. If you are
    using Visual Studio Code, then you can install the **SQL Server (mssql)** `ms-mssql.mssql`
    extension. If you install the extension, it adds a new view to the Primary Side
    Bar titled **SQL Server**, as shown in *Figure 2.4*:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可以轻松地与 SQL Server 一起工作。如果您正在使用 Visual Studio Code，则可以安装 **SQL Server (mssql)**
    `ms-mssql.mssql` 扩展。如果您安装了扩展，它会在主侧栏中添加一个新的视图，标题为**SQL Server**，如图 2.4 所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19587_02_04.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B19587_02_04.png)'
- en: 'Figure 2.4: SQL Server (mssql) extension for Visual Studio Code'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：SQL Server (mssql) 对 Visual Studio Code 的扩展
- en: Creating the Northwind sample database locally
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在本地创建 Northwind 示例数据库
- en: 'Now we can run a database script to create the Northwind sample database locally
    on Windows using **SQL Server Management Studio** (**SSMS**):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行数据库脚本，在 Windows 上使用 **SQL Server 管理工具**（**SSMS**）本地创建 Northwind 示例数据库：
- en: 'If you have not previously downloaded or cloned the GitHub repository for this
    book, then do so now using the following link: [https://github.com/markjprice/apps-services-net8/](https://github.com/markjprice/apps-services-net8/).'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你之前没有下载或克隆此书的 GitHub 仓库，那么现在使用以下链接进行操作：[https://github.com/markjprice/apps-services-net8/](https://github.com/markjprice/apps-services-net8/)。
- en: In your `apps-services-net8` folder, create a folder named `Chapter02`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `apps-services-net8` 文件夹中，创建一个名为 `Chapter02` 的文件夹。
- en: 'Copy the script to create the Northwind database for SQL Server from the following
    path in your local Git repository: `/scripts/sql-scripts/Northwind4SQLServer.sql`
    into the `Chapter02` folder.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将从你本地 Git 仓库以下路径创建 Northwind 数据库的脚本复制到 `Chapter02` 文件夹中：`/scripts/sql-scripts/Northwind4SQLServer.sql`。
- en: Start **SQL Server Management Studio**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **SQL Server Management Studio**。
- en: In the **Connect to Server** dialog, for **Server name**, enter `.` (a dot),
    meaning the local computer name, and then click **Connect**.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **连接到服务器** 对话框中，对于 **服务器名称**，输入 `.`（一个点），表示本地计算机名称，然后点击 **连接**。
- en: '**Warning!** If you had to create a named instance, like `apps-services-book`,
    then enter `.\apps-services-book`. If you see an error about the server certificate,
    then click the **Options >>** button and select the **Trust server certificate**
    check box.'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！** 如果你必须创建一个命名实例，如 `apps-services-book`，则输入 `.\apps-services-book`。如果你看到有关服务器证书的错误，则点击
    **选项 >>** 按钮，并选择 **信任服务器证书** 复选框。'
- en: Navigate to **File** | **Open** | **File...**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **文件** | **打开** | **文件...**。
- en: Browse to select the `Northwind4SQLServer.sql` file and then click **Open**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览并选择 `Northwind4SQLServer.sql` 文件，然后点击 **打开**。
- en: In the toolbar, click **Execute**, and note the **Command(s) completed successfully**
    message.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中，点击 **执行**，并注意 **命令(s) 已成功完成** 消息。
- en: In **Object Explorer**, expand the **Northwind** database, and then expand **Tables**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **对象资源管理器** 中，展开 **Northwind** 数据库，然后展开 **表**。
- en: 'Right-click **Products**, click **Select Top 1000 Rows**, and note the returned
    results, as shown in *Figure 2.5*:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **产品**，点击 **选择前 1000 行**，并注意返回的结果，如图 *图 2.5* 所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19587_02_05.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B19587_02_05.png)'
- en: 'Figure 2.5: The Products table in SQL Server Management Studio'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5：SQL Server Management Studio 中的产品表
- en: In the **Object Explorer** toolbar, click the **Disconnect** button.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **对象资源管理器** 工具栏中，点击 **断开连接** 按钮。
- en: Exit **SQL Server Management Studio**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出 **SQL Server Management Studio**。
- en: 'We did not have to use **SQL Server Management Studio** to execute the database
    script. We can also use tools in Visual Studio 2022, including the **SQL Server
    Object Explorer** and **Server Explorer**, or cross-platform tools like the Visual
    Studio Code extension for SQL Server, or **Azure Data Studio**, which you can
    download and install separately from the following link: [https://aka.ms/getazuredatastudio](https://aka.ms/getazuredatastudio).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必使用 **SQL Server Management Studio** 来执行数据库脚本。我们也可以使用 Visual Studio 2022
    中的工具，包括 **SQL Server 对象资源管理器** 和 **服务器资源管理器**，或者跨平台的 SQL Server Visual Studio
    Code 扩展，或者 **Azure Data Studio**，你可以从以下链接单独下载和安装：[https://aka.ms/getazuredatastudio](https://aka.ms/getazuredatastudio)。
- en: Setting up Azure SQL Database
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Azure SQL 数据库
- en: 'If you do not have a Windows computer, then you can create a cloud-hosted instance
    of SQL Server. You will need an Azure account. You can sign up at the following
    link: [https://signup.azure.com](https://signup.azure.com). Next, you need to
    take the following steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有 Windows 计算机，则可以创建一个云托管的 SQL Server 实例。你需要一个 Azure 账户。你可以在以下链接注册：[https://signup.azure.com](https://signup.azure.com)。接下来，你需要执行以下步骤：
- en: 'Log in to your Azure account: [https://portal.azure.com/](https://portal.azure.com/)'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 Azure 账户：[https://portal.azure.com/](https://portal.azure.com/)
- en: Navigate to [https://portal.azure.com/#create/hub](https://portal.azure.com/#create/hub).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 [https://portal.azure.com/#create/hub](https://portal.azure.com/#create/hub)。
- en: Search for **Resource group** and then click the **Create** button.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索 **资源组** 并然后点击 **创建** 按钮。
- en: 'Enter a resource group name of `apps-services-book` and select a suitable region
    close to you, and then click the **Review + create** button, as shown in *Figure
    2.6*:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入资源组名称为 `apps-services-book` 并选择一个靠近你的合适区域，然后点击 **审查 + 创建** 按钮，如图 *图 2.6* 所示：
- en: '![](img/B19587_02_06.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_02_06.png)'
- en: 'Figure 2.6: Creating a resource group in the Azure portal'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6：在 Azure 门户中创建资源组
- en: Review your choices and then click the **Create** button.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查你的选择，然后点击 **创建** 按钮。
- en: Create another resource, search for **SQL Database**, and click **Create**.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个资源，搜索**SQL 数据库**，然后点击**创建**。
- en: In the **Create SQL Database** page, in the **Basics** tab, for the **Database
    name**, enter `Northwind`, and select the resource group that you created before.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建 SQL 数据库**页面，在**基本**选项卡中，对于**数据库名称**，输入`Northwind`，并选择你之前创建的资源组。
- en: In the **Server** section, click **Create New**.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器**部分，点击**创建新服务器**。
- en: 'Enter the following details for the SQL Database server, as shown in *Figure
    2.7*:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照如图 *图 2.7* 所示输入以下 SQL 数据库服务器的详细信息：
- en: '**Server name**: `apps-services-book-[your initials]` or something else entirely.
    The server name must be globally unique because it becomes part of a public URL.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器名称**：`apps-services-book-[你的首字母]`或完全不同的名称。服务器名称必须是全局唯一的，因为它将成为公共 URL 的一部分。'
- en: '**Location**: A region close to you. I chose **(Europe) UK South**. Not all
    regions support all types of resources. You will see an error if the region you
    select does not support SQL Database server resources.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：靠近你的地区。我选择了**（欧洲）英国南部**。并非所有地区都支持所有类型的资源。如果你选择的地区不支持 SQL 数据库服务器资源，将会看到错误。'
- en: '**Authentication method**: Use SQL authentication.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证方法**：使用 SQL 身份验证。'
- en: '**Server admin login**: [Your email or another username], for example, I entered
    `markjprice`.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器管理员登录**：[你的电子邮件或另一个用户名]，例如，我输入了`markjprice`。'
- en: '**Password**/**Confirm password**: [Enter a strong password].'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**/**确认密码**：[输入一个强密码]。'
- en: '![](img/B19587_02_07.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_02_07.png)'
- en: 'Figure 2.7: Entering the server details for a SQL Database instance'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：输入 SQL 数据库实例的服务器详细信息
- en: Click **OK**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: Leave **Want to use SQL elastic pool** set to **No**.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**是否使用 SQL 弹性池**设置为**否**。
- en: For **Workload environment**, select **Development** (instead of **Production**).
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**工作负载环境**，选择**开发**（而不是**生产**）。
- en: In the **Create SQL Database** page, in the **Compute + storage** section, click
    **Configure database**.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建 SQL 数据库**页面，在**计算 + 存储**部分，点击**配置数据库**。
- en: For **Service tier**, select **Basic (For less demanding workloads)**. Note
    the maximum database size is 2 GB and the estimated cost is about $5 per month
    (or less than 1 cent per hour). You can delete the resources as soon as you have
    completed this chapter to reduce the cost further.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**服务层**，选择**基本（适用于不太繁重的负载）**。请注意，最大数据库大小为 2 GB，预计每月费用约为 5 美元（或每小时不到 1 美分）。你可以在完成本章后立即删除资源以进一步降低成本。
- en: Click **Apply**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**应用**。
- en: In the **Create SQL Database** page, set **Backup storage redundancy** to **Locally-redundant
    backup storage**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建 SQL 数据库**页面，将**备份存储冗余**设置为**本地冗余备份存储**。
- en: 'Click the **Next : Networking** button.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：网络**按钮。
- en: In the **Network connectivity** section, select **Public endpoint**.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络连接**部分，选择**公共端点**。
- en: In the **Firewall rules** section, set **Add current client IP address** to
    **Yes**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**防火墙规则**部分，将**添加当前客户端 IP 地址**设置为**是**。
- en: 'Click the **Next : Security** button.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：安全**按钮。
- en: Review the options but leave them as the defaults.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查选项，但保留默认设置。
- en: 'Click the **Next : Additional settings** button.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步：其他设置**按钮。
- en: Review the options but leave them as the defaults.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查选项，但保留默认设置。
- en: Click the **Review + create** button.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**审查 + 创建**按钮。
- en: Click the **Create** button.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: 'Wait for the deployment to complete, as shown in *Figure 2.8*:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待部署完成，如图 *图 2.8* 所示：
- en: '![](img/B19587_02_08.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_02_08.png)'
- en: 'Figure 2.8: Deployment progress for SQL Database'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：SQL 数据库部署进度
- en: When deployment has completed, click **Go to resource**.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署完成后，点击**转到资源**。
- en: 'Click **Overview** and note the database details, as shown in *Figure 2.9*:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**概览**并注意数据库详细信息，如图 *图 2.9* 所示：
- en: '![](img/B19587_02_09.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_02_09.png)'
- en: 'Figure 2.9: SQL Database details'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：SQL 数据库详细信息
- en: Click **See connection strings** (or click **Connection strings** in the left
    navigation).
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**查看连接字符串**（或点击左侧导航中的**连接字符串**）。
- en: Copy the **ADO.NET (SQL authentication)** connection string to your clipboard.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**ADO.NET (SQL 身份验证**)连接字符串复制到剪贴板。
- en: 'Start **Notepad** or your preferred plain text editor, paste the connection
    string, and add carriage returns after each semicolon to separate each part to
    make them easier to work with, as shown in the following text:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **记事本** 或你喜欢的纯文本编辑器，粘贴连接字符串，并在每个分号后添加换行符以分隔每个部分，以便更容易处理，如图下文所示：
- en: '[PRE0]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Your `Server` value will be different because the custom server name part, for
    example, `apps-services-book`, is public and must be globally unique.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的`Server`值将不同，因为自定义服务器名称部分，例如，`apps-services-book`是公开的，并且必须是全局唯一的。
- en: Optionally, save the Notepad file for future reference.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，保存记事本文件以供将来参考。
- en: JetBrains Rider tool window for working with SQL Server
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JetBrains Rider用于处理SQL Server的工具窗口
- en: 'If you use JetBrains Rider on any operating system, then you can use the following
    steps to connect with a SQL Server database:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用任何操作系统的JetBrains Rider，那么你可以使用以下步骤连接到SQL Server数据库：
- en: In JetBrains Rider, select **View** | **Tool Windows** | **Database**.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JetBrains Rider中，选择**视图** | **工具窗口** | **数据库**。
- en: In the **Database** tool window, click **Connect to database...**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库**工具窗口中，点击**连接到数据库...**。
- en: Select the **Use connection string** option button.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用连接字符串**选项按钮。
- en: Set the **Database type** to **Microsoft SQL Server**.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**数据库类型**设置为**Microsoft SQL Server**。
- en: In the **String** box, enter the database connection string.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**字符串**框中，输入数据库连接字符串。
- en: Change `{your_password}` to the password you chose.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`{your_password}`更改为你选择的密码。
- en: Optionally, click **Test Connection** and correct any errors if necessary. If
    you get an **Inconsistent language** error, then you can ignore it as we are using
    SQL Server as the dialect.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，点击**测试连接**并在必要时纠正任何错误。如果你得到一个**不一致的语言**错误，那么你可以忽略它，因为我们正在使用SQL Server作为方言。
- en: Click **Connect to Database**.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**连接到数据库**。
- en: Creating the Northwind sample database in the cloud
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在云中创建Northwind示例数据库
- en: 'Now we can run a database script to create the Northwind sample database in
    the Azure SQL Database:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行一个数据库脚本，在Azure SQL数据库中创建Northwind示例数据库：
- en: 'Use your preferred database tool to connect to the SQL server in Azure:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你首选的数据库工具连接到Azure中的SQL服务器：
- en: In Visual Studio 2022, view **Server Explorer**.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，查看**服务器资源管理器**。
- en: On Windows, start **SQL Server Management Studio**.
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，启动**SQL Server Management Studio**。
- en: In Visual Studio Code, view the **SQL Server** tool.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，查看**SQL Server**工具。
- en: In JetBrains Rider, navigate to **View** | **Tool Windows** | **Database**,
    and then click **Connect to database…**.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JetBrains Rider中，导航到**视图** | **工具窗口** | **数据库**，然后点击**连接到数据库…**。
- en: Add a data connection, and fill in the dialog box with all the required connection
    string information, as shown in *Figure 2.10*:![](img/B19587_02_10.png)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加数据连接，并在对话框中填写所有必需的连接字符串信息，如图*图2.10*所示：![](img/B19587_02_10.png)
- en: 'Figure 2.10: Connecting to your Azure SQL database from Visual Studio'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.10：从Visual Studio连接到你的Azure SQL数据库
- en: You might also be prompted to **Choose** **Data Source**. Choose **Microsoft
    SQL Server**. You can select a checkbox to always use this selection.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能还会被提示**选择****数据源**。选择**Microsoft SQL Server**。你可以选择一个复选框来始终使用此选择。
- en: Right-click the data connection and choose **New Query**.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击数据连接，选择**新建查询**。
- en: If you are using JetBrains Rider, then right-click the SQL Server, in the popup
    menu, select **SQL Scripts** | **Run SQL Script…**, and then select the `Northwind4AzureSQLdatabase.sql`
    file.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用JetBrains Rider，那么右键单击SQL Server，在弹出菜单中选择**SQL脚本** | **运行SQL脚本…**，然后选择`Northwind4AzureSQLdatabase.sql`文件。
- en: Copy and paste the contents of the `Northwind4AzureSQLdatabase.sql` file into
    the query window and execute it.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Northwind4AzureSQLdatabase.sql`文件的全部内容复制并粘贴到查询窗口中，并执行它。
- en: 'The main difference between the `Northwind4SQLServer.sql` and `Northwind4AzureSQLdatabase.sql`
    scripts is that the local SQL Server script will delete and recreate the Northwind
    database. The Azure SQL database script will not because the database needs to
    be created as an Azure resource. You can download SQL script files from the following
    link: [https://github.com/markjprice/apps-services-net8/tree/main/scripts/sql-scripts](https://github.com/markjprice/apps-services-net8/tree/main/scripts/sql-scripts).'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Northwind4SQLServer.sql`脚本和`Northwind4AzureSQLdatabase.sql`脚本之间的主要区别是，本地SQL
    Server脚本将删除并重新创建Northwind数据库。Azure SQL数据库脚本不会这样做，因为数据库需要作为Azure资源创建。你可以从以下链接下载SQL脚本文件：[https://github.com/markjprice/apps-services-net8/tree/main/scripts/sql-scripts](https://github.com/markjprice/apps-services-net8/tree/main/scripts/sql-scripts)。'
- en: Wait to see the **Command completed successfully** message. This can take a
    few minutes.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待看到**命令已成功完成**的消息。这可能需要几分钟。
- en: In **Server Explorer**, right-click **Tables** and select **Refresh**, and note
    that 13 tables have been created, for example, **Categories**, **Customers**,
    and **Products**. Also note that dozens of views and stored procedures have also
    been created.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **服务器资源管理器** 中，右键单击 **表** 并选择 **刷新**，注意已创建了13个表，例如 **类别**、**客户** 和 **产品**。还要注意，还创建了数十个视图和存储过程。
- en: You now have a running Azure SQL database in the cloud that you can connect
    to from a .NET project.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在在云中有一个正在运行的 Azure SQL 数据库，你可以从 .NET 项目连接到它。
- en: Managing data with Transact-SQL
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Transact-SQL 管理数据
- en: '**Transact-SQL** (**T-SQL**) is SQL Server’s dialect of **Structured Query
    Language** (**SQL**). Some pronounce it *tee-sequel*, others *tee-es-queue-el*.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**Transact-SQL** (**T-SQL**) 是 SQL Server 的 **结构化查询语言** (**SQL**) 方言。有些人读作
    *tee-sequel*，有些人读作 *tee-es-queue-el*。'
- en: Unlike C#, T-SQL is not case-sensitive; for example, you can use `int` or `INT`
    to specify the 32-bit integer data type, and you can use `SELECT` or `select`
    to start a query expression. Text data stored in SQL Server tables can be treated
    as case-sensitive or not, depending on the configuration.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C# 不同，T-SQL 不区分大小写；例如，你可以使用 `int` 或 `INT` 来指定32位整数数据类型，你也可以使用 `SELECT` 或 `select`
    来开始一个查询表达式。存储在 SQL Server 表中的文本数据可以被视为区分大小写或不区分大小写，这取决于配置。
- en: 'The complete reference for T-SQL is found at the following link: [https://learn.microsoft.com/en-us/sql/t-sql/language-reference](https://learn.microsoft.com/en-us/sql/t-sql/language-reference).
    From that documentation starting page, use the left side navigation to view topics
    like **Data types**, **Queries**, and **Statements**.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: T-SQL 的完整参考可以在以下链接找到：[https://learn.microsoft.com/en-us/sql/t-sql/language-reference](https://learn.microsoft.com/en-us/sql/t-sql/language-reference)。从该文档起始页面，使用左侧导航查看
    **数据类型**、**查询** 和 **语句** 等主题。
- en: T-SQL data types
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: T-SQL 数据类型
- en: 'T-SQL has data types that are used for columns, variables, parameters, and
    so on, as shown in *Table 2.2*:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: T-SQL 有用于列、变量、参数等的数据类型，如 *表 2.2* 所示：
- en: '| **Category** | **Examples** |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| **类别** | **示例** |'
- en: '| Numbers | `bigint`, `bit`, `decimal`, `float`, `int`, `money`, `numeric`,
    `real`, `smallint`, `smallmoney`, `tinyint` |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | `bigint`, `bit`, `decimal`, `float`, `int`, `money`, `numeric`, `real`,
    `smallint`, `smallmoney`, `tinyint` |'
- en: '| Date and time | `date`, `datetime2`, `datetime`, `datetimeoffset`, `smalldatetime`,
    `time` |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 日期和时间 | `date`, `datetime2`, `datetime`, `datetimeoffset`, `smalldatetime`,
    `time` |'
- en: '| Text | `char`, `nchar`, `ntext`, `nvarchar`, `text`, `varchar` |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 文本 | `char`, `nchar`, `ntext`, `nvarchar`, `text`, `varchar` |'
- en: '| Binary | `binary`, `image`, `varbinary` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 二进制 | `binary`, `image`, `varbinary` |'
- en: '| Other | `cursor`, `hierarchyid`, `sql_variant`, `table`, `rowversion`, `uniqueidentifier`,
    `xml` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 其他 | `cursor`, `hierarchyid`, `sql_variant`, `table`, `rowversion`, `uniqueidentifier`,
    `xml` |'
- en: 'Table 2.2: Categories of SQL Server data types'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.2：SQL Server 数据类型类别
- en: There is an `xml` data type but no JSON data type. Use `nvarchar` to store JSON
    values. T-SQL also has support for spatial `geometry` and `geography` types.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 存在 `xml` 数据类型但没有 JSON 数据类型。使用 `nvarchar` 存储JSON值。T-SQL 还支持空间 `geometry` 和 `geography`
    类型。
- en: Documenting with comments
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用注释进行文档记录
- en: To comment out the rest of a line, use `--`, which is the equivalent of `//`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要注释掉整行剩余部分，使用 `--`，它等同于 `//`。
- en: To comment out a block, use `/*` at the start and `*/` at the end, just like
    in C#.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要注释掉一个代码块，使用起始的 `/*` 和结束的 `*/`，就像在 C# 中一样。
- en: Declaring variables
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明变量
- en: 'Local variable names are prefixed with `@` and they are defined using `SET`,
    `SELECT`, or `DECLARE`, as shown in the following code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 本地变量名以 `@` 为前缀，并使用 `SET`, `SELECT`, 或 `DECLARE` 定义，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Global variables are prefixed with `@@`. For example, `@@ROWCOUNT` is a context-dependent
    value that returns the number of rows affected by a statement executed within
    the current scope, for example, the number of rows updated or deleted.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 全局变量以 `@@` 为前缀。例如，`@@ROWCOUNT` 是一个上下文相关的值，它返回在当前作用域内执行语句影响的行数，例如，更新的或删除的行数。
- en: Specifying data types
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定数据类型
- en: Most types have a fixed size. For example, an `int` uses four bytes, a `smallint`
    uses two bytes, and a `tinyint` uses one byte.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数类型都有固定的大小。例如，`int` 使用四个字节，`smallint` 使用两个字节，`tinyint` 使用一个字节。
- en: 'For text and binary types, you can either specify a type prefixed with `var`
    or `nvar` (meaning variable size), which will automatically change its size based
    on its current value up to a maximum, as shown in the following example: `varchar(40)`;
    or you can specify a fixed number of characters that will always be allocated,
    as shown in the following example: `char(40)`.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文本和二进制类型，您可以指定一个以 `var` 或 `nvar`（表示可变大小）前缀的类型，这将根据其当前值自动更改其大小，但不超过最大值，如下例所示：`varchar(40)`；或者您可以指定一个固定数量的字符，这将始终分配，如下例所示：`char(40)`。
- en: For text types, the `n` prefix indicates Unicode, meaning it will use two bytes
    per character. Text types not prefixed with `n` use one byte per character.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文本类型，`n` 前缀表示 Unicode，意味着每个字符将使用两个字节。未使用 `n` 前缀的文本类型每个字符使用一个字节。
- en: Controlling flow
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制流程
- en: T-SQL has similar flow control keywords as C#, for example, `BREAK`, `CONTINUE`,
    `GOTO`, `IF...ELSE`, `CASE`, `THROW`, `TRY...CATCH`, `WHILE`, and `RETURN`. The
    main difference is the use of `BEGIN` and `END` to indicate the start and end
    of a block, the equivalent of curly braces in C#.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: T-SQL 有与 C# 类似的流程控制关键字，例如 `BREAK`、`CONTINUE`、`GOTO`、`IF...ELSE`、`CASE`、`THROW`、`TRY...CATCH`、`WHILE`
    和 `RETURN`。主要区别是使用 `BEGIN` 和 `END` 来指示块的开始和结束，这与 C# 中的花括号等效。
- en: Operators
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符
- en: T-SQL has similar operators as C#, for example, `=` (assignment), `+`, `-`,
    `*`, `/`, `%`, `<`, `>`, `<=`, `==`, `!=`, `&`, `|`, `^`, and so on. It has logical
    operators like `AND`, `OR`, `NOT`, and LINQ-like operators like `ANY`, `ALL`,
    `SOME`, `EXISTS`, `BETWEEN`, and `IN`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: T-SQL 有与 C# 类似的运算符，例如 `=`（赋值）、`+`、`-`、`*`、`/`、`%`、`<`、`>`、`<=`、`==`、`!=`、`&`、`|`、`^`
    等。它还有逻辑运算符如 `AND`、`OR`、`NOT`，以及类似 LINQ 的运算符如 `ANY`、`ALL`、`SOME`、`EXISTS`、`BETWEEN`
    和 `IN`。
- en: '`LIKE` is used for text pattern matching. The pattern can use `%` for any number
    of characters. The pattern can use `_` for a single character. The pattern can
    use `[]` to specify a range and set of allowed characters, for example, `[0-9A-Z.-,]`,
    which looks like a simplified regular expression syntax but keep in mind that
    it is *not* regular expression syntax.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`LIKE` 用于文本模式匹配。模式可以使用 `%` 表示任意数量的字符。模式可以使用 `_` 表示单个字符。模式可以使用 `[]` 来指定一个范围和允许的字符集，例如
    `[0-9A-Z.-,]`，它看起来像简化的正则表达式语法，但请注意，它*不是*正则表达式语法。'
- en: If a table or column name contains spaces, then you must surround the name in
    square brackets, like `[Order Details]`. The SQL scripts to create the Northwind
    database include the command `set quoted_identifier on`, so you can also use double
    quotes, like `"Order Details"`. Single quotes are used for literal text, like
    `'USA'`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表名或列名包含空格，则必须用方括号括起来，例如 `[Order Details]`。创建 Northwind 数据库的 SQL 脚本包括命令 `set
    quoted_identifier on`，因此您也可以使用双引号，例如 `"Order Details"`。单引号用于文本字面量，例如 `'USA'`。
- en: Data Manipulation Language (DML)
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据操纵语言 (DML)
- en: DML is used to query and change data.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: DML 用于查询和更改数据。
- en: 'The most common statement in DML is `SELECT`, which is used to retrieve data
    from one or more tables. `SELECT` is extremely complicated because it is so powerful.
    This book is not about learning T-SQL, so the quickest way to get a feel for `SELECT`
    is to see some examples, as shown in *Table 2.3*:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: DML 中最常用的语句是 `SELECT`，它用于从一个或多个表中检索数据。`SELECT` 非常复杂，因为它功能强大。本书不是关于学习 T-SQL 的，所以了解
    `SELECT` 的最快方式是查看一些示例，如 *表 2.3* 所示：
- en: '| **Example** | **Description** |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| **示例** | **描述** |'
- en: '| `SELECT *``FROM Employees` | Get all columns of all the employees. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT *` FROM Employees | 获取所有员工的全部列。|'
- en: '| `SELECT FirstName, LastName``FROM Employees` | Get the first and last name
    columns of all employees. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT FirstName, LastName` FROM Employees | 获取所有员工的姓名列。|'
- en: '| `SELECT emp.FirstName, emp.LastName``FROM Employees AS emp` | Give an alias
    for the table name. Table name prefixes are not needed when there is only one
    table, but become useful to disambiguate when there are multiple tables that have
    columns with the same name, for example, `Customers.CustomerId` and `Orders.CustomerId`.
    |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT emp.FirstName, emp.LastName` FROM Employees AS emp | 为表名提供一个别名。当只有一个表时，不需要表名前缀，但在有多个具有相同名称的列的表时变得有用，例如
    `Customers.CustomerId` 和 `Orders.CustomerId`。|'
- en: '| `SELECT emp.FirstName, emp.LastName``FROM Employees emp` | Give an alias
    for the table name without needing the `AS` keyword. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT emp.FirstName, emp.LastName` FROM Employees emp | 无需使用 `AS` 关键字为表名提供别名。|'
- en: '| `SELECT FirstName, LastName AS Surname``FROM Employees` | Give an alias for
    the column name. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT FirstName, LastName AS Surname` FROM Employees | 为列名提供一个别名。|'
- en: '| `SELECT FirstName, LastName``FROM Employees``WHERE Country = ''USA''` | Filter
    the results to only include employees in the USA. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT FirstName, LastName` FROM Employees WHERE Country = ''USA'' | 过滤结果，仅包括美国的员工。
    |'
- en: '| `SELECT DISTINCT Country``FROM Employees` | Get a list of countries used
    as values in the `Country` column of the `Employees` table without duplicates.
    |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT DISTINCT Country` FROM Employees | 获取 `Employees` 表中 `Country` 列作为值的国家的列表，不包含重复项。
    |'
- en: '| `SELECT UnitPrice * Quantity AS Subtotal``FROM [Order Details]` | Calculate
    a subtotal for each order detail row. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT UnitPrice * Quantity AS Subtotal` FROM [Order Details] | 计算每个订单明细行的子总金额。
    |'
- en: '| `SELECT OrderId,``SUM(UnitPrice * Quantity) AS Total``FROM [Order Details]``GROUP
    BY OrderId``ORDER BY Total DESC` | Calculate a total for each order and sort with
    the largest order value at the top. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT OrderId, SUM(UnitPrice * Quantity) AS Total` FROM [Order Details]
    GROUP BY OrderId ORDER BY Total DESC | 计算每个订单的总金额，并按总金额降序排序。 |'
- en: '| `SELECT CompanyName``FROM Customers``UNION``SELECT CompanyName``FROM Suppliers`
    | Return all the company names of all customers and suppliers. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT CompanyName` FROM Customers UNION SELECT CompanyName FROM Suppliers
    | 返回所有客户和供应商的公司名称。 |'
- en: '| `SELECT CategoryName, ProductName``FROM Categories, Products` | Match *every*
    category with *every* product using a Cartesian join and output their names (not
    what you normally want!).616 rows (8 categories x 77 products). |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT CategoryName, ProductName` FROM Categories, Products | 使用笛卡尔连接匹配每个类别与每个产品，并输出它们的名称（这不是你通常想要的！）616
    行（8 个类别 x 77 个产品）。 |'
- en: '| `SELECT CategoryName, ProductName``FROM Categories c, Products p``WHERE c.CategoryId
    = p.CategoryId` | Match each product with its category using a `WHERE` clause
    for the `CategoryId` column in each table and output the category name and product
    name.77 rows. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT CategoryName, ProductName` FROM Categories c, Products p WHERE c.CategoryId
    = p.CategoryId | 使用每个表中的 `CategoryId` 列的 `WHERE` 子句匹配每个产品与其类别，并输出类别名称和产品名称。77
    行。 |'
- en: '| `SELECT CategoryName, ProductName``FROM Categories c``INNER JOIN Products
    p``ON c.CategoryId = p.CategoryId` | Match each product with its category using
    an `INNER JOIN...ON` clause for the `CategoryId` column in each table and output
    the category name and product name. This is a modern alternative syntax to using
    `WHERE`, and it allows outer joins, which would also include non-matches.77 rows.
    |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT CategoryName, ProductName` FROM Categories c INNER JOIN Products
    p ON c.CategoryId = p.CategoryId | 使用每个表中的 `CategoryId` 列的 `INNER JOIN...ON` 子句匹配每个产品与其类别，并输出类别名称和产品名称。这是使用
    `WHERE` 的现代替代语法，并允许外连接，这也会包括不匹配项。77 行。 |'
- en: 'Table 2.3: Example SELECT statements with descriptions'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.3：示例 SELECT 语句及其描述
- en: '**More Information**: You can read the full documentation for `SELECT` at the
    following link: [https://learn.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql](https://learn.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql).'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中阅读关于 `SELECT` 的完整文档：[https://learn.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql](https://learn.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql).'
- en: 'Use your favorite database querying tool, like Visual Studio’s **Server Explorer**
    or Visual Studio Code’s `mssql` extension, to connect to your Northwind database
    and try out some of the queries above, as shown in *Figure 2.11* and *Figure 2:12*:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的数据库查询工具，例如 Visual Studio 的 **服务器资源管理器** 或 Visual Studio Code 的 `mssql`
    扩展，连接到您的 Northwind 数据库并尝试上述查询，如图 2.11 和图 2:12 所示：
- en: '![](img/B19587_02_11.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_02_11.png)'
- en: 'Figure 2.11: Executing T-SQL queries using Visual Studio’s Server Explorer'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：使用 Visual Studio 的服务器资源管理器执行 T-SQL 查询
- en: '![](img/B19587_02_12.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_02_12.png)'
- en: 'Figure 2.12: Executing T-SQL queries using Visual Studio Code’s mssql extension'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：使用 Visual Studio Code 的 mssql 扩展执行 T-SQL 查询
- en: DML for adding, updating, and deleting data
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DML 用于添加、更新和删除数据
- en: 'DML statements for adding, updating, and deleting data include those shown
    in *Table 2.4*:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: DML 语句用于添加、更新和删除数据，包括 *表 2.4* 中所示的内容：
- en: '| **Example** | **Description** |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| **示例** | **描述** |'
- en: '| `INSERT Employees(FirstName, LastName)``VALUES(''Mark'', ''Price'')` | Add
    a new row to the `Employees` table. The `EmployeeId` primary key value is automatically
    assigned. Use `@@IDENTITY` to get this value. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `INSERT Employees(FirstName, LastName)` VALUES(''Mark'', ''Price'') | 向 `Employees`
    表添加新行。`EmployeeId` 主键值将自动分配。使用 `@@IDENTITY` 获取此值。 |'
- en: '| `UPDATE Employees``SET Country = ''UK''``WHERE FirstName = ''Mark''``AND
    LastName = ''Price''` | Update my employee row to set my `Country` to `UK`. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `UPDATE Employees` SET Country = ''UK'' WHERE FirstName = ''Mark'' AND LastName
    = ''Price'' | 更新我的员工行，将我的 `Country` 设置为 `UK`。 |'
- en: '| `DELETE Employees``WHERE FirstName = ''Mark''``AND LastName = ''Price''`
    | Delete my employee row. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE Employees``WHERE FirstName = ''Mark''``AND LastName = ''Price''`
    | 删除我的员工记录。|'
- en: '| `DELETE Employees` | Delete all rows in the `Employees` table and record
    those deletions in the transaction log. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE Employees` | 删除 `Employees` 表中的所有行，并在事务日志中记录这些删除操作。|'
- en: '| `TRUNCATE TABLE Employees` | Delete all rows in the `Employees` table more
    efficiently because it does not log the individual row deletions. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `TRUNCATE TABLE Employees` | 更高效地删除 `Employees` 表中的所有行，因为它不记录单个行删除。|'
- en: 'Table 2.4: Example DML statements with descriptions'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.4：带有描述的示例 DML 语句
- en: The above examples use the `Employees` table in the `Northwind` database. That
    table has referential integrity constraints that would mean that, for example,
    deleting all rows in the table cannot happen because every employee has related
    data in other tables like `Orders`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例使用 `Northwind` 数据库中的 `Employees` 表。该表具有引用完整性约束，这意味着例如，删除表中的所有行是不可能的，因为每个员工在其他表（如
    `Orders`）中都有相关数据。
- en: Data Definition Language (DDL)
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据定义语言 (DDL)
- en: 'DDL statements change the structure of the database, including creating new
    objects like tables, functions, and stored procedures. The following table shows
    some examples of DDL statements to give you an idea, but the examples are simple
    and cannot be executed within the Northwind database, as shown in *Table 2.5*:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: DDL 语句更改数据库的结构，包括创建新对象，如表、函数和存储过程。以下表格展示了某些 DDL 语句的示例，以供您参考，但这些示例简单，无法在 *表 2.5*
    中所示的 Northwind 数据库中执行：
- en: '| **Example** | **Description** |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| **示例** | **描述** |'
- en: '| `CREATE TABLE dbo.Shippers (``ShipperId INT PRIMARY KEY CLUSTERED,``CompanyName
    NVARCHAR(40)``);` | Create a table to store shippers. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `CREATE TABLE dbo.Shippers (``ShipperId INT PRIMARY KEY CLUSTERED,``CompanyName
    NVARCHAR(40)``);` | 创建一个表来存储承运商信息。|'
- en: '| `ALTER TABLE Shippers``ADD Country NVARCHAR(40)` | Add a column to a table.
    |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `ALTER TABLE Shippers``ADD Country NVARCHAR(40)` | 向表中添加一个列。|'
- en: '| `CREATE NONCLUSTERED INDEX IX_Country``ON Shippers(Country)` | Add a non-clustered
    index for a column in a table. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `CREATE NONCLUSTERED INDEX IX_Country``ON Shippers(Country)` | 为表中的列添加一个非聚集索引。|'
- en: '| `CREATE INDEX IX_FullName``ON Employees(LastName, FirstName DESC)``WITH (DROP_EXISTING
    = ON)` | Change an aggregate index with multiple columns and control the sort
    order. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `CREATE INDEX IX_FullName``ON Employees(LastName, FirstName DESC)``WITH (DROP_EXISTING
    = ON)` | 更改具有多个列的聚合索引并控制排序顺序。|'
- en: '| `DROP TABLE Employees` | Delete the `Employees` table. If it does not exist,
    then this throws an error. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `DROP TABLE Employees` | 删除 `Employees` 表。如果它不存在，则抛出错误。|'
- en: '| `DROP TABLE IF EXISTS Employees` | Delete the `Employees` table if it already
    exists. This avoids the potential error from using the statement in the previous
    row. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `DROP TABLE IF EXISTS Employees` | 如果 `Employees` 表已存在，则删除该表。这避免了使用上一行语句可能产生的潜在错误。|'
- en: '| `IF OBJECT_ID(N''Employees'', N''U'')``IS NOT NULL` | Check if a table exists.
    The `N` prefix before a text literal means Unicode. `''U''` means a user table
    as opposed to a system table. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `IF OBJECT_ID(N''Employees'', N''U'')``IS NOT NULL` | 检查是否存在一个表。在文本字面量前方的
    `N` 前缀表示 Unicode。`''U''` 表示用户表，而不是系统表。|'
- en: 'Table 2.5: Example DDL statements with descriptions'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.5：带有描述的示例 DDL 语句
- en: Managing data with low-level APIs
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用低级 API 管理数据
- en: The `Microsoft.Data.SqlClient` package provides database connectivity to SQL
    Server for .NET applications. It is also known as the **ADO.NET driver for SQL
    Server** and Azure SQL Database.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`Microsoft.Data.SqlClient` 包为 .NET 应用程序提供对 SQL Server 的数据库连接。它也被称为 **SQL Server
    和 Azure SQL 数据库的 ADO.NET 驱动程序**。'
- en: '**More Information**: You can find the GitHub repository for ADO.NET at the
    following link: [https://github.com/dotnet/SqlClient](https://github.com/dotnet/SqlClient).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接找到 ADO.NET 的 GitHub 仓库：[https://github.com/dotnet/SqlClient](https://github.com/dotnet/SqlClient)。'
- en: 'The `Microsoft.Data.SqlClient` package supports the following .NET platforms:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`Microsoft.Data.SqlClient` 包支持以下 .NET 平台：'
- en: .NET Framework 4.6.2 and later.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Framework 4.6.2 及更高版本。
- en: .NET Core 3.1 and later.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core 3.1 及更高版本。
- en: .NET Standard 2.0 and later.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Standard 2.0 及更高版本。
- en: Understanding the types in ADO.NET
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 ADO.NET 中的类型
- en: 'ADO.NET defines abstract types that represent minimal objects for working with
    data, like `DbConnection`, `DbCommand`, and `DbDataReader`. Database software
    manufacturers can inherit from and provide specific implementations that are optimized
    for and expose additional features for their database. Microsoft has done this
    for SQL Server. The most important types with their most used members are shown
    in *Table 2.6*:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: ADO.NET 定义了代表用于处理数据的最小对象的抽象类型，如 `DbConnection`、`DbCommand` 和 `DbDataReader`。数据库软件制造商可以继承并为其提供特定的实现，这些实现针对其数据库进行了优化，并公开了额外的功能。Microsoft
    为 SQL Server 做了这件事。以下是最重要的类型及其最常用的成员，显示在 *表 2.6* 中：
- en: '| **Type** | **Properties** | **Methods** | **Description** |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **属性** | **方法** | **描述** |'
- en: '| `SqlConnection` | `ConnectionString`,`State`,`ServerVersion` | `Open`, `Close`,`CreateCommand`,`RetrieveStatistics`
    | Manage the connection to the database. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `SqlConnection` | `ConnectionString,` `State,` `ServerVersion` | `Open,`
    `Close,` `CreateCommand,` `RetrieveStatistics` | 管理与数据库的连接。|'
- en: '| `SqlConnectionStringBuilder` | `InitialCatalog`, `DataSource`, `Encrypt`,
    `UserID`, `Password`, `ConnectTimeout`, and so on | `Clear`, `ContainsKey`, `Remove`
    | Build a valid connection string for a SQL Server database.After setting all
    the relevant individual properties, get the `ConnectionString` property. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `SqlConnectionStringBuilder` | `InitialCatalog,` `DataSource,` `Encrypt,`
    `UserID,` `Password,` `ConnectTimeout` 等 | `Clear,` `ContainsKey,` `Remove` |
    为 SQL Server 数据库构建一个有效的连接字符串。在设置所有相关单个属性后，获取 `ConnectionString` 属性。|'
- en: '| `SqlCommand` | `Connection,``CommandType,``CommandText,``Parameters,``Transaction`
    | `ExecuteReader`,`ExecuteNonQuery`,`ExecuteXmlReader`,`CreateParameter` | Configure
    the command to execute. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `SqlCommand` | `Connection,` `CommandType,` `CommandText,` `Parameters,`
    `Transaction` | `ExecuteReader,` `ExecuteNonQuery,` `ExecuteXmlReader,` `CreateParameter`
    | 配置命令以执行。|'
- en: '| `SqlParameter` | `ParameterName`,`Value`, `DbType,``SqlValue`,`SqlDbType,``Direction`,`IsNullable`
    |  | Configure a parameter for a command. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `SqlParameter` | `ParameterName,` `Value,` `DbType,` `SqlValue,` `SqlDbType,`
    `Direction,` `IsNullable` |  | 为命令配置一个参数。|'
- en: '| `SqlDataReader` | `FieldCount`,`HasRows`,`IsClosed`,`RecordsAffected` | `Read`,
    `Close`,`GetOrdinal`,`GetInt32`, `GetString`,`GetDecimal`,`GetFieldValue<T>` |
    Process the result set from executing a query. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `SqlDataReader` | `FieldCount,` `HasRows,` `IsClosed,` `RecordsAffected`
    | `Read,` `Close,` `GetOrdinal,` `GetInt32,` `GetString,` `GetDecimal,` `GetFieldValue<T>`
    | 处理查询执行的结果集。|'
- en: 'Table 2.6: Important types in ADO.NET SqlClient'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.6：ADO.NET SqlClient 中的重要类型
- en: '`SqlConnection` has two useful events: `StateChange` and `InfoMessage`.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`SqlConnection` 有两个有用的事件：`StateChange` 和 `InfoMessage`。'
- en: 'All the `ExecuteXxx` methods of `SqlCommand` will execute any command. The
    one you use depends on what you expect to get back:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`SqlCommand` 的所有 `ExecuteXxx` 方法都将执行任何命令。您使用哪个取决于您期望得到什么：'
- en: If the command includes at least one `SELECT` statement that returns a result
    set, then call `ExecuteReader` to execute the command. This method returns a `DbDataReader`-derived
    object for reading row-by-row through the result set.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果命令包含至少一个返回结果集的 `SELECT` 语句，那么请调用 `ExecuteReader` 来执行命令。此方法返回一个派生自 `DbDataReader`
    的对象，用于通过结果集逐行读取。
- en: If the command does not include at least one `SELECT` statement, then it is
    more efficient to call `ExecuteNonQuery`. This method returns an integer for the
    number of rows affected.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果命令不包含至少一个 `SELECT` 语句，那么调用 `ExecuteNonQuery` 更有效率。此方法返回受影响的行数。
- en: If the command includes at least one `SELECT` statement that returns XML because
    it uses the `AS XML` command, then call `ExecuteXmlReader` to execute the command.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果命令包含至少一个 `SELECT` 语句，该语句返回 XML，因为它使用了 `AS XML` 命令，那么请调用 `ExecuteXmlReader`
    来执行命令。
- en: Creating a console app for working with ADO.NET
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用于处理 ADO.NET 的控制台应用程序
- en: 'First, we will create a console app project for working with ADO.NET:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个用于处理 ADO.NET 的控制台应用程序项目：
- en: 'Use your preferred code editor to create a console app project, as defined
    in the following list:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器创建控制台应用程序项目，如下列定义：
- en: 'Project template: **Console App** / `console`.'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`。
- en: 'Solution file and folder: `Chapter02`.'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter02`。
- en: 'Project file and folder: `Northwind.Console.SqlClient`.'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Console.SqlClient`。
- en: '**Do not use top-level statements**: Cleared.'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶级语句**：已清除。'
- en: '**Enable native AOT publish**: Cleared.'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用原生 AOT 发布**：已清除。'
- en: '**Good Practice:** For all the projects that you create for this book, keep
    your root path short and avoid using `#` in your folder and file names, or you
    might see compiler errors like `RSG002: TargetPath not specified for additional
    file`. For example, do *not* use `C:\My C# projects\` as your root path!'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：对于您为这本书创建的所有项目，请保持您的根路径短，并避免在文件夹和文件名中使用 `#`，否则您可能会看到像 `RSG002: TargetPath
    not specified for additional file` 这样的编译器错误。例如，请不要使用 `C:\My C# projects\` 作为您的根路径！'
- en: 'In the project file, treat warnings as errors, add a package reference for
    the latest version of `Microsoft.Data.SqlClient`, and statically and globally
    import `System.Console`, as shown highlighted in the following markup:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，将警告视为错误，添加对最新版本的 `Microsoft.Data.SqlClient` 的包引用，并静态和全局导入 `System.Console`，如下面的标记所示：
- en: '[PRE2]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can check the most recent version of the package at the following link:
    [https://www.nuget.org/packages/Microsoft.Data.SqlClient#versions-body-tab](https://www.nuget.org/packages/Microsoft.Data.SqlClient#versions-body-tab).'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在以下链接中检查该包的最新版本：[https://www.nuget.org/packages/Microsoft.Data.SqlClient#versions-body-tab](https://www.nuget.org/packages/Microsoft.Data.SqlClient#versions-body-tab)。
- en: Build the project to restore the referenced package.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以恢复引用的包。
- en: 'Add a new class file named `Program.Helpers.cs`, and modify its contents to
    define a method to configure the console to enable special characters like the
    Euro currency symbol and set the current culture, and a method that will output
    some text to the console in a specified color, with a default color of black,
    as shown in the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.Helpers.cs` 的新类文件，并修改其内容以定义一个方法来配置控制台以启用特殊字符，如欧元货币符号，并设置当前区域设置，以及一个方法，该方法将以指定的颜色将一些文本输出到控制台，默认颜色为黑色，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The default foreground color in the preceding code is white because I have assumed
    that most readers will have a default background color of black. On my computer,
    I set the default background color of the console to white so that I can take
    screenshots for this book. Set whatever default color is best for your computer.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，默认的前景色为白色，因为我假设大多数读者的默认背景色为黑色。在我的计算机上，我将控制台的默认背景色设置为白色，以便为这本书截图。请根据您的计算机设置最适合的默认颜色。
- en: 'Add a new class file named `Program.EventHandlers.cs`, and modify its contents
    to define methods that will act as event handlers for a database connection state
    change by showing the original and current states, and for when the database sends
    an `InfoMessage`, as shown in the following code:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.EventHandlers.cs` 的新类文件，并修改其内容以定义方法，这些方法将作为数据库连接状态变化的事件处理器，通过显示原始和当前状态，以及当数据库发送
    `InfoMessage` 时执行，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In `Program.cs`, delete the existing statements. Add statements to connect
    to SQL Server locally, to Azure SQL Database, or to SQL Edge, using either SQL
    authentication with a user ID and password or Windows Authentication without a
    user ID and password, as shown in the following code:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，删除现有的语句。添加语句以连接到本地 SQL Server、Azure SQL 数据库或 SQL Edge，使用 SQL
    身份验证（带有用户 ID 和密码）或 Windows 认证（不带用户 ID 和密码），如下面的代码所示：
- en: '[PRE5]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Good Practice**: In this coding task, we prompt the user to enter the password
    to connect to the database. In a real-world app you are more likely to store the
    password in an environment variable or secure storage like Azure Key Vault. You
    must definitely never store passwords in your source code!'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：在这个编码任务中，我们提示用户输入连接到数据库的密码。在实际应用中，您更有可能将密码存储在环境变量或像 Azure Key Vault
    这样的安全存储中。您绝对不应该在源代码中存储密码！'
- en: 'Run the console app, select options that work with your SQL Server setup, and
    note the results, including the state change event output written in dark yellow
    to make them easier to see, as shown in the following output:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，选择与您的 SQL Server 设置兼容的选项，并注意结果，包括以深黄色写入的状态变化事件输出，以便更容易看到，如下面的输出所示：
- en: '[PRE6]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The following steps show the experience when connecting to Azure SQL Database
    or Azure SQL Edge, which require a username and password. If you are connecting
    to a local SQL Server using Windows Integrated Security, then you will not need
    to enter a password.
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下步骤展示了连接到 Azure SQL 数据库或 Azure SQL Edge 的经验，这些操作需要用户名和密码。如果您使用 Windows 集成安全连接到本地
    SQL Server，则不需要输入密码。
- en: 'Run the console app, select choices that require a user ID and password, for
    example, with Azure SQL Database, and note the result, as shown in the following
    output:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，选择需要用户ID和密码的选项，例如使用Azure SQL数据库，并注意结果，如下所示的部分输出：
- en: '[PRE7]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the console app, select choices that require a user ID and password, enter
    a wrong password, and note the result, as shown in the following output:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，选择需要用户ID和密码的选项，输入错误的密码，并注意结果，如下所示的部分输出：
- en: '[PRE8]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In `Program.cs`, change the server name (the `DataSource` property) to something
    wrong.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，将服务器名称（`DataSource`属性）更改为错误的内容。
- en: 'Run the console app and note the result (depending on where your database is
    hosted, the exception message might be slightly different), as shown in the following
    output:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果（根据您的数据库托管位置，异常消息可能略有不同），如下所示：
- en: '[PRE9]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When opening a SQL Server connection, the default timeout is 30 seconds for
    server connection problems, so be patient! We changed the timeout to 10 seconds
    to avoid having to wait so long.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开SQL Server连接时，对于服务器连接问题，默认超时时间为30秒，所以请耐心等待！我们将超时时间更改为10秒，以避免等待时间过长。
- en: Executing queries and working with data readers using ADO.NET
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ADO.NET执行查询和处理数据读取器
- en: 'Now that we have a successful connection to the SQL Server database, we can
    run commands that retrieve rows from a table and process the results using a data
    reader:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功连接到SQL Server数据库，我们可以运行检索表中的行并使用数据读取器处理结果的命令：
- en: 'In `Program.cs`, import the namespace for working with ADO.NET command types,
    as shown in the following code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入用于处理ADO.NET命令类型的命名空间，如下所示：
- en: '[PRE10]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Good Practice**: To save space in this book, I will use the names `cmd` and
    `r` to represent an SQL command and an SQL data reader. In your code, give variables
    proper word names like `command` and `reader`.'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：为了节省本书的空间，我将使用`cmd`和`r`来表示SQL命令和SQL数据读取器。在您的代码中，给变量赋予合适的单词名称，如`command`和`reader`。'
- en: 'Before the statement that closes the connection, add statements to define a
    command that selects the ID, name, and price from the `Products` table, executes
    it, and outputs the product IDs, names, and prices using a data reader, as shown
    in the following code:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关闭连接的语句之前，添加定义选择`Products`表中的ID、名称和价格的命令的语句，执行它，并使用数据读取器输出产品ID、名称和价格，如下所示：
- en: '[PRE11]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We format the unit price using the `C` format, which uses the current culture
    to format currency values. The call to `ConfigureConsole` sets the current culture
    to US English so the output for all readers uses `$`. To test alternative cultures
    like French that use the Euro currency symbol, modify the call at the top of the
    `Program.cs` file, as shown in the following code: `ConfigureConsole("fr-FR");`.'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用`C`格式来格式化单价，该格式使用当前文化来格式化货币值。调用`ConfigureConsole`将当前文化设置为美国英语，因此所有读者的输出都使用`$`。要测试像使用欧元货币符号的法国这样的替代文化，请修改`Program.cs`文件顶部的调用，如下所示：`ConfigureConsole("fr-FR");`。
- en: 'Run the console app and note the results, as shown in the following partial
    output:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，如下所示的部分输出：
- en: '[PRE12]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In `Program.cs`, modify the SQL statement to define a parameter for the unit
    price and use it to filter the results to products that cost more than that unit
    price, as shown highlighted in the following code:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，修改SQL语句以定义一个用于单价的参数，并使用它来过滤结果，以显示单价高于该值的商品，如下所示的高亮代码：
- en: '[PRE13]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the console app, enter a unit price like `50`, and note the results, as
    shown in the following partial output:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，输入一个单价如`50`，并注意结果，如下所示的部分输出：
- en: '[PRE14]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Outputting statistics
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出统计数据
- en: 'An ADO.NET connection can track useful statistics during its lifetime, including
    those listed in *Table 2.7*:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: ADO.NET连接在其生命周期内可以跟踪有用的统计数据，包括*表2.7*中列出的那些：
- en: '| **Key** | **Description** |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **描述** |'
- en: '| `BuffersReceived`, `BuffersSent`, `BytesReceived`, `BytesSent` | Data is
    transmitted as bytes stored in buffers. |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `BuffersReceived`, `BuffersSent`, `BytesReceived`, `BytesSent` | 数据作为存储在缓冲区中的字节进行传输。
    |'
- en: '| `CursorOpens` | Cursors are an expensive operation because they require state
    on the server, and should be avoided when possible. |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| `CursorOpens` | 游标是一个昂贵的操作，因为它需要在服务器上保持状态，并且在可能的情况下应避免使用。 |'
- en: '| `Prepares`, `PreparedExecs`, `UnpreparedExecs` | Number of prepares (compilations),
    executions of prepared commands, and executions of unprepared commands. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| `Prepares`, `PreparedExecs`, `UnpreparedExecs` | 准备（编译）次数、已准备命令的执行次数和未准备命令的执行次数。
    |'
- en: '| `SelectCount`, `SelectRows` | Number of `SELECT` statements and rows returned
    by `SELECT` statements. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| `SelectCount`, `SelectRows` | `SELECT` 语句的数量和由 `SELECT` 语句返回的行数。 |'
- en: '| `ServerRoundtrips`, `SumResultSets`, `Transactions` | Number of server round
    trips, result sets, and transactions. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| `ServerRoundtrips`, `SumResultSets`, `Transactions` | 服务器往返次数、结果集和事务数。 |'
- en: '| `ConnectionTime`, `ExecutionTime`, `NetworkServerTime` | Time in milliseconds
    spent connected, executing commands, or due to the network. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| `ConnectionTime`, `ExecutionTime`, `NetworkServerTime` | 连接、执行命令或由于网络花费的毫秒数。
    |'
- en: 'Table 2.7: Connection statistics that can be tracked'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.7：可以跟踪的连接统计信息
- en: 'Let’s enable this and output some of those statistics:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启用它并输出一些这些统计信息：
- en: 'In `Program.Helpers.cs`, import the namespaces for working with ADO.NET and
    common collections, as shown in the following code:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Helpers.cs` 中，导入用于处理 ADO.NET 和常见集合的命名空间，如下所示，代码中高亮显示：
- en: '[PRE15]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `Program.Helpers.cs`, in the partial `Program` class, add a method to output
    statistics about the current connection, with an array of string values to control
    which of the dozen or more statistics we want to output, as shown in the following
    code:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Helpers.cs` 中，在部分 `Program` 类中，添加一个方法来输出有关当前连接的统计信息，使用字符串值数组来控制我们想要输出哪些统计信息，如下所示，代码中高亮显示：
- en: '[PRE16]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In `Program.cs`, after writing the SQL Server version to the console, add a
    statement to enable statistics for the connection, as shown highlighted in the
    following code:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在将SQL Server版本写入控制台之后，添加一个语句来启用连接的统计信息，如下所示，代码中高亮显示：
- en: '[PRE17]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In `Program.cs`, before closing the connection, add a statement to output statistics
    for the connection, as shown highlighted in the following code:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在关闭连接之前，添加一个语句来输出连接的统计信息，如下所示，代码中高亮显示：
- en: '[PRE18]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the console app and note the statistics, as shown in the following partial
    output:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意统计信息，如下所示的部分输出：
- en: '[PRE19]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Working with ADO.NET asynchronously
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步处理 ADO.NET
- en: You can improve the responsiveness of data access code by making it asynchronous.
    You will see more details of how asynchronous operations work in *Chapter 5*,*Multitasking
    and Concurrency*. For now, just enter the code as instructed.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使其异步来提高数据访问代码的响应性。您将在 *第5章*，*多任务和并发* 中看到异步操作如何工作的更多细节。现在，只需按照指示输入代码即可。
- en: 'Let’s see how to change the statements to work asynchronously:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将语句改为异步工作：
- en: 'In `Program.cs`, change the statement to open the connection to make it asynchronous,
    as shown highlighted in the following code:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，更改打开连接的语句以使其异步，如下所示，代码中高亮显示：
- en: '[PRE20]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In `Program.cs`, change the statement to execute the command to make it asynchronous,
    as shown highlighted in the following code:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，更改执行命令的语句以使其异步，如下所示，代码中高亮显示：
- en: '[PRE21]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `Program.cs`, change the statements to read the next row and get the field
    values to make them asynchronous, as shown highlighted in the following code:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，更改读取下一行和获取字段值的语句以使其异步，如下所示，代码中高亮显示：
- en: '[PRE22]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In `Program.cs`, change the statements to close the data reader and connection
    to make them asynchronous, as shown highlighted in the following code:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，更改语句以关闭数据读取器和连接，使其异步，如下所示，代码中高亮显示：
- en: '[PRE23]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Run the console app and confirm that it has the same results as before, but
    it would run better in a multithreaded system, for example, not blocking the user
    interface in a GUI app, and not blocking I/O threads in a website.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并确认它具有与之前相同的结果，但它在多线程系统中运行得更好，例如，在GUI应用程序中不会阻塞用户界面，在网站中不会阻塞I/O线程。
- en: Executing stored procedures using ADO.NET
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ADO.NET 执行存储过程
- en: If you need to execute the same query or another SQL statement multiple times,
    it is best to create a **stored procedure**, often with parameters, so that it
    can be precompiled and optimized. Stored procedure parameters have a direction
    to indicate if they are inputs, outputs, or return values.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要多次执行相同的查询或其他SQL语句，最好创建一个 **存储过程**，通常带有参数，以便它可以预先编译和优化。存储过程参数有一个方向来指示它们是输入、输出还是返回值。
- en: 'Let’s see an example that uses all three types of parameter direction. First,
    we will create the stored procedure in the database:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个使用所有三种参数方向的示例。首先，我们将在数据库中创建存储过程：
- en: In your preferred database tool, connect to the `Northwind` database.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的数据库工具中，连接到 `Northwind` 数据库。
- en: 'In your preferred database tool, add a new stored procedure:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的数据库工具中，添加一个新的存储过程：
- en: If you are using **SQL Server Management Studio**, then in **Object Explorer**,
    navigate to **Databases** | **Northwind** | **Programmability**, right-click **Stored
    Procedures**, and select **New** | **Stored Procedure**.
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 **SQL Server Management Studio**，则在 **Object Explorer** 中导航到 **Databases**
    | **Northwind** | **Programmability**，右键单击 **Stored Procedures** 并选择 **New** |
    **Stored Procedure**。
- en: If you are using Visual Studio 2022, then in **Server Explorer**, right-click
    **Stored Procedures** and select **Add New Stored Procedure**.
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio 2022，则在 **Server Explorer** 中右键单击 **Stored Procedures**
    并选择 **Add New Stored Procedure**。
- en: If you are using Visual Studio Code, then in **SQL Server**, right-click your
    connection profile and select **New Query**.
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio Code，则在 **SQL Server** 中右键单击你的连接配置文件并选择 **New Query**。
- en: 'If you are using JetBrains Rider, then in the **Database** toolbar, click the
    **Jump to Query Console…** button, and then remove any existing statements. As
    well as the following SQL statements, start with a command to set the active database
    to Northwind: `USE Northwind GO`. This should prevent JetBrains Rider from creating
    the stored procedure in the `master` database!'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 JetBrains Rider，则在 **Database** 工具栏中单击 **Jump to Query Console…** 按钮，然后删除任何现有语句。以及以下
    SQL 语句，以设置活动数据库为 Northwind 的命令开始：`USE Northwind GO`。这应该可以防止 JetBrains Rider 在
    `master` 数据库中创建存储过程！
- en: 'Modify the SQL statements to define a stored procedure named `GetExpensiveProducts`
    with two parameters, an input parameter for the minimum unit price and an output
    parameter for the row count of matching products, as shown in the following code:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 SQL 语句以定义一个名为 `GetExpensiveProducts` 的存储过程，该存储过程有两个参数：一个用于最小单位价格的输入参数和一个用于匹配产品行数的输出参数，如下面的代码所示：
- en: '[PRE24]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The stored procedure uses two `SELECT` statements. The first sets the `@count`
    output parameter to a count of the matching product rows. The second returns the
    matching product rows. It also calls the `PRINT` command, which will raise the
    `InfoMessage` event.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存储过程使用两个 `SELECT` 语句。第一个将 `@count` 输出参数设置为匹配产品行的计数。第二个返回匹配的产品行。它还调用了 `PRINT`
    命令，这将引发 `InfoMessage` 事件。
- en: Right-click in the SQL statements and select **Execute** or **Execute Query**.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 SQL 语句中右键单击并选择 **Execute** 或 **Execute Query**。
- en: Right-click **Stored Procedures** and select **Refresh**. In JetBrains Rider,
    it is named **routines**.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 **Stored Procedures** 并选择 **Refresh**。在 JetBrains Rider 中，它被称为 **routines**。
- en: 'Expand **GetExpensiveProducts** and note the `@price money` input, `@count
    int` input/output, and return value parameters, as shown in **SQL Server Management
    Studio** in *Figure 2.13*:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开 **GetExpensiveProducts** 并注意 `@price money` 输入、`@count int` 输入/输出和返回值参数，如图
    *2.13* 中的 **SQL Server Management Studio** 所示：
- en: '![](img/B19587_02_13.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_02_13.png)'
- en: 'Figure 2.13: Parameters of the GetExpensiveProducts stored procedure'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13：GetExpensiveProducts 存储过程的参数
- en: Close the SQL query without saving changes.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 SQL 查询而不保存更改。
- en: 'In `Program.cs`, add statements to allow the user to choose between running
    the text command and the stored procedure. Add statements defining the stored
    procedure and its parameters, and then execute the command, as shown highlighted
    in the following code:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中添加语句以允许用户在运行文本命令和存储过程之间进行选择。添加定义存储过程及其参数的语句，然后执行命令，如下面的代码所示（高亮显示）：
- en: '[PRE25]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After the statement that closes the data reader, add statements to output the
    output parameter and the return value, as shown highlighted in the following code:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关闭数据读取器的语句之后，添加输出输出参数和返回值的语句，如下面的代码所示（高亮显示）：
- en: '[PRE26]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If a stored procedure returns result sets as well as parameters, then the data
    reader for the result sets must be closed before the parameters can be read.
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存储过程返回结果集以及参数，则必须在读取参数之前关闭结果集的数据读取器。
- en: 'Run the console app and note the results if the price entered is `60`, and
    note the `InfoMessage` event handler writes a message in dark blue, as shown in
    the following output:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，并注意如果输入的价格是 `60`，则结果，并注意 `InfoMessage` 事件处理器以深蓝色写入消息，如下面的输出所示：
- en: '[PRE27]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Outputting streams with a data reader
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据读取器输出流
- en: In a real app or service, we would likely not output to the console. More likely,
    as we read each row with a data reader, we might output to a stream that writes
    HTML tags inside a web page, or text formats like XML and JSON for returning data
    from a service.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的应用程序或服务中，我们可能不会输出到控制台。更有可能的是，当我们使用数据读取器读取每一行时，我们可能会输出到写入网页内 HTML 标签的流，或者返回服务数据的
    XML 和 JSON 等文本格式。
- en: 'Let’s add the ability to generate a JSON file:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加生成 JSON 文件的功能：
- en: 'In `Program.cs`, import the namespace for working efficiently with JSON and
    to statically import the `Environment` and `Path` classes, as shown in the following
    code:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入用于高效处理JSON的命名空间，并静态导入`Environment`和`Path`类，如下所示代码：
- en: '[PRE28]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In `Program.cs`, before the `while` statement that processes the data reader,
    add statements to define a file path for a JSON file, create a file stream, and
    start a JSON array, then in the `while` block, write a JSON object that represents
    each product row, and finally, end the array and close the stream, as shown highlighted
    in the following code:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在处理数据读取器的`while`语句之前，添加语句以定义JSON文件的文件路径，创建文件流，并开始一个JSON数组，然后在`while`块中，写入表示每个产品行的JSON对象，最后结束数组并关闭流，如下所示高亮显示的代码：
- en: '[PRE29]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Run the console app, enter a price of `60`, and note the path to the JSON file,
    as shown in the following output:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，输入价格`60`，并注意JSON文件的路径，如下所示输出：
- en: '[PRE30]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open the `products.json` file and note that the JSON is written with no whitespace,
    so it all appears on one line, as shown in the following file:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`products.json`文件并注意，JSON没有空格，所以它全部显示在一行上，如下所示文件：
- en: '[PRE31]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you are using Visual Studio 2022, then you can right-click and select **Format
    Document**, and note that it is now easier to read, as shown in *Figure 2.14*:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在使用Visual Studio 2022，那么你可以右键单击并选择**格式化文档**，并注意现在它更容易阅读，如图*图2.14*所示：
- en: '![](img/B19587_02_14.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![img/B19587_02_14.png]'
- en: 'Figure 2.14: The products.json file generated from a data reader'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14：从数据读取器生成的`products.json`文件
- en: Generating objects with a data reader
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据读取器生成对象
- en: For maximum flexibility, we likely want to convert the rows in a data reader
    into object instances stored in an array or collection. After that, we could serialize
    the object graph however we want. ADO.NET does not have a built-in ability to
    map a data reader row to an object, so we will have to do it manually.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最大的灵活性，我们可能希望将数据读取器中的行转换为存储在数组或集合中的对象实例。之后，我们可以按需序列化对象图。ADO.NET没有内置将数据读取器行映射到对象的能力，因此我们必须手动完成。
- en: 'Let’s see an example:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子：
- en: 'Add a new class file named `Product.cs`, and modify its contents to define
    a class to represent just the three columns we want from each row in the `Products`
    table, as shown in the following code:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Product.cs`的新类文件，并修改其内容以定义一个类，仅表示从`Products`表中的每一行中我们想要的三列，如下所示代码：
- en: '[PRE32]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Good Practice**: In this task, we will use this type only for read-only instances,
    so we could have used an immutable `record`. But later we will need to change
    property values after the object is created, so we have to define a `class` instead.'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：在这个任务中，我们将仅使用此类型来表示只读实例，因此我们可以使用不可变的`record`。但稍后我们需要在对象创建后更改属性值，因此我们必须定义一个`class`。'
- en: At the top of `Program.cs`, import the `Northwind.Models` namespace so we can
    use `Product`.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入`Northwind.Models`命名空间，以便我们可以使用`Product`。
- en: 'In `Program.cs`, before creating the file stream, instantiate a list of products
    with an initial storage for 77 items (but this is not a limit) because when first
    created the Northwind database has 77 products, as shown highlighted in the following
    code:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在创建文件流之前，实例化一个产品列表，初始存储77个项目（但这不是限制），因为当Northwind数据库首次创建时，有77个产品，如下所示高亮显示的代码：
- en: '[PRE33]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the `while` block, add statements to instantiate the `Product` type per
    row in the data reader and add it to the list, as shown highlighted in the following
    code:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`块中，添加语句以针对数据读取器中的每一行实例化`Product`类型并将其添加到列表中，如下所示高亮显示的代码：
- en: '[PRE34]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Before closing the data reader, add a statement to use the static `Serialize`
    method of the `JsonSerializer` class to write the list of products to the console,
    as shown highlighted in the following code:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关闭数据读取器之前，添加一个语句以使用`JsonSerializer`类的静态`Serialize`方法将产品列表写入控制台，如下所示高亮显示的代码：
- en: '[PRE35]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the console app, enter a price of `60`, and note the JSON generated from
    the list of products, as shown in the following output:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，输入价格`60`，并注意从产品列表生成的JSON，如下所示输出：
- en: '[PRE36]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Instead of manually instantiating objects, to simplify even more, we can use
    a simple **object-relational mapper** (**ORM**) like Dapper.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步简化，我们不需要手动实例化对象，可以使用简单的**对象关系映射器**（**ORM**）如Dapper。
- en: Managing data with Dapper
  id: totrans-418
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dapper管理数据
- en: Dapper uses ADO.NET underneath when working with SQL Server. Because it is a
    higher-level technology, it is not as efficient as using ADO.NET directly, but
    it can be easier. Dapper is an alternative ORM to EF Core. It is more efficient
    because it extends the low-level ADO.NET `IDbConnection` interface with very basic
    functionality without trying to be all things to all people.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 SQL Server 一起工作时，Dapper 在底层使用 ADO.NET。因为它是一种高级技术，所以它不如直接使用 ADO.NET 效率高，但它可能更容易使用。Dapper
    是 EF Core 的替代 ORM。它更高效，因为它通过扩展低级的 ADO.NET `IDbConnection` 接口，提供了非常基本的功能，而没有试图成为所有人的所有东西。
- en: Dapper connection extension methods
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dapper 连接扩展方法
- en: Dapper adds three extension methods to any class that implements `IDbConnection`
    (like `SqlConnection`). They are `Query<T>`, `Query`, and `Execute`. Dapper will
    automatically open and close the associated connection as needed.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: Dapper 向实现 `IDbConnection`（如 `SqlConnection`）的任何类添加了三个扩展方法。它们是 `Query<T>`、`Query`
    和 `Execute`。Dapper 将根据需要自动打开和关闭相关的连接。
- en: 'The `Query<T>` extension method is the most used because it runs any specified
    SQL command and then returns the results as an `IEnumerable<T>` (a sequence of
    objects). It is designed to run commands that retrieve data like `SELECT`. It
    has several parameters, as shown in *Table 2.8*:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query<T>` 扩展方法是最常用的，因为它执行任何指定的 SQL 命令，然后以 `IEnumerable<T>`（对象序列）的形式返回结果。它旨在运行像
    `SELECT` 这样的数据检索命令。它有几个参数，如 *表 2.8* 所示：'
- en: '| **Parameter** | **Description** |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** |'
- en: '| `string sql` | This is the only mandatory parameter. It is either the text
    of a SQL command or the name of a stored procedure. |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| `string sql` | 这是唯一的必需参数。它可以是 SQL 命令的文本或存储过程的名称。|'
- en: '| `object param = null` | A complex object for passing parameters used in the
    query. This can be an anonymous type. |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| `object param = null` | 用于传递查询中使用的参数的复杂对象。这可以是一个匿名类型。|'
- en: '| `IDbTransaction transaction = null` | To manage distributed transactions.
    |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| `IDbTransaction transaction = null` | 用于管理分布式事务。|'
- en: '| `bool buffered = true` | By default, it will buffer the entire reader on
    return. With large datasets, you can minimize memory and only load objects as
    needed by setting `buffered` to `false`. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| `bool buffered = true` | 默认情况下，它将在返回时缓冲整个读取器。对于大型数据集，您可以通过将 `buffered` 设置为
    `false` 来最小化内存，并且只按需加载对象。|'
- en: '| `int? commandTimeout = null` | To change the default command timeout. |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `int? commandTimeout = null` | 用于更改默认的命令超时时间。|'
- en: '| `CommandType? commandType = null)` | To switch to a stored procedure instead
    of the default of text. |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| `CommandType? commandType = null)` | 用于切换到存储过程而不是默认的文本。|'
- en: 'Table 2.8: Dapper’s Query<T> extension method parameters'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.8：Dapper 的 Query<T> 扩展方法参数
- en: The `Query` extension method is a loosely-typed equivalent so it is less frequently
    used.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query` 扩展方法是一个松散类型等效，因此使用频率较低。'
- en: The `Execute` extension method runs any specified SQL command and then returns
    the number of rows affected as an `int`. It is designed to run commands like `INSERT`,
    `UPDATE`, and `DELETE`. It has the same parameters as the `Query<T>` extension
    method.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`Execute` 扩展方法执行任何指定的 SQL 命令，然后以 `int` 的形式返回受影响的行数。它旨在运行像 `INSERT`、`UPDATE`
    和 `DELETE` 这样的命令。它具有与 `Query<T>` 扩展方法相同的参数。'
- en: Querying using Dapper
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Dapper 查询
- en: 'Let’s see a simple example that queries the `Suppliers` table instead of the
    `Products` table:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个简单的示例，该示例查询 `Suppliers` 表而不是 `Products` 表：
- en: 'In the `Northwind.Console.SqlClient` project, add a package reference for `Dapper`,
    as shown highlighted in the following markup:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Console.SqlClient` 项目中，添加对 `Dapper` 的包引用，如下面的标记所示：
- en: '[PRE37]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'At the time of writing, the latest version of Dapper is 2.1.21, released on
    November 11, 2023\. You can check if it has been updated since then at the following
    link: [https://www.nuget.org/packages/Dapper](https://www.nuget.org/packages/Dapper).'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，Dapper 的最新版本是 2.1.21，发布于 2023 年 11 月 11 日。您可以通过以下链接检查自那时以来是否已更新：[https://www.nuget.org/packages/Dapper](https://www.nuget.org/packages/Dapper)。
- en: Build the project to restore packages.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以还原包。
- en: 'Add a new class file named `Supplier.cs`, and modify its contents to define
    a class to represent four columns from each row in the `Suppliers` table, as shown
    in the following code:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Supplier.cs` 的新类文件，并修改其内容以定义一个类来表示 `Suppliers` 表中每一行的四个列，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'At the bottom of `Program.cs`, add statements to retrieve `Supplier` entities
    in `Germany`, enumerate the collection outputting basic information about each
    one, and then serialize the collection as JSON to the console, as shown in the
    following code:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 的底部添加语句以检索 `Germany` 中的 `Supplier` 实体，枚举输出每个产品的基本信息，然后将集合序列化为
    JSON 输出到控制台，如下面的代码所示：
- en: '[PRE39]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the console app, and in the section where we used Dapper, note the same
    connection was used, so its events were raised while the Dapper query was executed,
    the enumerated collection output, and then JSON generated from the list of suppliers,
    as shown in the following output:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，在我们在其中使用 Dapper 的部分，注意使用了相同的连接，因此在 Dapper 查询执行时触发了其事件，然后是来自供应商列表的枚举集合输出，以及随后生成的
    JSON，如下面的输出所示：
- en: '[PRE40]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'At the bottom of `Program.cs`, add statements to run the `GetExpensiveProducts`
    stored procedure, passing a `price` parameter value of `100`, enumerate the collection
    outputting basic information about each one, and then serialize the collection
    as JSON to the console, as shown in the following code:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 的底部添加语句以运行 `GetExpensiveProducts` 存储过程，传递一个 `price` 参数值为 `100`，枚举输出每个产品的基本信息，然后将集合序列化为
    JSON 输出到控制台，如下面的代码所示：
- en: '[PRE41]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Warning!** With Dapper, you must pass a `param` object with all parameters,
    even if they are only used as output parameters. For example, we must define `count`,
    or an exception will be thrown. You must also remember to explicitly set the command
    type to stored procedure!'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 使用 Dapper 时，你必须传递一个包含所有参数的 `param` 对象，即使它们仅用作输出参数。例如，我们必须定义 `count`，否则将抛出异常。你还必须记住显式设置命令类型为存储过程！'
- en: 'Run the console app, and in the section where we used Dapper to run the stored
    procedure to get the products that cost more than 100, note the same connection
    was used so its events were raised while the Dapper query was executed, the enumerated
    collection output, and then JSON generated from the list of products, as shown
    in the following output:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，在我们在其中使用 Dapper 运行存储过程以获取价格超过 100 的产品的部分，注意使用了相同的连接，因此在 Dapper 查询执行时触发了其事件，然后是来自产品列表的枚举集合输出，以及随后生成的
    JSON，如下面的输出所示：
- en: '[PRE42]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**More Information**: You can learn more about Dapper at the following link:
    [https://github.com/DapperLib/Dapper/blob/main/Readme.md](https://github.com/DapperLib/Dapper/blob/main/Readme.md).'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：你可以在以下链接中了解更多关于 Dapper 的信息：[https://github.com/DapperLib/Dapper/blob/main/Readme.md](https://github.com/DapperLib/Dapper/blob/main/Readme.md)。'
- en: Cleaning up data resources
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理数据资源
- en: When you are done with a SQL Server database, you can clean up the resources
    used.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成 SQL Server 数据库的使用后，你可以清理使用的资源。
- en: The Northwind database is used in most chapters of this book so if you plan
    to immediately continue with more chapters after this one, do not delete Northwind
    yet! If you created the database on your local computer, then you can leave it
    forever.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind 数据库被本书的大部分章节使用，所以如果你计划在阅读完这一章后立即继续阅读更多章节，请不要删除 Northwind！如果你在本地计算机上创建了数据库，那么你可以永远保留它。
- en: Removing Azure resources
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除 Azure 资源
- en: 'To remove the resources used by SQL Database to save costs:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 为了移除 SQL 数据库使用的资源以节省成本：
- en: '**Warning!** If you do not remove the resources used by an Azure SQL database,
    then you will incur costs.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 如果你没有删除 Azure SQL 数据库使用的资源，那么你将产生费用。'
- en: In the Azure portal, find the resource group named `apps-services-book`.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 门户中，找到名为 `apps-services-book` 的资源组。
- en: Click **Delete**.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **删除**。
- en: Enter the name of the resource group.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入资源组的名称。
- en: Click **Delete**.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **删除**。
- en: Practicing and exploring
  id: totrans-461
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题，进行一些动手实践，并深入研究本章的主题来测试你的知识和理解。
- en: Exercise 2.1 – Test your knowledge
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: Which NuGet package should you reference in a .NET project to get the best performance
    when working with data in SQL Server?
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 .NET 项目中，你应该引用哪个 NuGet 包以在处理 SQL Server 中的数据时获得最佳性能？
- en: What is the safest way to define a database connection string?
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义数据库连接字符串最安全的方法是什么？
- en: What must T-SQL parameters and variables be prefixed with?
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: T-SQL 参数和变量必须以什么前缀开头？
- en: What must you do before reading an output parameter?
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在读取输出参数之前，你必须做什么？
- en: What type does Dapper add its extension methods to?
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dapper 将其扩展方法添加到哪种类型中？
- en: What are the two most commonly used extension methods provided by Dapper?
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dapper 提供的最常用的两个扩展方法是什么？
- en: Exercise 2.2 – Explore topics
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.2 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-2---managing-relational-data-using-sql-server](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-2---managing-relational-data-using-sql-server)'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-2---managing-relational-data-using-sql-server](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-2---managing-relational-data-using-sql-server)'
- en: Exercise 2.3 – Alternatives for storing secrets
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2.3 – 存储秘密的替代方案
- en: 'Secrets like passwords and other values used in database connection strings,
    or values like keys to access a service, are often stored in environment variables.
    Other places for storing these values include App Secrets. You can learn more
    about them in the article *Safe storage of app secrets in development in ASP.NET
    Core*, found at the following link:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 像密码和其他在数据库连接字符串中使用的值，或用于访问服务的密钥等秘密，通常存储在环境变量中。这些值的其他存储位置包括应用程序秘密。您可以在以下链接中了解更多关于它们的信息：*在
    ASP.NET Core 中开发中安全存储应用程序秘密*：
- en: '[https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets](https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets](https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets)'
- en: 'For related guidance about handling connection strings, you can read the following
    link:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 关于处理连接字符串的相关指导，您可以阅读以下链接：
- en: '[https://learn.microsoft.com/en-us/ef/core/miscellaneous/connection-strings](https://learn.microsoft.com/en-us/ef/core/miscellaneous/connection-strings)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/ef/core/miscellaneous/connection-strings](https://learn.microsoft.com/en-us/ef/core/miscellaneous/connection-strings)'
- en: Summary
  id: totrans-479
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了：
- en: How to connect to an existing SQL Server database.
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何连接到现有的 SQL Server 数据库。
- en: How to execute a simple query and process the results using fast and low-level
    ADO.NET.
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用快速且低级的 ADO.NET 执行简单查询并处理结果。
- en: How to execute a simple query and process the results using Dapper.
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Dapper 执行简单查询并处理结果。
- en: In the next chapter, you will learn how to use the more powerful and complex
    ORM from Microsoft named EF Core.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用微软提供的更强大和复杂的 ORM，即 EF Core。
