["```cs\n[Serializable]\npublic class Student\n{\n     public string FirstName { get; set; }\n     public string LastName { get; set; }\n     public int ID { get; set; }\n     public Student()\n     {            \n     }\n     public Student(string firstName, string lastName, int Id)\n     {\n         this.FirstName = firstName;\n         this.LastName = lastName;\n         this.ID = Id;     \n     }\n}\n```", "```cs\n[Serializable]\npublic class Student\n{\n     public string FirstName { get; set; } \n     public string LastName { get; set; }\n     [NonSerialized()]\n     public int ID;\n}\n```", "```cs\nXmlSerializer serializer = new XmlSerializer(typeof(Student));\nstring fileName = \"StudentData\";\nusing (TextWriter writer = new StreamWriter(fileName))\n{\n     Student stu = new Student(\"Jacob\", \"Almeida\", 78);  \n     serializer.Serialize(writer, stu);\n}\n```", "```cs\n[Serializable]\npublic class Student\n{\n public string FirstName { get; set; }\n public string LastName { get; set; }\n public int ID;\n [XmlIgnore]\n public string Feedback { get; set; }\n [XmlArray(\"CourseScores\")]\n [XmlArrayItem(\"Course\")]\n public List<CourseScore> CoursePerformance { get; set; } \n public void CreateCoursePerformance()\n {\n        Course phy = new Course { Name = \"Physics\", Description = \n                                  \"Physics Subject\" };\n        CourseScore phyScore = new CourseScore { Course = phy, \n                                                 Score = 80 };\n        List<CourseScore> scores = new List<CourseScore>();\n        scores.Add(phyScore);\n        this.CoursePerformance = scores;\n }\n}\n[Serializable]\npublic class CourseScore\n{\n [XmlElement(\"Course\")]\n public Course Course;\n [XmlAttribute]\n public int Score;\n}\n[Serializable]\npublic class Course\n{\n [XmlAttribute]\n public string Name;\n public string Description;\n}\n```", "```cs\nXmlSerializer serializer = new XmlSerializer(typeof(Student));\nstring fileName = \"StudentDataWithScores\";\nusing (TextWriter writer = new StreamWriter(fileName))\n{\n       Student stu = new Student(\"Jacob\", \"Almeida\", 78, \"Passed\");\n       stu.CreateCoursePerformance();\n       serializer.Serialize(writer, stu);\n       writer.Close();\n }\n```", "```cs\npublic string FirstName { get; set; }\nprivate string LastName { get; set; }\npublic int ID;\n[XmlIgnore]\npublic string Feedback { get; set; }\n[XmlArray(\"CourseScores\")]\n[XmlArrayItem(\"Course\")]\npublic List<CourseScore> CoursePerformance { get; set; }\n```", "```cs\n[Serializable]\npublic class StudentBinary\n{\n     public string FirstName;\n     public string LastName;\n     public int ID;\n     public string Feedback;\n\n     public StudentBinary(string firstName, string lastName, int Id, string feedback)\n     {\n         this.FirstName = firstName;\n         this.LastName = lastName;\n         this.ID = Id;\n         this.Feedback = feedback;\n     }\n }\n```", "```cs\nStudentBinary stu = new StudentBinary(\"Jacob\", \"Almeida\", 78, \"Passed\");            \nIFormatter formatter = new BinaryFormatter();\nusing (Stream stream = new FileStream(\"StudentBinaryData.bin\", FileMode.Create))\n{\n     formatter.Serialize(stream, stu);\n}\n\nusing (Stream stream = new FileStream(\"StudentBinaryData.bin\", FileMode.Open))\n{\n     StudentBinary studeseria = (StudentBinary)formatter.Deserialize(stream);\n}\n```", "```cs\n[Serializable]\npublic class StudentBinary\n{\n     public string FirstName;\n     private string LastName;\n     public int ID;\n     public string Feedback;\n     public StudentBinary(string firstName, string lastName, int Id, string feedback)\n     {\n         this.FirstName = firstName;\n         this.LastName = lastName;\n         this.ID = Id;\n         this.Feedback = feedback;\n     }\n }\n```", "```cs\n[Serializable]\npublic class StudentBinary\n{\n    public string FirstName;\n    private string LastName;\n    public int ID;\n    [NonSerialized]\n    public string Feedback;\n\n    public StudentBinary(string firstName, string lastName, int Id, string feedback)\n    {\n        this.FirstName = firstName;\n        this.LastName = lastName;\n        this.ID = Id;\n        this.Feedback = feedback;\n    }\n}\n```", "```cs\n[Serializable]\npublic class StudentBinary:ISerializable\n{\n     public string FirstName;\n     private string LastName;\n     public int ID;\n     public string Feedback;\n     protected StudentBinary(SerializationInfo info, \n                             StreamingContext context)\n     {\n         FirstName = info.GetString(\"Value1\");\n         Feedback = info.GetString(\"Value2\");\n         ID = info.GetInt32(\"Value3\");\n     }\n     public StudentBinary(string firstName, string lastName, \n                          int Id, string feedback)\n     {\n         this.FirstName = firstName;\n         this.LastName = lastName;\n         this.ID = Id;\n         this.Feedback = feedback;\n     }\n     [System.Security.Permissions.SecurityPermission(\n          SecurityAction.Demand, SerializationFormatter = true)]\n     public void GetObjectData(SerializationInfo info, \n                               StreamingContext context)\n     {\n         info.AddValue(\"Value1\", FirstName);\n         info.AddValue(\"Value2\", Feedback);\n         info.AddValue(\"Value3\", ID);\n     }\n }\n```", "```cs\nStudentBinary(SerializationInfo info, StreamingContext context)\n```", "```cs\nStudentBinary stu = new StudentBinary(\"Jacob\", \"Almeida\", 78, \"Passed\");\nIFormatter formatter = new BinaryFormatter();\nusing (Stream stream = new FileStream(\"StudentBinaryData.bin\", FileMode.Create))\n{\n     formatter.Serialize(stream, stu);\n}\nusing (Stream stream = new FileStream(\"StudentBinaryData.bin\", FileMode.Open))\n{\n     StudentBinary studeseria = (StudentBinary)formatter.Deserialize(stream);\n}\n```", "```cs\npublic static void CollectionOperations()\n{\n     int[] arrayOfInt = new int[10];\n     for (int x = 0; x < arrayOfInt.Length; x++)\n     {\n         arrayOfInt[x] = x;\n     }\n     foreach (int i in arrayOfInt)\n     {\n         Console.Write(i); \n     }\n }\n```", "```cs\nint[,] arrayInt = new int[3,2] { { 1, 2 }, { 3, 4 }, { 5, 6 } };\n```", "```cs\nint[,] arrayInt = new int[3,2] { { 1, 2 }, { 3, 4 }, { 5, 6 } };\nfor (int i=0; i < 3; i++)\n{\n     for (int j = 0; j < 2; j++)\n     {\n         Console.WriteLine(arrayInt[i, j]);\n     }     \n}\n```", "```cs\n List<int> vs = new List<int>();\n```", "```cs\npublic static void ListCollectionOperations()\n{\n     List<int> vs = new List<int> { 1, 2, 3, 4, 5, 6 };\n     for (int x = 0; x < vs.Count; x++)\n     Console.Write(vs[x]); \n     vs.Remove(1);\n     Console.WriteLine(vs[0]); \n     vs.Add(7);\n     Console.WriteLine(vs.Count); \n     bool doesExist = vs.Contains(4);\n     Console.WriteLine(doesExist); \n}\n```", "```cs\nDictionary<int, int> vs = new Dictionary<int, int>();\n```", "```cs\npublic static void DictionaryCollectionOperations()\n{\n     Dictionary<int, int> vs = new Dictionary<int, int>();\n     for (int x = 0; x < 5; x++)\n     {\n         KeyValuePair<int, int> pair = new KeyValuePair<int, int>(x, x * 100);\n     }\n\n     foreach(KeyValuePair<int, int> keyValue in vs)\n     {\n         Console.WriteLine(keyValue.Key + \" \" + keyValue.Value);\n     }\n     vs.Remove(1);\n     Console.WriteLine(vs[0]);\n     vs.Add(5, 500);\n     Console.WriteLine(vs.Count);\n     bool hasKey = vs.ContainsKey(4);\n     bool hasValue = vs.ContainsValue(900);\n     Console.WriteLine(hasKey);\n     Console.WriteLine(hasValue);\n }\n```", "```cs\npublic static void QueueOperations()\n{\n    Queue<string> que = new Queue<string>();\n    que.Enqueue(\"E\");\n    que.Enqueue(\"D\");\n    que.Enqueue(\"C\");\n    que.Enqueue(\"B\");\n    que.Enqueue(\"A\");\n    int index = 0;\n    foreach(string s in que)\n    {\n        Console.WriteLine(\"Queue Element at index \" + index + \" is \" + s);\n        index++;\n    }\n    Console.WriteLine(\"Queue Element at top of the queue is \" \n                       + que.Peek());\n    que.Dequeue();\n    index = 0;\n    foreach (string s in que)\n    {\n         Console.WriteLine(\"Queue Element at index \" + index + \" is \" + s);\n         index++;\n    }\n }\n```", "```cs\npublic static void StackOperations()\n{\n     Stack<string> sta = new Stack<string>();\n     sta.Push(\"E\");\n     sta.Push(\"D\");\n     sta.Push(\"C\");\n     sta.Push(\"B\");\n     sta.Push(\"A\");\n     int index = 0;\n     foreach (string s in sta)\n     {\n         Console.WriteLine(\"Stack Element at index \" + index + \" is \" + s);\n         index++;\n     }\n     Console.WriteLine(\"Stack Element at top of the stack is \" \n                        + sta.Peek());\n     sta.Pop();\n     index = 0;\n     foreach (string s in sta)\n     {\n         Console.WriteLine(\"Stack Element at index \" + index + \" is \" + s);\n         index++;\n     }\n }\n```"]