["```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root_element>\n    <element_item>[Information goes here]</element_item>\n    <element_item>[Information goes here]</element_item>\n    <element_item>[Information goes here]</element_item>\n</root_element> \n```", "```cs\n// 1\n<?xml version=\"1.0\"?>\n// 2\n<ArrayOfWeapon>\n     // 3\n    <Weapon>\n     // 4\n        <name>Sword of Doom</name>\n        <damage>100</damage>\n     // 5\n    </Weapon>\n    <Weapon>\n        <name>Butterfly knives</name>\n        <damage>25</damage>\n    </Weapon>\n    <Weapon>\n        <name>Brass Knuckles</name>\n        <damage>15</damage>\n    </Weapon>\n// 6\n</ArrayOfWeapon> \n```", "```cs\n// Parent dictionary for the entire file\n{\n    // List of attribute-value pairs where you store your data\n    \"attribute_name\": value,\n    \"attribute_name\": value\n} \n```", "```cs\n// Parent dictionary\n{\n    // Weapon attribute with its value set to an child dictionary\n    \"weapon\": {\n          // Attribute-value pairs with weapon data\n          \"name\": \"Sword of Doom\",\n          \"damage\": 100\n    }\n} \n```", "```cs\n// Parent dictionary\n{\n    // List of weapon attribute set to an array of weapon objects\n    \"weapons\": [\n        // Each weapon object stored as its own dictionary\n        {\n            \"name\": \"Sword of Doom\",\n            \"damage\": 100\n        },\n        {\n            \"name\": \"Butterfly knives\",\n            \"damage\": 25\n        },\n        {\n            \"name\": \"Brass Knuckles\",\n            \"damage\": 15\n        }\n    ]\n} \n```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n\n    **// 1**\n    **using** **System.IO;**\n\n    public class DataManager : MonoBehaviour, IManager\n    {\n        // ... No variable changes needed ...\n\n        public void Initialize()\n        {\n            _state = \"Data Manager initialized..\";\n            Debug.Log(_state);\n\n            **// 2**\n            **FilesystemInfo();**\n        }\n        public void FilesystemInfo()\n        {\n            **// 3**\n            **Debug.LogFormat(****\"Path separator character: {0}\"****,**\n              **Path.PathSeparator);**\n            **Debug.LogFormat(****\"Directory separator character: {0}\"****,**\n              **Path.DirectorySeparatorChar);**\n            **Debug.LogFormat(****\"Current directory: {0}\"****,**\n              **Directory.GetCurrentDirectory());**\n            **Debug.LogFormat(****\"Temporary path: {0}\"****,**\n              **Path.GetTempPath());**\n        }\n    } \n    ```", "```cs\npublic class DataManager : MonoBehaviour, IManager\n{\n    // ... No other variable changes needed ...\n\n    **// 1**\n    **private****string** **_dataPath;**\n    **// 2**\n    **void****Awake****()**\n    **{**\n        **_dataPath = Application.persistentDataPath +** **\"/Player_Data/\"****;**\n\n        **Debug.Log(_dataPath);**\n    **}**\n\n    // ... No other changes needed ...\n} \n```", "```cs\nvar path = Path.Combine(\"/Users\", \"hferrone\", \"Chapter_12\"); \n```", "```cs\n    public void NewDirectory()\n    {\n        // 1\n        if(Directory.Exists(_dataPath))\n        {\n            // 2\n            Debug.Log(\"Directory already exists...\");\n            return;\n        }\n        // 3\n        Directory.CreateDirectory(_dataPath);\n        Debug.Log(\"New directory created!\");\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n        **NewDirectory();**\n    } \n    ```", "```cs\npublic void DeleteDirectory()\n{\n    // 1\n    if(!Directory.Exists(_dataPath))\n    {\n        // 2\n        Debug.Log(\"Directory doesn't exist or has already been\ndeleted...\");\n\n        return;\n    }\n    // 3\n    Directory.Delete(_dataPath, true);\n    Debug.Log(\"Directory successfully deleted!\");\n} \n```", "```cs\n    private string _dataPath;\n    **private****string** **_textFile;**\n    void Awake()\n    {\n        _dataPath = Application.persistentDataPath + \"/Player_Data/\";\n\n        Debug.Log(_dataPath);\n\n        **_textFile = _dataPath +** **\"Save_Data.txt\"****;**\n    } \n    ```", "```cs\n    public void NewTextFile()\n    {\n        // 1\n        if (File.Exists(_textFile))\n        {\n            Debug.Log(\"File already exists...\");\n            return;\n        }\n        // 2\n        File.WriteAllText(_textFile, \"<SAVE DATA>\\n\\n\");\n        // 3\n        Debug.Log(\"New file created!\");\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        **NewTextFile();**\n    } \n    ```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using System.IO;\n    **using** **System;** \n    ```", "```cs\n    public void UpdateTextFile()\n    {\n        // 1\n        if (!File.Exists(_textFile))\n        {\n            Debug.Log(\"File doesn't exist...\");\n            return;\n        }\n\n        // 2\n        File.AppendAllText(_textFile, $\"Game started: {DateTime.Now}\\n\");\n        // 3\n        Debug.Log(\"File updated successfully!\");\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        NewTextFile();\n        **UpdateTextFile();**\n    } \n    ```", "```cs\n    // 1\n    public void ReadFromFile(string filename)\n    {\n        // 2\n        if (!File.Exists(filename))\n        {\n            Debug.Log(\"File doesn't exist...\");\n            return;\n        }\n\n        // 3\n        Debug.Log(File.ReadAllText(filename));\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        NewTextFile();\n        UpdateTextFile();\n        **ReadFromFile(_textFile);**\n    } \n    ```", "```cs\npublic void DeleteFile(string filename)\n{\n    if (!File.Exists(filename))\n    {\n        Debug.Log(\"File doesn't exist or has already been deleted...\");\n\n        return;\n    }\n\n    File.Delete(_textFile);\n    Debug.Log(\"File successfully deleted!\");\n} \n```", "```cs\n    private string _dataPath;\n    private string _textFile;\n    **private****string** **_streamingTextFile;**\n\n    void Awake()\n    {\n        _dataPath = Application.persistentDataPath + \"/Player_Data/\";\n        Debug.Log(_dataPath);\n\n        _textFile = _dataPath + \"Save_Data.txt\";\n        **_streamingTextFile = _dataPath +** **\"Streaming_Save_Data.txt\"****;**\n    } \n    ```", "```cs\n    public void WriteToStream(string filename)\n    {\n        // 1\n        if (!File.Exists(filename))\n        {\n            // 2\n            StreamWriter newStream = File.CreateText(filename);\n\n            // 3\n            newStream.WriteLine(\"<Save Data> for HERO BORN \\n\\n\");\n            newStream.Close();\n            Debug.Log(\"New file created with StreamWriter!\");\n        }\n\n        // 4\n        StreamWriter streamWriter = File.AppendText(filename);\n\n        // 5\n        streamWriter.WriteLine(\"Game ended: \" + DateTime.Now);\n        streamWriter.Close();\n        Debug.Log(\"File contents updated with StreamWriter!\");\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        **WriteToStream(_streamingTextFile);**\n    } \n    ```", "```cs\n    public void ReadFromStream(string filename)\n    {\n        // 1\n        if (!File.Exists(filename))\n        {\n            Debug.Log(\"File doesn't exist...\");\n            return;\n        }\n\n        // 2\n        StreamReader streamReader = new StreamReader(filename);\n        Debug.Log(streamReader.ReadToEnd());\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        WriteToStream(_streamingTextFile);\n        **ReadFromStream(_streamingTextFile);**\n    } \n    ```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using System.IO;\n    using System;\n    **using** **System.Xml;** \n    ```", "```cs\n    // ... No other variable changes needed ...\n    **private****string** **_xmlLevelProgress;**\n    void Awake()\n    {\n         // ... No other changes needed ...\n         **_xmlLevelProgress = _dataPath +** **\"Progress_Data.xml\"****;**\n    } \n    ```", "```cs\n    public void WriteToXML(string filename)\n    {\n        // 1\n        if (!File.Exists(filename))\n        {\n            // 2\n            FileStream xmlStream = File.Create(filename);\n\n            // 3\n            XmlWriter xmlWriter = XmlWriter.Create(xmlStream);\n\n            // 4\n            xmlWriter.WriteStartDocument();\n            // 5\n            xmlWriter.WriteStartElement(\"level_progress\");\n\n            // 6\n            for (int i = 1; i < 5; i++)\n            {\n                xmlWriter.WriteElementString(\"level\", \"Level-\" + i);\n            }\n\n            // 7\n            xmlWriter.WriteEndElement();\n\n            // 8\n            xmlWriter.Close();\n            xmlStream.Close();\n        }\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        **WriteToXML(_xmlLevelProgress);**\n    } \n    ```", "```cs\npublic void Initialize()\n{\n    _state = \"Data Manager initialized..\";\n    Debug.Log(_state);\n    FilesystemInfo();\n    NewDirectory();\n    WriteToXML(_xmlLevelProgress);\n    **ReadFromStream(_xmlLevelProgress);**\n} \n```", "```cs\n// The new stream is wrapped in a using statement\nusing(StreamWriter newStream = File.CreateText(filename))\n{\n     // Any writing functionality goes inside the curly braces\n     newStream.WriteLine(\"<Save Data> for HERO BORN \\n\");\n} \n```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using System.IO;\n    using System;\n    using System.Xml;\n    **using** **System.Xml.Serialization;** \n    ```", "```cs\n    **[****Serializable****]**\n    public struct Weapon\n    {\n        // ... No other changes needed ...\n    } \n    ```", "```cs\n    // ... No other variable changes needed ...\n    **private****string** **_xmlWeapons;**\n    **private** **List<Weapon> weaponInventory =** **new** **List<Weapon>**\n    **{**\n        **new** **Weapon(****\"Sword of Doom\"****,** **100****),**\n        **new** **Weapon(****\"Butterfly knives\"****,** **25****),**\n        **new** **Weapon(****\"Brass Knuckles\"****,** **15****),**\n    **};** \n    ```", "```cs\n    void Awake()\n    {\n        // ... No other changes needed ...\n        **_xmlWeapons = _dataPath +** **\"WeaponInventory.xml\"****;**\n    } \n    ```", "```cs\n    public void SerializeXML()\n    {\n        // 1\n        var xmlSerializer = new XmlSerializer(typeof(List<Weapon>));\n\n        // 2\n        using(FileStream stream = File.Create(_xmlWeapons))\n        {\n            // 3\n            xmlSerializer.Serialize(stream, weaponInventory);\n        }\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        **SerializeXML();**\n    } \n    ```", "```cs\n    public void DeserializeXML()\n    {\n        // 1\n        if (File.Exists(_xmlWeapons))\n        {\n            // 2\n            var xmlSerializer = new XmlSerializer(typeof(List<Weapon>));\n\n            // 3\n            using (FileStream stream = File.OpenRead(_xmlWeapons))\n            {\n               // 4\n                var weapons = (List<Weapon>)xmlSerializer.Deserialize(stream);\n\n               // 5\n               foreach (var weapon in weapons)\n               {\n                   Debug.LogFormat(\"Weapon: {0} - Damage: {1}\", \n                     weapon.name, weapon.damage);\n               }\n            }\n        }\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        SerializeXML();\n        **DeserializeXML();**\n    } \n    ```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using System.IO;\n    using System;\n    using System.Xml;\n    using System.Xml.Serialization;\n    **using** **System.Text;** \n    ```", "```cs\n    **private****string** **_jsonWeapons;**\n    void Awake()\n    {\n        **_jsonWeapons = _dataPath +** **\"WeaponJSON.json\"****;**\n    } \n    ```", "```cs\n    public void SerializeJSON()\n    {\n        // 1\n        Weapon sword = new Weapon(\"Sword of Doom\", 100);\n        // 2\n        string jsonString = JsonUtility.ToJson(sword, true);\n\n        // 3\n        using(StreamWriter stream = File.CreateText(_jsonWeapons))\n        {\n            // 4\n            stream.WriteLine(jsonString);\n        }\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        **SerializeJSON();**\n    } \n    ```", "```cs\npublic void SerializeJSON()\n{\n    string jsonString = JsonUtility.ToJson(**weaponInventory,** true);\n\n    using(StreamWriter stream = \n      File.CreateText(_jsonWeapons))\n    {\n        stream.WriteLine(jsonString);\n    }\n} \n```", "```cs\n    [Serializable]\n    public class WeaponShop\n    {\n        public List<Weapon> inventory;\n    } \n    ```", "```cs\n    public void SerializeJSON()\n    {\n        // 1\n        **WeaponShop shop =** **new** **WeaponShop();**\n        **// 2**\n        **shop.inventory = weaponInventory;**\n\n        // 3\n        string jsonString = JsonUtility.ToJson(**shop**, true);\n\n        using(StreamWriter stream = File.CreateText(_jsonWeapons))\n        {\n            stream.WriteLine(jsonString);\n        }\n    } \n    ```", "```cs\n    public void DeserializeJSON()\n    {\n        // 1\n        if(File.Exists(_jsonWeapons))\n        {\n            // 2\n            using (StreamReader stream = new StreamReader(_jsonWeapons))\n            {\n                // 3\n                var jsonString = stream.ReadToEnd();\n\n                // 4\n                var weaponData = JsonUtility.FromJson<WeaponShop>\n                  (jsonString);\n\n                // 5\n                foreach (var weapon in weaponData.inventory)\n                {\n                    Debug.LogFormat(\"Weapon: {0} - Damage: {1}\", \n                      weapon.name, weapon.damage);\n                }\n            }\n        }\n    } \n    ```", "```cs\n    public void Initialize()\n    {\n        _state = \"Data Manager initialized..\";\n        Debug.Log(_state);\n\n        FilesystemInfo();\n        NewDirectory();\n        SerializeJSON();\n        **DeserializeJSON();**\n    } \n    ```"]