["```cs\ndotnet new webapi -n FitnessApp\n```", "```cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateWebHostBuilder(args).Build().Run();\n    }\n\n    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n        WebHost.CreateDefaultBuilder(args)\n            .UseStartup<Startup>();\n}\n```", "```cs\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n    WebHost.CreateDefaultBuilder(args)\n        .UseUrls(new string[] { \"http://[::]:80\", \"https://[::]:443\", \"http://[::]:65432\", \"https://[::]:65431\" })\n        .UseStartup<Startup>();\n```", "```cs\n\"FitnessApp\": {\n    \"commandName\": \"Project\",\n    \"launchBrowser\": true,\n    \"launchUrl\": \"api/values\",\n    \"applicationUrl\": \"https://localhost:5001;http://localhost:5000\",\n    \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n    }\n}\n```", "```cs\napp.UseHttpsRedirection();\n```", "```cs\nhttp://localhost/api/values \nhttps://localhost/api/values\nhttp://localhost:65432/api/values\nhttps://localhost:65431/api/values\n```", "```cs\n[\n    \"value1\",\n    \"value2\"\n]\n```", "```cs\npublic class ClassA {\n    public string CreateStringWithoutClassB() { ... }\n    public string CreateStringWithClassB() {\n        var bInstance = new ClassB();\n        var builder = new StringBuilder();\n        builder.Append(CreateStringWithoutClassB());\n        builder.Append(bInstance.GetSpecialString());\n        return builder.ToString();\n    }\n}\n```", "```cs\npublic class ClassA {\n    private IClassB _classB;\n    public ClassA(IClassB classBInstance) {\n        _classB = classBInstance;\n    }\n    public string CreateStringWithoutClassB() { ... }\n    public string CreateStringWithClassB() {\n        var builder = new StringBuilder();\n        builder.Append(CreateStringWithoutClassB());\n        builder.Append(_classB.GetSpecialString());\n        return builder.ToString();\n    }\n}\n```", "```cs\nnamespace FitnessApp {\n  public class FitnessDataStoreClient {\n    private readonly IHttpClientFactory _httpFactory;\n\n    public FitnessDataStoreClient(IHttpClientFactory factoryInstance) {\n      _httpFactory = factoryInstance;\n    }\n  }\n}\n```", "```cs\nservices.AddHttpClient();\n```", "```cs\n127.0.0.1 fitness.write.data.com\n127.0.0.1 fitness.read.data.com\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n\n    services.AddHttpClient(\"WRITER\", c => {\n        c.BaseAddress = new Uri(\"http://fitness.write.data.com:56789\");\n        c.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n    });\n\n    services.AddHttpClient(\"READER\", c => {\n        c.BaseAddress = new Uri(\"http://fitness.read.data.com:56789\");\n        c.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n    });\n}\n```", "```cs\nnamespace FitnessApp {\n    public class FitnessRecord {\n        public string title { get; set; }\n        public string workoutType { get; set; }\n        public string comments { get; set; }\n        public DateTime workoutDate { get; set; }\n    }\n}\n```", "```cs\npublic class FitnessDataStoreClient : IDataStoreClient{\n  private readonly IHttpClientFactory _httpFactory;\n\n  public FitnessDataStoreClient(IHttpClientFactory httpFactoryInstance) {\n    _httpFactory = httpFactoryInstance;\n  }\n\n  public async Task<bool> WriteRecord(FitnessRecord newRecord) {\n    return false;\n  }\n\n  public async Task<List<FitnessRecord>> GetAllRecords() {\n    return new List<FitnessRecord>();\n  }\n\n  public async Task<List<FitnessRecord>> GetRecordsByWorkoutType(string workoutType) {\n    return new List<FitnessRecord>();\n  }\n\n  public async Task<FitnessRecord> GetRecordByTitle(string title) {\n    return new FitnessRecord();\n  }\n\n  public async Task<bool> UpdateRecord(string title, string newComment) {\n    return true;\n  }\n\n  public async Task<bool> DeleteRecord(string title) {\n    return true;\n  }\n}\n```", "```cs\npublic interface IDataStoreClient {\n  Task<bool> WriteRecord(FitnessRecord newRecord);\n  Task<List<FitnessRecord>> GetAllRecords();\n  Task<List<FitnessRecord>> GetRecordsByWorkoutType(string workoutType);\n  Task<FitnessRecord> GetRecordByTitle(string title);\n  Task<bool> UpdateRecord(string title, string newComment);\n  Task<bool> DeleteRecord(string title);\n}\n```", "```cs\nservices.AddSingleton<IDataStoreClient, FitnessDataStoreClient>();\n```", "```cs\n    [Route(\"api/[controller]\")]\n    [ApiController]\n```", "```cs\npublic class FitnessController : ControllerBase {\n    private readonly IDataStoreClient _dataStore;\n\n    public FitnessController(IDataStoreClient data) {\n        _dataStore = data;\n    }\n    ...\n}\n```", "```cs\n[HttpGet]\npublic async Task<ActionResult<IEnumerable<FitnessRecord>>> Get() {\n  return await _dataStore.GetAllRecords();\n}\n\n[HttpGet(\"{title}\")]\npublic async Task<ActionResult<FitnessRecord>> GetRecord(string title) {\n  return await _dataStore.GetRecordByTitle(title);\n}\n\n[HttpGet(\"type/{type}\")]\npublic async Task<ActionResult<IEnumerable<FitnessRecord>>> GetRecordsByType(string type) {\n  return await _dataStore.GetRecordsByWorkoutType(type);\n}\n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> NewRecord([FromBody] FitnessRecord newRecord) {\n    if (await _dataStore.WriteRecord(newRecord)) {\n        return Ok(\"new record successfully written\");\n    }\n    return StatusCode(400);\n}\n```", "```cs\n{ \"operation\": \"update\", \"property\": \"comments\", \"new_value\": \"new comments to use for record\" }\n```", "```cs\n{ \"operation\": \"append\", \"property\": \"comments\", \"suffix\": \"... and a longer string\" }\n```", "```cs\n{ \"comments\": \"New comment to update the record with\" }\n```", "```cs\n[HttpPatch(\"{title}/comments\")]\npublic async Task<IActionResult> UpdateComments(string title, [FromBody] string newComments) {\n  if (await _dataStore.UpdateRecord(title, newComments)) {\n    return Ok(\"record successfully updated\");\n  }\n  return StatusCode(400);\n}\n```", "```cs\n[HttpDelete(\"{title}\")]\npublic async Task<IActionResult> Delete(string title) {\n    if (await _dataStore.DeleteRecord(title)) {\n        return Ok(\"record successfully deleted\");\n    }\n    return StatusCode(400);\n}\n```", "```cs\nvar client = _httpFactory.CreateClient(\"READER\");\n```", "```cs\nHttpRequestMessage message = new HttpRequestMessage(HttpMethod.Get, \"/api/fitness-data\");\n\nvar response = await client.SendAsync(message);\n```", "```cs\nif (!response.IsSuccessStatusCode) {\n  return new List<FitnessRecord>();\n}\n\nvar json = await response.Content.ReadAsStringAsync();\nvar result = JsonConvert.DeserializeObject<List<FitnessRecord>>(json);\nreturn result;\n```", "```cs\npublic async Task<List<FitnessRecord>> GetAllRecords() {\n    var client = _httpFactory.CreateClient(\"READER\");\n\n    HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Get, \"/api/fitness-data\");\n\n    var response = await client.SendAsync(message);\n\n    if (!response.IsSuccessStatusCode) {\n        return new List<FitnessRecord>();\n    }\n\n    var json = await response.Content.ReadAsStringAsync();\n    var result = JsonConvert.DeserializeObject<List<FitnessRecord>>(json);\n    return result;\n}\n```", "```cs\npublic async Task<List<FitnessRecord>> GetRecordsByWorkoutType(string workoutType) {\n    var client = _httpFactory.CreateClient(\"READER\");\n\n    HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Get, $\"/api/fitness-data/type/{workoutType}\");\n\n    var response = await client.SendAsync(message);\n\n    if (!response.IsSuccessStatusCode) {\n        return new List<FitnessRecord>();\n    }\n\n    var json = await response.Content.ReadAsStringAsync();\n    var result = JsonConvert.DeserializeObject<List<FitnessRecord>>(json);\n    return result;\n}\n```", "```cs\npublic async Task<FitnessRecord> GetRecordByTitle(string title) {\n    var client = _httpFactory.CreateClient(\"READER\");\n\n    HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Get, $\"/api/fitness-data/{title}\");\n\n    var response = await client.SendAsync(message);\n\n    if (!response.IsSuccessStatusCode) {\n        return new FitnessRecord();\n    }\n\n    var json = await response.Content.ReadAsStringAsync();\n    var result = JsonConvert.DeserializeObject<FitnessRecord>(json);\n    return result;\n}\n```", "```cs\n public async Task<bool> WriteRecord(FitnessRecord newRecord) {\n  var client = _httpFactory.CreateClient(\"WRITER\");\n\n  HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Post, \"/api/fitness-data\");\n```", "```cs\nvar requestJson = JsonConvert.SerializeObject(newRecord);\nmessage.Content = new StringContent(requestJson);\n```", "```cs\npublic async Task<bool> WriteRecord(FitnessRecord newRecord) {\n    var client = _httpFactory.CreateClient(\"WRITER\");\n\n    HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Post, \"/api/fitness-data\");\n    var requestJson = JsonConvert.SerializeObject(newRecord);\n    message.Content = new StringContent(requestJson, Encoding.UTF8, \"application/json\");\n\n    var response = await client.SendAsync(message);\n    return response.IsSuccessStatusCode;\n}\n```", "```cs\npublic async Task<bool> UpdateRecord(string title, string newComment) {\n    var client = _httpFactory.CreateClient(\"WRITER\");\n\n    HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Patch, $\"/api/fitness-data/{title}/comments\");\n    message.Content = new StringContent($\"\\\"{newComment}\\\"\", Encoding.UTF8, \"application/json\");\n\n    var response = await client.SendAsync(message);\n    return response.IsSuccessStatusCode;\n}\n\npublic async Task<bool> DeleteRecord(string title) {\n    var client = _httpFactory.CreateClient(\"WRITER\");\n\n    HttpRequestMessage message = new HttpRequestMessage(HttpMethod.Delete, $\"/api/fitness-data/{title}\");\n\n    var response = await client.SendAsync(message);\n    return response.IsSuccessStatusCode;\n}\n```", "```cs\napp.UseHttpsRedirection();\n```", "```cs\nWebHost.CreateDefaultBuilder(args)\n  .ConfigureKestrel(options => {\n    options.Listen(IPAddress.Any, 8080, listenOptions => {\n      listenOptions.Protocols = HttpProtocols.Http1AndHttp2;\n      listenOptions.UseHttps(\"testcert.pfx\", \"testPassword\")\n    });\n  })\n  .UseStartup<Startup>();\n```"]