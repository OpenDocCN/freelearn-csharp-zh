- en: Back to Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归基础
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Creating a C#-based console application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基于 C# 的控制台应用程序
- en: Creating a C# class library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 C# 类库
- en: Creating a classic Windows application to use the library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个使用库的经典 Windows 应用程序
- en: Creating a WPF-based application to use the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基于 WPF 的应用程序以使用库
- en: Hello Universe – My first .NET Standard class library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hello Universe – 我第一个 .NET Standard 类库
- en: Creating a Windows console-based application to use the library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基于 Windows 控制台的程序以使用库
- en: Creating a ASP.NET Core-based web application to use the library
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基于 ASP.NET Core 的 Web 应用程序以使用库
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备 C# 的基本知识。他们还应了解如何使用 Visual Studio，使用 NuGet 安装包，以及在其他项目中引用项目中的库。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter01](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter01)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter01](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter01)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://goo.gl/PoR4HM](https://goo.gl/PoR4HM)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/PoR4HM](https://goo.gl/PoR4HM)'
- en: Introduction
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Microsoft .NET is a general-purpose development platform with support for multiple
    programming languages, which is a key feature. Other key features include asynchronous
    and concurrent programming models and native interoperability. The .NET Framework
    supports multiple programming languages, such as C#, VB.NET, and F#, which are
    actively developed and supported by Microsoft. In this book, we are going to look
    at C#.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft .NET 是一个支持多种编程语言的多用途开发平台，这是一个关键特性。其他关键特性包括异步和并发编程模型以及原生互操作性。.NET Framework
    支持多种编程语言，如 C#、VB.NET 和 F#，这些语言由 Microsoft 活跃开发和支持。在这本书中，我们将探讨 C#。
- en: 'C# is a modern, object-oriented, type-safe programming language that helps
    developers build robust, secure applications using the .NET Framework. C# was
    introduced with .NET Framework 1.0 in 2002\. Since that time, C# has evolved and
    matured. At the time of writing, the current version of C# is 7.0 and .NET has
    various flavors to use with the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: C# 是一种现代的、面向对象的、类型安全的编程语言，它帮助开发者使用 .NET Framework 构建健壮、安全的应用程序。C# 在 2002 年随着
    .NET Framework 1.0 一起推出。从那时起，C# 不断发展成熟。在撰写本文时，C# 的当前版本是 7.0，.NET 有多种风味可供使用，包括以下内容：
- en: '**.NET Framework**: The full flavor of .NET that is distributed with Windows.
    Used by developers to build ASP.NET 4.5/4.6 under Windows or desktop Windows applications.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Framework**：与 Windows 一起分发的 .NET 完整风味。由开发者用于在 Windows 下构建 ASP.NET 4.5/4.6
    或桌面 Windows 应用程序。'
- en: '**.NET Core**: Another flavor of .NET that runs under Windows, Mac, and Linux.
    Used by developers to build cross-platform .NET-based applications including cross-platform
    web applications, using ASP.NET Core.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Core**：另一种在 Windows、Mac 和 Linux 下运行的 .NET 风味。由开发者用于构建跨平台的 .NET 基础应用程序，包括跨平台的
    Web 应用程序，使用 ASP.NET Core。'
- en: '**Xamarin**: A mono-based framework used for mobile applications for iOS, Android,
    and Windows phone devices. macOS desktop applications are supported with this
    flavor.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin**：一个基于 mono 的框架，用于 iOS、Android 和 Windows Phone 设备的移动应用程序。此风味支持 macOS
    桌面应用程序。'
- en: '**.NET Standard**: A replacement for **Portable Class Libraries** (**PCL**)
    used by developers to share code among all platforms, but supported with APIs
    in the latest version, 2.0\. Also, you should note that .NET Standard 2.0 is supported
    in .NET Core 2.0, .NET Framework 4.6.1, and later versions, as well as in Visual
    Studio 2017 (version 15.3).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Standard**：用于开发者之间在所有平台上共享代码的 **Portable Class Libraries**（PCL）的替代品，但在最新版本
    2.0 中支持 API。此外，请注意，.NET Standard 2.0 在 .NET Core 2.0、.NET Framework 4.6.1 及更高版本以及
    Visual Studio 2017（版本 15.3）中得到支持。'
- en: Creating a C#-based console application
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基于 C# 的控制台应用程序
- en: Let's get started with a simple C#-based console application. This console application
    will introduce some basic C# code and get things up and running for the library
    we are going to build in the next recipe. Our main focus is to get to the C# coding
    and prepare ourselves for all the excitement we are going to have later.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的基于C#的控制台应用程序开始。这个控制台应用程序将介绍一些基本的C#代码，并为我们在下一道菜谱中要构建的库做好准备。我们的主要重点是进入C#编码，并为我们将要经历的兴奋做好准备。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need a running copy of Visual Studio 2017
    with the latest version of .NET Framework. If you don't have a copy of Visual
    Studio 2017, you can download it from [https://www.visualstudio.com/](https://www.visualstudio.com/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要逐步执行此菜谱，您需要一个运行中的Visual Studio 2017副本以及.NET Framework的最新版本。如果您没有Visual Studio
    2017的副本，您可以从中下载[https://www.visualstudio.com/](https://www.visualstudio.com/)。
- en: This will take you to Microsoft's Visual Studio website. Follow the instructions
    on the site to get a copy of Visual Studio and get things started.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您到微软的Visual Studio网站。按照网站上的说明获取Visual Studio的副本并开始操作。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: 'Click File | New | Project  and, in the New Project template dialog box, select
    Visual C# in the left-hand pane and Console App (.NET Framework) in the right-hand
    pane:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目，然后在新建项目模板对话框中，在左侧面板中选择Visual C#，在右侧面板中选择控制台应用程序 (.NET Framework)：
- en: '![](img/2a15fddd-58fa-41b7-a100-dc0f6bc39ead.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a15fddd-58fa-41b7-a100-dc0f6bc39ead.png)'
- en: 'In the Name: text box, type a name for your application. In this case, type
    `HelloCSharp`. Select a preferred location in the Location: drop-down list or
    click the Browse... button and select a location. Leave the defaults as they are:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称：文本框中，为您的应用程序输入一个名称。在本例中，输入`HelloCSharp`。在位置：下拉列表中选择一个首选位置或点击浏览...按钮选择一个位置。保留默认设置：
- en: '![](img/3701bbaa-a33b-4f50-b730-97b78648a41f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3701bbaa-a33b-4f50-b730-97b78648a41f.png)'
- en: Now Click OK.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击确定。
- en: You will be presented with a default code template for a C# console application.
    Let's hit *F5* to give it a test run. If everything is fine, a console will pop
    up and close.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个默认的C#控制台应用程序代码模板。让我们按*F5*来测试运行。如果一切正常，一个控制台窗口将弹出并关闭。
- en: 'At the end of the `Main` method, type the following code snippet:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法的末尾，输入以下代码片段：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, inside your `Main` method, type the code that calls the previous method
    we just created:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您的`Main`方法中，输入调用我们刚刚创建的先前方法的代码：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we have written our first C# code. The code of the console app should look
    like the following after you are done coding:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经编写了我们的第一个C#代码。完成编码后，控制台应用程序的代码应该看起来像以下这样：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s hit *F5* and test the application. If everything is OK, you should see
    the following screen. Press *Enter *to exit:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按*F5*测试应用程序。如果一切正常，你应该会看到以下屏幕。按*Enter*键退出：
- en: '![](img/2687305b-c0d6-467f-b78c-cdfe06d75dbc.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2687305b-c0d6-467f-b78c-cdfe06d75dbc.png)'
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let us take a quick look at what we did in the previous recipe. In steps 1 to
    4, we created a C#-based console application. The skeleton for a console application
    already comes with Visual Studio as a template. Giving a proper name to your project
    and a location is a good habit. These things will help you to track down your
    project easily for future use. In step 5, we just make sure the default console
    application template works fine and that there are no surprises waiting for us
    before doing any actual coding.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下上一道菜谱中我们做了什么。在第1步到第4步中，我们创建了一个基于C#的控制台应用程序。控制台应用程序的骨架已经作为模板包含在Visual
    Studio中。为您的项目命名并指定位置是一个好习惯。这些事情将帮助您轻松追踪项目以便将来使用。在第5步中，我们只是确保默认的控制台应用程序模板运行正常，并且在实际编码之前没有出现任何意外。
- en: In step 6, we created a static method that takes a `string` parameter and returns
    a message with that parameter; this is called **String Interpolation**. It's a
    new feature introduced in C# 6.0 and can be used instead of the traditional `string.format()`
    method. Step 7 uses that method inside the main method. As in a normal console
    application, `Console.ReadLine()` will wait till any key is pressed before exiting.
    Finally, in step 9, we debug the code to check that everything works fine and
    as expected.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6步中，我们创建了一个接受`string`参数并返回带有该参数的消息的静态方法；这被称为**字符串插值**。这是C# 6.0中引入的新功能，可以用作传统`string.format()`方法的替代。第7步在主方法中使用该方法。在正常的控制台应用程序中，`Console.ReadLine()`将等待按下任何键后才退出。最后，在第9步中，我们调试代码以检查一切是否按预期正常工作。
- en: See also
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: C# fundamentals  ([Chapter 2](b314c115-b9be-49b2-9826-8f78b3fcc8a6.xhtml), *Primitives,
    Collections, LINQ, and More*)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#基础知识  ([第2章](b314c115-b9be-49b2-9826-8f78b3fcc8a6.xhtml)，*原始类型、集合、LINQ等*)
- en: Creating Windows-based applications using C# (Creating a classic Windows-based
    application to use the Library—[Chapter 1](c123d601-050b-4a65-bd1b-719915e42c77.xhtml),
    *Back to Basics*)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用C#创建基于Windows的应用程序（创建一个经典基于Windows的应用程序以使用库——[第1章](c123d601-050b-4a65-bd1b-719915e42c77.xhtml)，*回到基础*)
- en: Creating a C# class library
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个C#类库
- en: In this recipe, we are going to build a simple C# class library. This library
    will have a simple public method that takes a parameter and returns a string.
    Also, we will be creating a blank Visual Studio solution and adding the library
    project. This solution will be used in later recipes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将构建一个简单的C#类库。这个库将有一个简单的公共方法，该方法接受一个参数并返回一个字符串。我们还将创建一个空白的Visual Studio解决方案并添加库项目。这个解决方案将在后面的菜谱中使用。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have installed a flavor of Visual Studio 2017 and its latest updates.
    At the time of writing, the latest Visual Studio 2017 version is 15.3.5.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经安装了Visual Studio 2017及其最新更新。在撰写本文时，最新的Visual Studio 2017版本是15.3.5。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open Visual Studio 2017.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: 'Click File | New | Project and, in the New Project template dialog box, select
    Visual Studio Solutions under the Other Project Types node in the left-hand pane,
    and select Blank Solution in the right-hand pane:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”，在“新建项目”模板对话框中，在左侧面板的“其他项目类型”节点下选择Visual Studio解决方案，在右侧面板中选择空白解决方案：
- en: '![](img/4620e531-f162-460a-9a2c-0795ab6c90ae.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4620e531-f162-460a-9a2c-0795ab6c90ae.png)'
- en: 'In the Name: textbox, type a name for your application. In this case, type `Chapter1.Library`.
    Select a preferred location under the Location: drop-down list or click the Browse... button
    and select a location. Leave the defaults as they are:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，为你的应用程序输入一个名称。在这个例子中，输入`Chapter1.Library`。在“位置：”下拉列表中选择一个首选位置，或者点击“浏览...”按钮并选择一个位置。保留默认设置：
- en: '![](img/67bf27d2-1d2a-4dfc-8bba-0b644df81f44.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/67bf27d2-1d2a-4dfc-8bba-0b644df81f44.png)'
- en: Now you have a blank solution. Let's add a C# class library project to the solution.
    Click Project | Add New Item... or you can right-click on the `Chapter1.Library`
    solution label in the Solution Explorer, and select Add | New Project....
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你有一个空白解决方案。让我们向解决方案中添加一个C#类库项目。点击“项目”|“添加新项...”，或者你可以在解决方案资源管理器中右键单击`Chapter1.Library`解决方案标签，然后选择“添加”|“新项目....”
- en: 'In the Add New Project template dialog box, select Visual C# in the left side,
    pane and select Class Library (.NET Framework) in the right-hand pane:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，在左侧面板中选择Visual C#，在右侧面板中选择类库(.NET Framework)：
- en: '![](img/0b385330-0683-4b7f-9d44-19827772025d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0b385330-0683-4b7f-9d44-19827772025d.png)'
- en: 'In the Name: textbox, type a name for your class library. In this case, type
    `Chapter1.Library.HelloLib` as the name of the project. Leave the current location
    under the Location: drop-down list and click OK to create the project:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，为你的类库输入一个名称。在这个例子中，将项目名称输入为`Chapter1.Library.HelloLib`。在“位置：”下拉列表中保留当前位置，然后点击“确定”以创建项目：
- en: '![](img/23975efa-4664-4f6f-9d83-34383f271c20.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/23975efa-4664-4f6f-9d83-34383f271c20.png)'
- en: 'Now we have a brand new .NET Framework-based class library. In the Solution
    Explorer (press *Ctrl* + *Alt* + *L* if you don''t see the Solution Explorer),
    the default structure should look like this:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个全新的基于.NET Framework的类库。在解决方案资源管理器中（如果你看不到解决方案资源管理器，请按*Ctrl* + *Alt* +
    *L*），默认结构应该如下所示：
- en: '![](img/0ed371c3-af50-4983-b5ce-80439d7828ea.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0ed371c3-af50-4983-b5ce-80439d7828ea.png)'
- en: Now we have a default template for a class library project. Let's rename `Class1.cs` to
    something more meaningful. Rename it `HelloWorld.cs`. You can simply soft click
    on the label of the file in the Solution Explorer and type the new name (or click
    on the filename label and press *F2*). Click Yes in the confirmation box to confirm
    the renaming.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个类库项目的默认模板。让我们将`Class1.cs`重命名为更有意义的东西。将其重命名为`HelloWorld.cs`。你可以在解决方案资源管理器中简单地点击文件的标签并输入新名称（或单击文件名标签并按*F2*）。在确认框中点击“是”以确认重命名。
- en: 'Type the following code snippet in the `HelloWorld` class body:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HelloWorld`类体中输入以下代码片段：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's build our code to check that everything is fine. Click Build | Build Solution,
    or press *Ctrl* + *Shift* + *B*, and the solution should build successfully. Let's
    test our class library in the next recipe.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们构建我们的代码以检查一切是否正常。点击“生成”|“生成解决方案”，或者按*Ctrl* + *Shift* + *B*，解决方案应该成功构建。让我们在下一个菜谱中测试我们的类库。
- en: Click File | Save All, or press *Ctrl* + *Shift* + *S*, to save the solution
    and the class library project.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 文件 | 保存所有，或者按 *Ctrl* + *Shift* + *S*，以保存解决方案和类库项目。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's see what we have done so far in this recipe and how it works. In steps
    1 to 3, you have created a blank solution. Blank solutions are a very good starting
    point for any size of project. It gives you a whole new solution to start with.
    Later on, you can add more bits and pieces to your solution. Even though this
    is a simple introduction to class libraries, it is good practice to stick with
    proper naming conventions. It's not a must, but good practice. As you can see,
    we have given a name `Chapter1.Library`, so the name is meaningful and it says
    what our solution is about.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在这个菜谱中我们已经做了什么以及它是如何工作的。在步骤 1 到 3 中，你创建了一个空白解决方案。空白解决方案是任何大小项目的非常好的起点。它为你提供了一个全新的解决方案来开始。稍后，你可以向解决方案中添加更多内容。尽管这是一个关于类库的简单介绍，但坚持使用正确的命名约定是一个好习惯。这不是必须的，但这是一个好习惯。正如你所看到的，我们给了一个名字
    `Chapter1.Library`，所以这个名字是有意义的，它说明了我们的解决方案是关于什么的。
- en: In the next steps, from 4 to 8, we have added a class library project to our
    blank solution. Now you have an idea how a solution will grow over time, from
    start to end. The template we have chosen is a full .NET Framework class library.
    We renamed the default `Class1.cs` template provided by Visual Studio. It's good
    practice to give a meaningful name to classes and the files we work with.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤 4 到 8 中，我们向空白解决方案中添加了一个类库项目。现在你有一个关于解决方案如何随着时间的推移从开始到结束逐渐成长的概念。我们选择的模板是一个完整的
    .NET Framework 类库。我们将 Visual Studio 提供的默认 `Class1.cs` 模板重命名了。给类和文件起一个有意义的名字是一个好习惯。
- en: In steps 9 and 10, we added code to our class and checked all the syntax was
    correct by building the solution. It is also good practice to check for typos
    and other errors in syntax once in a while.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 9 和 10 中，我们向我们的类中添加了代码，并通过构建解决方案来检查所有语法是否正确。偶尔检查语法中的错别字和其他错误也是一个好习惯。
- en: Creating a classic Windows-based application to use the library
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基于 Windows 的经典应用程序以使用库
- en: So far, from the previous recipe, we have created a blank solution and a class
    library that uses the full .NET Framework. In this recipe, let's create a classic
    Windows Forms application that uses the class library created in the previous
    recipe. We are going to build a Windows form that takes a name using a text box
    and a button, and that triggers the public method we have created in the class
    library.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，从上一个菜谱中，我们已经创建了一个空白解决方案和一个使用完整 .NET Framework 的类库。在这个菜谱中，让我们创建一个经典的 Windows
    Forms 应用程序，它使用上一个菜谱中创建的类库。我们将构建一个 Windows 表单，它使用文本框和按钮获取一个名称，并触发我们在类库中创建的公共方法。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will require the solution and the class you built in the
    previous recipe. Open Visual Studio 2017 and prepare for the project. Click Build | Build
    Solution, or press *Ctrl* + *Shift* + *B*, and the solution should build successfully.
    Everything's ready for testing our class library.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，你需要前一个菜谱中构建的解决方案和类。打开 Visual Studio 2017 并为项目做准备。 点击 构建 | 构建解决方案，或者按 *Ctrl*
    + *Shift* + *B*，解决方案应该成功构建。一切准备就绪，可以测试我们的类库。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now open the solution from the previous recipe. Click File | Open | Project/Solution,
    or press *Ctrl* + *Shift* + *O*, and select the `Chapter1.Library` solution.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个菜谱中的解决方案。点击 文件 | 打开 | 项目/解决方案，或者按 *Ctrl* + *Shift* + *O*，并选择 `Chapter1.Library`
    解决方案。
- en: Now click on the `Chapter1.Library` solution label. Click File | Add | New Project....
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 `Chapter1.Library` 解决方案标签。点击 文件 | 添加 | 新项目...
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 添加新项目模板对话框中，展开左侧窗格中的 Visual C# 节点。
- en: 'Select Windows Classic Desktop and select Windows Forms App (.NET Framework)
    in the right template pane:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Windows 经典桌面，并在右侧模板窗格中选择 Windows Forms App (.NET Framework)：
- en: '![](img/14bfcadb-58c4-4f98-a01a-b2ba4b3f2986.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14bfcadb-58c4-4f98-a01a-b2ba4b3f2986.png)'
- en: 'Now, in the Name: textbox, type a name for the new project. Let''s type `Chapter1.Library.HelloWindowsForms` and
    leave the Location: textbox as it is and the defaults as well. Click OK to create
    the new project.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 名称：文本框中，为新的项目输入一个名称。让我们输入 `Chapter1.Library.HelloWindowsForms` 并保持 位置：文本框不变以及默认设置。点击
    确定 创建新项目。
- en: '![](img/eb1ed34e-4d78-478e-b2ba-d8e2b780cf93.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb1ed34e-4d78-478e-b2ba-d8e2b780cf93.png)'
- en: 'The new project will be added to the Solution Explorer and it should look like
    this:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新项目将被添加到解决方案资源管理器中，它应该看起来像这样：
- en: '![](img/b9173688-c125-43dd-b7b7-1b8d41ea7c4e.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9173688-c125-43dd-b7b7-1b8d41ea7c4e.png)'
- en: Now let's do some cleaning of the names. Change `Form1.cs` to `MainForm.cs`.
    Remember, giving a meaningful name to your files is very important and a very
    good practice.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们对名称进行一些清理。将`Form1.cs`更改为`MainForm.cs`。记住，给你的文件起一个有意义的名称非常重要，并且是一种非常好的实践。
- en: Select the Form in the MainForm [Design] tab and go to the Properties window
    (or press *F4*). Now change the Text property to `Hello World`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“MainForm [设计]”选项卡中选择表单，并转到属性窗口（或按*F4*）。现在将文本属性更改为`Hello World`。
- en: 'Let''s add some UI components to the form. Go to the tool box window (or press
    *Ctrl* + *Alt* + *X* ) and drag and drop a Label, a TextBox, and a Button to the
    form. Arrange them as per the following screenshot:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在窗体中添加一些UI组件。转到工具箱窗口（或按*Ctrl* + *Alt* + *X*），并将一个标签、一个文本框和一个按钮拖放到窗体上。按照以下截图进行排列：
- en: '![](img/b5f3575d-acae-49aa-89c0-ac060840419c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5f3575d-acae-49aa-89c0-ac060840419c.png)'
- en: 'Let''s change some properties of the components we just dropped on the form.
    Go to the Properties window and change the defaults to the following:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更改刚刚添加到窗体上的组件的一些属性。转到属性窗口，并将默认值更改为以下内容：
- en: '| **Component** | **Property** | **Value** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **属性** | **值** |'
- en: '| Label | Name | `NameLabel` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 名称 | `NameLabel` |'
- en: '| Label | Text | `Type your name` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 文本 | `输入您的姓名` |'
- en: '| TextBox | Name | `NameTextBox` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 文本框 | 名称 | `NameTextBox` |'
- en: '| Button | Name | `HelloButton` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 名称 | `HelloButton` |'
- en: '| Button | Text | `Say Hello` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 按钮 | 文本 | `问候` |'
- en: 'After the changes, the Windows form designer should look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 变更之后，Windows窗体设计器应该看起来像这样：
- en: '![](img/a38f4d45-5168-442c-9194-bfd3f23359f0.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a38f4d45-5168-442c-9194-bfd3f23359f0.png)'
- en: Let's add our library to the Windows Forms project. To do this, expand References
    under the `Chaper1.Library.HelloWindowsForms` project. Right-click on the References
    label and select Add Reference....
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将我们的库添加到Windows窗体项目中。为此，展开“Chaper1.Library.HelloWindowsForms”项目下的“引用”。右键单击“引用”标签，然后选择“添加引用……”。
- en: 'Under the Reference Manager dialog box, click on the Projects label in the
    left-hand pane. In the middle pane, check the `Chapter1.Library.HelloLib` project:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“引用管理器”对话框中，点击左侧窗格中的“项目”标签。在中间窗格中，选中`Chapter1.Library.HelloLib`项目：
- en: '![](img/d8822cef-f3e1-4800-9b11-486c1833aea3.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8822cef-f3e1-4800-9b11-486c1833aea3.png)'
- en: Click OK.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now double-click on the Say Hello button to open the code window.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在双击“问候”按钮以打开代码窗口。
- en: 'In the code window, scroll to the top and type the following code, at the end
    of  the very last line of `using` directive:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，滚动到顶部并在`using`指令的最后一行之后输入以下代码：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now scroll down to the `HelloButton_Click` method. In between the curly brackets,
    type the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在滚动到`HelloButton_Click`方法。在大括号之间，输入以下代码：
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Time to test our classic Windows application with the class library created
    in the previous recipe. Hit *F5* to debug the code. Now you should see the Windows
    form created.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候测试我们用之前菜谱中创建的类库构建的经典Windows应用程序了。按*F5*调试代码。现在你应该能看到创建的Windows窗体。
- en: 'Type your name in the text box and hit the Say Hello button. A message box
    will appear with a message from the class library:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入您的姓名，然后点击“问候”按钮。将出现一个消息框，显示来自类库的消息：
- en: '![](img/b46ee683-bc60-4e33-a07f-7cbcb82a919c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b46ee683-bc60-4e33-a07f-7cbcb82a919c.png)'
- en: Congratulations!!! You have just used a class library from a classic Windows
    application.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜！！！您刚刚使用了一个来自经典Windows应用程序的类库。
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you have a closer look at the recipe we just completed, we have used a solution
    created from a previous recipe. In a real-world application, this is a day-to-day
    process. From steps 1 to 7, we opened an existing solution that contained the
    class library from the previous recipe and added a Classic Windows Forms application
    to the solution.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看看我们刚刚完成的菜谱，我们使用了一个从之前的菜谱创建的解决方案。在实际应用中，这是一个日常过程。从步骤1到7，我们打开了一个包含之前菜谱中类库的现有解决方案，并将经典Windows窗体应用程序添加到该解决方案中。
- en: In steps 8 to 11, we prepared the Windows Form projects. Proper naming of the
    components and files is good practice. Even though this is a small application,
    proper naming is a good discipline. Steps 12 to 14 are the most important steps
    in this recipe. In these steps, we have added our class library to the Windows
    project as a reference. Now you can access all the public methods given by the
    class library from your Windows application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 8 到 11 中，我们准备了 Windows 表单项目。为组件和文件命名得当是良好的实践。即使这是一个小型应用程序，良好的命名也是一项良好的纪律。步骤
    12 到 14 是本食谱中最重要的步骤。在这些步骤中，我们将我们的类库添加到 Windows 项目中作为引用。现在你可以从你的 Windows 应用程序中访问类库提供的所有公共方法。
- en: In steps 15 to 17, we have added code to the button click event of `HelloButton`.
    Double-clicking on a component will get you to the C# code of the Windows form.
    Visual Studio will generate the code for you. In this case, it's the button click
    event. The default event of a component will vary depending on the component you
    have selected. In step 17, we created a variable to hold the instance of the `HelloWorld`
    class from the class library created. Then, we created another variable to hold
    the user input to the text box. The last line of code will call the `HelloWorld.SayHello(string
    name)` method with the string parameter supplied from the variable created in
    the previous line of code. Finally, a default message box will display the `string`
    returned from the `SayHello(string name)` method from the `HelloWorld` class.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 15 到 17 中，我们向 `HelloButton` 的按钮点击事件中添加了代码。双击组件将带你到 Windows 表单的 C# 代码。Visual
    Studio 将为你生成代码。在这种情况下，是按钮点击事件。组件的默认事件将根据你选择的组件而变化。在步骤 17 中，我们创建了一个变量来保存类库中 `HelloWorld`
    类的实例。然后，我们创建另一个变量来保存文本框的用户输入。代码的最后一行将使用上一行代码中创建的变量提供的字符串参数调用 `HelloWorld.SayHello(string
    name)` 方法。最后，一个默认的消息框将显示 `HelloWorld` 类的 `SayHello(string name)` 方法返回的 `string`。
- en: Step 19 will execute the default project, in this case, our Windows-based application.
    Sometimes, if the class library project is selected as the default project, Visual
    Studio will complain that you cannot execute this sort of project. So make sure
    you have selected the Windows project as the default startup project.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 19 将执行默认项目，在本例中，我们的基于 Windows 的应用程序。有时，如果类库项目被选为默认项目，Visual Studio 将会抱怨你无法执行此类项目。所以请确保你已经选择了
    Windows 项目作为默认启动项目。
- en: Creating a WPF-based application to use the library
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基于 WPF 的应用程序以使用库
- en: Now, in this recipe, let's add a **Windows Presentation Foundation** (**WPF**)-based
    application to the solution and use the class library created in a previous recipe.
    WPF is the shortened name for Windows Presentation Foundation. The purpose of
    this recipe is to demonstrate how to share a library within the different .NET-based
    applications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这个食谱中，让我们向解决方案添加一个基于 **Windows Presentation Foundation** (**WPF**) 的应用程序，并使用之前食谱中创建的类库。WPF
    是 Windows Presentation Foundation 的缩写。本食谱的目的是演示如何在不同的 .NET 基于的应用程序之间共享库。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will require the solution and the class library you built
    in the previous recipe. Open Visual Studio 2017 and prepare for the project. Click Build | Build
    Solution, or press *Ctrl* + *Shift* + *B*, and the solution should build successfully.
    Everything's ready for testing our class library.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，你需要使用之前食谱中构建的解决方案和类库。打开 Visual Studio 2017 并准备项目。点击 Build | Build Solution，或者按
    *Ctrl* + *Shift* + *B*，解决方案应该能够成功构建。一切准备就绪，可以测试我们的类库。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做这件事...
- en: Open Visual Studio 2017.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution,
    or press *Ctrl* + *Shift* + *O*, and select the `Chapter1.Library` solution.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开之前食谱中的解决方案。点击 File | Open | Open Project/Solution，或者按 *Ctrl* + *Shift* +
    *O*，并选择 `Chapter1.Library` 解决方案。
- en: Now click on the `Chapter1.Library` solution label. Click File | Add | New Project.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 `Chapter1.Library` 解决方案标签。点击 File | Add | New Project。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的 Visual C# 节点。
- en: Select Windows Classic Desktop and select WPF App (.NET Framework) in the right
    template pane.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Windows Classic Desktop，并在右侧模板窗格中选择 WPF App (.NET Framework)。
- en: '![](img/c6f7bf2c-738a-458c-bfd8-1eee6d9e88e4.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c6f7bf2c-738a-458c-bfd8-1eee6d9e88e4.png)'
- en: Now, in the Name: text box, type a name for the new project. Let's type `Chapter1.Library.HelloWPF` and
    leave the Location: as it is and the defaults as well. Click OK to create the
    new project.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 名称：文本框中，为新项目输入一个名称。让我们输入 `Chapter1.Library.HelloWPF` 并保持 位置：不变以及默认设置。点击 确定 以创建新项目。
- en: '![](img/c511bf42-140c-4c68-affc-1c44f196562e.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c511bf42-140c-4c68-affc-1c44f196562e.png)'
- en: 'Now the Solution Explorer (if it''s not visible, press *Ctrl + Alt + L*) should
    look like this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（如果不可见，请按 *Ctrl + Alt + L*）应该看起来像这样：
- en: '![](img/ca220998-2682-4430-b3fc-2cbc15ef7869.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca220998-2682-4430-b3fc-2cbc15ef7869.png)'
- en: Now click on the `MainWindow.xaml` tab and make sure you are in the Design mode.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 `MainWindow.xaml` 选项卡并确保您处于设计模式。
- en: Now, drag and drop a Button and a TextBlock from the tool box (to view the tool
    box, press *Ctrl* + *Alt* + *X*). You can find these components under Common WPF
    Controls.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从工具箱（要查看工具箱，请按 *Ctrl* + *Alt* + *X*）拖放一个按钮和一个文本块。您可以在 公共 WPF 控件 下找到这些组件。
- en: 'The main window should look like this:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主窗口应该看起来像这样：
- en: '![](img/193bfeb4-1514-445c-84b1-fa2c2f9be117.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/193bfeb4-1514-445c-84b1-fa2c2f9be117.png)'
- en: 'Let''s name our controls and change some properties as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们命名我们的控件并更改一些属性如下：
- en: '| **Control** | **Property** | **Value** |'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **控件** | **属性** | **值** |'
- en: '| TextBlock | Name | `MessageLabel` |'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本块 | 名称 | `消息标签` |'
- en: '| TextBlock | Layout &#124; Width | `498` |'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本块 | 布局 &#124; 宽度 | `498` |'
- en: '| TextBlock | Layout &#124; Height | `93` |'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本块 | 布局 &#124; 高度 | `93` |'
- en: '| TextBlock | Text &#124; Font | `Bold` |'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本块 | 文本 &#124; 字体 | `粗体` |'
- en: '| TextBlock | Text &#124; Font | `Size 14` |'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本块 | 文本 &#124; 字体 | `大小 14` |'
- en: '| TextBlock | Common &#124; Text | `Press the button to see the message` |'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本块 | 公共 &#124; 文本 | `按按钮查看消息` |'
- en: '| Button | Name | `HelloButton` |'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 名称 | `HelloButton` |'
- en: '| Button | Layout &#124; Width | `276` |'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 布局 &#124; 宽度 | `276` |'
- en: '| Button | Layout &#124; Height | `60` |'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 布局 &#124; 高度 | `60` |'
- en: '| Button | Common &#124; Content | `Say Hello` |'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 公共 &#124; 内容 | `说你好` |'
- en: Let's add our class library as a reference to the WPF project we have just created.
    Expand the `Chapter1.Library.HelloWPF` project node and expand the References node
    in the Solution Explorer (if you don't see the Solution Explorer press *Ctrl*
    + *Alt* + *L*).
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将我们的类库作为引用添加到我们刚刚创建的WPF项目中。展开 `Chapter1.Library.HelloWPF` 项目节点，并在解决方案资源管理器中展开 引用 节点（如果您看不到解决方案资源管理器，请按 *Ctrl*
    + *Alt* + *L*）。
- en: Right-click on the References label and select Add Reference....
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 引用 标签并选择添加引用....。
- en: 'Under the Reference Manager dialog box, click on the Projects label in the
    left-hand pane. In the middle pane, check the `Chapter1.Library.HelloLib` project:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 引用管理器 对话框中，在左侧窗格中单击 项目 标签。在中窗格中，选中 `Chapter1.Library.HelloLib` 项目：
- en: '![](img/ea9114d3-555d-4dd3-8787-e06cc64bc14c.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea9114d3-555d-4dd3-8787-e06cc64bc14c.png)'
- en: Click OK.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: In the `MainWindow.xaml` tab, double-click on the `SayHello` button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainWindow.xaml` 选项卡中，双击 `SayHello` 按钮。
- en: 'In the `MainWindow.xamal.cs` tab, scroll up till you see the `using` code block.
    Add this code as the last line of the `using` code block:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainWindow.xamal.cs` 选项卡中，向上滚动直到看到 `using` 代码块。将此代码作为 `using` 代码块的最后一行添加：
- en: '[PRE6]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now scroll down till you reach the `HelloButton_Click` method. Type the following
    code block in between the curly brackets of the `HelloButton_Click` method:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向下滚动直到到达 `HelloButton_Click` 方法。在 `HelloButton_Click` 方法的括号中输入以下代码块：
- en: '[PRE7]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we are ready to test. Press *F5* to debug our code:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备测试。按 *F5* 调试我们的代码：
- en: '![](img/936f3bda-3c1b-4bd7-9088-0ba9dcac140e.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/936f3bda-3c1b-4bd7-9088-0ba9dcac140e.png)'
- en: 'Click on the Say Hello button to see the message from the class library:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 说你好 按钮以查看来自类库的消息：
- en: '![](img/608efc49-5d61-47a0-918c-87febd29a26c.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/608efc49-5d61-47a0-918c-87febd29a26c.png)'
- en: Congratulations!!! You have just used a library created with a WPF application.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜！！！您刚刚使用了一个用WPF应用程序创建的库。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's have a look at the bits and pieces and how they are bound together. From
    steps 1 to 7, we have opened an existing solution and added a WPF project to that
    solution. In steps 8 to 10, we added a control to the WPF main form, from the
    toolbox. Since this is a WPF application, we went through an additional element;
    setting up the UI. In step 11, we have set up the UI elements using the properties
    window.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些片段以及它们是如何结合在一起的。从步骤 1 到 7，我们打开了一个现有解决方案并添加了一个WPF项目到该解决方案中。在步骤 8 到 10
    中，我们从工具箱中添加了一个控件到WPF主窗体。由于这是一个WPF应用程序，我们通过一个额外的元素；设置UI。在步骤 11 中，我们使用属性窗口设置了UI元素。
- en: In steps 12 to 15, we added a reference to the WPF project. Referencing the
    library we have created is the most important part. Without referencing, the WPF
    project is totally unaware of the library.  After referencing the library only,
    it will available to the WPF project. Step 17 tells the compiler to use the namespace
    of the library. Now we don't have to call the full namespace of the class inside
    the library. In step 18, we created a simple variable and stored a name. The next
    line creates an instance of the `HelloWorld` class inside the library. Finally,
    we used the Text property of the WPF TextBlock control to store the value from
    the `SayHello(string name)` method.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤12到15中，我们添加了对WPF项目的引用。引用我们创建的库是最重要的部分。没有引用，WPF项目对库一无所知。仅引用库后，它将可供WPF项目使用。步骤17告诉编译器使用库的命名空间。现在我们不需要在库内部调用类的完整命名空间。在步骤18中，我们创建了一个简单的变量并存储了一个名称。下一行在库内部创建了一个`HelloWorld`类的实例。最后，我们使用WPF
    TextBlock控制的Text属性来存储从`SayHello(string name)`方法中获取的值。
- en: In the final steps – 19 to 20, we have executed the code and tested it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后几步 – 19到20中，我们执行了代码并进行了测试。
- en: Hello Universe – My first .NET Standard class library
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello Universe – 我的第一个.NET Standard类库
- en: Now it's time to move on and take a look at the Microsoft .NET Standard. In
    this recipe, we will be looking at version 2.0 of the .NET Standard library. At
    the start, we will be building a small .NET Standard class library and using it
    with different .NET-based applications.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候继续前进，看看Microsoft .NET Standard了。在这个菜谱中，我们将查看.NET Standard库的2.0版本。一开始，我们将构建一个小型的.NET
    Standard类库，并使用它与不同的.NET应用程序。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's make sure we have downloaded and installed one of the flavors of Visual
    Studio 2017\. If you are running on Windows, you have the option of choosing Visual
    Studio 2017 Community Edition, Professional Edition, or Enterprise Edition. If
    you are running on a mac, you have the choice of Visual Studio 2017 for macOS.
    Also, Visual Studio Code is available for all Windows, Mac, and Linux platforms.
    Visit [http://www.visualstudio.com](http://www.visualstudio.com) and follow the
    instructions to download the Visual Studio of your choosing.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保我们已经下载并安装了Visual Studio 2017的一个版本。如果您在Windows上运行，您可以选择Visual Studio 2017社区版、专业版或企业版。如果您在mac上运行，您可以选择Visual
    Studio 2017 for macOS。此外，Visual Studio Code适用于所有Windows、Mac和Linux平台。访问[http://www.visualstudio.com](http://www.visualstudio.com)并按照说明下载您选择的Visual
    Studio。
- en: In the next step, we will be required to download and install .NET Core 2.0\.
    Again, simply visit [http://www.dot.net/core](http://www.dot.net/core) and download
    the latest version, in this case, version 2.0 of .NET Core. The site has a very
    simple and informative set of instructions on how to install .NET Core 2.0 on
    your system.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将需要下载并安装.NET Core 2.0。再次提醒，只需访问[http://www.dot.net/core](http://www.dot.net/core)并下载最新版本，在这种情况下，是.NET
    Core的2.0版本。该网站提供了一套非常简单且信息丰富的说明，指导如何在您的系统上安装.NET Core 2.0。
- en: '![](img/09cf52f5-d238-48e2-9798-2776bba74533.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09cf52f5-d238-48e2-9798-2776bba74533.png)'
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Project.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目。
- en: 'Now, in the New Project dialog box, expand the Visual C# node in the left-hand
    pane and select Class Library .NET Standard, and in the right-hand pane, select
    Class Library (.NET Standard):'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在新项目对话框中，展开左侧窗格中的Visual C#节点，并选择.NET Standard类库，在右侧窗格中，选择.NET Standard类库：
- en: '![](img/23128d3d-7844-42d4-b69c-f6232748f0b1.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23128d3d-7844-42d4-b69c-f6232748f0b1.png)'
- en: 'In the Name: text box, type a name for your class library. Let''s type `Chapter1.StandardLib.HelloUniverse` and
    select a preferred location under the Location: drop-down list, or click the Browse...
    button and select a location. Leave the defaults as they are. Finally, in the
    Solution name: text box, type `Chapter1.StandardLib`.'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称：文本框中，为您的类库输入一个名称。让我们输入`Chapter1.StandardLib.HelloUniverse`，并在位置：下拉列表中选择一个首选位置，或者点击浏览...按钮并选择一个位置。保留默认设置。最后，在解决方案名称：文本框中，输入`Chapter1.StandardLib`。
- en: '![](img/0d84c557-ae40-4ede-9940-db2eb594926b.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d84c557-ae40-4ede-9940-db2eb594926b.png)'
- en: Click OK.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: In the Solution Explorer (press *Ctrl* + *Alt* + *L*) , click on Class1.cs,
    press *F2,* and rename it `HelloUniverse.cs`. Confirm the renaming by selecting
    Yes in the confirmation box.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器（按*Ctrl* + *Alt* + *L*），点击Class1.cs，按*F2*，将其重命名为`HelloUniverse.cs`。通过在确认框中选择是来确认重命名。
- en: Change the namespace from `Chapter1.StandardLib.HelloUniverse` to `Chapter1.StandardLib`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将命名空间从`Chapter1.StandardLib.HelloUniverse`更改为`Chapter1.StandardLib`。
- en: 'Now, in between the curly brackets of the `HelloUniverse` class, type the following
    code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`HelloUniverse`类的花括号内，输入以下代码：
- en: '[PRE8]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Press *Ctrl* + *S* to save the changes and press *Ctrl* + *Shift* + *B* to build
    the code. If the build completes without any errors, we are good to go with the
    next recipe on how to use this class library.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *S*保存更改，然后按*Ctrl* + *Shift* + *B*构建代码。如果构建没有错误完成，我们就可以进行下一个菜谱，了解如何使用这个类库。
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: .NET Standard 2.0 is the latest release of its kind. .NET Standard is all about
    sharing code. Unlike .NET Framework class libraries, .NET Standard class library
    code can be shared across almost all of the .NET ecosystem. The latest version
    of .NET Standard is 2.0\. At the time of writing, it can be shared across NET
    Framework 4.6.1, .NET Core 2.0, Mono 5.4, Xamarin.iOS 10.14, Xamarin.Mac 3.8,
    Xamarin.Android 7.5, and the upcoming version of **Universal Windows Platform** (**UWP**).
    It also replaces **Portable Class Libraries** (**PCLs**) as the tool for building
    .NET libraries that work everywhere.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard 2.0是其最新版本。.NET Standard完全是关于代码共享的。与.NET Framework类库不同，.NET Standard类库代码几乎可以在.NET生态系统的所有部分共享。.NET
    Standard的最新版本是2.0。在撰写本文时，它可以与.NET Framework 4.6.1、.NET Core 2.0、Mono 5.4、Xamarin.iOS
    10.14、Xamarin.Mac 3.8、Xamarin.Android 7.5以及即将推出的**通用Windows平台**（**UWP**）版本共享。它还取代了**可移植类库**（**PCLs**），作为构建在所有地方都能工作的.NET库的工具。
- en: In steps 1 to 5, we have created a new .NET Standard 2.0-based class library
    project. In step 4, we have given a proper name to the class library as well as
    to the solution. It is good practice to give a meaningful name to the project
    and to the solution. In step 6, we have changed the name of the default class
    to `HelloUniverse.cs`, and it automatically changed the class name thanks to refactoring
    features in Visual Studio. If you look at the layout of the .NET Standard 2.0
    library template, you will see a Dependencies node. In a normal .NET Framework
    class library, we had References. The Dependencies node will list all the dependent
    components for that class library.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到5中，我们创建了一个基于.NET Standard 2.0的新类库项目。在步骤4中，我们为类库以及解决方案给出了合适的名称。给项目和解决方案起一个有意义的名称是良好的实践。在步骤6中，我们将默认类的名称更改为`HelloUniverse.cs`，这要归功于Visual
    Studio中的重构功能。如果你查看.NET Standard 2.0库模板的布局，你会看到一个依赖项节点。在一个正常的.NET Framework类库中，我们有引用。依赖项节点将列出该类库的所有依赖组件。
- en: In step 8, we added a simple public method that takes a string parameter and
    returns a message with the parameter sent to the method. Finally, we checked for
    syntax errors and typos by building the solution.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤8中，我们添加了一个简单的公共方法，该方法接受一个字符串参数，并返回一个包含发送到方法中的参数的消息。最后，我们通过构建解决方案来检查语法错误和拼写错误。
- en: Creating a Windows console-based application to use the library
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基于Windows控制台的应用程序以使用库
- en: We have created a .NET Standard 2.0-based class library in the previous recipe.
    In this recipe, we will be creating a Windows console-based application to use
    the library. The console-based application will be using the full .NET Framework
    under Windows, the current version of .NET Framework  is 4.6.1.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们创建了一个基于.NET Standard 2.0的类库。在这个菜谱中，我们将创建一个基于Windows控制台的应用程序来使用这个库。基于控制台的应用程序将在Windows下使用完整的.NET
    Framework，当前.NET Framework的版本是4.6.1。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's get ready to create the Windows console application to use the .NET Standard
    library we have built in the previous recipe. If you haven't followed the previous
    recipe, make sure you have completed it. We are going to use that solution and
    add the Windows console application to it. Open Visual Studio 2017 and open the
    solution we saved from the previous recipe. Click Build | Build Solution, or press *Ctrl*
    + *Shift* + *B*, and the solution should build successfully. Everything's ready
    for testing our class library.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备好创建一个Windows控制台应用程序，以使用我们在上一个菜谱中构建的.NET Standard库。如果你没有遵循上一个菜谱，请确保你已经完成了它。我们将使用那个解决方案并向其中添加Windows控制台应用程序。打开Visual
    Studio 2017，打开上一个菜谱中保存的解决方案。点击“构建”|“构建解决方案”，或者按*Ctrl* + *Shift* + *B*，解决方案应该能够成功构建。一切准备就绪，可以测试我们的类库。
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution,
    or press *Ctrl* + *Shift* + *O*, and select the `Chapter1.StandardLib` solution.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个菜谱中的解决方案。点击“文件”|“打开”|“打开项目/解决方案”，或者按*Ctrl* + *Shift* + *O*，然后选择`Chapter1.StandardLib`解决方案。
- en: Now, click on the `Chapter1.Library` solution label. Click File | Add | New
    Project.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`Chapter1.Library`解决方案标签。点击“文件”|“添加”|“新建项目”。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane. Select Windows Classic Desktop and select Console App (.NET Framework)
    from the right-hand pane.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的Visual C#节点。从右侧窗格中选择Windows经典桌面，并选择控制台应用程序(.NET Framework)。
- en: '![](img/5aa95cf8-969e-41a1-84c3-2d7faddca4a4.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5aa95cf8-969e-41a1-84c3-2d7faddca4a4.png)'
- en: 'Now, in the Name: text box, type `Chapter1.Standard.HelloConsole` and leave
    the Location: text box as it is.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，输入`Chapter1.Standard.HelloConsole`，并将“位置：”文本框保持原样。
- en: '![](img/88c89e83-f80b-4440-9770-b5453102f273.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/88c89e83-f80b-4440-9770-b5453102f273.png)'
- en: Click OK.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer (if not visible, press *Ctrl* + *Alt* + *L*) should
    look like this:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（如果未显示，请按*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/e3502983-4db0-4b48-a334-4ecc08f0cbc6.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e3502983-4db0-4b48-a334-4ecc08f0cbc6.png)'
- en: In the `Chapter1.StandardLib.HelloConsole` project tree, right-click on the
    References label and select Add Reference....
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter1.StandardLib.HelloConsole`项目树中，右键单击“引用”标签并选择添加引用...
- en: Under the Reference Manager dialog box, click on the Projects label in the left-hand
    pane. In the middle pane, check the `Chapter1.StandardLib.HelloUniverse` project.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“引用管理器”对话框中，点击左侧窗格中的“项目”标签。在中间窗格中，选中`Chapter1.StandardLib.HelloUniverse`项目。
- en: '![](img/df239563-91a4-4ece-abb7-0673d9a2d03a.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/df239563-91a4-4ece-abb7-0673d9a2d03a.png)'
- en: Click OK.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: In the Solution Explorer, double-click on the `Program.cs` filename under the `Chapter1.StandardLib.HelloConsole`project.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中，双击`Chapter1.StandardLib.HelloConsole`项目下的`Program.cs`文件名。
- en: 'Scroll up till you reach the `using` directive part of the code and add the
    following code as the last line of that section:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动至代码中的`using`指令部分，并将以下代码作为该部分的最后一行添加：
- en: '[PRE9]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, in between the curly brackets of the `Main()` method, type the following
    code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Main()`方法的括号内，输入以下代码：
- en: '[PRE10]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Hit *F5* and see the code running:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*并查看代码运行：
- en: '![](img/c4f121af-053d-4e28-9231-2e324be7def2.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c4f121af-053d-4e28-9231-2e324be7def2.png)'
- en: Press *Enter* to exit from the Command Prompt.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Enter*退出命令提示符。
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: OK, let's dive behind the scenes of the stuff we just completed. From steps
    1 to 7, we opened an existing project and added a new Windows console application.
    This project is a full .NET Framework project and its version is .NET Framework
    version 4.6.1\. In steps 9 and 10, we added the reference to a .NET Standard class
    library project from the Windows console application. This is required to test
    the class library. Then, we can reference it and use it from the application,
    as we did in step 12.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们深入了解我们刚刚完成的工作。从步骤1到7，我们打开了一个现有项目并添加了一个新的Windows控制台应用程序。该项目是一个完整的.NET Framework项目，其版本为.NET
    Framework版本4.6.1。在步骤9和10中，我们从Windows控制台应用程序添加了对.NET Standard类库项目的引用。这是测试类库所必需的。然后，我们可以从应用程序中引用并使用它，就像我们在步骤12中所做的那样。
- en: In step 13, we created a variable to store the name (keep in mind, hardcoding
    is not a good practice). And then we have created an instance of the `HelloUniverse`
    class that we created in the .NET Standard 2.0 class library. To display the output
    of the `SayHello()` method to the console window, we have directly used the `Console.WriteLine()`
    method. Finally, we waited until the user presses a key to exit from the console
    by using the `Console.ReadLine()` method, or else the end user wouldn't be able
    to see any output in the console.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤13中，我们创建了一个变量来存储名称（请注意，硬编码不是一种好习惯）。然后，我们创建了.NET Standard 2.0类库中创建的`HelloUniverse`类的实例。为了将`SayHello()`方法的输出显示到控制台窗口，我们直接使用了`Console.WriteLine()`方法。最后，我们使用`Console.ReadLine()`方法等待用户按下键退出控制台，否则最终用户将无法在控制台看到任何输出。
- en: Creating an ASP.NET Core-based web application to use the library
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基于ASP.NET Core的Web应用程序以使用库
- en: So far, we have tested the .NET Standard 2.0 class library with a Windows console
    application that runs under full .NET Framework version 4.6.1\. In this recipe,
    we are going to create an ASP.NET Core 2.0 application. ASP.NET Core uses .NET
    Core, which is an open source, cross-platform supported .NET flavor.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用运行在完整.NET Framework版本4.6.1下的Windows控制台应用程序测试了.NET Standard 2.0类库。在这个菜谱中，我们将创建一个ASP.NET
    Core 2.0应用程序。ASP.NET Core使用.NET Core，这是一个开源的、跨平台支持的.NET版本。
- en: Getting ready
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's get ready to create the ASP.NET Core application to use the .NET Standard
    library we have built in the previous recipe when we created the .NET Standard
    library. If you haven't followed that recipe, make sure you have completed it.
    We are going to use that solution and add the ASP.NET Core application to it.
    Also, make sure you have downloaded and installed the latest version of .NET Core
    Framework, which is available at [http://www.dot.net/core](http://www.dot.net/core).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备创建ASP.NET Core应用程序，以便在我们创建.NET Standard库时使用前一个菜谱中构建的.NET Standard库。如果您没有遵循那个菜谱，请确保您已经完成了它。我们将使用那个解决方案，并将ASP.NET
    Core应用程序添加到其中。同时，请确保您已下载并安装了最新版本的.NET Core框架，该框架可在[http://www.dot.net/core](http://www.dot.net/core)找到。
- en: Open Visual Studio 2017 and open the solution we saved from the previous recipe. Click Build | Build
    Solution, or press *Ctrl* + *Shift* + *B*, and the solution should build successfully.
    Everything's ready for testing our class library.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017，并打开前一个菜谱中保存的解决方案。点击“生成”|“生成解决方案”，或者按*Ctrl* + *Shift* +
    *B*，解决方案应该会成功构建。一切准备就绪，可以测试我们的类库。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution,
    or press *Ctrl* + *Shift* + *O*, and select the `Chapter1.StandardLib` solution.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开前一个菜谱中的解决方案。点击“文件”|“打开”|“打开项目/解决方案”，或者按*Ctrl* + *Shift* + *O*，然后选择`Chapter1.StandardLib`解决方案。
- en: Now click on the `Chapter1.Library` solution label. Click File | Add | New Project.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`Chapter1.Library`解决方案标签。点击“文件”|“添加”|“新项目”。
- en: 'In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane. Select Web and select ASP.NET Core Web Application from the right-hand
    pane:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的Visual C#节点。从右侧窗格中选择Web，然后选择ASP.NET Core Web应用程序：
- en: '![](img/88f8986b-2a25-4660-a732-df63b06f9b7b.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/88f8986b-2a25-4660-a732-df63b06f9b7b.png)'
- en: 'In the Name: text box, type `Chapter1.StandardLib.AspNetCore` as the name of
    the project and leave the Location: as it is:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，将项目名称输入为`Chapter1.StandardLib.AspNetCore`，并保持“位置”不变：
- en: '![](img/60c80a23-f0f5-43b5-a16d-e24f2cda325f.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/60c80a23-f0f5-43b5-a16d-e24f2cda325f.png)'
- en: Click OK.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, in the New ASP.NET Core Web Application dialog box, select .NET Core from
    the first drop-down list and ASP.NET Core 2.0 from the second drop-down list.
    Finally, select Web Application (Model-View-Controller) from the templates list:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“新建ASP.NET Core Web应用程序”对话框中，从第一个下拉列表中选择.NET Core，从第二个下拉列表中选择ASP.NET Core
    2.0。最后，从模板列表中选择Web应用程序（模型-视图-控制器）：
- en: '![](img/ddf55d46-bd32-466d-8499-5e9616d6df57.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ddf55d46-bd32-466d-8499-5e9616d6df57.png)'
- en: Leave the defaults as they are and Click OK.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认设置并点击确定。
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/1ec12a05-882b-406f-bfc1-7148659a96d5.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1ec12a05-882b-406f-bfc1-7148659a96d5.png)'
- en: Select the `Chapter1.StandardLib.AspNetCore` project, right-click, and select
    Set as Startup Project.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Chapter1.StandardLib.AspNetCore`项目，右键单击，并选择设置为启动项目。
- en: 'Now hit *F5* for a test run. If everything is running smoothly, you should
    see this default ASP.NET Core template running on your default browser:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按*F5*进行测试运行。如果一切运行顺利，你应该会在默认浏览器中看到这个默认的ASP.NET Core模板正在运行：
- en: '![](img/718c81c3-8985-4c40-9705-0ba38a452529.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/718c81c3-8985-4c40-9705-0ba38a452529.png)'
- en: Default ASP.NET Core template running on your default browser
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 默认ASP.NET Core模板在您的默认浏览器上运行
- en: Let's close the browser and add our .NET Standard class library as a reference.
    To do this, expand the `Chapter1.StandardLib.AspNetCore` project tree and select
    Dependencies.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们关闭浏览器，并将我们的.NET Standard类库作为引用添加。为此，展开`Chapter1.StandardLib.AspNetCore`项目树并选择依赖项。
- en: Right-click on the Dependencies label and select Add Reference.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击依赖项标签，并选择添加引用。
- en: Under the Reference Manager dialog box, click on the Projects label in the left-hand
    pane. In the middle pane, check the `Chapter1.StandardLib.HelloUniverse` project
    and click OK.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“参考管理器”对话框中，点击左侧窗格中的“项目”标签。在中间窗格中，选中`Chapter1.StandardLib.HelloUniverse`项目，然后点击确定。
- en: '![](img/7dce502b-4f20-4ca4-8f14-60fde015ce3b.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7dce502b-4f20-4ca4-8f14-60fde015ce3b.png)'
- en: Let's expand the Controllers folder and double-click `HomeController.cs`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们展开“控制器”文件夹，并双击`HomeController.cs`。
- en: 'In `HomeController.cs`, add this code right next to the last line of the `using`
    directive block:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，在`using`指令块的最后一行旁边添加以下代码：
- en: '[PRE11]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, inside the `About()` action, add the following code block after the `ViewData["Message"]`
    line (by default, this is after line 21 in the default template):'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `About()` 动作中，在 `ViewData["Message"]` 行之后（默认情况下，这是默认模板的第 21 行）添加以下代码块：
- en: '[PRE12]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now expand the `Views` folder. Again, expand the `Home` folder as well.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在展开 `Views` 文件夹。同样，也展开 `Home` 文件夹。
- en: Double-click on `About.cshtml`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `About.cshtml`。
- en: 'At the end of `About.cshtml`, add the following code:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `About.cshtml` 文件的末尾，添加以下代码：
- en: '[PRE13]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now press *F5* to see it in action.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按 *F5* 键来查看其效果。
- en: 'You will see the default ASP.NET Core template in the browser. Now click About
    to view the `About.cshtml` page:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将在浏览器中看到默认的 ASP.NET Core 模板。现在点击 About 来查看 `About.cshtml` 页面：
- en: '![](img/a16a3103-69ee-4863-a948-352762cc34c7.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a16a3103-69ee-4863-a948-352762cc34c7.png)'
- en: About.cshtml page
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`About.cshtml` 页面'
- en: Excellent, now you have used a .NET Standard 2.0 library with an ASP.NET Core
    2.0 web application.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太棒了，现在你已经使用了一个 .NET Standard 2.0 库和一个 ASP.NET Core 2.0 网络应用程序。
- en: How it works...
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's have a look what we did just now. From steps 1 to 9, we opened and previously
    built an existing solution containing .NET Standard 2.0 library code. Then, we
    added an ASP.NET Core project to that solution. In step 10, we told Visual Studio
    to execute the ASP.NET Core project when we hit F5 or started debugging. In step
    11, we tested the default template of ASP.NET Core in a default browser.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们刚才做了什么。从第 1 步到第 9 步，我们打开并构建了一个包含 .NET Standard 2.0 库代码的现有解决方案。然后，我们将一个
    ASP.NET Core 项目添加到该解决方案中。在第 10 步中，我们告诉 Visual Studio 在我们按 F5 或开始调试时执行 ASP.NET
    Core 项目。在第 11 步中，我们在默认浏览器中测试了 ASP.NET Core 的默认模板。
- en: In steps 12 to 14, we added the reference to our ASP.NET Core application from
    the .NET Standard 2.0 class library. This allows you to access the library from
    an ASP.NET Core 2.0 web application. In step 16, we referenced the class library
    using the `using` directive. In step 17, we created a variable to hold the name
    and created an instance of the `HelloUniverse` class.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 12 步到第 14 步中，我们将我们的 ASP.NET Core 应用程序的引用添加到了 .NET Standard 2.0 类库中。这允许您从
    ASP.NET Core 2.0 网络应用程序中访问库。在第 16 步中，我们使用 `using` 指令引用了类库。在第 17 步中，我们创建了一个变量来保存名称并创建了
    `HelloUniverse` 类的一个实例。
- en: Finally, we have stored the message from the `SayHello()` method in the `ViewData`
    collection. The `ViewData` collection allows you to transfer data from Controllers
    to Views. In steps 19 and 20, we opened the relevant view for the `About()` action,
    which is `About.cshtml`. Finally, in step 20, we added simple HTML code to display
    the stored value in `ViewData` in the `HomeController` class. As a last step,
    we executed the web application and tested it.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经将 `SayHello()` 方法中的消息存储在 `ViewData` 集合中。`ViewData` 集合允许您将数据从控制器传输到视图。在第
    19 步和第 20 步中，我们打开了 `About()` 动作的相关视图，即 `About.cshtml`。最后，在第 20 步中，我们在 `HomeController`
    类中添加了简单的 HTML 代码来显示存储在 `ViewData` 中的值。作为最后一步，我们执行了网络应用程序并进行了测试。
