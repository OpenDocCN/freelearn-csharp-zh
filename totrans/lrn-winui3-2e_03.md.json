["```cs\n<TextBlock Text=\"{Binding Path=Name, Mode=TwoWay}\"/>\n```", "```cs\n<TextBlock Text=\"{Binding Name, Mode=TwoWay}\"/>\n```", "```cs\npublic interface INotifyPropertyChanged\n{\n    event PropertyChangedEventHandler PropertyChanged;\n}\n```", "```cs\npublic interface INotifyCollectionChanged\n{\n    event NotifyCollectionChangedEventHandler\n      CollectionChanged;\n}\n```", "```cs\n    public class BindableBase : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler\n          PropertyChanged;\n        protected void OnPropertyChanged(\n          [CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new Property\n              ChangedEventArgs(propertyName));\n        }\n        protected bool SetProperty<T>(ref T originalValue,\n          T newValue, [CallerMemberName] string\n            propertyName = null)\n        {\n            if (Equals(originalValue, newValue))\n            {\n                return false;\n            }\n            originalValue = newValue;\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n    }\n    ```", "```cs\npublic class MainViewModel : BindableBase\n{\n    private string selectedMedium;\n    private ObservableCollection<MediaItem> items;\n    private ObservableCollection<MediaItem> allItems;\n    private IList<string> mediums;\n    public MainViewModel()\n    {\n        PopulateData();\n    }\n    ...\n    public IList<string> Mediums\n    {\n        get\n        {\n            return mediums;\n        }\n        set\n        {\n            SetProperty(ref mediums, value);\n        }\n    }\n    ...\n}\n```", "```cs\n    public static MainViewModel ViewModel { get; } = new\n    MainViewModel();\n    ```", "```cs\n    public sealed partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            this.InitializeComponent();\n            Loaded += MainPage_Loaded;\n        }\n        public MainViewModel ViewModel => App.ViewModel;\n        private async void AddButton_Click(object sender,\n          Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            var dialog = new MessageDialog(\"Adding items\n              to the collection is not yet available.\",\n                \"My Media Collection\");\n            await dialog.ShowAsync();\n        }\n    }\n    ```", "```cs\n    <ComboBox ItemsSource=\"{x:Bind ViewModel.Mediums}\"\n      SelectedItem=\"{x:Bind ViewModel.SelectedMedium,\n        Mode=TwoWay}\" HorizontalAlignment=\"Right\"\n          MinWidth=\"120\" Margin=\"0,2,6,4\"/>\n    ```", "```cs\n    <ListView Grid.Row=\"1\" ItemsSource=\"{x:Bind\n      ViewModel.Items}\">\n    ```", "```cs\npublic class RelayCommand : ICommand\n{\n    private readonly Action action;\n    private readonly Func<bool> canExecute;\n    public RelayCommand(Action action)\n        : this(action, null)\n    {\n    }\n    public RelayCommand(Action action, Func<bool>\n      canExecute)\n    {\n        if (action == null)\n            throw new ArgumentNullException\n              (nameof(action));\n        this.action = action;\n        this.canExecute = canExecute;\n    }\n    public bool CanExecute(object parameter) => canExecute\n      == null || canExecute();\n    public void Execute(object parameter) => action();\n    public event EventHandler CanExecuteChanged;\n    public void RaiseCanExecuteChanged() =>\n      CanExecuteChanged?.Invoke(this, EventArgs.Empty);\n}\n```", "```cs\n    private MediaItem selectedMediaItem;\n    private int additionalItemCount = 1;\n    ```", "```cs\n    public MediaItem SelectedMediaItem\n    {\n        get => selectedMediaItem;\n        set\n        {\n            SetProperty(ref selectedMediaItem, value);\n            ((RelayCommand)DeleteCommand)\n              .RaiseCanExecuteChanged();\n        }\n    }\n    ```", "```cs\n    public ICommand AddEditCommand { get; set; }\n    public void AddOrEditItem()\n    {\n        // Note this is temporary until\n        // we use a real data source for items.\n        const int startingItemCount = 3;\n        var newItem = new MediaItem\n        {\n            Id = startingItemCount + additionalItemCount,\n            Location = LocationType.InCollection,\n            MediaType = ItemType.Music,\n            MediumInfo = new Medium { Id = 1, MediaType =\n              ItemType.Music, Name = \"CD\" },\n            Name = $\"CD {additionalItemCount}\"\n        };\n        allItems.Add(newItem);\n        Items.Add(newItem);\n        additionalItemCount++;\n    }\n    public ICommand DeleteCommand { get; set; }\n    private void DeleteItem()\n    {\n        allItems.Remove(SelectedMediaItem);\n        Items.Remove(SelectedMediaItem);\n    }\n    private bool CanDeleteItem() => selectedMediaItem !=\n      null;\n    ```", "```cs\n    DeleteCommand = new RelayCommand(DeleteItem,\n      CanDeleteItem);\n    // No CanExecute param is needed for this command\n    // because you can always add or edit items.\n    AddEditCommand = new RelayCommand(AddOrEditItem);\n    ```", "```cs\npublic sealed partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        this.InitializeComponent();\n    }\n    public MainViewModel ViewModel => App.ViewModel;\n}\n```", "```cs\n    <ListView Grid.Row=\"1\" ItemsSource=\"{x:Bind\n      ViewModel.Items}\" SelectedItem=\"{x:Bind\n    TwoWay data binding is required to allow the UI to update the view model.\n    ```", "```cs\n    <StackPanel Grid.Row=\"2\"\n                HorizontalAlignment=\"Right\"\n                Orientation=\"Horizontal\">\n        <Button Command=\"{x:Bind\n          ViewModel.AddEditCommand}\"\n                Content=\"Add Item\"\n                Margin=\"8,8,0,8\"/>\n        <Button Command=\"{x:Bind ViewModel.DeleteCommand}\"\n                Content=\"Delete Item\"\n                Margin=\"8\"/>\n    </StackPanel>\n    ```", "```cs\n    public partial class MainViewModel : ObservableObject\n    ```", "```cs\n    [ObservableProperty]\n    private IList<string> mediums;\n    [ObservableProperty]\n    private ObservableCollection<MediaItem> items;\n    ```", "```cs\n    partial void OnSelectedMediumChanged(string value)\n    {\n        Items.Clear();\n        foreach (var item in allItems)\n        {\n            if (string.IsNullOrWhiteSpace(value) ||\n                value == \"All\" ||\n                value == item.MediaType.ToString())\n            {\n                Items.Add(item);\n            }\n        }\n    }\n    ```", "```cs\n    public MainViewModel()\n    {\n        PopulateData();\n    }\n    [RelayCommand]\n    public void AddEdit()\n    {\n    ...\n    }\n    [RelayCommand(CanExecute = nameof(CanDeleteItem))]\n    public void Delete()\n    {\n    ...\n    }\n    private bool CanDeleteItem() => SelectedMediaItem !=\n      null;\n    ```", "```cs\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(DeleteCommand))]\n    private MediaItem selectedMediaItem;\n    ```", "```cs\n    public MediaItem SelectedMediaItem\n    {\n        get => selectedMediaItem;\n        set\n        {\n            if (SetProperty(ref selectedMediaItem, value))\n            {\n                DeleteCommand.NotifyCanExecuteChanged();\n            }\n        }\n    }\n    ```"]