["```cs\n    using UnityEngine;\n    using UnityEngine.UI;\n    using System.Collections;\n\n    public class PauseGame : MonoBehaviour {\n      public GameObject qPanel;\n      public GameObject qSlider;\n      public GameObject qLabel;\n      public bool expensiveQualitySettings = true;\n      private bool isPaused = false;\n\n      void Start () {\n        Cursor.visible = isPaused;\n        Slider slider = qSlider.GetComponent<Slider> ();\n        slider.maxValue = QualitySettings.names.Length;\n        slider.value = QualitySettings.GetQualityLevel ();\n        qPanel.SetActive(false);\n      }\n\n      void Update () {\n        if (Input.GetKeyDown(KeyCode.Escape)) {\n          isPaused = !isPaused;\n          SetPause ();\n        }\n      }\n\n      private void SetPause(){\n        float timeScale = !isPaused ? 1f : 0f;\n        Time.timeScale = timeScale;\n        Cursor.visible = isPaused;\n        GetComponent<MouseLook> ().enabled = !isPaused;\n        qPanel.SetActive (isPaused);\n      }\n\n      public void SetQuality(float qs){\n        int qsi = Mathf.RoundToInt (qs);\n        QualitySettings.SetQualityLevel (qsi);\n        Text label = qLabel.GetComponent<Text> ();\n        label.text = QualitySettings.names [qsi];\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.UI;\n    using System.Collections;\n\n    public class BulletTime : MonoBehaviour\n    {\n        public float sloSpeed = 0.1f;\n        public float totalTime = 10f;\n        public float recoveryRate = 0.5f;\n        public Slider EnergyBar;\n        private float elapsed = 0f;\n        private bool isSlow = false;\n\n        void Update ()\n        {\n\n            if (Input.GetButtonDown (\"Fire2\") && elapsed < totalTime)\n                SetSpeed (sloSpeed);\n\n            if (Input.GetButtonUp (\"Fire2\"))\n                SetSpeed (1f);\n\n            if (isSlow) {\n                elapsed += Time.deltaTime / sloSpeed;\n                if (elapsed >= totalTime) {\n                    SetSpeed (1f);\n                }\n\n            } else {\n                elapsed -= Time.deltaTime * recoveryRate;\n                elapsed = Mathf.Clamp (elapsed, 0, totalTime);\n            }\n            float remainingTime = (totalTime - elapsed) / totalTime;\n            EnergyBar.value = remainingTime;\n        }\n\n        private void SetSpeed (float speed)\n        {\n            Time.timeScale = speed;\n            Time.fixedDeltaTime = 0.02f * speed;\n            isSlow = !(speed >= 1.0f);\n        }\n    }\n    ```", "```cs\nGameObject fill = GameObject.Find(\"Fill\").gameObject;\nColor sliderColor = Color.Lerp(Color.red, Color.green, remainingTime);\nfill.GetComponent<Image> ().color = sliderColor;\n```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class BlockAccess : MonoBehaviour {\n      public bool checkDomain = true;\n      public bool fullURL = true;\n      public string[] domainList;\n      public string warning;\n\n      private void Start(){\n        Text scoreText = GetComponent<Text>();\n        bool illegalCopy = true;\n\n        if (Application.isEditor)\n          illegalCopy = false;\n\n        if (Application.isWebPlayer && checkDomain){\n          for (int i = 0; i < domainList.Length; i++){\n            if (Application.absoluteURL == domainList[i]){\n              illegalCopy = false;\n            }else if (Application.absoluteURL.Contains(domainList[i]) && !fullURL){\n              illegalCopy = false;\n            }\n          }\n        }\n\n        if (illegalCopy)\n          scoreText.text = warning;\n        else\n          Application.LoadLevel(Application.loadedLevel + 1);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using System;\n    using UnityEngine.UI;\n\n    public class GameManager : MonoBehaviour {\n      public Text textStateMessages;\n      public Button buttonWinGame;\n      public Button buttonLoseGame;\n\n      private enum GameStateType {\n        Other,\n        GamePlaying,\n        GameWon,\n        GameLost,\n      }\n\n      private GameStateType currentState = GameStateType.Other;\n      private float timeGamePlayingStarted;\n      private float timeToPressAButton = 5;\n\n      void Start () {\n        NewGameState( GameStateType.GamePlaying );\n      }\n\n      private void NewGameState(GameStateType newState) {\n        // (1) state EXIT actions\n        OnMyStateExit(currentState);\n\n        // (2) change current state\n        currentState = newState;\n\n        // (3) state ENTER actions\n        OnMyStateEnter(currentState);\n\n        PostMessageDivider();\n      }\n\n      public void PostMessageDivider(){\n        string newLine = \"\\n\";\n        string divider = \"--------------------------------\";\n        textStateMessages.text += newLine + divider;\n      }\n\n      public void PostMessage(string message){\n        string newLine = \"\\n\";\n        string timeTo2DecimalPlaces = String.Format(\"{0:0.00}\", Time.time);\n        textStateMessages.text += newLine + timeTo2DecimalPlaces + \" :: \" + message;\n      }\n\n      public void BUTTON_CLICK_ACTION_WIN_GAME(){\n        string message = \"Win Game BUTTON clicked\";\n        PostMessage(message);\n        NewGameState( GameStateType.GameWon );\n      }\n\n      public void BUTTON_CLICK_ACTION_LOSE_GAME(){\n        string message = \"Lose Game BUTTON clicked\";\n        PostMessage(message);\n        NewGameState( GameStateType.GameLost );\n      }\n\n      private void DestroyButtons(){\n        Destroy (buttonWinGame.gameObject);\n        Destroy (buttonLoseGame.gameObject);\n      }\n\n      //--------- OnMyStateEnter[ S ] - state specific actions\n      private void OnMyStateEnter(GameStateType state){\n        string enterMessage = \"ENTER state: \" + state.ToString();\n        PostMessage(enterMessage);\n\n        switch (state){\n        case GameStateType.GamePlaying:\n          OnMyStateEnterGamePlaying();\n          break;\n        case GameStateType.GameWon:\n          // do nothing\n          break;\n        case GameStateType.GameLost:\n          // do nothing\n          break;\n        }\n      }\n\n      private void OnMyStateEnterGamePlaying(){\n        // record time we enter state\n        timeGamePlayingStarted = Time.time;\n      }\n\n      //--------- OnMyStateExit[ S ] - state specific actions\n      private void OnMyStateExit(GameStateType state){\n        string exitMessage = \"EXIT state: \" + state.ToString();\n        PostMessage(exitMessage);\n\n        switch (state){\n        case GameStateType.GamePlaying:\n          OnMyStateExitGamePlaying();\n          break;\n        case GameStateType.GameWon:\n          // do nothing\n          break;\n        case GameStateType.GameLost:\n          // do nothing\n          break;\n        case GameStateType.Other:\n          // cope with game starting in state 'Other'\n          // do nothing\n          break;\n        }\n      }\n\n      private void OnMyStateExitGamePlaying(){\n    // if leaving gamePlaying state then destroy the 2 buttons\n        DestroyButtons();\n      }\n\n      //--------- Update[ S ] - state specific actions\n      void Update () {\n        switch (currentState){\n        case GameStateType.GamePlaying:\n          UpdateStateGamePlaying();\n          break;\n        case GameStateType.GameWon:\n          // do nothing\n          break;\n        case GameStateType.GameLost:\n          // do nothing\n          break;\n        }\n      }\n\n      private void UpdateStateGamePlaying(){\n        float timeSinceGamePlayingStarted = Time.time - timeGamePlayingStarted;\n        if(timeSinceGamePlayingStarted > timeToPressAButton){\n          string message = \"User waited too long - automatically going to Game LOST state\";\n          PostMessage(message);\n          NewGameState(GameStateType.GameLost);\n        }\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class GameManager : MonoBehaviour {\n      public Text textGameStateName;\n      public Button buttonWinGame;\n      public Button buttonLoseGame;\n\n      public StateGamePlaying stateGamePlaying{get; set;}\n      public StateGameWon stateGameWon{get; set;}\n      public StateGameLost stateGameLost{get; set;}\n\n      private GameState currentState;\n\n      private void Awake () {\n        stateGamePlaying = new StateGamePlaying(this);\n        stateGameWon = new StateGameWon(this);\n        stateGameLost = new StateGameLost(this);\n      }\n\n      private void Start () {\n        NewGameState( stateGamePlaying );\n      }\n\n      private void Update () {\n        if (currentState != null)\n          currentState.StateUpdate();\n      }\n\n      public void NewGameState(GameState newState)\n      {\n        if( null != currentState)\n          currentState.OnMyStateExit();\n\n        currentState = newState;\n        currentState.OnMyStateEntered();\n      }\n\n      public void DisplayStateEnteredMessage(string stateEnteredMessage){\n        textGameStateName.text = stateEnteredMessage;\n      }\n\n      public void BUTTON_CLICK_ACTION_WIN_GAME(){\n        if( null != currentState){\n    currentState.OnButtonClick(GameState.ButtonType.ButtonWinGame);\n          DestroyButtons();\n        }\n      }\n\n      public void BUTTON_CLICK_ACTION_LOSE_GAME(){\n        if( null != currentState){\n    currentState.OnButtonClick(GameState.ButtonType.ButtonLoseGame);\n          DestroyButtons();\n        }\n      }\n\n      private void DestroyButtons(){\n        Destroy (buttonWinGame.gameObject);\n        Destroy (buttonLoseGame.gameObject);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public abstract class GameState {\n      public enum ButtonType {\n        ButtonWinGame,\n        ButtonLoseGame\n      }\n\n      protected GameManager gameManager;\n      public GameState(GameManager manager) {\n        gameManager = manager;\n      }\n\n      public abstract void OnMyStateEntered();\n      public abstract void OnMyStateExit();\n      public abstract void StateUpdate();\n      public abstract void OnButtonClick(ButtonType button);\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class StateGamePlaying : GameState {\n      public StateGamePlaying(GameManager manager):base(manager){}\n\n      public override void OnMyStateEntered(){\n        string stateEnteredMessage = \"ENTER state: StateGamePlaying\";\n        gameManager.DisplayStateEnteredMessage(stateEnteredMessage);\n        Debug.Log(stateEnteredMessage);\n      }\n      public override void OnMyStateExit(){}\n      public override void StateUpdate() {}\n\n      public override void OnButtonClick(ButtonType button){\n        if( ButtonType.ButtonWinGame == button )\n          gameManager.NewGameState(gameManager.stateGameWon);\n\n        if( ButtonType.ButtonLoseGame == button )\n          gameManager.NewGameState(gameManager.stateGameLost);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class StateGameWon : GameState {\n      public StateGameWon(GameManager manager):base(manager){}\n\n      public override void OnMyStateEntered(){\n        string stateEnteredMessage = \"ENTER state: StateGameWon\";\n    gameManager.DisplayStateEnteredMessage(stateEnteredMessage);\n        Debug.Log(stateEnteredMessage);\n      }\n      public override void OnMyStateExit(){}\n      public override void StateUpdate() {}\n      public override void OnButtonClick(ButtonType button){}\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class StateGameLost : GameState {\n      public StateGameLost(GameManager manager):base(manager){}\n\n      public override void OnMyStateEntered(){\n        string stateEnteredMessage = \"ENTER state: StateGameLost\";\n    gameManager.DisplayStateEnteredMessage(stateEnteredMessage);\n        Debug.Log(stateEnteredMessage);\n      }\n      public override void OnMyStateExit(){}\n      public override void StateUpdate() {}\n      public override void OnButtonClick(ButtonType button){}\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class DeathTimeExample : MonoBehaviour {\n      public void BUTTON_ACTION_StartDying() {\n        deathTime = Time.time + deathDelay;\n      }\n\n      public float deathDelay = 4f;\n      private float deathTime = -1;\n\n      public Text buttonText;\n\n      void Update(){\n        if(deathTime > 0){\n          UpdateTimeDisplay();\n          CheckDeath();\n        }\n      }\n\n      private void UpdateTimeDisplay(){\n        float timeLeft = deathTime - Time.time;\n        string timeMessage = \"time left: \" + timeLeft;\n        buttonText.text = timeMessage;\n      }\n\n      private void CheckDeath(){\n        if(Time.time > deathTime) Destroy( gameObject );\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class DisableWhenNotVisible : MonoBehaviour {\n      private GameObject player;\n\n      void Start(){\n        player = GameObject.FindGameObjectWithTag(\"Player\");\n      }\n\n      void OnBecameVisible() {\n        enabled = true;\n        print (\"cube became visible again\");\n      }\n\n      void OnBecameInvisible() {\n        enabled = false;\n        print (\"cube became invisible\");\n      }\n\n      void Update(){\n        //do something, so we know when this script is NOT doing something!\n        float d = Vector3.Distance( transform.position, player.transform.position);\n        print(Time.time + \": distance from player to cube = \" + d);\n      }\n    }\n    ```", "```cs\nvoid OnTriggerEnter(Collider hitObjectCollider) {\n  if (hitObjectCollider.CompareTag(\"Player\")){\n    print (\"cube close to Player again\");\n    enabled = true;\n  }\n}\n\nvoid OnTriggerExit(Collider hitObjectCollider) {\n  if (hitObjectCollider.CompareTag(\"Player\")){\n    print (\"cube away from Player\");\n    enabled = false;\n  }\n}\n```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class InactiveWhenNotVisible : MonoBehaviour {\n      // button action\n      public void BUTTON_ACTION_MakeActive(){\n        gameObject.SetActive(true);\n        makeActiveAgainButton.SetActive(false);\n      }\n\n      public GameObject makeActiveAgainButton;\n\n      private GameObject player;\n\n      void Start(){\n        player = GameObject.FindGameObjectWithTag(\"Player\");\n      }\n\n      void OnBecameInvisible() {\n        makeActiveAgainButton.SetActive(true);\n        print (\"cube became invisible\");\n        gameObject.SetActive(false);\n      }\n\n      void Update(){\n        float d = Vector3.Distance( transform.position, player.transform.position);\n        print(Time.time + \": distance from player to cube = \" + d);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class ColorManager : MonoBehaviour {\n      public void BUTTON_ACTION_make_green(){\n        PublishColorEvent(Color.green);\n      }\n\n      public void BUTTON_ACTION_make_blue(){\n        PublishColorEvent(Color.blue);\n      }\n\n      public void BUTTON_ACTION_make_red(){\n        PublishColorEvent(Color.red);\n      }\n\n      public delegate void ColorChangeHandler(Color newColor);\n      public static event ColorChangeHandler onChangeColor;\n\n      private void PublishColorEvent(Color newColor){\n        // if there is at least one listener to this delegate\n        if(onChangeColor != null){\n          // broadcast change color event\n          onChangeColor(newColor);\n        }\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class ColorChangeListenerImage : MonoBehaviour {\n      void OnEnable() {\n        ColorManager.onChangeColor += ChangeColorEvent;\n      }\n\n      private void OnDisable(){\n        ColorManager.onChangeColor -= ChangeColorEvent;\n      }\n\n      void ChangeColorEvent(Color newColor){\n        GetComponent<Image>().color = newColor;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class ColorChangeListenerText : MonoBehaviour {\n      void OnEnable() {\n        ColorManager.onChangeColor += ChangeColorEvent;\n      }\n\n      private void OnDisable(){\n        ColorManager.onChangeColor -= ChangeColorEvent;\n      }\n\n      void ChangeColorEvent(Color newColor){\n        GetComponent<Text>().color = newColor;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class TimedMethod : MonoBehaviour {\n      private void Start() {\n        StartCoroutine(Tick());\n      }\n\n      private IEnumerator Tick() {\n        float delaySeconds = 5.0F;\n        while (true) {\n          print(\"tick \" + Time.time);\n          yield return new WaitForSeconds(delaySeconds);\n        }\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class SegmentedCalculation : MonoBehaviour {\n      private const int ARRAY_SIZE = 50;\n      private const int SEGMENT_SIZE = 10;\n      private int[] randomNumbers;\n\n      private void Awake(){\n        randomNumbers = new int[ARRAY_SIZE];\n        for(int i=0; i<ARRAY_SIZE; i++){\n          randomNumbers[i] = Random.Range(0, 1000);\n        }\n\n        StartCoroutine( FindMinMax() );\n      }\n\n      private IEnumerator FindMinMax() {\n        int min = int.MaxValue;\n        int max = int.MinValue\n\n        for(int i=0; i<ARRAY_SIZE; i++){\n          if(i % SEGMENT_SIZE == 0){\n            print(\"frame: \" + Time.frameCount + \", i:\" + i + \", min:\" + min + \", max:\" + max);\n\n            // suspend for 1 frame since we've completed another segment\n            yield return null;\n          }\n\n          if(randomNumbers[i] > max){\n            max = randomNumbers[i];\n          } else if(randomNumbers[i] < min){\n            min = randomNumbers[i];\n          }\n        }\n\n        // disable this scripted component\n        print(\"** completed - disabling scripted component\");\n        enabled = false;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class SomeCalculations : MonoBehaviour {\n      public int outerLoopIterations = 20;\n      public int innerLoopMaxIterations = 100;\n\n      void Update(){\n        for(int i = 0; i < outerLoopIterations; i++){\n          int innerLoopIterations = Random.Range(2,innerLoopMaxIterations);\n          for(int j = 0; j < innerLoopIterations; j++){\n            float n = Random.Range(-1000f, 1000f);\n          }\n        }\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class ProfileCalculations : MonoBehaviour {\n      public int outerLoopIterations = 20;\n      public int innerLoopMaxIterations = 100;\n\n      void Update(){\n        Profiler.BeginSample(\"MATT_calculations\");\n\n        for(int i = 0; i < outerLoopIterations; i++){\n          int innerLoopIterations = Random.Range(2,innerLoopMaxIterations);\n          for(int j = 0; j < innerLoopIterations; j++){\n            float n = Random.Range(-1000f, 1000f);\n          }\n        }\n\n        Profiler.EndSample();\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class DIYProfiling : MonoBehaviour {\n      public int outerLoopIterations = 20;\n      public int innerLoopMaxIterations = 100;\n\n      void Update(){\n        string profileName = \"MATT_calculations\";\n        Profile.StartProfile(profileName);\n\n        for (int i = 0; i < outerLoopIterations; i++){\n          int innerLoopIterations = Random.Range(2,innerLoopMaxIterations);\n          for (int j = 0; j < innerLoopIterations; j++){\n            float n = Random.Range(-1000f, 1000f);\n          }\n        }\n\n        Profile.EndProfile(profileName);\n      }\n\n      private void OnApplicationQuit() {\n        Profile.PrintResults();\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class SphereBuilder : MonoBehaviour\n    {\n      public const int NUM_SPHERES = 1000;\n      public GameObject spherePrefab;\n\n      void Awake(){\n        List<Vector3> randomPositions = BuildVector3Collection(NUM_SPHERES);\n        for(int i=0; i < NUM_SPHERES; i++){\n          Vector3 pos = randomPositions[i];\n          Instantiate(spherePrefab, pos, Quaternion.identity);\n        }\n      }\n\n      public List<Vector3> BuildVector3Collection(int numPositions){\n        List<Vector3> positionArrayList = new List<Vector3>();\n        for(int i=0; i < numPositions; i++) {\n          float x = Random.Range(-100, 100);\n          float y = Random.Range(1, 100);\n          float z = Random.Range(-100, 100);\n          Vector3 pos = new Vector3(x,y,z);\n          positionArrayList.Add (pos);\n        }\n\n        return positionArrayList;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class SimpleMath : MonoBehaviour {\n      public float Halve(float n){\n        return n / 2;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using System;\n\n    public class AverageDistance : MonoBehaviour\n    {\n      void Update(){\n        // method1 - basic\n        Profiler.BeginSample(\"TESTING_method1\");\n        GameObject[] sphereArray = GameObject.FindGameObjectsWithTag(\"Respawn\");\n        for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n          HalfDistanceBasic(sphereArray[i].transform);\n        }\n        Profiler.EndSample();\n      }\n\n      // basic\n      private void HalfDistanceBasic(Transform sphereGOTransform){\n        Transform playerTransform = GameObject.FindGameObjectWithTag(\"Player\").transform;\n        Vector3 pos1 = playerTransform.position;\n        Vector3 pos2 = sphereGOTransform.position;\n\n        float distance = Vector3.Distance(pos1, pos2);\n\n        SimpleMath mathObject = GetComponent<SimpleMath>();\n        float halfDistance = mathObject.Halve(distance);\n      }\n    }\n    ```", "```cs\n    private Transform[] sphereTransformArrayCache;\n    ```", "```cs\n    private void Start(){\n      GameObject[] sphereGOArray = GameObject.FindGameObjectsWithTag(\"Respawn\");\n      sphereTransformArrayCache = new Transform[SphereBuilder.NUM_SPHERES];\n      for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n        sphereTransformArrayCache[i] = sphereGOArray[i].transform;\n      }\n    }\n    ```", "```cs\n    // method2 - use cached sphere ('Respawn' array)\n    Profiler.BeginSample(\"TESTING_method2\");\n    for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n      HalfDistanceBasic(sphereTransformArrayCache[i]);\n    }\n    Profiler.EndSample();\n    ```", "```cs\n    private Transform playerTransformCache;\n    private Transform[] sphereTransformArrayCache;\n\n    private void Start(){\n      GameObject[] sphereGOArray = GameObject.FindGameObjectsWithTag(\"Respawn\");\n      sphereTransformArrayCache = new Transform[SphereBuilder.NUM_SPHERES];\n      for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n        sphereTransformArrayCache[i] = sphereGOArray[i].transform;\n      }\n\n      playerTransformCache = GameObject.FindGameObjectWithTag(\"Player\").transform;\n    }\n    ```", "```cs\n    // method3 - use cached playerTransform\n    Profiler.BeginSample(\"TESTING_method3\");\n    for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n    HalfDistanceCachePlayerTransform(sphereTransformArrayCache[i]);\n    }\n    Profiler.EndSample();\n    ```", "```cs\n    // playerTransform cached\n    private void HalfDistanceCachePlayerTransform(Transform sphereGOTransform){\n      Vector3 pos1 = playerTransformCache.position;\n      Vector3 pos2 = sphereGOTransform.position;\n      float distance = Vector3.Distance(pos1, pos2);\n      SimpleMath mathObject = GetComponent<SimpleMath>();\n      float halfDistance = mathObject.Halve(distance);\n    }\n    ```", "```cs\n    private Vector3 pos1Cache;\n\n    private void Start(){\n    ...\n    pos1Cache = playerTransformCache.position;\n    }\n    ```", "```cs\n    // player position cached\n    private void HalfDistanceCachePlayer1Position(Transform sphereGOTransform){\n      Vector3 pos1 = pos1Cache;\n      Vector3 pos2 = sphereGOTransform.position;\n      float distance = Vector3.Distance(pos1, pos2);\n      SimpleMath mathObject = GetComponent<SimpleMath>();\n      float halfDistance = mathObject.Halve(distance);\n    }\n    ```", "```cs\n    // method4 - use cached playerTransform.position\n    Profiler.BeginSample(\"TESTING_method4\");\n    for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n      HalfDistanceCachePlayer1Position(sphereTransformArrayCache[i]);\n    }\n    Profiler.EndSample();\n    ```", "```cs\n    private SimpleMath mathObjectCache;\n\n    private void Awake(){\n      mathObjectCache = GetComponent<SimpleMath>();\n    }\n    ```", "```cs\n    // math Component cache\n    private void HalfDistanceCacheMathComponent(Transform sphereGOTransform){\n      Vector3 pos1 = pos1Cache;\n      Vector3 pos2 = sphereGOTransform.position;\n      float distance = Vector3.Distance(pos1, pos2);\n      SimpleMath mathObject = mathObjectCache;\n      float halfDistance = mathObject.Halve(distance);\n    }\n    ```", "```cs\n    // method5 - use cached math component\n    Profiler.BeginSample(\"TESTING_method5\");\n    for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n      HalfDistanceCacheMathComponent(sphereTransformArrayCache[i]);\n    }\n    Profiler.EndSample();\n    ```", "```cs\n    private Vector3[] spherePositionArrayCache = new Vector3[SphereBuilder.NUM_SPHERES];\n\n    private void Start(){\n      GameObject[] sphereGOArray = GameObject.FindGameObjectsWithTag(\"Respawn\");\n      sphereTransformArrayCache = new Transform[SphereBuilder.NUM_SPHERES];\n      for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n        sphereTransformArrayCache[i] = sphereGOArray[i].transform;\n        spherePositionArrayCache[i] = sphereGOArray[i].transform.position;\n      }\n\n      playerTransformCache = GameObject.FindGameObjectWithTag(\"Player\").transform;\n      pos1Cache = playerTransformCache.position;\n    }\n    ```", "```cs\n    // sphere position cache\n    private void HalfDistanceCacheSpherePositions(Transform sphereGOTransform, Vector3 pos2){\n      Vector3 pos1 = pos1Cache;\n      float distance = Vector3.Distance(pos1, pos2);\n      SimpleMath mathObject = mathObjectCache;\n      float halfDistance = mathObject.Halve(distance);\n    }\n    ```", "```cs\n    // method6 - use cached array of sphere positions\n    Profiler.BeginSample(\"TESTING_method6\");\n    for (int i=0; i < SphereBuilder.NUM_SPHERES; i++){\n    HalfDistanceCacheSpherePositions(sphereTransformArrayCache[i], spherePositionArrayCache[i]);\n    }\n    Profiler.EndSample();\n    ```"]