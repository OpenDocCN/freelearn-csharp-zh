["```cs\nprintfn \"Hello F# world\" \n\n```", "```cs\n[<EntryPoint>] \nlet main argv =  \n    printfn \"Hello F# world\" \n    0 // return an integer exit code \n\n```", "```cs\n.method public static int32  main(string[] argv) cil managed \n\n```", "```cs\nlet rec fact x =  \n    match x with \n    | 1 -> 1 \n    | a when a < 1 -> 1 \n    | _ -> x * fact (x-1)   \n\n```", "```cs\nildasm FSConsole01.exe /OUT=FSConsole.IL \n\n```", "```cs\n// =============== CLASS MEMBERS DECLARATION =================== \n\n.class public abstract auto ansi sealed Program \n       extends [mscorlib]System.Object \n\n```", "```cs\n// =============== CLASS MEMBERS DECLARATION =================== \n\n.class private auto ansi beforefieldinit Imperative.Program \n       extends [mscorlib]System.Object \n\n```", "```cs\nIL_0001:  ldstr      \"Hello F# world\" \n\n```", "```cs\nilasm FSConsole01a.IL /exe \n\n```", "```cs\nopen System \nlet rec fact x =  \n    match x with \n    | 1 -> 1 \n    | a when a < 1 -> 1 \n    | _ -> x * fact (x-1)  \n\n[<EntryPoint>] \nlet main argv =  \n    let timer1 = new System.Timers.Timer(1.0) \n    let mutable timeElapsed = 0 \n    timer1.Enabled <- true \n    timer1.AutoReset <- true \n    timer1.Elapsed.Add (fun _ -> timeElapsed <- timeElapsed + 1) \n    timer1.Start() \n    for cnt = 1 to 3000000 do \n        fact 5 |> ignore  \n    timer1.Stop() \n    Console.WriteLine(String.Concat(\"time elapsed for \", timeElapsed)) \n    0 // return an integer exit code \n\n```", "```cs\n[<EntryPoint>] \nlet main argv =  \n    let stopwatch1 = new System.Diagnostics.Stopwatch() \n    stopwatch1.Reset() \n    stopwatch1.Start() \n    for cnt = 1 to 3000000 do \n        fact 5 |> ignore  \n    stopwatch1.Stop() \n    let timeDuration = stopwatch1.ElapsedMilliseconds \n    Console.WriteLine(String.Concat(\"time elapsed in milliseconds:\", timeDuration)) \n    0 // return an integer exit code \n\n```", "```cs\nnamespace FSConsole01 \n\nmodule Program = \n\n    [<EntryPoint>] \n    let main argv =  \n        printfn \"Hello F# world\" \n        0 // return an integer exit code \n\n```", "```cs\nA function labeled with the 'EntryPointAttribute' attribute must be the last declaration in the last file in the compilation sequence, and can only be used when compiling to a .exe \n\n```", "```cs\nnamespace FSConsole01 \n    open Microsoft.VisualStudio.TestTools.UnitTesting \n    open FsUnit.MsTest \n\n    module MathFunc = \n            let rec fact x =  \n                match x with \n                | 1 -> 1 \n                | a when a < 1 -> 1 \n                | _ -> x * fact (x-1)  \n\n    module FSConsoleUnitTest = \n\n        [<TestClass>] \n        type FactTest() = \n            class \n                [<TestMethod>] \n                member this.FactTest01() = \n                    MathFunc.fact 3 |> should equal 6 \n            end \n\n```"]