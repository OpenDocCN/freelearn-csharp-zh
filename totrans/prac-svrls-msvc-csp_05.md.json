["```cs\npublic class SampleFunction\n{\n  private readonly ILogger _logger;\n  public SampleFunction(ILoggerFactory loggerFactory)\n  {\n    _logger = loggerFactory.CreateLogger<SampleFunction>();\n  }\n  [Function(“SampleFunction”)]\n  public void Run([TimerTrigger(“*/5 * * * * *”)] TimerInfo myTimer)\n  {\n    _logger.LogInformation($”C# Timer trigger function executed at:\n                             {DateTime.Now}”);\n\n    if (myTimer.ScheduleStatus is not null)\n    {\n      _logger.LogInformation($”Next timer schedule at:\n                              {myTimer.ScheduleStatus.Next}”);\n    }\n  }\n} \n```", "```cs\npublic class ProcessBilling\n{\n  private readonly ILogger _logger;\n  public ProcessBilling(ILoggerFactory loggerFactory)\n  {\n    _logger = loggerFactory.CreateLogger<ProcessBilling>();\n  }\n  /// <summary>\n/// Every hour, between 08:00 AM and 05:59 PM, Monday through Saturday\n/// </summary>\n/// <param name=”myTimer”></param>\n  [Function(“ProcessBilling”)]\n  public void Run([TimerTrigger(“0 0 8-17 * * 1-6”)] TimerInfo myTimer)\n  {\n    _logger.LogInformation($”Time to process billing!”);\n    _logger.LogInformation($”Execution started at: {DateTime.Now}.”);\n    // TODO - Code for processing billing\n    _logger.LogInformation($”Process billing done: {DateTime.Now}.”);\n  }\n} \n```", "```cs\npublic class SampleFunction\n{\n  private readonly ILogger<SampleFunction> _logger;\n  public SampleFunction(ILogger<SampleFunction> logger)\n  {\n    _logger = logger;\n  }\n  [Function(nameof(SampleFunction))]\n  public async Task Run([BlobTrigger(“event-grid-samples/{name}”,\n    Source = BlobTriggerSource.EventGrid,\n    Connection = “ConnectionStringName”)] Stream stream, string name)\n  {\n    using var blobStreamReader = new StreamReader(stream);\n    var content = await blobStreamReader.ReadToEndAsync();\n    _logger.LogInformation($”C# Blob Trigger (using Event Grid) processed\n                             blob\\n Name: {name} \\n Data: {content}”);\n  }\n} \n```", "```cs\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing CarShareBackground;\nvar host = new HostBuilder()\n  .ConfigureFunctionsWebApplication()\n  .ConfigureAppConfiguration(config =>\n  {\n    config.AddUserSecrets<ProcessDriversLicensePhoto>(optional: true,\n      reloadOnChange: false);\n  })\n  .Build();\nhost.Run(); \n```", "```cs\n[Function(nameof(ProcessDriversLicensePhoto))]\npublic async Task Run([BlobTrigger(“drivers-license/{name}”,\n    Connection = “CarShareStorage”)] Stream myBlob, string name)\n{\n  StreamReader reader = new StreamReader(myBlob);\n  var message = reader.ReadToEnd();\n  _logger.LogInformation(“File detected”);\n} \n```", "```cs\nusing Azure.Storage.Queues.Models;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\nnamespace My_Best_Matches\n{\n  public class NewMatchTrigger\n  {\n    private readonly ILogger<NewMatchTrigger> _logger;\n    public NewMatchTrigger(ILogger<NewMatchTrigger> logger)\n    {\n      _logger = logger;\n    }\n    [Function(nameof(NewMatchTrigger))]\n    public void Run([QueueTrigger(“new-match”,\n      Connection = “CarSharingStorage”)] QueueMessage message)\n    {\n      _logger.LogInformation($”C# Queue trigger function processed:\n        {message.MessageText}”);\n    }\n  }\n} \n```"]