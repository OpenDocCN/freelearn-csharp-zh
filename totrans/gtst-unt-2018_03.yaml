- en: Designing the Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 2](bab37b44-932a-4277-884d-69b6bac37516.xhtml), *The Unity Interface*,
    we examined Unity''s user interface and paid specific attention to the most commonly
    used components that include: menus, Scene view, Game view, Project window, Hierarchy
    window, Inspector window, Toolbar, and Layouts. Becoming familiar with Unity''s
    interface gives us the confidence to move forward with the game engine and to
    explore additional interface components as we introduce new functionality necessary
    to create our game.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will design our game, *Cucumber Beetle*, so that we can create
    a development plan. Our game design will include all the functionality we want
    in our game, the player character, the non-player characters, game assets, animations,
    and more. We will use screen mock-ups, as well as narrative, to document our game's
    design. We will look at related concepts regarding using Unity for our game along
    the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will examine the following concepts in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Game concept
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gameplay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difficulty balance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why design our game, why not just start developing it? This question spawns
    from the excitement of developing games, especially with the Unity game engine.
    All games start with an idea. That idea is translated into a design, and that
    design is the basis for development and, eventually, the final game.
  prefs: []
  type: TYPE_NORMAL
- en: A game's design is like a blueprint for a house. You would not consider building
    a house without a blueprint, and it is an equally bad idea to develop a game without
    designing it first. The reason for this is to save time and frustration. For larger
    projects, time wasted also means unnecessary funds were expended. Imagine that
    you employed a project team of twelve developers, animators, and artists. If you
    shared your game idea, would they have enough to go on? Would they do great things,
    but not have a cohesive set of components for your game? All we are doing with
    our game design is documenting as much as we can in the beginning so that the
    development process is purposeful. Without question, you will continually modify
    your game's design during development, so having a strong base to start from is
    critical to your success.
  prefs: []
  type: TYPE_NORMAL
- en: Our game design will serve as the foundation for the look of our game, what
    the player's objectives are, what the gameplay will be, supporting user actions,
    animations, audio, artificial intelligence, and victory conditions. That is a
    lot to think about, and underscores the importance of translating the game idea
    into a game design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout the book we will be covering a range of components, however, in
    this section, we will cover those which are listed beneath:'
  prefs: []
  type: TYPE_NORMAL
- en: Game idea
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Winning and losing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game idea
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic concept of our *Cucumber Beetle* game is that it will be a 3D game
    featuring a Cucumber Man as the player character. The character must protect the
    cucumber patches, fighting off Cucumber Beetles. These beetles are intent on destroying
    the cucumber patches and anyone that gets in their way, including our Cucumber
    Man.
  prefs: []
  type: TYPE_NORMAL
- en: The Cucumber Man will harvest cherries from cherry trees and throw them at the
    Cucumber Beetles. This will be the only form of defense our Cucumber Man has against
    the Cucumber Beetles, except for running away.
  prefs: []
  type: TYPE_NORMAL
- en: Input controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is important to consider how players will interact with our game. The player
    will control the Cucumber Man using the standard set of controls. Players have
    an expectation that the industry norms for user controls will be implemented in
    games. So our default set of user input control, as shown here, will consist of
    the keyboard and mouse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbfa79de-693a-44fd-ac9e-61b43bf53398.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will configure and program our game so that user input from the keyboard
    matches the key and action pairings in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keyboard input** | **Action** |'
  prefs: []
  type: TYPE_TB
- en: '| Up arrow | Move forward/up |'
  prefs: []
  type: TYPE_TB
- en: '| Down arrow | Move back/down |'
  prefs: []
  type: TYPE_TB
- en: '| Left arrow | Move left |'
  prefs: []
  type: TYPE_TB
- en: '| Right arrow | Move right |'
  prefs: []
  type: TYPE_TB
- en: '| *W* | Move forward/up |'
  prefs: []
  type: TYPE_TB
- en: '| *S* | Move back/down |'
  prefs: []
  type: TYPE_TB
- en: '| *A* | Move left  |'
  prefs: []
  type: TYPE_TB
- en: '| *D* | Move right |'
  prefs: []
  type: TYPE_TB
- en: '| Space bar | Jump |'
  prefs: []
  type: TYPE_TB
- en: 'The mouse will also be a significant source of user input. We will implement
    two components using the mouse as indicated in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Mouse input** | **Action** |'
  prefs: []
  type: TYPE_TB
- en: '| Mouse movement | Rotate character |'
  prefs: []
  type: TYPE_TB
- en: '| Left button | Throw cherry |'
  prefs: []
  type: TYPE_TB
- en: The left mouse button will be our action button. We will need to ensure cherries
    are thrown only when the player has one or more cherries remaining.
  prefs: []
  type: TYPE_NORMAL
- en: Winning and losing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our winning condition will be when all the Cucumber Beetles have been eliminated.
    There will be two different ways the player can lose the game. The first losing
    condition is when all the cucumbers have been eaten by the Cucumber Beetles.  The
    second losing condition is if the player runs out of lives.
  prefs: []
  type: TYPE_NORMAL
- en: 'By this short description, you can tell there will be several things to keep
    track of, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of Cucumber Beetles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of cucumbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of Cucumber Man lives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our game will use several game objects, but only two game characters. The first
    game character is the Cucumber Man, and will be controlled by the player. The
    second game character is the Cucumber Beetle. This is a non-player character that
    is controlled by artificial intelligence. Let's look more closely at both of these
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber Man
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The player will play our game as the Cucumber Man, our game''s protagonist.
    This is a character that we will import for use in our game. It was created using
    Maya, a professional 3D modeling and animation software suite, and Photoshop.
    Here is a look at our Cucumber Man:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d26cced7-9dcb-42f0-aa9e-e1962d5fe27a.png)'
  prefs: []
  type: TYPE_IMG
- en: So, what can the Cucumber Man player character do? We already know we will be
    able to move him throughout our game environment using a combination of keyboard
    and mouse inputs. We also know that the space bar will cause him to jump and that
    the left mouse button, our action button, will cause him to shoot cherries.
  prefs: []
  type: TYPE_NORMAL
- en: Because the Cucumber Man is controlled by the human player, it is referred to
    as the **Player** **Character**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement the following animations for the Cucumber Man:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Idle**: This will play when the character is not being moved by the player.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Walk**: This is the animation that will play when the player causes the Cucumber
    Man to walk, regardless of direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run**: This animation is similar to the walk animation. It is faster and
    covers distances quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jump**: We will implement a jump whenever the space bar is pressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Die**: Should our character be overcome by the Cucumber Beetles, we will
    play this animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throw**: This is the animation that will cause the Cucumber Man to throw
    a cherry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other action our Cucumber Man can make is to collect cherries. We will implement
    this with an auto-collection system. Whenever the Cucumber Man is touching a cherry
    tree, we will increment the number of cherries he has by one.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement the Cucumber Man in [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml),
    *Implementing Our Player Character*.
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber Beetle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our game''s antagonist will be the Cucumber Beetle. We will control how many
    of them we want in our game and where they are placed. We will also control their
    behaviors through artificial intelligence. The Cucumber Beetle character was created
    using Maya and Photoshop, the same software pair used to create the Cucumber Man.
    Here is a look at our Cucumber Beetle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cab4dc5-3d0e-4c2f-834a-ea84a9b38f3c.png)'
  prefs: []
  type: TYPE_IMG
- en: The Cucumber Beetles will search for and consume cucumbers. We will determine
    how long it takes a cucumber to be consumed. As you can see in the preceding illustration,
    there are images for the cucumber beetle in its normal state, with all six legs
    on the ground, and standing up. The stand-up position will be used when it is
    attacking the Cucumber Man.
  prefs: []
  type: TYPE_NORMAL
- en: Because the Cucumber Beetle is controlled by artificial intelligence and not
    a human player, it is referred to as the **Non-Player** **Character**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement the following animations for the Cucumber Beetles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'While on the ground:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Idle**: This will play when the cucumber beetle is not searching, eating,
    or attacking.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ground Walk**: This is the animation that will play when the cucumber beetle
    is walking.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eating**: This animation will play when the cucumber beetle has located a
    cucumber and is eating it. Beetles are smaller than cucumbers, so it takes more
    than one bite.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ground Attack**: The cucumber beetle will attack the Cucumber Man with its
    feelers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stand then Idle**: This animation takes the cucumber beetle from being on
    the ground to standing up and remaining idle.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ground Death**: This animation will play when the Cucumber Man defeats a
    cucumber beetle in its on-ground position.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While standing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Walk**: We will give our Cucumber Beetles the ability to walk on their back
    two legs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run**: The Cucumber Beetles will be able to run towards the Cucumber Man
    on its back two legs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standing Attack**: When standing, the Cucumber Beetles will be able to attack
    the Cucumber Man with its top four legs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standing Death**: This animation will play when the Cucumber Man defeats
    a Cucumber Beetle in its standing position'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will require careful planning and scripting to create the desired Cucumber
    Beetle behaviors. The number and placement of the Cucumber Beetles are decisions
    we will need to make.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement the Cucumber Beetles in [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml),
    *Implementing Our Non-Player Characters*.
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The game will start with the player in the center of the game world. The Cucumber
    Man, controlled by the player, will need to defend the cucumber patches from the
    Cucumber Beetles. To fend off the Cucumber Beetles, the Cucumber Man will need
    to collect cherries from nearby cherry trees. The goal is to defeat all the Cucumber
    Beetles before the cucumbers in the cucumber patches are all gone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how we will make all this happen. The following game play components
    are covered in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Game world layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Point system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heads-Up Display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game world layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Will will create our game world in [Chapter 4](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml),
    *Creating Our Terrain*, and then add cameras and lighting effects in [Chapter
    5](101c3b96-a362-4913-925c-f22503f0f8a1.xhtml), *Lights, Cameras, and Shadows*.
    We will create a basic outdoor environment that consists of a large island surrounded
    by water. The water will be for aesthetics and boundary purposes. We will not
    make use of the water; after all, cucumbers cannot swim.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a mock-up of the shape our game world will take:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5afb8154-bd93-48a4-8f70-7c3812d4afce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are four basic things illustrated in the preceding mock-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Water**: This will just be used for our game world border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spawn Points**: There are five spawn points, and we can randomly spawn our
    player character to one after losing a life.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cherry Trees**: We will place four sizeable clumps of cherry trees in the
    game world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cucumber Patches**: These are not labeled in the mock-up, but are represented
    by the green scribbled areas. This represents the rough approximation of where
    the vast cucumber patches will be planted or, in our Unity terminology, placed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only item not represented in our mock-up is the placement of the Cucumber
    Beetles. We will place the beetles somewhat randomly through scripting. We will
    do that in [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing
    Our Non-Player Characters*.
  prefs: []
  type: TYPE_NORMAL
- en: Starting condition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When our game is first launched, we will have several starting conditions set.
    Here is a list of those conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber Man spawn point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number and placement of Cucumber Beetles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of cherries held by Cucumber Man
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number and placement of cucumbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each of these starting conditions.
  prefs: []
  type: TYPE_NORMAL
- en: The first starting condition is where to spawn the Cucumber Man. As you saw
    in our earlier mock-up, there will be five possible spawn points in the game.
    We will write a script to spawn the player in a random spot each time. While there
    are only five spots, it does add enough randomness into the game to make this
    a fun and challenging component.
  prefs: []
  type: TYPE_NORMAL
- en: The number and placement of Cucumber Beetles is the second starting condition.
    This is an important pair of decisions to make. If we decide poorly, the game
    is likely to be too easy or too hard and, in both of these situations, the game
    would not be challenging enough to make it fun to play. We will look at this issue
    in greater detail in the section titled *The difficulty balance* later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The number of cherries held by the Cucumber Man is our third starting condition.
    The Cucumber Man will start with zero cherries and, each time he is respawned,
    he will also have zero cherries. So, if the Cucumber Man has 319 cherries and
    is defeated by one or more Cucumber Beetles, the Cucumber Man will respawn with
    zero cherries, losing the 319 cherries he had.
  prefs: []
  type: TYPE_NORMAL
- en: Our fourth and final starting condition is the number and placement of cucumbers.
    This is an important set of considerations, and is tied to the placement and number
    of Cucumber Beetles. We will examine the possibilities and the likely outcomes
    of our decisions regarding this issue in the section titled *The difficulty balance* later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Point system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have established that we would track several components in the game.
    These are listed here along with the variable name that we will use in our scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Number of Cucumber Beetles:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numberOfCucumberBeetles`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of cucumbers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numberOfCucumbers`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of Cucumber Man lives:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`livesLeft`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Based on what we decided earlier regarding the end-of-game condition, we can
    apply the following mathematical checks to determine if the game has ended and
    what the outcome is. Each end-of-game condition is listed in the following table
    along with the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Condition number** | **End-of-game condition** | **Outcome** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `numberOfCucumbers == 0` | Cucumber Beetles Win |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `numberOfCucumberBeetles == 0` | Cucumber Man Wins |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `livesLeft == 0` | Cucumber Beetles Win |'
  prefs: []
  type: TYPE_TB
- en: In order to implement the three end-of-game conditions, we know we have to track
    the number of beetles, cucumbers, and lives. This is not optional. Where we do
    have flexibility is with what we display to the user. We will make that decision
    in the next section, *Heads-Up Display*.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are tracking key information that involves numbers, it makes it easy
    for us to implement a point system. We could, for example, give the player 50
    points each time a Cucumber Beetle is exterminated. We could also take away points
    each time a Cucumber Beetle takes a bite out of the Cucumber Man.
  prefs: []
  type: TYPE_NORMAL
- en: 'The point system that we will implement in our *Cucumber Beetle* game will
    consist of two types of events, those that result in points being added and those
    resulting in points being subtracted. Here is a table with the details of our
    point system:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **In-game event** | **Points** |'
  prefs: []
  type: TYPE_TB
- en: '| Start of Game | + 1,500  |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man Picks Cherry | + 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man Hits Cucumber Beetle with Cherry on the Ground | + 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man Exterminates Cucumber Beetle on the Ground | + 25 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man Hits Standing Cucumber Beetle with Cherry | + 50 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man Exterminates Standing Cucumber Beetle  | +100 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man Loses Life | - 500 |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the preceding table, we will start our player with 1,500
    points and subtract 500 each time a life is lost. This will ensure we do not have
    a negative point total, and is one less thing for us to check in our scripts.
    This also gives players a bonus for each life they save.
  prefs: []
  type: TYPE_NORMAL
- en: Heads-Up Display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have decided to keep track of information during gameplay that has value
    beyond calculating points and the end of game. The player will want to see this
    information as it tends to provide motivation and adds to the fun of the game.
    So, we will create a Heads-Up Display for the player, and dynamically update the
    data in the game.
  prefs: []
  type: TYPE_NORMAL
- en: A **Heads-Up Display** (**HUD**) is a visual layer of information that is always
    present on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a mock-up of what our **Heads-Up Display** will look like in our *Cucumber
    Beetle* game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce94e2d8-a01c-4956-ac23-7d1d9b2a285e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, there are six components to our HUD. Each of these are explained
    in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Health**: This will consist of a text label and a health meter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lives**: The icons underneath the Health text label signify how many lives
    remain. We will not add a label to this as its function will be clear to the player.
    We will use an image of the Cucumber Man as the icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Score**: The score will be presented in the top-right-hand corner of the
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cherries**: We will show the number of cherries directly beneath the score.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cucumbers**: The bottom left-hand-corner of the HUD contains two components.
    The first component is the number of cucumbers left in the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cucumber Beetles**: The number of Cucumber Beetles currently left in the
    game will be displayed in the bottom-left-hand corner of the HUD, below the number
    of cucumbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difficulty balance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of considerations to make when determining how difficult your
    game should be. If it is too difficult, players will lose interest, and if the
    game is too easy, it might not appeal to your intended audience. Some games include
    difficulty levels for users to select from. Other games have multiple levels,
    each with an increasing level of difficulty. There are several questions that
    we must contend with in order to achieve our desired difficulty balance.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will first look at the difficulty balance questions, followed
    by our implementation plan.
  prefs: []
  type: TYPE_NORMAL
- en: Difficulty balance questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of questions about our game that we need to consider in our
    game design. A review of the questions in this section will help us gain an appreciation
    for the issues that even a simple game such as ours must contend with to achieve
    the desired difficulty balance.
  prefs: []
  type: TYPE_NORMAL
- en: 'This first set of questions are related to the overall implementation of difficulty
    in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: Should we have different levels of difficulty, selectable by the player?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many different difficulty levels should there be?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What will the difficulty levels be called?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What specifically will be different with each difficulty level?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should we have multiple game levels, each with an increased amount of difficulty?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many different game levels should there be?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What will the game levels be called?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What specifically will be different with each game level?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following questions regarding the Cucumber Beetles in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: How many Cucumber Beetles should there be?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How passive or aggressive should the Cucumber Beetles be?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At what distance should a cucumber beetle become aware of the Cucumber Man?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How effective should the Cucumber Beetles be in finding cucumbers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much damage should a Cucumber Beetle inflict on the Cucumber Man with each
    attack?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much damage can a Cucumber Beetle endure before it dies?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should Cucumber Beetles communicate and help each other in coordinated attacks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This next set of questions refers to our playable character, the Cucumber Man:'
  prefs: []
  type: TYPE_NORMAL
- en: How many lives should the character have?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much damage will the character take from a single cucumber beetle attack?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much damage can the character endure before they die?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should the character be able to outrun Cucumber Beetles?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should there be a maximum number of cherries held by the character? If so, how
    many?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where should the player spawn? In a safe area?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the character loses a life, should they respawn without their cherries?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the character respawns, should full health be restored?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also have cucumbers and cherries to account for in our game. Here are a couple
    of questions for each of those game assets that we will implement in our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cucumbers:'
  prefs: []
  type: TYPE_NORMAL
- en: How many bites should it take for a cucumber beetle to consume a cucumber?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many cucumbers should there be in the game?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where should the cucumbers be located in the game environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cherries:'
  prefs: []
  type: TYPE_NORMAL
- en: At what pace should the player be able to gather cherries?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What will be the maximum number of cherries the Cucumber Man can have?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much damage will the cherries inflict on the Cucumber Beetles?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many cherries will be available in the game?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, there are several questions that we need to answer as part of
    our design. Some of the questions may seem redundant as they relate to more than
    one component in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Based on the questions posed in the last section, we must come up with some
    answers. So, let's do that here. This set of answers will serve as the implementation
    plan for our difficulty balance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first set of decisions focuses on the overall game concept. Here are those
    decisions:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement one game level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provide the user with three game difficulty settings. Setting names are provided
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm a Baby Cucumber (Easiest)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I Can Handle This (Moderate)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bring It! (Most difficult)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we''ve decided to create three game levels, we must determine how
    they will be different. This is easily managed by using a matrix. As we fill in
    the matrix, we will be able to document answers to most of the previously listed
    questions. Here is what we will refer to as the *Difficulty Implementation Matrix*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Component** | **I''m a Baby Cucumber** | **I Can Handle This** | **Bring
    It!** |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Cucumber Beetles | X | X * 2 | X * 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Damage from Cucumber Beetles (to Cucumber Man) | -5 health points per second
    | -10 health points per second | -20 health points per second |'
  prefs: []
  type: TYPE_TB
- en: '| Damage from Cucumber Beetles (to Cucumbers) | -5 points per second | -7 points
    per second | - 9 points per second |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Beatle Starting Health | X | X * 2 | X * 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man Starting Health | X | X * .75 | X * .5 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Starting Health | 300 | 400 | 500 |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Cucumbers | X | X * .75 | X * .5 |'
  prefs: []
  type: TYPE_TB
- en: '| Cherry Gathering Rate | 1 cherry per second | 1 cherry every 2 seconds |
    1 cherry every 3 seconds |'
  prefs: []
  type: TYPE_TB
- en: '| Maximum Number of Cherries Held by Cucumber Man | 99 | 75 | 50 |'
  prefs: []
  type: TYPE_TB
- en: '| Damage from Cherry (to Cucumber Beetles) | X | X * .75 | X *.50 |'
  prefs: []
  type: TYPE_TB
- en: 'There will also be a set of decisions that will not change based on the user-selected
    difficulty level. Here is a list of those decisions:'
  prefs: []
  type: TYPE_NORMAL
- en: The aggressiveness of the Cucumber Beetles will not change. We will script them
    so that if they are aware of the Cucumber Man, they will attack him.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will establish a pretty small vision area for the Cucumber Beetles making
    it easy for the Cucumber Man to sneak past them and perhaps, more importantly,
    outrun them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber Beetles will be able to easily find cucumbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber Beetles will not communicate with one another. So, there will be no
    coordinated attacks. This does not mean that more than one Cucumber Beetle can't
    attack the Cucumber Man at the same time. All Cucumber Beetles' within range of
    the Cucumber Man will attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cucumber Man will start with three lives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will not limit the number of cherries a player can collect, but they will
    all be lost as part of the respawn process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respawning will be randomized between the five respawn points previously identified
    in the game's mock-up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cucumber Man will start with full health after a respawn.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cucumbers will be placed randomly in the game within the cucumber patches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of cherry trees and cherries will not vary with different difficulty
    levels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our project will consist of a lot of assets. So far we have identified and detailed
    our planned use of the Cucumber Man, our player characters, and the Cucumber Beetles,
    our non-player character. We will also use cherry trees, cherries, and cucumber
    patches. Let's briefly look at those in the next section, *Custom assets*.
  prefs: []
  type: TYPE_NORMAL
- en: Custom assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several custom assets have been created using Maya and Photoshop for use in
    our game. The first set of assets are two forms of cucumber patches, both shown
    in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/415cb1cc-0c91-48ad-9dfd-6ecce439fed9.png)'
  prefs: []
  type: TYPE_IMG
- en: We will use these cucumber patches to cover large sections of our game environment,
    as identified earlier in this chapter. We have two different patch formations
    to help create an authentic and non-repetitive look to the game environment. We
    will also rotate the patches to add variability to the overall visual appearance
    of the ground covering.
  prefs: []
  type: TYPE_NORMAL
- en: 'A custom cucumber will also be provided in our game. While there might be hundreds
    of them in the game, we will use one base cucumber, pictured here, and replicate
    it throughout the game environment. We can modify the size and rotation to ensure
    we have what will appear to be a lot of unique cucumbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b81e509-42da-43c8-8568-a8bcd77f5e35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our next custom asset is a cherry tree. Our base tree is shown here and has
    a unique form. We can alter the size and rotation of this tree to create the visual
    of a bunch of unique trees. Certainly this is not an authentic cherry tree, but
    it will be suitable for our purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8e50bd3-6060-4a77-9ea4-0fdcc3fe1353.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Although our cherry trees have cherries on them, they are all part of the tree
    and not separate objects. So, our player character can collect cherries from the
    cherry trees, but there will be no visual indication that the cherries have been
    picked. We will update our HUD to provide that indication. For throwing cherries
    at Cucumber Beetles, we will use the cherry shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02cc3787-9dc3-409f-a385-14eb891fadb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Standard assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the custom assets created for this game, we will use many of
    Unity's standard assets including textures, materials, and 3D objects. We will
    start using textures and materials in [Chapter 4](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml),
    *Creating Our Terrain*. We will create our own 3D assets using Unity's native
    tools, as well as importing additional ones in [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml),
    *Creating and Importing 3D Object for Our Game*.
  prefs: []
  type: TYPE_NORMAL
- en: Organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we do not have a plan to be organized, our project can quickly get out of
    hand. Unity has great search support for project components, but we would rather
    be able to quickly navigate to our assets. Here is the basic structure that we
    will make as we start creating our game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5128e255-4c28-46f3-8779-c2a55ad20bd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we fully designed our game, *Cucumber Beetle*, and we plan
    to use our design to drive our development efforts. Our game design includes functionality,
    the player character, the non-player characters, game assets, animations, and
    more. We used screen mock-ups to help document our game's design. In addition,
    we planned our game's difficulty balance to help ensure the game is appropriately
    difficult based on user selection.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to create the game's terrain. You will
    gain exposure to shaping tools and terrain painting. You will also learn how to
    add vegetation and water to our terrain. By the end of the next chapter, you will
    have created the game world for the *Cucumber Beetle* game.
  prefs: []
  type: TYPE_NORMAL
