["```cs\nThe four adjacent digits (9989) being highlighted in the 1000-digit numbers that have the greatest product are as following: \n9 x 9 x 8 x 9 = 5832\\. \n\n73167176531330624919225119674426574742355349194934 \n96983520312774506326239578318016984801869478851843 \n85861560789112949495459501737958331952853208805511 \n12540698747158523863050715693290963295227443043557 \n66896648950445244523161731856403098711121722383113 \n62229893423380308135336276614282806444486645238749 \n30358907296290491560440772390713810515859307960866 \n70172427121883998797908792274921901699720888093776 \n65727333001053367881220235421809751254540594752243 \n52584907711670556013604839586446706324415722155397 \n53697817977846174064955149290862569321978468622482 \n83972241375657056057490261407972968652414535100474 \n821663704844031\n9989\n\n0008895243450658541227588666881 \n16427171479924442928230863465674813919123162824586 \n17866458359124566529476545682848912883142607690042 \n24219022671055626321111109370544217506941658960408 \n07198403850962455444362981230987879927244284909188 \n84580156166097919133875499200524063689912560717606 \n05886116467109405077541002256983155200055935729725 \n71636269561882670428252483600823257530420752963450 \n\nFind the five adjacent digits in the same 1000-digit number that has the greatest product. What is the value of this product? \n\n```", "```cs\n[<AutoOpen>] \nmodule HugeNumber \nlet hugeNumber = \n    \"73167176531330624919225119674426574742355349194934\\ \n    96983520312774506326239578318016984801869478851843\\ \n    85861560789112949495459501737958331952853208805511\\ \n    12540698747158523863050715693290963295227443043557\\ \n    66896648950445244523161731856403098711121722383113\\ \n    62229893423380308135336276614282806444486645238749\\ \n    30358907296290491560440772390713810515859307960866\\ \n    70172427121883998797908792274921901699720888093776\\ \n    65727333001053367881220235421809751254540594752243\\ \n    52584907711670556013604839586446706324415722155397\\ \n    53697817977846174064955149290862569321978468622482\\ \n    83972241375657056057490261407972968652414535100474\\ \n    82166370484403199890008895243450658541227588666881\\ \n    16427171479924442928230863465674813919123162824586\\ \n    17866458359124566529476545682848912883142607690042\\ \n    24219022671055626321111109370544217506941658960408\\ \n    07198403850962455444362981230987879927244284909188\\ \n    84580156166097919133875499200524063689912560717606\\ \n    05886116467109405077541002256983155200055935729725\\ \n 71636269561882670428252483600823257530420752963450\" \n\n```", "```cs\n// Imperative monolithic solution a-la C/C++ \n#load \"HugeNumber.fs\" \nlet number = hugeNumber.ToCharArray() \nlet mutable maxProduct = 0 \nlet charZero = int('0') \nfor i in 0..995 do \n  let mutable currentProduct = 1 \nfor j in 0..4 do \n  currentProduct <- currentProduct * (int(number.[i + j]) -      charZero) \nif maxProduct < currentProduct then \n  maxProduct <- currentProduct \nprintfn \"%s %d\" \"Imperative solution:\" maxProduct \n\n```", "```cs\nfor i in 0..995 do \n  let mutable currentProduct = 1 \nfor j in 0..4 do \n  currentProduct <- currentProduct * (int(number.[i + j]) -     charZero) \nif maxProduct < currentProduct then \n  maxProduct <- currentProduct \n\n```", "```cs\n// Object-oriented solution a-la C# with Iterator pattern \n#load \"HugeNumber.fs\" \n\nopen System \nopen System.Collections.Generic \n\ntype OfDigits(digits: char[]) = \n    let mutable product = 1 \n    do \n        if digits.Length > 9 then // (9 ** 10) > Int32.MaxValue \n            raise <| ArgumentOutOfRangeException \n              (\"Constrained to max 9 digit numbers\") \n        let charZero = int '0' in \n        for d in digits do \n            product <- product * ((int d) - charZero) \n        member this.Product \n            with get() = product \n\ntype SequenceOfDigits(digits: string, itemLen: int) = \n    let collection: OfDigits[] = \n       Array.zeroCreate(digits.Length -itemLen + 1) \n    do \n      for i in 0 .. digits.Length - itemLen do \n        collection.[i] <- OfDigits(digits.[i..\n           (i+itemLen-1)].ToCharArray()) \n    member this.GetEnumerator() = \n        (collection :> IEnumerable<OfDigits>).GetEnumerator() \n\nlet mutable maxProduct = 1 \nfor item in SequenceOfDigits(hugeNumber,5) do \n    maxProduct <- max maxProduct item.Product \n\nprintfn \"%s %d\" \"Object-oriented solution:\" maxProduct \n\n```", "```cs\nlet mutable product = 1 \n\n```", "```cs\nlet charZero = int '0' in \nfor d in digits do \n  product <- product * ((int d) - charZero) \n\n```", "```cs\nmember this.Product with get() = product \n\n```", "```cs\nmember this.GetEnumerator() =  (collection :> IEnumerable<OfDigits>).GetEnumerator() \n\n```", "```cs\nlet mutable maxProduct = 1 \nfor item in SequenceOfDigits(hugeNumber,5)\n  do  maxProduct <- max maxProduct item.Product \n\n```", "```cs\n#load \"HugeNumber.fs\" \nhugeNumber |> (Seq.map (string >> int) >> Seq.windowed 5 \n>> Seq.map (Seq.reduce (*)) >> Seq.max \n>> printfn \"%s %d\" \"Functional solution:\") \n\n```"]