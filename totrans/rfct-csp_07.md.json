["```cs\n[Fact]\npublic void NewAccountShouldHaveStartingBalance() {\n  // Arrange\n  int expectedMiles = 100;\n  // Act\n  MileageTracker tracker = new();\n  // Assert\n  Assert.Equal(expectedMiles, tracker.Balance);\n}\n```", "```cs\npublic class MileageTracker {\n  public IEnumerable<object> Balance { get; set; }\n}\n```", "```cs\npublic class MileageTracker {\n  public int Balance { get; set; }\n}\n```", "```cs\npublic class MileageTracker {\n  public int Balance { get; }\n}\n```", "```cs\npublic class MileageTracker {\n  public int Balance { get; } = 100;\n}\n```", "```cs\npublic class MileageTracker {\n    private const int SignUpBonus = 100;\n    public int Balance { get; } = SignUpBonus;\n}\n```", "```cs\n[Fact]\npublic void AddMileageShouldIncreaseBalance() {\n  // Arrange\n  MileageTracker tracker = new();\n  // Act\n  tracker.AddMiles(50);\n  // Assert\n  Assert.Equal(150, tracker.Balance);\n}\n```", "```cs\npublic void AddMiles(int v) {\n  throw new NotImplementedException();\n}\n```", "```cs\npublic class MileageTracker {\n    private const int SignUpBonus = 100;\n    public int Balance { get; set; } = SignUpBonus;\n    public void AddMiles(int miles) {\n      Balance += miles;\n    }\n  }\n}\n```", "```cs\n[Fact]\npublic void RedeemMileageShouldDecreaseBalance() {\n    // Arrange\n    MileageTracker tracker = new();\n    tracker.AddMiles(900);\n    // Act\n    tracker.RedeemMiles(250);\n    // Assert\n    Assert.Equal(750, tracker.Balance);\n}\n```", "```cs\npublic class MileageTracker {\n    private const int SignUpBonus = 100;\n    public int Balance { get; set; } = SignUpBonus;\n    public void AddMiles(int miles) {\n      Balance += miles;\n    }\n    public void RedeemMiles(int miles) {\n      Balance -= miles;\n    }\n  }\n}\n```", "```cs\n[Fact]\npublic void RedeemMileageShouldPreventNegativeBalance() {\n    // Arrange\n    MileageTracker tracker = new();\n    int startingBalance = tracker.Balance;\n    // Act\n    tracker.RedeemMiles(2500);\n    // Assert\n    Assert.Equal(startingBalance, tracker.Balance);\n}\n```", "```cs\npublic void RedeemMiles(int miles) {\n  if (Balance >= miles) {\n    Balance -= miles;\n  }\n}\n```", "```cs\n[Theory]\n[InlineData(900, 250, 750)]\n[InlineData(0, 2500, 100)]\npublic void RedeemMileageShouldResultInCorrectBalance(\n  int addAmount, int redeemAmount, int expectedBalance) {\n    // Arrange\n    MileageTracker tracker = new();\n    tracker.AddMiles(addAmount);\n    // Act\n    tracker.RedeemMiles(redeemAmount);\n    // Assert\n    Assert.Equal(expectedBalance, tracker.Balance);\n}\n```"]