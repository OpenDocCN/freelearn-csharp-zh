- en: Chapter 3. Initial Setup – Creating the BaseApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to create a Hello World application from scratch.
    The application will be called BaseApp and we will use it's structure as a starting
    point in further chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project with TinderBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a project from scratch on Mac OS X (Xcode 3 and 4+)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a project from scratch on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not have much in common with the BasicApp from the previous chapter
    except the basic structure, which will be common to all Cinder projects.
  prefs: []
  type: TYPE_NORMAL
- en: TinderBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to create a Cinder project is to use its integrated tool called
    **TinderBox**. You can find it in the `cinder/tools/` directory. This will work
    with both Mac OS X and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Let's give it a try. Open TinderBox application. If you are doing it for the
    first time, you will have to point to your Cinder directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![TinderBox](img/9564_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you've done that, the TinderBox project setup window will appear. Choose
    **Basic App** from the **Target** and **OpenGL** from the **Template** drop-down
    lists. Enter `BaseApp` in the **Project Name** field. Make sure that you have
    **Base** in the **Naming Prefix** field.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For those who use Cinder 0.8.5, there is no **Target** list in the new TinderBox.
    You have to choose the **Basic OpenGL** template. Also, there is no **Naming Prefix**
    field in the new TinderBox, so just ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a directory where you will store your Cinder projects in the **Location**
    field. Mine is `/Users/kr15h/Documents/CinderProjects/` (`C:\Users\kr15h\Documents\CinderProjects\`
    on Windows).
  prefs: []
  type: TYPE_NORMAL
- en: Leave **HEAD** in the **Cinder Version** field and choose **Xcode** in the **Compilers**
    section. Choose **Visual C++ 2010** if you're using Windows or both if you plan
    to develop using both operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create**!
  prefs: []
  type: TYPE_NORMAL
- en: Your project is ready! Navigate to your Cinder project's folder that you specified
    in the **Location** field and you'll find a folder called `BaseApp` there. You
    will find an Xcode project file in the `xcode` directory (Visual C++ 2010 project
    file in the `vc10` directory on Windows).
  prefs: []
  type: TYPE_NORMAL
- en: Open `BaseApp.xcodeproj` (`BaseApp.sln` on Windows).
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to build and run it. You should see the output as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TinderBox](img/9564_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nothing interesting is drawn in the window yet. We will make some changes a
    bit later, but if you are able to compile, run, and see this, you are the master!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project from scratch (Mac OS X)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of us just want to do it the difficult way, which is not so difficult actually,
    but involves certain steps that have to be remembered and understood. What if
    there was no TinderBox? No problem!
  prefs: []
  type: TYPE_NORMAL
- en: Here we will split up in two groups again—this time depending on the version
    of Xcode we are using. There is the old way (Xcode 3) and the new way (Xcode 4+).
    You can check the version by opening the Xcode and selecting **AboutXcode** from
    the **Xcode** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using Cinder 0.8.5, be aware of the fact that the minimum required
    Mac OS X version is 10.7 and you do need Xcode 4.4+.
  prefs: []
  type: TYPE_NORMAL
- en: Basic project setup (Xcode 3)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go to your Cinder project''s directory, which in my case is `/Users/kr15h/Documents/CinderProjects/`.
    Create an empty directory for our new project and name it `BaseApp`. Create another
    directory inside it and call it `src`. It should look like the one shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic project setup (Xcode 3)](img/9564_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Open up the Xcode and select **New Project** from the **File** menu. Select
    the **Mac OS X Application** category and choose **Cocoa Application**. Click
    on **Choose**, browse to the directory we created earlier (`CinderProjects/BaseApp`),
    and then click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is recommended to close the Xcode, browse to your newly created project
    directory, and rename the Xcode project folder (`BaseApp` inside BaseApp—the one
    that is parent to the .`xcodeproj` file) to `xcode`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic project setup (Xcode 3)](img/9564_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now open up the `BaseApp.xcodeproj` file. We have to remove some files that
    we won't need. These files include `main.m`, `InfoPlist.strings`, `MainMenu.xib`
    as well as `BaseAppAppDelegate.m` and `BaseAppAppDelegate.h`. Click on **Also
    Move to Trash** when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create our first source file. Right-click on the **Classes** folder in
    the **Xcode Project Navigator** pane and select **Add** | **New File**. Choose
    **C++ File** from the **C and C++** category. Name it `BaseApp` and uncheck the
    **Also create "BaseApp.h"** option. For the location, choose the `BaseApp/src`
    folder that we created earlier and click on **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: Basic project setup (Xcode 4+)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open up Xcode and select **New** | **New Project** from the **File** menu. Select
    the **Application** item under the **Mac OS X** category and choose **Cocoa Application**.
    Click on **Next**. Enter `BaseApp` as **Product Name** and something, for example,
    `com.mycompany` as **Company Identifier**. Click on **Next** again and you will
    be prompted to choose the location for your project. Browse to the directory we
    created earlier (`CinderProjects/BaseApp`) and click on **Create**.
  prefs: []
  type: TYPE_NORMAL
- en: Close the Xcode (completely by pressing *Cmd* + *Q*) and navigate yourself to
    the BaseApp project directory. You can see two folders there, `BaseApp` and `src`.
    Rename `BaseApp` to `xcode`—all the Xcode-relevant stuff will be stored there
    and all the code that will be stored in the `src` directory is meant to be used
    in every other IDE. This is not a law, it is just how Cinder sample projects are
    being organized and that's a good way of keeping a cross-platform code project
    well organized. This is done to avoid the need to create a separate version of
    the source files for each platform and IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `BaseApp.xcodeproj` Xcode project file. We are going to remove some
    files that we won't need. In the Project Navigator, under the **BaseApp** folder,
    select and delete `AppDelegate.h`, `AppDelegate.m`, and `MainMenu.xib`. Click
    on **Delete** when prompted to remove the actual files, not just the references.
    Under the **Supporting files** folder, select and remove `main.m` and `BaseApp-Prefix.pch`.
    Click on **Delete** again when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create our first C++ source file. Right-click on the **BaseApp** folder
    in the Project Navigator and choose the **New File** option. Select **C++ File**
    under the **Mac OS X** and **C and C++** categories. A **Save As** dialog will
    appear. Navigate to the `src` directory of our `BaseApp` project (`BaseApp/src`).
    Name the file as `BaseApp` and click on **Create**.
  prefs: []
  type: TYPE_NORMAL
- en: Adding code (Xcode 3 and 4+)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the file we just created (`BaseApp.cpp`) in the editor and enter the following
    piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you try to compile and run the application, you will see that it is not possible.
    Some things are still missing and those are the connections with Cinder libraries
    and headers.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Cinder (Xcode 3)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Under the **Project** menu, select **Edit Project Settings**. Go to the **Build**
    tab and in the **Configuration** select field, choose **All Configurations**.
    Let's add a user-defined build setting that will prove itself useful in a moment.
    This user-defined setting will store the location of the Cinder directory relative
    to our project. Click on the little gear button at the bottom-left corner of the
    **Project Settings** window and choose **Add User-Defined Setting**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to Cinder (Xcode 3)](img/9564_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Name it as `CINDER_PATH` and set the value to the location of Cinder directory
    /`Users/You/cinder` (replace `You` with your username).
  prefs: []
  type: TYPE_NORMAL
- en: Now we have to make use of this newly created variable. Scroll to the **Search
    Paths** section and modify the **User Header Search Paths** setting. Set the value
    to `$(CINDER_PATH)/include`. With that done, go to **Header Search Paths** (notice
    that there is no user in front of it) and set it to `$(CINDER_PATH)/boost`.
  prefs: []
  type: TYPE_NORMAL
- en: Then go to the **Architectures** section and set the **Architectures** variable
    to `i386`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have to tell Xcode where to find Cinder libraries for linking. Find
    the **Linking** section and change the **Debug** field under **Other Linker Flags**
    to `$(CINDER_PATH)/lib/libcinder_d.a` and the **Release** field to `$(CINDER_PATH)/lib/libcinder.a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for the final thing. We need to add Mac OS X frameworks that are needed
    for our Cinder applications. Close the **Project Settings** panel and right-click
    on the **Frameworks** folder in the Xcode Project Navigator and go to **Add**
    | **Existing Frameworks**. Then, select the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Accelerate.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioToolbox.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioUnit.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoreAudio.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoreVideo.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OpenGL.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QTKit.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QuickTime.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile and run the project. Success! Now, you are ready to go to the *Final
    Adjustments* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Cinder (Xcode 4+)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a user-defined variable with the path to our main
    Cinder location:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **BaseApp** project icon in the Xcode Project Navigator pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **BaseApp** target under the **Targets** category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that we are making changes to all configurations (select **All** and
    **Combined**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Build Setting** button and select **Add User-Defined Setting**
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call it `CINDER_PATH` and enter the path to the place you copied your Cinder
    files.![Connecting to Cinder (Xcode 4+)](img/9564_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have to make use of this newly created variable. Scroll to the **Search
    Paths** section and modify the **User Header Search Paths** setting. Set the value
    to `$(CINDER_PATH)/include`. With that done, go to **Header Search Paths** (notice
    that there is no user in front of it) and set it to `$(CINDER_PATH)/boost`.
  prefs: []
  type: TYPE_NORMAL
- en: Then go to the **Architectures** section and set the **Architectures** variable
    to `i386`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have to tell Xcode where to find Cinder libraries for linking. Find
    the **Linking** section, and change the **Debug** field under **Other Linker Flags**
    to `$(CINDER_PATH)/lib/libcinder_d.a` and the **Release** field to `$(CINDER_PATH)/lib/libcinder.a`.
  prefs: []
  type: TYPE_NORMAL
- en: There is another thing that Xcode added automatically for us, a link to the
    prefix header file that we deleted earlier. This will throw an error while compiling
    because the compiler won't be able to find the prefix header file. Go to the **Apple
    LLVM compiler 3.0 – Language** tab and clear out the **Prefix Header** field for
    both **Debug** and **Release**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have to link our application to the Mac OS X framework libraries.
    To do that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Build Phases** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Link Binary With Libraries** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Items** button to choose frameworks.![Connecting to Cinder
    (Xcode 4+)](img/9564_03_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the following frameworks and click on **Add**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Accelerate.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioToolbox.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioUnit.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoreAudio.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoreVideo.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OpenGL.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QTKit.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QuickTime.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's it! Compile and run the project. Success! Now, you are ready to go to
    the **Final Adjustments** section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project from scratch (Windows)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So you are on Windows, right? Let's create an empty project in Visual C++. We
    will link it to all the necessary libraries and make sure that it is possible
    to compile the project before we move on.
  prefs: []
  type: TYPE_NORMAL
- en: Go to your Cinder project directory (which in my case is `C:\Users\kr15h\Documents\CinderProjects\`)
    and create a new directory `BaseApp` there.
  prefs: []
  type: TYPE_NORMAL
- en: Open Microsoft Visual C++ 2010 and go to **File** | **New** | **Project**. Choose
    **Win32 Project** from the **Win32** category. Enter the name `BaseApp` in the
    **Name** field and your BaseApp project directory that we just created in the
    **Location** field. Make sure that the **Create directory for solution** checkbox
    is not checked and the solution name is `BaseApp`—the same as the name of the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Application Settings** dialog, check the **Empty project** checkbox
    and make sure that you choose **Windows application** as the **Application** type.
    Click on **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: Close Visual C++ and go to the `BaseApp` project directory. You will see another
    directory with a name `BaseApp` inside it—rename it to `vc10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new directory in the same level where the `vc10` folder is and rename
    it to `src`. Open the `BaseApp.sln` file in the `vc10` folder. Create a new C++
    file. Choose **File** | **New** **File**. In the dialog box, choose the **Visual
    C++** template category and select **C++ File**. Click on **Open**. A blank file
    will open in the editor. Enter the following piece of code there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Go to **File** | **Save As**, navigate to the `BaseApp\src` directory, and save
    the file with the name `BaseApp.cpp`. To keep things organized, navigate to the
    **BaseApp** folder in the Explorer and click-and-drag it to the **Source Files**
    directory in the Visual C++ 2010 Solution Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: You won't be able to compile and run it yet. There are some more things to do.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Project** | **BaseApp Properties**. Choose **All Configurations** in
    the **Configurations** select field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **C/C++** category in the left column and find the **Additional
    Include Directories** field in the right column. Add the following paths there:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\cinder\include`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\cinder\boost`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **Linker** in the left column and edit value of the **Additional Library
    Directories** field. You have to enter the following two paths there:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\cinder\lib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`C:\cinder\lib\msw`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **OK**. Now select the **Debug** configuration and click on **Input**
    under **Linker** in the left column of the **Project Properties** window. Add
    `cinder_d.lib` to the **Additional Dependencies** field and `LIBCMT` in the **Ignore
    Specific Default Libraries** field.
  prefs: []
  type: TYPE_NORMAL
- en: With that done, select the **Release** configuration and add `cinder.lib` to
    the **Additional Dependencies** field.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **OK**. Build and run the application. A window with a black background
    should appear. If so, you are the master and we may continue with the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Final adjustments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No matter what kind of setup you choose, you'll have to edit one single file
    that is located in the same place relative to the project directory and whose
    name is the same in all configurations, `src/BaseApp.cpp`. Open it. We will try
    to understand what the different lines of code mean.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These are the initial `include` statements that are responsible for including
    all the necessary Cinder stuff before we start to write our actual Cinder code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we tell the compiler that we are going to use some namespaces. We do that
    to avoid writing the namespace names before the variables and methods that are
    defined in those namespaces in our code. So, these lines are here just to make
    our code more readable and our creative lives easier. We are not adding the `gl`
    namespace here, because we want to keep the OpenGL drawing code distinguishable
    from all other code in the file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the definition of our base application class. It extends Cinder AppBasic—it
    is a super class that contains all the basic functionality that we would need
    to code ourselves if there was no Cinder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These are the methods that we are going to override in this class. These methods
    can be considered the most important in Cinder, because here you can define what
    will be done in the main run loop of the program.
  prefs: []
  type: TYPE_NORMAL
- en: '`setup()` is for setting up your program and it is executed just once at the
    beginning.'
  prefs: []
  type: TYPE_NORMAL
- en: '`update()` is called for every frame before the `draw()` function (the default
    Cinder frame rate is 30 fps) and here you should put all your calculations, data
    retrieval, and analysis code.'
  prefs: []
  type: TYPE_NORMAL
- en: '`draw()` is for drawing things on the screen. As `update()` takes care of all
    the calculations, you can use the results here in order to draw something on the
    screen. It can be 2D or 3D text, 2D or 3D shapes—a certain point in a movie file.
    Choose whatever you want, but try to use this method just for drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then there are implementations of the methods (after the class declaration
    that starts with the class `BaseApp : public AppBasic {` and ends with a closing
    bracket `}`) and a line of code that is responsible for launching your program
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This tells Cinder that it has to run your program (`BaseApp`) with the help
    of `RendererGl`. `RendererGl`, one of the available renderers in Cinder. It uses
    OpenGL for rendering and that lets you use the classes and functions defined in
    the `gl::` namespace as well as pure OpenGL functions.
  prefs: []
  type: TYPE_NORMAL
- en: There are some other renderers available in Cinder, for example, `Renderer2d`
    that can be used in combination with Cairo vector-graphics Cinder namespace. It
    uses the `Cairo::createWindowSurface()` function for drawing and it may be not
    so fast as when using OpenGL.
  prefs: []
  type: TYPE_NORMAL
- en: OK, now we are ready to add some visual feedback to our program. We do it inside
    the implementation of the `draw()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s draw some lines. Edit the `draw()` method implementation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Before we begin writing the actual drawing code, let me explain to you the difference
    between Cinder and OpenGL coordinate space.
  prefs: []
  type: TYPE_NORMAL
- en: In Cinder (as in many other creative coding frameworks and 2D graphics software),
    we make use of the so called fourth quadrant of the 2D Cartesian coordinate system.
    That means that the point (0, 0) is located at the top-left corner of the screen.
    To the right from that point all the x values go positive, and downwards from
    it all the y values go positive.
  prefs: []
  type: TYPE_NORMAL
- en: It is different with OpenGL. All four quadrants are used and the point (0, 0)
    is located in the center of the screen. You might remember this from math classes
    at school—to the left from the (0, 0) point x values go negative, to the right
    they go positive. Downwards from the (0, 0) point, the y values go negative, and
    upwards they go positive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Final adjustments](img/9564_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Cinder `gl` namespace methods does the conversion from the "top-left-centered"
    coordinate system to the "actually-centered" for us. So let''s draw:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile and run the project. You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Final adjustments](img/9564_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We've created a great base for our future applications! We are going
    to re-use it's structure while going through the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a base application. We used two different
    approaches—a simple (by using TinderBox) and a difficult one (by creating a project
    from scratch). The former lets you do it fast, but the latter gives you a deeper
    insight into how things work.
  prefs: []
  type: TYPE_NORMAL
