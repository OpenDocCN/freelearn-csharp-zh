["```cs\n   public void ConfigureServices(IServiceCollection services)\n   {\n       services.AddMvc(); \n   }\n\n   public void Configure(IApplicationBuilder app, IHostingEnvironment \n   env)\n   {\n       if (env.IsDevelopment())\n       {\n           app.UseDeveloperExceptionPage();\n           app.UseBrowserLink();\n       }\n       else\n       {\n           app.UseExceptionHandler(\"/Home/Error\");\n       }\n       app.UseStaticFiles();\n       app.UseMvc(routes =>\n {\n routes.MapRoute(\n name: \"default\",\n template: \"{controller=Home}/{action=Index}/{id?}\");\n });\n   }\n```", "```cs\nhttp://localhost:9596/packt/Books/Index/2\n```", "```cs\npublic class BooksController: Controller\n{\n    public IActionResult Index(int id)\n    {\n         return this.View();\n    }\n}\n```", "```cs\npackt/{controller=Home}/{action=Index}/{id:int?}\n```", "```cs\n routes.MapRoute(\n                   name: \"default\",\n                   template:   \n                   \"packt/{controller=Home}/{action=Index}/{id?}\"\n                );\n```", "```cs\n//\n// Summary:\n// Provides extension methods for Microsoft.AspNetCore.Routing.IRouteBuilder to\n// add routes.\npublic static class MapRouteRouteBuilderExtensions\n{\n    //\n    // Summary: Adds a route to the  \n       Microsoft.AspNetCore.Routing.IRouteBuilder with the specified\n    // name and template.\n    //\n    // Parameters:\n    // routeBuilder: The Microsoft.AspNetCore.Routing.IRouteBuilder to \n       add the route to.\n    // name: The name of the route.\n    // template: The URL pattern of the route.\n    // Returns: A reference to this instance after the operation has \n       completed.\n    public static IRouteBuilder MapRoute(this IRouteBuilder \n    routeBuilder, string name, string template);\n    //\n    // Summary: Adds a route to the \n       Microsoft.AspNetCore.Routing.IRouteBuilder with the specified\n    // name, template, and default values.\n    //\n    // Parameters:\n    // routeBuilder: The Microsoft.AspNetCore.Routing.IRouteBuilder to \n       add the route to\n    // name: The name of the route\n    // template: The URL pattern of the route\n    // defaults: An object that contains default values for route \n       parameters. The object's properties\n    // represent the names and values of the default values.\n    // Returns: A reference to this instance after the operation has \n       completed.\n    public static IRouteBuilder MapRoute(this IRouteBuilder \n    routeBuilder, string name, string template, object defaults);\n    //\n    // Summary: Adds a route to the \n       Microsoft.AspNetCore.Routing.IRouteBuilder with the specified\n    // name, template, default values, and constraints.\n    //\n    // Parameters:\n    // routeBuilder: The Microsoft.AspNetCore.Routing.IRouteBuilder to \n       add the route to.\n    // name: The name of the route.\n    // template: The URL pattern of the route.\n    //\n    // defaults:\n    // An object that contains default values for route parameters. The \n       object's properties\n    // represent the names and values of the default values.\n    //\n    // constraints:\n    // An object that contains constraints for the route. The object's \n       properties represent\n    // the names and values of the constraints.\n    //\n    // Returns:\n    // A reference to this instance after the operation has completed.\n    public static IRouteBuilder MapRoute(this IRouteBuilder \n    routeBuilder, string name, string template, object defaults, object \n    constraints);\n    //\n    // Summary:\n    // Adds a route to the Microsoft.AspNetCore.Routing.IRouteBuilder \n       with the specified\n    // name, template, default values, and data tokens.\n    //\n    // Parameters:\n    // routeBuilder:\n    // The Microsoft.AspNetCore.Routing.IRouteBuilder to add the route \n       to.\n    //\n    // name:\n    // The name of the route.\n    //\n    // template:\n    // The URL pattern of the route.\n    //\n    // defaults:\n    // An object that contains default values for route parameters. The \n       object's properties\n    // represent the names and values of the default values.\n    //\n    // constraints:\n    // An object that contains constraints for the route. The object's \n       properties represent\n    // the names and values of the constraints.\n    //\n    // dataTokens:\n    // An object that contains data tokens for the route. The object's \n       properties represent\n    // the names and values of the data tokens.\n    //\n    // Returns:\n    // A reference to this instance after the operation has completed.\n    public static IRouteBuilder MapRoute(this IRouteBuilder \n    routeBuilder, string name, string template, object defaults, object \n    constraints, object dataTokens);\n}\n```", "```cs\n[Route(\"packt/[controller]\")]\npublic class BooksController : Controller\n{\n  [HttpGet(\"{id}\")]\n  public IActionResult GetBook(int id)\n  {\n    //// Code hidden for brevity.\n  }\n}\n```", "```cs\n[Route(\"packt/[controller]\")]\npublic class BooksController : Controller\n{\n  [HttpGet(\"index\")]\n [HttpGet(\"~/\")]\n [HttpGet(\"\")]\n  public IActionResult Index()\n  {\n    //// Code hidden for brevity.\n  }\n}\n```", "```cs\nservices.AddMvc(options => options.MaxModelValidationErrors = 20);\n```", "```cs\npublic class Book\n{\n    public int Id {get;set;}\n\n    [Required]\n    [StringLength(100)]\n    public string Name {get;set;}\n\n    [Required]\n    [StringLength(50)]\n    public string Author {get;set;}\n\n    [Required]\n    [StringLength(1000)]\n    public string Description {get;set;}\n\n    [Required]\n    [StringLength(50)]\n    public string Publisher {get;set;}\n\n    //// No point of having required attribute here as its a value type \n         and has a default value.\n    public int Pages {get;set;}\n\n    [DataType(DataType.Date)]\n    public DateTime ReleaseDate {get;set;}\n\n    [Range(0, 499.99)]\n    public decimal Price {get;set;}\n}\n```", "```cs\npublic class BooksController: Controller\n{\n    [HttpPost]\n    public IActionResult SaveBookInfo(Book model)\n    {\n         if(this.ModelState.IsValid)\n         {\n            /// Code for successful validation.\n         }\n         else\n         {\n            //// Code for failed validation.\n            return this.View(model);\n         }\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Filters; //// required namespace\n\npublic class BookPublishingFilter: Attribute, IActionFilter\n{\n     public void OnActionexecuting(ActionExecutingContext context)\n     {\n        //// Write code to be executed, before the action method is \n             called.\n     }\n\n     public void OnActionexecuted(ActionExecutedContext context)\n     {\n        //// Code to be executed, after the action method is called.\n     }     \n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Filters; //// required namespace\n\npublic class BookPublishingFilter: ActionFilterAttribute \n{\n     public void OnActionexecuting(ActionExecutingContext context)\n     {\n        //// Write code to be executed, before the action method is \n             called.\n     }\n\n     public void OnActionexecuted(ActionExecutedContext context)\n     {\n        //// Code to be executed, after the action method is called.\n     }     \n}\n```", "```cs\n//// Register the filter globally. This would be invoked for all \n     controller actions.\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc(options =>\n    {        \n        options.Filters.Add(typeof(BookPublishingFilter)); // by type\n         //// Use either above line or below line, not both. Here both \n              are shown to demonstrate ways in which it can be done.\n        options.Filters.Add(new BookPublishingFilter()); // an instance\n    });\n}\n\n//// Register the filter only at action where it is needed. If it is \n     applied in controller, it applies to all actions.\n[BookPublishingFilter]\npublic IActionResult GetUnpublishedBooks()\n{\n}\n```", "```cs\nif (env.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\nelse\n{\n    app.UseExceptionHandler(\"/error\");\n}\n```", "```cs\nusing Microsoft.AspNetCore.Authentication.Facebook;\nusing Microsoft.AspNetCore.Authentication.Cookies;\n```", "```cs\n \"FacebookAuthenticationAppId\": \"148203862468266\",\n \"FacebookAuthenticationAppSecret\": \"<<App Secret>>\"  //// Your App  \n  Secret goes here.\n```", "```cs\n//// Configure Authentication, we will challenge the user, via Facebook and sign in via Cookie ////authentication, so setting the appropriate values.\nservices.AddAuthentication(options =>\n{\n  options.DefaultChallengeScheme = \n  FacebookDefaults.AuthenticationScheme;\n  options.DefaultSignInScheme = \n  CookieAuthenticationDefaults.AuthenticationScheme;\n  options.DefaultAuthenticateScheme =  \n  CookieAuthenticationDefaults.AuthenticationScheme;\n}).AddFacebook(options =>\n  {\n     options.AppId = \n     this.Configuration[\"FacebookAuthenticationAppId\"]; //// AppId\n     options.AppSecret =  \n     this.Configuration[\"FacebookAuthenticationAppSecret\"]; // App \n     Secret\n   }).AddCookie();\n```", "```cs\n //// Since HTTPS is secure, lets make it mandatory, by using the RequireHttpsAttribute Filter\n services.AddMvc(options =>\n {\n     options.Filters.Add(new RequireHttpsAttribute());\n });\n```", "```cs\n app.UseAuthentication();\n```", "```cs\n public class HomeController : Controller\n {\n     [Authorize]\n     public IActionResult Index()\n     {\n         return this.View();\n     }\n}\n```", "```cs\nservices.AddMvc(config =>\n{\n    var policy = new AuthorizationPolicyBuilder()\n                     .RequireAuthenticatedUser()\n                     .Build();\n    config.Filters.Add(new AuthorizeFilter(policy));\n});\n```", "```cs\n [Route(\"authentication\")]\n public class AuthenticationController : Controller\n {\n     private readonly ILogger<AuthenticationController> logger;\n\n     public AuthenticationController(ILogger<AuthenticationController> \n     logger)\n     {\n         this.logger = logger;\n     }\n\n     [Route(\"signin\")]\n     public IActionResult SignIn()\n     {\n         logger.LogInformation($\"Calling {nameof(this.SignIn)}\");\n         return Challenge(new AuthenticationProperties { RedirectUri = \n         \"/\" });\n     }\n\n     [Route(\"signout\")]\n     [HttpPost]\n     public async Task<IActionResult> SignOut()\n     {\n         await \n         HttpContext.SignOutAsync(CookieAuthenticationDefaults\n         .AuthenticationScheme);\n         return RedirectToAction(\"Index\", \"Home\");\n     }\n  }\n```", "```cs\n  @if (User.Identity.IsAuthenticated) /// If user is authenticated\n  {\n     <li>\n       <br/>\n           <form method=\"post\" asp-controller=\"Authentication\" asp-\n           action=\"SignOut\">\n             <button type=\"submit\" class=\"btn btn-primary\">Sign \n             Out</button>\n           </form>\n     </li>\n   }\n   else\n   {\n     <li><a asp-area=\"\" class=\"btn btn-primary\" asp-\n     controller=\"Authentication\" asp-action=\"SignIn\">Sign In</a></li>\n    }\n```"]