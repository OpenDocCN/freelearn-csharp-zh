["```cs\ninternal class ThreadingSamples\n    {\n        public static void ThreadSample()\n        {\n            Console.WriteLine(\"Primary thread: Starting a new worker thread.\");\n            Thread t = new Thread(new ThreadStart(ThreadOne));\n            t.Start();\n            //Thread.Sleep(1);\n            for (int i = 0; i < 4; i++)\n            {\n                Console.WriteLine(\"Primary thread: Do something().\");\n                Thread.Sleep(1);\n\n            }\n            Console.WriteLine(\"Primary thread: Call Join(), to wait until ThreadOne ends.\");\n            t.Join();\n            Console.WriteLine(\"Primary thread: ThreadOne.Join has returned.\");\n        }\n\n        public static void ThreadOne()\n        {\n            for (int i = 0; i < 10; i++)\n            {\n                Console.WriteLine(\"ThreadOne running: {0}\", i);\n                Thread.Sleep(0);\n            }\n        }\n    }\n```", "```cs\npublic static void ThreadProperties()\n{\n     var th = new Thread(ThreadTwo);\n     th.Start();\n     Thread.Sleep(1000);\n     Console.WriteLine(\"Primary thread ({0}) exiting...\",Thread.CurrentThread.ManagedThreadId);\n}\n\nprivate static void ThreadTwo()\n{\n    var sw = Stopwatch.StartNew();\n    Console.WriteLine(\"ThreadTwo Id: {0} Threadtwo state: {1}, Threadtwo Priority: {2}\",\n                              Thread.CurrentThread.ManagedThreadId,\n                              Thread.CurrentThread.ThreadState,\n                              Thread.CurrentThread.Priority);\n    do\n    {\n        Console.WriteLine(\"Threadtwo Id: {0}, Threadtwo elapsed time {1:N2} seconds\",\n                                  Thread.CurrentThread.ManagedThreadId,\n                                  sw.ElapsedMilliseconds / 1000.0);\n        Thread.Sleep(500);\n    } while (sw.ElapsedMilliseconds <= 3000);\n        sw.Stop();\n}\n```", "```cs\npublic delegate void ParameterizedThreadStart(object obj)\n```", "```cs\n public static void ParameterizedThread()\n {\n     var th = new Thread(ThreadThree);\n     th.Start(3000);\n     Thread.Sleep(1000);\n     Console.WriteLine(\"Primary thread ({0}) exiting...\", Thread.CurrentThread.ManagedThreadId);\n}\n\nprivate static void ThreadThree(object obj)\n{\n    int interval = Convert.ToInt32(obj);\n    var sw = Stopwatch.StartNew();\n    Console.WriteLine(\"ThreadTwo Id: {0} ThreadThree state: {1}, ThreadThree Priority: {2}\",\n            Thread.CurrentThread.ManagedThreadId,\n            Thread.CurrentThread.ThreadState,\n            Thread.CurrentThread.Priority);\n    do\n    {\n        Console.WriteLine(\"ThreadThree Id: {0}, ThreadThree elapsed time {1:N2} seconds\",\n            Thread.CurrentThread.ManagedThreadId,\n            sw.ElapsedMilliseconds / 1000.0);\n        Thread.Sleep(500);\n    } while (sw.ElapsedMilliseconds <= interval);\n    sw.Stop();\n}\n```", "```cs\npublic static void BackgroundThread()\n{\n    Console.WriteLine(\"Thread Id: {0}\" + Environment.NewLine + \"Thread State: {1}\" + Environment.NewLine + \"Priority {2}\" + Environment.NewLine + \"IsBackground: {3}\",\n                              Thread.CurrentThread.ManagedThreadId,\n                              Thread.CurrentThread.ThreadState,\n                              Thread.CurrentThread.Priority,\n                              Thread.CurrentThread.IsBackground);\n    var th = new Thread(ExecuteBackgroundThread);\n    th.IsBackground = true;\n    th.Start();\n    Thread.Sleep(500);\n    Console.WriteLine(\"Main thread ({0}) exiting...\",Thread.CurrentThread.ManagedThreadId);\n}\nprivate static void ExecuteBackgroundThread()\n{\n    var sw = Stopwatch.StartNew();\n    Console.WriteLine(\"Thread Id: {0}\" + Environment.NewLine + \"Thread State: {1}\" +         Environment.NewLine + \"Priority {2}\" + Environment.NewLine + \"IsBackground {3}\",\n                              Thread.CurrentThread.ManagedThreadId,\n                              Thread.CurrentThread.ThreadState,\n                              Thread.CurrentThread.Priority,\n                              Thread.CurrentThread.IsBackground);\n    do\n    {\n        Console.WriteLine(\"Thread {0}: Elapsed {1:N2} seconds\",\n                                  Thread.CurrentThread.ManagedThreadId,\n                                  sw.ElapsedMilliseconds / 1000.0);\n        Thread.Sleep(2000);\n    } while (sw.ElapsedMilliseconds <= 5000);\n    sw.Stop();\n}\n```", "```cs\n public static void PoolOfThreads()\n {\n     Console.WriteLine(\"Primary Thread Id: {0}\" + Environment.NewLine + \"Thread State: {1}\" + Environment.NewLine + \"Priority {2}\" ,\n                              Thread.CurrentThread.ManagedThreadId,\n                              Thread.CurrentThread.ThreadState,\n                              Thread.CurrentThread.Priority);\n    PoolProcessmethod();\n    //Thread.CurrentThread.Join();\n }\nprivate static void PoolProcessmethod()\n{\n    for (int i = 0; i < 5; i++)\n    {\n        ThreadPool.QueueUserWorkItem(new WaitCallback(PoolMethod)); \n    }\n}\nprivate static void PoolMethod(object callback)\n{\n    Thread.Sleep(1000);\n    Console.WriteLine(\"ThreadPool Thread Id: {0}\" + Environment.NewLine + \"Thread State: {1}\" + Environment.NewLine + \"Priority {2}\" + Environment.NewLine + \"IsBackground: {3}\" +Environment.NewLine + \"IsThreadPoolThread: {4}\",\n                              Thread.CurrentThread.ManagedThreadId,\n                              Thread.CurrentThread.ThreadState,\n                              Thread.CurrentThread.Priority,\n                              Thread.CurrentThread.IsBackground,\n                              Thread.CurrentThread.IsThreadPoolThread);\n\n}\n```", "```cs\n[ThreadStatic]\npublic static int _intvariable;\npublic static void ThreadStaticSample()\n{\n    //Start three threads\n    new Thread(() =>\n    {\n        for (int i = 0; i <= 5; i++)\n        {\n            _intvariable++;\n            Console.WriteLine($\"Thread Id:{Thread.CurrentThread.ManagedThreadId}, Int field Value:{_intvariable}\");\n        }\n    }).Start();\n\n    new Thread(() =>\n    {\n        for (int i = 0; i <= 5; i++)\n        {\n            _intvariable++;\n            Console.WriteLine($\"Thread Id:{Thread.CurrentThread.ManagedThreadId}, Int field Value:{_intvariable}\");\n        }\n    }).Start();\n\n    new Thread(() =>\n    {\n        for (int i = 0; i <= 5; i++)\n        {\n            _intvariable++;\n            Console.WriteLine($\"Thread Id:{Thread.CurrentThread.ManagedThreadId}, Int field Value:{_intvariable}\");\n        }\n    }).Start();\n\n}\n\n```", "```cs\n public static ThreadLocal<string> _threadstring = new ThreadLocal<string>(() => {\n    return \"Thread \" + Thread.CurrentThread.ManagedThreadId; });\npublic static void ThreadLocalSample()\n{\n\n    //Start three threads\n    new Thread(() =>\n    {\n        for (int i = 0; i <= 5; i++)\n        {\n            Console.WriteLine($\"First Thread string :{_threadstring}\");\n        }\n    }).Start();\n\n    new Thread(() =>\n    {\n        for (int i = 0; i <= 5; i++)\n        {\n            Console.WriteLine($\"Second Thread string :{_threadstring}\");\n        }\n    }).Start();\n\n    new Thread(() =>\n    {\n        for (int i = 0; i <= 5; i++)\n        {\n            Console.WriteLine($\"Third Thread string :{_threadstring}\");\n        }\n    }).Start();\n\n}\n```", "```cs\n internal class BankAcc\n    {\n        private readonly object AcountBalLock = new object();\n        private decimal balanceamount;\n        public BankAcc(decimal iBal)\n        {\n            balanceamount = iBal;\n        }\n        public decimal Debit(decimal amt)\n        {\n            lock (AcountBalLock)\n            {\n                if (balanceamount >= amt)\n                {\n                    Console.WriteLine($\"Balance before debit :{balanceamount,5}\");\n                    Console.WriteLine($\"Amount to debit     :{amt,5}\");\n                    balanceamount = balanceamount - amt;\n                    Console.WriteLine($\"Balance after debit  :{balanceamount,5}\");\n                    return amt;\n                }\n                else\n                {\n                    return 0;\n                }\n            }\n        }\n        public void Credit(decimal amt)\n        {\n            lock (AcountBalLock)\n            {\n                Console.WriteLine($\"Balance before credit:{balanceamount,5}\");\n                Console.WriteLine($\"Amount to credit        :{amt,5}\");\n                balanceamount = balanceamount + amt;\n                Console.WriteLine($\"Balance after credit :{balanceamount,5}\");\n            }\n        }\n    }\n\n```", "```cs\n//Create methods to test this Account class\npublic static void TestLockStatements()\n{\n    var account = new BankAcc(1000);\n    var tasks = new Task[2];\n    for (int i = 0; i < tasks.Length; i++)\n    {\n        tasks[i] = Task.Run(() => UpdateAccount(account));\n    }\n    Task.WaitAll(tasks);\n}\nprivate static void UpdateAccount(BankAcc account)\n{\n    var rnd = new Random();\n    for (int i = 0; i < 10; i++)\n    {\n        var amount = rnd.Next(1, 1000);\n        bool doCredit = rnd.NextDouble() < 0.5;\n        if (doCredit)\n        {\n            account.Credit(amount);\n        }\n        else\n        {\n            account.Debit(amount);\n        }\n    }\n}\n```", "```cs\nBalance before debit : 1000\nAmount to debit : 972\nBalance after debit : 28\nBalance before credit: 28\nAmount to credit : 922\nBalance after credit : 950\nBalance before credit: 950\nAmount to credit : 99\nBalance after credit : 1049\nBalance before debit : 1049\nAmount to debit : 719\nBalance after debit : 330\nBalance before credit: 330\nAmount to credit : 865\nBalance after credit : 1195\nBalance before debit : 1195\nAmount to debit : 962\nBalance after debit : 233\nBalance before credit: 233\nAmount to credit : 882\nBalance after credit : 1115\nBalance before credit: 1115\nAmount to credit : 649\nBalance after credit : 1764\nBalance before credit: 1764\nAmount to credit : 594\nBalance after credit : 2358\nBalance before debit : 2358\nAmount to debit : 696\nBalance after debit : 1662\nBalance before credit: 1662\nAmount to credit : 922\nBalance after credit : 2584\nBalance before credit: 2584\nAmount to credit : 99\nBalance after credit : 2683\nBalance before debit : 2683\nAmount to debit : 719\nBalance after debit : 1964\nBalance before credit: 1964\nAmount to credit : 865\nBalance after credit : 2829\nBalance before debit : 2829\nAmount to debit : 962\nBalance after debit : 1867\nBalance before credit: 1867\nAmount to credit : 882\nBalance after credit : 2749\nBalance before credit: 2749\nAmount to credit : 649\nBalance after credit : 3398\nBalance before credit: 3398\nAmount to credit : 594\nBalance after credit : 3992\nBalance before debit : 3992\nAmount to debit : 696\nBalance after debit : 3296\nPress any key to exit.\n```", "```cs\npublic class Task : IAsyncResult, IDisposable\n```", "```cs\npublic static void Run()\n{\n    Action<object> action = (object obj) =>\n    {\n        Console.WriteLine(\"Task={0}, Milliseconds to sleep={1}, Thread={2}\",Task.CurrentId, obj,\n        Thread.CurrentThread.ManagedThreadId);\n        int value = Convert.ToInt32(obj);\n        Thread.Sleep(value);\n    };\n\n    Task t1 = new Task(action, 1000);\n    Task t2 = Task.Factory.StartNew(action, 5000);\n    t2.Wait();\n    t1.Start();\n    Console.WriteLine(\"t1 has been started. (Main Thread={0})\",\n                      Thread.CurrentThread.ManagedThreadId);\n    t1.Wait();\n\n    int taskData = 4000;\n    Task t3 = Task.Run(() => {\n        Console.WriteLine(\"Task={0}, Milliseconds to sleep={1}, Thread={2}\",\n                          Task.CurrentId, taskData,\n                           Thread.CurrentThread.ManagedThreadId);\n    });\n    t3.Wait();\n\n    Task t4 = new Task(action, 3000);\n    t4.RunSynchronously();\n    t4.Wait();\n}\n```", "```cs\npublic static void TaskReturnSample()\n{\n    Task<int> t = Task.Run(() => { return 30 + 40; });\n    Console.WriteLine($\"Result of 30+40: {t.Result}\");\n}\n```", "```cs\nResult of 30+40: 70\nPress any key to exit.\n```", "```cs\npublic static void TaskContinueWithSample()\n{\n    Task<int> t = Task.Run(() => \n        {\n            return 30 + 40;\n        }\n    ).ContinueWith((t1) => \n    {\n        return t1.Result * 10;\n    });\n    Console.WriteLine($\"Result of two tasks: {t.Result}\");\n}\n```", "```cs\nResult of two tasks: 700\nPress any key to exit.\n```", "```cs\nTask<int> t = Task.Run(() => \n{\n    return 30 + 40;\n}\n).ContinueWith((t1) => \n{\n    return t1.Result * 10;\n},TaskContinuationOptions.OnlyOnRanToCompletion);\n```", "```cs\nforeach (var item in sourceCollection) \n{     \n    Process(item); \n} \n```", "```cs\nParallel.ForEach(sourceCollection, item => Process(item)); \n```", "```cs\nstatic int[] _values = Enumerable.Range(0, 1000).ToArray();\n\nprivate static void SumAndProduct(int x)\n{\n    int sum = 0;\n    int product = 1;\n    foreach (var element in _values)\n    {\n        sum += element;\n        product *= element;\n    }\n}\n\npublic static void CallSumAndProduct()\n{\n    const int max = 10;\n    const int inner = 100000;\n    var s1 = Stopwatch.StartNew();\n    for (int i = 0; i < max; i++)\n    {\n        Parallel.For(0, inner, SumAndProduct);\n    }\n    s1.Stop();\n\n    Console.WriteLine(\"Elapsed time in seconds for ParallelLoop: \" + s1.Elapsed.Seconds);\n\n    var s2 = Stopwatch.StartNew();\n    for (int i = 0; i < max; i++)\n    {\n        for (int z = 0; z < inner; z++)\n        {\n            SumAndProduct(z);\n        }\n    }\n    s2.Stop();\n\n    Console.WriteLine(\"Elapsed time in seconds for Sequential Loop: \" + s2.Elapsed.Seconds );\n}\n```", "```cs\nParallelLoopResult result = Parallel.For(int i, ParallelLoopState loopstate) =>{});\n```", "```cs\npublic static void PrintEvenNumbers()\n{\n    var numbers = Enumerable.Range(1, 20);\n    var pResult = numbers.AsParallel().Where(i => i % 2 == 0).ToArray();\n\n    foreach (int e in pResult)\n    {\n        Console.WriteLine(e);\n    }\n\n}\n```", "```cs\npublic static void PrintEvenNumbersOrdered()\n{\n    var numbers = Enumerable.Range(1, 20);\n    var pResult = numbers.AsParallel().AsOrdered()\n        .Where(i => i % 2 == 0).ToArray();\n\n    foreach (int e in pResult)\n    {\n        Console.WriteLine(e);\n    }\n\n}\n```", "```cs\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\nPress any key to exit.\n```", "```cs\npublic static void PrintEvenNumbersExecutionMode()\n{\n    var numbers = Enumerable.Range(1, 20);\n    var pResult = numbers.AsParallel().WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n        .Where(i => i % 2 == 0).ToArray();\n\n    foreach (int e in pResult)\n    {\n        Console.WriteLine(e);\n    }\n}\n```", "```cs\npublic static void PrintEvenNumbersDegreeOfParallel()\n{\n    var numbers = Enumerable.Range(1, 20);\n    var pResult = numbers.AsParallel().WithDegreeOfParallelism(3)\n        .Where(i => i % 2 == 0).ToArray();\n\n    foreach (int e in pResult)\n    {\n        Console.WriteLine(e);\n    }\n\n}\n```", "```cs\npublic static void PrintEvenNumbersForAll()\n{\n    var numbers = Enumerable.Range(1, 20);\n    var pResult = numbers.AsParallel().Where(i => i % 2 == 0);\n\n    pResult.ForAll(e => Console.WriteLine(e));\n}\n```", "```cs\npublic static void PrintEvenNumbersExceptions()\n{\n    var numbers = Enumerable.Range(1, 20);\n    try\n    {\n        var pResult = numbers.AsParallel().Where(i => IsDivisibleBy2(i));\n\n        pResult.ForAll(e => Console.WriteLine(e));\n    }\n    catch (AggregateException ex)\n    {\n        Console.WriteLine(\"There were {0} exceptions\", ex.InnerExceptions.Count);\n        foreach (Exception e in ex.InnerExceptions)\n        {\n            Console.WriteLine(\"Exception Type: {0} and Exception Message: {1}\", e.GetType().Name,e.Message);\n        }\n    }\n}\n\nprivate static bool IsDivisibleBy2(int num)\n{\n    if (num % 3 == 0) throw new ArgumentException(string.Format(\"The number {0} is divisible by 3\", num));\n   return num % 2 == 0;\n}\n```", "```cs\nprivate readonly HttpClient _httpClient = new HttpClient();\n\npublic async Task<int> GetDotNetCountAsync()\n{\n    var html = await _httpClient.GetStringAsync(\"https://dotnetfoundation.org\");\n\n    return Regex.Matches(html, @\"\\.NET\").Count;\n}\n\npublic void TestAsyncMethods()\n{\n    Console.WriteLine(\"Invoking GetDotNetCountAsync method\");\n    int count = GetDotNetCountAsync().Result;\n    Console.WriteLine($\"Number of times .NET keyword displayed is {count}\");\n}\n```", "```cs\nInvoking GetDotNetCountAsync method\nNumber of times .NET keyword displayed is 22\nPress any key to exit.\n```"]