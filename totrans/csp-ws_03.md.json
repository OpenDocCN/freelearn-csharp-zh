["```cs\npublic User FindBySurname(string name)\n{\n    foreach(var user in _users)\n       if (user.Surname == name)\n          return user;\n    return null;\n}\n```", "```cs\npublic User FindByLoginName(string name)\n{\n    foreach(var user in _users)\n       if (user.LoginName == name)\n          return user;\n    return null;\n}\n```", "```cs\npublic User FindByLocation(string name)\n{\n    foreach(var user in _users)\n       if (user.Location == name)\n          return user;\n    return null;\n}\n```", "```cs\npublic void DoSearch()\n{\n  var user1 = FindBySurname(\"Wright\");\n  var user2 = FindByLoginName(\"JamesR\");\n  var user3 = FindByLocation(\"Scotland\"); \n}\n```", "```cs\nprivate delegate bool FindUser(User user);\nprivate User Find(FindUser predicate)\n{\n  foreach (var user in _users)\n    if (predicate(user))\n      return user;\n  return null;\n}\npublic void DoSearch()\n{\n  var user4 = Find(user => user.Surname == \"Wright\");\n  var user5 = Find(user => user.LoginName == \"JamesR\");\n  var user6 = Find(user => user.Location == \"Scotland\");\n}\n```", "```cs\npublic class Point\n{\n  public double X { get; set; } \n  public double Y { get; set; }\n}\npublic interface ITransform\n{\n  Point Move(double height, double width);\n}\n```", "```cs\npublic class RotateTransform : ITransform\n{\n    public Point Move(double height, double width)\n    {\n        // do stuff\n        return new Point();\n    }\n}\npublic class ZoomTransform : ITransform\n{\n    public Point Move(double height, double width)\n    {\n        // do stuff\n        return new Point();\n    }\n}\n```", "```cs\npublic class Transformer\n{\n    public void Transform()\n    {\n        var rotatePoint = Calculate(new RotateTransform(), 100, 20);\n        var zoomPoint = Calculate(new ZoomTransform(), 5, 5);\n    }\n    private Point Calculate(ITransform transformer, double height, double width)\n    {\n        var point = transformer.Move(height, width);\n        //do stuff to point\n        return point;\n    }\n}\n```", "```cs\n    private delegate Point TransformPoint(double height, double width);\n    private Point Calculate(TransformPoint transformer, double height, double width)\n    {\n        var point = transformer(height, width);\n        //do stuff to point\n        return point;\n    }\n```", "```cs\n    private Point Rotate(double height, double width)\n    {\n        return new Point();\n    }\n    private Point Zoom(double height, double width)\n    {\n        return new Point();\n    }\n```", "```cs\n    public void Transform()\n    {\n         var rotatePoint1 = Calculate(Rotate, 100, 20);\n         var zoomPoint1 = Calculate(Zoom, 5, 5);\n    }\n```", "```cs\nMouseEventArgs args = new MouseEventArgs(100,200)\nforeach(subscription in subscriptionList)\n{\n   subscription.OnMouseMoved(args)\n} \n```", "```cs\npublic delegate void MessageReceivedHandler(string message, int size);\n```", "```cs\n    source\\Chapter03>dotnet new console -o Exercise01\n    ```", "```cs\nThe template \"Console Application\" was created successfully.\nProcessing post-creation actions...\nRunning 'dotnet restore' on Exercise01\\Exercise01.csproj...\n  Determining projects to restore...\n  Restored source\\Chapter03\\Exercise01\\Exercise01.csproj (in 191 ms).\nRestore succeeded.\n```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n      </PropertyGroup>\n    </Project>\n    ```", "```cs\nusing System;\nnamespace Chapter03.Exercise01 \n{\n    public delegate bool DateValidationHandler(DateTime dateTime);\n}\n```", "```cs\n       public class Order\n        {\n            private readonly DateValidationHandler _orderDateValidator;\n            private readonly DateValidationHandler _deliveryDateValidator;\n    ```", "```cs\n           public Order(DateValidationHandler orderDateValidator,\n                DateValidationHandler deliveryDateValidator)\n            {\n                _orderDateValidator = orderDateValidator;\n                _deliveryDateValidator = deliveryDateValidator;\n            }  \n    ```", "```cs\n            public DateTime OrderDate { get; set; }\n            public DateTime DeliveryDate { get; set; }\n    ```", "```cs\n            public bool IsValid() => \n                _orderDateValidator(OrderDate) &&\n                _deliveryDateValidator(DeliveryDate);\n        }\n    ```", "```cs\n        public static class Program\n        {\n    ```", "```cs\n            private static bool IsWeekendDate(DateTime date)\n            {\n                Console.WriteLine(\"Called IsWeekendDate\");\n                return date.DayOfWeek == DayOfWeek.Saturday ||\n                       date.DayOfWeek == DayOfWeek.Sunday;\n            }\n            private static bool IsPastDate(DateTime date)\n            {\n                Console.WriteLine(\"Called IsPastDate\");\n                return date < DateTime.Today;\n            }\n    ```", "```cs\n            public static void Main()\n            {\n               var orderValidator = new DateValidationHandler(IsPastDate);\n               var deliverValidator = new DateValidationHandler(IsWeekendDate);\n    ```", "```cs\n              var order = new Order(orderValidator, deliverValidator)\n                {\n                    OrderDate = DateTime.Today.AddDays(-10), \n                    DeliveryDate = new DateTime(2020, 12, 31)\n                };\n    ```", "```cs\n              Console.WriteLine($\"Ordered: {order.OrderDate:dd-MMM-yy}\");\n              Console.WriteLine($\"Delivered: {order.DeliveryDate:dd-MMM-yy }\");\n              Console.WriteLine($\"IsValid: {order.IsValid()}\");\n            }\n        }\n    }\n    ```", "```cs\n    Ordered: 07-May-22\n    Delivered: 31-Dec-20\n    Called IsPastDate\n    Called IsWeekendDate\n    IsValid: False\n    ```", "```cs\npublic delegate string DoStuff(string name, int age);\npublic delegate string DoMoreStuff(string name, int age);\n```", "```cs\npublic static void Main()\n{\n    DoStuff stuff = new DoStuff(MyMethod);\n    DoMoreStuff moreStuff = new DoMoreStuff(MyMethod);\n    Console.WriteLine($\"Stuff: {stuff(\"Louis\", 2)}\");\n    Console.WriteLine($\"MoreStuff: {moreStuff(\"Louis\", 2)}\");\n}\nprivate static string MyMethod(string name, int age)\n{\n    return $\"{name}@{age}\";\n}\n```", "```cs\nStuff: Louis@2\nMoreStuff: Louis@2\n```", "```cs\nFunc<string, int, string> funcStuff = MyMethod;\nConsole.WriteLine($\"FuncStuff: {funcStuff(\"Louis\", 2)}\");\n```", "```cs\nFuncStuff: Louis@2\n```", "```cs\npublic delegate void Action()\n```", "```cs\npublic delegate void Action<T>(T obj)\n```", "```cs\nAction<string> actionA;\n```", "```cs\nAction<int> actionB;\n```", "```cs\nAction<int, string> actionC;\n```", "```cs\nAction<string, int> actionD;\n```", "```cs\npublic delegate T Func<T>()\n```", "```cs\nFunc<bool> funcE;\n```", "```cs\nFunc<bool, int, int, DateTime, string> funcF;\n```", "```cs\npublic static class DateValidators\n{\n    public static bool IsWeekend(DateTime dateTime)\n        => dateTime.DayOfWeek == DayOfWeek.Saturday ||\n           dateTime.DayOfWeek == DayOfWeek.Sunday;\n    public static bool IsFuture(DateTime dateTime) \n      => dateTime.Date > DateTime.Today;\n}\n```", "```cs\nvar futureValidator = new Func<DateTime, bool>(DateValidators.IsFuture);\nvar weekendValidator = new Func<DateTime, bool>(DateValidators.IsWeekend);\n```", "```cs\nvar futureValidator = DateValidation.IsFuture;\n```", "```cs\nCannot assign method group to an implicitly - typed variable\n```", "```cs\nvar futureValidator = new Func<DateTime, bool>(DateValidators.IsFuture);\n```", "```cs\n    var isFuture1 = futureValidator?.Invoke(new DateTime(2000, 12, 31));\n    ```", "```cs\nvar isFuture1 = futureValidator.Invoke(new DateTime(2000, 12, 31));\n```", "```cs\nvar isFuture2 = futureValidator(new DateTime(2050, 1, 20));\n```", "```cs\n    source\\Chapter03>dotnet new console -o Exercise02\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n      </PropertyGroup>\n    </Project>\n    ```", "```cs\n    using System;\n    using System.Globalization;\n    namespace Chapter03.Exercise02\n    {\n        public record Car\n        {\n            public double Distance { get; init; }\n            public double JourneyTime { get; init; }\n        }\n    ```", "```cs\n        public class Comparison\n        {\n            private readonly Func<Car, double> _valueSelector;\n            public Comparison(Func<Car, double> valueSelector)\n            {\n                _valueSelector = valueSelector;\n            } \n    ```", "```cs\n            public double Yesterday { get; private set; }\n            public double Today { get; private set; }\n            public double Difference { get; private set; }\n    ```", "```cs\n            public void Compare(Car yesterdayCar, Car todayCar)\n            {\n    ```", "```cs\n                Yesterday = _valueSelector(yesterdayCar);\n    ```", "```cs\n                Today = _valueSelector(todayCar);\n    ```", "```cs\n                Difference = Yesterday - Today;\n            }\n         }\n    ```", "```cs\n        public class JourneyComparer\n        {\n            public JourneyComparer()\n            {\n    ```", "```cs\n              Distance = new Comparison(GetCarDistance);\n    ```", "```cs\n              JourneyTime = new Comparison(GetCarJourneyTime);\n    ```", "```cs\n               AverageSpeed = new Comparison(GetCarAverageSpeed);\n    ```", "```cs\n               static double GetCarDistance(Car car) => car.Distance; \n               static double GetCarJourneyTime(Car car) => car.JourneyTime;\n    ```", "```cs\n              static double GetCarAverageSpeed(Car car)             => car.Distance / car.JourneyTime;\n           }\n    ```", "```cs\n            public Comparison Distance { get; }\n            public Comparison JourneyTime { get; }\n            public Comparison AverageSpeed { get; }\n    ```", "```cs\n            public void Compare(Car yesterday, Car today)\n            {\n                Distance.Compare(yesterday, today);\n                JourneyTime.Compare(yesterday, today);\n                AverageSpeed.Compare(yesterday, today);\n            }\n        }\n    ```", "```cs\n        public class Program\n        {\n            public static void Main()\n            {\n    ```", "```cs\n                var random = new Random();\n                string input;\n                do\n                {\n    ```", "```cs\n                    Console.Write(\"Yesterday's distance: \");\n                    input = Console.ReadLine();\n                    double.TryParse(input, NumberStyles.Any,                    CultureInfo.CurrentCulture, out var distanceYesterday);\n    ```", "```cs\n                    var carYesterday = new Car\n                    {\n                        Distance = distanceYesterday,\n                        JourneyTime = random.NextDouble() * 10D\n                    };\n    ```", "```cs\n                    Console.Write(\"    Today's distance: \");\n                    input = Console.ReadLine();\n                    double.TryParse(input, NumberStyles.Any,                    CultureInfo.CurrentCulture, out var distanceToday);\n                    var carToday = new Car\n                    {\n                        Distance = distanceToday,\n                        JourneyTime = random.NextDouble() * 10D\n                    };\n    ```", "```cs\n                    var comparer = new JourneyComparer();\n                    comparer.Compare(carYesterday, carToday);\n    ```", "```cs\n                    Console.WriteLine();\n                    Console.WriteLine(\"Journey Details   Distance\\tTime\\tAvg Speed\");\n                    Console.WriteLine(\"-------------------------------------------------\");\n    ```", "```cs\n                    Console.Write($\"Yesterday         {comparer.Distance.Yesterday:N0}   \\t\");\n                    Console.WriteLine($\"{comparer.JourneyTime.Yesterday:N0}\\t {comparer.AverageSpeed.Yesterday:N0}\");\n    ```", "```cs\n                    Console.Write($\"Today             {comparer.Distance.Today:N0}     \\t\");                 Console.WriteLine($\"{comparer.JourneyTime.Today:N0}\\t {comparer.AverageSpeed.Today:N0}\");\n    ```", "```cs\n                    Console.WriteLine(\"=================================================\");\n                    Console.Write($\"Difference             {comparer.Distance.Difference:N0}     \\t\");                Console.WriteLine($\"{comparer.JourneyTime.Difference:N0} \\t{comparer.AverageSpeed.Difference:N0}\");\n                   Console.WriteLine(\"=================================================\");\n    ```", "```cs\n                } \n                while (!string.IsNullOrEmpty(input));\n            }\n        }\n    }\n    ```", "```cs\nYesterday's distance: 1000\n    Today's distance: 900\nJourney Details   Distance      Time    Avg Speed\n-------------------------------------------------\nYesterday         1,000         8       132\nToday             900           4       242\n=================================================\nDifference        100           4       -109\n```", "```cs\nAction<string> logger = LogToConsole;\nlogger(\"1\\. Calculating bill\");  \n```", "```cs\nlogger(\"1\\. Calculating bill\")\n--> LogToConsole(\"1\\. Calculating bill\")\n```", "```cs\nlogger += LogToFile;\n```", "```cs\nlogger(\"2\\. Saving order\"); \n```", "```cs\nlogger(\"2\\. Saving order\")\n--> LogToConsole(\"2\\. Saving order\")\n--> LogToFile(\"2\\. Saving order\")\n```", "```cs\nlogger += LogToDataBase\n```", "```cs\nlogger(\"3\\. Closing order\"); \n```", "```cs\nlogger(\"3\\. Closing order\")\n--> LogToConsole(\"3\\. Closing order\")\n--> LogToFile(\"3\\. Closing order\")\n--> LogToDataBase(\"3\\. Closing order\")\n```", "```cs\nlogger -= LogToFile\n```", "```cs\nlogger(\"4\\. Closing customer\"); \n```", "```cs\nlogger(\"4\\. Closing customer\")\n--> LogToConsole(\"4\\. Closing customer\")\n--> LogToDataBase(\"4\\. Closing customer\")\n```", "```cs\n    source\\Chapter03>dotnet new console -o Exercise03\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n      </PropertyGroup>\n    </Project>\n    ```", "```cs\n    using System;\n    using System.IO;\n    namespace Chapter03.Exercise03\n    {\n        public class CashMachine\n        {\n            private readonly Action<string> _logger;\n            public CashMachine(Action<string> logger)\n            {\n                _logger = logger;\n            } \n    ```", "```cs\n            private void Log(string message)\n                => _logger?.Invoke(message);\n    ```", "```cs\n            public void VerifyPin(string pin) \n                => Log($\"VerifyPin called: PIN={pin}\");\n            public void ShowBalance() \n                => Log(\"ShowBalance called: Balance=999\");\n        }\n    ```", "```cs\n        public static class Program\n        {\n            private const string OutputFile = \"activity.txt\";\n            public static void Main()\n            {\n    ```", "```cs\n                if (File.Exists(OutputFile))\n                {\n                    File.Delete(OutputFile);\n                }\n    ```", "```cs\n                Action<string> logger = LogToConsole;\n    ```", "```cs\n                logger += LogToFile;\n    ```", "```cs\n                var cashMachine = new CashMachine(logger);\n    ```", "```cs\n                Console.Write(\"Enter your PIN:\");\n                var pin = Console.ReadLine();\n                if (string.IsNullOrEmpty(pin))\n                {\n                    Console.WriteLine(\"No PIN entered\");\n                    return;\n                }\n                cashMachine.VerifyPin(pin);\n                Console.WriteLine();\n    ```", "```cs\n                Console.Write(\"Press Enter to show balance\");\n                Console.ReadLine();\n                cashMachine.ShowBalance();\n                Console.Write(\"Press Enter to quit\");\n                Console.ReadLine();\n    ```", "```cs\n                static void LogToConsole(string message)\n                    => Console.WriteLine(message);\n                static void LogToFile(string message)\n                    => File.AppendAllText(OutputFile, message);\n            }\n         }\n    }\n    ```", "```cs\n    Enter your PIN:12345\n    VerifyPin called: PIN=12345\n    Press Enter to show balance\n    ShowBalance called: Balance=999\n    ```", "```cs\n    VerifyPin called: PIN=12345ShowBalance called: Balance=999\n    ```", "```cs\nMulticastDelegatesAddRemoveExample.cs\nusing System;\nnamespace Chapter03Examples\n{\n    class MulticastDelegatesAddRemoveExample\n    {\n        public static void Main()\n        {\n            Action<string> logger = LogToConsole;\n            Console.WriteLine($\"Logger1 #={logger.GetHashCode()}\");\n            logger += LogToConsole;\n            Console.WriteLine($\"Logger2 #={logger.GetHashCode()}\");\n            logger += LogToConsole;\n            Console.WriteLine($\"Logger3 #={logger.GetHashCode()}\");\nYou can find the complete code here: https://packt.link/vqZMF.\n```", "```cs\nLogger1 #=46104728\nLogger2 #=1567560752\nLogger3 #=236001992\n```", "```cs\nMulticastDelegatesExample.cs\nusing System;\nnamespace Chapter03Examples\n{\n    class MulticastDelegatesExample\n    {\n        public static void Main()\n        {\n            Action<string> logger = LogToConsole;\n            logger += LogToConsole;\n            logger(\"Console x 2\");\n\n            logger -= LogToConsole;\n            logger(\"Console x 1\");\n            logger -= LogToConsole;\nYou can find the complete code here: https://packt.link/Xe0Ct.\n```", "```cs\nConsole x 2\nConsole x 2\nConsole x 1\n```", "```cs\nSystem.NullReferenceException\n  HResult=0x80004003\n  Message=Object reference not set to an instance of an object.\n  Source=Examples\n  StackTrace:\n   at Chapter03Examples.MulticastDelegatesExample.Main() in Chapter03\\MulticastDelegatesExample.cs:line 16\n```", "```cs\nusing System;\nnamespace Chapter03Examples\n{\n    class FuncExample\n    {\n        public static void Main()\n        {\n```", "```cs\n            Func<string, string> emailFormatter = RemoveDots;\n            const string Address = \"admin@google.com\";\n            var first = emailFormatter(Address);\n            Console.WriteLine($\"First={first}\");\n```", "```cs\n            emailFormatter += RemoveAtSign;\n            var second = emailFormatter(Address);\n            Console.WriteLine($\"Second={second}\");\n            Console.ReadLine();\n            static string RemoveAtSign(string address)\n                => address.Replace(\"@\", \"\");\n            static string RemoveDots(string address)\n                => address.Replace(\".\", \"\");\n        }\n    }\n} \n```", "```cs\nFirst=admin@googlecom\nSecond=admingoogle.com\n```", "```cs\nMulticastWithErrorsExample.cs\nusing System;\nusing System.Diagnostics;\nnamespace Chapter03Examples\n{\n    class MulticastWithErrorsExample\n    {\n            public static void Main()\n            {\n                Action<string> logger = LogToConsole;\n                logger += LogToError;\n                logger += LogToDebug;\n                try\n                {\n                    logger(\"try log this\");\nYou can find the complete code here: https://packt.link/Ti3Nh.\n```", "```cs\nConsole: try log this\nCaught oops!\nAll done\n```", "```cs\npublic abstract class MulticastDelegate : Delegate {\n  public sealed override Delegate[] GetInvocationList();\n}\n```", "```cs\n    source\\Chapter03>dotnet new console -o Exercise04\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n      </PropertyGroup>\n    </Project>\n    ```", "```cs\n    using System;\n    using System.IO;\n    namespace Chapter03.Exercise04\n    {\n        public static class Program\n        {\n    ```", "```cs\n            private const string OutputFile = \"Exercise04.txt\";\n    ```", "```cs\n            public static void Main()\n            {\n                if (File.Exists(OutputFile))\n                {\n                    File.Delete(OutputFile);\n                }\n    ```", "```cs\n                Action<string> logger = LogToConsole;\n    ```", "```cs\n                InvokeAll(logger, \"First call\"); \n    ```", "```cs\n                logger += LogToConsole;\n                logger += LogToDatabase;\n                logger += LogToFile; \n    ```", "```cs\n                InvokeAll(logger, \"Second call\"); \n                Console.ReadLine();\n    ```", "```cs\n                static void LogToConsole(string message)\n                    => Console.WriteLine($\"LogToConsole: {message}\");\n                static void LogToDatabase(string message)\n                    => throw new ApplicationException(\"bad thing happened!\");\n                static void LogToFile(string message)\n                    => File.AppendAllText(OutputFile, message);\n\n    ```", "```cs\n                static void InvokeAll(Action<string> logger, string arg)\n                {\n                    if (logger == null)\n                         return;\n    ```", "```cs\n                    var delegateList = logger.GetInvocationList();\n                    Console.WriteLine($\"Found {delegateList.Length} items in {logger}\"); \n    ```", "```cs\n                    foreach (var del in delegateList)\n                    {\n    ```", "```cs\n                       try\n                       {\n                         var action = del as Action<string>; \n    ```", "```cs\n                          if (del is Action<string> action)\n                          {\n                              Console.WriteLine($\"Invoking '{action.Method.Name}' with '{arg}'\");\n                              action(arg);\n                          }\n                          else\n                          {\n                              Console.WriteLine(\"Skipped null\");\n                          } \n    ```", "```cs\n                      }\n                      catch (Exception e)\n                      {\n                          Console.WriteLine($\"Error: {e.Message}\");\n                      }\n                    }\n                }\n            }\n        }\n    }\n    ```", "```cs\n    Found 1 items in System.Action`1[System.String]\n    Invoking '<Main>g__LogToConsole|1_0' with 'First call'\n    LogToConsole: First call\n    Found 4 items in System.Action`1[System.String]\n    Invoking '<Main>g__LogToConsole|1_0' with 'Second call'\n    LogToConsole: Second call\n    Invoking '<Main>g__LogToConsole|1_0' with 'Second call'\n    LogToConsole: Second call\n    Invoking '<Main>g__LogToDatabase|1_1' with 'Second call'\n    Error: bad thing happened!\n    Invoking '<Main>g__LogToFile|1_2' with 'Second call'\n    ```", "```cs\npublic event EventHandler MouseDoubleClicked\n```", "```cs\npublic delegate void EventHandler(object sender, EventArgs e); \n```", "```cs\npublic delegate void EventHandler<T>(object sender, T e); \n```", "```cs\npublic event EventHandler<MouseEventArgs> MouseDoubleClicked = delegate {};\n```", "```cs\n    using System;\n    namespace Chapter03Examples\n    {\n        public class MouseClickedEventArgs \n        {\n            public MouseClickedEventArgs(int clicks)\n            {\n                Clicks = clicks;\n            }\n            public int Clicks { get; }\n        }\n    ```", "```cs\n        public class MouseClickPublisher\n        {\n         public event EventHandler<MouseClickedEventArgs> MouseClicked = delegate { };\n    ```", "```cs\n            protected virtual void OnMouseClicked( MouseClickedEventArgs e)\n            {\n                var evt = MouseClicked;\n                evt?.Invoke(this, e);\n            }\n    ```", "```cs\n            private void TrackMouseClicks()\n            {\n                OnMouseClicked(new MouseClickedEventArgs(2));\n            }\n        } \n    ```", "```cs\n        public class MouseSingleClickPublisher : MouseClickPublisher\n        {\n            protected override void OnMouseClicked(MouseClickedEventArgs e)\n            {\n                if (e.Clicks == 1)\n                {\n                    OnMouseClicked(e);\n                }\n            }\n        }\n    } \n    ```", "```cs\n    dotnet new console -o Exercise05\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n      </PropertyGroup>\n    </Project>\n    ```", "```cs\n    using System;\n    namespace Chapter03.Exercise05\n    {\n        public class AlarmClock\n        {\n    ```", "```cs\n            public event EventHandler WakeUp = delegate {};\n            public event EventHandler<DateTime> Ticked = delegate {};\n    ```", "```cs\n            protected void OnWakeUp()\n            {\n                WakeUp.Invoke(this, EventArgs.Empty);\n            }\n    ```", "```cs\n            public DateTime AlarmTime { get; set; }\n            public DateTime ClockTime { get; set; }\n    ```", "```cs\n            public void Start()\n            {\n                // Run for 24 hours\n                const int MinutesInADay = 60 * 24;\n    ```", "```cs\n                for (var i = 0; i < MinutesInADay; i++)\n                {\n                    ClockTime = ClockTime.AddMinutes(1);\n                    Ticked.Invoke(this, ClockTime);\n    ```", "```cs\n                  var timeRemaining = ClockTime                 .Subtract(AlarmTime)                .TotalMinutes;\n                   if (IsTimeToWakeUp(timeRemaining))\n                    {\n                        OnWakeUp();\n                        break;\n                    }\n                }\n    ```", "```cs\n                static bool IsTimeToWakeUp(double timeRemaining) \n                    => timeRemaining is (>= -1.0 and <= 1.0);\n            }\n        }   \n    ```", "```cs\n             public static class Program\n        {\n            public static void Main()\n            {\n    ```", "```cs\n                var clock = new AlarmClock();\n                clock.Ticked += ClockTicked;\n                clock.WakeUp += ClockWakeUp; \n    ```", "```cs\n                clock.ClockTime = DateTime.Now;\n                clock.AlarmTime = DateTime.Now.AddMinutes(120);\n                Console.WriteLine($\"ClockTime={clock.ClockTime:t}\");\n                Console.WriteLine($\"AlarmTime={clock.AlarmTime:t}\");\n                clock.Start(); \n    ```", "```cs\n                Console.WriteLine(\"Press ENTER\");\n                Console.ReadLine();\n\n    ```", "```cs\n                static void ClockWakeUp(object sender, EventArgs e)\n                {\n                   Console.WriteLine();\n                   Console.WriteLine(\"Wake up\");\n                }\n    ```", "```cs\n                 static void ClockTicked(object sender, DateTime e)\n                    => Console.Write($\"{e:t}...\");\n            }\n        }\n    } \n    ```", "```cs\n    ClockTime=14:59\n    AlarmTime=16:59\n    15:00...15:01...15:02...15:03...15:04...15:05...15:06...15:07...15:08...15:09...15:10...15:11...15:12...15:13...15:14...15:15...15:16...15:17...15:18...15:19...15:20...15:21...15:22...15:23...15:24...15:25...15:26...15:27...15:28...15:29...15:30...15:31...15:32...15:33...15:34...15:35...15:36...15:37...15:38...15:39...15:40...15:41...15:42...15:43...15:44...15:45...15:46...15:47...15:48...15:49...15:50...15:51...15:52...15:53...15:54...15:55...15:56...15:57...15:58...15:59...16:00...16:01...16:02...16:03...16:04...16:05...16:06...16:07...16:08...16:09...16:10...16:11...16:12...16:13...16:14...16:15...16:16...16:17...16:18...16:19...16:20...16:21...16:22...16:23...16:24...16:25...16:26...16:27...16:28...16:29...16:30...16:31...16:32...16:33...16:34...16:35...16:36...16:37...16:38...16:39...16:40...16:41...16:42...16:43...16:44...16:45...16:46...16:47...16:48...16:49...16:50...16:51...16:52...16:53...16:54...16:55...16:56...16:57...16:58...16:59...\n    Wake up\n    Press ENTER\n    ```", "```cs\nvar clock = new AlarmClock();\nclock.Ticked += ClockTicked;\nclock.WakeUp += ClockWakeUp;\nstatic void ClockTicked(object sender, DateTime e)\n  => Console.Write($\"{e:t}...\");\n\nstatic void ClockWakeUp(object sender, EventArgs e)\n{\n    Console.WriteLine();\n    Console.WriteLine(\"Wake up\");\n}\n```", "```cs\nclock.Ticked += (sender, e) =>\n{\n    Console.Write($\"{e:t}...\"); \n};  \nclock.WakeUp += (sender, e) =>\n{\n    Console.WriteLine();\n    Console.WriteLine(\"Wake up\");\n}; \n```", "```cs\n(parameters) => expression-or-block\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nnamespace Chapter03Examples\n{\n    class LambdaExample\n    {\n        public static void Main()\n        {\n            var names = new List<string>\n            {\n                \"The A-Team\",\n                \"Blade Runner\",\n                \"There's Something About Mary\",\n                \"Batman Begins\",\n                \"The Crow\"\n            };\n```", "```cs\n            names.Sort();\n            Console.WriteLine(\"Sorted names:\");\n            foreach (var name in names)\n            {\n                Console.WriteLine(name);\n            }\n            Console.WriteLine();\n```", "```cs\n            const string Noise = \"The \";\n            names.Sort( (x, y) =>\n            {\n                if (x.StartsWith(Noise))\n                {\n                    x = x.Substring(Noise.Length);\n                }\n                if (y.StartsWith(Noise))\n                {\n                    y = x.Substring(Noise.Length);\n                }\n                return string.Compare(x , y);\n            });\n```", "```cs\n            Console.WriteLine($\"Sorted excluding leading '{Noise}':\");\n            foreach (var name in names)\n            {\n                Console.WriteLine(name);\n            }\n            Console.ReadLine();\n         }\n     }\n} \n```", "```cs\nSorted names:\nBatman Begins\nBlade Runner\nThe A-Team\nThe Crow\nThere's Something About Mary\nSorted excluding leading 'The ':\nThe A-Team\nBatman Begins\nBlade Runner\nThe Crow\nThere's Something About Mary \n```", "```cs\n    source\\Chapter03>dotnet new console -o Exercise06\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0</TargetFramework>\n      </PropertyGroup>\n    </Project>\n    ```", "```cs\n    using System;\n    using System.Linq;\n    namespace Chapter03.Exercise06\n    {\n        public static class WordUtilities\n        {\n            public static string ReverseWords(string sentence)\n            {\n    ```", "```cs\n              Func<string, string> swapWords = \n    ```", "```cs\n                phrase =>\n    ```", "```cs\n                      {\n                        const char Delimit = ' ';\n                        var words = phrase\n                            .Split(Delimit)\n                            .Reverse();\n                        return string.Join(Delimit, words);\n                    };\n    ```", "```cs\n                return swapWords(sentence);\n             }\n        }\n    ```", "```cs\n        public static class Program\n        {\n            public static void Main()\n            {\n                do\n                {\n                    Console.Write(\"Enter a sentence:\");\n                    var input = Console.ReadLine();\n                    if (string.IsNullOrEmpty(input))\n                    {\n                        break;\n                    }\n                    var result = WordUtilities.ReverseWords(input);\n                    Console.WriteLine($\"Reversed: {result}\")\n    ```", "```cs\nEnter a sentence:welcome to c#\nReversed: c# to welcome\nEnter a sentence:visual studio by microsoft\nReversed: microsoft by studio visual\n```", "```cs\nvar word = \"hello\";\nFunc<int, string> joiner = \n    input =>\n    {\n        return string.Join(\",\", Enumerable.Repeat(word, input));\n    };  \nConsole.WriteLine($\"Outer Variables: {joiner(2)}\"); \n```", "```cs\nOuter Variables: hello,hello\n```", "```cs\nword = \"goodbye\";\nConsole.WriteLine($\"Outer Variables Part2: {joiner(3)}\");\n```", "```cs\nOuter Variables Part2: goodbye,goodbye,goodbye\n```", "```cs\nFunc<int, string> joinerLocal =\n    input =>\n    {\n        var word = \"local\";\n        return string.Join(\",\", Enumerable.Repeat(word, input));\n    };\nConsole.WriteLine($\"JoinerLocal: {joinerLocal(2)}\");\nConsole.WriteLine($\"JoinerLocal: word={word}\");   \n```", "```cs\nJoinerLocal: local,local\nJoinerLocal: word=goodbye\n```", "```cs\nvar actions = new List<Action>();\nfor (var i = 0; i < 5; i++)\n{\n    actions.Add( () => Console.WriteLine($\"MyAction: i={i}\")) ;\n}\nforeach (var action in actions)\n{\n    action();\n}\n```", "```cs\nMyAction: i=5\nMyAction: i=5\nMyAction: i=5\nMyAction: i=5\nMyAction: i=5\n```", "```cs\nvar actionsSafe = new List<Action>();\nfor (var i = 0; i < 5; i++)\n{\n    var closurei = i;\n    actionsSafe.Add(() => Console.WriteLine($\"MyAction: closurei={closurei}\"));\n}\nforeach (var action in actionsSafe)\n{\n    action();\n}\n```", "```cs\nMyAction: closurei=0\nMyAction: closurei=1\nMyAction: closurei=2\nMyAction: closurei=3\nMyAction: closurei=4\n```", "```cs\nusing (IDisposable) { statement_block }\n```", "```cs\n    Enter a URL:\n    https://www1.ncdc.noaa.gov/pub/data/swdi/stormevents/csvfiles/StormEvents_details-ftp_v1.0_d1950_c20170120.csv.gz\n    Downloading https://www1.ncdc.noaa.gov/pub/data/swdi/stormevents/csvfiles/StormEvents_details-ftp_v1.0_d1950_c20170120.csv.gz...\n    Downloading...73% complete (7,758 bytes)\n    Downloading...77% complete (8,192 bytes)\n    Downloading...100% complete (10,597 bytes)\n    Downloaded to C:\\Temp\\StormEvents_details-ftp_v1.0_d1950_c20170120.csv.gz\n    Enter a URL:\n    https://www1.ncdc.noaa.gov/pub/data/swdi/stormevents/csvfiles/StormEvents_details-ftp_v1.0_d1954_c20160223.csv.gz\n    Downloading https://www1.ncdc.noaa.gov/pub/data/swdi/stormevents/csvfiles/StormEvents_details-ftp_v1.0_d1954_c20160223.csv.gz...\n    Downloading...29% complete (7,758 bytes)\n    Downloading...31% complete (8,192 bytes)\n    Downloading...54% complete (14,238 bytes)\n    Downloading...62% complete (16,384 bytes)\n    Downloading...84% complete (22,238 bytes)\n    Downloading...93% complete (24,576 bytes)\n    Downloading...100% complete (26,220 bytes)\n    Downloaded to C:\\Temp\\StormEvents_details-ftp_v1.0_d1954_c20160223.csv.gz\n    ```"]