["```cs\ndotnet --version\n```", "```cs\n8.0.101-rc.2.23502.2\n```", "```cs\ndotnet --list-sdks\n```", "```cs\n6.0.415 [C:\\Program Files\\dotnet\\sdk]7.0.402 [C:\\Program Files\\dotnet\\sdk]\n8.0.100 [C:\\Program Files\\dotnet\\sdk]\n8.0.101 [C:\\Program Files\\dotnet\\sdk]\n```", "```cs\ndotnet new webapi -n MyFirstApi -controllerscd MyFirstApi\ncode .\n```", "```cs\ndotnet build\n```", "```cs\ndotnet run\n```", "```cs\nBuilding...info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:7291\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5247\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: C:\\example_code\\chapter2\\MyFirstApi\\MyFirstApi\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application is shutting down...\n```", "```cs\ndotnet dev-certs https --trust\n```", "```cs\n{  \"$schema\": \"https://json.schemastore.org/launchsettings.json\",\n  ...\n  \"profiles\": {\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"https://localhost:7291;http://localhost:5247\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    ...\n  }\n}\n```", "```cs\ndotnet watch  File changed: .\\Services\\IService.cs.dotnet watch  Unable to apply hot reload because of a rude edit.\n   Do you want to restart your app - Yes (y) / No (n) / Always (a) / Never (v)?\n```", "```cs\ndotnet tool install -g Microsoft.dotnet-httprepl\n```", "```cs\nhttprepl <ROOT URL>/\n```", "```cs\nhttprepl http://localhost:5247/\n```", "```cs\nhttp://localhost:5247/> ls.                 []\nWeatherForecast   [GET]\n```", "```cs\nhttp://localhost:5247/> cd WeatherForecast/WeatherForecast    [GET]\n```", "```cs\nhttp://localhost:5247/WeatherForecast> get\n```", "```cs\n@MyFirstApi_HostAddress = http://localhost:5247GET {{MyFirstApi_HostAddress}}/weatherforecast/\nAccept: application/json\n###\n```", "```cs\n{    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            // Use IntelliSense to find out which attributes exist for C# debugging\n            // Use hover for the description of the existing attributes\n            // For further information visit https://github.com/dotnet/vscode-csharp/blob/main/debugger-launchjson.md.\n            \"name\": \".NET Core Launch (web)\",\n            \"type\": \"coreclr\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"build\",\n            // If you have changed target frameworks, make sure to update the program path.\n            \"program\": \"${workspaceFolder}/bin/Debug/net8.0/MyFirstApi.dll\",\n            \"args\": [],\n            \"cwd\": \"${workspaceFolder}\",\n            \"stopAtEntry\": false,\n            // Enable launching a web browser when ASP.NET Core starts. For more information: https://aka.ms/VSCode-CS-LaunchJson-WebBrowser\n            \"serverReadyAction\": {\n                \"action\": \"openExternally\",\n                \"pattern\": \"\\\\bNow listening on:\\\\s+(https?://\\\\S+)\"\n            },\n            \"env\": {\n                \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n            },\n            \"sourceFileMap\": {\n                \"/Views\": \"${workspaceFolder}/Views\"\n            }\n        },\n        {\n            \"name\": \".NET Core Attach\",\n            \"type\": \"coreclr\",\n            \"request\": \"attach\"\n        }\n    ]\n}\n```", "```cs\n[ApiController][Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n    // Some code is ignored\n    private readonly ILogger<WeatherForecastController> _logger;\n    public WeatherForecastController(ILogger<WeatherForecastController> logger)\n    {\n        _logger = logger;\n    }\n    [HttpGet(Name = \"GetWeatherForecast\")]\n    public IEnumerable<WeatherForecast> Get()\n    {\n        return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n        })\n        .ToArray();\n    }\n}\n```", "```cs\n[  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n  },\n  {\n    \"userId\": 1,\n    \"id\": 2,\n    \"title\": \"qui est esse\",\n    \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\n  },\n  ...\n]\n```", "```cs\nnamespace MyFirstApi.Models;public class Post\n{\n    public int UserId { get; set; }\n    public int Id { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Body { get; set; } = string.Empty;\n}\n```", "```cs\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Designdotnet tool install -g dotnet-aspnet-codegenerator\n```", "```cs\ndotnet-aspnet-codegenerator controller -name PostsController -api -outDir Controllers\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;using MyFirstApi.Models;\nnamespace MyFirstApi.Controllers;\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class PostsController : ControllerBase\n{\n    [HttpGet]\n    public ActionResult<List<Post>> GetPosts()\n    {\n        return new List<Post>\n        {\n            new() { Id = 1, UserId = 1, Title = \"Post1\", Body = \"The first post.\" },\n            new() { Id = 2, UserId = 1, Title = \"Post2\", Body = \"The second post.\" },\n            new() { Id = 3, UserId = 1, Title = \"Post3\", Body = \"The third post.\" }\n        };\n    }\n}\n```", "```cs\nusing MyFirstApi.Models;namespace MyFirstApi.Services;\npublic class PostsService\n{\n    private static readonly List<Post> AllPosts = new();\n    public Task CreatePost(Post item)\n    {\n        AllPosts.Add(item);\n        return Task.CompletedTask;\n    }\n    public Task<Post?> UpdatePost(int id, Post item)\n    {\n        var post = AllPosts.FirstOrDefault(x => x.Id == id);\n        if (post != null)\n        {\n            post.Title = item.Title;\n            post.Body = item.Body;\n            post.UserId = item.UserId;\n        }\n        return Task.FromResult(post);\n    }\n    public Task<Post?> GetPost(int id)\n    {\n        return Task.FromResult(AllPosts.FirstOrDefault(x => x.Id == id));\n    }\n    public Task<List<Post>> GetAllPosts()\n    {\n        return Task.FromResult(AllPosts);\n    }\n    public Task DeletePost(int id)\n    {\n        var post = AllPosts.FirstOrDefault(x => x.Id == id);\n        if (post != null)\n        {\n            AllPosts.Remove(post);\n        }\n        return Task.CompletedTask;\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;using MyFirstApi.Models;\nusing MyFirstApi.Services;\nnamespace MyFirstApi.Controllers;\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class PostsController : ControllerBase\n{\n    private readonly PostsService _postsService;\n    public PostsController()\n    {\n        _postsService = new PostsService();\n    }\n    [HttpGet(\"{id}\")]\n    public async Task<ActionResult<Post>> GetPost(int id)\n    {\n        var post = await _postsService.GetPost(id);\n        if (post == null)\n        {\n            return NotFound();\n        }\n        return Ok(post);\n    }\n    // Omitted for brevity\n}\n```", "```cs\n[HttpPost]public async Task<ActionResult<Post>> CreatePost(Post post)\n{\n    await _postsService.CreatePost(post);\n    return CreatedAtAction(nameof(GetPost), new { id = post.Id }, post);\n}\n```", "```cs\n{  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"Hello ASP.NET Core\",\n  \"body\": \"ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-enabled, Internet-connected apps.\"\n}\n```", "```cs\n[HttpPut(\"{id}\")]public async Task<ActionResult> UpdatePost(int id, Post post)\n{\n    if (id != post.Id)\n    {\n        return BadRequest();\n    }\n    var updatedPost = await _postsService.UpdatePost(id, post);\n    if (updatedPost == null)\n    {\n        return NotFound();\n    }\n    return Ok(post);\n}\n```", "```cs\nhttprepl https://localhost:7291/api/postsconnect https://localhost:7291/api/posts/1\nput -h Content-Type=application/json -c \"{\"userId\": 1,\"id\": 1,\"title\": \"Hello ASP.NET Core 8\",\"body\": \"ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-enabled, Internet-connected apps.\"}\"\n```", "```cs\nHTTP/1.1 200 OKContent-Type: application/json; charset=utf-8\nDate: Thu, 18 Aug 2022 11:25:26 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"Hello ASP.NET Core 8\",\n  \"body\": \"ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-enabled, Internet-connected apps.\"\n}\n```", "```cs\n[HttpGet]public async Task<ActionResult<List<Post>>> GetPosts()\n{\n    var posts = await _postService.GetAllPosts();\n    return Ok(posts);\n}\n```", "```cs\nprivate readonly PostsService _postsService;public PostsController()\n{\n    _postsService = new PostsService();\n}\n```", "```cs\n    public interface IPostService{    Task CreatePost(Post item);    Task<Post?> UpdatePost(int id, Post item);    Task<Post?> GetPost(int id);    Task<List<Post>> GetAllPosts();    Task DeletePost(int id);}\n    public class PostsService : IPostService\n    ```", "```cs\n    builder.Services.AddScoped<IPostService, PostsService>();\n    ```", "```cs\n    private readonly IPostService _postsService;public PostsController(IPostService postService){    _postsService = postService;}\n    ```", "```cs\ndotnet add package Microsoft.Extensions.DependencyInjection\n```", "```cs\nnamespace DependencyInjectionDemo.Services;public interface IDemoService\n{\n    SayHello();\n}\n```", "```cs\nnamespace DependencyInjectionDemo.Services;public class DemoService : IDemoService\n{\n    private readonly Guid _serviceId;\n    private readonly DateTime _createdAt;\n    public DemoService()\n    {\n        _serviceId = Guid.NewGuid();\n        _createdAt = DateTime.Now;\n    }\n    public string SayHello()\n    {\n        return $\"Hello! My Id is {_serviceId}. I was created at {_createdAt:yyyy-MM-dd HH:mm:ss}.\n\";\n    }\n}\n```", "```cs\n    builder.Services.AddScoped<IDemoService, DemoService>();\n    ```", "```cs\n    [ApiController][Route(\"[controller]\")]public class DemoController : ControllerBase{ private readonly IDemoService _demoService; public DemoController(IDemoService demoService) { _demoService = demoService; } [HttpGet] public ActionResult Get() { return Content(_demoService.SayHello()); }}\n    ```", "```cs\nhttp://localhost:5147/> get demoHTTP/1.1 200 OK\nContent-Length: 91\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:06:46 GMT\nServer: Kestrel\nHello! My Id is 6ca84d82-90cb-4dd6-9a34-5ea7573508ac. I was created at 2023-10-21 11:06:46.\nhttp://localhost:5147/> get demo\nHTTP/1.1 200 OK\nContent-Length: 91\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:07:02 GMT\nServer: Kestrel\nHello! My Id is 9bc5cf49-661d-45bb-b9ed-e0b3fe937827\\. I was created at 2023-10-21 11:07:02.\n```", "```cs\nbuilder.Services.AddSingleton<IDemoService, DemoService>();\n```", "```cs\nhttp://localhost:5147/> get demoHTTP/1.1 200 OK\nContent-Length: 91\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:08:57 GMT\nServer: Kestrel\nHello! My Id is a1497ead-bff6-4020-b337-28f1d3af7b05\\. I was created at 2023-10-21 11:08:02.\nhttp://localhost:5147/> get demo\nHTTP/1.1 200 OK\nContent-Length: 91\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:09:12 GMT\nServer: Kestrel\nHello! My Id is a1497ead-bff6-4020-b337-28f1d3af7b05\\. I was created at 2023-10-21 11:08:02.\n```", "```cs\n    public interface IService{    string Name { get; }    string SayHello();}public interface ITransientService : IService{}public class TransientService : ITransientService{    private readonly Guid _serviceId;    private readonly DateTime _createdAt;    public TransientService()    {        _serviceId = Guid.NewGuid();        _createdAt = DateTime.Now;    }    public string Name => nameof(TransientService);    public string SayHello()    {        return $\"Hello! I am {Name}. My Id is {_serviceId}. I was created at {_createdAt:yyyy-MM-dd HH:mm:ss}.\";    }}public interface ISingletonService : IService{}public class SingletonService : ISingletonService{    private readonly Guid _serviceId;    private readonly DateTime _createdAt;    public SingletonService()    {        _serviceId = Guid.NewGuid();        _createdAt = DateTime.Now;    }    public string Name => nameof(SingletonService);    public string SayHello()    {        return $\"Hello! I am {Name}. My Id is {_serviceId}. I was created at {_createdAt:yyyy-MM-dd HH:mm:ss}.\";    }}public interface IScopedService : IService{}public class ScopedService : IScopedService{    private readonly Guid _serviceId;    private readonly DateTime _createdAt;    private readonly ITransientService _transientService;    private readonly ISingletonService _singletonService;    public ScopedService(ITransientService transientService, ISingletonService singletonService)    {        _transientService = transientService;        _singletonService = singletonService;        _serviceId = Guid.NewGuid();        _createdAt = DateTime.Now;    }    public string Name => nameof(ScopedService);    public string SayHello()    {        var scopedServiceMessage = $\"Hello! I am {Name}. My Id is {_serviceId}. I was created at {_createdAt:yyyy-MM-dd HH:mm:ss}.\";        var transientServiceMessage = $\"{_transientService.SayHello()} I am from {Name}.\";        var singletonServiceMessage = $\"{_singletonService.SayHello()} I am from {Name}.\";        return            $\"{scopedServiceMessage}{Environment.NewLine}{transientServiceMessage}{Environment.NewLine}{singletonServiceMessage}\";    }}\n    ```", "```cs\n    builder.Services.AddScoped<IScopedService, ScopedService>();builder.Services.AddTransient<ITransientService, TransientService>();builder.Services.AddSingleton<ISingletonService, SingletonService>();\n    ```", "```cs\n    [ApiController][Route(\"[controller]\")]public class LifetimeController : ControllerBase{    private readonly IScopedService _scopedService;    private readonly ITransientService _transientService;    private readonly ISingletonService _singletonService;    public LifetimeController(IScopedService scopedService, ITransientService transientService,        ISingletonService singletonService)    {        _scopedService = scopedService;        _transientService = transientService;        _singletonService = singletonService;    }    [HttpGet]    public ActionResult Get()    {        var scopedServiceMessage = _scopedService.SayHello();        var transientServiceMessage = _transientService.SayHello();        var singletonServiceMessage = _singletonService.SayHello();        return Content(            $\"{scopedServiceMessage}{Environment.NewLine}{transientServiceMessage}{Environment.NewLine}{singletonServiceMessage}\");    }}\n    ```", "```cs\nhttp://localhost:5147/> get lifetimeHTTP/1.1 200 OK\nContent-Length: 625\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:20:44 GMT\nServer: Kestrel\nHello! I am ScopedService. My Id is df87d966-0e86-4f08-874f-ba6ce71de560\\. I was created at 2023-10-21 11:20:44.\nHello! I am TransientService. My Id is 77e29268-ad48-423c-94e5-de1d09bd3ba5\\. I was created at 2023-10-21 11:20:44\\. I am from ScopedService.\nHello! I am SingletonService. My Id is 95a44c5b-8678-48c6-a2f0-cc6b90423773\\. I was created at 2023-10-21 11:20:44\\. I am from ScopedService.\nHello! I am TransientService. My Id is e77564d1-e146-4d29-b74b-a07f8f6640c1\\. I was created at 2023-10-21 11:20:44.\nHello! I am SingletonService. My Id is 95a44c5b-8678-48c6-a2f0-cc6b90423773\\. I was created at 2023-10-21 11:20:44.\nhttp://localhost:5147/> get lifetime\nHTTP/1.1 200 OK\nContent-Length: 625\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:20:57 GMT\nServer: Kestrel\nHello! I am ScopedService. My Id is e5f802ed-5e4c-4abd-9213-8f13f97c1008\\. I was created at 2023-10-21 11:20:57.\nHello! I am TransientService. My Id is daccb91b-438f-4561-9c86-13b02ad8e358\\. I was created at 2023-10-21 11:20:57\\. I am from ScopedService.\nHello! I am SingletonService. My Id is 95a44c5b-8678-48c6-a2f0-cc6b90423773\\. I was created at 2023-10-21 11:20:44\\. I am from ScopedService.\nHello! I am TransientService. My Id is 94e9e6c1-729a-4033-8a27-550ea10ba5d0\\. I was created at 2023-10-21 11:20:57.\nHello! I am SingletonService. My Id is 95a44c5b-8678-48c6-a2f0-cc6b90423773\\. I was created at 2023-10-21 11:20:44.\n```", "```cs\npublic static class LifetimeServicesCollectionExtensions{\n    public static IServiceCollection AddLifetimeServices(this IServiceCollection services)\n    {\n        services.AddScoped<IScopedService, ScopedService>();\n        services.AddTransient<ITransientService, TransientService>();\n        services.AddSingleton<ISingletonService, SingletonService>();\n        return services;\n    }\n}\n```", "```cs\n// Group registrationbuilder.Services.AddLifetimeServices();\n```", "```cs\n[HttpGet]public ActionResult Get([FromServices] ITransientService transientService)\n{\n  ...\n}\n```", "```cs\npublic interface IDataService{\n    string GetData();\n}\n```", "```cs\npublic class SqlDatabaseService : IDataService{\n    public string GetData()\n    {\n        return \"Data from SQL Database\";\n    }\n}\npublic class CosmosDatabaseService : IDataService\n{\n    public string GetData()\n    {\n        return \"Data from Cosmos Database\";\n    }\n}\n```", "```cs\nbuilder.Services.AddKeyedScoped<IDataService, SqlDatabaseService>(\"sqlDatabaseService\");builder.Services.AddKeyedScoped<IDataService, CosmosDatabaseService>(\"cosmosDatabaseService\");\n```", "```cs\n[ApiController][Route(\"[controller]\")]\npublic class KeyedServicesController : ControllerBase\n{\n    [HttpGet(\"sql\")]\n    public ActionResult GetSqlData([FromKeyedServices(\"sqlDatabaseService\")] IDataService dataService) =>\n        Content(dataService.GetData());\n    [HttpGet(\"cosmos\")]\n    public ActionResult GetCosmosData([FromKeyedServices(\"cosmosDatabaseService\")] IDataService dataService) =>\n        Content(dataService.GetData());\n}\n```", "```cs\nhttp://localhost:5147/> get keyedServices/sqlHTTP/1.1 200 OK\nContent-Length: 22\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:48:49 GMT\nServer: Kestrel\nData from SQL Database\nhttp://localhost:5147/> get keyedServices/cosmos\nHTTP/1.1 200 OK\nContent-Length: 25\nContent-Type: text/plain; charset=utf-8\nDate: Fri, 20 Oct 2023 22:48:54 GMT\nServer: Kestrel\nData from Cosmos Database\n```", "```cs\nbuilder.Services.AddKeyedSingleton<IDataService, SqlDatabaseService>(\"sqlDatabaseService\");builder.Services.AddKeyedTransient<IDataService, CosmosDatabaseService>(\"cosmosDatabaseService\");\n```", "```cs\n```", "```cs\n```", "```cs\nvar app = builder.Build();using (var serviceScope = app.Services.CreateScope())\n{\n    var services = serviceScope.ServiceProvider;\n    var demoService = services.GetRequiredService<IDemoService>();\n    var message = demoService.SayHello();\n    Console.WriteLine(message);\n}\n```", "```cs\napp.MapGet(\"/weatherforecast\", () =>{\n    var forecast =  Enumerable.Range(1, 5).Select(index =>\n        new WeatherForecast\n        (\n            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            Random.Shared.Next(-20, 55),\n            summaries[Random.Shared.Next(summaries.Length)]\n        ))\n        .ToArray();\n    return forecast;\n})\n.WithName(\"GetWeatherForecast\")\n.WithOpenApi();\n```", "```cs\npublic class Post{\n    public int Id { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string Content { get; set; } = string.Empty;\n}\n```", "```cs\nvar list = new List<Post>(){\n    new() { Id = 1, Title = \"First Post\", Content = \"Hello World\" },\n    new() { Id = 2, Title = \"Second Post\", Content = \"Hello Again\" },\n    new() { Id = 3, Title = \"Third Post\", Content = \"Goodbye World\" },\n};\napp.MapGet(\"/posts\",\n    () => list).WithName(\"GetPosts\").WithOpenApi().WithTags(\"Posts\");\napp.MapPost(\"/posts\",\n    (Post post) =>\n    {\n        list.Add(post);\n        return Results.Created($\"/posts/{post.Id}\", post);\n    }).WithName(\"CreatePost\").WithOpenApi().WithTags(\"Posts\");\napp.MapGet(\"/posts/{id}\", (int id) =>\n{\n    var post = list.FirstOrDefault(p => p.Id == id);\n    return post == null ? Results.NotFound() : Results.Ok(post);\n}).WithName(\"GetPost\").WithOpenApi().WithTags(\"Posts\");\napp.MapPut(\"/posts/{id}\", (int id, Post post) =>\n{\n    var index = list.FindIndex(p => p.Id == id);\n    if (index == -1)\n    {\n        return Results.NotFound();\n    }\n    list[index] = post;\n    return Results.Ok(post);\n}).WithName(\"UpdatePost\").WithOpenApi().WithTags(\"Posts\");\napp.MapDelete(\"/posts/{id}\", (int id) =>\n{\n    var post = list.FirstOrDefault(p => p.Id == id);\n    if (post == null)\n    {\n        return Results.NotFound();\n    }\n    list.Remove(post);\n    return Results.Ok();\n}).WithName(\"DeletePost\").WithOpenApi().WithTags(\"Posts\");\n```", "```cs\napp.MapGet(\"/posts\", async (IPostService postService) =>{\n    var posts = await postService.GetPostsAsync();\n    return posts;\n}).WithName(\"GetPosts\").WithOpenApi().WithTags(\"Posts\");\napp.MapGet(\"/posts/{id}\", async (IPostService postService, int id) =>\n{\n    var post = await postService.GetPostAsync(id);\n    return post == null ? Results.NotFound() : Results.Ok(post);\n}).WithName(\"GetPost\").WithOpenApi().WithTags(\"Posts\");\napp.MapPost(\"/posts\", async (IPostService postService, Post post) =>\n{\n    var createdPost = await postService.CreatePostAsync(post);\n    return Results.Created($\"/posts/{createdPost.Id}\", createdPost);\n}).WithName(\"CreatePost\").WithOpenApi().WithTags(\"Posts\");\napp.MapPut(\"/posts/{id}\", async (IPostService postService, int id, Post post) =>\n{\n    try\n    {\n        var updatedPost = await postService.UpdatePostAsync(id, post);\n        return Results.Ok(updatedPost);\n    }\n    catch (KeyNotFoundException)\n    {\n        return Results.NotFound();\n    }\n}).WithName(\"UpdatePost\").WithOpenApi().WithTags(\"Posts\");\napp.MapDelete(\"/posts/{id}\", async (IPostService postService, int id) =>\n{\n    try\n    {\n        await postService.DeletePostAsync(id);\n        return Results.NoContent();\n    }\n    catch (KeyNotFoundException)\n    {\n        return Results.NotFound();\n    }\n}).WithName(\"DeletePost\").WithOpenApi().WithTags(\"Posts\");\n```"]