["```cs\n<div class=\"progress\">\n  <div class=\"progress-bar progress-bar-striped bg-info\n              @(IsAnimated ? \" progress-bar-animated\" : \"\")\"\n       role=\"progressbar\" aria-label=\"@LabelText\" style=\"width: @Value%\"\n       aria-valuenow=\"@Value\" aria-valuemin=\"@Minimum\" aria-valuemax=\"@Maximum\">\n    @(ShowValue ? Value + \"%\" : \"\")\n  </div>\n</div>\n@code {\n  [Parameter]\n  public int Value { get; set; } = 0;\n  [Parameter]\n  public int Minimum { get; set; } = 0;\n  [Parameter]\n  public int Maximum { get; set; } = 100;\n  [Parameter]\n  public bool IsAnimated { get; set; } = false;\n  [Parameter]\n  public bool ShowValue { get; set; } = false;\n  [Parameter]\n  public string? LabelText { get; set; } = \"Progress bar\";\n} \n```", "```cs\n<ProgressBar Value=\"25\" IsAnimated=\"true\" ShowValue=\"true\" \n             LabelText=\"Progress of database deletion\" /> \n```", "```cs\n<Router AppAssembly=\"@typeof(Program).Assembly\">\n  <Found Context=\"routeData\">\n    <RouteView RouteData=\"@routeData\" \n               DefaultLayout=\"@typeof(Layout.MainLayout)\" />\n    <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n  </Found>\n</Router> \n```", "```cs\n[Route(\"customers\")]\npublic class CustomersController\n{ \n```", "```cs\n@page \"customers\" \n```", "```cs\n@page \"/employees/{country}\"\n<div>Country parameter as the value: @Country</div>\n@code {\n  [Parameter]\n  public string Country { get; set; }\n} \n```", "```cs\n@page \"/employees/{country**?**}\"\n<div>Country parameter as the value: @Country</div>\n@code {\n  [Parameter]\n  public string**?** Country { get; set; }\n**protected****override****void****OnParametersSet****()**\n **{**\n**// if the automatically set property is null**\n**// set its value to USA**\n **Country = Country ?? \"USA\";**\n **}**\n} \n```", "```cs\n[Parameter]\n[SupplyParameterFromQuery(Name = \"country\")]\npublic string? Country { get; set; } \n```", "```cs\nusing Microsoft.AspNetCore.Components;\npublic abstract class ComponentBase : IComponent, IHandleAfterRender, IHandleEvent\n{\n  // members not shown\n} \n```", "```cs\n@inherits LayoutComponentBase\n<div>\n  ...\n  @Body\n  ...\n</div> \n```", "```cs\n@page \"/employees\"\n@layout AlternativeLayout\n<div>\n  ...\n</div> \n```", "```cs\n<a href=\"/employees\">Employees</a> \n```", "```cs\n<NavLink href=\"/employees\">Employees</NavLink> \n```", "```cs\n/employees\n/employees/USA\n/employees/UK/London \n```", "```cs\n<NavLink href=\"/employees\" Match=\"NavLinkMatch.All\">Employees</NavLink> \n```", "```cs\n    using Northwind.Blazor.Components;\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    **builder.Services.AddRazorComponents();**\n    var app = builder.Build();\n    // Configure the HTTP request pipeline.\n    if (!app.Environment.IsDevelopment())\n    {\n      app.UseExceptionHandler(\"/Error\", createScopeForErrors: true);\n      // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n      app.UseHsts();\n    }\n    app.UseHttpsRedirection();\n    app.UseStaticFiles();\n    app.UseAntiforgery();\n    **app.MapRazorComponents<App>();**\n    app.Run(); \n    ```", "```cs\n    \"applicationUrl\": \"https://localhost:5151;http://localhost:5152\", \n    ```", "```cs\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <base href=\"/\" />\n      <link rel=\"stylesheet\" href=\"bootstrap/bootstrap.min.css\" />\n      <link rel=\"stylesheet\" href=\"app.css\" />\n      <link rel=\"stylesheet\" href=\"Northwind.Blazor.styles.css\" />\n      <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" />\n      <HeadOutlet />\n    </head>\n    <body>\n      <Routes />\n      <script src=\"img/blazor.web.js\"></script>\n    </body>\n    </html> \n    ```", "```cs\n     <Router AppAssembly=\"@typeof(Program).Assembly\">\n        <Found Context=\"routeData\">\n          <RouteView RouteData=\"@routeData\" \n                     DefaultLayout=\"@typeof(Layout.MainLayout)\" />\n          <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n        </Found>\n      </Router> \n    ```", "```cs\n    @inherits LayoutComponentBase\n    <div class=\"page\">\n      <div class=\"sidebar\">\n        <NavMenu />\n      </div>\n      <main>\n        <div class=\"top-row px-4\">\n          <a href=\"https://learn.microsoft.com/aspnet/core/\" \n             target=\"_blank\">About</a>\n        </div>\n        <article class=\"content px-4\">\n            @Body\n        </article>\n      </main>\n    </div> \n    ```", "```cs\n    <div class=\"top-row ps-3 navbar navbar-dark\">\n      <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"\">Northwind.Blazor</a>\n      </div>\n    </div>\n    <input type=\"checkbox\" title=\"Navigation menu\" class=\"navbar-toggler\" />\n    <div class=\"nav-scrollable\" \n         onclick=\"document.querySelector('.navbar-toggler').click()\">\n      <nav class=\"flex-column\">\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"\" Match=\"NavLinkMatch.All\">\n            <span class=\"bi bi-house-door-fill-nav-menu\" aria-hidden=\"true\"></span> Home\n          </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"weather\">\n            <span class=\"bi bi-list-nested-nav-menu\" aria-hidden=\"true\">\n            </span> Weather\n          </NavLink>\n        </div>\n      </nav>\n    </div> \n    ```", "```cs\n    @page \"/\"\n    <PageTitle>Home</PageTitle>\n    <h1>Hello, **Blazor Full Stack**!</h1>\n    Welcome to your new app. \n    ```", "```cs\n        dotnet run --launch-profile https \n        ```", "```cs\n    .bi-house-door-fill-nav-menu {\n        background-image: url(\"data:image/svg+xml,...\");\n    }\n    .bi-plus-square-fill-nav-menu {\n        background-image: url(\"data:image/svg+xml,...\");\n    }\n    .bi-list-nested-nav-menu {\n        background-image: url(\"data:image/svg+xml,...\");\n    } \n    ```", "```cs\n    <link rel=\"stylesheet\" href=\"icons.css\" /> \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.DataContext\n    .SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    @using Microsoft.EntityFrameworkCore @* To use ToListAsync method. *@\n    @using Northwind.EntityModels @* To use NorthwindContext and so on. *@ \n    ```", "```cs\n    using Northwind.EntityModels; // To use AddNorthwindContext method. \n    ```", "```cs\n    builder.Services.AddNorthwindContext(); \n    ```", "```cs\n    @page \"/products\"\n    @inject NorthwindContext db\n    <h1>Products</h1>\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Product ID</th>\n          <th>Product Name</th>\n          <th>Unit Price</th>\n        </tr>\n      </thead>\n      <tbody>\n        @if ((products is null) || (products.Count == 0))\n        {\n          <tr><td colspan=\"4\">No products found.</td></tr>\n        }\n        else\n        {\n          @foreach (Product p in products)\n          {\n            <tr>\n              <td>@p.ProductId</td>\n              <td>@p.ProductName</td>\n              <td>@(p.UnitPrice.HasValue ? \n                p.UnitPrice.Value.ToString(\"C\") : \"n/a\")</td>\n            </tr>\n          }\n        }\n      </tbody>\n    </table>\n    @code {\n      private List<Product>? products;\n      protected override async Task OnInitializedAsync()\n      {\n        products = await db.Products.ToListAsync();\n      }\n    } \n    ```", "```cs\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"products\">\n        <span class=\"bi bi-globe\" aria-hidden=\"true\"></span> Products\n      </NavLink>\n    </div> \n    ```", "```cs\n    <h3>Counter: @CounterValue</h3>\n    <button id=\"buttonIncrement\" @onclick=\"IncrementCounter\"\n      class=\"btn btn-outline-primary\">Increment</button>\n    @code {\n      public int CounterValue { get; set; } = 0;\n      public void IncrementCounter()\n      {\n        CounterValue++;\n      }\n    } \n    ```", "```cs\n    <Counter /> \n    ```", "```cs\n    builder.Services.AddRazorComponents()\n     **.AddInteractiveServerComponents();** \n    ```", "```cs\n    app.MapRazorComponents<App>()\n     **.AddInteractiveServerRenderMode();** \n    ```", "```cs\n    @rendermode InteractiveServer \n    ```", "```cs\n    [2023-10-20T11:25:52.498Z] Information: Normalizing '_blazor' to 'https://localhost:5151/_blazor'.\n    [2023-10-20T11:25:52.675Z] Information: WebSocket connected to wss://localhost:5151/_blazor?id=j6Fc0Mbay_jWkZTWfIqs_w. \n    ```", "```cs\n    @rendermode InteractiveServer\n    <div class=\"progress\">\n      <div class=\"progress-bar progress-bar-striped bg-info\n                  @(IsAnimated ? \" progress-bar-animated\" : \"\")\"\n           role=\"progressbar\" aria-label=\"@LabelText\" \n           style=\"width: @Value%\" aria-valuenow=\"@Value\" \n           aria-valuemin=\"@Minimum\" aria-valuemax=\"@Maximum\">\n        @(ShowValue ? Value + \"%\" : \"\")\n      </div>\n    </div>\n    @code {\n      [Parameter]\n      public int Value { get; set; } = 0;\n      [Parameter]\n      public int Minimum { get; set; } = 0;\n      [Parameter]\n      public int Maximum { get; set; } = 100;\n      [Parameter]\n      public bool IsAnimated { get; set; } = false;\n      [Parameter]\n      public bool ShowValue { get; set; } = false;\n      [Parameter]\n      public string? LabelText { get; set; } = \"Progress bar\";\n    } \n    ```", "```cs\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"alert alert-info\">\n          <h4>Progress of database deletion</h4>\n          <ProgressBar Value=\"25\" IsAnimated=\"true\" ShowValue=\"true\" \n                       LabelText=\"Progress of database deletion\" />\n        </div>\n      </div>\n      <div class=\"col\">\n        More components coming soon.\n      </div>\n    </div> \n    ```", "```cs\n    **@***<link rel=\"stylesheet\" href=\"bootstrap/bootstrap.min.css\" />***@**\n    **<link rel=\"stylesheet\" href=\"****https****://cdn.jsdelivr.net/npm/bootstrap@****5.3****.****2****/dist/css/bootstrap.min.css\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">** \n    ```", "```cs\n    <script src=\"img/bootstrap.bundle.min.js\" integrity=\"sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL\" crossorigin=\"anonymous\" suppress-error=\"BL9992\"></script> \n    ```", "```cs\n    @rendermode InteractiveServer\n    <!-- Button to show the dialog box. -->\n    <button type=\"button\" class=\"btn btn-primary\" \n            data-bs-toggle=\"modal\" data-bs-target=\"#dialogBox\">\n      @DialogTitle\n    </button>\n    <!-- Dialog box to popup. -->\n    <div class=\"modal fade\" id=\"dialogBox\"\n         data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" \n         aria-labelledby=\"dialogBoxLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"dialogBoxLabel\">@DialogTitle</h5>\n            <button type=\"button\" class=\"btn-close\" \n                    data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\">\n            @ChildContent\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" \n                    @onclick=\"OnClickPrimary\">\n                @PrimaryButtonText\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\" \n                    data-bs-dismiss=\"modal\" @onclick=\"OnClickSecondary\">\n                @SecondaryButtonText\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    @code {\n      [Parameter]\n      public string? DialogTitle { get; set; }\n      // ChildContent is a special name that is set automatically by any \n      // markup content within the component begin and end elements.\n      [Parameter]\n      public RenderFragment? ChildContent { get; set; }\n      [Parameter]\n      public string? PrimaryButtonText { get; set; } = \"OK\";\n      [Parameter]\n      public EventCallback<MouseEventArgs> OnClickPrimary { get; set; }\n      [Parameter]\n      public string? SecondaryButtonText { get; set; } = \"Cancel\";\n      [Parameter]\n      public EventCallback<MouseEventArgs> OnClickSecondary { get; set; }\n    } \n    ```", "```cs\n    @rendermode InteractiveServer \n    ```", "```cs\n     <div class=\"col\">\n     **<DialogBox DialogTitle=\"Delete Database\"** \n     **PrimaryButtonText=\"Yes\" OnClickPrimary=\"Yes_Click\"**\n     **SecondaryButtonText=\"No\" OnClickSecondary=\"No_Click\">**\n     **Are you sure you want to delete the entire database? Really?**\n     **</DialogBox>**\n      </div>\n    </div>\n    **@code {**\n    **private****void****Yes_Click****(****MouseEventArgs e****)**\n     **{**\n     **Console.WriteLine(\"User clicked 'Primary'** **button** **at** **(****{****0****}, {****1****}****).\",**\n     **arg0: e.ClientX, arg1: e.ClientY)****;**\n     **}**\n    **private****void****No_Click****(****MouseEventArgs e****)**\n     **{**\n     **Console.WriteLine(\"User clicked 'Secondary'** **button** **at** **(****{****0****}, {****1****}****).\",**\n     **arg0: e.ClientX, arg1: e.ClientY)****;**\n     **}**\n    **}** \n    ```", "```cs\n    namespace Northwind.Blazor.Components;\n    public static class BootstrapColors\n    {\n      public const string Primary = \"primary\";\n      public const string Secondary = \"secondary\";\n      public const string Danger = \"danger\";\n      public const string Warning = \"warning\";\n      public const string Success = \"success\";\n      public const string Info = \"info\";\n    }\n    public static class BootstrapIcons\n    {\n      public const string Globe = \"bi bi-globe\";\n      public const string GlobeEmea = \"bi bi-globe-europe-africa\";\n      public const string Pencil = \"bi bi-pencil\";\n      public const string Trash = \"bi bi-trash\";\n      public const string PlusSquare = \"bi bi-plus-square\";\n      public const string InfoCircle = \"bi bi-info-circle\";\n      public const string ExclamationTriangleFill =\n        \"bi bi-exclamation-triangle-fill\";\n    } \n    ```", "```cs\n    @rendermode InteractiveServer\n    <div class=\"alert alert-@ColorTheme d-flex align-items-center\n         @(IsDismissable ? \" alert-dismissible fade show\" : \"\")\" role=\"alert\">\n      <div>\n        <h4 class=\"alert-heading\"><span class=\"@Icon\" aria-hidden=\"true\">\n          </span> @Title</h4>\n        @Message\n        @if (IsDismissable)\n        {\n          <button type=\"button\" class=\"btn-close\" \n                  data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n        }\n      </div>\n    </div>\n    @code {\n      [Parameter]\n      public bool IsDismissable { get; set; } = true;\n      [Parameter]\n      public string ColorTheme { get; set; } = BootstrapColors.Primary;\n      [Parameter]\n      public string Icon { get; set; } = BootstrapIcons.InfoCircle;\n      [Parameter]\n      public string? Title { get; set; }\n      [Parameter]\n      public string? Message { get; set; }\n    } \n    ```", "```cs\n    <Alert IsDismissable=\"true\" \n           Icon=\"@(BootstrapIcons.ExclamationTriangleFill)\" \n           ColorTheme=\"@(BootstrapColors.Warning)\" \n           Title=\"Warning\" \n           Message=\"Deleting the database cannot be undone.\" /> \n    ```", "```cs\n    @rendermode InteractiveServer\n    <h1>Employees **@(****string****.IsNullOrWhiteSpace(Country)**\n     **? \"Worldwide\" : \"****in** **\" + Country)**</h1>\n    @code {\n     **[****Parameter****]**\n    **public****string****? Country {** **get****;** **set****; }**\n    } \n    ```", "```cs\n    <h1>Hello, Blazor Full Stack!</h1>\n    Welcome to your new app.\n    **<****Employees****Country****=****\"USA\"** **/>**\n    **<****Employees** **/>** \n    ```", "```cs\n    @rendermode InteractiveServer\n    **@page \"/employees/{country?}\"** \n    ```", "```cs\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"employees\" Match=\"NavLinkMatch.All\">\n        <span class=\"bi bi-globe\" aria-hidden=\"true\"></span> Worldwide\n      </NavLink>\n    </div>\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"employees/USA\">\n        <span class=\"bi bi-people\" aria-hidden=\"true\"></span> Employees in USA\n      </NavLink>\n    </div>\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"employees/UK\">\n        <span class=\"bi bi-person\" aria-hidden=\"true\"></span> Employees in UK\n      </NavLink>\n    </div> \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.DataContext\n    .SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n      <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <InvariantGlobalization>**false**</InvariantGlobalization>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup> \n    ```", "```cs\n    dotnet build \n    ```", "```cs\n    \"profiles\": {\n      ...\n     **\"https\"****:****{**\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": true,\n        \"launchBrowser\": true,\n        \"launchUrl\": \"swagger\",\n     **\"applicationUrl\"****:** **\"https****:****//localhost:5153;http://localhost:5154\",**\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        } \n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc; // To use [FromServices].\n    using Northwind.EntityModels; // To use AddNorthwindContext.\n    using System.Text.Json.Serialization; // To use ReferenceHandler.\n    // Define an alias for the JsonOptions class.\n    using HttpJsonOptions = Microsoft.AspNetCore.Http.Json.JsonOptions; \n    ```", "```cs\n    builder.Services.AddNorthwindContext();\n    builder.Services.Configure<HttpJsonOptions>(options =>\n    {\n      // If we do not preserve references then when the JSON serializer\n      // encounters a circular reference it will throw an exception.\n      Options.SerializerOptions.ReferenceHandler = ReferenceHandler.Preserve;\n    }); \n    ```", "```cs\n    app.MapGet(\"api/employees\", (\n      [FromServices] NorthwindContext db) => \n        Results.Json(db.Employees))\n      .WithName(\"GetEmployees\")\n      .Produces<Employee[]>(StatusCodes.Status200OK);\n    app.MapGet(\"api/employees/{id:int}\", (\n      [FromServices] NorthwindContext db,\n      [FromRoute] int id) =>\n      {\n        Employee? Employee = db.Employees.Find(id);\n        if (employee == null)\n        {\n          return Results.NotFound();\n        }\n        else\n        {\n          return Results.Json(employee);\n        }\n      })\n      .WithName(\"GetEmployeesById\")\n      .Produces<Employee>(StatusCodes.Status200OK)\n      .Produces(StatusCodes.Status404NotFound);\n    app.MapGet(\"api/employees/{country}\", (\n      [FromServices] NorthwindContext db,\n      [FromRoute] string country) =>\n        Results.Json(db.Employees.Where(employee => \n        employee.Country == country)))\n      .WithName(\"GetEmployeesByCountry\")\n      .Produces<Employee[]>(StatusCodes.Status200OK);\n    app.MapPost(\"api/employees\", async ([FromBody] Employee employee,\n      [FromServices] NorthwindContext db) =>\n      {\n        db.Employees.Add(employee);\n        await db.SaveChangesAsync();\n        return Results.Created($\"api/employees/{employee.EmployeeId}\", employee);\n      })\n      .Produces<Employee>(StatusCodes.Status201Created); \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\n        \"Microsoft.AspNetCore.Components.QuickGrid\" Version=\"8.0.0\" />\n    </ItemGroup> \n    ```", "```cs\n    using System.Net.Http.Headers; // To use MediaTypeWithQualityHeaderValue. \n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Northwind.Blazor.Service\",\n      configureClient: options =>\n      {\n        options.BaseAddress = new(\"https://localhost:5153/\");\n        options.DefaultRequestHeaders.Accept.Add(\n          new MediaTypeWithQualityHeaderValue(\n            \"application/json\", 1.0));\n      }); \n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.QuickGrid\n    @using System.Text.Json @* To use JsonSerializerOptions. *@\n    @using System.Text.Json.Serialization @* To use ReferenceHandler. *@ \n    ```", "```cs\n    @rendermode InteractiveServer\n    @page \"/employees/{country?}\"\n    `@inject IHttpClientFactory httpClientFactory`\n    <h1>\n      Employees @(string.IsNullOrWhiteSpace(Country) ? \"Worldwide\" : \"in \" + Country)\n    </h1>\n    **<QuickGrid Items=\"@employees\" Class=\"table table-striped table-bordered\">**\n     **<PropertyColumn Property=\"@(emp => emp.EmployeeId)\"** \n     **Title=\"ID\" />**\n     **<PropertyColumn Property=\"@(emp => emp.FirstName)\" />**\n     **<PropertyColumn Property=\"@(emp => emp.LastName)\" />**\n     **<PropertyColumn Property=\"@(emp => emp.City)\" />**\n     **<PropertyColumn Property=\"@(emp => emp.Country)\" />**\n     **<PropertyColumn Property=\"@(emp => emp.HireDate)\"** \n     **Format=\"yyyy-MM-dd\" />**\n    **</QuickGrid>**\n    @code {\n      [Parameter]\n      public string? Country { get; set; }\n     **// QuickGrid works best if it binds to an IQueryable<T> sequence.**\n     **private** **IQueryable<Employee>? employees;**\n      **protected override async** **Task** **OnParametersSetAsync**()\n      {\n     **Employee[]? employeesArray =** **null**;\n    **// Employee entity has circular reference to itself so**\n     **// we must control how references are handled.**\n     **JsonSerializerOptions jsonOptions =** **new****()**\n     **{**\n     **ReferenceHandler = ReferenceHandler.Preserve,**\n     **PropertyNameCaseInsensitive =** **true**\n     **};**\n     **HttpClient client = httpClientFactory.CreateClient(**\n     **\"Northwind.Blazor.Service\");**\n    **string** **path = \"api/employees\";**\n    **try**\n     **{**\n     **employeesArray =** (**await** **client.GetFromJsonAsync<Employee[]?>(**\n     **path, jsonOptions));**\n     **}**\n    **catch** **(Exception ex)**\n     **{**\n     **Console.WriteLine($\"{ex.GetType()}: {ex.Message}\");**\n     **}**\n    **if** **(employeesArray** **is** **not****null**)\n     **{**\n     **employees = employeesArray.AsQueryable();**\n    **if** **(!****string****.IsNullOrWhiteSpace(Country))**\n     **{**\n     **employees = employees.Where(emp => emp.Country == Country);**\n     **}**\n     **}**\n     **}**\n    **}** \n    ```"]