["```cs\npublic class LogWriter\n{\n    public void Log(string message)\n    {\n        Console.WriteLine($\"LogWriter.Write\n          (message: \\\"{message}\\\")\");\n    }\n}\n```", "```cs\npublic class Worker\n{\n    private readonly LogWriter _logWriter = new LogWriter();\n    protected async Task ExecuteAsync(CancellationToken \n                                      stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            _logWriter.Log($\"Worker running at: \n             {DateTimeOffset.Now}\");\n             await Task.Delay(1000, stoppingToken);\n        }\n    }\n}\n```", "```cs\n    public interface ILogWriter\n    {\n        void Log(string message);\n    }\n    ```", "```cs\n    public class ConsoleLogWriter : ILogWriter\n    {\n        public void Log(string message)\n        {\n            Console.WriteLine($\"ConsoleLogWriter.\n            Write(message: \\\"{message}\\\")\");\n        }\n    }\n    ```", "```cs\n    public class Worker\n    {\n        private readonly ILogWriter _logWriter;\n        public Worker(ILogWriter logWriter)\n        {\n            _logWriter = logWriter;\n        }\n        protected async Task ExecuteAsync\n          (CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                _logWriter.Log($\"Worker running at: \n                                 {DateTimeOffset.Now}\");\n                 await Task.Delay(1000, stoppingToken);\n            }\n        }\n    }\n    ```", "```cs\n    builder.Services.AddScoped<ILogWriter, ConsoleLogWriter>();\n    ```", "```cs\napp.MapGet(\"/weatherforecast\", () =>\n{\n    var forecast = Enumerable.Range(1, 5).Select(index =>\n    new WeatherForecast\n    (\n        DateTime.Now.AddDays(index),\n        Random.Shared.Next(-20, 55),\n        summaries[Random.Shared.\n        Next(summaries.Length)]\n    ))\n    .ToArray();\n    return forecast;\n});\n```", "```cs\n    public interface IWeatherForecastService\n    {\n               WeatherForecast[] GetForecast();\n    }\n    ```", "```cs\npublic class WeatherForecastService : IWeatherForecastService\n{\n}\n```", "```cs\n    public class WeatherForecastService : IWeatherForecastService\n    {\n        public WeatherForecast[] GetForecast()\n        {\n            var summaries = new[]\n            {\n                \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \n                \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \n                \"Scorching\"\n            };\n            var forecast = Enumerable.Range(1, 5).\n            Select(index =>\n            new WeatherForecast\n            (\n                DateTime.Now.AddDays(index),\n                Random.Shared.Next(-20, 55),\n                summaries[Random.Shared.Next\n                (summaries.Length)]\n            ))\n            .ToArray();\n            return forecast;\n        }\n    }\n    ```", "```cs\n    builder.Services.AddScoped<IWeatherForecastService, WeatherForecastService>();\n    ```", "```cs\napp.MapGet(\"/weatherforecast\", () =>\n{\n});\n```", "```cs\napp.MapGet(\"/weatherforecast\", (IWeatherForecastService weatherForecastService) =>\n{\n    return weatherForecastService.GetForecast();\n});\n```", "```cs\nusing (var scope = app.Services.CreateScope())\n{\n    var service = scope.ServiceProvider.GetRequiredService\n                  <IWeatherForecastService>();\n    service.GetForecast();\n}\n```"]