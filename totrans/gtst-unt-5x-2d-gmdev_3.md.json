["```cs\nusing UnityEngine.UI; \n\n```", "```cs\nusing UnityEngine.UI; \n\n```", "```cs\npublic int maxHealth; *//The maximum amount of health that the player can possess*\nprivate Image fillingImage; *//The reference to \"Health_Bar_Filling\" Image component* \nprivate int health;  *//The current amount of health of the player* \n\n```", "```cs\nvoid Start () { \n  *//Get the reference to the filling image* \n  fillingImage = GetComponentInChildren<Image>(); \n\n * //set the health to the maximum* \n  health = maxHealth; \n\n  *//Update the graphics of the Health Bar* \n  updateHealthBar(); \n} \n\n```", "```cs\n*//Function to apply damage to the player* \npublic bool ApplyDamage(int value) { \n * //Apply damage to the player* \n  health -= value; \n\n  *//Check if the player has still health and update the Health Bar* \n  if(health > 0) { \n    updateHealthBar(); \n    return false; \n  } \n\n    *//In case the player has no health left, set health to zero and\n      return true* \n    health = 0; \n    updateHealthBar(); \n    return true; \n} \n\n```", "```cs\n*//Function to update the Health Bar Graphic* \nvoid updateHealthBar() { \n * //Calculate the percentage (from 0% to 100%) of the current amount of\n    health of the player* \n  float percentage = health * 1f / maxHealth; \n * //Assign the percentage to the fillingAmount variable of the\n    \"Health_Bar_Filling\"* \n  fillingImage.fillAmount = percentage; \n} \n\n```", "```cs\nusing UnityEngine.UI; \n\n```", "```cs\nprivate Text sugarMeter; *//Reference to the Text component* \nprivate int sugar; *//Amount of sugar that the player possesses* \n\n```", "```cs\nvoid Start () { \n  *//Get the reference to the Sugar_Meter_Text* \n  sugarMeter = GetComponentInChildren<Text>(); \n * //Update the Sugar Meter graphic * \n  updateSugarMeter(); \n} \n\n```", "```cs\n*//Function to increase or decrease the amount of sugar* \npublic void ChangeSugar(int value) { \n  *//Increase (or decrease, if value is negative) the amount of sugar* \n  sugar += value; \n  *//Check if the amount of sugur is negative, is so set it to zero \n*  if(sugar < 0) { \n    sugar = 0; \n  } \n  *//Update the Sugar Meter graphic * \n  updateSugarMeter(); \n} \n\n```", "```cs\n*//Function to return the amount of sugur, since it is a private\n  variable* \npublic int getSugarAmount() { \n  return sugar; \n} \n\n```", "```cs\n*//Function to update the Sugar Meter graphic * \nvoid updateSugarMeter() { \n * //Assign the amount of sugar converted to a string to the text in the\n    Sugar Meter* \n  sugarMeter.text = sugar.ToString(); \n} \n\n```", "```cs\nusing UnityEngine.EventSystems; \n\n```", "```cs\npublic class DragTest : MonoBehaviour, IDragHandler {\n```", "```cs\n    public void OnDrag(PointerEventData eventData) { \n    } \n\n```", "```cs\ntransform.position = eventData.position; \n\n```"]