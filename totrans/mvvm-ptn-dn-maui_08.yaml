- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigation in MVVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far in our journey of building the *Recipes!* app, we have laid a robust
    foundation using the MVVM design pattern. Now, there’s one important part missing:
    navigation – that is, moving between different pages of the app. This chapter
    will focus on the practical side of navigation within .NET MAUI. We’ll break down
    our discussion into four key areas:'
  prefs: []
  type: TYPE_NORMAL
- en: About .NET MAUI Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up navigation in a .NET MAUI Shell app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up navigation without .NET MAUI Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing results back
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVVM largely focuses on the separation of concerns, decoupling the logic from
    the presentation layer. When we integrate navigation within the MVVM architecture,
    we’re essentially extending the principle of “separation of concerns” to the navigation
    logic. To implement this effectively, it’s essential to grasp key principles of
    navigation.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have a solid grasp of .NET MAUI’s navigation
    capabilities. Whether you opt to utilize .NET MAUI Shell or stick with traditional
    navigation methods, you’ll be equipped to make your app’s navigation seamless
    and user-friendly. It’s time to dive in!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will continue to add functionality to the *Recipes!* app throughout this
    chapter. As always, everything can be found on GitHub at [https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter08](https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter08).
    You can start from the code provided in the `Start` folder to follow along with
    this chapter. The `Finish` folder contains the completed code, which you can consult
    for reference.
  prefs: []
  type: TYPE_NORMAL
- en: About .NET MAUI Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET MAUI Shell is an opinionated way to create the structure of a .NET MAUI
    app. It introduces a more simplified approach to building mobile applications,
    which can be quite complex when it comes to structuring and navigation. Shell
    streamlines these aspects by providing a unified, declarative syntax for expressing
    the structure and navigation pattern of an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Being opinionated, .NET MAUI Shell has specific guidelines and conventions
    it expects developers to follow, with the benefit of reducing boilerplate code
    and effort. It brings a variety of features to the table, aiming to reduce the
    complexity of mobile application development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**URI-based navigation**: Shell supports a URI-based navigation scheme, similar
    to web development models. Developers can define a **route** to a particular page.
    These routes allow for easy and loosely coupled navigation around the app, making
    the navigation code more straightforward and less error-prone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplifying complex app structures**: Shell offers out-of-the-box support
    for common UI elements such as flyout menus, tabs, and navigation bars, and all
    of them combined. Developers can easily add these structures to their apps and
    have Shell manage the rendering on different platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Shell also aims to improve performance by handling the life
    cycle of its components more efficiently, offering faster rendering times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, the opinionated nature of Shell means it might not be suitable for
    every application scenario or developer. It provides a predefined structure and
    expects developers to adhere to it, which can be beneficial for simpler apps but
    might limit flexibility for more complex scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI Shell
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI Shell is a powerful tool in any mobile developer’s toolbox. It provides
    a high level of abstraction to simplify app development, but developers should
    evaluate whether its opinionated approach aligns with their project requirements
    and constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s have a look at how to leverage Shell in a .NET MAUI app.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, when creating a new .NET MAUI app, `Shell` is already wired up
    automatically. An `AppShell` class, which inherits from `Microsoft.Maui.Controls.Shell`,
    is generated and an instance of this `AppShell` class is assigned to the `MainPage`
    property of the `App` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The value of the `MainPage` property specifies the first page that will be displayed
    when the application is launched. In other words, it’s the entry point into your
    application’s UI. This can be a single content page, a navigation page, a tabbed
    page, or even a master-detail page. Or, as shown here, when leveraging `Shell`,
    it can also be a `Shell` object. `Shell` acts as a container for your application’s
    structure and navigation, defining the initial layout and flow of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Though `MainPage` is the initial page that’s displayed, it is technically possible
    to change it at any point in the app’s life cycle to accommodate the needs of
    your application. For instance, you may initially set `MainPage` to `LoginPage`,
    and once the user successfully logs in, you could then change `MainPage` to your
    `AppShell`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `AppShell` class, you define the major structural elements of your
    application. For instance, if your app includes a flyout menu and several tabbed
    pages, you can define these elements in your `AppShell`. Here’s a basic example
    of what that might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The code shown here will render a shell containing a flyout menu with two items:
    `FlyoutItem` represents a distinct section of the app. The `Quotes` section is
    defined to contain two tabs, each with its title. The content of each tab is defined
    by a `ShellContent` object that references the page to be displayed when the tab
    is selected. The `Settings` section only contains a `ShellContent` item, which
    refers to `SettingsPage`. Without .NET MAUI Shell, creating a complex layout with
    a flyout menu, tabs, and separate sections, while managing the navigation between
    them, could be quite complex and require a lot of boilerplate code. But with Shell,
    you can define this structure in a simple, declarative way right in your `AppShell`,
    making it easier to manage and update. *Figure 8**.1* shows what the layout shown
    here, defined in XAML using Shell, looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: Flyout items and tabs when using Shell](img/B20941_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Flyout items and tabs when using Shell'
  prefs: []
  type: TYPE_NORMAL
- en: Not only does Shell allow us to define the main structure of our app, but it
    also gives us the ability to define routes. Let’s have a look at that.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: .NET MAUI Shell’s routing system is based on the concept of named routes, which
    are essentially unique identifiers, or routes, for pages within your application.
    This simplifies the process of navigating among pages and introduces a way to
    loosely couple your navigation logic from your page types. Rather than directly
    referencing page types, you navigate to registered routes. This enables a level
    of abstraction as you’re navigating to “a page” registered with a specific name,
    not directly to a specific page. This allows your concrete page associated with
    a particular route to be changed without requiring changes in your navigation
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can register a route using the `RegisterRoute` method on the static `Microsoft.Maui.Controls.Routing`
    class. Often, routes are registered in the `AppShell` class’s constructor, but
    it can be done anywhere in the app, so long as it happens early on in the application’s
    life cycle. So, the `CreateMauiApp` method in the `MauiProgram` class is also
    a good candidate. In the *Quote Of The Day* app, the registration of routes is
    done in the latter. Whatever location you choose to register your app’s routes,
    here’s how it’s done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once registered, you can navigate to the route like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In addition, Shell supports both absolute and relative navigation. An absolute
    URI, starting with a slash (`/`), resets the navigation stack before navigation,
    whereas a relative URI, not starting with a slash, pushes the navigation operation
    onto the navigation stack. For clarity, the navigation stack is essentially a
    history of pages the user has navigated through, allowing for forward and backward
    navigation in the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'This named-route-based navigation also supports passing parameters between
    pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: await Shell.Current.GoToAsync("about",
  prefs: []
  type: TYPE_NORMAL
- en: new Dictionary<string, object>()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '{"foo", "bar" }'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'public partial class AboutPage : ContentPage,'
  prefs: []
  type: TYPE_NORMAL
- en: IQueryAttributable
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: public void ApplyQueryAttributes(
  prefs: []
  type: TYPE_NORMAL
- en: IDictionary<string, object> query)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: lblParameter.Text = $"Parameter {query
  prefs: []
  type: TYPE_NORMAL
- en: '.First().Key}: {query.First().Value}";'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: public AboutPage(AboutPageViewModel vm)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: InitializeComponent();
  prefs: []
  type: TYPE_NORMAL
- en: BindingContext = vm;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Routing.RegisterRoute("about", typeof(AboutPage));
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<AboutPage>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<AboutPageViewModel>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services.AddTransientWithShellRoute<AboutPage,
  prefs: []
  type: TYPE_NORMAL
- en: AboutPageViewModel>("about");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: public interface INavigationService
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Task GoToRecipeDetail(string recipeId);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Task GoToRecipeRatingDetail(RecipeDetailDto
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: recipe);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Task GoBack();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class NavigationService : INavigationService'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private async Task Navigate(string pageName,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await Shell.Current.GoToAsync(pageName);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public Task GoToRecipeDetail(string recipeId)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => Navigate("RecipeDetail",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: new () { { "id", recipeId } });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Task GoToRecipeRatingDetail(RecipeDetailDto
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: recipe)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: =>  Navigate("RecipeRating",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: new () { { "recipe", recipe } });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Task GoBack()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: =>  Shell.Current.GoToAsync("..");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: builder.Services.AddSingleton<INavigationService,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigationService>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class RecipesOverviewViewModel :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ObservableObject
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: private readonly INavigationService
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: navigationService;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public RecipesOverviewViewModel(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IRecipeService recipeService,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IFavoritesService favoritesService,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: INavigationService navigationService)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.navigationService = navigationService;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private async Task NavigateToSelectedDetail()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (SelectedRecipe is not null)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await navigationService.GoToRecipeDetail
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (SelectedRecipe.Id);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SelectedRecipe = null;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: SelectionChanged="CollectionView_SelectionChanged"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public partial class RecipeDetailViewModel :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ObservableObject
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: private readonly INavigationService
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: navigationService;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public RecipeDetailViewModel(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IRecipeService recipeService,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IFavoritesService favoritesService,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IRatingsService ratingsService,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: INavigationService navigationService)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.navigationService = navigationService;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private Task NavigateToRatings()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => navigationService
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .GoToRecipeRatingDetail(recipeDto);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <HorizontalStackLayout.GestureRecognizers>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <TapGestureRecognizer Command="{Binding
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigateToRatingsCommand}" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </HorizontalStackLayout.GestureRecognizers>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<RecipesOverviewPage>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<RecipesOverviewViewModel>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<RecipeDetailPage>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<RecipeDetailViewModel>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<RecipeRatingsDetailPage>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<RecipeRatingsDetailViewModel>
  prefs: []
  type: TYPE_NORMAL
- en: ();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<SettingsPage>();
  prefs: []
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<SettingsViewModel>();
  prefs: []
  type: TYPE_NORMAL
- en: Routing.RegisterRoute("MainPage",
  prefs: []
  type: TYPE_NORMAL
- en: typeof (RecipesOverviewPage));
  prefs: []
  type: TYPE_NORMAL
- en: Routing.RegisterRoute("RecipeDetail",
  prefs: []
  type: TYPE_NORMAL
- en: typeof (RecipeDetailPage));
  prefs: []
  type: TYPE_NORMAL
- en: Routing.RegisterRoute("RecipeRating",
  prefs: []
  type: TYPE_NORMAL
- en: typeof (RecipeRatingsDetailPage));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: public interface INavigationParameterReceiver
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Task OnNavigatedTo(Dictionary<string, object>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: parameters);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private async Task Navigate(string pageName,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await Shell.Current.GoToAsync(pageName);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (Shell.Current.CurrentPage.BindingContext
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is INavigationParameterReceiver receiver)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await receiver.OnNavigatedTo(parameters);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public partial class RecipeDetailViewModel :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ObservableObject, INavigationParameterReceiver
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Task OnNavigatedTo(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => LoadRecipe(parameters["id"].ToString());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OnNavigatedTo method is called, the id parameter is retrieved from the dictionary
    and passed to the LoadRecipe method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class RecipeRatingsDetailViewModel :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ObservableObject, INavigationParameterReceiver
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Task OnNavigatedTo(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => LoadData(parameters["recipe"]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: as RecipeDetailDto);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public interface INavigatedFrom
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Task OnNavigatedFrom(NavigationType navigationType);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public interface INavigatedTo
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Task OnNavigatedTo(NavigationType navigationType);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: public enum NavigationType
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: Unknown,
  prefs: []
  type: TYPE_NORMAL
- en: Forward,
  prefs: []
  type: TYPE_NORMAL
- en: Back,
  prefs: []
  type: TYPE_NORMAL
- en: SectionChange,
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: protected override async void OnNavigated
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (ShellNavigatedEventArgs args)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var navigationType =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: GetNavigationType(args.Source);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: base.OnNavigated(args);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private NavigationType GetNavigationType
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (ShellNavigationSource source) =>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: source switch
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.Push or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.Insert
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => NavigationType.Forward,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.Pop or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.PopToRoot or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.Remove
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => NavigationType.Back,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.ShellItemChanged or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.ShellSectionChanged or
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ShellNavigationSource.ShellContentChanged
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => NavigationType.SectionChange,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _ => NavigationType.Unknown
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '};'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public interface INavigationInterceptor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Task OnNavigatedTo(object bindingContext,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigationType navigationType);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public partial class AppShell : Shell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: readonly INavigationInterceptor interceptor;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public AppShell(INavigationInterceptor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: interceptor)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.interceptor = interceptor;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InitializeComponent();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: protected override async void OnNavigated
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (ShellNavigatedEventArgs args)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var navigationType =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: GetNavigationType(args.Source);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: base.OnNavigated(args);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await interceptor.OnNavigatedTo(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CurrentPage?.BindingContext,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: navigationType);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public App(INavigationInterceptor interceptor)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: MainPage = new AppShell(interceptor);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Public class NavigationService : INavigationService,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: INavigationInterceptor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: WeakReference<INavigatedFrom> previousFrom;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public async Task OnNavigatedTo(object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bindingContext, NavigationType navigationType)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if(previousFrom is not null && previousFrom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .TryGetTarget(out INavigatedFrom from))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await from.OnNavigatedFrom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (navigationType);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (bindingContext
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is INavigatedTo to)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await to.OnNavigatedTo(navigationType);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if(bindingContext is INavigatedFrom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: navigatedFrom)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: previousFrom = new (navigatedFrom);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: previousFrom = null;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: builder.Services.AddSingleton<NavigationService>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: builder.Services.AddSingleton<INavigationService>(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c => c.GetRequiredService<NavigationService>());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: builder.Services.AddSingleton<INavigationInterceptor>(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c => c.GetRequiredService<NavigationService>());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public static class Routes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: static Dictionary<string, Type> routes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: = new Dictionary<string, Type>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public static void Register<T>(string key)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'where T : Page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => routes.Add(key, typeof(T));
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public static Type GetType(string key)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => routes[key];
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Routes.Register<RecipesOverviewPage>("MainPage");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Routes.Register<RecipeDetailPage>("RecipeDetail");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Routes.Register<RecipeRatingsDetailPage>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("RecipeRating");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Task GoToOverview();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public App(INavigationService navigationService)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Application.Current.UserAppTheme = AppTheme.Light;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InitializeComponent();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: MainPage = new NavigationPage();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: navigationService.GoToOverview();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class NonShellNavigationService :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: INavigationService
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: protected INavigation Navigation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: get
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: INavigation? navigation =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Application.Current?.MainPage?.Navigation;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (navigation is not null)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return navigation;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throw new Exception();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private async Task Navigate(string key,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var type = Routes.GetType(key);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var page = ServiceProvider.Current
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .GetService(type) as Page;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: page.NavigatedFrom += Page_NavigatedFrom;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await Navigation.PushAsync(page);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (page.BindingContext
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is INavigationParameterReceiver receiver)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await receiver.OnNavigatedTo(parameters);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (Navigation.NavigationStack.Count == 1)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (page.BindingContext
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is INavigatedTo to)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await to.OnNavigatedTo(NavigationType
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .SectionChange);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private async void Page_NavigatedFrom(object sender,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigatedFromEventArgs e)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bool isForwardNavigation =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigation.NavigationStack.Count > 1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '&& Navigation.NavigationStack[^2] == sender;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (sender is Page page)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (!isForwardNavigation)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: page.NavigatedFrom -= Page_NavigatedFrom;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await OnNavigatedTo(Navigation.NavigationStack
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .Last().BindingContext,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: isForwardNavigation ? NavigationType
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '.Forward : NavigationType.Back);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: WeakReference<INavigatedFrom> previousFrom;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: private async Task OnNavigatedTo(object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: bindingContext,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigationType navigationType)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (previousFrom is not null && previousFrom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .TryGetTarget(out INavigatedFrom from))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await from.OnNavigatedFrom(navigationType);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (bindingContext
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is INavigatedTo to)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await to.OnNavigatedTo(navigationType);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (bindingContext is INavigatedFrom
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: navigatedFrom)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: previousFrom = new(navigatedFrom);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: previousFrom = null;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public Task GoBack()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => Navigation.PopAsync();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Task GoToRecipeDetail(string recipeId)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => Navigate("RecipeDetail",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: new() { { "id", recipeId } });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Task GoToRecipeRatingDetail(RecipeDetailDto
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: recipe)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => Navigate("RecipeRating",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: new() { { "recipe", recipe } });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Task GoToOverview()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => Navigate("Overview", null);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: builder.Services.AddSingleton<INavigationService ,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NonShellNavigationService>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Task GoBackAndReturn(Dictionary<string, object>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: parameters);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public async Task GoBackAndReturn(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await GoBack();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (Shell.Current.CurrentPage.BindingContext
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is INavigationParameterReceiver receiver)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await receiver.OnNavigatedTo(parameters);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public async Task GoBackAndReturn(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await GoBack();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if(Navigation.NavigationStack.Last()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .BindingContext
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is INavigationParameterReceiver receiver)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await receiver.OnNavigatedTo(parameters);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Task GoToChooseLanguage(string currentLanguage);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public Task GoToChooseLanguage(string currentLanguage)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: => Navigate("PickLanguagePage",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: new() { { "language", currentLanguage } });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<PickLanguagePage>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: builder.Services.AddTransient<PickLanguageViewModel>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Routing.RegisterRoute("PickLanguagePage",
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: typeof (PickLanguagePage));
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //Non-Shell
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //Routes.Register<PickLanguagePage>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //("PickLanguagePage");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //Non-Shell
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class PickLanguageViewModel : ObservableObject,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: INavigationParameterReceiver
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: readonly INavigationService _navigationService;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public PickLanguageViewModel(I
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigationService navigationService)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _navigationService = navigationService;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public async Task OnNavigatedTo(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _selectedLanguage =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: parameters["language"] as string;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OnPropertyChanged(nameof(SelectedLanguage));
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private Task LanguagePicked()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return _navigationService.GoBackAndReturn(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: new Dictionary<string, object> {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{ "SelectedLanguage", SelectedLanguage }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class SettingsViewModel :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ObservableObject, INavigationParameterReceiver
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public Task OnNavigatedTo(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dictionary<string, object> parameters)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if(parameters is not null &&
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: parameters.ContainsKey("SelectedLanguage"))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CurrentLanguage =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: parameters["SelectedLanguage"] as string;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return Task.CompletedTask;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Readonly INavigationService _navigationService;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public SettingsViewModel(INavigationService service)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _navigationService = service;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: private async Task ChooseLanguage()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await _navigationService
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .GoToChooseLanguage(CurrentLanguage);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
