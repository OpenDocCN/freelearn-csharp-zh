- en: Chapter 3. 2D Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。2D动画
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Flipping a sprite horizontally
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平翻转精灵
- en: Animating body parts for character movement events
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为角色移动事件动画身体部分
- en: Creating a 3-frame animation clip to make a platform continually animate
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个3帧动画剪辑，使平台持续动画
- en: Making a platform start falling once stepped-on using a Trigger to move animation
    from one state to another
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用触发器使平台一旦被踩到就开始下落，从而将动画从一个状态移动到另一个状态
- en: Creating animation clips from sprite sheet sequences
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从精灵表序列创建动画剪辑
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Unity 5 builds on the introduction of powerful 2D features in the Mecanim animation
    system and the 2D physics system that were introduced in Unity 4.6 late 2014\.
    In this chapter, we present a range of recipes to introduce the basics of 2D animation
    in Unity 5, and help you understand the relationships between the different animation
    elements.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 5建立在2014年晚些时候在Unity 4.6中引入的强大2D功能Mecanim动画系统和2D物理系统的基础上。在本章中，我们提供了一系列菜谱来介绍Unity
    5中2D动画的基础知识，并帮助你理解不同动画元素之间的关系。
- en: The big picture
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整体概念
- en: In Unity 2D animations can be created in several different ways – one way is
    to create many images, each slightly different, which frame-by-frame give the
    appearance of movement. A second way to create animations is by defining keyframe
    positions for individual parts of an object (for example, the arms, legs, feet,
    head, eyes, and so on), and getting Unity to calculate all the in-between positions
    when the game in running.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity 2D中，可以通过几种不同的方式创建动画 - 一种方式是创建许多略有不同的图像，每个图像逐帧给出运动的外观。创建动画的第二种方式是定义对象各个部分的键帧位置（例如，手臂、腿部、脚、头部、眼睛等），并在游戏运行时让Unity计算所有中间位置。
- en: '![The big picture](img/1362OT_03_21.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![整体概念](img/1362OT_03_21.jpg)'
- en: Both sources of animations become **Animation Clips** in the Animation panel.
    Each **Animation Clip** then becomes a **State** in the **Animator Controller
    State Machine**. We then define under what conditions a GameObject will **Transition**
    from one animation state (clip) to another.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 两种动画来源都成为动画面板中的**动画剪辑**。然后，每个**动画剪辑**成为**动画控制器状态机**中的**状态**。然后我们定义在什么条件下GameObject将**过渡**从一个动画状态（剪辑）到另一个状态。
- en: Flipping a sprite horizontally
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平翻转精灵
- en: Perhaps the simplest 2D animation is a simple flip, from facing left to facing
    right, or facing up to facing down, and so on. In this recipe we'll add a cute
    bug sprite to the scene, and write a short script to flip its horizontal direction
    when the *Left* and *Right* arrow keys are pressed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最简单的2D动画就是简单的翻转，从面向左到面向右，或者从面向上到面向下，等等。在这个菜谱中，我们将向场景添加一个可爱的虫子精灵，并编写一个简短的脚本，当按下*左*和*右*箭头键时翻转其水平方向。
- en: '![Flipping a sprite horizontally](img/1362OT_03_04.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![水平翻转精灵](img/1362OT_03_04.jpg)'
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the image you need in a folder named `Sprites`
    in folder `1362_03_01`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们在文件夹`1362_03_01`中的`Sprites`文件夹中准备了你需要的图像。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To flip an object horizontally with arrow key presses, follow these steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过箭头键按下来水平翻转一个对象，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Unity 2D项目。
- en: Import the provided image `EnemyBug.png`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的图像`EnemyBug.png`。
- en: Drag an instance of the red **Enemy Bug** image from the **Project | Sprites**
    folder into the scene. Position this GameObject at (`0`, `0`, `0`) and scale to
    (`2`, `2`, `2`).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**敌人虫子**图像的一个实例从**项目 | 精灵**文件夹拖到场景中。将此GameObject定位在（`0`，`0`，`0`），并缩放到（`2`，`2`，`2`）。
- en: 'Add an instance of C# script class `BugFlip` as a component to your **Enemy
    Bug** GameObject:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将C#脚本类`BugFlip`的一个实例作为组件添加到**敌人虫子**GameObject：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you run your scene, pressing the *Left* and *Right* arrow keys should make
    the bug face left or right correspondingly.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行场景时，按下*左*和*右*箭头键应该使虫子面向左或右。
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The C# class defines a Boolean variable `facingRight`, which stores a `true`/`false`
    value corresponding to whether or not the bug is facing right or not. Since our
    bug sprite is initially facing right, then we set the initial value of `facingRight`
    to true to match this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: C#类定义了一个布尔变量`facingRight`，它存储一个`true`/`false`值，对应于虫子是否面向右。由于我们的虫子精灵最初面向右，因此我们将`facingRight`的初始值设置为true以匹配这一点。
- en: Method `Update()`, every frame, checks to see if the *Left* or *Right* arrow
    keys have been pressed. If the *Left* arrow key is pressed and the bug is facing
    right, then method `Flip()` is called, likewise if the *Right* arrow key is pressed
    and the bug is facing left (that is, facing right is false), again method `Flip()`
    is called.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `Update()`，在每一帧都会检查是否按下了**左**或**右**箭头键。如果按下**左**箭头键且虫子面向右，则调用方法 `Flip()`，同样，如果按下**右**箭头键且虫子面向左（即面向右为假），则再次调用方法
    `Flip()`。
- en: Method `Flip()` performs two actions, the first simply reverses the true/false
    value in variable `facingRight`. The second action changes the **+**/**-** sign
    of the X-value of the `localScale` property of the transform. Reversing the sign
    of the `localScale` results in the 2D flip that we desire. Look inside the `PlayerControl`
    script for the **BeanMan** character in the next recipe – you'll see exactly the
    same `Flip()` method being used.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `Flip()` 执行两个动作，第一个动作简单地反转变量 `facingRight` 中的真/假值。第二个动作改变变换的 `localScale`
    属性的 X 值的 **+**/**-** 符号。反转 `localScale` 的符号会产生我们想要的 2D 翻转效果。在下一道菜谱中查看 `PlayerControl`
    脚本中的 **BeanMan** 角色内部 – 你会看到完全相同的 `Flip()` 方法被使用。
- en: Animating body parts for character movement events
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为角色移动事件动画化身体部位
- en: In this recipe, we'll learn to animate the hat of the Unity bean-man character
    in response to a jump event.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何根据跳跃事件来动画化Unity豆人角色的帽子。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the files you need in folder `1362_03_02`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们在文件夹 `1362_03_02` 中准备了所需的文件。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To animate body parts for character movement events, follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要为角色移动事件动画化身体部位，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Unity 2D项目。
- en: 'Import the provided package `BeanManAssets`, by choosing menu: **Assets** |
    **Import Package** | **Custom Package …**, and then click the **Import** button
    to import all these assets into your **Project** panel.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择菜单：**资产** | **导入包** | **自定义包…**，导入提供的包 `BeanManAssets`，然后点击**导入**按钮将所有这些资产导入到你的**项目**面板中。
- en: Increase the size of the **Main Camera** to `10`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**主摄像机**的大小增加到`10`。
- en: 'Let''s setup the 2D gravity setting for this project – we''ll use the same
    setting as from Unity''s 2D platform tutorial, a setting of Y= `-30`. Set 2D gravity
    to this value by choosing menu: **Edit** | **Project Settings** | **Physics 2D**,
    and then at the top change the Y value to `-30`.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为这个项目设置2D重力设置 – 我们将使用与Unity 2D平台教程相同的设置，Y= `-30`。通过选择菜单：**编辑** | **项目设置**
    | **物理2D**，然后在顶部将Y值更改为`-30`。
- en: Drag an instance of the BeanMan **character2D** from the **Project** | **Prefabs**
    folder into the scene. Position this GameObject at (`0`, `3`, `0`).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目** | **预制体**文件夹中拖拽一个BeanMan **character2D**精灵实例到场景中。将此GameObject定位在（`0`，`3`，`0`）。
- en: Drag an instance of the sprite **platformWallBlocks** from the **Project** |
    **Sprites** folder into the scene. Position this GameObject at (`0`, `-4`, `0`).
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目** | **精灵**文件夹中拖拽一个**platformWallBlocks**精灵实例到场景中。将此GameObject定位在（`0`，`-4`，`0`）。
- en: 'Add a **Box Collider 2D** component to GameObject **platformWallBlocks** by
    choosing menu: **Add Component** | **Physics 2D** | **Box Collider 2D**.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择菜单：**添加组件** | **物理2D** | **Box Collider 2D**，为GameObject **platformWallBlocks**添加一个**Box
    Collider 2D**组件。
- en: We now have a stationary platform that the player can land upon, and walk left
    and right on. Create a new **Layer** named **Ground**, and assign GameObject **platformWallBlocks**
    to this new layer, as shown in the following screenshot. Pressing the *Space*
    key when the character is on the platform will now make him jump.![How to do it...](img/1362OT_03_05.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个静止的平台，玩家可以站在上面，并在左右方向行走。创建一个新的**层**，命名为**地面**，并将GameObject **platformWallBlocks**分配到这个新层，如下截图所示。当角色站在平台上时按下**空格**键，现在他会跳起。![如何操作...](img/1362OT_03_05.jpg)
- en: Currently the BeanMan character is animated (arms and legs moving) when we make
    him jump. Let's remove the Animation clips and Animator controller and create
    our own from scratch. Delete folders Clips and Controllers from **Project** |
    **Assets** | **PotatoMan2DAssets** | **Character2D** | **Animation**, as shown:![How
    to do it...](img/1362OT_03_22.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，当BeanMan角色跳跃时，他会进行动画（手臂和腿部移动）。让我们删除动画剪辑和动画控制器，从头开始创建。如截图所示，从**项目** | **资产**
    | **PotatoMan2DAssets** | **Character2D** | **Animation**中删除文件夹Clips和Controllers：![如何操作...](img/1362OT_03_22.jpg)
- en: Let's create an Animation clip (and its associated Animator controller) for
    our hero character. In the Hierarchy panel select GameObject **hero**. Ensuring
    GameObject **character2D** is selected in the **Hierarchy**, open the **Animation**
    panel, and ensure it is in **Dope Sheet** view (this is the default).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的英雄角色创建一个动画剪辑（及其相关的动画控制器）。在**层次结构**面板中选择GameObject **hero**。确保在**层次结构**中选择GameObject
    **character2D**，打开**动画**面板，并确保它处于**Dope Sheet**视图（这是默认视图）。
- en: Click the empty dropdown menu in the **Animation** panel (next to the greyed
    out word `Samples`), and choose menu item **[Create New Clip]**:![How to do it...](img/1362OT_03_06.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**动画**面板中的空白下拉菜单（位于灰色文字`样本`旁边），选择菜单项**[创建新剪辑**]：![如何操作...](img/1362OT_03_06.jpg)
- en: Save the new clip in the **Character2D** | **Animation** folder, naming it as
    **character-beanman-idle**. You've now created an Animation clip for the 'idle'
    character state (which is not animated).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新剪辑保存在**Character2D** | **动画**文件夹中，命名为**character-beanman-idle**。您现在已创建了一个用于“空闲”角色状态的动画剪辑（该状态未进行动画处理）。
- en: Note
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Your final game may end up with tens, or even hundreds, of animation clips.
    Make things easy to search by prefixing the names of clips with object type, name,
    and then description of the animation clip.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您最终的游戏可能包含数十个甚至数百个动画剪辑。通过在剪辑名称前加上对象类型、名称以及动画剪辑的描述，使搜索变得容易。
- en: Looking at the **Character2D** | **Animation** folder in the Project panel you
    should now see both the Animation clip you have just created (**character-beanman-idle**)
    and also a new Animator controller, which has defaulted to the name of your GameObject
    **character2D**:![How to do it...](img/1362OT_03_23.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中查看**Character2D** | **动画**文件夹，您现在应该看到您刚刚创建的动画剪辑(**character-beanman-idle**)以及一个新的动画控制器，该控制器默认为您的GameObject
    **character2D**的名称：![如何操作...](img/1362OT_03_23.jpg)
- en: Ensuring GameObject **character2D** is selected in the **Hierarchy**, open the
    **Animator** panel and you'll see the State Machine for controlling the animation
    of our character. Since we only have one Animation clip (**character-beanman-idle**)
    then upon entry the State Machine immediately enters this state.![How to do it...](img/1362OT_03_24.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**层次结构**中选择GameObject **character2D**，打开**动画**面板，您将看到控制我们角色动画的状态机。由于我们只有一个动画剪辑(**character-beanman-idle**)，因此状态机在进入时立即进入此状态。![如何操作...](img/1362OT_03_24.jpg)
- en: Run your scene – since the character is always in the 'idle' state, we see no
    animation yet when we make it jump.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的场景——由于角色始终处于“空闲”状态，当我们让它跳跃时，我们还没有看到任何动画。
- en: Now we'll create a 'jump' Animation clip which animates the hat. Click the empty
    dropdown menu in the **Animation** panel (next to the greyed out word 'Samples'),
    and create a new clip in your **Animation** folder, naming it **character-beanman-jump**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建一个“跳跃”动画剪辑，用于动画化帽子。点击**动画**面板中的空白下拉菜单（位于灰色文字`样本`旁边），并在您的**动画**文件夹中创建一个新的剪辑，命名为**character-beanman-jump**。
- en: Click button **Add Property**, and chose **Transform** | **Position** of the
    **hat** child object, by clicking its '**+**' plus-sign button. We are now recording
    changes to the (X, Y, Z) position of GameObject **hat** in this animation clip:![How
    to do it...](img/1362OT_03_25.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加属性**按钮，并通过点击其“**+**”加号按钮选择**帽子**子对象的**变换** | **位置**。我们现在正在记录在此动画剪辑中GameObject
    **帽子**的(X, Y, Z)位置的变化：![如何操作...](img/1362OT_03_25.jpg)
- en: You should now see 2 'keyframes' at 0.0 and at 1.0\. These are indicated by
    diamonds in the **Timeline** area in the right-hand-section of the **Animation**
    panel.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该看到在0.0和1.0处有2个“关键帧”。这些在**动画**面板右侧部分的**时间轴**区域用菱形表示。
- en: Click to select the first keyframe (at time 0.0). Now in the **Scene** panel
    move the hat up and left a little, away from the head. You should see that all
    three X, Y, Z values have a red background in the **Inspector** – this is to inform
    you that the values of the **Transform** component are being recorded in the animation
    clip:![How to do it...](img/1362OT_03_26.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选择第一个关键帧（在时间0.0处）。现在在**场景**面板中移动帽子向上并向左稍微移动一点，远离头部。您应该看到在**检查器**中所有三个X, Y,
    Z值都有红色背景——这是为了通知您，**变换**组件的值正在被记录在动画剪辑中：![如何操作...](img/1362OT_03_26.jpg)
- en: Since 1 second is perhaps too long for our jump animation, drag the second keyframe
    diamond to the left to a time of 0.5.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于1秒可能对于我们跳跃动画来说太长了，将第二个关键帧的菱形拖动到左侧，时间设置为0.5。
- en: We now need to define when the character should Transition from the 'idle' state
    to the 'jump' state. In the **Animator** panel select state **character-beanman-idle**,
    and create a transition to the state **character-beanman-jump** by right-mouse-clicking
    and choosing menu Make Transition, then drag the transition arrow to state **character-beanman-jump**,
    as shown:![How to do it...](img/1362OT_03_27.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要定义角色应该从 '空闲' 状态转换到 '跳跃' 状态的时间。在 **动画器** 面板中选择状态 **character-beanman-idle**，通过右键单击并选择菜单
    **Make Transition**，然后拖动转换箭头到状态 **character-beanman-jump**，如图所示：![如何操作...](img/1362OT_03_27.jpg)
- en: Now let's add a Trigger parameter named 'Jump', by clicking on the add parameter
    plus-sign "**+**" button at the top-left of the **Animator** panel, choosing **Trigger**,
    and typing the name **Jump**:![How to do it...](img/1362OT_03_28.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过点击 **动画器** 面板左上角的添加参数加号按钮 "**+**"，选择 **触发器**，并输入名称 **Jump** 来添加一个名为
    'Jump' 的触发器参数：![如何操作...](img/1362OT_03_28.jpg)
- en: 'We can now define the properties for when our character should **Transition**
    from idle to jump. Click the Transition arrow to select it, and set the following
    4 properties in the **Inspector** panel:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以定义当我们的角色应该从空闲状态转换到跳跃状态时的属性。点击转换箭头以选择它，并在 **检查器** 面板中设置以下 4 个属性：
- en: '**Has Exit Time**: uncheck'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有退出时间**: 取消勾选'
- en: '**Transition Duration**: `0.01`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换持续时间**: `0.01`'
- en: '**Interruption State**: `Current State`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中断状态**: `Current State`'
- en: '**Conditions**: Add `Jump` (click plus-sign ''`+`'' button at bottom)'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件**: 添加 `Jump`（点击底部的加号按钮 `+`）'
- en: '![How to do it...](img/1362OT_03_29.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1362OT_03_29.jpg)'
- en: Save and run your scene. Once the character has landed on the platform and you
    press the *SPACE* key to jump, you'll now see the character's hat jump away from
    his head, and slowly move back. Since we haven't added any transition to ever
    leave the Jump state, this Animation clip will loop, so the hat keeps on moving
    even when the jump is completed.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行你的场景。一旦角色落在平台上并且你按下 *空格* 键跳跃，你现在会看到角色的帽子从头上跳开，并慢慢移动回来。由于我们没有添加任何离开跳跃状态的转换，这个动画剪辑将循环，所以帽子即使在跳跃完成后也会继续移动。
- en: 'In the Animator panel select state **character-beanman-jump** and add a new
    Transition back to state **character-beanman-idle**. Select this Transition arrow
    and in the Inspector panel sets its properties as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画器面板中选择状态 **character-beanman-jump** 并添加一个返回到状态 **character-beanman-idle**
    的新转换。选择这个转换箭头，并在 **检查器** 面板中设置其属性如下：
- en: '**Has Exit Time**: (leave as checked)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有退出时间**: （保持勾选）'
- en: '**Exit time**: `0.5` (this needs to be the same time value as the second keyfame
    of our Jump animation clip)'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退出时间**: `0.5`（这需要与我们的跳跃动画剪辑的第二个关键帧相同的时间值）'
- en: '**Transition Duration**: `0.01`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换持续时间**: `0.01`'
- en: '**Interruption State**: `Current State`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中断状态**: `Current State`'
- en: Save and run your scene. Now when you jump the hat should animate once, after
    which the character immediately returns to its Idle state.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行你的场景。现在当你跳跃时，帽子应该会动画一次，之后角色立即回到空闲状态。
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have added an Animation controller State Machine to GameObject **character2D**.
    The two Animation clips you created (idle and jump) appear as States in the Animator
    panel. You created a Transition from Idle to Jump when the 'Jump' Trigger parameter
    is received by the State Machine. You created a second Transition, which transitions
    back to the Idle state after waiting 0.5 seconds (the same duration between the
    2 keyframes in our Jump Animation clip).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为 GameObject **character2D** 添加了一个动画控制器状态机。你创建的两个动画剪辑（空闲和跳跃）在动画器面板中显示为状态。当状态机接收到
    'Jump' 触发器参数时，你创建了一个从空闲到跳跃的转换。你创建了一个第二个转换，在等待 0.5 秒后（与我们的跳跃动画剪辑中的两个关键帧之间的相同持续时间）返回空闲状态。
- en: Note that the key to everything working for the bean-man character is that when
    we make the character jump with the *SPACE* key, then code in the `PlayerControl`
    C# scripted component of GameObject **character2D**, as well as making the sprite
    move upwards on screen, also sends a `SetTrigger(…)` message to the Animator controller
    component, for the **Trigger** named **Jump**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使豆人角色一切正常的关键在于，当我们使用 *空格* 键使角色跳跃时，GameObject **character2D** 的 `PlayerControl`
    C# 脚本组件中的代码，以及使精灵在屏幕上向上移动，同时也向动画控制器组件发送一个 `SetTrigger(…)` 消息，用于名为 **Jump** 的 **触发器**。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The difference between a **Boolean** Parameter and a **Trigger** is that a **Trigger**
    is temporality set to `True` and once the `SetTrigger(…)` event has been 'consumed'
    by a state transition it automatically returns to being `False`. So Triggers are
    useful for actions we wish to do once and then revert to a previous state. A **Boolean**
    Parameter is a variable, which can have its value set to true/or `False` at different
    times during the game, and so different Transitions can be created to fire depending
    on the value of the variable at any time. Note that **Boolean** parameters have
    to have their values explicitly set back to `False` with a `SetBool(…)`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔参数**和**触发器**之间的区别在于，**触发器**是临时设置为`True`，一旦`SetTrigger(…)`事件被状态转换''消耗''，它将自动返回到`False`。因此，触发器对于我们希望执行一次然后返回到先前状态的操作很有用。**布尔参数**是一个变量，可以在游戏的不同时间将其值设置为`True`或`False`，因此可以创建不同的转换来根据变量的值在任何时间触发。请注意，**布尔参数**必须使用`SetBool(…)`显式地将它们的值设置回`False`。'
- en: 'The following screenshot highlights the line of code that sends the `SetTrigger(…)`
    message:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图突出了发送`SetTrigger(…)`消息的代码行：
- en: '![How it works...](img/1362OT_03_30.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1362OT_03_30.jpg)'
- en: '**State Machines** for animations of a range of motions (running/walking/jumping/falling/dying
    and so on.) will have more states and transitions. The Unity-provided bean-man
    character has a more complex **State Machine**, and more complex animations (of
    hands and feet, and eyes and hat and so on, for each **Animation** clip), which
    you may find useful to explore.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 用于一系列动作（跑步/行走/跳跃/坠落/死亡等）的**状态机**将具有更多状态和转换。Unity提供的bean-man角色有一个更复杂的**状态机**，以及更复杂的动画（每个**动画片段**的手和脚、眼睛和帽子等），这可能对您探索这些内容很有用。
- en: Learn more about the Animation view on the Unity Manual web pages at [http://docs.unity3d.com/Manual/AnimationEditorGuide.html](http://docs.unity3d.com/Manual/AnimationEditorGuide.html).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity手册网页上了解更多关于动画视图的信息：[http://docs.unity3d.com/Manual/AnimationEditorGuide.html](http://docs.unity3d.com/Manual/AnimationEditorGuide.html)。
- en: Creating a 3-frame animation clip to make a platform continually animate
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个3帧的动画片段以使平台不断动画化
- en: In this recipe, we'll make a wooden-looking platform continually animate, moving
    upwards and downwards. This can be achieved with a single, 3-frame, animation
    clip (starting at top, position at bottom, top position again).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将制作一个看起来像木头的平台，使其不断动画化，上下移动。这可以通过一个单一的、3帧的动画片段（从顶部开始，位置在底部，然后再次回到顶部位置）来实现。
- en: '![Creating a 3-frame animation clip to make a platform continually animate](img/1362OT_03_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个3帧的动画片段以使平台不断动画化](img/1362OT_03_02.jpg)'
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the previous one, so make a copy of that project, and
    work on the copy for this recipe.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱基于之前的菜谱，所以请复制那个项目，并为此菜谱在该副本上工作。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a continually moving animated platform, follow these steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个持续移动的动画平台，请按照以下步骤操作：
- en: Drag an instance of the sprite **platformWoodBlocks** from the **Project | Sprites**
    folder into the scene. Position this GameObject at (`-4`, `-5`, `0`), so that
    these wood blocks are neatly to left, and slightly below, the wall blocks platform.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**platformWoodBlocks**精灵实例从**项目 | 精灵**文件夹拖动到场景中。将此GameObject定位在（`-4`，`-5`，`0`），这样这些木块就整齐地位于墙块平台的左侧，并略微低于它。
- en: 'Add a Box Collider 2D component to GameObject **platformWoodBlocks** so that
    the player''s character can stand on this platform too. Choose menu: **Add Component**
    | **Physics 2D** | **Box Collider 2D**.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Box Collider 2D组件添加到GameObject **platformWoodBlocks**，以便玩家的角色也能站在这个平台上。选择菜单：**添加组件**
    | **物理2D** | **Box Collider 2D**。
- en: Create a new folder named `Animations`, in which to store the animation clip
    and controller we'll create next.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Animations` 的新文件夹，用于存储我们接下来要创建的动画片段和控制器。
- en: Ensuring GameObject **platformWoodBlocks** is still selected in the **Hierarchy**,
    open an **Animation** panel, and ensure it is in **Dope Sheet** view (this is
    the default).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**层次结构**中仍然选中GameObject **platformWoodBlocks**，打开**动画**面板，并确保它处于**Dope Sheet**视图（这是默认视图）。
- en: Click the empty dropdown menu in the **Animation** panel (next to the greyed
    out word 'Samples'), and choose menu item **[Create New Clip]**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**动画**面板中的空下拉菜单（位于灰色文字'样本'旁边），并选择菜单项**[创建新剪辑**]。
- en: Save the new clip in your **Animations** folder, naming it '**platform-wood-moving-up-down**'.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新剪辑保存在您的**Animations**文件夹中，命名为 '**platform-wood-moving-up-down**'。
- en: Click button **Add Curve**, and chose **Transform** and the click the '**+**'
    plus-sign by **Position**. We are now recording changes to the (X, Y, Z) position
    of GameObject **platformWoodBlocks** in this animation clip.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮 **添加曲线**，选择 **变换** 并点击 **位置** 旁边的 '**+**' 加号。我们现在正在记录这个动画剪辑中 GameObject
    **platformWoodBlocks** 的 (X, Y, Z) 位置的变化。
- en: You should now see 2 'keyframes' at 0.0 and at 1.0\. These are indicated by
    diamonds in the **Timeline** area in the right-hand-section of the **Animation**
    panel.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该能看到在 0.0 和 1.0 处的 2 个 '关键帧'。这些在 **时间轴** 区域的右侧 **动画** 面板的钻石中指示。
- en: We need 3 keyframes, with the new one at **2:00** seconds. Click at **2:00**
    in the Timeline along the top of the **Animation** panel, so that the red line
    for the current playhead time is at time 2:00\. Then click diamond+ button to
    create a new keyframe at the current playhead time:![How to do it...](img/1362OT_03_08.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要 3 个关键帧，新关键帧在 **2:00** 秒。在 **动画** 面板的顶部沿时间轴点击 **2:00**，以便当前播放头时间的红色线位于时间
    2:00。然后点击钻石加号按钮在当前播放头时间创建一个新的关键帧：![如何操作...](img/1362OT_03_08.jpg)
- en: The first and third keyframes are fine – they record the current height of the
    wood platform at Y= `-5`. We need to make the middle keyframe record the height
    of the platform at the top of its motion, and Unity in-betweening will do all
    the rest of the animation work for us. Select the middle keyframe (at time 1:00),
    by clicking on either diamond at time 1:00 (they should both turn blue, and the
    red playhead vertical line should move to 1:00, to indicate the middle keyframe
    is being edited).
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一和第三个关键帧是好的 – 它们记录了木平台在 Y= `-5` 处的当前高度。我们需要让中间的关键帧记录平台在运动顶部的位置，Unity 会在中间进行插值，为我们完成剩余的动画工作。通过点击时间
    1:00 处的任意一个钻石（它们应该都变成蓝色，红色播放头垂直线应该移动到 1:00，以指示中间关键帧正在被编辑）来选择中间的关键帧（在时间 1:00）。
- en: Now in the **Inspector** change the Y position of the platform to 0\. You should
    see that all three X, Y, Z values have a red background in the **Inspector** –
    this is to inform you that the values of the **Transform** component are being
    recorded in the animation clip.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 **检查器** 中将平台的 Y 位置更改为 0。你应该会看到所有三个 X, Y, Z 值在 **检查器** 中都有红色背景 – 这是为了通知你
    **变换** 组件的值正在被记录在动画剪辑中。
- en: Save and run your scene. The wooden platform should now be animating continuously,
    moving smoothly up and down the positions we setup.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行你的场景。现在木平台应该正在连续动画，平滑地上下移动到我们设置的位置。
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have added an animation to GameObject **platformWoodBlocks**. This animation
    contains three keyframes. A keyframe represents the values of properties of the
    object at a point in time. The first keyframe stores a Y-value of -4, the second
    keyframe a Y-value of 0, and the final keyframe -4 again. Unity calculates all
    the in-between values for us, and the result is a smooth animation of the Y-position
    of the platform.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为 GameObject **platformWoodBlocks** 添加了一个动画。这个动画包含三个关键帧。关键帧表示对象在某个时间点的属性值。第一个关键帧存储了
    Y 值为 -4，第二个关键帧 Y 值为 0，最后一个关键帧再次为 -4。Unity 为我们计算所有中间值，结果是平台 Y 位置的平滑动画。
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: If we wanted to duplicate the moving platform, first we''d need to create
    a new, empty GameObject named movingBlockParent, and then parent platformWoodBlocks
    to this GameObject. Duplicating GameObject movingBlockParent would then allow
    us to create more moving blocks in our scene. If we simply duplicated platformWoodBlocks
    directly, then when the scene runs each duplicate would be animated back to the
    location of the original animation frames (that is, all copies would be positioned
    and moving in the original location).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果我们想要复制移动平台，首先我们需要创建一个新的、空的 GameObject，命名为 movingBlockParent，然后将 platformWoodBlocks
    作为子对象添加到这个 GameObject 上。复制 GameObject movingBlockParent 将允许我们在场景中创建更多移动的方块。如果我们直接复制
    platformWoodBlocks，那么当场景运行时，每个副本都会被动画回原始动画帧的位置（也就是说，所有副本都会定位并移动到原始位置）。
- en: Making a platform start falling once stepped-on using a Trigger to move animation
    from one state to another
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用触发器将平台开始下落，一旦被踩到，通过移动动画从一个状态转换到另一个状态
- en: In many cases we don't wish an animation to begin until some condition has been
    met, or some event occurred. In these cases a good way to organize the Animator
    Controller is to have two animation states (clips) and a Trigger on the Transition
    between the clips. We use code to detect when we wish the animation to start playing,
    and at that time we send the Trigger message to the Animation Controller, causing
    the transition to start.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们希望动画在满足某些条件或发生某些事件后才开始播放。在这些情况下，组织Animator Controller的一个好方法是在剪辑之间有一个触发器，并有两个动画状态（剪辑）。我们使用代码来检测何时希望动画开始播放，并在那时向动画控制器发送触发器消息，从而开始过渡。
- en: 'In this recipe we''ll create a water platform block in our 2D platform game;
    such blocks will begin to slowly fall down the screen as soon as they have been
    stepped on, and so the player must keep on moving otherwise they''ll fall down
    the screen with the blocks too! It looks as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将在我们的2D平台游戏中创建一个水平台方块；一旦被踩到，这样的方块就会开始慢慢从屏幕上掉落，因此玩家必须不断移动，否则他们也会和方块一起掉落屏幕！如下截图所示：
- en: '![Making a platform start falling once stepped-on using a Trigger to move animation
    from one state to another](img/1362OT_03_01.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![使用触发器将动画从一个状态移动到另一个状态，使平台一旦被踩就下落一次](img/1362OT_03_01.jpg)'
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the previous one, so make a copy of that project, and
    work on the copy for this recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱基于之前的菜谱，所以复制那个项目，并在这个菜谱上工作。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To construct an animation that only plays once a Trigger has been received,
    follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个只有在接收到触发器后才会播放的动画，请按照以下步骤操作：
- en: In the **Hierarchy** create an **Empty** GameObject named **water-block-container**,
    positioned at (`2.5`, `-4, 0`). This empty GameObject will allow us to make duplicates
    of animated Water Blocks that will animate relative to their parent GameObject
    position.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中创建一个名为**water-block-container**的**空**GameObject，位置在(`2.5`, `-4, 0`)。这个空GameObject将允许我们制作动画水方块的多份副本，这些副本将相对于其父GameObject的位置进行动画。
- en: Drag an instance of the sprite **Water Block** from the **Project** | **Sprites**
    folder into the scene and child it to GameObject **water-block-container**. Ensure
    the position of your new child GameObject **Water Block** is (`0`, `0`, `0`),
    so that it appears neatly to right of the wall blocks platform, as shown in the
    following screenshot:![How to do it...](img/1362OT_03_09.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Water Block**精灵实例从**项目** | **精灵**文件夹拖动到场景中，并将其子对象设置为**water-block-container**。确保您的新子GameObject
    **Water Block**的位置是(`0`, `0`, `0`)，这样它就会整洁地出现在墙块平台右侧，如下截图所示：![如何操作...](img/1362OT_03_09.jpg)
- en: Add a **Box Collider 2D** component to child GameObject **Water Block**, and
    set the layer of this GameObject to **Ground**, so that the player's character
    can stand and jump on this water block platform.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向子GameObject **Water Block**添加一个**Box Collider 2D**组件，并将此GameObject的层设置为**地面**，这样玩家的角色就可以站在这个水块平台上跳跃。
- en: Ensuring child GameObject **Water Block** is selected in the **Hierarchy**,
    open an **Animation** panel, then create a new clip named **platform-water-up**.
    saving it in your `Animations` folder.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**层次结构**中选择了子GameObject **Water Block**，打开**动画**面板，然后创建一个名为**platform-water-up**的新剪辑。将其保存在您的`Animations`文件夹中。
- en: Click button **Add Curve**, and chose **Transform** and **Position**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加曲线**按钮，选择**变换**和**位置**。
- en: Delete the second keyframe at time **1:00**. You have now completed the creation
    of the water block up animation clip.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除时间**1:00**的第二关键帧。您现在已经完成了水块上动画剪辑的创建。
- en: Create a second Animation clip, named **platform-water-down**. Again, click
    button **Add Curve**, and chose **Transform** and **Position**, and delete the
    second keyframe at time **1:00**.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个动画剪辑，命名为**platform-water-down**。再次点击**添加曲线**按钮，选择**变换**和**位置**，并删除时间**1:00**的第二关键帧。
- en: With the first keyframe at time **0:00** selected, set the Y-value of the GameObjects
    Transform Position to `-5`. You have now completed the creation of the water block
    down animation clip, so you can click the red record button to stop recording.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择时间**0:00**的第一个关键帧，将GameObject的变换位置Y值设置为`-5`。您现在已经完成了水块下动画剪辑的创建，因此可以点击红色录音按钮停止录制。
- en: You may have noticed that as well as the up/down **Animation Clips** that you
    created, another file was created in your `Animations` folder, an **Animator Controller**
    named **Water Block**. Select this file and open the **Animator** panel, to see
    and edit the State Machine diagram:![How to do it...](img/1362OT_03_10.jpg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能已经注意到，除了你创建的上下**动画剪辑**之外，在你的`动画`文件夹中还有一个名为**Water Block**的**动画师控制器**文件。选择此文件并打开**动画师**面板，以查看和编辑状态机图：![如何操作...](img/1362OT_03_10.jpg)
- en: Currently, although we created 2 animation clips (states), only the **Up** state
    is ever active. This is because when the scene begins (Entry) the object will
    immediately go in state **platform-water-up**, but since there are no transition
    arrows from this state to **platform-water-down**, then at present the **Water
    Block** GameObject will always be in its **Up** state.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，尽管我们创建了2个动画剪辑（状态），但只有**Up**状态始终处于活动状态。这是因为当场景开始（进入）时，对象将立即进入状态**platform-water-up**，但由于没有从该状态到**platform-water-down**的过渡箭头，因此目前**Water
    Block**游戏对象将始终处于其**Up**状态。
- en: Ensure state **platform-water-up** is selected (it will have a blue border around
    it), and create a Transition (arrow) to state **platform-water-down**, by choosing
    **Make Transition** from the **mouse-right-click** menu.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择状态**platform-water-up**（它周围将有一个蓝色边框），然后通过从**鼠标右键点击**菜单中选择**创建过渡**来创建一个过渡（箭头）到状态**platform-water-down**。
- en: If you run the scene now, the default **Transition** settings are that after
    0.9 seconds the **Water Blocks** will transition into their **Down** state. We
    don't want this – we only want them to animate downwards after the player has
    walked onto them. So create a **Trigger** named **Fall**, by choosing the **Parameters**
    tab in the **Animator** panel, clicking the plus '**+**' button and selecting
    **Trigger**, and then selecting **Fall**.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行场景，默认的**过渡**设置是在0.9秒后**水块**将过渡到其**Down**状态。我们不想这样——我们只想在玩家走上它们之后让它们向下动画。因此，通过在**动画师**面板中选择**参数**选项卡，点击加号
    '**+**' 按钮，选择**触发器**，然后选择**Fall**来创建一个名为**Fall**的**触发器**。
- en: 'Do the following to create our Trigger:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下步骤创建我们的触发器：
- en: In the **Animator** panel select the **Transition**
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**动画师**面板中选择**过渡**
- en: In the **Inspector** panel uncheck the **Has Exit Time** option
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中取消选中**具有退出时间**选项
- en: In the **Inspector** panel drag the Transition end time to **2:00** seconds
    (so the Water Block slowly Transitions to its Down state over a period of 2 seconds)
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中将过渡结束时间拖动到**2:00**秒（这样水块将在2秒内缓慢过渡到其Down状态）
- en: In the **Inspector** panel click the plus '**+**' button to add a **Condition**,
    which should automatically suggest the only possible condition parameter, which
    is our **Trigger Fall**.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中点击加号 '**+**' 按钮添加一个**条件**，它应该自动建议唯一可能的条件参数，即我们的**Trigger Fall**。
- en: '![How to do it...](img/1362OT_03_12.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1362OT_03_12.jpg)'
- en: We now need to add a collider trigger just above the Water Block, and add C#
    script behavior to send the **Animator Controller Trigger** when the player enters
    the collider. Ensuring child GameObject **Water Block** is selected, add a (second)
    **2D Box Collider**, with a Y-Offset of **1**, and tick its **Is Trigger** checkbox:![How
    to do it...](img/1362OT_03_13.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要在Water Block上方添加一个碰撞触发器，并添加C#脚本行为以在玩家进入碰撞器时发送**动画师控制器触发器**。确保选择子GameObject
    **Water Block**，添加一个（第二个）**2D Box Collider**，Y偏移为**1**，并勾选其**是触发器**复选框：![如何操作...](img/1362OT_03_13.jpg)
- en: 'Add an instance of C# script class `WaterBlock` as a component to your **Water
    Block** child GameObject:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将C#脚本类`WaterBlock`的一个实例作为组件添加到你的**Water Block**子GameObject：
- en: '[PRE1]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Make 6 more copies of GameObject **water-block-container**, with X positions
    increasing by 1 each time, that is, `3.5`, `4.5`, `5.5`, and so on.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GameObject **water-block-container**复制6次，每次X位置增加1，即`3.5`，`4.5`，`5.5`，依此类推。
- en: Run the scene, and as the player's character runs across each water block they
    will start falling down, so he had better keep running!
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行场景，当玩家的角色跑过每个水块时，它们将开始下落，所以他最好继续跑！
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You created a two-state **Animator Controller** state machine. Each state was
    an **Animation Clip**. You created a **Transition** from the **Water Block** Up
    state to its Down state that will take place when the Animator Controller received
    a Fall Trigger message. You created a **Box Collider 2D** with a **Trigger**,
    so that scripted component WaterBlock could be detected when the player (tagged
    **Player**) enters its collider, and at that point send the **Fall** Trigger message
    to make the **Water Block** GameObject start gently Transitioning into its Down
    state further down the screen.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建了一个两状态的 **动画控制器** 状态机。每个状态都是一个 **动画片段**。您从 **水块** 上状态创建了一个 **转换** 到其下状态，当动画控制器接收到
    Fall 触发消息时将发生转换。您创建了一个带有 **触发器** 的 **Box Collider 2D**，以便当玩家（标记为 **Player**）进入其碰撞器时，可以检测到脚本组件
    WaterBlock，并在此时发送 **Fall** 触发消息，使 **水块** GameObject 开始逐渐过渡到屏幕下方的下状态。
- en: Learn more about the Animator Controllers on the Unity Manual web pages at [http://docs.unity3d.com/Manual/class-AnimatorController.html](http://docs.unity3d.com/Manual/class-AnimatorController.html).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 手册网页上了解更多关于动画控制器的内容，请访问 [http://docs.unity3d.com/Manual/class-AnimatorController.html](http://docs.unity3d.com/Manual/class-AnimatorController.html)。
- en: Creating animation clips from sprite sheet sequences
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从精灵表序列创建动画片段
- en: 'The traditional method of animation involved hand-drawing many images, each
    slightly different, which displayed quickly frame-by-frame to give the appearance
    of movement. For computer game animation, the term Sprite Sheet is given to the
    image file that contains one or more sequences of sprite frames. Unity provides
    tools to breakup individual sprite images in large sprite sheet files, so that
    individual frames, or sub-sequences of frames can be used to create Animation
    Clips that can become States in Animator Controller State Machines. In this recipe,
    we''ll import and break up an open source monster sprite sheet into three animation
    clips for Idle, Attack, and Death that looks as shown:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的动画方法涉及手工绘制许多图像，每个图像略有不同，它们快速逐帧显示，以产生运动的外观。对于计算机游戏动画，将包含一个或多个精灵帧序列的图像文件称为精灵表。Unity
    提供了工具，可以将大型精灵表文件中的单个精灵图像拆分，以便可以使用单个帧或帧的子序列来创建动画片段，这些动画片段可以成为动画控制器状态机中的状态。在本食谱中，我们将导入并拆分一个开源怪物精灵表，将其导入为三个动画片段，用于空闲、攻击和死亡，如图所示：
- en: '![Creating animation clips from sprite sheet sequences](img/1362OT_03_17.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![从精灵表序列创建动画片段](img/1362OT_03_17.jpg)'
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For all the recipes in this chapter, we have prepared the sprite images you
    need in folder `1362_03_05`. Many thanks to Rosswet Mobile for making these sprites
    available as Open Source at: [http://www.rosswet.com/wp/?p=156](http://www.rosswet.com/wp/?p=156).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的所有食谱，我们已在文件夹 `1362_03_05` 中准备了所需的精灵图像。感谢 Rosswet Mobile 使这些精灵作为开源资源可用：[http://www.rosswet.com/wp/?p=156](http://www.rosswet.com/wp/?p=156)。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create an animation from a sprite sheet of frame-by-frame animation images,
    follow these steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要从帧动画的精灵表中创建动画，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Unity 2D 项目。
- en: Import the provided image `monster1`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的图像 `monster1`。
- en: With image `monster1` selected in the **Project** panel, change its **Sprite**
    mode to **Multiple** in the **Inspector**, then open the **Sprite Editor** panel
    by clicking button **Sprite Editor**.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 面板中选择图像 `monster1`，然后在 **检查器** 中将其 **精灵** 模式更改为 **多个**，然后通过点击按钮 **精灵编辑器**
    打开 **精灵编辑器** 面板。
- en: In the **Sprite Editor** open the **Slice** dropdown dialog, set the **Type**
    to **Grid**, set the grid **Pixel Size** to **64x64**, and then click the **Slice**
    button. Finally, click the **Apply** button in the bar at the top right of the
    **Sprite Editor** panel):![How to do it...](img/1362OT_03_18.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **精灵编辑器** 中打开 **切片** 下拉对话框，将 **类型** 设置为 **网格**，将网格 **像素大小** 设置为 **64x64**，然后点击
    **切片** 按钮。最后，点击 **精灵编辑器** 面板右上角的栏中的 **应用** 按钮）：![如何操作...](img/1362OT_03_18.jpg)
- en: In the **Project** panel you can now click the expand triangle button center-right
    on the sprite, and you'll see all the different child frames for this sprite.![How
    to do it...](img/1362OT_03_19.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 面板中，您现在可以点击精灵中心右边的展开三角形按钮，您将看到该精灵的所有不同子帧。![如何操作...](img/1362OT_03_19.jpg)
- en: Create a folder named `Animations`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Animations` 的文件夹。
- en: In your new folder, create an **Animator Controller** named **monster-animator**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的新的文件夹中，创建一个名为 **monster-animator** 的 **动画控制器**。
- en: In the scene create a new **Empty** GameObject named **monster1** (at position
    `0`, `0`, `0`), and drag your **monster-animator** into this GameObject.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中创建一个新的**空**GameObject，命名为**monster1**（位置为`0`，`0`，`0`），并将你的**monster-animator**拖动到这个GameObject中。
- en: With GameObject **monster1** selected in the **Hierarchy**, open up the **Animation**
    panel, and create a new **Animation Clip** named **Idle**.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择GameObject **monster1**，打开**动画**面板，并创建一个名为**Idle**的新**动画剪辑**。
- en: Select image `monster1` in the **Project** panel (in its expanded view), and
    select and drag the first 5 frames (frames 0-4) into the **Animation** panel.
    Change the sample rate to 12 (since this animation was created to run at 12-frames
    per second).![How to do it...](img/1362OT_03_20.jpg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中选择图像`monster1`（在其展开视图中），选择并拖动前5帧（帧0-4）到**动画**面板。将采样率更改为12（因为此动画是为每秒12帧而创建的）。![如何操作...](img/1362OT_03_20.jpg)
- en: If you look at the State Chart for **monster-animator**, you'll see it has a
    default state (clip) named monster-idle.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看**monster-animator**的状态图，你会看到它有一个默认状态（剪辑）名为monster-idle。
- en: When you run your scene you should now see the **monster1** GameObject animating
    in its monster-idle state. You may wish to make the Main Camera size a bit smaller,
    since these are quite small sprites.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行场景时，你现在应该看到**monster1**GameObject正在其monster-idle状态下动画化。你可能希望将主相机的尺寸稍微缩小一点，因为这些精灵相当小。
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Unity's Sprite Editor knows about sprite sheets, and once the correct grid size
    has been entered it treats the items in each grid square inside the sprite sheet
    image as an individual image, or frame, of the animation. You selected sub-sequences
    of sprite animation frames and added them into several **Animation Clips**. You
    had added an **Animation Controller** to your GameObject, and so each **Animation
    Clip** appears as a state in the **Animation Controller State Machine**.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的精灵编辑器了解精灵图集，一旦输入了正确的网格大小，它就会将精灵图集图像中每个网格方格内的项目视为动画的单独图像或帧。你选择了精灵动画帧的子序列，并将它们添加到几个**动画剪辑**中。你已经在你的GameObject中添加了一个**动画控制器**，因此每个**动画剪辑**都作为**动画控制器状态机**中的一个状态出现。
- en: You can now repeat the process, creating an **Animation Clip** monster-attack
    with frames 8-12, and a third clip monster-death with frames 15-21\. You would
    then create Triggers and **Transitions** to make the monster GameObject transition
    into the appropriate **states** as the game is played.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以重复这个过程，创建一个名为monster-attack的**动画剪辑**，包含帧8-12，以及一个名为monster-death的第三个剪辑，包含帧15-21。然后，创建触发器和**过渡**，使怪物GameObject在游戏进行时过渡到适当的**状态**。
- en: Learn more about the Unity Sprite Editor from the Unity video tutorials at [https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor](https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unity视频教程中了解更多关于Unity精灵编辑器的信息，请访问[https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor](https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor)。
- en: Conclusion
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, we have introduced recipes demonstrating the animation system
    for 2D game elements. The bean-man 2D character is from the Unity 2D Platformer,
    which you can download yourself from the Unity asset store. That project is a
    good place to see lots more examples of 2D game and animation techniques ([www.assetstore.unity3d.com/en/#!/content/11228](http://www.assetstore.unity3d.com/en/#!/content/11228)).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了展示2D游戏元素动画系统的食谱。bean-man 2D角色来自Unity 2D平台游戏，你可以从Unity资源商店自行下载。该项目是查看更多2D游戏和动画技术示例的好地方（[www.assetstore.unity3d.com/en/#!/content/11228](http://www.assetstore.unity3d.com/en/#!/content/11228)）。
- en: '![Conclusion](img/1362OT_03_03.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![结论](img/1362OT_03_03.jpg)'
- en: 'Here are some links for useful resources and sources of information to explore
    these topics further:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些链接，提供了有用的资源和信息来源，以进一步探索这些主题：
- en: 'Unity 2D Platformer (where the BeanMan character came from):'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 2D平台游戏（BeanMan角色来源）：
- en: '[https://www.assetstore.unity3d.com/en/#!/content/11228](https://www.assetstore.unity3d.com/en/#!/content/11228)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.assetstore.unity3d.com/en/#!/content/11228](https://www.assetstore.unity3d.com/en/#!/content/11228)'
- en: 'The platform sprites are from Daniel Cook''s Planet Cute game resources:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台精灵来自Daniel Cook的Planet Cute游戏资源：
- en: '[http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html](http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html](http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html)'
- en: 'Creating a basic 2D platformer game:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基本的2D平台游戏：
- en: '[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game)'
- en: 'Hat Catch 2D game tutorial:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hat Catch 2D游戏教程：
- en: '[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1)'
- en: 'Unity games from a 2D perspective video:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从2D视角看Unity游戏视频：
- en: '[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d)'
- en: 'A fantastic set of modular 2D characters with a free Creative Commons license
    from ''Kenny''. These assets would be perfect for animating body parts in a similar
    way to the bean-man example in this chapter and in the Unity 2D platformer demo:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自“Kenny”的免费Creative Commons许可的出色2D模块化角色集。这些资源非常适合以类似本章中豆人示例和Unity 2D平台游戏演示中的方式动画化身体部位：
- en: '[http://kenney.nl/assets/modular-characters](http://kenney.nl/assets/modular-characters)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://kenney.nl/assets/modular-characters](http://kenney.nl/assets/modular-characters)'
