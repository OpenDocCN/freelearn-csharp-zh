- en: Chapter 6. Lights and Effects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 灯光与效果
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖：
- en: Using lights and cookie textures to simulate a cloudy day
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用灯光和cookie纹理模拟多云天气
- en: Adding a custom Reflection map to a scene
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向场景添加自定义反射贴图
- en: Creating a laser aim with Projector and Line Renderer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用投影仪和线条渲染器创建激光瞄准
- en: Reflecting surrounding objects with Reflection Probes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用反射探针反射周围对象
- en: Setting up an environment with Procedural Skybox and Directional Light
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用程序化天空盒和方向光设置环境
- en: Lighting a simple scene with Lightmaps and Light Probes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用光照贴图和光照探针照亮简单场景
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Whether you're willing to make a better-looking game, or add interesting features,
    lights and effects can boost your project and help you deliver a higher quality
    product. In this chapter, we will look at the creative ways of using lights and
    effects, and also take a look at some of Unity's new features, such as **Procedural
    Skyboxes**, **Reflection Probes**, **Light Probes**, and custom **Reflection Sources**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是愿意制作一个更美观的游戏，还是添加有趣的功能，灯光和效果都可以提升你的项目，帮助你交付更高品质的产品。在本章中，我们将探讨使用灯光和效果的创新方法，同时也会看看Unity的一些新特性，例如**程序化天空盒**、**反射探针**、**光照探针**和自定义的**反射源**。
- en: Lighting is certainly an area that has received a lot of attention from Unity,
    which now features real-time **Global Illumination** technology provided by **Enlighten**.
    This new technology provides better and more realistic results for both real-time
    and baked lighting. For more information on Unity's Global Illumination system,
    check out its documentation at [http://docs.unity3d.com/Manual/GIIntro.html](http://docs.unity3d.com/Manual/GIIntro.html).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 灯光无疑是Unity关注的一个领域，现在它提供了由**Enlighten**提供的实时**全局光照**技术。这项新技术为实时和烘焙光照提供了更好、更逼真的结果。有关Unity全局光照系统的更多信息，请查看其文档[http://docs.unity3d.com/Manual/GIIntro.html](http://docs.unity3d.com/Manual/GIIntro.html)。
- en: The big picture
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整体概念
- en: There are many ways of creating light sources in Unity. Here's a quick overview
    of the most common methods.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中创建光源有许多方法。以下是对最常见方法的快速概述。
- en: Lights
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 灯光
- en: 'Lights are placed into the scene as game objects, featuring a **Light** component.
    They can function in **Realtime**, **Baked**, or **Mixed** modes. Among the other
    properties, they can have their **Range**, **Color**, **Intensity**, and **Shadow
    Type** set by the user. There are four types of lights:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 灯光作为游戏对象放置到场景中，具有一个**灯光**组件。它们可以在**实时**、**烘焙**或**混合**模式下工作。在其他属性中，用户可以设置它们的**范围**、**颜色**、**强度**和**阴影类型**。有四种类型的灯光：
- en: '**Directional Light**: This is normally used to simulate the sunlight'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向光**: 这通常用于模拟阳光'
- en: '**Spot Light**: This works like a cone-shaped spot light'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚光灯**: 这就像一个锥形聚光灯'
- en: '**Point Light**: This is a bulb lamp-like, omnidirectional light'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点光源**: 这是一种类似灯泡的全向光'
- en: '**Area Light**: This baked-only light type is emitted in all directions from
    a rectangle-shaped entity, allowing for a smooth, realistic shading'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域光**: 这种仅烘焙的光源类型从矩形实体向所有方向发射，允许平滑、逼真的着色'
- en: For an overview of the light types, check Unity's documentation at [http://docs.unity3d.com/Manual/Lighting.html](http://docs.unity3d.com/Manual/Lighting.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解灯光类型概述，请查看Unity的文档[http://docs.unity3d.com/Manual/Lighting.html](http://docs.unity3d.com/Manual/Lighting.html)。
- en: '![Lights](img/1362_06_50.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![灯光](img/1362_06_50.jpg)'
- en: Different types of lights
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的灯光
- en: Environment Lighting
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境光照
- en: Unity's **Environment Lighting** is often achieved through the combination of
    a **Skybox** material and sunlight defined by the scene's **Directional Light**.
    Such a combination creates an ambient light that is integrated into the scene's
    environment, and which can be set as **Realtime** or **Baked into Lightmaps**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的**环境光照**通常是通过结合**天空盒**材质和由场景的**方向光**定义的阳光来实现的。这种组合创建了一种环境光，它被整合到场景环境中，并且可以设置为**实时**或**烘焙到光照贴图中**。
- en: '![Environment Lighting](img/1362_06_51.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![环境光照](img/1362_06_51.jpg)'
- en: Emissive materials
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发光材质
- en: 'When applied to static objects, materials featuring the **Emission** colors
    or maps will cast light over surfaces nearby, in both real-time and baked modes,
    as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于静态对象时，具有**发射**颜色或贴图的材质将在实时和烘焙模式下向附近的表面投射光线，如图下所示：
- en: '![Emissive materials](img/1362_06_52.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![发光材质](img/1362_06_52.jpg)'
- en: Projector
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 投影仪
- en: As its name suggests, a **Projector** can be used to simulate projected lights
    and shadows, basically by projecting a material and its texture map onto the other
    objects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，**投影仪**可以用来模拟投影的光线和阴影，基本上是通过将材质及其纹理映射投影到其他对象上。
- en: '![Projector](img/1362_06_53.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![投影仪](img/1362_06_53.jpg)'
- en: Lightmaps and Light Probes
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 光照贴图和光照探针
- en: '**Lightmaps** are basically texture maps generated from the scene''s lighting
    information and applied to the scene''s static objects in order to avoid the use
    of processing-intensive real-time lighting.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**光照贴图**基本上是从场景的照明信息生成的纹理映射，并将其应用于场景的静态对象，以避免使用处理密集型的实时照明。'
- en: '**Light Probes** are a way of sampling the scene''s illumination at specific
    points in order to have it applied onto dynamic objects without the use of real-time
    lighting.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**光照探针**是一种在场景的特定点采样照明的方法，以便在没有使用实时照明的情况下将其应用于动态对象。'
- en: The Lighting window
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 照明窗口
- en: The **Lighting** window, which can be found through navigating to the **Window**
    | **Lighting** menu, is the hub for setting and adjusting the scene's illumination
    features, such as Lightmaps, Global Illumination, Fog, and much more. It's strongly
    recommended that you take a look at Unity's documentation on the subject, which
    can be found at [http://docs.unity3d.com/Manual/GlobalIllumination.html](http://docs.unity3d.com/Manual/GlobalIllumination.html).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导航到**窗口** | **照明**菜单找到的**照明**窗口，是设置和调整场景照明功能（如光照贴图、全局照明、雾等）的中心。强烈建议你查看Unity关于此主题的文档，该文档可以在[http://docs.unity3d.com/Manual/GlobalIllumination.html](http://docs.unity3d.com/Manual/GlobalIllumination.html)找到。
- en: '![The Lighting window](img/1362_06_54.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![照明窗口](img/1362_06_54.jpg)'
- en: Using lights and cookie textures to simulate a cloudy day
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用灯光和饼干纹理模拟多云的一天
- en: As it can be seen in many first-person shooters and survival horror games, lights
    and shadows can add a great deal of realism to a scene, helping immensely to create
    the right atmosphere for the game. In this recipe, we will create a cloudy outdoor
    environment using cookie textures. Cookie textures work as masks for lights. It
    functions by adjusting the intensity of the light projection to the cookie texture's
    alpha channel. This allows for a silhouette effect (just think of the bat-signal)
    or, as in this particular case, subtle variations that give a filtered quality
    to the lighting.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在许多第一人称射击游戏和生存恐怖游戏中可以看到的那样，光线和阴影可以为场景增添大量的真实感，极大地帮助创造适合游戏的氛围。在这个配方中，我们将使用饼干纹理来创建多云的户外环境。饼干纹理充当光线的遮罩。它通过调整光线投影的强度到饼干纹理的alpha通道来实现。这允许产生轮廓效果（只需想想蝙蝠信号），或者在这个特定案例中，产生细微的变化，使光线具有过滤效果。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have access to an image editor, or prefer to skip the texture map
    elaboration in order to focus on the implementation, please use the image file
    called `cloudCookie.tga`, which is provided inside the `1362_06_01` folder.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有访问图像编辑器的权限，或者希望跳过纹理映射的详细说明，以便专注于实现，请使用名为`cloudCookie.tga`的图像文件，该文件位于`1362_06_01`文件夹内。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To simulate a cloudy outdoor environment, follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟多云的户外环境，请按照以下步骤操作：
- en: In your image editor, create a new 512 x 512 pixel image.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的图像编辑器中，创建一个新的512 x 512像素的图像。
- en: Using black as the foreground color and white as the background color, apply
    the Clouds filter (in Photoshop, this is done by navigating to the **Filter**
    | **Render** | **Clouds** menu).![How to do it...](img/1362_06_01.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用黑色作为前景色和白色作为背景色，应用云彩滤镜（在Photoshop中，这是通过导航到**滤镜** | **渲染** | **云彩**菜单来完成的）。![如何操作...](img/1362_06_01.jpg)
- en: Note
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Learning about the Alpha channel is useful, but you could get the same result
    without it. Skip steps 3 to 7, save your image as `cloudCookie.png` and, when
    changing texture type in step 9, leave Alpha from Greyscale checked.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 了解alpha通道很有用，但即使没有它，你也可以得到相同的结果。跳过步骤3到7，将你的图像保存为`cloudCookie.png`，并在步骤9更改纹理类型时，保留从灰度到Alpha的勾选。
- en: Select your entire image and copy it.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择整个图像并复制它。
- en: Open the **Channels** window (in Photoshop, this can be done by navigating to
    the **Window** | **Channels** menu).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**通道**窗口（在Photoshop中，可以通过导航到**窗口** | **通道**菜单来完成）。
- en: 'There should be three channels: **Red**, **Green**, and **Blue**. Create a
    new channel. This will be the **Alpha** channel.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该有三个通道：**红色**、**绿色**和**蓝色**。创建一个新的通道。这将是一个**alpha**通道。
- en: In the **Channels** window, select the **Alpha 1** channel and paste your image
    into it.![How to do it...](img/1362_06_02.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**通道**窗口中，选择**Alpha 1**通道，并将您的图像粘贴到其中。![如何操作...](img/1362_06_02.jpg)
- en: Save your image file as `cloudCookie.PSD` or `TGA`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像文件保存为 `cloudCookie.PSD` 或 `TGA`。
- en: Import your image file to Unity and select it in the **Project** view.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像文件导入 Unity 并在**项目**视图中选择它。
- en: From the **Inspector** view, change its **Texture Type** to **Cookie** and its
    **Light Type** to **Directional**. Then, click on **Apply**, as shown:![How to
    do it...](img/1362_06_03.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**视图中，将其**纹理类型**更改为**Cookie**，并将其**光照类型**更改为**方向**。然后，点击**应用**，如图所示：![如何操作...](img/1362_06_03.jpg)
- en: We will need a surface to actually see the lighting effect. You can either add
    a plane to your scene (via navigating to the **GameObject** | **3D Object** |
    **Plane** menu), or create a **Terrain** (menu option **GameObject** | **3D Object**
    | **Terrain**) and edit it, if you so you wish.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个表面来真正看到光照效果。您可以通过导航到**GameObject** | **3D Object** | **Plane**菜单向场景中添加一个平面，或者创建一个**地形**（菜单选项**GameObject**
    | **3D Object** | **Terrain**），如果您愿意的话可以编辑它。
- en: Let's add a light to our scene. Since we want to simulate sunlight, the best
    option is to create a **Directional Light**. You can do this through the drop-down
    menu named **Create** | **Light** | **Directional Light** in the **Hierarchy**
    view.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在场景中添加一个光源。由于我们想要模拟阳光，最佳选项是创建一个**方向光**。您可以通过**层次**视图中的**创建** | **Light**
    | **Directional Light**下拉菜单来完成此操作。
- en: 'Using the **Transform** component of the **Inspector** view, reset the light''s
    **Position** to **X**: `0`, **Y**: `0`, **Z**: `0` and its **Rotation** to **X**:
    `90`; **Y**: `0`; **Z**: `0`.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**检查器**视图中的**变换**组件，将光线的**位置**重置为**X**：`0`，**Y**：`0`，**Z**：`0`，并将其**旋转**重置为**X**：`90`；**Y**：`0`；**Z**：`0`。
- en: In the **Cookie** field, select the **cloudCookie** texture that you imported
    earlier. Change the **Cookie Size** field to `80`, or a value that you feel is
    more appropriate for the scene's dimension. Please leave **Shadow Type** as **No
    Shadows**.![How to do it...](img/1362_06_04.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Cookie**字段中，选择您之前导入的**cloudCookie**纹理。将**Cookie 大小**字段更改为`80`，或您认为更适合场景尺寸的值。请将**阴影类型**保留为**无阴影**。![如何操作...](img/1362_06_04.jpg)
- en: Now, we need a script to translate our light and, consequently, the **Cookie**
    projection. Using the **Create** drop-down menu in the **Project** view, create
    a new C# Script named `MovingShadows.cs`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个脚本来转换我们的光，从而相应地转换**Cookie**投影。在**项目**视图中的**创建**下拉菜单中，创建一个新的 C# 脚本，命名为
    `MovingShadows.cs`。
- en: 'Open your script and replace everything with the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的脚本，将所有内容替换为以下代码：
- en: '[PRE0]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save your script and apply it to the **Directional Light**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本并将其应用到**方向光**上。
- en: Select the **Directional Light**. In the **Inspector** view, change the parameters
    **Wind Speed X** and **Wind Speed Z** to `20` (you can change these values as
    you wish, as shown).![How to do it...](img/1362_06_05.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**方向光**。在**检查器**视图中，将**风速 X**和**风速 Z**参数更改为`20`（您可以更改这些值，如图所示）。![如何操作...](img/1362_06_05.jpg)
- en: Play your scene. The shadows will be moving.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放您的场景。阴影将会移动。
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With our script, we are telling the **Directional Light** to move across the
    *X* and *Z* axis, causing the **Light Cookie** texture to be displaced as well.
    Also, we reset the light object to its original position whenever it traveled
    a distance that was either equal to or greater than the **Light Cookie Size**.
    The light position must be reset to prevent it from traveling too far, causing
    problems in real-time render and lighting. The **Light Cookie Size** parameter
    is used to ensure a smooth transition.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的脚本，我们正在告诉**方向光**在 *X* 和 *Z* 轴上移动，导致**光 Cookie**纹理也发生位移。此外，每当它移动的距离等于或大于**光
    Cookie 大小**时，我们都会将光对象重置到其原始位置。必须重置光位置以防止它移动得太远，从而在实时渲染和光照中引起问题。**光 Cookie 大小**参数用于确保平滑过渡。
- en: The reason we are not enabling shadows is because the light angle for the *X*
    axis must be 90 degrees (or there will be a noticeable gap when the light resets
    to the original position). If you want dynamic shadows in your scene, please add
    a second **Directional Light**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有启用阴影的原因是因为 *X* 轴的光线角度必须是 90 度（否则当光线重置到原始位置时会出现明显的间隙）。如果您想在场景中实现动态阴影，请添加第二个**方向光**。
- en: There's more...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In this recipe, we have applied a cookie texture to a **Directional** **Light**.
    But what if we were using the **Spot** or **Point Lights**?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们已经将一个 cookie 纹理应用到**方向****光**上。但如果我们使用**聚光灯**或**点光源**会怎样呢？
- en: Creating Spot Light cookies
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建聚光灯 Cookie
- en: Unity documentation has an excellent tutorial on how to make the **Spot Light**
    cookies. This is great to simulate shadows coming from projectors, windows, and
    so on. You can check it out at [http://docs.unity3d.com/Manual/HOWTO-LightCookie.html](http://docs.unity3d.com/Manual/HOWTO-LightCookie.html).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 文档中有一个关于如何制作 **聚光灯** Cookie 的优秀教程。这对于模拟来自投影仪、窗户等处的阴影非常有用。你可以在 [http://docs.unity3d.com/Manual/HOWTO-LightCookie.html](http://docs.unity3d.com/Manual/HOWTO-LightCookie.html)
    查看它。
- en: Creating Point Light Cookies
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建点光源 Cookie
- en: If you want to use a cookie texture with a **Point Light**, you'll need to change
    the **Light Type** in the **Texture Importer** section of the **Inspector**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用与点光源配合的 Cookie 纹理，你需要在 **检查器** 的 **纹理导入器** 部分更改 **灯光类型**。
- en: Adding a custom Reflection map to a scene
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向场景添加自定义反射贴图
- en: Whereas Unity **Legacy Shaders** use individual **Reflection Cubemaps** per
    material, the new **Standard Shader** gets its reflection from the scene's **Reflection
    Source**, as configured in the **Scene** section of the **Lighting** window. The
    level of reflectiveness for each material is now given by its **Metallic** value
    or **Specular** value (for materials using Specular setup). This new method can
    be a *real* time saver, allowing you to quickly assign the same reflection map
    to every object in the scene. Also, as you can imagine, it helps keep the overall
    look of the scene coherent and cohesive. In this recipe, we will learn how to
    take advantage of the **Reflection Source** feature.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Unity **旧式着色器** 为每个材质使用单独的 **反射立方体贴图**，但新的 **标准着色器** 从场景的 **反射源** 获取反射，这已在
    **灯光** 窗口的 **场景** 部分配置。每个材质的反射程度现在由其 **金属** 值或 **光泽** 值（对于使用光泽设置的材质）给出。这种方法可以节省大量时间，允许你快速将相同的反射贴图分配给场景中的每个对象。此外，正如你可以想象的那样，它有助于保持场景的整体外观协调一致。在这个配方中，我们将学习如何利用
    **反射源** 功能。
- en: Getting ready
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will prepare a **Reflection Cubemap**, which is basically
    the environment to be projected as a reflection onto the material. It can be made
    from either six or, as shown in this recipe, a single image file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将准备一个 **反射立方体贴图**，这基本上是要投影到材质上的环境。它可以由六个或，如本配方所示，单个图像文件制作而成。
- en: To help us with this recipe, it's been provided a Unity package, containing
    a prefab made of a 3D object and a basic Material (using a TIFF as Diffuse map),
    and also a JPG file to be used as the reflection map. All these files are inside
    the `1362_06_02` folder.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们完成这个配方，提供了一个 Unity 包，其中包含一个由 3D 对象和基本材质（使用 TIFF 作为漫反射贴图）组成的预制件，以及一个用于反射贴图的
    JPG 文件。所有这些文件都位于 `1362_06_02` 文件夹中。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add Reflectiveness and Specularity to a material, follow these steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要向材质添加反射性和光泽度，请按照以下步骤操作：
- en: Import `batteryPrefab.unitypackage` to a new project. Then, select `battery_prefab`
    object from the **Assets** folder, in the **Project** view.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `batteryPrefab.unitypackage` 导入到一个新项目中。然后，在 **项目** 视图中从 **资产** 文件夹中选择 `battery_prefab`
    对象。
- en: From the **Inspector** view, expand the **Material** component and observe the
    asset preview window. Thanks to the **Specular** map, the material already features
    a reflective look. However, it looks as if it is reflecting the scene's default
    **Skybox**, as shown:![How to do it...](img/1362_06_06.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **检查器** 视图中展开 **材质** 组件，观察资产预览窗口。多亏了 **高光** 贴图，材质已经具有了反射的外观。然而，它看起来像是在反射场景的默认
    **天空盒**，如下所示：![如何操作...](img/1362_06_06.jpg)
- en: Import the `CustomReflection.jpg` image file. From the **Inspector** view, change
    its **Texture Type** to **Cubemap**, its **Mapping** to **Latitude - Longitude
    Layout (Cylindrical)**, and check the boxes for **Glossy Reflection** and **Fixup
    Edge Seams**. Finally, change its **Filter Mode** to **Trilinear** and click on
    the **Apply** button, shown as follows:![How to do it...](img/1362_06_07.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `CustomReflection.jpg` 图像文件。从 **检查器** 视图中，将其 **纹理类型** 更改为 **立方体贴图**，其 **映射**
    更改为 **纬度-经度布局（圆柱形）**，并勾选 **光泽反射** 和 **修复边缘缝隙** 复选框。最后，将其 **过滤模式** 更改为 **三线性**
    并点击 **应用** 按钮，如下所示：![如何操作...](img/1362_06_07.jpg)
- en: Let's replace the Scene's Skybox with our newly created **Cubemap**, as the
    **Reflection** **map** for our scene. In order to do this, open the **Lighting**
    window by navigating to the **Window** | **Lighting** menu. Select the **Scene**
    section and use the drop-down menu to change the **Reflection Source** to **Custom.**
    Finally, assign the newly created `CustomReflection` texture as the **Cubemap**,
    shown as follows:![How to do it...](img/1362_06_08.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将场景的天空盒替换为我们新创建的**立方体贴图**，作为场景的**反射**贴图。为了做到这一点，通过导航到**窗口** | **照明**菜单打开**照明**窗口。选择**场景**部分，并使用下拉菜单将**反射源**更改为**自定义**。最后，将新创建的`CustomReflection`纹理分配为**立方体贴图**，如下所示：![如何操作...](img/1362_06_08.jpg)
- en: Check out for the new reflections on the `battery_prefab` object.![How to do
    it...](img/1362_06_09.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`battery_prefab`对象上的新反射。[如何操作...](img/1362_06_09.jpg)
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: While it is the material's specular map that allows for a reflective look, including
    the intensity and smoothness of the reflection, the refection itself (that is,
    the image you see on the reflection) is given by the **Cubemap** that we have
    created from the image file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然是材质的镜面反射贴图允许反射外观，包括反射的强度和光滑度，但反射本身（即你在反射中看到的图像）是由我们从图像文件创建的**立方体贴图**提供的。
- en: There's more...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Reflection Cubemaps can be achieved in many ways and have different mapping
    properties.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 反射立方体贴图可以通过多种方式实现，并且具有不同的映射属性。
- en: Mapping coordinates
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射坐标
- en: The **Cylindrical** mapping that we applied was well-suited for the photograph
    that we used. However, depending on how the reflection image is generated, a **Cubic**
    or **Spheremap**-based mapping can be more appropriate. Also, note that the **Fixup
    Edge Seams** option will try to make the image seamless.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的**圆柱形**贴图非常适合我们使用的照片。然而，根据反射图像的生成方式，基于**立方体**或**球体贴图**的贴图可能更合适。此外，请注意，**修复边缘接缝**选项将尝试使图像无缝。
- en: Sharp reflections
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 锐利反射
- en: You might have noticed that the reflection is somewhat blurry compared to the
    original image; this is because we have ticked the **Glossy Reflections** box.
    To get a sharper-looking reflection, deselect this option; in which case, you
    can also leave the **Filter Mode** option as default (Bilinear).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，与原始图像相比，反射有些模糊；这是因为我们勾选了**光泽反射**框。为了得到更清晰的反射效果，取消选中此选项；在这种情况下，你还可以将**滤波模式**选项保留为默认（双线性）。
- en: Maximum size
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最大尺寸
- en: At 512 x 512 pixels, our reflection map will probably run fine on the lower-end
    machines. However, if the quality of the reflection map is not so important in
    your game's context, and the original image dimensions are big (say, 4096 x 4096),
    you might want to change the texture's **Max Size** at the **Import Settings**
    to a lower number.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在512 x 512像素的情况下，我们的反射贴图在低端机器上可能运行良好。然而，如果你的游戏中反射贴图的质量不是那么重要，并且原始图像的尺寸很大（比如，4096
    x 4096），你可能想在**导入设置**中将纹理的**最大尺寸**更改为一个较小的数字。
- en: Creating a laser aim with Projector and Line Renderer
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用投影仪和线渲染器创建激光瞄准
- en: Although using GUI elements, such as a cross-hair, is a valid way to allow players
    to aim, replacing (or combining) it with a projected laser dot might be a more
    interesting approach. In this recipe, we will use the **Projector** and **Line**
    components to implement this concept.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用GUI元素，如准星，是允许玩家瞄准的有效方法，但用投影激光点替换（或结合）它可能是一个更有趣的方法。在这个菜谱中，我们将使用**投影仪**和**线**组件来实现这个概念。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To help us with this recipe, it's been provided with a Unity package containing
    a sample scene featuring a character holding a laser pointer, and also a texture
    map named `LineTexture`. All files are inside the `1362_06_03` folder. Also, we'll
    make use of the **Effects** assets package provided by Unity (which you should
    have installed when installing Unity).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们完成这个菜谱，提供了一个包含一个带有激光指针的角色和名为`LineTexture`的纹理图的Unity包。所有文件都在`1362_06_03`文件夹中。此外，我们还将使用Unity提供的**效果**资产包（你应该在安装Unity时安装过）。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a laser dot aim with a Projector, follow these steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用投影仪创建激光点瞄准，请按照以下步骤操作：
- en: Import `BasicScene.unitypackage` to a new project. Then, open the scene named
    **BasicScene**. This is a basic scene, featuring a player character whose aim
    is controlled via mouse.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BasicScene.unitypackage`导入到新项目中。然后，打开名为**BasicScene**的场景。这是一个基本场景，其中包含一个玩家角色，其瞄准是通过鼠标控制的。
- en: Import the **Effects** package by navigating to the **Assets** | **Import Package**
    | **Effects** menu. If you want to import only the necessary files within the
    package, deselect everything in the **Importing** **package** window by clicking
    on the **None** button, and then check the **Projectors** folder only. Then, click
    on **Import**, as shown:![How to do it...](img/1362_06_10.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**Assets** | **Import Package** | **Effects**菜单导入**Effects**包。如果您只想导入包内的必要文件，请通过点击**None**按钮取消**Importing**
    **package**窗口中的所有选择，然后仅选择**Projectors**文件夹。然后，点击**Import**，如图所示：![如何操作...](img/1362_06_10.jpg)
- en: From the **Inspector** view, locate the `ProjectorLight` shader (inside the
    **Assets** | **Standard Assets** | **Effects** | **Projectors** | **Shaders**
    folder). Duplicate the file and name the new copy as `ProjectorLaser`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Inspector**视图，找到`ProjectorLight`着色器（位于**Assets** | **Standard Assets** |
    **Effects** | **Projectors** | **Shaders**文件夹中）。复制文件并将新副本命名为`ProjectorLaser`。
- en: Open `ProjectorLaser`. From the first line of the code, change `Shader "Projector/Light"`
    to `Shader "Projector/Laser"`. Then, locate the line of code – `Blend DstColor
    One` and change it to `Blend One One`. Save and close the file.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ProjectorLaser`。从代码的第一行开始，将`Shader "Projector/Light"`更改为`Shader "Projector/Laser"`。然后，找到代码行`Blend
    DstColor One`并将其更改为`Blend One One`。保存并关闭文件。
- en: Note
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The reason for editing the shader for the laser was to make it stronger by changing
    its blend type to **Additive**. Shader programming is a complex subject, which
    is beyond the scope of this book. However, if you want to learn more about it,
    check out Unity's documentation on the subject, which is available at [http://docs.unity3d.com/Manual/SL-Reference.html](http://docs.unity3d.com/Manual/SL-Reference.html),
    and also the book called *Unity Shaders and Effects Cookbook*, published by Packt.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编辑激光着色器的目的是通过将其混合类型更改为**Additive**来增强其效果。着色器编程是一个复杂的话题，超出了本书的范围。然而，如果您想了解更多，请查看Unity关于该主题的文档，可在[http://docs.unity3d.com/Manual/SL-Reference.html](http://docs.unity3d.com/Manual/SL-Reference.html)找到，以及由Packt出版的名为*Unity
    Shaders and Effects Cookbook*的书籍。
- en: Now that we have fixed the shader, we need a material. From the **Project**
    view, use the **Create** drop-down menu to create a new **Material**. Name it
    `LaserMaterial`. Then, select it from the **Project** view and, from the **Inspector**
    view, change its **Shader** to **Projector/Laser**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经固定了着色器，我们需要一个材质。从**Project**视图，使用**Create**下拉菜单创建一个新的**Material**。将其命名为`LaserMaterial`。然后，从**Project**视图选择它，并从**Inspector**视图，将其**Shader**更改为**Projector/Laser**。
- en: From the **Project** view, locate the **Falloff** texture. Open it in your image
    editor and, except for the first and last columns column of pixels that should
    be black, paint everything white. Save the file and go back to Unity.![How to
    do it...](img/1362_06_55.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Project**视图，找到**Falloff**纹理。在您的图像编辑器中打开它，除了应该为黑色的第一列和最后一列像素外，将其他所有内容涂成白色。保存文件并返回Unity。![如何操作...](img/1362_06_55.jpg)
- en: 'Change the **LaserMaterial**''s **Main Color** to red (RGB: `255`, `0`, `0`).
    Then, from the texture slots, select the **Light** texture as **Cookie** and the
    **Falloff** texture as **Falloff**.![How to do it...](img/1362_06_11.jpg)'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将**LaserMaterial**的**Main Color**更改为红色（RGB: `255`, `0`, `0`)。然后，从纹理槽中，选择**Light**纹理作为**Cookie**和**Falloff**纹理。![如何操作...](img/1362_06_11.jpg)'
- en: From the **Hierarchy** view, find and select the **pointerPrefab** object (**MsLaser**
    | **mixamorig:Hips** | **mixamorig:Spine** | **mixamorig:Spine1** | **mixamorig:Spine2**
    | **mixamorig:RightShoulder** | **mixamorig:RightArm** | **mixamorig:RightForeArm**
    | **mixamorig:RightHand** | **pointerPrefab**). Then, from the **Create** drop-down
    menu, select **Create Empty Child**. Rename the new child of **pointerPrefab**
    as **LaserProjector**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Hierarchy**视图，找到并选择**pointerPrefab**对象（**MsLaser** | **mixamorig:Hips** |
    **mixamorig:Spine** | **mixamorig:Spine1** | **mixamorig:Spine2** | **mixamorig:RightShoulder**
    | **mixamorig:RightArm** | **mixamorig:RightForeArm** | **mixamorig:RightHand**
    | **pointerPrefab**)。然后，从**Create**下拉菜单中选择**Create Empty Child**。将**pointerPrefab**的新子项重命名为**LaserProjector**。
- en: Select the **LaserProjector** object. Then, from the **Inspector** view, click
    the **Add Component** button and navigate to **Effects** | **Projector**. Then,
    from the **Projector** component, set the **Orthographic** option as true and
    set **Orthographic Size** as `0.1`. Finally, select **LaserMaterial** from the
    **Material** slot.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**LaserProjector**对象。然后，从**Inspector**视图，点击**Add Component**按钮并导航到**Effects**
    | **Projector**。然后，从**Projector**组件，将**Orthographic**选项设置为true并将**Orthographic
    Size**设置为`0.1`。最后，从**Material**槽中选择**LaserMaterial**。
- en: Test the scene. You will be able to see the laser aim dot, as shown:![How to
    do it...](img/1362_06_12.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试场景。您将能够看到激光瞄准点，如图所示：![如何操作...](img/1362_06_12.jpg)
- en: Now, let's create a material for the **Line Renderer** component that we are
    about to add. From the **Project** view, use the **Create** drop-down menu to
    add a new **Material**. Name it as **Line_Mat**.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为即将添加的**线渲染器**组件创建一个材质。从**项目**视图，使用**创建**下拉菜单添加一个新的**材质**。将其命名为**Line_Mat**。
- en: 'From the **Inspector** view, change the shader of the **Line_Mat** to **Particles/Additive**.
    Then, set its **Tint Color** to red (RGB: `255`;`0`;`0`).'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**检查器**视图，将**Line_Mat**的着色器更改为**粒子/添加**。然后，将其**着色**颜色设置为红色（RGB：`255`；`0`；`0`）。
- en: Import the `LineTexture` image file. Then, set it as the **Particle Texture**
    for the **Line_Mat**, as shown:![How to do it...](img/1362_06_13.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`LineTexture`图像文件。然后，将其设置为**Line_Mat**的**粒子纹理**，如图所示：![如何操作...](img/1362_06_13.jpg)
- en: Use the **Create** drop-down menu from **Project** view to add a C# script named
    `LaserAim`. Then, open it in your editor.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图的**创建**下拉菜单添加一个名为`LaserAim`的C#脚本。然后，在您的编辑器中打开它。
- en: 'Replace everything with the following code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码替换为所有内容：
- en: '[PRE1]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save your script and attach it to the **LaserProjector** game object.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并将其附加到**激光投影仪**游戏对象。
- en: Select the **LaserProjector** GameObject. From the **Inspector** view, find
    the **Laser Aim** component and fill the **Line Material** slot with the `Line_Mat`
    material, as shown:![How to do it...](img/1362_06_14.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**激光投影仪**游戏对象。从**检查器**视图，找到**激光瞄准**组件，并将**线材质**槽填满`Line_Mat`材质，如图所示：![如何操作...](img/1362_06_14.jpg)
- en: Play the scene. The laser aim is ready, and looks as shown:![How to do it...](img/1362_06_15.jpg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。激光瞄准已准备就绪，看起来如图所示：![如何操作...](img/1362_06_15.jpg)
- en: Note
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this recipe, the width of the laser beam and its aim dot have been exaggerated.
    Should you need a more realistic thickness for your beam, change the **Line Width**
    field of the **Laser Aim** component to `0.05`, and the **Orthographic Size**
    of the **Projector** component to `0.025`. Also, remember to make the beam more
    opaque by setting the **Regular Color** of the **Laser Aim** component brighter.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个菜谱中，激光束的宽度和其瞄准点已被夸张。如果您需要更真实的厚度，请将**激光瞄准**组件的**线宽**字段更改为`0.05`，并将**投影仪**组件的**正交大小**更改为`0.025`。此外，请记住通过将**激光瞄准**组件的**常规颜色**设置得更亮来使光束更不透明。
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The laser aim effect was achieved by combining two different effects: a **Projector**
    and **Line Renderer**.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 激光瞄准效果是通过结合两种不同的效果实现的：**投影仪**和**线渲染器**。
- en: A **Projector**, which can be used to simulate light, shadows, and more, is
    a component that projects a material (and its texture) onto other game objects.
    By attaching a projector to the **Laser Pointer** object, we have ensured that
    it will face the right direction at all times. To get the right, vibrant look,
    we have edited the projector material's **Shader**, making it brighter. Also,
    we have scripted a way to prevent projections from going through objects, by setting
    its **Far Clip Plane** on approximately the same level of the first object that
    is receiving the projection. The line of code that is responsible for this action
    is—`proj.farClipPlane = hit.distance + margin;`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**投影仪**，可以用来模拟光、阴影等，是一个将材质（及其纹理）投影到其他游戏对象的组件。通过将投影仪附加到**激光指针**对象，我们确保它始终面向正确的方向。为了获得正确的、生动的效果，我们编辑了投影仪材质的**着色器**，使其更亮。此外，我们编写了一个脚本，通过将其**远裁剪平面**设置在接收投影的第一个对象的大致相同水平，来防止投影穿过对象。负责此操作的代码行是—`proj.farClipPlane
    = hit.distance + margin;`。'
- en: Regarding the **Line Renderer**, we have opted to create it dynamically, via
    code, instead of manually adding the component to the game object. The code is
    also responsible for setting up its appearance, updating the line vertices position,
    and changing its color whenever the fire button is pressed, giving it a glowing/pulsing
    look.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**线渲染器**，我们选择通过代码动态创建它，而不是手动将组件添加到游戏对象。代码还负责设置其外观，更新线顶点位置，并在按下射击按钮时更改其颜色，使其具有发光/脉冲的外观。
- en: For more details on how the script works, don't forget to check out the commented
    code, available within the `1362_06_03` | `End` folder.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解脚本的工作原理的更多细节，别忘了查看`1362_06_03` | `End`文件夹中可用的注释代码。
- en: Reflecting surrounding objects with Reflection Probes
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反射探针反射周围对象
- en: If you want your scene's environment to be reflected by game objects, featuring
    reflective materials (such as the ones with high Metallic or Specular levels),
    then you can achieve such effect using **Reflection Probes**. They allow for real-time,
    baked, or even custom reflections through the use of Cubemaps.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让你的场景环境通过具有反射材料（如具有高金属或高光泽度级别的材料）的游戏对象反射，那么你可以使用 **Reflection Probes** 来实现这种效果。它们允许通过使用立方体贴图实现实时、烘焙或自定义反射。
- en: 'Real-time reflections can be expensive in terms of processing; in which case,
    you should favor baked reflections, unless it''s really necessary to display dynamic
    objects being reflected (mirror-like objects, for instance). Still, there are
    some ways real-time reflections can be optimized. In this recipe, we will test
    three different configurations for reflection probes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 实时反射在处理方面可能会很昂贵；在这种情况下，你应该优先考虑烘焙反射，除非确实有必要显示动态反射对象（例如镜子一样的对象）。尽管如此，还有一些方法可以优化实时反射。在这个配方中，我们将测试三种不同的反射探针配置：
- en: Real-time reflections (constantly updated)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时反射（持续更新）
- en: Real-time reflections (updated on-demand) via script
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时反射（按需更新）通过脚本
- en: Baked reflections (from the Editor)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 烘焙反射（来自编辑器）
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we have prepared a basic scene, featuring three sets of reflective
    objects: one is constantly moving, one is static, and one moves whenever it is
    interacted with. The `Probes.unitypackage` package that is containing the scene
    can be found inside the `1362_06_04` folder.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们准备了一个基本场景，包含三组反射对象：一组是持续移动的，一组是静态的，还有一组在交互时移动。包含场景的 `Probes.unitypackage`
    包位于 `1362_06_04` 文件夹中。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To reflect the surrounding objects using the Reflection probes, follow these
    steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用反射探针反射周围的对象，请按照以下步骤操作：
- en: Import `Probes.unitypackage` to a new project. Then, open the scene named **Probes**.
    This is a basic scene featuring three sets of reflective objects.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Probes.unitypackage` 导入到一个新项目中。然后，打开名为 **Probes** 的场景。这是一个包含三组反射对象的基本场景。
- en: Play the scene. Observe that one of the systems is dynamic, one is static, and
    one rotates randomly, whenever a key is pressed.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。观察到一个系统是动态的，一个是静态的，还有一个在按下键时随机旋转。
- en: Stop the scene.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止场景。
- en: 'First, let''s create a constantly updated real-time reflection probe. From
    the **Create** drop-down button of the **Hierarchy** view, add a **Reflection
    Probe** to the scene (**Create** | **Light** | **Reflection Probe**). Name it
    as `RealtimeProbe` and make it a child of the **System 1 Realtime** | **MainSphere**
    game object. Then, from the **Inspector** view, the **Transform** component, change
    its **Position** to **X**: `0`; **Y**: `0`; **Z**: `0`, as shown:![How to do it...](img/1362_06_16.jpg)'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '首先，让我们创建一个持续更新的实时反射探针。从 **Hierarchy** 视图的 **Create** 下拉按钮中，向场景中添加一个 **Reflection
    Probe**（**Create** | **Light** | **Reflection Probe**）。将其命名为 `RealtimeProbe` 并使其成为
    **System 1 Realtime** | **MainSphere** 游戏对象的子对象。然后，从 **Inspector** 视图中，更改 **Transform**
    组件的 **Position** 为 **X**: `0`; **Y**: `0`; **Z**: `0`，如图所示：![如何操作...](img/1362_06_16.jpg)'
- en: Now, go to the **Reflection Probe** component. Set **Type** as **Realtime**;
    **Refresh Mode** as **Every Frame** and **Time Slicing** as **No time slicing**,
    shown as follows:![How to do it...](img/1362_06_17.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 **Reflection Probe** 组件。将 **Type** 设置为 **Realtime**；**Refresh Mode** 设置为
    **Every Frame** 和 **Time Slicing** 设置为 **No time slicing**，如图所示：![如何操作...](img/1362_06_17.jpg)
- en: Play the scene. The reflections will be now be updated in real time. Stop the
    scene.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。现在，反射将实时更新。停止场景。
- en: 'Observe that the only object displaying the real-time reflections is **System
    1 Realtime** | **MainSphere**. The reason for this is the **Size** of the Reflection
    Probe. From the **Reflection Probe** component, change its **Size** to **X**:
    `25`; **Y**: `10`; **Z**: `25`. Note that the small red spheres are now affected
    as well. However, it is important to notice that all objects display the same
    reflection. Since our reflection probe''s origin is placed at the same location
    as the **MainSphere**, all reflective objects will display reflections from that
    point of view.![How to do it...](img/1362_06_18.jpg)'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '注意，唯一显示实时反射的对象是 **System 1 Realtime** | **MainSphere**。这是因为反射探针的 **Size**。从
    **Reflection Probe** 组件中，将 **Size** 更改为 **X**: `25`; **Y**: `10`; **Z**: `25`。请注意，现在小红色球体也会受到影响。然而，重要的是要注意所有对象都显示相同的反射。由于我们的反射探针的起点与
    **MainSphere** 的位置相同，所有反射对象都将从这个角度显示反射。![如何操作...](img/1362_06_18.jpg)'
- en: If you want to eliminate the reflection from the reflective objects within the
    reflection probe, such as the small red spheres, select the objects and, from
    the **Mesh Renderer** component, set **Reflection Probes** as **Off**, as shown
    in the following screenshot:![How to do it...](img/1362_06_19.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想从反射探针内的反射对象中消除反射，例如小红色球体，请选择这些对象，并从**网格渲染器**组件中，将**反射探针**设置为**关闭**，如图所示：![如何操作...](img/1362_06_19.jpg)
- en: 'Add a new **Reflection Probe** to the scene. This time, name it `OnDemandProbe`
    and make it a child of the **System 2 On Demand** | **MainSphere** game object.
    Then, from the **Inspector** view, **Transform** component, change its **Position**
    to **X**: `0`; **Y**: `0`; **Z**: `0`.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向场景中添加一个新的**反射探针**。这次，将其命名为`OnDemandProbe`，并使其成为**系统2按需**|**主球体**游戏对象的子对象。然后，从**检查器**视图，**变换**组件，将**位置**设置为**X**：`0`；**Y**：`0`；**Z**：`0`。
- en: Now, go to the **Reflection Probe** component. Set **Type** as **Realtime**,
    **Refresh Mode** as **Via scripting**, and **Time Slicing** as **Individual faces**,
    as shown in the following screenshot:![How to do it...](img/1362_06_20.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往**反射探针**组件。将**类型**设置为**实时**，**刷新模式**设置为**通过脚本**，并将**时间切片**设置为**单个面**，如图所示：![如何操作...](img/1362_06_20.jpg)
- en: Using the **Create** drop-down menu in the **Project** view, create a new C#
    Script named `UpdateProbe`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**视图中的**创建**下拉菜单中，创建一个名为`UpdateProbe`的新C#脚本。
- en: 'Open your script and replace everything with the following code:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的脚本，并将所有内容替换为以下代码：
- en: '[PRE2]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save your script and attach it to the **OnDemandProbe**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本并将其附加到**按需探针**。
- en: Now, find the script named `RandomRotation`, which is attached to the **System
    2 On Demand** | **Spheres** object, and open it in the code editor.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，找到名为`RandomRotation`的脚本，它附加到**系统2按需**|**球体**对象上，并在代码编辑器中打开它。
- en: 'Right before the `Update()` function, add the following lines:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Update()`函数之前，添加以下行：
- en: '[PRE3]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, locate the line of code called `transform.eulerAngles = newRotation;`
    and, immediately after it, add the following line:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，找到名为`transform.eulerAngles = newRotation;`的代码行，并在其后立即添加以下行：
- en: '[PRE4]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the script and test your scene. Observe how the **Reflection Probe** is
    updated whenever a key is pressed.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并测试您的场景。观察每当按下键时，**反射探针**是如何更新的。
- en: 'Stop the scene. Add a third **Reflection Probe** to the scene. Name it as `CustomProbe`
    and make it a child of the **System 3 On Custom** | **MainSphere** game object.
    Then, from the **Inspector** view, the **Transform** component, change its **Position**
    to **X**: `0`; **Y**: `0`; **Z**: `0`.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止场景。向场景中添加第三个**反射探针**。将其命名为`CustomProbe`，并使其成为**系统3自定义**|**主球体**游戏对象的子对象。然后，从**检查器**视图，**变换**组件，将**位置**设置为**X**：`0`；**Y**：`0`；**Z**：`0`。
- en: Go to the **Reflection Probe** component. Set **Type** as **Custom** and click
    on the **Bake** button, as shown:![How to do it...](img/1362_06_21.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**反射探针**组件。将**类型**设置为**自定义**，并单击**烘焙**按钮，如图所示：![如何操作...](img/1362_06_21.jpg)
- en: A **Save File** dialog window will show up. Save the file as `CustomProbe-reflectionHDR.exr`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个**保存文件**对话框。将文件保存为`CustomProbe-reflectionHDR.exr`。
- en: 'Observe that the reflection map does not include the reflection of red spheres
    on it. To change this, you have two options: set the **System 3 On Custom** |
    **Spheres** GameObject (and all its children) as **Reflection Probe Static** or,
    from the **Reflection Probe** component of the **CustomProbe** GameObject, check
    the **Dynamic Objects** option, as shown, and bake the map again (by clicking
    on the **Bake** button).![How to do it...](img/1362_06_22.jpg)'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察到反射贴图不包括红色球体的反射。要更改此，您有两个选项：将**系统3自定义**|**球体**游戏对象（及其所有子对象）设置为**反射探针静态**，或者从**CustomProbe**游戏对象的**反射探针**组件中，勾选**动态对象**选项，如图所示，并再次烘焙贴图（通过单击**烘焙**按钮）。![如何操作...](img/1362_06_22.jpg)
- en: If you want your reflection **Cubemap** to be dynamically baked while you edit
    your scene, you can set the **Reflection Probe Type** to **Baked**, open the **Lighting**
    window (the **Assets** | **Lighting** menu), access the **Scene** section, and
    check the **Continuous Baking** option as shown. Please note that this mode won't
    include dynamic objects in the reflection, so be sure to set **System 3 Custom**
    | **Spheres** and **System 3 Custom** | **MainSphere** as **Reflection Probe Static**.![How
    to do it...](img/1362_06_23.jpg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你希望在编辑场景时动态烘焙你的反射**立方体贴图**，你可以将**反射探针类型**设置为**烘焙**，打开**光照**窗口（**资产** | **光照**菜单），访问**场景**部分，并检查如图所示的**连续烘焙**选项。请注意，此模式不会包括动态对象在反射中，所以请确保将**系统3自定义**
    | **球体**和**系统3自定义** | **主球体**设置为**反射探针静态**。![如何操作...](img/1362_06_23.jpg)
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The **Reflection Probes** element act like omnidirectional cameras that render
    **Cubemaps** and apply them onto the objects within their constraints. When creating
    **Reflection Probes**, it''s important to be aware of how the different types
    work:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**反射探针**元素像全向相机一样工作，渲染**立方体贴图**并将它们应用到其约束内的对象上。在创建**反射探针**时，重要的是要了解不同类型的工作方式：'
- en: '**Real-time Reflection Probes**: Cubemaps are updated at runtime. The real-time
    Reflection Probes have three different **Refresh Modes**: **On Awake** (Cubemap
    is baked once, right before the scene starts); **Every frame** (Cubemap is constantly
    updated); **Via scripting** (Cubemap is updated whenever the **RenderProbe** function
    is used).'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时反射探针**：立方体贴图在运行时更新。实时反射探针有三种不同的**刷新模式**：**在唤醒时**（立方体贴图在场景开始前烘焙一次）；**每帧**（立方体贴图不断更新）；**通过脚本**（每次使用**RenderProbe**函数时更新立方体贴图）。'
- en: 'Since Cubemaps feature six sides, the **Reflection Probes** features **Time
    Slicing**, so each side can be updated independently. There are three different
    types of Time Slicing: **All Faces at Once** (renders all faces at once and calculates
    mipmaps over 6 frames. Updates the probe in 9 frames); **Individual Faces** (each
    face is rendered over a number of frames. It updates the probe in 14 frames. The
    results can be a bit inaccurate, but it is the least expensive solution in terms
    of frame-rate impact); **No Time Slicing** (The **Probe** is rendered and mipmaps
    are calculated in one frame. It provides high accuracy, but it also the most expensive
    in terms of frame-rate).'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于立方体贴图有六个面，**反射探针**具有**时间切片**功能，因此每个面可以独立更新。有时间切片的三种不同类型：**一次性更新所有面**（一次性渲染所有面，并在6帧内计算米普贴图。在9帧内更新探针）；**单独更新每个面**（每个面在多帧内渲染。在14帧内更新探针。结果可能有点不准确，但就帧率影响而言是最经济的解决方案）；**无时间切片**（**探针**在一帧内渲染，米普贴图在一帧内计算。它提供高精度，但也是帧率中最昂贵的）。
- en: '**Baked:** Cubemaps are baked during editing the screen. Cubemaps can be either
    manually or automatically updated, depending whether the **Continuous Baking**
    option is checked (it can be found at the **Scene** section of the **Lighting**
    window).'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**烘焙**：立方体贴图在编辑屏幕时进行烘焙。立方体贴图可以是手动或自动更新，这取决于是否选中了**连续烘焙**选项（它可以在**光照**窗口的**场景**部分找到）。'
- en: '**Custom:** The Custom Reflection Probes can be either manually baked from
    the scene (and even include Dynamic objects), or created from a premade Cubemap.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：自定义反射探针可以是手动从场景中烘焙（甚至包括动态对象），或者从预制的立方体贴图中创建。'
- en: There's more...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a number of additional settings that can be tweaked, such as **Importance**,
    **Intensity**, **Box Projection**, **Resolution, HDR**, and so on. For a complete
    view on each of these settings, we strongly recommend that you read Unity's documentation
    on the subject, which is available at [http://docs.unity3d.com/Manual/class-ReflectionProbe.html](http://docs.unity3d.com/Manual/class-ReflectionProbe.html).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他设置可以调整，例如**重要性**、**强度**、**盒投影**、**分辨率**、**HDR**等等。为了全面了解这些设置，我们强烈建议您阅读Unity关于此主题的文档，该文档可在[http://docs.unity3d.com/Manual/class-ReflectionProbe.html](http://docs.unity3d.com/Manual/class-ReflectionProbe.html)找到。
- en: Setting up an environment with Procedural Skybox and Directional Light
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置具有程序化天空盒和方向光的场景
- en: 'Besides the traditional 6 Sided and Cubemap, Unity now features a third type
    of skybox: the **Procedural Skybox**. Easy to create and setup, the **Procedural
    Skybox** can be used in conjunction with a **Directional Light** to provide **Environment
    Lighting** to your scene. In this recipe, we will learn about different parameters
    of the **Procedural Skybox**.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的六面体和立方体贴图，Unity 现在还提供第三种天空盒类型：**程序化天空盒**。它易于创建和设置，**程序化天空盒**可以与**方向光**结合使用，为你的场景提供**环境光照**。在本教程中，我们将学习**程序化天空盒**的不同参数。
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need to import Unity's Standard Assets Effects package,
    which you should have installed when installing Unity.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，你需要导入 Unity 的标准资产效果包，当你安装 Unity 时应该已经安装了。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To set up an **Environment Lighting** using the **Procedural Skybox** and **Directional
    Light**, follow these steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**程序化天空盒**和**方向光**设置**环境光照**，请按照以下步骤操作：
- en: 'Create a new scene inside a Unity project. Observe that a new scene already
    includes two objects: the **Main Camera** and a **Directional Light**.'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 项目中创建一个新的场景。观察到一个新的场景已经包括两个对象：**主摄像机**和一个**方向光**。
- en: 'Add some cubes to your scene, including one at **Position X**: `0`; **Y**:
    `0`; **Z**: `0` scaled to **X**: `20`; **Y**: `1`; **Z**: `20`, which is to be
    used as the ground, as shown:![How to do it...](img/1362_06_24.jpg)'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的场景中添加一些立方体，包括一个在**位置 X**：`0`；**Y**：`0`；**Z**：`0`，缩放为**X**：`20`；**Y**：`1`；**Z**：`20`，用作地面，如下所示：![如何操作...](img/1362_06_24.jpg)
- en: Using the **Create** drop-down menu from the **Project** view, create a new
    Material and name it `MySkybox`. From the **Inspector** view, use the appropriate
    drop-down menu to change the **Shader** of **MySkybox** from **Standard** to **Skybox/Procedural**.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图的**创建**下拉菜单中，创建一个新的材质，并将其命名为 `MySkybox`。从**检查器**视图，使用适当的下拉菜单将**MySkybox**的**着色器**从**标准**更改为**Skybox/程序化**。
- en: Open the **Lighting** window (menu **Window** | **Lighting**), access the **Scene**
    section. At the **Environment Lighting** subsection, populate the **Skybox** slot
    with the **MySkybox** material, and the **Sun** slot with the **Directional Light**
    from the **Scene**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**光照**窗口（菜单**窗口** | **光照**），访问**场景**部分。在**环境光照**子部分，将**天空盒**槽位填充为**MySkybox**材质，将**太阳**槽位填充为**场景**中的**方向光**。
- en: 'From the **Project** view, select **MySkybox**. Then, from the **Inspector**
    view, set **Sun size** as `0.05` and **Atmosphere Thickness** as `1.4`. Experiment
    by changing the **Sky Tint** color to RGB: `148`; `128`; `128`, and the **Ground**
    color to a value that resembles the scene cube floor''s color (such as RGB: `202`;
    `202`; `202`). If you feel the scene is too bright, try bringing the **Exposure**
    level down to `0.85`, shown as follows:![How to do it...](img/1362_06_25.jpg)'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，选择**MySkybox**。然后，从**检查器**视图，设置**太阳大小**为`0.05`和**大气厚度**为`1.4`。通过将**天空色调**颜色更改为
    RGB：`148`；`128`；`128`，并将**地面**颜色设置为类似于场景立方体地板的颜色（例如 RGB：`202`；`202`；`202`）进行实验。如果你觉得场景太亮，尝试将**曝光**级别降低到`0.85`，如下所示：![如何操作...](img/1362_06_25.jpg)
- en: 'Select the **Directional Light** and change its **Rotation** to **X**: `5`;
    **Y**: `170`; **Z**: `0`. Note that the scene should resemble a dawning environment,
    something like the following scene:![How to do it...](img/1362_06_26.jpg)'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**方向光**并更改其**旋转**为**X**：`5`；**Y**：`170`；**Z**：`0`。注意，场景应该类似于黎明环境，如下面的场景：![如何操作...](img/1362_06_26.jpg)
- en: 'Let''s make things even more interesting. Using the **Create** drop-down menu
    in the **Project** view, create a new C# Script named `RotateLight`. Open your
    script and replace everything with the following code:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使事情更有趣。在**项目**视图中的**创建**下拉菜单中，创建一个新的 C# 脚本，命名为 `RotateLight`。打开你的脚本，将所有内容替换为以下代码：
- en: '[PRE5]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save it and add it as a component to the **Directional Light**.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存它并将其作为组件添加到**方向光**。
- en: Import the **Effects** Assets package into your project (via the **Assets**
    | **Import Package** | **Effects** menu).
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**效果**资产包导入到你的项目中（通过**资产** | **导入包** | **效果**菜单）。
- en: Select the **Directional Light**. Then, from **Inspector** view, **Light** component,
    populate the **Flare** slot with the `Sun` flare.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**方向光**。然后，从**检查器**视图，**光照**组件，将**光晕**槽位填充为`Sun`光晕。
- en: From the **Scene** section of the **Lighting** window, find the **Other Settings**
    subsection. Then, set **Flare Fade Speed** as `3` and **Flare Strength** as `0.5`,
    shown as follows:![How to do it...](img/1362_06_27.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**光照**窗口的**场景**部分，找到**其他设置**子部分。然后，将**光晕淡入速度**设置为`3`，将**光晕强度**设置为`0.5`，如下所示：![如何操作...](img/1362_06_27.jpg)
- en: Play the scene. You will see the sun rising and the Skybox colors changing accordingly.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。你会看到太阳升起，并且Skybox颜色相应地改变。
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Ultimately, the appearance of Unity''s native Procedural Skyboxes depends on
    the five parameters that make them up:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Unity原生程序化Skybox的外观取决于构成它们的五个参数：
- en: '**Sun size**: The size of the bright yellow sun that is drawn onto the skybox
    is located according to the **Directional Light**''s **Rotation** on the *X* and
    *Y* axes.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**太阳大小**：绘制到Skybox上的明亮黄色太阳的大小，根据方向光的*X*和*Y*轴上的**旋转**定位。'
- en: '**Atmosphere Thickness**: This simulates how dense the atmosphere is for this
    skybox. Lower values (less than `1.0`) are good for simulating the outer space
    settings. Moderate values (around `1.0`) are suitable for the earth-based environments.
    Values that are slightly above `1.0` can be useful when simulating air pollution
    and other dramatic settings. Exaggerated values (like more than `2.0`) can help
    to illustrate extreme conditions or even alien settings.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大气厚度**：这模拟了此Skybox的大气密度。较低的值（小于`1.0`）适合模拟外太空设置。适中的值（大约`1.0`）适合基于地球的环境。略高于`1.0`的值在模拟空气污染和其他戏剧性设置时可能很有用。夸张的值（如大于`2.0`）有助于说明极端条件或甚至外星环境。'
- en: '**Sky Tint**: It is the color that is used to tint the skybox. It is useful
    for fine-tuning or creating stylized environments.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**天空着色**：这是用于着色Skybox的颜色。它对于微调或创建风格化环境非常有用。'
- en: '**Ground**: This is the color of the ground. It can really affect the **Global
    Illumination** of the scene. So, choose a value that is close to the level''s
    terrain and/or geometry (or a neutral one).'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地面**：这是地面的颜色。它确实会影响场景的**全局光照**。因此，选择一个接近关卡地形和/或几何形状（或中性）的值。'
- en: '**Exposure**: This determines the amount of light that gets in the skybox.
    The higher levels simulate overexposure, while the lower values simulate underexposure.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**曝光**：这决定了有多少光线进入Skybox。较高的级别模拟过曝，而较低的值模拟欠曝。'
- en: It is important to notice that the **Skybox** appearance will respond to the
    scene's **Directional Light**, playing the role of the **Sun**. In this case,
    rotating the light around its *X* axis can create dawn and sunset scenarios, whereas
    rotating it around its *Y* axis will change the position of the sun, changing
    the cardinal points of the scene.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，**Skybox**的外观将响应场景的**方向光**，扮演**太阳**的角色。在这种情况下，围绕其*X*轴旋转光线可以创建黎明和日落场景，而围绕其*Y*轴旋转则会改变太阳的位置，改变场景的方位点。
- en: Also, regarding the **Environment Lighting**, note that although we have used
    the **Skybox** as the **Ambient Source**, we could have chosen a **Gradient**
    or a single **Color** instead—in which case, the scene's illumination wouldn't
    be attached to the Skybox appearance.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，关于**环境光照**，请注意，尽管我们已使用**Skybox**作为**环境光源**，但我们本可以选择**渐变**或单一**颜色**——在这种情况下，场景的照明就不会与Skybox外观相关联。
- en: Finally, also regarding the **Environment Lighting**, please note that we have
    set the **Ambient GI** to **Realtime**. The reason for this was to allow the real-time
    changes in the GI, promoted by the rotating **Directional Light**. In case we
    didn't need these changes at runtime, we could have chosen the **Baked** alternative.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于**环境光照**，请注意，我们已经将**环境全局光照**设置为**实时**。这样做的原因是允许由旋转的**方向光**促进的GI实时变化。如果我们不需要在运行时进行这些变化，我们可以选择**烘焙**选项。
- en: Lighting a simple scene with Lightmaps and Light Probes
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用光照贴图和光照探针照亮简单场景
- en: Lightmaps are a great alternative to real-time lighting, as they can provide
    the desired look to an environment without being processor-intensive. There is
    one downside, though—since there is no way of baking Lightmaps onto the dynamic
    objects, the lighting of the important elements of the game (such as player characters
    themselves) can look artificial, failing to match the intensity of the surrounding
    area. The solution? **Light Probes**.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 光图是实时光照的一个很好的替代方案，因为它们可以在不占用处理器资源的情况下为环境提供所需的外观。然而，有一个缺点——由于无法将光图烘焙到动态对象上，游戏中的重要元素（如玩家角色本身）的光照可能会显得不自然，无法与周围区域的光照强度相匹配。解决方案？**光照探针**。
- en: '**Light Probes** work by sampling the light intensity over the location that
    they are placed at. Dynamic objects, once **Light Probe**-enabled, will be lit
    according to the interpolation of the nearest probes around them.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**光照探针**通过在它们放置的位置采样光照强度来工作。一旦启用**光照探针**，动态对象的光照将根据它们周围最近的探针进行插值。'
- en: '![Lighting a simple scene with Lightmaps and Light Probes](img/1362_06_48.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![使用光图和光照探针照亮简单场景](img/1362_06_48.jpg)'
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared a basic scene, including a simple game environment
    and an instance of Unity's Rollerball sample asset, which will be used as the
    player character. The geometry for the scene was created using **ProBuilder 2.0**,
    an extension developed by ProCore, and was sold at Unity's Asset Store and at
    ProCore's website ([http://www.protoolsforunity3d.com](http://www.protoolsforunity3d.com)).
    ProBuilder is a fantastic level design tool that speeds up the design process
    considerably for both simple and complex level design.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们已经准备了一个基本场景，包括一个简单的游戏环境和Unity的Rollerball示例资产的一个实例，该实例将被用作玩家角色。场景的几何形状是使用**ProBuilder
    2.0**创建的，这是一个由ProCore开发的扩展，可在Unity的Asset Store和ProCore的网站上购买（[http://www.protoolsforunity3d.com](http://www.protoolsforunity3d.com)）。ProBuilder是一个出色的关卡设计工具，可以显著加快简单和复杂关卡设计的过程。
- en: The `LightProbes.unitypackage` package, containing the scene and all necessary
    files, can be found inside the `1362_06_06` folder.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 包含场景和所有必要文件的`LightProbes.unitypackage`包可以在`1362_06_06`文件夹中找到。
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To reflect the surrounding objects using the **Reflection** **Probes**, follow
    these steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**反射****探针**反射周围的对象，请按照以下步骤操作：
- en: Import `LightProbes.unitypackage` to a new project. Then, open the scene named
    **LightProbes**. The scene features a basic environment and a playable Rollerball
    game sequence.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`LightProbes.unitypackage`导入到新项目中。然后，打开名为**LightProbes**的场景。该场景包含一个基本环境和可玩Rollerball游戏序列。
- en: First, let's set up the light from our scene. From the **Hierarchy** view, select
    the **Directional Light**. Then, from the **Inspector** view, set **Baking** as
    **Baked**. Also, at the top of the **Inspector**, to the right of the object's
    name, check the **Static** box, shown as follows:![How to do it...](img/1362_06_28.jpg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们设置场景中的光照。从**层次结构**视图中选择**方向光**。然后，从**检查器**视图，将**烘焙**设置为**烘焙**。此外，在**检查器**的顶部，在对象名称的右侧，勾选**静态**框，如下所示：![如何操作...](img/1362_06_28.jpg)
- en: Now, let's set up the **Global Illumination** for the scene. Open the **Lighting**
    window (via the menu **Window** | **Lighting**) and select the **Scene** section.
    Then, from the **Environment Lighting** subsection, set `SkyboxProbes` (available
    from the **Assets**) as **Skybox**, and the scene's **Directional Light** as **Sun**.
    Finally, change the **Ambient GI** option from **Realtime** to **Baked**, as shown
    in the following screenshot:![How to do it...](img/1362_06_29.jpg)
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们设置场景的**全局光照**。打开**光照**窗口（通过菜单**窗口** | **光照**）并选择**场景**部分。然后，从**环境光照**子部分，将`SkyboxProbes`（从**资产**中可用）设置为**天空盒**，并将场景的**方向光**设置为**太阳**。最后，将**环境GI**选项从**实时**更改为**烘焙**，如下截图所示：![如何操作...](img/1362_06_29.jpg)
- en: '**Lightmaps** can be applied onto static objects only. From the **Hierarchy**
    view, expand the **Level** game object to reveal the list of the children objects.
    Then, select every child and set them as **Static**, as shown:![How to do it...](img/1362_06_30.jpg)'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**光图**只能应用于静态对象。从**层次结构**视图展开**关卡**游戏对象以显示子对象列表。然后，选择每个子对象并将它们设置为**静态**，如下所示：![如何操作...](img/1362_06_30.jpg)'
- en: Imported 3D meshes must feature **Lightmap UV Coordinates**. From the **Project**
    view, find and select the `lamp` mesh. Then, from the **Inspector** view, within
    the **Model** section of the **Import Settings**, check the **Generate Lightmap
    UVs** option, and click on the **Apply** button to confirm changes, shown as follows:![How
    to do it...](img/1362_06_31.jpg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入的3D网格必须具有**光照贴图UV坐标**。从**项目**视图，找到并选择`lamp`网格。然后，从**检查器**视图，在**导入设置**的**模型**部分中勾选**生成光照贴图UVs**选项，并点击**应用**按钮以确认更改，如下所示：![如何操作...](img/1362_06_31.jpg)
- en: Scroll down the **Import Settings** view and expand the lamp's **Material**
    component. Then, populate the **Emission** field with the texture named `lamp_EMI`,
    available from the **Assets** folder. Finally, change **the Global Illumination**
    option to **Baked**. This will make the lamp object emit a green light that will
    be baked into the **Lightmap**.![How to do it...](img/1362_06_32.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到**导入设置**视图，展开灯的**材质**组件。然后，在**资产**文件夹中找到名为`lamp_EMI`的纹理，将其填充到**发射**字段中。最后，将**全局照明**选项更改为**烘焙**。这将使灯对象发出绿色光，并将其烘焙到**光照贴图**中。![如何操作...](img/1362_06_32.jpg)
- en: Open the **Lighting** window. By default, the **Continuous Baking** option will
    be checked. Uncheck it, as shown, so that we can bake the **Lightmaps** on demand.![How
    to do it...](img/1362_06_33.jpg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**照明**窗口。默认情况下，**连续烘焙**选项将被勾选。取消勾选它，如下所示，这样我们就可以按需烘焙**光照贴图**。![如何操作...](img/1362_06_33.jpg)
- en: Click on the **Build** button and wait for the Lightmaps to be generated.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**构建**按钮，等待光照贴图生成。
- en: From the **Hierarchy** view, select the **RollerBall**. Then, from the **Inspector**
    view, find the **Mesh Renderer** component and check the **Use Light Probes**
    option, as shown:![How to do it...](img/1362_06_34.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**视图，选择**RollerBall**。然后，从**检查器**视图，找到**网格渲染器**组件并勾选**使用光照探头**选项，如下所示：![如何操作...](img/1362_06_34.jpg)
- en: Now, we need to create the **Light Probes** for the scene. From the **Hierarchy**
    view, click on the **Create** drop-down menu and add a **Light Probe Group** to
    the scene (**Create** | **Light** | **Light Probe Group**).
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为场景创建**光照探头**。从**层次结构**视图，点击**创建**下拉菜单，并将**光照探头组**添加到场景中（**创建** | **光**
    | **光照探头组**）。
- en: To facilitate the manipulation of the probes, type `Probe` into the search field
    of the **Hierarchy** view. This will isolate the newly created **Light Probe Group**,
    making it the only editable object on the scene.![How to do it...](img/1362_06_35.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了便于操作探头，在**层次结构**视图的搜索字段中输入`Probe`。这将隔离新创建的**光照探头组**，使其成为场景中唯一的可编辑对象。![如何操作...](img/1362_06_35.jpg)
- en: Change your viewport layout to **4 Split** by navigating to **Window** | **Layouts**
    | **4 Split**. Then, set viewports as **Top**, **Front**, **Right**, and **Persp**.
    Optionally, change **Top**, **Front** and **Right** views to the **Wireframe**
    mode. Finally, make sure that they are set to orthographic view, as shown in the
    following screenshot. This will make it easier for you to position the **Light
    Probes**.![How to do it...](img/1362_06_36.jpg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的视口布局更改为**4分割**，方法是导航到**窗口** | **布局** | **4分割**。然后，设置视口为**顶部**、**前部**、**右侧**和**透视**。可选地，将**顶部**、**前部**和**右侧**视图更改为**线框**模式。最后，确保它们设置为正交视图，如下面的截图所示。这将使您更容易定位**光照探头**。![如何操作...](img/1362_06_36.jpg)
- en: Position the initial **Light Probes** at the corners of the top room of the
    level. To move the Probes around, simply click and drag them, as shown:![How to
    do it...](img/1362_06_37.jpg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将初始**光照探头**放置在关卡顶部房间的角落。要移动探头，只需点击并拖动它们，如下所示：![如何操作...](img/1362_06_37.jpg)
- en: Select the four probes to the left side of the tunnel's entrance. Then, duplicate
    them by clicking on the appropriate button on the **Inspector** view or, alternatively,
    use the *Ctrl*/*Cmd* + *D* keys. Finally, drag the new probes slightly to the
    right, to a point that they are no longer over the shadow that is projected by
    the wall, shown as follows:![How to do it...](img/1362_06_38.jpg)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择隧道入口左侧的四个探头。然后，通过在**检查器**视图中点击相应的按钮或，作为替代，使用*Ctrl*/*Cmd* + *D*键来复制它们。最后，将新探头稍微向右拖动，直到它们不再位于由墙壁投射的阴影上，如下所示：![如何操作...](img/1362_06_38.jpg)
- en: Repeat the last step, this time duplicating the probes next to the tunnel's
    entrance and bringing them inward towards the group. To delete the selected probes,
    either use the respective button on the **Light Probe Group** component, or use
    the *Ctrl*/*Cmd* + *Backspace* keys.![How to do it...](img/1362_06_39.jpg)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上一步，这次复制隧道入口附近的探针并将它们向内移动到组中。要删除选定的探针，请使用**光探针组**组件上的相应按钮，或使用*Ctrl*/*Cmd*
    + *Backspace*键。![如何操作...](img/1362_06_39.jpg)
- en: Duplicate and reposition the four probes that are nearest to the tunnel, repeating
    the operation five times and conforming each duplicate set to the shadow, projected
    by the tunnel.![How to do it...](img/1362_06_40.jpg)
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并重新定位距离隧道最近的四个探针，重复操作五次，并将每个副本集与隧道投射的阴影相匹配。![如何操作...](img/1362_06_40.jpg)
- en: Use the **Add** **Probe** button to place the three probes over well-lit areas
    of the scene.![How to do it...](img/1362_06_41.jpg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**添加** **探针**按钮将三个探针放置在场景中光照良好的区域。![如何操作...](img/1362_06_41.jpg)
- en: Now, add **Light Probes** within the shadow that is projected by the L-shaped
    wall.![How to do it...](img/1362_06_42.jpg)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在L形墙投射的阴影内添加**光探针**。![如何操作...](img/1362_06_42.jpg)
- en: Since the Rollerball is able to jump, place the higher probes even higher, so
    that they will sample the lighting above the shadowed areas of the scene.![How
    to do it...](img/1362_06_45.jpg)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于Rollerball能够跳跃，因此将较高的探针放置得更高，以便它们可以采样场景中阴影区域上方的光照。![如何操作...](img/1362_06_45.jpg)
- en: Placing too many **Light Probes** on a scene might be memory intensive. Try
    optimizing the **Light Probes Group** by removing the probes from the regions
    that the player won't have access to. Also, avoid overcrowding the regions of
    continuous lighting conditions by removing the probes that are too close to others
    in the same lighting condition.![How to do it...](img/1362_06_46.jpg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景上放置过多的**光探针**可能会占用大量内存。尝试通过从玩家无法访问的区域移除探针来优化**光探针组**。此外，通过移除与同一光照条件下其他探针过于接近的探针，避免过度拥挤连续光照条件区域。![如何操作...](img/1362_06_46.jpg)
- en: To check out which Light Probes are influencing the **Rollerball** at any place,
    move the **Rollerball** GameObject around the scene. A polyhedron will indicate
    which probes are being interpolated at that position, as shown:![How to do it...](img/1362_06_47.jpg)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查哪些光探针正在影响场景中任何位置的**Rollerball**，请将**Rollerball**游戏对象在场景中移动。一个多面体会指示在该位置正在插值的探针，如图所示：![如何操作...](img/1362_06_47.jpg)
- en: From the bottom of the **Lighting** window, click on the **Build** button and
    wait for the Lightmaps to be baked.![How to do it...](img/1362_06_43.jpg)
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**光照**窗口底部，单击**构建**按钮，等待光照贴图烘焙完成。![如何操作...](img/1362_06_43.jpg)
- en: Test the scene. The Rollerball will be lit according to the Light Probes.![How
    to do it...](img/1362_06_44.jpg)
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试场景。Rollerball将根据光探针进行照明。![如何操作...](img/1362_06_44.jpg)
- en: Keep adding probes until the level is completely covered.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续添加探针，直到关卡完全被覆盖。
- en: How it works...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '**Lighmaps** are basically texture maps including scene lights/shadows, global
    illumination, indirect illumination, and objects featuring the **Emissive** materials.
    They can be generated automatically or on demand by Unity''s lighting engine.
    However, there are some points that you should pay attention to, such as:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**光照贴图**基本上是包含场景灯光/阴影、全局光照、间接光照以及具有**发射**材料的对象的纹理图。它们可以由Unity的光照引擎自动生成或在需要时生成。然而，有一些需要注意的点，例如：'
- en: Set all the non-moving objects and lights to be baked as **Static**
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有非移动对象和灯光设置为**静态**烘焙
- en: Set the game lights as **Baked**
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏灯光设置为**烘焙**
- en: Set the scene's **Ambient GI** as **Baked**
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将场景的**环境全局光照**设置为**烘焙**
- en: Set the **Global Illumination** option of the emissive materials as **Baked**
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将发射材料的全局光照选项设置为**烘焙**
- en: '**Generate Light UV**s for all 3D meshes (specially the imported ones)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有3D网格（特别是导入的网格）**生成光照UV**
- en: Either **Build** the Lightmaps manually from the **Lighting** window, or set
    the **Continuous Baking** option checked
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要么从**光照**窗口手动**构建**光照贴图，要么设置**连续烘焙**选项为勾选
- en: '**Light Probes** work by sampling the scene''s illumination at the point that
    they''re placed at. A dynamic object that has **Use Light Probes** enabled has
    its lighting determined by the interpolation between the lighting values of the
    four Light Probes defining a volume around it (or, in case there are no probes
    suited to define a volume around the dynamic object, a triangulation between the
    nearest probes is used).'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**光探针**通过在它们放置的点采样场景的照明来工作。一个启用了**使用光探针**的动态对象，其照明由围绕它的四个定义体积的光探针的照明值之间的插值确定（或者，如果没有适合定义动态对象周围体积的探针，则使用最近探针之间的三角剖分）。'
- en: It is important to notice that even if you are working on a level that is flat,
    you shouldn't place all your probes on the same level, as **Light Probe Groups**
    will form a volume in order to the interpolation to be calculated correctly. This
    and more information on the subject can be found in the Unity's documentation
    at [http://docs.unity3d.com/Manual/LightProbes.html](http://docs.unity3d.com/Manual/LightProbes.html).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，即使您正在处理一个平坦的水平，您也不应该将所有探针放置在同一水平面上，因为**光探针组**将形成一个体积，以便正确计算插值。关于这个主题的更多信息可以在Unity的文档中找到，网址为[http://docs.unity3d.com/Manual/LightProbes.html](http://docs.unity3d.com/Manual/LightProbes.html)。
- en: There's more...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In case you can spare some processing power, you can exchange the use of Light
    probes for a **Mixed** light. Just delete the **Light Probe Group** from your
    scene, select the **Directional Light** and, from the **Light** component, change
    **Baking** to **Mixed**. Then, set **Shadow Type** as **Soft Shadows** and **Strength**
    as `0.5`, as shown in the following screen. Finally, click on the **Build** button
    and wait for the Lightmaps to be baked. The real-time light/shadows will be cast
    into/from the dynamic objects, such as **Rollerball**.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能节省一些处理能力，您可以将光探针的使用与**混合**光交换。只需从您的场景中删除**光探针组**，选择**方向光**，然后从**灯光**组件中，将**烘焙**更改为**混合**。然后，将**阴影类型**设置为**软阴影**，并将**强度**设置为`0.5`，如以下屏幕所示。最后，点击**构建**按钮，等待光照图烘焙完成。实时光/阴影将被投射到/从动态对象，如**Rollerball**。
- en: '![There''s more...](img/1362_06_49.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1362_06_49.jpg)'
- en: Conclusion
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter aimed to present you with some of the Unity's new features in lighting,
    and occasionally teaches you a few tricks with lights and effects. By now, you
    should be familiar with some of the concepts introduced by Unity 5, comfortable
    with a variety of techniques, and, hopefully, willing to explore some of the functionalities
    discussed throughout the recipes deeper.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在向您介绍Unity在照明方面的一些新功能，并偶尔教您一些关于灯光和效果的技巧。到目前为止，您应该已经熟悉了Unity 5引入的一些概念，对各种技术感到舒适，并且，希望您愿意更深入地探索这些菜谱中讨论的功能。
- en: As always, Unity's documentation on the subject is excellent, so we encourage
    you to go back to the recipes and follow the provided URLs.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，Unity关于这个主题的文档非常出色，所以我们鼓励您回到菜谱，并遵循提供的URL。
