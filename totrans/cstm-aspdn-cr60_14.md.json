["```cs\ndotnet new web -n ActionFilterSample -o ActionFilterSample\n```", "```cs\ncd ActionFilterSample\ncode .\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace ActionFilterSample;\npublic class SampleActionFilter : IActionFilter\n{\n    public void OnActionExecuting(\n        ActionExecutingContext context)\n    {\n        // do something before the action executes\n    }\n    public void OnActionExecuted(\n        ActionExecutedContext context)\n    {\n        // do something after the action executes\n    }\n}\npublic class SampleAsyncActionFilter : IAsyncActionFilter\n{\n    public async Task OnActionExecutionAsync(\n        ActionExecutingContext context,\n        ActionExecutionDelegate next)\n    {\n        // do something before the action executes\n        var resultContext = await next();\n        // do something after the action executes; \n        // resultContext.Result will be set\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace ActionFilterSample;\npublic class ValidateModelAttribute : ActionFilterAttribute\n{\n    public override void OnActionExecuting(\n        ActionExecutingContext context)\n    {\n        if (!context.ModelState.IsValid)\n        {\n            context.Result = new BadRequestObjectResult(\n                context.ModelState);\n        }\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace ActionFilterSample;\npublic class LoggingActionFilter : IActionFilter\n{\n    ILogger _logger;\n    public LoggingActionFilter(ILoggerFactory \n      loggerFactory)\n    {\n        _logger =\n         loggerFactory.CreateLogger<LoggingActionFilter>();\n    }\n    public void OnActionExecuting(\n        ActionExecutingContext context)\n    {\n        _logger.LogInformation(\n          $\"Action '{context.ActionDescriptor.DisplayName}'\n            executing\");\n    }\n    public void OnActionExecuted(\n        ActionExecutedContext context)\n    {\n        _logger.LogInformation(\n          $\"Action '{context.ActionDescriptor.DisplayName}'\n            executed\");\n    }\n}\n```", "```cs\n[HttpPost]\n[ValidateModel] // ActionFilter as attribute\npublic ActionResult<Person> Post([FromBody] Person model)\n{\n    // save the person\n    return model; //just to test the action\n}\n```", "```cs\nbuilder.Services.AddControllersWithViews()\n    .AddMvcOptions(options =>\n    {\n        options.Filters.Add(new SampleActionFilter());\n        options.Filters.Add(new SampleAsyncActionFilter());\n    });\n```", "```cs\nbuilder.Services.AddControllersWithViews()\n    .AddMvcOptions(options =>\n    {\n        options.Filters.Add<LoggingActionFilter>();\n    })\n```", "```cs\n[ServiceFilter(typeof(LoggingActionFilter))]\npublic class HomeController : Controller\n{\n```", "```cs\nbuilder.Services.AddSingleton<LoggingActionFilter>();\n```", "```cs\n[TypeFilter(typeof(AddHeaderAttribute),\n    Arguments = new object[] { \"Author\", \"Juergen Gutsch \n      (@sharpcms)\" })]\npublic IActionResult Hi(string name)\n{\n    return Content($\"Hi {name}\");\n}\n```"]