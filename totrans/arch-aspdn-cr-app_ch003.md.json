["```cs\ndotnet add reference ../../src/MyProject.csproj.\n```", "```cs\npublic class FactTest\n{\n    [Fact]\n    public void Should_be_equal()\n    {\n        var expectedValue = 2;\n        var actualValue = 2;\n        Assert.Equal(expectedValue, actualValue);\n    }\n}\n```", "```cs\npublic class AsyncFactTest\n{\n    [Fact]\n    public async Task Should_be_equal()\n    {\n        var expectedValue = 2;\n        var actualValue = 2;\n        await Task.Yield();\n        Assert.Equal(expectedValue, actualValue);\n    }\n}\n```", "```cs\nPassed!  - Failed:     0, Passed:    23, Skipped:     0, Total:    23, Duration: 22 ms - MyApp.Tests.dll (net8.0)\n```", "```cs\npublic class AssertionTest\n{\n    [Fact]\n    public void Exploring_xUnit_assertions()\n    {\n        object obj1 = new MyClass { Name = \"Object 1\" };\n        object obj2 = new MyClass { Name = \"Object 1\" };\n        object obj3 = obj1;\n        object? obj4 = default(MyClass);\n        //\n        // Omitted assertions\n        // \n        static void OperationThatThrows(string name)\n        {\n            throw new SomeCustomException { Name = name };\n        }\n    }\n    private record class MyClass\n    {\n        public string? Name { get; set; }\n    }\n    private class SomeCustomException : Exception\n    {\n        public string? Name { get; set; }\n    }\n}\n```", "```cs\nAssert.Equal(expected: 2, actual: 2);\nAssert.NotEqual(expected: 2, actual: 1);\n```", "```cs\nAssert.Same(obj1, obj3);\nAssert.NotSame(obj2, obj3);\n```", "```cs\nAssert.Equal(obj1, obj2);\n```", "```cs\nAssert.Null(obj4);\nAssert.NotNull(obj3);\n```", "```cs\nvar instanceOfMyClass = Assert.IsType<MyClass>(obj1);\n```", "```cs\nAssert.Equal(expected: \"Object 1\", actual: instanceOfMyClass.Name);\n```", "```cs\nvar exception = Assert.Throws<SomeCustomException>(\n    testCode: () => OperationThatThrows(\"Toto\")\n);\n```", "```cs\nAssert.Equal(expected: \"Toto\", actual: exception.Name);\n```", "```cs\npublic class InlineDataTest\n{\n    [Theory]\n    [InlineData(1, 1)]\n    [InlineData(2, 2)]\n    [InlineData(5, 5)]\n    public void Should_be_equal(int value1, int value2)\n    {\n        Assert.Equal(value1, value2);\n    }\n}\n```", "```cs\npublic class MemberDataTest\n{\n    public static IEnumerable<object[]> Data => new[]\n    {\n        new object[] { 1, 2, false },\n        new object[] { 2, 2, true },\n        new object[] { 3, 3, true },\n    };\n    public static TheoryData<int, int, bool> TypedData =>new TheoryData<int, int, bool>\n    {\n        { 3, 2, false },\n        { 2, 3, false },\n        { 5, 5, true },\n    };\n    [Theory]\n    [MemberData(nameof(Data))]\n    [MemberData(nameof(TypedData))]\n    [MemberData(nameof(ExternalData.GetData), 10, MemberType = typeof(ExternalData))]\n    [MemberData(nameof(ExternalData.TypedData), MemberType = typeof(ExternalData))]\n    public void Should_be_equal(int value1, int value2, bool shouldBeEqual)\n    {\n        if (shouldBeEqual)\n        {\n            Assert.Equal(value1, value2);\n        }\n        else\n        {\n            Assert.NotEqual(value1, value2);\n       }\n    }\n    public class ExternalData\n    {\n        public static IEnumerable<object[]> GetData(int start) => new[]\n        {\n            new object[] { start, start, true },\n            new object[] { start, start + 1, false },\n            new object[] { start + 1, start + 1, true },\n        };\n        public static TheoryData<int, int, bool> TypedData => new TheoryData<int, int, bool>\n        {\n            { 20, 30, false },\n            { 40, 50, false },\n            { 50, 50, true },\n        };\n    }\n}\n```", "```cs\npublic class ClassDataTest\n{\n    [Theory]\n    [ClassData(typeof(TheoryDataClass))]\n    [ClassData(typeof(TheoryTypedDataClass))]\n    public void Should_be_equal(int value1, int value2, bool shouldBeEqual)\n    {\n        if (shouldBeEqual)\n        {\n            Assert.Equal(value1, value2);\n        }\n        else\n        {\n            Assert.NotEqual(value1, value2);\n        }\n    }\n    public class TheoryDataClass : IEnumerable<object[]>\n    {\n        public IEnumerator<object[]> GetEnumerator()\n        {\n            yield return new object[] { 1, 2, false };\n            yield return new object[] { 2, 2, true };\n            yield return new object[] { 3, 3, true };\n        }\n        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n    }\n    public class TheoryTypedDataClass : TheoryData<int, int, bool>\n    {\n        public TheoryTypedDataClass()\n        {\n            Add(102, 104, false);\n        }\n    }\n}\n```", "```cs\n[Fact]\npublic void Should_be_equals()\n{\n    // Arrange\n    var a = 1;\n    var b = 2;\n    var expectedResult = 3;\n    // Act\n    var result = a + b;\n    // Assert\n    Assert.Equal(expectedResult, result);\n}\n```", "```cs\n<PropertyGroup>\n  ...\n  <RootNamespace>MyApp</RootNamespace>\n</PropertyGroup>\n```", "```cs\nnamespace MyApp.IntegrationTests.Controllers;\npublic class ValuesControllerTest\n{\n    public class Get : ValuesControllerTest\n    {\n        [Fact]\n        public void Should_return_the_expected_strings()\n        {\n            // Arrange\n            var sut = new ValuesController();\n            // Act\n            var result = sut.Get();\n            // Assert\n            Assert.Collection(result.Value,\n                x => Assert.Equal(\"value1\", x), \n                x => Assert.Equal(\"value2\", x) \n            );\n        }\n    }\n}\n```", "```cs\nnamespace MyApp.IntegrationTests.Controllers;\npublic class ValuesControllerTest : IClassFixture<WebApplicationFactory<Startup>>\n{\n    private readonly HttpClient _httpClient;\n    public ValuesControllerTest(\n        WebApplicationFactory<Startup> webApplicationFactory)\n    {\n        _httpClient = webApplicationFactory.CreateClient();\n    }\n    public class Get : ValuesControllerTest\n    {\n        public Get(WebApplicationFactory<Startup> webApplicationFactory)\n            : base(webApplicationFactory) { }\n        [Fact]\n        public async Task Should_respond_a_status_200_OK()\n        {\n            // Omitted Test Case 1\n        }\n        [Fact]\n        public async Task Should_respond_the_expected_strings()\n        {\n            // Omitted Test Case 2\n        }\n    }\n}\n```", "```cs\n[Fact]\npublic async Task Should_respond_a_status_200_OK()\n{\n    // Act\n    var result = await _httpClient\n        .GetAsync(\"/api/values\");\n    // Assert\n    Assert.Equal(HttpStatusCode.OK, result.StatusCode);\n}\n```", "```cs\n[Fact]\npublic async Task Should_respond_the_expected_strings()\n{\n    // Act\n    var result = await _httpClient\n        .GetFromJsonAsync<string[]>(\"/api/values\");\n    // Assert\n    Assert.Collection(result,\n        x => Assert.Equal(\"value1\", x),\n        x => Assert.Equal(\"value2\", x)\n    );\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.MapGet(\"/\", () => \"Hello World!\");\napp.Run();\npublic partial class Program { }\n```", "```cs\nnamespace MyMinimalApiApp;\npublic class ProgramTest : IClassFixture<WebApplicationFactory<Program>>\n{\n    private readonly HttpClient _httpClient;\n    public ProgramTest(\n        WebApplicationFactory<Program> webApplicationFactory)\n    {\n        _httpClient = webApplicationFactory.CreateClient();\n    }\n    public class Get : ProgramTest\n    {\n        public Get(WebApplicationFactory<Program> webApplicationFactory) \n            : base(webApplicationFactory) { }\n        [Fact]\n        public async Task Should_respond_a_status_200_OK()\n        {\n            // Act\n            var result = await _httpClient.GetAsync(\"/\");\n            // Assert\n            Assert.Equal(HttpStatusCode.OK, result.StatusCode);\n        }\n        [Fact]\n        public async Task Should_respond_hello_world()\n        {\n            // Act\n            var result = await _httpClient.GetAsync(\"/\");\n            // Assert\n            var contentText = await result.Content.ReadAsStringAsync();\n            Assert.Equal(\"Hello World!\", contentText);\n        }\n    }\n}\n```", "```cs\npublic partial class Program { }\n```", "```cs\nnamespace MyMinimalApiApp;\npublic class ProgramTestWithoutFixture : IAsyncDisposable\n{\n    private readonly WebApplicationFactory<Program> _webApplicationFactory;\n    private readonly HttpClient _httpClient;\n    public ProgramTestWithoutFixture()\n    {\n        _webApplicationFactory = new WebApplicationFactory<Program>();\n        _httpClient = _webApplicationFactory.CreateClient();\n    }\n    public ValueTask DisposeAsync()\n    {\n        return ((IAsyncDisposable)_webApplicationFactory)\n            .DisposeAsync();\n    }\n    // Omitted nested Get class\n}\n```", "```cs\npublic partial class Program { }\n```", "```cs\nnamespace MyMinimalApiApp;\npublic class MyTestApplication : WebApplicationFactory<Program> {}\n```", "```cs\nnamespace MyMinimalApiApp;\npublic class MyTestApplicationTest\n{\n    public class Get : ProgramTestWithoutFixture\n    {\n        [Fact]\n        public async Task Should_respond_a_status_200_OK()\n        {\n            // Arrange\n            await using var app = new MyTestApplication();\n            var httpClient = app.CreateClient();\n            // Act\n            var result = await httpClient.GetAsync(\"/\");\n            // Assert\n            Assert.Equal(HttpStatusCode.OK, result.StatusCode);\n        }\n    }\n}\n```"]