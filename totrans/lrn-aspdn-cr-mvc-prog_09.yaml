- en: Chapter 9. Deployment of ASP.NET Core Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have completed the development for our ASP.NET core application, we
    need to deploy the application so that it can be accessed by our users.
  prefs: []
  type: TYPE_NORMAL
- en: In any application, irrespective of whether it is the web, desktop, or mobile
    application, not all the functionalities have been achieved through code. In fact,
    you should not try to achieve everything through code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you are going to learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration in the ASP.NET Core application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing up to the Microsoft Azure platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the ASP.NET Core application to the Azure Cloud platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have built a web application using any of the previous versions of ASP.NET
    MVC, there will be a file by the name of `Web.config` (an XML file) where you
    can configure all the dependencies for your application. But in ASP.NET Core,
    there will be no `Web.config` file in your solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deployment of ASP.NET Core Application](img/Image00131.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead, we have `project.json` (a JSON file), where we will configure the dependencies
    for your application. Before discussing the contents of `project.json` , let us
    discuss a bit about JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON is an acronym of **JavaScript Object Notation** . It is the open standard
    data exchange format. It will be in human-readable text and consist of attribute/value
    pairs. Consider the following JSON, and let''s dissect it to see what it represents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Each piece of data is an attribute value pair, separated by a colon. For example,
    `"DoorNo": 16` tells that the value for `DoorNo` variable is 16 in the first record.
    Each attribute value pair (sometimes called a property) is separated by a comma.
    For example, consider the following three properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Each record or object is contained within a pair of curly braces. For example,
    the following JSON data represents a record or an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar records can be grouped together and could be formed as an array (of
    objects). Square brackets are used to represent the array in JSON format as in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have to represent the same data in XML format, you can do so as follows.
    Please note that for each piece of information, we should have a start tag and
    an end tag (ends with "`/` "):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The project.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the project configuration should go into the `project.json` file for
    the ASP.NET Core application. The following is the `project.json` file that was
    created when using the predefined ASP.NET Core web application template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project.json file](img/Image00132.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are different predefined nodes in this JSON file for different functionalities.
    Let us take some important nodes in this `project.json` file and discuss them.
  prefs: []
  type: TYPE_NORMAL
- en: The dependencies node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `dependencies` node lists all the dependencies for your ASP.NET Core application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a fragment of the `dependencies` node in the ASP.NET Core
    application. Each dependency is an attribute value pair where the attribute represents
    the dependency and the value represents the version of the dependency. If you
    need to provide more information for the dependency, you can have a nested JSON
    configuration as it is in `Microsoft.NETCore.App` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The frameworks node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this node, we mention the frameworks that we depend on for the ASP.NET Core
    application. `dotnet5.6` represents the full blown .NET framework and `dnxcore50`
    represents the .NET Core framework containing the subset of functionalities of
    the complete .NET framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure is a cloud computing platform and infrastructure from Microsoft
    for building, deploying, and managing applications and services. It supports different
    programming languages and arrays of services.
  prefs: []
  type: TYPE_NORMAL
- en: You can deploy your application in any server with **Internet Information Service**
    ( **IIS** ) in your network. But this restricts your application to being accessed
    only from within your network, assuming your server could only be accessed from
    within your network (as in most network setups). In this section, we are going
    to deploy the ASP.NET Core application in Microsoft Azure so that your users across
    the globe can access your application.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up to Microsoft Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order for your application to be deployed to Azure, you need to have an
    account with Azure. You can create an Azure account for free and you''ll have
    sufficient credits to deploy your application for free within the first 30 days
    ( [https://azure.microsoft.com/en-in/](https://azure.microsoft.com/en-in/) ):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00133.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the **Try for free** button or **Free Account** link in the top right-hand
    corner and you''ll be forwarded to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00134.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the **Start now** button and you''ll be redirected to the following page.
    Enter your Microsoft account credentials and click the **Sign In** button. If
    you don''t have a Microsoft account, you can create one by clicking on the  **sign
    up now** link at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00135.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As I have a Microsoft account already, I have signed in with my credentials.
    Once you have signed-in, you will be asked for details about your country, first
    name, second name, and your work phone, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00136.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have entered all the necessary details, you will be asked for your
    country code and phone number so that Azure can text you or call you to verify
    you are a real person and not a robot ![Signing up to Microsoft Azure](img/Image00071.jpg)
    . If you choose the option of **text me** , you will get a code to your mobile
    phone; you need to enter it in the last field and click **Verify Code** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00137.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have been verified by phone, you need to enter your credit card information
    in the following form. You''ll be billed for approximately $1 and it will be refunded
    within five to six business days back to your account. This information is collected
    to identify the user''s identity and the user will not be billed unless the user
    explicitly opted for the paid service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00138.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you enter your credit card information and click **Next** , you will have
    to agree to the subscription agreement as the final step in the sign-up process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00139.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click the **Sign up** button, it will take another five minutes to
    complete the process. You''ll be shown the following screen until the process
    completes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00140.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the sign-up process completes, you''ll be shown the following screen.
    You''ll also get a confirmation e-mail (to the e-mail ID that you gave in the
    first step) with the subscription details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Signing up to Microsoft Azure](img/Image00141.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Prerequisites to Azure deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to publish the ASP.NET Core application to Azure from the Visual Studio
    2015 Community Edition, you should have Visual Studio 2015 Update 2 installed
    (at least) and you should install/enable the SQL Server Data Tools.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have the latest version of VS 2015, there is no need to install Update
    2.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the Visual Studio 2015 Update 2 from the URL at [https://www.visualstudio.com/en-us/news/vs2015-update2-vs.aspx](https://www.visualstudio.com/en-us/news/vs2015-update2-vs.aspx)
    and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the SQL Server Data Tools, go to **Control Panel** | **Programs
    and Features** . Right-click on the **Microsoft Visual Studio Community 2015**
    and select the **Change** , option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites to Azure deployment](img/Image00142.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on **Change** option, you will get the following window—where
    you have to choose the **Modify** button. Once you click the **Modify** button,
    you''ll be given an option where you can modify the Visual Studio installation
    options. I have selected **Microsoft SQL Server Data Tools**  , as depicted in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites to Azure deployment](img/Image00143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click **Next** , Visual Studio will install the SQL Server Data Tools
    and once it is completed, you will get the following screen, which shows the setup
    completion status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites to Azure deployment](img/Image00144.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the ASP.NET Core application in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create an ASP.NET Core application that we can deploy in Microsoft Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00145.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The ASP.NET Core application will be created once you click the **OK** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As the default ASP.NET Core Web Application template uses the Entity Framework,
    we need to execute the following command in order to create the database migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you enter the command in **Command Prompt** (in the project''s path),
    the migration file will be created. This migration file will contain all the changes
    to the database. This migration will be applied at the time of deployment at Azure
    so that Azure can create the necessary database scripts for Azure deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00147.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the database migration is completed, right-click on the created Core application
    and select the **Publish** option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00148.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click the **Publish** option, you''ll be shown the following screen,
    depicting various publishing options available for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00149.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please select the  **Microsoft Azure App Service** option to publish the web
    application on the Microsoft Azure platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00150.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **New** button, and you will get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00151.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can change the web app name to whatever name you would like to have. I have
    changed the web app name to **learningmvc6** .
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New** button beside the **Resource Group** and enter the name
    for the resource group. The resource group is just a tag where you can group all
    of your computing resources so that if you want to delete all the resources, you
    can just delete the resource group. For example, a resource group could comprise
    of a web server and a database server—you can think of it like a collection of
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the **New** button beside the **App Service Plan** . You will
    get the following window where you can choose the location and size of your web
    application container. Your location could be anywhere from South Central US to
    Europe, from Japan to Canada. Your application container could be anything from
    free to a machine with 7 GB RAM. I have chosen the free option as our objective
    is to deploy the ASP.NET Core application in a cloud environment rather than to
    deploy an application which is to be accessed by millions of users. Of course,
    you can achieve the same with ASP.NET Core and Microsoft Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00152.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can configure the SQL database which is available as an additional Azure
    service.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00153.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the + button which is available at the top section which will lead
    us to the configuration of the SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00154.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have any existing SQL server in the Azure environment, you can use it.
    As I don''t have any such server, I am going to create a SQL server by clicking
    the  **New** button beside SQL Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00155.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please enter the administrator user name and password for the SQL Server and
    click **OK** . You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00156.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click **OK** , you will get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00157.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click **OK** on the preceding screen and we will see the **Create App Service**
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00158.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click **Create** once we have configured all the required Azure services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00159.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screen shows the deployment configuration options, such as the
    **Site name** and **Destination URL** for our application. Click **Next** on the
    preceding screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00160.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is important to note that you need to expand the **Databases** option and
    **Entity Framework Migrations** options and select both the checkboxes. The first
    checkbox represents the connection string that should be used at runtime and the
    second checkbox represents the database migration that should be applied on publication.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00161.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screen is the preview screen where you can see the files that
    would be deployed when you publish. This is an optional step—if you want to see
    the files, you can click the **Start Preview** button. Or else, you can click
    the **Publish** button to publish the web application in the Azure platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click the **Publish** button, our ASP.NET Core application will be
    deployed in Azure and your application URL will be opened on successful publication.
    You will get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the ASP.NET Core application in Azure](img/Image00162.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying the ASP.NET Core web application in the Linux environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section of the chapter, we are going to learn how to create and deploy
    the ASP.NET Core web application in the Linux platform. I am going to deploy the
    application in the cloud using **Amazon Web Services** ( **AWS** ). Obviously,
    you don't need AWS to deploy the ASP.NET Core application on Linux. I am just
    using it so that I do not need to install Linux on my local machine. And another
    advantage of hosting with AWS (or any other public cloud service provider or any
    hosting provider) is that I can access the web application from anywhere as it
    will be publicly available.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following prerequisites to create and deploy in the Linux environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putty client (if you are using a remote Linux machine)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Linux machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use AWS to create a Linux machine. The advantage of using AWS
    or any other cloud provider is that we can use their service only when we need
    it and we can wind down the machine when you are done with it. You only need to
    pay for the time when you are using it. For the first year, AWS has a free tier
    where you can host the machine (if it is eligible for the free tier) without having
    to pay anything. I have been using AWS for more than couple of years to try out
    many things in the cloud, hence I am not eligible for the free tier.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can install Linux on your Windows PC by using any virtualization
    software. Ubuntu Linux has the option of booting up from the USB drive itself
    so that you don't need to disturb anything in your local PC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you sign-up for an AWS account, you can go to the **EC2 dashboard** ,
    where you can create **EC2 instances** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00163.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click **Launch Instance** in the preceding screen. A wizard will be launched
    where it will help you in selecting and configuring the instances. In this step,
    we are selecting the Ubuntu Linux server because of its ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00164.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are different kinds of instances available in AWS ranging from **nano**
    (with 0.5 GB RAM) to large machines (with 1952 GB RAM). We are going to choose
    **micro** instance as it is eligible for the free tier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00165.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In previous step, we can configure the instances for the cloud. We can create
    an auto scale group where the AWS cloud will spin up the instances automatically
    when the load is high. As our objective is to create and deploy the ASP.NET Core
    web application, we are going to leave the default values as they are and click
    **Next: Add Storage** to move to the next screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00166.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **micro** instances do not come with any external storage. Hence, we need
    to add the storage in order to use it. We have three options for storage to choose
    from: **General Purpose SSD** , **Provisioned SSD** , and **Magnetic SSD** . Out
    of the three, the **General Purpose SSD** is the storage that would be usually
    used.'
  prefs: []
  type: TYPE_NORMAL
- en: When your application is making high input-output operations, the throughput
    may come down. But in the Provisioned SSD you can maintain the required throughput
    from the storage device. Magnetic storage is just an old type of storage. We are
    going to use the General Purpose 8 GB **Solid State Drive** ( **SSD** ) as it
    serves our purpose well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00167.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are using multiple instances, you can tag them so that you can control
    the instances by using the tag name. As we are going to launch only one instance,
    I am just going to leave it blank and move on to the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00168.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this step, we can configure the security group for the instance—which ports
    should be opened for the incoming traffic. The general rule in any configuration
    is to only open up the ports what you need and nothing else. You also need to
    tell the IP (or its range) from where the machine could be accessed from. As it
    is a demo application, we are going to open ports `22` , for **Secure Shell**
    ( **SSH** ); for using PuTTY, and `80` , for accessing the Core web application.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have configured the Security Groups, click **Review and Launch** .
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00169.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the following screen, you can review the chosen options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00170.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can click **Launch** once you are fine with the selected options. Otherwise,
    you can go back to the previous step to reconfigure them with the correct values.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click **Launch** , it will ask you to choose a key pair which you
    will be using to log into any AWS server. If you do not have one, you can create
    one. As I have created one already, I am going to use the existing one, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00171.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the key pair and click **Launch Instances** . AWS will spin up new instances
    for us and the status will be shown (as in the following screenshot). The instance
    ID will also be available (boxed in the screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00172.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the blue colored link will fetch you the status (as shown in the
    following screenshot). The **Public DNS** and **Public IP** are important values
    which you will be using to connect to that server. Hence, I''ve boxed them in
    the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Linux machine](img/Image00173.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing the PuTTY client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having created a new Linux server where we can create an ASP.NET 5 web application
    and host it, we need to install the PuTTY client, a small application that can
    send commands to the Linux server and receive the responses. As we are going to
    install the application in a Linux server, we need to have a way for connecting
    from your Windows PC to the Linux server. The PuTTY client application does exactly
    that.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the PuTTY client by visiting [http://www.chiark.greenend.org.uk/~sgtatham/putty/](http://www.chiark.greenend.org.uk/~sgtatham/putty/)
     .
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00174.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Download** link and select the link (boxed in the screenshot)
    in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00175.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will download the MSI file. Once it''s downloaded, launch the installer
    and you''ll be shown the following welcome screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00176.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click **Next** and you''ll see following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00177.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the installation folder—you can leave it as it is and click **Next**
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00178.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the product features which you want to install. You can leave the default
    selection and click **Install** . Once it is installed, you will be shown the
    following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00179.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click **Finish** and launch the PuTTY application. It will open the PuTTY configuration
    window, where we are going to enter the hostname and authentication details. The
    hostname is `<username>@<public DNS>` . In our case, it is **ubuntu@ec2-107-22-121-81.compute-1.amazonaws.com**
    . Ubuntu is the default user for the Ubuntu AMI that we have chosen. We can get
    the public DNS value in the status window as shown earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00180.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For authentication, select **Connection** | **SSH** | **Auth** in the left-hand
    pane and select the `PPK` file (private key file) that we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00181.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click **Open** . You'll get a warning asking you whether you trust this host.
    Click **yes** and you'll be shown the Command Prompt of the Linux screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the PuTTY client](img/Image00182.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to install .NET Core before creating the ASP.NET 5 application
    and eventually host them.
  prefs: []
  type: TYPE_NORMAL
- en: Installing of .NET Core in a Linux machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to install .NET Core on Ubuntu, we need to first set up the apt and
    get feed that hosts the package that we need. Enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing of .NET Core in a Linux machine](img/Image00183.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then update it by issuing the following command, which will download the required
    packages and install them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following screen for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing of .NET Core in a Linux machine](img/Image00184.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the .NET Core with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screen will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing of .NET Core in a Linux machine](img/Image00185.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new ASP.NET 5 project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Issue the following commands to create a new directory where we will create
    the ASP.NET 5 application. The first command ( `**mkdir**` - make directory) is
    for creating a directory in Linux and the second command ( `**cd**` - change directory)
    is for going inside the folder. And the last command is the command line to create
    a .NET Core application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screen will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new ASP.NET 5 project](img/Image00186.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will create the .NET Core application, which has a couple of files—`Program.cs`
    and `project.json` . It's a bare minimum application that does not have even `Startup`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add the `Kestrel HTTP Server` package as a dependency in `project.json`
    . You can edit the file by issuing the command `**vi project.json**` . By default,
    the vi editor will open the file in read-only mode. You need to press *Esc* +
    *I* in order to make it to the edit mode. Add the line **"Microsoft.AspNetCore.Server.Kestrel":
    "1.0.0"**  as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new ASP.NET 5 project](img/Image00187.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Press the Escape key and " *:"  * and type `wq`  to write into and quit the
    `vi` editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have added the dependency, we need to restore the packages by executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you enter this command, all the packages will be restored as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new ASP.NET 5 project](img/Image00188.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new file, `Startup.cs` , with the following content. You can create
    a new file by issuing the command `**vi Startup.cs**` . As usual, we need to press
    *Esc* + *I*  to make the file in write and read mode. Paste the following content
    (you can paste it by right-clicking on the mouse after copying it from here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Press *Esc* + *:*  and type `wq` , to save the file. Update the `Program.cs`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new ASP.NET 5 project](img/Image00189.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have created the ASP.NET Core web application. Now we need to install **Nginx**
    , a reverse proxy server, which enables you to offload work such as serving static
    content, caching, and compressing requests. You can configure Nginx to listen
    on a particular port (we''ll discuss the details later in this chapter). You can
    install Nginx by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it is installed, you can issue the following command to start the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When you''ll run the command, you''ll see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new ASP.NET 5 project](img/Image00190.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the Nginx server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configure the Nginx server by modifying the file (`/etc/nginx/sites-available/default`
    ) to have the following content—so that Nginx will forward the request to ASP.NET.
    In order to modify this file, you need to have sufficient rights—try switching
    to a super user. The  `**Sudo su**` is the command for switching it to a super
    user. See the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The code looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the Nginx server](img/Image00191.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the application by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the Nginx server](img/Image00192.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now access the application from your browser using the public DNS (AWS created
    the public DNS when the instance was launched):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the Nginx server](img/Image00193.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Voila! We have created the ASP.NET Core web application and launched it in the
    Linux box. We have even used the cloud through **Amazon Web Services** ( **AWS**
    ).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about the different components available in
    the `project.json` file, where all the configuration of your ASP.NET Core goes.
    We have discussed how to sign up to the Microsoft Azure cloud platform and deploy
    the ASP.NET Core application in the Azure platform. We have also learned how to
    create and deploy the ASP.NET Core web application in Linux using Amazon Web Services
    in the cloud.
  prefs: []
  type: TYPE_NORMAL
