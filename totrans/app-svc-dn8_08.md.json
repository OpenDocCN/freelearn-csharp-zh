["```cs\nconst express = require('express')\nconst app = express()\nconst port = 3000\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n}) \n```", "```cs\nint port = 3000;\nvar app = WebApplication.Create();\napp.MapGet(\"/\", () => \"Hello World!\");\nConsole.WriteLine($\"Example app listening on port {port}\");\nawait app.RunAsync($\"https://localhost:{port}/\"); \n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n **<ImplicitUsings>enable</ImplicitUsings>**\n  </PropertyGroup>\n</Project> \n```", "```cs\napp.MapGet(\"api/customers\", GetCustomers);\napp.MapPost(\"api/customers\", InsertCustomer);\napp.MapDelete(\"api/customers/{id}\", DeleteCustomer); \n```", "```cs\napp.MapMethods(\"api/customers\", new[] { \"CONNECT\" }, () =>\n  { \n    // Do something.\n  }); \n```", "```cs\nRouteGroupBuilder group = app.MapGroup(\"api/customers\")\ngroup.MapGet(\"/\", GetCustomers)\n  .MapGet(\"/{id}\", GetCustomerById)\n  .MapPost(\"/\", InsertCustomer)\n  .MapDelete(\"/{id}\", DeleteCustomer); \n```", "```cs\napp.MapPut(\"api/customers/{id}\", async (\n  [FromServices] NorthwindContext db,\n  [FromRoute] string id, // or [FromQuery] string id,\n  [FromBody] Customer customer) =>\n{\n  Customer? existingCustomer = await db.Customers.FindAsync(id);\n  ...\n}); \n```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.DataContext\n    .SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n      <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <InvariantGlobalization>**false**</InvariantGlobalization>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup> \n    ```", "```cs\n    dotnet build \n    ```", "```cs\n    \"profiles\": {\n      ...\n    **\"https\"****:****{**\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": true,\n        \"launchBrowser\": true,\n        \"launchUrl\": \"swagger\",\n    **\"applicationUrl\"****:****\"https://localhost:5081\"****,**\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        } \n    ```", "```cs\n    **using** **Northwind.EntityModels;** **// To use the AddNorthwindContext method.**\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\n    builder.Services.AddEndpointsApiExplorer();\n    builder.Services.AddSwaggerGen();\n    **builder.Services.AddNorthwindContext();**\n    var app = builder.Build();\n    // Configure the HTTP request pipeline.\n    if (app.Environment.IsDevelopment())\n    {\n      app.UseSwagger();\n      app.UseSwaggerUI();\n    }\n    app.UseHttpsRedirection(); \n    ```", "```cs\n    using Microsoft.AspNetCore.Http.HttpResults; // To use Results.\n    using Microsoft.AspNetCore.Mvc; // To use [FromServices] and so on.\n    using Northwind.EntityModels; // To use NorthwindContext, Product.\n    namespace Packt.Extensions;\n    public static class WebApplicationExtensions\n    {\n      public static WebApplication MapGets(this WebApplication app,\n        int pageSize = 10)\n      {\n        app.MapGet(\"/\", () => \"Hello World!\")\n          .ExcludeFromDescription();\n        app.MapGet(\"api/products\", (\n          [FromServices] NorthwindContext db,\n          [FromQuery] int? page) =>\n          db.Products\n            .Where(p => p.UnitsInStock > 0 && !p.Discontinued)\n            .OrderBy(product => product.ProductId)\n            .Skip(((page ?? 1) - 1) * pageSize)\n            .Take(pageSize)\n          )\n          .WithName(\"GetProducts\")\n          .WithOpenApi(operation =>\n          {\n            operation.Description =\n              \"Get products with UnitsInStock > 0 and Discontinued = false.\";\n            operation.Summary = \"Get in-stock products that are not discontinued.\";\n            return operation;\n          })\n          .Produces<Product[]>(StatusCodes.Status200OK);\n        app.MapGet(\"api/products/outofstock\", \n          ([FromServices] NorthwindContext db) => db.Products\n            .Where(p => p.UnitsInStock == 0 && !p.Discontinued)\n          )\n          .WithName(\"GetProductsOutOfStock\")\n          .WithOpenApi()\n          .Produces<Product[]>(StatusCodes.Status200OK);\n        app.MapGet(\"api/products/discontinued\", \n          ([FromServices] NorthwindContext db) =>\n            db.Products.Where(product => product.Discontinued)\n          )\n          .WithName(\"GetProductsDiscontinued\")\n          .WithOpenApi()\n          .Produces<Product[]>(StatusCodes.Status200OK);\n        app.MapGet(\"api/products/{id:int}\",\n          async Task<Results<Ok<Product>, NotFound>> (\n          [FromServices] NorthwindContext db,\n          [FromRoute] int id) =>\n            await db.Products.FindAsync(id) is Product product ?\n              TypedResults.Ok(product) : TypedResults.NotFound())\n          .WithName(\"GetProductById\")\n          .WithOpenApi()\n          .Produces<Product>(StatusCodes.Status200OK)\n          .Produces(StatusCodes.Status404NotFound);\n        app.MapGet(\"api/products/{name}\", (\n          [FromServices] NorthwindContext db,\n          [FromRoute] string name) =>\n            db.Products.Where(p => p.ProductName.Contains(name)))\n          .WithName(\"GetProductsByName\")\n          .WithOpenApi()\n          .Produces<Product[]>(StatusCodes.Status200OK);\n        return app;\n      }\n    } \n    ```", "```cs\n    public static WebApplication MapPosts(this WebApplication app)\n    {\n      app.MapPost(\"api/products\", async ([FromBody] Product product, \n        [FromServices] NorthwindContext db) =>\n      {\n        db.Products.Add(product);\n        await db.SaveChangesAsync();\n        return Results.Created($\"api/products/{product.ProductId}\", product);\n      }).WithOpenApi()\n        .Produces<Product>(StatusCodes.Status201Created);\n      return app;\n    } \n    ```", "```cs\n    public static WebApplication MapPuts(this WebApplication app)\n    {\n      app.MapPut(\"api/products/{id:int}\", async (\n        [FromRoute] int id, \n        [FromBody] Product product, \n        [FromServices] NorthwindContext db) =>\n      {\n        Product? foundProduct = await db.Products.FindAsync(id);\n        if (foundProduct is null) return Results.NotFound();\n        foundProduct.ProductName = product.ProductName;\n        foundProduct.CategoryId = product.CategoryId;\n        foundProduct.SupplierId = product.SupplierId;\n        foundProduct.QuantityPerUnit = product.QuantityPerUnit;\n        foundProduct.UnitsInStock = product.UnitsInStock;\n        foundProduct.UnitsOnOrder = product.UnitsOnOrder;\n        foundProduct.ReorderLevel = product.ReorderLevel;\n        foundProduct.UnitPrice = product.UnitPrice;\n        foundProduct.Discontinued = product.Discontinued;\n        await db.SaveChangesAsync();\n        return Results.NoContent();\n      }).WithOpenApi()\n        .Produces(StatusCodes.Status404NotFound)\n        .Produces(StatusCodes.Status204NoContent);\n      return app;\n    } \n    ```", "```cs\n    public static WebApplication MapDeletes(this WebApplication app)\n    {\n      app.MapDelete(\"api/products/{id:int}\", async (\n        [FromRoute] int id, \n        [FromServices] NorthwindContext db) =>\n      {\n        if (await db.Products.FindAsync(id) is Product product)\n        {\n          db.Products.Remove(product);\n          await db.SaveChangesAsync();\n          return Results.NoContent();\n        }\n        return Results.NotFound();\n      }).WithOpenApi()\n        .Produces(StatusCodes.Status404NotFound)\n        .Produces(StatusCodes.Status204NoContent);\n      return app;\n    } \n    ```", "```cs\n    using Packt.Extensions; // To use MapGets and so on. \n    ```", "```cs\n    app.MapGets() // Default pageSize: 10.\n      .MapPosts()\n      .MapPuts()\n      .MapDeletes(); \n    ```", "```cs\n    app.Run(); \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n          Now listening on: https://localhost:5081\n    info: Microsoft.Hosting.Lifetime[0]\n          Application started. Press Ctrl+C to shut down.\n    info: Microsoft.Hosting.Lifetime[0]\n          Hosting environment: Development\n    info: Microsoft.Hosting.Lifetime[0]\n          Content root path: C:\\apps-services-net8\\Chapter08\\Northwind.WebApi.Service \n    ```", "```cs\n    {\n      \"productId\": 77,\n      \"productName\": \"Original Frankfurter grüne Soße\",\n      \"supplierId\": 12,\n      \"categoryId\": 2,\n      \"quantityPerUnit\": \"12 boxes\",\n      \"unitPrice\": 13,\n      \"unitsInStock\": 32,\n      \"unitsOnOrder\": 0,\n      \"reorderLevel\": 15,\n      \"discontinued\": false,\n      \"category\": null,\n      \"supplier\": null,\n      \"orderDetails\": []\n    } \n    ```", "```cs\n    ### Configure a variable for the web service base address.\n    @base_address = https://localhost:5081/api/products/\n    ### Get first page of 10 products that are in stock and not discontinued.\n    GET {{base_address}} \n    ```", "```cs\n    ### Get third page of 10 products that are in stock and not discontinued\n    GET {{base_address}}?page=3\n    ### Get products that are out-of-stock but not discontinued\n    GET {{base_address}}outofstock\n    ### Get products that are discontinued\n    GET {{base_address}}discontinued\n    ### Get product 77\n    GET {{base_address}}77\n    ### Get products that contain \"man\"\n    GET {{base_address}}man \n    ```", "```cs\n    POST https://localhost:5081/api/products/\n    Content-Type: application/json\n    {\n      \"productName\": \"Harry's Hamburgers\",\n      \"supplierId\": 7,\n      \"categoryId\": 6,\n      \"quantityPerUnit\": \"6 per box\",\n      \"unitPrice\": 24.99,\n      \"unitsInStock\": 0,\n      \"unitsOnOrder\": 20,\n      \"reorderLevel\": 10,\n      \"discontinued\": false\n    } \n    ```", "```cs\n    PUT https://localhost:5081/api/products/78\n    Content-Type: application/json\n    {\n      \"productName\": \"Harry's Hamburgers\",\n      \"supplierId\": 7,\n      \"categoryId\": 6,\n      \"quantityPerUnit\": \"12 per box\",\n      \"unitPrice\": 44.99,\n      \"unitsInStock\": 50,\n      \"unitsOnOrder\": 20,\n      \"reorderLevel\": 10,\n      \"discontinued\": false\n    } \n    ```", "```cs\n    DELETE https://localhost:5081/api/products/78 \n    ```", "```cs\n    app.MapGet(\"/\", () => \"Hello World!\")\n     **.ExcludeFromDescription();** \n    ```", "```cs\n    using Microsoft.AspNetCore.HttpLogging; // To use HttpLoggingFields.\n    namespace Packt.Extensions;\n    public static class IServiceCollectionExtensions\n    {\n      public static IServiceCollection AddCustomHttpLogging(\n        this IServiceCollection services)\n      {\n        services.AddHttpLogging(options =>\n        {\n          // Add the Origin header so it will not be redacted.\n          options.RequestHeaders.Add(\"Origin\");\n          // By default, the response body is not included.\n          options.LoggingFields = HttpLoggingFields.All;\n        });\n        return services;\n      }\n    } \n    ```", "```cs\n    builder.Services.AddCustomHttpLogging(); \n    ```", "```cs\n    app.UseHttpLogging(); \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"Warning\"**,**\n    **// To enable logging HTTP requests, this must be**\n    **// set to Information (3) or higher.**\n    **\"Microsoft.AspNetCore.HttpLogging\"****:****\"Information\"**\n        }\n      }\n    } \n    ```", "```cs\n    \"applicationUrl\": \"https://localhost:5082\", \n    ```", "```cs\n    @{\n      ViewData[\"Title\"] = \"Products using JavaScript\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">@ViewData[\"Title\"]</h1>\n      <div>\n          Go to <a href=\"/home/products\">Products using .NET</a>\n      </div>\n      <div>\n        <input id=\"productName\" placeholder=\"Enter part of a product name\" />\n        <input id=\"getProductsButton\" type=\"button\" value=\"Get Products\" />\n      </div>\n      <div>\n        <table id=\"productsTable\" class=\"table\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Product Name</th>\n                </tr>\n            </thead>\n            <tbody id=\"tableBody\">\n            </tbody>\n        </table>\n      </div>\n      <script>\n        var baseaddress = \"https://localhost:5081/\";\n        function xhr_load() {\n            console.log(this.responseText);\n            var products = JSON.parse(this.responseText);\n            var out = \"\";\n            var i;\n            for (i = 0; i < products.length; i++) {\n                out += '<tr><td><a href=\"' + baseaddress + 'api/products/' + \n                    products[i].productId + '\">' +\n                    products[i].productName + '</a></td></tr>';\n            }\n            document.getElementById(\"tableBody\").innerHTML = out;\n        }\n        function getProductsButton_click() {\n            xhr.open(\"GET\", baseaddress + \"api/products/\" + \n              document.getElementById(\"productName\").value);\n            xhr.send();\n        }\n        document.getElementById(\"getProductsButton\")\n          .addEventListener(\"click\", getProductsButton_click);\n        var xhr = new XMLHttpRequest();\n        xhr.addEventListener(\"load\", xhr_load);\n      </script>\n    </div> \n    ```", "```cs\n    Access to XMLHttpRequest at 'https://localhost:5081/api/products/man' from origin 'https://localhost:5082' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n    GET https://localhost:5081/api/products/man net::ERR_FAILED 200 \n    ```", "```cs\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\n          Request:\n          Protocol: HTTP/2\n          Method: GET\n          Scheme: https\n          PathBase:\n          Path: /api/products/man\n          Accept: */*\n     **Host: localhost:5081**\n          User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36\n          Accept-Encoding: gzip, deflate, br\n          Accept-Language: en-US,en;q=0.9,sv;q=0.8\n     **Origin: https://localhost:5082**\n          Referer: [Redacted]\n          sec-ch-ua: [Redacted]\n          sec-ch-ua-mobile: [Redacted]\n          sec-ch-ua-platform: [Redacted]\n          sec-fetch-site: [Redacted]\n          sec-fetch-mode: [Redacted]\n          sec-fetch-dest: [Redacted] \n    ```", "```cs\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\n          Response:\n          StatusCode: 200\n          Content-Type: application/json; charset=utf-8\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[4]\n          ResponseBody: [{\"productId\":12,\"productName\":\n          \"Queso Manchego La Pastora\",\"supplierId\":5,\"categoryId\":4,\n          \"quantityPerUnit\":\"10 - 500 g pkgs.\",\"unitPrice\":38.0000,\n          \"unitsInStock\":86,\"unitsOnOrder\":0,\"reorderLevel\":0,\n          \"discontinued\":false,\"category\":null,\"supplier\":null,\n          \"orderDetails\":[]},\n          {\"productId\":51,\"productName\":\"Manjimup Dried Apples\",\n          \"supplierId\":24,\"categoryId\":7,\n          \"quantityPerUnit\":\"50 - 300 g pkgs.\",\"unitPrice\":53.0000,\n          \"unitsInStock\":20,\"unitsOnOrder\":0,\"reorderLevel\":10,\n          \"discontinued\":false,\"category\":null,\"supplier\":null,\n          \"orderDetails\":[]}] \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.EntityModels .SqlServer\\Northwind.Common.EntityModels.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using System.Net.Http.Headers; // To use MediaTypeWithQualityHeaderValue. \n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Northwind.WebApi.Service\",\n      configureClient: options =>\n      {\n        options.BaseAddress = new(\"https://localhost:5081/\");\n        options.DefaultRequestHeaders.Accept.Add(\n          new MediaTypeWithQualityHeaderValue(\n            \"application/json\", 1.0));\n      }); \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product. \n    ```", "```cs\n    private readonly ILogger<HomeController> _logger;\n    **private****readonly** **IHttpClientFactory _httpClientFactory;**\n    public HomeController(ILogger<HomeController> logger,\n      **IHttpClientFactory httpClientFactory**)\n    {\n      _logger = logger;\n     **_httpClientFactory = httpClientFactory;**\n    } \n    ```", "```cs\n    [Route(\"home/products/{name?}\")]\n    public async Task<IActionResult> Products(string? name)\n    {\n      HttpClient client = _httpClientFactory.CreateClient(\n        name: \"Northwind.WebApi.Service\");\n      HttpRequestMessage request = new(\n        method: HttpMethod.Get, requestUri: $\"api/products/{name}\");\n      HttpResponseMessage response = await client.SendAsync(request);\n      IEnumerable<Product>? model = await response.Content\n        .ReadFromJsonAsync<IEnumerable<Product>>();\n      ViewData[\"baseaddress\"] = client.BaseAddress;\n      return View(model);\n    } \n    ```", "```cs\n    @using Northwind.EntityModels\n    @model IEnumerable<Product>?\n    @{\n      ViewData[\"Title\"] = \"Products using .NET\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">@ViewData[\"Title\"]</h1>\n      <div>\n        Go to <a href=\"/\">Products using JavaScript</a>\n      </div>\n      <form action=\"/home/products\">\n        <input name=\"name\" placeholder=\"Enter part of a product name\" />\n        <input type=\"submit\" value=\"Get Products\" />\n      </form>\n      <div>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Product Name</th>\n            </tr>\n          </thead>\n          <tbody>\n            @if (Model is not null)\n            {\n              @foreach (Product p in Model)\n              {\n                <tr><td><a href=\"@(ViewData[\"baseaddress\"])api/products/\n    @p.ProductId\">@p.ProductName</a></td></tr>\n              }\n            }\n          </tbody>\n        </table>\n      </div>\n    </div> \n    ```", "```cs\n    {\"productId\":12,\"productName\":\"Queso Manchego La Pastora\",\n    \"supplierId\":5,\"categoryId\":4,\n    \"quantityPerUnit\":\"10 - 500 g pkgs.\",\"unitPrice\":38.0000,\n    \"unitsInStock\":86,\"unitsOnOrder\":0,\"reorderLevel\":0,\n    \"discontinued\":false,\"category\":null,\"supplier\":null,\"orderDetails\":[]} \n    ```", "```cs\n    public static IServiceCollection AddCustomCors(\n      this IServiceCollection services)\n    {\n      services.AddCors(options =>\n      {\n        options.AddPolicy(name: \"Northwind.Mvc.Policy\",\n          policy =>\n          {\n            policy.WithOrigins(\"https://localhost:5082\");\n          });\n      });\n      return services;\n    } \n    ```", "```cs\n    builder.Services.AddCustomCors(); \n    ```", "```cs\n    app.UseCors(policyName: \"Northwind.Mvc.Policy\"); \n    ```", "```cs\n    **//** app.UseCors(policyName: \"Northwind.Mvc.Policy\");\n    **// Without a named policy the middleware is added but not active.**\n    **app.UseCors();** \n    ```", "```cs\n    app.MapGet(\"api/products/{name}\", (\n      [FromServices] NorthwindContext db,\n      [FromRoute] string name) =>\n        db.Products.Where(p => p.ProductName.Contains(name)))\n      .WithName(\"GetProductsByName\")\n      .WithOpenApi()\n      .Produces<Product[]>(StatusCodes.Status200OK)\n     **.RequireCors(policyName:** **\"Northwind.Mvc.Policy\"****);** \n    ```", "```cs\n    <PackageReference Include=\"AspNetCoreRateLimit\" Version=\"5.0.0\" /> \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"Warning\",\n          \"Microsoft.AspNetCore.HttpLogging\": \"Information\"\n        }\n      }**,**\n    **\"ClientRateLimiting\"****:****{**\n    **\"EnableEndpointRateLimiting\"****:****false****,**\n    **\"StackBlockedRequests\"****:****false****,**\n    **\"ClientIdHeader\"****:****\"X-Client-Id\"****,**\n    **\"HttpStatusCode\"****:****429****,**\n    **\"EndpointWhitelist\"****:****[****\"get:/api/license\"****,****\"*:/api/status\"****],**\n    **\"ClientWhitelist\"****:****[****\"dev-id-1\"****,****\"dev-id-2\"****],**\n    **\"GeneralRules\"****:****[**\n    **{**\n    **\"Endpoint\"****:****\"*\"****,**\n    **\"Period\"****:****\"10s\"****,**\n    **\"Limit\"****:****2**\n    **},**\n    **{**\n    **\"Endpoint\"****:****\"*\"****,**\n    **\"Period\"****:****\"12h\"****,**\n    **\"Limit\"****:****100**\n    **}**\n    **]**\n    **},**\n    **\"ClientRateLimitPolicies\"****:****{**\n    **\"ClientRules\"****:****[**\n    **{**\n    **\"ClientId\"****:****\"console-client-abc123\"****,**\n    **\"Rules\"****:****[**\n    **{**\n    **\"Endpoint\"****:****\"*\"****,**\n    **\"****Period\"****:****\"10s\"****,**\n    **\"Limit\"****:****5**\n    **},**\n    **{**\n    **\"Endpoint\"****:****\"*\"****,**\n    **\"Period\"****:****\"12h\"****,**\n    **\"Limit\"****:****250**\n    **}**\n    **]**\n    **}**\n    **]**\n    **}**\n    } \n    ```", "```cs\n    using AspNetCoreRateLimit; // To use ClientRateLimitOptions and so on. \n    ```", "```cs\n    public static IServiceCollection AddCustomRateLimiting(\n      this IServiceCollection services, ConfigurationManager configuration)\n    {\n      // Add services to store rate limit counters and rules in memory.\n      services.AddMemoryCache();\n      services.AddInMemoryRateLimiting();\n      // Load default rate limit options from appsettings.json.\n      services.Configure<ClientRateLimitOptions>(\n        configuration.GetSection(\"ClientRateLimiting\"));\n      // Load client-specific policies from appsettings.json.\n      services.Configure<ClientRateLimitPolicies>(\n        configuration.GetSection(\"ClientRateLimitPolicies\"));\n      // Register the configuration.\n      services.AddSingleton\n        <IRateLimitConfiguration, RateLimitConfiguration>();\n      return services;\n    } \n    ```", "```cs\n    builder.Services.AddCustomRateLimiting(builder.Configuration); \n    ```", "```cs\n    services.AddHttpLogging(options =>\n    {\n      // Add the Origin header so it will not be redacted.\n      options.RequestHeaders.Add(\"Origin\");\n    **// Add the rate limiting headers so they will not be redacted.**\n     **options.RequestHeaders.Add(****\"X-Client-Id\"****);**\n     **options.ResponseHeaders.Add(****\"Retry-After\"****);**\n      // By default, the response body is not included.\n      options.LoggingFields = HttpLoggingFields.All;\n    }); \n    ```", "```cs\n    using AspNetCoreRateLimit; // To use IClientPolicyStore and so on. \n    ```", "```cs\n    public static async Task UseCustomClientRateLimiting(this WebApplication app)\n    {\n      using (IServiceScope scope = app.Services.CreateScope())\n      {\n        IClientPolicyStore clientPolicyStore = scope.ServiceProvider\n          .GetRequiredService<IClientPolicyStore>();\n        await clientPolicyStore.SeedAsync();\n      }\n      app.UseClientRateLimiting();\n    } \n    ```", "```cs\n    await app.UseCustomClientRateLimiting(); \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.EntityModels\n    .SqlServer\\Northwind.Common.EntityModels.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    partial class Program\n    {\n      private static void WriteInColor(string text, ConsoleColor foregroundColor)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = foregroundColor;\n        Write(text);\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product.\n    using System.Net.Http.Json; // To use ReadFromJsonAsync<T> method.\n    Write(\"Enter a client name or press Enter: \");\n    string? clientName = ReadLine();\n    if (string.IsNullOrEmpty(clientName))\n    {\n      clientName = $\"console-client-{Guid.NewGuid()}\";\n    }\n    WriteLine($\"X-Client-Id will be: {clientName}\");\n    HttpClient client = new();\n    client.BaseAddress = new(\"https://localhost:5081\");\n    client.DefaultRequestHeaders.Accept.Add(new(\"application/json\"));\n    // Specify the rate limiting client id for this console app.\n    client.DefaultRequestHeaders.Add(\"X-Client-Id\", clientName);\n    while (true)\n    {\n      WriteInColor(string.Format(\"{0:hh:mm:ss}: \", \n        DateTime.UtcNow), ConsoleColor.DarkGreen);\n      int waitFor = 1; // Second.\n      try\n      {\n        HttpResponseMessage response = await client.GetAsync(\"api/products\");\n        if (response.IsSuccessStatusCode)\n        {\n          Product[]? products = \n            await response.Content.ReadFromJsonAsync<Product[]>();\n          if (products != null)\n          {\n            foreach (Product product in products)\n            {\n              Write(product.ProductName);\n              Write(\", \");\n            }\n            WriteLine();\n          }\n        }\n        else\n        {\n          WriteInColor(string.Format(\"{0}: {1}\", (int)response.StatusCode,\n            await response.Content.ReadAsStringAsync()),\n            ConsoleColor.DarkRed);\n          WriteLine();\n        }\n      }\n      catch (Exception ex)\n      {\n        WriteLine(ex.Message);\n      }\n      await Task.Delay(TimeSpan.FromSeconds(waitFor));\n    } \n    ```", "```cs\n    Enter a client name or press Enter:\n    X-Client-Id will be: console-client-d54c61ba-66bb-4e39-9c1a-7af6e2bf647e\n    07:32:18: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:32:20: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:32:21: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:22: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:23: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:24: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:25: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:26: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:27: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:28: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:32:29: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:32:30: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:31: 429: API calls quota exceeded! maximum admitted 2 per 10s.\n    07:32:32: 429: API calls quota exceeded! maximum admitted 2 per 10s. \n    ```", "```cs\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\n          Request:\n          Protocol: HTTP/1.1\n          Method: GET\n          Scheme: https\n          PathBase:\n          Path: /api/products\n          Accept: application/json\n          Host: localhost:5081\n     **X-Client-Id: console-client-d54c61ba-66bb-4e39-9c1a-7af6e2bf647e**\n    info: AspNetCoreRateLimit.ClientRateLimitMiddleware[0]\n     **Request get:/api/products from ClientId console-client-d54c61ba-66bb-4e39-9c1a-7af6e2bf647e has been blocked, quota 2/10s exceeded by 3\\. Blocked by rule *, TraceIdentifier 0HMIKGNJQEK5P:0000000E. MonitorMode: False**\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\n          Response:\n          StatusCode: 429\n          Content-Type: text/plain\n          **Retry-After: 6**\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[4]\n          ResponseBody: API calls quota exceeded! maximum admitted 2 per 10s. \n    ```", "```cs\n    **string** **retryAfter = response.Headers**\n     **.GetValues(****\"Retry-After\"****).ToArray()[****0****];**\n    **if** **(****int****.TryParse(retryAfter,** **out** **waitFor))**\n    **{**\n     **retryAfter =** **string****.Format(**\n    **\"I will retry after {0} seconds.\"****, waitFor);**\n    **}**\n    WriteInColor(string.Format(\"{0}: {1} {2}\", (int)response.StatusCode,\n      await response.Content.ReadAsStringAsync(), retryAfter),\n      ConsoleColor.DarkRed); \n    ```", "```cs\n    Enter a client name:\n    X-Client-Id will be: console-client-add7613f-51a9-4c4a-8ec7-0244203d2e19\n    07:45:01: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:45:02: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:45:03: 429: API calls quota exceeded! maximum admitted 2 per 10s. I will retry after 8 seconds.\n    07:45:11: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:45:12: Chai, Chang, Aniseed Syrup, Chef Anton's Cajun Seasoning, Grandma's Boysenberry Spread, Uncle Bob's Organic Dried Pears, Northwoods Cranberry Sauce, Ikura, Queso Cabrales, Queso Manchego La Pastora,\n    07:45:13: 429: API calls quota exceeded! maximum admitted 2 per 10s. I will retry after 8 seconds. \n    ```", "```cs\n    info: AspNetCoreRateLimit.ClientRateLimitMiddleware[0]\n          Request get:/api/products from ClientId console-client-abc123 has been blocked, quota 5/10s exceeded by 1\\. Blocked by rule *, TraceIdentifier 0HMIKGS1TPSHJ:00000006\\. MonitorMode: False \n    ```", "```cs\n app.MapGet(\"/\", () => \"Hello World!\"); \n```", "```cs\n <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n **<PublishAot>****true****</PublishAot>** \n```", "```cs\n[JsonSerializable(typeof(Product)] // A single Product.\n[JsonSerializable(typeof(Product[]))] // An array of Products.\npublic partial class MyJsonSerializerContext : JsonSerializerContext { } \n```", "```cs\nbuilder.Services.ConfigureHttpJsonOptions(options =>\n{\n  options.SerializerOptions.AddContext<MyJsonSerializerContext>();\n}); \n```", "```cs\n        {\n          \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n          \"profiles\": {\n            \"http\": {\n              \"commandName\": \"Project\",\n              \"dotnetRunMessages\": true,\n              \"launchBrowser\": true,\n              \"launchUrl\": \"\",\n              \"applicationUrl\": \"http://localhost:**5083**\",\n              \"environmentVariables\": {\n                \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n              }\n            }\n          }\n        } \n        ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n      <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <InvariantGlobalization>**false**</InvariantGlobalization>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n     **<PublishAot>****true****</PublishAot>**\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference Include=****\"Microsoft.Data.SqlClient\"** **Version=****\"5.1.2\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    namespace Northwind.Models;\n    public class Product\n    {\n      public int ProductId { get; set; }\n      public string? ProductName { get; set; }\n      public decimal? UnitPrice { get; set; }\n    } \n    ```", "```cs\n    using System.Text.Json.Serialization; // To use JsonSerializerContext.\n    using Northwind.Models; // To use Product.\n    namespace Northwind.Serialization;\n    [JsonSerializable(typeof(Product))]\n    [JsonSerializable(typeof(List<Product>))]\n    internal partial class NorthwindJsonSerializerContext\n      : JsonSerializerContext { } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnection and so on.\n    using Northwind.Models; // To use Product.\n    using System.Data; // To use CommandType.\n    namespace Packt.Extensions;\n    public static class WebApplicationExtensions\n    {\n      public static WebApplication MapGets(this WebApplication app)\n      {\n        // app.MapGet(pattern, handler);\n        app.MapGet(\"/\", () => \"Hello from a native AOT minimal API web service.\");\n        app.MapGet(\"/products\", GetProducts);\n        app.MapGet(\"/products/{minimumUnitPrice:decimal?}\", GetProducts);\n        return app;\n      }\n      private static List<Product> GetProducts(decimal? minimumUnitPrice = null)\n      {\n        SqlConnectionStringBuilder builder = new();\n        builder.InitialCatalog = \"Northwind\";\n        builder.MultipleActiveResultSets = true;\n        builder.Encrypt = true;\n        builder.TrustServerCertificate = true;\n        builder.ConnectTimeout = 10; // Default is 30 seconds.\n        builder.DataSource = \".\"; // Local SQL Server\n        builder.IntegratedSecurity = true;\n        /*\n        // To use SQL Server Authentication:\n        builder.UserID = Environment.GetEnvironmentVariable(\"MY_SQL_USR\");\n        builder.Password = Environment.GetEnvironmentVariable(\"MY_SQL_PWD\");\n        builder.PersistSecurityInfo = false;\n        */\n        SqlConnection connection = new(builder.ConnectionString);\n        connection.Open();\n        SqlCommand cmd = connection.CreateCommand();\n        cmd.CommandType = CommandType.Text;\n        cmd.CommandText =\n          \"SELECT ProductId, ProductName, UnitPrice FROM Products\";\n        if (minimumUnitPrice.HasValue)\n        {\n          cmd.CommandText += \" WHERE UnitPrice >= @minimumUnitPrice\";\n          cmd.Parameters.AddWithValue(\"minimumUnitPrice\", minimumUnitPrice);\n        }\n        SqlDataReader r = cmd.ExecuteReader();\n        List<Product> products = new();\n        while (r.Read())\n        {\n          Product p = new()\n          {\n            ProductId = r.GetInt32(\"ProductId\"),\n            ProductName = r.GetString(\"ProductName\"),\n            UnitPrice = r.GetDecimal(\"UnitPrice\")\n          };\n          products.Add(p);\n        }\n        r.Close();\n        return products;\n      }\n    } \n    ```", "```cs\n    var builder = WebApplication.CreateSlimBuilder(args); \n    ```", "```cs\n    var sampleTodos = new Todo[]\n    {\n      new(1, \"Walk the dog\"),\n      new(2, \"Do the dishes\", DateOnly.FromDateTime(DateTime.Now)),\n      new(3, \"Do the laundry\", DateOnly.FromDateTime(DateTime.Now.AddDays(1))),\n      new(4, \"Clean the bathroom\"),\n      new(5, \"Clean the car\", DateOnly.FromDateTime(DateTime.Now.AddDays(2)))\n    };\n    var todosApi = app.MapGroup(\"/todos\");\n    todosApi.MapGet(\"/\", () => sampleTodos);\n    todosApi.MapGet(\"/{id}\", (int id) =>\n        sampleTodos.FirstOrDefault(a => a.Id == id) is { } todo\n            ? Results.Ok(todo)\n            : Results.NotFound()); \n    ```", "```cs\n    public record Todo(int Id, string? Title, DateOnly? DueBy = null, bool IsComplete = false);\n    [JsonSerializable(typeof(Todo[]))]\n    internal partial class AppJsonSerializerContext : JsonSerializerContext\n    {\n    } \n    ```", "```cs\n    **using** **Northwind.Serialization;**\n    **using** **Packt.Extensions;** **// To use MapGets().**\n    var builder = WebApplication.CreateSlimBuilder(args);\n    builder.Services.ConfigureHttpJsonOptions(options =>\n    {\n      options.SerializerOptions.TypeInfoResolverChain\n        .Insert(0, **NorthwindJsonSerializerContext**.Default);\n    });\n    var app = builder.Build();\n    **app.MapGets();**\n    app.Run(); \n    ```", "```cs\n    [{\"productId\":1,\"productName\":\"Chai\",\"unitPrice\":18.0000},\n     {\"productId\":2,\"productName\":\"Chang\",\"unitPrice\":19.0000},\n     {\"productId\":3,\"productName\":\"Aniseed Syrup\",\"unitPrice\":10.0000},\n     {\"productId\":4,\"productName\":\"Chef Anton's Cajun Seasoning\",\n      \"unitPrice\":22.0000},\n     {\"productId\":5,\"productName\":\"Chef Anton's Gumbo Mix\",\n      \"unitPrice\":21.3500},\n     {\"productId\":6,\"productName\":\"Grandma's Boysenberry Spread\",\n      \"unitPrice\":25.0000},\n     {\"productId\":7,\"productName\":\"Uncle Bob's Organic Dried Pears\",\n      \"unitPrice\":30.0000},\n     {\"productId\":8,\"productName\":\"Northwoods Cranberry Sauce\",\n      \"unitPrice\":40.0000},\n     {\"productId\":9,\"productName\":\"Mishi Kobe Niku\",\"unitPrice\":97.0000},\n     {\"productId\":10,\"productName\":\"Ikura\",\"unitPrice\":31.0000},\n     {\"productId\":11,\"productName\":\"Queso Cabrales\",\"unitPrice\":21.0000},\n     {\"productId\":12,\"productName\":\"Queso Manchego La Pastora\",\n      \"unitPrice\":38.0000}, \n    ```", "```cs\n    [{\"productId\":29,\"productName\":\"Thüringer Rostbratwurst\",\"unitPrice\":123.7900},{\"productId\":38,\"productName\":\"Côte de Blaye\",\"unitPrice\":263.5000}] \n    ```", "```cs\n    <PropertyGroup>\n      <TargetFramework>net8.0</TargetFramework>\n      ...\n     **<EmitCompilerGeneratedFiles>****true****</EmitCompilerGeneratedFiles>**\n    </PropertyGroup> \n    ```", "```cs\n    dotnet publish \n    ```", "```cs\n    Generating native code\n    C:\\Users\\markj\\.nuget\\packages\\microsoft.data.sqlclient\\5.1.1\\runtimes\\win\\lib\\net6.0\\Microsoft.Data.SqlClient.dll : warning IL2104: Assembly 'Microsoft.Data.SqlClient' produced trim warnings. For more information see https://aka.ms/dotnet-illink/libraries [C:\\apps-services-net8\\Chapter08\\Northwind.MinimalAot.Service\\Northwind.MinimalAot.Service.csproj]\n    /_/src/libraries/System.Data.Common/src/System/Data/DataTable.cs(6704): Trim analysis warning IL2026: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader): Using member 'System.Data.DataTable.ReadXmlSerializableInternal(XmlReader)' which has 'RequiresUnreferencedCodeAttribute' can break functionality when trimming application code. DataTable.ReadXml uses XmlSerialization underneath which is not trimming safe. Members from serialized types may be trimmed if not referenced directly. [C:\\apps-services-net8\\Chapter08\\Northwind.MinimalAot.Service\\Northwind.MinimalAot.Service.csproj] \n    ```", "```cs\n    dotnet publish \n    ```", "```cs\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\"\n                      Version=\"8.0.0\" /> \n    ```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    **builder.Services.AddAuthorization();**\n    **builder.Services.AddAuthentication(defaultScheme:** **\"Bearer\"****)**\n     **.AddJwtBearer();** \n    ```", "```cs\n    var app = builder.Build();\n    **app.UseAuthorization();** \n    ```", "```cs\n    using System.Security.Claims; // To use ClaimsPrincipal. \n    ```", "```cs\n    app.MapGet(\"/\", () => \"Hello World!\")\n      .ExcludeFromDescription();\n    **app.MapGet(****\"/secret\"****, (ClaimsPrincipal user) =>** \n    **string****.Format(****\"Welcome, {0}. The secret ingredient is love.\"****,**\n     **user.Identity?.Name ??** **\"secure user\"****))**\n     **.RequireAuthorization();** \n    ```", "```cs\n    dotnet user-jwts create \n    ```", "```cs\n    New JWT saved with ID 'd7e22000'.\n    Name: markjprice\n    Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Im1hcmtqcHJpY2UiLCJzdWIiOiJtYXJran...lci1qd3RzIn0.pGEbYKRjU98dEjxLSx7GAEm41LXMS0J80iIjuZbqrj4 \n    ```", "```cs\n    dotnet user-jwts print d7e22000 --show-all \n    ```", "```cs\n    Found JWT with ID 'd7e22000'.\n    ID: d7e22000\n    Name: markjprice\n    Scheme: Bearer\n    Audience(s): http://localhost:30225, https://localhost:44344, http://localhost:5080, https://localhost:5081\n    Not Before: 2023-09-26T10:58:18.0000000+00:00\n    Expires On: 2023-12-26T10:58:18.0000000+00:00\n    Issued On: 2023-09-26T10:58:19.0000000+00:00\n    Scopes: none\n    Roles: [none]\n    Custom Claims: [none]\n    Token Header: {\"alg\":\"HS256\",\"typ\":\"JWT\"}\n    Token Payload: {\"unique_name\":\"markjprice\",\"sub\":\"markjprice\",\"jti\":\"d7e22000\",\"aud\":[\"http://localhost:30225\",\"https://localhost:44344\",\"http://localhost:5080\",\"https://localhost:5081\"],\"nbf\":1664189898,\"exp\":1672052298,\"iat\":1664189899,\"iss\":\"dotnet-user-jwts\"}\n    Compact Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Im1hcmtqcHJpY2UiLCJzdWIiOiJtYXJranByaWNl...uZXQtdXNlci1qd3RzIn0.pGEbYKRjU98dEjxLSx7GAEm41LXMS0J80iIjuZbqrj4 \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"Warning\",\n          \"Microsoft.AspNetCore.HttpLogging\": \"Information\"\n        }\n      },\n    **\"Authentication\"****:****{**\n    **\"Schemes\"****:****{**\n    **\"Bearer\"****:****{**\n    **\"ValidAudiences\"****:****[**\n    **\"http://localhost:30225\"****,**\n    **\"https://localhost:44344\"****,**\n    **\"****http://localhost:5080\"**\n    **\"https://localhost:5081\"**\n    **],**\n    **\"ValidIssuer\"****:****\"dotnet-user-jwts\"**\n    **}**\n    **}**\n    **}**\n    } \n    ```", "```cs\n    ### Get the secret ingredient.\n    GET https://localhost:5081/secret/\n    Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Im1hcmtqcHJpY2UiLCJzdWIiOiJtYXJranByaWNl...uZXQtdXNlci1qd3RzIn0.pGEbYKRjU98dEjxLSx7GAEm41LXMS0J80iIjuZbqrj4 \n    ```", "```cs\n    Welcome, secure user. The secret ingredient is love. \n    ```"]