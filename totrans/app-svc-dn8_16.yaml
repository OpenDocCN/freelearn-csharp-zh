- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Mobile and Desktop Apps Using .NET MAUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about learning how to make **graphical user interface** (**GUI**)
    apps by building a cross-platform mobile and desktop app for iOS and Android,
    macOS Catalyst, and Windows using **.NET MAUI** (**Multi-platform App UI**). According
    to the MAUI team, there are no breaking API changes between .NET 7 and .NET 8\.
    They focused primarily on fixing bugs and improving performance.
  prefs: []
  type: TYPE_NORMAL
- en: You will see how **eXtensible Application Markup Language** (**XAML**) makes
    it easy to define the **user interface** (**UI**) for a graphical app. XAML is
    pronounced “zamel.”
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform GUI development cannot be learned in only a hundred or so pages,
    but I want to introduce you to some of what is possible. Think of this .NET MAUI
    chapter and the additional online-only sections as an introduction that will give
    you a taste to inspire you, and then you can learn more from a book dedicated
    to mobile or desktop development.
  prefs: []
  type: TYPE_NORMAL
- en: The app will allow the listing and management of customers in the Northwind
    database. The mobile app that you create will call an ASP.NET Core Minimal APIs
    web service. We will start building it in this chapter and then continue building
    the app in the online-only section, *Implementing Model-View-ViewModel for .NET
    MAUI*, which you will find in the exercises at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A Windows computer with Visual Studio 2022 version 17.8 or later, or any operating
    system with Visual Studio Code and the `dotnet` CLI or JetBrains Rider, can be
    used to create a .NET MAUI project. But you will need a computer with Windows
    to compile WinUI 3 apps, and you will need a computer with macOS and Xcode to
    compile for macOS Catalyst and iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding XAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding .NET MAUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building mobile and desktop apps using .NET MAUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using shared resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding XAML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start by looking at the markup language used by .NET MAUI.
  prefs: []
  type: TYPE_NORMAL
- en: In 2006, Microsoft released **Windows Presentation Foundation** (**WPF**), which
    was the first technology to use XAML. Silverlight, for web and mobile apps, quickly
    followed, but it is no longer supported by Microsoft. WPF is still used today
    to create Windows desktop applications; for example, Visual Studio 2022 is partially
    built using WPF.
  prefs: []
  type: TYPE_NORMAL
- en: 'XAML can be used to build parts of the following apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**.NET MAUI apps** for mobile and desktop devices, including Android, iOS,
    Windows, and macOS. It is an evolution of a technology named **Xamarin.Forms**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WinUI 3 apps** for Windows 10 and 11.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal Windows Platform (UWP) apps** for Windows 10 and 11, Xbox, Mixed
    Reality, and Meta Quest VR headsets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPF apps** for Windows desktop, including Windows 7 and later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avalonia** and **Uno Platform apps** using cross-platform third-party technologies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifying code using XAML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: XAML simplifies C# code, especially when building a UI.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you need two or more pink buttons laid out horizontally to create
    a toolbar, which execute a method for their implementation when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'In C#, you might write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In XAML, this could be simplified to the following lines of code. When this
    XAML is processed, the equivalent properties are set, and methods are called to
    achieve the same goal as the preceding C# code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can think of XAML as an alternative and easier way of declaring and instantiating
    .NET types, especially when defining a UI and the resources that it uses.
  prefs: []
  type: TYPE_NORMAL
- en: XAML allows resources like brushes, styles, and themes to be declared at different
    levels, like a UI element or a page, or globally for the application to enable
    resource sharing.
  prefs: []
  type: TYPE_NORMAL
- en: XAML allows data binding between UI elements or between UI elements and objects
    and collections.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you choose to use XAML to define your UI and related resources at compile
    time, then the code-behind file must call the `InitializeComponent` method in
    the page constructor, as shown highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Calling the `InitializeComponent` method tells the page to read its XAML, create
    the controls defined in it, and set their properties and event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI namespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '.NET MAUI has several important namespaces where its types are defined, as
    shown in *Table 16.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Namespace** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Microsoft.Maui` | Utility types like `FlowDirection`, `IButton`, `IImage`,
    and `Thickness`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Microsoft.Maui.Controls` | Common controls, pages, and related types like
    `Application`, `Brush`, `Button`, `CheckBox`, `ContentPage`, `Image`, and `VerticalStackPanel`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Microsoft.Maui.Graphics` | Types for graphics like `Color`, `Font`, `ImageFormat`,
    `PathBuilder`, `Point`, and `Size`. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 16.1: Important MAUI namespaces'
  prefs: []
  type: TYPE_NORMAL
- en: To import a namespace using XAML, in the root element you add `xmlns` attributes.
    One namespace is imported as the default, and others must be named using a prefix.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, .NET MAUI types are imported by default, so the element names
    do not need a prefix; general XAML syntax is imported using the `x` prefix for
    doing common things like naming a control or the class name that the XAML will
    be compiled as. Your project types are often imported using the `local` prefix,
    as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, the project is named `MyMauiApp` and its controls like
    the `CustomerList` control are defined in a namespace named `MyMauiApp.Controls`.
    This namespace has been registered with the prefix `local`, so when an instance
    of the `CustomerList` control is needed, it is declared using `<local:CustomerList>`.
  prefs: []
  type: TYPE_NORMAL
- en: You can import as many namespaces with different prefixes as you need.
  prefs: []
  type: TYPE_NORMAL
- en: Type converters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Type converters convert XAML attribute values that must be set as `string`
    values into other types. For example, the following button has its `Background`
    property set to the `string` value `"Pink"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is converted into a `SolidColorBrush` instance using a type converter,
    as shown in the following equivalent code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There are many type converters provided by .NET MAUI and you can create and
    register your own. These are especially useful for custom data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between .NET MAUI controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are lots of predefined controls that you can choose from for common UI
    scenarios. .NET MAUI (and most dialects of XAML) support these controls, as shown
    in *Table 16.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Controls** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Button`, `ImageButton`, `MenuItem`, `ToolbarItem` | Executing actions |'
  prefs: []
  type: TYPE_TB
- en: '| `CheckBox`, `RadioButton`, `Switch` | Choosing options |'
  prefs: []
  type: TYPE_TB
- en: '| `DatePicker`, `TimePicker` | Choosing dates and times |'
  prefs: []
  type: TYPE_TB
- en: '| `CollectionView`, `ListView`, `Picker`, `TableView` | Choosing items from
    lists and tables |'
  prefs: []
  type: TYPE_TB
- en: '| `CarouselView`, `IndicatorView` | Scrolling animated views that show one
    item at a time |'
  prefs: []
  type: TYPE_TB
- en: '| `AbsoluteLayout`, `BindableLayout`, `FlexLayout`, `Grid`, `HorizontalStackLayout`,
    `StackLayout`, `VerticalStackLayout` | Layout containers that affect their children
    in different ways |'
  prefs: []
  type: TYPE_TB
- en: '| `Border`, `BoxView`, `Frame`, `ScrollView` | Visual elements |'
  prefs: []
  type: TYPE_TB
- en: '| `Ellipse`, `Line`, `Path`, `Polygon`, `Polyline`, `Rectangle`, `RoundRectangle`
    | Graphical elements |'
  prefs: []
  type: TYPE_TB
- en: '| `ActivityIndicator`, `Label`, `ProgressBar`, `RefreshView` | Displaying read-only
    text and other read-only displays |'
  prefs: []
  type: TYPE_TB
- en: '| `Editor`, `Entry` | Editing text |'
  prefs: []
  type: TYPE_TB
- en: '| `GraphicsView`, `Image` | Embedding images, videos, and audio files |'
  prefs: []
  type: TYPE_TB
- en: '| `Slider`, `Stepper` | Selecting within ranges of numbers |'
  prefs: []
  type: TYPE_TB
- en: '| `SearchBar` | Adding a search feature |'
  prefs: []
  type: TYPE_TB
- en: '| `BlazorWebView`, `WebView` | Embedding Blazor and web components |'
  prefs: []
  type: TYPE_TB
- en: '| `ContentView` | Building custom controls |'
  prefs: []
  type: TYPE_TB
- en: 'Table 16.2: MAUI user interface controls'
  prefs: []
  type: TYPE_NORMAL
- en: '.NET MAUI defines its controls in the `Microsoft.Maui.Controls` namespace.
    It has some specialized controls too:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Application`: Represents a cross-platform graphical application. It sets the
    root page, manages windows, themes, and resources, and provides app-level events
    like `PageAppearing`, `ModalPushing`, and `RequestedThemeChanged`. It also has
    methods that you can override to hook into app events like `OnStart`, `OnSleep`,
    `OnResume`, and `CleanUp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shell`: A `Page` control that provides UI features that most applications
    require, like flyout or tab bar navigation, navigation tracking and management,
    and navigation events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most .NET MAUI controls derive from `View`. One of the most important characteristics
    of a `View`-derived type is that they can be nested. This allows you to build
    complex custom user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Markup extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To support some advanced features, XAML uses markup extensions. Some of the
    most important enable element and data binding and the reuse of resources, as
    shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{Binding}` links an element to a value from another element or a data source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{OnPlatform}` sets properties to different values depending on the current
    platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{StaticResource}` and `{DynamicResource}` link an element to a shared resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{AppThemeBinding}` links an element to a shared resource defined in a theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.NET MAUI provides the `OnPlatform` markup extension to allow you to set different
    markup depending on the platform. For example, iPhone X and later introduced the
    notch that takes up extra space at the top of the phone display. We could add
    extra padding to an app that applies to all devices, but it would be better if
    we could add that extra padding only to iOS, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a simplified syntax too, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Understanding .NET MAUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a mobile app that only needs to run on iPhones, you might choose to
    build it with either the Objective-C or Swift language and the UIkit libraries
    using the Xcode development tool.
  prefs: []
  type: TYPE_NORMAL
- en: To create a mobile app that only needs to run on Android phones, you might choose
    to build it with either the Java or Kotlin language and the Android SDK libraries
    using the Android Studio development tool.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you need to create a mobile app that can run on iPhones *and* Android
    phones? And what if you only want to create that mobile app once using a programming
    language and development platform that you are already familiar with? And what
    if you realized that with a bit more coding effort to adapt the UI to desktop-size
    devices, you could target macOS and Windows desktops too?
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI enables developers to build cross-platform mobile apps for Apple iOS
    (iPhone), iPadOS, macOS using Catalyst, Windows using WinUI 3, and Google Android
    using C# and .NET, which are then compiled to native APIs and executed on native
    phone and desktop platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Business logic layer code can be written once and shared between all platforms.
    UI interactions and APIs are different on various mobile and desktop platforms,
    so the UI layer is sometimes custom for each platform.
  prefs: []
  type: TYPE_NORMAL
- en: Like WPF and UWP apps, .NET MAUI uses XAML to define the UI once for all platforms
    using abstractions of platform-specific UI components. Applications built with
    .NET MAUI draw the UI using native platform widgets, so the app’s look and feel
    fits naturally with the target mobile platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'A user experience built using .NET MAUI will not perfectly fit a specific platform
    in the same way that one custom built with native tools for that platform would,
    but for mobile and desktop apps that will not have millions of users, it is good
    enough. With some effort, you can build beautiful apps, as illustrated by the
    Microsoft challenge that you can read about at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/](https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/)'
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI and Xamarin support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Major versions of .NET MAUI ship with .NET starting with .NET 7 but as an optional
    workload. This means that .NET MAUI does not follow the same **Short Term Support**
    (**STS**)/**Long Term Support** (**LTS**)as the main .NET platform. Every version
    of .NET MAUI only has 18 months of support, so .NET MAUI effectively is always
    an STS release, and this includes the .NET MAUI version that ships as a workload
    with .NET 8.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI has dependencies on other OSes like iOS and macOS so it gets complicated.
    Major versions of iOS usually release in September, and major versions of iPadOS
    and macOS often release later in October or November. This does not give the .NET
    MAUI team much time to make sure their platform works well with those operating
    systems before a major version of .NET is released in early November.
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning!** Xamarin reaches its **end-of-life** (**EOL**) on May 1, 2024 so
    any Xamarin and Xamarin.Forms projects should migrate to .NET MAUI or an alternative
    like Avalonia or Uno before then.'
  prefs: []
  type: TYPE_NORMAL
- en: Development tools for mobile first, cloud first
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mobile apps are often supported by services in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Satya Nadella, CEO of Microsoft, famously said the following:'
  prefs: []
  type: TYPE_NORMAL
- en: To me, when we say mobile first, it’s not the mobility of the device, it’s actually
    the mobility of the individual experience. [...] The only way you are going to
    be able to orchestrate the mobility of these applications and data is through
    the cloud.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When installing Visual Studio 2022, you must select the **.NET Multi-platform
    App UI development** workload, which is in the **Desktop & Mobile** section, as
    shown in *Figure 16.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19587_16_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.1: Selecting the .NET MAUI workload for Visual Studio 2022'
  prefs: []
  type: TYPE_NORMAL
- en: Installing .NET MAUI workloads manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Visual Studio 2022 should install the required .NET MAUI workloads
    if you selected them. If not, then you can make sure that the workloads are installed
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see which workloads are currently installed, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The currently installed workloads will appear in a table, as shown in the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To see which workloads are available to install, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The currently available workloads will appear in a table, as shown in the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the .NET MAUI workloads for all platforms, enter the following command
    at the command line or terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To update all existing workload installations, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To add missing workload installations required for a project, in the folder
    containing the project file, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Over time you are likely to install multiple versions of workloads related
    to different versions of .NET SDKs. Before .NET 8, developers tried to manually
    delete workload folders, which can cause problems. Introduced with .NET 8 is a
    new feature to remove leftover and unneeded workloads, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**More Information**: If you want to use Visual Studio 2022 to create an iOS
    mobile app or a macOS Catalyst desktop app, then you can connect over a network
    to a **Mac build host**. Instructions can be found at the following link: [https://learn.microsoft.com/en-us/dotnet/maui/ios/pair-to-mac](https://learn.microsoft.com/en-us/dotnet/maui/ios/pair-to-mac).'
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI user interface component categories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '.NET MAUI includes some common controls for building user interfaces. They
    can be divided into four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pages** represent cross-platform application screens, for example, `Shell`,
    `ContentPage`, `NavigationPage`, `FlyoutPage`, and `TabbedPage`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layouts** represent the structure of a combination of other UI components,
    for example, `Grid`, `StackLayout`, and `FlexLayout`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Views** represent a single user interface component, for example, `CarouselView`,
    `CollectionView`, `Label`, `Entry`, `Editor`, and `Button`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cells** represent a single item in a list or table view, for example, `TextCell`,
    `ImageCell`, `SwitchCell`, and `EntryCell`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shell control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Shell` control is designed to simplify app development by providing standardized
    navigation and search capabilities. In your project, you would create a class
    that inherits from the `Shell` control class. Your derived class defines components
    like a `TabBar`, which contains `Tab` items, `FlyoutItem` instances, and `ShellContent`,
    which contain the `ContentPage` instances for each page. A `TabBar` should be
    used when there are only up to about four or five pages to navigate between. `FlyoutItem`
    navigation should be used when there are more items because they can be presented
    as a vertical scrollable list. You can use both, with the `TabBar` showing a subset
    of items. The `Shell` will keep them synchronized.
  prefs: []
  type: TYPE_NORMAL
- en: Flyout navigation is when a list of items flies out (or slides) from the left
    side of a mobile device’s screen or desktop app’s main window. The user invokes
    it by tapping on a “hamburger” icon with three horizontal lines stacked on top
    of each other. When the user taps a flyout item, its page is instantiated when
    needed, as the user navigates around the UI.
  prefs: []
  type: TYPE_NORMAL
- en: The top bar automatically shows a **Back** button when needed to allow the user
    to navigate back to a previous page.
  prefs: []
  type: TYPE_NORMAL
- en: ListView control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ListView` control is used for long lists of data-bound values of the same
    type. It can have headers and footers and its list items can be grouped.
  prefs: []
  type: TYPE_NORMAL
- en: 'It has cells to contain each list item. There are two built-in cell types:
    text and image. Developers can define custom cell types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cells can have context actions that appear when the cell is swiped on an iPhone,
    long-pressed on Android, or right-clicked on a desktop OS. A context action that
    is destructive can be shown in red, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Entry and Editor controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Entry` and `Editor` controls are used for editing text values and are
    often data-bound to an entity model property, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Good Practice**: Use `Entry` for a single line of text. Use `Editor` for
    multiple lines of text.'
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI handlers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In .NET MAUI, XAML controls are defined in the `Microsoft.Maui.Controls` namespace.
    Components called **handlers** map these common controls to native controls on
    each platform. On iOS, a handler will map a .NET MAUI `Button` to an iOS-native
    `UIButton` defined by UIkit. On macOS, `Button` is mapped to `NSButton` defined
    by AppKit. On Android, `Button` is mapped to an Android-native `AppCompatButton`.
  prefs: []
  type: TYPE_NORMAL
- en: Handlers have a `NativeView` property that exposes the underlying native control.
    This allows you to work with platform-specific features like properties, methods,
    and events, and customize all instances of a native control.
  prefs: []
  type: TYPE_NORMAL
- en: Writing platform-specific code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to write code statements that only execute for a specific platform
    like Android, then you can use compiler directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, by default, `Entry` controls on Android show an underline character.
    If you want to hide the underline, you could write some Android-specific code
    to get the handler for the `Entry` control, use its `NativeView` property to access
    the underlying native control, and then set the property that controls that feature
    to `false`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Predefined compiler constants include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__ANDROID__`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__IOS__`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WINDOWS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The compiler `#if` statement syntax is slightly different from the C# `if`
    statement syntax, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have been introduced to some of the important concepts around MAUI
    apps, and you’ve set up the additional components needed for MAUI, let’s get practical
    and build a MAUI project.
  prefs: []
  type: TYPE_NORMAL
- en: Building mobile and desktop apps using .NET MAUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will build a mobile and desktop app for managing customers in Northwind.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: If you have a Mac and you have never run Xcode on it, then
    run it now until you see the *Start* window. This will ensure that all its required
    components are installed and registered. If you do not do this, then you might
    get errors with your projects later.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a virtual Android device for local app testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To target Android, you must install at least one Android SDK. A default installation
    of Visual Studio 2022 with the mobile development workload already includes one
    Android SDK, but it is often an older version designed to support as many Android
    devices as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the latest features of .NET MAUI, you must configure a more recent Android
    virtual device:'
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, start **Visual Studio 2022**. If you see the modal dialog box **Welcome
    Experience**, then click **Continue without code**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Tools** | **Android** | **Android Device Manager**. If you are
    prompted by **User Account Control** to allow this app to make changes to your
    device, click **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Android Device Manager**, click the **+ New** button to create a new
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the dialog box, make the following choices, as shown in *Figure 16.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Base Device**: **Pixel 5**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processor**: **x86_64**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS**: **Android 13.0 – API 33**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google APIs**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play Store**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.2: Selecting the hardware and OS for a virtual Android device'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept any license agreements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for any required downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Android Device Manager**, in the list of devices, in the row for the device
    that you just created, click **Start**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be patient! It can take a few minutes for the emulator to start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the Android device has finished starting, click the Chrome browser and
    test that it has access to the network by navigating to [https://www.bbc.co.uk/news](https://www.bbc.co.uk/news).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close **Android Device Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart Visual Studio 2022 to ensure that it is aware of the new emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling Windows developer mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create apps for Windows, you must enable developer mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Start** **|** **Settings** **|** **Privacy & security** **|**
    **For developers**, and then switch on **Developer Mode**. (You can also search
    for “developers”.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the warning about how it “**could expose your device and personal data
    to security risk or harm your device**e.”
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Settings** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a .NET MAUI project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now create a project for a cross-platform mobile and desktop app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio 2022, add a new project, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **.NET MAUI App** / `maui`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can select **C#** for the language and **MAUI** for the project type to
    filter and show only the appropriate project templates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Maui.Client`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter16`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, if you see a Windows security alert that **Windows Defender Firewall
    has blocked some features of Broker on all public and private networks**, then
    select **Private networks** and clear **Public networks**, and then click the
    **Allow access** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the project file, note the element that targets iOS, Android, and Mac Catalyst,
    and the element to enable Windows targeting if the operating system is Windows,
    as well as the elements that set the project to be a single MAUI project, as shown
    highlighted in the following partial markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you see the error `Error NU1012 Platform version is not present for one
    or more target frameworks, even though they have specified a platform: net8.0-ios,
    net8.0-maccatalyst`, then at the command prompt or terminal, in the project folder,
    restore workloads for the project, as shown in the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To the right of the **Run** button in the toolbar, set **Framework** to **net8.0-android**,
    and select the **Pixel 5 - API 33 (Android 13.0 - API 33)** emulator image that
    you previously created, as shown in *Figure 16.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.3: Selecting an Android device as the target for startup'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Run** button in the toolbar and wait for the device emulator to
    start the Android operating system, and then deploy and launch your mobile app.
    This can take more than five minutes, especially the first time that you build
    a new MAUI project. Keep an eye on the Visual Studio 2022 status bar, as shown
    in *Figure 16.4*:![](img/B19587_16_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.4: Status bar shows progress of the .NET MAUI app deployment'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you’re doing this for the first time, there might be another Google license
    agreement to confirm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the .NET MAUI app, click the **Click me** button to increment the counter
    three times, as shown in *Figure 16.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.5: Incrementing the counter three times in the .NET MAUI app on Android'
  prefs: []
  type: TYPE_NORMAL
- en: Close the Android device emulator. You do not need to power down the emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To the right of the **Run** button in the toolbar, set **Framework** to **net8.0-windows10.0.19041.0**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the **Debug** configuration is selected and then click the solid
    green triangle **Start** button labeled **Windows Machine**. You might see a warning
    about missing packages that should be installed on the first run. Just click the
    **start** button a second time and they should now be installed and it will work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a few moments, note that the Windows app displays with the same **Click
    me** button and counter functionality as shown in *Figure 16.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.6: The same .NET MAUI app on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Close the Windows app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: You should test your .NET MAUI app on all the potential
    devices that it will need to run on. In this chapter, even if I do not explicitly
    tell you to do so, I recommend that you try the app by running it on your emulated
    Android device and on Windows after each task to add a new feature. That way,
    you will have at least seen how it looks on a mobile device with a primarily tall
    and thin portrait size, and on a desktop device with a larger landscape size.
    If you are using a Mac, then I recommend that you test it in the iOS Simulator,
    Android Emulator, and as a Mac Catalyst desktop app.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding shell navigation and more content pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s review the existing structure of the .NET MAUI app and then add
    some new pages and navigation to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Maui.Client` project, in `MauiProgram.cs`, note that the
    `builder` object calls `UseMauiApp` and specifies `App` as its generic type, as
    shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In **Solution Explorer**, expand `App.xaml`, open `App.xaml.cs`, and note the
    `MainPage` property of the `App` is set to an instance of `AppShell`, as shown
    highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `AppShell.xaml`, note that the shell disables flyout mode and only has a
    single content page named `MainPage`, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A shell with only one content page does not show any navigation. You must have
    at least two shell content items.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Resources` folder, in the `Images` folder, add images for some icons
    that we will use for flyout items in the navigation we are about to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can download the images from the GitHub repository at the following link:
    [https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter16/Northwind.Maui.Client/Resources/Images](https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter16/Northwind.Maui.Client/Resources/Images).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `AppShell.xaml`, enable flyout mode, set the background to a pale blue color,
    add an icon for the `MainPage` content, add a flyout header, and then add some
    flyout items with more shell content, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see warnings on some of the `ContentTemplate` lines about missing pages
    because we have not created them yet. `AliceBlue` looks good in light mode, but
    if your operating system uses dark mode, then you might prefer an alternative
    color like `#75858a`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Visual Studio 2022, right-click the `Northwind.Maui.Client` project folder,
    choose **Add** | **New Item...** or press *Ctrl* + *Shift* + *A*, select **.NET
    MAUI** in the template types tree, select **.NET MAUI ContentPage (XAML)**, enter
    the name `SettingsPage`, and click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visual Studio Code and JetBrains Rider do not have project item templates for
    MAUI. You can create this item using the CLI, as shown in the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Repeat the previous step to add content pages named:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CategoriesPage`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CustomersPage`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CustomerDetailPage`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmployeesPage`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProductsPage`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In **Solution Explorer**, double-click on the `CategoriesPage.xaml` file to
    open it for editing. Note that Visual Studio 2022 does not yet have a graphical
    design view for XAML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `<ContentPage>` element, change the `Title` to `Categories`, and in
    the `<Label>` element, change the `Text` to `Categories`, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to **View** | **Toolbox** or press *Ctrl* + *W*, *X*. Note that the
    toolbox has sections for **Controls****,** **Layouts**, **Cells**, and **General**.
    If you are using a code editor without a toolbox, you can just type the markup
    instead of using the toolbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the toolbox is a search box. Enter the letter `b`, and then note
    that the list of controls is filtered to show controls like **Button**, **ProgressBar**,
    and **AbsoluteLayout**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag and drop the **Button** control from the toolbox into the XAML markup
    after the existing `<Label>` control, before the closing element of the `VerticalStackLayout`,
    and change its `Text` property to `Hello!`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the startup to **Windows Machine** and then start the `Northwind.Maui.Client`
    project with debugging. Note that the Visual Studio status bar shows us that **XAML
    Hot Reload** is connected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-left corner of the app, click the flyout menu (the “hamburger” icon),
    and note the header and the images used for the icons in the flyout items, as
    shown in *Figure 16.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.7: A flyout with image icons'
  prefs: []
  type: TYPE_NORMAL
- en: In the flyout menu, click **Categories**, and note that the text on the button
    says **Hello!** and that it stretches across the width of the app window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave the app running, and then in Visual Studio 2022, change the `Text` property
    to `Click Me`, add an attribute to set the `WidthRequest` property to `100`, and
    note that the **XAML Hot Reload** feature automatically reflects the changes in
    the app itself, as shown in *Figure 16.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.8: XAML Hot Reload automatically updating changes in the XAML in
    the live app'
  prefs: []
  type: TYPE_NORMAL
- en: Close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `Button` element to give it the name of `ClickMeButton` and a new
    event handler for its `Clicked` event, as shown in *Figure 16.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.9: Adding an event handler to a control'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the event handler name and select **Go To Definition** or press
    *F12*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a statement to the event handler method that sets the content of the button
    to the current time, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Maui.Client` project on at least one mobile device and
    one desktop device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: When deploying to an Android emulator or an iOS simulator,
    the old version of the app could still be running. Make sure to wait for the deployment
    of the new version of your app before interacting with it. You can keep an eye
    on the Visual Studio status bar to track the deployment progress or just wait
    until you see the message **XAML Hot Reload connected**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **Categories**, click the button, and note that its text label changes
    to the current time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing more content pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s implement some of the new pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `EmployeesPage.xaml`, change the `Title` to `Employees` and add markup to
    define the UI for a simple calculator, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event handler for the page’s `Loaded` event, as shown highlighted in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `EmployeesPage.xaml.cs`, add statements to resize each button in the grid
    and hook up an event handler for the `Clicked` event, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Button_Clicked` method, with statements to handle the clicked button
    by concatenating the text of the button to the output label, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is not a proper implementation for a calculator because the operations
    have not been implemented. It just simulates one for now because we are focusing
    on how to build UIs with .NET MAUI. You can Google how to implement a simple calculator
    as an optional exercise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.Maui.Client` project with at least one desktop and one
    mobile device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **Employees**, click some of the buttons, and note that the label
    updates to show what is clicked, as shown on an emulated Android device in *Figure
    16.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.10: A simulated calculator on an emulated Android'
  prefs: []
  type: TYPE_NORMAL
- en: Close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By now, we have built a few simple UIs using XAML and MAUI. Next, let’s see
    some techniques to improve apps, like defining and sharing resources.
  prefs: []
  type: TYPE_NORMAL
- en: Using shared resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When building graphical UIs, you will often want to use a resource, such as
    a brush to paint the background of controls or an instance of a class to perform
    custom conversions. Resources can be defined at the following levels and shared
    with everything at that level or lower:'
  prefs: []
  type: TYPE_NORMAL
- en: Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining resources to share across an app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A good place to define shared resources is at the app level, so let’s see how
    to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `Northwind.xaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visual Studio Code and JetBrains Rider do not have project item templates for
    MAUI. You can create this item using the CLI, as shown in the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add markup inside the existing `ResourceDictionary` element to define a linear
    gradient brush with a key of `Rainbow`, as shown highlighted in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `App.xaml`, add an entry to the merged resource dictionaries to reference
    the resource file in the `Styles` folder named `Northwind.xaml`, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Referencing shared resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can reference the shared resource:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `CategoriesPage.xaml`, modify the `ContentPage` to set its background to
    the brush resource with the key of `Rainbow`, as shown highlighted in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`StaticResource` means the resource is read once when the app first starts.
    If the resource changes after that, any elements that reference it will not be
    updated.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.Maui.Client` project with debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Categories** and note that the background of the page is a rainbow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing shared resources dynamically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can implement a settings page to allow the user to change between light
    mode, dark mode, or system mode used in the UI at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `LightDarkModeColors.xaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add markup inside the existing `ResourceDictionary` element to define sets
    of suitable colors for light and dark mode, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `DarkModeTheme.xaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add markup inside the existing `ResourceDictionary` element to define styles
    to use in dark mode, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `LightModeTheme.xaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add markup inside the existing `ResourceDictionary` element to define styles
    to use in light mode, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `SystemModeTheme.xaml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add markup inside the existing `ResourceDictionary` element to define styles
    to use with light and dark mode depending on how the operating system has had
    its option set, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the use of the `AppThemeBinding` extension to dynamically bind to two pre-defined
    special filters, `Light` and `Dark`. These are bound to system modes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `App.xaml`, add the light and dark mode colors and system theme resources,
    as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: The `SystemModeTheme.xaml` resources file references colors
    defined in the `LightDarkModelColors.xaml` file, so the order is important.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the project, create a folder named `Controls`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Controls` folder, add a class file named `ThemeEnum.cs`, and define
    an `enum` type with three values: `System`, `Light`, and `Dark`, for selecting
    themes, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controls` folder, add a class file named `EnumPicker.cs`, and define
    a class that inherits from the `Picker` control that can be bound to any `enum`
    type and show a dropdown list of its values, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `SettingsPage.xaml`, import a `local` namespace for using our custom `EnumPicker`
    control, an `ios` namespace for adding a special property that only applies to
    iOS apps, change the `Title` to `Settings`, and create an instance of `EnumPicker`
    for selecting a theme, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `SettingsPage.xaml.cs`, add statements to handle the events for the picker,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Maui.Client` project with at least one desktop and mobile
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that the colors and shape of the button on the home page are in light
    mode, as shown on a **Window** machine in *Figure 16.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.11: Light mode button on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave the app running, start the Windows **Settings** app, navigate to **Personalization**
    | **Colors**, and in the **Choose your mode** section, select **Dark**, as shown
    in *Figure 16.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.12: Switching the system color mode in Windows Settings'
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave **Settings** open, switch back to the app, and note that it has dynamically
    switched to dark mode colors, as shown in *Figure 16.13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.13: Dark mode in our app'
  prefs: []
  type: TYPE_NORMAL
- en: Close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Settings**, switch back to **Light** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: A resource can be an instance of any object. To share it
    within an application, define it in the `App.xaml` file and give it a unique key.
    To set an element’s property with a resource once when the app first starts, use
    `{StaticResource key}`. To set an element’s property with a resource whenever
    the resource value changes during the lifetime of the app, use `{DynamicResource
    key}`. To load a resource using code, use the `TryGetValue` method of the `Resources`
    property. If you treat the `Resources` property as a dictionary and use array-style
    syntax, like `Resources[key]`, it will only find resources defined directly in
    the dictionary, not in any merged dictionaries.'
  prefs: []
  type: TYPE_NORMAL
- en: Resources can be defined and stored inside any element of XAML, not just at
    the app level. For example, if a resource is only needed on `MainPage`, then it
    can be defined there. You can also dynamically load XAML files at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can read more about .NET MAUI resource dictionaries
    at the following link: [https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries](https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries).
    In particular, note the section about resource lookup behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: Using data binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building graphical UIs, you will often want to bind a property of one control
    to another, or to some data.
  prefs: []
  type: TYPE_NORMAL
- en: Binding to elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest type of binding is between two elements. One element acts as a
    source for a value and the other elements acts as the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `CategoriesPage.xaml`, under the existing button in the vertical stack layout,
    add a label for instructions, another label to show the current degree of rotation,
    a slider for selecting a rotation, and a rainbow square to rotate, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the text of the label and the angle of the rotation of the rectangle
    are both bound to the slider’s value using a binding context and the `{Binding}`
    markup extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.Maui.Client` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Categories** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click and pull the slider to change the rotation of the rainbow square, as
    shown in *Figure 16.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.14: A slider data bound to a label and the rotation of a rectangle
    on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with more in-depth research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the four categories of .NET MAUI UI components, and what do they represent?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the benefit of the `Shell` component and what kinds of UI does it implement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you enable a user to perform an action on a cell in a list view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When would you use an `Entry` instead of an `Editor`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the effect of setting `IsDestructive` to `true` for a menu item in a
    cell’s context actions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have defined a `Shell` with a content page, but no navigation is shown.
    Why might this be?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between `Margin` and `Padding` for an element like a
    `Button`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are event handlers attached to an object using XAML?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do XAML styles do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can you define resources?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 16.2 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-16---building-mobile-and-desktop-apps-using-net-maui](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-16---building-mobile-and-desktop-apps-using-net-maui)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.3 – Implementing Model-View-ViewModel for .NET MAUI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this online-only section, you will learn how to implement the MVVM design
    pattern with a .NET MAUI app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-mvvm.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-mvvm.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.4 – Integrating .NET MAUI apps with Blazor and native platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this online-only section, you will learn how to integrate a .NET MAUI app
    with native mobile features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-maui-blazor.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-maui-blazor.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to build a cross-platform mobile and desktop app using .NET MAUI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to define shared resources and reference them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use data binding with common controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the *Epilogue*, you will learn how to continue your learning journey with
    apps and services for .NET.
  prefs: []
  type: TYPE_NORMAL
