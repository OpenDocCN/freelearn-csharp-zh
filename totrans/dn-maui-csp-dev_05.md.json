["```cs\n<ActivityIndicator\n    Color=\"Blue\"\n    IsRunning=\"{Binding ActivityIndicatorIsRunning}\" />\n```", "```cs\n[ObservableProperty] private bool activityIndicatorIsRunning   = true;\n```", "```cs\nprivate async void OnCreate(object sender, EventArgs e)\n{\n  CancellationTokenSource =\n    new CancellationTokenSource();\n  var message = \"Your account was created\";\n  var dismissalText = \"Click Here to Close the SnackBar\";\n  TimeSpan duration = TimeSpan.FromSeconds(10);\n  Action  = async () =>\n    await DisplayAlert(\n      \"Snackbar Dismissed!\",\n      \"The user has dismissed the snackbar\",\n      \"OK\");\n  var snackbarOptions = new SnackbarOptions\n  {\n    BackgroundColor = Colors.Red,\n    TextColor = Colors.Yellow,\n    ActionButtonTextColor = Colors.Black,\n    CornerRadius = new CornerRadius(20),\n    Font = Microsoft.Maui.Font.SystemFontOfSize(14),\n    ActionButtonFont = Microsoft.Maui.Font\n      .SystemFontOfSize(14)\n  };\n  var snackbar = Snackbar.Make(\n    message,\n    action,\n    dismissalText,\n    duration,\n    snackbarOptions);\n  await snackbar.Show(cancellationTokenSource.Token);\n  vm.ActivityIndicatorIsRunning = false;\n}\n```", "```cs\n<!--<ActivityIndicator\n    Color=\"Blue\"\n    IsRunning=\"{Binding ActivityIndicatorIsRunning}\" />-->\n<ProgressBar\n    ProgressColor=\"Blue\"\n    x:Name=\"LoginProgressBar\" />\n```", "```cs\nprivate async void OnSubmit(object sender, EventArgs e)\n{\n  for (double i = 0.0; i < 1.0; i += 0.1)  [1]\n  {\n    await LoginProgressBar.ProgressTo(i, 500,\n      Easing.Linear); [2]\n  }\n  await DisplayAlert(  [3]\n    \"Submit\",\n    $\"You entered {vm.Name} and {vm.Password}\",\n    \"OK\");\n}\n```", "```cs\n<Button\n    BackgroundColor=\"Gray\"\n    Command=\"{Binding SubmitCommand}\"\n    Margin=\"5\"\n    Text=\"Submit\" />\n```", "```cs\n[RelayCommand]\nprivate async void Submit()\n{\n  for (var i = 0.0; i < 1.0; i += 0.1)\n  {\n    await LoginPage.LoginProgressBar.ProgressTo(i, 500,\n      Easing.Linear); [1]\n  }\n  await Application.Current.MainPage.DisplayAlert(\n     [2]\n    \"Submit\",\n    $\"You entered {Name} and {Password}\",\n    \"OK\");\n}\n```", "```cs\npublic static ProgressBar LoginProgressBar;\n```", "```cs\npublic LoginPage()\n{\n  LoginProgressBar = new ProgressBar();\n```", "```cs\n<VerticalStackLayout x:Name=\"LoginStackLayout\">\n```", "```cs\npublic LoginPage()\n{\n  LoginProgressBar = new ProgressBar();\n  InitializeComponent();  [1]\n  LoginStackLayout.Children.Add(LoginProgressBar); [2]\n  BindingContext = vm;\n}\n```", "```cs\npublic partial class ConstructMessage {}\n```", "```cs\n    WeakReferenceMessenger.Default.Register\n      <ConstructMessage> (this, async ( m,e) =>\n    {\n             // …\n     });\n```", "```cs\n    WeakReferenceMessenger.Default.Register\n      <ConstructMessage> (this, async ( m,e) =>\n    {\n      CancellationTokenSource =\n        new CancellationTokenSource();\n      var message = \"Your account was created\";\n      var dismissalText = \"Click Here to Close the\n        SnackBar\";\n      TimeSpan duration = TimeSpan.FromSeconds(10);\n      Action = async () =>\n        await DisplayAlert(\n          \"Snackbar Dismissed!\",\n          message,\n          \"OK\");\n      var snackbarOptions = new SnackbarOptions\n      {\n        BackgroundColor = Colors.Red,\n        TextColor = Colors.Yellow,\n        ActionButtonTextColor = Colors.Black,\n        CornerRadius = new CornerRadius(20),\n        Font = Microsoft.Maui.Font.SystemFontOfSize(14),\n        ActionButtonFont = Microsoft.Maui.Font\n          .SystemFontOfSize(14)\n      };\n      var snackbar = Snackbar.Make(\n        message,\n        action,\n        dismissalText,\n        duration,\n        snackbarOptions);\n      await snackbar.Show(cancellationTokenSource.Token);\n      vm.ActivityIndicatorIsRunning = false;\n    });\n```", "```cs\n<Button\n    BackgroundColor=\"Gray\"\n    Command=\"{Binding CreateCommand}\"\n    Margin=\"5\"\n    Text=\"Create Account\" />\n```", "```cs\n[RelayCommand]\nprivate void Create()\n{\n  WeakReferenceMessenger.Default.Send(new CreateMessage());\n}\n```", "```cs\nusing CommunityToolkit.Maui.Markup;\nusing static CommunityToolkit.Maui.Markup.GridRowsColumns;\nnamespace ForgetMeNot.View\n{\n    class LoginCS : ContentPage\n    {\n        public LoginCS(LoginViewModel viewModel)  [1]\n        {\n            BindingContext = viewModel;\n            var activity = new ActivityIndicator() [2]\n            {\n                HeightRequest = 50,\n                Color = Color.FromRgb(0, 0, 0xF),\n            };\n            activity.IsEnabled = viewModel\n              .ShowActivityIndicator; [3]\n            Content = new VerticalStackLayout()\n            {\n                Children = [4]\n                {\n                    activity,\n                    new Grid()  [5]\n                    {\n                        RowDefinitions = GridRowsColumns\n                          .Rows.Define(\n                            (Row.Username,Auto),\n                            (Row.Password,Auto),\n                            (Row.Buttons, Auto)\n                            ),\n                        ColumnDefinitions = GridRowsColumns\n                          .Columns.Define(\n                            (Column.Submit,Star),\n                            (Column.Create, Star),\n                            (Column.Forgot, Star)\n                            ),\n                        Children =\n                        {\n                            new Label()\n                                .Text(\"User name\")\n                                .Row(Row.Username)\n                                   .Column(0), [6]\n                            new Entry()\n                                .Placeholder(\"User name\")\n                                .Bind(Entry.TextProperty,\n                                   nameof(LoginViewModel\n                                     .LoginName))\n                                .Row(Row.Username)\n                                  .Column(1)\n                                .ColumnSpan(2),\n                            new Label()\n                                .Text(\"Password\")\n                                .Row(Row.Password)\n                                  .Column(0),\n                            new Entry {IsPassword = true}\n                                .Placeholder(\"Password\")\n                                .Bind(Entry.TextProperty,\n                                 nameof(LoginViewModel\n                                 .Password))\n                                .Row(Row.Password)\n                                  .Column(1)\n                                .ColumnSpan(2),\n                            new Button()\n                                .Text(\"Submit\")\n                                .Row(Row.Buttons)\n                                  .Column(Column.Submit)\n                                .BindCommand(nameof\n                                  (LoginViewModel\n                                    .DoLoginCommand)),\n                            new Button()\n                                .Text(\"Create Account\")\n                                .Row(Row.Buttons)\n                                  .Column(Column.Create)\n                                .BindCommand(nameof\n                                  (LoginViewModel\n                                 .DoCreateAccountCommand)),\n                            new Button()\n                                .Text(\"Forgot Password\")\n                                .Row(Row.Buttons)\n                                   .Column(Column.Forgot)\n                                .BindCommand(nameof\n                                (LoginViewModel\n                                .ForgotPasswordCommand))\n                        }\n                    }\n                }\n            };\n        }\n    }\n    enum Row\n    {\n        Username,\n        Password,\n        Buttons\n    }\n    enum Column\n    {\n        Submit,\n        Create,\n        Forgot\n    }\n}\n```", "```cs\nnamespace ForgetMeNotDemo.Model;\n[ObservableObject]\npublic partial class Preference\n{\n    [ObservableProperty] private string preferencePrompt;\n    [ObservableProperty] private string preferenceValue;\n}\n```", "```cs\npublic class PreferenceService\n{\n  public async Task<List<Preference>> GetPreferences()\n  {\n    return await GetPreferencesMock();\n  }\n  private async Task<List<Preference>> GetPreferencesMock(\n  {\n    return null;\n  }\n}\n```", "```cs\n[ObservableObject]\npublic partial class PreferencesViewModel\n{\n  [ObservableProperty] private List<Preference>\n    preferences;\n  private readonly PreferenceService service; [1]\n  public PreferencesViewModel()\n  {\n    service = new(); [2]\n  }\n  public async Task Init()\n  {\n    Preferences = await service.GetPreferences(); [3]\n  }\n}\n```", "```cs\npublic partial class PreferencesPage : ContentPage\n{\n  private PreferencesViewModel vm;\n  public Preferences()\n  {\n    vm = new PreferencesViewModel();\n    BindingContext = vm;\n    InitializeComponent();\n }\n  protected override async void OnAppearing()\n  {\n    base.OnAppearing();\n    await vm.Init();\n  }\n```", "```cs\npublic class PreferenceService\n{\n  public async Task<List<Preference>> GetPreferences()\n  {\n    return await GetPreferencesMock();\n  }\n  private async Task<List<Preference>> GetPreferencesMock()\n  {\n    List<Preference> preferences = new()\n    {\n      new Preference()\n      {\n        PreferencePrompt = \"Shirt Size\",\n        PreferenceValue = \"\"\n      },\n      new Preference()\n      {\n        PreferencePrompt = \"Favorite Music Genre\",\n        PreferenceValue = \"\"\n      },\n      new Preference()\n      {\n        PreferencePrompt = \"Favorite Color\",\n        PreferenceValue = \"\"\n      },\n      new Preference()\n      {\n        PreferencePrompt = \"Favorite Food\",\n        PreferenceValue = \"\"\n      },\n      new Preference()\n      {\n        PreferencePrompt = \"Favorite Movie\",\n        PreferenceValue = \"\"\n      },\n//…\n    };\n    return preferences;\n  }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/\n  dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/\n                winfx/2009/xaml\"\n             x:Class=\"ForgetMeNotDemo.View.PreferencesPage\"\n             Title=\"Preferences\">\n    <ScrollView>\n        <VerticalStackLayout>\n            <Label\n                Margin=\"5\"\n                Padding=\"5\"\n                HorizontalOptions=\"Center\"\n                LineBreakMode=\"WordWrap\"  [1]\n                Text=\"Please fill in as many preferences as\n                you care to. &#10; &#10;The fields are\n                'free form,' fill in anything you like.\n                Remember, the more information you provide\n                to your buddies the better they will be\n                able to match to what you like. Each of the\n                categories can be edited for your\n                needs.&#10; &#10; Save as frequently as you\n                like, and to edit, just change the value\n                you entered and press save.\" />\n            <Button\n                Margin=\"30,20,0,0\"\n                Clicked=\"SavePreferences\"   [2]\n                Command=\"{Binding SavePreferencesCommand}\"\n                 [3]\n                Text=\"Save\" />\n            <CollectionView\n                Margin=\"20,20,10,10\"\n                ItemsSource=\"{Binding Preferences}\" [4]\n                SelectionMode=\"None\">       [5]\n                <CollectionView.ItemTemplate>  [6]\n                    <DataTemplate>\n                        <Grid ColumnDefinitions=\"*,2*\">\n                            <Entry  [7]\n                                Grid.Column=\"0\"\n                                FontSize=\"10\"\n                                HorizontalOptions=\"Start\"\n                                HorizontalTextAlignment=\n                                  \"Start\"\n                                Text=\"{Binding\n                                PreferencePrompt,\n                                   Mode=TwoWay}\" [8]\n                                TextColor=\"{OnPlatform\n                                  Black,  [9]\n                                  iOS=White}\" />\n                            <Entry\n                                Grid.Column=\"1\"\n                                FontSize=\"10\"\n                                HeightRequest=\"32\"\n                                HorizontalOptions=\"Start\"\n                                HorizontalTextAlignment=\n                                  \"Start\"\n                                Text=\"{Binding\n                                 PreferenceValue,\n                                   Mode=TwoWay}\"\n                                TextColor=\"{OnPlatform\n                                   Black,\n                                     iOS=White}\"\n                                WidthRequest=\"350\" />\n                        </Grid>\n                    </DataTemplate>\n                </CollectionView.ItemTemplate>\n            </CollectionView>\n            <Button\n                Margin=\"30,20,0,0\"\n                Clicked=\"SavePreferences\"\n                Command=\"{Binding SavePreferencesCommand}\"\n                Text=\"Save\" />\n        </VerticalStackLayout>\n    </ScrollView>\n</ContentPage>\n```", "```cs\n    public void SavePreferences(object sender, EventArgs e)\n    {\n        ShowToast();\n    }\n    private async Task ShowToast()\n    {\n        var cancellationTokenSource = new\n           CancellationTokenSource();\n        var message = \"Your preferences were saved\";\n        ToastDuration duration = ToastDuration.Short;\n        var fontSize = 14;\n        var toast = Toast.Make(message, duration,\n          fontSize);\n        await toast.Show(cancellationTokenSource.Token);\n    }\n```", "```cs\n    <ShellContent\n        Title=\"Home\"\n        ContentTemplate=\"{DataTemplate\n          view1:PreferencesPage}\"\n        Route=\"PreferencesPage\" />\n```", "```cs\n    <ContentPage.Resources>\n        <Style TargetType=\"Label\">\n            <Setter Property=\"FontSize\" Value=\"Medium\"/>\n            <Setter Property=\"HorizontalOptions\"\n               Value=\"Start\"/>\n            <Setter Property=\"Margin\" Value=\"10\"/>\n            <Setter Property=\"VerticalOptions\"\n               Value=\"Center\"/>\n            <Setter Property=\"VerticalTextAlignment\"\n              Value=\"Center\"/>\n        </Style>\n    </ContentPage.Resources>\n```", "```cs\n<Label\n    Text=\"User Name\" />\n```", "```cs\n<Style TargetType=\"Label\" x:Key=\"LargeLabel\">\n    <Setter Property=\"FontSize\" Value=\"Large\" />\n    <Setter Property=\"HorizontalOptions\" Value=\"Start\" />\n    <Setter Property=\"Margin\" Value=\"10\" />\n    <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n    <Setter Property=\"VerticalTextAlignment\" Value=\"Center\"\n      />\n</Style>\n<Style TargetType=\"Label\" x:Key=\"SmallLabel\">\n    <Setter Property=\"FontSize\" Value=\"Small\" />\n    <Setter Property=\"HorizontalOptions\" Value=\"Start\" />\n    <Setter Property=\"Margin\" Value=\"10\" />\n    <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n    <Setter Property=\"VerticalTextAlignment\" Value=\"Center\"\n      />\n</Style>\n```", "```cs\n<Label\n    Text=\"User Name\"\n    Style=\"{StaticResource LargeLabel}\"/>\n<Label\n    Text=\"Password\"\n    Style=\"{StaticResource SmallLabel}\"/>\n```", "```cs\n<Style TargetType=\"Label\">  [1]\n    <Setter Property=\"FontSize\" Value=\"Medium\" />\n    <Setter Property=\"HorizontalOptions\" Value=\"Start\" />\n    <Setter Property=\"Margin\" Value=\"10\" />\n    <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n    <Setter Property=\"VerticalTextAlignment\"\n      Value=\"Center\" />\n</Style>\n<Style TargetType=\"Label\" x:Key=\"BaseExplicitLabel\"> [2]\n    <Setter Property=\"FontSize\" Value=\"Medium\" />\n    <Setter Property=\"HorizontalOptions\" Value=\"Start\" />\n    <Setter Property=\"Margin\" Value=\"10\" />\n    <Setter Property=\"VerticalOptions\" Value=\"Center\" />\n    <Setter Property=\"VerticalTextAlignment\"\n      Value=\"Center\" />\n</Style>\n<Style\n    TargetType=\"Label\"\n    x:Key=\"LargeLabel\"\n    BasedOn=\"{StaticResource BaseExplicitLabel}\"> [3]\n    <Setter Property=\"FontSize\" Value=\"Large\" />\n</Style>\n<Style\n    TargetType=\"Label\"\n    x:Key=\"SmallLabel\"\n    BasedOn=\"{StaticResource BaseExplicitLabel}\">\n    <Setter Property=\"FontSize\" Value=\"Small\" />\n</Style>\n            <Label\n                Style=\"{StaticResource LargeLabel}\" [4]\n                Text=\"User Name\" />\n```"]