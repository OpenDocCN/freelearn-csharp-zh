- en: Chapter 3. Enhancing your UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to enhance our UI experience by using more
    advanced features, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Draggable panels and animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drag-and-drop system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic content alignment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clipping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrollable text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The localization system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by talking about NGUI components and their overall behavior.
  prefs: []
  type: TYPE_NORMAL
- en: NGUI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Creating Widgets"), *Creating Widgets*,
    we added the **UIStretch** and **UIAnchor** components to our widgets, and also
    the **Load Level On Click** component. There are many more components, and the
    purpose of this chapter is to discuss these components. We will use the most important
    ones in this chapter. It is possible to add a component to any kind of widget—considering
    it is logical of course.
  prefs: []
  type: TYPE_NORMAL
- en: This component-oriented structure makes NGUI extremely flexible and modular.
    We will start by making our main menu a draggable window.
  prefs: []
  type: TYPE_NORMAL
- en: The draggable panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now learn how to turn our menu into a draggable window. Let''s add
    the correct component to it and study its parameters, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Panel** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `MainMenu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the **Draggable Panel** component to it by navigating to **Component**
    | **NGUI** | **Interaction**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **MainMenu** GameObject now has a **UIDraggable Panel** component attached
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the 13 parameters for setting values in the **UIDraggable
    Panel**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drag Effect**: This is the effect used while dragging the panel to have a
    smoother drag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restrict Within Panel**: This uses the parent panel to restrain the draggable
    panel within its clipping bounds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable Drag If Fits**: If the content fits the parent panel''s clipping
    bounds, dragging will be disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smooth Drag Start**: This avoids a "jump" effect on drag start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reposition Clipping**: This repositions the **Clipping** to the **Top Left
    Corner** immediately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IOS Drag Emulation**: Dragging movement speed is reduced when overpassing
    the clipping edges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scroll Wheel Factor**: If you want the scroll wheel to drag the panel on
    the y axis, set this value to greater than 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Momentum Amount**: This is the effect applied when the panel is dropped.
    The panel will keep moving after releasing the scroll wheel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal Scroll Bar**: This lets you drag a scroll bar to define it as
    the panel''s horizontal scroll bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vertical Scroll Bar**: This lets you drag another scroll bar to define it
    as the panel''s vertical scroll bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Scroll Bars**: This allows you to show scroll bars always, show them
    only if necessary, or show them while dragging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale**: This defines which axis the panel should drag on: `0` means no dragging,
    `1` allows full dragging on this axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relative Position On Reset**: This is the offset relative to the mouse''s
    position. It is useful if you want an offset from the mouse''s position while
    dragging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have seen the component's parameters, let's use them to drag our
    main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Dragging the MainMenu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have added the **UIDraggable Panel** component that sets this **UIPanel**
    as a **Draggable Panel**. Now, we must mark our **MainMenu** as the GameObject
    that holds the draggable content.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also add a **Box Collider** component to define where the user must
    click to drag the panel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **MainMenu** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Clipping** parameter of **UIPanel** to **Alpha Clip**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Size** field in **Clipping** to `1920` x `1080`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **IOS Drag Emulation** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **Drag Panel Contents** component to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the **Box Collider** component to it and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Is Trigger** Boolean—we don't need collisions, just a trigger to
    receive Raycasts from the **UICamera**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Center** coordinates to {`0`, `395`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Size** coordinates to {`1300`, `62`, `1`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the play button. By clicking on the window's title, you can drag the
    main menu. But still, it isn't configured correctly; you can only move it on the
    x axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change an important parameter of the **UIDraggable Panel** component
    of **MainMenu** to allow dragging on the x axis by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **MainMenu** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Scale** in **UIDraggable Panel** to {`1`, `1`, `0`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And that's it! Our **MainMenu** is now draggable on both the axes. If you drag
    it outside the screen, it will move back inside when dropped. We had to define
    a clipping of the screen's size for this **Restrict Within Panel** function to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: The drag-and-drop system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now create our own **drag-and-drop** system that will enable the user
    to select a power. They will be able to drag one of the two available powers inside
    a selection box as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The drag-and-drop system](img/8667OT_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Powers selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a drag-and-drop system to select which of the two powers the
    player can choose: a **Bomb** power, which will explode or a **Time** power, which
    will slow down time for a few seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: Draggable items container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start by creating a nice box for our powers and a draggable items container
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **MainMenu** GameObject and perform the given steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new empty child GameObject by pressing *Alt* + *Shift* + *N*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Powers`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** and **Label** GameObjects from **Sound**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate them.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag these new duplicates inside our **Powers** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** GameObject in **Powers** and perform these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `320` x `420`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Pixel Offset** in **UIAnchor** to {`0`, `-100`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** GameObject in **Powers**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `TitleLabel`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Powers`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** GameObject, which is a child of **Title**, and perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `SelectedLabel`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside our **Powers** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Background** GameObject in **Powers** to the **Container** field
    in its **UIAnchor**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter in **UIAnchor** to **Top**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-95`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Font** to `SciFi Font – Normal`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Selected`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **SelectedLabel** GameObject in **Powers** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `AvailableLabel`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Available`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-295`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **SelectedLabel GameObject** in **Powers** and perform these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate it as `InstructionsLabel`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change text to `[55AA99]Drag Power Here`—one word per line.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Overflow** parameter to **Shrink Content**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `4`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `128` x `45`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-175`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Background** sprite GameObject in **Powers** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `PowersContainer`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `215` x `90`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`100`, `100`, `100`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **AvailableLabel** GameObject from **Powers** to the **Container**
    field in its **UIAnchor**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-60`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, we now have our powers box with the correct labels and a background.
  prefs: []
  type: TYPE_NORMAL
- en: Draggable items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have the PowersContainer, let''s create the following two draggable
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Draggable items](img/8667OT_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow the ensuing steps to create them:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **PowersContainer** GameObject in **Powers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child GameObject with *Alt* + *Shift* + *N* and rename it as `Bomb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Collider** object to it by navigating to **NGUI** | **Attach**.
    It will be used to detect the mouse and receive the correct messages for the drag-and-drop
    system by performing the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Is Trigger** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Size** field of new **Box Collider** to {`90`, `90`, `1`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Drag Object** component to it by navigating to **Component** | **NGUI**
    | **Interaction**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Bomb** from **PowersContainer** in its **Target** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Scale** to {`1`, `1`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Momentum Amount** to `0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select and duplicate the **Background** sprite GameObject in **Powers**. Then
    perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside our new **Bomb** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `5`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `90` x `90`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **UIAnchor** component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position values to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select and duplicate the **AvailableLabel** GameObject in **Powers**. Then
    perform these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that new duplicate as `Label`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside our new **Bomb** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Bomb`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `6`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **UIAnchor** component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position values to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Bomb** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Button Color** component to it by navigating to **Component** |
    **NGUI** | **Interaction** and perform these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Background** GameObject from **Bomb** to the **Target** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pressed**color to {`0`, `255`, `0`, `150`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `DragItem.cs` C# script and attach this script to the **Button
    Color** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have one draggable Bomb power with a `DragItem.cs` script attached to it.
    Let''s create the second Time power by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and duplicate our **Bomb** GameObject in **PowersContainer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that new duplicate as `Time`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our new **Label** GameObject, which is a child of **Time**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Time`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we now have our two draggable Powers, and they are on top of each other.
    Let''s correct this using Anchors and a Grid component, which will automatically
    align our items. We can do this using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **PowersContainer** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child by pressing *Alt* + *Shift* + *N* and rename this new child
    as `Grid`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Grid** component to it by navigating to **Component** | **NGUI**
    | **Interaction**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag both our **Bomb** and **Time** GameObjects in our new **Grid** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Grid** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Cell Width** to `105`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Sorted** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Reposition Now** Boolean to update the table.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Transform** position to {`-52`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The UIGrid component automatically aligns its children. We now have our two
    draggable powers aligned. If you click on play, you''ll see that you can drag
    them around as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Draggable items](img/8667OT_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The drop surface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will create a new **Surface** GameObject with a `DropSurface.cs` script and
    a **Box Collider** component to define where the draggable items can be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: When the user drops an object with a **DragItem** component on the **Surface**
    GameObject, the **DragItem** component will be destroyed, and a "dropped version"
    of the object will be instantiated as a child of the **Surface** GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create and configure the **Surface** GameObject by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and duplicate our **Background** GameObject from **Powers** and rename
    this new duplicate as `Surface`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our new **Surface** GameObject from **Powers** and perform these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Sprite** to **Highlight**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Color Tint** to {`0`, `25`, `5`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `130` x `130`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **SelectedLabel** GameObject from **Powers** to the **Container** field
    in its **UIAnchor**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** to {`0`, `-80`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Collider** object to it by navigating to **NGUI** | **Attach** |
    **Collider**. It will detect **DragItems**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check its **Is Trigger** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Size** to {`130`, `130`, `1`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and attach a new `DropSurface.cs` C# script to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Good, our surface is now ready to detect our items.
  prefs: []
  type: TYPE_NORMAL
- en: Prefab instantiated on drop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we need to create two prefabs for our powers that will be instantiated
    as children of the **Surface** GameObject when a **DragItem** component is dropped
    on it. They will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prefab instantiated on drop](img/8667OT_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create these prefabs by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Bomb** GameObject from **Grid** and the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `SelectedBomb`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our new **SelectedBomb** GameObject from **Grid**. Then perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change its **Normal** color tint to **R**: `0`, **G**: `145`, **B**: `60`,
    and **A**: `255`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **Box Collider** component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **Drag Item** component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and attach a new `Power.cs` C# script to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** sprite GameObject from **SelectedBomb**. Then perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Sprite** to **Light**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `4`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `120` x `120`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Label** GameObject from **SelectedBomb** and set its **Depth**
    to `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **SelectedBomb** GameObject into a folder of your choice in your **Project**
    view to create a prefab from it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once our **SelectedBomb** is a prefab (blue in the scene's **Hierarchy**), you
    may delete it from the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have our **SelectedBomb** prefab. Let''s declare a variable in our `DragItem.cs`
    script that will store the prefab to instantiate on drop. We can do this by following
    the ensuing steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Bomb** GameObject from **Grid**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `DragItem.cs` script attached to it and add this public variable using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script and go back to Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Bomb** GameObject from **Grid** and drag our **SelectedBomb** prefab
    from the Project view in the **Create On Drop** field in its **Drag Item**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s do the same for our **Time** power in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **SelectedBomb** prefab in the **Project** view and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it with *Ctrl* + *D*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new duplicate prefab as `SelectedTime`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select its **Label** child GameObject and change its text to `[AAFFFF]Time`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Time** GameObject from **Grid** in the scene's **Hierarchy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **SelectedTime** prefab from the **Project** view in the **Create On
    Drop** field in its **Drag Item**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now add an `OnDrop()` method to our `DropSurface.cs` script to handle
    dropped objects in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Surface** GameObject from **Powers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open its attached `DropSurface.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `OnDrop()` event has one argument: the `dropped` GameObject. Let''s add
    this method to our script to handle the drop by using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and click on the play button. When you drop a power on the **Surface**
    GameObject, nothing happens! Why?
  prefs: []
  type: TYPE_NORMAL
- en: That's because the `OnDrop()` event depends on the Raycast from `Camera`, and
    at the moment of the drop, our dragged power's **Box Collider** component is in
    the way of the mouse cursor and the **Surface** GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just have to disable the collider of **Power** while it is dragged. We can
    do this in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Bomb** GameObject from **Grid**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open its attached `DragItem.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will use the `OnPress()` event to do this. The `OnPress()` method will take
    the object''s `pressed` state as an argument in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and click on play. You can now drag-and-drop the powers on the
    surface!
  prefs: []
  type: TYPE_NORMAL
- en: Handling an invalid drop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let's make sure power is repositioned to its default position if the user
    drops it outside the **Surface** GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we can check the camera''s last hit when the `OnPress(false)`
    event occurs. Open our `DragItem.cs` and add the following lines after `collider.enabled
    = !pressed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save and click on play. If you drop a Power anywhere but on the **Surface**
    GameObject, our items will be repositioned automatically. Great!
  prefs: []
  type: TYPE_NORMAL
- en: 'A slight problem: you can drop both of them on the surface, and then you''re
    stuck. Let''s explore the solution in the following sections.'
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the current item
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will now ensure that you can only have one power on the surface. If you drag
    a second one while the DropSurface is already occupied, the current power will
    be replaced by the new one and the drag item component will reappear in the **PowersContainer**
    GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to know which power is currently dropped on the surface and which
    original drag Item component must be instantiated in **Grid** in **PowersContainer**:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **SelectedBomb** prefab in the **Project** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open its attached `Power.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This script will be used to contain information about the dropped item. Let''s
    declare a new `enum` to distinguish which type of power, and an `Object` variable
    to set which prefab will be instantiated to make the draggable item in power reappear
    when replaced:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to go back to Unity and create prefabs for our `Bomb` and `Time`
    draggable items before we assign them to the `createOnDestroy` variables:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Bomb** GameObject from **Powers** in the **Hierarchy** of **Scene**
    and drag it into a folder of your choice in your **Project** view to create a
    prefab from it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **SelectedBomb** Prefab in the **Project** view and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Power** component's **Type** variable to **Bomb**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our new **Bomb** Prefab from the Project view to the **Power** component's
    **Create On Destroy** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We assigned the **Type** parameter of **SelectedBomb** to **Bomb**, and it now
    has an assigned prefab that we will instantiate to recreate the draggable item
    when it gets replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Repeat steps 1 and 2, replacing the word `Bomb` with `Time` to do the same for
    our Time power GameObject and prefab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to code a system that will register which type of power is currently
    selected. We''ll use the `GameManager.cs` script in the following manner to store
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our `GameManager.cs` script and declare this new static variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this new static method to set our `SelectedPower` from other scripts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ok, we now have a method to register the currently selected power. It is time
    to modify our `DropSurface.cs` script:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Surface** GameObject from **Powers** and open the `DropSurface.cs`
    script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a new `GameObject` variable to store our **Grid** GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script, select our **Surface** GameObject from **Powers** in the **Hierarchy**
    view. Drag our **Grid** GameObject from **PowersContainer** in its **DropSurface**
    component's **Drag Items Container** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go back to our `DropSurface.cs` script. We will add these following lines
    to handle the fact that the user cannot drop two powers on the surface; it will
    replace the previous one and recreate its original `Drag Item`. In the `OnDrop()`
    method, just below the `if(dragItem == null) return` line, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add a new `RecreateDragItem()` method to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ok, we now have to inform the `GameManager.cs` script that the selected Power
    has changed. We can do this by calling our `SetPower()` static method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line in the `OnDrop()` method just before the `Destroy(dropped)`
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save all the scripts and click on the play button. You can drop the first Power
    on the **Surface** GameObject and then drop the second one. The first power is
    now replaced and will reappear in the **Available** power container.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, we cannot simply remove the power. Let's correct this in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the current item
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We want to remove the selected power by clicking on it. In our `DropSurface.cs`
    script, add this new `OnClick()` method that will be called when the user clicks
    on the surface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now click on play. You can now remove the selected power by right- or left-clicking
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: Animations with NGUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One great aspect of NGUI is that you can use Unity's animation system on any
    kind of widget. There also are some Tween components that let you modify most
    values over time, such as dimensions, color, and scale. For example, you can change
    an object's color from color A to color B in 5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: We have a nice main menu. But we actually have our options that are constantly
    displayed. That is not very user friendly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use animations and tweens to hide our options and show them only when
    the user clicks on the **Options** button. With options hidden, our menu will
    look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animations with NGUI](img/8667OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But first, let's make our powers' apparition smoother.
  prefs: []
  type: TYPE_NORMAL
- en: Smooth powers apparition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add **Scale Tweens** on our prefabs to make them appear smoothly by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project view, select our **SelectedBomb** prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Scale Tween** component by navigating to **Component** | **NGUI**
    | **Tween** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **From** parameter to {`0`, `0`, `0`,}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Duration** to `0.2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Tween Scale** component and then click on **Copy Component**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **SelectedTime**, **Bomb**, and **Time** prefabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** view, right-click on any existing component name and click
    on **Paste Component As New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, as soon as these widgets are created, they scale from 0 to 1 in 0.2 seconds,
    which makes them appear smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: We can now see how we'll hide and show options using a button.
  prefs: []
  type: TYPE_NORMAL
- en: Clipping to hide options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we have to hide our option boxes. To do that, we will use **Panel**
    **Clipping** and increase their width when we need to show them. Let''s set up
    the Clipping option:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Window** GameObject from **MainMenu** and set its **Dimensions**
    to `515` x `850`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **MainMenu** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** in **UIPanel** to `-1`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child for **MainMenu** with *Alt* + *Shift* + *N*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new child as `Container`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our new **Container** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Panel** component to it by navigating to **Component** | **NGUI**
    | **UI**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Clipping** parameter to **Alpha Clip**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Size** to `515` x `1080`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fold all the children of **MainMenu** using the arrow next to each of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select every child of **MainMenu**, except the new **Container** child, and
    drag them all inside our new **Container** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Good, our options are now hidden. Your **Hierarchy** should look as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Clipping to hide options](img/8667OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add an **Options** button that will show or hide these options:'
  prefs: []
  type: TYPE_NORMAL
- en: Select and duplicate our **Play**GameObject from **Buttons** and rename this
    new duplicate as `Options`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our new **Options** GameObject from **Buttons** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter in **UIAnchor** to **Bottom**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Pixel Offset** in **UIAnchor** to {`0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Size** in **Box Collider** to {`140`, `40`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **Load Level On Click** component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Background** GameObject from **Options** and set its **Dimensions**
    to `140` x `40`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Label** GameObject from **Options**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `Options`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Overflow** parameter to **Shrink Content**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `90` x `25`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, so now we have an **Options** button. Next, we want it to enlarge our **Window**
    and the Panel Clipping `width` of **Container** when clicked. We can do this using
    code, but we will use tweens and animations in the following manner to see how
    they work:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Window** GameObject in **Container**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Tween Width** component to it by navigating to **Component** | **NGUI**
    | **Tween**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **From** parameter to `515`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **To** parameter to `1300`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Duration** to `0.5`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset **Dimensions** to `515` x `850`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the **Tween Width** component to prevent it from tweening at start.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have a **Tween** component that will resize the `width` of **Window** when
    activated. Let''s use the **UIPlay Tween** component to start it when the **Options**
    button is clicked on:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Options** button GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Play Tween** component by navigating to **Component** | **NGUI**
    | **Interaction**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Window** GameObject from **Container** in the **Tween Target** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Play** direction to **Toggle**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on play. You will see that the window resizes as needed when **Options**
    is clicked. However, the **Clipping** parameter doesn''t. Let''s correct this
    using a Unity animation:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Container** GameObject from **MainMenu**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Animation** window by navigating to **Window** | **Animation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the red record button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the animation as `ShowOptions.anim` and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Re-enter `515` for the clipping **X Size** from **UIPanel** to add a key.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the time cursor in the **Animation** window to `0:30`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `1300` for the clipping **X Size** from **UIPanel** to add a key.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the red record button again to finish.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck its **Play Automatically** Boolean in the **Animation** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have our animation ready. Now, let''s link the button to the animation in
    the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Options** GameObject from **Buttons**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a Play Animation component to it by navigating to **Component** | **NGUI**
    | **Interaction**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Container** GameObject from **MainMenu** in the **Target** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Clip Name** parameter, type in `ShowOptions`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Play** direction to **Toggle**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on play. Our window and clipping both resize perfectly in both directions
    when the **Options** button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: But you can see that our **Options** widgets aren't visible until you actually
    drag the main menu around; that's because the clipping is not refreshed after
    the animation.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this, we can simply force a **Drag at the end of the Animation** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **MainMenu** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and add a new `UpdatePanel.cs` script to it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open our new `UpdatePanel.cs` script.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add this new `UpdateNow()` method to the script that will force a drag
    of (0, 0, 0) value on our **MainMenu**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the script and then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Options** GameObject in **Buttons**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **MainMenu** GameObject in the **Notify** field of the **UIPlay Animation**
    component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose our new `UpdatePanel.UpdateNow` method for the **Method** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the play button. The **Options** boxes now appear after the animation!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! We have used NGUI's **Tween** and **Play Animations** components to enhance
    our UI and make it nicer and more user friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Scrollable text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a welcome textbox with instructions for the user. This text will
    be scrollable using the mouse wheel or a simple click-and-drag. It will look as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scrollable text](img/8667OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the start, it will scroll automatically. Let''s create it now:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Nickname** container GameObject, duplicate it by pressing *Ctrl*
    + *D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `Help`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select this **Help** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Title** GameObject in the **Container** field in its **UIAnchor**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter in **UIAnchor** to **Bottom**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-50`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a Panel component by navigating to **Component** | **NGUI** | **UI**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `1`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Clipping** parameter to **Alpha Clip**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Clipping Size** to `440` x `85`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Collider** object to it by navigating to **NGUI** | **Attach** and
    set its **Size** to {`440`, `85`, `0`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the **Input** GameObject from **Help**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Label** GameObject from **Help** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Font** to **SciFi Font – Normal**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **UIAnchor** component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set its text to:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Attach a **Tween Position** component to it by navigating to **Component**
    | **NGUI** | **Interaction**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **From** parameter to {`0`, `-50`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **To** parameter to {`0`, `20`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Duration** value to `1.5`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Start Delay** value to `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Transform** position to {`0`, `-50`, `0`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** GameObject from **Help** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `440` x `85`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`150`, `255`, `255`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the play button. We now have a welcome text that scrolls automatically
    by changing its Y coordinate inside a clipped Panel. Let''s enable the scroll
    wheel and mouse drag on this scrollable text:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Help** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Drag Object** component to it by navigating to **Component** | **NGUI**
    | **Interaction**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Label** GameObject from **Help** to the **Target** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Scale** to {`0`, `1`, `0`} to limit to vertical scrolling.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Scroll Wheel Factor** value to `1`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Restrict Within Panel** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on play. You can now drag the text label manually with either a left-click
    and drag or the mouse wheel. The **Box Collider** component on the **Help** GameObject
    detects mouse events, and the **UIDrag Object** reacts accordingly by changing
    the Y position of our **Label**.
  prefs: []
  type: TYPE_NORMAL
- en: We had to add a **UIPanel** component to the **Help** GameObject in order to
    restrict movement within the clipping's bounds.
  prefs: []
  type: TYPE_NORMAL
- en: Localization system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a complete UI, let's configure the **localization** **system**
    and add a pop-up list to change our UI's language.
  prefs: []
  type: TYPE_NORMAL
- en: Localization files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All our localized text strings must be contained in a `.txt` file for each language.
    For the purpose of this book, we will have English and French, and we will need
    the `English.txt` file and the `French.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create them right now in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: Access your project's Assets folder with your file explorer and create a new
    folder named `Localization`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this new folder, create a new text document named `English.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate this new `English.txt` file and rename it as `French.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open them both in your favorite IDE or text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, now our localization files are ready to be used with the localization system.
  prefs: []
  type: TYPE_NORMAL
- en: Localization component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now configure the localization system to work with our UI. We need to
    have the localization component attached to a GameObject in the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **GameManager** GameObject and attach a **Localization** component
    to it by navigating to **Component** | **NGUI** | **Internal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** view, navigate to Assets | Localization and drag our `English.txt`
    and `French.txt` files in the languages array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Starting Language** is set to **English**, and we also have **French**
    available in the array.
  prefs: []
  type: TYPE_NORMAL
- en: Language selection box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to create a **language selection box** as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Language selection box](img/8667OT_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we want to see what we're doing, we should first disable the Clipping of
    our **Container** by setting the **Clipping** parameter in its **UIPanel** to
    **None**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Clipping is disabled, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Popup** GameObject from **Difficulty**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check its **Localized** Boolean in **UIPopup List**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename its child **Label** GameObject as `CurrentDifficulty`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select and duplicate our **Difficulty** GameObject in **Container**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new duplicate as `Language`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our new **Background** GameObject in **Language** and set its **Pixel
    Offset** in **UIAnchor** to {`420`, -`90`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, anchors don't update themselves. You may need to deactivate and then
    activate the **Language** GameObject for the Label's **UIAnchor** to update.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select our **Label** GameObject from **Language** and change its text to `[AAFFFF]Language`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Popup** GameObject from `Language` and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Options** text value to have the following two options:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Set its **Position** to **Below**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Localized** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Language Selection** component by navigating to **Component** | **NGUI**
    | **Interaction**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the **Label**, which is a child of **Popup**, as `CurrentLanguage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now reactivate **Clipping** in **Container** by setting the **Clipping**
    parameter in its **UIPanel** to **Alpha Clip**. The clipping **Size** has been
    saved.
  prefs: []
  type: TYPE_NORMAL
- en: That's it, our localization system is in place, and when the pop-up list changes
    value, the `Language Selection.cs` script automatically changes the localization's
    **Current Language** value.
  prefs: []
  type: TYPE_NORMAL
- en: Localizing a Label
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now ready to localize our first Label using the **UILocalize** component
    and a `Key` that will define which string to use from our `.txt` files. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Label** GameObject from **Title**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Localize** component to it by navigating to **Component** | **NGUI**
    | **UI**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its `Key` parameter by typing `MainMenu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to our `English.txt` localization file and add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Switch to our `French.txt` localization file and add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save both the `.txt` files and click on the play button. If you access options
    and change the language to **French**, our window's title changes from **Main
    Menu** to **Menu Principal**. That's because the **UILocalize** component updates
    the **UILabel** component it's attached to using the string present after the
    `=` in our `.txt` localization file. If you exit the play mode, the language will
    be saved and the UI will be initialized with the last selected language.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we must add a **UILocalize** component with its specific `Key` to every
    **Label** in the scene, then add a localization string for each of them in both
    of our `.txt` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t be afraid; it isn''t that long, and it will train you to use the Localization
    System:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** view, type `Label` inside the search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all the **Label** GameObjects matching the search by pressing *Ctrl*
    + *A* and attach a **Localize** component to the selection by navigating to **Component**
    | **NGUI** | **UI**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Label** GameObject from **Title** and remove its second **UILocalize**
    component as it already had one!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, all of our **Label** GameObjects have a **UILocalize** component attached
    to them. One by one, select them and set their `Key` parameter based on their
    text set in the **UILabel** component.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must ignore the Labels of **Popup List**; they don''t need a **UILocalize**
    component since we checked their **Localized** Booleans. Simply add localization
    strings for their **Options** with the same names: **Normal**, **Hard**, **English**,
    and **French**.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Don''t forget to apply the same operations to labels included in our four different
    powers prefabs: **Time**, **Bomb**, **SelectedTime**, and **SelectedBomb**. New
    lines (return) are replaced by `\n` in the localization files. Colors work identically.'
  prefs: []
  type: TYPE_NORMAL
- en: When you're done with setting their `Key` parameters, switch to our `English.txt`
    file and add every key you need, plus `=` followed by the corresponding localized
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Now, copy all of these keys declarations and paste them in our `French.txt`
    file and then replace the English words with French words or any other language
    you choose.
  prefs: []
  type: TYPE_NORMAL
- en: By the time you're finished, our entire UI will be localized!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how to set up a draggable panel. Then, we
    created and configured a drag-and-drop system to select which power we want using
    the **UIDrag Object** component and the custom code.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to use the **UIGrid** component often to automatically align objects—they
    are very powerful when used wisely with **UIAnchor** and **UIStretch** components.
  prefs: []
  type: TYPE_NORMAL
- en: Using Unity's animations and NGUI's Tweens are no longer a secret for us—we
    used them to create a smooth apparition for these powers, and we combined them
    with Clipping to hide/show our Options menu.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we created scrollable text and learned how to use the Localization
    System to set up multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: We can now take a look at using C# with NGUI in the next chapter and see what
    we can accomplish using code.
  prefs: []
  type: TYPE_NORMAL
