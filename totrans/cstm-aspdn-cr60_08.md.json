["```cs\ndotnet new web -n MiddlewaresSample -o MiddlewaresSample\n```", "```cs\ncd MiddlewaresSample\ncode .\n```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    var app = builder.Build();\n    app.MapGet(\"/\", () => \"Hello World!\");\n    app.Run();\n    ```", "```cs\n    app.Use(async (context, next) =>{\n        await context.Response.WriteAsync(\"===\");\n        await next();\n        await context.Response.WriteAsync(\"===\");\n    });\n    app.Use(async (context, next) =>\n    {\n        await context.Response.WriteAsync(\">>>>>> \");\n        await next();\n        await context.Response.WriteAsync(\" <<<<<<\");\n    });\n    app.Run(async context =>\n    {\n        await context.Response.WriteAsync(\"Hello World!\");\n    });\n    ```", "```cs\n    ===>>>>>> Hello World! <<<<<<===\n    ```", "```cs\n    app.Use(async (context, next) =>\n    {\n        var s = new Stopwatch();\n        s.Start();\n        // execute the rest of the pipeline\n        await next();\n        s.Stop(); //stop measuring\n        var result = s.ElapsedMilliseconds;\n        // write out the milliseconds needed\n        await context.Response.WriteAsync($\" Time needed: \n          {result} milliseconds\");\n    });\n    ```", "```cs\n    using System.Diagnostics;\n    public class StopwatchMiddleware\n    {\n        private readonly RequestDelegate _next;\n        public StopwatchMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n        public async Task Invoke(HttpContext context)\n        {\n            var s = new Stopwatch();\n            s.Start();\n            // execute the rest of the pipeline\n            await _next(context);\n            s.Stop(); //stop measuring\n            var result = s.ElapsedMilliseconds;\n            // write out the milliseconds needed\n            await context.Response.WriteAsync($\" Time \n              needed: {result} milliseconds\");\n        }\n    }\n    ```", "```cs\n    app.UseMiddleware<StopwatchMiddleware>();\n    ```", "```cs\n    public static class StopwatchMiddlewareExtension\n    {\n        public static IApplicationBuilder \n          UseStopwatch(this IApplicationBuilder app)\n        {\n            app.UseMiddleware<StopwatchMiddleware>();\n            return app;\n        }\n    }\n    ```", "```cs\n    app.UseStopwatch();\n    ```", "```cs\napp.Map(\"/map1\", app1 =>\n{\n    // some more Middleware\n    app1.Run(async context =>\n    {\n        await context.Response.WriteAsync(\"Map Test 1\");\n    });\n});\napp.Map(\"/map2\", app2 =>\n{\n    // some more Middleware\n    app2.Run(async context =>\n    {\n        await context.Response.WriteAsync(\"Map Test 2\");\n    });\n});\n// some more Middleware\n```", "```cs\npublic void Configure(IApplicationBuilder app)\n{\n    app.MapWhen(\n        context => \n          context.Request.Query.ContainsKey(\"branch\"),\n        app1 =>\n        {\n            // some more Middleware\n            app1.Run(async context =>\n            {\n                await context.Response.WriteAsync(\n                    \"MapBranch Test\");\n            });\n    });\n    // some more Middleware\n    app.Run(async context =>\n    {\n        await context.Response.WriteAsync(\n            \"Hello from non-Map delegate.\");\n    });\n}\n```", "```cs\nprivate static void UseHealthChecksCore(IApplicationBuilder \n  app, PathString path, int? port, object[] args)\n{\n    if (port == null)\n    {\n        app.Map(path, \n            b => \n             b.UseMiddleware<HealthCheckMiddleware>(args));\n    }\n    else\n    {\n        app.MapWhen(\n            c => c.Connection.LocalPort == port,\n            b0 => b0.Map(path, \n            b1 => \n              b1.UseMiddleware<HealthCheckMiddleware>(args)\n            )\n        );\n    };\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app, \n  IWebHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    app.UseRouting();\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapGet(\"/\", async context =>\n        {\n           await context.Response.WriteAsync(\"Hello \n                                              World!\");\n        });\n    });\n}\n```", "```cs\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n    endpoints.MapRazorPages();\n});\n```", "```cs\n    namespace MiddlewaresSample;\n    public class AppStatusMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly string _status;\n        public AppStatusMiddleware(\n            RequestDelegate next, string status)\n        {\n            _next = next;\n            _status = status;\n        }\n        public async Task Invoke(HttpContext context)\n        {\n            await context.Response.WriteAsync(\n                $\"Hello {_status}!\");\n        }\n    }\n    ```", "```cs\n    public static class MapAppStatusMiddlewareExtension\n    {\n        public static IEndpointConventionBuilder \n          MapAppStatus(\n            this IEndpointRouteBuilder routes,\n            string pattern = \"/\", \n            string name = \"World\")\n        {\n            var pipeline = routes\n                .CreateApplicationBuilder()\n                .UseMiddleware<AppStatusMiddleware>(name)\n                .Build();\n            return routes.Map(pattern, pipeline)\n                .WithDisplayName(\"AppStatusMiddleware\");\n        }\n    }\n    ```", "```cs\n    app.UseRouting();\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapGet(\"/\", () => \"Hello World!\");\n        endpoints.MapAppStatus(\"/status\", \"Status\");\n    });\n    ```"]