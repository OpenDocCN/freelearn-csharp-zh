["```cs\nInstall-Package Microsoft.AspNetCore.Authentication\n  .JwtBearer\n```", "```cs\n  \"Jwt\": {\n    \"Issuer\": \"HealthCare.Appointments.API\",\n    \"Audience\": \" HealthCare.Appointments.Client\",\n    \"DurationInHours\": 8\n    \"Key\": \"ASecretEncodedStringHere-Minimum16Charatcters\"\n  }\n```", "```cs\nbuilder.Services.AddAuthentication(options =>\n{\n    options.DefaultAuthenticateScheme =\n        JwtBearerDefaults.AuthenticationScheme;\n    options.DefaultChallengeScheme =\n        JwtBearerDefaults.AuthenticationScheme;\n}).AddJwtBearer(o =>\n{\n    o.TokenValidationParameters = new\n        TokenValidationParameters\n    {\n        ValidateIssuer = true,\n        ValidateAudience = true,\n        ValidateLifetime = true,\n        ValidateIssuerSigningKey = true,\n        ValidIssuer = builder.Configuration[\"Jwt:Issuer\"],\n        ValidAudience = builder.Configuration\n            [\"Jwt:Audience\"],\n        IssuerSigningKey = new SymmetricSecurityKey\n        (Encoding.UTF8.GetBytes(builder.Configuration[\"Jwt:\n            Key\"]))\n    };\n});\n```", "```cs\nbuilder.Services.AddAuthorization();\n```", "```cs\napp.UseAuthentication();\napp.UseAuthorization();\n```", "```cs\npublic class AppointmentsDbContext : IdentityDbContext\n```", "```cs\nprotected override void OnModelCreating(ModelBuilder\n    builder)\n        {\n            base.OnModelCreating(builder);\n            var hasher = new PasswordHasher<ApiUser>();\n            builder.Entity<ApiUser>().HasData(new ApiUser\n            {\n                Id = \"408aa945-3d84-4421-8342-\n                    7269ec64d949\",\n                Email = \"admin@localhost.com\",\n                NormalizedEmail = \"ADMIN@LOCALHOST.COM\",\n                NormalizedUserName = \"ADMIN@LOCALHOST.COM\",\n                UserName = \"admin@localhost.com\",\n                PasswordHash = hasher.HashPassword(null,\n                    \"P@ssword1\"),\n                EmailConfirmed = true\n            });\n        }\n```", "```cs\nbuilder.Services.AddIdentityCore<IdentityUser>()\n    .AddRoles<IdentityRole>()\n    .AddEntityFrameworkStores<AppointmentsDbContext>();\n```", "```cs\npublic class AuthResponseDto\n{\n   public string UserId { get; set; }\n   public string Token { get; set; }\n}\n```", "```cs\npublic class LoginDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n        [Required]\n        [StringLength(15, ErrorMessage = \"Your Password is\n            limited to {2} to {1} characters\",\n                MinimumLength = 6)]\n        public string Password { get; set; }\n    }\n```", "```cs\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class AccountController : ControllerBase\n{\n    private readonly IAuthManager _authManager;\n    public AccountController(IAuthManager authManager)\n    {\n        _authManager = authManager;\n    }\n    // Other Actions here\n    [HttpPost]\n    [Route(\"login\")]\n    public async Task<IActionResult> Login([FromBody]\n        LoginDTO loginDto)\n    {\n        var authResponse = _authManager.Login(loginDto);\n        if (authResponse == null)\n        {\n            return Unauthorized();\n        }\n        return Ok(authResponse);\n    }\n}\n```", "```cs\npublic interface IAuthManager\n{\n   // Other methods\n   Task<AuthResponseDto> Login(LoginDto loginDto);\n}\n```", "```cs\npublic class AuthManager : IAuthManager\n{\n    private readonly UserManager<IdentityUser>\n        _userManager;\n    private readonly IConfiguration _configuration;\n    private IdentityUser _user;\n    public AuthManager(UserManager<IdentityUser>\n        userManager, IConfiguration configuration)\n    {\n        this._userManager = userManager;\n        this._configuration = configuration;\n    }\n    // Other Methods\n    public async Task<AuthResponseDto> Login(LoginDto\n        loginDto)\n    {\n        var user = await _userManager.FindByEmailAsync\n            (loginDto.Email);\n        var isValidUser = await _userManager\n            .CheckPasswordAsync(_user, loginDto.Password);\n        if(user == null || isValidUser == false)\n        {\n            return null;\n        }\n        var token = await GenerateToken();\n        return new AuthResponseDto\n        {\n            Token = token,\n            UserId = _user.Id\n        };\n    }\n```", "```cs\nprivate async Task<string> GenerateToken()\n{\n        var securitykey = new SymmetricSecurityKey\n            (Encoding.UTF8.GetBytes(_configuration[\"\n               Jwt:Key\"]));\n        var credentials = new SigningCredentials\n            (securitykey, SecurityAlgorithms.HmacSha256);\n        var roles = await _userManager.GetRolesAsync\n            (_user);\n        var roleClaims = roles.Select(x => new\n            Claim(ClaimTypes.Role, x)).ToList();\n        var userClaims = await _userManager.GetClaimsAsync\n           (_user);\n        var claims = new List<Claim>\n        {\n            new Claim(JwtRegisteredClaimNames.Sub,\n                _user.Email),\n            new Claim(JwtRegisteredClaimNames.Jti,\n                Guid.NewGuid().ToString()),\n            new Claim(JwtRegisteredClaimNames.Email,\n                _user.Email),\n            new Claim(\"uid\", _user.Id),\n        }\n        .Union(userClaims).Union(roleClaims);\n        var token = new JwtSecurityToken(\n            issuer: _configuration[\" Jwt:Issuer\"],\n            audience: _configuration[\" Jwt:Audience\"],\n            claims: claims,\n            expires: DateTime.Now.AddMinutes\n                (Convert.ToInt32(_configuration[\"\n                    Jwt:DurationInMinutes\"])),\n            signingCredentials: credentials\n            );\n        return new JwtSecurityTokenHandler()\n            .WriteToken(token);\n    }\n}\n```", "```cs\nbuilder.Services.AddScoped<IAuthManager, AuthManager>();\n```", "```cs\n{\n  \"userId\": \"408aa945-3d84-4421-8342-7269ec64d949\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJz\n  dWIiOiJhZG1pbkBsb2NhbGhvc3QuY29tIiwianRpIjoiZWU5ZjI4OD\n  ItMWFkZC00ZTZkLThlZjktY2Q1ZjFlOWM3ZjMzIiwiZW1haWwiOiJhZ\n  G1pbkBsb2NhbGhvc3QuY29tIiwidWlkIjoiNDA4YWE5NDUtM2Q4NC00\n  NDIxLTgzNDItNzI2OWVjNjRkOTQ5IiwiZXhwIjoxNjY5ODI4MzMwLCJ\n  pc3MiOiJIb3RlbExpc3RpbmdBUEkiLCJhdWQiOiJIb3RlbExpc3Rpbm\n  dBUElDbGllbnQifQ.yuYUIFKPTyKKUpsVQhbS4NinGLSF5_XXPEBtAEf\n  jO5E\"\n}\n```", "```cs\ndotnet new --install Duende.IdentityServer.Templates\n```", "```cs\nvar isBuilder = builder.Services\n                .AddIdentityServer(options =>\n                {\n                    options.Events.RaiseErrorEvents = true;\n                    options.Events.RaiseInformationEvents =\n                        true;\n                    options.Events.RaiseFailureEvents =\n                        true;\n                    options.Events.RaiseSuccessEvents =\n                        true;\n                     options.EmitStaticAudienceClaim =\n                        true;\n                })\n                .AddTestUsers(TestUsers.Users)\n                .AddConfigurationStore(options =>\n                {\n                    options.ConfigureDbContext = b =>\n                        b.UseSqlite(connectionString,\n                        dbOpts => dbOpts.MigrationsAssembly\n                        (typeof(Program).Assembly\n                         .FullName));\n                })       .AddOperationalStore(options =>\n                {\n                    options.ConfigureDbContext = b =>\n                        b.UseSqlite(connectionString,\n                        dbOpts => dbOpts.MigrationsAssembly\n                        (typeof(Program).Assembly.FullName\n                        ));\n                     options.EnableTokenCleanup = true;\n                    options.RemoveConsumedTokens = true;\n                });\n```", "```cs\nUpdate-Database -context PersistedGrantDbContext\nUpdate-Database -context ConfigurationDbContext\n```", "```cs\npublic static IEnumerable<IdentityResource>\n    IdentityResources =>\n            new IdentityResource[]\n            {\n            new IdentityResources.OpenId(),\n            new IdentityResources.Profile(),\n            new IdentityResource(\"roles\", \"User role(s)\",\n                new List<string> { \"role\" })\n            };\n```", "```cs\npublic static Ienumerable<ApiScope> ApiScopes =>\n            new ApiScope[]\n            {\n                new ApiScope(\"healthcareApiUser\",\n                    \"HealthCare API User\"),\n                new ApiScope(\"healthcareApiClient\",\n                    \"HealthCare API Client \"),\n            };\n```", "```cs\npublic static IEnumerable<Client> Clients =>\n            new Client[]\n            {\n            // m2m client credentials flow client\n            new Client\n            {\n                ClientId = \"m2m.client\",\n                ClientName = \"Client Credentials Client\",\n                AllowedGrantTypes = GrantTypes\n                    .ClientCredentials,\n                ClientSecrets = { new Secret(\"511536EF-\n                   F270-4058-80CA-1C89C192F69A \".Sha256())\n                       },\n                AllowedScopes = { \"healthcareApiClient\" }\n            },\n            // interactive client using code flow + pkce\n            new Client\n            {\n                ClientId = \"interactive\",\n                ClientSecrets = { new Secret(\"49C1A7E1-\n                  0C79-4A89-A3D6-A37998FB86B0\".Sha256()) },\n                AllowedGrantTypes = GrantTypes.Code,\n                RedirectUris = {\n                    \"https://localhost:5001/signin-oidc\" },\n                FrontChannelLogoutUri =\n                    \"https://localhost:5001/signout-oidc\",\n                PostLogoutRedirectUris = {\n                   \"https://localhost:5001/signout-\n                      callback-oidc\" },\n                AllowOfflineAccess = true,\n                AllowedScopes = { \"openid\", \"profile\",\n                    \"healthcareApiUser\", \"roles\" }\n            },\n            };\n```", "```cs\n\"profiles\": {\n    \"SelfHost\": {\n      \"commandName\": \"Project\",\n      \"launchBrowser\": true,\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      },\n      \"applicationUrl\": \"https://localhost:5001\",\n      \"commandLineArgs\": \"/seed\"\n    }\n```", "```cs\n{\n    \"issuer\": \"https://localhost:5001\",\n    \"jwks_uri\": \"\n        https://localhost:5001/.well-known/openid-\n        configuration/jwks\",\n    \"authorization_endpoint\": \"\n        https://localhost:5001/\n        connect/authorize\",\n    \"token_endpoint\": \"\n        https://localhost:5001/connect/\n        token\",\n    \"userinfo_endpoint\": \"\n        https://localhost:5001/connect/\n        userinfo\",\n    \"end_session_endpoint\": \"\n        https://localhost:5001/connect\n        /endsession\",\n    \"check_session_iframe\": \"\n        https://localhost:5001/connect\n        /checksession\",\n    \"revocation_endpoint\": \"\n        https://localhost:5001/connect\n       /revocation\",\n    \"introspection_endpoint\": \"\n        https://localhost:5001/\n        connect/introspect\",\n    \"device_authorization_endpoint\": \"\n        https://localhost:5001/connect/deviceauthorization\",\n    \"backchannel_authentication_endpoint\":\n        \"https://localhost:5001/connect/ciba\",\n   ...\n    \"scopes_supported\": [\n        \"openid\",\n        \"profile\",\n        \"roles\",\n        \"healthcareApiUser\",\n        \"healthcareApiClient\",\n        \"offline_access\"\n    ],\n...\n}\n```", "```cs\nInstall-Package Microsoft.AspNetCore.Authentication\n  .JwtBearer\n```", "```cs\nbuilder.Services.AddAuthentication(JwtBearerDefaults\n     .AuthenticationScheme)\n            .AddJwtBearer(options =>\n            {\n                // base-address of your identityserver\n                options.Authority =\n                    \"https://localhost:5001/\";\n                // audience is optional, make sure you read\n                   the following paragraphs\n                // to understand your options\n                options.TokenValidationParameters\n                    .ValidateAudience = false;\n                // it's recommended to check the type\n                header to avoid \"JWT confusion\" attacks\n                options.TokenValidationParameters\n                    .ValidTypes = new[] { \"at+jwt\" };\n            });\n```", "```cs\napp.UseAuthentication();\napp.UseAuthorization();\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"RequireAuth\", policy =>\n    {\n        policy.RequireAuthenticatedUser();\n    });\n});\n```", "```cs\napp.MapControllers().RequireAuthorization(\"RequireAuth\");\n```", "```cs\nbuilder.Services.AddAuthentication(JwtBearerDefaults\n    .AuthenticationScheme)\n   .AddJwtBearer(\"Bearer\", opt =>\n   {\n       opt.RequireHttpsMetadata = false;\n```", "```cs\nInstall-Package Microsoft.AspNetCore.Authentication\n  .JwtBearer\n```", "```cs\n{\n  \"DownstreamPathTemplate\": \"/api/Patients\",\n  ...\n  \"AuthenticationOptions\": {\n        \"AuthenticationProviderKey\":\n            \"IdentityServerApiKey\",\n        \"AllowedScopes\": []\n      },\n…\n},\n```", "```cs\nbuilder.Services\n    .AddAuthentication()\n    .AddJwtBearer(authenticationProviderKey, x =>\n    {\n        x.Authority = \"https://localhost:5001\";\n        x.TokenValidationParameters = new\n            TokenValidationParameters\n        {\n            ValidateAudience = false\n        };\n    });\n```"]