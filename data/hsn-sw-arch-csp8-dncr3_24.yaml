- en: Challenges of Applying CI Scenarios in DevOps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DevOps 中应用 CI 场景的挑战
- en: '**Continuous Integration **(**CI**) is a step ahead of DevOps. In the previous
    chapter, we discussed the basics of CI and how DevOps depends on it. Its implementation
    was presented in [Chapter 18](94c84805-6921-4b9b-9f11-745dce643f53.xhtml), *Understanding
    DevOps Principles*, too, but differently from the other practical chapters, the
    purpose of this chapter is discussing how to enable CI in a real scenario, considering
    the challenges that you, as a software architect, will need to deal with.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成（CI）**(**CI**) 是 DevOps 的一步。在前一章中，我们讨论了持续集成（CI）的基础以及 DevOps 如何依赖于它。其实现也在[第
    18 章](94c84805-6921-4b9b-9f11-745dce643f53.xhtml)，*理解 DevOps 原则*中介绍，但与其他实践章节不同，本章的目的是讨论如何在真实场景中启用持续集成（CI），考虑到你作为软件架构师需要应对的挑战。'
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Understanding CI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解持续集成（CI）
- en: Understanding the risks and challenges when using CI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解使用持续集成（CI）时的风险和挑战
- en: Understanding the WWTravelClub project approach for this chapter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解本章的 WWTravelClub 项目方法
- en: Like in the previous chapter, the sample of the WWTravelClub will be presented
    during the explanation of the chapter, since all the screens captured to exemplify
    CI came from it. Besides this, we will offer a conclusion at the end of the chapter so
    you can understand CI principles easily.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一章所述，在解释本章内容时，将展示 WWTravelClub 的示例，因为所有用于说明持续集成（CI）的屏幕截图都来自它。此外，我们将在本章末尾提供一个结论，以便你能够轻松理解持续集成（CI）的原则。
- en: By the end of the chapter, you will be able to decide whether or not to use
    CI in your project environment. Additionally, you will be able to define the tools
    needed for the successful use of this approach.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够决定是否在你的项目环境中使用持续集成（CI）。此外，你将能够定义成功使用此方法所需的工具。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Visual Studio 2019 Community Edition or better. You may
    also need an Azure DevOps account, as described in [Chapter 3](bc26065f-b001-4123-9524-3bbfa87bfadd.xhtml),
    *Documenting Requirements with Azure DevOps*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要 Visual Studio 2019 Community Edition 或更高版本。你可能还需要一个 Azure DevOps 账户，如第
    3 章[使用 Azure DevOps 记录需求](bc26065f-b001-4123-9524-3bbfa87bfadd.xhtml)中所述。
- en: Understanding CI
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解持续集成（CI）
- en: As soon as you start working with a platform such as Azure DevOps, enabling
    CI will definitely be easy when it comes to clicking on the options for doing
    so, as we saw in [Chapter 18](94c84805-6921-4b9b-9f11-745dce643f53.xhtml), *Understanding
    DevOps Principles*. So, technology is not the Achilles' heel for implementing
    this process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始使用 Azure DevOps 等平台，启用持续集成（CI）在点击相应的选项时将变得非常容易，正如我们在[第 18 章](94c84805-6921-4b9b-9f11-745dce643f53.xhtml)，*理解
    DevOps 原则*中看到的。因此，技术并不是实施此过程的阿基里斯之踵。
- en: 'The following screenshot shows an example of how easy it is to turn on CI using
    Azure DevOps. By clicking in the build pipeline and editing it, you will be able
    to set a trigger that enables CI after some clicks:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了使用 Azure DevOps 启用持续集成（CI）是多么容易。通过点击构建管道并编辑它，你将能够设置一个触发器，在几次点击后启用持续集成（CI）：
- en: '![](img/f57caac3-6103-4833-a17e-082a6c739f89.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f57caac3-6103-4833-a17e-082a6c739f89.png)'
- en: The truth is that CI will help you solve some problems. For instance, it will
    force you to test your code, since you will need to commit the changes faster,
    so other developers can make use of the code you are programming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，持续集成（CI）将帮助你解决一些问题。例如，它将迫使你测试你的代码，因为你需要更快地提交更改，以便其他开发者可以使用你正在编写的代码。
- en: On the other hand, you will not enable CI just by clicking on the preceding
    screenshot. For sure, you will turn on the possibility of starting a build as
    soon as you get a commit done and the code is done, but this is far from saying
    you have CI available in your solution.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，你仅仅通过点击前面的截图并不能启用持续集成（CI）。当然，一旦你完成提交并且代码已经完成，你将能够启动构建的可能性，但这远不能说明你在解决方案中已经有了持续集成（CI）。
- en: The reason why you as a software architect need to worry a bit more about it
    is related to the real understanding of what DevOps is. As discussed in [Chapter
    18](94c84805-6921-4b9b-9f11-745dce643f53.xhtml), *Understanding DevOps Principles*,
    the need to deliver value to the end user will always be a good way to decide
    and draw the development life cycle. So, even if turning on CI is easy, what is
    the impact of this feature being enabled for your end user? Once you have all
    the answers to this question and you know how to reduce the risks of its implementation,
    then you will be able to say that you have a CI process implemented.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件架构师，你需要更加关注它的原因与对DevOps的真正理解有关。正如在第18章[理解DevOps原则](94c84805-6921-4b9b-9f11-745dce643f53.xhtml)中讨论的，向最终用户提供价值始终是决定和绘制开发生命周期的良好方式。因此，即使开启CI很容易，这个功能对最终用户的影响是什么？一旦你有了对这个问题的所有答案，并且你知道如何降低其实施的风险，那么你就可以说你已经实施了一个CI流程。
- en: It is worth mentioning that CI is a principle that will make DevOps work better
    and faster, as was discussed in [Chapter 18](94c84805-6921-4b9b-9f11-745dce643f53.xhtml),
    *Understanding DevOps Principles*. However, DevOps surely can live without it,
    once you are not sure if your process is mature enough to enable code being continuously
    delivered. More than that, if you turn on CI in a team that is not mature enough
    to deal with its complexity, you will probably cause a bad understanding of DevOps,
    since you will start incurring some risks while deploying your solution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，CI是一个可以使DevOps工作得更好、更快的原则，正如在第18章[理解DevOps原则](94c84805-6921-4b9b-9f11-745dce643f53.xhtml)中讨论的。然而，一旦你不确定你的流程是否足够成熟以实现代码的持续交付，DevOps完全可以没有它。更重要的是，如果你在一个处理其复杂性还不够成熟的团队中开启CI，你可能会对DevOps产生误解，因为你将在部署解决方案时开始承担一些风险。
- en: This is the reason why we are dedicating an extra chapter on CI. You need to
    understand the risks and challenges you will have as a software architect once
    you turn CI on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们专门用额外的一章来介绍CI。你需要了解一旦开启CI，作为软件架构师你将面临的风险和挑战。
- en: Understanding the risks and challenges when using CI
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CI时的风险和挑战理解
- en: Now, you may be thinking about the risks and challenges as a way for you to
    avoid using CI. But why should we avoid using it if it will help you do a better
    DevOps process? This is not the purpose of the chapter. The idea of this section
    is to help you, as a software architect, to mitigate the risks and find a better
    way to pass through the challenges using good processes and techniques.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能正在考虑风险和挑战作为避免使用CI的一种方式。但为什么我们要避免使用它，如果它可以帮助你更好地进行DevOps流程呢？这不是本章的目的。本节的想法是帮助你，作为软件架构师，通过良好的流程和技术来减轻风险，找到更好的方法来克服挑战。
- en: 'The list of risks and challenges that will be discussed in the chapter are
    as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的风险和挑战列表如下：
- en: Continuous production deployment
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续生产部署
- en: Incomplete features in the production
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产中的不完整功能
- en: Unstable solutions for testing
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试中的不稳定解决方案
- en: Once you have the techniques and the processes defined to deal with them, there
    is no reason to not use CI. It is worth mentioning that DevOps does not depend
    on CI. However, it does make DevOps work more softly. Now, let's have a look at
    them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了处理它们的技巧和流程，就没有不使用CI的理由。值得一提的是，DevOps并不依赖于CI。然而，它确实使DevOps工作更加顺畅。现在，让我们来看看它们。
- en: Disabling continuous production deployment
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用持续生产部署
- en: Continuous production deployment is a process where, after a commit of a new
    piece of code and some pipeline steps, you will have this code in the production
    environment. This is not impossible but is really hard and expensive to do. Besides,
    you need to have a really mature team. The problem is that most of the demos and
    samples you will find on the internet presenting CI will show you a fast-track
    to deploy the code. The demonstrations of CI/CD look so simple and easy to do!
    This *simplicity* can suggest you work as soon as possible on its implementation. However,
    if you think a little more, this scenario can be dangerous if you deploy directly
    in production! In a solution that needs to be available 24 hours a day, 7 days
    a week, this is impractical. So, you will need to worry about that and think of
    different solutions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 持续生产部署是一个过程，在提交新代码片段和一些管道步骤之后，你将在生产环境中拥有这段代码。这并非不可能，但确实很难且成本高昂。此外，你需要一个真正成熟的团队。问题是，你将在互联网上找到的大多数演示和示例都会展示CI的快速部署路径。CI/CD的演示看起来非常简单和容易操作！这种*简单性*可能会让你尽快开始实施。然而，如果你稍微思考一下，直接在生产环境中部署可能会很危险！在一个需要每天24小时、每周7天都可用解决方案中，这是不切实际的。因此，你需要担心这一点，并考虑不同的解决方案。
- en: 'The first one is the use of a multi-stage scenario, as described in [Chapter
    18](94c84805-6921-4b9b-9f11-745dce643f53.xhtml), *Understanding DevOps Principles*.
    The multi-stage scenario can bring more security to the ecosystem of the deployment
    you are building. Besides, you will get more options to avoid wrong deployments
    into production, such as pre-deployment approvals:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法是使用多阶段场景，如[第18章](94c84805-6921-4b9b-9f11-745dce643f53.xhtml)中所述的*理解DevOps原则*。多阶段场景可以为构建的部署生态系统带来更多安全性。此外，你将获得更多选项来避免错误的生产部署，例如预部署批准：
- en: '![](img/a694759e-0730-4a80-96c0-78b22dfd6f82.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a694759e-0730-4a80-96c0-78b22dfd6f82.png)'
- en: It is worth mentioning, too, that you can build a deployment pipeline where
    all your code and software structure will be updated by this tool. However, if
    you have something out of this scenario, such as database scripts and environment
    configurations, a wrong publication into production may cause damage to end users.
    Besides, the decision of when the production will be updated needs to be planned
    and, in many scenarios, all the platform users need. Use a *change management*
    procedure in these cases needs to be decided.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，你可以构建一个部署管道，其中所有代码和软件结构都将由这个工具更新。然而，如果你有超出这个场景的内容，比如数据库脚本和环境配置，错误的生产发布可能会对最终用户造成损害。此外，何时更新生产环境的决定需要计划，在许多场景中，所有平台用户都需要。在这些情况下，使用*变更管理*程序需要决定。
- en: So, the challenge of delivering code to production will make you think about
    a schedule to do so. It does not matter if your cycle is monthly, daily, or even
    at each commit. The key point here is that you need to create a process and a
    pipeline that guarantees that only good and approved software is in the production
    stage.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将代码部署到生产环境所带来的挑战会让你考虑制定一个部署的时间表。无论是按月、按日，甚至是每次提交后，这都无关紧要。关键点在于你需要创建一个流程和管道，确保只有良好且经过批准的软件处于生产阶段。
- en: Incomplete features
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不完整的特性
- en: 'While a developer of your team is creating a new feature or fixing a bug, you
    will probably consider generating a branch that can avoid the use of the branch
    designed for continuous delivery. A branch can be considered a feature available
    in code repositories to enable the creation of an independent line of development
    since it isolates the code. As you can see in the following screenshot, creating
    a branch using Visual Studio is quite simple:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的团队中的开发者正在创建新功能或修复错误时，你可能会考虑生成一个分支，以避免使用为持续交付设计的分支。分支可以被视为代码仓库中的一项功能，它允许创建一个独立的开发线，因为它隔离了代码。正如你可以在下面的屏幕截图中所见，使用Visual
    Studio创建分支相当简单：
- en: '![](img/6a9163cb-9564-4941-a9fd-323d86ec3eb7.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6a9163cb-9564-4941-a9fd-323d86ec3eb7.png)'
- en: This seems to be a good approach, but let's suppose that the developer has considered
    the implementation ready for deploying and has just merged the code into the master
    branch. What if this feature is not ready yet, just because a requirement was
    omitted? What if the bug has caused an incorrect behavior? The result can be a
    release with an incomplete feature or an incorrect fix.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是一个好方法，但让我们假设开发者已经认为实现已经准备好部署，并且刚刚将代码合并到主分支。如果因为这个要求被遗漏，这个功能还没有准备好，会发生什么？如果错误导致了不正确的行为，结果可能是一个带有不完整功能或错误修复的发布。
- en: 'A good practice to avoid broken features and even wrong fixes in the master
    branch is the use of pull requests. Pull requests will let other team developers
    know that the code you developed is ready to be merged. The following screenshot
    shows how you can use Azure DevOps to create a New Pull Request for a change you
    have made:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在主分支中引入损坏的功能甚至错误的修复措施的好做法是使用拉取请求。拉取请求将让其他团队成员知道你开发的代码已准备好合并。以下截图显示了如何使用Azure
    DevOps创建一个针对你所做的更改的新拉取请求：
- en: '![](img/1da2c9b5-89d2-4b5e-b666-bc26a3f505e4.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1da2c9b5-89d2-4b5e-b666-bc26a3f505e4.png)'
- en: 'Once the pull request is created and the reviewers are defined, each reviewer
    will be able to analyze the code and decide whether this code is healthy enough
    to be in the master branch. The following screenshot shows a way to check it by
    using the compare tool to analyze the change:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了拉取请求并定义了审查者，每个审查者都将能够分析代码并决定这些代码是否足够健康，可以放入主分支。以下截图显示了如何通过使用比较工具来分析更改来检查它：
- en: '![](img/3738a72b-ec3a-469f-a1d5-4bc0103878f7.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3738a72b-ec3a-469f-a1d5-4bc0103878f7.png)'
- en: 'Once all approvals are done, you will be able to safely merge the code to the
    master branch, as you can see in the following screenshot. To merge the code,
    you will need to click on Complete merge. If the CI trigger is enabled, as shown
    earlier in the chapter, Azure DevOps will start a build pipeline:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有审批都完成，你将能够安全地将代码合并到主分支，如下面的截图所示。要合并代码，你需要点击“完成合并”。如果CI触发器已启用，如本章前面所示，Azure
    DevOps将启动构建管道：
- en: '![](img/66fdc5c1-d45a-4c71-b95d-3746b6f34019.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/66fdc5c1-d45a-4c71-b95d-3746b6f34019.png)'
- en: There is no way to argue that without a process like this, the master branch
    will suffer from many bad code being deployed that can cause damage together with
    CD. It is worth mentioning that the code review is an excellent practice in CI/CD
    scenarios, and it is considered a wonderful practice for creating good quality
    in any software as well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 没有办法争论，如果没有这样的流程，主分支将遭受许多糟糕的代码部署，这可能会与CD一起造成损害。值得一提的是，代码审查在CI/CD场景中是一种优秀的实践，并且被认为是在任何软件中创建良好质量的绝佳实践。
- en: The challenge that you need to focus on here is guaranteeing that only entire
    features will appear to your end users. You may use for solving it the feature
    flag principle, which is a technique that makes sure only features that are ready
    are presented to end users. Again, we are not talking about CI as a tool, but
    as a process to be defined and used every single time you need to deliver code
    for production.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要关注这里的挑战是确保只有完整的功能会出现在最终用户面前。你可以使用功能标志原则来解决它，这是一种确保只有准备好的功能呈现给最终用户的技巧。再次强调，我们不是在谈论CI作为一个工具，而是在谈论一个需要在每次需要向生产交付代码时定义和使用的流程。
- en: Unstable solution for testing
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试的不稳定解决方案
- en: Considering that you have already mitigated the two other risks presented in
    this topic, you may find it pretty hard to have bad code after CI. It is true
    that the worries presented earlier will certainly be lower considering the fact
    that you are working with a multi-stage scenario and pull requests before pushing
    to the first stage.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到你已经缓解了本主题中提到的其他两个风险，你可能会发现，在CI之后编写出糟糕的代码相当困难。确实，考虑到你正在处理多阶段场景并在推送至第一阶段之前提交拉取请求，之前提出的担忧肯定会降低。
- en: But is there a way to accelerate the evaluation of release, being sure that
    this new release is ready for your stakeholder's tests? Yes, there is! Technically,
    the way you can do so is described in the use cases of [Chapter 15](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml),
    *Testing Your Code with Unit Test Cases a**nd TDD*, and [Chapter 20](e61b3c5d-3abd-4442-9c9c-e12fd3acedcc.xhtml),
    *Automation for Software Testing*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有没有一种方法可以加速发布版本的评估，确保这个新版本已经准备好供利益相关者进行测试？是的，有！从技术上讲，你可以这样做的方式在[第15章](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml)的用例中描述，*使用单元测试用例和TDD测试你的代码*，以及[第20章](e61b3c5d-3abd-4442-9c9c-e12fd3acedcc.xhtml)的*软件测试自动化*中。
- en: As discussed in both those chapters, it is impracticable to automate every single
    part of the software, considering the efforts needed to do so. Besides, the maintenance
    of automation can be more expensive in scenarios where the user interface or the
    business rules change a lot.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这两章所讨论的，考虑到实现自动化所需的努力，自动化软件的每一个部分都是不切实际的。此外，在用户界面或业务规则变化很大的场景中，自动化的维护可能更加昂贵。
- en: 'To exemplify it, let''s have a look at the following screenshot, which shows
    the unit and functional tests created by Azure DevOps when the WWTravelClub project
    is started:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，让我们看一下以下截图，它显示了当WWTravelClub项目启动时Azure DevOps创建的单元测试和功能测试：
- en: '![](img/1b21f9b1-ac3f-4d12-a1f1-89a463ed44d9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b21f9b1-ac3f-4d12-a1f1-89a463ed44d9.png)'
- en: There are some architectural patterns, such as SOLID, presented in [Chapter
    9](a2d50e08-6698-47f6-a9b5-188de08134c0.xhtml), *Design Patterns and .NET Core
    Implementation*, and quality assurance approaches, such as peer review, that will
    give you better results than software testing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](a2d50e08-6698-47f6-a9b5-188de08134c0.xhtml)“设计模式和.NET Core实现”中介绍了某些架构模式，如SOLID，以及一些质量保证方法，如同行评审，这些方法将比软件测试提供更好的结果。
- en: However, these approaches do not invalidate automation practice. The truth is
    that all of them will be useful for getting a stable solution, especially when
    you are running a CI scenario. In this environment, the best thing you can do
    is to detect errors and wrong behaviors as fast as you can. Both unit and functional
    tests, as shown earlier, will help you with this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些方法并没有使自动化实践失效。事实是，所有这些方法在获得稳定解决方案时都将是有用的，尤其是在你运行CI场景时。在这种情况下，你能做的最好的事情就是尽可能快地检测错误和不良行为。正如前面所展示的，单元测试和功能测试都将帮助你做到这一点。
- en: 'Unit tests will help you a lot while discovering business logic errors before
    deployment, during the building pipeline. For instance, in the following screenshot,
    you will find a simulated error that canceled the build since the unit test did
    not pass:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试在部署前发现业务逻辑错误时将非常有帮助，尤其是在构建管道期间。例如，在以下截图中，你将找到一个模拟的错误，由于单元测试未通过，该错误取消了构建：
- en: '![](img/4d978df6-4805-403c-8c8c-ad58718c16b7.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d978df6-4805-403c-8c8c-ad58718c16b7.png)'
- en: The way to get this error is quite simple. You need to code something that does
    not respond according to what the unit tests are checking. Once you commit it,
    considering you have the trigger of continuous deployment on, you will have the
    code building in the pipeline. One of the last steps provided by the Azure DevOps
    Project Wizard we have created is the execution of the unit tests. So, after the
    build of the code, the unit tests will run. If the code does not match the tests
    anymore, you will get the error.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 获取这种错误的方法相当简单。你需要编写一些代码，这些代码不会根据单元测试所检查的内容做出响应。一旦你提交了它，考虑到你开启了持续部署的触发器，你的代码将在管道中构建。我们创建的Azure
    DevOps项目向导提供的最后一步是执行单元测试。因此，在代码构建之后，单元测试将会运行。如果代码不再匹配测试，你将得到错误。
- en: 'Meanwhile, the following screenshot shows an error during the functional tests
    in the Development/Tests stage. At this moment, the Development/Tests environment
    has a bug that was rapidly detected by functional tests:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，以下截图显示了在开发/测试阶段功能测试期间出现的错误。此时，开发/测试环境存在一个被功能测试快速检测到的错误：
- en: '![](img/f192881d-5f7d-4a01-9c6c-ce5cc904cced.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f192881d-5f7d-4a01-9c6c-ce5cc904cced.png)'
- en: 'But this is not the only good thing about applying functional tests in the
    process of CI/CD, once you have protected other deployment stages with this approach.
    For instance, let''s take a look at the following screenshot from the Release
    pipeline interface in Azure DevOps. If you look at Release-9, you will realize
    that since this error happened after the publication in the Development/Tests
    environment, the multi-staged environment will protect the other stages of the
    deployment:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是在CI/CD过程中应用功能测试的唯一好处，一旦你用这种方法保护了其他部署阶段。例如，让我们看一下以下来自Azure DevOps发布管道界面的截图。如果你查看Release-9，你会意识到自从这个错误在开发/测试环境发布后发生，多阶段环境将保护部署的其他阶段：
- en: '![](img/acf1c1ea-946e-4322-bd1b-b5937476833e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/acf1c1ea-946e-4322-bd1b-b5937476833e.png)'
- en: The key point to success in the CI process is to think about it as a useful
    tool for accelerating the delivery of software and to not forget that a team always
    needs to deliver value to their end users. With this approach, the techniques
    presented earlier will provide incredible ways to achieve the results that your
    team aims for.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成（CI）过程成功的关键是将它视为加速软件交付的有用工具，并不要忘记团队始终需要向最终用户提供价值。采用这种方法，前面介绍的技术将提供实现团队目标结果的惊人方式。
- en: Understanding the WWTravelClub project approach
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解WWTravelClub项目的方法
- en: 'During the chapter, WWTravelClub project screenshots were present, exemplifying
    the steps for getting a safer approach while enabling CI. Even considering WWTravelClub
    as a hypothetical scenario, some concerns were taken into account while building
    it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，WWTravelClub项目的截图展示了在启用持续集成（CI）的同时获得更安全方法的过程。即使将WWTravelClub视为一个假设场景，在构建它时也考虑了一些担忧：
- en: CI is enabled, but a multi-stage scenario is enabled too.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成（CI）已启用，但多阶段场景也已启用。
- en: Even with a multi-stage scenario, the pull request is a way to guarantee that
    only code with good quality will be presented in the first stage.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使是多阶段场景，拉取请求也是一种保证在第一阶段只展示高质量代码的方式。
- en: To do a good job in the pull request, peer reviews are undertaken.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要做好拉取请求的工作，需要进行同行评审。
- en: The peer reviews check, for instance, the presence of a feature flag while creating
    a new feature.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，同行评审检查在创建新功能时是否存在功能标志。
- en: The peer reviews check both unit and functional tests developed during the creation
    of the new feature.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同行评审检查在创建新功能期间开发的单元测试和功能测试。
- en: The preceding steps are not exclusively for WWTravelClub. You as a software
    architect will need to define the approach to guarantee a safe CI scenario. You
    may use this as a starting point.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的步骤不仅适用于WWTravelClub。作为软件架构师，您需要定义保证安全持续集成（CI）场景的方法。您可以将此作为起点。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered the importance of understanding when you can enable CI
    in the software development life cycle, considering the risks and challenges you
    will take as a software architect once you decide to have it done in your solution.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在软件开发生命周期中何时启用持续集成（CI）的重要性，并考虑了您一旦决定在解决方案中实施它，作为软件架构师将面临的潜在风险和挑战。
- en: Additionally, the chapter introduced some solutions and concepts that can make
    this process easier, such as multi-stage environments, pull request reviews, feature
    flags, peer reviews, and automated tests. Understanding these techniques and processes
    will enable you to guide your project to a safer behavior when it comes to CI
    in a DevOps scenario.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本章还介绍了一些可以使此过程更容易的解决方案和概念，例如多阶段环境、拉取请求评审、功能标志、同行评审和自动化测试。理解这些技术和流程将使您能够引导项目在DevOps场景中的持续集成（CI）方面表现出更安全的行为。
- en: In the next chapter, we will see how automation for software testing works.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到软件测试自动化的工作原理。
- en: Questions
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is CI?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是持续集成（CI）？
- en: Can you have DevOps without CI?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在没有持续集成（CI）的情况下进行DevOps吗？
- en: What are the risks of enabling CI in a non-mature team?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个不成熟的团队中启用持续集成（CI）有哪些风险？
- en: How can a multi-stage environment help CI?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多阶段环境如何帮助持续集成（CI）？
- en: How can automated tests help CI?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化测试如何帮助持续集成（CI）？
- en: How can pull requests help CI?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求如何帮助持续集成（CI）？
- en: Do pull requests only work with CI?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求是否仅与持续集成（CI）一起工作？
- en: Further reading
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are some websites where you will find more information on the topics
    covered in this chapter:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些网站，您可以在这些网站上找到关于本章涵盖主题的更多信息：
- en: '[https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps/](https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps/](https://azure.microsoft.com/en-us/solutions/architecture/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps/)'
- en: '[https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github](https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github](https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-github)'
- en: '[https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd](https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd](https://docs.microsoft.com/en-us/aspnet/core/azure/devops/cicd)'
- en: '[https://www.packtpub.com/virtualization-and-cloud/professional-microsoft-azure-devops-engineering](https://www.packtpub.com/virtualization-and-cloud/professional-microsoft-azure-devops-engineering)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《专业Microsoft Azure DevOps工程》](https://www.packtpub.com/virtualization-and-cloud/professional-microsoft-azure-devops-engineering)'
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video](https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《动手实践DevOps Azure视频教程》](https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video)'
- en: '[https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure](https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《在Microsoft Azure中实施DevOps》](https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure)'
- en: '[https://docs.microsoft.com/en-us/azure/devops/repos/git/pullrequest](https://docs.microsoft.com/en-us/azure/devops/repos/git/pullrequest)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Microsoft Azure DevOps中的Git拉取请求》](https://docs.microsoft.com/en-us/azure/devops/repos/git/pullrequest)'
- en: '[https://devblogs.microsoft.com/devops/whats-new-with-azure-pipelines/](https://devblogs.microsoft.com/devops/whats-new-with-azure-pipelines/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Azure Pipelines的最新动态》](https://devblogs.microsoft.com/devops/whats-new-with-azure-pipelines/)'
- en: '[https://martinfowler.com/bliki/FeatureToggle.html](https://martinfowler.com/bliki/FeatureToggle.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《特性切换》](https://martinfowler.com/bliki/FeatureToggle.html)'
