["```cs\n/// <summary>\n/// This class is responsible for tracking information\n/// about current and pending flights\n/// </summary>\npublic class FlightScheduler {\n  // Details omitted\n}\n```", "```cs\npublic class ItineraryManager {\n  public int MilesAccumulated {get; private set;}\n  public FlightInfo? Flight {get; private set;}\n  public virtual void FlightCompleted(FlightInfo? next) {\n    if (Flight != null) {\n      AccumulateMiles(Flight.Miles);\n    }\n    Flight = next;\n  }\n  public virtual void ChangeFlight(FlightInfo newFlight,\n    bool isInvoluntary) =>\n    Flight = newFlight;\n  public void AccumulateMiles(int miles) =>\n    MilesAccumulated += miles;\n}\n```", "```cs\npublic class RewardsItineraryManager : ItineraryManager {\n  private const int BonusMilesPerFlight = 100;\n  public override void FlightCompleted(FlightInfo? next) {\n    base.FlightCompleted(next);\n    AccumulateMiles(BonusMilesPerFlight);\n  }\n  public override void ChangeFlight(FlightInfo newFlight,       bool isInvoluntary) {\n    if (isInvoluntary && Flight != null) {\n       AccumulateMiles(Flight.Miles);\n    }\n    base.ChangeFlight(newFlight, isInvoluntary);\n  }\n}\n```", "```cs\npublic virtual void FlightCompleted(FlightInfo? next) {\n  if (Flight != null) {\n    AccumulateMiles(Flight.Miles);\n  }\n  Flight = next;\n}\n```", "```cs\npublic class CargoFlightInfo : FlightInfo {\n  public decimal TonsOfCargo { get; set; }\n  public override int RewardMiles =>\n    throw new NotSupportedException();\n}\n```", "```cs\npublic interface IFlightRepository {\n  FlightInfo AddFlight(FlightInfo flight);\n  FlightInfo UpdateFlight(FlightInfo flight);\n  void CancelFlight(FlightInfo flight);\n  FlightInfo? FindFlight(string id);\n  IEnumerable<FlightInfo> GetActiveFlights();\n  IEnumerable<FlightInfo> GetPendingFlights();\n  IEnumerable<FlightInfo> GetCompletedFlights();\n}\n```", "```cs\npublic interface IFlightUpdater {\n  FlightInfo AddFlight(FlightInfo flight);\n  FlightInfo UpdateFlight(FlightInfo flight);\n  void CancelFlight(FlightInfo flight);\n}\npublic interface IFlightProvider {\n  FlightInfo? FindFlight(string id);\n  IEnumerable<FlightInfo> GetActiveFlights();\n  IEnumerable<FlightInfo> GetPendingFlights();\n  IEnumerable<FlightInfo> GetCompletedFlights();\n}\n```", "```cs\npublic class FlightBookingManager {\n  private readonly SpecificMailClient _email;\n  public FlightBookingManager(string connectionString) {\n    _email = new SpecificMailClient(connectionString);\n  }\n  public bool BookFlight(Passenger passenger,\n    PassengerFlightInfo flight, string seat) {\n    if (!flight.IsSeatAvailable(seat)) {\n      return false;\n    }\n    flight.AssignSeat(passenger, seat);\n    string message = \"Your seat is confirmed\";\n    _email.SendMessage(passenger.Email, message);\n    return true;\n  }\n}\n```", "```cs\npublic class FlightBookingManager {\n  private readonly IEmailClient _email;\n  public FlightBookingManager(IEmailClient email) {\n    _email = email;\n  }\n  public bool BookFlight(Passenger passenger,\n    PassengerFlightInfo flight, string seat) {\n    if (!flight.IsSeatAvailable(seat)) {\n      return false;\n    }\n    flight.AssignSeat(passenger, seat);\n    string message = \"Your seat is confirmed\";\n    _email.SendMessage(passenger.Email, message);\n    return true;\n  }\n}\n```", "```cs\npublic FlightInfo ReadFlightFromCsv(string csvLine) {\n  string[] parts = csvLine.Split(',');\n  const string fallback = \"Unknown\";\n  FlightInfo flight = new();\n  if (parts.Length > 0) {\n    flight.Id = parts[0]?.Trim() ?? fallback;\n  } else {\n    flight.Id = fallback;\n  }\n  if (parts.Length > 1) {\n    flight.DepartureAirport = parts[1]?.Trim() ?? fallback;\n  } else {\n    flight.DepartureAirport = fallback;\n  }\n  if (parts.Length > 2) {\n    flight.ArrivalAirport = parts[2]?.Trim() ?? fallback;\n  } else {\n    flight.ArrivalAirport = fallback;\n  }\n  // Other parsing logic omitted\n  return flight;\n}\n```", "```cs\nprivate string ReadFromCsv(string[] parts, int index,\n  string fallback = \"Unknown\") {\n  if (parts.Length > index) {\n    return parts[index]?.Trim() ?? fallback;\n  } else {\n    return fallback;\n  }\n}\npublic FlightInfo ReadFlightFromCsv(string csvLine) {\n  string[] parts = csvLine.Split(',');\n  FlightInfo flight = new();\n  flight.Id = ReadFromCsv(parts, 0);\n  flight.DepartureAirport = ReadFromCsv(parts, 1);\n  flight.ArrivalAirport = ReadFromCsv(parts, 2);\n  // Other parsing logic omitted\n  return flight;\n}\n```", "```cs\npublic interface IFlightUpdater {\n  FlightInfo AddFlight(FlightInfo flight);\n  FlightInfo UpdateFlight(FlightInfo flight);\n  void CancelFlight(FlightInfo flight);\n}\n```"]