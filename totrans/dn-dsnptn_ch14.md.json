["```cs\n    #include <stdio.h> \n    #include <cstring> \n    #include <Windows.h> \n\n    using namespace std; \n    //A C/C++ Windows DLL which exports a Function \n    //ListOfSquares to be consumed from C# programming \n    //language. The DLL is compiled using Minimalist \n    //GNU for Windows (MINGW),which is freely downloadable \n    // \n    //Compile and Link \n    //---------------- \n    //  gcc -c -o add_basic.o cpp_code.cpp \n    //  gcc -o add_basic.dll -s -shared add_basic.o -Wl, \n    //  --subsystem,windows \n    // \n\n    extern \"C\" __declspec(dllexport) void __stdcall \n    ListOfSquares( \n      long (__stdcall  *square_callback) (int rs) ) \n\n    { \n      for (int i = 0; i<10; ++i) {  \n        //---- Call the C# routine which handles the  \n        //---- integer and returns square.  \n        //---- This is a blocking call! \n\n        double ret = (*square_callback)(i); \n        printf(\"Printing from C/C++ ... %g\\n\", ret); \n      } \n    } \n\n```", "```cs\n    using System; \n    using System.Collections.Generic; \n    using System.Linq; \n    using System.Runtime.InteropServices; \n    using System.Text; \n    using System.Threading.Tasks; \n\n    namespace entrypoint \n    { \n      class Program \n      { \n        //--- Now you know, a C/C++ Function Pointer \n        //--- is indeed a delegate! \n        public delegate long CallBack(int i); \n        //--- Declare the Function Prototype of the Function \n        //--- We are planning to call from C/C++ \n        [DllImport(\"D:\\\\DLL_FOR_DEMO\\\\add_basic.dll\")] \n        private static extern long ListOfSquares(CallBack a); \n\n        public static long SpitConsole(int i) \n        { \n          Console.WriteLine(\"Printing from C# {0}\", i * i); \n          return i * i; \n        } \n\n        static void Main(string[] args) \n        { \n          ///////////////////////////// \n          // CallBack Demo \n          // Will print Square from C# and C++ \n          ListOfSquares(SpitConsole); \n        } \n      } \n    } \n\n```", "```cs\n    grammar Evaluator; \n\n    options { \n      language=CSharp3; \n    } \n\n    @lexer::namespace{AntlrExample} \n    @parser::namespace{AntlrExample} \n\n    public addop \n    : mulop (( '+' | '-' ) mulop)*; \n\n    mulop \n    : INTEGER (( '*' | '/' ) INTEGER)*; \n    /* \n      * Lexical Analysis Rules \n    */ \n\n    INTEGER : '0'..'9'+; \n    WS :  (' '|'\\t'|'\\r'|'\\n')+ {Skip();} ; \n\n```", "```cs\n    Boolean range_flag; \n    NUMERIC sum_value; \n\n    BEGIN  \n\n    //--- See whether B3 cell in the CONTROL worksheet \n    //--- present in the Relational database \n    VALIDATE  LOOKUP($(CONTROL.B3), \n    @(EI_SEGMENT_MAPPING.EI_SEGMENT_CODE))==TRUE; \n\n    //---- The Sum of Range should be 100 or Zero \n    range_flag = SUM_RANGE($(HOURLY_DISTRIBUTION.C2), \n    $(HOURLY_DISTRIBUTION.C25))  == 100.0; \n    range_flag =  range_flag || \n    SUM_RANGE($(HOURLY_DISTRIBUTION.C2), \n    $(HOURLY_DISTRIBUTION.C25)) == 0.0; \n\n    //--- If false throw exception \n    VALIDATE range_flag; \n\n    EXCEPTION \n    //----- on Exception execute this \n    ErrorString = \"FAILED WHILE VALIDATING CONTROL Sheet Or\" \n    ErrorString = ErroString +  \n    \" WorkSheet Error in the range C2-C25\"; \n    WRITELOG  ErrorString; \n    bResult = false; \n\n    END \n\n```", "```cs\n    <?xml version=\"1.0\"?> \n    <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \n    version=\"1.0\"> \n      <xsl:output method=\"xml\"/> \n      <xsl:template match=\"*\"> \n        <xsl:element name=\"{name()}\"> \n          <xsl:for-each select=\"@*\"> \n            <xsl:element name=\"{name()}\"> \n              <xsl:value-of select=\".\"/> \n            </xsl:element> \n          </xsl:for-each> \n          <xsl:apply-templates select=\"*|text()\"/> \n        </xsl:element> \n        </xsl:template>  \n    </xsl:stylesheet> \n\n```", "```cs\n    <owl:Class rdf:ID=\"Winery\"/>  \n    <owl:Class rdf:ID=\"Region\"/>  \n    <owl:Class rdf:ID=\"ConsumableThing\"/> \n\n    <owl:Class rdf:ID=\"PotableLiquid\"> \n      <rdfs:subClassOf rdf:resource=\"#ConsumableThing\" /> \n    </owl:Class> \n\n    <owl:Class rdf:ID=\"Wine\">  \n      <rdfs:subClassOf rdf:resource=\"&food;PotableLiquid\"/>  \n      <rdfs:label xml:lang=\"en\">wine</rdfs:label>  \n      <rdfs:label xml:lang=\"fr\">vin</rdfs:label>  \n    </owl:Class>  \n\n    <owl:Thing rdf:ID=\"CentralCoastRegion\" />  \n    <owl:Thing rdf:about=\"#CentralCoastRegion\"> \n      <rdf:type rdf:resource=\"#Region\"/>  \n    </owl:Thing> \n\n    <owl:Class rdf:ID=\"WineDescriptor\" /> \n    <owl:Class rdf:ID=\"WineColor\"> \n      <rdfs:subClassOf rdf:resource=\"#WineDescriptor\" /> \n    </owl:Class> \n\n    <owl:ObjectProperty rdf:ID=\"hasWineDescriptor\"> \n      <rdfs:domain rdf:resource=\"#Wine\" /> \n      <rdfs:range  rdf:resource=\"#WineDescriptor\" /> \n    </owl:ObjectProperty> \n\n    <owl:ObjectProperty rdf:ID=\"hasColor\"> \n      <rdfs:subPropertyOf rdf:resource=\"#hasWineDescriptor\" /> \n      <rdfs:range rdf:resource=\"#WineColor\" /> \n    </owl:ObjectProperty> \n\n```"]