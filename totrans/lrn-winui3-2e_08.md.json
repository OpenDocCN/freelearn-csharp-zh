["```cs\n    <Extensions>\n      <!--Register COM activator-->\n      <com:Extension Category=\"windows.comServer\">\n        <com:ComServer>\n          <com:ExeServer Executable=\"MyApp\\MyApp.exe\" DisplayName=\"My App\" Arguments=\"----WindowsAppRuntimePushServer:\">\n            <com:Class Id=\"[Azure AppId for App]\" DisplayName=\"WinUI Push Notify\" />\n          </com:ExeServer>\n        </com:ComServer>\n      </com:Extension>\n    </Extensions>\n    ```", "```cs\n    xmlns:com=\"http://schemas.microsoft.com/appx/manifest/com/windows10\"\n    xmlns:desktop=\"http://schemas.microsoft.com/appx/manifest/desktop/windows10\"\n    ```", "```cs\n    <Extensions>\n      <desktop:Extension Category=\"windows.toastNotificationActivation\">\n        <desktop:ToastNotificationActivation ToastActivatorCLSID=\"NEW GUID HERE\" />\n      </desktop:Extension>\n      <com:Extension Category=\"windows.comServer\">\n        <com:ComServer>\n          <com:ExeServer Executable=\"MyMediaCollection\\MyMediaCollection.exe\" DisplayName=\"My Media Collection\" Arguments=\"----AppNotificationActivated:\">\n            <com:Class Id=\"SAME NEW GUID HERE\" />\n          </com:ExeServer>\n        </com:ComServer>\n      </com:Extension>\n    </Extensions>\n    ```", "```cs\n    public const string scenarioTag = \"scenarioId\";\n    public struct Notification\n    {\n        public string Originator;\n        public string Action;\n        public bool HasInput;\n        public string Input;\n    };\n    ```", "```cs\n    public static void CouldNotSendToast()\n    {\n        MainPage.Current.NotifyUser(\"Could not send toast\", InfoBarSeverity.Error);\n    }\n    public static void ToastSentSuccessfully()\n    {\n        MainPage.Current.NotifyUser(\"Toast sent successfully!\", InfoBarSeverity.Success);\n    }\n    public static void AppLaunchedFromNotification()\n    {\n        MainPage.Current.NotifyUser(\"App launched from notifications\", InfoBarSeverity.Informational);\n    }\n    public static void NotificationReceived()\n    {\n        MainPage.Current.NotifyUser(\"Notification received\", InfoBarSeverity.Informational);\n    }\n    public static void UnrecognizedToastOriginator()\n    {\n        MainPage.Current.NotifyUser(\"Unrecognized Toast Originator or Unknown Error\", InfoBarSeverity.Error);\n    }\n    ```", "```cs\n    using Microsoft.UI.Xaml.Controls;\n    using MyMediaCollection.Views;\n    ```", "```cs\n    using Microsoft.Windows.AppNotifications.Builder;\n    using Microsoft.Windows.AppNotifications;\n    using MyMediaCollection.Views;\n    namespace MyMediaCollection.Helpers\n    {\n        public class ToastWithAvatar\n        {\n            public const int ScenarioId = 1;\n            public const string ScenarioName = \"Local Toast with Image\";\n        }\n    }\n    ```", "```cs\n    public static bool SendToast()\n    {\n        var appNotification = new AppNotificationBuilder()\n            .AddArgument(\"action\", \"ToastClick\")\n            .AddArgument(NotificationShared.scenarioTag, ScenarioId.ToString())\n            .SetAppLogoOverride(new System.Uri($\"file://{App.GetFullPathToAsset(\" Square150x150Logo.scale-200.png\")}\"), AppNotificationImageCrop.Circle)\n            .AddText(ScenarioName)\n            .AddText(\"This is a notification message.\")\n            .AddButton(new AppNotificationButton(\"Open App\")\n                .AddArgument(\"action\", \"OpenApp\")\n                .AddArgument(NotificationShared.scenarioTag, ScenarioId.ToString()))\n            .BuildNotification();\n        AppNotificationManager.Default.Show(appNotification);\n        // If notification is sent, it will have an Id. Success.\n        return appNotification.Id != 0;\n    }\n    ```", "```cs\n    public static void NotificationReceived(AppNotificationActivatedEventArgs notificationActivatedEventArgs)\n    {\n        var notification = new NotificationShared.Notification\n        {\n            Originator = ScenarioName,\n            Action = notificationActivatedEventArgs.Arguments[\"action\"]\n        };\n        MainPage.Current.NotificationReceived(notification);\n        App.ToForeground();\n    }\n    ```", "```cs\n    using Microsoft.Windows.AppNotifications;\n    using System;\n    using System.Collections.Generic;\n    namespace MyMediaCollection.Helpers\n    {\n        internal class NotificationManager\n        {\n            private bool isRegistered;\n            private Dictionary<int, Action<AppNotificationActivatedEventArgs>> notificationHandlers;\n            public NotificationManager()\n            {\n                isRegistered = false;\n                notificationHandlers = new Dictionary<int, Action<AppNotificationActivatedEventArgs>>\n                {\n                    { ToastWithAvatar.ScenarioId, ToastWithAvatar.NotificationReceived },\n                    { ToastWithText.ScenarioId, ToastWithText.NotificationReceived }\n                };\n            }\n            ~NotificationManager()\n            {\n                Unregister();\n            }\n            public void Unregister()\n            {\n                if (isRegistered)\n                {\n                    AppNotificationManager.Default.Unregister();\n                    isRegistered = false;\n                }\n            }\n        }\n    }\n    ```", "```cs\n    public void Init()\n    {\n        AppNotificationManager notificationManager = AppNotificationManager.Default;\n        // Add handler before calling Register.\n        notificationManager.NotificationInvoked += OnNotificationInvoked;\n        notificationManager.Register();\n        isRegistered = true;\n    }\n    ```", "```cs\n    public void OnNotificationInvoked(object sender, AppNotificationActivatedEventArgs notificationActivatedEventArgs)\n    {\n        NotificationShared.NotificationReceived();\n        if (!DispatchNotification(notificationActivatedEventArgs))\n        {\n            NotificationShared.UnrecognizedToastOriginator();\n        }\n    }\n    ```", "```cs\n    public void ProcessLaunchActivationArgs(AppNotificationActivatedEventArgs notificationActivatedEventArgs)\n    {\n        DispatchNotification(notificationActivatedEventArgs);\n        NotificationShared.AppLaunchedFromNotification();\n    }\n    private bool DispatchNotification(AppNotificationActivatedEventArgs notificationActivatedEventArgs)\n    {\n        var scenarioId = notificationActivatedEventArgs.Arguments[NotificationShared.scenarioTag];\n        if (scenarioId.Length != 0)\n        {\n            try\n            {\n                notificationHandlers[int.Parse(scenarioId)](notificationActivatedEventArgs);\n                return true;\n            }\n            catch\n            {\n                // No matching handler\n                return false;\n            }\n        }\n        else\n        {\n            // No scenarioId provided\n            return false;\n        }\n    }\n    ```", "```cs\n    using Microsoft.Windows.AppLifecycle;\n    using Microsoft.Windows.AppNotifications;\n    using MyMediaCollection.Helpers;\n    using System.Runtime.InteropServices;\n    using WinRT.Interop;\n    ```", "```cs\n    [DllImport(\"user32.dll\", SetLastError = true)]\n    static extern void SwitchToThisWindow(IntPtr hWnd, bool turnOn);\n    private NotificationManager notificationManager;\n    private static Window m_window;\n    ```", "```cs\n    var currentInstance = AppInstance.GetCurrent();\n    if (currentInstance.IsCurrent)\n    {\n        AppActivationArguments activationArgs = currentInstance.GetActivatedEventArgs();\n        if (activationArgs != null)\n        {\n            ExtendedActivationKind extendedKind = activationArgs.Kind;\n            if (extendedKind == ExtendedActivationKind.AppNotification)\n            {\n                var notificationActivatedEventArgs = (AppNotificationActivatedEventArgs)activationArgs.Data;\n                notificationManager.ProcessLaunchActivationArgs(notificationActivatedEventArgs);\n            }\n        }\n    }\n    ```", "```cs\n    public App()\n    {\n        this.InitializeComponent();\n        notificationManager = new NotificationManager();\n        notificationManager.Init();\n        AppDomain.CurrentDomain.ProcessExit += CurrentDomain_ProcessExit;\n    }\n    private void CurrentDomain_ProcessExit(object sender, EventArgs e)\n    {\n        notificationManager.Unregister();\n    }\n    ```", "```cs\n    public static void ToForeground()\n    {\n        if (m_window != null)\n        {\n            IntPtr handle = WindowNative.GetWindowHandle(m_window);\n            if (handle != IntPtr.Zero)\n            {\n                SwitchToThisWindow(handle, true);\n            }\n        }\n    }\n    public static string GetFullPathToExe()\n    {\n        var path = AppDomain.CurrentDomain.BaseDirectory;\n        var pos = path.LastIndexOf(\"\\\\\");\n        return path.Substring(0, pos);\n    }\n    public static string GetFullPathToAsset(string assetName)\n    {\n        return $\"{GetFullPathToExe()}\\\\Assets\\\\{assetName}\";\n    }\n    ```", "```cs\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"*\"/>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"Auto\"/>\n    </Grid.RowDefinitions>\n    ```", "```cs\n    <StackPanel HorizontalAlignment=\"Right\"\n                Orientation=\"Horizontal\">\n        <Button Command=\"{x:Bind ViewModel.SendToastCommand}\"\n                Content=\"Send Notification\"\n                Margin=\"8,8,0,8\"/>\n        <Button Command=\"{x:Bind ViewModel.SendToastWithTextCommand}\"\n                Content=\"Send Notification with Text\"\n                Margin=\"8,8,0,8\"/>\n    ...\n    </StackPanel>\n    ```", "```cs\n    <InfoBar x:Name=\"notifyInfoBar\" Grid.Row=\"3\"/>\n    ```", "```cs\n    public static MainPage Current;\n    public MainPage()\n    {\n        ViewModel = App.HostContainer.Services.GetService<MainViewModel>();\n        this.InitializeComponent();\n        Current = this;\n        Loaded += MainPage_Loaded;\n    }\n    ```", "```cs\n    public void NotifyUser(string message, InfoBarSeverity severity, bool isOpen = true)\n    {\n        if (DispatcherQueue.HasThreadAccess)\n        {\n            UpdateStatus(message, severity, isOpen);\n        }\n        else\n        {\n            DispatcherQueue.TryEnqueue(() =>\n            {\n                UpdateStatus(message, severity, isOpen);\n            });\n        }\n    }\n    private void UpdateStatus(string message, InfoBarSeverity severity, bool isOpen)\n    {\n        notifyInfoBar.Message = message;\n        notifyInfoBar.IsOpen = isOpen;\n        notifyInfoBar.Severity = severity;\n    }\n    ```", "```cs\n    public void NotificationReceived(NotificationShared.Notification notification)\n    {\n        var text = $\"{notification.Originator}; Action: {notification.Action}\";\n        if (notification.HasInput)\n        {\n            if (string.IsNullOrWhiteSpace(notification.Input))\n                text += \"; No input received\";\n            else\n                text += $\"; Input received: {notification.Input}\";\n        }\n        if (DispatcherQueue.HasThreadAccess)\n            DisplayMessageDialog(text);\n        else\n        {\n            DispatcherQueue.TryEnqueue(() =>\n            {\n                DisplayMessageDialog(text);\n            });\n        }\n    }\n    ```", "```cs\n    private void DisplayMessageDialog(string message)\n    {\n        ContentDialog notifyDialog = new()\n        {\n            XamlRoot = this.XamlRoot,\n            Title = \"Notification received\",\n            Content = message,\n            CloseButtonText = \"Ok\"\n        };\n        notifyDialog.ShowAsync();\n    }\n    ```", "```cs\n    [RelayCommand]\n    private void SendToast()\n    {\n        if (ToastWithAvatar.SendToast())\n            NotificationShared.ToastSentSuccessfully();\n        else\n            NotificationShared.CouldNotSendToast();\n    }\n    [RelayCommand]\n    private void SendToastWithText()\n    {\n        if (ToastWithText.SendToast())\n            NotificationShared.ToastSentSuccessfully();\n        else\n            NotificationShared.CouldNotSendToast();\n    }\n    ```"]