- en: Implementing Our Player Character
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现我们的玩家角色
- en: In [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating and Importing
    3D Objects for Our Game*, we worked on our game environment and added several
    assets to our game project. We added and planted our cherry trees and prepared
    six areas for our cucumber patches. We also learned how to import assets from
    the Unity Asset Store, as well as from third-party sources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 6 章](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml)，*为我们的游戏创建和导入 3D 对象*，我们处理了我们的游戏环境，并将几个资产添加到我们的游戏项目中。我们添加并种植了我们的樱桃树，并为我们的黄瓜地准备了六个区域。我们还学习了如何从
    Unity 资产商店以及第三方来源导入资产。
- en: In this chapter, we will incorporate our game's player character, the Cucumber
    Man. We will import the character, review the controls, examine the animations,
    and make the necessary configuration changes to fully use our character in the
    game. By the end of the chapter, you will be able to start testing the game in
    game-mode.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将整合我们游戏的角色，即黄瓜人。我们将导入角色，审查控制方式，检查动画，并对角色进行必要的配置更改，以便在游戏中完全使用我们的角色。到本章结束时，您将能够开始以游戏模式测试游戏。
- en: 'We will look at the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将探讨以下主题：
- en: Working with Unity's standard asset package
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Unity 的标准资产包
- en: Importing the game character
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入游戏角色
- en: Configuring the player controller
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置玩家控制器
- en: Fine-tuning our character
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微调我们的角色
- en: Animating our player character
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的玩家角色制作动画
- en: Terraforming the terrain for our Cucumber Man
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的黄瓜人地形进行改造
- en: Working with Unity's standard asset package
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Unity 的标准资产包
- en: The game character, the player character, the user-controlled player—these are
    all terms that are used to refer to our game's main character, the Cucumber Man,
    which the human player will control. In Unity, we refer to this as the player
    character. In order to have a player character, we need a controller. In our case,
    we will use a third-person controller. A third-person controller is a framework
    used to control a character from the perspective of a third-person camera.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏角色、玩家角色、用户控制的玩家——这些都是用来指代我们游戏的主要角色，即黄瓜人，人类玩家将控制这个角色。在 Unity 中，我们称这个角色为玩家角色。为了有一个玩家角色，我们需要一个控制器。在我们的案例中，我们将使用第三人称控制器。第三人称控制器是一个用于从第三人称摄像机视角控制角色的框架。
- en: 'The Unity standard asset package includes a `ThirdPersonController` asset package.
    The package, as you can see in the following screenshot, contains `Animation`,
    `Materials`, `Models`, `Scripts`, `Textures`, and `Prefabs`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 标准资产包包括一个 `ThirdPersonController` 资产包。该包，如下面的截图所示，包含 `Animation`、`Materials`、`Models`、`Scripts`、`Textures`
    和 `Prefabs`：
- en: '![](img/df791783-4107-4924-8b90-e6d3568081bb.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df791783-4107-4924-8b90-e6d3568081bb.png)'
- en: 'This section demonstrates how to use a character created by Unity. It will
    not be incorporated into the *Cucumber Beetle* game. By going through the following
    steps, you will become familiar with the process of using the `ThirdPersonCharacter`
    provided by Unity:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节演示了如何使用 Unity 创建的角色。它将不会整合到 *黄瓜甲虫* 游戏中。通过以下步骤，您将熟悉使用 Unity 提供的 `ThirdPersonCharacter`
    的过程：
- en: Launch Unity.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Unity。
- en: From the top menu, select Assets | Import Package | Characters.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单选择 Assets | 导入包 | 角色。
- en: You will be presented with the Import Unity Package dialog window. Click the
    Import button.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个导入 Unity 包的对话框窗口。点击导入按钮。
- en: In the Project panel, you will see `Standard Assets`. Navigate to `Standard
    Assets` | Characters | `ThirdPersonCharacter` | `Prefabs` and drag the `ThirdPersonController`
    prefab to the Hierarchy panel.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，您将看到 `Standard Assets`。导航到 `Standard Assets` | 角色 | `ThirdPersonCharacter`
    | `Prefabs` 并将 `ThirdPersonController` 预制件拖动到层次结构面板。
- en: 'Double-click on the `ThirdPersonController` in the Hierarchy panel to autofocus
    on the controller in the Scene view. As shown in the following screenshot, the
    character is encased in a capsule controller:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中双击 `ThirdPersonController` 以在场景视图中自动聚焦到控制器。如下面的截图所示，角色被胶囊控制器包围：
- en: '![](img/505dbb78-134d-4d8e-9f68-e28a76e8c775.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/505dbb78-134d-4d8e-9f68-e28a76e8c775.png)'
- en: In the hierarchy pane, drag the Main Camera so that it is subordinate to the
    `ThirdPersonController`. This is required so that the camera follows the player
    character during gameplay.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，将主摄像机拖动，使其成为 `ThirdPersonController` 的下级。这是必要的，以便在游戏过程中摄像机跟随玩家角色。
- en: 'In the Scene view, use the transform tools to position the camera above and
    behind the character. With the camera selected, your Camera Preview window, in
    the Scene view, should look similar to the following screenshot:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，使用变换工具将摄像机放置在角色上方和后方。选择摄像机后，场景视图中的摄像机预览窗口应类似于以下截图：
- en: '![](img/55b3c344-7a16-49d9-b80f-94f236c9c962.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/55b3c344-7a16-49d9-b80f-94f236c9c962.png)'
- en: Now you can put the game into game-mode and navigate the game world using your
    keyboard and mouse. As you will see, the default character can move around the
    world, and the camera will follow.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将游戏设置为游戏模式，并使用键盘和鼠标导航游戏世界。正如你所看到的，默认角色可以在世界中移动，摄像机将跟随。
- en: Using the provided `ThirdPersonController` is great for testing purposes, but
    you would not want to deploy a game using these standard assets. Although Unity
    Technologies permits commercial use of their standard assets, using them erodes
    the uniqueness of your game, so it is recommended that they only be used for testing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的`ThirdPersonController`非常适合测试目的，但你不会想使用这些标准资产部署游戏。尽管Unity Technologies允许商业使用他们的标准资产，但使用它们会侵蚀你游戏的特点，因此建议它们仅用于测试。
- en: Importing the game character
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入游戏角色
- en: 'We will use a custom third-person character controller for our *Cucumber Beetle*
    game. First, we should make sure there are no conflicting assets in your game
    project. Let''s start by launching Unity and opening your game project based on
    the work you did in [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating
    and Importing 3D Objects for our Game*. Alternatively, you can load the `Starting-Chapter-07` Unity project
    available from the publisher''s companion site. Once your project is loaded in
    Unity, delete any of the following listed items from the Hierarchy panel:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的*黄瓜甲虫*游戏使用自定义的第三人称角色控制器。首先，我们应该确保你的游戏项目中没有冲突的资产。让我们从启动Unity并打开基于你在[第6章](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml)，*为我们的游戏创建和导入3D对象*中完成的工作的游戏项目开始。或者，你也可以从出版商的配套网站上加载`Starting-Chapter-07`
    Unity项目。一旦你的项目在Unity中加载，请从层次结构面板中删除以下列出的任何项目：
- en: Camera (you will retain the main camera you first explored in [Chapter 5](101c3b96-a362-4913-925c-f22503f0f8a1.xhtml),
    *Lights, Cameras, and Shadows*)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄像机（你将保留在[第5章](101c3b96-a362-4913-925c-f22503f0f8a1.xhtml)，*灯光、摄像机和阴影*）中首先探索的主摄像机）
- en: '`ThirdPersonController`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ThirdPersonController`'
- en: 'Once the unnecessary assets are deleted, your Hierarchy panel should contain
    only the assets listed in the following Hierarchy panel screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 删除不必要的资产后，你的层次结构面板应只包含以下层次结构面板截图中的资产：
- en: '![](img/aab4afc4-f11e-4f35-8d28-64f1904a8f10.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aab4afc4-f11e-4f35-8d28-64f1904a8f10.png)'
- en: 'You are now ready to import the asset package for our game''s player character,
    the Cucumber Man. Go through the following steps to import the package:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以导入我们游戏玩家角色，黄瓜人的资产包了。按照以下步骤导入包：
- en: Download the `CucumberMan_Controller.unitypackage` file from the publisher's
    companion website
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出版商的配套网站上下载`CucumberMan_Controller.unitypackage`文件
- en: In Unity, with your game project open, select Assets | Import Package | Custom
    Package from the top menu
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中，打开你的游戏项目后，从顶部菜单选择Assets | 导入包 | 自定义包
- en: Navigate to the location of the asset package you downloaded in step 1 and click
    the Open button
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到步骤1中下载的资产包位置，并点击打开按钮
- en: When presented with the Import Asset Package dialog window, click the Import
    button
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当出现导入资产包对话框时，点击导入按钮
- en: As you will notice, the Cucumber Man asset package contains several assets related
    to the Cucumber Man, including a Controller, Scripts, Prefabs, and other assets.
    In the next section, we will add the Cucumber Man to our game.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所注意到的，黄瓜人资产包包含与黄瓜人相关的多个资产，包括控制器、脚本、预制体和其他资产。在下一节中，我们将把黄瓜人添加到我们的游戏中。
- en: Configuring a player controller
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置玩家控制器
- en: So, far we have taken a lot of time to shape our world and populate it with
    cherry trees and spawn points, and prepare it for cucumber patches. We have been
    creating the game world for our player character, the Cucumber Man, to exist in.
    It is now time to add our Cucumber Man to our game.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经花费了很多时间来塑造我们的世界，并用樱桃树和出生点填充它，为黄瓜田做准备。我们一直在为我们的玩家角色，黄瓜人，创建游戏世界。现在是时候将我们的黄瓜人添加到游戏中了。
- en: 'Here are the steps to add the Cucumber Man to our game and to configure the
    controller:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是将黄瓜人添加到我们的游戏并配置控制器的步骤：
- en: In the Project panel, select Prefabs.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择预制体。
- en: 'Drag the `CucumberMan` prefab to the Hierarchy panel. Use the following screenshot
    as a reference to ensure that you are dragging the highlighted prefab illustrated
    in the following screenshot. Note that the subordinate `Cucumbor_Man` has been
    intentionally misspelled to help ensure the `CucumberMan` prefab is used:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CucumberMan`预制体拖动到层级面板。使用以下截图作为参考，确保您正在拖动以下截图中突出显示的预制体。请注意，下级`Cucumbor_Man`已被故意拼写错误，以确保使用`CucumberMan`预制体：
- en: '![](img/d4f1a2d7-7709-406e-8413-8132c76ea5fc.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4f1a2d7-7709-406e-8413-8132c76ea5fc.png)'
- en: In the Hierarchy panel, select Main Camera.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，选择主摄像机。
- en: With the Main Camera selected, click the Add Component button in the Inspector
    panel.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择主摄像机的情况下，在检查器面板中点击添加组件按钮。
- en: Select Scripts | Camera Follower to add the Camera Follower script to the Main
    Camera.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择脚本 | 摄像机跟随，将摄像机跟随脚本添加到主摄像机。
- en: In the Camera Follower component of the Main Camera, in the Inspector panel,
    change the Movement Smoothness to `5`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主摄像机的摄像机跟随组件中，在检查器面板中，将移动平滑度设置为`5`。
- en: In the Camera Follower component of the Main Camera, change the Rotation Smoothness
    to `5`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主摄像机的摄像机跟随组件中，将旋转平滑度设置为`5`。
- en: In the Hierarchy panel, click the gray triangle to the left of `CucumberMan`.
    This will expose the subordinate components.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，点击`CucumberMan`左侧的灰色三角形。这将显示下级组件。
- en: Reselect the Main Camera in the Hierarchy panel.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中重新选择主摄像机。
- en: Click the GameObject under `CucumberMan` in the Hierarchy panel and drag it
    to the Follow Target field in the Camera Follower component of the Main Camera.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中点击`CucumberMan`下的GameObject，并将其拖动到主摄像机摄像机跟随组件的跟随目标字段。
- en: Ensure that the Can Follow checkbox is checked.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已勾选“可以跟随”复选框。
- en: 'Your Camera Follower component of the main camera should look identical to
    the following image. If it is not identical, please revisit steps 6 through 11:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您主摄像机的摄像机跟随组件应与以下图像完全相同。如果不同，请重新检查步骤6至11：
- en: '![](img/b13bd611-bd03-4a18-a7f2-7b585df67ed1.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b13bd611-bd03-4a18-a7f2-7b585df67ed1.png)'
- en: 'Next, we will edit the Player Motor (Script) component of the `CucumberMan`.
    Follow these important steps to properly configure the Player Motor (Script) component:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编辑`CucumberMan`的玩家电机（脚本）组件。按照以下重要步骤正确配置玩家电机（脚本）组件：
- en: In the Hierarchy panel, select the `CucumberMan`
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，选择`CucumberMan`。
- en: Expand, if necessary, the Player Motor (Script) component of the `CucumberMan`
    in the Inspector panel
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有必要，展开检查器面板中`CucumberMan`的玩家电机（脚本）组件。
- en: Drag the Main Camera from the Hierarchy panel to the Cam field in the Player
    Motor (Script) component of `CucumberMan` in the Inspector panel
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主摄像机从层级面板拖动到检查器面板中`CucumberMan`的玩家电机（脚本）组件的Cam字段。
- en: 'Next, let''s position the Cucumber Man to a logical start location for our
    game. Where you place the Cucumber Man is up to you. It is recommended that it
    be placed on one of the respawn points. Once you know where you want the character
    to start each game, follow these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将黄瓜人放置到游戏的一个逻辑起始位置。你将黄瓜人放置在哪里由你决定。建议将其放置在其中一个重生点。一旦你知道角色在每场游戏中应该从哪里开始，请按照以下步骤操作：
- en: In the Hierarchy panel, select `CucumberMan`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，选择`CucumberMan`。
- en: Using the transform tools, move the character to one of the spawn points.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用变换工具，将角色移动到其中一个出生点。
- en: Zoom in and ensure the character's feet are on or slightly above the ground. We
    still have one more step to make the Cucumber Man our game's playable character.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放大并确保角色的脚在或略高于地面。我们还需要完成一个步骤，使黄瓜人成为我们游戏的可玩角色。
- en: With the `CucumberMan` still selected, select the Tag drop-down menu in the
    Inspector panel and select Player. This will make it easier for us to reference
    collisions. You will learn more about this in [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml),
    *Scripting Our Points System.*
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择`CucumberMan`的情况下，在检查器面板中选择标签下拉菜单并选择玩家。这将使我们更容易引用碰撞。你将在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)中了解更多关于*脚本我们的得分系统*。
- en: 'You can now put the game into game-mode and test the player character. You
    can use the keyboard keys listed in the following table to control the Cucumber
    Man:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将游戏设置为游戏模式并测试玩家角色。你可以使用以下表格中列出的键盘按键来控制黄瓜人：
- en: '| **Keyboard Key** | **Action** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **键盘按键** | **操作** |'
- en: '| *W* | Walk Up |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| *W* | 向上行走 |'
- en: '| *A* | Walk Left |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| *A* | 向左行走 |'
- en: '| *S* | Walk Down |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| *S* | 向下行走 |'
- en: '| *D* | Walk Right |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| *D* | 向右行走 |'
- en: '| *E* | Throw |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| *E* | 投掷 |'
- en: '| Left-Hand *Shift* Key | Run |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 左键 *Shift* 键 | 跑步 |'
- en: '| Spacebar | Jump |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 空格键 | 跳跃 |'
- en: In the next section, we will fine-tune the Cucumber Man.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将微调Cucumber Man。
- en: Fine-tuning our character
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调我们的角色
- en: 'Now that the Cucumber Man is in our game, we can start experimenting with the
    character to ensure it looks and behaves the way we want. In this section, we
    will look at the following refinements to our Cucumber Man:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Cucumber Man已经进入我们的游戏，我们可以开始尝试这个角色，以确保它看起来和表现方式符合我们的期望。在本节中，我们将查看对Cucumber
    Man的以下改进：
- en: Motor controls
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机控制
- en: Scale
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放
- en: Capsule Collider
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 胶囊碰撞体
- en: Input controls
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入控制
- en: Fine-tuning the motor controls
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调电机控制
- en: You can put the game into game-mode and use the keyboard inputs detailed in
    the previous section to experiment with the Cucumber Man's movements. One of the
    things you might have noticed is that the player character does not seem to move
    very fast. Of course, this is relative to the size of our terrain and the character's
    size. Let's look at how to increase the speed of our character by reviewing the
    associated script.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将游戏置于游戏模式，并使用上一节中详细说明的键盘输入来实验Cucumber Man的移动。您可能已经注意到的一件事是，玩家角色似乎移动得不太快。当然，这与我们的地形大小和角色大小有关。让我们通过查看相关脚本来看看如何增加角色的速度。
- en: 'The following code snippet is from the `PlayerMotor.cs` script that you imported
    with the Cucumber Man. This snippet is the first part of the script, not the entire
    script. As you can see, there are variables for `JumpPower`, `MoveSpeed`, and
    `RunSpeed`. Those variables are created in the code and their values can be controlled
    in the Unity editor:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段来自与Cucumber Man一起导入的`PlayerMotor.cs`脚本。这个片段是脚本的第一部分，而不是整个脚本。如您所见，有`JumpPower`、`MoveSpeed`和`RunSpeed`变量。这些变量在代码中创建，其值可以在Unity编辑器中控制：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot is from the Cucumber Man''s Inspector panel. Here,
    you can see that we have the ability to update the values for Jump Power, Move
    Speed, Run Speed, Stationary Turn Speed, and Moving Turn Speed:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图来自Cucumber Man的检查器面板。在这里，您可以看到我们有能力更新跳跃力量、移动速度、奔跑速度、静止转向速度和移动转向速度的值：
- en: '![](img/db8cc907-ccca-4757-994f-5493576e1d28.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db8cc907-ccca-4757-994f-5493576e1d28.png)'
- en: Using the Player Motor (Script) component of the Cucumber Man, you can experiment
    with the values to have the player character's movements respond the way you want
    them to. You can always refer back to the previous screenshot to reset your values.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Cucumber Man的玩家电机（脚本）组件，您可以尝试不同的值，使玩家角色的移动方式符合您的期望。您始终可以参考之前的截图来重置您的值。
- en: You can experiment with the Player Motor (Script) parameters while in game-mode.
    Any changes made in game-mode are not retained when leaving game-mode. This is
    a great way of experimenting without impacting any saved settings.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在游戏模式下实验玩家电机（脚本）参数。在游戏模式下做出的任何更改在离开游戏模式时都不会保留。这是一种在不影响任何已保存设置的情况下进行实验的好方法。
- en: 'Here is a typical set of parameters for the Cucumber Man''s motor controls:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Cucumber Man电机控制的一组典型参数：
- en: '![](img/9fb3e019-ba3f-4b33-81c1-ff587bc6158b.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fb3e019-ba3f-4b33-81c1-ff587bc6158b.png)'
- en: 'We also have the option of editing the Move Speed Multiplier variable to impact
    all of the motor speed values. You can set this manually in the Inspector panel
    as well as programmatically. To set the multiplier manually, simply edit the value
    in the Player Motor (Script) component of the `CucumberMan` in the Inspector panel.
    To change this value programmatically, you can edit the `PlayerMotor.cs` script.
    The following code snippet is from that script, and represents the later section
    of that script:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择编辑移动速度乘数变量，以影响所有电机速度值。您可以在检查器面板中手动设置，也可以通过编程方式设置。要手动设置乘数，只需在检查器面板中编辑`CucumberMan`的玩家电机（脚本）组件中的值。要编程更改此值，您可以编辑`PlayerMotor.cs`脚本。以下代码片段来自该脚本，并代表该脚本的后续部分：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see in the previous code snippet, `m_MoveSpeedMultiplier` is set
    to `1`. You can change that value directly in the script as an alternative method
    to using the Unity editor.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在之前的代码片段中所见，`m_MoveSpeedMultiplier`设置为`1`。您可以直接在脚本中更改该值，作为使用Unity编辑器的替代方法。
- en: Fine-tuning scale
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调缩放
- en: Our Cucumber Man has a Transform that includes Scale values for X, Y, and Z.
    By default, these are all set to 1\. We can easily change the size of our Cucumber
    Man by decreasing or increasing the scale values. With this approach, you can
    create copies of the Cucumber Man that are cucumber babies or cucumber giants.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的黄瓜人有一个变换，包括X、Y和Z的缩放值。默认情况下，这些值都设置为1。我们可以通过增加或减少缩放值来轻松改变黄瓜人的大小。使用这种方法，你可以创建黄瓜宝宝或黄瓜巨人的黄瓜人副本。
- en: 'The following screenshot shows three copies of the Cucumber Man. Starting from
    the left and moving to the right, each Cucumber Man is larger than the last:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了三个黄瓜人的副本。从左到右，每个黄瓜人都比前一个大：
- en: '![](img/a9d127a7-7258-4e59-9ed4-9a197be57913.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9d127a7-7258-4e59-9ed4-9a197be57913.png)'
- en: 'Here is a look at the transform settings for each Cucumber Man in the preceding
    screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是前面截图中的每个黄瓜人的变换设置：
- en: '|  | **Transform Scale setting** |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|  | **变换比例设置** |'
- en: '| **Cucumber Man version** | **X** | **Y** | **Z** |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **黄瓜人版本** | **X** | **Y** | **Z** |'
- en: '| Cucumber Baby | 0.5 | .5 | .5 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 黄瓜宝宝 | 0.5 | .5 | .5 |'
- en: '| Cucumber Man | 1 | 1 | 1 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 黄瓜人 | 1 | 1 | 1 |'
- en: '| Cucumber Giant | 2 | 2 | 2 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 黄瓜巨人 | 2 | 2 | 2 |'
- en: 'For our game, we will only have one Cucumber Man, and we want him to be larger
    than the beetles and smaller than the cherry trees. The default scale of one results
    in the Cucumber Man''s height being ideal. This is evident by his relative size
    compared to the cherry trees, as indicated in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的游戏，我们只会有一个黄瓜人，我们希望他比甲虫大，比樱桃树小。默认比例的结果是黄瓜人的高度理想。这可以通过他与樱桃树的相对大小来明显看出，如下面的截图所示：
- en: '![](img/d4563ff9-066d-4af8-a1e8-fca0360f0448.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4563ff9-066d-4af8-a1e8-fca0360f0448.png)'
- en: In [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing our
    Non-Player Character*, we will inspect the scale of our Cucumber Beetles and ensure
    they are appropriately scaled in relation to the size of our Cucumber Man.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml)，“实现我们的非玩家角色”中，我们将检查我们的黄瓜甲虫的比例，并确保它们与黄瓜人的大小成适当比例。
- en: Fine-tuning the Capsule Collider
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精细调整胶囊碰撞体
- en: 'Capsule Colliders have the shape of a pill—that is, a cylinder with rounded
    ends. We can view the Capsule Collider by selecting our character in the Hierarchy
    panel or the Scene view and then reviewing the Capsule Collider component in the
    Inspector panel. As shown in the following screenshot, we can edit the Capsule
    Collider by clicking the Edit Collider button:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 胶囊碰撞体的形状是药丸——即一个两端圆润的圆柱体。我们可以通过在层级面板或场景视图中选择我们的角色，然后在检查器面板中查看胶囊碰撞体组件来查看胶囊碰撞体。如下面的截图所示，我们可以通过点击编辑碰撞体按钮来编辑胶囊碰撞体：
- en: '![](img/f009a0cc-64e1-4b47-9687-a1f46c36b927.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f009a0cc-64e1-4b47-9687-a1f46c36b927.png)'
- en: 'Here is a brief description of each of the Capsule Collider component parameters:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是胶囊碰撞体组件每个参数的简要描述：
- en: '**Is Trigger**: When we enable this option, the physics engine will ignore
    the Capsule Collider'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**是否触发**：当我们启用此选项时，物理引擎将忽略胶囊碰撞体'
- en: '**Material**: We can assign how the Capsule Collider interacts with other colliding
    game objects'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材质**：我们可以指定胶囊碰撞体如何与其他碰撞游戏对象交互'
- en: '**Center**: There are X, Y, and Z fields to identify the center of the capsule
    relative to itself'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中心**：有X、Y和Z字段来识别胶囊相对于自身的中心'
- en: '**Radius**: The radius of the collider''s width'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半径**：碰撞体宽度的半径'
- en: '**Height**: The collider''s height'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**：碰撞体的高度'
- en: '**Direction**: The orientation of the capsule lengthwise'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向**：胶囊的纵向方向'
- en: 'For greater precision, the Capsule Collider should receive a height adjustment
    so that the Cucumber Man fits within it, as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高精度，胶囊碰撞体应该接受高度调整，以便黄瓜人能够适应其中，如下面的截图所示：
- en: '![](img/ee28a0c5-72c2-4564-8466-a96895701203.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee28a0c5-72c2-4564-8466-a96895701203.png)'
- en: Make any refinements required to ensure that your Cucumber Man's Capsule Collider
    resembles the preceding screenshot. Once you complete your refinements, be sure
    to save your work.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对你的黄瓜人的胶囊碰撞体进行任何必要的调整，以确保其类似于前面的截图。一旦完成调整，请务必保存你的工作。
- en: All changes to the *Cucumber Man* game detailed in this chapter will be incorporated
    in the `Starting-Chapter-08.zip` file available at the beginning of [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml),
    *Implementing Our Non-Player Characters*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中详细描述的关于“黄瓜人”游戏的全部更改都将包含在[第8章](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml)，“实现我们的非玩家角色”开头的`Starting-Chapter-08.zip`文件中。
- en: Changing and refining input controls
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改和优化输入控制
- en: 'When we develop games using Unity, we have several options for gathering user
    input during gameplay. Here is a list of those input options:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Unity 开发游戏时，在游戏过程中收集用户输入我们有几种选项。以下是一个输入选项列表：
- en: Keyboard
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘
- en: Mouse
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标
- en: Joystick
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏手柄
- en: Touchscreen
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触摸屏
- en: Mobile device movement sensors
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动设备运动传感器
- en: Microphone
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 麦克风
- en: Camera
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄像机
- en: As we stated previously in this chapter, we will be using the keyboard as our
    sole input device for the *Cucumber Man* game. Let's take a look at where you
    can make changes to the input controls for your game if you want to experiment
    or simply want to change the way users interact with the game. We will use Unity's
    input manager for this.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本章前面所述，我们将使用键盘作为 *Cucumber Man* 游戏的唯一输入设备。让我们看看如果你想要实验或只是想要改变用户与游戏交互的方式，你可以在哪里更改游戏输入控制。我们将使用
    Unity 的输入管理器来完成这项工作。
- en: 'The input manager for your game project is accessible, as illustrated in the
    following screenshot, by selecting the Edit | Project Settings | Input drop-down
    menu selection:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游戏项目输入管理器可以通过以下截图所示的方式访问，通过选择编辑 | 项目设置 | 输入下拉菜单选项：
- en: '![](img/3d617c6a-2b07-4ab9-a734-4d71a02d6ad1.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3d617c6a-2b07-4ab9-a734-4d71a02d6ad1.png)'
- en: 'This results in the input manager being displayed in the Inspector panel. There,
    you will find the relevant virtual axes for the game. In the following screenshot,
    the horizontal virtual axis and vertical virtual axis are displayed side by side.
    You can see how the keyboard''s *W*, *A*, *S*, and *D* keys are set for controlling
    horizontal and vertical movement. For example, the *W* key is identified in the
    vertical virtual axis and is assigned to the Alt Positive Button, which means
    it is an alternative button for moving forward. While the primary Negative and
    Positive buttons are listed as using the left and right arrow keys for horizontal
    movement, and the down and up arrow keys are used for vertical navigation, we
    will implement the *W*, *A*, *S*, and *D* keys as our default method of moving
    the Cucumber Man character through the game world:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致输入管理器在检查器面板中显示。在那里，你可以找到游戏的相关虚拟轴。在下面的屏幕截图中，水平虚拟轴和垂直虚拟轴并排显示。你可以看到键盘的 *W*、*A*、*S*
    和 *D* 键是如何设置为控制水平和垂直移动的。例如，*W* 键在垂直虚拟轴中被识别，并分配给 Alt 正按钮，这意味着它是向前移动的替代按钮。而主要的负和正按钮被列为使用左右箭头键进行水平移动，上下箭头键用于垂直导航，我们将实现
    *W*、*A*、*S* 和 *D* 键作为我们在游戏世界中移动黄瓜人角色的默认方法：
- en: '![](img/b3447707-7225-4171-8bf9-9d09610324b9.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b3447707-7225-4171-8bf9-9d09610324b9.png)'
- en: 'The input manager enables us to determine all of our input controls, and is
    where you can set your mouse, keyboard, and joystick inputs. An additional setting
    available in the input manager is for the jump functionality. As shown in the
    following screenshot, the jump functionality has the keyboard''s space bar as
    the positive input device. You will note that there is no Negative Button assigned
    as it is assumed that the character can only jump up, not down:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 输入管理器使我们能够确定所有的输入控制，并且是你设置鼠标、键盘和游戏手柄输入的地方。输入管理器中还有一个额外的设置，用于跳跃功能。如图所示，跳跃功能使用键盘的空格键作为正输入设备。你会注意到没有分配负按钮，因为假设角色只能向上跳，不能向下跳：
- en: '![](img/8bdc64f7-8be1-4171-be62-201d0192d44a.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8bdc64f7-8be1-4171-be62-201d0192d44a.png)'
- en: Animating our player character
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的玩家角色动画
- en: 'Your Cucumber Man character controller package includes the necessary assets
    to support the character''s six animations. In this section, we will look at the
    Cucumber Man''s animations, which are listed as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你的黄瓜人角色控制器包包括支持角色六种动画所需的资产。在本节中，我们将查看黄瓜人的动画，如下所示：
- en: Idle
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲
- en: Walk
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 走路
- en: Run
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跑步
- en: Jump
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃
- en: Throw
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投掷
- en: Die
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 死亡
- en: Reviewing the player controller script
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查玩家控制器脚本
- en: There are a couple of areas in Unity in which we can review the Cucumber Man's
    animations. Let's first look at the Player Controller (Script) component of the
    `CucumberMan` Controller object. When you select the CucumberMan controller in
    the hierarchy pane, you should see the Player Controller (Script) component in
    the Inspector panel. You might need to click the expand button to the left of
    the component in order to reveal the component's details.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，有几个区域可以审查Cucumber Man的动画。让我们首先查看`CucumberMan`控制器对象的`Player Controller
    (Script)`组件。当你选择层次结构面板中的CucumberMan控制器时，你应该在检查器面板中看到`Player Controller (Script)`组件。你可能需要点击组件左侧的展开按钮，以便显示组件的详细信息。
- en: 'As shown in the following screenshot, each of our character''s animations has
    a state associated with it:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，我们每个角色的动画都与一个状态相关联：
- en: '![](img/2b91652b-7a7f-45dc-b063-a2c2adaea618.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b91652b-7a7f-45dc-b063-a2c2adaea618.png)'
- en: 'Now, let''s review the `PlayerController.cs` script. You can access this file
    by selecting the All Scripts button in the Project panel, under Favorites. Then,
    scroll to the PlayerController (Script) in the Project panel. The first 14 lines
    of the script are shown in the following code fragment:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们审查`PlayerController.cs`脚本。你可以通过在项目面板的“收藏”下选择“所有脚本”按钮来访问此文件。然后，在项目面板中滚动到`PlayerController
    (Script)`。以下代码片段显示了脚本的前14行：
- en: '[PRE2]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first three lines simply identify the namespaces we want to use in our
    script. These are `System.Collections`, `System.Collections.Generic`, and `UnityEngine`.
    Next, we have the class declaration for our `PlayerController` class. The next
    three lines of code are our variable definitions. As you can see, there is a public
    string for each of our six animations: `RunState`, `WalkState`, `IdleState`, `JumpState`,
    `DieState`, and `ThrowState`. There are also several `boolean` (`bool`) variables
    including `isWalking`, `isRunning`, `isJumping`, `isIdle`, and `isDie`. We also
    identify `mAnim` as our animator. We will see how each of these is used later
    in the script.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 前三行简单地标识了我们脚本中想要使用的命名空间。这些是`System.Collections`、`System.Collections.Generic`和`UnityEngine`。接下来，我们有`PlayerController`类的类声明。接下来的三行代码是我们的变量定义。正如你所见，我们为六个动画中的每一个都有一个公共字符串：`RunState`、`WalkState`、`IdleState`、`JumpState`、`DieState`和`ThrowState`。还有几个`boolean`(`bool`)变量，包括`isWalking`、`isRunning`、`isJumping`、`isIdle`和`isDie`。我们还标识`mAnim`为我们自己的Animator。我们将在脚本中的后续部分看到这些是如何被使用的。
- en: The `Start()` method sets our initial state of `isIdle` to true and gets a reference
    to our Animator with the `mAnim = GetComponent<Animator>();` statement.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`Start()`方法将我们的初始状态`isIdle`设置为true，并通过`mAnim = GetComponent<Animator>();`语句获取我们的Animator引用。'
- en: 'The largest method of our `PlayerController.cs` script is the `Update()` method.
    The `Update()` method is called once per frame. This method is provided in the
    following code segments, with ellipses (...) to reflect areas where code was removed
    for brevity. You can refer to the full script in Unity. The first code segment
    sets the appropriate states to true or false. For example, when the user presses
    the *W* key and the player is not currently running, the `isWalking` variable
    is set to true and the `mAnim.SetBool` is passed two parameters (`WalkState` and
    `true`). Similar actions are taken for the *A*, *S*, and *D* keys:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`PlayerController.cs`脚本中最大的方法是`Update()`方法。`Update()`方法每帧调用一次。以下代码段提供了此方法，其中省略号(...)表示为了简洁而删除的代码区域。你可以在Unity中查看完整的脚本。第一个代码段将适当的设置设置为true或false。例如，当用户按下*W*键且玩家当前未跑步时，`isWalking`变量被设置为true，并将两个参数(`WalkState`和`true`)传递给`mAnim.SetBool`。对*A*、*S*和*D*键也采取类似行动：
- en: '[PRE3]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next code snippet from the `Update()` method, shown in the following snippet,
    handles the running animation when the left *Shift* key is pressed. In this instance,
    the animation is changed from the `WalkState` to the `RunState`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`Update()`方法的下一个代码片段，如以下片段所示，处理当按下左*Shift*键时的跑步动画。在这种情况下，动画从`WalkState`更改为`RunState`：
- en: '[PRE4]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next segment of code, provided in the following snippet, shows how detecting
    the spacebar input results in the `Jump()` animation running and the `Throw()`
    animation running when the *E* key is detected:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段，如以下片段所示，展示了检测空格键输入导致`Jump()`动画运行，以及当检测到*E*键时`Throw()`动画运行的情况：
- en: '[PRE5]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Reviewing the Animator component
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查Animator组件
- en: 'There is one final component in the `CucumberMan` Controller object to review:
    the Animator component. As you can see in the following screenshot, the Animator
    component has two key properties: Controller and Avatar:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CucumberMan`控制器对象中，还有一个最终组件需要检查：动画组件。如下面的截图所示，动画组件有两个关键属性：控制器和头像：
- en: '![](img/b9681e3c-10cc-420c-bfe0-b78a4572f54f.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9681e3c-10cc-420c-bfe0-b78a4572f54f.png)'
- en: 'The controller points to the `CucumberMan.controller` file. The file''s `.controller`
    file extension will not be displayed in the component interface, but it is a reference
    to that file. You can navigate to that file in the project pane. It is located
    under Assets | Cucumber Man. When you double-click that file, it opens in an Animator
    window, as shown in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器指向`CucumberMan.controller`文件。该文件的`.controller`文件扩展名在组件界面中不会显示，但它是对该文件的引用。您可以在项目面板中导航到该文件。它位于资产
    | Cucumber Man下。当您双击该文件时，它将在动画窗口中打开，如下面的截图所示：
- en: '![](img/13db6093-95f2-4755-8a81-71d478e98dcc.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13db6093-95f2-4755-8a81-71d478e98dcc.png)'
- en: 'Here, you can see each of the states, one for each animation, along with the
    possible transitions between them. Each state is labeled with a `CM_` prefix to
    indicate the `CucumberMan`. These states are listed as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以查看每个状态，每个动画一个状态，以及它们之间的可能转换。每个状态都带有`CM_`前缀，以指示`CucumberMan`。这些状态如下列出：
- en: CM_Idle
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CM_Idle
- en: CM_Walk
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CM_Walk
- en: CM_Run
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CM_Run
- en: CM_Jump
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CM_Jump
- en: CM_Throw
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CM_Throw
- en: CM_Die
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CM_Die
- en: 'If the layout of the Animator window is jumbled or unclear, you can rearrange
    the objects in the Animator window so they are easy to understand. You accomplish
    this by clicking on a state, dragging it to where you want it, and releasing the
    mouse button. The following graphic shows one possible organizational approach
    to the Cucumber Man''s states and transitions. Your approach can differ, if you
    like:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果动画窗口的布局混乱或不清晰，您可以重新排列动画窗口中的对象，以便更容易理解。您可以通过单击一个状态，将其拖动到您想要的位置，然后释放鼠标按钮来完成此操作。以下图形显示了Cucumber
    Man的状态和转换的一种可能的组织方法。如果您愿意，您的做法可以不同：
- en: '![](img/a27a9bf3-58c1-4a63-8e89-84f8e5050d58.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a27a9bf3-58c1-4a63-8e89-84f8e5050d58.png)'
- en: You can leave these transitions as they have been provided to you, or, if you
    want to, you can make changes using the Animator window.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以保留这些转换，就像它们提供给您的那样，或者，如果您想的话，您可以使用动画窗口进行更改。
- en: Previewing the animations
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预览动画
- en: You have the option of previewing individual animations without putting the
    game into game-mode. In the Project panel, select Assets | Cucumber Man and you
    will see the individual animations listed. For example, click the `CucumberMan_Throw`
    animation. This is the `CucumberMan_Throw.fbx` file that is part of the package
    you imported earlier in this chapter.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择预览单个动画，而无需将游戏置于游戏模式。在项目面板中，选择资产 | Cucumber Man，您将看到列出的单个动画。例如，点击`CucumberMan_Throw`动画。这是您在本章早期导入的包中的一部分`CucumberMan_Throw.fbx`文件。
- en: 'With the animation selected, the Inspector panel gives you access to the Model,
    Rig, and Animations tabs. Although you do not need to make any changes here, it
    is worth your time to explore the various features. When you select the Animations
    tab, you have access to a preview of the animation at the bottom the Inspector
    panel, as illustrated in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 选择动画后，检查器面板为您提供了访问模型、绑定和动画标签的权限。虽然您在这里不需要做任何修改，但花时间探索各种功能是值得的。当您选择动画标签时，您可以在检查器面板底部预览动画，如下面的截图所示：
- en: '![](img/c3cb6d83-6385-486a-93e0-2ce83cebd820.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3cb6d83-6385-486a-93e0-2ce83cebd820.png)'
- en: You can click the play button in the top-left corner of the animation preview
    window to play the animation. The animation will play and loop until you stop
    the animation.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击动画预览窗口左上角的播放按钮来播放动画。动画将播放并循环，直到您停止播放。
- en: You can preview each animation by playing the game as well. This is true for
    all of the animations, except the die animation; we will have to write a script
    to evoke that animation. We will do this in [Chapter 11](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml),
    *Scripting Victory and Defeat*.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过玩游戏来预览每个动画。这适用于所有动画，除了死亡动画；我们将不得不编写一个脚本来触发该动画。我们将在[第11章](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml)，*脚本胜利与失败*中这样做。
- en: Terraforming the terrain for our Cucumber Man
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的Cucumber Man地形进行改造
- en: As you play-test the game, it is advisable to have the Cucumber Man walk, run,
    and jump where you want the player to be able to do these actions when they play
    the game. This is a step that is often overlooked or given insufficient attention.
    Think back to the games you play or have played in the past. Has your character
    ever been stuck or unable to get to a certain area? Odds are that some of that
    was a result of inadequate testing.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行游戏测试时，建议让黄瓜人行走、奔跑和跳跃到你希望玩家在游戏中能够执行这些动作的地方。这是一个常常被忽视或未给予足够关注的步骤。回想一下你玩过的游戏或过去玩过的游戏。你的角色是否曾经卡住或无法到达某个区域？很可能其中一些是由于测试不足造成的。
- en: It is recommend that you work on this. The terrain might be, for example, too
    steep for the character to climb. Use the skills you learned in [Chapter 4](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml),
    *Creating Our Terrain*, to modify your terrain so that the player character can
    navigate your game world the way you want it to.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 建议你着手进行这项工作。地形可能太陡峭，以至于角色无法攀爬。使用你在[第4章](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml)，*创建我们的地形*中学到的技能来修改你的地形，以便玩家角色能够以你想要的方式导航你的游戏世界。
- en: The time you spend on this important step will help ensure the non-player characters,
    our Cucumber Beetles, can get to the areas you want them to. You will be prompted
    to check for this in the next [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing
    Our Non-Player Characters*.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个重要步骤上花费的时间将有助于确保非玩家角色，我们的黄瓜甲虫，能够到达你希望它们去的地方。你将在下一章[第8章](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml)，*实现我们的非玩家角色*中收到提示来检查这一点。
- en: Now is a great time to save your scene and your project. Remember, save early
    and save often!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是保存你的场景和项目的绝佳时机。记住，尽早保存，经常保存！
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we incorporated our game's player character, the Cucumber Man.
    We imported the character, reviewed the controls, examined the animations, and
    made the necessary configuration changes to fully use our character in the game.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们整合了我们的游戏玩家角色，黄瓜人。我们导入了角色，审查了控制方式，检查了动画，并进行了必要的配置更改，以便在游戏中完全使用我们的角色。
- en: In [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing Our
    Non-Player Characters*, we will implement our non-player characters, the Cucumber
    Beetles. We will import and review the assets associated with the beetles and
    start scripting parts of our game that are specific to the beetles. This will
    include randomizing the location of cucumber plants and cucumbers.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml)，*实现我们的非玩家角色*中，我们将实现我们的非玩家角色，黄瓜甲虫。我们将导入并审查与甲虫相关的资产，并开始编写游戏特定于甲虫的部分。这包括随机化黄瓜植物和黄瓜的位置。
