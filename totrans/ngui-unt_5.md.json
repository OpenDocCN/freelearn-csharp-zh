["```cs\n//We need the Scrollbars for keyboard scroll\nUIScrollBar hScrollbar;\nUIScrollBar vScrollbar;\npublic float keyboardSensitivity = 1;\n\nvoid Awake()\n{\n  //Assign both scrollbars on Awake\n  hScrollbar = GetComponent<UIDraggablePanel>().horizontalScrollBar;\n  vScrollbar = GetComponent<UIDraggablePanel>().verticalScrollBar;\n}\n```", "```cs\nvoid Update()\n{\n  //Get keyboard input axes values\n  Vector2 keyDelta = Vector2.zero;\n  keyDelta.Set(Input.GetAxis(\"Horizontal\"), Input.GetAxis(\"Vertical\"));\n  //If no keyboard arrow is pressed, leave\n  if(keyDelta == Vector2.zero) return;\n  //Make it framerate independent and multiply by sensitivity\n  keyDelta *= Time.deltaTime * keyboardSensitivity;\n  //Scroll by adjusting scrollbars' values\n  hScrollbar.value += keyDelta.x;\n  vScrollbar.value -= keyDelta.y;\n}\n```", "```cs\nvoid OnDrop(GameObject droppedObj)\n{\n  //Get the dropped object's BarrierObjectController\n  BarrierObjectController barrierObj = droppedObj.GetComponent<BarrierObjectController>();\n\n  //If it actually has one, destroy the droppedObj\n  if(barrierObj != null){\n    Destroy(droppedObj);\n  }\n}\n```", "```cs\nvoid OnPress(bool pressed)\n{\n  //Invert the Collider's state\n  collider.enabled = !pressed;\n\n  //If it has just been dropped\n  if(!pressed)\n  {\n    //Get the target's collider\n    Collider col = UICamera.lastHit.collider;\n    //If the target has no collider or is not the viewport\n    if(col == null || col.GetComponent<ViewportHolder>() == null)\n    //Reset its localPosition to {0,0,0}\n    transform.localPosition = Vector3.zero;\n  }\n}\n```", "```cs\n//Game\nBarrier = [99FF99]Barrier\nBuildingBarrier = [FF6666]Building\\nBarrier...\nWait = Wait\n```", "```cs\n//Game\nBarrier = [99FF99]Barrière\nBuildingBarrier = [FF6666]Construction\\nBarrière...\nWait = Attendez\n```", "```cs\n//We need our two barriers Prefabs\npublic Object barrierObjectPrefab;\npublic Object activeBarrierPrefab;\n\n//We need the BarrierObject container\npublic GameObject barrierContainer;\n```", "```cs\nRecreateBarrierObject();\nCreateActiveBarrier(droppedObj.transform);\n```", "```cs\nvoid RecreateBarrierObject()\n{\n  //Add a BarrierObject to the container\n  Transform newBarrierTrans = NGUITools.AddChild(barrierContainer, barrierObjectPrefab as GameObject).transform;\n  //Reset its localPosition to {0,0,0}\n  newBarrierTrans.localPosition = Vector3.zero;\n}\n\nvoid CreateActiveBarrier(Transform barrierObjectTrans)\n{\n  //Add an ActiveBarrier to the Viewport\n  Transform newActiveBarrierTrans = NGUITools.AddChild(gameObject, activeBarrierPrefab as GameObject).transform;\n  //Set position to the droppedObject's position\n  newActiveBarrierTrans.position = barrierObjectTrans.position;\n}\n```", "```cs\n//We will need the Slider and the Label's UILocalize\nprivate UISlider slider;\nprivate UILocalize loc;\n\nvoid Awake()\n{\n  //Get necessary components at Awake()\n  slider = GetComponentInChildren<UISlider>();\n  loc = GetComponentInChildren<UILocalize>();\n}\n```", "```cs\npublic IEnumerator Build(float buildTime)\n{\n    while(slider.value < 1) {\n    slider.value += (Time.deltaTime / buildTime);\n    yield return null;\n  }\n  //When slider value is > 1\n  BuildFinished();\n}\n```", "```cs\nprivate void BuildFinished()\n{\n  //Make sure it's at 1\n  slider.value = 1;\n  //Set the key to \"normal\" barrier and update Localization\n  loc.key = \"Barrier\";\n  loc.Localize();\n}\n```", "```cs\npublic int barrierCount = 0;\n```", "```cs\n//Update barrierCount\nbarrierCount++;\n//Start the Build Coroutine with the correct buildTime\nStartCoroutine(newActiveBarrierTrans.GetComponent<ActiveBarrierController>().Build(barrierCount *2));\n```", "```cs\nvoid Start()\n{\n  //Set the UIForwardEvents' target to the viewport\n  GetComponent<UIForwardEvents>().target = transform.parent.gameObject;\n}\n```", "```cs\n//We will need the Button and the Label\nprivate UIButton button;\nprivate UILabel label;\n\nvoid Awake()\n{\n  //Get necessary components at Awake\n  button = GetComponentInChildren<UIButton>();\n  label = GetComponentInChildren<UILabel>();\n}\n```", "```cs\npublic IEnumerator Cooldown(int cooldown)\n{\n  //Deactivate the Barrier button and update Color to Disable\n  button.isEnabled = false;\n  button.UpdateColor(false, true);\n\n  while(cooldown > 0)\n  {\n    //Update Label with localized text each second\n    label.text = Localization.instance.Get(\"Wait\") + \" \" + cooldown.ToString() + \"s\";\n    cooldown -= 1;\n    //Wait for a second, then return to start of While\n    yield return new WaitForSeconds(1);\n  }\n  //If cooldown <= 0\n  CooldownFinished();\n}\n```", "```cs\nvoid CooldownFinished()\n{\n  //Reset the Label's Text to \"normal\" Barrier\n  label.text = Localization.instance.Get(\"Barrier\");\n  //Reactivate the Barrier button and update Color to Normal\n  button.isEnabled = true;\n  button.UpdateColor(true, true);\n}\n```", "```cs\n//Start the new BarrierObject's Cooldown Coroutine\nStartCoroutine(newBarrierTrans.GetComponent<BarrierObjectController>().Cooldown((barrierCount +1) *3));\n```", "```cs\n//Set its scale to {0,0,0}\ntransform.localScale = Vector3.zero;\n//Tween it back to make it appear smoothly\nTweenScale.Begin(gameObject, 0.3f, new Vector3(1,1,1));\n```", "```cs\nBarrierAvailable\n```", "```cs\nBarrierAvailableNotification = New [99FF99]Barrier[FFFFFF] Available!\n```", "```cs\nBarrierAvailableNotification = Nouvelle [99FF99]Barrière[FFFFFF] Disponible !\n```", "```cs\n//Show Notification to inform the player\nNotificationManager.instance.Show(NotificationManager.Type.BarrierAvailable, 1.5f);\n```"]