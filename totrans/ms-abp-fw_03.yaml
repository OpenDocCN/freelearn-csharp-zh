- en: '*Chapter 2*: Getting Started with ABP Framework'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ABP Framework is distributed as a large set of NuGet and **Node Package Manager
    (NPM)** packages. It has a modular design so that you can add and use the packages
    you need to. However, there are also some pre-built solution templates, and you
    typically want to start with them.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to prepare our development environment and create solutions
    using ABP's startup templates. By the end of this chapter, you will have a running
    solution built with ABP Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter consists of the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the ABP CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the pre-built modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few tools you need to have installed on your computer before starting
    with ABP Framework.
  prefs: []
  type: TYPE_NORMAL
- en: IDE/Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book assumes that you are using **Visual Studio 2022** (v10.0 with .NET
    6.0 support) or later. If you haven't installed it, the **Community Edition**
    is freely available on [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com).
    However, you can use your favorite **integrated development environment** (**IDE**)
    or editor, as long as it supports .NET application development with C#.
  prefs: []
  type: TYPE_NORMAL
- en: .NET 6 SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you've installed Visual Studio, you will already have installed the **.NET
    software development kit (SDK)**. Otherwise, please install .NET 6.0 or later
    from [https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: Database management system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ABP Framework can work with any data source. However, two main providers are
    pre-integrated: **Entity Framework Core** (**EF Core**) and **MongoDB**. For EF
    Core, all **database management systems** (**DBMS**) can be used, such as SQL
    Server, MySQL, PostgreSQL, Oracle, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: I will use **SQL Server** as the DBMS in this chapter. The startup solution
    uses **LocalDB**, a simple SQL Server instance for developers installed with Visual
    Studio. However, you may want to use the full version of SQL Server. In this case,
    you can download **SQL Server Developer Edition** from [https://www.microsoft.com/sql-server/sql-server-downloads](https://www.microsoft.com/sql-server/sql-server-downloads).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the ABP CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many modern frameworks provide a CLI, and ABP Framework is no exception. **ABP
    CLI** is a command-line utility to perform some common tasks for ABP applications.
    It is used to create a new solution with ABP Framework as a fundamental functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it using a terminal with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''ve already installed it, you can update it to the latest version using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to create new ABP solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ABP Framework provides a pre-built application startup template. There are two
    ways to create a new solution (project) using this template, which we will explore
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the startup solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can directly create and download a solution from [https://abp.io/get-started](https://abp.io/get-started).
    On this page, as shown in the following screenshot, you can easily select the
    **user interface** (**UI**) framework, database provider, and other available
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Downloading a new solution'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Downloading a new solution
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning the options on this page because they directly affect
    your solution's architecture, structure, and tooling.
  prefs: []
  type: TYPE_NORMAL
- en: In the `.sln` file) and the root namespace of your code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'For **Project type**, there are two options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Module** template is used to create reusable application modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Application** template is used to build web applications using ABP Framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the **Module** template will be covered in [*Chapter 15*](B17287_15_Epub_AM.xhtml#_idTextAnchor443),
    *Working with Modularity*. Here, I chose the **Application** template since I
    want to create a new web application that we will use in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four **UI Framework** options available at the time of writing this
    book, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: MVC/Razor Page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blazor WebAssembly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blazor Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can select the option that best fits your application requirements and personal
    or team skills. We will cover the **MVC/Razor Page** and **Blazor** options in
    *Part 4*, *User Interface and API Development,* of this book. You can learn more
    about the Angular UI in ABP's documentation. Here, I select the **MVC/Razor Page**
    option since we will use it in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two database provider options available at the time of writing this
    book, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Entity Framework Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you select the **Entity Framework Core** option, you can use any DBMS supported
    by EF Core. I've selected EF Core with the **SQLServer** option here.
  prefs: []
  type: TYPE_NORMAL
- en: ABP also provides a mobile startup template based on **React Native**, a popular
    **single-page application** (**SPA**) framework provided by Facebook. It provides
    a good starting point for your mobile application integrated with the same backend
    if you select it. This book doesn't cover mobile development, so I left that as
    **None**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the **Tiered** option can be checked if you want to separate your UI
    application from the **HTTP API** physically. In this case, the UI application
    won't have a direct database connection and perform all operations through the
    HTTP API. You can deploy the UI and HTTP API applications to separate servers.
    I haven't checked it to keep it simpler and focus on the ABP features rather than
    the complexities of distributed systems. However, ABP supports such distributed
    scenarios as well. You can learn more from ABP's documentation.
  prefs: []
  type: TYPE_NORMAL
- en: When you select the options, ABP creates a fully working, production-ready solution,
    on top of which you can start to build your application. If you later want to
    change the options (for example, if you want to use MongoDB instead of EF Core),
    you should recreate your solution or manually change and configure the NuGet packages.
    There is no *auto-magic* way of changing these options after creating and customizing
    your solution.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading your solution from the website makes it easy to see and select the
    options. However, there is an alternative way for users who like command-line
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ABP CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the `new` command in the ABP CLI to create new solutions.
    Open a command-line terminal and type the following command into an empty directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`ProductManagement` is the solution name here. This command creates a new web
    application using EF Core with SQL Server LocalDB and the MVC/Razor Pages UI because
    these options are default. If I want to specify all, I can rewrite the same command,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to specify the database connection string, you can also pass the
    `--connection-string` parameter, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The connection string in this example is already the default connection string
    value and uses `LocalDb`. See *The connection string* section in this chapter,
    if you need to change the connection string later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to the ABP CLI documentation for all possible options and values:
    [https://docs.abp.io/en/abp/latest/CLI](https://docs.abp.io/en/abp/latest/CLI).'
  prefs: []
  type: TYPE_NORMAL
- en: About the Example Application
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build an example application named `ProductManagement`.
    You can use the solution you are currently creating as the starting point for
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a well-architected, production-ready solution. The next section
    shows how to run this solution.
  prefs: []
  type: TYPE_NORMAL
- en: Running the solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use an IDE or code editor to open the solution, create a database, and
    run the web application. Open the `ProductManagement.sln` solution in Visual Studio
    or your favorite IDE. You will see a solution structure like the one depicted
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – ProductManagement solution in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – ProductManagement solution in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution is layered and contains multiple projects. The test folder has
    projects to test these layers. Most of these projects are class libraries, while
    a few of them are executable applications. These are described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ProductManagement.Web` is the main web application of the solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProductManagement.DbMigrator` is used to apply database migrations and seeds
    the initial data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution uses a database. Before creating a database, you may want to check
    and change the database connection string.
  prefs: []
  type: TYPE_NORMAL
- en: The connection string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A connection string is used to connect to the database and typically includes
    the server, database name, and credentials. The connection string is defined in
    the `appsettings.json` file in the `ProductManagement.Web` and `ProductManagement.DbMigrator`
    projects, as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The default connection string uses `LocalDb`, a lightweight, SQL Server-compatible
    database for development purposes. It is installed within Visual Studio. If you
    want to connect to another SQL Server instance, you can change it. If you change
    it, change it in both places.
  prefs: []
  type: TYPE_NORMAL
- en: This connection string will be used when you create a database in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution uses EF Core code first database migrations. So, we can manage
    database schema changes with code, using the standard `Add-Migration` and `Update-Database`
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: '`ProductManagement.DbMigrator` is a console application that simplifies creating
    and migrating a database in development and production. It also seeds the initial
    data, creating an `admin` role and user to log in to the application.'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ProductManagement.DbMigrator` project and select the **Set
    as Startup Project** command. Then, run the project using *Ctrl* + *F5* to run
    it without debugging.
  prefs: []
  type: TYPE_NORMAL
- en: About the Initial Migration
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an IDE other than Visual Studio (for example, JetBrains Rider),
    you may have problems for the first run since it adds the initial migration and
    compiles the project. In this case, open a command-line terminal in the directory
    of the `ProductManagement.DbMigrator` project and execute the `dotnet run` command.
    For the next time, you can just run it in your IDE as you normally do.
  prefs: []
  type: TYPE_NORMAL
- en: The database is ready, so we can finally run the application to explore the
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: Running the web application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Set `ProductManagement.Web` as the startup project and run it using *Ctrl* +
    *F5* (start without debugging).
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip: Start Without Debugging'
  prefs: []
  type: TYPE_NORMAL
- en: It is strongly suggested to run applications without debugging unless you need
    to debug them, as this will be much faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open a landing page where you can delete the content and build your
    own home page of the application. When you click on the **Login** button, you
    are redirected to the login page, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Login page of the application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Login page of the application
  prefs: []
  type: TYPE_NORMAL
- en: The default username is `admin`, and the default password is `1q2w3E*`. You
    can change it after logging in to the application.
  prefs: []
  type: TYPE_NORMAL
- en: ABP is a modular framework, and the startup solution has installed the fundamental
    modules. Before starting to build your application, it is good to explore the
    pre-built module functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the pre-built modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will explore the fundamental modules pre-installed in the startup
    solution: **Account**, **Identity**, and **Tenant Management**.'
  prefs: []
  type: TYPE_NORMAL
- en: The source code of these modules is not included in the download solution by
    default, but they are freely available on GitHub. They are used as **NuGet** packages
    and easily upgraded when a new ABP version is published. They are designed as
    highly customizable, without touching their code. However, if you need, you can
    include their source code in your solution to freely change them based on your
    unique requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the Account module, which provides user authentication features.
  prefs: []
  type: TYPE_NORMAL
- en: Account module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The login page shown in *Figure 2.3* comes from the **Account** module. This
    module implements login, registering, a forgot password functionality, social
    logins, and some other common requirements. It also shows a tenant selection area
    to switch between tenants in the development environment for a multi-tenant application.
    Multi-tenancy will be covered in [*Chapter 16*](B17287_16_Epub_AM.xhtml#_idTextAnchor457),
    *Implementing Multi-Tenancy*, so we will return to this screen again.
  prefs: []
  type: TYPE_NORMAL
- en: When you log in, you will see an **Administration** menu item with a few submenu
    items. These menu items come with ABP's pre-built **Identity** and **Tenant Management**
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: Identity module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Identity** module is used to manage users, roles, and their permissions
    in your application. It adds an **Identity management** menu item under the **Administration**
    menu, with **Roles** and **Users** as its submenu items, as illustrated in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Identity management menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Identity management menu
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on the **Roles** menu item, the role management page is opened,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The role management page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – The role management page
  prefs: []
  type: TYPE_NORMAL
- en: On this page, you can manage roles and their permissions in your application.
    In ABP, a role is a group of privileges. Roles are assigned to users to authorize
    them. The **Default** badge in *Figure 2.5* indicates the default role. Default
    roles are automatically assigned to new users when they are registered with the
    system. We will return to the **Roles** page in the *Working with authorization
    and permission systems* section of [*Chapter 7*](B17287_07_Epub_AM.xhtml#_idTextAnchor213)*,
    Exploring Cross-Cutting Concerns*.
  prefs: []
  type: TYPE_NORMAL
- en: The **Users** page, on the other hand, is used to manage the users in your application.
    A user can have zero or more roles.
  prefs: []
  type: TYPE_NORMAL
- en: Roles and users are pretty standard almost in all business applications, while
    the **Tenant Management** page module is only used in multi-tenancy systems.
  prefs: []
  type: TYPE_NORMAL
- en: Tenant Management module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Tenant Management** module is where you create and manage your tenants
    in a multi-tenant system. In a multi-tenant application, a tenant is a customer
    that has its own data—including roles, users, and permissions—isolated from the
    other tenants. It is an efficient and common way of building **Software as a Service**
    (**SaaS**) solutions. If your application is not multi-tenant, you can just remove
    this module from your solution.
  prefs: []
  type: TYPE_NORMAL
- en: The Tenant Management module and multi-tenancy will be covered in [*Chapter
    16*](B17287_16_Epub_AM.xhtml#_idTextAnchor457), *Implementing Multi-Tenancy*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've installed some required tools to prepare our development
    environment. Then, we saw how to create a new solution using the direct download
    and CLI options. Finally, we configured and run the application to explore the
    pre-built functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to add our own functionalities to this
    startup solution by understanding the solution structure.
  prefs: []
  type: TYPE_NORMAL
