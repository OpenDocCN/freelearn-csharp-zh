["```cs\nnamespace CH02_UnsafeCode\n```", "```cs\n{\n```", "```cs\n    using System;\n```", "```cs\n    class Program\n```", "```cs\n    {\n```", "```cs\n        static void Main(string[] args)\n```", "```cs\n        {\n```", "```cs\n            int[] array = new int[5] { 5, 4, 3, 2, 1 };\n```", "```cs\n            Console.WriteLine(array[4]);\n```", "```cs\n            unsafe\n```", "```cs\n            {\n```", "```cs\n                int* pointer = stackalloc int[5];\n```", "```cs\n                int* cpointer = pointer;\n```", "```cs\n                cpointer += 50;\n```", "```cs\n                Console.WriteLine(*cpointer);\n```", "```cs\n            }\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nunsafe \n```", "```cs\n{\n```", "```cs\n     fixed (int* arrayPointer = array)\n```", "```cs\n     {\n```", "```cs\n     // Code omitted.\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\nint* pointerToArray = stackalloc int[100];\n```", "```cs\nConsole.WriteLine(pointerToArray[99]);\n```", "```cs\nConsole.WriteLine(pointerToArray[100]);\n```", "```cs\nunsafe\n```", "```cs\n{\n```", "```cs\n      fixed (TestObject* testObject = new TestObject()) { }\n```", "```cs\n      fixed (string* text = \"Hello, World!\") { }\n```", "```cs\n}\n```", "```cs\n    \" C:\\Program Files (x86)\\Microsoft Visual \n        Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.28.29304\n          \\bin\\Hostx64\\x64\\dumpbin.exe /exports User32.dll\n    ```", "```cs\n    #include <string>\n    #include <iostream>\n    #include <comdef.h>\n    struct Product {\n    int Id;\n          BSTR Name;\n          void BuyProduct() {\n                std::wcout << \"Product.BuyProduct(\" << \n                  Name << \");\\n\";\n                std::cout << \"Id: \" << Id;\n                std::cout << \"\\n\";\n          }\n    };\n    extern \"C\" __declspec(dllexport)  Product \n        CreateProduct() {\n          Product product = Product();\n          product.Id = 1;\n          product.Name = SysAllocString(L\"New Product\");\n          return product;\n    }\n    extern \"C\" __declspec(dllexport) void \n        BuyProduct(Product product) {\n          product.BuyProduct();\n    }\n    ```", "```cs\n    #include <iostream>\n    #include <comdef.h>\n    extern \"C\" __declspec(dllexport) void SendGreeting();\n    extern \"C\" __declspec(dllexport) int Add(int, int);\n    extern \"C\" __declspec(dllexport) bool \n        IsLengthGreaterThan5(const char*);\n    extern \"C\" __declspec(dllexport) BSTR GetName();\n    void SendGreeting() {\n          std::cout << \"Dear C#, C++ says hello!\\n\";\n    }\n    int Add(int x, int y) {\n          return x + y;\n    }\n    bool IsLengthGreaterThan5(const char* value) {\n          return strlen(value) > 5;\n    }\n    BSTR GetName() {\n          return SysAllocString(L\"Packt Publishing\");\n    }\n    ```", "```cs\n    using System.Runtime.InteropServices;\n    [StructLayout(LayoutKind.Sequential)]\n    public struct Product\n    {\n          public int Id;\n    [MarshalAs(UnmanagedType.BStr)]\n    public string Name;\n    }\n    ```", "```cs\n    namespace CH02_Pinvoke {\n        using System;\n        using System.Runtime.InteropServices;\n        class Program {\n            static void Main(string[] _) {\n            }\n        }\n    }\n    ```", "```cs\n    <AppendTargetFrameworkToPath>false</AppendTargetFrame\n        workToPath>\n    ```", "```cs\n    [DllImport(\"CH02_NativeLibrary.dll\",\n          CallingConvention = CallingConvention.StdCall\n    )]\n    [DllImport(\"CH02_NativeLibrary.dll\", EntryPoint = \n        \"Add\",CallingConvention = Calling\n            Convention.StdCall\n    )]\n    public static extern int AddIntegers(int x, int y);\n    [DllImport(\"CH02_NativeLibrary.dll\",\n          CallingConvention = CallingConvention.StdCall\n    )]\n    public static extern bool IsLengthGreaterThan5(string \n        value);\n    [DllImport(\"CH02_NativeLibrary.dll\",\n          CallingConvention = CallingConvention.StdCall\n    )]\n    [return: MarshalAs(UnmanagedType.BStr)]\n    public static extern string GetName();\n    [DllImport(\"CH02_NativeLibrary.dll\",\n          CallingConvention = CallingConvention.StdCall\n    )]\n    public static extern void BuyProduct(Product product);\n    [DllImport(\"CH02_NativeLibrary.dll\")]\n    public static extern Product CreateProduct();\n    ```", "```cs\n    static void Main(string[] _)\n    {\n    SendGreeting();\n        Console.WriteLine($\"1 + 2 = {AddIntegers(1, 2)}\");\n         var answer = IsLengthGreaterThan5(\"C# is \n           awesome!\") ? \"Yes.\" : \"No.\";\n         Console.WriteLine($\"Is \\\"C# is awesome!\\\" > than \n           5? {answer}\");\n         Console.WriteLine($\"Publisher Name: {GetName()}\");\n         var product = CreateProduct();\n         Console.WriteLine($\"Product: {product.Name}\");\n         BuyProduct(product);\n         Console.ReadKey();\n    }\n    ```", "```cs\n    using System;\n    using IronPython.Hosting;\n    ```", "```cs\n    print(\"Welcome to the world of Python integration with \n        C#!\")\n    ```", "```cs\n    Console.WriteLine(\"Enter a string to be printed from \n        Python: \");\n    var input = Console.ReadLine();\n         var python = Python.CreateEngine();\n         try\n    {\n    python.Execute(\"print('From Python: \" + input + \"')\");\n    python.ExecuteFile(\"welcome.py\");\n    }\n    catch (Exception ex)\n    {\n    Console.WriteLine(ex.Message);\n    }\n    finally\n    {\n    Console.ReadKey();\n    }\n    ```", "```cs\n    Microsoft.Office.Interop.Excel\n    Microsoft.VisualStudio.Tools.Applications.Runtime\n    ```", "```cs\n    using System;\n    using Microsoft.Office.Interop.Excel;\n    ```", "```cs\n    var excel = new Application();\n    var workbook = excel.Workbooks.Open\n         (\"C:\\\\Temp\\\\LineCount.xlsx\");\n    var worksheet = excel.ActiveSheet as Worksheet;\n    Range userRange = worksheet.UsedRange;\n    int countRecords = userRange.Rows.Count;\n    int add = countRecords + 1;\n    worksheet.Cells[add, 1] = $\"Total Rows: {countRecords}\";\n    workbook.Close(true, Type.Missing, Type.Missing);\n    excel.Quit();\n    ```", "```cs\n    private void GetCellValueButton_Click(object sender, \n        RibbonControlEventArgs e)\n    {\n    CultureInfo originalLanguage = Thread.CurrentThread\n        .CurrentCulture;\n           Thread.CurrentThread.CurrentCulture = new \n              CultureInfo(\"en-US\");\n           var activeCell = Globals.ThisAddIn.Application\n              .ActiveCell;\n           if (activeCell.Value2 != null)\n                 MessageBox.Show(activeCell.Value2\n                    .ToString());\n                Thread.CurrentThread.CurrentCulture = \n                    originalLanguage;\n    }\n    ```", "```cs\npublic class Third : Second \n```", "```cs\n{\n```", "```cs\n      ~Third() // Destructor/Finalizer\n```", "```cs\n{\n```", "```cs\n      // Clean-up code goes here … \n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\npublic class Third : Second \n```", "```cs\n{\n```", "```cs\n      ~Third() => Console.WriteLine(\"Clean-up goes \n```", "```cs\n          here …\");\n```", "```cs\n}\n```", "```cs\n    public abstract class DisposableBase : IDisposable\n    {\n    protected bool _disposed = false;\n    }\n    ```", "```cs\n    public void Dispose()\n    {\n         Dispose(true);\n         GC.SuppressFinalize(this);\n    }\n    ```", "```cs\n    ~DisposableBase()\n    {\n    Dispose(false);\n    }\n    ```", "```cs\n    protected virtual void Dispose(bool disposing)\n    {\n    if (_disposed)\n               return;\n    if (disposing)\n    {\n               // Free up any managed objects here.\n    }\n    // Free up any unmanaged objects here.\n    // Set large fields to null.\n    _disposed = true;\n    }\n    ```", "```cs\nvar objectThree = new ObjectThree();\n```", "```cs\nobjectThree.Dispose();\n```"]