["```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddTransient<IMyService, MyService>();\n...\n// Add services to the container through extension methods.\nbuilder.Services.AddControllersWithViews();\nbuilder.Services.AddAllQueries(typeof(ManagePackagesController).Assembly);\n...\n...\nvar app = builder.Build(); \n```", "```cs\npublic class CoreMiddleware\n{\n    private readonly RequestDelegate _next;\n    public CoreMiddleware(RequestDelegate next, ILoggerFactory\n    loggerFactory)\n    {\n        ...\n        _next = next;\n        ...\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        /*\n            Insert here the module specific code that processes the\n            HttpContext instance before it is passed to the next\n            module.\n        */\nawait _next.Invoke(context);\n        /*\n            Insert here other module specific code that processes the\n            HttpContext instance, after all modules that follow this\n            module finished their processing.\n        */\n    }\n} \n```", "```cs\napp.Use(async (context, next) =>\n{\n   ...\n    await next(context);\n}); \n```", "```cs\n var app = builder.Build();\n...\n    app.UseMiddleware<MyCustomModule>\n    ...\n    app.Run(); \n```", "```cs\npublic static class MyMiddlewareExtensions\n{\n    public static IApplicationBuilder UseMyFunctionality(this\n    IApplicationBuilder builder,...)\n    {\n        //other code\n        ...\n        builder.UseMiddleware<MyModule1>();\n        builder.UseMiddleware<MyModule2>();\n        ...\n        //Other code\n        ...\n        return builder;\n    }\n} \n```", "```cs\nbuilder.Services.AddControllersWithViews(o =>\n{\n    //set here MVC options by modifying the o option parameter\n} \n```", "```cs\n<PropertyGroup>\n<EnvironmentName>Staging</EnvironmentName>\n</PropertyGroup> \n```", "```cs\n{\n\"iisSettings\": {\n\"windowsAuthentication\": false,\n\"anonymousAuthentication\": true,\n\"iisExpress\": {\n\"applicationUrl\": \"http://localhost:2575\",\n\"sslPort\": 44393\n}\n},\n\"profiles\": {\n\"IIS Express\": {\n\"commandName\": \"IISExpress\",\n\"launchBrowser\": true,\n\"environmentVariables\": {\n\"ASPNETCORE_ENVIRONMENT\": \"Development\"\n}\n},\n    ...\n    ...\n    }\n}\n} \n```", "```cs\n{\n\"ConnectionStrings\": {\n\"DefaultConnection\": \"....\"\n},\n\"Logging\": {\n\"LogLevel\": {\n\"Default\": \"Warning\"\n}\n},\n\"Email\": {\n\"FromName\": \"MyName\",\n\"FromAddress\": \"info@MyDomain.com\",\n\"LocalDomain\": \"smtps.MyDomain.com\",\n\"MailServerAddress\": \"smtps.MyDomain.com\",\n\"MailServerPort\": \"465\",\n\"UserId\": \"info@MyDomain.com\",\n\"UserPassword\": \"mypassword\"\n} \n```", "```cs\n public class EmailConfig\n    {\n        public String FromName { get; set; }\n        public String FromAddress { get; set; }\n        public String LocalDomain { get; set; }\n        public String MailServerAddress { get; set; }\n        public String MailServerPort { get; set; }\n        public String UserId { get; set; }\n        public String UserPassword { get; set; }\n    } \n```", "```cs\nVar builder = WebApplication.CreateBuilder(args);\n....\nbuilder.Services.Configure<EmailConfig>(Configuration.GetSection(\"Email\"));\n    .. \n```", "```cs\nif (app.Environment.IsDevelopment())\n{\n\n}\nelse //this is not part of the project template, but it is worth adding it\n{\n    app.UseDeveloperExceptionPage();\n}\napp.UseHttpsRedirection(); \n```", "```cs\nbuilder.Services.AddHsts(options =>     {\n    ...\n    options.MaxAge = TimeSpan.FromDays(60);\n    ...\n}); \n```", "```cs\napp.UseStaticFiles();\n// not in the default template but needed in all countries of the European Union\napp.UseCookiePolicy();\napp.UseRouting();\napp.UseAuthentication();\napp.UseAuthorization();\n... \n```", "```cs\nvar consentFeature = context.Features.Get<ITrackingConsentFeature>();\nvar showBanner = !consentFeature?.CanTrack ?? false;\nvar cookieString = consentFeature?.CreateConsentCookie(); \n```", "```cs\nCookiePolicyOptions in the code, instead of using the configuration file:\n```", "```cs\nbuilder.Services.Configure<CookiePolicyOptions>(options =>\n{\n    options.CheckConsentNeeded = context => true;\n}); \n```", "```cs\nbuilder.Services.AddAuthentication(o =>\n{\n    o.DefaultScheme =\n    CookieAuthenticationDefaults.AuthenticationScheme;\n})\n.AddCookie(o =>\n{\n    o.Cookie.Name = \"my_cookie\";\n})\n.AddJwtBearer(o =>\n{\n    ...\n}); \n```", "```cs\nRequest path: /UnitedStates/NewYork\nPattern: Name=\"location\", match=\"/{Country}/{Town}\"\nEndpoint: DisplayName=\"Location\", Country=\"UnitedStates\", Town=\"NewYork\" \n```", "```cs\nUseRouting middleware, but they are listed in the UseEndpoints method. While it might appear strange that URL patterns are not defined directly in the middleware that uses them, this was done mainly for coherence with the previous ASP.NET Core versions. In fact, previous versions contained no method analogous to UseRouting and, instead, some unique middleware at the end of the pipeline. In the new version, patterns are still defined at the end of the pipeline for coherence with previous versions, but now, UseEndpoints just creates a data structure containing all patterns when the application starts. Then, this data structure is processed by the UseRouting middleware, as shown in the following code:\n```", "```cs\napp.UseRouting();\napp.UseAuthentication();\napp.UseAuthorization();\napp.MapControllerRoute(\n    name: \"default\",\n    pattern: \"{controller=Home}/{action=Index}/{id?}\"); \n```", "```cs\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n\n}); \n```", "```cs\nMapGet(\"hello/{country}\", context =>\n    context.Response.WriteAsync(\n    $\"Selected country is {context.GetRouteValue(\"country\")}\")); \n```", "```cs\napp.MapGet(\"/web-site-conditions\", () =>\n\tResults.File(\"Contracts/WebSiteConditions.pdf\")); \n```", "```cs\nendpoints\n .MapHealthChecks(\"/health\")\n .RequireAuthorization(new AuthorizeAttribute(){ Roles = \"admin\", }); \n```", "```cs\n public class HomeController : Controller\n    {\n        public IActionResult MyMethod(\n int id,\n            MyClass myclass,\n            [FromServices] MyService myservice)\n        {\n            ... \n```", "```cs\npublic IActionResult MyMethod(...)\n{\n   ...\n   return View(\"myviewName\", MyViewModel)\n} \n```", "```cs\nreturn RedirectToAction(\"MyActionName\", \"MyControllerName\",\n         new {par1Name=par1Value,..parNName=parNValue}); \n```", "```cs\nreturn Content(\"this is plain text\", \"text/plain\"); \n```", "```cs\n<PropertyGroup>\n<TargetFramework> net8.0 </TargetFramework>\n<!-- add code below -->\n<RazorCompileOnBuild>false</RazorCompileOnBuild>\n<RazorCompileOnPublish>false</RazorCompileOnPublish>\n<!-- end of code to add -->\n    ...\n</PropertyGroup> \n```", "```cs\n@model MyViewModel \n```", "```cs\n@model MyViewModel\n@using MyApplication.Models \n```", "```cs\n@model MyViewModel\n@using MyApplication.Models\n@inject IViewLocalizer Localizer \n```", "```cs\n@{\n    //place C# code here\nvar myVar = 5;\n    ...\n    <div>\n        <!-- here you are in HTML mode again -->\n        ...\n    </div>\n    //after the HTML block you are still in C# mode\nvar x = \"my string\";\n} \n```", "```cs\n<text>\n<!-- here you entered HTML mode without adding an enclosing\n\tHTML tag -->\n        ...\n</text> \n```", "```cs\n<span>Current date is: </span>\n<span>@DateTime.Today.ToString(\"d\")</span>\n...\n<p>\n  User name is: @($\"{myName} {mySurname}\")\n</p>\n...\n<input type=\"submit\" value=\"@myUserMessage\" /> \n```", "```cs\n@HTML.Raw(myDynamicHtml) \n```", "```cs\n@if(myUser.IsRegistered)\n{\n    //this is a C# code area\nvar x=5;\n    ...\n    <p>\n     <!-- This is an HTML area -->\n    </p>\n    //this is a C# code area again\n}\nelse if(myUser.IsNew)\n{\n    ...\n}\nelse\n{\n ..\n} \n```", "```cs\n@for(int i=0; i< 10; i++)\n{\n}\n@foreach(var x in myIEnumerable)\n{\n}\n@while(true)\n{\n\n}\n@do\n{\n\n}\nwhile(true) \n```", "```cs\nViewData[=[\"AllTowns\"]= await townsRepo.GetAll();\n...\nreturn View(new AddressViewModel{...}); \n```", "```cs\n@addTagHelper *, Dll.Complete.Name \n```", "```cs\n@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers \n```", "```cs\n<a asp-controller=\"{controller name}\"\nasp-action=\"{action method name}\"\nasp-route-{action method parameter1}=\"value1\"\n...\nasp-route-{action method parametern}=\"valuen\">\n    put anchor text here\n</a> \n```", "```cs\n<a asp-controller=\"Home\" asp-action=\"Index\">\n Back Home\n</a> \n```", "```cs\n<a href=\"Home/Index\">\n Back Home\n</a> \n```", "```cs\n<form asp-controller=\"{controller name}\"\nasp-action=\"{action method name}\"\nasp-route-{action method parameter1}=\"value1\"\n...\nasp-route-{action method parametern}=\"valuen\"\n...\n>\n... \n```", "```cs\n<script src=\"https://stackpath.bootstrapcdn.com/\n bootstrap/4.3.1/js/bootstrap.bundle.min.js\"\n asp-fallback-src=\"img/bootstrap.bundle.min.js\"\n asp-fallback-test=\"window.jQuery && window.jQuery.fn && window.jQuery.fn.modal\"\n crossorigin=\"anonymous\"\n integrity=\"sha384-xrRywqdh3PHs8keKZN+8zzc5TX0GRTLCcmivcbNJWm2rs5C8PRhcEn3czEjhAO9o\">\n</script> \n```", "```cs\n<img src=\"img/myImage.png\" asp-append-version=\"true\"> \n```", "```cs\n<img src=\"img/myImage.png?v=kM_dqr9NVtnMdsM2MUgdskVVFD\"> \n```", "```cs\n<environment include=\"Development\">\n        @*development version of JavaScript files*@\n</environment>\n<environment exclude=\"Development\">\n        @*development version of JavaScript files *@\n</environment> \n```", "```cs\n<cache>\n    @* heavy to compute content to cache *@\n</cache> \n```", "```cs\n<input type=\"text\" asp-for\"Address.Town\"/> \n```", "```cs\n<label asp-for=\"Address.Town\"></label\n<input type=\"text\" asp-for=\"Address.Town\"/> \n```", "```cs\nasp-validation-summary=\"ValidationSummary.{All, ModelOnly}\" \n```", "```cs\n...\n@{\n var choices = new List<SelectListItem>\n {\n   new SelectListItem {Value=\"value1\", Text=\"text1\", Group=\"group1\"},\n   new SelectListItem {Value=\"value2\", Text=\"text2\", Group=\"group1\"}\n   ...\n   new SelectListItem {..., Group=\"group2\"}\n   ...\n }\n}\n<select asp-for=\"MyProperty\"  asp-items=\"choices\">\n <option value=\"\">Select a value</option>\n</select>\n... \n```", "```cs\n@{\n    Layout = \"_MyLayout\";\n} \n```", "```cs\n@{\n    Layout = \"_Layout\";\n} \n```", "```cs\n...\n<main role=\"main\" class=\"pb-3\">\n    ...\n    @RenderBody()\n    ...\n</main>\n... \n```", "```cs\n@*In the view *@\n@{\n    ViewData[\"Title\"] = \"Home Page\"; \n}\n@*In the layout view*@\n<head>\n<meta charset=\"utf-8\" />\n    ...\n    <title>@ViewData[\"Title\"] - My web application</title>\n    ... \n```", "```cs\n...\n<script src=\"img/site.js\" asp-append-version=\"true\"></script>\n@RenderSection(\"Scripts\", required: false)\n... \n```", "```cs\n.....\n@section scripts{\n    <script src=\"img/pageSpecificJavaScript.min.js\"></script>\n}\n..... \n```", "```cs\n<partial name=\"_viewname\" for=\"ModelProperty.NestedProperty\"/> \n```", "```cs\n<partial name=\"_viewname\" model=\"new MyModel{...})\" /> \n```", "```cs\n<vc:[view-component-name] par1=\"par1 value\" par2=\"parameter2 value\"> </vc:[view-component-name]> \n```", "```cs\npublic class MyTestViewComponent : ViewComponent\n    {\n\n        public async Task<IViewComponentResult> InvokeAsync(\n int par1, bool par2)\n        {\n            var model= ....\n            return View(\"ViewName\", model);\n        }\n\n    } \n```", "```cs\n<vc:my-test par1=\"10\" par2=\"true\"></vc:y-test> \n```", "```cs\nbuilder.Services.AddControllersWithViews(o => {\n    ...\n    // code that modifies o properties\n}); \n```", "```cs\nvar supportedCultures = new[]\n{\n   new CultureInfo(\"en-AU\"),\n   new CultureInfo(\"en-GB\"),\n   new CultureInfo(\"en\"),\n   new CultureInfo(\"es-MX\"),\n   new CultureInfo(\"es\"),\n   new CultureInfo(\"fr-CA\"),\n   new CultureInfo(\"fr\"),\n   new CultureInfo(\"it-CH\"),\n   new CultureInfo(\"it\")\n}; \n```", "```cs\nvar supportedUICultures = new[]\n{\n    new CultureInfo(\"en\"),\n    new CultureInfo(\"es\"),\n    new CultureInfo(\"fr\"),\n    new CultureInfo(\"it\")\n}; \n```", "```cs\napp.UseRequestLocalization(new RequestLocalizationOptions\n{\n     DefaultRequestCulture = new RequestCulture(\"en\", \"en\"),\n     // Formatting numbers, dates, etc.\n     SupportedCultures = supportedCultures,\n     // UI strings that we have localized.\n     SupportedUICultures = supportedUICultures,\n     FallBackToParentCultures = true,\n     FallBackToParentUICultures = true\n}); \n```", "```cs\nbuilder.Services.AddControllersWithViews()\n    .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix) \n```", "```cs\nbuilder.Services.AddLocalization(options =>\n    options.ResourcesPath = \"Resources\"); \n```", "```cs\n<ResourcesPath >/Views/Home/Index.<culture name>.resx \n```", "```cs\n@{\n    ViewData[\"Title\"] = Localizer[\"HomePageTitle\"];\n}\n<h2>@ViewData[\"MyTitle\"]</h2> \n```", "```cs\nbuilder.Services.AddControllersWithViews()\n    .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)\n    .AddDataAnnotationsLocalization(); \n```", "```cs\n{ResourcesPath}/ViewModels/Account/RegisterViewModel.{culture name}.resx \n```"]