- en: '*Chapter 4*: Designing a Solution Architecture'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：设计解决方案架构'
- en: In the previous chapter, we learned about some of the essential traits and skills
    that are needed to build your potential and become an effective solution architect.
    We also looked at a quick overview of what solution architecture is.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了一些构建你的潜力并成为有效解决方案架构师所需的必要特质和技能。我们还快速概述了什么是解决方案架构。
- en: In this chapter, we'll begin to focus more on solution architecture practices.
    In particular, we'll take a look at the key principles of solution architecture,
    and we'll explore popular **Unified Modeling Language** (**UML**) diagrams that
    are recommended for designing medium- to large-scale solutions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始更加关注解决方案架构的实践。特别是，我们将探讨解决方案架构的关键原则，并研究在设计中等规模到大型解决方案时推荐使用的流行**统一建模语言**（**UML**）图。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring the key principles of solution architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索解决方案架构的关键原则
- en: Delving into the most frequently used UML diagrams with concrete examples
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过具体示例深入研究最常用的UML图
- en: Walking through the process of creating a design architecture with UML
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过UML创建设计架构的过程
- en: By the end of this chapter, you will have enriched your knowledge and understanding
    of popular UML diagrams, and you will have learned how to use them in your design.
    Additionally, you will learn about the key principles of solution architecture
    and how they can influence your design process.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将丰富你对流行UML图的知识和理解，并学会如何在设计中使用它们。此外，你还将了解解决方案架构的关键原则以及它们如何影响你的设计过程。
- en: Exploring the key principles of solution architecture
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索解决方案架构的关键原则
- en: Architecture principles outline the fundamental procedures and guidelines that
    are required to design, build, and deploy a successful software solution. They
    are meant to influence your architecture approach and improve the quality attributes
    of the solution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 架构原则概述了设计、构建和部署成功软件解决方案所需的基本程序和指南。它们旨在影响你的架构方法并提高解决方案的质量属性。
- en: There are many principles out there that we can adopt in our methodology of
    work to prepare the design architecture. We can even define our own principles
    if we think they will add value to the architecture design or if we think they
    will efficiently improve the design process. Most importantly, we need to make
    sure we offer a good balance between theory and practice and that we adopt practical
    and powerful principles that will drive the business and technical changes in
    our solution's architectures.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多原则我们可以采用在我们的工作方法中准备设计架构。如果我们认为它们将为架构设计增加价值或如果我们认为它们将有效地提高设计过程，我们甚至可以定义我们自己的原则。最重要的是，我们需要确保我们提供理论与实践之间的良好平衡，并采用实用且强大的原则，以推动我们解决方案架构中的商业和技术变革。
- en: In general, we should aim for between 10 and 20 guiding principles for our solution
    architecture practices. Make sure that you do not have too many principles. This
    is because they become hard to remember and difficult to apply, which will limit
    our architecture's flexibility. In such cases, it is better to keep them simple
    and focused.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们应该为我们的解决方案架构实践设定10到20个指导原则。确保你不会有太多的原则。这是因为它们变得难以记忆和难以应用，这将限制我们架构的灵活性。在这种情况下，最好保持它们简单和专注。
- en: 'There is a standard way and recommended format that you can use to define an
    architecture principle. Usually, a principle is divided into four main parts:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种标准方式和推荐格式，你可以用来定义架构原则。通常，一个原则分为四个主要部分：
- en: '**Name**: The name should reflect the core value of the principle. It should
    be simple and easy to remember.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：名称应反映原则的核心价值。它应该是简单且易于记忆的。'
- en: '**Description**: The description is a statement that clearly defines and explains
    the principle.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：描述是一句明确定义和解释原则的陈述。'
- en: '**Rationale**: The rationale is a statement that highlights the business benefits
    of obeying the principle. It can also explain the correlation with other principles.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理由**：理由是一句强调遵守原则的商业效益的陈述。它也可以解释与其他原则的相关性。'
- en: '**Implications**: The implications should highlight the technical requirements
    and business requirements that are needed to adopt this principle.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**影响**：影响应突出采用此原则所需的技术要求和业务要求。'
- en: These elements are meant to support the understanding of each principle and
    justify its usage in the solution architecture.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素旨在支持对每个原则的理解，并证明其在解决方案架构中的应用合理性。
- en: 'Any principle we adopt should fall into a specific category or domain. According
    to **The Open Group Architecture Framework** (**TOGAF**), architecture principles
    broadly fall into four domains:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所采用的原则应属于特定的类别或领域。根据 **开放集团架构框架**（**TOGAF**），架构原则广泛分为四个领域：
- en: '**Business principles**: These are a set of guidelines that focus on the business
    aspects of the solution.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商业原则**：这是一套关注解决方案商业方面的指导方针。'
- en: '**Data principles**: These define the standard guidelines to manage and structure
    data. Additionally, they enforce a set of security measures in which to protect
    the solution assets.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据原则**：这些定义了管理和结构化数据的标准指导方针。此外，它们还强制执行一系列安全措施，以保护解决方案资产。'
- en: '**Application principles**: These deal with the attributes of an application
    such as performance, user experience, and how modules or subsystems interact with
    each other.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用原则**：这些涉及应用程序的属性，如性能、用户体验以及模块或子系统如何相互交互。'
- en: '**Technology principles**: These elaborate on the technical guidelines and
    requirements that are necessary for the success and continuity of the solution.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术原则**：这些详细说明了对于解决方案成功和持续运行所必需的技术指导方针和需求。'
- en: 'Tip:'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士：
- en: TOGAF is a framework and methodology that has been developed to provide a high-level
    approach to design and also build enterprise information technology architecture.
    You can learn more about architecture principles, as defined by TOGAF, at [https://pubs.opengroup.org/architecture/togaf9-doc/arch/chap20.html](https://pubs.opengroup.org/architecture/togaf9-doc/arch/chap20.html
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TOGAF 是一个框架和方法，旨在提供一种高级方法来设计和构建企业信息技术架构。您可以在 [https://pubs.opengroup.org/architecture/togaf9-doc/arch/chap20.html](https://pubs.opengroup.org/architecture/togaf9-doc/arch/chap20.html)
    了解 TOGAF 对架构原则的定义。
- en: )
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Here is an illustration that highlights the key principles of solution architecture.
    You can see that the four domains are consolidating a set of design guidelines
    in different domains to produce a solution that is flexible, scalable, and reusable:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个突出解决方案架构关键原则的插图。您可以看到，四个领域正在将不同领域的设计指导方针合并在一起，以产生一个灵活、可扩展和可重用的解决方案：
- en: '![Figure 4.1: The recommended key principles of the .NET solution architecture](img/Figure_4.01_B17366.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1：.NET 解决方案架构推荐的关键原则](img/Figure_4.01_B17366.jpg)'
- en: 'Figure 4.1: The recommended key principles of the .NET solution architecture'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：.NET 解决方案架构推荐的关键原则
- en: In the upcoming sections, we will explore the preceding principles that you
    really need to know. We can adopt these principles as is, or we can add, modify,
    and remove some principles based on our needs. However, always remember that a
    principle is made to benefit the solution we are suggesting, not to add any obstacles
    or complications.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨您真正需要了解的前述原则。我们可以直接采用这些原则，或者根据我们的需求添加、修改和删除一些原则。然而，始终记住，原则的目的是为了使我们所提出的解决方案受益，而不是增加任何障碍或复杂性。
- en: Business principles
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商业原则
- en: The solution architecture, including all the development deliverables and their
    quality, is of critical importance. However, we shouldn't only focus on the project
    plan, schedule, and outcome. Remember that the reason you are building the solution
    is to solve business problems. Therefore, it is a must for the solution architecture
    to align with the business goals and objectives. In the following sections, we
    will discuss three business principles that should be taken into account.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构，包括所有开发成果及其质量，至关重要。然而，我们不应只关注项目计划、进度和结果。记住，你构建解决方案的原因是为了解决商业问题。因此，解决方案架构与商业目标和目标保持一致是必须的。在接下来的章节中，我们将讨论应考虑的三个商业原则。
- en: Maximizing the benefit to the enterprise
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最大化对企业的利益
- en: All architectural and information management decisions must be made in a way
    that ensures the maximum number of benefits to the entire enterprise. For instance,
    the solution should bring long-term values to all entities within the enterprise,
    not solely to one department or minor group. This principle encourages the high-performing
    collaboration of service above self.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有架构和信息管理决策都必须以确保对整个企业带来最大利益的方式进行。例如，解决方案应为企业内的所有实体带来长期价值，而不仅仅是针对一个部门或小团体。这一原则鼓励以自我为中心的高效协作。
- en: Information management is everybody's business
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信息管理是每个人的事
- en: All key stakeholders, business experts, and technical teams are responsible
    for coordinating together as one committee to define the business objectives of
    the solution and ensuring that they align with the enterprise goals. Essentially,
    everyone in this committee is responsible for doing their own part in building
    the solution and managing it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有关键利益相关者、商业专家和技术团队都负责作为一个委员会协调一致，以定义解决方案的商业目标，并确保它们与企业目标一致。本质上，这个委员会的每个人都负责在自己的部分中构建和管理解决方案。
- en: Business continuity
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务连续性
- en: In the case of system failure, the solution architecture should ensure the business
    continuity of the enterprise. Put simply, any kind of system failure, including
    hardware, software, and data corruption should not affect the continuity of the
    business activities and operations. For instance, the solution design should suggest
    a state-of-the-art recovery mechanism, system redundancy, or failover backup plan
    to smooth the operation of the business functions in the case of disasters. The
    key stakeholders should define the criticality of the solution to the enterprise
    operations and decide what type of failover plan should be applied to ensure business
    continuity.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统故障的情况下，解决方案架构应确保企业的业务连续性。简单来说，任何类型的系统故障，包括硬件、软件和数据损坏，都不应影响业务活动和运营的连续性。例如，解决方案设计应建议最先进的恢复机制、系统冗余或故障转移备份计划，以在灾难情况下平滑业务功能的运行。关键利益相关者应定义解决方案对企业运营的重要性，并决定应应用哪种故障转移计划以确保业务连续性。
- en: Data principles
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据原则
- en: Data is an essential part of business processes; it is a valuable asset that
    empowers enterprise stakeholders to make strategic decisions based on key metrics
    and performance indicators. There are three data principles that should be taken
    into account when designing and building a software solution. We will explore
    each of them next.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是业务流程的重要组成部分；它是赋予企业利益相关者根据关键指标和绩效指标做出战略决策的有价值资产。在设计构建软件解决方案时，应考虑以下三个数据原则。我们将逐一探讨它们。
- en: Data is an asset
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据是资产
- en: Although many architects know about this principle already, we still find that
    data is not considered with a high level of importance in the way it should be.
    Data is a core business asset of the organization. Therefore, the design of a
    solution should ensure the proper storing, managing, and retrieving of the data
    with high-security measures for better protection.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然许多架构师已经知道这个原则，但我们仍然发现数据并没有像应该的那样被高度重视。数据是组织的核心商业资产。因此，解决方案的设计应确保以高安全措施正确存储、管理和检索数据，以更好地保护。
- en: Data is shared
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据是共享的
- en: Accurate data that is stored in a centralized repository is the backbone of
    the software solution, and timely access to the data is very important to improve
    the efficiency of the decision-makers who are using the solution. Additionally,
    business users need data in order to perform their daily duties. Therefore, your
    solution design should allow timely access to the data based on the access rights
    of your users.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在集中式存储库中的准确数据是软件解决方案的支柱，及时访问这些数据对于提高使用该解决方案的决策者的效率非常重要。此外，商业用户需要数据来执行他们的日常职责。因此，你的解决方案设计应允许根据用户的访问权限及时访问数据。
- en: Data security
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据安全
- en: The software solution should ensure the integrity and confidentiality of the
    data. It should protect the data and prohibit unauthorized access or unlawful
    processing. There are many data policies out there to protect the data; we need
    to comply with these policies based on our target users. For instance, if we are
    building a software solution targeting European citizens, then complying with
    the **General Data Protection Regulation** (**GDPR**) is a must.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 软件解决方案应确保数据的完整性和机密性。它应保护数据并禁止未经授权的访问或非法处理。有许多数据政策旨在保护数据；我们需要根据我们的目标用户遵守这些政策。例如，如果我们正在构建针对欧洲公民的软件解决方案，那么遵守**通用数据保护条例**（**GDPR**）是必须的。
- en: Application principles
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序原则
- en: The guiding principles of modern applications are evolving. They should be dynamic
    principles; remember that what was applicable in the past is not relevant in today's
    architecture. Always look to improve the principles that you adopt and make it
    a continuous phenomenon. Here are the principles that really matter and that make
    a difference in the delivery of modern and efficient applications.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用程序的指导原则正在演变。它们应该是动态原则；记住，过去适用的原则在今天的架构中不再相关。始终寻求改进您采用的原则，并使其成为一种持续现象。以下是一些真正重要的原则，它们在交付现代和高效应用程序方面产生了影响。
- en: Ease of use
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 易用性
- en: The application should be user-friendly, easy to use, and visually appealing.
    We should embrace simplicity; that is because the easier an application is to
    use the higher the chance that it will be adopted by our end users. Always put
    the users first; they are looking to use applications that can facilitate their
    work and make it efficient in a short period without having to spend a long time
    learning about it before they start getting value from it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应易于使用、直观且美观。我们应该拥抱简洁；这是因为应用程序越容易使用，就越有可能被我们的最终用户采用。始终将用户放在首位；他们希望使用能够帮助他们工作并使其在短时间内变得高效的应用程序，而无需花费大量时间学习它，在他们开始从中获得价值之前。
- en: Optimized application speed
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优化应用程序速度
- en: We live in the era of digital transformation; users are looking for real-time
    response applications. Therefore, the speed of the application is an important
    factor to consider, as it can affect the entire user experience.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活在数字化转型时代；用户正在寻找实时响应的应用程序。因此，应用程序的速度是一个重要的考虑因素，因为它可以影响整个用户体验。
- en: Technology principles
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术原则
- en: Our technology principles should always follow the latest technology trends.
    It is very important to modernize your company's technology platforms and development
    practices. This will allow you to design modern digital solutions. Let's explore
    the three principles that should be adopted in any .NET development team. We have
    listed them next.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的技术原则应始终遵循最新的技术趋势。现代化公司的技术平台和开发实践非常重要。这将使您能够设计现代的数字解决方案。让我们探讨在任何 .NET 开发团队中应采用的三个原则。我们将在下面列出。
- en: Working toward a cloud-native future
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 致力于云原生未来
- en: Cloud-native applications have proven to be the future of software. The solution
    we are trying to build can benefit from the platforms, services, and processes
    that are hosted in the cloud. For instance, the Azure services are highly scalable,
    easy to modify, and connected, which allows us to extend the application's capabilities
    with less coding.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用已被证明是软件的未来。我们试图构建的解决方案可以受益于云中托管的平台、服务和流程。例如，Azure 服务具有高度可扩展性、易于修改和连接性，这使得我们能够通过更少的编码来扩展应用程序的功能。
- en: Using .NET Core (.NET 5 or later)
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 .NET Core (.NET 5 或更高版本)
- en: The latest release of .NET Core is called **.NET 5**. It is a free and open
    source framework that can be used to build any type of application. It is a cross-platform
    framework that has inherited all the significant advantages of the regular .NET
    Framework. One of the key improvements of .NET Core is the performance, so consider
    using this framework when you are building new solutions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 的最新版本被称为 **.NET 5**。它是一个免费且开源的框架，可用于构建任何类型的应用程序。它是一个跨平台框架，继承了常规 .NET
    框架的所有重大优势。.NET Core 的一个关键改进是性能，因此在构建新解决方案时考虑使用此框架。
- en: Automating repetitive development tasks
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化重复的开发任务
- en: Preparing the release of your solution can be time-consuming, particularly if
    you are aiming to release several builds and hotfixes. You can plan out automated
    jobs to minimize the manual intervention needed within such tasks, make use of
    DevOps' tools to automate your builds, and test plans, too.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 准备解决方案的发布可能耗时，尤其是如果您旨在发布多个构建和热修复。您可以规划自动化作业以最小化此类任务中所需的手动干预，利用 DevOps 工具来自动化构建和测试计划。
- en: 'In this section, we learned about the key principles that should be adopted
    in your solution architecture. These principles provide guidelines for four primary
    aspects of the solution: business, data, application, and technology. Applying
    these principles will give you the ability to deliver a solid solution that is
    scalable, reusable, and easy to maintain.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了在您的解决方案架构中应采用的关键原则。这些原则为解决方案的四个主要方面提供了指导：业务、数据、应用和技术。应用这些原则将使您能够交付一个坚实、可扩展、可重用且易于维护的解决方案。
- en: In the next section, we will explore six popular UML diagrams that you should
    use when designing a software solution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨在设计和软件解决方案时应使用的六个流行 UML 图。
- en: Learning to model software architecture using UML
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习使用 UML 模型软件架构
- en: UML is a standard graphical representation that allows us to visualize the specification
    and design architecture of the software solution; it is a simplified way in which
    to communicate our architecture to the solution stakeholders. The purpose of the
    UML is to provide the development team and the business analysts with a unified
    design modeling notation that empowers them to explain complex business processes
    with simplified diagrams. Additionally, it enables us to construct and visualize
    the different software components and how they relate together, which defines
    the entire design architecture of the solution.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: UML 是一种标准图形表示法，允许我们可视化软件解决方案的规范和设计架构；这是一种简化我们与解决方案利益相关者沟通架构的方式。UML 的目的是为开发团队和业务分析师提供一个统一的设计建模符号，使他们能够用简化的图表解释复杂的企业流程。此外，它使我们能够构建和可视化不同的软件组件以及它们之间的关系，这定义了整个解决方案的设计架构。
- en: 'There are two categories of UML diagrams: **structural** and **behavioral**.
    Structural diagrams emphasize the static view of the system. They are used to
    visualize the different components and objects of the software. Mainly, they describe
    what is contained in a system.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: UML 图分为两类：**结构图**和**行为图**。结构图强调系统的静态视图。它们用于可视化软件的不同组件和对象。主要来说，它们描述了系统中包含的内容。
- en: Behavioral diagrams emphasize the dynamic view of the system. They are used
    to visualize the business specifications by describing the processes and functionalities
    supported by the software. Primarily, they describe what must happen in a system.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 行为图强调系统的动态视图。它们通过描述软件支持的过程和功能来可视化业务规范。主要来说，它们描述了系统中必须发生的事情。
- en: 'The following diagram shows the different types of UML diagrams:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图显示了不同的 UML 图类型：
- en: '![Figure 4.2: A list of UML diagram types](img/Figure_4.02_B17366.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2：UML 图类型列表](img/Figure_4.02_B17366.jpg)'
- en: 'Figure 4.2: A list of UML diagram types'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：UML 图类型列表
- en: 'In the upcoming sections, we will explore the most frequently used diagrams.
    Although there are many different types of UML diagrams that we can use to model
    solution architecture or describe system functionalities, we will explore the
    popular UML diagrams that are frequently used by most architects to document the
    different aspects of a software solution. They are listed as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨最常用的图。尽管我们可以使用许多不同类型的 UML 图来建模解决方案架构或描述系统功能，但我们将探讨大多数架构师经常使用的流行
    UML 图，以记录软件解决方案的不同方面。它们如下列出：
- en: Component diagrams
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件图
- en: Class diagrams
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类图
- en: Sequence diagrams
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列图
- en: State diagrams
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态图
- en: Activity diagrams
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动图
- en: Package diagrams
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包图
- en: Use case diagrams
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例图
- en: We will learn when to use each diagram, and we will also explore the different
    notations and symbols of each. Then, we will examine an example of each diagram.
    Let's start learning about these diagrams next.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习何时使用每个图，并探讨每个图的不同符号和表示法。然后，我们将检查每个图的示例。让我们从学习这些图开始。
- en: Component diagrams
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件图
- en: The UML component diagram is used to graphically represent the different modules
    and components in the software system, including the relationship and interaction
    between these modules. A module is a set of classes or interfaces that provides
    different functionalities but are grouped into one business routine.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: UML 组件图用于图形化表示软件系统中的不同模块和组件，包括这些模块之间的关系和交互。模块是一组提供不同功能但被分组到一个业务流程中的类或接口。
- en: The benefits of component diagrams
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件图的好处
- en: 'Component diagrams can help you by doing the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 组件图可以通过以下方式帮助您：
- en: Visualizing the overall physical structure of the software system
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化软件系统的整体物理结构
- en: Describing the system's components and how they are related
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述系统的组件及其相互关系
- en: Grouping the object-oriented classes based on a common service objective
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据共同的服务目标对面向对象的类进行分组
- en: Modeling the .NET source code or the database of the system
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟系统的 .NET 源代码或数据库
- en: The notations and symbols of a component diagram
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件图的符号和表示法
- en: 'Here are the different shapes and symbols used to draw a component diagram:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了用于绘制组件图的不同形状和符号：
- en: '![Figure 4.3: The notations and symbols of a component diagram](img/Figure_4.03_B17366.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3：组件图的符号和表示法](img/Figure_4.03_B17366.jpg)'
- en: 'Figure 4.3: The notations and symbols of a component diagram'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：组件图的符号和表示法
- en: The component diagram of a shopping system
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 购物系统的组件图
- en: Let's assume that we want to build a simple online shopping solution. We will
    use a component diagram to describe the different components in this system.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要构建一个简单的在线购物解决方案。我们将使用组件图来描述该系统中的不同组件。
- en: 'First, we need to identify these components by grouping the functional requirements
    according to their purpose. In this example, we have three components:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要通过根据其目的对功能需求进行分组来识别这些组件。在这个例子中，我们有三个组件：
- en: The orders
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单
- en: The customer accounts
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户账户
- en: The products inventory
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品库存
- en: 'Next, we need to identify and visualize the relationships between these components.
    To make an order, the customer should provide the necessary input to finalize
    the order. That''s why we need to use the interface symbol to relate the order
    to the customer; the customer should then select one or more products from the
    inventory. This will ensure that an order is fully associated with the products.
    So, we will use the dependency symbol to relate the order to the products. Here
    is an example of a component diagram describing the three components along with
    their interactions:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要识别和可视化这些组件之间的关系。为了下订单，客户应提供必要的输入以完成订单。这就是为什么我们需要使用接口符号将订单与客户关联起来的原因；然后客户应从库存中选择一个或多个产品。这将确保订单与产品完全关联。因此，我们将使用依赖符号将订单与产品关联起来。以下是一个描述三个组件及其交互的组件图示例：
- en: '![Figure 4.4: A UML component diagram for online shopping](img/Figure_4.04_B17366.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4：在线购物 UML 组件图](img/Figure_4.04_B17366.jpg)'
- en: 'Figure 4.4: A UML component diagram for online shopping'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4：在线购物 UML 组件图
- en: Note that you can use the component diagram to illustrate the physical files
    in your source code. This is very helpful when doing forward or reverse engineering
    to identify the set of source code files. Additionally, you can use the component
    diagram to model a physical database.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您可以使用组件图来展示源代码中的物理文件。这在进行正向或逆向工程以识别源代码文件集时非常有帮助。此外，您还可以使用组件图来模拟物理数据库。
- en: Class diagrams
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类图
- en: The UML class diagram is used to describe the structure of the object-oriented
    system by graphically representing the classes with their attributes and operations,
    including the relationships between these classes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: UML 类图用于通过图形化表示类及其属性和操作来描述面向对象系统的结构，包括这些类之间的关系。
- en: The benefits of class diagrams
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类图的好处
- en: 'Class diagrams are very popular among software engineers. They are very powerful
    and can be beneficial when you want to describe the object-oriented classes within
    the software system. We can use UML class diagrams to do the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 类图在软件工程师中非常受欢迎。它们非常强大，当你想要描述软件系统内的面向对象类时非常有用。我们可以使用 UML 类图来完成以下任务：
- en: Describe each class in the system with its structural features (attributes)
    along with its behavioral futures (operations).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用结构特征（属性）和行为特征（操作）描述系统中的每个类。
- en: Draw the relationships between classes, such as **abstraction** and **association**.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制类之间的关系，例如**抽象**和**关联**。
- en: Visualize the data models of the system.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化系统的数据模型。
- en: Create a detailed model of the software from a business perspective, which is
    very helpful for non-technical stakeholders in order to understand the general
    overview of the system.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从业务角度创建软件的详细模型，这对非技术利益相关者了解系统的总体概述非常有帮助。
- en: Generate **C#** source code from the class diagrams.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从类图中生成**C#**源代码。
- en: The notations and symbols of a class diagram
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类图的符号和表示
- en: 'Class diagrams are simple and easy to read. Here is an example class diagram
    to help you understand the different notations:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 类图简单易读。以下是一个示例类图，以帮助你理解不同的符号：
- en: '![Figure 4.5: An example class diagram](img/Figure_4.05_B17366.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图4.5：一个示例类图](img/Figure_4.05_B17366.jpg)'
- en: 'Figure 4.5: An example class diagram'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5：一个示例类图
- en: 'As you can see, the standard class notation is composed of three sections:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，标准的类符号由三个部分组成：
- en: The upper section contains the name of the class.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上半部分包含类的名称。
- en: The middle section contains the class attributes/members with their types.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间部分包含类的属性/成员及其类型。
- en: The bottom section contains the class methods displayed in a list format.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下半部分包含以列表格式显示的类方法。
- en: 'There are different visibility symbols that are used to indicate the access
    level of information contained in a class:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的可见性符号用来指示类中包含信息的访问级别：
- en: '![Figure 4.6: C# access modifiers and their symbols in UML](img/Figure_4.06_B17366.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图4.6：C#访问修饰符及其在UML中的符号](img/Figure_4.06_B17366.jpg)'
- en: 'Figure 4.6: C# access modifiers and their symbols in UML'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：C#访问修饰符及其在UML中的符号
- en: 'We can use cardinality notations to define the type of relationship between
    two classes. For example, one customer can have one or more orders (that is, one
    to many relationships), while another order can have one customer (that is, one
    to one). The following table shows the different symbols of cardinality:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用基数符号来定义两个类之间关系的类型。例如，一个客户可以有一个或多个订单（即一对多关系），而另一个订单可以有一个客户（即一对一）。以下表格显示了不同的基数符号：
- en: '![Figure 4.7: Cardinality types](img/Figure_4.07_B17366.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图4.7：基数类型](img/Figure_4.07_B17366.jpg)'
- en: 'Figure 4.7: Cardinality types'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：基数类型
- en: 'There are different types of relationships between classes. The following table
    shows the symbols of these relationships:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 类之间存在不同类型的关系。以下表格显示了这些关系的符号：
- en: '![Figure 4.8: The relationship types between classes](img/Figure_4.08_B17366.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8：类之间的关系类型](img/Figure_4.08_B17366.jpg)'
- en: 'Figure 4.8: The relationship types between classes'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：类之间的关系类型
- en: The class diagram of an online shopping system
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在线购物系统的类图
- en: 'In *The component diagram of an online shopping system* section, we visualized
    the component diagram for an online shopping system. In this section, we will
    illustrate the class diagram of this system:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在*在线购物系统的组件图*部分，我们可视化了在线购物系统的组件图。在本节中，我们将展示该系统的类图：
- en: '![Figure 4.9: A class diagram of an online shopping system](img/Figure_4.09_B17366.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9：一个在线购物系统的类图](img/Figure_4.09_B17366.jpg)'
- en: 'Figure 4.9: A class diagram of an online shopping system'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9：一个在线购物系统的类图
- en: As you can see, each box represents a class in the header. We should provide
    the class name and then list all the properties and operations of the class. The
    interaction between the classes is visualized through the lines. We call them
    relationships.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每个框代表一个类在标题中。我们应该提供类名，然后列出类的所有属性和方法。类之间的交互通过线条来可视化。我们称之为关系。
- en: The class diagram can be used during the entire life cycle of the software,
    starting with visualizing the high-level conceptual idea of the software, then
    when creating a detailed understanding of the specifications, and, finally, during
    the implementation of the software. The class diagram is an essential modeling
    technique that is used to visualize all the object-oriented objects in your system,
    so make sure you master it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 类图可以在软件的整个生命周期中使用，从可视化软件的高级概念开始，然后是在创建详细理解规范时，最后是在软件实现过程中。类图是一种基本的建模技术，用于可视化系统中所有的面向对象对象，因此请确保你掌握了它。
- en: Sequence diagrams
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列图
- en: A sequence diagram is used to document a business or logical process. It illustrates
    the flow of events and messages exchanged between objects during the execution
    of a process. It is considered an interactive diagram because it can describe
    a use case or an operation supported by the software.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 时序图用于记录业务或逻辑过程。它展示了在过程执行期间对象之间交换的事件和消息的流程。因为它可以描述软件支持的使用案例或操作，所以被认为是一个交互图。
- en: This interactive operation can happen between a user and the software you are
    building, between your software and other systems (such as middleware integrations),
    or between the sub-modules within the same software. For example, we can use the
    sequence diagram to explain the authentication mechanism in our system or to illustrate
    the booking process of a hotel reservation system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这种交互操作可以发生在用户与您正在构建的软件之间，或者发生在您的软件与其他系统（如中间件集成）之间，或者发生在同一软件的子模块之间。例如，我们可以使用时序图来解释我们系统中的认证机制，或者说明酒店预订系统的预订流程。
- en: The benefits of sequence diagrams
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时序图的优点
- en: 'Sequence diagrams are very helpful when it comes to describing a complex operation
    or a use case. You simply highlight the objects involved, the order of the steps
    in the operation, and the messages exchanged from the beginning of the process
    until completion. You can use sequence diagrams if you want to do the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 时序图在描述复杂操作或用例时非常有帮助。您只需突出显示涉及的对象、操作步骤的顺序以及从过程开始到完成交换的消息。如果您想执行以下操作，可以使用时序图：
- en: Explain a complex use case with several steps.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释具有多个步骤的复杂用例。
- en: Model the interaction between objects and components during an operation.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在操作期间建模对象和组件之间的交互。
- en: Illustrate an integrated procedure between your system and another third-party
    system.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示您系统与另一个第三方系统之间的集成流程。
- en: The notations and symbols of a sequence diagram
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时序图的符号和符号
- en: 'The following table lists the basic notations and symbols that you must know
    in order to create a sequence diagram:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了您必须知道的基本符号和符号，以便创建时序图：
- en: '![Figure 4.10: The notations and symbols of a sequence diagram](img/Figure_4.10_B17366.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10：时序图的符号和符号](img/Figure_4.10_B17366.jpg)'
- en: 'Figure 4.10: The notations and symbols of a sequence diagram'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10：时序图的符号和符号
- en: In the next section, we'll create a sequence diagram.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个时序图。
- en: The sequence diagram of a shopping cart
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 购物车时序图
- en: 'In the following example, we have illustrated a simple sequence diagram of
    an example use case for an online shopping process. The diagram includes these
    lifelines:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们展示了一个在线购物过程的示例用例的简单时序图。该图包括以下生命线：
- en: The customer who wants to shop from the online system.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想要从在线系统中购物的客户。
- en: The shopping cart interface, which holds the items that a user wants to buy.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物车界面，它保存了用户想要购买的项目。
- en: The order module, which processes the user request and confirms the payment.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单模块，它处理用户请求并确认支付。
- en: 'The process is described using these sequence messages:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程使用以下时序消息进行描述：
- en: Users can add a product to the shopping cart.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以向购物车添加产品。
- en: Users can remove a product from the shopping cart.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以从购物车中移除产品。
- en: Users can adjust the number of items.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以调整项目数量。
- en: Users can see the total price of the selected items.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以看到所选项目的总价。
- en: Users can confirm the order.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以确认订单。
- en: 'The following diagram contains a loop fragment that allows the user to add
    more products or items to the shopping cart before confirming the final order:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图包含一个循环片段，允许用户在确认最终订单之前向购物车添加更多产品或项目：
- en: '![Figure 4.11: A sequence diagram of the shopping cart process](img/Figure_4.11_B17366.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图4.11：购物车处理时序图](img/Figure_4.11_B17366.jpg)'
- en: 'Figure 4.11: A sequence diagram of the shopping cart process'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11：购物车处理时序图
- en: In the next section, we'll learn about state diagrams.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解状态图。
- en: State diagrams
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态图
- en: A state diagram (or a state machine diagram) is typically convenient when you
    want to describe how your system behaves and responds. It is a combination of
    states, transitions, events, and activities. It is used to model the process of
    a particular function and shows all of the transitions from one state to another.
    It can also describe a single object and illustrate how that object behaves in
    response to a series of events in your system. The state of an entity is defined
    by the values of its attributes, which are controlled by a particular event at
    a specific time.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 状态图（或状态机图）通常在您想要描述系统如何表现和响应时很方便。它是状态、转换、事件和活动的组合。它用于模拟特定功能的流程，并显示从一种状态到另一种状态的所有转换。它还可以描述单个对象，并说明该对象如何响应系统中的一系列事件。实体的状态由其属性的值定义，这些值由特定时间发生的特定事件控制。
- en: State diagrams are very useful when you wish to model the behavior of an interface,
    class, or collaboration, and the business processes triggered by specific events.
    It also helps you improve processes by eliminating unnecessary steps and identifying
    missing steps that should be added to the process to make it more efficient.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望模拟接口、类或协作的行为以及由特定事件触发的业务流程时，状态图非常有用。它还有助于通过消除不必要的步骤和识别应添加到流程中以使其更有效的缺失步骤来改进流程。
- en: The benefits of state diagrams
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态图的优点
- en: 'State diagrams are used to describe how an event can change the behavior of
    a process. We can use state diagrams to do the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 状态图用于描述事件如何改变过程的行为。我们可以使用状态图来完成以下操作：
- en: Visualize the dynamic view of a system.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化系统的动态视图。
- en: Model the flow of states in a business process scenario.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在业务流程场景中模拟状态流。
- en: Explain an event-driven process using the state of objects when they move from
    one step to another.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对象从一步移动到另一步时的状态来解释事件驱动的过程。
- en: Illustrate interactive functionalities in the system.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示系统中的交互功能。
- en: The notations and symbols of a state diagram
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 状态图的符号和记号
- en: 'The following table lists the basic notations and symbols that you must know
    in order to create a state diagram:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了您必须了解的基本符号和记号，以便创建状态图：
- en: '![Figure 4.12: The notations and symbols of a state diagram](img/Figure_4.12_B17366.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12：状态图的符号和记号](img/Figure_4.12_B17366.jpg)'
- en: 'Figure 4.12: The notations and symbols of a state diagram'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12：状态图的符号和记号
- en: In the next section, we will use these symbols to draw a state diagram to describe
    a two-factor authentication process.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用这些符号来绘制状态图，以描述双因素认证过程。
- en: The state diagram of a two-factor authentication process
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 双因素认证过程的状态图
- en: 'In the following diagram, we have described the events of a two-factor authentication
    process along with the transitions from one state to another:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们描述了双因素认证过程的事件以及从一个状态到另一个状态的转换：
- en: '![Figure 4.13: A state diagram describing an authentication process](img/Figure_4.13_B17366.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13：描述认证过程的状图](img/Figure_4.13_B17366.jpg)'
- en: 'Figure 4.13: A state diagram describing an authentication process'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13：描述认证过程的状图
- en: The preceding diagram shows the first event that occurs as a result of the user
    providing their login credentials. Then, the system validates the credentials
    and sends the authentication token back to the user if the credentials are valid;
    otherwise, the user is requested to enter the valid credentials again. After that,
    the user should submit the token for verification by the system, which will decide
    to complete the login process if the token is valid; otherwise, the user is requested
    to re-enter the token to continue.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了用户提供登录凭证后发生的第一事件。然后，系统验证凭证，如果凭证有效，则将认证令牌发送回用户；否则，要求用户再次输入有效凭证。之后，用户应提交令牌供系统验证，系统将决定如果令牌有效则完成登录过程；否则，要求用户重新输入令牌以继续。
- en: Activity diagrams
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动图
- en: One of the important diagrams in UML is the activity diagram. It is similar
    to the state diagram in terms of illustrating the dynamic view of the system.
    An activity diagram is a flowchart that describes the flow of control from one
    activity to another activity among the objects in a system. It is mostly used
    to model business processes. The activities described in an activity diagram can
    be sequential and concurrent.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: UML 中的重要图之一是活动图。在说明系统的动态视图方面，它与状态图类似。活动图是描述系统内对象之间从一项活动到另一项活动的控制流流程图。它主要用于建模业务流程。活动图中描述的活动可以是顺序的也可以是并发的。
- en: The benefits of activity diagrams
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动图的优点
- en: 'An activity diagram is a useful flowchart that describes the activities performed
    by a process in our system. Activity diagrams can help us to do the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 活动图是一种有用的流程图，描述了系统中流程执行的活动。活动图可以帮助我们做到以下几点：
- en: Explain the steps of a use case scenario by describing all of the activities.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过描述所有活动来解释用例场景的步骤。
- en: Learn the logic of a particular algorithm.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习特定算法的逻辑。
- en: Brainstorm and model business processes and workflows.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思考并建模业务流程和工作流程。
- en: The notations and symbols of an activity diagram
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动图的符号和表示法
- en: 'Before you begin creating an activity diagram, you must understand its notations
    and symbols. The following table lists the main symbols of an activity diagram:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建活动图之前，您必须了解其符号和表示法。以下表格列出了活动图的主要符号：
- en: '![Figure 4.14: The notations and symbols of an activity diagram](img/Figure_4.14_B17366.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14：活动图的符号和表示法](img/Figure_4.14_B17366.jpg)'
- en: 'Figure 4.14: The notations and symbols of an activity diagram'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14：活动图的符号和表示法
- en: In the next section, we'll take a look at an example of an activity diagram.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看一个活动图的示例。
- en: The activity diagram of an ATM system
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ATM 系统的活动图
- en: 'In the following example, we have described a basic process for an ATM system
    using an activity diagram:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用活动图描述了一个 ATM 系统的基本流程：
- en: '![Figure 4.15: An activity diagram for an ATM system](img/Figure_4.15_B17366.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15：ATM 系统的活动图](img/Figure_4.15_B17366.jpg)'
- en: 'Figure 4.15: An activity diagram for an ATM system'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15：ATM 系统的活动图
- en: As you can see, the preceding diagram describes the process of an ATM transaction.
    It starts by inserting the card and then providing the PIN code. Initially, the
    server will verify the PIN code. If it is valid, then the server will advise the
    ATM to allow the customer to proceed, enter the withdrawal amount, and complete
    the transaction; otherwise, the card will be ejected.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，前面的图描述了 ATM 交易的过程。它从插入卡片并输入 PIN 码开始。最初，服务器将验证 PIN 码。如果有效，则服务器将建议 ATM 允许客户继续操作，输入取款金额并完成交易；否则，卡片将被弹出。
- en: Package diagrams
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包图
- en: The main purpose of using a package diagram is to describe the high-level logical
    architecture of our system by visualizing the various layers along with their
    dependencies in which a layer represents a group of classes. The physical components
    in the system are grouped into layers based on their roles and the tasks they
    perform in the system. It is possible to create nested layers within a single
    layer to describe the advanced details of a major component.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包图的主要目的是通过可视化各种层及其依赖关系来描述我们系统的整体逻辑架构，其中一层代表一组类。系统中的物理组件根据其在系统中的角色和执行的任务分组到层中。在单个层内创建嵌套层，可以描述主要组件的高级细节。
- en: After defining the main layers in your system, we need to visualize the dependencies
    or relationships between the layers. This will describe the interactions that
    are occurring between layers.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义系统中的主要层之后，我们需要可视化层之间的依赖关系或关系。这将描述层之间正在发生的交互。
- en: The benefits of package diagrams
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包图的优点
- en: 'By unifying the major components into layers, a package diagram can make our
    architecture easy to understand. We can use the package diagram to help us perform
    the following tasks:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将主要组件统一到层中，包图可以使我们的架构易于理解。我们可以使用包图来帮助我们执行以下任务：
- en: Explain the high-level logical architecture and structure of the system.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释系统的高级逻辑架构和结构。
- en: Visualize the major components or functional units of the design and their interdependencies.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化设计的主要组件或功能单元及其相互依赖关系。
- en: Identify the possibilities of integrating your system with a third-party system.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别将您的系统与第三方系统集成可能性的可能性。
- en: Discover gaps in the architecture that could prevent your system from evolving.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现可能导致您的系统无法演变的架构中的差距。
- en: Communicate the effort that is required in the case of a major change that might
    affect several layers.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能影响多个层的主要变更情况下，传达所需的工作量。
- en: Align with the development team on the intended architecture. This diagram provides
    you with the ability to compare your architecture with what is being implemented
    during the development.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与开发团队就预期架构达成一致。此图为您提供比较您的架构与开发过程中实施的内容的能力。
- en: The notations and symbols of a package diagram
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包图的符号和表示法
- en: 'The following table lists the main symbols of the package diagram:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了包图的主要符号：
- en: '![Figure 4.16: The notations and symbols of a layer diagram](img/Figure_4.16_B17366.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图4.16：层图的符号和表示法](img/Figure_4.16_B17366.jpg)'
- en: 'Figure 4.16: The notations and symbols of a layer diagram'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16：层图的符号和表示法
- en: In the following section, we'll examine the package diagram of an ASP.NET web
    solution.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将检查典型ASP.NET Web解决方案的包图。
- en: The package diagram of an ASP.NET web solution
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ASP.NET Web解决方案的包图
- en: 'In the following diagram, we have used a package diagram to describe the high-level
    architecture of a typical ASP.NET solution without mentioning any details about
    the classes and assets within each package:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们使用包图来描述典型ASP.NET解决方案的高级架构，而不提及每个包中类和资产的具体细节：
- en: '![Figure 4.17: A package diagram for a typical ASP.NET solution](img/Figure_4.17_B17366.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图4.17：典型ASP.NET解决方案的包图](img/Figure_4.17_B17366.jpg)'
- en: 'Figure 4.17: A package diagram for a typical ASP.NET solution'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17：典型ASP.NET解决方案的包图
- en: In the preceding diagram, we have represented the packages within the multitier
    architecture of an ASP.NET solution. The **Presentation Layer** includes the user
    interface of the solution, and the **Services Layer** represents a middleware
    service that provides high-level communication services to web and mobile apps.
    The **Business Layer** holds all the business logic and entities. As for the **Data
    Layer**, this includes methods in which to access data stored in the database.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们已经表示了ASP.NET解决方案的多层架构中的包。**表示层**包括解决方案的用户界面，**服务层**代表一个中间件服务，为Web和移动应用提供高级通信服务。**业务层**包含所有业务逻辑和实体。至于**数据层**，这包括访问存储在数据库中的数据的方法。
- en: Use case diagrams
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例图
- en: 'One of the most exciting moments in software engineering is the point at which
    the product you are designing and developing meets the customer''s needs. There
    is nothing better than having clear use cases to reach this target. Use cases
    are essential for describing the product from the client''s perspective. There
    are two types of use cases: **textual** and **visual**.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程中最激动人心的时刻之一，就是您正在设计和开发的产品满足客户需求的那一刻。没有比拥有清晰的用例更好地达到这个目标了。用例对于从客户的角度描述产品至关重要。有两种类型的用例：**文本**和**视觉**。
- en: In [*Chapter 1*](B17366_01_Final_NM_ePub.xhtml#_idTextAnchor013), *Principles
    of the Software Development Life Cycle*, we learned about textual use cases and
    how to prepare them. In this section, we are going to cover the visual representations
    of use cases.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B17366_01_Final_NM_ePub.xhtml#_idTextAnchor013)《软件开发生命周期原理》中，我们学习了文本用例及其准备方法。在本节中，我们将介绍用例的可视化表示。
- en: A use case diagram is used to visualize the user's requirements; more specifically,
    it is used to visualize the system behavior and the interaction between the users
    and the system.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 用例图用于可视化用户需求；更具体地说，它用于可视化系统行为以及用户与系统之间的交互。
- en: The benefits of use case diagrams
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例图的好处
- en: 'A use case diagram is a simple and effective technique that can be used to
    visualize the user''s interaction with the system. It doesn''t show all the detailed
    user requirements but only the interaction of the use case. Use case diagrams
    can help you by doing the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 用例图是一种简单而有效的技术，可用于可视化用户与系统的交互。它不显示所有详细用户需求，而只显示用例的交互。用例图可以通过以下方式帮助您：
- en: Illustrating the users' interaction with the software
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阐述用户与软件的交互
- en: Visualizing the functional needs and the scope of the system
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化系统的功能需求和范围
- en: Showing the high-level steps of a use case
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示用例的高级步骤
- en: Aligning the user's requirements with the implementation and supporting the
    generation of the test cases
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户需求与实现相匹配并支持测试用例的生成
- en: The notations and symbols of a use case diagram
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例图的符号和表示
- en: 'The notations of a use case diagram are simple and straightforward. The following
    table lists the main symbols of a use case diagram:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 用例图的符号简单直接。以下表格列出了用例图的主要符号：
- en: '![Figure 4.18: The notations and symbols of a use case diagram](img/Figure_4.18_B17366.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图4.18：用例图的符号和表示](img/Figure_4.18_B17366.jpg)'
- en: 'Figure 4.18: The notations and symbols of a use case diagram'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.18：用例图的符号和表示
- en: A use case diagram for the interaction between the customer and the ATM
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户与ATM之间的用例图
- en: 'In the following diagram, we created a use case diagram to describe the main
    functionalities supported by the ATM system, including the interaction with the
    customer:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们创建了一个用例图来描述ATM系统支持的主要功能，包括与客户的交互：
- en: '![Figure 4.19: A use case diagram for an ATM system](img/Figure_4.19_B17366.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图4.19：ATM系统的用例图](img/Figure_4.19_B17366.jpg)'
- en: 'Figure 4.19: A use case diagram for an ATM system'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.19：ATM系统的用例图
- en: In the preceding diagram, the actor is the customer who is using the ATM system
    and trying to authenticate to complete a transaction. The colored ellipses represent
    the functionalities supported by the system, and the lines represent the association
    and interaction between the blocks.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，参与者是使用ATM系统并尝试进行身份验证以完成交易的客户。彩色椭圆表示系统支持的功能，而线条表示块之间的关联和交互。
- en: In this section, we learned about the most frequently used UML diagrams that
    are essential to document many aspects of the solution such as the solution design,
    the structure of the object-oriented system, and the business and logical processes.
    We also learned about how our system behaves and responds to user interactions,
    the flow of control from one activity to another activity among the objects in
    the system, the high-level logical layers of your system with their dependencies,
    and the requirements from the client's perspective.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了最常用的UML图，这些图对于记录解决方案的许多方面至关重要，例如解决方案设计、面向对象的系统结构以及业务和逻辑流程。我们还学习了我们的系统如何行为和响应用户交互，系统对象之间从一项活动到另一项活动的控制流，系统的高级逻辑层及其依赖关系，以及从客户的角度看的需求。
- en: In the next section, we will learn how to create a solution architecture using
    UML.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用UML创建解决方案架构。
- en: Designing architecture with UML
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用UML设计架构
- en: 'So far, we have learned that a UML diagram is a single simplified representation
    of the software. We will need to build various UML diagrams in order to understand
    the complete aspects of the system and to communicate our architecture design
    to stakeholders and different types of users. Grouping these UML diagrams into
    logical subsets will create a particular view of the system. The architecture
    design is represented in a collection of five views. These views are as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解到UML图是软件的单个简化表示。我们需要构建各种UML图来理解系统的完整方面，并将我们的架构设计传达给利益相关者和不同类型的用户。将这些UML图分组到逻辑子集中，将创建系统的特定视图。架构设计是通过五个视图的集合来表示的。这些视图如下：
- en: '**Use case view**: The **use case view** represents the focal point for all
    of the other views because it includes the user requirements, including all of
    the system functionalities. Without this view, you cannot build the other views.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例视图**：**用例视图**是所有其他视图的焦点，因为它包括了用户需求，包括所有系统功能。没有这个视图，就无法构建其他视图。'
- en: '**Design view**: The **design view** is intended to illustrate how the functionality
    defined in the use case view is designed inside the system in terms of classes
    and their relationships. This view is mainly described by the UML class diagram.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计视图**：**设计视图**旨在说明在用例视图中定义的功能如何在系统中以类及其关系的形式设计。这个视图主要是由UML类图来描述的。'
- en: '**Implementation view**: The **implementation view** describes the core components
    of the system and the interaction between them. It is mainly represented by the
    UML component diagram.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现视图**：**实现视图**描述了系统的核心组件及其之间的交互。它主要是由UML组件图来表示的。'
- en: '**Process view**: The **process view** describes the flow supported by the
    system. It does this by converging the performance, scalability, and throughput
    of the system. It is mainly represented by the UML class diagram and is similar
    to the **design view**, but focuses on the active classes involved in the processes.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过程视图**：**过程视图**描述了系统支持的流程。它通过汇聚系统的性能、可扩展性和吞吐量来实现这一点。它主要由UML类图表示，类似于**设计视图**，但专注于参与流程的活跃类。'
- en: '**Deployment view**: The **deployment view** describes the deployment of the
    system by focusing on the system topology, distribution, delivery, and installation.
    It is represented by the UML deployment diagram.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署视图**：**部署视图**通过关注系统拓扑、分布、交付和安装来描述系统的部署。它由UML部署图表示。'
- en: 'The following diagram illustrates the five views along with the use case view
    in the center, which is connected to all of the other views:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了五个视图，其中用例视图位于中心，并与所有其他视图相连：
- en: '![Figure 4.20: System architecture views](img/Figure_4.20_B17366.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图4.20：系统架构视图](img/Figure_4.20_B17366.jpg)'
- en: 'Figure 4.20: System architecture views'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.20：系统架构视图
- en: 'The following table summarizes the architecture views, along with the related
    UML diagrams, to help in the understanding of the different aspects of the system:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了架构视图，以及相关的UML图，以帮助理解系统的不同方面：
- en: '![Figure 4.21: System architecture views along with their related UML diagrams](img/Figure_4.21_B17366.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图4.21：系统架构视图及其相关的UML图](img/Figure_4.21_B17366.jpg)'
- en: 'Figure 4.21: System architecture views along with their related UML diagrams'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.21：系统架构视图及其相关的UML图
- en: The solution architect is responsible for creating the initial version of these
    views with their related diagrams and handling the updates that construct the
    solution architecture. The entire solution architecture is used to influence and
    guide the development activities throughout the project life cycle.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案架构师负责创建这些视图及其相关图的第一版，并处理构建解决方案架构的更新。整个解决方案架构被用于影响和指导项目生命周期中的开发活动。
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the key principles that outline the fundamental
    procedures and guidelines required to design, build, and deploy a software solution.
    Additionally, we learned about the essential UML diagrams with real examples to
    illustrate the different elements in each diagram, along with their benefits,
    and when to use each of them. Later in this chapter, we explored the process that
    is involved when constructing a solution architecture with UML.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了设计、构建和部署软件解决方案所需的基本程序和指南的关键原则。此外，我们还学习了必要的UML图，并通过实际例子说明了每个图中不同元素及其益处，以及何时使用它们。在本章的后面部分，我们探讨了使用UML构建解决方案架构所涉及的过程。
- en: In the next chapter, we will dig deep into the core architecture patterns. We
    will focus on the microservices architecture, and we will learn how to choose
    the right pattern for a specific solution.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨核心架构模式。我们将重点关注微服务架构，并学习如何为特定解决方案选择正确的模式。
