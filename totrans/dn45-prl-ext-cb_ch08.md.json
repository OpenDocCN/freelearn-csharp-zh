["```cs\n    <Window x:Class=\"WordCountAsync.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"WordCountAsync\" Height=\"350\" Width=\"525\">\n        <Grid>\n            <Button x:Name=\"StartButton\" \n        Content=\"Start\" \n        HorizontalAlignment=\"Left\" \n        Margin=\"219,195,0,0\" \n        VerticalAlignment=\"Top\" \n        Width=\"75\" \n        RenderTransformOrigin=\"-0.2,0.45\" \n        Click=\"StartButton_Click\"/>\n            <TextBlock x:Name=\"TextResults\" \n          HorizontalAlignment=\"Left\" \n          Margin=\"60,28,0,0\" \n          TextWrapping=\"Wrap\" \n          VerticalAlignment=\"Top\" \n          Height=\"139\" \n          Width=\"411\"/>\n\n        </Grid>\n    </Window>\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net.Http;\n    using System.Threading.Tasks;\n    using System.Windows;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n\n    }\n    ```", "```cs\n    public async Task<int> GetWordCountAsync()\n    {\n      TextResults.Text += \"Getting the word count for Origin of Species...\\n\";\n      var client = new HttpClient();\n      var bookContents = await client.GetStringAsync(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n      var wordArray = bookContents.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n      return wordArray.Count();           \n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n      var result = await GetWordCountAsync();\n      TextResults.Text += String.Format(\"Origin of Species word count: {0}\",result);\n    }\n    ```", "```cs\nprivate async void StartButton_Click(object sender, RoutedEventArgs e)\n{\n  StartButton.Enabled = false;\n  var result = await GetWordCountAsync();\n  TextResults.Text += String.Format(\"Origin of Species word count: {0}\",\n..................  result);\n  StartButton.Enabled = true;\n}\n```", "```cs\n    <Window x:Class=\"WordCountAsync.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"WordCountAsync\" Height=\"350\" Width=\"525\">\n        <Grid>\n            <Button x:Name=\"StartButton\" \n        Content=\"Start\" \n        HorizontalAlignment=\"Left\" \n        Margin=\"219,195,0,0\" \n        VerticalAlignment=\"Top\" \n        Width=\"75\" \n        RenderTransformOrigin=\"-0.2,0.45\" \n        Click=\"StartButton_Click\"/>\n            <TextBlock x:Name=\"TextResults\" \n          HorizontalAlignment=\"Left\" \n          Margin=\"60,28,0,0\" \n          TextWrapping=\"Wrap\" \n          VerticalAlignment=\"Top\" \n          Height=\"139\" \n          Width=\"411\"/>\n\n        </Grid>\n    </Window>\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net.Http;\n    using System.Threading.Tasks;\n    using System.Windows;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    ```", "```cs\n    public async Task<int> GetWordCountAsync()\n    {\n      ResultsTextBlock.Text += \"Getting the word count for Origin of Species...\\n\";\n      var client = new HttpClient();            \n      try\n      {\n        var bookContents = await client.GetStringAsync(@\"http://www.gutenberg.org/files/2009/No_Book_Here.txt\");\n        var wordArray = bookContents.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n      }\n      catch (Exception ex)\n      {\n        ResultsTextBlock.Text += String.Format(\"An error has occurred: {0} \\n\", ex.Message);\n        return 0;\n      }\n      finally\n      {\n        client.Dispose();\n      }\n\n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {            \n      try\n      {\n        var result = await GetWordCountAsync();\n        ResultsTextBlock.Text += String.Format(\"Origin of Species word count: {0}\", \n            result);\n      }\n      catch(Exception ex)\n      {\n        ResultsTextBlock.Text += String.Format(\"An error has occurred: {0} \\n\", \n                ex.Message);\n      } \n    }\n    ```", "```cs\n    <Window x:Class=\"AsyncCancellation.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"AsyncCancellation\" Height=\"400\" Width=\"599\">\n        <Grid Width=\"600\" Height=\"400\">\n            <Button x:Name=\"StartButton\" \n            Content=\"Start\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"142,183,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"75\" \n            RenderTransformOrigin=\"-0.2,0.45\" \n            Click=\"StartButton_Click\"/>\n            <Button x:Name=\"CancelButton\" \n            Content=\"Cancel\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"379,185,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"75\" \n            Click=\"CancelButton_Click\"/>\n            <TextBlock x:Name=\"TextResult\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"27,24,0,0\" \n            TextWrapping=\"Wrap\" \n            VerticalAlignment=\"Top\" \n            Height=\"135\" \n            Width=\"540\"/>\n        </Grid>\n    </Window>\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net.Http;\n    using System.Threading.Tasks;\n    using System.Windows;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    ```", "```cs\n    public async Task<int> GetWordCountAsync(CancellationToken ct)\n    {\n      TextResult.Text += \"Getting the word count for Origin of Species...\\n\";            \n      var client = new HttpClient();\n      await Task.Delay(500);\n      try\n      {\n        HttpResponseMessage response = await client.GetAsync(@\"http://www.gutenberg.org/files/2009/2009.txt\", ct);\n        var words = await response.Content.ReadAsStringAsync();\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n      }\n      finally\n      {\n        client.Dispose();\n      }\n    }\n    ```", "```cs\n    private void CancelButton_Click(object sender, RoutedEventArgs e)\n    {\n      if (cts != null)\n      {\n        cts.Cancel();\n      }\n    }\n    ```", "```cs\n    public async Task<int> GetWordCountAsync(CancellationToken ct)\n    {\n      TextResult.Text += \"Getting the word count for Origin of Species...\\n\";            \n      var client = new HttpClient();\n      await Task.Delay(500);\n      try\n      {\n        HttpResponseMessage response = await client.GetAsync(@\"http://www.gutenberg.org/files/2009/2009.txt\", ct);\n        var words = await response.Content.ReadAsStringAsync();\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n      }\n      finally\n      {\n        client.Dispose();\n      }\n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n      cts = new CancellationTokenSource();            \n      ...\n    }\n    ```", "```cs\n    public async Task<int> GetWordCountAsync(CancellationToken ct)\n    {\n      ...\n      HttpResponseMessage response = await client.GetAsync(@\"http://www.gutenberg.org/files/2009/2009.txt\", ct);\n      ...\n    }\n    ```", "```cs\n    private void CancelButton_Click(object sender, RoutedEventArgs e)\n    {\n      if (cts != null)\n      {\n        cts.Cancel();\n      }\n    }\n    ```", "```cs\n    <Window x:Class=\"CancelAfterTimeout.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n        <Grid>\n            <Button x:Name=\"StartButton\" \n            Content=\"Start Download\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"194,264,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"125\" \n            RenderTransformOrigin=\"-0.2,0.45\" \n            Click=\"StartButton_Click\"/>\n            <TextBlock x:Name=\"TextResult\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"48,10,0,0\" TextWrapping=\"Wrap\" \n            VerticalAlignment=\"Top\" \n            Height=\"213\" \n            Width=\"420\"/>\n            <Label Content=\"Timeout (in ms):\" \n             HorizontalAlignment=\"Left\" \n             Margin=\"163,227,0,0\" \n             VerticalAlignment=\"Top\"/>\n            <TextBox x:Name=\"TextTimeout\" \n            HorizontalAlignment=\"Left\" \n            Height=\"23\" \n            Margin=\"277,231,0,0\" \n            TextWrapping=\"Wrap\" \n            VerticalAlignment=\"Top\" \n            Width=\"50\"/>\n        </Grid>\n    </Window>\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net.Http;\n    using System.Threading.Tasks;\n    using System.Windows;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    ```", "```cs\n    public async Task<int> GetWordCountAsync(CancellationToken ct)\n    {\n      TextResult.Text += \"Getting the word count for Origin of Species...\\n\";            \n      var client = new HttpClient();\n      await Task.Delay(500);\n      try\n      {\n        HttpResponseMessage response = await client.GetAsync(@\"http://www.gutenberg.org/files/2009/2009.txt\", ct);\n        var words = await response.Content.ReadAsStringAsync();\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n      }\n      finally\n      {\n        client.Dispose();\n      }\n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n      StartButton.IsEnabled = false;\n      try\n      {\n        tokenSource = new CancellationTokenSource();\n        var timeoutPeriod = int.Parse(TextTimeout.Text);\n        tokenSource.CancelAfter(timeoutPeriod);                \n        await GetWordCount(tokenSource.Token);                                \n      }\n      catch (OperationCanceledException)\n      {\n        TextResult.Text += \"The operation was cancelled. \\n\";\n      }\n      catch (Exception)\n      {\n        TextResult.Text += \"The operation failed to complete due to an exception. \\n\";\n      }\n      finally\n      {\n        StartButton.IsEnabled = true;\n      }\n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n      StartButton.IsEnabled = false;\n      try\n      {\n        tokenSource = new CancellationTokenSource();\n        var timeoutPeriod = int.Parse(TextTimeout.Text);\n        tokenSource.CancelAfter(timeoutPeriod);                \n        ...                                \n      }\n      ...\n    }\n    ```", "```cs\n    public async Task<int> GetWordCountAsync(CancellationToken ct)\n    {\n      ...\n      HttpResponseMessage response = await client.GetAsync(@\"http://www.gutenberg.org/files/2009/2009.txt\", ct);\n      ...\n    }\n    ```", "```cs\n    private void CancelButton_Click(object sender, RoutedEventArgs e)\n    {\n      if (cts != null)\n      {\n        cts.Cancel();\n      }\n    }\n    ```", "```cs\n    <Window x:Class=\"AsyncMultipleRequest.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n        <Grid>\n            <Button x:Name=\"StartButton\" \n            Content=\"Start Download\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"194,264,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"125\" \n            RenderTransformOrigin=\"-0.2,0.45\" \n            Click=\"StartButton_Click\"/>\n            <TextBlock x:Name=\"TextResult\" \n               HorizontalAlignment=\"Left\" \n               Margin=\"48,10,0,0\" \n               TextWrapping=\"Wrap\" \n               VerticalAlignment=\"Top\" \n               Height=\"213\" Width=\"420\"/>\n        </Grid>\n    </Window>\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Windows;\n    using System.Windows.Documents;\n    using System.Net.Http;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    ```", "```cs\n    private List<KeyValuePair<string, string>> GetBookUrls()\n    {\n      var urlList = new List<KeyValuePair<string, string>>\n      {\n        new KeyValuePair<string,string>(\"Origin of Species\",\n              \"http://www.gutenberg.org/files/2009/2009.txt\"),\n        new KeyValuePair<string,string>(\"Beowulf\",\n              \"http://www.gutenberg.org/files/16328/16328-8.txt\"),\n        new KeyValuePair<string,string>(\"Ulysses\",\n              \"http://www.gutenberg.org/files/4300/4300.txt\")\n      };\n      return urlList;\n    }\n    ```", "```cs\n    async Task<KeyValuePair<string,int>> ProcessBook(KeyValuePair<string,string> book, HttpClient client)\n    {\n      var bookContents = await client.GetStringAsync(book.Value);\n      var wordArray = bookContents.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n      return new KeyValuePair<string,int>(book.Key,wordArray.Count());\n    }\n    ```", "```cs\n    public async Task GetMultipleWordCount()\n    {\n      var client = new HttpClient();\n      var results = new List<KeyValuePair<string, int>>();\n      var urlList = GetBookUrls();\n      IEnumerable<Task<KeyValuePair<string,int>>> bookQuery =\n        from book in urlList select ProcessBook(book, client);\n      List<Task<KeyValuePair<string,int>>> bookTasks = bookQuery.ToList();\n      while (bookTasks.Count > 0)\n      {\n        Task<KeyValuePair<string, int>> firstFinished = await Task.WhenAny(bookTasks);\n        bookTasks.Remove(firstFinished);\n        var thisBook = await firstFinished;\n        TextResult.Text += String.Format(\"Finished downloading {0}. Word count: {1}\\n\", \n          thisBook.Key, \n          thisBook.Value);\n      }\n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n      TextResult.Text += \"Started downloading books...\\n\";\n      await GetMultipleWordCount();\n      TextResult.Text += \"Finished downloading books...\\n\";\n    }\n    ```", "```cs\nvar bookQuery = from book in urlList select ProcessBook(book, client);\nvar bookTasks = bookQuery.ToList();\n```", "```cs\nvar firstFinished = await Task.WhenAny(bookTasks);\nbookTasks.Remove(firstFinished);\nvar thisBook = await firstFinished;\n\n// The compiler will create a continuation at this point that will run\n//  when the task referenced by the firstFinished variable completes.\nTextResult.Text += String.Format(\"Finished downloading {0}. Word count: {1}\\n\", \n  thisBook.Key, \n  thisBook.Value);\n```", "```cs\n    <Window x:Class=\"AsyncMultipleRequest.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n        <Grid>\n            <Button x:Name=\"StartButton\" \n            Content=\"Start Download\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"194,264,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"125\" \n            RenderTransformOrigin=\"-0.2,0.45\" \n            Click=\"StartButton_Click\"/>\n            <TextBlock x:Name=\"TextResult\" \n               HorizontalAlignment=\"Left\" \n               Margin=\"48,10,0,0\" \n               TextWrapping=\"Wrap\" \n               VerticalAlignment=\"Top\" \n               Height=\"213\" Width=\"420\"/>\n        </Grid>\n    </Window>\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Windows;\n    using System.Windows.Documents;\n    using System.Net.Http;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    ```", "```cs\n    private List<KeyValuePair<string, string>> GetBookUrls()\n    {\n      var urlList = new List<KeyValuePair<string, string>>\n      {\n        new KeyValuePair<string,string>(\"Origin of Species\",\n              \"http://www.gutenberg.org/files/2009/2009.txt\"),\n        new KeyValuePair<string,string>(\"Beowulf\",\n              \"http://www.gutenberg.org/files/16328/16328-8.txt\"),\n        new KeyValuePair<string,string>(\"Ulysses\",\n              \"http://www.gutenberg.org/files/4300/4300.txt\")\n      };\n      return urlList;\n    }\n    ```", "```cs\n    async Task<KeyValuePair<string,int>> ProcessBook(KeyValuePair<string,string> book, HttpClient client)\n    {\n      var bookContents = await client.GetStringAsync(book.Value);\n      var wordArray = bookContents.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n      return new KeyValuePair<string,int>(book.Key,wordArray.Count());\n    }\n    ```", "```cs\n    public async Task GetWordCount()\n    {            \n      var urlList = GetBookUrls();\n      var wordCountQuery = from book in urlList select ProcessBook(book);\n      Task<KeyValuePair<string,int>>[] wordCountTasks = wordCountQuery.ToArray();\n      KeyValuePair<string, int>[] wordCounts = await Task.WhenAll(wordCountTasks);\n      foreach (var book in wordCounts)\n      {\n        TextResult.Text += String.Format(\"Finished processing {0} : Word count {1} \\n\", \n          book.Key, book.Value);\n      }\n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n\n      TextResult.Text = \"Started downloading books...\\n\";\n      Task countTask = GetWordCount();\n      await countTask;            \n    }\n    ```", "```cs\nvar urlList = GetBookUrls();\nvar wordCountQuery = from book in urlList select ProcessBook(book);\nvar wordCountTasks = wordCountQuery.ToArray();\n```", "```cs\nvar wordCounts = await Task.WhenAll(wordCountTasks);\nforeach (var book in wordCounts)\n{\n  TextResult.Text += String.Format(\"Finished processing {0} : Word count {1} \\n\", book.Key, book.Value);\n}\n```", "```cs\n    <Window x:Class=\"AsyncFileAccess.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n        <Grid>\n            <Label Content=\"Text to Write\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"49,24,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"87\"/>\n            <Button x:Name=\"WriteButton\" \n            Content=\"Write to File\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"212,139,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"75\" \n            Click=\"WriteButton_Click\"/>\n            <TextBox x:Name=\"TextWrite\" \n            HorizontalAlignment=\"Left\" \n            Height=\"66\" Margin=\"54,55,0,0\" \n            TextWrapping=\"Wrap\" \n            VerticalAlignment=\"Top\" Width=\"420\"/>\n            <TextBox x:Name=\"TextRead\" \n            HorizontalAlignment=\"Left\" \n            Height=\"66\" \n            Margin=\"54,200,0,0\" \n            TextWrapping=\"Wrap\" \n            VerticalAlignment=\"Top\" \n            Width=\"420\"/>\n            <Label Content=\"Text from File\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"51,167,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"87\"/>\n            <Button x:Name=\"ReadButton\" \n            Content=\"Read from File\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"205,277,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"94\" \n            Click=\"ReadButton_Click\"/>\n        </Grid>\n    </Window>.\n    ```", "```cs\n    using System;\n    using System.IO;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Windows;\n    ```", "```cs\n    string path = @\"C:\\temp\\temp.txt\";\n    ```", "```cs\n    private async Task WriteToFileAsync(string path, string content)\n    {\n      byte[] encodedContent = Encoding.Unicode.GetBytes(content);\n      using(FileStream stream = new FileStream(path,FileMode.Append,\n           FileAccess.Write,\n           FileShare.None,\n           bufferSize: 4096,\n           useAsync:true))\n           {\n             await stream.WriteAsync(encodedContent,\n                        0,\n                        encodedContent.Length);\n           };\n    }\n    ```", "```cs\n    private async void WriteButton_Click(object sender, RoutedEventArgs e)\n    {\n      WriteButton.IsEnabled = false;\n      string content = TextWrite.Text;\n      await WriteToFileAsync(path, content);\n      WriteButton.IsEnabled = true;\n    }\n    ```", "```cs\n    private async Task<string> ReadFromFileAsync(string path)\n    {\n      using (FileStream stream = new FileStream(path, \n                      FileMode.Open,\n                      FileAccess.Read, \n                      FileShare.Read, \n                      bufferSize: 4096, \n                      useAsync: true))\n      {\n        var sb = new StringBuilder();\n        byte[] buffer = new byte[0x1000];\n        int bytesRead;\n        while((bytesRead = await stream.ReadAsync(buffer, \n                          \t  0, \n                          \t  buffer.Length))!=0)\n        {\n          string content = Encoding.Unicode.GetString(buffer,\n                                0,\n                                bytesRead);\n          sb.Append(content);\n        }\n        return sb.ToString();\n      }\n    }\n    ```", "```cs\n    private async void ReadButton_Click(object sender, RoutedEventArgs e)\n    {\n      if (File.Exists(path) == false)\n      {\n        TextRead.Text = \"There was an error reading the file.\";\n      }\n      else\n      {\n        try\n        {\n          string content = await ReadFromFileAsync(path);\n          TextRead.Text = content;\n        }\n        catch(Exception ex)\n        {\n          TextRead.Text = ex.Message;\n        }                \n      }\n    }\n    ```", "```cs\nprivate async void WriteButton_Click(object sender, RoutedEventArgs e)\n{\n  WriteButton.IsEnabled = false;\n  string content = TextWrite.Text;\n  await WriteToFileAsync(path, content);\n  WriteButton.IsEnabled = true;\n}\n```", "```cs\nbyte[] encodedContent = Encoding.Unicode.GetBytes(content);\nusing(FileStream stream = new FileStream(path,FileMode.Append,\n     FileAccess.Write,FileShare.None,bufferSize: 4096,useAsync:true))\n     {\n       await stream.WriteAsync(encodedContent,0,encodedContent.Length);\n     };\n```", "```cs\nvar sb = new StringBuilder();\nbyte[] buffer = new byte[0x1000];\nint bytesRead;\nwhile((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length))!=0)\n{\n  string content = Encoding.Unicode.GetString(buffer,0,bytesRead);\n  sb.Append(content);\n}\nreturn sb.ToString();\n```", "```cs\n    <Window x:Class=\"AsyncProgress.MainWindow\"\n            xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n            Title=\"AsyncProgress\" Height=\"400\" Width=\"525\" ResizeMode=\"NoResize\">\n        <Grid>\n            <Button x:Name=\"StartButton\" \n            Content=\"Start Download\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"194,288,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"125\" \n            RenderTransformOrigin=\"-0.2,0.45\" \n            Click=\"StartButton_Click\"/>\n            <TextBlock x:Name=\"TextResult\" \n            HorizontalAlignment=\"Left\" \n            Margin=\"48,10,0,0\" \n            TextWrapping=\"Wrap\" \n            VerticalAlignment=\"Top\" \n            Height=\"213\" \n            Width=\"420\"/>\n            <ProgressBar x:Name=\"DownloadProgress\" \n            HorizontalAlignment=\"Left\" \n            Height=\"20\" \n            Margin=\"48,249,0,0\" \n            VerticalAlignment=\"Top\" \n            Width=\"420\"/>\n        </Grid>\n    </Window>\n    ```", "```cs\n    using System;\n    using System.ComponentModel;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    using System.Windows;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    ```", "```cs\n    void client_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)\n    {\n      TextResult.Text += \" Download completed. \\n\";\n    }\n    ```", "```cs\n    void client_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)\n    {\n      double bytesIn = double.Parse(e.BytesReceived.ToString());\n      double totalBytes = double.Parse(e.TotalBytesToReceive.ToString());\n      double percentage = bytesIn / totalBytes * 100;\n      DownloadProgress.Value = int.Parse(Math.Truncate(percentage).ToString());\n    }\n    ```", "```cs\n    public async Task<int> GetWordCount()\n    {\n      TextResult.Text += \" Getting the word count for Origin of Species...\\n\";\n      var client = new WebClient();\n      client.Headers.Add(\"user-agent\", headerText);\n      client.DownloadProgressChanged += new \n          DownloadProgressChangedEventHandler(client_DownloadProgressChanged);\n      client.DownloadFileCompleted += \n          new AsyncCompletedEventHandler(client_DownloadFileCompleted);\n      Task<string> wordsTask = \n        client.DownloadStringTaskAsync(new Uri(\"http://www.gutenberg.org/files/2009/2009.txt\"));\n      var words = await wordsTask;\n      var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n      return wordArray.Count();\n    }\n    ```", "```cs\n    private async void StartButton_Click(object sender, RoutedEventArgs e)\n    {\n      TextResult.Text += \"Started downloading Origin of Species...\\n\";\n      Task<int> countTask = GetWordCountAsync();\n      int result = await countTask;\n      TextResult.Text += String.Format(\"Finished downloading. Word count: {0}\\n\", result);\n    }\n    ```", "```cs\npublic async Task<int> GetWordCountAsync()\n{\n  ...\n  client.DownloadProgressChanged += \n      new DownloadProgressChangedEventHandler(client_DownloadProgressChanged);\n  client.DownloadFileCompleted += \n      new AsyncCompletedEventHandler(client_DownloadFileCompleted);\n  Task<string> wordsTask = \n      client.DownloadStringTaskAsync(new Uri(\"http://www.gutenberg.org/files/2009/2009.txt\"));\n  ...\n}\n```", "```cs\nvoid client_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)\n{\n  double bytesIn = double.Parse(e.BytesReceived.ToString());\n  double totalBytes = double.Parse(e.TotalBytesToReceive.ToString());\n  double percentage = bytesIn / totalBytes * 100;\n  DownloadProgress.Value = int.Parse(Math.Truncate(percentage).ToString());\n}\n```"]