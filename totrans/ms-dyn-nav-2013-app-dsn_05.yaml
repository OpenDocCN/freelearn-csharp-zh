- en: Chapter 5. Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapters introduced the key concepts of Microsoft Dynamics NAV
    as well as the details of the financial application and CRM. These horizontal
    modules can be implemented in most industries without big structural changes.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss three ways of implementing production in Microsoft
    Dynamics NAV using the standard functionality and customized features.
  prefs: []
  type: TYPE_NORMAL
- en: We'll discuss item tracking and item costing and what procedures and objects
    are used to get this working correctly in the application. For manufacturing,
    we will discuss the general concepts and data model rather than going into the
    details of each and every functional possibility.
  prefs: []
  type: TYPE_NORMAL
- en: We will also discuss kitting, which is only available in a limited number of
    countries such as North America, France, and Australia, but will most likely be
    moved to the worldwide version in future versions.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the chapter, we will look at the five different vertical industries
    and highlight two specific features of these industries that are not implemented
    in the standard product and discuss how the problems could be solved.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you will have a better understanding about the concepts
    of production in Microsoft Dynamics NAV, how this fits together with the rest
    of the application, and how to think out of the box if it does not immediately
    fit your process.
  prefs: []
  type: TYPE_NORMAL
- en: What is production?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Production is the process of creating a new product using raw materials or prefabricated
    items and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Production as we know it today started centuries before the industrial revolution
    with craftsmen and assistants creating products using raw materials produced by
    nature and farmers. Today, this method of production still exists for many luxury
    items such as custom-made furniture or clothes.
  prefs: []
  type: TYPE_NORMAL
- en: The industrial revolution changed production into manufacturing, with the introduction
    of machines and mass production. This allowed production to grow by being less
    dependent on craftsmen and manual labor.
  prefs: []
  type: TYPE_NORMAL
- en: '![What is production?](img/0365EN_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The introduction of computers in manufacturing companies allows the production
    of more sophisticated items and has made manufacturing more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: To implement Microsoft Dynamics NAV for production companies, it is crucial
    to understand which level of production is being used in your company.
  prefs: []
  type: TYPE_NORMAL
- en: Production methodologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, we will differentiate between the following three production
    methodologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assembling production**: When production is combining items into one new
    item without changing the items or scrap, we will refer to it as assembling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manufactured production**: This is the most complex production method to
    be implemented in Microsoft Dynamics NAV. Raw materials are combined into one
    or more products leaving scrap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specialized production**: These are often one off items or items produced
    in small numbers. The system should support the basics of the production process
    but should still be flexible enough to fit the company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raw materials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each product we consume starts out as raw materials, such as cotton, iron ore,
    logs, and oil, which are then processed to be used in a production process. Other
    raw materials are water and air or fruits and vegetables. All raw materials are
    produced by mother nature. The production of some raw materials such as logs,
    cotton, fruits, and vegetables, can be influenced by humans. Other raw materials
    are more limited such as iron ore, oil, and water.
  prefs: []
  type: TYPE_NORMAL
- en: Basic production principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going into Microsoft Dynamics NAV, we will discuss some terminology that
    is important to understand the concepts of production in ERP.
  prefs: []
  type: TYPE_NORMAL
- en: Bill of materials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The bill of materials defines what components are used to assemble or manufacture
    one item. The components in the bill of materials are also items, so before creating
    a new bill of materials, all component items must be created in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, there are two separate bill of material definitions,
    one for assembling and the other for manufacturing.
  prefs: []
  type: TYPE_NORMAL
- en: Material requirements planning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Material requirements planning** (**MRP**) was introduced in the 1960s as
    a calculation method for production scheduling and was quickly replaced by **Manufacturing
    Resource Planning** (**MRP II**).'
  prefs: []
  type: TYPE_NORMAL
- en: While ERP replaces MRP, MRP is still a crucial part of ERP applications.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV has a built-in MRP algorithm but also allows developers
    to create their own algorithms using the built-in data model. MRP analyzes dependent
    demand, which is demand that comes from production orders for components.
  prefs: []
  type: TYPE_NORMAL
- en: Garbage In Garbage Out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The biggest risk in running MRP algorithms is the **Garbage In Garbage Out**
    (**GIGO**) principle. To plan well, the data in the system must be absolutely
    correct or the planning will contain errors.
  prefs: []
  type: TYPE_NORMAL
- en: If, for example, the shipment dates in the sales orders are not entered correctly,
    the planning algorithm has no chance of giving correct results. The garbage in
    (wrong dates) will result in garbage out (wrong planning).
  prefs: []
  type: TYPE_NORMAL
- en: Master Production Schedule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Master Production Schedule** (**MPS**) is the term used for production planning
    and scheduling. An MPS is used for decision making, linking supply and demand.
    It analyzes independent demand, that is, demand that comes from sales orders,
    service orders, and the production forecast.'
  prefs: []
  type: TYPE_NORMAL
- en: Item costing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For manufacturing companies, it is crucial to be able to calculate real item
    costing and profitability. The cost of an item consists of the costs of all the
    components it was created from, as well as the production time and cost of any
    machinery used.
  prefs: []
  type: TYPE_NORMAL
- en: In production companies, high costs are incurred before an item can be even
    manufactured and sold. Machines need to be purchased and installed and new manufacturing
    plants may need to be built.
  prefs: []
  type: TYPE_NORMAL
- en: Item tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Item tracking is a relatively new concept that was introduced due to the need
    to be able to trace back an item to its original production batch in the supply
    chain. Whenever something is wrong with a specific item, it is interesting to
    see whether other items that were produced in the same batch have the same issue
    and maybe even require a recall of all items.
  prefs: []
  type: TYPE_NORMAL
- en: Quality control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the production process and especially at the end, quality control is
    a crucial stage. Items can be rejected completely or may require extra handling.
  prefs: []
  type: TYPE_NORMAL
- en: In quality control, items are checked for mistakes. The way this is done depends
    on the production process. In the automobile industry, all cars are checked individually,
    while in the chemical industry, parts of batches are taken out and checked, assuming
    that the rest of the batch has the same quality.
  prefs: []
  type: TYPE_NORMAL
- en: Quality control is always at the end of the production process but can also
    be in between each of the main production processes. Sometimes, the item that
    is manufactured depends on the result of quality control. In this case, each level
    of quality is represented by a special item number.
  prefs: []
  type: TYPE_NORMAL
- en: Energy and waste
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When manufacturing an item, the obvious components are the items in the bill
    of materials. It is becoming exceedingly crucial to use less energy and leave
    less waste materials in this process as our environment is becoming more and more
    vulnerable. As recycling is becoming increasingly important, these components
    have a bigger pressure on production cost and planning.
  prefs: []
  type: TYPE_NORMAL
- en: Association for Operations Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about production, it is interesting to study the materials provided
    by the **Association for Operations Management** (**APICS**). APICS is the organization
    that is recognized worldwide as the leading authority on manufacturing standards,
    similar to how the W3C is considered the authority on XML standards.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about APICS can be found at [http://www.apics.org/](http://www.apics.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s walk through two scripts to generate a new item with a bill of materials:
    one for an assembling process and the other for manufacturing.'
  prefs: []
  type: TYPE_NORMAL
- en: We will set up both, item costing and item tracking for these products.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The examples are created using a CRONUS W1 Microsoft Dynamics NAV 2013 Release
    2 database without changes.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our company, we want to start producing office chairs. These chairs consist
    of five wheels, a pedestal, a seat, and two arm rests. We will create these four
    components as a new item and one new item for the end product.
  prefs: []
  type: TYPE_NORMAL
- en: All the items will have a different costing method to demonstrate the effect
    of cost changes. The end product will support serial number item tracking with
    a one year warranty period.
  prefs: []
  type: TYPE_NORMAL
- en: Design patterns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before going into the application, we will have a look at how this process
    is solved in Microsoft Dynamics NAV. The following diagram illustrates the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design patterns](img/0365EN_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It starts with creating the components and end products as items in the database
    and connecting them using the **BOM Component** table. A **BOM Component** can
    also contain **Resources**.
  prefs: []
  type: TYPE_NORMAL
- en: If the components are in stock, we can use the assembly documents to create
    the products. When posting the assembly document, the components are consumed
    and the product is created. During this process, the system will create **Resource
    Ledger Entries**, **Item Ledger Entries**, and **Value Entries**.
  prefs: []
  type: TYPE_NORMAL
- en: The **Value Entries** can be posted in the general ledger using the **Inventory
    Posting to G/L** routine, either manual or in real time. This completes the process.
  prefs: []
  type: TYPE_NORMAL
- en: The items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this example, we will need to create five items, four components, and one
    end product. We will assign an estimated unit cost to the components and a unit
    price to the end product, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | Description | Base UOM | Unit cost | Unit price | Costing |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C1 | Chapter 5 &#124; Wheel | PCS | 5 |   | FIFO |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C2 | Chapter 5 &#124; Pedestal | PCS | 60 |   | LIFO |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C3 | Chapter 5 &#124; Seat | PCS | 120 |   | Average |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C4 | Chapter 5 &#124; Arm Rest | PCS | 35 |   | Standard |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-P1 | Chapter 5 &#124; Office Chair | PCS |   | 500 | Specific |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a real implementation, we would never set up a bill of materials with so
    many different costing methods for each item. This is strictly for the purpose
    of explaining what each costing method does and that Microsoft Dynamics NAV is
    technically capable of dealing with this.
  prefs: []
  type: TYPE_NORMAL
- en: Item costing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Item costing determines the calculation method of the item costs. We will assign
    a different costing method to each Item. Let''s briefly discuss the available
    costing methods in Microsoft Dynamics NAV:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIFO**: First in First out. The cost of the oldest item ledger entry is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LIFO**: Last in First out. The cost of the newest item ledger entry is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When using FIFO or LIFO, the cost is applied within **Lot No.** if item tracking
    is used with Lot numbering. That is, the cost associated with the specific **Lot
    No.** is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Average**: Each time we purchase items, the total costs are divided by the
    total quantity. The result is used as unit cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard**: The user will define the unit cost manually. All deviations in
    purchase pricing are posted as profit or loss when invoicing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specific**: This is always combined with item tracking and serial numbers.
    Each serial number uses its own unique unit cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The costing methods are not related to the warehouse picking method but only
    apply to financial costing calculations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Item tracking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All our chairs will get a serial number with a one year warranty period. This
    enables us to track all individual chairs when they come back to the factory with
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: '![Item tracking](img/0365EN_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Item tracking in Microsoft Dynamics NAV can be done both on individual Serial
    numbers and Lot numbers for a group of items.
  prefs: []
  type: TYPE_NORMAL
- en: '**Serial Numbers** and **Lot Numbers** are fields in the Item Ledger Entry
    table (32). The consequence of this will be that for each serial number or Lot
    number, an individual record will be created in the table. When using serial numbers,
    this can lead to a massive increase in the table size.'
  prefs: []
  type: TYPE_NORMAL
- en: The Lot numbers and item numbers are saved in the Reservation Entry table (337)
    during the document entry process. A reservation entry can be assigned to any
    table in Microsoft Dynamics NAV, for example, sales lines, item journal lines,
    or production order.
  prefs: []
  type: TYPE_NORMAL
- en: When a document is posted and the item ledger entry is created, the reservation
    entry is removed and replaced by a tracking specification record that has the
    same value in the **Entry No.** field as the corresponding item ledger entry.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A reservation entry used for item tracking should not be confused with normal
    reservation entries in the sales and purchase process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of item tracking in Microsoft Dynamics NAV works as drawn in the
    following schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Item tracking](img/0365EN_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Technically, item tracking in Microsoft Dynamics NAV is very complex and should
    only be changed by experienced developers after careful analysis.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss the reservation process in more detail in [Chapter 6](ch06.html
    "Chapter 6. Trade"), *Trade*.
  prefs: []
  type: TYPE_NORMAL
- en: The bill of materials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the items are created, the costing method is defined and item tracking
    is set up. The next step is to create the bill of materials for the office chair.
    This can be done using the **Bill of Materials** option in the **Assembly List**
    in the **Item List** or **Card** page.
  prefs: []
  type: TYPE_NORMAL
- en: The bill of materials defines the component items and resources that will be
    used to create one new end product.
  prefs: []
  type: TYPE_NORMAL
- en: '![The bill of materials](img/0365EN_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We set up the components as discussed earlier using five wheels, one pedestal,
    and seat and two arm rests.
  prefs: []
  type: TYPE_NORMAL
- en: '![The bill of materials](img/0365EN_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Calculating the standard cost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The components we selected for the bill of materials have a unit cost. Together
    these items can determine the unit cost of our end product.
  prefs: []
  type: TYPE_NORMAL
- en: We can calculate the standard cost of the office chair by selecting **Calc.
    Standard Cost** in the same **Assembly** menu we used for the bill of materials.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name **Calc. Standard Cost** in the calculation option is not to be confused
    with the costing method. This function should be executed for all costing methods.
  prefs: []
  type: TYPE_NORMAL
- en: '![Calculating the standard cost](img/0365EN_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The standard cost is now calculated using the unit cost of the components and
    the overhead rate and indirect cost percent. We will not use the latter in our
    example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the inventory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can assemble the chairs, we need to purchase the components. For this,
    we will create a purchase order with eight purchase lines. We will purchase the
    components for other prices than the unit cost in the system, allowing us to show
    what the impact of the costing methods is.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the inventory](img/0365EN_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The purchase order will be received and invoiced.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the purchase order is only received and not invoiced, the example might not
    work because expected cost posting to G/L is not activated in the CRONUS database.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting cost item entries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The purchase order we just created, received, and invoiced has a different unit
    cost compared to the unit cost we initially set up in our items.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the costing method of the items, this will have an impact on the
    unit cost. When we take a look at the new unit cost of the items we created, we
    can see that this was impacted by the purchase order. However, the values are
    not correct. The system only adopts the first change of unit cost.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting cost item entries](img/0365EN_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To correct this, we need to run the Adjust Cost Item Entries (Report 795) batch.
    This will determine the new unit cost based on the costing method.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting cost item entries](img/0365EN_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The unit cost for FIFO, LIFO, and average have been recalculated while the standard
    cost has not been impacted by the transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Adjust Cost Item Entries** report should be scheduled to run periodically
    in your database. Even if the database is set to use Expected Cost Posting and
    Auto Cost Posting.
  prefs: []
  type: TYPE_NORMAL
- en: Posting inventory cost to G/L
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV supports posting the inventory cost to the general ledger.
    This enables accountants to have a single point for data analysis rather than
    printing an inventory report and using the figures manually for reports to the
    management.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done using the **Post Inventory Cost to G/L** function (report
    1002), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting inventory cost to G/L](img/0365EN_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Check, check, and double check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To check whether the value entries and the general ledger are synchronized,
    we can run Inventory Valuation (Report 1001). This will show us the inventory
    value versus the amount posted to the general ledger.
  prefs: []
  type: TYPE_NORMAL
- en: '![Check, check, and double check](img/0365EN_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Recalculating the standard unit cost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The standard unit cost we calculated for our office chair was 275\. This was
    based on our assumption of purchase prices. Now that we have really purchased
    and received the components, we can calculate a new unit cost based on the real
    prices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the price will still be `275` since the total price of all
    purchased items is `550`. The inventory allows us to make two chairs with these
    materials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With this calculation method, it is possible to check the results of the Calculate
    Unit Cost algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Assembly orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the components in stock and the unit cost correct, we can create
    a chair. We will do this using an assembly order.
  prefs: []
  type: TYPE_NORMAL
- en: In the assembly order, we need to create one line for each item we want to assemble.
    The components are automatically used when posting the order. We will use the
    Purchasing Agent Role Center (9007) for this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Assembly orders](img/0365EN_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assembly orders
  prefs: []
  type: TYPE_NORMAL
- en: After creating a document for the office chair, while trying to post the document,
    we will receive an error message because we first need to specify the serial numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Assembly orders](img/0365EN_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Specifying Serial Number
  prefs: []
  type: TYPE_NORMAL
- en: Serial numbers and Lot numbers can be set up using the **Item Tracking Lines**
    option. This opens the **Item Tracking Line** page (6510). This page is able to
    show both the reservation entries during the registration process as well as the
    tracking specification if the item ledger entry is already created.
  prefs: []
  type: TYPE_NORMAL
- en: We will manually create a new serial number. Microsoft Dynamics NAV also supports
    system generated serial numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Assembly orders](img/0365EN_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now post this assembly order and will have one office chair in stock
    with a serial number.
  prefs: []
  type: TYPE_NORMAL
- en: Check costing (again)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating the office chair changed the inventory of the component items and therefore
    might have affected the costing of our items. However, when we now check our items,
    the unit cost has not changed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Check costing (again)](img/0365EN_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even so, with the current inventory, the unit cost might be different. Remember
    we used 5 wheels using FIFO costing 4 and one seat using LIFO costing 70.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run **Adjust Cost Entries** using the **Posting to G/L** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Check costing (again)](img/0365EN_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The unit cost has changed and now shows us that we have used the first five
    wheels using FIFO, leaving the other five wheels in the inventory for a value
    of **5**. We used the last seat using LIFO, leaving the first seat in the inventory
    for a value of **70**.
  prefs: []
  type: TYPE_NORMAL
- en: When we run the **Inventory Valuation**, we can see that producing the first
    chair actually costs **267,50** but we posted **275**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Check costing (again)](img/0365EN_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Recalculating the unit cost (again)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we run **Calculate Unit Cost** for our office chair, we can see that the
    new cost will be `282,50`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Together with the first chair worth `267,50`, we match our purchase invoice
    worth 550.
  prefs: []
  type: TYPE_NORMAL
- en: Standard cost worksheet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to correct the cost of the first chair, which is currently on inventory
    to have a correct inventory value. We can do this using the **Standard Cost Worksheets**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard cost worksheet](img/0365EN_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This worksheet allows us to correct old value entries by creating an entry in
    the Item Revaluation Journal when we select the **Implement Standard Cost Change**
    option. This will create a new value entry with the delta values to keep track
    of changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard cost worksheet](img/0365EN_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Item Revaluation Journal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last step is to post the **Item Revaluation Journal** and run the **Post
    Inventory Cost to G/L** routine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Item Revaluation Journal](img/0365EN_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We also need to run the **Calculate Standard Cost** for the office chair since
    this batch will reset the unit cost to **267,50**.
  prefs: []
  type: TYPE_NORMAL
- en: The result
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we now run the **Inventory Valuation Report**, we can see that the **Office
    Chair** on stock is worth **267,50** and the remaining inventory is **282,50**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The result](img/0365EN_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summarizing item costing in 10 steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the steps we performed in the example can be summarized in this 10 step
    process diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Summarizing item costing in 10 steps](img/0365EN_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at the steps briefly:'
  prefs: []
  type: TYPE_NORMAL
- en: We start by creating new items and setting up the costing method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we create the bill of materials for the production item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **Calculate Standard Cost** routine to get a unit cost for the production
    item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Purchase the necessary items for production.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **Adjust Cost Item Entries** routine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Synchronize the value entries with the G/L Entries using the **Post Inventory
    Cost to G/L** routine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recalculate the standard cost if desired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an assembly order and post the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run **Standard Cost Worksheet** to change the standard cost.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **Item Revaluation Journal** to implement the standard cost for old
    value entries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manufacturing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The assembly management module was added to the Microsoft Dynamics NAV product
    in Version 2013 and replaced the BOM Journal that existed since the introduction
    of the Windows version in 1995\. Both enable us to create a new item out of other
    items.
  prefs: []
  type: TYPE_NORMAL
- en: In Version 2.01, Navision introduced the first version of Navision manufacturing.
    This was a separate product from Navision financials and only available for certified
    partners because of its complexity.
  prefs: []
  type: TYPE_NORMAL
- en: With Version 3.00, manufacturing became part of the standard Navision attain
    package and available for all partners. Manufacturing offers Microsoft Dynamics
    NAV users much more functionality than just creating an item from a bill of materials.
    Production orders can be scheduled using work centers, machine centers, tools,
    and a capacity calendar.
  prefs: []
  type: TYPE_NORMAL
- en: The items can be scheduled for production using either a Make-To-Stock or a
    Make-To-Order policy in a planning run.
  prefs: []
  type: TYPE_NORMAL
- en: 'The system calculates the required BOM components and can create purchase orders
    if the inventory is insufficient using a complex demand and supply process. If
    we put this into a design pattern, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manufacturing](img/0365EN_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Production Order** is the center of the process, which is created by items
    having a **Production BOM** that are either on sales order or low on inventory.
  prefs: []
  type: TYPE_NORMAL
- en: The **Planning Run** populates the **Planning Worksheet**, which is based on
    the **Requisition Line** table (246). The planning worksheet can be used to create
    the production orders and purchase orders.
  prefs: []
  type: TYPE_NORMAL
- en: During the production process, the **Consumption Journal** is used to record
    the use of the child items from **Production BOM** and the **Output Journal**
    creates the new item once it is finished. Alternatively, these steps can be combined
    in the **Production Journal**.
  prefs: []
  type: TYPE_NORMAL
- en: Let's demonstrate this with the next example using the **Production Planner**
    role center (9010).
  prefs: []
  type: TYPE_NORMAL
- en: We will create mahogany English desks using raw materials, machines, and resources.
  prefs: []
  type: TYPE_NORMAL
- en: The items, machines, and work centers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the desks, we need mahogany wood, green leather, glue, lacquer, and handles.
    To create one desk, the carpenter needs four days and one carpentry unit with
    tools. The painter needs one day to varnish the desk in the paint booth and the
    assembly department wraps up the components in boxes and needs four hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the following items for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | Description | Base UOM | Replenishment System | Unit Cost | Unit Price
    | Manufacturing Policy |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-P1 | Mahogany English Desk | PCS | Prod. Order | 286,25 | 999 |
    Make-to-Order |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C1 | Mahogany Log | PCS | Purchase | 100 |   | - |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C2 | Green Leather | PCS | Purchase | 60 |   | - |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C3 | Glue | CAN | Purchase | 15 |   | - |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C4 | Mahogany Lacquer | CAN | Purchase | 25 |   | - |'
  prefs: []
  type: TYPE_TB
- en: '| CHAPTER5-C5 | English Desk Handles | PCS | Purchase | 10 |   | - |'
  prefs: []
  type: TYPE_TB
- en: 'The following list is for machine centers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| No. | Name | Work Center No. | Capacity | Efficiency |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 01-CARP | Std. Carpentry Unit w. Tools | 400 | 1 | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 02-PAINT | Paint Booth | 300 | 1 | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 03-PACK | Packaging Department | 200 | 1 | 100 |'
  prefs: []
  type: TYPE_TB
- en: Capacity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The planning run and the requisition worksheets will use capacity if it is defined.
    The capacity is defined for each **Work Center** and **Machine Center**.
  prefs: []
  type: TYPE_NORMAL
- en: The capacity is stored in the **Calendar Entries**, which are created using
    codeunit **CalendarManagement (99000755)** and reports **Calculate Work Center
    Calendar (99001046)** and Calc. Machine **Center Calendar (99001045)**. Capacity
    is based on the concurrent capacity, from either the machine or work center, and
    the assigned shop calendar.
  prefs: []
  type: TYPE_NORMAL
- en: Just like the interaction log entries, the calendar entries are directly inserted
    instead of going through a journal first.
  prefs: []
  type: TYPE_NORMAL
- en: '![Capacity](img/0365EN_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Calendar entries
  prefs: []
  type: TYPE_NORMAL
- en: When properly configured, the **Planning Worksheet** will calculate the starting
    and ending dates for the production order and each operation in order to meet
    the shipment date on the sales order line.
  prefs: []
  type: TYPE_NORMAL
- en: Production bill of materials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting up the Production bill of materials for manufacturing is not much different
    from the assembly functionality but it contains extra functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The Production BOM uses its own header record with a number series, description,
    and search description. The **Status** field is used to determine whether the
    product is new, certified, under development, or closed. Together with the versioning,
    it enables us to maintain multiple BOMs during the product's life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Production bill of materials](img/0365EN_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The components of the bill of materials are saved as lines and support using
    scrap. The **Scrap %** is calculated when running the MRP and calculating the
    unit cost.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Routing Setup** determines how long it will take to produce one item and
    which work centers and machine centers are used in the process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Routing](img/0365EN_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Routing Setup** gives you advanced features such as parallel and serial
    planning, and setup time. For our example, we will keep it simple and only use
    the **Run Time**.
  prefs: []
  type: TYPE_NORMAL
- en: Testing and low-level code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are now almost set to start testing our manufacturing item. We have set up
    the items and machine centers, calculated the calendar entries, and set up a routing.
  prefs: []
  type: TYPE_NORMAL
- en: The last step in the process is to calculate the low-level code. This field,
    which is stored both in the item and production BOM table, determines how low
    the item is in the BOM ranking. Low-level code zero means this is a parent item
    and one or higher is a child item or a child of a child item.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The maximum value of the low-level code can be 50, but in reality this will
    be very difficult to work with and bad for system performance.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you received an error that you have exceeded 50 levels, check the production
    BOMs to ensure that there is no circular reference. It is possible to have a parent
    item consume a child item that consumes the parent.
  prefs: []
  type: TYPE_NORMAL
- en: The low-level codes can be calculated automatically or manually. For automatic
    calculation, the **Dynamic Low Level Code** feature should be activated.
  prefs: []
  type: TYPE_NORMAL
- en: Due to NAV ability to create a production BOM before it is attached to an item,
    the dynamic low-level code is not always accurate. Prior to a planning run, it
    is good practice to run the **Calculate Low Level Code (Codeunit 99000793)**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing and low-level code](img/0365EN_05_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Activating **Dynamic Low Level Code** can however impact the performance of
    your system, so for most installations, it is preferable to periodically calculate
    this using **Codeunit Calc. Low-level code (99000853)**.
  prefs: []
  type: TYPE_NORMAL
- en: Simulation, sales orders, or inventory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are three ways in Microsoft Dynamics NAV to create a production order.
    The easiest way is to manually enter them one by one. This can even be a simulation
    production order to test whether everything is set up as required.
  prefs: []
  type: TYPE_NORMAL
- en: Manual order entry is very time-consuming and is not often used by manufacturing
    companies. Most of them use MRP programs to plan the orders. When this is done
    using an external application, the interface will then create the production orders.
  prefs: []
  type: TYPE_NORMAL
- en: The MRP algorithm in Microsoft Dynamics NAV supports two policies, Make-To-Stock
    and Make-To-Order.
  prefs: []
  type: TYPE_NORMAL
- en: Make-To-Stock
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make-To-Stock, also called Build-To-Stock is often used for high volume items,
    which are sold to trading companies. When this manufacturing policy is used, the
    reordering policy should be used. Reordering policies will be discussed in [Chapter
    6](ch06.html "Chapter 6. Trade"), *Trade*.
  prefs: []
  type: TYPE_NORMAL
- en: Make-To-Order
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Make-To-Order is often used in demand-driven items such as automobiles. Keeping
    these items in the inventory is very expensive. The manufacturing process is started
    after the item is sold.
  prefs: []
  type: TYPE_NORMAL
- en: However, most companies that use Make-To-Order have reserved time slots where
    these items can be scheduled, so the production capacity is already reserved but
    the item is not yet determined.
  prefs: []
  type: TYPE_NORMAL
- en: When using Make-To-Order, the MRP run will create production orders for all
    sales orders. We will use this manufacturing policy in our example.
  prefs: []
  type: TYPE_NORMAL
- en: The sales order
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For our example, we need a sales order for one or more English desks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when picking a location since this will be the location where the
    desk will be manufactured.
  prefs: []
  type: TYPE_NORMAL
- en: '![The sales order](img/0365EN_05_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Calculating MPS and MRP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The planning run in Microsoft Dynamics NAV creates lines in the requisition
    or planning worksheets. This worksheet structure is very important in the sales/purchase/production
    process. This worksheet can create purchase orders and production orders for sales
    orders.
  prefs: []
  type: TYPE_NORMAL
- en: Requisition versus planning versus subcontracting worksheets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **Requisition Worksheet** can show different user interfaces (pages) allowing
    users to do different tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Requisition versus planning versus subcontracting worksheets](img/0365EN_05_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Requisition Worksheet** does not have a general post line routine like
    the other journals. Each worksheet type uses a different process. The following
    schema shows how the requisition process ties together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Requisition versus planning versus subcontracting worksheets](img/0365EN_05_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Trade** section will be discussed in [Chapter 6](ch06.html "Chapter 6. Trade"),
    *Trade*. In this chapter, we will focus on the planning (MPS and MRP) process
    and the manufacturing part.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The requisition worksheet process allows us to create our own process to prepare
    data using custom settings to generate the worksheet lines and even to build our
    own planning algorithm in a new C/AL object that will create requisition lines.
  prefs: []
  type: TYPE_NORMAL
- en: Inventory profile offsetting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The actual heart of the MRP calculation in Microsoft Dynamics NAV is codeunit
    Inventory Profile Offsetting (99000854), which is called from codeunit Calc. Item
    Plan - Plan Wksh. (5431) in our schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'This codeunit is not easy to understand and should only be changed by specialized
    developers after careful analysis. The process uses the inventory profile buffer
    table during the calculation to build up information and starts with the function
    `CalculatePlanFromWorksheet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inventory profile offsetting](img/0365EN_05_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Atomic coding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code unit in this image in the standard Microsoft Dynamics NAV application
    is a perfect example of atomic coding, also known as workflow coding. With this
    style of programming, you break down the code into functions that have functional
    naming and leave out any programming while calling the functions one by one. This
    makes your code easier to read for others and cheaper to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the functions in this code unit:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InitVariables`: This function is used to clear and initialize variables used
    in this codeunit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DemandtoInvProfile`: Here, the system creates records in the Inventory Profile
    table for Sales Orders, Service Orders, and Production Orders that may require
    items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ForecastConsumption`: If **Use Forecast on Locations** is used in the manufacturing
    setup, additional demand lines are created in the inventory profile buffer based
    on the production forecast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BlanketOrderConsump`: Additional demand is inserted for all blanket sales
    orders with a **Shipment Date** and **Outstanding Qty.** within the calculation
    period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SupplytoInvProfile`: The current inventory, purchase orders, and production
    orders are added to the **Inventory Profile** as possible supply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnfoldItemTracking`: If the item uses **Item Tracking**, this function makes
    sure that Lot numbers and serial numbers match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In this function, Microsoft developers use a trick that when a temporary table
    with more dimensions, the values in both tables are identical. This blog entry
    at [https://markbrummel.wordpress.com/2014/06/01/tip-27-using-temp-tables-in-arrays/](https://markbrummel.wordpress.com/2014/06/01/tip-27-using-temp-tables-in-arrays/)
    explains how this works.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`FindCombination`: This function creates temporary **Stock Keeping Unit** records
    for each SKU that requires replenishment. If the item does not have any SKU, the
    system will create a temporary SKU record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PlanItem`: This is where the actual requisition lines are created for the
    item, based on the information in the **Inventory Profile** table and the setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CommitTracking`: This function saves information stored in temporary record
    variables to actual data in the database for reservation entries and action messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating a plan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's run the **Planning Worksheet** for our English desk and see what planning
    lines we get.
  prefs: []
  type: TYPE_NORMAL
- en: '![Calculating a plan](img/0365EN_05_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The MPS and MRP run is started from the **Planning Worksheet**. We need to enter
    a starting date and an ending date. In the CRONUS database using our example,
    we can use the current workdate.
  prefs: []
  type: TYPE_NORMAL
- en: When the MPS and MRP run is finished, we can start the process to **Carry Out
    Action Message** to create the **Production Order**.
  prefs: []
  type: TYPE_NORMAL
- en: Production order workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The production order is now created and ready to be started. The first status
    is **Planned** or **Firm Planned**. During the planned status, Microsoft Dynamics
    NAV can automatically change the production order.
  prefs: []
  type: TYPE_NORMAL
- en: Once the production order is released, it can no longer be automatically changed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Production order workflow](img/0365EN_05_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To release a production order, the components need to be available. In our test
    scenario, this is not yet true since we created new items, which have not been
    purchased.
  prefs: []
  type: TYPE_NORMAL
- en: '![Production order workflow](img/0365EN_05_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's see how we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Purchase orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create the purchase orders, we'll use the **Order Planning** worksheet to
    illustrate another method of planning. This will create requisition lines for
    the production order we just released.
  prefs: []
  type: TYPE_NORMAL
- en: '![Purchase orders](img/0365EN_05_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the requisition lines are created, we need to specify a vendor number in
    the **Supply From** field and then start the **Make Orders** process to generate
    the **Purchase Orders**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Purchase orders](img/0365EN_05_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Purchase Order** can be received. This allows us to release the **Production
    Order**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Purchase orders](img/0365EN_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finishing production
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the production order is finished, the end product should be in the inventory
    and the components should be consumed. This consumption process is called flushing.
  prefs: []
  type: TYPE_NORMAL
- en: This is done using the **Consumption Journal** and **Output Journal** and can
    be done automatically and manually.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An alternative to the Consumption and Output Journal is the Production Journal
    that combines the functionality into one journal.
  prefs: []
  type: TYPE_NORMAL
- en: The Consumption Journal is automatically posted when the flushing method in
    the item card is set to `Forward`, `Backward` or `Pick + Forward`, `Pick + Backward`.
  prefs: []
  type: TYPE_NORMAL
- en: When using `Forward`, the Consumption Journal is posted when the production
    order is released, `Backward` will post when the production order is set to finished.
    `Pick + Forward` and `Pick + Backward` can be used in combination with **Warehouse
    Management Locations**.
  prefs: []
  type: TYPE_NORMAL
- en: Specialized production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last production methodology we discussed at the beginning of the chapter
    is specialized production.
  prefs: []
  type: TYPE_NORMAL
- en: These are items produced in small numbers or items that have very different
    specifications each time they go into production. For these companies, creating
    a bill of materials each time an item changes is just too much work compared to
    the extra information they would get.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Still, these companies want to register their production orders and get a clear
    view of their inventory. Most companies doing this kind of production are using
    the jobs functionality of Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss this in [Chapter 8](ch08.html "Chapter 8. Consulting"), *Consulting*,
    where we will assemble custom-made computer systems with different components
    as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Vertical industry implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV is used in many different vertical industries. Vertical
    industries often require specific features. Rather than trying to implement all
    these features in the standard product, Microsoft Dynamics NAV supports the framework
    and allows developers to design and create vertical features.
  prefs: []
  type: TYPE_NORMAL
- en: For these features, the 80/20 rule applies; Microsoft delivers 80 percent of
    the framework, which costs 20 percent of our time to implement. The missing 20
    percent of the functionality is developed costing 80 percent of the budgeted time.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how Microsoft Dynamics NAV is used for production
    in five different vertical industries. For each industry, we will discuss two
    specific vertical features and how they could be solved.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most industries have solid add-on solutions available designed by certified
    Microsoft Dynamics NAV partners that have been implemented at multiple sites.
    It is highly recommended to look at those add-on solutions instead of reinventing
    the wheel and rewriting an add-on that already exists.
  prefs: []
  type: TYPE_NORMAL
- en: Fashion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The general challenge in the fashion industry is sizes and colors. Each item
    can be produced and sold from XXS to XXXL and from pink to orange to green while
    remaining the same item.
  prefs: []
  type: TYPE_NORMAL
- en: This calls for the creative use of variants, which are heavily used by the available
    vertical solutions on the market.
  prefs: []
  type: TYPE_NORMAL
- en: Bill of materials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use manufacturing with variants, the bill of material structure should be
    changed since this exists by default on the item level. However, each size uses
    different quantities of fabric and the different colors of fabric are often represented
    by another item number in the raw materials.
  prefs: []
  type: TYPE_NORMAL
- en: A solution for this might be to move the bill of materials from **Item level**
    to **Stock Keeping Unit level**. An SKU supports variants for costing and the
    inventory.
  prefs: []
  type: TYPE_NORMAL
- en: Shipping worksheet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fashion companies produce items for a collection. Customers have the possibility
    to reserve on a collection in order for the production manager to determine how
    many to produce. Based on these numbers and an extra safety inventory, the production
    orders are created. Once the production orders are finished, the company needs
    to decide who gets the first items. This can be best described as a reversed make-to-order
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this in Microsoft Dynamics NAV, we could create a worksheet that will
    create lines for each combination of production orders and sales orders. For each
    sales order that will be shipped, we could create a **Warehouse Pick** and **Shipment**
    from the **Shipping Worksheet**.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss stock keeping units, warehouse picks, and shipments in [Chapter
    6](ch06.html "Chapter 6. Trade"), *Trade*.
  prefs: []
  type: TYPE_NORMAL
- en: Automotive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the automotive industry, Microsoft Dynamics NAV is mostly used by car manufacturing
    suppliers, the companies that make prefabricated parts out of raw materials.
  prefs: []
  type: TYPE_NORMAL
- en: Tooling and amortization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In these companies, the **Production Part Approval Process** (**PPAP**) is very
    important as well as the tooling amortization since the initial investments in
    tooling before the production process starts is high.
  prefs: []
  type: TYPE_NORMAL
- en: To support this, extra functionality needs to be developed for the tooling and
    BOM process. For example, the table Routing Tool (table 99000802) can be connected
    to a Fixed Asset (table 5600).
  prefs: []
  type: TYPE_NORMAL
- en: Item tracking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When something is wrong with a component of a car, it is important to be able
    to see what other cars have, the same components built by the same factory and
    tools using the same base materials.
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, it is possible to use a single Lot no. for a component
    or an end product and to trace this back. It is not possible to simply move the
    Lot no. of the component to the end product or copy information from the component's
    Lot no. such as a container no. or a quality code to the end product.
  prefs: []
  type: TYPE_NORMAL
- en: To support this, we need to change the item tracking process. A good place to
    start would be the item journal where the reservation entry is moved to the item
    ledger entry.
  prefs: []
  type: TYPE_NORMAL
- en: Medicines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When used by companies that manufacture medicines, using the expiration date
    for Lot numbers correctly is highly important.
  prefs: []
  type: TYPE_NORMAL
- en: Lot numbers and expiration dates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, expiration dates are defined in the **Item Ledger
    Entries** and the **Warehouse Entries**.
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to define a single expiration date for a Lot. This can be
    changed by adding this field to the Lot No. Information table (6505). This table
    allows companies to predefine Lot numbers to be used in the production process.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the expiration date is calculated based on the document date multiplied
    with the **Expiration Calculation** field in the Item table (27).
  prefs: []
  type: TYPE_NORMAL
- en: The Lot No. Information table can be used to save additional information about
    the specific production batch.
  prefs: []
  type: TYPE_NORMAL
- en: Quality control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Quality control is important in most production processes but maybe extra important
    when dealing with medicines. Usually a small part of a Lot is taken for quality
    control.
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, we can define quality measures in the Prod. Order
    Rtng Qlty Meas. Table (5413). However, these values are only saved as information
    for the production order.
  prefs: []
  type: TYPE_NORMAL
- en: To enhance quality control, we could add a document structure where a quality
    check document is created from a production order. The information should be saved
    in the Lot No. Information table.
  prefs: []
  type: TYPE_NORMAL
- en: When a Lot does not have the required quality, a workflow should be started.
    This workflow will lead the user through a process where decisions can be made.
    Sometimes, the quality can be improved and the items can still be used. Sometimes
    the item number even depends on the quality of the product.
  prefs: []
  type: TYPE_NORMAL
- en: Quality control is in between the Consumption Journal and the Output Journal.
    During the final quality check, the BOM items are used, but the final item is
    not yet available.
  prefs: []
  type: TYPE_NORMAL
- en: Food
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the food industry, everything is about expiration dates and fresh products.
    Inventory is never very high and the rate of circulation is very high.
  prefs: []
  type: TYPE_NORMAL
- en: Zero inventory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this reason, it should be possible for fresh food companies to zero the
    inventory of certain Lot numbers once the expiration date is closing or has expired.
  prefs: []
  type: TYPE_NORMAL
- en: This could normally be done using the Physical Inventory Journal. Doing this
    manually with Lot numbers can be quite a job for someone to do this every day
    so for this vertical solution, we could create a function to do this. This function
    would create an Item Journal Line (83) with the field Phys. Inventory (56) activated
    and also create the Reservation entry for tracking and post the line automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering schedules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fresh food companies use daily production processes that start on scheduled
    times. Each day, the factory starts the production process but the production
    numbers can be different based on the orders.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done using the Make-To-Order policy but we need to make sure that
    there will be no new sales orders when the calculation process starts.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved by creating an order schedule policy. New sales lines can
    be created for each item until a certain time. When the time has elapsed, the
    salespeople will get an error message. This allows the production planner to start
    the calculation process at a fixed time each day, knowing the sales orders quantities
    can be trusted.
  prefs: []
  type: TYPE_NORMAL
- en: Furniture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The furniture industry is a large and very old industry that existed long before
    the industrial revolution and the introduction of computers.
  prefs: []
  type: TYPE_NORMAL
- en: We can roughly split the furniture industry into two parts. The first part has
    moved production to be standardized using size and color matrixes, which we can
    compare to the fashion industry. When buying a table or kitchen, the customer
    can choose from different sizes and colors. Depending on the number of choices,
    the products are either Made-To-Stock (IKEA) or Made-To-Order.
  prefs: []
  type: TYPE_NORMAL
- en: The second part is furniture manufacturers who still produce custom-made items.
    A desk or kitchen at these manufacturers can have any size or color. For these
    companies, it is next to impossible to create a bill of material for each custom
    item so they use predefined calculations with item categories.
  prefs: []
  type: TYPE_NORMAL
- en: For the examples in this book, we will discuss the second category.
  prefs: []
  type: TYPE_NORMAL
- en: Calculations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Companies building custom-made furniture need the possibility to calculate the
    use of materials and resources, both at the item category and real item level.
    For this, we can create a calculation module with this data and posting model.
  prefs: []
  type: TYPE_NORMAL
- en: '![Calculations](img/0365EN_05_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The basic structure of this calculation module is explained in [Chapter 8](ch08.html
    "Chapter 8. Consulting"), *Consulting*, where we have combined this into the jobs
    functionality of Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Inventory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our furniture company uses a combination of product-specific items that are
    one of a kind and inventory items that are used in most of the products.
  prefs: []
  type: TYPE_NORMAL
- en: These items are combined into the end product and should be consumed when the
    product is finished. When the calculation module is integrated with jobs, for
    example, it would be possible to flush the components when the job is completed.
    This functionality can be compared to the posting of the Consumption Journal when
    a production order is finished.
  prefs: []
  type: TYPE_NORMAL
- en: The inventory items can be updated weekly using the Physical Inventory Journal
    and inventory counting. This enables us to use the requisition worksheet and reordering
    policy we will discuss in [Chapter 6](ch06.html "Chapter 6. Trade"), *Trade*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how three production methodologies can be implemented
    in the Microsoft Dynamics NAV product. We introduced the concepts of item tracking
    and item costing. We took a tour through the manufacturing process using different
    requisition worksheets and talked about the solution for MRP.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we looked at how production can be implemented for different vertical
    industries. In the next chapter, we will have a closer look at the trade process
    in Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
