- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Web Components Using Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building web components using Blazor. These can be rich
    and interactive user interfaces that render as HTML and CSS to provide cross-platform
    browser support.
  prefs: []
  type: TYPE_NORMAL
- en: There are many advantages to using .NET for client-side web development. You
    can write 99% of your code using C# instead of JavaScript and interop with JavaScript
    modules for the other 1%. You can share business logic between the server and
    the client. Blazor implements .NET Standard as well as the latest .NET 8 libraries,
    so you can use the extensive older .NET libraries, both from Microsoft and third
    parties.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous edition of this book, this chapter covered **Blazor WebAssembly**,
    a hosting model where the entire Blazor app and the .NET runtime were downloaded
    to the browser and executed there. One of the problems with Blazor WebAssembly
    is a slow initial startup experience for the visitor because a lot needs to be
    downloaded and executed on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Many .NET developers were frustrated with having to choose between different
    technologies to build web apps, because none of them are perfect and all have
    pros and cons.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this edition of the book, this chapter covers the new unified Blazor Full
    Stack model introduced with .NET 8\. This enables you to mix the best of all worlds
    in a single project, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Blazor components that execute on the client-side using WebAssembly. This replaces
    what is possible with a Blazor WebAssembly project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blazor components that execute on the server-side and communicate live with
    the **Document Object Model** (**DOM**) in the browser, using SignalR to perform
    updates. This replaces what is possible with a Blazor Server project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blazor components that provide **static server rendering** (**SSR**) and return
    an HTTP response, with static content that does not interact live with the server.
    This replaces what is possible with Razor Pages or Razor Views used in traditional
    ASP.NET Core websites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blazor components that provide server-side streaming so that some content is
    shown to the visitor as soon as possible, while the rest streams to the browser
    in the background. This is a brand-new feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A future release will enable Blazor to execute in any .NET process, like a console
    app, so that it can be used as a **static site generator** (**SSG**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Blazor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Blazor components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Blazor data component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing caching using local storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blazor is Microsoft’s framework for web component development built on .NET.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor hosting models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blazor has multiple hosting models to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blazor Server**: All the components execute on the web server and user interface
    updates are sent to the browser using SignalR. The nature of Blazor Server provides
    some key benefits, including complete .NET API support, direct access to all server-side
    resources like databases, fast initial load time, and your code is protected because
    it never leaves the server. This hosting model was introduced with .NET Core 3.0
    in November 2019.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor WebAssembly**: All the components execute in the web browser like
    other **single page application** (**SPA**) frameworks, for example, React and
    Angular. Your .NET assemblies and the .NET runtime are downloaded to the browser
    and cached for future use. The nature of Blazor WebAssembly provides some key
    benefits, including the ability to run the app offline when not connected to the
    network, to host the app on a static website or serve it from a **content delivery
    network** (**CDN**), and to offload processing to the client, which increases
    scalability. This hosting model was introduced as an extension to .NET Core 3.1
    in May 2020 and was built-in with .NET 5 in November 2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor Hybrid/.NET MAUI Blazor App**: All the components execute in a local
    web view hosted in a native client app. The app can be built using .NET MAUI if
    the app needs to be cross-platform, or using Windows Presentation Foundation or
    Windows Forms if you are only targeting Windows. The main benefit of Blazor Hybrid
    compared to the first two hosting models is access to native client capabilities
    that can provide a better user experience. This hosting model was introduced with
    .NET 7 in November 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor Full Stack**: Components can execute on the server and generate static
    markup, but each individual component can be switched to any of the following:
    streaming rendering, interactive server-side with live updates of the COM using
    SignalR, or interactive client-side with WebAssembly. This new hosting model was
    formerly known as Blazor United during .NET 8 previews. It was introduced as Blazor
    Full Stack with .NET 8 in November 2023\. In future versions, I expect it to be
    simply known as Blazor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice**: For new projects, **Blazor Web App** should be your choice
    of project template. If you need a pure SPA project that can be hosted on Azure
    Static Web Apps or a CDN, then **Blazor WebAssembly** **Standalone App** will
    be your best choice because Blazor Web App requires a web server. For static websites,
    Blazor WebAssembly is still the right solution rather than the new Blazor Full
    Stack.'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of multiple *hosting models*, Blazor Full Stack has multiple equivalent
    *rendering modes*. The Blazor Server project template that hosted and executed
    its code on the server-side is now replaced by the *interactive server rendering
    mode*. The Blazor WebAssembly project templates that could be hosted even on a
    static website and execute their code on the client-side can now be replaced by
    the *interactive WebAssembly rendering mode*.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor supports the latest version of all four major web browsers – Chrome,
    Firefox, Edge, and Safari, on mobile and desktop platforms. Blazor Hybrid supports
    the latest web view components on the three major platforms – Chrome on Android,
    Safari on iOS and macOS, and Edge WebView2 on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: The official Blazor documentation has a useful table
    to help you choose between the hosting models. You can find it at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#which-blazor-hosting-model-should-i-choose](https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#which-blazor-hosting-model-should-i-choose).'
  prefs: []
  type: TYPE_NORMAL
- en: Blazor components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blazor is all about **components**. A component is a part of a web app, like
    a button, a grid, a form for gathering input from the visitor, or even a whole
    page. Components can be reused and nested to build more complex components.
  prefs: []
  type: TYPE_NORMAL
- en: A Blazor component usually consists of a Razor file with the file extension
    `.razor`. Like Razor views in ASP.NET Core MVC or Razor Pages, Razor files used
    by Blazor components easily mix HTML and C# code. As well as the HTML elements
    that make up the user interface parts, and the CSS used to style them, the Razor
    file also has a code block to implement event handling, properties, and other
    statements to provide the functionality of the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a Blazor component named `ProgressBar.razor` could implement a
    progress bar using Bootstrap. It might define parameters for a minimum, maximum,
    and the current value of the progress bar, and have Boolean parameters to enable
    animation style and show the current value as text, as shown in the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To embed an instance of the component on a page, you use the component name
    as if it were an HTML element and set its parameters using HTML attributes, as
    shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Blazor routing to page components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Router` component in the `App.razor` file enables routing to components,
    as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `Router` component scans the assembly specifically in its `AppAssembly`
    parameter for components decorated with the `[Route]` attribute, registering their
    URL paths.
  prefs: []
  type: TYPE_NORMAL
- en: If a route match is found, then the context of the request is stored in a variable
    named `routeData` and passed to the matching Razor file. The default layout is
    set to use a class defined in the file named `MainLayout.razor`.
  prefs: []
  type: TYPE_NORMAL
- en: The `FocusOnNavigate` component has a `Selector` property that must be set to
    a valid CSS selector. This could be a tag selector like the default `h1`, or a
    more specific CSS selector that uses a CSS class or an ID. The setting is common
    across all components in your app, so you will need to set one that works across
    all your components. In the Razor file, the focus is set to the first `<h1>` element.
    If the Razor file contains a form, then you might want to set the first form input
    element like a text box to have the focus.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in a typical ASP.NET Core MVC project, an MVC controller could
    be decorated with the `[Route]` attribute, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: An HTTP `GET` request to the relative path `/customers` would be matched to
    the route.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an equivalent routable page component, add the `@page` directive
    to the top of a component’s `.razor` file, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A page component can have multiple `@page` directives to register multiple routes.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to write code that uses reflection to find the `component` class
    generated for you from the Razor markup file, then you would discover that it
    is decorated with the `[Route]` attribute due to the `@page` directive.
  prefs: []
  type: TYPE_NORMAL
- en: At runtime, the page component is merged with any specific layout that you have
    specified, just like an MVC view or Razor Page would be. By default, Blazor project
    templates define a file named `MainLayout.razor` as the layout for page components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: By convention, put routable page Blazor components in the
    `Components\Pages` folder and non-page components in the `Components` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: How to pass route parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blazor routes can include case-insensitive named parameters, and your code
    can most easily access the passed values by binding the parameter to a property
    in the code block, using the `[Parameter]` attribute, as shown in the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The recommended way to handle a parameter that should have a default value
    when it is missing is to suffix the parameter in the route with `?`, using the
    `null` coalescing operator in the `OnParametersSet` method, as shown highlighted
    in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Setting parameters from a query string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also set component properties using parameters from a query string,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Route constraints for parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Route constraints validate that the data type is correct for a passed parameter.
    If a potential request with a parameter value violates the constraint, then a
    match for that route is not made, and other routes will be evaluated instead.
    If no routes match, then a `404` status code is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not set constraints, then any value is acceptable as a route match,
    but a data type conversion exception may result when the value is converted into
    the C# method’s expected data type. Some route constraint examples are shown in
    *Table 15.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Constraint example** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `{isanimated:bool}` | The `IsAnimated` property must be set to a valid Boolean
    value, for example, `TRUE` or `true`. |'
  prefs: []
  type: TYPE_TB
- en: '| `{hiredate:datetime}` | The `HireDate` property must be a valid date/time
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| `{price:decimal}` | The `UnitPrice` property must be a valid `decimal` value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `{shipweight:double}` | The `ShipWeight` property must be a valid `double`
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| `{shipwidth:float}` | The `ShipWidth` property must be a valid `float` value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `{orderid:guid}` | The `OrderId` property must be a valid `Guid` value. |'
  prefs: []
  type: TYPE_TB
- en: '| `{categoryid:int}` | The `CategoryId` property must be a valid `int` value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `{nanoseconds:long}` | The `Nanoseconds` property must be a valid `long`
    value. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 15.1: Route constraint examples'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Route constraints assume invariant culture, so your URLs
    must not be localized. For example, always use invariant culture formats to pass
    date and time parameter values.'
  prefs: []
  type: TYPE_NORMAL
- en: Base component classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `OnParametersSet` method is defined by the base class that components inherit
    from by default, named `ComponentBase`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`ComponentBase` has some useful methods that you can call and override, as
    shown in *Table 15.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method(s)** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `InvokeAsync` | Call this method to execute a function on the associated
    renderer’s synchronization context. This avoids the requirement to write thread-synchronizing
    code when accessing shared resources. Multiple threads are not allowed to access
    the rendering process at the same time. The use of `InvokeAsync` means that only
    one thread will access components at any given moment, which eliminates the need
    to write thread-locking and synchronization code for shared state. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnAfterRender`,`OnAfterRenderAsync` | Override these methods to invoke code
    each time the component has been rendered. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnInitialized`,`OnInitializedAsync` | Override these methods to invoke code
    after the component has received its initial parameters from its parent in the
    render tree. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnParametersSet`,`OnParametersSetAsync` | Override these methods to invoke
    code after the component has received parameters and the values have been assigned
    to properties. |'
  prefs: []
  type: TYPE_TB
- en: '| `ShouldRender` | Override this method to indicate if the component should
    render. |'
  prefs: []
  type: TYPE_TB
- en: '| `StateHasChanged` | Call this method to cause the component to re-render.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table 15.2: Useful methods of ComponentBase'
  prefs: []
  type: TYPE_NORMAL
- en: Blazor layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blazor components can have shared layouts in a similar way to MVC views and
    Razor Pages. You would create a `.razor` component file and make it explicitly
    inherit from `LayoutComponentBase`, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The base class has a property named `Body` that you can render in the markup
    at the correct place within the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set a default layout for components in the `App.razor` file and its
    `Router` component. To explicitly set a layout for a component, use the `@layout`
    directive, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How to navigate Blazor routes to page components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft provides a dependency service named `NavigationManager` that understands
    Blazor routing and the `NavLink` component. The `NavigateTo` method is used to
    go to the specified URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'In HTML, you use the `<a>` element to define navigation links, as shown in
    the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In Blazor, use the `<NavLink>` component, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `NavLink` component is better than an anchor element because it automatically
    sets its class to `active` if its `href` is a match on the current location URL.
    If your CSS uses a different class name, then you can set the class name in the
    `NavLink.ActiveClass` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, in the matching algorithm, the `href` is a path *prefix*, so if
    `NavLink` has an `href` of `/employees`, as shown in the preceding code example,
    then it would match all the following paths and set them all to have the `active`
    class style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that the matching algorithm only performs matches on *all* of the
    text in the path, (in other words, there is only a match when the whole complete
    text matches and not when just part of the path matches), then set the `Match`
    parameter to `NavLinkMatch.All`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you set other attributes such as `target`, they are passed through to the
    underlying `<a>` element that is generated.
  prefs: []
  type: TYPE_NORMAL
- en: CSS and JavaScript isolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blazor components often need to provide their own CSS to apply styling or JavaScript
    for activities that cannot be performed purely in C#, like access to browser APIs.
    To ensure this does not conflict with site-level CSS and JavaScript, Blazor supports
    CSS and JavaScript isolation.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a component named `Home.razor`, simply create a CSS file named `Home.razor.css`.
    The styles defined within this file will override any other styles in the project
    for this component, but not for the rest of the website.
  prefs: []
  type: TYPE_NORMAL
- en: For JavaScript isolation, you do not use a naming convention in the same way
    as with CSS. Instead, Blazor enables JavaScript isolation using JavaScript modules,
    imported using the JavaScript interop feature of Blazor, as you will see later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about JavaScript isolation at the following link: [https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet#javascript-isolation-in-javascript-modules](https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet#javascript-isolation-in-javascript-modules).'
  prefs: []
  type: TYPE_NORMAL
- en: Building Blazor components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With ASP.NET Core 8, Blazor introduced a new project template to start a project
    that supports the most flexible hosting model and all rendering modes. It provides
    a basic template to run, and a `Weather` component, which shows a table with five
    rows of random temperatures that uses streaming rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the new Blazor project template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will create a Blazor Web App project and review its important parts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to create a new project and solution, using
    the Blazor Web App project template, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Blazor Web App** / `blazor --interactivity None`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Blazor`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter15`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication type**: None'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive render mode**: None'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactivity location**: Per page/component'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include sample pages**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio Code or JetBrains Rider, then enter the following
    command at the command prompt or terminal in the `Chapter15` folder: `dotnet new
    blazor --interactivity None -o Northwind.Blazor`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Good Practice**: We have not selected the options to use interactive WebAssembly
    or server components so that we can build up your knowledge about how Blazor works
    step by step. In real-world projects, you are likely to want to select these options
    from the start. We have also selected sample pages, which you would likely want
    to clear in a real-world project.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.Blazor` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Northwind.Blazor.csproj`, note that it is identical to an ASP.NET Core project
    that uses the Web SDK and targets .NET 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor` project, in `Program.cs`, note that the statements
    enable the ASP.NET Core service collection and HTTP pipeline, with Blazor-specific
    statements to add Razor components and then use them, as shown highlighted in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Blazor` project, expand the `Properties` folder, open the
    `launchSettings.json` file, and for the `applicationUrl` setting of the `https`
    profile, change the port numbers to `5151` for `https` and `5152` for `http`,
    as shown in the following setting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes to the `launchSettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor` project, in the `Components` folder, open `App.razor`,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A `<HeadOutlet />` Blazor component to inject additional content into the `<head>`
    section. This is one of the built-in components available in all Blazor projects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<Routes />` Blazor component to define the custom routes in this project.
    This component can be completely customized by the developer because it is part
    of the current project, in a file named `Routes.razor`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A script block for `blazor.web.js` that manages communication back to the server
    for Blazor’s dynamic features, like downloading WebAssembly components in the
    background and later switching from server-side to client-side component execution.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Components` folder, in `Routes.razor`, note that a `<Router>` enables
    routing for all Blazor components found in the current assembly, and that if a
    matching route is found, then `RouteView` is executed, which sets the default
    layout for the component to `MainLayout` and passes any route data parameters
    to the component. For that component, the first `<h1>` element in it will get
    the focus, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Components` folder, in `_Imports.razor`, note that this file imports
    some useful namespaces for use in all your custom Blazor components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Components\Layout` folder, note that `MainLayout.razor` defines `<div>`
    for a sidebar, containing a navigation menu that is implemented by the `NavMenu.razor`
    component file in this project, and HTML5 elements like `<main>` and `<article>`
    for the content, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Layout` folder, open `NavMenu.razor`, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `NavMenu` component does not have a `@page` directive because it does not
    use a shared layout or render as a page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses Bootstrap to provide a menu of choices that responsively adapts to the
    width of the viewport. It will collapse into a hamburger menu when there is not
    enough horizontal space, and then the visitor can toggle the navigation on and
    off.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are currently two menu items: **Home** and **Weather**. We will add more
    throughout this chapter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in `Home.razor`, note the `@page` directive
    that configures a route for the root path to go to this page component, and then
    change the heading from `world` to `Blazor Full Stack`, as shown highlighted in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `Northwind.Blazor` project, using its `https` profile without debugging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then in **Solution Explorer**, select the
    `Northwind.Blazor` project to make it active. In the Visual Studio 2022 toolbar,
    select the `https` profile as the **Startup Project**, and **Google Chrome** as
    the **Web Browser**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio Code, then at the command line or terminal,
    enter the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'In Chrome, note the left-side navigation and the home page component, as shown
    in *Figure 15.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_15_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1: A simple web page implemented as a Blazor page component'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Bootstrap icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The older Blazor project templates included all the Bootstrap icons. In the
    new project template, only three icons are defined using **Scalable Vector Graphics**
    (**SVG**). Let’s see how the team defined those icons, and then add some more
    for our own use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components\Layout` folder, in the CSS stylesheet file named `NavMenu.razor.css`,
    find the text `bi-house`, and note the three icons defined using SVG, as partially
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your favorite browser, navigate to: [https://icon-sets.iconify.design/bi/](https://icon-sets.iconify.design/bi/),
    and note that **Bootstrap Icons** have an MIT license and contain more than 2,000
    icons.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Search Bootstrap Icons** box, enter `globe`, and note that six globe
    icons are found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the first globe, scroll down the page, and click the **SVG as data: URI**
    button. Note that you could copy and paste the definition of this icon for use
    in the CSS stylesheet, but you do not need to because I have already created a
    CSS file for you to use, with five icons defined for you to use in your Blazor
    project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your favorite browser, navigate to: [https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter15/Northwind.Blazor/wwwroot/icons.css](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter15/Northwind.Blazor/wwwroot/icons.css),
    download the file, and save it in your own project in its `wwwroot` folder.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Components` folder, in the `App.razor` component, in the `<head>`,
    add a `<link>` element to reference the `icons.css` stylesheet, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Referencing an EF Core class library and registering a data context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will reference the EF Core model that you created in *Chapter 3*, *Building
    Entity Models for SQL Server Using EF Core*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor.csproj` project file, treat warnings as errors, and
    add a project reference to the Northwind database context project, as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Include` path must not have a line break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the command prompt or terminal, build the `Northwind.Blazor` project using
    the `dotnet build` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Components` folder, in `_Imports.razor`, import the namspaces to use
    asynchronous methods with EF Core and to with the Northwind entity models, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Importing the namespaces here means we do not have to import them at the top
    of `.razor` files. The `_Imports.razor` file only applies to `.razor` files. If
    you use code-behind `.cs` files to implement component code, then they must have
    namespaces imported separately, or use global usings to implicitly import the
    namespace. Note the statement to statically import the render mode type: `@using
    static Microsoft.AspNetCore.Components.Web.RenderMode`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace to use the `AddNorthwindContext` extension
    method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section that adds services to the container, add a statement that registers
    `NorthwindContext` as a service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Building a static server rendered component for data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we will add a component that can do the same job as a Razor Page or Razor
    View in a traditional ASP.NET Core website. It will not have any interactivity
    that requires the component to execute on the server or client.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will allow the visitor to see a table of products from the Northwind database:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Components\Pages` folder, add a new file named `Products.razor`. In
    Visual Studio 2022, the project item template is named **Razor Component**. In
    JetBrains Rider, the project item template is named **Blazor Component**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: Component filenames must start with an uppercase letter,
    or you will have compile errors!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Products.razor`, set the route to `/products`, inject a Northwind data
    context, define a table to render products, and write a code block to get the
    products when the page has initialized, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, after the menu item
    to navigate to the home page, add a menu item to navigate to the products page,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your database server is not running, (for example, because you are hosting
    it in Docker, a virtual machine, or the cloud), then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-side navigation, click **Products**, and note the table of products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a component with server interactivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will add a component that requires some interactivity, so we will
    enable Blazer with SignalR to dynamically update the browser DOM live at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Components` folder, add a new file named `Counter.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Counter.razor`, define a label to render the current value of the counter
    number, and a button to increment it, and a code block to store the current counter
    value with a click event handler, to increment the number, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that this component will not act as a page, so we do not decorate it with
    the `@page` directive or define a route to the component. It will only be used
    embedded in some other component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in `Home.razor`, at the bottom of the page,
    render the counter component, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click the button, and note that nothing happens. When you
    create a project using the Blazor Web App template with the `--interactivity None`
    switch or the **Interactive render mode** set to **None**, no component interactivity
    is enabled in a Blazor Web App project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, at the end of the statement that adds Razor components, add
    a call to a method to add interactive server components, as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, at the end of the statement that maps Razor components, add
    a call to a method to add interactive server render mode, as shown highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components` folder, in `Counter.razor`, at the top of the file, add
    a directive to set render mode to interactive server, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Developer Tools**, click the **Console** tab, and note the `blazor.web.js`
    files establishes a WebSocket connection, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In **Developer Tools**, click the **Network** tab, click **WS** to filter by
    WebSockets, and refresh the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, click the **Increment** button, note the counter increments,
    note the **_blazor?id=...** request, select the request for **_blazor?id=...**,
    and click the **Initiator** tab, and note that the initiator was the `blazor.web.js`
    file that is added to all pages by the `App.razor` file, as shown in *Figure*
    *15.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_15_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.2: Blazor.web.js requests to SignalR on the server to update the
    DOM for live interactivity'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a Blazor progress bar component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will build a component to provide a progress bar. It will
    use Bootstrap classes to set a stripped light blue color, with options to animate
    the bar and show the current value of the progress as a percentage:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, in the `Components` folder, add a new file
    named `ProgressBar.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `ProgressBar.razor`, add statements to render `<div>` elements that use
    Bootstrap classes to define a progress bar with bindable parameters, setting various
    properties, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Home.razor`, at the bottom of the file,
    add statements to define a Bootstrap row with two equal columns, and add a `<ProgressBar>`
    component set to 25%, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the progress bar that shows the progress of the (simulated!) database deletion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a Blazor dialog box component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will build a component to provide a popup dialog box for
    interaction with the website visitor. It will use Bootstrap classes to define
    a button that, when clicked, shows a dialog box with two buttons with configurable
    labels.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Blazor Web App project template uses a local copy of Bootstrap
    5.1 but only the CSS part. We will need to add a script tag to add the JavaScript
    parts of Bootstrap. We may as well upgrade to the latest version of Bootstrap
    and use the CDN version too.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the latest CDN links at the following link: [https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links](https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links).'
  prefs: []
  type: TYPE_NORMAL
- en: The component will also define two event callbacks that can be handled by the
    parent to customize what code executes when the two buttons are clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `App.razor`, comment out the `<link>` to the local CSS file and add a reference
    to the latest CDN version, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `App.razor`, after the `<script>` tag for Blazor, add a `<script>` to the
    latest CDN version, and suppress error `RZ/BL9992`, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We suppress the error BL9992 (also referred to as RZ9992), which warns that,
    “Script tags should not be placed inside components because they cannot be updated
    dynamically.” For more information, see [https://aka.ms/AAe3qu3](https://aka.ms/AAe3qu3).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, in the `Components` folder, add a new file
    named `DialogBox.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `DialogBox.razor`, add statements to render `<div>` elements that use Bootstrap
    classes to define a button and modal dialog box with bindable parameters, setting
    various properties, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the two buttons have default text values of `OK` and `Cancel`, and
    they both have event callback parameters that will have information about the
    mouse pointer passed as event arguments. Also, note the button with `class="btn-close"`
    that visually appears as the **X** button in the top-right corner to close the
    dialog.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in `Home.razor`, at the top of the file,
    add statements to set render mode as the interactive server, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Home.razor`, near the bottom of the file,
    replace the text `More components coming soon` with statements to add a `<DialogBox>`
    component that sets the two button labels to `Yes` and `No`, and then at the bottom
    of the file, add a Razor code block to define event handlers for the two click
    events that output which button was clicked and the current position of the mouse
    pointer, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Any content between the `<DialogBox>` and `</DialogBox>` elements is automatically
    set as the `ChildContent` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Delete Database** button, and note the modal dialog box that pops
    up, as shown in *Figure 15.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_15_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.3: A pop-up modal dialog box that a Blazor component built using
    Bootstrap'
  prefs: []
  type: TYPE_NORMAL
- en: Arrange the command prompt or terminal and the browser window so that you can
    see both.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Delete Database** dialog box, click the **Yes** button and **No** button
    a few times (clicking the **No** button or the **x** button will close the dialog,
    so click the **Delete Database** button again to reshow the dialog box), and note
    the messages written to the console, as shown in *Figure 15.4*:![](img/B19587_15_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 15.4: The dialog box component writing to the server console'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: JavaScript in the client displays the Bootstrap dialog box. Clicks on the buttons
    trigger the SignalR connection over WebSockets to execute the component event
    handling code, executing on the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can read more about the supported event arguments at the following link:
    [https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#event-arguments](https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#event-arguments).'
  prefs: []
  type: TYPE_NORMAL
- en: Building a Blazor alert component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will build a component to provide alerts to show messages
    to the website visitor. It will use Bootstrap classes to define a colorful area
    for the message, which can be dismissed. The message, title, icon, and color theme
    can be configured:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, in the `Components` folder, add a new file
    named the `Bootstrap.Constants.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Bootstrap.Constants.cs`, add statements to define some static classes with
    `string` constant values for common Bootstrap color themes and icons, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Components` folder, add a new file named `Alert.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Alert.razor`, add statements to render `<div>` elements that use Bootstrap
    classes to define a `<div>` with bindable parameters, setting various properties,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Home.razor`, add an `Alert` element below
    the `<DialogBox>` element, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, note the warning alert, as shown in *Figure 15.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_15_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.5: The alert component with a dismiss button'
  prefs: []
  type: TYPE_NORMAL
- en: Click the close button to dismiss the warning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a Blazor data component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a component that will list, create, and edit
    employees in the Northwind database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build it over several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a Blazor component that renders the name of an employee, set as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it work as a routable page as well as a component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and call an ASP.NET Core Minimal APIs web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the web service in the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the new component to the existing Blazor project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, in the `Components\Pages` folder, add a new
    file named `Employees.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add statements to output a heading for the `Employees` component and define
    a code block, defining a property to store the name of a country, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Home.razor`, after the welcome message,
    instantiate the `Employees` component twice: once setting `USA` as the `Country`
    parameter, and once without setting the country, as shown highlighted in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start Chrome, navigate to `https://localhost:5151/`, and note the `Employees`
    components, as shown in *Figure 15.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_15_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.6: The Employees component, with the Country parameter set to USA
    and without parameters set'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the component a routable page component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple to turn this component into a routable page component with a route
    parameter for the country:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Components\Pages` folder, in the `Home.razor` component, remove the
    two `<Employee>` elements because we will now use them as pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in the `Employees.razor` component, add a
    statement at the top of the file to register `/employees` as its route, with an
    optional country route parameter, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, add list item elements
    after **Products** to navigate to show employees worldwide and in the USA or UK,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5151/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left navigation menu, click **Employees in USA**. Note that the country
    name is correctly passed to the page component and that the component uses the
    same shared layout as the other page components, like `Home.razor`. Also note
    the URL: `https://localhost:5151/employees/USA`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting entities into a component by building a web service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have seen the minimum implementation of an entity component, we
    can add the functionality to get entities from the server. In this case, we will
    use the Northwind database context to get employees from the database and expose
    it as an ASP.NET Core Minimal APIs web service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a project to the `Chapter15` solution,
    as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web API** / web`api`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter15`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.MinimalApi.Service`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication type**: None'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable OpenAPI support**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use controllers**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a project reference to the Northwind database context project for SQL Server
    that you created in *Chapter 3*, *Building Entity Models for SQL Server Using
    EF Core*, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The path cannot have a line break. If you did not complete the task of creating
    the class libraries in *Chapter 3*, then download the solution projects from the
    GitHub repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the project file, change invariant globalization to `false`, and treat warnings
    as errors, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the command prompt or terminal, build the `Northwind.MinimalApi.Service`
    project to make sure the entity model class library projects outside the current
    solution are properly compiled, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Properties` folder, in `launchSettings.json`, modify the `applicationUrl`
    of the profile named `https` to use port `5153` and `http` to use port `5154`,
    as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, import namespaces to work with Minimal APIs attributes, registering
    the Northwind database context extension method, and serialize JSON, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, at the end of the section to configure services, before the
    call to `Build`, add a statement to configure the Northwind database context and
    the registered dependency service for JSON options, setting its reference handler
    to preserve references, so that the reference between an employee and their manager
    does not cause a runtime exception due to circular references, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Be careful to configure `Microsoft.AspNetCore.Http.Json.JsonOptions` and not
    `Microsoft.AspNetCore.Mvc.JsonOptions`! I have created an alias to make this explicit,
    since we need to import the `Microsoft.AspNetCore.Mvc` namespace of other types.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, before the call to the `app.Run()` method, add statements
    to define some endpoints to `GET` and `POST` employees, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Optionally, delete the statements to set up the `weather` endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Due to the `{id:int}` constraint, a `GET` request to a path like `api/employees/3`
    will map to the `GetEmployeesById` endpoint, and a `GET` request to a path like
    `api/employess/USA` will map to the `GetEmployeesByCountry` endpoint. When `POST`-ing
    to the `api/employees` endpoint, the response includes a URL to the newly created
    employee with its database-assigned ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Getting entities into a component by calling the web service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we can add the functionality to the entity component to call the web service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor` project, in its project file, add a package reference
    for QuickGrid, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace to work with HTTP headers, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Blazor` project, in `Program.cs`, before the call to the
    `builder.Build()`, add statements to configure an HTTP client factory to call
    the web service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components` folder, in `_Imports.razor`, import the namespaces to work
    with QuickGrid and serialize JSON, ensuring that the Blazor components we build
    do not need to import the namespaces individually, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Employees.razor`, add statements to inject
    the HTTP client factory, and then use it to output a grid of either all employees
    or employees in the specific country, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Although the web service has an endpoint that allows you to return only employees
    in a specified country, later we will add caching for employees, so in this implementation
    we will request all employees and use client-side filtering for the bound data
    grid.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your database server is not running, (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.MinimalApi.Service` project, using its `https` profile
    without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome, and navigate to `https://localhost:5151/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left navigation menu, click **Employees in USA**, and note that the
    grid of employees loads from the web service and renders in the web page, as shown
    in *Figure 15.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_15_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.7: The grid of employees in the USA'
  prefs: []
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Employees in UK**, and note that the grid
    of employees is filtered to only show employees in the UK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the benefit of the new Blazor Full Stack hosting model in .NET 8 compared
    to the legacy hosting models like Blazor Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does Blazor WebAssembly support all features of the latest .NET APIs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the file extension for Blazor components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you set the default layout for all Blazor page components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you register a route for a Blazor page component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When would you set the `Match` property of a `<NavLink>` component to `NavLinkMatch.All`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have imported a custom namespace in the `_Imports.razor` file, but when
    you try to use a class in that namespace in a code-behind file for the Blazor
    component, the class is not found. Why? How can you fix the issue?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What must you do to a property in a component class to have it set to a query
    string parameter automatically?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is QuickGrid?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can a Blazor component access browser features like local storage?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 15.2 – Practice building Blazor components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Blazor component named `Carousel` that wraps the Bootstrap classes
    to work with carousels as a component, and then use it to show the eight categories
    in the Northwind database, including images.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn about the Bootstrap carousel at the following link: [https://getbootstrap.com/docs/5.3/components/carousel/](https://getbootstrap.com/docs/5.3/components/carousel/).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.3 – Practice building an IndexedDB interop service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browser local and session storage its okay for storing small amounts of data,
    but if you need a more robust and capable storage in the browser, then you can
    use the IndexedDB API.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Blazor service named `IndexedDbService`, with a JavaScript module for
    interop, with the IndexedDB API, and then use it to cache the employees.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the methods of the `window.indexedDB` object at the
    following link: [https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.4 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-15---building-web-components-using-blazor](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-15---building-web-components-using-blazor)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.5 – Explore Blazor WebAssembly topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To read more about topics related specifically to Blazor WebAssembly projects,
    I have written an online-only section, found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-webassembly.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-webassembly.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.6 – Explore Progressive Web Apps with Blazor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To read more about topics related specifically to Blazor PWA support, I have
    written an online-only section, found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-pwa.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-pwa.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 15.7 – Leveraging Open Source Blazor Component Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn how to use some common Blazor open-source components, I have written
    an online-only section, found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: About some important concepts surrounding Blazor, like hosting models, components,
    routing, and how to pass parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build Blazor components with settable parameters, child content, and
    custom events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build Blazor components that get data from a web service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build cross-platform apps for mobile
    and desktop devices, using .NET MAUI.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/apps_and_services_dotnet8](https://packt.link/apps_and_services_dotnet8)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code3048220001028652625.png)'
  prefs: []
  type: TYPE_IMG
