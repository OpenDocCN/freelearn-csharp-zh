- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Communicating Technical Debt
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沟通技术债务
- en: Most developers have worked in environments where they are unable to pay down
    technical debt, not due to the technical difficulty of the task, but because of
    organizational priorities, fears, urgent deadlines, and a lack of clear understanding
    of the full impact of technical debt on their software.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者都曾在无法偿还技术债务的环境中工作过，这不是因为任务的难度，而是因为组织优先级、恐惧、紧急截止日期以及对技术债务对其软件的全面影响的缺乏清晰理解。
- en: In this chapter, we’ll explore some of these factors that can prevent you and
    your team from resolving technical debt and introduce some ways of helping the
    organization understand and value the refactoring process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些可能阻止你和你的团队解决技术债务的因素，并介绍一些帮助组织理解和重视重构过程的方法。
- en: 'We’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主要主题：
- en: Overcoming barriers to refactoring
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克服重构的障碍
- en: Communicating technical debt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沟通技术债务
- en: Prioritizing technical debt
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先考虑技术债务
- en: Getting organizational buy-in
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得组织支持
- en: Overcoming barriers to refactoring
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克服重构的障碍
- en: When I speak with developers in the technical community, almost everyone has
    stories of being told that they were not allowed to spend time refactoring their
    code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我与技术社区的开发者交谈时，几乎每个人都有一段故事，讲述他们被告知不允许花时间重构他们的代码。
- en: Sometimes this mandate came from upper management and sometimes from product
    management or someone involved in the agile process. However, just as often, the
    directive would come from engineering leadership such as a team lead or engineering
    manager.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有时这项命令来自高层管理，有时来自产品管理或参与敏捷流程的人。然而，同样经常的是，指示来自工程领导，如团队领导或工程经理。
- en: 'The reasons for this can vary by the organization and project you’re working
    on, but some common reasons include the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况的原因可能因组织和你正在工作的项目而异，但一些常见的原因包括以下内容：
- en: There’s an urgent deadline and the team must focus on meeting it
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个紧急截止日期，团队必须专注于实现它
- en: Refactoring the code isn’t perceived to provide any business value
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构代码被认为不会提供任何商业价值
- en: The change would be to a risky area of the application with a lot of technical
    debt and there’s a risk of introducing bugs
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更将涉及应用程序中技术债务很高的风险区域，存在引入错误的风险
- en: Developers are told “Don’t worry about the quality of the code; this is just
    a prototype and won’t go into production” (it usually will)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者被告知“不要担心代码的质量；这只是一个原型，不会投入生产”（通常会的）
- en: The team is assured “Don’t worry about the quality of the code; we’re going
    to completely rewrite this application” (you usually won’t)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队得到保证“不要担心代码的质量；我们将完全重写这个应用程序”（你通常不会）
- en: Let’s talk about some of these objections.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些这些反对意见。
- en: Urgent deadlines
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 紧急截止日期
- en: The “we’re on a deadline” objection is a very common one for many teams. Sometimes,
    teams are truly on a critical deadline that can’t be missed. During these times,
    it can often be “all hands on deck,” with people working in high-stress environments
    and typically working late hours as well. When this is the case, spending time
    to address technical debt can be disruptive to the team and its chances of meeting
    the deadline.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “我们面临截止日期”的反对意见是许多团队非常常见的一个。有时，团队确实面临一个不能错过的关键截止日期。在这些时候，常常是“全员出动”，人们在高压环境下工作，通常还要加班。在这种情况下，花时间解决技术债务可能会对团队及其按时完成任务的机会造成干扰。
- en: In other words, *sometimes, this objection is a legitimate one that makes sense
    for the business during a specific and limited period* *of time*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，*有时，这种反对意见是合理的，在特定和有限的时间内对业务是有意义的*。
- en: However, these high-urgency time periods cause technical debt to accumulate
    at a very high rate since developers aren’t given the time to do things the right
    way. While a team may be able to achieve amazing things in a short period of time,
    these things are rarely accomplished in a way that results in maintainable code
    that will stand the test of time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些高度紧急的时间段会导致技术债务以非常高的速度积累，因为开发者没有时间以正确的方式做事。虽然团队可能在短时间内完成一些惊人的事情，但这些事情很少以能够经受时间考验的、可维护的代码的方式完成。
- en: Additionally, many organizations flow from urgent deadline to urgent deadline,
    causing long stretches of time where the team accumulates technical debt at a
    staggering rate while not being able to pay it down.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，许多组织从紧急截止日期到紧急截止日期，导致团队在无法偿还的情况下以惊人的速度积累技术债务。
- en: Sometimes deadlines cannot be altered or avoided, such as deadlines for the
    end of a fiscal year or a trade show or other conference. It can also be strategically
    beneficial to accumulate technical debt in the short term in return for meeting
    key business objectives that need to happen before a specific date.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，截止日期无法改变或避免，例如财政年度结束、交易会或其他会议的截止日期。为了在特定日期之前完成关键的商业目标，短期内积累技术债务也可能具有战略上的好处。
- en: However, it is your responsibility as a software engineer or engineering leader
    to clearly, succinctly, and regularly communicate technical debt and its impact
    to management. Once management adequately understands the obstacle, you must then
    work with them on long-term remediation steps and scheduling of the work needed
    for that effort.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，作为软件工程师或工程领导者，你有责任清晰、简洁、定期地向管理层沟通技术债务及其影响。一旦管理层充分理解了障碍，你必须与他们合作，制定长期补救措施和工作安排。
- en: We’ll talk more about this remediation process later in this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面更详细地讨论这个补救过程。
- en: “Don’t touch high-risk code”
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “不要触碰高风险代码”
- en: The objection that certain portions of code are too brittle to touch more than
    needed, so we shouldn’t improve them, is a laughable one when you think about
    it. After all, if code has decayed to the point where you’re afraid to even try
    to improve it, the need for refactoring is likely one that has been postponed
    for some time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想到某些代码部分过于脆弱，以至于不需要触碰时，这种反对意见是可笑的。毕竟，如果代码已经退化到连尝试改进都感到害怕的地步，那么重构的需求可能已经被推迟了一段时间。
- en: While this code is dangerous to touch, not refactoring it could lead to disastrous
    results when the team is finally forced to make a change to it. Let’s examine
    the argument against refactoring this code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这段代码触碰起来很危险，但不重构它，当团队最终被迫对其进行更改时，可能会导致灾难性的后果。让我们来分析一下反对重构这段代码的论点。
- en: 'The core concern in this case is often a combination of the following fears:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，核心担忧通常是以下恐惧的组合：
- en: Touching this code is likely to introduce bugs
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触碰这段代码很可能会引入错误
- en: We don’t understand how this code *should* work
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不明白这段代码*应该如何*工作
- en: There are no tests that would catch defects that might be introduced
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何测试能够捕捉到可能引入的缺陷
- en: I find that this objection often occurs after key people leave a team and nobody
    else has any knowledge of a complex area that those individuals maintained. The
    code in question usually has little to no documentation and very few unit tests,
    if any are present at all.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现，这种反对意见通常发生在关键人物离开团队，而没有人了解那些个人维护的复杂领域之后。相关的代码通常几乎没有文档，单元测试也非常少，如果有的话。
- en: These concerns don’t mean you can’t successfully improve or replace the code
    in question. In fact, some of the strategies we talked about in *Part 2* of this
    book around testing code can significantly help with the fears behind this objection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些担忧并不意味着你不能成功改进或替换相关的代码。事实上，我们在本书*第2部分*中讨论的一些关于测试代码的策略，可以显著帮助解决这种反对意见背后的恐惧。
- en: First, you can write unit tests around the code you’re changing before you make
    any changes. Some of the advanced testing tools we explored in [*Chapter 9*](B21324_09.xhtml#_idTextAnchor189)
    such as Snapper and Scientist .NET can help with this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在做出任何更改之前，你可以围绕你要更改的代码编写单元测试。我们曾在[*第9章*](B21324_09.xhtml#_idTextAnchor189)中探讨的一些高级测试工具，如Snapper和Scientist
    .NET，可以帮助你完成这项工作。
- en: Deploying software in phased rollouts or with the option of rolling back can
    also help alleviate some fears, as we’ll see in [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*,
    Agile Refactoring* when we talk about things such as feature flags and blue/green
    deployments.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以分阶段推出或提供回滚选项的方式部署软件也可以帮助缓解一些担忧，正如我们在[*第17章*](B21324_17.xhtml#_idTextAnchor354)*敏捷重构*中将要看到的，当我们讨论诸如功能标志和蓝绿部署等内容时。
- en: “This code is going away, don’t spend time on it”
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “这段代码即将被废弃，不要在上面浪费时间”
- en: The objection that specific code is temporary and you shouldn’t worry about
    its quality typically occurs either at the *beginning* of software projects, during
    prototyping phases, or at the *end* of software projects, when you’ve determined
    whether you must replace or retire the entire application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在软件项目的*开始*、原型阶段，或者在确定是否必须替换或退役整个应用程序的*结束*阶段，会提出特定的代码是临时的，你不必担心其质量的反对意见。
- en: This often occurs when a team wants to test out a concept by building a quick
    “throwaway” prototype that can explore a concept or prove that a course of action
    is viable.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常发生在团队想要通过构建一个快速的“废弃”原型来测试一个概念，这个原型可以探索一个概念或证明一个行动方案是可行的。
- en: Unfortunately, many “throwaway” prototypes survive to become the foundation
    of a future application, despite being built for speed in proving a concept and
    having been designed intentionally to not worry about performance, security, or
    reliability.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，许多“废弃”原型幸存下来，成为未来应用程序的基础，尽管它们是为了快速证明一个概念而构建的，并且有意设计成不必担心性能、安全或可靠性。
- en: 'A good prototype can get people so excited about the project that the following
    may occur:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的原型可以让人对项目如此兴奋，以至于以下情况可能发生：
- en: They forget they’re not dealing with “real” software and that the prototype
    was intended to be a temporary “throwaway”
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们忘记了他们处理的不“是真实”的软件，原型只是为了临时“废弃”。
- en: They view the functionality provided in the prototype as already complete
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们认为原型中提供的功能已经完成。
- en: The project gets an urgent deadline
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目有一个紧急的截止日期
- en: While there are certainly valid arguments that promoting a throwaway prototype
    to a real application is a symptom of mismanagement, let’s talk about productive
    things that members of the development team can do about this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然确实有合理的论点认为将废弃的原型提升为真实应用程序是管理不善的症状，但让我们谈谈开发团队成员可以做的关于这件事的有益事情。
- en: 'First, understand that your “throwaway” prototypes have a good chance of being
    viewed as working pieces of software. Some teams use rough styling or sketch-style
    user interfaces, such as the one in *Figure 15**.1*, to help others remember the
    application is just a prototype:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，了解你的“废弃”原型有很大机会被视为可以工作的软件。一些团队使用粗略的样式或草图风格的用户界面，例如*图15.1*，来帮助其他人记住应用程序只是一个原型：
- en: '![Figure 15.1 – A sample user interface wireframe](img/B21324_15_1.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – 一个用户界面线框图](img/B21324_15_1.jpg)'
- en: Figure 15.1 – A sample user interface wireframe
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – 一个用户界面线框图
- en: Second, you can treat all code as production code deserving of refactoring,
    tests, and documentation, reducing your prototyping speed accordingly and somewhat
    defeating the idea of putting together a quick prototype.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，你可以将所有代码视为需要重构、测试和文档的生产代码，相应地降低原型设计速度，这在一定程度上违背了快速构建原型的想法。
- en: Third, in the event that a throwaway prototype is promoted to an operational
    piece of software, the first pieces of work should be around reworking the prototype
    as needed to serve as the basis for the application’s future.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，如果废弃的原型被提升为可操作的软件，首先的工作应该是根据需要重构原型，使其成为应用程序未来发展的基础。
- en: End-of-life applications
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命终结的应用程序
- en: The other time that code is viewed as non-permanent is when the application
    you’re developing is either at the end of its lifespan and about to be retired,
    or when people decide that the current level of technical debt requires a complete
    rewrite.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个代码被视为非永久性的情况是，你正在开发的应用程序要么是其生命周期的结束，即将退役，或者人们决定当前的技术债务需要完全重写。
- en: In the case when applications truly are end-of-life and will not be maintained
    for much longer, the technical debt may not be a critical problem – assuming the
    application actually does go offline in the near future. In this case, the team
    should know roughly when the application will go offline and this date should
    be confirmed regularly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在真正是生命周期的结束，并且不会维护很长时间的应用程序的情况下，技术债务可能不是一个关键问题——假设应用程序实际上在不久的将来会下线。在这种情况下，团队应该大致知道应用程序何时会下线，并且这个日期应该定期确认。
- en: Tip
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is important to check in regularly with management on the end-of-life status
    of the application. If the deactivation date is postponed or the decision to retire
    the application entirely seems less sure, you can change your posture to be more
    aggressive in your refactoring efforts.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 定期与管理层检查应用程序的停用状态非常重要。如果停用日期被推迟或完全退役应用程序的决定似乎不太确定，你可以改变你的立场，在重构工作中更加积极。
- en: If you have an application that has so much technical debt that you believe
    it cannot be solved without a rewrite, be very careful. I have seen many teams
    assume that their application will be retired and replaced by a successor, only
    to see the rewrite get delayed farther and farther down the road or even canceled
    entirely.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个技术债务如此之高，以至于你认为没有重写就无法解决的应用程序，请务必小心。我见过许多团队认为他们的应用程序将被退役并由继任者取代，结果重写被推迟得越来越远，甚至完全取消。
- en: If you are depending on a rewrite to end your technical debt, I strongly recommend
    you have an estimated date for when that rewrite will start and when the old project
    will be retired. While software estimation can be challenging (as numerous books
    on the topic demonstrate), it is irresponsible to not improve your existing codebase
    without a believable timeline for the replacement coming online.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你依赖重写来结束你的技术债务，我强烈建议你有一个重写开始和旧项目退役的估计日期。虽然软件估计可能具有挑战性（正如许多关于该主题的书籍所证明的那样），但没有一个可信的替代方案上线的时间表而不改进现有的代码库是不负责任的。
- en: I have seen dozens of software projects over the last 20 years as a software
    engineer. Over that time, I have only seen two projects get completely rewritten.
    One of these projects was due to a technical necessity since its technology would
    no longer function past a certain date and the other involved extraordinary efforts
    by a lead engineer who was frustrated by maintaining the old version of the application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去20年里，作为一名软件工程师，我见证了数十个软件项目。在这段时间里，我只看到两个项目被完全重写。其中一个项目是由于技术必要性，因为其技术将在某个日期后不再起作用，另一个项目涉及一位主要工程师的非凡努力，他因维护旧版本的应用程序而感到沮丧。
- en: You and your team will be better off if you assume that a complete rewrite will
    not happen and instead focus on paying down technical debt piece by piece.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和你的团队假设不会发生完全重写，而是专注于逐步偿还技术债务，你们会更好。
- en: We’ll talk more about strategies for gradually renewing and replacing applications
    in [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*,* *Agile Refactoring*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第17章*](B21324_17.xhtml#_idTextAnchor354)*，*《敏捷重构》*中更多地讨论逐步更新和替换应用程序的策略。
- en: “Just do the minimum required”
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “只做最基本的工作”
- en: Occasionally, you’ll hear something to the effect of “Why are you spending all
    this time refactoring or testing? Just do the work required to complete the task.”
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会听到类似这样的话：“你为什么花这么多时间重构或测试？只需完成完成任务所需的工作。”
- en: 'These statements can arise from a few different causes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些陈述可能由几个不同的原因引起：
- en: The project being behind schedule
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目进度落后
- en: A lack of trust in the development team due to past delays
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于过去的延误而对开发团队缺乏信任
- en: A lack of understanding of the importance of refactoring
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对重构重要性的缺乏理解
- en: Whenever I encounter this objection, I think of a camping analogy I’ve heard
    before.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我遇到这种反对意见时，我会想起我之前听到的一个露营类比。
- en: When you go camping, you are expected to leave the campsite as good as you found
    it or slightly better. At the campsite, you are expected to not leave your trash
    strewn about, even though it is faster to do so than to spend time cleaning up
    after yourself. This is sometimes called the **Boy** **Scout Rule**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你去露营时，人们期望你离开营地时，营地状况与你发现时一样好，甚至更好。在营地，你被期望不要随意丢弃垃圾，尽管这样做比花时间清理自己更快捷。这有时被称为**童子军规则**。
- en: Secondly, if you go camping and you find your campsite to be a mess, it is entirely
    rational to spend some time cleaning up the campsite instead of setting up your
    tent on top of a pile of garbage!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，如果你去露营发现你的营地很乱，花些时间清理营地而不是在垃圾堆上搭帐篷是完全合理的！
- en: Applying this analogy to development, when you go to make a change, you may
    need to modify some areas of your code that are not up to current standards, not
    tested, or in need of cleanup in general. It is not unreasonable for changes to
    a file to include fixes to other unrelated pieces of work.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个类比应用到开发中，当你去进行变更时，你可能需要修改一些不符合当前标准的代码区域，或者需要测试或总体上需要清理的区域。对文件进行变更时包括修复其他无关的工作内容是合理的。
- en: Let’s say you are working on a small set of changes that affect a number of
    places throughout your application. You discover that one of those places has
    a significant amount of technical debt and likely needs several days of cleanup
    work to meet current standards. In this case, the appropriate thing to do would
    be to implement the small change in that area and talk about the additional refactorings
    needed during your next stand-up meeting. Often, the team will create a new separate
    work item for that larger refactoring effort.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在对影响应用程序中多个地方的一小部分变更进行工作。你发现其中一个地方有相当多的技术债务，并且可能需要几天的时间来清理以满足当前标准。在这种情况下，适当的做法是在该区域实施小变更，并在下一次站立会议中讨论所需的额外重构。通常，团队会为这个更大的重构工作创建一个新的单独的工作项。
- en: Agile refactoring
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷重构
- en: We’ll talk more about tracking technical debt later in this chapter, and about
    refactoring in agile environments in [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*,*
    *Agile Refactoring*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面更详细地讨论跟踪技术债务，以及敏捷环境中的重构[*第17章*](B21324_17.xhtml#_idTextAnchor354)*，*敏捷重构*。
- en: While cleaning up code is important, try to keep the amount of cleanup work
    you’re doing proportional to the size of the work item you’re working on.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然清理代码很重要，但尽量保持你正在进行的清理工作与你要处理的工作项规模成比例。
- en: “Refactoring doesn’t provide business value”
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “重构不提供商业价值”
- en: One of the most dangerous objections to refactoring that I’ve encountered has
    been the assumption that refactoring doesn’t provide any value beyond the development
    team.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到的最危险的反对重构的论点之一就是假设重构对开发团队之外没有任何价值。
- en: That is to say that there is often an implicit assumption that developers only
    provide value to the organization when they add features or fix bugs. Under this
    mentality, things such as unit testing, refactoring, and documentation are all
    *waste activities* that developers do but do not provide meaningful value to the
    organization.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，通常有一个隐含的假设，即只有当开发者添加功能或修复错误时，他们才为组织提供价值。在这种心态下，诸如单元测试、重构和文档等事情都是开发者所做的*浪费活动*，但它们并没有为组织提供有意义的价值。
- en: This is a dangerous assumption because managers are usually rewarded for minimizing
    waste and maximizing the most value possible to the organization. When refactoring
    and testing are not valued by leadership, organizations trade technical debt accumulation
    for short-term boosts in things they value, such as new features being delivered.
    This results in long-term consequences as technical debt grows rampant, development
    slows to a crawl, and bugs are introduced with nearly every change.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个危险的假设，因为管理者通常因最小化浪费和最大化对组织可能的价值而获得奖励。当重构和测试不被领导层重视时，组织就会用短期内的提升（如交付新功能）来换取技术债务的积累。这会导致长期后果，因为技术债务会迅速蔓延，开发速度放缓，并且几乎每次变更都会引入错误。
- en: One reason for this devaluation of refactoring work is that new features are
    visible and often understandable to management, while technical debt is something
    they only hear about and cannot see.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 导致重构工作贬值的一个原因是新功能对管理层来说是可见的，并且通常是可以理解的，而技术债务是他们只听说但看不到的东西。
- en: Anything you as a developer or engineering leader can do to help management
    understand the scope and effects of technical debt will help resolve this objection.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者或工程领导者，你可以做任何事情来帮助管理层理解技术债务的范围和影响，这将有助于解决这个异议。
- en: In the next section, we’ll explore ways of helping improve the visibility of
    technical debt to non-developers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨帮助提高非开发者对技术债务可见性的方法。
- en: Communicating technical debt
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沟通技术债务
- en: Explaining **technical debt** to non-developers can be challenging. Even when
    management trusts the development team, it is difficult for managers to understand
    what engineers deal with or how technical debt slows the software engineering
    process and introduces tremendous quality risks whenever the application is changed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 向非开发者解释**技术债务**可能具有挑战性。即使管理层信任开发团队，经理们也难以理解工程师们处理的问题或技术债务如何减慢软件工程过程，并在应用程序更改时引入巨大的质量风险。
- en: Technical debt as risk
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术债务作为风险
- en: 'In the course of my career, I’ve learned that while management has trouble
    understanding technical debt, there’s something they have a much better understanding
    of: *risk*.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我了解到虽然管理层难以理解技术债务，但他们对某些事情的理解要好得多：*风险*。
- en: This may sound strange, but I’ve found the best way to help management understand
    technical debt is to present it in terms of risk management.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来很奇怪，但我发现帮助管理层理解技术债务的最佳方式是以风险管理术语来呈现它。
- en: Every aspect of technical debt in your system has both a **probability** and
    an **impact**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您系统中的每个技术债务方面都有**概率**和**影响**。
- en: The **probability** of a piece of technical debt is the likelihood that the
    piece of technical debt will impact the development team during development or
    when the application is running in production.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务的**概率**是指该部分技术债务在开发过程中或应用程序在生产环境中运行时影响开发团队的可能性。
- en: The **impact** is how much the technical debt will hurt things if it *does*
    impact the developers or deployed applications.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**影响**是指如果它确实影响了开发者或部署的应用程序，技术债务会对事物造成多大的伤害。'
- en: For example, code in a critical area with medium complexity that is lacking
    tests might have a low or medium probability of producing issues, but would have
    a critical impact if those issues arose. That is to say that the code isn’t currently
    causing issues, but we think there’s a medium probability that it may be changed
    in the future in such a way that introduces a bug we won’t catch due to the complexity
    of the system. If this does occur, we believe that the impact on end users will
    be severe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个具有中等复杂性的关键区域中的代码，如果缺乏测试，可能产生问题的概率较低或中等，但如果这些问题出现，将产生关键影响。也就是说，代码目前没有造成问题，但我们认为它将来可能会以某种方式更改，从而引入我们由于系统复杂性而无法捕获的漏洞。如果这种情况发生，我们相信对最终用户的影响将是严重的。
- en: When you can represent each risk in your codebase with an impact and probability,
    it allows management to start understanding the level of risk the current slate
    of technical debt represents.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当您可以用影响和概率来表示代码库中的每个风险时，这允许管理层开始理解当前技术债务所代表的风险水平。
- en: Creating a risk register
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建风险登记册
- en: These risk entries should be arranged into a spreadsheet or other series of
    tracked items (such as work items in the system) called a **risk register**. The
    risk register becomes a centralized place for management and development leaders
    to review the current risks present in software engineering projects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些风险条目应排列成电子表格或其他一系列跟踪项（如系统中的工作项），称为**风险登记册**。风险登记册成为管理者和开发领导者审查软件工程项目中当前风险的中心位置。
- en: 'Your risk register might benefit from including the following pieces of information:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您的风险登记册可能从包括以下信息中受益：
- en: '**ID** – A unique identifier for the risk'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID** – 风险的唯一标识符'
- en: '`FlightManager''s` `ScheduleFlight` method”'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlightManager` 的 `ScheduleFlight` 方法”'
- en: '**Status** – Whether the risk is open, in the process of being remediated,
    or closed'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态** – 风险是否处于开放状态、正在修复过程中或已关闭'
- en: '**Probability** – The probability that the risk affects future development
    or users of the system'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概率** – 风险影响未来开发或系统用户的可能性'
- en: '**Impact** – The severity of the impact of the risk if it materializes'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**影响** – 风险实现时的严重程度'
- en: '**Priority** – A priority for the risk based on its probability and impact'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级** – 根据风险的概率和影响确定的风险优先级'
- en: 'A sample risk register for Cloudy Skies Airlines would look like the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudy Skies Airlines 的一个示例风险登记册可能看起来如下：
- en: '![Figure 15.2 – A sample risk register](img/B21324_15_2.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – 一个示例风险登记册](img/B21324_15_2.jpg)'
- en: Figure 15.2 – A sample risk register
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – 一个示例风险登记册
- en: Your register doesn’t have to be limited to these columns. The person the risk
    is assigned to, the area or component the risk is in, and the estimated effort
    to resolve it are all fields you might want to consider adding, depending on your
    needs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你的登记册不必仅限于这些列。风险分配给的人员、风险所在的区域或组件以及解决它的估计工作量都是你可能想要考虑添加的字段，具体取决于你的需求。
- en: When delays or production issues inevitably occur, you can point to existing
    risks in the risk register. This should help management understand that the risks
    have materialized into **issues**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当延迟或生产问题不可避免地发生时，你可以指向风险登记册中现有的风险。这应该有助于管理层理解风险已经转化为**问题**。
- en: Risks versus issues
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 风险与问题
- en: In risk management terminology, a risk is something that may occur while an
    issue is a risk that has materialized by actually occurring.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在风险管理术语中，风险是可能在问题发生时出现的事情，而问题则是已经通过实际发生而显现出来的风险。
- en: This helps resist the temptation to blame the engineers involved in the change
    and instead helps focus the conversation on the risks present in the existing
    technical debt.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于抵制责怪参与变更的工程师的诱惑，并有助于将对话集中在现有技术债务中存在的风险上。
- en: By forming a shared risk register with management, you can actively involve
    them in the process of managing and resolving technical debt. This is an ongoing
    process involving regular risk review meetings, where the team must actively maintain
    the register as new risks are discovered or opinions on the potential impact or
    probability of existing risks change.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与管理层共同建立风险登记册，你可以让他们积极参与管理和技术债务的解决过程。这是一个持续的过程，包括定期的风险审查会议，团队必须积极维护登记册，以便在发现新的风险或对现有风险的可能影响或概率的看法发生变化时。
- en: In these risk review meetings, the group should review the current risk register
    and discuss any changes that have occurred since the previous month.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些风险审查会议中，小组应审查当前的风险登记册，并讨论自上个月以来发生的变化。
- en: Alternatives to a risk register
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风险登记册的替代方案
- en: I understand that not every developer, engineering leader, or even member of
    upper management feels comfortable working with a formal risk register.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解并非每个开发者、工程领导者甚至高级管理层成员都愿意使用正式的风险登记册。
- en: 'If you’d be more comfortable with a simpler process, you can achieve a similar
    amount of value by trying one of the following things:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢一个更简单的流程，你可以通过尝试以下任何一项来获得相似的价值：
- en: Having a simple bulleted list in a Word document – perhaps organized by major
    project or area
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Word文档中有一个简单的项目符号列表——可能按主要项目或区域组织
- en: Creating a new *technical risk* type of item in work item tracking software,
    such as **Jira** or **Azure DevOps**
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作项跟踪软件中创建一个新的*技术风险*类型的项目，例如**Jira**或**Azure DevOps**
- en: Having a regular newsletter that goes out to developers and business stakeholders
    with the “top 10 most wanted” pieces of technical debt
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期向开发者和业务利益相关者发送包含“最想得到的10项技术债务”的简报
- en: The format of the risk register isn’t the most important part of the process.
    The important part of the process is that your team is actively itemizing technical
    debt as it is detected and regularly reviewing it with management to involve them
    in the process of resolving it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 风险登记册的格式并不是过程最重要的部分。过程的重要部分是，你的团队在发现技术债务时积极列出，并定期与管理层审查，以让他们参与解决过程。
- en: Prioritizing technical debt
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优先考虑技术债务
- en: Tracking and communicating technical debt is a critical part of the process
    of paying it down. However, it’s just one step in the process.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪和沟通技术债务是偿还债务过程中的关键部分。然而，这只是过程中的一个步骤。
- en: While refactoring code as related code is modified can be a viable strategy
    for paying down technical debt, this approach isn’t suitable for tackling large
    pieces of technical debt or debt that is related to the overall design of the
    software.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当相关代码被修改时，重构代码作为偿还技术债务的策略可能是可行的，但这种方法不适用于解决较大的技术债务或与软件整体设计相关的债务。
- en: In [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*, Agile Refactoring*, we’ll
    talk more about managing these larger pieces of work in an agile environment,
    but for now, let’s look at how you determine which pieces of technical debt should
    be prioritized.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第17章*](B21324_17.xhtml#_idTextAnchor354)“敏捷重构”中，我们将更详细地讨论如何在敏捷环境中管理这些较大的工作部分，但就目前而言，让我们看看你是如何确定哪些技术债务应该优先考虑的。
- en: You want to prioritize addressing the items that are most likely to occur and
    those that will hurt the most if they do occur. In other words, if you have a
    high probability risk, you should prioritize that. Additionally, you should prioritize
    your high-impact pieces of technical debt.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该优先处理最有可能发生并且一旦发生会造成最大伤害的项目。换句话说，如果你有一个高概率的风险，你应该优先考虑它。此外，你还应该优先处理那些影响大的技术债务。
- en: Calculating risk priorities with a risk score
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用风险评分计算风险优先级
- en: I’ve seen some organizations create a **risk score** out of the impact and probability
    of each technical risk they track. This risk score is a math equation where the
    probability of occurrence of a piece of technical debt is written as a number
    from 0 to 1, with 1 being 100% certain to happen and 0 meaning it will never happen.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到一些组织根据他们跟踪的每个技术风险的影響和概率创建了一个**风险评分**。这个风险评分是一个数学方程，其中技术债务发生的概率用0到1之间的数字表示，1表示100%肯定会发生，0表示永远不会发生。
- en: 'This results in a formula where you can calculate the priority of a piece of
    technical debt by multiplying its probability by its impact. This formula is as
    follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一个公式，你可以通过将技术债务的概率乘以其影响来计算其优先级。这个公式如下：
- en: '[PRE0]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For example, a high-probability, low-impact piece of technical debt might have
    a 0.9 probability score and an impact of 3, resulting in a risk score of 2.7.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个高概率、低影响的技术债务项目可能有一个0.9的概率评分和3的影响评分，从而得到2.7的风险评分。
- en: Units and risk scores
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 单位和风险评分
- en: 2.7 what, exactly? Well, we’re not really measuring anything tangible unless
    you choose to represent impact in hours or dollars, so I refer to this number
    as simply the “risk score” representing the overall expected negative impact the
    business expects by having the technical debt item present. This is useful for
    comparing two risks to each other.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 2.7是什么意思？嗯，除非你选择用小时或美元来表示影响，否则我们实际上并没有测量任何有形的东西，所以我把这个数字简单地称为“风险评分”，代表业务预期由于技术债务项目存在而产生的整体预期负面影响。这对于比较两个风险是很有用的。
- en: Let’s look at a different scenario with a high-impact, low-probability tech
    debt item, scored at 0.15 probability and an impact of 21, resulting in a risk
    score of 3.15.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个具有高影响、低概率的技术债务项目的不同场景，其概率评分为0.15，影响评分为21，从而得到3.15的风险评分。
- en: Here, the organization typically would focus on the second item because its
    overall risk score of 3.15 is higher than the 2.7 risk score of the first item,
    meaning it represents a larger threat to the organization.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，组织通常会关注第二个项目，因为它的整体风险评分3.15高于第一个项目的2.7风险评分，这意味着它对组织的威胁更大。
- en: Further refinements to this approach might also factor in the estimated hours
    needed to resolve a piece of technical debt, so items that can be resolved faster
    can be prioritized over equivalent items that would take longer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对这种方法进行进一步的细化可能还会考虑解决一项技术债务所需估计的小时数，因此可以优先处理那些可以更快解决的项，而不是那些需要更长时间才能解决的等效项。
- en: The “gut feeling” approach
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “直觉”方法
- en: It can be hard to numerically quantify things with any precision and estimates
    can sometimes feel more like wishful thinking than scientifically accurate predictions.
    I do think there’s value in getting some rough numbers on risks, but typically,
    team members will have a deeper “gut feeling” about the magnitude of some items
    over others.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 用精确的数值来量化事物可能很困难，有时估计可能更像是一种愿望，而不是科学的预测。我确实认为对风险进行一些粗略的量化是有价值的，但通常，团队成员会对某些项目的规模相对于其他项目有更深的“直觉”。
- en: My stance is that numerical guides can be helpful, but your brain can point
    out other things that are important but hard to measure.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我的立场是，数值指南可能会有所帮助，但你的大脑可以指出其他重要但难以衡量的事情。
- en: Tip
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: My rule of thumb is that you should focus on fixing the things that scare you
    the most. If there’s an area of your code that keeps you up at night, it’s usually
    a good idea to start there.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我的经验法则是你应该专注于修复让你最害怕的事情。如果你的代码中有一个区域让你夜不能寐，那么通常从那里开始是一个好主意。
- en: This isn’t to say that you should stop all new development until technical debt
    is resolved (though sometimes this is needed in severe scenarios). I’m saying
    that when you get to pick what should be resolved, you should pick the area your
    team believes is the largest threat to the organization’s success. Once you’re
    done with the biggest problem, move on to the next one and then the next after
    that, while continuing to support the needs of the business.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说你应该停止所有新的开发直到技术债务得到解决（尽管在某些严重情况下这可能是必要的）。我的意思是，当你可以选择解决什么时，你应该选择你团队认为对组织成功构成最大威胁的领域。一旦你解决了最大的问题，继续解决下一个，然后是下一个，同时继续支持业务的需求。
- en: Getting organizational buy-in
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获得组织支持
- en: We’ve seen how we can track and prioritize technical debt, and we’ve seen how
    involving management in the process of tracking technical risk can help build
    trust and understanding, but let’s talk about scenarios where development leadership
    must “pitch” a major refactoring effort to management.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到我们可以如何跟踪和优先处理技术债务，我们也看到让管理层参与跟踪技术风险的过程可以帮助建立信任和理解，但让我们谈谈那些开发领导必须向管理层“推销”重大重构工作的场景。
- en: 'These conversations can be stressful and represent a critical turning point
    in software projects. In these high-stakes conversations, your goal is to communicate
    the following things succinctly and respectfully:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对话可能会很有压力，并且代表了软件项目中的一个关键转折点。在这些高风险的对话中，你的目标是简洁、尊重地传达以下内容：
- en: The problem facing the team and its impact if it is not resolved
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队面临的问题及其未解决的影响
- en: The proposed solution (or a set of proposed solutions to consider)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出的解决方案（或一系列供考虑的解决方案）
- en: The cost of the refactoring effort in terms of developer hours
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构工作在开发者时间上的成本
- en: The timetable of the refactoring effort
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构工作的进度表
- en: What you’d like management to do
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望管理层做什么
- en: Note that your goal here *isn’t* to get them to agree to what you are proposing.
    Your goal is to get them to understand the issue and work with you on determining
    when and how it should be resolved.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你的目标在这里*不是*让他们同意你提出的建议。你的目标是让他们理解问题，并与你一起确定何时以及如何解决它。
- en: When your focus is on getting your way at all costs, this can result in a loss
    of trust, growing hostilities between development and management, and a feeling
    that developers cannot think in terms of business needs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的焦点是无论如何都要达成自己的目标时，这可能会导致信任的丧失，开发和管理层之间敌意的增长，以及开发者无法从商业需求的角度思考的感觉。
- en: Instead, if you view your partners in management as having legitimate insights
    and value to add to the organization, the conversation can become something different
    – a partnership where engineering and management work together for both the long-term
    and short-term needs of the business.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果你认为管理层合作伙伴有合法的见解和可以为组织增加价值，对话可以变得不同——这是一个工程和管理层为了业务长期和短期需求而共同努力的伙伴关系。
- en: Setting up the conversation
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安排对话
- en: Before you can even have a conversation about the problem, you need to be able
    to effectively communicate the problem and the scope of its potential solutions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在你甚至可以就问题进行对话之前，你需要能够有效地传达问题及其潜在解决方案的范围。
- en: This will take some consideration and planning. You don’t need to have a detailed
    project plan in place for this, but you do need to think through the scope of
    the project, the pieces that will need to change, and the people who will need
    to be involved.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一些考虑和规划。你不需要为这个项目制定详细的项目计划，但你确实需要思考项目的范围、需要改变的部分以及需要参与的人。
- en: You’ll also need to consider your team’s current projects and what the people
    you’re looking to involve are currently working on, or slated to be working on
    soon.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要考虑你团队当前的项目以及你打算涉及的这些人目前正在做什么，或者即将做什么。
- en: Remember that for your organization to say “yes” to your refactoring effort,
    they’ll need to say “no” to something else for the duration of your refactoring
    effort.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，为了你的组织能够对你的重构工作说“是”，他们需要在重构工作期间对其他事情说“不”。
- en: Once you have a sufficient understanding of the scope of the problem and its
    solution, you should bring it to management. This can be done either as part of
    a regular check-in meeting between engineering leadership and management or as
    its own meeting.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对问题的范围及其解决方案有了足够的理解，你应该将其带给管理层。这可以是工程领导和管理层之间定期检查会议的一部分，或者作为单独的会议。
- en: How you approach the meeting invite will depend on the individual you’re approaching.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何处理会议邀请将取决于你要接触的人。
- en: Some leaders may be receptive to you stopping by their office or sending them
    a direct message and saying something to the effect of “I have some concerns about
    the project. Do you have 30 minutes sometime to talk about this in more detail?”
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一些领导者可能愿意你到他们的办公室或直接给他们发消息，说些类似于“我对项目有一些担忧。你有没有30分钟的时间可以详细谈谈这个问题？”的话。
- en: On the other hand, other leaders will want to have the conversation as soon
    as you broach the topic. For this reason, I recommend you prepare for the conversation
    and find a time when their calendar appears clear.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，其他领导者可能希望一提到话题就进行对话。因此，我建议你为对话做好准备，并找到一个他们日程上看起来空闲的时间。
- en: Anticipating questions and objections
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预测问题和反对意见
- en: As you present your concerns and options to management, you should keep in mind
    the types of questions or objections they might raise. Be prepared to drill into
    the technical details of the current problem as well as your proposed solutions.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向管理层展示你的担忧和选项时，你应该考虑到他们可能会提出的问题或反对意见。准备好深入探讨当前问题的技术细节以及你提出的解决方案。
- en: It’s also typical for management to want details on project timelines. This
    can include not only how long you expect the refactoring effort to take, but also
    *how long the project can wait to* *be started*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 管理层通常还希望了解项目的时间表细节。这不仅可以包括你预计重构工作需要多长时间，还可以包括*项目可以等待多长时间* *才开始*。
- en: 'Remember that most organizations have major projects tentatively scheduled
    for at least the next quarter. Taking on a refactoring effort typically requires
    rearranging current and planned work in other areas. As an example, look at *Figure
    15**.3* for a sample breakdown of major initiatives by quarter for the web, services,
    and integration teams:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，大多数组织都计划在至少下一个季度进行一些主要项目。进行重构工作通常需要重新安排其他领域的当前和计划中的工作。例如，查看*图15.3*，这是关于网络、服务和集成团队按季度划分的主要项目的样本分解：
- en: '![Figure 15.3 – A project roadmap broken down by team and quarter](img/B21324_15_3.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – 按团队和季度分解的项目路线图](img/B21324_15_3.jpg)'
- en: Figure 15.3 – A project roadmap broken down by team and quarter
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – 按团队和季度分解的项目路线图
- en: While the integration team may want to spend time in Q2 working on a piece of
    technical debt, doing so would risk the services team’s planned work on connecting
    to a new vendor and potentially delay the integration team’s own planned paid
    services work, both slated to begin in Q3.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然集成团队可能希望在第二季度花时间解决一些技术债务，但这样做可能会风险服务团队计划中的与新的供应商连接的工作，并可能延迟集成团队自己计划在第三季度开始的服务工作。
- en: Be honest about the urgency of the issues your team is facing. Sometimes the
    answer is that it can wait, but the longer it is delayed the greater the penalty
    the team faces. At other times, refactoring efforts are needed to resolve urgent
    and already pressing issues the team is encountering with the current system.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你团队面临的问题的紧迫性要诚实。有时答案是它可以等待，但延迟的时间越长，团队面临的惩罚就越大。在其他时候，重构工作可能需要解决团队在当前系统中遇到的紧迫和已经紧迫的问题。
- en: Additionally, keep in mind the background of the person you’re talking to and
    the people they talk to. If you’re talking to a very security-oriented person
    and you haven’t thought through the security ramifications of your change, that
    conversation is likely not going to go well.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还要考虑到你正在与之交谈的人的背景以及他们交谈的人。如果你正在和一个非常注重安全的人交谈，而你还没有考虑过你变更的安全影响，那么这次对话可能不会顺利。
- en: You don’t need to have an answer for every question you are asked, and it is
    acceptable to say “I don’t know; let me look into that and get back to you.”
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要对每个问题都有答案，说“我不知道；让我调查一下然后告诉你”是可以接受的。
- en: The bottom line is that changes to project schedules are serious matters and
    if you appear to have not taken the time to think about the most obvious concerns,
    it will not inspire confidence among management.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 核心问题是，项目进度的任何变动都是严肃的事情，如果你看起来没有花时间去思考最明显的问题，这不会在管理层中赢得信任。
- en: Different approaches for different leaders
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同的领导有不同的方法
- en: I’ve met a lot of different people in management and it’s amazing how different
    two skilled leaders can be from one another.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我在管理层遇到了很多不同的人，令人惊讶的是，两位有技能的领导者之间可以有多么不同。
- en: Some leaders are extremely analytical and incredibly data-driven, wanting to
    pore over reports and spreadsheets. Others are people-oriented and driven not
    as much by raw numbers as they are by *specific stories* of how something affects
    specific individuals.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一些领导者非常注重分析，并且非常以数据为导向，他们喜欢仔细研究报告和电子表格。其他人则更注重人际关系，他们不是那么受原始数字的影响，而是受*具体故事*的影响，这些故事说明了某件事如何影响特定个人。
- en: For leaders focused on the overall data, I usually present key metrics and highlight
    interesting findings. I often provide all relevant data to them for further analysis,
    either preemptively or upon request.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于专注于整体数据的领导者，我通常会展示关键指标并突出有趣的发现。我经常提供所有相关数据供他们进一步分析，无论是主动提供还是应要求提供。
- en: An example metric might be that we spent 15 hours over the last 3 sprints dealing
    with this problem, or that 15% of the bugs from the last quarter could be traced
    back to this area.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的指标可能是我们在过去3个冲刺中花了15个小时来处理这个问题，或者上季度的15%的bug可以追溯到这个区域。
- en: As far as sharing specific stories goes, I usually come prepared with two or
    three examples of how a problem impacts developers, end users, or other relevant
    stakeholders. This might be something such as “Last sprint, Priya tried to work
    on a new feature we thought would only take a few hours, but because of how this
    is architected, it actually took her 3 days,” or “Garret is a very competent developer,
    but he tried to modify this area of code and it wound up causing this critical
    production bug due to the code’s lack of maintainability.”
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在分享具体故事方面，我通常会准备两三个例子来说明问题如何影响开发者、最终用户或其他相关利益相关者。这可能是“上一次冲刺，Priya试图开发我们认为只需几个小时的新功能，但由于这种架构方式，实际上她花了3天时间”，或者“Garret是一位非常称职的开发者，但他试图修改这个代码区域，结果由于代码缺乏可维护性，最终导致了这个关键的生产错误”。
- en: An approach that works well with one individual may have very little impact
    on a different person. As a result, I find it best to have a few interesting metrics
    and a few relevant scenarios whenever I have these critical conversations on major
    refactoring efforts.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一种对某个人有效的方法可能对另一个人影响甚微。因此，我发现，在就重大重构努力进行这些关键对话时，准备一些有趣的指标和一些相关的场景是最好的。
- en: The importance of communication
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 沟通的重要性
- en: One thing I hope you’ve picked up on in this chapter is that while you want
    to resolve technical debt, your goal is the short-term and long-term success of
    the organization.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你在本章中学到的一点是，虽然你想要解决技术债务，但你的目标是组织的短期和长期成功。
- en: This means that any conversation about technical debt should be a two-way conversation
    where both parties listen to each other and can have their voices heard.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着关于技术债务的任何对话都应该是双向对话，双方都能倾听对方并让自己的声音被听到。
- en: Sometimes, the legitimate short-term needs of a business are to ship something
    as fast as possible or to meet a deadline with an external partner or agency.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，企业合法的短期需求是尽可能快地交付产品或与外部合作伙伴或机构达成截止日期。
- en: As an engineering leader, your goal is to ensure management understands the
    impact, urgency, and risk that technical debt represents and the importance of
    both small and large refactoring efforts. However, your focus is typically on
    the code, while management’s focus is centered on strategic initiatives or even
    simply keeping the business afloat and the lights on. Both roles and their perspectives
    are critically important to a healthy organization.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名工程领导者，你的目标是确保管理层理解技术债务所代表的影响、紧迫性和风险，以及小型和大型重构努力的重要性。然而，你的关注点通常集中在代码上，而管理层的关注点则集中在战略举措上，甚至仅仅是维持业务的运营和保持灯亮。这两个角色及其视角对于一个健康组织来说都至关重要。
- en: At the end of the day, what you’re really after is open and honest communication
    between engineering and management where management can appreciate the risk and
    impact of technical debt and engineering can understand the pressures facing the
    organization.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你真正追求的是工程和管理层之间开放而诚实的沟通，管理层能够欣赏技术债务的风险和影响，而工程团队能够理解组织面临的压力。
- en: This communication starts with trust and respecting the contributions that management
    brings to the table in terms of steering the overall organization toward its goals
    and balancing priorities and needs that often compete with one another.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这份沟通从信任开始，尊重管理层在引导整个组织朝着目标前进、平衡相互竞争的优先事项和需求方面做出的贡献。
- en: Case study – Cloudy Skies Airlines
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究 – Cloudy Skies Airlines
- en: As we close the chapter, let’s look at our case study from Cloudy Skies Airlines.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束这一章之前，让我们看看我们从Cloudy Skies Airlines的案例研究中得出的结论。
- en: Brian, a lead developer, has been investigating a growing number of problems
    with the reservation and payment processing part of the application.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 主开发人员布莱恩一直在调查应用预订和支付处理部分日益增多的问题。
- en: These issues, initially thought to be isolated, seem to occur during peak usage
    times when many customers are trying to book flights or modify their existing
    flight reservations.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题最初被认为是孤立的，但似乎在高峰使用时段发生，当时许多客户正在尝试预订航班或修改现有的航班预订。
- en: After investigating, Brian and his team discover that the problems are related
    to the current design and architecture of the system. While the system could handle
    the old number of users, it is simply not able to adequately scale to handle peak
    workloads given its current inefficiencies.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 经过调查，布莱恩和他的团队发现这些问题与系统的当前设计和架构有关。虽然系统可以处理旧的用户数量，但它由于当前的低效率，根本无法适当地扩展以处理高峰工作量。
- en: 'Ordinarily, such a system could be scaled out to have multiple servers running
    in parallel with a load balancer distributing traffic between them (see *Figure
    15**.4*):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这样的系统可以扩展到有多个服务器并行运行，负载均衡器在它们之间分配流量（参见*图15.4*）：
- en: '![Figure 15.4 – A load balancer distributing requests to different application
    servers](img/B21324_15_4.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4 – 负载均衡器将请求分配到不同的应用服务器](img/B21324_15_4.jpg)'
- en: Figure 15.4 – A load balancer distributing requests to different application
    servers
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4 – 负载均衡器将请求分配到不同的应用服务器
- en: However, the system was not designed to support multiple copies of the application
    running at once without significant rework.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，系统并未设计为在不进行大量重工作的情况下支持同时运行多个应用副本。
- en: While the team is able to make some short-term performance and stability improvements
    to resolve the current issues, they understand that as the business grows, these
    problems will just resurface – particularly in peak travel seasons.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然团队能够对短期性能和稳定性进行一些改进以解决当前问题，但他们明白，随着业务的增长，这些问题将再次浮现——尤其是在高峰旅行季节。
- en: After careful consideration, the team comes up with a plan that would allow
    the system to run multiple copies in parallel but would require a significant
    amount of rework.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 经过仔细考虑，团队制定了一个计划，允许系统并行运行多个副本，但需要进行大量的重工作。
- en: One of the engineers also suggests potentially moving from a model where the
    server does all the work and returns a successful response to the user to a model
    where the request is quickly validated and then put in a queue for processing.
    This approach would handle spikes in incoming requests but would require changes
    to how request processing currently works.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一位工程师还建议可能从服务器完成所有工作并向用户返回成功响应的模型，转变为快速验证请求并将其放入队列进行处理的模型。这种方法将处理传入请求的峰值，但需要改变当前请求处理的方式。
- en: Armed with these ideas and knowledge of the scope of the current problem and
    possible fixes, Brian schedules a meeting with Maddie, the Chief Technology Officer.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这些想法以及对当前问题范围和可能解决方案的知识，布莱恩安排了与首席技术官玛迪的会议。
- en: During the meeting, Brian lays out the performance problem, the recent steps
    the team has taken to restore service, and the likelihood that it will occur again
    as the business grows and peak seasons approach.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在会议期间，布莱恩概述了性能问题、团队为恢复服务所采取的最近步骤，以及随着业务增长和旺季临近，它再次发生的可能性。
- en: Once Brian is sure Maddie understands the basics of the problem, he gives an
    overview of the two possible remediation plans, as well as his personal recommendation
    to stick with the relatively simpler change of working to allow the application
    server to support multiple copies in parallel.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦布莱恩确信玛迪理解了问题的基本原理，他就概述了两种可能的补救计划，以及他个人建议坚持相对简单的更改，允许应用服务器并行支持多个副本。
- en: Maddie asks several technical questions about scalability, particularly around
    why the current system is unable to have multiple copies running at once. After
    Brian explains the problems that would cause, Maddie understands the reasoning
    and the need for remediation and the conversation shifts toward scheduling.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 玛迪就扩展性提出了几个技术问题，特别是关于为什么当前系统无法同时运行多个副本的原因。在布莱恩解释了可能导致这些问题之后，玛迪理解了推理和补救的需要，对话转向了安排会议。
- en: 'The next focus for the team was going to be integrating a newly acquired subsidiary
    airline into Cloudy Skies systems, as shown in *Figure 15**.5*:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 团队接下来的重点是整合一家新收购的子公司航空公司到Cloudy Skies系统中，如图*15.5*所示：
- en: '![Figure 15.5 – The planned schedule showing major projects by quarter and
    the current date](img/B21324_15_5.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图15.5 – 显示按季度划分的主要项目和当前日期的计划进度表](img/B21324_15_5.jpg)'
- en: Figure 15.5 – The planned schedule showing major projects by quarter and the
    current date
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5 – 显示按季度划分的主要项目和当前日期的计划进度表
- en: Upon reviewing the problem, Maddie and Brian both agree that having a long-term
    solution in place for the scalability problems is more important, particularly
    with some peak travel seasons approaching.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查问题后，Maddie和Brian都认为，在即将到来的高峰旅行季节，实施长期解决方案以解决可扩展性问题更为重要。
- en: Maddie brings other executives into the conversation on the specifics of the
    plan and Brian answers their questions, while the team begins planning the architectural
    changes needed and the technical details of how the application could be scaled
    out as needed to handle additional traffic loads.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Maddie将其他高管带入关于计划具体细节的讨论中，Brian回答了他们的问题，同时团队开始规划所需的架构变更和应用程序如何根据需要扩展以处理额外的流量负载的技术细节。
- en: 'After a short delay, the project is approved and the majority of Brian’s team
    is assigned to the effort, with the understanding that the previously planned
    work would begin later than originally scheduled to make room for the new scalability
    project, as shown in *Figure 15**.6*:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 经过短暂的延迟，项目得到了批准，Brian团队的大多数成员被分配到这项工作中，理解到之前计划的工作将比原定计划晚开始，以便为新可扩展性项目腾出空间，如图*15.6*所示：
- en: '![Figure 15.6 – The adjusted schedule with the scalability project added in
    the near future](img/B21324_15_6.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6 – 近期添加可扩展性项目的调整后的进度表](img/B21324_15_6.jpg)'
- en: Figure 15.6 – The adjusted schedule with the scalability project added in the
    near future
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6 – 近期添加可扩展性项目的调整后的进度表
- en: Brian and Maddie continue to check in on the progress of the work, and the scalability
    concerns are addressed before the peak travel times arrive.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Brian和Maddie继续检查工作的进展，并在高峰旅行时间到来之前解决了可扩展性问题。
- en: In the meantime, some team members are able to make progress in integrating
    the new subsidiary into the Cloudy Skies systems. As engineers finish their work
    on the scalability concerns, they transition over to that project, resulting in
    only a minor delay to that project’s initially planned delivery date.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，一些团队成员能够在新子公司集成到Cloudy Skies系统中取得进展。随着工程师完成对可扩展性问题的处理，他们转而投入到那个项目中，导致该项目最初计划交付日期只有轻微延迟。
- en: In the end, the business gets a more stable and scalable system as well as their
    planned integration of the new subsidiary, in addition to an improved communication
    channel between management and the software engineering team.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，业务得到了一个更稳定和可扩展的系统，以及他们计划中的新子公司集成，此外，管理层和软件工程团队之间的沟通渠道也得到了改善。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored common objections to refactoring code and paying
    down technical debt and some reasons and remedies for them.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了重构代码和偿还技术债务的常见反对意见以及一些原因和补救措施。
- en: We also talked about communicating technical debt to management, particularly
    the idea of technical debt being viewed as a risk to the organization’s systems
    and productivity. We also introduced the idea of using a risk register to track
    technical debt over time and improve the visibility of technical debt to non-developers.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了向管理层传达技术债务的问题，特别是将技术债务视为对组织系统和生产力的风险的观点。我们还介绍了使用风险登记册来跟踪技术债务随时间变化并提高非开发者对技术债务可见性的想法。
- en: We closed with a discussion about prioritizing technical debt, getting permission
    from management for larger refactoring projects, and the importance of trust,
    communication, and establishing a partnership with management in the remediation
    effort.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以讨论优先处理技术债务、从管理层获得对更大重构项目的许可，以及在修复工作中建立管理层信任、沟通和伙伴关系的重要性结束会议。
- en: In the next chapter, we’ll explore the value of code standards in terms of minimizing
    technical debt over time and how to choose an existing standard or build your
    own.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨代码标准在长期最小化技术债务的价值以及如何选择现有的标准或建立自己的标准。
- en: Questions
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What obstacles are you currently encountering in getting time to prioritize
    technical debt?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你目前在争取时间优先处理技术债务方面遇到了哪些障碍？
- en: If management understood the problems you’re dealing with, how could they help
    you with them in terms of time, resources, or organizational support?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果管理层理解了你正在处理的问题，他们如何在时间、资源或组织支持方面帮助你？
- en: What can you and your team do to build a collaborative relationship with management
    going forward?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你和你的团队可以采取哪些措施来建立与管理的协作关系？
- en: How well does management understand technical debt and its risks?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理层对技术债务及其风险的理解程度如何？
- en: Does it make sense for you to formally track technical debt as risk?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于你来说，正式跟踪技术债务作为风险是否有意义？
- en: Further reading
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more thoughts on technical debt as risk, communication with engineering
    leadership, and risk management in general at the following URLs:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网址找到更多关于将技术债务视为风险、与工程领导层沟通以及一般风险管理的技术债务思考：
- en: '*Technical Debt as* *Risk*: [https://killalldefects.com/2019/12/24/technical-debt-as-risks/](https://killalldefects.com/2019/12/24/technical-debt-as-risks/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将技术债务视为* *风险*：[https://killalldefects.com/2019/12/24/technical-debt-as-risks/](https://killalldefects.com/2019/12/24/technical-debt-as-risks/)'
- en: '*Escaping the black hole of technical* *debt*:[https://www.atlassian.com/agile/software-development/technical-debt](https://www.atlassian.com/agile/software-development/technical-debt)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逃离技术债务的黑洞*：[https://www.atlassian.com/agile/software-development/technical-debt](https://www.atlassian.com/agile/software-development/technical-debt)'
- en: '*How to use a technical debt* *register*: [https://blog.logrocket.com/product-management/how-to-use-technical-debt-register/](https://blog.logrocket.com/product-management/how-to-use-technical-debt-register/)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如何使用技术债务* *登记册*：[https://blog.logrocket.com/product-management/how-to-use-technical-debt-register/](https://blog.logrocket.com/product-management/how-to-use-technical-debt-register/)'
- en: '*Communicating with Management About Technical* *Debt*:[https://devops.com/communicating-with-management-about-technical-debt/](https://devops.com/communicating-with-management-about-technical-debt/)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与技术债务沟通管理*：[https://devops.com/communicating-with-management-about-technical-debt/](https://devops.com/communicating-with-management-about-technical-debt/)'
