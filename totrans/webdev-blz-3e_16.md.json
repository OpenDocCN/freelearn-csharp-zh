["```cs\n<div id=\"app\">\n    <svg class=\"loading-progress\">\n        <circle r=\"40%\" cx=\"50%\" cy=\"50%\" />\n        <circle r=\"40%\" cx=\"50%\" cy=\"50%\" />\n    </svg>\n    <div class=\"loading-progress-text\"></div>\n</div> \n```", "```cs\n.loading-progress circle:last-child {\n    stroke: #1b6ec2;\n    stroke-dasharray: calc(3.141 * var(--blazor-load-percentage, 0%) * 0.8), 500%;\n    transition: stroke-dasharray 0.05s ease-in-out;\n}\n.loading-progress-text:after {\n    content: var(--blazor-load-percentage-text, \"Loading\");\n} \n```", "```cs\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\nawait builder.Build().RunAsync(); \n```", "```cs\ndotnet workload install wasm-tools \n```", "```cs\n<PropertyGroup>\n  <RunAOTCompilation>true</RunAOTCompilation>\n</PropertyGroup> \n```", "```cs\n<PropertyGroup>\n  <WasmEnableSIMD>false</WasmEnableSIMD>\n</PropertyGroup> \n```", "```cs\n<ItemGroup>\n  <BlazorWebAssemblyLazyLoad Include=\"{ASSEMBLY NAME}.dll\" />\n</ItemGroup> \nLazyAssemblyLoader.\n```", "```cs\n@using Microsoft.AspNetCore.Components.Routing\n@using Microsoft.AspNetCore.Components.WebAssembly.Services\n@using Microsoft.Extensions.Logging\n@inject LazyAssemblyLoader AssemblyLoader\n@inject ILogger<App> Logger\n<Router AppAssembly=\"@typeof(App).Assembly\" \n    OnNavigateAsync=\"@OnNavigateAsync\">\n    ...\n</Router>\n@code {\n    private async Task OnNavigateAsync(NavigationContext args)\n    {\n        try\n           {\n               if (args.Path == \"{PATH}\")\n               {\n                   var assemblies = await AssemblyLoader.LoadAssembliesAsync(\n                       new[] { {LIST OF ASSEMBLIES} });\n               }\n           }\n           catch (Exception ex)\n           {\n               Logger.LogError(\"Error: {Message}\", ex.Message);\n           }\n    }\n} \n```", "```cs\n@using System.Reflection\n@using Microsoft.AspNetCore.Components.Routing\n@using Microsoft.AspNetCore.Components.WebAssembly.Services\n@using Microsoft.Extensions.Logging\n@inject LazyAssemblyLoader AssemblyLoader\n@inject ILogger<App> Logger\n<Router AppAssembly=\"@typeof(App).Assembly\" \n    AdditionalAssemblies=\"@lazyLoadedAssemblies\" \n    OnNavigateAsync=\"@OnNavigateAsync\">\n    ...\n</Router>\n@code {\n    private List<Assembly> lazyLoadedAssemblies = new();\n    private async Task OnNavigateAsync(NavigationContext args)\n    {\n        try\n           {\n               if (args.Path == \"{PATH}\")\n               {\n                   var assemblies = await AssemblyLoader.LoadAssembliesAsync(\n                       new[] { {LIST OF ASSEMBLIES} });\n                   lazyLoadedAssemblies.AddRange(assemblies);\n               }\n           }\n           catch (Exception ex)\n           {\n               Logger.LogError(\"Error: {Message}\", ex.Message);\n           }\n    }\n} \n\"/fetchdata\". The {LIST OF ASSEMBLIES}, which contains a list of assemblies we wish to load, can be \"sample.dll\".\n```", "```cs\nint fact(int n)\n{\n    if (n == 0) return 1;\n    return n * fact(n - 1);\n} \n```", "```cs\n<ItemGroup>\n    <NativeFileReference Include=\"Test.c\" />\n</ItemGroup> \n```", "```cs\n@page \"/\"\n@using System.Runtime.InteropServices\n<PageTitle>Native C</PageTitle>\n<h1>Native C Test</h1>\n<p>\n    @@fact(3) result: @fact(3)\n</p>\n@code {\n    [DllImport(\"Test\")]\n    static extern int fact(int n);\n} \n```", "```cs\n<SKCanvasView OnPaintSurface=\"@OnPaintSurface\" />\n@code {\n    private void OnPaintSurface(SKPaintSurfaceEventArgs e)\n    {\n        var canvas = e.Surface.Canvas;\n        canvas.Clear(SKColors.White);\n        using var paint = new SKPaint\n        {\n            Color = SKColors.Black,\n            IsAntialias = true,\n            TextSize = 24\n        };\n        canvas.DrawText(\"Raccoons are awesome!\", 0, 24, paint);\n    }\n} \n```", "```cs\n@inject PersistentComponentState ApplicationState\n@implements IDisposable \n```", "```cs\nprivate PersistingComponentStateSubscription _subscription; \n```", "```cs\n_subscription = ApplicationState.RegisterOnPersisting(PersistState); \n```", "```cs\nif (ApplicationState.TryTakeFromJson<WeatherForecast[]>(\"weatherdata\", out var stored))\n{\n    forecasts = stored;\n}\nelse\n{\n    await Task.Delay(500);\n    var startDate = DateOnly.FromDateTime(DateTime.Now);\n    var summaries = new[] { \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\" };\n    forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = startDate.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = summaries[Random.Shared.Next(summaries.Length)]\n        }).ToArray();\n} \n```", "```cs\nprivate Task PersistState()\n{\n    ApplicationState.PersistAsJson(\"weatherdata\", forecasts);\n    return Task.CompletedTask;\n}\npublic void Dispose()\n{\n    _subscription.Dispose();\n} \n```", "```cs\n<!--Blazor:{\"type\":\"server\",\"prerenderId\":\"d0b382c5fa7d4b65a8002157a8b6a1 a2\",\"key\":{\"locationHash\":\"F2AAEE86A5A9C5406A2EF4551C02A263059448AC:0\",\"formattedComponentKey\":\"\"},\"sequence\":0,\"descriptor\":\"CfDJ8EzYgDK6\\u002BdZLqM2gwGUPDtNbwNLH7VoJxc6/d6CZ4gHE0LtdIMqSoBfSh8OHGynUVW5DKNVBSG4cZBgETzOixExgSkzmqvPY7I58TMjl4XliAJ ae5d2fmVTS7\\u002ByDOooQOqVN41jgj\\u002BthTcmHEkBng1MukO5/28AsARyCKVXGxlw3cu9ohFo6b38BprF63EPjo7zQqNYRQT2k xkxn9TiFzTga//RyoyQKIwvEkb044SW\\u002Bj9tHP1bBt3B8rpE5EATAvbtKEu7yjwUFGb3xsDHvJ6jGAtQOKOXQhKoWM5pp8 z0RMKkxMfeyuQUubu7i48qPSPvvWCnoym79o64FsTlataWG9JeO8V1X9ihTQppyw/\njkc0RHp9Si49UgCVlEuPWMXTjVSVj7gBizQRc7eT0t2v30NwpBrYHvQS0t\\u002BgssPyT\\u002BTQWCfEcEc7iMboA/oCSqcAJRTWCcGbWroCIKchU1mdTJj48vAuMKKu5tw6Yqo61V\\u002BM4wTR7XJ1ffk0KCQ7lKCqNr2ffNRz1RxjbQX8oVU4s=\"}--> \n```"]