- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communicating Technical Debt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most developers have worked in environments where they are unable to pay down
    technical debt, not due to the technical difficulty of the task, but because of
    organizational priorities, fears, urgent deadlines, and a lack of clear understanding
    of the full impact of technical debt on their software.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore some of these factors that can prevent you and
    your team from resolving technical debt and introduce some ways of helping the
    organization understand and value the refactoring process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming barriers to refactoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating technical debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritizing technical debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting organizational buy-in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overcoming barriers to refactoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I speak with developers in the technical community, almost everyone has
    stories of being told that they were not allowed to spend time refactoring their
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes this mandate came from upper management and sometimes from product
    management or someone involved in the agile process. However, just as often, the
    directive would come from engineering leadership such as a team lead or engineering
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reasons for this can vary by the organization and project you’re working
    on, but some common reasons include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: There’s an urgent deadline and the team must focus on meeting it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring the code isn’t perceived to provide any business value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The change would be to a risky area of the application with a lot of technical
    debt and there’s a risk of introducing bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers are told “Don’t worry about the quality of the code; this is just
    a prototype and won’t go into production” (it usually will)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The team is assured “Don’t worry about the quality of the code; we’re going
    to completely rewrite this application” (you usually won’t)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s talk about some of these objections.
  prefs: []
  type: TYPE_NORMAL
- en: Urgent deadlines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “we’re on a deadline” objection is a very common one for many teams. Sometimes,
    teams are truly on a critical deadline that can’t be missed. During these times,
    it can often be “all hands on deck,” with people working in high-stress environments
    and typically working late hours as well. When this is the case, spending time
    to address technical debt can be disruptive to the team and its chances of meeting
    the deadline.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, *sometimes, this objection is a legitimate one that makes sense
    for the business during a specific and limited period* *of time*.
  prefs: []
  type: TYPE_NORMAL
- en: However, these high-urgency time periods cause technical debt to accumulate
    at a very high rate since developers aren’t given the time to do things the right
    way. While a team may be able to achieve amazing things in a short period of time,
    these things are rarely accomplished in a way that results in maintainable code
    that will stand the test of time.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, many organizations flow from urgent deadline to urgent deadline,
    causing long stretches of time where the team accumulates technical debt at a
    staggering rate while not being able to pay it down.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes deadlines cannot be altered or avoided, such as deadlines for the
    end of a fiscal year or a trade show or other conference. It can also be strategically
    beneficial to accumulate technical debt in the short term in return for meeting
    key business objectives that need to happen before a specific date.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is your responsibility as a software engineer or engineering leader
    to clearly, succinctly, and regularly communicate technical debt and its impact
    to management. Once management adequately understands the obstacle, you must then
    work with them on long-term remediation steps and scheduling of the work needed
    for that effort.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll talk more about this remediation process later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: “Don’t touch high-risk code”
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objection that certain portions of code are too brittle to touch more than
    needed, so we shouldn’t improve them, is a laughable one when you think about
    it. After all, if code has decayed to the point where you’re afraid to even try
    to improve it, the need for refactoring is likely one that has been postponed
    for some time.
  prefs: []
  type: TYPE_NORMAL
- en: While this code is dangerous to touch, not refactoring it could lead to disastrous
    results when the team is finally forced to make a change to it. Let’s examine
    the argument against refactoring this code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core concern in this case is often a combination of the following fears:'
  prefs: []
  type: TYPE_NORMAL
- en: Touching this code is likely to introduce bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We don’t understand how this code *should* work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no tests that would catch defects that might be introduced
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I find that this objection often occurs after key people leave a team and nobody
    else has any knowledge of a complex area that those individuals maintained. The
    code in question usually has little to no documentation and very few unit tests,
    if any are present at all.
  prefs: []
  type: TYPE_NORMAL
- en: These concerns don’t mean you can’t successfully improve or replace the code
    in question. In fact, some of the strategies we talked about in *Part 2* of this
    book around testing code can significantly help with the fears behind this objection.
  prefs: []
  type: TYPE_NORMAL
- en: First, you can write unit tests around the code you’re changing before you make
    any changes. Some of the advanced testing tools we explored in [*Chapter 9*](B21324_09.xhtml#_idTextAnchor189)
    such as Snapper and Scientist .NET can help with this.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying software in phased rollouts or with the option of rolling back can
    also help alleviate some fears, as we’ll see in [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*,
    Agile Refactoring* when we talk about things such as feature flags and blue/green
    deployments.
  prefs: []
  type: TYPE_NORMAL
- en: “This code is going away, don’t spend time on it”
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objection that specific code is temporary and you shouldn’t worry about
    its quality typically occurs either at the *beginning* of software projects, during
    prototyping phases, or at the *end* of software projects, when you’ve determined
    whether you must replace or retire the entire application.
  prefs: []
  type: TYPE_NORMAL
- en: This often occurs when a team wants to test out a concept by building a quick
    “throwaway” prototype that can explore a concept or prove that a course of action
    is viable.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, many “throwaway” prototypes survive to become the foundation
    of a future application, despite being built for speed in proving a concept and
    having been designed intentionally to not worry about performance, security, or
    reliability.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good prototype can get people so excited about the project that the following
    may occur:'
  prefs: []
  type: TYPE_NORMAL
- en: They forget they’re not dealing with “real” software and that the prototype
    was intended to be a temporary “throwaway”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They view the functionality provided in the prototype as already complete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project gets an urgent deadline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While there are certainly valid arguments that promoting a throwaway prototype
    to a real application is a symptom of mismanagement, let’s talk about productive
    things that members of the development team can do about this.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, understand that your “throwaway” prototypes have a good chance of being
    viewed as working pieces of software. Some teams use rough styling or sketch-style
    user interfaces, such as the one in *Figure 15**.1*, to help others remember the
    application is just a prototype:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – A sample user interface wireframe](img/B21324_15_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – A sample user interface wireframe
  prefs: []
  type: TYPE_NORMAL
- en: Second, you can treat all code as production code deserving of refactoring,
    tests, and documentation, reducing your prototyping speed accordingly and somewhat
    defeating the idea of putting together a quick prototype.
  prefs: []
  type: TYPE_NORMAL
- en: Third, in the event that a throwaway prototype is promoted to an operational
    piece of software, the first pieces of work should be around reworking the prototype
    as needed to serve as the basis for the application’s future.
  prefs: []
  type: TYPE_NORMAL
- en: End-of-life applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The other time that code is viewed as non-permanent is when the application
    you’re developing is either at the end of its lifespan and about to be retired,
    or when people decide that the current level of technical debt requires a complete
    rewrite.
  prefs: []
  type: TYPE_NORMAL
- en: In the case when applications truly are end-of-life and will not be maintained
    for much longer, the technical debt may not be a critical problem – assuming the
    application actually does go offline in the near future. In this case, the team
    should know roughly when the application will go offline and this date should
    be confirmed regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It is important to check in regularly with management on the end-of-life status
    of the application. If the deactivation date is postponed or the decision to retire
    the application entirely seems less sure, you can change your posture to be more
    aggressive in your refactoring efforts.
  prefs: []
  type: TYPE_NORMAL
- en: If you have an application that has so much technical debt that you believe
    it cannot be solved without a rewrite, be very careful. I have seen many teams
    assume that their application will be retired and replaced by a successor, only
    to see the rewrite get delayed farther and farther down the road or even canceled
    entirely.
  prefs: []
  type: TYPE_NORMAL
- en: If you are depending on a rewrite to end your technical debt, I strongly recommend
    you have an estimated date for when that rewrite will start and when the old project
    will be retired. While software estimation can be challenging (as numerous books
    on the topic demonstrate), it is irresponsible to not improve your existing codebase
    without a believable timeline for the replacement coming online.
  prefs: []
  type: TYPE_NORMAL
- en: I have seen dozens of software projects over the last 20 years as a software
    engineer. Over that time, I have only seen two projects get completely rewritten.
    One of these projects was due to a technical necessity since its technology would
    no longer function past a certain date and the other involved extraordinary efforts
    by a lead engineer who was frustrated by maintaining the old version of the application.
  prefs: []
  type: TYPE_NORMAL
- en: You and your team will be better off if you assume that a complete rewrite will
    not happen and instead focus on paying down technical debt piece by piece.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll talk more about strategies for gradually renewing and replacing applications
    in [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*,* *Agile Refactoring*.
  prefs: []
  type: TYPE_NORMAL
- en: “Just do the minimum required”
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Occasionally, you’ll hear something to the effect of “Why are you spending all
    this time refactoring or testing? Just do the work required to complete the task.”
  prefs: []
  type: TYPE_NORMAL
- en: 'These statements can arise from a few different causes:'
  prefs: []
  type: TYPE_NORMAL
- en: The project being behind schedule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of trust in the development team due to past delays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of understanding of the importance of refactoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever I encounter this objection, I think of a camping analogy I’ve heard
    before.
  prefs: []
  type: TYPE_NORMAL
- en: When you go camping, you are expected to leave the campsite as good as you found
    it or slightly better. At the campsite, you are expected to not leave your trash
    strewn about, even though it is faster to do so than to spend time cleaning up
    after yourself. This is sometimes called the **Boy** **Scout Rule**.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, if you go camping and you find your campsite to be a mess, it is entirely
    rational to spend some time cleaning up the campsite instead of setting up your
    tent on top of a pile of garbage!
  prefs: []
  type: TYPE_NORMAL
- en: Applying this analogy to development, when you go to make a change, you may
    need to modify some areas of your code that are not up to current standards, not
    tested, or in need of cleanup in general. It is not unreasonable for changes to
    a file to include fixes to other unrelated pieces of work.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you are working on a small set of changes that affect a number of
    places throughout your application. You discover that one of those places has
    a significant amount of technical debt and likely needs several days of cleanup
    work to meet current standards. In this case, the appropriate thing to do would
    be to implement the small change in that area and talk about the additional refactorings
    needed during your next stand-up meeting. Often, the team will create a new separate
    work item for that larger refactoring effort.
  prefs: []
  type: TYPE_NORMAL
- en: Agile refactoring
  prefs: []
  type: TYPE_NORMAL
- en: We’ll talk more about tracking technical debt later in this chapter, and about
    refactoring in agile environments in [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*,*
    *Agile Refactoring*.
  prefs: []
  type: TYPE_NORMAL
- en: While cleaning up code is important, try to keep the amount of cleanup work
    you’re doing proportional to the size of the work item you’re working on.
  prefs: []
  type: TYPE_NORMAL
- en: “Refactoring doesn’t provide business value”
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most dangerous objections to refactoring that I’ve encountered has
    been the assumption that refactoring doesn’t provide any value beyond the development
    team.
  prefs: []
  type: TYPE_NORMAL
- en: That is to say that there is often an implicit assumption that developers only
    provide value to the organization when they add features or fix bugs. Under this
    mentality, things such as unit testing, refactoring, and documentation are all
    *waste activities* that developers do but do not provide meaningful value to the
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: This is a dangerous assumption because managers are usually rewarded for minimizing
    waste and maximizing the most value possible to the organization. When refactoring
    and testing are not valued by leadership, organizations trade technical debt accumulation
    for short-term boosts in things they value, such as new features being delivered.
    This results in long-term consequences as technical debt grows rampant, development
    slows to a crawl, and bugs are introduced with nearly every change.
  prefs: []
  type: TYPE_NORMAL
- en: One reason for this devaluation of refactoring work is that new features are
    visible and often understandable to management, while technical debt is something
    they only hear about and cannot see.
  prefs: []
  type: TYPE_NORMAL
- en: Anything you as a developer or engineering leader can do to help management
    understand the scope and effects of technical debt will help resolve this objection.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll explore ways of helping improve the visibility of
    technical debt to non-developers.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating technical debt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explaining **technical debt** to non-developers can be challenging. Even when
    management trusts the development team, it is difficult for managers to understand
    what engineers deal with or how technical debt slows the software engineering
    process and introduces tremendous quality risks whenever the application is changed.
  prefs: []
  type: TYPE_NORMAL
- en: Technical debt as risk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the course of my career, I’ve learned that while management has trouble
    understanding technical debt, there’s something they have a much better understanding
    of: *risk*.'
  prefs: []
  type: TYPE_NORMAL
- en: This may sound strange, but I’ve found the best way to help management understand
    technical debt is to present it in terms of risk management.
  prefs: []
  type: TYPE_NORMAL
- en: Every aspect of technical debt in your system has both a **probability** and
    an **impact**.
  prefs: []
  type: TYPE_NORMAL
- en: The **probability** of a piece of technical debt is the likelihood that the
    piece of technical debt will impact the development team during development or
    when the application is running in production.
  prefs: []
  type: TYPE_NORMAL
- en: The **impact** is how much the technical debt will hurt things if it *does*
    impact the developers or deployed applications.
  prefs: []
  type: TYPE_NORMAL
- en: For example, code in a critical area with medium complexity that is lacking
    tests might have a low or medium probability of producing issues, but would have
    a critical impact if those issues arose. That is to say that the code isn’t currently
    causing issues, but we think there’s a medium probability that it may be changed
    in the future in such a way that introduces a bug we won’t catch due to the complexity
    of the system. If this does occur, we believe that the impact on end users will
    be severe.
  prefs: []
  type: TYPE_NORMAL
- en: When you can represent each risk in your codebase with an impact and probability,
    it allows management to start understanding the level of risk the current slate
    of technical debt represents.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a risk register
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These risk entries should be arranged into a spreadsheet or other series of
    tracked items (such as work items in the system) called a **risk register**. The
    risk register becomes a centralized place for management and development leaders
    to review the current risks present in software engineering projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your risk register might benefit from including the following pieces of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ID** – A unique identifier for the risk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlightManager''s` `ScheduleFlight` method”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status** – Whether the risk is open, in the process of being remediated,
    or closed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probability** – The probability that the risk affects future development
    or users of the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impact** – The severity of the impact of the risk if it materializes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Priority** – A priority for the risk based on its probability and impact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A sample risk register for Cloudy Skies Airlines would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – A sample risk register](img/B21324_15_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – A sample risk register
  prefs: []
  type: TYPE_NORMAL
- en: Your register doesn’t have to be limited to these columns. The person the risk
    is assigned to, the area or component the risk is in, and the estimated effort
    to resolve it are all fields you might want to consider adding, depending on your
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: When delays or production issues inevitably occur, you can point to existing
    risks in the risk register. This should help management understand that the risks
    have materialized into **issues**.
  prefs: []
  type: TYPE_NORMAL
- en: Risks versus issues
  prefs: []
  type: TYPE_NORMAL
- en: In risk management terminology, a risk is something that may occur while an
    issue is a risk that has materialized by actually occurring.
  prefs: []
  type: TYPE_NORMAL
- en: This helps resist the temptation to blame the engineers involved in the change
    and instead helps focus the conversation on the risks present in the existing
    technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: By forming a shared risk register with management, you can actively involve
    them in the process of managing and resolving technical debt. This is an ongoing
    process involving regular risk review meetings, where the team must actively maintain
    the register as new risks are discovered or opinions on the potential impact or
    probability of existing risks change.
  prefs: []
  type: TYPE_NORMAL
- en: In these risk review meetings, the group should review the current risk register
    and discuss any changes that have occurred since the previous month.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to a risk register
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I understand that not every developer, engineering leader, or even member of
    upper management feels comfortable working with a formal risk register.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d be more comfortable with a simpler process, you can achieve a similar
    amount of value by trying one of the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Having a simple bulleted list in a Word document – perhaps organized by major
    project or area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new *technical risk* type of item in work item tracking software,
    such as **Jira** or **Azure DevOps**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a regular newsletter that goes out to developers and business stakeholders
    with the “top 10 most wanted” pieces of technical debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The format of the risk register isn’t the most important part of the process.
    The important part of the process is that your team is actively itemizing technical
    debt as it is detected and regularly reviewing it with management to involve them
    in the process of resolving it.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritizing technical debt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tracking and communicating technical debt is a critical part of the process
    of paying it down. However, it’s just one step in the process.
  prefs: []
  type: TYPE_NORMAL
- en: While refactoring code as related code is modified can be a viable strategy
    for paying down technical debt, this approach isn’t suitable for tackling large
    pieces of technical debt or debt that is related to the overall design of the
    software.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 17*](B21324_17.xhtml#_idTextAnchor354)*, Agile Refactoring*, we’ll
    talk more about managing these larger pieces of work in an agile environment,
    but for now, let’s look at how you determine which pieces of technical debt should
    be prioritized.
  prefs: []
  type: TYPE_NORMAL
- en: You want to prioritize addressing the items that are most likely to occur and
    those that will hurt the most if they do occur. In other words, if you have a
    high probability risk, you should prioritize that. Additionally, you should prioritize
    your high-impact pieces of technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating risk priorities with a risk score
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve seen some organizations create a **risk score** out of the impact and probability
    of each technical risk they track. This risk score is a math equation where the
    probability of occurrence of a piece of technical debt is written as a number
    from 0 to 1, with 1 being 100% certain to happen and 0 meaning it will never happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in a formula where you can calculate the priority of a piece of
    technical debt by multiplying its probability by its impact. This formula is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For example, a high-probability, low-impact piece of technical debt might have
    a 0.9 probability score and an impact of 3, resulting in a risk score of 2.7.
  prefs: []
  type: TYPE_NORMAL
- en: Units and risk scores
  prefs: []
  type: TYPE_NORMAL
- en: 2.7 what, exactly? Well, we’re not really measuring anything tangible unless
    you choose to represent impact in hours or dollars, so I refer to this number
    as simply the “risk score” representing the overall expected negative impact the
    business expects by having the technical debt item present. This is useful for
    comparing two risks to each other.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a different scenario with a high-impact, low-probability tech
    debt item, scored at 0.15 probability and an impact of 21, resulting in a risk
    score of 3.15.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the organization typically would focus on the second item because its
    overall risk score of 3.15 is higher than the 2.7 risk score of the first item,
    meaning it represents a larger threat to the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Further refinements to this approach might also factor in the estimated hours
    needed to resolve a piece of technical debt, so items that can be resolved faster
    can be prioritized over equivalent items that would take longer.
  prefs: []
  type: TYPE_NORMAL
- en: The “gut feeling” approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can be hard to numerically quantify things with any precision and estimates
    can sometimes feel more like wishful thinking than scientifically accurate predictions.
    I do think there’s value in getting some rough numbers on risks, but typically,
    team members will have a deeper “gut feeling” about the magnitude of some items
    over others.
  prefs: []
  type: TYPE_NORMAL
- en: My stance is that numerical guides can be helpful, but your brain can point
    out other things that are important but hard to measure.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: My rule of thumb is that you should focus on fixing the things that scare you
    the most. If there’s an area of your code that keeps you up at night, it’s usually
    a good idea to start there.
  prefs: []
  type: TYPE_NORMAL
- en: This isn’t to say that you should stop all new development until technical debt
    is resolved (though sometimes this is needed in severe scenarios). I’m saying
    that when you get to pick what should be resolved, you should pick the area your
    team believes is the largest threat to the organization’s success. Once you’re
    done with the biggest problem, move on to the next one and then the next after
    that, while continuing to support the needs of the business.
  prefs: []
  type: TYPE_NORMAL
- en: Getting organizational buy-in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve seen how we can track and prioritize technical debt, and we’ve seen how
    involving management in the process of tracking technical risk can help build
    trust and understanding, but let’s talk about scenarios where development leadership
    must “pitch” a major refactoring effort to management.
  prefs: []
  type: TYPE_NORMAL
- en: 'These conversations can be stressful and represent a critical turning point
    in software projects. In these high-stakes conversations, your goal is to communicate
    the following things succinctly and respectfully:'
  prefs: []
  type: TYPE_NORMAL
- en: The problem facing the team and its impact if it is not resolved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The proposed solution (or a set of proposed solutions to consider)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cost of the refactoring effort in terms of developer hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The timetable of the refactoring effort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you’d like management to do
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that your goal here *isn’t* to get them to agree to what you are proposing.
    Your goal is to get them to understand the issue and work with you on determining
    when and how it should be resolved.
  prefs: []
  type: TYPE_NORMAL
- en: When your focus is on getting your way at all costs, this can result in a loss
    of trust, growing hostilities between development and management, and a feeling
    that developers cannot think in terms of business needs.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, if you view your partners in management as having legitimate insights
    and value to add to the organization, the conversation can become something different
    – a partnership where engineering and management work together for both the long-term
    and short-term needs of the business.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the conversation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can even have a conversation about the problem, you need to be able
    to effectively communicate the problem and the scope of its potential solutions.
  prefs: []
  type: TYPE_NORMAL
- en: This will take some consideration and planning. You don’t need to have a detailed
    project plan in place for this, but you do need to think through the scope of
    the project, the pieces that will need to change, and the people who will need
    to be involved.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also need to consider your team’s current projects and what the people
    you’re looking to involve are currently working on, or slated to be working on
    soon.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that for your organization to say “yes” to your refactoring effort,
    they’ll need to say “no” to something else for the duration of your refactoring
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a sufficient understanding of the scope of the problem and its
    solution, you should bring it to management. This can be done either as part of
    a regular check-in meeting between engineering leadership and management or as
    its own meeting.
  prefs: []
  type: TYPE_NORMAL
- en: How you approach the meeting invite will depend on the individual you’re approaching.
  prefs: []
  type: TYPE_NORMAL
- en: Some leaders may be receptive to you stopping by their office or sending them
    a direct message and saying something to the effect of “I have some concerns about
    the project. Do you have 30 minutes sometime to talk about this in more detail?”
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, other leaders will want to have the conversation as soon
    as you broach the topic. For this reason, I recommend you prepare for the conversation
    and find a time when their calendar appears clear.
  prefs: []
  type: TYPE_NORMAL
- en: Anticipating questions and objections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you present your concerns and options to management, you should keep in mind
    the types of questions or objections they might raise. Be prepared to drill into
    the technical details of the current problem as well as your proposed solutions.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also typical for management to want details on project timelines. This
    can include not only how long you expect the refactoring effort to take, but also
    *how long the project can wait to* *be started*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that most organizations have major projects tentatively scheduled
    for at least the next quarter. Taking on a refactoring effort typically requires
    rearranging current and planned work in other areas. As an example, look at *Figure
    15**.3* for a sample breakdown of major initiatives by quarter for the web, services,
    and integration teams:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – A project roadmap broken down by team and quarter](img/B21324_15_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – A project roadmap broken down by team and quarter
  prefs: []
  type: TYPE_NORMAL
- en: While the integration team may want to spend time in Q2 working on a piece of
    technical debt, doing so would risk the services team’s planned work on connecting
    to a new vendor and potentially delay the integration team’s own planned paid
    services work, both slated to begin in Q3.
  prefs: []
  type: TYPE_NORMAL
- en: Be honest about the urgency of the issues your team is facing. Sometimes the
    answer is that it can wait, but the longer it is delayed the greater the penalty
    the team faces. At other times, refactoring efforts are needed to resolve urgent
    and already pressing issues the team is encountering with the current system.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, keep in mind the background of the person you’re talking to and
    the people they talk to. If you’re talking to a very security-oriented person
    and you haven’t thought through the security ramifications of your change, that
    conversation is likely not going to go well.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t need to have an answer for every question you are asked, and it is
    acceptable to say “I don’t know; let me look into that and get back to you.”
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line is that changes to project schedules are serious matters and
    if you appear to have not taken the time to think about the most obvious concerns,
    it will not inspire confidence among management.
  prefs: []
  type: TYPE_NORMAL
- en: Different approaches for different leaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve met a lot of different people in management and it’s amazing how different
    two skilled leaders can be from one another.
  prefs: []
  type: TYPE_NORMAL
- en: Some leaders are extremely analytical and incredibly data-driven, wanting to
    pore over reports and spreadsheets. Others are people-oriented and driven not
    as much by raw numbers as they are by *specific stories* of how something affects
    specific individuals.
  prefs: []
  type: TYPE_NORMAL
- en: For leaders focused on the overall data, I usually present key metrics and highlight
    interesting findings. I often provide all relevant data to them for further analysis,
    either preemptively or upon request.
  prefs: []
  type: TYPE_NORMAL
- en: An example metric might be that we spent 15 hours over the last 3 sprints dealing
    with this problem, or that 15% of the bugs from the last quarter could be traced
    back to this area.
  prefs: []
  type: TYPE_NORMAL
- en: As far as sharing specific stories goes, I usually come prepared with two or
    three examples of how a problem impacts developers, end users, or other relevant
    stakeholders. This might be something such as “Last sprint, Priya tried to work
    on a new feature we thought would only take a few hours, but because of how this
    is architected, it actually took her 3 days,” or “Garret is a very competent developer,
    but he tried to modify this area of code and it wound up causing this critical
    production bug due to the code’s lack of maintainability.”
  prefs: []
  type: TYPE_NORMAL
- en: An approach that works well with one individual may have very little impact
    on a different person. As a result, I find it best to have a few interesting metrics
    and a few relevant scenarios whenever I have these critical conversations on major
    refactoring efforts.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing I hope you’ve picked up on in this chapter is that while you want
    to resolve technical debt, your goal is the short-term and long-term success of
    the organization.
  prefs: []
  type: TYPE_NORMAL
- en: This means that any conversation about technical debt should be a two-way conversation
    where both parties listen to each other and can have their voices heard.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the legitimate short-term needs of a business are to ship something
    as fast as possible or to meet a deadline with an external partner or agency.
  prefs: []
  type: TYPE_NORMAL
- en: As an engineering leader, your goal is to ensure management understands the
    impact, urgency, and risk that technical debt represents and the importance of
    both small and large refactoring efforts. However, your focus is typically on
    the code, while management’s focus is centered on strategic initiatives or even
    simply keeping the business afloat and the lights on. Both roles and their perspectives
    are critically important to a healthy organization.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, what you’re really after is open and honest communication
    between engineering and management where management can appreciate the risk and
    impact of technical debt and engineering can understand the pressures facing the
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: This communication starts with trust and respecting the contributions that management
    brings to the table in terms of steering the overall organization toward its goals
    and balancing priorities and needs that often compete with one another.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – Cloudy Skies Airlines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we close the chapter, let’s look at our case study from Cloudy Skies Airlines.
  prefs: []
  type: TYPE_NORMAL
- en: Brian, a lead developer, has been investigating a growing number of problems
    with the reservation and payment processing part of the application.
  prefs: []
  type: TYPE_NORMAL
- en: These issues, initially thought to be isolated, seem to occur during peak usage
    times when many customers are trying to book flights or modify their existing
    flight reservations.
  prefs: []
  type: TYPE_NORMAL
- en: After investigating, Brian and his team discover that the problems are related
    to the current design and architecture of the system. While the system could handle
    the old number of users, it is simply not able to adequately scale to handle peak
    workloads given its current inefficiencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ordinarily, such a system could be scaled out to have multiple servers running
    in parallel with a load balancer distributing traffic between them (see *Figure
    15**.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – A load balancer distributing requests to different application
    servers](img/B21324_15_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – A load balancer distributing requests to different application
    servers
  prefs: []
  type: TYPE_NORMAL
- en: However, the system was not designed to support multiple copies of the application
    running at once without significant rework.
  prefs: []
  type: TYPE_NORMAL
- en: While the team is able to make some short-term performance and stability improvements
    to resolve the current issues, they understand that as the business grows, these
    problems will just resurface – particularly in peak travel seasons.
  prefs: []
  type: TYPE_NORMAL
- en: After careful consideration, the team comes up with a plan that would allow
    the system to run multiple copies in parallel but would require a significant
    amount of rework.
  prefs: []
  type: TYPE_NORMAL
- en: One of the engineers also suggests potentially moving from a model where the
    server does all the work and returns a successful response to the user to a model
    where the request is quickly validated and then put in a queue for processing.
    This approach would handle spikes in incoming requests but would require changes
    to how request processing currently works.
  prefs: []
  type: TYPE_NORMAL
- en: Armed with these ideas and knowledge of the scope of the current problem and
    possible fixes, Brian schedules a meeting with Maddie, the Chief Technology Officer.
  prefs: []
  type: TYPE_NORMAL
- en: During the meeting, Brian lays out the performance problem, the recent steps
    the team has taken to restore service, and the likelihood that it will occur again
    as the business grows and peak seasons approach.
  prefs: []
  type: TYPE_NORMAL
- en: Once Brian is sure Maddie understands the basics of the problem, he gives an
    overview of the two possible remediation plans, as well as his personal recommendation
    to stick with the relatively simpler change of working to allow the application
    server to support multiple copies in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: Maddie asks several technical questions about scalability, particularly around
    why the current system is unable to have multiple copies running at once. After
    Brian explains the problems that would cause, Maddie understands the reasoning
    and the need for remediation and the conversation shifts toward scheduling.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next focus for the team was going to be integrating a newly acquired subsidiary
    airline into Cloudy Skies systems, as shown in *Figure 15**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – The planned schedule showing major projects by quarter and
    the current date](img/B21324_15_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – The planned schedule showing major projects by quarter and the
    current date
  prefs: []
  type: TYPE_NORMAL
- en: Upon reviewing the problem, Maddie and Brian both agree that having a long-term
    solution in place for the scalability problems is more important, particularly
    with some peak travel seasons approaching.
  prefs: []
  type: TYPE_NORMAL
- en: Maddie brings other executives into the conversation on the specifics of the
    plan and Brian answers their questions, while the team begins planning the architectural
    changes needed and the technical details of how the application could be scaled
    out as needed to handle additional traffic loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a short delay, the project is approved and the majority of Brian’s team
    is assigned to the effort, with the understanding that the previously planned
    work would begin later than originally scheduled to make room for the new scalability
    project, as shown in *Figure 15**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – The adjusted schedule with the scalability project added in
    the near future](img/B21324_15_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – The adjusted schedule with the scalability project added in the
    near future
  prefs: []
  type: TYPE_NORMAL
- en: Brian and Maddie continue to check in on the progress of the work, and the scalability
    concerns are addressed before the peak travel times arrive.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, some team members are able to make progress in integrating
    the new subsidiary into the Cloudy Skies systems. As engineers finish their work
    on the scalability concerns, they transition over to that project, resulting in
    only a minor delay to that project’s initially planned delivery date.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, the business gets a more stable and scalable system as well as their
    planned integration of the new subsidiary, in addition to an improved communication
    channel between management and the software engineering team.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored common objections to refactoring code and paying
    down technical debt and some reasons and remedies for them.
  prefs: []
  type: TYPE_NORMAL
- en: We also talked about communicating technical debt to management, particularly
    the idea of technical debt being viewed as a risk to the organization’s systems
    and productivity. We also introduced the idea of using a risk register to track
    technical debt over time and improve the visibility of technical debt to non-developers.
  prefs: []
  type: TYPE_NORMAL
- en: We closed with a discussion about prioritizing technical debt, getting permission
    from management for larger refactoring projects, and the importance of trust,
    communication, and establishing a partnership with management in the remediation
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll explore the value of code standards in terms of minimizing
    technical debt over time and how to choose an existing standard or build your
    own.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What obstacles are you currently encountering in getting time to prioritize
    technical debt?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If management understood the problems you’re dealing with, how could they help
    you with them in terms of time, resources, or organizational support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What can you and your team do to build a collaborative relationship with management
    going forward?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How well does management understand technical debt and its risks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does it make sense for you to formally track technical debt as risk?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find more thoughts on technical debt as risk, communication with engineering
    leadership, and risk management in general at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Technical Debt as* *Risk*: [https://killalldefects.com/2019/12/24/technical-debt-as-risks/](https://killalldefects.com/2019/12/24/technical-debt-as-risks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Escaping the black hole of technical* *debt*:[https://www.atlassian.com/agile/software-development/technical-debt](https://www.atlassian.com/agile/software-development/technical-debt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to use a technical debt* *register*: [https://blog.logrocket.com/product-management/how-to-use-technical-debt-register/](https://blog.logrocket.com/product-management/how-to-use-technical-debt-register/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Communicating with Management About Technical* *Debt*:[https://devops.com/communicating-with-management-about-technical-debt/](https://devops.com/communicating-with-management-about-technical-debt/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
