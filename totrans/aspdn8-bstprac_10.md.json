["```cs\npublic class Benchmarks\n{\n    [Benchmark(Baseline = true)]\n    public void StringConcatenationScenario()\n    {\n        var input = string.Empty;\n        for (int i = 0; i < 10000; i++)\n        {\n            input += «a»;\n        }\n    }\n    [Benchmark]\n    public void StringBuilderScenario()\n    {\n        var input = new StringBuilder();\n        for (int i = 0; i < 10000; i++)\n        {\n            input.Append(«a»);\n        }\n    }\n}\n```", "```cs\n<img width=\"100\" height=\"100\"\n     src=\"img/logo.jpg\"\n     alt=\"Buck's Coffee Shop Logo\"\n```", "```cs\n<img src=\"img/logo-400.jpg\" \nalt=\"Buck›s Coffee Shop Logo\" \nwidth=\"100\"\nheight=\"100\" \nloading=\"lazy\"\nsrcset=\"logo-400.jpg 400w, \nlogo-800.jpg 800w, \nlogo-1024.jpg 1024w\"\nsizes=\"(max-width: 640px) 400px, 800px, 1024px\">\n```", "```cs\n.bg-YouTube_32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -1px -1px;\n}\n.bg-facebook_32x32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -35px -1px;\n}\n.bg-github_32x32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -1px -35px;\n}\n.bg-Instagram_32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -35px -35px;\n}\n.bg-LinkedIn_32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -69px -1px;\n}\n.bg-quora_32x32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -69px -35px;\n}\n.bg-RSS_32x32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -1px -69px;\n}\n.bg-Twitter_32 {\n    width: 32px; height: 32px;\n    background: url('css_sprites.png') -35px -69px;\n}\n```", "```cs\n<div class=\"bg-RSS_32x32\"></div>\n```", "```cs\npublic class HtmlShrinkMiddleware\n{\n    private readonly RequestDelegate _next;\n    public HtmlShrinkMiddleware(RequestDelegate next) => _next = next;\n    public async Task InvokeAsync(HttpContext context)\n    {\n        using var buffer = new MemoryStream();\n        // Replace the context response with our buffer\n        var stream = context.Response.Body;\n        context.Response.Body = buffer;\n        // Invoke the rest of the pipeline\n        // if there are any other middleware components\n        await _next(context);\n        // Reset and read out the contents\n        buffer.Seek(0, SeekOrigin.Begin);\n        // Adjust the response stream to remove whitespace.\n        var compressedHtmlStream = new HtmlShrinkStream(stream);\n        // Reset the stream again\n        buffer.Seek(0, SeekOrigin.Begin);\n        // Copy our content to the original stream and put it back\n        await buffer.CopyToAsync(compressedHtmlStream);\n        context.Response.Body = compressedHtmlStream;\n    }\n}\npublic static class HtmlShrinkMiddlewareExtensions\n{\n    public static IApplicationBuilder UseHtmlShrink(\n        this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<HtmlShrinkMiddleware>();\n    }\n}\n```", "```cs\npublic class HtmlShrinkStream: Stream\n{\n    private readonly Stream _responseStream;\n    public HtmlShrinkStream(Stream responseStream)\n    {\n        ArgumentNullException.ThrowIfNull(responseStream);\n        _responseStream = responseStream;\n    }\n    public override bool CanRead => _responseStream.CanRead;\n    public override bool CanSeek => _responseStream.CanSeek;\n    public override bool CanWrite => _responseStream.CanWrite;\n    public override long Length => _responseStream.Length;\n    public override long Position\n    {\n        get => _responseStream.Position;\n        set => _responseStream.Position = value;\n    }\n    public override void Flush() => _responseStream.Flush();\n    public override int Read(byte[] buffer, int offset, int count) =>\n        _responseStream.Read(buffer, offset, count);\n    public override long Seek(long offset, SeekOrigin origin) =>\n        _responseStream.Seek(offset, origin);\n    public override void SetLength(long value) =>\n        _responseStream.SetLength(value);\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        var html = Encoding.UTF8.GetString(buffer, offset, count);\n         var removeSpaces = new Regex(@\"(?<=\\s)\\s+(?![^<>]*</pre>)\", RegexOptions.Multiline);\n        html = removeSpaces.Replace(html, string.Empty);\nvar removeCrLf = new Regex(@\"(\\r\\n|\\r|\\n)\", RegexOptions.Multiline);\nhtml = removeCrLf.Replace(html, string.Empty);\n        buffer = Encoding.UTF8.GetBytes(html);\n        _responseStream.WriteAsync(buffer, 0, buffer.Length);\n    }\n}\n```", "```cs\napp.UseHtmlShrink();\n```", "```cs\nservices.AddDbContext<MyDbContext>(options =>\n    options.UseSqlServer(connectionString));\n```", "```cs\nservices.AddDbContextPool<MyDbContext>(options =>\n    options.UseSqlServer(connectionString));\n```", "```cs\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    if (!optionsBuilder.IsConfigured)\n    {\n        var connString = _configuration.GetConnectionString(«DefaultConnection»);\n        if (!string.IsNullOrEmpty(connString))\n        {\n            optionsBuilder.UseSqlServer(connString)\n                .LogTo(Console.WriteLine, LogLevel.Information);\n        }\n    }\n}\n```", "```cs\nMicrosoft.EntityFrameworkCore.Database.Command: Information: Executed DbCommand (46ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\nSELECT [a].[ID], [a].[LocationID], [a].[Name], [l].[ID], [l].[Name]\nFROM [Attractions] AS [a]\nINNER JOIN [Locations] AS [l] ON [a].[LocationID] = [l].[ID]\n```", "```cs\nVar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddResponseCaching();\nvar app = builder.Build();\napp.UseHttpsRedirection();\n// If using Cors, UseCors must be placed before the UseResponseCaching\n// app.UseCors();\napp.UseResponseCaching();\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddOutputCache();\n// Add services to the container.\nbuilder.Services.AddRazorPages();\nvar app = builder.Build();\n// Configure the HTTP request pipeline.\nIf (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n    App.UseHsts();\n}\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\n// if using Cors, UseOutputCache must be placed AFTER useCors().\n//app.UseCors();\napp.UseOutputCache();\n```", "```cs\n[OutputCache]\npublic class IndexModel : PageModel\n{\n    private readonly ILogger<IndexModel> _logger;\n    public IndexModel(ILogger<IndexModel> logger)\n    {\n        _logger = logger;\n    }\n    public void OnGet() { }\n}\n```", "```cs\npublic class CacheCoffeeService : CoffeeService, ICachedCoffeeService\n{\n    private const string keyCoffeeList = «EntireCoffeeList»;\n    private readonly IMemoryCache _cache;\n    public CacheCoffeeService(IBucksDbContext dbContext,\n        IMemoryCache cache)\n        : base(dbContext)\n    {\n        _cache = cache;\n    }\n    public List<Coffee> GetAll(bool reload = false)\n    {\n        // If we can't find it in the cache or want to reload...\n        if (!_cache.TryGetValue(keyCoffeeList, out List<Coffee>         coffees) || reload)\n        {\n            coffees = base.GetAll();\n            _cache.Set(keyCoffeeList, coffees,\n                new MemoryCacheEntryOptions()\n                    .SetSlidingExpiration(TimeSpan.FromSeconds(60))                     // 1min\n                    .SetAbsoluteExpiration(TimeSpan.FromSeconds(3600))                     // 6min\n                    .SetPriority(CacheItemPriority.Normal)\n            );\n        }\n        return coffees;\n    }\n}\npublic interface ICachedCoffeeService\n{\n    List<Coffee> GetAll(bool reload = false);\n}\n```", "```cs\napp.UseStaticFiles(new StaticFileOptions\n{\n    OnPrepareResponse = ctx =>\n    {\n        // Cached for 24 hours.\n        var response = ctx.Context.Response;\n        var duration = 60 * 60 * 24; // 24h duration.\n        response.Headers[HeaderNames.CacheControl] =\n        \"public,max-age=\"+duration;\n    }\n});\n```", "```cs\napp.UseStaticFiles(new StaticFileOptions\n{\n    OnPrepareResponse = ctx =>\n    {\n        var response = ctx.Context.Response;\n        // disable all caching\n        response.Headers[HeaderNames.CacheControl] = \"no-cache,             no-store\";\n        response.Headers[HeaderNames.Pragma] = \"no-cache\";\n        response.Headers[HeaderNames.Expires] = \"-1\";\n    }\n});\n```"]