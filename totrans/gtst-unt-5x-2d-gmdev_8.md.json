["```cs\n[SerializeField] \nprivate Waypoint waypoint1, waypoint2; \n\npublic override Waypoint GetNextWaypoint() { \n  if(Random.Range(0,2) == 0) { \n    return waypoint1; \n  }else { \n    return waypoint2; \n  } \n} \n\n```", "```cs\nusing UnityEngine.Events; \n\n```", "```cs\n*//Float variable just for test. Can be set in the Inspector.* \npublic float myFloat; \n\n*//Declaration of the event class. It has a float as parameter to pass.* \n[System.Serializable] \npublic class OnEveryFrame : UnityEvent<float> { } \n\n*//Declare the variable event which will be shown in the Inspector* \npublic OnEveryFrame OnEveryFrameEvent; \n\n*//Function that is called every frame* \nvoid Update() { \n * //fire the event at every frame* \n  OnEveryFrameEvent.Invoke(myFloat); \n} \n\n```", "```cs\nDebug.Log(\"This is a string that will be printed on the console\"); \n\n```", "```cs\nusing UnityEngine; \nusing System.Diagnostics; *//Needed for the Conditional attribute* \n\npublic class myDebug : MonoBehaviour { \n\n  [Conditional(\"DEBUG_MODE\")] *// Conditional attribute* \n  public static void Log(string message) { \n   * //Print the message in the console* \n    UnityEngine.Debug.Log(message); \n  } \n} \n\n```", "```cs\nmyDebug.Log(\"Hello World\"); \n\n```", "```cs\nusing UnityEditor; \n\n```", "```cs\n        firstString.Equals(secondString, StringComparison.Ordinal); \n\n```"]