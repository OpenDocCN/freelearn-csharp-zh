- en: Consuming Diagnostic Analyzers in .NET Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we showed you how to write diagnostic analyzers to
    analyze and report issues about the .NET source code and contribute them to the
    .NET developer community. In this chapter, we will show you how to search, install,
    view, and configure the analyzers that have already been published by various
    analyzer authors on NuGet and the VS extension gallery. We will cover the following
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Searching and installing analyzers through the NuGet package manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching and installing VSIX analyzers through the VS extension gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing and configuring analyzers in the solution explorer in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the ruleset file and Rule Set editor to configure analyzers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Diagnostic analyzers are extensions to the Roslyn C# compiler and Visual Studio
    IDE to analyze user code and report diagnostics. The user will see these diagnostics
    in the error list after building the project from Visual Studio and even when
    building the project on the command line. They will also see the diagnostics live
    while editing the source code in the Visual Studio IDE. Analyzers can report diagnostics
    to enforce specific code styles, improve code quality and maintenance, recommend
    design guidelines, or even report very domain-specific issues, which cannot be
    covered by the core compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzers can be installed in a .NET project either as a NuGet package or as
    a VSIX. To get a better understanding of these packaging schemes and learn about
    the differences in the analyzer experience when installed as a NuGet package versus
    a VSIX, it is recommended that you read the introduction part of the recipe *Publishing
    NuGet package and VSIX for an analyzer project* in [Chapter 1](9928750a-c427-42e6-b8a2-cf67eb5465af.xhtml),
    *Writing Diagnostic Analyzers*.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzers are supported on various different flavors of .NET Standard, .NET
    Core, and .NET Framework projects, for example, class library, console app, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Searching and installing analyzers through the NuGet package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to search and install analyzer NuGet packages
    in the NuGet package manager in Visual Studio, and see the analyzer diagnostics
    from an installed NuGet package shown in project build and as live diagnostics
    during code editing in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine for this
    recipe. You can install a free community version of Visual Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a C# class library project, say `ClassLibrary`*,* in Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In solution explorer, right-click on the solution or project node and execute
    the Manage NuGet Packages command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/217b4155-cf3f-49c4-bd05-5ab20c6c8722.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This brings up the NuGet Package Manager, which can be used to search and install
    NuGet packages to the solution or project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2f05852-6c78-4ebf-8e9b-351a05676076.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the search bar, type the following text to find NuGet packages tagged as
    analyzers : `Tags:"analyzers"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that some of the well-known packages are tagged as `analyzer`, so you may
    also want to search for `Tags:"analyzer"`**.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Check or uncheck the Include prerelease checkbox to the right of the search
    bar to search or hide the pre-release analyzer packages, respectively. The packages
    are listed based on the number of downloads, with the highest downloaded package
    at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b076f43-300d-4792-abbf-4a033cd15b6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a package to install, say `System.Runtime.Analyzers`, and pick a specific
    version, say *1.1.0*, and click on Install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1561fbb1-97cb-409f-9271-735374a8c9db.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the I Accept button on the License Acceptance dialog to install the
    NuGet package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the installed analyzer(s) that shows up under the Analyzers node in
    the solution explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6a0894b-b946-47de-ae30-77b47a3b48f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that the project file has a new `ItemGroup` with the following analyzer
    references from the installed analyzer package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to your C# project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the analyzer diagnostic from the installed analyzer that is shown in
    the error list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b52cd14-fc2c-4dfe-94a2-f8ce0879635f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Developer Command Prompt for VS 2017 and build the project to verify that
    the analyzer is executed on the command-line build and that the analyzer diagnostic
    is reported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f8691f86-51bf-4e92-8c5b-8b42c11bd6ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new C# project in VS 2017 and add the same code to it as step 10\.
    Verify that no analyzer diagnostic shows up in the error list or command line,
    confirming that the analyzer package was only installed to the selected project
    in steps 1-6.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that **CA1018** (*the custom attribute should have AttributeUsage defined*)
    has been moved to a separate analyzer assembly in future versions of the `FxCop/System.Runtime.Analyzers`
    package. It is recommended that you install the `Microsoft.CodeAnalysis.FxCopAnalyzers`
    NuGet package from ( [https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers))to
    get the latest group of Microsoft-recommended analyzers.
  prefs: []
  type: TYPE_NORMAL
- en: Searching and installing VSIX analyzers through the VS extension gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to search and install analyzer VSIX packages
    in the Visual Studio extension manager and see how the analyzer diagnostics from
    an installed VSIX light up as live diagnostics during code editing in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to follow
    this recipe. You can install a free community version of Visual Studio 2017 from
    [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a C# class library project, say `ClassLibrary`, in Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top-level menu, navigate to Tools | Extensions and Updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to Online | Visual Studio Marketplace on the left tab of the dialog
    to view the available VSIXes in the Visual Studio extension gallery/marketplace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c9fa7c2-ed74-4a3a-8e00-4afb02a276e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Search `analyzers` in the search textbox in the upper-right corner of the dialog
    and download an analyzer VSIX, say `Refactoring Essentials for Visual Studio`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d49b014-886b-48cd-9623-7e0d5b00ee64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the download completes, you will get a message at the bottom of the dialog
    saying that the install will be scheduled to execute once Visual Studio and related
    windows are closed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc5ab730-f2a4-4b29-8e48-e8c17f7ef6c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Close the dialog and then close the Visual Studio instance to start the install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the VSIX Installer dialog, click on Modify to start installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c5cf1340-e55e-4be3-a47f-080a5f6a4276.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The subsequent message prompts you to kill all the active Visual Studio and
    satellite processes. Save all your relevant work in all the open Visual Studio
    instances and click on End Task**s** to kill these processes and install the VSIX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/721c1b49-0632-4dc6-8500-e1771bfe4a5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After installation, restart VS, click on Tools | Extensions And Updates, and
    verify that `Refactoring Essentials VSIX` is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c54b8613-1557-4d94-9590-e72f8fac9394.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new C# project with the following source code and verify analyzer
    diagnostic *RECS0085* (*Redundant array creation expression*) in the error list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f14cc430-4446-464b-a30a-766503551251.png)'
  prefs: []
  type: TYPE_IMG
- en: Build the project from Visual Studio 2017 or the command line and confirm that
    no analyzer diagnostic shows up in the output window or the command line, respectively,
    confirming that the VSIX analyzer did not execute as a part of the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Viewing and configuring analyzers in solution explorer in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to use the Solution explorer in Visual
    Studio 2017 to view the different analyzers installed in a project, view the implemented
    analyzer rules in these assemblies, as well as the rule properties (or the descriptor
    metadata), and configure the rule severity and persist the new severity settings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have created and opened a .NET project in Visual Studio 2017
    with NuGet-based analyzers installed in the project. Refer to the first recipe
    in this chapter for installing analyzers in a .NET project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a C# project, say `ClassLibrary`, with the analyzer NuGet package `System.Runtime.Analyzers.nupkg`
    pre-release version *1.2.0-beta2* installed in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the solution explorer, expand References | Analyzers nodes to view the analyzer
    assemblies installed through the analyzer NuGet package(s). We should see two
    analyzer assemblies, `System.Runtime.Analyzers` and `System.Runtime.CSharp.Analyzers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edd824d1-77d3-450a-8784-362baa1cf26d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Expand the System.Runtime.Analyzers node to view all the *CAXXXX* rules implemented
    in the assembly and click on a specific rule, say CA1813: Avoid unsealed attributes*,*
    to view the rule properties, such as *ID, Message, Title, Description, Category,
    Effective severity*, Enabled by default, and so on, in the Properties Window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33e32c43-e569-41eb-8c96-072f642a43f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the *CA1813* rule''s Enabled by default is False, which means that
    the rule is turned off by default. We can confirm this by adding the following
    source code that violates this rule because we declared a public unsealed attribute,
    but *CA1813* is not reported for the violation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the rule node, click on Set Rule Set Severity, and change the
    severity from Default to Warning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad315b35-5562-4c3e-aacc-451dee5c064d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Confirm that *CA1813* is now reported for the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/848047f4-f0aa-4ac2-9e3f-8a0b06c81b21.png)'
  prefs: []
  type: TYPE_IMG
- en: Save the current project and then close and re-open the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the warning CA1813 still shows up for the preceding source code,
    confirming that the rule set severity change was persisted for the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The analyzers node in solution explorer gives a visual representation of the
    analyzer items defined in the project file, which correspond to analyzer assemblies
    added manually to the project or added via analyzer NuGet package(s). The rules
    in the assembly come from each type in the assembly that implements the `DiagnosticAnalyzer`
    type and has a `DiagnosticAnalyzerAttribute` applied to it. The rule properties
    shown in the properties window come from instantiating the analyzer types and
    requesting them for it's `SupportedDiagnostics`.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the rule severity in solution explorer and then persisting it for the
    project happens through an automatically generated ruleset file, which gets added
    to the project. Refer to the next recipe to get more details on ruleset-based
    analyzer configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ruleset file and Rule Set editor to configure analyzers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to use the `ruleset` file and the Rule
    Set editor in Visual Studio to configure the per-project severity of analyzer
    rules, and illustrate how the severity changes are reflected in the live diagnostics
    in Visual Studio, as well as command-line builds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have created and opened a .NET project in Visual Studio 2017
    with NuGet-based analyzers installed in the project. Refer to the first recipe
    in this chapter for installing analyzers in a .NET project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a C# project, say `ClassLibrary`, with the analyzer NuGet package `System.Runtime.Analyzers.nupkg`
    prerelease version *1.2.0-beta2* installed in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following source code to the project and verify that no CA1813: Avoid
    unsealed attributes is fired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the solution explorer, navigate to ClassLibary | References | Analyzers,
    right-click on the Analyzers node and execute the context menu command Open Active
    Rule Set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4149663d-c886-41f9-b0bc-957a3df23969.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Rule Set editor, search *CA1813* in the textbox in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the *CA1813,* search the result listed under System.Runtime.Analyzers,
    change the Action from None to Warning, and hit save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d70d5cb8-7dd8-451a-a6c6-734c459f1210.png)'
  prefs: []
  type: TYPE_IMG
- en: We should now see a *CA1813* warning being reported on our attribute definition
    in the source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the solution explorer, verify that the project now contains that a new `ClassLibrary.ruleset`
    item, and a new `CodeAnalysisRuleset` property was added to the project file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `ClassLibrary.ruleset` in a text editor outside of Visual Studio and verify
    that it has the following rule action specification for *CA1813*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Edit the ruleset file to change the `ruleset` Action for *CA1813* from Warning
    to Error and save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch back to Visual Studio and confirm that the source code editor now shows
    a red squiggle and that the error list also reports an error for *CA1813*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27524615-8925-4e81-aa64-adfb4512323b.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on *ClassLibrary.ruleset* in the solution explorer to open it with
    the Rule Set editor and verify that the rule severity entry for *CA1813* is now
    showing as Error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the project and verify that the error *CA1813* is reported, confirming
    that the `ruleset` setting is preserved for command-line builds as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ruleset` file is essentially a grouping of a set of code-analysis rules
    that you can apply to a project to configure it''s analysis. It is specified in
    an XML format and is based on an XML schema that ships with Visual Studio. It
    is also open sourced, and can be found at [https://github.com/dotnet/roslyn/blob/version-2.0.0/src/Compilers/Core/Portable/RuleSet/RuleSetSchema.xsd](https://github.com/dotnet/roslyn/blob/version-2.0.0/src/Compilers/Core/Portable/RuleSet/RuleSetSchema.xsd).
    A `ruleset` can be specified for a project using the `CodeAnalysisRuleset` property
    in the project file. Each Rules node contains a collection of rule specifications
    with a common analyzer ID and namespace. Each Rule specification has the rule
    ID and the effective Action or the severity. The rule Action can take one of the
    following five values: None (suppressed), Hidden (non-visible in the IDE, primarily
    a code fix trigger), Info (informational message), Warning, and **Error**. These
    rule actions get converted into compilation options for the compiler and override
    the default severity of the diagnostic ID.'
  prefs: []
  type: TYPE_NORMAL
- en: The Rule Set editor is a powerful graphical user interface to search, filter,
    and bulk-edit rule configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://msdn.microsoft.com/en-us/library/dd264996.aspx](https://msdn.microsoft.com/en-us/library/dd264996.aspx)
    for a more detailed walk through, and for documentation for `ruleset` file schema
    and the Rule Set editor in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Visual Studio 2017, built-in IDE analyzers for coding style rules can also
    be configured via the new *.editorconfig* format, which applies rule configurations
    at folder level. See the documentation at ([https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference)
    ) for further details.
  prefs: []
  type: TYPE_NORMAL
