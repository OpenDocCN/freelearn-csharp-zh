["```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class MovingShadows : MonoBehaviour{\n      public float windSpeedX;\n      public float windSpeedZ;\n      private float lightCookieSize;\n      private Vector3 initPos;\n\n      void Start(){\n        initPos = transform.position;\n        lightCookieSize = GetComponent<Light>().cookieSize;\n      }\n\n      void Update(){\n        Vector3 pos = transform.position;\n        float xPos= Mathf.Abs (pos.x);\n        float zPos= Mathf.Abs (pos.z);\n        float xLimit = Mathf.Abs(initPos.x) + lightCookieSize;\n        float zLimit = Mathf.Abs(initPos.z) + lightCookieSize;\n\n        if (xPos >= xLimit)\n          pos.x = initPos.x;\n\n        if (zPos >= zLimit)\n          pos.z = initPos.z;\n\n        transform.position = pos;\n        float windX = Time.deltaTime * windSpeedX;\n        float windZ = Time.deltaTime * windSpeedZ;\n        transform.Translate(windX, 0, windZ, Space.World);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    public class LaserAim : MonoBehaviour {\n\n      public float lineWidth = 0.2f;\n      public Color regularColor = new Color (0.15f, 0, 0, 1);\n      public Color firingColor = new Color (0.31f, 0, 0, 1);\n      public Material lineMat;\n      private Vector3 lineEnd;\n      private Projector proj;\n      private LineRenderer line;\n\n      void Start () {\n        line = gameObject.AddComponent<LineRenderer>();\n        line.material = lineMat;\n        line.material.SetColor(\"_TintColor\", regularColor);\n        line.SetVertexCount(2);\n        line.SetWidth(lineWidth, lineWidth);\n        proj = GetComponent<Projector> ();\n      }\n\n      void Update () {\n        RaycastHit hit;\n        Vector3 fwd = transform.TransformDirection(Vector3.forward);\n\n        if (Physics.Raycast (transform.position, fwd, out hit)) {\n          lineEnd =  hit.point;\n          float margin = 0.5f;\n          proj.farClipPlane = hit.distance + margin;\n\n        } else {\n          lineEnd = transform.position + fwd * 10f;\n        }\n        line.SetPosition(0, transform.position);\n        line.SetPosition(1, lineEnd);\n\n        if(Input.GetButton(\"Fire1\")){\n          float lerpSpeed = Mathf.Sin (Time.time * 10f);\n          lerpSpeed = Mathf.Abs(lerpSpeed);\n          Color lerpColor = Color.Lerp(regularColor, firingColor, lerpSpeed);\n          line.material.SetColor(\"_TintColor\", lerpColor);\n\n        }\n        if(Input.GetButtonUp(\"Fire1\")){\n          line.material.SetColor(\"_TintColor\", regularColor);\n        }\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class UpdateProbe : MonoBehaviour {\n      private ReflectionProbe probe;\n\n      void Awake () {\n        probe = GetComponent<ReflectionProbe> ();\n        probe.RenderProbe();\n      }\n\n      public void RefreshProbe(){\n        probe.RenderProbe();\n      }\n    }\n    ```", "```cs\n    private GameObject probe;\n    private UpdateProbe up;\n    void Awake(){\n      probe = GameObject.Find(\"OnDemandProbe\");\n      up = probe.GetComponent<UpdateProbe>();\n    }\n    ```", "```cs\n    up.RefreshProbe();\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    public class RotateLight : MonoBehaviour {\n      public float speed = -1.0f;\n      void Update () {\n        transform.Rotate(Vector3.right * speed * Time.deltaTime);\n      }\n    }\n    ```"]