- en: Improving Code Maintenance of C# Code Base
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring C# code style rules built into Visual Studio 2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `.editorconfig` file for the configuration of code style rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the public API analyzer for API surface maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using third-party StyleCop analyzers for code style rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the current era of open source projects with numerous diverse contributors
    from different organizations and different parts of the world, one of the primary
    requirements of maintaining any repo is enforcing code style guidelines across
    the code base. Historically, this has been done through exhaustive documentation
    and code reviews to catch any violations of these coding guidelines. However,
    this approach has its flaws and requires a lot of man hours on maintaining the
    documentation and performing exhaustive code reviews.
  prefs: []
  type: TYPE_NORMAL
- en: With the automated code style and naming rules that are built into Visual Studio
    2017, users can customize and configure the enforcement levels for individual
    rules and prompt visual indicators for violations, such as suggestions or squiggles
    in the editor and diagnostics in the error list, with appropriate severity (error/warning/informational
    message). Additionally, the rules come with a code fix that can automatically
    fix one or more instances of the violations across the document, project, or solution.
    With the new EditorConfig support in Visual Studio 2017, these rule configurations
    can be enforced and customized at each folder level via an `.editorconfig` file.
    Additionally, the `.editorconfig` files can be checked into the repo alongside
    the sources so that the rules are enforced for every user that contributes to
    the repo.
  prefs: []
  type: TYPE_NORMAL
- en: EditorConfig ([http://editorconfig.org/](http://editorconfig.org/)) is an open
    source file format that helps developers configure and enforce formatting and
    code style conventions to achieve consistent, more readable codebases. EditorConfig
    files are easily checked into source control and are applied at repository and
    project levels. EditorConfig conventions override their equivalents in your personal
    settings, such that the conventions of the codebase take precedence over the individual
    developer.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce you to these code style rules, show you how
    to configure them in the Visual Studio 2017 IDE, and save these settings into
    an EditorConfig file. Additionally, we will introduce you to a very popular third-party
    Roslyn analyzer, the PublicAPI analyzer, that allows tracking the public API surface
    of .NET assemblies through additional non-source text files checked into the repo,
    and provides diagnostics and code fixes when there is a breaking API change or
    a new addition to the public API that is not documented in the public API files.
    We will also walk you through configuring StyleCop analyzers for a .NET project,
    a popular third-party code style analyzer, and an alternative to the built-in
    Visual Studio code style rules for enforcing code style.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring C# code style rules built into Visual Studio 2017
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the important categories of code style
    rules built into Visual Studio 2017, and also show you how to configure them in
    Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Visual Studio, navigate to File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Tools | Options to bring up the tools options dialog and navigate
    to the C# code style options (Text Editor | C# | Code Style | General):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b102d1de-6050-423d-b786-8ebc55eef267.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the Severity of ''this.'' preferences to Suggestion, predefined type
    preferences to Warning, and ''var'' preferences to Error. Change the Preference
    of ''var'' preferences from Prefer explicit type to Prefer ''var'':'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2a6f176-6866-4490-bb87-50b245e1f7d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the Severity of Code block preferences to Warning and change the Preference
    For methods to Prefer expression body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8abec331-d7e1-4301-bf53-90099ccd3425.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that all the remaining code style rules (Expression preferences, Variable
    preferences and 'null' checking) have the severity Suggestion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the following code style diagnostics in the error list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cac29f6b-689b-4c7b-a00b-6c56c36f69e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the first IDE0007 error and verify that a light bulb is offered
    for a code fix to use ''var'' instead of explicit type. Verify that hitting the
    *Enter* key fixes the code and the diagnostic is removed from the error list.
    Repeat the exercise for the remaining IDE0007 diagnostics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e0cd8f4-28af-4b99-9305-1193c44b409d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, double-click on the first IDE0012 warning and verify that a light bulb
    is offered to Simplify name ''System.Int32''. This time, click on the Fix all
    occurrences in Document hyperlink and verify a preview changes dialog comes up
    that fixes all instances of *IDE0012* in the document with a single batch fix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab570d39-fbd0-4da5-955b-477bf176a71e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Apply code fixes for each of the remaining diagnostics in the error list and
    verify that the code is now completely clean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following new method to `Class1` and verify that IDE0007 (use ''var''
    instead of explicit type) is raised for the code style violation in the newly
    added code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Code style rules are built into Visual Studio 2017 and are classified into
    the following broad categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '''this.'' preferences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: predefined type preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '''var'' preferences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code block preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expression preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '''null'' checking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each category has a set of one or more rules, each with two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Preference: A string identifying the preference for the rule. Normally, it
    has two possible values, one indicating that the rule should be preferred, and
    the other indicating the rule should not be preferred. For example, for a ''this.''
    preference rule, the possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do not prefer ''this.'': This enforces that code with the `''this.''` prefix
    to member accesses is flagged.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prefer ''this.'': This ensures that code without ''this.'' prefix to member
    accesses is flagged.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Severity: An enum identifying the severity of the rule. It has the following
    possible values and visual effects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Error: Violations of the rule produce error diagnostics in the error list and
    red squiggles in the code editor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Warning: Violations of the rule produce warning diagnostics in the error list
    and green squiggles in the code editor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Suggestion: Violations of the rule produce informational message diagnostics
    in the error list and gray dots under the first couple of characters of violating
    syntax in the code editor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'None: Rule is not enforced in the editor and there are no diagnostics in the
    error list or visual indicators in the editor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can configure the preference and severity of each rule as per their requirements
    using the Tools | Options dialog. Closing and re-opening the source documents
    causes the configuration changes to take effect and the violations are reported
    in the error list and visual indicators (squiggles/dots) appear in the code editor.
    Each rule comes with a code fix and FixAll support to fix one or more instances
    of the violation across the document, project, or solution.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnostics reported for the built-in code style rules are only produced during
    live code editing in Visual Studio 2017 -they do not break the build and are not
    produced during the command-line builds. This behavior may or may not change in
    future versions of Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: There is more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code style rule preferences are saved with user profile settings and persisted
    across Visual Studio sessions on the machine for the same Visual Studio install.
    This means that any project opened in Visual Studio will have the same code style
    enforcement. However, the same sources opened on a different Visual Studio installation
    or a different machine with a different user profile will not have the same code
    style enforcement. To enable same code style enforcement for a repo across all
    users, users need to persist the code style settings into an `.editorconfig` file
    and check it into the repo along with the sources. Refer to, *Using .editorconfig
    file for per-folder configuration for code style rules*, recipe in this chapter
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: Consider exploring the Naming rules in the Tools | Options... dialog under Text
    Editor | C# | Code Style | Naming. These rules allow users to enforce guidelines
    on how each different symbol kind should be named. For example, interface names
    should start with capital letter "I", type name should be Pascal cased, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Using the .editorconfig file for configuration of code style rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to configure the code style rules built
    into Visual Studio 2017 using the EditorConfig file, and how to override these
    settings at different folder levels. These EditorConfig files can be checked into
    the repo along with source files and this ensures the code style settings are
    persisted and enforced for all repo contributors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: Install the `EditorConfig Language Service` VSIX from the Visual Studio extension
    gallery at [http://vsixgallery.com/extension/1209461d-57f8-46a4-814a-dbe5fecef941/](http://vsixgallery.com/extension/1209461d-57f8-46a4-814a-dbe5fecef941/)
    to get intellisense and autocompletion for `.editorconfig` files in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Visual Studio, click on File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new text file named `.editorconfig` to the project with the following
    contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the following code style diagnostics in the error list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3b69fa0-88c8-42ed-a5fd-ba1ab89b5cb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on the first IDE0007 error and verify that a light bulb is offered
    for a code fix to use 'var' instead of explicit type. Verify that hitting the
    *Enter* key fixes the code and the diagnostic is removed from the error list.
    Repeat the exercise for the remaining IDE0007 diagnostics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, double-click on the first IDE0012 warning and verify that a light bulb
    is offered to Simplify name 'System.Int32'. This time, click on the Fix all occurrences
    in **Document** hyperlink and verify that a preview changes dialog comes up, which
    fixes all instances of IDE0012 in the document with a single batch fix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Apply code fixes for each of the remaining diagnostics in the error list and
    verify the code is now completely clean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Add a new folder, say `NewFolder`, to the root of the project and add a new
    class, say `Class2.cs`, to the folder with the following method and verify IDE0007
    (use 'var' instead of explicit type) is raised for the code style violation in
    the newly added code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new text file named `.editorconfig` to `NewFolder` with the following
    contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Close and reopen `Class2.cs` and verify the IDE0007 is no longer reported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the *How it works...,* section in the recipe, *Configuring C# code
    style rules built into Visual Studio 2017,* in this chapter to understand the
    different built-in code style rules in Visual Studio 2017, the Preference and
    Severity settings associated with these rules and how they map to the editor config
    entries. For example, consider the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`dotnet_style_qualification_for_field` is the rule name, with the preference
    `false` and severity `suggestion`. These rules and their settings are enforced
    at each folder level, with the EditorConfig file at any folder level overriding
    the settings from the EditorConfig files in the ancestor directories, until the
    root file path is reached or an EditorConfig file with `root=true` is found. We
    recommend you refer to the following articles to get a detailed understanding
    of EditorConfig and related support in Visual Studio 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Editorconfig file format: [http://EditorConfig.org/](http://editorconfig.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Editorconfig support for .NET code style in VS2017: [https://blogs.msdn.microsoft.com/dotnet/2016/12/15/code-style-configuration-in-the-vs2017-rc-update/](https://blogs.msdn.microsoft.com/dotnet/2016/12/15/code-style-configuration-in-the-vs2017-rc-update/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Editorconfig reference for .NET code style in VS2017: [https://docs.microsoft.com/en-us/visualstudio/ide/EditorConfig-code-style-settings-reference](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the public API analyzer for API surface maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DeclarePublicAPIAnalyzer` analyzer is a popular third-party analyzer developed
    at the ([https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers))
    repo and published as a NuGet package at [https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers](https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers/).
    This analyzer helps track the public surface area of a project with additional
    readable and reviewable text files that live along with the project sources and
    provide API documentation as a source. For example, consider the following source
    file with public and non-public symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The additional API surface text file for this type will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There is an entry for every public symbol: type *Class1*, its constructor and
    it''s members *Field1, Method1* overloads, and the *Property1* getter. Entries
    contain the entire symbol signature, including the return type and parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: With this NuGet package, users can track the shipped and unshipped public API
    surface at any point of time, get live and build breaking diagnostics when the
    public API surface is changed, and apply code fixes to update these additional
    files to match the local API changes. This enables richer and more focused API
    reviews when the actual code changes are large and spread across the code base,
    but the API changes can be reviewed by just looking at core signature changes
    in a single file.
  prefs: []
  type: TYPE_NORMAL
- en: '**DeclarePublicAPIAnalyzer** was written primarily for tracking the public
    API surface of the Roslyn source base at [https://github.com/dotnet/roslyn](https://github.com/dotnet/roslyn)
    and is still very popular among all Roslyn contributors. The analyzer was eventually
    converted into a general-purpose open source analyzer that can be installed for
    any .NET project from [NuGet.org](http://NuGet.org).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will show you how to install and configure the public API
    analyzer for a C# project, walk you through the additional text files tracking
    the public API surface, show you the diagnostics reported from this analyzer with
    API changes, and finally show you how to apply code fixes to fix one or multiple
    instances of these diagnostics to update the API surface text files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Visual Studio, click on File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs` (also mentioned in the *Introduction* section of this
    recipe).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `Roslyn.Diagnostics.Analyzers` NuGet package Version *1.2.0-beta2*.
    For guidance on how to search for and install the analyzer NuGet package in a
    project, refer to the recipe *Searching and installing analyzers through the NuGet
    package manager,* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escalate the severity of *RS0016* and *RS0017* from Warning to Error. For guidance
    on analyzer severity configuration, refer to the recipe, *Viewing and configuring
    analyzers in solution explorer in Visual Studio* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two new text files named `PublicAPI.Shipped.txt` and `PublicAPI.Unshipped.txt`
    to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select both text files in the solution explorer, change their build action
    from Content to AdditionalFiles using the Properties window, and save the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa5b4e08-f2ed-4279-9d0b-d125fdd2209f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify squiggles in the editor and six *RS0016* errors (the ''*x*'' is not
    part of the declared API) in the error list, one for each public symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/997e7f84-5a52-4a60-89cf-7ae5c942be8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Move the caret to the field symbol `Field1` and hit *Ctrl* + dot(.) to get
    the code fix to automatically fix the diagnostic and add the symbol to the unshipped
    public API text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e203eb7-23f2-467a-bbd2-e3ba6549d37f.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply the code fix by hitting the *Enter* key and verify the entry `Class1.Field1
    -> int` is added to `PublicAPI.Unshipped.txt` and the diagnostic and squiggle
    for `Field1` no longer exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the caret to the type declaration for *Class1* and again hit *Ctrl* +
    dot to get the code fix, but this time apply a FixAll code fix to batch fix all
    RS0016 instances in the entire document and add all public symbols to the unshipped
    public API text file. For guidance on applying FixAll code fixes, refer to the
    recipe, *Applying batch code fixes (FixAll) across different scopes: document,
    project and solution*, in [Chapter 3](b14c99a8-f390-4888-a441-54ebfb46d0c7.xhtml),
    *Writing IDE Code Fixes, Refactorings and Intellisense Completion Providers.*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cut the entire contents of `PublicAPI.Unshipped.txt` and paste it into `PublicAPI.Shipped.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Class1.cs`, attempt to introduce a breaking API change by renaming the shipped
    public symbol `Field1` to `Field2`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify *RS0016* is immediately reported for `Field2` and a code fix is offered
    to add a public API entry for `Field2`*.* Apply the code fix to add `Field2` to
    the public API surface and fix the diagnostic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the project and verify that the project fails to build with the following
    *RS0017* diagnostic in the output window for the breaking change: `ClassLibraryPublicAPI.Shipped.txt(3,1,3,21):
    error RS0017: Symbol ''Class1.Field1 -> int'' is part of the declared API, but
    is either not public or could not be found`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Undo the changes in steps 11 and 12.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `Method2` to be a public method, verify *RS0016* is reported for it,
    and use the code fix to add it's API entry to `PublicAPI.Unshipped.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, rename the `unshipped` public symbol from `c` to `Method3`*.* Verify that
    *RS0016* is reported for `Method3` and the code fix replaces the public API entry
    for *Method2* with the entry for `Method3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/629732ef-e6d7-46d1-a818-2416d0aee6f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply the code fix and verify that the build succeeds and there are no diagnostics
    in the error list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`DeclarePublicAPIAnalyzer` is an additional file analyzer that works by comparing
    the public symbols declared in the compilation against the public API entries
    in the shipped and unshipped API surface text files. It uses a unique string representation
    for each symbol, based on its fully qualified name and signature as it''s public
    API entry. It reports diagnostics for any missing or extra public API entries.
    You can find the implementation of this analyzer at [https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIAnalyzer.cs](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIAnalyzer.cs),
    and its corresponding code fix provided at [https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIFix.cs](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIFix.cs).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can read more about how to write and consume additional file analyzers,
    such as the DeclarePublicAPIAnalyzer, at [https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md](https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md).
  prefs: []
  type: TYPE_NORMAL
- en: Using third-party StyleCop analyzers for code style rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will introduce you to a popular third-party analyzer package
    for code style rules for C# projects, StyleCop analyzers. We will walk through
    how to install the StyleCop analyzers NuGet package, give example violations for
    each of the StyleCop rule categories, and show you how to configure and tune individual
    StyleCop rules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Visual Studio, navigate to File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `StyleCop.Analyzers` NuGet package (as of this writing, the latest
    prerelease version is *1.1.0-beta001*). For guidance on how to search for and
    install analyzer NuGet package in a project, refer to the recipe, *Searching and
    installing analyzers through the NuGet package manager* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the following StyleCop diagnostics show up in the error list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9230d185-ddbd-49aa-8c5a-0408dd39dc67.png)'
  prefs: []
  type: TYPE_IMG
- en: Build the project from the command-line or top-level Build menu in Visual Studio
    and verify these diagnostics are also reported from the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on the warning *SA1025* *Code must not contain multiple whitespace
    characters in a row,* verify that the lightbulb is offered in the editor to fix
    the spacing violation, and applying the code fix by hitting the *Enter* key fixes
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e7acd55-b902-4313-9df6-97438d3adb08.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, double-click on the warning SA1200 Using directive must appear within
    a namespace declaration and verify it is reported on the using statement `using
    System;` due to it being outside the namespace `Namespace`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new file to the project named `stylecop.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select `stylecop.json` in the solution explorer, change its build action from
    Content to AdditionalFiles using the Properties window, and save the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd18c60e-a282-4d68-b637-3e3d859ef4da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following text to `stylecop.json` and verify that *SA1200* is no longer
    reported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Move `using System;` inside the namespace `Namespace` and verify *SA1200* *(*using
    directive must appear outside a namespace declaration) is now reported for the
    using statement being inside the namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The StypeCop analyzers contain the following categories of style rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spacing rules (SA1000-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SpacingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SpacingRules.md)):
    Rules that enforce spacing requirements around keywords and symbols in the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readability rules (SA1100-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/ReadabilityRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/ReadabilityRules.md)):
    Rules that ensure that the code is well-formatted and readable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ordering rules (SA1200-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/OrderingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/OrderingRules.md)):
    Rules that enforce a standard ordering scheme for code contents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Naming rules (SA1300-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/NamingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/NamingRules.md)):
    Rules that enforce naming requirements for members, types, and variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintainability rules (SA1400-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/MaintainabilityRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/MaintainabilityRules.md)):
    Rules that improve code maintainability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout rules (SA1500-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/LayoutRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/LayoutRules.md)):
    Rules that enforce code layout and line spacing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation rules (SA1600-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/DocumentationRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/DocumentationRules.md)):
    Rules that verify the content and formatting of code documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code example that we provided had the following StyleCop diagnostics by
    category:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spacing**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1025 (Code must not contain multiple whitespace characters in a row)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readability**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1101 (Prefix local calls with this)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ordering**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1200 (Using directive must appear within a namespace declaration)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Naming**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1300 (Element "method" must begin with an uppercase letter)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1303 (Const field names must begin with uppercase letter)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintainability**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1401 (Field must be private)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1402 (File may only contain a single type)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1502 (Element must not be on a single line)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1503 (Braces must not be omitted)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1505 (An opening brace must not be followed by a blank line)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1600 (Elements must be documented)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SA1633 (The file header is missing or not located at the top of the file)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The StyleCop analyzers package also comes with code fixes for certain rules
    to fix the violations.
  prefs: []
  type: TYPE_NORMAL
- en: The StyleCop analyzers can be installed either as a NuGet package ([http://www.nuget.org/packages/StyleCop.Analyzers/](http://www.nuget.org/packages/StyleCop.Analyzers/))
    for specific C# projects/solutions or as a VSIX Extension enabled for all C# projects.
    The NuGet package enables the build-time StyleCop diagnostics and hence is the
    recommended way of installing the analyzers.
  prefs: []
  type: TYPE_NORMAL
- en: The code style is generally considered to be a very subjective matter, and hence
    it is very important that individual rules can be selectively enabled, suppressed,
    or configured by the end user.
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop rules can be enabled or suppressed using the code analysis ruleset
    files (see the recipe, *Using ruleset file and ruleset editor to configure analyzers,*
    in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml), *Consuming Diagnostic
    Analyzers in .NET Projects* for reference).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stylecop rules can be configured and tuned using a `stylecop.json` file added
    to the project as an additional non-source file. For example, consider the ordering
    rule *SA1200* (using directive must appear within a namespace declaration) at
    ([http://www.nuget.org/packages/StyleCop.Analyzers/](http://www.nuget.org/packages/StyleCop.Analyzers/)).
    By default, this rule reports violations if using directives are placed at the
    top of the file *outside* a namespace declaration. However, this rule can be configured
    to be its semantic opposite and require using directives to be outside a namespace
    declaration and report violations if they are *inside*, using the following `stylecop.json`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The StyleCop analyzers repo has thorough documentation for each category of
    rules, as well as individual style rules. You can find the documentation at [https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation).
  prefs: []
  type: TYPE_NORMAL
