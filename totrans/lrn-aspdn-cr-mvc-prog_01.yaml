- en: Chapter 1. Introduction to ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core, the latest version of ASP.NET MVC from Microsoft, is the server-side
    web application development framework which helps you to build web applications
    effectively. This runs on top of the ASP.NET 5 platform, which enables your application
    to be run on a wide variety of platforms, including Linux and Mac OS X. This opens
    up heaps of opportunities and it is exciting to be a .NET developer in these times.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Fundamental concepts about web applications—HTTP, client-side, and server-side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three programming models of ASP.NET—ASP.NET Web Forms, ASP.NET Web Pages, and
    ASP.NET MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Philosophy of ASP.NET MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features of ASP.NET Core and ASP.NET 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before discussing the ASP.NET Core and its features, let us understand the fundamentals
    of web applications development. I strongly believe the principle that if you
    want to be an expert at something, you need to be very good at the fundamentals. It
    will be helpful in debugging the issues and fixing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having said that we are going to discuss the following key fundamentals:'
  prefs: []
  type: TYPE_NORMAL
- en: How web applications work, and a bit about HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side and server-side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just three key concepts. No big deal!
  prefs: []
  type: TYPE_NORMAL
- en: How web applications work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All web applications, irrespective of whether they are built using ASP.NET MVC,
    Ruby on Rails, or any other new shiny technology, work on the HTTP protocol. Some
    applications use HTTPS (a secure version of HTTP), where data is encrypted before
    passing through the wire. But HTTPS still uses HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: So what is an HTTP protocol?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**HTTP** stands for **Hyper Text Transfer Protocol** and is an application
    protocol which is designed for distributed hypermedia systems. "Hyper Text" in
    Hyper Text Transfer Protocol refers to the structured text that uses hyperlinks
    for traversing between the documents. Standards for HTTP were developed by the 
    **Internet Engineering Task Force** ( **IETF** ) and the  **World Wide Web Consortium**
    ( **W3C** ). The current version of HTTP is HTTP/2 and was standardized in 2015. It
    is supported by the majority of web browsers, such as Internet Explorer, Chrome,
    and Firefox.'
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP protocol (a protocol is nothing but a set of rules which govern the
    communication) is a stateless protocol that follows the request-response pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Request-response pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before talking about the request-response pattern, let us discuss a couple
    of terms: Client and server. A server is a computing resource that receives the
    requests from the clients and serves them. A server, typically, is a high-powered
    machine with huge memory to process many requests. A client is a computing resource
    that sends a request and receives the response. A client, typically, could be
    a web server or any application that sends the requests.'
  prefs: []
  type: TYPE_NORMAL
- en: Coming back to the request-response pattern, when you request a resource from
    a server, the server responds to you with the requested resource. A resource could
    be anything—a web page, text file, an image , or another data format.
  prefs: []
  type: TYPE_NORMAL
- en: '![Request-response pattern](img/Image00001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You fire a request. The server responds with the resource. This is called a
    **request-response pattern** .
  prefs: []
  type: TYPE_NORMAL
- en: Stateless nature of HTTP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you request for the same resource again, the server responds to you with
    the requested resource again without having any knowledge of the fact that the
    same was requested and served earlier. The HTTP protocol inherently does not have
    any knowledge of the state knowledge of any of the previous requests received
    and served. There are several mechanisms available that maintain the state, but
    the HTTP protocol by itself does not maintain the state. We will explain the mechanisms
    to maintain the state later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me explain to you about the statelessness and the request-response pattern
    to you with a simple practical example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You type the following URL: [https://en.wikipedia.org/wiki/ASP.NET_MVC](https://en.wikipedia.org/wiki/ASP.NET_MVC)
    . This is a Wikipedia web page about ASP.NET MVC.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the preceding URL, the browser fires a request to the Wikipedia server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server at Wikipedia serves you the ASP.NET MVC web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser receives that web page and presents it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You request the same page again by typing the same URL again ([https://en.wikipedia.org/wiki/ASP.NET_MVC](https://en.wikipedia.org/wiki/ASP.NET_MVC)
    ) and press *Enter* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser again fires the request to the Wikipedia server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wikipedia serves you the same ASP.NET MVC web page without being aware of the
    fact that the same resource was requested previously from the same resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, there are several mechanisms to maintain the state. Let
    us assume, for the time being, that no such mechanism is implemented here. I know
    that I am being too simplistic here, but this explains the point.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side and server-side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is necessary to understand the client-side and server-side of web applications
    and what can be done either side. With respect to web applications, your client
    is the browser and your server could be the web server/application server.
  prefs: []
  type: TYPE_NORMAL
- en: The browser side is whatever that happens in your browser. It is the place where
    your JavaScript code runs and your HTML elements reside.
  prefs: []
  type: TYPE_NORMAL
- en: The server-side is whatever happens at the server at the other end of your computer.
    The request that you fire from your browser has to travel through the wire (probably
    across the network) to execute some server-side code and returns the appropriate
    response. Your browser is oblivious to the server-side technology or the language
    your server-side code is written in. The server-side is also the place where your
    C# code resides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us discuss some of the facts to make things clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fact 1** : All browsers can only understand HTML, CSS, and JavaScript, irrespective
    of the browser vendor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might be using Internet Explorer, Firefox, Chrome, or any other browser.
    Still, the fact that your browser can understand only HTML, CSS, and JavaScript
    holds true. It cannot understand C#. It cannot understand Java. Nor Ruby. Only
    HTML, CSS, and JavaScript. This is the reason why you can access the web applications,
    built using any technology could be accessed by the same browser.![Client-side
    and server-side](img/Image00002.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fact 2** : The purpose of any web development framework is to convert your
    server-side code to HTML, CSS, and JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is related to the previous point. As browsers can only understand HTML,
    CSS, and JavaScript, all the web development technologies should convert your
    server-side code to HTML, CSS, and JavaScript so that your browser can understand.
    This is the primary purpose of any web development framework. This is true for
    whether you build your web applications using ASP.NET MVC, ASP.NET Web Forms,
    Ruby on Rails, or J2EE. Each web development framework may have a unique concept/implementation
    regarding how to generate the HTML, CSS, and JavaScript, and may handle features
    such as security performance differently. But still, each framework has to produce
    the HTML, because that's what your browsers understand.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though all the requests of the HTTP protocol follow the request-response
    pattern, the way the requests are sent can vary from one to the next. The HTTP
    method defines how the request is being sent to the server.
  prefs: []
  type: TYPE_NORMAL
- en: The available methods in HTTP are `GET` , `HEAD` , `POST` , `PUT` , `DELETE`
    , `TRACE` , `OPTIONS` , `CONNECT` , and `PATCH` . In most of the web applications,
    the `GET` and `POST` methods are widely used. In this section, we will discuss
    these methods. Later, we will discuss other HTTP methods on a need-to-know basis.
  prefs: []
  type: TYPE_NORMAL
- en: GET method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`GET` is a method of the HTTP protocol which is used to get a resource from
    the server. Requests which use the `GET` method should only retrieve the data
    and should not have any side effect. This means that if you fire the same `GET`
    request, again and again, you should get the same data, and there should not be
    any change in the state of the server, as a result of this GET request.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `GET` method, the parameters are sent as part of the request URL and
    therefore will be visible to the end user. The advantage of this approach is that
    the user can bookmark the URL and visit the page again whenever they want. An
    example is  [www.yourwebsite.com?tech=mvc6&db=sql](http://www.yourwebsite.com?tech=mvc6&db=sql)
    .
  prefs: []
  type: TYPE_NORMAL
- en: We are passing a couple of parameters in the preceding `GET` request. `tech`
    is the first parameter with the value `mvc6` and `db` is the second parameter
    with the value `sql` . Assume your website takes the preceding parameters with
    values and searches in your database to retrieve the blog posts that talk about
    `mvc6` and `sql`  before presenting those blog posts to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![GET method](img/Image00003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The disadvantage of the `GET` method is that, as the data is passed in clear
    text in the URL as parameters, it cannot be used to send the sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, most browsers have limitations on the number of characters in the
    URL, so, when using `GET` requests, we cannot send large amounts of data.
  prefs: []
  type: TYPE_NORMAL
- en: POST method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `POST` request is generally used to update or create resources at the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data is passed in the body of the request. This has the following implications:'
  prefs: []
  type: TYPE_NORMAL
- en: You can send sensitive information to the server, as the data is embedded in
    the body of the request and it will not be visible to the end user in the URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the data is not sent through the request URL, it does not take up space in
    the URL and therefore it has no issues with the URL length limitations.![POST
    method](img/Image00004.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have covered the fundamentals, we can now proceed to discuss ASP.NET.
  prefs: []
  type: TYPE_NORMAL
- en: What is ASP.NET?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET is a server-side web application development framework allowing developers
    to build web applications, websites, and web services. It was first introduced
    by Microsoft in early 2002, and in these 14 years, it has undergone a lot of changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, ASP.NET has three programming models:'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Web Forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASP.NET Web Pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASP.NET MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though the end result of all of the preceding programming models is to
    produce the dynamic web pages effectively, the methodologies that they follow
    differ from each other. Let us discuss each one of these programming models to
    understand their principles.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Web Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Historically, when ASP.NET was first introduced, ASP.NET Web Forms was the only
    programming model available to programmers to develop web applications in ASP.NET.
  prefs: []
  type: TYPE_NORMAL
- en: The ASP.NET Web Forms model abstracted the web so that it can maintain the state
    even though the web is inherently stateless.
  prefs: []
  type: TYPE_NORMAL
- en: It also supports the event-driven programming model at the server-side. This
    has helped desktop application developers to have a smooth transition in moving
    into web application development.
  prefs: []
  type: TYPE_NORMAL
- en: Like PHP and several other web application frameworks, ASP.NET Web Forms is
    a file-based framework where users access the web page by means of accessing a
    file at the server. The server will process your request, convert all of your
    server-side components in that file to HTML, and send it back to the requesting
    client.
  prefs: []
  type: TYPE_NORMAL
- en: Each web page in ASP.NET Web Forms is represented by two files: `.aspx` and
    `.aspx.cs` or `.aspx.vb` . The `.aspx` file contains your front end components-all
    of your ASP controls and your HTML elements. The `.aspx.cs`  (if you are using
    C# as the code-behind language) or `.aspx.vb`  (if you are using Visual Basic
    as the code-behind programming language) contains the code for events which are
    happening at the web page.
  prefs: []
  type: TYPE_NORMAL
- en: This was the predominant programming model prior to the arrival of ASP.NET MVC,
    and this programming model is still being used to maintain the production applications
    that were written using this model.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Web Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ASP.NET Web Pages are primarily targeted at small web applications where the
    data-processing logic is written directly on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET MVC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ASP.NET MVC is the implementation of the MVC pattern in ASP.NET. The disadvantages
    of ASP.NET Web Forms, such as limited control over the generation of HTML are
    resolved in ASP.NET MVC. As most of the modern applications are controlled by
    client-side JavaScript libraries/frameworks, such as **jQuery** , **KnockoutJS,**
    and **AngularJS** , having complete control over the generated HTML is of paramount
    importance.
  prefs: []
  type: TYPE_NORMAL
- en: Let us talk a bit about the Model-View-Controller pattern and how it benefits
    the web application development.
  prefs: []
  type: TYPE_NORMAL
- en: '**Model-View-Controller (MVC) pattern** : This is a software architectural
    pattern which helps in defining the responsibility for each of the components
    and how they fit together in achieving the overall goal. This pattern is primarily
    used in building user interfaces, and is applicable in many areas including developing
    desktop applications and web applications. But I am going to explain the MVC pattern
    from the context of web development.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Primarily, the MVC pattern has three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model** : This component represents your domain data. Please note that this
    is not your database. This model component can talk to your database, but the
    model only represents your domain data. For example, if you are building an e-commerce
    web application, the model component may contain classes such as Product, Supplier,
    and Inventory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View** : This component is responsible for what to present to the user. Usually,
    this component would contain your HTML and CSS files. This may also include the
    layout information governing how your web application looks to the end user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller** : As the name implies, the controller is responsible for interacting
    with different components. It receives the request (through the routing module),
    talks to the model, and sends the appropriate view to the user.![ASP.NET MVC](img/Image00005.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This separation of responsibilities brings great flexibility to the web application
    development, allowing each area to be managed separately and independently.
  prefs: []
  type: TYPE_NORMAL
- en: Features of ASP.NET MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET MVC is an opinionated application development framework that prefers
    some functionality to be handled in a certain unique way. Let us discuss each
    of the features of ASP.NET MVC, along with the benefits they bring to the table.
  prefs: []
  type: TYPE_NORMAL
- en: Convention over configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a design methodology that significantly reduces the number of decisions
    while developing the application, and thus making it simpler.
  prefs: []
  type: TYPE_NORMAL
- en: If you have built any application using any technology, you might be using some
    kind of XML file where you have to configure everything in it. Even for the simpler
    straightforward things, we might have to configure the things over there.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET MVC embraces *convention over configuration* completely. It is the philosophy
    where you can be certain of how it is going to work without ever configuring same.
  prefs: []
  type: TYPE_NORMAL
- en: Let me give you a simple example. All Controller code resides in the `Controller`
    folder, and Views have a separate folder for each of the Controllers. Whenever
    a request comes, ASP.NET MVC knows where to find the Controller and its associated
    View without any configuration. This methodology results in less configuration
    and less time in debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Separation of concerns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed earlier, ASP.NET MVC has three major components—Model, Controller,
    and Views. This clearly separates the responsibilities so that the UI designer
    or UI developer can work on the View while backend developers can work on the
    Model to build a data domain for the application or to talk to the database. As
    the duties of each of the components are clearly defined and separated, the work
    can be done in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: Control over the generated HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have any experience in building an ASP.NET Web Forms application, you
    might have used ASP controls such as `asp:textbox` . Even though these controls
    have a lot of benefits, they have their cons as well. Developers cannot have complete
    control over the generated HTML when using these controls. Of course, you can
    set some properties in ASP control which in turn set some attributes in your generated
    HTML. But complete control is not possible. ASP.NET MVC HTML helpers and Tag helpers
    in ASP.NET Core provide better control over the generated HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Better support for unit testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As each of the components is separated and compartmentalized, creating the
    unit test cases becomes easier to achieve:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unified MVC and Web API Controller in ASP.NET Core** : In earlier versions
    of ASP.NET MVC, different controllers were used for MVC (`System.Web.MVC.Controller`
    ) and Web API (`System.Web.Http.ApiController` ). In ASP.NET Core, there is only
    one base controller that supports creating both MVC controllers and Web API controllers.
    With respect to routing, all the controllers use the same routes. Of course, you
    can use convention-based routing or attribute-based routing depending on your
    needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note about Web API** : Web API is the Microsoft technology for building web
    services over the HTTP protocol. HTTP is not only limited to serving web pages.
    Web API could be used for building API services and data. The advantage of this
    approach is that the services which are built using Web API could be consumed
    by a wide range of clients such as, browsers, mobile applications, and desktop
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for the earlier version of ASP.NET MVC (till ASP.NET MVC 5) is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ASP.NET 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET 5 is the latest framework from Microsoft for building modern cloud-based
    applications using .NET. It is a cross-platform framework so that you can run
    your applications built on ASP.NET 5 on any platform, such as Linux or Mac OS
    X and also on Microsoft Windows, obviously. ASP.NET 5 is open source, and the
    complete source code is available on GitHub at  [https://github.com/aspnet/home](https://github.com/aspnet/home)
    .
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of ASP.NET MVC, ASP.NET Core—runs on the ASP.NET 5 platform.
  prefs: []
  type: TYPE_NORMAL
- en: Features of ASP.NET 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cross-platform support** : Applications that are built on top of ASP.NET
    5 can run on any platform where ASP.NET 5 is installed. This means that the applications
    that you build on ASP.NET 5 can run on Apple OS X and Linux machines. Deploying
    ASP.NET Core on a Linux machine will be explained in a later chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better support for client-side development** : ASP.NET 5 is designed to work
    seamlessly with a range of client-side frameworks, such as **AngularJs** , **Knockout**
    , **Bootstrap** , and  **React.js** .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned the basics of web development, including what
    constitutes the server-side and client-side. We have even discussed the features
    of ASP.NET Core and ASP.NET 5.
  prefs: []
  type: TYPE_NORMAL
