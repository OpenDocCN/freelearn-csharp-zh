["```cs\npublic interface ISortStrategy\n{\n    IOrderedEnumerable<string> Sort(IEnumerable<string> input);\n}\n```", "```cs\npublic class SortAscendingStrategy : ISortStrategy\n{\n    public IOrderedEnumerable<string> Sort(IEnumerable<string> input)\n        => input.OrderBy(x => x);\n}\npublic class SortDescendingStrategy : ISortStrategy\n{\n    public IOrderedEnumerable<string> Sort(IEnumerable<string> input)\n        => input.OrderByDescending(x => x);\n}\n```", "```cs\nusing System.Collections;\nusing System.Collections.Immutable;\nnamespace MySortingMachine;\npublic sealed class SortableCollection : IEnumerable<string>\n{\n    private ISortStrategy _sortStrategy;\n    private ImmutableArray<string> _items;\n    public IEnumerable<string> Items => _items;\n    public SortableCollection(IEnumerable<string> items)\n    {\n        _items = items.ToImmutableArray();\n        _sortStrategy = new SortAscendingStrategy();\n    }\n    public void SetSortStrategy(ISortStrategy strategy)\n        => _sortStrategy = strategy;\n    public void Sort()\n    {\n        _items = _sortStrategy\n            .Sort(Items)\n            .ToImmutableArray()\n        ;\n    }\n    public IEnumerator<string> GetEnumerator()\n        => Items.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator()\n        => ((IEnumerable)Items).GetEnumerator();\n}\n```", "```cs\nusing MySortingMachine;\nSortableCollection data = new(new[] { \n    \"Lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet.\" });\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.ConfigureHttpJsonOptions(options => {\n    options.SerializerOptions.Converters\n        .Add(new JsonStringEnumConverter());\n});\nvar app = builder.Build();\n```", "```cs\napp.MapGet(\"/\", () => data);\napp.MapPut(\"/\", (ReplaceSortStrategy sortStrategy) =>\n{\n    ISortStrategy strategy = sortStrategy.SortOrder == SortOrder.Ascending\n        ? new SortAscendingStrategy()\n        : new SortDescendingStrategy();\n    data.SetSortStrategy(strategy);\n    data.Sort();\n    return data;\n});\napp.Run();\npublic enum SortOrder\n{\n    Ascending,\n    Descending\n}\npublic record class ReplaceSortStrategy(SortOrder SortOrder);\n```", "```cs\n[\n  \"Lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"sit\",\n  \"amet.\"\n]\n```", "```cs\nPUT https://localhost:7280/\nContent-Type: application/json\n{\n    \"sortOrder\": \"Descending\"\n}\n```", "```cs\n[\n  \"sit\",\n  \"Lorem\",\n  \"ipsum\",\n  \"dolor\",\n  \"amet.\"\n]\n```", "```cs\npublic interface ICar { }\npublic interface IBike { }\npublic class LowEndCar : ICar { }\npublic class LowEndBike : IBike { }\npublic class HighEndCar : ICar { }\npublic class HighEndBike : IBike { }\n```", "```cs\npublic interface IVehicleFactory\n{\n    ICar CreateCar();\n    IBike CreateBike();\n}\npublic class LowEndVehicleFactory : IVehicleFactory\n{\n    public IBike CreateBike() => new LowEndBike();\n    public ICar CreateCar() => new LowEndCar();\n}\npublic class HighEndVehicleFactory : IVehicleFactory\n{\n    public IBike CreateBike() => new HighEndBike();\n    public ICar CreateCar() => new HighEndCar();\n}\n```", "```cs\nusing Xunit;\nnamespace Vehicles;\npublic abstract class BaseAbstractFactoryTest<TConcreteFactory, TExpectedCar, TExpectedBike>\n    where TConcreteFactory : IVehicleFactory, new()\n{\n    // Test methods here\n}\n```", "```cs\n[Fact]\npublic void Should_create_a_ICar_of_type_TExpectedCar()\n{\n    // Arrange\n    IVehicleFactory vehicleFactory = new TConcreteFactory();\n    var expectedCarType = typeof(TExpectedCar);\n    // Act\n    ICar result = vehicleFactory.CreateCar();\n    // Assert\n    Assert.IsType(expectedCarType, result);\n}\n```", "```cs\n[Fact]\npublic void Should_create_a_IBike_of_type_TExpectedBike()\n{\n    // Arrange\n    IVehicleFactory vehicleFactory = new TConcreteFactory();\n    var expectedBikeType = typeof(TExpectedBike);\n    // Act\n    IBike result = vehicleFactory.CreateBike();\n    // Assert\n    Assert.IsType(expectedBikeType, result);\n}\n```", "```cs\nnamespace Vehicles.LowEnd;\npublic class LowEndVehicleFactoryTest : BaseAbstractFactoryTest<LowEndVehicleFactory, LowEndCar, LowEndBike>\n{ \n}\n```", "```cs\nnamespace Vehicles.HighEnd;\npublic class HighEndVehicleFactoryTest : BaseAbstractFactoryTest<HighEndVehicleFactory, HighEndCar, HighEndBike>\n{\n}\n```", "```cs\npublic class MiddleGradeCar : ICar { }\npublic class MiddleGradeBike : IBike { }\n```", "```cs\npublic class MidRangeVehicleFactory : IVehicleFactory\n{\n    public IBike CreateBike() => new MiddleGradeBike();\n    public ICar CreateCar() => new MiddleGradeCar();\n}\n```", "```cs\nnamespace Vehicles.MidRange;\npublic class MidRangeVehicleFactoryTest : BaseAbstractFactoryTest<MidRangeVehicleFactory, MidRangeCar, MidRangeBike>\n{\n}\n```", "```cs\npublic interface ILargeVehicleFactory\n{\n    HighEndBike CreateHighEndBike();\n    HighEndCar CreateHighEndCar();\n    LowEndBike CreateLowEndBike();\n    LowEndCar CreateLowEndCar();\n}\n```", "```cs\npublic interface ILargeVehicleFactory\n{\n    HighEndBike CreateHighEndBike();\n    HighEndCar CreateHighEndCar();\n    LowEndBike CreateLowEndBike();\n    LowEndCar CreateLowEndCar();\n    MidRangeBike CreateMidRangeBike();\n    MidRangeCar CreateMidRangeCar();\n}\n```", "```cs\npublic class MySingleton\n{\n    private static MySingleton? _instance;\n    private MySingleton() { }\n    public static MySingleton Create()\n    {\n        _instance ??= new MySingleton();\n        return _instance;\n    }\n}\n```", "```cs\nif (_instance == null)\n{\n    _instance = new MySingleton();\n}\n```", "```cs\npublic class MySingletonTest\n{\n    [Fact]\n    public void Create_should_always_return_the_same_instance()\n    {\n        var first = MySingleton.Create();\n        var second = MySingleton.Create();\n        Assert.Same(first, second);\n    }\n}\n```", "```cs\npublic class MySingletonWithLock\n{\n    private static readonly object _myLock = new();\n    private static MySingletonWithLock? _instance;\n    private MySingletonWithLock() { }\n    public static MySingletonWithLock Create()\n    {\n        lock (_myLock)\n        {\n            _instance ??= new MySingletonWithLock();\n        }\n        return _instance;\n    }\n}\n```", "```cs\npublic class MySimpleSingleton\n{\n    public static MySimpleSingleton Instance { get; } = new MySimpleSingleton();\n    private MySimpleSingleton() { }\n}\n```", "```cs\nMySimpleSingleton.Instance.SomeOperation();\n```", "```cs\n[Fact]\npublic void Create_should_always_return_the_same_instance()\n{\n    var first = MySimpleSingleton.Instance;\n    var second = MySimpleSingleton.Instance;\n    Assert.Same(first, second);\n}\n```", "```cs\npublic class MyAmbientContext\n{\n    public static MyAmbientContext Current { get; } = new MyAmbientContext();\n    private MyAmbientContext() { }\n    public void WriteSomething(string something)\n    {\n        Console.WriteLine($\"This is your something: {something}\");\n    }\n}\n```", "```cs\n[Fact]\npublic void Should_echo_the_inputted_text_to_the_console()\n{\n    // Arrange (make the console write to a StringBuilder\n    // instead of the actual console)\n    var expectedText = \"This is your something: Hello World!\" + Environment.NewLine;\n    var sb = new StringBuilder();\n    using (var writer = new StringWriter(sb))\n    {\n        Console.SetOut(writer);\n        // Act\n        MyAmbientContext.Current.WriteSomething(\"Hello World!\");\n    }\n    // Assert\n    var actualText = sb.ToString();\n    Assert.Equal(expectedText, actualText);\n}\n```"]