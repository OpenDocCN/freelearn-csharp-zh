- en: Chapter 5. Building a Scrollable Viewport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a new scene and build a functional scrollable
    viewport in which we can drop objects that will stick to it. We will add interesting
    features such as scroll bars and keyboard scrolling with arrows.
  prefs: []
  type: TYPE_NORMAL
- en: This scrollable viewport will be the base of our game from the previous chapter.
    So, from here, the user will become the player. The idea is that the player can
    scroll and drag barriers on a viewport, which will take a few seconds to build.
    Enemies will come down from the top of the screen. If an enemy touches a barrier,
    he or she will be destroyed along with the barrier—but we will deal with enemies
    in [Chapter 7](ch07.html "Chapter 7. Creating a Game with NGUI"), *Creating a
    Game with NGUI.*
  prefs: []
  type: TYPE_NORMAL
- en: The more barriers there are on the scene, the longer the building process will
    be for the future barriers— this is the same idea with the barriers' cooldown.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Game scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need to have our **GameManager** and **Notification** GameObjects as
    prefabs for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: From our **Menu** scene, create these two prefabs by dragging them separately
    in the folder of your choice in the **Project** view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create a new scene with *Ctrl* + *N* and perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl* + *S* to save it, and enter `Game` as the scene's name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our new scene, delete the **Main Camera** GameObject. We won't need it for
    this scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **GameManager** prefab from the **Project** view into the **Hierarchy**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **UI Tool** wizard by navigating to **NGUI** | **Create a New UI**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new **Layer** named `Game`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select this **Game** layer for the **Layer** parameter in our **UI Tool** wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create Your UI** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our new **Camera** GameObject, and set its **Background Color** to **R**:
    `0`, **G**: `0`, **B**: `0`, and **A**: `255`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure your **Color** selector popup is in the **RGBA** values and not **HSVA**.
    This can be done by using the button next to the **Sliders** option when you click
    on a **Color** parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select our **UI Root (2D)** GameObject and then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Scaling Style** parameter to **FixedSize**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Manual Height** to `1080`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, our scene and UI are ready. Your **UI Root (2D)** script should be as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the Game scene](img/8667OT_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's start creating our scrollable viewport.
  prefs: []
  type: TYPE_NORMAL
- en: The scrollable viewport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by creating a clipped, draggable background, and then add linked
    scroll bars as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The scrollable viewport](img/8667OT_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Draggable background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want the player to be able to scroll on both axes. That means we need a background
    both larger and taller than the screen size. For this game, we will need quite
    a large environment to force him or her to scroll regularly. Let's create one
    that is twice the screen's size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **Panel** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Viewport`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Clipping** parameter to **Alpha Clip**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Clipping** **Size** to `1920` x `1080`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a **Draggable Panel** component to it by navigating to **Component** |
    **NGUI** | **Interaction** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Drag Effect** parameter to **Momentum**. We don't want the player
    to scroll out of bounds with the spring effect.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Momentum Amount** value to `10`. Over 10, the background will continue
    scrolling too much on release.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Scale** parameter to {`1`, `1`, `0`} to enable X and Y scrolling.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Drag Panel Contents** component to it by navigating to **Component**
    | **NGUI** | **Interaction**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a collider to it by navigating to **NGUI** | **Attach a Collider**, and
    set its **Size** to {`3840`, `2160`, `1`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that our **Draggable Panel** is set up, let''s add a tiling background
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Draggable background](img/8667OT_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the **Widget Tool** wizard by navigating to **NGUI** | **Create a Widget**.
    Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the **Atlas** field is set to **None**, drag the **SciFi Atlas** prefab in
    it by navigating to **Assets** | **NGUI** | **Examples** | **Atlases**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Sprite** template.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Honeycomb** sprite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **Viewport** selected; click on the **Add To** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new **Sprite (Honeycomb)** GameObject and then perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Background`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Sprite Type** to **Tiled**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** value to {`0`, `40`, `40`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** value to `0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `3840` x `2160`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the play button. That's it, we now have a scrollable viewport. You
    can drag the background by dragging your mouse while clicking.
  prefs: []
  type: TYPE_NORMAL
- en: Linking scroll bars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add scroll bars to know where we are on the viewport. They must be on
    a separate panel rendered over our viewport, so that they won''t move with the
    draggable background. Perform the following steps to add the scroll bars:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Anchor** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child with *Alt* + *Shift* + *N* and rename it as `UI`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Panel** component to it by navigating to **Component** | **NGUI** |
    **UI**, and set its **Depth** to `1` so that it can be displayed over the viewport.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Widget tool** wizard by navigating to **NGUI** | **Create a Widget**.
    Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Scrollbar** for the **Template** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Dark** sprite as **Background**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Highlight** sprite as **Foreground**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Horizontal** for **Direction**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **UI** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: On our **Widget Tool** wizard window, select **Vertical** for **Direction**.
    With our **UI** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have created both our horizontal and vertical scroll bars at the center
    of the scene as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Linking scroll bars](img/8667OT_05_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, we need to place them correctly and adjust their size to fit the entire
    screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the vertical **Scroll Bar** GameObject and rename it as `VerticalScrollbar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach an **Anchor** component to it by navigating to **NGUI** | **Attach**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Viewport** GameObject in the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter to **TopRight**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** to {`-11`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Background** GameObject from **VerticalScrollbar**. Then perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`130`, `255`, `245`, `110`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Center** coordinates of **Box Collider** to {`0`, `-540`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Size** of **Box Collider** to {`22`, `1080`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Stretch** component to it by navigating to **Component** | **NGUI**
    | **UI**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Style** parameter to **Vertical**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Relative Size** values to {`1`, `0.983`} in order to leave space for
    our horizontal scroll bar at the bottom of the screen.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Foreground** GameObject from **VerticalScrollbar**, and set its
    **Color Tint** to {`0`, `255`, `128`, `255`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our vertical scroll bar is configured. Let's do the same for the horizontal
    scroll bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the horizontal **Scroll Bar** GameObject, and rename it as `HorizontalScrollbar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach an **Anchor** component to it by navigating to **NGUI** | **Attach**.
    Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Viewport** GameObject into the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter to **BottomLeft**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** to {`0`, `11`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Background** GameObject from **HorizontalScrollbar** and perform
    these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`130`, `255`, `245`, `110`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Center** coordinates of **Box Collider** to {`960`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Size** of **Box Collider** to {`1920`, `22`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Stretch** component to it by navigating to **Component** | **NGUI**
    | **UI**, and set its **Style** parameter to **Horizontal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Foreground** GameObject from **HorizontalScrollbar**, and set its
    **Color Tint** to {`0`, `255`, `128`, `255`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Good. Both our horizontal and vertical scroll bars are set up. Now, we need
    to assign them to our scrollable viewport by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Viewport** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **HorizontalScrollbar** GameObject from **UI** to the **Horizontal
    Scroll Bar** field in **UIDraggable Panel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **VerticalScrollbar** GameObject from **UI** to the **Vertical Scroll
    Bar** field in **UIDraggable Panel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Show Scroll Bars** parameter to **Always**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the play button. That''s it. Our scroll bars can be used to scroll,
    and they indicate where we are on the viewport as we scroll. Your hierarchy should
    be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linking scroll bars](img/8667OT_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's add keyboard scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard scrolling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this game, scrolling with the keyboard is important. In order to do so,
    we will create a custom script that will force our scroll bars to move depending
    on the pressed key. Select our **Viewport** GameObject, and attach a new `KeyboardScroll.cs`
    script to it. Open this new script, and declare the required variables and the
    `Awake()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Okay, we have both of our scroll bars on `Awake()`, and a float value for sensitivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s check the horizontal and vertical input axes at each frame, and
    change our scroll bars'' values consequently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and click on the play button. You can now scroll using the keyboard
    arrows. You may also adjust the **Sensitivity** parameter in the **Inspector**
    window as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to create draggable barriers that we can drop inside our **Viewport**
    GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: Creating draggable barriers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is time to create our draggable barriers. The player will be able to drag-and-drop
    the **BarrierObject** prefab in the **Viewport** GameObject. This **BarrierObject**
    prefab will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating draggable barriers](img/8667OT_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The BarrierObject prefab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create our **BarrierObject** prefab''s holder that will contain
    the draggable object:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **UI** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child with *Alt* + *Shift* + *N* and rename it as `Barrier`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Widget Tool** wizard by navigating to **NGUI** | **Open** and perform
    the given steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Sprite** for the **Template** parameter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Dark** sprite for the **Sprite** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **Barrier** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our new barrier''s **Sprite (Dark)** GameObject and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Background`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Sprite Type** to **Sliced**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`0`, `250`, `250`, `170`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** value to `0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `200` x `200`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Barrier** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a collider to it by navigating to **NGUI** | **Attach a Collider** and
    perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Center** coordinates in **Box Collider** to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Size** parameter of **Box Collider** to {`200`, `200`, `1`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach **Anchor** to it by navigating to **NGUI** | **Attach**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Viewport** GameObject in its **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter to **TopLeft**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** to {`100`, `-100`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we have our **BarrierObject** holder''s background at the top left-hand
    corner as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The BarrierObject prefab](img/8667OT_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create the actual **BarrierObject** prefab, which will be a custom button:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Barrier** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Widget tool** wizard by navigating to **NGUI** | **Create a Widget**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **SciFi Font – Normal** prefab into the **Widget Tool** wizard's **Font**
    field by navigating to **Assets** | **NGUI** | **Examples** | **Atlases** | **SciFi**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Button** for the **Template** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Highlight** sprite for the **Background** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **Barrier** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our new **Button** GameObject from **Barrier**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `BarrierObject`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Center** coordinates **Box Collider** to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Size** of **Box Collider** to {`160`, `160`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the **Background** GameObject from **BarrierObject** into the **Target**
    field in **UIButton**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Normal Color** to {`125`, `255`, `155`, `130`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Hover Color** to {`100`, `255`, `60`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pressed Color** to {`20`, `255`, `0`, `160`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Disabled Color** to {`115`, `115`, `155`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** GameObject from **BarrierObject** and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** value to `1`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `160` x `160`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** GameObject from **BarrierObject** and then perform the
    given steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its text to `[99FF99]Barrier`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok. We now have our **BarrierObject** in the **Barrier** holder. Let''s make
    it draggable by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **BarrierObject** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a **Drag Object** component to it by navigating to **Component** | **NGUI**
    | **Interaction**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **BarrierObject** GameObject in its **Target** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Scale** parameter to {`1`, `1`, `0`} to avoid Z scrolling.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Drag Effect** parameter to **None**. We want it to be precise.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and attach a new `BarrierObjectController.cs` C# script to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the play button. The **BarrierObject** prefab is now draggable. Now,
    it is time to handle the drop on the **Viewport** GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue, drag our **BarrierObject** in a folder of your choice in
    the **Project** view to make it a prefab.
  prefs: []
  type: TYPE_NORMAL
- en: Dropping a barrier on Viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to drop a barrier inside the **Viewport** GameObject, we need to catch
    the **Viewport** GameObject''s `OnDrop()` event and check what was dropped:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Viewport** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and attach a new `ViewportHolder.cs` C# script to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this new `ViewportHolder.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this script, we can add a new `OnDrop()` method that will be called when
    an object is dropped on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and click on the play button. Surprisingly, when you drop the
    **BarrierObject** on the **Viewport** GameObject, nothing happens!
  prefs: []
  type: TYPE_NORMAL
- en: That's because, like in [Chapter 3](ch03.html "Chapter 3. Enhancing your UI"),
    *Enhancing your UI*, the Collider of **BarrierObject** is enabled when the `OnPress(false)`
    event occurs. This obstructs the collision detection of **UICamera**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just have to disable the collider while dragging, and re-enable it when
    dropping it. Let''s also make it reposition itself if it isn''t dropped on the
    **Viewport** GameObject. Open our `BarrierObjectController.cs` script, and add
    following `OnPress()` method to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and click on the play button. This time, the collider is disabled
    when the **BarrierObject** prefab is dropped. So, it is indeed dropped on the
    collider of **Viewport** and destroyed instantly.
  prefs: []
  type: TYPE_NORMAL
- en: If it is dropped somewhere else (out of screen or on the barrier's container),
    it is automatically replaced at the center of the barrier's container. Let's make
    this **BarrierObject** a prefab by dragging it in the folder of your choice inside
    the **Project** view.
  prefs: []
  type: TYPE_NORMAL
- en: We can now create an **ActiveBarrier** prefab that will be instantiated on the
    **Viewport** GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ActiveBarrier prefab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a **BarrierObject** is dropped on the **Viewport** GameObject, we want
    to instantiate an **ActiveBarrier** prefab that will take a few seconds to build,
    using a slider as status indicator as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an ActiveBarrier prefab](img/8667OT_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ActiveBarrier prefab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the **ActiveBarrier** prefab by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Viewport** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child with *Alt* + *Shift* + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select this new child and rename it as `ActiveBarrier`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Widget Tool** wizard by navigating to **NGUI** | **Create a Widget**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Progress Bar** for the **Template** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Dark** sprite as **Empty**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Highlight** sprite as **Full**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **ActiveBarrier** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A **Progress Bar** has just been created as child of the **ActiveBarrier**
    GameObject as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The ActiveBarrier prefab](img/8667OT_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It doesn''t look like anything. Let''s configure it to look like an **ActiveBarrier**
    prefab by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our new **Background** GameObject from **Progress Bar** and perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck its **Fill Center** boolean to only keep edges.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`100`, `200`, `100`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `1` so that it can be rendered over the **Viewport** background.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `160` x `160`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Foreground** GameObject from **Progress Bar** and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`75`, `190`, `95`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** value to `2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `160` x `160`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Progress Bar** from **ActiveBarrier** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Slider`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Transform Position** to {`-80`, `0`, `0`} to center it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **UISlider** value to `0` to make sure it's empty at start.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **ActiveBarrier** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a collider to it by navigating to **NGUI** | **Attach**, and set its
    **Size** to {`160`, `160`, `1`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The slider of **ActiveBarrier** GameObject is ready. If you click on the play
    button and change the **Slider** value in the **Inspector** view during runtime,
    you will see the **ActiveBarrier** prefab building itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a label that will show the status of **ActiveBarrier**: either **Building**
    or **Built**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate our **Label** GameObject in **BarrierObject** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside our **ActiveBarrier** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform Position** to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Localize component to it by navigating to **Component** | **NGUI** | **UI**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the key of **UILocalize** to `BuildingBarrier`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **ActiveBarrier** in the folder of your choice inside the **Project**
    view to make it a prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the **ActiveBarrier** instance from the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, our **ActiveBarrier** prefab is ready. Now, add the following localization
    strings to `English.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add the following localization strings to `French.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, everything is set for our **ActiveBarrier** prefab.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating the ActiveBarrier prefab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our prefab, we need to instantiate it when a **BarrierObject**
    prefab is dropped inside the **Viewport** GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our `ViewportHolder.cs` script and declare our necessary variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the script. Let''s go back to the scene and assign these variables in
    the **Inspector** view:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Viewport** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **BarrierObject** prefab from the **Project** view in the **BarrierObject**
    prefab field of **Viewport Holder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **ActiveBarrier** prefab from the **Project** view in the **ActiveBarrier**
    prefab field **Viewport Holder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Barrier** GameObject in **UI** from the **Hierarchy** view to the
    **Barrier Container** field in **Viewport Holder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The necessary variables are assigned. Go back to our `ViewportHolder.cs` script,
    and add the following two lines to call the appropriate methods, after `Destroy(droppedObj)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can add these two methods that will recreate our **BarrierObject**
    prefab. Also, we can add an **ActiveBarrier** prefab to the **Viewport** GameObject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Click on the play button. When you drag the **BarrierObject** prefab onto the
    **Viewport** GameObject, it creates our **ActiveBarrier** prefab; and it recreates
    a **BarrierObject** prefab to be able to drag another one.
  prefs: []
  type: TYPE_NORMAL
- en: Barrier's building process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Right now, our dropped **ActiveBarrier** instances stay empty and never build.
    Let''s make them fill themselves at a speed depending on the number of barriers
    in the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **ActiveBarrier** prefab in the **Project** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and add an `ActiveBarrierController.cs` script to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open this new `ActiveBarrierController.cs` script, and add these necessary
    variables and the `Awake()` method to initialize them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our necessary variables initialized, let''s add a coroutine
    that will increase the **UISlider** value over time, at a rate depending on a
    given `buildTime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok. Let''s add the `BuildFinished()` method that will set the **Slider** value
    to `1` (in case this value is higher), and change the **UILocalize** key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Good. We just need to edit the `ViewportHolder.cs` script to add a `barrierCount`
    variable, and start the new `Build()` coroutine from **ActiveBarrier**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ViewportHolder.cs` script and declare a new `int` after our `barrierContainer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add these two simple lines of code to update the `barrierCount`
    variable and start the `Build()` coroutine on our new **ActiveBarrier** prefab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Click on the play button. Now, our **ActiveBarrier** prefab builds itself depending
    on the number of **ActiveBarriers** on the scene!
  prefs: []
  type: TYPE_NORMAL
- en: Forwarding events to viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that you cannot scroll if you click on an **ActiveBarrier**
    prefab. That's because it catches the events instead of our viewport.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s simply forward its events to the viewport:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **ActiveBarrier** prefab in the **Project** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Forward Events** component to it by navigating to **Component**
    | **NGUI** | **Interaction** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check its **On Press** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check its **On Drag** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ActiveBarrierController.cs` script that is attached to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to assign the target variable of the **UIForward Event** component
    when the **ActiveBarrier** prefab is created. To do so, add a new `Start()` method
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now scroll no matter what. We are missing something: a cooldown on the
    BarrierObjects that also depends on the number of ActiveBarriers.'
  prefs: []
  type: TYPE_NORMAL
- en: BarrierObject cooldown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement the cooldown system that will deactivate the **BarrierObject**
    button as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BarrierObject cooldown](img/8667OT_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, we will make the barrier's apparition smoother by tweening its scale.
  prefs: []
  type: TYPE_NORMAL
- en: Cooldown implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to implement the required cooldown, we need to open the `BarrierObjectController.cs`
    script and add the following two necessary variables with an initialization on
    `Awake()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the button and label, we can add a `Cooldown()` coroutine
    that will deactivate the button and update the label to show the remaining time
    to the player:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous coroutine updates the label and decreases the cooldown. We can
    now add the `CooldownFinished()` method that will reactivate the button and reset
    the label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Great, everything is ready for our cooldown. We just need to start the `Cooldown()`
    coroutine when a new **BarrierObject** prefab is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, let''s go back to our `ViewportHolder.cs` script and add
    the following line at the very end of the `RecreateBarrierObject()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Perfect. Here, we needed to pass `barrierCount +1` as argument because at this
    stage it is not yet updated (it is incremented in the `CreateActiveBarrier()`
    method).
  prefs: []
  type: TYPE_NORMAL
- en: Click on the play button. When you drop a **BarrierObject** prefab on the **Viewport**
    GameObject, you will only be able to drop another one when the cooldown is finished.
    The more barriers you have, the longer the cooldown.
  prefs: []
  type: TYPE_NORMAL
- en: BarrierObject smooth apparition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a TweenScale to make the barrier''s availability more obvious to
    the player. Go back to our `BarrierObjectController.cs` script and add the following
    two lines at the very end of the `CooldownFinished()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That's better. Now, the animated apparition of **BarrierObject** attracts the
    player's eye. But, hey, we created a notification in the previous chapter. Let's
    reuse it to make it even more obvious!
  prefs: []
  type: TYPE_NORMAL
- en: The barrier availability tool tip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up notifications in the game using our previous work:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag our **Notification** prefab inside our **UI** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new **Notification** GameObject in the **Hierarchy** view, and then
    perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Layer** to **Game** (in the top right-hand corner of the **Inspector**
    view).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop up will appear. Click on **Yes**, and change children.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `NotificationManager.cs` script that is attached to it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we need to add a new notification type. This is done by adding a third
    line to our type `enum`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following localization string to `English.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, add the following localization string to `French.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything is set. Now, go back to our `BarrierObjectController.cs` script,
    and add the following line of code at the very end of the `CooldownFinished()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Click on the play button. A localized notification will appear as soon as a
    new barrier is available. This way, we are sure that the player will not miss
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a scrollable viewport using a scrollable
    background. Also, we linked the mouse drag, scroll bars, and keyboard arrows to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: We used the **UIDrag Object** component to create our drag-and-drop system,
    allowing us to drag objects inside the scrollable viewport.
  prefs: []
  type: TYPE_NORMAL
- en: Coroutines helped us to create the barriers' building process and cooldown system.
    The **UIForward Events** component was used to forward events to the viewport.
    Finally, we reused our **Notification** prefab inside our new **Game** scene.
  prefs: []
  type: TYPE_NORMAL
- en: We now have the basic elements for [Chapter 7](ch07.html "Chapter 7. Creating
    a Game with NGUI"), *Creating a Game with NGUI*. Now, it is time to discover how
    to add sprites and fonts to NGUI with [Chapter 6](ch06.html "Chapter 6. Atlas
    and Font Customization"), *Atlas and Font Customization*. We will then use our
    own assets to create a game!
  prefs: []
  type: TYPE_NORMAL
