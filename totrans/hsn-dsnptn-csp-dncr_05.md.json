["```cs\ndotnet new sln\n```", "```cs\ndotnet new classlib --name FlixOne.InventoryManagement\n```", "```cs\ndotnet sln add .\\FlixOne.InventoryManagement\\FlixOne.InventoryManagement.csproj\n```", "```cs\ndotnet new console --name FlixOne.InventoryManagementClient\n```", "```cs\ndotnet add reference ..\\FlixOne.InventoryManagement\\FlixOne.InventoryManagement.csproj\n```", "```cs\ndotnet new mstest --name FlixOne.InventoryManagementTests\n```", "```cs\ndotnet add reference ..\\FlixOne.InventoryManagement\\FlixOne.InventoryManagement.csproj\n```", "```cs\ndotnet sln add .\\FlixOne.InventoryManagementClient\\FlixOne.InventoryManagementClient.csproj\ndotnet sln add .\\FlixOne.InventoryManagementTests\\FlixOne.InventoryManagementTests.csproj\n```", "```cs\n[TestMethod]\nprivate void AddInventoryCommand_Successful()\n{\n  // create an instance of the command\n  // add a new book with parameter \"name\"\n  // verify the book was added with the given name with 0 quantity\n\n  Assert.Inconclusive(\"AddInventoryCommand_Successful has not been implemented.\");\n}\n```", "```cs\nprivate static void Main(string[] args)\n{\n    Greeting();\n\n    // note: inline out variable introduced as part of C# 7.0\n    GetCommand(\"?\").RunCommand(out bool shouldQuit); \n\n    while (!shouldQuit)\n    { \n        // handle the commands\n        ...\n    }\n\n    Console.WriteLine(\"CatalogService has completed.\"); \n}\n```", "```cs\n    while (!shouldQuit)\n    { \n        Console.WriteLine(\" > \");\n        var input = Console.ReadLine();\n        var command = GetCommand(input);\n\n        var wasSuccessful = command.RunCommand(out shouldQuit);\n\n        if (!wasSuccessful)\n        {\n            Console.WriteLine(\"Enter ? to view options.\");\n        }\n    }\n```", "```cs\npublic class HelpCommand\n{\n    public bool RunCommand(out bool shouldQuit)\n    {\n        Console.WriteLine(\"USAGE:\");\n        Console.WriteLine(\"\\taddinventory (a)\");\n        ...\n        Console.WriteLine(\"Examples:\");\n        ...\n\n        shouldQuit = false;\n        return true;\n    }\n}\n```", "```cs\npublic class QuitCommand\n{\n    public bool RunCommand(out bool shouldQuit)\n    {\n        Console.WriteLine(\"Thank you for using FlixOne Inventory Management System\");\n\n        shouldQuit = true;\n        return true;\n    }\n}\n```", "```cs\npublic abstract class InventoryCommand\n{\n    private readonly bool _isTerminatingCommand;\n    internal InventoryCommand(bool commandIsTerminating)\n    {\n        _isTerminatingCommand = commandIsTerminating; \n    }\n    public bool RunCommand(out bool shouldQuit)\n    {\n        shouldQuit = _isTerminatingCommand;\n        return InternalCommand();\n    }\n\n    internal abstract bool InternalCommand();\n}\n```", "```cs\npublic class HelpCommand : InventoryCommand\n{\n    public HelpCommand() : base(false) { }\n\n    internal override bool InternalCommand()\n    { \n        Console.WriteLine(\"USAGE:\");\n        Console.WriteLine(\"\\taddinventory (a)\");\n        ...\n        Console.WriteLine(\"Examples:\");\n        ... \n        return true;\n    }\n}\n```", "```cs\npublic (bool wasSuccessful, bool shouldQuit) RunCommand()\n{\n    /* additional code hidden */\n\n    return (InternalCommand(), _isTerminatingCommand);\n}\n```", "```cs\ninternal abstract class NonTerminatingCommand : InventoryCommand\n{\n    protected NonTerminatingCommand() : base(commandIsTerminating: false)\n    {\n    }\n}\n```", "```cs\ninternal class HelpCommand : NonTerminatingCommand\n{\n    internal override bool InternalCommand()\n    {\n        Interface.WriteMessage(\"USAGE:\");\n        /* additional code hidden */\n\n        return true;\n    }\n}\n```", "```cs\npublic class ConsoleUserInterface\n{\n    // read value from console\n\n    // message to the console\n\n    // writer warning message to the console\n}\n```", "```cs\npublic string ReadValue(string message)\n{\n    Console.ForegroundColor = ConsoleColor.Green;\n    Console.Write(message);\n    return Console.ReadLine();\n}\n```", "```cs\npublic void WriteMessage(string message)\n{\n    Console.ForegroundColor = ConsoleColor.Green;\n    Console.WriteLine(message);\n}\n```", "```cs\npublic void WriteWarning(string message)\n{\n    Console.ForegroundColor = ConsoleColor.DarkYellow;\n    Console.WriteLine(message);\n}\n```", "```cs\ninternal bool InternalCommand(string command)\n{\n    switch (command)\n    {\n        case \"?\":\n        case \"help\":\n            return RunHelpCommand(); \n        case \"a\":\n        case \"addinventory\":\n            return RunAddInventoryCommand(); \n        case \"q\":\n        case \"quit\":\n            return RunQuitCommand();\n        case \"u\":\n        case \"updatequantity\":\n            return RunUpdateInventoryCommand();\n        case \"g\":\n        case \"getinventory\":\n            return RunGetInventoryCommand();\n    }\n    return false;\n}\n```", "```cs\npublic interface IParameterisedCommand\n{\n    bool GetParameters();\n}\n```", "```cs\npublic class AddInventoryCommand : InventoryCommand, IParameterisedCommand\n{\n    public string InventoryName { get; private set; }\n\n    /// <summary>\n    /// AddInventoryCommand requires name\n    /// </summary>\n    /// <returns></returns>\n    public bool GetParameters()\n    {\n        if (string.IsNullOrWhiteSpace(InventoryName))\n            InventoryName = GetParameter(\"name\");\n\n        return !string.IsNullOrWhiteSpace(InventoryName);\n    }    \n}\n```", "```cs\npublic (bool wasSuccessful, bool shouldQuit) RunCommand()\n{\n    if (this is IParameterisedCommand parameterisedCommand)\n    {\n        var allParametersCompleted = false;\n\n        while (allParametersCompleted == false)\n        {\n            allParametersCompleted = parameterisedCommand.GetParameters();\n        }\n    }\n\n    return (InternalCommand(), _isTerminatingCommand);\n}\n```", "```cs\ninternal override bool GetParameters()\n{\n    return true;\n}\n```", "```cs\ninternal class QuitCommand : InventoryCommand\n{\n    internal override bool InternalCommand()\n    {\n        var console = new ConsoleUserInterface();\n        console.WriteMessage(\"Thank you for using FlixOne Inventory Management System\");\n\n        return true;\n    }\n}\n```", "```cs\ninternal class QuitCommand : InventoryCommand\n{\n    public QuitCommand(IUserInterface userInterface) : \n           base(commandIsTerminating: true, userInteface: userInterface)\n    {\n    }\n\n    internal override bool InternalCommand()\n    {\n        Interface.WriteMessage(\"Thank you for using FlixOne Inventory Management System\");\n\n        return true;\n    }\n}\n```", "```cs\npublic abstract class InventoryCommand\n{\n    private readonly bool _isTerminatingCommand;\n    protected IUserInterface Interface { get; }\n\n    internal InventoryCommand(bool commandIsTerminating, IUserInterface userInteface)\n    {\n        _isTerminatingCommand = commandIsTerminating;\n        Interface = userInteface;\n    }\n    ...\n}\n```", "```cs\npublic (bool wasSuccessful, bool shouldQuit) RunCommand()\n{\n    if (this is IParameterisedCommand parameterisedCommand)\n    {\n        var allParametersCompleted = false;\n\n        while (allParametersCompleted == false)\n        {\n            allParametersCompleted = parameterisedCommand.GetParameters();\n        }\n    }\n\n    return (InternalCommand(), _isTerminatingCommand);\n}\n\ninternal abstract bool InternalCommand();\n```", "```cs\ninternal string GetParameter(string parameterName)\n{\n    return Interface.ReadValue($\"Enter {parameterName}:\"); \n}\n```", "```cs\npublic abstract class InventoryCommand\n{\n    private readonly bool _isTerminatingCommand;\n    protected IUserInterface Interface { get; }\n\n    protected InventoryCommand(bool commandIsTerminating, IUserInterface userInteface)\n    {\n        _isTerminatingCommand = commandIsTerminating;\n        Interface = userInteface;\n    }\n    ...\n}\n```", "```cs\npublic (bool wasSuccessful, bool shouldQuit) RunCommand()\n{\n    if (this is IParameterisedCommand parameterisedCommand)\n    {\n        var allParametersCompleted = false;\n\n        while (allParametersCompleted == false)\n        {\n            allParametersCompleted = parameterisedCommand.GetParameters();\n        }\n    }\n\n    return (InternalCommand(), _isTerminatingCommand);\n}\n\ninternal abstract bool InternalCommand();\n```", "```cs\ninternal class QuitCommand : InventoryCommand\n{\n    internal QuitCommand(IUserInterface userInterface) : base(true, userInterface) { }\n\n    protected override bool InternalCommand()\n    {\n        Interface.WriteMessage(\"Thank you for using FlixOne Inventory Management System\");\n\n        return true;\n    }\n}\n```", "```cs\nusing System.Runtime.CompilerServices;\n[assembly: InternalsVisibleTo(\"FlixOne.InventoryManagementTests\")]\n```", "```cs\npublic interface IUserInterface : IReadUserInterface, IWriteUserInterface { }\n\npublic interface IReadUserInterface\n{\n    string ReadValue(string message);\n}\n\npublic interface IWriteUserInterface\n{\n    void WriteMessage(string message);\n    void WriteWarning(string message);\n}\n```", "```cs\npublic void WriteWarning(string message)\n{\n    Assert.IsTrue(_expectedWriteWarningRequestsIndex < _expectedWriteWarningRequests.Count,\n                  \"Received too many command write warning requests.\");\n\n    Assert.AreEqual(_expectedWriteWarningRequests[_expectedWriteWarningRequestsIndex++], message,                             \"Received unexpected command write warning message\");\n}\n```", "```cs\npublic string ReadValue(string message)\n{\n    Assert.IsTrue(_expectedReadRequestsIndex < _expectedReadRequests.Count,\n                  \"Received too many command read requests.\");\n\n    Assert.AreEqual(_expectedReadRequests[_expectedReadRequestsIndex].Item1, message, \n                    \"Received unexpected command read message\");\n\n    return _expectedReadRequests[_expectedReadRequestsIndex++].Item2;\n}\n```", "```cs\npublic void Validate()\n{\n    Assert.IsTrue(_expectedReadRequestsIndex == _expectedReadRequests.Count, \n                  \"Not all read requests were performed.\");\n    Assert.IsTrue(_expectedWriteMessageRequestsIndex == _expectedWriteMessageRequests.Count, \n                  \"Not all write requests were performed.\");\n    Assert.IsTrue(_expectedWriteWarningRequestsIndex == _expectedWriteWarningRequests.Count, \n                  \"Not all warning requests were performed.\");\n}\n```", "```cs\n[TestMethod]\npublic void QuitCommand_Successful()\n{\n    var expectedInterface = new Helpers.TestUserInterface(\n        new List<Tuple<string, string>>(), // ReadValue()\n        new List<string> // WriteMessage()\n        {\n            \"Thank you for using FlixOne Inventory Management System\"\n        },\n        new List<string>() // WriteWarning()\n    );\n\n    // create an instance of the command\n    var command = new QuitCommand(expectedInterface);\n\n    var result = command.RunCommand();\n\n    expectedInterface.Validate();\n\n    Assert.IsTrue(result.shouldQuit, \"Quit is a terminating command.\");\n    Assert.IsTrue(result.wasSuccessful, \"Quit did not complete Successfully.\");\n}\n```"]