["```cs\n<SurveyPrompt Title=\"How is Blazor working for you?\" /> \n```", "```cs\n<h1>Hello @Text!</h1>\n@code {\n    [Parameter] public string? Text { get; set; }\n} \n```", "```cs\n<Hello Text=\"World\" /> \n```", "```cs\n<h1>Hello @Text!</h1>\n@code {\n    [Parameter] \n    [EditorRequired]\n    public string? Text { get; set; }\n} \n```", "```cs\n[Parameter] \n[SupplyParameterFromQuery]\npublic int? Increment { get; set; } \n```", "```cs\n/counter \n```", "```cs\n    @attribute [Authorize] \n    ```", "```cs\n    @inject HttpClient Http \n    ```", "```cs\n<base href=\"/\" /> \n```", "```cs\n/counter \n```", "```cs\n@page \"/counter\" \n```", "```cs\n@page \"/routing\"\n@page \"/routing/{text}\"\n<h1>Blazor WebAssembly is @Text!</h1>\n@code {\n    [Parameter] public string? Text { get; set; }\n    protected override void OnInitialized()\n    {\n        Text = Text ?? \"fantastic\";\n    }\n} \n```", "```cs\n/routing \n```", "```cs\n/routing/amazing \n```", "```cs\n@page \"/routing/{text?}\"\n<h1>Blazor WebAssembly is @Text!</h1>\n@code {\n    [Parameter] public string? Text { get; set; }\n    protected override void OnInitialized()\n    {\n        Text = Text ?? \"fantastic\";\n    }\n} \n```", "```cs\n@page \"/error/{*path}\"\n@page \"/warning/{*path}\"\n<h1>Catch All</h1>\nRoute: @Path\n@code {\n    [Parameter] public string? Path { get; set; }\n} \n```", "```cs\n@page \"/counter/{increment:int}\" \n```", "```cs\n@page \"/counter/{increment:int?}\" \n```", "```cs\n<h1>Blazor is @Text!</h1> \n```", "```cs\n@if (forecasts == null)\n{\n    <p><em>Loading...</em></p>\n} \n```", "```cs\n@if (DateTime.Now.DayOfWeek.ToString() != \"Friday\")\n{\n    <p>Today is not Friday.</p>\n}\nelse if (DateTime.Now.Day != 13)\n{\n    <p>Today is not the 13th.</p>\n}\nelse\n{\n    <p>Today is Friday the 13th.</p>\n} \n```", "```cs\n@switch (value)\n{\n    case 1:\n        <p>The value is 1!</p>\n        break;\n    case 42:\n        <p>Your number is 42!</p>\n        break;\n    default:\n        <p>Your number was not 1 or 42.</p>\n        break;\n}\n@code {\n    private int value = 2;\n} \n```", "```cs\n@for (var i = 0; i < forecasts.Count(); i++)\n{\n   <div>@forecasts[i].Summary</div>\n}\n@code {\n    private WeatherForecast[] forecasts;\n} \n```", "```cs\n@foreach (var forecast in forecasts)\n{\n    <div>@forecast.Summary</div>\n}\n@code {\n    private WeatherForecast[] forecasts;\n} \n```", "```cs\n@while (i < forecasts.Count())\n{\n    <div>@forecasts[i].Summary</div>\n    i++;\n}\n@code {\n    private WeatherForecast[] forecasts;\n    private int i = 0;\n} \n```", "```cs\n@do\n{\n    <div>@forecasts[i].Summary</div>\n    i++;\n} while (i < forecasts.Count());\n@code {\n    private WeatherForecast[] forecasts;\n    private int i = 0;\n} \n```", "```cs\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" \n          content=\"width=device-width, \n                   initial-scale=1.0, \n                   maximum-scale=1.0, \n                   user-scalable=no\" />\n    <title>Demo</title>\n    <base href=\"/\" />\n    <link href=\"css/bootstrap/bootstrap.min.css\" \n          rel=\"stylesheet\" />\n    <link href=\"css/app.css\" rel=\"stylesheet\" />\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" />\n    <link href=\"Demo.styles.css\" rel=\"stylesheet\" />\n</head> \n```", "```cs\n<body>\n    <div id=\"app\">\n        <svg class=\"loading-progress\">\n            <circle r=\"40%\" cx=\"50%\" cy=\"50%\" />\n            <circle r=\"40%\" cx=\"50%\" cy=\"50%\" />\n        </svg>\n        <div class=\"loading-progress-text\"></div>\n    </div>\n    <div id=\"blazor-error-ui\">\n        An unhandled error has occurred.\n        <a href=\"\" class=\"reload\">Reload</a>\n        <a class=\"dismiss\">X</a>\n    </div>\n    <script src=\"img/blazor.webassembly.js\"></script>\n</body> \n```", "```cs\n<div id=\"app\">\n</div> \n```", "```cs\n<Router AppAssembly=\"@typeof(App).Assembly\">\n    <Found Context=\"routeData\">\n        <RouteView RouteData=\"@routeData\" \n                   DefaultLayout=\"@typeof(MainLayout)\" />\n        <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n    </Found>\n    <NotFound>\n        <PageTitle>Not found</PageTitle>\n        <LayoutView Layout=\"@typeof(MainLayout)\">\n            <p role=\"alert\">\n                Sorry, there's nothing at this address.\n                </p>\n        </LayoutView>\n    </NotFound>\n</Router> \n```", "```cs\npublic static async Task Main(string[] args)\n{\n    var builder = WebAssemblyHostBuilder.CreateDefault(args);\n    builder.RootComponents.Add<App>(\"#app\");\n    builder.RootComponents.Add<HeadOutlet>(\"head::after\");\n    builder.Services.AddScoped(sp => \n        new HttpClient { \n            BaseAddress = \n            new Uri(builder.HostEnvironment.BaseAddress) \n        });\n    await builder.Build().RunAsync();\n} \n```", "```cs\n**@inherits LayoutComponentBase**\n<div class=\"page\">\n    <div class=\"sidebar\">\n        <NavMenu />\n    </div>\n    <main>\n        <div class=\"top-row px-4\">\n            <a href=\"https://docs.microsoft.com/aspnet/\"  \n               target=\"_blank\">About</a>\n        </div>\n        <article class=\"content px-4\">\n            @Body\n        </article>\n    </main>\n</div> \n```", "```cs\n<div class=\"@NavMenuCssClass nav-scrollable\" @onclick=\"ToggleNavMenu\">\n    <nav class=\"flex-column\">\n        <div class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" \n                     href=\"\" Match=\"NavLinkMatch.All\">\n                <span class=\"oi oi-home\" \n                      aria-hidden=\"true\">\n                </span> Home\n            </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"counter\">\n                <span class=\"oi oi-plus\" \n                      aria-hidden=\"true\">\n                </span> Counter\n            </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"fetchdata\">\n                <span class=\"oi oi-list-rich\" \n                      aria-hidden=\"true\">\n                </span> Fetch data\n            </NavLink>\n        </div>\n    </nav>\n</div> \n```", "```cs\n<a href=\"counter\" class=\"nav-link active\">\n    <span class=\"oi oi-plus\" aria-hidden=\"true\"></span>\n    Counter\n</a> \n```", "```cs\n@page \"/\"\n<PageTitle>Index</PageTitle>\n<h1>Hello, world!</h1>\nWelcome to your new app.\n<SurveyPrompt Title=\"How is Blazor working for you?\" /> \n```", "```cs\n@page \"/counter\"\n<PageTitle>Counter</PageTitle>\n<h1>Counter</h1>\n<p role=\"status\">Current count: @currentCount</p>\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n@code {\n    private int currentCount = 0;\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n} \n```", "```cs\n@page \"/fetchdata\"\n@inject HttpClient Http \n```", "```cs\n<PageTitle> Weather forecast</PageTitle>\n<h1>Weather forecast</h1>\n<p>This component demonstrates fetching data from the server.</p>\n@if (forecasts == null)\n{\n    <p><em>Loading...</em></p>\n}\nelse\n{\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Temp. (C)</th>\n                <th>Temp. (F)</th>\n                <th>Summary</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var forecast in forecasts)\n            {\n                <tr>\n                    <td>@forecast.Date.ToShortDateString()</td>\n                    <td>@forecast.TemperatureC</td>\n                    <td>@forecast.TemperatureF</td>\n                    <td>@forecast.Summary</td>\n                </tr>\n            }\n        </tbody>\n    </table>\n} \n```", "```cs\n@code {\n    private WeatherForecast[]? forecasts;\n    protected override async Task OnInitializedAsync()\n    {\n        forecasts = await\n            Http.GetFromJsonAsync<WeatherForecast[]>\n            (\"sample-data/weather.json\");\n    }\n    public class WeatherForecast\n    {\n        public DateOnly Date { get; set; }\n        public int TemperatureC { get; set; }\n        public string? Summary { get; set; }\n        public int TemperatureF => \n            32 + (int)(TemperatureC / 0.5556);\n    }\n} \n```", "```cs\n    <Counter /> \n    ```", "```cs\n    <h1>Count by 1</h1> \n    ```", "```cs\n    <div class=\"alert alert-info\">\n        <h1>Count by 1</h1>\n        <p role=\"status\">Current value: @currentCount</p>\n        <button class=\"btn btn-primary\"\n                @onclick=\"IncrementCount\">\n            Click me\n        </button>\n    </div> \n    ```", "```cs\n    private int increment = 1; \n    ```", "```cs\n    private void IncrementCount()\n    {\n        currentCount += increment;\n    } \n    ```", "```cs\n    [Parameter] \n    [SupplyParameterFromQuery]\n    public int? Increment { get; set; } \n    ```", "```cs\n    protected override void OnParametersSet()\n    {\n        if (Increment.HasValue)\n            increment = Increment.Value;\n    } \n    ```", "```cs\n    <h1>Count by @increment</h1> \n    ```", "```cs\n    /counter?increment=5 \n    ```", "```cs\n    <hr>\n    <Counter Increment=\"7\"/> \n    ```", "```cs\n    @page \"/counter/{increment:int}\" \n    ```", "```cs\n    /counter/4 \n    ```", "```cs\n    /counter/a \n    ```", "```cs\n    public `partial` class Counter{} \n    ```"]