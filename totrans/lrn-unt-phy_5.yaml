- en: Chapter 5. Joint Types and Their Properties
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 联结类型及其属性
- en: In this chapter, we will learn about types of joints components and their properties.
    Joints are important components of Unity3D and provide different types of joints.
    We will learn about all these joints with interesting examples, that is, by creating
    a door animation with a hinge joint, a ball's spring movement using a spring joint,
    and bone movement using character joints.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于关节组件类型及其属性的内容。关节是Unity3D的重要组件，提供了不同类型的关节。我们将通过有趣的示例学习所有这些关节，即通过创建带有铰链关节的门动画、使用弹簧关节的球的弹簧运动以及使用角色关节的骨骼运动。
- en: 'In this chapter, we will learn more about the following joints:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下关节的更多内容：
- en: Types of joints
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关节类型
- en: Configurable joints
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可配置关节
- en: Handling movement and motion of configurable joints
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理可配置关节的运动和运动
- en: Now, we will learn about different types of joints.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习不同类型的关节。
- en: Types of joints
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关节类型
- en: Joints are one of the most important components of Unity3D. In this chapter,
    we will learn more about joints.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关节是Unity3D中最重要组件之一。在本章中，我们将学习更多关于关节的内容。
- en: '![Types of joints](img/00053.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![关节类型](img/00053.jpeg)'
- en: Apart from the previously mentioned joints in the preceding diagram, there is
    also a configurable joint that allows you to create complex joint configuration
    using different joints. Let's take a look at the different types of joints with
    examples.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面图中提到的关节外，还有一个可配置的关节，允许您使用不同的关节创建复杂的关节配置。让我们通过示例来看看不同类型的关节。
- en: Fixed joint
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定关节
- en: 'The fixed joint is used to group two Rigidbodies together in their bound position.
    We use a fixed joint to parent the object in the hierarchy. By using this joint,
    we can lock the game object in the world. In this example, we are going to learn
    how we can implement a fixed joint. Let''s get started:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 固定关节用于将两个刚体在其绑定位置上组合在一起。我们使用固定关节将对象添加到层次结构中。通过使用此关节，我们可以锁定游戏对象在世界中的位置。在本例中，我们将学习如何实现固定关节。让我们开始吧：
- en: Create a new scene and save it as `Fixed Joint Example`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为`Fixed Joint Example`。
- en: As shown in the following screenshot, create a **Sphere** game object and assign
    a **Rigidbody** component to it.![Fixed joint](img/00054.jpeg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，创建一个**球体**游戏对象并将其分配一个**刚体**组件。![固定关节](img/00054.jpeg)
- en: As you can see in the following screenshot, apply the **green ball Material**
    option and the **Use Gravity** option from **Rigidbody** for the sphere game object.![Fixed
    joint](img/00055.jpeg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，为球体游戏对象应用**绿色球体材质**选项和**使用重力**选项，来自**刚体**。![固定关节](img/00055.jpeg)
- en: To apply a fixed joint as shown in the following screenshot, click on **Component**
    and select **Physics**. From the **Physics** menu, select **Fixed Joint**.![Fixed
    joint](img/00056.jpeg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要应用如下截图所示的固定关节，点击**组件**并选择**物理**。从**物理**菜单中选择**固定关节**。![固定关节](img/00056.jpeg)
- en: After applying **Fixed Joint**, look at the **Inspector** panel; you will see
    the options with the components, as shown in the following screenshot:![Fixed
    joint](img/00057.jpeg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用**固定关节**后，查看**检查器**面板；您将看到与组件相关的选项，如下截图所示：![固定关节](img/00057.jpeg)
- en: '**Connected Body** refers to the other Rigidbody on which **Fixed Joint** is
    dependent upon. Now we need to create a connector for it. Let''s create a **Cylinder**
    game object that will work as a connector to the sphere. As shown in the following
    screenshot, click on **GameObject** and then select **Create Other** to create
    the **Cylinder** game object:![Fixed joint](img/00058.jpeg)'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接体**指的是依赖于**固定关节**的另一个刚体。现在我们需要为它创建一个连接器。让我们创建一个**圆柱体**游戏对象，它将作为连接器连接到球体。如下截图所示，点击**游戏对象**然后选择**创建其他**来创建**圆柱体**游戏对象：![固定关节](img/00058.jpeg)'
- en: Now drag **Cylinder** to **Connected Body**. This will create the connector
    for the **Sphere** game object. The other options **Break Force** and **Break
    Torque** are required amount of force and torque which can break the joint. For
    now, we have set it to **Infinity** to make it nonbreakable.![Fixed joint](img/00059.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将**圆柱体**拖到**连接体**上。这将创建**球体**游戏对象的连接器。其他选项**断裂力**和**断裂扭矩**是能够破坏关节的力和扭矩的大小。目前，我们将其设置为**无穷大**以使其不可破坏。![固定关节](img/00059.jpeg)
- en: Run the project and you will see that the sphere falls with the cylinder because
    it is fixed to the cylinder.![Fixed joint](img/00060.jpeg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目，您将看到球体随着圆柱体下落，因为它固定在圆柱体上。![固定关节](img/00060.jpeg)
- en: In the preceding example, we have learned how we can implement the fixed joints
    in development.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们学习了如何在开发中实现固定关节。
- en: Spring joint
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹簧关节
- en: 'Let''s move to the next joint, which is a spring joint. A spring joint makes
    the Rigidbodies move like a spring. The applied game object gets pulled towards
    a particular position because of this joint. Spring joints, as their name implies,
    work on the principle of a spring where the specified game object tries to reach
    a target position, which we set in the scene view, while the attached Rigidbody
    will pull it away from the target position. As shown in the following diagram,
    if we apply a spring joint on a sphere, it will show the behavior of a spring
    and try to move toward the particular position. Here, **Min Distance** will be
    the center of sphere while end of radius will work as **Max Distance**. We can
    modify the value of minimum and maximum distance as per our requirements. The
    working of this joint is shown diagrammatically, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到下一个关节，即弹簧关节。弹簧关节使刚体像弹簧一样移动。由于这个关节，应用的游戏对象会被拉向特定的位置。弹簧关节，正如其名称所暗示的，基于弹簧的原理工作，其中指定的游戏对象试图达到我们在场景视图中设置的目标位置，而附加的刚体则会将其拉离目标位置。如下面的图所示，如果我们在一个球体上应用弹簧关节，它将表现出弹簧的行为并试图移动到特定的位置。在这里，**最小距离**将是球体的中心，而半径的末端将作为**最大距离**。我们可以根据我们的需求修改最小和最大距离的值。该关节的工作原理如下所示：
- en: '![Spring joint](img/00061.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![弹簧关节](img/00061.jpeg)'
- en: 'In the following example, we are going to create a sphere that will have a
    spring joint:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将创建一个具有弹簧关节的球体：
- en: As shown in the following screenshot, let's create a sphere with a Rigidbody
    and apply **Spring Joint**:![Spring joint](img/00062.jpeg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，让我们创建一个具有刚体和**弹簧关节**的球体：![弹簧关节](img/00062.jpeg)
- en: As shown in the following screenshot, we can set an **Anchor** value. An orange
    square above the sphere represents the anchor. Let's reset the **Y** value and
    run the project. You will see the sphere's movement with the spring.![Spring joint](img/00063.jpeg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，我们可以设置一个**锚点**值。球体上方的橙色正方形代表锚点。让我们重置**Y**值并运行项目。你会看到球体随着弹簧的运动。![弹簧关节](img/00063.jpeg)
- en: We can set the number of springs by putting values for the **Spring** option.
    We have set it at `50` to increase the bounciness. Similar to other joints, **Break
    Force** and **Break Torque** are the force and torque required to break the joint.![Spring
    joint](img/00064.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过设置**弹簧**选项的值来设置弹簧的数量。我们将其设置为`50`以增加弹性。与其他关节类似，**断开力**和**断开扭矩**是断开关节所需的力和扭矩。![弹簧关节](img/00064.jpeg)
- en: In the preceding example, we can see the different properties of a spring joint
    and their uses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以看到弹簧关节的不同属性及其用途。
- en: Hinge joint
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 铰链关节
- en: We have learned about a fixed joint and a spring joint. Now, let's learn about
    a hinge joint.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了固定关节和弹簧关节。现在，让我们学习铰链关节。
- en: Normally, hinge joints are used to create a swinging door and a wrecking ball.
    The hinge joints move along with the axis, as shown in the following diagram.
    If we apply a hinge joint on a door, it will move along with the axis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，铰链关节用于创建旋转的门和破坏球。铰链关节沿着轴线移动，如下面的图所示。如果我们在一个门上应用铰链关节，它将沿着轴线移动。
- en: '![Hinge joint](img/00065.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![铰链关节](img/00065.jpeg)'
- en: 'Let''s learn to apply a hinge joint to a game object and also see which properties
    are associated with hinge joints:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何将铰链关节应用到游戏对象上，并看看与铰链关节相关的哪些属性：
- en: Create a new scene and save it as `Hinge Joint`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为`Hinge Joint`。
- en: Create a **Cube** game object and apply a Rigidbody component to it. Scale it
    to give it the shape of a door.![Hinge joint](img/00066.jpeg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**立方体**游戏对象并将其附加一个刚体组件。将其缩放以使其具有门的形状。![铰链关节](img/00066.jpeg)
- en: Now apply **Hinge Joint**, as shown in the following screenshot:![Hinge joint](img/00067.jpeg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按照以下截图应用**铰链关节**：![铰链关节](img/00067.jpeg)
- en: After applying material to it, give it a color, rotate it, and run and test
    the movement of the door.![Hinge joint](img/00068.jpeg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用材质后，给它上色，旋转它，然后运行并测试门的运动。![铰链关节](img/00068.jpeg)
- en: The hinge joint possesses several properties as options. We can use the properties
    of **Hinge Joint** as per our requirements. Here, **Connected Body** refers to
    the other Rigidbody with which the joint is dependent. **Anchor** refers to the
    point at which the connected bodies can rotate. **Axis** defines the axis of rotation.
    To apply spring force to a target angle, we apply **Spring**. To slow the spring
    recoil, we set the **Damper** value; **Motor** to apply motor force; and **Limits**
    to specify the angular limit.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 铰链关节具有多个属性选项。我们可以根据需要使用**铰链关节**的属性。在这里，**连接体**指的是与关节相关的另一个刚体。**锚点**指的是连接体可以旋转的点。**轴**定义了旋转轴。为了将弹簧力应用于目标角度，我们应用**弹簧**。为了减缓弹簧回弹，我们设置**阻尼**值；**电机**应用于电机力；**限制**用于指定角限制。
- en: '![Hinge joint](img/00069.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![铰链关节](img/00069.jpeg)'
- en: Character joints
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角色关节
- en: The character joints work on the principle of a ball and socket movement with
    limit, which are normally used for Ragdoll effects. This consists of variables
    that handle the effects or movement.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 角色关节基于球窝运动原理，带有限制，通常用于拉杆效果。这包括处理效果或运动的变量。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ragdoll Physics is a type of procedural animation that is often used in video
    games and animated films. You can find details of using Ragdoll Wizard of Unity3D
    at [http://docs.unity3d.com/Manual/wizard-RagdollWizard.html](http://docs.unity3d.com/Manual/wizard-RagdollWizard.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 拉杆物理是一种常用于视频游戏和动画电影的程序化动画类型。您可以在[http://docs.unity3d.com/Manual/wizard-RagdollWizard.html](http://docs.unity3d.com/Manual/wizard-RagdollWizard.html)找到使用Unity3D拉杆巫师详细的说明。
- en: '![Character joints](img/00070.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![角色关节](img/00070.jpeg)'
- en: We are going to create a character joint for an arm. There are two types of
    movement, as shown in the previous diagram. We divide this arm in two parts—one
    is **Upper Arm** and the second is **Lower Arm**. We will see that there are two
    types of movement in this case—one is movement with the axis and the other is
    movement in angle or we can say swinging movement.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个用于手臂的角色关节。正如前图所示，有两种类型的运动。我们将这个手臂分为两部分——一是**上臂**，二是**下臂**。我们会看到在这种情况下有两种类型的运动——一种是沿轴的运动，另一种是角度或摆动运动。
- en: 'Let''s handle the arm animation with Unity Physics character joint:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Unity物理角色关节来处理手臂动画：
- en: Create a scene and name it `Character Joint example`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个场景并命名为`Character Joint example`。
- en: Now create an empty game object and name it `Arm`:![Character joints](img/00071.jpeg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个空的游戏对象并命名为`Arm`：![角色关节](img/00071.jpeg)
- en: Now, create a **Cylinder** object and apply **Rigidbody** on it. Name it `Upper
    Arm`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个**圆柱体**对象并将其应用**刚体**组件。命名为`Upper Arm`。
- en: Click on **Component** and apply **Character Joint** on it.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**组件**并应用**角色关节**组件。
- en: Now, create another **Cylinder** object and again apply Rigidbody on it. Name
    it `Lower arm`:![Character joints](img/00072.jpeg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建另一个**圆柱体**对象并再次应用**刚体**组件。命名为`Lower arm`：![角色关节](img/00072.jpeg)
- en: Click on **Component** and then apply **Character Joint** on it:![Character
    joints](img/00073.jpeg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**组件**然后应用**角色关节**组件：![角色关节](img/00073.jpeg)
- en: Now let's play with the properties of character joints to get the required effect:![Character
    joints](img/00074.jpeg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们调整角色关节的属性以获得所需的效果：![角色关节](img/00074.jpeg)
- en: By default, **Connected Body** connects to the world. It represents the Rigidbody
    on which the joint is dependent. Let's drag the **Upper arm** Rigidbody to the
    connected body option of **Lower arm**.![Character joints](img/00075.jpeg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，**连接体**连接到世界。它代表依赖于该关节的刚体。让我们将**上臂**的刚体拖动到**下臂**的连接体选项中。![角色关节](img/00075.jpeg)
- en: 'In the following screenshot, **Upper arm** is **Connected Body** for the lower
    arm:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，**上臂**是**连接体**，与下臂相连：
- en: '![Character joints](img/00076.jpeg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![角色关节](img/00076.jpeg)'
- en: '**Anchor** is where a joint rotates around. **Axis** which have twist axis
    and swing axis; using twist axis, we handle twisting while using swing axis, we
    handle swinging. **Low Twist Limit** is for the lower limit of the joint and similarly,
    **High Twist Joint** is for the higher limit of the joint. Again, **Swing 1Limit**
    is for the lower limit around the swing axis and **Swing 2Limit** is for the upper
    limit around the swing axis.'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**锚点**是关节旋转的起点。**轴**包括扭转轴和摆动轴；使用扭转轴处理扭转，使用摆动轴处理摆动。**低扭转限制**是关节的下限，同样地，**高扭转限制**是关节的上限。再次，**摆动1限制**是围绕摆动轴的下限，**摆动2限制**是围绕摆动轴的上限。'
- en: Note
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The value for **Low Twist Limit** is -30 and for **High Twist Limit**, it is
    60.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**低扭转限制**的值为-30，而**高扭转限制**的值为60。'
- en: The **Swing 1Limit** limits the rotation between -30 and 30.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Swing 1Limit**限制旋转在-30到30度之间。'
- en: The **Swing 2Limit** will limit the rotation around that axis between -40 and
    40 degrees.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Swing 2Limit**将限制该轴的旋转在-40到40度之间。'
- en: Rotate the **Arm** game object and test the scene.![Character joints](img/00077.jpeg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旋转**臂**游戏对象并测试场景。![角色关节](img/00077.jpeg)
- en: In the previous example, we have learned how we can use the character joint.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们学习了如何使用角色关节。
- en: Configurable joints
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可配置关节
- en: Configurable joint possesses features of all the joints. It works on the principle
    of two primary functions which are movement/rotation restriction and movement/rotation
    acceleration. We can see that there are multiple interdependent properties in
    the configurable joints. To get the required effect, we will need to play with
    the values of its different properties.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可配置关节具有所有关节的特性。它基于两个主要功能工作，即运动/旋转限制和运动/旋转加速。我们可以看到在可配置关节中有多个相互依赖的属性。为了获得所需的效果，我们需要调整其不同属性的值。
- en: 'Let''s see what do we mean by movement/rotation restriction. For this, perform
    the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们所说的运动/旋转限制是什么意思。为此，请执行以下步骤：
- en: Create a new scene and name it `Configurable Joints Example`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其命名为`Configurable Joints Example`。
- en: As shown in the following screenshot, create a **Cube** game object and apply
    **Configurable Joint**:![Configurable joints](img/00078.jpeg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，创建一个**立方体**游戏对象并应用**可配置关节**：![可配置关节](img/00078.jpeg)
- en: In the **Inspector** panel, we will see the following properties:![Configurable
    joints](img/00079.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中，我们将看到以下属性：![可配置关节](img/00079.jpeg)
- en: Using the previously shown different properties, we can achieve the desired
    effect for your project. Now, let's see how we can handle the movement and rotation
    of different properties in the project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前显示的不同属性，我们可以实现项目所需的效果。现在，让我们看看我们如何处理项目中不同属性的运动和旋转。
- en: Handling movement/rotation restriction
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理运动/旋转限制
- en: We can restrict movement as per the axis. **XMotion**, **YMotion**, and **ZMotion**
    allow you to do that and while using **Angular XMotion**, **Angular YMotion**,
    and **Angular ZMotion**, we can define the rotation. These properties can be set
    to **Free** which means unrestricted, **Limited** which means restricted based
    on limits, or **Locked** which means restricted to zero movement.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据轴来限制运动。**XMotion**、**YMotion**和**ZMotion**允许你这样做，而使用**Angular XMotion**、**Angular
    YMotion**和**Angular ZMotion**，我们可以定义旋转。这些属性可以设置为**自由**，这意味着无限制，**限制**，这意味着基于限制进行限制，或者**锁定**，这意味着限制为零运动。
- en: Limiting motions
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 限制运动
- en: We can use the Limit properties to restrict the motion. Using **Linear Limit**,
    we can define the maximum distance from the origin point. Using **Bounciness**,
    **Spring**, and **Damper**, we can define the behavior of the object when it reaches
    the limit on any of the limited motion axes. To stop the object's movement on
    the border, we set all these values to `0`. Using bounciness, we set the bounce
    back behavior of the object from the border similarly. **Spring** and **Damper**
    will create springing forces to apply the spring effect border.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**限制属性**来限制运动。使用**线性限制**，我们可以定义从原点点的最大距离。使用**弹性系数**、**弹簧**和**阻尼器**，我们可以定义物体在达到任何限制运动轴的极限时的行为。为了停止物体在边界的运动，我们将所有这些值设置为`0`。使用弹性系数，我们可以将物体从边界反弹的行为设置为类似。**弹簧**和**阻尼器**将创建弹簧力以应用弹簧效果边界。
- en: Limiting rotation
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 限制旋转
- en: We can use the Limit properties to restrict the rotation. Limiting rotation
    works almost the same as limiting motion but the differences are the **Angular
    Limit** properties. We can restrict translation along all three axes by defining
    the **Linear Limit** property, and we can also restrict rotation along each of
    the three axes by defining the **Angular Limit** property per axis.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**限制属性**来限制旋转。限制旋转几乎与限制运动相同，但区别在于**角限制**属性。我们可以通过定义**线性限制**属性来限制沿所有三个轴的平移，并且我们还可以通过为每个轴定义**角限制**属性来限制沿每个轴的旋转。
- en: Using the **Angular XMotion** limitation, we can define a **Low Angular XLimit**
    and a **High Angular XLimit**. For the *y* and *z* axes, the low and high rotation
    limits will be the same, which we set using the Limit property of **Angular YLimit**
    or **Angular ZLimit**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**角X运动**限制，我们可以定义**低角X限制**和**高角X限制**。对于*y*和*z*轴，低和高旋转限制将相同，我们使用**角Y限制**或**角Z限制**的**限制**属性来设置。
- en: Handling movement/rotation acceleration
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理移动/旋转加速度
- en: Using drive properties, we define the acceleration by defining the **Target**
    value. To specify object movement or rotation in terms of moving the object toward
    a particular position or rotation, we need to define the **Target** value to move
    toward, and using a drive to provide acceleration that will move the object toward
    that target.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用驱动属性，我们通过定义**目标**值来定义加速度。为了以将对象移动到特定位置或旋转的方式指定对象运动或旋转，我们需要定义要移动到的**目标**值，并使用驱动来提供将对象移动到该目标的加速度。
- en: Handling translation acceleration
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 处理平移加速度
- en: Using the **XDrive**, **YDrive**, and **ZDrive** properties, we define movement
    along that axis. **Spring** value defines the object's motion toward the **Target**
    position. Similarly, if we are using velocity in its mode, its maximum force value
    defines acceleration toward the velocity.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**X驱动**、**Y驱动**和**Z驱动**属性，我们定义沿该轴的运动。**弹簧**值定义了对象向**目标**位置的运动。同样，如果我们使用速度模式，其最大力值定义了向速度的加速度。
- en: Handling rotation acceleration
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 处理旋转加速度
- en: Rotation acceleration properties contain the **Angular XDrive**, **Angular YZDrive**,
    and **Slerp Drive** function similar to the translation **Drives**. There is one
    small difference. **Slerp Drive** behaves differently. It has different functionality
    than the **Angular Drive** functionality so we cannot use both together.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转加速度属性包含与平移**驱动**类似的**角X驱动**、**角YZ驱动**和**Slerp驱动**函数。有一个小差异。**Slerp驱动**的行为不同。它的功能与**角驱动**功能不同，因此我们不能同时使用它们。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have learned about joints and their properties. We have
    learned how we can apply a fixed joint to fix two Rigidbodies together, a spring
    joint for spring-like behavior, a hinge joint to create door animation, and a
    character joint for a Ragdoll effect.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关节及其属性。我们学习了如何将固定关节应用于将两个刚体固定在一起，弹簧关节用于弹簧行为，铰链关节用于创建门动画，以及角色关节用于娃娃效果。
- en: In the next chapter, we will learn about animation and Unity3D Physics. It will
    focus on the different animations, for example, rope animation, use of add force
    and add torque, and constant force.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习动画和Unity3D物理。它将侧重于不同的动画，例如绳索动画、使用添加力和添加扭矩以及恒定力。
