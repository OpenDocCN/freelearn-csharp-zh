["```cs\n    using static System.Console;\n    WriteLine(\"* Top-level functions example\");\n    WhatsMyNamespace(); // Call the function.\n    void WhatsMyNamespace() // Define a local function.\n    {\n      WriteLine(\"Namespace of Program class: {0}\",\n        arg0: typeof(Program).Namespace ?? \"null\");\n    } \n    ```", "```cs\n    * Top-level functions example\n    Namespace of Program class: null \n    ```", "```cs\n**using****static** **System.Console;**\n**partial****class****Program**\n**{**\n**static****void** **<Main>$(String[] args)**\n **{**\n    WriteLine(\"* Top-level functions example\");\n **<<Main>$>g__WhatsMyNamespace|****0****_0();** **// Call the function.**\n**void** **<<Main>$>g__WhatsMyNamespace|****0****_0()** **// Define a local function.**\n    {\n      WriteLine(\"Namespace of Program class: {0}\",\n        arg0: typeof(Program).Namespace ?? \"null\");\n    }\n **}**\n**}** \n```", "```cs\n    **using****static** **System.Console;**\n    **// Do not define a namespace so this class goes in the default empty**\n    **// namespace just like the auto-generated partial Program class.**\n    **partial****class****Program**\n    **{**\n      **static** void WhatsMyNamespace() // Define a **static** function.\n      {\n        WriteLine(\"Namespace of Program class: {0}\",\n          arg0: typeof(Program).Namespace ?? \"null\");\n      }\n    **}** \n    ```", "```cs\n    using static System.Console;\n    WriteLine(\"* Top-level functions example\");\n    WhatsMyNamespace(); // Call the function. \n    ```", "```cs\nusing static System.Console;\n**partial****class****Program**\n**{**\n**static****void** **<Main>$(String[] args)**\n **{**\n    WriteLine(\"* Top-level functions example\");\n    WhatsMyNamespace(); // Call the function.\n **}**\n  static void WhatsMyNamespace() // Define a static function.\n  {\n    WriteLine(\"Namespace of Program class: {0}\",\n      arg0: typeof(Program).Namespace ?? \"null\");\n  }\n**}** \n```", "```cs\n1 x 7 = 7\n2 x 7 = 14\n3 x 7 = 21\n...\n10 x 7 = 70\n11 x 7 = 77\n12 x 7 = 84 \n```", "```cs\nfor (int row = 1; row <= 12; row++)\n{\n  Console.WriteLine($\"{row} x 7 = {row * 7}\");\n} \n```", "```cs\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup> \n    ```", "```cs\n    partial class Program\n    {\n      static void TimesTable(byte number, byte size = 12)\n      {\n        WriteLine($\"This is the {number} times table with {size} rows:\");\n        WriteLine();\n        for (int row = 1; row <= size; row++)\n        {\n          WriteLine($\"{row} x {number} = {row * number}\");\n        }\n        WriteLine();\n      }\n    } \n    ```", "```cs\n    TimesTable(7); \n    ```", "```cs\n    This is the 7 times table with 12 rows:\n    1 x 7 = 7\n    2 x 7 = 14\n    3 x 7 = 21\n    4 x 7 = 28\n    5 x 7 = 35\n    6 x 7 = 42\n    7 x 7 = 49\n    8 x 7 = 56\n    9 x 7 = 63\n    10 x 7 = 70\n    11 x 7 = 77\n    12 x 7 = 84 \n    ```", "```cs\n    TimesTable(7, 20); \n    ```", "```cs\n    Error: (1,12): error CS1503: Argument 1: cannot convert from 'int' to 'byte' \n    ```", "```cs\nvoid Hire(DateTime startDate)\n{\n  // Function implementation.\n} \n```", "```cs\nDateTime when = new(year: 2024, month: 11, day: 5);\nHire(when); \n```", "```cs\nDateTime when = new(year: 2024, month: 11, day: 5);\nHire(startDate: when); \n```", "```cs\nvoid Hire(DateTime startDate)\n{\n  ...\n  SaveToDatabase(startDate, employeeRecord);\n  ...\n} \n```", "```cs\nstatic void Main(String[] args)\n{\n  ...\n} \n```", "```cs\n    static decimal CalculateTax(\n      decimal amount, string twoLetterRegionCode)\n    {\n      decimal rate = twoLetterRegionCode switch\n      {\n        \"CH\" => 0.08M, // Switzerland\n        \"DK\" or \"NO\" => 0.25M, // Denmark, Norway\n        \"GB\" or \"FR\" => 0.2M, // UK, France\n        \"HU\" => 0.27M, // Hungary\n        \"OR\" or \"AK\" or \"MT\" => 0.0M, // Oregon, Alaska, Montana\n        \"ND\" or \"WI\" or \"ME\" or \"VA\" => 0.05M,\n        \"CA\" => 0.0825M, // California\n        _ => 0.06M // Most other states.\n      };\n      return amount * rate;\n    } \n    ```", "```cs\n    using System.Globalization; // To use CultureInfo. \n    ```", "```cs\n    static void ConfigureConsole(string culture = \"en-US\",\n      bool useComputerCulture = false)\n    {\n      // To enable Unicode characters like Euro symbol in the console.\n      OutputEncoding = System.Text.Encoding.UTF8;\n      if (!useComputerCulture)\n      {\n        CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(culture);\n      }\n      WriteLine($\"CurrentCulture: {CultureInfo.CurrentCulture.DisplayName}\");\n    } \n    ```", "```cs\n    // TimesTable(number: 7, size: 10);\n    ConfigureConsole();\n    decimal taxToPay = CalculateTax(amount: 149, twoLetterRegionCode: \"FR\");\n    WriteLine($\"You must pay {taxToPay:C} in tax.\");\n    // Alternatively, call the function in the interpolated string.\n    // WriteLine($\"You must pay {CalculateTax(amount: 149,\n    //   twoLetterRegionCode: \"FR\"):C} in tax.\"); \n    ```", "```cs\n    CurrentCulture: English (United States)\n    You must pay $29.80 in tax. \n    ```", "```cs\n    ConfigureConsole(useComputerCulture: true); \n    ```", "```cs\n    CurrentCulture: English (United Kingdom)\n    You must pay £29.80 in tax. \n    ```", "```cs\n    ConfigureConsole(culture: \"fr-FR\"); \n    ```", "```cs\n    CurrentCulture: French (France)\n    You must pay 29,80 € in tax. \n    ```", "```cs\n    static string CardinalToOrdinal(uint number)\n    {\n      uint lastTwoDigits = number % 100;\n      switch (lastTwoDigits)\n      {\n        case 11: // Special cases for 11th to 13th.\n        case 12:\n        case 13:\n          return $\"{number:N0}th\";\n        default:\n          uint lastDigit = number % 10;\n          string suffix = lastDigit switch\n          {\n            1 => \"st\",\n            2 => \"nd\",\n            3 => \"rd\",\n            _ => \"th\"\n          };\n          return $\"{number:N0}{suffix}\";\n      }\n    } \n    ```", "```cs\n    static void RunCardinalToOrdinal()\n    {\n      for (uint number = 1; number <= 150; number++)\n      {\n        Write($\"{CardinalToOrdinal(number)} \");\n      }\n      WriteLine();\n    } \n    ```", "```cs\n    RunCardinalToOrdinal(); \n    ```", "```cs\n    1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th 26th ... 139th 140th 141st 142nd 143rd 144th 145th 146th 147th 148th 149th 150th \n    ```", "```cs\n    ... 1,480th 1,481st 1,482nd 1,483rd 1,484th 1,485th 1,486th 1,487th 1,488th 1,489th 1,490th 1,491st 1,492nd 1,493rd 1,494th 1,495th 1,496th 1,497th 1,498th 1,499th 1,500th \n    ```", "```cs\n0! = 1\nn! = n × (n − 1)!, for n  { 1, 2, 3, ... } \n```", "```cs\n    static int Factorial(int number)\n    {\n      if (number < 0)\n      {\n         throw new ArgumentOutOfRangeException(message:\n           $\"The factorial function is defined for non-negative integers only. Input: {number}\",\n           paramName: nameof(number));\n      }\n      else if (number == 0)\n      {\n        return 1;\n      }\n      else\n      {\n        return number * Factorial(number - 1);\n      }\n    } \n    ```", "```cs\n    static void RunFactorial()\n    {\n      for (int i = 1; i <= 15; i++)\n      {\n        WriteLine($\"{i}! = {Factorial(i):N0}\");\n      }\n    } \n    ```", "```cs\n    1! = 1\n    2! = 2\n    3! = 6\n    4! = 24\n    ...\n    12! = 479,001,600\n    13! = 1,932,053,504\n    14! = 1,278,945,280\n    15! = 2,004,310,016 \n    ```", "```cs\n    **checked** **// for overflow**\n    **{**\n      return number * Factorial(number - 1);\n    **}** \n    ```", "```cs\n    static void RunFactorial()\n    {\n      for (int i = **-2**; i <= 15; i++)\n      {\n    **try**\n     **{**\n          WriteLine($\"{i}! = {Factorial(i):N0}\");\n     **}**\n    **catch** **(OverflowException)**\n     **{**\n     **WriteLine(****$\"****{i}****! is too big for a 32-bit integer.\"****);**\n     **}**\n    **catch** **(Exception ex)**\n     **{**\n     **WriteLine(****$\"****{i}****! throws** **{ex.GetType()}****:** **{ex.Message}****\"****);**\n     **}**\n      }\n    } \n    ```", "```cs\n    -2! throws System.ArgumentOutOfRangeException: The factorial function is defined for non-negative integers only. Input: -2 (Parameter 'number')\n    -1! throws System.ArgumentOutOfRangeException: The factorial function is defined for non-negative integers only. Input: -1 (Parameter 'number')\n    0! = 1\n    1! = 1\n    2! = 2\n    ...\n    12! = 479,001,600\n    13! is too big for a 32-bit integer.\n    14! is too big for a 32-bit integer.\n    15! is too big for a 32-bit integer. \n    ```", "```cs\n    /// <summary>\n    ///\n    /// </summary>\n    /// <param name=\"number\"></param>\n    /// <returns></returns> \n    ```", "```cs\n    /// <summary>\n    /// P**ass a 32-bit unsigned integer and it will be converted into its**\n    **ordinal equivalent.**\n    /// </summary>\n    /// <param name=\"number\">N**umber as a cardinal value e.g. 1, 2, 3, and so**\n    **on.**</param>\n    /// <returns>N**umber as an ordinal value e.g. 1st, 2nd, 3rd, and so on.**</\n    returns> \n    ```", "```cs\n0 1 1 2 3 5 8 13 21 34 55 ... \n```", "```cs\n    static int FibImperative(uint term)\n    {\n      if (term == 0)\n      {\n        throw new ArgumentOutOfRangeException();\n      }\n      else if (term == 1)\n      {\n        return 0;\n      }\n      else if (term == 2)\n      {\n        return 1;\n      }\n      else\n      {\n        return FibImperative(term - 1) + FibImperative(term - 2);\n      }\n    } \n    ```", "```cs\n    static void RunFibImperative()\n    {\n      for (uint i = 1; i <= 30; i++)\n      {\n        WriteLine(\"The {0} term of the Fibonacci sequence is {1:N0}.\",\n          arg0: CardinalToOrdinal(i),\n          arg1: FibImperative(term: i));\n      }\n    } \n    ```", "```cs\n    The 1st term of the Fibonacci sequence is 0.\n    The 2nd term of the Fibonacci sequence is 1.\n    The 3rd term of the Fibonacci sequence is 1.\n    The 4th term of the Fibonacci sequence is 2.\n    The 5th term of the Fibonacci sequence is 3.\n    ...\n    The 29th term of the Fibonacci sequence is 317,811.\n    The 30th term of the Fibonacci sequence is 514,229. \n    ```", "```cs\n    static int FibFunctional(uint term) => term switch\n      {\n        0 => throw new ArgumentOutOfRangeException(),\n        1 => 0,\n        2 => 1,\n        _ => FibFunctional(term - 1) + FibFunctional(term - 2)\n      }; \n    ```", "```cs\n    static void RunFibFunctional()\n    {\n      for (uint i = 1; i <= 30; i++)\n      {\n        WriteLine(\"The {0} term of the Fibonacci sequence is {1:N0}.\",\n          arg0: CardinalToOrdinal(i),\n          arg1: FibFunctional(term: i));\n      }\n    } \n    ```", "```cs\n    double Add(double a, double b)\n    {\n      return a * b; // Deliberate bug!\n    } \n    ```", "```cs\n    double a = 4.5;\n    double b = 2.5;\n    double answer = Add(a, b);\n    WriteLine($\"{a} + {b} = {answer}\");\n    WriteLine(\"Press Enter to end the app.\");\n    ReadLine(); // Wait for user to press Enter. \n    ```", "```cs\n    4.5 + 2.5 = 11.25\n    Press Enter to end the app. \n    ```", "```cs\n    **Write(****\"Enter a number: \"****);**\n    **string** **number = ReadLine()!;**\n    double a = **double****.Parse(number)**; \n    ```", "```cs\n    {\n      // Use IntelliSense to learn about possible attributes.\n      // Hover to view descriptions of existing attributes.\n      // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n      \"version\": \"0.2.0\",\n      \"configurations\": [\n        {\n          \"name\": \".NET Core Launch (console)\",\n          \"type\": \"coreclr\",\n          \"request\": \"launch\",\n          **//**\"preLaunchTask\": \"build\",\n          \"program\": \"${workspaceFolder}/**Debugging/**bin/Debug/**net9.0**/**Debugging.dll**\",\n          \"args\": [],\n          \"cwd\": \"${workspaceFolder}\",\n          \"stopAtEntry\": false,\n          \"console\": \"**integratedTerminal**\"\n        }\n      ]\n    } \n    ```", "```cs\n    /* Visual Studio: run the app, change the message, click Hot Reload.\n     * VS Code: run the app using dotnet watch, change the message. */\n    while (true)\n    {\n      WriteLine(\"Hello, Hot Reload!\");\n      await Task.Delay(2000);\n    } \n    ```", "```cs\n    dotnet watch  Hot reload enabled. For a list of supported edits, see https://aka.ms/dotnet/hot-reload.\n       Press \"Ctrl + R\" to restart.\n    dotnet watch  Building...\n      Determining projects to restore...\n      All projects are up-to-date for restore.\n      HotReloading -> C:\\cs13net9\\Chapter04\\HotReloading\\bin\\Debug\\net9.0\\HotReloading.dll\n    dotnet watch  Started\n    Hello, Hot Reload!\n    Hello, Hot Reload!\n    Hello, Hot Reload! \n    ```", "```cs\n    Hello, Hot Reload!\n    dotnet watch  File changed: .\\Program.cs.\n    Hello, Hot Reload!\n    Hello, Hot Reload!\n    dotnet watch  Hot reload of changes succeeded.\n    Goodbye, Hot Reload!\n    Goodbye, Hot Reload! \n    ```", "```cs\n    Goodbye, Hot Reload!\n    dotnet watch  Shutdown requested. Press Ctrl+C again to force exit. \n    ```", "```cs\n    namespace CalculatorLib;\n    public class Calculator\n    {\n      public double Add(double a, double b)\n      {\n        return a * b;\n      }\n    } \n    ```", "```cs\n    dotnet new xunit -o CalculatorLibUnitTests\n    dotnet sln add CalculatorLibUnitTests \n    ```", "```cs\n        <ItemGroup>\n          <ProjectReference\n            Include=\"..\\CalculatorLib\\CalculatorLib.csproj\" />\n        </ItemGroup> \n        ```", "```cs\n    using CalculatorLib; // To use Calculator.\n    namespace CalculatorLibUnitTests;\n    public class CalculatorUnitTests\n    {\n      [Fact]\n      public void TestAdding2And2()\n      {\n        // Arrange: Set up the inputs and the unit under test.\n        double a = 2;\n        double b = 2;\n        double expected = 4;\n        Calculator calc = new();\n        // Act: Execute the function to test.\n        double actual = calc.Add(a, b);\n        // Assert: Make assertions to compare expected to actual results.\n        Assert.Equal(expected, actual);\n      }\n      [Fact]\n      public void TestAdding2And3()\n      {\n        double a = 2;\n        double b = 3;\n        double expected = 5;\n        Calculator calc = new();\n        double actual = calc.Add(a, b);\n        Assert.Equal(expected, actual);\n      }\n    } \n    ```", "```cs\nusing CalculatorLib; // To use Calculator.\nnamespace CalculatorLibUnitTests;\npublic class CalculatorUnitTests\n{\n  [Theory]\n  [InlineData(2, 2, 4)]\n  [InlineData(2, 3, 5)]\n  public void TestAdding(double a, double b, double expected)\n  {\n    // Arrange: Set up the unit under test.\n    Calculator calc = new();\n    // Act: Execute the function to test.\n    double actual = calc.Add(a, b);\n    // Assert: Make assertions to compare expected to actual results.\n    Assert.Equal(expected, actual);\n  }\n} \n```", "```cs\nstatic void Withdraw(string accountName, decimal amount)\n{\n  if (string.IsNullOrWhiteSpace(accountName))\n  {\n    throw new ArgumentException(paramName: nameof(accountName));\n  }\n  if (amount <= 0)\n  {\n    throw new ArgumentOutOfRangeException(paramName: nameof(amount),\n      message: $\"{nameof(amount)} cannot be negative or zero.\");\n  }\n  // process parameters\n} \n```", "```cs\nstatic void Withdraw(string accountName, decimal amount)\n{\n  ArgumentException.ThrowIfNullOrWhiteSpace(accountName,\n    paramName: nameof(accountName));\n  ArgumentOutOfRangeException.ThrowIfNegativeOrZero(amount,\n    paramName: nameof(amount));\n  // process parameters\n} \n```", "```cs\n    using static System.Console;\n    namespace CallStackExceptionHandlingLib;\n    public class Processor\n    {\n      public static void Gamma() // public so it can be called from outside.\n      {\n        WriteLine(\"In Gamma\");\n        Delta();\n      }\n      private static void Delta() // private so it can only be called internally.\n      {\n        WriteLine(\"In Delta\");\n        File.OpenText(\"bad file path\");\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\CallStackExceptionHandlingLib\\\n    CallStackExceptionHandlingLib.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using CallStackExceptionHandlingLib; // To use Processor.\n    using static System.Console;\n    WriteLine(\"In Main\");\n    Alpha();\n    void Alpha()\n    {\n      WriteLine(\"In Alpha\");\n      Beta();\n    }\n    void Beta()\n    {\n      WriteLine(\"In Beta\");\n      Processor.Gamma();\n    } \n    ```", "```cs\n    In Main\n    In Alpha\n    In Beta\n    In Gamma\n    In Delta\n    Unhandled exception. System.IO.FileNotFoundException: Could not find file 'C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net9.0\\bad file path'.\n    File name: 'C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net9.0\\bad file path'\n       at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\n       at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\n       at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\n       at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\n       at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)\n       at System.IO.File.OpenText(String path)\n       at CallStackExceptionHandlingLib.Calculator.Delta() in C:\\cs13net9\\Chapter04\\CallStackExceptionHandlingLib\\Processor.cs:line 16\n       at CallStackExceptionHandlingLib.Calculator.Gamma() in C:\\cs13net9\\Chapter04\\CallStackExceptionHandlingLib\\Processor.cs:line 10\n       at Program.<<Main>$>g__Beta|0_1() in C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 16\n       at Program.<<Main>$>g__Alpha|0_0() in C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 10\n       at Program.<Main>$(String[] args) in C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 5 \n    ```", "```cs\ntry\n{\n  Gamma();\n}\ncatch (IOException ex)\n{\n  LogException(ex);\n  // Throw the caught exception as if it happened here\n  // this will lose the original call stack.\n  throw ex;\n  // Rethrow the caught exception and retain its original call stack.\n  throw;\n  // Throw a new exception with the caught exception nested within it.\n  throw new InvalidOperationException(\n    message: \"Calculation had invalid values. See inner exception for why.\",\n    innerException: ex);\n} \n```", "```cs\n    void Beta()\n    {\n      WriteLine(\"In Beta\");\n      **try**\n     **{**\n     **Processor.Gamma();**\n     **}**\n    **catch** **(Exception ex)**\n     **{**\n     **WriteLine(****$\"Caught this:** **{ex.Message}****\"****);**\n    **throw** **ex;**\n     **}**\n    } \n    ```", "```cs\n    Caught this: Could not find file 'C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net9.0\\bad file path'.\n    Unhandled exception. System.IO.FileNotFoundException: Could not find file 'C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net9.0\\bad file path'.\n    File name: 'C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\bin\\Debug\\net9.0\\bad file path'\n       at Program.<<Main>$>g__Beta|0_1() in C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 23\n       at Program.<<Main>$>g__Alpha|0_0() in C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 10\n       at Program.<Main>$(String[] args) in C:\\cs13net9\\Chapter04\\CallStackExceptionHandling\\Program.cs:line 5 \n    ```", "```cs\nif (!bankAccount.IsOverdrawn())\n{\n  bankAccount.Withdraw(amount);\n} \n```", "```cs\nstatic bool TryParse(string? input, out Person value)\n{\n  if (someFailure)\n  {\n    value = default(Person);\n    return false;\n  }\n  // Successfully parsed the string into a Person.\n  value = new Person() { ... };\n  return true;\n} \n```"]