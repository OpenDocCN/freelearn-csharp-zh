["```cs\n//var threadStart = new ThreadStart(MyLongRunningProcess);\n//(new Thread(threadStart)).Start();\n\n// Or simply\n(new Thread(MyLongRunningProcess)).Start();\n```", "```cs\nthis.RunOnUiThread(() => { UpdateUIComponent(); });\n```", "```cs\nthis.InvokeOnMainThread(() => { UpdateUIComponent(); });\n```", "```cs\nCoreApplication.MainView\n    .CoreWindow.Dispatcher.RunAsync(CoreDispatcherPriority.Normal, \n        () => { UpdateUIComponent(); });\n```", "```cs\nTask.Run(() => MyLongRunningProcess());\n\n// Or\nTask.Factory.StartNew(MyLongRunningProcess, TaskCreationOptions.LongRunning);\n```", "```cs\nTask.Run(() => MyLongRunningProcess())\n    .ContinueWith(task => MySecondLongRunningProcess());\n```", "```cs\nTask.Run(() => MyLongRunningProcess())\n            .ContinueWith(task => MySecondLongRunningProcess(task.Result));\n```", "```cs\nm_CancellationSource = new CancellationTokenSource();\n\nvar token = m_CancellationSource.Token;\n\n// You can cancel it after a certain amount of time, which would trigger an OperationCanceledException\n// m_CancellationSource.CancelAfter(2000);\n```", "```cs\nTask.Run(() =>\n{\n    // Executing my long running method\n    if (token.IsCancellationRequested)\n    {\n        token.ThrowIfCancellationRequested();\n    }\n}, token);\n```", "```cs\nvar taskFactory = new TaskFactory(m_CancellationSource.Token);\ntaskFactory.StartNew(() =>\n    {\n        // Executing my long running method\n        if (Task.Factory.CancellationToken != CancellationToken.None && Task.Factory.CancellationToken.IsCancellationRequested)\n        {\n           Task.Factory.CancellationToken\n               .ThrowIfCancellationRequested();\n        }\n    });\n```", "```cs\npublic async Task<List<int>> GetFibonacciRangeAsync(int firstOrdinal, int lastOrdinal, IProgress<int> progress = null)\n{\n    var results = new List<int>();\n\n    for (var i = firstOrdinal; i < lastOrdinal; i++)\n    {\n        results.Add(await GetFibonacciNumberAsync(i));\n\n        decimal currentPercentage = (decimal) lastOrdinal - i/(decimal) lastOrdinal - firstOrdinal;\n\n        if (progress != null)\n            progress.Report((int)(currentPercentage * 100);\n    }\n\n    return results;\n}\n```", "```cs\nAction<int> reportProgress = (value) =>\n{\n    InfoText = string.Format(\"{0}% Completed\", value);\n};\n\nvar progress = new Progress<int>(reportProgress);\n\nm_SourceAsync.GetFibonacciRangeAsync(numberOrdinal1, numberOrdinal2, progress)\n    .ContinueWith(task =>\n    {\n        Result = string.Join(\",\", task.Result.Select(val=>val));\n        InfoText = \"\";\n    });\n```", "```cs\nList<Task<int>> calculations = new List<Task<int>>();\n\nMvx.Trace(\"Starting Calculations\");\n\nfor (var i = firstOrdinal; i < lastOrdinal; i++)\n{\n    var currentOrdinal = i;\n    calculations.Add(Task.Factory.StartNew(() => \n        GetFibonacciNumberInternal(currentOrdinal).Value, TaskCreationOptions.LongRunning));\n}\n\nMvx.Trace(\"Starting When All\", DateTime.Now);\nint[] results = await Task.WhenAll(calculations);\nMvx.Trace(\"Calculations Completed\", DateTime.Now);\n\nreturn results.OrderBy(value=>value).ToList();\n```", "```cs\ncalculations.Add(Task.Factory.StartNew(() =>\n    GetFibonacciNumberInternal(currentOrdinal).Value, TaskCreationOptions.LongRunning)\n    .ContinueWith(task =>\n    {\n        if (progress != null)\n        {\n            var currentTotal = Interlocked.Increment(ref currentCount);\n            decimal currentPercentage = (decimal) currentTotal/(decimal) totalCount;\n            progress.Report((int)(currentPercentage * 100));\n        }\n        return task.Result;\n    })); \n```", "```cs\n09-07 21:18:29.232 I/mono-stdout( 3094): mvx:Diagnostic: 40.80 Starting Calculations\n09-07 21:18:29.352 I/mono-stdout( 3094): mvx:Diagnostic: 40.92 Starting When All\n09-07 21:18:30.432 I/mono-stdout( 3094): mvx:Diagnostic: 42.00 Calculations Completed\n```", "```cs\n09-07 21:26:58.716 I/mono-stdout( 3281): mvx:Diagnostic: 10.60 Starting Calculations\n09-07 21:26:58.724 I/mono-stdout( 3281): mvx:Diagnostic: 10.61 Starting calculating ordinal 4\nâ€¦\n09-07 21:27:03.900 I/mono-stdout( 3281): mvx:Diagnostic: 15.78 Starting calculating ordinal 11\n09-07 21:27:05.028 I/mono-stdout( 3281): mvx:Diagnostic: 16.91 Calculations Completed\n```", "```cs\npublic async Task GetFibonacciRangeAsync(int firstOrdinal, int lastOrdinal, BlockingCollection<int> blockingCollection)\n```", "```cs\nfor (var i = firstOrdinal; i < lastOrdinal; i++)\n{\n    var currentOrdinal = i;\n\n    calculations.Add(Task.Factory.StartNew(() =>\n        GetFibonacciNumberInternal(currentOrdinal).Value, TaskCreationOptions.LongRunning)\n        .ContinueWith(task =>\n        {\n            blockingCollection.Add(task.Result);\n            return task.Result;\n        }));\n}\n```", "```cs\n//\n// Collection is filled completely\nawait Task.WhenAll(calculations).ContinueWith(task =>\n{\n    blockingCollection.CompleteAdding();\n});\n```", "```cs\nvar blockingCollection = new BlockingCollection<int>();\n\nvar fibonacciTask = (new FibonacciSourceAsync())\n    .GetFibonacciRangeAsync(numberOrdinal1,\n        numberOrdinal2, blockingCollection);\n\nfibonacciTask.ConfigureAwait(false);\n\n//\n// Starting the Consumer thread\nTask.Factory.StartNew(() =>\n{\n    foreach (var item in blockingCollection.GetConsumingEnumerable())\n    {\n        var currentItem = item;\n        if (Result != string.Empty) Result += \",\";\n\n        Result += currentItem;\n    }\n\n    InfoText = \"Done\";\n\n}, TaskCreationOptions.LongRunning);\n```", "```cs\nTask.Factory.StartNew(() =>\n{\n    var result = Parallel.ForEach(blockingCollection.GetConsumingEnumerable(), item =>\n    {\n        UpdateUIWithItem(item);\n    }).IsCompleted;\n\n    if (result) InfoText = \"Done\";\n}, TaskCreationOptions.LongRunning);\n```", "```cs\npublic event EventHandler<int> CalculationCompleted;\n\npublic event EventHandler<string> CalculationFailed;\n\n/// <summary>\n/// Calculates n-th number in Fibonacci sequence\n/// </summary>\n/// <param name=\"ordinal\">Ordinal of the number to calculate</param>\npublic void GetFibonacciNumber(int ordinal)\n{\n    try\n    {\n        var result = GetFibonacciNumberInternal(ordinal);\n\n        if (CalculationCompleted != null) CalculationCompleted(this, result);\n    }\n    catch (Exception ex)\n    {\n        if (CalculationFailed != null) CalculationFailed(this, ex.Message);\n    }\n}\n```", "```cs\npublic class FibonacciSourceAsync : FibonacciSource\n{\n    public new Task<int> GetFibonacciNumberAsync(int ordinal)\n    {\n        var myTaskSource = new TaskCompletionSource<int>();\n\n        EventHandler<FibonacciItem> onCalculationCompleted = null;\n        EventHandler<string> onCalculationFailed = null;\n\n        //\n        // Subscribe to TaskCompleted: When the CalculationCompleted event is fired, set result.\n        onCalculationCompleted = (sender, args) =>\n        {\n            // Not forgetting to release the event handler\n            CalculationCompleted -= onCalculationCompleted;\n            myTaskSource.SetResult(args.Value);\n        };\n\n        //\n        // Subscribe to TaskFailed: If there is an error in the execution, set error.\n        onCalculationFailed = (sender, args) =>\n        {\n            CalculationFailed -= onCalculationFailed;\n            myTaskSource.SetException(new Exception(args));\n        };\n\n        CalculationCompleted += onCalculationCompleted;\n\n        CalculationFailed += onCalculationFailed;\n\n        // Finally execute the task and return the associated Task promise.\n        base.GetFibonacciNumberAsync(ordinal);\n\n        return myTaskSource.Task;\n\n    }\n}\n```", "```cs\npublic async Task<int> CalculateFibonacciValueAsync(int ordinal)\n{\n    var fibonacciSource =  new FibonacciSourceAsync();\n\n    try\n    {\n        return (await fibonacciSource.GetFibonacciNumberAsync(ordinal));\n    }\n    catch (Exception ex)\n    {\n        // TODO: Do something with exception \n    }\n}\n```", "```cs\npublic IThreadInfo ThreadInfo\n{\n    get { return Mvx.GetSingleton<IThreadInfo>(); }\n}\n\nprivate void TraceThreadInfo(string message)\n{\n    Debug.WriteLine(\"{0} on Thread '{1}'\", message, ThreadInfo.CurrentThreadId);\n    Debug.WriteLine(\"Current Synchronization Context is {0}\", SynchronizationContext.Current);\n}\n```", "```cs\nTraceThreadInfo(\"Begin DoCalculate\");\n\nif (!string.IsNullOrWhiteSpace(Input))\n{\n    int numberOrdinal;\n\n    if (int.TryParse(Input, out numberOrdinal))\n    {\n        InfoText = \"Calculating\";\n\n        TraceThreadInfo(\"Calling GetFibonacciNumberAsync\");\n\n        var result = await GetFibonacciNumberAsync(numberOrdinal);\n\n        TraceThreadInfo(\"Response from GetFibonacciNumberAsync\");\n\n        Result = result.ToString();\n\n        InfoText = string.Empty;\n\n        TraceThreadInfo(\"End DoCalculate\");\n\n        return;\n    }\n}\n\nInfoText = \"Invalid Input\";\n```", "```cs\nTraceThreadInfo(\"Calling GetFibonacciNumberAsync\");\n\nawait GetFibonacciNumberAsync(numberOrdinal).ContinueWith(task =>\n{\n    TraceThreadInfo(\"Response from GetFibonacciNumberAsync\");\n\n    Result = task.Result.ToString();\n\n    InfoText = string.Empty;\n});\n\nTraceThreadInfo(\"End DoCalculate\");\n```", "```cs\nawait GetFibonacciNumberAsync(numberOrdinal).ContinueWith(task =>\n{\n    TraceThreadInfo(\"Response from GetFibonacciNumberAsync\");\n\n    this.RunOnUiThread(() =>\n    {\n        txtResult.Text = task.Result.ToString();\n    });\n\n    txtInfo.Text = \"\";\n});\n```", "```cs\nvar task = Task.Factory.StartNew(async () =>\n{\n    TraceThreadInfo(\"Calling GetFibonacciNumberAsync\");\n\n    var result = await GetFibonacciNumberAsync(numberOrdinal);\n\n    TraceThreadInfo(\"Response from GetFibonacciNumberAsync\");\n\n    Result = result.ToString();\n\n    InfoText = string.Empty;\n\n}, TaskCreationOptions.LongRunning);\n\ntask.ConfigureAwait(false);\n```", "```cs\ntry\n{\n    var result = await GetFibonacciNumberAsync(numberOrdinal);\n\n    Result = result.ToString();\n\n    InfoText = \"\";\n}\ncatch (Exception ex)\n{\n    Debug.WriteLine(\"Error:\" + ex.Message);\n    InfoText = \"EX:\" + ex.Message;\n}\n```", "```cs\ntry\n{\n    await GetFibonacciNumberAsync(numberOrdinal).ContinueWith(result =>\n    {\n        Result = result.Result.ToString();\n\n        InfoText = string.Empty;\n    });\n}\ncatch (Exception ex)\n{\n    Debug.WriteLine(\"Error:\" + ex.Message);\n    InfoText = \"EX:\" + ex.Message;\n}\n```", "```cs\nawait GetFibonacciNumberAsync(numberOrdinal).ContinueWith(result =>\n{\n    TraceThreadInfo(\"Response from GetFibonacciNumberAsync\");\n\n    if (result.IsFaulted)\n    {\n        Result = string.Empty;\n\n        InfoText = string.Join(\"\\r\\n\", result.Exception\n            .InnerExceptions.Select(exception => exception.Message));\n    }\n    else\n    {\n        Result = result.Result.ToString();\n\n        InfoText = string.Empty;\n    }\n});\n```", "```cs\npublic interface IService\n{\n    Task<string> AuthenticateAsync(string username, string password);\n\n    Task<int> ServiceMethodAsync(string myParameter);\n}\n```", "```cs\npublic MyService(string username, string password)\n{\n    //\n    // Following call would block the constructor\n    // IMPORTANT: If it was being called from the main UI thread, it might cause a deadlock\n    // Blocking Call Example 1:\n    // AuthenticateAsync(username, password).Wait();\n    // Blocking Call Example 2:\n    m_Token = AuthenticateAsync(username, password).Result;\n}\n```", "```cs\npublic MyService(string username, string password)\n{\n    m_Username = username;\n    m_Password = password;\n}\n\nprivate async Task EnsureInitializationAsync()\n{\n    if (string.IsNullOrEmpty(m_Token))\n    {\n        m_Token = await AuthenticateAsync(m_Username, m_Password);\n    }\n}\n```", "```cs\npublic async Task<int> ServiceMethodAsync(string myParameter)\n{\n    await EnsureInitializationAsync();\n\n    try\n    {\n        int result = await InternalServiceMethodAsync(myParameter);\n\n        return result;\n    }\n    catch (Exception ex)\n    {\n        // TODO:\n        throw;\n    }\n}\n```", "```cs\n/// <summary>\n/// Describes the service as requiring async initialization\n/// </summary>\npublic interface IAsyncInitialization\n{\n    /// <summary>\n    /// The result of the asynchronous initialization.\n    /// </summary>\n    Task Initialization { get; }\n}\n\npublic class MyService : IService, IAsyncInitialization\n{\n...\n\n    public Task Initialization { get; private set; }\n\n    public MyService(string username, string password)\n    {\n        m_Username = username;\n        m_Password = password;\n\n        Initialization = EnsureInitializationAsync();\n    }\n\n    private async Task EnsureInitializationAsync()\n    {\n        if (string.IsNullOrEmpty(m_Token))\n        {\n            m_Token = await AuthenticateAsync(m_Username, m_Password);\n        }\n    }\n\n...\n}\n```", "```cs\nif (serviceInstance is IAsyncInitialization)\n{\n    /// Wait for the results of the initialization\n    await serviceInstance.Initialization;\n}\n\nawait serviceInstance.ServiceMethodAsync(\"param\");\n```", "```cs\n//\n// Error: The 'await' operator cannot be used in the body of a lock statement\n//lock (m_FibonacciSource)\n//{   \n//    var result = await GetFibonacciNumberAsync(numberOrdinal);\n//}\n\n//\n// Warning: Might work but not guaranteed\nm_Mutex.WaitOne(200);\n\nawait GetFibonacciNumberAsync(numberOrdinal).ContinueWith((task) =>\n{\n    TraceThreadInfo(\"Response from GetFibonacciNumberAsync\");\n\n    Result = task.Result.ToString();\n\n    InfoText = string.Empty;\n});\n\nm_Mutex.ReleaseMutex();\n```", "```cs\nvar semaphoreSlim = new SemaphoreSlim(3);\n\nint count = 11;\n\nfor (var i = 0; i < 7; i++)\n{\n    Task.Factory.StartNew(() =>\n    {\n        return semaphoreSlim.WaitAsync().ContinueWith((waitTask) =>\n        {\n            return Task.Factory.StartNew(() =>\n            {\n                return GetFibonacciNumberAsync(count = Interlocked.Increment(ref count)).ContinueWith(\n                    (calculateTask) =>\n                    {\n                        TraceThreadInfo(string.Format(\"Current count on Semaphore: {0}\",\n                            semaphoreSlim.Release() + 1));\n                    });\n\n            }, TaskCreationOptions.LongRunning);\n        });\n    }, TaskCreationOptions.LongRunning);\n```", "```cs\n    nint taskId = UIApplication.SharedApplication\n        .BeginBackgroundTask(() =>\n    {\n        // TODO: Do something if the allotted time runs out\n    });\n\n    // TODO: Implement the processing logic\n\n    if (taskId != UIApplication.BackgroundTaskInvalid)\n    {\n        UIApplication.SharedApplication.EndBackgroundTask(taskId);\n    }\n    ```", "```cs\n    public override void DidEnterBackground (UIApplication application)\n    {\n        nint taskId = UIApplication.SharedApplication\n            .BeginBackgroundTask(() =>\n        {\n            // TODO: Do something if the allotted time runs out\n        });\n\n        Task.Run(() =>\n        {\n            // TODO: Implement the processing logic\n            UIApplication.SharedApplication.EndBackgroundTask(taskId);\n        });\n    }\n    ```", "```cs\n[Service]\n[IntentFilter(new String[] { \"com.xamarin.MyDemoService\" })]\npublic class MyDemoService : IntentService\n{\n    public MyDemoService()\n        : base(\"MyDemoService\")\n    {\n    }\n\n    protected override void OnHandleIntent(Intent intent)\n    {\n        var myParameter = intent.GetStringExtra(\"parameter\");\n\n        // Invoke long running process\n        DoWork(myParameter);\n    }\n}\n```", "```cs\n<service android:name=\"md5d06a1058f86cf8319abb1555c0b54fbf.MyDemoService\">\n    <intent-filter>\n        <action android:name=\"com.xamarin.MyDemoService\" />\n    </intent-filter>\n</service>\n```", "```cs\n//StartService (new Intent (this, typeof(MyDemoService)));\nStartService(new Intent(\"com.xamarin.MyDemoService\"));\n```"]