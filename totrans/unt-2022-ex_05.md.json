["```cs\nusing UnityEngine;\npublic class CollectItem : MonoBehaviour\n{\n    void Start()\n    {\n        Debug.Log($\"{gameObject.name}'s Start\n            called\", gameObject);\n    }\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        Debug.Log(\"Collision message event triggered!\");\n        Destroy(gameObject);\n    }\n    private void OnDestroy()\n    {\n        Debug.Log(\"Destroyed\");\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class TouchHazard : MonoBehaviour\n{\n    [Header(\"Make sure the 'Player' tag is also\n        assigned!\")]\n    public PlayerController Player;\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if (collision.CompareTag(Player.tag))\n        {\n            Debug.Log(\"You touched a toxic puddle!\");\n            Player.SlowPlayerSpeed();\n        }\n    }\n}\n```", "```cs\npublic class PlayerController : MonoBehaviour\n{\n    …\n    [Header(\"Hit Hazard Speed\")]\n    public float SlowedSpeed = 2f;\n    public float SlowedTime = 5f;   // Seconds\n    private float _speedStartValue;\n    private void Start()\n    {\n        _speedStartValue = MoveSpeed;\n    }\n    …\n    public void SlowPlayerSpeed()\n    {\n        MoveSpeed = SlowedSpeed;\n        Invoke(nameof(RestoreSpeed), SlowedTime);\n    }\n    private void RestoreSpeed()\n    {\n        MoveSpeed = _speedStartValue;\n    }\n}\n```", "```cs\n    // Singleton instance.\n    public static GameManager Instance\n        { get; private set; }\n    private void Awake() => Instance = this;\n```", "```cs\n        private int _totalCollectibleItems;\n    ```", "```cs\n        public void AddCollectibleItem() =>\n            _totalCollectibleItems++;\n    ```", "```cs\n        void Start()\n        {\n            …\n            GameManager.Instance.AddCollectibleItem();\n        }\n    ```", "```cs\n        public static event UnityAction OnItemCollected;\n    ```", "```cs\n            OnItemCollected?.Invoke();\n    ```", "```cs\n        private int _collectedItemCount;\n    ```", "```cs\n        private void ItemCollected() =>\n            _collectedItemCount++;\n    ```", "```cs\n        private void OnEnable()\n        {\n            CollectItem.OnItemCollected += ItemCollected;\n        }\n        private void OnDisable()\n        {\n            CollectItem.OnItemCollected -= ItemCollected;\n        }\n    ```", "```cs\nusing UnityEngine;\nusing TMPro;\npublic class UIManager : MonoBehaviour\n{\n    public TextMeshProUGUI CollectedItemText;\n    void Start()\n    {\n        CollectedItemText.text = string.Empty;\n    }\n    public void UpdateCollectedItemsText(\n        int currentItemCount, int totalCollectableItems) =>\n            CollectedItemText.text =\n                $\"{currentItemCount} of\n                    {totalCollectableItems}\";\n}\n```", "```cs\n        public UIManager UI;\n    ```", "```cs\n        private void ItemCollected() =>\n            UI.UpdateCollectedItemsText(\n                ++_collectedItemCount,\n                    _totalCollectibleItems);\n    ```", "```cs\nusing UnityEngine;\nusing UnityEngine.Events;\npublic class Timer : MonoBehaviour\n{\n    public event UnityAction<int> OnTimeUpdate;\n    public event UnityAction OnTimeExpired;\n    private int _timeSeconds, _timeCurrent;\n    public void StartTimer(int time)\n    {\n        _timeSeconds = time;\n        _timeCurrent = 0;\n        InvokeRepeating(nameof(UpdateTimer), 1f, 1f);\n    }\n    public void StopTimer() => CancelInvoke();\n    private void UpdateTimer()\n    {\n        _timeCurrent++;\n        OnTimeUpdate?.Invoke(_timeCurrent);\n        if (_timeCurrent >= _timeSeconds)\n        {\n            StopTimer();\n            OnTimeExpired?.Invoke();\n        }\n    }\n}\n```", "```cs\n        public Timer GameTimer;\n    ```", "```cs\n        public int GameplayTime;\n    ```", "```cs\n        private void Start() =>\n            Invoke(nameof(StartTimer), 2f);\n    ```", "```cs\n        private void StartTimer() =>\n            GameTimer.StartTimer(GameplayTime);\n    ```", "```cs\n        private void OnEnable()\n        {\n            …\n            GameTimer.OnTimeUpdate += TimeUpdated;\n        }\n    ```", "```cs\n        private void OnDisable()\n        {\n            …\n            GameTimer.OnTimeUpdate -= TimeUpdated;\n        }\n    ```", "```cs\n        private void TimeUpdated(int seconds) =>\n            UI.UpdateTimerText(seconds, GameplayTime);\n    ```", "```cs\n        public TextMeshProUGUI TimerText;\n        public TextMeshProUGUI GameOverText;\n        void Start()\n        {\n            …\n            TimerText.text = string.Empty;\n            GameOverText.text = string.Empty;\n        }\n        public void UpdateTimerText(int currentSeconds,\n            int totalSeconds)\n        {\n            var ts = System.TimeSpan.FromSeconds(\n                totalSeconds – currentSeconds);\n            TimerText.text = $\"{ts.Minutes}:{ts.Seconds:00}\";\n        }\n        public void SetGameOverText(string text) =>\n            GameOverText.text = text;\n    ```", "```cs\n    private void ItemCollected()\n    {\n        UI.UpdateCollectedItemsText(\n            ++_collectedItemCount, _totalCollectibleItems);\n        if (_collectedItemCount == _totalCollectibleItems)\n            Win();\n    }\n```", "```cs\n    private void OnEnable()\n    {\n        …\n        GameTimer.OnTimeExpired += TimeExpired;\n    }\n```", "```cs\n    private void OnDisable()\n    {\n        …\n        GameTimer.OnTimeExpired -= TimeExpired;\n    }\n```", "```cs\n    private void TimeExpired() => Lose();\n```", "```cs\n    public string WinText = \"You win!\";\n    public string LoseText = \"You lose!\";\n```", "```cs\n    private void Win()\n    {\n        GameTimer.StopTimer();\n        UI.SetGameOverText(WinText);\n        Time.timeScale = 0f;\n    }\n    private void Lose()\n    {\n        UI.SetGameOverText(LoseText);\n        Time.timeScale = 0f;\n    }\n```"]