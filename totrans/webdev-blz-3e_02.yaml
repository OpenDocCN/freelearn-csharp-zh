- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Your First Blazor App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will set up our development environment so that we can start
    developing Blazor apps. We will create our first Blazor app and go through the
    project structure.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a working development environment
    and have created a Blazor App that can run a mix of streaming server-side rendering,
    Blazor Server, and Blazor WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first Blazor application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figuring out the project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a new project (a blog engine) and will continue working on that
    project throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter’s result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, the focus will be on Windows development, and any screenshots
    are going to be from Visual Studio (unless stated otherwise). But since .NET 8
    is cross-platform, we will go through how to set up your development environment
    on Windows, macOS, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: The go-to link for all the platforms can be found at [https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/).
  prefs: []
  type: TYPE_NORMAL
- en: We can download Visual Studio or Visual Studio Code from the web page.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On Windows, we have many different options for developing Blazor applications.
    Visual Studio 2022 is the most powerful tool we can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three different editions, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Community 2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Professional 2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise 2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In short, the Community Edition is free, while the others cost money. The Community
    Edition does have some limitations, and we can compare the different editions
    here: [https://visualstudio.microsoft.com/vs/compare/](https://visualstudio.microsoft.com/vs/compare/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this book, we can use any of these versions. Take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Visual Studio 2022 from [https://visualstudio.microsoft.com/vs/](https://visualstudio.microsoft.com/vs/).
    Choose the version that is right for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Visual Studio and, during the installation, make sure to select **ASP.NET
    and web development**, as shown in *Figure 2.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_02_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Visual Studio 2022 installation on Windows'
  prefs: []
  type: TYPE_NORMAL
- en: To the right is a list of all the components that will be installed. Check **.NET
    WebAssembly Build Tools**. There might be a .NET6 or .NET 7 version in the list
    as well but we want the one without a version number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also use Visual Studio Code to develop Blazor on Windows, but we won’t
    discuss the installation process for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: macOS and Linux (or Windows)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio Code is cross-platform, which means we can use it on Linux, macOS,
    or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The different versions are available at [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, we also need to add two extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio Code and open the extension panel by pressing *Shift* + *command*
    + *X*on macOS or *Ctrl*+ *Shift*+ *X on Linux and Windows*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `C# Dev Kit for Visual Studio Code` and click **Install**. You might
    need a Microsoft account to install C# Dev Kit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `JavaScript Debugger (Nightly)` and click **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are other IDEs that are cross-platform as well, like JetBrains Rider for
    example, that some prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Now that everything is set up, let’s create our first app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first Blazor application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the book, we will create a blog engine. There won’t be a lot of business
    logic that you’ll have to learn; the app is simple to understand but will touch
    base on many of the technologies and areas you will be faced with when building
    a Blazor app.
  prefs: []
  type: TYPE_NORMAL
- en: I had an opportunity to discuss the project with Steve Sanderson (creator of
    Blazor) and Dan Roth (program manager for ASP.NET). We came to the conclusion
    that this is going to showcase the most important features of Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: The project will allow visitors to read blog posts and post comments. It will
    also have an admin site where we can write a blog post, which will be password-protected.
  prefs: []
  type: TYPE_NORMAL
- en: We will create an app that leverages Blazor Server, Blazor WebAssembly, and
    streaming server-side rendering.
  prefs: []
  type: TYPE_NORMAL
- en: IMPORTANT NOTE
  prefs: []
  type: TYPE_NORMAL
- en: This guide will use Visual Studio 2022 from now on, but other platforms have
    similar ways of creating projects.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In .NET 8, Microsoft reduced the amount of templates we have access to. We will
    explore them further in *Chapter 4*, *Understanding Basic Blazor Components*.
    This chapter will give you a quick overview.
  prefs: []
  type: TYPE_NORMAL
- en: In .NET 7, we had different templates depending on whether we wanted sample
    code, but in .NET 8 we only have two. We also have one Blazor Hybrid template
    (.NET MAUI), but we will return to it in *Chapter 18*, *Visiting .NET MAUI*.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor Web App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Blazor Web App** template gives us a Blazor app. Once we have selected
    this template, we get options for how we want our app to run. We can configure
    our app with sample code or without. We can choose whether our app should support
    interactive components and what type of interactivity we want. We can also choose
    whether we want to specify the rendering mode per component or for the full app.
    So, right away, we don’t need to choose whether or not we want to choose Blazor
    Server or Blazor WebAssembly; we can mix and match.
  prefs: []
  type: TYPE_NORMAL
- en: If we add sample pages, we get a couple of components to see what a Blazor app
    looks like and some basic setup and menu structure. It also contains code for
    adding Bootstrap, Isolated CSS, and things like that (see *Chapter 9*, *Sharing
    Code and Resources*).
  prefs: []
  type: TYPE_NORMAL
- en: This is the template we will use in the book to better understand how things
    go together.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor WebAssembly Standalone App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Blazor WebAssembly Standalone App** template gives us (as the name implies)
    a Blazor WebAssembly standalone app. Here, we can choose whether we want to have
    sample pages as well. It contains a couple of components to see what a Blazor
    app looks like and some basic setup and menu structure. It also contains code
    for adding Bootstrap, isolated CSS, and things like that (see *Chapter 9*, *Sharing
    Code and Resources*). So why do we have this one? Well, the Blazor Web App is
    dependent on server rendering technologies in one way or another. If you want
    to be able to run your app from a file share, GitHub Pages, or Azure Static Web
    Apps (to name a few), this is the template for you.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Blazor web application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, we will create a Blazor Server application and play around with it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start Visual Studio 2022, and you will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_02_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Visual Studio startup screen'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create a new project**, and in the search bar, type `blazor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will get a list of different templates – this is a mix of .NET 7 and .NET
    8 templates. Now we need to select the template for our project. Select **Blazor
    Web App** from the search results and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_02_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: The Visual Studio Create a new project screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now name the project (this is the hardest part of any project, but fear not,
    I have done that already!). Name the application `BlazorWebApp`. Change the solution
    name to `MyBlog` and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_02_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: The Visual Studio Configure your new project screen'
  prefs: []
  type: TYPE_NORMAL
- en: Next, choose what kind of Blazor app we should create. Select **.NET 8.0 (Long
    Term Support)** from the dropdown menu. Set **Authentication type** to **None**.
    Check **Configure** for HTTPS. Set Interactive render mode to **Auto (Server and
    Webassembly)** and **Interactivity location** to **Per page/component**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check **Include sample pages**. Uncheck **Do not use top-level statements**.
    Uncheck **Enlist in .NET Aspire orchestration** and click **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_02_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Visual Studio screen for creating a new Blazor app'
  prefs: []
  type: TYPE_NORMAL
- en: Now run the app by pressing **Ctrl** + **F5** (we can also find it under the
    menu **Debug** | **Start without debugging**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Congratulations! You have just created your first Blazor web application. The
    site should look something like in *Figure 2.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_02_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: A new Blazor Web App'
  prefs: []
  type: TYPE_NORMAL
- en: Explore the site a bit, navigate to **Counter** and **Weather** to get a feeling
    for the load times, and see what the sample application does.
  prefs: []
  type: TYPE_NORMAL
- en: The different pages have different ways of running. The Counter page is interactive
    and uses auto render mode. This means if loading the WebAssembly version takes
    longer than 100 milliseconds, the web will first start up a SignalR connection
    that will load the component fast. In the background, the WebAssembly version
    is downloaded and cached. The next time the user visits our site, it will use
    the cached version and load much faster.
  prefs: []
  type: TYPE_NORMAL
- en: The browser downloads the page, some CSS, and then `blazor.web.js`, which is
    responsible for setting up the site. In some cases, it’s a SignalR connection
    back to the server, and in some, it’s starting up WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: The Counter page is configured as `RenderMode:Auto`, which means it will first
    render with Blazor Server and then any following requests will update with WebAssembly.
    As soon as you switch to the Counter page, a bunch of files will get downloaded
    in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, when the page gets downloaded, it will trigger a download of
    the necessary JavaScript files. Then, `blazor.boot.json` gets downloaded. *Figure
    2.13* shows an example of part of `blazor.boot.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A close up of text  Description automatically generated](img/B21849_02_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Part of the blazor.boot.json file'
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing `blazor.boot.json` contains is the entry assembly,
    which is the name of the DLL the browser should start executing. It also includes
    all the framework DLLs the app needs to run. Now, our app knows what it needs
    to start up. In previous versions of .NET, the files were DLL files. In .NET 8,
    we download `.wasmfiles`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Blazor will use `Webcil`, which is a payload format. `Webcil` will
    package the DLLs. Some providers have turned off support for DLL files, and anti-virus
    programs have issues with DLL files, so this is an awesome update.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript will then download all the resources mentioned in `blazor.boot.json`:
    this is a mix of your code compiled to a .NET Standard DLL, Microsoft .NET Framework
    code, and any community or third-party DLLs you might use. The JavaScript then
    downloads `dotnet.native.wasm`, the Mono runtime compiled to WebAssembly, which
    will start booting up your app.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have the base for our project. Throughout this book, we will use Visual
    Studio, but there are other ways to run your Blazor site, such as using the command
    line. The command line is a super powerful tool, and in the next section, we will
    take a look at how to set up a project using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Using the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With .NET 5, we got a super powerful tool called `dotnet.exe`. Developers who
    have used .NET Core before will already be familiar with the tool, but with .NET
    5, it is no longer exclusively for .NET Core developers.
  prefs: []
  type: TYPE_NORMAL
- en: It can do many things Visual Studio can do, for example, creating projects,
    adding and creating NuGet packages, and much more. In the following example, we
    will create a Blazor Server and a Blazor WebAssembly project using the **dotnet**
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating projects using the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps are to demonstrate the power of using the command line.
    We will not use this project later in the book, so if you don’t want to try it,
    go ahead and skip this section. The CLI is cross-platform, so this can be used
    on Linux and macOS as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a solution with a Blazor app, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will not go deeper into the CLI in this book but know that it is a great
    way to create projects, add packages, and much, much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: THE .NET CLI'
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is that you should be able to do everything from the command line.
    If you prefer working with the command line, you should check out the .NET CLI;
    you can read more about the .NET CLI here: [https://docs.microsoft.com/en-us/dotnet/core/tools/](https://docs.microsoft.com/en-us/dotnet/core/tools/).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go back to the Blazor template, which has added a lot of files for us.
    In the next section, we will look at what Visual Studio has generated for us.
  prefs: []
  type: TYPE_NORMAL
- en: Figuring out the project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visual Studio will generate two projects: `Blazor App`, which is the server
    project, and `BlazorWebApp.Client`, which is where we put our WebAssembly components.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to look at the different files and how they may differ in different
    projects. Take a look at the code in the two projects we just created (in the
    *Creating our first Blazor app* section) while we go through them.
  prefs: []
  type: TYPE_NORMAL
- en: Program.cs (BlazorWebApp project)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Program.cs` is the first class that gets called. So, let’s start looking at
    that one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Program.cs` file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In .NET 6, Microsoft removed the `Startup.cs` file and put all the startup code
    in `Program.cs`. It also uses top-level statements, which makes the code a bit
    less bloated.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things worthy of mentioning here. The Program class starts with
    adding all the dependencies we need in our application. In this case, we add `RazorComponent`,
    which enables us to run Razor components. Then, we add `InteractiveServerComponents`,
    giving us access to all the objects we need to run Blazor Server. Since we selected
    the auto render mode, we also get access to Blazor WebAssembly by adding `InteractiveWebAssemblyComponents.`
  prefs: []
  type: TYPE_NORMAL
- en: It also configures **HTTP Strict Transport Security** (**HSTS**), forcing your
    application to use HTTPS, and will make sure that your users don’t use any untrusted
    resources or certificates. We also ensure that the site redirects to HTTPS to
    secure the site.
  prefs: []
  type: TYPE_NORMAL
- en: '`UseStaticFiles` enables downloading static files such as CSS or images.'
  prefs: []
  type: TYPE_NORMAL
- en: '`UseAntiforgery` is a method that adds anti-forgery middleware to the application
    pipeline, providing a layer of security against **Cross-Site Request Forgery**
    (**CSRF** or **XSRF**) attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: These types of attacks occur when a malicious web app influences the interaction
    between a client browser and a web app that trusts that browser, often leading
    to unwanted actions being performed without the user’s consent.
  prefs: []
  type: TYPE_NORMAL
- en: The different `Use*` methods add request delegates to the request pipeline or
    middleware pipeline. Each request delegate (`ExceptionHandler`, `HttpRedirection`,
    `StaticFiles`, and so on) is called consecutively from the top to the bottom in
    the order they are added in `Program.cs` and back again.
  prefs: []
  type: TYPE_NORMAL
- en: This is why the exception handler is the first one to be added.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is an exception in any of the request delegates that follow, the exception
    handler will still be able to handle it (since the request travels back through
    the pipeline), as shown in *Figure 2.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – The request middleware pipeline](img/B21849_02_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: The request middleware pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: If any of these request delegates handle the request in the case of a static
    file, for example, there is no need to involve routing, and the remaining request
    delegates will not get called. Sometimes, it is essential to add the request delegates
    in the correct order; for example, we want to run authentication early in the
    pipeline to make sure that users can’t access things they shouldn’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is more information about this here if you want to dig even deeper: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-8.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-8.0).'
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the class, we map Razor components to the `App` component. We
    add the different render modes and additional assemblies – in this case, the `BlazorWebApp.Client`
    project, which is our WebAssembly project.
  prefs: []
  type: TYPE_NORMAL
- en: Program.cs (BlazorWebApp.Client)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `program.cs` located in the Blazor WebAssembly project doesn’t contain many
    things.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It simply sets up a host builder and uses the default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: App (BlazorWebApp)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing that happens is that the `App` component runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let’s go through it and see what we can learn. It starts with `html`, `doctype`,
    and a `head` tag. The `head` tag contains meta tags and **stylesheets** (**CSS**).
    The `base` tag is so the application finds the appropriate files. If we are, for
    example, hosting our application in a subfolder (like on GitHub Pages) we need
    to modify the `base` tag to reflect that. The `HeadOutlet` component is for us
    to add things like page titles from within our code (we will return to that in
    *Chapter 5*, *Creating Advanced Blazor Components*).
  prefs: []
  type: TYPE_NORMAL
- en: The `Routes` component is the component that handles all the routing, which
    we will take a look at next. And last but not least, we have the JavaScript that
    makes all of this possible.
  prefs: []
  type: TYPE_NORMAL
- en: Routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Routes` component is the one that handles all the routing. It looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This file handles the routing, finding the suitable component to show (based
    on the `@page` directive). It shows an error message if the route can’t be found.
    In *Chapter 8*, *Authentication and Authorization*, we will make changes to this
    file when we implement authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The `Routes` component also includes a default layout. We can override the layout
    per component, but usually, you’ll have one layout page for your site. In this
    case, the default layout is called `MainLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: The `FocusOnNavigate` will set the focus on a specific element once we have
    navigated/loaded a new component/route – in this case, `H1`.
  prefs: []
  type: TYPE_NORMAL
- en: MainLayout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MainLayout`, which we can find in the shared folder, contains the default
    layout for all components when viewed as a page. The `MainLayout` contains a couple
    of `div` tags, one for the sidebar and one for the main content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The only things you need in this document are `@inherits LayoutComponentBase`
    and `@Body`; the rest is just Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap is one of the most popular CSS frameworks for developing responsive
    and mobile-first websites.
  prefs: []
  type: TYPE_NORMAL
- en: We can find a reference to Bootstrap in the `App.Razor` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'It was created by and for Twitter/X. You can read more about Bootstrap here:
    [https://getbootstrap.com/](https://getbootstrap.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: The `@inherits` directive inherits from `LayoutComponentBase`, which contains
    all the code to use a layout. `@Body` is where the component will be rendered
    (when viewed as a page).
  prefs: []
  type: TYPE_NORMAL
- en: It also contains the default error UI for Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the layout, you can see `<NavMenu>`, a Razor component. It is
    located in the `Components/Layout` folder and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It contains the left-side menu and is a standard Bootstrap menu. It also has
    three menu items and logic for a hamburger menu (if viewed on a phone). This type
    of nav menu is usually done with JavaScript, but this one is done solely with
    CSS and C#.
  prefs: []
  type: TYPE_NORMAL
- en: You will find another component, `NavLink`, which is built into the framework.
    It will render an anchor tag but will also check the current route. If you are
    currently on the same route/URL as the nav link, it will automatically add a CSS
    class called `active` to the tag.
  prefs: []
  type: TYPE_NORMAL
- en: We will run into a couple more built-in components that will help us along the
    way. There are also some pages in the template, but we will leave them for now
    and go through them in the next chapter when we go into components.
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `Components/Layout` folder, there are two CSS files: : `NavMenu.razor.css`
    and `MainLayout.razor.css`.'
  prefs: []
  type: TYPE_NORMAL
- en: These files are CSS styles that affect only the specific component (the first
    part of the name). We will return to a concept called isolated CSS in *Chapter
    9*, *Sharing Code and Resources*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we got the development environment up and running, and we created
    our first Blazor app. We learned in what order classes, components, and layouts
    are called, making it easier to follow the code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a break from Blazor to look at managing state
    and set up a repository to store our blog posts.
  prefs: []
  type: TYPE_NORMAL
