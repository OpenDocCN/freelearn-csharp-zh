["```cs\npublic static void ExceptionTest1()\n{\n    string str = string.Empty;\n    int parseInt = int.Parse(str);\n}\n```", "```cs\nSystem.FormatException occurred\n  HResult=0x80131537\n  Message=Input string was not in a correct format.\n  Source=<Cannot evaluate the exception source>\n  StackTrace:\n   at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)\n   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)\n   at System.Int32.Parse(String s)\n   at Chapter7.ExceptionSamples.ExceptionTest1() in C:\\Users\\srini\\source\\repos\\Programming-in-C-Exam-70-483-MCSD-Guide2\\Book70483Samples\\Chapter7\\ExceptionSamples.cs:line 14\n   at Chapter7.Program.Main(String[] args) in C:\\Users\\srini\\source\\repos\\Programming-in-C-Exam-70-483-MCSD-Guide2\\Book70483Samples\\Chapter7\\Program.cs:line 13\n```", "```cs\npublic static void ExceptionTest2()\n{\n    string str = string.Empty;\n    try\n    {\n        int parseInt = int.Parse(str);\n    }\n    catch (FormatException e)\n    {\n        Console.WriteLine($\"Exception Data: {e.Data}\");\n        Console.WriteLine($\"Exception HelpLink: {e.HelpLink}\");\n        Console.WriteLine($\"Exception HResult: {e.HResult}\");\n        Console.WriteLine($\"Exception InnerException: \n                          {e.InnerException}\");\n        Console.WriteLine($\"Exception Message: {e.Message}\");\n        Console.WriteLine($\"Exception Source: {e.Source}\");\n        Console.WriteLine($\"Exception TargetSite: {e.TargetSite}\");\n        Console.WriteLine($\"Exception StackTrace: {e.StackTrace}\");\n    }\n}\n```", "```cs\npublic static void ExceptionTest3()\n{\n    string str = string.Empty;\n    try\n    {\n        int parseInt = int.Parse(str);\n    }\n    catch (ArgumentException ex)\n    {\n        Console.WriteLine(\"Argument Exception caught\");\n    }\n    catch (FormatException e)\n    {\n        Console.WriteLine(\"Format Exception caught\");\n\n    }\n    catch (Exception ex1)\n    {\n        Console.WriteLine(\"Generic Exception caught\");\n    }\n}\n```", "```cs\nFormat Exception caught\nPress any key to exit.\n```", "```cs\npublic static void ExceptionTest4()\n{\n    string str = string.Empty;\n    try\n    {\n        int parseInt = int.Parse(str);\n    }\n    catch (ArgumentException ex)\n    {\n        Console.WriteLine(\"Argument Exception caught\");\n    }\n    catch (FormatException e)\n    {\n        Console.WriteLine(\"Format Exception caught\");\n\n    }\n    catch (Exception ex1)\n    {\n        Console.WriteLine(\"Generic Exception caught\");\n    }\n    finally\n    {\n        Console.WriteLine(\"Finally block executed\");\n    }\n}\n```", "```cs\nFormat Exception caught\nFinally block executed\nPress any key to exit.\n```", "```cs\ntry\n{\n    //code block which might trigger exceptions\n}\ncatch (SpecificException ex)\n{\n   //exception handling code block\n\n}\n```", "```cs\ntry\n{\n    // code block which might trigger exceptions\n}\nfinally\n{\n    // Dispose resources here.\n    //Block you want to execute all times irrespective of try block is executed or not.\n}\n```", "```cs\ntry\n{\n    // Code that you expect to throw exceptions goes here.\n}\ncatch (SpecificException ex)\n{\n    // exception handling code block\n}\nfinally\n{\n    // code block that you want to run in all scenarios\n}\n```", "```cs\npublic static void ExceptionTest5()\n{\n     string[] strNumbers = new string[] {\"One\",\"Two\",\"Three\",\"Four\" };\n     try\n     {\n         for (int i = 0; i <= strNumbers.Length; i++)\n         {\n             Console.WriteLine(strNumbers[i]);\n         }\n     }\n     catch (System.IndexOutOfRangeException e)\n     {\n         Console.WriteLine(\"Index is out of range.\");\n         throw new System.ArgumentOutOfRangeException(\n                     \"Index is out of range.\", e);\n     }\n }\n```", "```cs\npublic static void ExceptionTest6()\n{\n    FileStream inputfile= null;\n    FileInfo finfo = new FileInfo(\"Dummyfile.txt\");\n    try\n    {\n        inputfile = finfo .OpenWrite();\n        inputfile.WriteByte(0xH);\n    }\n    finally\n    {\n        // Check for null because OpenWrite() method might return null.\n        if (inputfile!= null)\n        {\n            inputfile.Close();\n        }\n    }\n}\n```", "```cs\npublic class MyCustomException : Exception\n{\n    public MyCustomException():base(\"This is my custom exception\")\n    {\n\n    }\n\n    public MyCustomException(string message) \n           : base($\"This is from the method : {message}\")\n    {\n\n    }\n\n    public MyCustomException(string message, Exception innerException) \n       : base($\"Message: {message}, InnerException: {innerException}\")\n    {\n    } \n}\n```"]