["```cs\npublic class UIManager : Singleton<UIManager>\n{\n    public GenericDictionary<Type, BaseView> views = new GenericDictionary<Type, BaseView>();\n    private BaseView lastActiveView;\n    protected override void Awake()\n    {\n        base.Awake();\n    }\n    // Register a view with the UIManager\n    public void RegisterView<T>(T view) where T : BaseView\n    {\n        if (view != null && !views.ContainsKey(typeof(T)))\n        {\n            views.Add(typeof(T), view);\n        }\n    }\n    // Show a view\n    public void ShowView<T>() where T : BaseView\n    {\n        if (views.ContainsKey(typeof(T)))\n        {\n            var view = views[typeof(T)];\n            // Show the new view\n            view.Show();\n            lastActiveView = view;\n        }\n        else\n        {\n            Debug.LogError(\"The View Of Type is Not Exist \" + typeof(T).ToString());\n        }\n    }\n    public void HideView<T>()\n    {\n        if (views.ContainsKey(typeof(T)))\n        {\n            var view = views[typeof(T)];\n            if (view.IsVisible())\n                view.Hide();\n        }\n    }\n    // Hide the currently active view\n    public void HideActiveView()\n    {\n        if (lastActiveView != null)\n        {\n            lastActiveView.Hide();\n            lastActiveView = null;\n        }\n    }\n    public BaseView GetView(Type viewType)\n    {\n        if (views.ContainsKey(viewType)) return views[viewType];\n        else return null;\n    }\n    public T GetView<T>()\n    {\n        if (views.ContainsKey(typeof(T))) return (T)Convert.ChangeType(views[typeof(T)], typeof(T));\n        else return (T)Convert.ChangeType(null, typeof(T));\n    }\n}\n```", "```cs\n    public class HUDManager : UIManager\n    {\n        //Override Methods or Add new Logic here\n    }\n```", "```cs\n    public abstract class BaseView : MonoBehaviour\n    {\n        private Canvas canvas;\n        public bool isActiveView;\n        public GameData gameData;\n        public UITween tweenComponent;\n        protected virtual void Start()\n        {\n            canvas = GetComponent<Canvas>();\n        }\n        // Show this view\n        public virtual void Show()\n        {\n            isActiveView = true;\n            canvas.enabled = true;\n            gameObject.SetActive(true);\n            PlayTweens(true);\n            ShowView();\n        }\n        public virtual void ShowView()\n        {\n        }\n        // Hide this view\n        public virtual void Hide()\n        {\n            PlayTweens(false);\n        }\n        private void OnOutTweenComplete()\n        {\n            isActiveView = false;\n            canvas.enabled = false;\n        }\n        public virtual void HideCanvas()\n        {\n            canvas.enabled = false;\n        }\n        // Return true if this view is currently visible\n        public bool IsVisible()\n        {\n            return canvas.enabled;\n        }\n        private void PlayTweens(bool state)\n        {\n            if (state)\n            {\n                tweenComponent?.PlayInTween();\n            }\n            else\n            {\n                if (tweenComponent == null)\n                {\n                    OnOutTweenComplete();\n                }\n                else\n                {\n                    tweenComponent.PlayOutTween(OnOutTweenComplete);\n                }\n            }\n        }\n    }\n```", "```cs\n    public class TopBarView : BaseView\n    {\n        protected override void Start()\n        {\n            base.Start();\n            StartUIManager.Instance.RegisterView<TopBarView>(this);\n            Show();\n        }\n       //Add here logic for displaying the currencies for the player\n    }\n```", "```cs\n// Model\npublic class PlayerData\n{\n    public int playerLevel;\n    public int playerScore;\n}\n```", "```cs\n// ViewModel\npublic class PlayerViewModel : MonoBehaviour\n{\n    private PlayerData playerData;\n    // Properties for data binding\n    public int PlayerLevel => playerData.playerLevel;\n    public int PlayerScore => playerData.playerScore;\n    private void Start()\n    {\n        playerData = new PlayerData();\n    }\n    public void UpdatePlayerData(int level, int score)\n    {\n        playerData.playerLevel = level;\n        playerData.playerScore = score;\n    }\n}\n```", "```cs\n// View\npublic class PlayerView : MonoBehaviour\n{\n    [SerializeField] private PlayerViewModel playerViewModel;\n    private void Start()\n    {\n        // Subscribe to ViewModel events\n        playerViewModel.UpdatePlayerData(1, 100); // Example initialization\n    }\n    private void Update()\n    {\n        // Example of data binding\n        Debug.Log(\"Player Level: \" + playerViewModel.PlayerLevel);\n        Debug.Log(\"Player Score: \" + playerViewModel.PlayerScore);\n    }\n}\n```"]