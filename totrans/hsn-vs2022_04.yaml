- en: 'Chapter 3: Improvements in Visual Studio 2022'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every new Visual Studio version brings new features to improve user experience
    and performance and provides more functionalities and tools for developers.
  prefs: []
  type: TYPE_NORMAL
- en: We are just starting with Visual Studio 2022\. In this book, you will learn
    some features with medium and high complexity, and in later chapters, we will
    study the changes in Visual Studio 2022 in more detail to get a deeper understanding.
    But in this chapter, we will review the most important features available in Visual
    Studio 2022 that you can use now.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will recognize the main differences between
    Visual Studio 2019 and Visual Studio 2022 and the most relevant improvements in
    this new version.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will review the following improvements in Visual Studio 2022:'
  prefs: []
  type: TYPE_NORMAL
- en: 64-bit architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New icons and styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET 6 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other improvements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need to have Visual Studio 2022 already installed
    on your machine. In [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013), *Getting
    Started with Visual Studio 2022*, you can check the requirements and the installation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 64-bit architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A simple but important feature in Visual Studio 2022 is the new architecture
    in 64 bit. This is a change that we cannot see, but internally, it takes advantage
    of a 64-bit CPU to improve the performance and reduce delays in the execution
    of multiple tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2022 only supports a 64-bit system; this is something common in
    current laptops and PCs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using **Task Manager** in Windows, you will be able to notice the difference
    when Visual Studio 2019 and 2022 are running at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Visual Studio 2022 on the 64-bit platform and 2019 on the 32-bit
    platform](img/Figure_3.1_B17873.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Visual Studio 2022 on the 64-bit platform and 2019 on the 32-bit
    platform
  prefs: []
  type: TYPE_NORMAL
- en: With a 32-bit architecture, there was an access limitation of 4 GB of memory.
    Now, thanks to a 64-bit architecture, it is possible to access a larger amount
    of memory, reducing time limits and avoiding IDE freezes or crashes.
  prefs: []
  type: TYPE_NORMAL
- en: All in all, the Visual Studio development team improved the performance for
    many scenarios in version 2022\. You will notice the difference when working on
    large projects, and performance will be better in future versions.
  prefs: []
  type: TYPE_NORMAL
- en: 64 bit is a good improvement for performance, but this feature doesn't improve
    user interaction while coding. In the following section, we will see how the icons
    and style were improved to have a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: New icons and styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'New icons and styles were added in Visual Studio 2022\. Although this is a
    simple feature, it helps us to navigate easily in an application, using visual
    elements and identifying actions and tools properly. For instance, in *Figure
    3.2*, you can see the broom icon (row one, column five) has better contrast, with
    a new vibrant yellow color (specifically for a dark theme) and a modern design.
    It also implies that a code cleanup will be executed. The broom icon is used to
    execute code cleanup to fix code formatting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Icons in Visual Studio 2022 versus 2019'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Icons in Visual Studio 2022 versus 2019
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: An interesting fact about the new icons in Visual Studio 2022 is that the Visual
    Studio development team worked with the developer community to fulfill three purposes
    – consistency, readability, and familiarity. This resulted in a series of icons
    with the same meaning but with consistent colors, sharp contrast, and a recognizable
    silhouette.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contrast between letters, icons, and background was improved to make it
    more pleasant and less tiring for the eyes. In *Figure 3.3*, you can see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – An example of a dark theme in Visual Studio 2019 (left) versus
    2022 (right)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – An example of a dark theme in Visual Studio 2019 (left) versus
    2022 (right)
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: While the use of dark themes is becoming more common among developers in general,
    it is also becoming more prevalent in applications across the industry.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.4* is another example of using the blue theme. Although the colors
    are very similar, we can see some differences and how the screen looks better
    with the new icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – An example of a blue theme in Visual Studio 2019 (left) versus
    2022 (right)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.4_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – An example of a blue theme in Visual Studio 2019 (left) versus
    2022 (right)
  prefs: []
  type: TYPE_NORMAL
- en: There are also some changes in the other themes, but dark and blue were the
    most improved.
  prefs: []
  type: TYPE_NORMAL
- en: With these new icons and styles, working with Visual Studio becomes more user-friendly.
    In the next section, we will see how Visual Studio supports the new version of
    .NET, .NET 6\.
  prefs: []
  type: TYPE_NORMAL
- en: .NET 6 support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**.NET** is a free, open source framework used to create web, desktop, mobile,
    and other kinds of applications, using C#, F#, and Visual Basic (with C# being
    the most popular one).'
  prefs: []
  type: TYPE_NORMAL
- en: A new version of .NET has been released every year. .NET 6 is a new long-term
    support version, which offers great new improvements, such as minimal APIs and
    C# 10 compatibility. For more information about the improvements, you can visit
    [https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6](https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6).
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2022 is ready to create, compile, and publish projects using this
    new version.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 4*](B17873_04_ePub.xhtml#_idTextAnchor052), *Creating Projects
    and Templates*, we will analyze the projects and templates provided by Visual
    Studio and look at the option to choose .NET 6 for our applications.
  prefs: []
  type: TYPE_NORMAL
- en: We can create projects using .NET 6, but we can also use a new functionality
    for quickly checking the code changes. In the next section, we will review how
    Hot Reload can improve our productivity while using Visual Studio 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a long time, **Hot Reload** was the main requested feature in the .NET developers'
    community. This is a feature already implemented in many technologies and expands
    a developer's productivity by refreshing an application after every change made
    to code.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload is a feature that recompiles code after a change is made to it. This
    way, an application displays visual changes immediately without the need to restart
    it, significantly increasing productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even external companies are working on this feature; one of the most popular
    is LiveSharp, which offers a monthly subscription (at the time of writing). You
    can check it out at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.livesharp.net/](https://www.livesharp.net/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio 2022 includes this amazing feature for many kinds of projects,
    including ones involving ASP.NET and Blazor (by creating web apps using WebAssembly
    and Razor components):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The Hot Reload button in Visual Studio 2022'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.5_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – The Hot Reload button in Visual Studio 2022
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The team behind Hot Reload decided not to support the new Hot Reload feature
    in *Xamarin.Forms* based projects for Android and iOS scenarios, so it is recommended
    to perform a migration to .NET MAUI to use this feature.
  prefs: []
  type: TYPE_NORMAL
- en: In later chapters, we will use this utility in some demos and learn why this
    tool is very important for us. In the next section, we will share other improvements
    that can help us to increase our productivity, especially in larger projects.
  prefs: []
  type: TYPE_NORMAL
- en: Other improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visual Studio 2022 has other improvements, one of which is performance. Visual
    Studio 2022 runs on 64 bit, but in addition, features such as the search file
    tool were improved to help find elements quickly in a project with a large number
    of files. In the following diagram, you will see a search example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – An example of searching for the word "class" in Visual Studio
    2022'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.6_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – An example of searching for the word "class" in Visual Studio 2022
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you have a new type of breakpoint (*a breakpoint is a technique to stop
    application execution in a specific line of the code*). With this feature, we
    can add a breakpoint that depends on another created before. We will see more
    information about this feature in [*Chapter 5*](B17873_05_ePub.xhtml#_idTextAnchor060),
    *Debugging and Compiling Your Projects*. In *Figure 3.7*, you can see the new
    **Insert Dependent Breakpoint** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The dependent breakpoint in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.7_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – The dependent breakpoint in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: This is a new type of breakpoint that is very useful for debugging large applications
    with high complexity. It will interrupt the execution of your application when
    a previous breakpoint meets a condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding Git integration, we have a new experimental feature that helps us
    to work with multiple repositories in the same solution. Thus, you can perform
    changes in different projects and then commit the changes (save the changes in
    Git) without opening multiple instances of Visual Studio. In *Figure 3.8*, the
    new option to enable multiple repositories is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – In Tools | Options | Preview Features, there is a new option
    to enable multi-repo support'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.8_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – In Tools | Options | Preview Features, there is a new option to
    enable multi-repo support
  prefs: []
  type: TYPE_NORMAL
- en: We will analyze this feature deeper in [*Chapter 11*](B17873_11_ePub.xhtml#_idTextAnchor130),
    *Implementing Git Integration*, where we will use a repository in GitHub to try
    functionalities related to the integration with Git and GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, IntelliCode is undoubtedly one of the major changes introduced in
    Visual Studio 2022, allowing developers to program with confidence, find problems
    quickly, and have focused code reviews by suggesting items that are most likely
    to be used at the top of a to-do list, as you can see in *Figure 3.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – IntelliCode suggesting the properties and methods that are most
    likely to be utilized'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.9_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – IntelliCode suggesting the properties and methods that are most
    likely to be utilized
  prefs: []
  type: TYPE_NORMAL
- en: We will get to know all the features of this fabulous addition in [*Chapter
    7*](B17873_07_ePub.xhtml#_idTextAnchor088), *Coding Efficiently with AI and Code
    Views*, which will allow you to fully explore the use of IntelliCode.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we provided an overview of the main improvements in Visual
    Studio and some differences between Visual Studio 2022 and Visual Studio 2019\.
    Throughout this book, we will analyze these features further and use them in some
    demos.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 4*](B17873_04_ePub.xhtml#_idTextAnchor052)*,* *Creating Projects
    and Templates*, you will create your first project and analyze the templates provided
    by Visual Studio for different programming languages and technologies.
  prefs: []
  type: TYPE_NORMAL
