["```cs\n@page \"/counter\" \n```", "```cs\n@rendermode InteractiveAuto \n```", "```cs\n@code {\n    private int currentCount = 0;\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n} \n```", "```cs\n<p role=\"status\">Current count: @currentCount</p> \n```", "```cs\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button> \n```", "```cs\n@page \"/weather\"\n@attribute [StreamRendering(true)] \n```", "```cs\n<PageTitle>Weather</PageTitle>\n<h1>Weather</h1>\n<p>This component demonstrates showing data.</p>\n@if (forecasts == null)\n{\n    <p><em>Loading...</em></p>\n}\nelse\n{\n    <table class=\"table\">\n<thead>\n<tr>\n<th>Date</th>\n<th>Temp. (C)</th>\n<th>Temp. (F)</th>\n<th>Summary</th>\n</tr>\n</thead>\n<tbody>\n            @foreach (var forecast in forecasts)\n            {\n                <tr>\n<td>@forecast.Date.ToShortDateString()</td>\n<td>@forecast.TemperatureC</td>\n<td>@forecast.TemperatureF</td>\n<td>@forecast.Summary</td>\n</tr>\n            }\n        </tbody>\n</table>\n} \n```", "```cs\n@code {\n    private WeatherForecast[]? forecasts;\n    protected override async Task OnInitializedAsync()\n    {\n        // Simulate asynchronous loading to demonstrate streaming rendering\nawait Task.Delay(500);\n        var startDate = DateOnly.FromDateTime(DateTime.Now);\n        var summaries = new[] { \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\" };\n        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = startDate.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = summaries[Random.Shared.Next(summaries.Length)]\n        }).ToArray();\n    }\n    private class WeatherForecast\n    {\n        public DateOnly Date { get; set; }\n        public int TemperatureC { get; set; }\n        public string? Summary { get; set; }\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n    }\n} \n```", "```cs\n@code {\n    //your code here\n} \n```", "```cs\n@{\n    //your code here\n} \n```", "```cs\n@{\n    void RenderName(string name)\n    {\n        <p>Name: <strong>@name</strong></p>\n    }\n    RenderName(\"Steve Sanderson\");\n    RenderName(\"Daniel Roth\");\n} \n```", "```cs\n<text>Name: <strong>@name</strong></text> \n```", "```cs\n<td>@forecast.Summary</td> \n```", "```cs\n<td>@(DateTime.Now - TimeSpan.FromDays(7))</td> \n```", "```cs\n<td>Temp@(forecast.TemperatureC)</td> \n```", "```cs\n<td>@(MyGenericMethod<string>())</td> \n```", "```cs\n@(\"<span>Hello World</span>\") \n```", "```cs\n&lt;span&gt;Hello World&lt;/span&gt; \n```", "```cs\n@((MarkupString)\"<span>Hello World</span>\") \n```", "```cs\n@attribute [Authorize] \n```", "```cs\n[Authorize] public partial class SomeClass {} \n```", "```cs\n@implements IDisposable \n```", "```cs\npublic partial class SomeClass : IDisposable {} \n```", "```cs\n@inherits TypeNameOfClassToInheritFrom \n```", "```cs\npublic class SomeClass : TypeNameOfClassToInheritFrom {} \n```", "```cs\n@typeparam TItem\n@code\n{\n      [Parameter]\n      public List<TItem> Data { get; set; }\n} \n```", "```cs\n@layout AnotherLayout \n```", "```cs\n@namespace Another.NameSpace \n```", "```cs\n@page \"/theurl\" \n```", "```cs\n@using System.IO \n```", "```cs\nbuilder.Services.AddScoped<IBlogApi, BlogApiJsonDirectAccess>(); \n```", "```cs\nbuilder.Services.AddScoped<BlogApiJsonDirectAccess>(); \n```", "```cs\nservices.AddSingleton<IWeatherForecastService, WeatherForecastService>(); \n```", "```cs\nservices.AddScoped<IWeatherForecastService, WeatherForecastService>(); \n```", "```cs\nservices.AddTransient<IWeatherForecastService, WeatherForecastService>(); \n```", "```cs\n@inject WeatherForecastService ForecastService \n```", "```cs\n[Inject]\npublic WeatherForecastService ForecastService { get; set; } \n```", "```cs\npublic class MyService\n{\n    public MyService(WeatherForecastService\n      weatherForecastService)\n    {\n    }\n} \n```", "```cs\n<Routes @rendermode=\"@InteractiveAuto\" /> \n```", "```cs\n@rendermode InteractiveAuto \n```", "```cs\n<Routes @rendermode=\"new InteractiveServerRenderMode(prerender: false)\" /> \n```", "```cs\nnamespace BlazorWebApp.Components.Pages;\n[StreamRendering(true)]\npublic partial class WeatherWithCodeBehind\n{\n    private WeatherForecast[]? forecasts;\n    protected override async Task OnInitializedAsync()\n    {\n        // Simulate asynchronous loading to demonstrate streaming rendering\nawait Task.Delay(500);\n        var startDate = DateOnly.FromDateTime(DateTime.Now);\n        var summaries = new[] { \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\" };\n        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = startDate.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = summaries[Random.Shared.Next(summaries.Length)]\n        }).ToArray();\n    }\n    private class WeatherForecast\n    {\n        public DateOnly Date { get; set; }\n        public int TemperatureC { get; set; }\n        public string? Summary { get; set; }\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n    }\n} \n```", "```cs\npublic class WeatherWithInheritsModel:ComponentBase \n```", "```cs\n@inherits WeatherWithInheritsModel \n```", "```cs\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Components.Rendering;\nusing Microsoft.AspNetCore.Components.Web;\nnamespace BlazorWebApp.Component.Pages;\n[Route(\"/CounterWithoutRazor\")]\npublic class CounterWithoutRazor : ComponentBase\n{\n    protected override void BuildRenderTree\n      (RenderTreeBuilder builder)\n    {\n        builder.AddMarkupContent(0, \"<h1>Counter</h1>\\r\\n\\r\\n\");\n        builder.OpenElement(1, \"p\");\n        builder.AddContent(2, \"Current count: \");\n        builder.AddContent(3, currentCount);\n        builder.CloseElement();\n        builder.AddMarkupContent(4, \"\\r\\n\\r\\n\");\n        builder.OpenElement(5, \"button\");\n        builder.AddAttribute(6, \"class\", \"btn btn-primary\");\n        builder.AddAttribute(7, \"onclick\", EventCallback.Factory.Create<MouseEventArgs>(this, IncrementCount));\n        builder.AddContent(8, \"Click me\");\n        builder.CloseElement();\n    }\n    private int currentCount = 0;\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n} \n```", "```cs\n@code {\n    [Parameter]\n    public int MyParameter { get; set; }\n} \n```", "```cs\n@page \"/parameterdemo/{MyParameter}\" \n```", "```cs\n@page \"/parameterdemo/{MyParameter:int}\" \n```", "```cs\n[CascadingParameter]\npublic int MyParameter { get; set; } \n```", "```cs\n<CascadingValue Value=\"MyProperty\">\n<ComponentWithCascadingParameter/>\n</CascadingValue> \n@code {\n    public string MyProperty { get; set; } = \"Test Value\";\n} \n```", "```cs\n[CascadingParameter(Name = \"MyCascadingParameter\")] \n```", "```cs\n<CascadingValue Value=\"MyProperty\" Name=\"MyCascadingParameter\">\n<ComponentWithCascadingParameter/>\n</CascadingValue> \n```", "```cs\n<CascadingValue Value=\"MyProperty\" Name=\"MyCascadingParameter\" IsFixed=\"True\">\n<ComponentWithCascadingParameter/>\n</CascadingValue> \n```", "```cs\n    <Router AppAssembly=\"@typeof(Program).Assembly\" AdditionalAssemblies=\"new[] { typeof(Client._Imports).Assembly }\"> \n    ```", "```cs\n    <Router AppAssembly=\"@typeof(Program).Assembly\" AdditionalAssemblies=\"new[] { typeof(Client._Imports).Assembly,typeof(SharedComponents.Pages.Home).Assembly }\"> \n    ```", "```cs\n     app.MapRazorComponents<App>()\n        .AddInteractiveServerRenderMode()\n        .AddInteractiveWebAssemblyRenderMode()\n        .AddAdditionalAssemblies(typeof(Counter).Assembly); \n    ```", "```cs\n    app.MapRazorComponents<App>()\n        .AddInteractiveServerRenderMode()\n        .AddInteractiveWebAssemblyRenderMode()\n        .AddAdditionalAssemblies(typeof(Counter).Assembly)\n    .AddAdditionalAssemblies(typeof(SharedComponents.Pages.Home).Assembly); \n    ```", "```cs\n    @page \"/\"\n    @using Data.Models.Interfaces\n    @using Data.Models\n    @inject IBlogApi _api\n    @code{\n    } \n    ```", "```cs\n    protected List<BlogPost> posts = new(); \n    ```", "```cs\n    protected override async Task OnInitializedAsync()\n    {\n        posts = await _api.GetBlogPostsAsync(10, 0);\n        await base.OnInitializedAsync();\n    } \n    ```", "```cs\n    <ul>\n        @foreach (var p in posts)\n        {\n            <li>@p.Title</li>\n        }\n    </ul> \n    ```"]