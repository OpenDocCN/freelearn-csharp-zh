- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Hosting a Blazor Application in WinUI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 WinUI 中托管 Blazor 应用程序
- en: '`WebView2` control in WinUI 3, Windows developers can run a cloud-hosted Blazor
    application inside their WinUI client application. These options are changing
    a bit in .NET 8 with the introduction of **rendering modes**. We’ll discuss these
    new modes and the advantages of each.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: WinUI 3 中的 `WebView2` 控件，Windows 开发者可以在他们的 WinUI 客户端应用程序中运行云托管的 Blazor 应用程序。这些选项在
    .NET 8 中随着 **渲染模式** 的引入有所变化。我们将讨论这些新模式及其各自的优点。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning some basics of client-side .NET development with ASP.NET Core and Blazor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习使用 ASP.NET Core 和 Blazor 进行客户端 .NET 开发的一些基础知识
- en: Creating a new Blazor application with **Visual Studio Code** and the **.NET
    command-line** **interface** (**CLI**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Visual Studio Code** 和 **.NET 命令行界面**（**CLI**）创建新的 Blazor 应用程序
- en: Deploying Blazor applications to the **Azure Static Web** **Apps** service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Blazor 应用程序部署到 **Azure 静态 Web 应用** 服务
- en: Creating a WinUI application to host a Blazor application in a `WebView2` browser
    control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 WinUI 应用程序以在 `WebView2` 浏览器控件中托管 Blazor 应用程序
- en: By the end of this chapter, you will understand how to create a new Blazor application,
    deploy it to the cloud, and use the application as a `WebView2` control.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解如何创建新的 Blazor 应用程序，将其部署到云端，并使用该应用程序作为 `WebView2` 控件。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的示例，需要以下软件：
- en: Windows 10 version 1809 (build 17763) or later or Windows 11.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10 版本 1809（构建 17763）或更高版本或 Windows 11。
- en: Visual Studio 2022 or later with the .NET Desktop Development workload configured
    for Windows App SDK development.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022 或更高版本，并已为 Windows App SDK 开发配置了 .NET 桌面开发工作负载。
- en: '**Visual Studio Code** (**VS Code**) with the following extensions: C# Dev
    Kit and Debugger for Microsoft Edge.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**（**VS Code**）以及以下扩展：C# 开发工具包和 Microsoft Edge 调试器。'
- en: Windows Terminal (which was built with WinUI) or your preferred command-line
    tool. You can also use the **Terminal** window in VS Code.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Terminal（使用 WinUI 构建）或您首选的命令行工具。您还可以使用 VS Code 中的 **终端** 窗口。
- en: To create the Blazor project, install .NET 7 SDK or later.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建 Blazor 项目，请安装 .NET 7 SDK 或更高版本。
- en: 'The source code for this chapter is available on GitHub at this URL: [https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12](https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在 GitHub 上通过此 URL 获取：[https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12](https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12)。
- en: Getting started with ASP.NET Core and Blazor
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 ASP.NET Core 和 Blazor
- en: Blazor is a web development framework that provides C# developers with an alternative
    to JavaScript when building client-side web applications. Blazor is a part of
    **ASP.NET Core** and was first introduced with ASP.NET Core 3.0\. Let’s start
    by exploring a brief history of **ASP.NET** and ASP.NET Core.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 是一个 Web 开发框架，为 C# 开发者提供了在构建客户端 Web 应用程序时替代 JavaScript 的选择。Blazor 是 **ASP.NET
    Core** 的一部分，并首次在 ASP.NET Core 3.0 中引入。让我们先简要了解 **ASP.NET** 和 ASP.NET Core 的历史。
- en: A brief history of ASP.NET and ASP.NET Core
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET 和 ASP.NET Core 的简要历史
- en: ASP.NET was Microsoft’s .NET-based web development framework that was first
    released in 2002\. The early versions of ASP.NET used a client development model
    called **Web Forms**, which was intended as a web equivalent of **Windows Forms**
    (**WinForms**) client applications. Web Forms was popular with .NET web developers
    but did not adhere to many web development best practices and patterns. Many developers
    were critical of the large amount of **ViewState** data sent over the wire with
    every server request and response.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET 是微软基于 .NET 的 Web 开发框架，首次于 2002 年发布。ASP.NET 的早期版本使用了一种名为 **Web Forms**
    的客户端开发模型，旨在作为 **Windows Forms**（**WinForms**）客户端应用程序的 Web 等价物。Web Forms 在 .NET
    Web 开发者中很受欢迎，但并未遵循许多 Web 开发最佳实践和模式。许多开发者对每次服务器请求和响应中通过网络发送的大量 **ViewState** 数据表示批评。
- en: In response to Web Forms criticism, the ASP.NET team released ASP.NET MVC in
    2009\. Web applications built with ASP.NET MVC follow the **Model-View-Controller**
    (**MVC**) pattern. The new framework was well-received by the .NET community and
    is still a popular choice with web developers today. ASP.NET was also one of the
    first Microsoft frameworks to be released as open source. In 2012, ASP.NET MVC
    4 was released as open source under the Apache License 2.0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对 Web Forms 批评的回应，ASP.NET 团队在 2009 年发布了 ASP.NET MVC。使用 ASP.NET MVC 构建的网络应用遵循
    **模型-视图-控制器**（**MVC**）模式。这个新框架受到了 .NET 社区的欢迎，并且至今仍然是网络开发者们的热门选择。ASP.NET 也是最早被微软发布为开源的框架之一。2012
    年，ASP.NET MVC 4 在 Apache License 2.0 许可下作为开源发布。
- en: As the .NET team continued to embrace open source software, they also decided
    to make a fresh start with a new, open source, and cross-platform version of .NET
    called **.NET Core**. Microsoft released .NET Core 1.0 in 2016 with runtimes available
    for Windows, macOS, and Linux. With the release of .NET Core came a new web framework
    called **ASP.NET Core**. ASP.NET Core 1.0 included project templates to build
    web applications and Web API projects. The web applications were built with the
    MVC pattern, the **Razor** syntax for building a rich UI, and CSS for styling
    pages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 .NET 团队继续拥抱开源软件，他们还决定以一个新的、开源的、跨平台的 .NET 版本开始新的起点，这个版本被称为 **.NET Core**。微软在
    2016 年发布了 .NET Core 1.0，提供了适用于 Windows、macOS 和 Linux 的运行时。随着 .NET Core 的发布，出现了一个新的网络框架，称为
    **ASP.NET Core**。ASP.NET Core 1.0 包含了用于构建网络应用和 Web API 项目的项目模板。这些网络应用使用 MVC 模式、用于构建丰富
    UI 的 **Razor** 语法和 CSS 进行页面样式设计。
- en: 'The ASP.NET team continued to add more features to ASP.NET Core over the next
    several years, including the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几年里，ASP.NET 团队继续向 ASP.NET Core 添加更多功能，包括以下内容：
- en: '**Razor Pages**: Razor Pages projects were introduced with ASP.NET Core and
    offer a simple alternative to ASP.NET Core MVC'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Razor Pages**：Razor Pages 项目是在 ASP.NET Core 中引入的，提供了一个简单的 ASP.NET Core MVC
    的替代方案。'
- en: '**SignalR**: A framework for real-time web communication; SignalR is integral
    to client-server communication in Blazor server applications'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**：一个用于实时网络通信的框架；SignalR 是 Blazor 服务器应用中客户端-服务器通信的关键部分。'
- en: '**Identity (previously Identity Core)**: Supports login functionality in ASP.NET
    Core applications and manages authentication resources such as users, passwords,
    roles, tokens, and so on'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份（之前称为 Identity Core）**：支持 ASP.NET Core 应用中的登录功能，并管理用户、密码、角色、令牌等认证资源。'
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This book will not provide a detailed tutorial on ASP.NET Core development.
    If you want to learn more about building web applications with ASP.NET Core, see
    *ASP.NET Core 5 for Beginners*, by *Andreas Helland, Vincent Maverick Durano,
    Jeffrey Chilberto, and Ed Price, Packt* *Publishing* ([https://www.packtpub.com/product/asp-net-core-5-for-beginners/9781800567184](https://www.packtpub.com/product/asp-net-core-5-for-beginners/9781800567184)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不会提供 ASP.NET Core 开发的详细教程。如果你想要了解更多关于使用 ASP.NET Core 构建网络应用的知识，请参阅 *Andreas
    Helland, Vincent Maverick Durano, Jeffrey Chilberto 和 Ed Price 著，Packt 出版* 的 *《ASP.NET
    Core 5 入门》* ([https://www.packtpub.com/product/asp-net-core-5-for-beginners/9781800567184](https://www.packtpub.com/product/asp-net-core-5-for-beginners/9781800567184))。
- en: But where does Blazor fit into the ASP.NET Core development picture? Let’s explore
    that next.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Blazor 在 ASP.NET Core 开发图中处于什么位置？让我们接下来探索这个问题。
- en: What is Blazor?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Blazor？
- en: 'Blazor is a framework for building web applications with .NET and C#. Prior
    to .NET 8, there were three hosting models from which developers could choose
    when starting a new Blazor project:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 是一个用于使用 .NET 和 C# 构建网络应用的框架。在 .NET 8 之前，开发者在新建 Blazor 项目时可以从以下三种托管模型中选择：
- en: '**Blazor Server**: Introduced with ASP.NET Core 3.0, the server model executes
    application logic on the server with UI updates pushed to the client through SignalR
    connections.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor 服务器**：随着 ASP.NET Core 3.0 的发布而引入，服务器模型在服务器上执行应用逻辑，并通过 SignalR 连接将
    UI 更新推送到客户端。'
- en: '**Blazor WebAssembly**: Delivered later with ASP.NET Core 3.2, this execution
    model runs solely on the client, sandboxed and running on the browser’s UI thread
    via Wasm.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor WebAssembly**：在 ASP.NET Core 3.2 中推出，这种执行模型仅在客户端运行，沙盒化并在浏览器的 UI 线程上运行，通过
    Wasm。'
- en: '**Blazor Hybrid**: This is a newer type of Blazor app that combines web and
    native client technologies. In this model, Razor components run in .NET on the
    client and render web user interfaces to the native client with interop and WebView
    technology that is seamless to the user. Hybrid apps can be used with .NET MAUI,
    WPF, and WinForms clients.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor 混合模式**：这是一种结合了 Web 和原生客户端技术的较新类型的 Blazor 应用程序。在这个模型中，Razor 组件在客户端的
    .NET 上运行，并通过互操作性和 WebView 技术将 Web 用户界面渲染到原生客户端，对用户来说无缝衔接。混合应用程序可以与 .NET MAUI、WPF
    和 WinForms 客户端一起使用。'
- en: 'In .NET 8 and later, the Blazor team has evolved these hosting models into
    rendering modes. There are now three modes you can choose when developing with
    Blazor:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 8 及以后的版本中，Blazor 团队将这些托管模型发展成了渲染模式。现在，当使用 Blazor 进行开发时，您可以选择以下三种模式：
- en: '**Server mode**: The equivalent of the server hosting model from previous versions.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器模式**：与之前版本中服务器托管模型等效。'
- en: '**WebAssembly mode**: The client-side mode that leverages Wasm.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebAssembly 模式**：利用 Wasm 的客户端模式。'
- en: '**Auto mode**: The new Auto mode combines the best of the previous two modes.
    It will run in WebAssembly mode if the client runtime components can be downloaded
    quickly enough. Otherwise, it falls back to Server mode.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动模式**：新的自动模式结合了前两种模式的优势。如果客户端运行时组件可以快速下载，它将在 WebAssembly 模式下运行。否则，它将回退到服务器模式。'
- en: So, which mode should you choose for your next Blazor application? Luckily,
    with .NET 8, you don’t have to choose the same mode for the entire application
    anymore. The modes can be selected at the component level by setting the `@rendermode`
    attribute. That component-level decision will depend on your project’s requirements,
    but it’s likely that many applications will start to leverage Auto mode.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您应该为您的下一个 Blazor 应用程序选择哪种模式呢？幸运的是，随着 .NET 8 的推出，您不再需要为整个应用程序选择相同的模式。可以通过设置
    `@rendermode` 属性在组件级别选择模式。这个组件级别的决策将取决于您项目的需求，但许多应用程序可能会开始利用自动模式。
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, .NET 8 is still only available as developer previews.
    We will build the application in this chapter with .NET 7 and the Blazor WebAssembly
    hosting model. You will be able to build the same kind of app with .NET 8 and
    the WebAssembly mode.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，.NET 8 仍然仅作为开发者预览版提供。我们将使用 .NET 7 和 Blazor WebAssembly 托管模型在本章中构建应用程序。您将能够使用
    .NET 8 和 WebAssembly 模式构建相同类型的应用程序。
- en: 'Here are some of the pros and cons of the server and Wasm hosting models:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了服务器和 Wasm 托管模型的一些优缺点：
- en: '![Figure 12.1 – Blazor hosting model pros and cons](img/B20908_12_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 – Blazor 托管模型优缺点](img/B20908_12_01.jpg)'
- en: Figure 12.1 – Blazor hosting model pros and cons
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – Blazor 托管模型优缺点
- en: The Blazor server hosting model was released first and has the most mature tooling
    and debugging support. It is a great choice if you plan to host the server on
    a service that supports ASP.NET Core and your users may be using browsers that
    do not have Wasm support.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 服务器托管模型首先发布，拥有最成熟的工具和调试支持。如果您计划在支持 ASP.NET Core 的服务上托管服务器，并且您的用户可能正在使用不支持
    Wasm 的浏览器，那么这是一个很好的选择。
- en: In this chapter, we are going to focus on client-side Blazor applications. So,
    why choose this model, and how does it work?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注客户端 Blazor 应用程序。那么，为什么选择这种模式，它是如何工作的呢？
- en: WebAssembly and client-side .NET development
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebAssembly 和客户端 .NET 开发
- en: 'The primary benefits of the client-side hosting model with Wasm are the option
    of serverless deployment and the ability for clients to work offline. The offline
    support means your Blazor application can be configured as a **Progressive Web
    Application** (**PWA**) and downloaded to PCs, tablets, and phones. You can learn
    more about PWAs from Mozilla’s developer documentation: [https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps](https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Wasm 的客户端托管模型的主要优势是可选的无服务器部署和客户端离线工作的能力。离线支持意味着您的 Blazor 应用程序可以被配置为**渐进式
    Web 应用程序**（**PWA**），并下载到 PC、平板电脑和手机上。您可以从 Mozilla 的开发者文档中了解更多关于 PWAs 的信息：[https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps](https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps)。
- en: The reasons that Blazor client applications can run as PWAs are the reasons
    why we want to use it in a `WebView2` control in our WinUI application. Once the
    web application has loaded in the browser host, all in-memory execution and interactions
    can occur regardless of any interruptions in network connectivity. If connectivity,
    scalability, and server hosting are not concerns in your project, then the Blazor
    server model could certainly be used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 客户端应用程序可以作为 PWA 运行的原因，也是我们想在 WinUI 应用程序中的 `WebView2` 控件中使用它的原因。一旦网络应用程序在浏览器宿主中加载，所有内存执行和交互都可以发生，无论网络连接是否中断。如果你的项目中不关心连接性、可扩展性和服务器托管，那么
    Blazor 服务器模型当然可以使用。
- en: Simple Blazor Wasm applications can be hosted as *static resources* on a web
    server. You can also host Blazor Wasm applications on ASP.NET Core web hosting
    solutions. Doing this enables sharing code with other web solutions on the server
    and more advanced routing scenarios to support deep linking within the application.
    With .NET 8, using a host with ASP.NET Core support allows you to take advantage
    of the new Auto mode or choose to only use Wasm mode in some components that lend
    themselves to offline use.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的 Blazor Wasm 应用程序可以作为 *静态资源* 在 Web 服务器上托管。你还可以在 ASP.NET Core Web 托管解决方案上托管
    Blazor Wasm 应用程序。这样做可以让你在服务器上与其他 Web 解决方案共享代码，并支持更高级的路由场景，以支持应用程序内的深度链接。使用 .NET
    8，使用具有 ASP.NET Core 支持的主机可以让你利用新的自动模式，或者选择在某些适合离线使用的组件中仅使用 Wasm 模式。
- en: 'With the Wasm model, when clients make their first request to the server, the
    entire application and .NET runtime are sent to the browser in the response, and
    the entire application runs on the client side. There is no shared server-side
    code in this mode. The runtime and application are then loaded on top of Wasm
    on the UI thread:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Wasm 模型中，当客户端向服务器发出第一个请求时，整个应用程序和 .NET 运行时都会在响应中发送到浏览器，并且整个应用程序在客户端端运行。此模式中没有共享的服务器端代码。然后，运行时和应用程序在
    UI 线程上加载到 Wasm 之上：
- en: '![Figure 12.2 – The Blazor Wasm model running in the browser](img/B20908_12_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – Blazor Wasm 模型在浏览器中运行](img/B20908_12_02.jpg)'
- en: Figure 12.2 – The Blazor Wasm model running in the browser
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – Blazor Wasm 模型在浏览器中运行
- en: Now that you have a little background on ASP.NET Core and Blazor applications,
    let’s create a Blazor Wasm project and get some hands-on experience with the framework.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对 ASP.NET Core 和 Blazor 应用程序有了些许了解，让我们创建一个 Blazor Wasm 项目，并亲身体验一下这个框架。
- en: Creating a Blazor Wasm application
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Blazor Wasm 应用程序
- en: 'It’s time to start building the Blazor application that we’ll be running in
    our WinUI application. We are going to use the .NET CLI and VS Code to create
    the Blazor project. You can also use Visual Studio 2022 if you prefer the experience
    of a full-featured IDE:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候开始构建我们将在 WinUI 应用程序中运行的 Blazor 应用程序了。我们将使用 .NET CLI 和 VS Code 来创建 Blazor
    项目。如果你更喜欢全功能的 IDE 体验，也可以使用 Visual Studio 2022：
- en: 'Start by opening a Command Prompt with your Terminal application of choice.
    I will be using Windows Terminal (https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701)
    with PowerShell 7.3 (https://learn.microsoft.com/powershell/scripting/overview):'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用你选择的终端应用程序打开命令提示符。我将使用带有 PowerShell 7.3 的 Windows Terminal（https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701）：
- en: '![Figure 12.3 – Running PowerShell 7.3 in Windows Terminal](img/B20908_12_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – 在 Windows Terminal 中运行 PowerShell 7.3](img/B20908_12_03.jpg)'
- en: Figure 12.3 – Running PowerShell 7.3 in Windows Terminal
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – 在 Windows Terminal 中运行 PowerShell 7.3
- en: Use the terminal to change the current folder to the location where you keep
    your projects. My location will be `C:\Users\alash\source\repos`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端将当前文件夹更改为你保存项目的地方。我的位置将是 `C:\Users\alash\source\repos`。
- en: 'Use the following command to create a new Blazor WebAssembly project named
    `BlazorTasks` and hit *Enter*: `dotnet new blazorwasm -o BlazorTasks`. The .NET
    CLI will create the new project, and you should see a message indicating it has
    completed successfully:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个名为 `BlazorTasks` 的新 Blazor WebAssembly 项目，并按 *Enter*：`dotnet new blazorwasm
    -o BlazorTasks`。.NET CLI 将创建新项目，你应该会看到一个消息表明它已成功完成：
- en: "![Figure 12.4 – The .NET CLI successfully creates a Blazor WebA\uFEFFssembly\
    \ App project](img/B20908_12_04.jpg)"
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4 – .NET CLI 成功创建 Blazor WebAssembly 应用程序项目](img/B20908_12_04.jpg)'
- en: Figure 12.4 – The .NET CLI successfully creates a Blazor WebAssembly App project
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – .NET CLI 成功创建 Blazor WebAssembly 应用程序项目
- en: 'Navigate to the new `BlazorTasks` folder that .NET just created. If you have
    VS Code ([https://code.visualstudio.com/](https://code.visualstudio.com/)) installed,
    you can enter `code .` at the command line to open the current folder in VS Code:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 .NET 刚创建的 `BlazorTasks` 文件夹。如果你已安装 VS Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))，你可以在命令行中输入
    `code .` 以在 VS Code 中打开当前文件夹：
- en: '![Figure 12.5 – The BlazorTasks project in VS Code](img/B20908_12_05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – VS Code 中的 BlazorTasks 项目](img/B20908_12_05.jpg)'
- en: Figure 12.5 – The BlazorTasks project in VS Code
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – VS Code 中的 BlazorTasks 项目
- en: You may see some activity in the **OUTPUT** window as VS Code downloads some
    debugging and editing tools relevant to the project. If you are presented with
    a **Do you trust the authors of the files in this folder?** dialog, select the
    **Yes, I trust the authors** button to continue.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在 **输出** 窗口中看到一些活动，因为 VS Code 正在下载与项目相关的调试和编辑工具。如果你看到一个 **你信任此文件夹中文件的作者吗？**
    对话框，请选择 **是的，我信任作者** 按钮，以继续。
- en: Switch to the **Terminal** window in VS Code. If the window isn’t visible at
    the bottom of your editor, you can click **Terminal** | **New Terminal** from
    the menu.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 VS Code 中的 **终端** 窗口。如果窗口在编辑器的底部不可见，你可以从菜单中选择 **终端** | **新建终端**。
- en: 'Type `dotnet run` in the Terminal. You can also use *F5* to run in VS Code
    as you are accustomed to using in Visual Studio. When the compilation completes,
    you can view the running `BlazorTasks` application by navigating to `https://localhost:5240/`
    in your browser (the port number will be displayed in the **TERMINAL** window):'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入 `dotnet run`。你还可以使用 *F5* 在 VS Code 中运行，就像你在 Visual Studio 中习惯使用的那样。当编译完成后，你可以在浏览器中导航到
    `https://localhost:5240/` 来查看正在运行的 `BlazorTasks` 应用程序（端口号将在 **终端** 窗口中显示）：
- en: '![Figure 12.6 – Running the BlazorTasks project for the first time](img/B20908_12_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 首次运行 BlazorTasks 项目](img/B20908_12_06.jpg)'
- en: Figure 12.6 – Running the BlazorTasks project for the first time
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 首次运行 BlazorTasks 项目
- en: 'The default project template has three navigation options in the left pane:
    **Home**, **Counter**, and **Fetch data**. As you navigate from page to page,
    all the execution logic is running within the browser. There are no round trips
    to an ASP.NET Core server instance.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 默认项目模板在左侧面板中有三个导航选项：**主页**、**计数器** 和 **获取数据**。当你从一个页面导航到另一个页面时，所有执行逻辑都在浏览器中运行。没有往返到
    ASP.NET Core 服务器实例。
- en: 'You can open the developer tools in your browser by pressing *F12*. You will
    see that there is no activity on the **Network** tab of the developer tools while
    navigating to the **Counter** tab in the application and clicking the **Click
    me** button several times:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过按 *F12* 在浏览器中打开开发者工具。你将看到，在导航到应用程序中的 **计数器** 选项卡并多次点击 **点击我** 按钮时，开发者工具的
    **网络** 选项卡上没有活动：
- en: "![Figure 12.7 – Viewing network activity in the BlazorTas\uFEFFks application](img/B20908_12_07.jpg)"
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 在 BlazorTasks 应用程序中查看网络活动](img/B20908_12_07.jpg)'
- en: Figure 12.7 – Viewing network activity in the BlazorTasks application
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 在 BlazorTasks 应用程序中查看网络活动
- en: Finally, when you are done exploring the application, you can close your browser
    and hit *Ctrl* + *C* in the VS Code **TERMINAL** window to stop debugging the
    application.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当你完成对应用程序的探索后，你可以关闭浏览器，并在 VS Code 的 **终端** 窗口中按 *Ctrl* + *C* 来停止调试应用程序。
- en: Now that we have created and tested the project, let’s start coding a new task
    page for the application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建并测试了项目，让我们开始为应用程序编写一个新的任务页面。
- en: Building a simple application for tracking tasks
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个简单的应用程序以跟踪任务
- en: 'In this section, we are going to create a new task page for the application
    that will appear in the left navigation below the **Fetch data** item. If you
    like, you can remove the other components from the project. I am going to keep
    them there to test the navigation in the deployed application hosted in WinUI:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为应用程序创建一个新的任务页面，该页面将出现在左侧导航中的 **获取数据** 项下方。如果你愿意，你可以从项目中删除其他组件。我将保留它们以测试在
    WinUI 中部署的应用程序中的导航：
- en: Start by adding a `Tasks` component to the project. Do this by entering `dotnet
    new razorcomponent -n Tasks -o Pages` in the VS Code `Tasks` Razor component in
    the `Pages` folder.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先向项目中添加一个 `Tasks` 组件。通过在 VS Code 的 `Pages` 文件夹中的 `Tasks` Razor 组件中输入 `dotnet
    new razorcomponent -n Tasks -o Pages` 来完成此操作。
- en: 'Double-click `Tasks.razor` in the `Pages` folder in the **Explorer** window
    to open it in the editor. As an alternative to the Explorer window, the C# Dev
    Kit extension should have added a **Solution Explorer** view to the bottom of
    the left pane. Use this view if you like. The file contains the following code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 **资源管理器** 窗口中的 `Pages` 文件夹中的 `Tasks.razor` 以在编辑器中打开它。作为对资源管理器窗口的替代，C# Dev
    Kit 扩展应该已经将 **解决方案资源管理器** 视图添加到左侧窗格的底部。如果您喜欢，请使用此视图。该文件包含以下代码：
- en: '[PRE0]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Razor files contain a combination of HTML markup and C# code, with the HTML
    at the top of the file, and the C# inside the `@code` block at the bottom of the
    file. We’ll see how these two sections can interact as we move along.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Razor 文件包含 HTML 标记和 C# 代码的组合，HTML 在文件顶部，C# 代码在文件底部的 `@code` 块中。我们将随着我们的进展看到这两个部分如何交互。
- en: Add `@page "/tasks"` as the first line of the `Tasks.razor` file. This will
    allow the application to route to the page using `/tasks` on the URL.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `@page "/tasks"` 作为 `Tasks.razor` 文件的第一行。这将允许应用程序通过 URL 上的 `/tasks` 路由到该页面。
- en: Before we add the page contents, let’s add the new navigation item for it. Open
    `NavMenu.razor` from the `Shared` folder in **Explorer**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们添加页面内容之前，让我们为它添加一个新的导航项。从 **资源管理器** 中的 `Shared` 文件夹打开 `NavMenu.razor`。
- en: 'Inside the `<nav>` element, add a new `<div>` before the closing `</``nav>`
    tag:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<nav>` 元素内部，在关闭 `</nav>` 标签之前添加一个新的 `<div>`：
- en: '[PRE1]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the application with `dotnet run` to make sure the new menu option appears
    and you can navigate to the new page with the **Tasks** header:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `dotnet run` 运行应用程序，以确保新的菜单选项出现，并且您可以通过带有 **Tasks** 标题的新页面进行导航：
- en: '![Figure 12.8 – Navigating to the new Tasks page](img/B20908_12_08.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 导航到新的任务页面](img/B20908_12_08.jpg)'
- en: Figure 12.8 – Navigating to the new Tasks page
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 导航到新的任务页面
- en: 'Next, use `TaskItem.cs`. This will be the model class for tasks. Add the following
    code to the new file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用 `TaskItem.cs`。这将作为任务的模型类。向新文件添加以下代码：
- en: '[PRE2]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open `Tasks.razor` and add the following code to create an unordered list of
    tasks by iterating over a list of tasks contained in the `@``code` block:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Tasks.razor` 并添加以下代码，通过迭代 `@code` 块中包含的任务列表来创建一个任务的无序列表：
- en: '[PRE3]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice how Razor files allow you to blend C# code and HTML markup. We have a
    C# `foreach` within `<ul>`, and inside `foreach`, we’re adding `<li>` elements
    that again contain C# code to get each `task.Name`. This is powerful stuff. We’ve
    also added an `input` field to enter a new task and a `button` to add the task.
    We’ll add some code to make `button` functional next.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意到 Razor 文件如何允许您混合 C# 代码和 HTML 标记。我们在 `<ul>` 中有一个 C# `foreach` 循环，并在 `foreach`
    循环内部添加 `<li>` 元素，这些元素再次包含获取每个 `task.Name` 的 C# 代码。这是强大功能。我们还添加了一个输入字段来输入新任务和一个按钮来添加任务。我们将在下一个步骤添加一些代码来使
    `button` 功能化。
- en: 'Add a `newTask` private variable and a new method to the `@code` block named
    `AddTask`. This method will add a new task to the `taskList` collection:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@code` 块中添加一个名为 `AddTask` 的新私有变量和新方法。此方法将向 `taskList` 集合添加一个新任务：
- en: '[PRE4]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, add some data binding code to the `input` and `button` elements on
    the page. The `input` will bind to the `newTask` variable, and the `onclick` event
    of `button` will trigger the `AddTask` method to run:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，向页面上的 `input` 和 `button` 元素添加一些数据绑定代码。`input` 将绑定到 `newTask` 变量，而 `button`
    的 `onclick` 事件将触发 `AddTask` 方法来运行：
- en: '[PRE5]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, run the application and test the controls. You should be able to add some
    tasks to the list:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行应用程序并测试控件。您应该能够将一些任务添加到列表中：
- en: "![Figure 12.9 – Adding some tasks to the task list in \uFEFFBlazorTasks](img/B20908_12_09.jpg)"
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – 在BlazorTasks中向任务列表添加一些任务](img/B20908_12_09.jpg)'
- en: Figure 12.9 – Adding some tasks to the task list in BlazorTasks
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 在BlazorTasks中向任务列表添加一些任务
- en: This works great, but now that we have some tasks to do, we don’t have any way
    to mark them as done. Let’s take care of that next.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这效果很好，但现在我们有一些任务要做，我们没有标记它们为完成的方法。让我们在下一步处理这个问题。
- en: 'The first step is to make each list item `checkbox` that users can check when
    they complete a task. We are also binding `task.Name` to an `input` field so users
    can edit the name of each task:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是使每个列表项成为用户可以勾选的 `checkbox`，以便在完成任务时进行检查。我们还将 `task.Name` 绑定到一个 `input` 字段，以便用户可以编辑每个任务的名称：
- en: '[PRE6]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, in case the list gets lengthy, let’s use some data binding to display
    the number of incomplete tasks as part of the page header:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，以防列表过长，让我们使用一些数据绑定来显示作为页面标题的一部分的不完整任务数量：
- en: '[PRE7]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the application again, and start working on your task list:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行应用程序，并开始处理您的任务列表：
- en: '![Figure 12.10 – Adding and completing tasks in the BlazorTasks application](img/B20908_12_010.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10 – 在BlazorTasks应用程序中添加和完成任务](img/B20908_12_010.jpg)'
- en: Figure 12.10 – Adding and completing tasks in the BlazorTasks application
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – 在BlazorTasks应用程序中添加和完成任务
- en: You may have noticed that the tasks do not save between sessions. The `taskList`
    is an in-memory collection for now. To persist it between sessions, you would
    need to add service calls to save the data in a server-side data store. Creating
    this service is beyond the scope of this chapter, and I will leave it as an exercise
    for you.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，任务在会话之间不会保存。目前`taskList`是一个内存中的集合。要跨会话持久化它，你需要添加服务调用以将数据保存到服务器端数据存储中。创建此服务超出了本章的范围，我将把它留作你的练习。
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'All of these steps can also be taken with Visual Studio or Visual Studio for
    Mac if you prefer using a full-featured IDE. This Microsoft Learn documentation
    page has information on how to debug a Blazor Wasm app in both of these tools,
    as well as VS Code: https://learn.microsoft.com/aspnet/core/blazor/debug.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用功能齐全的IDE，所有这些步骤也可以在Visual Studio或Visual Studio for Mac中完成。Microsoft
    Learn文档页面提供了如何在两种工具以及VS Code中调试Blazor Wasm应用程序的信息：https://learn.microsoft.com/aspnet/core/blazor/debug。
- en: Now that we have a functioning task-tracking web client, we can move on to the
    next step. It’s time to deploy our Blazor app to the cloud.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个功能齐全的任务跟踪Web客户端，我们可以继续下一步。是时候将我们的Blazor应用程序部署到云中了。
- en: Exploring Blazor Wasm deployment options
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Blazor Wasm部署选项
- en: Running and debugging the Blazor project locally is great while we’re developing
    the solution, but when it’s time to share your application with the world, we
    will need to host it in the cloud. There are many cloud hosting options for typical
    ASP.NET Core applications, and Blazor Wasm applications have even more. Sites
    that run entirely on the client can be hosted as static files on the server, meaning
    that the server simply serves up the files when it receives a request. There is
    no server-side execution required.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发解决方案时，在本地运行和调试Blazor项目是很好的，但当是时候将你的应用程序与全世界分享时，我们需要将其托管在云中。对于典型的ASP.NET Core应用程序，有众多云托管选项，Blazor
    Wasm应用程序更是如此。完全在客户端运行的网站可以作为静态文件托管在服务器上，这意味着服务器在收到请求时只需简单地提供文件。不需要服务器端执行。
- en: Let’s start by reviewing some of the available hosting options for Blazor WebAssembly
    deployments.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先回顾一下Blazor WebAssembly部署可用的托管选项。
- en: Deployment options for Blazor Wasm projects
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor Wasm项目的部署选项
- en: 'There are several hosting options for our Blazor project. We are going to discuss
    a few of the most popular solutions today: **GitHub Pages**, **Azure App Service**,
    **Azure Static Web Apps**, and two options on **Amazon Web Services** (**AWS**).
    For an in-depth exploration of options either hosted with ASP.NET Core or as static
    files, Microsoft Learn has a great article: https://learn.microsoft.com/aspnet/core/blazor/host-and-deploy/webassembly.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目有几个托管选项。今天我们将讨论一些最受欢迎的解决方案：**GitHub Pages**、**Azure App Service**、**Azure
    Static Web Apps**以及**Amazon Web Services**（**AWS**）上的两个选项。关于托管在ASP.NET Core或作为静态文件深入探索选项，Microsoft
    Learn有一篇很好的文章：https://learn.microsoft.com/aspnet/core/blazor/host-and-deploy/webassembly。
- en: Amazon Web Services
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 亚马逊云服务
- en: 'With AWS, a Blazor Wasm site can be hosted with ASP.NET Core in **Elastic Container
    Service** (**ECS**) ([https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/))
    and **Fargate**. The ECS solution uses **Docker** to create the container to be
    hosted in the cloud. The site is then served through Fargate ([https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/)),
    the AWS compute engine for containers. To read more about this solution for ASP.NET
    Core projects, the AWS blog has a great article detailing the steps: [https://aws.amazon.com/blogs/compute/hosting-asp-net-core-applications-in-amazon-ecs-using-aws-fargate/](https://aws.amazon.com/blogs/compute/hosting-asp-net-core-applications-in-amazon-ecs-using-aws-fargate/).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AWS，Blazor Wasm网站可以使用ASP.NET Core在**弹性容器服务**（**ECS**）([https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/))和**Fargate**上托管。ECS解决方案使用**Docker**创建要托管在云中的容器。然后网站通过Fargate([https://aws.amazon.com/fargate/](https://aws.amazon.com/fargate/))，AWS的容器计算引擎，进行服务。要了解更多关于此ASP.NET
    Core项目解决方案的信息，AWS博客有一篇很好的文章详细说明了步骤：[https://aws.amazon.com/blogs/compute/hosting-asp-net-core-applications-in-amazon-ecs-using-aws-fargate/](https://aws.amazon.com/blogs/compute/hosting-asp-net-core-applications-in-amazon-ecs-using-aws-fargate/)。
- en: 'For a static hosting option with AWS, static pages can be hosted using `wwwroot`
    folder will be copied to S3 storage, and CloudFront handles serving the static
    files from the S3 bucket. This article details how to create and deploy a Blazor
    Wasm application in AWS: [https://aws.amazon.com/blogs/developer/run-blazor-based-net-web-applications-on-aws-serverless/](https://aws.amazon.com/blogs/developer/run-blazor-based-net-web-applications-on-aws-serverless/).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AWS 的静态托管选项，可以使用 `wwwroot` 文件夹将其复制到 S3 存储中，CloudFront 负责从 S3 存储桶中提供静态文件。本文详细介绍了如何在
    AWS 中创建和部署 Blazor Wasm 应用程序：[https://aws.amazon.com/blogs/developer/run-blazor-based-net-web-applications-on-aws-serverless/](https://aws.amazon.com/blogs/developer/run-blazor-based-net-web-applications-on-aws-serverless/)。
- en: Now, let’s see how to serve static files through **GitHub**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何通过 **GitHub** 提供静态文件。
- en: GitHub Pages
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub Pages
- en: '**GitHub Pages** ([https://pages.github.com/](https://pages.github.com/)) are
    static websites served directly from GitHub repositories. You can maintain your
    site on GitHub and configure **GitHub Actions** to deploy the site to GitHub Pages.
    Microsoft MVP Niels Swimburghe has a step-by-step guide for deploying Blazor Wasm
    projects to GitHub Pages on his personal blog: https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages.
    GitHub Pages are free, but *standard* user accounts can only host pages from the
    *default* GitHub branch.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Pages** ([https://pages.github.com/](https://pages.github.com/)) 是直接从
    GitHub 仓库提供静态网站的托管服务。您可以在 GitHub 上维护您的站点，并配置 **GitHub Actions** 将站点部署到 GitHub
    Pages。Microsoft MVP Niels Swimburghe 在他的个人博客上提供了将 Blazor Wasm 项目部署到 GitHub Pages
    的分步指南：https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages。GitHub
    Pages 是免费的，但 *标准* 用户账户只能托管来自 *默认* GitHub 分支的页面。'
- en: In the next section, we will be using GitHub Actions with our project to deploy
    to Azure. But now, let’s review two of the available Azure hosting solutions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 GitHub Actions 与我们的项目一起部署到 Azure。但在此之前，让我们回顾一下可用的两个 Azure 托管解决方案。
- en: Azure App Service
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure App Service
- en: '**Azure App Service** (https://azure.microsoft.com/products/app-service/) is
    a great option to use if you want your Blazor app hosted on an ASP.NET Core web
    server. There are Windows and Linux servers available with App Service, but currently,
    only Windows instances are supported with Blazor WebAssembly apps. Microsoft Learn
    has extensive documentation on deploying ASP.NET Core applications to App Service:
    [https://learn.microsoft.com/aspnet/core/host-and-deploy/azure-apps/](https://learn.microsoft.com/aspnet/core/host-and-deploy/azure-apps/).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure App Service** (https://azure.microsoft.com/products/app-service/) 是如果您希望将
    Blazor 应用程序托管在 ASP.NET Core Web 服务器上时的一个很好的选择。App Service 提供了 Windows 和 Linux
    服务器，但目前仅支持 Windows 实例用于 Blazor WebAssembly 应用程序。Microsoft Learn 提供了关于将 ASP.NET
    Core 应用程序部署到 App Service 的详细文档：[https://learn.microsoft.com/aspnet/core/host-and-deploy/azure-apps/](https://learn.microsoft.com/aspnet/core/host-and-deploy/azure-apps/)。'
- en: Now, let’s look at another Azure option. This one is specifically for deploying
    static sites such as Blazor Wasm.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看另一个 Azure 选项。这个选项专门用于部署静态站点，如 Blazor Wasm。
- en: Azure Static Web Apps
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure Static Web Apps
- en: '**Azure Static Web Apps** ([https://azure.microsoft.com/products/app-service/static/](https://azure.microsoft.com/products/app-service/static/))
    is a service to host and serve static web applications such as Blazor Wasm. It
    offers easy deployment through GitHub Actions, free SSL certificates, custom domains,
    and easy integration with **Azure Functions**.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Static Web Apps** ([https://azure.microsoft.com/products/app-service/static/](https://azure.microsoft.com/products/app-service/static/))
    是一个用于托管和提供静态 Web 应用程序（如 Blazor Wasm）的服务。它通过 GitHub Actions 提供简单的部署，免费 SSL 证书，自定义域名，以及与
    **Azure Functions** 的轻松集成。'
- en: For full documentation on Static Web Apps, including information about using
    it with other SPA websites, Microsoft Learn has documentation, guides, and **Training**
    ([https://learn.microsoft.com/training/](https://learn.microsoft.com/training/))
    content available at [https://learn.microsoft.com/azure/static-web-apps/](https://learn.microsoft.com/azure/static-web-apps/).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Static Web Apps 的完整文档，包括与其他 SPA 网站使用的信息，Microsoft Learn 提供了文档、指南和 **培训**
    ([https://learn.microsoft.com/training/](https://learn.microsoft.com/training/))
    内容，可在 [https://learn.microsoft.com/azure/static-web-apps/](https://learn.microsoft.com/azure/static-web-apps/)
    找到。
- en: We are going to use Static Web Apps to host our Blazor application. Let’s do
    that now!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Static Web Apps 来托管我们的 Blazor 应用程序。现在让我们来做这件事！
- en: Publishing Blazor to Azure Static Web Apps hosting
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Blazor 发布到 Azure Static Web Apps 托管
- en: In this section, we are going to host our `BlazorTasks` application in the cloud
    by pushing the source to GitHub, creating an Azure Static Web Apps app, and configuring
    GitHub Actions to publish the app to Azure with every commit to the main branch.
    Let’s start by pushing our code to GitHub.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过将源代码推送到GitHub、创建Azure静态Web应用应用程序并配置GitHub Actions以在主分支每次提交时将应用程序发布到Azure，来在云中托管我们的`BlazorTasks`应用程序。让我们首先将我们的代码推送到GitHub。
- en: Pushing the project to GitHub
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将项目推送到GitHub
- en: 'To push your code to a GitHub repository, you can either use the Git CLI ([https://git-scm.com/downloads](https://git-scm.com/downloads))
    or the **GitHub Desktop** ([https://desktop.github.com/](https://desktop.github.com/))
    application. We will use GitHub Desktop in this example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要将代码推送到GitHub仓库，你可以使用Git CLI ([https://git-scm.com/downloads](https://git-scm.com/downloads))
    或**GitHub Desktop** ([https://desktop.github.com/](https://desktop.github.com/))应用程序。在这个例子中，我们将使用GitHub
    Desktop：
- en: Download and install GitHub Desktop. When the installation is complete, launch
    the application.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装GitHub Desktop。安装完成后，启动应用程序。
- en: 'If your local project is not part of a Git repository yet, choose **File**
    | **New Repository**. If you already have a local repository for your project,
    you can skip to the next step:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你本地项目还不是Git仓库的一部分，请选择**文件** | **新建仓库**。如果你已经为你的项目创建了一个本地仓库，你可以跳到下一步：
- en: '![Figure 12.11 – Creating a new local GitHub repository for the BlazorTasks
    application](img/B20908_12_011.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图12.11 – 为BlazorTasks应用程序创建一个新的本地GitHub仓库](img/B20908_12_011.jpg)'
- en: Figure 12.11 – Creating a new local GitHub repository for the BlazorTasks application
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – 为BlazorTasks应用程序创建一个新的本地GitHub仓库
- en: Name the repository something like `BlazorTasksWasm` or `BlazorTasks`, optionally
    add a description, and browse to **Local path** for your project. It’s a good
    practice to have a README, a **Git ignore** file, and **License**. So, choose
    each of these options. When you’re done, click **Create repository**. After completing
    this step, move ahead to *step 4*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将仓库命名为类似`BlazorTasksWasm`或`BlazorTasks`的东西，可选地添加一个描述，并浏览到项目的**本地路径**。拥有一个README、一个**Git忽略**文件和一个**许可证**是一个好习惯。因此，选择这些选项中的每一个。完成这些后，点击**创建仓库**。完成此步骤后，继续进行*第4步*。
- en: 'If you created your Blazor project in a local Git repository, you can select
    `BlazorTasks` project and select it. If you do not have a Git repository there
    yet, the application will prompt you to create one:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在一个本地Git仓库中创建了你的Blazor项目，你可以选择`BlazorTasks`项目并选择它。如果你那里还没有Git仓库，应用程序将提示你创建一个：
- en: '![Figure 12.12 – Adding a local repository](img/B20908_12_012.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12 – 添加本地仓库](img/B20908_12_012.jpg)'
- en: Figure 12.12 – Adding a local repository
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – 添加本地仓库
- en: 'In this step, we’ll publish the local repository to GitHub. If you don’t have
    a GitHub account, you can create one at [https://github.com/](https://github.com/).
    When you’re ready to go, make sure your `BlazorTasksWasm` repository is selected
    for **Current repository** and click the **Publish** **repository** button:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步，我们将把本地仓库发布到GitHub。如果你还没有GitHub账户，你可以在[https://github.com/](https://github.com/)创建一个。准备好后，确保你的`BlazorTasksWasm`仓库被选为**当前仓库**，然后点击**发布**
    **仓库**按钮：
- en: '![Figure 12.13 – Publishing the local repository to GitHub](img/B20908_12_013.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13 – 将本地仓库发布到GitHub](img/B20908_12_013.jpg)'
- en: Figure 12.13 – Publishing the local repository to GitHub
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 将本地仓库发布到GitHub
- en: If you have the **Keep this code private** option on the dialog that appears,
    you can uncheck it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你出现在对话框中的**保留此代码为私有**选项，你可以取消选中它。
- en: 'View the repository on GitHub to make sure it has been published correctly:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GitHub上查看仓库，以确保它已正确发布：
- en: '![Figure 12.14 – The BlazorTasks code on GitHub](img/B20908_12_014.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14 – GitHub上的BlazorTasks代码](img/B20908_12_014.jpg)'
- en: Figure 12.14 – The BlazorTasks code on GitHub
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14 – GitHub上的BlazorTasks代码
- en: Now, the code is ready to be published to Azure. Let’s do that next.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码已经准备好发布到Azure了。让我们接下来进行这一步。
- en: Creating an Azure Static Web Apps resource
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Azure静态Web应用资源
- en: 'Let’s walk through creating a new Azure Static Web Apps app:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步创建一个新的Azure静态Web应用应用程序：
- en: To start, if you don’t have an Azure account yet, you can create a free trial
    account at [https://azure.microsoft.com/](https://azure.microsoft.com/). The site
    will walk you through the steps to create a new account.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，如果你还没有Azure账户，你可以在[https://azure.microsoft.com/](https://azure.microsoft.com/)创建一个免费试用账户。网站将引导你完成创建新账户的步骤。
- en: Log in to the Microsoft account associated with your Azure account at [https://portal.azure.com/](https://portal.azure.com/).
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到与您的 Azure 账户关联的 Microsoft 账户，网址为 [https://portal.azure.com/](https://portal.azure.com/)。
- en: From the portal home page, click **Create a resource** at the top under **Azure
    services**.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从门户主页，点击 **Azure 服务** 顶部下的**创建资源**。
- en: 'On the `static` and select **Static** **Web App**:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `static` 下选择**静态** **Web 应用**：
- en: '![Figure 12.15 – Creating a new Static Web App](img/B20908_12_015.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15 – 创建新的静态 Web 应用](img/B20908_12_015.jpg)'
- en: Figure 12.15 – Creating a new Static Web App
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – 创建新的静态 Web 应用
- en: 'Click `BlazorTasksWasm`. Give the resource a name, select a **Region** option
    that makes sense for you or your users, and select the **Free** option for **SKU**.
    Choose **GitHub** for **Deployment details**. We’ll link to GitHub in the next
    step:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `BlazorTasksWasm`。为资源命名，选择对您或您的用户有意义的**区域**选项，并选择**免费**选项作为**SKU**。选择**GitHub**作为**部署详情**。我们将在下一步链接到
    GitHub：
- en: '![Figure 12.16 – Configuring the new Static Web Apps resource](img/B20908_12_016.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.16 – 配置新的静态 Web 应用资源](img/B20908_12_016.jpg)'
- en: Figure 12.16 – Configuring the new Static Web Apps resource
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.16 – 配置新的静态 Web 应用资源
- en: 'Next, click the `BlazorTasksWasm` repository:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 `BlazorTasksWasm` 仓库：
- en: '![Figure 12.17 – Entering GitHub details for the Static Web Apps resource](img/B20908_12_017.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.17 – 为静态 Web 应用资源输入 GitHub 详细信息](img/B20908_12_017.jpg)'
- en: Figure 12.17 – Entering GitHub details for the Static Web Apps resource
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.17 – 为静态 Web 应用资源输入 GitHub 详细信息
- en: In the `wwwroot`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `wwwroot`。
- en: Click **Review + create**. Review the **Summary** page to make sure everything
    looks correct and click **Create**. Azure will take a few minutes to create the
    new resource. When it’s done, you can click **Go** **to resource**.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**审阅 + 创建**。审阅**摘要**页面，确保一切看起来正确，然后点击**创建**。Azure 将花费几分钟创建新的资源。完成后，您可以点击**转到资源**。
- en: The Static Web Apps resource is ready to go. Azure created our GitHub Actions
    deployment for us. Let’s review what it did and then review the website.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 静态 Web 应用资源已准备就绪。Azure 已经为我们创建了 GitHub Actions 部署。让我们回顾一下它做了什么，然后审阅网站。
- en: Publishing an application with GitHub Actions
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 发布应用程序
- en: 'Typically, this is where we would configure GitHub Actions to build our project
    in the GitHub repository and publish it to the Azure resource. However, the Azure
    Static Web App configuration took care of that step for us. Let’s review what
    it did:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会在这里配置 GitHub Actions 以在 GitHub 仓库中构建我们的项目并将其发布到 Azure 资源。然而，Azure 静态 Web
    应用配置已经为我们处理了这一步骤。让我们回顾一下它做了什么：
- en: 'Navigate to your project on GitHub and click the **Actions** tab. You will
    see that Azure has created a workflow named **Azure Static Web** **Apps CI/CD**:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的 GitHub 项目并点击**操作**标签。您将看到 Azure 创建了一个名为 **Azure Static Web Apps CI/CD**
    的工作流程：
- en: '![Figure 12.18 – Viewing the workflows for BlazorTasks](img/B20908_12_018.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.18 – 查看 BlazorTasks 的工作流程](img/B20908_12_018.jpg)'
- en: Figure 12.18 – Viewing the workflows for BlazorTasks
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18 – 查看 BlazorTasks 的工作流程
- en: Select the `.yml` file hyperlink that appears just under the `.yml` file will
    appear in an editor.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择出现在 `.yml` 文件下方编辑器中的 `.yml` 文件超链接。
- en: Review the file contents. You’ll see a section for `build_and_deploy_job`. This
    step will take the latest committed code, build it, and deploy it to the app service
    that we configured in Azure.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审阅文件内容。您将看到一个 `build_and_deploy_job` 部分。此步骤将获取最新提交的代码，构建它并将其部署到我们在 Azure 中配置的应用服务。
- en: 'You can verify that the site has been published to Azure by navigating to the
    `BlazorTasksWasm` resource in the Azure portal and clicking on the URL for the
    site:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过在 Azure 门户中导航到 `BlazorTasksWasm` 资源并点击网站的 URL 来验证网站是否已发布到 Azure：
- en: "![Figure 12.19 – The BlazorTasks res\uFEFFource home page in the Azure portal](img/B20908_12_019.jpg)"
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.19 – BlazorTasks 资源在 Azure 门户中的主页](img/B20908_12_019.jpg)'
- en: Figure 12.19 – The BlazorTasks resource home page in the Azure portal
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – BlazorTasks 资源在 Azure 门户中的主页
- en: 'The Blazor site will open in a new tab in your browser. Click the **Tasks**
    item in the navigation menu and verify that the application works as expected:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor 网站将在您的浏览器中打开新标签页。点击导航菜单中的**任务**项，并验证应用程序是否按预期工作：
- en: '![Figure 12.20 – Running BlazorTasks in the static cloud](img/B20908_12_020.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.20 – 在静态云中运行 BlazorTasks](img/B20908_12_020.jpg)'
- en: Figure 12.20 – Running BlazorTasks in the static cloud
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.20 – 在静态云中运行 BlazorTasks
- en: We now have a public-facing static website running the Blazor Wasm application.
    Now, we’re ready to run the web application inside a WinUI project.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个面向公众的静态网站正在运行Blazor Wasm应用程序。现在，我们准备在WinUI项目中运行Web应用程序。
- en: Hosting your Blazor application in the WinUI WebView2
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在WinUI WebView2中托管Blazor应用程序
- en: 'We’re on the home stretch. We created a Blazor Wasm application, pushed the
    source code to GitHub, and Azure configured GitHub Actions to publish the application
    to Azure Static Web Apps with every commit. The last step is to create a simple
    WinUI 3 project and add a `WebView2` control to **MainWindow**:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了最后的冲刺。我们创建了一个Blazor Wasm应用程序，将源代码推送到GitHub，并配置Azure GitHub Actions以在每次提交时将应用程序发布到Azure静态Web应用。最后一步是创建一个简单的WinUI
    3项目，并将`WebView2`控件添加到**MainWindow**：
- en: 'You can start by either creating a new `BlazorTasksHost` in Visual Studio or
    opening the starter project from GitHub: [https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12/Start/BlazorTasksHost](https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12/Start/BlazorTasksHost).'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在Visual Studio中创建一个新的`BlazorTasksHost`或者从GitHub打开入门项目来开始：[https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12/Start/BlazorTasksHost](https://github.com/PacktPublishing/-Learn-WinUI-3/tree/master/Chapter12/Start/BlazorTasksHost)。
- en: 'Open `MainWindow.xaml` and update the window to host `Grid` that contains the
    `WebView2` control. Set the `Source` property to the URL of your `BlazorTasksWasm`
    site:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainWindow.xaml`并更新窗口以托管包含`WebView2`控制的`Grid`。将`Source`属性设置为你的`BlazorTasksWasm`站点的URL：
- en: '[PRE8]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Remove the unused button click event handler in `MainWindow.xaml.cs` to prevent
    compilation errors.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainWindow.xaml.cs`中移除未使用的按钮点击事件处理程序，以防止编译错误。
- en: 'Run the application, and you’ll see the `BlazorTasksWasm` application load
    as if it were a Windows application:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，你会看到`BlazorTasksWasm`应用程序像Windows应用程序一样加载：
- en: '![Figure 12.21 – Running BlazorTasksWasm in a WinUI application](img/B20908_12_021.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图12.21 – 在WinUI应用程序中运行BlazorTasksWasm](img/B20908_12_021.png)'
- en: Figure 12.21 – Running BlazorTasksWasm in a WinUI application
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21 – 在WinUI应用程序中运行BlazorTasksWasm
- en: You can test the app in the web view. Because it’s all client-side code, you
    can even disconnect from your network and keep using the app. The **Tasks** page
    will continue to function offline.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网页视图中测试应用程序。因为它是全部客户端代码，即使断开网络连接，你也可以继续使用应用程序。**任务**页面将继续离线工作。
- en: Now, any updates you make to the Blazor application will be immediately pushed
    to all your users when you commit to GitHub. This is a compelling way for web
    developers to reach more Windows users.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你向GitHub提交更改时，你对Blazor应用程序所做的任何更新都将立即推送到所有用户。这对于想要接触更多Windows用户的Web开发者来说是一个很有吸引力的方式。
- en: Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you would like to explore Blazor and WinUI integration further, you can
    check out this blog post by Thomas Claudius Huber. In the post, he experiments
    with calling a method in the Blazor app from the WinUI host application by executing
    a script through the `WebView2` control: [https://www.thomasclaudiushuber.com/2020/02/18/hosting-blazor-app-in-winui-3-with-webview-2-and-call-blazor-component-method-from-winui/](https://www.thomasclaudiushuber.com/2020/02/18/hosting-blazor-app-in-winui-3-with-webview-2-and-call-blazor-component-method-from-winui/).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要进一步探索Blazor和WinUI的集成，你可以查看托马斯·克劳迪乌斯·休伯的这篇博客文章。在文章中，他通过执行脚本通过`WebView2`控件从WinUI宿主应用程序调用Blazor应用程序中的方法进行了实验：[https://www.thomasclaudiushuber.com/2020/02/18/hosting-blazor-app-in-winui-3-with-webview-2-and-call-blazor-component-method-from-winui/](https://www.thomasclaudiushuber.com/2020/02/18/hosting-blazor-app-in-winui-3-with-webview-2-and-call-blazor-component-method-from-winui/)。
- en: Let’s wrap up with a summary of what we’ve covered in this chapter.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下本章我们所学到的内容。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we learned about ASP.NET Core Blazor. You created a simple
    task-tracking application with Blazor Wasm and published it to Azure Static Web
    Apps with GitHub Actions. From here, you could use ASP.NET Core Identity to integrate
    an application login and save the task data to **Azure SQL**, **Azure Cosmos DB**,
    or another cloud-based data store. This would allow personalizing the task list
    for each user and saving its state. We created a WinUI 3 application to run the
    Blazor client on Windows, but you could also send users directly to your site
    or create a JavaScript-based PWA for desktop and mobile clients. For more information
    about creating a PWA with Blazor WASM, check out this Microsoft blog post: [https://devblogs.microsoft.com/visualstudio/building-a-progressive-web-app-with-blazor/](https://devblogs.microsoft.com/visualstudio/building-a-progressive-web-app-with-blazor/).'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了ASP.NET Core Blazor。你使用Blazor Wasm创建了一个简单的任务跟踪应用程序，并通过GitHub Actions将其发布到Azure
    Static Web Apps。从这里，你可以使用ASP.NET Core Identity来集成应用程序登录，并将任务数据保存到**Azure SQL**、**Azure
    Cosmos DB**或另一个基于云的数据存储。这将允许为每个用户个性化任务列表并保存其状态。我们创建了一个WinUI 3应用程序来在Windows上运行Blazor客户端，但你也可以直接将用户发送到你的网站或为桌面和移动客户端创建基于JavaScript的PWA。有关使用Blazor
    WASM创建PWA的更多信息，请参阅这篇Microsoft博客文章：[https://devblogs.microsoft.com/visualstudio/building-a-progressive-web-app-with-blazor/](https://devblogs.microsoft.com/visualstudio/building-a-progressive-web-app-with-blazor/)。
- en: Note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: 'To learn more about building web applications with Blazor, you can read *Web
    Development with Blazor* by Jimmy Engstrom. Here’s the Amazon link: [https://www.amazon.com/dp/1803241497/](https://www.amazon.com/dp/1803241497/)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于使用Blazor构建Web应用程序的信息，你可以阅读Jimmy Engstrom的《Web Development with Blazor》。这里是亚马逊链接：[https://www.amazon.com/dp/1803241497/](https://www.amazon.com/dp/1803241497/)
- en: In the next chapter, [*Chapter 13*](B20908_13.xhtml#_idTextAnchor570), *Take
    Your App Cross-Platform with Uno Platform*, we will explore what **Uno Platform**
    can do for WinUI developers.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[*第13章*](B20908_13.xhtml#_idTextAnchor570)，*使用Uno Platform跨平台开发你的应用*，我们将探讨**Uno
    Platform**可以为WinUI开发者做什么。
- en: Questions
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the name of the Blazor hosting model in .NET 7 and earlier that runs
    all application logic in the browser?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 7及更早版本中，名为什么的Blazor托管模型在浏览器中运行所有应用程序逻辑？
- en: Which Blazor hosting model is less scalable?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Blazor托管模型的可扩展性较差？
- en: What is the name of the syntax used in Blazor UI files?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor UI文件中使用的语法叫什么名字？
- en: Which .NET CLI command will compile and run the project in the current folder?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个.NET CLI命令可以编译并运行当前文件夹中的项目？
- en: What is the name of GitHub’s product that hosts static websites?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub提供托管静态网站的产品叫什么名字？
- en: Which Azure product hosts static websites?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Azure产品托管静态网站？
- en: What WinUI 3 control can load web content in a Chromium-based browser control?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个WinUI 3控件可以在基于Chromium的浏览器控件中加载网页内容？
- en: What is the name of GitHub’s **Continuous Integration/Continuous Delivery**
    (**CI/CD**) solution?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub的**持续集成/持续交付**（**CI/CD**）解决方案叫什么名字？
