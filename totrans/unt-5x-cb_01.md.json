["```cs\n    using UnityEngine;\n    using System.Collections;\n\n    using UnityEngine.UI;\n    using System;\n\n    public class ClockDigital : MonoBehaviour {\n      private Text textClock;\n\n      void Start (){\n        textClock = GetComponent<Text>();\n      }\n\n      void Update (){\n        DateTime time = DateTime.Now;\n        string hour = LeadingZero( time.Hour );\n        string minute = LeadingZero( time.Minute );\n        string second = LeadingZero( time.Second );\n\n        textClock.text = hour + \":\" + minute + \":\" + second;\n      }\n\n      string LeadingZero (int n){\n        return n.ToString().PadLeft(2, '0');\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n    using System;\n\n    public class DigitalCountdown : MonoBehaviour {\n      private Text textClock;\n\n      private float countdownTimerDuration;\n      private float countdownTimerStartTime;\n\n      void Start (){\n        textClock = GetComponent<Text>();\n        CountdownTimerReset(30);\n      }\n\n      void Update (){\n        // default - timer finished\n        string timerMessage = \"countdown has finished\";\n        int timeLeft = (int)CountdownTimerSecondsRemaining();\n\n        if(timeLeft > 0)\n          timerMessage = \"Countdown seconds remaining = \" + LeadingZero( timeLeft );\n\n        textClock.text = timerMessage;\n      }\n\n      private void CountdownTimerReset (float delayInSeconds){\n        countdownTimerDuration = delayInSeconds;\n        countdownTimerStartTime = Time.time;\n      }\n\n      private float CountdownTimerSecondsRemaining (){\n        float elapsedSeconds = Time.time - countdownTimerStartTime;\n        float timeLeft = countdownTimerDuration - elapsedSeconds;\n        return timeLeft;\n      }\n\n      private string LeadingZero (int n){\n        return n.ToString().PadLeft(2, '0');\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class FadeAway : MonoBehaviour {\n      private CountdownTimer countdownTimer;\n      private Text textUI;\n      private int fadeDuration = 5;\n      private bool fading = false;\n\n      void Start (){\n        textUI = GetComponent<Text>();\n        countdownTimer = GetComponent<CountdownTimer>();\n\n        StartFading(fadeDuration);\n      }\n\n      void Update () {\n        if(fading){\n          float alphaRemaining = countdownTimer.GetProportionTimeRemaining();\n          print (alphaRemaining);\n          Color c = textUI.material.color;\n          c.a = alphaRemaining;\n          textUI.material.color = c;\n\n          // stop fading when very small number\n          if(alphaRemaining < 0.01)\n            fading = false;\n        }\n      }\n\n      public void StartFading (int timerTotal){\n        countdownTimer.ResetTimer(timerTotal);\n        fading = true;\n      }\n    }\n    ```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class ScrollZ : MonoBehaviour {\n  public float scrollSpeed = 20;\n\n  void Update () {\n    Vector3 pos = transform.position;\n    Vector3 localVectorUp = transform.TransformDirection(0,1,0);\n    pos += localVectorUp * scrollSpeed * Time.deltaTime;\n    transform.position = pos;\n  }\n}\n```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class MenuActions : MonoBehaviour {\n      public void MENU_ACTION_GotoPage(string sceneName){\n        Application.LoadLevel(sceneName);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.UI;\n    using UnityEngine.EventSystems;\n    using System.Collections;\n\n    public class ArrangeActions : MonoBehaviour {\n      private RectTransform panelRectTransform;\n\n      void Start(){\n        panelRectTransform = GetComponent<RectTransform>();\n      }\n\n      public void MoveDownOne(){\n        print (\"(before change) \" + GameObject.name +  \" sibling index = \" + panelRectTransform.GetSiblingIndex());\n\n        int currentSiblingIndex = panelRectTransform.GetSiblingIndex();\n        panelRectTransform.SetSiblingIndex( currentSiblingIndex - 1 );\n\n        print (\"(after change) \" + GameObject.name +  \" sibling index = \" + panelRectTransform.GetSiblingIndex());\n      }\n\n      public void MoveUpOne(){\n        print (\"(before change) \" + GameObject.name +  \" sibling index = \" + panelRectTransform.GetSiblingIndex());\n\n        int currentSiblingIndex = panelRectTransform.GetSiblingIndex();\n        panelRectTransform.SetSiblingIndex( currentSiblingIndex + 1 );\n\n        print (\"(after change) \" + GameObject.name +  \" sibling index = \" + panelRectTransform.GetSiblingIndex());\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class SliderValueToText : MonoBehaviour {\n      public Slider sliderUI;\n      private Text textSliderValue;\n\n      void Start (){\n        textSliderValue = GetComponent<Text>();\n        ShowSliderValue();\n      }\n\n      public void ShowSliderValue () {\n        string sliderMessage = \"Slider value = \" + sliderUI.value;\n        textSliderValue.text = sliderMessage;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class SliderTimerDisplay : MonoBehaviour {\n      private CountdownTimer countdownTimer;\n      private Slider sliderUI;\n      private int startSeconds = 30;\n\n      void Start (){\n        SetupSlider();\n        SetupTimer();\n      }\n\n      void Update () {\n        sliderUI.value = countdownTimer.GetProportionTimeRemaining();\n        print (countdownTimer.GetProportionTimeRemaining());\n      }\n\n      private void SetupSlider (){\n        sliderUI = GetComponent<Slider>();\n        sliderUI.minValue = 0;\n        sliderUI.maxValue = 1;\n        sliderUI.wholeNumbers = false;\n      }\n\n      private void SetupTimer (){\n        countdownTimer = GetComponent<CountdownTimer>();\n        countdownTimer.ResetTimer(startSeconds);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class Radar : MonoBehaviour{\n      public float insideRadarDistance = 20;\n      public float blipSizePercentage = 5;\n\n      public GameObject rawImageBlipCube;\n      public GameObject rawImageBlipSphere;\n\n      private RawImage rawImageRadarBackground;\n      private Transform playerTransform;\n      private float radarWidth;\n      private float radarHeight;\n      private float blipHeight;\n      private float blipWidth;\n\n      void Start (){\n        playerTransform = GameObject.FindGameObjectWithTag(\"Player\").transform;\n        rawImageRadarBackground = GetComponent<RawImage>();\n\n        radarWidth = rawImageRadarBackground.rectTransform.rect.width;\n        radarHeight = rawImageRadarBackground.rectTransform.rect.height;\n\n        blipHeight = radarHeight * blipSizePercentage/100;\n        blipWidth = radarWidth * blipSizePercentage/100;\n      }\n\n      void Update (){\n        RemoveAllBlips();\n        FindAndDisplayBlipsForTag(\"Cube\", rawImageBlipCube);\n        FindAndDisplayBlipsForTag(\"Sphere\", rawImageBlipSphere);\n      }\n\n      private void FindAndDisplayBlipsForTag(string tag, GameObject prefabBlip){\n        Vector3 playerPos = playerTransform.position;\n        GameObject[] targets = GameObject.FindGameObjectsWithTag(tag);\n\n        foreach (GameObject target in targets) {\n          Vector3 targetPos = target.transform.position;\n          float distanceToTarget = Vector3.Distance(targetPos, playerPos);\n          if( (distanceToTarget <= insideRadarDistance) ){\n            Vector3 normalisedTargetPosiiton = NormalisedPosition(playerPos, targetPos);\n            Vector2 blipPosition = CalculateBlipPosition(normalisedTargetPosiiton);\n            DrawBlip(blipPosition, prefabBlip);\n          }\n        }\n      }\n\n      private void RemoveAllBlips(){\n        GameObject[] blips = GameObject.FindGameObjectsWithTag(\"Blip\");\n        foreach (GameObject blip in blips)\n          Destroy(blip);\n      }\n\n      private Vector3 NormalisedPosition(Vector3 playerPos, Vector3 targetPos){\n      float normalisedyTargetX = (targetPos.x - playerPos.x)/insideRadarDistance;\n        float normalisedyTargetZ = (targetPos.z - playerPos.z)/insideRadarDistance;\n        return new Vector3(normalisedyTargetX, 0, normalisedyTargetZ);\n      }\n\n      private Vector2 CalculateBlipPosition(Vector3 targetPos){\n        // find angle from player to target\n        float angleToTarget = Mathf.Atan2(targetPos.x, targetPos.z) * Mathf.Rad2Deg;\n\n        // direction player facing\n        float anglePlayer = playerTransform.eulerAngles.y;\n\n        // subtract player angle, to get relative angle to object\n        // subtract 90\n        // (so 0 degrees (same direction as player) is UP)\n        float angleRadarDegrees =  angleToTarget - anglePlayer - 90;\n\n        // calculate (x,y) position given angle and distance\n        float normalisedDistanceToTarget = targetPos.magnitude;\n        float angleRadians = angleRadarDegrees * Mathf.Deg2Rad;\n        float blipX = normalisedDistanceToTarget * Mathf.Cos(angleRadians);\n        float blipY = normalisedDistanceToTarget * Mathf.Sin(angleRadians);\n\n        // scale blip position according to radar size\n        blipX *= radarWidth/2;\n        blipY *= radarHeight/2;\n\n        // offset blip position relative to radar center\n        blipX += radarWidth/2;\n        blipY += radarHeight/2;\n\n        return new Vector2(blipX, blipY);\n      }\n\n      private void DrawBlip(Vector2 pos, GameObject blipPrefab){\n        GameObject blipGO = (GameObject)Instantiate(blipPrefab);\n        blipGO.transform.SetParent(transform.parent);\n        RectTransform rt = blipGO.GetComponent<RectTransform>();\n        rt.SetInsetAndSizeFromParentEdge(RectTransform.Edge.Left, pos.x, blipWidth);\n        rt.SetInsetAndSizeFromParentEdge(RectTransform.Edge.Top, pos.y, blipHeight);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class CustomCursorPointer : MonoBehaviour {\n      public Texture2D cursorTexture2D;\n\n      private CursorMode cursorMode = CursorMode.Auto;\n      private Vector2 hotSpot = Vector2.zero;\n\n      public void OnMouseEnter() {\n        SetCustomCursor(cursorTexture2D);\n      }\n\n      public void OnMouseExit() {\n        SetCustomCursor(null);\n      }\n\n      private void SetCustomCursor(Texture2D curText){\n        Cursor.SetCursor(curText, hotSpot, cursorMode);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class DisplayChangedTextContent : MonoBehaviour {\n      private InputField inputField;\n\n      void Start(){\n        inputField = GetComponent<InputField>();\n      }\n\n      public void PrintNewValue (){\n        string msg = \"new content = '\" + inputField.text + \"'\";\n        print (msg);\n    }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class ToggleChangeManager : MonoBehaviour {\n      private Toggle toggle;\n\n      void Start () {\n        toggle = GetComponent<Toggle>();\t\n      }\n\n      public void PrintNewToggleValue(){\n        bool status = toggle.isOn;\n        print (\"toggle status = \" + status);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEngine.UI;\n\n    public class RadioButtonManager : MonoBehaviour {\n      private string currentDifficulty = \"Easy\";\n\n      public void PrintNewGroupValue(Toggle sender){\n        // only take notice from Toggle just swtiched to On\n        if(sender.isOn){\n          currentDifficulty = sender.tag;\n          print (\"option changed to = \" + currentDifficulty);\n        }\n      }\n    }\n    ```"]