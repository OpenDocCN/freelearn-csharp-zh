["```cs\nstatic void Main(string[] _)\n```", "```cs\n{\n```", "```cs\nConsole.WriteLine(\"Chapter 3: Strings are immutable\");\n```", "```cs\nvar greeting1 = \"Hello, world!\";\n```", "```cs\nvar greeting2 = greeting1;\n```", "```cs\nConsole.WriteLine($\"greeting1={greeting1}\");\n```", "```cs\nConsole.WriteLine($\"greeting2={greeting2}\");\n```", "```cs\ngreeting1 += \" Isn't life grand!\";\n```", "```cs\nConsole.WriteLine($\"greeting1={greeting1}\");\n```", "```cs\nConsole.WriteLine($\"greeting1={greeting2}\");\n```", "```cs\n}\n```", "```cs\nusing System;\n```", "```cs\nusing System.Diagnostics;\n```", "```cs\nusing System.Security.Cryptography;\n```", "```cs\nusing BenchmarkDotNet.Attributes;\n```", "```cs\nusing BenchmarkDotNet.Running;\n```", "```cs\ndynamic _dynamicType;\n```", "```cs\nstatic void Main(string[] _)\n```", "```cs\n{\n```", "```cs\n      BenchmarkRunner.Run<BenchmarkTests>();\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void MeasureVarUsage()\n```", "```cs\n{\n```", "```cs\n      var x = 3.14159;\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void MeasureVarDynamicUsage()\n```", "```cs\n{\n```", "```cs\n      var x = (dynamic)3.14159;\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void MeasureTypeDynamicUsage()\n```", "```cs\n{\n```", "```cs\n      double x = (dynamic)3.14159;\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void MeasureTypeTypeUsage()\n```", "```cs\n{\n```", "```cs\n      double x = 3.14159;\n```", "```cs\n}\n```", "```cs\nusing System;\n```", "```cs\nusing System.Diagnostics;\n```", "```cs\nusing System.Security.Cryptography;\n```", "```cs\nusing BenchmarkDotNet.Attributes;\n```", "```cs\nusing BenchmarkDotNet.Running;\n```", "```cs\nstatic void Main(string[] _)\n```", "```cs\n{\n```", "```cs\n      BenchmarkRunner.Run<BenchmarkTests>();\n```", "```cs\n}\n```", "```cs\ninternal class ClassNoReferences\n```", "```cs\n{\n```", "```cs\n      public ClassNoReferences(\n```", "```cs\n          int id,\n```", "```cs\n          decimal price,\n```", "```cs\n          DateTime purchaseDate\n```", "```cs\n      )\n```", "```cs\n      {\n```", "```cs\n          Id = id;\n```", "```cs\n          Price = price;\n```", "```cs\n          PurchaseDate = purchaseDate;\n```", "```cs\n      }\n```", "```cs\n      public int Id { get; private set; }\n```", "```cs\n      public decimal Price { get; private set; }\n```", "```cs\n      public DateTime PurchaseDate { get; private set; }\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void ProcessClassNoReferences()\n```", "```cs\n{\n```", "```cs\n      var _ = new ClassNoReferences()\n```", "```cs\n      {\n```", "```cs\n          1,\n```", "```cs\n          1.50M\n```", "```cs\n          DateTime.Now\n```", "```cs\n      };\n```", "```cs\n}\n```", "```cs\ninternal class StructNoReferences\n```", "```cs\n{\n```", "```cs\n      public StructNoReferences(\n```", "```cs\n          int id,\n```", "```cs\n          decimal price,\n```", "```cs\n          DateTime purchaseDate\n```", "```cs\n      )\n```", "```cs\n      {\n```", "```cs\n          Id = id;\n```", "```cs\n          Price = price;\n```", "```cs\n          PurchaseDate = purchaseDate;\n```", "```cs\n      }\n```", "```cs\n      public int Id { get; private set; }     \n```", "```cs\n      public decimal Price { get; private set; }\n```", "```cs\n      public DateTime PurchaseDate { get; private set; }\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void ProcessStructNoReferences()\n```", "```cs\n{\n```", "```cs\n      var _ = new StructNoReferences()\n```", "```cs\n      {\n```", "```cs\n         1,\n```", "```cs\n         1.50M,\n```", "```cs\n         DateTime.Now\n```", "```cs\n      };\n```", "```cs\n}\n```", "```cs\nclass ClassWithReferences\n```", "```cs\n{\n```", "```cs\n    public ClassWithReferences(\n```", "```cs\n        int id,\n```", "```cs\n        string name,\n```", "```cs\n        decimal price,\n```", "```cs\n        DateTime purchaseDate,\n```", "```cs\n        Dictionary<string, string> keyValueData\n```", "```cs\n    )\n```", "```cs\n    {\n```", "```cs\n        Id = id;\n```", "```cs\n        Name = name;\n```", "```cs\n        Price = price;\n```", "```cs\n        PurchaseDate = purchaseDate;\n```", "```cs\n        KeyValueData = keyValueData;\n```", "```cs\n    }\n```", "```cs\n    public int Id { get; private set; }\n```", "```cs\n    public string Name { get; private set; }\n```", "```cs\n    public decimal Price { get; private set; }\n```", "```cs\n    public DateTime PurchaseDate { get; private set; }\n```", "```cs\n    public Dictionary<string, string> KeyValueData \n```", "```cs\n        { get; private set; }\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void ProcessClassWithReferences()\n```", "```cs\n{\n```", "```cs\n      var _ = new ClassWithReferences(\n```", "```cs\n         Id = 1,\n```", "```cs\n         \"The quick brown fox jumped over the lazy dog.\",\n```", "```cs\n         1.50M,\n```", "```cs\n         DateTime.Now,\n```", "```cs\n);\n```", "```cs\n}\n```", "```cs\ninternal struct StructWithReferences\n```", "```cs\n{\n```", "```cs\n      public StructWithReferences(\n```", "```cs\n          int id,\n```", "```cs\n          string name,\n```", "```cs\n          decimal price,\n```", "```cs\n          DateTime purchaseDate,\n```", "```cs\n          Dictionary<string, string> keyValueData\n```", "```cs\n      )\n```", "```cs\n      {\n```", "```cs\n          Id = id;\n```", "```cs\n          Name = name;\n```", "```cs\n          Price = price;\n```", "```cs\n          PurchaseDate = purchaseDate;\n```", "```cs\n          KeyValueData = keyValueData;\n```", "```cs\n      }\n```", "```cs\n      public int Id { get; private set; }\n```", "```cs\n      public string Name { get; private set; }\n```", "```cs\n      public decimal Price { get; private set; }\n```", "```cs\n      public DateTime PurchaseDate { get; private set; }\n```", "```cs\n      public Dictionary<string, string> KeyValueData \n```", "```cs\n          { get; private set; }\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void ProcessStructWithReferences()\n```", "```cs\n{\n```", "```cs\n      var _ = new StructWithReferences()\n```", "```cs\n      {\n```", "```cs\n         Id = 1,\n```", "```cs\n         Name = \"Discard\",\n```", "```cs\n         Price = 1.50M\n```", "```cs\n      };\n```", "```cs\n}\n```", "```cs\nstatic void Main(string[] args)\n```", "```cs\n{\n```", "```cs\nint x = 0;\n```", "```cs\nConsole.WriteLine(\"Chapter 3: Pass by value and reference\");     \n```", "```cs\nConsole.WriteLine($\"=====================================\");\n```", "```cs\nConsole.WriteLine($\"int x = 0;\");\n```", "```cs\nAddByValue(x);\n```", "```cs\nConsole.WriteLine($\"    AddByValue(x): {x}\");\n```", "```cs\nAddByReference(ref x);\n```", "```cs\nConsole.WriteLine($\"AddByReference(x): {x}\");\n```", "```cs\n}\n```", "```cs\nstatic void AddByValue(int x)\n```", "```cs\n{\n```", "```cs\n      x++;\n```", "```cs\n}\n```", "```cs\nstatic void AddByReference(ref int x)\n```", "```cs\n{\n```", "```cs\n      x++;\n```", "```cs\n}\n```", "```cs\nstatic void InParameterModifier()\n```", "```cs\n{\n```", "```cs\n      int argument = 13;\n```", "```cs\n      InParameterModifier(argument);\n```", "```cs\n      Console.WriteLine(argument);\n```", "```cs\n}\n```", "```cs\nstatic void InParameterModifier(in int argument)\n```", "```cs\n{\n```", "```cs\n      // Error CS8331: Cannot assign to variable 'in int'\n```", "```cs\n      // because it is a readonly variable.\n```", "```cs\n      // argument = 47; \n```", "```cs\n}\n```", "```cs\nstatic void OutParameterModifier()\n```", "```cs\n{\n```", "```cs\n      int x;\n```", "```cs\n      OutParameterModifier(out x);\n```", "```cs\n      Console.WriteLine($\"The value of x is: {x}.\");\n```", "```cs\n}\n```", "```cs\nstatic void OutParameterModifier(out int argument)\n```", "```cs\n{\n```", "```cs\n      argument = 123;\n```", "```cs\n}\n```", "```cs\nusing System;\n```", "```cs\nusing System.Diagnostics;\n```", "```cs\nusing System.Security.Cryptography;\n```", "```cs\nusing BenchmarkDotNet.Attributes;\n```", "```cs\nusing BenchmarkDotNet.Running;\n```", "```cs\nBenchmarkRunner.Run<BoxingAndUnboxingBenchmarkTests>();\n```", "```cs\npublic class BoxingAndUnboxingBenchmarkTests { }\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void NonBoxingUnboxingTest()\n```", "```cs\n{\n```", "```cs\n      int z = 0, a = 4, b = 4;\n```", "```cs\n      z = a + b;\n```", "```cs\n}\n```", "```cs\n[Benchmark]\n```", "```cs\npublic void BoxingUnboxingTest()\n```", "```cs\n{\n```", "```cs\n      object a = 4, b = 4;\n```", "```cs\n      int z;\n```", "```cs\n      z = (int)a + (int)b;\n```", "```cs\n} \n```"]