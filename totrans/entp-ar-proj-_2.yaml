- en: Introduction to Unity for AR Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to Unity, a real-time 3D development platform
    that has become one of the main tools for multi-platform **Augmented Reality**
    (**AR**) development. Its versatility, extensive documentation, and active forums
    allow for a fast learning curve, and the already created scenes, examples, and
    varied resources of its Asset Store will help you create amazing AR experiences
    in a fast and simple way.
  prefs: []
  type: TYPE_NORMAL
- en: The main goal of this chapter is that you get comfortable around Unity before
    using it in AR projects. You will learn how to install and use Unity, how the
    user interface is distributed, and the names and purpose of the main components.
    Then, you will create a simple C# script to understand the power of scripting
    to be able to customize 3D scenes. By the end of this chapter, you will have basic
    knowledge under your belt so that you can explore Unity further by integrating
    and working with the AR **Software Development Kits** (**SDKs**) we are going
    to introduce in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Unity is one of the most powerful tools in AR development; it's multiplatform
    and most of the AR SDKs have specific packages that are compatible with Unity.
    In this book, [Chapter 5](a35bc701-516c-47dc-abb1-f6494cacf5af.xhtml), *AR for
    Marketing with EasyAR*, [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml),
    *AR for Retail with Vuforia*, and [Chapter 7](4ee2c3b3-2856-4b78-a17c-5575cafafc3b.xhtml),
    *AR for Automation with Vuforia and Epson Glasses*, will be developed with Unity
    and although their example projects are implemented in Android devices, they can
    also be built (except for the Epson glasses, which only run with Android OS) for
    iOS devices with nearly zero code changes. Furthermore, [Chapter 3](2d2b4e6f-1ee8-46ab-9041-24e36d57f949.xhtml),
    *AR for Manufacturing with ARCore*, and [Chapter 8](4c04e2f4-ef78-4061-bf73-41777381d9ad.xhtml),
    *AR for Tourism with ARKit*, can also be implemented within Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the importance of this introductory chapter, where you will learn how
    to create a Unity 3D project and build it for a specific platform, serving as
    the basis for more complex projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your system for Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Unity interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity main components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting – first example in C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hardware (from [https://docs.unity3d.com/2019.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2019.1/Documentation/Manual/system-requirements.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'CPU: SSE2 instruction set support'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GPU: Graphics card with DX10 (shader model 4.0) capabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: 7 SP1+, 8, 10, and 64-bit versions only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'macOS: 10.12+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: Fixed at Ubuntu 16.04, 18.04, and CentOS 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Software for Android development:'
  prefs: []
  type: TYPE_NORMAL
- en: Java Development Kit (1.8.0 in this book)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity 3D (2019.1.2f1 in this book)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android SDK (included in the Unity installation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Visual Studio Community 2017 (included in the Unity installation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resources and the code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter02](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Although we will develop our Unity projects for Android devices, you can also
    build them for iOS. In this case, the requirements would be a macOS and Xcode
    9.4 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we think of tools that we can use to develop video games that have had
    a great impact in recent years, one name stands out above all others: Unity. Unity
    is a graphics engine that helps us in developing video games, interactive projects,
    visualizations, and 2D and 3D animations in real-time for different platforms.
    Unity offers a complete visual editor with scripting so that we can create applications
    with a professional finish.'
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, Unity is composed of a package of tools that have been designed
    to facilitate the tasks of designing and programming the different aspects of
    a video game, including graphics, physics, animations, and artificial intelligence.
    Unity is a unique development system that focuses on assets and not on the code
    like other similar 3D modeling applications do. The content of the game is built
    from the editor and the game is programmed using the C# scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: Unity also includes a land editor, which is where you can create a terrain (such
    as a blank sheet) using visual tools, paint, or textures, and also add other elements
    that have been imported from 3D applications, such as Blender, 3ds Max, and Maya.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity has had rapid growth in the market as has been adopted by companies and
    professionals due to certain characteristics. These characteristics make Unity
    stand out from other game engines:'
  prefs: []
  type: TYPE_NORMAL
- en: Unity is a multi-platform tool that allows us to publish 2D and 3D content for
    multiple platforms, such as Windows, OS X, GNU/Linux, Flash, Xbox One, PS4, Nintendo
    Switch, Android, and iOS, including web-based games over **Web Graphics Library**
    (**WebGL**) technology (a standard specification for rendering 3D graphics in
    any web browser).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity possesses a fully functional free license for learning purposes and for
    independent developers, as well as different scalable pricing plans according
    to the business volume of the developer companies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity is one of the most popular engines for AR and **Virtual Reality** (**VR**)
    development, supporting the industry from an early stage. Around two-thirds of
    all AR and VR apps on the market have been built using Unity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity is an extensible environment, which can be increased by our own or third-party
    plugins, and grows in a scalable way with new elements and functionalities that
    it wasn't originally created to handle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity offers a portal that we can use to buy and sell all kinds of extensions
    and resources, both free and paid, called the Asset Store. This portal is not
    only useful for developers but also offers the business market the ability to
    create specific companies, whose business models are to create tools and content
    so that they can sell their own resources in this online store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity incorporates additional services, most of which are free, that allow us
    to generate profits in different business models of the video game world. Some
    of these services are, for example, Unity Ads, which allows you to add advertising;
    Unity Analytics, which provides information about the interaction of users; and
    Unity Networking, which provides infrastructure for the development of online
    games.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand what Unity is and its many features, we can start preparing
    our system so that we can install the necessary software.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your system for Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we are going to use Unity to develop Android mobile applications.
    To create Android apps, we need to have the **Java Development Kit** (**JDK**)
    and Android **Software Development Kit** (**SDK**) installed.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned in the *Technical requirements* section, we can easily run the
    same projects for iOS, provided that we run Unity on a macOS computer with Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Since Unity directly provides the Android SDK installation, we will install
    the JDK first and then proceed to install Unity on our computer.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java Development Kit (JDK)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the JDK, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Oracle''s download page at [https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c0b5b86-d70d-4629-93ae-76dac2503b66.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that you accept the Oracle Binary Code License Agreement for Java SE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the latest Java SE Development Kit (in our case, this is the Java SE
    Development Kit 8u201).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, run the installation file and let it install JDK and JRE into
    their default folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting with Unity 2019.2, the Unity installation allows you to install OpenJDK
    inside the Android Build Support options (see the *Installing Unity* section).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have installed the JDK, let's install Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to install Unity using the Unity Hub, a tool that allows us to
    install and manage different versions of Unity on our computer. You can download
    the Unity Hub from [https://unity3d.com/get-unity/download](https://unity3d.com/get-unity/download).
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to install Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the Unity Hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the Unity Hub. The first time you do this, it will notify you that the
    license is missing, as shown in the following screenshot. Click on MANAGE LICENSE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38999e46-c876-4c95-8cc5-ccfdce0dcd6e.png)'
  prefs: []
  type: TYPE_IMG
- en: No valid license message
  prefs: []
  type: TYPE_NORMAL
- en: 'In the License window, another message will appear, asking you to log in in
    order to add a license. Click on LOGIN:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b7fe249-3f43-4c01-82b5-a67705c331b9.png)'
  prefs: []
  type: TYPE_IMG
- en: LOGIN message in the License window
  prefs: []
  type: TYPE_NORMAL
- en: 'A pop-up window will appear, asking for your Email and Password. If you don''t
    have an account, you can create one by clicking on create one. You can also Sign
    in with google or Sign in with facebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/529e6efd-efbf-4785-ad5f-913d535fb3e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Signing into Unity
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select one of the license options and click DONE. (You can use Unity for
    free with the Personal license if you meet the requirements. If you don''t, you
    have to purchase Unity Plus or Pro on their web page ([https://store.unity.com](https://store.unity.com)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d4fc4ce-c83b-48f0-afec-ac75b66b88fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting a license for the product
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go back, click on the Installs tab, and then on ADD to add a new Unity
    installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/05740b8d-08c1-4d17-9eeb-f139fb051600.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new Unity version
  prefs: []
  type: TYPE_NORMAL
- en: 'In the pop-up window that appears, select the Unity Version you want to install
    and the modules to add. In our case, we''re using the 2019.1.2f1 version and we
    will install Microsoft Visual Studio Community 2017 to code and Android Build
    Support and Android SDK & NDK Tools to develop in Android, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/804e5691-6344-424b-b310-0f0929ca8004.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the Unity version and modules
  prefs: []
  type: TYPE_NORMAL
- en: Unity Hub always shows the latest compilation of each version. If you want to
    install a specific version, such as the one we are using here, you can find it
    and install it through the Hub from the Unity Archive: [https://unity3d.com/es/get-unity/download/archive](https://unity3d.com/es/get-unity/download/archive).
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Unity 2019.2, a new option appears under Android Build Support
    so that you can directly install OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you plan to develop with Vuforia, which is what we will do in [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml),
    *AR for Retail with Vuforia*, and [Chapter 7](4ee2c3b3-2856-4b78-a17c-5575cafafc3b.xhtml),
    *AR for Automation with Vuforia and Epson Glasses*, check the Vuforia Augmented
    Reality Support option shown in the following screenshot. Then, click NEXT and
    finish the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/016351da-2e4f-4e6d-8c47-02ad079a30f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting Vuforia Augmented Reality Support
  prefs: []
  type: TYPE_NORMAL
- en: Most recent versions of Unity might not always support Vuforia. If you don't
    see Vuforia on the list, don't panic! It is because the latest version of Unity
    doesn't support it yet and an older version should be installed that supports
    Vuforia
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''ve finished the installation, you will be sent back to the Installs window,
    where you will see the new version and the installed modules, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1795e381-3742-4536-9c47-c9be6a3779df.png)'
  prefs: []
  type: TYPE_IMG
- en: Installs window with the new Unity version
  prefs: []
  type: TYPE_NORMAL
- en: 'If during the installation process you forgot to add a module or you want to
    add it at a later date, you only have to click on the three dots button in the
    top right corner and select Add Modules, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17152331-a8b5-4f1a-bccd-8387531d06e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new module after finishing the installation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the Projects tab. Here, we will create a new project by pressing
    on the NEW button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ac2cd94-5b5f-4b96-8087-df4b029b3a06.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new project
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a 3D project (already selected). In the Settings panel, give
    the project a Name and set a Location, as shown in the following screenshot. Then,
    click on CREATE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a19d7f32-8410-4ada-99f8-ff6ba7684f1d.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the new Unity project
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity will now open the new project and you can start working with it. If you
    close the Unity window, you can reopen the project by selecting it from Unity
    Hub''s Projects window, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/896665ec-471a-4323-ba47-ff2a87680448.png)'
  prefs: []
  type: TYPE_IMG
- en: The new project appears in the Projects window
  prefs: []
  type: TYPE_NORMAL
- en: And that's it. Now, you have installed Unity on your computer and your first
    project is open so that you can start working with it. In the next section, we
    will provide a tour of the Unity interface in order to see the possibilities Unity
    offers and how to use each tool.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Unity interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first time you open the Unity editor, you will see a layout with different
    bars and windows, similar to what can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/861f49c8-a515-45ea-969e-b45f38304c1a.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial Unity layout
  prefs: []
  type: TYPE_NORMAL
- en: 'At first glance, the Unity configuration slightly reminds us of 3D modeling
    tools, with the 3D scene in the middle, although it has more panels on the sides
    than modeling tools does. Although it can look a bit daunting to understand everything
    if you are not familiarized with 3D tools, the Unity interface is quite straightforward
    and has remained very much the same throughout the Unity versions. The main components
    that can be seen in the preceding screenshot are as follows (from top left to
    bottom right):'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Toolbar**: Here, we have the main buttons so that we can manipulate objects
    in the Scene view to test the scene.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Hierarchy window**: The Hierarchy window shows the elements in the Scene
    view ordered hierarchically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Scene view, Game view, and Asset Store window**: These three tabs have
    different purposes. The Scene view shows all the elements in the 3D scene. The
    Game view shows, from the camera perspective, how the scene will look when built.
    The Asset Store window can be used to download packages and assets from the Unity
    Store so that we can include them in our project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Inspector window**: When an element is selected in the Hierarchy window
    or the Scene view, its features and components will appear in this window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Project window and Console window**: The former shows all the directories
    and files of the project that we can (or not) use in the scene, while the latter
    shows the log messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we're going to explore each component in detail and learn how to change
    this layout to our needs and tastes.
  prefs: []
  type: TYPE_NORMAL
- en: The Toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This Toolbar is fixed on the screen and allows us to access Unity''s main features.
    It''s divided into three sections: the tools to manipulate objects on the scene,
    the Game view controls, and a group of buttons to access Unity services and manage
    the layers and UI layout:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left-hand side, we can see the main tools that we can use to manipulate
    the Scene view and the objects on it. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Hand tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotate tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rect tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combined tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Center/Pivot button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Local/Global button:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/003cf082-0bae-4a75-ab1d-d516b35cb702.png)'
  prefs: []
  type: TYPE_IMG
- en: Buttons on the left of the toolbar
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at these tools, one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hand tool**: This is the navigation tool for the scene. It has three uses:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Move**: Left-click + Drag to move through the scene without altering any
    of its objects. A hand icon appears in the Toolbar and Scene view. ![](img/04bbc9fc-8c03-4e57-a647-6926062082bc.png)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orbit**: *Alt* + Left-click + Drag to orbit in the scene. An eye icon appears
    in the Toolbar and Scene view. ![](img/09480e16-40c5-446c-9267-8992227b2343.png)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zoom**: *Alt* + Right-click + Drag to zoom in and out of the scene. A magnifying
    glass icon appears in the Toolbar and Scene view. ![](img/263a77fc-52ef-4dff-9899-6fdc257e944b.png)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use move at any time by pressing the wheel of the mouse and dragging.
    You can also access zoom in and out, using the mouse scroll wheel.
  prefs: []
  type: TYPE_NORMAL
- en: '**Move tool**: When this button is selected, you can move the objects on the
    scene into the three axes by dragging the corresponding arrow. You can also drag
    the small squares that appear on the intersection of the arrows to move the object
    into a plane (two axes) instead of a single axis:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f7ad758b-282f-447d-92a6-37e2b06f3ae6.png)'
  prefs: []
  type: TYPE_IMG
- en: Moving a 3D element
  prefs: []
  type: TYPE_NORMAL
- en: '**Rotate tool**: When this button is selected, you can rotate the objects on
    the scene in the three axes by dragging the corresponding circle:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d967dfeb-1ddf-470d-8db8-9ab9f4917f3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Rotating a 3D element
  prefs: []
  type: TYPE_NORMAL
- en: '**Scale tool**: When this button is selected, you can scale the objects on
    the scene in the three axes by dragging the corresponding arrow (ending on a small
    cube). You can also drag the central cube to scale the object uniformly on the
    three axes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/37445d6f-a285-4edf-8410-1973145fb90f.png)'
  prefs: []
  type: TYPE_IMG
- en: Scaling a 3D element
  prefs: []
  type: TYPE_NORMAL
- en: '**Rect tool**: The tools we have seen so far are thought to manipulate 3D models.
    The rect tool, however, is specifically used for the **User Interface** (**UI**)
    elements on the scene and it works in two dimensions. In the following screenshots,
    we are manipulating a button:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can *move* a UI element by dragging it:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/bb2b80cd-6b3d-4096-9ea7-09a683413f48.png)'
  prefs: []
  type: TYPE_IMG
- en: Moving a UI element
  prefs: []
  type: TYPE_NORMAL
- en: 'To rotate an element, hover over the corner until the rotation icon appears.
    Then, click and drag:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/682b7ef5-d76b-4dcb-a9ba-d09ae27b57fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Rotating a UI element
  prefs: []
  type: TYPE_NORMAL
- en: 'You can scale the element by dragging it from the corners:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ef910298-671b-4204-ba52-1693b78692b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Scaling a UI element
  prefs: []
  type: TYPE_NORMAL
- en: '**Combined Move, Rotate, and Scale tool**: This button combines the Move, Rotate, and
    Scale options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6a69bd42-6ffb-4a68-b509-ed59d1ccb653.png)'
  prefs: []
  type: TYPE_IMG
- en: All the guides appearing together to manipulate the object
  prefs: []
  type: TYPE_NORMAL
- en: '**Center**/**Pivot button**: When Center is selected, the translation, rotation,
    and scale operations will be performed from the object''s center point. In the
    following screenshot, the camera and directional light have been selected and
    the guide appears in the center point of the resulting group. In this case, the
    camera and light *will rotate around that central point*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/eaab95bf-7fe9-45ce-a2e6-b402c3e551b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Center option active
  prefs: []
  type: TYPE_NORMAL
- en: 'When Pivot is selected, operations will be performed from each pivot point.
    In this case, the camera and light *will rotate around their respective pivot
    points*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d6f798a-0705-4f1d-818b-b8235fec4481.png)'
  prefs: []
  type: TYPE_IMG
- en: Pivot point option active
  prefs: []
  type: TYPE_NORMAL
- en: '**Local**/**Global button**: When Local is selected, the translation, rotation,
    and scale operations will be performed relative to the selected object''s origin.
    In the following screenshot the light is rotated, and its coordinate system also
    appears rotated:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6c32b3e7-e18a-4dc1-af9b-edae04f4537c.png)'
  prefs: []
  type: TYPE_IMG
- en: Local option selected
  prefs: []
  type: TYPE_NORMAL
- en: 'When Global is selected, the operations will be performed relative to the world''s
    origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25f29a57-118c-4e71-8010-51a308df3348.png)'
  prefs: []
  type: TYPE_IMG
- en: Global option selected
  prefs: []
  type: TYPE_NORMAL
- en: 'On the center of the Toolbar, we have the play, pause, and step buttons, which
    we can use to control the Game view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e017b64-7603-4ff4-8ea8-c112f3fe726c.png)'
  prefs: []
  type: TYPE_IMG
- en: Buttons on the center
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right-hand side, we have some buttons that we can use to access Unity
    collaborate services, Unity cloud services (the cloud icon), our Unity Account,
    the Layers visibility menu, and the Layout menu. We will be using the Layout menu
    later in this section to create a custom layout for our projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/898876aa-bde3-4081-a956-4a34caa7b5f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Buttons on the right-hand side
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the functionality of the Toolbar, let's look at the Scene
    view.
  prefs: []
  type: TYPE_NORMAL
- en: The Scene view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Scene view is the window where you will interact with the current scene
    and the 3D world you are creating on it. Here, you will have all the content that
    forms the scene and you will be able to manipulate them visually using the commands
    on the Toolbar. With this view, we can navigate through the whole scene and see
    it from all its angles so that we can place the 3D objects and make sure they
    are in the correct position. In this view, we can also manipulate the UI elements.
    The main element we want to talk about in this window is the Gizmo, which is located
    on the top right-hand side of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '**T****he Gizmo**: You can use the Gizmo to quickly change the view (Top, Bottom, Right, Left, Front, Back)
    and switch between Perspective and Isometric (orthographic) modes. When changing
    the view, the *x*, *y*, and *z* arrows in the Gizmo will be pointing in the direction
    of each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f4cb8dc-8d77-486c-8262-ec1c7894f848.png)'
  prefs: []
  type: TYPE_IMG
- en: Gizmo with different arrows on the Front, Top, and Right views
  prefs: []
  type: TYPE_NORMAL
- en: 'The little icon on the left-hand side of the view name shows whether it''s
    a Perspective or Isometric (orthographic) view, as shown in the following screenshot.
    You can switch between them by clicking on the little icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fbe05e7-32e2-4cd3-8a97-0b3f445af330.png)'
  prefs: []
  type: TYPE_IMG
- en: Perspective and Isometric (Orthographic) views allow us to adjust the objects
    in the scene
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the Hierarchy window and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: The Hierarchy window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This window is a hierarchical view of the elements in the Scene view, which
    are represented by their names. On the top, we will always have the scene, and
    all the objects we add to the scene will hang from it. In the following screenshot,
    we have different elements, with some of them (Cube, Canvas) containing more elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hierarchical view allows us to easily find the elements and the relationships
    between them (parenting) that affect the way they behave. For example, if we move
    the Cube element, its child object, ChildOfCube, will move along with it. However,
    if we only want to move the ChildOfCube element, we would select it in the Hierarchy
    window and move it, without affecting its parent Cube. In terms of the *local/global* positioning
    we explained in the previous section, the children''s local position, rotation,
    and scale will be relative to those of the father:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/627652ab-0521-45f1-a404-a432533525cb.png)'
  prefs: []
  type: TYPE_IMG
- en: The Cube object being selected in the Hierarchy window and Scene view
  prefs: []
  type: TYPE_NORMAL
- en: We will also use this window to quickly add new elements by right-clicking on
    it and selecting the one we want to add to the scene.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, objects in the scene can be selected by clicking on them
    in the Scene view or in the Hierarchy window. The latter is very useful when an
    object has multiple children since we can ensure that we are selecting the correct
    element. In the Scene view, they could be overlapping.
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick tip: double-clicking on the name of an object in the Hierarchy window
    makes the scene zoom into that object.'
  prefs: []
  type: TYPE_NORMAL
- en: The Scene view and Hierarchy window are the two windows we can use to manipulate
    the elements in a scene, that is, the elements that we will build into our device.
    Now, we are going to learn how the Inspector window works when one of the elements
    in the scene is selected.
  prefs: []
  type: TYPE_NORMAL
- en: The Inspector window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This window displays the properties and components of the currently selected
    object. From here, you will be able to edit, delete, and add new components to
    the object. Since the different objects in the scene will have different properties,
    the Inspector window will change accordingly to show the corresponding information
    in each moment. This window can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ce79143-5eca-4f7f-ae2f-0e7ffd5a95d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Two different Inspector windows for the Main Camera and a Cube
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, every element in the scene will have a
    Transform component so that it can move, rotate, and scale that element in the
    scene. However, apart from this, the Main Camera and Cube elements of the image
    don't have more components in common. In the case of the camera, it has, as expected,
    a Camera component, while the Cube has a mesh, a renderer (to visualize the object),
    and a collider that marks the physical boundaries of such an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The components in the Inspector window can be maximized and minimized so that
    we can organize the view. This way, if we have many components in a GameObject,
    we only see the ones that we require at each moment. For that, we can use the
    small arrow next to each component, as shown in the following screenshot, where
    the same Main Camera has had its components collapsed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bee35c56-559e-40e8-92fb-e8d3f2a7c2d2.png)'
  prefs: []
  type: TYPE_IMG
- en: The Main Camera with its components collapsed
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at how the Project window works.
  prefs: []
  type: TYPE_NORMAL
- en: The Project window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This window shows all the assets that are available for your project. When
    you import a new asset into your project, it will appear on this window and, from
    here, you will be able to drag it into your scenes. It''s a hierarchical view
    with files organized in folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5187e2f4-64ce-4ba5-b9eb-1a45def43d17.png)'
  prefs: []
  type: TYPE_IMG
- en: Project window displaying the main folders in the Assets folder
  prefs: []
  type: TYPE_NORMAL
- en: '**Important!** When building an application, not every asset that appears in
    the Project window will be built into it. Except for some special folders, which
    can be found here: [https://docs.unity3d.com/Manual/SpecialFolders.html](https://docs.unity3d.com/Manual/SpecialFolders.html). Assets
    are only included in the final bundle if they are connected to the scene (directly
    appearing on it, called from scripts, and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will take a look at the Game view, which, as we mentioned at the beginning
    of this section, is located in a tab next to the Scene view.
  prefs: []
  type: TYPE_NORMAL
- en: The Game view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This window shows how the scene has been rendered by the camera(s) in your
    world. You can use the play, pause, and step buttons from the Toolbar to play
    your scene and see how it will look when published:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df18ffee-8f46-4628-97d1-b1a10968b72a.png)'
  prefs: []
  type: TYPE_IMG
- en: The Button and Cube objects from the Main Camera object's perspective
  prefs: []
  type: TYPE_NORMAL
- en: '**Important!** Any change you make in play mode is temporary and *will disappear*
    once you quit this mode by clicking on the play button again. This is useful when
    you want to try different approaches (for example, object rotation or color) before
    selecting the one that suits you, but make sure you don''t lose important work
    because you forgot to switch play mode off!'
  prefs: []
  type: TYPE_NORMAL
- en: The tab next to this window is the Asset Store window. Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: The Asset Store window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This window connects to the Unity Asset Store, which is where developers and
    designers upload their assets. You can download and import any asset from the
    Asset Store for your project from this window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3362a62-1296-4456-a567-4d743168d462.png)'
  prefs: []
  type: TYPE_IMG
- en: Asset Store window from within Unity
  prefs: []
  type: TYPE_NORMAL
- en: The Asset Store offers free and paid content, such as 2D and 3D models and scenes,
    audio files, templates, complete projects, and much more, all of which you can
    download and import directly into your projects. All of these assets make the
    process of creating a project easier and faster.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, let's learn how the Console window works and what it is
    useful for.
  prefs: []
  type: TYPE_NORMAL
- en: The Console window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, you can find the log of your project. This window displays warnings,
    errors, and information logs about your project, as shown in the following screenshot. If
    you struggle while troubleshooting error codes, the Unity forums ([https://forum.unity.com/](https://forum.unity.com/))
    is a valuable tool so that you can search for similar cases and ask for help:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26802d2a-1fef-41bb-883f-b848e9e39816.png)'
  prefs: []
  type: TYPE_IMG
- en: The Console window displaying different types of information, warning messages,
    and errors
  prefs: []
  type: TYPE_NORMAL
- en: 'The main elements of this window and their functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The Clear button removes all messages except compilation errors. You will have
    to correct these errors before making any other changes to the current scene or
    playing it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use Collapse to join the same messages into an only message line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Clear on Play to delete all the messages the moment you hit the play button
    on the Toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error Pause allows you to pause the execution of the scene when an error occurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the three buttons on the right-hand side to show/hide the different types
    of messages (information, warning, and error).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By now, you should have pretty good knowledge of how the Unity interface works.
    Before going any further, however, we are going to learn how to change the layout
    configuration. It's simple and useful to customize the various windows according
    to our needs and tastes.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've looked at the main windows and know how they function, the first
    thing we are going to do is change the disposition of these windows on the screen
    so that they fit our project's needs. For this book, we are going to use a modified
    version of the 2 by 3 layout, which will allow us to see the AR scene and game
    at the same time. However, once you are comfortable using Unity, feel free to
    select the layout that suits you the most.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the modified version, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, select the 2 by 3 layout on the top right drop-down menu of the Toolbar,
    just above the Inspector window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e2df74b-4596-4827-bc5e-92b3b3627aa7.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting 2 by 3 on the Layout drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, drag the Project window so that it''s below the Hierarchy window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5a3fa37-2de5-426b-b679-d28b9bd3bcfe.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging the Project window so that it's below the Hierarchy window
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the list view on the Project window by dragging the bottom scrollbar
    all the way to the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8059468-7320-4650-95d0-aaf9d96b71c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Moving the horizontal scrollbar to the left
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new aspect ratio of the Game view called `1280 x 720` and insert the
    following values: Width: `1280`, Height: `720`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c5cf391-80ea-4266-813f-b40ddf7492ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new Aspect Ratio
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Console window, press *Ctrl* + *Shift* + *C* orWindow|General|Console
    and drag it so that it''s a tab beside the Game view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f688d09d-bff7-47e4-b8cd-ee459a985d90.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging the Console window next to the Game view
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to ensure this layout is available every time you open Unity, go to
    Layouts, select Save Layout..., and give it a name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3654394-5e84-4152-a814-13cb3d7a7221.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving the created layout
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have our layout ready so that it can be used in our AR projects. By
    now, you should be acquainted with the different windows and tools Unity offers
    and how they work. In the next section, we will take a look at the main elements
    we can find in a Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: Unity's main elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An application built in Unity will be made up of a project. This project will
    contain all the necessary elements that we'll need in order to develop the application,
    such as models, scripts, plans, menus, and much more. When you start up Unity,
    you can open a project by pointing to its root folder.
  prefs: []
  type: TYPE_NORMAL
- en: Each project contains one or more documents, called **scenes**. The projects
    that are created in Unity are structured into scenes, where a scene can be any
    part of the project. When we talk about applications, a scene can be from the
    start menu to any level or area of it. A single scene will contain many elements,
    such as a user interface, 3D objects, scripts, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main elements you can find in a Unity project are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GameObjects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefabs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will look at Assets.
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity refers to the files that will be used to create your project as an **asset**. They
    are the building blocks inside a Unity project and they can be in the form of
    image files, 3D models, sound files, code files, and so on. Assets from Unity,
    such as materials, textures, animations or scripts can be created in a *project* by
    either clicking on Assets|Create on the top menu bar or by right-clicking inside
    a folder on the Project window and selecting Create.
  prefs: []
  type: TYPE_NORMAL
- en: When we work with external assets, such as an image that's been downloaded from
    the internet or a 3D model we've designed, we can add them to the project by dragging
    them from an external folder (for example, from a folder on Windows Explorer)
    into one of the folders of the Project window or by right-clicking inside a folder
    of the Project window and selecting Import New Asset....
  prefs: []
  type: TYPE_NORMAL
- en: 'Use one of these methods to add *two* images from your computer gallery to
    the project''s `Assets` folder (we will be using one now and the other later),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09079c31-f747-4b0f-84d1-d678f03e7200.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding an image to the project
  prefs: []
  type: TYPE_NORMAL
- en: Another way to import assets is to import a whole package containing several
    assets through Import-Package. This option can be found in the Assets menu of
    the menu bar or by right-clicking on the Project view.
  prefs: []
  type: TYPE_NORMAL
- en: To delete an asset from your project, right-click on it and press Delete. It's
    important to notice that, once you delete an asset from the project, you can't
    recover it again.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at what GameObjects are.
  prefs: []
  type: TYPE_NORMAL
- en: GameObjects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an asset is used in a scene, it becomes a GameObject. GameObjects can be
    added to the scene by either clicking on GameObject on the top menu bar or by
    right-clicking in the Scene view or Hierarchy window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use one of these methods to add a 3D Object|Cube to the scene and move it so
    that it''s in front of the Main Camera and is visible in the Game view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27af82d7-569c-42a4-80c4-59fb49476a1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Cube in the Hierarchy window
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about components.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components come in different forms and they are in charge of adding functionality
    to GameObjects. They can be used to create behavior (for example, scripts), define
    the appearance of GameObject (for example, renderers), and influence other aspects
    of the function of an object in the project.
  prefs: []
  type: TYPE_NORMAL
- en: All GameObjects contain at least one component. We start with the Transform component.
    This component is in charge of telling the Unity engine the position, rotation,
    and scale of an object. Other common component elements include Renderer and Collider.
    We will be looking at their uses in the upcoming chapters in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Components are added to a GameObject by selecting the object and then clicking
    on the Component menu of the menu bar or by hitting the Add Component button on
    the Inspector window.
  prefs: []
  type: TYPE_NORMAL
- en: Components can also be dragged from the Project window into the GameObject (for
    example, you can drag a script from the Project window onto a cube on the Scene view
    and the script will automatically appear in the Inspector window).
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag one of the images you added to the Project window previously into the
    cube of the Scene view to convert it into a texture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/951ea1fb-f939-45c9-b9f0-d32882129ca6.png)'
  prefs: []
  type: TYPE_IMG
- en: The cube in the scene with the image as a texture
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know about the visible elements of a project, let''s talk about
    the invisible ones: the scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: Prefabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prefabs are GameObjects with customized properties and components (for example,
    a light with a script added to it to make it blink) that you can store in your Project window
    so that you can reuse them in different scenes/moments. They can be created or
    copied at any time (including runtime) and, whenever you alter a property of the
    original prefab, unless otherwise defined, all its instances will be updated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scripts, which are actually a type of component, are an essential part of Unity
    since they define the behavior of the different elements in the project. You can
    manipulate (add/edit/delete) a script like any other component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the Project window and press Create|C# Script to create a new
    script and give it a name (for example, `CubeHandler.cs`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f324d1b-bc14-4717-bbab-9dfc83992cb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new script
  prefs: []
  type: TYPE_NORMAL
- en: In the Inspector window, you'll see that the newly created script has some default
    code in it. We'll talk about this code in the next section. Now that we have knowledge
    about the different elements of unity, let's learn to script in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting – first example in C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see all the potential of scripts in Unity, we are going to take a look at
    the script we created in the previous section, `CubeHandler.cs`. As its name suggests,
    we are going to add some code to it to manipulate the cube in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the name of the script in the Project window to open it in Visual
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already had Visual Studio installed on your computer before you installed
    Unity, it''s possible that Unity won''t detect it automatically when double-clicking
    on the script. If so, you''ll have to go to Edit|Preferences and go to External
    Tools. From there, select the path to the `.exe` file of Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3be1bccb-d3e3-45ea-9049-e150c29f6fb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Preferences window with Visual Studio assigned as the External Script Editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon opening the script, you will see the following auto-generated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first three lines are the calls to three references. The first two are commonly
    used collections, while the third one is the reference that we need so that we
    can work with the Unity engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you have the class declaration. The name of the class must be the same
    as the `.cs` script. By default, the classes that are generated through Unity
    will inherit from `MonoBehaviour`, which allows us to use the following two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Start` method, which is called automatically as soon as the Unity scene
    is generated and before the first frame update. Therefore, this method is useful
    when it comes to initializing variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Update` method is called once per frame, meaning that the code inside this
    method will be executed repeatedly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try to add some code to control the cube on the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to declare a variable called `speed`, just after the declaration
    of the class, and before the `Start` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we are going to initialize the value of `speed` in the `Start` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we are going to use this variable in the `Update` method to tell the
    cube to rotate at a certain speed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This last line accesses the `transform` component of the current GameObject
    element, which is in charge of its position, rotation, and scale. We are telling
    the `transform` component that we want to rotate the object in the vertical axis
    (`Vector3.up`) with the speed we set previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'By itself, the script won''t do anything because it doesn''t know which object''s
    transform we are referring to. To tell the script which objects from the scene
    we want to manipulate, go back to the Unity editor and drag the script onto the
    cube. Make sure that it appears as one of its components in the Inspector window.
    This way, we are telling the script that it''s the Cube we want to rotate. The
    full code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you press the play button on the Toolbar, the Game view will show the
    cube rotating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2a5ce0d-b383-4aa4-ae77-66004f4d0ea1.png)'
  prefs: []
  type: TYPE_IMG
- en: When playing the scene, the cube will start rotating
  prefs: []
  type: TYPE_NORMAL
- en: Press play again to stop the simulation. Try changing the value of the `speed`
    to see how it affects the rotation speed of the cube.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `transform` component is a little special because it has its own name.
    To access any other component, we need to use the `GetComponent<ComponentName>()` function.
    As an example, we can use this if we want to change the texture of the cube (the
    image we dragged into it previously). The component that''s in charge of materials
    and textures is the `Renderer`. Let''s include this code in our script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the following line of code below the speed definition, which declares a
    variable of the `Texture2D` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following two lines to the `Update` method, which is below the
    transformed line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are saying that, if the system detects that the *A* key has been pressed,
    the texture of the object's `Renderer` component will change to the new one. As
    you can see, in this case, we haven't initialized the texture in the `Start` method.
    Instead, we have made it `public` and we are going to assign it from within Unity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the Unity editor. You will see that a new line has been added to
    the script component in the Inspector window. To assign the other image to it,
    you can either drag it from the Project window or click on the circle on the right
    and select it from the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/454f3260-a5d7-4e4c-bbcc-9619e2d1dc4d.png)'
  prefs: []
  type: TYPE_IMG
- en: The last component of the cube is the script with the new line for selecting
    a Texture
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, press play again. When the cube is rotating, press the *A* key. You will
    see how the texture of the cube changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dbb0a14f-e843-4c88-98be-63dad572bd49.png)'
  prefs: []
  type: TYPE_IMG
- en: Pressing the A key on the keyboard to see the texture of the cube change
  prefs: []
  type: TYPE_NORMAL
- en: Now, you know about all of the logic behind a Unity project and have the basis
    to create more complex scripts. In the upcoming chapters, we will be using scripts
    for purposes such as showing elements in AR or interacting with the user through
    the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install Unity and the necessary modules to
    make it work so that we can build mobile applications. We also introduced how
    the Unity interface is designed, its main windows, and how to customize their
    composition for our needs. We took a look at the main windows, their tools, and
    how to use them. Then, we learned about the main elements we can find in a Unity
    project and how to create/import them. Finally, we created our first script with
    a few lines of code to understand how easily we can control and alter objects
    on a scene.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter and the ones that follow, we will work with all of the elements
    we learned about in this chapter in order to generate fully functional AR projects.
  prefs: []
  type: TYPE_NORMAL
