["```cs\n    choco install kubernetes-cli \n    ```", "```cs\nName: John\nSurname: Smith\nSpouse:\nName: Mary\nSurname: Smith\nAddresses:\n- Type: home\nCountry: England # I am a comment\nTown: London\nStreet: My home street\n- Type: office\nCountry: England\nTown: London\nStreet: My home street \n```", "```cs\n{\nName: John\nSurname: Smith\nSpouse:\n{\n  Name: Mary\n  Surname: Smith\n}\nAddresses:\n[\n{\n  Type: home\n  Country: England\n  Town: London\n  Street: My home street\n },\n{\n  Type: office\n  Country: England\n  Town: London\n  Street: My home street\n }\n]\n} \n```", "```cs\n    kubectl config view \n    ```", "```cs\n    kubectl config set-cluster my-cluster --server=https://<your cluster API server URL> \n    ```", "```cs\n    Kubectl config set-credentials newusername --client-key= newusername.key --client-certificate=poweruser.crt --embed-certs=true \n    ```", "```cs\n    kubectl config set-context newcontext --cluster= my-cluster --user= newusername \n    ```", "```cs\n    kubectl config use-context newcontext \n    ```", "```cs\n    az login \n    ```", "```cs\n    az aks install-cli \n    ```", "```cs\n    az aks get-credentials --resource-group <your AKS resource group name> --name <your AKS name> \n    ```", "```cs\nkubectl get nodes \n```", "```cs\nNAME       STATUS            ROLES               AGE   VERSION\nminikube   Ready    control-plane,master   35m   v1.22.3 \n```", "```cs\nkubectl get all \n```", "```cs\nNAME                        TYPE     CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nservice/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   87m \n```", "```cs\nkubectl describe node minikube \n```", "```cs\napiVersion: v1\nkind: Pod\nmetadata:\nname: my-podname\nnamespace: mypodnamespace\nlabels:\nlabenname1: labelvalue1\nlabelname2: labelvalue2\nspec:\nrestartPolicy: Always #Optional. Possible values: Always (default), OnFailure. Never.\ncontainers:\n…\ninitContainers:\n… \n```", "```cs\napiVersion: v1\nkind: Namespace\nmetadata:\nname: my-namespace \n--- row.\n```", "```cs\n - name: <container name>\nimage: <container image URL>\ncommand: […] # square bracket contains all strings that compose the OS command\nresources:\nrequests:\ncpu: 100m\nmemory: 128Mi\nlimits:\ncpu: 250m\nmemory: 256Mi\nports:\n- containerPort: 80\n- containerPort: …\n…\nenv:\n-name: env-name1\nvalue: env-value1\n…\nvolumeMounts:\n- name: data\nmountPath: /mypath/mysubpath….\nsubPath: /vsubpath #optional. If provided the path of data mounted in mountPath\n… \n```", "```cs\napiVersion: v1\nkind: Namespace\nmetadata:\nname: basic-examples \n```", "```cs\n---\napiVersion: v1\nkind: Pod\nmetadata:\nname: pod-demo\nnamespace: basic-examples\nlabels:\napp: myapp\nspec:\ncontainers:\n- name: myapp\nimage: alpine:latest\ncommand: ['sh', '-c', 'while true; do echo $(date) >> /opt/logs.txt; sleep 1; done']\n    volumeMounts:\n- name: data\nmountPath: /opt\ninitContainers:\n- name: logshipper\nimage: alpine:latest\nrestartPolicy: Always\ncommand: ['sh', '-c', 'tail -F /opt/logs.txt']\n    volumeMounts:\n- name: data\nmountPath: /opt\nvolumes:\n- name: data\nemptyDir: {} \n```", "```cs\nvolumeMounts:\n- name: data\nmountPath: /opt \n```", "```cs\n- name: data\nemptyDir: {} \n```", "```cs\nkubectl apply -f SimplePOD.yaml \n```", "```cs\nkubectl get pods -n basic-examples \n```", "```cs\nkubectl logs -n basic-examples  pod-demo -c logshipper \n```", "```cs\nkubectl logs -f -n basic-examples  pod-demo -c logshipper \n```", "```cs\nkubectl exec -it -n basic-examples pod-demo -c logshipper -- sh \n```", "```cs\nkubectl delete -f SimplePOD.yaml \n```", "```cs\nvolumes\n- nfs:\nserver: my-nfs-server.example.com\npath: /my-nfs-volume\nreadOnly: true # optional. If provided the volume is accessible as read-only \n```", "```cs\nKubectl get storageclasses \n```", "```cs\nNAME               PROVISIONER            RECLAIMPOLICY   VOLUMEBINDINGMODE ...  \nstandard (default) k8s.io/minikube-hostpath   Delete          Immediate      ... \n```", "```cs\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: myclaim\nnamespace: a-namespace\nspec:\naccessModes:\n- ReadWriteOnce # ReadWriteOnce, ReadOnlyMany, ReadWriteMany, ReadWriteOncePod\nresources:\nrequests:\nstorage: 8Gi\nstorageClassName: <my storage classname> \n```", "```cs\nvolumes:\n- name: myvolume\n   persistentVolumeClaim:\n     claimName: myclaim \n```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: my-deployment-name\nnamespace: my-namespace\nlabels:\napp: my-app\nspec:\nreplicas: 3\nselector:\nmatchLabels:\nmy-pod-label-name: my-pod-label-value\n...\ntemplate: \n```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: nginx\nnamespace: basic-examples\nlabels:\napp: webservers\nspec:\nselector:\nmatchLabels:\napp: webservers\nreplicas: 2\ntemplate:\nmetadata:\nlabels:\napp: webservers\nspec:\ncontainers:\n- image: nginx\nname: nginx\nports:\n- containerPort: 80\nname: web\nvolumeMounts:\n- mountPath: /usr/share/nginx/html\nname: website\nvolumes:\n- name: website\npersistentVolumeClaim:\nclaimName: website \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nname: my-service\nnamespace: my-namespace\nspec:\nselector:\nmy-selector-label: my-selector-value\n...\nports:\n- name: http\nprotocol: TCP\nport: 80\ntargetPort: 80\n- name: https\nprotocol: TCP\nport: 443\ntargetPort: 443 \n```", "```cs\nspec:\ntype: LoadBalancer\nloadBalancerIP: <yourpublic ip>\nselector:\n… \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nannotations:\nservice.beta.kubernetes.io/azure-load-balancer-resource-group: <IP resource group name> \n```", "```cs\nservice.beta.kubernetes.io/azure-dns-label-name: <label > \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nname: webservers-service\nnamespace: basic-examples\nspec:\ntype: LoadBalancer\nselector:\napp: webservers\nports:\n- name: http\nprotocol: TCP\nport: 80\ntargetPort: 80 \n```", "```cs\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: website\nnamespace: basic-examples\nspec:\naccessModes:\n- ReadWriteMany\nresources:\nrequests:\nstorage: 1Gi \n```", "```cs\napiVersion: v1\nkind: Namespace\nmetadata:\nname: basic-examples \n```", "```cs\n    kubectl apply -f BasicExamples.yaml\n    kubectl apply -f WebServersPVC.yaml\n    kubectl apply -f WebServers.yaml\n    kubectl apply -f WebServersService.yaml \n    ```", "```cs\n    kubectl get pods -n Basic-Examples \n    ```", "```cs\n    kubectl cp  <source path> <namesapace>/<pod name>:<destination folder> \n    ```", "```cs\n    kubectl cp Index.html basic-examples/<pod name>:/usr/share/nginx/html \n    ```", "```cs\nkubectl delete -f WebServersService.yaml\nkubectl delete -f WebServers.yaml\nkubectl delete -f WebServersPVC.yaml \n```", "```cs\n...\nspec:\nclusterIP: None\nselector:\n... \n```", "```cs\nvolumeClaimTemplates:\n- metadata\n...\nspec:\n... \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nname: podname\nnamespace: basic-examples\nlabels:\napp: podname\nspec:\nports:\n- port: 80\nclusterIP: None\nselector:\napp: podname\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\nname: podname\nnamespace: basic-examples\nspec:\nselector:\nmatchLabels:\napp: podname\nserviceName: \"podname\"\nreplicas: 3\ntemplate:\nmetadata:\nlabels:\napp: podname\nspec:\ncontainers:\n- name: test\nimage: alpine:latest\ncommand: ['sh', '-c', 'while true; do echo $(MY_POD_NAME); sleep 3; done']\n        ports:\n- containerPort: 80\nenv:\n- name: MY_POD_NAME\nvalueFrom:\nfieldRef:\nfieldPath: metadata.name\nvolumeClaimTemplates:\n- metadata:\nname: volumetest\nspec:\naccessModes: [ \"ReadWriteOnce\" ]\n      resources:\nrequests:\nstorage: 1Gi \n```", "```cs\n- name: MY_POD_NAME\nvalueFrom:\nfieldRef:\nfieldPath: metadata.name \n```", "```cs\nkubectl logs podname-1 -n basic-examples \n```", "```cs\nkubectl get persistentvolume -n basic-examples \n```", "```cs\nkubectl delete namespace basic-exampleswhole \n```", "```cs\nkubectl create namespace basic-examples \n```", "```cs\n<number of replicas> = <target throughput (requests per second)><average response time in seconds> \n```", "```cs\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: myautoscalername\n  namespace: mynamespace\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\nname: mydeploymentname\n  minReplicas: 1\nmaxReplicas: 10\nmetrics:\n  - type: <resource or pod or object>\n    … \n```", "```cs\n- type: Resource\nresource:\nname: <memory or cpu>\ntarget:\ntype: AverageValue\naverageValue: <target memory or cpu> \n```", "```cs\n<utilization> = 100*<actual average consumption>/<declared resource request> \n```", "```cs\n- type: Resource\nresource:\nname: <memory or cpu>\ntarget:\ntype: Utilization\naverageUtilization: <target memory or cpu utilization> \n```", "```cs\n- type: Pods\npods:\nmetric:\nname: packets-per-second\ntarget:\ntype: AverageValue\naverageValue: 1k \n```", "```cs\n- type: Object\nobject:\nmetric:\nname: requests-per-second\ndescribedObject:\napiVersion: networking.k8s.io/v1\nkind: Ingress\nname: application-ingress\ntarget:\ntype: Value\nvalue: 10k \n```", "```cs\ndocker network create myvirtualnet \n```", "```cs\n<PropertyGroup>\n<TargetFramework>net9.0</TargetFramework>\n…\n<DockerfileRunArguments>--net myvirtualnet --name myhostname</DockerfileRunArguments>\n</PropertyGroup> \n```", "```cs\nScript-Migration -From <initial migration> -To <final migration> -Output <name\nof output file> \n```", "```cs\ndocker run -d -p 5000:5000 --name registry registry:2 \n```", "```cs\n …….,\n\"insecure-registries\": [\n    \"host.docker.internal:5000\",\n    \"host.minikube.internal:5000\" \n```", "```cs\nminikube delete \n```", "```cs\nminikube start --insecure-registry=\"host.docker.internal:5000\" --insecure-registry=\"host.minikube.internal:5000\" \n```", "```cs\nminikube addons configure registry-creds \n```", "```cs\nminikube addons enable registry-creds \n```", "```cs\nkubectl apply -f https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/docs/examples/hello-world/rabbitmq.yaml \n```", "```cs\napiVersion: rabbitmq.com/v1beta1\nkind: RabbitmqCluster\nmetadata:\nname: <cluster name>\nnamespace: <cluster namespace>\nspec:\nreplicas: 3 # default is 1\\. Replicas should be odd.\npersistence:\nstorageClassName: <storage class name> # default is the default storage class\nstorage: 20Gi # default 10Gi \n```", "```cs\nkubectl get secret <cluster name>-default-user -n <cluster namespace> -o yaml \n```", "```cs\necho <string to decode> | base64 -d \n```", "```cs\nkubectl port-forward service/<cluster name> 5672:5672 \n```", "```cs\nkubectl port-forward service/<service name> <local host port>:<service port> \n```", "```cs\nkubectl port-forward service/<cluster name> 15672:15672 \n```", "```cs\n    kubectl get service <service name> -n <service namespace> -o yaml \n    ```", "```cs\n    apiVersion: discovery.k8s.io/v1\n    kind: EndpointSlice\n    metadata:\n    name: <service name>-1\n    namespaces: <service namespace>\n    labels:\n    kubernetes.io/service-name: <service name>\n    addressType: IPv4\n    ports:\n    - name: http # should match with the name of the service port\n    appProtocol: http\n    protocol: TCP\n    port: <target port>\n    endpoints:\n    - addresses:\n    - \"<your development machine IP address>\" \n    ```", "```cs\n    apiVersion: discovery.k8s.io/v1\n    kind: EndpointSlice\n    metadata:\n    name: <service name>-1\n    namespaces: <service namespace>\n    labels:\n    kubernetes.io/service-name: <service name>\n    addressType: FQDN\n    ports:\n    - name: http # should match with the name of the service port\n    appProtocol: http\n    protocol: TCP\n    port: <target port>\n    endpoints:\n    - addresses:\n    - \"host.minikube.local\" \n    ```", "```cs\nbuilder.Services.AddEasyNetQ(\n    builder.Configuration?.GetConnectionString(\"RabbitMQConnection\") ?? \n        string.Empty); \n```", "```cs\n\"Container (Dockerfile)\": {\n\"commandName\": \"Docker\",\n\"environmentVariables\": {\n\"ConnectionStrings__RabbitMQConnection\":\n        \"host=host.docker.internal:5672;username=guest;password=_myguest;\n        publisherConfirms=true;timeout=10\"\n} \n```", "```cs\npublic class Worker: BackgroundService\n{\n    private readonly ILogger<Worker> _logger;\n    private readonly IBus _bus;\n    public Worker(ILogger<Worker> logger, IBus bus)\n    {\n        _logger = logger;\n        _bus= bus;\n    }\n    protected override async Task ExecuteAsync(CancellationToken \n        stoppingToken)\n    {\n        var routeExtensionProposalSubscription = await _bus.PubSub.\n        SubscribeAsync<\n            RouteExtensionProposalsMessage>(\n               \"FakeDestination\",\n                m =>\n                {\n                    var toPrint=JsonSerializer.Serialize(m);\n                    _logger.LogInformation(\"Message received: {0}\", \n                                            toPrint);\n                },\n            stoppingToken);\n        await Task.Delay(Timeout.Infinite, stoppingToken);\n        routeExtensionProposalSubscription.Dispose();\n    }\n} \n```", "```cs\npublic class Worker : BackgroundService\n{\n    private readonly ILogger<Worker> _logger;\n    private readonly IBus _bus;\n    public Worker(ILogger<Worker> logger, IBus bus)\n {\n        _logger = logger;\n        _bus = bus;\n    }\n    protected override async Task ExecuteAsync(CancellationToken \n        stoppingToken)\n {\n        …\n        …\n        /* The code that defines all messages has been omitted */\n        var delayInterval = 5000;\n        await Task.Delay(delayInterval, stoppingToken);\n        await _bus.PubSub.PublishAsync<RouteRequestMessage>(request1);\n        await Task.Delay(delayInterval, stoppingToken);\n        await _bus.PubSub.PublishAsync<RouteOfferMessage>(offerMessage);\n        await Task.Delay(delayInterval, stoppingToken);\n        await _bus.PubSub.PublishAsync<RouteRequestMessage>(request2);\n        await Task.Delay(2*delayInterval, stoppingToken);\n        await _bus.PubSub.PublishAsync<\nRouteExtendedMessage>(extendedMessage);\n        await Task.Delay(Timeout.Infinite, stoppingToken);\n    } \n```", "```cs\n    docker tag fakesource:latest localhost:5000/fakesource:latest\n    docker push localhost:5000/fakesource:latest\n    docker tag fakedestination:latest localhost:5000/fakedestination:latest\n    docker push localhost:5000/fakedestination:latest\n    docker tag routesplanning:latest localhost:5000/routesplanning:latest\n    docker push localhost:5000/routesplanning:latest \n    ```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: fakesource\nnamespace: car-sharing\nlabels:\napp: car-sharing\nclassification: stub\nrole: fake-source\nspec:\nselector:\nmatchLabels:\napp: car-sharing\nrole: fake-source\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: car-sharing\nclassification: stub\nrole: fake-source\nspec:\ncontainers:\n- image: host.docker.internal:5000/fakesource:latest\nname: fakesource\nresources:\nrequests:\ncpu: 10m\nmemory: 10Mi\nenv:\n- name: ConnectionStrings__RabbitMQConnection\nvalue:\n  \"host=host.docker.internal:5672;username=guest;password=_myguest;\n              publisherConfirms=true;timeout=10\" \n```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: fakedestination\nnamespace: car-sharing\nlabels:\napp: car-sharing\nclassification: stub\nrole: fake-destination\nspec:\nselector:\nmatchLabels:\napp: car-sharing\nrole: fake-destination\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: car-sharing\nclassification: stub\nrole: fake-destination\nspec:\ncontainers:\n- image: host.docker.internal:5000/fakedestination:latest\nname: fakedestination\nresources:\nrequests:\ncpu: 10m\nmemory: 10Mi\nenv:\n- name: ConnectionStrings__RabbitMQConnection\nvalue: \"host=host.docker.internal:5672;username=guest;password=_myguest;publisherConfirms=true;timeout=10\" \n```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: routesplanning\nnamespace: car-sharing\nlabels:\napp: car-sharing\nclassification: worker\nrole: routes-planning\nspec:\nselector:\nmatchLabels:\napp: car-sharing\nrole: routes-planning\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: car-sharing\nclassification: worker\nrole: routes-planning\nspec:\ncontainers:\n- image: host.docker.internal:5000/routesplanning:latest\nname: routesplanning\nports:\n- containerPort: 8080\nresources:\nrequests:\ncpu: 10m\nmemory: 10Mi\nenv:\n- name: ASPNETCORE_HTTP_PORTS\nvalue: \"8080\"\n- name: ConnectionStrings__DefaultConnection\nvalue: \"Server=host.docker.internal;Database=RoutesPlanning;User \n                  Id=sa;Password=Passw0rd_;Trust Server \n                  Certificate=True;MultipleActiveResultSets=true\"\n- name: ConnectionStrings__RabbitMQConnection\nvalue: \"host=host.docker.internal:5672;username=guest;password=_\n                  myguest;publisherConfirms=true;timeout=10\"\n- name: Messages__SubscriptionIdPrefix\nvalue: \"routesPlanning\"\n- name: Topology__MaxDistanceKm\nvalue: \"50\"\n- name: Topology__MaxMatches\nvalue: \"5\"\n- name: Timing__HousekeepingIntervalHours\nvalue: \"48\"\n- name: Timing__HousekeepingDelayDays\nvalue: \"10\"\n- name: Timing__OutputEmptyDelayMS\nvalue: \"500\"\n- name: Timing__OutputBatchCount\nvalue: \"10\"\n- name: Timing__OutputRequeueDelayMin\nvalue: \"5\"\n- name: Timing__OutputCircuitBreakMin\nvalue: \"4\" \n```", "```cs\nkubectl create secret generic credentials --from-file=username.txt --from-file=password.txt \n```", "```cs\nkubectl get secret credentials -o yaml \n```", "```cs\nkubectl delete secret credentials \n```", "```cs\nkubectl create secret generic credentials --from-literal=username=devuser --from-literal=password='$dsd_weew1' \n```", "```cs\nvolumes:\n- name: credentialsvolume\n  secret:\nsecretName: credentials \n```", "```cs\n- name: USERNAME\nvalueFrom:\nsecretKeyRef:\nname: credentials\nkey: username\n- name: PASSWORD\nvalueFrom:\nsecretKeyRef:\nname: credentials\nkey: password \n```", "```cs\nkubectl create secret tls test-tls --key=\"tls.key\" --cert=\"tls.crt\" \n```", "```cs\nlivenessProbe/readinessProbe/startupProbe:\nexec:\ncommand:\n- cat\n- /tmp/healthy\ninitialDelaySeconds: 10\nperiodSeconds: 5\n... \n```", "```cs\nlivenessProbe/readinessProbe/startupProbe:\ntcpSocket:\nport: 8080\ninitialDelaySeconds: 10\nperiodSeconds: 5 \n```", "```cs\nlivenessProbe/readinessProbe/startupProbe:\nhttpGet:\npath: /healthz\nport: 8080\nhttpHeaders:\n-name: Custom-Health-Header\nvalue: Kubernetes-probe\ninitialDelaySeconds: 10\nperiodSeconds: 5 \n```", "```cs\napp.MapGet(\"/liveness\", () =>\n{\n    if (MainService.ErrorsCount < 6) return Results.Ok();\n    else return Results.InternalServerError();\n})\n.WithName(\"GetLiveness\"); \n```", "```cs\nlivenessProbe:\nhttpGet:\npath: /liveness\nport: 8080\ninitialDelaySeconds: 10\nperiodSeconds: 5 \n```", "```cs\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\nlabels:\napp.kubernetes.io/component: controller\nname: nginx-example\nannotations:\ningressclass.kubernetes.io/is-default-class: \"true\"\nspec:\ncontroller: k8s.io/ingress-nginx\nparameters: # optional parameters that depend on the installed controller \n```", "```cs\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: my-example-ingress\nnamespace: my-namespace\n# annotations used to configure the ingress\nspec:\ningressClassName: <IngressClass name> # Sometimes it is not needed\ntls: # HTTPS termination data\n...\nrules: # virtual hosting rules\n... \n```", "```cs\ntls:\n- hosts:\n- www.mydomain.com\nsecretName: my-certificate1\n- hosts:\n- my-subdomain.anotherdomain.com\nsecretName: my-certificate2 \n```", "```cs\nrules:\n- host: *.mydomain.com # leave this field empty to catch all domains\nhttp:\npaths:\n- path: /\npathType: Prefix # or Exact\nbackend:\nservice:\nname: my-service-name\nport:\nnumber: 80\n- host: my-subdomain.anotherdomain.com\n... \n```", "```cs\nminikube addons enable ingress \n```", "```cs\nkubectl apply -f IngressExampleDeployment.yaml\nkubectl apply -f IngressExampleDeployment2.yaml \n```", "```cs\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: example-ingress\nnamespace: basic-examples\nspec:\ningressClassName: nginx\nrules:\n- host:\nhttp:\npaths:\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: helloworldingress-service\nport:\nnumber: 8080\n- path: /v2\npathType: Prefix\nbackend:\nservice:\nname: helloworldingress2-service\nport:\nnumber: 8080 \n```", "```cs\nkubectl apply -f IngressConfiguration.yaml \n```", "```cs\nkubectl delete -f IngressConfiguration.yaml\nkubectl delete -f IngressExampleDeployment2.yaml\nkubectl delete -f IngressExampleDeployment.yaml \n```", "```cs\naz aks approuting enable --resource-group <ResourceGroupName> --name <ClusterName> \n```", "```cs\naz network dns zone create --resource-group <ResourceGroupName> --name <ZoneName> \n```", "```cs\nZONEID=$(az network dns zone show --resource-group <ResourceGroupName> --name <ZoneName> --query \"id\" --output tsv) \n```", "```cs\naz aks approuting zone add --resource-group <ResourceGroupName> --name <ClusterName> --ids=${ZONEID} --attach-zones \n```"]