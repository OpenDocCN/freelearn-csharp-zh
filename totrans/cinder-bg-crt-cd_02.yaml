- en: Chapter 2. Know What is Possible – The Cinder Toolset
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：了解可能实现的内容 – Cinder 工具集
- en: This chapter introduces various basic tasks that can be performed with Cinder
    through compiling, running, changing, and discussing some of the sample applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了可以通过编译、运行、更改和讨论一些示例应用程序来使用 Cinder 完成的各种基本任务。
- en: We have already tested our setup by compiling and running the QuickTime sample
    application. Now, we are going to see what is possible with Cinder by compiling
    other samples and discussing what is so special about them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过编译和运行 QuickTime 示例应用程序来测试了我们的设置。现在，我们将通过编译其他示例并讨论它们的特别之处来了解 Cinder 的可能性。
- en: We will go through samples that show most of the functionalities that will be
    discussed throughout this book. There will be many parts that are not clear and
    not easy to explain yet, but do not worry, we will try to understand them during
    the following chapters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将浏览展示本书将讨论的大部分功能的示例。将会有很多部分目前还不清楚且难以解释，但不用担心，我们将在接下来的章节中尝试理解它们。
- en: Here is a list of some of the examples that we are going to discuss. Go to your
    Cinder samples folder `(/Users/You/cinder/samples/` on Mac OS X and `C:\cinder\samples\`
    on Windows, if you have followed the tutorial in the previous chapter).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们将要讨论的示例列表。如果你遵循了上一章中的教程，请前往你的 Cinder 示例文件夹（Mac OS X 上为 `(/Users/You/cinder/samples/)`，Windows
    上为 `C:\cinder\samples\`）。
- en: BasicApp (`samples/basicApp`)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BasicApp (`samples/basicApp`)
- en: BezierPath (`samples/bezierPath`)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BezierPath (`samples/bezierPath`)
- en: CairoBasic (`samples/CairoBasic`)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CairoBasic (`samples/CairoBasic`)
- en: CaptureTest (`samples/captureTest`)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CaptureTest (`samples/captureTest`)
- en: EaseGallery (`samples/EaseGallery`)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EaseGallery (`samples/EaseGallery`)
- en: TextBox (`samples/TextBox`)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextBox (`samples/TextBox`)
- en: ArcballDemo (`samples/ArcballDemo`)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArcballDemo (`samples/ArcballDemo`)
- en: Earthquake (`samples/Earthquake`)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Earthquake (`samples/Earthquake`)
- en: AudioGenerative (`samples/AudioGenerative`)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AudioGenerative (`samples/AudioGenerative`)
- en: BasicApp
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BasicApp
- en: Go to your Cinder samples folder (`/Users/You/cinder/samples/` on MAC and `C:\cinder\samples\`
    on Windows, if you have followed the tutorial in the previous chapter).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前往你的 Cinder 示例文件夹（如果遵循了上一章中的教程，MAC 上为 `/Users/You/cinder/samples/`，Windows 上为
    `C:\cinder\samples\`）。
- en: There will be a folder with the name `BasicApp`. Take a look at what's there
    inside. If you are a Mac OS X user, open the project file at `xcode/basicApp.xcodeproj`.
    Windows users should open the project file from `vc10\basicApp.sln`. Compile and
    run the project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将会看到一个名为 `BasicApp` 的文件夹。看看里面有什么。如果你是 Mac OS X 用户，请打开位于 `xcode/basicApp.xcodeproj`
    的项目文件。Windows 用户应从 `vc10\basicApp.sln` 打开项目文件。编译并运行项目。
- en: '![BasicApp](img/9781849519564_02_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![BasicApp](img/9781849519564_02_01.jpg)'
- en: As we can see, a window with a black background appears. It seems that there
    is nothing there except pure blackness and an infinite void. But that's not true!
    Grab your mouse and try to fill the void by pointing and clicking-and-dragging
    anywhere on the black surface of the application window. An Orange line appears.
    Yes, it is a very basic drawing program that allows you to draw a continuous line.
    Line is one of the basic 2D geometric shapes that can be created with Cinder.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，一个黑色背景的窗口出现了。看起来那里除了纯粹的黑色和无限的虚空之外什么都没有。但事实并非如此！拿起你的鼠标，尝试通过在应用程序窗口的黑色表面上指向和点击-拖动来填充这个虚空。出现了一条橙色线条。是的，这是一个非常基础的绘图程序，允许你绘制连续的线条。线条是
    Cinder 可以创建的基本 2D 几何形状之一。
- en: 'Let''s try to change the color of the line. Close the window and click on the
    `basicApp.cpp` file located in the Source directory of the sample project found
    in the project navigator or project file tree browser of the chosen IDE. Navigate
    to a place in the code where you can see the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试改变线条的颜色。关闭窗口，点击位于所选 IDE 的项目导航器或项目文件树浏览器中示例项目源目录下的 `basicApp.cpp` 文件。导航到代码中可以查看以下内容：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the place where the actual drawing procedures of the program are defined.
    Go to the following lines of code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在程序中定义实际绘图过程的地点。查看以下代码行：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is the place where the color of the line can be changed. It is done by
    using a function called `glColor3f`. From the name of the function it is possible
    to tell that it uses OpenGL, changes color, and uses three `float` values for
    that. It is known that RGB color values consist of three components that are R
    (red), G (green), and B (blue). In this function, `0.0` is the minimal possible
    value for each component and `1.0` is the maximum.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是改变线条颜色的地方。这是通过使用名为`glColor3f`的函数来完成的。从函数的名称中可以推断出它使用OpenGL、改变颜色，并使用三个`float`值来完成。已知RGB颜色值由三个分量组成，分别是R（红色）、G（绿色）和B（蓝色）。在这个函数中，`0.0`是每个分量的最小可能值，而`1.0`是最大值。
- en: 'Let''s change the color of the line to red. We will need to set the red component
    of the color to maximum (`1.0`) and all others to minimum (`0.0`). So it will
    look like the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变线的颜色为红色。我们需要将颜色的红色分量设置为最大（`1.0`）并将所有其他分量设置为最小（`0.0`）。所以它看起来会像以下这样：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The reason why we use the *dot-zero-f* notation is that we want to tell the
    compiler that we are passing floating-point constants to the function. I will
    not dig into this here, as there are a lot of online resources about that on the
    Internet.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`*dot-zero-f*`记号的原因是我们想告诉编译器我们正在将浮点常数传递给函数。这里我不会深入探讨这个问题，因为互联网上有大量关于这个问题的在线资源。
- en: Now save, compile, run, and draw. Well done! You made your first custom line
    of code with Cinder! Let's continue with another example right away!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存、编译、运行并绘制。做得好！你已经用Cinder编写了第一条自定义代码！让我们立即继续另一个例子！
- en: BezierPath
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BezierPath
- en: Now, we are ready for a little bit more of a complicated example that will allow
    you to draw a continuous Bézier curve. Bézier curves are called so because of
    a french engineer Pierre Bézier who actually patented and made them popular by
    applying them in designs. Bézier curves are widely used in computer graphics,
    animations, and other fields. The concept of Bézier curves allows us to create
    parametric curved lines by using the Cartesian coordinate system and numbers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好了一个稍微复杂一点的例子，这个例子将允许你绘制一条连续的贝塞尔曲线。贝塞尔曲线之所以被称为贝塞尔曲线，是因为一位法国工程师皮埃尔·贝塞尔（Pierre
    Bézier），他实际上通过在设计中应用它们来申请专利并使它们流行起来。贝塞尔曲线在计算机图形、动画和其他领域得到广泛应用。贝塞尔曲线的概念使我们能够通过使用笛卡尔坐标系和数字来创建参数曲线。
- en: Go to your Cinder samples folder (`/Users/You/cinder/samples/` on Mac OS X and
    `C:\cinder\samples\` if you use Windows).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前往你的Cinder样本文件夹（在Mac OS X上为`/Users/You/cinder/samples/`，如果你使用Windows则为`C:\cinder\samples\`）。
- en: Go to the folder named `bezierPath`. Open `xcode/bezierPath.xcodeproj`, if you
    are a Mac OS X user (`vc10\bezierPath.sln`, if you are using Windows). Compile
    and run the project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前往名为`bezierPath`的文件夹。如果你是Mac OS X用户，请打开`xcode/bezierPath.xcodeproj`（如果你使用Windows，则为`vc10\bezierPath.sln`）。编译并运行项目。
- en: '![BezierPath](img/9781849519564_02_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![BezierPath](img/9781849519564_02_02.jpg)'
- en: Click-and-drag to place points on the surface of the window. You will start
    to see the line after the second click. By moving the mouse while you hold it
    down, you can control the curvature of the line segment that is being drawn. Play
    around a bit to get a better understanding about how Bézier curves work.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点击并拖动以在窗口表面上放置点。你将在第二次点击后开始看到线条。当你按下鼠标并移动它时，你可以控制正在绘制的线段的曲率。玩一会儿，以更好地理解贝塞尔曲线的工作原理。
- en: 'To add some extra geek-fun to the process, let''s change something as we did
    in the previous example. Close the application window and open the file `bezierPathApp.cpp`
    in the editor. Let''s assume that we don''t like the circles that are drawn on
    the screen to indicate the points that form the path—we want to draw rectangles
    instead. Navigate to a block of code that looks like the following code snippet:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给这个过程增加一些额外的技术乐趣，让我们改变一下之前例子中做的事情。关闭应用程序窗口，并在编辑器中打开文件`bezierPathApp.cpp`。让我们假设我们不喜欢屏幕上用来表示路径形成点的圆圈——我们想用矩形代替。导航到一个看起来像以下代码片段的代码块：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see in the comment in the preceding block, this block is responsible
    for drawing the control points. It sets the color of the next thing to be drawn
    (or circle in this case) with the help of the following line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个代码块中的注释所示，这个代码块负责绘制控制点。它通过以下行设置下一个要绘制的东西（或在这个例子中的圆圈）的颜色：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This uses a `for` loop to iterate through all the data in the `mPath` object.
    Circles are drawn with the help of the following line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用一个`for`循环来遍历`mPath`对象中的所有数据。圆圈是通过以下行绘制的：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Just by looking at the function name we can tell that it draws circles. `gl::`
    tells us that this function resides in the Cinder OpenGL namespace (Cinder uses
    namespaces a lot, and that makes its code more readable indeed), `draw` tells
    us that it draws something, `solid` means that this function draws something solid,
    and `circle` concludes this by making it clear that with the help of OpenGL a
    solid circle will be drawn.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只需通过查看函数名，我们就可以知道它绘制圆形。`gl::`告诉我们这个函数位于Cinder OpenGL命名空间中（Cinder确实使用了大量的命名空间，这使得其代码确实更易于阅读），`draw`告诉我们它绘制了某个东西，`solid`表示这个函数绘制了实心物体，而`circle`通过明确指出使用OpenGL将绘制一个实心圆来总结这一点。
- en: Two parameters are passed to the function. The first one is a point object that
    holds x and y coordinate values and the other one defines the radius of the circle
    being drawn in pixels.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 函数传递了两个参数。第一个是一个包含x和y坐标值的点对象，另一个定义了正在绘制的圆的半径（以像素为单位）。
- en: 'Let''s start by changing the radius of the circle. Change `2.5f` to `10.0f`
    so that it looks like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先改变圆的半径。将`2.5f`改为`10.0f`，使其看起来如下：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Build and run the project to see the change! Hmm, interesting! It is indeed!
    But let''s not celebrate yet, remember, we wanted to change the circle into a
    rectangle. We will use a function defined as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行项目以查看更改！嗯，很有趣！确实如此！但让我们不要过早庆祝，记住，我们想要将圆形改为矩形。我们将使用以下定义的函数：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As the name of the function tells us, this function draws a solid rectangle.
    We have to provide a parameter to the function though. Just one parameter is required
    (the other one is optional and set to `false` by default) and that has to be of
    the type `Rectf`. A `Rectf` consisting of four values. The first two values define
    the upper-right corner of the rectangle and the other two define the location
    of the bottom-right corner. It is a bit different in most drawing APIs, as usually
    this kind of object is defined by passing in the x and y coordinates of the top-left
    corner and the width and height of the rectangle. Not this time. So we have to
    pass something like the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如函数的名称所告诉我们的，这个函数绘制一个实心矩形。尽管如此，我们仍然需要向函数提供一个参数。只需要一个参数（另一个是可选的，默认设置为`false`），并且该参数必须是`Rectf`类型。一个`Rectf`由四个值组成。前两个值定义矩形的右上角，其他两个定义矩形的右下角位置。在大多数绘图API中，这种对象通常是通过传递矩形的左上角的x和y坐标以及矩形的宽度和高度来定义的。但这次不是这样。因此，我们必须传递类似以下内容的东西：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Where `x1` is the x coordinate of the top-left corner, `y1` is the y coordinate
    of the top-left corner, and `x2` and `y2` define where the bottom-right corner
    should be on the screen.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`x1`是左上角的x坐标，`y1`是左上角的y坐标，而`x2`和`y2`定义了屏幕上应该放置右下角的位置。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is just one of the five `Rectf` (or `RectT`) constructors in Cinder. If
    you want to see other ones, take a look in the Cinder online reference at [http://libcinder.org/docs/v0.8.4/classcinder_1_1_rect_t.html](http://libcinder.org/docs/v0.8.4/classcinder_1_1_rect_t.html).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Cinder中五个`Rectf`（或`RectT`）构造函数中的一个。如果你想查看其他几个，请查看Cinder在线参考[http://libcinder.org/docs/v0.8.4/classcinder_1_1_rect_t.html](http://libcinder.org/docs/v0.8.4/classcinder_1_1_rect_t.html)。
- en: 'By analyzing the point drawing function (`gl::drawSolidCircle( mPath.getPoint(
    p ), 10.0f );`), we get a piece of code that represents an object that holds the
    x and y coordinates of the current control point:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分析点绘制函数（`gl::drawSolidCircle( mPath.getPoint( p ), 10.0f );`），我们得到了一个表示当前控件点x和y坐标的对象的代码片段：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can access the x and y coordinates by writing:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过编写以下内容来访问x和y坐标：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 并且
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s construct our rectangle:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建我们的矩形：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![BezierPath](img/9781849519564_02_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![BezierPath](img/9781849519564_02_03.jpg)'
- en: 'The number constant `10.0f` in the preceding piece of code represents the width
    and height of the rectangle. As we want the width and height to be equal, we use
    equal values here. The following is the final code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前一段代码中的数字常量`10.0f`代表矩形的宽度和高度。由于我们希望宽度和高度相等，所以我们在这里使用相同的值。以下是将要使用的最终代码：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Build and run the project. What you will see is that rectangles are drawn next
    to the actual control points, not on them as it should be. Let''s fix that:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行项目。你将看到矩形被绘制在实际的控件点旁边，而不是像应该的那样绘制在它们上面。让我们修复这个问题：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, we changed all the `10.0f`' values to `5.0f` and subtracted
    `5.0f` from the first two parameters of the rectangle constructor. By doing that
    we moved the top-left corner of the rectangle to left by the half of its width
    and up by the half of its height (5 pixels), while keeping the same width and
    height (10 pixels).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们将所有的 `10.0f` 值改为 `5.0f`，并从矩形构造函数的前两个参数中减去 `5.0f`。通过这样做，我们将矩形的左上角向左移动了它宽度的一半，向上移动了它高度的一半（5个像素），同时保持了相同的宽度和高度（10个像素）。
- en: Build and run the project, and as you can see, now the rectangle is in its right
    place.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行项目，正如你所见，现在矩形已经到了正确的位置。
- en: Maybe this is a bit too complicated in the beginning, but the more you do these
    kind of adjustments the more you learn. We won't be making any more changes during
    the rest of this chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 也许一开始这有点复杂，但随着你做这类调整的次数越多，你学到的也就越多。在本章的剩余部分，我们不会再做任何更改。
- en: CairoBasic
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CairoBasic
- en: Have you ever dreamt of creating generative print artwork that could be printed
    in any size without losing quality? Meet Cairo.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你曾经梦想过创建可以无失真打印的生成式打印艺术品吗？来认识一下 Cairo。
- en: Cairo is a vector-graphics software library that allows you to draw all the
    crazy vector stuff that can be done in software, such as Illustrator, and it allows
    us to save it as a separate vector-graphics file. If you want to know more about
    Cairo itself, visit it website ([http://cairographics.org/](http://cairographics.org/)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Cairo 是一个矢量图形软件库，它允许你绘制所有可以在软件中完成的疯狂矢量图形，例如 Illustrator，它还允许我们将它保存为单独的矢量图形文件。如果你想了解更多关于
    Cairo 本身的信息，请访问它的网站 ([http://cairographics.org/](http://cairographics.org/))。
- en: Let's try this out! Search for the `CairoBasic` folder in the `samples` directory.
    Open `xcode/CairoBasic.xcodeproj` (`vc10\CairoBasic.sln`, if you're on Windows).
    Build and run the project. Nothing special seems to be there except a radial gradient
    background. But try to click on it! A flower. Click again! Random flowers. Try
    to fill the entire screen with them—you can smell the aroma, right?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试看！在 `samples` 目录中搜索 `CairoBasic` 文件夹。打开 `xcode/CairoBasic.xcodeproj`（如果你在
    Windows 上，则为 `vc10\CairoBasic.sln`）。构建并运行项目。看起来那里没有什么特别之处，除了一个径向渐变背景。但试着点击它！一朵花。再点击一次！随机出现的花朵。试着用它们填满整个屏幕——你能闻到花香吗？
- en: '![CairoBasic](img/9781849519564_02_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![CairoBasic](img/9781849519564_02_04.jpg)'
- en: 'Ok, that''s enough. Close the application window. So, what did just happen?
    To understand this open the file `CairoBasicApp.cpp` in your code editor. I won''t
    explain it yet, but it is possible to see that there is not very much code in
    it. Go to a block of code that looks like the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这就足够了。关闭应用程序窗口。那么，刚才发生了什么？为了理解这一点，请在你代码编辑器中打开文件 `CairoBasicApp.cpp`。我现在不会解释它，但你可以看到里面的代码并不多。转到一段看起来像以下的代码块：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is a method of the main application class that does something when we press
    a key on the keyboard. We can see that it is possible to make the application
    fullscreen, if we press *F*, and then there is something defined for letters *S*,
    *E*, *P*, and *D*—what is it? If you press one of these buttons, you save the
    ready image in a file, but the file format of this file will be a vector one.
    As you can see, if you press *S*, you get a SVG file, for *E* you get an EPS,
    for *P* you get a PS or PostScript file, and for *D* you get a PDF.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个主要应用类的方法，当我们在键盘上按下键时，它会执行一些操作。我们可以看到，如果我们按下 *F* 键，就可以使应用程序全屏显示，然后为字母 *S*、*E*、*P*
    和 *D* 定义了某些功能——那是什么呢？如果你按下一个这些按钮，你将保存准备好的图像到一个文件中，但这个文件的格式将是一个矢量格式。正如你所见，如果你按
    *S*，你会得到一个 SVG 文件，对于 *E* 你会得到一个 EPS 文件，对于 *P* 你会得到一个 PS 或 PostScript 文件，而对于 *D*
    你会得到一个 PDF 文件。
- en: 'Try it out! Build and run the application again, create your artwork, and press
    *S*, *E*, *P*, and *D* one after another. Then go to your home folder (`/Users/You/`
    on MAC and `C:\Users\You` on Windows) and you will see that there are four new
    files:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看！再次构建并运行应用程序，创建你的艺术品，然后依次按下 *S*、*E*、*P* 和 *D*。然后转到你的家目录（MAC 上为 `/Users/You/`，Windows
    上为 `C:\Users\You`），你会看到那里有四个新文件：
- en: '`CairoBasicShot.svg`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CairoBasicShot.svg`'
- en: '`CairoBasicShot.eps`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CairoBasicShot.eps`'
- en: '`CairoBasicShot.ps`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CairoBasicShot.ps`'
- en: '`CairoBasicShot.pdf`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CairoBasicShot.pdf`'
- en: Try to open one of these files with your favorite vector-graphics software.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用你喜欢的矢量图形软件打开这些文件之一。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can open the `CairoBasicShot.svg` file with your web browser as well. That
    means you do not need to convert vector-graphics to a format such as JPG or PNG,
    if you want to use it on the web—you can use it in the SVG vector file format
    right away.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以用你的网络浏览器打开`CairoBasicShot.svg`文件。这意味着如果你想在网络上使用它，你不需要将矢量图形转换为JPG或PNG等格式——你可以直接使用SVG矢量文件格式。
- en: Yes, it is true, you can zoom in to infinity and the details remain crisp and
    clear. That is the power of vector-graphics! Now you can post-process and print
    that 1 m x 1 m generative flower poster in 300 dpi without losing any detail.
    Cool, isn't it? And you can do so much more except just printing your artwork—you
    can use it as a base for physical objects to be made with a laser cutter or a
    CNC mill, for example.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这是真的，你可以无限放大，细节仍然清晰。这就是矢量图形的力量！现在你可以以300 dpi的分辨率后处理并打印出1米x 1米的生成花卉海报，而不会丢失任何细节。酷吧？而且你不仅可以打印你的艺术品——你还可以将其用作激光切割机或CNC铣床等物理对象的基础。
- en: CaptureTest
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CaptureTest
- en: In the first chapter, we saw that Cinder is capable of loading and playing back
    video files. So, how about using real-time footage? This sample application shows
    that it is possible to access video from a webcam that is connected to your computer.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们看到了Cinder能够加载和播放视频文件。那么，使用实时视频怎么样呢？这个示例应用程序表明，可以从连接到你的计算机的摄像头访问视频。
- en: Go search for a folder called `captureTest` (`CaptureBasic` in Cinder 0.8.5)
    in the `samples` directory. Open `xcode/captureTest.xcodeproj` (`vc10\captureTest.sln`,
    if you're using Windows). Build and run the project. Wait a bit, you should see
    the moving image from your camera.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 去搜索`samples`目录中名为`captureTest`（在Cinder 0.8.5中为`CaptureBasic`）的文件夹。打开`xcode/captureTest.xcodeproj`（如果你使用Windows，则为`vc10\captureTest.sln`）。构建并运行项目。稍等片刻，你应该能看到来自你摄像头的移动图像。
- en: '![CaptureTest](img/9781849519564_02_05.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![CaptureTest](img/9781849519564_02_05.jpg)'
- en: There is nothing much more about this sample, it just captures and displays
    the image of the webcam. You can use this real-time data in many different ways
    later.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个示例没有太多可以说的，它只是捕获并显示摄像头的图像。你可以在以后以许多不同的方式使用这些实时数据。
- en: EaseGallery
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EaseGallery
- en: As we are going to do some animation with Cinder, it would be nice to just see
    some of the possibilities Cinder provides us for that. Go on and open up the folder
    named `EaseGallery` in the `samples` directory. Open `xcode/EaseGallery.xcodeproj`
    (`vc10\EaseGallery.sln`, if you are a Windows user). Build and run the project.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们打算用Cinder做一些动画，所以看到Cinder为我们提供的动画可能性会很好。继续打开`samples`目录中名为`EaseGallery`的文件夹。打开`xcode/EaseGallery.xcodeproj`（如果你是Windows用户，则为`vc10\EaseGallery.sln`）。构建并运行项目。
- en: '![EaseGallery](img/9781849519564_02_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![EaseGallery](img/9781849519564_02_06.jpg)'
- en: If you are familiar with some kind of animation software or the TweenLite ActionScript
    library, you might remember a term called *easing*. This is what the EaseGallery
    example is about. Here you can see all the different animation easing algorithms
    that Cinder provides. We will dig a bit deeper into this later, but for now you
    just have to remember that there are such functions and you won't have to search
    for them in the darkest places of the Internet or implement them by yourself.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉某种动画软件或TweenLite ActionScript库，你可能记得一个术语叫做*缓动*。这就是EaseGallery示例的内容。在这里，你可以看到Cinder提供的所有不同的动画缓动算法。我们稍后会深入探讨这一点，但你现在只需要记住有这样的函数，你不需要在互联网的最黑暗角落里搜索它们，也不需要自己实现它们。
- en: TextBox
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TextBox
- en: Cinder has a very good text support—even for those whose native language alphabets
    consist of non-English alphabet characters.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Cinder对文本的支持非常好——即使是那些以非英语字母字符为母语的人。
- en: '![TextBox](img/9781849519564_02_07.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![TextBox](img/9781849519564_02_07.jpg)'
- en: Let's search for a folder named `TextBox` in the `samples` directory. Open `xcode/TextBox.xcodeproj`
    (`vc10\TextBox.sln`, if you are a Windows user). Build and run the project. Click
    anywhere in the window. When you click-and-drag, the text box changes its width.
    Even more, the text inside it wraps accordingly. A rectangle that represents the
    full width and height of the space the text occupies is being drawn behind it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`samples`目录中搜索一个名为`TextBox`的文件夹。打开`xcode/TextBox.xcodeproj`（如果你是Windows用户，则为`vc10\TextBox.sln`）。构建并运行项目。在窗口中点击任何地方。当你点击并拖动时，文本框的宽度会改变。甚至更棒的是，里面的文本会相应地换行。一个代表文本占据的空间的完整宽度和高度的矩形正在它后面绘制。
- en: 'Let''s close the window and try to make some changes (yes I lied, we are making
    changes again) to the application. Open `TextBoxApp.cpp` and find a block of code
    that looks like the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关闭窗口，尝试对应用程序进行一些更改（是的，我骗了你们，我们又要进行更改了）。打开“TextBoxApp.cpp”并找到一个看起来像以下内容的代码块：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Try to change the text within the quotes (don''t be afraid to use unicode characters):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更改引号内的文本（不要害怕使用 Unicode 字符）：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the file, and build and run the project again. If you used unicode characters,
    you will be positively surprised—all the characters are there!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，然后再次构建并运行项目。如果你使用了 Unicode 字符，你将会非常惊喜——所有的字符都在那里！
- en: ArcballDemo
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArcballDemo
- en: This sample demonstrates the basic 3D capabilities of Cinder. Go to the `ArcballDemo`
    directory in the `samples` folder and open `xcode/ArcballDemo.xcodeproj` (`vc10\ArcBallDemo.sln`,
    if you are using Windows).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例演示了 Cinder 的基本 3D 功能。前往“samples”文件夹中的“ArcballDemo”目录，并打开“xcode/ArcballDemo.xcodeproj”（如果你使用的是
    Windows，则为“vc10\ArcBallDemo.sln”）。
- en: '![ArcballDemo](img/9781849519564_02_08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![ArcballDemo](img/9781849519564_02_08.jpg)'
- en: A strange image appears within the application window. Don't worry, just click-and-drag.
    You will notice that it is a 3D cube. I won't explain other things that were meant
    to demonstrate through this demo, but the important thing to know is that rendering
    (of the default Open GL render mode) in Cinder is done by using Open GL and that
    means that you can render 2D images, as well as 3D space.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序窗口中会出现一个奇怪的图像。不用担心，只需点击并拖动。你会注意到它是一个 3D 立方体。我不会解释这个演示中旨在展示的其他内容，但重要的是要知道，Cinder
    中的渲染（默认的 Open GL 渲染模式）是通过使用 Open GL 完成的，这意味着你可以渲染 2D 图像，以及 3D 空间。
- en: Earthquake
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地震
- en: If you open up this example, you will see how much detail you can get with real-time
    3D graphics in Cinder. Find the `Earthquake` directory in the `samples` folder,
    open `xcode/Earthquake.xcodeproj` (`vc10\Earthquake.sln`, if you are using Windows).
    Build and run the application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开这个示例，你会看到在 Cinder 中使用实时 3D 图形可以获得多少细节。在“samples”文件夹中找到“Earthquake”目录，打开“xcode/Earthquake.xcodeproj”（如果你使用的是
    Windows，则为“vc10\Earthquake.sln”）。构建并运行应用程序。
- en: '![Earthquake](img/9781849519564_02_09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Earthquake](img/9781849519564_02_09.jpg)'
- en: What you should see is a 3D model of the earth and red cones with numbers on
    them. You can rotate it by moving your mouse and zooming in and out by using your
    mousewheel.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到的是一个地球的 3D 模型，上面有带数字的红锥体。你可以通过移动鼠标来旋转它，通过使用鼠标滚轮来放大和缩小。
- en: Real-time interactive 3D application, isn't it awesome?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实时交互式 3D 应用程序，这不是很酷吗？
- en: AudioGenerative
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AudioGenerative
- en: Welcome to the world of generative audio! This application sample will show
    you some possibilities of real-time audio-visual world.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到生成音频的世界！这个应用程序示例将向你展示实时音频-视觉世界的可能性。
- en: Find the folder named `AudioGenerative` in the Cinder `samples` directory. Open
    up the project file `xcode/AudioGenerative.xcodeproj` (`vc10\AudioGenerative.sln`,
    if you are using Windows). Build and run the application. Turn up the volume,
    but don't be afraid! It's just a sine wave. Try to move your mouse up and down
    above the application window—you will change the frequency of the sound by doing
    that.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Cinder 的“samples”目录中找到名为“AudioGenerative”的文件夹。打开项目文件“xcode/AudioGenerative.xcodeproj”（如果你使用的是
    Windows，则为“vc10\AudioGenerative.sln”）。构建并运行应用程序。调高音量，但不必害怕！它只是一个正弦波。尝试将鼠标在应用程序窗口上方上下移动——这样做会改变声音的频率。
- en: '![AudioGenerative](img/9781849519564_02_10.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![AudioGenerative](img/9781849519564_02_10.jpg)'
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So we went through just a couple of samples that are included in the Cinder
    samples package. There are more, and one of the best ways you can learn about
    Cinder is to go through all the examples, try to change some parts of them, and
    try to understand how that works.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们只浏览了 Cinder 样本包中包含的一些示例。还有很多，你可以通过浏览所有示例，尝试更改它们的一些部分，并尝试理解它是如何工作的，这是了解
    Cinder 的最佳方式之一。
- en: The discussion about the examples here was meant to be as an intro to the Cinder
    features that will be discussed in the next chapters. I recommend trying to compile
    and run all the samples so that you get as broad understanding about Cinder features
    as possible.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里关于示例的讨论旨在作为对下一章将要讨论的 Cinder 功能的介绍。我建议尝试编译并运行所有样本，以便尽可能广泛地了解 Cinder 功能。
