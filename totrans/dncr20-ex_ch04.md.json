["```cs\nIList&lt;Claim&gt; claimCollection = new List&lt;Claim&gt;\n{\n     new Claim(ClaimTypes.Name, \"Rishabh Verma\")\n     ,new Claim(ClaimTypes.Country, \"India\")\n     ,new Claim(ClaimTypes.Role, \"Author\")\n}\n\nClaimsIdentity identity = new ClaimsIdentity(claimCollection);\nClaimsPrincipal principal = new ClaimsPrincipal(identity);\n```", "```cs\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoicmlzaGFiaCIsInN1cm5hbWUiOiJ2ZXJtYSIsInNpdGUiOiJodHRwOi8vd3d3LnJpc2hhYmh2ZXJtYS5uZXQiLCJjb2F1dGhvciI6Ik5laGEifQ.Nxhxs024YUyPMVHlsQQWvZ3QN8oXAwL0OAzR6FN62_E\n```", "```cs\n[Authorize]\npublic class AccountController : Controller\n{\n    public ActionResult Login()\n    {\n    }\n\n    public ActionResult Logout()\n    {\n    }\n}\n```", "```cs\n[Authorize(Roles = \"Administrator,ITAdminsitrator\")]\npublic class UserAdministrationController : Controller\n{ \n    ….\n}\n```", "```cs\n[Authorize(Roles = \"ITAdminsitrator\")]\n[Authorize(Roles = \"Administrator\")]\npublic class UserAdministrationController : Controller\n{ \n    ….\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n    services.AddAuthorization(options =&gt;\n    {\n        options.AddPolicy(\"RequireAdminRole\", policy =&gt; \n        policy.RequireRole(\"Administrator\"));\n    });\n} \n\n[Authorize(Policy=\"RequireAdminRole\")]\npublic IActionResult HighPreviligeAction()\n{\n    return View();\n}\n```", "```cs\nservices.AddAuthorization(options =&gt;\n    {\n        options.AddPolicy(\"RequireClaim\", policy =&gt; \n        policy.RequireClaim(\"&lt;&lt;Claim Needed&gt;&gt;\"));\n    });\n```", "```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    if (env.IsDevelopment())\n    {            \n        app.UseDeveloperExceptionPage(); \n        app.UseBrowserLink();\n    }\n    else\n    {\n        app.UseExceptionHandler(\"/Home/Error\");\n    }\n\n    app.UseStaticFiles();\n    app.UseMvc(routes =&gt;\n    {\n        routes.MapRoute(name: \"default\",template: \" \n        {controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```", "```cs\npublic class Boy : IBoy\n{\n    //// Get married. First get the girl friend and then marry her.\n    public void GetMarried()\n    {\n        IGirl girl = this.GetGirl(); //// Returns null, if boy doesn't \n        have a girl-friend.\n        //// Marry with girl.\n    }\n}\n```", "```cs\npublic class Boy : IBoy\n{\n    //// Get married. The girl object passed can be boy's girlfriend or \n         any girl selected by his parents\n    public void GetMarried(IGirl girl)\n    {\n        //// Marry with girl.\n    }\n}\n```", "```cs\npublic class CoreClass : ICore\n{\n    public CoreClass()\n    {\n    }\n\n    //// Class Methods. Hidden for brevity\n}\n\npublic class DependencyClass : IDependency\n{\n    public DependencyClass()\n    {\n    }\n\n    //// Class methods. Hidden for brevity\n}\n```", "```cs\npublic class CoreClass : ICore\n{\n    private readonly IDependency dependency;\n\n    public CoreClass(IDependency dependency)\n    {\n        this.dependency = dependency;\n    }\n\n    //// Class Methods. Hidden for brevity\n}\n```", "```cs\npublic class CoreClass : ICore\n{\n    public CoreClass()\n    {\n    }\n\n    public IDependency Dependency {get;set;}\n    //// Class Methods. Hidden for brevity\n}\n```", "```cs\n// This method gets called by the runtime. Use this method to add services to the container. \npublic void ConfigureServices(IServiceCollection services)\n{\n    //// Code excluded for brevity.\n}\n```", "```cs\nservices.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();    \n//// Will inject HttpContextAccessor where IHttpContextAccessor is used  \n     but only one instance.\nservices.AddSingleton&lt;HttpContextAccessor&gt;(); \n\n//// Directly inject HttpContextAccessor as a singleton\nservices.AddSingleton&lt;Connection&gt;((serviceProvider) =&gt; this.CreateConnection(serviceProvider)); \n\n//// Singleton using factory method overload using service provider.   \n     Same overloads apply to transient and scoped as well.\nservices.AddTransient&lt;IUserRepository, UserRepository&gt;(); \n\n//// A new instance of UserRepository would be created and passed, \n     whenever it is requested.\nservices.AddScoped&lt;IScopedService, ScopedService&gt;(); \n//// Would be created and passed, once per request.\n```", "```cs\n public void Configure(IApplicationBuilder app) \n { \n    app.Run(async context =&gt; \n    { \n        await context.Response.WriteAsync(\".NET Core 2.0 By Example\"); \n    });\n }\n```", "```cs\npublic class MyFirstMiddleware\n{ \n    //// To hold the next middleware in the pipeline.\n    private readonly RequestDelegate next;\n\n    public MyFirstMiddleware(RequestDelegate next) \n    { \n        this.next = next; \n    }\n\n    public async Task Invoke(HttpContext httpContext) \n    { \n        // Execute the logic, that doesn't write to response.\n\n        // Call the next delegate in the pipeline\n        await this.next(httpContext); \n    }\n}\n```", "```cs\npublic static class MyFirstMiddlewareExtensions \n{ \n    public static IApplicationBuilder UseMyFirstMiddleware(this \n    IApplicationBuilder builder) \n    { \n        return builder.UseMiddleware&lt;MyFirstMiddlewareExtensions&gt;(); \n    }\n}\n```", "```cs\npublic Startup(IConfiguration configuration)\n{\n    Configuration = configuration;\n}\n\npublic IConfiguration Configuration { get; }\n```", "```cs\n    //\n    // Summary:\n    // Represents a set of key/value application configuration \n       properties.\n    [DefaultMember(\"Item\")]\n    public interface IConfiguration\n    {\n        //\n        // Summary:\n        // Gets or sets a configuration value. //\n        // Parameters:\n        // key:\n        // The configuration key. //\n        // Returns:\n        // The configuration value.\n        string this[string key] { get; set; }\n\n        //\n        // Summary:\n        // Gets the immediate descendant configuration sub-sections. //\n        // Returns:\n        // The configuration sub-sections.\n        IEnumerable&lt;IConfigurationSection&gt; GetChildren();\n\n        //\n        // Summary:\n        // Returns a Microsoft.Extensions.Primitives.IChangeToken that \n           can be used to observe\n        // when this configuration is reloaded. //\n        // Returns:\n        // A Microsoft.Extensions.Primitives.IChangeToken.\n        IChangeToken GetReloadToken();\n        //\n        // Summary:\n        // Gets a configuration sub-section with the specified key. //\n        // Parameters:\n        // key:\n        // The key of the configuration section. //\n        // Returns:\n        // The \n           Microsoft.Extensions.Configuration.IConfigurationSection. //\n        // Remarks:\n        // This method will never return null. If no matching sub-\n           section is found with\n        // the specified key, an empty \n           Microsoft.Extensions.Configuration.IConfigurationSection\n        // will be returned.\n        IConfigurationSection GetSection(string key);\n    }\n```", "```cs\n{\n\"Book\": \".NET Core 2.0 By Example\",\n  \"Genere\": {\n    \"Name\": \"Technical level 200\"\n  },\n  \"Authors\": [\n    {\n      \"Name\": \"Rishabh Verma\",\n      \"Experience\": \"10\"\n    },\n    {\n      \"Name\": \"Neha Shrivastava\",\n      \"Experience\": \"7\"\n    }\n  ]\n}\n```", "```cs\nvar book = Configuration[\"Book\"];\nvar genereName = Configuration[\"Genere:Name\"];\nvar author1Name = Configuration[\"Authors:0:Name\"];\nvar author1Experience = Configuration[\"Authors:0: Experience \"];\nvar author2Name = Configuration[\"Authors:1:Name\"];\nvar author2Experience = Configuration[\"Authors:1:Experience\"];\n```", "```cs\npublic Startup(IHostingEnvironment env)\n{\n    var builder = new ConfigurationBuilder()\n       .SetBasePath(env.ContentRootPath)\n       .AddJsonFile(\"config.json\")\n       .AddJsonFile($\"config.{env.EnvironmentName}.json\");\n       Configuration = builder.Build();\n}\n```", "```cs\npublic class BookDetails\n{\n     public string Book { get; set; }\n     public Genere Genere { get; set; }\n     public Author[] Authors { get; set; }\n }\n\n public class Genere\n {\n     public string Name { get; set; }\n }\n\n public class Author\n {\n     public string Name { get; set; }\n     public string Experience { get; set; }\n }\n```", "```cs\nservices.Configure&lt;BookDetails&gt;(Configuration);\n```", "```cs\nprivate readonly BookDetails details;\n\npublic HomeController(IOptions&lt;BookDetails&gt; options)\n{\n     this.details = options.Value;\n}\n```", "```cs\nservices.Configure&lt;BookDetails&gt;(Configuration);\nservices.Configure&lt;BookDetails&gt;(opt =&gt; {opt.Name = “Roslyn via C#”;});\n```", "```cs\npublic static void Main(string[] args)\n{\n    BuildWebHost(args).Run();\n}\n\npublic static IWebHost BuildWebHost(string[] args) =&gt;\n         WebHost.CreateDefaultBuilder(args)\n         .UseStartup&lt;Startup&gt;()\n         .Build();\n}\n```", "```cs\n&lt;DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" /&gt;\n```", "```cs\n&lt;ItemGroup&gt;\n    &lt;DotNetCliToolReference \n    Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" \n    Version=\"2.0.0\" /&gt;\n    &lt;DotNetCliToolReference \n    Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" \n    /&gt;\n&lt;/ItemGroup&gt;\n```", "```cs\npublic Startup(IHostingEnvironment env)\n{\n    var builder = new ConfigurationBuilder()\n       .SetBasePath(env.ContentRootPath)\n       .AddJsonFile(\"config.json\")\n       .AddJsonFile($\"config.{env.EnvironmentName}.json\");\n\n       Configuration = builder.Build();\n}\n```", "```cs\nvar secretValue = Configuration[\"SecretKey\"];\n```", "```cs\n  public static IWebHost BuildWebHost(string[] args) =&gt;\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup&lt;Startup&gt;()\n                .ConfigureLogging((hostingContext, logging) =&gt; { logging.AddConfiguration(hostingContext. \n                 Configuration.GetSection(\"Logging\"));\n logging.AddConsole();\n logging.AddDebug();\n            })\n                .Build();\n```", "```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole();\n    loggerFactory.AddDebug();\n    //// Other methods omitted for brevity.\n}\n```", "```cs\npublic class HomeController: Controller \n{\n    private readonly ILogger&lt;HomeController&gt; logger;\n\n    public HomeController(ILogger&lt;HomeController&gt; logger)\n    {\n         this.logger = logger;\n    }\n\n    public IActionResult Index()\n    {\n        logger.LogInformation($\"Calling {nameof(this.Index)}\");\n        return View();\n    }\n}\n```", "```cs\n    //\n    // Summary:\n    // Defines logging severity levels.\n    public enum LogLevel\n    {\n        //\n        // Summary:\n        // Logs that contain the most detailed messages. These messages \n           may contain sensitive\n        // application data. These messages are disabled by default and \n           should never be\n        // enabled in a production environment.\n        Trace = 0,\n        //\n        // Summary:\n        // Logs that are used for interactive investigation during \n           development. These logs\n        // should primarily contain information useful for debugging \n           and have no long-term\n        // value.\n        Debug = 1,\n        //\n        // Summary:\n        // Logs that track the general flow of the application. These \n           logs should have long-term\n        // value.\n        Information = 2,\n        //\n        // Summary:\n        // Logs that highlight an abnormal or unexpected event in the \n           application flow,\n        // but do not otherwise cause the application execution to \n           stop.\n        Warning = 3,\n        //\n        // Summary:\n        // Logs that highlight when the current flow of execution is \n           stopped due to a failure.\n        // These should indicate a failure in the current activity, not \n           an application-wide\n        // failure.\n        Error = 4,\n        //\n        // Summary:\n        // Logs that describe an unrecoverable application or system \n           crash, or a catastrophic\n        // failure that requires immediate attention.\n        Critical = 5,\n        //\n        // Summary:\n        // Not used for writing log messages. Specifies that a logging \n           category should not\n        // write any messages.\n        None = 6\n    }\n```", "```cs\n.ConfigureLogging(logging =&gt; logging.SetMinimumLevel(LogLevel.Warning))\n```", "```cs\n using (this.logger.BeginScope($\"Logging scope demo\"))\n {\n      this.logger.LogInformation($\"Calling {nameof(this.Index)}\");\n      return View();\n }\n```", "```cs\n{\n  \"Logging\": {\n    \"IncludeScopes\": false,\n    \"Debug\": {\n      \"LogLevel\": {\n        \"Default\": \"Information\"\n      }\n    },\n    \"Console\": {\n      \"LogLevel\": {       \n        \"Microsoft.AspNetCore.Mvc.Razor\": \"Error\",\n        \"Default\": \"Information\"\n      }\n    },\n    \"LogLevel\": {\n      \"Default\": \"Debug\"\n    }\n  }\n}\n```"]