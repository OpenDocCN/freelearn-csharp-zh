- en: Planning the Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you were given a good overview and historical background
    of RPG, and hopefully, it also sparked your imagination. In this chapter, we will
    start to lay the groundwork for our own RPG. We will start by defining the story
    of our game, as well as the plot and the quests that will make the game playable.
    We'll look at the assets that will be required to create our environment, characters,
    and finally, we'll design the levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a breakdown of the topics we will be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Building our RPG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The story of the Zazar dynasty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asset inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Level design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The awakening
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the main menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awaken your creativity and let your imagination go wild!
  prefs: []
  type: TYPE_NORMAL
- en: Building our RPG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed, building a role-playing game is no small task, but once you start
    down the path, you will come to the realization that it is not as difficult as
    it seems initially. The idea is to get started, and as you put your ideas down
    on paper and start the design process, more and more ideas will come into perspective.
  prefs: []
  type: TYPE_NORMAL
- en: As we have learned, there are some key elements that we will need to establish
    for our RPG. Let's recall them, and maybe even fine-tune them as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our game''s key elements are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Story and setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploration and quest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Items and inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character action and abilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experience and levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combat system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The story of the Zazar dynasty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The premise of most role-playing games tasks the player with saving the world.
    There are often twists and turns as the story progresses, such as the surprise
    appearance of an estranged relative, or enemies who become friends and vice versa.
    We will create our story and game based on such a story.
  prefs: []
  type: TYPE_NORMAL
- en: Backstory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once upon a time, there was a great kingdom, ruled by the great King Zazar.
    The ruler of the kingdom was a generous lord to his subjects. The kingdom under
    the rule of Zazar was peaceful and prosperous; however, over time, internal family
    rivalries and struggles caused cracks in the strong bond that kept the kingdom
    intact.
  prefs: []
  type: TYPE_NORMAL
- en: Due to mysterious events, the great king decided to move his family away from
    the kingdom and trust his son—who will become the player character—with one of
    the wise elders that he trusted. The kingdom was never the same... Until now!
  prefs: []
  type: TYPE_NORMAL
- en: Exploration and quests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have defined the setting for our game, we can start working on developing
    the story further and breaking it down into different levels. To keep things simple,
    we will concentrate on basic quests and level design; the important point is to
    understand the concepts and apply them to your own story.
  prefs: []
  type: TYPE_NORMAL
- en: Awakening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The game will start by immersing the player in the environment, where our hero
    has been raised and trained by the elder, who was entrusted by the great King
    Zazar.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main objectives of this level will be for the player to engage with the
    environment and learn how to interact with their surroundings, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective(s)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce the player to the user interface
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Move the character
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with non-player characters
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the environment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outcome**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Player gets points for completing in-game tasks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Player gets his first weapon
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Player learns how to interact with the surrounding world
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General sketch**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The village
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our hero starts his journey of self-fulfillment. He will be traveling in the
    outskirts of the kingdom and arriving at one of the villages that has been terrorized
    by the thugs and mercenaries hired by the evil overlord, Shaquil.
  prefs: []
  type: TYPE_NORMAL
- en: Our hero, himself unaware of who he is and why he is on this journey, will find
    out about the austerity that has been going on since the departure of his father.
    This will mostly be accomplished through interaction with the village peasants.
  prefs: []
  type: TYPE_NORMAL
- en: The primary objective of this level will be for the player to learn social skills,
    engage with the villagers, and create relationships.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rumour has it that there are spies in the village, and that everyone is suspicious
    of each other, and the unity that once was the strength of the village is crumbling.
    Our character''s objectives are now as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective**(**s**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the village peasants to acquire social skills
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create trust between the hero and the villagers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Seek out who the spy is among the villagers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outcome**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved social skills
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Relationships that can be tapped into at a later point
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic combat skills learned
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General sketch**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Broken forest – the horizon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our hero will be traveling along his quest into the horizon. The horizon is
    the initial exposure to the main kingdom's borders, where the main castle and
    inner city is within reach.
  prefs: []
  type: TYPE_NORMAL
- en: It is basically a vast, lush forest that protects the main domain of the kingdom
    from outside threats. It also has a few secrets and surprises for the uninitiated
    passerby. The forest is where the barbarians reside and cause havoc in the surrounding
    areas. What is not apparent at the time is the connection between the barbarians
    and the current overlord of the kingdom.
  prefs: []
  type: TYPE_NORMAL
- en: As far as the hero is concerned, he or she will need to be able to safely pass
    through the forest.
  prefs: []
  type: TYPE_NORMAL
- en: The horizon will have several unexpected surprises for the hero. The outcome
    of the quest will heavily rely on the way the player interacts with the surrounding
    environment, as well as with the non-player characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, our hero''s objectives are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective**(**s**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass through the forest without getting killed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outcome**(**s**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hero can be captured by the barbarians
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hero could face other life-threatening scenarios and/or non-player characters
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hero successfully passes through the forest and is ready to take on the next
    challenge
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hero establishes new relationships to enhance his skills and abilities
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General sketch**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The kingdom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The hero has progressed through the previous quests and is now ready to take
    down the evil overlord and retake what is inherently his. Our hero has progressed
    and acquired a vast amount of skills and abilities throughout the quests, and
    now he will undertake one of the most difficult and epic battles in the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our hero is surprised by the overlord''s vast army. He will need to figure
    out a way to pass through the city and into the main castle to defeat the enemy.
    His objectives are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective**(**s**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kill the overlord and retake his kingdom
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outcome**(**s**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call to action the relationships he has established over the gameplay
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use his negotiation skills and wisdom to trick more powerful enemies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Destroy the enemy
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General sketch**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ah, the pure joy of defeating your nemesis and taking over your kingdom!
  prefs: []
  type: TYPE_NORMAL
- en: Asset inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now is a good time to discuss some of the basic assets that will be required
    for the development of our RPG. Our game assets are defined by the scenes we describe
    for our game. For our RPG, we have described four unique scenes. Each one has
    been described in enough detail for us to get an idea of the types of assets we
    will require.
  prefs: []
  type: TYPE_NORMAL
- en: Environment assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The general theme of our game will be medieval. There are several ways to go
    about this. The first and preferred way is to either create the environment models
    by yourself or a with a teammate; the second is to find a freely available model
    that has been created by a third party; and the third is to purchase 3D models
    created by a third party.
  prefs: []
  type: TYPE_NORMAL
- en: The **Asset Store** is a great place for you to start hunting for great content
    if you do not have the ability to create your own 3D models. You can use the Asset
    Store to search for medieval-themed environments that can be used for the game.
  prefs: []
  type: TYPE_NORMAL
- en: One of my favorites is called *Medieval Environment Pack*. You might want to
    consider searching for a few more that are to your liking and taste.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some things to consider as part of your environment assets:'
  prefs: []
  type: TYPE_NORMAL
- en: Buildings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Props and add-ons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Banners
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Barrels
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Boxes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wagons
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rocks / plants / trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Particle assets:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fire
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fog
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smoke
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Water
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Skyboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list is just a starting point, but it is a starting point for your environment
    assets.
  prefs: []
  type: TYPE_NORMAL
- en: I am using the following environment assets as a demonstration for the book,
    but you are more than welcome to choose any other package you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Medieval Environment Pack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a great package if you are serious about creating an RPG with good quality
    graphics. It is very extensive and ideal to meet your environmental needs for
    medieval or fantasy settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The package includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 70 modular buildings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 180 add-ons – stalls, barrels, carts, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 25 rock formations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Particles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a bit pricey, but it is worth it if you lack the resources for a 3D modeler.
    The package is highly recommended. This is great if you are making a desktop or
    console RPG, but it is not suitable for mobile games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Medieval Environment asset
  prefs: []
  type: TYPE_NORMAL
- en: Terrain Toolkit 2017
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This toolkit is a great utility for terrain generation within Unity. It is
    from Unity Summer of Code 2009 and is made by Sándor Moldán. The toolkit has been
    upgraded to be usable in Unity 5.x and above. It is an enhancement to the original
    tool (V1.0.2). If you have been following along with the first edition of the
    book, you will also notice great enhancement in the actual user interface of the
    tool. The following screenshot shows the Terrain Toolkit asset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Terrain Toolkit asset
  prefs: []
  type: TYPE_NORMAL
- en: Nature Starter Kit 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Nature Starter Kit 2 is a great asset that contains trees and bushes compatible
    with the built-in tree generator. This enables you to generate all kinds of new
    variations of your own! The package contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Six bushes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ground textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grass textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skybox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot gives you an idea of how the natural environment of
    your game will look if you use this asset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Nature Starter Kit 2 asset
  prefs: []
  type: TYPE_NORMAL
- en: Character assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RPGs are heavily based on characters. Therefore, the next important game asset
    will be the characters themselves. The models that you need to define for your
    game are again heavily related to your storyline and setting. The Asset Store
    provides a wealth of character models that you can download and use as a proof
    of concept for your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our game, the following are the characters that are required:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Humans: These will represent the hero as well as the villagers and other non-player
    character types of human'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Barbarians: These are some of the characters that the hero must confront during
    the gameplay'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Orcs: These are animals in their own right'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can either get the free models or the paid models to represent your characters.
    We will get more into the character assets in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: I have been working with a creator named Polygon for the specific models I will
    be using for the demonstration in the book. These are great characters to get
    you started. You can check them out in the Asset Store.
  prefs: []
  type: TYPE_NORMAL
- en: Barbarians
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Barbarians package comes with 15 unique textures. Each model goes from
    1,700 to 3,000 triangles (no gear to full gear), with over 20 animations. They
    are Mecanim-ready and include Face Rig. You can see some examples of barbarians
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Barbarians asset
  prefs: []
  type: TYPE_NORMAL
- en: Orcs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Orcs package comes with unique models, accessories, armor, and weapons.
    Each model goes from 1,600 to 2,500 triangles (no gear to full gear) and includes
    28 animations. It is also ready for Mecanim. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Orc assets
  prefs: []
  type: TYPE_NORMAL
- en: Villagers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This package provides a crowd of medieval humans ready to use. Great for fillers
    and non-player characters. They can be used to integrate inside the story as the
    hero progresses. Their total poly-count goes from 1,500 to 2,000 (no gear to full
    gear), and they are fully rigged characters with 20 animations. See the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Villagers asset
  prefs: []
  type: TYPE_NORMAL
- en: Free Assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'And finally, you have the ability to get a great amount of free assets from
    the Asset Store. Some of them are really of good quality. However, chances are
    that if you are looking for a specific asset type, you will need to spend a little
    bit of money:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Top free packages
  prefs: []
  type: TYPE_NORMAL
- en: Level design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our game story on paper and have an idea of what we want to
    achieve, it is time to apply our skills to actually making it happen.
  prefs: []
  type: TYPE_NORMAL
- en: Since this book targets an audience that is already familiar with the basics
    of Unity, we will not cover the fundamental aspects of the software.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to launch Unity. I am using the 64-bit edition of Unity
    2017.x Pro. You do not need to have the Pro version of Unity to complete the project
    in this book. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go ahead and select a location and a name you desire for your project, and
    click the Create project button. At this point, Unity will create an empty project
    for you and display the Unity IDE. It should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: New project
  prefs: []
  type: TYPE_NORMAL
- en: For better quality of images, download the graphics bundle from [https://www.packtpub.com/sites/default/files/downloads/BuildinganRPGwithUnity2018_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/BuildinganRPGwithUnity2018_ColorImages.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: Your view might be a bit different, depending on how you have configured your
    Unity layout. If this is the first time you have launched Unity, you will need
    to get up to speed with the basics, since we will not be covering them in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: If you have not used Unity before, you should get familiar with the IDE
    before you continue reading.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the stage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we would like to do is to create a landscape for our first level,
    which is called *Awakening*.
  prefs: []
  type: TYPE_NORMAL
- en: Unity itself has some good tools for creating terrains, but truth be told, it
    is not a practical means of achieving nice, beautiful terrains for the game. For
    this purpose, we will use another set of tools, called Terrain Toolkit 2009, which
    was developed by *Sánder* as part of the *Unity Summer of Code 2009*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The toolkit is available on the Asset Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.assetstore.unity3d.com/en/#!/content/83490](https://www.assetstore.unity3d.com/en/#!/content/83490).'
  prefs: []
  type: TYPE_NORMAL
- en: I have also included the library as part of the download provided by this book,
    just in case the original link gets deprecated in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you download the asset from the Asset Store, you will need to import it
    into the project. Simply click the Import button, if you have not done so already,
    to start importing the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, let''s take a moment and go back into Unity and actually create
    a `Terrain` GameObject, and see the built-in tool for terrain modification. To
    create a terrain, you will need to select the following from the main menu: GameObject | 3D
    Object | Terrain. This will create a default terrain in your scene, which should
    look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Demo of terrain
  prefs: []
  type: TYPE_NORMAL
- en: When you select the *Terrain GameObject* in the Hierarchy window, you will see
    the *Inspector *window displaying the properties and components that are accessible
    through the designer for the *Terrain GameObject*. As you can see, there are a
    lot of attributes that you can modify, and by doing so create a nice-looking terrain.
    When you start playing around with the terrain tool, you will soon realize that
    it is not practical for large terrain models, nor for natural-looking terrains.
  prefs: []
  type: TYPE_NORMAL
- en: To enhance our terrain generation, we will use the **Terrain Toolkit 2017**.
    You will need to import the package into the project if you have not already done
    so. If you have not already downloaded the package from the Asset Store, go ahead
    and download it, and then import it into the project.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes when you import older Unity assets, Unity will prompt you to automatically
    upgrade to the latest version. This is usually OK, so just accept it and let Unity
    do what it needs to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Unity imports Terrain Toolkit 2017, you will notice a new folder under
    your Project window called TerrainToolkit. All the code will be listed under the
    folder if you want to make any modifications to it. There is also a `readme` file,
    which you can use to get started. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also notice that a new **Unity Editor** feature has been added under
    the Component Menu called Terrain | Terrain Toolkit. All you need to do to apply
    the Terrain Toolkit to your existing terrain is to select that option, and it
    will automatically attach the correct component to the Terrain GameObject for
    you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you have used the older version of the Terrain Toolkit, you will immediately
    see a great improvement on the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice a few options that are now available to you through the Terrain
    Toolkit for the generation of more natural and realistic terrains. You should
    take the time to get familiar with each attribute and play around with the values,
    to get an idea of how they affect the terrain generation algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new toolkit has predefined Terrain Models that you can use for a quick
    start. Here is a list of available models:'
  prefs: []
  type: TYPE_NORMAL
- en: Desert Mesa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Desert Sands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sea Shore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snowy Mounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pampa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path of the Flesh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will let you play around with them and see the results for yourself. One hint
    would be to adjust your `Terrain` attributes a bit from the original values to
    get better visuals.
  prefs: []
  type: TYPE_NORMAL
- en: Terrain toolkit in a nutshell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of pre-defined generators in the toolkit for the creation
    of the terrain. They are Voronoi, Fractal, and Perlin. The following is a brief
    explanation of each:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Voronoi**: This creates an arbitrary tallness delineate of a progression
    of mountain-like pinnacles utilizing a Voronoi outline, and applies it to the
    territory protest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fractal**: This produces an arbitrary stature outline of the cloud or plasma
    fractal calculation, and applies it to the landscape protest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Perlin**: This generates an irregular tallness delineate Perlin clamor, and
    applies it to the territory protest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are also two filter types that can be applied after the generation of
    the terrain. These are the **Smooth** and **Normalize** filters, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Smooth**: This is a channel which applies smoothing to the territory protest
    more than once finished various emphases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Normalize**: This is a channel which standardizes the territory protest by
    setting the most astounding point in the present landscape stature guide to the
    greatest, and the least point to the base. Every single other point is added between
    the most extreme and the least.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to apply some erosion to the terrain. There are three built-in
    erosion types in the toolkit: **Thermal Erosion**, **Hydraulic Erosion**, and
    **Tidal Erosion**. You can apply these erosion types either by a brush or by the
    actual erosion filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Thermal Erosion**: This expels material from territories with a slant more
    noteworthy than the base slant, and stores it additionally down the incline. This
    tends to smooth and straighten slants in the landscape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hydraulic Erosion**: This expels material from zones with an incline less
    than the most extreme slant and stores it additionally down the slant. This has
    a tendency to steepen slants in the territory and further smooth and straighten
    different zones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: There are three different Hydraulic Erosion types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tidal Erosion**: This applies smoothing at the picked ocean level, with the
    exception of territories where the incline surpasses a given esteem. This reenacts
    the erosive activity of waves around a shoreline and makes shorelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final step is to apply texturing. This will give our terrain a more realistic
    look and feel at runtime. The toolkit provides procedural terrain texturing, which
    automatically textures the terrain object using the slope and altitude attributes
    of the terrain to determine which texture will be used.
  prefs: []
  type: TYPE_NORMAL
- en: The Awakening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The setting and the atmosphere of our first level will be in a secluded area
    within the forest. We will now generate our terrain using the Terrain Toolkit
    discussed in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new scene and call it Awakening. By default, the scene will just
    have a camera and a directional light GameObject defined.
  prefs: []
  type: TYPE_NORMAL
- en: You can save your scenes and assets within the Asset folder without much thought.
    However, it is usually a good idea to have some file structure in place to make
    organization of your assets easier as well as finding them faster.
  prefs: []
  type: TYPE_NORMAL
- en: A preferred folder structure will include scenes, prefabs, textures, audio,
    and models. Within each folder, you can then create subfolders and so forth, for
    your own organizational purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to add a Terrain GameObject to the scene. Go ahead and select
    GameObject | 3D Object | Terrain. This will place a Terrain GameObject in the
    scene. Double-click on the Terrain GameObject in the Hierarchy window to make
    it center of the Scene View.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `Terrain` object will be very large, so let''s go ahead and
    make some adjustments before we do anything else. The following screenshot shows
    how to access the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To make the adjustments to the terrain size, select the Settings icon, as indicated
    in the preceding screenshot. This will display the basic attributes of the terrain.
    As you can see, there are a bunch of properties that can be adjusted to make it
    behave to your liking. We are mostly concerned with the size of the terrain and
    also the maximum height that the terrain can rise to. Therefore, scroll down until
    you get to the Resolution section.
  prefs: []
  type: TYPE_NORMAL
- en: Change the Terrain Width and Terrain Length to 100\. Change the Terrain Height
    to 333\. This will change the dimension so that we can handle our scene easily.
    Our original terrain size was very large and it would have taken us a long time
    to design it.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a good size terrain. Assuming you have already imported the Terrain
    Toolkit, go ahead and select Component | Terrain | Terrain Toolkit from the main
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways we can approach this. Since the new toolkit has given us
    some prebuilt settings for terrain models, we can use that to quickly generate
    the random terrain, or we can use the default method of generating our own custom
    terrains.
  prefs: []
  type: TYPE_NORMAL
- en: Using the terrain model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Select the Terrain GameObject and, using the Inspector window, go to the Terrain
    Toolkit and select the Terrain Models tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have six pre-configured terrain models that we can use. Let's
    try out the SNOWY MOUNTS model. Go ahead and click on it, and Unity will start
    generating the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what my terrain model looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It looks pretty cool. Now let's try creating a terrain using custom functions.
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the toolkit to generate a random terrain, I have used the Fractal terrain
    generator function with a Delta of `0.4` and Blend of `0.445`. This will generate
    a nice-looking terrain with a good proportion of hills and valleys. Since the
    terrain is randomly generated, yours may not look exactly like mine, but it should
    look something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I usually apply the Smooth filter after my terrain generation to make things
    look even nicer.
  prefs: []
  type: TYPE_NORMAL
- en: You will see the difference the filter makes once it has been applied. Let's
    go ahead and now apply some textures to make it nice. Selecting the Texture tab
    within the Terrain Toolkit, you will have several options. We would like to apply
    at least two textures to give our terrain a more realistic look. You can apply
    up to four textures if you choose to! Click the Add Texture button twice to create
    the texture placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: Since I used the Terrain Model to generate the original terrain and then applied
    the toolkit with the settings mentioned, the default textures for the model are
    in place. You can update them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Textures are very important in graphics, and especially games. The better and
    higher resolution your textures, the better your scene will look. However, this
    is a catch-22\. Usually, higher resolution textures take up more resources. So
    you have to find the right balance for your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now is a good time to stop and discuss one of the main advantages of Unity:
    the **Asset Store**. The Asset Store is a great online community where Unity developers
    can either acquire assets to be used in their games or develop assets that will
    be used by other developers. You can get free assets from the Asset Store, or
    you can get better quality ones for a little bit of money.'
  prefs: []
  type: TYPE_NORMAL
- en: For our game, I will be using some free assets and some paid assets. If you
    want to use the same assets that I am using in the book, you will need to purchase
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Sample of generated terrain
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing I like to do is locate a position on the terrain where I will
    create the scene objects necessary to play out the level. For this particular
    scene, I want to use an asset that represents an old cottage in the woods, where
    the hero will awaken at the beginning of the game. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a model from Medieval Environment Pack. The model does not have any
    interior. This is OK, since I am not planning to have any gameplay inside the
    structure. It will be used as an eye-catching object in the scene and a point
    of reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the Terrain tool to level the terrain before placing the object
    into the scene. If you notice, our terrain does not have any level areas where
    we can properly place the shack. We will need to use the terrain object''s terrain
    components to make some more changes, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Again, select the Terrain GameObject in the *Hierarchy *view and use the *Inspector*
    window to select the Paint Height tab, shown as (1) in the preceding screenshot,
    to enable the feature.
  prefs: []
  type: TYPE_NORMAL
- en: This is a great feature to sample the terrain height at a particular point,
    and apply the same height using the brush to any other region. This will level
    the terrain to the same height that was sampled. It is a great way to quickly
    level a region and place your items, if those items need to be on level ground,
    like a house or a shelter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to place some tree models on our terrain to create the forest
    look and feel. To achieve this, we will need to select the terrain object in the
    scene and use the Inspector Window to select the Tree Placement feature. You will
    then need to select the Edit Trees... button to add a tree model, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Inspector window, you will need to select the Tree Placement tab,
    select the Edit Tree... Add Tree feature, locate a tree prefab and you are done!
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the settings and change the brush size to meet your needs. In
    my case, I have changed it to 40\. I have left the rest of the attributes at the
    default value, but you can change them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you move your mouse in the Scene view, you will notice a brush like
    highlight. This is where the trees will be placed during design time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays how my scene looks after I have made some
    of the adjustments to the placement of my trees and the building:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next step of the process is to fill the level with other environmental assets,
    such as rocks, vegetation, and other props, to make the level come to life. The
    idea here is to make it interesting and at the same time functional. It is a good
    idea to have some sort of a sketch of your level design. This way you can have
    a good idea of how you will develop your level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that this can also be used as a means of communication with your
    team, the level designers, and artists, providing them a direction. The following
    figure is a top-down view of our intended level design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Graveyard
  prefs: []
  type: TYPE_NORMAL
- en: I will now build my level based on the layout I have. Now is the time to get
    creative and use your imagination to design your level. This part of the exercise
    is free-form; you are the designer, so you will decide how to go about placing
    and creating your level, as long as it meets the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind the following important point: the player will be interacting
    with the environment or non-player characters at the designated points of interest.
    Make sure that when you design your level, they have an easy way to access the
    areas where they need to get to, so that they can perform the given task.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Level design
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is the limitation of the terrain as we have it defined here.
    When the player goes to the edge of the terrain, they will fall through! Yes,
    they will have a free-fall forever! We don't want that to happen. We need to incorporate
    some boundaries in the level design that will prevent the player from going overboard,
    basically.
  prefs: []
  type: TYPE_NORMAL
- en: It is very simple to create some restrictions and boundaries in such cases.
    We can use wooden fences, or we can use the actual environment to restrict the
    level of access by the player to the danger zones in the level. This method can
    be very time consuming if your level is large.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to solve this problem is to create four colliders that will be used
    on each side of the terrain. The colliders will be attached to an Empty GameObject,
    and they will stop the player from moving forward upon contact. This is an easy
    method, and will take less time to place in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and create an Empty GameObject by choosing GameObject | Create Empty.
    Using the Inspector window, adjust the *Transform* component to set the *Position*
    to `<100,50,100>`. Next, we need to *Add Component* to the newly created GameObject.
    Use the Add Component button to select Physics | Box Collider. This will add a
    box collider, and now we can change the *Size* of the collider, using the Inspector
    window, to `<200,50,1>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are satisfied with the look and feel, you will need to duplicate it
    and place it on all the side edges to protect the player from falling, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Level design
  prefs: []
  type: TYPE_NORMAL
- en: Skybox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have our preliminary level design, we can go ahead and add another
    nice touch to it. Let's use a skybox to give a more realistic atmospheric look
    to the gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: As always, you can use the Asset Store to search for existing skyboxes. Go ahead
    and search for one that you like and import it into your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Hierarchy window, select the *Main Camera* and use the Add Component
    button to attach a Skybox component to the camera: Rendering | Skybox. Assign
    a skybox material to the *Custom Skybox* property. Take a look at the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Skybox
  prefs: []
  type: TYPE_NORMAL
- en: It is time to do a test run. We can use the third-person character controller
    provided in the Standard Assets to quickly drop our character placeholder and
    roam around the level to get a feel for it.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At some point, you will want to test out the level and look at it through the
    eyes of the camera. We can use the built-in third-person character controller
    that comes in the Standard Assets and do a quick walk-through of the level.
  prefs: []
  type: TYPE_NORMAL
- en: If you did not import the Standard Assets when you created the project, you
    will need to import them by selecting Assets followed by Import Package|Characters.
  prefs: []
  type: TYPE_NORMAL
- en: In your Project window, you will see a folder called Standard Assets; there
    is a subfolder called Character Controllers. You will need to select the 3rd Person
    Controller Prefab and drop it somewhere on the current scene. A good location
    is next to the shack. Make sure that the 3^(rd) Person Controller (3rdPC) is above
    the terrain so it does not fall through!
  prefs: []
  type: TYPE_NORMAL
- en: You will have to attach a Rigidbody component to the 3rdPC GameObject. This
    is needed to make sure that our **player-character** (**PC**) uses the built-in
    physics for collision detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you run the level, let''s make sure the camera is following the character.
    Simply make the Main Camera a child to the `ThirdPersonController` and adjust
    the orientation of the camera to look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Standard character controller
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and run the level and walk-through the scene. Test and make sure that
    the PC is behaving the way it is supposed to when you are navigating through the
    environment. Make sure that the character is respecting all the colliders and
    that there are no minor errors in the design part.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the main menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now is a good time to create the starting point for our game. Go ahead and save
    the current scene. We will make a new scene that will be used as the starting
    point of our game. To create the new scene, you will need to select File | New
    Scene. Go ahead and save the scene. I called my scene MainMenu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have a clear canvas that we can work with to create our Main Menu. In
    the Hierarchy window, right-click and select UI | Panel. This will create a Canvas
    GameObject and an EventSystem GameObject, and place them in your Hierarchy window.
    You will notice that the *Panel* UI Object is a child of the canvas. All UI elements
    will be a child of a canvas. Your Hierarchy should look something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.gif)'
  prefs: []
  type: TYPE_IMG
- en: There are several key aspects that we want to make sure are set properly. These
    are namely on the Canvas GameObject. Select the Canvas GameObject and look at
    the Inspector Window.
  prefs: []
  type: TYPE_NORMAL
- en: For this particular canvas, make sure that the *Render Mode* is set to *Screen
    Space - Overlay*. The next property you need to check is the UI Scale Mode. Change
    this to *Scale With Screen Size*. This will make sure that the UI will always
    be scaled to the screen size of the device that the game is being run in.
  prefs: []
  type: TYPE_NORMAL
- en: For best results, you will want to create multiple menus, for different device
    types.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let's go ahead and create a button that will basically load our *Awakening *level.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Panel Object in the Hierarchy window and select UI | Button.
    This will place a button on the canvas as a child to the `Panel` object. The parent-child
    relationships are important to consider when you are building your user interface.
    When you place a UI element as part of a child to another UI element, the child
    will be scaled and moved according to the parent's scale and location.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can learn more about UI development in [Chapter 5](part0109.html#37UDA0-7a1ef7ae3ef249cdb149f8344d2e8e79), *Game
    Master and Game Mechanics,* of *Introduction to Game Programming: Using C# and
    Unity 3D*. Eventually, we would like to have a main menu that looks something
    like the preceding screenshot.'
  prefs: []
  type: TYPE_NORMAL
- en: We will spend time fine-tuning our menu in future chapters. Change the caption
    of the button to `Start Game`. It is also a good idea to name your scene object
    appropriately, just to keep things nice and organized. I have changed the name
    of the button to `butStartGame`. This can be done by selecting the `Button` object
    in the Hierarchy window and changing the name in the Inspector window.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the GameMaster script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in [Chapter 1](part0021.html#K0RQ0-7a1ef7ae3ef249cdb149f8344d2e8e79),
    *What is an RPG?*, we will need a way to manage our game. We will create a script
    called GameMaster. This will be the core of the game that glues everything together.
    As we progress with the book, you will see how we will modify the core to meet
    our needs.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we are just going to create a simple C# script and name it `GameMaster.cs`.
    We will then create the code that will be used to handle some of the basic events
    we want to perform at this point, namely, navigating from scene to scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'From your Project Window, under your `scripts` folder, right-click and select
    Create | C# Script. Name it `GameMaster.cs`. Double-click your script to start
    your code editor and place the following code in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the Hierarchy window, you will need to create an empty GameObject. The best
    way to do this is by right-clicking and selecting `Create Empty`. An empty GameObject
    will be created. Select it and change the name to `_GameMaster`.
  prefs: []
  type: TYPE_NORMAL
- en: We need to attach our script to the `_GameMaster` GameObject in our scene. Select
    the `GameMaster.cs` script and drag and drop it onto `_GameMaster`. This will
    attach the script to the `_GameMaster` object and make it available in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create the event call from the button. This can easily
    be achieved by selecting the `butStartGame` button element, and from the Inspector window,
    adding a new event call on the `OnClick()` component. Click the (+) button to
    create a new event, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We need to call the function we created in the `GameMaster.cs` script. To do
    so, we would need to somehow refer to it. This is done really easily. We can drag
    and drop the `_GameMaster` GameObject into the slot, as indicated in the preceding
    screenshot by the number 2.
  prefs: []
  type: TYPE_NORMAL
- en: Once you place your `_GameMaster` GameObject in the slot, you will need to select
    the script from the drop-down menu, as indicated in the screenshot by the number
    3.
  prefs: []
  type: TYPE_NORMAL
- en: That's all there is to it! We have now connected our button click event to the
    code that will be responsible for loading our first level.
  prefs: []
  type: TYPE_NORMAL
- en: Now is a good time to save your scene and test your application. When you run
    the application for the first time, you will get an error. Don't be surprised,
    we have not done anything wrong. But there is one more step that we need to do
    before we can actually run our game successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to be able to load scenes in the game, you will need to make sure
    they are listed in Build Settings. To do so, select File | Build Settings...,
    and add the current scene to the list by selecting Add Open Scenes. Your build
    settings should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Load the MainMenu scene once more, and run the application. Nice! It is working
    as expected. The only other item I would like to add to this chapter before we
    move on, is the following code in the `GameMaster.cs` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The single line of code in the `Start()` function will make sure that the `_GameMaster`
    GameObject does not get destroyed when we move from one scene to the next. This
    is important, because we will be storing all of our game configuration, stats,
    and so on in this particular GameObject. When you run the game now from the Main
    Menu scene, you will notice that when you load level 1, the `_GameMaster` GameObject
    comes over automatically from the main menu. This is cool!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have established a good sense of the RPG. We have defined
    our levels and the settings for each level, and defined clear objectives for each
    level and the outcome for each level. We also took the first level, called Awakening,
    and created the environment. We looked at how to use our assets and the Asset
    Store to incorporate 3D models in our scene. We also looked at how to plan the
    layout of the level. We introduced a third-person character controller into the
    scene to help us visualize how the level looks from the player's perspective and
    help us fine-tune it as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the assets that were used for the design of this level:'
  prefs: []
  type: TYPE_NORMAL
- en: For the terrain, I used the Terrain Toolkit 2017 asset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the models within the level, I used the Medieval Environment Pack asset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, we also developed our Main Menu scene and our initial
    `GameMaster` script that will be used to glue the core of the game together. In
    the next chapter, we will start creating our player character and enhancing our
    **Game Master** and **Main Menu** system.
  prefs: []
  type: TYPE_NORMAL
