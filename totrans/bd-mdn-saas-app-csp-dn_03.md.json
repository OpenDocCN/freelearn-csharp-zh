["```cs\ndotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson;\n```", "```cs\ncd GoodHabits.Database; \\\nmkdir Interfaces; \\\ncd Interfaces; \\\ntouch IHasTenant.cs; \\\ncd ..;\n```", "```cs\nnamespace GoodHabits.Database;\npublic interface IHasTenant\n{ public string TenantName { get; set; } }\n```", "```cs\nnamespace GoodHabits.Database.Entities;\npublic class Habit : IHasTenant\n{\n  public int Id { get; set; }\n  public string Name { get; set; } = default!;\n  public string Description { get; set; } = default!;\n  public string TenantName { get; set; } = default!;\n}\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"TenantSettings\": {\n    \"DefaultConnectionString\": \"Data\n      Source=sqlserver;Initial\n      Catalog=GoodHabitsDatabase;\n      User Id=sa;Password=Password1;\n      MultipleActiveResultSets=True;\n      TrustServerCertificate=True;\",\n    \"Tenants\": [\n      {\n        \"TenantName\": \"AscendTech\",\n        \"ConnectionString\": \"Data Source=sqlserver;\n          Initial Catalog=AscendTechGoodHabitsDatabase;\n          User Id=sa;Password=Password1;\n          MultipleActiveResultSets=True;\n          TrustServerCertificate=True;\"\n      },\n      {\n        \"TenantName\": \"Bluewave\",\n        \"ConnectionString\": \"Data Source=sqlserver;\n        Initial Catalog=BluewaveGoodHabitsDatabase;\n        User Id=sa;Password=Password1;\n        MultipleActiveResultSets=True;\n        TrustServerCertificate=True;\"\n      },\n      {\n        \"TenantName\": \"CloudSphere\"\n      },\n      {\n        \"TenantName\": \"Datastream\"\n      }\n    ]\n  }\n}\n```", "```cs\nnamespace GoodHabits.Database;\npublic class TenantSettings\n{\n    public string? DefaultConnectionString { get; set; }\n    public List<Tenant>? Tenants { get; set; }\n}\npublic class Tenant\n{\n    public string? TenantName { get; set; }\n    public string? ConnectionString { get; set; }\n}\n```", "```cs\nnamespace GoodHabits.Database;\npublic interface ITenantService\n{\n    public string GetConnectionString();\n    public Tenant GetTenant();\n}\n```", "```cs\nusing Microsoft.Extensions.Options;\nusing GoodHabits.Database;\nnamespace GoodHabits.HabitService;\npublic class TenantService : ITenantService\n{\n    private readonly TenantSettings _tenantSettings;\n    private HttpContext _httpContext;\n    private Tenant _tenant;\n    public TenantService(IOptions<TenantSettings>\n      tenantSettings, IHttpContextAccessor contextAccessor)\n    {\n        _tenantSettings = tenantSettings.Value;\n        _httpContext = contextAccessor.HttpContext!;\n        if (_httpContext != null)\n        {\n            if (_httpContext.Request.Headers.TryGetValue(\n              \"tenant\", out var tenantId))\n            {\n                SetTenant(tenantId!);\n            }\n            else\n            {\n                throw new Exception(\"Invalid Tenant!\");\n            }\n        }\n    }\n    private void SetTenant(string tenantId)\n    {\n        _tenant = _tenantSettings!.Tenants.Where(a =>\n          a.TenantName == tenantId).FirstOrDefault();\n        if (_tenant == null) throw new Exception(\"Invalid\n          Tenant!\");\n        if (string.IsNullOrEmpty(_tenant.ConnectionString))\n          SetDefaultConnectionStringToCurrentTenant();\n    }\n    private void\n      SetDefaultConnectionStringToCurrentTenant() =>\n        _tenant.ConnectionString =\n          _tenantSettings.DefaultConnectionString;\n    public string GetConnectionString() =>\n      _tenant?.ConnectionString!;\n    public Tenant GetTenant() => _tenant;\n}\n```", "```cs\nusing GoodHabits.Database.Entities;\nusing Microsoft.EntityFrameworkCore;\npublic static class SeedData\n{\n    public static void Seed(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Habit>().HasData(\n            new Habit { Id = 100, Name = \"Learn French\",\n            Description = \"Become a francophone\",\n            TenantName = \"CloudSphere\" },\n            new Habit { Id = 101, Name = \"Run a marathon\",\n              Description = \"Get really fit\",\n              TenantName = \"CloudSphere\"  },\n            new Habit { Id = 102, Name = \"Write every day\",\n              Description = \"Finish your book project\",\n              TenantName = \"CloudSphere\"  }\n        );\n    }\n}\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing GoodHabits.Database.Entities;\nnamespace GoodHabits.Database;\npublic class GoodHabitsDbContext : DbContext\n{\n  private readonly ITenantService _tenantService;\n  public GoodHabitsDbContext(DbContextOptions options,\n    ITenantService service) : base(options) =>\n    _tenantService = service;\n  public string TenantName { get => _tenantService\n    .GetTenant()?.TenantName ?? String.Empty; }\n  public DbSet<Habit>? Habits { get; set; }\n    protected override void\n      OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        var tenantConnectionString =\n          _tenantService.GetConnectionString();\n        if (!string.IsNullOrEmpty(tenantConnectionString))\n        {\n            optionsBuilder.UseSqlServer(_tenantService\n              .GetConnectionString());\n        }\n    }\n    protected override void OnModelCreating(ModelBuilder\n      modelBuilder)\n  {\n    base.OnModelCreating(modelBuilder);\n    modelBuilder.Entity<Habit>().HasQueryFilter(a =>\n      a.TenantName == TenantName);\n    SeedData.Seed(modelBuilder);\n    }\n  public override async Task<int>\n    SaveChangesAsync(CancellationToken cancellationToken =\n    new CancellationToken())\n  {\n    ChangeTracker.Entries<IHasTenant>()\n        .Where(entry => entry.State == EntityState.Added ||\n          entry.State == EntityState.Modified)\n        .ToList()\n        .ForEach(entry => entry.Entity.TenantName =\n          TenantName);\n    return await base.SaveChangesAsync(cancellationToken);\n  }\n}\n```", "```cs\ntouch IHabitService.cs; \\\ntouch HabitService.cs;\n```", "```cs\nusing GoodHabits.Database.Entities;\nnamespace GoodHabits.HabitService;\npublic interface IHabitService\n{\n        Task<Habit> Create(string name, string\n          description);\n        Task<Habit> GetById(int id);\n        Task<IReadOnlyList<Habit>> GetAll();\n}\n```", "```cs\nusing GoodHabits.Database;\nusing GoodHabits.Database.Entities;\nusing Microsoft.EntityFrameworkCore;\nnamespace GoodHabits.HabitService;\npublic class HabitService : IHabitService\n{\n    private readonly GoodHabitsDbContext _dbContext;\n    public HabitService(GoodHabitsDbContext dbContext) =>\n      _dbContext = dbContext;\n    public async Task<Habit> Create(string name,\n      string description)\n    {\n        var habit = _dbContext.Habits!.Add(new Habit { Name\n          = name, Description = description }).Entity;\n        await _dbContext.SaveChangesAsync();\n        return habit;\n    }\n    public async Task<IReadOnlyList<Habit>> GetAll() =>\n      await _dbContext.Habits!.ToListAsync();\n    public async Task<Habit> GetById(int id) =>   await\n      _dbContext.Habits.FindAsync(id);\n}\n```", "```cs\nrm WeatherForecast.cs; \\\ncd Controllers; \\\nrm WeatherForecastController.cs; \\\ntouch HabitsController.cs; \\\ncd ..; \\\nmkdir Dtos; \\\ncd Dtos; \\\ntouch CreateHabitDto.cs\n```", "```cs\nusing GoodHabits.HabitService.Dtos;\nusing Microsoft.AspNetCore.Mvc;\nnamespace GoodHabits.HabitService.Controllers;\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HabitsController : ControllerBase\n{\n    private readonly ILogger<HabitsController> _logger;\n    private readonly IHabitService _habitService;\n    public HabitsController(\n        ILogger<HabitsController> logger,\n        IHabitService goodHabitsService\n        )\n    {\n        _logger = logger;\n        _habitService = goodHabitsService;\n    }\n    [HttpGet(\"{id}\")]\n    public async Task<IActionResult> GetAsync(int id) =>\n      Ok(await _habitService.GetById(id));\n    [HttpGet]\n    public async Task<IActionResult> GetAsync() => Ok(await\n      _habitService.GetAll());\n    [HttpPost]\n    public async Task<IActionResult>\n      CreateAsync(CreateHabitDto request) => Ok(await\n      _habitService.Create(request.Name,\n      request.Description));\n}\n```", "```cs\nnamespace GoodHabits.HabitService.Dtos;\npublic class CreateHabitDto {\n    public string Name { get; set; } = default!;\n    public string Description { get; set; } = default!;\n}\n```", "```cs\nusing GoodHabits.Database;\nusing Microsoft.EntityFrameworkCore;\nnamespace GoodHabits.HabitService;\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection\n      AddAndMigrateDatabases(this IServiceCollection\n      services, IConfiguration config)\n    {\n        var options = services.GetOptions\n          <TenantSettings>(nameof(TenantSettings));\n        var defaultConnectionString =\n          options.DefaultConnectionString;\n        services.AddDbContext<GoodHabitsDbContext>(m =>\n          m.UseSqlServer(e => e.MigrationsAssembly(\n          typeof(GoodHabitsDbContext).Assembly.FullName)));\n        var tenants = options.Tenants;\n        foreach (var tenant in tenants)\n        {\n            string connectionString;\n            if (string.IsNullOrEmpty(\n              tenant.ConnectionString))\n            {\n                connectionString = defaultConnectionString;\n            }\n            else\n            {\n                connectionString = tenant.ConnectionString;\n            }\n            using var scope = services\n              .BuildServiceProvider().CreateScope();\n            var dbContext =\n              scope.ServiceProvider.GetRequiredService<Good\n              HabitsDbContext>();\n            dbContext.Database.SetConnectionString(\n              connectionString);\n            if (dbContext.Database.GetMigrations()\n              .Count() > 0)\n            {\n                dbContext.Database.Migrate();\n            }\n        }\n        return services;\n    }\n    public static T GetOptions<T>(this IServiceCollection\n      services, string sectionName) where T : new()\n    {\n        using var serviceProvider =\n          services.BuildServiceProvider();\n        var configuration =\n          serviceProvider.GetRequiredService<\n          IConfiguration>();\n        var section = configuration.GetSection(\n          sectionName);\n        var options = new T();\n        section.Bind(options);\n        return options;\n    }\n}\n```", "```cs\nusing GoodHabits.HabitService;\nusing GoodHabits.Database;\nusing GoodHabits.HabitService;\nusing Microsoft.OpenApi.Models;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.AddControllers().AddNewtonsoftJson();\nbuilder.Services.AddSwaggerGen(c => c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"GoodHabits.HabitService\", Version = \"v1\" }));\nbuilder.Services.AddTransient<ITenantService, TenantService>();\nbuilder.Services.AddTransient<IHabitService, HabitService>();\nbuilder.Services.Configure<TenantSettings>(builder.Configuration.GetSection(nameof(TenantSettings)));\nbuilder.Services.AddAndMigrateDatabases(builder.Configuration);\nbuilder.Services.AddEndpointsApiExplorer();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n    app.UseSwagger();\n    app.UseSwaggerUI(c => c.SwaggerEndpoint(\n      \"/swagger/v1/swagger.json\", \"GoodHabits.HabitService\n      v1\"));\n}\napp.UseHttpsRedirection();\napp.UseRouting();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n```", "```cs\ndotnet-ef migrations add MultiTenant --startup-project ../GoodHabits.HabitService/GoodHabits.HabitService.csproj\n```"]