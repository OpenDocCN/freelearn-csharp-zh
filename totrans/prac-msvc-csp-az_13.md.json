["```cs\ndotnet new webapi --use-minimal-apis -o Codebreaker.Live\n```", "```cs\n// else path using Azure services\nvar live = builder.AddProject<Projects.Codebreaker_Live>(\"live\")\n  .WithExternalHttpEndpoints()\n  WithReference(appInsights)\n .WithEnvironment(\"StartupMode\", startupMode);\nvar gameAPIs = builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithExternalHttpEndpoints()\n  .WithReference(cosmos)\n  .WithReference(redis)\n  .WithReference(appInsights)\n  .WithReference(live)\n  .WithEnvironment(\"DataStore\", dataStore)\n  .WithEnvironment(\"StartupMode\", startupMode);\n  // code removed for brevity\n```", "```cs\npublic class LiveHub(ILogger<LiveHub> logger) : Hub\n{\n  public async Task SubscribeToGameCompletions(string gameType)\n  {\n    logger.ClientSubscribed(Context.ConnectionId, gameType);\n    await Groups.AddToGroupAsync(Context.ConnectionId, gameType);\n  }\n  public async Task UnsubscribeFromGameCompletions(string gameType)\n  {\n    logger.ClientUnsubscribed(Context.ConnectionId, gameType);\n    await Groups.RemoveFromGroupAsync(Context.ConnectionId, gameType);\n  }\n}\n```", "```cs\npublic static class LiveGamesEndpoints\n{\n  public static void MapLiveGamesEndpoints(this IEndpointRouteBuilder routes, ILogger logger)\n  {\n    var group = routes.MapGroup(\"/live\")\n      .WithTags(\"Game Events API\");\ngroup.MapPost(\"/game\", async (GameSummary gameSummary, \n      IHubContext<LiveHub> hubContext) =>\n    {\n      logger.LogInformation(\"Received game ended {type} {gameid}\", \n        gameSummary.GameType, gameSummary.Id);\n      await hubContext.Clients.Group(gameSummary.GameType).\n        SendAsync(\"GameCompleted\", gameSummary);\n      return TypedResults.Ok();\n    })\n    .WithName(\"ReportGameEnded\")\n    .WithSummary(\"Report game ended to notify connected clients\")\n    .WithOpenApi();\n  }\n}\n```", "```cs\npublic static class ApplicationServices\n{\n  public static void AddApplicationServices(this IHostApplicationBuilder builder)\n  {\n    builder.Services.AddSignalR();\n    // code removed for brevity\n  }\n  public static WebApplication MapApplicationEndpoints(this WebApplication app, ILogger logger)\n  {\n    app.MapLiveGamesEndpoints(logger);\napp.MapHub<LiveHub>(\"/livesubscribe\");\n    return app;\n  }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.AddServiceDefaults();\nbuilder.AddApplicationServices();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\napp.MapDefaultEndpoints();\napp.MapApplicationEndpoints(app.Logger);\napp.Run();\n```", "```cs\npublic class LiveReportClient(HttpClient httpClient, ILogger<LiveReportClient> logger) : ILiveReportClient\n{\n  private readonly static JsonSerializerOptions s_jsonOptions = new()\n  {\n    PropertyNameCaseInsensitive = true\n  };\npublic async Task ReportGameEndedAsync(GameSummary gameSummary, \n    CancellationToken cancellationToken = default)\n  {\n    try\n    {\nawait httpClient.PostAsJsonAsync(\"/live/game\", gameSummary, \n        options: s_jsonOptions, cancellationToken: cancellationToken);\n    }\n    catch (Exception ex) when (ex is HttpRequestException or \n      TaskCanceledException or JsonException)\n    {\n      logger.ErrorWritingGameCompletedEvent(gameSummary.Id, ex);\n    }\n  }\n}\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  // code removed for brevity\n  builder.Services.AddScoped<IGamesService, GamesService>();\nbuilder.Services.AddHttpClient<ILiveReportClient, \n    LiveReportClient>(client =>\n  {\n    client.BaseAddress = new Uri(\"https+http://live\");\n  });\n  builder.AddRedisDistributedCache(\"redis\");\n}\n```", "```cs\ndotnet new console -o LiveTestClient\n```", "```cs\ninternal class LiveClient(IOptions<LiveClientOptions> options) : IAsyncDisposable\n{\n  // code removed for brevity\n}\npublic class LiveClientOptions\n{\n  public string? LiveUrl { get; set; }\n}\n```", "```cs\n{\n  \"Codebreaker.Live\": {\n    \"LiveUrl\": \"http://localhost:5130/livesubscribe\"\n  }\n}\n```", "```cs\ninternal class LiveClient(IOptions<LiveClientOptions> options) : IAsyncDisposable\n{\n  private HubConnection? _hubConnection;\npublic async Task StartMonitorAsync(CancellationToken \n    cancellationToken = default)\n  {\n    string liveUrl = options.Value.LiveUrl ??\n      throw new InvalidOperationException(\"LiveUrl not configured\");\n    _hubConnection = new HubConnectionBuilder()\n      .WithUrl(liveUrl)\n      .Build();\n    _hubConnection.On(\"GameCompleted\", (GameSummary summary) =>\n{\n      string status = summary.IsVictory ? \"won\" : \"lost\";\n      Console.WriteLine($\"Game {summary.Id} {status} by {summary.\n        PlayerName} after \" +\n        \"{summary.Duration:g}  with {summary.NumberMoves} moves\");\n    });\n    await _hubConnection.StartAsync(cancellationToken);\n  }\n  // code removed for brevity\n  public async ValueTask DisposeAsync()\n  {\n    if (_hubConnection is not null)\n    {\n      await _hubConnection.DisposeAsync();\n    }\n  }\n}\n```", "```cs\npublic async Task SubscribeToGame(string gameType, CancellationToken cancellationToken = default)\n{\n  if (_hubConnection is null) throw new InvalidOperationException(\"Start a connection first\");\nawait _hubConnection.InvokeAsync(\"SubscribeToGameCompletions\", \n    gameType, cancellationToken);\n}\n```", "```cs\nConsole.WriteLine(\"Test client - wait for service, then press return to continue\");\nConsole.ReadLine();\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Services.AddSingleton<LiveClient>();\nbuilder.Services.Configure<LiveClientOptions>(builder.Configuration.GetSection(\"Codebreaker.Live\"));\nusing var host = builder.Build();\nvar client = host.Services.GetRequiredService<LiveClient>();\nawait client.StartMonitorAsync();\nawait client.SubscribeToGame(\"Game6x4\");\nawait host.RunAsync();\nConsole.WriteLine(\"Bye...\");\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  builder.Services.AddSignalR()\n    .AddMessagePackProtocol();\n}\n// code removed for brevity\n```", "```cs\nstring liveUrl = options.Value.LiveUrl ?? throw new InvalidOperationException(\"LiveUrl not configured\");\n_hubConnection = new HubConnectionBuilder()\n  .WithUrl(liveUrl)\n  .ConfigureLogging(logging =>\n  {\n    logging.AddConsole();\n    logging.SetMinimumLevel(LogLevel.Debug);\n  })\n  .AddMessagePackProtocol()\n  .Build();\n```", "```cs\ndbug: Microsoft.AspNetCore.SignalR.Client.HubConnection[40]\n  Registering handler for client method 'GameCompleted'.\n// some log outputs removed for clarity\ndbug: Microsoft.AspNetCore.Http.Connections.Client.HttpConnection[8]\n  Establishing connection with server at 'http://localhost:5130/livesubscribe'.\ndbug: Microsoft.AspNetCore.Http.Connections.Client.HttpConnection[9]\n  Established connection '1YXBdJ3Yi7A_86ZqoMKgiA' with the server.\ninfo: Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport[1]\n  Starting transport. Transfer mode: Binary. Url: 'ws://localhost:5130/livesubscribe?id=CHpPUMdrJoxV0zLHsskN1Q'.\ndbug: Microsoft.AspNetCore.Http.Connections.Client.HttpConnection[18]\n      Transport 'WebSockets' started.\ninfo: Microsoft.AspNetCore.SignalR.Client.HubConnection[24]\n      Using HubProtocol 'messagepack v1'.\ndbug: Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport[13]\n      Received message from application. Payload size: 39.\n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar signalR = builder.AddAzureSignalR(\"signalr\");\n// code removed for brevity\nvar live = builder.AddProject<Projects.Codebreaker_Live>(\"live\")\n  .WithExternalHttpEndpoints()\n  .WithReference(appInsights)\n  .WithReference(signalR);\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  var signalRBuilder = builder.Services.AddSignalR()\n    .AddMessagePackProtocol();\n  if (Environment.GetEnvironmentVariable(\"StartupMode\") != \"OnPremises\")\n  {\n      signalRBuilder.AddNamedAzureSignalR(\"signalr\");\n  }\n}\n```"]