["```cs\npublic class NewsService\n{\n    private const string NewsCacheKey = \"news-cache-key\";\n    private readonly IMemoryCache _cache;\n    private readonly IDatabase _db;\n    public NewsService(IMemoryCache cache, IDatabase db)\n    {\n        _cache = cache;\n        _db = db;\n    }\n    public async Task<IEnumerable<NewsItem>> GetNewsList()\n    {\n        if (_cache.TryGet(NewsCacheKey,            out IEnumerable<NewsItem> news))\n        {\n            return news;\n        }\n        news = await _db.getLatestNews<NewsItem>(...);\n        _cache.Set(NewsCacheKey, news,            new MemoryCacheEntryOptions\n         {\n    //sliding expiration force the cache to become         expired after 1 day.\n         SlidingExpiration = TimeSpan.FromDays(1)\n          });\n        return news;\n    }\n}\n```", "```cs\npublic class NewsModel : PageModel\n{\n    private readonly IDistributedCache _cache;\n    public NewsModel(IDistributedCache cache)\n    {\n        _cache = cache;\n    }\n    public string CachedNewsTime { get; set; }\n    public async Task OnGetAsync()\n    {\n        CachedNewsTime = \"Cached Time Expired\";\n        var encodedCachedNewsTime =            await _cache.GetAsync(\"cachedNewsTime\");\n        if (encodedCachedNewsTime != null)\n        {\n            CachedNewsTime = Encoding.UTF8.GetString                 (encodedCachedNewsTime);\n        }\n    }\n    public async Task<IActionResult> ResetCachedTime()\n    {\n        var currentTimeUTC = DateTime.UtcNow.ToString();\n        byte[] encodedCurrentNewsTime = Encoding.UTF8             .GetBytes(currentNewsTime);\n        var options = new DistributedCacheEntryOptions()           .SetSlidingExpiration(TimeSpan.FromSeconds(60));\n        await _cache.SetAsync(\"cachedNewsTime\",            encodedCurrentNewsTime, options);\n        return RedirectToPage();\n    }\n}\n```"]