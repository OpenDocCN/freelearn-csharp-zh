["```cs\n    function onComplete(message) { \n      console.log(message); \n    } \n\n    function doSomething(onComplete) { \n      //Do what is needed here and then trigger onComplete \n      onComplete(\"Complete!\"); \n    } \n\n    doSomething(onComplete); \n\n```", "```cs\n    function add(x) { \n      return function (y) { \n        return x + y; \n      }; \n    }; \n\n    var addTen = add(10); \n    console.log(addTen(5));     //Returns 15 \n    console.log(add(2)(3));     //Returns 5 \n\n```", "```cs\n    Function.prototype.throws = function () { \n      var slice = Array.prototype.slice, \n        args = slice.apply(arguments), \n          errorMessage = args[0], \n            fn = this; \n      return function () { \n        try { \n return fn.apply(null, args.slice(1)); \n        } \n        catch (e) { \n          console.log(errorMessage); \n          //Do what is needed apart from logging \n        } \n      } (); \n    }; \n\n```", "```cs\n    function errorSimulator(a, b) { \n      console.log(a, b); \n      return (parseInt(RxJS,10));//This statement forces an error! \n    } \n\n```", "```cs\n    errorSimulator.throws(\"I have you!\", 2, 0);  // line 1\n    errorSimulator(2, 0);                        // line 2\n```", "```cs\n npm install rx \n    rx@4.1.0 node_modules\\rx \n\n```", "```cs\n    Function.prototype.getGenerator = function (setCount) { \n      \"use strict\"; \n      var fnGen = this, \n      numberOfElements = setCount, \n      slice = Array.prototype.slice, \n      gen = {}, \n      fnContexts = [], \n      yieldIndex = -1, \n      getFunctionContext = function (fnIndex, input) { \n        var fnContext = fnContexts[fnIndex]; \n        if (fnContext === undefined) { \n fnContext = { \n\"index\": 0, \n\"current\": input, \n\"outList\": []\n }; \n          fnContexts[fnIndex] = fnContext; \n        } else { \n          fnContext.current = input; \n          fnContext.index += 1; \n        } \n        return fnContext; \n      }, \n      isYieldEmpty = function () { \n        return ((yieldIndex + 1) === numberOfElements); \n      }, \n      moveNext = function () { \n        var args = arguments, \n        yieldedResult = null, \n        core = function () { \n          var i, \n          result = null, \n          fn = null, \n          fnCtxt = null; \n          yieldIndex += 1; \n          result = fnGen.apply(null, []); \n          if (args.length > 0) { \n            for (i = 0; i < args.length; i += 1) { \n              fn = args[i]; \n              fnCtxt = getFunctionContext(i, result); \n result = fn.call(null, fnCtxt); \n              if (result === null) { \n                break; \n              } else { \n                fnCtxt.outList.push(result); \n              } \n            } \n            if (result !== null) { \n              gen.current = result; \n            } \n          } else { \n            gen.current = result; \n          } \n          return result; \n        }; \n        while ((yieldedResult === null) && (!isYieldEmpty())) { \n          //Recursive call to find the next non-null value \n yieldedResult = core(); \n        } \n        return (yieldedResult !== null) ? true : false; \n      }; \n gen.current = null;\n gen.moveNext = moveNext; \n      return gen; \n    }; \n\n```", "```cs\n    function sequence(z) { \n      \"use strict\"; \n var y = 0; \n      return function () { \n        y += z; \n        return y; \n      }; \n    } \n\n```", "```cs\n    var a = sequence(1).getGenerator(10);\n    //For generating the first 10     \n    elements (1 through 10) \n    while (a.moveNext() { \n      console.log(a.current); \n    } \n\n```", "```cs\n    function square(context) { \n      \"use strict\"; \n      return (context.current * context.current); \n    } \n\n```", "```cs\n    function unique(context) { \n      \"use strict\"; \n      return (context.outList.indexOf(context.current) < 0) ?       \n      context.current : null; \n    } \n\n```", "```cs\n    function filter(condition) { \n      \"use strict\"; \n      return function (context) { \n        return condition(context.current) ? context.current : null; \n      }; \n    } \n\n    function even(val) { \n      \"use strict\"; \n      return (val % 2 === 0); \n    } \n\n```", "```cs\n    function skip(count) { \n      \"use strict\"; \n      return function (context) { \n        return ((context.index % (count + 1)) === 0) ? context.current      \n        : null; \n      }; \n    } \n\n```", "```cs\n    var a = sequence(1).getGenerator(10); \n while(a.moveNext(skip(1), square)) { \n      console.log(a.current);    //Yields 1, 9, 25, 49, 81 \n    } \n\n```", "```cs\n    var client = Rx.Observable.create(function (observer) { \n      observer.onNext('On Your Mark'); \n      observer.onNext('Get Set'); \n      observer.onNext('GO'); \n      observer.onCompleted(); \n    }); \n\n    client.subscribe( \n function onNext(x) { console.log('Next: ' + x); }, \n function onError(err) { console.log('Error: ' + err); }, \n function onCompleted() { console.log('Completed'); } \n    ); \n\n```", "```cs\nNext: On Your Mark\nNext: Get Set\nNext: GO\nCompleted\n\n```", "```cs\n    Rx.Observable \n .from(['On Your Mark', 'Get Set', 'GO']) \n    .subscribe( \n      function (x) { console.log('Next: ' + x); }, \n      function (err) { console.log('Error:', err); }, \n      function () { console.log('Completed'); } \n    ); \n\n```", "```cs\n    var allMoves = Rx.Observable.fromEvent(document, 'mousemove') \n    allMoves.subscribe(function (e) { \n console.log(e.clientX, e.clientY);  \n    }); \n\n    var movesCrossingDiagonal = allMoves.filter(function (e) { \n      return e.clientX === e.clientY; \n    }); \n    movesCrossingDiagonal.subscribe(function (e) { \n console.log('Crossed the diagonal:', e.clientX, e.clientY); \n    }); \n\n```", "```cs\n    // Load Node.js Filesystem module \n    var fs = require('fs'); \n    // Create an Observable from the watch method \n var source = Rx.Observable.fromCallback(fs.watch)('./tmp', {  \n    encoding: 'buffer' }); \n    // Create an Observer \n    var fsClient = Rx.Observer.create( \n      function (changes) { \n        console.log('Next: ', changes); \n      }, \n      function (err) { \n        console.log('Error: ', err); \n      }, \n      function () { \n        console.log('Completed'); \n      } \n    ); \n    var subscription = source.subscribe(fsClient); \n\n```", "```cs\nNext:  [ 'change', 'alas.tmp' ]\nCompleted\n\n```", "```cs\n    Rx.Observable \n    .from([1, 2, 3, 4, 5, 6, 7, 8]) \n    .skip(4) \n    .map(function (val) { return val * val; }) \n    .subscribe(function (value) { \n      console.log('Next : ', value); \n    }); \n\n```", "```cs\nNext : 25\nNext : 36\nNext : 49\nNext : 64\n\n```", "```cs\n var subject = new Rx.Subject(); \n    var source = Rx.Observable \n    .interval(1000) \n    .take(3); \n    source.subscribe(subject); \n    //Observer #1 \n    var client1 = subject.subscribe( \n      function (changes) { \n        console.log('Client1 Next: ', changes); \n      }, \n      function (err) { \n        console.log('Client1 Error: ', err); \n      }, \n      function () { \n        console.log('Client1 Completed!'); \n      } \n    ); \n    //Observer #2 \n    var client2 = subject.subscribe( \n      function (changes) { \n        console.log('Client2 Next: ', changes); \n      }, \n      function (err) { \n        console.log('Client2 Error: ', err); \n      }, \n      function () { \n        console.log('Client2 Completed!'); \n      } \n    ); \n    subject.onNext(5); \n    subject.onNext(15); \n    subject.onNext(20); \n    setTimeout(function () { \n      subject.onCompleted(); \n      client1.dispose(); \n      client2.dispose(); \n    }, 5000); \n\n```", "```cs\nClient1 Next: 15\nClient2 Next: 15\nClient1 Next: 20\nClient2 Next: 20\nClient1 Next: 0\nClient2 Next: 0\nClient1 Next: 1\nClient2 Next: 1\nClient1 Next: 2\nClient2 Next: 2\nClient1 Completed!\nClient2 Completed!\n\n```", "```cs\n    using System; \n    using System.Collections.Generic; \n    using System.Linq; \n    using System.Net; \n    using System.Net.Http; \n    using System.Web.Http; \n using SpellChecker; \n\n    namespace MvcApplication1.Controllers \n    { \n public class SearchContext \n      { \n        public string Lookup { get; set; } \n        public int Count { get; set; } \n      } \n      public class ValuesController : ApiController \n      { \n        ISpellCheckerModel _spellChecker =      \n        NorvigSpellCheckerModel.Instance; \n        // GET api/values \n        public IEnumerable<string> Get([FromUri] SearchContext      \n        context) \n        { \n return _spellChecker.SpellCheck(context.Lookup,        \n          context.Count); \n        } \n      } \n    } \n\n```", "```cs\n    protected void Application_Start() \n    { \n      AreaRegistration.RegisterAllAreas(); \n      WebApiConfig.Register(GlobalConfiguration.Configuration); \n      FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); \n      RouteConfig.RegisterRoutes(RouteTable.Routes); \n      BundleConfig.RegisterBundles(BundleTable.Bundles); \n GlobalConfiguration.Configuration.Formatters.Insert(0, new    \n      JsonpMediaTypeFormatter()); \n    } \n\n```", "```cs\n    public class JsonpMediaTypeFormatter : JsonMediaTypeFormatter \n    { \n      private string callbackQueryParameter; \n\n      public JsonpMediaTypeFormatter() \n      { \n        SupportedMediaTypes.Add(DefaultMediaType); \n        SupportedMediaTypes.Add(new      \n        MediaTypeHeaderValue(\"text/javascript\"));    \n        MediaTypeMappings.Add(new UriPathExtensionMapping(\"jsonp\",       \n        DefaultMediaType)); \n      } \n\n      public string CallbackQueryParameter \n      { \n        get { return callbackQueryParameter ?? \"callback\"; } \n        set { callbackQueryParameter = value; } \n      } \n\n      public override Task WriteToStreamAsync(Type type, object value,    \n      Stream stream, HttpContent content, TransportContext     \n      transportContext) \n      { \n        string callback; \n\n        if (IsJsonpRequest(out callback)) \n        { \n          return Task.Factory.StartNew(() => \n          { \n            var writer = new StreamWriter(stream); \n            writer.Write(callback + \"(\"); \n            writer.Flush(); \n\n            base.WriteToStreamAsync(type, value, stream, content,          \n            transportContext).Wait(); \n\n            writer.Write(\")\"); \n            writer.Flush(); \n          }); \n        } \n        else{ \n          return base.WriteToStreamAsync(type, value, stream, content,        \n          transportContext); \n        } \n      } \n\n      private bool IsJsonpRequest(out string callback) \n      { \n        callback = null; \n\n        if (HttpContext.Current.Request.HttpMethod != \"GET\") \n        return false; \n\n        callback = HttpContext.Current.Request.QueryString       \n        [CallbackQueryParameter]; \n\n        return !string.IsNullOrEmpty(callback); \n      } \n    } \n\n```", "```cs\n    <h3>RxJS Samples:</h3> \n    <ol class=\"round\"> \n      <li class=\"one\"> \n    <h5>Spell Checker</h5> \n    <script type=\"text/javascript\" src=\"img/rx.lite.js\">   \n    </script>\n    <script type=\"text/javascript\" src=\"img/rx.dom.js\">\n    </script>\n```", "```cs\n    <script type=\"text/javascript\"> \n      var textInput; \n      var throttledInput; \n      var suggestions; \n      var resultList; \n\n```", "```cs\n    function initialize() {\n      textInput = document.querySelector('#textInput');\n      console.log(textInput);\n      throttledInput = Rx.DOM.keyup(textInput)\n        .do(function (msg) {\n          console.log(msg.key);\n        })\n        .pluck('target', 'value')\n        .filter(function (text) {\n          return text.length > 3;\n        })\n        .debounce(500)\n        .distinctUntilChanged();\n      suggestions = throttledInput.flatMapLatest(SpellChecker); \n\n```", "```cs\n    resultList = document.getElementById('results'); \n suggestions.subscribe( \n      function (data) { \n        var results = data.response; \n        clearSelector(resultList); \n        for (var i = 0; i < results.length; i++) { \n          resultList.appendChild(createLineItem(results[i])); \n        } \n      }, \n      function (e) { \n        clearSelector(resultList); \n        resultList.appendChild(createLineItem('Error: ' + e)); \n      } \n    ); \n  } \n\n```", "```cs\n    function SpellChecker(term) { \n      var url = 'http://localhost:18679/api/values/?Lookup=' \n      + encodeURIComponent(term) +    \n      '&Count=5&format=json&callback=JSONPCallback';\n return Rx.DOM.jsonpRequest(url); \n    } \n\n```", "```cs\n    function clearSelector(element) { \n      while (element.firstChild) { \n        element.removeChild(element.firstChild); \n      } \n    } \n\n    function createLineItem(text) { \n      var li = document.createElement('li'); \n      li.innerHTML = text; \n      return li; \n    } \n\n Rx.DOM.ready().subscribe(initialize); \n    </script> \n      <input id=\"textInput\" type=\"text\"/> \n      <ul id=\"results\"></ul> \n      </li> \n    </ol> \n\n```", "```cs\n    var Rx = require('rx'); \n    // Load Node.js Filesystem module \n    var fs = require('fs'); \n\n var disposable = Rx.Scheduler.default.scheduleRecursive( \n      0, \n      function (i, recurse) { \n        // Create an Observable from the watch method \n        var source = Rx.Observable\n        .fromCallback(fs.watch)('./tmp', { encoding: 'buffer' }); \n        var subscription = source.subscribe( \n        function (changes) { \n          console.log('Next: ', i, changes); \n        }, \n        function (err) { \n          console.log('Error: ', err); \n        }, \n        function () { \n          console.log('Completed'); \n          ++i; \n recurse(i); \n        }); \n      } \n    ); \n\n```", "```cs\nNext: 0 [ 'change', 'alas.tmp' ]\nCompleted\nNext: 1 [ 'change', 'alas2.tmp' ]\nCompleted\nNext: 2 [ 'change', 'anotherfile.tmp' ]\nCompleted\n\n```", "```cs\n    // -------------------------Load RxJS module\n    var Rx = require('rx');\n    var calculateChange = function (denominations, amount) {\n      'use strict';\n      var changeSets = 0;\n      var subject = new Rx.Subject();\n      var changeSetClient = subject\n          .do\n          (\n              function (denominationSet) {\n                  console.log(\n                      'Processing Denominations: ', \n                      denominationSet);\n              }\n           )\n           .observeOn(Rx.Scheduler.default)\n           .subscribe\n           (\n               function (denominationSet) {\n                   printChangeSet(denominationSet);\n               },\n               function (err) {\n                   console.log('Processing Error: ', err);\n               },\n               function () {\n                   console.log('Processing Completed!');\n                   changeSetClient.dispose();  //Disposal\n                   subject.dispose();          //Disposal\n               }\n           );\n```", "```cs\n    //This function prints the applicable denomination sets\n    var printChangeSet = function (denominationSet) { \n      var matchFactors = [], \n        findCombinationSet = function (denominationIndex,\n          cumilativeSum) { \n          var transientSum = 0, \n              i = 1, \n              denomination = denominationSet[denominationIndex], \n                factorCount = denominationSet.length; \n          while (transientSum <= amount) { \n              //Pretty Printing \n              matchFactors[denominationIndex] = i.toString()\n              + \" x \" + denomination.toString() + \"c\"; \n              transientSum = cumilativeSum + (denomination * i); \n              if ((denominationIndex + 1) === factorCount) { \n                  if (transientSum === amount) { \n                      changeSets += 1; \n                      console.log(\n                        changeSets + \". \" + matchFactors); \n                  } \n              } else { \n findCombinationSet(denominationIndex + 1,\n                       transientSum); \n\n                } \n                i += 1;\n                //---------------------Pretty Printing END\n          }\n        };\n      findCombinationSet(0, 0);\n    };\n```", "```cs\n    // This function computes the possible denomination sets \n    var generateChangeSets = function () { \n      var bitcount = denominations.length, \n        mask = Math.pow(2, bitcount), \n          i = 1, \n          j = 0, \n          k = 1, \n          denominationSet = null, \n          denominationSum = 0; \n      while (i < mask) { \n        j = 0; \n        denominationSet = []; \n        denominationSum = 0; \n        while (j < bitcount) { \n          if ((i & (k << j)) > 0) { \n            denominationSet.push(denominations[j]); \n            denominationSum += denominations[j]; \n          } \n          j += 1; \n        } \n        if (denominationSum <= amount) { \n subject.onNext(denominationSet); \n        } \n        i += 1; \n      } \n subject.onCompleted(); \n    }; \n    generateChangeSets(); \n  }; \n\n```", "```cs\nchangeSetClient Processing Denominations: [ 1 ]\nchangeSetClient Processing Denominations: [ 5 ]\nchangeSetClient Processing Denominations: [ 1, 5 ]\nchangeSetClient Processing Denominations: [ 10 ]\nchangeSetClient Processing Denominations: [ 1, 10 ]\nchangeSetClient Processing Denominations: [ 5, 10 ]\nchangeSetClient Processing Denominations: [ 1, 5, 10 ]\nchangeSetClient Processing Denominations: [ 25 ]\n1\\. 25 x 1c\n2\\. 5 x 5c\n3\\. 5 x 1c,4 x 5c\n4\\. 10 x 1c,3 x 5c\n5\\. 15 x 1c,2 x 5c\n6\\. 20 x 1c,1 x 5c\n7\\. 5 x 1c,2 x 10c\n8\\. 15 x 1c,1 x 10c\n9\\. 1 x 5c,2 x 10c\n10\\. 3 x 5c,1 x 10c\n11\\. 5 x 1c,2 x 5c,1 x 10c\n12\\. 10 x 1c,1 x 5c,1 x 10c\n13\\. 1 x 25c\nchangeSetClient Processing Completed!\n\n```"]