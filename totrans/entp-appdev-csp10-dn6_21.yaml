- en: '*Chapter 16*: Deploying the Application in Azure'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deployment is a set of activities we perform to make software applications available
    for use. The general approach is to take the code, and then build, test, and deploy
    it to the target systems. Depending on the type of application and the business
    requirements, the approach that you take to deploy your code might vary. It could
    be as simple as taking the target system down, replacing existing code with a
    new version, and then bringing the system up; or, it may involve other sophisticated
    approaches such as blue-green deployment, where you deploy code to a staging environment
    that is identical to production, run your tests, and then redirect the traffic
    to staging to make it to production.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Modern software development adopts Agile and DevOps to shorten the development
    cycle and deliver new features, updates, and bugs frequently and reliably to provide
    more value to customers. To enable this, you will need a set of tools to plan,
    collaborate, develop, test, deploy, and monitor.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn what Azure DevOps is and the tools it offers
    for rapid and reliable delivery.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the CI pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the CD pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an ASP.NET 6 application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you need basic knowledge of Azure, Visual Studio 2022, Git,
    and an active Azure subscription with a contributor role. If you don't have one,
    you can sign up for a free account at [https://azure.microsoft.com/en-in/free](https://azure.microsoft.com/en-in/free).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the chapter can be found here: https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/tree/main/Chapter16.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To bring a product idea to life, irrespective of your team size, you will need
    an efficient way to plan your work, collaborate within your team, and build, test,
    and deploy. Azure DevOps helps you to address these challenges and offers various
    services and tools for your success. Azure DevOps services can be accessed via
    the web or from popular development IDEs such as Visual Studio, Visual Studio
    Code, and Eclipse. Azure DevOps services are available in the cloud as well as
    on-premises using Azure DevOps Server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure DevOps offers the following services:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**Boards**: Offers a set of tools to plan and track your work, defects, and
    issues using Scrum and Kanban methodologies'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repos**: Offers source control to manage your code using Git or **Team Foundation
    Version Control** (**TFVC**)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipelines**: Offers a set of services to support **continuous integration**
    (**CI**) and **continuous delivery** (**CD**)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test Plans**: Offers a set of test management tools to drive the quality
    of your application with end-to-end traceability'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artifacts**: Allows you to share packages from public and private sources,
    as well as integrating with CI and CD pipelines'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these services, Azure DevOps also helps you to manage wikis for
    your team, manage dashboards, use widgets to share progress and trends, and configure
    notifications. It also allows you to add or develop custom extensions and integrate
    with popular third-party services such as Campfire, Slack, and Trello.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些服务之外，Azure DevOps还帮助您管理团队的知识库，管理仪表板，使用小部件共享进度和趋势，并配置通知。它还允许您添加或开发自定义扩展，并与流行的第三方服务（如Campfire、Slack和Trello）集成。
- en: Azure DevOps services offer free and paid subscriptions. To sign up for a free
    account, follow the steps outlined at [https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps服务提供免费和付费订阅。要注册免费账户，请按照[https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops)中概述的步骤操作。
- en: 'The following is a screenshot of the home screen from a sample project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从一个示例项目中截取的主屏幕截图：
- en: '![Figure 16.1 – Azure DevOps home page'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.1 – Azure DevOps主页'
- en: '](img/Figure_16.1_B18507.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.1_B18507.jpg)'
- en: Figure 16.1 – Azure DevOps home page
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – Azure DevOps主页
- en: Let's understand Azure DevOps and each of these services in detail.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解Azure DevOps及其每个服务。
- en: Boards
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看板
- en: '**Boards** helps you to define a process for your project and track your work.
    When you create a new project in Azure DevOps, you have the option to choose a
    process template as Agile, Basic, Scrum, or a **Capability Maturity Model Integration**
    (**CMMI**) process. The process template determines the work item types and workflows
    that you can use in your project. Work items help you to track your work, and
    workflows help you track the progress of your work items. The following figure
    shows the hierarchy of work items and the workflow of the Scrum process template:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**看板**帮助您为项目定义一个流程并跟踪工作。当您在Azure DevOps中创建一个新的项目时，您可以选择一个流程模板，如敏捷、基本、Scrum或**能力成熟度模型集成**（**CMMI**）流程。流程模板决定了您可以在项目中使用的工项类型和工作流程。工项帮助您跟踪工作，而工作流程帮助您跟踪工项的进度。以下图显示了工项的层次结构以及Scrum流程模板的工作流程：'
- en: '![Figure 16.2 – Hierarchy of work items and the workflow in a Scrum process'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.2 – 工作项层次结构及Scrum流程的工作流程'
- en: '](img/Figure_16.2_B18507.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.2_B18507.jpg)'
- en: Figure 16.2 – Hierarchy of work items and the workflow in a Scrum process
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – 工作项层次结构及Scrum流程的工作流程
- en: To further customize or define your workflows and work item types, you can choose
    to create your own process template based on the previously mentioned process
    templates.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步自定义或定义您的工作流程和工项类型，您可以选择基于之前提到的流程模板创建自己的流程模板。
- en: Let's understand more about work items and workflows.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解工作项和工作流程。
- en: Work items
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作项
- en: Work items help you to track features, requirements, and bugs in your project.
    You can group requirements in a hierarchy. Usually, we start with a high-level
    requirement called an **epic**, which can be further broken down into **features**
    and **product backlog items**. Product backlog items are deliverables that are
    prioritized, assigned to a team member, and delivered in a sprint. **Tasks** are
    created for backlog items and bugs to track defects against product backlog items.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 工作项帮助您跟踪项目中的功能、需求和错误。您可以在层次结构中对需求进行分组。通常，我们从称为**史诗**的高级需求开始，它可以进一步分解为**功能**和**产品待办事项**。产品待办事项是优先级较高、分配给团队成员并在冲刺中交付的可交付成果。**任务**是为待办事项和错误创建的，以跟踪对产品待办事项的缺陷。
- en: The collaboration feature enables communication within your team through discussion
    or questions on a work item. You can mention a team member or link another work
    item and view the history of all actions or discussions at any time. You can also
    choose to follow a work item to get alerts when it is updated.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 协作功能允许您通过在工作项上讨论或提问来在团队内部进行沟通。您可以提及团队成员或链接另一个工作项，并随时查看所有操作或讨论的历史记录。您还可以选择关注工作项，以便在它更新时收到警报。
- en: Workflows
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作流程
- en: Workflows help you to review the progress and health of your project. For instance,
    a product backlog item is created with the **New** state. Once it is reviewed
    and approved by a product owner, it is moved to **Approved**, then it is prioritized
    and assigned to a team member in a sprint and moved to **Committed**, and when
    it is complete, it is moved to **Done**. Workflows help you to track the health
    of your project.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流可以帮助您审查项目的进度和健康状况。例如，产品待办事项项以**新**状态创建。一旦它被产品负责人审查和批准，它就被移动到**已批准**，然后它被优先排序并分配给冲刺中的团队成员，并移动到**已承诺**，当它完成时，它被移动到**完成**。工作流可以帮助您跟踪项目的健康状况。
- en: 'You can use a Kanban board to view the state of all work items and easily move
    work items to different states using the drag-and-drop feature. The following
    screenshot illustrates a Kanban board consisting of work items in different states:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Kanban板查看所有工作项的状态，并使用拖放功能轻松地将工作项移动到不同的状态。以下截图展示了由不同状态的工作项组成的Kanban板：
- en: '![Figure 16.3 – Kanban dashboard'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.3 – Kanban看板'
- en: '](img/Figure_16.3_B18507.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.3_B18507.jpg)'
- en: Figure 16.3 – Kanban dashboard
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3 – Kanban看板
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you create your own process template, you can customize work items or create
    new work items and customize or define your workflows to suit your business needs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建自己的流程模板，您可以自定义工作项或创建新的工作项，并自定义或定义工作流以满足您的业务需求。
- en: To learn more about process templates and how they differ, you can refer to
    [https://docs.microsoft.com/en-us/azure/devops/boards/get-started/what-is-azure-boards?view=azure-devops&tabs=scrum-process#work-item-types](https://docs.microsoft.com/en-us/azure/devops/boards/get-started/what-is-azure-boards?view=azure-devops&tabs=scrum-process#work-item-types).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关流程模板及其差异的更多信息，您可以参考[https://docs.microsoft.com/en-us/azure/devops/boards/get-started/what-is-azure-boards?view=azure-devops&tabs=scrum-process#work-item-types](https://docs.microsoft.com/en-us/azure/devops/boards/get-started/what-is-azure-boards?view=azure-devops&tabs=scrum-process#work-item-types)。
- en: Next, let's understand more about Repos.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更深入地了解代码库。
- en: Repos
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码库
- en: '**Repos** offers version control tools with which you can manage your code.
    A version control system allows you to track the changes made by your team to
    code. It creates a snapshot of each change, which you can review at any time and
    revert to it if required. Azure DevOps offers **Git** and **TFVC** as your version
    control systems.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码库**提供版本控制工具，您可以使用这些工具来管理您的代码。版本控制系统允许您跟踪团队对代码所做的更改。它为每个更改创建快照，您可以在任何时间审查它，并在需要时回滚到它。Azure
    DevOps提供**Git**和**TFVC**作为您的版本控制系统。'
- en: Git is currently the most widely used version control system and is increasingly
    becoming the standard for version control systems. Git is a distributed version
    control system with a local copy of the version control system in which you can
    view the history or commit changes locally, even if you are offline, and it will
    sync to the server once connected to a network. TFVC, however, is a centralized
    version control system with only one version of each file on the dev machine,
    and the history is maintained on the server. For more information on Git, you
    can refer to [https://docs.microsoft.com/en-in/azure/devops/repos/git/?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/repos/git/?view=azure-devops),
    and for TFVC, you can refer to [https://docs.microsoft.com/en-in/azure/devops/repos/tfvc/?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/repos/tfvc/?view=azure-devops).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Git是目前最广泛使用的版本控制系统，并且越来越成为版本控制系统的标准。Git是一个分布式版本控制系统，其中包含版本控制系统的本地副本，您可以在本地查看历史记录或提交更改，即使您离线，一旦连接到网络，它将同步到服务器。然而，TFVC是一个集中式版本控制系统，每个文件在开发机器上只有一个版本，历史记录保存在服务器上。有关Git的更多信息，您可以参考[https://docs.microsoft.com/en-in/azure/devops/repos/git/?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/repos/git/?view=azure-devops)，有关TFVC，您可以参考[https://docs.microsoft.com/en-in/azure/devops/repos/tfvc/?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/repos/tfvc/?view=azure-devops)。
- en: 'The following are the key services of **Repos**:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为**代码库**的关键服务：
- en: '`main` or `master`, and you can create another branch from it. This way, you
    can isolate your changes for feature development or a bug fix. You can create
    any number of branches, share them among your team members, commit your changes,
    and safely merge them back to `master`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`或`master`，您可以从它创建另一个分支。这样，您可以隔离您的更改以进行功能开发或错误修复。您可以创建任意数量的分支，与团队成员共享，提交您的更改，并安全地将它们合并回`master`。'
- en: '**Branch policies** help you to protect your branches during development. When
    you enable a branch policy on a branch, any change must be made via pull requests
    only, so that you can review, give feedback, and approve changes. As a branch
    policy, you can configure a minimum number of required approvers, check for linked
    work items and comment resolution, and enforce the build to be successful to complete
    pull requests.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支策略**帮助您在开发过程中保护分支。当您在分支上启用分支策略时，任何更改都必须通过提交请求进行，这样您就可以进行审查、提供反馈和批准更改。作为分支策略，您可以配置所需的最小批准者数量，检查链接的工作项和评论解决情况，并强制构建成功以完成提交请求。'
- en: 'The following screenshot illustrates policies defined on a branch:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图展示了在分支上定义的策略：
- en: '![Figure 16.4 – Branch policies'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.4 – 分支策略'
- en: '](img/Image87446.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Image87446.jpg)'
- en: Figure 16.4 – Branch policies
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4 – 分支策略
- en: Here, a policy is created to validate the build before the code is merged to
    the branch.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，创建了一个策略来验证在代码合并到分支之前构建。
- en: '**Pull requests** allow you to review code, add comments, and ensure they are
    resolved before the code is merged to your branch. Based on the configured branch
    policy, you can add mandatory reviewers to review and approve changes. You can
    associate work items to pull requests to enable traceability of changes. The following
    screenshot illustrates a sample pull request:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交请求**允许您审查代码、添加评论，并确保在代码合并到分支之前得到解决。根据配置的分支策略，您可以添加强制审查员来审查和批准更改。您可以将工作项关联到提交请求以启用更改的可追溯性。以下屏幕截图展示了示例提交请求：'
- en: '![Figure 16.5 – Pull request'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.5 – 提交请求'
- en: '](img/Figure_16.5_B18507.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.5_B18507.jpg)'
- en: Figure 16.5 – Pull request
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – 提交请求
- en: The pull request has a title and description, and users can review files and
    compare them with the previous versions, check the status of builds and linked
    work items, and approve.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 提交请求有一个标题和描述，用户可以审查文件并比较它们与之前的版本，检查构建状态和链接的工作项，并进行批准。
- en: Next, let's understand Pipelines.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解管道。
- en: Pipelines
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: '**Pipelines** allows you to configure, build, test, and deploy your code to
    any target system. Using Pipelines, you can enable CI and CD for consistent and
    quality delivery of your code. You can use pipelines targeting many application
    types built using popular languages such as .NET, Java, JavaScript, Node.js, PHP,
    and C++, and target them to deploy to either cloud or on-premises servers. You
    can define pipelines using YAML files or a UI-based classic editor.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**管道**允许您配置、构建、测试并将代码部署到任何目标系统。使用管道，您可以为代码的持续集成和持续部署启用一致性和质量交付。您可以使用针对使用流行语言（如.NET、Java、JavaScript、Node.js、PHP和C++）构建的许多应用程序类型的管道，并将它们部署到云或本地服务器。您可以使用YAML文件或基于UI的经典编辑器定义管道。'
- en: CI automates builds and tests for your project to ensure quality and consistency.
    CI can be configured to run on schedule or when new code is merged into your branch
    or both. CI generates artifacts that are used by CD pipelines to deploy to target
    systems.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: CI自动化构建和测试您的项目以确保质量和一致性。CI可以配置为按计划运行或当新代码合并到您的分支时运行，或者两者都运行。CI生成由CD管道用于部署到目标系统的工件。
- en: CD enables you to automatically deploy code to the target system and run tests.
    CD can be configured to run on a schedule.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: CD使您能够自动将代码部署到目标系统并运行测试。CD可以配置为按计划运行。
- en: Next, let's understand more about Test Plans.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更深入地了解测试计划。
- en: Test Plans
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试计划
- en: 'Azure DevOps provides a set of tools to drive quality in your projects. It
    provides browser-based test management solutions with all the capabilities required
    for manual and exploratory testing. It provides the capability to organize **test
    cases** under **test suites** or **test plans** with which you can track the quality
    of a feature or a release. These are explained as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps提供了一套工具来提高您项目中的质量。它提供基于浏览器的测试管理解决方案，具有所有手动和探索性测试所需的功能。它提供了在**测试套件**或**测试计划**下组织**测试用例**的能力，您可以使用它们来跟踪功能或发布的质量。以下是对这些功能的解释：
- en: '**Test cases** are used to validate individual parts of your application. They
    contain test steps, which you can use to assert a requirement. You can reuse a
    test case by importing it into test suites or test plans.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例**用于验证应用程序的各个部分。它们包含测试步骤，您可以使用它们来断言需求。您可以通过将其导入测试套件或测试计划来重用测试用例。'
- en: '**Test suites** are a group of test cases executed to validate a feature or
    a component. You can create static test suites, requirement-based suites, and
    query-based suites.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试套件**是一组执行以验证功能或组件的测试用例。您可以创建静态测试套件、基于需求的套件和基于查询的套件。'
- en: '**Test plans** are a group of test suites or test cases used to track the quality
    of each iteration of a release.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试计划**是一组测试套件或测试用例，用于跟踪每个发布迭代的每个迭代的质量。'
- en: Next, let's understand more about Artifacts.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更深入地了解工件。
- en: Artifacts
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工件
- en: '**Artifacts** makes it easy to share code among teams. You can easily create
    and share Maven, npm, or NuGet package feeds from public and private sources,
    and they are easy to use in CI and CD pipelines. Artifacts are based on standard
    packaging formats and can be easily integrated with development IDEs, such as
    Visual Studio, as a package source.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**工件**使得在团队之间共享代码变得容易。您可以从公共和私有源轻松创建和共享Maven、npm或NuGet包源，它们在CI和CD流水线中易于使用。工件基于标准打包格式，可以轻松集成到开发IDE中，如Visual
    Studio，作为包源。'
- en: Azure DevOps enables coordination and collaboration within teams and helps you
    to deliver projects consistently with high quality. With CI and CD, you can automate
    the build and deployment of your code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps使团队内部能够协调和协作，并帮助您以高质量一致地交付项目。使用CI和CD，您可以自动化代码的构建和部署。
- en: In the next section, let's understand the CI pipeline.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们了解CI流水线。
- en: Understanding the CI pipeline
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解CI流水线
- en: CI is a practice in which you automate the building and testing of your code.
    In Azure DevOps, you can create pipelines and configure them to trigger automatically
    when code is merged to your target (master/main) branch, run on a schedule, or
    both. You may choose to create a pipeline using YAML files or a UI-based classic
    editor.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: CI是一种实践，您在其中自动化代码的构建和测试。在Azure DevOps中，您可以创建流水线并将它们配置为在代码合并到您的目标（master/main）分支时自动触发，按计划运行，或两者兼而有之。您可以选择使用YAML文件或基于UI的经典编辑器创建流水线。
- en: 'The following figure illustrates the typical flow of code from a developer''s
    machine to the cloud:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了从开发者的机器到云的代码典型流程：
- en: '![Figure 16.6 – Typical flow of code'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 16.6 – Typical flow of code](img/Figure_16.6_B18507.jpg)'
- en: '](img/Figure_16.6_B18507.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_16.6_B18507.jpg](img/Figure_16.6_B18507.jpg)'
- en: Figure 16.6 – Typical flow of code
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.6 – 代码的典型流程
- en: 'From the preceding screenshot, we see the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图，我们可以看到以下内容：
- en: The developer uses development tools such as Visual Studio, Visual Studio Code,
    or Visual Studio for Mac to develop code.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者使用Visual Studio、Visual Studio Code或Visual Studio for Mac等开发工具来编写代码。
- en: Code changes are moved to the repository.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码更改被移动到仓库中。
- en: The CI pipeline is triggered, validates the build, runs tests, and publishes
    artifacts. The CD pipeline is triggered, and it deploys code to target systems.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI流水线被触发，验证构建，运行测试，并发布工件。CD流水线被触发，并将代码部署到目标系统。
- en: The developer uses Application Insights to continuously monitor and improve
    the application.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者使用Application Insights来持续监控和改进应用程序。
- en: Note
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '**YAML** (short for **YAML Ain''t Markup Language**) is the preferred way to
    define your pipelines. It offers the same capabilities as a classic editor. You
    can check these files to repositories and manage them like any other source file.
    For more details, you can refer to [https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema).'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**YAML**（代表**YAML Ain''t Markup Language**）是定义流水线的首选方式。它提供了与经典编辑器相同的功能。您可以将这些文件检查到仓库中，并像管理任何其他源文件一样管理它们。有关更多详细信息，您可以参考[https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema)。'
- en: Let's understand the core components and flow of a pipeline.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解流水线的核心组件和流程。
- en: Understanding the flow and components of a pipeline
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解流水线的流程和组件
- en: A **pipeline** is a definition of a set of actions to be performed to build
    and test your code. A pipeline definition contains a **trigger**, **variables**,
    **stages**, **jobs**, **steps**, and **tasks**. When we run a pipeline, it executes
    **tasks** defined in the pipeline definition. Let's understand each of these components
    in the following sections.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**流水线**是一组定义，用于执行构建和测试代码的操作。流水线定义包含**触发器**、**变量**、**阶段**、**作业**、**步骤**和**任务**。当我们运行流水线时，它会执行流水线定义中定义的**任务**。以下各节中，我们将了解这些组件的每个部分。'
- en: Trigger
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器
- en: A `trigger` section of a pipeline.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线的 `trigger` 部分。
- en: 'In the following code snippet, the pipeline is configured to trigger when code
    is pushed to the `master` branch or any branch under the `releases` folder. Optionally,
    we can also specify path filters in the pipeline so that it is triggered only
    when code is changed that satisfies path conditions:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，流水线被配置为在代码推送到 `master` 分支或 `releases` 文件夹下的任何分支时触发。可选地，我们还可以在流水线中指定路径过滤器，以便仅在代码更改满足路径条件时触发：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also configure a pipeline to run automatically based on a schedule.
    In the following code snippet, a pipeline is configured to run every day at 9:30
    A.M. Schedules are specified using a `cron` expression and you can specify multiple
    schedules. If you set `always` to `true`, the build is triggered even if there
    is no change in the code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以配置流水线根据计划自动运行。在以下代码片段中，流水线被配置为每天上午 9:30 运行。计划使用 `cron` 表达式指定，并且您可以指定多个计划。如果将
    `always` 设置为 `true`，即使代码没有更改，也会触发构建：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Variables
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: '**Variables** can be defined with a value and reused at multiple places in
    your pipeline. You can define variables at root, a stage, or in a job. There are
    three different types of variables that can be used in pipelines – user-defined,
    system variables, and environmental variables:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量**可以通过赋予值并在流水线中的多个位置重用来定义。您可以在根目录、阶段或作业中定义变量。在流水线中可以使用三种不同类型的变量 – 用户定义的变量、系统变量和环境变量：'
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding code snippet, the `buildConfiguration` variable is defined
    with the `Release` value and is used in the `arguments` section of the task. The
    `build.artifactstagingdirectory` system variable contains the location of the
    artifacts directory.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`buildConfiguration` 变量被定义为 `Release` 值，并在任务的 `arguments` 部分中使用。`build.artifactstagingdirectory`
    系统变量包含工件目录的位置。
- en: Stages
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阶段
- en: '**Stages** are a collection of jobs run sequentially by default. You can also
    specify conditions on the preceding stage execution state or add approval checks
    to control when a stage should run.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**阶段**是一组默认按顺序运行的作业。您也可以指定前一个阶段执行状态的条件，或添加审批检查以控制阶段何时运行。'
- en: 'The following is a sample pipeline definition with multiple stages:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个具有多个阶段的示例流水线定义：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In the preceding sample, three stages are configured, each running sequentially.
    The `Test` stage contains two jobs that can run in parallel, and the `Deploy`
    stage has a dependency on the `Test` stage.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，配置了三个阶段，它们按顺序依次运行。`Test` 阶段包含两个可以并行运行的作业，而 `Deploy` 阶段依赖于 `Test` 阶段。
- en: 'The following is a screenshot of the pipeline execution summary of the preceding
    sample, and you can click on each stage to view the logs:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面示例的流水线执行摘要的截图，您可以通过点击每个阶段来查看日志：
- en: '![Figure 16.7 – Summary of a pipeline run'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.7 – 流水线运行摘要'
- en: '](img/Figure_16.7_B18507.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.7_B18507.jpg)'
- en: Figure 16.7 – Summary of a pipeline run
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.7 – 流水线运行摘要
- en: Jobs
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作业
- en: '`testNull` variable:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`testNull` 变量：'
- en: '[PRE48]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In the preceding code, the job is configured with a condition to run only when
    `testNull` is empty.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，作业被配置为仅在 `testNull` 为空时运行。
- en: Steps and tasks
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤和任务
- en: '**Steps** are groups of tasks in your pipeline. These could be to build your
    code, run tests, or publish artifacts. Each step is executed on the agent and
    has access to the pipeline workspace.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤**是您流水线中的任务组。这些可能是构建您的代码、运行测试或发布工件。每个步骤都在代理上执行，并可以访问流水线工作区。'
- en: '`DotNetCoreCLI@2` task to build `csproj`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`DotNetCoreCLI@2` 任务构建 `csproj`：'
- en: '[PRE56]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: To learn more about pipelines, you can refer to [https://docs.microsoft.com/en-in/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=java%2Ctfs-2018-2%2Cbrowser](https://docs.microsoft.com/en-in/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=java%2Ctfs-2018-2%2Cbrowser).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于流水线的知识，您可以参考 [https://docs.microsoft.com/en-in/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=java%2Ctfs-2018-2%2Cbrowser](https://docs.microsoft.com/en-in/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=java%2Ctfs-2018-2%2Cbrowser)。
- en: In the next section, let's learn more about the CD pipeline.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们更深入地了解 CD 流水线。
- en: Understanding the CD pipeline
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 CD 流水线
- en: CD is a process by which you automate the deployment of code to target environments.
    CD pipelines use artifacts produced by CI pipelines and deploy to one or more
    environments. Like the CI pipeline, we can use YAML files or a classic editor
    to define a CD pipeline. You can specify conditions on the preceding stage execution
    state or add approval checks to deploy, which is a very common scenario for production
    deployments.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: CD是一个自动化将代码部署到目标环境的流程。CD管道使用CI管道产生的工件并部署到一个或多个环境。像CI管道一样，我们可以使用YAML文件或经典编辑器来定义CD管道。您可以为前一个阶段的执行状态指定条件或添加批准检查以部署，这在生产部署中是一个非常常见的场景。
- en: You can also configure to run automated UI tests to perform a sanity check post-deployment.
    Based on the sanity check results, you can configure it to automatically promote
    code to a higher environment.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以配置运行自动化的UI测试以在部署后进行合理性检查。根据合理性检查的结果，您可以配置它自动将代码提升到更高环境。
- en: At any point in time, if the deployment to a stage fails, we can re-deploy code
    from previous releases. Depending on the configured retention policy under the
    project settings, Azure DevOps retains build artifacts so that it is easy to deploy
    code of any version at any time. If you find any issues with the application post-deployment,
    you can easily find the last known good release and deploy code to minimize the
    business impact.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时间点，如果某个阶段的部署失败，我们可以从之前的版本重新部署代码。根据项目设置下配置的保留策略，Azure DevOps会保留构建工件，以便可以轻松地在任何时间部署任何版本的代码。如果您在部署后发现应用程序有任何问题，您可以轻松地找到最后一个已知的好版本，并部署代码以最小化业务影响。
- en: Let's understand more about this in the following section.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节中更深入地了解这个内容。
- en: Continuous deployment versus CD
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署与CD对比
- en: Continuous deployment is automated deployment to the target system whenever
    new code is merged to your repository, whereas CD makes the application available
    to deploy at any time to the target system. Azure DevOps offers multi-staged pipelines;
    you can configure pipelines with stages to achieve this.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是在将新代码合并到您的存储库时自动部署到目标系统，而CD使应用程序在任何时间都可以部署到目标系统。Azure DevOps提供多阶段管道；您可以通过配置具有阶段的管道来实现这一点。
- en: Continuous deployment is usually configured on lower environments, such as dev
    or test, whereas for higher environments such as staging or production, you should
    consider CD so that you can validate changes on lower environments and approve
    to deploy code to higher environments.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署通常配置在较低的环境，如开发或测试，而对于较高环境，如预发布或生产，您应该考虑CD，以便您可以在较低环境中验证更改并批准将代码部署到较高环境。
- en: 'The following screenshot illustrates a multi-stage pipeline, with automated
    build and release to dev, and waiting for approval in the test stage. In this
    case, releasing code to testing requires approval:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图展示了多阶段管道，其中自动构建和发布到开发环境，并在测试阶段等待批准。在这种情况下，将代码发布到测试需要批准：
- en: '![Figure 16.8 – Multi-stage pipeline pending approval'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.8 – 待批准的多阶段管道'
- en: '](img/Figure_16.8_B18507.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.8_B18507.jpg)'
- en: Figure 16.8 – Multi-stage pipeline pending approval
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.8 – 待批准的多阶段管道
- en: To learn more about how to configure approvals and check on Azure pipelines,
    you can refer to [https://docs.microsoft.com/en-in/azure/devops/pipelines/process/approvals?view=azure-devops&tabs=check-pass](https://docs.microsoft.com/en-in/azure/devops/pipelines/process/approvals?view=azure-devops&tabs=check-pass).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何配置Azure管道中的批准和检查的更多信息，您可以参考[https://docs.microsoft.com/en-in/azure/devops/pipelines/process/approvals?view=azure-devops&tabs=check-pass](https://docs.microsoft.com/en-in/azure/devops/pipelines/process/approvals?view=azure-devops&tabs=check-pass)。
- en: 'To view the details of a pipeline run, you can click on any stage to view the
    logs of that run. Logs help us to troubleshoot deployment failures. The following
    screenshot illustrates the logs of a pipeline run:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看管道运行的详细信息，您可以点击任何阶段来查看该运行的日志。日志帮助我们排查部署失败的问题。以下屏幕截图展示了管道运行的日志：
- en: '![Figure 16.9 – Pipeline execution details'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.9 – 管道执行细节'
- en: '](img/Figure_16.9_B18507.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.9_B18507.jpg)'
- en: Figure 16.9 – Pipeline execution details
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9 – 管道执行细节
- en: In the preceding screenshot, you will notice that you can view stages, jobs,
    and tasks configured in the pipeline, and you can click on tasks to view logs.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您会注意到您可以查看管道中配置的阶段、作业和任务，并且您可以点击任务来查看日志。
- en: In the next section, we will learn how to create a pipeline to build and deploy
    an application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何创建一个构建和部署应用程序的管道。
- en: Deploying an ASP.NET 6 application
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have explored Azure DevOps, understood the tools
    and services it offers, and then learned about CI and CD pipelines. In this section,
    we shall learn how to create an Azure DevOps project, clone the repository, push
    code to the repository, and create a CI and CD pipeline to deploy code to Azure
    App Service.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Do check the *Technical requirements* section to ensure you have everything
    set up before you deploy the sample application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'You can follow along with these steps to deploy an ASP.NET 6 application to
    Azure:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Azure DevOps account. Create an Azure DevOps account if you don't
    have one; you can follow the steps given at [https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops).
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page of Azure DevOps, provide a name for your project, say, `HelloWorld`,
    then for **Version control**, choose **Git**, and for **Work item process**, you
    can choose **Agile**:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.10 – New Azure DevOps project'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.10_B18507.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.10 – New Azure DevOps project
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create a service connection, which we will use in the pipeline to
    connect and deploy code to Azure App Service.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the left menu, navigate to **Project settings** | **Service connections**
    | **Create service connection** | **Azure Resource Manager** | **Service Principal
    (automatic)**:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.11 – New service principal'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.11_B18507.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.11 – New service principal
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The service principal enables pipelines to connect to your Azure subscription
    to manage resources or deploy your code to Azure services.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a subscription and provide a name for the connection to create a service
    connection. Azure DevOps uses this service connection to connect Azure resources
    and deploy code:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.12 – New service principal'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.12_B18507.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.12 – New service principal
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project is created, you should see a page similar to the following.
    From the left menu, under **Repos**, select **Branches**:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.13 – Azure DevOps Home | Repos screen'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.13_B18507.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.13 – Azure DevOps Home | Repos screen
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the link, which we will use to clone the repository to our local machine:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.14 – Clone repository'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.14_B18507.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.14 – Clone repository
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: To clone the repository to your system, open Command Prompt and navigate to
    a folder to which you want to clone the code, then run the following command.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace `<organization>` with your Azure DevOps organization:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Since our repository is new and empty, we need to add code to it. The following
    `dotnet` CLI commands would help us to create an ASP.NET 6 application and an
    xUnit project, create a solution file, and add a web and tests project to it.
    Run each command in sequence to continue:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Run the following commands to build code and run tests to verify whether it
    is all good:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来构建代码并运行测试以验证是否一切正常：
- en: '[PRE64]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Now that we have tested the code, next let's see how the pipeline is created
    for CI and CD for using the code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经测试了代码，接下来让我们看看如何为使用代码创建 CI/CD 管道。
- en: Creating a pipeline for CI and CD
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 CI/CD 管道
- en: 'After running the tests, we need to see how the CI and CD pipeline is created.
    Perform the following steps:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试后，我们需要查看 CI/CD 管道是如何创建的。执行以下步骤：
- en: Next, we need to create a pipeline for CI and CD. You can use the code available
    at [https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/master/Chapter16/Pipelines/HelloWorld/azure-ci-pipeline.yml](https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/master/Chapter16/Pipelines/HelloWorld/azure-ci-pipeline.yml)
    and save it in the root directory of the repository. Let's name it `azure-ci-pipeline.yml`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个 CI/CD 的管道。你可以使用在 [https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/master/Chapter16/Pipelines/HelloWorld/azure-ci-pipeline.yml](https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/master/Chapter16/Pipelines/HelloWorld/azure-ci-pipeline.yml)
    可用的代码，并将其保存到存储库的根目录中。让我们称它为 `azure-ci-pipeline.yml`。
- en: This pipeline is configured to trigger when new code is merged to the `main`
    branch.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 此管道被配置为在新代码合并到 `main` 分支时触发。
- en: It is configured to have three stages – build, dev, and test – where the build
    stage is configured to build code, run unit tests, and publish artifacts. The
    dev and test stages are configured to deploy code to Azure App Service.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它被配置为有三个阶段——构建、开发和测试——其中构建阶段被配置为构建代码、运行单元测试和发布工件。开发和测试阶段被配置为将代码部署到 Azure App
    Service。
- en: Dependencies are configured at the dev and test stages, where the dev stage
    depends on build, and the test depends on the dev stage.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖关系在开发和测试阶段进行配置，其中开发阶段依赖于构建，测试依赖于开发阶段。
- en: Let's examine a few important sections of this YAML file.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查这个 YAML 文件的一些重要部分。
- en: 'The following snippet contains a section to define variables:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段包含一个定义变量的部分：
- en: '[PRE65]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You will notice three variables are declared in the YAML file. Provide the
    appropriate values before you save the file:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在 YAML 文件中声明了三个变量。在保存文件之前，请提供适当的值：
- en: '`azureSubscription`: Provide the name of your service connection.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azureSubscription`：提供你的服务连接名称。'
- en: '`devAppServiceName`: Provide the name of the app service for dev deployment.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devAppServiceName`：提供开发部署的应用服务名称。'
- en: '`testAppServiceName`: Provide the name of the app service for test deployment.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testAppServiceName`：提供测试部署的应用服务名称。'
- en: 'To build code, we use the `DotNetCoreCLI@2` task and configure `command`, `projects`,
    and, optionally, `arguments`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建代码，我们使用 `DotNetCoreCLI@2` 任务并配置 `command`、`projects` 和可选的 `arguments`：
- en: '[PRE66]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '`command` is configured as `build` and the path is set to `csproj` for `projects`
    to build the code. This task runs .NET CLI commands, so we can also configure
    this task with other .NET CLI commands, such as `run`, `test`, `publish`, `restore`,
    and so on.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`command` 被配置为 `build`，路径设置为 `csproj` 以构建 `projects` 中的代码。此任务运行 .NET CLI 命令，因此我们也可以使用其他
    .NET CLI 命令配置此任务，例如 `run`、`test`、`publish`、`restore` 等。'
- en: 'To publish the code, the `PublishBuildArtifacts@1` task is used. It is configured
    with `PathtoPublish`, `ArtifactName`, and `publishLocation`:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要发布代码，使用 `PublishBuildArtifacts@1` 任务。它配置了 `PathtoPublish`、`ArtifactName` 和
    `publishLocation`：
- en: '[PRE67]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`PathtoPublish` is configured with the location of the artifact directory where
    build artifacts are available, `ArtifactName` as `drop`, and `publishLocation`
    as `Container` to publish artifacts to Azure Pipelines. Alternatively, we can
    also configure `publishLocation` as `FileShare`.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`PathtoPublish` 被配置为工件目录的位置，其中包含可用的构建工件，`ArtifactName` 为 `drop`，`publishLocation`
    为 `Container` 以将工件发布到 Azure Pipelines。或者，我们也可以将 `publishLocation` 配置为 `FileShare`。'
- en: 'The following code snippet does the required actions to deploy code:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段执行所需的操作以部署代码：
- en: '[PRE68]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In the deployment job, the first step is to download the artifact, and the artifact's
    name should be the same as the one that is configured in the `PublishBuildArtifacts@1`
    task, in this case, `drop`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署作业中，第一步是下载工件，并且工件的名称应该与在 `PublishBuildArtifacts@1` 任务中配置的名称相同，在这种情况下，是 `drop`。
- en: The `AzureWebApp@1` task is used to deploy artifacts to Azure App Service. The
    required parameters are `azureSubscription`, `appType`, `appName`, `package`,
    and `deploymentMethod` (as `auto`).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`AzureWebApp@1` 任务用于将工件部署到 Azure App Service。所需的参数包括 `azureSubscription`、`appType`、`appName`、`package`
    和 `deploymentMethod`（作为 `auto`）。'
- en: Now that the artifact is ready, we see how the code is committed and code changes
    are pushed.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在工件已经准备好了，我们可以看到代码是如何被提交的，以及代码更改是如何被推送到远程仓库的。
- en: Pushing the code
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送代码
- en: 'Now that the code and pipeline are ready, the next step is to commit and push
    these changes to the Azure DevOps repository:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码和流水线都已经准备好了，下一步是将这些更改提交并推送到 Azure DevOps 仓库：
- en: 'In Command Prompt, run the following commands to commit changes locally and
    push them to Azure DevOps:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，运行以下命令以在本地提交更改并将它们推送到 Azure DevOps：
- en: '[PRE69]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'In Azure DevOps, navigate to **Pipelines** and click **Create Pipeline** to
    create a new pipeline:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中，导航到 **流水线** 并点击 **创建流水线** 来创建一个新的流水线：
- en: '![Figure 16.15 – New pipeline'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.15 – 新建流水线'
- en: '](img/Figure_16.15_B18507.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.15_B18507.jpg)'
- en: Figure 16.15 – New pipeline
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.15 – 新建流水线
- en: 'To configure the pipeline, we need to perform four steps. Select the service
    in which your repository resides, select the repository, configure the pipeline,
    and save. For this implementation, select **Azure Repos Git** to continue, and
    then select your repository:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置流水线，我们需要执行四个步骤。选择你的仓库所在的云服务，选择仓库，配置流水线，然后保存。对于此实现，选择 **Azure Repos Git**
    以继续，然后选择你的仓库：
- en: '![Figure 16.16 – Source control selection'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.16 – 源代码选择'
- en: '](img/Figure_16.16_B18507.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.16_B18507.jpg)'
- en: Figure 16.16 – Source control selection
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.16 – 源代码选择
- en: 'In the **Configure** tab, choose **Existing Azure Pipelines YAML file** to
    continue:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **配置** 选项卡中，选择 **现有 Azure 流水线 YAML 文件** 以继续：
- en: '![Figure 16.17 – Configuration pipeline'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.17 – 配置流水线'
- en: '](img/Figure_16.17_B18507.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.17_B18507.jpg)'
- en: Figure 16.17 – Configuration pipeline
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.17 – 配置流水线
- en: 'Select the pipeline file we saved earlier in the repository and click **Continue**,
    and then click **Run** to trigger the pipeline:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们在仓库中保存的流水线文件，然后点击 **继续**，然后点击 **运行** 来触发流水线：
- en: '![Figure 16.18 – YAML file selection'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.18 – YAML 文件选择'
- en: '](img/Figure_16.18_B18507.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.18_B18507.jpg)'
- en: Figure 16.18 – YAML file selection
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.18 – YAML 文件选择
- en: 'This will open a page in which we can see the state of the pipeline. The following
    screenshot is taken from the pipeline run. You will notice three stages have been
    created:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个页面，我们可以看到流水线的状态。以下截图是从流水线运行中获取的。你会注意到已经创建了三个阶段：
- en: '![Figure 16.19 – Summary of the pipeline run'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.19 – 流水线运行摘要'
- en: '](img/Figure_16.19_B18507.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.19_B18507.jpg)'
- en: Figure 16.19 – Summary of the pipeline run
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.19 – 流水线运行摘要
- en: In the build stage, you will notice two jobs in progress.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建阶段，你会注意到有两个正在进行的作业。
- en: The dev stage and test stage are waiting for the build to complete.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 开发阶段和测试阶段正在等待构建完成。
- en: Optionally, you can enable deployment slots on Azure App Service and configure
    the pipeline to deploy code to a non-production deployment slot, say, *pre-prod*.
    Once you check the sanity of the deployed code, you can swap the *production*
    slot with *pre-prod*. The swap is instantaneous and, without any downtime, you
    can make the latest changes available to users. If you notice any issues, you
    can swap back to the previous slot to go back to the last known good version.
    For more information, you can refer to [https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots](https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你可以在 Azure App Service 上启用部署槽位，并配置流水线以将代码部署到非生产部署槽位，例如，*预生产*。一旦你检查了已部署代码的合理性，你可以将
    *生产* 槽位与 *预生产* 槽位交换。交换是瞬时的，并且没有任何停机时间，你可以将最新的更改提供给用户。如果你发现任何问题，你可以交换回先前的槽位以回到最后一个已知的好版本。有关更多信息，你可以参考
    [https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots](https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots)。
- en: 'After the pipeline execution is complete, navigate to **Environments** under
    **Pipelines** from the left menu. You will notice the dev and test environments
    are created:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流水线执行完成后，从左侧菜单导航到 **流水线** 下的 **环境**。你会注意到已经创建了开发和测试环境：
- en: '![Figure 16.20 – Environments'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.20 – 环境'
- en: '](img/Figure_16.20_B18507.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.20_B18507.jpg)'
- en: Figure 16.20 – Environments
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.20 – 环境
- en: 'Click on the **test** stage and in the more actions selection, select **Approvals
    and checks** to continue:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **测试** 阶段，在更多操作选择中，选择 **审批和检查** 以继续：
- en: '![Figure 16.21 – Approvals and checks'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.21_B18507.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.21 – Approvals and checks
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find many options to choose from, such as **Approvals**, **Branch
    control**, **Business Hours**, and so on:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.22 – Add checks'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.22_B18507.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.22 – Add checks
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Approvals** to continue and it will open a dialog where we can select
    users/groups as approvers. Provide the necessary details and click **Create**:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.23 – Add approvals'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.23_B18507.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.23 – Add approvals
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-run the pipeline to test the changes. You will notice the pipeline is waiting
    to execute at the test stage:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.24 – Multi-stage pipeline with pending approvals'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.24_B18507.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.24 – Multi-stage pipeline with pending approvals
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Review**, which will open a dialog to approve or reject. Click **Approve**
    to finish the deployment:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.25 – Approve or reject'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.25_B18507.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.25 – Approve or reject
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, in this section, we started with the creation of a new project
    in Azure DevOps, then cloned the repository to a local system, created a simple
    ASP.NET Core application using the .NET CLI, created a pipeline in YAML to build,
    test, and publish artifacts and deploy them to Azure App Service, and committed
    and pushed code back to the repository. Next, we created a new CI/CD pipeline
    by selecting a YAML file in our repository and triggered the pipeline. In **Environments**,
    we configured approval checks and triggered the pipeline to see how it works.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood what Azure DevOps is, as well as the tools and
    services it offers. We understood how services such as Boards, Repos, Pipelines,
    Test Plans, and Artifacts help us to efficiently execute a project.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Next, we looked at CI and CD pipelines and their core components. We also learned
    how they help us to automate the building and deployment of code. We concluded
    this chapter by learning how to create an ASP.NET 6 application, and a pipeline
    to build and deploy to Azure App Service using CI and CD pipelines.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: I hope this book has helped you to enhance your .NET skills and motivated you
    to try out and build more of its applications. There are further topics that you
    can explore by referring to the notes and the *Further reading* sections of the
    chapters.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: For enterprise applications, we have also covered the happy path scenarios for
    a typical e-commerce application, and it can be further extended based on the
    requirements defined in [*Chapter 1*](B18507_01_Epub.xhtml#_idTextAnchor020),
    *Designing and Architecting the Enterprise Application*. There are examples to
    extend the authentication/authorization for an end-to-end flow, using an API gateway
    for service-to-service communication and authentication, and implementing the
    notification service, for you to learn more.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: We wish you the best in your C# and .NET projects. Happy learning!
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does continuous deployment differ from CD?
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续部署与CD有何不同？
- en: a. CD works with databases and continuous deployment supports web applications.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: a. CD与数据库协同工作，而持续部署支持Web应用程序。
- en: b. Continuous deployment is released to an environment *every* time, whereas
    CD is released to an environment at *any* one time.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: b. 持续部署每次都发布到环境，而CD在任何一次都发布到环境。
- en: c. Continuous deployment requires the cloud, while CD works with on-premises
    servers.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: c. 持续部署需要云服务，而CD与本地服务器协同工作。
- en: d. Continuous deployment is released to an environment at *any* one time, whereas
    CD is released to an environment *every* time.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: d. 持续部署在任何一次都发布到环境，而CD每次都发布到环境。
- en: '**Answer: b**'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：b**'
- en: What are the characteristics of the CD approach? (Choose two)
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续部署方法的特点是什么？（选择两个）
- en: a. A focus on cycle time reduction
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: a. 专注于缩短周期时间
- en: b. A small amount of complex releases
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: b. 少量复杂发布
- en: c. Resource-based management of the process
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: c. 基于资源的流程管理
- en: d. Self-managed and responsive teams
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: d. 自我管理和响应性团队
- en: '**Answers : a and d**'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：a 和 d**'
- en: Which component provides the first feedback on the quality of committed application
    code changes?
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个组件提供了对提交的应用代码更改质量的首次反馈？
- en: a. Automated deployment
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: a. 自动部署
- en: b. Automated provisioning
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: b. 自动配置
- en: c. Automated build
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: c. 自动构建
- en: d. Automated test
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: d. 自动测试
- en: '**Answer: c**'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：c**'
- en: Further reading
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about Azure DevOps, you can refer to [https://docs.microsoft.com/en-in/azure/devops/user-guide/services?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/user-guide/services?view=azure-devops),
    and for pipelines, you can refer to [https://docs.microsoft.com/en-in/azure/devops/pipelines/get-started/pipelines-get-started?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/pipelines/get-started/pipelines-get-started?view=azure-devops).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于Azure DevOps的信息，您可以参考[https://docs.microsoft.com/en-in/azure/devops/user-guide/services?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/user-guide/services?view=azure-devops)，以及关于管道，您可以参考[https://docs.microsoft.com/en-in/azure/devops/pipelines/get-started/pipelines-get-started?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/pipelines/get-started/pipelines-get-started?view=azure-devops).
