- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Building a Simple Demo Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的演示应用
- en: In this chapter, we will build a very simple demo application that will form
    the basis and framework of the SaaS application that we will build out in subsequent
    chapters. The purpose of this chapter is to get familiar with all of the tools
    and techniques that we will leverage later in this book, and in our careers as
    builders of SaaS applications! Once we have this foundational knowledge and framework
    app, it will be much easier to start to build more complex functionality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们将构建一个非常简单的演示应用，这将成为我们在后续章节中构建的 SaaS 应用的基础和框架。本章节的目的是让你熟悉我们将在本书的后续部分以及作为
    SaaS 应用构建者职业生涯中利用的所有工具和技术！一旦我们有了这个基础知识和框架应用，开始构建更复杂的功能将会容易得多。
- en: Before we start building the framework application, we must first discover and
    install the tools that we will use. Then, we’ll build out the skeleton application.
    Once we have that working, then we will start to think about what would be required
    to flesh this out into a real-world SaaS application!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建框架应用之前，我们必须首先发现并安装我们将要使用的工具。然后，我们将构建骨架应用。一旦这个应用开始工作，我们再开始考虑将这个应用扩展成一个真正的
    SaaS 应用所需的内容！
- en: This chapter will give you a very brief look at a lot of different technologies.
    Please don’t feel overwhelmed! We are going to configure a dev environment from
    scratch, using Docker, and then we are going to initialize a database, API, and
    UI.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将简要介绍许多不同的技术。请不要感到不知所措！我们将从头开始配置一个开发环境，使用 Docker，然后初始化数据库、API 和 UI。
- en: This chapter uses a lot of different technologies, some of which you may not
    be familiar with. Don’t worry! Everything in this chapter is written out in detail,
    and anything that is skipped over quickly in this chapter will be explained fully
    in subsequent chapters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节使用了许多不同的技术，其中一些你可能不熟悉。不用担心！本章节中所有内容都写得非常详细，任何在本章节中快速跳过的内容都将在后续章节中详细解释。
- en: Developing SaaS applications, almost by definition, requires a wide array of
    different technologies. We will take a quick look at them all in this chapter,
    and then deepen our knowledge and understanding in subsequent chapters!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 开发 SaaS 应用，几乎可以说是定义上就需要广泛的不同技术。在本章节中，我们将快速浏览它们，然后在后续章节中深入我们的知识和理解！
- en: 'This chapter covers the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节涵盖了以下主要主题：
- en: Getting set up – installing the tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备工作 - 安装工具
- en: Building a simple example application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的示例应用
- en: Where do we go from here?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们接下来该做什么？
- en: By the end of the chapter, you’ll have built, installed, and configured your
    development environment, and you’ll have initialized all of the components required
    to build out a SaaS app. Hopefully, you will finish this chapter inspired to understand
    how we will make the most out of these tools and techniques!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章节结束时，你将已经构建、安装和配置了你的开发环境，并且初始化了构建 SaaS 应用所需的所有组件。希望你能在本章节结束时，对如何充分利用这些工具和技术感到启发！
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All code from this chapter can be found at [https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的所有代码都可以在[https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2)找到。
- en: Setting up
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: In this section, we’ll cover the tools that I recommend using to work through
    the examples in this book. Please note that there are not really any specific
    tools for building a SaaS application – the typical set of developer tools that
    you are probably accustomed to will do the job. However, I will refer to a specific
    set of tools in this book, and so I’ll describe them in this section, explain
    my selection, and cover how to install and configure the tools.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍我推荐用于完成本书示例的工具。请注意，实际上并没有专门用于构建 SaaS 应用的特定工具——你可能会习惯的典型开发者工具就可以完成这项工作。然而，本书中我将提到一组特定的工具，因此在本节中我将描述它们，解释我的选择，并介绍如何安装和配置这些工具。
- en: I am sure that any of the popular tools out there would be perfectly sufficient,
    so don’t feel like you *must* go with my selection, and feel free to use whatever
    you are most comfortable with! You should be able to adapt the examples to work
    with your tooling of choice.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信任何流行的工具都完全可以满足需求，所以请不要觉得您**必须**选择我的选择，您可以自由使用您最舒适的方式！您应该能够将示例适应到您选择的工具中。
- en: 'There are only two tools that need to be installed on your machine to follow
    along with the code that will be supplied in this book:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的机器上，只需安装两个工具即可跟随本书提供的代码：
- en: Docker Desktop
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Desktop
- en: Visual Studio Code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: These tools are fairly stable, and it is likely the best choice to use the latest
    version. For reference, I am using Docker v20.10.17 and VS Code v1.71.2.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具相当稳定，使用最新版本可能是最佳选择。为了参考，我正在使用Docker v20.10.17和VS Code v1.71.2。
- en: These tools are chosen deliberately as they are available for all operating
    systems, they are free to use, and they will give us a consistent base on which
    to work through the code examples. These are the two tools that I find most useful
    in my day-to-day work as a software developer! They are typically the first two
    applications that I install when building a new developer machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具被特意选择，因为它们适用于所有操作系统，它们是免费使用的，并且将为我们在代码示例中工作的基础提供一致性。这些是我作为软件开发者在日常工作中发现最有用的两个工具！通常，在构建新的开发者机器时，我会首先安装这两个应用程序。
- en: I’m going to use a neat trick with Docker to containerize the entire developer
    setup, which is why these two tools are the only ones that you need to install
    on your machine, and it is also the reason that I am confident that the example
    provided will work on any operating system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用Docker的一个巧妙技巧来容器化整个开发者设置，这就是为什么这两个工具是您需要在机器上安装的唯一工具，也是我为什么有信心提供的示例可以在任何操作系统上工作。
- en: Visual Studio Code
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: Visual Studio Code has gone from being a *lite* version of the full Visual Studio
    application to being an absolute workhorse for all manner of development work.
    With the availability of a massive range of extensions, it can be configured for
    just about any coding task, and then further modified to suit individual preferences.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code已经从全功能的Visual Studio应用程序的**轻量**版本转变为所有类型开发工作的绝对工作马。随着大量扩展的可用性，它可以配置为几乎任何编码任务，然后进一步修改以适应个人偏好。
- en: VSCode has become my IDE of choice for many different projects, but the real
    strength of a SaaS project is that it can be configured to support all of the
    different layers that will be built. You can add extensions for database development,
    API development, and UI development and build a highly customized developer environment
    that is specifically tailored to your project and your preferred tooling.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: VSCode已经成为我众多不同项目的首选IDE，但SaaS项目的真正优势在于它可以配置为支持将要构建的所有不同层。您可以添加用于数据库开发、API开发和UI开发的扩展，并构建一个高度定制的开发者环境，该环境专门针对您的项目和您首选的工具。
- en: 'Start by installing Visual Studio Code. This is done simply by clicking this
    URL and following the instructions for your operating system of choice: [https://code.visualstudio.com/download](https://code.visualstudio.com/download)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，安装Visual Studio Code。这可以通过点击此URL并遵循您选择的操作系统的说明来完成：[https://code.visualstudio.com/download](https://code.visualstudio.com/download)
- en: When VSCode is installed, you will also need to install a couple of extensions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装了VSCode后，您还需要安装几个扩展。
- en: 'You will need three extensions for VS Code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为VS Code安装三个扩展：
- en: Remote containers
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程容器
- en: Remote WSL
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Remote WSL
- en: Docker
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: 'The tags for the required extensions are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所需扩展的标签如下：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When VSCode is correctly configured, the **EXTENSIONS** pane should look like
    this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当VSCode正确配置后，**扩展**面板应该看起来像这样：
- en: '![Figure 2.1 – Visual Studio Code with extensions configured](img/B19343_Figure_2.1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 配置了扩展的Visual Studio Code](img/B19343_Figure_2.1.jpg)'
- en: Figure 2.1 – Visual Studio Code with extensions configured
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 配置了扩展的Visual Studio Code
- en: We will use a number of other extensions specific to the project, but these
    will be installed in a dev container for ease of use – more on this later!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些针对项目的其他特定扩展，但这些将在便于使用的开发容器中安装——关于这一点稍后会有更多介绍！
- en: Docker
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: Docker is a relatively recent addition to the developer toolbox, but it has
    quickly become completely invaluable for building and deploying applications.
    In more recent years, Docker has also become an incredible tool to encapsulate
    all of the setup required on a developer machine.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是开发者工具箱中相对较新的补充，但它很快就成为了构建和部署应用程序不可或缺的工具。在最近几年，Docker也成为了封装开发机器上所需的所有设置的不可思议的工具。
- en: Docker is a containerization tool. The principle at play is derived from shipping
    containers. Shipping containers are a standard size, which means that the machinery
    to move them and load them at the port and onto ships is completely standardized
    around the globe. Of course, what goes into the shipping containers can be anything
    from cars to cucumbers, but the infrastructure to move the containers is identical
    regardless.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个容器化工具。其原理来源于货柜。货柜是标准尺寸的，这意味着移动它们以及在内港和船只上装载它们的机械在全球范围内是完全标准化的。当然，货柜里可以装任何东西，从汽车到黄瓜，但移动容器的基础设施是相同的。
- en: This principle is applied to software packaged with Docker. Whatever software
    tool is to be run is put inside a Docker container – analogous to a shipping container
    – and the Docker infrastructure is then used to run the container.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则适用于使用Docker打包的软件。任何要运行的软件工具都被放入一个Docker容器中——类似于一个货柜——然后使用Docker基础设施来运行这个容器。
- en: You can consider a container to be a tiny virtual machine, or maybe an executable
    of its own. The important thing to keep in mind is that any piece of code, application,
    service, and so on that has been placed inside a Docker container will run on
    any computer with Docker installed. Furthermore, it will run (or not run!) in
    an identical way regardless of whether or not the host operating system is Windows,
    Mac, or Linux.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将容器视为一个微型的虚拟机，或者可能是它自己的可执行文件。重要的是要记住，任何被放入Docker容器中的代码、应用程序、服务等等，都可以在任何安装了Docker的计算机上运行。此外，它将以相同的方式（或不会）运行，无论主机操作系统是Windows、Mac还是Linux。
- en: This concept of containers is fantastic for shipping running software. I can
    now pull a Docker image for just about any software utility I can think of, and
    no matter what platform I am working with, I can execute that software.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种容器概念对于运输运行中的软件来说非常棒。我现在可以拉取几乎任何我能想到的软件实用程序的Docker镜像，无论我在什么平台上工作，我都可以执行那个软件。
- en: From a software provider’s point of view, the huge benefit is that they can
    be certain that their code will run correctly on my machine because it’s running
    against a standard platform – Docker!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从软件供应商的角度来看，巨大的好处是，他们可以确信他们的代码在我的机器上能够正确运行，因为它是运行在一个标准平台上的——Docker！
- en: You may be wondering why this is important when it comes to setting up a developer
    environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道，当涉及到设置开发者环境时，这为什么很重要。
- en: Dev containers are a relatively new but extremely powerful concept that can
    take all of the power that Docker has when running applications and apply that
    to developing applications. It is now possible to configure an entire dev environment
    – with all of the associated dependencies – and put all of that in a container!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 开发容器是一个相对较新但极其强大的概念，可以将Docker在运行应用程序时的所有功能应用到开发应用程序上。现在，可以配置整个开发环境——包括所有相关的依赖项——并将所有这些放入一个容器中！
- en: This may not be of the utmost importance for a more basic project, but a SaaS
    application is rarely a basic project.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能对更基础的项目来说不是最重要的，但SaaS应用程序很少是基础项目。
- en: 'The nature of a SaaS application typically requires that many project-specific
    tools are installed on each developer machine. Worse, it is very common that specific
    versions of the tools will be required, which can often make the initial setup
    for new team members particularly painful. These tools can include the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序的本质通常要求在每个开发者机器上安装许多特定项目的工具。更糟糕的是，通常需要特定版本的工具，这往往会使新团队成员的初始设置特别痛苦。这些工具可能包括以下内容：
- en: A database platform
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库平台
- en: A framework, such as .NET – very often with specific version requirements
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个框架，如.NET——通常有特定的版本要求
- en: Package management, such as NPM or NuGet
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件包管理，如NPM或NuGet
- en: A web server of some kind for the frontend
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端某种类型的Web服务器
- en: A huge number of CLI tools
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数量庞大的CLI工具
- en: And many other dev tools
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及许多其他开发工具
- en: If your dev team supports multiple projects – as is often the case – this can
    become a real pain point.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的开发团队支持多个项目——这种情况很常见——这可能会成为一个真正的痛点。
- en: I try to use dev containers as much as I possibly can to wrap up dependencies,
    and I will use this technique in the examples in this book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我会尽可能多地使用开发容器来封装依赖项，并在本书的示例中使用这项技术。
- en: Please note that Docker is an enormous topic in itself, and it is out of the
    scope of this book to cover it in any sort of depth. I will cover just enough
    to get familiar with the techniques that I am using, and leave it up to the reader
    to do more of a deep dive into all things Docker!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Docker本身是一个庞大的主题，本书的范围不包括对其进行深入探讨。我将只介绍足够的内容，以便熟悉我使用的技术，并将更深入的探索留给读者自行完成！
- en: Dev containers
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发容器
- en: As developers, we all have our favorite set of tools that we work with on a
    day-to-day basis. This will start with our choice of operating system, and from
    there we will pick IDEs, database platforms, frontend frameworks, and all of the
    associated tooling.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们每个人都有自己每天工作中最喜欢的工具集。这将从我们选择的操作系统开始，然后我们将选择IDE、数据库平台、前端框架以及所有相关的工具。
- en: This huge variety of systems, tools, platforms, and frameworks provides a challenge
    for the author of a book describing how to build a SaaS platform…
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这么多系统、工具、平台和框架的多样性，对撰写如何构建SaaS平台书籍的作者来说是一个挑战...
- en: In order for the tutorials in this book to appeal to the broadest range of developers
    possible, I am going to make use of a relatively new concept known as **Dev Containers**.
    This allows us to configure a Docker container to do all of our development. This
    will give you a consistent platform with which to work and will ensure that all
    of the examples that are provided will work on literally any machine.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使本书的教程尽可能吸引广泛的开发者，我将使用一个相对较新的概念，称为**开发容器**。这允许我们配置一个Docker容器来完成所有开发工作。这将为你提供一个一致的工作平台，并确保提供的所有示例在实际上任何机器上都能运行。
- en: Making use of dev containers gives us a completely consistent development platform
    to work with so that we can be sure that all readers of this book will be able
    to run the example code that is provided, but there is a small configuration overhead
    to get started.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 利用开发容器，我们可以获得一个完全一致的开发平台来工作，这样我们就可以确保本书的所有读者都能够运行提供的示例代码，但启动时需要一些小的配置开销。
- en: What is a dev container?
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是开发容器？
- en: Continuing with the analogy of a shipping container, a dev container is simply
    a wrapper around the myriad of developer tools that you will use when working
    on the code in this book.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用运输容器的类比，开发容器只是围绕你在本书代码工作中使用的各种开发者工具的一个包装。
- en: 'Broadly speaking, the tools and services that will be required are the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 广义而言，所需的工具和服务如下：
- en: A database platform
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库平台
- en: The .NET SDK
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET SDK
- en: Extensions to support database development
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持数据库开发的扩展
- en: Extensions to support API development
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持API开发的扩展
- en: Extensions to support frontend and Blazor development
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持前端和Blazor开发的扩展
- en: All of the above will be packaged up in a dev container.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都将被打包进一个开发容器中。
- en: Configuring the Docker containers
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Docker容器
- en: The code for this first example is available at [https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2).
    Either clone the repo or follow through with this example setup.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个示例的代码可在[https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-2)找到。你可以克隆仓库或按照这个示例设置进行操作。
- en: If you are following along, then start by creating a new folder that will form
    the root of your project, and then open that folder in VSCode. This is a completely
    blank canvas, but by the end of this chapter, we will have the skeleton framework
    for a functioning SaaS application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在跟随，那么首先创建一个新的文件夹，这个文件夹将成为你项目的根目录，然后在该文件夹中打开VSCode。这是一个完全空白的画布，但到本章结束时，我们将拥有一个功能SaaS应用的骨架框架。
- en: 'Start by creating the following folder and file structure:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建以下文件夹和文件结构：
- en: '![Figure 2.2 – Expected folder structure](img/B19343_Figure_2.2.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 预期文件夹结构](img/B19343_Figure_2.2.jpg)'
- en: Figure 2.2 – Expected folder structure
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 预期文件夹结构
- en: With the folder structure created, we can now start to fill out these files.
    We’ll start with the Dockerfile in the `dev-env` folder. This will be used to
    configure the developer environment and will contain the instructions to install
    the tools that will be used to build the application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建文件夹结构后，我们现在可以开始填充这些文件。我们将从 `dev-env` 文件夹中的 Dockerfile 开始。这将用于配置开发环境，并将包含安装用于构建应用程序的工具的指令。
- en: Dockerfile
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dockerfile
- en: 'Open the file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And paste in the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后粘贴以下内容：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This configures the developer environment to facilitate .NET application development.
    Let’s go through this in detail. The first line determines the version of .NET
    that will be used:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这配置了开发环境以促进 .NET 应用程序开发。让我们详细了解一下。第一行确定将使用的 .NET 版本：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We are using 7.0, which is the latest version at the time of writing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是 7.0，这是撰写本文时的最新版本。
- en: 'Next, the version of Node is configured:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，配置 Node 的版本：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: No node version is installed. It is often useful to enable node or npm, but
    they are not needed at present.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 没有安装任何 Node 版本。启用 node 或 npm 通常很有用，但目前在当前情况下并不需要。
- en: 'The next command is used to install any packages or tools that you may want
    to use:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令用于安装您可能想要使用的任何包或工具：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command updates the package manager and installs the Vim CLI tool, which
    we will use later.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令更新包管理器并安装我们将稍后使用的 Vim CLI 工具。
- en: 'The above has all been a “standard” configuration of the environment. Next,
    we will add some bespoke customizations that will allow us to make use of Entity
    Framework:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容都是环境的“标准”配置。接下来，我们将添加一些定制化配置，这将使我们能够使用 Entity Framework：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command installs the .NET **Entity Framework** (**EF**) tools that we will
    use to interact with the database.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令安装我们将用于与数据库交互的 .NET **Entity Framework**（**EF**）工具。
- en: 'Finally, we will add the dot net tools to the `path` variable so that we are
    able to make use of them from the command line:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将 dot net 工具添加到 `path` 变量中，这样我们就可以从命令行使用它们：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Sqlserver.env
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sqlserver.env
- en: 'This file simply sets some environment variables for the SQL Server instance
    that we will spin up shortly. Copy in the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件仅设置一些环境变量，用于我们即将启动的 SQL Server 实例。复制以下内容：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It should go without saying that passwords should never be used in any environment
    other than this example! Also, note that checking in passwords is extremely bad
    practice, and should not be done when working on a production application. We
    will remedy this when we talk about security in [*Chapter 8*](B19343_08.xhtml#_idTextAnchor200)*.*
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 应该不用说，密码永远不应该在任何环境（除了这个示例）中使用！另外，请注意，将密码提交到版本控制是极其糟糕的做法，在开发生产应用程序时不应这样做。我们将在讨论安全性的[*第
    8 章*](B19343_08.xhtml#_idTextAnchor200)*中解决这个问题*。
- en: Docker-compose.yaml
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker-compose.yaml
- en: This is where things get interesting. Docker Compose is a tool that lets us
    use multiple containers at the same time. It is a container orchestration tool!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里事情变得有趣。Docker Compose 是一个工具，它允许我们同时使用多个容器。它是一个容器编排工具！
- en: 'Paste the following into the `docker-compose` file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容粘贴到 `docker-compose` 文件中：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding commands for Docker Compose tie everything that we have done together.
    With this script, we can start up a set of Docker containers that allow us to
    build the API, and the UI, and also interact with a database – all without having
    to install anything directly on the host machine!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 Docker Compose 命令将我们所做的一切整合在一起。有了这个脚本，我们可以启动一组 Docker 容器，允许我们构建 API、UI，并且与数据库交互——所有这些都不需要在主机机器上直接安装任何东西！
- en: 'To recap: we have constructed a container called `dev-env` that is specific
    to our requirements. We have also provisioned a container with an instance of
    SQL Server 2022 running in it that will serve as our database platform.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下：我们已经构建了一个名为 `dev-env` 的容器，它符合我们的需求。我们还配置了一个包含 SQL Server 2022 实例的容器，该实例将作为我们的数据库平台。
- en: Running the containers
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行容器
- en: That is all of the Docker-specific configurations. Now we will run the containers
    and start to interact.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是所有的 Docker 特定配置。现在我们将运行容器并开始交互。
- en: 'We have built a Docker-based environment – now it’s time to start it up. To
    do this, open VSCode, open a new terminal, and enter the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了一个基于 Docker 的环境——现在是时候启动它了。为此，打开 VSCode，打开一个新的终端，并输入以下内容：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Your terminal should look like the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您的终端应该看起来像以下这样：
- en: '![Figure 2.3 – Expected output](img/B19343_Figure_2.3.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 预期输出](img/B19343_Figure_2.3.jpg)'
- en: Figure 2.3 – Expected output
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 预期输出
- en: This can take a while the first time you run this command, but it is significantly
    faster in subsequent uses. This command will start up the services that are described
    in the `docker compose` file. Namely, a SQL Server instance, and the developer
    environment that we configured with .NET 6.0 and Entity Framework.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行此命令可能需要一些时间，但在后续使用中会显著更快。此命令将启动 `docker compose` 文件中描述的服务。具体来说，是一个 SQL
    Server 实例，以及我们使用 .NET 6.0 和 Entity Framework 配置的开发环境。
- en: 'With the above, we have created a container with .NET and Entity Framework
    installed. You can convince yourself that we have actually achieved that by trying
    the following. Open a new terminal in VSCode and enter the following to `exec`
    into the dev-env container:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以上步骤，我们已经创建了一个安装了 .NET 和 Entity Framework 的容器。你可以通过尝试以下操作来证实我们确实实现了这一点。在 VSCode
    中打开一个新的终端，并输入以下命令以 `exec` 进入 dev-env 容器：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `exec` command allows interactions with an already running container through
    the terminal.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec` 命令允许通过终端与已运行的容器进行交互。'
- en: 'Running the preceding command will open an interactive terminal in the `dev-env`
    Docker container where we can check to see whether the .NET and EF tools are correctly
    installed by typing the following into the console that was opened by the preceding
    `exec` command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令将在 `dev-env` Docker 容器中打开一个交互式终端，我们可以在通过前面的 `exec` 命令打开的控制台中输入以下内容来检查
    .NET 和 EF 工具是否正确安装：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding commands should return the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令应该返回以下内容：
- en: '![Figure 2.4 – Expected terminal output](img/B19343_Figure_2.4.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 预期终端输出](img/B19343_Figure_2.4.jpg)'
- en: Figure 2.4 – Expected terminal output
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 预期终端输出
- en: 'Next, we can do something similar to ensure the SQL Server container is running.
    Again, open a new terminal in VSCode and enter the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以执行类似的操作以确保 SQL Server 容器正在运行。再次，在 VSCode 中打开一个新的终端，并输入以下内容：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Again, this will open another interactive terminal in the `sqlserver` container.
    You can convince yourself of this by typing the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这将在 `sqlserver` 容器中打开另一个交互式终端。你可以通过输入以下内容来证实这一点：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And when prompted, enter the password from the `sqlserver.env` file (`Password1`)
    to enter the SQL Server command-line interface. You can do simple checks on the
    database platform, such as checking the version:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时，输入 `sqlserver.env` 文件中的密码（`Password1`）以进入 SQL Server 命令行界面。你可以对数据库平台进行简单的检查，例如检查版本：
- en: '![Figure 2.5 – Checking the version](img/B19343_Figure_2.5.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 检查版本](img/B19343_Figure_2.5.jpg)'
- en: Figure 2.5 – Checking the version
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 检查版本
- en: At this point, we have done all of the Docker container setups, but the only
    way that we can interact with our environments is to use the command line, and
    these days, that is not really acceptable! Thankfully, Visual Studio Code has
    a neat trick up its sleeve!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完成了所有的 Docker 容器设置，但我们与我们的环境交互的唯一方式是使用命令行，而如今这并不是一个真正可接受的做法！幸运的是，Visual
    Studio Code 有一个巧妙的技巧！
- en: Configuring dev containers in VSCode
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 VSCode 中的 dev 容器
- en: You will remember that we installed the `Remote Containers` extension for VSCode.
    This will allow us to open an instance of VSCode that makes use of the Docker
    containers that we have set up previously. This will require a little bit of additional
    configuration, but once set up, it will “just work” for the remainder of the project!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得我们为 VSCode 安装了 `Remote Containers` 扩展。这将允许我们打开一个 VSCode 实例，该实例利用了我们之前设置的
    Docker 容器。这需要一些额外的配置，但一旦设置好，它将在项目的剩余部分“正常工作”！
- en: 'Start by creating a folder called `dev-env` in the project root:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在项目根目录下创建一个名为 `dev-env` 的文件夹：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is where VSCode will look to get the configuration.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 VSCode 将查找以获取配置的地方。
- en: 'In this folder, create a file called `devcontainer.json`. Your folder structure
    should look like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件夹中创建一个名为 `devcontainer.json` 的文件。你的文件夹结构应该如下所示：
- en: '![Figure 2.6 – Folder structure](img/B19343_Figure_2.6.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 文件夹结构](img/B19343_Figure_2.6.jpg)'
- en: Figure 2.6 – Folder structure
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 文件夹结构
- en: 'In the `devcontiner.json` file, paste the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `devcontainer.json` 文件中，粘贴以下内容：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s go through this line by line. The following line of code tells VSCode
    where to look for the `docker compose` file. This is the file that we created
    previously, which configures the two Docker containers:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析。以下代码行告诉 VSCode 在哪里查找 `docker compose` 文件。这是我们之前创建的文件，它配置了两个 Docker 容器：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following line simply tells VSCode that the container named `dev-env` is
    the primary container:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行只是告诉 VSCode，名为 `dev-env` 的容器是主要容器：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next line defines a working folder inside the container – more on this
    shortly:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行定义了容器内部的工作文件夹——稍后将有更多介绍：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is quite clever including the dev container configuration. This
    section allows us to define which extensions we want to have available to us when
    we start to work in the dev container. I have listed three extensions to get us
    started, but this list will grow as the project gains complexity:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容相当巧妙，包括开发容器配置。本节允许我们定义在开始使用开发容器工作时希望可用的扩展。我已经列出三个扩展以供开始，但随着项目的复杂化，这个列表将会增长：
- en: '[PRE20]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is a particularly clever addition from Microsoft because this allows the
    VSCode configuration to exist as JSON within the project. This file is checked
    into the repo and moved with the code, meaning that any time a new team member
    pulls this repo, they will immediately have a fully configured editor that is
    specific to the project.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从微软来的一个特别巧妙的补充，因为这允许 VSCode 配置作为 JSON 格式存在于项目中。此文件已提交到仓库并与代码一起移动，这意味着任何新团队成员拉取此仓库时，他们都将立即拥有一个针对项目完全配置的编辑器。
- en: We have all become familiar with *infrastructure as code* in recent years. Using
    a dev container allows you to configure the *developer environment as code*. Doing
    this makes it incredibly easy to onboard new team members, and also means the
    end of *well, it works on my machine*. Using this technique means that everyone
    is working on a completely consistent platform, regardless of the physical hardware,
    the operating system choice, or the specific version of .NET or Node.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，我们都熟悉了 *基础设施即代码*。使用开发容器允许你将 *开发者环境作为代码进行配置*。这样做使得接纳新团队成员变得极其容易，同时也意味着“好吧，在我的机器上它运行正常”的时代的结束。使用这种技术意味着无论物理硬件、操作系统选择，还是
    .NET 或 Node 的具体版本，每个人都在一个完全一致的平台上进行工作。
- en: This is a huge win for developing SaaS applications, given the complex and often
    arduous route to getting a new team member up and running.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发 SaaS 应用程序来说，这是一个巨大的胜利，因为新团队成员从零开始的过程既复杂又艰难。
- en: Starting the environment
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动环境
- en: That is the end of the configuration. I hope that we are all now working on
    a consistent and predictable platform, and will have no trouble following along
    with the examples in this book!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是配置的结束。我希望我们现在都在一个一致且可预测的平台上进行工作，并且不会在跟随本书中的示例时遇到任何麻烦！
- en: 'To start the environment in Docker, hit *F1* to open the command menu, and
    search for `Remote-Containers: Rebuild and Reopen` `in Container`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '要在 Docker 中启动环境，按 *F1* 打开命令菜单，并搜索 `Remote-Containers: Rebuild and Reopen` `in
    Container`。'
- en: You will see the options in *Figure 2**.7* appear. Select the first one and
    hit *Enter* to continue.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在 *图 2.7* 中看到选项。选择第一个并按 *Enter* 继续操作。
- en: '![Figure 2.7 – Rebuild and Reopen in Container](img/B19343_Figure_2.7.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 在容器中重建和重新打开](img/B19343_Figure_2.7.jpg)'
- en: Figure 2.7 – Rebuild and Reopen in Container
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 在容器中重建和重新打开
- en: This will close the current instance of VSCode, and reopen a new instance that
    is operating out of the `dev-env` container that was configured previously. Note
    that this can take some time the first time you do it, but it is faster in subsequent
    uses.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将关闭当前的 VSCode 实例，并重新打开一个新实例，该实例在之前配置的 `dev-env` 容器中运行。请注意，第一次这样做可能需要一些时间，但在后续使用中会更快。
- en: 'You will notice a few differences! First of all, look in the bottom-left corner,
    and you will see that you are running in a dev container called `SaaS Book`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到一些差异！首先，看看左下角，你会看到你正在运行一个名为 `SaaS Book` 的开发容器：
- en: '![](img/B19343_Icon.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19343_Icon.jpg)'
- en: If you click to view the installed extensions, you will see a separate pane
    that shows the extensions that are installed in this instance of VSCode match
    the extensions specified in the `devcontainers.json` file. This list will start
    to grow significantly as the project takes shape throughout the course of this
    book.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击查看已安装的扩展，你将看到一个单独的面板，显示 VSCode 此实例中安装的扩展与 `devcontainers.json` 文件中指定的扩展匹配。随着本书的进行，项目逐渐成形，这个列表将显著增长。
- en: '*Figure 2**.8* shows some of the extensions that are installed in the container:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2.8* 展示了一些在容器中安装的扩展：'
- en: '![Figure 2.8 – Installed extensions](img/B19343_Figure_2.8.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 已安装的扩展](img/B19343_Figure_2.8.jpg)'
- en: Figure 2.8 – Installed extensions
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 已安装的扩展
- en: 'If you open a terminal, you will also notice that this is a Linux environment.
    You can convince yourself of that by checking the version by running the following
    code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开一个终端，你也会注意到这是一个 Linux 环境。你可以通过运行以下代码来验证这一点：
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You’ll see the following output:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![Figure 2.9 – Output](img/B19343_Figure_2.9.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 输出](img/B19343_Figure_2.9.jpg)'
- en: Figure 2.9 – Output
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 输出
- en: This shows that we are in a Debian environment. Notice also that we are working
    in a folder called `workspace`, which is what was configured in the `devcontainer.json`
    file previously. This is configurable as per your preferences.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们处于 Debian 环境。请注意，我们正在一个名为 `workspace` 的文件夹中工作，这是之前在 `devcontainer.json`
    文件中配置的。这是可配置的，根据您的偏好。
- en: 'To further convince ourselves that this is indeed the `dev-env` container that
    we configured earlier, you can check the .NET, and the Entity Framework versions
    again in the terminal in VSCode:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步确信这确实是之前配置的 `dev-env` 容器，你可以在 VSCode 的终端中再次检查 .NET 和 Entity Framework 的版本：
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will see the following output:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![Figure 2.10 – Terminal output](img/B19343_Figure_2.10.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 终端输出](img/B19343_Figure_2.10.jpg)'
- en: Figure 2.10 – Terminal output
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 终端输出
- en: 'That is the environment configured to the extent that is currently required.
    Let’s recap:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是目前所需的配置环境。让我们回顾一下：
- en: We have a container that has the .NET SDK installed, ready to use to build any
    kind of .NET applications.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个安装了 .NET SDK 的容器，准备好用于构建任何类型的 .NET 应用程序。
- en: The same container has Entity Framework command-line tools installed so that
    we can use Entity Framework to build and interact with a database. You will recall
    that we have installed Entity Framework in the Dockerfile.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同一个容器安装了 Entity Framework 命令行工具，这样我们就可以使用 Entity Framework 来构建和与数据库交互。你可能会记得我们在
    Dockerfile 中安装了 Entity Framework。
- en: We have a separate container running SQL Server, which hosts the database that
    we can interact with. It is worth noting that we have not installed SQL Server
    itself on the host machine. We have access to the database via a Docker container.
    You will see more of this in [*Chapter 3*](B19343_03.xhtml#_idTextAnchor082) and
    [*Chapter 4*](B19343_04.xhtml#_idTextAnchor102).
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个运行 SQL Server 的独立容器，它托管了我们可以与之交互的数据库。值得注意的是，我们并没有在主机机器上安装 SQL Server 本身。我们通过
    Docker 容器访问数据库。你将在 [*第 3 章*](B19343_03.xhtml#_idTextAnchor082) 和 [*第 4 章*](B19343_04.xhtml#_idTextAnchor102)
    中看到更多关于这一点的内容。
- en: This is now the basis of a developer machine that can be used to build SaaS
    applications, and we have achieved this without ever having to install any of
    these tools directly on the machine that you are working on – everything is packaged
    up in Docker containers. This configuration exists as code, and as such it moves
    with the repo. Any developer who clones this repository locally will immediately
    have access to all of the project-specific tools and configurations.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这现在是一个可以用来构建 SaaS 应用程序的开发者机器的基础，我们没有在您正在工作的机器上直接安装任何这些工具就实现了这一点——所有这些都打包在 Docker
    容器中。这个配置作为代码存在，因此它随着仓库移动。任何克隆此仓库的本地开发者都将立即获得所有项目特定的工具和配置。
- en: As we progress through this project, this setup will become more complex. It
    will grow as the project grows. But this is sufficient for now, so we will leave
    it here and start to piece together a very basic application.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在这个项目中的进展，这个设置将变得更加复杂。随着项目的增长，它也会增长。但就目前而言，这已经足够了，所以我们将在这里停止，并开始拼凑一个非常基础的应用程序。
- en: Configuring VSCode
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 VSCode
- en: 'At this early stage, there is not much config required, as we do not really
    have any application-specific code. However, we’ll lay the groundwork here. Open
    a terminal, and enter the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个早期阶段，由于我们没有真正有应用程序特定的代码，所以不需要很多配置。然而，我们将在这里打下基础。打开一个终端，并输入以下内容：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following into `settings.json`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `settings.json` 中：
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding is some config for an HTTP testing tool that we will make use
    of in [*Chapter 5*](B19343_05.xhtml#_idTextAnchor116). We don’t need to put anything
    into `launch.json` or `tasks.json` yet.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置是一些我们将用于 [*第 5 章*](B19343_05.xhtml#_idTextAnchor116) 的 HTTP 测试工具的配置。目前我们不需要在
    `launch.json` 或 `tasks.json` 中放入任何内容。
- en: That should be all the configuration that is required for the time being, so
    we can move on.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该是目前所需的全部配置，因此我们可以继续前进。
- en: Exiting the environment
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 退出环境
- en: 'Getting out of the dev container environment and back to your host is straightforward.
    Simply hit *F1* again and search for `Reopen` `Folder Locally`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发容器环境退出并返回到主机非常简单。只需再次按 *F1* 并搜索“在本地重新打开文件夹”：
- en: '![Figure 2.11 – Return to the local workspace](img/B19343_Figure_2.11.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 返回本地工作区](img/B19343_Figure_2.11.jpg)'
- en: Figure 2.11 – Return to the local workspace
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 返回本地工作区
- en: This will quickly return you to the host. You will no longer see the indicator
    in the lower-left corner that you are in a dev container, and the terminal will
    again connect directly to the host machine.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这将迅速将你带回到主机环境。你将不再看到左下角的指示器，表明你处于开发容器中，终端将再次直接连接到主机机器。
- en: We have achieved a lot in this section, and we have set ourselves up to start
    working in a Dockerized environment. This may seem like a bit more work than simply
    starting to write code on your local machine, but I hope that as we proceed through
    this book together, you will start to see the value in taking the time to build
    out this environment right at the start of the project!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中取得了许多成果，并为自己搭建了一个开始使用 Docker 化环境的平台。这可能会感觉比直接在本地机器上编写代码要麻烦一些，但我希望随着我们一起阅读这本书，你将开始看到在项目一开始就花费时间搭建这个环境的价值！
- en: In the next section, we’ll really start to build out the application and start
    to show the power of the preceding techniques.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将真正开始构建应用程序，并展示前面技术的能力。
- en: Building out a sample application
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建示例应用程序
- en: In this section, we’ll use the tools that we have just installed to create a
    very basic wireframe for a SaaS application. At this point, this will simply be
    a skeleton application that we can build out much more fully in subsequent chapters.
    However, this will introduce us to all of the different tools that we will be
    using.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用刚刚安装的工具来创建一个 SaaS 应用程序的基础框架。目前，这仅仅是一个可以后续章节中更加完善的基础应用程序。然而，这将让我们熟悉我们将要使用到的所有不同工具。
- en: The sample application that we will build as we work through this book will
    be an application to track a habit – something that you may like to try to do
    every day – such as learning a new language, or writing a few pages of a book
    in order to stay up to date with your publishing deadlines! I hope that this is
    something that you may be able to make use of after you have finished working
    through this book!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们阅读本书的过程中，我们将构建的示例应用程序是一个跟踪习惯的应用程序 – 这可能是一天中你可能想尝试做的事情，比如学习一门新语言，或者为了跟上出版截止日期而写几页书！我希望这将是你在完成本书后可能能够使用到的东西！
- en: Database technologies
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库技术
- en: We will start with the database. We are using SQL Server as the database platform
    – this is a book based on Microsoft technologies, so we will stick with them as
    much as possible! However, other database platforms are available, and can easily
    be used. The Docker-based setup provided above makes it very easy to experiment
    with other database platforms. You can replace the SQL Server container with a
    Postgres container and see if everything still works!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从数据库开始。我们使用 SQL Server 作为数据库平台 – 这是一本基于微软技术的书，所以我们将尽可能坚持使用它们！然而，其他数据库平台也是可用的，并且可以轻松使用。上面提供的基于
    Docker 的设置使得实验其他数据库平台变得非常容易。你可以用 Postgres 容器替换 SQL Server 容器，看看一切是否仍然正常工作！
- en: The database and the database platform are often a source of some pain when
    getting developers onboarded and up to speed on a project. This is particularly
    evident in a SaaS project and is only partly mitigated using the Dockerized solution
    above.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库和数据库平台在让开发者加入项目并快速熟悉项目时常常是痛点之一。这在 SaaS 项目中尤为明显，而且使用上述 Docker 化解决方案只能部分缓解。
- en: It is very common these days to make use of an **Object Relational Mapper**
    (**ORM**) to manage the interactions between the code and the database, and this
    is a pattern that I will adhere to in this book. I will be using Entity Framework
    for all interactions initially, but note that when we discuss performance and
    scaling, I will touch on other techniques that can be used when database performance
    is paramount.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用对象关系映射器（**ORM**）来管理代码与数据库之间的交互非常普遍，我将在本书中遵循这一模式。最初，我将使用 Entity Framework
    进行所有交互，但请注意，当我们讨论性能和扩展时，我会涉及到其他在数据库性能至关重要的时刻可以使用的技巧。
- en: I will make use of Entity Framework’s “code-first” approach to define the database
    and populate it with some initial startup data, and I’ll make use of the migrations
    to keep the database up to date. This will come in very handy in later chapters
    when we talk about testing with a database, and also when we look at CI/CD and
    how to update a production database.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我将利用Entity Framework的“代码优先”方法来定义数据库，并用一些初始启动数据填充它，同时我会利用迁移来保持数据库的更新。这在后续章节中会非常有用，当我们讨论使用数据库进行测试时，以及当我们查看CI/CD和如何更新生产数据库时。
- en: Creating the database
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数据库
- en: 'Make sure that you are in the dev container (check the bottom left of VSCode)
    and open a new terminal. Use the terminal to create a new .NET class library called
    `GoodHabits.Database` with the following code:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你处于开发容器中（检查VSCode的左下角）并打开一个新的终端。使用终端创建一个新的.NET类库，名为`GoodHabits.Database`，代码如下：
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see the folder appear in File Explorer, and the following output
    in the terminal:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在文件资源管理器中看到文件夹出现，并在终端中看到以下输出：
- en: '![Figure 2.12 – Create the database](img/B19343_Figure_2.12.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图2.12 – 创建数据库](img/B19343_Figure_2.12.jpg)'
- en: Figure 2.12 – Create the database
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12 – 创建数据库
- en: 'Before we can use this project to interact with the database, we need to add
    a few NuGet packages. So, again, in the terminal, enter the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够使用此项目与数据库交互之前，我们需要添加一些NuGet包。所以，再次在终端中输入以下内容：
- en: '[PRE26]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: With the preceding, we have instructed the .NET CLI to add all of the required
    NuGet packages to facilitate interactions with the database. We have also added
    a `GoodHabitsDbContext` class, a `SeedData` class, and a `Habit` class. We’ll
    now add some basic setup into these three files that will give us a foundation
    to work on in later chapters.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们已经指导.NET CLI添加了所有必要的NuGet包，以方便与数据库交互。我们还添加了`GoodHabitsDbContext`类、`SeedData`类和`Habit`类。现在，我们将在这三个文件中添加一些基本的设置，这将为我们后续章节的工作提供一个基础。
- en: 'Enter the following code into the `Habits.cs` file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Habits.cs`文件中输入以下代码：
- en: '[PRE27]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The above is a very straightforward entity class representing a habit that a
    user of the app may want to embed into their day-to-day lives.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码是一个非常简单的实体类，代表一个用户可能希望嵌入其日常生活中的习惯。
- en: 'Next, add some dummy data, by adding the following code to the `SeedData.cs`
    file:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过在`SeedData.cs`文件中添加以下代码添加一些模拟数据：
- en: '[PRE28]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now create a `DbContext` by entering the following code into the `GoodHabitsDbContext.cs`
    file:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过在`GoodHabitsDbContext.cs`文件中输入以下代码创建一个`DbContext`：
- en: '[PRE29]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This does a few things. Firstly, we define a `DbSet`. This is mapped onto a
    table in the database.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这做了几件事情。首先，我们定义了一个`DbSet`。这映射到数据库中的一个表。
- en: Next, we hardcode the database connection string. Of course, it is bad practice
    to hardcode the connection string, and doubly bad to have the password there in
    plain text. We will correct these errors in [*Chapter 3*](B19343_03.xhtml#_idTextAnchor082),
    but this is sufficient to prove that we are connected to the database.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将硬编码数据库连接字符串。当然，硬编码连接字符串是不良的做法，将密码以明文形式放在那里更是双倍的不良做法。我们将在[*第3章*](B19343_03.xhtml#_idTextAnchor082)中纠正这些错误，但这对证明我们已经连接到数据库是足够的。
- en: With this setup done, we can test this out and see whether we can migrate this
    information into the SQL Server database that we have running in a second Docker
    container.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成此设置后，我们可以测试一下，看看我们是否可以将这些信息迁移到我们在第二个Docker容器中运行的SQL Server数据库中。
- en: 'To do this, let’s start by using Entity Framework to create an initial migration.
    Enter the following into the terminal to generate the initial migration:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，让我们首先使用Entity Framework创建一个初始迁移。在终端中输入以下内容以生成初始迁移：
- en: '[PRE30]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You will see a `Migrations` folder has appeared in File Explorer with the `InitialSetup`
    migration modeled as a class. You don’t have to worry too much about this at present,
    but it’s worth taking the time to have a look at this class.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在文件资源管理器中看到一个名为`Migrations`的文件夹，其中`InitialSetup`迁移被建模为一个类。目前你不必过于担心这个，但花时间看看这个类是值得的。
- en: 'Then enter the following to deploy the migration to the SQL Server database:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下内容以将迁移部署到SQL Server数据库：
- en: '[PRE31]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This sends the migration to the database.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这将迁移发送到数据库。
- en: And that is it for now. We have configured a basic database using Entity Framework
    in “code-first” mode, and have sent the first migration to the database.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止。我们已经使用Entity Framework在“代码优先”模式下配置了一个基本的数据库，并将第一个迁移发送到数据库。
- en: How do we know that this has worked?
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何知道这已经成功了？
- en: It’s one thing to understand that the command has been executed successfully,
    but seeing is believing, and we need to dip into the database to really be sure
    that all of this is actually working as expected.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 理解命令已成功执行是一回事，但眼见为实，我们需要深入数据库以确保所有这一切确实按预期工作。
- en: 'You will notice that when we defined the extensions that we wanted to be installed
    in the dev container, we specified the following extension should be included:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，当我们定义要在dev容器中安装的扩展时，我们指定了以下扩展应该包含在内：
- en: '[PRE32]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This is an extension for VSCode from Microsoft that allows us to query a SQL
    server database directly from VSCode. Click on the extension and we will add a
    new connection, with the following information added:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个来自微软的VSCode扩展，允许我们从VSCode直接查询SQL服务器数据库。点击扩展，我们将添加一个新的连接，并添加以下信息：
- en: '| **Parameter** | **Value** | **Notes** |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **值** | **备注** |'
- en: '| Hostname | `sqlerver` | *This is the name of the Docker container that we
    configured to run the SQL Server* *2022 instance* |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| 主机名 | `sqlerver` | *这是配置为运行SQL Server 2022实例的Docker容器的名称* |'
- en: '| Database to connect | `GoodHabitsDatabase` | *This was defined i**n* *the*
    `DbContext` *class on the* *connection string* |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 要连接的数据库 | `GoodHabitsDatabase` | *这是在`DbContext`类的连接字符串中定义的* |'
- en: '| Authentication Type | `SQL Login` |  |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 认证类型 | `SQL登录` |  |'
- en: '| User name | `sa` |  |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 用户名 | `sa` |  |'
- en: '| Password | `Password1` | *Defined* *in* `sqlserver.env` |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 密码 | `Password1` | *在`sqlserver.env`中定义* |'
- en: '| Save Password | `Yes` |  |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 保存密码 | `是` |  |'
- en: '| Display Name | `GoodHabits` |  |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 显示名称 | `GoodHabits` |  |'
- en: You may need to okay a security popup.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要确认一个安全弹出窗口。
- en: 'With the above correctly entered, you should now get a view of the database,
    as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 正确输入以上信息后，你现在应该可以看到数据库的视图，如下所示：
- en: '![Figure 2.13 – Browse the database](img/B19343_Figure_2.13.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13 – 浏览数据库](img/B19343_Figure_2.13.jpg)'
- en: Figure 2.13 – Browse the database
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – 浏览数据库
- en: You will note that the `Habits` table that we have defined as a `DbSet` in the
    `DbContext` file has been successfully migrated to the SQL Server database. You
    can right-click on the table named `dbo.Habits` and then click on **Select to
    1000** to see the contents.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，我们已经在`DbContext`文件中将`Habits`表定义为`DbSet`，并且该表已成功迁移到SQL Server数据库。您可以在名为`dbo.Habits`的表上右键单击，然后点击**选择到1000**以查看内容。
- en: '![Figure 2.14 – Data stored in the database](img/B19343_Figure_2.14.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14 – 数据库中存储的数据](img/B19343_Figure_2.14.jpg)'
- en: Figure 2.14 – Data stored in the database
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – 数据库中存储的数据
- en: Again, you will see that the information that we have added in the `DbContext`
    file is present and correct in the database.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您会看到我们在`DbContext`文件中添加的信息在数据库中是存在且正确的。
- en: API technology
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API技术
- en: Next, we will move on to the API. The purpose of the API is to facilitate the
    storage and retrieval of information from the database by the users and also to
    do any required data processing.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将转向API。API的目的是通过用户方便地存储和检索数据库中的信息，以及进行任何必要的数据处理。
- en: There are many different technologies that are available with which to build
    an API. This book is focused on Microsoft technologies, so we will use the .NET
    Web API framework and the C# language. However, the tools and techniques described
    could easily be adapted to make use of different technologies.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于构建API的技术有很多种。本书专注于微软技术，因此我们将使用.NET Web API框架和C#语言。然而，所描述的工具和技术可以很容易地适应以利用不同的技术。
- en: Additionally, there are many different ideas about how best to structure an
    API, and there is no *one size fits all* approach that will work with every project
    out there. I have decided that I will use the RESTful paradigm for the examples
    in this book, but again, the concepts and ideas that are presented should copy
    over very well if your project is using some other structure, such as GraphQL.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，关于如何最佳地构建API有许多不同的想法，没有一种“一刀切”的方法可以适用于所有项目。我决定，我将在这本书的示例中使用RESTful范式，但再次强调，如果您的项目使用其他结构，如GraphQL，所提出的概念和想法应该可以很好地复制。
- en: The nature of a SaaS application is such that there are a huge number of choices
    to make when the project is getting started. This remains true even when the project
    is a demo application in a book!
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序的本质是，在项目启动时需要做出大量的选择。即使项目是一个书中的演示应用程序，这也依然成立。
- en: Creating the HabitService API
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建HabitService API
- en: 'Making sure that you are in the dev container environment, and are in the root
    of the project (the `workspace` folder), create a new `webapi` project with the
    following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您处于开发容器环境中，并且位于项目的根目录（`workspace` 文件夹），然后创建一个新的 `webapi` 项目，如下所示：
- en: '[PRE33]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The .NET CLI does a lot of work setting up the API. We need to make a change
    to the `launchSettings.json` file. Open the `Properties` folder and replace the
    default launch settings with the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: .NET CLI 在设置 API 方面做了很多工作。我们需要对 `launchSettings.json` 文件进行更改。打开 `Properties`
    文件夹，并用以下内容替换默认的启动设置：
- en: '[PRE34]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The most important thing to note is that we will be running the `HabitService`
    on port `5100`. This is important to keep track of when we start to look at microservices
    in [*Chapter 6*](B19343_06.xhtml#_idTextAnchor140).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是要注意，我们将运行 `HabitService` 在端口 `5100` 上。当我们开始查看微服务时，这一点很重要，见 [*第 6 章*](B19343_06.xhtml#_idTextAnchor140)。
- en: 'Out of the box, the default web API comes with the Weather API, which you can
    take a look at to get an idea of how these endpoints are configured. We can test
    this by entering the following into the terminal:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Web API 包含了天气 API，您可以查看它以了解这些端点是如何配置的。我们可以通过在终端中输入以下内容来测试：
- en: '[PRE35]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will start the application running on the port that is specified in `launchSettings.json`
    – port `5100` in this case.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动在 `launchSettings.json` 中指定的端口上运行的应用程序 – 在这种情况下是端口 `5100`。
- en: '![Figure 2.15 – Console output indicating success](img/B19343_Figure_2.15.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 表示成功的控制台输出](img/B19343_Figure_2.15.jpg)'
- en: Figure 2.15 – Console output indicating success
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 表示成功的控制台输出
- en: 'You can check to see whether the application is running by going to the following
    URL in your browser (remember to check the port number!): [http://127.0.0.1:5100/swagger/index.html](http://127.0.0.1:5100/swagger/index.html)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在浏览器中访问以下 URL 来检查应用程序是否正在运行（记得检查端口号！）：[http://127.0.0.1:5100/swagger/index.html](http://127.0.0.1:5100/swagger/index.html)
- en: 'Note that you may get some HTTPS warnings from your browser, as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您可能会从浏览器收到一些 HTTPS 警告，如下所示：
- en: '![Figure 2.16 – The GoodHabits API](img/B19343_Figure_2.16.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – GoodHabits API](img/B19343_Figure_2.16.jpg)'
- en: Figure 2.16 – The GoodHabits API
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – GoodHabits API
- en: User interface technology
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面技术
- en: Finally, we need a user interface on which to display the information.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个用户界面来显示信息。
- en: As I have pointed out for both the database and the API, there are many different
    UI technologies, and the underlying tools and techniques that you will learn in
    this book can be applied to any one of them. Often, the best technology to use
    in any given situation is the one that you are most comfortable with.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我对数据库和 API 所指出的那样，有许多不同的 UI 技术，本书中您将学习的底层工具和技术可以应用于其中任何一个。通常，在特定情况下使用最佳技术的是您最熟悉的技术。
- en: This is a Microsoft-centric book aimed at existing .NET developers, so I will
    use Blazor for the examples that are provided. If you prefer Angular, React, Vue,
    or any of the other millions of UI frameworks that are out there, please don’t
    be put off. In fact, adapting these examples to work with your UI of choice would
    be an excellent exercise to further your understanding of the concepts that we
    will cover in this book.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本以 Microsoft 为中心的书籍，面向现有的 .NET 开发者，因此我将使用 Blazor 来提供示例。如果您更喜欢 Angular、React、Vue
    或其他数百万个 UI 框架中的任何一个，请不要气馁。实际上，将这些示例修改为与您选择的 UI 一起使用将是一个很好的练习，可以帮助您进一步理解本书中将要介绍的概念。
- en: Creating the UI
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 UI
- en: 'Creating a simple demo Blazor UI is straightforward with the CLI tools provided
    by Microsoft. Enter the following commands into the terminal to create the UI:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Microsoft 提供的 CLI 工具创建简单的 Blazor UI 是直接的。在终端中输入以下命令以创建 UI：
- en: '[PRE36]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This follows the same pattern that we used to create the HabitServer project.
    And, like the HabitServer project, we will need to modify the launch configuration
    in `launchSettings.json`. Again, look in the `Properties` folder, and overwrite
    the contents with this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这遵循了我们创建 HabitServer 项目的相同模式。同样，像 HabitServer 项目一样，我们需要修改 `launchSettings.json`
    中的启动配置。再次，查看 `Properties` 文件夹，并用以下内容覆盖内容：
- en: '[PRE37]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Again, take note of the port that the client is running on. We will use `5900`
    for the client.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意客户端正在运行的端口。我们将使用 `5900` 作为客户端。
- en: With the config done, you can now start the client by typing `dotnet run` into
    the console.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，您现在可以通过在控制台中输入 `dotnet run` 来启动客户端。
- en: 'Again, you will see that the `Client` app is running on the ports specified
    in `launchSettings.json`, which should be port `5900`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你会看到 `Client` 应用正在 `launchSettings.json` 中指定的端口上运行，应该是端口 `5900`：
- en: '![Figure 2.17 – Console output indicating success](img/B19343_Figure_2.17.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – 表示成功的控制台输出](img/B19343_Figure_2.17.jpg)'
- en: Figure 2.17 – Console output indicating success
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – 表示成功的控制台输出
- en: 'Again, as per the API, you can follow this link in your browser to see the
    Blazor app running:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，正如 API 一样，你可以在浏览器中点击此链接查看运行的 Blazor 应用：
- en: '![Figure 2.18 – Hello, world!](img/B19343_Figure_2.18.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – Hello, world!](img/B19343_Figure_2.18.jpg)'
- en: Figure 2.18 – Hello, world!
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – Hello, world!
- en: Starting the application
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动应用程序
- en: Currently, we only have two projects to run, the HabitService API and the Blazor
    client. So, we can fairly easily start the whole project by typing `dotnet run`
    twice. As we build on this application, it will become more and more complex,
    and harder to run in this way. So, we’ll create build and launch configurations
    to tell VSCode how to start the application.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只有两个项目要运行，即 HabitService API 和 Blazor 客户端。因此，我们可以通过两次输入 `dotnet run` 来相对容易地启动整个项目。随着我们对这个应用程序的开发，它将变得越来越复杂，以这种方式运行将变得更加困难。因此，我们将创建构建和启动配置来告诉
    VSCode 如何启动应用程序。
- en: We have already created the config files for this in the `.``vscode` folder.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 `.vscode` 文件夹中创建了这些配置文件。
- en: 'Start by opening `tasks.json`, and copy in the following:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开 `tasks.json`，并复制以下内容：
- en: '[PRE38]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can see in the above JSON that two tasks are defined to build the client
    and the habit service.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在上面的 JSON 中看到定义了两个任务来构建客户端和习惯服务。
- en: 'Next, modify `launch.json` by adding the following JSON config:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过添加以下 JSON 配置来修改 `launch.json`：
- en: '[PRE39]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Again, you can see that two configurations are added to run the individual project.
    You can also see nearer the bottom that there is a `compounds launch` command
    set to run all of the projects.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你可以看到添加了两个配置来运行单个项目。你还可以看到靠近底部有一个设置为运行所有项目的 `compounds launch` 命令。
- en: You can test this out by pressing *Ctrl* + *Shift* + *D* to enter the **Run
    and Debug** menu, selecting **Run** All from the dropdown, and pressing the play
    button.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过按 *Ctrl* + *Shift* + *D* 进入 **运行和调试** 菜单，从下拉菜单中选择 **运行** 所有，然后按播放按钮来测试它。
- en: You will see that this starts the API and the client at the same time. This
    will be very handy as the number of projects starts to grow!
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到这同时启动了 API 和客户端。当项目数量开始增加时，这将非常方便！
- en: Note that you can also hit *F5* to start the application as well.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你也可以按 *F5* 来启动应用程序。
- en: Adding a solution file
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加解决方案文件
- en: There is one last small piece of setup to do before we move on to really building
    out the application, and that is to add a solution file. This is not strictly
    necessary, but it is commonly done when working with .NET projects and will allow
    us to easily build, clean, and test the projects with a single command.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们真正开始构建应用程序之前，还有一个小步骤要做，那就是添加解决方案文件。这并不是严格必要的，但在处理 .NET 项目时通常这样做，这将使我们能够通过单个命令轻松构建、清理和测试项目。
- en: 'To add a solution file, simply navigate to the project root, and run the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加解决方案文件，只需导航到项目根目录，并运行以下命令：
- en: '[PRE40]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This simply adds a solution file and references the three projects that we have
    created.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是添加了一个解决方案文件，并引用了我们创建的三个项目。
- en: And that is the final piece of setup work to do – now we can progress to building
    the application.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是最后需要完成的一步设置工作——现在我们可以继续构建应用程序。
- en: Where do we go from here?
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们接下来该做什么？
- en: We have done a lot of work in this chapter, but we haven’t really started to
    build the application yet. We have instead focused on choosing the tools that
    we will use and building a development environment around those tools. We now
    have the outline of a SaaS application that we can continue to work with as we
    move through this book.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中做了很多工作，但我们还没有真正开始构建应用程序。相反，我们专注于选择我们将使用的工具，并围绕这些工具构建开发环境。我们现在有一个 SaaS
    应用的轮廓，我们可以随着本书的进展继续与之合作。
- en: Taking the time at the start of the project to select the correct tools is an
    important step of any SaaS project, and it should not be skipped.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目开始时花时间选择正确的工具是任何 SaaS 项目的重要步骤，这个步骤不应被跳过。
- en: Being successful in developing any application requires that some thought is
    put into the technologies and frameworks that will be used, and also the tooling
    that will be used. In this chapter, we have set ourselves up very well to be able
    to get our hands dirty and try things out as we explore the concepts that are
    required to build a SaaS application.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何应用程序时取得成功需要考虑将要使用的技术和框架，以及将要使用的工具。在本章中，我们已经为探索构建SaaS应用程序所需的概念做好了充分的准备，以便我们可以亲自动手尝试。
- en: The following chapters will start to introduce a lot more SaaS-specific considerations,
    and we will use this outline app to demonstrate them.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将开始介绍更多与SaaS相关的特定考虑因素，我们将使用这个轮廓应用程序来演示它们。
- en: Summary
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have briefly touched on a lot of different tools, topics,
    and techniques. This is the nature of developing SaaS applications – please don’t
    feel overwhelmed! To get started, we installed the tools that we need to work
    with, namely Docker Desktop and Visual Studio Code. This is quite a light set
    of tools for a SaaS project. But as you have seen, we used Docker to wrap up the
    developer environment. We learned about dev containers, and how they significantly
    streamline project setup for complex projects, such as a SaaS application, and
    we then configured a dev container and learned how to work in that environment.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要地介绍了很多不同的工具、主题和技术。这是开发SaaS应用程序的本质——请不要感到不知所措！为了开始，我们安装了我们需要工作的工具，即Docker
    Desktop和Visual Studio Code。这对于SaaS项目来说是一套相当轻量级的工具。但正如你所看到的，我们使用了Docker来封装开发环境。我们学习了dev
    containers，以及它们如何显著简化复杂项目（如SaaS应用程序）的设置，然后我们配置了一个dev container并学习了如何在那个环境中工作。
- en: With the core of the environment set up, we set up a database and populated
    it with some data using Entity Framework, then made the data available through
    an API, and finally surfaced the data on a Blazor UI!
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好环境的核心之后，我们使用Entity Framework创建了一个数据库，并用一些数据填充它，然后通过API使数据可用，最后在Blazor UI上展示数据！
- en: With all of the above, we have configured all of the individual parts required
    to build up a fully featured SaaS application. Read on, and we will do just that!
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以上所有内容，我们已经配置了构建功能齐全的SaaS应用程序所需的全部单个部分。继续阅读，我们将这样做！
- en: In the next chapter, you will learn about a core part of building SaaS applications,
    and that is multi-tenancy. We will cover what this is and why it is so important,
    and start to think about how we will implement it in our sample application.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习构建SaaS应用程序的核心部分，即多租户。我们将介绍这是什么以及为什么它如此重要，并开始思考如何在我们的示例应用程序中实现它。
- en: Further reading
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Developing inside a Container: [https://code.visualstudio.com/docs/devcontainers/containers](https://code.visualstudio.com/docs/devcontainers/containers)'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器内开发：[https://code.visualstudio.com/docs/devcontainers/containers](https://code.visualstudio.com/docs/devcontainers/containers)
- en: 'Entity Framework Dev Environment in Docker: [https://itnext.io/database-development-in-docker-with-entity-framework-core-95772714626f](https://itnext.io/database-development-in-docker-with-entity-framework-core-95772714626f)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker中的Entity Framework开发环境：[https://itnext.io/database-development-in-docker-with-entity-framework-core-95772714626f](https://itnext.io/database-development-in-docker-with-entity-framework-core-95772714626f)
- en: '.NET Development in Docker with Dev Containers: [https://itnext.io/net-development-in-docker-6509d8a5077b](https://itnext.io/net-development-in-docker-6509d8a5077b)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET在Docker中使用Dev Containers进行开发：[https://itnext.io/net-development-in-docker-6509d8a5077b](https://itnext.io/net-development-in-docker-6509d8a5077b)
- en: 'Blazor Tutorial - Build your first Blazor app: [https://dotnet.microsoft.com/en-us/learn/aspnet/blazor-tutorial/intro](https://dotnet.microsoft.com/en-us/learn/aspnet/blazor-tutorial/intro)'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor教程 - 构建你的第一个Blazor应用程序：[https://dotnet.microsoft.com/en-us/learn/aspnet/blazor-tutorial/intro](https://dotnet.microsoft.com/en-us/learn/aspnet/blazor-tutorial/intro)
- en: 'Tutorial: Create a web API with ASP.NET Core: [https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-7.0&tabs=visual-studio](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-7.0&tabs=visual-studio)'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教程：使用ASP.NET Core创建Web API：[https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-7.0&tabs=visual-studio](https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-7.0&tabs=visual-studio)
- en: Questions
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the advantages of using dev containers?
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用dev containers的优势是什么？
- en: How were we able to use SQL Server without having to install it on our developer
    machines?
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们是如何能够在不安装SQL Server的情况下使用SQL Server的？
- en: What are the HTTP verbs commonly associated with RESTful APIs?
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 常与RESTful API相关联的HTTP动词有哪些？
- en: What are the benefits of using Entity Framework?
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Entity Framework的好处是什么？
- en: We have covered a lot in this chapter! Don’t worry if the answers to the above
    questions are not 100% clear at this stage – we will expand on all of them in
    the coming chapters.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们涵盖了大量的内容！如果目前对上述问题的答案不是100%清晰，请不要担心——我们将在接下来的章节中详细展开所有这些内容。
- en: 'Part 2: Building the Backend'
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：构建后端
- en: This section covers all things backend related, starting with the database and
    building up to the API layer. This section also introduces the topics of multi-tenancy
    and microservices, both of which are very important for developing SaaS applications.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了所有与后端相关的内容，从数据库开始，逐步扩展到API层。本节还介绍了多租户和微服务这两个主题，它们对于开发SaaS应用都非常重要。
- en: 'This section has the following chapters:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 3*](B19343_03.xhtml#_idTextAnchor082), *What Is Multi-Tenancy, and
    Why Is It Important in SaaS Applications?*'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B19343_03.xhtml#_idTextAnchor082), *什么是多租户，为什么它在SaaS应用中很重要？*'
- en: '[*Chapter 4*](B19343_04.xhtml#_idTextAnchor102), *Building Databases and Planning
    for Data-Rich Applications*'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B19343_04.xhtml#_idTextAnchor102), *构建数据库和为数据丰富应用规划*'
- en: '[*Chapter 5*](B19343_05.xhtml#_idTextAnchor116), *Building R**EST**ful APIs*'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B19343_05.xhtml#_idTextAnchor116), *构建RESTful API*'
- en: '[*Chapter 6*](B19343_06.xhtml#_idTextAnchor140), *Microservices for SaaS Applications*'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B19343_06.xhtml#_idTextAnchor140), *SaaS应用的微服务*'
