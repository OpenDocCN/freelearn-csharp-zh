- en: Primitives, Collections, LINQ, and More
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据类型、集合、LINQ以及更多
- en: 'In this chapter, we will be covering the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Building a .NET Standard 2.0 library that uses primitives
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个使用原始数据类型的.NET Standard 2.0库
- en: Building a .NET console application to use the library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个用于使用库的.NET控制台应用程序
- en: Creating collections
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建集合
- en: Building a WPF application to use the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个用于使用库的WPF应用程序
- en: Describing our library with Reflections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用反射描述我们的库
- en: Building a .NET Core console application to use the library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个用于使用库的.NET Core控制台应用程序
- en: Building a .NET Standard 2.0 library that uses LINQ
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个使用LINQ的.NET Standard 2.0库
- en: Building an ASP.NET MVC application to use the library
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个用于使用库的ASP.NET MVC应用程序
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该具备基本的C#知识。他们还应该了解如何使用Visual Studio，使用NuGet安装包，以及在其他项目中引用项目中的库。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter02](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter02)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter02](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter02)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[https://goo.gl/BiXiAM](https://goo.gl/BiXiAM)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/BiXiAM](https://goo.gl/BiXiAM)'
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'When you look at C# as a language, there are things we need to look at first:
    what C# can do, how it supports our day-to-day programming requirements, and how
    it helps us to solve a problem. In this chapter, we will be mainly looking at
    primitive data types, collections, and LINQ features supported in C#. In the full
    .NET Framework, using these features is not a problem, but when it comes to cross-platform
    and code shared across flavors of the .NET Framework, it does becomes a concern.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将C#视为一种语言时，有一些事情我们需要首先考虑：C#能做什么，它如何支持我们的日常编程需求，以及它如何帮助我们解决问题。在本章中，我们将主要探讨C#支持的原始数据类型、集合和LINQ功能。在完整的.NET
    Framework中，使用这些功能没有问题，但当涉及到跨平台和.NET Framework不同版本之间的代码共享时，它确实成为一个问题。
- en: Each recipe will go through building a .NET Standard 2.0 library and how to
    use it with an application that uses a flavor of the .NET Framework.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个菜谱都将通过构建.NET Standard 2.0库以及如何使用它来介绍如何与使用.NET Framework版本的程序一起使用。
- en: Building a .NET Standard 2.0 library that uses primitives
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个使用原始数据类型的.NET Standard 2.0库
- en: In this recipe, we will have a look at C# primitives and their usage in a .NET
    Standard 2.0 library. Primitives are one of the core parts of the framework. These
    types are defined in the .NET Framework itself and not in the C# language specification.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨C#原始数据类型及其在.NET Standard 2.0库中的使用。原始数据类型是框架的核心部分之一。这些类型是在.NET Framework本身中定义的，而不是在C#语言规范中定义的。
- en: We will be building a .NET Standard 2.0 library that uses primitives in the
    .NET Framework and use it in the next recipe.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个使用.NET Framework中的原始数据类型的.NET Standard 2.0库，并在下一个菜谱中使用它。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: As mentioned, primitive data types are defined under .NET Framework itself and
    it's not language specific. It means you can use these data types across all languages
    supported under .NET Framework. It doesn't mean you can use these primitives under
    different flavors of .NET Framework. For example, if a data type is defined under
    .NET Framework version 4.6.1, and it's not defined under .NET Core 2.0, your code
    will fail under .NET Core 2.0.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，原始数据类型是在.NET Framework本身中定义的，并且不是特定于语言的。这意味着您可以在.NET Framework支持的所有语言中使用这些数据类型。这并不意味着您可以在不同版本的.NET
    Framework中使用这些原始数据类型。例如，如果一个数据类型是在.NET Framework版本4.6.1中定义的，而在.NET Core 2.0中没有定义，那么您的代码将在.NET
    Core 2.0中失败。
- en: Also, make sure you have the latest version of Visual Studio, which is 2017
    at the time of writing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保您拥有最新的Visual Studio版本，即写作时的2017版本。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane and
    select Blank Solution in the right-hand pane.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”，然后在“新建项目模板”对话框中，在左侧窗格的“其他项目类型”节点下选择“Visual Studio解决方案”，然后在右侧窗格中选择“空白解决方案”。
- en: 'In the Name: text box, type `Chapter2.Primitives` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click the Browse... button
    and select a location. Leave the defaults as they are.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，输入`Chapter2.Primitives`作为解决方案的名称。在“位置”下拉列表中选择一个首选位置，或点击“浏览...”按钮选择一个位置。保留默认设置。
- en: '![](img/c20399d7-b2e9-46c0-bb99-3574accc4395.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c20399d7-b2e9-46c0-bb99-3574accc4395.png)'
- en: Click OK.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Primitives.
    Right-click and, select Add | New Project**.**
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中（或按*Ctrl* + *Alt* + *L*），选择Chapter2.Primitives。右键单击，选择“添加”|“新建项目**”。**
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”对话框中，展开“Visual C#”节点，在左侧窗格中选择.NET Standard。
- en: 'In the right-hand pane, select Class Library (.NET Standard):'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择类库(.NET Standard)：
- en: '![](img/2f43e866-6234-4fdb-bdc5-dbe41ad92b7c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f43e866-6234-4fdb-bdc5-dbe41ad92b7c.png)'
- en: 'Now, in the Name: text box, type `Chapter2.Primitives.PrimitiveLib` and leave
    the Location: text box as it is:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称”文本框中，输入`Chapter2.Primitives.PrimitiveLib`，并将“位置”文本框保留为默认设置：
- en: '![](img/54e2fecb-0500-48be-95d4-ac805bbfefea.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54e2fecb-0500-48be-95d4-ac805bbfefea.png)'
- en: Click OK.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/61ea9ea7-b0e1-4993-b1ae-81438b4c9e0c.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61ea9ea7-b0e1-4993-b1ae-81438b4c9e0c.png)'
- en: Click on Class1.cs and press *F2* to rename it. Type `Helpers.cs` as the new
    name.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Class1.cs`并按*F2*重命名它。输入`Helpers.cs`作为新名称。
- en: Select Yes in the confirmation dialog box for renaming.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在重命名确认对话框中，选择“是”。
- en: Now, double-click on `Helpers.cs` to open its code window.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`Helpers.cs`以打开其代码窗口。
- en: 'Type the following code in between the curly brackets of the `Helpers`class:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Helpers`类的花括号之间输入以下代码：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Press *Ctrl* + *Shift* + *B* to build your code.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*构建您的代码。
- en: 'Again, type the following code next to the ending curly bracket from step 14:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在步骤14的结束花括号旁边输入以下代码：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's build our code to check that everything is fine. Click Build | Build Solution or
    press *Ctrl* + *Shift* + *B* and the solution should build successfully. Let's
    test our class library in the next recipe.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们构建代码以检查一切是否正常。点击“生成”|“生成解决方案”或按*Ctrl* + *Shift* + *B*，解决方案应该能够成功构建。让我们在下一个菜谱中测试我们的类库。
- en: Click File | Save All, or press *Ctrl* + *Shift* + *S,* to save the solution
    and the class library project.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“全部保存”，或者按*Ctrl* + *Shift* + *S*，以保存解决方案和类库项目。
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's have a look at what we have achieved so far. From steps 1 to 4, we opened
    Visual Studio 2017 and created a blank solution. Blank solutions are a very good
    foundation for a project that has multiple projects. In steps 5 to 10, we added
    a new project to the blank solution. In step 7, we used an existing base .NET
    Standard 2.0 project template and gave it a proper name in step 8.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看到目前为止我们取得了什么成果。从步骤1到4，我们打开了Visual Studio 2017并创建了一个空白解决方案。空白解决方案是具有多个项目的项目的良好基础。在步骤5到10中，我们在空白解决方案中添加了一个新项目。在第7步中，我们使用了一个现有的基础.NET
    Standard 2.0项目模板，并在第8步中给它起了适当的名字。
- en: In steps 11 and 12, we changed the default `Class1.cs` to a meaningful name.
    These names are very important and it helps a developer to understand what the
    code is for inside that file. In this case, we chose `Chapter2.Primitives.PrimitiveLib` as
    the project name. The first two sections provide the solution name and, at the
    end, there is the actual project name.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在第11步和第12步中，我们将默认的`Class1.cs`更改为有意义的名称。这些名称非常重要，它有助于开发者理解文件内部的代码用途。在这种情况下，我们选择了`Chapter2.Primitives.PrimitiveLib`作为项目名称。前两部分提供了解决方案名称，最后是实际的项目名称。
- en: In step 14, we created code that includes a public method. The method takes
    an `int` type variable as the parameter. `int` is a primitive data type that is
    supported in the framework itself, so we have used it inside a .NET Standard library.
    It means the code can be shared across .NET Framework, .NET Core, and Mono running
    applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第14步中，我们创建了包含公共方法的代码。该方法接受一个`int`类型的变量作为参数。`int`是框架本身支持的原始数据类型，因此我们在.NET Standard库中使用它。这意味着代码可以在.NET
    Framework、.NET Core和Mono运行的应用程序之间共享。
- en: 'The data type `int` is an alias for `System.Int32` and these are the primitive
    types supported under .NET that can be used and shared in a .NET Standard 2.0
    library:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型`int`是`System.Int32`的别名，这些是在.NET下支持的原始类型，可以在.NET Standard 2.0库中使用和共享：
- en: '`Boolean`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Boolean`'
- en: '`Byte`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Byte`'
- en: '`SByte`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SByte`'
- en: '`Int16`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int16`'
- en: '`UInt16`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UInt16`'
- en: '`Int32`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int32`'
- en: '`UInt32`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UInt32`'
- en: '`Int64`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int64`'
- en: '`UInt64`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UInt64`'
- en: '`IntPtr`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntPtr`'
- en: '`UIntPtr`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Char`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Double`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Single`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code takes a `char` variable and each `if` statement validates the marks
    sent through the `yourMarks` parameter in the method. Finally, the method returns
    a `char` value as the grade and then we confirmed all the syntax was correct and
    built successfully in step 15\. In step 16, we created another method that converts
    centimeters to inches. The input parameter is another primitive type called `double`,
    whichis also an alias for `System.Double`. This is because C# represents all primitives
    as objects. Inside the code, one variable already converts centimeters into inches
    and is stored as `oneCmToInches`**. **In the last line, we return the inches as
    `double`, converted from centimeters given in the parameter of the method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we did another build to check all code for syntax and finally did
    a save all.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: A .NET console application to use the library
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we are going to do two things. First, we will be opening Visual
    Studio and doing a quick build of the previously built solution for the .NET Standard
    2.0 library. Finally, we will be adding a .NET console application to use the
    library. This console application will be using .NET Framework 4.6.1 as the base
    framework under Windows.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe that builds the .NET Standard
    2.0 library. We will be using it in this recipe. Open Visual Studio 2017 and prepare
    for the project. Click Build | Build Solution, or press *Ctrl* + *Shift* + *B*,and
    the solution should build successfully. Everything's ready for testing our class
    library.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the Chapter2.Primitives solution.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the Chapter2.Library solution label. Click File | Add | New Project.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Windows Classic Desktop and then Console App (.NET Framework) in the
    right-hand pane:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a39cf4fe-46b0-4d02-a64a-9d0809d710ea.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Primitives.PrimitivesConsole` and
    leave the Location: text box as it is.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13e8f526-ea8e-4513-94f5-3a39811fee8b.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding the new project, the Solution Explorer (*Ctrl* + *Alt* + *L*)
    should look like this:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6ba892c-9cf2-4c16-9014-163008c00383.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Click on the References label in the Chapter2.Primitives.PrimitivesConsoleproject
    node. Right-click and select Add | Add Reference.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, select Projects in the left-hand pane and check the Chapter2.Primitives.PrimitiveLibin
    the right-hand pane:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a4442e5-962a-4e15-9ba0-e1dd14a478c6.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: Click OK to add the reference to the selected project.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the newly added console application project, double-click on Program.cs
    to open the code window.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up and add the following `using` directive:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, scroll down and in between the curly braces of the `Main()` method, type
    the following code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向下滚动，在 `Main()` 方法的花括号之间，输入以下代码：
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now press *F5* to debug the code.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按 *F5* 键进行代码调试。
- en: 'You should see output like this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到如下输出：
- en: '![](img/f99be648-880f-4319-bc7b-b5a44a781a70.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f99be648-880f-4319-bc7b-b5a44a781a70.png)'
- en: Now, press any key to exit the console, click just before the `Console.ReadLine()`
    line, and press *Enter* to add some new code.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按任意键退出控制台，点击在 `Console.ReadLine()` 行之前，按 *Enter* 键添加一些新的代码。
- en: 'Let''s type the following code now:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在输入以下代码：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Press *F5* to see the output and you should see the following:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F5* 键查看输出，你应该会看到以下内容：
- en: '![](img/853b0f62-feaf-4c03-a40f-043f8f36ffa5.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/853b0f62-feaf-4c03-a40f-043f8f36ffa5.png)'
- en: Now that we have successfully tested the library, change some values and see
    how it works.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功测试了库，更改一些值并查看它是如何工作的。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 7, we opened an existing Visual Studio solution and added a new
    project to it. The newly added project is a .NET-based console application. In
    steps 9 to 11, we added the reference to the .NET Standard 2.0 library project.
    This is an important step. To use the functionality in the library, you must add
    the project as a reference.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步到第7步中，我们打开了一个现有的 Visual Studio 解决方案，并向其中添加了一个新项目。新添加的项目是基于 .NET 的控制台应用程序。在第9步到第11步中，我们添加了对
    .NET Standard 2.0 库项目的引用。这是一个重要的步骤。为了使用库中的功能，你必须将项目作为引用添加。
- en: 'In step 13, we added code to use the libraries'' first method. The first line
    of code will define a variable to hold the instance of the `Helpers()` class.
    The `var` keyword helps you to create a local variable without giving an explicit
    type. It simply tells the compiler to get the type of variable from the expression
    on the right-hand side of the initialization statement. For example, see the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在第13步，我们添加了代码来使用库的第一个方法。代码的第一行将定义一个变量来持有 `Helpers()` 类的实例。`var` 关键字帮助你创建一个局部变量，而不需要给出显式的类型。它只是告诉编译器从初始化语句右侧的表达式中获取变量的类型。例如，请看以下内容：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is the same as the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以下内容相同：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The second line of code saves the return value from the `WhatIsMyGrade()` method.
    The next line will display the output to the console window. The last line will
    tell the console to wait till a key is pressed. In steps 14 and 15, we see the
    output of the code we wrote.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第二行保存了 `WhatIsMyGrade()` 方法的返回值。下一行将输出显示到控制台窗口。最后一行将告诉控制台等待按键。在第14步和第15步中，我们看到了我们编写的代码的输出。
- en: In step 17, we are testing the second method inside the `Helpers()` class inside
    the .NET Standard 2.0 library we created. In the first line, we created a variable
    that stores a default value that needs to be converted. In the second line, it
    stores the converted output in a variable. Again, we have used the `var` keyword
    to store the variable, which will automatically store the value with the type
    returned from the method, in this case to a `System.Double`. The third line will
    display the output to the console window. In steps 18 and 19, we executed the
    console application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在第17步，我们正在测试我们创建的 .NET Standard 2.0 库中 `Helpers()` 类内的第二个方法。在第一行，我们创建了一个变量来存储需要转换的默认值。在第二行，它将转换后的输出存储在一个变量中。同样，我们使用了
    `var` 关键字来存储变量，这将自动存储从方法返回的类型值，在本例中是 `System.Double` 类型。第三行将在控制台窗口中显示输出。在第18步和第19步中，我们执行了控制台应用程序。
- en: Creating collections
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集合
- en: There are three kind of collections supported inside the .NET Framework. In
    this recipe, we will be focusing on using these collections inside a .NET Standard
    2.0 library. In general, collections are used to manage groups of related objects.
    Creating arrays of objects is a way of grouping related objects. But our focus
    is on using these collections, which is the second method of grouping related
    objects.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET Framework 中支持三种类型的集合。在这个菜谱中，我们将专注于在 .NET Standard 2.0 库中使用这些集合。一般来说，集合用于管理相关对象的组。创建对象的数组是分组相关对象的一种方式。但我们的重点是使用这些集合，这是分组相关对象的第二种方法。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'These are the three kinds of collections we have in .NET Framework:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在 .NET Framework 中拥有的三种类型的集合：
- en: '`System.Collections.Generic` Classes'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Collections.Generic` 类'
- en: '`System.Collections.Concurrent` Classes'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Collections.Concurrent` 类'
- en: '`System.Collections` Classes'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Collections` 类'
- en: Let's have a look at these and their usage inside a .NET Standard 2.0 library.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些以及它们在 .NET Standard 2.0 库中的使用。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane, and
    then Blank Solution in the right-hand pane.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 文件 | 新建 | 项目，然后在新建项目模板对话框中，在左侧窗格的 其他项目类型 节点下选择 Visual Studio 解决方案，然后在右侧窗格中选择 空白解决方案。
- en: 'In the Name: text box, type `Chapter2.Collections` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click the Browse... button
    and select a location. Leave the defaults as is they are:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 名称：文本框中，输入 `Chapter2.Collections` 作为解决方案的名称。在 位置：下拉列表中选择一个首选位置或点击 浏览... 按钮选择一个位置。保留默认设置不变：
- en: '![](img/80f7e6d9-3b59-40d2-bb73-d424abf4ba74.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/80f7e6d9-3b59-40d2-bb73-d424abf4ba74.png)'
- en: Click OK.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Collections.
    Right-click and select Add | New Project.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器（或按 *Ctrl* + *Alt* + *L*），选择 Chapter2.Collections。右键单击并选择 添加 | 新建项目。
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加新项目对话框中，展开 Visual C# 节点并在左侧窗格中选择 .NET Standard。
- en: 'In the right-hand pane, select Class Library (.NET Standard):'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择 类库 (.NET Standard)：
- en: '![](img/eb794e35-3680-4d29-888f-895b453ccd3d.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb794e35-3680-4d29-888f-895b453ccd3d.png)'
- en: 'Now, in the Name: text box type `Chapter2.Collections.CollectionsLib` and leave
    the Location: text box, as it is:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 名称：文本框中输入 `Chapter2.Collections.CollectionsLib` 并保留 位置：文本框不变：
- en: '![](img/069f3d1e-745e-46e8-b167-ff7754aa9a8e.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/069f3d1e-745e-46e8-b167-ff7754aa9a8e.png)'
- en: Click OK.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/12f5b8f1-dbfb-40bf-a472-d3b7d5dd5bd2.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12f5b8f1-dbfb-40bf-a472-d3b7d5dd5bd2.png)'
- en: Click on the Class1.cs and press *F2* to rename it. Type `LittleShop.cs` as
    the new name.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Class1.cs 并按 *F2* 重命名它。输入新名称为 `LittleShop.cs`。
- en: Select Yes in the confirmation dialog box for renaming.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中选择是进行重命名。
- en: Now double-click on `LittleShop.cs` to open its code window.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在双击 `LittleShop.cs` 以打开其代码窗口。
- en: 'At the top of the code window, move the cursor (or click the mouse) at the
    last line of the `using` directives and add the following `using` directive:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口顶部，将光标（或点击鼠标）移动到 using 指令的最后一行并添加以下 using 指令：
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Type the following code in between the curly brackets of the `LittleShop`class:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 LittleShop 类的花括号之间输入以下代码：
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build and check for any syntax
    errors.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Ctrl* + *Shift* + *B* 进行快速构建并检查任何语法错误。
- en: 'Now type the following code at the end of the `using` directives at the top
    of your code window:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在代码窗口顶部的 using 指令末尾输入以下代码：
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'At the end of the `GetFruitsList()` method, add the following code:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GetFruitsList() 方法的末尾添加以下代码：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's quickly hit a quick *Ctrl* + B to debug and check for syntax errors.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快速按一下 *Ctrl* + B 进行调试并检查语法错误。
- en: Now we are good to go and test the library.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好测试库了。
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let's see what's going on behind the scenes. From steps 1 to 4, we created the
    base for the project. This base will help you to create the .NET Standard 2.0
    library and the project that will be using that library. A blank solution is always
    a good starting point for any sort of project. In steps 5 to 10, we added the
    .NET Standard 2.0 library project to the blank solution and gave it a meaningful
    name. In steps 11 to 13, we changed the default class template name to a meaningful
    name.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看幕后发生了什么。从步骤1到4，我们创建了项目的基。这个基将帮助您创建 .NET Standard 2.0 库以及将使用该库的项目。空白解决方案始终是任何类型项目的良好起点。在步骤5到10中，我们将
    .NET Standard 2.0 库项目添加到空白解决方案，并给它一个有意义的名称。在步骤11到13中，我们将默认类模板名称更改为有意义的名称。
- en: In step 14, we created a reference to the `System.Collections.Generics` namespace.
    This will give you access to all the collections available under this namespace.
    In step 15, we used one generic collection object known as `List<T>`. In the next
    few lines, we added some string objects to the variable created. Finally, we returned
    the list collection, which is the same return type as the `GetFruitsList()` method.
    Then, in step 16, we did a quick build, and this will help us to check the syntax
    of the code. It's good practice to do a quick build for syntax checking.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 14 步中，我们创建了对 `System.Collections.Generics` 命名空间的引用。这将使您能够访问此命名空间下所有可用的集合。在第
    15 步中，我们使用了一个名为 `List<T>` 的泛型集合对象。在接下来的几行中，我们将一些字符串对象添加到创建的变量中。最后，我们返回了列表集合，它与
    `GetFruitsList()` 方法的返回类型相同。然后，在第 16 步中，我们进行了快速构建，这将帮助我们检查代码的语法。进行快速构建以检查语法是一个好的做法。
- en: Again, in step 17, we added another reference to the `System.Collections` namespace.
    Then, in step 18, we added a `public` method that returns an `ArrayList()`, which
    contains in  `System.Collections` namespace. In the first line of the `GetShopItems()` method,
    we are creating an instance of the `ArrayList()` object, and, in the next few
    lines, we are adding a string object to the `ArrayList()` using its `Add()` method.
    Finally, in the last line, we are returning the array list stored in the variable. Then,
    in step 19, we did a quick build, and this will help us to check the syntax of
    the code. It's good practice to do a quick build for syntax checking.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在第 17 步中，我们向 `System.Collections` 命名空间添加了另一个引用。然后，在第 18 步中，我们添加了一个返回 `ArrayList()`
    的 `public` 方法，它包含在 `System.Collections` 命名空间中。在 `GetShopItems()` 方法的第一行中，我们创建了一个
    `ArrayList()` 对象的实例，在接下来的几行中，我们使用其 `Add()` 方法向 `ArrayList()` 添加了一个字符串对象。最后，在最后一行，我们返回存储在变量中的数组列表。然后，在第
    19 步中，我们进行了快速构建，这将帮助我们检查代码的语法。进行快速构建以检查语法是一个好的做法。
- en: The last kind is the `System.Collections.Concurrent`namespace. This namespace
    contains collections that are thread safe. It means multiple threads can safely
    add or remove items from these collections.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种类型是 `System.Collections.Concurrent` 命名空间。此命名空间包含线程安全的集合。这意味着多个线程可以安全地向这些集合添加或从这些集合中删除项目。
- en: A WPF application to use the library
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个用于使用库的 WPF 应用程序
- en: In this recipe, we will be creating a Windows Presentation Foundation application
    to use the .NET Standard 2.0 library we created in the previous recipe. We will
    be continuing to build the application from the previous solution we created.
    Windows Presentation Foundation is a UI framework that works under .NET Framework
    and runs in a Windows OS.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将创建一个用于使用我们在上一个菜谱中创建的 .NET Standard 2.0 库的 Windows Presentation Foundation
    应用程序。我们将从之前创建的解决方案继续构建应用程序。Windows Presentation Foundation 是一个在 .NET Framework
    下工作并在 Windows OS 中运行的 UI 框架。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open Visual Studio 2017 and prepare for the project. Make sure you have completed
    building the .NET Standard 2.0 library in the preview build. Open that project
    if it's not already open and click Build | Build Solution, or press *Ctrl* + *Shift*
    + *B*,and the solution should build successfully. Everything's ready for testing
    our class library.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017 并为项目做准备。确保你已经完成了在预览构建中构建 .NET Standard 2.0 库。如果该项目尚未打开，请打开它，然后点击 构建 | 构建解决方案，或按 *Ctrl*
    + *Shift* + *B*，解决方案应该能够成功构建。一切准备就绪，可以测试我们的类库。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the Chapter2.Collections solution.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开之前菜谱中创建的解决方案。点击 文件 | 打开 | 打开项目/解决方案，或按 *Ctrl* + *Shift* + *O*，并选择 Chapter2.Collections
    解决方案。
- en: Now, click on the Chapter2.Collections solution label. Click File | Add | New
    Project.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 Chapter2.Collections 解决方案标签。点击 文件 | 添加 | 新建项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 添加新项目 模板对话框中，展开左侧窗格中的 Visual C# 节点。
- en: 'Select Windows Classic Desktop and then WPF App (.NET Framework) in the right-hand
    pane:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择 Windows Classic Desktop 然后选择 WPF App (.NET Framework)：
- en: '![](img/1f8418ff-babb-41b1-94cd-cb36decccbe8.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f8418ff-babb-41b1-94cd-cb36decccbe8.png)'
- en: 'In the Name: text box, type `Chapter2.Collections.WPFLittleShop` as the name
    of the project and leave the Location: text box as it is:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，输入`Chapter2.Collections.WPFLittleShop`作为项目的名称，并保持“位置：”文本框不变：
- en: '![](img/d9de6ce8-85ad-4159-a2b1-40aaab20827f.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9de6ce8-85ad-4159-a2b1-40aaab20827f.png)'
- en: Click OK.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L* to open) should look
    like this:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按 *Ctrl* + *Alt* + *L* 打开）应该看起来像这样：
- en: '![](img/686e8ecb-694e-4ae7-a79a-845b5f6f61a7.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/686e8ecb-694e-4ae7-a79a-845b5f6f61a7.png)'
- en: Now, double-click on the MainWindow.xaml to open the designer view.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`MainWindow.xaml`以打开设计视图。
- en: Open the Tool Box by pressing *Ctrl* + *Alt* + *X* and drag and drop two Buttons
    and two List Boxes to the main window.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Ctrl* + *Alt* + *X*打开工具箱，并将两个按钮和两个列表框拖放到主窗口中。
- en: 'Place them as shown:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们放置如下：
- en: '![](img/a25fcb29-fdb4-4db5-a4ac-fd2678e31701.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a25fcb29-fdb4-4db5-a4ac-fd2678e31701.png)'
- en: 'Now, open the Properties window, or press *F4*, and change the following properties:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开属性窗口，或按*F4*，并更改以下属性：
- en: '| **Controler** | **Property** | **Value** |'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **控制器** | **属性** | **值** |'
- en: '| Button *(first from the left)* | Name | `FruitsButton` |'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮（从左数第一个） | 名称 | `FruitsButton` |'
- en: '| Button *(first from the left)* | Content | `Get Fruits` |'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮（从左数第一个） | 内容 | `Get Fruits` |'
- en: '| Button *(second from the left)* | Name | `ItemsButton` |'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮（从左数第二个） | 名称 | `ItemsButton` |'
- en: '| Button *(second from the left)* | Content | `Get Items` |'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮（从左数第二个） | 内容 | `Get Items` |'
- en: '| ListBox (first from the left)  | Name | `FruitsList` |'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 列表框（从左数第一个） | 名称 | `FruitsList` |'
- en: '| ListBox (second from the left) | Name | `ItemsList` |'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 列表框（从左数第二个） | 名称 | `ItemsList` |'
- en: 'After applying the previous properties, the MainWindow should look like this:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用了之前的属性后，`MainWindow`应该看起来像这样：
- en: '![](img/770fe6a7-65a2-4452-9df6-d5cb18b0f62f.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/770fe6a7-65a2-4452-9df6-d5cb18b0f62f.png)'
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), expand theChapter2.Collections.WPFLittleShop
    project tree.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中（或按*Ctrl* + *Alt* + *L*），展开`Chapter2.Collections.WPFLittleShop`项目树。
- en: Right-click on the References label and select Add Reference.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“引用”标签并选择“添加引用”。
- en: In the Reference Manager dialog box, expand the Projects node in the left-hand
    pane.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器对话框中，展开左侧窗格中的“项目”节点。
- en: Click on Solution.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“解决方案”。
- en: 'Now, check Chapter2.Collections.CollectionsLib in the right-hand pane:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在右侧窗格中检查`Chapter2.Collections.CollectionsLib`：
- en: '![](img/aecd3e1c-474b-41c4-a86e-c414f0ba4d72.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aecd3e1c-474b-41c4-a86e-c414f0ba4d72.png)'
- en: Click OK.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Double-click on the Get Fruits button.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击“获取水果”按钮。
- en: You will see the `FruitsButton_Click()` method.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到`FruitsButton_Click()`方法。
- en: 'Scroll up the code window and add the following `using` directive at the end
    of all the `using` directives:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上滚动代码窗口，并在所有`using`指令的末尾添加以下`using`指令：
- en: '[PRE11]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Again, scroll down and inside the `FruitsButton_Click()` method, write the
    following code:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次向下滚动，并在`FruitsButton_Click()`方法中编写以下代码：
- en: '[PRE12]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Switch back to the `MainWindow.xaml` design view by clicking on its tab or just
    double-clicking on the `MainWindow.xaml` label in the Solution Explorer.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击其标签或直接在解决方案资源管理器中双击`MainWindow.xaml`标签来切换回`MainWindow.xaml`的设计视图。
- en: Select the Get Items button and double-click on it.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“获取项目”按钮并双击它。
- en: 'Now type the following code inside the `ItemsButton_Click()` event method:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`ItemsButton_Click()`事件方法中输入以下代码：
- en: '[PRE13]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's press *F5* and debug the code.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按*F5*来调试代码。
- en: Press the Get Fruits and Get Items buttons.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“获取水果”和“获取项目”按钮。
- en: 'You should see output like this:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到如下输出：
- en: '![](img/f23c37d3-b1e1-4b54-85dc-4f697f724814.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f23c37d3-b1e1-4b54-85dc-4f697f724814.png)'
- en: How it works...
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now we have a working WPF application that uses a .NET Standard 2.0 library
    as its source. Let's have a look at the steps we followed. In steps 1 to 7, we
    opened the previously built .NET Standard 2.0 library project and the solution.
    After that, we added a Windows Presentation Foundation project to the solution.
    As you know, WPF is a UI framework that runs on top of the .NET Framework.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个使用.NET Standard 2.0库作为其源的工作WPF应用程序。让我们看看我们遵循的步骤。在步骤1到7中，我们打开了之前构建的.NET
    Standard 2.0库项目和解题方案。之后，我们将一个Windows Presentation Foundation项目添加到解决方案中。正如你所知，WPF是一个在.NET
    Framework之上运行的UI框架。
- en: From steps 9 to 13, we just created the user interface for our application.
    Then, in step 12, we changed some default properties of the controls we added.
    Giving meaningful names is a very good practice as it helps you to build readable
    code. In step 20, we just double-clicked on a control, in this case the button,
    to open the code windows. By default, Visual Studio chooses an event for us. Mainly,
    it chooses a commonly used event and, in this case, it's the click event of the
    button.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从步骤9到13，我们只是创建了应用程序的用户界面。然后在步骤12中，我们更改了我们添加的控件的一些默认属性。赋予有意义的名称是一个非常好的做法，因为它有助于你构建可读的代码。在步骤20中，我们只是双击了一个控件，在这个例子中是按钮，以打开代码窗口。默认情况下，Visual
    Studio为我们选择了一个事件。主要选择一个常用事件，在这个例子中是按钮的点击事件。
- en: In step 22, we referenced the .NET Standard 2.0 library to the code. This will
    allow you to access its available methods in the WPF application. In step 23,
    we have the actual running code for the button click event. In the first line,
    we created an instance of `LittleShop()` and stored it in a variable. Then we
    used the `GetFruitsList()` method to get the list of fruits and stored it in a
    variable. Then we looped through all the available items in the `fruits` variable.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤22中，我们将.NET Standard 2.0库引用到代码中。这将允许你在WPF应用程序中访问其可用方法。在步骤23中，我们有按钮点击事件的实际运行代码。在第一行，我们创建了一个`LittleShop()`实例并将其存储在一个变量中。然后我们使用`GetFruitsList()`方法获取水果列表并将其存储在一个变量中。然后我们遍历`fruits`变量中所有可用的项目。
- en: '[PRE14]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the previous code for the `fruits`variable, there is a `List` collection.
    `foreach` will loop through each item inside the `List` collection stored in the
    `fruits` variable. And inside the loop, a `FruitsList` list box control adds each
    item in the `fruits` collection, which is stored in the `fruit` variable.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前为`fruits`变量编写的代码中，有一个`List`集合。`foreach`循环将遍历存储在`fruits`变量中的`List`集合内的每个项目。在循环内部，一个`FruitsList`列表框控件将添加存储在`fruit`变量中的`fruits`集合中的每个项目。
- en: '[PRE15]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After we have added each item to the list box (`FruitsList`), we have added
    a string that displays the number of items in the `List` collection. We have used
    the `Count` property in the `List` collection to get that information. And, in
    the last line of code, we picked the `Capacity` of the `List` collection. The
    capacity property gets or sets the total number of elements the internal data
    structure can hold without resizing.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将每个项目添加到列表框（`FruitsList`）之后，我们添加了一个显示`List`集合中项目数量的字符串。我们使用了`List`集合中的`Count`属性来获取该信息。在代码的最后一行，我们选择了`List`集合的`Capacity`属性。容量属性获取或设置内部数据结构可以不进行大小调整而容纳的总元素数。
- en: In step 26, we created an instance of the `LittleShop()` class and used the
    `GetShopItems()` method to get the items returned as an `ArrayList()`. Then we
    used a `for` loop to get the items inside the second list box. The rest is the
    same as we did with the `List` collection.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤26中，我们创建了一个`LittleShop()`类的实例，并使用`GetShopItems()`方法获取作为`ArrayList()`返回的项目。然后我们使用`for`循环获取第二个列表框中的项目。其余部分与我们对`List`集合所做的一样。
- en: Describing our library with Reflections
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反射描述我们的库
- en: In this recipe, we will be building a class object that will have two public
    methods. After using a console application, we will be describing this class object
    using Reflections. A Reflection gives you the ability to read its own metadata
    of finding assemblies, type, and module information at runtime.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将构建一个具有两个公共方法的类对象。在使用控制台应用程序之后，我们将使用反射来描述这个类对象。反射赋予你读取其自身元数据以及在运行时查找程序集、类型和模块信息的能力。
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure we have Visual Studio 2017 and all the updates installed. We will
    be starting with a blank solution. A blank solution is a very good starting point
    for any scale of project. Let's build our .NET Standard 2.0 library.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已安装Visual Studio 2017及其所有更新。我们将从一个空白解决方案开始。空白解决方案是任何规模项目的非常好的起点。让我们构建我们的.NET
    Standard 2.0库。
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane and
    then Blank Solution in the right-hand pane.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”，然后在“新建项目模板”对话框中，在左侧窗格的“其他项目类型”节点下选择“Visual Studio解决方案”，然后在右侧窗格中选择“空白解决方案”。
- en: 'In the Name: text box, type `Chapter2.Reflections` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click Browse... button
    and select a location. Leave the defaults as they are:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，将`Chapter2.Reflections`作为解决方案的名称输入。在“位置：”下拉列表中选择一个首选位置或点击“浏览...”按钮选择一个位置。保留默认设置：
- en: '![](img/e94bbb65-3bb2-41c2-818d-80a471fe8c5e.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e94bbb65-3bb2-41c2-818d-80a471fe8c5e.png)'
- en: Click OK.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Reflections.
    Right-click and select Add | New Project.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器（或按*Ctrl* + *Alt* + *L*），选择Chapter2.Reflections。右键单击并选择“添加”|“新项目”。
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”对话框中，展开“Visual C#”节点，并在左侧窗格中选择“.NET Standard”。
- en: 'In the right-hand pane, select Class Library (.NET Standard):'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择“类库 (.NET Standard)”：
- en: '![](img/44ee992e-3c96-460b-adf5-2b95ce49e9ee.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/44ee992e-3c96-460b-adf5-2b95ce49e9ee.png)'
- en: 'Now, in the Name: text box, type `Chapter2.Reflections.CalculatorLib` and leave
    the Location: text box as it is:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c63ec722-e6e0-4e42-bd53-566d5c1a8a8e.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L* to open) should look
    like this:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60c4ef83-e10d-4baf-ae96-95467761eabb.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Select `Class1.cs` in the project tree and press *F2*.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename `Class1.cs` as `Calculator.cs`, also making sure that you have done
    the same to the class name itself:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd4c25cd-b407-4be3-b2af-f3d0f11846dc.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'In the code window, and in between the curly brackets of the `Calculator` class,
    write the following code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's do a quick build by pressing *Ctrl* + *Shift* + *B*.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From steps 1 to 4, we created a blank solution. Then, from steps 5 to 9, we
    added a .NET Standard 2.0 library to the blank solution. In step 12, we renamed
    the existing `Class1.cs` that came with the template to something more meaningful.
    We also renamed the class name to match the filename. This is good practice and
    is also the default behavior of Visual Studio when you create a brand new class.
    We changed the name to `Calculator.cs` and the class name to `Calculator`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: In step 14, we added two simple methods to the `Calculator` class. The first
    method adds the given integers and the second method subtracts one integer from
    another. Finally, we did a quick build to check for syntax errors.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: A .NET Core console application to use the library
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at using Reflections in this recipe. We have built a small
    .NET Standard 2.0 library in the last recipe. Now we will be creating a .NET Core-based
    console application and use reflections to describe our library. We will be using
    the `System.Reflection` namespace and a few of its classes
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make sure you have completed the previous recipe and, if not, complete
    it and come back to this one. Open Visual Studio 2017 and locate and open the
    previously built .NET Standard library.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter2.Reflections` solution.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the Chapter2.Reflections solution label. Click File | Add | New
    Project.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Core and then Console App (.NET Core) in the right-hand pane:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c898c7e-73d5-4051-9a68-deb0c32f76d1.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Reflections.ReflectCore` as the
    name of the project. The rest of the fields should be left as defaults:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3dfeac57-0137-4b0b-9179-7d09eb06ca14.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dcbb6288-addc-4e9a-94a9-5f073c78ddcb.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
- en: Right-click on the Dependencies label in the Chapter2.Reflections.CalculatorLib.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Chapter2.Reflections.CalculatorLib`中的“依赖项”标签。
- en: Select Add Reference.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“添加引用”。
- en: In the Reference Manager, click on the Projects label in the right-hand pane.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在参考管理器中，点击右侧窗格中的“项目”标签。
- en: Check the Chapter2.Reflections.CalculatorLibproject in the left-hand pane.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中检查`Chapter2.Reflections.CalculatorLib`项目。
- en: Click OK.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, double-click on Program.cs to open the code window.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`Program.cs`以打开代码窗口。
- en: In the code window, scroll to the top of the screen.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，滚动到屏幕顶部。
- en: 'Next to the last line of the `using` directives, add this `using` directive:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`using`指令的最后一行旁边，添加以下`using`指令：
- en: '[PRE18]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Again, scroll down until you reach the `Main()` method and write the following
    code in between the curly brackets of the `Main()` method:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，向下滚动直到到达`Main()`方法，并在`Main()`方法的括号之间写入以下代码：
- en: '[PRE19]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s hit *F5* and see the output:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按*F5*并查看输出：
- en: '![](img/cc88f0b5-378c-44a2-85fe-0c8740cca464.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc88f0b5-378c-44a2-85fe-0c8740cca464.png)'
- en: Press any key to exit.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按任意键退出。
- en: How it works...
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's have a look at the steps and try to understand. In steps 1 to 3, we opened
    an existing solution that contained the .NET Standard 2.0 library. We did a quick
    build to check that all the syntax was OK and the project is compiling without
    any issues. In steps 4 to 8, we added a .NET Core console-based application to
    the project and gave it a proper name.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看步骤并尝试理解。在步骤1到3中，我们打开了一个包含.NET Standard 2.0库的现有解决方案。我们快速构建以检查所有语法是否正确，并且项目没有问题地编译。在步骤4到8中，我们将一个基于.NET
    Core的控制台应用程序添加到项目中，并给它一个合适的名称。
- en: In steps 10 to 14, we added a reference to the .NET Standard 2.0 library project
    from our .NET Core console application. In step 17, we added two namespaces to
    the `Program.cs` code. One is for accessing reflection classes, which are contained
    in the `System.Reflection` namespace. The other one is the .NET Standard 2.0 library
    itself.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤10到14中，我们从.NET Core控制台应用程序中添加了对.NET Standard 2.0库项目的引用。在步骤17中，我们将两个命名空间添加到了`Program.cs`代码中。一个是用于访问反射类，这些类包含在`System.Reflection`命名空间中。另一个是.NET
    Standard 2.0库本身。
- en: 'In step 18, we added code to the `Program.cs`, `Main()` method:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤18中，我们在`Program.cs`的`Main()`方法中添加了代码：
- en: '[PRE20]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the first line of code we have stored a `Calculator`class type into a variable
    named `info`, which is a type of `System.Reflections.MemberInfo()`. In the second
    line of code, we have accessed the of the assembly class name using a `Name` property,
    while again we have accessed the module name using a `Module.Name` property. The
    `Member Info()` class allows you to get information about the attributes of a
    member and provides access to member metadata:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行代码中，我们将一个名为`info`的变量存储了一个`Calculator`类类型，该变量是`System.Reflections.MemberInfo()`类型。在第二行代码中，我们使用`Name`属性访问了程序集类的名称，而再次使用`Module.Name`属性访问了模块名称。`Member
    Info()`类允许您获取成员的属性信息，并提供对成员元数据的访问：
- en: '[PRE21]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding few lines of code, we have created an instance of the `Calculator()`
    class established inside the .NET Standard 2.0 library. In the second line, we
    stored the type of class. In the third line, we have a variable named methods
    to store all the available runtime methods inside that class. Since `GetRuntimeMethods()`
    is a collection, we can easily use a `foreach` statement to iterate through the
    collections. And finally, inside the `foreach()` statement we have output the
    name and the return type of each method available inside the `Calculator()` class.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的几行代码中，我们在.NET Standard 2.0库内部创建了一个`Calculator()`类的实例。在第二行中，我们存储了类的类型。在第三行中，我们有一个名为`methods`的变量，用于存储该类内部所有可用的运行时方法。由于`GetRuntimeMethods()`是一个集合，我们可以轻松地使用`foreach`语句遍历集合。最后，在`foreach()`语句内部，我们输出了`Calculator()`类内部每个方法的名称和返回类型。
- en: At the end, we waited for the user to press any key to exit the console application.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们等待用户按任意键退出控制台应用程序。
- en: In step *19*, in the output, you might have noticed that apart from the two
    public methods we have created, there are several more methods. These are coming
    from the base `Object` class itself.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤*19*中，在输出中，您可能会注意到除了我们创建的两个公共方法之外，还有更多方法。这些方法来自基`Object`类本身。
- en: Building a .NET Standard 2.0 library that uses LINQ
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建.NET Standard 2.0库，使用LINQ
- en: In this recipe, we will be using LINQ inside our .NET Standard 2.0 library.
    LINQ stands for .NET Language-Integrated Query. LINQ defines a set of general
    purpose standard query operators: list, select, sort, and projection operators
    in any .NET-based programming language. The standard query operators allow queries
    to be applied to any `IEnumerable<T>`—based information source.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将在我们的.NET Standard 2.0库中使用LINQ。LINQ代表.NET语言集成查询。LINQ定义了一组通用标准查询操作符：列表、选择、排序和投影操作符，这些操作符可以在任何.NET编程语言中使用。标准查询操作符允许查询应用于任何基于`IEnumerable<T>`的信息源。
- en: We will be building a .NET Standard 2.0 library that utilizes LINQ and use the
    library in the next recipe.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个利用LINQ的.NET Standard 2.0库，并在下一个示例中使用这个库。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's get prepared by opening Visual Studio 2017 and creating a .NET Standard
    2.0 library-based project. We can start with a blank solution and later on add
    the library project.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过打开Visual Studio 2017并创建一个基于.NET Standard 2.0库的项目来做好准备。我们可以从一个空白解决方案开始，稍后添加库项目。
- en: How to do it...
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane and
    then Blank Solution in the right-hand pane.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”，然后在左侧窗格的“其他项目类型”节点下选择“Visual Studio解决方案”，然后在右侧窗格中选择“空白解决方案”。
- en: 'In the Name: text box, type `Chapter2.Linq` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click the Browse... button
    and select a location. Leave the defaults as they are:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，输入`Chapter2.Linq`作为解决方案的名称。在“位置”下拉列表中选择一个首选位置，或点击“浏览...”按钮选择一个位置。保留默认设置：
- en: '![](img/e4c790ae-563b-4ade-ae31-7783318dcab0.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4c790ae-563b-4ade-ae31-7783318dcab0.png)'
- en: Click OK.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Linq.
    Right-click and select Add | New Project.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器（或按*Ctrl* + *Alt* + *L*），选择Chapter2.Linq。右键单击并选择“添加”|“新建项目”。
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”对话框中，展开“Visual C#”节点，并在左侧窗格中选择.NET Standard。
- en: In the right-hand pane, select Class Library (.NET Standard).
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择“类库 (.NET Standard)”。
- en: '![](img/2c7235a4-bef0-48a6-9177-339bafacb4ac.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c7235a4-bef0-48a6-9177-339bafacb4ac.png)'
- en: 'Now, in the Name: text box, type `Chapter2.Linq.QueriesLib` and leave the Location: text
    box as it is:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称”文本框中，输入`Chapter2.Linq.QueriesLib`，并保留“位置”文本框不变：
- en: '![](img/46570710-4850-4efd-be6d-5b3f7a2723ff.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/46570710-4850-4efd-be6d-5b3f7a2723ff.png)'
- en: Click OK.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L* to open) should look
    like this:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按*Ctrl* + *Alt* + *L*打开）应该看起来像这样：
- en: '![](img/4446b8fd-d524-4b9c-8d92-2dfedb849cbe.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4446b8fd-d524-4b9c-8d92-2dfedb849cbe.png)'
- en: Select Class1.cs in the project tree and press *F2*.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目树中选择Class1.cs并按*F2*。
- en: Rename `Class1.cs` as `TelephoneBook.cs`, also making sure that you have done
    the same to the class name itself.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Class1.cs`重命名为`TelephoneBook.cs`，同时确保你也将类名本身进行了相同的更改。
- en: Answer Yes in the confirmation dialog box for renaming.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中点击“是”以确认重命名。
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/93a2abd6-f0bd-4ca6-b21b-c5b4e582a334.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93a2abd6-f0bd-4ca6-b21b-c5b4e582a334.png)'
- en: Double-click the TelephoneBook.cs file to open the code window.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击TelephoneBook.cs文件以打开代码窗口。
- en: 'Now, scroll up to the top of the code window and add the following code next
    to the last line of the `using` directives:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将代码窗口滚动到顶部，并在`using`指令的最后一行旁边添加以下代码：
- en: '[PRE22]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Again, scroll down till you reach the open curly bracket of the `TelephoneBook`
    class and add the following code:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，滚动到`TelephoneBook`类的开括号处，并添加以下代码：
- en: '[PRE23]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, in the next line, add the following code as the `constructor` method:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在下一行，将以下代码作为`constructor`方法添加：
- en: '[PRE24]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next to the constructor, add the following code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数旁边添加以下代码：
- en: '[PRE25]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Again, add this code block at the end of the `GetContacts()` method:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在`GetContacts()`方法的末尾添加此代码块：
- en: '[PRE26]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, add the following code block at the end of the `GetContactsByLastName()`
    method:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`GetContactsByLastName()`方法的末尾添加以下代码块：
- en: '[PRE27]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now that we are done with adding code to the .NET Standard 2.0 library, let's
    hit *Ctrl* + *Shift* + *B* for a quick build and check for syntax errors.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经将代码添加到.NET Standard 2.0库中，让我们按*Ctrl* + *Shift* + *B*进行快速构建并检查语法错误。
- en: How it works...
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: From steps 1 to 4, we created a blank solution using Visual Studio 2017 and
    gave it a location and a proper meaningful name. Then, from steps 5 to 9, we added
    a new .NET Standard 2.0 library to the blank solution. As usual, we gave it a
    proper and meaningful name.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 从步骤1到4，我们使用Visual Studio 2017创建了一个空白解决方案，并给它指定了一个位置和有意义的名称。然后，从步骤5到9，我们在空白解决方案中添加了一个新的.NET
    Standard 2.0库。像往常一样，我们给它起了一个恰当且有意义的名字。
- en: In steps 12 and 13, we renamed the default `Class1.cs` template to `TelephoneBook.cs`.
    It's a good practice to keep both the class and filename the same. This is more
    readable and understandable when you come back to your code. In step 16, we added
    two namespaces to the code. `System.Collections.Generic` will get you the `List<T>`
    class used in the code and `System.Linq` gives you more control over those generic
    collections by allowing the LINQ functionality.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤12和13中，我们将默认的 `Class1.cs` 模板重命名为 `TelephoneBook.cs`。保持类和文件名相同是一个好习惯。当你回到代码时，这会使代码更易读、更易理解。在步骤16中，我们向代码中添加了两个命名空间。`System.Collections.Generic`
    将为你提供代码中使用的 `List<T>` 类，而 `System.Linq` 通过允许使用LINQ功能，为你提供了对那些泛型集合的更多控制。
- en: In step 17, we introduced a private variable type of `List<string>`. In step
    18, we initiated the variable and added some data to the list.  Everything is
    done inside the constructor of the `TelephoneBook()` class. In step 19, we created
    a method that returns the list of contacts. It has one line of code that returns
    the populated list.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤17中，我们引入了一个类型为 `List<string>` 的私有变量。在步骤18中，我们初始化了这个变量并向列表中添加了一些数据。  所有这些都是在
    `TelephoneBook()` 类的构造函数中完成的。在步骤19中，我们创建了一个返回联系人列表的方法。它只有一行代码，返回了填充后的列表。
- en: 'Again, in step 20, we created a method that takes a string as a parameter.
    The parameter is the last name and we have used LINQ queries in this line:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在步骤20中，我们创建了一个接受字符串作为参数的方法。该参数是姓氏，我们在这行代码中使用了LINQ查询：
- en: '[PRE28]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We have used a `Where` clause to filter down the list and used an inline function
    to pass the `lastName` parameter to the operation. Finally, we output the result
    as a list and returned the result at the end of the method.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个 `Where` 子句来过滤列表，并使用内联函数将 `lastName` 参数传递给操作。最后，我们将结果作为列表输出，并在方法末尾返回结果。
- en: In step 21, we created a method that ordered the list using LINQ. The `GetSortedContacts()`takes
    one Boolean parameter and it is optional. C# has supported optional parameters
    since C# 4.0.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤21中，我们创建了一个使用LINQ对列表进行排序的方法。`GetSortedContacts()` 方法接受一个布尔参数，它是可选的。C#自C#
    4.0以来就支持可选参数。
- en: '[PRE29]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The previous line of code uses the `OrderBy()` method in the list to order the
    list in ascending order and pass it as a list. If we need it in descending order,
    just pass the method parameter as `false`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码使用了列表中的 `OrderBy()` 方法来按升序排序列表，并将其作为列表传递。如果我们需要降序排序，只需将方法参数传递为 `false`。
- en: An ASP.NET MVC application to use the library
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用库的ASP.NET MVC应用程序
- en: In this recipe, we will be creating an ASP.NET MVC application to use the .NET
    Standard 2.0 library. This was created in the previous recipe. ASP.NET MVC applications
    run in Windows-based systems under IIS and use the full .NET Framework. We will
    be starting with an empty ASP.NET MVC project, before moving to its components
    and use of the library.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个ASP.NET MVC应用程序来使用.NET Standard 2.0库。这个库是在上一个菜谱中创建的。ASP.NET MVC应用程序在基于Windows的系统下运行于IIS，并使用完整的.NET
    Framework。我们将从一个空的ASP.NET MVC项目开始，然后转向其组件和库的使用。
- en: Getting ready
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Locate the previously built .NET Standard 2.0 library and make sure it builds
    without any errors. It is also assumed you have basic knowledge of MVC-based ASP.NET
    applications and are familiar with the terms Models, Views, and Controllers.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 定位之前构建的.NET Standard 2.0库，并确保它构建时没有错误。还假设你具备基于MVC的ASP.NET应用程序的基本知识，并且熟悉术语模型（Models）、视图（Views）和控制器（Controllers）。
- en: How to do it...
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | **Open
    Project/Solution**, or press *Ctrl* + *Shift* + *O*, and select the Chapter2.Linq
    solution.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个菜谱中的解决方案。点击 文件 | 打开 | **打开项目/解决方案**，或者按 *Ctrl* + *Shift* + *O*，然后选择Chapter2.Linq解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建以检查一切是否正常。
- en: Now, click on the Chapter2.Linq solution label. Click File | Add | New Project.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击Chapter2.Linq解决方案标签。点击 文件 | 添加 | 新项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 添加新项目 模板对话框中，展开左侧窗格中的Visual C#节点。
- en: 'Select Web and then ASP.NET Web Application (.NET Framework) in the right-hand
    pane:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择 Web，然后选择 ASP.NET Web 应用程序 (.NET Framework)：
- en: '![](img/20a27ff5-8440-47b4-9efd-d52f03e50785.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20a27ff5-8440-47b4-9efd-d52f03e50785.png)'
- en: 'Now, in the Name: text box, type `Chapter2.Linq.QueriesMVC` as the name and
    leave the Location: text box at its default value:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，键入`Chapter2.Linq.QueriesMVC`作为名称，并将“位置：”文本框保留在默认值：
- en: '![](img/abf53291-f64e-4a65-86f4-81520db37cf4.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abf53291-f64e-4a65-86f4-81520db37cf4.png)'
- en: In the New ASP.NET Web Application dialog box, select Empty from the template
    list.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新 ASP.NET Web 应用程序对话框中，从模板列表中选择空：
- en: 'Select MVC as the Add folders and core references for: option:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择MVC作为“为以下添加文件夹和核心引用”的选项：
- en: '![](img/8cddcabf-0bb7-45e7-b831-8569d4a9dc36.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cddcabf-0bb7-45e7-b831-8569d4a9dc36.png)'
- en: Leave the rest as it is and click OK to create the default ASP.NET MVC Web Application
    template.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其余部分不变，并点击确定以创建默认的 ASP.NET MVC Web 应用程序模板。
- en: 'Now, Solution Explorer should look like this:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/6e9e4007-12da-496d-a4df-d884af83963b.png)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e9e4007-12da-496d-a4df-d884af83963b.png)'
- en: Now, right-click on the Controllers folder inside the Chapter2.Linq.QueriesMVC project.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Chapter2.Linq.QueriesMVC`项目中的“控制器”文件夹内右键单击。
- en: Select Add | Controller.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择添加 | 控制器。
- en: 'In the Add Scaffold dialog box, select MVC 5 Controller - Empty:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加脚手架对话框中，选择MVC 5 控制器 - 空的：
- en: '![](img/844d157d-f6a6-4d5a-9ce4-67c67e954f4b.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/844d157d-f6a6-4d5a-9ce4-67c67e954f4b.png)'
- en: Click Add.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加。
- en: 'In the Add Controller dialog box, type `HomeController` as the name of the
    controller:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加控制器对话框中，将控制器名称键入为`HomeController`：
- en: '![](img/8a1937df-7064-41f2-8a42-6d206c147b2a.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a1937df-7064-41f2-8a42-6d206c147b2a.png)'
- en: Click Add.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按 *Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/070304a9-3490-43c0-9ef5-b6e8bed16785.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/070304a9-3490-43c0-9ef5-b6e8bed16785.png)'
- en: Now, right-click on the References label and select Add Reference.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击“引用”标签并选择添加引用。
- en: 'In the Reference Manager, select Projects and check Chapter2.Linq.QueriesLib from
    the list:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在参考管理器中，选择项目并从列表中检查Chapter2.Linq.QueriesLib：
- en: '![](img/d012a394-ca29-4efa-bada-2018e2ca7894.png)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d012a394-ca29-4efa-bada-2018e2ca7894.png)'
- en: Click OK.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now, double-click on HomeController.cs in the Controllers folder.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“控制器”文件夹中双击`HomeController.cs`。
- en: 'In the code window for HomeController.cs, scroll up and add the following code
    at the last line of the `using` directives:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`代码窗口中，向上滚动并在`using`指令的最后一行添加以下代码：
- en: '[PRE30]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Inside the `Index()` action, before the `return` keyword, add the following
    code:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Index()`动作中，在`return`关键字之前添加以下代码：
- en: '[PRE31]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Right-click on the method name of the `Index()` method and select Add View:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Index()`方法的名称并选择添加视图：
- en: '![](img/a88b630b-98ca-45b6-8a5a-cb71f46d38c6.png)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a88b630b-98ca-45b6-8a5a-cb71f46d38c6.png)'
- en: 'In the Add View dialog box, leave the defaults and click Add:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加视图对话框中，保留默认设置并点击添加：
- en: '![](img/09bdfcf0-0e0c-46ca-9c1e-c5f3dbad7a10.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09bdfcf0-0e0c-46ca-9c1e-c5f3dbad7a10.png)'
- en: You will be presented with an `Index.cshtml` code window with the default template.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个带有默认模板的`Index.cshtml`代码窗口。
- en: 'Change the code `<h2>Index</h2>`as follows:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码`<h2>Index</h2>`更改为以下内容：
- en: '[PRE32]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now move the cursor to the bottom of the code window and add this code:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将光标移至代码窗口的底部并添加此代码：
- en: '[PRE33]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Let's press *F5* and test the code.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按 *F5* 测试代码。
- en: 'By default, the browser will load `http://localhost:portnumber/Home/` and here
    is the output:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，浏览器将加载`http://localhost:portnumber/Home/`，这里是输出：
- en: '![](img/773addf4-9c10-4293-80a7-9438d60fb097.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](img/773addf4-9c10-4293-80a7-9438d60fb097.png)'
- en: Now let's close the browser and switch back to the `HomeController.cs` code
    window.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们关闭浏览器并切换回`HomeController.cs`代码窗口。
- en: 'Right after the end curly bracket of the `Index()` action method, add the following
    code:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Index()`动作方法的结束花括号之后，添加以下代码：
- en: '[PRE34]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Right-click on the method name of the `Search()` action and select Add View.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Search()`动作的方法名称并选择添加视图。
- en: Follow steps *26* and *27* to add the `Search.chtml` view.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按步骤 *26* 和 *27* 添加`Search.chtml`视图。
- en: 'In the `Search.chtml` code window, change the code `<h2>Search</h2>` to the
    following :'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Search.chtml`代码窗口中，将代码`<h2>Search</h2>`更改为以下内容：
- en: '[PRE35]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following code to `Search.chtml` after the `<h2>` tags:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<h2>`标签之后将以下代码添加到`Search.chtml`中：
- en: '[PRE36]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Let's press *F5* and debug the current code.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按 *F5* 调试当前代码。
- en: 'Type `http://localhost:portnumber/Home/Search`in the browser address bar and
    press *Enter*:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器地址栏中输入`http://localhost:portnumber/Home/Search`并按 *Enter*：
- en: '![](img/54913537-199c-43db-aa32-cd640d0d1616.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54913537-199c-43db-aa32-cd640d0d1616.png)'
- en: 'Now again, type `http://localhost:portnumber/Home/Search?ln=Marrier` in the
    address bar and press *Enter*:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次，在地址栏中输入`http://localhost:portnumber/Home/Search?ln=Marrier`并按*Enter*键：
- en: '![](img/cdda6873-2d9b-44f4-be7d-ef88c4be9987.png)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cdda6873-2d9b-44f4-be7d-ef88c4be9987.png)'
- en: Close the browser and switch back to the `HomeController.cs` code window.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并切换回`HomeController.cs`代码窗口。
- en: 'Add the following code after the `Search()` action method:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Search()`动作方法之后添加以下代码：
- en: '[PRE37]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Right-click on the method name of the `SortedContacts()` action and select Add
    View.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`SortedContacts()`动作的方法名称，然后选择添加视图。
- en: Follow steps *26* and *27* to add the `SortedContacts.chtml` view.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照步骤*26*和*27*添加`SortedContacts.chtml`视图。
- en: Now, in the `SortedContacts.chtml`, change `<h2>SortedContacts</h2>` to `<h2>Sorted
    Contacts</h2>`.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`SortedContacts.chtml`中，将`<h2>SortedContacts</h2>`更改为`<h2>Sorted Contacts</h2>`。
- en: At the end of the `<h2>` tags add the following code.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<h2>`标签的末尾添加以下代码。
- en: '[PRE38]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Press *F5* to debug the current code.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*键以调试当前代码。
- en: 'Type`http://localhost:portnumber/Home/SortedContacts` in the address bar of
    the browser and press *Enter*:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器地址栏中输入`http://localhost:portnumber/Home/SortedContacts`并按*Enter*键：
- en: '![](img/1dabb79c-f045-4a7e-913c-27d2bedec8d3.png)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dabb79c-f045-4a7e-913c-27d2bedec8d3.png)'
- en: 'Again, type `http://localhost:51084/Home/SortedContacts?asc=false` in the address
    bar and press *Enter*:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在地址栏中输入`http://localhost:51084/Home/SortedContacts?asc=false`并按*Enter*键：
- en: '![](img/026b9e17-9f8b-4341-bb56-85b280144ba5.png)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/026b9e17-9f8b-4341-bb56-85b280144ba5.png)'
- en: Close the browser.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: How it works...
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's have a look at the completed steps. From steps 1 to 3, we opened an existing
    solution, which was completed in the previous recipe. Then we did a quick build
    for syntax checking. From steps 4 to 6, we have added an ASP.NET Web Application
    project to the existing solution. In step 7, we gave it a proper name.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看完成后的步骤。从步骤1到3，我们打开了一个现有的解决方案，这是在之前的菜谱中完成的。然后我们快速构建以进行语法检查。从步骤4到6，我们在现有解决方案中添加了一个ASP.NET
    Web应用程序项目。在第7步，我们给它起了个合适的名字。
- en: Later on, in steps 8 and 9, we decided what sort of ASP.NET Web Application
    it should be. In this case, we have selected MVC empty template. In steps 13 to
    15, we have added a Controller to the MVC application. We have selected an empty
    MVC 5 Controller.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在步骤8和9中，我们决定它应该是什么样的ASP.NET Web应用程序。在这种情况下，我们选择了MVC空模板。在步骤13到15中，我们向MVC应用程序添加了一个控制器。我们选择了一个空的MVC
    5控制器。
- en: In steps 19 to 21, we added the reference from the .NET Standard 2.0 library.
    In step 23, we referenced it at the code level. In step 24, in the first line
    of code, we created an instance of the `TelephoneBook()` class. In the second
    line, we invoked the `GetContacts()` method and stored it in `ViewBag.Contacts`.
    `ViewBag` is used to send data from the Controller to the View.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤19到21中，我们从.NET Standard 2.0库中添加了引用。在第23步，我们在代码级别引用了它。在第24步，代码的第一行中，我们创建了一个`TelephoneBook()`类的实例。在第二行中，我们调用了`GetContacts()`方法并将其存储在`ViewBag.Contacts`中。`ViewBag`用于从控制器向视图发送数据。
- en: From steps 25 to 27, we added a View to the Controllers action method. In step
    28, we changed existing code in the `View` template created for us by Visual Studio.
    Then, we looped through the contacts using Razor syntax. In steps 30 and 31, we
    tested the code in the browser.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 从步骤25到27，我们向控制器动作方法中添加了一个视图。在第28步，我们更改了Visual Studio为我们创建的`View`模板中的现有代码。然后，我们使用Razor语法遍历联系人。在步骤30和31中，我们在浏览器中测试了代码。
- en: From steps 31 to 50, we created views and tested other methods found in the
    `TelephoneBook()` class.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 从步骤31到50，我们创建了视图并测试了`TelephoneBook()`类中找到的其他方法。
