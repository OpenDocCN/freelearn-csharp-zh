- en: Miscellaneous Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他最佳实践
- en: In this book so far, we have discussed various patterns, styles, and code. During
    this discussion, our aim was to understand the patterns and practices to write
    neat, clean, and robust code. This appendix will mainly focus on practices. The
    practice is very important when it comes to adhering to any rule or any kind of
    coding style. As a developer, you should rehearse coding on a daily basis. According
    to the old proverb, *practice makes man perfect*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书已讨论了各种模式、风格和代码。在这次讨论中，我们的目标是理解编写整洁、干净和健壮代码的模式和实践。本附录将主要关注实践。在遵守任何规则或任何类型的编码风格时，实践非常重要。作为一名开发者，你应该每天练习编码。根据古老的谚语，“熟能生巧”。
- en: This is shown through the fact that skills such as playing a game, driving a
    car, reading, or writing do not come instantly. Instead, we should perfect these
    skills over time and with practice. For example, when you start driving, you start
    it slowly. There, you need to remember when to press the clutch, when to press
    the brake, how far they need to turn the steering wheel, and so on. However, once
    the driver is well acquainted with driving, then there is no need to remember
    these steps; they come naturally. This is because of practice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过以下事实得到体现，即像玩游戏、开车、阅读或写作这样的技能并不是立刻就能掌握的。相反，我们应该通过时间和实践来完善这些技能。例如，当你开始开车时，你应该慢慢开始。在那里，你需要记住何时踩离合器，何时踩刹车，需要将方向盘转多远，等等。然而，一旦司机对驾驶非常熟悉，就无需记住这些步骤；它们会自然而然地出现。这是因为练习。
- en: 'In this appendix, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将涵盖以下主题：
- en: Use case discussion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例讨论
- en: Best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Other design patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他设计模式
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This appendix contains various code examples to explain the concepts covered.
    The code is kept simple and is just for demo purposes. Most of the examples in
    this chapter involve a .NET Core console application written in C#.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录包含各种代码示例，以解释涵盖的概念。代码保持简单，仅用于演示目的。本章中的大多数示例都涉及用C#编写的.NET Core控制台应用程序。
- en: 'To run and execute the code, there are these prerequisites:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和执行代码，有以下先决条件：
- en: Visual Studio 2019 (however, you can also run application using Visual Studio
    2017)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2019（然而，您也可以使用Visual Studio 2017运行应用程序）
- en: Installation of Visual Studio
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio的安装
- en: 'To run the code examples included in this chapter, you need to install Visual
    Studio or later. To do so, follow these instructions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本章包含的代码示例，您需要安装Visual Studio或更高版本。为此，请按照以下说明操作：
- en: 'Download Visual Studio from the following download link: [https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下下载链接下载Visual Studio：[https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio)。
- en: Follow the installation instructions.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照安装说明操作。
- en: Multiple versions are available for Visual Studio. We are using Visual Studio
    for Windows.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio有多种版本可供选择。我们正在使用Windows版本的Visual Studio。
- en: 'The example code files for the chapter is available at the following link:
    [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Appendix](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Appendix).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码文件可在以下链接中找到：[https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Appendix](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Appendix)。
- en: Use case discussion
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例讨论
- en: 'Put simply, a use case is a pre-creation or a symbolic representation of a
    business scenario. For example, we can represent our login page use case in a
    pictorial/symbolic representation. In our example, users are trying to log into
    a system. If the login succeeds, they can enter the system. If it fails, the system
    informs the users that the login attempt failed. Refer to the following diagram
    of a **login** use case:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，用例是一个预先创建或象征性的业务场景表示。例如，我们可以用图示/象征性的方式表示我们的登录页面用例。在我们的例子中，用户正在尝试登录系统。如果登录成功，他们可以进入系统。如果失败，系统会通知用户登录尝试失败。请参考以下**登录**用例的图示：
- en: '![](img/e8594ebb-7aa1-4044-8605-a1fb0732da21.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e8594ebb-7aa1-4044-8605-a1fb0732da21.png)'
- en: In the preceding diagram, users called **User1**, **User2**, and **User3** are
    trying to enter the system using the login functionality of the application. If
    the login attempt is successful, the user can access the system. If not, the application
    notifies the user that login wasn't successful and the user can't access the system.
    The preceding diagram is much clearer than our actual verbose description, where
    we are describing this diagram. The diagram is also self-explanatory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，用户**User1**、**User2**和**User3**正在尝试使用应用程序的登录功能进入系统。如果登录尝试成功，用户可以访问系统。如果不成功，应用程序会通知用户登录失败，用户无法访问系统。前面的图比我们实际冗长的描述要清晰得多，我们在描述这个图。该图也是自我解释的。
- en: UML diagram
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UML图
- en: In the previous section, we discussed the login functionality with the help
    of symbolic representation. You might have noticed the symbols that are used in
    the diagram. The notations or symbols used in the previous diagram are part of
    a symbolic language called **Unified Modeling Language**. This is a way of visualizing
    our program, software, or even a class.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们通过符号表示讨论了登录功能。您可能已经注意到了图中使用的符号。前面图中使用的记法或符号是统一建模语言（Unified Modeling
    Language）的一部分。这是一种可视化我们的程序、软件甚至类的方法。
- en: The symbol or notation used in the UML has evolved from the work of Grady Booch,
    James Rumbaugh, Ivar Jacobson, and the Rational Software Corporation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: UML中使用的符号或记法是源于Grady Booch、James Rumbaugh、Ivar Jacobson和Rational Software Corporation的工作。
- en: Types of UML diagram
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UML图的类型
- en: 'These diagrams are divided into two main groups:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图分为两大类：
- en: '**Structural UML Diagrams**: These emphasize the things that must be present
    in the system being modeled. This group is further divided into the following
    different types of diagrams:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化UML图**: 这些图强调在所建模的系统中的必须存在的元素。这一组图进一步分为以下不同类型的图：'
- en: Class diagram
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类图
- en: Package diagram
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包图
- en: Object diagram
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象图
- en: Component diagram
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件图
- en: Composite structure diagram
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合结构图
- en: Deployment diagram
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署图
- en: '**Behavioral UML Diagrams**: These are used to show the functionality of the
    system and include use case, sequence, collaboration, state machine, and activity
    diagrams. This group is further divided into the following different types of
    diagram:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为UML图**: 这些图用于展示系统的功能，包括用例图、序列图、协作图、状态机图和活动图。这一组图进一步分为以下不同类型的图：'
- en: Activity diagram
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动图
- en: Sequence diagram
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列图
- en: Use case diagram
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例图
- en: State diagram
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态图
- en: Communication diagram
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信图
- en: Interaction overview diagram
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互概览图
- en: Timing diagram
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时序图
- en: Best practices
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'As we have established, practice is a habit that occurs in our daily activities.
    In software engineering—where software is engineered and not manufactured—we have
    to practice in order to write good quality code. There may be more points that
    explain the best practices involved in software engineering. Let''s discuss them:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经建立的，练习是一种发生在我们日常活动中的习惯。在软件工程中——在这里软件是设计而不是制造——我们必须练习才能编写高质量的代码。可能还有更多解释软件工程中涉及的最佳实践的观点。让我们来讨论它们：
- en: '**Short but simplified code**: This is a very basic thing that does require
    practice. Developers should use short but simplified code daily in order to write
    concise code and adhere to this practice in their daily life. The code should
    be clean and not repeat itself. Clean code and code simplification was covered
    in previous chapters; if you missed this topic, please revisit [Chapter](e8666bee-88b0-4d5d-a62f-ee8aa27f3e29.xhtml)
    [2](e8666bee-88b0-4d5d-a62f-ee8aa27f3e29.xhtml), *Modern Software Design Patterns
    and Principles*. Take a look at the following example of concise code:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁但简化的代码**: 这是一个非常基础的事情，确实需要练习。开发者应该每天使用简洁但简化的代码来编写简洁的代码，并在日常生活中坚持这一实践。代码应该是干净的，不应该重复。关于代码整洁和代码简化在之前的章节中已有介绍；如果您错过了这个主题，请回顾[第2章](e8666bee-88b0-4d5d-a62f-ee8aa27f3e29.xhtml)，*现代软件开发模式和原则*。请看以下简洁代码的例子：'
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code snippet contains a `Math` class with three `Add` methods.
    These methods are written to calculate the sum of two integer numbers and the
    sum of two float and decimal numbers. The `Add(float a, float b)` and `Add(decimal
    a, decimal b)` methods are the overloaded methods of `Add (int a, int b)`. The
    previous code example represents a scenario where the requirements are to make
    a single method with a output of the int, float, or decimal datatype.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码片段包含一个具有三个`Add`方法的`Math`类。这些方法被编写来计算两个整数和两个浮点数及十进制数的和。`Add(float a, float
    b)`和`Add(decimal a, decimal b)`方法是`Add(int a, int b)`的重载方法。之前的代码示例代表了一个要求实现一个方法，该方法可以输出int、float或decimal数据类型的场景。
- en: '**Unit testing**: This is an integral part of development when we want to test
    our code by writing code. **Test-driven development** (**TDD**) is one of the
    best practices that one should adhere to. We have discussed TDD in [Chapter 7](232b63cb-5006-431d-8378-b7e2ba4c1119.xhtml),
    *Implementing Design Patterns for Web Applications - Part 2*.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：当我们通过编写代码来测试我们的代码时，这是开发的一个基本部分。**测试驱动开发**（**TDD**）是应该遵循的最佳实践之一。我们在[第7章](232b63cb-5006-431d-8378-b7e2ba4c1119.xhtml)，“实现Web应用程序的设计模式
    - 第2部分”中讨论了TDD。'
- en: '**Code consistency**: Nowadays, there are very rare opportunities for a developer
    to work alone. A developer mostly works in a team, meaning that it is very important
    for there to be code consistency throughout the team. Code consistency can refer
    to code style. There are a few recommended practices and coding conversions that
    developers should use regularly while writing programs.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码一致性**：如今，开发者独自工作的机会非常罕见。开发者大多在团队中工作，这意味着在整个团队中保持代码一致性非常重要。代码一致性可以指代码风格。有一些推荐的实践和编码约定，开发者在编写程序时应经常使用。'
- en: 'There are many ways to declare a variable. Here is one of the best examples
    for variable declaration:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 声明变量的方式有很多。以下是变量声明的一个最佳示例：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous code, we have declared a `math` variable of the `BestPractices.Math`
    type. Here, `BestPractices` is our namespace and `Math` is the class. If we are
    not taking `using` directives in the code then it's good practice to have fully
    namespace qualified variables.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们已经声明了一个`math`变量，其类型为`BestPractices.Math`。在这里，`BestPractices`是我们的命名空间，`Math`是类。如果我们不在代码中使用`using`指令，那么使用完全命名空间限定的变量是一种良好的实践。
- en: 'Official docs for the C# language describe these conventions very elaborately.
    You can refer to them here: [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: C#语言的官方文档对这些约定描述得非常详细。您可以通过以下链接参考它们：[https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions)。
- en: '**Code reviews**: Making mistakes is human nature, and this also happens in
    development. Code review is the first step in practicing writing bug-free code
    and uncovering the unpredictable mistakes in the code.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码审查**：犯错误是人类的天性，这在开发中也会发生。代码审查是实践编写无错误代码和揭示代码中不可预测错误的第一步。'
- en: Other design patterns
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他设计模式
- en: So far, we have covered various design patterns and principles including the
    best practices to write code. This section will summarize the following patterns
    and guide you to write quality and robust code. The details and implementation
    of these patterns are beyond the scope of this book.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了各种设计模式和原则，包括编写代码的最佳实践。本节将总结以下模式，并指导您编写高质量和健壮的代码。这些模式的详细内容和实现超出了本书的范围。
- en: 'We have already covered the following patterns:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了以下模式：
- en: GoF patterns
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GoF模式
- en: Design principles
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计原则
- en: Software development life cycle patterns
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发生命周期模式
- en: Test-driven development
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: In this book, we have covered a lot of topics and developed a sample application
    (console and web). This is not the end of the world, there are more things to
    learn in the world.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们涵盖了众多主题，并开发了一个示例应用程序（控制台和Web）。这并不是世界的尽头，世界上还有更多东西要学习。
- en: 'We can list more patterns:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以列出更多模式：
- en: '**Space-based architectural pattern**: **Space-based Pattern** (**SBP**s) are
    patterns that help with application scalability by minimizing the factors that
    limit application scaling. These patterns are also known as **cloud architecture
    patterns**. We have covered many of them in [Chapter 12](002c9eec-cbca-4771-b5b0-45048acaa489.xhtml),
    *Coding for the Cloud*.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于空间的架构模式**：**基于空间的模式**（**SBP**s）是通过最小化限制应用程序扩展的因素来帮助应用程序可扩展性的模式。这些模式也被称为**云架构模式**。我们在[第12章](002c9eec-cbca-4771-b5b0-45048acaa489.xhtml)，*为云编码*中讨论了许多这样的模式。'
- en: '**Messaging patterns**: These patterns are used to connect two applications
    based on messaging (sent in the form of packets). These packets or messages are
    transmitting using a logical path on which various applications connect (these
    logical paths are known as channels). There might be scenarios where one application
    has multiple messages; in that case, not all messages can be sent at once. In
    a scenario where there are multiple messages, a channel can be called a queue
    and several messages can be queued up in a channel and can be accessed from various
    applications at the same point in time.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息模式**：这些模式用于根据消息（以数据包的形式发送）连接两个应用程序。这些数据包或消息通过一个逻辑路径进行传输，各种应用程序通过这个逻辑路径连接（这些逻辑路径被称为通道）。可能存在一种情况，其中一个应用程序有多个消息；在这种情况下，不是所有消息都可以一次性发送。在存在多个消息的情况下，一个通道可以被称为队列，多个消息可以在通道中排队，并且可以在同一时间从不同的应用程序访问。'
- en: '**Additional patterns for Domain-Driven Design—layered architecture:** This
    depicts separation of concerns, where the concept of layered architecture comes
    in. Behind the scenes, the basic idea for developing an application is that it
    should be structured into conceptual layers. In general, applications have four
    conceptual layers:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域驱动设计（Domain-Driven Design）的附加模式—分层架构**：这描绘了关注点的分离，其中分层架构的概念就出现了。幕后，开发应用程序的基本想法是将其结构化为概念层。一般来说，应用程序有四个概念层：'
- en: '**User interface**: This layer has everything where the end user interacts,
    this layer accepts the commands and then provides the information accordingly.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面层**：这一层包含了所有终端用户交互的部分，这一层接受命令并相应地提供信息。'
- en: '**Application layer**: This layer is more towards transaction management, data
    translation, and so on.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用层**：这一层更偏向于事务管理、数据转换等。'
- en: '**Domain layer**: This layer sticks to behavior and the state of the domain.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领域层**：这一层坚持领域的行为和状态。'
- en: '**Infrastructure layer**: Everything happens here related to repositories,
    adapters, and frameworks.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施层**：所有与存储库、适配器和框架相关的事情都发生在这里。'
- en: '**Containerized application patterns**: Before we dig into this, we should
    know what containers are. A container is lightweight, portable software; it defines
    an environment under which software can run. Generally, software that is running
    inside the container is designed as a single-purpose application. For containerized
    applications the most important pattern is as follows:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器化应用程序模式**：在我们深入探讨之前，我们应该知道什么是容器。容器是一种轻量级、可移植的软件；它定义了软件可以运行的环境。通常，运行在容器内的软件被设计为单用途应用程序。对于容器化应用程序来说，最重要的模式如下：'
- en: '**Docker image building patterns**: This pattern is based on the Builder pattern
    from GoF design patterns, which we discussed in [Chapter 3](3a038a92-9207-4232-9acd-d17cb24da6c5.xhtml),
    *Implementing Design Patterns-Basics Part 1*. It only describes the setup so that
    it can be used to build a container. In addition to this, there is a multi-stage
    image building pattern that provides a way to build multiple images from a single
    Dockerfile.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker镜像构建模式**：这个模式基于GoF设计模式中的Builder模式，我们在[第3章](3a038a92-9207-4232-9acd-d17cb24da6c5.xhtml)，*实现设计模式-基础部分1*中讨论过。它只描述了设置，以便它可以用来构建容器。除此之外，还有一个多阶段镜像构建模式，它提供了一种从单个Dockerfile构建多个镜像的方法。'
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The aim of this appendix was to highlight the importance of practice. In this
    chapter, we discussed how we can practice enhancing our skills. Once we achieve
    the skills, there is no need to remember the steps to achieve a specific task.
    We covered and discussed a few use cases from the real world, discussed best practices
    from our day-to-day code, and other design patterns that can be used in our daily
    practice to enhance our skills. Finally, we wrapped up the last chapter of this
    book and learned that with practice and the adaptation of various patterns, developers
    can improve their code quality.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录的目的是强调实践的重要性。在本章中，我们讨论了如何提升我们的技能。一旦我们掌握了这些技能，就无需记住完成特定任务的具体步骤。我们讨论了来自现实世界的几个用例，讨论了我们日常代码中的最佳实践，以及其他可以在日常实践中使用的设计模式来提升我们的技能。最后，我们总结了这本书的最后一章，并了解到通过实践和适应各种模式，开发者可以提高他们的代码质量。
- en: Questions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions will allow you to consolidate the information contained
    in this appendix:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题将帮助你巩固本附录中包含的信息：
- en: What is practice? Take a few examples from our routine and daily life.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是实践？从我们的日常和生活中举几个例子。
- en: We can achieve a specific coding skill with practice. Explain this.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过实践获得特定的编码技能。解释这一点。
- en: What is test-driven development and how does it helps developers to practice?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试驱动开发是什么，以及它是如何帮助开发者进行实践的吗？
- en: Further reading
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'We have almost reached the end of this book! In this appendix, we have covered
    a lot of things related to practice. This is not the end of learning but it is
    just a beginning, there are more books you can refer to for your learning and
    knowledge:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎到达了这本书的结尾！在本附录中，我们涵盖了许多与实际操作相关的内容。这并不是学习的终点，而只是一个开始，你还可以参考更多书籍来学习和获取知识：
- en: '*Hands-On Domain-Driven Design with .NET Core* by *Alexey Zimarev*, published
    by *Packt Publishing*: [https://www.packtpub.com/in/application-development/hands-domain-driven-design-net-core](https://www.packtpub.com/in/application-development/hands-domain-driven-design-net-core).'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《.NET Core动手实践领域驱动设计》*，由*Alexey Zimarev*著，由*Packt Publishing*出版：[https://www.packtpub.com/in/application-development/hands-domain-driven-design-net-core](https://www.packtpub.com/in/application-development/hands-domain-driven-design-net-core)。'
- en: '*C# and .NET Core Test-Driven Development* by *Ayobami Adewole*, published
    by *Packt Publishing*: [https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《C#和.NET Core测试驱动开发》*，由*Ayobami Adewole*著，由*Packt Publishing*出版：[https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development)。'
- en: '*Architectural Patterns*, by *Pethuru Raj, Harihara Subramanian, et al*, published
    by *Packt Publishing*: [https://www.packtpub.com/in/application-development/architectural-patterns](https://www.packtpub.com/in/application-development/architectural-patterns).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《架构模式》*，由*Pethuru Raj, Harihara Subramanian, 等人*著，由*Packt Publishing*出版：[https://www.packtpub.com/in/application-development/architectural-patterns](https://www.packtpub.com/in/application-development/architectural-patterns)。'
- en: '*Concurrent Patterns and Best Practices*, by *Atul S. Khot*, published by *Packt
    Publishing*: [https://www.packtpub.com/in/application-development/concurrent-patterns-and-best-practices](https://www.packtpub.com/in/application-development/concurrent-patterns-and-best-practices).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《并发模式和最佳实践》*，由*Atul S. Khot*著，由*Packt Publishing*出版：[https://www.packtpub.com/in/application-development/concurrent-patterns-and-best-practices](https://www.packtpub.com/in/application-development/concurrent-patterns-and-best-practices)。'
