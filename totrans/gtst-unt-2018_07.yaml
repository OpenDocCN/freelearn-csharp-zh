- en: Implementing Our Player Character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating and Importing
    3D Objects for Our Game*, we worked on our game environment and added several
    assets to our game project. We added and planted our cherry trees and prepared
    six areas for our cucumber patches. We also learned how to import assets from
    the Unity Asset Store, as well as from third-party sources.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will incorporate our game's player character, the Cucumber
    Man. We will import the character, review the controls, examine the animations,
    and make the necessary configuration changes to fully use our character in the
    game. By the end of the chapter, you will be able to start testing the game in
    game-mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Unity's standard asset package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the game character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the player controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine-tuning our character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating our player character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terraforming the terrain for our Cucumber Man
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Unity's standard asset package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The game character, the player character, the user-controlled player—these are
    all terms that are used to refer to our game's main character, the Cucumber Man,
    which the human player will control. In Unity, we refer to this as the player
    character. In order to have a player character, we need a controller. In our case,
    we will use a third-person controller. A third-person controller is a framework
    used to control a character from the perspective of a third-person camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Unity standard asset package includes a `ThirdPersonController` asset package.
    The package, as you can see in the following screenshot, contains `Animation`,
    `Materials`, `Models`, `Scripts`, `Textures`, and `Prefabs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df791783-4107-4924-8b90-e6d3568081bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This section demonstrates how to use a character created by Unity. It will
    not be incorporated into the *Cucumber Beetle* game. By going through the following
    steps, you will become familiar with the process of using the `ThirdPersonCharacter`
    provided by Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top menu, select Assets | Import Package | Characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with the Import Unity Package dialog window. Click the
    Import button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, you will see `Standard Assets`. Navigate to `Standard
    Assets` | Characters | `ThirdPersonCharacter` | `Prefabs` and drag the `ThirdPersonController`
    prefab to the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on the `ThirdPersonController` in the Hierarchy panel to autofocus
    on the controller in the Scene view. As shown in the following screenshot, the
    character is encased in a capsule controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/505dbb78-134d-4d8e-9f68-e28a76e8c775.png)'
  prefs: []
  type: TYPE_IMG
- en: In the hierarchy pane, drag the Main Camera so that it is subordinate to the
    `ThirdPersonController`. This is required so that the camera follows the player
    character during gameplay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Scene view, use the transform tools to position the camera above and
    behind the character. With the camera selected, your Camera Preview window, in
    the Scene view, should look similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/55b3c344-7a16-49d9-b80f-94f236c9c962.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can put the game into game-mode and navigate the game world using your
    keyboard and mouse. As you will see, the default character can move around the
    world, and the camera will follow.
  prefs: []
  type: TYPE_NORMAL
- en: Using the provided `ThirdPersonController` is great for testing purposes, but
    you would not want to deploy a game using these standard assets. Although Unity
    Technologies permits commercial use of their standard assets, using them erodes
    the uniqueness of your game, so it is recommended that they only be used for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the game character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use a custom third-person character controller for our *Cucumber Beetle*
    game. First, we should make sure there are no conflicting assets in your game
    project. Let''s start by launching Unity and opening your game project based on
    the work you did in [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating
    and Importing 3D Objects for our Game*. Alternatively, you can load the `Starting-Chapter-07` Unity project
    available from the publisher''s companion site. Once your project is loaded in
    Unity, delete any of the following listed items from the Hierarchy panel:'
  prefs: []
  type: TYPE_NORMAL
- en: Camera (you will retain the main camera you first explored in [Chapter 5](101c3b96-a362-4913-925c-f22503f0f8a1.xhtml),
    *Lights, Cameras, and Shadows*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ThirdPersonController`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the unnecessary assets are deleted, your Hierarchy panel should contain
    only the assets listed in the following Hierarchy panel screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aab4afc4-f11e-4f35-8d28-64f1904a8f10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You are now ready to import the asset package for our game''s player character,
    the Cucumber Man. Go through the following steps to import the package:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `CucumberMan_Controller.unitypackage` file from the publisher's
    companion website
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Unity, with your game project open, select Assets | Import Package | Custom
    Package from the top menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the location of the asset package you downloaded in step 1 and click
    the Open button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When presented with the Import Asset Package dialog window, click the Import
    button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you will notice, the Cucumber Man asset package contains several assets related
    to the Cucumber Man, including a Controller, Scripts, Prefabs, and other assets.
    In the next section, we will add the Cucumber Man to our game.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a player controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, far we have taken a lot of time to shape our world and populate it with
    cherry trees and spawn points, and prepare it for cucumber patches. We have been
    creating the game world for our player character, the Cucumber Man, to exist in.
    It is now time to add our Cucumber Man to our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to add the Cucumber Man to our game and to configure the
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select Prefabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the `CucumberMan` prefab to the Hierarchy panel. Use the following screenshot
    as a reference to ensure that you are dragging the highlighted prefab illustrated
    in the following screenshot. Note that the subordinate `Cucumbor_Man` has been
    intentionally misspelled to help ensure the `CucumberMan` prefab is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4f1a2d7-7709-406e-8413-8132c76ea5fc.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Hierarchy panel, select Main Camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the Main Camera selected, click the Add Component button in the Inspector
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Scripts | Camera Follower to add the Camera Follower script to the Main
    Camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Camera Follower component of the Main Camera, in the Inspector panel,
    change the Movement Smoothness to `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Camera Follower component of the Main Camera, change the Rotation Smoothness
    to `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, click the gray triangle to the left of `CucumberMan`.
    This will expose the subordinate components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reselect the Main Camera in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the GameObject under `CucumberMan` in the Hierarchy panel and drag it
    to the Follow Target field in the Camera Follower component of the Main Camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the Can Follow checkbox is checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Camera Follower component of the main camera should look identical to
    the following image. If it is not identical, please revisit steps 6 through 11:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b13bd611-bd03-4a18-a7f2-7b585df67ed1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will edit the Player Motor (Script) component of the `CucumberMan`.
    Follow these important steps to properly configure the Player Motor (Script) component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the `CucumberMan`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand, if necessary, the Player Motor (Script) component of the `CucumberMan`
    in the Inspector panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the Main Camera from the Hierarchy panel to the Cam field in the Player
    Motor (Script) component of `CucumberMan` in the Inspector panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s position the Cucumber Man to a logical start location for our
    game. Where you place the Cucumber Man is up to you. It is recommended that it
    be placed on one of the respawn points. Once you know where you want the character
    to start each game, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select `CucumberMan`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the transform tools, move the character to one of the spawn points.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zoom in and ensure the character's feet are on or slightly above the ground. We
    still have one more step to make the Cucumber Man our game's playable character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `CucumberMan` still selected, select the Tag drop-down menu in the
    Inspector panel and select Player. This will make it easier for us to reference
    collisions. You will learn more about this in [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml),
    *Scripting Our Points System.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now put the game into game-mode and test the player character. You
    can use the keyboard keys listed in the following table to control the Cucumber
    Man:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keyboard Key** | **Action** |'
  prefs: []
  type: TYPE_TB
- en: '| *W* | Walk Up |'
  prefs: []
  type: TYPE_TB
- en: '| *A* | Walk Left |'
  prefs: []
  type: TYPE_TB
- en: '| *S* | Walk Down |'
  prefs: []
  type: TYPE_TB
- en: '| *D* | Walk Right |'
  prefs: []
  type: TYPE_TB
- en: '| *E* | Throw |'
  prefs: []
  type: TYPE_TB
- en: '| Left-Hand *Shift* Key | Run |'
  prefs: []
  type: TYPE_TB
- en: '| Spacebar | Jump |'
  prefs: []
  type: TYPE_TB
- en: In the next section, we will fine-tune the Cucumber Man.
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning our character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the Cucumber Man is in our game, we can start experimenting with the
    character to ensure it looks and behaves the way we want. In this section, we
    will look at the following refinements to our Cucumber Man:'
  prefs: []
  type: TYPE_NORMAL
- en: Motor controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capsule Collider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine-tuning the motor controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can put the game into game-mode and use the keyboard inputs detailed in
    the previous section to experiment with the Cucumber Man's movements. One of the
    things you might have noticed is that the player character does not seem to move
    very fast. Of course, this is relative to the size of our terrain and the character's
    size. Let's look at how to increase the speed of our character by reviewing the
    associated script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is from the `PlayerMotor.cs` script that you imported
    with the Cucumber Man. This snippet is the first part of the script, not the entire
    script. As you can see, there are variables for `JumpPower`, `MoveSpeed`, and
    `RunSpeed`. Those variables are created in the code and their values can be controlled
    in the Unity editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is from the Cucumber Man''s Inspector panel. Here,
    you can see that we have the ability to update the values for Jump Power, Move
    Speed, Run Speed, Stationary Turn Speed, and Moving Turn Speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db8cc907-ccca-4757-994f-5493576e1d28.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the Player Motor (Script) component of the Cucumber Man, you can experiment
    with the values to have the player character's movements respond the way you want
    them to. You can always refer back to the previous screenshot to reset your values.
  prefs: []
  type: TYPE_NORMAL
- en: You can experiment with the Player Motor (Script) parameters while in game-mode.
    Any changes made in game-mode are not retained when leaving game-mode. This is
    a great way of experimenting without impacting any saved settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a typical set of parameters for the Cucumber Man''s motor controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fb3e019-ba3f-4b33-81c1-ff587bc6158b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We also have the option of editing the Move Speed Multiplier variable to impact
    all of the motor speed values. You can set this manually in the Inspector panel
    as well as programmatically. To set the multiplier manually, simply edit the value
    in the Player Motor (Script) component of the `CucumberMan` in the Inspector panel.
    To change this value programmatically, you can edit the `PlayerMotor.cs` script.
    The following code snippet is from that script, and represents the later section
    of that script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the previous code snippet, `m_MoveSpeedMultiplier` is set
    to `1`. You can change that value directly in the script as an alternative method
    to using the Unity editor.
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Cucumber Man has a Transform that includes Scale values for X, Y, and Z.
    By default, these are all set to 1\. We can easily change the size of our Cucumber
    Man by decreasing or increasing the scale values. With this approach, you can
    create copies of the Cucumber Man that are cucumber babies or cucumber giants.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows three copies of the Cucumber Man. Starting from
    the left and moving to the right, each Cucumber Man is larger than the last:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9d127a7-7258-4e59-9ed4-9a197be57913.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a look at the transform settings for each Cucumber Man in the preceding
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Transform Scale setting** |'
  prefs: []
  type: TYPE_TB
- en: '| **Cucumber Man version** | **X** | **Y** | **Z** |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Baby | 0.5 | .5 | .5 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man | 1 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Giant | 2 | 2 | 2 |'
  prefs: []
  type: TYPE_TB
- en: 'For our game, we will only have one Cucumber Man, and we want him to be larger
    than the beetles and smaller than the cherry trees. The default scale of one results
    in the Cucumber Man''s height being ideal. This is evident by his relative size
    compared to the cherry trees, as indicated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4563ff9-066d-4af8-a1e8-fca0360f0448.png)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing our
    Non-Player Character*, we will inspect the scale of our Cucumber Beetles and ensure
    they are appropriately scaled in relation to the size of our Cucumber Man.
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning the Capsule Collider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Capsule Colliders have the shape of a pill—that is, a cylinder with rounded
    ends. We can view the Capsule Collider by selecting our character in the Hierarchy
    panel or the Scene view and then reviewing the Capsule Collider component in the
    Inspector panel. As shown in the following screenshot, we can edit the Capsule
    Collider by clicking the Edit Collider button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f009a0cc-64e1-4b47-9687-a1f46c36b927.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a brief description of each of the Capsule Collider component parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Is Trigger**: When we enable this option, the physics engine will ignore
    the Capsule Collider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Material**: We can assign how the Capsule Collider interacts with other colliding
    game objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Center**: There are X, Y, and Z fields to identify the center of the capsule
    relative to itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radius**: The radius of the collider''s width'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Height**: The collider''s height'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Direction**: The orientation of the capsule lengthwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For greater precision, the Capsule Collider should receive a height adjustment
    so that the Cucumber Man fits within it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee28a0c5-72c2-4564-8466-a96895701203.png)'
  prefs: []
  type: TYPE_IMG
- en: Make any refinements required to ensure that your Cucumber Man's Capsule Collider
    resembles the preceding screenshot. Once you complete your refinements, be sure
    to save your work.
  prefs: []
  type: TYPE_NORMAL
- en: All changes to the *Cucumber Man* game detailed in this chapter will be incorporated
    in the `Starting-Chapter-08.zip` file available at the beginning of [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml),
    *Implementing Our Non-Player Characters*.
  prefs: []
  type: TYPE_NORMAL
- en: Changing and refining input controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we develop games using Unity, we have several options for gathering user
    input during gameplay. Here is a list of those input options:'
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joystick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touchscreen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile device movement sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we stated previously in this chapter, we will be using the keyboard as our
    sole input device for the *Cucumber Man* game. Let's take a look at where you
    can make changes to the input controls for your game if you want to experiment
    or simply want to change the way users interact with the game. We will use Unity's
    input manager for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input manager for your game project is accessible, as illustrated in the
    following screenshot, by selecting the Edit | Project Settings | Input drop-down
    menu selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d617c6a-2b07-4ab9-a734-4d71a02d6ad1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This results in the input manager being displayed in the Inspector panel. There,
    you will find the relevant virtual axes for the game. In the following screenshot,
    the horizontal virtual axis and vertical virtual axis are displayed side by side.
    You can see how the keyboard''s *W*, *A*, *S*, and *D* keys are set for controlling
    horizontal and vertical movement. For example, the *W* key is identified in the
    vertical virtual axis and is assigned to the Alt Positive Button, which means
    it is an alternative button for moving forward. While the primary Negative and
    Positive buttons are listed as using the left and right arrow keys for horizontal
    movement, and the down and up arrow keys are used for vertical navigation, we
    will implement the *W*, *A*, *S*, and *D* keys as our default method of moving
    the Cucumber Man character through the game world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3447707-7225-4171-8bf9-9d09610324b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The input manager enables us to determine all of our input controls, and is
    where you can set your mouse, keyboard, and joystick inputs. An additional setting
    available in the input manager is for the jump functionality. As shown in the
    following screenshot, the jump functionality has the keyboard''s space bar as
    the positive input device. You will note that there is no Negative Button assigned
    as it is assumed that the character can only jump up, not down:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bdc64f7-8be1-4171-be62-201d0192d44a.png)'
  prefs: []
  type: TYPE_IMG
- en: Animating our player character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your Cucumber Man character controller package includes the necessary assets
    to support the character''s six animations. In this section, we will look at the
    Cucumber Man''s animations, which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Idle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jump
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Die
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the player controller script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of areas in Unity in which we can review the Cucumber Man's
    animations. Let's first look at the Player Controller (Script) component of the
    `CucumberMan` Controller object. When you select the CucumberMan controller in
    the hierarchy pane, you should see the Player Controller (Script) component in
    the Inspector panel. You might need to click the expand button to the left of
    the component in order to reveal the component's details.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, each of our character''s animations has
    a state associated with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b91652b-7a7f-45dc-b063-a2c2adaea618.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s review the `PlayerController.cs` script. You can access this file
    by selecting the All Scripts button in the Project panel, under Favorites. Then,
    scroll to the PlayerController (Script) in the Project panel. The first 14 lines
    of the script are shown in the following code fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first three lines simply identify the namespaces we want to use in our
    script. These are `System.Collections`, `System.Collections.Generic`, and `UnityEngine`.
    Next, we have the class declaration for our `PlayerController` class. The next
    three lines of code are our variable definitions. As you can see, there is a public
    string for each of our six animations: `RunState`, `WalkState`, `IdleState`, `JumpState`,
    `DieState`, and `ThrowState`. There are also several `boolean` (`bool`) variables
    including `isWalking`, `isRunning`, `isJumping`, `isIdle`, and `isDie`. We also
    identify `mAnim` as our animator. We will see how each of these is used later
    in the script.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Start()` method sets our initial state of `isIdle` to true and gets a reference
    to our Animator with the `mAnim = GetComponent<Animator>();` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The largest method of our `PlayerController.cs` script is the `Update()` method.
    The `Update()` method is called once per frame. This method is provided in the
    following code segments, with ellipses (...) to reflect areas where code was removed
    for brevity. You can refer to the full script in Unity. The first code segment
    sets the appropriate states to true or false. For example, when the user presses
    the *W* key and the player is not currently running, the `isWalking` variable
    is set to true and the `mAnim.SetBool` is passed two parameters (`WalkState` and
    `true`). Similar actions are taken for the *A*, *S*, and *D* keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next code snippet from the `Update()` method, shown in the following snippet,
    handles the running animation when the left *Shift* key is pressed. In this instance,
    the animation is changed from the `WalkState` to the `RunState`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next segment of code, provided in the following snippet, shows how detecting
    the spacebar input results in the `Jump()` animation running and the `Throw()`
    animation running when the *E* key is detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Reviewing the Animator component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is one final component in the `CucumberMan` Controller object to review:
    the Animator component. As you can see in the following screenshot, the Animator
    component has two key properties: Controller and Avatar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9681e3c-10cc-420c-bfe0-b78a4572f54f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The controller points to the `CucumberMan.controller` file. The file''s `.controller`
    file extension will not be displayed in the component interface, but it is a reference
    to that file. You can navigate to that file in the project pane. It is located
    under Assets | Cucumber Man. When you double-click that file, it opens in an Animator
    window, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13db6093-95f2-4755-8a81-71d478e98dcc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can see each of the states, one for each animation, along with the
    possible transitions between them. Each state is labeled with a `CM_` prefix to
    indicate the `CucumberMan`. These states are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CM_Idle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CM_Walk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CM_Run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CM_Jump
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CM_Throw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CM_Die
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the layout of the Animator window is jumbled or unclear, you can rearrange
    the objects in the Animator window so they are easy to understand. You accomplish
    this by clicking on a state, dragging it to where you want it, and releasing the
    mouse button. The following graphic shows one possible organizational approach
    to the Cucumber Man''s states and transitions. Your approach can differ, if you
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a27a9bf3-58c1-4a63-8e89-84f8e5050d58.png)'
  prefs: []
  type: TYPE_IMG
- en: You can leave these transitions as they have been provided to you, or, if you
    want to, you can make changes using the Animator window.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing the animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have the option of previewing individual animations without putting the
    game into game-mode. In the Project panel, select Assets | Cucumber Man and you
    will see the individual animations listed. For example, click the `CucumberMan_Throw`
    animation. This is the `CucumberMan_Throw.fbx` file that is part of the package
    you imported earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the animation selected, the Inspector panel gives you access to the Model,
    Rig, and Animations tabs. Although you do not need to make any changes here, it
    is worth your time to explore the various features. When you select the Animations
    tab, you have access to a preview of the animation at the bottom the Inspector
    panel, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3cb6d83-6385-486a-93e0-2ce83cebd820.png)'
  prefs: []
  type: TYPE_IMG
- en: You can click the play button in the top-left corner of the animation preview
    window to play the animation. The animation will play and loop until you stop
    the animation.
  prefs: []
  type: TYPE_NORMAL
- en: You can preview each animation by playing the game as well. This is true for
    all of the animations, except the die animation; we will have to write a script
    to evoke that animation. We will do this in [Chapter 11](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml),
    *Scripting Victory and Defeat*.
  prefs: []
  type: TYPE_NORMAL
- en: Terraforming the terrain for our Cucumber Man
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you play-test the game, it is advisable to have the Cucumber Man walk, run,
    and jump where you want the player to be able to do these actions when they play
    the game. This is a step that is often overlooked or given insufficient attention.
    Think back to the games you play or have played in the past. Has your character
    ever been stuck or unable to get to a certain area? Odds are that some of that
    was a result of inadequate testing.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommend that you work on this. The terrain might be, for example, too
    steep for the character to climb. Use the skills you learned in [Chapter 4](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml),
    *Creating Our Terrain*, to modify your terrain so that the player character can
    navigate your game world the way you want it to.
  prefs: []
  type: TYPE_NORMAL
- en: The time you spend on this important step will help ensure the non-player characters,
    our Cucumber Beetles, can get to the areas you want them to. You will be prompted
    to check for this in the next [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing
    Our Non-Player Characters*.
  prefs: []
  type: TYPE_NORMAL
- en: Now is a great time to save your scene and your project. Remember, save early
    and save often!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we incorporated our game's player character, the Cucumber Man.
    We imported the character, reviewed the controls, examined the animations, and
    made the necessary configuration changes to fully use our character in the game.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing Our
    Non-Player Characters*, we will implement our non-player characters, the Cucumber
    Beetles. We will import and review the assets associated with the beetles and
    start scripting parts of our game that are specific to the beetles. This will
    include randomizing the location of cucumber plants and cucumbers.
  prefs: []
  type: TYPE_NORMAL
