["```cs\npublic override bool FinishedLaunching(UIApplication application,NSDictionary launchOptions)\n{\n  //View Models\n  ServiceContainer.Register<LoginViewModel>(() =>new LoginViewModel());\n  ServiceContainer.Register<FriendViewModel>(() =>new FriendViewModel());\n  ServiceContainer.Register<RegisterViewModel>(() =>new RegisterViewModel());\n  ServiceContainer.Register<MessageViewModel>(() =>new MessageViewModel());\n  //Models\n  ServiceContainer.Register<ISettings>(() =>new FakeSettings());\n  ServiceContainer.Register<IWebService>(() =>new FakeWebService());\n\n  return true;\n}\n```", "```cs\nreadonly LoginViewModel loginViewModel = ServiceContainer.Resolve<LoginViewModel>();\n```", "```cs\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n  login.TouchUpInside += async(sender, e) =>\n  {\n    loginViewModel.Username = username.Text;\n    loginViewModel.Password = password.Text;\n    try\n    {\n      await loginViewModel.Login();\n      //TODO: navigate to a new screen\n    }\n    catch (Exception exc)\n    {\n      new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show();\n    }\n  };\n}\n```", "```cs\npublic override void ViewWillAppear(bool animated)\n{\n  base.ViewWillAppear(animated);\n  loginViewModel.IsBusyChanged += OnIsBusyChanged;\n}\npublic override void ViewWillDisappear(bool animated)\n{\n  base.ViewWillDisappear(animated);\n  loginViewModel.IsBusyChanged -= OnIsBusyChanged;\n}\nvoid OnIsBusyChanged(object sender, EventArgs e)\n{\n  username.Enabled =\n    password.Enabled =\n    login.Enabled = \n    indicator.Hidden = !loginViewModel.IsBusy;\n}\n```", "```cs\nPerformSegue(\"OnLogin\", this);\n```", "```cs\nclass TableSource : UITableViewSource\n{\n  const string CellName = \"ConversationCell\";\n  readonly MessageViewModel messageViewModel = ServiceContainer.Resolve<MessageViewModel>();\n\n  public override int RowsInSection(UITableView tableView, int section)\n  {\n    return messageViewModel.Conversations == null ?0 : messageViewModel.Conversations.Length;\n  }\n  public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)\n  {\n    var conversation = messageViewModel.Conversations[indexPath.Row];\n    var cell = tableView.DequeueReusableCell(CellName);\n    if (cell == null)\n    {\n      cell = new UITableViewCell(UITableViewCellStyle.Default, CellName);\n      cell.Accessory = UITableViewCellAccessory.DisclosureIndicator;\n    }\n    cell.TextLabel.Text = conversation.Username;\n    return cell;\n  }\n}\n```", "```cs\nreadonly MessageViewModel messageViewModel = ServiceContainer.Resolve<MessageViewModel>();\n\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n  TableView.Source = new TableSource();\n}\npublic async override void ViewWillAppear(bool animated)\n{\n  base.ViewWillAppear(animated);\n  try\n  {\n    await messageViewModel.GetConversations();\n    TableView.ReloadData();\n  }\n  catch(Exception exc)\n  {\n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show();\n  }\n}\n```", "```cs\nclass TableSource : UITableViewSource\n{\n  const string CellName = \"FriendCell\";\n  readonly FriendViewModel friendViewModel = ServiceContainer.Resolve<FriendViewModel>();\n\n  public override int RowsInSection(UITableView tableView, int section)\n  {\n    return friendViewModel.Friends == null ?0 : friendViewModel.Friends.Length;\n  }\n  public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)\n  {\n    var friend = friendViewModel.Friends[indexPath.Row];\n    var cell = tableView.DequeueReusableCell(CellName);\n    if (cell == null)\n    {\n      cell = new UITableViewCell(UITableViewCellStyle.Default, CellName);\n      cell.AccessoryView = UIButton.FromType(UIButtonType.ContactAdd);\n      cell.AccessoryView.UserInteractionEnabled = false;\n    }\n    cell.TextLabel.Text = friend.Username;\n    return cell;\n  }\n}\n```", "```cs\nreadonly FriendViewModel friendViewModel = ServiceContainer.Resolve<FriendViewModel>();\n\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n  TableView.Source = new TableSource();\n}\npublic async override void ViewWillAppear(bool animated)\n{\n  base.ViewWillAppear(animated);\n  try\n  {\n    await friendViewModel.GetFriends();\n\n    TableView.ReloadData();\n  }\n  catch(Exception exc)\n  {\n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show();\n  }\n}\n```", "```cs\npublic class BaseMessageCell : UITableViewCell\n{\n  public BaseMessageCell(IntPtr handle) : base(handle)\n  {\n  }\n  public virtual void Update(Message message)\n  {\n  }\n}\n```", "```cs\nclass TableSource : UITableViewSource\n{\n  const string MyCellName = \"MyCell\";\n  const string TheirCellName = \"TheirCell\";\n  readonly MessageViewModel messageViewModel = ServiceContainer.Resolve<MessageViewModel>();\n  readonly ISettings settings = ServiceContainer.Resolve<ISettings>();\n\n  public override int RowsInSection(UITableView tableview, int section)\n  {\n    return messageViewModel.Messages == null ?0 : messageViewModel.Messages.Length;\n  }\n  public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)\n  {\n    var message = messageViewModel.Messages [indexPath.Row];\n    bool isMyMessage = message.UserId == settings.User.Id;\n    var cell = tableView.DequeueReusableCell(isMyMessage ?MyCellName : TheirCellName) as BaseMessageCell;\n    cell.Update(message);\n    return cell;\n  }\n}\n```", "```cs\nreadonly MessageViewModel messageViewModel = ServiceContainer.Resolve<MessageViewModel>();\n\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n\n  TableView.Source = new TableSource();\n}\npublic async override void ViewWillAppear(bool animated)\n{\n  base.ViewWillAppear(animated);\n  Title = messageViewModel.Conversation.Username;\n  try\n  {\n    await messageViewModel.GetMessages();\n    TableView.ReloadData();\n  }\n  catch (Exception exc)\n  {\n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show();\n  }\n}\n```", "```cs\npublic partial class MyMessageCell : BaseMessageCell\n{\n  public MyMessageCell (IntPtr handle) : base (handle)\n  {\n  }\n  public override void Update(Message message)\n  {\n    this.message.Text = message.Text;\n  }\n}\n```", "```cs\nUIToolbar toolbar;\nUITextField message;\nUIBarButtonItem send;\nNSObject willShowObserver, willHideObserver;\n```", "```cs\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n\n  //Text Field\n  message = new UITextField(new RectangleF(0, 0, 240, 32))\n  {\n    BorderStyle = UITextBorderStyle.RoundedRect,ReturnKeyType = UIReturnKeyType.Send,ShouldReturn = _ =>\n      {\n        Send();\n        return false;\n      },\n  };\n  //Bar button item\n  send = new UIBarButtonItem(\"Send\", UIBarButtonItemStyle.Plain,(sender, e) => Send());\n\n  //Toolbar\n  toolbar = new UIToolbar(new RectangleF(0, TableView.Frame.Height - 44,TableView.Frame.Width, 44));\n  toolbar.Items = new UIBarButtonItem[]\n  {\n    new UIBarButtonItem(message),\n    send\n  };\n  NavigationController.View.AddSubview(toolbar);\n\n  TableView.Source = new TableSource();\n  TableView.TableFooterView = new UIView(new RectangleF(0, 0, TableView.Frame.Width, 44))\n  {\n    BackgroundColor = UIColor.Clear,\n  };\n}\n```", "```cs\npublic async override void ViewWillAppear(bool animated)\n{\n  base.ViewWillAppear(animated);\n\n  Title = messageViewModel.Conversation.Username;\n\n  //Keyboard notifications\n  willShowObserver = UIKeyboard.Notifications.ObserveWillShow((sender, e) => OnKeyboardNotification(e));\n  willHideObserver = UIKeyboard.Notifications.ObserveWillHide((sender, e) => OnKeyboardNotification(e));\n\n  //IsBusy\n  messageViewModel.IsBusyChanged += OnIsBusyChanged;\n  try\n  {\n    await messageViewModel.GetMessages();\n    TableView.ReloadData();\n    message.BecomeFirstResponder();\n  }\n  catch (Exception exc)\n  {\n    new UIAlertView(\"Oops!\", exc.Message, null, \"Ok\").Show();\n  }\n}\n```", "```cs\npublic override void ViewWillDisappear(bool animated)\n{\n  base.ViewWillDisappear(animated);\n  //Unsubcribe notifications\n  if (willShowObserver != null)\n  {\n    willShowObserver.Dispose();\n    willShowObserver = null;\n  }\n  if (willHideObserver != null)\n  {\n    willHideObserver.Dispose();\n    willHideObserver = null;\n  }\n  //IsBusy\n  messageViewModel.IsBusyChanged -= OnIsBusyChanged;\n}\n```", "```cs\nvoid OnIsBusyChanged (object sender, EventArgs e)\n{\n  message.Enabled = send.Enabled = !messageViewModel.IsBusy;\n}\nvoid ScrollToEnd()\n{\n  TableView.ContentOffset = new PointF(0, TableView.ContentSize.Height -TableView.Frame.Height);\n}\nvoid OnKeyboardNotification (UIKeyboardEventArgs e)\n{\n  //Check if the keyboard is becoming visible\n  bool willShow = e.Notification.Name == UIKeyboard.WillShowNotification;\n\n  //Start an animation, using values from the keyboard\n  UIView.BeginAnimations(\"AnimateForKeyboard\");\n  UIView.SetAnimationDuration(e.AnimationDuration);\n  UIView.SetAnimationCurve(e.AnimationCurve);\n\n  //Calculate keyboard height, etc.\n  if (willShow)\n  {\n    var keyboardFrame = e.FrameEnd;\n    var frame = TableView.Frame;\n    frame.Height -= keyboardFrame.Height;\n    TableView.Frame = frame;\n    frame = toolbar.Frame;\n    frame.Y -= keyboardFrame.Height;\n    toolbar.Frame = frame;\n  }\n  else\n  {\n    var keyboardFrame = e.FrameBegin;\n    var frame = TableView.Frame;\n    frame.Height += keyboardFrame.Height;\n    TableView.Frame = frame;\n    frame = toolbar.Frame;\n    frame.Y += keyboardFrame.Height;\n    toolbar.Frame = frame;\n  }\n  //Commit the animation\n  UIView.CommitAnimations();\n  ScrollToEnd();\n}\n```", "```cs\nasync void Send()\n{\n  //Just hide the keyboard if they didn't type anything\n  if (string.IsNullOrEmpty(message.Text))\n  {\n    message.ResignFirstResponder();\n    return;\n  }\n  //Set the text, send the message\n  messageViewModel.Text = message.Text;\n  await messageViewModel.SendMessage();\n\n  //Clear the text field & view model\n  message.Text = messageViewModel.Text = string.Empty;\n\n  //Reload the table\n  TableView.ReloadData();\n\n  //Hide the keyboard\n  message.ResignFirstResponder();\n\n  //Scroll to end, to see the new message\n  ScrollToEnd();\n}\n```"]