["```cs\ndotnet new web\n```", "```cs\nnamespace Chapter10;\npublic record RegisterUser(string FirstName, string\n  LastName, string SocialSecurityNumber, string UserName,\n    string Password);\n```", "```cs\nnamespace Chapter10;\npublic record User(Guid Id, string UserName, string\n  Password);\n```", "```cs\nnamespace Chapter10;\npublic record UserDetails(Guid Id, Guid UserId, string\n  FirstName, string LastName, string SocialSecurityNumber);\n```", "```cs\ndotnet add package mongodb.driver\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing MongoDB.Driver;\nnamespace Chapter10;\n[Route(\"/api/users\")]\npublic class UsersController : Controller\n{\n    IMongoCollection<User> _userCollection;\n    IMongoCollection<UserDetails> _userDetailsCollection;\n    public UsersController()\n    {\n        var client = new MongoClient\n          (\"mongodb://localhost:27017\");\n        var database = client.GetDatabase(\"TheSystem\");\n        _userCollection = database.GetCollection<User>\n          (\"Users\");\n        _userDetailsCollection = database.GetCollection\n          <UserDetails>(\"UserDetails\");\n    }\n    [HttpPost(\"register\")]\n    public async Task Register([FromBody] RegisterUser\n      userRegistration)\n    {\n        var user = new User(Guid.NewGuid(),\n           userRegistration.UserName,\n             userRegistration.Password);\n        var userDetails = new UserDetails(Guid.NewGuid(),\n           user.Id, userRegistration.FirstName,\n             userRegistration.LastName, userRegistration\n               .SocialSecurityNumber);\n        await _userCollection.InsertOneAsync(user);\n        await _userDetailsCollection.InsertOneAsync\n          (userDetails);\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nvar app = builder.Build();\napp.UseRouting();\napp.UseEndpoints(_ => _.MapControllers());\napp.Run();\n```", "```cs\ndocker run -d -p 27017:27017 mongo\n```", "```cs\n9fb4b3c16d7647bfbb69eabd7863a169f6f2e4218191cc69c7454978627\nf75d5\n```", "```cs\ndotnet run\n```", "```cs\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5000\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: /Users/einari/Projects/\n        Metaprogramming-in-C/Chapter10/\n```", "```cs\nusing MongoDB.Driver;\nnamespace Chapter10;\npublic class UsersService\n{\n    readonly IMongoCollection<User> _usersCollection;\n    public UserService()\n    {\n        var client = new MongoClient\n          (\"mongodb://localhost:27017\");\n        var database = client.GetDatabase(\"TheSystem\");\n        _usersCollection = database.GetCollection<User>\n          (\"Users\");\n    }\n    public async Task<Guid> Register(string userName,\n      string password)\n    {\n        var user = new User(Guid.NewGuid(),\n          userRegistration.UserName, userRegistration\n            .Password);\n        await _usersCollection.InsertOneAsync(user);\n        return user.Id;\n    }\n}\n```", "```cs\nnamespace Chapter10;\npublic class UserDetailsService\n{\n    readonly IMongoCollection<User> _userDetailsCollection;\n    public UserDetailsService(IDatabase database)\n    {\n        var client = new MongoClient\n          (\"mongodb://localhost:27017\");\n        var database = client.GetDatabase(\"TheSystem\");\n        _userDetailsCollection = database.GetCollection\n          <User>(\"UserDetails\");\n    }\n    public Task Register(string firstName, string lastName,\n      string socialSecurityNumber, Guid userId)\n        => _userDetailsCollection_.InsertOneAsync\n          (new(Guid.NewGuid(), userId, firstName, lastName,\n            socialSecurityNumber));\n}\n```", "```cs\n[Route(\"/api/users\")]\npublic class UsersController : Controller\n{\n    readonly UsersService _usersService;\n    readonly UserDetailsService _usersDetailsService;\n    public UsersController()\n    {\n        _usersService = new UsersService();\n        _userDetailsService = new UserDetailsService();\n    }\n    [HttpPost(\"register\")]\n    public async Task Register([FromBody] RegisterUser\n       userRegistration)\n    {\n        await _usersService.Register(\n            userRegistration.UserName,\n            userRegistration.Password);\n        await _userDetailsService.Register(\n            userRegistration.FirstName,\n            userRegistration.LastName,\n            userRegistration.SocialSecurityNumber);\n    }\n}\n```", "```cs\n[Route(\"/api/users\")]\npublic class UsersController : Controller\n{\n    readonly UsersService _usersService;\n    readonly UserDetailsService _usersDetailsService;\n    public UsersController(\n        UsersService usersService,\n        UserDetailsService userDetailsService)\n    {\n        _usersService = usersService;\n        _userDetailsService = userDetailsService;\n    }\n    [HttpPost(\"register\")]\n    public async Task Register([FromBody] RegisterUser userRegistration)\n    {\n        await _usersService.Register(\n            userRegistration.UserName,\n            userRegistration.Password);\n        await _userDetailsService.Register(\n            userRegistration.FirstName,\n            userRegistration.LastName,\n            userRegistration.SocialSecurityNumber);\n    }\n}\n```", "```cs\nnamespace Chapter10;\npublic interface IUsersService\n{\n    Task<Guid> Register(string userName, string password);\n}\n```", "```cs\npublic class UsersService : IUsersService\n{\n    /*\n    Same code as before within the UsersService\n    */\n}\n```", "```cs\nnamespace Chapter10.Structured;\npublic interface IUserDetailsService\n{\n    Task Register(string firstName, string lastName, string\n      socialSecurityNumber, Guid userId);\n}\n```", "```cs\npublic class UserDetailsService : IUserDetailsService\n{\n    /*\n    Same code as before within the UserDetailsService\n    */\n}\n```", "```cs\n[Route(\"/api/users\")]\npublic class UsersController : Controller\n{\n    readonly IUsersService _usersService;\n    readonly IUserDetailsService _userDetailsService;\n    public UsersController(\n        IUsersService usersService,\n        IUserDetailsService userDetailsService)\n    {\n        _usersService = usersService;\n        _userDetailsService = userDetailsService;\n    }\n    // Same register API method as before would go here\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\n// Add these two lines to bind the services\nbuilder.Services.AddSingleton<IUsersService,\n  UsersService>();\nbuilder.Services.AddSingleton<IUserDetailsService,\n  UserDetailsService>();\nvar app = builder.Build();\napp.UseRouting();\napp.UseEndpoints(_ => _.MapControllers());\napp.Run();\n```", "```cs\nusing MongoDB.Driver;\nnamespace Chapter10;\npublic interface IDatabase\n{\n    IMongoCollection<T> GetCollectionFor<T>();\n}\n```", "```cs\nusing MongoDB.Driver;\nnamespace Chapter10;\npublic class Database : IDatabase\n{\n    static readonly Dictionary<Type, string>\n      _typeToCollectionName = new()\n    {\n        { typeof(User), \"Users\" },\n        { typeof(UserDetails), \"UserDetails\" }\n    };\n    readonly IMongoDatabase _mongoDatabase;\n    public Database()\n    {\n        var client = new MongoClient\n          (\"mongodb://localhost:27017\");\n        _mongoDatabase = client.GetDatabase(\"TheSystem\");\n    }\n    public IMongoCollection<T> GetCollectionFor<T>() =>\n      _mongoDatabase.GetCollection<T>(_typeToCollectionName\n        [typeof(T)]);\n}\n```", "```cs\ndotnet add package Humanizer\n```", "```cs\nusing Humanizer;\nusing MongoDB.Driver;\nnamespace Chapter10.Structured;\npublic class Database : IDatabase\n{\n    readonly IMongoDatabase _mongoDatabase;\n    public Database()\n    {\n        var client = new MongoClient(\"mongodb://\n          localhost:27017\");\n        _mongoDatabase = client.GetDatabase(\"TheSystem\");\n    }\n    public IMongoCollection<T> GetCollectionFor<T>() =>\n      _mongoDatabase.GetCollection<T>(typeof(T).Name\n        .Pluralize());\n}\n```", "```cs\nnamespace Chapter10;\npublic class UsersService : IUsersService\n{\n    readonly IDatabase _database;\n    public UsersService(IDatabase database)\n    {\n        _database = database;\n    }\n    public async Task<Guid> Register(string userName,\n      string password)\n    {\n        var user = new User(Guid.NewGuid(), userName,\n          password);\n        await _database.GetCollectionFor<User>()\n          .InsertOneAsync(user);\n        return user.Id;\n    }\n}\n```", "```cs\nnamespace Chapter10.Structured;\npublic class UserDetailsService : IUserDetailsService\n{\n    readonly IDatabase _database;\n    public UserDetailsService(IDatabase database)\n    {\n        _database = database;\n    }\n    public Task Register(string firstName, string lastName,\n      string socialSecurityNumber, Guid userId)\n        => _database.GetCollectionFor<UserDetails>()\n          .InsertOneAsync(new(Guid.NewGuid(), userId,\n            firstName, lastName, socialSecurityNumber));\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IUsersService,\n  UsersService>();\nbuilder.Services.AddSingleton<IUserDetailsService,\n  UserDetailsService>();\n// Add these two lines to bind the services\nbuilder.Services.AddSingleton<IDatabase, Database>();\nvar app = builder.Build();\napp.UseRouting();\napp.UseEndpoints(_ => _.MapControllers());\napp.Run();\n```", "```cs\nnamespace Chapter10;\n[AttributeUsage(AttributeTargets.Class)]\npublic sealed class SingletonAttribute : Attribute\n{\n}\n```", "```cs\ndotnet add reference ../Fundamentals/Fundamentals.csproj\n```", "```cs\nusing Fundamentals;\nnamespace Chapter10;\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddBindingsBy\n      Convention(this IServiceCollection services, ITypes\n        types)\n    {\n        return services;\n    }\n}\n```", "```cs\nFunc<Type, Type, bool> convention = (i, t) => i.Namespace\n  == t.Namespace && i.Name == $\"I{t.Name}\";\nvar conventionBasedTypes = types!.All.Where(_ =>\n{\n    var interfaces = _.GetInterfaces();\n    if (interfaces.Length > 0)\n    {\n        var conventionInterface = interfaces\n          .SingleOrDefault(i => convention(i, _));\n        if (conventionInterface != default)\n        {\n            return types!.All.Count(type => type\n              .HasInterface(conventionInterface)) == 1;\n        }\n    }\n    return false;\n});\n```", "```cs\nforeach (var conventionBasedType in conventionBasedTypes)\n{\n    var interfaceToBind = types.All.Single(_ =>\n      _.IsInterface && convention(_, conventionBasedType));\n    if (services.Any(_ => _.ServiceType == interfaceTo\n      Bind))\n    {\n        continue;\n    }\n    _ = conventionBasedType.HasAttribute\n        <SingletonAttribute>() ?\n        services.AddSingleton(interfaceToBind,\n          conventionBasedType) :\n        services.AddTransient(interfaceToBind,\n          conventionBasedType);\n}\n```", "```cs\n[Singleton]\npublic class Database : IDatabase\n{\n    // Keep your original code\n}\n```", "```cs\n[Singleton]\npublic class UserDetailsService : IUserDetailsService\n{\n    // Keep your original code\n}\n```", "```cs\n[Singleton]\npublic class UsersService : IUsersService\n{\n    // Keep your original code\n}\n```", "```cs\nusing Chapter10;\nusing Fundamentals;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\n// Create an instance of Types and register it with the IoC\nvar types = new Types();\nbuilder.Services.AddSingleton<ITypes>(types);\n// Add all the bindings based on convention\nbuilder.Services.AddBindingsByConvention(types);\nvar app = builder.Build();\napp.UseRouting();\napp.UseEndpoints(_ => _.MapControllers());\napp.Run();\n```"]