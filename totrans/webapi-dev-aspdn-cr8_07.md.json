["```cs\nservices.AddDbContextPool<InvoiceDbContext>(options =>{\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\"));\n});\n```", "```cs\nimport http from 'k6/http';import { sleep } from 'k6';\nexport const options = {\n    vus: 500,\n    duration: '30s',\n  };\nexport default function () {\n  http.get('http://localhost:5249/api/Invoices?page=1&pageSize=10');\n  sleep(1);\n}\n```", "```cs\nk6 run script.js\n```", "```cs\n[HttpGet(\"{id}\")]public async Task<ActionResult<Invoice>> GetInvoice(Guid id)\n{\n    if (context.Invoices == null)\n    {\n        return NotFound();\n    }\n    logger.LogInformation($\"Invoice {id} is loading from the database.\");\n    var invoice = await context.Invoices.FindAsync(id);\n    logger.LogInformation($\"Invoice {invoice?.Id} is loaded from the database.\"\n    logger.LogInformation($\"Invoice {id} is loading from the context.\");\n    invoice = await context.Invoices.FindAsync(id);\n    logger.LogInformation($\"Invoice {invoice?.Id} is loaded from the context.\")\n    if (invoice == null)\n    {\n        return NotFound();\n    }\n    return invoice;\n}\n```", "```cs\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]      Invoice e61436dd-0dac-4e8b-7d61-08dae88bb288 is loading from the database.\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\n      Executed DbCommand (30ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']\n      SELECT TOP(1) [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      WHERE [i].[Id] = @__get_Item_0\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Invoice e61436dd-0dac-4e8b-7d61-08dae88bb288 is loaded from the database.\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Invoice e61436dd-0dac-4e8b-7d61-08dae88bb288 is loading from the context.\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Invoice e61436dd-0dac-4e8b-7d61-08dae88bb288 is loaded from the context.\n```", "```cs\ncontext.Entry(invoice).State = EntityState.Modified;await context.SaveChangesAsync();\n```", "```cs\n// To get the invoice without trackingvar invoice = await context.Invoices.AsNoTracking().FirstOrDefaultAsync(x => x.Id == id);\n// To return a list of invoices without tracking\nvar invoices = await context.Invoices.AsNoTracking().ToListAsync();\n```", "```cs\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder){\n    base.OnConfiguring(optionsBuilder);\n    optionsBuilder.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\n}\n```", "```cs\n// To get the invoice with trackingvar invoice = await context.Invoices.AsTracking().FirstOrDefaultAsync(x => x.Id == id);\n// To return a list of invoices with tracking\nvar invoices = await context.Invoices.AsTracking().ToListAsync();\n```", "```cs\n// Use IQueryablelogger.LogInformation($\"Creating the IQueryable...\");\nvar list1 = context.Invoices.Where(x => status == null || x.Status == status);\nlogger.LogInformation($\"IQueryable created\");\nlogger.LogInformation($\"Query the result using IQueryable...\");\nvar query1 = list1.OrderByDescending(x => x.InvoiceDate)\n    .Skip((page - 1) * pageSize)\n    .Take(pageSize);\nlogger.LogInformation($\"Execute the query using IQueryable\");\nvar result1 = await query1.ToListAsync();\nlogger.LogInformation($\"Result created using IQueryable\");\n```", "```cs\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]      Creating the IQueryable...\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      IQueryable created\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Query the result using IQueryable...\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Execute the query using IQueryable\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\n      Executed DbCommand (49ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']\n      SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      ORDER BY [i].[InvoiceDate] DESC\n      OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Result created using IQueryable\n```", "```cs\n// Use IEnumerablelogger.LogInformation($\"Creating the IEnumerable...\");\nvar list2 = context.Invoices.Where(x => status == null || x.Status == status).AsEnumerable();\nlogger.LogInformation($\"IEnumerable created\");\nlogger.LogInformation($\"Query the result using IEnumerable...\");\nvar query2 = list2.OrderByDescending(x => x.InvoiceDate)\n    .Skip((page - 1) * pageSize)\n    .Take(pageSize);\nlogger.LogInformation($\"Execute the query using IEnumerable\");\nvar result2 = query2.ToList();\nlogger.LogInformation($\"Result created using IEnumerable\");\n```", "```cs\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]      Creating the IEnumerable...\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      IEnumerable created\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Query the result  using IEnumerable...\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Execute the query using IEnumerable\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\n      Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\n      SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\ninfo: BasicEfCoreDemo.Controllers.InvoicesController[0]\n      Result created using IEnumerable\n```", "```cs\nvar list = await context.Invoices    .Where(x => x.ContactName.Contains(search) || x.InvoiceNumber.Contains(search))\n    .ToListAsync();\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (4ms) [Parameters=[@__search_0='?' (Size = 32), @__search_0_1='?' (Size = 32) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']\n      SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      WHERE (@__search_0 LIKE N'') OR CHARINDEX(@__search_0, [i].[ContactName]) > 0 OR (@__search_0_1 LIKE '') OR CHARINDEX(@__search_0, [i].[InvoiceNumber]) > 0\n```", "```cs\nprivate static decimal CalculateTax(decimal amount){\n    return amount * 0.15m;\n}\n```", "```cs\nvar list = await context.Invoices    .Where(x => x.ContactName.Contains(search) || x.InvoiceNumber.Contains(search))\n    .Select(x => new Invoice\n    {\n        Id = x.Id,\n        InvoiceNumber = x.InvoiceNumber,\n        ContactName = x.ContactName,\n        Description = $\"Tax: ${CalculateTax(x.Amount)}. {x.Description}\",\n        Amount = x.Amount,\n        InvoiceDate = x.InvoiceDate,\n        DueDate = x.DueDate,\n        Status = x.Status\n    })\n    .ToListAsync();\n```", "```cs\nvar list = await context.Invoices    .Where(x => (x.ContactName.Contains(search) || x.InvoiceNumber.Contains(search)) && CalculateTax(x.Amount) > 10)\n    .ToListAsync();\n```", "```cs\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]      An unhandled exception has occurred while executing the request.\n      System.InvalidOperationException: The LINQ expression 'DbSet<Invoice>()\n          .Where(i => i.ContactName.Contains(__search_0) || i.InvoiceNumber.Contains(__search_0) && InvoicesController.CalculateTax(i.Amount) > 10)' could not be translated. Additional information: Translation of method 'BasicEfCoreDemo.Controllers.InvoicesController.CalculateTax' failed. If this method can be mapped to your custom function, see https://go.microsoft.com/fwlink/?linkid=2132413 for more information. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.\n```", "```cs\nvar list = await context.Invoices    .FromSql($\"SELECT * FROM Invoices WHERE Status = 2\")\n    .ToListAsync();\n```", "```cs\n[HttpGet][Route(\"status\")]\npublic async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices(string status)\n{\n    // Omitted for brevity\n    var list = await context.Invoices\n        .FromSql($\"SELECT * FROM Invoices WHERE Status = {status}\")\n        .ToListAsync();\n    return list;\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (41ms) [Parameters=[p0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']\n      SELECT * FROM Invoices WHERE Status = @p0\n```", "```cs\n[HttpGet][Route(\"free-search\")]\npublic async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices(string propertyName, string propertyValue)\n{\n    if (context.Invoices == null)\n    {\n        return NotFound();\n    }\n    // Do something to sanitize the propertyName value\n    var value = new SqlParameter(\"value\", propertyValue);\n    var list = await context.Invoices\n        .FromSqlRaw($\"SELECT * FROM Invoices WHERE {propertyName} = @value\", value)\n        .ToListAsync();\n    return list;\n}\n```", "```cs\n[HttpGet][Route(\"ids\")]\npublic ActionResult<IEnumerable<Guid>> GetInvoicesIds(string status)\n{\n    var result = context.Database\n        .SqlQuery<Guid>($\"SELECT Id FROM Invoices WHERE Status = {status}\")\n        .ToList();\n    return result;\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (22ms) [Parameters=[p0='?' (Size = 4000)], CommandType='Text', CommandTimeout='30']\n      SELECT Id FROM Invoices WHERE Status = @p0\n```", "```cs\n[HttpDelete][Route(\"status\")]\npublic async Task<ActionResult> DeleteInvoices(string status)\n{\n    var result = await context.Database\n        .ExecuteSqlAsync($\"DELETE FROM Invoices WHERE Status = {status}\");\n    return Ok();\n}\n```", "```cs\n[HttpPut][Route(\"status/overdue\")]\npublic async Task<ActionResult> UpdateInvoicesStatusAsOverdue(DateTime date)\n{\n    var result = await context.Invoices\n        .Where(i => i.InvoiceDate < date && i.Status == InvoiceStatus.AwaitPayment)\n        .ExecuteUpdateAsync(s => s.SetProperty(x => x.Status, InvoiceStatus.Overdue));\n    return Ok();\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (46ms) [Parameters=[@__p_0='?' (DbType = DateTimeOffset)], CommandType='Text', CommandTimeout='30']\n      UPDATE [i]\n      SET [i].[Status] = 'Overdue'\n      FROM [Invoices] AS [i]\n      WHERE [i].[InvoiceDate] < @__p_0 AND [i].[Status] = 'AwaitPayment'\n```", "```cs\nvar result = await context.Invoices        .Where(i => i.InvoiceDate < date && i.Status == InvoiceStatus.AwaitPayment)\n        .ExecuteUpdateAsync(s =>\n            s.SetProperty(x => x.Status, InvoiceStatus.Overdue)\n            .SetProperty(x => x.LastUpdatedDate, DateTime.Now));\n```", "```cs\nawait context.Invoices.Where(x => x.InvoiceDate < date).ExecuteDeleteAsync();\n```", "```cs\n[HttpPost(\"{id}/sell/{quantity}\")]public async Task<ActionResult<Product>> SellProduct(int id, int quantity)\n{\n    if (context.Products == null)\n    {\n        return Problem(\"Entity set 'SampleDbContext.Products' is null.\");\n    }\n    var product = await context.Products.FindAsync(id);\n    if (product == null)\n    {\n        return NotFound();\n    }\n    if (product.Inventory < quantity)\n    {\n        return Problem(\"Not enough inventory.\");\n    }\n    product.Inventory -= quantity;\n    await context.SaveChangesAsync();\n    return product;\n}\n```", "```cs\n    [HttpPost(\"{id}/sell/{quantity}\")]public async Task<ActionResult<Product>> SellProduct(int id, int quantity, int delay = 0){    // Omitted code for brevity    await Task.Delay(TimeSpan.FromSeconds(delay));    product.Inventory -= quantity;    await context.SaveChangesAsync();    return product;}\n    ```", "```cs\n    http://localhost:5273/api/Products/1/sell/10?delay=2\n    ```", "```cs\n    http://localhost:5273/api/Products/1/sell/10?delay=3\n    ```", "```cs\npublic class Product{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Inventory { get; set; }\n    // Add a new property as the concurrency token\n    public byte[] RowVersion { get; set; }\n}\n```", "```cs\nmodelBuilder.Entity<Product>()    .Property(p => p.RowVersion)\n    .IsRowVersion();\n```", "```cs\npublic class Product{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Inventory { get; set; }\n    // Add a new property as the concurrency token\n    [Timestamp]\n    public byte[] RowVersion { get; set; }\n}\n```", "```cs\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]      An unhandled exception has occurred while executing the request.\n      Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException: The database operation was expected to affect 1 row(s), but actually affected 0 row(s); data may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (1ms) [Parameters=[@p1='?' (DbType = Int32), @p0='?' (DbType = Int32), @p2='?' (Size = 8) (DbType = Binary)], CommandType='Text', CommandTimeout='30']\n      SET IMPLICIT_TRANSACTIONS OFF;\n      SET NOCOUNT ON;\n      UPDATE [Products] SET [Inventory] = @p0\n      OUTPUT INSERTED.[RowVersion]\n      WHERE [Id] = @p1 AND [RowVersion] = @p2;\n```", "```cs\n    public class Product{    public int Id { get; set; }    public string Name { get; set; }    public int Inventory { get; set; }    // Add a new property as the concurrency token    public Guid Version { get; set; }}\n    ```", "```cs\n    modelBuilder.Entity<Product>()    .Property(p => p.Version)    .IsConcurrencyToken();\n    ```", "```cs\n    public class Product{    public int Id { get; set; }    public string Name { get; set; }    public int Inventory { get; set; }    // Add a new property as the concurrency token    [ConcurrencyCheck]    public Guid Version { get; set; }}\n    ```", "```cs\n[HttpPost(\"{id}/sell/{quantity}\")]public async Task<ActionResult<Product>> SellProduct(int id, int quantity)\n{\n    // Omitted for brevity.\n    product.Inventory -= quantity;\n    // Manually assign a new value to the Version property.\n    product.Version = Guid.NewGuid();\n    await context.SaveChangesAsync();\n    return product;\n}\n```", "```cs\n[HttpPost(\"{id}/sell/{quantity}\")]public async Task<ActionResult<Product>> SellProduct(int id, int quantity)\n{\n    // Omitted for brevity.\n    product.Inventory -= quantity;\n    try\n    {\n        await context.SaveChangesAsync();\n    }\n    catch (DbUpdateConcurrencyException)\n    {\n        // Do not forget to log the error\n        return Conflict($\"Concurrency conflict for Product {product.Id}.\");\n    }\n    return product;\n}\n```", "```cs\n    Microsoft.EntityFrameworkCore.Design NuGet package. Navigate to the EfCoreReverseEngineeringDemo folder, and run the following command in the terminal to install it:\n\n    ```", "```cs\n    Microsoft.EntityFrameworkCore.Sqlite NuGet package. You can find the list of supported database providers at https://learn.microsoft.com/en-us/ef/core/providers/.\n    ```", "```cs\n\n    ```", "```cs\n    DbContext class will be the same as the database name, such as EfCoreRelationshipsDemoDbContext.cs. We can also change the name of the DbContext class by using the --context option. For example, we can run the following command to change the name of the DbContext class to AppDbContext:\n    ```", "```cs\n    Data and Models folders.\n    ```", "```cs\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.        => optionsBuilder.UseSqlServer(\"Server=(localdb)\\\\mssqllocaldb;Initial Catalog=EfCoreRelationshipsDemoDb;Trusted_Connection=True;\");\n    ```"]