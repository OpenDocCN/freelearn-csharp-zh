- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Started with Unity and C# – Game Objects and Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 和 C# 入门 – 游戏对象和组件
- en: Before starting, I wanted to discuss mistakes. It’s something we all do, or,
    as John Powell said, *The only real mistake is the one from which we learn nothing*
    ([https://www.goodreads.com/quotes/118431-the-only-real-mistake-is-the-one-from-which-we](https://www.goodreads.com/quotes/118431-the-only-real-mistake-is-the-one-from-which-we)).
    Every effort is being made to ensure that this book is as accurate as possible.
    The topics will be reviewed by a team after I submit this draft. I’ll receive
    feedback, and any errors will be corrected.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我想讨论一下错误。这是我们都会犯的事情，正如约翰·鲍威尔所说，*唯一的真正错误是我们从中学不到东西*（[https://www.goodreads.com/quotes/118431-the-only-real-mistake-is-the-one-from-which-we](https://www.goodreads.com/quotes/118431-the-only-real-mistake-is-the-one-from-which-we)）。我们正在尽一切努力确保这本书尽可能准确。在提交这个草案后，将由团队对主题进行审查。我会收到反馈，任何错误都会得到纠正。
- en: As a learner, you too will experience mistakes. This is expected, and, as John
    Powell emphasized, we need to learn from them. Try not to get discouraged. This
    is such an exciting topic at a time when opportunities are appearing in every
    industry using what I cover in this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为学习者，你也会犯错误。这是预料之中的，正如约翰·鲍威尔强调的，我们需要从错误中学习。尽量别灰心。在本书所涵盖的每个行业都出现机会的当下，这是一个多么激动人心的主题。
- en: Unity 6 has now introduced new templates and development tools that help streamline
    the game creation process, from early-stage prototyping to final production. These
    tools include predefined templates for both 2D and 3D games, advanced profiling
    tools for performance optimization, and the UI Toolkit for creating user interfaces
    efficiently. Throughout this book, you will learn how to effectively use these
    tools along with Unity’s essential components and workflows to transform your
    game ideas into fully functional, playable experiences. Whether you're developing
    for 2D or 3D, the performance improvements and enhanced productivity features
    in Unity 6 make it the ideal platform for your next project.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 6 现在引入了新的模板和开发工具，有助于简化游戏制作流程，从早期原型设计到最终生产。这些工具包括为 2D 和 3D 游戏预定义的模板，用于性能优化的高级分析工具，以及用于高效创建用户界面的
    UI 工具包。在本书中，你将学习如何有效地使用这些工具，以及 Unity 的基本组件和工作流程，将你的游戏想法转化为完全功能、可玩的游戏体验。无论你是开发
    2D 还是 3D 游戏，Unity 6 中的性能改进和增强的生产力功能使其成为你下一个项目的理想平台。
- en: This chapter offers a detailed exploration of Unity interfaces, starting with
    installing Unity to set a solid foundation for your game development journey.
    It covers navigating the Unity Hub, mastering the Unity Editor where your game
    ideas will come to life, and utilizing the Unity Asset Store for additional resources.
    This guide aims to provide you with a comprehensive understanding of Unity’s essential
    tools and interfaces, equipping you with the knowledge and confidence to embark
    on your game development projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细探讨 Unity 界面，从安装 Unity 开始，为你的游戏开发之旅打下坚实的基础。它涵盖了导航 Unity Hub、掌握将你的游戏想法变为现实的地方——Unity
    编辑器，以及利用 Unity Asset Store 获取额外资源。本指南旨在为你提供对 Unity 基本工具和界面的全面理解，让你拥有知识和信心开始你的游戏开发项目。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Unity interface overview
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 界面概述
- en: Exploring the Unity Editor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Unity 编辑器
- en: Creating a C# script
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 C# 脚本
- en: Basic concepts of C#
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 基本概念
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this book, we’ll make use of three main pieces of software: Unity Hub,
    Unity Editor, and an **Integrated Development Environment** (**IDE**). An IDE
    is basically a very smart text editor. When configured for Unity and C#, it will
    check your coding for errors and highlight those for you.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将使用三款主要的软件：Unity Hub、Unity 编辑器和一款 **集成开发环境**（**IDE**）。IDE 实际上是一个非常智能的文本编辑器。当配置为
    Unity 和 C# 时，它将检查你的代码错误并为你突出显示。
- en: The Unity Hub is available from Unity’s website. Unity will require that you
    create an account. For most beginners, select the Free plan. The Unity Hub download
    is located at [https://unity.com/download](https://unity.com/download).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Hub 可从 Unity 网站获取。Unity 将要求你创建一个账户。对于大多数初学者来说，选择免费计划。Unity Hub 下载位于 [https://unity.com/download](https://unity.com/download)。
- en: The Unity Editor is most conveniently installed through the Unity Hub. That
    process is described in this chapter. Though it is possible to download the Editor
    directly from Unity’s website, it is not recommended. The Editor must be installed
    in a location that the Unity Hub searches.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最方便的安装 Unity 编辑器的方式是通过 Unity Hub。这个过程在本章中有所描述。虽然你可以直接从 Unity 的网站上下载编辑器，但并不推荐这样做。编辑器必须安装在一个
    Unity Hub 会搜索的位置。
- en: Finally, you need an IDE. A popular choice is Microsoft Visual Studio. When
    you install an Editor through the Unity Hub, Visual Studio is an available option.
    You can download Visual Studio directly from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要一个 IDE。一个流行的选择是 Microsoft Visual Studio。当你通过 Unity Hub 安装编辑器时，Visual Studio
    是一个可用的选项。你可以直接从 [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
    下载 Visual Studio。
- en: There are other IDEs available for use with Unity. A popular choice is JetBrains’
    Rider. It offers a free trial; after that, Rider is a paid service. It can be
    found at [https://www.jetbrains.com/rider/download/](https://www.jetbrains.com/rider/download/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Unity，还有其他 IDE 可以与 Unity 一起使用。一个流行的选择是 JetBrains 的 Rider。它提供免费试用；之后，Rider
    是付费服务。你可以在 [https://www.jetbrains.com/rider/download/](https://www.jetbrains.com/rider/download/)
    找到它。
- en: 'You can find the examples/files related to this chapter here: [https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter01](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter01)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此处找到与本章节相关的示例/文件：[https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter01](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter01)
- en: Unity interface overview
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 界面概述
- en: In this section, we delve into the intricacies of the Unity3D interface, an
    essential component for any game developer. We’ll start with an introduction to
    the Unity Hub, your centralized gateway for managing Unity projects and installations.
    From there, we’ll explore the Unity Editor, breaking down its layout and key functionalities.
    You’ll learn how to navigate through different windows and panels, customize the
    workspace to suit your workflow, and utilize essential tools like the Scene and
    Game views.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入了解 Unity3D 界面的复杂性，这对于任何游戏开发者来说都是一个基本组件。我们将从 Unity Hub 的介绍开始，它是管理 Unity
    项目和安装的集中式门户。从那里，我们将探索 Unity 编辑器，分解其布局和关键功能。你将学习如何在不同窗口和面板之间导航，定制工作区以适应你的工作流程，并利用场景和游戏视图等基本工具。
- en: '![Figure 1.1 – Unity Hub – starting point each time you open Unity](img/B22128_01_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Unity Hub – 每次打开 Unity 时的起始点](img/B22128_01_01.jpg)'
- en: Figure 1.1 – Unity Hub – starting point each time you open Unity
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Unity Hub – 每次打开 Unity 时的起始点
- en: Projects windows show available projects. Selecting a project will open the
    project and its assigned Unity Editor.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 项目窗口显示可用的项目。选择一个项目将打开该项目及其分配的 Unity 编辑器。
- en: Having explored the Unity software interface, let’s now move on to installing
    Unity.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了 Unity 软件界面之后，我们现在继续学习如何安装 Unity。
- en: Installing Unity
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Unity
- en: When installing Unity Hub and the Unity Editor, it’s crucial to first check
    the current system requirements on the official Unity website to ensure compatibility
    with your hardware and operating system. Unity regularly updates these requirements
    to match the capabilities of new versions of the software. After confirming that
    your system meets these requirements, proceed to download and install Unity Hub,
    which serves as a management tool for Unity installations and projects.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Unity Hub 和 Unity 编辑器时，首先检查官方 Unity 网站上的当前系统要求至关重要，以确保与你的硬件和操作系统兼容。Unity
    定期更新这些要求以匹配软件新版本的能力。确认你的系统满足这些要求后，继续下载和安装 Unity Hub，它作为 Unity 安装和项目的管理工具。
- en: '![Figure 1.2 – Unity Hub Terms of Service screen with Agree and Disagree options](img/B22128_01_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – Unity Hub 服务条款屏幕，包含同意和不同意选项](img/B22128_01_02.jpg)'
- en: Figure 1.2 – Unity Hub Terms of Service screen with Agree and Disagree options
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – Unity Hub 服务条款屏幕，包含同意和不同意选项
- en: The initial installation of the Unity Hub will include the Unity Terms of Service.
    To continue, simply select the **Agree** button.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Hub 的初始安装将包括 Unity 服务条款。要继续，只需选择 **同意** 按钮。
- en: Within Unity Hub, when selecting the Unity Editor version to install, it’s advisable
    to opt for a **Long-Term Support** (**LTS**) version. LTS versions are stable
    releases that receive continuous updates and bug fixes for an extended period,
    making them ideal for production environments where stability is paramount. Choosing
    an LTS version ensures you have a reliable and well-supported foundation for your
    game development projects, allowing you to focus on creativity and innovation
    without worrying about the stability of your development tools.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity Hub 中，当选择要安装的 Unity 编辑器版本时，建议选择一个 **长期支持** (**LTS**) 版本。LTS 版本是稳定的发布版本，在较长时间内持续更新和修复错误，这使得它们非常适合稳定性至关重要的生产环境。选择
    LTS 版本确保你有一个可靠且得到良好支持的基石，用于你的游戏开发项目，让你能够专注于创造性和创新，无需担心开发工具的稳定性。
- en: '![Figure 1.3 – Unity Hub screens – installed editors, available editors, and
    installation options](img/B22128_01_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – Unity Hub 屏幕 – 已安装的编辑器，可用的编辑器和安装选项](img/B22128_01_03.jpg)'
- en: Figure 1.3 – Unity Hub screens – installed editors, available editors, and installation
    options
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – Unity Hub 屏幕 – 已安装的编辑器，可用的编辑器和安装选项
- en: The left screen is the Unity Editor **Installs** window where you manage your
    installations of Unity editors. Click the **Install Editor** button in the upper-right
    corner to view the middle screen, the **Install Editor** window. Here, you can
    select additional Unity editors to install. Selecting one of the available options
    brings up the right-hand screen, where you can select additional options for your
    Unity editor.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧屏幕是 Unity 编辑器 **安装** 窗口，在这里你可以管理你的 Unity 编辑器安装。点击右上角的 **安装编辑器** 按钮以查看中间屏幕，即
    **安装编辑器** 窗口。在这里，你可以选择要安装的额外 Unity 编辑器。选择一个可用的选项会弹出右侧屏幕，在这里你可以为你的 Unity 编辑器选择额外的选项。
- en: Understanding LTS and naming conventions
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 LTS 和命名约定
- en: LTS versions of Unity are stable releases that are supported and maintained
    by Unity Technologies for a longer period, typically two years. They receive regular
    updates to fix bugs and improve performance but don’t include new features.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 的 LTS 版本是经过较长时间（通常是两年）由 Unity Technologies 支持和维护的稳定发布版本。它们会定期更新以修复错误和改进性能，但不会包含新功能。
- en: Now, let’s move on to the naming conventions. Unity names its editors based
    on the year and version – for example, Unity 2020.1.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讨论命名约定。Unity 根据年份和版本命名其编辑器 – 例如，Unity 2020.1。
- en: 'As of my last update, Unity had two release streams:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到我上次更新为止，Unity 有两个发布流：
- en: '**TECH stream**: These are the latest versions with new features and improvements.
    They are named based on the year and incremental updates (e.g., Unity 2023.1).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TECH 流**: 这些是带有新功能和改进的最新版本。它们根据年份和增量更新命名（例如，Unity 2023.1）。'
- en: '**LTS stream**: These versions follow the TECH stream but are focused on stability
    and extended support. They are named similarly but with **LTS** at the end (e.g.,
    Unity 2020.3 LTS).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LTS 流**: 这些版本遵循 TECH 流，但专注于稳定性和长期支持。它们命名方式相似，但以 **LTS** 结尾（例如，Unity 2020.3
    LTS）。'
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Starting in 2024, Unity will once again change its naming conventions. Unity
    6 will be introduced. Along with its version name change, Unity’s pricing plan
    will also change. The vast majority of Unity developers will not be affected by
    these charges.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2024 年开始，Unity 将再次更改其命名约定。将引入 Unity 6。随着版本名称的改变，Unity 的定价计划也将改变。绝大多数 Unity
    开发者将不会受到这些费用的影响。
- en: 'Let’s end this section with some of my own suggestions regarding the installation
    process:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以我关于安装过程的一些个人建议结束本节：
- en: Always check the Unity website for the latest system requirements and versions,
    as they are subject to change with new updates.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是检查 Unity 网站，以获取最新的系统要求和版本，因为它们会随着新更新的发布而变化。
- en: For specific development needs (such as VR or AR), additional setup and components
    may be required (see [*Chapter 14*](B22128_14.xhtml#_idTextAnchor324)).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于特定的开发需求（如 VR 或 AR），可能需要额外的设置和组件（见 [*第 14 章*](B22128_14.xhtml#_idTextAnchor324)）。
- en: Ensure that your system’s graphics drivers are up to date for the best performance
    with Unity.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的系统图形驱动程序是最新的，以获得使用 Unity 的最佳性能。
- en: Having set up our initial build environment with the Hub, Editor, and IDE, let’s
    explore the Editor some more. Most of our game development time will be spent
    in the Editor. It is best to get familiar with the layout and the processes to
    build a game.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Hub、编辑器和 IDE 设置了我们的初始构建环境后，让我们进一步探索编辑器。我们的大部分游戏开发时间将在编辑器中度过。最好熟悉布局和构建游戏的过程。
- en: Exploring the Unity Editor
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Unity 编辑器
- en: 'In this section, we embark on a practical journey through Unity’s core functionalities,
    beginning with the crucial step of starting a new project. This foundational process
    sets the stage for what follows: a comprehensive exploration of the Editor’s screen
    layout. By understanding how to initiate projects and navigate the Editor’s interface,
    we equip ourselves with the essential skills needed to bring our game development
    ideas to life.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始一段通过 Unity 核心功能的实际旅程，从启动新项目的关键步骤开始。这一基础过程为后续内容奠定了基础：全面探索编辑器屏幕布局。通过了解如何启动项目和导航编辑器界面，我们为自己提供了将游戏开发想法变为现实所需的基本技能。
- en: 'To start a new project in Unity Hub, follow along with these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Unity Hub 中启动新项目，请按照以下步骤操作：
- en: Click **New Project**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建项目**。
- en: '![Figure 1.4 – Unity Hub Projects window](img/B22128_01_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – Unity Hub 项目窗口](img/B22128_01_04.jpg)'
- en: Figure 1.4 – Unity Hub Projects window
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Unity Hub 项目窗口
- en: Click the **New Project** button in the upper-right corner. This opens the next
    screen where you initially configure the new project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角点击**新建项目**按钮。这会打开下一个屏幕，您可以在其中最初配置新项目。
- en: Then, choose an **Editor Version** number and select a template such as **3D
    Core** for beginners.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择一个**编辑器版本**号，并选择一个模板，例如为初学者准备的**3D 核心版**。
- en: '![Figure 1.5 – Unity Hub New project window](img/B22128_01_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Unity Hub 新建项目窗口](img/B22128_01_05.jpg)'
- en: Figure 1.5 – Unity Hub New project window
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Unity Hub 新建项目窗口
- en: The box at the top of the project configuration screen lists the available installed
    editors. Initially, it will only display the editor you installed earlier. The
    middle column displays templates for your project. It’s best to select **3D Core**
    as it is the most basic option.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 项目配置屏幕顶部的框列出了可用的已安装编辑器。最初，它只会显示您之前安装的编辑器。中间列显示了项目模板。最好选择**3D 核心版**，因为它是最基本的选项。
- en: Name your project, choose its location (ensuring sufficient space), and click
    `Assets` folder for project content and avoiding modifications outside this folder
    for smooth operation.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名您的项目，选择其位置（确保有足够的空间），并点击`Assets`文件夹以添加项目内容，避免在此文件夹外进行修改以确保顺畅运行。
- en: Wait. When first launching a new project, Unity will take longer to load. In
    the background, Unity is installing and configuring various resources for the
    project. Subsequent launches will not take as long.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待。当首次启动新项目时，Unity 加载时间会更长。在后台，Unity 正在安装和配置项目所需的各项资源。后续启动将不会花费这么长时间。
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This new project will appear in the Hub. Return to the Hub and click on the
    project title each time you start a new Editor session.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新项目将出现在 Hub 中。每次您开始新的编辑器会话时，请返回 Hub 并点击项目标题。
- en: '![Figure 1.6 – The main Unity Editor screen is a collection of windows that
    showcase aspects of the project. The editing process will require switching between
    the various windows](img/B22128_01_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – Unity 主编辑器屏幕是一个集合，展示了项目的各个方面。编辑过程将需要在不同的窗口之间切换](img/B22128_01_06.jpg)'
- en: Figure 1.6 – The main Unity Editor screen is a collection of windows that showcase
    aspects of the project. The editing process will require switching between the
    various windows
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Unity 主编辑器屏幕是一个集合，展示了项目的各个方面。编辑过程将需要在不同的窗口之间切换
- en: 'Upon launching, the Unity Editor allows customizable layouts with core windows
    such as **Hierarchy**, **Scene** and **Game**, **Inspector**, and **Project**,
    each tailored to streamline the development process. Here’s what they do:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 启动后，Unity 编辑器允许自定义布局，包括核心窗口如**层次结构**、**场景**、**游戏**、**检查器**和**项目**，每个窗口都针对简化开发流程而定制。以下是它们的功能：
- en: '**Hierarchy**: Organizes scene objects in a parent-child structure, facilitating
    scene management.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层次结构**：以父子结构组织场景对象，便于场景管理。'
- en: '**Scene** and **Game**: **Scene** provides a workspace for object manipulation,
    while **Game** offers a real-time gameplay preview.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景**和**游戏**：**场景**提供了一个对象操作的工作空间，而**游戏**提供了实时游戏预览。'
- en: '**Inspector**: Displays properties of selected objects, enabling customization
    and component management.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查器**：显示所选对象属性，允许自定义和组件管理。'
- en: '**Project**: Manages all game assets, supporting organization and asset editing.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：管理所有游戏资源，支持组织和资源编辑。'
- en: These windows are integral to Unity’s workflow, offering tools and functionalities
    essential for game development.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些窗口对于 Unity 的工作流程至关重要，提供了游戏开发所必需的工具和功能。
- en: Unity Editor – a closer look
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity 编辑器 – 仔细观察
- en: After setting up a new project, the Unity Editor reveals itself as a multifaceted
    workspace designed to cater to the diverse needs of game development. This section
    delves into the intricate details of the Editor, offering a more granular view
    of its capabilities and how they coalesce to form a cohesive development environment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置新项目后，Unity 编辑器展现为一个多功能的 workspace，旨在满足游戏开发的多样化需求。本节深入探讨了编辑器的细节，提供了对其功能更细致的视角以及它们如何协同形成一个统一的发展环境。
- en: 'Below is an overview of the key components of the Unity Editor:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对 Unity 编辑器关键组件的概述：
- en: '**Main Toolbar**: At the very top, the main toolbar extends a quick access
    strip to essential features such as playtesting, time management, and scene controls.
    This toolbar is pivotal for testing game scenes directly within the Editor, allowing
    developers to iterate rapidly by switching between play and edit modes seamlessly.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主工具栏**: 在顶部，主工具栏提供了一个快速访问栏，包括游戏测试、时间管理和场景控制等基本功能。这个工具栏对于在编辑器中直接测试游戏场景至关重要，允许开发者通过无缝切换播放和编辑模式来快速迭代。'
- en: '**Layout Customization**: Unity’s flexible workspace accommodates diverse workflows
    through customizable layouts. You can drag and rearrange windows to suit your
    working style, and even save specific layouts for different tasks such as coding,
    animating, or UI design. This adaptability is key for maintaining efficiency across
    the multifaceted development process.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局自定义**: Unity 的灵活工作空间通过可定制的布局适应不同的工作流程。您可以拖动和重新排列窗口以适应您的工作风格，甚至可以保存特定布局以供不同的任务使用，如编码、动画或
    UI 设计。这种适应性对于在整个多方面开发过程中保持效率至关重要。'
- en: '**Asset Importing and Management**: Beyond project creation, the Unity Editor
    excels in asset management. The **Assets** menu and **Project** window work in
    tandem, allowing developers to import, organize, and manipulate game assets such
    as textures, models, and sounds with ease. Understanding the import settings and
    how Unity handles different asset types is crucial for optimizing game performance.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产导入和管理**: 除了项目创建之外，Unity 编辑器在资产管理方面表现出色。**资产** 菜单和 **项目** 窗口协同工作，允许开发者轻松导入、组织和操作游戏资产，如纹理、模型和声音。理解导入设置以及
    Unity 如何处理不同类型的资产对于优化游戏性能至关重要。'
- en: '**Console Window**: Debugging is an integral part of development, and the **Console**
    window is where Unity communicates with developers. It displays errors, warnings,
    and other crucial messages from the Editor and your scripts. Learning how to interpret
    these messages can significantly expedite the debugging process.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台窗口**: 调试是开发的重要组成部分，**控制台** 窗口是 Unity 与开发者沟通的地方。它显示来自编辑器和脚本的错误、警告和其他重要消息。学习如何解释这些消息可以显著加快调试过程。'
- en: '**Animation and Animator Windows**: Unity offers robust tools for animating
    characters and objects within the Editor. The **Animation** window allows for
    the creation and editing of animation clips, while the **Animator** window manages
    state machines for complex animations. Grasping these tools can elevate the dynamic
    elements of your game, adding a layer of polish and interactivity.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画和动画器窗口**: Unity 在编辑器内为角色和对象动画提供了强大的工具。**动画** 窗口允许创建和编辑动画剪辑，而 **动画器** 窗口则管理复杂动画的状态机。掌握这些工具可以提高游戏动态元素的质量，增加一层抛光和交互性。'
- en: '**Lighting and Rendering**: Unity’s powerful lighting and rendering options
    are accessible through the **Lighting** window and the **Renderer** component
    in the Inspector. Understanding these features is essential for setting the right
    mood and visual fidelity in your game, from adjusting global illumination to fine-tuning
    individual object materials.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光照和渲染**: Unity 强大的光照和渲染选项可通过 **光照** 窗口和检查器中的 **渲染器** 组件访问。理解这些功能对于在游戏中设置正确的氛围和视觉保真度至关重要，从调整全局照明到微调单个对象材质。'
- en: '**Scripting with MonoDevelop or Visual Studio**: While the Unity Editor lays
    the groundwork, scripting breathes life into your game. Unity integrates seamlessly
    with code editors such as MonoDevelop and Visual Studio, providing a rich environment
    for writing and debugging C# scripts. Familiarity with these tools and Unity’s
    scripting API opens up limitless possibilities for game mechanics and interactivity.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 MonoDevelop 或 Visual Studio 编写脚本**: 虽然 Unity 编辑器奠定了基础，但脚本为游戏注入了生命力。Unity
    与代码编辑器如 MonoDevelop 和 Visual Studio 无缝集成，提供了一个丰富的环境来编写和调试 C# 脚本。熟悉这些工具和 Unity
    的脚本 API 为游戏机制和交互性打开了无限可能。'
- en: '**Asset Store Integration**: Lastly, Unity’s Asset Store is directly integrated
    into the Editor, offering a vast repository of assets and tools that can accelerate
    development. From ready-made models and textures to entire game systems, leveraging
    the Asset Store can be a game-changer, especially for teams with limited resources.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产商店集成**：最后，Unity的资产商店直接集成到编辑器中，提供了一个庞大的资产和工具库，可以加速开发。从现成的模型和纹理到整个游戏系统，利用资产商店可以成为游戏规则的改变者，特别是对于资源有限的团队来说。'
- en: So, the Unity Editor is more than just a starting point for projects; it’s a
    comprehensive suite of tools designed to accommodate every facet of game development.
    By understanding and utilizing these components effectively, developers can streamline
    their workflow, enhance productivity, and ultimately, bring their creative visions
    to life with greater fidelity and efficiency.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Unity编辑器不仅仅是项目的起点；它是一个综合性的工具套件，旨在满足游戏开发的各个方面。通过理解和有效利用这些组件，开发者可以简化他们的工作流程，提高生产力，并最终以更高的保真度和效率将他们的创意愿景变为现实。
- en: Now, with a basic overview of the workspace inside the Unity Editor, let’s explore
    the process used for C# scripts. The vast majority of game programming is either
    inside the editor or editing scripts.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在Unity编辑器内部工作空间的基本概述的基础上，探索用于C#脚本的过程。绝大多数游戏编程都是在编辑器内部或编辑脚本中进行的。
- en: Creating a C# script
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建C#脚本
- en: Creating your first C# script is a crucial step in your Unity journey, introducing
    you to the essential scripting that animates your game’s elements. This isn’t
    just a one-off task; it’s a core skill you’ll use regularly to craft behaviors
    and interactions in your game. Mastering this early on opens the door to transforming
    your creative visions into dynamic, interactive realities.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 创建您的第一个C#脚本是您Unity之旅的关键步骤，它向您介绍了使游戏元素动画化的基本脚本。这不仅仅是一个一次性任务；这是一项您将经常使用的核心技能，用于创建游戏中的行为和交互。早期掌握这项技能将打开将您的创意愿景转化为动态、交互式现实的大门。
- en: To create a folder and a C# script in Unity, follow these steps in the `Assets`
    folder.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Unity中创建文件夹和C#脚本，请在`Assets`文件夹中按照以下步骤操作。
- en: 'First, create a `Scripts` folder by following these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下步骤创建一个`Scripts`文件夹：
- en: In the `Assets` folder.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Assets`文件夹中。
- en: Right-click and choose `Scripts` for script file organization.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择`Scripts`以组织脚本文件。
- en: 'Then, to create a C# script, follow these steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要创建C#脚本，请按照以下步骤操作：
- en: Select the `Scripts` folder.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Scripts`文件夹。
- en: Right-click and select `NewBehaviourScript` to your desired name, such as `MyFirstScript`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择`NewBehaviourScript`以创建您想要的名称，例如`MyFirstScript`。
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Unity provides alternative ways to add scripts to a project. These include dragging
    script files into the **Project** window, adding scripts in your IDE, and others.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Unity提供了添加脚本到项目的其他方法。这包括将脚本文件拖放到**项目**窗口中，在您的IDE中添加脚本，以及其他方法。
- en: 'Here are some additional tips:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一些额外的提示：
- en: Unity automatically compiles scripts when they are created or modified, so you
    can immediately use them in your project.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity在创建或修改脚本时自动编译脚本，因此您可以直接在项目中使用它们。
- en: It’s a good practice to keep your project organized by using folders such as
    `Scripts`, `Materials`, `Prefabs`, and so on, to ensure easy navigation and management
    as your project grows.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用如`Scripts`、`Materials`、`Prefabs`等文件夹来组织您的项目是一个好习惯，这样可以确保随着项目的增长，导航和管理变得容易。
- en: 'Now, to edit your script using an IDE (such as Visual Studio or JetBrains Rider),
    follow these steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要使用IDE（例如Visual Studio或JetBrains Rider）编辑您的脚本，请按照以下步骤操作：
- en: Double-click the `MyFirstScript.cs` file in the `Scripts` folder to open it
    in your IDE.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Scripts`文件夹中双击`MyFirstScript.cs`文件以在您的IDE中打开它。
- en: 'In the script, add the following line inside the `Start` method to print a
    message to the console:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本中，在`Start`方法内添加以下行以将消息打印到控制台：
- en: '[PRE0]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the script and return to Unity.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回Unity。
- en: Attach the script to a GameObject in your scene by dragging the script onto
    the GameObject in the Hierarchy.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将脚本拖放到场景中的GameObject在层次结构中附加脚本。
- en: Press the **Play** button in Unity. You should see the message **“Hello, Unity!”**
    appear in the **Console** window.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中按下**播放**按钮。您应该在**控制台**窗口中看到消息**“Hello, Unity！”**出现。
- en: This simple exercise helps you get familiar with the interaction between Unity
    and your IDE and provides immediate feedback in the **Console** window.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的练习有助于您熟悉Unity和您的IDE之间的交互，并在**控制台**窗口中提供即时反馈。
- en: 'In conclusion, familiarizing yourself with the Unity interface and your chosen
    IDE is a crucial step in game development. Understanding the layout and functionality
    of various windows such as **Hierarchy**, **Scene**, **Game**, **Inspector**,
    and **Project**, and mastering the art of asset management sets a solid foundation
    for your projects. As you transition from the intuitive Unity interface to the
    realm of programming, you’ll encounter the fundamental language of Unity game
    development: C#. Grasping the basic concepts of C# is essential for bringing your
    game ideas to life. This powerful, versatile language allows you to script the
    behavior of your game objects, control the game flow, and interact with the Unity
    Engine in a more profound way. As we delve into C#, remember that it’s the synergy
    between the Unity interface and C# scripting that transforms your creative vision
    into an engaging, interactive gaming experience.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，熟悉Unity界面和您选择的IDE是游戏开发中的关键步骤。理解各种窗口的布局和功能，例如**层次结构**、**场景**、**游戏**、**检查器**和**项目**，以及掌握资产管理技巧，为您的项目打下坚实的基础。当您从直观的Unity界面过渡到编程领域时，您将遇到Unity游戏开发的基本语言：C#。掌握C#的基本概念对于将您的游戏想法变为现实至关重要。这种强大、灵活的语言允许您编写游戏对象的行为脚本，控制游戏流程，并以更深入的方式与Unity引擎交互。当我们深入研究C#时，请记住，Unity界面和C#脚本之间的协同作用将您的创意愿景转化为引人入胜、互动的游戏体验。
- en: Basic concepts of C#
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#的基本概念
- en: Welcome to our in-depth exploration of programming fundamentals within Unity3D,
    focusing on leveraging C# for game development. This section introduces the core
    concepts and structures of C#, starting with data types and variables.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到我们对Unity3D中编程基础知识的深入探索，重点关注利用C#进行游戏开发。本节介绍了C#的核心概念和结构，从数据类型和变量开始。
- en: As we progress, we’ll dive into control structures, functions, and methods,
    uncovering how to control the flow of your game, execute code blocks, and encapsulate
    functionality for reuse and clarity. Understanding these elements is crucial for
    scripting game logic.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们不断前进，我们将深入研究控制结构、函数和方法，揭示如何控制游戏流程、执行代码块以及封装功能以供重用和清晰。理解这些元素对于编写游戏逻辑至关重要。
- en: This section aims to briefly explore C#, familiarizing you with basic programming
    elements. Whether you’re a beginner or looking to enhance your C# prowess in Unity3D,
    this journey will equip you with the skills necessary for advanced game development.
    Let’s embark on this transformative path, where your creative ideas become tangible
    realities in the world of gaming.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在简要探讨C#，让您熟悉基本的编程元素。无论您是初学者还是希望提高在Unity3D中C#技能，这段旅程将为您提供高级游戏开发所需的技能。让我们踏上这段变革之路，在游戏世界中将您的创意想法变为现实。
- en: Utilizing C# data types for creative game development
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用C#数据类型进行创意游戏开发
- en: In C#, data types such as variables store information that is used in games.
    For example, we could use an integer, a variable that only contains whole numbers,
    to record how many lives a player has remaining.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，数据类型如变量存储在游戏中使用的信息。例如，我们可以使用一个整数变量，它只包含整数，来记录玩家剩余的生命值。
- en: Understanding variables
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解变量
- en: In C#, variables are essential elements that act as storage locations in the
    computer’s memory, holding data that can be modified during program execution.
    They are fundamental in defining the behavior and state of a program, playing
    a crucial role in C# programming, especially in Unity for game development. Variables
    are characterized by their type, which determines the kind of data they can hold
    and the operations that can be performed on them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，变量是作为计算机内存中的存储位置的基本元素，在程序执行期间可以修改的数据。它们在定义程序的行为和状态方面至关重要，在C#编程中扮演着关键角色，尤其是在Unity游戏开发中。变量以其类型为特征，这决定了它们可以存储的数据类型以及可以对其执行的操作。
- en: The most common variable types in C# include `int` for integers, `float` for
    floating-point numbers, `double` for double-precision floating-point numbers,
    `bool` for Boolean values, `char` for characters, and `string` for sequences of
    characters. Additionally, C# supports more complex types such as arrays and objects,
    enabling developers to handle more sophisticated data structures. Each of these
    variable types serves a distinct purpose, such as controlling loop iterations
    with integers, managing spatial coordinates with floats, or handling textual data
    with strings, thus providing a versatile toolkit for a wide array of programming
    tasks in game development.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: C#中最常见的变量类型包括`int`用于整数，`float`用于浮点数，`double`用于双精度浮点数，`bool`用于布尔值，`char`用于字符，以及`string`用于字符序列。此外，C#还支持更复杂的类型，如数组和对象，使开发者能够处理更复杂的数据结构。每种变量类型都有其特定的用途，例如使用整数控制循环迭代，使用浮点数管理空间坐标，或使用字符串处理文本数据，从而为游戏开发中的各种编程任务提供了一个多功能的工具包。
- en: 'The following is a generic sample C# script that uses the variable types just
    described. You can see the structure for initializing or declaring a variable.
    It starts with the variable type, such as `int`. That is followed by the variable’s
    name, such as `playerScore`. Then, an equal sign (`=`) is used to assign the value
    to the variable. Further in the script, the value of each variable is added to
    the game project log, which is viewable in the Editor’s **Console** window:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例C#脚本使用了前面描述的变量类型。您可以看到初始化或声明变量的结构。它以变量类型开始，例如`int`。然后是变量的名称，例如`playerScore`。然后使用等号（`=`）将值赋给变量。在脚本中进一步，每个变量的值都会添加到游戏项目的日志中，该日志可在编辑器的**控制台**窗口中查看：
- en: '[PRE1]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The provided script demonstrates a basic C# script in Unity, starting with `using
    UnityEngine;` to import essential Unity Engine utilities. It introduces a public
    class named `VariablesExample`, adhering to Unity’s convention where the class
    and filename should match, and inherits from `MonoBehaviour`, a key Unity class
    enabling Unity-specific functions such as `Start()`, which runs on initialization.
    Variables are declared with their type, such as `int` for integers, followed by
    a camel case named `identifier` and an optional initial value, with strings enclosed
    in quotes. This setup lays the groundwork for utilizing Unity’s features and writing
    game logic.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的脚本演示了一个基本的Unity C#脚本，从`using UnityEngine;`开始导入必要的Unity引擎工具。它介绍了一个名为`VariablesExample`的公共类，遵循Unity的约定，即类名和文件名应匹配，并继承自`MonoBehaviour`，这是一个关键的Unity类，它使Unity特定的功能成为可能，例如`Start()`，该函数在初始化时运行。变量通过其类型声明，例如`int`用于整数，后跟驼峰式命名的`identifier`和一个可选的初始值，字符串用引号括起来。这种设置为利用Unity的功能和编写游戏逻辑奠定了基础。
- en: The preceding script also demonstrates the concept of global and local variables.
    Both `_playerScore` and `_playerSpeed` are instance variables, declared outside
    of any method or function, within the class but typically referred to as fields
    in C#. The use of `private` means other scripts cannot access these variables
    directly. To share a variable, you would use `public`, though this is not recommended
    in most cases due to encapsulation principles. Within a method or function, you
    do not need to redeclare the variable type; it was already specified when the
    variable was initially declared. It is a common practice to start a private field’s
    name with an underscore character.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的脚本还演示了全局变量和局部变量的概念。`_playerScore`和`_playerSpeed`都是实例变量，在类中声明，但通常在C#中称为字段。使用`private`意味着其他脚本不能直接访问这些变量。要共享变量，您可以使用`public`，尽管在大多数情况下不推荐这样做，因为这违反了封装原则。在方法或函数内部，您不需要重新声明变量类型；它已经在变量最初声明时指定了。在C#中，通常以下划线字符开始私有字段的名称。
- en: Exploring control structures
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索控制结构
- en: Control structures are pivotal elements in C# programming, guiding the execution
    flow within scripts. Among these, `If-Then` statements are particularly common.
    They evaluate a variable’s value; if `true`, a specific code block runs, otherwise,
    it’s bypassed. This enables scripts to react dynamically to different conditions
    and states within the game.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 控制结构是C#编程中的关键元素，它们指导脚本中的执行流程。在这些结构中，`If-Then`语句尤为常见。它们评估变量的值；如果为`true`，则运行特定的代码块，否则跳过。这使得脚本能够动态地响应游戏中的不同条件和状态。
- en: Loops form another critical category of control structures, repeatedly executing
    a code block based on a condition. Unlike If-Then statements, which perform a
    one-time check, loops continue until a certain condition is met. The `For-Next`
    loop is ideal for scenarios with a predetermined iteration count, ensuring a code
    segment runs a specific number of times. On the other hand, the `While` loop is
    suited for less definite situations, such as continuously checking a condition
    such as a player’s status (e.g., “while the player is falling”), and executing
    the loop’s body until the condition changes. Another example is using a `While`
    loop to keep spawning enemies until the player reaches a certain score threshold.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 循环是另一个关键的控件结构类别，根据条件重复执行代码块。与执行一次性检查的 If-Then 语句不同，循环会一直持续到满足某个条件。`For-Next`
    循环非常适合具有预定迭代次数的场景，确保代码段运行特定次数。另一方面，`While` 循环适合不太确定的情况，例如持续检查玩家的状态（例如，“当玩家正在下落时”），并在条件改变之前执行循环体。另一个例子是使用
    `While` 循环不断生成敌人，直到玩家达到某个分数阈值。
- en: Understanding and effectively utilizing these control structures is essential
    for creating responsive and efficient game logic in Unity using C#.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 理解并有效地利用这些控件结构对于在 Unity 中使用 C# 创建响应和高效的游戏逻辑至关重要。
- en: Exploring functions and methods
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索函数和方法
- en: In Unity, when you’re making games with C#, you’ll hear a lot about **functions**
    and **methods**. Think of them as special boxes of instructions that do specific
    jobs. In C#, we usually call these boxes *methods*, but it’s just like functions
    in other coding languages.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 中，当你用 C# 制作游戏时，你会听到很多关于 **函数** 和 **方法** 的内容。把它们想象成执行特定任务的特殊指令盒。在 C#
    中，我们通常把这些盒子称为 *方法*，但它们和其他编程语言中的函数类似。
- en: You can use these methods whenever you want to make something happen in your
    game. They help with all sorts of things, such as making your characters move,
    responding when players press buttons, or keeping track of scores.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在想要在游戏中发生某些事情时使用这些方法。它们可以帮助你完成各种事情，比如让角色移动、当玩家按下按钮时做出响应，或者跟踪分数。
- en: It’s like having a bunch of helpful tools in your toolbox. Whenever you need
    a particular job done, you pick the right tool (or method) for that job. This
    makes your game’s code neat, easier to handle, and even lets you use the same
    tool for different parts of your game.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像在你的工具箱里有一堆有用的工具。无论何时你需要完成特定的任务，你都可以选择适合这项工作的正确工具（或方法）。这使得你的游戏代码整洁、易于处理，甚至可以让你在不同的游戏部分使用相同的工具。
- en: Structure and syntax of functions/ methods
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数/方法的结构和语法
- en: In C#, a method typically consists of a visibility keyword, a return type, a
    method name, and a set of parentheses, which may contain parameters. The body
    of the method, enclosed in curly braces, contains the code to be executed. For
    instance, `public void MovePlayer(float speed){}` is a method in Unity that could
    move a player at a specified speed. The `public` keyword makes it accessible from
    other classes, `void` implies that it doesn’t return any value, and `float speed`
    is a parameter that can be passed to the method. Another example is `private int
    CalculateScore(int points) { return points * 10; }`, which is a `private` method
    that calculates and returns a player’s score based on the points earned.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，一个方法通常由一个可见性关键字、一个返回类型、一个方法名和一组括号组成，括号中可能包含参数。方法体，用花括号括起来，包含要执行的代码。例如，`public
    void MovePlayer(float speed){}` 是 Unity 中一个可以以指定速度移动玩家的方法。`public` 关键字使其可以从其他类中访问，`void`
    表示它不返回任何值，而 `float speed` 是可以传递给方法的参数。另一个例子是 `private int CalculateScore(int points)
    { return points * 10; }`，这是一个 `private` 方法，根据获得的分数计算并返回玩家的得分。
- en: Common Unity methods
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 常见 Unity 方法
- en: Unity provides several built-in methods that are essential in the game development
    life cycle. Methods such as `Start()` and `Update()` are the most frequently used.
    `Start()` is called before the first frame update, perfect for initializing variables
    or game states. `Update()`, on the other hand, is called once per frame and is
    where you’ll primarily manage player inputs, update game logic, and handle real-time
    interactions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 提供了几个在游戏开发生命周期中至关重要的内置方法。例如 `Start()` 和 `Update()` 是最常用的方法。`Start()` 在第一次帧更新之前被调用，非常适合初始化变量或游戏状态。另一方面，`Update()`
    每帧被调用一次，你将主要在这里管理玩家输入、更新游戏逻辑和处理实时交互。
- en: Custom methods for game mechanics
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 游戏机制的自定义方法
- en: Beyond the standard methods, developers can create custom methods to define
    specific behaviors or actions. For instance, a method named `CalculateScore()`
    could be created to update the player’s score. Custom methods enhance the modularity
    and reusability of your code, making your game more organized and easier to debug
    and maintain.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准方法之外，开发者可以创建自定义方法来定义特定的行为或动作。例如，可以创建一个名为`CalculateScore()`的方法来更新玩家的得分。自定义方法增强了代码的模块化和可重用性，使游戏更加组织化，更容易调试和维护。
- en: Parameters and return types
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数和返回类型
- en: Methods in C# can also have parameters and return types. Parameters allow you
    to pass values into a method, making them more dynamic and flexible. For example,
    a `DealDamage(int damage)` method can take an integer parameter to apply damage
    to a character. Return types, on the other hand, enable methods to send back a
    value. A `GetHealth()` method might return an integer value representing a character’s
    health.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: C#中的方法也可以有参数和返回类型。参数允许你将值传递到方法中，使它们更加动态和灵活。例如，一个名为`DealDamage(int damage)`的方法可以接受一个整数参数来对角色造成伤害。另一方面，返回类型使方法能够返回一个值。一个名为`GetHealth()`的方法可能返回一个表示角色健康值的整数。
- en: Learning about classes
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习关于类
- en: In the context of Unity game development, C# classes play a crucial role. They
    act as blueprints for every entity in the game world, from the simplest UI element
    to the most complex characters and environments. Understanding classes in C# is
    vital for Unity developers, as they provide the structure and functionality to
    game objects, making them integral to creating immersive and interactive game
    experiences.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity游戏开发背景下，C#类发挥着至关重要的作用。它们是游戏世界中每个实体的蓝图，从最简单的UI元素到最复杂的角色和环境。对于Unity开发者来说，理解C#中的类至关重要，因为它们为游戏对象提供结构和功能，对于创建沉浸式和交互式的游戏体验至关重要。
- en: Classes as blueprints for game objects
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类作为游戏对象的蓝图
- en: In Unity, a class defines the properties and behaviors of game objects. Think
    of a class as a template that describes the characteristics and capabilities of
    something in the game. For instance, a `Player` class might include properties
    such as `health`, `speed`, and `strength`, and behaviors such as `move`, `jump`,
    and `attack`. When you create an instance of the `Player` class, you’re essentially
    creating a specific player character in your game with those properties and behaviors.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，一个类定义了游戏对象属性和行为。将类想象成一个模板，描述游戏中的某个事物的特性和能力。例如，一个`Player`类可能包括如`health`（健康值）、`speed`（速度）和`strength`（力量）等属性，以及`move`（移动）、`jump`（跳跃）和`attack`（攻击）等行为。当你创建`Player`类的实例时，你实际上是在你的游戏中创建了一个具有这些属性和行为的特定玩家角色。
- en: Properties and behaviors defined by classes
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类定义的属性和行为
- en: The properties of a class are variables that hold data relevant to the object,
    such as scores, health points, or positional coordinates. These properties can
    be simple data types such as integers and strings, or more complex types such
    as arrays or other classes. Behaviors, on the other hand, are defined by methods
    within the class. These methods contain the logic that dictates how an object
    acts or responds to game events. For example, a method within the `Enemy` class
    could dictate how the enemy detects and chases the player.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 类的属性是包含与对象相关数据的变量，例如得分、健康点数或位置坐标。这些属性可以是简单的数据类型，如整数和字符串，也可以是更复杂的数据类型，如数组或其他类。另一方面，行为由类内的方法定义。这些方法包含决定对象如何行动或对游戏事件做出响应的逻辑。例如，`Enemy`类内的一个方法可以规定敌人如何检测和追逐玩家。
- en: Mastering classes for complex game development
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 掌握类以进行复杂游戏开发
- en: Mastering the use of classes is pivotal for developers aiming to create complex
    and interactive games. Classes allow for the encapsulation of data and functionality,
    leading to code that is more organized, modular, and reusable. This is particularly
    important in game development, where different types of objects often share properties
    and behaviors. By using classes effectively, you can create a hierarchy of game
    objects, inherit properties and behaviors, and override them to create specialized
    behaviors. This not only streamlines the development process but also makes the
    code base more manageable and scalable.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望创建复杂和交互式游戏的开发者来说，掌握类的使用至关重要。类允许封装数据和功能，使代码更加组织化、模块化和可重用。这在游戏开发中尤为重要，因为不同类型的对象通常共享属性和行为。通过有效地使用类，你可以创建游戏对象层次结构，继承属性和行为，并覆盖它们以创建特定的行为。这不仅简化了开发过程，还使代码库更易于管理和扩展。
- en: In Unity, `MonoBehaviour` is a base class from which most game scripts are derived.
    It provides access to important life cycle methods such as `Start` and `Update`,
    which are essential for game logic. Understanding how to extend `MonoBehaviour`
    and utilize its features is a key part of working effectively with Unity.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，`MonoBehaviour`是一个基类，大多数游戏脚本都是从它派生出来的。它提供了访问重要生命周期方法，如`Start`和`Update`，这些对于游戏逻辑至关重要。了解如何扩展`MonoBehaviour`并利用其功能是有效使用Unity的关键部分。
- en: In this section, we delved into the essentials of C# programming within Unity3D,
    starting with an introduction to key concepts such as data types and variables,
    crucial for managing game data. We progressed to control structures and methods,
    foundational for scripting game logic, and explored object-oriented principles
    through classes and objects, enhancing game component design. Additionally, we
    touched on Unity-specific scripting with MonoBehaviour and ScriptableObjects,
    concluding with an overview of extending the Unity Editor through scripting, equipping
    you with a solid foundation in C# for game development.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们深入探讨了Unity3D中C#编程的要点，从介绍关键概念如数据类型和变量开始，这些对于管理游戏数据至关重要。我们进一步探讨了控制结构和方法，这些是编写游戏逻辑的基础，并通过类和对象探索面向对象原则，增强了游戏组件设计。此外，我们还涉及了Unity特定的脚本编程，包括`MonoBehaviour`和`ScriptableObjects`，最后通过脚本扩展Unity编辑器的概述，为你提供了游戏开发中C#的坚实基础。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter served as an introduction to Unity and C# for game development,
    emphasizing the learning process. It guided beginners through setting up Unity,
    including installing Unity Hub and the Unity Editor, and choosing the right version
    and IDE for their projects. The chapter provided a walk-through of the Unity Editor,
    explaining key components such as the **Hierarchy**, **Scene**, **Inspector**,
    and **Project** windows, essential for organizing and managing game development
    projects.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为游戏开发中Unity和C#的入门介绍，强调了学习过程。它引导初学者通过设置Unity，包括安装Unity Hub和Unity编辑器，以及为他们的项目选择正确的版本和IDE。本章提供了Unity编辑器的操作指南，解释了如**层次结构**、**场景**、**检查器**和**项目**窗口等关键组件，这些对于组织和管理工作室开发项目至关重要。
- en: Creating a C# script was highlighted as a fundamental skill, with step-by-step
    instructions on how to set up a `Scripts` folder and write your first script.
    This laid the groundwork for more advanced topics in game programming.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建C#脚本被强调为基本技能，提供了如何设置`Scripts`文件夹和编写第一个脚本的逐步说明。这为游戏编程中的更高级主题奠定了基础。
- en: The chapter then introduced basic C# concepts crucial for game development,
    such as data types, variables, control structures, functions, and methods. These
    concepts form the foundation of scripting in Unity, enabling you to start bringing
    your game ideas to life. Through practical tips and clear explanations, the chapter
    prepared you for the journey ahead in game development with Unity and C#.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本章接着介绍了对游戏开发至关重要的基本C#概念，如数据类型、变量、控制结构、函数和方法。这些概念是Unity脚本的基础，使你能够开始将你的游戏想法变为现实。通过实用的技巧和清晰的解释，本章为你使用Unity和C#进行游戏开发的前路做好了准备。
- en: Building on the basics, the next chapter shifts focus to hands-on creation,
    guiding you through starting a new Unity project, navigating the Editor, managing
    assets, and manipulating game objects. We’ll cap it off by setting up your first
    scene, transitioning smoothly from foundational theory to the practical steps
    of bringing your game ideas to life.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握基础知识的基础上，下一章将重点转向实际创作，指导你开始一个新的Unity项目，导航编辑器，管理资产，以及操作游戏对象。我们将通过设置你的第一个场景来结束，从基础理论顺利过渡到将你的游戏想法付诸实践的实际步骤。
