- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a book about design patterns written in the context of the C# coding
    language. I know what you’re probably thinking. What does that even mean? Well,
    I could tell you but I’d spoil the rest of the book, and trust me, it’s a doozy!
  prefs: []
  type: TYPE_NORMAL
- en: Design Patterns are a codified set of best practices for software problems that
    come up so often that we can learn to recognize them and immediately know how
    to solve them. The solutions for these recurring problems found in patterns have
    been used for decades and they have proven to be effective.
  prefs: []
  type: TYPE_NORMAL
- en: Patterns also become a battle language for developers because they are so pervasive.
    This idea comes from the popular television and movie franchise, *Star Trek*.
    In *Star Trek*, the warrior race known as the Klingons has two languages. They
    have the regular Klingon language that they learn in Klingon kindergarten and
    an abbreviated version they use during combat. The phrase “*Load torpedo tubes
    1 and 2 and fire a full spread*” can be reduced to one or two words. All Klingons
    know what that phrase means, and they win battles because they are a few seconds
    faster than their linguistically-challenged foes. Similarly, you can say “*Just
    use the decorator pattern*.” Any developer who has studied patterns will understand
    what to do next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Patterns are not specific to the C# language. However, in order to learn patterns
    effectively, you need an implementation language. The original book on patterns
    was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, collectively
    known as the **Gang of Four**, or **GoF** for short. Their book, *Design Patterns:
    Elements of Reusable Object-Oriented Software*, is often referred to as *the GoF
    book*.'
  prefs: []
  type: TYPE_NORMAL
- en: The GoF book was published in 1994, which makes it a technological dinosaur.
    While it may be old, the patterns explained within its pages are still very relevant.
    My criticism of the GoF book is it is written in a very academic format, and its
    implementation language is one you don’t really see anymore. The implementation
    language is an important detail. The GoF book covers 23 patterns, which is the
    same number of herbs and spices found in KFC’s original recipe. That can’t be
    a coincidence. This book doesn’t cover all 23 patterns, which is fine, because
    too much fried chicken isn’t very good for you. I’ve focused on patterns you’ll
    need every day in most of the projects you work on. I cover the remainder briefly
    in [*Chapter 8*](B18605_08.xhtml#_idTextAnchor152) at the end of the book.
  prefs: []
  type: TYPE_NORMAL
- en: There are some books out there that try to use pseudocode in order to be generic.
    I posit that such books are not useful to most people. If you’re like me, and
    you probably are in this regard, you’d wish for a code example that is easy to
    read, isn’t overly clever, and has a firm basis in the real world. Books and blog
    sites that try to teach you patterns with phrases such as “`Class A` inherits
    from `Class B`, which depends on `Class C`” are too vague to be useful. Equally
    annoying are books and sites that try to show you the pattern in 20 languages.
    They usually do a poor job with all 20 instead of focusing on doing a good job
    in just one. I am only using C# and the **Unified Modeling Language** (**UML**).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve never heard of UML before, don’t let it scare you. UML is a convention
    used to create diagrams. There are 14 types of UML diagrams. I only use one diagram
    type: class diagrams. I’ve included a primer in [*Appendix 2*](B18605_Appendix_2.xhtml#_idTextAnchor204)
    to help you if you are new to UML.'
  prefs: []
  type: TYPE_NORMAL
- en: This book is about the real world, or at least a close facsimile. I’ve written
    this book using the same techniques that are used in real software projects. There’s
    realistic code in the book that solves legitimate business problems. There are
    also design mistakes included, along with thoughtful ways out of trouble.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue with academic books is that they are wordy and hard to read. I
    have strived to take a dry subject and avoid being boring. I realize that nobody
    intentionally writes a boring book. Unfortunately, many have succeeded. I think
    the main cause of this boredom is how a lot of authors in technology view the
    task of writing a book. I think a lot of authors write books to prove how smart
    they are. These tend to be very academic. They are built to impress other academics.
    That’s great! The world needs academics. Most developers are not professional
    academics. I dare say, a great many developers have never taken a formal CS course.
    My aim in writing this book isn’t to prove I’m smart or capable. My wife would
    tell you that I am obnoxiously self-deprecating. Instead, my aim is to help you
    over the wall that is keeping you from moving to the next level in your coding.
    I had to climb this wall by myself, and for me, it wasn’t easy. However, if I
    can do it, you can too, with my help.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a dry academic treatment, this book presents a story that could actually
    happen in the real world. There’s just enough light science fiction involved to
    make it “just a story.” The circumstances in the story, though, are very real,
    and you’ll recognize them, even if you have a few years in the field.
  prefs: []
  type: TYPE_NORMAL
- en: On that point, I want to make a few things clear. The story in this book is
    fiction. While I am a **fantastic** software engineer, I am not a roboticist or
    a mechanical engineer, nor am I a qualified bicycle mechanic. At several points
    in the coming story, you may need to suspend your disbelief if these subjects
    are in your wheelhouse.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for anyone who wants to become a better software developer. I wish
    I could get away with just saying that, but I probably can’t. Let me add a few
    thoughts on who will benefit from this book.
  prefs: []
  type: TYPE_NORMAL
- en: The easy answer is what I would call *mid-level* developers. These are developers
    who have a few years of experience with C# and are very comfortable with the basic
    principles of object-oriented programming. Ideally, you’ve seen a few UML class
    diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Another beneficiary of this book is a student who is learning C#. If you’re
    even remotely comfortable with basic OOP concepts, such as inheritance and composition,
    and you know your way around an **integrated development environment** (**IDE**),
    I want you to read this book. Sure, the mid-level developer might have an easier
    time, but learning patterns and SOLID principles will give you a strong foundation.
    You might avoid picking up some bad habits, or correct those you’ve already learned.
  prefs: []
  type: TYPE_NORMAL
- en: I also encourage you to read this book if you’re a recent graduate of either
    a university or a code boot camp. If you haven’t done a lot of C# work, but you’ve
    worked in other languages such as Java, C++, Python, or JavaScript, you are invited
    to read this book as well. I’ve tried to give you a bit of a boost by including
    a lengthy primer on C# and object-oriented programming concepts in [*Appendix
    1*](B18605_Appendix_1.xhtml#_idTextAnchor178) of this book.
  prefs: []
  type: TYPE_NORMAL
- en: There is one group I want to reach most of all.
  prefs: []
  type: TYPE_NORMAL
- en: I especially want to encourage self-taught developers like myself. Those in
    this camp tend to have learned only what is absolutely necessary as a means of
    surviving your current sprint. If your teachers are YouTube and the blogosphere,
    chances are you will readily recognize the anti-patterns found in [*Chapter 1*](B18605_01.xhtml#_idTextAnchor016),
    because by now, you’ve probably committed every sin relevant to software engineering.
    I only know this because I have too. As such, I know you stand to benefit the
    most from reading this book.
  prefs: []
  type: TYPE_NORMAL
- en: As I said, this book is for anyone who wants to become a better software developer.
    I guess I should have just stuck with that.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18605_01.xhtml#_idTextAnchor016), *There’s a Big Ball of Mud
    on Your Plate of Spaghetti*: Before we dive into patterns, let’s dive into why
    we need them. The world of software development is very messy, but it doesn’t
    have to be. The mess comes from a set of degenerative forces in our work that
    you will surely recognize.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18605_02.xhtml#_idTextAnchor036), *Prepping For Practical Real-World
    Applications of Patterns in C#*: To defeat the degenerative forces mentioned in
    [*Chapter 1*](B18605_01.xhtml#_idTextAnchor016), you’re going to have to step
    up your game. This chapter presents some rules and principles. If you can adhere
    to them, you will have the discipline needed to use design patterns to their greatest
    effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18605_03.xhtml#_idTextAnchor063), *Getting Creative with Creational
    Patterns*: Now that you are thoroughly prepared, this chapter introduces our story.
    It covers patterns designed to make the instantiation of your classes more robust
    and more flexible. After reading this chapter, you’ll never look at the `new`
    keyword the same way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18605_04.xhtml#_idTextAnchor078), *Fortify Your Code with Structural
    Patterns*: This chapter covers techniques you can use to structure your classes
    for maximum flexibility while honoring the SOLID principles covered in [*Chapter
    2*](B18605_02.xhtml#_idTextAnchor036).'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18605_05.xhtml#_idTextAnchor089), *Wrangling Problem Code by
    Applying Behavioral Patterns*: Got algorithms? You need a flexible set of patterns
    in order to maximize their effectiveness and flexibility. You need behavioral
    patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18605_06.xhtml#_idTextAnchor110), *Step Away from the IDE! Designing
    with Patterns Before You Code*: In this chapter, we consider ways to design our
    code with patterns before we write a single line in our IDE. After an unfortunate
    turn of events in our story, we find our company drastically and rapidly changing
    direction. We need a new product design, and we need it last week! Let’s draw
    our designs in UML first! This saves a lot of time and energy and prevents the
    possibility of some pointy-haired boss telling us to ship a prototype.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18605_07.xhtml#_idTextAnchor136), *Nothing Left but the Typing
    – Implementing the Wheelchair Project*: In the last chapter, we came up with an
    elegant set of design diagrams. In this chapter, we do the typing. You’ll implement
    the same patterns you learned earlier in the book, but this time, you’ll use them
    in concert with each other on a real-world project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18605_08.xhtml#_idTextAnchor152), *Now You Know Some Patterns.
    What Next?*: We’ve had a lot of fun learning patterns so far, but this is only
    the tip of the iceberg. There are patterns everywhere! They aren’t limited to
    the practice of OOP. In this chapter, we cover the GoF patterns we didn’t cover
    in our story.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 9*, [*Appendix 1*](B18605_Appendix_1.xhtml#_idTextAnchor178) *– A
    Brief Review of OOP Principles in C#*: This appendix is designed for those who
    are new to C# or maybe haven’t used it in a while, or are coming from another
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 10*, [*Appendix 2*](B18605_Appendix_2.xhtml#_idTextAnchor204) *– A
    Primer on the Unified Modeling Language*: The Unified Modeling Language is a documentation
    convention used by software developers. It defines the structure of the pattern
    design diagrams used throughout the book. While UML has 14 different diagram types,
    we really only use class diagrams. Most presentations on patterns have two diagrams.
    I draw a generic one, and a second diagram that mirrors the project code. This
    appendix shows you the conventions used in the diagrams.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the most out of this book you should be familiar with C#. You need to
    be competent in using one of the three popular IDEs: Visual Studio, Rider, or
    Visual Studio Code. You should also understand basic object-oriented programming
    principles such as abstraction, inheritance, encapsulation, and composition.'
  prefs: []
  type: TYPE_NORMAL
- en: I don’t spend very much time covering how to use your IDE in this book. However,
    I do include [*Appendix 1*](B18605_Appendix_1.xhtml#_idTextAnchor178), which covers
    how to create a project just in case you’re rusty. This book isn’t designed to
    be a step-by-step guide through a set of projects. The code in the sample projects
    doesn’t matter. We’re focusing on the structure of the code, rather than the content
    of the classes.
  prefs: []
  type: TYPE_NORMAL
- en: The projects in this book are all either command-line or library projects. We
    won’t be working with any frontend or user interface code. This is done to reduce
    the level of noise in the projects. I want you focused on the structure of the
    classes, not what is inside them, nor even what the program is really doing.
  prefs: []
  type: TYPE_NORMAL
- en: I used Windows 10 to create the code in this book. If you want to follow along
    with the code in the book, you can probably use macOS or Linux. However, I don’t
    cover those operating systems explicitly, nor do I test the sample code in operating
    systems other than Windows.
  prefs: []
  type: TYPE_NORMAL
- en: If you intend to code along with our book’s heroes, you’ll need to set up your
    computer with an appropriate IDE, and .NET Core 6 or later. I used Rider as my
    IDE, but I verified the code in Visual Studio 2022 and Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in the book** | **Operating system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| C# 10 | Windows |'
  prefs: []
  type: TYPE_TB
- en: '| .NET Core 6 | Windows |'
  prefs: []
  type: TYPE_TB
- en: '| Rider, Visual Studio, or Visual Studio Code | Windows |'
  prefs: []
  type: TYPE_TB
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: I strongly encourage you to type the code from the book by hand. You’ll learn
    more by typing it out, by making mistakes, and then fixing them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can download the example code files for this book from GitHub at [https://github.com/Kpackt/Real-World-Implementation-of-C-Design-Patterns](https://github.com/Kpackt/Real-World-Implementation-of-C-Design-Patterns).
    Please note that GitHub won’t allow us to use the # character in C# so the name
    of the repository is slightly misleading. If there’s an update to the code, it
    will be updated in the GitHub repository.'
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: This book has a companion website developed by the author. You can find it at
    [https://csharppatterns.dev](https://csharppatterns.dev).
  prefs: []
  type: TYPE_NORMAL
- en: Download the images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/3KWzG](https://packt.link/3KWzG).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “Kitty starts by creating an abstraction for what
    the builders will be producing – that is, the product. She creates an interface
    called `IBicycleProduct`.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Real-World Implementation of C# Design Patterns*, we’d love
    to hear your thoughts! Please [click here to go straight to the Amazon review
    page](https://packt.link/r/1-803-24273-6) for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/part-1-big-ball-of-mud-on-you-plate-of-spaghetti-2-bw.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Part 1: Introduction to Patterns (Pasta) and Antipatterns (Antipasta)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin *Part 1* by describing what patterns are and where they came from
    and giving an overview of how they work and why you’d want to learn them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part covers the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18605_01.xhtml#_idTextAnchor016), *There’s a Big Ball of Mud
    on Your Plate of Spaghetti*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18605_02.xhtml#_idTextAnchor036), *Prepping for Practical Real-World
    Applications of Patterns in C#*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
