- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Building and Securing Web Services Using Minimal APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用最小API构建和保障Web服务
- en: This chapter is about building and securing web services using ASP.NET Core
    Minimal APIs. This includes implementing techniques to protect a web service from
    attacks as well as authentication and authorization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍使用ASP.NET Core最小API构建和保障Web服务。这包括实施保护Web服务免受攻击的技术以及身份验证和授权。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Building web services using ASP.NET Core Minimal APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core最小API构建Web服务
- en: Relaxing the same origin security policy using CORS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CORS放宽同源安全策略
- en: Preventing denial of service attacks using rate limiting
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用速率限制预防拒绝服务攻击
- en: Improving startup time and resources using native AOT
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原生AOT改进启动时间和资源
- en: Understanding identity services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解身份服务
- en: Building web services using ASP.NET Core Minimal APIs
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core最小API构建Web服务
- en: 'In older versions of ASP.NET Core, you would build a web service using controllers
    with an action method for each endpoint, a bit like building a website with ASP.NET
    Core MVC using controllers and models but without the views. Since .NET 6, you
    have another, often better, choice: **ASP.NET Core** **Minimal APIs**.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core的旧版本中，您会使用控制器构建Web服务，每个端点都有一个操作方法，有点像使用ASP.NET Core MVC和控制器以及模型构建网站，但没有视图。从.NET
    6开始，您有另一个通常更好的选择：**ASP.NET Core** **最小API**。
- en: Benefits of Minimal API-based web services
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小API基于Web服务的优势
- en: 'In earlier versions of ASP.NET Core, implementing even a simple web service
    required a lot of boilerplate code compared to alternative web development platforms.
    For example, a minimal `Hello World` web service implementation that has a single
    endpoint that returns plain text could be implemented using **Express.js** in
    just nine lines of code, as shown in the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core的早期版本中，与替代Web开发平台相比，实现一个简单的Web服务需要大量的样板代码。例如，一个最小的`Hello World`
    Web服务实现，它有一个返回纯文本的单个端点，可以使用**Express.js**仅用九行代码实现，如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With ASP.NET Core 5 or earlier, that would require more than fifty lines of
    code!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core 5或更早版本中，这需要超过五十行代码！
- en: 'The equivalent using ASP.NET Core 6 or later using ASP.NET Core Minimal APIs
    is now only five lines of code and six lines of configuration, as shown in the
    following two code blocks:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core 6或更高版本，现在只需五行代码和六行配置即可，如下所示的两个代码块：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The platform is specified in the project file, and the implicit `using` statements
    SDK feature does some heavy lifting. It is enabled by default, as shown highlighted
    in the following markup:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 平台在项目文件中指定，隐式`using`语句SDK功能执行一些繁重的工作。默认情况下启用，如下所示，在以下标记中突出显示：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Good Practice**: Another benefit of minimal APIs is that they do not use
    dynamically generated code, unlike controller-based Web APIs. This allows them
    to use native AOT to produce smaller, faster services that are better for implementing
    and hosting microservices in containers. We will cover native AOT with minimal
    APIs later in this chapter. Whenever possible, implement your web services using
    minimal APIs instead of controllers.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：最小API的另一个好处是它们不使用动态生成的代码，与基于控制器的Web API不同。这使得它们可以使用原生AOT生成更小、更快的服务，这对于在容器中实现和托管微服务更有利。我们将在本章后面介绍原生AOT与最小API。尽可能使用最小API而不是控制器来实现您的Web服务。'
- en: Understanding Minimal API route mappings
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解最小API路由映射
- en: 'The `WebApplication` instance has methods that you can call to map a route
    to a lambda expression or statement:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebApplication`实例具有您可以调用的方法，用于将路由映射到lambda表达式或语句：'
- en: '`MapGet`: Map a route to a `GET` request to retrieve an entity.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapGet`: 将路由映射到`GET`请求以检索实体。'
- en: '`MapPost`: Map a route to a `POST` request to insert an entity.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapPost`: 将路由映射到`POST`请求以插入实体。'
- en: '`MapPut`: Map a route to a `PUT` request to update an entity.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapPut`: 将路由映射到`PUT`请求以更新实体。'
- en: '`MapPatch`: Map a route to a `PATCH` request to update an entity.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapPatch`: 将路由映射到`PATCH`请求以更新实体。'
- en: '`MapDelete`: Map a route to a `DELETE` request to delete an entity.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapDelete`: 将路由映射到`DELETE`请求以删除实体。'
- en: '`MapMethods`: Map a route to any other HTTP method or methods, for example,
    `CONNECT` or `HEAD`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapMethods`: 将路由映射到任何其他HTTP方法或方法，例如`CONNECT`或`HEAD`。'
- en: 'For example, you might want to map an HTTP `GET` request for the relative path
    `api/customers` to a delegate defined by a lambda expression or a function that
    returns a JSON document containing a list of customers, and equivalent mappings
    to insert and delete, as shown in the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能希望将相对路径 `api/customers` 的 HTTP `GET` 请求映射到由 lambda 表达式或返回包含客户列表的 JSON
    文档的函数定义的委托，以及插入和删除的等效映射，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You might want to map an HTTP `CONNECT` request for the relative path `api/customers`
    to a lambda statement block, as shown in the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望将相对路径 `api/customers` 的 HTTP `CONNECT` 请求映射到 lambda 语句块，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you have multiple endpoints that share a common relative path, then you
    can define a **route group**. The `MapGroup` method was introduced in .NET 7:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个共享相同相对路径的端点，则可以定义一个 **路由组**。`MapGroup` 方法在 .NET 7 中引入：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**More Information**: You can learn more about mapping routes at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于路由映射的信息：[https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers).'
- en: Understanding parameter mapping
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解参数映射
- en: 'The delegate can have parameters defined that can be set automatically. Although
    most mappings can be configured without explicitly being specified, you can optionally
    use attributes to define where ASP.NET Core Minimal APIs should set the parameter
    values from:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 委托可以定义参数，这些参数可以自动设置。尽管大多数映射可以在不显式指定的情况下进行配置，但您可以选择使用属性来定义 ASP.NET Core 最小 API
    应从何处设置参数值：
- en: '`[FromServices]`: The parameter will be set from the registered dependency
    services.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[FromServices]`：参数将从已注册的依赖服务设置。'
- en: '`[FromRoute]`: The parameter will be set from a matching named route segment.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[FromRoute]`：参数将从匹配的命名路由段设置。'
- en: '`[FromQuery]`: The parameter will be set from a matching named query string
    parameter.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[FromQuery]`：参数将从匹配的命名查询字符串参数设置。'
- en: '`[FromBody]`: The parameter will be set from the body of the HTTP request.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[FromBody]`：参数将从 HTTP 请求体设置。'
- en: 'For example, to update an entity in a database, you would need a database context
    to be retrieved from the registered dependency services, an identifier passed
    as a query string or route segment, and the new entity in the body of the request,
    as shown in the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要更新数据库中的实体，您需要从已注册的依赖服务中检索数据库上下文，将标识符作为查询字符串或路由段传递，以及请求体中的新实体，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Understanding return values
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解返回值
- en: 'A minimal API service can return data in some common formats, as shown in *Table
    8.1*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最小 API 服务可以以一些常见的格式返回数据，如下表 8.1 所示：
- en: '| **Type** | **Lambda** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **Lambda** |'
- en: '| Plain text | `() => "Hello World!"``() => Results.Text("Hello World!")` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 纯文本 | `() => "Hello World!"``() => Results.Text("Hello World!")` |'
- en: '| JSON document | `() => new { FirstName = "Bob", LastName = "Jones" }``()
    => Results.Json(new { FirstName = "Bob", LastName = "Jones" })` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| JSON 文档 | `() => new { FirstName = "Bob", LastName = "Jones" }``() => Results.Json(new
    { FirstName = "Bob", LastName = "Jones" })` |'
- en: '| `IResult` with status codes | `() => Results.Ok(new { FirstName = "Bob",
    LastName = "Jones" })``() => Results.NoContent()``() => Results.Redirect("new/path")``()
    => Results.NotFound()``() => Results.BadRequest()``() => Results.Problem()``()
    => Results.StatusCode(405)` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 带状态码的 `IResult` | `() => Results.Ok(new { FirstName = "Bob", LastName = "Jones"
    })``() => Results.NoContent()``() => Results.Redirect("new/path")``() => Results.NotFound()``()
    => Results.BadRequest()``() => Results.Problem()``() => Results.StatusCode(405)`
    |'
- en: '| File | `() => Results.File("/path/filename.ext")` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 文件 | `() => Results.File("/path/filename.ext")` |'
- en: 'Table 8.1: Examples of minimal API return values'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.1：最小 API 返回值的示例
- en: Documenting a Minimal APIs service
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录 Minimal APIs 服务
- en: 'You can call additional methods as many times as you need to specify what return
    types and status codes can be expected from an endpoint, for example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据需要调用额外的方法多次，以指定可以从端点期望的返回类型和状态码，例如：
- en: '`Produces<T>(StatusCodes.Status200OK)`: When successful, this route returns
    a response containing a type `T` and status code `200`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Produces<T>(StatusCodes.Status200OK)`：当成功时，此路由返回包含类型 `T` 和状态码 `200` 的响应。'
- en: '`Produces(StatusCodes.Status404NotFound)`: When no match for the route is found,
    this route returns an empty response and status code 404.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Produces(StatusCodes.Status404NotFound)`：当找不到路由匹配项时，此路由返回空响应和状态码 404。'
- en: Setting up an ASP.NET Core Web API project
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 ASP.NET Core Web API 项目
- en: First, we will create a simple ASP.NET Core Web API project that we will later
    protect using various techniques like rate limiting, CORS, and authentication
    and authorization.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个简单的 ASP.NET Core Web API 项目，稍后我们将使用各种技术来保护它，例如速率限制、CORS、身份验证和授权。
- en: 'The API for this web service is defined as shown in *Table 8.2*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该 web 服务的 API 定义如下所示 *表 8.2*：
- en: '| **Method** | **Path** | **Request body** | **Response body** | **Success
    code** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **路径** | **请求体** | **响应体** | **成功代码** |'
- en: '| `GET` | `/` | None | Hello World! | `200` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/` | None | Hello World! | `200` |'
- en: '| `GET` | `/api/products` | None | Array of in-stock `Product` objects | `200`
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/api/products` | None | 库存 `Product` 对象数组 | `200` |'
- en: '| `GET` | `/api/products/outofstock` | None | Array of out-of-stock `Product`
    objects | `200` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/api/products/outofstock` | None | 已售罄 `Product` 对象数组 | `200` |'
- en: '| `GET` | `/api/products/discontinued` | None | Array of discontinued `Product`
    objects | `200` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/api/products/discontinued` | None | 已停产的 `Product` 对象数组 | `200`
    |'
- en: '| `GET` | `/api/products/{id}` | None | `Product` object | `200` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/api/products/{id}` | None | `Product` 对象 | `200` |'
- en: '| `GET` | `/api/products/{name}` | None | Array of `Product` objects that contain
    the name | `200` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/api/products/{name}` | None | 包含名称的 `Product` 对象数组 | `200` |'
- en: '| `POST` | `/api/products` | `Product` object (no `Id` value) | `Product` object
    | `201` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | `/api/products` | `Product` 对象（无 `Id` 值） | `Product` 对象 | `201`
    |'
- en: '| `PUT` | `/api/products/{id}` | `Product` object | None | `204` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` | `/api/products/{id}` | `Product` 对象 | None | `204` |'
- en: '| `DELETE` | `/api/products/{id}` | None | None | `204` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | `/api/products/{id}` | None | None | `204` |'
- en: 'Table 8.2: API methods implemented by the example project'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.2：示例项目实现的 API 方法
- en: 'Let’s go:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: Use your preferred code editor to create a new solution named `Chapter08`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器创建一个名为 `Chapter08` 的新解决方案。
- en: 'Add a Web API project, as defined in the following list:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个如以下列表中定义的 Web API 项目：
- en: Project template: **ASP.NET Core Web API** / `webapi`
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web API** / `webapi`
- en: Solution file and folder: `Chapter08`
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter08`
- en: Project file and folder: `Northwind.WebApi.Service`
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹： `Northwind.WebApi.Service`
- en: '**Authentication type**: **None**.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证类型**：**无**。'
- en: '**Configure for HTTPS**: Selected.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置 HTTPS**：已选择。'
- en: '**Enable Docker**: Cleared.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 Docker**：已清除。'
- en: '**Enable OpenAPI support**: Selected.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 OpenAPI 支持**：已选择。'
- en: '**Do not use top-level statements**: Cleared.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不使用顶级语句**：已清除。'
- en: '**Use controllers**: Cleared.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用控制器**：已清除。'
- en: To create a Web API project using minimal APIs with `dotnet new` for pre-.NET
    8 SDKs, you must use either the `-minimal` switch or the `--use-minimal-apis`
    switch. For .NET 8 SDKs, minimal APIs are the default and to use controllers,
    you must specify the `--use-controllers` or `-controllers` switch.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用 `dotnet new` 为预-.NET 8 SDK 创建使用最小 API 的 Web API 项目，您必须使用 `-minimal` 开关或
    `--use-minimal-apis` 开关。对于 .NET 8 SDK，最小 API 是默认的，要使用控制器，您必须指定 `--use-controllers`
    或 `-controllers` 开关。
- en: '**Warning!** If you are using JetBrains Rider, its user interface might not
    yet have an option to create a web API project using minimal APIs. I recommend
    creating the project using `dotnet new` and then adding the project to your solution.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！**如果您正在使用 JetBrains Rider，其用户界面可能还没有创建使用最小 API 的 Web API 项目的选项。我建议使用 `dotnet
    new` 创建项目，然后将项目添加到您的解决方案中。'
- en: 'Add a project reference to the Northwind database context project for SQL Server
    that you created in *Chapter 3*, *Building Entity Models for SQL Server Using
    EF Core*, as shown in the following markup:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您在 *第 3 章* 中创建的 Northwind 数据库上下文项目（针对 SQL Server）添加为项目引用，如下所示：
- en: '[PRE7]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The path cannot have a line break. If you did not complete the task of creating
    the class libraries in *Chapter 3*, then download the solution projects from the
    GitHub repository.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径不能有换行符。如果您没有完成在 *第 3 章* 中创建类库的任务，那么请从 GitHub 仓库下载解决方案项目。
- en: 'In the project file, change `invariantGlobalization` to `false`, and treat
    warnings as errors, as shown in the following markup:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，将 `invariantGlobalization` 更改为 `false`，并将警告视为错误，如下所示：
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Explicitly setting invariant globalization to `true` is new in the ASP.NET
    Core Web API project template with .NET 8\. It is designed to make a web service
    non-culture-specific so it can be deployed anywhere in the world and have the
    same behavior. By setting this property to `false`, the web service will default
    to the culture of the current computer it is hosted on. You can read more about
    invariant globalization mode at the following link: [https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md](https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 .NET 8 的 ASP.NET Core Web API 项目模板中，显式设置不变量全球化为 `true` 是新的。它旨在使网络服务不受文化限制，因此可以在世界任何地方部署并具有相同的行为。通过将此属性设置为
    `false`，网络服务将默认为当前托管计算机的文化。你可以在以下链接中了解更多关于不变量全球化模式的信息：[https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md](https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md)
- en: 'At the command prompt or terminal, build the `Northwind.WebApi.Service` project
    to make sure the entity model class library projects outside the current solution
    are properly compiled, as shown in the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，构建 `Northwind.WebApi.Service` 项目，以确保当前解决方案外部的实体模型类库项目被正确编译，如下所示（命令）：
- en: '[PRE9]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `Properties` folder, in `launchSettings.json`, modify the `applicationUrl`
    of the profile named `https` to use port `5081`, as shown highlighted in the following
    configuration:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Properties` 文件夹中，在 `launchSettings.json` 文件中，将名为 `https` 的配置文件的 `applicationUrl`
    修改为使用端口 `5081`，如下所示（高亮显示）的配置：
- en: '[PRE10]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Visual Studio 2022 will read this settings file and automatically run a web
    browser if `launchBrowser` is `true`, and then navigate to the `applicationUrl`
    and `launchUrl`. Visual Studio Code and `dotnet run` will not, so you will need
    to run a web browser and navigate manually to [https://localhost:5081/swagger](https://localhost:5081/swagger).
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio 2022 将读取此设置文件，如果 `launchBrowser` 设置为 `true`，则自动运行一个网络浏览器，然后导航到
    `applicationUrl` 和 `launchUrl`。Visual Studio Code 和 `dotnet run` 不会这样做，因此你需要手动运行一个网络浏览器并手动导航到
    [https://localhost:5081/swagger](https://localhost:5081/swagger)。
- en: 'In `Program.cs`, delete the statements about the weather service and replace
    them with statements to import the namespace to add the `NorthwindContext` to
    configured services, as shown highlighted in the following code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，删除关于天气服务的语句，并用导入命名空间以将 `NorthwindContext` 添加到配置服务的语句替换，如下所示（高亮显示）：
- en: '[PRE11]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add a new class file named `WebApplication.Extensions.cs`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `WebApplication.Extensions.cs` 的新类文件。
- en: '**Good Practice**: Instead of cluttering your `Program.cs` file with hundreds
    of lines of code, define extension methods for the common types that are configured
    in minimal APIs, like `WebApplication` and `IServiceCollection`.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：不要在 `Program.cs` 文件中添加数百行代码，而是为在最小 API 中配置的常见类型定义扩展方法，如 `WebApplication`
    和 `IServiceCollection`。'
- en: 'In `WebApplication.Extensions.cs`, import namespaces for controlling HTTP results,
    binding a parameter to a dependency service, and working with `Northwind` entity
    models, and then define an extension method for the `WebApplication` class to
    configure responses to all the HTTP `GET` requests documented in our API table,
    as shown in the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 文件中，导入用于控制 HTTP 结果、将参数绑定到依赖服务以及与 `Northwind`
    实体模型一起工作的命名空间，然后定义一个扩展方法为 `WebApplication` 类配置对所有记录在我们 API 表中的 HTTP `GET` 请求的响应，如下所示：
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class to configure a response to the HTTP `POST` request documented in the API
    table, as shown in the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 文件中，为 `WebApplication` 类定义一个扩展方法，以配置对 API 表中记录的
    HTTP `POST` 请求的响应，如下所示：
- en: '[PRE13]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class to configure a response to the HTTP `PUT` request documented in the API
    table, as shown in the following code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 文件中，为 `WebApplication` 类定义一个扩展方法，以配置对 API 表中记录的
    HTTP `PUT` 请求的响应，如下所示：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class to configure a response to the HTTP `DELETE` request documented in the API
    table, as shown in the following code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 文件中，为 `WebApplication` 类定义一个扩展方法，以配置对 API 表中记录的
    HTTP `DELETE` 请求的响应，如下所示：
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In `Program.cs`, import the namespace to use the extension methods you just
    defined, as shown in the following code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，导入你刚刚定义的扩展方法所使用的命名空间，如下所示：
- en: '[PRE16]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In `Program.cs`, before the call to `app.Run()`, call your custom extension
    methods to map `GET`, `POST`, `PUT`, and `DELETE` requests, noting that you can
    override the default page size of 10 entities when requesting all products, as
    shown in the following code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在调用 `app.Run()` 之前，调用你的自定义扩展方法来映射 `GET`、`POST`、`PUT` 和 `DELETE`
    请求，注意当你请求所有产品时，你可以覆盖默认的 10 个实体页面大小，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In `Program.cs`, make sure the last statement in the file runs the web app,
    as shown in the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，确保文件中的最后一个语句运行了网络应用，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Testing web services using Swagger
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Swagger 测试网络服务
- en: 'Now we can start the web service, see its documentation using Swagger, and
    perform basic manual testing:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动网络服务，使用 Swagger 查看其文档，并进行基本的手动测试：
- en: If your database server is not running (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的数据库服务器没有运行（例如，因为你正在 Docker、虚拟机或云中托管它），那么请确保启动它。
- en: 'Start the web service project using the `https` profile:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 配置文件启动网络服务项目：
- en: If you are using Visual Studio 2022, then select the **https** profile in the
    drop-down list and then navigate to **Debug** | **Start Without Debugging** or
    press *Ctrl* + *F5*. A web browser should navigate to the Swagger documentation
    web page automatically.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio 2022，那么在下拉列表中选择 **https** 配置文件，然后导航到 **Debug** | **Start
    Without Debugging** 或按 *Ctrl* + *F5*。网页浏览器应该会自动导航到 Swagger 文档网页。
- en: 'If you are using Visual Studio Code, then enter the command `dotnet run --launch-profile
    https`, manually start a web browser, and navigate to the Swagger documentation
    web page: [https://localhost:5081/swagger](https://localhost:5081/swagger).'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio Code，那么输入命令 `dotnet run --launch-profile https`，手动启动一个网页浏览器，并导航到
    Swagger 文档网页：[https://localhost:5081/swagger](https://localhost:5081/swagger)。
- en: On Windows, if prompted to do so, you will have to set Windows Defender Firewall
    to allow access to your local web service.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Windows 上，如果需要，你必须将 Windows Defender 防火墙设置为允许访问你的本地网络服务。
- en: 'In the console or terminal, note the information about your web service, as
    shown in the following output:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台或终端中，注意有关你的网络服务的信息，如下面的输出所示：
- en: '[PRE19]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In your web browser, note the Swagger documentation, as shown in *Figure 8.1*:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中，注意 Swagger 文档，如图 *8.1* 所示：
- en: '![](img/B19587_08_01.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_08_01.png)'
- en: 'Figure 8.1: Swagger documentation for the Northwind Web API service'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：Northwind Web API 服务的 Swagger 文档
- en: Click **GET /api/products** to expand that section.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **GET /api/products** 以展开该部分。
- en: Click the **Try it out** button, note the optional query string parameter named
    **page**, and then click the **Execute** button.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Try it out** 按钮，注意可选的查询字符串参数名为 **page**，然后点击 **Execute** 按钮。
- en: 'Note the response includes the first ten products that are in stock and not
    discontinued: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `10`, `11`, and `12`.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意响应包括库存中且未停售的前十种产品：`1`、`2`、`3`、`4`、`6`、`7`、`8`、`10`、`11` 和 `12`。
- en: For the **page** parameter, enter `3`, and then click the **Execute** button.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **page** 参数，输入 `3`，然后点击 **Execute** 按钮。
- en: 'Note the response includes the third page of ten products that are in stock
    and are not discontinued: `25`, `26`, `27`, `30`, `32`, `33`, `34`, `35`, `36`,
    and `37`.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意响应包括库存中且未停售的第三页的十种产品：`25`、`26`、`27`、`30`、`32`、`33`、`34`、`35`、`36` 和 `37`。
- en: Click **GET /api/products** to collapse that section.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **GET /api/products** 以折叠该部分。
- en: Try executing the **GET /api/products/outofstock** path and note it returns
    one product, **31 Gorgonzola Telino**, which has zero units in stock and is not
    discontinued.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试执行 **GET /api/products/outofstock** 路径，并注意它返回了一种产品，**31 Gorgonzola Telino**，库存为零且未停售。
- en: Try executing the **GET /api/products/discontinued** path and note it returns
    eight products, `5`, `9`, `17`, `24`, `28`, `29`, `42`, and `53`, which all have
    their `Discontinued` properties set to `true`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试执行 **GET /api/products/discontinued** 路径，并注意它返回了八种产品，`5`、`9`、`17`、`24`、`28`、`29`、`42`
    和 `53`，它们的 `Discontinued` 属性都设置为 `true`。
- en: Click **GET /api/products/{id}** to expand that section.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **GET /api/products/{id}** 以展开该部分。
- en: 'Click **Try it out**, enter the required **id** parameter as `77`, click **Execute**,
    and note the response contains the product named **Original Frankfurter grüne
    Soße**, as shown in the following JSON document:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Try it out**，输入所需的 **id** 参数为 `77`，点击 **Execute**，并注意响应包含名为 **Original
    Frankfurter grüne Soße** 的产品，如下面的 JSON 文档所示：
- en: '[PRE20]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Click **GET /api/products/{id}** to collapse that section.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **GET /api/products/{id}** 以折叠该部分。
- en: Click **GET /api/products/{name}** to expand that section.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **GET /api/products/{name}** 来展开该部分。
- en: Click **Try it out**, enter the required **name** parameter as `man`, click
    **Execute**, and note the response contains the products named **Queso Manchego
    La Pastora** and **Manjimup Dried Apples**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **尝试一下**，输入所需的 **name** 参数为 `man`，点击 **执行**，并注意响应包含名为 **Queso Manchego La
    Pastora** 和 **Manjimup Dried Apples** 的产品。
- en: Leave the web service running.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持 Web 服务运行。
- en: Testing web services with code editor tools
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用代码编辑器工具测试 Web 服务
- en: Using the Swagger user interface to test web services can quickly get clumsy.
    A better tool is either the Visual Studio Code extension named **REST Client**
    or the **Endpoints Explorer** and `.http` file support available with Visual Studio
    2022 version 17.6 or later.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Swagger 用户界面测试 Web 服务可能会变得繁琐。更好的工具是名为 **REST Client** 的 Visual Studio Code
    扩展或 Visual Studio 2022 版本 17.6 或更高版本提供的 **Endpoints Explorer** 和 `.http` 文件支持。
- en: '**More Information**: You can learn about Visual Studio 2022 and its HTTP editor
    at the following link: [https://learn.microsoft.com/en-us/aspnet/core/test/http-files](https://learn.microsoft.com/en-us/aspnet/core/test/http-files).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：你可以在以下链接了解 Visual Studio 2022 及其 HTTP 编辑器：[https://learn.microsoft.com/en-us/aspnet/core/test/http-files](https://learn.microsoft.com/en-us/aspnet/core/test/http-files)。'
- en: JetBrains Rider has a similar tool window named **Endpoints**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains Rider 有一个类似的工具窗口名为 **Endpoints**。
- en: 'If you are using JetBrains Rider, you can read about its tools for HTTP files
    at the following link: [https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html](https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html).
    It is slightly different from the other two code editors. In particular, how Rider
    handles setting variables is more awkward, as shown at the following link: [https://www.jetbrains.com/help/rider/Exploring_HTTP_Syntax.html#example-working-with-environment-files](https://www.jetbrains.com/help/rider/Exploring_HTTP_Syntax.html#example-working-with-environment-files).
    You might prefer to use Visual Studio Code with the REST Client extension for
    this section.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 JetBrains Rider，你可以在以下链接了解其 HTTP 文件工具：[https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html](https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html)。它与另外两个代码编辑器略有不同。特别是，Rider
    处理设置变量的方式更为繁琐，如图所示：[https://www.jetbrains.com/help/rider/Exploring_HTTP_Syntax.html#example-working-with-environment-files](https://www.jetbrains.com/help/rider/Exploring_HTTP_Syntax.html#example-working-with-environment-files)。你可能更喜欢使用带有
    REST Client 扩展的 Visual Studio Code 来处理这一部分。
- en: 'Let’s see how these help us test a web service:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些工具如何帮助我们测试 Web 服务：
- en: 'Make sure you have the web service testing tools installed:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经安装了 Web 服务测试工具：
- en: If you are using Visual Studio 2022, then make sure you have version 17.6 or
    later (released in May 2023).
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio 2022，请确保你安装的版本为 17.6 或更高版本（2023 年 5 月发布）。
- en: If you are using Visual Studio Code, then make sure you have installed the REST
    Client extension by Huachao Mao (`humao.rest-client`).
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio Code，请确保你已经安装了由 Huachao Mao 开发的 REST Client 扩展（`humao.rest-client`）。
- en: If you are using Visual Studio 2022, navigate to **View** | **Other Windows**
    | **Endpoints Explorer**, and note the current project is scanned for potential
    Web API endpoints, as shown in *Figure 8.2*.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio 2022，导航到 **视图** | **其他窗口** | **Endpoints Explorer**，并注意当前项目正在扫描潜在的
    Web API 端点，如图 8.2 所示。
- en: In your preferred code editor, start the `Northwind.WebApi.Service` project
    using the `https` profile (if it is not already running) and leave it running.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你偏好的代码编辑器中，使用 `https` 配置启动 `Northwind.WebApi.Service` 项目（如果尚未运行），并保持其运行。
- en: In the `apps-services-net8` folder, if it does not already exist, create an
    `HttpRequests` folder.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `apps-services-net8` 文件夹中，如果尚不存在，创建一个 `HttpRequests` 文件夹。
- en: 'In the `HttpRequests` folder, create a file named `webapi-get-products.http`
    and modify its contents to declare a variable to hold the base address of the
    Web API service products endpoint and a request to get the first page of ten products,
    as shown in the following code:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HttpRequests` 文件夹中，创建一个名为 `webapi-get-products.http` 的文件，并修改其内容以声明一个变量来保存
    Web API 服务产品端点的基址，以及一个获取前 10 页产品的请求，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Good Practice**: REST Client does not require `GET` at the beginning of a
    request because it will assume `GET` as the default. But at the time of writing,
    Visual Studio’s HTTP editor requires `GET` to be explicitly specified. For now,
    I recommend that you specify the HTTP method for all tools, and I will do so for
    all `.http` files for my books.'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：REST 客户端在请求开始时不要求使用 `GET`，因为它会默认假设为 `GET`。但截至写作时，Visual Studio 的 HTTP
    编辑器需要显式指定 `GET`。因此，我建议您为所有工具指定 HTTP 方法，并且我将为我的所有 `.http` 文件这样做。'
- en: 'Click **Send Request**, and note the response is the same as what was returned
    by Swagger, a JSON document response containing the first ten products that are
    in stock and not discontinued, as shown in Visual Studio 2022 in *Figure 8.2*
    and Visual Studio Code in *Figure 8.3*:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **发送请求**，并注意响应与 Swagger 返回的相同，它是一个包含前十个库存且未停售产品的 JSON 文档响应，如 Visual Studio
    2022 中的 *图 8.2* 和 Visual Studio Code 中的 *图 8.3* 所示：
- en: '![](img/B19587_08_02.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_08_02.png)'
- en: 'Figure 8.2: Visual Studio 2022 getting products from the web API service'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2：Visual Studio 2022 从 Web API 服务获取产品
- en: '![](img/B19587_08_03.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_08_03.png)'
- en: 'Figure 8.3: Visual Studio Code REST Client getting products from the web API
    service'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3：Visual Studio Code REST 客户端从 Web API 服务获取产品
- en: 'In `webapi-get-products.http`, add more requests separated by `###`, as shown
    in the following file:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `webapi-get-products.http` 文件中，通过 `###` 分隔添加更多请求，如下所示：
- en: '[PRE22]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can execute an HTTP request in Visual Studio 2022 by clicking the green
    triangle “play” button, by right-clicking and selecting **Send Request**, or by
    pressing *Ctrl* + *Alt* + *S*. In Visual Studio Code, click **Send Request** above
    each query, or navigate to **View** | **Command Palette** and select **Rest Client:
    Send Request**, or use its keyboard shortcut (*Ctrl* + *Alt* + *R* on Windows).'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '您可以通过点击绿色三角形“播放”按钮、右键单击并选择 **发送请求** 或按 *Ctrl* + *Alt* + *S* 在 Visual Studio
    2022 中执行 HTTP 请求。在 Visual Studio Code 中，点击每个查询上方的 **发送请求**，或导航到 **视图** | **命令面板**
    并选择 **Rest Client: 发送请求**，或使用其快捷键（在 Windows 上为 *Ctrl* + *Alt* + *R*）。'
- en: 'In the `HttpRequests` folder, create a file named `webapi-insert-product.http`
    and modify its contents to contain a **POST** request to insert a new product,
    as shown in the following code:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HttpRequests` 文件夹中，创建一个名为 `webapi-insert-product.http` 的文件，并修改其内容以包含一个用于插入新产品的
    **POST** 请求，如下所示：
- en: '[PRE23]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Click **Send Request**, and note the response indicates that the new product
    was added successfully because the status code is `201`, and its location includes
    its product ID, as shown in *Figure 8.4*:![](img/B19587_08_04.png)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **发送请求**，并注意响应表明新产品已成功添加，因为状态码为 `201`，其位置包括其产品 ID，如 *图 8.4* 所示：![](img/B19587_08_04.png)
- en: 'Figure 8.4: REST Client inserting a new product by calling the web API service'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.4：REST 客户端通过调用 Web API 服务插入新产品
- en: Originally, there were 77 products in the Northwind database. The next product
    ID would be 78\. The actual product ID assigned automatically will depend on whether
    you have previously added any other products, so your assigned number might be
    higher.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 原本，Northwind 数据库中有 77 个产品。下一个产品 ID 将是 78。实际分配的自动产品 ID 将取决于您是否之前添加了其他产品，因此您分配的数字可能更高。
- en: 'In the `HttpRequests` folder, create a file named `webapi-update-product.http`
    and modify its contents to contain a `PUT` request to update the product with
    ID `78` (or whatever number was assigned to your `Harry''s Hamburgers`) with a
    different quantity per unit, unit price, and units in stock, as shown in the following
    code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HttpRequests` 文件夹中，创建一个名为 `webapi-update-product.http` 的文件，并修改其内容以包含一个用于更新产品
    ID 为 `78`（或分配给您的 `Harry's Hamburgers` 的任何数字）的 `PUT` 请求，其中包含不同的每单位数量、单价和库存单位，如下所示：
- en: '[PRE24]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Send the request and note you should get a 204 status code in the response,
    meaning a successful update.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送请求并注意您应该收到一个 204 状态码的响应，表示更新成功。
- en: Confirm the product was updated by executing a `GET` request for the product
    ID.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行针对产品 ID 的 `GET` 请求来确认产品是否已更新。
- en: 'In the `HttpRequests` folder, create a file named `webapi-delete-product.http`
    and modify its contents to contain a `DELETE` request for the new product, as
    shown in the following code:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HttpRequests` 文件夹中，创建一个名为 `webapi-delete-product.http` 的文件，并修改其内容以包含针对新产品的
    `DELETE` 请求，如下所示：
- en: '[PRE25]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note the successful response, as shown in *Figure 8.5*:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意成功响应，如 *图 8.5* 所示：
- en: '![](img/B19587_08_05.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_08_05.png)'
- en: 'Figure 8.5: Deleting a product using the Web API service'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5：使用 Web API 服务删除产品
- en: Send the request again and note the response contains a 404 status code because
    the product has now been deleted.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次发送请求，并注意响应包含 404 状态码，因为产品已经被删除。
- en: Shut down the web server.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭网络服务器。
- en: Excluding paths from OpenAPI documentation
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排除来自 OpenAPI 文档的路径
- en: 'Sometimes you want to have a path that works but is not shown in the Swagger
    documentation. Let’s see how to remove the service base address that returns a
    plain text `Hello World!` response from the Swagger documentation web page:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能想要一个可以工作但不显示在 Swagger 文档中的路径。让我们看看如何从 Swagger 文档网页中移除返回纯文本 `Hello World!`
    响应的服务基本地址：
- en: 'In `WebApplication.Extensions.cs`, for the root path that returns `Hello World`,
    exclude it from the OpenAPI documentation, as shown highlighted in the following
    code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 中，对于返回 `Hello World` 的根路径，将其从 OpenAPI 文档中排除，如下面的代码所示，高亮显示：
- en: '[PRE26]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging and note the path is now not documented.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 配置启动 `Northwind.WebApi.Service` 项目，不进行调试，并注意路径现在没有文档记录。
- en: We have a working web service implemented using ASP.NET Core Minimal APIs. Now
    let’s attack it! (So that we can learn how to prevent those attacks.)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 ASP.NET Core Minimal APIs 实现了一个工作的网络服务。现在让我们攻击它！（这样我们可以学习如何防止这些攻击。）
- en: Visual Studio 2022 scaffolding for Minimal APIs
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio 2022 为 Minimal APIs 提供的脚手架
- en: It is important to learn how to implement a service using minimal APIs from
    scratch so that you properly understand it. But once you know how to do it manually,
    the process can be automated and the boilerplate code can be written for you,
    especially if you are building a web API that wraps an EF Core entity model.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何从头开始使用最小 API 实现服务非常重要，这样您可以正确理解它。但是一旦您知道如何手动操作，这个过程可以自动化，并且可以为您编写样板代码，尤其是如果您正在构建一个包装
    EF Core 实体模型的网络 API。
- en: 'For example, Visual Studio 2022 has a project item template named **API with
    read/write endpoints, using Entity Framework** that allows you to select:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Visual Studio 2022 有一个名为 **使用 Entity Framework 的 API 读写端点**的项目项模板，允许您选择：
- en: An entity model class like `Customer`.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实体模型类，例如 `Customer`。
- en: An endpoints class that will contain all the mapping methods.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个端点类，它将包含所有映射方法。
- en: A `DbContext`-derived class like `NorthwindContext`.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个由 `DbContext` 派生的类，例如 `NorthwindContext`。
- en: A database provider like SQLite or SQL Server.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数据库提供程序，例如 SQLite 或 SQL Server。
- en: '**More Information**: You can learn more about this project item template at
    the following link: [https://devblogs.microsoft.com/visualstudio/web-api-development-in-visual-studio-2022/#scaffolding-in-visual-studio/](https://devblogs.microsoft.com/visualstudio/web-api-development-in-visual-studio-2022/#scaffolding-in-visual-studio/).'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于此项目项模板的信息：[https://devblogs.microsoft.com/visualstudio/web-api-development-in-visual-studio-2022/#scaffolding-in-visual-studio/](https://devblogs.microsoft.com/visualstudio/web-api-development-in-visual-studio-2022/#scaffolding-in-visual-studio/)。'
- en: Relaxing the same origin security policy using CORS
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CORS 放宽同源安全策略
- en: Modern web browsers support multiple tabs so users can visit multiple websites
    at the same time efficiently. If code executing in one tab could access resources
    in another tab, then that could be a vector of attack.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网络浏览器支持多个标签页，用户可以高效地同时访问多个网站。如果在一个标签页中执行的代码可以访问另一个标签页中的资源，那么这可能是一个攻击向量。
- en: All web browsers implement a security feature called the **same origin policy**.
    This means that only requests that come from the same origin are allowed. For
    example, if a block of JavaScript is served from the same origin that hosts a
    web service or served an `<iframe>`, then that JavaScript can call the service
    and access the data in the `<iframe>`. If a request is made from a different origin,
    then the request fails. But what counts as the “same origin?”
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网络浏览器都实现了名为 **同源策略** 的安全功能。这意味着只有来自同一源头的请求被允许。例如，如果一段 JavaScript 代码是从托管网络服务或
    `<iframe>` 的同一源头提供的，那么该 JavaScript 可以调用该服务并访问 `<iframe>` 中的数据。如果请求来自不同的源头，则请求失败。但“同源”是什么意思呢？
- en: 'An origin is defined by:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 原因定义为：
- en: '**Scheme** aka protocol, for example, `http` or `https`.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案**也称为协议，例如，`http` 或 `https`。'
- en: '**Port**, for example, `801` or `5081`. The default port for `http` is `80`
    and for `https` is `443`.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口**，例如，`801` 或 `5081`。`http` 的默认端口是 `80`，而 `https` 的默认端口是 `443`。'
- en: '**Host/domain/subdomain**, for example, `www.example.com`, `www.example.net`,
    `example.com`.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机/域名/子域名**，例如，`www.example.com`，`www.example.net`，`example.com`。'
- en: 'If the origin is `https://www.example.com/about-us/`, then the following are
    *not* the same origin:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果源是 `https://www.example.com/about-us/`，则以下不是同一个源：
- en: 'Different scheme: `http://www.example.com/about-us/`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的方案：`http://www.example.com/about-us/`
- en: 'Different host/domain: `https://www.example.co.uk/about-us/`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的主机/域名：`https://www.example.co.uk/about-us/`
- en: 'Different subdomain: `https://careers.example.com/about-us/`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的子域名：`https://careers.example.com/about-us/`
- en: 'Different port: `https://www.example.com:444/about-us/`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的端口：`https://www.example.com:444/about-us/`
- en: It is the web browser that sets the `Origin` header automatically when making
    a request. This cannot be overridden.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 是网页浏览器在发起请求时自动设置 `Origin` 标头的。这不能被覆盖。
- en: '**Warning!** The same origin policy does *not* apply to any requests that come
    from a non-web browser because, in those cases, the programmer could change the
    `Origin` header anyway. If you create a console app or even an ASP.NET Core project
    that uses .NET classes like `HttpClient` to make a request, the same origin policy
    does not apply unless you explicitly set the `Origin` header.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**！同源策略不适用于来自非网页浏览器的任何请求，因为在那些情况下，程序员仍然可以更改 `Origin` 标头。如果您创建了一个控制台应用程序或甚至是一个使用
    .NET 类如 `HttpClient` 来发起请求的 ASP.NET Core 项目，则同源策略不适用，除非您明确设置 `Origin` 标头。'
- en: Let’s see some examples of calling the web service from a web page with a different
    origin and from a .NET app.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看从具有不同源的网页和 .NET 应用程序调用 Web 服务的示例。
- en: Configuring HTTP logging for the web service
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Web 服务的 HTTP 日志记录
- en: 'First, let’s enable HTTP logging for the web service and configure it to show
    the origin of requests:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们为 Web 服务启用 HTTP 日志记录并配置它以显示请求的源：
- en: In the `Northwind.WebApi.Service` project, add a new class file named `IServiceCollection.Extensions.cs`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Service` 项目中，添加一个名为 `IServiceCollection.Extensions.cs` 的新类文件。
- en: 'In `IServiceCollection.Extensions.cs`, import the namespace for controlling
    which HTTP fields are logged, and then define an extension method for the `IServiceCollection`
    interface to add HTTP logging, including the `Origin` header and all fields including
    the response body, as shown in the following code:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `IServiceCollection.Extensions.cs` 文件中，导入用于控制哪些 HTTP 字段被记录的命名空间，然后为 `IServiceCollection`
    接口定义一个扩展方法以添加 HTTP 日志记录，包括 `Origin` 标头以及包括响应体在内的所有字段，如下所示：
- en: '[PRE27]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In `Program.cs`, before the call to `builder.Build()`, add a statement to add
    custom HTTP logging, as shown in the following code:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，在调用 `builder.Build()` 之前，添加一条语句以添加自定义 HTTP 日志记录，如下所示：
- en: '[PRE28]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In `Program.cs`, after the call to `UseHttpsRedirection()`, add a statement
    to use HTTP logging, as shown in the following code:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，在调用 `UseHttpsRedirection()` 之后，添加一条语句以使用 HTTP 日志记录，如下所示：
- en: '[PRE29]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In `appsettings.Development.json`, add an entry to set the level for HTTP logging
    to `Information`, as shown highlighted in the following configuration:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `appsettings.Development.json` 文件中，添加一个条目以设置 HTTP 日志记录级别为 `Information`，如下所示（高亮显示）：
- en: '[PRE30]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Good Practice**: The JSON specification does not allow comments but the JSON
    with Comments format does. You can use JavaScript-style comments using `//` or
    `/* */`. You can read more at the following link: [https://code.visualstudio.com/docs/languages/json#_json-with-comments](https://code.visualstudio.com/docs/languages/json#_json-with-comments).
    If you are using a fussy code editor, just delete the comment I added above.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：JSON 规范不允许注释，但带有注释的 JSON 格式允许。您可以使用 JavaScript 风格的注释 `//` 或 `/* */`。您可以在以下链接中了解更多信息：[https://code.visualstudio.com/docs/languages/json#_json-with-comments](https://code.visualstudio.com/docs/languages/json#_json-with-comments)。如果您使用的是挑剔的代码编辑器，只需删除我添加的注释即可。'
- en: Creating a web page JavaScript client
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建网页 JavaScript 客户端
- en: 'Next, let’s create a web page client that will attempt to use JavaScript on
    a different port to call the web service:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个网页客户端，它将尝试在不同的端口上使用 JavaScript 调用 Web 服务：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器添加一个新项目，如下列表所示：
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web 应用程序（模型-视图-控制器）** / `mvc`
- en: 'Solution file and folder: `Chapter08`'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter08`
- en: 'Project file and folder: `Northwind.WebApi.Client.Mvc`'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.WebApi.Client.Mvc`
- en: 'Other Visual Studio 2022 options:'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他 Visual Studio 2022 选项：
- en: '**Authentication Type**: **None**.'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证类型**：**无**。'
- en: '**Configure for HTTPS**: Selected.'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置为 HTTPS**：已选择。'
- en: '**Enable Docker**: Cleared.'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 Docker**：已清除。'
- en: '**Do not use top-level statements**: Cleared.'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶级语句**：已清除。'
- en: In Visual Studio 2022, configure the startup project to be the current selection.
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，配置启动项目为当前选择。
- en: 'In the `Northwind.WebApi.Client.Mvc` project, in the `Properties` folder, in
    `launchSettings.json`, change the `applicationUrl` for the `https` profile to
    use port `5082`, as shown in the following markup:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi.Client.Mvc`项目中，在`Properties`文件夹中，在`launchSettings.json`文件中，将`https`配置文件的`applicationUrl`更改为使用端口`5082`，如下所示：
- en: '[PRE31]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the `Northwind.WebApi.Client.Mvc` project file, treat warnings as errors.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi.Client.Mvc`项目文件中，将警告视为错误。
- en: 'In the `Views/Home` folder, in `Index.cshtml`, replace the existing markup
    with the markup below, which has a link to a route that has not been defined yet
    to define a text box and button, and a JavaScript block that makes a call to the
    web service to get products that contain a partial name, as shown in the following
    code:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`文件夹中，在`Index.cshtml`中，将现有的标记替换为下面的标记，该标记包含一个指向尚未定义的路由的链接，用于定义一个文本框和按钮，以及一个JavaScript块，该块调用Web服务以获取包含部分名称的产品，如下所示代码：
- en: '[PRE32]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`配置文件启动`Northwind.WebApi.Service`项目，不进行调试。
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`配置文件启动`Northwind.WebApi.Client.Mvc`项目，不进行调试。
- en: If you are using Visual Studio Code, then the web browser will not start automatically.
    Start Chrome, and then navigate to [https://localhost:5082](https://localhost:5082).
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你正在使用Visual Studio Code，那么浏览器将不会自动启动。启动Chrome，然后导航到[https://localhost:5082](https://localhost:5082)。
- en: In Chrome, show **Developer Tools** and **Console**.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome浏览器中，显示**开发者工具**和**控制台**。
- en: 'In the **Products using JavaScript** web page, in the text box, enter `man`,
    click the **Get Products** button, and note the error, as shown in the following
    output and in *Figure 8.6*:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**使用JavaScript的**产品网页中，在文本框中输入`man`，点击**获取产品**按钮，并注意错误，如下所示输出和*图8.6*：
- en: '[PRE33]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](img/B19587_08_06.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_08_06.png)'
- en: 'Figure 8.6: CORS error in the Chrome Developer Tools console'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：Chrome开发者工具控制台中的CORS错误
- en: 'At the command prompt or terminal for the `Northwind.WebApi.Service` project,
    note the HTTP log for the request and that the `Host` is on a different port number
    to the `Origin` so they are not the same origin, as shown highlighted in the following
    output:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi.Service`项目的命令提示符或终端中，注意请求的HTTP日志，以及`Host`在不同的端口号上，与`Origin`不同，因此它们不是同源，如下所示突出显示的输出：
- en: '[PRE34]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Also note the output shows that the web service did execute the database query
    and return the products in a JSON document response to the browser, as shown in
    the following output:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还请注意输出显示Web服务确实执行了数据库查询，并将产品以JSON文档响应返回给浏览器，如下所示输出：
- en: '[PRE35]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Although the browser receives a response containing the data requested, it is
    the browser that enforces the same origin policy by refusing to reveal the HTTP
    response to the JavaScript. The web service is not “secured” by CORS.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然浏览器收到了包含请求数据的响应，但是浏览器通过拒绝向JavaScript显示HTTP响应来强制执行同源策略。Web服务不是通过CORS“安全”的。
- en: Close the browser(s) and shut down the web servers.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器和关闭Web服务器。
- en: Creating a .NET client
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建.NET客户端
- en: 'Next, let’s create a .NET client to the web service to see that the same origin
    policy does not apply to non-web browsers:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个.NET客户端来访问Web服务，以查看同源策略不适用于非Web浏览器：
- en: 'In the `Northwind.WebApi.Client.Mvc` project, add a reference to the entity
    models project so that we can use the `Product` class, as shown in the following
    markup:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi.Client.Mvc`项目中，添加对实体模型项目的引用，以便我们可以使用`Product`类，如下所示标记：
- en: '[PRE36]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Build the `Northwind.WebApi.Client.Mvc` project at the command prompt or terminal
    by entering the following command: `dotnet build`.'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中通过输入以下命令构建`Northwind.WebApi.Client.Mvc`项目：`dotnet build`。
- en: 'In the `Northwind.WebApi.Client.Mvc` project, in `Program.cs`, import the namespace
    for working with HTTP headers, as shown in the following code:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi.Client.Mvc`项目中，在`Program.cs`中，导入用于处理HTTP头部的命名空间，如下所示代码：
- en: '[PRE37]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In `Program.cs`, before the call to `builder.Build()`, add statements to configure
    an HTTP client factory to call the web service, as shown in the following code:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在调用`builder.Build()`之前，添加语句来配置HTTP客户端工厂以调用Web服务，如下所示代码：
- en: '[PRE38]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace for
    the entity models, as shown in the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，在`HomeController.cs`中，导入实体模型的命名空间，如下所示代码：
- en: '[PRE39]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In `HomeController.cs`, add statements to store the registered HTTP client
    factory in a private `readonly` field, as shown highlighted in the following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，添加语句将注册的HTTP客户端工厂存储在私有的`readonly`字段中，如下代码所示高亮显示：
- en: '[PRE40]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In `HomeController.cs`, add an asynchronous action method named `Products`
    that will use the HTTP factory to request products whose name contains a value
    entered as an optional `name` parameter in a custom MVC route, as shown in the
    following code:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，添加一个名为`Products`的异步操作方法，该方法将使用HTTP工厂请求包含在自定义MVC路由中作为可选`name`参数输入的值的产品的名称，如下代码所示：
- en: '[PRE41]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the `Views/Home` folder, add a new file named `Products.cshtml`. (The Visual
    Studio 2022 project item template is named **Razor View - Empty**. The JetBrains
    Rider project item template is named **Razor MVC View**.)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`文件夹中，添加一个名为`Products.cshtml`的新文件。（Visual Studio 2022项目项模板命名为**Razor
    View - Empty**。JetBrains Rider项目项模板命名为**Razor MVC View**。）
- en: 'In `Products.cshtml`, modify its contents to output a table of products that
    match part of a product name entered in a text box, as shown in the following
    markup:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Products.cshtml`中，修改其内容以输出一个表格，显示与在文本框中输入的产品名称部分匹配的产品，如下标记所示：
- en: '[PRE42]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无调试的`https`配置启动`Northwind.WebApi.Service`项目。
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无调试的`https`配置启动`Northwind.WebApi.Client.Mvc`项目。
- en: On the home page, click the link to go to **Products using .NET**, and note
    the first ten in-stock, not discontinued products are shown in the table, from
    **Chai** to **Queso Manchego La Pastora**.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上，点击链接跳转到**使用.NET的产品**，并注意表中显示了前十个库存且未停售的产品，从**Chai**到**Queso Manchego La
    Pastora**。
- en: In the text box, enter `man`, click **Get Products**, and note that two products
    are shown in the table, as shown in *Figure 8.7*:![](img/B19587_08_07.png)
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入`man`，点击**Get Products**，注意表中显示了两个产品，如图8.7所示：![](img/B19587_08_07.png)
- en: 'Figure 8.7: Getting two products from a web service using .NET'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.7：使用.NET从Web服务获取两个产品
- en: It is the .NET HTTP client that is calling the web service, so the same origin
    policy does not apply. If you were to check the logs at the command line or terminal
    as you did before, you would see the ports are different, but it does not matter.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 是.NET HTTP客户端在调用Web服务，因此不适用同源策略。如果你像之前一样在命令行或终端中检查日志，你会看到端口不同，但这并不重要。
- en: 'Click one of the product names to make a direct request to the web service
    for an individual product and note the response, as shown in the following document:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击产品名称之一，直接向该Web服务请求单个产品并注意响应，如下文档所示：
- en: '[PRE43]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Close the browser and shut down the web servers.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: Understanding CORS
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解CORS
- en: '**Cross-Origin Resource Sharing** (**CORS**) is an HTTP-header-based feature
    that asks the browser to disable its same-origin security policy in specific scenarios.
    The HTTP headers indicate which origins should be allowed in addition to the same
    origin.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨源资源共享**（**CORS**）是一种基于HTTP头的功能，它要求浏览器在特定场景下禁用其同源安全策略。HTTP头指示哪些源应该被允许，除了同源之外。'
- en: 'Let’s enable CORS in the web service so that it can send extra headers to indicate
    to the browser that it is allowed to access resources from a different origin:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Web服务中启用CORS，以便它可以发送额外的头信息，告知浏览器它允许从不同的源访问资源：
- en: 'In the `Northwind.WebApi.Service` project, in `WebApplication.Extensions.cs`,
    add an extension method to add CORS support to the web service, as shown in the
    following code:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi.Service`项目中，在`WebApplication.Extensions.cs`中，添加一个扩展方法以向Web服务添加CORS支持，如下代码所示：
- en: '[PRE44]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In `Program.cs`, after creating the `builder`, call the custom extension method
    to add CORS support, as shown in the following code:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在创建`builder`之后，调用自定义扩展方法以添加CORS支持，如下代码所示：
- en: '[PRE45]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In `Program.cs`, after the call to `UseHttpLogging`, and before mapping the
    `GET` requests, add a statement to use the CORS policy, as shown in the following
    code:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在调用`UseHttpLogging`之后，在映射`GET`请求之前，添加一个语句来使用CORS策略，如下代码所示：
- en: '[PRE46]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无调试的`https`配置启动`Northwind.WebApi.Service`项目。
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无调试的`https`配置启动`Northwind.WebApi.Client.Mvc`项目。
- en: Show **Developer Tools** and the **Console**.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示**开发者工具**和**控制台**。
- en: 'On the home page, in the text box, enter `man`, click **Get Products**, and
    note that the console shows the JSON document returned from the web service, and
    the table is filled with the two products, as shown in *Figure 8.8*:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上的文本框中输入 `man`，点击 **Get Products**，注意控制台显示了来自 web 服务的 JSON 文档，并且表格中填充了两个产品，如图
    8.8 所示：
- en: '![](img/B19587_08_08.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_08_08.png)'
- en: 'Figure 8.8: A successful cross-origin request to the web service using JavaScript'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8：使用 JavaScript 向 web 服务发起成功的跨源请求
- en: Close the browser and shut down the web servers.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: Enabling CORS for specific endpoints
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为特定端点启用 CORS
- en: 'In the previous example, we enabled the same CORS policy for the whole web
    service. You might need finer control at the endpoint level:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们为整个 web 服务启用了相同的 CORS 策略。你可能需要在端点级别进行更精细的控制：
- en: 'In the `Northwind.WebApi.Service` project, in `Program.cs`, change the call
    to `UseCors` to not specify the policy name, as shown highlighted in the following
    code:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Service` 项目中，在 `Program.cs` 文件中，将 `UseCors` 调用的策略名称指定改为不指定，如下所示，高亮显示的代码：
- en: '[PRE47]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In `WebApplication.Extensions.cs`, at the end of the call to `MapGet` that
    gets products that contain part of a product name, add a call to `RequiresCors`,
    as shown highlighted in the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 文件中，在获取包含部分产品名称的产品时 `MapGet` 调用的末尾，添加一个 `RequiresCors`
    调用，如下所示，高亮显示的代码：
- en: '[PRE48]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 配置文件启动 `Northwind.WebApi.Service` 项目，且不进行调试。
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 配置文件启动 `Northwind.WebApi.Client.Mvc` 项目，且不进行调试。
- en: Show **Developer Tools** and **Console**.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示 **开发者工具** 和 **控制台**。
- en: On the home page, in the text box, enter `cha`, click **Get Products**, and
    note that the console shows the JSON document returned from the web service and
    the table is filled with three products.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上的文本框中输入 `cha`，点击 **Get Products**，注意控制台显示了来自 web 服务的 JSON 文档，并且表格中填充了三个产品。
- en: Close the browser and shut down the web servers.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: Understanding other CORS policy options
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解其他 CORS 策略选项
- en: 'You can control the:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以控制以下内容：
- en: Allowed origins, for example, `https://*.example.com/`.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的来源，例如，`https://*.example.com/`。
- en: Allowed HTTP methods, for example, `GET`, `POST`, `DELETE`, and so on.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的 HTTP 方法，例如，`GET`、`POST`、`DELETE` 等等。
- en: Allowed HTTP request headers, for example, `Content-Type`, `Content-Language`,
    `x-custom-header`, and so on.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的 HTTP 请求头，例如，`Content-Type`、`Content-Language`、`x-custom-header` 等等。
- en: Exposed HTTP response headers, meaning which headers to include unredacted in
    a response (because, by default, response headers are redacted), for example,
    `x-custom-header`.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露 HTTP 响应头，意味着在响应中包含哪些未加密的头信息（因为默认情况下，响应头会被加密），例如，`x-custom-header`。
- en: 'You can learn more about options for CORS policies at the following link: [https://learn.microsoft.com/en-us/aspnet/core/security/cors#cors-policy-options](https://learn.microsoft.com/en-us/aspnet/core/security/cors#cors-policy-options)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于 CORS 策略的选项：[https://learn.microsoft.com/en-us/aspnet/core/security/cors#cors-policy-options](https://learn.microsoft.com/en-us/aspnet/core/security/cors#cors-policy-options)
- en: Now that you know that CORS does not secure a web service, let’s look at a useful
    technique that can prevent a common form of attack.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你知道 CORS 并不能保护 web 服务，那么让我们看看一种有用的技术，它可以防止一种常见的攻击形式。
- en: Preventing denial of service attacks using rate limiting
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用速率限制来防止拒绝服务攻击
- en: A **denial of service** (**DoS**) attack is a malicious attempt to disrupt a
    web service by overwhelming it with requests. If the requests all came from the
    same place, for example, the same IP address, then it would be relatively easy
    to cut them off as soon as the attack is detected. But these attacks are often
    implemented as **distributed DoS** (**DDoS**) attacks from many locations so you
    cannot separate attackers from genuine clients.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**拒绝服务**（**DoS**）攻击是一种恶意尝试通过大量请求来中断 web 服务的攻击。如果请求都来自同一个地方，例如，同一个 IP 地址，那么一旦检测到攻击，就相对容易切断它们。但这些攻击通常作为来自许多位置的
    **分布式拒绝服务**（**DDoS**）攻击来实施，因此你无法将攻击者与真正的客户端区分开来。'
- en: A different approach is to apply rate limiting to everyone but let through more
    requests for genuine identified clients.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是针对所有人应用速率限制，但允许真正的已识别客户端有更多的请求通过。
- en: Genuine clients should only make the minimum requests they need. How many is
    reasonable will depend on your service. One way to prevent DDoS attacks would
    be to limit how many requests are allowed from any client per minute.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 真实客户端应仅发出它们所需的最低请求。合理的数量将取决于您的服务。防止 DDoS 攻击的一种方法是对任何客户端每分钟允许的请求数量进行限制。
- en: This technique is not just useful to prevent attacks. Even genuine clients might
    accidentally make too many requests, or for a commercial web service, you might
    want to charge different amounts for different rates, like when controlling a
    subscription. Commercial web services from Twitter/X to Reddit now charge a *lot*
    of money for access to their web APIs.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术不仅有助于防止攻击。即使是真正的客户端也可能意外地发出过多的请求，或者对于商业 Web 服务，您可能希望根据不同的速率收取不同的费用，例如在控制订阅时。现在，从
    Twitter/X 到 Reddit 的商业 Web 服务现在对访问其 Web API 收取了大量的费用。
- en: When a client makes requests over a set rate limit, the client should receive
    either `429 Too Many Requests` or `503 Service Unavailable` HTTP responses.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端超过设定的请求速率限制时，客户端应收到 `429 Too Many Requests` 或 `503 Service Unavailable`
    的 HTTP 响应。
- en: '**Good Practice**: If you need to build a massively scalable web service and
    protect its APIs, you should use a cloud service like Azure API Management instead
    of trying to implement your own rate limiting. You can learn more about this at
    the following link: [https://learn.microsoft.com/en-us/azure/api-management/](https://learn.microsoft.com/en-us/azure/api-management/).'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果您需要构建一个大规模可扩展的 Web 服务并保护其 API，您应该使用像 Azure API Management 这样的云服务，而不是尝试实现自己的速率限制。您可以在以下链接中了解更多信息：[https://learn.microsoft.com/en-us/azure/api-management/](https://learn.microsoft.com/en-us/azure/api-management/)。'
- en: Rate limiting using the AspNetCoreRateLimit package
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AspNetCoreRateLimit 包进行速率限制
- en: '`AspNetCoreRateLimit`, a third-party package that targets .NET 6 or later,
    provides flexible rate-limiting middleware based on the IP address or client ID:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`AspNetCoreRateLimit` 是一个针对 .NET 6 或更高版本的第三方包，它提供基于 IP 地址或客户端 ID 的灵活速率限制中间件：'
- en: 'In the `Northwind.WebApi.Service` project, add a reference to the `AspNetCoreRateLimit`
    package, as shown in the following markup:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Service` 项目中，添加对 `AspNetCoreRateLimit` 包的引用，如下所示：
- en: '[PRE49]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Build the `Northwind.WebApi.Service` project to restore packages.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建包含 `Northwind.WebApi.Service` 项目的解决方案以恢复包。
- en: 'In `appsettings.Development.json`, add configuration for default rate limit
    options and client-specific policies, as shown highlighted in the following configuration:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `appsettings.Development.json` 中，添加默认速率限制选项和客户端特定策略的配置，如下所示的高亮配置：
- en: '[PRE50]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Note:'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意：
- en: '`EnableEndpointRateLimiting` is `false`, meaning all endpoints will share the
    same rules.'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EnableEndpointRateLimiting` 设置为 `false`，意味着所有端点将共享相同的规则。'
- en: If a client needs to identify itself, it can set a header named `X-Client-Id`
    to a unique `string` value.
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果客户端需要标识自己，它可以设置一个名为 `X-Client-Id` 的头，并将其设置为唯一的 `string` 值。
- en: If a rate limit is reached for a client, the service will start returning `429`
    status code responses to that client.
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果客户端达到速率限制，服务将开始向该客户端返回 `429` 状态码响应。
- en: Two endpoints will be excluded from the global rate limits because they are
    on the endpoint whitelist. One endpoint is for getting a license, and the other
    endpoint is for checking the status of the service. We will not actually implement
    these features and you would want to apply different rate limits to these endpoints;
    otherwise, someone could call them to bring down your server instead.
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个端点将不会被全局速率限制，因为它们位于端点白名单中。一个端点是获取许可证，另一个端点是检查服务状态。我们实际上不会实现这些功能，并且您可能希望对这些端点应用不同的速率限制；否则，有人可能会调用它们来使您的服务器崩溃。
- en: Two client IDs, named `dev-id-1` and `dev-id-2`, will be excluded from the rate
    limits because they are on the client whitelist. These could be special client
    accounts for internal developers that are not shared outside the organization.
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个客户端 ID，名为 `dev-id-1` 和 `dev-id-2`，将不会被速率限制，因为它们位于客户端白名单中。这些可能是仅供内部开发者使用的特殊客户端账户，这些账户不会在组织外部共享。
- en: 'Two general (default) rules are configured: the first sets a rate limit of
    2 requests every 10 seconds, and the second sets a rate limit of 100 requests
    every 12 hours.'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了两个通用（默认）规则：第一个规则每10秒设置2个请求的速率限制，第二个规则每12小时设置100个请求的速率限制。
- en: 'Two client-specific rules are configured that are looser than the default rules:
    for the client ID named `console-client-abc123`, it is allowed to make up to 5
    requests every 10 seconds, and up to 250 requests every 12 hours.'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了两个比默认规则更宽松的客户端特定规则：对于名为 `console-client-abc123` 的客户端 ID，允许每 10 秒内最多发送 5 个请求，每
    12 小时最多发送 250 个请求。
- en: 'In `IServiceCollection.Extensions.cs`, import the namespace for working with
    rate-limiting options, as shown in the following code:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `IServiceCollection.Extensions.cs` 中，导入用于处理速率限制选项的命名空间，如下所示：
- en: '[PRE51]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In `IServiceCollection.Extensions.cs`, define an extension method to load rate-limiting
    configuration from app settings and set rate-limiting options, as shown in the
    following code:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `IServiceCollection.Extensions.cs` 中，定义一个扩展方法，从应用程序设置中加载速率限制配置并设置速率限制选项，如下所示：
- en: '[PRE52]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In `Program.cs`, after creating the `builder`, add statements to load rate-limiting
    configuration from app settings and set rate-limiting options, as shown in the
    following code:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在创建 `builder` 之后，添加语句从应用程序设置中加载速率限制配置并设置速率限制选项，如下所示：
- en: '[PRE53]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In `IServiceCollection.Extensions.cs`, in the call to configure HTTP logging,
    add a statement to allow two rate-limiting headers to not be redacted, as shown
    highlighted in the following code:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `IServiceCollection.Extensions.cs` 中，在配置 HTTP 记录的调用中，添加一条语句以允许两个速率限制头不被截断，如下所示（高亮显示）：
- en: '[PRE54]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In `WebApplication.Extensions.cs`, import the namespace for working with rate-limiting
    policy stores, as shown in the following code:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 中，导入用于处理速率限制策略存储的命名空间，如下所示：
- en: '[PRE55]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In `WebApplication.Extensions.cs`, add statements to define an extension method
    to seed the client policy store, which just means loading the policies from the
    configuration, and then use client rate limits, as shown in the following code:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 中，添加语句以定义一个扩展方法来初始化客户端策略存储，这意味着从配置中加载策略，然后使用客户端速率限制，如下所示：
- en: '[PRE56]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In `Program.cs`, after calling `UseHttpLogging`, add a call to use client rate
    limiting, as shown in the following code:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在调用 `UseHttpLogging` 之后，添加一个调用以使用客户端速率限制，如下所示：
- en: '[PRE57]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Creating a rate-limited console client
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建速率限制控制台客户端
- en: 'Now we can create a console app that will be a client to the web service:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个控制台应用程序，它将成为 Web 服务的客户端：
- en: Use your preferred code editor to add a new console app to the `Chapter08` solution
    named `Northwind.WebApi.Client.Console`.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器将一个新的控制台应用程序添加到 `Chapter08` 解决方案中，命名为 `Northwind.WebApi.Client.Console`。
- en: 'In the `Northwind.WebApi.Client.Console` project, treat warnings as errors,
    globally and statically import the `System.Console` class, and add a reference
    to the entity models project, as shown in the following markup:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Client.Console` 项目中，将警告视为错误，全局和静态导入 `System.Console` 类，并添加对实体模型项目的引用，如下所示：
- en: '[PRE58]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Build the `Northwind.WebApi.Client.Console` project at the command prompt or
    terminal to compile the referenced project and copy its assembly to the appropriate
    `bin` folder.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中构建 `Northwind.WebApi.Client.Console` 项目，以编译引用的项目并将其实例复制到适当的 `bin`
    文件夹。
- en: In the `Northwind.WebApi.Client.Console` project, add a new class file named
    `Program.Helpers.cs`.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Client.Console` 项目中，添加一个名为 `Program.Helpers.cs` 的新类文件。
- en: 'In `Program.Helpers.cs`, add statements to define a method for the `partial
    Program` class to write some text in a foreground color, as shown in the following
    markup:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.Helpers.cs` 中，添加语句以定义一个方法，用于 `partial Program` 类，以便以前景色写入一些文本，如下所示：
- en: '[PRE59]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In `Program.cs`, delete the existing statements. Add statements to prompt the
    user for a client name to identify it, and then create an HTTP client to make
    a request to get the first page of products from the web service once per second
    until the user presses *Ctrl* + *C* to stop the console app, as shown in the following
    code:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，删除现有的语句。添加语句提示用户输入客户端名称以识别它，然后创建一个 HTTP 客户端，每秒向 Web 服务发送一次请求以获取产品第一页，直到用户按下
    *Ctrl* + *C* 停止控制台应用程序，如下所示：
- en: '[PRE60]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: If your database server is not running (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的数据库服务器没有运行（例如，因为您正在 Docker、虚拟机或云中托管它），请确保启动它。
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 配置不带调试启动 `Northwind.WebApi.Service` 项目。
- en: Start the `Northwind.WebApi.Client.Console` project without debugging.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不带调试启动 `Northwind.WebApi.Client.Console` 项目。
- en: In the console app, press *Enter* to generate a GUID-based client ID.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台应用程序中，按 *Enter* 键生成基于 GUID 的客户端 ID。
- en: Start the `Northwind.WebApi.Client.Console` project using the `https` profile
    without debugging again so we have two clients.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次不进行调试地使用 `https` 配置启动 `Northwind.WebApi.Client.Console` 项目，以便我们有两个客户端。
- en: In the console app, press *Enter* to generate a GUID-based client ID.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台应用程序中，按 *Enter* 键生成基于 GUID 的客户端 ID。
- en: 'Note that each client can make two requests before it starts to receive `429`
    status codes, as shown in the following output and in *Figure 8.9*:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，每个客户端在开始接收 `429` 状态代码之前可以发出两个请求，如下所示，并在 *图 8.9* 中显示：
- en: '[PRE61]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '![](img/B19587_08_09.png)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_08_09.png)'
- en: 'Figure 8.9: A console app exceeding its web service rate limit'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9：超出其 Web 服务速率限制的控制台应用程序
- en: Stop the two console apps. Leave the web service running.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止两个控制台应用程序。保持 Web 服务运行。
- en: 'In the command line for the web service, note the HTTP logs that show each
    request from the console client with its client ID sent as a header named `X-Client-Id`,
    the request being blocked because that client has exceeded its quota, and a response
    that contains a header named `Retry-After` containing the number of seconds the
    client should wait before retrying, as shown highlighted in the following output:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 服务命令行中，注意显示每个来自控制台客户端的请求的 HTTP 日志，该请求以名为 `X-Client-Id` 的标头发送客户端 ID，请求被阻止，因为该客户端已超出配额，以及包含客户端应在重试前等待的秒数的名为
    `Retry-After` 的标头的响应，如下所示，代码中已突出显示：
- en: '[PRE62]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `Northwind.WebApi.Client.Console` project, in `Program.cs`, before writing
    the error message to the console in dark red, add statements to read the `Retry-After`
    header to get the number of seconds to wait for, as shown highlighted in the following
    code:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Client.Console` 项目中，在 `Program.cs` 文件中，在将错误信息以深红色写入控制台之前，添加语句读取
    `Retry-After` 标头以获取等待的秒数，如下所示，代码中已突出显示：
- en: '[PRE63]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Note the `waitFor` variable is set from the `Retry-After` header value. This
    is later used to pause the console app using an asynchronous delay, as shown in
    the following code:'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意 `waitFor` 变量是从 `Retry-After` 标头值设置的。这随后用于使用异步延迟暂停控制台应用程序，如下所示，代码中已突出显示：
- en: '`await Task.Delay(TimeSpan.FromSeconds(waitFor));`'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`await Task.Delay(TimeSpan.FromSeconds(waitFor));`'
- en: Start the `Northwind.WebApi.Client.Console` project without debugging.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不进行调试地启动 `Northwind.WebApi.Client.Console` 项目。
- en: In the console app, press *Enter* to generate a GUID-based client ID.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台应用程序中，按 *Enter* 键生成基于 GUID 的客户端 ID。
- en: 'Note the console app will now sensibly wait for the suggested number of seconds
    before making its next call to the service, as shown in the following output:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意控制台应用程序现在将合理地等待建议的秒数，然后再进行对服务的下一次调用，如下所示，代码中已突出显示：
- en: '[PRE64]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Stop and restart the `Northwind.WebApi.Client.Console` project without debugging.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止并重新启动 `Northwind.WebApi.Client.Console` 项目，不进行调试。
- en: In the console app, enter the name `dev-id-1`, and note that the rate limit
    does not apply to this console app client. This could be a special account for
    internal developers.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台应用程序中，输入名称 `dev-id-1`，并注意速率限制不适用于此控制台应用程序客户端。这可能是一个内部开发人员的特殊账户。
- en: Stop and restart the `Northwind.WebApi.Client.Console` project without debugging.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止并重新启动 `Northwind.WebApi.Client.Console` 项目，不进行调试。
- en: 'In the console app, enter the name `console-client-abc123`, and note that the
    rate limit is different for this console app client ID, as shown in the following
    output:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台应用程序中，输入名称 `console-client-abc123`，并注意此控制台应用程序客户端 ID 的速率限制不同，如下所示，代码中已突出显示：
- en: '[PRE65]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Rate limiting using ASP.NET Core middleware
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core 中间件进行速率限制
- en: 'ASP.NET Core 7 introduced its own basic rate-limiting middleware, initially
    distributed as a separate NuGet package but now included with ASP.NET Core. It
    has a dependency on another Microsoft package, `System.Threading.RateLimiting`.
    It is not as feature-rich as the third-party package and we will not cover it
    in this book, although I have written an online-only section at the following
    link:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 7 引入了它自己的基本速率限制中间件，最初作为单独的 NuGet 包分发，但现在包含在 ASP.NET Core 中。它依赖于另一个
    Microsoft 包，`System.Threading.RateLimiting`。它不如第三方包功能丰富，本书中不会介绍它，尽管我已在以下链接处编写了一个仅在线的章节：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-rate-limiting.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-rate-limiting.md)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-rate-limiting.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-rate-limiting.md)'
- en: 'You can learn about the ASP.NET Core rate limiter at the following link: [https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit](https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit).'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解 ASP.NET Core 速率限制器：[https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit](https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit)。
- en: Protecting your web services from attacks is important. What about improving
    the performance of your web service? Is there anything we can do about that?
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 保护你的网络服务免受攻击很重要。那么，提高你的网络服务性能呢？我们能做些什么？
- en: Improving startup time and resources using native AOT
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原生 AOT 提高启动时间和资源
- en: 'Native AOT produces apps and services that are:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 原生 AOT 生成的应用和服务具有：
- en: '**Self-contained**, meaning they can run on systems that do not have the .NET
    runtime installed.'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自包含**，意味着它们可以在未安装 .NET 运行时系统的计算机上运行。'
- en: '**Ahead-of-time (AOT) compiled to native code**, meaning a faster startup time
    and a potentially smaller memory footprint. This can have a positive impact when
    you have lots of instances (for example, when deploying massively scalable microservices)
    that are frequently stopped and restarted.'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提前编译 (AOT) 为原生代码**，意味着更快的启动时间和可能更小的内存占用。当你有很多实例（例如，在部署大规模可扩展的微服务时）频繁停止和启动时，这可以产生积极的影响。'
- en: Native AOT compiles **intermediate code** (**IL**) to native code at the time
    of publishing, rather than at runtime using the **Just-In-Time** (**JIT**) compiler.
    But native AOT apps and services must target a specific runtime environment like
    Windows x64 or Linux ARM.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 原生 AOT 在发布时将**中间代码**（**IL**）编译为原生代码，而不是在运行时使用**即时编译器**（**JIT**）进行编译。但原生 AOT
    应用和服务必须针对特定的运行时环境，如 Windows x64 或 Linux ARM。
- en: Since native AOT happens at publish time, while debugging and working live on
    a project in your code editor, it uses the runtime JIT compiler, not native AOT,
    even if you have AOT enabled in the project! But some features that are incompatible
    with native AOT will be disabled or throw exceptions, and a source analyzer is
    enabled to show warnings about potential code incompatibilities.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 由于原生 AOT 在发布时发生，因此在代码编辑器中调试和实时工作在项目上时，它使用运行时 JIT 编译器，而不是原生 AOT，即使你在项目中启用了 AOT！但与原生
    AOT 不兼容的一些功能将被禁用或抛出异常，并启用源分析器以显示有关潜在代码不兼容性的警告。
- en: Limitations of native AOT
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原生 AOT 的限制
- en: 'Native AOT has limitations, some of which are shown in the following list:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 原生 AOT 存在限制，以下列出了一些：
- en: No dynamic loading of assemblies.
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许动态加载程序集。
- en: No runtime code generation, for example, using `System.Reflection.Emit`.
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许运行时代码生成，例如使用 `System.Reflection.Emit`。
- en: It requires trimming, which has its own limitations.
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要修剪，这有其自身的限制。
- en: The assembly must be self-contained, so they must embed any libraries they call,
    which increases their size.
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序集必须是自包含的，因此它们必须嵌入它们调用的任何库，这增加了它们的大小。
- en: Although your own apps and services might not use the features listed above,
    major parts of .NET itself do. For example, ASP.NET Core MVC (including Web API
    services that use controllers) and EF Core do runtime code generation to implement
    their functionality.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你的应用和服务可能没有使用上述功能，但 .NET 本身的许多主要部分都使用了。例如，ASP.NET Core MVC（包括使用控制器的 Web API
    服务）和 EF Core 通过运行时代码生成来实现其功能。
- en: The .NET teams are hard at work making as much of .NET compatible with native
    AOT as possible, as soon as possible. But .NET 8 only includes basic support for
    ASP.NET Core if you use minimal APIs, and no support for EF Core.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 团队正在努力工作，尽可能快地将尽可能多的 .NET 与原生 AOT 兼容，.NET 8 仅在您使用最小 API 时包括对 ASP.NET Core
    的基本支持，并且对 EF Core 没有支持。
- en: My guess is that .NET 9 will include support for ASP.NET Core MVC and some parts
    of EF Core, but it could take until .NET 10 before we can all confidently use
    most of .NET and know we can build our apps and services with native AOT to gain
    the benefits.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我的猜测是 .NET 9 将包括对 ASP.NET Core MVC 和 EF Core 部分的支持，但可能需要到 .NET 10 我们才能自信地使用大多数
    .NET，并知道我们可以使用原生 AOT 构建我们的应用和服务以获得这些好处。
- en: The native AOT publishing process includes code analyzers to warn you if you
    use any features that are not supported, but not all packages have been annotated
    to work well with this yet.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 原生 AOT 发布过程包括代码分析器，以警告你如果使用了任何不受支持的特性，但并非所有包都已被注释以与该特性良好协作。
- en: The most common annotation used to indicate that a type or member does not support
    AOT is the `[RequiresDynamicCode]` attribute.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的注释来指示类型或成员不支持 AOT 是 `[RequiresDynamicCode]` 属性。
- en: '**More Information**: You can learn more about AOT warnings at the following
    link: [https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing-warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing-warnings).'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于 AOT 警告的信息：[https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing-warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing-warnings).'
- en: Reflection and native AOT
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射和本地 AOT
- en: Reflection is frequently used for runtime inspection of type metadata, dynamic
    invocation of members, and code generation.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 反射经常用于运行时检查类型元数据、成员的动态调用以及代码生成。
- en: Native AOT does allow some reflection features, but the trimming performed during
    the native AOT compilation process cannot statically determine when a type has
    members that might be only accessed via reflection. These members would be removed
    by AOT, which would then cause a runtime exception.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 本地 AOT 允许一些反射功能，但在本地 AOT 编译过程中进行的剪裁无法静态确定类型具有可能仅通过反射访问的成员。这些成员将被 AOT 移除，这会导致运行时异常。
- en: '**Good Practice**: Developers must annotate their types with `[DynamicallyAccessedMembers]`
    to indicate a member that is only dynamically accessed via reflection and should
    therefore be left untrimmed.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：开发者必须使用 `[DynamicallyAccessedMembers]` 注解他们的类型，以指示仅通过反射动态访问的成员，因此应保留未剪裁。'
- en: Native AOT for ASP.NET Core
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地 AOT for ASP.NET Core
- en: .NET 7 only supported native AOT with console apps and class libraries on Windows
    or Linux. It did not support macOS or ASP.NET Core. .NET 8 is the first version
    to support macOS and parts of ASP.NET Core.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 7 仅支持 Windows 或 Linux 上的控制台应用程序和类库的本地 AOT。它不支持 macOS 或 ASP.NET Core。.NET
    8 是第一个支持 macOS 和 ASP.NET Core 部分功能版本。
- en: 'The following ASP.NET Core features are fully supported: `gRPC`, `CORS`, `HealthChecks`,
    `HttpLogging`, `Localization`, `OutputCaching`, `RateLimiting`, `RequestDecompression`,
    `ResponseCaching`, `ResponseCompression`, `Rewrite`, `StaticFiles`, and `WebSockets`.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 ASP.NET Core 功能完全受支持：`gRPC`、`CORS`、`HealthChecks`、`HttpLogging`、`Localization`、`OutputCaching`、`RateLimiting`、`RequestDecompression`、`ResponseCaching`、`ResponseCompression`、`Rewrite`、`StaticFiles`
    和 `WebSockets`。
- en: 'The following ASP.NET Core features are partially supported: minimal APIs.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 ASP.NET Core 功能部分受支持：最小 API。
- en: 'The following ASP.NET Core features are not supported (yet): MVC, Blazor Server,
    SignalR, Authentication (except JWT), Session, and SPA.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 ASP.NET Core 功能目前不受支持：MVC、Blazor Server、SignalR、身份验证（除 JWT 外）、会话和 SPA。
- en: 'As you have previously seen, you implement an ASP.NET Core Minimal APIs web
    service by mapping an HTTP request to a lambda expression, for example, as shown
    in the following code:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您之前所看到的，您通过将 HTTP 请求映射到 lambda 表达式来实现 ASP.NET Core 最小 API 网络服务，例如以下代码所示：
- en: '[PRE66]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: At runtime, ASP.NET Core uses the `RequestDelegateFactory` (**RDF**) class to
    convert your `MapX` calls into `RequestDelegate` instances. But this is dynamic
    code so is not compatible with native AOT.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，ASP.NET Core 使用 `RequestDelegateFactory` （**RDF**）类将您的 `MapX` 调用转换为 `RequestDelegate`
    实例。但这是动态代码，因此与本地 AOT 不兼容。
- en: In ASP.NET Core 8, when native AOT is enabled, the runtime use of RDF is replaced
    with a source generator named **Request Delegate Generator** (**RDG**) that performs
    similar work but at compile time. This makes sure the code generated is statically
    analyzable by the native AOT publish process.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 8 中，当启用本地 AOT 时，运行时使用 RDF 被一个名为 **请求委托生成器** （**RDG**）的源生成器所取代，该生成器执行类似的工作，但发生在编译时。这确保生成的代码可以被本地
    AOT 发布过程静态分析。
- en: '**More Information**: You can learn how to create your own source generator
    at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch01-dynamic-code.md#creating-source-generators](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch01-dynamic-code.md#creating-source-generators).'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中学习如何创建自己的源生成器：[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch01-dynamic-code.md#creating-source-generators](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch01-dynamic-code.md#creating-source-generators).'
- en: Requirements for native AOT
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地 AOT 的要求
- en: 'There are additional requirements for different operating systems:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不同的操作系统，还有额外的要求：
- en: On Windows, you must install the Visual Studio 2022 **Desktop development with
    C++** workload with all default components.
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上，您必须安装包含所有默认组件的 Visual Studio 2022 **桌面开发与 C++** 工作负载。
- en: 'On Linux, you must install the compiler toolchain and developer packages for
    libraries that the .NET runtime depends on. For example, for Ubuntu 18.04 or later:
    `sudo apt-get install clang zlib1g-dev`.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上，你必须安装.NET运行时所依赖的库的编译器工具链和开发包。例如，对于Ubuntu 18.04或更高版本：`sudo apt-get install
    clang zlib1g-dev`。
- en: '**Warning!** Cross-platform native AOT publishing is not supported. This means
    that you must run the publish on the operating system that you will deploy to.
    For example, you cannot publish a native AOT project on Linux to later run on
    Windows.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**跨平台原生AOT发布不受支持。这意味着你必须在你将部署的操作系统上运行发布。例如，你不能在Linux上发布原生AOT项目，然后将其在Windows上运行。'
- en: Enabling native AOT for a project
  id: totrans-427
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为项目启用原生AOT
- en: 'To enable native AOT publishing in a project, add the `<PublishAot>` element
    to the project file, as shown highlighted in the following markup:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 要在项目中启用原生AOT发布，请将`<PublishAot>`元素添加到项目文件中，如下所示，高亮显示的标记：
- en: '[PRE67]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Enabling JSON serialization with native AOT
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用与原生AOT的JSON序列化
- en: 'JSON serialization with native AOT requires the use of the `System.Text.Json`
    source generator. All model types passed as parameters or return values must be
    registered with a `JsonSerializerContext`, as shown in the following code:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生AOT进行JSON序列化需要使用`System.Text.Json`源生成器。所有作为参数或返回值传递的模型类型都必须在`JsonSerializerContext`中注册，如下所示：
- en: '[PRE68]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Your custom JSON serializer context must be added to the service dependencies,
    as shown in the following code:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须将自定义JSON序列化器上下文添加到服务依赖项中，如下所示：
- en: '[PRE69]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Building a native AOT project
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建原生AOT项目
- en: 'Now let’s see a practical example using the new project template:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看使用新项目模板的一个实际例子：
- en: 'In the solution named `Chapter08`, add a native AOT-compatible web service
    project, as defined in the following list:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`Chapter08`的解决方案中，添加一个与原生AOT兼容的Web服务项目，如下所示：
- en: Project template: **ASP.NET Core Web API (native AOT)** / `webapiaot`
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web API (native AOT)** / `webapiaot`
- en: This is a new project template introduced with .NET 8\. It is different from
    the **Web API** / `webapi` project template. It does not have an option to use
    controllers since native AOT support is currently minimal APIs-only. It also does
    not have an option for HTTPS because HTTPS is often handled by a reverse-proxy
    in cloud-native deployments. In JetBrains Rider, select **ASP.NET Core Web Application**
    and then select the **Type** of **Web API (native AOT)**.
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是.NET 8引入的新项目模板。它与**Web API** / `webapi`项目模板不同。由于原生AOT支持目前仅限于最小API，因此它没有使用控制器选项。它也没有HTTPS选项，因为在云原生部署中HTTPS通常由反向代理处理。在JetBrains
    Rider中，选择**ASP.NET Core Web应用程序**，然后选择**类型**为**Web API (native AOT)**。
- en: Solution file and folder: `Chapter08`
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter08`
- en: Project file and folder: `Northwind.MinimalAot.Service`
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.MinimalAot.Service`
- en: '**Enable Docker**: Cleared.'
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用Docker**：已清除。'
- en: '**Do not use top-level statements**: Cleared.'
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶层语句**：已清除。'
- en: 'In the `Properties` folder, in `launchSettings.json`, note only `http` is configured;
    delete the `launchUrl` and modify the port to use `5083`, as shown highlighted
    in the following configuration:'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Properties`文件夹中，在`launchSettings.json`中，注意只配置了`http`；删除`launchUrl`并修改端口号为`5083`，如下所示，高亮显示的配置：
- en: '[PRE70]'
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In the project file, change invariant globalization to `false`, treat warnings
    as errors, note that native AOT publishing is enabled, and add a package reference
    for SQL Server for ADO.NET, as shown highlighted in the following markup:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，将不变全球化设置为`false`，将警告视为错误，注意原生AOT发布已启用，并为ADO.NET的SQL Server添加一个包引用，如下所示，高亮显示的标记：
- en: '[PRE71]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Add a new class file named `Product.cs`, and modify its contents to define
    a class to represent just the three columns we want from each row in the `Products`
    table, as shown in the following code:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Product.cs`的新类文件，并修改其内容以定义一个类，该类仅代表从`Products`表中的每一行中我们想要的三列，如下所示：
- en: '[PRE72]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Add a new class file named `NorthwindJsonSerializerContext.cs`.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`NorthwindJsonSerializerContext.cs`的新类文件。
- en: 'In `NorthwindJsonSerializerContext.cs`, define a class that enables a `Product`
    and a list of `Product` objects to be serialized as JSON, as shown in the following
    code:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NorthwindJsonSerializerContext.cs`中，定义一个类，该类允许将`Product`和`Product`对象列表序列化为JSON，如下所示：
- en: '[PRE73]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Delete the `Northwind.MinimalAot.Service.http` file.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`Northwind.MinimalAot.Service.http`文件。
- en: Add a new class file named `WebApplication.Extensions.cs`.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`WebApplication.Extensions.cs`的新类文件。
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class that maps some HTTP `GET` requests to return a plain text response, and
    a list of either all products or products with a minimum price from the Northwind
    database using ADO.NET, as shown in the following code:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WebApplication.Extensions.cs`中，为`WebApplication`类定义一个扩展方法，将一些HTTP `GET`请求映射为返回纯文本响应，以及使用ADO.NET从Northwind数据库获取所有产品或最低价格产品的列表，如下所示代码：
- en: '[PRE74]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: With native AOT, we cannot use EF Core, so we are using the lower-level ADO.NET
    SqlClient API. This is faster and more efficient anyway. In the future, perhaps
    with .NET 9 or .NET 10, we will be able to use our EF Core model for Northwind
    instead.
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用原生AOT时，我们无法使用EF Core，因此我们正在使用较低级别的ADO.NET SqlClient API。无论如何，这更快、更高效。在未来，也许在.NET
    9或.NET 10中，我们将能够使用我们的EF Core模型来处理Northwind。
- en: 'In `Program.cs`, note the call to the `CreateSlimBuilder` method, which ensures
    that only the essential features of ASP.NET Core are enabled by default, so it
    minimizes the deployed web service size, as shown in the following code:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注意对`CreateSlimBuilder`方法的调用，这确保默认情况下只启用ASP.NET Core的基本功能，因此它最小化了部署的web服务大小，如下所示代码：
- en: '[PRE75]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `CreateSlimBuilder` method does not include support for HTTPS or HTTP/3,
    although you can add those back in yourself if you need them. It does support
    JSON file configuration for `appsettings.json` and logging.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CreateSlimBuilder`方法不包括对HTTPS或HTTP/3的支持，尽管如果你需要，你可以自己添加这些。它支持`appsettings.json`的JSON文件配置和日志记录。'
- en: 'In `Program.cs`, after the call to `builder.Build()`, delete the statements
    that generated some sample todos and map some endpoints, as shown in the following
    code:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在调用`builder.Build()`之后，删除生成一些示例待办事项和映射一些端点的语句，如下所示代码：
- en: '[PRE76]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'In `Program.cs`, at the bottom of the file, delete the statements that define
    the `Todo` record and `AppJsonSerializerContext` class, as shown in the following
    code:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件底部，删除定义`Todo`记录和`AppJsonSerializerContext`类的语句，如下所示代码：
- en: '[PRE77]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'In `Program.cs`, delete the namespace imports, import the namespaces for our
    JSON serializer context and extension methods, modify the statement that inserts
    the JSON serialization context to use the Northwind one, and then before running
    the web `app`, call the `MapGets` method, as shown highlighted in the following
    code:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除命名空间导入，导入我们的JSON序列化上下文和扩展方法的命名空间，修改插入JSON序列化上下文的语句以使用Northwind的，然后在运行web
    `app`之前调用`MapGets`方法，如下所示高亮显示的代码：
- en: '[PRE78]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: If your database server is not running (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的数据库服务器没有运行（例如，因为你正在Docker、虚拟机或云中托管它），那么请确保启动它。
- en: 'Start the web service project using the `http` profile:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`http`配置文件启动web服务项目：
- en: If you are using Visual Studio 2022, then select the **http** profile in the
    drop-down list and then navigate to **Debug** | **Start Without Debugging** or
    press *Ctrl* + *F5*.
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用Visual Studio 2022，则在下拉列表中选择**http**配置文件，然后导航到**调试** | **不调试启动**或按*Ctrl*
    + *F5*。
- en: 'If you are using Visual Studio Code, then enter the command `dotnet run --launch-profile
    http`, manually start a web browser, and navigate to the web service: `https://localhost:5083/`.'
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用Visual Studio Code，则输入命令`dotnet run --launch-profile http`，手动启动一个web浏览器，并导航到web服务：`https://localhost:5083/`。
- en: 'In the web browser, note the plain text response: `Hello from a native AOT
    minimal API web service.`'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在web浏览器中，注意纯文本响应：`Hello from a native AOT minimal API web service.`。
- en: 'In the address bar, append `/products`, and note the array of products in the
    response, as shown in the following partial output:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地址栏中添加 `/products`，并注意响应中显示的产品数组，如下所示的部分输出：
- en: '[PRE79]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'In the address bar, append `/products/100`, and note the array of two products
    in the response, as shown in the following partial output:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地址栏中添加 `/products/100`，并注意响应中的两个产品数组，如下所示的部分输出：
- en: '[PRE80]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Close the browser and shut down the web server.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭web服务器。
- en: Publishing a native AOT project
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布原生AOT项目
- en: A service that functions correctly during development when the service is untrimmed
    and JIT-compiled could still fail once you publish it using native AOT. You should
    therefore perform a publish before assuming your project will work.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发期间，当服务未经修剪且经过即时编译（JIT）时，功能正常的服务在发布时使用原生AOT可能仍然会失败。因此，在假设项目可以工作之前，你应该先进行发布。
- en: If your project does not produce any AOT warnings at publish time, you can then
    be confident that your service will work after publishing for AOT.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目在发布时没有产生任何AOT警告，那么您可以有信心，您的服务在发布后将会正常工作。
- en: 'Let’s review the source-generated code and publish our web service:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下源生成的代码并发布我们的网络服务：
- en: 'In the `Northwind.MinimalAot.Service` project file, add an element to emit
    compiler-generated files, as shown highlighted in the following markup:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.MinimalAot.Service`项目文件中，添加一个元素以输出编译器生成的文件，如下所示突出显示的标记：
- en: '[PRE81]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Build the `Northwind.MinimalAot.Service` project.
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目`Northwind.MinimalAot.Service`。
- en: If you are using Visual Studio 2022, toggle **Show All Files** in **Solution
    Explorer**.
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用Visual Studio 2022，请在**解决方案资源管理器**中切换**显示所有文件**。
- en: 'Expand the `obj\Debug\net8.0\generated` folder, and note the folders and files
    that have been created by the source generators for AOT and JSON serialization,
    and note that you will be opening some of these files in the next few steps, as
    shown in *Figure 8.10*:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开文件夹`obj\Debug\net8.0\generated`，并注意源生成器为AOT和JSON序列化创建的文件夹和文件，并注意您将在接下来的几个步骤中打开其中一些文件，如图8.10所示：
- en: '![](img/B19587_08_10.png)'
  id: totrans-486
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_08_10.png)'
- en: 'Figure 8.10: Folders and files created by source generators in an AOT web service
    project'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10：AOT网络服务项目中源生成器创建的文件夹和文件
- en: Open the `GeneratedRouteBuilderExtensions.g.cs` file, and note it contains code
    to define the mapped routes for the minimal API web service.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GeneratedRouteBuilderExtensions.g.cs`文件，并注意它包含用于定义最小API网络服务的映射路由的代码。
- en: Open the `NorthwindJsonSerializerContext.Decimal.g.cs` file, and note it contains
    code to serialize a `decimal` value passed as the minimum unit price parameter
    to one of the routes.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`NorthwindJsonSerializerContext.Decimal.g.cs`文件，并注意它包含用于将`decimal`值序列化为作为最小单位价格参数传递给路由之一的代码。
- en: Open the `NorthwindJsonSerializerContext.ListProduct.g.cs` file, and note it
    contains code to serialize a list of `Product` objects returned as a response
    for two of the routes.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`NorthwindJsonSerializerContext.ListProduct.g.cs`文件，并注意它包含用于将`Product`对象列表序列化为响应的代码，这些对象是两条路由之一返回的。
- en: 'In the `Northwind.MinimalAot.Service` folder, at the command prompt or terminal,
    publish the web service using native AOT, as shown in the following command:'
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.MinimalAot.Service`文件夹中，在命令提示符或终端中，使用本地AOT发布网络服务，如下所示命令：
- en: '[PRE82]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Note the message about generating native code and trim warnings for packages
    like `Microsoft.Data.SqlClient`, as shown in the following partial output:'
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意有关生成本地代码以及针对`Microsoft.Data.SqlClient`等包的裁剪警告的消息，如下部分输出所示：
- en: '[PRE83]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: We did not use the `DataTable.ReadXml` method, which is calling a potentially
    trimmed member, so we can ignore the preceding warning.
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们没有使用`DataTable.ReadXml`方法，该方法调用一个可能被裁剪的成员，因此我们可以忽略前面的警告。
- en: Start **File Explorer** and open the `bin\Release\net8.0\win-x64\publish` folder
    and note the EXE file is about 30 MB. This and the `Microsoft.Data.SqlClient.SNI.dll`
    file are the only files that need to be deployed onto another Windows computer
    for the web service to work. The `appsettings.json` files are only needed to override
    configuration if needed. The PDB file is only needed if debugging.
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**文件资源管理器**并打开`bin\Release\net8.0\win-x64\publish`文件夹，并注意EXE文件大约有30MB。这些以及`Microsoft.Data.SqlClient.SNI.dll`文件是需要在另一台Windows计算机上部署以使网络服务正常工作的唯一文件。`appsettings.json`文件仅在需要覆盖配置时才需要。PDB文件仅在调试时需要。
- en: 'Run the `Northwind.MinimalAot.Service.exe`, and note the web service starts
    up very fast and it will use port `5000` by default, as shown in *Figure 8.11*:'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`Northwind.MinimalAot.Service.exe`，并注意网络服务启动非常快，它默认将使用端口`5000`，如图8.11所示：
- en: '![](img/B19587_08_11.png)Figure 8.11: File Explorer showing published executable
    and running the AOT web service'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/B19587_08_11.png)图8.11：文件资源管理器显示已发布的可执行文件和正在运行AOT网络服务'
- en: Start a web browser, navigate to `http://localhost:5000/`, and note the web
    service works correctly by returning the plain text response.
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个网页浏览器，导航到`http://localhost:5000/`，并注意网络服务通过返回纯文本响应来正确工作。
- en: Navigate to `http://localhost:5000/products/100`, and note the web service responds
    with the two products that have a minimum unit price of 100.
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:5000/products/100`，并注意网络服务响应包含最小单位价格为100的两个产品。
- en: Close the web browser and shut down the web service.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭网页浏览器并关闭网络服务。
- en: 'In the `Northwind.WebApi.Service` project file, at the command prompt or terminal,
    publish the web service, as shown in the following command:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi.Service`项目文件中，在命令提示符或终端中发布网络服务，如下所示命令：
- en: '[PRE84]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Start **File Explorer**, open the `bin\Release\net8.0\win-x64\publish` folder,
    and note the `Northwind.WebApi.Service.exe` file is less than 154 KB. That is
    because it is framework-dependent, meaning it needs .NET installed on the computer
    to work. Also, there are many files that must be deployed along with the EXE file
    that add up to about 14 MB.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **文件资源管理器**，打开 `bin\Release\net8.0\win-x64\publish` 文件夹，并注意 `Northwind.WebApi.Service.exe`
    文件小于 154 KB。这是因为它是框架依赖的，意味着它需要在计算机上安装 .NET 才能工作。此外，还有许多必须与 EXE 文件一起部署的文件，总大小约为
    14 MB。
- en: Run the `Northwind.MinimalAot.Service.exe` and note the web service starts up
    slower than the AOT version and it will use port `5000` by default.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `Northwind.MinimalAot.Service.exe` 并注意网络服务启动速度比 AOT 版本慢，并且它将默认使用端口 `5000`。
- en: Start a web browser, navigate to `http://localhost:5000/`, and note the web
    service works correctly by returning the plain text response.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网页浏览器，导航到 `http://localhost:5000/`，并注意通过返回纯文本响应，该网络服务运行正常。
- en: Navigate to `http://localhost:5000/products/100`, and note the web service responds
    with the two products that have a minimum unit price of 100 but the response is
    slower than the AOT version.
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `http://localhost:5000/products/100`，并注意网络服务响应了两个最小单位价格为 100 的产品，但响应速度比
    AOT 版本慢。
- en: Close the web browser and shut down the web service.
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭网页浏览器并关闭网络服务。
- en: Many .NET developers have been waiting for AOT compilation for a long time.
    Microsoft is finally delivering on the promise, and it will expand to cover more
    project types over the next few major versions, so it’s a technology to keep an
    eye on.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 .NET 开发者已经期待 AOT 编译很长时间了。微软终于兑现了承诺，并且它将在接下来的几个主要版本中扩展以覆盖更多项目类型，因此这是一个需要关注的科技。
- en: Understanding identity services
  id: totrans-510
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解身份服务
- en: Identity services are used to authenticate and authorize users. It is important
    for these services to implement open standards so that you can integrate disparate
    systems. Common standards include **OpenID Connect** and **OAuth 2.0**.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 身份服务用于验证和授权用户。对于这些服务实现开放标准非常重要，这样您就可以集成不同的系统。常见的标准包括 **OpenID Connect** 和 **OAuth
    2.0**。
- en: Microsoft has no plans to officially support third-party authentication servers
    like **IdentityServer4** because “creating and sustaining an authentication server
    is a full-time endeavor, and Microsoft already has a team and a product in that
    area, Azure Active Directory, which allows 500,000 objects for free.”
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 微软没有计划正式支持像 **IdentityServer4** 这样的第三方身份验证服务器，因为“创建和维护一个身份验证服务器是一项全职工作，微软已经在该领域有一个团队和一个产品，即
    Azure Active Directory，它允许免费使用 500,000 个对象。”
- en: JWT bearer authorization
  id: totrans-513
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JWT 承载授权
- en: '**JSON Web Token** (**JWT**) is a standard that defines a compact and secure
    method to transmit information as a JSON object. The JSON object is digitally
    signed so it can be trusted. The most common scenario for using JWT is authorization.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON Web Token** (**JWT**) 是一个标准，它定义了一种紧凑且安全的方法来以 JSON 对象的形式传输信息。该 JSON 对象经过数字签名，因此可以信任。使用
    JWT 最常见的场景是授权。'
- en: A user logs in to a trusted party using credentials like a username and password
    or biometric scan or two-factor authentication, and the trusted party issues a
    JWT. This is then sent with every request to the secure web service.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 用户使用用户名和密码或生物识别扫描或双因素认证等凭证登录到受信任方，受信任方颁发 JWT。然后，它将与每个请求一起发送到安全的网络服务。
- en: 'In their compact form, JWTs consist of three parts separated by dots. These
    parts are the *header*, *payload*, and *signature*, as shown in the following
    format: `aaa.bbb.ccc`. The header and payload are Base64 encoded.'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在其紧凑形式中，JWT 由三个部分组成，由点分隔。这些部分是 *头部*、*负载* 和 *签名*，如下所示：`aaa.bbb.ccc`。头部和负载是 Base64
    编码的。
- en: Authenticating service clients using JWT bearer authentication
  id: totrans-517
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JWT 承载身份验证验证服务客户端
- en: During local development, the `dotnet user-jwts` command-line tool is used to
    create and manage local JWTs. The values are stored in a JSON file in the local
    machine’s user profile folder.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地开发过程中，使用 `dotnet user-jwts` 命令行工具来创建和管理本地 JWT。这些值存储在本地机器用户配置文件文件夹中的 JSON
    文件中。
- en: 'Let’s secure the web service using JWT bearer authentication and test it with
    a local token:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 JWT 承载身份验证来保护网络服务，并使用本地令牌进行测试：
- en: 'In the `Northwind.WebApi.Service` project, add a reference to the package for
    JWT bearer authentication, as shown in the following markup:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Service` 项目中，添加对 JWT 承载身份验证包的引用，如下所示：
- en: '[PRE85]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Build the `Northwind.WebApi.Service` project to restore packages.
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.WebApi.Service` 项目以恢复包。
- en: 'In `Program.cs`, after creating the `builder`, add statements to add authorization
    and authentication using JWT, as shown highlighted in the following code:'
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在创建 `builder` 之后，添加语句以使用 JWT 添加授权和身份验证，如下所示（高亮显示）：
- en: '[PRE86]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'In `Program.cs`, after building the app, add a statement to use authorization,
    as shown highlighted in the following code:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在构建应用程序之后，添加一个语句来使用授权，如下所示（高亮显示）：
- en: '[PRE87]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'In `WebApplication.Extensions.cs`, import the namespace for security claims,
    as shown in the following code:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 中，导入安全声明的命名空间，如下所示：
- en: '[PRE88]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'In `WebApplication.Extensions.cs`, after mapping an HTTP `GET` request for
    the root path to return a plain text `Hello World` response, add a statement to
    map an HTTP `GET` request for the secret path to return the authenticated user’s
    name if they are authorized, as shown in the following code:'
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WebApplication.Extensions.cs` 中，在将根路径的 HTTP `GET` 请求映射到返回纯文本 `Hello World`
    响应之后，添加一个语句将秘密路径的 HTTP `GET` 请求映射到如果授权则返回认证用户的名称，如下所示：
- en: '[PRE89]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'In the `Northwind.WebApi.Service` project folder, at the command prompt or
    terminal, create a local JWT, as shown in the following command:'
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Service` 项目文件夹中，在命令提示符或终端中，创建一个本地 JWT，如下所示：
- en: '[PRE90]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Note the automatically assigned `ID`, `Name`, and `Token`, as shown in the
    following partial output:'
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意自动分配的 `ID`、`Name` 和 `Token`，如下所示的部分输出：
- en: '[PRE91]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'At the command prompt or terminal, print all the information for the ID that
    was assigned, as shown in the following command:'
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，打印分配的 ID 的所有信息，如下所示：
- en: '[PRE92]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Note the scheme is `Bearer` so the token must be sent with every request, the
    audience(s) lists the authorized client domains and port numbers, the token expires
    after three months, the JSON objects represent the header and payload, and finally,
    there’s the compact token with its Base64-encoded three parts separated by dots,
    as shown in the following partial output:'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意方案是 `Bearer`，因此必须在每次请求中发送令牌，受众列表列出了授权客户端域名和端口号，令牌在三个月后过期，JSON 对象表示头和有效负载，最后是紧凑型令牌，其
    Base64 编码的三部分由点分隔，如下所示的部分输出：
- en: '[PRE93]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'In the `Northwind.WebApi.Service` project, in `appsettings.Development.json`,
    note the new section named `Authentication`, as shown highlighted in the following
    configuration:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi.Service` 项目中，在 `appsettings.Development.json` 中，注意名为 `Authentication`
    的新部分，如下所示（高亮显示）：
- en: '[PRE94]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无调试的 `https` 配置启动 `Northwind.WebApi.Service` 项目。
- en: In the browser, change the relative path to `/secret` and note the response
    is rejected with a 401 status code.
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，将相对路径更改为 `/secret` 并注意响应被拒绝，状态码为 401。
- en: Start Visual Studio Code and open the `HttpRequests` folder.
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio Code 并打开 `HttpRequests` 文件夹。
- en: 'In the `HttpRequests` folder, create a file named `webapi-secure-request.http`
    and modify its contents to contain a request to get the secret ingredient, as
    shown in the following code (but use your `Bearer` token, of course):'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HttpRequests` 文件夹中，创建一个名为 `webapi-secure-request.http` 的文件，并修改其内容以包含获取秘密成分的请求，如下所示（但当然使用您的
    `Bearer` 令牌）：
- en: '[PRE95]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Click **Send Request**, and note the response, as shown in the following output:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **发送请求**，并注意响应，如下所示：
- en: '[PRE96]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Close the browser and shut down the web service.
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭网络服务。
- en: Practicing and exploring
  id: totrans-549
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些实际操作练习，以及更深入地研究本章主题来测试您的知识和理解。
- en: Exercise 8.1 – Test your knowledge
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8.1 – 测试您的知识
- en: 'Answer the following questions:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: List six method names that can be specified in an HTTP request.
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出六个可以在 HTTP 请求中指定的方法名。
- en: List six status codes and their descriptions that can be returned in an HTTP
    response.
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出六个可以返回的 HTTP 响应状态码及其描述。
- en: How is the ASP.NET Core Minimal APIs service technology different from the ASP.NET
    Core Web APIs service technology?
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ASP.NET Core Minimal APIs 服务技术与 ASP.NET Core Web APIs 服务技术有何不同？
- en: With the ASP.NET Core Minimal APIs service technology, how do you map an HTTP
    `PUT` request to `api/customers` to a lambda statement block?
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core Minimal APIs 服务技术，您如何将 HTTP `PUT` 请求映射到 `api/customers` 的 lambda
    语句块？
- en: With the ASP.NET Core Minimal APIs service technology, how do you map a method
    or lambda parameter to a value in a route, query string, or the body of the request?
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core 最小 API 服务技术，您如何将方法或 lambda 参数映射到路由、查询字符串或请求体中的值？
- en: Does enabling CORS increase security for a web service?
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 CORS 是否会增加 Web 服务的安全性？
- en: You have added statements to `Program.cs` to enable HTTP logging but HTTP requests
    and responses are not being logged. What is the most likely reason and how can
    you fix it?
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已在 `Program.cs` 中添加了语句以启用 HTTP 日志记录，但 HTTP 请求和响应并未被记录。最可能的原因是什么，以及如何修复它？
- en: How do you limit the rate of requests for a specific client using the `AspNetCoreRateLimit`
    package?
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何使用 `AspNetCoreRateLimit` 包限制特定客户端的请求数量？
- en: How do you limit the rate of requests for a specific endpoint using the `Microsoft.AspNetCore.RateLimiting`
    package?
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何使用 `Microsoft.AspNetCore.RateLimiting` 包限制特定端点的请求数量？
- en: What does JWT mean?
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JWT 代表什么？
- en: Exercise 8.2 – Review Microsoft HTTP API design policy
  id: totrans-563
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8.2 – 审查 Microsoft HTTP API 设计策略
- en: 'Microsoft has internal HTTP/REST API design guidelines. Microsoft teams reference
    this document when designing their HTTP APIs. They are a great starting point
    for your own standards for HTTP APIs. You can review them at the following link:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 微软有内部 HTTP/REST API 设计指南。微软团队在设计他们的 HTTP API 时会参考此文档。它们是您自己 HTTP API 标准的绝佳起点。您可以在以下链接中查看它们：
- en: '[https://github.com/microsoft/api-guidelines](https://github.com/microsoft/api-guidelines)'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/microsoft/api-guidelines](https://github.com/microsoft/api-guidelines)'
- en: 'The guidelines have a section specific to CORS and you can review them at the
    following link:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 指南中有一个专门针对 CORS 的部分，您可以通过以下链接查看它们：
- en: '[https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#8-cors](https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#8-cors)'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#8-cors](https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#8-cors)'
- en: Exercise 8.3 – Explore topics
  id: totrans-568
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8.3 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-8---building-and-securing-web-services-using-minimal-apis](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-8---building-and-securing-web-services-using-minimal-apis)'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-8---building-and-securing-web-services-using-minimal-apis](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-8---building-and-securing-web-services-using-minimal-apis)'
- en: Exercise 8.4 – Exposing data via the web using OData services
  id: totrans-571
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8.4 – 通过 OData 服务公开数据
- en: 'Learn how to quickly implement a Web API service that can wrap an EF Core entity
    model using OData in this online-only chapter:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 在本在线章节中学习如何快速实现一个可以使用 OData 包装 EF Core 实体模型的 Web API 服务：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-odata.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-odata.md)'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-odata.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-odata.md)'
- en: Exercise 8.5 – Auth0 project templates
  id: totrans-574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8.5 – Auth0 项目模板
- en: 'If you need to implement Auth0 for authentication and authorization, then you
    can use project templates to scaffold your code. An article describing these project
    templates and how to use them is found at the following link:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要实现 Auth0 进行身份验证和授权，则可以使用项目模板来生成代码。描述这些项目模板及其使用方法的文章可在以下链接中找到：
- en: '[https://auth0.com/blog/introducing-auth0-templates-for-dotnet/](https://auth0.com/blog/introducing-auth0-templates-for-dotnet/)'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://auth0.com/blog/introducing-auth0-templates-for-dotnet/](https://auth0.com/blog/introducing-auth0-templates-for-dotnet/)'
- en: Summary
  id: totrans-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned how to:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何：
- en: Build a web service that implements the REST architectural style using minimal
    APIs.
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个实现 REST 架构风格的 Web 服务，使用最小 API。
- en: Relax the same-origin security policy for specified domains and ports using
    CORS.
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CORS 释放特定域名和端口的同源安全策略。
- en: Implement two different rate-limiting packages to prevent denial of service
    attacks.
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现两个不同的速率限制包以防止拒绝服务攻击。
- en: Secure services using JWT bearer authorization.
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JWT 持有者授权来保护服务。
- en: In the next chapter, you will learn how to build reliable and scalable services
    by adding features like caching, queues, and automatic handling of transient faults
    using libraries like Polly.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何通过添加缓存、队列和自动处理短暂故障等特性，使用 Polly 等库构建可靠和可扩展的服务。
