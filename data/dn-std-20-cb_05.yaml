- en: XML and Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML和数据
- en: 'In this chapter, we will be looking at these recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下食谱：
- en: Creating a library that reads and writes to an XML file
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个读取和写入XML文件的库
- en: Creating an ASP.NET MVC application to use the XMLLib library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用XMLLib库的ASP.NET MVC应用程序
- en: Processing an XML file using LINQ to XML
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LINQ to XML处理XML文件
- en: Creating a .NET Core console application to use the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的.NET Core控制台应用程序
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备基本的C#知识。他们还应具备使用Visual Studio、使用NuGet安装包以及在其他项目中引用库的基本知识。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter05](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter05)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter05](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter05)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[https://goo.gl/uQTMeB](https://goo.gl/uQTMeB)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/uQTMeB](https://goo.gl/uQTMeB)'
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: XML stands for Extensible Markup Language and is similar to HTML. XML is used
    to store and read data. Mainly, XML is a data storage system and is also used
    to transport data. C# supports XML within the language using the `System.XML`
    namespace. You will be able to read, write, and parse XML data using this namespace.
    With the support of LINQ, it's much easier to work with XML-based data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: XML代表可扩展标记语言，类似于HTML。XML用于存储和读取数据。主要来说，XML是一个数据存储系统，也用于传输数据。C#使用`System.XML`命名空间在语言内部支持XML。您将能够使用此命名空间读取、写入和解析XML数据。有了LINQ的支持，处理基于XML的数据变得更加容易。
- en: Creating a library that reads and writes to an XML file
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个读取和写入XML文件的库
- en: In this recipe, we will be using a .NET Standard 2.0 library to create and write
    to an XML file. We will also be using the same library to write data to an XML
    file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用.NET Standard 2.0库来创建和写入XML文件。我们还将使用相同的库将数据写入XML文件。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's fire up Visual Studio 2017 and get things done. Make sure you have the
    latest version of Visual Studio 2017 installed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动Visual Studio 2017并完成任务。请确保您已安装Visual Studio 2017的最新版本。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”以创建项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择“Visual Studio解决方案”。在右侧窗格中，选择“空白解决方案”。
- en: 'In the Name: textbox, type `Chapter5.XmlDoc` and, in the Location: textbox,
    select path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，键入`Chapter5.XmlDoc`，并在“位置：”文本框中，从下拉框中选择路径或点击“浏览...”按钮定位路径：
- en: '![](img/308964a5-35b3-47ac-b647-0fbc05f0425c.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/308964a5-35b3-47ac-b647-0fbc05f0425c.png)'
- en: Click OK.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/96bc893c-26ec-4e4d-a96c-c360b7e456e2.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/96bc893c-26ec-4e4d-a96c-c360b7e456e2.png)'
- en: Now, right-click on the `Chapter5.XmlDoc` label in the Solution Explorer and
    select Add | New Project.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的`Chapter5.XmlDoc`标签上右键单击，然后选择“添加”|“新建项目”。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库(.NET Standard)：
- en: '![](img/b7564635-db3a-4afd-b5ca-386f3d5ed78d.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b7564635-db3a-4afd-b5ca-386f3d5ed78d.png)'
- en: 'Now, in the Name: textbox, type `Chapter5.XmlDoc.XmlLib`, leave the other defaults
    as they are, and click OK:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，键入`Chapter5.XmlDoc.XmlLib`，保留其他默认设置，然后点击“确定”：
- en: '![](img/188216b7-5008-4b33-bd0c-c82e51e5cd20.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/188216b7-5008-4b33-bd0c-c82e51e5cd20.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/270f9692-ea73-47d6-a722-2f160463e753.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/270f9692-ea73-47d6-a722-2f160463e753.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `XMLLog.cs`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，然后按*F2*键重命名文件为`XMLLog.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中回答“是”，以将类名也重命名。
- en: Now double-click on the `XMLLog.cs` label in the Solution Explorer.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击`XMLLog.cs`标签。
- en: 'Scroll up until you reach the `using` directives and add these at the end of
    the last `using` directive:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上滚动，直到到达`using`指令，并在最后一个`using`指令的末尾添加以下内容：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, scroll down and add this class variable on top of the `XMLLog` class:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向下滚动并在`XMLLog`类上方添加以下类变量：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s add the constructor for the `XMLLog` class:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为`XMLLog`类添加构造函数：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following public method after the constructor of the class:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类的构造函数之后添加以下公共方法：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, add this code next to the `WriteToLog()` method:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`WriteToLog()`方法旁边添加以下代码：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按*Ctrl* + *Shift* + *B*进行快速构建。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created a blank solution in steps 1 to 5 and gave the solution a proper name.
    Blank solutions are always a good start for a project of any scale. Then, in steps
    6 to 10, we added a .NET Standard 2.0 library project to the solution. In steps
    11, 12, and 13, we renamed the default class template generated from Visual Studio.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到5中，我们创建了一个空白解决方案，并为解决方案赋予了合适的名称。然后，在步骤6到10中，我们将一个.NET Standard 2.0库项目添加到解决方案中。在步骤11、12和13中，我们将Visual
    Studio生成的默认类模板重命名。
- en: In step 15, we added all the required namespaces for our library. `System.Xml`
    and `System.Xml.Linq` are the two namespaces we are going to focus on. `System.Xml`
    gives you the functionality of creating and maintaining XML documents. `System.Xml.Linq`
    is a LINQ extension to manipulate XML data.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤15中，我们为我们的库添加了所有必需的命名空间。`System.Xml`和`System.Xml.Linq`是我们将要关注的两个命名空间。`System.Xml`提供了创建和维护XML文档的功能。`System.Xml.Linq`是LINQ的扩展，用于操作XML数据。
- en: In step 16, we created a class-level private variable to store the path of the
    XML file. In step 17, we created the constructor for the class that takes a parameter
    as a string. This parameter is the filename with the path of the XML file. It
    also populates the private variable created in step 16\. In step 18, we added
    a public method to write an XML file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤16中，我们创建了一个类级别的私有变量来存储XML文件的路径。在步骤17中，我们为类创建了一个构造函数，该构造函数接受一个字符串参数。该参数是带有XML文件路径的文件名。它还填充了步骤16中创建的私有变量。在步骤18中，我们添加了一个公共方法来写入XML文件。
- en: 'In the first line of code, we check for the existence of the XML file. If it
    doesn''t exist, the following piece of code will take over:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第一行，我们检查XML文件是否存在。如果它不存在，以下代码块将接管：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have used the `XmlWriter` class and its `Create` method to create the XML
    file. In this case, it is wrapped inside a `using` keyword. This is a good practice
    if the class is implementing an `IDisposable` interface, and when the lifetime
    is limited to a method. The `using` statement calls the `Dispose` method on the
    object in the correct way, and it also causes the object itself to go out of scope
    as soon as `Dispose` is called. Finally, the `XmlWriter` class's `Flush()` method
    will clear the buffer and the `Close()` method will close the writer stream.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`XmlWriter`类及其`Create`方法来创建XML文件。在这种情况下，它被包含在一个`using`关键字中。如果类实现了`IDisposable`接口，并且其生命周期限制在方法内，这是一个好的实践。`using`语句以正确的方式调用对象的`Dispose`方法，并且一旦调用`Dispose`，对象本身就会超出作用域。最后，`XmlWriter`类的`Flush()`方法将清除缓冲区，而`Close()`方法将关闭写入流。
- en: 'In the next few lines of code, we started writing the document, and finally
    we cleared things up and closed the `XmlWriter`. If the file exists, we created
    a few lines of code to handle the existing XML document and append data to it.
    The code looks like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几行代码中，我们开始编写文档，并最终澄清了问题并关闭了`XmlWriter`。如果文件存在，我们编写了一些代码来处理现有的XML文档并将其数据附加到它上。代码如下：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this part of the code, we created an `XDocument` class to handle the existing
    XML file. This class is referenced from the `System.Xml.Linq` namespace. In the
    first line, we loaded the existing XML file. We looked for the root element of
    the document in the second line. We picked up all the descendants of the root
    element and picked the last element from that list. This is the point at which
    we are going to add the new data. We have used the `AddAfterSelf()` method to
    add the new entry to the XML document and finally, we saved the document.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们创建了一个`XDocument`类来处理现有的XML文件。这个类是从`System.Xml.Linq`命名空间引用的。在第一行，我们加载了现有的XML文件。在第二行，我们查找文档的根元素。我们从根元素的子元素中选取所有后代，并从该列表中选取最后一个元素。这就是我们将添加新数据的位置。我们使用了`AddAfterSelf()`方法将新条目添加到XML文档中，并最终保存了文档。
- en: 'In step 19, we created a method to read an existing XML document. In the first
    line, we created a dictionary to store the data we read from the XML document.
    Then, we checked whether the file is there to read and created code to read the
    file. We used the `XmlReader()` class this time to read the data and store it
    in the dictionary:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 19 步中，我们创建了一个读取现有 XML 文档的方法。在第一行，我们创建了一个字典来存储我们从 XML 文档中读取的数据。然后，我们检查文件是否存在以进行读取，并创建了读取文件的代码。这次我们使用了
    `XmlReader()` 类来读取数据并将其存储在字典中：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have used a `while` loop to go through each line of the XML document and
    used a `switch` statement to check for the correct element and store it in the
    dictionary. As you can see, by using a `counter` (`line`) variable, we have created
    a unique key for the dictionary as well. Finally, we returned the populated dictionary.
    In step 20, we performed a quick build to check for correct syntax.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个 `while` 循环来遍历 XML 文档的每一行，并使用 `switch` 语句来检查正确的元素并将其存储在字典中。如您所见，通过使用
    `counter` (`line`) 变量，我们还为字典创建了一个唯一的键。最后，我们返回了已填充的字典。在第 20 步中，我们执行了快速构建以检查语法是否正确。
- en: Creating an ASP.NET MVC application to use the XMLLib library
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用于使用 XMLLib 库的 ASP.NET MVC 应用程序
- en: In this recipe, we will be creating an ASP.NET MVC application to use the library.
    This time, it will be under Windows and will be using the full .NET Framework
    under Windows.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个 ASP.NET MVC 应用程序来使用这个库。这次，它将在 Windows 下运行，并将在 Windows 下使用完整的
    .NET Framework。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's make sure we have completed the previous recipe. In that recipe, we built
    a .NET Standard 2.0 library to create and read an XML document. Let's create an
    ASP.NET MVC application to use the library.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们已经完成了之前的配方。在那个配方中，我们构建了一个 .NET Standard 2.0 库来创建和读取 XML 文档。现在让我们创建一个 ASP.NET
    MVC 应用程序来使用这个库。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter5.XmlDoc` solution.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个配方中的解决方案。点击 文件 | 打开 | 打开项目/解决方案，或按 *Ctrl* + *Shift* + *O*，然后选择 `Chapter5.XmlDoc`
    解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建以检查一切是否正常。
- en: Now, click on the `Chapter5.XmlDoc` solution label. Click File | Add | New Project.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击 `Chapter5.XmlDoc` 解决方案标签。点击 文件 | 添加 | 新项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的 Visual C# 节点。
- en: 'Select Web and select ASP.NET Web Application (.NET Framework) in the right-hand
    pane:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Web，然后在右侧窗格中选择 ASP.NET Web 应用程序（.NET Framework）：
- en: '![](img/68268733-a659-4d33-a786-b736c0960b86.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68268733-a659-4d33-a786-b736c0960b86.png)'
- en: 'Now, in the Name: textbox, type `Chapter5.XmlDoc.XmlMVC` as the name and leave
    the Location: textbox at its default value:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，键入 `Chapter5.XmlDoc.XmlMVC` 作为名称，并将“位置：”文本框保留在默认值：
- en: '![](img/7f548e56-a535-4f90-9c9d-50eb42fd5f0f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f548e56-a535-4f90-9c9d-50eb42fd5f0f.png)'
- en: In the New ASP.NET Web Application dialog box, select Empty from the template
    list.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建 ASP.NET 网络应用程序”对话框中，从模板列表中选择空模板。
- en: 'Select MVC in the Add folders and core references for: option:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加文件夹和核心引用”选项中，选择 MVC。
- en: '![](img/771c4ff1-22f6-4999-922f-fec4d72b0600.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/771c4ff1-22f6-4999-922f-fec4d72b0600.png)'
- en: Leave the rest as it is and click OK to create the default ASP.NET MVC web application
    template.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其余保持不变，点击确定以创建默认的 ASP.NET MVC 网络应用程序模板。
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/78b382b8-ac7d-4d9c-a240-f19fef0f749f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78b382b8-ac7d-4d9c-a240-f19fef0f749f.png)'
- en: Now, right-click on the References label under the `Chapter5.XmlDoc.XmlMVC`
    project and select Add Reference.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `Chapter5.XmlDoc.XmlMVC` 项目下的引用标签上右键单击，并选择添加引用。
- en: 'In the Reference Manager dialog box, select Projects in the left-hand pane
    and select `Chapter5.XmlDoc.XmLib` in the right-hand pane:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“引用管理器”对话框中，在左侧窗格中选择项目，然后在右侧窗格中选择 `Chapter5.XmlDoc.XmLib`：
- en: '![](img/23270984-2046-4736-9c77-a3e8a6f5ddfe.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23270984-2046-4736-9c77-a3e8a6f5ddfe.png)'
- en: Click OK.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now, right-click on the `Controllers` folder inside the `Chapter5.XmlDoc.XmlMVC`
    project.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `Chapter5.XmlDoc.XmlMVC` 项目中的 `Controllers` 文件夹上右键单击。
- en: Select Add | Controller.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 添加 | 控制器。
- en: 'In the Add Scaffold dialog box, select MVC 5 Controller – Empty from the template
    list and click Add:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加模板”对话框中，从模板列表中选择 MVC 5 控制器 – 空模板，然后点击添加：
- en: '![](img/9c589a67-dbdd-4512-a1e1-9247e2af7353.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c589a67-dbdd-4512-a1e1-9247e2af7353.png)'
- en: 'Now, in the Add Controller dialog box, type `HomeController` in the Controller
    name: textbox:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在添加控制器对话框中，在控制器名称：文本框中键入`HomeController`：
- en: '![](img/e8dea97a-c1bf-4e9a-8065-632b50bd4e6a.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e8dea97a-c1bf-4e9a-8065-632b50bd4e6a.png)'
- en: Click Add.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加。
- en: Now double-click on the `HomeController.cs` label under the `Controllers` folder.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在双击`Controllers`文件夹下的`HomeController.cs`标签。
- en: In the code window, right-click on the `Index()` method name and select Add
    View.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，右键单击`Index()`方法名称并选择添加视图。
- en: 'Leave the defaults in the Add View dialog box and click Add:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加视图对话框中保留默认设置并点击添加：
- en: '![](img/fefa72b9-9813-4ef8-bdae-de5dd42398b8.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fefa72b9-9813-4ef8-bdae-de5dd42398b8.png)'
- en: Click on the `HomeController.cs` tab in the code window.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击代码窗口中的`HomeController.cs`标签页。
- en: 'Add this `using` directive to the top of the code, next to the last line of
    the directives:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此`using`指令添加到代码的顶部，紧邻指令的最后一行：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s add this code inside the `Index()` method and before the `return`
    statement:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将此代码添加到`Index()`方法中，并在`return`语句之前：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Press *F5* to test our code and you should get an output like this:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*测试我们的代码，你应该得到如下输出：
- en: '![](img/6904df07-be57-4445-94eb-48c45fceca58.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6904df07-be57-4445-94eb-48c45fceca58.png)'
- en: 'Now close the browser and, in the Solution Explorer, click on the Show All
    Files icon:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在关闭浏览器，然后在解决方案资源管理器中点击显示所有文件图标：
- en: '![](img/b4b77462-fc32-4963-9491-7d8e8c92ddc4.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b4b77462-fc32-4963-9491-7d8e8c92ddc4.png)'
- en: 'Now you should see that the `textlog.xml` label is created and the Solution
    Explorer should look like this:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该看到创建了`textlog.xml`标签，解决方案资源管理器应该看起来像这样：
- en: '![](img/ed2d8c18-9147-4f0c-8ed4-496a1c7acbb7.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed2d8c18-9147-4f0c-8ed4-496a1c7acbb7.png)'
- en: 'Click on the `testlog.xml` label and you should see output similar to this:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`testlog.xml`标签，你应该看到类似的输出：
- en: '![](img/0f9b9cd3-ff3b-4acc-8128-c50fa291f6f2.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0f9b9cd3-ff3b-4acc-8128-c50fa291f6f2.png)'
- en: 'Now, let''s click on the `HomeController.cs` tab and add this code next to
    the `Index()` method:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们点击`HomeController.cs`标签页，并在`Index()`方法旁边添加此代码：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, right-click on the `Display()` method name and select Add View.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击`Display()`方法名称并选择添加视图。
- en: Follow step 22 to add the view.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照步骤22添加视图。
- en: 'Now, in `Display.cshtml`, add the following code next to the `<h2>` tags:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Display.cshtml`中，在`<h2>`标签旁边添加以下代码：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, let's press *F5* to debug the code. By default, this should load `Display.chtml`
    in the browser; if not, type `http://locahost<portnumber/Home/Display` and press
    *Enter*.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们按*F5*来调试代码。默认情况下，这应该在浏览器中加载`Display.chtml`；如果不是，请输入`http://locahost<portnumber>/Home/Display`并按*Enter*。
- en: 'You should see output similar to this:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到类似的输出：
- en: '![](img/24ccc89b-f5fc-4075-bf57-d5c7f4070818.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24ccc89b-f5fc-4075-bf57-d5c7f4070818.png)'
- en: Now close your browser and we are done.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，关闭你的浏览器，我们就完成了。
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 10, we opened an existing solution that contained the library
    for reading and writing XML files. Then, in these steps, we added an ASP.NET MVC
    project to that solution. In step 13, we added a reference to our library built
    in the previous recipe. This will allow you to access available methods from the
    library.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到10中，我们打开了一个包含用于读取和写入XML文件库的现有解决方案。然后，在这些步骤中，我们向该解决方案添加了一个ASP.NET MVC项目。在步骤13中，我们添加了对之前菜谱中构建的库的引用。这将允许你访问库中的可用方法。
- en: 'In steps 16 to 20, we added a controller to the project and named it `HomeController`.
    In step 24, we added a `using` directive to reference the library. In step 25,
    we created code to create an instance of the `XMLLog` class and used it in methods
    to create and write to the XML document. In the following line of code, we are
    giving the path and name of our XML file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤16到20中，我们向项目中添加了一个控制器，并将其命名为`HomeController`。在步骤24中，我们添加了一个`using`指令来引用库。在步骤25中，我们编写了创建`XMLLog`类实例的代码，并在创建和写入XML文档的方法中使用它。在以下代码行中，我们提供了我们的XML文件的路径和名称：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Server.MapPath("~")` guarantees the file is created at the root of our web
    folder. In steps 26 to 29, we confirmed our code is working and the XML file is
    created with the log entries. In step 30, we created a new action for our `HomeController`.
    We created an instance of the `XMLLog` class and used it in methods to read the
    information from the log file. Then we stored the values in `ViewBag`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`Server.MapPath("~")`确保文件被创建在我们的Web文件夹的根目录。在步骤26到29中，我们确认了我们的代码正在工作，并且XML文件已创建并包含日志条目。在步骤30中，我们为`HomeController`创建了一个新的操作。我们创建了一个`XMLLog`类的实例，并在方法中使用它来从日志文件中读取信息。然后我们将值存储在`ViewBag`中：'
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In step 32, we created a view for the `Display` action, such as we did in step
    22\. Then we added code for the view in step 32, which converted `ViewBag` to
    a dictionary and displayed the content inside it. Finally, we tested the output
    in steps 34 and 35.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤32中，我们为`Display`操作创建了一个视图，就像我们在步骤22中所做的那样。然后在步骤32中为视图添加了代码，将`ViewBag`转换为字典并显示其内容。最后，我们在步骤34和35中测试了输出。
- en: Processing an XML file using LINQ to XML
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ to XML处理XML文件
- en: In this recipe, we will be building a .NET Standard 2.0 library that reads XML
    data using LINQ to XML. LINQ to XML is a LINQ enabled in-memory programming interface.
    It enables you to work with XML using your favorite .NET language. C# is used
    in this book to describe the code. In this recipe, we will mainly be looking at
    querying an XML document using LINQ to XML. We have used LINQ to XML to write
    to an XML file in the *A library that reads and writes to an XML file* recipe.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将构建一个.NET Standard 2.0库，该库使用LINQ to XML读取XML数据。LINQ to XML是一个启用LINQ的内存编程接口。它允许你使用你喜欢的.NET语言处理XML。本书使用C#来描述代码。在本食谱中，我们将主要查看使用LINQ
    to XML查询XML文档。我们在“A library that reads and writes to an XML file”食谱中使用了LINQ to
    XML来写入XML文件。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes you have used LINQ. We are focusing on LINQ with XML documents.
    Let's fire up Visual Studio and get started.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设你已经使用了LINQ。我们专注于使用XML文档的LINQ。让我们启动Visual Studio并开始吧。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目以创建项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择Visual Studio解决方案。在右侧窗格中选择空白解决方案。
- en: 'In the Name: textbox, type `Chapter5.XmlLinq` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，输入`Chapter5.XmlLinq`，在“位置”文本框中，从下拉框中选择路径或点击浏览...按钮定位路径：
- en: '![](img/cb5f87f6-ad6b-4fdb-b062-b9d8047d724a.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cb5f87f6-ad6b-4fdb-b062-b9d8047d724a.png)'
- en: Click OK.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/54bb3e4b-3592-4274-abf3-78fc9eece2dd.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54bb3e4b-3592-4274-abf3-78fc9eece2dd.png)'
- en: Now, right-click on the `Chapter5.XmlLinq` label in the Solution Explorer and
    select Add | New Project.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的`Chapter5.XmlLinq`标签上右键单击，并选择添加 | 新项目。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开Visual C#节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库(.NET Standard)：
- en: '![](img/93da862e-656c-4cd7-8a44-3e04475ac5ef.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/93da862e-656c-4cd7-8a44-3e04475ac5ef.png)'
- en: 'Now, in the Name: textbox, type `Chapter5.XmlLinq.XmlLinqLib`, leave the other
    defaults as they are, and click OK:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称”文本框中，输入`Chapter5.XmlLinq.XmlLinqLib`，保留其他默认设置，然后点击确定：
- en: '![](img/28b8444d-9c8f-4e26-ac5c-376c565beec2.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/28b8444d-9c8f-4e26-ac5c-376c565beec2.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/7c1a78e5-a95d-4a08-9237-c771e7e1007a.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7c1a78e5-a95d-4a08-9237-c771e7e1007a.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `XmlBooks.cs`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，并按*F2*重命名文件为`XmlBooks.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在询问是否重命名类名的确认对话框中回答“是”。
- en: Now double-click on the `XmlBooks.cs` label in the Solution Explorer.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击`XmlBooks.cs`标签。
- en: 'Add the following `using` directives next to the last directive in the list:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表中的最后一个指令旁边添加以下`using`指令：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following private variable to store the XML filename:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下私有变量以存储XML文件名：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create the default constructor as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建如下默认构造函数：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now add the following method to read the XML file:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加以下方法来读取XML文件：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, let's press *Ctrl* + *Shift* + *B* for a quick build to check that all
    the syntax is intact.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们按*Ctrl* + *Shift* + *B*进行快速构建，以检查所有语法是否正确。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In steps 1 to 10, we added a blank solution and a .NET Standard 2.0 class library
    to the project. We assigned proper names to our solution and the class library
    project. Then, in step 15, we added using directives. These directives help us
    to get the functionality we require for generic collections and LINQ support for
    XML.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 10 中，我们将一个空白解决方案和一个 .NET Standard 2.0 类库添加到项目中。我们为我们的解决方案和类库项目分配了合适的名称。然后在步骤
    15 中，我们添加了使用指令。这些指令帮助我们获取所需的泛型集合和 XML 的 LINQ 支持。
- en: In step 16, we added a private variable to store the XML filename. Then, in
    step 17, we created code to populate this variable using a default constructor
    for the `XmlBooks` class. In step 18, we created a method to read the titles of
    the books contained in the XML file. This XML file will be created in the next
    recipe. In the code, we have used `XDocument` to load the XML file, which was
    supported by the `System.Xml.Linq` namespace. We stored the decedents in a variable,
    iterated each element, and stored them in a `List<string>` generic collection.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 16 中，我们添加了一个私有变量来存储 XML 文件名。然后在步骤 17 中，我们使用 `XmlBooks` 类的默认构造函数来创建填充此变量的代码。在步骤
    18 中，我们创建了一个读取 XML 文件中包含的书籍标题的方法。此 XML 文件将在下一个食谱中创建。在代码中，我们使用了 `XDocument` 来加载
    XML 文件，该文件由 `System.Xml.Linq` 命名空间支持。我们将后代存储在一个变量中，迭代每个元素，并将它们存储在一个 `List<string>`
    泛型集合中。
- en: Finally, we built the code to check the syntax.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们构建了代码以检查语法。
- en: Creating a .NET Core console application to use the library
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 .NET Core 控制台应用程序来使用该库
- en: In this recipe, we will be creating a .NET Core console application to use the
    library created in the previous recipe. You can try this recipe on any platform,
    such as Linux or macOS, since .NET Core is a cross-platform library. In this recipe,
    we will be focusing on Windows.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个 .NET Core 控制台应用程序来使用上一食谱中创建的库。您可以在任何平台上尝试此食谱，例如 Linux 或 macOS，因为
    .NET Core 是一个跨平台库。在本食谱中，我们将专注于 Windows。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s get ready by looking at the previously built .NET Standard 2.0 library
    that reads an XML file. Make sure you have this XML file created under your project.
    We will be using this file to read. This sample is from the MSDN library itself:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看之前构建的 .NET Standard 2.0 库来做好准备，该库用于读取 XML 文件。请确保您已经在项目中创建了此 XML 文件。我们将使用此文件进行读取。此示例来自
    MSDN 库本身：
- en: '[PRE18]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter5.XmlLinq` solution.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个食谱中的解决方案。点击 文件 | 打开 | 打开项目/解决方案，或按 *Ctrl* + *Shift* + *O*，然后选择 `Chapter5.XmlLinq`
    解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建以检查一切是否正常。
- en: Now, click on the `Chapter5.XmlLinq` solution label. Click File | Add | New
    Project.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击 `Chapter5.XmlLinq` 解决方案标签。点击 文件 | 添加 | 新项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的 Visual C# 节点。
- en: 'Select .NET Core and select Console App (.NET Core) in the right-hand pane:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在右侧窗格中，选择 .NET Core 并选择 Console App (.NET Core):'
- en: '![](img/5180dc5f-a7ed-4d1e-9fcc-ef453a10e839.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5180dc5f-a7ed-4d1e-9fcc-ef453a10e839.png)'
- en: 'Now, in the Name: textbox, type `Chapter5.XmlLinq.XmlCore` as the name of the
    project. The rest of the fields can be left as they are:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，键入 `Chapter5.XmlLinq.XmlCore` 作为项目的名称。其余字段可以保持不变：
- en: '![](img/ea5625b6-c6c7-46b6-a996-e71b9eec10fd.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea5625b6-c6c7-46b6-a996-e71b9eec10fd.png)'
- en: Click OK.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should display like
    this:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按 *Ctrl* + *Alt* + *L*）应显示如下：
- en: '![](img/10217c10-99bd-40ba-8163-0973c5a7962d.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10217c10-99bd-40ba-8163-0973c5a7962d.png)'
- en: Right-click on the Dependencies label under `Chapter5.XmlLinq.XmlCore`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter5.XmlLinq.XmlCore` 下的“依赖项”标签上右键单击。
- en: Select Add Reference.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择添加引用。
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器中，单击右侧窗格中的“项目”标签：
- en: '![](img/326b7696-d278-4750-ab83-7ca506011f4c.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/326b7696-d278-4750-ab83-7ca506011f4c.png)'
- en: Check the `Chapter5.XmlLinq.XmlLinqLib`project in the left-hand pane.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中检查 `Chapter5.XmlLinq.XmlLinqLib` 项目。
- en: Click OK.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now click on the project name label of `Chapter5.XmlLinq.XmlCore` and select
    Add | New Item.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击项目名称标签 `Chapter5.XmlLinq.XmlCore` 并选择添加 | 新项。
- en: 'In the Add New Item dialog box, in the left-hand pane, select Data under Visual
    C# Items and XML File in the right-hand pane:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项”对话框中，在左侧窗格中，选择 Visual C# 项下的数据，在右侧窗格中选择 XML 文件：
- en: '![](img/5ee93787-fe7a-4403-b860-ae957761e3a9.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ee93787-fe7a-4403-b860-ae957761e3a9.png)'
- en: 'Type `books.xml` in the Name: textbox and click Add.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称：文本框中键入 `books.xml` 并点击添加。
- en: 'Now replace the existing code with the following:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将现有代码替换为以下内容：
- en: '[PRE19]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now double-click on `Program.cs` to open the code window.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在双击 `Program.cs` 以打开代码窗口。
- en: In the code window, scroll to the top of the screen.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，滚动到屏幕顶部。
- en: 'Next to the last line of the `using` directives, add this `using` directive:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `using` 指令的最后一条语句旁边，添加以下 `using` 指令：
- en: '[PRE20]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now replace the existing code in the `Main()` method with this code:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将 `Main()` 方法中的现有代码替换为以下代码：
- en: '[PRE21]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Press *F5* to see the output and it should look like this:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F5* 查看输出，它应该看起来像这样：
- en: '![](img/9dfe6df0-9d14-4911-8496-a5939c46435a.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dfe6df0-9d14-4911-8496-a5939c46435a.png)'
- en: Press *Enter* to exit.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Enter* 退出。
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In steps 1 to 9, we opened an existing solution. Then, we added a .NET Core
    console application to the solution. During these steps, we assigned a proper
    name to the project. In steps 10 to 13, we added the project reference to the
    library we created in the previous recipe. These steps will allow you to use the
    available methods from the library.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 9 中，我们打开了一个现有的解决方案。然后，我们将一个 .NET Core 控制台应用程序添加到解决方案中。在这些步骤中，我们为项目分配了一个合适的名称。在步骤
    10 到 13 中，我们将项目引用添加到我们在上一个菜谱中创建的库中。这些步骤将允许您使用库中可用的方法。
- en: In steps 15 to 18, we added an XML file item to the project and then we populated
    it with some sample data. In step 21, we referenced our library from the .NET
    Core console application. In step 22, we added code inside the `Main()` method
    of the console application. The first line stores the path of our XML file. This
    might vary in your setup. In the next two lines, we created an instance of the
    `XmlBooks` class, used its `GetBookTitles()` method, and stored it in a variable.
    Then, using a `foreach` statement, we iterated through the list returned from
    the `GetBookTitles()` method. Finally, we executed the code.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 15 到 18 中，我们将一个 XML 文件项添加到项目中，然后填充了一些示例数据。在步骤 21 中，我们从 .NET Core 控制台应用程序中引用了我们的库。在步骤
    22 中，我们在控制台应用程序的 `Main()` 方法中添加了代码。第一行存储了我们的 XML 文件路径。这可能在您的设置中有所不同。在接下来的两行中，我们创建了一个
    `XmlBooks` 类的实例，使用其 `GetBookTitles()` 方法，并将其存储在一个变量中。然后，使用 `foreach` 语句遍历 `GetBookTitles()`
    方法返回的列表。最后，我们执行了代码。
