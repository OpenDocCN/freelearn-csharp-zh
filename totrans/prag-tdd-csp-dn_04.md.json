["```cs\n// Constructor\npublic WeatherForecastController(\n    ILogger<WeatherForecastController> logger, \n    IClient client, INowWrapper nowWrapper, \n    IRandomWrapper randomWrapper)\n…\npublic double ConvertCToF(double c)\n{\n    double f = c * (9d / 5d) + 32;\n    _logger.LogInformation(\"conversion requested\");\n    return f;\n}\n```", "```cs\nvar logger = \n    NullLogger<WeatherForecastController>.Instance;\nvar sut = new WeatherForecastController(logger, null, null,\n    null);\n```", "```cs\nOneCallResponse res = await _client.OneCallAsync\n    (GREENWICH_LAT, GREENWICH_LON, new[] {\n        Excludes.Current, Excludes.Minutely,\n        Excludes.Hourly, Excludes.Alerts }, Units.Metric);\nWeatherForecast[] wfs = new WeatherForecast[FORECAST_DAYS];\nfor (int i = 0; i < wfs.Length; i++)\n{\n    var wf = wfs[i] = new WeatherForecast();\n    wf.Date = res.Daily[i + 1].Dt;\n    double forecastedTemp = res.Daily[i + 1].Temp.Day;\n    wf.TemperatureC = (int)Math.Round(forecastedTemp);\n    wf.Summary = MapFeelToTemp(wf.TemperatureC);\n}\nreturn wfs;\n```", "```cs\npublic class ClientStub : IClient\n{\n    private readonly DateTime _now;\n    private readonly IEnumerable<double> _sevenDaysTemps;\n    public ClientStub(DateTime now, \n                      IEnumerable<double> sevenDaysTemps)\n    {\n        _now = now;\n        _sevenDaysTemps = sevenDaysTemps;\n    }\n    public Task<OneCallResponse> OneCallAsync(\n        decimal latitude, decimal longitude, \n        IEnumerable<Excludes> excludes, Units unit)\n    {\n        const int DAYS = 7;\n        OneCallResponse res = new OneCallResponse();\n        res.Daily = new Daily[DAYS];\n        for (int i = 0; i < DAYS; i++)\n        {\n            res.Daily[i] = new Daily();\n            res.Daily[i].Dt = _now.AddDays(i);\n            res.Daily[i].Temp = new Temp();\n            res.Daily[i].Temp.Day = \n              _sevenDaysTemps.ElementAt(i);\n        }\n        return Task.FromResult(res);\n    }\n}\n```", "```cs\npublic async Task\n    GetReal_NotInterestedInTodayWeather_WFStartsFromNextDay()\n{\n    // Arrange\n    const double nextDayTemp = 3.3;\n    const double day5Temp = 7.7;\n    var today = new DateTime(2022, 1, 1);\n    var realWeatherTemps = new double[] \n        {2, nextDayTemp, 4, 5.5, 6, day5Temp, 8};\n    var clientStub = new ClientStub(today, \n        realWeatherTemps);\n    var controller = new WeatherForecastController(\n        null!, clientStub, null!, null!);\n    // Act\n    IEnumerable<WeatherForecast> wfs = await \n        controller.GetReal();\n    // Assert\n    Assert.Equal(3, wfs.First().TemperatureC);\n}\n```", "```cs\nGetReal_5DaysForecastStartingNextDay_\n    WF5ThDayIsRealWeather6ThDay\nGetReal_ForecastingFor5DaysOnly_WFHas5Days\nGetReal_WFDoesntConsiderDecimal_\n    RealWeatherTempRoundedProperly\nGetReal_TodayWeatherAnd6DaysForecastReceived_\n    RealDateMatchesNextDay\nGetReal_TodayWeatherAnd6DaysForecastReceived_\n    RealDateMatchesLastDay\n```", "```cs\npublic Units? LastUnitSpy { get; set; }\npublic Task<OneCallResponse> OneCallAsync(decimal latitude, \n    decimal longitude, IEnumerable<Excludes> excludes, \n      Units unit)\n{\n    LastUnitSpy = unit;\n    const int DAYS = 7;\n    // the rest of the code did not change\n```", "```cs\npublic async Task \n    GetReal_RequestsToOpenWeather_MetricUnitIsUsed()\n{\n    // Arrange\n    var realWeatherTemps = new double[] { 1,2,3,4,5,6,7 };\n    var clientStub = new ClientStub(\n        default(DateTime), realWeatherTemps);\n    var controller = new WeatherForecastController(null!, \n        clientStub, null!, null!);\n\n    // Act\n    var _ = await controller.GetReal();\n    // Assert\n    Assert.NotNull(clientStub.LastUnitSpy);\n    Assert.Equal(Units.Metric, \n        clientStub.LastUnitSpy!.Value);\n}\n```", "```cs\ndotnet add package NSubstitute\ndotnet add package NSubstitute.Analyzers.CSharp\n```", "```cs\n// Arrange\n…\n//var clientStub = new ClientStub(today, realWeatherTemps);\nvar clientMock = Substitute.For<IClient>();\nclientMock.OneCallAsync(Arg.Any<decimal>(),\n  Arg.Any<decimal>(), Arg.Any<IEnumerable<Excludes>>(),\n  Arg.Any<Units>())\n  .Returns(x => \n  {\n      const int DAYS = 7;\n      OneCallResponse res = new OneCallResponse();\n      res.Daily = new Daily[DAYS];\n      for (int i = 0; i < DAYS; i++)\n      {\n          res.Daily[i] = new Daily();\n          res.Daily[i].Dt = today.AddDays(i);\n          res.Daily[i].Temp = new Temp();\n          res.Daily[i].Temp.Day = \n            realWeatherTemps.ElementAt(i);\n      }\n      return Task.FromResult(res);\n  });\nvar controller = new WeatherForecastController(null!, \n  clientMock, null!, null!);\n```", "```cs\npublic async Task \n    GetReal_RequestsToOpenWeather_MetricUnitIsUsed()\n{\n    // Arrange\n    // Code is the same as in the previous test\n    // Act\n    var _ = await controller.GetReal();\n    // Assert\n    await clientMock.Received().OneCallAsync(\n      Arg.Any<decimal>(), Arg.Any<decimal>(), \n      Arg.Any<IEnumerable<Excludes>>(), \n      Arg.Is<Units>(x => x == Units.Metric));\n}\n```", "```cs\ndotnet new xunit -o Uqs.Weather.Tests.Integration -f net6.0\ndotnet sln add Uqs.Weather.Tests.Integration\n```", "```cs\ncd Uqs.Weather.Tests.Integration\ndotnet add package System.Net.Http.Json\n```", "```cs\nprivate const string BASE_ADDRESS = \"https://localhost:7218\";\nprivate const string API_URI = \"/WeatherForecast/\n    GetRealWeatherForecast\";\nprivate record WeatherForecast(DateTime Date, \n    int TemperatureC, int TemperatureF, string? Summary);\n```", "```cs\npublic async Task \n    GetRealWeatherForecast_Execute_GetNext5Days()\n{\n    // Arrange\n    HttpClient httpClient = new HttpClient\n    { BaseAddress = new Uri(BASE_ADDRESS) };\n    var today = DateTime.Now.Date;\n    var next5Days = new[] { today.AddDays(1),\n       today.AddDays(2), today.AddDays(3),\n       today.AddDays(4), today.AddDays(5) };\n    // Act\n    var httpRes = await httpClient.GetAsync(API_URI);\n    // Assert\n    var wfs = await \n    httpRes.Content.ReadFromJsonAsync<WeatherForecast[]>();\n    for(int i = 0;i < 5;i++)\n    {\n        Assert.Equal(next5Days[i], wfs[i].Date.Date);\n    }\n}\n```"]