["```cs\nName: John\nSurname: Smith\nSpouse:\nName: Mary\nSurname: Smith\nAddresses:\n- Type: home\nCountry: England\nTown: London\nStreet: My home street\n- Type: office\nCountry: England\nTown: London\nStreet: My home street \n```", "```cs\n{\nName: John\nSurname: Smith\nSpouse:\n{\n  Name: Mary\nSurname: Smith\n}\nAddresses:\n[\n {\n  Type: home\nCountry: England\nTown: London\nStreet: My home street\n },\n {\n  Type: office\nCountry: England\nTown: London\nStreet: My home street\n }\n]\n} \n```", "```cs\napiVersion: v1 \n```", "```cs\napiVersion: apps/v1 \n```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: my-deployment-name\nnamespace: my-namespace #this is optional\nspec:\nreplicas: 3\nselector:\nmatchLabels:\nmy-pod-label-name: my-pod-label-value\n...\ntemplate:\n... \n```", "```cs\nmetadata:\nlabels:\nmy-pod-label-name: my-pod-label-value\n...\nspec:\ncontainers:\n...\n- name: my-container-name\nimage: <Docker imagename>\nresources:\nrequests:\ncpu: 100m\nmemory: 128Mi\nlimits:\ncpu: 250m\nmemory: 256Mi\nports:\n- containerPort: 6379\nenv:\n- name: env-name\nvalue: env-value\n... \n```", "```cs\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\nname: my-stateful-set-name\nspec:\nselector:\nmatchLabels:\nmy-pod-label-name: my-pod-label-value\n...\nserviceName: \"my-service-name\"\nreplicas: 3\ntemplate:\n... \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nname: my-service\nnamespace: my-namespace\nspec:\nselector:\nmy-selector-label: my-selector-value\n...\nports:\n- name: http\nprotocol: TCP\nport: 80\ntargetPort: 9376\n- name: https\nprotocol: TCP\nport: 443\ntargetPort: 9377 \n```", "```cs\n...\nspec:\ntype: NodePort\nselector:\n... \n```", "```cs\n...\nports:\n- name: http\nprotocol: TCP\nport: 80\ntargetPort: 80\nnodePort: 30007\n- name: https\nprotocol: TCP\nport: 443\ntargetPort: 443\nnodePort: 30020\n... \n```", "```cs\n...\nspec:\ntype: LoadBalancer\nselector:\n... \n```", "```cs\n...\nspec:\ntype: LoadBalancer\nloadBalancerIP: <your public ip>\nselector:\n... \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nannotations:\nservice.beta.kubernetes.io/azure-load-balancer-resource-group: <IP resource group name>\nname: my-service-name\n... \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nannotations:\nservice.beta.kubernetes.io/azure-dns-label-name: <my-service-label>\nname: my-service-name\n... \n```", "```cs\n...\nspec:\nclusterIP: none\nselector:\n... \n```", "```cs\n...\nspec:\n...\nrules:\n- host: *.mydomain.com\nhttp:\npaths:\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: my-service-name\nport:\nnumber: 80\n- host: my-subdomain.anotherdomain.com\n... \n```", "```cs\n...\nspec:\n...\ntls:\n- hosts:\n- www.mydomain.com\nsecretName: my-certificate1\n- my-subdomain.anotherdomain.com\nsecretName: my-certificate2\n... \n```", "```cs\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: my-example-ingress\nnamespace: my-namespace\nspec:\ntls:\n...\nrules:\n... \n```", "```cs\n$oldPath=[Environment]::GetEnvironmentVariable('Path', [EnvironmentVariableTarget]::Machine)\nif ($oldPath.Split(';') -inotcontains 'C:\\minikube'){ '\n [Environment]::SetEnvironmentVariable('Path', $('{0};C:\\minikube' -f $oldPath), [EnvironmentVariableTarget]::Machine) '\n} \n```", "```cs\nminikube start \n```", "```cs\nminikube stop \n```", "```cs\naz aks get-credentials --resource-group <resource group> --name <cluster name> \n```", "```cs\nkubectl get all \n```", "```cs\nminkube kubectl -- get all \n```", "```cs\nkubectl get <object type><object name> \n```", "```cs\nkubectl describe <object name> \n```", "```cs\nkubectl create -f myClusterConfiguration.yaml \n```", "```cs\nkubectl apply -f myClusterConfiguration.yaml \n```", "```cs\nkubectl delete -f myClusterConfiguration.yaml \n```", "```cs\nkubectl delete deployment deployment1 deployment2... \n```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: redis-master\nlabels:\napp: redis\nspec:\nselector:\nmatchLabels:\napp: redis\nrole: master\ntier: backend\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: redis\nrole: master\ntier: backend\nspec:\ncontainers:\n- name: master\nimage: docker.io/redis:6.0.5\nresources:\nrequests:\ncpu: 100m\nmemory: 100Mi\nports:\n- containerPort: 6379\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: redis-leader\nlabels:\napp: redis\nrole: master\ntier: backend\nspec:\nports:\n- port: 6379\ntargetPort: 6379\nselector:\napp: redis\nrole: master\ntier: backend \n```", "```cs\nkubectl create -f redis-master.yaml \n```", "```cs\nkubectl create -f redis-slave.yaml \n```", "```cs\nkubectl create -f frontend.yaml \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\nname: frontend\nlabels:\napp: guestbook\ntier: frontend\nspec:\ntype: LoadBalancer\nports:\n- port: 80\nselector:\napp: guestbook\ntier: frontend \n```", "```cs\nkubectl get service \n```", "```cs\nkubectl get deployments \n```", "```cs\nminikube service <service name> \n```", "```cs\nminikube service frontend \n```", "```cs\nkubectl get service \n```", "```cs\nkubectl get deployments \n```", "```cs\nkubectl update -f <file name> \n```", "```cs\nvolumeClaimTemplates:\n- metadata:\nname: my-claim-template-name\nspec:\nresources:\nrequest:\nstorage: 5Gi\nvolumeMode: Filesystem\naccessModes:\n- ReadWriteOnce\nstorageClassName: my-optional-storage-class \n```", "```cs\nkubectl get storageclass \n```", "```cs\n...\nvolumeMounts\n- name: my-claim-template-name\nmountPath: /my/requested/storage\nreadOnly: false\n... \n```", "```cs\nkubectl create secret generic my-secret-name \\\n  --from-file=./secret1.bin \\\n  --from-file=./secret2.bin \n```", "```cs\nkubectl create secret generic dev-db-secret \\\n  --from-literal=username=devuser \\\n  --from-literal=password='$dsd_weew1' \n```", "```cs\n...\nvolumes:\n- name: my-volume-with-secrets\nsecret:\nsecretName: my-secret-name\n... \n```", "```cs\n...\nvolumeMounts:\n- name: my-volume-with-secrets\nmountPath: \"/my/secrets\"\nreadOnly: true\n... \n```", "```cs\nenv:\n- name: SECRET_USERNAME\nvalueFrom:\nsecretKeyRef:\nname: dev-db-secret\nkey: username\n- name: SECRET_PASSWORD\nvalueFrom:\nsecretKeyRef:\nname: dev-db-secret\nkey: password \n```", "```cs\nkubectl create secret tls test-tls --key=\"tls.key\" --cert=\"tls.crt\" \n```", "```cs\n...\nlivenessProbe:\nexec:\ncommand:\n- cat\n- /tmp/healthy\ninitialDelaySeconds: 10\nperiodSeconds: 5\n... \n```", "```cs\n...\nlivenessProbe:\nexec:\nhttpGet:\npath: /healthz\nport: 8080\nhttpHeaders:\n- name: Custom-Health-Header\nvalue: container-is-ok\ninitialDelaySeconds: 10\nperiodSeconds: 5\n... \n```", "```cs\n...\nlivenessProbe:\nexec:\ntcpSocket:\nport: 8080\ninitialDelaySeconds: 10\nperiodSeconds: 5\n... \n```", "```cs\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\nname: my-autoscaler\nspec:\nscaleTargetRef:\napiVersion: extensions/v1beta1\nkind: Deployment\nname: my-deployment-name\nminReplicas: 1\nmaxReplicas: 10\nmetrics:\n- type: Resource\nresource:\nname: cpu\ntargetAverageUtilization: 25 \n```", "```cs\napiVersion: v2\nname: myhelmdemo\ndescription: My Helm chart\ntype: application\nversion: 1.3.0\nappVersion: 1.2.0 \n```", "```cs\nhelm repo add <my-repo-local-name> https://charts.helm.sh/stable \n```", "```cs\nhelm install <instance name><my-repo-local-name>/<package name> -n <namespace> \n```", "```cs\nhelm status <instance name> \n```", "```cs\nhelm ls \n```", "```cs\nhelm delete <instance name> \n```", "```cs\nhelm install <instance name><my-repo-local-name>/<package name> -f  values.yaml --version <version> \n```", "```cs\n...--set <variable1>=<value1>,<variable2>=<value2>... \n```", "```cs\nhelm upgrade <instance name><my-repo-local-name>/<package name>... \n```", "```cs\n    helm repo add gcharts https://charts.helm.sh/stable \n    ```", "```cs\n    helm install ingress gcharts/nginx-ingress \n    ```", "```cs\n    apiVersion: extensions/v1beta1\n    kind: Ingress\n    metadata:\n    name: simple-frontend-ingress\n    spec:\n    rules:\n    - http:\n    paths:\n    - path:/\n    backend:\n    serviceName: frontend\n    servicePort: 80 \n    ```", "```cs\n    kubectl apply -f frontend-ingress.yaml \n    ```", "```cs\nkubectl create secret tls guestbook-tls --key=\"tls.key\" --cert=\"tls.crt\" \n```", "```cs\n...\nspec:\n...\ntls:\n- hosts:\n- <chosen name>.<your Azure region>.cloudeapp.com\nsecretName: guestbook-tls \n```", "```cs\nkubectl apply –f frontend-ingress.yaml \n```", "```cs\nkubectl delete –f frontend-ingress.yaml\nkubectl delete –f frontend.yaml\nkubectl delete –f redis-slave.yaml\nkubectl delete –f redis-master.yaml\nhelm delete ingress \n```"]