["```cs\nbuilder.Services.AddOpenTelemetry()\n  .WithTracing(tp => tp\n    .SetSampler(new TraceIdRatioBasedSampler(0.1))\n    .AddOtlpExporter());\n```", "```cs\ntp.SetSampler(\n   new ParentBasedSampler(new AlwaysOffSampler()))\n```", "```cs\nclass DebugSampler : Sampler\n{\n    private readonly static Sampler On\n      = new AlwaysOnSampler();\n    private readonly static Regex DebugFlag\n      = new Regex(\"(^|,)myapp=debug:1($|,)\",\n                  RegexOptions.Compiled);\n    private readonly Sampler _default;\n    public DebugSampler(double probability)\n    {\n        _default =\n           new TraceIdRatioBasedSampler(probability);\n    }\n    public override SamplingResult ShouldSample(\n      in SamplingParameters parameters)\n    {\n        var tracestate =\n           parameters.ParentContext.TraceState;\n        if (tracestate != null &&\n             DebugFlag.IsMatch(tracestate))\n           return On.ShouldSample(parameters);\n        return _default.ShouldSample(parameters);\n    }\n}\n```", "```cs\npublic async Task<IActionResult> OnGet([FromQuery] string\n  name)\n{\n  Activity.Current?.SetTag(\"meme_name\", name);\n    ...\n}\n```", "```cs\nActivity.Current.SetTag(\"meme_name\", name);\nBaggage.SetBaggage(\"meme_name\", name);\n```", "```cs\nclass MemeNameEnrichingProcessor : BaseProcessor<Activity>\n{\n    public override void OnEnd(Activity activity)\n    {\n        var name = GetName(activity);\n        if (name != null)\n            activity.SetTag(\"meme_name\", name);\n    }\n    private string? GetName(Activity activity)\n    {\n        if (Baggage.Current.GetBaggage()\n             .TryGetValue(\"meme_name\", out var name))\nreturn name;\n        return activity.GetBaggageItem(\"meme_name\");\n    }\n}\n```", "```cs\nBuilder.Services.AddOpenTelemetry()\n  .WithTracing(builder => builder\n    .AddProcessor<MemeNameEnrichingProcessor>()\n    …);\n```", "```cs\npublic class StaticFilesFilteringProcessor :\n    BaseProcessor<Activity>\n{\n    public override void OnEnd(Activity activity)\n    {\n        if (activity.Kind == ActivityKind.Server &&\n            activity.GetTagItem(\"http.method\") as string\n                                              == \"GET\" &&\n            activity.GetTagItem(\"http.route\") == null)\n            activity.ActivityTraceFlags &=\n              ~ActivityTraceFlags.Recorded;\n     }\n}\n```", "```cs\nBuilder.Services.AddOpenTelemetry()\n  .WithTracing(builder => builder\n    .AddProcessor<StaticFilesFilteringProcessor>()\n    .AddProcessor<MemeNameEnrichingProcessor>()\n    …\n);\n```", "```cs\nAddHttpClientInstrumentation(o => o.RecordException = true)\n```", "```cs\nAddAspNetCoreInstrumentation(o =>\n{\n    o.EnrichWithHttpRequest = (activity, request) =>\n        activity.SetTag(\"http.request_content_length\",\n                       request.ContentLength);\n    o.EnrichWithHttpResponse = (activity, response) =>\n        activity.SetTag(\"http.response_content_length\",\n                        response.ContentLength);\n    o.RecordException = true;\n})\n```", "```cs\nAddAspNetCoreInstrumentation(o => o.Filter =\n    ctx => !IsStaticFile(ctx.Request.Path))\n...\nstatic bool IsStaticFile(PathString requestPath)\n{\n    return requestPath.HasValue &&\n        (requestPath.Value.EndsWith(\".js\") ||\n         requestPath.Value.EndsWith(\".css\"));\n}\n```", "```cs\nvar env = new KeyValuePair<string, object>(\"env\",\n  builder.Environment.EnvironmentName);\nvar resourceBuilder = ResourceBuilder.CreateDefault()\n    .AddService(\"frontend\", \"memes\", \"1.0.0\")\n    .AddAttributes(new[] { env });\n...\nBuilder.Services.AddOpenTelemetry()\n  .WithTracing(builder => builder\n    .SetResourceBuilder(resourceBuilder)\n  ...\n);\n```", "```cs\nWithMetrics(builder => builder.AddView(\n  \"process.runtime.dotnet.jit.il_compiled.size\",\n  MetricStreamConfiguration.Drop));\n```", "```cs\nAddView(\"http.server.duration\",\n    new MetricStreamConfiguration(){\n    TagKeys = new [\" {\"http.host\", \"http.method\",\n       \"http.scheme\", \"http.target\", \"http.status_code\" }\n})\n```", "```cs\nSdk.SetDefaultTextMapPropagator(\n  new CompositeTextMapPropagator(new TextMapPropagator[] {\n    new B3Propagator(true),\n    new XCorrelationIdPropagator(),\n    new BaggagePropagator()}));\nDistributedContextPropagator.Current =\n  DistributedContextPropagator.CreateNoOutputPropagator();\n```"]