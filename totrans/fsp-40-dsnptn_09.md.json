["```cs\nlet isVowel = function \n              | 'A' | 'a' | 'E' | 'e' | 'I' | 'i' \n              | 'O' | 'o' | 'U' | 'u' -> true \n              | _ -> false \n\nlet alphabet = seq { 'A' .. 'Z' } \n\nalphabet |> Seq.filter isVowel |> Seq.sortDescending |> Seq.head \n// val it : char = 'U' \n\n```", "```cs\nopen System.Linq \nlet isVowel = function \n              | 'A' | 'a' | 'E' | 'e' | 'I' | 'i' \n              | 'O' | 'o' | 'U' | 'u' -> true \n              | _ -> false \nlet alphabet = seq { 'A' .. 'Z' } \nalphabet.Where(isVowel).OrderByDescending(fun x -> x).First() \n// val it : char = 'U' \n\n```", "```cs\nlet isVowel = function \n              | 'A' | 'a' | 'E' | 'e' | 'I' | 'i' \n              | 'O' | 'o' | 'U' | 'u' -> true \n              | _ -> false \n\nlet alphabet = seq { 'A' .. 'Z' } \n\nquery { \n    for letter in alphabet do \n    where (isVowel letter) \n    sortByDescending letter \n    select letter // may be omitted \n    head \n} \n// val it : char = 'U' \n\n```", "```cs\nselect count(distinct [FirstName]) from [Adventureworks2014].[Person].[Person] \n\n```", "```cs\nopen System.Data \nopen System.Data.SqlClient \n\nlet alphabet = seq { 'A' .. 'Z' } \n\nlet connStr = @\"Data Source=(localdb)projectsv12;Initial Catalog=Adventureworks2014;Integrated Security=true;\" \nlet dbConnection = new SqlConnection(connStr) \ndbConnection.Open() \n\nlet dbCommand = new SqlCommand(\"select FirstName from [Person].[Person]\",dbConnection) \nlet names = seq { \n                printfn \"reading from db\"  \n                use reader = dbCommand.ExecuteReader(CommandBehavior.Default) \n                while reader.Read() do yield reader.GetString(0) } \nlet distribution = \n    query { \n        for letter in alphabet do \n            let howMuch = \n                query { \n                    for name in names do \n                    where (name.StartsWith(string letter)) \n                    distinct \n                    select name \n                } |> Seq.length \n            sortBy howMuch \n            select (letter, howMuch) \n    } \n\ndistribution |> Seq.toList |> printfn \"%A\" \n\n```", "```cs\nopen System.Data \nopen System.Data.SqlClient \n\nlet alphabet = seq { 'A' .. 'Z' } \n\nlet connStr = @\"Data Source=(localdb)projectsv12;Initial Catalog=Adventureworks2014;Integrated Security=true;\" \nlet dbConnection = new SqlConnection(connStr) \ndbConnection.Open() \n\nlet dbCommandR l = \n    new SqlCommand( \n        (sprintf \"%s%s%s\" \"select distinct FirstName from [Person].[Person] where FirstName like '\" l  \n          \"%'\"), dbConnection) \n\nlet names l = seq { \n                printfn \"reading from db\"  \n                use reader = (dbCommandR l).ExecuteReader(CommandBehavior.Default) \n                while reader.Read() do yield reader.GetString(0) } \n\nlet distribution = \n    query { \n        for letter in alphabet do \n            let howMuch = names (string letter) |> Seq.length \n            sortBy howMuch \n            select (letter, howMuch) \n    } \n#time \"on\" \ndistribution |> Seq.toList |> printfn \"%A\" \n\n```", "```cs\nopen System.Data \nopen System.Data.SqlClient \n\nlet connStr = @\"Data Source=(localdb)projectsv12;Initial Catalog=Adventureworks2014;Integrated Security=true;\" \nlet dbConnection = new SqlConnection(connStr) \ndbConnection.Open() \n\nlet dbCommandF = \n    new SqlCommand(\"select SUBSTRING(FirstName, 1, 1),count(distinct FirstName) as \"count\" \n                    from [Adventureworks2014].[Person].[Person] \n                    group by SUBSTRING(FirstName, 1, 1) \n                    order by count\",dbConnection) \n\nlet frequences = seq { \n                printfn \"reading from db\"  \n                use reader = dbCommandF.ExecuteReader(CommandBehavior.Default) \n                while reader.Read() do yield (reader.GetString(0), reader.GetInt32(1)) } \n\nlet distribution = \n    query { \n        for freq in frequences do \n        select freq \n    } \n#time \"on\" \ndistribution |> Seq.toList |> printfn \"%A\" \n\n```", "```cs\nselect top (10) min(r.DisplayName) as Name, sum(p.[Amount]) as Total \nfrom [sql.colossus].[dbo].[Payments] p \njoin [sql.ironmandata].[dbo].[Partner] r on r.MerchantId = p.MerchantId \nwhere p.[IsDeposited] = 1 \ngroup by p.[MerchantId] \norder by total desc \n\n```", "```cs\n#r \"FSharp.Data.TypeProviders\" \n#r \"System.Data\" \n#r \"System.Data.Linq\" \n\nopen Microsoft.FSharp.Data.TypeProviders \nopen System.Linq \n\n[<Literal>] \nlet compileTimeCsusCS = @\"Data Source=(localdb)projectsv12;Initial Catalog=Colossus.DB;Integrated Security=SSPI\" \nlet runTimeCsusCS = @\"Data Source=***;Initial Catalog=SQL.Colossus;User ID=***;Password=***\" \n[<Literal>] \nlet compileTimeImCS = @\"Data Source=(localdb)projectsv12;Initial Catalog=SQL.Ironman;Integrated Security=SSPI\" \nlet runTimeImCS = @\"Data Source=***;Initial Catalog=SQL.IronmanData;User ID=***;Password=***\" \n\ntype Colossus = SqlDataConnection<compileTimeCsusCS> \ntype IronManData = SqlDataConnection<compileTimeImCS> \n\nlet pmtContext = Colossus.GetDataContext(runTimeCsusCS) \nlet imContext = IronManData.GetDataContext(runTimeImCS) \n\nlet mostPaid = \n    fun x -> query { \n                for payment in pmtContext.Payments do \n                where (payment.IsDeposited.HasValue && payment.IsDeposited.Value) \n                groupBy payment.MerchantId into p \n                let total = query { for payment in p do sumBy payment.Amount} \n                sortByDescending total \n                select (p.Key,total) \n                take x \n             } \n\nlet active = (mostPaid 10) \nlet activeIds = active |> Seq.map fst \n\nlet mostActiveNames = \n    query { \n        for merchant in imContext.Partner do \n        where (activeIds.Contains(merchant.MerchantId)) \n        select (merchant.MerchantId,merchant.DisplayName) \n    } |> dict \n\nactive \n|> Seq.map (fun (id, total) -> (mostActiveNames.[id],total)) \n|> Seq.iter (fun x -> printfn \"%s: %.2f\" (fst x) (snd x)) \n\n```", "```cs\n#r \"FSharp.Data.TypeProviders\" \n#r \"System.Data\" \n#r \"System.Data.Linq\" \n\nopen Microsoft.FSharp.Data.TypeProviders \nopen System.Linq \n\n[<Literal>] \nlet runTimeCsusCS = @\"Data Source=***;Initial Catalog=SQL.Colossus;User ID=***;Password=***\" \n\ntype Colossus = SqlDataConnection<runTimeCsusCS> \n\nlet pmtContext = Colossus.GetDataContext(runTimeCsusCS) \n\n```", "```cs\ntype PartialQueryBuilder() = \n    inherit Linq.QueryBuilder() \n    member __.Run(e:  Quotations .Expr<Linq.QuerySource<'T,IQueryable>>) = e \n\nlet pquery = PartialQueryBuilder() \n\ntype Linq.QueryBuilder with \n    [<ReflectedDefinition>] \n    member __.Source(qs: Linq.QuerySource<'T,_>) = qs \n\n```", "```cs\nlet mostPaid = pquery { \n                    for payment in pmtContext.Payments do \n                    where (payment.IsDeposited.HasValue && \n                           payment.IsDeposited.Value) \n                    groupBy payment.MerchantId into p \n                    let total = pquery { for payment in p do sumBy \n                                         payment.Amount} \n                    sortByDescending total \n                    select (p.Key,total) \n                    take 10 \n                         } \n\nlet dashboard = pquery { \n                    for merchant in pmtContext.Partner do \n                        for (id,total) in %mostPaid do \n                        where (merchant.MerchantId = id ) \n                        select (merchant.DisplayName, total) \n                       } \n\nquery { for m in %dashboard do \n           select m } |> Seq.iter (fun x -> printfn \"%s: %.2f\" (fst x) (snd x)) \n\n```", "```cs\npmtContext.Payments.Context.Log <- new System.IO.StreamWriter( \n   @\"C:usersgenedownloadspmtlinq.log\", AutoFlush = true) \n\n```", "```cs\nSELECT [t0].[DisplayName] AS [Item1], [t3].[value] AS [Item2] \nFROM [dbo].[Partner] AS [t0] \nCROSS JOIN ( \n    SELECT TOP (10) [t2].[MerchantId], [t2].[value] \n    FROM ( \n        SELECT SUM([t1].[Amount]) AS [value], [t1].[MerchantId] \n        FROM [dbo].[Payments] AS [t1] \n        WHERE ([t1].[IsDeposited] IS NOT NULL) AND (([t1].[IsDeposited]) = 1) \n        GROUP BY [t1].[MerchantId] \n        ) AS [t2] \n    ORDER BY [t2].[value] DESC \n    ) AS [t3] \nWHERE [t0].[MerchantId] = [t3].[MerchantId] \nORDER BY [t3].[value] DESC \n-- Context: SqlProvider(Sql2008) Model: AttributedMetaModel Build: 4.0.30319.33440 \n\n```", "```cs\n#r @\"C:...packagesExcelProvider.0.8.0libExcelProvider.dll\" \n\n```", "```cs\ntype LaserShip = ExcelFile< @\"C:codePacktBookCodeChapter11lasership invoice format.xlsx\", HasHeaders=true, ForceString=true> \n\n```", "```cs\nlet asNullableString = \n    function \n    | null -> box System.DBNull.Value \n    | (s: string) -> s.Trim() \n                     |> function \n                        | \"\" -> box System.DBNull.Value \n                        | l -> box l \n\n```", "```cs\nlet headers = [\"invno\";\"JobNumber\";\"TDate\";...;\"SourceId\";\"RowKey\";] \n\n```", "```cs\nlet loadLaserShip excelPath = \n    (new LaserShip(excelPath)).Data  \n\n```", "```cs\nlet fillDataTable sourceId (rows: IEnumerable<LaserShip.Row>) = \n    let dt = new DataTable() \n    do headers |> Seq.iter(fun h-> dt.Columns.Add(new DataColumn(h))) \n    for row in rows do \n        let dr = dt.NewRow() \n        dr.Item(0) <- unbox (row.invno |> asString \"invno\") \n         .  .  .  .  . \n        dr.Item(36) <- unbox (row.PickupDate |> asNullableString) \n        dr.Item(37) <- sourceId \n        dt.Rows.Add(dr) \n    printfn \"loaded %d rows\" dt.Rows.Count \n    dt \n\n```", "```cs\nlet loadIntoSQL tableName connStr (dataTable: DataTable) = \n    use con = new SqlConnection(connStr) \n    con.Open() \n    use bulkCopy = new SqlBulkCopy(con, DestinationTableName = tableName) \n    bulkCopy.WriteToServer(dataTable) \n    printfn \"Finished write to server\" \n\n```"]