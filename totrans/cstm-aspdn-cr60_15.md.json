["```cs\ndotnet new mvc -n CacheSample -o CacheSample\n```", "```cs\ncd CacheSample\ncode .\n```", "```cs\nconst string cacheMaxAge = \"86400\";\napp.UseStaticFiles(new StaticFileOptions()\n{\n    OnPrepareResponse = ctx =>\n    {\n        ctx.Context.Response.Headers.TryAdd(\n            \"Cache-Control\", \n            $\"public, max-age={cacheMaxAge}\");\n    }\n});\n```", "```cs\nbuilder.Services.AddResponseCaching();\n```", "```cs\napp.UseResponseCaching();\n```", "```cs\n[ResponseCache(Duration = 86400)]\npublic IActionResult Index()\n{\n    return View();\n}\n```", "```cs\nbuilder.Services.AddControllersWithViews(options =>\n{\n    options.CacheProfiles.TryAdd(\"Duration30\",\n        new CacheProfile\n        {\n            Duration = 30, \n            VaryByHeader = \"User-Agent\", \n            Location = ResponseCacheLocation.Client\n        });\n    options.CacheProfiles.TryAdd(\"Duration60\",\n        new CacheProfile\n        {\n            Duration = 60, \n            VaryByHeader = \"User-Agent\", \n            Location = ResponseCacheLocation.Client\n        });\n});\n```", "```cs\n[ResponseCache(CacheProfileName = \"Duration30\")]\npublic IActionResult Index()\n{\n```", "```cs\n<div>\n    <p>\n       The current time is: @DateTime.Now.ToLongTimeString()\n   </p>\n</div>\n<cache expires-sliding=\"@TimeSpan.FromSeconds(7)\">\n<div>\n    <p>\n       The current time is: @DateTime.Now.ToLongTimeString()\n    </p>\n</div>\n</cache>\n```", "```cs\n    using Microsoft.Extensions.Caching.Memory;\n    public class HomeController : Controller\n    {\n        private readonly ILogger<HomeController> _logger;\n        private readonly IMemoryCache _cache;\n        public HomeController(\n            ILogger<HomeController> logger,\n            IMemoryCache cache\n            )\n        {\n            _logger = logger;\n            _cache = cache;\n        }\n    ```", "```cs\n    namespace CacheSample.Models;\n    internal class Person\n    {\n        public int Id { get; set; }\n        public string? Firstname { get; set; }\n        public string? Lastname { get; set; }\n        public string? Address { get; set; }\n        public string? City { get; set; }\n    }\n    ```", "```cs\n    private IEnumerable<Person>\n      LoadDataFromExternalSource()\n    {\n        return A.ListOf<Person>(10);\n    }\n    private IDictionary<int, string>\n      LoadSuperComplexCalculatedData()\n    {\n        return Enumerable.Range(0, 10)\n            .ToDictionary(\n                x => x, \n                x => $\"Item{Random.Shared.Next()}\");\n    }\n    ```", "```cs\n    dotnet add package GenFu\n    ```", "```cs\n    if (!_cache.TryGetValue<IEnumerable<Person>>(\n        \"ExternalSource\", out var externalPersons))\n    {\n        externalPersons = LoadDataFromExternalSource();\n        _cache.Set(\n            \"ExternalSource\",\n            externalPersons,\n            new MemoryCacheEntryOptions\n            {\n                AbsoluteExpiration = \n                  DateTime.Now.AddSeconds(30)\n            });\n    }\n    ```", "```cs\nvar calculatedValues = _cache.GetOrCreate(\n    \"ComplexCalculate\", entry =>\n{\n    entry.AbsoluteExpiration = DateTime.Now.AddSeconds(30);\n    return LoadSuperComplexCalculatedData();\n});\n```", "```cs\nreturn View(new IndexViewModel\n        {\n            Persons = externalPersons,\n            Data = calculatedValues\n        });\n```", "```cs\ninternal class IndexViewModel\n{\n    public IEnumerable<Person>? Persons { get; set; }\n    public IDictionary<int, string>? Data { get; set; }\n}\n```", "```cs\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <ul>\n            @foreach (var person in Model.Persons)\n            {\n            <li>\n            [@person.Id] @person.Firstname @person.Lastname\n            </li>\n            }\n        </ul>\n    </div>\n    <div class=\"col-md-6\">\n        <ul>\n            @foreach (var data in Model.Data)\n            {\n                <li>[@data.Key] @data.Value</li>\n            }\n        </ul>\n    </div>\n</div>\n```"]