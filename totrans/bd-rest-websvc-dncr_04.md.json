["```cs\nScaffold-DbContext \"Server=.;Database=FlixOneStore;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force\n```", "```cs\npublic partial class Productsdetail\n{\n  public Guid Id { get; set; }\n  public Guid? Productid { get; set; }\n  public string Name { get; set; }\n  public string Description { get; set; }\n  public string Url { get; set; }\n  public int Views { get; set; }\n  public Products Product { get; set; }\n} \n```", "```cs\n// GET: api/Productsdetails\n[HttpGet]\npublic IEnumerable<Productsdetail> GetProductsdetail()\n{\n  return _context.Productsdetail;\n}\n```", "```cs\nfunction LoadProducts() \n{\n  // Load products' details.\n  $.ajax({\n    url: 'http://localhost:57571/api/Productsdetails',\n    type: \"GET\",\n    contentType: \"application/json\",\n    dataType: \"json\",\n    success: function (result) {\n      $.each(result, function (index, value) {\n        $('#tblProducts')\n        .append('<tr><td>' +\n        '<h3>' + value.name + '</h3>' +\n        '<p>' + value.description + '</p>' +\n        '<a target=\"_blank\" href=' + value.url + '>Amazon Link</a>' +\n        '<input type=\"button\" style=\"float:right;\" \n        class=\"btn btn-success\" value=\"Add To Cart\" />' +\n        '</td></tr>');\n      });\n    }\n  });\n}\n```", "```cs\npublic partial class Products\n{\n  public Products()\n  {\n    Cart = new HashSet<Cart>();\n    CartAttributes = new HashSet<CartAttributes>();\n    OrdersProducts = new HashSet<OrdersProducts>();\n    ProductsAttributes = new HashSet<ProductsAttributes>();\n    Productsdetail = new HashSet<Productsdetail>();\n    Reviews = new HashSet<Reviews>();\n  }\n  public Guid Id { get; set; }\n  public int Qty { get; set; }\n  public string Model { get; set; }\n  public string Image { get; set; }\n  public decimal Price { get; set; }\n  public DateTime Addedon { get; set; }\n  public DateTime Modifiedon { get; set; }\n  public decimal Weight { get; set; }\n  public byte Status { get; set; }\n  public Guid? ManufactureId { get; set; }\n  public Guid? Taxclassid { get; set; }\n  public ICollection<Cart> Cart { get; set; }\n  public ICollection<CartAttributes> CartAttributes { get; set; }\n  public ICollection<OrdersProducts> OrdersProducts { get; set; }\n  public ICollection<ProductsAttributes> ProductsAttributes \n  { get; set; }\n  public ICollection<Productsdetail> Productsdetail { get; set; }\n  public ICollection<Reviews> Reviews { get; set; }\n}\n```", "```cs\n// GET: api/Products\n[HttpGet]\npublic IEnumerable<Products> GetProducts()\n{\n  return _context.Products.Include(x => x.Productsdetail).ToList();\n}\n```", "```cs\n{\n  \"id\": \"98a95bb6-c573-450d-a470-0a637e126dd7\",\n  \"qty\": 30,\n  \"model\": \"A\",\n  \"image\": \"NA\",\n  \"price\": 49.99,\n  \"addedon\": \"2018-05-13T12:09:39.873\",\n  \"modifiedon\": \"2018-05-13T12:09:39.873\",\n  \"weight\": 0.9,\n  \"status\": 1,\n  \"manufactureId\": null,\n  \"taxclassid\": null,\n  \"cart\": [],\n  \"cartAttributes\": [],\n  \"ordersProducts\": [],\n  \"productsAttributes\": [],\n  \"productsdetail\": [\n  {\n    \"id\": \"c96ac991-6581-4675-b00c-439df3961f03\",\n    \"productid\": \"98a95bb6-c573-450d-a470-0a637e126dd7\",\n    \"name\": \"Dependency Injection in .NET Core 2.0\",\n    \"description\": \"Make use of constructors, parameters, \n    setters, and interface injection to write reusable and \n    loosely-coupled code\",\n    \"url\": \"https://www.amazon.com/Dependency-Injection-NET-Core-\n    loosely-coupled/dp/1787121305/ref=tmm_pap_swatch_0? \n    _encoding=UTF8&qid=1510939068&sr=8-3\",\n    \"views\": 5000\n  }],\n  \"reviews\": []\n}\n```", "```cs\nfunction LoadProducts() \n{\n  // Load products' details.\n  $.ajax({\n    url: 'http://localhost:57571/api/Products',\n    type: \"GET\",\n    contentType: \"application/json\",\n    dataType: \"json\",\n    success: function (result) {\n      console.log(result);\n      $.each(result, function (index, value) {\n        $('#tblProducts')\n        .append('<tr><td>' +\n        '<h3>' + value.productsdetail[0].name + '</h3>' +\n        '<span class=\"spanPrice\">Price: $' + value.price + \n        '</span>' +\n        '<p>' + value.productsdetail[0].description + '</p>' +\n        '<a target=\"_blank\" href=' + value.productsdetail[0].url +\n        '>Amazon Link</a>' +\n        '<input type=\"button\" style=\"float:right;\" class=\"btn btn-\n        success\" value=\"Add To Cart\" />' +\n        '</td></tr>');\n      });\n    }\n  });\n}\n```", "```cs\n// GET: api/Products\n[HttpGet]\npublic IEnumerable<Products> GetProducts(string searchText)\n{\n  var products = _context.Products.Include(x => \n  x.Productsdetail).ToList();\n  if (!string.IsNullOrEmpty(searchText))\n  products = products.Where(p => p.Productsdetail\n .Any(pd => pd.Name.ToLower().Contains(searchText.ToLower())))\n  .ToList();\n  return products;\n}\n```", "```cs\nfunction LoadProducts(searchText) \n{\n  if (!searchText)\n  searchText = \"\";\n  // Load products' details.\n  $.ajax({\n    url: 'http://localhost:57571/api/Products?searchText=' + \n    searchText,\n    type: \"GET\",\n    // Other codes removed for brevity.\n```", "```cs\n$('#btnSearch').click(function () \n{\n  var searchText = $('#txtSearch').val().trim();\n  if (searchText) \n  {\n    $('#tblProducts').empty();\n    LoadProducts(searchText);\n  }\n});\n```", "```cs\n[Produces(\"application/json\")]\n[Route(\"api/Carts\")]\n[Authorize]\npublic class CartsController : Controller\n```", "```cs\nfunction AddToCart(productId, productName, qty, price) \n{\n  $('#tblCart tbody')\n  .append($('<tr>')\n    .attr('data-product-id', productId)\n    .append($('<td>').html(productName))\n    .append($('<td class=\"qty\">').html(qty))\n    .append($('<td class=\"price\">').html('$' + qty * price))\n    .append($('<td>')\n      .append($('<a>')\n        .attr('href', '#')\n        .append($('<span>').addClass('glyphicon glyphicon-trash')) \n // For Delete Icon.\n        .click(function () \n        {\n          // Delete Cart from Database.\n        })\n      )\n    )\n  );\n  // Add one Cart record in Database.\n}\n```", "```cs\nfunction AddToCart(productId, productName, qty, price) \n{\n  // Check if item already present. If yes, increase the qty \n  and calculate price.\n  var cartItem = $('#tblCart').find('tr[data-product-id=' + \n  productId + ']');\n  if (cartItem.length > 0) \n  {\n    var qtyTd = cartItem.find('td.qty');\n    var newQty = parseInt(qtyTd.html()) + qty;\n    qtyTd.html(newQty);\n    cartItem.find('td.price').html('$' + (newQty * price).toFixed(2));\n // Update Cart in Database: PUT /api/Carts/{id}\nreturn;\n  }\n  $('#tblCart tbody')\n  .append($('<tr>')\n    .attr('data-product-id', productId)\n    .append($('<td>').html(productName))\n    .append($('<td class=\"qty\">').html(qty))\n    .append($('<td class=\"price\">').html('$' + qty * price))\n    .append($('<td>')\n      .append($('<a>')\n        .attr('href', '#')\n        .append($('<span>').addClass('glyphicon glyphicon-trash'))\n        .click(function () {\n          // Delete Cart from Database: DELETE /api/Carts/{id}\n        })\n      )\n    )\n  );\n  // Add one Cart record in Database: POST /api/Carts\n}\n```", "```cs\n// POST: api/Carts\n[HttpPost]\npublic async Task<IActionResult> PostCart([FromBody] Cart cart)\n{\n  if (!ModelState.IsValid)\n  {\n    return BadRequest(ModelState);\n  }\n  _context.Cart.Add(cart);\n  try\n  {\n    await _context.SaveChangesAsync();\n  }\n  catch (DbUpdateException)\n  {\n    if (CartExists(cart.Id))\n    {\n      return new StatusCodeResult(StatusCodes.Status409Conflict);\n    }\n    else\n    {\n      throw;\n    }\n  }\n  return CreatedAtAction(\"GetCart\", new { id = cart.Id }, cart);\n}\n```", "```cs\nfunction PostCart(customerId, productId, qty, finalPrice) \n{\n  var cart = \n  {\n    Customerid: customerId,\n    Productid: productId,\n    Qty: qty,\n    Finalprice: finalPrice\n  };\n  $.ajax({\n    url: 'http://localhost:57571/api/Carts',\n    type: \"POST\",\n    contentType: \"application/json\",\n    dataType: \"json\",\n    data: JSON.stringify(cart),\n    success: function (result) {\n      console.log(result);\n    },\n    error: function (message) {\n      console.log(message.statusText);\n    }\n  });\n}\n```", "```cs\n// Add one Cart record in Database: POST /api/Carts\nPostCart('910D4C2F-B394-4578-8D9C-7CA3FD3266E2',\n  productId,\n  cartItem.find('td.qty').html(),\n  cartItem.find('td.price').html().replace('$', ''))\n```", "```cs\n$.ajax({\n  url: 'http://localhost:57571/api/Carts',\n  type: \"POST\",\n  contentType: \"application/json\",\n  dataType: \"json\",\n  data: JSON.stringify(cart),\n  headers: { \"Authorization\": \"Bearer eyJhbGciOiJSUzI1NiIs...\n  [Long String Removed]\" },\n  success: function (result) \n  {\n    var cartItem = $('#tblCart').find('tr[data-product-id=' + \n    productId + ']');\n    cartItem.attr('data-cart-id', result.id);\n  },\n});\n```", "```cs\nfunction PutCart(cartItem) \n{\n  var cart = \n  {\n    Id: cartItem.attr('data-cart-id'),\n    Customerid: '910D4C2F-B394-4578-8D9C-7CA3FD3266E2',\n    Productid: cartItem.attr('data-product-id'),\n    Qty: cartItem.find('td.qty').html(),\n    Finalprice: cartItem.find('td.price').html().replace('$', '')\n  };\n  $.ajax({\n    url: 'http://localhost:57571/api/Carts/' + cart.Id,\n    type: \"PUT\",\n    contentType: \"application/json\",\n    dataType: \"json\",\n    data: JSON.stringify(cart),\n    headers: { \"Authorization\": \"Bearer eyJhbGciOiJSUzI1NiIs...\" }\n  });\n}\n```", "```cs\n// Update Cart in Database: PUT /api/Carts/{id}\nPutCart($('#tblCart').find('tr[data-product-id=' + productId + ']'));\n```", "```cs\n// PUT: api/Carts/5\n[HttpPut(\"{id}\")]\npublic async Task<IActionResult> PutCart([FromRoute] Guid id, [FromBody] Cart cart)\n{\n  if (!ModelState.IsValid)\n  {\n    return BadRequest(ModelState);\n  }\n  if (id != cart.Id)\n  {\n    return BadRequest();\n  }\n  _context.Entry(cart).State = EntityState.Modified;\n  try\n  {\n    await _context.SaveChangesAsync();\n  }\n  catch (DbUpdateConcurrencyException)\n  {\n    if (!CartExists(id))\n    {\n      return NotFound();\n    }\n    else\n    {\n      throw;\n    }\n  }\n  return NoContent();\n}\n```", "```cs\n// DELETE: api/Carts/5\n[HttpDelete(\"{id}\")]\npublic async Task<IActionResult> DeleteCart([FromRoute] Guid id)\n{\n  if (!ModelState.IsValid)\n  {\n    return BadRequest(ModelState);\n  }\n  var cart = await _context.Cart.SingleOrDefaultAsync(m => m.Id == id);\n  if (cart == null)\n  {\n    return NotFound();\n  }\n  _context.Cart.Remove(cart);\n  await _context.SaveChangesAsync();\n  return Ok(cart);\n}\n```", "```cs\nfunction DeleteCart(cartId) \n{\n  $.ajax({\n    url: 'http://localhost:57571/api/Carts/' + cartId,\n    type: \"DELETE\",\n    contentType: \"application/json\",\n    headers: { \"Authorization\": \"Bearer \" + accessToken },\n    success: function (result) {\n      if (result.id) {\n // Deleting the row from the html table.\n        var cartItem = $('#tblCart').find('tr[data-cart-id=' + \n        cartId + ']');\n        cartItem.remove();\n      }\n    }\n  });\n}\n```", "```cs\ncartItem = $('#tblCart tbody')\n.append($('<tr>')\n  .attr('data-product-id', productId)\n  .append($('<td>').html(productName))\n  .append($('<td class=\"qty\">').html(qty))\n  .append($('<td class=\"price\">').html('$' + qty * price))\n  .append($('<td>')\n    .append($('<a>')\n      .attr('href', '#')\n      .append($('<span>').addClass('glyphicon glyphicon-trash'))\n      .click(function () {\n        // Delete Cart from Database: DELETE /api/Carts/{id}\n        DeleteCart($(this).parents('tr').attr('data-cart-id'));\n      })\n    )\n  )\n);\n```", "```cs\nfunction PostOrders()\n{\n  // 1\\. Build order object to match the model class Orders.cs.\n  // 2\\. Push cart items into order object as an array.\n  // 3\\. Call POST /api/Orders.\n}\n```", "```cs\n$('#btnPlaceOrder').click(function () \n{\n  var cartItems = $('#tblCart tbody tr');\n  // If Cart items present, then show modal to enter Shipping Address.\n  if (cartItems.length > 0) {\n    $('#Order').modal('show');\n    return;\n  }\n  alert(\"Please add items into the cart.\");\n});\n```", "```cs\n$('#btnConfirmOrder').click(function () {\n  PostOrders();\n});\n```", "```cs\n// 1\\. Build order object to match the model class Orders.cs.\nvar order = {\n  Customerid: customerId,\n  CustomerStreetaddress: $('#txtStreetAdd').val(),\n  Customercity: $('#txtCity').val(),\n  Customerstate: $('#txtState').val(),\n  Customerpostalcode: $('#txtPostalCode').val(),\n  Customercountry: $('#txtCountry').val(),\n  OrdersProducts: new Array()\n};\n```", "```cs\n// 2\\. Push cart items into order object as an array.\n$('#tblCart tbody tr').each(function () \n{\n  order.OrdersProducts.push(\n  {\n    Productid: $(this).attr('data-product-id'),\n    Productname: $(this).find('td.name').html(),\n    Productprice: $(this).attr('data-price'),\n    Finalprice: $(this).find('td.price').html().replace('$', ''),\n    Productqty: $(this).find('td.qty').html()\n  });\n});\n```", "```cs\n// 3\\. Call POST /api/Orders.\n$.ajax({\n  url: 'http://localhost:57571/api/Orders',\n  type: \"POST\",\n  contentType: \"application/json\",\n  dataType: \"json\",\n  data: JSON.stringify(order),\n  headers: { \"Authorization\": \"Bearer \" + accessToken },\n  success: function (result) {\n    alert(\"Order Placed Successfully.\")\n  }\n});\n```", "```cs\nsuccess: function (result) \n{\n  // Empty Cart.\n $('#tblCart tbody tr').each(function () {\n DeleteCart($(this).attr('data-cart-id'));\n });\n  alert(\"Order Placed Successfully.\");\n},\n```", "```cs\n// POST: api/Orders\n[HttpPost]\npublic async Task<IActionResult> PostOrders([FromBody] Orders orders)\n{\n  if (!ModelState.IsValid)\n  {\n    return BadRequest(ModelState);\n  }\n  // Retrieve customer details and add to order.\n  if (orders.Customerid != null)\n  {\n    var customer = _context.Customers.SingleOrDefault\n    (x => x.Id == orders.Customerid);\n    if (customer != null)\n    {\n      orders.Deliveryname = orders.Customername = customer.Firstname;\n orders.Customeremail = customer.Email;\n orders.Customertelephone = customer.Telephone;\n    }\n  }\n  ...\n```", "```cs\n// Copy customer address to delivery address.\norders.Deliverycity = orders.Customercity;\norders.Deliverycountry = orders.Customercountry;\norders.Deliverystreetaddress = orders.CustomerStreetaddress;\norders.Deliverypostalcode = orders.Customerpostalcode;\norders.Deliverystate = orders.Customerstate;\n```", "```cs\npublic Orders()\n{\n  Id = Guid.NewGuid();\n  OrderProductAttributes = new HashSet<OrderProductAttributes>();\n  OrdersProducts = new HashSet<OrdersProducts>();\n  Datepurchased = DateTime.Now;\n  Lastmodified = DateTime.Now;\n  Shipingmethodid = Guid.NewGuid();\n  Paymentmethodid = Guid.NewGuid();\n  Shippingcost = 0;\n  Orderdatefinished = DateTime.Now;\n  Currency = \"$\";\n  CurrencyValue = 0;\n  Orderstatus = \"Placed\";\n}\n```", "```cs\n// GET: api/Orders/5\n[HttpGet(\"{id}\")]\npublic async Task<IActionResult> GetOrders([FromRoute] Guid id)\n{\n  if (!ModelState.IsValid)\n  {\n    return BadRequest(ModelState);\n  }\n  var orders = await _context.Orders.Include\n  (o => o.OrdersProducts).SingleOrDefaultAsync(m => m.Id == id);\n  if (orders == null)\n  {\n    return NotFound();\n  }\n  return Ok(orders);\n}\n```"]