- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Additional Resources and Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, you have everything that you need to start building outstanding
    CLI applications. In the pages of this book, we have covered every step of the
    way: setting up your development environment, understanding the foundations of
    CLI applications, developing a CLI application ‚Äì from the basic concepts to the
    most advanced ones, testing, security, performance optimization, and finally packaging
    and deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: However, while developing your CLI applications, you may face situations where
    you need to deepen your skills in one or more of these areas. You may also face
    situations where you will need to design a complex feature or code. These are
    situations every developer faces, no matter what kind of applications they build,
    and you will too.
  prefs: []
  type: TYPE_NORMAL
- en: 'That‚Äôs why I designed this last chapter: to give you some guidance in these
    situations so you don‚Äôt get lost. Use it as a reference whenever you need guidance.'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading and resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are a lot of very interesting things to read on the web, I will
    mention some books from the Packt Publishing collection that I‚Äôve found particularly
    useful.
  prefs: []
  type: TYPE_NORMAL
- en: C# 12 and .NET 8, by Mark J. Price
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are learning .NET, it is impossible not to recommend Mark J. Price‚Äôs
    book. This book covers everything you need to know about .NET development. Also,
    Mark updates his book with every new version of .NET. The latest edition, at the
    time of writing, is the one covering .NET 8.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22400_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To learn more about this book, please visit [https://www.packtpub.com/en-ca/product/c-12-and-net-8-modern-cross-platform-development-fundamentals-9781837635870](https://www.packtpub.com/en-ca/product/c-12-and-net-8-modern-cross-platform-development-fundamentals-9781837635870).
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring with C#, by Matt Eland
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When building your CLI application, you will most likely have to deal with existing
    code, and you may need to refactor it in order to make it safer and improve its
    performance. When this happens, you will be happy to have this book on hand.
  prefs: []
  type: TYPE_NORMAL
- en: By reading this book, you will learn many refactoring techniques that take advantage
    of the latest C# features. You will also learn how to leverage AI assistants,
    such as GitHub Copilot Chat, for your refactoring, testing, and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22400_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To learn more about this book, please visit [https://www.packtpub.com/en-ca/product/refactoring-with-c-9781835089989](https://www.packtpub.com/en-ca/product/refactoring-with-c-9781835089989).
  prefs: []
  type: TYPE_NORMAL
- en: Pragmatic Test-Driven Development in C# and .NET, by Adam Tibi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You simply cannot guarantee the quality of your application if you don‚Äôt implement
    automated testing. Although you can implement automated testing without relying
    on **Test-Driven Development** (**TDD**), as I used to say in every class where
    I teach this topic: ‚Äú*Automated testing ensures that your code performs the task
    it has been designed for, while TDD ensures that your code performs the task stated
    by your business requirements.*‚Äù This summarizes the difference between *simple*
    automated tests and the practice of TDD.'
  prefs: []
  type: TYPE_NORMAL
- en: This book covers what you need to know not only to implement unit testing in
    your application (including mocking external dependencies) but also to integrate
    a TDD practice.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22400_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To learn more about this book, please visit [https://www.packtpub.com/en-ca/product/pragmatic-test-driven-development-in-c-and-net-9781803230191](https://www.packtpub.com/en-ca/product/pragmatic-test-driven-development-in-c-and-net-9781803230191).
  prefs: []
  type: TYPE_NORMAL
- en: C# 7 and .NET Core 2.0 High Performance, by Ovais Mehboob Ahmed Khan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this book relies on an older version of .NET, the concepts and principles
    it teaches are still valuable and applicable.
  prefs: []
  type: TYPE_NORMAL
- en: By reading this book, you will understand the most common pitfalls that negatively
    impact your application‚Äôs performance. You will also learn how to measure the
    performance of your application (as a whole, but more importantly at its hot paths).
    You will then learn design and memory management techniques (including async programming,
    multithreading, and optimized data structures) that will help you improve the
    performance of your application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22400_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To learn more about this book, please visit [https://www.packtpub.com/en-ca/product/c-7-and-net-core-20-high-performance-9781788470049](https://www.packtpub.com/en-ca/product/c-7-and-net-core-20-high-performance-9781788470049).
  prefs: []
  type: TYPE_NORMAL
- en: These readings will give you a deeper knowledge and understanding of various
    topics covered throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: However, you will find that, in many situations, a library already exists for
    what you are trying to achieve. You *should* consider using such libraries.
  prefs: []
  type: TYPE_NORMAL
- en: I‚Äôm highlighting ‚Äúshould‚Äù here on purpose. My point is that you don‚Äôt have to
    use any library, but you have to, at least, disregard a library consciously after
    analyzing it and deciding that it doesn‚Äôt suit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: By relying on an existing library, you avoid having to write extra code, maintain
    it, and test it. You simply use it as a means to achieve your goal more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: If you have been developing for a long enough period of time, you will most
    likely have encountered libraries that you found useful and that you reused over
    and over in your projects. In the next section, I will share with you some of
    the libraries that I have discovered (and used) along my journey.
  prefs: []
  type: TYPE_NORMAL
- en: Useful libraries for CLI application development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are plenty of useful libraries and this section doesn‚Äôt intend to list
    them all (we would need an encyclopedia for that üòâ). Also, the ones listed here
    are by no means the best ones. They are the ones I‚Äôve discovered along the way
    and use on a regular basis. These libraries add up to the ones we have already
    used throughout the pages of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Polly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Polly` is a resilience and transient fault-handling library. For CLI applications,
    it can help manage network failures, timeouts, and other transient errors when
    interacting with external services or databases. This ensures your CLI application
    remains robust and responsive even in unreliable environments.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `Polly`, please visit [https://github.com/App-vNext/Polly](https://github.com/App-vNext/Polly).
  prefs: []
  type: TYPE_NORMAL
- en: HangFire
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`HangFire` is a background job processing library that does not rely on Windows
    services or a separate process. In CLI applications, it can be useful for scheduling
    and executing long-running tasks asynchronously. This allows your CLI application
    to handle time-consuming operations without blocking the main execution thread.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `HangFire`, please visit [https://github.com/HangfireIO/Hangfire](https://github.com/HangfireIO/Hangfire).
  prefs: []
  type: TYPE_NORMAL
- en: StackExchange.Redis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`StackExchange.Redis` is a high-performance client for Redis. While primarily
    used in web applications, it can be beneficial in CLI applications that require
    caching or need to interact with Redis databases for data storage or retrieval.
    This allows your CLI application to retrieve data from an external service and
    cache it locally, reducing the dependency on a network connection while improving
    the overall performance of your application.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `StackExchange.Redis`, please visit [https://github.com/StackExchange/StackExchange.Redis](https://github.com/StackExchange/StackExchange.Redis).
  prefs: []
  type: TYPE_NORMAL
- en: MediatR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MediatR` implements the mediator pattern, which can help simplify and decouple
    the communication between components in your CLI application. It‚Äôs particularly
    useful for organizing command handling and implementing complex workflows.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `MediatR`, please visit [https://github.com/jbogard/MediatR](https://github.com/jbogard/MediatR).
  prefs: []
  type: TYPE_NORMAL
- en: MassTransit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MassTransit` is a distributed application framework. It can be very useful
    for CLI applications that need to interact with message queues or implement event-driven
    architectures. For that matter, `MassTransit` makes it easy to create applications
    and services that leverage message-based, loosely coupled, asynchronous communication
    for higher availability, reliability, and scalability.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `MassTransit`, please visit [https://github.com/MassTransit/MassTransit](https://github.com/MassTransit/MassTransit).
  prefs: []
  type: TYPE_NORMAL
- en: BenchmarkDotNet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`BenchmarkDotNet` is a powerful benchmarking library. It‚Äôs extremely useful
    for CLI applications that need to measure and optimize performance, allowing you
    to identify the slowest paths in your application, compare different implementations,
    and make data-driven decisions.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `BenchmarkDotNet`, please visit [https://github.com/dotnet/BenchmarkDotNet](https://github.com/dotnet/BenchmarkDotNet).
  prefs: []
  type: TYPE_NORMAL
- en: Portable.BouncyCastle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`BouncyCastle` is a cryptography library. It allows you to generate random
    passwords with different settings to meet the OWASP requirements. For CLI applications,
    this can be useful when you want to generate either a default password for a user
    account or a one-time passcode (for accessing an encrypted file, for example).'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `BouncyCastle`, please visit [https://github.com/novotnyllc/bc-csharp](https://github.com/novotnyllc/bc-csharp).
  prefs: []
  type: TYPE_NORMAL
- en: NSubstitute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NSubstitute` is a mocking framework for unit tests. It is useful for mocking
    external dependencies when performing unit tests.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `NSubstitute`, please visit [https://github.com/nsubstitute/NSubstitute](https://github.com/nsubstitute/NSubstitute).
  prefs: []
  type: TYPE_NORMAL
- en: AutoFixture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`AutoFixture` is an open source library for .NET that helps developers write
    maintainable unit tests by streamlining the process of writing and maintaining
    unit tests through the automation of test data generation. It integrates with
    popular testing frameworks (such as MS Test, NUnit, and xUnit) and with popular
    mocking frameworks (such as NSubstitute and Moq).'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `AutoFixture`, please visit [https://github.com/AutoFixture/AutoFixture](https://github.com/AutoFixture/AutoFixture).
  prefs: []
  type: TYPE_NORMAL
- en: RichardSzalay.MockHttp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MockHttp` is a testing layer for Microsoft‚Äôs `HttpClient` class. It allows
    stubbed responses to be configured for matched HTTP requests and can be used to
    test your application‚Äôs service layer without actually performing network calls.
    It is useful during the testing phase for mocking calls to the external APIs and
    services that your CLI application may rely upon.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `MockHttp`, please visit [https://github.com/richardszalay/mockhttp](https://github.com/richardszalay/mockhttp).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the help of these readings and libraries, you can take your CLI applications
    to the next level and build some quite impressive and useful ones. I am eager
    to see what you will create. Do not hesitate to let me know.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more thing: this list is not frozen in time. It is alive and you should
    keep it alive. How? By continually revisiting it and updating it as technology
    and trends evolve. I am passing this mission on to you.'
  prefs: []
  type: TYPE_NORMAL
- en: Your turn!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following along with the provided code is a great way to learn through practice.
  prefs: []
  type: TYPE_NORMAL
- en: A better way is by challenging yourself to achieve tasks. Hence, I challenge
    you to improve the **Bookmarkr** application by adding the following features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #1 ‚Äì List additional features for Bookmarkr'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is where I hand you **Bookmarkr** so you can make it your own.
  prefs: []
  type: TYPE_NORMAL
- en: I am challenging you to list some additional features you would like to have
    in **Bookmarkr**. You can add them as feature requests in GitHub so either you
    or someone else can implement them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #2 ‚Äì List the skills and libraries you need to implement a feature'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have decided what features you would like to implement, start by listing
    the skills and libraries you need to do so. The purpose of this step is to avoid
    having to reinvent the wheel but rather take advantage of what already exists
    and use it to achieve new horizons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: your users aren‚Äôt interested in your coding skills (they won‚Äôt even
    see the code). They are interested in the value your (CLI) application brings
    them.'
  prefs: []
  type: TYPE_NORMAL
