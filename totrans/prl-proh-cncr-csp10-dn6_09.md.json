["```cs\n    try\n    {\n       inputBlock.Completion.Wait();\n    }\n    catch (AggregateException ae)\n    {\n       ae.Handle(e =>\n       {\n          Console.WriteLine($\"Error processing input - \n              {e.GetType().Name}: {e.Message}\");\n       });\n    }\n    ```", "```cs\n    try\n    {\n        await inputBlock.Completion;\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine($\"Error processing input - \n            {e.GetType().Name}: {e.Message}\");\n    }\n    ```", "```cs\n    try\n    {\n        inputBlock.ContinueWith(task =>\n        {\n    Console.WriteLink($\"Task completed with a \n                status of {task.Status}\");\n        });\n        await inputBlock.Completion;\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine($\"Error processing input - \n            {e.GetType().Name}: {e.Message}\");\n    }\n    ```", "```cs\nBufferBlock<string> customerBlock = new();\n```", "```cs\nforeach (var customer in customers)\n```", "```cs\n{\n```", "```cs\n    await customerBlock.SendAsync(customer.Name);\n```", "```cs\n}\n```", "```cs\nfor (int i = 0; i < 5; i++)\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine(await customerBlock.ReceiveAsync());\n```", "```cs\n}\n```", "```cs\n// The code could display the following output:\n```", "```cs\n//    Robert Jones\n```", "```cs\n//    Jita Smith\n```", "```cs\n//    Patty Xu\n```", "```cs\n//    Sam Alford\n```", "```cs\n//    Melissa Allen\n```", "```cs\nvar alertBlock = new BroadcastBlock<string>(null);\n```", "```cs\nalertBlock.Post(\"Network is unavailable!\");\n```", "```cs\nfor (int i = 0; i < 5; i++)\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine(alertBlock.Receive());\n```", "```cs\n}\n```", "```cs\nWriteOnceBlock<string> customerBlock = new();\n```", "```cs\nforeach (var customer in customers)\n```", "```cs\n{\n```", "```cs\n    await customerBlock.SendAsync(customer.Name);\n```", "```cs\n}\n```", "```cs\nConsole.WriteLine(await customerBlock.ReceiveAsync());\n```", "```cs\nvar customerBlock = new ActionBlock<string>(name => \n```", "```cs\n    Console.WriteLine(name));\n```", "```cs\nforeach (var customer in customers)\n```", "```cs\n{\n```", "```cs\n   await customerBlock.SendAsync(customer.Name);\n```", "```cs\n}\n```", "```cs\ncustomerBlock.Complete();\n```", "```cs\nawait customerBlock.Completion;\n```", "```cs\nvar toUpperBlock = new TransformBlock<string, string>(name \n```", "```cs\n      => name.ToUpper());\n```", "```cs\nforeach (var customer in customers)\n```", "```cs\n{\n```", "```cs\n   toUpperBlock.Push(customer.Name);\n```", "```cs\n}\n```", "```cs\nfor (int i = 0; i < 5; i++)\n```", "```cs\n{\n```", "```cs\n   Console.WriteLine(toUpperBlock.Receive());\n```", "```cs\n}\n```", "```cs\nvar nameCharactersBlock = new TransformManyBlock<string, \n```", "```cs\n    char>(name => name.ToCharArray());\n```", "```cs\nnameCharactersBlock.Post(customerName);\n```", "```cs\nfor (int i = 0; i < (customerName.Length; i++)\n```", "```cs\n{\n```", "```cs\n   Console.WriteLine(nameCharactersBlock.Receive());\n```", "```cs\n}\n```", "```cs\nvar studentBlock = new BatchBlock<string>(12);\n```", "```cs\n// Assume studentList contains 20 students.\n```", "```cs\nforeach (var student in studentList)\n```", "```cs\n{\n```", "```cs\n   studentBlock.Post(student.Name);\n```", "```cs\n}\n```", "```cs\n// Signal that we are done adding items.\n```", "```cs\nstudentBlock.Complete();\n```", "```cs\n// Print the size of each class.\n```", "```cs\nConsole.WriteLine($\"The number of students in class 1 is { \n```", "```cs\n    studentBlock.Receive().Count()}.\");  // 12 students\n```", "```cs\nConsole.WriteLine($\"The number of students in class 2 is { \n```", "```cs\n    studentBlock.Receive().Count()}.\");  // 8 students\n```", "```cs\nvar joinBlock = new JoinBlock<string, string, int>();\n```", "```cs\njoinBlock.Target1.Post(\"Sally\");\n```", "```cs\njoinBlock.Target1.Post(\"Raj\");\n```", "```cs\njoinBlock.Target2.Post(\"Jones\");\n```", "```cs\njoinBlock.Target2.Post(\"Gupta\");\n```", "```cs\njoinBlock.Target3.Post(7);\n```", "```cs\njoinBlock.Target3.Post(23);\n```", "```cs\nfor (int i = 0; i < 2; i++)\n```", "```cs\n{\n```", "```cs\n   var data = joinBlock.Receive();\n```", "```cs\n   if (data.Item3 < 18)\n```", "```cs\n   {\n```", "```cs\n         Console.WriteLine($\"{data.Item1} {data.Item2} is a \n```", "```cs\n             child.\");\n```", "```cs\n   }\n```", "```cs\n   else\n```", "```cs\n   {\n```", "```cs\n         Console.WriteLine($\"{data.Item1} {data.Item2} is \n```", "```cs\n             an adult.\");\n```", "```cs\n   }\n```", "```cs\n}\n```", "```cs\n    public class BlogPost\n    {\n        public string PostDate { get; set; } = \"\";\n        public string? Categories { get; set; }\n        public string? PostContent { get; set; }\n    }\n    ```", "```cs\n    using System.Collections.Generic;\n    using System.ServiceModel.Syndication;\n    using System.Xml;\n    ...\n    public static IEnumerable<SyndicationItem> \n        GetFeedItems(string feedUrl)\n    {\n        using var xmlReader = XmlReader.Create(feedUrl);\n        SyndicationFeed rssFeed = SyndicationFeed.Load\n            (xmlReader);\n        return rssFeed.Items;\n    }\n    ```", "```cs\nprivate async Task QueueAllFeeds(BufferBlock\n    <SyndicationItem> itemQueue)\n{\n    Task feedTask1 = ProduceFeedItems(itemQueue, \n       \"https://devblogs.microsoft.com/dotnet/feed/\");\n    Task feedTask2 = ProduceFeedItems(itemQueue, \n        \"https://blogs.windows.com/feed\");\n    Task feedTask3 = ProduceFeedItems(itemQueue, \n        \"https://www.microsoft.com/microsoft-\n            365/blog/feed/\");\n    await Task.WhenAll(feedTask1, feedTask2, \n         feedTask3);\n    itemQueue.Complete();\n}\nprivate async Task ProduceFeedItems\n    (BufferBlock<SyndicationItem> itemQueue, string \n        feedUrl)\n{\n    IEnumerable<SyndicationItem> items = \n        RssFeedService.GetFeedItems(feedUrl);\n    foreach (SyndicationItem item in items)\n    {\n        await itemQueue.SendAsync(item);\n    }\n}\n```", "```cs\n    private void ConsumeFeedItem(SyndicationItem nextItem, \n        ConcurrentBag<BlogPost> posts)\n    {\n        if (nextItem != null && nextItem.Summary != null)\n        {\n            BlogPost newPost = new();\n            newPost.PostContent = nextItem.Summary.Text\n                .ToString();\n            newPost.PostDate = nextItem.PublishDate\n                .ToLocalTime().ToString(\"g\");\n            if (nextItem.Categories != null)\n            {\n                newPost.Categories = string.Join(\",\", \n                    nextItem.Categories.Select(c => \n                        c.Name));\n            }\n            posts.Add(newPost);\n        }\n    }\n    ```", "```cs\n    public async Task<IEnumerable<BlogPost>> \n        GetAllMicrosoftBlogPosts()\n    {\n        var posts = new ConcurrentBag<BlogPost>();\n        // Create queue of source posts\n        BufferBlock<SyndicationItem> itemQueue = new(new \n            DataflowBlockOptions { BoundedCapacity = \n                10 });\n        // Create and link consumers\n        var consumerOptions = new Execution\n            DataflowBlockOptions { BoundedCapacity = 1 };\n        var consumerA = new ActionBlock<SyndicationItem>\n            ((i) => ConsumeFeedItem(i, posts), \n                consumerOptions);\n        var consumerB = new ActionBlock<SyndicationItem>\n            ((i) => ConsumeFeedItem(i, posts), \n                consumerOptions);\n        var consumerC = new ActionBlock<SyndicationItem>\n            ((i) => ConsumeFeedItem(i, posts), \n                consumerOptions);\n        var linkOptions = new DataflowLinkOptions { \n            PropagateCompletion = true, };\n        itemQueue.LinkTo(consumerA, linkOptions);\n        itemQueue.LinkTo(consumerB, linkOptions);\n        itemQueue.LinkTo(consumerC, linkOptions);\n        // Start producers\n        Task producers = QueueAllFeeds(itemQueue);\n        // Wait for producers and consumers to complete\n        await Task.WhenAll(producers, consumerA.Completion,\n            consumerB.Completion, consumerC.Completion);\n        return posts;\n    }\n    ```", "```cs\n    BufferBlock<SyndicationItem> itemQueue = new();\n    ```", "```cs\n    var linkOptions = new DataflowLinkOptions { \n        PropagateCompletion = true, };\n    ```", "```cs\n    <Grid>\n        <ListView x:Name=\"mainListView\">\n            <ListView.ItemTemplate>\n                <DataTemplate>\n                    <Grid>\n                        <Grid.ColumnDefinitions>\n                            <ColumnDefinition \n                                Width=\"150\"/>\n                            <ColumnDefinition \n                                Width=\"300\"/>\n                            <ColumnDefinition \n                                Width=\"500\"/>\n                        </Grid.ColumnDefinitions>\n                        <TextBlock Grid.Column=\"0\"  \n                            Text=\"{Binding PostDate}\"\n                                Margin=\"3\"/>\n                        <TextBox IsReadOnly=\"True\" \n                            Grid.Column=\"1\"\n                               Text=\"{Binding Categories}\"\n                                   Margin=\"3\"\n                                     TextWrapping=\"Wrap\"/>\n                        <TextBox IsReadOnly=\"True\" \n                            Grid.Column=\"2\" \n                              Text=\"{Binding PostContent}\"\n                                 Margin=\"3\"/>\n                    </Grid>\n                </DataTemplate>\n            </ListView.ItemTemplate>\n        </ListView>\n    </Grid>\n    ```", "```cs\n    public MainWindow()\n    {\n        InitializeComponent();\n        Loaded += MainWindow_Loaded;\n    }\n    private async void MainWindow_Loaded(object sender, \n        RoutedEventArgs e)\n    {\n        FeedAggregator aggregator = new();\n        var items = await aggregator\n            .GetAllMicrosoftBlogPosts();\n        mainListView.ItemsSource = items;\n    }\n    ```", "```cs\n    public static async Task GetCategoriesForFeed(string \n        url)\n    {\n    }\n    ```", "```cs\n    // Downloads the requested blog posts.\n    var downloadFeed = new TransformBlock<string, \n        IEnumerable<SyndicationItem>>(url =>\n    {\n        Console.WriteLine(\"Fetching feed from '{0}'...\", \n            url);\n        return RssFeedService.GetFeedItems(url);\n    });\n    ```", "```cs\n    // Aggregates the categories from all the posts.\n    var createCategoryList = new TransformBlock\n        <IEnumerable<SyndicationItem>, List\n            <SyndicationCategory>>(items =>\n    {\n        Console.WriteLine(\"Getting category list...\");\n        var result = new List<SyndicationCategory>();\n        foreach (var item in items)\n        {\n            result.AddRange(item.Categories);\n        }\n        return result;\n    });\n    ```", "```cs\n    // Removes duplicates.\n    var deDupList = new TransformBlock<List\n        <SyndicationCategory>, List<SyndicationCategory>>\n            (categories =>\n    {\n        Console.WriteLine(\"De-duplicating category \n            list...\");\n        var categoryComparer = new CategoryComparer();\n        return categories.Distinct(categoryComparer)\n            .ToList();\n    });\n    ```", "```cs\n    // Gets the category names from the list of category \n        objects.\n    var createCategoryString = new TransformManyBlock\n        <List<SyndicationCategory>, string>(categories =>\n    {\n        Console.WriteLine(\"Extracting category names...\");\n        return categories.Select(c => c.Name);\n    });\n    ```", "```cs\n    // Prints the upper-cased unique categories to the \n        console.\n    var printCategoryInCaps = new ActionBlock<string>\n        (categoryName =>\n    {\n        Console.WriteLine($\"Found CATEGORY \n            {categoryName.ToUpper()}\");\n    });\n    ```", "```cs\n    var linkOptions = new DataflowLinkOptions { \n        PropagateCompletion = true };\n    downloadFeed.LinkTo(createCategoryList, linkOptions);\n    createCategoryList.LinkTo(deDupList, linkOptions);\n    deDupList.LinkTo(createCategoryString, linkOptions);\n    createCategoryString.LinkTo(printCategoryInCaps, \n        linkOptions);\n    ```", "```cs\n    await downloadFeed.SendAsync(url);\n    downloadFeed.Complete();\n    await printCategoryInCaps.Completion;\n    ```", "```cs\n    using OutputBlogCategories;\n    Console.WriteLine(\"Hello, World!\");\n    await FeedCategoryTransformer.GetCategoriesForFeed\n        (\"https://blogs.windows.com/feed\");\n    Console.ReadLine();\n    ```", "```cs\n    public static void JoinData()\n    {\n    }\n    ```", "```cs\n    var stringQueue = new BufferBlock<string>();\n    var integerQueue = new BufferBlock<int>();\n    var joinStringsAndIntegers = new JoinBlock<string, \n        int>(\n        new GroupingDataflowBlockOptions\n        {\n            Greedy = false\n        });\n    var stringIntegerAction = new ActionBlock\n        <Tuple<string, int>>(data =>\n    {\n        Console.WriteLine($\"String received: \n            {data.Item1}\");\n        Console.WriteLine($\"Integer received: \n            {data.Item2}\");\n    });\n    ```", "```cs\n    stringQueue.LinkTo(joinStringsAndIntegers.Target1);\n    integerQueue.LinkTo(joinStringsAndIntegers.Target2);\n    joinStringsAndIntegers.LinkTo(stringIntegerAction);\n    ```", "```cs\n    stringQueue.Post(\"one\");\n    stringQueue.Post(\"two\");\n    stringQueue.Post(\"three\");\n    integerQueue.Post(1);\n    integerQueue.Post(2);\n    integerQueue.Post(3);\n    stringQueue.Complete();\n    integerQueue.Complete();\n    Thread.Sleep(1000);\n    Console.WriteLine(\"Complete\");\n    ```", "```cs\n    using JoinBlockExample;\n    DataJoiner.JoinData();\n    Console.ReadLine();\n    ```"]