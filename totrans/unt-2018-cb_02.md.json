["```cs\nusing UnityEngine; \nusing UnityEngine.SceneManagement; \n\npublic class SceneLoader : MonoBehaviour { \n    public void LoadOnClick(int sceneIndex) { \n        SceneManager.LoadScene(sceneIndex); \n    } \n} \n```", "```cs\nusing UnityEngine; \n\npublic class ArrangeActions : MonoBehaviour { \n   private RectTransform panelRectTransform; \n\n   void Awake() { \n         panelRectTransform = GetComponent<RectTransform>(); \n   }  \n\n   public void MoveDownOne() { \n         int currentSiblingIndex = panelRectTransform.GetSiblingIndex(); \n         panelRectTransform.SetSiblingIndex( currentSiblingIndex - 1 ); \n   } \n\n   public void MoveUpOne() { \n         int currentSiblingIndex = panelRectTransform.GetSiblingIndex(); \n         panelRectTransform.SetSiblingIndex( currentSiblingIndex + 1 );           \n   } \n}\n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\npublic class SliderValueToText : MonoBehaviour { \n   public Slider sliderUI; \n   private Text textSliderValue; \n\n   void Awake() {\n         textSliderValue = GetComponent<Text>(); \n   } \n\n   void Start() { \n         ShowSliderValue(); \n   } \n\n   public void ShowSliderValue () { \n         string sliderMessage = \"Slider value = \" + sliderUI.value; \n         textSliderValue.text = sliderMessage; \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\n[RequireComponent(typeof(CountdownTimer))] \npublic class SliderTimerDisplay : MonoBehaviour { \n   private CountdownTimer countdownTimer; \n   private Slider sliderUI; \n\n   void Awake() { \n         countdownTimer = GetComponent<CountdownTimer>(); \n         sliderUI = GetComponent<Slider>(); \n   } \n\n   void Start() { \n         SetupSlider(); \n         countdownTimer.ResetTimer( 30 ); \n   } \n\n   void Update () { \n         sliderUI.value = countdownTimer.GetProportionTimeRemaining(); \n         print (countdownTimer.GetProportionTimeRemaining()); \n   } \n\n   private void SetupSlider () { \n         sliderUI.minValue = 0; \n         sliderUI.maxValue = 1; \n         sliderUI.wholeNumbers = false; \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \n\npublic class CustomCursorPointer : MonoBehaviour { \n  public Texture2D cursorTexture2D; \n  private CursorMode cursorMode = CursorMode.Auto; \n  private Vector2 hotSpot = Vector2.zero; \n\n  public void OnMouseEnter() { \n    SetCustomCursor(cursorTexture2D); \n  } \n\n  public void OnMouseExit() { \n    SetCustomCursor(null); \n  } \n\n  private void SetCustomCursor(Texture2D curText){ \n    Cursor.SetCursor(curText, hotSpot, cursorMode); \n  } \n}\n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\npublic class DisplayChangedTextContent : MonoBehaviour { \n   public InputField inputField; \n   private Text textDisplay; \n\n   void Awake() { \n         textDisplay = GetComponent<Text>(); \n   } \n\n   public void DisplayNewValue () { \n         textDisplay.text = \"last entry = '\" + inputField.text + \"'\"; \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\npublic class ToggleChangeManager : MonoBehaviour { \n   private Toggle toggle; \n\n   void Awake () { \n         toggle = GetComponent<Toggle>();     \n   } \n\n   public void PrintNewToggleValue() { \n         bool status = toggle.isOn; \n         print (\"toggle status = \" + status); \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \nusing UnityEngine.UI; \n\npublic class RadioButtonManager : MonoBehaviour { \n  private string currentDifficulty = \"Easy\"; \n\n  public void PrintNewGroupValue(Toggle sender){ \n    // only take notice from Toggle just switched to On \n    if(sender.isOn){ \n      currentDifficulty = sender.tag; \n      print (\"option changed to = \" + currentDifficulty); \n    } \n  } \n}\n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\npublic class DropdownManager : MonoBehaviour  { \n    private Dropdown dropdown; \n\n    private void Awake() { \n        dropdown = GetComponent<Dropdown>(); \n    } \n\n    public void PrintNewValue() { \n        int currentValue = dropdown.value; \n        print (\"option changed to = \" + currentValue); \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\npublic class Radar : MonoBehaviour { \n   public float insideRadarDistance = 20; \n   public float blipSizePercentage = 5; \n   public GameObject rawImageBlipCube; \n   public GameObject rawImageBlipSphere; \n   private RawImage rawImageRadarBackground; \n   private Transform playerTransform; \n   private float radarWidth; \n   private float radarHeight; \n   private float blipHeight; \n   private float blipWidth; \n\n   void Start() { \n         rawImageRadarBackground = GetComponent<RawImage>(); \n         playerTransform = GameObject.FindGameObjectWithTag(\"Player\").transform; \n         radarWidth = rawImageRadarBackground.rectTransform.rect.width; \n         radarHeight = rawImageRadarBackground.rectTransform.rect.height; \n         blipHeight = radarHeight * blipSizePercentage / 100; \n         blipWidth = radarWidth * blipSizePercentage / 100; \n   } \n\n   void Update() { \n         RemoveAllBlips(); \n         FindAndDisplayBlipsForTag(\"Cube\", rawImageBlipCube); \n         FindAndDisplayBlipsForTag(\"Sphere\", rawImageBlipSphere); \n   } \n\n   private void FindAndDisplayBlipsForTag(string tag, GameObject prefabBlip) { \n         Vector3 playerPos = playerTransform.position; \n         GameObject[] targets = GameObject.FindGameObjectsWithTag(tag); \n         foreach (GameObject target in targets) { \n               Vector3 targetPos = target.transform.position; \n               float distanceToTarget = Vector3.Distance(targetPos, playerPos); \n               if ((distanceToTarget <= insideRadarDistance)) \n                CalculateBlipPositionAndDrawBlip (playerPos, targetPos, prefabBlip); \n         } \n   }  \n\n    private void CalculateBlipPositionAndDrawBlip (Vector3 playerPos, Vector3 targetPos, GameObject prefabBlip) { \n         Vector3 normalisedTargetPosition = NormaizedPosition(playerPos, targetPos); \n         Vector2 blipPosition = CalculateBlipPosition(normalisedTargetPosition); \n         DrawBlip(blipPosition, prefabBlip); \n   } \n\n   private void RemoveAllBlips() { \n         GameObject[] blips = GameObject.FindGameObjectsWithTag(\"Blip\"); \n         foreach (GameObject blip in blips) \n               Destroy(blip); \n   } \n\n   private Vector3 NormaizedPosition(Vector3 playerPos, Vector3 targetPos) { \n         float normalisedyTargetX = (targetPos.x - playerPos.x) / insideRadarDistance; \n         float normalisedyTargetZ = (targetPos.z - playerPos.z) / insideRadarDistance; \n         return new Vector3(normalisedyTargetX, 0, normalisedyTargetZ); \n   } \n\n   private Vector2 CalculateBlipPosition(Vector3 targetPos) { \n         float angleToTarget = Mathf.Atan2(targetPos.x, targetPos.z) * Mathf.Rad2Deg; \n         float anglePlayer = playerTransform.eulerAngles.y; \n         float angleRadarDegrees = angleToTarget - anglePlayer - 90; \n         float normalizedDistanceToTarget = targetPos.magnitude; \n         float angleRadians = angleRadarDegrees * Mathf.Deg2Rad; \n         float blipX = normalizedDistanceToTarget * Mathf.Cos(angleRadians); \n         float blipY = normalizedDistanceToTarget * Mathf.Sin(angleRadians); \n         blipX *= radarWidth / 2; \n         blipY *= radarHeight / 2; \n         blipX += radarWidth / 2; \n         blipY += radarHeight / 2; \n         return new Vector2(blipX, blipY); \n   } \n\n   private void DrawBlip(Vector2 pos, GameObject blipPrefab) { \n         GameObject blipGO = (GameObject)Instantiate(blipPrefab); \n         blipGO.transform.SetParent(transform.parent); \n         RectTransform rt = blipGO.GetComponent<RectTransform>(); \n         rt.SetInsetAndSizeFromParentEdge(RectTransform.Edge.Left, pos.x, blipWidth); \n         rt.SetInsetAndSizeFromParentEdge(RectTransform.Edge.Top, pos.y, blipHeight); \n   } \n} \n```"]