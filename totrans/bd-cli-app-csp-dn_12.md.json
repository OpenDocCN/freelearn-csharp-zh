["```cs\ndotnet add package BenchmarkDotNet\n```", "```cs\nif(args.Length > 0 && args[0].ToLower() == \"benchmark\")\n{\n    BenchmarkRunner.Run<Benchmarks>();\n    return 0;\n}\n```", "```cs\npublic async Task ExportBookmarks()\n{\n    var exportCmd = new ExportCommand(_service!, \"export\", \"Exports \n    all bookmarks to a file\");\n    var exportArgs = new string[] { \"--file\", \"bookmarksbench.json\" };\n    await exportCmd.InvokeAsync(exportArgs);\n}\n```", "```cs\n[Benchmark]\npublic async Task ExportBookmarks()\n{\n    var exportCmd = new ExportCommand(_service!, \"export\", \"Exports \n    all bookmarks to a file\");\n    var exportArgs = new string[] { \"--file\", \"bookmarksbench.json\" };\n    await exportCmd.InvokeAsync(exportArgs);\n}\n```", "```cs\n#region Properties\nprivate IBookmarkService? _service;\n#endregion\n#region GlobalSetup\n[GlobalSetup]\npublic void BenchmarksGlobalSetup()\n{\n    _service = new BookmarkService();\n}\n#endregion\n```", "```cs\ndotnet build -c Release\n```", "```cs\ndotnet C:\\code\\Chap12\\bookmarkr\\bin\\Release\\net8.0\\bookmarkr.dll benchmark\n```", "```cs\n[MemoryDiagnoser]\npublic class Benchmarks\n{\n    // …\n}\n```", "```cs\nstring json = JsonSerializer.Serialize(bookmarks, new JsonSerializerOptions { WriteIndented = true });\nawait File.WriteAllTextAsync(outputfile.FullName, json, token);\n```", "```cs\nusing var fileStream = new FileStream(outputfile.FullName, FileMode.Create, FileAccess.Write, FileShare.None, 4096, true);\nawait JsonSerializer.SerializeAsync(fileStream, bookmarks, new JsonSerializerOptions { WriteIndented = true }, token);\n```", "```cs\n[Benchmark]\npublic async Task ExportBookmarksOptimized()\n{\n    var exportCmd = new ExportCommandOptimized(_service!, \"export\", \n    \"Exports all bookmarks to a file\");\n    var exportArgs = new string[] { \"--file\", \"bookmarksbench.json\" };\n    await exportCmd.InvokeAsync(exportArgs);\n}\n```", "```cs\n[Benchmark(Baseline = true)]\n```"]