["```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApp1\n{\n    public class Customer\n    {\n        public string name;\n        public string customerId;\n    } \n}\n```", "```cs\npublic class Account\n{\n  public DateTime openingDate;\n  public Customer customer;\n  private float currentBalance;\n  public bool OpenAccount(Customer customer)\n  {\n     this.openingDate = DateTime.Now.Date;\n     this.currentBalance = 0.0f;\n     this.customer = customer;\n     return true;      \n  }  \n  public bool DepositMoney(float deposit)\n  {\n     if(deposit > 0.0f)\n     {\n         this.currentBalance = this.currentBalance + deposit;\n         return true;\n     }\n     else\n     {\n         return false;\n     }\n  }\n  public bool WithdrawMoney(float withdraw)\n  {\n     if(this.currentBalance >= withdraw)\n     {\n         this.currentBalance = this.currentBalance - withdraw;\n         return true;\n     }\n     else\n     {\n         return false;\n     } \n  }\n}\n}\n```", "```cs\nCustomer customer = new Customer();\ncustomer.name = \"Sample Customer\";\ncustomer.customerId = \"12345\";\n\nAccount newAccount = new Account();\nnewAccount.OpenAccount(customer);\nnewAccount.DepositMoney(1000);\nnewAccount.WithdrawMoney(400);\n```", "```cs\npublic bool OpenAccount(Customer customer)\n{\n    this.openingDate = DateTime.Now.Date;\n    this.currentBalance = 0.0f;\n    this.customer = customer;\n    if(VerifiyCustomerIdentity() && OpenAndLinkRelatedAccounts() && RetrieveAndCountDeposit())\n      {\n        return true;\n      }\n    else\n    {\n        return false;\n    } \n}\nprivate bool VerifiyCustomerIdentity()\n{\n    //This function will verify the customer documents.\n    return true;\n}\nprivate bool OpenAndLinkRelatedAccounts()\n{    \n    //This function will open the related accounts of savings , current and salary and link them together.\n    return true;\n}\nprivate bool RetrieveAndCountDeposit()\n{\n    //This function will fetch the deposit, count and verify the amount.\n    return true;\n}\npublic bool DepositMoney(float deposit)\n{\n     this.currentBalance = this.currentBalance + deposit;\n     return true;\n} \n```", "```cs\npublic class Car\n{\n     public Car()\n     {\n         Console.WriteLine(\"Inside Car\");\n     }\n     public void Accelerate()\n     {\n         Console.WriteLine(\"Inside Acceleration of Car\");\n     }     \n}\npublic class Ferrari : Car\n{\n     public Ferrari()\n     {\n         Console.WriteLine(\"Inside Ferrari\");\n     }\n     public void Accelerate()\n     {\n         Console.WriteLine(\"Inside Acceleration of Ferrari\");\n     }     \n}\npublic class Suzuki : Car\n{\n     public Suzuki()\n     {\n         Console.WriteLine(\"Inside Suzuki\");\n     }\n     public void Accelerate()\n     {\n         Console.WriteLine(\"Inside Acceleration of Suzuki\");\n     }     \n }\n```", "```cs\nCar ferrari = new Ferrari();\nferrari.Accelerate();\nConsole.WriteLine(\"End of Ferrari Implementation\");\nCar suzuki = new Suzuki();\nsuzuki.Accelerate();\nConsole.WriteLine(\"End of Suzuki Implementation\"); \n```", "```cs\npublic class Car\n{\n     public Car()\n     {\n         Console.WriteLine(\"Inside Car\");\n     }\n     public virtual void Accelerate()\n     {\n         Console.WriteLine(\"Inside Acceleration of Car\");\n     }     \n}\npublic class Ferrari : Car\n{\n     public Ferrari()\n     {\n         Console.WriteLine(\"Inside Ferrari\");\n     }\n     public override void Accelerate()\n     {\n         Console.WriteLine(\"Inside Acceleration of Ferrari\");\n     }     \n}\npublic class Suzuki : Car\n{\n     public Suzuki()\n     {\n         Console.WriteLine(\"Inside Suzuki\");\n     }\n     public override void Accelerate()\n     {\n         Console.WriteLine(\"Inside Acceleration of Suzuki\");\n     }     \n }\n```", "```cs\npublic abstract class Animal\n{\n     public abstract void Speak();\n     public void Walk()\n     {\n         Console.WriteLine(\"Base Animal Walk Functionality\");\n     }\n}\n```", "```cs\npublic class Dog : Animal\n{\n     public override void Speak()\n     {\n         Console.WriteLine(\"A dog will bark\");\n     }\n}\n```", "```cs\npublic abstract class Animal\n{\n     public virtual void Speak()\n     { \n     }\n}\n```", "```cs\nstatic int AddNumber (int a, int b)\n{\n     Console.WriteLine(\"Accepting two inputs\");\n     return a + b;\n}\nstatic int AddNumber(int a, int b, int c)\n{\n     Console.WriteLine(\"Accepting three inputs\");\n     return a + b + c;\n} \n```", "```cs\nint result = AddNumber(1, 2);\nConsole.WriteLine(result);\nint result2 = AddNumber(1, 2, 3);\nConsole.WriteLine(result2);\nConsole.ReadLine();\n```", "```cs\npublic class Dog \n{\n}\npublic class Cat \n{\n}\n```", "```cs\nstatic void AnimalImplementation(Dog dog)\n{\n    Console.WriteLine(\"The implementation is for a dog.\"); \n}\nstatic void AnimalImplementation(Cat cat)\n{\n    Console.WriteLine(\"The implementation is for a cat.\");\n}\n```", "```cs\nCat cat = new Cat();\nDog dog = new Dog();\nAnimalImplementation(cat);\nAnimalImplementation(dog);\nConsole.ReadLine();\n```", "```cs\npublic class Animal\n{\n     public int numOfHands;\n     public int numOfLegs;\n     public virtual void Speak()\n     {\n         Console.WriteLine(\"This is a base implementation in the base animal class\");\n     }\n}\n```", "```cs\npublic class Dog : Animal\n{\n    public string breed;\n    public Dog(string breed, int hands, int legs)\n    {\n        this.breed = breed;\n        base.numOfHands = hands;\n        base.numOfLegs = legs;\n    }\n\n    public override void Speak()\n    {\n        Console.WriteLine(\"A dog will bark , its breed is \" + this.breed + \" and number of legs and hands         are \" + this.numOfLegs + \" \" + this.numOfHands);\n    }\n}\n```", "```cs\npublic class Human : Animal\n{\n    public string countryOfCitizenship;\n    public Human(string citizenship, int hands, int legs)\n    {\n         this.countryOfCitizenship = citizenship;\n         base.numOfHands = hands;\n         base.numOfLegs = legs;\n    }\n    public override void Speak()\n    {\n         Console.WriteLine(\"A man can speak multiple languages, its citizenship is \" +                              this.countryOfCitizenship + \" and number of legs and hands are \" + this.numOfLegs + \" \" +                  this.numOfHands);\n    }\n}\n```", "```cs\nAnimal animal = new Animal();\nanimal.numOfHands = 2;\nanimal.numOfLegs = 4;\nanimal.Speak();\n\nanimal = new Dog(\"Labrador\", 0, 4);\nanimal.Speak();\n\nanimal = new Human(\"India\", 2, 2);\nanimal.Speak();\nConsole.ReadLine();\n```"]