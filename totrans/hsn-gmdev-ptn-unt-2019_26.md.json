["```cs\nusing System;\nusing System.Linq;\nusing UnityEngine;\n\npublic class Grid: MonoBehaviour\n{\n    private int m_SquareSize;\n    private int m_NumberOfSquares;\n\n    public Grid(int squareSize, int numberOfSquares)\n    {\n        // The size can represent anything (meters, km)\n        m_SquareSize = squareSize;\n\n        // Squares permits to subdivide the grid granulary\n        m_NumberOfSquares = numberOfSquares;\n    }\n\n    public void AddToRandomnPosition(IUnit unit)\n    {\n        unit.AddToGrid(UnityEngine.Random.Range(0, m_NumberOfSquares));\n    }\n\n    public int FindClosest(IUnit referenceUnit, IUnit[] list)\n    {\n        if (list != null)\n        {\n            // Using LINQ queries\n            var points = list.Select(a => a.GetGridPosition()).ToList();\n            var nearest = points.OrderBy(x => Math.Abs(x - referenceUnit.GetGridPosition())).First();\n            return nearest;\n        }\n        else\n        {\n            throw new ArgumentException(\"Parameters cannot be null\", \"list\");\n        }\n    }\n}\n```", "```cs\npublic interface IUnit\n{\n    // The Unit can add itself to the grid\n    void AddToGrid(int cell);\n\n    // The Unit can return is current grid position\n    int GetGridPosition();\n}\n```", "```cs\nusing UnityEngine;\n\npublic class Prey : MonoBehaviour, IUnit\n{\n    private int m_Square;\n\n    public void AddToGrid(int square)\n    {\n        m_Square = square;\n    }\n\n    public int GetGridPosition()\n    {\n        return m_Square;\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class Predator : MonoBehaviour, IUnit\n{\n    private int m_Square;\n\n    public void AddToGrid(int square)\n    {\n        m_Square = square;\n    }\n\n    public int GetGridPosition()\n    {\n        return m_Square;\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Pattern.SpatialPartition\n{\n    public class Client : MonoBehaviour\n    {\n        private Grid m_Grid;\n        private IUnit[] m_Preys;\n\n        void Start()\n        {\n            m_Grid = new Grid(4, 16);\n            Debug.Log(\"Grid generated\");\n        }\n\n        void Update()\n        {\n            if (Input.GetKeyDown(KeyCode.P))\n            {\n                IUnit prey;\n                int numberOfPrey = 5;\n                m_Preys = new IUnit[numberOfPrey];\n\n                for (int i = 0; i < numberOfPrey; i++)\n                {\n                    prey = new Prey();\n                    m_Grid.AddToRandomnPosition(prey);\n                    m_Preys[i] = prey;\n\n                    Debug.Log(\"A prey was spawned @ square: \" + m_Preys[i].GetGridPosition());\n                }\n            }\n\n            if (Input.GetKeyDown(KeyCode.H))\n            {\n                IUnit predator;\n                predator = new Predator();\n                m_Grid.AddToRandomnPosition(predator);\n                Debug.Log(\"A predator was spawned @ square: \" + predator.GetGridPosition());\n\n                int closest = m_Grid.FindClosest(predator, m_Preys);\n                Debug.Log(\"The closest prey is @ square: \" + closest);\n            }\n        }\n\n        void OnGUI()\n        {\n            GUI.color = Color.black;\n            GUI.Label(new Rect(10, 10, 500, 20), \"Press P to spawn prey on the grid.\");\n            GUI.Label(new Rect(10, 30, 500, 20), \"Press H to hunt some prey.\");\n            GUI.Label(new Rect(10, 50, 500, 20), \"Open Debug Console to view the output.\");\n        }\n    }\n}\n```"]