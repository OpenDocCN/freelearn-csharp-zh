- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Utopic Perfect IT System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember the joke in [*Chapter 4*](B21293_04.xhtml#_idTextAnchor121) about the
    perfect information system being formed by a computer, a human, and a dog? There
    was some truth in this because humans change all the time (their minds, their
    way of doing, the rules they follow in business, what they want to buy, and so
    on), while computers are happy with repeating, stable, well-defined tasks. Of
    course, the two do not mix well, hence the presence of the dog to prevent the
    human from making a mess of the computer work.
  prefs: []
  type: TYPE_NORMAL
- en: But who created the computer first? Human, of course. So, the joke was not about
    the fact that humans should not touch computers at all, but rather create them
    and then let them do the work without changing anything afterward. Of course,
    this would only be possible if the first attempt was, through some kind of a miracle,
    perfect.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The concept of an ideal system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data management in the ideal system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules management in the ideal system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processes management in the ideal system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How close can we get to this utopic system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will describe what would resemble this 100% ideal information system,
    with an ability to adapt to the ever-changing business changes and still perform
    in terms of speed and robustness, as well as energy efficiency. Such a system
    was imagined by Dominique Vauquier in his fundamental book *Le système d’information
    durable - la refonte du SI avec SOA*. The three main entities constituting the
    ideal information system are **master data management** (**MDM**), **business
    rules management system** (**BRMS**), and **business process modeling** (we are
    going to explain these in more detail shortly). The next few sections will explain
    them one by one, and this chapter will end with an analysis of how this utopic
    system could be created in reality and what would prevent this.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of an ideal IT system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we detail the different parts of such an ideal system, I will explain
    a bit more about the usefulness of such a model. When things are a bit clearer
    about the goal we want to reach, we will detail the different parts of the concept
    and try to make them more concrete.
  prefs: []
  type: TYPE_NORMAL
- en: The use for an ideal structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '“Ideal” or “utopic” are terms that engineers generally have a strange relationship
    with. Though much of their thinking is done inside hypothetical contexts to make
    an advance in theory, they know that practice will always be quite a long shot
    from the theory and, depending on how they are versed between theory and practice,
    engineers can easily fall into many traps:'
  prefs: []
  type: TYPE_NORMAL
- en: Staying purely in theory risks that their thinking is never applied in the real
    world, which ends up in a loss of time and also an impossibility of truly knowing
    the value of their work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not having enough theoretical background to make advances in their field; remaining
    purely in the practice of the job might help refine some areas but seldom bring
    strong, domain-changing, revolutionary ideas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The worst of all: switching between the two but never making real links between
    them that enrich the practice from the theory and confirm the theory from the
    practice. This capacity of bringing the two together is, in my opinion, what makes
    the best engineering structures, may they be companies or even countries that
    teach and organize this capacity at the highest level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is why there is a place in such a book, otherwise extremely turned toward
    practices with lots of returns on experience from many real-world information
    systems, for a bit of theory and ideal thinking.
  prefs: []
  type: TYPE_NORMAL
- en: The origin of the design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The structure of an ideal system, as we are going to describe here, was first
    coined in a *Le système d’information durable - la refonte du SI avec SOA*, by
    Dominique Vauquier, one of the best-known enterprise architects in France, and
    proponent of the PRAXEME method. I was lucky enough to receive training more than
    10 years ago and its explanations were so clear that I immediately bought his
    books, which quickly became some of my references for my consulting work in information
    system industrialization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The principles behind this idea were that, knowing lots of information systems,
    it was possible to describe a kind of meta-system that would encompass all the
    necessary features with only a few generic modules that could be customized to
    implement the business-related aspects. Each of these three modules would be extremely
    general and not related at all to any particular business, which explains why
    there is so little in the whole system. These three areas are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Storing data and making it available (roughly speaking, this is what gets done
    by databases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing business rules to make decisions (this would be where software applications
    consuming the data come into the game)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing complex processes by orchestrating many small tasks (though very
    approximative, this is what making applications work together is about)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dominique Vauquier was indeed able to point to any business feature as a composition
    of these three different technical functions. After working with many industrial
    information systems in small and large companies, he considered that the three
    modules together would be able to handle every imaginable feature of any given
    business domain. Though this is not a structure that has been largely used for
    now, it may be just a very anticipated glimpse at what would become industrialized
    and well-controlled information systems a few decades from now. At least, this
    is – from my humble point of view – the best candidate for such a structure with
    so much ahead-thinking.
  prefs: []
  type: TYPE_NORMAL
- en: Using a vision to define a target
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why should we talk about an architecture that is so futuristic and that we do
    not have any proof of its capability to be applied in practice? Can this lead
    to overthinking or over-engineering? If you ask yourself these questions, you
    are very right to do so, and this chapter is not about pushing you to use this
    tool for your next information system architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Just like any pattern or architecture tool, it is principally there to give
    you some ideas and, if some parts of it are fit for your system, it will be great
    that it helps you go forward and accelerate your thinking.
  prefs: []
  type: TYPE_NORMAL
- en: But having an “ideal” or “utopic” vision can also be helpful to give a global
    orientation to your realization. Remember the metaphor of Agile development, where
    we do not shoot an arrow but walk with it toward the target and plant the arrow
    with our hands when the target is reached? Well, to do so, we agreed that we need
    to know what the target is like to find and reach it. And sometimes, the target
    shape can be hard to imagine. Sure, a business-oriented mind will give you the
    best idea and you should remain functionally-focused. But what happens if the
    business ideas are quite blurry? Maybe a “soft,” adaptable information system
    would allow you to start working while things get a little clearer. Starting building
    the system will even help the business owners think better about what they want.
    And if you have an “ideal” system that can very quickly adapt to their minds constructing
    the business idea, it may be the kind of system you need for such a project.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there will be an extra cost of being completely generic (in performance
    but also time for initial setup), but if this is the kind of situation you are
    in, the capacity to adapt to a moving business target by simply customizing parameters
    of the information system may largely overcome these drawbacks. And nothing prevents
    you, once the business vision is settled, from re-implementing some now-stable
    parts with specific, optimized bits of code, where needed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the vision is clear, we are going to dive deeper into the three parts
    that constitute this ideal IT system, namely the data management module, the rules
    management module, and, finally, the process management module.
  prefs: []
  type: TYPE_NORMAL
- en: Data management in the ideal system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MDM** is the very first part of the ideal system. Before talking about how
    the data is processed and used, it is logical to explain what form the data will
    take and how it will be managed. This is why we will explain the concept of MDM
    in a utopic system before discussing BRMS and BPM.'
  prefs: []
  type: TYPE_NORMAL
- en: Data is the blood of information systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data is the most important component of any information system. Some people
    may even think they are purely about data since the very term “data” has been
    so hyped in the past decade.
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, it is hard to imagine an information system without at least one
    database to store the data, since it would mean there is no knowledge of any business
    event that stays there. It is possible to imagine some pieces of information that
    are completely transient and not stored, but a whole system made of such particular
    cases sounds impossible to fathom.
  prefs: []
  type: TYPE_NORMAL
- en: This means that data should be taken care of first and foremost, and this is
    what the first module of the ideal generic information system is about. The feature
    is called MDM. The term *master*, in this case, refers to the most important data
    in a system, those used by most of the participants in the system. But in this
    particular case of a utopic system, every single piece of data would be considered
    as such and placed in a single module that deals with this responsibility of “MDM.”
  prefs: []
  type: TYPE_NORMAL
- en: Data as the 21st-century oil – really?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we dive a bit more into what would be such a module, a small additional
    note on the importance of data: you may heard the expression “oil of the 21st
    century” regarding data. This is to stress the point that data has become such
    an important part of commercial organizations nowadays that it can be compared
    to oil, which has brought a huge part of the industry improvements in the 20th
    century.'
  prefs: []
  type: TYPE_NORMAL
- en: Data is used by many industrial companies to follow their machines, optimize
    production, and relate it to selling and stocks, in short virtualizing the industrial
    process in a “digital twin” to better control it. But for some industries, data
    may even be the raw material itself, and lots of digital-native companies nowadays
    make their money purely out of data collection, refining, and reselling, particularly
    for advertisement activities.
  prefs: []
  type: TYPE_NORMAL
- en: Oil exploitation, which has happened since the 20th century, has allowed industrial
    production to be accelerated dramatically in almost every domain (heavy industries,
    trains, fertilizers, agriculture machinery, and so on) but also brought to life
    many of the biggest companies to exploit and produce oil itself. This comparison
    is fair, although care should be taken in keeping a few important differences
    in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the equivalent of the oil-cracking refinery column has not been invented
    yet for data, or at least not in its standard form. Sure, some business intelligence
    tools and big data approaches can help in some cases, but the rate of failure
    of data projects (estimated between 70 and 80%, depending on the studies) shows
    that we are still far from industrialization in oil-refinery plants. To this day,
    data remains partly, for most companies, such as oil, was for land owners at the
    end of the 19th century: pollution. Sure, there is value in it, but it is completely
    out of exploitation, and there is no standard way of extracting this value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also not forget that data remains based on actual oil: data centers consume
    a huge amount of energy (soon, 8% of the energy on the planet will be taken for
    digital uses, which is more than air travel and will soon reach car transportation).
    And though some data center owners pretend to use renewable energies (but just
    buy compensating activities, which does not reduce global oil consumption), most
    of them are still heavily dependent on oil for energy. In addition, the production
    of servers and network hardware, the transportation used for them, and the exploitation
    functions are large consumers of energy and, eventually, oil.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is very important to keep in mind that data may indeed become
    the oil of the next century, but we are in this situation at the moment. The data
    management approach described in this chapter may help you reach it, particularly
    by using governance to improve data quality, which remains the number-one cause
    hindering data exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: A really “know it all” system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I will not go into too much detail in this chapter since MDM is the subject
    of a dedicated chapter later in this book, and it will be explained together with
    a real example, which will hopefully make everything easier. For now, I will just
    propose a comparison of the MDM with a “know-it-all all” system. Indeed, a well-made
    MDM will not only know the state of entities at present but will know the whole
    story of each entity and remember their different states and modifications, from
    cradle (creation) to grave (archiving or deletion). Due to this, **persistence**
    is the main responsibility of an MDM module.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are some other responsibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ease of research**: This goes with persistence because keeping data without
    making it available afterward would not make much sense. This particular responsibility
    might be delegated in its implementation, typically when the MDM application uses
    an indexation engine, for example (full-text search is a complicated matter that
    justifies cutting a responsibility into several more atomic ones and trusting
    dedicated modules with each).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Origin of reporting /business intelligence**: Just like data search, reporting
    is an important responsibility that MDM modules can trust other implementations
    with, for example, a data lake.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ability to handle multiple versions of entities**: As explained previously,
    a true MDM should know **every** version of a data entity, not only its “latest”
    state (the quotes are there to stress the point that this “latest” concept is
    something of a pain in lots of systems, particularly when they are distributed,
    because it depends on the consistency of data, and thus transactions, optimistic/pessimistic
    locks, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capacity to manage validation for attribute values**: Though this might be
    a shared responsibility with the BRMS, which we will discuss later in this chapter,
    a small amount of validation can be done by the MDM itself to ensure its basic
    consistency. This should not be confused with data correctness, which depends
    on its purpose (a single piece of data can be fit for business use but not for
    another one) and can vary well in time, depending on the data versions but also
    the changes of business rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business rules**: Some entry-level business rules, which only use data that
    is present inside the MDM system, can also be added to the MDM, though most of
    them are concerned with validation, as stated previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handling of history**: Alongside storing successive versions of data, the
    MDM has to be able to make it possible to easily retrieve these versions depending
    on the time targeted, browse through the history, find who has made which type
    of change on the data, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this doesn’t seem clear, don’t worry – the example provided later in this
    book of an MDM storing a person’s data will help you understand how all these
    responsibilities are used and implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Relationship with CQRS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are into data architecture, the separation of concerns between storing
    versioned modifications of the data and searching the different states of it might
    have been identified by you as the principle of **command and query responsibility
    segregation** (**CQRS**). We are indeed talking about the same principles, even
    if CQRS goes way further than just separating the two responsibilities and proposes
    a technical approach on how to make them work together.
  prefs: []
  type: TYPE_NORMAL
- en: CQRS is too big of a subject for it to be treated in this book together with
    all the other subjects we have to explain, but it perfectly fits the separation
    of responsibilities of an MDM module, and I strongly encourage you to use this
    approach when creating MDM implementations. The example we’ll cover in the next
    few parts of this book will use a CQRS approach, though in a very limited and
    simplified implementation. Again, this is an edition choice as adding a full Kafka
    engine would have made it difficult to concentrate on the application itself and
    would get us too far from the subject of this book.
  prefs: []
  type: TYPE_NORMAL
- en: The need for data quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Coming back to the oil metaphor, having sand in it is a real problem because
    oil has to be purified enough to enter the plant. Otherwise, not only the quality
    of the output products would not be as good, but this could also damage this extremely
    expensive piece of industrial equipment that the refinery column is in. This is
    why sweet crude oil is one of the best types of oil, and also the reason why gas
    coming from bituminous sands is so costly to refine (in addition to a catastrophe
    for our environment).
  prefs: []
  type: TYPE_NORMAL
- en: 'In IT, there is a strong equivalence to data as clean data is a great product
    that will allow precise reporting on the business activity, quick insights on
    problems that may appear, and overall better control of the company. Discuss this
    with anybody in the industry and everyone will agree that the quality of data
    is of paramount importance… Yet, it is estimated that more than half of the job
    of a data scientist is to clean data. I have seen several companies where this
    proportion dangerously increases to around 80%. I say “dangerously” for many reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: First, paying a high-salary profile to realize such low-intelligence tasks is
    a waste of money
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also generally a waste of time as good data scientists will generally
    leave the job in the next 6 months if they have to work more on cleaning and assembling
    the data than “making it talk”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, it shows a problem up the pipe because the IT system that sends this
    dirty data has not been correctly designed, which means that there are good chances
    that these reporting issues are not the only ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How come everybody agrees that data cleanliness is important but the situation
    remains so awful? Well, it just so happens that data management is generally not
    about the technical part (which is quite easy, with the number of tools we have
    nowadays) but about the organizational part: who is responsible for which data?
    Who has the right to collect it and update it? Which group decides on how data
    is cut and which data goes into this or this service responsibility? All these
    subjects are a part of what is called **data governance**, which, despite its
    huge importance, is mostly not dealt with by many companies, though they have
    all the technical tools to store data. Again, this is the same root cause as usual:
    technology has never solved an organizational problem, but editors are so good
    at making you believe this… and, as a company owner, you want so much for it to
    be true! But no, you will have to do the uninteresting job of data classification,
    finding data owners and data stewards, implementing regular meetings to follow
    up on the decided data processes, and more. Creating your MDM module now is precisely
    the right time to do so as its success heavily depends on these actions.'
  prefs: []
  type: TYPE_NORMAL
- en: Designing a generic “referential”
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There will almost always be an internal designation of the software application
    that stores the main entities of an organization, for example, products. Most
    of the time, people will call this by the name of the technology – for example,
    the “products database” or the “products Excel file” – but this is a bad habit
    as it couples the functional concept with a technical, software, concept. Not
    only can these two evolve separately (and the “products file” becomes the “products
    database”) but they should be able to do so as much as possible, and thus be kept
    separate.
  prefs: []
  type: TYPE_NORMAL
- en: The “products list” is already a bit better from this point of view, but my
    favorite (because it is very close to an equivalent word in French, which is my
    native language) is to call this a product “referential.” This name bears the
    important notion of it assuming a status of reference for the data contained within
    while being also possible to see it as a referential in space, which comes back
    to the idea of a map of the information system, just like we would have a geographical
    map, with coordinates inside a referential.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The naming could be much worse, as I already cited anecdotally in [*Chapter
    3*](B21293_03.xhtml#_idTextAnchor069), with one of my customers calling the article’s
    referential simply “Serge’s file.” This led to a lot of confusion as it was hiding
    the uttermost importance of keeping this file up-to-date, which was not even Serge’s
    job officially!
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, so-called “referentials” are dedicated to a single type of
    entity (products, sales, customers, and so on) The idea of the utopic system described
    in this chapter is to have a single piece of software for any type of entity.
    We won’t dive too deep into the utopia in the rest of this book and will maintain
    a more standard approach with one implementation of referential for a given business
    domain. This also allows us to adopt the best technology for each case (the “best
    of bread” approach), rather than a “one size fits all” approach, which is interesting
    in theory but extremely complex to make work in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Choices of implementation for an MDM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Love it or hate it, Excel remains the simplest MDM you can have, and in many
    small companies, a well-organized process using Excel can already go a long way,
    provided you have removed the most important shortcomings of a good organization
    (a centralized file shared with rights for different users rather than copies
    everywhere, strict organization of data quality, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there will be a level of complexity that will necessitate a dedicated
    implementation. That sounds crazy, but there are very few software applications
    dedicated to MDM. There is an offer from Microsoft based on SQL Server called
    Master Data Services, but its use sounds very limited, at least in my area of
    knowledge. Following a discussion with Microsoft, the product is indeed abandoned,
    and the successor is a partner product called **Profisee** working together with
    **Microsoft Purview** to provide data governance functions ([https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/data/profisee-master-data-management-purview](https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/data/profisee-master-data-management-purview)).
    Semarchy ([https://www.semarchy.com](https://www.semarchy.com)) sounds like a
    new and interesting approach to integrated MDM but I have not given it a sufficient
    try to recommend it yet.
  prefs: []
  type: TYPE_NORMAL
- en: I have seen some companies using headless CMS systems such as Strapi, Sanity,
    Cockpit, Prisma, and others to create backends that can serve as entry-level MDM.
    But this generally lacks a good data versioning system and implementation of governance
    remains the job of the integrator. All in all, this is a very technology-based
    approach and, as stated previously, an MDM is much more than simply storing data.
  prefs: []
  type: TYPE_NORMAL
- en: This is roughly it for an off-the-shelf approach, and admittedly this does not
    go a long way. Every correct implementation of an MDM I have seen to this day
    has been a dedicated development. Some business applications, such as ERP, sometimes
    have a good referential for products or customers, but most of them miss the alignment
    on business.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It may sound logical that an ERP may not be business-aligned as it tries to
    be generic to many business domains. Nonetheless, when you see a top five ERP
    system proposing two separate domains for customers and suppliers, ignoring the
    possible duplication of data for most of the existing companies, this shows that
    the problem is not only the variety of businesses, but the very approach of these
    ERP companies, which consider that modeling the business is 100% the customer’s
    responsibility, whereas it should be a shared responsibility based on written,
    forward-compatible, standards. But this would go against vendor lock-in, which
    is not in their interest, and this is why the only way forward is for the customers
    to choose an implementation that accepts standards for business entity representations,
    including developing these standards in the (rare) cases where they do not exist.
  prefs: []
  type: TYPE_NORMAL
- en: What remains – and represents the vast majority of running MDM systems – are
    dedicated applications coupled with a database (and sometimes an indexation engine,
    and even a data lake, as explained previously). They are custom-developed for
    a given business use by internal IT or external software companies. This is a
    huge waste of time and money if you think globally as many companies have needs
    that are extremely close to each other. However, this is just how it is for now
    due to the lack of business standards used in the software industry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for the second part of the ideal system: after talking about data, we need
    to discuss business rules.'
  prefs: []
  type: TYPE_NORMAL
- en: Rules management in the ideal system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Business rules are predicates that apply to data to help implement real-world
    decisions made that are necessary for the business. For example, you may state
    that a customer cannot be sent a product so long as they have not checked their
    bank coordinates. This is a business rule as it can be expressed without any signs
    of software implementation: this could be done manually by someone in the plant
    checking with accounting via phone that the rule has been respected via p before
    sending the package to the customer.'
  prefs: []
  type: TYPE_NORMAL
- en: Rules as the nervous network of the information system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If data is the blood of the information system, business rules are its nervous
    and muscular networks: they use the blood to realize some activities in a given
    way. A business rule in our metaphor could be that “if you feel a burning sensation
    on your finger, the arm must retract.” This rule is implemented in our spinal
    reflex system, which uses the sensors in its fingers to send the information/data
    through the nerves, resulting in the muscles from the concerned arm being unable
    to be controlled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In IT, the implementation of business rules is mostly what are called applications.
    This is generally where business rules are contained. In our example, there must
    be some code somewhere in the ERP that alerts the package preparation system that
    the customer has not passed the condition of having a verified way of payment.
    The reaction of the packaging system may be that this order will not be processed,
    or maybe that it will be processed in advance but the resulting physical package
    will be retained before delivery. The actual implementation is the responsibility
    of each module, but the business rule remains the same: “No customer delivered
    with their orders so long as we have not verified we can get paid,”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Business rules also contain all the calculations, from the most complex to
    the most mundane, that you will perform in the information system. Let me go back
    on this because there is something to say about the right separation of responsibility:
    **no client (GUI or application calling an API) should deal with business rules,
    which always have to be implemented server-side**. This is certainly something
    that you know about and sounds logical: after all, it is obvious that such important
    bits of functional reasoning must be centralized to ensure that they are applied
    everywhere the same way. But look at any client for a few minutes and you will
    find loads of functional decisions that are made locally, sometimes with the best
    reasoning. For example, think about calculating a net amount from the gross amount
    and the VAT rate. Sure, the VAT rate does not change very often in an application’s
    lifetime, and the way the calculation is made is itself very stable, so there
    should not be any big issue with trusting the client to do this computing, and
    we are getting better performance since we avoid a roundtrip to a server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright, but you can always imagine ways that the business rule is going to
    change. As already imagined, the VAT rate can change. Also, if we are talking
    about net amount calculation for a multi-line order, you must handle multiple
    VAT rates in a single entity. The question boils down to risk management: if you
    know that you will never hit these particular cases, that’s alright. If you doubt
    the possibility they will appear in the future, you should first ask your product
    owners about it. If they are not sure about it, you will have to compare the costs
    of different approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: You can hard-code the business rule in all clients and hope it doesn’t evolve.
    If there are not that many of them and you can easily upgrade them, no big deal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can prepare for a possible change by making the rate a parameter of the
    applications you use (when they support it); this will already be better easier
    in case of adjustment, without a huge upfront cost.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you foresee changes in the business rules in the coming years and you know
    adjusting the software will be complicated, maybe you should put the rule in a
    server-side, centralized, application. Sure, it will be a bit slower, but client-side
    cache can help and you will be future-proof.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are in a situation where lots of business changes are going to happen,
    and many business rules are going to be dealt with, then you’ll reach the point
    where investing in a centralized piece of software dedicated to managing your
    business rules makes sense.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BRMS as a dedicated tool for business rule handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s concentrate on this last hypothesis, where you need what is called
    a **BRMS**. Again, it is very important to state that this is not a module you
    will need in every information system and the simplest ones do not justify such
    an installation effort. But beware that most information systems start simple
    and become more complex. The real difficulty is that, once you are in production,
    it is going to be harder to replace existing rules with a BRMS customization since
    all calls will have to be changed if they have not been unified behind an API
    contract. This is why this utopic information system makes sense: it shows what
    you should do (and does not hide the size of the investment) if you are serious
    with your information system and do not want to take any bets on it. If you know
    from the start it is going to grow and your activity will become industrial, then
    you should start with something that might seem overly complex and expensive at
    first but that will pay back hugely in the future. If you are not convinced about
    this, simply read all the returns of experience of startups that have failed because
    they have not invested in their information system, though their idea was customer-approved,
    their pricing was fine, and they had a market: this is one of the most common
    reasons for startups to fail, but also bigger companies (the latter, though, generally
    do not provide any feedback).'
  prefs: []
  type: TYPE_NORMAL
- en: Common implementations of business rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How would you go about implementing a BRMS? It may make you smile but, again,
    Excel is the simplest implementation for a BRMS, most of the time without people
    knowing it. One accountant will certainly tell you (if you ask) that they do not
    use any BRMS for their job. But at the same time, they will boast about a hand-crafted
    Excel workbook with all the calculations (and thus business rules, whether regulatory
    or company-wise) they need in their day-to-day job as well as for the monthly
    closing period. What is this if not a BRMS? In fact, due to the relatively rare
    use of a “true” dedicated BRMS, it simply happens that business rules are contained
    in Excel files for most small companies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within larger companies, there are more business-line applications, such as
    ERP, or even bespoke software when the companies have internal software development
    capacity. In this case, the proportion of business rules integrated into the application
    rises, but this is not necessarily for the best. Why do lots of business-oriented
    people love Excel spreadsheets despite their shortcomings? Simply because they
    have full control over it and do not depend on the IT department to make changes,
    add functions, and so on. Start implementing a business rule inside some application
    and the coupling problem immediately pops up:'
  prefs: []
  type: TYPE_NORMAL
- en: Is it possible to change the rule without recompiling, testing, and deploying
    the application again?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the rules can be customized, is it possible to do so via a functional operator
    or do you need the IT to implement the change (or in the best case, train them)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we deal with rules that must change at a particular date and time (for
    example January 1 at midnight for lots of accounting-related or business-wide
    reporting rules)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Is it possible to have two concurrent versions of the business rule, or are
    we obliged to stop the software at the end of the year to make sure nothing is
    done before somebody changes the rule at the beginning of the new year (do not
    laugh: it happens very often…)?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite these potential problems, implementing business rules in dedicated business
    applications is already a nice step forward, particularly if this is done server-side,
    preferably as the implementation of a well-documented, contract-first API. This
    solution is less prone to errors than Excel spreadsheets, which might be disseminated
    across the organization with different implementations of rules, resulting in
    a mess. It also tends to provide a first level of governance of the business rules
    since different services are responsible for “their” software applications, and
    thus for the business rules implemented (or customized) in them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still, these implementations are not representative of a BRMS in the sense
    of our utopic system, namely a unique one that would contain all the business
    rules of the company. And if you want to go all the way to a future-proof information
    system, you will rather use something such as Drools (an open source package,
    declined in JBoss Rules by Red Hat) or IBM Operational Decision Manager. These
    pieces of software will generally provide the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: The execution of business rules, which provides what is called a decision engine
    (**DMN** stands for **Decision Model and Notation** and is an accompanying standard
    of BPMN). If you want to know more about this important bit of a BRMS, I recommend
    the excellent documentation page from Drools, available at [https://www.drools.org/learn/dmn.html](https://www.drools.org/learn/dmn.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage for the definition of these business rules, which sounds obvious but
    isn’t when you add the requirement of storing the whole version history of the
    business rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of decision tables, links between events and actions, and, in the most sophisticated
    cases, inference engines that are going to mix many different rules to find additional
    conclusions (an overly simplified example would be that “all purchases need an
    invoice” and “an invoice must include the buyer’s address in the header,” to “all
    purchases need the address of the buyer”).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of them provide a graphical editor for non-technical people to be able
    to adjust rules by themselves. Though editors claim anyone can use them, they
    remain quite technical and require some training.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Together with this, a sandbox is very useful for people to test their business
    rules adjustments before putting them into production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the performance needed and the variation of the calls, a cache
    mechanism can be a good addition to a BRMS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Open Policy Agent is a BRMS that is dedicated to authorization rules. We will
    show its use in [*Chapter 12*](B21293_12.xhtml#_idTextAnchor446).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after talking about data and business rules, we are going to add the
    third and last module to complete our ideal IT system.
  prefs: []
  type: TYPE_NORMAL
- en: Processes management in the ideal system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our ideal system handles data and can make decisions on it with business rules,
    but what makes it tick? In [*Chapter 4*](B21293_04.xhtml#_idTextAnchor121), we
    stressed that everything is a question of time, but nothing has the role of putting
    the data and rules in controlled, time-based, motion. This will be the role of
    the process engine.
  prefs: []
  type: TYPE_NORMAL
- en: Processes as the brain of the information system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Coming back to our metaphor of the human body, you may have guessed that business
    process management, as the module that orchestrates the actions of applications
    containing the business rules over the data, can be associated with the control
    tower that is the brain. As our brain coordinates the actions of each muscle together
    with receiving the signals coming from our five senses to achieve complex results
    such as catching a ball, typing on a keyboard, or dressing, the processes describe
    the complex tasks that must be accomplished by each part of the information system
    to reach a global objective, and the BPM engine coordinates these tasks, effectively
    calling the modules in charge (or rather, the API, which themselves are implemented
    by technical module; remember the important point we explained in [*Chapter 3*](B21293_03.xhtml#_idTextAnchor069)?).
  prefs: []
  type: TYPE_NORMAL
- en: If the utopic information system is made of one MDM and one BRMS that contain
    all the data and all the business rules for each of the business domains, the
    BPM is the module that makes everything work together, by interoperating all of
    the functions.
  prefs: []
  type: TYPE_NORMAL
- en: Implementations of a BPM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before talking about technical implementations (and this should be a reflex
    by now), we have to try and find an accepted standard for our feature. Luckily,
    an indisputable one exists that we have talked about previously: BPMN. So, if
    you are looking for an evolutive way of executing processes, where the engine
    can be completely decoupled from the design, you must use BPMN. I have tested
    editing BPMN 2.0 on a given editor’s GUI and executing on another editor’s execution
    engine, and it works well, which says something about the maturity of the norm.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, not all information systems need the kind of sophistication we are
    talking about, but all of them use a central orchestration system at some point,
    even if large parts of it can be manual and processes might not even be designed
    in BPMN, but only known in their heads by the participants of the information
    system (again, this does not mean that everything is based on computers). And
    guess what? When we do not need any complexity at all, we will find our old friend
    Excel!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: At this point, I know you must be convinced I am an absolute Excel fan. However,
    I’m not and I have seen my fair share of huge functional problems because of using
    Excel for shared data, not controlling its spreading in the organization, and
    more. I am fully aware of the way it prevents people from working together by
    making it so easy for almost everyone to have a little part of the information
    system. But at the same time, I am not in favor of forgetting everything spreadsheets
    have brought to IT and the empowerment of business specialists. Also, it is not
    my fault that most information systems nowadays are so unsophisticated! So if
    you have to use a crude tool to do the job… so be it! And Excel will long remain
    the “Swiss Army knife” of information systems. You will be better off with a complete
    toolbox but if you can only have one tool, take this knife rather than the circlip-removing
    tongs or some other exotic and highly-specialized utensil. Going back to the software,
    better alternatives for MDM, BRMS, and BPM exist today than an Excel spreadsheet.
    However, if you are aware of Excel’s drawbacks and control them, its versatility
    and ease of use will speed you up in many parts of the information system. In
    particular, though MDM and BPM are much better outside Excel, I have often set
    up some “low-quality BRMS” by putting complex calculations in Excel and plugging
    the spreadsheet into APIs with great business success. Yes, this is somewhat of
    a hack, but so long as it is hidden behind an API, there is no problem with a
    temporary, quick, and dirty implementation… and the business users LOVED it!
  prefs: []
  type: TYPE_NORMAL
- en: How close can we get to this utopic system?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have described the contents of an ideal information system, as described
    by Dominique Vauquier in his seminal book. This assembly of MDM + BRMS + BPM will
    also be found in some other sources, such as the “sustainable information system”
    described by the SHIFT project in its approach to the digital transformation toward
    a more ecologically friendly IT industry, or the **Agility Chain Management System**
    (**ACMS**) approach.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this is an ideal vision, so the question is not to use it as a blueprint
    that actual information systems should all be based on, but how close we can get
    to it when designing new information systems or improving existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: Favoring contexts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Various context elements may favor the use of the approach discussed in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A brand new information system**: If you are lucky enough to start from scratch
    with a newly-created organization, the legacy will not hold you back and this
    is a huge factor that can make an ideal information system come to life.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Degree of sophistication**: This will not be enough, of course, because as
    stated previously, there is a place for such an ideal system only when it is justified
    by business. If your information system has to be highly evolutive because business
    rules and markets are changing very often, data structures are unclear, and processes
    must be adapted quickly, then this is another factor that can favor the adoption
    of the architecture explained previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Investment approval**: Once again, this factor is not enough because the
    business may need such a highly sophisticated information system but the investors
    might not be aware of this. For lots of CEOs, IT is just a cost center. But if
    you understand that information systems have become the backbones of most industrial
    activities, you have one more positive factor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capacity of implementation**: Everything seems fine, but do not underestimate
    the difficulty of implementing such an information system. This approach is so
    different from what most professionals know that you will have difficulty finding
    people able to deploy it. You will have to convince them, train them, and adjust
    them to your way with very little existing feedback and return on experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admittedly, these are a lot of factors and chances are you will not have them
    now. For people my age, there is even a chance that we’ll never see such a perfect
    alignment that would make this utopic structure the most used one. But it exists
    – its advantages are obvious and the accelerating rate of changes and digital
    transformation of the industry will, without any doubt, make it a more and more
    observed option. A technical watch also shows that, in the past 3 to 5 years,
    the subject of MDM has advanced and some advanced companies have put them in place,
    together with an internal developer platform, bringing them some very interesting
    results. In short, we are at the very beginning of the trend, but the chances
    that the wave will grow are high.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching the target, the Agile way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The fact that such ideal information systems are not mainstream yet and will
    not be the standard in the near future does not mean that they have no interest.
    It would be a bit like somebody working in an Agile team who would not want to
    know what the vision of the final software is, arguing that they are only interested
    in what will be done in the current sprint!
  prefs: []
  type: TYPE_NORMAL
- en: 'An ideal – a vision – is also there to provide direction, somewhere to guide
    our trip. Remember the metaphor of the arrow? We must know what the target looks
    like to locate it and reach it; otherwise, we are just randomly walking around,
    hoping for the best. In conclusion, please do not discard this concept because
    it is not immediately practical: knowing it can help you make choices in the future
    between different directions of your information system because you will feel
    closer to this long-term, ideal, direction that will bring you better value. Chances
    are you will never reach the ideal state, but hopefully, the direction taken will
    bear more value and flexibility to your information system. The state of information
    systems nowadays is so poor that having something above average is already a huge
    advantage in the era of digitalization of all industrial processes.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we presented what could be an ideal information system. We
    talked about all the problems that can arise in software industrial deployments,
    particularly concerning their evolution, so it was quite logical to show not only
    punctual solutions but also how the problem could be addressed globally. Of course,
    a fair part of this approach remains utopic, but this exercise is interesting
    in the fact that it shows that only three modules, if very well built, can serve
    any business needs. The separation between data, business rules, and business
    processes is something that should be kept in mind even if the information system
    you work with is far from being ideal.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter was quite conceptual, but this concludes the first part of this
    book, which was meant to cover a lot of theoretical background. The next part
    of this book will cover more practical methods for architecture and, to be fully
    articulated between theory and practice (which is the main premise of this book),
    the third part will provide source code to show you how to implement the concepts
    and approaches of sound architecture that we have talked about. In particular,
    the three main modules that have been explained here will be shown in a sample
    application with a limited functional perimeter, but with all the sophistication
    needed to grow to a full-fledged information system if needed:'
  prefs: []
  type: TYPE_NORMAL
- en: The MDM will be based on a NoSQL database, with a back office server in ASP.NET
    that exposes API-designed contract-first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A separate BRMS will be used for authorization management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A BPM approach will be held to show how to make processes adjustable, with a
    low-code implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, in the next seven chapters, we will use battle-hardened methods
    to design the sample application by using examples that apply to parts of the
    use cases we will need. This, in the following five chapters, will be used to
    implement the sample application, module by module. Finally, the last three chapters
    will be about deploying and adjusting this sample application, just like if it
    were in production. As time passes by, adjustments need to be made to keep it
    aligned with the functional business needs.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*A sustainable information system - progressive refurbishing of the IS with
    SOA*, by Pierre Bonnet/Jean-Michel Detavernier - Dominique Vauquier - Hermès /
    Lavoisier - November 2007 - ISBN-13: 978-2746218291'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Architecture Frameworks and Methods'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After *Part 1*, which was quite theoretical so it could be understood by readers
    without a technical background, *Part 2* of the book gets a bit more practical
    and explains how some principles can be applied at the architectural level of
    an information system to make it better. This is where we will talk about methods
    to design low-coupled services with a good alignment to business. General software
    principles will be covered, but also wider approaches such as the externalization
    of authorization management and business rules in general. The correct approach
    to managing data in a business-/IT-aligned information system will also be detailed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21293_06.xhtml#_idTextAnchor212), *SOLID Principles, from Code
    to Systems*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21293_07.xhtml#_idTextAnchor248), *C4 and Other Approaches*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B21293_08.xhtml#_idTextAnchor271), *Service Orientation and APIs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B21293_09.xhtml#_idTextAnchor318), *Exploring Domain-Driven Design
    and Semantics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B21293_10.xhtml#_idTextAnchor344), *Master Data Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21293_11.xhtml#_idTextAnchor393), *Business Processes and Low
    Code*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21293_12.xhtml#_idTextAnchor446), *Externalization of Business
    Rules*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21293_13.xhtml#_idTextAnchor470), *Externalization of Authorization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
