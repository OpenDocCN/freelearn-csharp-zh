- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Examining Source Generators
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查源生成器
- en: In this chapter, we will look at writing code that generates code. Even though
    this chapter isn’t directly related to Blazor development, it still has a connection
    to Blazor, as we’ll discover.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨编写生成代码的代码。尽管本章与 Blazor 开发没有直接关系，但我们将发现它仍然与 Blazor 有关。
- en: The subject of source generators is a book on its own, but I wanted to introduce
    it since they are used by Blazor and, honestly, it is one of my favorite features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 源生成器是一个单独的主题，但我想介绍一下，因为它们被 Blazor 使用，而且坦白说，这是我最喜欢的功能之一。
- en: I am the kind of person that spends a day writing source code that saves me
    10 minutes if I know I will need to repeat those 10 minutes over and over again.
    Repetitive tasks have never been a favorite of mine.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我就是这样的人，如果我知道我需要反复重复这 10 分钟，我会花一整天的时间编写源代码来节省这 10 分钟。重复性任务从来不是我的最爱。
- en: 'In this chapter, we will cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: What a source generator is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源生成器是什么
- en: How to get started with source generators
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何开始使用源生成器
- en: Community projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区项目
- en: The idea for this chapter is for you to use it as a reference so that you can
    implement a new project on your own.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的想法是让你将其作为参考，以便你可以自己实现一个新项目。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is a reference chapter and is not connected in any way with the
    book’s other chapters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个参考章节，并且与本书的其他章节没有任何关联。
- en: You can find the source code for this chapter’s result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter17](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter17).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter17](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter17)
    找到本章结果的源代码。
- en: What a source generator is
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源生成器是什么
- en: In many cases, we find ourselves writing the same kind of code repeatedly. In
    the past, I have used T4 templates to generate code and even written **stored
    procedures** and applications that can help me generate code. **Source generators**
    are part of the .NET compiler platform (Roslyn) SDK.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们会发现自己反复编写相同类型的代码。在过去，我使用 T4 模板生成代码，甚至编写了 **存储过程** 和可以帮助我生成代码的应用程序。**源生成器**
    是 .NET 编译器平台（Roslyn）SDK 的一部分。
- en: A generator gives us access to a compilation object representing all the user
    code currently being compiled. From there, the object can be inspected, and we
    can, based on that, write additional code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器为我们提供了访问表示当前正在编译的所有用户代码的编译对象的权限。从那里，我们可以检查对象，并基于此编写额外的代码。
- en: Okay, this sounds complicated, and I would be lying if I said it was easy to
    write a source generator, but it instantly saves us a lot of time. So, let’s break
    it down a bit.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这听起来很复杂，如果我说编写源生成器很容易，那我就撒谎了，但它可以立即为我们节省大量时间。所以，让我们稍微分解一下。
- en: 'When we compile our code, the compiler does the following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编译代码时，编译器会执行以下步骤：
- en: The compilation runs.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译过程开始运行。
- en: Source generators analyze code.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源生成器分析代码。
- en: The source generators generate new code.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源生成器生成新的代码。
- en: The compilation continues.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译过程继续。
- en: '*Steps 2* and *3* are what source generators do.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2* 和 *步骤 3* 是源生成器所做的事情。'
- en: In Blazor, source generators are used all the time; it is a source generator
    that takes the `.razor` files and converts them to C# code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blazor 中，源生成器一直被使用；这是一个将 `.razor` 文件转换为 C# 代码的源生成器。
- en: 'We can look at what Blazor generates by adding the following to our .`csproj`
    file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向我们的 `.csproj` 文件中添加以下内容来查看 Blazor 生成的代码：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding this code will emit generated files into the `obj` folder for the `razor`
    component.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此代码将在 `obj` 文件夹中为 `razor` 组件生成输出文件。
- en: 'We can find them here: `\obj\Debug\net8.0\generated\Microsoft.NET.Sdk.Razor.SourceGenerators\Microsoft.NET.Sdk.Razor.SourceGenerators.RazorSourceGenerator`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下位置找到它们：`\obj\Debug\net8.0\generated\Microsoft.NET.Sdk.Razor.SourceGenerators\Microsoft.NET.Sdk.Razor.SourceGenerators.RazorSourceGenerator`。
- en: 'We can choose where to emit the files by using:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用以下方式选择文件的输出位置：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can replace `THEPATH` with a path you would like to have the files emitted
    to.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 `THEPATH` 替换为你希望文件输出的路径。
- en: In that folder, we can find a file called `Pages_Counter_razor.g.cs`, which
    is the C# representation of the counter component.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个文件夹中，我们可以找到一个名为 `Pages_Counter_razor.g.cs` 的文件，它是计数器组件的 C# 表示形式。
- en: The `Microsoft.NET.Sdk.Razor.SourceGenerators-generator` is, of course, a very
    advanced source generator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Microsoft.NET.Sdk.Razor.SourceGenerators-generator` 当然是一个非常高级的源生成器。'
- en: 'Let’s think of a scenario: at work, we create services and interfaces for those
    services. The only use of these interfaces is for testing purposes, the same way
    we have built our repositories throughout the book.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个场景：在工作中，我们为服务创建服务和接口。这些接口的唯一用途是用于测试目的，就像我们在整本书中构建存储库的方式一样。
- en: In this case, adding a method to a service means we need to add the method to
    the class and the interface. We tried simplifying the process by putting the interface
    and the class in the same file. However, we still forgot about the interface,
    pushed the code, and didn’t notice the mistake until everything was built and
    a NuGet package was generated.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，向服务添加方法意味着我们需要将方法添加到类和接口中。我们试图通过将接口和类放在同一个文件中来简化这个过程。然而，我们仍然忘记了接口，提交了代码，直到构建完成并生成了NuGet包才注意到错误。
- en: We found a source generator called `InterfaceGenerator`; adding an attribute
    to our class will generate the interface for us.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现了一个名为`InterfaceGenerator`的源生成器；向我们的类添加一个属性将为我们生成接口。
- en: 'Let’s take a look at this example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个例子：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is a simple service class (taken from the `InterfaceGenerator` GitHub
    page). Adding an attribute to the code will automatically generate an interface,
    and we can add a reference to that interface:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的服务类（来自`InterfaceGenerator`的GitHub页面）。向代码添加一个属性将自动生成一个接口，我们可以添加对该接口的引用：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The generated interface will always be up to date. This sample is an excellent
    example of when source code generators will save time and remove pain points.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的接口将始终是最新的。这个示例是一个极好的例子，说明了源代码生成器如何节省时间和消除痛点。
- en: Source generators are powerful; we get access to a syntax tree that we can query.
    We can iterate over all classes and find the ones with a specific attribute or
    that implement an interface, for example, and based on that, generate code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 源生成器很强大；我们可以访问一个语法树，我们可以查询它。我们可以遍历所有类，找到具有特定属性或实现接口的类，例如，然后基于这些信息生成代码。
- en: There are some limitations. There is no way to know in what order the source
    generators will run, so we can’t generate code based on generated code. We can
    only add code, not modify code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一些限制。我们无法知道源生成器将按什么顺序运行，因此我们无法根据生成的代码生成代码。我们只能添加代码，而不能修改代码。
- en: The following section will look at how we can build our source generators.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将探讨我们如何构建我们的源生成器。
- en: How to get started with source generators
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何开始使用源生成器
- en: It’s time to look at how we can build our source code generators. The `Chapter17`
    folder is a finished example of what we discuss here. The instructions will not
    be a step-by-step guide.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候看看我们如何构建我们的源代码生成器了。`Chapter17`文件夹是我们讨论的完成示例。说明将不会是逐步指南。
- en: To create a source code generator, we need a class library targeting *.NET Standard
    2.0*. We also need to add a reference to the NuGet packages `Microsoft.CodeAnalysis.CSharp`
    and `Microsoft.CodeAnalysis.Analyzers` in that library. We also need to make sure
    that our .`csproj` file has `<LangVersion>latest</LangVersion>`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个源代码生成器，我们需要一个针对*.NET Standard 2.0*的类库。我们还需要在该库中添加对NuGet包`Microsoft.CodeAnalysis.CSharp`和`Microsoft.CodeAnalysis.Analyzers`的引用。我们还需要确保我们的`.csproj`文件有`<LangVersion>latest</LangVersion>`。
- en: 'To create a source generator, we need to create a class that has two things:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个源代码生成器，我们需要创建一个具有两个功能的类：
- en: It needs to have the `[Generator]` attribute.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要具有`[Generator]`属性。
- en: It needs to implement `ISourceGenerator`.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要实现`ISourceGenerator`。
- en: 'The template code should look something like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 模板代码应该看起来像这样：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the `Initialize` method, we add any initialization that may be needed; and
    in the `Execute` method, we write the generated code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Initialize`方法中，我们添加可能需要的任何初始化；而在`Execute`方法中，我们编写生成的代码。
- en: The generator we are building now is, of course, a silly example, but it also
    shows some of the power of source generators.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在正在构建的生成器当然是一个愚蠢的例子，但它也展示了源生成器的一些强大功能。
- en: 'In the `Execute` method, we add the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Execute`方法中，我们添加以下代码：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It will take the code in the source variable and save it as `GeneratedService.g.cs`.
    We also use raw string literals in this file – the feature in .NET7 I have been
    the most excited about. By adding three double quotes, we don’t need to escape
    the string; we are free to add more double quotes inside of the string. If you
    want to escape more than three double quotes, you can add more at the start and
    end.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 它将源变量中的代码保存为 `GeneratedService.g.cs`。我们还在此文件中使用原始字符串字面量 – 这是 .NET7 中我最兴奋的功能。通过添加三个双引号，我们不需要转义字符串；我们可以在字符串内部自由添加更多双引号。如果您想转义超过三个双引号，您可以在开头和结尾添加更多。
- en: 'To add a source generator to our project, we can add the project like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要将源生成器添加到我们的项目中，我们可以像这样添加项目：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When we compile our project, the `GeneratedService` will be generated, and we
    can use the code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编译我们的项目时，`GeneratedService` 将被生成，我们可以使用这段代码。
- en: 'Now we can inject the service and use it inside of our components:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以注入服务并在我们的组件中使用它：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Don’t forget to add it to `Program.cs` as well:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将其添加到 `Program.cs` 中：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The example above isn’t really how you would use it in a real-world scenario,
    but I wanted to show that it is not that tricky to get started.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例并不是在现实场景中实际使用的方式，但我想要展示的是，开始使用它并不复杂。
- en: Sometimes the Visual Studio editor won’t pick up these generated files, and
    we will see some red squiggles in the code editor. This is because the order of
    the source generators (there is no guaranteed order) will result in these problems,
    especially when combining source generators with other classes that are also generated,
    like .`razor` files.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时 Visual Studio 编辑器不会识别这些生成的文件，我们会在代码编辑器中看到一些红色波浪线。这是因为源生成器的顺序（没有保证的顺序）会导致这些问题，尤其是在将源生成器与其他也生成的类（如
    .`razor` 文件）结合使用时。
- en: In the next section, we will look at some of the source generators we can use
    in our projects.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨我们可以在项目中使用的源生成器。
- en: Community projects
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社区项目
- en: Source generators have been around since .NET5/6, and there are a lot of community/open-source
    projects we can use in our projects. Let’s explore them in the following sections.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 源生成器自 .NET5/6 以来一直存在，我们可以使用许多社区/开源项目在我们的项目中。让我们在接下来的章节中探索它们。
- en: InterfaceGenerator
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InterfaceGenerator
- en: We have already talked about `InterfaceGenerator`. Generating interfaces without
    having to write the same thing twice will save time and help you avoid problems,
    especially if you use interfaces only for testing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了 `InterfaceGenerator`。无需重复编写相同的内容即可生成接口，这将节省时间并帮助您避免问题，尤其是如果您只使用接口进行测试。
- en: 'We can find it here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里找到它：
- en: '[https://github.com/daver32/InterfaceGenerator](https://github.com/daver32/InterfaceGenerator)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/daver32/InterfaceGenerator](https://github.com/daver32/InterfaceGenerator)'
- en: Blazorators
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazorators
- en: David Pine, with many contributors, has built Blazorators, which can take a
    TypeScript definition file and generate JavaScript interop ready to be used in
    any Blazor project. Blazorators take away a lot of the pain points when writing
    JavaScript interop.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: David Pine，以及许多贡献者，构建了 Blazorators，它可以将 TypeScript 定义文件转换为可用于任何 Blazor 项目的 JavaScript
    互操作代码。Blazorators 在编写 JavaScript 互操作时消除了许多痛点。
- en: 'Check out his project here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里查看他的项目：
- en: '[https://github.com/IEvangelist/blazorators](https://github.com/IEvangelist/blazorators)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/IEvangelist/blazorators](https://github.com/IEvangelist/blazorators)'
- en: C# source generators
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C# 源生成器
- en: 'Amadeusz Sadowski, with many contributors, has made an impressive list of where
    to find more information on source generators and some outstanding ones. You can
    find this fantastic resource here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Amadeusz Sadowski，以及许多贡献者，制作了一个令人印象深刻的列表，列出了更多关于源生成器的信息以及一些杰出的项目。您可以在以下位置找到这个出色的资源：
- en: '[https://github.com/amis92/csharp-source-generators](https://github.com/amis92/csharp-source-generators)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/amis92/csharp-source-generators](https://github.com/amis92/csharp-source-generators)'
- en: Roslyn SDK samples
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Roslyn SDK 示例
- en: 'Microsoft has added some samples to their Roslyn SDK repository. It’s a great
    start to dig a bit deeper into source generators. You can find the samples here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 微软已经向他们的 Roslyn SDK 仓库添加了一些示例。这是一个深入了解源生成器的良好开端。您可以在以下位置找到这些示例：
- en: '[https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators](https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators](https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators)'
- en: Microsoft Learn
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Learn
- en: Microsoft Learn is an excellent source for learning anything C# related, and
    source generators are no exception.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Learn 是学习任何与 C# 相关内容的绝佳资源，源生成器也不例外。
- en: 'If you think, just like me, that source generators sound like the best thing
    since sliced bread, I recommend that you dive into the documentation found at
    Microsoft Learn:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样认为源生成器是自切片面包以来最好的东西，我建议你深入研究 Microsoft Learn 上的文档：
- en: '[https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview](https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview](https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview)'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at code that writes code to save time and reduce
    repetitive tasks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了编写代码以节省时间和减少重复性任务的代码。
- en: Blazor uses source generators to convert razor code into C# code, so, indirectly,
    we are using them all the time.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 使用源生成器将 razor 代码转换为 C# 代码，因此，间接地，我们一直在使用它们。
- en: In the next chapter, we will look at Blazor Hybrid by visiting .NET MAUI.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过访问 .NET MAUI 来了解 Blazor 混合模式。
