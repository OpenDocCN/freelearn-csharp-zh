["```cs\nvar builder = WebApplication.CreateBuilder(args);\n// code omitted for brevity\nbuilder.Services.AddHealthChecks();\nvar app = builder.Build();\n// code omitted for brevity\napp.MapHealthChecks(\"/healthcheck \");\napp.Run();\n```", "```cs\n public class HealthCheck : IHealthCheck\n{\n    public Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context, CancellationToken =\n            default)\n    {\n        var healthy = true;\n        if (healthy)\n        {\n            // additional custom logic when the health is\n            confirmed.\n            return Task.FromResult(\n                HealthCheckResult.Healthy(\"Service is\n                    healthy\"));\n        }\n        // additional custom logic when the api is not\n           healthy\n        return Task.FromResult(\n            new HealthCheckResult(\n                context.Registration.FailureStatus,\n                    \"Service is unhealthy\"));\n    }\n}\n```", "```cs\nbuilder.Services.AddHealthChecks()\n    .AddCheck<HealthCheack>(\"ApiHealth\");\n```", "```cs\napp.MapHealthChecks(\"/healthcheck\", new HealthCheckOptions\n{\n    AllowCachingRepsonses = false,\n    ResultStatusCodes =\n    {\n          [HealthStatus.Unhealthy] =\n                 StatusCodes.Status503ServiceUnavailable,\n        [HealthStatus.Healthy] = StatusCodes.Status200OK,\n        [HealthStatus.Degraded] = StatusCodes.Status200OK,\n    }\n});\n```", "```cs\napp.MapHealthChecks(\"/healthcheck\", new HealthCheckOptions\n{\n    // code omitted for brevity\n    ResponseWriter = JsonResponse\n});\n```", "```cs\nprivate static Task JsonResponse(HttpContext context,\n    HealthReport healthReport)\n{\n    context.Response.ContentType = \"application/json;\n        charset=utf-8\";\n   var options = new JsonWriterOptions { Indented = true };\n    using var memoryStream = new MemoryStream();\n    using (var jsonWriter = new Utf8JsonWriter\n        (memoryStream, options))\n    {\n        jsonWriter.WriteStartObject();\n        jsonWriter.WriteString(\"status\",\n            healthReport.Status.ToString());\n        jsonWriter.WriteStartObject(\"results\");\n        foreach (var healthReportEntry in\n           healthReport.Entries)\n        {\n            jsonWriter.WriteStartObject\n                (healthReportEntry.Key);\n            jsonWriter.WriteString(\"status\",\n                healthReportEntry.Value.Status.ToString());\n            jsonWriter.WriteString(\"description\",\n                healthReportEntry.Value.Description);\n            jsonWriter.WriteStartObject(\"data\");\n            foreach (var item in\n                healthReportEntry.Value.Data)\n            {\n                jsonWriter.WritePropertyName(item.Key);\n                JsonSerializer.Serialize(jsonWriter,\n                    item.Value,\n                    item.Value?.GetType() ??\n                        typeof(object));\n            }\n            jsonWriter.WriteEndObject();\n            jsonWriter.WriteEndObject();\n        }\n        jsonWriter.WriteEndObject();\n        jsonWriter.WriteEndObject();\n    }\n    return context.Response.WriteAsync(\n        Encoding.UTF8.GetString(memoryStream.ToArray()));\n}\n```", "```cs\nbuilder.Services.AddHealthChecks()\n    .AddCheck<HealthCheack>(\"ApiHealth\")\n      .AddDbContextCheck<ApplicationDbContext>\n        (\"DatabaseHealth\");\n```", "```cs\nbuilder.Services.AddHealthChecks()\n    .AddCheck<HealthCheack>(\"ApiHealth\", tags: new[] {\n      \"live\"})\n .AddDbContextCheck<ApplicationDbContext>(\"DatabaseHealth\",\n    tags: new[] { \"ready\" });\n```", "```cs\napp.MapHealthChecks(\"/healthcheck/ready\", new\n    HealthCheckOptions\n{\n    Predicate = healthCheck =>\n        healthCheck.Tags.Contains(\"ready\"),\n    // code omitted for brevity\n});\napp.MapHealthChecks(\"/healthcheck/live\", new\n    HealthCheckOptions\n{\n    Predicate = healthCheck => false;\n    // code omitted for brevity\n});\n```", "```cs\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    test: liveness-api\n  name: liveness-http\nspec:\n  ports:\n  - name: api-port\n    containerPort: 8080\n    hostPort: 8080\n  containers:\n  - name: liveness-api\n    image: registry.k8s.io/liveness\n    args:\n    - /server\n    livenessProbe:\n      httpGet:\n        path: /healthcheck/live\n        port: api-port\n      initialDelaySeconds: 3\n      failureThreshold: 1\n      periodSeconds: 3\n    startupProbe:\n      httpGet:\n        path: /healthcheck/ready\n        port: api-port\n      failureThreshold: 30\n      periodSeconds: 10\n    readinessProbe:\n      httpGet:\n        path: /healthcheck/ready\n        port: api-port\n      failureThreshold: 30\n      periodSeconds: 10\n```"]