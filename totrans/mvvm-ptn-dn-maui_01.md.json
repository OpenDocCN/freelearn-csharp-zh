["```cs\n<Grid>\n    <Button\n        x:Name=\"GetQuoteButton\"\n        Clicked=\"Button_Clicked\"\n        Text=\"Get Quote of the day\" />\n    <Label\n        x:Name=\"QuoteLabel\"\n        HorizontalOptions=\"Center\"\n        IsVisible=\"false\"\n        Style=\"{DynamicResource TitleStyle}\"\n        VerticalOptions=\"Center\" />\n</Grid>\n```", "```cs\nprivate async void Button_Clicked(\n    object sender, EventArgs e)\n{\n    GetQuoteButton.IsVisible = false;\n    try\n    {\n        var client = new HttpClient();\n        var quote = await\n            client.GetStringAsync(\n            \"https://my-quotes-api.com/quote-of-the-day\");\n        QuoteLabel.Text = quote;\n        QuoteLabel.IsVisible = true;\n    }\n    catch (Exception)\n    {\n    }\n}\n```", "```cs\npublic class QuoteService : IQuoteService\n{\n    private readonly HttpClient httpClient;\n    public QuoteService()\n    {\n        httpClient = new HttpClient();\n    }\n    public async Task<string> GetQuote()\n    {\n        var response = await\n        httpClient.GetAsync(\"https://my-quotes-api.com/\n        quote-of-the-day\");\n        if (response.IsSuccessStatusCode)\n        {\n            return await\n            response.Content.ReadAsStringAsync();\n        }\n        throw new Exception(\"Failed to retrieve quote.\");\n    }\n}\npublic interface IQuoteService\n{\n    Task<string> GetQuote();\n}\n```", "```cs\npublic class MainPageViewModel : INotifyPropertyChanged\n{\n    private readonly IQuoteService quoteService;\n    public MainPageViewModel(IQuoteService quoteService)\n    {\n        this.quoteService = quoteService;\n    }\n    public event PropertyChangedEventHandler\n    PropertyChanged;\n}\n```", "```cs\nprivate string quoteOfTheDay;\npublic string QuoteOfTheDay\n{\n    get => quoteOfTheDay;\n    set\n    {\n        quoteOfTheDay = value;\n        PropertyChanged?.Invoke(this,\n            new PropertyChangedEventArgs(\n            nameof(QuoteOfTheDay)));\n    }\n}\n```", "```cs\nprivate bool isButtonVisible = true;\npublic bool IsButtonVisible\n{\n    get => isButtonVisible;\n    set\n    {\n        isButtonVisible = value;\n        PropertyChanged?.Invoke(this,\n            new PropertyChangedEventArgs(\n            nameof(IsButtonVisible)));\n    }\n}\nbool isLabelVisible;\npublic bool IsLabelVisible\n{\n    get => isLabelVisible;\n    set\n    {\n        isLabelVisible = value;\n        PropertyChanged?.Invoke(this,\n            new PropertyChangedEventArgs(\n            nameof(IsLabelVisible)));\n    }\n}\n```", "```cs\nprivate async Task GetQuote()\n{\n    IsButtonVisible = false;\n    try\n    {\n        var quote = await quoteService.GetQuote();\n        QuoteOfTheDay = quote;\n        IsLabelVisible = true;\n    }\n    catch (Exception)\n    {\n    }\n}\n```", "```cs\npublic ICommand GetQuoteCommand => new Command(async _ => await GetQuote());\n```", "```cs\n<Grid>\n    <Button\n        Text=\"Get Quote of the day\" />\n    <Label\n        HorizontalOptions=\"Center\"\n        IsVisible=\"false\"\n        Style=\"{DynamicResource TitleStyle}\"\n        VerticalOptions=\"Center\" />\n</Grid>\n```", "```cs\npublic partial class MainPage_MVVM : ContentPage\n{\n    public MainPage_MVVM()\n    {\n        InitializeComponent();\n        BindingContext = new MainPageViewModel(\n            new QuoteService());\n    }\n}\n```", "```cs\n<Grid>\n    <Button\n        Command=\"{Binding GetQuoteCommand}\"\n        IsVisible=\"{Binding IsButtonVisible}\"\n        Text=\"Get Quote of the day\" />\n    <Label\n        HorizontalOptions=\"Center\"\n        IsVisible=\"{Binding IsLabelVisible}\"\n        Style=\"{DynamicResource TitleStyle}\"\n        Text=\"{Binding QuoteOfTheDay}\"\n        VerticalOptions=\"Center\" />\n</Grid>\n```", "```cs\nprivate Mock<IQuoteService> quoteServiceMock;\npublic MainPageViewModelTests()\n{\n    quoteServiceMock = new Mock<IQuoteService>();\n    quoteServiceMock.Setup(m => m.GetQuote())\n      .ReturnsAsync(string.Empty);\n}\n```", "```cs\n[Fact]\npublic void ButtonShouldBeVisible()\n{\n    var sut = new\n        MainPageViewModel(quoteServiceMock.Object);\n    Assert.True(sut.IsButtonVisible);\n}\n[Fact]\npublic void GetQuoteCommand_ShouldSetButtonInvisible()\n{\n    var sut = new\n        MainPageViewModel(quoteServiceMock.Object);\n    sut.GetQuoteCommand.Execute(null);\n    Assert.False(sut.IsButtonVisible);\n}\n```", "```cs\n[Fact]\npublic void GetQuoteCommand_GotQuote_ShowQuote()\n{\n    var quote = \"My quote of the day\";\n    quoteServiceMock.Setup(m =>\n        m.GetQuote()).ReturnsAsync(quote);\n    var sut = new\n        MainPageViewModel(quoteServiceMock.Object);\n    sut.GetQuoteCommand.Execute(null);\n    Assert.Equal(quote, sut.QuoteOfTheDay);\n}\n```", "```cs\n[Fact]\npublic void GetQuoteCommand_ServiceThrows_ShouldShowButton()\n{\n    quoteServiceMock.Setup(m =>\n        m.GetQuote()).ThrowsAsync(new Exception());\n    var sut = new\n        MainPageViewModel(quoteServiceMock.Object);\n    sut.GetQuoteCommand.Execute(null);\n    Assert.True(sut.IsButtonVisible);\n}\n```"]