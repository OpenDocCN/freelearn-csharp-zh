["```cs\n    namespace BlazorWebApp.Client;\n    public class UserInfo\n    {\n        public required string UserId { get; set; }\n        public required string Email { get; set; }    public required string[] Roles { get; set; }\n    } \n    ```", "```cs\n     \"Auth0\": {\n        \"Authority\": \"Get this from the domain for your application at Auth0\",\n        \"ClientId\": \"Get this from Auth0 setting\"\n      } \n    ```", "```cs\n    using BlazorWebApp.Client;\n    using Microsoft.AspNetCore.Components;\n    using Microsoft.AspNetCore.Components.Authorization;\n    using Microsoft.AspNetCore.Components.Server;\n    using Microsoft.AspNetCore.Components.Web;\n    using Microsoft.AspNetCore.Identity;\n    using Microsoft.Extensions.Options;\n    using System.Diagnostics;\n    namespace BlazorWebApp;\n    internal sealed class PersistingServerAuthenticationStateProvider : ServerAuthenticationStateProvider, IDisposable\n    {\n        private readonly PersistentComponentState state;\n        private readonly IdentityOptions options;\n        private readonly PersistingComponentStateSubscription subscription;\n        private Task<AuthenticationState>? authenticationStateTask;\n        public PersistingServerAuthenticationStateProvider(\n            PersistentComponentState persistentComponentState,\n            IOptions<IdentityOptions> optionsAccessor)\n        {\n            state = persistentComponentState;\n            options = optionsAccessor.Value;\n            AuthenticationStateChanged += OnAuthenticationStateChanged;\n            subscription = state.RegisterOnPersisting(OnPersistingAsync, RenderMode.InteractiveWebAssembly);\n        }\n        private void OnAuthenticationStateChanged(Task<AuthenticationState> task)\n        {\n            authenticationStateTask = task;\n        }\n        private async Task OnPersistingAsync()\n        {\n            if (authenticationStateTask is null)\n            {\n                throw new UnreachableException($\"Authentication state not set in {nameof(OnPersistingAsync)}().\");\n            }\n            var authenticationState = await authenticationStateTask;\n            var principal = authenticationState.User;\n            if (principal.Identity?.IsAuthenticated == true)\n            {\n                var userId = principal.FindFirst(options.ClaimsIdentity.UserIdClaimType)?.Value;\n                var email = principal.FindFirst(options.ClaimsIdentity.EmailClaimType)?.Value;\n                var roles = principal.FindAll(options.ClaimsIdentity.RoleClaimType);\n\n                if (userId != null)\n                {\n                    state.PersistAsJson(nameof(UserInfo), new UserInfo\n                    {\n                        UserId = userId,\n                        Email = email,\n                        Roles=roles.Select(r=>r.Value).ToArray()\n                    });\n                }\n            }\n        }\n        public void Dispose()\n        {\n            subscription.Dispose();\n            AuthenticationStateChanged -= OnAuthenticationStateChanged;\n        }\n    } \n    ```", "```cs\n    using BlazorWebApp;\n    using Auth0.AspNetCore.Authentication;\n    using Microsoft.AspNetCore.Authentication;\n    using Microsoft.AspNetCore.Authentication.Cookies; \n    ```", "```cs\n    builder.Services.AddScoped<AuthenticationStateProvider, PersistingServerAuthenticationStateProvider>();\n    builder.Services.AddCascadingAuthenticationState();\n    builder.Services\n        .AddAuth0WebAppAuthentication(options =>\n        {\n            options.Domain = builder.Configuration[\"Auth0:Authority\"]??\"\";;\n            options.ClientId = builder.Configuration[\"Auth0:ClientId\"]??\"\";;\n        }); \n    ```", "```cs\n    app.UseAuthentication();\n    app.UseAuthorization(); \n    ```", "```cs\n    app.MapGet(\"account/login\", async (string redirectUri, HttpContext\n     context) =>\n    {\n        var authenticationProperties = new LoginAuthenticationPropertiesBuilder()\n             .WithRedirectUri(redirectUri)\n             .Build();\n        await context.ChallengeAsync(Auth0Constants.AuthenticationScheme, authenticationProperties);\n    }); \n    ```", "```cs\n    app.MapGet(\"authentication/logout\", async (HttpContext context) =>\n    {\n        var authenticationProperties = new LogoutAuthenticationPropertiesBuilder()\n             .WithRedirectUri(\"/\")\n             .Build();\n        await context.SignOutAsync(Auth0Constants.AuthenticationScheme, authenticationProperties);\n        await context.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);\n    }); \n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.Authorization\n    @using BlazorWebApp.Components.Layout\n    @using BlazorWebApp.Components \n    ```", "```cs\n    <Found Context=\"routeData\">\n         <AuthorizeRouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\">\n             <Authorizing>\n                 <p>Determining session state, please wait...</p>\n             </Authorizing>\n             <NotAuthorized>\n                 <h1>Sorry</h1>\n                 <p>You're not authorized to reach this page. You need to log in.</p>\n             </NotAuthorized>\n         </AuthorizeRouteView>\n         <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n     </Found>\n     <NotFound>\n         <PageTitle>Not found</PageTitle>\n         <LayoutView Layout=\"@typeof(MainLayout)\">\n             <p role=\"alert\">Sorry, there's nothing at this address.</p>\n         </LayoutView>\n     </NotFound> \n    ```", "```cs\n<AuthorizeView>\n    <Authorized>\n        <a href=\"authentication/logout\">Log out</a>\n    </Authorized>\n    <NotAuthorized>\n        <a href=\"account/login?returnUrl=/\">Log in</a>\n    </NotAuthorized>\n</AuthorizeView> \n```", "```cs\n    <AuthorizeView Roles=\"Administrator\">\n            <div class=\"sidebar\">\n                <NavMenu />\n            </div>\n    </AuthorizeView> \n    ```", "```cs\n<LoginStatus /> \n```", "```cs\n    @using Microsoft.AspNetCore.Authorization \n    ```", "```cs\n@attribute [Authorize] \n```", "```cs\n    using BlazorWebApp.Client;\n    using Microsoft.AspNetCore.Components;\n    using Microsoft.AspNetCore.Components.Authorization;\n    using System.Security.Claims;\n    namespace BlazorApp1.Client;\n    internal class PersistentAuthenticationStateProvider : AuthenticationStateProvider\n    {\n        private static readonly Task<AuthenticationState> defaultUnauthenticatedTask =\n            Task.FromResult(new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity())));\n        private readonly Task<AuthenticationState> authenticationStateTask = defaultUnauthenticatedTask;\n        public PersistentAuthenticationStateProvider(PersistentComponentState state)\n        {\n            if (!state.TryTakeFromJson<UserInfo>(nameof(UserInfo), out var userInfo) || userInfo is null)\n            {\n                return;\n            }\n            List<Claim> claims = new();\n            claims.Add(new Claim(ClaimTypes.NameIdentifier, userInfo.UserId));\n            claims.Add(new Claim(ClaimTypes.Name, userInfo.Email??\"\"));\n            claims.Add(new Claim(ClaimTypes.Email, userInfo.Email??\"\"));\n            foreach (var role in userInfo.Roles)\n            {\n                claims.Add(new Claim(ClaimTypes.Role, role));\n            }\n            authenticationStateTask = Task.FromResult(\n                new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity(claims,\n                    authenticationType: nameof(PersistentAuthenticationStateProvider)))));\n        }\n        public override Task<AuthenticationState> GetAuthenticationStateAsync() => authenticationStateTask;\n    } \n    ```", "```cs\n    builder.Services.AddAuthorizationCore();\n    builder.Services.AddCascadingAuthenticationState();\n    builder.Services.AddSingleton<AuthenticationStateProvider, PersistentAuthenticationStateProvider>();\n    builder.Services.AddHttpClient(\"Api\",client => client.BaseAddress = new Uri(builder.HostEnvironment.BaseAddress)); \n    ```", "```cs\n    builder.Services.AddTransient<IBlogApi, BlogApiWebClient>(); \n    ```", "```cs\n    /**\n     * @param {Event} event - Details about the user and the context in which they are logging in.\n     * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n     */\n    exports.onExecutePostLogin = async (event, api) => {\n      const claimName  = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role'\n      if (event.authorization) {\n        api.idToken.setCustomClaim(claimName, event.authorization.roles);\n        api.accessToken.setCustomClaim(claimName, event.authorization.roles);\n      }\n    } \n    ```", "```cs\n    <AuthorizeView Roles=\"Administrator\">\n        <Authorized>\n            Hi admin!\n        </Authorized>\n        <NotAuthorized>\n            You are not an admin =(\n        </NotAuthorized>\n    </AuthorizeView> \n    ```"]