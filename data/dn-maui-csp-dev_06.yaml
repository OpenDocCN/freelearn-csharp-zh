- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Layout
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: In the previous two chapters, we looked at controls – the widgets that ask for
    and display data – but widgets need to be positioned on the page, with a process
    called the layout. Layout is the difference between an ugly app and a professional-looking
    one.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，我们探讨了控件——请求和显示数据的组件——但控件需要在页面上进行定位，这个过程称为布局。布局是丑陋的应用程序与专业外观应用程序之间的区别。
- en: 'There are several layout controls available to you, which we will cover in
    this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您有几种布局控件可供选择，我们将在本章中介绍：
- en: Vertical and horizontal stack layouts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直和水平堆叠布局
- en: '`Grid`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grid`'
- en: Scrolling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动
- en: Flex layout
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性布局
- en: I am not a designer
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是设计师
- en: For a page to look professional, a designer must work with the developer, specifying
    not only where to put the controls but also the font size, font, margins, and
    so on. I am not a designer, and the pages we’ll create are for illustration purposes
    only; they will not be pretty.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使页面看起来专业，设计师必须与开发者合作，不仅要指定控件的位置，还要指定字体大小、字体、边距等。我不是设计师，我们创建的页面仅用于说明目的；它们不会很漂亮。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be found in the GitHub repository under
    this branch: [https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Layouts](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Layouts)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在 GitHub 仓库的此分支下找到：[https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Layouts](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Layouts)
- en: Stack layouts
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆叠布局
- en: 'Stack layouts allow you to stack one control on top of another or next to one
    another. They come in three flavors:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 堆叠布局允许您将一个控件堆叠在另一个控件上方或并排放置。它们有三种类型：
- en: '`StackLayout`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StackLayout`'
- en: '`VerticalStackLayout`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VerticalStackLayout`'
- en: '`HorizontalStackLayout`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HorizontalStackLayout`'
- en: The first of these is for backward compatibility with `Xamarin.Forms` and is
    effectively deprecated; the other two are far more performant.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些中的第一个是为了与 `Xamarin.Forms` 兼容而设计的，实际上已被弃用；其他两个则性能更佳。
- en: 'We’ve seen `VerticalStackLayout` and `HorizontalStackLayout` at work already.
    As the name indicates, `VerticalStackLayout` places one control *on top of* another,
    while `HorizontalStackLayout` places them side by side. Using `margins` (the space
    between objects) and `padding` (the space around an object), you can tweak a nice
    enough layout with just these controls:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 `VerticalStackLayout` 和 `HorizontalStackLayout` 的应用。正如其名称所示，`VerticalStackLayout`
    将一个控件放置在另一个控件的上方，而 `HorizontalStackLayout` 则将它们并排放置。使用 `margins`（对象之间的空间）和 `padding`（对象周围的空间），您只需使用这些控件就能调整出一个不错的布局：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, on the `LoginPage` page, we start with a `VerticalStackLayout` object,
    which will contain everything below it until the closing `</VerticalStackLayout>`
    tag. Immediately, we declare a `HorizontalStackLayout` object, which contains
    a `Label` (acting as a prompt) and an `Entry` (gathering the name from the user).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在 `LoginPage` 页面上，我们从一个 `VerticalStackLayout` 对象开始，它将包含其下直到关闭 `</VerticalStackLayout>`
    标签的所有内容。紧接着，我们声明一个 `HorizontalStackLayout` 对象，它包含一个 `Label`（作为提示）和一个 `Entry`（收集用户的名字）。
- en: Below `HorizontalStackLayout` is a second `HorizontalStackLayout` and below
    that is a `BoxView`. In short, `VerticalStackLayout` continues to stack views
    on top of each other.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `HorizontalStackLayout` 下方是一个第二个 `HorizontalStackLayout`，再下方是一个 `BoxView`。简而言之，`VerticalStackLayout`
    继续将视图堆叠在彼此的上方。
- en: While this is fine for a very simple layout, it has its limitations. Working
    with `VerticalStackLayout` and `HorizontalStackLayout` on complicated layouts
    becomes difficult after a short while.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这对于一个非常简单的布局来说很好，但它有其局限性。在复杂布局中使用 `VerticalStackLayout` 和 `HorizontalStackLayout`
    不会持续太久就会变得困难。
- en: 'Enter the most powerful layout of them all: `Grid`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 进入所有布局中最强大的布局：`Grid`。
- en: Grid
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格
- en: Nothing comes close to `Grid` for flexibility, although its basic use is dead
    simple. A grid consists of rows and columns. You define the size of each and then
    fill in the resulting boxes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于灵活性来说，没有哪种布局能与 `Grid` 相提并论，尽管其基本用法非常简单。网格由行和列组成。您定义每个的大小，然后填充生成的框。
- en: By default, all the columns are the same width, and all the rows are the same
    height. Rows and columns are identified (by default) by their offset starting
    at column 0, row 0\. You can leave out the 0 (it is the default value) but I advise
    against doing so for readability. (This is the same reason I mark private methods
    and classes with the `private` keyword.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有列的宽度都相同，所有行的长度都相同。行和列（默认情况下）通过从列 0、行 0 开始的偏移量进行标识。您可以省略 0（它是默认值），但我建议不要这样做以提高可读性。（这也是为什么我用
    `private` 关键字标记私有方法和类的原因。）
- en: 'We can recreate the `LoginPage` page using `Grid`. Let’s look at the first
    approximation in full (I’ve left out the resources section, as it is unchanged):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`Grid`重新创建`LoginPage`页面。让我们看看第一次近似的全貌（我已经省略了资源部分，因为它没有变化）：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next thing to add is the frames:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要添加的是框架：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With that in place, we can add the three buttons and then close `Grid` and
    `VerticalStackLayout`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好这些之后，我们可以添加三个按钮，然后关闭`Grid`和`VerticalStackLayout`：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[1] We’ll put `Grid` inside a `VerticalStackLayout` so that we can add the
    `ProgressBar` below the grid (adding it to `VerticalStackLayout`’s `Children`
    collection, which will have only two members: `Grid` and `ProgressBar`).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 我们将`Grid`放入`VerticalStackLayout`中，这样我们就可以在网格下方添加`ProgressBar`（将其添加到`VerticalStackLayout`的`Children`集合中，该集合将只有两个成员：`Grid`和`ProgressBar`）。'
- en: '[2] We declare `Grid` with the keyword.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 我们使用关键字声明`Grid`。'
- en: '[3] We declare three columns of equal size (`*,*,*`).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 我们声明了三个大小相等的列（`*,*,*`）。'
- en: “Some have stars upon thars” – Dr. Seuss
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “有些星星在远处” – 马克·吐温博士
- en: 'Stars don’t make much difference when they are all the same size, but if, for
    example, we wanted the first to be twice as big as the others, we would write
    the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当星星大小相同时，它们的影响不大，但如果我们，例如，想让第一个星星是其他星星的两倍大，我们会写如下：
- en: '`ColumnDefinitions="2*,*,*"`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ColumnDefinitions="2*,*,*"`'
- en: In that case, the column would be divided into four equal parts and the first
    column would get two of them and the other columns one each. The result is that
    the first column would be twice as wide as the others.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，列将被分为四个相等的部分，第一列将获得其中两个，其他列各一个。结果是第一列的宽度是其他列的两倍。
- en: '[4] Similarly, we declare five rows of equal size.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 类似地，我们声明了五个大小相等的行。'
- en: '[5] We place the Label inside column 0.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] 我们将标签放置在列0中。'
- en: '[6] We place the Label inside row 0.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] 我们将标签放置在行0中。'
- en: '[7] The horizontal option is with respect to the column the control is in.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[7] 水平选项是相对于控件所在的列而言的。'
- en: '[8] The vertical option is with respect to the row the control is in.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[8] 垂直选项是相对于控件所在的行而言的。'
- en: '[9] A control can span across more than one column. In this case, the entry
    begins at column 1 and runs for a column span of 2 (that is, it occupies both
    column 1 and 2).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[9] 一个控件可以跨越多个列。在这种情况下，条目从列1开始，跨越2列（即它占据了列1和2）。'
- en: '[10] Notice that we don’t need a `HorizontalStackLayout` because the position
    of the prompt with respect to the entry is determined by what columns they are
    in and their horizontal options (for example, start, center, or end).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[10] 注意，我们不需要`HorizontalStackLayout`，因为提示与输入之间的位置是由它们所在的列及其水平选项（例如，开始、居中或结束）决定的。'
- en: '[11] `BoxView` wants to stretch across the entire grid and so starts at column
    0 and has a column span of 3.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[11] `BoxView`想要跨越整个网格，因此它从列0开始，列跨度为3。'
- en: Notice that nothing else needs to change. I manipulated the margins and vertical
    options to get the *pixel-perfect* alignment I was looking for, but other than
    that, the XAML remains the same.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，其他内容无需更改。我调整了页边距和垂直选项，以获得所需的**像素级**对齐，但除此之外，XAML保持不变。
- en: One other thing to note is that we have an opportunity to factor out the vertical
    and horizontal options and the margins into the styles.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一点需要注意的是，我们有将垂直和水平选项以及页边距提取到样式中的机会。
- en: The result of converting the `StackLayout` into this grid is shown in *Figure
    6**.1*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将`StackLayout`转换为网格的结果显示在*图6.1*中。
- en: '![Figure 6.1 – First grid layout'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – 第一个网格布局'
- en: '](img/Figure_6.1_B19723.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.1_B19723.jpg)'
- en: Figure 6.1 – First grid layout
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 第一个网格布局
- en: Notice that the `ProgressBar` is still shown. It is added to `VerticalStackLayout`
    in the code-behind as it was previously.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`ProgressBar`仍然可见。它在代码隐藏中添加到`VerticalStackLayout`，就像之前一样。
- en: Sizing rows and columns
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整行和列的大小
- en: '`RowHeight` and `ColumnWidth` can be defined in one of three ways:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`RowHeight`和`ColumnWidth`可以以三种方式之一定义：'
- en: '*absolute*: A value in DIUs'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*绝对值*：DIU中的值'
- en: '*auto*: Auto-sized based on the cell contents'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*自动大小*：根据单元格内容自动调整大小'
- en: '*Stars*: As shown earlier, with proportional allocation'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*星星*：如前所述，按比例分配'
- en: 'Currently, the top of the `Grid` looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`Grid`的顶部看起来是这样的：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We could have used `auto` to say that each control will take up the amount
    of room it needs on each row:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`auto`来表示每个控件将占据每行所需的房间量：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let’s also set the height of the frames to `150`. `auto` allocates enough room
    for the newly enlarged frames, as illustrated in *Figure 6**.2*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也将框架的高度设置为`150`。`auto`为新扩大的框架分配足够的房间，如图*图6.2*所示。
- en: '![Figure 6.2 – Using auto-sizing'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 使用自动调整大小'
- en: '](img/Figure_6.2_B19723.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.2_B19723.jpg)'
- en: Figure 6.2 – Using auto-sizing
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 使用自动调整大小
- en: Best practice – minimize use of auto
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践 – 最小化使用自动
- en: Microsoft recommends minimizing the use of `auto` as it is less performant (the
    layout engine has to perform additional calculations). That being said, at times,
    it is very useful, especially when the size of the object will be determined at
    runtime.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 微软建议最小化使用 `auto`，因为它性能较差（布局引擎需要执行额外的计算）。尽管如此，有时它非常有用，尤其是在对象的大小将在运行时确定时。
- en: 'We could rewrite the rows shown before as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将之前显示的行重写如下：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The calculation now would be to find the actual size of the three `auto` rows
    and add `50` Device-Independent Units, for the fifth row. Then, we take what is
    left in the grid size, and divide it equally between the first and second rows.
    The result is shown in the following figure:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的计算将是找到三个 `auto` 行的实际大小，并添加 `50` 设备无关单位，用于第五行。然后，我们将网格大小中剩余的部分平均分配给第一行和第二行。结果如下所示：
- en: '![Figure 6.3 – Combining stars, absolute, and auto'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – 结合星号、绝对和自动'
- en: '](img/Figure_6.3_B19723.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.3_B19723.jpg)'
- en: Figure 6.3 – Combining stars, absolute, and auto
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 结合星号、绝对和自动
- en: As you can see, by mixing and matching, you can create an awful-looking UI.
    On the other hand, given to a designer, these three options (`absolute`, stars,
    and `auto`) can be used to create beautiful UIs with precise control over sizing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过混合和匹配，您可以创建一个外观糟糕的 UI。另一方面，如果交给设计师，这三个选项（`绝对`、`星号`和 `auto`）可以用来创建具有精确尺寸控制的美丽
    UI。
- en: Named rows and columns
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名行和列
- en: In the preceding code, we referred to each row and column by its zero-based
    offset. Thus, the frames were in `Grid.row[3]` in `Grid.column[0]` and `Grid.column[1]`.
    With large grids, this can become confusing and difficult to manage.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们通过零基偏移量来引用每一行和每一列。因此，框架位于 `Grid.row[3]` 和 `Grid.column[0]` 以及 `Grid.column[1]`。对于大型网格，这可能会变得令人困惑且难以管理。
- en: In C#, .NET MAUI offers you the option of naming your rows and columns using
    an enumeration. To see this, let’s create an alternative login page, entirely
    in C#, and then take a look at it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，.NET MAUI 提供了使用枚举来命名行和列的选项。为了看到这一点，让我们创建一个替代的登录页面，完全使用 C#，然后看看它。
- en: We’ll simplify the page slightly, taking out `BoxView` and `Frame`, to keep
    our focus on the manipulation of the rows and columns.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将稍微简化页面，移除 `BoxView` 和 `Frame`，以保持我们对行和列操作的焦点。
- en: 'First, we are going to define enumerations, which will serve as the names of
    our rows and columns, respectively:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义枚举，这些枚举将分别作为我们行和列的名称：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What you use for these names is entirely up to you; typically, you’ll use something
    that describes what goes into those rows and columns. Thus, here, my first row
    will hold `Username`, my second row will hold `Password`, and my third row will
    hold our three `Buttons`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用什么来命名完全取决于你；通常，你会使用一些描述那些行和列内容的名称。因此，在这里，我的第一行将包含 `Username`，我的第二行将包含 `Password`，我的第三行将包含我们的三个
    `Buttons`。
- en: Notice that the columns are named after the type of buttons. That makes it difficult
    (or confusing) to use those columns with these rows. We’ll solve that by falling
    back to using offsets on those rows.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，列是按照按钮类型命名的。这使得使用这些行与这些列一起使用变得困难（或令人困惑）。我们将通过在这些行上回退到使用偏移量来解决此问题。
- en: 'Here is the complete class, which I named `LoginCS.cs`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的类，我将其命名为 `LoginCS.cs`：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[1] The work is done in the constructor'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 工作在构造函数中完成'
- en: '[2] As in the XAML, we start with `VerticalStackLayout`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 如同在 XAML 中，我们以 `VerticalStackLayout` 开始'
- en: '[3] `Grid` is a child of `VerticalStackLayout`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] `Grid` 是 `VerticalStackLayout` 的子项'
- en: '[4] We define the first row to use the enumerated name and the sizing of `auto`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 我们定义第一行使用枚举名称和 `auto` 的大小'
- en: '[5] We define the first column to use the enumerated column name and the sizing
    of a *star* (equivalent to 1 `*`)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] 我们定义第一列使用枚举列名和星号的大小（相当于 1 `*`）'
- en: '[6] Notice that while the row name is meaningful and I therefore use it, the
    column name would not be meaningful and so I just use the offset'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] 注意，虽然行名是有意义的，所以我使用了它，但列名则没有意义，所以我只使用偏移量'
- en: '[7] Here, both the row name and the column name are meaningful, and it is much
    easier to figure out what is going on by using these names rather than the offsets'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[7] 在这里，行名和列名都是有意义的，使用这些名称而不是偏移量来了解正在发生的事情要容易得多'
- en: There is no doubt that `.Row(Row.Buttons).Column(Column.Create)` is much easier
    to understand than `Row[4].Column[1]`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，`.Row(Row.Buttons).Column(Column.Create)` 比起 `Row[4].Column[1]` 更容易理解。
- en: If you want to use this page, don’t forget to point to your new page, `LoginCS.cs`,
    in `AppShell.xaml`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用这个页面，别忘了在 `AppShell.xaml` 中指向你的新页面，`LoginCS.cs`。
- en: Oops
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀
- en: The `Submit` button will crash the program as the `Submit` command in `LoginViewModel`
    is looking for `LoginPage.LoginProgressBar`. We could fix this, but the goal here
    was to show that you can re-write `LoginPage` in C#.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`Submit` 按钮会导致程序崩溃，因为 `LoginViewModel` 中的 `Submit` 命令正在寻找 `LoginPage.LoginProgressBar`。我们可以修复这个问题，但这里的目的是展示你可以用
    C# 重新编写 `LoginPage`。'
- en: We’ll stay with the original `LoginPage.xaml` for the rest of this book, as
    that is more complete.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的剩余部分，我们将保持使用原始的 `LoginPage.xaml`，因为它更完整。
- en: ScrollView
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ScrollView
- en: Often, you will have more data to show than can fit on the page. This is especially
    frequent when working with lists, but can also be true for a form. The `ScrollView`
    control wraps around your other controls and allows them to be scrolled.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你想要显示的数据会比页面能容纳的还要多。这在处理列表时尤其常见，但对于表单来说也可能如此。`ScrollView` 控件会围绕你的其他控件，并允许它们进行滚动。
- en: 'We saw the use of `ScrollView` in `PreferencesPage`, where we wrapped `VerticalStackLayout`
    in a `ScrollView` control:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `PreferencesPage` 中看到了 `ScrollView` 的使用，我们在 `ScrollView` 控件中包裹了 `VerticalStackLayout`：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The number of preferences was just more than would show on a phone screen all
    at once. You can see the scroll effect a bit more if you add some more preferences
    to `PreferenceService`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 预设的数量略多于一次显示在手机屏幕上的数量。如果你在 `PreferenceService` 中添加更多预设，你可以更清楚地看到滚动效果。
- en: FlexLayout
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FlexLayout
- en: '`FlexLayout` is similar to `VerticalStackLayout` and `HorizontalStackLayout`
    with one crucial distinction: if you are using one of the stack layouts and the
    items extend past the end of the page (and you don’t use `ScrollView`), anything
    that doesn’t fit won’t be rendered.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`FlexLayout` 与 `VerticalStackLayout` 和 `HorizontalStackLayout` 类似，但有一个关键的区别：如果你使用其中一个堆叠布局，并且项目延伸到页面末尾（你没有使用
    `ScrollView`），那么任何不适合的内容都不会被渲染。'
- en: FlexLayout – seem familiar?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: FlexLayout – 看起来熟悉吗？
- en: '`FlexLayout` might be familiar if you’ve worked with CSS. `FlexLayout` is very
    similar to the Flexible Box Layout and, in fact, was based on the CSS module.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经使用过 CSS，那么 `FlexLayout` 可能很熟悉。`FlexLayout` 与 Flexible Box Layout 非常相似，实际上它基于
    CSS 模块。
- en: You can see the effect of `FlexLayout` by removing `ScrollView` from `PreferencesPage`.
    All of the remaining preferences are inaccessible.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从 `PreferencesPage` 中移除 `ScrollView` 来看到 `FlexLayout` 的效果。所有剩余的预设都不可访问。
- en: 'With `FlexLayout`, the items are wrapped to the next row or column. You define
    which by setting the direction in `FlexLayout`. The possible directions are as
    follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `FlexLayout`，项目会被包裹到下一行或列。你通过在 `FlexLayout` 中设置方向来定义这一点。可能的方向如下：
- en: '`Row`: Stacks children horizontally'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Row`: 水平堆叠子项'
- en: '`Row-reverse`: Stacks horizontally in reverse order'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Row-reverse`: 以反向顺序水平堆叠'
- en: '`Column`: Stacks children vertically'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Column`: 垂直堆叠子项'
- en: '`Column-reverse`: Stacks vertically in reverse order'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Column-reverse`: 以反向顺序垂直堆叠'
- en: 'Remove `VerticalStackLayout` and replace it with `FlexLayout`. Set the direction
    to `Row`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 移除 `VerticalStackLayout` 并用 `FlexLayout` 替换它。将方向设置为 `Row`：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Figure 6**.4* shows the result. It is ugly but it conveys what is happening.
    The excess items are wrapped horizontally.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 6**.4* 展示了结果。它很丑，但它传达了正在发生的事情。多余的项目水平包装。'
- en: '![Figure 6.4 – Mangling your screen with FlexLayout'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.4 – 使用 FlexLayout 打乱屏幕'
- en: '](img/Figure_6.4_B19723.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.4_B19723.jpg)'
- en: Figure 6.4 – Mangling your screen with FlexLayout
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 6.4 – 使用 FlexLayout 打乱屏幕
- en: Let’s see whether we can come up with a better, less ugly example.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们是否能提出一个更好、不那么丑陋的例子。
- en: Wrap
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 包装
- en: 'One of the properties of `FlexLayout` is `Wrap`, which defaults to *no-wrap*.
    Most of the time, however, you will want it to wrap, and you will end up with
    this wonderful syntax:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`FlexLayout` 的一个属性是 `Wrap`，默认为 *no-wrap*。然而，大多数时候，你希望它进行包装，最终你会得到这个美妙的语法：'
- en: '`Wrap = "``Wrap"`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`Wrap = "``Wrap"`'
- en: We’ll return to the `Login` page and, just before the end, we’ll add a `HorizontalStackLayout`
    containing four buttons that won’t quite fit, as shown in *Figure 6**.5*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回到 `Login` 页面，并在结束前，我们添加一个包含四个按钮的 `HorizontalStackLayout`，这些按钮不太适合，如图 *6**.5*
    所示。
- en: '![Figure 6.5 – The buttons don’t fit in the row'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.5 – 按钮没有适应行'
- en: '](img/Figure_6.5_B19723.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.5_B19723.jpg)'
- en: Figure 6.5 – The buttons don’t fit in the row
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 6.5 – 按钮没有适应行
- en: 'Now, we’ll replace `HorizontalStackLayout` with `FlexLayout` with `Wrap` set
    to `Wrap`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将用 `FlexLayout` 替换 `HorizontalStackLayout`，并将 `Wrap` 设置为 `Wrap`：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`FlexLayout` *sees* that the fourth button won’t fit and wraps it to the next
    row, as shown in the following figure:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`FlexLayout` *看到*第四个按钮无法适应，并将其包裹到下一行，如图下所示：'
- en: '![Figure 6.6 – FlexLayout wraps the buttons'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.6 – FlexLayout 包裹按钮'
- en: '](img/Figure_6.6_B19723.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.6_B19723.jpg)'
- en: Figure 6.6 – FlexLayout wraps the buttons
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – FlexLayout 包裹按钮
- en: .NET MAUI has added a `BindableLayout` object, which, frankly, I don’t find
    terribly useful.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 添加了一个 `BindableLayout` 对象，坦白说，我觉得它并不特别有用。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the principal layouts used in designing .NET MAUI
    apps. The most powerful and flexible of these is `Grid`, although `HorizontalStackLayout`
    and `VerticalStackLayout` are often used for somewhat simpler layouts.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了在 .NET MAUI 应用程序设计中使用的原理布局。其中最强大和灵活的是 `Grid`，尽管 `HorizontalStackLayout`
    和 `VerticalStackLayout` 通常用于相对简单的布局。
- en: In the next chapter, we will examine how to move from page to page and how to
    send data as we move. We will look at the Shell and at routing, the essential
    aspects of page navigation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何从一个页面移动到另一个页面，以及如何在移动过程中发送数据。我们将查看 Shell 和路由，这是页面导航的基本方面。
- en: Quiz
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验
- en: What are the three ways you can define the width of a column in a grid?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以定义网格中列宽的哪三种方式？
- en: If a grid’s column definition looks like this – `(2*, auto, *, 100)` – how will
    the space be divided?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个网格的列定义看起来像这样 – `(2*, auto, *, 100)` – 空间将如何划分？
- en: 'If a `Button` object is defined like this:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个 `Button` 对象定义如下：
- en: '[PRE12]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What do we know about its position?
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对其位置了解多少？
- en: What is the advantage of `Grid` over using `VerticalStackLayout` and `HorizontalStackLayout`?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Grid` 相比于使用 `VerticalStackLayout` 和 `HorizontalStackLayout` 有什么优势？'
- en: Why is `BindableLayout` less useful than, for example, `CollectionView`?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 `BindableLayout` 比例如 `CollectionView` 更不实用？
- en: You try it
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你试试
- en: 'Create a page that looks like a standard four-function calculator. Use the
    layout shown in *Figure 6**.7*. Extra credit: implement the functionality and
    display the result in a `Label`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个看起来像标准四功能计算器的页面。使用 *图 6*.7 中所示的布局。加分项：实现功能并在 `Label` 中显示结果。
- en: '![Figure 6.7 – Four-function calculator](img/Figure_6.7_B19723.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 四功能计算器](img/Figure_6.7_B19723.jpg)'
- en: Figure 6.7 – Four-function calculator
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 四功能计算器
- en: Part 2 – Intermediate Topics
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分 – 中级主题
- en: With the basics under our belt, we’ll go on to look at a number of intermediate
    topics, including how you navigate from one page to the next and how you store
    data, both for a user’s preferences and in a relational database. We’ll end with
    the most important topic – creating unit tests.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握基础知识后，我们将继续探讨许多中级主题，包括如何从一个页面导航到另一个页面以及如何存储数据，包括用户的偏好和关系数据库中的数据。我们将以创建单元测试这一最重要的话题结束。
- en: 'This part has the following chapters:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 7*](B19723_07.xhtml#_idTextAnchor129), *Understanding Navigation*'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 7 章*](B19723_07.xhtml#_idTextAnchor129), *理解导航*'
- en: '[*Chapter 8*](B19723_08.xhtml#_idTextAnchor144), *Storing and Retrieving Data*'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 8 章*](B19723_08.xhtml#_idTextAnchor144), *存储和检索数据*'
- en: '[*Chapter 9*](B19723_09.xhtml#_idTextAnchor160), *Unit Testing*'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 9 章*](B19723_09.xhtml#_idTextAnchor160), *单元测试*'
