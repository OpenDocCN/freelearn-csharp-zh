["```cs\n    public void Add(object item)\n    {\n          InnerList.Add(item);\n    }\n    ```", "```cs\n    public void Remove(object item)\n    {\n          InnerList.Remove(item);\n    }\n    ```", "```cs\n    public new void Clear()\n    {\n    InnerList.Clear();\n    }\n    ```", "```cs\n    public new int Count()\n    {\n          return InnerList.Count;\n    }\n    ```", "```cs\n    internal interface ITax\n    {\n          int Id { get; set; }\n          TaxType TaxType { get; set; }\n          TaxRate TaxRate { get; set; }\n          decimal LowerLimit { get; set; }\n          decimal UpperLimit { get; set; }\n          decimal Percentage { get; set; }\n          decimal Calculate(decimal amount);\n    }\n    ```", "```cs\n    internal abstract class BaseTax : ITax\n    {\n        public int Id { get; set; }\n        public TaxType TaxType { get; set; }\n        public TaxRate TaxRate { get; set; }\n        public decimal LowerLimit { get; set; }\n        public decimal UpperLimit { get; set; }\n        public decimal Percentage { get; set; }\n        public abstract decimal Calculate(decimal amount);\n    }\n    ```", "```cs\n    using System;\n    [Flags]\n    internal enum TaxRate\n    {\n        TaxFreePersonalAllowance,\n        StarterRate,\n        BasicRate,\n        IntermediateRate,\n        HigherRate,\n        AdditionalRate\n    }\n    ```", "```cs\n    [Flags]\n    internal enum TaxType\n    {\n        CorporationTax,\n        ValueAddedTax,\n        IncomeTax,\n        NationInsuranceContributions,\n        ExciseDuties,\n        RoadTax,\n        StampDuty\n    }\n    ```", "```cs\n    public BasicRate()\n    {\n        this.LowerLimit = 14550M;\n        this.UpperLimit = 24944M;\n        this.TaxType = TaxType.IncomeTax;\n        this.TaxRate = TaxRate.BasicRate;\n        this.Percentage = 0.2M;\n    }\n    ```", "```cs\n    public override decimal Calculate(decimal amount)\n    {\n          if (Percentage > 1)\n                throw new Exception(\"Invalid percentage. \n                    Percentage must be between 0 and 1.\");\n    if (amount < LowerLimit & amount > UpperLimit)\n        return 0;\n    return Percentage * amount;\n    }\n    ```", "```cs\n    using BenchmarkDotNet.Attributes;\n    using BenchmarkDotNet.Engines;\n    using BenchmarkDotNet.Order;\n    using CH06_Collections.Linq;\n    using System.Collections.Generic;\n    using System.Threading;\n    [MemoryDiagnoser]\n    [Orderer(SummaryOrderPolicy.FastestToSlowest)]\n    [RankColumn]\n    public class TaxMan { }\n    ```", "```cs\n    [Benchmark]\n    public void BasicRateInterface()\n    {\n          IList<BasicRate> basicRate = new \n              List<BasicRate>();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void BasicRateConcrete()\n    {\n          List<BasicRate> basicRate = new \n              List<BasicRate>();\n    }\n    ```", "```cs\n    BenchmarkRunner.Run<TaxMan>();\n    ```", "```cs\n    using BenchmarkDotNet.Attributes;\n    using BenchmarkDotNet.Order;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.Linq;\n    ```", "```cs\n    private int[] array;\n    private List<int> collection;\n    ```", "```cs\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n    array = new int[1000];\n    collection = new List<int>(1000);\n    for (int i = 0; i < 1000; i++)\n    {\n        array[i] = i;\n        collection.Add(i);\n    }\n    }\n    ```", "```cs\n    [GlobalCleanup]\n    public void GlobalCleanup()\n    {\n    // Disposing logic\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ArrayAdd1000Logic1()\n    {\n    int[] list = new int[1000];\n    for (int i = 0; i < 1000; i++)\n    {\n        list[i] = i;\n    }\n    }\n    ```", "```cs\n    [Benchmark]\n    public void CollectionAdd1000Logic()\n    {\n    Ilist<int> list = new new List<int>();\n    for (int i = 0; i < 1000; i++)\n          list.Add(i)\n    }\n    ```", "```cs\n    [Benchmark]\n    public int ArrayIterationLogic()\n    {\n    int res = 0;\n    for (int i = 0; i < 1000; i++)\n        res += array[i];\n    return res;\n    }\n    ```", "```cs\n    [Benchmark]\n    public int CollectionIterationLogic()\n    {\n    int res = 0;\n    for (int i = 0; i < 1000; i++)\n        res += collection[i];\n    return res;\n    }\n    ```", "```cs\n    [Benchmark]\n    public int ArrayGetElement500Logic()\n    {\n    return array[500];\n    }\n    ```", "```cs\n    [Benchmark]\n    public int CollectionGetElement500Logic()\n    {\n    return collection[500];\n    }\n    ```", "```cs\n    BenchmarkRunner.Run<ArraysVsCollections>();\n    ```", "```cs\n    private string[] _items;\n    public Indexers(int size)\n    {\n          _items = new string[size];\n    }\n    ```", "```cs\n    public string this[int index]\n    {\n      get\n    {\n        if (IsValidIndex(index))\n            return _items[index];\n        else\n            return string.Empty;\n    }\n      set\n    {\n        if (IsValidIndex(index))\n            _items[index] = value;\n    }\n    } \n    ```", "```cs\n    private bool IsValidIndex(int index)\n    {\n        return index > -1 && index < _items.Length;\n    }\n    ```", "```cs\n    public int this[string item]\n    {\n      get\n    {\n        return Array.IndexOf(_items, item);\n    }\n    }\n    ```", "```cs\n    public static void IndexerExample()\n    {\n          Indexers indexers = new Indexers(1000);\n          for (int i = 0; i < 1000; i++)\n                indexers[i] = $\"Item {i}\";\n    Console.WriteLine($\"The item at position 500 is \n         \\\"{indexers[500]}\\\".\");\n    Console.WriteLine($\"The index of \\\"Item 500\\\" is \n         {indexers[\"Item 500\"]}.\");\n    }\n    ```", "```cs\n    IndexerExample();\n    ```", "```cs\nThe item at position 500 is \"Item 500\".\nThe index of \"Item 500\" is 500.\n```", "```cs\n        using BenchmarkDotNet.Attributes;\n        using BenchmarkDotNet.Running;\n        using System;\n        using System.Collections;\n        using System.Collections.Generic;\n        using System.Diagnostics;\n    ```", "```cs\n    private List<int> _years;\n    public IEnumerableVsIEnumerator()\n    {\n      _years = new List<int> { 1970, 1971, 1972, 1973, 1974, \n          1975, 1976, 1977, 1978, 1979 };\n    }\n    ```", "```cs\n    public void IterateEnumerator1970To1975()\n    {\n      var years = _years.GetEnumerator();\n      while (years.MoveNext())\n    {\n        Debug.WriteLine(years.Current);\n        if (years.Current > 1975)\n            IterateEnumberator1976To1979(years);\n    }\n    }\n    ```", "```cs\n    public void IterateEnumberator1976To1979\n        (IEnumerator<int> years)\n    {\n    while (years.MoveNext())\n    {\n        Debug.WriteLine(years.Current);\n    }\n    }\n    ```", "```cs\n    IEnumerableVsIEnumeratorExample();\n    ```", "```cs\n    private static void IEnumerableVsIEnumeratorExample()\n    {\n      IEnumerableVsIEnumerator eve = new \n        IEnumerableVsIEnumerator();\n      eve.IterateEnumerator1970To1975();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void BenchmarkIEnumerable()\n    {\n      IEnumerable<int> enumerable = IEnumerable<int>)_years;\n      foreach (int i in enumerable)\n          Debug.WriteLine(i);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void BenchmarkIEnumerator()\n    {\n      IEnumerator<int> enumerator = _years.GetEnumerator();\n      while (enumerator.MoveNext())\n          Debug.WriteLine(enumerator.Current);\n    }\n    ```", "```cs\n    BenchmarkRunner.Run<IEnumerableVsIEnumerator>();\n    ```", "```cs\n    {\n      \"DatabaseSettings\": {\n        \"ConnectionString\": \"YOUR_CONNECTION_STRING\"\n      }\n    }\n    ```", "```cs\n    using Microsoft.Extensions.Configuration;\n    using System;\n    using System.IO;\n    ```", "```cs\n    public static IConfigurationRoot Configuration { get; \n        set; }\n    ```", "```cs\n    public static T GetSecrets<T>(string sectionName) \n        where T : class\n    {\n    var devEnvironmentVariable = Environment\n        .GetEnvironmentVariable(\"NETCORE_ENVIRONMENT\");\n    var isDevelopment = string.IsNullOrEmpty\n        (devEnvironmentVariable) || devEnvironmentVariable\n            .ToLower() == \"development\";\n    var builder = new ConfigurationBuilder()    \n        .SetBasePath(Directory.GetCurrentDirectory())\n    .AddJsonFile(\"appsettings.json\", optional: true, \n        reloadOnChange: true)\n    .AddEnvironmentVariables();\n    if (isDevelopment) //only add secrets in development\n    {\n        builder.AddUserSecrets<T>();\n    }\n    Configuration = builder.Build();\n    return Configuration.GetSection(sectionName).Get<T>();\n    }\n    ```", "```cs\n    public class DatabaseSettings\n    {\n        public string ConnectionString { get; set; }\n    }\n    ```", "```cs\n    {\n      \"DatabaseSettings\": {\n        \"ConnectionString\": \"Set in Azure. For \n            development, set in User Secrets\"\n      }\n    }\n    ```", "```cs\n    using BenchmarkDotNet.Attributes;\n    using BenchmarkDotNet.Order;\n    using CH06_Collections.Configuration;\n    using CH06_Collections.Data;\n    using CH06_Collections.Models;\n    using Microsoft.Extensions.Options;\n    using System;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    [MemoryDiagnoser]\n    [Orderer(SummaryOrderPolicy.Declared)]\n    [RankColumn]\n    public class DatabaseQueryAndIteration : IDisposable \n    {\n    }\n    ```", "```cs\n    private bool disposedValue;\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposedValue) {\n            if (disposing)\n                _context.Dispose();\n            disposedValue = true;\n        }\n    }\n    public void Dispose(){\n        Dispose(disposing: true);\n        GC.SuppressFinalize(this);\n    }\n    ```", "```cs\n    private DatabaseContext _context;\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n        var connectionString = SecretsManager.\n            GetSecrets<DatabaseSettings>(nameof\n              (DatabaseSettings)).ConnectionString;\n    _context = new DatabaseContext(connectionString);\n    }\n    [GlobalCleanup]\n    public void GlobalCleanup()\n    {\n            Dispose(true);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDb()\n    {\n        var products = (from p in _context.Products\n                        where p.Id > 1 select p);\n    foreach (var product in products)\n        Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsList()\n    {\n    List<Product> products = (from p in _context.Products\n    where p.Id > 1\n    select p).ToList<Product>();\n    foreach (var product in products)\n    Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsIEnumerable()\n    {\n    var products = (from p in _context.Products\n                    where p.Id > 1\n                    select p).AsEnumerable<Product>();\n    foreach (var product in products)\n        Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsIEnumerator()\n    {\n          var products = (from p in _context.Products\n                    where p.Id > 1\n                    select p).GetEnumerator();\n    while (products.MoveNext())\n        Debug.WriteLine(products.Current.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsIQueryable()\n    {\n    var products = (from p in _context.Products\n                    where p.Id > 1\n                    select p).AsQueryable<Product>();\n    foreach (var product in products)\n        Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    BenchmarkRunner.Run<DatabaseQueryAndIteration>();\n    ```", "```cs\n    using BenchmarkDotNet.Attributes;\n    using BenchmarkDotNet.Order;\n    using System;\n    using System.Collections.Generic;\n    [MemoryDiagnoser]\n    [Orderer(SummaryOrderPolicy.Declared)]\n    [RankColumn]\n    public class Yield { }\n    ```", "```cs\n    public void YieldSample()\n    {\n    DoCountdown();\n    PrintMonthsOfYear();\n    DoBreakIteration();\n    }\n    ```", "```cs\n    private IEnumerable<int> Countdown()\n    {\n          for (int x = 10; x >= 0; x--)\n          yield return x;\n    }\n    ```", "```cs\n    private void DoCountdown()\n    {\n    foreach (int x in Countdown())\n        Console.WriteLine(x);\n    }\n    ```", "```cs\n    internal class Month\n    {\n          public string Name { get; set; }\n          public int MonthOfYear { get; set; }\n    }\n    ```", "```cs\n    internal class Months\n    {\n       public IEnumerable<Month> MonthsOfYear\n       {\n        get\n       {\n        yield return new Month { Name = \"January\", \n            MonthOfYear = 1 };\n        yield return new Month { Name = \"February\", \n            MonthOfYear = 2 };\n        yield return new Month { Name = \"March\", \n            MonthOfYear = 3 };\n        yield return new Month { Name = \"April\", \n            MonthOfYear = 4 };\n        yield return new Month { Name = \"May\", \n            MonthOfYear = 5 };\n        yield return new Month { Name = \"June\", \n            MonthOfYear = 6 };\n        yield return new Month { Name = \"July\", \n            MonthOfYear = 7 };\n        yield return new Month { Name = \"August\", \n            MonthOfYear = 8 };\n        yield return new Month { Name = \"September\", \n            MonthOfYear = 9 };\n        yield return new Month { Name = \"October\", \n            MonthOfYear = 10 };\n        yield return new Month { Name = \"November\", \n            MonthOfYear = 11 };\n        yield return new Month { Name = \"December\", \n            MonthOfYear = 12 };\n        }\n    }\n    }\n    ```", "```cs\n    private void PrintMonthsOfYear()\n    {\n    foreach (Month month in new Months().MonthsOfYear)\n        Console.WriteLine($\"{month.Name} is month \n            {month.MonthOfYear} of the year.\");\n    }\n    ```", "```cs\n    private IEnumerable<int> BreakIteration()\n    {\n    int x = 0;\n    while (x < 20)\n    {\n        if (x < 15)\n            yield return x;\n        else\n            yield break;\n        x++;\n    }\n    }\n    ```", "```cs\n    private void DoBreakIteration()\n    {\n            foreach (int x in BreakIteration())\n                Console.WriteLine($\"Line {x}:\");\n    }\n    ```", "```cs\n    private static void Yield()\n    {\n            var yieldToMe = new Yield();\n            yieldToMe.YieldSample();\n    }\n    ```", "```cs\n    public IEnumerable<long> GetValues()\n    {\n          List<long> list = new List<long>();\n          for (long i = 0; i < 1000000; i++)\n                list.Add(i);\n    return list;\n    }\n    ```", "```cs\n    public IEnumerable<long> GetValuesYield()\n    {\n          for (long i = 0; i < 1000000; i++)\n              yield return i;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GetValuesBenchmark()\n    {\n          var data = GetValues();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GetValuesYieldBenchmark()\n    {\n          var data = GetValuesYield();\n    }\n    ```", "```cs\n    BenchmarkRunner.Run<Yield>();\n    ```", "```cs\n    using BenchmarkDotNet.Attributes;\n    using BenchmarkDotNet.Order;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    [MemoryDiagnoser]\n    [Orderer(SummaryOrderPolicy.Declared)]\n    [RankColumn]\n    public class Equality { }\n    ```", "```cs\n    private List<string> _listOne;\n    private List<string> _listTwo;\n    private int _value1;\n    private int _value2;\n    private string _string1;\n    private string _string2;\n    ```", "```cs\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n          _listOne = new List<string>\n    {\n        \"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Eta\", \"Theta\"\n    };\n      _listTwo = _listOne;\n      _value1 = 123;\n      _value2 = _value1;\n      _string1 = \"Hello, world!\";\n      _string2 = _string1;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ValueOperatorValue()\n    {\n          bool value = _value1 == _value2;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ValueEqualsValue()\n    {\n          bool value = _value1.Equals(_value2);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReferenceOperatorReference()\n    {\n          bool value = _listOne == _listTwo;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReferenceEqualsReference()\n    {\n          bool value = _listOne.Equals(_listTwo);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void StringOpertatorString()\n    {\n          bool value = _string1 == _string2;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void StringEqualsString()\n    {\n          bool value = _string1.Equals(_string2);\n    }\n    ```"]