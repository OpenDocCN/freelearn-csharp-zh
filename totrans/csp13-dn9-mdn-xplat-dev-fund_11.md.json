["```cs\n    partial class Program\n    {\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title} ***\");\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    partial class Program\n    {\n      private static void DeferredExecution(string[] names)\n      {\n        SectionTitle(\"Deferred execution\");\n        // Question: Which names end with an M?\n        // (using a LINQ extension method)\n        var query1 = names.Where(name => name.EndsWith(\"m\"));\n        // Question: Which names end with an M?\n        // (using LINQ query comprehension syntax)\n        var query2 = from name in names where name.EndsWith(\"m\") select name;\n      }\n    } \n    ```", "```cs\n    // A string array is a sequence that implements IEnumerable<string>.\n    string[] names = { \"Michael\", \"Pam\", \"Jim\", \"Dwight\",\n      \"Angela\", \"Kevin\", \"Toby\", \"Creed\" };\n    DeferredExecution(names); \n    ```", "```cs\n    // Answer returned as an array of strings containing Pam and Jim.\n    string[] result1 = query1.ToArray();\n    // Answer returned as a list of strings containing Pam and Jim.\n    List<string> result2 = query2.ToList();\n    // Answer returned as we enumerate over the results.\n    foreach (string name in query1)\n    {\n      WriteLine(name); // outputs Pam\n      names[2] = \"Jimmy\"; // Change Jim to Jimmy.\n      // On the second iteration Jimmy does not\n      // end with an \"m\" so it does not get output.\n    } \n    ```", "```cs\n    *** Deferred execution ***\n    Pam \n    ```", "```cs\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n     **<Using Remove=****\"****System.Linq\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    private static void FilteringUsingWhere(string[] names)\n    {\n    } \n    ```", "```cs\n    SectionTitle(\"Filtering entities using Where\");\n    var query = names.W \n    ```", "```cs\n    <!--<Using Remove=\"System.Linq\" />--> \n    ```", "```cs\n    var query = names.Where(new Func<string, bool>( )) \n    ```", "```cs\n    static bool NameLongerThanFour(string name)\n    {\n      // Returns true for a name longer than four characters.\n      return name.Length > 4;\n    } \n    ```", "```cs\n    var query = names.Where(\n      new Func<string, bool>(**NameLongerThanFour**)); \n    ```", "```cs\n    foreach (string item in query)\n    {\n      WriteLine(item);\n    } \n    ```", "```cs\n    // DeferredExecution(names);\n    FilteringUsingWhere(names); \n    ```", "```cs\n    Michael\n    Dwight\n    Angela\n    Kevin\n    Creed \n    ```", "```cs\n    // Explicitly creating the required delegate.\n    // var query = names.Where(\n    //   new Func<string, bool>(NameLongerThanFour)); \n    ```", "```cs\n    // The compiler creates the delegate automatically.\n    var query = names.Where(NameLongerThanFour); \n    ```", "```cs\n    // Using a lambda expression instead of a named method.\n    var query = names.Where(name => name.Length > 4); \n    ```", "```cs\nvar query = names.Where((string name = \"Bob\") => name.Length > 4); \n```", "```cs\n    var query = names\n      .Where(name => name.Length > 4)\n      .OrderBy(name => name.Length); \n    ```", "```cs\n    Kevin\n    Creed\n    Dwight\n    Angela\n    Michael \n    ```", "```cs\n    var query = names\n      .Where(name => name.Length > 4)\n      .OrderBy(name => name.Length)\n      **.ThenBy(name => name)**; \n    ```", "```cs\n    Creed\n    Kevin\n    Angela\n    Dwight\n    Michael \n    ```", "```cs\nvar query = names.OrderBy(name => name); \n```", "```cs\nvar query = names.Order(); \n```", "```cs\n    **IOrderedEnumerable<****string****>** query = names\n      .Where(name => name.Length > 4)\n      .OrderBy(name => name.Length)\n      .ThenBy(name => name); \n    ```", "```cs\n    static void FilteringByType()\n    {\n      SectionTitle(\"Filtering by type\");\n      List<Exception> exceptions = new()\n      {\n        new ArgumentException(), new SystemException(),\n        new IndexOutOfRangeException(), new InvalidOperationException(),\n        new NullReferenceException(), new InvalidCastException(),\n        new OverflowException(), new DivideByZeroException(),\n        new ApplicationException()\n      };\n      IEnumerable<ArithmeticException> arithmeticExceptionsQuery =\n        exceptions.OfType<ArithmeticException>();\n      foreach (ArithmeticException exception in arithmeticExceptionsQuery)\n      {\n        WriteLine(exception);\n      }\n    } \n    ```", "```cs\n    // FilteringUsingWhere(names);\n    FilteringByType(); \n    ```", "```cs\n    System.OverflowException: Arithmetic operation resulted in an overflow.\n    System.DivideByZeroException: Attempted to divide by zero. \n    ```", "```cs\n    static void Output(IEnumerable<string> cohort,\n      string description = \"\")\n    {\n      if (!string.IsNullOrEmpty(description))\n      {\n        WriteLine(description);\n      }\n      Write(\" \");\n      WriteLine(string.Join(\", \", cohort.ToArray()));\n      WriteLine();\n    } \n    ```", "```cs\n    static void WorkingWithSets()\n    {\n      string[] cohort1 =\n        { \"Rachel\", \"Gareth\", \"Jonathan\", \"George\" };\n      string[] cohort2 =\n        { \"Jack\", \"Stephen\", \"Daniel\", \"Jack\", \"Jared\" };\n      string[] cohort3 =\n        { \"Declan\", \"Jack\", \"Jack\", \"Jasmine\", \"Conor\" };\n      SectionTitle(\"The cohorts\");\n      Output(cohort1, \"Cohort 1\");\n      Output(cohort2, \"Cohort 2\");\n      Output(cohort3, \"Cohort 3\");\n      SectionTitle(\"Set operations\");\n      Output(cohort2.Distinct(), \"cohort2.Distinct()\");\n      Output(cohort2.DistinctBy(name => name.Substring(0, 2)),\n        \"cohort2.DistinctBy(name => name.Substring(0, 2)):\");\n      Output(cohort2.Union(cohort3), \"cohort2.Union(cohort3)\");\n      Output(cohort2.Concat(cohort3), \"cohort2.Concat(cohort3)\");\n      Output(cohort2.Intersect(cohort3), \"cohort2.Intersect(cohort3)\");\n      Output(cohort2.Except(cohort3), \"cohort2.Except(cohort3)\");\n      Output(cohort1.Zip(cohort2,(c1, c2) => $\"{c1} matched with {c2}\"),\n        \"cohort1.Zip(cohort2)\");\n    } \n    ```", "```cs\n    // FilteringByType();\n    WorkingWithSets(); \n    ```", "```cs\n    Cohort 1\n      Rachel, Gareth, Jonathan, George\n    Cohort 2\n      Jack, Stephen, Daniel, Jack, Jared\n    Cohort 3\n      Declan, Jack, Jack, Jasmine, Conor\n    cohort2.Distinct()\n      Jack, Stephen, Daniel, Jared\n    cohort2.DistinctBy(name => name.Substring(0, 2)):\n      Jack, Stephen, Daniel\n    cohort2.Union(cohort3)\n      Jack, Stephen, Daniel, Jared, Declan, Jasmine, Conor\n    cohort2.Concat(cohort3)\n      Jack, Stephen, Daniel, Jack, Jared, Declan, Jack, Jack, Jasmine, Conor\n    cohort2.Intersect(cohort3)\n      Jack\n    cohort2.Except(cohort3)\n      Stephen, Daniel, Jared\n    cohort1.Zip(cohort2)\n      Rachel matched with Jack, Gareth matched with Stephen, Jonathan matched with Daniel, George matched with Jack \n    ```", "```cs\n    static void WorkingWithIndices()\n    {\n      string[] theSeven = { \"Homelander\",\n        \"Black Noir\", \"The Deep\", \"A-Train\",\n        \"Queen Maeve\", \"Starlight\", \"Stormfront\" };\n      SectionTitle(\"Working With Indices (old)\");\n      foreach (var (item, index) in\n        theSeven.Select((item, index) => (item, index)))\n      {\n        WriteLine($\"{index}: {item}\");\n      }\n      SectionTitle(\"Working With Indices (new)\");\n      foreach (var (index, item) in theSeven.Index())\n      {\n        WriteLine($\"{index}: {item}\");\n      }\n    } \n    ```", "```cs\n    // WorkingWithSets();\n    WorkingWithIndices(); \n    ```", "```cs\n    *** Working With Indices (old) ***\n    0: Homelander\n    1: Black Noir\n    2: The Deep\n    3: A-Train\n    4: Queen Maeve\n    5: Starlight\n    6: Stormfront\n    *** Working With Indices (new) ***\n    0: Homelander\n    1: Black Noir\n    2: The Deep\n    3: A-Train\n    4: Queen Maeve\n    5: Starlight\n    6: Stormfront \n    ```", "```cs\n    <ItemGroup>\n      <!--To use SQLite-->\n      <PackageReference Version=\"9.0.0\"\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n      <!--To use SQL Server-->\n      <PackageReference Version=\"9.0.0\"\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\" />\n    </ItemGroup> \n    ```", "```cs\n    sqlite3 Northwind.db -init Northwind4Sqlite.sql \n    ```", "```cs\n     -- Loading resources from Northwind4Sqlite.sql\n    SQLite version 3.38.0 2022-02-22 15:20:15\n    Enter \".help\" for usage hints.\n    sqlite> \n    ```", "```cs\n    // To use [Required] and [StringLength].\n    using System.ComponentModel.DataAnnotations;\n    namespace Northwind.EntityModels;\n    public class Category\n    {\n      public int CategoryId { get; set; }\n      [Required]\n      [StringLength(15)]\n      public string CategoryName { get; set; } = null!;\n      public string? Description { get; set; }\n    } \n    ```", "```cs\n    // To use [Required] and [StringLength].\n    using System.ComponentModel.DataAnnotations;\n    // To use [Column].\n    using System.ComponentModel.DataAnnotations.Schema;\n    namespace Northwind.EntityModels;\n    public class Product\n    {\n      public int ProductId { get; set; }\n      [Required]\n      [StringLength(40)]\n      public string ProductName { get; set; } = null!;\n      public int? SupplierId { get; set; }\n      public int? CategoryId { get; set; }\n      [StringLength(20)]\n      public string? QuantityPerUnit { get; set; }\n      // Required for SQL Server provider.\n      [Column(TypeName = \"money\")]\n      public decimal? UnitPrice { get; set; }\n      public short? UnitsInStock { get; set; }\n      public short? UnitsOnOrder { get; set; }\n      public short? ReorderLevel { get; set; }\n      public bool Discontinued { get; set; }\n    } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnectionStringBuilder.\n    using Microsoft.EntityFrameworkCore; // To use DbContext, DbSet<T>.\n    namespace Northwind.EntityModels;\n    public class NorthwindDb : DbContext\n    {\n      public DbSet<Category> Categories { get; set; } = null!;\n      public DbSet<Product> Products { get; set; } = null!;\n      protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder)\n      {\n        #region To use SQLite\n        string database = \"Northwind.db\";\n        string dir = Environment.CurrentDirectory;\n        string path = string.Empty;\n        // The database file will stay in the project folder.\n        // We will automatically adjust the relative path to\n        // account for running in Visual Studio or CLI.\n        if (dir.EndsWith(\"net9.0\"))\n        {\n          // Running in the <project>\\bin\\<Debug|Release>\\net9.0 directory.\n          path = Path.Combine(\"..\", \"..\", \"..\", database);\n        }\n        else\n        {\n          // Running in the <project> directory.\n          path = database;\n        }\n        path = Path.GetFullPath(path); // Convert to absolute path.\n        WriteLine($\"SQLite database path: {path}\");\n        if (!File.Exists(path))\n        {\n          throw new FileNotFoundException(\n            message: $\"{path} not found.\", fileName: path);\n        }\n        // To use SQLite.\n        optionsBuilder.UseSqlite($\"Data Source={path}\");\n        #endregion\n        #region To use SQL Server\n        SqlConnectionStringBuilder builder = new();\n        builder.DataSource = \".\";\n        builder.InitialCatalog = \"Northwind\";\n        builder.IntegratedSecurity = true;\n        builder.Encrypt = true;\n        builder.TrustServerCertificate = true;\n        builder.MultipleActiveResultSets = true;\n        string connection = builder.ConnectionString;\n        // WriteLine($\"SQL Server connection: {connection}\");\n        // To use SQL Server.\n        // optionsBuilder.UseSqlServer(connection);\n        #endregion\n      }\n      protected override void OnModelCreating(\n        ModelBuilder modelBuilder)\n      {\n        if (Database.ProviderName is not null &&\n          Database.ProviderName.Contains(\"Sqlite\"))\n        {\n          // SQLite data provider does not directly support the\n          // decimal type so we can convert to double instead.\n          modelBuilder.Entity<Product>()\n            .Property(product => product.UnitPrice)\n            .HasConversion<double>();\n        }\n      }\n    } \n    ```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    partial class Program\n    {\n      private static void ConfigureConsole(string culture = \"en-US\",\n        bool useComputerCulture = false)\n      {\n        // To enable Unicode characters like Euro symbol in the console.\n        OutputEncoding = System.Text.Encoding.UTF8;\n        if (!useComputerCulture)\n        {\n          CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(culture);\n        }\n        WriteLine($\"CurrentCulture: {CultureInfo.CurrentCulture.DisplayName}\");\n      }\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title} ***\");\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use NorthwindDb, Category, Product.\n    using Microsoft.EntityFrameworkCore; // To use DbSet<T>.\n    partial class Program\n    {\n      private static void FilterAndSort()\n      {\n        SectionTitle(\"Filter and sort\");\n        using NorthwindDb db = new();\n        DbSet<Product> allProducts = db.Products;\n        IQueryable<Product> filteredProducts =\n          allProducts.Where(product => product.UnitPrice < 10M);\n        IOrderedQueryable<Product> sortedAndFilteredProducts =\n          filteredProducts.OrderByDescending(product => product.UnitPrice);\n        WriteLine(\"Products that cost less than $10:\");\n        foreach (Product p in sortedAndFilteredProducts)\n        {\n          WriteLine(\"{0}: {1} costs {2:$#,##0.00}\",\n            p.ProductId, p.ProductName, p.UnitPrice);\n        }\n        WriteLine();\n      }\n    } \n    ```", "```cs\n    ConfigureConsole(); // Sets US English by default.\n    FilterAndSort(); \n    ```", "```cs\n    CurrentCulture: English (United States)\n    *** Filter and sort ***\n    SQLite database path: C:\\cs13net9\\Chapter11\\LinqWithEFCore\\Northwind.db\n    Products that cost less than $10:\n    41: Jack's New England Clam Chowder costs $9.65\n    45: Rogede sild costs $9.50\n    47: Zaanse koeken costs $9.50\n    19: Teatime Chocolate Biscuits costs $9.20\n    23: Tunnbröd costs $9.00\n    75: Rhönbräu Klosterbier costs $7.75\n    54: Tourtière costs $7.45\n    52: Filo Mix costs $7.00\n    13: Konbu costs $6.00\n    24: Guaraná Fantástica costs $4.50\n    33: Geitost costs $2.50 \n    ```", "```cs\n    WriteLine(\"Products that cost less than $10:\");\n    **WriteLine(sortedAndFilteredProducts.ToQueryString());** \n    ```", "```cs\n    Products that cost less than $10:\n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"QuantityPerUnit\", \"p\".\"ReorderLevel\", \"p\".\"SupplierId\", \"p\".\"UnitPrice\", \"p\".\"UnitsInStock\", \"p\".\"UnitsOnOrder\"\n    FROM \"Products\" AS \"p\"\n    WHERE \"p\".\"UnitPrice\" < 10.0\n    ORDER BY \"p\".\"UnitPrice\" DESC\n    41: Jack's New England Clam Chowder costs $9.65\n    ... \n    ```", "```cs\n// Person.cs\npublic class Person\n{\n  public string Name { get; set; }\n  public DateTime DateOfBirth { get; set; }\n}\n// Program.cs\nPerson knownTypeObject = new()\n{\n  Name = \"Boris Johnson\",\n  DateOfBirth = new(year: 1964, month: 6, day: 19)\n}; \n```", "```cs\nvar anonymouslyTypedObject = new\n{\n  Name = \"Boris Johnson\",\n  DateOfBirth = new DateTime(year: 1964, month: 6, day: 19)\n}; \n```", "```cs\n    IOrderedQueryable<Product> sortedAndFilteredProducts =\n      filteredProducts.OrderByDescending(product => product.UnitPrice);\n    **var** **projectedProducts = sortedAndFilteredProducts**\n     **.Select(product =>** **new****// Anonymous type.**\n     **{**\n     **product.ProductId,**\n     **product.ProductName,**\n     **product.UnitPrice**\n     **});**\n    WriteLine(\"Products that cost less than $10:\");\n    WriteLine(**projectedProducts**.ToQueryString());\n    foreach (**var** p in **projectedProducts**)\n    { \n    ```", "```cs\n    SELECT \"p\".\"ProductId\", \"p\".\"ProductName\", \"p\".\"UnitPrice\"\n    FROM \"Products\" AS \"p\"\n    WHERE \"p\".\"UnitPrice\" < 10.0\n    ORDER BY \"p\".\"UnitPrice\" DESC \n    ```", "```cs\n    private static void JoinCategoriesAndProducts()\n    {\n      SectionTitle(\"Join categories and products\");\n      using NorthwindDb db = new();\n      // Join every product to its category to return 77 matches.\n      var queryJoin = db.Categories.Join(\n        inner: db.Products,\n        outerKeySelector: category => category.CategoryId,\n        innerKeySelector: product => product.CategoryId,\n        resultSelector: (c, p) =>\n          new { c.CategoryName, p.ProductName, p.ProductId });\n      foreach (var p in queryJoin)\n      {\n        WriteLine($\"{p.ProductId}: {p.ProductName} in {p.CategoryName}.\");\n      }\n    } \n    ```", "```cs\n    ConfigureConsole(); // Sets US English by default.\n    **//** FilterAndSort();\n    **JoinCategoriesAndProducts();** \n    ```", "```cs\n    1: Chai in Beverages.\n    2: Chang in Beverages.\n    3: Aniseed Syrup in Condiments.\n    4: Chef Anton's Cajun Seasoning in Condiments.\n    ... \n    ```", "```cs\n    var queryJoin = db.Categories.Join(\n      inner: db.Products,\n      outerKeySelector: category => category.CategoryId,\n      innerKeySelector: product => product.CategoryId,\n      resultSelector: (c, p) =>\n        new { c.CategoryName, p.ProductName, p.ProductId })\n      **.OrderBy(cp => cp.CategoryName)**; \n    ```", "```cs\n    1: Chai in Beverages.\n    2: Chang in Beverages.\n    24: Guaraná Fantástica in Beverages.\n    34: Sasquatch Ale in Beverages.\n    ... \n    ```", "```cs\n    private static void GroupJoinCategoriesAndProducts()\n    {\n      SectionTitle(\"Group join categories and products\");\n      using NorthwindDb db = new();\n      // Group all products by their category to return 8 matches.\n      var queryGroup = db.Categories.AsEnumerable().GroupJoin(\n        inner: db.Products,\n        outerKeySelector: category => category.CategoryId,\n        innerKeySelector: product => product.CategoryId,\n        resultSelector: (c, matchingProducts) => new\n        {\n          c.CategoryName,\n          Products = matchingProducts.OrderBy(p => p.ProductName)\n        });\n      foreach (var c in queryGroup)\n      {\n        WriteLine($\"{c.CategoryName} has {c.Products.Count()} products.\");\n        foreach (var product in c.Products)\n        {\n          WriteLine($\"  {product.ProductName}\");\n        }\n      }\n    } \n    ```", "```cs\nUnhandled exception. System.ArgumentException:  Argument type 'System.Linq.IOrderedQueryable`1[Packt.Shared.Product]' does not match the corresponding member type 'System.Linq.IOrderedEnumerable`1[Packt.Shared.Product]' (Parameter 'arguments[1]') \n```", "```cs\n    Beverages has 12 products.\n      Chai\n      Chang\n      ...\n    Condiments has 12 products.\n      Aniseed Syrup\n      Chef Anton's Cajun Seasoning\n      ... \n    ```", "```cs\nILookup<int, Product>? productsByCategoryId =\n  db.Products.ToLookup(keySelector: category => category.CategoryId); \n```", "```cs\n    private static void ProductsLookup()\n    {\n      SectionTitle(\"Products lookup\");\n      using NorthwindDb db = new();\n      // Join all products to their category to return 77 matches.\n      var productQuery = db.Categories.Join(\n        inner: db.Products,\n        outerKeySelector: category => category.CategoryId,\n        innerKeySelector: product => product.CategoryId,\n        resultSelector: (c, p) => new { c.CategoryName, Product = p });\n      ILookup<string, Product> productLookup = productQuery.ToLookup(\n        keySelector: cp => cp.CategoryName,\n        elementSelector: cp => cp.Product);\n      foreach (IGrouping<string, Product> group in productLookup)\n      {\n        // Key is Beverages, Condiments, and so on.\n        WriteLine($\"{group.Key} has {group.Count()} products.\");\n        foreach (Product product in group)\n        {\n          WriteLine($\" {product.ProductName}\");\n        }\n      }\n      // We can look up the products by a category name.\n      Write(\"Enter a category name: \");\n      string categoryName = ReadLine()!;\n      WriteLine();\n      WriteLine($\"Products in {categoryName}:\");\n      IEnumerable<Product> productsInCategory = productLookup[categoryName];\n      foreach (Product product in productsInCategory)\n      {\n        WriteLine($\"  {product.ProductName}\");\n      }\n    } \n    ```", "```cs\n    Beverages has 12 products.\n      Chai\n      Chang\n      ...\n    Condiments has 12 products.\n      Aniseed Syrup\n      Chef Anton's Cajun Seasoning\n      ...\n    Enter a category name: Seafood\n    Products in Seafood:\n      Ikura\n      Konbu\n      Carnarvon Tigers\n      Nord-Ost Matjeshering\n      Inlagd Sill\n      Gravad lax\n      Boston Crab Meat\n      Jack's New England Clam Chowder\n      Rogede sild\n      Spegesild\n      Escargots de Bourgogne\n      Röd Kaviar \n    ```", "```cs\nEnter the name of a city: London\nThere are 6 customers in London:\n  Around the Horn\n  B's Beverages\n  Consolidated Holdings\n  Eastern Connection\n  North/South\n  Seven Seas Imports \n```", "```cs\nAachen, Albuquerque, Anchorage, Århus, Barcelona, Barquisimeto, Bergamo, Berlin, Bern, Boise, Bräcke, Brandenburg, Bruxelles, Buenos Aires, Butte, Campinas, Caracas, Charleroi, Cork, Cowes, Cunewalde, Elgin, Eugene, Frankfurt a.M., Genève, Graz, Helsinki, I. de Margarita, Kirkland, Kobenhavn, Köln, Lander, Leipzig, Lille, Lisboa, London, Luleå, Lyon, Madrid, Mannheim, Marseille, México D.F., Montréal, München, Münster, Nantes, Oulu, Paris, Portland, Reggio Emilia, Reims, Resende, Rio de Janeiro, Salzburg, San Cristóbal, San Francisco, Sao Paulo, Seattle, Sevilla, Stavern, Strasbourg, Stuttgart, Torino, Toulouse, Tsawassen, Vancouver, Versailles, Walla Walla, Warszawa \n```"]