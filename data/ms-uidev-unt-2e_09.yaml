- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Exploring Automatic Layouts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索自动布局
- en: Now that we have the basics of manually positioning, scaling, and aligning UI
    elements with the Rect Transform and anchors, we can explore how to use automatic
    layouts. Automatic layouts allow you to group your UI elements so that they will
    position automatically relative to each other.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了使用Rect Transform和锚点手动定位、缩放和对齐UI元素的基础，我们可以探索如何使用自动布局。自动布局允许你将UI元素分组，以便它们相对于彼此自动定位。
- en: There are quite a few scenarios in which you will want Unity to automatically
    control the layout of your UI objects. If you are generating UI items via code
    and the number of items may change, but you still want them to line up, scale,
    and position properly, you can use automatic layouts. Also, if you want perfectly
    spaced UI objects, automatic layouts will help you create this perfect spacing
    without having to do any position calculating yourself. These automatic layouts
    work well for things like inventory systems aligned in a grid or list.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多场景中，你可能希望Unity自动控制你的UI对象的布局。如果你通过代码生成UI项目，并且项目数量可能会变化，但你仍然希望它们正确对齐、缩放和定位，你可以使用自动布局。此外，如果你想创建完美间隔的UI对象，自动布局将帮助你创建这种完美间隔，而无需自己进行任何位置计算。这些自动布局非常适合像网格或列表对齐的库存系统等。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Using Layout Group components to automatically space, position, and align a
    group of UI objects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布局组组件自动间隔、定位和对齐一组UI对象
- en: Using the Layout Element component, the Content Size Fitter component, and the
    Aspect Ratio Fitter component to resize UI elements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布局元素组件、内容大小适配器组件和纵横比适配器组件来调整UI元素的大小
- en: How to set up a horizontal HUD selection menu
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置水平HUD选择菜单
- en: How to set up a grid inventory
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置网格库存
- en: Note
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples shown in this section can be found within the Unity package
    named **Chapter 07****.unitypackage**, within the code bundle. Each example image
    has a caption stating the example number within the scene. In the scene, each
    example is on its own Canvas, and some of the Canvases are deactivated. To view
    an example on a deactivated Canvas, simply select the checkbox next to the Canvas’
    name in the **Inspector**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中展示的所有示例都可以在名为**Chapter 07**.unitypackage的Unity包中找到，在代码包中。每个示例图像都有一个说明示例编号的场景。在场景中，每个示例都在自己的Canvas上，其中一些Canvas已被禁用。要查看已禁用的Canvas上的示例，只需在**检查器**中选中Canvas名称旁边的复选框即可。
- en: '![](img/Figure_07.01_B18327.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_07.01_B18327.jpg)'
- en: 'Figure 7.1: The checkbox to enable or disable a Canvas example'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：启用或禁用Canvas示例的复选框
- en: Let’s explore the different types of Automatic Layout Groups.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索不同类型的自动布局组。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the relevant codes and asset files of this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2007](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2007)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此处找到本章的相关代码和资产文件：[https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2007](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2007)
- en: Types of automatic layout groups
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动布局组的类型
- en: 'When a UI object has an automatic layout group component attached to it, all
    of its children will be aligned, resized, and positioned based on the parameters
    of the layout component. There are three automatic layout group options: **Horizontal
    Layout Group**, **Vertical Layout Group**, and **Grid** **Layout Group**.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个UI对象附加了自动布局组组件时，其所有子对象都将根据布局组件的参数进行对齐、调整大小和定位。自动布局组有三个选项：**水平布局组**、**垂直布局组**和**网格布局组**。
- en: 'The following screenshot shows three Panels (represented by gray rectangles),
    each with six UI Image children (represented by the black rectangles); the first
    Panel has a Horizontal Layout Group component, the second Panel has a Vertical
    Layout Group component, and the third Panel has a Grid Layout Group component:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了三个面板（用灰色矩形表示），每个面板有六个UI图像子对象（用黑色矩形表示）；第一个面板有一个水平布局组组件，第二个面板有一个垂直布局组组件，第三个面板有一个网格布局组组件：
- en: '![Figure 7.2: Automatic Layout Groups Example 1 in the Chapter7 scene](img/Figure_07.02_B18327.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2：第7章场景中的自动布局组示例1](img/Figure_07.02_B18327.jpg)'
- en: 'Figure 7.2: Automatic Layout Groups Example 1 in the Chapter7 scene'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：第7章场景中的自动布局组示例1
- en: 'From the preceding screenshot, you can see clearly what the three types of
    automatic layout groups accomplish. You can use any combination of the three to
    create nested, perfectly spaced layouts, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图，你可以清楚地看到三种自动布局组能完成什么。你可以使用这三种类型的任意组合来创建嵌套、完美间距的布局，如下所示：
- en: '![Figure 7.3: Automatic Layout Groups Example 2 in the Chapter7 scene](img/Figure_07.03_B18327.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3：第7章场景中的自动布局组示例2](img/Figure_07.03_B18327.jpg)'
- en: 'Figure 7.3: Automatic Layout Groups Example 2 in the Chapter7 scene'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：第7章场景中的自动布局组示例2
- en: Let’s look at each of these layout groups individually and explore their various
    properties.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分别查看这些布局组，并探索它们的各个属性。
- en: Horizontal Layout Group
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 水平布局组
- en: All the children of a UI object with a **Horizontal Layout Group** component
    will be automatically placed side by side. If you allow the Horizontal Layout
    Group to resize the children, they will be positioned and scaled so that they
    are fully within the bounds of the parent object’s Rect Transform. Padding properties
    can be adjusted, however, if you’d like them to go outside the bounds of the parent’s
    Rect Transform.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 带有**水平布局组**组件的UI对象的全部子元素都将自动并排放置。如果你允许水平布局组调整子元素的大小，它们将被定位和缩放，以确保它们完全位于父对象矩形变换的范围内。然而，如果你希望它们超出父对象矩形变换的范围，可以调整填充属性。
- en: 'The order in which the children appear in the **Hierarchy** determines the
    order in which they will be laid out by the Horizontal Layout Group. The children
    will be laid out from left to right. The topmost child in the Hierarchy will be
    placed in the leftmost position, and the bottommost child in the Hierarchy will
    be placed in the rightmost position:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 子元素在**层次结构**中出现的顺序决定了水平布局组将按照什么顺序进行布局。子元素将从左到右进行布局。层次结构中最顶层的子元素将被放置在最左侧的位置，而层次结构中最底层的子元素将被放置在最右侧的位置：
- en: '![Figure 7.4: Horizontal Layout Groups Example 1 in the Chapter7 scene](img/Figure_07.04_B18327.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4：第7章场景中的水平布局组示例1](img/Figure_07.04_B18327.jpg)'
- en: 'Figure 7.4: Horizontal Layout Groups Example 1 in the Chapter7 scene'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：第7章场景中的水平布局组示例1
- en: 'To add a Horizontal Layout Group component to a UI object, select **Add Component**
    | **Layout** | **Horizontal Layout Group** from within the object’s **Inspector**.
    If you click on the arrow next to the **Padding** property, you should see the
    following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要将水平布局组组件添加到UI对象中，请从对象的**检查器**中选择**添加组件** | **布局** | **水平布局组**。如果你点击**填充**属性旁边的箭头，你应该看到以下内容：
- en: '![Figure 7.5: The Horizontal Layout Group component](img/Figure_07.05_B18327.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5：水平布局组组件](img/Figure_07.05_B18327.jpg)'
- en: 'Figure 7.5: The Horizontal Layout Group component'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：水平布局组组件
- en: Let’s explore each of the properties of the Horizontal Layout Group component
    further.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步探讨水平布局组组件的每个属性。
- en: Padding
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充
- en: The **Padding** property represents the padding around the edges of the parent
    object’s Rect Transform. Positive numbers will move the child objects inward,
    and negative numbers will move the child objects outward.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**填充**属性表示父对象矩形变换边缘的填充。正数将使子对象向内移动，而负数将使子对象向外移动。'
- en: '![Figure 7.6: Horizontal Layout Groups Example 2 in the Chapter7 scene](img/Figure_07.06_B18327.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6：第7章场景中的水平布局组示例2](img/Figure_07.06_B18327.jpg)'
- en: 'Figure 7.6: Horizontal Layout Groups Example 2 in the Chapter7 scene'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：第7章场景中的水平布局组示例2
- en: As an example, the previous screenshot shows three Panels with various padding
    values applied. The first Panel has no padding, the second Panel has positive
    padding on all four sides, and the third Panel has positive padding on the left,
    right, and bottom but negative padding on the top.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，前面的截图显示了三个应用了不同填充值的面板。第一个面板没有填充，第二个面板在所有四边都有正填充，而第三个面板在左侧、右侧和底部有正填充，但在顶部有负填充。
- en: Spacing
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 间距
- en: The **Spacing** property determines the horizontal spacing between the child
    objects. This may be overridden if you use the **Child Force Expand** property
    without the **Control Child Size** property, and the children may have larger
    spacing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**间距**属性确定子对象之间的水平间距。如果你在未使用**控制子元素大小**属性的情况下使用**子元素强制扩展**属性，则可能会覆盖此间距，子元素可能会有更大的间距。'
- en: Child Alignment
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子元素对齐
- en: 'The **Child Alignment** property determines where the group of children will
    be aligned. There are nine options for this property, as shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Child Alignment**属性决定了子元素组将如何对齐。此属性有九个选项，如下所示：'
- en: '![Figure 7.7: The Child Alignment options of the Horizontal Layout Group](img/Figure_07.07_B18327.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7：水平布局组的子元素对齐选项](img/Figure_07.07_B18327.jpg)'
- en: 'Figure 7.7: The Child Alignment options of the Horizontal Layout Group'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7：水平布局组的子元素对齐选项
- en: 'As an example, the following diagram shows three overlapping Panels that fill
    the screen. The Rect Transform area for these parent Panels is represented by
    the selected Rect Transform. The first Panel has an **Upper Left** Child Alignment.
    Its children are represented by the white squares. The second Panel has a **Middle
    Center** Child Alignment, and its children are represented by gray squares. The
    third Panel has a **Lower Right** Child Alignment, and its children are represented
    by black squares:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下图显示了三个重叠的Panel，它们填充了屏幕。这些父Panel的Rect Transform区域由选定的Rect Transform表示。第一个Panel具有**Upper
    Left**子元素对齐。其子元素由白色方块表示。第二个Panel具有**Middle Center**子元素对齐，其子元素由灰色方块表示。第三个Panel具有**Lower
    Right**子元素对齐，其子元素由黑色方块表示：
- en: '![Figure 7.8: Horizontal Layout Group Example 3 in the Chapter7 scene](img/Figure_07.08_B18327.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8：第7章场景中的水平布局组示例3](img/Figure_07.08_B18327.jpg)'
- en: 'Figure 7.8: Horizontal Layout Group Example 3 in the Chapter7 scene'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8：第7章场景中的水平布局组示例3
- en: It is important to note that the **Child Alignment** property only shows an
    effect if the children (along with spacing) don’t completely fill in the Rect
    Transform, as shown in the preceding diagram.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，**Child Alignment**属性只有在子元素（包括间距）没有完全填满Rect Transform时才会显示效果，如图所示。
- en: Reverse Arrangement
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反向排列
- en: The **Reverse Arrangement** property is a toggle. Selecting the toggle will
    cause the elements to arrange in the reverse order than they appear in the Hierarchy.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reverse Arrangement**属性是一个切换按钮。选择此切换按钮将导致元素以与它们在层次结构中出现的顺序相反的顺序排列。'
- en: Control Child Size
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制子元素大小
- en: The **Control Child Size** options allow the automatic layout to override the
    current **Width** or **Height** of the child objects. If you select these checkboxes
    without selecting the corresponding **Child Force Expand** checkboxes, your child
    objects will no longer be visible (unless the children have Layout Element components
    with **Preferred** **Width** specified).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Control Child Size**选项允许自动布局覆盖子对象的当前**宽度**或**高度**。如果您选择这些复选框而没有选择相应的**Child
    Force Expand**复选框，您的子对象将不再可见（除非子元素具有具有**首选****宽度**指定的Layout Element组件）。'
- en: If you do not set this property, it is possible that the children will draw
    outside of the parent’s Rect Transform – that is, if too many children exist.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有设置此属性，子元素可能会绘制在父元素的Rect Transform之外——也就是说，如果存在太多的子元素。
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This property changes the width and height property of the child objects’ Rect
    Transforms. So, if you select and then deselect it, the children will not go back
    to their original sizes. You will have to either use **Edit** | **Undo** (*Ctrl*
    + *Z*) or manually reset the size of the children via their Rect Transform components.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性更改子对象Rect Transforms的宽度和高度属性。因此，如果您选择然后取消选择它，子元素将不会回到它们原来的大小。您必须使用**编辑**
    | **撤销** (*Ctrl* + *Z*)或通过它们的Rect Transform组件手动重置子元素的大小。
- en: Since this property depends on the **Child Force Expand** property, examples
    of the **Control Child Size** property are presented in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此属性依赖于**Child Force Expand**属性，因此下一节将展示**Control Child Size**属性的示例。
- en: Child Force Expand
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子元素强制扩展
- en: The **Child Force Expand** property will cause the children to fill the available
    space. If the corresponding **Control Child Size** is not selected, this property
    will shift the children so that they and their spacing fill the space. This may
    override the **Spacing** property. If the corresponding **Control Child Size**
    is selected, it will stretch the children in the selected direction so that they
    and their spacing completely fill the space. This will maintain the **Spacing**
    property.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Child Force Expand**属性将导致子元素填充可用空间。如果未选择相应的**Control Child Size**，则此属性将移动子元素，使它们及其间距填充空间。这可能会覆盖**Spacing**属性。如果选择了相应的**Control
    Child Size**，它将在所选方向上拉伸子元素，使它们及其间距完全填充空间。这将保持**Spacing**属性。'
- en: 'In the following screenshot, all three Panels have a Horizontal Layout Group
    component with a **Middle Left** **Child Alignment** and different combinations
    of **Child Control Size** and **Child Force Expand** selected. The top Panel has
    only **Child Force Expand Width** selected, the middle Panel has **Control Child
    Size Width** and **Child Force Expand Width** selected, and the last Panel has
    both **Control Child Size** properties selected and both **Child Force Expand**
    properties selected:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，所有三个面板都有一个水平布局组组件，具有**中间左** **子级对齐**，并选择了不同的**子级控制大小**和**子级强制扩展**组合。顶部面板只选择了**子级强制扩展宽度**，中间面板选择了**控制子级大小宽度**和**子级强制扩展宽度**，最后一个面板选择了**控制子级大小**属性和**子级强制扩展**属性：
- en: '![Figure 7.9: Horizontal Layout Group Example 4 in the Chapter7 scene](img/Figure_07.09_B18327.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9：第7章场景中水平布局组示例4](img/Figure_07.09_B18327.jpg)'
- en: 'Figure 7.9: Horizontal Layout Group Example 4 in the Chapter7 scene'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9：第7章场景中水平布局组示例4
- en: Next, let’s look at the **Use Child** **Scale** properties.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看**使用子级** **缩放**属性。
- en: Use Child Scale
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用子级缩放
- en: The **Use Child Scale** properties are only available in recent versions of
    Unity. Checking this property will tell the Layout Group whether it should consider
    the scale of the children when automating the layout.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用子级缩放**属性仅在Unity的最新版本中可用。勾选此属性将告诉布局组是否在自动化布局时考虑子级的缩放。'
- en: Vertical Layout Group
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垂直布局组
- en: The **Vertical Layout Group** component works very similarly to the Horizontal
    Layout Group and has all the same properties, except children of a UI object with
    a Vertical Layout Group component will be automatically placed on top of each
    other, rather than side by side.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**垂直布局组**组件与水平布局组非常相似，具有所有相同的属性，但具有垂直布局组组件的UI对象的子级将自动堆叠在一起，而不是并排排列。'
- en: 'As with the Horizontal Layout Group, the order in which the children appear
    in the Hierarchy determines the order in which they will be laid out by the Vertical
    Layout Group. The children will be laid out from top to bottom in the same order
    in which they appear in the Hierarchy:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与水平布局组一样，子级在层次结构中出现的顺序决定了垂直布局组将按照什么顺序进行布局。子级将按照它们在层次结构中出现的顺序从上到下进行布局：
- en: '![Figure 7.10: Vertical Layout Group Example in the Chapter7 scene](img/Figure_07.10_B18327.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10：第7章场景中垂直布局组示例](img/Figure_07.10_B18327.jpg)'
- en: 'Figure 7.10: Vertical Layout Group Example in the Chapter7 scene'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10：第7章场景中垂直布局组示例
- en: 'To add a Vertical Layout Group component to a UI object, select **Add Component**
    | **Layout** | **Vertical Layout Group** from within the object’s Inspector. If
    you click on the arrow next to the **Padding** property, you should see the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要将垂直布局组组件添加到UI对象中，请从对象的检查器中选择**添加组件** | **布局** | **垂直布局组**。如果您单击**填充**属性旁边的箭头，您应该看到以下内容：
- en: '![Figure 7.11: The Vertical Layout Group component](img/Figure_07.11_B18327.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图7.11：垂直布局组组件](img/Figure_07.11_B18327.jpg)'
- en: 'Figure 7.11: The Vertical Layout Group component'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11：垂直布局组组件
- en: Since the properties of the Vertical Layout Group component are identical to
    those of the Horizontal Layout Group, we won’t explore each of the properties
    further. For an explanation of each of the properties, refer to the *Horizontal
    Layout* *Group* section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于垂直布局组组件的属性与水平布局组相同，我们不会进一步探讨每个属性的细节。有关每个属性的说明，请参阅*水平布局* *组*部分。
- en: Grid Layout Group
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网格布局组
- en: The **Grid Layout Group** component allows you to organize child objects in
    columns and rows in (you guessed it) a grid layout. It works similarly to Horizontal
    and Vertical Layout Groups but has a few more properties that can be manipulated.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格布局组**组件允许您在（你猜对了）网格布局中按列和行组织子对象。它的工作方式与水平和垂直布局组类似，但有一些可以操作的额外属性。'
- en: 'To add a Grid Layout Group component to a UI object, select **Add Component**
    | **Layout** | **Grid Layout Group** from within the object’s Inspector. If you
    click on the arrow next to the **Padding** property, you should see the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要将网格布局组组件添加到UI对象中，请从对象的检查器中选择**添加组件** | **布局** | **网格布局组**。如果您单击**填充**属性旁边的箭头，您应该看到以下内容：
- en: '![Figure 7.12: The Grid Layout Group component](img/Figure_07.12_B18327.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12：网格布局组组件](img/Figure_07.12_B18327.jpg)'
- en: 'Figure 7.12: The Grid Layout Group component'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：网格布局组组件
- en: A few of the properties of the Grid Layout Group are the same as the other two
    Layout Groups, but let’s look more closely at the properties unique to the Grid
    Layout Group component.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 网格布局组的某些属性与其他两个布局组相同，但让我们更仔细地看看网格布局组组件特有的属性。
- en: Cell Size
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元大小
- en: Unlike the Horizontal and Vertical Layout Groups, which determine the size of
    the children either by their Rect Transform component or by scaling them to fit
    inside the parent’s Rect Transform, the Grid Layout Group requires you to specify
    the width and height of the child objects. You accomplish this by setting the
    **X** and **Y** properties of the **Cell Size** property. This will automatically
    apply the specified **X** and **Y** sizes to each of the children’s **Width**
    and **Height** properties of their Rect Transform, respectively.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与水平和垂直布局组不同，它们通过其矩形变换组件确定子元素的大小，或者通过缩放使其适合父级的矩形变换，网格布局组要求您指定子对象的高度和宽度。您通过设置**单元大小**属性的**X**和**Y**属性来完成此操作。这将自动将指定的**X**和**Y**大小应用到每个子元素的矩形变换的**宽度**和**高度**属性。
- en: Due to the **Cell Size** property and the lack of a **Control Child** size property,
    the children are not guaranteed to fit within the parent’s Rect Transform. If
    too many children exist, it is possible they will be drawn outside the parent’s
    Rect Transform. So, if you have a grid filling up dynamically that can change
    throughout the gameplay and want the grid to always fit within a specific area,
    you will have to prepare for that overflow scenario.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**单元大小**属性和缺少**控制子元素大小**属性，子元素不一定能适合父级的矩形变换。如果存在太多的子元素，它们可能会被绘制在父级矩形变换之外。因此，如果您有一个动态填充的网格，在游戏过程中可能会改变，并且希望网格始终适合特定区域，您将必须为该溢出场景做好准备。
- en: The Grid Layout Group allows you to specify both an **X Spacing** and **Y Spacing**.
    The **X Spacing** is the horizontal spacing, and the **Y Spacing** is the vertical
    spacing. These values will not be overridden by further property choices as they
    can be with the Horizontal and Vertical Layout Groups.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 网格布局组允许您指定**X间距**和**Y间距**。**X间距**是水平间距，**Y间距**是垂直间距。这些值不会被进一步的属性选择覆盖，就像在水平和垂直布局组中那样。
- en: Start Corner and Start Axis
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 起始角和起始轴
- en: 'The **Start Corner** property determines where the very first child in the
    Hierarchy will be placed. There are four choices for the **Start Corner** property,
    as shown here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**起始角**属性决定了层次结构中第一个子元素的位置。**起始角**属性有四个选择，如下所示：'
- en: '![Figure 7.13: The Start Corner options of a Grid Layout Group component](img/Figure_07.13_B18327.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图7.13：网格布局组组件的起始角选项](img/Figure_07.13_B18327.jpg)'
- en: 'Figure 7.13: The Start Corner options of a Grid Layout Group component'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13：网格布局组组件的起始角选项
- en: 'The **Start Axis** property determines where all the other children will be
    placed relative to the first child. There are two options, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**起始轴**属性决定了所有其他子元素相对于第一个子元素的位置。有两个选项，如下所示：'
- en: '![Figure 7.14: The Start Axis options of a Grid Layout Group component](img/Figure_07.14_B18327.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图7.14：网格布局组组件的起始轴选项](img/Figure_07.14_B18327.jpg)'
- en: 'Figure 7.14: The Start Axis options of a Grid Layout Group component'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14：网格布局组组件的起始轴选项
- en: A **Start Axis** property set to **Horizontal** means that the children will
    be laid out, starting with the first child, in a horizontal fashion. If the **Start
    Corner** is assigned to one of the **Left** options, the children will be placed
    from left to right. If the **Start Corner** is assigned to one of the **Right**
    options, the children will be placed from right to left. Once the new row is filled,
    it will continue to the next row and will restart on the same side as the **Start
    Corner**. If the **Start Corner** is one of the Upper options, the rows will continue
    downward. If the **Start Corner** is one of the Lower options, the rows will continue
    upward.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将**起始轴**属性设置为**水平**意味着子元素将从第一个子元素开始，以水平方式排列。如果将**起始角**分配给**左**选项之一，子元素将从左到右排列。如果将**起始角**分配给**右**选项之一，子元素将从右到左排列。一旦新行被填满，它将继续到下一行，并将在与**起始角**相同的侧重新开始。如果**起始角**是**上**选项之一，行将继续向下。如果**起始角**是**下**选项之一，行将继续向上。
- en: 'The following screenshot demonstrates the flow of the children, with a **Horizontal
    Start Axis** based on the different **Start** **Corner** options:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图演示了基于不同的**起始****角**选项的子对象流动，基于**水平起始轴**：
- en: '![Figure 7.15: Grid Layout Group Example 1 in the Chapter7 scene](img/Figure_07.15_B18327.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图7.15：第7章场景中的网格布局组示例1](img/Figure_07.15_B18327.jpg)'
- en: 'Figure 7.15: Grid Layout Group Example 1 in the Chapter7 scene'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15：第7章场景中的网格布局组示例1
- en: A **Start Axis** property set to **Vertical** means that the children will be
    laid out starting with the first child, and then in a vertical fashion. Whether
    the children will be placed from top to bottom or from bottom to top is determined
    in the same way as it is when this property is set to **Horizontal**, based on
    the position of the **Start Corner**. Then, when a column is filled, the children
    will be placed from left to right or from right to left, based on the position
    of the **Start Corner**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将**起始轴**属性设置为**垂直**意味着子对象将从第一个子对象开始布局，然后以垂直方式排列。子对象是自上而下还是自下而上放置，与将此属性设置为**水平**时的方式相同，取决于**起始角**的位置。然后，当一列被填满时，子对象将根据**起始角**的位置从左到右或从右到左放置。
- en: 'The following screenshot demonstrates the flow of the children, with a **Vertical
    Start Axis** based on the different **Start** **Corner** options:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图演示了基于不同的**起始****角**选项的子对象流动，基于**垂直起始轴**：
- en: '![Figure 7.16: Grid Layout Group Example 2 in the Chapter7 scene](img/Figure_07.16_B18327.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图7.16：第7章场景中的网格布局组示例2](img/Figure_07.16_B18327.jpg)'
- en: 'Figure 7.16: Grid Layout Group Example 2 in the Chapter7 scene'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16：第7章场景中的网格布局组示例2
- en: As you can see, the **Start Corner** and **Start Axis** options can greatly
    change the order in which your child objects are displayed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，**起始角**和**起始轴**选项可以大大改变您的子对象显示的顺序。
- en: Constraint
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 约束
- en: 'The **Constraint** property allows you to specify the number of rows or columns
    the grid will have. There are three options, as shown here:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**约束**属性允许您指定网格将有多少行或列。这里有三种选项，如下所示：'
- en: '![Figure 7.17: The Constraint options of a Grid Layout Group component](img/Figure_07.17_B18327.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图7.17：网格布局组组件的约束选项](img/Figure_07.17_B18327.jpg)'
- en: 'Figure 7.17: The Constraint options of a Grid Layout Group component'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17：网格布局组组件的约束选项
- en: The **Fixed Column Count** and **Fixed Row Count** properties allow you to specify
    a number of columns or rows, respectively. If you select either of these options,
    a new property, **Constraint Count**, will become available. You then specify
    how many columns or rows you want. When you select **Fixed Column Count**, the
    number of rows will be variable. When you select **Fixed Row Count**, the number
    of columns will be variable.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**固定列数**和**固定行数**属性允许您分别指定列数或行数。如果您选择这两个选项中的任何一个，将出现一个新的属性，**约束计数**。然后您指定您想要的列数或行数。当您选择**固定列数**时，行数将是可变的。当您选择**固定行数**时，列数将是可变的。'
- en: The **Flexible** option automatically calculates the number of rows and columns
    for you, based on the **Cell Size** and the **Start Axis** options chosen. It
    will begin laying out the children in the defined pattern until there is no space
    left on the chosen axis. It will then continue. Whichever axis is specified in
    **Start Axis** will have a fixed amount of children, and the other axis will be
    variable. So, for example, if **Start Axis** is set to **Horizontal** and three
    children can fit horizontally within the defined space, there will be three columns,
    and the number of rows will be determined by how many total children there are.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**灵活**选项会根据您选择的**单元格大小**和**起始轴**选项自动计算行数和列数。它将开始以定义的模式布局子对象，直到所选轴上没有空间为止。然后它将继续。**起始轴**中指定的轴将有固定数量的子对象，而另一个轴将是可变的。例如，如果**起始轴**设置为**水平**，并且三个子对象可以在定义的空间内水平放置，则将有三列，行数将由总子对象的数量决定。'
- en: Now that we’ve explored the three Automatic Layout Groups, let’s look at a component
    that will let us change the way the children within these layout groups will be
    sized or positioned.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了三个自动布局组，让我们看看一个组件，它将允许我们改变这些布局组内子对象的大小或位置。
- en: Layout Element
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局元素
- en: The **Layout Element** component allows us to specify a range of size values
    of an object if it is being sized with an automatic layout. If the parent object
    tries to size it outside of these preferences, the Layout Element will override
    any sizing information being sent from the parent object.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局元素**组件允许我们指定对象在自动调整大小时的尺寸值范围。如果父对象尝试超出这些偏好设置调整其大小，布局元素将覆盖来自父对象的所有尺寸信息。'
- en: 'To add a **Layout Element** component to a UI object, select **Add Component**
    | **Layout** | **Layout Element** from within the object’s **Inspector**. The
    **Layout Element** has the following properties:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要将**布局元素**组件添加到UI对象，请从对象的**检查器**中选择**添加组件** | **布局** | **布局元素**。**布局元素**具有以下属性：
- en: '![Figure 7.18: The Layout Element component](img/Figure_07.18_B18327.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图7.18：布局元素组件](img/Figure_07.18_B18327.jpg)'
- en: 'Figure 7.18: The Layout Element component'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18：布局元素组件
- en: 'To use these properties, you first select their checkboxes to enable them;
    boxes will become available so that you can enter your desired values:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些属性，您首先选择它们的复选框以启用它们；将出现框供您输入所需值：
- en: '![Figure 7.19: Setting the properties of the Layout Element component](img/Figure_07.19_B18327.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图7.19：设置布局元素组件的属性](img/Figure_07.19_B18327.jpg)'
- en: 'Figure 7.19: Setting the properties of the Layout Element component'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19：设置布局元素组件的属性
- en: Let’s review how the individual properties of the Layout Element component will
    affect the elements to which they are added.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下布局元素组件的各个属性将如何影响它们所添加的元素。
- en: Ignore Layout
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忽略布局
- en: The **Ignore Layout** property can be used to make child objects ignore any
    automatic layout component of its parent object. A child with this property selected
    can be moved and resized freely, and all other children will be laid out without
    regard for the ignored child.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**忽略布局**属性可用于使子对象忽略其父对象的任何自动布局组件。具有此属性选中的子对象可以自由移动和调整大小，而其他所有子对象都将不考虑被忽略的子对象进行布局。'
- en: 'In the following example, the Panel has a **Horizontal Layout Group** component
    and five child objects. The first child, labeled with a 1, has a **Layout Element**
    component with the **Ignore Layout** property selected:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，面板具有**水平布局组**组件和五个子对象。第一个子对象，标记为1，具有具有**忽略布局**属性选中的**布局元素**组件：
- en: '![Figure 7.20: Layout Element Example 1 in the Chapter7 scene](img/Figure_07.20_B18327.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图7.20：第7章场景中的布局元素示例1](img/Figure_07.20_B18327.jpg)'
- en: 'Figure 7.20: Layout Element Example 1 in the Chapter7 scene'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20：第7章场景中的布局元素示例1
- en: You can see that since the **Ignore Layout** property is selected for the first
    child; it can be moved around outside of the parent Panel, and it was ignored
    when the position and scale of the other children were determined. It also maintained
    its original Rect Transform scale.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，由于第一个子对象选择了**忽略布局**属性，它可以被移动到父面板之外，并且在确定其他子对象的位置和缩放时被忽略。它还保持了其原始的矩形变换缩放。
- en: If the **Ignore Layout** property is deselected, the first child will be added
    to the Horizontal Layout Group with the other children.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果取消选择**忽略布局**属性，第一个子对象将与其他子对象一起添加到水平布局组中。
- en: The Width and Height properties
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宽度和高度属性
- en: The **Layout Element** component has three sets of properties that can be used
    to specify the way you want an object to resize. These properties will override
    the size being assigned to the child by the parent object if the assigned size
    is outside of the provided values.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局元素**组件有三组属性，可用于指定对象如何调整大小。如果分配的大小超出了提供的值，这些属性将覆盖父对象分配给子对象的大小。'
- en: Note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that these properties will not override the **Cell Size**
    settings of the Grid Layout Group component. *They will have no effect on a child
    within a Grid* *Layout Group.*
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，这些属性不会覆盖网格布局组组件的**单元格大小**设置。*它们对网格布局组内的子对象没有任何影响*。
- en: Min Width and Height
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小宽度和高度
- en: The **Min Width** and **Min Height** properties are the minimum width and height
    a child object can achieve. If the parent object is scaled down, the child will
    scale down until it meets its **Min Width** or **Min Height**. Once it does so,
    it will no longer scale in that direction.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**最小宽度**和**最小高度**属性是子对象可以达到的最小宽度和高度。如果父对象缩小，子对象将缩小，直到达到其**最小宽度**或**最小高度**。一旦达到，它将不再在该方向上缩放。'
- en: 'In the following diagram, the Panel has a **Horizontal Layout Group** component
    and five child objects. The first child, labeled with a 1, has a **Layout Element**
    component with the **Min Width** and **Min Height** properties set:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，面板包含一个**水平布局组**组件和五个子对象。第一个子对象，标记为1，有一个设置了**最小宽度**和**最小高度**属性的**布局元素**组件：
- en: '![Figure 7.21: Layout Element Example 2 in the Chapter7 scene](img/Figure_07.21_B18327.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图7.21：第7章场景中的布局元素示例2](img/Figure_07.21_B18327.jpg)'
- en: 'Figure 7.21: Layout Element Example 2 in the Chapter7 scene'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21：第7章场景中的布局元素示例2
- en: You can see that the parent object’s **Horizontal Layout Group** tried to scale
    all the children down with it as it scaled down itself. The other four children
    scaled, but since the first child had a **Min Width** and **Min Height** properties
    set, it refused to scale down any further.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，当父对象的自定义布局组缩放时，它试图将所有子对象与其一起缩放。其他四个子对象也进行了缩放，但由于第一个子对象设置了**最小宽度**和**最小高度**属性，它拒绝进一步缩放。
- en: Preferred Width and Preferred Height
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优先宽度和优先高度
- en: The **Preferred Width** and **Preferred Height** properties are a little confusing
    because they perform differently, depending on the settings you have for the parent’s
    layout group. There is no official **Max Width** and **Max Height** setting, despite
    there being a **Min Width** and **Min Height** setting. The **Preferred Width**
    and **Preferred Height** properties, however, can be used to specify the maximum
    size the child object will achieve, but only if the correct settings on the parent’s
    layout group are selected.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**优先宽度**和**优先高度**属性有些令人困惑，因为它们的性能取决于您为父布局组设置的配置。尽管存在**最小宽度**和**最小高度**设置，但没有官方的**最大宽度**和**最大高度**设置。然而，**优先宽度**和**优先高度**属性可以用来指定子对象将达到的最大尺寸，但前提是在父布局组上选择了正确的设置。'
- en: 'The following diagram contains three Panels with **Vertical Layout Group**
    components and various settings. Their children also have various settings for
    **Preferred Height** within a **Layout** **Element** component:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图中包含三个带有**垂直布局组**组件的面板和不同的设置。它们的子元素在**布局** **元素**组件内也有不同的**优先高度**设置：
- en: '![Figure 7.22: Layout Element Example 3 in the Chapter7 scene](img/Figure_07.22_B18327.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图7.22：第7章场景中的布局元素示例3](img/Figure_07.22_B18327.jpg)'
- en: 'Figure 7.22: Layout Element Example 3 in the Chapter7 scene'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22：第7章场景中的布局元素示例3
- en: The first parent Panel has a **Vertical Layout Group** component with **Control
    Child Size Width** and **Height** selected, as well as **Child Force Expand**’s
    **Width** and **Height**. None of its children have a **Preferred Width** or **Preferred
    Height** setting within a **Layout Element** component. The first Panel will act
    as the default for reference when comparing the others.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个父面板有一个带有**控制子大小宽度**和**高度**选择的**垂直布局组**组件，以及**子强制扩展**的**宽度**和**高度**。它没有任何子对象在**布局元素**组件内有**优先宽度**或**优先高度**设置。第一个面板将在比较其他面板时作为默认参考。
- en: The second parent Panel has the same properties as the first – a `100` within
    a **Layout** **Element** component.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个父面板具有与第一个相同的属性——在**布局** **元素**组件中有一个`100`。
- en: You can see that because the second parent Panel has `100` in the `100` units
    taller than the other four children. So, when the **Child Force Expand** property
    is selected on the parent, the child with the **Preferred Height** will not use
    **Preferred Height** as its maximum possible height; it will add that value to
    the height assigned by the parent’s layout group component.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，由于第二个父面板比其他四个子对象高`100`单位，所以当在父上选择**子强制扩展**属性时，具有**优先高度**的子对象不会使用**优先高度**作为其最大可能高度；它将此值添加到由父布局组组件分配的高度。
- en: The third Panel has a `100` within a **Layout** **Element** component.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个面板在**布局** **元素**组件中包含一个`100`。
- en: If you compare the children in the third Panel to the children in the first
    Panel (the default), you can see that the children are shorter. This is because
    their **Preferred Height** is set to a smaller number than the height that the
    Vertical Layout Group component attempts to assign to them. So, when the **Child
    Force Expand**’s **Height** property is deselected, the children will use their
    **Preferred Height** setting in the expected way – making it the maximum size
    the children should attain.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将第三面板的子组件与第一面板（默认）的子组件进行比较，您会发现子组件更短。这是因为它们的**首选高度**设置比垂直布局组组件尝试分配给它们的高度小。因此，当取消选中**子强制扩展**的**高度**属性时，子组件将按预期使用它们的**首选高度**设置，使其成为子组件应达到的最大尺寸。
- en: Therefore, if you want the **Preferred Width** or **Preferred Height** settings
    to work as a maximum attainable width or height, you will need to deselect the
    corresponding **Child Force Expand** property on the parent object.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您希望**首选宽度**或**首选高度**设置作为可达到的最大宽度和高度，您需要在父对象上取消选中相应的**子强制扩展**属性。
- en: Flexible Width and Flexible Height
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弹性宽度和弹性高度
- en: The **Flexible Width** and **Flexible Height** properties represent a percentage,
    where the percentage is the size of the child relative to the other children.
    Since these values are percentages, a value of 0 would represent 0% and a value
    of 1 would represent 100%.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**弹性宽度**和**弹性高度**属性表示一个百分比，其中百分比是子组件相对于其他子组件的大小。由于这些值是百分比，因此值为0表示0%，值为1表示100%。'
- en: 'As with **Preferred Width** and **Preferred Height**, this setting doesn’t
    work as expected unless the **Child Force Expand** property is deselected. In
    the following example, the two Panels and children have nearly identical settings.
    The only difference between the two is that the top parent Panel has **Child Force
    Expand**’s **Width** property selected and the bottom parent Panel does not. So,
    you can see that the values set for **Flexible Width** of the children are ignored
    if **Child Force Expand**’s **Width** is selected on the parent:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与**首选宽度**和**首选高度**类似，除非取消选中**子强制扩展**属性，否则此设置不会按预期工作。在以下示例中，两个面板及其子组件的设置几乎完全相同。两者之间的唯一区别是，顶部父面板选中了**子强制扩展**的**宽度**属性，而底部父面板则没有。因此，如果父组件上选中了**子强制扩展**的**宽度**，则子组件的**弹性宽度**设置将被忽略：
- en: '![Figure 7.23: Layout Element Example 4 in the Chapter7 scene](img/Figure_07.23_B18327.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图7.23：第7章场景中的布局元素示例4](img/Figure_07.23_B18327.jpg)'
- en: 'Figure 7.23: Layout Element Example 4 in the Chapter7 scene'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23：第7章场景中的布局元素示例4
- en: The children in the second row of the preceding figure have the following `0`,
    `0.5`, `0.75`, `1`, and `1.5`. You can see that the children have scaled relative
    to each other based on the percentages. The first child is not visible because
    it has a `0`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 前一图第二行的子组件具有以下`0`、`0.5`、`0.75`、`1`和`1.5`。您可以看到，子组件是相对于彼此按百分比缩放的。第一个子组件不可见，因为它设置了`0`。
- en: The Layout Element component essentially lets us override the automatic size
    and position of an element. Now, let’s review some components that will allow
    us to automatically size UI elements.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 布局元素组件基本上允许我们覆盖元素的自动大小和位置。现在，让我们回顾一些组件，这些组件将允许我们自动调整UI元素的大小。
- en: Fitters
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配器
- en: There are two fitter layout components. These components make the Rect Transform
    of the object on which they are attached fit within a specified area.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个适配器布局组件。这些组件使它们附加的对象的矩形变换适应指定的区域。
- en: Content Size Fitter
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容大小适配器
- en: The **Content Size Fitter** component allows you to force the size of the parent
    to fit around the size of its children. This fitting can be based on the minimum
    or preferred size of the children.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容大小适配器**组件允许您强制父组件的大小适应其子组件的大小。这种适配可以基于子组件的最小或首选大小。'
- en: 'To add a **Content Size Fitter** component to a UI object, select **Add Component**
    | **Layout** | **Content Size Fitter** from within the object’s **Inspector**.
    The **Content Size Fitter** component has the following properties:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要将**内容大小适配器**组件添加到UI对象中，请从对象的**检查器**中选择**添加组件** | **布局** | **内容大小适配器**。**内容大小适配器**组件具有以下属性：
- en: '![Figure 7.24: The Content Size Fitter component](img/Figure_07.24_B18327.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图7.24：内容大小适配器组件](img/Figure_07.24_B18327.jpg)'
- en: 'Figure 7.24: The Content Size Fitter component'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24：内容大小适配器组件
- en: 'You can choose the following properties for the **Horizontal Fit** and the
    **Vertical Fit**:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为**水平适配**和**垂直适配**选择以下属性：
- en: '![Figure 7.25: The possible fit options of the Content Size Fitter component](img/Figure_07.25_B18327.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图7.25：内容大小适配器组件的可能适配选项](img/Figure_07.25_B18327.jpg)'
- en: 'Figure 7.25: The possible fit options of the Content Size Fitter component'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25：内容大小适配器组件的可能适配选项
- en: If the **Unconstrained** property is selected, **Content Size Fitter** will
    not adjust the size of the object along that axis.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**无约束**属性，则**内容大小适配器**将不会调整对象沿该轴的大小。
- en: If the **Min Size** property is selected, the **Content Size Fitter** will adjust
    the size of the object based on the minimum size of the children. This minimum
    size is determined by the **Min Width** and **Min Height** properties of the **Layout
    Element** component of the children.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**最小大小**属性，则**内容大小适配器**将根据子组件的最小大小调整对象的大小。此最小大小由子组件的**布局元素**组件的**最小宽度**和**最小高度**属性确定。
- en: 'The children do not have to have a **Layout Element** component if the parent
    has a **Grid Layout Group** component for this property to work. If this property
    is selected for an object with a **Grid Layout Group** component, the Rect Transform
    of the parent will hug the children based on the **Cell Size** and **Padding**
    properties, as shown in the following diagram:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果父组件具有用于此属性的**网格布局组**组件，则子组件不需要有**布局元素**组件。如果为此具有**网格布局组**组件的对象选择此属性，则父组件的矩形变换将根据**单元格大小**和**填充**属性来适应子组件，如下所示：
- en: '![Figure 7.26: The Content Size Fitter Example in the Chapter7 scene](img/Figure_07.26_B18327.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图7.26：第7章场景中的内容大小适配器示例](img/Figure_07.26_B18327.jpg)'
- en: 'Figure 7.26: The Content Size Fitter Example in the Chapter7 scene'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26：第7章场景中的内容大小适配器示例
- en: If the **Preferred Size** property is selected, the **Content Size Fitter**
    will adjust the size of the object based on the preferred size of the children.
    This preferred size is determined by the **Preferred Width** and **Preferred Height**
    properties of the **Layout Element** component of the children. If the object
    has a **Grid Layout Group** component, this setting will perform in the exact
    same way as **Min Size**.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**首选大小**属性，则**内容大小适配器**将根据子组件的首选大小调整对象的大小。此首选大小由子组件的**布局元素**组件的**首选宽度**和**首选高度**属性确定。如果对象具有**网格布局组**组件，此设置将按与**最小大小**完全相同的方式执行。
- en: Aspect Ratio Fitter
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**纵横比适配器**'
- en: The **Aspect Ratio Fitter** component works similarly to the **Layout Element**
    component, as it allows you to override the size constraints being sent to it.
    It will force the UI object on which it is attached to resize based on an aspect
    ratio.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**纵横比适配器**组件与**布局元素**组件类似工作，因为它允许您覆盖发送给它的尺寸约束。它将强制附加到其上的UI对象根据纵横比进行缩放。'
- en: 'To add an **Aspect Ratio Fitter** component to a UI object, select **Add Component**
    | **Layout** | **Aspect Ratio Fitter (Script)** from within the object’s **Inspector**.
    The **Aspect Ratio Fitter** component has the following properties:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要将**纵横比适配器**组件添加到UI对象中，请从对象的**检查器**中选择**添加组件** | **布局** | **纵横比适配器（脚本）**。**纵横比适配器**组件具有以下属性：
- en: '![Figure 7.27: The Aspect Ratio Fitter component](img/Figure_07.27_B18327.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图7.27：纵横比适配器组件](img/Figure_07.27_B18327.jpg)'
- en: 'Figure 7.27: The Aspect Ratio Fitter component'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27：纵横比适配器组件
- en: 'Once you select an **Aspect Mode** option, the **Aspect Ratio** property will
    be editable. The **Aspect Ratio** property defines the aspect ratio that the Rect
    Transform will maintain. For example, if you want an aspect ratio of 4:3, you
    can simply enter 4/3 in the box, and it will convert it to the decimal value:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了一个**纵横比模式**选项，**纵横比**属性将是可编辑的。**纵横比**属性定义了矩形变换将保持的纵横比。例如，如果您想要4:3的纵横比，您只需在框中输入4/3，它将转换为小数值：
- en: '![Figure 7.28: Entering fractions into an Aspect Ratio Fitter Component](img/Figure_07.28_B18327.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图7.28：将分数输入到纵横比适配器组件中](img/Figure_07.28_B18327.jpg)'
- en: 'Figure 7.28: Entering fractions into an Aspect Ratio Fitter Component'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28：将分数输入到纵横比适配器组件中
- en: 'You can choose the following properties for the **Aspect** **Mode** property:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为**纵横比模式**属性选择以下属性：
- en: '![Figure 7.29: The Aspect Mode options for the Aspect Ratio Fitter component](img/Figure_07.29_B18327.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图7.29：纵横比适配器组件的纵横比模式选项](img/Figure_07.29_B18327.jpg)'
- en: 'Figure 7.29: The Aspect Mode options for the Aspect Ratio Fitter component'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.29：宽高比适配器组件的宽高比模式选项
- en: If the **None** property is selected, the **Aspect Ratio Fitter** will not adjust
    the size to fit within the **Aspect Ratio**.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了**无**属性，**宽高比适配器**将不会调整尺寸以适应**宽高比**。
- en: If the **Width Controls Height** property is selected, the **Aspect Ratio Fitter**
    will adjust the size of the height based on the width of the object.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了**宽度控制高度**属性，**宽高比适配器**将根据对象的宽度调整高度的尺寸。
- en: If the **Height Controls Width** property is selected, the **Aspect Ratio Fitter**
    will adjust the size of the width based on the height of the object.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了**高度控制宽度**属性，**宽高比适配器**将根据对象的高度调整宽度的尺寸。
- en: If the **Fit In Parent** property is selected, the **Aspect Ratio Fitter** will
    adjust the size of the object to fit within its parent object but will maintain
    the **Aspect Ratio**. This will make the child object stay within the bounds of
    the parent.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了**适应父对象**属性，**宽高比适配器**将调整对象的尺寸以适应其父对象，但将保持**宽高比**。这将使子对象保持在父对象的边界内。
- en: If the **Envelope Parent** property is selected, the **Aspect Ratio Fitter**
    will adjust the size of the object to cover its parent object but will maintain
    the **Aspect Ratio**. This is similar to the **Fit In Parent** property, except
    that instead of staying within the bounds of the parent, it can go outside the
    bounds.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了**包裹父对象**属性，**宽高比适配器**将调整对象的尺寸以覆盖其父对象，但将保持**宽高比**。这与**适应父对象**属性类似，但不同之处在于，它不仅可以保持在父对象的边界内，还可以超出边界。
- en: 'If you try to add an **Aspect Ratio Fitter** component to a child with a parent
    that has a layout group component, you’ll see the following message on the child:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试将一个**宽高比适配器**组件添加到一个父组件包含布局组组件的子组件中，您将在子组件上看到以下消息：
- en: '![Figure 7.30: The Aspect Ratio Fitter warning message](img/B18327_07_30.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图7.30：宽高比适配器警告消息](img/B18327_07_30.png)'
- en: 'Figure 7.30: The Aspect Ratio Fitter warning message'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.30：宽高比适配器警告消息
- en: 'While you can ignore this message and do it anyway, it doesn’t work entirely
    as expected. The recommended workaround is to add the **Aspect Ratio Fitter**
    component to a child of the child within the group. For example, in the following
    diagram, a Panel was added as a child of the **Horizontal Layout Group**. Then,
    a child with an **Aspect Ratio Fitter** component was added to the Panel so that
    the child could have the 4:3 **Aspect Ratio**:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以忽略此消息并继续操作，但它并不完全按预期工作。推荐的解决方案是在组内的子组件的子组件中添加**宽高比适配器**组件。例如，在以下图中，一个面板被添加为**水平布局组**的子组件。然后，一个带有**宽高比适配器**组件的子组件被添加到面板中，以便子组件可以具有4:3的**宽高比**：
- en: '![Figure 7.31: Aspect Ratio Fitter Example in the Chapter7 scene](img/Figure_07.31_B18327.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图7.31：第7章场景中的宽高比适配器示例](img/Figure_07.31_B18327.jpg)'
- en: 'Figure 7.31: Aspect Ratio Fitter Example in the Chapter7 scene'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.31：第7章场景中的宽高比适配器示例
- en: Now that we’ve looked at all the properties of the various automatic layout
    components, let’s look at some examples of how to use them!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了一些自动布局组件的所有属性，让我们看看如何使用它们的示例！
- en: Examples
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: We’ll continue working on the scene created in [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085)
    and use the art assets imported for them.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续工作于在[*第6章*](B18327_06.xhtml#_idTextAnchor085)中创建的场景，并使用为它们导入的艺术资产。
- en: Note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you did not follow along with the examples in [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085)
    but would like to follow along with these, you can download the unity package
    named **Chapter 07** **- Examples – Start.unitypackage** from the code bundle.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有跟随[*第6章*](B18327_06.xhtml#_idTextAnchor085)中的示例，但想跟随这些示例，您可以从代码包中下载名为**第07章
    - 示例 - 开始.unitypackage**的Unity包。
- en: In addition to the art already added to our project, we’ll be using art assets
    that I’ve modified from free art assets found at [https://opengameart.org/content/platformer-pickups-pack](https://opengameart.org/content/platformer-pickups-pack).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 除了已经添加到我们项目中的艺术作品外，我们还将使用我从[https://opengameart.org/content/platformer-pickups-pack](https://opengameart.org/content/platformer-pickups-pack)找到的免费艺术资产中修改的艺术资产。
- en: The download from the previous link provides many individual images. I could
    have used those, but for performance reasons, it is best to use sprite sheets
    whenever possible. So, you can find the sprite sheet labeled `foodSpriteSheet.png`
    in the code bundle. To combine all the images into a sprite sheet, I used the
    program Texture Packer, which can be found at [https://www.codeandweb.com/texturepacker](https://www.codeandweb.com/texturepacker).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一个链接下载提供了许多单独的图像。我本可以使用那些图像，但出于性能原因，尽可能使用精灵表是更好的选择。因此，你可以在代码包中找到标记为 `foodSpriteSheet.png`
    的精灵表。为了将所有图像组合成精灵表，我使用了 Texture Packer 程序，该程序可在 [https://www.codeandweb.com/texturepacker](https://www.codeandweb.com/texturepacker)
    找到。
- en: 'Before you begin with the following examples, complete the following steps:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始以下示例之前，请完成以下步骤：
- en: Import the `foodSpriteSheet.png` sprite sheet into your project’s `Asset/Sprites`
    folder.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `foodSpriteSheet.png` 精灵表导入到项目中的 `Asset/Sprites` 文件夹。
- en: Change the `foodSpriteSheet.png` to **Multiple**. Use the **Sprite Editor**
    to automatically slice the sprite sheet.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `foodSpriteSheet.png` 改为 **Multiple**。使用 **Sprite Editor** 自动切片精灵表。
- en: 'Automatic slicing results in a blank image being created in the sprite sheet.
    Find the rectangle shown in the following screenshot within the **Sprite Editor**,
    and then select and delete it:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动切片会在精灵表中创建一个空白图像。在 **Sprite Editor** 中找到以下屏幕截图所示的矩形，然后选择并删除它：
- en: '![Figure 7.32: An empty sprite that needs removing](img/Figure_07.32_B18327.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.32：需要删除的空精灵](img/Figure_07.32_B18327.jpg)'
- en: 'Figure 7.32: An empty sprite that needs removing'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32：需要删除的空精灵
- en: 'Once you apply your changes, you should have the following in your `Sprites`
    folder:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用你的更改后，你应该在你的 `Sprites` 文件夹中有以下内容：
- en: '![Figure 7.33: All sprites currently in the project](img/Figure_07.33_B18327.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.33：项目中当前所有的精灵](img/Figure_07.33_B18327.jpg)'
- en: 'Figure 7.33: All sprites currently in the project'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33：项目中当前所有的精灵
- en: Duplicate your scene named `Chapter6` by pressing *Ctrl* + *D*, and name it
    `Chapter7`. Open the `Chapter7` scene and complete the following examples within
    that scene.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *D* 复制名为 `Chapter6` 的场景，并将其命名为 `Chapter7`。打开 `Chapter7` 场景并在其中完成以下示例。
- en: Now that you have the scene duplicated and the art imported, let’s look at applying
    some automatic layouts.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在场景已复制且艺术资源已导入，让我们来看看应用一些自动布局。
- en: Laying out a HUD selection menu
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局 HUD 选择菜单
- en: 'The first example we will cover in this chapter is a HUD selection menu in
    the lower-right corner of the screen that uses the **Horizontal Layout Group**
    component. When we are done, it will look like the following figure:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将介绍的是屏幕右下角使用 **Horizontal Layout Group** 组件的 HUD 选择菜单。完成之后，它将看起来像以下图示：
- en: '![Figure 7.34: The HUD selection menu we will build in this example](img/Figure_07.34_B18327.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.34：本例中将构建的 HUD 选择菜单](img/Figure_07.34_B18327.jpg)'
- en: 'Figure 7.34: The HUD selection menu we will build in this example'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34：本例中将构建的 HUD 选择菜单
- en: 'To create the HUD group shown in the preceding screenshot, complete the following
    steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建前一个屏幕截图所示的 HUD 组，请完成以下步骤：
- en: Currently, we have a Panel in the upper-left corner of the screen named `HUD
    Panel`. For clarity’s sake, rename this Panel `Top` `Left Panel`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，屏幕左上角有一个名为 `HUD Panel` 的面板。为了清晰起见，将此面板重命名为 `Top Left Panel`。
- en: We will create a new HUD Panel to hold our fruity inventory. We want to put
    our new HUD Panel in the HUD Canvas. Right-click on the Canvas named `HUD Canvas`
    in the **Hierarchy** and select **UI** | **Panel**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个新的 HUD Panel 来存放我们的水果库存。我们希望将新的 HUD Panel 放在 HUD Canvas 上。在 **Hierarchy**
    中右键单击名为 `HUD Canvas` 的 Canvas，然后选择 **UI** | **Panel**。
- en: 'Rename the new Panel `Bottom` `Right Panel`:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新面板重命名为 `Bottom Right Panel`：
- en: '![Figure 7.35: The Panels in the Hierarchy](img/Figure_07.35_B18327.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.35：层次结构中的面板](img/Figure_07.35_B18327.jpg)'
- en: 'Figure 7.35: The Panels in the Hierarchy'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35：层次结构中的面板
- en: 'Change the Rect Transform properties of the `Bottom Right Panel` so that the
    Panel is anchored in the lower-right corner, has a `500`, and has a `100`. Remember
    to hold down *Shift* + *Alt* when selecting the lower-right anchor preset:![Figure
    7.36: The Rect Transform of the Bottom Right Panel](img/Figure_07.36_B18327.jpg)'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `Bottom Right Panel` 的 Rect Transform 属性，使面板锚定在右下角，具有 `500` 的宽度和 `100` 的高度。记得在选择右下角锚定预设时按住
    *Shift* + *Alt*：![图 7.36：Bottom Right Panel 的 Rect Transform](img/Figure_07.36_B18327.jpg)
- en: 'Figure 7.36: The Rect Transform of the Bottom Right Panel'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.36：Bottom Right Panel 的 Rect Transform
- en: 'You should see the following in your Game view:'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在游戏视图中看到以下内容：
- en: '![Figure 7.37: The resulting Panel](img/Figure_07.37_B18327.jpg)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图7.37：结果面板](img/Figure_07.37_B18327.jpg)'
- en: 'Figure 7.37: The resulting Panel'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.37：结果面板
- en: 'Now, we will replace the image with one of the `uiElements.png` sprites. Drag
    `uiElements_1` into the **Source Image** property of the **Image** component.
    Change the **Color** property so that it has full opacity:![Figure 7.38: The Image
    component properties of the Panel](img/Figure_07.38_B18327.jpg)'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将用`uiElements.png`精灵中的一个替换图片。将`uiElements_1`拖动到**Image**组件的**Source Image**属性中。更改**Color**属性，使其具有全不透明度：![图7.38：面板的Image组件属性](img/Figure_07.38_B18327.jpg)
- en: 'Figure 7.38: The Image component properties of the Panel'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.38：面板的Image组件属性
- en: 'You should now see the following in your **Game view**:'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在应该在你的**Game视图**中看到以下内容：
- en: '![Figure 7.39: The resulting Panel](img/Figure_07.39_B18327.jpg)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图7.39：结果面板](img/Figure_07.39_B18327.jpg)'
- en: 'Figure 7.39: The resulting Panel'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.39：结果面板
- en: To create the layout we want, we need to add a `Bottom Right Panel`. Select
    **Add Component** | **Layout** | **Horizontal Layout Group**. We will adjust its
    properties momentarily. First, let’s give this Panel some children so that we
    can see the effects of the properties take place.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建我们想要的布局，我们需要添加一个`Bottom Right Panel`。选择**添加组件** | **布局** | **水平布局组**。我们将稍后调整其属性。首先，让我们给这个面板添加一些子元素，这样我们就可以看到属性的效果。
- en: Right-click on the `Bottom Right Panel` in the Hierarchy and select `Item Holder`.
    We won’t be changing the **Rect Transform** component of this Image because we
    will allow the **Horizontal Layout Group** of its parent to control its size,
    position, and anchor.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构中右键点击`Bottom Right Panel`并选择`Item Holder`。我们不会更改这个Image的**Rect Transform**组件，因为我们允许其父元素的**水平布局组**控制其大小、位置和锚点。
- en: This Image will be the background holder for the item. So, drag `uiElement_6`
    into its **Image** component’s **Source Image**.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这张图片将是物品的背景持有者。因此，将`uiElement_6`拖动到其**Image**组件的**Source Image**中。
- en: 'Now, let’s add the Image for the fruit. Right-click on `Item Holder` in the
    `Food`:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为水果添加图片。在`Food`中的`Item Holder`上右键点击：
- en: '![Figure 7.40: The Hierarchy of UI elements](img/Figure_07.40_B18327.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图7.40：UI元素的层次结构](img/Figure_07.40_B18327.jpg)'
- en: 'Figure 7.40: The Hierarchy of UI elements'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.40：UI元素的层次结构
- en: 'To ensure that we aren’t just looking at a white block, let’s replace the `foodSpriteSheet.png`.
    I’ve used `foodSpriteSheet_18`, which is a full orange:![Figure 7.41: The Image
    component of the Food element](img/Figure_07.41_B18327.jpg)'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保我们看到的不是一个白色方块，让我们替换`foodSpriteSheet.png`。我使用了`foodSpriteSheet_18`，这是一个完整的橙子：![图7.41：食物元素的Image组件](img/Figure_07.41_B18327.jpg)
- en: 'Figure 7.41: The Image component of the Food element'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.41：食物元素的Image组件
- en: 'You should see something that looks like this:'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到类似这样的东西：
- en: '![Figure 7.42: The resulting Panel with an orange](img/Figure_07.42_B18327.jpg)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图7.42：包含橙子的结果面板](img/Figure_07.42_B18327.jpg)'
- en: 'Figure 7.42: The resulting Panel with an orange'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.42：包含橙子的结果面板
- en: If your orange and its holder are in a different place than mine, don’t worry.
    When we start adding more children and adjusting the **Horizontal Group Layout**,
    everything should pop into its proper place.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你的橙子和它的持有者不在我的位置，不要担心。当我们开始添加更多子元素并调整**水平组布局**时，一切都应该正确地弹出。
- en: We don’t want our orange Image to have its aspect ratio distorted, and we also
    want to ensure that it always fills the `Item Holder` image without expanding
    past it. So, let’s adjust a few properties on the `5`.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不希望我们的橙子图片的宽高比被扭曲，同时我们也想确保它总是填充`Item Holder`图片，而不会超出它。因此，让我们在`5`上调整一些属性。
- en: 'Now, select `Food` Image should now have the following properties:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择`Food` Image应该具有以下属性：
- en: '![Figure 7.43: The Rect Transform and Image components of the Food UI Image](img/Figure_07.43_B18327.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图7.43：食物UI图片的Rect Transform和Image组件](img/Figure_07.43_B18327.jpg)'
- en: 'Figure 7.43: The Rect Transform and Image components of the Food UI Image'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.43：食物UI图片的Rect Transform和Image组件
- en: 'Now, we’re ready to start adding some more children. Select the `Item Holder`
    Image in the `Item` `Holder` GameObjects:![Figure 7.44: The Hierarchy of UI elements](img/Figure_07.44_B18327.jpg)'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备开始添加更多的子元素。在`Item Holder` GameObjects中的`Item`上选择`Item Holder` Image：![图7.44：UI元素的层次结构](img/Figure_07.44_B18327.jpg)
- en: 'Figure 7.44: The Hierarchy of UI elements'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.44：UI元素的层次结构
- en: 'You should see the following in the **Game view**:'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在**Game视图**中看到以下内容：
- en: '![Figure 7.45: The resulting Panel with five oranges](img/Figure_07.45_B18327.jpg)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图7.45：包含五个橙子的结果面板](img/Figure_07.45_B18327.jpg)'
- en: 'Figure 7.45: The resulting Panel with five oranges'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.45：包含五个橙子的最终面板
- en: 'I don’t like my objects to have names with numbered parentheses in them, so
    I’ll rename all the duplicated Images `Item Holder` without the number. Select
    `Item Holder (1)`, hold *Shift*, and select `Item Holder (4)` so that you have
    all of them selected. Now, in the `Item Holder` in the name slot and press *Enter*.
    They should all be renamed `Item` `Holder` now:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我不喜欢我的对象名称中包含带数字括号的名称，所以我将所有重复的图像重命名为`Item Holder`，不带数字。选择`Item Holder (1)`，按住*Shift*，然后选择`Item
    Holder (4)`，以便选中所有这些。现在，在名称槽中的`Item Holder`处按下*Enter*。它们现在都应该被重命名为`Item` `Holder`：
- en: '![Figure 7.46: The Hierarchy of renamed elements](img/Figure_07.46_B18327.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图7.46：重命名元素的结果层次结构](img/Figure_07.46_B18327.jpg)'
- en: 'Figure 7.46: The Hierarchy of renamed elements'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.46：重命名元素的结果层次结构
- en: 'Now, let’s adjust the properties on the `Bottom Right Panel`. To do that, select
    the `Bottom Right Panel`, and in its **Horizontal Layout Group** component, give
    it the following properties:![Figure 7.47: The Horizontal Layout Group component
    of the Bottom Right Panel](img/Figure_07.47_B18327.jpg)'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们调整`Bottom Right Panel`上的属性。为此，选择`Bottom Right Panel`，并在其**水平布局组**组件中，给它以下属性：![图7.47：Bottom
    Right Panel的水平布局组组件](img/Figure_07.47_B18327.jpg)
- en: 'Figure 7.47: The Horizontal Layout Group component of the Bottom Right Panel'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.47：Bottom Right Panel的水平布局组组件
- en: 'You will now be able to see the following:'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在将能够看到以下内容：
- en: '![Figure 7.48: The resulting Panel of oranges](img/Figure_07.48_B18327.jpg)'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图7.48：最终面板中的橙子](img/Figure_07.48_B18327.jpg)'
- en: 'Figure 7.48: The resulting Panel of oranges'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.48：最终面板中的橙子
- en: By adjusting the `Item Holder` images were adjusted to fit onto the parent Panel
    by enabling **Control Child Size Width** and **Height**.
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过调整`Item Holder`图像，通过启用**控制子大小宽度**和**高度**，使它们适合父面板。
- en: 'Now, all that’s left to do is swap out the orange images for four other items.
    Select the `Food` image of the second through fourth `Item Holder` GameObjects
    and change their `foodSpriteSheet_13`, `foodSpriteSheet_22`, `foodSpriteSheet_34`,
    and `foodSpriteSheet_45` to get the following results:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，剩下的只是将橙子图像替换为其他四种物品。选择第二到第四个`Item Holder` GameObjects的`Food`图像，并将它们的`foodSpriteSheet_13`、`foodSpriteSheet_22`、`foodSpriteSheet_34`和`foodSpriteSheet_45`更改为以下结果：
- en: '![Figure 7.49: The resulting Panel of a variety of fruit](img/Figure_07.49_B18327.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图7.49：各种水果的最终面板](img/Figure_07.49_B18327.jpg)'
- en: 'Figure 7.49: The resulting Panel of a variety of fruit'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.49：各种水果的最终面板
- en: As you can see from this example, **Horizontal Layout Group** components and
    (similarly) **Vertical Layout Group** components aren’t too difficult to set up
    and are extremely useful for creating well-organized lists.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如此例所示，**水平布局组**组件和（类似地）**垂直布局组**组件设置起来并不困难，并且对于创建有组织的列表非常有用。
- en: Laying out a grid inventory
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局网格库存
- en: 'The last example we’ll cover in this chapter is the creation of a gridded inventory
    system using a **Grid Layout Group** component and the **Content Fitter** component.
    We’ll continue to work on this Panel in later chapters:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论的最后一个示例是使用**网格布局组**组件和**内容适配器**组件创建网格库存系统。我们将在后续章节继续在此面板上工作：
- en: '![Figure 7.50: The grid inventory we will build in this example](img/Figure_07.50_B18327.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图7.50：我们将在此示例中构建的网格库存](img/Figure_07.50_B18327.jpg)'
- en: 'Figure 7.50: The grid inventory we will build in this example'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.50：我们将在此示例中构建的网格库存
- en: 'To create the gridded inventory system shown in the preceding screenshot, complete
    the following steps:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建前面截图所示的网格库存系统，请完成以下步骤：
- en: 'The shell that holds this inventory system looks remarkably similar to our
    `Pause Panel` (see *Figure 7**.49*). Since they are so similar, and there is no
    reason to reinvent the wheel, we will just duplicate the `Pause Panel` we created
    in [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085), and adjust some of its settings
    to get the square shape. Select `Pause Panel` in the Hierarchy and press *Ctrl*
    + *D* to duplicate it. Now, rename the duplicate `Inventory Panel`. Rename its
    child Image `Inventory Banner`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含此库存系统的外壳看起来与我们之前的`Pause Panel`（见*图7**.49*）非常相似。由于它们如此相似，而且没有必要重新发明轮子，我们将复制在[*第6章*](B18327_06.xhtml#_idTextAnchor085)中创建的`Pause
    Panel`，并调整其一些设置以获得正方形形状。在层次结构中选择`Pause Panel`，然后按*Ctrl* + *D*复制它。现在，重命名副本`Inventory
    Panel`。重命名其子图像`Inventory Banner`：
- en: '![Figure 7.51: The resulting Hierarchy after duplicating and renaming](img/Figure_07.51_B18327.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图7.51：复制并重命名后的结果层次结构](img/Figure_07.51_B18327.jpg)'
- en: 'Figure 7.51: The resulting Hierarchy after duplicating and renaming'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.51：复制和重命名后的结果层次结构
- en: Note
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that we added a Canvas Group component to the **Pause Panel** in [*Chapter
    6*](B18327_06.xhtml#_idTextAnchor085). By duplicating it to create the **Inventory
    Panel**, the **Inventory Panel** has a **Canvas Group** component as well. This
    component will allow us to easily hide and show the two Panels, which we will
    do in the next chapter.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们在[*第6章*](B18327_06.xhtml#_idTextAnchor085)中向**暂停面板**添加了一个Canvas Group组件。通过复制它来创建**库存面板**，**库存面板**也有一个**Canvas
    Group**组件。此组件将使我们能够轻松地隐藏和显示两个面板，我们将在下一章中这样做。
- en: 'To get the square look of the `Inventory Panel` in the example screenshot,
    we need to deselect the `500`:![Figure 7.52: The Rect Transform and Image components
    of the Inventory Panel](img/Figure_07.52_B18327.jpg)'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获得示例截图中的`Inventory Panel`的方形外观，我们需要取消选择`500`:![图7.52：库存面板的矩形变换和图像组件](img/Figure_07.52_B18327.jpg)
- en: 'Figure 7.52: The Rect Transform and Image components of the Inventory Panel'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.52：库存面板的矩形变换和图像组件
- en: 'You should now see the following in your **Game view**:'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在应该在**游戏视图**中看到以下内容：
- en: '![Figure 7.53: The resulting Inventory Panel](img/Figure_07.53_B18327.jpg)'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图7.53：生成的库存面板](img/Figure_07.53_B18327.jpg)'
- en: 'Figure 7.53: The resulting Inventory Panel'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.53：生成的库存面板
- en: 'If you look at *Figure 7**.50*, you will see that the group of inventory items
    has an sprite that outlines it. This will act as the parent object of our grid.
    Create this parent object by right-clicking on the `Inventory Holder`:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看*图7**.50*，你会看到库存项目组有一个轮廓的精灵。这将作为我们网格的父对象。通过在`Inventory Holder`上右键单击来创建此父对象：
- en: '![Figure 7.54: The Hierarchy of items](img/Figure_07.54_B18327.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图7.54：项目层次结构](img/Figure_07.54_B18327.jpg)'
- en: 'Figure 7.54: The Hierarchy of items'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.54：项目层次结构
- en: Change the `uiElement_38` and use the **Color** property to make the Image fully
    opaque.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`uiElement_38`并使用**颜色**属性使图像完全不透明。
- en: Right now, the `Inventory Holder` is completely covering the `Inventory Panel`.
    However, we don’t need to change any of the `Inventory Holder` by selecting `Inventory
    Holder` has no children, adjusting the **Horizontal Fit** and **Vertical Fit**
    settings now will cause it to “disappear.”
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，`Inventory Holder`完全覆盖了`Inventory Panel`。然而，我们不需要通过选择`Inventory Holder`没有子项来更改任何`Inventory
    Holder`，现在调整**水平适配**和**垂直适配**设置将导致它“消失”。
- en: Add a `Inventory Holder` by selecting **Add Component** | **Layout** | **Grid
    Layout Group**. Once again, don’t adjust the settings yet. We’ll do this once
    we add the children.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**添加组件** | **布局** | **网格布局组**来添加一个`Inventory Holder`。再次提醒，现在不要调整设置。我们将在添加子项后进行此操作。
- en: Note from *Figure 7**.50* that the children of the inventory are set up just
    like the children in the horizontal HUD we created in the previous example. So,
    we’ll duplicate the children of the `Bottom Right Panel` and move the duplicates
    so that they are children of the `Inventory Holder`. Select the first `Item Holder`
    child of the `Bottom Right Panel`, hold down *Shift*, and select the last `Item
    Holder` child of the `Bottom Right Panel`. This will select all the children.
    Now, with all the children selected, press *Ctrl* + *D* to duplicate them.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*图7**.50*中注意，库存的子项设置与我们在上一个示例中创建的水平HUD中的子项设置一样。因此，我们将复制`Bottom Right Panel`的子项并将副本移动到`Inventory
    Holder`的子项。选择`Bottom Right Panel`的第一个`Item Holder`子项，按住*Shift*并选择`Bottom Right
    Panel`的最后一个`Item Holder`子项。这将选择所有子项。现在，所有子项都被选中，按*Ctrl* + *D*来复制它们。
- en: 'Click and drag the duplicated `Item Holder` GameObjects in the `Bottom Right
    Panel` to the `Inventory Holder`, making them children of `Inventory Holder`:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Bottom Right Panel`中的复制`Item Holder`GameObject拖放到`Inventory Holder`中，使它们成为`Inventory
    Holder`的子项：
- en: '![Figure 7.55: The Hierarchy of items](img/Figure_07.55_B18327.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图7.55：项目层次结构](img/Figure_07.55_B18327.jpg)'
- en: 'Figure 7.55: The Hierarchy of items'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.55：项目层次结构
- en: 'Select one of the `Item Holder` GameObjects and duplicate it four times so
    that there is a total of nine `Item Holder` children. Select all the `Item Holder`
    children and rename them `Item Holder` so that they no longer have a number in
    the name:![Figure 7.56: The Hierarchy of items](img/Figure_07.56_B18327.jpg)'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个`Item Holder`GameObject并复制四次，以便总共有九个`Item Holder`子项。选择所有`Item Holder`子项并将它们重命名为`Item
    Holder`，以便它们的名字中不再有数字：![图7.56：项目层次结构](img/Figure_07.56_B18327.jpg)
- en: 'Figure 7.56: The Hierarchy of items'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.56：项目层次结构
- en: You should now see something similar to *Figure 7**.57* in your Game view. Depending
    on what you duplicated or the order in which you did it, the fruit may be in a
    slightly different order. That’s fine, though!
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在应该在游戏视图中看到类似于 *图 7.57* 的内容。根据你复制的顺序或你执行操作的顺序，水果的顺序可能略有不同。不过，这没关系！
- en: '![Figure 7.57: The grid of fruit](img/Figure_07.57_B18327.jpg)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.57：水果的网格](img/Figure_07.57_B18327.jpg)'
- en: 'Figure 7.57: The grid of fruit'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.57：水果的网格
- en: 'Now, let’s adjust the properties on the `Inventory Holder Panel` so that the
    children will be laid out in a 3x3 grid. Adjust the properties to match those
    in the following screenshot:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们调整 `Inventory Holder Panel` 上的属性，以便子项将以 3x3 网格排列。调整属性以匹配以下截图中的属性：
- en: '![Figure 7.58: The Grid Layout Group component of Inventory Holder](img/Figure_07.58_B18327.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.58：库存持有者的网格布局组组件](img/Figure_07.58_B18327.jpg)'
- en: 'Figure 7.58: The Grid Layout Group component of Inventory Holder'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.58：库存持有者的网格布局组组件
- en: 'You should now see the following in your Game view:![Figure 7.59: The Grid
    Layout Group component of Inventory Holder](img/Figure_07.59_B18327.jpg)'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该在游戏视图中看到以下内容：![图 7.59：库存持有者的网格布局组组件](img/Figure_07.59_B18327.jpg)
- en: 'Figure 7.59: The Grid Layout Group component of Inventory Holder'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.59：库存持有者的网格布局组组件
- en: We put spacing between each of the cells using the `3`.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `3` 在每个单元格之间添加间距。
- en: 'Now that `Inventory Holder` has children, we can change the settings of its
    **Content Size Fitter**. Set **Horizontal Fit** and **Vertical Fit** to **Min
    Size**:![Figure 7.60: The Content Size Fitter component of Inventory Holder](img/Figure_07.60_B18327.jpg)'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于 `Inventory Holder` 有子项，我们可以更改其 **Content Size Fitter** 的设置。将 **Horizontal
    Fit** 和 **Vertical Fit** 设置为 **Min Size**：![图 7.60：库存持有者的内容大小适配器组件](img/Figure_07.60_B18327.jpg)
- en: 'Figure 7.60: The Content Size Fitter component of Inventory Holder'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.60：库存持有者的内容大小适配器组件
- en: 'You should now see the following in your Game view:'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在应该在游戏视图中看到以下内容：
- en: '![Figure 7.61: The fitted grid of fruit](img/Figure_07.61_B18327.jpg)'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.61：水果的适配网格](img/Figure_07.61_B18327.jpg)'
- en: 'Figure 7.61: The fitted grid of fruit'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.61：水果的适配网格
- en: It’s a little hard to see, but the Image of `Inventory Holder` now fits snuggly
    around the grid of `Item Holder` Images. We want a bit of padding, though.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这有点难以看清，但 `Inventory Holder` 的图像现在紧紧地围绕 `Item Holder` 图像的网格。不过，我们想要一点填充。
- en: 'Add padding to the sides of the `Item Holder` GameObjects by adjusting the
    **Padding** properties in the **Grid Layout Group**, as shown here:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调整 **Grid Layout Group** 中的 **Padding** 属性，为 `Item Holder` GameObject 的两侧添加填充，如图所示：
- en: '![Figure 7.62: The padded grid of fruit](img/Figure_07.62_B18327.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.62：水果的填充网格](img/Figure_07.62_B18327.jpg)'
- en: 'Figure 7.62: The padded grid of fruit'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.62：水果的填充网格
- en: 'Now that everything is lined up and positioned properly, the only thing left
    to do is change the order of the images and change the images of the last four
    slots. To change the order of the images, simply change their order in the `Food`
    items to `foodSpriteSheet_41`, `foodSpriteSheet_52`, `foodSpriteSheet_55`, and
    `foodSpriteSheet_53`. These changes result in the following completed Inventory
    Panel:![Figure 7.63: The grid of various foods](img/Figure_07.63_B18327.jpg)'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在一切都已排列并正确定位，剩下要做的就是更改图像的顺序并更改最后四个槽位的图像。要更改图像的顺序，只需在 `Food` 项目中将它们的顺序更改为 `foodSpriteSheet_41`、`foodSpriteSheet_52`、`foodSpriteSheet_55`
    和 `foodSpriteSheet_53`。这些更改导致以下完成的库存面板：![图 7.63：各种食物的网格](img/Figure_07.63_B18327.jpg)
- en: 'Figure 7.63: The grid of various foods'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.63：各种食物的网格
- en: That’s it. You should now have a perfectly laid out inventory grid.
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就这样。你现在应该有一个完美排列的库存网格。
- en: 'With the `Inventory Holder` will automatically resize to fit all the items,
    as you can see here:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随着 `Inventory Holder` 的自动调整大小以适应所有项目，正如你所看到的：
- en: '![Figure 7.64: The smaller grid of various foods](img/Figure_07.64_B18327.jpg)'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.64：各种食物的小网格](img/Figure_07.64_B18327.jpg)'
- en: 'Figure 7.64: The smaller grid of various foods'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.64：各种食物的小网格
- en: 'This actually works really well, until we try to add more items to the inventory.
    You’ll see that once we have 10 items, everything looks pretty bad:'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，这种方法效果非常好，直到我们尝试向库存中添加更多项目。你会发现一旦我们有 10 个项目，一切看起来都很糟糕：
- en: '![Figure 7.65: The expanded grid of various foods](img/Figure_07.65_B18327.jpg)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 7.65：各种食物的扩展网格](img/Figure_07.65_B18327.jpg)'
- en: 'Figure 7.65: The expanded grid of various foods'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.65：各种食物的扩展网格
- en: There are a few things we can do to handle this, including changing the cell
    size and using a mask along with a **Scroll Rect**. We’ll discuss how to make
    those changes in a later chapter. For now, though, just leave your inventory at
    nine items so that everything looks nice.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以做一些事情来处理这个问题，包括更改单元格大小和与**滚动矩形**一起使用遮罩。我们将在后面的章节中讨论如何进行这些更改。不过，现在请将你的库存保持在九个项目，这样一切看起来都很漂亮。
- en: 'After completing all the examples in the last two chapters, you should have
    the following:'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成前两章的所有示例后，你应该具备以下能力：
- en: '![Figure 7.66: The result of all examples from Chapters 6 and 7](img/Figure_07.66_B18327.jpg)'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图7.66：第6章和第7章所有示例的结果](img/Figure_07.66_B18327.jpg)'
- en: 'Figure 7.66: The result of all examples from Chapters 6 and 7'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.66：第6章和第7章所有示例的结果
- en: And that’s in for adding automatic layouts to our scene. We’ll continue to improve
    upon it in future chapters.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为我们的场景添加自动布局的原因。我们将在未来的章节中继续对其进行改进。
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now, we know all sorts of techniques to lay out our UI elements. The information
    covered in this chapter, and the last one, has provided enough tools to create
    almost any UI layout that you can imagine.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经掌握了各种布局UI元素的技术。本章和上一章所涵盖的信息，已经提供了足够多的工具来创建几乎任何你可以想象到的UI布局。
- en: The automatic layouts discussed in this chapter aren’t just helpful when you
    want to manually add UI items, as we did in this chapter. These automatic layouts
    are particularly helpful if you want to dynamically create and add your UI items
    based on specific conditions.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的自动布局不仅在你想要手动添加UI项目时有用，就像我们在本章中所做的那样。如果你想要根据特定条件动态创建和添加UI项目，这些自动布局尤其有用。
- en: In the next chapter, we will learn how to access UI components via code and
    how to use the Event System to allow the player to interact with the UI objects.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何通过代码访问UI组件，以及如何使用事件系统允许玩家与UI对象进行交互。
