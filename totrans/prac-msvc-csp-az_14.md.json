["```cs\ndotnet new grpc\n```", "```cs\ndotnet new proto -o Protos -n LiveGame\n```", "```cs\nsyntax = \"proto3\";\noption csharp_namespace = \"Codebreaker.Live.Grpc\";\npackage ReportGame;\nimport \"google/protobuf/empty.proto\";\nimport \"google/protobuf/duration.proto\";\nimport \"google/protobuf/timestamp.proto\";\nservice ReportGameService {\n  rpc ReportGameCompleted (ReportGameCompletedRequest)\nreturns (google.protobuf.Empty);\n}\nmessage ReportGameCompletedRequest {\n  string id = 1;\n  string gameType = 2;\n  string playerName = 3;\n  bool isCompleted = 4;\n  bool isVictory = 5;\n  int32 numberMoves = 6;\n  google.protobuf.Timestamp startTime = 7;\n  google.protobuf.Duration duration = 8;\n}\n```", "```cs\n<ItemGroup>\n  <Protobuf Include=\"Protos\\LiveGame.proto\"\n    GrpcServices=\"Server\" />\n</ItemGroup>\n```", "```cs\npublic static class ReportGameCompletedRequestExtensions\n{\n  public static GameSummary ToGameSummary(\n    this ReportGameCompletedRequest request)\n  {\n    Guid id = Guid.Parse(request.Id);\n    DateTime startTime = request.StartTime.ToDateTime();\n    TimeSpan duration = request.Duration.ToTimeSpan();\n    return new GameSummary(\n      id,\n      request.GameType,\n      request.PlayerName,\n      request.IsComleted,\n      request.IsVictory,\n      request.NumberMoves,\n      startTime,\n      duration);\n  }\n}\n```", "```cs\nsyntax = \"proto3\";\noption csharp_namespace = \"Codebreaker.Grpc\";\npackage GamesAPI;\nimport \"google/protobuf/duration.proto\";\nimport \"google/protobuf/timestamp.proto\";\nservice GrpcGame {\n  rpc CreateGame(CreateGameRequest)\n    returns (CreateGameResponse);\n  rpc SetMove(SetMoveRequest) returns (SetMoveResponse);\n  rpc GetGame(GetGameRequest) returns (GetGameResponse);\n}\n// code removed for brevity\n```", "```cs\nmessage SetMoveRequest {\n  string id = 1;\n  string gameType = 2;\n  int32 moveNumber = 3;\n  bool end = 4;\n  repeated string guessPegs = 5;\n}\n```", "```cs\nmessage GetGameResponse {\n  string id = 1;\n  string gameType = 2;\n  string playerName = 3;\n  // code removed for brevity\n  repeated Move moves = 14;\n}\nmessage Move {\n  string id = 1;\n  int32 moveNumber = 2;\n  repeated string guessPegs = 3;\n  repeated string keyPegs = 4;\n}\n```", "```cs\nmessage FieldNames {\n  repeated string values = 1;\n}\nmessage CreateGameResponse {\n  string id = 1;\n  string gameType = 2;\n  string playerName = 3;\n  int32 numberCodes = 4;\n  int32 maxMoves = 5;\n  map<string, FieldNames> fieldValues = 6;\n}\n```", "```cs\ninternal static class GrpcExtensions\n{\n  public static GameSummary ToGameSummary(\n    this ReportGameCompletedRequest request)\n  {\n    Guid id = Guid.Parse(request.Id);\n    DateTime startTime = request.StartTime.ToDateTime();\n    TimeSpan duration = request.Duration.ToTimeSpan();\n    return new GameSummary(\n      id,\n      request.GameType,\n      request.PlayerName,\n      request.IsCompleted,\n      request.IsVictory,\n      request.NumberMoves,\n      startTime,\n      duration);\n  }\n}\n```", "```cs\nusing Codebreaker.Grpc;\nusing Google.Protobuf.WellKnownTypes;\nusing Grpc.Core;\nnamespace Codebreaker.Live.Endpoints;\npublic class GRPCLiveGameService(\n  IHubContext<LiveHub> hubContext,\n  ILogger<LiveGameService> logger) :\n    ReportGame.ReportGameBase\n{\n  async public override Task<Empty> ReportGameCompleted(\n    ReportGameCompletedRequest request,\n    ServerCallContext context)\n  {\n    logger.LogInformation(\"Received game ended {type} \" +\n      \"{gameid}\", request.GameType, request.Id);\n    await hubContext.Clients.Group(request.GameType)\n      .SendAsync(\"GameCompleted\", request.ToGameSummary());\n    return new Empty();\n  }\n}\n```", "```cs\npublic static WebApplication MapApplicationEndpoints(this WebApplication app)\n{\n  app.MapGrpcService<GRPCLiveGameService>();\n  app.MapHub<LiveHub>(\"/livesubscribe\");\n  return app;\n }\n```", "```cs\n{\n  \"Kestrel\": {\n    \"EndpointDefaults\": {\n      \"Protocols\": \"Http1And2\"\n    }\n  }\n}\n```", "```cs\npublic class GrpcGameEndpoints(\n  IGamesService gamesService,\n  ILogger<GrpcGameEndpoints> logger) :\n  Grpc.GrpcGame.GrpcGameBase\n{\n  public override async\n    Task<Grpc.CreateGameResponse> CreateGame(\n    Grpc.CreateGameRequest request,\n    ServerCallContext context)\n  {\n    logger.GameStart(request.GameType);\n    Game game = await gamesService.StartGameAsync(\n      request.GameType, request.PlayerName);\n    return game.ToGrpcCreateGameResponse();\n  }\n  public override async Task<SetMoveResponse> SetMove(\n    SetMoveRequest request, ServerCallContext context)\n  {\n    Guid id = Guid.Parse(request.Id);\n    string[] guesses = request.GuessPegs.ToArray();\n    (Game game, Models.Move move) =\n      await gamesService.SetMoveAsync(\n        id, request.GameType, guesses, request.MoveNumber);\n    return game.ToGrpcSetMoveResponse(move);\n  }\n  public override async Task<GetGameResponse> GetGame(\n    GetGameRequest request, ServerCallContext context)\n  {\n    Guid id = Guid.Parse(request.Id);\n    Game? game = await gamesService.GetGameAsync(id);\n    if (game is null)\n      return new GetGameResponse()\n      {\n        Id = Guid.Empty.ToString()\n      };\n    return game.ToGrpcGetGameResponse();\n  }\n}\n```", "```cs\ndotnet tool install -g dotnet-grpc\n```", "```cs\ncd Codebreaker.GameAPIs\ndotnet-grpc add-file ..\\Codebreaker.Live\\Protos\\LiveGame.proto\n```", "```cs\ncd ..\ncd Codebreaker.Bot\ndotnet-grpc add-file ..\\Codebreaker.GameAPIs\\Protos\\GameService.proto\n```", "```cs\n<ItemGroup>\n  <Protobuf\n    Include=\"..\\Codebreaker.Live\\Protos\\LiveGame.proto\"\n    GrpcServices=\"Client\" />\n  <Protobuf Include=\".\\Protos\\GameService.proto\" GrpcServices=\"Server\" />\n</ItemGroup>\n```", "```cs\n<ItemGroup>\n  <Protobuf Include=\n    \"..\\Codebreaker.GameApis\\Protos\\GameService.proto\"\n    GrpcServices=\"Client\" />\n</ItemGroup>\n```", "```cs\npublic class GrpcLiveReportClient(\n  ReportGame.ReportGameClient client,\n  ILogger<LiveReportClient> logger) : ILiveReportClient\n{\n  public async Task ReportGameEndedAsync(GameSummary gameSummary, \n    CancellationToken cancellationToken = default)\n  {\n    try\n    {\n      ReportGameCompletedRequest request = gameSummary.\n        ToReportGameCompletedRequest();\n      await client.ReportGameCompletedAsync(request);\n    }\n    catch (Exception ex) when (ex is RpcException or\n      SocketException)\n    {\n      logger.ErrorWritingGameCompletedEvent(\n        gameSummary.Id, ex);\n    }\n  }\n}\n```", "```cs\nbuilder.Services.AddSingleton<ILiveReportClient,\n  GrpcLiveReportClient>()\n  .AddGrpcClient<ReportGame.ReportGameClient>(\n    grpcClient =>\n    {\n      grpcClient.Address = new Uri(\"https://live\");\n    });\n// code removed for brevity\n```", "```cs\npublic class GrpcGamesClient(\n  GrpcGame.GrpcGameClient client,\n  ILogger<GrpcGamesClient> logger) : IGamesClient\n{\n  // code removed for brevity\n  public async Task<(string[] Results, bool Ended,\n    bool IsVictory)> SetMoveAsync(\n    Guid id, string playerName, GameType gameType,\n    int moveNumber, string[] guessPegs,\n    CancellationToken cancellationToken = default)\n  {\n    SetMoveRequest request = new()\n    {\n      Id = id.ToString(),\n      GameType = gameType.ToString(),\n      MoveNumber = moveNumber,\n      End = false\n    };\n    request.GuessPegs.AddRange(guessPegs);\n    var response = await client.SetMoveAsync(request,\n      cancellationToken: cancellationToken);\n    return (response.Results.ToArray(), response.Ended,\n      response.IsVictory);\n  }\n```", "```cs\nbuilder.Services.AddSingleton<IGamesClient,\nGrpcGamesClient>()\n  .AddGrpcClient<GrpcGame.GrpcGameClient>(client) =>\n  {\n    client.Address = new Uri(\"https://gameapis\");\n  });\n```"]