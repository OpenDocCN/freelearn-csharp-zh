- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: 'Harmonious Soundscapes: Integrating Audio and Music'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 和谐的声音景观：集成音频和音乐
- en: 'We have now achieved good enough graphics quality, but we are missing an important
    part of the game aesthetics: the sound. Often relegated to being the last step
    in game development, sound is one of those things that, if it’s there, you won’t
    notice its presence, but if you don’t have it, you will feel that something is
    missing. It will help you to reinforce the ambiance you want in your game and
    must match the graphical setting. To do so, we will use Unity’s capabilities to
    import audio assets, play them in 2D and 3D positioning, and mix the audio using
    its mixer.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经达到了足够的图形质量，但我们缺少游戏美学的关键部分：声音。声音通常被推迟到游戏开发的最后一步，它是那些即使存在，你也不会注意到其存在，但如果没有它，你会觉得缺少了什么的东西之一。它可以帮助你加强你在游戏中想要营造的氛围，并且必须与图形设置相匹配。为此，我们将使用Unity的能力来导入音频资产，在2D和3D定位中播放它们，并使用其混音器进行音频混音。
- en: 'In this chapter, we will examine the following sound concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下声音概念：
- en: Importing audio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入音频
- en: Integrating and mixing audio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成和混音音频
- en: We will apply those concepts in our game to import the audio to play in different
    scenarios—such as when the player shoots—and music. Later in the programming chapters,
    we will play sounds, but for now, let’s focus on how to import them into our project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在游戏中应用这些概念，导入音频以在不同的场景中播放——例如当玩家射击时——以及音乐。在后面的编程章节中，我们将播放声音，但现在，让我们专注于如何将它们导入到我们的项目中。
- en: Importing audio
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入音频
- en: As with graphic assets, it is important to properly set up the import settings
    for your audio assets, as imports can be resource-intensive if not done properly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 就像图形资源一样，正确设置音频资源的导入设置非常重要，因为如果设置不当，导入可能会消耗大量资源。
- en: 'In this section, we will examine the following audio-importing concepts:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨以下音频导入概念：
- en: Audio types
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频类型
- en: Configuring import settings
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置导入设置
- en: Let’s start by discussing the different kinds of audio we can use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先讨论我们可以使用的不同类型的音频。
- en: Audio types
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频类型
- en: 'There are different types of audio present in video games, which are the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频游戏中存在不同类型的音频，以下是这些类型：
- en: '**Music**: Music is used to enhance the player’s experience according to the
    situation.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音乐**：音乐用于根据情况增强玩家的体验。'
- en: '**Sound effects (SFX)**: Sounds that happen as a reaction to player or NPC
    actions, such as clicking a button, walking, opening a door, shooting a gun, and
    so on.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音效（SFX）**：作为对玩家或NPC动作的反应而产生的声音，例如点击按钮、行走、开门、射击枪支等等。'
- en: '**Ambient sound**: A game that uses sounds only in response to events would
    feel empty. If you are recreating an apartment in the middle of the city, even
    if the player is just idle in the middle of the room doing nothing, lots of sounds
    should be heard, and the sources of most of them will be outside the room, such
    as an airplane flying overhead, a construction site two blocks away, cars in the
    street, and so on. Creating objects like the ones mentioned before that won’t
    be seen by the player is a waste of resources. Instead, we can place individual
    sounds all over the scene to recreate the desired ambiance, but that would be
    resource-intensive, requiring lots of CPU and RAM to achieve believable results.
    Considering that these sounds usually occupy the second plane of the user’s attention,
    we can just combine them all into a single looping track and play one audio file,
    and that’s exactly what ambient sound is. If you want to create a café scene,
    you can simply go to a real café and record a few minutes of audio, using that
    as your ambient sound.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境音效**：如果一个游戏只对事件做出声音反应，会显得很空洞。如果你正在重建城市中间的公寓，即使玩家只是在房间中间无所事事，也应该听到很多声音，其中大部分声音的来源将位于房间外，例如飞机在头顶上飞行，两个街区外的建筑工地，街道上的汽车等等。创建玩家看不到的对象是一种资源浪费。相反，我们可以在场景的各个地方放置单个声音来重现所需的氛围，但这会消耗大量资源，需要大量的CPU和RAM才能达到令人信服的效果。考虑到这些声音通常占据用户注意力的第二平面，我们可以将它们全部组合成一个循环轨道，并播放一个音频文件，这就是环境音效。如果你想创建一个咖啡馆场景，你只需去真正的咖啡馆，录制几分钟的音频，并将其用作环境音效。'
- en: 'For almost all games, we will need at least one music track, one ambient track,
    and several SFX to start the production of the audio. As always, we have different
    sources of audio assets, but we will use the Asset Store. It has three audio categories
    to search for the assets we need:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于几乎所有的游戏，我们至少需要一个音乐轨道、一个环境轨道和几个音效来开始音频制作。像往常一样，我们有不同的音频资产来源，但我们将使用资产商店。它有三个音频类别来搜索我们需要的资产：
- en: '![A screenshot of a phone  Description automatically generated with low confidence](img/B21361_14_01_PE.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![手机截图  描述自动生成，置信度低](img/B21361_14_01_PE.png)'
- en: 'Figure 14.1: Audio categories in the Asset Store'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：资产商店中的音频类别
- en: 'In my case, I also used the search bar to further filter the categories, searching
    for `weather` to find a rain effect. Sometimes, you can’t find the exact audio
    separately; in such cases, you will need to dig into **Packs** and **Libraries**,
    so have patience here. In my case, I picked the three packages you can see in
    *Figure 14.2* but imported just some of the sounds included, as all of them would
    weigh a lot in the project in terms of size. For ambiance, I picked a rain sound
    file called `Ambience_Rain_Moderate_01_LOOP` in the case of this package, but
    the name of the rain sound we are looking for could be different if you downloaded
    another package. Then, I picked **Music – Sad Hope** for music, and for SFX, I
    picked one gun sound effect package for our future player’s hero character. Of
    course, you can pick other packages to better suit your game’s needs:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我也使用了搜索栏来进一步筛选类别，搜索`weather`以找到雨声效果。有时，你可能找不到单独的精确音频；在这种情况下，你将需要深入到**包**和**库**中，所以在这里要有耐心。在我的情况下，我选择了你可以在*图
    14.2*中看到的三个包，但只导入了其中的一些声音，因为所有这些声音在项目中的大小都会很大。对于环境音，我选择了这个包中的一个名为`Ambience_Rain_Moderate_01_LOOP`的雨声文件，但如果你下载了另一个包，我们寻找的雨声文件名称可能不同。然后，我选择了**音乐
    – 悲伤的希望**作为音乐，对于音效，我选择了一个枪声效果包，用于我们未来玩家的英雄角色。当然，你可以选择其他包以更好地满足你游戏的需求：
- en: '![A screenshot of a music album  Description automatically generated with medium
    confidence](img/B21361_14_02_PE.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![音乐专辑截图  描述自动生成，置信度中等](img/B21361_14_02_PE.png)'
- en: 'Figure 14.2: The packages for our game'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：我们游戏的包
- en: Now that we have the necessary audio packages, let’s discuss how to import them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了必要的音频包，让我们来讨论如何导入它们。
- en: Configuring import settings
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置导入设置
- en: 'We have several import settings we can tweak, but the problem is that we need
    to consider the usage of the audio to properly set it up, so let’s see the ideal
    settings for each case. In order to see the import settings, as always, you can
    select the asset and see it in the **Inspector** panel, as in the following figure:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几种可以调整的导入设置，但问题是我们需要考虑音频的使用情况来正确设置它们，所以让我们看看每种情况下的理想设置。为了查看导入设置，就像往常一样，你可以选择资产并在**检查器**面板中查看，如图下所示：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_03_PE.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  描述自动生成，置信度中等](img/B21361_14_03_PE.png)'
- en: 'Figure 14.3: Audio import settings'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3：音频导入设置
- en: Let’s discuss the most important ones, starting with **Force To Mono**. Some
    audio may come with stereo channels, meaning that we have one sound playing in
    the left ear and another one in the right ear. This means that one piece of audio
    can actually contain two different audio tracks. Stereo sound is useful for different
    effects and instrument spatialization in the case of music, so we want that in
    those scenarios, but there are other scenarios where mono audio is preferred.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最重要的一个开始讨论，即**Force To Mono**。有些音频可能包含立体声通道，这意味着我们在左耳和右耳分别播放不同的声音。这意味着一段音频实际上可以包含两个不同的音频轨道。立体声音在音乐中用于不同的效果和乐器空间化，所以我们希望在那些场景中拥有它，但还有其他场景中单声道音频更受欢迎。
- en: Consider 3D sound effects such as a shooting gun or some walking-pace steps.
    In those cases, we need the sound to be heard in the direction of the source—if
    the shooting of a gun happened to my left, I need to hear it coming from my left.
    In these cases, we can convert stereo audio to mono audio by checking the **Force
    To Mono** checkbox in the audio import settings. This will make Unity combine
    the two channels into a single one, usually reducing the audio to almost half
    its size (sometimes more, sometimes less, depending on various aspects).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑3D音效，例如枪声或某些行走步伐。在这些情况下，我们需要声音在源的方向上被听到——如果枪声发生在我左边，我需要听到它从左边传来。在这些情况下，我们可以通过在音频导入设置中勾选**强制转换为单声道**复选框，将立体声音频转换为单声道音频。这将使Unity将两个通道合并为一个，通常将音频大小减少到原来的一半（有时更多，有时更少，取决于各种因素）。
- en: 'You can verify the impact of that and other settings at the bottom of the audio
    asset Inspector, where you can see the imported audio size:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在音频资产检查器的底部验证该设置和其他设置的影响，在那里你可以看到导入的音频大小：
- en: '![A picture containing text, screenshot, number, font  Description automatically
    generated](img/B21361_14_04_PE.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、截图、数字、字体的图片，自动生成描述](img/B21361_14_04_PE.png)'
- en: 'Figure 14.4: Top: audio imported without Force To Mono. Bottom: same audio
    with Force To Mono'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：顶部：未使用“强制转换为单声道”导入的音频。底部：使用“强制转换为单声道”的相同音频
- en: 'The next setting to discuss, and an important one at that, is **Load Type**.
    In order to play some audio, Unity needs to read the audio from the disk, decompress
    it, and then play it. **Load Type** changes the way those three processes are
    handled. We have the following three options here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要讨论的下一个设置，并且是一个重要的设置，是**加载类型**。为了播放某些音频，Unity需要从磁盘读取音频，解压缩它，然后播放。**加载类型**改变了这三个处理过程的方式。我们这里有以下三个选项：
- en: '**Decompress On Load**: The most memory-intensive option. This mode will make
    Unity load the audio uncompressed in memory when the scene is loaded. That means
    that the audio will take up lots of space in RAM because we have the uncompressed
    version loaded. The advantage of using this mode is that playing the audio is
    easier because we have the raw audio data ready to play in RAM.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载时解压缩**：最占用内存的选项。此模式会在场景加载时，将音频以未压缩的形式加载到内存中。这意味着音频将占用大量的RAM空间，因为我们已经加载了未压缩的版本。使用此模式的优势在于播放音频更简单，因为我们有原始音频数据在RAM中准备好播放。'
- en: '**Streaming**: The total opposite of **Decompress On Load**. This mode never
    loads audio in RAM. Instead, while the audio is playing, Unity reads a piece of
    the audio asset from the disk, decompresses it, plays it, and repeats, running
    this process once for each piece of audio playing in **Streaming**. This means
    that this mode will be CPU-intensive but will consume almost zero bytes of RAM.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流式传输**：与“加载时解压缩”正好相反。此模式永远不会将音频加载到RAM中。相反，当音频播放时，Unity会从磁盘读取音频资产的一部分，解压缩它，播放它，然后重复这个过程，为**流式传输**中播放的每一部分音频运行一次。这意味着此模式将非常占用CPU资源，但几乎不会消耗任何RAM字节。'
- en: '**Compressed in Memory**: The middle ground. This mode will load the audio
    from the disk when the scene is loaded but will keep it compressed in memory.
    When Unity needs to play the audio, it will just take a piece from the RAM, decompress
    it, and play it. Remember that reading pieces of the audio asset from RAM is considerably
    faster than reading from disk.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存中压缩**：中间方案。此模式会在场景加载时从磁盘加载音频，但将其保持压缩状态存储在内存中。当Unity需要播放音频时，它只需从RAM中取出一部分，解压缩它，然后播放。记住，从RAM中读取音频资产的部分比从磁盘读取要快得多。'
- en: 'Maybe, if you are an experienced developer, you can easily determine which
    mode is better suited for which kind of audio, but if this is your first encounter
    with video games, it may sound confusing. So, let’s discuss the best modes for
    different cases:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 也许，如果你是一位经验丰富的开发者，你可以轻松地确定哪种模式更适合哪种类型的音频，但如果你是第一次接触视频游戏，这可能会听起来很困惑。所以，让我们讨论不同情况下的最佳模式：
- en: '**Frequent short audio**: This could be a shooting gun or the sound of footsteps,
    which are sounds that last less than one second but can occur in several instances
    and play at the same time. In such cases, we can use **Decompress On Load**. Uncompressed
    short audio won’t have a huge size difference from its compressed version. Also,
    since this is the most performant CPU option, having several instances won’t have
    a huge impact on performance.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频繁的短音频**：这可能是一声枪响或脚步声，这些声音持续不到一秒，但可以多次发生并同时播放。在这种情况下，我们可以使用**加载时解压缩**。未压缩的短音频与压缩版本的大小差异不会很大。此外，由于这是性能最好的CPU选项，多个实例对性能的影响不会很大。'
- en: '**Infrequent large audio**: This includes music, ambient sound, and dialog.
    These kinds of audio usually have just one instance playing, and they are usually
    big. Those cases are better suited for **Streaming** mode because having them
    compressed or decompressed in RAM can have a huge impact on RAM consumption in
    low-end devices such as mobile devices (on PCs, we can use **Compressed in Memory**
    sometimes). A CPU can handle having two or three bits of audio playing in Streaming
    mode but try to have no more than that.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不频繁的大音频**：这包括音乐、环境声音和对话。这类音频通常只播放一个实例，而且通常很大。这些情况更适合**流式**模式，因为在对这些音频进行压缩或解压缩时，可能会对低端设备（如移动设备）的RAM消耗产生巨大影响（在PC上，我们有时可以使用**内存中压缩**）。CPU可以处理在流式模式下播放两个或三个音频实例，但尽量不要超过这个数量。'
- en: '**Frequent medium audio**: This includes pre-made voice chat dialog in multiplayer
    games, character emotes, long explosions, or any audio that is more than 500 KB
    (that is not a strict rule—this number depends a lot on the target device). Having
    this kind of audio decompressed in RAM can have a noticeable impact on performance,
    but due to the fact that this audio is fairly frequently used, we can have it
    compressed in memory. Their relatively small size means they usually won’t make
    a huge difference in our game’s overall size, and we will avoid wasting CPU resources
    on reading from disk.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频繁的中等音频**：这包括多人游戏中的预制语音聊天对话、角色表情、长爆炸声或任何超过500 KB（这不是一个严格的规定——这个数字很大程度上取决于目标设备）的音频。在RAM中对这类音频进行解压缩可能会对性能产生明显影响，但由于这种音频使用频率较高，我们可以将其压缩存储在内存中。它们相对较小的尺寸意味着它们通常不会对我们游戏的整体大小产生巨大影响，我们也将避免浪费CPU资源从磁盘读取。'
- en: There are other cases to consider, but those can be extrapolated based on the
    previous ones. Remember that the previous analysis was made by taking into account
    the requirements of the standard game, but this can vary a lot according to your
    game and your target device. Maybe you are making a game that won’t consume lots
    of RAM but is pretty intensive in terms of CPU resources, in which case you can
    just put everything in **Decompress On Load**. It’s important to consider all
    aspects of your game and to balance your resources accordingly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他需要考虑的情况，但可以根据前面的例子进行推断。记住，前面的分析是在考虑标准游戏的要求的基础上进行的，但根据你的游戏和目标设备可能会有很大差异。也许你正在制作一个不会消耗太多RAM但CPU资源相当密集的游戏，在这种情况下，你可以将所有内容都设置为**加载时解压缩**。考虑你游戏的各个方面并相应地平衡资源是很重要的。
- en: 'Finally, another thing to consider is the compression format, which will change
    the way Unity will encode the audio in the published game. Different compression
    formats will give different compression ratios in exchange for less fidelity with
    the original audio or higher decompression times, and all this varies a lot based
    on the audio patterns and length. We have three compression formats:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还需要考虑压缩格式，这会改变Unity在发布游戏中对音频的编码方式。不同的压缩格式会以降低原始音频的保真度或增加解压缩时间为代价，提供不同的压缩比率，所有这些都会根据音频模式和长度有很大差异。我们有三种压缩格式：
- en: '**PCM**: The uncompressed format will give you the highest audio quality, with
    no noise artifacts, but will result in a bigger asset file size.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PCM**：未压缩的格式将提供最高的音频质量，没有噪声伪影，但会导致更大的资产文件大小。'
- en: '**ADPCM**: Compressing audio this way reduces file size and yields a fast,
    uncompressing process, but this can introduce noise artifacts that can be noticeable
    in certain types of audio.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ADPCM**：以这种方式压缩音频可以减小文件大小，并产生快速、无压缩的过程，但可能会引入在特定类型音频中可察觉的噪声伪影。'
- en: '**Vorbis**: A high-quality compression format that will yield almost zero artifacts
    but takes longer to decompress, so playing Vorbis audio will be slightly more
    intensive than for other formats. It also provides a quality slider to select
    the exact amount of compression aggressiveness.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vorbis**：一种高质量的压缩格式，几乎不会产生失真，但解压缩所需时间更长，因此播放Vorbis音频会比其他格式稍微复杂一些。它还提供了一个质量滑块，用于选择压缩的精确程度。'
- en: Which one should you use? Again, that depends on the features of your audio.
    Short, smooth audio can use **PCM**, while long, noisy audio can use **ADPCM**;
    the artifacts introduced by this format will be hidden in the audio itself. Maybe
    long, smooth audio where compression artifacts are noticeable could benefit from
    using Vorbis. Sometimes, it’s just a matter of trial and error.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用哪一个呢？同样，这也取决于你音频的特征。短且平滑的音频可以使用**PCM**，而长且嘈杂的音频可以使用**ADPCM**；这种格式引入的失真会被音频本身所隐藏。也许对于压缩失真明显的长且平滑音频，使用Vorbis会有所帮助。有时候，这仅仅是一个试错的过程。
- en: Maybe use Vorbis by default, and when performance is reduced, try to switch
    to **ADPCM**. If that causes glitches, just switch to **PCM**. Of course, the
    problem here is being sure that the audio processing is really what’s responsible
    for the performance issues—maybe switching all audio to **ADPCM** and checking
    whether that made a difference is a good way to detect that, but a better approach
    would be to use the Profiler, a performance measurement tool that we will see
    later in this book.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可能默认使用Vorbis，当性能降低时，尝试切换到**ADPCM**。如果那样导致故障，就切换到**PCM**。当然，这里的问题是确保音频处理确实是性能问题的原因——也许将所有音频切换到**ADPCM**并检查是否有所改变是一个检测的好方法，但更好的方法是使用Profiler，这是一种性能测量工具，我们将在本书的后面看到。
- en: We have other settings, such as **Sample Rate Setting**, that, again with a
    little trial and error, you can use to detect the best setting.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有其他设置，比如**采样率设置**，同样，通过一点试错，你可以找到最佳的设置。
- en: 'I have set up the audio that I downloaded from the Asset Store, as you can
    see in *Figures 14.5* and *14.6*. The first one shows how I set up the music and
    ambient audio files (large files):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经设置了从资产商店下载的音频，如图14.5和14.6所示。第一个图显示了我是如何设置音乐和环境音频文件（大文件）的：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_05_PE.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  描述自动生成，中等置信度](img/B21361_14_05_PE.png)'
- en: 'Figure 14.5: Music and ambient settings'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：音乐和环境设置
- en: The music files, which are large in size, should be configured as stereo (with
    **Force To Mono** left unchecked) and set to use **Streaming** as the Load Type
    since only one instance of them will be playing at a time. For the Compression
    Format, choose **ADPCM**, as using Vorbis did not significantly reduce the file
    size in this case.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐文件体积较大，应配置为立体声（**强制单声道**未勾选）并设置为使用**流式传输**作为加载类型，因为一次只会播放一个实例。对于压缩格式，选择**ADPCM**，因为在这种情况下使用Vorbis并没有显著减小文件大小。
- en: 'This second screenshot shows how I set up the SFX files (small files):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个截图显示了我是如何设置音效文件（小文件）的：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_06_PE.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  描述自动生成，中等置信度](img/B21361_14_06_PE.png)'
- en: 'Figure 14.6: Shooting SFX settings'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：音效设置
- en: The sounds we downloaded will be 3D, so **Force To Mono** should be checked.
    They will also be short, so the **Load Type** named **Decompress On Load** works
    better. Finally, choosing **Vorbis** for **Compression Format** reduced the **ADPCM**
    size by more than half, which is why we picked it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下载的声音将是3D的，所以应该勾选**强制单声道**。它们也将是短声音，所以**加载类型**中的**加载时解压缩**效果更好。最后，选择**Vorbis**作为**压缩格式**可以将**ADPCM**的大小减少一半以上，这就是我们选择它的原因。
- en: Once, I was hired by a team that needed to deliver a project the next day but
    had constant issues with certain audio clips not playing on an iPad 1 (yes, this
    happened a long time ago). They had long, heavy dialogs that were configured to
    use **Load Type** in **Decompress On** Load mode. I just switched to **streaming**
    mode, as those dialogs were played one at a time, fixed the issue, and managed
    to go home early that day. On another occasion, a similar fix applied to the main
    music audio clip of a game reduced loading times from 12 seconds to 5 seconds
    on slow mobile devices. Never underestimate the cost of badly configured audio.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经，我被一家需要第二天交付项目的团队雇佣，但他们经常遇到某些音频剪辑在iPad 1上无法播放的问题（是的，这发生在很久以前）。他们有很长的、很重的对话，配置为使用**加载类型**在**加载时解压缩**模式下。我只是切换到**流式传输**模式，因为那些对话是一次性播放的，解决了问题，并设法提前一天回家。在另一个场合，类似的修复将游戏的主音乐音频剪辑的加载时间从12秒减少到5秒，在慢速移动设备上。永远不要低估配置不当的音频的成本。
- en: Now that we have our pieces of audio properly configured, we can start to use
    them in our scene.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经正确配置了音频片段，我们可以在场景中使用它们。
- en: Integrating and mixing audio
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成和混音音频
- en: We can just drag our bits of audio into our scene to start using them, but we
    can dig a little bit further to explore the best ways to configure them to each
    possible scenario.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接将我们的音频片段拖入场景中开始使用，但我们可以进一步挖掘，探索将它们配置到每个可能场景的最佳方式。
- en: 'In this section, we will examine the following audio integration concepts:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查以下音频集成概念：
- en: Using 2D and 3D AudioSources
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用2D和3D音频源
- en: Using audio mixers
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用音频混音器
- en: Let’s start exploring AudioSources, objects that are in charge of audio playback.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始探索音频源，这些是负责音频播放的对象。
- en: Using 2D and 3D AudioSources
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用2D和3D音频源
- en: '**AudioSources** are components that can be attached to GameObjects. They are
    responsible for emitting sound in our game based on **AudioClips**, which are
    the audio assets we downloaded previously.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**音频源**是可以附加到GameObject上的组件。它们负责根据**音频剪辑**（我们之前下载的音频资产）在我们的游戏中发出声音。'
- en: It’s important to differentiate an AudioClip from an **AudioSource**; we can
    have a single explosion AudioClip but lots of AudioSources playing it, simulating
    several explosions. An AudioSource can be seen as a CD player that can play AudioClips
    (our CDs in this analogy), only with the exception that we can have several CD
    players or AudioSources playing the same CD at the same time (for example, two
    explosion sounds playing at the same time).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 区分**音频剪辑**和**音频源**很重要；我们可以有一个单一的爆炸音频剪辑，但可以有多个音频源播放它，模拟多个爆炸。可以将音频源视为CD播放器，可以播放音频剪辑（在这个类比中是我们的CD），只是我们可以在同一时间有多个CD播放器或音频源播放同一张CD（例如，同时播放两个爆炸声音）。
- en: 'The simplest way to create an **AudioSource** is to pick an **AudioClip** (an
    audio asset) and drag it to the **Hierarchy** window. Try to avoid dragging the
    audio into an existing object; instead, drag it between objects so Unity will
    create a new object with the **AudioSource** instead of adding it to an existing
    object (sometimes, you want an existing object to have the **AudioSource**, but
    let’s keep things simple for now):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建**音频源**的最简单方法是从**音频剪辑**（一个音频资产）中选择并拖动它到**层次结构**窗口。尽量避免将音频拖动到现有对象中；相反，在对象之间拖动它，这样Unity将创建一个新的带有**音频源**的对象，而不是将其添加到现有对象中（有时，您可能希望现有对象具有**音频源**，但现在让我们保持简单）：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_07_PE.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述由中等置信度自动生成](img/B21361_14_07_PE.png)'
- en: 'Figure 14.7: Dragging an AudioClip to the Hierarchy window between objects'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：将音频剪辑拖动到对象之间的层次结构窗口
- en: 'The following screenshot shows the **AudioSource** generated by dragging the
    music asset to the scene. You can see that the **AudioClip** field has a reference
    to the dragged audio:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了通过将音乐资产拖动到场景中生成的**音频源**。您可以看到**音频剪辑**字段有一个对拖动音频的引用：
- en: '![A screenshot of a computer  Description automatically generated](img/B21361_14_08_PE.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述自动生成](img/B21361_14_08_PE.png)'
- en: 'Figure 14.8: AudioSource configured to play our music asset'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8：配置为播放我们的音乐资产的音频源
- en: 'As you can see, the **AudioSource** has several settings, so let’s review the
    common ones in the following list:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，**音频源**有多个设置，以下列表中我们将回顾一些常见的设置：
- en: '**Play on Awake**: Determines whether the audio starts playing automatically
    when the game starts. We can uncheck that and play the audio via scripting, perhaps
    when the player shoots or jumps (more on that in *Section 3*, *Elevating Visuals,
    Effects, and Audio of the book*).'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唤醒时播放**：确定音频是否在游戏开始时自动播放。我们可以取消选中该选项，并通过脚本播放音频，例如当玩家射击或跳跃时（更多内容请参阅*第3节*，*提升书籍的视觉效果、效果和音频*）。'
- en: '**Loop**: This will make the audio repeat automatically when it finishes playing.
    Remember to always check this setting on the music and ambient audio clips. It
    is easy to forget this because those tracks are long, and we may never reach the
    end of them in our tests.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环**：这将使音频在播放结束后自动重复。请记住，始终在音乐和环境音频剪辑上检查此设置。由于这些曲目很长，我们可能在测试中永远无法到达它们的结尾，因此很容易忘记这一点。'
- en: '**Volume**: Controls the audio intensity.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音量**：控制音频强度。'
- en: '**Pitch**: Controls the audio velocity. This is useful for simulating effects
    such as slow motion or the increasing revolutions of an engine.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音调**：控制音频速度。这对于模拟慢动作或发动机转速增加等效果很有用。'
- en: '**Spatial Blend**: Controls whether our audio is 2D or 3D. In 2D mode, the
    audio will be heard at the same volume at all distances, while 3D will make the
    audio volume decrease as the distance from the Camera (or whichever GameObject
    is holding the AudioListener component) increases.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间混合**：控制我们的音频是2D还是3D。在2D模式下，音频将在所有距离上以相同的音量播放，而3D将使音频音量随着从相机（或任何持有AudioListener组件的GameObject）的距离增加而减小。'
- en: 'In the case of our music track, I have configured it as shown in the following
    screenshot. You can drag the ambient rain sound to add it to the scene and use
    the same settings as these because we want the same ambient effect in all our
    scenes. In complex scenes, though, you can have different 3D ambient sounds scattered
    all over the scene to change the sound according to the current environment:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的音乐曲目中，我已经按照以下截图所示进行配置。您可以将环境雨声拖动到场景中，并使用相同的设置，因为我们希望所有场景中都有相同的背景效果。然而，在复杂的场景中，您可以在场景的各个部分分散不同的3D环境声音，以根据当前环境改变声音：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_09_PE.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  描述由中等置信度自动生成](img/B21361_14_09_PE.png)'
- en: 'Figure 14.9: Music and ambient settings. This will loop, is set to Play on
    Awake, and is 2D'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9：音乐和环境设置。这将循环，设置为唤醒时播放，并且是2D
- en: Now, you can drag the shooting effect and configure it, as shown in *Figure
    14.10*. As you can see, the audio, in this case, won’t loop because we want the
    shooting effect to play once per bullet. Remember that, for our game, the bullet
    will be a Prefab that will spawn each time we press the shoot key, so each bullet
    will have its own **AudioSource** that will play when the bullet is created.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将射击效果拖动并配置，如图*图14.10*所示。如您所见，在这种情况下，音频不会循环，因为我们希望射击效果每次只播放一次子弹。请记住，对于我们的游戏，子弹将是一个Prefab，每次我们按下射击键时都会生成，因此每个子弹都将有自己的**AudioSource**，当子弹被创建时将播放。
- en: 'Also, the bullet has **Spatial Blend** set to **3D**, meaning that the effect
    will be transmitted through different speakers based on the position of the **AudioSource**
    against the camera position:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，子弹的**空间混合**设置为**3D**，这意味着效果将根据**AudioSource**相对于相机位置的不同而通过不同的扬声器传递：
- en: '![A screenshot of a music player  Description automatically generated with
    low confidence](img/B21361_14_10_PE.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![音乐播放器截图  描述由低置信度自动生成](img/B21361_14_10_PE.png)'
- en: 'Figure 14.10: Sound effect setting. This won’t loop and is a 3D sound'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10：音效设置。这将不会循环，并且是3D声音
- en: Something to consider in the case of 3D sounds is the **Volume Rolloff** setting,
    which is inside the **3D Sound Settings** section. This setting controls how the
    volume decays as the distance from the camera increases. By default, you can see
    that this setting is set to **Logarithmic Rolloff**, the way real-life sound works,
    but sometimes you don’t want real-life sound decay because sounds in real life
    are usually heard slightly, even if the source is very far away.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在3D声音的情况下，需要考虑的是**音量衰减**设置，该设置位于**3D声音设置**部分。此设置控制音量如何随着与相机的距离增加而衰减。默认情况下，您可以看到此设置设置为**对数衰减**，这是现实生活中声音的工作方式，但有时您可能不希望现实生活中的声音衰减，因为现实生活中即使声音来源非常远，声音通常也能听到。
- en: 'One option is to switch to **Linear Rolloff** and configure the exact maximum
    distance with the **Max Distance** setting:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是切换到**线性衰减**并使用**最大距离**设置配置确切的距离：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_11_PE.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，描述自动生成，置信度中等](img/B21361_14_11_PE.png)'
- en: 'Figure 14.11: A 3D sound with a maximum distance of 10 meters, using Linear
    Rolloff'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.11：使用线性衰减的最大距离为10米的3D声音
- en: 'Considering we just discussed 3D sounds, it is worth mentioning the **AudioListener**
    component, one that is created by default in the **MainCamera**, and 99% of the
    time, this component will be placed in the **MainCamera**. It serves as a way
    to identify which object represents the ears of the player in the world, with
    which we can calculate audio directionality. The camera is the logical place to
    put it, given it represents the eyes of the user, and having the eyes and the
    ears of the player in different places would be confusing. There are no properties
    to configure in the **AudioListener** component, but it is important to mention
    that in order for audio to work, we need one and no more than one; we have just
    one pair of ears:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们刚刚讨论了3D声音，值得提一下**AudioListener**组件，这是一个默认在**MainCamera**中创建的组件，99%的情况下，这个组件会被放置在**MainCamera**中。它作为识别在游戏中哪个对象代表玩家耳朵的一种方式，通过它可以计算音频方向性。由于它代表用户的眼睛，所以将摄像头作为放置它的逻辑位置，如果玩家的眼睛和耳朵在不同的地方，将会很令人困惑。在**AudioListener**组件中没有可配置的属性，但重要的是要提到，为了让音频工作，我们需要一个，而且不能超过一个；我们只有一对耳朵：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_12_PE.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，描述自动生成，置信度中等](img/B21361_14_12_PE.png)'
- en: 'Figure 14.12: AudioListener component in the MainCamera'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.12：MainCamera中的AudioListener组件
- en: Now that we can configure individual pieces of audio, let’s see how to apply
    effects to groups of audio instances using an **Audio Mixer**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够配置单个音频片段，让我们看看如何使用**音频混音器**应用效果到音频实例的组。
- en: Using an Audio Mixer
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用音频混音器
- en: 'We will have several audio instances playing all over our game: the footsteps
    of characters, shooting, bonfires, explosions, rain, and so on. Controlling exactly
    which sounds are supposed to sound louder or quieter depending on the context
    and applying effects to reinforce certain situations, such as being stunned due
    to a nearby explosion, is called audio mixing—the process of mixing several sounds
    together in a cohesive and controlled way.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整个游戏中播放多个音频实例：角色的脚步声、射击、篝火、爆炸、雨等等。根据上下文精确控制哪些声音应该更响或更轻，以及应用效果以增强某些情况，例如由于附近的爆炸而受到惊吓，这被称为音频混音——以统一和受控的方式将多个声音混合在一起的过程。
- en: In Unity, we can create an Audio Mixer, an asset that we can use to define groups
    of sounds. All changes to a group will affect all sounds inside it by raising
    or lowering the volume, perhaps, or by applying an effect. You can have SFX and
    music groups control sounds separately. For example, you could lower the SFX volume
    in the **Pause** menu but not the music volume. Also, groups are organized in
    a hierarchy, where a group can also contain other groups, so a change in a group
    will also apply changes to its sub-groups. As a matter of fact, every group you
    create will always be a child group of the master group, the group that controls
    every single sound in the game (that uses that mixer).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，我们可以创建一个音频混音器，这是一个我们可以用来定义声音组的资产。对任何组的所有更改都会通过提高或降低音量，或许，或者通过应用效果来影响组内的所有声音。你可以让SFX和音乐组分别控制声音。例如，你可以在**暂停**菜单中降低SFX音量，但不降低音乐音量。此外，组以层次结构组织，其中组也可以包含其他组，因此对组的更改也会应用到其子组。实际上，你创建的每个组都将始终是主组的子组，即控制游戏中每个声音（使用该混音器）的组。
- en: 'Let’s create a mixer with SFX and music groups:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含SFX和音乐组的混音器：
- en: In the **Project** window, using the **+** button, select the **Audio Mixer**
    option. Name the asset as you wish; in my case, I chose `Main Mixer`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**窗口中，使用**+**按钮，选择**音频混音器**选项。根据需要命名资产；在我的情况下，我选择了`Main Mixer`。
- en: 'Double-click the created asset to open the **Audio Mixer** window:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击创建的资产以打开**音频混音器**窗口：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_13_PE.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，描述自动生成，置信度中等](img/B21361_14_13_PE.png)'
- en: 'Figure 14.13: Audio Mixer window'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.13：音频混音器窗口
- en: 'Click the **+** button at the right of the **Groups** label to create a child
    group of the master node. Name it `SFX`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Groups**标签右侧的**+**按钮，创建主节点的子组。命名为`SFX`：
- en: '![](img/B21361_14_14_PE.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21361_14_14_PE.png)'
- en: 'Figure 14.14: Group creation'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.14：创建组
- en: 'Click on the **Master** group and click again on the **+** button to create
    another master node child group called `Music`. Remember to select the **Master**
    group before clicking the **+** button because if another group is selected, the
    new group will be a child of that one. Anyway, you can rearrange a group child-parent
    relationship by dragging the group in the **Groups** panel in the **AudioMixer**
    window:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主**组，然后再次点击**+**按钮以创建另一个名为`音乐`的主节点子组。记住在点击**+**按钮之前选择**主**组，因为如果选择了另一个组，新组将成为该组的子组。无论如何，您可以通过在**AudioMixer**窗口的**组**面板中拖动组来重新排列组子父关系：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_15_PE.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，自动生成中等置信度的描述](img/B21361_14_15_PE.png)'
- en: 'Figure 14.15: The Master, SFX, and Music groups'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.15：主、SFX 和音乐组
- en: Select the **Music** GameObject of our scene back in the **Hierarchy** window
    and look for the **AudioSource** component in the **Inspector** window.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**窗口中，选择我们场景中的**音乐**GameObject，并在**检查器**窗口中查找**AudioSource**组件。
- en: 'Click the circle to the right of the **Output** property to open the **AudioMixerGroup**
    selector window and select the **Music** group. This will make that **AudioSource**
    affected by the settings on the specified **Mixer** group:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**输出**属性右侧的圆圈以打开**AudioMixerGroup**选择器窗口并选择**音乐**组。这将使受影响的**AudioSource**受到指定**混音器**组设置的约束：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_16_PE.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，自动生成中等置信度的描述](img/B21361_14_16_PE.png)'
- en: 'Figure 14.16: Making an AudioSource belong to an Audio Mixer group'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.16：使 AudioSource 属于 Audio Mixer 组
- en: 'If you play the game now, you can see how the volume meters in the **Audio
    Mixer** window start to move, indicating that the music is going through the **Music**
    group. You will also see that the **Master** group volume meter is also moving,
    indicating that the sound that is passing through the **Music** group is also
    passing through the **Master** group (the parent of the **Music** group) before
    going to the sound card of your computer:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在玩游戏，你可以看到**音频混音器**窗口中的音量表开始移动，表明音乐正在通过**音乐**组。你也会看到**主**组音量表在移动，表明通过**音乐**组传递的声音也在通过**主**组（**音乐**组的父组）之前传递到你的电脑的声卡：
- en: '![A picture containing text, screenshot, diagram  Description automatically
    generated](img/B21361_14_17_PE.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、图表的图片，自动生成的描述](img/B21361_14_17_PE.png)'
- en: 'Figure 14.17: Group volume levels'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.17：组音量级别
- en: Repeat *steps 5* and *6* for the ambient and shooting sounds to make them belong
    to the **SFX** group.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对环境声和拍摄声音重复*步骤 5*和*步骤 6*，使它们属于**SFX**组。
- en: Now that we have separated our sounds into groups, we can start adjusting the
    groups’ settings. But before doing that, we need to take into account the fact
    that we won’t want the same settings all the time, as in the previously mentioned
    pause menu case, where the SFX volume should be lower. To handle those scenarios,
    we can create snapshots, which are presets of our mixer that can be activated
    via scripting during our game. We will deal with the scripting steps in *Section
    3*, *Elevating Visuals, Effects, and Audio* of this book, but we can create a
    normal snapshot for the in-game settings and a pause snapshot for the pause menu
    settings.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将声音分成了组，我们可以开始调整组的设置。但在做之前，我们需要考虑到我们不会一直想要相同的设置，就像之前提到的暂停菜单案例中，SFX 音量应该更低。为了处理这些场景，我们可以创建快照，这些是我们的混音器的预设，可以在游戏运行期间通过脚本激活。我们将在本书的*第
    3 部分*，*提升视觉效果、效果和音频*中处理脚本步骤，但我们可以为游戏设置创建一个正常快照，为暂停菜单设置创建一个暂停快照。
- en: 'If you check the **Snapshots** list, you will see that a single snapshot has
    already been created—that can be our normal snapshot. So, let’s create a pause
    snapshot by doing the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查**快照**列表，您将看到已经创建了一个快照——这可以是我们的正常快照。因此，让我们通过以下步骤创建一个暂停快照：
- en: Click on the **+** button to the right of the **Snapshots** label and call the
    snapshot `Pause`. Remember to stop the game to edit the mixer or click the **Edit
    in Playmode** option to allow Unity to change the mixer during play. If you do
    the latter, remember that the changes will persist when you stop the game, unlike
    changes to GameObjects. Actually, if you change other assets during **Play** mode,
    those changes will also persist—only GameObject changes are reverted.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“快照”标签右侧的**+**按钮，并将快照命名为“暂停”。记住停止游戏以编辑混音器或点击“**在播放模式中编辑**”选项，以允许 Unity 在播放时更改混音器。如果你选择后者，请记住，停止游戏时更改将保持不变，这与
    GameObject 的更改不同。实际上，如果在**播放**模式期间更改其他资产，这些更改也将保持不变——只有 GameObject 的更改会被撤销。
- en: '![A picture containing text, font, number, line  Description automatically
    generated](img/B21361_14_18_PE.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、字体、数字、行的图片，描述自动生成](img/B21361_14_18_PE.png)'
- en: 'Figure 14.18: Snapshot creation'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.18：快照创建
- en: 'Select the **Pause** snapshot and lower the volume slider of the **SFX** group:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**暂停**快照并降低**SFX**组的音量滑块：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_19_PE.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成，置信度中等](img/B21361_14_19_PE.png)'
- en: 'Figure 14.19: Lowering the volume of the Pause snapshot'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.19：降低暂停快照的音量
- en: Play the game and hear how the sound is still at its normal volume. That’s because
    the original snapshot is the default one—you can see that by checking for the
    star to its right. You can right-click any snapshot and make it the default one
    using the **Set as Start Snapshot** option.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放游戏并听一下声音是否仍然处于正常音量。这是因为原始快照是默认的——您可以通过检查其右侧的星号来看到这一点。您可以通过右键单击任何快照并使用**设置为起始快照**选项将其设置为默认快照。
- en: Click on **Edit in** **Playmode** to enable **Audio Mixer** modification during
    runtime.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**在播放模式中编辑**以在运行时启用**音频混音器**的修改。
- en: Click on the **Pause** snapshot to enable it and hear how the **Shooting** and
    **Ambient** sound volumes have decreased.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**暂停**快照以启用它并听一下**射击**和**环境**声音量是如何降低的。
- en: 'As you can see, one of the main uses of the mixer is to control group volume,
    especially when you see that the intensity of a group’s volume is going higher
    than the 0 mark, indicating that the group is too loud. Anyway, there are other
    uses for the mixer, such as applying effects. If you’ve played any war game, you
    will have noticed that whenever a bomb explodes nearby, you hear the sound differently
    for a moment, as if the sound were located in another room. That can be accomplished
    using an effect called **Low Pass**, which blocks high-frequency sounds, and that’s
    exactly what happens with our ears in those scenarios: the stress of the high-volume
    sound generated by an explosion irritates our ears, making them less sensitive
    to high frequencies for a while.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，混音器的主要用途之一是控制组音量，尤其是在您看到某个组的音量强度超过 0 标记时，这表明该组声音太大。无论如何，混音器还有其他用途，例如应用效果。如果您玩过任何战争游戏，您会注意到每当附近发生爆炸时，您会暂时听到不同的声音，好像声音位于另一个房间。这可以通过一个名为**低通**的效果来实现，它阻止高频声音，这正是我们耳朵在这些场景中发生的情况：爆炸产生的高音量声音的压力会刺激我们的耳朵，使它们对高频的敏感性降低一段时间。
- en: 'We can add effects to any channel and configure them according to the current
    snapshot, just as we did for the volume, by doing the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向任何通道添加效果，并根据当前快照进行配置，就像我们对音量所做的那样，方法如下：
- en: 'Click on the **Add** button at the bottom of the **Master** group and select
    **Lowpass Simple**:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主**组底部的**添加**按钮，并选择**低通简单**：
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B21361_14_20_PE.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成，置信度低](img/B21361_14_20_PE.png)'
- en: 'Figure 14.20: The effects list of a channel'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.20：通道的效果列表
- en: Select the normal snapshot (the one called `Snapshot`) to modify it.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择正常快照（称为“快照”）以修改它。
- en: Select the **Master** group and look at the **Inspector** panel, where you will
    see settings for the group and its effects.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**主**组并查看**检查器**面板，在那里您将看到组及其效果的设置。
- en: Set the **Cutoff freq** property of the **Lowpass Simple** settings to the highest
    value (`22000`), and this will disable the effect.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**低通简单**设置的**截止频率**属性设置为最高值（`22000`），这将禁用该效果。
- en: Repeat *steps 3* and *4* for the **Pause** snapshot; we don’t want this effect
    in that snapshot.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对**暂停**快照重复*步骤 3*和*步骤 4*；我们不希望在该快照中应用此效果。
- en: Create a new snapshot called **Bomb Stun** and select it to edit it.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的快照，命名为**炸弹昏迷**，并选择它进行编辑。
- en: 'Set **Cutoff freq** to `1000`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Cutoff freq**设置为`1000`：
- en: '![A screenshot of a music mixer  Description automatically generated with low
    confidence](img/B21361_14_21_PE.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![音乐混音器的截图，描述由低置信度自动生成](img/B21361_14_21_PE.png)'
- en: 'Figure 14.21: Setting the cutoff frequency of the Lowpass Simple effect'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.21：设置低通简单效果的截止频率
- en: Play the game and change between snapshots to check the difference.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩游戏并切换快照以检查差异。
- en: 'As you can see, **Low Pass** makes the audio sound like there’s a wall between
    the sources and the listener. Aside from the Low Pass filter, you can apply several
    other filters, such as **Echo**, to create an almost dreamy effect, or a combination
    of **Send**, **Receive**, and **Duck** to make a group lower its volume based
    on the intensity of another group (for instance, you may want to lower SFX volume
    when dialogue is happening). I invite you to try those and other effects and check
    the results to identify potential uses by reading the following documentation:
    [https://docs.unity3d.com/Manual/class-AudioEffectMixer.html](https://docs.unity3d.com/Manual/class-AudioEffectMixer.html).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，**低通**使音频听起来像在源和听众之间有一堵墙。除了低通滤波器之外，您还可以应用其他几个过滤器，例如**回声**，以创建几乎梦幻般的效果，或者使用**发送**、**接收**和**降低**的组合来根据另一个组的强度降低一个组的音量（例如，当对话发生时，您可能希望降低SFX音量）。我邀请您尝试这些和其他效果，并通过阅读以下文档来检查结果以确定潜在用途：[https://docs.unity3d.com/Manual/class-AudioEffectMixer.html](https://docs.unity3d.com/Manual/class-AudioEffectMixer.html)。
- en: Now that we have integrated the audio, let’s see how we can script our audio.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经集成了音频，让我们看看我们如何可以脚本化我们的音频。
- en: Scripting audio feedback
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本化音频反馈
- en: 'As with the VFX, audio also needs to react to what is happening in the game
    to give a better sense of immersion. Let’s start adding sound to the explosion
    effect that enemies spawn when they die, which doesn’t necessarily need scripting
    itself but is a result of the script that spawned the explosion in the first place:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与VFX一样，音频也需要对游戏中的事件做出反应，以提供更好的沉浸感。让我们开始添加声音到敌人死亡时产生的爆炸效果，这本身可能不需要脚本，但它是最初产生爆炸的脚本的产物：
- en: Download an explosion sound effect from the internet or the Asset Store.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从互联网或资产商店下载爆炸音效。
- en: Select the **Explosion** prefab we spawn when the enemies die and add an **AudioSource**
    to it.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择敌人死亡时产生的**爆炸**预制体，并向其添加一个**AudioSource**。
- en: Set the downloaded explosion’s audio clip as the **AudioClip** property of the
    **Audio Source**.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的爆炸音频剪辑设置为**Audio Source**的**AudioClip**属性。
- en: 'Make sure **Play On Awake** is checked and **Loop** is unchecked under **Audio
    Source.** That will make the sound be played when the explosion begins, and prevent
    the sound from looping again and again once it finishes:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**Audio Source**下**Play On Awake**被勾选，**Loop**未被勾选。这将使声音在爆炸开始时播放，并防止声音在完成后重复播放：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B21361_14_22_PE.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图，描述由中等置信度自动生成](img/B21361_14_22_PE.png)'
- en: 'Figure 14.22: Adding sounds to our explosion effect'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.22：为我们的爆炸效果添加声音
- en: 'As you can see here, we didn’t need to use any script because we activated
    **Play On Awake** on the Audio Source. As the sound is added to the Prefab, it
    will be played automatically at the very moment the Prefab is instantiated. Now,
    let’s integrate the shooting sound by doing the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们不需要使用任何脚本，因为我们已经在Audio Source上激活了**在唤醒时播放**。由于声音被添加到预制体中，它将在预制体实例化的那一刻自动播放。现在，让我们通过以下方式集成射击声音：
- en: Download a shooting sound and add it through an Audio Source to the player’s
    weapon muzzle effect (not the weapon), this time unchecking the **Play On Awake**
    checkbox.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载射击声音，并通过Audio Source将其添加到玩家的武器枪口效果（而不是武器）中，这次不勾选**Play On Awake**复选框。
- en: In the `PlayerShooting` script, create a field of the `AudioSource` type called
    **shootSound**. This way our script has access to the component and can manipulate
    when it plays sounds and when it doesn’t.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PlayerShooting`脚本中，创建一个名为**shootSound**的`AudioSource`类型的字段。这样我们的脚本就可以访问组件，并可以控制何时播放声音以及何时不播放。
- en: Select **Player** in the **Hierarchy** and drag the weapon muzzle effect GameObject
    to the **Shoot Sound** property in the **Inspector** to connect the script with
    the `AudioSource` variable in the weapon muzzle effect.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择**玩家**，将武器枪口效果 GameObject 拖到**检查器**中的**射击声音**属性，以将脚本与武器枪口效果的 `AudioSource`
    变量连接起来。
- en: 'In the `if` statement that checks whether we can shoot, add the `shootSound.Play();`
    line to execute the sound when shooting:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查我们是否可以射击的 `if` 语句中，添加 `shootSound.Play();` 行以在射击时执行声音：
- en: '![Text  Description automatically generated](img/B21361_14_23_PE.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、电子设备、屏幕截图的图片，自动生成描述](img/B21361_14_23_PE.png)'
- en: 'Figure 14.23: Adding sound when shooting'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.23：射击时添加声音
- en: 'The Visual Scripting additional nodes would look like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉脚本附加节点看起来将是这样：
- en: '![A picture containing text, electronics, screenshot  Description automatically
    generated](img/B21361_14_24_PE.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、电子设备、屏幕截图的图片，自动生成描述](img/B21361_14_24_PE.png)'
- en: 'Figure 14.24: Adding sound when shooting in Visual Scripting'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.24：在视觉脚本中射击时添加声音
- en: As we did with the muzzle effect, we added a GameObject variable called `shootSound`
    to reference the weapon GameObject that contains the Audio Source, and then we
    called the **Play** method of the `shootSound` variable.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在枪口效果中所做的那样，我们添加了一个名为 `shootSound` 的 GameObject 变量来引用包含音频源的武器 GameObject，然后我们调用
    `shootSound` 变量的 **Play** 方法。
- en: 'I challenge you to try adding shooting sounds to the enemy AI in both C# and
    Visual Scripting versions of the scripts. Take as a guide what we did in *Chapter
    11*, *Captivating Visual Effects: Harnessing Particle Systems and VFX Graph*,for
    the muzzle effect, and in any case, you can always check the Git repository of
    the book (the link can be found in the *Preface*) for the solution.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我挑战你尝试在 C# 和视觉脚本版本的脚本中为敌方 AI 添加射击声音。以第 11 章*引人入胜的视觉效果：利用粒子系统和 VFX 图形*中我们处理枪口效果的做法为指南，无论如何，你都可以查看本书的
    Git 仓库（可在*前言*中找到链接）以获取解决方案。
- en: Another approach to this would be the same as the one we did with the explosion;
    just add the shooting sound to the bullet, but if the bullet collides with a wall,
    soon enough, the sound will be cut off. Or, if in the future we want an automatic
    weapon sound, it will need to be implemented as a single looping sound that starts
    when we press the relevant key and stops when we release it. This way, we prevent
    too many sound instances from overlapping when we shoot too many bullets. Take
    into account those kinds of scenarios when choosing the approach to script your
    feedback.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种处理方法将与我们在爆炸处理中使用的方法相同；只需将射击声音添加到子弹上，但如果子弹与墙壁碰撞，声音很快就会切断。或者，如果我们未来想要自动武器的声音，它需要实现为一个循环播放的声音，当我们按下相关键时开始播放，当我们释放键时停止播放。这样，我们就可以防止在射击过多子弹时声音实例重叠过多。在选择编写反馈脚本的方法时，要考虑到这些类型的场景。
- en: 'Another way to boost your audio immersion is through audio spatialization.
    It’s an advanced topic, but you can learn more about it here: [https://docs.unity3d.com/Manual/AudioSpatializerSDK.html](https://docs.unity3d.com/Manual/AudioSpatializerSDK.html)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 提升音频沉浸感的另一种方式是通过音频空间化。这是一个高级话题，但你可以在这里了解更多信息：[https://docs.unity3d.com/Manual/AudioSpatializerSDK.html](https://docs.unity3d.com/Manual/AudioSpatializerSDK.html)
- en: This is especially useful in VR and AR applications for fully immersing users
    in the virtual world.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 VR 和 AR 应用程序中特别有用，可以完全沉浸用户在虚拟世界中。
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how to import and integrate sounds, considering
    their impact on memory usage, and we considered how to apply effects to generate
    different scenarios. Sound is a big part of achieving the desired game experience,
    so take the proper amount of time to get it right.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何导入和集成声音，考虑到它们对内存使用的影响，并考虑了如何应用效果以生成不同的场景。声音是实现所需游戏体验的重要组成部分，因此请花适当的时间来确保其正确性。
- en: Now that we have covered almost all of the vital aesthetic aspects of our game,
    let’s create another form of visual communication, the user interface or UI. We
    will create the necessary UI to display the player’s current score, bullets, life,
    and lots more info in the next chapter.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了游戏几乎所有重要的美学方面，让我们创建另一种形式的视觉沟通，即用户界面或 UI。我们将在下一章创建必要的 UI 来显示玩家的当前得分、子弹、生命值以及更多信息。
- en: Learn more on Discord
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'Read this book alongside other users, Unity game development experts, and the
    author himself. Ask questions, provide solutions to other readers, chat with the
    author via Ask Me Anything sessions, and much more. Scan the QR code or visit
    the link to join the community:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、Unity游戏开发专家以及作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过“问我任何问题”的环节与作者聊天，以及更多。扫描二维码或访问链接加入社区：
- en: '[https://packt.link/unitydev](https://packt.link/unitydev)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/unitydev](https://packt.link/unitydev)'
- en: '![](img/QR_Code1498477041053909218.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code1498477041053909218.png)'
