- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Foundational Knowledge of Unity 2022
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting started in Unity 2022 is easy with **Unity Hub**. Unity Hub serves a
    few very useful purposes, and we’ll be going through installing it and learning
    about its features. In this chapter, we’ll not only install Unity Hub and the
    **Unity Editor**, but we’ll also break down the different templates that are available
    to kickstart your game and AR/VR projects.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to templates that provide a starting foundation for your new project,
    Unity also provides added functionality through the Package Manager. The Package
    Manager allows Unity to give a small project size footprint and not bloat the
    Editor with a default installation of unneeded or unwanted tooling (referring
    to relatively simple add-on programs that combine to accomplish a task). Being
    familiar with and understanding what packages are available will surely help save
    time and increase the quality of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Finding your way around the Unity Editor is only half an introduction. The second
    half of this chapter teaches you how to create content and make things interactable.
    We’ll do this by first creating a simple 2D character right in the Editor using
    built-in tooling. This all starts with the **GameObject** – Unity’s building block.
  prefs: []
  type: TYPE_NORMAL
- en: The book takes a project-based approach to learning, so we’ll walk through designing
    a game, creating a game, and solving problems along the way.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’re going to cover the following main topics.
  prefs: []
  type: TYPE_NORMAL
- en: Unity Hub – choosing the **2D Universal Render Pipeline (****URP) template**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting to know the Unity Editor and installing packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the GameObject! All about the **Transform** and **components**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2D Sprites** with **Sprite Creator** – understanding the **Sprite Renderer**
    and draw ordering'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game Design Document** (**GDD**) – introducing the 2D collection game'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll be able to create a new Unity project, be
    comfortable finding your way around the Unity Editor, understand the initial criteria
    for a game design document, and be prepared to create the **2D Sprite**-based
    character that is the first element of our game.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along in this chapter, you’ll need a computer with Windows 7+ 64-bit,
    Mac OS X 10.12+, or Linux (Ubuntu 16.04, 18.04, and CentOS 7) running. You’ll
    need sufficient free hard drive space for not only the Unity Editor installation
    but also the project files. We recommend 25 GB for the Unity install folder, with
    3 GB of free space for the installation temp files (the temp files are usually
    located on your OS installation drive), and 10 GB should be sufficient for the
    project files.
  prefs: []
  type: TYPE_NORMAL
- en: Unity Hub – Choosing the 2D URP template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Unity Hub makes it simple to manage the installed Unity Editor versions
    and add or remove modules for installed Editors, and it helps manage your different
    projects. If you’re entirely new to Unity, then that previous sentence might be
    a bit confusing. Why would we have to manage different installed Editors? Simply
    put, software changes. As the Unity Editor evolves, it introduces new features
    and changes to its scripting API.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: As a general rule of thumb, you should not upgrade the Unity Editor version
    for your project once you’ve started production. Doing so can have undesirable
    effects, such as broken renderings or code that no longer compiles. We’ll discuss
    this more in the following sections when installing the Unity Editor and selecting
    our project template.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Unity Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s get started on our journey by first getting Unity Hub installed. We’ll
    be using the **Unity Personal** license throughout this book, which is the free
    version of Unity. Free here doesn’t mean we will be limited in features or capabilities
    in building our games. It just means you are only allowed to use this version
    for free if you fall under the criteria for requiring a paid license (if you earned
    less than $100K of revenue or funds raised in the last 12 months).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you are an eligible student, you may want to check out the **Unity Student
    plan** at [https://unity.com/products/unity-student](https://unity.com/products/unity-student).
    It provides access to **Unity Pro**, a selection of quality assets, and **Unity
    Gaming Services**, such as **Cloud Build**, that professionals and studios building
    games use on Unity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let’s do this. Perform the following steps to install the Unity Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://unity.com/download](https://unity.com/download) and select the
    download link for your OS. This will download `UnityHubSetup.exe` to your `Downloads`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the executable from your web browser, navigate to your `Downloads`
    folder, and double-click the executable to launch the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the defaults or change the installation path if you want to install to
    a different hard drive location (only use local drives and not network drives,
    as this could cause problems).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking **Install** and letting the installation process complete, click
    **Finish** to run Unity Hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When opening Unity Hub for the first time, you will be prompted to **Sign in**
    or **Create account** if you have not created one already. Your Unity account,
    known as **Unity ID**, will be used for licensing. Unity requires an active license
    to install the Unity Editor. The Personal Edition license is free, and Unity Hub
    will generate one for you.
  prefs: []
  type: TYPE_NORMAL
- en: With Unity Hub now installed, let’s continue installing the Unity Editor.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Unity Editor – What version?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have a new installation of Unity Hub and are now ready to install a Unity
    Editor version. As previously mentioned, Unity Hub allows you to have multiple
    versions of the Unity Editor installed to manage the different projects you’ll
    create over time. Opening Unity Hub without any Editor version installed will
    default to prompting the latest Unity Editor version in the **LTS** stream to
    be installed. LTS simply means **long-term support**. This is usually the best
    version choice to lock in and base a new project on because it will be the most
    stable version available and is guaranteed to be supported for the next two years.
    To ensure stability with the LTS version, no new features are added to the tooling
    or scripting API. If you want to create with the latest engine features, you’ll
    have to choose one of the newer **tech streams** since no additional tools or
    technologies will be introduced in the LTS stream.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, simply stated, what does this mean?
  prefs: []
  type: TYPE_NORMAL
- en: If you’re starting production today or about to ship, and you desire stability
    and support over the lifetime of your development and release cycle, choose the
    LTS stream. At the time of writing, this is 2020.3 LTS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re starting production today but want to leverage newer tools and technology,
    and the latest official release version is close to becoming the new LTS stream,
    choose the latest official release version. At the time of writing, this is 2021.2
    (becoming the latest LTS stream when 2021.3 is officially released).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to create on the cutting edge of the tools and technology available
    and don’t mind managing potential crashes and bugs, then choose the latest pre-release
    (beta) version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This book is written specifically for Unity 2022\. If you have an earlier version
    of Unity already installed, then the instructions or features may differ, so it
    may be difficult – or impossible – to follow along. We recommend installing the
    latest version of Unity 2022 to complete the projects we’ll create in the following
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To gauge your production schedule against the Unity LTS releases, refer to
    the following timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Unity platform release timeline](img/B18347_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Unity platform release timeline
  prefs: []
  type: TYPE_NORMAL
- en: Unity provides detailed LTS release information on the **Unity QA** resources
    page at [https://unity3d.com/unity/qa/lts-releases](https://unity3d.com/unity/qa/lts-releases).
  prefs: []
  type: TYPE_NORMAL
- en: 'Proceed to install the Unity 2022 Editor with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve just finished installing Unity Hub, you’ll be prompted to install
    the latest LTS version of the Unity Editor. We want to install a Unity 2022 release
    specifically, so proceed by clicking **Skip installation** in the lower-right
    corner of the dialog, unless, at the time you’re reading this, the 2022 LTS version
    has been released, in which case you can just install it and skip the remaining
    steps!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the main Unity Hub window, select **Installs** in the left-side pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Install Editor** button in the window’s top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Official releases** tab should be selected by default (the latest beta
    versions can be found under the **Pre-releases** tab).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **OTHER VERSIONS** section below the **LONG TERM SUPPORT (LTS)** section,
    find the latest 2022 release version listed and click **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next screen you’ll be presented with is selecting the dev tools, platforms,
    and documentation modules. Since we’re assuming you’re installing Unity for the
    first time, and we don’t currently have any specific requirements for our first
    project, we’ll just keep the defaults. Click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity Hub will now download and install the selected version. Depending on your
    internet connection and hard drive speed, this will take a bit of time – an average
    base installation requires roughly 3 GB of downloads (temporary files) and approximately
    7 GB of free hard drive space for installation.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned about the different Unity Editor versions available
    and how to install them. In the next section, we’ll learn about render pipelines
    to determine how to proceed with a new project.
  prefs: []
  type: TYPE_NORMAL
- en: What is a render pipeline?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next section, when we create our project, we’ll select a template to
    base our project on. This requires a bit of explanation to understand the templates’
    options fully. We’ll create a 2D game (a two-dimensional game represented by planar
    images), so selecting a 2D template makes sense, but these are the available template
    names for 2D: **2D**, **2D (URP)**, and **2D Mobile**. We won’t be creating a
    mobile game, so we can rule out **2D Mobile**, but what does **(****URP)** mean?'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re unfamiliar with how video games work under the hood, **rendering**
    refers to how the 2D graphics or 3D models are drawn to the screen to generate
    an image. Over time, as Unity evolved its rendering technology to better suit
    the types of games creators were making, they understood the need to make changes
    and improve the rendering technology. A performant and customizable render pipeline
    architecture was introduced to serve creators best called a **Scriptable Render
    Pipeline** (**SRP**). The template named **2D** will use Unity’s **built-in renderer**,
    whereas **2D (URP)** will use the **Universal Render Pipeline** (**Universal RP**,
    or **URP**). The Universal RP is a default SRP Unity provides as a starting basis
    for making performant games on the broadest device platforms – this will eventually
    replace the built-in legacy renderer as the default.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We’ll discuss the URP feature set relevant to adding renderer features to the
    projects throughout the book but not compare it directly with the built-in renderer
    features. A feature comparison table between URP and the built-in renderer can
    be found at [https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal%407.1/manual/universalrp-builtin-feature-comparison.xhtml](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal%407.1/manual/universalrp-builtin-feature-comparison.xhtml)
  prefs: []
  type: TYPE_NORMAL
- en: This section taught you what a render pipeline is and how to select the correct
    2D project template. Now you’ll use what you learned to create our first project!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll be creating our project from scratch using one of the templates Unity
    Hub provides to make sure everything is set up correctly for our game’s rendering
    requirements. Since we’ll start by creating a 2D game, we’ll select the **2D (URP)
    Core** template. Core means that the template won’t provide any example assets,
    samples, or learning content in this context. It will give an empty 2D project
    with a pre-configured URP 2D renderer setup – perfect, just what we need!
  prefs: []
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to create a new 2D URP project in Unity Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: With **Projects** selected in the left-side pane, click the **New project**
    button in the window’s top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the Editor version at the top of the window is set to the installed
    2022 version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **2D (URP)** template in the list and click to select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the right-side pane, give your project a name by entering it in the
    **Project** **name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And finally, verify the installation path in the **Location** field, then click
    on **Create project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can create your project with the preceding steps while referring to
    the following screenshot (making sure to have the correct **Editor version** selected
    at the top in case you have multiple versions installed already):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Unity Hub project templates](img/B18347_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Unity Hub project templates
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to install the Unity Hub and installed a specific
    version of the Unity Editor. Then, you learned what a render pipeline is and how
    that relates to creating a new project. We’ll continue discussing the Unity Editor
    now by introducing its main features.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know the Unity Editor and installing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having just created a new 2D URP project and opened up the Editor, let’s take
    a tour of the Unity 2022 interface! We’ll cover only the most common features
    in this section and dig deeper into the features of the specific windows and toolbars
    as we work through our projects in the later chapters, providing the information
    in the context of the required task.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we open the Unity Editor for the first time, it will use the default Windows
    layout, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The Unity 2022 Editor default layout](img/B18347_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – The Unity 2022 Editor default layout
  prefs: []
  type: TYPE_NORMAL
- en: 'The common Editor windows that you’ll be using most of the time are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scene** – this is the window where we build our content visually. Objects
    added to the **Scene Hierarchy** with renderer components will be visible in the
    scene and game views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game** – the simulation you see in the game view represents what players
    will see rendered in your final playable distribution builds. You will also playtest
    your game in this window when entering **Play Mode**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project** – the **Project** window is comparable to your OS’s file manager.
    It’s where you’ll import and organize the files that make up the **Assets** for
    the project you’re creating (such as 3D models, 2D images, sounds & music, plugins,
    and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hierarchy** – this is the scene’s **GameObject Hierarchy** (more on GameObjects
    in the next section). Understanding how to organize your scene’s objects in the
    **Hierarchy** window (as in parent-child relationships) will be essential to work
    on your projects effectively, so this will be a topic of discussion in the coming
    chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inspector** – in the natural order of things in Unity, the **Inspector**
    window comes next as it’s tied directly to the GameObjects’ in the **Hierarchy**
    window. When an object is selected in the **Scene Hierarchy**, the **Inspector**
    shows all its details (**Transform** and components).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console** – information, warnings, errors, and any relevant trace information
    are displayed in a list view that can be sorted and filtered. Debugging any problems
    occurring in your project will be performed from the **Console** information displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that in the default layout, clicking on a tab, such as **Game** or **Console**
    in *Figure 1**.3*, will bring it to the “front” for interaction. Tabs can also
    be dragged and docked to other windows to provide a fully customized layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to these windows, Unity also has some toolbars, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The Unity 2022 Editor toolbars](img/B18347_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The Unity 2022 Editor toolbars
  prefs: []
  type: TYPE_NORMAL
- en: '**Main Toolbar** (*A*) – the buttons on the upper left provide access to your
    **Unity Account** (Unity ID), **Unity Cloud Services**, and the current **version
    control system** (**VCS**) (we’ll tackle version control in a later chapter).
    The centered buttons are the play (for entering **Play Mode**), pause, and step
    controls. On the right side, the buttons are **Undo History**, **Global Search**,
    the **Layers Visibility** dropdown, and finally, the **Editor Layout** dropdown
    (as noted earlier, we’re looking at the default window layout; you can change
    the layout using one of the presets or save your own).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scene Toolbar** (*B*) – the tools, starting on the left side, are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tool Handle Position** (Center, Pivot) – when moving objects in the scene,
    the action will be based on this position, either the Center of the object or
    the object’s Pivot.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If the **Anchor** position of your GameObject in the scene View doesn’t look
    correct, don’t forget to check this setting!
  prefs: []
  type: TYPE_NORMAL
- en: '**Tool Handle Rotation** (Global, Local) – when rotating objects in the scene,
    they rotate relative to their Transform in **Global** or **Local** space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may need to change between Global or Local space settings to rotate an object
    correctly. If your rotations don’t look correct, don’t forget to check this setting!
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the tools include grid visibility and snapping settings, **Draw
    Mode**, 2D or 3D scene View (we are currently in 2D), toggles for scene lighting,
    audio, effects, hidden objects, scene View camera settings, and Gizmos. There’s
    a lot to unpack here, but don’t worry, we’ll touch on these as we work through
    the projects we’ll be creating in the coming chapters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manipulation Tools Toolbar** (*C*) – a floating toolbar, also known as **Overlays**,
    within the **Scene** window. This toolbar provides the essential tools for working
    with GameObjects within the scene View. The tools include View, Move, Rotate,
    Scale, Rect, and Transform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One more “toolbar” along the bottom of the Editor window is called the **Status
    bar** (not pictured). The Status bar mostly provides the current status of specific
    processes, such as the last **Console** warning or error message (left-side),
    the progress of lighting generation (right-side), and the code compilation spinner
    (right-corner).
  prefs: []
  type: TYPE_NORMAL
- en: Additional reading | Unity documentation
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on Unity’s interface at [https://docs.unity3d.com/2022.3/Documentation/Manual/UsingTheEditor.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/UsingTheEditor.xhtml)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the familiar Editor windows and toolbars
    and how they can manipulate objects in the scene View. Let’s see how we can extend
    the features and tooling in the Editor now with Packages.
  prefs: []
  type: TYPE_NORMAL
- en: The Unity Package Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Without knowing, you were already introduced to packages earlier when we discussed
    the Universal RP. Since we started with a URP template, we didn’t have to do anything
    special, but Unity provides **Scriptable Render Pipeline** support through packages!
    Packages provide a way for Unity to offer multiple versions of an engine feature
    or service without requiring a new installation of the Editor. You can even try
    out the latest pre-release version of a package to stay on the cutting edge of
    the technology and quickly revert to a stable or alternate version should you
    encounter any problems. The Package Manager is accessible from the top menu: **Window**
    | **Package Manager**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The Unity Package Manager](img/B18347_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – The Unity Package Manager
  prefs: []
  type: TYPE_NORMAL
- en: Feature sets in the **Package Manager** are bundles of common tooling that provide
    a simpler and more streamlined install experience. The **2D** feature set (selected
    in *Figure 1**.4*) is for creators working with 2D projects. In our case, again,
    having started from the **2D URP** template, the **2D** feature set has already
    been imported to our project (indicated by the green checkmark). We’re good to
    go!
  prefs: []
  type: TYPE_NORMAL
- en: Should you need to make any changes to the packages in your project, from the
    dropdown in the **Package Manager** top menu, you can see what packages are available
    from what is already in your project via **In Project**, or either the **Unity
    Registry** or **My Assets** (which are assets you’ve purchased in the Unity Asset
    Store) selections. Managing a package is as simple as selecting it in the list
    and choosing an available function from the buttons displayed in the bottom-right
    window. For example, **Download**, **Install**, **Remove**, or **Update**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Packages are project-specific, so you will need to ensure you have the desired
    packages installed for each new project you create!
  prefs: []
  type: TYPE_NORMAL
- en: New to Unity 2022
  prefs: []
  type: TYPE_NORMAL
- en: In the **Package Manager** window, you can now multi-select packages in the
    list for adding, updating, or removing in a single operation.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the Editor windows and toolbars and how to
    add/remove features and tooling with packages that extend the Editor’s capabilities.
    Next, we’ll start learning about the GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the GameObject – All about Transform and components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply put, anything you want to add to your scene will be added as a GameObject.
    The GameObject is the base building block for everything that exists in a scene.
    It also acts as a container for adding functionality with components. When a GameObject
    is added to the **Hierarchy**, is it active by default but can be deactivated
    – “turning off” all components added to it – with the checkbox to the left of
    the name field (to the left of **Main Camera** in *Figure 1**.6*). A component
    can be for either visual or functional purposes, or in some cases, both! Functional
    components implement Unity’s scripting API, and Unity provides components for
    supporting the engine’s many features. You’ll create custom component scripts
    using the C# language, which will be covered in [*Chapter 2*](B18347_02.xhtml#_idTextAnchor041).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how GameObjects are added to a scene, then you’ll
    be introduced to the Transform component, and you’ll learn how to work with components.
  prefs: []
  type: TYPE_NORMAL
- en: Adding GameObjects to the scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New empty GameObjects and objects of a specific type are easily added to the
    **Hierarchy** with the **Create** menu. The **Create** menu is easily accessible
    from Unity’s top menu under GameObject, from the **Hierarchy** window directly
    with the **+** (plus sign) icon dropdown menu at the top, or by right-clicking
    anywhere in the **Hierarchy** window. GameObjects in the form of **Prefabs** and
    other supported types can be added to the scene View directly by dragging and
    dropping from the **Project** window – this is often the quickest way to accomplish
    some tasks, and we’ll be exploiting this feature while building the book’s projects.
  prefs: []
  type: TYPE_NORMAL
- en: The Transform component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GameObjects added to the scene have a default Transform component that dictates
    its **Position**, **Rotation**, and **Scale** in 3D space – a Cartesian coordinate
    system using three mutually perpendicular coordinate axes with Y-Up, namely X-axis,
    Y-axis, and Z-axis. Positioning graphics in the scene can be performed by either
    manipulating the Transform manually (by typing in values), with the **Manipulation
    Tools** (clicking and dragging in the **Scene** window), or through code by using
    the Unity scripting API to access the GameObject’s **Transform** properties and
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see the `Vector3`) is represented in 3D
    space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Inspector Transform and related 3D coordinate system](img/B18347_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Inspector Transform and related 3D coordinate system
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, we can see that the `0`, `0`, `0` where all axes intersect).
    The **Rotation** values on all axes are at 0, meaning no rotation is applied to
    this GameObject. Similarly, the **Scale** value on all axes is at 1, meaning no
    scaling is applied to the default scale of this GameObject. We’ll modify these
    values in context while creating our player character graphics in the *2D sprites
    with Sprite Creator – Understanding the Sprite Renderer and draw* *ordering* section.
  prefs: []
  type: TYPE_NORMAL
- en: Before creating our player, let’s discuss components in more detail since we’ll
    be directly working with them.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below the **Transform** section, we can see several components already added
    that provide functionality for the GameObject’s purpose as our scene’s main camera
    (cameras in our **Scene Hierarchy** determine what the player sees rendered in
    the game view). To add more functionality to this camera, click the **Add Component**
    button at the bottom of the **Inspector** window. You’ll be presented with a filtered
    and searchable list of available components to add. The components will include
    not only the ones provided by Unity, such as the **Camera** component in *Figure
    1**.6*, but also any scripts you’ve already created and added to the project.
    In the next chapter, we’ll tackle creating our scripts and adding them as components.
  prefs: []
  type: TYPE_NORMAL
- en: Components can be added, removed, and copied/pasted, and their values can be
    copied/pasted and even saved as presets! This is all accomplished via the **Component**
    header section. Click and hold the header to manually reposition a component up/down
    in the **Inspector** window or right-click for moving and other functions. All
    of the aforementioned functions are accessible either through the right-click
    dialog popup or the icons on the right side of the component header; those are
    **Reference**, **Presets**, and a vertical ellipsis equivalent to right-clicking
    in the title.
  prefs: []
  type: TYPE_NORMAL
- en: Components add powerful features to your projects, but things come together
    even more when components combine and work together with other components. Unity
    is based on this **component architecture**. We will be diving into how to structure
    your projects best to leverage Unity components in a well-structured single-responsibility
    design pattern that is easy to work with and friendly for both designers and developers
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the importance of components and how to work
    with them in **Inspector**. We’ll be working with components throughout the book,
    starting with the **Sprite Renderer** in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 2D sprites with Sprite Creator – Understanding the Sprite Renderer and draw
    ordering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s dig right in and put into practice what we just learned about GameObjects
    by creating a simple sprite-based character we’ll be using as the player in a
    collection game. This will be our first project in the book! We’ll make the player
    character from scratch using Unity’s built-in **Sprite** **Creator** graphics.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll create a new scene, add sprites, and learn how to manipulate
    and layer sprites together to make our player character.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s create a new scene by going to **File** | **New Scene** (or using
    the *Ctrl/Cmd + N* shortcut). This will open the **New Scene** dialog and prompt
    us to select a **Scene Template**. We’re going to be using the **Lit 2D (URP)**
    template since we’ll be working with 2D while also using the Universal RP, and
    we want to take advantage of all the advanced lighting features URP offers.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When the scene opens, it’s good practice to save it immediately! Save it now
    by going to **File** | **Save** (or by pressing *Ctrl/Cmd + S*), selecting a folder
    in your project (usually **Assets/Scenes**), and giving it a descriptive name.
    Now, anytime you make changes and want to save your progress, simply use the *Ctrl/Cmd
    + S* shortcut to save. You’ll want to do this regularly and make it a habit –
    crashes occur when you least expect it, and you don’t want to lose any significant
    progress that will have to be recreated.
  prefs: []
  type: TYPE_NORMAL
- en: With our new scene being created, let’s add some sprites!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sprite using Sprite Creator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, create a sprite in our scene using the `(0`, `0`, `0`). Yay!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s parent this to a new empty GameObject to create our player object with
    a good structure – separating the graphics from the functionality we’ll add as
    components to the root GameObject. We’ll do this by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new empty GameObject by, again, right-clicking within the `(0`, `0`,
    `0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default name of a new GameObject, as you guessed it, is **GameObject**.
    It is highlighted for editing by default, so you can easily rename it without
    additional steps. We’ll use the default name for now, so hit the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another new GameObject, but this time name it `Graphics`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we’ll set up the player character’s GameObject structure by drag and drop.
    First, click and drag the **Circle** object to **Graphics**, then click and drag
    the **Graphics** object to **GameObject**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We could have saved a few steps by first selecting the **Circle** GameObject
    in the **Scene Hierarchy**, right-clicking on it to open the **Create** menu,
    then selecting **Create Empty Parent**. The previous process was essential to
    demonstrate how GameObjects in the **Hierarchy** window can be parented and moved
    to other positions in the **Hierarchy**. To give this a try now, undo the parenting
    by going to **Edit** | **Undo** (or *Ctrl/Cmd + Z*) and then redo the parenting
    of the GameObjects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, rename the root object from `GameObject` to `Player`. First, select
    it in the **Hierarchy** window and press the *F2* (Windows) or *Enter* (Mac) key.
    Alternatively, with the chosen item in the **Hierarchy**, use the name field at
    the top of the **Inspector** window to rename it. You should end up with the following
    sprite and GameObject setup in your scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – 2D Sprite player character GameObject Hierarchy](img/B18347_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – 2D Sprite player character GameObject Hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to add a sprite shape to your scene and understand the parenting
    of GameObjects to create a good structure. Before tapping fully into your arcane
    artistic talents to create our player character, knowing how to get around in
    the scene View first will surely be beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating the scene View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moving around in the scene **View** will help your drawing efforts by zooming
    in/out on details and focusing on the part you’re working on. While in **2D Mode**,
    you’ll exclusively be using both panning and zooming:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pan** the scene View around by pressing the right-mouse button, using the
    **View Tool** (“hand” icon in the **Toolbar Overlay**) by clicking and dragging,
    or you can also use the keyboard by pressing the arrow keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zoom** in/out of the scene View by scrolling the mouse wheel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, you can bring focus on an object in the scene View by double-clicking
    it in the **Hierarchy** window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional reading | Unity documentation
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about scene View navigation at [https://docs.unity3d.com/2022.3/Documentation/Manual/SceneViewNavigation.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/SceneViewNavigation.xhtml)
  prefs: []
  type: TYPE_NORMAL
- en: We’re all set to start building our character in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our player character
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a ladybug for the player character in our collection game project.
    We’ll use **Sprite Creator** sprites to design our character right inside the
    Unity Editor! In a later chapter, we’ll be importing original art assets to use
    as the different sprites in the game. For now, we’ll be limited to using some
    basic shapes to build out our character design, but with some creativity, the
    results can look quite lovely. The Transform values for **Position**, **Rotation**,
    and **Scale** and their corresponding **Manipulation Tools** (**Toolbar Overlay**)
    will be used extensively to draw our character.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Placeholder graphics created by a programmer during early development – and
    in some cases, before an artist has finalized artwork – are commonly referred
    to as “programmer art.” This term is sometimes used negatively to indicate mediocre
    artwork, but don’t let that stop you from being creative! Games such as Geometry
    Dash, 140, and VVVVVV all use simple graphics to great effect.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by selecting the **Circle** object (that we previously created)
    in the **Hierarchy** window (or double-clicking to bring it into focus in the
    scene View) – note that we’ll want to keep all our new sprites as children of
    the **Graphics** object in the **Hierarchy** (as seen in *Figure 1**.8*). This
    will be the ladybug’s body, so let’s give it a nice red color.
  prefs: []
  type: TYPE_NORMAL
- en: The **Sprite Renderer** component has a field for color just below the **Sprite**
    field that indicates we’re using the **Circle** sprite shape. Clicking the color
    will pop up the **Color Picker** dialog (see *Figure 1**.8*). When you have a
    nice shade of red selected – as indicated in the top-right corner of the dialog
    – simply click the close button in the dialog’s title bar (the **x**).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The Ladybug Sprite Renderer component and the Color Picker dialog](img/B18347_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – The Ladybug Sprite Renderer component and the Color Picker dialog
  prefs: []
  type: TYPE_NORMAL
- en: With our body sprite having a nice shade of red, we can now shape it by manipulating
    its **Transform** in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using Manipulation Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Figure 1**.8*, you can see that we’ve already gone ahead and finished our
    ladybug character design. Let’s walk through the process of creating it now. You
    should have a red circle in your scene View, but it needs to be… less circular.
    Let’s turn it into an ellipse by scaling it on its Y-axis. This can be accomplished
    by either typing in a value in the **Transform** | **Scale** | **Y** field or
    adjusting manually using the **Rect Tool** (selected in the **Toolbar Overlay**
    in *Figure 1**.8*, and **Scale Tool** may also be used).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The 2D scene View is represented by the X and Y axes for horizontal and vertical
    values, respectively. The Z-axis would represent depth, but in **2D Mode**, we
    won’t be manipulating the Z-axis value and will be using **Sprite Sorting** and
    **Ordering** **in Layers**.
  prefs: []
  type: TYPE_NORMAL
- en: While manipulating manually with the **Rect Tool**, click and drag on the edge
    (1 axis) or corner (2 axes) of the box surrounding the **Circle** object to resize
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Two modifier keys that can help create shapes more easily are the *Shift* and
    *Alt* keys – but keep the keys pressed while dragging, do not press them before
    doing so.
  prefs: []
  type: TYPE_NORMAL
- en: To maintain the current aspect ratio while scaling, hold down the *Shift* key
    while dragging.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To scale an object equally on both sides from the center pivot, hold down the
    *Alt* key while dragging.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can hold both the *Shift* and *Alt* keys down while manipulating an object.
  prefs: []
  type: TYPE_NORMAL
- en: When you have a body shape that looks good, let’s move on by creating an outline
    for it. An outline will help provide a good separation of our player character
    from the background environment. With the **Circle** object still selected (you
    can simply click on shapes in the scene View to select them), press *Ctrl/Cmd
    + D* to duplicate it. This will create a copy of the **Circle** sprite and append
    a number incrementally to the name for every duplicate made. Set the new shape’s
    color to black and scale it up uniformly to be slightly larger than the red circle.
    While performing this action, you’ll likely realize that we now have a problem
    – the black shape hides the red body. Let’s fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Sprite Layers and Ordering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In **Inspector**, **Additional Settings** is a section within the **Sprite
    Renderer** component. If the **Sorting Layer** and **Order in Layer** fields are
    not visible directly underneath it, click on **Additional Settings** to expand
    it (refer to the bottom of the **Inspector** window in *Figure 1**.7*). We can
    change the drawing order of sprites in two ways: 1) by specifying **Sorting Layer**
    or 2) by a value specified in the **Order in** **Layer** field.'
  prefs: []
  type: TYPE_NORMAL
- en: Sorting Layers is a topic we’ll be diving into in the coming chapters since
    we only need a single Layer for our current purpose – think of Layers as pages
    in a book where the order in which they are read front to back can be rearranged.
    Now, working with the `0`, putting every shape at the same depth. Since we want
    the black shape to be in the back of the red shape, set its `-1`. You can now
    readjust its size to give a nice outline thickness to the red shape.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can select multiple shapes and change the **Order in Layer** value for all
    at once by holding the *Ctrl* or *Shift* key when selecting.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the rest of the ladybug character is just a matter of duplicating a
    sprite shape already in the scene or creating a new one. The **Sprite Creator**
    shapes available are **square**, **circle**, **capsule**, **diamond**, and **hexagon**.
  prefs: []
  type: TYPE_NORMAL
- en: Move the shapes into position by simply clicking and dragging on the sprite
    in the scene View and placing it in position. Hovering the mouse pointer near
    the corner point (blue dot) will show the rotation cursor. While this cursor is
    showing, clicking and dragging will rotate it.
  prefs: []
  type: TYPE_NORMAL
- en: Additional reading | Unity documentation
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about positioning GameObjects at [https://docs.unity3d.com/2022.3/Documentation/Manual/PositioningGameObjects.xhtml](https://docs.unity3d.com/2022.3/Documentation/Manual/PositioningGameObjects.xhtml)
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and create your own ladybug player character now. Use all of the **Transform**
    fields, **Rect Tool** with the modifier keys, and the **Order in Layer** field
    to draw. You will perform these actions repeatedly throughout creating the projects
    in the book for not only sprites but also UI elements. Have fun with it!
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to create a new **Scene**, add and duplicate
    sprites, and manipulate those sprites to make our player character with the **Order
    in Layer** value. Next, before wrapping up this chapter, we’ll discuss game design.
  prefs: []
  type: TYPE_NORMAL
- en: Game Design Document (GDD) – Introducing the 2D collection game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout the book, the game we’ll be creating will be defined and structured
    using what is known as **Game Design Document** (**GDD**). This document will
    serve as our point of reference as we decide how to develop the game’s core aspects.
    Our game is going to be pretty simple but packed with features. Most of the information
    written in the GDD is self-explanatory, but a few concepts might be new, so let’s
    start by reviewing them:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the name of the game?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This one is self-explanatory, so just don’t stress over this now! Anything as
    a working title will work just fine – have fun with it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the game’s **core loop**?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core loop is what makes your game an enjoyable and satisfying experience
    for players. It is the series of actions the player repeatedly performs to accomplish
    the objective.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see an example GDD filled out for the 2D collection game we’ll make throughout
    the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** **of Game** | Outer World |'
  prefs: []
  type: TYPE_TB
- en: '| **What is the theme, setting,** **or genre?** | 2D Sci-fi Platformer |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary****What’s the** **big picture?** | An adventure game that takes
    the player on a journey from peaceful farming to battling robotic systems infected
    by an evil alien plant entity. The game takes place on an alien planet where the
    player’s race has established a habitat on the planet’s surface. The habitat is
    fully automated and maintained by robots managed by a central control system.
    An evil alien plant entity has infiltrated the control systems and taken over
    the robots individually and the central system. The goal of the alien entity is
    not known, but it must be stopped if the player’s race is to survive on this planet.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **What is the game’s** **unique feature?** | Multiple game modes provide
    a novel and exciting approach to gameplay: simulation, adventure, and shooting.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **What games inspired you** **and why?** | Metroid, Mega Man, and Stardew
    Valley. |'
  prefs: []
  type: TYPE_TB
- en: '| **Describe the gameplay, the core loop, and** **the progression.** | Collect
    energy shards to clean seedlings in a space station habitat as the timer ticks
    down! |'
  prefs: []
  type: TYPE_TB
- en: Table 1.1 – GDD for the game
  prefs: []
  type: TYPE_NORMAL
- en: As needed, we’ll be adding to the GDD over time, but this will serve us well
    as a starting point. Yay!
  prefs: []
  type: TYPE_NORMAL
- en: This section introduced you to a simple GDD template and you learned the basic
    but essential questions to answer when making a remarkable game.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a quick introduction to installing Unity Hub, installing the
    Unity Editor, and why we chose the 2D Universal RP template for creating our new
    2D project. In this chapter, you learned the importance of **Package Manager**
    for adding tooling and features to the Unity Editor specific to our project’s
    needs. You then learned how to make your way around the different windows and
    toolbars, and you used them to create and manipulate GameObjects in our new 2D
    scene. We also got a headstart on building the collection game by drawing our
    player character within the Unity Editor – learning the importance of Layer sorting
    order in the process.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we started defining what the game we’re creating will be by deciding
    on a name for the game, writing our summary, and specifying some gameplay in the
    GDD – this will provide the necessary direction for the production of the game.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll dive into creating the “Outer World” collection game
    environment, learning how to implement game mechanics through scripts, and adding
    a basic UI.
  prefs: []
  type: TYPE_NORMAL
- en: Image sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 1**.1* – Unity platform release timeline'
  prefs: []
  type: TYPE_NORMAL
- en: '**Webpage** **reference**: [https://blog.unity.com/engine-platform/unity-20221-tech-stream-is-now-available](https://blog.unity.com/engine-platform/unity-20221-tech-stream-is-now-available)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Image** **URL**: [https://blog-api.unity.com/sites/default/files/2022-05/image2.jpg](https://blog-api.unity.com/sites/default/files/2022-05/image2.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
