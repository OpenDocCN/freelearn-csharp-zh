["```cs\n<resources>\n  <string name=\"ApplicationName\">Fibonnaci Calculator</string>\n  <string name=\"SingleCalculation\">Single Calculation</string>\n  <string name=\"RangeCalculation\">Range Calculation</string>\n  <string name=\"GCCollect\">GC Collect</string>\n</resources>\n```", "```cs\n<Button\n    android:text=\"@string/SingleCalculation\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    local:MvxBind=\"Click NavigateToSingleCalculationCommand\" />\n<Button\n    android:text=\"@string/RangeCalculation\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    local:MvxBind=\"Click NavigateToRangeCalculationCommand\" />\n```", "```cs\n[Activity(Label = \"@string/ApplicationName\")]\n```", "```cs\n<plurals name=\"CalculationsCompleted\">\n  <item quantity=\"one\">%d calculation was completed.</item>\n  <item quantity=\"other\">%d calculations were completed.</item>\n</plurals>\n```", "```cs\n<plurals name=\"CalculationsCompleted\">\n  <item quantity=\"other\">%d islem tamamlandi.</item>\n</plurals>\n```", "```cs\n// Getting a single text value\nvar singleStringValue = Resources.GetText(Resource.String.ApplicationName);\n// Getting a string array\nvar stringArrayValue = Resources.GetTextArray(Resource.Array.MyStringArray);\n// Getting a pluralized version for 2 items\nvar quantity = Resources.GetQuantityString(Resource.Plurals.CalculationsCompleted, 2, 2);\n```", "```cs\n\"GCCollect\" = \"GC Collect\";\n\"RangeCalculation\" = \"Range Calculation\";\n\"SingleCalculation\"= \"Single Calculation\";\n```", "```cs\nvar localizedString = NSBundle.MainBundle.LocalizedString (\"RangeCalculation\", \"\");\n```", "```cs\n/* Class = \"UIViewController\"; title = \"Single Calculation\"; ObjectID = \"138\"; */\n\"138.title\" = \"Single Calculation\";\n/* Class = \"UILabel\"; text = \"Ordinal\"; ObjectID = \"153\"; */\n\"153.text\" = \"Ordinal\";\n/* Class = \"UIButton\"; normalTitle = \"Calculate\"; ObjectID = \"156\"; */\n\"156.normalTitle\" = \"Calculate\";\n```", "```cs\n<StackPanel>\n    <Button x:Name=\"SingleCalculation\"\n            Content=\"{Binding LocalizedResources.SingleCalculation, Source={StaticResource LocalizedStrings}}\"\n            Style=\"{StaticResource NavigationButtons}\"></Button>\n    <Button x:Name=\"RangeCalculation\"\n            Content=\"{Binding LocalizedResources.RangeCalculation, Source={StaticResource LocalizedStrings}}\"\n            Style=\"{StaticResource NavigationButtons}\"></Button>\n    <Button x:Name=\"GCCollect\"\n            Content=\"{Binding LocalizedResources.GCCollect, Source={StaticResource LocalizedStrings}}\"\n            Style=\"{StaticResource NavigationButtons}\"></Button>\n</StackPanel>\n```", "```cs\nImages/en-US/config-designer/myImage.scale-140_layoutdir-LTR.png\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" \n     exclude-result-prefixes=\"msxsl\">\n  <xsl:output method=\"xml\" indent=\"yes\"/>\n  <xsl:template match=\"/\">\n    <resources>\n      <xsl:for-each select=\"/root/data\">\n        <string>\n          <xsl:attribute name=\"name\">\n            <xsl:value-of select=\"@name\"/>\n          </xsl:attribute>\n          <xsl:value-of select=\"value\"/>\n        </string>\n      </xsl:for-each>\n    </resources>\n  </xsl:template>\n</xsl:stylesheet>\n```", "```cs\n<Target Name=\"BeforeBuild\">\n  <XslTransformation \n    XslInputPath=\"Resources\\AndroidTransform.xslt\" \n    XmlInputPaths=\"Resources\\AppResources.resx\" \n    OutputPaths=\"..\\Xamarin.Master.Fibonacci.Android\\Resources\\values\\strings.xml\" />\n</Target>\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"1.0\" \n   exclude-result-prefixes=\"msxsl\">\n  <xsl:output method=\"text\" encoding=\"utf-8\" indent=\"no\" omit-xml-declaration=\"no\"/>\n  <xsl:template match=\"/\">\n    <xsl:for-each select=\"/root/data\">\n      <xsl:value-of select=\"concat('&quot;', @name, '&quot; = &quot;', value, '&quot;;', '\n')\" />\n    </xsl:for-each>\n  </xsl:template>\n</xsl:stylesheet>\n```", "```cs\n<XslTransformation \n  XslInputPath=\"Resources\\IOSTransform.xslt\" \n  XmlInputPaths=\"Resources\\AppResources.resx\" \n  OutputPaths=\"..\\Xamarin.Master.Fibonacci.iOS\\Resources\\Base.lproj\\Localizable.strings\" />\n```", "```cs\nvar path = NSBundle.MainBundle.PathForResource(\"tr\", \"lproj\");\nNSBundle languageBundle = NSBundle.FromPath(path);\nvar localizedString = languageBundle.LocalizedString (\"RangeCalculation\", \"\");\n```", "```cs\nvar tabbedPage = new TabbedPage();\n\ntabbedPage.Children.Add(new ContentPage\n{\n    Title = TextResources.TabItemRecent,\n    Content = new StackLayout\n    {\n        // Omitted for clarity\n    },\n    Icon = \"social.png\"\n});\n```", "```cs\n<TabbedPage \n\n    x:Class=\"Xamarin.Master.TravelTrace.Views.MainTabView\"\n    >\n  <ContentPage \n        Title=\"{x:Static resources:TextResources.TabItemRecent}\" \n        Icon=\"social.png\">\n```", "```cs\npublic abstract class BindableBase : INotifyPropertyChanged\n{\n    protected virtual void SetProperty<T>(ref T property, T value, \n      [CallerMemberName] string propertyName = null)\n    {\n        if (Equals(property, value)) return;\n\n        property = value;\n\n        OnPropertyChanged(propertyName);\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)\n    {\n        var handler = PropertyChanged;\n        if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n```", "```cs\npublic class ModelData : BindableBase\n{\n    private string m_Property1BackingField = string.Empty;\n\n    public string Property1\n    {\n        get\n        {\n            return m_Property1BackingField;\n        }\n        set\n        {\n            SetProperty(ref m_Property1BackingField, value);\n        }\n    }\n}\n```", "```cs\npublic MainPage()\n{\n    this.InitializeComponent();\n\n    this.DataContext = new ModelData {Property1 = \"Hello MVVM\"};\n}\n```", "```cs\n<TextBox Text=\"{Binding Property1, Mode=TwoWay}\">\n```", "```cs\npublic class SubmitCommand : ICommand\n{\n    private readonly ModelData m_DataContext;\n\n    public SubmitCommand(ModelData dataContext)\n    {\n        m_DataContext = dataContext;\n\n        m_DataContext.PropertyChanged += (sender, args) =>\n        {\n            if(args.PropertyName == \"Property1\" && \n                CanExecuteChanged !=null) \n                CanExecuteChanged(this, null);\n        };\n    }\n\n    public bool CanExecute(object parameter)\n    {\n        return m_DataContext.Property1.Length > 5;\n    }\n\n    public void Execute(object parameter) {\n        // TODO:\n    }\n\n    public event EventHandler CanExecuteChanged;\n}\n```", "```cs\npublic ModelData()\n{\n    Submit = new SubmitCommand(this);\n}\n\npublic ICommand Submit { get; set; }\n```", "```cs\n<Button Content=\"Submit\" Command=\"{Binding Submit}\"></Button>\n```"]