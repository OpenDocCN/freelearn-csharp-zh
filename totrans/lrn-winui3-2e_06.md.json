["```cs\nprotected override void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args)\n{\n    m_window = new MainWindow();\n    m_window.Activate();\n}\n```", "```cs\n    Install-Package Microsoft.Data.Sqlite\n    ```", "```cs\n    using Microsoft.Data.Sqlite;\n    using System.IO;\n    using System.Threading.Tasks;\n    using Windows.Storage;\n    ```", "```cs\n    private const string DbName = \"mediaCollectionData.db\";\n    ```", "```cs\n    private async Task<SqliteConnection> GetOpenConnectionAsync()\n    {\n        await ApplicationData.Current.LocalFolder.CreateFileAsync(DbName, CreationCollisionOption.OpenIfExists).AsTask().ConfigureAwait(false);\n        string dbPath = Path.Combine(ApplicationData.Current.LocalFolder.Path, DbName);\n        var cn = new SqliteConnection($\"Filename={dbPath}\");\n        cn.Open();\n        return cn;\n    }\n    ```", "```cs\n    private async Task CreateMediumTableAsync(SqliteConnection db)\n    {\n        string tableCommand = @\"CREATE TABLE IF NOT\n            EXISTS Mediums (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n            Name NVARCHAR(30) NOT NULL,\n            MediumType INTEGER NOT NULL)\";\n        using var createTable = new SqliteCommand(tableCommand, db);\n        await createTable.ExecuteNonQueryAsync();\n    }\n    private async Task CreateMediaItemTableAsync(SqliteConnection db)\n    {\n        string tableCommand = @\"CREATE TABLE IF NOT\n            EXISTS MediaItems (Id INTEGER PRIMARY KEY AUTOINCREMENT,\n            Name NVARCHAR(1000) NOT NULL,\n            ItemType INTEGER NOT NULL,\n            MediumId INTEGER NOT NULL,\n            LocationType INTEGER,\n            CONSTRAINT fk_mediums\n            FOREIGN KEY(MediumId)\n            REFERENCES Mediums(Id))\";\n        using var createTable = new SqliteCommand(tableCommand, db);\n        await createTable.ExecuteNonQueryAsync();\n    }\n    ```", "```cs\n    private async Task InsertMediumAsync(SqliteConnection db, Medium medium)\n    {\n        using var insertCommand = new SqliteCommand\n        {\n            Connection = db,\n            CommandText = \"INSERT INTO Mediums VALUES (NULL, @Name, @MediumType);\"\n        };\n        insertCommand.Parameters.AddWithValue(\"@Name\", medium.Name);\n        insertCommand.Parameters.AddWithValue(\"@MediumType\", (int)medium.MediaType);\n        await insertCommand.ExecuteNonQueryAsync();\n    }\n    ```", "```cs\n    private async Task<IList<Medium>> GetAllMediumsAsync(SqliteConnection db)\n    {\n        IList<Medium> mediums = new List<Medium>();\n        using var selectCommand = new SqliteCommand(\"SELECT Id, Name, MediumType FROM Mediums\", db);\n        using SqliteDataReader query = await selectCommand.ExecuteReaderAsync();\n        while (query.Read())\n        {\n            var medium = new Medium\n            {\n                Id = query.GetInt32(0),\n                Name = query.GetString(1),\n                MediaType = (ItemType)query.GetInt32(2)\n            };\n            mediums.Add(medium);\n        }\n        return mediums;\n    }\n    ```", "```cs\n    Install-Package Dapper\n    Install-Package Dapper.Contrib\n    ```", "```cs\n    private async Task InsertMediumAsync(SqliteConnection db, Medium medium)\n    {\n        var newIds = await db.QueryAsync<long>(\n            $@\"INSERT INTO Mediums\n                ({nameof(medium.Name)}, MediumType)\n                VALUES\n                (@{nameof(medium.Name)}, @{nameof(medium.MediaType)});\n            SELECT last_insert_rowid()\", medium);\n        medium.Id = (int)newIds.First();\n    }\n    ```", "```cs\n    SELECT last_insert_rowid();\n    ```", "```cs\n    private async Task<IList<Medium>> GetAllMediumsAsync(SqliteConnection db)\n    {\n        var mediums =\n            await db.QueryAsync<Medium>(@\"SELECT Id,\n                                                 Name,\n                                                 MediumType AS MediaType\n                                          FROM Mediums\");\n        return mediums.ToList();\n    }\n    ```", "```cs\n    private async Task<List<MediaItem>> GetAllMediaItemsAsync(SqliteConnection db)\n    {\n        var itemsResult = await db.QueryAsync<MediaItem, Medium, MediaItem>\n                (\n                    @\"SELECT\n                        [MediaItems].[Id],\n                        [MediaItems].[Name],\n                        [MediaItems].[ItemType] AS MediaType,\n                        [MediaItems].[LocationType] AS Location,\n                        [Mediums].[Id],\n                        [Mediums].[Name],\n                        [Mediums].[MediumType] AS MediaType\n                    FROM\n                        [MediaItems]\n                    JOIN\n                        [Mediums]\n                    ON\n                        [Mediums].[Id] = [MediaItems].[MediumId]\",\n                    (item, medium) =>\n                    {\n                        item.MediumInfo = medium;\n                        return item;\n                    }\n                );\n        return itemsResult.ToList();\n    }\n    ```", "```cs\n    private async Task<int> InsertMediaItemAsync(SqliteConnection db, MediaItem item)\n    {\n        var newIds = await db.QueryAsync<long>(\n            @\"INSERT INTO MediaItems\n                (Name, ItemType, MediumId, LocationType)\n                VALUES\n                (@Name, @MediaType, @MediumId, @Location);\n            SELECT last_insert_rowid()\", item);\n        (int)newIds.First();\n    }\n    private async Task UpdateMediaItemAsync(SqliteConnection db, MediaItem item)\n    {\n        await db.QueryAsync(\n            @\"UPDATE MediaItems\n              SET Name = @Name,\n                  ItemType = @MediaType,\n                  MediumId = @MediumId,\n                  LocationType = @Location\n              WHERE Id = @Id;\", item);\n    }\n    ```", "```cs\n    public int MediumId => MediumInfo.Id;\n    ```", "```cs\n    [Computed]\n    public Medium MediumInfo { get; set; }\n    ```", "```cs\n    private async Task DeleteMediaItemAsync(SqliteConnection db, int id)\n    {\n        await db.DeleteAsync<MediaItem>(new MediaItem { Id = id });\n    }\n    ```", "```cs\n    public class MediaItem\n    {\n        [Key]\n        public int Id { get; set; }\n        ...\n    }\n    ```", "```cs\n    private async Task PopulateMediumsAsync(SqliteConnection db)\n    {\n        _mediums = await GetAllMediumsAsync(db);\n        if (_mediums.Count == 0)\n        {\n            var cd = new Medium { Id = 1, MediaType = ItemType.Music, Name = \"CD\" };\n            var vinyl = new Medium { Id = 2, MediaType = ItemType.Music, Name = \"Vinyl\" };\n            var hardcover = new Medium { Id = 3, MediaType = ItemType.Book, Name = \"Hardcover\" };\n            var paperback = new Medium { Id = 4, MediaType = ItemType.Book, Name = \"Paperback\" };\n            var dvd = new Medium { Id = 5, MediaType = ItemType.Video, Name = \"DVD\" };\n            var bluRay = new Medium { Id = 6, MediaType = ItemType.Video, Name = \"Blu Ray\" };\n            var mediums = new List<Medium>\n            {\n                cd, vinyl, hardcover, paperback, dvd, bluRay\n            };\n            foreach (var medium in mediums)\n            {\n                await InsertMediumAsync(db, medium);\n            }\n            _mediums = await GetAllMediumsAsync(db);\n        }\n    }\n    ```", "```cs\n    public async Task InitializeDataAsync()\n    {\n        using (var db = await GetOpenConnectionAsync())\n        {\n            await CreateMediumTableAsync(db);\n            await CreateMediaItemTableAsync(db);\n            SelectedItemId = -1;\n            PopulateItemTypes();\n            await PopulateMediumsAsync(db);\n            PopulateLocationTypes();\n        }\n    }\n    ```", "```cs\n    public interface IDataService\n    {\n        Task InitializeDataAsync();\n        ...\n    }\n    ```", "```cs\n    private async Task RegisterComponentsAsync(Frame rootFrame)\n    {\n        var navigationService = new NavigationService(rootFrame);\n        navigationService.Configure(nameof(MainPage), typeof(MainPage));\n        navigationService.Configure(nameof(ItemDetailsPage), typeof(ItemDetailsPage));\n        var dataService = new SqliteDataService();\n        await dataService.InitializeDataAsync();\n        HostContainer = Host.CreateDefaultBuilder()\n            .ConfigureServices(services =>\n            {\n                services.AddSingleton<INavigationService>(navigationService);\n                services.AddSingleton<IDataService>(dataService);\n                services.AddTransient<MainViewModel>();\n                services.AddTransient<ItemDetailsViewModel>();\n            }).Build();\n    }\n    ```", "```cs\n    public async Task<int> AddItemAsync(MediaItem item)\n    {\n        using var db = await GetOpenConnectionAsync();\n        return await InsertMediaItemAsync(db, item);\n    }\n    public async Task UpdateItemAsync(MediaItem item)\n    {\n        using var db = await GetOpenConnectionAsync();\n        await UpdateMediaItemAsync(db, item);\n    }\n    public async Task DeleteItemAsync(MediaItem item)\n    {\n        using var db = await GetOpenConnectionAsync();\n        await DeleteMediaItemAsync(db, item.Id);\n    }\n    ```", "```cs\n    public async Task<MediaItem> GetItemAsync(int id)\n    {\n        IList<MediaItem> mediaItems;\n        using var db = await GetOpenConnectionAsync();\n        mediaItems = await GetAllMediaItemsAsync(db);\n        // Filter the list to get the item for our Id.\n        return mediaItems.FirstOrDefault(i => i.Id == id);\n    }\n    public async Task<IList<MediaItem>> GetItemsAsync()\n    {\n        using var db = await GetOpenConnectionAsync();\n        return await GetAllMediaItemsAsync(db);\n    }\n    ```", "```cs\n    Task<int> AddItemAsync(MediaItem item);\n    Task UpdateItemAsync(MediaItem item);\n    Task DeleteItemAsync(MediaItem item);\n    Task<IList<MediaItem>> GetItemsAsync();\n    MainViewModel.cs, the Delete method will be updated to use async/await with its data service call. Don’t forget to rename it DeleteAsync to follow best practices when naming async methods. You will also need to add a using statement to the file for the System.Threading.Tasks namespace:\n\n    ```", "```cs\n\n    ```", "```cs\n    public async Task PopulateDataAsync()\n    {\n        items.Clear();\n        foreach(var item in await _dataService.GetItemsAsync())\n        {\n            items.Add(item);\n        }\n        allItems = new ObservableCollection<MediaItem>(Items);\n        mediums = new ObservableCollection<string>\n        {\n            AllMediums\n        };\n        foreach(var itemType in _dataService.GetItemTypes())\n        {\n            mediums.Add(itemType.ToString());\n        }\n        selectedMedium = Mediums[0];\n    }\n    ```", "```cs\n    public MainViewModel(INavigationService navigationService, IDataService dataService)\n    {\n        _navigationService = navigationService;\n        _dataService = dataService;\n        PopulateDataAsync();\n    }\n    ```", "```cs\n    private async Task SaveAsync()\n    {\n        MediaItem item;\n        if (_itemId > 0)\n        {\n            item = await _dataService.GetItemAsync(_itemId);\n            item.Name = ItemName;\n            item.Location = (LocationType)Enum.Parse(typeof(LocationType), SelectedLocation);\n            item.MediaType = (ItemType)Enum.Parse(typeof(ItemType), SelectedItemType);\n            item.MediumInfo = _dataService.GetMedium(SelectedMedium);\n            await _dataService.UpdateItemAsync(item);\n        }\n        else\n        {\n            item = new MediaItem\n            {\n                Name = ItemName,\n                Location = (LocationType)Enum.Parse(typeof(LocationType), SelectedLocation),\n                MediaType = (ItemType)Enum.Parse(typeof(ItemType), SelectedItemType),\n                MediumInfo = _dataService.GetMedium(SelectedMedium)\n            };\n            await _dataService.AddItemAsync(item);\n        }\n    }\n    ```", "```cs\n    private async Task SaveItemAndReturnAsync()\n    {\n        await SaveItemAsync();\n        _navigationService.GoBack();\n    }\n    private async Task SaveItemAndContinueAsync()\n    {\n        await SaveItemAsync();\n        _dataService.SelectedItemId = 0;\n        _itemId = 0;\n        ItemName = \"\";\n        SelectedMedium = null;\n        SelectedLocation = null;\n        SelectedItemType = null;\n        IsDirty = false;\n    }\n    ```", "```cs\n    <SplitButton x:Name=\"SaveButton\"\n                 Content=\"Save and Return\"\n                 Margin=\"8,8,0,8\"\n                 Click=\"{x:Bind ViewModel.SaveItemAndReturnAsync}\"\n                 IsEnabled=\"{x:Bind ViewModel.IsDirty, Mode=OneWay}\">\n    ...\n    <Button Content=\"Save and Create New\"\n        Click=\"{x:Bind ViewModel.SaveItemAndContinueAsync}\"\n        IsEnabled=\"{x:Bind ViewModel.IsDirty, Mode=OneWay}\"\n        Background=\"Transparent\"/>\n    <Button Content=\"Save and Return\"\n        Click=\"{x:Bind ViewModel.SaveItemAndReturnAsync}\"\n        IsEnabled=\"{x:Bind ViewModel.IsDirty, Mode=OneWay}\"\n        Background=\"Transparent\"/>\n    ```"]