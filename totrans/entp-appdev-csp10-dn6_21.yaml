- en: '*Chapter 16*: Deploying the Application in Azure'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deployment is a set of activities we perform to make software applications available
    for use. The general approach is to take the code, and then build, test, and deploy
    it to the target systems. Depending on the type of application and the business
    requirements, the approach that you take to deploy your code might vary. It could
    be as simple as taking the target system down, replacing existing code with a
    new version, and then bringing the system up; or, it may involve other sophisticated
    approaches such as blue-green deployment, where you deploy code to a staging environment
    that is identical to production, run your tests, and then redirect the traffic
    to staging to make it to production.
  prefs: []
  type: TYPE_NORMAL
- en: Modern software development adopts Agile and DevOps to shorten the development
    cycle and deliver new features, updates, and bugs frequently and reliably to provide
    more value to customers. To enable this, you will need a set of tools to plan,
    collaborate, develop, test, deploy, and monitor.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn what Azure DevOps is and the tools it offers
    for rapid and reliable delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the CI pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the CD pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an ASP.NET 6 application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you need basic knowledge of Azure, Visual Studio 2022, Git,
    and an active Azure subscription with a contributor role. If you don't have one,
    you can sign up for a free account at [https://azure.microsoft.com/en-in/free](https://azure.microsoft.com/en-in/free).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the chapter can be found here: https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/tree/main/Chapter16.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To bring a product idea to life, irrespective of your team size, you will need
    an efficient way to plan your work, collaborate within your team, and build, test,
    and deploy. Azure DevOps helps you to address these challenges and offers various
    services and tools for your success. Azure DevOps services can be accessed via
    the web or from popular development IDEs such as Visual Studio, Visual Studio
    Code, and Eclipse. Azure DevOps services are available in the cloud as well as
    on-premises using Azure DevOps Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure DevOps offers the following services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boards**: Offers a set of tools to plan and track your work, defects, and
    issues using Scrum and Kanban methodologies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repos**: Offers source control to manage your code using Git or **Team Foundation
    Version Control** (**TFVC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipelines**: Offers a set of services to support **continuous integration**
    (**CI**) and **continuous delivery** (**CD**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test Plans**: Offers a set of test management tools to drive the quality
    of your application with end-to-end traceability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artifacts**: Allows you to share packages from public and private sources,
    as well as integrating with CI and CD pipelines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these services, Azure DevOps also helps you to manage wikis for
    your team, manage dashboards, use widgets to share progress and trends, and configure
    notifications. It also allows you to add or develop custom extensions and integrate
    with popular third-party services such as Campfire, Slack, and Trello.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps services offer free and paid subscriptions. To sign up for a free
    account, follow the steps outlined at [https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the home screen from a sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – Azure DevOps home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.1_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.1 – Azure DevOps home page
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand Azure DevOps and each of these services in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Boards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Boards** helps you to define a process for your project and track your work.
    When you create a new project in Azure DevOps, you have the option to choose a
    process template as Agile, Basic, Scrum, or a **Capability Maturity Model Integration**
    (**CMMI**) process. The process template determines the work item types and workflows
    that you can use in your project. Work items help you to track your work, and
    workflows help you track the progress of your work items. The following figure
    shows the hierarchy of work items and the workflow of the Scrum process template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2 – Hierarchy of work items and the workflow in a Scrum process'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.2_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.2 – Hierarchy of work items and the workflow in a Scrum process
  prefs: []
  type: TYPE_NORMAL
- en: To further customize or define your workflows and work item types, you can choose
    to create your own process template based on the previously mentioned process
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand more about work items and workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Work items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Work items help you to track features, requirements, and bugs in your project.
    You can group requirements in a hierarchy. Usually, we start with a high-level
    requirement called an **epic**, which can be further broken down into **features**
    and **product backlog items**. Product backlog items are deliverables that are
    prioritized, assigned to a team member, and delivered in a sprint. **Tasks** are
    created for backlog items and bugs to track defects against product backlog items.
  prefs: []
  type: TYPE_NORMAL
- en: The collaboration feature enables communication within your team through discussion
    or questions on a work item. You can mention a team member or link another work
    item and view the history of all actions or discussions at any time. You can also
    choose to follow a work item to get alerts when it is updated.
  prefs: []
  type: TYPE_NORMAL
- en: Workflows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Workflows help you to review the progress and health of your project. For instance,
    a product backlog item is created with the **New** state. Once it is reviewed
    and approved by a product owner, it is moved to **Approved**, then it is prioritized
    and assigned to a team member in a sprint and moved to **Committed**, and when
    it is complete, it is moved to **Done**. Workflows help you to track the health
    of your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a Kanban board to view the state of all work items and easily move
    work items to different states using the drag-and-drop feature. The following
    screenshot illustrates a Kanban board consisting of work items in different states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Kanban dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.3_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.3 – Kanban dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you create your own process template, you can customize work items or create
    new work items and customize or define your workflows to suit your business needs.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about process templates and how they differ, you can refer to
    [https://docs.microsoft.com/en-us/azure/devops/boards/get-started/what-is-azure-boards?view=azure-devops&tabs=scrum-process#work-item-types](https://docs.microsoft.com/en-us/azure/devops/boards/get-started/what-is-azure-boards?view=azure-devops&tabs=scrum-process#work-item-types).
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's understand more about Repos.
  prefs: []
  type: TYPE_NORMAL
- en: Repos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Repos** offers version control tools with which you can manage your code.
    A version control system allows you to track the changes made by your team to
    code. It creates a snapshot of each change, which you can review at any time and
    revert to it if required. Azure DevOps offers **Git** and **TFVC** as your version
    control systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Git is currently the most widely used version control system and is increasingly
    becoming the standard for version control systems. Git is a distributed version
    control system with a local copy of the version control system in which you can
    view the history or commit changes locally, even if you are offline, and it will
    sync to the server once connected to a network. TFVC, however, is a centralized
    version control system with only one version of each file on the dev machine,
    and the history is maintained on the server. For more information on Git, you
    can refer to [https://docs.microsoft.com/en-in/azure/devops/repos/git/?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/repos/git/?view=azure-devops),
    and for TFVC, you can refer to [https://docs.microsoft.com/en-in/azure/devops/repos/tfvc/?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/repos/tfvc/?view=azure-devops).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key services of **Repos**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main` or `master`, and you can create another branch from it. This way, you
    can isolate your changes for feature development or a bug fix. You can create
    any number of branches, share them among your team members, commit your changes,
    and safely merge them back to `master`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branch policies** help you to protect your branches during development. When
    you enable a branch policy on a branch, any change must be made via pull requests
    only, so that you can review, give feedback, and approve changes. As a branch
    policy, you can configure a minimum number of required approvers, check for linked
    work items and comment resolution, and enforce the build to be successful to complete
    pull requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates policies defined on a branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4 – Branch policies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Image87446.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.4 – Branch policies
  prefs: []
  type: TYPE_NORMAL
- en: Here, a policy is created to validate the build before the code is merged to
    the branch.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pull requests** allow you to review code, add comments, and ensure they are
    resolved before the code is merged to your branch. Based on the configured branch
    policy, you can add mandatory reviewers to review and approve changes. You can
    associate work items to pull requests to enable traceability of changes. The following
    screenshot illustrates a sample pull request:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 16.5 – Pull request'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.5_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.5 – Pull request
  prefs: []
  type: TYPE_NORMAL
- en: The pull request has a title and description, and users can review files and
    compare them with the previous versions, check the status of builds and linked
    work items, and approve.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's understand Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Pipelines** allows you to configure, build, test, and deploy your code to
    any target system. Using Pipelines, you can enable CI and CD for consistent and
    quality delivery of your code. You can use pipelines targeting many application
    types built using popular languages such as .NET, Java, JavaScript, Node.js, PHP,
    and C++, and target them to deploy to either cloud or on-premises servers. You
    can define pipelines using YAML files or a UI-based classic editor.'
  prefs: []
  type: TYPE_NORMAL
- en: CI automates builds and tests for your project to ensure quality and consistency.
    CI can be configured to run on schedule or when new code is merged into your branch
    or both. CI generates artifacts that are used by CD pipelines to deploy to target
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: CD enables you to automatically deploy code to the target system and run tests.
    CD can be configured to run on a schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's understand more about Test Plans.
  prefs: []
  type: TYPE_NORMAL
- en: Test Plans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure DevOps provides a set of tools to drive quality in your projects. It
    provides browser-based test management solutions with all the capabilities required
    for manual and exploratory testing. It provides the capability to organize **test
    cases** under **test suites** or **test plans** with which you can track the quality
    of a feature or a release. These are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test cases** are used to validate individual parts of your application. They
    contain test steps, which you can use to assert a requirement. You can reuse a
    test case by importing it into test suites or test plans.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test suites** are a group of test cases executed to validate a feature or
    a component. You can create static test suites, requirement-based suites, and
    query-based suites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test plans** are a group of test suites or test cases used to track the quality
    of each iteration of a release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's understand more about Artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Artifacts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Artifacts** makes it easy to share code among teams. You can easily create
    and share Maven, npm, or NuGet package feeds from public and private sources,
    and they are easy to use in CI and CD pipelines. Artifacts are based on standard
    packaging formats and can be easily integrated with development IDEs, such as
    Visual Studio, as a package source.'
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps enables coordination and collaboration within teams and helps you
    to deliver projects consistently with high quality. With CI and CD, you can automate
    the build and deployment of your code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let's understand the CI pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the CI pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI is a practice in which you automate the building and testing of your code.
    In Azure DevOps, you can create pipelines and configure them to trigger automatically
    when code is merged to your target (master/main) branch, run on a schedule, or
    both. You may choose to create a pipeline using YAML files or a UI-based classic
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure illustrates the typical flow of code from a developer''s
    machine to the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6 – Typical flow of code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.6_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.6 – Typical flow of code
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding screenshot, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The developer uses development tools such as Visual Studio, Visual Studio Code,
    or Visual Studio for Mac to develop code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code changes are moved to the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CI pipeline is triggered, validates the build, runs tests, and publishes
    artifacts. The CD pipeline is triggered, and it deploys code to target systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The developer uses Application Insights to continuously monitor and improve
    the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**YAML** (short for **YAML Ain''t Markup Language**) is the preferred way to
    define your pipelines. It offers the same capabilities as a classic editor. You
    can check these files to repositories and manage them like any other source file.
    For more details, you can refer to [https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's understand the core components and flow of a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the flow and components of a pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **pipeline** is a definition of a set of actions to be performed to build
    and test your code. A pipeline definition contains a **trigger**, **variables**,
    **stages**, **jobs**, **steps**, and **tasks**. When we run a pipeline, it executes
    **tasks** defined in the pipeline definition. Let's understand each of these components
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `trigger` section of a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, the pipeline is configured to trigger when code
    is pushed to the `master` branch or any branch under the `releases` folder. Optionally,
    we can also specify path filters in the pipeline so that it is triggered only
    when code is changed that satisfies path conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also configure a pipeline to run automatically based on a schedule.
    In the following code snippet, a pipeline is configured to run every day at 9:30
    A.M. Schedules are specified using a `cron` expression and you can specify multiple
    schedules. If you set `always` to `true`, the build is triggered even if there
    is no change in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Variables** can be defined with a value and reused at multiple places in
    your pipeline. You can define variables at root, a stage, or in a job. There are
    three different types of variables that can be used in pipelines – user-defined,
    system variables, and environmental variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the `buildConfiguration` variable is defined
    with the `Release` value and is used in the `arguments` section of the task. The
    `build.artifactstagingdirectory` system variable contains the location of the
    artifacts directory.
  prefs: []
  type: TYPE_NORMAL
- en: Stages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Stages** are a collection of jobs run sequentially by default. You can also
    specify conditions on the preceding stage execution state or add approval checks
    to control when a stage should run.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample pipeline definition with multiple stages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding sample, three stages are configured, each running sequentially.
    The `Test` stage contains two jobs that can run in parallel, and the `Deploy`
    stage has a dependency on the `Test` stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the pipeline execution summary of the preceding
    sample, and you can click on each stage to view the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7 – Summary of a pipeline run'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.7_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.7 – Summary of a pipeline run
  prefs: []
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`testNull` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the job is configured with a condition to run only when
    `testNull` is empty.
  prefs: []
  type: TYPE_NORMAL
- en: Steps and tasks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Steps** are groups of tasks in your pipeline. These could be to build your
    code, run tests, or publish artifacts. Each step is executed on the agent and
    has access to the pipeline workspace.'
  prefs: []
  type: TYPE_NORMAL
- en: '`DotNetCoreCLI@2` task to build `csproj`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: To learn more about pipelines, you can refer to [https://docs.microsoft.com/en-in/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=java%2Ctfs-2018-2%2Cbrowser](https://docs.microsoft.com/en-in/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=java%2Ctfs-2018-2%2Cbrowser).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let's learn more about the CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the CD pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CD is a process by which you automate the deployment of code to target environments.
    CD pipelines use artifacts produced by CI pipelines and deploy to one or more
    environments. Like the CI pipeline, we can use YAML files or a classic editor
    to define a CD pipeline. You can specify conditions on the preceding stage execution
    state or add approval checks to deploy, which is a very common scenario for production
    deployments.
  prefs: []
  type: TYPE_NORMAL
- en: You can also configure to run automated UI tests to perform a sanity check post-deployment.
    Based on the sanity check results, you can configure it to automatically promote
    code to a higher environment.
  prefs: []
  type: TYPE_NORMAL
- en: At any point in time, if the deployment to a stage fails, we can re-deploy code
    from previous releases. Depending on the configured retention policy under the
    project settings, Azure DevOps retains build artifacts so that it is easy to deploy
    code of any version at any time. If you find any issues with the application post-deployment,
    you can easily find the last known good release and deploy code to minimize the
    business impact.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand more about this in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment versus CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous deployment is automated deployment to the target system whenever
    new code is merged to your repository, whereas CD makes the application available
    to deploy at any time to the target system. Azure DevOps offers multi-staged pipelines;
    you can configure pipelines with stages to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment is usually configured on lower environments, such as dev
    or test, whereas for higher environments such as staging or production, you should
    consider CD so that you can validate changes on lower environments and approve
    to deploy code to higher environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates a multi-stage pipeline, with automated
    build and release to dev, and waiting for approval in the test stage. In this
    case, releasing code to testing requires approval:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8 – Multi-stage pipeline pending approval'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.8_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.8 – Multi-stage pipeline pending approval
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about how to configure approvals and check on Azure pipelines,
    you can refer to [https://docs.microsoft.com/en-in/azure/devops/pipelines/process/approvals?view=azure-devops&tabs=check-pass](https://docs.microsoft.com/en-in/azure/devops/pipelines/process/approvals?view=azure-devops&tabs=check-pass).
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the details of a pipeline run, you can click on any stage to view the
    logs of that run. Logs help us to troubleshoot deployment failures. The following
    screenshot illustrates the logs of a pipeline run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.9 – Pipeline execution details'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.9_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.9 – Pipeline execution details
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you will notice that you can view stages, jobs,
    and tasks configured in the pipeline, and you can click on tasks to view logs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to create a pipeline to build and deploy
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an ASP.NET 6 application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have explored Azure DevOps, understood the tools
    and services it offers, and then learned about CI and CD pipelines. In this section,
    we shall learn how to create an Azure DevOps project, clone the repository, push
    code to the repository, and create a CI and CD pipeline to deploy code to Azure
    App Service.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Do check the *Technical requirements* section to ensure you have everything
    set up before you deploy the sample application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can follow along with these steps to deploy an ASP.NET 6 application to
    Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Azure DevOps account. Create an Azure DevOps account if you don't
    have one; you can follow the steps given at [https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page of Azure DevOps, provide a name for your project, say, `HelloWorld`,
    then for **Version control**, choose **Git**, and for **Work item process**, you
    can choose **Agile**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.10 – New Azure DevOps project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.10_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.10 – New Azure DevOps project
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create a service connection, which we will use in the pipeline to
    connect and deploy code to Azure App Service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the left menu, navigate to **Project settings** | **Service connections**
    | **Create service connection** | **Azure Resource Manager** | **Service Principal
    (automatic)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.11 – New service principal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.11_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.11 – New service principal
  prefs: []
  type: TYPE_NORMAL
- en: The service principal enables pipelines to connect to your Azure subscription
    to manage resources or deploy your code to Azure services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a subscription and provide a name for the connection to create a service
    connection. Azure DevOps uses this service connection to connect Azure resources
    and deploy code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.12 – New service principal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.12_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.12 – New service principal
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project is created, you should see a page similar to the following.
    From the left menu, under **Repos**, select **Branches**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.13 – Azure DevOps Home | Repos screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.13_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.13 – Azure DevOps Home | Repos screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the link, which we will use to clone the repository to our local machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.14 – Clone repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.14_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.14 – Clone repository
  prefs: []
  type: TYPE_NORMAL
- en: To clone the repository to your system, open Command Prompt and navigate to
    a folder to which you want to clone the code, then run the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace `<organization>` with your Azure DevOps organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Since our repository is new and empty, we need to add code to it. The following
    `dotnet` CLI commands would help us to create an ASP.NET 6 application and an
    xUnit project, create a solution file, and add a web and tests project to it.
    Run each command in sequence to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following commands to build code and run tests to verify whether it
    is all good:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have tested the code, next let's see how the pipeline is created
    for CI and CD for using the code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pipeline for CI and CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After running the tests, we need to see how the CI and CD pipeline is created.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to create a pipeline for CI and CD. You can use the code available
    at [https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/master/Chapter16/Pipelines/HelloWorld/azure-ci-pipeline.yml](https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/master/Chapter16/Pipelines/HelloWorld/azure-ci-pipeline.yml)
    and save it in the root directory of the repository. Let's name it `azure-ci-pipeline.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This pipeline is configured to trigger when new code is merged to the `main`
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: It is configured to have three stages – build, dev, and test – where the build
    stage is configured to build code, run unit tests, and publish artifacts. The
    dev and test stages are configured to deploy code to Azure App Service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dependencies are configured at the dev and test stages, where the dev stage
    depends on build, and the test depends on the dev stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's examine a few important sections of this YAML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet contains a section to define variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice three variables are declared in the YAML file. Provide the
    appropriate values before you save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`azureSubscription`: Provide the name of your service connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devAppServiceName`: Provide the name of the app service for dev deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`testAppServiceName`: Provide the name of the app service for test deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To build code, we use the `DotNetCoreCLI@2` task and configure `command`, `projects`,
    and, optionally, `arguments`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '`command` is configured as `build` and the path is set to `csproj` for `projects`
    to build the code. This task runs .NET CLI commands, so we can also configure
    this task with other .NET CLI commands, such as `run`, `test`, `publish`, `restore`,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To publish the code, the `PublishBuildArtifacts@1` task is used. It is configured
    with `PathtoPublish`, `ArtifactName`, and `publishLocation`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`PathtoPublish` is configured with the location of the artifact directory where
    build artifacts are available, `ArtifactName` as `drop`, and `publishLocation`
    as `Container` to publish artifacts to Azure Pipelines. Alternatively, we can
    also configure `publishLocation` as `FileShare`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet does the required actions to deploy code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: In the deployment job, the first step is to download the artifact, and the artifact's
    name should be the same as the one that is configured in the `PublishBuildArtifacts@1`
    task, in this case, `drop`.
  prefs: []
  type: TYPE_NORMAL
- en: The `AzureWebApp@1` task is used to deploy artifacts to Azure App Service. The
    required parameters are `azureSubscription`, `appType`, `appName`, `package`,
    and `deploymentMethod` (as `auto`).
  prefs: []
  type: TYPE_NORMAL
- en: Now that the artifact is ready, we see how the code is committed and code changes
    are pushed.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the code and pipeline are ready, the next step is to commit and push
    these changes to the Azure DevOps repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Command Prompt, run the following commands to commit changes locally and
    push them to Azure DevOps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In Azure DevOps, navigate to **Pipelines** and click **Create Pipeline** to
    create a new pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.15 – New pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.15_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.15 – New pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the pipeline, we need to perform four steps. Select the service
    in which your repository resides, select the repository, configure the pipeline,
    and save. For this implementation, select **Azure Repos Git** to continue, and
    then select your repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.16 – Source control selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.16_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.16 – Source control selection
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Configure** tab, choose **Existing Azure Pipelines YAML file** to
    continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.17 – Configuration pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.17_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.17 – Configuration pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the pipeline file we saved earlier in the repository and click **Continue**,
    and then click **Run** to trigger the pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.18 – YAML file selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.18_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.18 – YAML file selection
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open a page in which we can see the state of the pipeline. The following
    screenshot is taken from the pipeline run. You will notice three stages have been
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.19 – Summary of the pipeline run'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.19_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.19 – Summary of the pipeline run
  prefs: []
  type: TYPE_NORMAL
- en: In the build stage, you will notice two jobs in progress.
  prefs: []
  type: TYPE_NORMAL
- en: The dev stage and test stage are waiting for the build to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, you can enable deployment slots on Azure App Service and configure
    the pipeline to deploy code to a non-production deployment slot, say, *pre-prod*.
    Once you check the sanity of the deployed code, you can swap the *production*
    slot with *pre-prod*. The swap is instantaneous and, without any downtime, you
    can make the latest changes available to users. If you notice any issues, you
    can swap back to the previous slot to go back to the last known good version.
    For more information, you can refer to [https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots](https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the pipeline execution is complete, navigate to **Environments** under
    **Pipelines** from the left menu. You will notice the dev and test environments
    are created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.20 – Environments'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.20_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.20 – Environments
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **test** stage and in the more actions selection, select **Approvals
    and checks** to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.21 – Approvals and checks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.21_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.21 – Approvals and checks
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find many options to choose from, such as **Approvals**, **Branch
    control**, **Business Hours**, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.22 – Add checks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.22_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.22 – Add checks
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Approvals** to continue and it will open a dialog where we can select
    users/groups as approvers. Provide the necessary details and click **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.23 – Add approvals'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.23_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.23 – Add approvals
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-run the pipeline to test the changes. You will notice the pipeline is waiting
    to execute at the test stage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.24 – Multi-stage pipeline with pending approvals'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.24_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.24 – Multi-stage pipeline with pending approvals
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Review**, which will open a dialog to approve or reject. Click **Approve**
    to finish the deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.25 – Approve or reject'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.25_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.25 – Approve or reject
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, in this section, we started with the creation of a new project
    in Azure DevOps, then cloned the repository to a local system, created a simple
    ASP.NET Core application using the .NET CLI, created a pipeline in YAML to build,
    test, and publish artifacts and deploy them to Azure App Service, and committed
    and pushed code back to the repository. Next, we created a new CI/CD pipeline
    by selecting a YAML file in our repository and triggered the pipeline. In **Environments**,
    we configured approval checks and triggered the pipeline to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood what Azure DevOps is, as well as the tools and
    services it offers. We understood how services such as Boards, Repos, Pipelines,
    Test Plans, and Artifacts help us to efficiently execute a project.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we looked at CI and CD pipelines and their core components. We also learned
    how they help us to automate the building and deployment of code. We concluded
    this chapter by learning how to create an ASP.NET 6 application, and a pipeline
    to build and deploy to Azure App Service using CI and CD pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this book has helped you to enhance your .NET skills and motivated you
    to try out and build more of its applications. There are further topics that you
    can explore by referring to the notes and the *Further reading* sections of the
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: For enterprise applications, we have also covered the happy path scenarios for
    a typical e-commerce application, and it can be further extended based on the
    requirements defined in [*Chapter 1*](B18507_01_Epub.xhtml#_idTextAnchor020),
    *Designing and Architecting the Enterprise Application*. There are examples to
    extend the authentication/authorization for an end-to-end flow, using an API gateway
    for service-to-service communication and authentication, and implementing the
    notification service, for you to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: We wish you the best in your C# and .NET projects. Happy learning!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does continuous deployment differ from CD?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. CD works with databases and continuous deployment supports web applications.
  prefs: []
  type: TYPE_NORMAL
- en: b. Continuous deployment is released to an environment *every* time, whereas
    CD is released to an environment at *any* one time.
  prefs: []
  type: TYPE_NORMAL
- en: c. Continuous deployment requires the cloud, while CD works with on-premises
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: d. Continuous deployment is released to an environment at *any* one time, whereas
    CD is released to an environment *every* time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: b**'
  prefs: []
  type: TYPE_NORMAL
- en: What are the characteristics of the CD approach? (Choose two)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. A focus on cycle time reduction
  prefs: []
  type: TYPE_NORMAL
- en: b. A small amount of complex releases
  prefs: []
  type: TYPE_NORMAL
- en: c. Resource-based management of the process
  prefs: []
  type: TYPE_NORMAL
- en: d. Self-managed and responsive teams
  prefs: []
  type: TYPE_NORMAL
- en: '**Answers : a and d**'
  prefs: []
  type: TYPE_NORMAL
- en: Which component provides the first feedback on the quality of committed application
    code changes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Automated deployment
  prefs: []
  type: TYPE_NORMAL
- en: b. Automated provisioning
  prefs: []
  type: TYPE_NORMAL
- en: c. Automated build
  prefs: []
  type: TYPE_NORMAL
- en: d. Automated test
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: c**'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn more about Azure DevOps, you can refer to [https://docs.microsoft.com/en-in/azure/devops/user-guide/services?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/user-guide/services?view=azure-devops),
    and for pipelines, you can refer to [https://docs.microsoft.com/en-in/azure/devops/pipelines/get-started/pipelines-get-started?view=azure-devops](https://docs.microsoft.com/en-in/azure/devops/pipelines/get-started/pipelines-get-started?view=azure-devops).
  prefs: []
  type: TYPE_NORMAL
