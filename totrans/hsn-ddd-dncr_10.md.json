["```cs\ndocker-compose up\n```", "```cs\npublic void UpdatePrice(Price price) =>  \n    Apply(new Events.ClassifiedAdPriceUpdated  \n    {  \n        Id = Id,  \n        Price = price.Amount,  \n        CurrencyCode = price.Currency.CurrencyCode  \n    });\n```", "```cs\nprotected override void When(object @event)  \n{  \n    switch (@event)  \n    {  \n        // only a part of the When method is shown  \n        case Events.ClassifiedAdPriceUpdated e:  \n            Price = new Price(e.Price, e.CurrencyCode);  \n            break;  \n    }  \n}\n```", "```cs\nTask<WriteResult> AppendToStreamAsync(string stream, long expectedVersion, IEnumerable<EventData> events)\n```", "```cs\nusing System.Threading.Tasks;\n\nnamespace Marketplace.Framework\n{\n    public interface IAggregateStore\n    {\n        Task<bool> Exists<T, TId>(TId aggregateId);\n\n        Task Save<T, TId>(T aggregate) where T : AggregateRoot<TId>;\n\n        Task<T> Load<T, TId>(TId aggregateId) \n            where T : AggregateRoot<TId>;\n    }\n}\n```", "```cs\ndotnet add Marketplace.Framework package Newtonsoft.Json\ndotnet add Marketplace.Framework package EventStore.ClientAPI.NetCore\n```", "```cs\nprivate static string GetStreamName<T, TId>(TId aggregateId)\n    => $\"{typeof(T).Name}-{aggregateId.ToString()}\";\n\nprivate static string GetStreamName<T, TId>(T aggregate)\n    where T : AggregateRoot<TId>\n    => $\"{typeof(T).Name}-{aggregate.Id.ToString()}\";\n```", "```cs\npublic sealed class EventData\n{\n    public readonly Guid EventId;\n    public readonly string Type;\n    public readonly bool IsJson;\n    public readonly byte[] Data;\n    public readonly byte[] Metadata;\n}\n```", "```cs\nprivate static byte[] Serialize(object data)\n    => Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(data));\n```", "```cs\nvar changes = aggregate.GetChanges()\n    .Select(@event => new EventData(\n        eventId: Guid.NewGuid(),\n        type: @event.GetType().Name,\n        isJson: true,\n        data: Serialize(@event),\n        metadata: null));\n```", "```cs\nprivate class EventMetadata\n{\n    public string ClrType { get; set; }\n}\n```", "```cs\nvar changes = aggregate.GetChanges()\n    .Select(@event => \n        new EventData(\n            eventId: Guid.NewGuid(),\n            type: @event.GetType().Name,\n            isJson: true,\n            data: Serialize(@event),\n            metadata: Serialize(new EventMetadata\n                {ClrType = @event.GetType().AssemblyQualifiedName})\n        ))\n    .ToArray();\n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Newtonsoft.Json;\n\nnamespace Marketplace.Infrastructure\n{\n    public class EsAggregateStore : IAggregateStore\n    {\n        private readonly IEventStoreConnection _connection;\n\n        public EsAggregateStore(IEventStoreConnection connection)\n        {\n            _connection = connection;\n        }\n\n        public async Task Save<T, TId>(T aggregate) \n            where T :  Aggregate<TId>\n        {\n            if (aggregate == null)\n                throw new ArgumentNullException(nameof(aggregate));\n\n            var changes = aggregate.GetChanges()\n                .Select(@event =>\n                    new EventData(\n                        eventId: Guid.NewGuid(),\n                        type: @event.GetType().Name,\n                        isJson: true,\n                        data: Serialize(@event),\n                        metadata: Serialize(new EventMetadata\n                            {ClrType = \n                             @event.GetType().AssemblyQualifiedName})\n                    ))\n                .ToArray();\n\n            if (!changes.Any()) return;\n\n            var streamName = GetStreamName<T, TId>(aggregate);\n\n            await _connection.AppendToStreamAsync(\n                streamName,\n                aggregate.Version,\n                changes);\n\n            aggregate.ClearChanges();\n        }\n\n        private static byte[] Serialize(object data)\n            => Encoding.UTF8.GetBytes(\n                JsonConvert.SerializeObject(data));\n\n        private static string GetStreamName<T, TId>(TId aggregateId)\n            => $\"{typeof(T).Name}-{aggregateId.ToString()}\";\n\n        private static string GetStreamName<T, TId>(T aggregate) \n            where T : Aggregate<TId>\n            => $\"{typeof(T).Name}-{aggregate.Id.ToString()}\";\n    }\n}\n```", "```cs\npublic async Task<T> Load<T, TId>(TId aggregateId)\n    where T : AggregateRoot<TId>\n{\n    if (aggregateId == null)\n        throw new ArgumentNullException(nameof(aggregateId));\n\n    var stream = GetStreamName<T, TId>(aggregateId);\n    var aggregate = (T) Activator.CreateInstance(typeof(T), true);\n\n    var page = await _connection.ReadStreamEventsForwardAsync(\n        stream, 0, 1024, false);\n\n    aggregate.Load(page.Events.Select(resolvedEvent =>\n    {\n        var meta = JsonConvert.DeserializeObject<EventMetadata>(\n            Encoding.UTF8.GetString(resolvedEvent.Event.Metadata));\n        var dataType = Type.GetType(meta.ClrType);\n        var jsonData = \n            Encoding.UTF8.GetString(resolvedEvent.Event.Data);\n        var data = JsonConvert.DeserializeObject(jsonData, dataType);\n        return data;\n    }).ToArray());\n\n    return aggregate;\n}\n```", "```cs\npublic void Load(IEnumerable<object> history)\n{\n    foreach (var e in history)\n    {\n        When(e);\n        Version++;\n    }\n}\n```", "```cs\npublic async Task<bool> Exists<T, TId>(TId aggregateId)\n{\n    var stream = GetStreamName<T, TId>(aggregateId);\n    var result = await _connection.ReadEventAsync(stream, 1, false);\n    return result.Status != EventReadStatus.NoStream;\n}\n```", "```cs\n{\n  \"eventStore\": {\n    \"connectionString\": \"ConnectTo=tcp://admin:changeit@localhost:1113; \n     DefaultUserCredentials=admin:changeit;\"\n  }\n}\n```", "```cs\nprivate static IConfiguration BuildConfiguration(string[] args)\n    => new ConfigurationBuilder()\n        .SetBasePath(CurrentDirectory)\n        .AddJsonFile(\"appsettings.json\", false, false)\n        .Build();\n```", "```cs\n<ItemGroup>\n  <Content Update=\"appsettings.json\" \n    CopyToOutputDirectory=\"Always\" \n    CopyToPublishDirectory=\"Always\" />\n</ItemGroup>\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Microsoft.Extensions.Hosting;\n\nnamespace Marketplace\n{\n    public class HostedService : IHostedService\n    {\n        private readonly IEventStoreConnection _esConnection;\n\n        public HostedService(IEventStoreConnection esConnection)\n        {\n            _esConnection = esConnection;\n        }\n\n        public Task StartAsync(CancellationToken cancellationToken)\n            => _esConnection.ConnectAsync();\n\n        public Task StopAsync(CancellationToken cancellationToken)\n        {\n            _esConnection.Close();\n            return Task.CompletedTask;\n        }\n    }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    var esConnection = EventStoreConnection.Create(\n        Configuration[\"eventStore:connectionString\"],\n        ConnectionSettings.Create().KeepReconnecting(),\n        Environment.ApplicationName);\n\n    var store = new EsAggregateStore(esConnection);\n    var purgomalumClient = new PurgomalumClient();\n\n    services.AddSingleton(esConnection);\n    services.AddSingleton<IAggregateStore>(store);\n\n    services.AddSingleton(new ClassifiedAdsApplicationService(\n        store, new FixedCurrencyLookup()));\n    services.AddSingleton(new UserProfileApplicationService(\n        store, t => purgomalumClient.CheckForProfanity(t)));\n\n    services.AddSingleton<IHostedService, HostedService>();\n    services.AddMvc();\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\",\n            new Info\n            {\n                Title = \"ClassifiedAds\",\n                Version = \"v1\"\n            });\n    });\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\n\nnamespace Marketplace.Framework\n{\n    public static class ApplicationServiceExtensions\n    {\n        public static async Task HandleUpdate<T, TId>(\n            this IApplicationService service,\n            IAggregateStore store, TId aggregateId, \n            Action<T> operation)\n            where T : AggregateRoot<TId>\n        {\n            var aggregate = await store.Load<T, TId>(aggregateId);\n            if (aggregate == null)\n                throw new InvalidOperationException(\n                    $\"Entity with id {aggregateId.ToString()} cannot be \n                    found\");\n\n            operation(aggregate);\n            await store.Save<T, TId>(aggregate);\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain.ClassifiedAd;\nusing Marketplace.Domain.Shared;\nusing Marketplace.Framework;\nusing static Marketplace.ClassifiedAd.Contracts;\n\nnamespace Marketplace.ClassifiedAd\n{\n    public class ClassifiedAdsApplicationService : IApplicationService\n    {\n        private readonly ICurrencyLookup _currencyLookup;\n        private readonly IAggregateStore _store;\n\n        public ClassifiedAdsApplicationService(\n            IAggregateStore store, ICurrencyLookup currencyLookup\n        )\n        {\n            _currencyLookup = currencyLookup;\n            _store = store;\n        }\n\n        public Task Handle(object command) =>\n            command switch\n            {\n                V1.Create cmd =>\n                    HandleCreate(cmd),\n                V1.SetTitle cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.SetTitle(\n                            ClassifiedAdTitle\n                                .FromString(cmd.Title)\n                        )\n                    ),\n                V1.UpdateText cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.UpdateText(\n                            ClassifiedAdText\n                                .FromString(cmd.Text)\n                        )\n                    ),\n                V1.UpdatePrice cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.UpdatePrice(\n                            Price.FromDecimal(\n                                cmd.Price,\n                                cmd.Currency,\n                                _currencyLookup\n                            )\n                        )\n                    ),\n                V1.RequestToPublish cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.RequestToPublish()\n                    ),\n                V1.Publish cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.Publish(new UserId(cmd.ApprovedBy))\n                    ),\n                _ => Task.CompletedTask\n            };\n\n        private async Task HandleCreate(V1.Create cmd)\n        {\n            if (await _store.Exists<Domain.ClassifiedAd.ClassifiedAd, \n                ClassifiedAdId>(\n                new ClassifiedAdId(cmd.Id)\n            ))\n                throw new InvalidOperationException(\n                    $\"Entity with id {cmd.Id} already exists\");\n\n            var classifiedAd = new Domain.ClassifiedAd.ClassifiedAd(\n                new ClassifiedAdId(cmd.Id),\n                new UserId(cmd.OwnerId)\n            );\n\n            await _store.Save<Domain.ClassifiedAd.ClassifiedAd, \n                ClassifiedAdId>(classifiedAd);\n        }\n\n        private Task HandleUpdate(\n            Guid id,\n            Action<Domain.ClassifiedAd.ClassifiedAd> update\n        ) =>\n            this.HandleUpdate(\n                _store,\n                new ClassifiedAdId(id),\n                update\n            );\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain.Shared;\nusing Marketplace.Domain.UserProfile;\nusing Marketplace.Framework;\nusing static Marketplace.UserProfile.Contracts;\n\nnamespace Marketplace.UserProfile\n{\n    public class UserProfileApplicationService\n        : IApplicationService\n    {\n        private readonly IAggregateStore _store;\n        private readonly CheckTextForProfanity _checkText;\n\n        public UserProfileApplicationService(\n            IAggregateStore store,\n            CheckTextForProfanity checkText\n        )\n        {\n            _store = store;\n            _checkText = checkText;\n        }\n\n        public Task Handle(object command) =>\n            command switch\n            {\n                V1.RegisterUser cmd =>\n                    HandleCreate(cmd),\n                V1.UpdateUserFullName cmd =>\n                    HandleUpdate(\n                        cmd.UserId,\n                        profile => profile.UpdateFullName(\n                            FullName.FromString(cmd.FullName)\n                        )\n                    ),\n                V1.UpdateUserDisplayName cmd =>\n                    HandleUpdate(\n                        cmd.UserId,\n                        profile => profile.UpdateDisplayName(\n                            DisplayName.FromString(\n                                cmd.DisplayName,\n                                _checkText\n                            )\n                        )\n                    ),\n                V1.UpdateUserProfilePhoto cmd =>\n                    HandleUpdate(\n                        cmd.UserId,\n                        profile => profile\n                            .UpdateProfilePhoto(\n                                new Uri(cmd.PhotoUrl)\n                            )\n                    ),\n                _ => Task.CompletedTask\n            };\n\n        private async Task HandleCreate(V1.RegisterUser cmd)\n        {\n            if (await _store\n                .Exists<Domain.UserProfile.UserProfile, UserId>(\n                    new UserId(cmd.UserId)\n                ))\n                throw new InvalidOperationException(\n                    $\"Entity with id {cmd.UserId} already exists\"\n                );\n\n            var userProfile = new Domain.UserProfile.UserProfile(\n                new UserId(cmd.UserId),\n                FullName.FromString(cmd.FullName),\n                DisplayName.FromString(cmd.DisplayName, _checkText)\n            );\n\n            await _store\n                .Save<Domain.UserProfile.UserProfile, UserId>(\n                    userProfile\n                );\n        }\n\n        private Task HandleUpdate(\n            Guid id,\n            Action<Domain.UserProfile.UserProfile> update\n        ) =>\n            this.HandleUpdate(\n                _store,\n                new UserId(id),\n                update\n            );\n    }\n}\n```"]