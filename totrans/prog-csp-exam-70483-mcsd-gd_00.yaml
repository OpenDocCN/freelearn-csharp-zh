- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MCSD 70-483 exam is an entry-level Microsoft certification exam for C# developers
    that is widely used to measure their expertise in the field of C# programming.
    This book is a certification guide to prepare you for the skills that are evaluated
    in the certification exam and also promotes building problem-solving acumen with
    C#. Every chapter in the book has been designed as preparation material for the
    Microsoft MCSD 70-483 exam.
  prefs: []
  type: TYPE_NORMAL
- en: For those who don't have much experience of working in C#, we have added some
    chapters at the start of the book that will provide basic knowledge about C# programming.
    This knowledge will not only help you to pass the certification but will also
    help you to become a better C# developer.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is designed for both experienced developers and people new to C# who
    are intending to undertake the 70-483 Programming in C# certification exam in
    the near future. The book provides extensive knowledge of all the topics that
    are evaluated in the exam. To drive better understanding, each chapter in the
    book is accompanied by code examples along with assessment questions.
  prefs: []
  type: TYPE_NORMAL
- en: To make the path of learning C# easier for beginners, we have also tried to
    address the basics of C# and .NET Framework in the first three chapters of the
    book. To get the most value out of the book, you are expected to have a fair understanding
    of any programming language; for example, C, C++, or C#.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ccec4122-6067-4279-843b-6123b1eff017.xhtml), *Learning the Basics
    of C#*, focuses on the basics of the C# language. In this chapter, you will learn
    about the underlying .NET Framework architecture and how all the components, such
    as the garbage collector, common language runtime, base libraries, and so on,
    interact with each other. We will analyze the similarities between C# and other
    programming languages such as C++ and C. We will also look at features that make
    C# different than C++ and C. Finally, using a very basic Hello World program,
    you will learn about the different components of a C# program, such as classes,
    namespaces, assemblies, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](7b49f1ac-89ac-4157-88b5-e6b8cd006733.xhtml), *Understanding Classes,
    Structures, and Interfaces*, expands on the first chapter and covers some more
    basics of a C# application. In this chapter, you will learn about the different
    access modifiers available in a C# program, and also how they can be used to achieve
    code structure and reduced complexity. We will also look at the different primitive
    data types available in C#. While looking at the class and struct variables, we
    will see the difference between a reference type variable and a data type variable.
    We will then look at inheritance, which is an important aspect of C# programming.
    We will cover how inheritance is implemented in C# and how it differs from the
    implementation of an interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](8acdf308-13c5-4298-bdba-7bef6e8b087b.xhtml), *Understanding Object-Oriented
    Programming*, focuses on the four pillars of **Object-Oriented Programming** (**OOP**).
    Using examples, you will learn how each of those pillars – encapsulation, polymorphism,
    abstraction, and inheritance—is implemented. While looking at inheritance, we
    will expand on the learning of [Chapter 2](7b49f1ac-89ac-4157-88b5-e6b8cd006733.xhtml),
    *Understanding Classes, Structures, and Interfaces*, and look at some other critical
    aspects, such as method overriding, virtual methods, and sealed and abstract classes.
    While looking at polymorphism, we will learn how we can implement both compile/static
    and runtime polymorphism in C# programs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](220cab72-e542-4103-9cb3-1245a3ff33eb.xhtml), *Implementing Program
    Flow*, focuses on how a developer can manage program flow in C#. In other words,
    this chapter helps you to understand how to control the program and make decisions
    using the statements available in C#. We will cover various Boolean expressions
    such as `if`/`else` and `switch`, which control the flow of code based upon conditions.
    This chapter also provides an overview of various operators, such as the conditional
    operator and the equality operator (`<`, `>`, and `==`), which govern the flow
    of code. Apart from operators and decision-making statements, this chapter helps
    you gain an understanding of iterating through collections (`for` loop, `while`
    loop, and so on) and explicit jump statements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](66c957f7-4032-461e-91e4-00da1eb6a517.xhtml), *Creating and Implementing
    Events and Callbacks*, focuses on events and callbacks in C#, which are important
    and give more control over the program. You''ll learn about the publish/subscribe
    model using events and callbacks, and focus on delegates. Then, we will move on
    to different ways of initiating delegates and lambda expressions. We will also
    spend some time on a new operator called the lambda operator, which is used in
    Lambda expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](0e4bc746-9497-4794-bd30-81260431018f.xhtml), *Managing and Implementing
    Multithreading*, focuses on handling responsiveness in long-running programs and
    how we can keep the user notified about their progress. We''ll also look at how
    we can use the multi-core processing power that comes with every computer effectively.
    We will spend time looking at threads, thread properties, and how to use tasks
    and perform multithreaded operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](7c2b2a82-6a5c-4c96-a877-04d8a6e26ef0.xhtml), *Implementing Exception
    Handling*, focuses on understanding how to structure your program in a way that
    helps it to run in all scenarios; how we can handle unhandled exceptions; how
    to use the `try`, `catch`, and `finally` keywords and clean up resources once
    execution is completed. After reading this chapter, you will understand exceptions
    and how to use them in your program. You''ll also be able to create custom exceptions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](4eff7e9c-efbf-4e0f-9ee5-62f9934451b2.xhtml), *Creating and Using
    Types in C#*, focuses on the different types of variables available in C#. In
    [Chapter 2](7b49f1ac-89ac-4157-88b5-e6b8cd006733.xhtml), *Understanding Classes,
    Structures, and Interfaces*, we introduced users to the reference and data type
    variables available in C#. In this chapter, we will expand on that knowledge and
    learn how both variable types are maintained in memory. We will look at the managed
    heap memory structure, which is used for saving reference type variables. We will
    also look at the use of variable types pointer types in C#. Using pointers, we
    can implement memory-related operations that are otherwise considered unsafe in
    C#. We will also look at some important features in C#, such as properties, named
    arguments, and optional arguments, which are available in C# programming. We will
    look at how we can convert value-type variables to objects using boxing and similarly
    use unboxing to convert the object back to a value-type variable. We will then
    look at the different operations that are possible on a string representation
    in C#. We will also look at how we can use `stringbuilder` to optimize the performance
    of a C# program.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](b13c398c-8c38-4c9e-804f-2e0a2eb0ddbe.xhtml), *Managing the Object
    Life Cycle*, focuses on how the garbage collector manages the allocation and release
    of memory in .NET Framework. In this chapter, you will learn the difference between
    managed and unmanaged code in C#. We will look at mark-compact algorithms, used
    by garbage collectors for the allocation and release of memory. We will look at
    the possible ways we can manage the memory allocated to unmanaged code. We will
    also look at how we can implement finalization in a C# application and the performance
    implications of doing so. We will introduce the IDisposable interface and understand
    its differences from a `finalize` block. We will also look at code examples, in
    which we will combine both the IDisposable interface and a `finalize` block to
    achieve the best possible memory management for a C# application. Finally, we
    will look at the use of the `using` block in a C# application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](b7bdae98-fc5b-4430-bb0d-b8541ca64f8d.xhtml), *Find, Execute, and
    Create Types at Runtime Using Reflection*, focuses on understanding how .NET Framework
    allows us to read/create metadata and how we can use reflection to read metadata
    and process it during runtime. We will focus on using attributes, creating custom
    attributes, and how we can retrieve attribute information at runtime. We''ll also
    cover how we can use reflection to create types, access properties, and invoke
    methods.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](a677e3b2-a1ba-43c9-86dd-e3c92198ebc2.xhtml), *Validating Application
    Input*, focuses on validating input from the different kinds of users who''ll
    access your application and how we can avoid the application crashing based on
    user input. The purpose of this chapter is to understand the importance of validating
    input data in your application, the different validation techniques available
    in .NET Framework, and ways to validate JSON data and XML data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](6c30397b-cc74-49ef-bed8-710f6970cef2.xhtml), *Performing Symmetric
    and Asymmetric Encryption*, focuses on how to keep information secure, what measures
    we can take while transmitting information over the internet, and understanding
    cryptography to encrypt and decrypt plain text. After reading this chapter, you
    will understand how to encrypt and decrypt text and be familiar with the different
    algorithms available in .NET Framework to perform such exercises.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](1b843395-d58f-4d0b-b241-210ed50dd02b.xhtml), *Managing Assemblies
    and Debugging Applications*, focuses on how to manage .NET assemblies, debugging
    applications, and how to use tracing. This chapter covers validation techniques
    we have already learned and exception handling for those scenarios, as well as
    monitoring code blocks. We''ll also look at Visual Studio features or tools for
    debugging an application. After that, we''ll look at the versioning of assemblies
    and how we can have the same assembly side by side, as well as how we can distribute
    those assemblies without impacting others.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](ed867897-1e3b-47fe-b646-28484f783f37.xhtml), *Performing I/O Operations*,
    focuses on how I/O operations are performed in a C# application. In this chapter,
    we will look at the different operations possible in C# to access data in I/O
    files as well as operations coming from external web services. Using code examples,
    you will see how we can use the `System.IO` helper class to read/write data from
    a file. We will also look at the helper classes of `File` and `FileInfo` provided
    in C# for performing I/O operations. We will then look at the `WebRequest` and
    `WebResponse` helper classes, which help us to interact with data coming from
    external services/applications. Finally, we will look at how we can execute these
    operations asynchronously in an application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](75481977-f6a3-41af-ab1e-e3b112dd9aad.xhtml), *Using LINQ Queries*,
    focuses on how LINQ queries are implemented in C#. In this chapter, you will be
    introduced to the basics of a LINQ query, gaining an understanding of the different
    components and how they are constructed in .NET Framework. We will then look at
    the features in C# that help with the implementation of LINQ queries. Some of
    those features are necessary while some of them help us to get the best outcomes
    from LINQ queries. Using code examples, you will come to understand the implementation
    of implicitly typed variables, object initialization syntax, Lambda expressions,
    extension methods, and anonymous types. We will then look at the different operations
    available in LINQ queries. Using code examples, you will learn about the different
    scenarios in which you can use each of these operators. Finally, we will look
    at how you can use LINQ queries to perform operations on an XML file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](a782bfe4-0a62-44b0-b7ad-9e697a5fed99.xhtml), *Serialization, Deserialization,
    and Collections*, focuses on different serialization and deserialization approaches,
    such as XML serialization, JSON serialization, and binary serialization, available
    in .NET Framework. We will also look at how we can define data contracts in web
    services so that data can be exchanged between different applications. We will
    then look at different collection objects, such as arrays, lists, dictionary,
    queues, and stacks, available in C# and understand how they can be used to store
    and consume data.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the best possible outcome from this book, it''s advisable for you to
    have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A basic understanding of software development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic understanding of any common programming language, such as C, C++, or
    C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the entirety of this book, we will be going through different code examples
    in C# and will be using Visual Studio 2017 Community Edition for the code examples.
    The following hardware requirements are essential for Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Operating system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 or higher
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Server 2016: Standard and Datacenter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 8.1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows Server 2012 R2: Essential, Standard, and Datacenter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 7 SP1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hardware requirements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimum 2 GB of RAM
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.8 GHZ or faster processor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional requirements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administrative rights of the system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET Framework 4.5 or higher
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio: All of the code examples in this book have been compiled on
    Visual Studio Community Edition 2017 (you can also use a higher version of Visual
    Studio). It''s available for installation at [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For better understanding, it's advisable that readers go through all the assessments
    at the end of each chapter as well as the mock tests available at the end of the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: It's also advisable for readers to go through the code examples available for
    each of the chapters and do the self-practice after each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Support tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Programming-in-C-Sharp-Exam-70-483-MCSD-Guide](https://github.com/PacktPublishing/Programming-in-C-Sharp-Exam-70-483-MCSD-Guide).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781789536577_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789536577_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'CodeInText: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "By default, a method by the name of `Main` will also be added
    to the class."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Bold: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "To create a new project, click on File | New Project and select
    Console App (.NET Framework) as the project type."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'General feedback: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Errata: Although we have taken every care to ensure the accuracy of our content,
    mistakes do happen. If you have found a mistake in this book, we would be grateful
    if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Piracy: If you come across any illegal copies of our works in any form on the
    Internet, we would be grateful if you would provide us with the location address
    or website name. Please contact us at `copyright@packt.com` with a link to the
    material.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in becoming an author: If there is a topic that you have
    expertise in and you are interested in either writing or contributing to a book,
    please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
