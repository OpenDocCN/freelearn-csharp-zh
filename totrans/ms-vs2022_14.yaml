- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Your Own Visual Studio Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will delve into the world of Visual Studio extension development,
    where we’ll learn how to create tools that will enhance our development environment.
    **Visual Studio** extensions are powerful, enabling the addition of custom features,
    automation of repetitive tasks, and creation of tailored workflows that meet specific
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin by breaking down the Visual Studio extension architecture, which
    will provide us with a solid understanding of its core components and how they
    function within the **integrated development environment** ( **IDE** ). With this
    foundation, we’ll proceed to build and test our first extension using the provided
    item template. As we advance, we’ll explore more sophisticated features, examining
    the capabilities offered by preload templates. Finally, we’ll cover the deployment
    and sharing process, ensuring we can distribute our extensions efficiently, whether
    for personal use, within our team, or to the broader developer community.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Visual Studio extension architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your first extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced extension features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and sharing your extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll possess the knowledge and practical skills
    needed to create, refine, and share Visual Studio extensions that will significantly
    boost your productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Enterprise 2022 Version 17.12.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preview 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Visual Studio extension architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Visual Studio extensions** are powerful tools that enhance the capabilities
    of Microsoft Visual Studio, allowing developers to customize and extend the IDE
    to better suit their development needs. This section delves into the underlying
    architecture of Visual Studio extensions, highlighting key components, their interactions,
    and the broader ecosystem they operate within.'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio extensions are built upon a robust foundation known as the **Visual
    Studio Shell** , which serves as the core environment for interactions with the
    IDE. This shell is highly customizable, providing a framework that allows us to
    create and integrate new features seamlessly. The process of developing an extension
    begins with the **extension manifest** , a crucial file that contains essential
    metadata, such as the extension’s name, version, description, and dependencies.
    This manifest is vital for the installation process within Visual Studio and plays
    a significant role in managing updates once the extension is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: At the heart of the extension lies the **package** component, which encapsulates
    all the necessary functionalities and assets, including **Dynamic Link Library**
    ( **DLL** ) and images, into a single, deployable unit. This packaging ensures
    that all required files are correctly installed and configured within the Visual
    Studio environment. For extensions that need to interact with the **user interface**
    ( **UI** ), the inclusion of menu commands and tool windows is necessary. These
    elements, defined using XML, can be dynamically enabled or disabled based on specific
    conditions or events occurring within the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: When an extension operates at the project level, **project system integration**
    becomes essential. This involves working with the **project system object model**
    ( **PSOM** ), which represents the project’s structure and properties within Visual
    Studio. Extensions that offer code generation and analysis tools leverage APIs
    provided by Visual Studio to generate boilerplate code, refactor existing code,
    or perform comprehensive code analysis. Finally, the success of an extension often
    hinges on effectively utilizing various **integration points** offered by Visual
    Studio, such as event handlers that allow the extension to respond to specific
    IDE operations, such as opening documents or building solutions. These integration
    points enable extensions to automate tasks and enhance the user experience by
    responding to actions taken within the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the core components that make up a Visual Studio extension, **Visual
    Studio Marketplace** plays a pivotal role in the ecosystem. This platform serves
    as the primary distribution hub for extensions, enabling developers to easily
    find, install, and manage a wide array of third-party tools. Visual Studio Marketplace
    not only streamlines the process of accessing extensions but also fosters community
    engagement by providing a space for feedback and interaction between developers
    and users.
  prefs: []
  type: TYPE_NORMAL
- en: To support the creation of these extensions, the Visual Studio **Software Development
    Kit** ( **SDK** ) provides all the necessary tools and documentation. The SDK
    includes libraries, sample code, and comprehensive tutorials designed to help
    us get started with building our own extensions. This toolkit is essential for
    navigating the complexities of extension development and ensuring that new tools
    integrate smoothly with the Visual Studio environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a solid understanding of the foundational components and the supportive
    ecosystem surrounding Visual Studio extensions, you’re now well equipped to take
    the next step: building your first extension. In the following section, we’ll
    go through the process of creating a basic Visual Studio extension from scratch,
    demonstrating how to leverage the tools and resources provided by the Visual Studio
    SDK to bring your ideas to life.'
  prefs: []
  type: TYPE_NORMAL
- en: Building your first extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s create a simple Visual Studio extension that adds a new menu item under
    the **Tools** menu. When clicked, this menu item will display a message box. This
    example will guide us through setting up a basic extension project.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into extension development, it’s crucial to set up your environment
    properly. The first step is to ensure that we have the right tools installed.
    Begin by opening the **Visual Studio Installer** and modifying the current Visual
    Studio installation. Within the installer, we’ll want to check that the Visual
    Studio extension development workload is installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – The Visual Studio extension development workload](img/B22218_14_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – The Visual Studio extension development workload
  prefs: []
  type: TYPE_NORMAL
- en: This workload includes the Visual Studio SDK and other essential tools required
    for building extensions. Having these components in place is the foundation for
    a smooth development process, ensuring that you have access to all the libraries,
    templates, and resources necessary to create and test our extension effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin building our extension, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening Visual Studio and selecting the **Create a new project** option
    for any sort of project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the project creation window, search for **VSIX Project** . This template
    is specifically designed for creating Visual Studio extensions. Once we’ve found
    it, select the template and click **Next** to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Create a new VSIX project](img/B22218_14_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – Create a new VSIX project
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll be prompted to name your project. Choose a name that reflects the
    purpose of our extension, for our example, we will choose **MyFirstExtension**
    , and specify the location where you want to save the project files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Configure VSIX Project](img/B22218_14_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – Configure VSIX Project
  prefs: []
  type: TYPE_NORMAL
- en: After we’ve configured these settings, click on **Create** to generate the project
    structure. This step sets up the basic framework for our extension, allowing us
    to start customizing and adding functionality to our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step to creating a good extension is to add an entry point to our
    new feature. The most convenient way is to add a new command. Here, we will leverage
    the item template offered by the Visual Studio SDK by right-clicking on our project
    node, selecting **Add | New Item** , and then looking for **Command** under **C#
    Items** | **Extensibility** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Add New Item | Command](img/B22218_14_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Add New Item | Command
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we choose the name **MyCustomTemplate** . This item template
    adds all we need to our first command:'
  prefs: []
  type: TYPE_NORMAL
- en: The **.vsct** file, short for **Visual Studio Command Table** file, is an XML
    file used in Visual Studio extensions to define the structure and behavior of
    menus, commands, and other UI elements that the extension adds to the Visual Studio
    environment. It acts as a blueprint for how the extension integrates with the
    Visual Studio UI, specifying details such as where menus and buttons should be
    placed, what icons they should use, and how they should behave when clicked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **MyCustomCommand.cs** file is added to your project; you’ll need to replace
    its content with the appropriate code to define the desired functionality. For
    now, it’s defining a command to display a message box when executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, when we are launching the debug mode, that will open an experiment instance
    of Visual Studio. In this instance, we will retrieve our installed package from
    the **Extensions** | **Manage** **Extension** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.5 – MyFirstExtension installed](img/B22218_14_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – MyFirstExtension installed
  prefs: []
  type: TYPE_NORMAL
- en: Plus, in the **Tools** menu, we find the **Invoke MyCustomCommand** option.
    For now, this command simply opens a message box displaying a basic message.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Invoke MyCustomCommand](img/B22218_14_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Invoke MyCustomCommand
  prefs: []
  type: TYPE_NORMAL
- en: We have now built our first extension. Let’s explore the features we can add
    to customize our Visual Studio extension in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced extension features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw, we can easily add new commands to the menu of Visual Studio that
    allow us to interact with our IDE and even open external tools. In this section,
    we will explore the pre-set template we can leverage to extend Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: So, if we go back to the **Add Item** window, by right-clicking on the project
    node and selecting **Add | New Items…** , you can find those kickstart ordered
    in four categories.
  prefs: []
  type: TYPE_NORMAL
- en: First, the **Editor** category encompasses templates that allow for the modification
    and enhancement of the Visual Studio editor itself. These modifications can range
    from changing how text is highlighted to adding interactive elements within the
    editor pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 –  Add a new Editor item](img/B22218_14_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – Add a new Editor item
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an overview of the subcategories within the **Editor** category:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Editor Classifier** : An **Editor Classifier** item allows us to classify
    text within the editor based on custom rules. This can be used for syntax highlighting,
    identifying specific patterns in the code, or even providing real-time feedback
    on coding standards. For example, we can create a classifier that highlights all
    to-do comments in a bright color to ensure they catch the developer’s attention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor Margin** : The **Editor Margin** template enables the creation of
    custom margins around the **Editor** pane. These margins can display additional
    information or controls related to the code being viewed. A use case could be
    implementing a margin that shows a mini-map of the code file, allowing users to
    quickly navigate through large files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor Text Adornment** : **Text adornments** allow for the decoration of
    text within the editor. This can include underlining, strikethroughs, background
    colors, or even inserting images or icons in line with the text. That allows us
    to add a red squiggly underline to deprecated methods to visually indicate they
    should not be used, for instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor Viewport Adornment** : Similar to text adornments but focused on the
    viewport (the visible area of the editor), **viewport adornments** can overlay
    graphics or UI elements on top of the editor content. For example, displaying
    a watermark or banner over the editor when viewing read-only files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **extension pack** is essentially a collection of extensions bundled together
    to provide a comprehensive set of functionalities around a specific theme or purpose.
    Creating an extension pack allows developers to distribute a suite of tools that
    work seamlessly together, enhancing productivity and streamlining workflows for
    specific development scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the **Toolbox** category encompasses templates designed for creating controls
    that can be added to Windows Forms or **Windows Presentation Foundation** ( **WPF**
    ) design surfaces within Visual Studio. These controls can range from simple UI
    elements to complex components that encapsulate specific functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, **VSPackages** represent a deeper level of extensibility within
    Visual Studio, allowing for the creation of extensions that can modify or add
    to the IDE’s core functionalities. These packages can range from simple commands
    to complex tool windows and services.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 –  Add new VSPackage Item](img/B22218_14_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.8 – Add new VSPackage Item
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we can find the following items template:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Async Package** : This provides a foundation for creating asynchronous operations
    within Visual Studio extensions. This is particularly useful for operations that
    may take a significant amount of time to complete, such as fetching data from
    an external service or performing intensive computations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command** : As discussed in the previous section, commands allow for adding
    new actions to Visual Studio menus, toolbars, or even context menus. This template
    facilitates the creation of commands that can interact with the IDE or external
    tools, enabling a wide range of custom functionalities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Async Tool Window** : This is like **Async Package** but specifically tailored
    to creating asynchronous tool windows within Visual Studio. These tool windows
    can perform background operations without blocking the UI, enhancing the responsiveness
    of the IDE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tool Window** : This template enables the creation of custom tool windows
    within Visual Studio. Tool windows can dock within the IDE and serve various purposes,
    such as displaying project properties, search results, or even custom controls
    and visualizations relevant to your workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, you can find examples and samples in the official Visual Studio
    SDK repository on GitHub: [https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master](https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that when developing extensions using these templates, like in other
    developments, it’s important to consider the end-user experience, ensuring that
    the added functionalities integrate seamlessly with the existing Visual Studio
    environment. Testing and iteration are key to refining these extensions and delivering
    value to the developer community. Once our extension is tailored and well tested,
    the next step is to package and deploy it for general availability.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and sharing your extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying and sharing Visual Studio extensions with the community is an exciting
    step in the extension development process. It allows us to contribute to the ecosystem,
    potentially improving the development experience for thousands of Visual Studio
    users worldwide. In this section, we will walk through a comprehensive guide on
    deploying and sharing our extensions, including signing your VSIX (a **.vsix**
    file contains one or more Visual Studio extensions) packages for added security
    and trustworthiness.
  prefs: []
  type: TYPE_NORMAL
- en: Once we ensure it is thoroughly tested and ready for public release, we can
    start the deploying phase. This includes testing across different versions of
    Visual Studio, handling edge cases, and ensuring compatibility with various project
    types and configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in order to prevent tampering and build trust with the end user, we
    sign our VSIX with **Sign CLI** . You need to purchase a code signing certificate
    from a trusted **certificate authority** ( **CA** ). I used the .NET CLI to install
    Sign CLI. Notice that at the time of writing, Sign CLI is still pre-released;
    so, we need to include the **-prerelease** tag when we need to get the latest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, Sign CLI could be accessed in a Developer PowerShell instance
    using **sign code <command> <option>** . You can find more details in the official
    documentation: [https://learn.microsoft.com/en-us/visualstudio/extensibility/dotnet-sign-cli-reference-vsix?view=vs-2022](https://learn.microsoft.com/en-us/visualstudio/extensibility/dotnet-sign-cli-reference-vsix?view=vs-2022)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'After signing your extension, the next step is deploying it to Visual Studio
    Marketplace, where it can be accessed by Visual Studio users worldwide. The process
    involves several key steps to ensure your extension is properly showcased and
    ready for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a publisher account on Visual Studio Marketplace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in with your Microsoft account and follow the prompts to set up your publisher
    profile if you haven’t done so already. This account will allow you to manage
    and track your extensions on the platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create a new extension by navigating to the **Publishers** dashboard
    and selecting the **New Extension** option (here is the link to the Visual Studio
    Marketplace dashboard: [https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true](https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true)
    ). Here, you’ll need to provide essential details about your extension, including
    the title, description, and relevant visuals, such as an icon and screenshots.
    These elements help potential users understand what your extension offers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once we’ve filled out the details, upload your signed VSIX package. Visual Studio
    Marketplace will automatically validate the package and its digital signature,
    ensuring everything is in order before proceeding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After uploading, submit your extension for review. Microsoft will carefully
    evaluate your submission to ensure it adheres to the Marketplace’s policies and
    guidelines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This review process is crucial for maintaining the quality and security of the
    extensions available to users.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, upon approval, your extension will be published on Visual Studio Marketplace.
    It will then be available for installation directly through the Visual Studio
    IDE or as a download from the Visual Studio Marketplace website, allowing developers
    worldwide to benefit from your contribution.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we conclude this chapter on Visual Studio extension development, you’ve acquired
    the knowledge and skills to create, refine, and distribute your own powerful extensions.
    From understanding the core architecture to building your first extension and
    exploring advanced features, you’ve learned how to enhance Visual Studio to better
    meet your needs and those of your team. By mastering the deployment and sharing
    process, you’re now equipped to contribute to the broader developer community,
    offering tools that can streamline workflows and boost productivity.
  prefs: []
  type: TYPE_NORMAL
- en: With this solid foundation in place, we’re now ready to transition to the final
    chapter of the book. In this concluding chapter, we’ll delve into the world of
    NuGet package creation, where you’ll learn how to package and distribute reusable
    code libraries.
  prefs: []
  type: TYPE_NORMAL
