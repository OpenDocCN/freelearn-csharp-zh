["```cs\n[TestMethod]\npublic void FormattedDateTimeWithTimeTest()\n{\n    // Arrange\n    var startDate = new DateTime(2023, 5, 2, 14, 0, 0);\n    const string expected = @\"May 2<sup>nd</sup>, 2023 at 2:00pm\";\n    // Act\n    var actual = startDate.ToFormattedDateTime();\n    // Assert\n    Assert.AreEqual(expected, actual);\n}\n```", "```cs\n[TestClass]\npublic class PageTests\n{\n    private DbContextOptions<ThemeParkDbContext> _options;\n    private ThemeParkDbContext _context;\n    [TestInitialize]\n    public void Setup()\n    {\n        _options = new DbContextOptionsBuilder<ThemeParkDbContext>()\n            .UseSqlServer(\"Data Source=localhost;Initial                  Catalog=ASPNetCore8BestPractices;\" +\n                 \"Integrated                  Security=True;MultipleActiveResultSets=True;\")\n                 .Options;\n        var config = new Mock<IConfiguration>();\n        _context = new ThemeParkDbContext(_options, config.Object);\n    }\n    [TestMethod]\n    [TestCategory(\"Integration\")]\n    public void ReturnAnIndexModelTest()\n    {\n        // Arrange\n        var logger = new Mock<ILogger<IndexModel>>();\n        var service = new AttractionService(_context);\n        // Act\n        var actual = new IndexModel(logger.Object, service);\n        // Assert\n        Assert.IsNotNull(actual);\n        Assert.IsInstanceOfType(actual, typeof(IndexModel));\n    }\n}\n```", "```cs\nusing System.Diagnostics;\nusing EFApplication.Pages;\nusing EFApplication.Services;\nusing Microsoft.Extensions.Logging;\nusing Moq;\nnamespace ThemePark.Tests.Pages;\n[TestClass]\npublic class PagesTest\n{\n    [TestMethod]\n    [TestCategory(\"Integration\")]\n    public void ConfirmTheMainPageReturnsWithinThreeSecondTest()\n    {\n        // Arrange\n        var logger = new Mock<ILogger<IndexModel>>();\n        var service = new Mock<IAttractionService>();\n        var stopwatch = Stopwatch.StartNew();\n        // Act\n        _ = new IndexModel(logger.Object, service.Object);\n        // Assert\n        // Make sure our call is less than 3 seconds\n        stopwatch.Stop();\n        var duration = stopwatch.Elapsed.Seconds;\n        Assert.IsTrue(duration <= 3);\n    }\n}\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing System.Data.Common;\nusing Microsoft.Data.Sqlite;\nusing Microsoft.Extensions.Configuration;\nusing Moq;\nusing ThemePark.DataContext;\nusing ThemePark.Services;\nnamespace ThemePark.Tests.Services;\n[TestClass]\npublic class AttractionServiceTest\n{\n    private DbConnection _connection = null!;\n    private DbContextOptions<ThemeParkDbContext> _options = null!;\n    private IThemeParkDbContext _context = null!;\n    [TestInitialize]\n    public void Setup()\n    {\n        _connection = new SqliteConnection(\"Filename=:memory:\");\n        _connection.Open();\n        // These options will be used by the context instances in this            test suite,\n        // including the connection opened above.\n        _options = new DbContextOptionsBuilder<ThemeParkDbContext>()\n            .UseSqlite(_connection)\n            .Options;\n        var config = new Mock<IConfiguration>();\n        // Create the schema and seed some data\n        _context = new ThemeParkDbContext(_options, config.Object);\n        _context?.Database.EnsureCreated();\n    }\n    [TestCleanup]\n    public void Cleanup()\n    {\n        _connection.Dispose();\n    }\n    [TestMethod]\n    public async Task ReturnAllAttractionsTest()\n    {\n        // Arrange\n        var service = new AttractionService(_context);\n        // Act\n        var records = await service.GetAttractionsAsync();\n        // Assert\n        Assert.IsTrue(records.Any());\n    }\n}\n```", "```cs\n[TestMethod]\npublic async Task ReturnAllLocationsTest()\n{\n    // Arrange\n    var service = new LocationService(_context);\n    // Act\n    var records = await service.GetLocationsAsync();\n    // Assert\n    Assert.IsTrue(records.Any());\n}\n[TestMethod]\n[TestCategory(\"Integration\")]\npublic async Task ReturnOneLocationByIdTest()\n{\n    // Arrange\n    var service = new LocationService(_context);\n    // Act\n    var record = await service.GetLocationAsync(1);\n    // Assert\n    Assert.IsNotNull(record);\n    Assert.IsTrue(record.Id==1);\n}\n```"]