["```cs\npublic class InvoiceItem{\n    public Guid Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public decimal UnitPrice { get; set; }\n    public decimal Quantity { get; set; }\n    public decimal Amount { get; set; }\n    public Guid InvoiceId { get; set; }\n    public Invoice? Invoice { get; set; }\n}\n```", "```cs\n    public class Invoice{    public Guid Id { get; set; }    // Omitted for brevity    // Add a collection of invoice items    public List<InvoiceItem> InvoiceItems { get; set; } = new ();}\n    ```", "```cs\n    public DbSet<InvoiceItem> InvoiceItems => Set<InvoiceItem>();\n    ```", "```cs\n    public class InvoiceItemConfiguration : IEntityTypeConfiguration<InvoiceItem>{    public void Configure(EntityTypeBuilder<InvoiceItem> builder)    {        builder.ToTable(\"InvoiceItems\");        builder.Property(p => p.Id).HasColumnName(nameof(InvoiceItem.Id));        builder.Property(p => p.Name).HasColumnName(nameof(InvoiceItem.Name)).HasMaxLength(64).IsRequired();        builder.Property(p => p.Description).HasColumnName(nameof(InvoiceItem.Description)).HasMaxLength(256);        builder.Property(p => p.UnitPrice).HasColumnName(nameof(InvoiceItem.UnitPrice)).HasPrecision(8, 2);        builder.Property(p => p.Quantity).HasColumnName(nameof(InvoiceItem.Quantity)).HasPrecision(8, 2);        builder.Property(p => p.Amount).HasColumnName(nameof(InvoiceItem.Amount)).HasPrecision(18, 2);        builder.Property(p => p.InvoiceId).HasColumnName(nameof(InvoiceItem.InvoiceId));    }}\n    ```", "```cs\n    migrationBuilder.CreateTable(    name: \"InvoiceItems\",    columns: table => new    {        Id = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false),        // Omitted for brevity        InvoiceId = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false)    },    constraints: table =>    {        table.PrimaryKey(\"PK_InvoiceItems\", x => x.Id);        table.ForeignKey(            name: \"FK_InvoiceItems_Invoices_InvoiceId\",            column: x => x.InvoiceId,            principalTable: \"Invoices\",            principalColumn: \"Id\",            onDelete: ReferentialAction.Cascade);    });// Omitted for brevitymigrationBuilder.CreateIndex(    name: \"IX_InvoiceItems_InvoiceId\",    table: \"InvoiceItems\",    column: \"InvoiceId\");\n    ```", "```cs\n    builder.HasMany(x => x.InvoiceItems)    .WithOne(x => x.Invoice)    .HasForeignKey(x => x.InvoiceId);\n    ```", "```cs\n    builder.HasOne(i => i.Invoice)    .WithMany(i => i.InvoiceItems)    .HasForeignKey(i => i.InvoiceId)    .OnDelete(DeleteBehavior.Cascade);\n    ```", "```cs\npublic void Configure(EntityTypeBuilder<Post> builder){\n    // Omitted for brevity\n    builder.HasOne(x => x.Author)\n        .WithMany()\n        .HasForeignKey(x => x.AuthorId);\n    // Omitted for brevity\n}\n```", "```cs\n    {  \"invoiceNumber\": \"INV-004\",  \"contactName\": \"Hulk\",  \"description\": \"Invoice for the first month\",  \"amount\": 300,  \"invoiceDate\": \"2022-12-28T01:39:42.915Z\",  \"dueDate\": \"2022-12-28T01:39:42.915Z\",  \"status\": 1,  \"invoiceItems\": [    {      \"name\": \"Invoice Item 1\",      \"description\": \"\",      \"unitPrice\": 100,      \"quantity\": 2,      \"amount\": 200    },    {      \"name\": \"Invoice Item 2\",      \"description\": \"\",      \"unitPrice\": 50,      \"quantity\": 2,      \"amount\": 100    }  ]}\n    An unhandled exception has occurred while executing the request.System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32\\. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.Invoice.InvoiceItems.\n    ```", "```cs\n    builder.Services    .AddControllers()    .AddJsonOptions(options =>    {        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;    });\n    ```", "```cs\n[  {\n    \"id\": \"a224e90a-c01c-499b-7a9b-08dae9f04218\",\n    \"invoiceNumber\": \"INV-004\",\n    \"contactName\": \"Hulk\",\n    \"description\": \"Invoice for the first month\",\n    \"amount\": 300,\n    \"invoiceDate\": \"2022-12-28T01:39:42.915+00:00\",\n    \"dueDate\": \"2022-12-28T01:39:42.915+00:00\",\n    \"status\": 1,\n    \"invoiceItems\": []\n  },\n  ...\n]\n```", "```cs\n    // GET: api/Invoices[HttpGet]public async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices(int page = 1, int pageSize = 10,    InvoiceStatus? status = null){    // Omitted for brevity    return await context.Invoices        .Include(x => x.InvoiceItems)        .Where(x => status == null || x.Status == status)        .OrderByDescending(x => x.InvoiceDate)        .Skip((page - 1) * pageSize)        .Take(pageSize)        .ToListAsync();}\n    ```", "```cs\n    [  {    \"id\": \"a224e90a-c01c-499b-7a9b-08dae9f04218\",    \"invoiceNumber\": \"INV-004\",    \"contactName\": \"Hulk\",    \"description\": \"Invoice for the first month\",    \"amount\": 300,    \"invoiceDate\": \"2022-12-28T01:39:42.915+00:00\",    \"dueDate\": \"2022-12-28T01:39:42.915+00:00\",    \"status\": 1,    \"invoiceItems\": [      {        \"id\": \"8cc52722-5b99-4d0c-07ef-08dae9f04223\",        \"name\": \"Invoice Item 1\",        \"description\": \"\",        \"unitPrice\": 100,        \"quantity\": 2,        \"amount\": 200,        \"invoiceId\": \"a224e90a-c01c-499b-7a9b-08dae9f04218\",        \"invoice\": null      },      {        \"id\": \"2d3f739a-2280-424b-07f0-08dae9f04223\",        \"name\": \"Invoice Item 2\",        \"description\": \"\",        \"unitPrice\": 50,        \"quantity\": 2,        \"amount\": 100,        \"invoiceId\": \"a224e90a-c01c-499b-7a9b-08dae9f04218\",        \"invoice\": null      }    ]  },  ...]\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (35ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']      SELECT [t].[Id], [t].[Amount], [t].[ContactName], [t].[Description], [t].[DueDate], [t].[InvoiceDate], [t].[InvoiceNumber], [t].[Status], [i0].[Id], [i0].[Amount], [i0].[Description], [i0].[InvoiceId], [i0].[Name], [i0].[Quantity], [i0].[UnitPrice]      FROM (          SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]          FROM [Invoices] AS [i]          ORDER BY [i].[InvoiceDate] DESC          OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY      ) AS [t]      LEFT JOIN [InvoiceItems] AS [i0] ON [t].[Id] = [i0].[InvoiceId]      ORDER BY [t].[InvoiceDate] DESC, [t].[Id]\n    ```", "```cs\n    [HttpGet]public async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices(int page = 1, int pageSize = 10,    InvoiceStatus? status = null){    // Omitted for brevity    return await context.Invoices        .Include(x => x.InvoiceItems)        .Where(x => status == null || x.Status == status)        .OrderByDescending(x => x.InvoiceDate)        .Skip((page - 1) * pageSize)        .Take(pageSize)        .AsSplitQuery()        .ToListAsync();}\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]      FROM (          SELECT [i].[Id], [i].[InvoiceDate]      Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']      SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]      FROM [Invoices] AS [i]      ORDER BY [i].[InvoiceDate] DESC, [i].[Id]      OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLYinfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']      SELECT [i0].[Id], [i0].[Amount], [i0].[Description], [i0].[InvoiceId], [i0].[Name], [i0].[Quantity], [i0].[UnitPrice], [t].[Id]      FROM (          SELECT [i].[Id], [i].[InvoiceDate]          FROM [Invoices] AS [i]          ORDER BY [i].[InvoiceDate] DESC          OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY      ) AS [t]      INNER JOIN [InvoiceItems] AS [i0] ON [t].[Id] = [i0].[InvoiceId]      ORDER BY [t].[InvoiceDate] DESC, [t].[Id]\n    ```", "```cs\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder){    base.OnConfiguring(optionsBuilder);    optionsBuilder.UseSqlServer(_configuration.GetConnectionString(\"DefaultConnection\"),        b => b.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery));}\n    ```", "```cs\n    [HttpGet]public async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices(int page = 1, int pageSize = 10,    InvoiceStatus? status = null){    // Omitted for brevity    return await _context.Invoices        .Include(x => x.InvoiceItems)        .Where(x => status == null || x.Status == status)        .OrderByDescending(x => x.InvoiceDate)        .Skip((page - 1) * pageSize)        .Take(pageSize)        .AsSingleQuery()        .ToListAsync();}\n    ```", "```cs\n[HttpGet(\"{id}\")]public async Task<ActionResult<Invoice>> GetInvoice(int id)\n{\n    var invoice = await context.Invoices\n        .Include(x => x.InvoiceItems)\n        .SingleOrDefaultAsync(x => x.Id == id);\n    if (invoice == null)\n    {\n        return NotFound();\n    }\n    return invoice;\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (4ms) [Parameters=[@__id_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']\n      SELECT [i0].[Id], [i0].[Amount], [i0].[Description], [i0].[InvoiceId], [i0].[Name], [i0].[Quantity], [i0].[UnitPrice], [t].[Id]\n      FROM (\n          SELECT TOP(1) [i].[Id]\n          FROM [Invoices] AS [i]\n          WHERE [i].[Id] = @__id_0\n      ) AS [t]\n      INNER JOIN [InvoiceItems] AS [i0] ON [t].[Id] = [i0].[InvoiceId]\n      ORDER BY [t].[Id]\n```", "```cs\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (9ms) [Parameters=[@__id_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']      DELETE FROM [i]      FROM [Invoices] AS [i]      WHERE [i].[Id] = @__id_0\n    ```", "```cs\n    public class PostConfiguration : IEntityTypeConfiguration<Post>{    public void Configure(EntityTypeBuilder<Post> builder)    {        builder.ToTable(\"Posts\");        // Omitted for brevity        builder.Property(p => p.CategoryId).HasColumnName(\"CategoryId\");        builder.HasOne(p => p.Category)            .WithMany(c => c.Posts)            .HasForeignKey(p => p.CategoryId)            .OnDelete(DeleteBehavior.ClientSetNull);    }}\n    ```", "```cs\n    var category = await context.Categories.Include(x => x.Posts).SingleOrDefaultAsync(x => x.Id == id);if (category == null){    return NotFound();}category.Posts.Clear();// Or you can update the posts to set the category to null// foreach (var post in category.Posts)// {//     post.Category = null;// }context.Categories.Remove(category);await context.SaveChangesAsync();\n    ```", "```cs\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (6ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (DbType = Guid), @p2='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']      SET NOCOUNT ON;      UPDATE [Posts] SET [CategoryId] = @p0      OUTPUT 1      WHERE [Id] = @p1;      DELETE FROM [Categories]      OUTPUT 1      WHERE [Id] = @p2;\n    ```", "```cs\npublic class Contact{\n    public Guid Id { get; set; }\n    public string FirstName { get; set; } = string.Empty;\n    public string LastName { get; set; } = string.Empty;\n    public string? Title { get; set; }\n    public string Email { get; set; } = string.Empty;\n    public string Phone { get; set; } = string.Empty;\n    public Address Address { get; set; }\n}\npublic class Address\n{\n    public Guid Id { get; set; }\n    public string Street { get; set; } = string.Empty;\n    public string City { get; set; } = string.Empty;\n    public string State { get; set; } = string.Empty;\n    public string ZipCode { get; set; } = string.Empty;\n    public string Country { get; set; } = string.Empty;\n    public Guid ContactId { get; set; }\n    public Contact Contact { get; set; }\n}\n```", "```cs\npublic class ContactConfiguration : IEntityTypeConfiguration<Contact>{\n    public void Configure(EntityTypeBuilder<Contact> builder)\n    {\n        builder.ToTable(\"Contacts\");\n        builder.HasKey(c => c.Id);\n        // Omitted for brevity\n        builder.Property(c => c.Phone).IsRequired();\n    }\n}\npublic class AddressConfiguration : IEntityTypeConfiguration<Address>\n{\n    public void Configure(EntityTypeBuilder<Address> builder)\n    {\n        builder.ToTable(\"Addresses\");\n        builder.HasKey(a => a.Id);\n        // Omitted for brevity\n        builder.Ignore(a => a.Contact);\n        builder.HasOne(a => a.Contact)\n            .WithOne(c => c.Address)\n            .HasForeignKey<Address>(a => a.ContactId);\n    }\n}\n```", "```cs\nbuilder.HasOne(c => c.Address)    .WithOne(a => a.Contact)\n    .HasForeignKey<Address>(a => a.ContactId);\n```", "```cs\ndotnet ef migrations add AddContactAndAddressdotnet ef database update\n```", "```cs\nmigrationBuilder.CreateTable(    name: \"Addresses\",\n    columns: table => new\n    {\n        Id = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false),\n        // Omitted for brevity\n    },\n    constraints: table =>\n    {\n        table.PrimaryKey(\"PK_Addresses\", x => x.Id);\n        table.ForeignKey(\n            name: \"FK_Addresses_Contacts_ContactId\",\n            column: x => x.ContactId,\n            principalTable: \"Contacts\",\n            principalColumn: \"Id\",\n            onDelete: ReferentialAction.Cascade);\n    });\n```", "```cs\n    {    \"firstName\": \"John\",    \"lastName\": \"Doe\",    \"email\": \"john.doe@example.com\",    \"phone\": \"1234567890\",    \"address\": {        \"street\": \"123 Main St\",        \"city\": \"Wellington\",        \"state\": \"Wellington\",        \"zipCode\": \"6011\",        \"country\": \"New Zealand\"    }}\n    ```", "```cs\n    // GET: api/Contacts[HttpGet]public async Task<ActionResult<IEnumerable<Contact>>> GetContacts(){    if (context.Contacts == null)    {        return NotFound();    }    return await context.Contacts.Include(x => x.Address).ToListAsync();}\n    ```", "```cs\npublic class Movie{\n    public Guid Id { get; set; }\n    public string Title { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public int ReleaseYear { get; set; }\n    public List<Actor> Actors { get; set; } = new List<Actor>();\n}\npublic class Actor\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; } = string.Empty;\n    public List<Movie> Movies { get; set; } = new List<Movie>();\n}\n```", "```cs\nmigrationBuilder.CreateTable(    name: \"ActorMovie\",\n    columns: table => new\n    {\n        ActorsId = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false),\n        MoviesId = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false)\n    },\n    constraints: table =>\n    {\n        table.PrimaryKey(\"PK_ActorMovie\", x => new { x.ActorsId, x.MoviesId });\n        table.ForeignKey(\n            name: \"FK_ActorMovie_Actors_ActorsId\",\n            column: x => x.ActorsId,\n            principalTable: \"Actors\",\n            principalColumn: \"Id\",\n            onDelete: ReferentialAction.Cascade);\n        table.ForeignKey(\n            name: \"FK_ActorMovie_Movies_MoviesId\",\n            column: x => x.MoviesId,\n            principalTable: \"Movies\",\n            principalColumn: \"Id\",\n            onDelete: ReferentialAction.Cascade);\n    });\n```", "```cs\npublic class MovieActor{\n    public Guid MovieId { get; set; }\n    public Movie Movie { get; set; } = null!;\n    public Guid ActorId { get; set; }\n    public Actor Actor { get; set; } = null!;\n    public DateTime UpdateTime { get; set; }\n}\n```", "```cs\npublic class Movie{\n    public Guid Id { get; set; }\n    // Omitted other properties\n    public List<MovieActor> MovieActors { get; set; } = new ();\n}\npublic class Actor\n{\n    public Guid Id { get; set; }\n    // Omited other properties\n    public List<MovieActor> MovieActors { get; set; } = new ();\n}\n```", "```cs\npublic class MovieConfiguration : IEntityTypeConfiguration<Movie>{\n    public void Configure(EntityTypeBuilder<Movie> builder)\n    {\n        // Omitted for brevity\n        builder.HasMany(m => m.Actors)\n            .WithMany(a => a.Movies)\n            .UsingEntity<MovieActor>(\n                j => j\n                    .HasOne(ma => ma.Actor)\n                    .WithMany(a => a.MovieActors)\n                    .HasForeignKey(ma => ma.ActorId),\n                j => j\n                    .HasOne(ma => ma.Movie)\n                    .WithMany(m => m.MovieActors)\n                    .HasForeignKey(ma => ma.MovieId),\n                j =>\n                {\n                    // You can add more configuration here\n                    j.Property(ma => ma.UpdateTime).HasColumnName(\"UpdateTime\").HasDefaultValueSql(\"CURRENT_TIMESTAMP\");\n                    j.HasKey(ma => new { ma.MovieId, ma.ActorId });\n                }\n            );\n    }\n}\n```", "```cs\nmigrationBuilder.CreateTable(    name: \"MovieActor\",\n    columns: table => new\n    {\n        MovieId = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false),\n        ActorId = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false),\n        UpdateTime = table.Column<DateTime>(type: \"datetime2\", nullable: false, defaultValueSql: \"CURRENT_TIMESTAMP\")\n    },\n    constraints: table =>\n    {\n        table.PrimaryKey(\"PK_MovieActor\", x => new { x.MovieId, x.ActorId });\n        table.ForeignKey(\n            name: \"FK_MovieActor_Actors_ActorId\",\n            column: x => x.ActorId,\n            principalTable: \"Actors\",\n            principalColumn: \"Id\",\n            onDelete: ReferentialAction.Cascade);\n        table.ForeignKey(\n            name: \"FK_MovieActor_Movies_MovieId\",\n            column: x => x.MovieId,\n            principalTable: \"Movies\",\n            principalColumn: \"Id\",\n            onDelete: ReferentialAction.Cascade);\n    });\n```", "```cs\npublic class MovieActorsConfiguration : IEntityTypeConfiguration<MovieActor>{\n    public void Configure(EntityTypeBuilder<MovieActor> builder)\n    {\n        builder.ToTable(\"MovieActors\");\n        builder.HasKey(sc => new { sc.MovieId, sc.ActorId });\n        builder.HasOne(sc => sc.Actor)\n            .WithMany(s => s.MovieActors)\n            .HasForeignKey(sc => sc.ActorId);\n        builder.HasOne(sc => sc.Movie)\n            .WithMany(c => c.MovieActors)\n            .HasForeignKey(sc => sc.MovieId);\n    }\n}\n```", "```cs\ndotnet-aspnet-codegenerator controller -name MoviesController -api -outDir Controllers --model Movie --dataContext SampleDbContext -async -actionsdotnet-aspnet-codegenerator controller -name ActorsController -api -outDir Controllers --model Actor --dataContext SampleDbContext -async -actions\n```", "```cs\n{    \"title\": \"The Shawshank Redemption\",\n    \"releaseYear\": \"1994\",\n    \"actors\": [\n        {\n            \"name\": \"Tim Robbins\"\n        },\n        {\n            \"name\": \"Morgan Freeman\"\n        },\n        {\n            \"name\": \"Bob Gunton\"\n        },\n        {\n            \"name\": \"William Sadler\"\n        }\n    ]\n}\n```", "```cs\n{    \"name\": \"Tim Robbins\",\n    \"movies\": [\n        {\n            \"title\": \"The Shawshank Redemption\",\n            \"releaseYear\": \"1994\"\n        },\n        {\n            \"title\": \"Green Mile\",\n            \"releaseYear\": \"1999\"\n        }\n    ]\n}\n```", "```cs\npublic void Configure(EntityTypeBuilder<Movie> builder){\n    builder.ToTable(\"Movies\");\n    builder.HasKey(m => m.Id);\n    builder.Property(p => p.Title).HasColumnName(\"Title\").HasMaxLength(128).IsRequired();\n    // Add a unique index to the Title property\n    builder.HasIndex(p => p.Title).IsUnique();\n    // Omitted for brevity\n}\n```", "```cs\n[HttpPost(\"{id}/movies/{movieId}\")]public async Task<IActionResult> AddMovie(Guid id, Guid movieId)\n{\n    if (_context.Actors == null)\n    {\n        return NotFound(\"Actors is null.\");\n    }\n    var actor = await _context.Actors.Include(x => x.Movies).SingleOrDefaultAsync(x => x.Id == id);\n    if (actor == null)\n    {\n        return NotFound($\"Actor with id {id} not found.\");\n    }\n    var movie = await _context.Movies.FindAsync(movieId);\n    if (movie == null)\n    {\n        return NotFound($\"Movie with id {movieId} not found.\");\n    }\n    if (actor.Movies.Any(x => x.Id == movie.Id))\n    {\n        return Problem($\"Movie with id {movieId} already exists for Actor {id}.\");\n    }\n    actor.Movies.Add(movie);\n    await _context.SaveChangesAsync();\n    return CreatedAtAction(\"GetActor\", new { id = actor.Id }, actor);\n}\n[HttpGet(\"{id}/movies\")]\npublic async Task<IActionResult> GetMovies(Guid id)\n{\n    if (_context.Actors == null)\n    {\n        return NotFound(\"Actors is null.\");\n    }\n    var actor = await _context.Actors.Include(x => x.Movies).SingleOrDefaultAsync();\n    if (actor == null)\n    {\n        return NotFound($\"Actor with id {id} not found.\");\n    }\n    return Ok(actor.Movies);\n}\n[HttpDelete(\"{id}/movies/{movieId}\")]\npublic async Task<IActionResult> DeleteMovie(Guid id, Guid movieId)\n{\n    if (_context.Actors == null)\n    {\n        return NotFound(\"Actors is null.\");\n    }\n    var actor = await _context.Actors.Include(x => x.Movies).SingleOrDefaultAsync();\n    if (actor == null)\n    {\n        return NotFound($\"Actor with id {id} not found.\");\n    }\n    var movie = await _context.Movies.FindAsync(movieId);\n    if (movie == null)\n    {\n        return NotFound($\"Movie with id {movieId} not found.\");\n    }\n    actor.Movies.Remove(movie);\n    await _context.SaveChangesAsync();\n    return NoContent();\n}\n```", "```cs\npublic class InvoiceConfiguration : IEntityTypeConfiguration<Invoice>{\n    public void Configure(EntityTypeBuilder<Invoice> builder)\n    {\n        // Omitted for brevity\n        // Use the owned type to configure the InvoiceItems collection\n        builder.OwnsMany(p => p.InvoiceItems, a =>\n            {\n                a.WithOwner( => x.Invoice).HasForeignKey(x => x.InvoiceId);\n                a.ToTable(\"InvoiceItems\");\n                // Omitted for brevity\n            }\n        );\n    }\n}\n```", "```cs\npublic class ContactConfiguration : IEntityTypeConfiguration<Contact>{\n    public void Configure(EntityTypeBuilder<Contact> builder)\n    {\n        // Omitted for brevity\n        // Use owned entity type\n        builder.OwnsOne(c => c.Address, a =>\n        {\n            a.WithOwner(x => x.Contact);\n            a.Property(a => a.Street).HasColumnName(\"Street\").HasMaxLength(64).IsRequired();\n            // Omitted for brevity\n        });\n    }\n}\n```"]