- en: Chapter 11. Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw some of the most applied and used principles
    about software design, design patterns, and the way they are implemented or can
    be used in the .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to study security issues and recommendations; or
    measures to take in order to build and deploy secure applications. We'll also
    look at how these security problems affect .NET applications.
  prefs: []
  type: TYPE_NORMAL
- en: Our starting point will be the **OWASP** (**Open Web Application Security Project**)
    proposal. OWASP is a security initiative that intends to offer, with a certain
    frequency, the latest on cyber security in terms of the types of possible flows,
    offering information about the best methods to deal with threats, prevention measures,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We'll focus our analysis on the definitions and prevention measures for the
    top 10 security threats published by the OWASP organization, their implications
    for the developer, and in case it applies, how these measures can be implemented
    in .NET Framework solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The OWASP initiative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OWASP top 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broken authentication and session management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-Site Scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure direct object references
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security misconfiguration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive data exposure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing function-level access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-site request forgery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using components with known vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invalidated redirects and forwards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OWASP initiative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The official definition of the **OWASP** is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '"The Open Web Application Security Project (OWASP) is an open community dedicated
    to enabling organizations to develop, purchase, and maintain applications that
    can be trusted."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Initially, OWASP is thought to be a global set of guides and proposals about
    security, centralized and published by [OWASP.org](http://OWASP.org), a nonprofit
    organization focused on improving the security of software by making security
    visible, so organizations and individuals have a starting point that provides
    practical and impartial information about security issues.
  prefs: []
  type: TYPE_NORMAL
- en: Its official web page can be found at [https://www.owasp.org/index.php/Main_Page](https://www.owasp.org/index.php/Main_Page),
    and it offers guidelines about application security tools and standards as well
    as books, controls, and libraries, research on several security topics, worldwide
    conferences, mailing lists, and a long list of resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'OWASP official site announces itself as an entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '"free from commercial pressures", which –in their own words- allow them to
    "provide unbiased, practical, cost-effective information about application security".'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The OWASP Top 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Among the previously mentioned proposals, the so-called OWASP Top 10 is by far
    the most requested among programmers all over the world.
  prefs: []
  type: TYPE_NORMAL
- en: Its main goal is to help developers identify the most critical security risks
    facing organizations. To help in the task, they publish a periodical bulletin
    which has been published since they started in 2010\. The current, updated version
    is the 2013 edition, although they're working on a version for 2017, which is
    not available at the time of writing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The top 10 vulnerabilities are presented in the following graphic. It assumes
    that the ordering is important, the first one being the most used or dangerous
    (or both, in many cases):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The OWASP Top 10](img/image00645.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Also, keep in mind that often, an attack can be a compound of different steps,
    each step using some of these vulnerabilities (this happens in some of the most
    sophisticated attacks we know of).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the diagram, OWASP explains a use case in which an actor gets access to
    a valuable resource and the elements involved in the process. Somehow, the vast
    majority of the attacks follow this sequence diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The OWASP Top 10](img/image00646.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As the paper states, the paths used by threat agents can be simple or tremendously
    complex. Often, they can be very difficult to identify and reproduce. They recommend
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '"To determine the risk to your organization, you can evaluate the likelihood
    associated with each threat agent, attack vector, and security weakness and combine
    it with an estimate of the technical and business impact to your organization.
    Together, these factors determine the overall risk."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you remember [Chapter 10](part0055.xhtml#aid-1KEEU1 "Chapter 10. Design Patterns"),
    *Design Patterns*, there is a relation to the Threat Model, that is, basically,
    the same message we mentioned when talking about threats.
  prefs: []
  type: TYPE_NORMAL
- en: So, it seems that there's a consensus about security management and the principles
    that should be considered along the application's life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The top 10 list of threats that we are going to cover in this chapter explain
    the roots of every vulnerability, typical scenarios for attacks, and the recommended
    prevention measures. We'll review them and look at the ways in which they affect
    the C# and .NET programmers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by quoting these ten definitions and establish them as the starting
    point of our analysis (there''s a free version of the document available at [http://www.owasp.org](http://www.owasp.org)):'
  prefs: []
  type: TYPE_NORMAL
- en: '**A1 - Injection:** Injection flaws, such as SQL, OS, and LDAP injection occur
    when untrusted data is sent to an interpreter as part of a command or query. The
    attacker''s hostile data can trick the interpreter into executing unintended commands
    or accessing data without proper authorization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A2 - Broken Authentication and Session Management Application**: Application
    functions related to authentication and session management are often not implemented
    correctly, allowing attackers to compromise passwords, keys, or session tokens,
    or to exploit other implementation flaws to assume other users'' identities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A3 - Cross-Site Scripting (XSS)**: XSS flaws occur whenever an application
    takes untrusted data and sends it to a web browser without proper validation or
    escaping. XSS allows attackers to execute scripts in the victim''s browser which
    can hijack user sessions, deface web sites, or redirect the user to malicious
    sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A4 - Insecure Direct Object References**: A direct object reference occurs
    when a developer exposes a reference to an internal implementation object, such
    as a file, directory, or database key. Without an access control check or other
    protection, attackers can manipulate these references to access unauthorized data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A5 - Security Misconfiguration**: Good security requires having a secure
    configuration defined and deployed for the application, frameworks, application
    server, web server, database server, and platform. Secure settings should be defined,
    implemented, and maintained, as defaults are often insecure. Additionally, software
    should be kept up to date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A6 – Sensitive Data Exposure**: Many web applications do not properly protect
    sensitive data, such as credit cards, tax IDs, and authentication credentials.
    Attackers may steal or modify such weakly protected data to conduct credit card
    fraud, identity theft, or other crimes. Sensitive data deserves extra protection
    such as encryption at rest or in transit, as well as special precautions when
    exchanged with the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A7 – Missing Function Level Access Control**: Most web applications verify
    function level access rights before making that functionality visible in the UI.
    However, applications need to perform the same access control checks on the server
    when each function is accessed. If requests are not verified, attackers will be
    able to forge requests in order to access functionality without proper authorization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A8 - Cross-Site Request Forgery (CSRF)**: A CSRF attack forces a logged-on
    victim''s browser to send a forged HTTP request, including the victim''s session
    cookie and any other automatically included authentication information, to a vulnerable
    web application. This allows the attacker to force the victim''s browser to generate
    requests that the vulnerable application thinks are legitimate requests from the
    victim.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A9 - Using Components with Known Vulnerabilities**: Components, such as libraries,
    frameworks, and other software modules, almost always run with full privileges.
    If a vulnerable component is exploited, such an attack can facilitate serious
    data loss or server takeover. Applications using components with known vulnerabilities
    may undermine application defenses and enable a range of possible attacks and
    impacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A10 – Unvalidated Redirects and Forwards**: Web applications frequently redirect
    and forward users to other pages and websites, and use untrusted data to determine
    the destination pages. Without proper validation, attackers can redirect victims
    to phishing or malware sites, or use forwards to access unauthorized pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, there are 10 distinct areas to care about, which we should consider
    as programmers, although the team in charge of envisioning and planning the application
    should also keep them in mind from the very beginning of any software project.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s go with the A1 threat, which is the mother of all evil for many
    programmers: injection in its many flavors.'
  prefs: []
  type: TYPE_NORMAL
- en: A1 – injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The injection threat is always based on input data from the user. An interpreter
    will take this information and, presumably, incorporate the data into the normal
    flow of a sentence that is to be executed behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: So, the key here is that potential attacks should know the engine they're trying
    to surpass. However, the three main engines mentioned by A1 are SQL, OS, and LDAP,
    the first one being the most common (and that's why it's the most dangerous).
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SQL injection is, perhaps, the most well-known of them all. It''s based on
    some characteristics of the SQL language:'
  prefs: []
  type: TYPE_NORMAL
- en: Several sentences can be linked together, separated by a semicolon (`;`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can insert an inline comment with a double dash (`--`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The programmer doesn't care about the contents introduced by the user and adds
    those contents to a string that is passed to the interpreter, which blindly executes
    the command:![SQL injection](img/image00647.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see in the figure, you just have to pass the sentence `or 1=1 --`
    to make it work. If the final sentence is something like `Select [User] from [Users]
    where [Password] = whatever`, although you don't include the right password, the
    following sentence is true, since `1 = 1` is true, and whatever the programmer
    put next to it is ignored due to the double dash comment. So, you're validated
    and you get into the system. Many other possibilities or variations are also possible
    but are always based on the same idea. The risk can be enormous, since they can
    even concatenate or delete sentences or even call stored procedures, such as `xp_cmsShell`,
    which executes sentences in the target system, thus getting total control over
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the worst case, it can even insert a Trojan inside the machine. Imagine
    the Trojan is called `xp_tr.dll` and that it''s located in our `C:\temp` directory.
    We can use a sentence like this (next to the previous code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will register our Trojan as a stored procedure, which we will call using
    `xp_webserver`, from that moment obtaining the functionality installed therein.
  prefs: []
  type: TYPE_NORMAL
- en: Prevention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The defense? Don''t trust any input from the user and therefore utilize a parsing
    mechanism that forces the coming string to be what you expect. As you can see,
    the problem goes beyond the type of application: it could be a desktop application
    or a website: the problem is always the same.'
  prefs: []
  type: TYPE_NORMAL
- en: So, any data input is potentially evil. It doesn't matter who's coming from
    or where. That's what OWASP calls a threat agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The are three main strategies for defense against these kind of attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Use parameterized queries, also called prepared statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use stored procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escape all input coming from the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at how the first case looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the potential dangerous parameter is created as a new `OleDbParameter
    object`, and that would not be possible if the user inserts a string not suitable
    for the task. This can be said for other types of parameters, such as `SQLParameter`
    if the client is `SQLClient`.
  prefs: []
  type: TYPE_NORMAL
- en: The second solution is to use stored procedures. As long as the programmer doesn't
    include any unsafe stored procedure generation, the effect of parameterized queries
    is the same as in the previous case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code assumes that there is a `SQLConnection` object available
    and there''s a stored procedure object stored in the SQL server that the connection
    points to, named `sp_getAccountBalance`. The process of the creation of a new
    `SQLParameter` object goes through a similar check as the first case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The third case deals with escaping the input (or **White List Input Validation**),
    which can be done in several ways. This could be the case when the table to be
    used is selected dynamically by the user. The best way to avoid risks in this
    scenario is to provide a white list of possible values, avoiding any other input.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is equivalent to the usage of an `Enum` type, specifying the possible
    tables that the query is going to admit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Besides the previous techniques, there are other specific solutions related
    to the distinct RDBMS. For SQL Server databases, a good article on the subject
    can be found at [https://blogs.msdn.microsoft.com/raulga/2007/01/04/dynamic-sql-sql-injection/](https://blogs.msdn.microsoft.com/raulga/2007/01/04/dynamic-sql-sql-injection/).
  prefs: []
  type: TYPE_NORMAL
- en: The case for NoSQL databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The official documentation offers some insights about possible attacks using
    SQL injection against non relational engines.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the MongoDB engine we examined in [Chapter 7](part0039.xhtml#aid-1565U1
    "Chapter 7. NoSQL Database Programming"), *NoSQL Database Programming*, the problem
    arises when an attacker is able to operate on the information passed using the
    `$where` operator, including some JavaScript code that can be parsed as part of
    the MongoDB query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example in which the code is passed directly into the
    MongoDB query without any checking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The trick here lies in using special characters with a special meaning to the
    API behind the engine. An attacker can observe if the application is sanitizing
    the input by checking the results on including certain characters to observe whether
    that triggers an error.
  prefs: []
  type: TYPE_NORMAL
- en: The injection of special characters relevant to the target API language and
    observation of the results may allow a tester to determine if the application
    correctly sanitized the input. For example, within MongoDB, if a string containing
    any of the following special characters (`'` `"` `\` `;` `{` `}`) was passed without
    control, it would trigger a database error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, since JavaScript is a fully featured language, it allows an attacker
    to manipulate data and also run arbitrary code. Imagine the following code being
    inserted into the `$userInput` variable mentioned in the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript code will be executed…
  prefs: []
  type: TYPE_NORMAL
- en: 'The previously mentioned resource in OWASP will give you clues and advice about
    other types of injections: LDAP Injection, XML Injection, Command Injection, ORM
    Injection, SSI (Server-side includes) Injection, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, the *OWASP Testing Guide v4 Table of Contents* documentation([https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents](https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents))
    of the initiative is an exhaustive and updated source to analyze and look for
    guidance through the amazing number of attacks related to these types of security
    threats.
  prefs: []
  type: TYPE_NORMAL
- en: A2 – Broken Authentication and Session Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The problem here is related to identity and permissions. As the official definition
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Application functions related to authentication and session management are
    often not implemented correctly, allowing attackers to compromise passwords, keys,
    or session tokens, or to exploit other implementation flaws to assume other users''
    identities."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is even worse when the false authenticated users are remote (the typical
    case) and therefore difficult to track.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problems here are multiple:'
  prefs: []
  type: TYPE_NORMAL
- en: We might accept unwanted users (information and operation disclosure)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variant of this is when an unwanted user gets administrator privileges, thus
    putting the whole system at risk
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We might accept a user with credentials beyond the legitimate use of information
    for these credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally speaking, we can say this is a problem of impersonation or elevation
    of privileges (either because the attacker has no privilege at all or because
    it raises itself to a superior level than originally intended).
  prefs: []
  type: TYPE_NORMAL
- en: The causes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several causes for this. The most widely recognized are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: User authentication is unprotected when stored (hashing or encryption should
    be used)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weakness of passwords may allow an attacker to gain access to a *brute force*
    procedure (usually trying to get in using a list of known passwords that are most
    commonly used)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session IDs can be exposed via URLs, be vulnerable to session fixation, don't
    have a timeout, or they're not properly invalidated at logout time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, all this information is not sent over an encrypted connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is perhaps the more popular attack of all, since it's very usual to find
    it in literature and movies about hacking (often over exaggerated, let's say).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is usually seen next to other techniques of the so-called *social engineering*,
    which is defined by Wikipedia as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: psychological manipulation of people into performing actions or divulging confidential
    information.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Many well-known hackers, such as Kevin Mitnick, are considered real masters
    in this art (he runs a cyber security company of his own now).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, in the OWASP initiative, we can find abundant information about the
    best ways to cope with this threat depending on different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Prevention
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What can we do to proactively prevent this type of attack? There are some well
    established measures:'
  prefs: []
  type: TYPE_NORMAL
- en: First, developers should always have a single set of strong authentication and
    session management controls available. Thus, authentication and session management
    should comply with the requirements established in OWASP **Application Security
    and Verification Standard** (**ASVS**) and areas V2 (Authentication) and V3 (Session
    Management).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The document is available at [https://www.owasp.org/index.php/ASVS](https://www.owasp.org/index.php/ASVS)
    and has been recently updated (version 3.0.1 as of July 2016).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers should maintain a simple interface. Recommendations on this are widely
    explained in the ESAPI authenticator and user APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although this belongs to the A3 type of threat, the consideration of possible
    Cross-Site Scripting should also be primordial in this case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ASVS has three levels of prevention, **opportunistic**, **standard**, and
    **advanced**.
  prefs: []
  type: TYPE_NORMAL
- en: The first level is said to be achieved when an application adequately defends
    against application security vulnerabilities that are easy to discover, and included
    in the OWASP Top 10 and other similar checklists (as defined in the official documentation
    ([https://www.owasp.org/images/6/67/OWASPApplicationSecurityVerificationStandard3.0.pdf](https://www.owasp.org/images/6/67/OWASPApplicationSecurityVerificationStandard3.0.pdf)).
  prefs: []
  type: TYPE_NORMAL
- en: This type of protection seems adequate when there are no special risks in the
    assets the application manages or if the type of expected attacks will not go
    beyond the use of simple low effort techniques to identify easy-to-find and easy-to-exploit
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Level 1 should be the minimum required for all applications.
  prefs: []
  type: TYPE_NORMAL
- en: The second level (standard) is obtained when we are defending against most of
    the risks associated with software today. It's typically appropriate for applications
    that handle significant business-to-business transactions, including those that
    process healthcare information, implement business-critical or sensitive functions,
    or process other sensitive assets, indicating the ASVS.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, level 3 is reserved for applications where significant levels of security
    verification are required, such as those found in the areas of military, health
    and safety, critical infrastructure, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: An organization could require ASVS level 3 in software that performs critical
    functions, where a failure might impact the operations and even the organization's
    survival.
  prefs: []
  type: TYPE_NORMAL
- en: .NET coding for A2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In .NET programming, we have a bunch of possibilities to enforce security authentication
    and authorization as well as many other options, including special namespaces
    dedicated to security (`System.Security`) and cryptography (`System.Security.Cryptography`).
  prefs: []
  type: TYPE_NORMAL
- en: Desktop applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For desktop applications, the main security level is based on login, of course.
    This means that the only access to the application should be through a login window,
    launched at the beginning against a secure store system (preferably a database).
  prefs: []
  type: TYPE_NORMAL
- en: There is not much to say in this case, since it's all about avoiding any SQL
    injection in the way we saw in the previous point.
  prefs: []
  type: TYPE_NORMAL
- en: However, a couple of considerations should be measured. First, for those cases
    in which the application is simple and the password should be stored in the `app.config`
    file, the password needs encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do this very easily, in many ways, using the .NET resources: for instance,
    we can access hashing and encryption classes already prepared for this usage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following sample code will give you an idea about how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the algorithm used here is not the most secure one, since it seems
    to have been compromised lately. So, it would be better to use a more advanced
    version such as `SHA256Managed`, instead. Consequently, the initialization of
    the provider should be done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Web applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When talking about the old ASP.NET Web Forms applications, the truth is that
    they implement security pretty well (all in the server):'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, there''s something that server components do automatically:
    encoding HTML values and attributes so that they prevent XSS attacks, which we
    will discuss in the next point (A3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides, `ViewState` is also ciphered and validated in a way that it can avoid
    "tampering" form the post information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programmers have a `validaterequest` attribute available in the `@page` declaration,
    which can be used to catch suspicious data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another way to prevent attacks through injection is event validation in order
    to control invalid posted information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, in ASP.NET MVC, most of this functionality is not present. So, we have
    another set of choices to ensure these features.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, when you create a new ASP.NET MVC application, you are offered
    some choices about authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: No authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Individual user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work and school accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second choice (individual accounts) allows the user to authenticate via
    Facebook, Twitter, or Google accounts (or even another security mechanism).
  prefs: []
  type: TYPE_NORMAL
- en: 'The third choice is for applications that authenticate users with Active Directory,
    Microsoft Azure Active Directory, or Office 365\. You can choose single or multiple
    organizations or on-premises infrastructure, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web applications](img/image00648.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, in **Windows Authentication**, all users logged into the system are
    allowed to get in.
  prefs: []
  type: TYPE_NORMAL
- en: In case you opt for an individual authentication, the prototype project that
    Visual Studio creates for us gives us some clues about how to code it correctly.
  prefs: []
  type: TYPE_NORMAL
- en: If you take a look at the default project, you'll see there are several classes
    that implement all the management about identities, passwords, and so on. This
    is included in the `ManageControllers.cs` file, which is generated by the default
    project.
  prefs: []
  type: TYPE_NORMAL
- en: The preferred measure to take in this case is the use of attributes in those
    controllers that might compromise security. Attributes for authorization allow
    you to configure who's allowed to use the corresponding controller (or the action
    method if you want to get more granular control).
  prefs: []
  type: TYPE_NORMAL
- en: 'This code explains how to implement several security features:'
  prefs: []
  type: TYPE_NORMAL
- en: On the one hand, these methods marked with the `[HttpPost]` attribute are also
    marked with another attribute, `[AntiForgeryToken]`. This is used to prevent a
    type of attack related to the OWASP A8 (Cross-Site Request Forgery), and we will
    go over it later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides, the entire `ManageController` class is marked with the `[Authorize]`
    attribute. This attribute stops any non authorized user to access this method,
    and if an attempt is made to access it, an exception will be thrown. `Authorize`
    forces the application to repudiate any user that is not—both—authenticated and
    authorized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This attribute allows some customization by the programmer: you can indicate
    specific roles, specific users, or both, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web applications](img/image00649.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Besides these measures, a look at the `AccountController` class shows several
    methods that are marked with security attributes as well. The class itself is
    marked with `AuthorizeAttribute`, but we find some methods marked with `[AllowAnonymous]`
    too. The reason is because some actions and controllers are skipped by `AuthorizeAttribute`
    during authorization and are intended to allow initial access to these methods.
  prefs: []
  type: TYPE_NORMAL
- en: As for the second way to authenticate, that is, via external logins provided
    by Google, Twitter, or Facebook, this is now possible thanks to `OAuth` and `OpenID`,
    two standards for authentication widely used in social networks.
  prefs: []
  type: TYPE_NORMAL
- en: The protocols associated with these standards were not easy to implement in
    the past because they are complex; also, some top providers are used to implement
    them with some differences. Fortunately, the MVC project template eases the way
    we can manage these options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following (commented) code appears just like this in the project in order
    to allow you to code these new options with these external providers (you''ll
    find them in the `Startup.Auth.cs` file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, each provider requires some kind of user and password combination,
    which you can save in the storage media selected for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, note that there are other attributes in relation to security that
    you might use: for example, you can force a callback from an external provider
    in order to use HTTPS instead of HTTP by adding the `[RequireHttps]` attribute,
    which is linked to the critical action method you want to protect.'
  prefs: []
  type: TYPE_NORMAL
- en: In this manner, you have an extra layer of security with just a single attribute.
  prefs: []
  type: TYPE_NORMAL
- en: A3 – Cross-Site Scripting (XSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XSS is said to be one of the most problematic security issues due to the lack
    of knowledge about it and its lack of prevention among the developer's community.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is quite simple in some of its implementations, though, and that''s why
    it is so dangerous. There are three known forms of XSS attacks: stored, reflected,
    and DOM based.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the official examples of these attacks (reflected) presents the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That is, the pages build an input field based on a request. Also, an attacker
    can modify the page in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'What happens? The inserted code reflects the requested information about a
    user to the attacker, or to say it as in the OWASP documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '"This causes the victim''s SessionID is sent to the attacker''s website, allowing
    the attacker to hijack the user''s current session."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The stored version of XSS (there are many, though) is a typical type of attack
    related to any possible user input, such as a blog with user comments, and so
    on. The attacker's response is saved in the website's storage system, and that's
    why the name.
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario, the first thing that an attacker will do is insert into the
    answer, a character that should be escaped to see whether, indeed, it is escaped
    (something like a `<`, for example). If the character shows up (it is not escaped),
    it means that the programmer doesn't check input in the comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now comes the tricky part: instead of just a humble `<` sign, you can insert
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Since this is to be rendered on the page with the rest of the contents, whatever
    you write will be inserted and shown also. Of course, it would be more evil if
    instead of using just an iframe, youinsert a script tag that loads some dangerous
    JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will remain unnoticed to the users since the new anchor tag doesn't contain
    any text and is unseen. This script will now run when any user visits the Web,
    sending the attacker the information that the JavaScript code is prepared to send.
  prefs: []
  type: TYPE_NORMAL
- en: Some authors call this technique passive injection as opposed to active injection,
    in which without knowing the risks, the user participates in the hacking process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the DOM-based version of XSS uses DOM tags to perform their actions.
    These attacks modify tags that are known to search and load external content:
    `img`, `link`, `script`, `input`, `iframe`, `object`, and even `body`, `div`,
    or `table` with the excuse of changing the background property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of these attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that even *innocent* tags, such as `div`, `table`, or `body`, can be used
    for these purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Prevention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, the documentation states that:'
  prefs: []
  type: TYPE_NORMAL
- en: Preventing XSS requires separation of untrusted data from active browser content.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Actually, to afford the problem, there are several suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We should start by properly escaping all untrusted data based on the HTML context
    (as we''ve seen: body, attributes, any JavaScript or CSS, or even URLs) taken
    from the user. The *XSS (Cross Site Scripting) Prevention Cheat Sheet* ([https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet))
    documentation contains details on how these data escaping techniques can be applied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The whitelist input validation technique we saw in the previous points is also
    recommended, but it is not a complete defense because some applications require
    the admission of special characters. For this scenario, we should validate the
    length, characters, format, and business rules before accepting any entry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other measures include auto-sanitization libraries and even the use of a **Content
    Security Policy** (**CSP**) to defend your entire site against XSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In .NET, some measures are taken by default, as we mentioned earlier. This includes
    the insertion of some JavaScript libraries by default, such as jQuery Validate
    and jQuery Validate Unobtrusive, in order to check the user's input prior to sending
    any data to the server.
  prefs: []
  type: TYPE_NORMAL
- en: As always, it is recommended that you consider the business value and also the
    business impact of the possibly affected areas of the application as well as the
    data that is processed.
  prefs: []
  type: TYPE_NORMAL
- en: Another resource to keep in mind would be the *DOM based XSS Prevention Cheat
    Sheet* ([https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet))
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: A4 – Insecure Direct Object References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s remember this definition:'
  prefs: []
  type: TYPE_NORMAL
- en: A direct object reference occurs when a developer exposes a reference to an
    internal implementation object, such as a file, directory, or database key. Without
    an access control check or other protection, attackers can manipulate these references
    to access unauthorized data.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For some scenarios, this requires the attacker (who happens to be a legitimate
    user of the site) to know something about the resource to be attacked in order
    to substitute the expected information (such as their user account) for the victim's
    information (in this case, another account number, for example).
  prefs: []
  type: TYPE_NORMAL
- en: 'The canonical example offered by OWASP recreates a scenario in which a query
    about an account is to be done using a SQL request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The key is in `request.GetParameter("accountNo")`. An attacker can change this
    account number for another (once logged in) and try to have access to somebody
    else's information.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the account number is sent in the URL, it''s possible to recreate
    this request, including the intended, foreign account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a direct reference to a restricted resource, and the question is: should
    the user really have access to the `AnotherAccountNo` parameter included in the
    request?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, it may well happen that the reference is an indirect one. So, the question
    to answer here, as the OWASP reminds us, would be:'
  prefs: []
  type: TYPE_NORMAL
- en: If the reference is an indirect reference, does the mapping to the direct reference
    fail to limit the values to those authorized for the current user?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that automated tools don't usually look for these kind of flows just because
    they are not able to recognize what is to be protected and what is not. This type
    of vulnerability is quite common, but we find it in applications due to untested
    coding scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Prevention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recommended prevention approach is to avoid insecure direct object references,
    protecting object numbers, filenames, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Utilization of a per-user or session indirect object reference is recommended.
    This means, for instance, that a user is now allowed to manually introduce the
    account number to be requested, but, instead, a description, or even a reference
    to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This description (or reference) will be resolved at runtime, mapping it to the
    proper user's account.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, we are reminded that *Each use of a direct object reference from an untrusted
    source must include an access control check to ensure the user is authorized for
    the requested object*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solving this in .NET projects is easy using the corresponding procedure before
    establishing a connection or access to the requested resource.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, the program can internally store the list or the available resources
    for a logged user and only allow these resources before any attempt to access
    them is made
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP **Enterprise Security API Project** (**ESAPI**) contains more information
    about how to manage these types of attacks ([https://www.owasp.org/index.php/Project_Information:_OWASP_Enterprise_Security_API_Project](https://www.owasp.org/index.php/Project_Information:_OWASP_Enterprise_Security_API_Project)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another official set of guidelines and recommendations are available on *Top
    10 2007-Insecure Direct Object Reference* at [https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference](https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the user might also base their attack on files, requesting an already
    known resource file that contains protected information.
  prefs: []
  type: TYPE_NORMAL
- en: Troy Hunt, an MVP developer for Pluralsight, exposes one of these attacks in
    detail using an ASP.NET application in which the details of a user account are
    available once the user has logged in (refer to [https://www.troyhunt.com/owasp-top-10-for-net-developers-part-4/](https://www.troyhunt.com/owasp-top-10-for-net-developers-part-4/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot gives us the key to the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prevention](img/image00650.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the key is that using the debugger tools, we can check the format
    in which the information is sent to the server. In this case, there's a WCF service
    invoked (`CustomerService.svc`), and in that service, the `GetCustomer` method
    is called, passing it a JavaScript object containing the key of the customer.
  prefs: []
  type: TYPE_NORMAL
- en: Well, that's all the attacker needs. Now, they can change the number with another
    one and use a tool such as Fiddler to prepare a request that includes the modified
    information, for example, about another `customerId`.
  prefs: []
  type: TYPE_NORMAL
- en: One of the flaws, in this case, is that `customerId` is largely predictable
    since it's a number. Using a GUID here, as Hunt suggests in his article, is much
    more secure and doesn't give any extra clue to the attacker (remember that when
    we saw how to use MongoDB, one of the characteristics was that the `ObjectId`
    that MongoDB assigns to each document is, precisely, a GUID).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the other problem in this sample was that you could send a request
    by simply adding a request body just as if you were still using the application
    in an expected manner. I suggest that you read the previously mentioned article
    if you are interested in the details of this type of attack.
  prefs: []
  type: TYPE_NORMAL
- en: A5 – Security Misconfiguration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Again, the OWASP has been very precise in defining the goals and motivations
    behind this security issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Good security requires having a secure configuration defined and deployed for
    the application, frameworks, application server, web server, database server,
    and platform. Secure settings should be defined, implemented, and maintained,
    as defaults are often insecure. Additionally, software should be kept up to date.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There are many implications related to the previous definition; some of them
    were already mentioned in [Chapter 9](part0048.xhtml#aid-1DOR02 "Chapter 9. Architecture"),
    *Architecture*, when we discussed security in the ALM and mentioned S3: Secure
    by Design, Secure by Default, and Secure in Deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: S3 relates to this topic in a way. On the one hand, the design can come from
    a bad initial design, which doesn't relate to the Threat Model in a proper way,
    so security flaws are only discovered when it's too late and when they require
    patches.
  prefs: []
  type: TYPE_NORMAL
- en: The second point is also crucial. Only, the functionality needed to perform
    the required actions should be implemented (or made visible). This is one of the
    first principles to apply to any system in relation to security.
  prefs: []
  type: TYPE_NORMAL
- en: 'With respect to the deployment, there are several considerations: perimeter
    security, which should be made in consensus with the development team, and everything
    related to configuration files and resources.'
  prefs: []
  type: TYPE_NORMAL
- en: Possible examples of attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, the documentation recreates four possible examples of attack scenarios
    related to misconfiguration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario #1**: If any of the servers in production have left the admin console
    that''s installed and the default accounts are the same, an attacker might find
    out those pages, log in using the default passwords, and take over the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scenario #2**: The ability of directory listing should be removed from the
    server (or checked whether it is removed in case it''s a default feature of that
    server). If an attacker can list files, they can find the source code and study
    it in order to look for flaws and gain access to the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scenario #3**: Extra information related to error messages is an important
    source of information for any attacker: stack traces, ASP.NET yellow screens,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scenario #4**: Sometimes during the development process, demo applications
    are used as proof of concept of certain features in the application. If they are
    not deleted, they might have security flaws.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevention – aspects to consider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So, when establishing a strategy for configuration, the following points should
    be checked according to OWASP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Software obsolescence: This covers all aspects involved; the operating system,
    the servers, database management, third-party applications, and any other resource
    the solution might use. (There''s more about it in A9).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Revise the Secure by default principle: Are all available features needed?
    In general, a review of the installed items is mandatory (privileges, accounts,
    ports, pages, services, and so on). This is also referred to as the principle
    of least privilege.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you canceled the resources enabled while the development process took place?
    These can include accounts (and their passwords), files, demos, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did you change the default error pages used while developing? They can reveal
    informative error messages to potential attackers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the state of the security settings in TFS, IDEs, and libraries? Are they
    set to secure values?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevention – measures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a complete set of features to keep in mind, the ASVS areas regarding Crypto,
    Data Protection, and SSL are helpful. However, there are some minimum measures
    that your sensitive data should comply with in order to be protected:'
  prefs: []
  type: TYPE_NORMAL
- en: Establish a hardening process (repeatable and automated) to make it easy and
    fast to deploy an application in a different environment with security in mind.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that the process of updating software in relation to the operating
    system and the application itself is easy and as automated as possible. Remember
    to also consider libraries (proper and external).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think of the architecture from the beginning as a strong structure that provides
    a suitable separation between different components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should contemplate periodical scanning and audits to help in the detection
    of possible flaws in the configuration (in the system or the application).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember all we said up until this point in relation to sensitive information,
    its location, and availability.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember that often, hosting applications in the cloud is an extra benefit
    for security since many of these operations are automatically carried on by the
    cloud's maintenance infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: A6 – Sensitive Data Exposure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data exposure deals with revelation of information or information disclosure.
    The OWASP document defines it saying that:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Many web applications do not properly protect sensitive data, such as credit
    cards, tax IDs, and authentication credentials. Attackers may steal or modify
    such weakly protected data to conduct credit card fraud, identity theft, or other
    crimes. Sensitive data deserves extra protection such as encryption at rest or
    in transit, as well as special precautions when exchanged with the browser."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This topic relates to the disclosure of sensitive information when such information
    can be used not just in a cyber attack, but also in certain types of theft, such
    as what might happen when health records, credentials, personal data, or credit
    cards are at risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The officially vulnerable scenarios presented by the documentation remind us
    that for such kind of data, we should confirm the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether any of this data is stored in clear text (for some time), including
    possible backups of this information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that this data is not transmitted in clear text, either internally
    or externally. Beware of the traffic on the Internet since it is dangerous by
    default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How updated are the cryptographic algorithms? For instance, SHA1 has reported
    some vulnerabilities a few years ago (we've mentioned this earlier), which led
    some companies to switch to stronger versions, SHA256 or SHA512.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Wikipedia reminds us that:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In February 2005, an attack by Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu was
    announced. The attacks can find collisions in the full version of SHA-1, requiring
    fewer than 2e69 operations. (A brute-force search would require 2e80 operations.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How powerful are the generated crypto keys? Is the key management and rotation
    being used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What about directives or headers for browser security? Are they missing when
    this special data is provided by or sent to the browser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a complete set of problems to avoid, refer to ASVS areas Crypto (V7), Data
    Prot. (V9), and SSL (V10).
  prefs: []
  type: TYPE_NORMAL
- en: 'The three canonical scenarios of attack that OWASP presents are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario #1**: An application encrypts credit card numbers in a database
    using automatic database encryption. However, this means that it also decrypts
    this data automatically when retrieved, allowing an SQL injection flaw to retrieve
    credit card numbers in clear text. The system should have encrypted the credit
    card numbers using a public key and only allowed backend applications to decrypt
    them with the private key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scenario #2**: A site simply doesn''t use SSL for all authenticated pages.
    The attacker simply monitors network traffic (such as an open wireless network)
    and steals the user''s session cookie. The attacker then replays this cookie and
    hijacks the user''s session, accessing the user''s private data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scenario #3**: The password database uses unsalted hashes to store everyone''s
    passwords. A file upload flaw allows an attacker to retrieve the password file.
    All of the unsalted hashes can be exposed with a rainbow table of pre-calculated
    hashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, sometimes, the new facilities provided by updated environments, if
    not used properly, can lead to security flaws. This is the case with some of the
    new attributes we find in HTML5 related to `<input>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we now have an `autocomplete` attribute (supported by most of
    browsers) that activates the caching of data in local storage. It''s quite simple
    to implement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This activates storage in the browser for that particular user, using that particular
    browser (each browser uses a distinct area), and associated with the page they're
    viewing at that moment.
  prefs: []
  type: TYPE_NORMAL
- en: Every time a credit card number is introduced and later sent to the browser,
    that information is stored locally and persists for the later usage of the page.
    If any other person can access that computer, there's no need to know about the
    card number because just trying the first number in the sequence (1,2,3…) will
    make the browser suggest all entries starting with that number, including the
    last card number used.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try this simple code (no external libraries or extensions are required),
    as soon as you press number 1 on the keyboard (in my sample), all entries starting
    with that number are shown in an attached combo box (refer to the next screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![A6 – Sensitive Data Exposure](img/image00651.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, for some sensitive information, we should not activate this feature (no
    matter how comfortable it is to the user) because it might incur a serious security
    flaw.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this information can be deleted along with the history of navigation,
    cookies, and other cacheable information, as usual.
  prefs: []
  type: TYPE_NORMAL
- en: A7 – Missing Function-level Access Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This feature has to do with authorization, as it happened with other previous
    features. The problem here is accessing some parts of the application for which
    the user is not authorized, for instance, a non-administrator user accessing the
    private wage records of the rest of the company). As usual, the official documentation
    states the problem precisely:'
  prefs: []
  type: TYPE_NORMAL
- en: Most web applications verify function level access rights before making that
    functionality visible in the UI. However, applications need to perform the same
    access control checks on the server when each function is accessed. If requests
    are not verified, attackers will be able to forge requests in order to access
    functionality without proper authorization.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The symptoms can vary: the UI showing links to unauthorized functionality,
    authentication, and/or authorization checks missing in the server or even the
    server not checking the identity of requests, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'OWASP exemplifies this type of attack in two scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario #1**: The attacker simply forces browsers to target URLs. The following
    URLs require authentication. Admin rights are also required for access to the
    `admin_getappInfo` page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://example.com/app/getappInfo`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://example.com/app/admin_getappInfo`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If an unauthenticated user can access either page, that's a flaw. If an authenticated,
    non-admin user is allowed to access the `admin_getappInfo` page, that is also
    a flaw, and it may lead the attacker to more improperly protected admin pages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scenario #2**: A page provides an `action` parameter to specify the function
    being invoked, and different actions require different roles. If these roles aren''t
    enforced, that''s a flaw.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control implementation inside the code is also to be checked. If you
    follow a single privileged request, try to verify the authorization pattern. Then,
    you can search the code base trying to find a pattern and identifying when that
    pattern is not followed. Keep in mind that automated tools rarely find these issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps one of the most typical examples of this attack is seen when a request
    shows the structure of information in the URL, allowing the user to guess the
    possible attacks. For instance, say, an attacker sees the following after a request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Then, it's easy to figure out the pattern to follow in order to obtain somebody
    else's information, just changing the number of the request at the end. If there
    are no proper procedures about authorization, the user can gain control over unauthorized
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Prevention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prevention measures are well established, although they''re quite difficult
    to automate (most of them should be managed manually, although there are some
    tools):'
  prefs: []
  type: TYPE_NORMAL
- en: Try to get information from administrative components with a regular user account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a proxy and access the application as an administrator. Then, try to get
    access to the restricted pages using the previous regular user credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find out as much as you can about how admins are validated in the system and
    make sure that proper security procedures are enforced.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the function is part of a workflow, try to check whether the conditions are
    in a suitable state to allow access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to audit failed attempts to access information in order to discover the
    possible paths for an attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide access based on roles on every action method (ASP.NET MVC and the classic
    ASP.NET). This means having to avoid granting access based on individual users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, note that in relation to IIS, there are two execution modes: the classical
    one (and the only one until version IIS 6) and the integrated mode. In the integrated
    mode (in use from IIS 7), .NET sees any request, so a given `handler` can authorize
    each request, even if the request is addressed to a non-.NET resource (such as
    JavaScript or a multimedia file).'
  prefs: []
  type: TYPE_NORMAL
- en: So, if you are running IIS7+ versions, make sure that the integrated mode is
    active because otherwise, .NET only handles requests for files such as `.aspx`,
    `.ascx`, and the like, so other files can be unsecured.
  prefs: []
  type: TYPE_NORMAL
- en: A8 – Cross-Site Request Forgery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given the nature of this threat, the official OWASP documentation defines it
    with a use case of an attack:'
  prefs: []
  type: TYPE_NORMAL
- en: A CSRF attack forces a logged-on victim's browser to send a forged HTTP request,
    including the victim's session cookie and any other automatically included authentication
    information, to a vulnerable web application. This allows the attacker to force
    the victim's browser to generate requests the vulnerable application thinks are
    legitimate requests from the victim.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Perhaps one of the most typical cases is the one the documentation exposes as
    the *canonical* attack of this kind.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is an application that allows a user to send a request to a bank
    using plain text, without any cyphering, for instance, `http://example.com/app/transferFunds?amount=1500&destinationAccount=4673243243`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, an attacker builds another request that will transfer funds from
    the victim''s account to the attacker''s account. To make it work, the attacker
    embeds this code inside a request of a DOM-Based type, which we saw in previous
    issues, such as an `image` request or `iframe` stored on various sites that are
    under the control of the attacker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, if the potential victim visits any of the attacker's sites while they are
    already authenticated to `example.com`, this forged request is going to include
    the session information of the victim, thus authorizing the attacker's request.
  prefs: []
  type: TYPE_NORMAL
- en: Prevention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The OWASP recommends:'
  prefs: []
  type: TYPE_NORMAL
- en: Preventing CSRF requires the inclusion of an unpredictable token in each HTTP
    request.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Also, these tokens should be unique per user session.
  prefs: []
  type: TYPE_NORMAL
- en: You can include them in a hidden field, for example. The value will be sent
    in the body of the HTTP request, so we don't compromise the process using the
    URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The URL (or a URL parameter) can also be used. However, as you can imagine,
    that supposes a higher risk because it can be analyzed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another form of prevention is demanding the user to reauthenticate (something
    very common in e-commerce transactions) or even demonstrate that it is a human,
    using a CAPTCHA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In .NET, we've seen in A2 that our initial demo of ASP.NET will include an attribute
    called `[AntiForgeryToken]` for the methods marked with the `[HttpPost]` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, you''ll see the methods marked in this manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you examine the view related to these action methods, you will see the presence
    of a Razor Helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This ensures that the user cannot submit the form from a remote site because
    they have no way to generate the token (and you can even add a **salt** to it).
    That provides enough protection against CSRF attacks.
  prefs: []
  type: TYPE_NORMAL
- en: A9 – Using components with known vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The problem here is external, somehow. There are libraries with vulnerabilities
    that can be identified and exploited using automated tools. In this way, the threat
    agent can be expanded beyond well-known forms of attacks, to include an unknown
    factor of risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official definition defines A9, stating that:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Components, such as libraries, frameworks, and other software modules, almost
    always run with full privileges. If a vulnerable component is exploited, such
    an attack can facilitate serious data loss or server takeover. Applications using
    components with known vulnerabilities may undermine application defenses and enable
    a range of possible attacks and impacts."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At first, it seems easy to find out whether a commercial or open source component
    has known vulnerabilities. However, different versions pose a factor of risk,
    especially the latest ones, which are supposed to be more secure and fix old problems
    on the one hand, but on the other hand, they might introduce new flaws. Not to
    mention that not all vulnerabilities are reported to the control sites.
  prefs: []
  type: TYPE_NORMAL
- en: There are places such as **CVE** (**Common Vulnerabilities and Exposures**),
    found at [https://cve.mitre.org/](https://cve.mitre.org/), or **National Vulnerability
    Database** (**NVD**), which can be accessed at [https://web.nvd.nist.gov/view/vuln/search](https://web.nvd.nist.gov/view/vuln/search),
    in which you can search for these kind of problems.
  prefs: []
  type: TYPE_NORMAL
- en: The question here is that vulnerabilities in components can potentially cause
    all types of trouble from the most simple to the most sophisticated ones, with
    attacks exclusively thought of for some type of component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples are many, but let''s just think of a few common problems:'
  prefs: []
  type: TYPE_NORMAL
- en: For many years, Adobe Flash has been the most preferred extension for browsers
    that companies used in order to reproduce videos, insert advertising, play audio,
    and so on. Actually, there were so many that Adobe would release periodic updates
    to deal with the security problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The situation got to a critical point when in 2010, Steve Jobs declared that
    no Apple mobile device would use Adobe Flash anymore. He published a letter explaining
    the six main reasons to do that ([http://www.apple.com/hotnews/thoughts-on-flash/](http://www.apple.com/hotnews/thoughts-on-flash/))
    and recommending the use of standards such as HTML5, instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Windows world, there are many examples, but in order to give you an idea,
    let's think of a simple desktop application that uses some components of the control
    panel (which, on the other hand, is the recommended approach instead of reinventing
    the wheel).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, imagine that we have a simple options menu that allows the user to select
    the configuration before printing a report. In .NET, we have several components
    available, which map the corresponding dialog boxes of the operating system: **Print
    Dialog**, **Print Preview**, **Print Document**, and so on.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If we don't delimit the input values, we might end up in trouble. Let's say
    that the user is allowed to give any value in the font size (or even worse, any
    value in the number of copies). The user can establish a font size of, say, 900
    pt and a number of copies of 32564 for some configurations. The system can collapse
    or the printing server in the network can start using virtual memory to hold the
    huge amount of information sent. Here, we have a very simple way to build a **DoS**
    (**Denial of Service**) attack.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We have to consider that often, components run with the complete privileges
    of the application, and we usually don't have the source code to prevent these
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Officially, we should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify all components and the versions you are using, including all dependencies
    (for example, the versions plugin).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor the security of these components in public databases, project mailing
    lists, and security mailing lists and keep them up to date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Establish security policies governing the component in use, such as requiring
    certain software development practices, passing security tests, and having acceptable
    licenses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where appropriate, consider adding security wrappers around components in order
    to disable unused functionalities and/or secure weak or vulnerable aspects of
    the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In .NET, a new document was created in OWASP in relation to this vulnerability:
    OWASP SafeNuGet, which is available at [https://www.owasp.org/index.php/OWASP_SafeNuGet](https://www.owasp.org/index.php/OWASP_SafeNuGet).
    However, if you need to test a given component, the code required is at your disposal
    in a GitHub project of the same name ([https://github.com/OWASP/SafeNuGet](https://github.com/OWASP/SafeNuGet)),
    where you''ll find an MSBuild project that can help you in the task, along with
    instructions and details.'
  prefs: []
  type: TYPE_NORMAL
- en: A10 – Invalidated redirects and forwards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications frequently redirect and forward users to other pages and websites,
    and use untrusted data to determine the destination pages. Without proper validation,
    attackers can redirect victims to phishing or malware sites, or use forwards to
    access unauthorized pages.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you can see in the official definition, the issue here is redirection. Or,
    to be precise, the issue is redirection in a non secure manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official documentation suggests that the best ways to find out whether
    some software includes dangerous forwarding of redirects are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Revise the code for any redirection or forwarding (transfer in .NET). Once identified,
    check whether the target URL is included in any parameter values. In case it is,
    the target URL is not being validated against a whitelist, and therefore, you
    are vulnerable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other possibility is that the site generates redirects, which correspond
    to HTTP response codes 300-307, and, typically a 302 code. Here, we should check
    the parameters supplied before redirection in order to see whether they look like
    a target URL or a fragment of a URL. If they do, you have to change the URL target
    and observe whether the site redirects to the new target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there's no code to review, then you should check all the parameters in the
    search for the same URL patterns, testing those that really perform redirection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The documentation includes a couple of samples of an attack, which we can adapt
    to a .NET environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario #1**: The application has a page called `redirect.aspx`, which takes
    a single parameter named `url`. The attacker crafts a malicious URL that redirects
    users to a malicious site that performs phishing and installs malware:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, the problem is that next to the `url` parameter, the attacker
    might get redirected to a site of their own or another kind.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Scenario #2**: The application uses forwards to route requests between different
    parts of the site. To facilitate this, some pages use a parameter to indicate
    where the user should be sent if a transaction is successful. In this case, the
    attacker crafts a URL that will pass the application''s access control check and
    then forwards the attacker to the administrative functionality for which the attacker
    isn''t authorized:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that this type of behavior is common in web development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through the OWASP Top 10 initiative, analyzing the
    risks and consequences of each of the threats, along with the possible prevention
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: We also included some code for those threats that are either already addressed
    in Visual Studio templates or are easily implemented and are common in use.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the optimization of applications and the
    different techniques that .NET offers for compilation to native code, optimization
    via the configuration of the assemblies, parallelism, and so on.
  prefs: []
  type: TYPE_NORMAL
