["```cs\n@inject IJSRuntime js \n```", "```cs\n<script src=\"img/bweInterop.js\"></script> \n```", "```cs\nprotected override async Task OnAfterRenderAsync(bool firstRender)\n{\n    if (firstRender)\n    {\n        module = await js.InvokeAsync<IJSObjectReference>\n                (\"import\", \"./Pages/MyComponent.razor.js\");\n    }\n} \n```", "```cs\nValueTask<TValue> InvokeAsync<TValue>(string identifier,\n                                     params object[] args); \n```", "```cs\nvar bweInterop = {};\nbweInterop.getWindowSize = function () {\n    var size = {\n        width: window.innerWidth,\n        height: window.innerHeight\n    }\n    return size;\n} \n```", "```cs\npublic class WindowSize\n{\n    public int? Width { get; set; }\n    public int? Height { get; set; }\n} \n```", "```cs\n@page \"/\"\n@inject IJSRuntime js\n<PageTitle>Home</PageTitle>\n@if (windowSize.Width != null)\n{\n    <h2>\n        Window Size: @windowSize.Width x @windowSize.Height\n    </h2>\n}\n<button @onclick=\"GetWindowSize\">Get Window Size</button>\n@code {\n    private WindowSize windowSize = new WindowSize();\n    private async Task GetWindowSize()\n    {\n        windowSize = await js.InvokeAsync<WindowSize>(\n            \"bweInterop.getWindowSize\");\n    }\n} \n```", "```cs\nInvokeVoidAsync(string identifier, params object[] args); \n```", "```cs\nexport function setDocumentTitle(title) {\n    document.title = title;\n} \n```", "```cs\n@inject IJSRuntime js\n@code {\n    [Parameter] public string Title { get; set; } = \"Home\";\n    protected override async Task OnAfterRenderAsync\n        (bool firstRender)\n    {\n        if (firstRender)\n        {\n            IJSObjectReference module =\n                await js.InvokeAsync<IJSObjectReference>\n                    (\"import\", \"./Shared/Document.razor.js\");\n            await module.InvokeVoidAsync\n                (\"setDocumentTitle\", Title);\n        }\n    }\n} \n```", "```cs\n<Document Title=\"Home - My App\" /> \n```", "```cs\n@inject IJSRuntime js\n@code {\n    private string GetGuid()\n    {\n        string guid = \n            ((IJSInProcessRuntime)js).Invoke<string>(\"getGuid\");\n        return guid;\n    }\n} \n```", "```cs\nprivate WindowSize windowSize = new WindowSize();\n[JSInvokable]\npublic void GetWindowSize(WindowSize newWindowSize)\n{\n    windowSize = newWindowSize;\n    StateHasChanged();\n} \n```", "```cs\nprivate DotNetObjectReference<Resize> objRef;\nprotected async override Task OnAfterRenderAsync(bool firstRender)\n{\n    if (firstRender)\n    {\n        objRef = DotNetObjectReference.Create(this);\n        await js.InvokeVoidAsync(\n            \"bweInterop.registerResizeHandler\",\n             objRef);\n    }\n} \n```", "```cs\nbweInterop.registerResizeHandler = function (dotNetObjectRef) {\n    function resizeHandler() {\n        dotNetObjectRef.invokeMethodAsync('GetWindowSize',\n            {\n                width: window.innerWidth,\n                height: window.innerHeight\n            });\n    };\n    resizeHandler();\n    window.addEventListener(\"resize\", resizeHandler);\n} \n```", "```cs\n@page \"/resize\"\n@inject IJSRuntime js\n@implements IDisposable\n<PageTitle>Resize</PageTitle>\n@if (windowSize.Width != null)\n{\n        <h2>\n            Window Size: @windowSize.Width x @windowSize.Height\n        </h2>\n}\n@code {\n    private DotNetObjectReference<Resize> objRef;\n    private WindowSize windowSize = new WindowSize();\n    protected async override Task OnAfterRenderAsync(\n        bool firstRender)\n    {\n        if (firstRender)\n        {\n            objRef = DotNetObjectReference.Create(this);\n            await js.InvokeVoidAsync(\n                \"bweInterop.registerResizeHandler\",\n                    objRef);\n        }\n    }\n    [JSInvokable]\n    public void GetWindowSize(WindowSize newWindowSize)\n    {\n        windowSize = newWindowSize;\n        StateHasChanged();\n    }\n    public void Dispose()\n    {\n        objRef?.Dispose();\n    }\n} \n```", "```cs\n    var bweInterop = {};\n    bweInterop.setLocalStorage = function (key, data) {\n        localStorage.setItem(key, data);\n    }\n    bweInterop.getLocalStorage = function (key) {\n        return localStorage.getItem(key);\n    } \n    ```", "```cs\n    <script src=\"img/bweInterop.js\"></script> \n    ```", "```cs\n    ValueTask SetItemAsync<T>(string key, T item);\n    ValueTask<T?> GetItemAsync<T>(string key); \n    ```", "```cs\n    using LocalStorage.Services; \n    ```", "```cs\n    builder.Services.AddScoped\n        <ILocalStorageService, LocalStorageService>(); \n    ```", "```cs\n    public class LocalStorageService : ILocalStorageService \n    ```", "```cs\n    private IJSRuntime js;\n    public LocalStorageService(IJSRuntime JsRuntime)\n    {\n        js = JsRuntime;\n    } \n    ```", "```cs\n    public async ValueTask SetItemAsync<T>(string key, T item)\n    {\n        await js.InvokeVoidAsync(\n            \"bweInterop.setLocalStorage\",\n             key,\n             JsonSerializer.Serialize(item));\n    } \n    ```", "```cs\n    public async ValueTask<T?> GetItemAsync<T>(string key)\n    {\n        var json = await js.InvokeAsync<string>\n            (\"bweInterop.getLocalStorage\", key);\n        return JsonSerializer.Deserialize<T>(json);\n    } \n    ```", "```cs\n    public string? Value { get; set; }\n    public int Length { get; set; }\n    public DateTime Timestamp { get; set; } \n    ```", "```cs\n    @using LocalStorage.Services \n    ```", "```cs\n    <PageTitle>Local Storage Service</PageTitle>\n    <h2>Local Storage Service</h2>\n    localStorageData:\n    <input type=\"text\" @bind-value=\"data\" size=\"25\" />\n    <hr />\n    <button @onclick=\"SaveToLocalStorageAsync\">\n        Save to Local Storage\n    </button> \n    ```", "```cs\n    Public **partial** class Index \n    ```", "```cs\n    [Inject]\n    ILocalStorageService? localStorage { get; set; }\n    private string? data;\n    async Task SaveToLocalStorageAsync()\n    {\n        var dataInfo = new DataInfo()\n        {\n            Value = data,\n            Length = data!.Length,\n            Timestamp = DateTime.Now\n        };\n        await localStorage!.SetItemAsync<DataInfo?>(\n            \"localStorageData\",\n            dataInfo);\n    } \n    ```", "```cs\n    export function showLocalStorage(data) {\n        alert(data);\n    } \n    ```", "```cs\n    [Inject]\n    IJSRuntime js { get; set; } \n    ```", "```cs\n    private IJSObjectReference? module; \n    ```", "```cs\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender)\n        {\n            module = await js.InvokeAsync<IJSObjectReference>\n                    (\"import\", \"./Pages/Index.razor.js\");\n        }\n    } \n    ```", "```cs\n    <button @onclick=\"ReadFromLocalStorageAsync\">\n        Read from Local Storage\n    </button> \n    ```", "```cs\n    async Task ReadFromLocalStorageAsync()\n    {\n        if (module is not null)\n        {\n            DataInfo? savedData = \n                await localStorage!.GetItemAsync\n                    <DataInfo>(\"localStorageData\");\n            string result = \n                $\"localStorageData = {savedData!.Value}\";\n            await module.InvokeVoidAsync\n                (\"showLocalStorage\", result);\n        }\n    } \n    ```"]