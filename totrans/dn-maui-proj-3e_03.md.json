["```cs\nTitle=\"New Item\"\n\nXAML file namespace changes are complete, we can move on to the C# namespace changes.\nUsing the **Find and Replace** dialog again, we can remove all the Xamarin.Forms namespace references. This time, by using a regular expression, we can remove multiple lines. Use the following expression in the **Find** entry box:\n\n```", "```cs\n\n Then, check the **Use regular expressions** checkbox and select **Current project** for **Look in**, as shown here:\n![Figure 3.12 – Find and Replace – C# namespaces](img/B19214_03_12.jpg)\n\nFigure 3.12 – Find and Replace – C# namespaces\nMost of the changes have been made, and the app should compile at this point. However, it is not using any of the code we have copied and modified as .NET MAUI Shell does not reference the copied pages. The next step is to hook Shell into our code.\nModifying the app startup\nThe `MyMauiApp` project is still using the default `MainPage.xaml` file as its startup page. The next step in our migration is to make the `AppShell.xaml` file the same as it is for our Xamarin.Forms app.\nWhat we need to copy is in the `MauiMigration` project, in the `AppShell.xaml` file, starting at line 76 until line 101, as shown in the following code snippet:\n\n```", "```cs\n\n Copy the preceding code and replace the following lines in the `MyMauiApp` project’s `AppShell.xaml` file:\n\n```", "```cs\n\n To enable the flyout, you will need to remove the following highlighted text in `AppShell.xaml`:\n\n```", "```cs\nusing Microsoft.Extensions.Logging;\nusing MauiMigration.Services;\nusing MauiMigration.Models;\nnamespace MyMauiApp\n{\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                });\n            DependencyService.RegisterSingleton<IDataStore<Item>>(new MockDataStore());\n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n        return builder.Build();\n        }\n    }\n}\n```", "```cs\n    <Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" >\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n    ```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>net7.0-ios;net7.0-android; </TargetFrameworks>\n    <TargetFrameworks Condition=\"$([MSBuild]::IsOSPlatform\n('windows'))\">$(TargetFrameworks);net7.0-windows10.0.19041.0\n</TargetFrameworks>\n    <UseMaui>True</UseMaui>\n    <OutputType>Library</OutputType>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <!-- Required for C# Hot Reload -->\n    <UseInterpreter Condition=\"'$(Configuration)' == 'Debug'\">True</UseInterpreter>\n    <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$\n(TargetFramework)')) == 'ios'\">14.2</SupportedOSPlatformVersion>\n    <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$\n(TargetFramework)')) == 'android'\">21.0</SupportedOSPlatformVersion>\n    <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$\n(TargetFramework)')) == 'windows'\">10.0.17763.0</SupportedOS\nPlatformVersion>\n    <TargetPlatformMinVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$\n(TargetFramework)')) == 'windows'\">10.0.17763.0</Target\nPlatformMinVersion>\n  </PropertyGroup>\n</Project>\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n```", "```cs\n<PropertyGroup>\n  <UseMaui>True</UseMaui>\n  <TargetFramework>net7.0-android</TargetFramework>\n  <OutputType>Exe</OutputType>\n  <ImplicitUsings>enable</ImplicitUsings>\n  <SupportedOSPlatformVersion Condition=\"'$(TargetFramework)' == 'net7.0-android'\">31.0</SupportedOSPlatformVersion>\n</PropertyGroup>\n<PropertyGroup>\n  <UseInterpreter Condition=\"$(TargetFramework.Contains('-android'))\">True</UseInterpreter>\n</PropertyGroup>\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n```", "```cs\n<PropertyGroup>\n  <UseMaui>true</UseMaui>\n  <TargetFramework>net7.0-ios</TargetFramework>\n  <OutputType>Exe</OutputType>\n  <ImplicitUsings>enable</ImplicitUsings>\n  <SupportedOSPlatformVersion \nCondition=\"$([MSBuild]::GetTargetPlatformIdentifier('$\n(TargetFramework)')) == 'ios'\">14.2</SupportedOSPlatformVersion>\n</PropertyGroup>\n```", "```cs\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \n\"OpenSansRegular\");\n             });\n        return builder.Build();\n    }\n}\n```", "```cs\n[Application]\npublic class MainApplication : MauiApplication\n{\n    public MainApplication(IntPtr handle, JniHandleOwnership ownership)\n    : base(handle, ownership)\n    {\n    }\n    protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n}\n```", "```cs\n[Activity(Label = \"ManualMigration\", Icon = \"@mipmap/icon\", \nTheme = \"@style/Theme.MaterialComponents\", MainLauncher = true, \nConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.\nOrientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | \nConfigChanges.SmallestScreenSize )]\npublic class MainActivity : MauiAppCompatActivity\n{\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n    }\ntargetSdkVersion in the AndroidManifest.xml file to version 33, like this:\n\n```", "```cs\n\n Android SDK versions\nSince the Android SDK is updated yearly, it may be the case that the version of .NET for Android and .NET MAUI that you are using is also using a version of the Android SDK that is greater than `33`. The good news is that you will get an error in Visual Studio if `targetSdkVersion` is too low or is not installed. Just follow the instructions in the build error to set the SDK version correctly.\nThat is all the changes we need to make in the Android project for now. Moving on to the iOS project, the `AppDelegate.cs` file can be updated so that it matches the following:\n\n```", "```cs\n\n The final change for the iOS project is to open the `Info.plist` file and change the `MinimumOSVersion` property to `15.2`.\nWith the base changes needed to start your app as a .NET MAUI app done, the next changes are much broader brush strokes:\n\n1.  Remove all `Xamarin.*` namespaces from `.``cs` files.\n2.  Change all `xaml` namespace declarations from the following:\n\n    You will need to amend them like so:\n\nYou may notice that these are the same changes we made in the previous section when using a .NET MAUI Single Project.\nAbout images\n.NET MAUI has improved image handling for the various platforms that it targets. You can provide a single SVG image file, and it will resize the image correctly for all platforms for you. Since the SVG format is based on vectors, it will render much better than other formats such as JPG and PNG after resizing. It is recommended that you convert your images into SVG format, if possible, to take advantage of this feature in .NET MAUI.\nUpdating any incompatible NuGet packages\nThere are a lot of NuGet packages out there and there is no way we can cover them all. But, in general, for each of the NuGet packages that are in use in your app, be sure to look for a version that specifically supports .NET MAUI or the version of .NET that you are targeting. You can use the NuGet Gallery page to determine whether a package supports .NET MAUI. Using a popular package such as PCLCrypto version 2.0.147 ([https://www.nuget.org/packages/PCLCrypto/2.0.147#supportedframeworks-body-tab](https://www.nuget.org/packages/PCLCrypto/2.0.147#supportedframeworks-body-tab)) targets classic Xamarin projects but not .NET 6 or .NET 7\\. You can find the compatible frameworks under the **Frameworks** tab:\n![Figure 3.13 – NuGet Gallery page for PCLCrypto v2.0.147](img/B19214_03_13.jpg)\n\nFigure 3.13 – NuGet Gallery page for PCLCrypto v2.0.147\nHowever, version 2.1.40-alpha ([https://www.nuget.org/packages/PCLCrypto/2.1.40-alpha#supportedframeworks-body-tab](https://www.nuget.org/packages/PCLCrypto/2.1.40-alpha#supportedframeworks-body-tab)) lists .NET 6 and .NET 7 as compatible frameworks:\n![Figure 3.14 – NuGet Gallery page for PCLCrypto v2.1.40-alpha](img/B19214_03_14.jpg)\n\nFigure 3.14 – NuGet Gallery page for PCLCrypto v2.1.40-alpha\nCurrently, we know of the following NuGet changes:\n\n*   Remove all Xamarin.Forms and Xamarin.Essentials NuGet references from your projects. These are now included in .NET MAUI directly. You will have to make some namespace adjustments as those have changed.\n*   Replace Xamarin.Community Toolkit with the latest preview of .NET MAUI Community Toolkit. You will have to make some namespace adjustments as those have changed.\n*   If you reference any of the following SkiaSharp NuGet packages directly, replace them with the latest previews:\n    *   **SkiaSharp.Views.Maui.Controls**\n    *   **SkiaSharp.Views.Maui.Core**\n    *   **SkiaSharp.Views.Maui.Controls.Compatibility**\n\nYou can find the latest version of NuGet packages on the NuGet Gallery website at [https://nuget.org/packages](https://nuget.org/packages).\nAddressing any breaking API changes\nUnfortunately, there is no magic bullet for any of these types of changes. You will simply have to start from the top of your error list and work your way through them. You can review the release notes linked in the official migration guide, available at [https://learn.microsoft.com/en-us/dotnet/maui/migration/](https://learn.microsoft.com/en-us/dotnet/maui/migration/), as helpful hints.\nFor example, a common type of error that’s seen is `error CS0104: 'ViewExtensions' is an ambiguous reference between 'Microsoft.Maui.Controls.ViewExtensions' and 'Microsoft.Maui.ViewExtensions'`. This can be fixed by explicitly using the full namespace when referencing the type or by using a type alias – for example, `using ViewExtensions =` `Microsoft.Maui.Controls.ViewExtensions`.\nCustom renderers and effects\nYour application may use custom renderers or effects to provide a unique user experience. Covering how to upgrade these components is beyond the scope of this chapter. To learn more about how to upgrade renderers and effects, visit the Microsoft Learn site for .NET MAUI migration at [https://learn.microsoft.com/en-us/dotnet/maui/migration/](https://learn.microsoft.com/en-us/dotnet/maui/migration/).\nRunning the converted app and verifying its functionality\nThis is not the last step – I recommend that you attempt to do this after each change. Building your app as you make changes ensures that you are moving in the right direction. I recommend that you `obj` and `bin` folders beforehand. This will ensure that you are building with the latest changes and dependencies, by forcing a NuGet restore.\nNow that we know the basics of how to convert a Xamarin.Forms app, let’s use .NET Upgrade Assistant to migrate a project for us.\nInstalling and running .NET Upgrade Assistant\nAs stated previously, .NET Upgrade Assistant will attempt to perform the first four steps of the migration of your Xamarin.Forms app to .NET MAUI outlined in the previous section. The tool is under active development and as the team discovers new improvements, they are added. This is mostly due to feedback they receive from developers like you.\nAt the time of writing, .NET Upgrade Assistant did not work on all projects and has the following limitations:\n\n*   Xamarin.Forms must be version 5.0 and higher\n*   Only Android and iOS projects are converted\n*   .NET MAUI must be properly installed with the appropriate workloads\n\nIf you have followed the steps from *Chapter 1*, then the last should should already be satisfied.\nIf your Xamarin.Forms app meets these criteria, then we can get started by installing the tool.\nInstalling .NET Upgrade Assistant\n.NET Upgrade Assistant is a Visual Studio extension on Windows and a command-line tool on Windows and macOS. You can use the integrated developer PowerShell in Visual Studio or any command-line prompt to install the tool. Follow these steps to install the tool using Visual Studio on Windows:\n\n1.  In Visual Studio, select the **Extensions** menu, then the **Manage Extensions** item. This will open the **Manage** **Extensions** dialog.\n2.  In the `upgrade`.\n3.  Select **.NET Upgrade Assistant** and click **Download**:\n\n![Figure 3.15 – Visual Studio – the Manage Extensions dialog﻿](img/B19214_03_15.jpg)\n\nFigure 3.15 – Visual Studio – the Manage Extensions dialog\n\n1.  Once the extension has been downloaded, you will need to close and reopen Visual Studio to install the extension:\n\n![Figure 3.16 – Installing the .NET Upgrade Assistant VSIX](img/B19214_03_16.jpg)\n\nFigure 3.16 – Installing the .NET Upgrade Assistant VSIX\n\n1.  Click **Modify** and then follow the instructions to complete the installation.\n2.  Once the installation is complete, reopen Visual Studio.\n\nNow that the tool has been installed, we can use it to convert a Xamarin.Forms project!\nPreparing to run .NET Upgrade Assistant\nFor the remainder of this chapter, we will be using Visual Studio on Windows to migrate a Xamarin.Forms app to .NET MAUI.\nTo run .NET Upgrade Assistant, we will need a Xamarin.Forms project to upgrade. For this portion of the chapter, we will use the Xamarin.Forms app that was demoed at the Microsoft Build conference in 2019\\. The source can be found at [https://github.com/mindofai/Build2019Chat](https://github.com/mindofai/Build2019Chat), though you can find it in this book’s GitHub repository at [https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition](https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition) under the `Chapter03/Build2019Chat` folder.\nOnce you have downloaded the source, open the `BuildChat.sln` file in Visual Studio. Once the project has finished loading, make sure your configuration is correct by running the app first. You should see a screen that looks like this on Android:\n![Figure 3.17 – The original app on Android](img/B19214_03_17.jpg)\n\nFigure 3.17 – The original app on Android\nNow that we have confirmed that the original app runs, we can follow these steps to prepare for running .NET Upgrade Assistant:\n\n1.  Right-click the `BuildChat` solution node in **Solution Explorer** and select **Manage NuGet Packages** **for Solution…**:\n\n![Figure 3.18 – Solution context menu](img/B19214_03_18.jpg)\n\nFigure 3.18 – Solution context menu\n\n1.  In the **NuGet – Solution** window that opens, select the **Updates** tab:\n\n![Figure 3.19 – The NuGet – Solution window](img/B19214_03_19.jpg)\n\nFigure 3.19 – The NuGet – Solution window\n\n1.  Click the **Select all packages** checkbox, then click **Update**.\n2.  Visual Studio will prompt you with a preview of all the changes that will be made. Click **OK** once you have reviewed them.\n3.  Visual Studio will then prompt you to accept the license terms for packages that have them. Once you have reviewed the license terms, click **I Accept**.\n4.  After updating, you may still have a **gold bar** indicator in the Visual Studio window from running the application earlier. You can safely dismiss the message by clicking the **X** button on the right:![Figure 3.20 – Xamarin.Forms version gold bar](img/B19214_03_20.jpg)\n\nFigure 3.20 – Xamarin.Forms version gold bar\n\n1.  Once the packages have been updated, let’s make sure the app is still working by running it again. You should get a build error like the following:\n\n![Figure 3.21 – Error after upgrading packages](img/B19214_03_21.jpg)\n\nFigure 3.21 – Error after upgrading packages\n\n1.  To resolve this error, in `BuildChat.Android` project, then press *Alt* and *Enter* at the same time to open the project properties page.\n2.  Use the `Android 8.1 (Oreo)` to `Android 10.0`.\n\nGoogle Play support\nYou may get a warning about Google Play requiring new apps and updates to support a specific version of Android. To remove that warning, just set **Target Framework** to the version indicated in the warning message.\n\n1.  Visual Studio will prompt you to confirm the change as it has to close and re-open the project. Select **Yes**.\n2.  Visual Studio may also prompt you to install the Android version if you haven’t installed it. Follow the prompts to install the Android version.\n3.  Attempting to run the project again yields a new set of errors:\n\n![Figure 3.22 – Missing packages error](img/B19214_03_22.jpg)\n\nFigure 3.22 – Missing packages error\n\n1.  To resolve this error, right-click the `BuildChat.Android` project and select **Unload Project**. The project file should open in Visual Studio automatically.\n2.  Locate `<ItemGroup>` in the file with `<PackageReference>` items and make the changes highlighted in the following snippet:\n\n    ```", "```cs\n\n    You could also use Visual Studio’s NuGet Package Manager to add these packages.\n\n     3.  Save and reload the project before trying to run it again. Since the project was unloaded, you will need to set the `BuildChat.Android` project as the startup project again.\n\nYou should be able to run the application at this time since some warnings can be ignored. If not, review the previous steps to make sure you made all the changes correctly. At this point, we are ready to run the upgrade assistant to convert from Xamarin.Forms into .NET MAUI.\nTreat warnings as errors\nIf you have the project option to treat warnings as errors set to anything other than none, then the warnings will prevent you from running the app. Set the option to none to allow the app to run. The option defaults to none.\nRunning .NET Upgrade Assistant\nRunning .NET Upgrade Assistant from within Visual Studio is a straightforward process. We will upgrade each project individually; there isn’t any method to upgrade all the projects in one go.\nUpgrading the BuildChat project\nLet’s start with the shared project, `BuildChat`, by following these steps:\n\n1.  Select the `BuildChat` project in **Solution Explorer**.\n2.  Use the context menu to select the **Upgrade** menu item:\n\n![Figure 3.23 – Upgrading the BuildChat project](img/B19214_03_23.jpg)\n\nFigure 3.23 – Upgrading the BuildChat project\nThis will open the **Upgrade** assistant in a document window:\n![Figure 3.24 – Upgrading the BuildChat project](img/B19214_03_24.jpg)\n\nFigure 3.24 – Upgrading the BuildChat project\n\n1.  Select the **In-place project** **upgrade** option.\n2.  Depending on the versions of .NET you have installed, you will be prompted to choose one. If you followed the setup instructions in *Chapter 1*, you should have the .NET 7.0 option available. Select **.NET 7.0** and select **Next**:\n\n![Figure 3.25 – Choosing the preferred target framework](img/B19214_03_25.jpg)\n\nFigure 3.25 – Choosing the preferred target framework\n\n1.  At this point, you are allowed to review the changes that will be made by expanding each node in the list. You can also choose to not upgrade certain items by removing the check in the checkbox next to that item. When you have inspected all the changes, make sure all items are checked again, then click **Upgrade selection**:\n\n![Figure 3.26 – Reviewing the upgrade](img/B19214_03_26.jpg)\n\nFigure 3.26 – Reviewing the upgrade\n\n1.  Visual Studio will start the upgrade process. You can monitor it as it completes each item:\n\n![Figure 3.27 – Upgrade in progress](img/B19214_03_27.jpg)\n\nFigure 3.27 – Upgrade in progress\n\n1.  When it’s finished, you can inspect each item to see what the result of the upgrade was:\n\n![Figure 3.28 – Upgrade complete](img/B19214_03_28.jpg)\n\nFigure 3.28 – Upgrade complete\nA white check in a green circle indicates some transformation was completed and successful, a green check with a white background means the step was skipped since nothing was needed, and a red cross (not shown) means the transformation failed. You can view the complete output from the tool by inspecting the **Upgrade Assistant** log in the output pane:\n![Figure 3.29 – Upgrade Assistant log output](img/B19214_03_29.jpg)\n\nFigure 3.29 – Upgrade Assistant log output\nDo not be concerned with the errors in the error window at this point. There will be errors until we finish upgrading the remaining projects. Now that the `BuildChat` project has been upgraded, we can upgrade the `BuildChat.Android` project.\nUpgrading the BuildChat.Android project\nThe steps for upgrading the remaining projects are largely the same – the only difference will be the steps involved in upgrading each project. The next two sections will skip the screenshots and just provide the steps. To complete the upgrade for the `BuildChat.Android` project, follow these steps:\n\n1.  Select the **BuildChat.Android** project in **Solution Explorer**.\n2.  Use the context menu to select the **Upgrade** menu item.\n3.  This will open the **Upgrade** assistant in a document window.\n4.  Select the **In-place project** **upgrade** option.\n5.  Select the **.NET 7.0** option, then select **Next**.\n6.  Review the changes that will be made by expanding each node in the list. Make sure all items are checked, then click **Upgrade Selection**.\n7.  Visual Studio will complete the upgrade process.\n\nNow that .NET Upgrade Assistant has completed the `BuildChat.Android` project, we can upgrade the `BuildChat.iOS` project.\nUpgrading the BuildChat.iOS project\nThe steps for upgrading the iOS project are largely the same – the only difference will be the steps involved in upgrading each project. To complete the upgrade for the `BuildChat.iOS` project, follow these steps:\n\n1.  Select the `BuildChat.iOS` project in **Solution Explorer**.\n2.  Use the context menu to select the **Upgrade** menu item.\n3.  This will open the **Upgrade** assistant in a document window:\n4.  Select the **In-place project** **upgrade** option.\n5.  Select the **.NET 7.0** option, then select **Next**.\n6.  Review the changes that will be made by expanding each node in the list. Make sure all items are checked, then click **Upgrade Selection**.\n7.  Visual Studio will complete the upgrade process.\n\nNow that .NET Upgrade Assistant has completed the `BuildChat.iOS` project, we can see how well it worked.\nCompleting the upgrade to .NET MAUI\nWith .NET Upgrade Assistant having done all the work it can to upgrade the projects, we can now see what is left for us to complete the upgrade to .NET MAUI.\nThe first thing we want to do is make sure that the project is clean of all the previous build artifacts. This will ensure we are referencing all the right dependencies in our build output by forcing a restore and build. The best way to accomplish this is to remove the `bin` and `obj` folders from each project folder.\nUse `bin` and `obj` folders from the `BuildChat`, `BuildChat.Android` and `BuildChat.iOS` folders, then build the solution.\nWe’ll end up with a few build errors for each project, as shown in the following figure:\n![Figure 3.30 – Package issues](img/B19214_03_30.jpg)\n\nFigure 3.30 – Package issues\nTo resolve these errors, either use Visual Studio’s NuGet Package Manager to add a reference to version 7.0.1 of the `Microsoft.Extensions.Logging.Abstractions` package to all the projects, or follow these steps to update the project files manually:\n\n1.  Select the `BuildChat` project in **Solution Explorer**.\n\n    The project file will open in a document window automatically.\n\n2.  Locate the `ItemGroup` element that contains the `PackageReference` items.\n3.  Make the changes highlighted in the following snippet:\n\n    ```", "```cs\n\n     4.  Select the `BuildChat.Android` project in **Solution Explorer**.\n\n    The project file will open in a document window automatically.\n\n5.  Locate the `ItemGroup` element that contains the `PackageReference` items.\n6.  Make the changes highlighted in the following snippet:\n\n    ```", "```cs\n\n     7.  Select the `BuildChat.iOS` project in **Solution Explorer**.\n\n    The project file will open in a document window automatically.\n\n8.  Locate the `ItemGroup` element that contains the `PackageReference` items.\n9.  Make the changes highlighted in the following snippet:\n\n    ```", "```cs\n\nNow that we have added the required package references, we can try building the app again. After this build, we’ll get two new errors:\n![Figure 3.31 – Namespace does not exist errors](img/B19214_03_31.jpg)\n\nFigure 3.31 – Namespace does not exist errors\nThese two errors show two areas that the upgrade assistant did not upgrade. Luckily, we covered how to upgrade these two files easier in this chapter. Let’s upgrade them again, starting with the `BuildChat.Android` project.\nOpen the `MainActivity.cs` file and make the changes highlighted in the following code:\n\n```", "```cs\n\n That should complete the changes needed for the Android project. Now, to upgrade the iOS project, open the `AppDelegate.cs` file in `BuildChat.iOS` and update it so that it matches the following:\n\n```", "```cs\n\n The final change for the iOS project is to open the `Info.plist` file and change the `MinimumOSVersion` property to `15.2`. To make this change, use `Info.plist` file and make this change, follow these steps:\n\n1.  Select the `Info.plist` file in the `BuildChat.iOS` project.\n2.  Use the context menu (right-click) and select **Open With…**.\n3.  In the **Open With** dialog, select **Generic Plist Editor**, then select **OK**:\n\n![Figure 3.32 – Opening the Info.plist file](img/B19214_03_32.jpg)\n\nFigure 3.32 – Opening the Info.plist file\n\n1.  Find the entry labeled `Minimum system version` and change the value from `8.0` to `15.1`:\n\n![Figure 3.33 – Changing the minimum system version](img/B19214_03_33.jpg)\n\nFigure 3.33 – Changing the minimum system version\nGreat – that should complete the changes needed to get the app running as a .NET MAUI application! The following are the before and after screenshots of the application; *before* is on the left and *after* is on the right:\n![](img/B19214_03_34.jpg)\n\nFigure 3.34 – Xamarin.Forms versus .NET MAUI\nThere are some visual changes between Xamarin.Forms and .NET MAUI, and you can tweak the .NET MAUI settings for the layouts and controls to get a very similar output.\nSummary\nIn this chapter, we focused on upgrading a Xamarin.Forms app to .NET MAUI. We learned how to upgrade the project files from .NET Framework to SDK-style projects, application startup files, XAML views, and C# files needed for .NET MAUI. We started by doing this manually to learn about all the required steps and changes. We ended this chapter by using .NET Upgrade Assistant to make many of the changes for us. We also learned how to upgrade to the Single Project format, which is the default for .NET MAUI. Now, we can pick the best method for the project we are upgrading.\nWhile we covered a lot in this chapter, it was not exhaustive. There is a lot of variation in different projects, from NuGet package dependencies and vendor-provided controls to customizations using renderers and effects. The app you are upgrading may use one or all of these, and you can find additional help on the Microsoft Learn site for upgrading Xamarin.Forms to .NET MAUI: [https://learn.microsoft.com/en-us/dotnet/maui/migration/](https://learn.microsoft.com/en-us/dotnet/maui/migration/).\nIf you are interested in seeing the `BuildChat` app fully functional, try using .NET Upgrade Assistant on the service that was also built for the 2019 Microsoft Build conference. You can find the source on GitHub at [https://github.com/mindofai/SignalRChat/tree/master](https://github.com/mindofai/SignalRChat/tree/master). You could also use ChatGPT to help you build the service yourself using Azure Functions and SignalR.\nIn the next chapter, we will build an app that displays news articles using the new .NET MAUI Shell.\n\n```", "```cs\n\n```"]