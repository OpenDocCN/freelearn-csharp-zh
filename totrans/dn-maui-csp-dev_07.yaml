- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we’ve been working with one page at a time, with no way to get to
    a page except by setting it in `AppShell.xaml`. Of course, this will not do for
    a real application, so in this chapter, we’ll look at various options for navigating
    from page to page. As you’ll see, .NET MAUI uses *shell navigation*, a process
    we’ll look at in some depth.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the TabBar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the About and Buddies pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shell navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing values from page to page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the most out of this chapter, you’ll need a copy of Visual Studio. The
    source code for the completed code shown in this chapter can be found here: [https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Navigation](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/Navigation).
    If you want to follow along, start with the code from the completion of [*Chapter
    6*](B19723_06.xhtml#_idTextAnchor115).'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the TabBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ForgetMeNot’s principal form of navigation will be the `TabBar control`. A
    Tab Bar is a way to jump to a specific page without going through other pages.
    It consists of icons, and sometimes descriptive text, across the bottom of every
    page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Tab Bar in the completed project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B19723_Figure_7.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Tab Bar in the completed project
  prefs: []
  type: TYPE_NORMAL
- en: The four tabs at the bottom, as shown in *Figure 7**.1*, will take the user
    directly to the respective page.
  prefs: []
  type: TYPE_NORMAL
- en: The Home page
  prefs: []
  type: TYPE_NORMAL
- en: Here you see the tabs we created on `MainPage,` which we created in [*Chapter
    4*](B19723_04.xhtml#_idTextAnchor054), one of which we’ve titled **Home**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You create `TabBar` in `AppShell.xaml`. Within the `TabBar` tags, you provide
    one `ShellContent` element for each page. `ShellContent` has a `Title` property
    (the text displayed), an `Icon` property (the image displayed), and `ContentTemplate`,
    which specifies the content for this tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to create the pages that each `ContentTemplate` points to so that
    we can see `TabBar` at work.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the About and Buddies pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see this navigation work, you’ll need to add the missing pages: **About**
    and **Buddies**. Creating the **About** page is very straightforward. Right-click
    on the **View** folder and choose **Add New Item**. If needed, expand the **AddNewItem**
    dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the left panel, choose `AboutPage.xaml`, as shown in *Figure 7**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Creating AboutPage'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B19723_Figure_7.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Creating AboutPage
  prefs: []
  type: TYPE_NORMAL
- en: The **About** page is very simple and does not require any new types of controls.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling the About page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s assemble the `BindingContext`. Finally, we’ll need `ViewModel`. Eventually,
    the **About** page will ask the service for its version number, but for now, we’ll
    hardcode that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The code-behind file looks like this (for now):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And, finally, `ViewModel` looks like this (for now):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The **About** page currently looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – The About page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B19723_Figure_7.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – The About page
  prefs: []
  type: TYPE_NORMAL
- en: That will give us something to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need a **BuddiesPage**, that is, a page that lists all the user’s friends
    and relatives. Each Buddy will have a list of **preferences** that we can use
    when it is time to buy them a present.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we’ll just use the out-of-the-box page that we get when we right-click
    on **View** and add a new **.NET MAUI XAML** page, as shown in *Figure 7**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Creating the Buddies page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B19723_Figure_7.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Creating the Buddies page
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `BuddiesPage.xaml` and make one small change. Where the `Text` field
    of the `Label` control says, `Welcome to .NET MAUI!` change it to `Buddies Page`
    so that we’ll know where we are when we navigate there. If you want, add a space
    between the words in the title as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, create `BuddiesViewModel` by right-clicking on the **ViewModel** folder
    and choosing **Add** | **Class**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to tell the app where to start. We’ll do that in `App.xaml.cs`
    where we will set `MainPage` to be the new `AppShell` (which is how we’ll kick
    off the program and set ourselves up for shell navigation as described):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what `AppShell.xaml` should look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: One more thing. Notice that each tab has an icon. To make that work and look
    as intended, you’ll either need to find icons online or get them by checking out
    the source code for this chapter in the `Navigation` branch.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, simply copy the images to the `resources\image` folder of your
    project, replacing the three dots with the full path on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Image support
  prefs: []
  type: TYPE_NORMAL
- en: Those of you who have worked with `Xamarin.Forms` will be delighted to know
    that the days of creating different size images and distributing them to the various
    folders for both iOS and Android are now over. Put the `.svg` file into the `images`
    folder and .NET MAUI will do all the rest for you! (You can use a `.png` file,
    but it won’t scale as nicely. To make the point, I made our flower image a `.``png`
    file.)
  prefs: []
  type: TYPE_NORMAL
- en: Run the application and click on the various tabs. You should see it navigating
    to the various pages we’ve created. Notice in *Figure 7**.5* that the current
    tab *lights up* – you get the effect for free and you do not have to create two
    icons, one for each of the currently selected and not selected icons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The Home tab “lit up”'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B19723_Figure_7.5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – The Home tab “lit up”
  prefs: []
  type: TYPE_NORMAL
- en: Now that our tabs and pages are in place, it is time to look at how you move
    from one page to another when there aren’t tabs for the pages you want to navigate
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Shell navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That would be all you need to know about navigation if your app was just going
    to have the four pages that we’re accessing by the TabBar. Of course, you’ll almost
    certainly have more pages than that, and you’ll want a way to navigate from one
    page to another.
  prefs: []
  type: TYPE_NORMAL
- en: To see navigation from one page to another without using `TabBar`, we’ll need
    another page to navigate to. Let’s create the **BuddyDetailsPage**, which we’ll
    navigate to from the **Buddies** page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, take the out-of-the-box page, but change `Label` to say `Buddy`
    `Details Page`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, return to the `Button` that says `Go to details` and give it the `GoToDetailsCommand`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `GoToDetails` command. The goal of our handler will be to navigate to
    **BuddyDetails**. We do that with *shell navigation*. Here’s the code to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: BindingContext
  prefs: []
  type: TYPE_NORMAL
- en: Remember that for the `GoToDetails` command to work, you must bind the XAML
    to `ViewModel` by setting `BindingContext` in the code-behind file.
  prefs: []
  type: TYPE_NORMAL
- en: In this common construct, you pass in the page name to the `GoToAsync` static
    method on `Shell.Current`. The key question is, *how does it know what buddydetailspage
    is*, *given that* `buddydetailspage` *is a string?* The answer to that lies in
    *routing*, which we’ll cover next.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In .NET MAUI, you register your routes in `AppShell.xaml.cs`. For example,
    to connect the `buddydetailspage` string to the actual `BuddyDetailsPage,` you
    would add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll create a routing entry for all of the pages, including the ones we can
    access through tabs. This will give us the greatest flexibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now the routing works as if by magic. You tell it where you want to go, passing
    in the route, and .NET MAUI handles the navigation. Start up the program if it
    isn’t already running and tap on the **Buddies** tab. On the **Buddies** page,
    tap on the **Details** button, and hey presto! You should be on the **Buddy Details**
    page. Easy peasy.
  prefs: []
  type: TYPE_NORMAL
- en: It’s great to be able to move from one page to another, but often the first
    page has data that the second page needs. So, let’s look at how you send that
    data to the second page.
  prefs: []
  type: TYPE_NORMAL
- en: Passing values from page to page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When navigating from one page to another, you’ll often want to pass in a value.
    There are a few ways to do this; here are the two most common:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `url (?)` syntax as you might with a URL to navigate to a page on
    the web
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using navigation parameters with a dictionary
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passing values with the url (?) syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s return to the `Buddies` page. Right now, the `Button` has a `GoToDetailsCommand`command.
    But the **Details** page needs to know which Buddy to show details about.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll modify `RelayCommand` in `ViewModel` to pass in `BuddyId`. To make this
    work, we need a `Buddy` object (which will have the `Id`). However, Buddy is just
    one of the types of users of this program, so let’s start by defining the `User`
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[1] Here is the `Id` property we’ll need.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] A user may have a collection of `buddies` (we’ll come back to this).'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] A user may have a collection of `invitations`, which are sent out to potential
    `buddies` (we’ll come back to this too).'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] The user has a list of `preference` objects, as we’ve seen earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Buddy` class derives from the `User` class. Here it is in full, though
    we won’t be using most of these properties for now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Inheriting ObservableObject
  prefs: []
  type: TYPE_NORMAL
- en: Notice that `Buddy` is not marked with the `ObservableObject` attribute. That
    is because it inherits from `User`, which is marked as `ObservableObject`.
  prefs: []
  type: TYPE_NORMAL
- en: We will want to give the new page the `Id` of the `Buddy` object we’re passing
    in. We can do that using either of the methods for passing data (for example,
    the URL approach or the dictionary).
  prefs: []
  type: TYPE_NORMAL
- en: Passing the Buddy Id
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Returning to the `Id` to the `Id` using the `?` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to pass two properties, for example, `Id` and `Name`, you concatenate
    them with `&&`. This should all be familiar to you from URLs you might use in
    a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This won’t work if we don’t have `Id` and `Name` in `BuddiesViewModel`, so
    let’s add that here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The call to `GoToAsync` will change pages to `BuddyDetailsPage` and send the
    parameters to the associated `ViewModel` (`BuddyDetailsViewModel`).
  prefs: []
  type: TYPE_NORMAL
- en: QueryProperty
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We mark up the receiving `ViewModel` with the `QueryProperty` attribute along
    with the name of the property to associate it with `ViewModel` and the string
    used in the `GoToAsync` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make that clearer, let’s create `BuddyDetailsViewModel`, and mark it as
    `ObservableObject`. We’ll give it two properties: `Id` and `Name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We want the first parameter we passed in (`id`) to be assigned to the `Id`
    property, and we want the second parameter we passed in to be assigned to the
    `Name` property. For that, we use the `QueryProperty` attribute (placed above
    the class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now that you are comfortable with the two ways to pass data, let’s take a look
    at how we can integrate that into the flow of the program.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the **Buddies** page, the user clicks on **GoToDetails**.
  prefs: []
  type: TYPE_NORMAL
- en: This fires the `GoToDetails` relay command in `BuddiesViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'That method calls the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This call to `GoToAsync` transfers us to `BuddyDetailsPage`, but passes in the
    two parameters (`Id` and `Name`) to `BuddyDetailsViewModel`!
  prefs: []
  type: TYPE_NORMAL
- en: '`BuddyDetailsViewModel` parses the `QueryProperty` attributes and distributes
    the values to the associated properties.'
  prefs: []
  type: TYPE_NORMAL
- en: The net effect is that you are now on `BuddyDetailsPage` with the `Id` and `Name`
    properties in the associated `ViewModel` populated with values.
  prefs: []
  type: TYPE_NORMAL
- en: To see this at work, go to the `BuddyDetailsPage.xaml` file and add two Label
    controls, one bound to `Id` and the other to `Name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the XAML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Remember to set `BindingContext` in the code-behind page.
  prefs: []
  type: TYPE_NORMAL
- en: Run the program and click on the **Buddies** tab. On the **Buddies** page, click
    on **GoToDetails** You will be transferred to the **BuddiesDetails** page, and
    the two values will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Stop right there
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you understand how all this hangs together before going ahead. If
    necessary, re-read starting with the *Passing values from page to* *page* section.
  prefs: []
  type: TYPE_NORMAL
- en: Passing values with a dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At times, you will want to pass an entire object (or more) to the receiving
    `ViewModel`. You do this by instantiating a dictionary where the key is a string,
    and the value is an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s revise `GoToDetails` to take an entire `Buddy` object. First, we need
    to create a `Buddy` object and put it into `BuddyViewModel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create our dictionary. We can pick any arbitrary string as
    the key, and pass in the `Buddy` object (`rodrigo`) that we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, we are redirected to the `Buddy` object itself is passed in. At
    the top of the `Buddy` object field to assign the incoming `Buddy` to, and we
    use the key from the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll add three properties for the page to bind to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `website` is a nullable string. This is because it is marked as
    `nullable` in the `Buddy` definition. To make this work, you’ll want to enable
    `nullable`, at least on this page if not for the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to manage the incoming `Buddy` object is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you go to `BuddyDetailsPage.xaml` and add a label whose text binds to `website`,
    the result will be as shown in *Figure 7**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – The Buddy Details page after passing in the Buddy object'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B19723_Figure_7.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – The Buddy Details page after passing in the Buddy object
  prefs: []
  type: TYPE_NORMAL
- en: Putting it together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This can, at first, be confusing enough that it is worth going through the flow
    step by step.
  prefs: []
  type: TYPE_NORMAL
- en: In `BuddiesPage,` the user clicks on `GoToDetailsCommand`, which is handled
    in `BuddiesViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: In `ViewModel`, we have a `Buddy` property (as defined in the `Models` folder).
    The identifier for that `Buddy` object is `rodrigo`, and three of its fields are
    initialized.
  prefs: []
  type: TYPE_NORMAL
- en: We then assemble a dictionary to use as the parameter to the `GoToAsync` method.
    We pass in the name of the page we want to navigate to (as recorded in the `AppShell.xaml.cs`
    file in the `Routing.RegisterRoute` method).
  prefs: []
  type: TYPE_NORMAL
- en: We also pass in the dictionary we just created.
  prefs: []
  type: TYPE_NORMAL
- en: .NET MAUI navigates to the page, and our dictionary is routed to the associated
    `ViewModel` (`BuddyDetailsViewModel`). There, the `QueryProperty` attribute associates
    the `MyBuddy` property with `queryid`, which we used in `BuddiesPage`.
  prefs: []
  type: TYPE_NORMAL
- en: The property it matches is a `Buddy` type, so we can set the local properties
    with the properties from the `Buddy` object passed in (`value`).
  prefs: []
  type: TYPE_NORMAL
- en: Since `BuddyDetailsPage` has `Labels` that bind to these properties in `ViewModel`,
    the right things are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have focused on how you can move from one page to another
    without using `TabBar`, by using shell navigation and routesinstead.. We also
    looked at how you can pass data from the first page to the second using either
    URL syntax or by passing a dictionary containing the object or values you want
    to send.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will examine storing and retrieving data.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where do you define `TabBar`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three properties of `TabBar ShellContent`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where are routes registered?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the method for navigating to another page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the ways we’ve seen to pass data to a page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You try it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modify `RelayCommand Submit` in `LoginViewModel` to display the progress bar
    and then navigate to the **Buddies** page. Pass in the username and password,
    first as strings, then as a dictionary. Temporarily modify the **Buddies** page
    to display the values passed in.
  prefs: []
  type: TYPE_NORMAL
