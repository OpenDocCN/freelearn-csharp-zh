- en: AR for Retail with Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will work with Vuforia, one of the most well-known AR SDKs
    that offers a wide variety of options (working with and without image targets,
    web and local recognition, and more), as well as examples that can be directly
    downloaded and tested. It has also the advantage of being integrated into the
    Unity editor, making it easier to develop with it.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter's first main goal is to introduce you to the Vuforia SDK and how
    it works. Among its many features, you will learn how to use spatial recognition
    and augmentation to place 3D objects in the real world without the need for previously
    printed image targets. You will learn how to use Vuforia fusion with and without
    ARCore and you will acquire the skills to use Vuforia's elements in Unity. This
    chapter's second goal is to present you with an attractive use of AR in retail
    to show potential customers products such as furniture, paintings, decorations,
    and more in their own spaces. With these kinds of applications, they can decide
    on which elements they want to buy and how they will look in their own homes,
    making them more involved in the buying process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for retail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Vuforia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AR on the go – using Ground Plane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AR furniture viewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Unity 3D-supporting computer (see the latest requirements here: [https://unity3d.com/unity/system-requirements](https://unity3d.com/unity/system-requirements)). This
    chapter's example project has been developed on a Windows 10 x 64 computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity 3D (2019.1.2f1 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Visual Studio Community 2017 (included in Unity installation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest version of Vuforia that's included with Unity 3D (8.3.8 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mobile device supporting Vuforia Fusion (see [https://library.vuforia.com/content/vuforia-library/en/articles/Solution/ground-plane-supported-devices.html](https://library.vuforia.com/content/vuforia-library/en/articles/Solution/ground-plane-supported-devices.html)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resources and the code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter06](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for retail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Retail is one of the fields where AR offers a wider range of possibilities,
    from satisfying and engaging the consumer in order to reduce returned products,
    to linking products with social media or personalizing the shopping experience.
    Some examples of this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Trying products before buying them. This is where users visualize clothes, shoes,
    glasses, or even makeup before actually buying the products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeing how a product such as a piece of furniture, a piece of art, or even wall
    paint looks in their homes with AR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the store, seeing extra information about a product, such as comments and
    reviews, before buying it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a commercial center, receiving geopositioned information and discounts from
    the stores in it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In supermarkets or big stores, orienting customers through sections to the product
    they want.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This field also allows us to display AR on various hardware, including customers'
    mobile devices, tactile screens, and virtual fitting rooms. Therefore, in the
    past few years, AR solutions in retail have multiplied, especially since ARKit
    (from Apple) and ARCore (from Google) appeared on the market. These two pieces
    of software allow us to easily recognize the environment using the camera and
    sensors of the mobile devices and place virtual elements over flat surfaces such
    as the ground or tables.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take advantage of Vuforia Fusion, Vuforia SDK's ground
    detection features, which can also be combined with ARCore, to place virtual objects
    in our surroundings without any kind of printed target, creating an AR furniture
    viewer that customers can use to see how the furniture fits in their homes.
  prefs: []
  type: TYPE_NORMAL
- en: For our project, we will be using the real catalog pages and 3D models from
    the company Euro Seating at [https://www.euroseating.com/en/](https://www.euroseating.com/en/),
    a seating manufacturer present in more than 100 countries all over the world.
    Using their high-quality 3D models and real catalog will help us visualize this
    project as a real-life AR application that can be used in any other marketing
    context. The models and images that are used in this chapter have been handed
    over by the company for their use in the context of this book.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by exploring Vuforia and how to integrate it into our Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initially developed by Qualcomm, and currently run by PTC, Vuforia is one of
    the oldest and most well-known AR SDKs. It's one of the most stable and best-performing
    pieces of software on the market and, along with ARKit and ARCore, one of the
    favorite choices for AR developers.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia offers a wide variety of features, including 2D images and 3D objects
    tracking, markerless AR where there is no need for a reference image to launch
    AR content (the one we will be using in this chapter) and barcode-like markers
    called Vumarks. It provides multiple examples and extra features, such as virtual
    buttons, runtime image target creation, and background video texture manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: Like other AR software, Vuforia requires a license for it to be deployed on
    mobile devices. Vuforia offers a free development key generator, which will have
    to be switched to a deployment key when the app is in the production stage. You
    can consult its pricing options on their web page: [https://developer.vuforia.com/pricing](https://developer.vuforia.com/pricing).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vuforia SDK can be downloaded for Android and iOS, and can also be used
    in the Unity 3D platform. Since the Unity 2017.2 version, it comes directly integrated
    into the Unity editor, just like any other main asset, and it has to be installed
    and activated inside it. Now, we''ll incorporate Vuforia into a new project and
    set it up so that we can build it on an Android device. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you first installed Unity on your computer (see [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml),
    *Introduction to Unity for AR Development*), you should have selected the option
    of adding the Vuforia module. If you didn''t install it or you are in doubt, open
    the Unity Hub, go to the Installs tab, and check the installed modules at the
    bottom of your Unity version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d508932b-5c92-4d39-9148-71a0b3e95384.png)'
  prefs: []
  type: TYPE_IMG
- en: Current Unity installation with Vuforia support
  prefs: []
  type: TYPE_NORMAL
- en: 'If Vuforia is not there, click on the top-right button and click on Add Modules.
    Select Vuforia and install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb80c325-c67c-4bac-b5e2-7761d88879eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding new modules to the current Unity installation using Unity Hub
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia usually comes included with stable versions; if you are trying a beta
    version or a very recent version of Unity, it's possible that Vuforia might not
    appear among the options and you will have to install a previous version to use
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the Unity Hub. On the Projects tab, click on NEW:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc7350e1-568b-44eb-bba2-da9e090d9c9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new project in the Unity Hub
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the Project Name and Location fields and click on CREATE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b15fd64e-6aa2-406c-8107-65cec09c7a1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new 3D project
  prefs: []
  type: TYPE_NORMAL
- en: 'Click *Ctrl* + *N* or go to File|New Scene. Now, press *Ctrl* + *S* or go to
    File|Save. Name the file `OnTheGo` and save it in the `Scenes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36c23a34-c9a1-477e-bc02-01bbf42f016e.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new scene for the current project
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also delete the SampleScene that comes with the project from the Project
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6510b92-d5c7-49bd-bb29-ea3fbbbece5d.png)'
  prefs: []
  type: TYPE_IMG
- en: SampleScene is no longer needed
  prefs: []
  type: TYPE_NORMAL
- en: 'AR requires a special camera that retrieves the physical camera feed and processes
    it so that we can integrate the virtual elements into the real image stream. Vuforia
    provides an asset called AR Camera that does this for us. Delete the existing
    Unity Main Camera, right-click on the Hierarchy window, and select Vuforia Engine|AR
    Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74044d09-e811-45ad-8e41-db04ea5d9263.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding the AR Camera to the scene
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it''s the first time we''re using Vuforia in the project, a message will
    appear asking us to import Vuforia''s assets. Click Import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4a9095b-3f7a-4fb6-81c9-ff183815f204.png)'
  prefs: []
  type: TYPE_IMG
- en: Message to import Vuforia and its assets into the project
  prefs: []
  type: TYPE_NORMAL
- en: A new folder called `Vuforia` will appear in the Project window, inside the
    `Assets` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Place the Directional Light inside the AR Camera so that the light moves along
    with the camera.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we have to enable Vuforia in the Player Settings so that we can use it
    in the scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1b38d5ea-c50c-4bbe-b546-58cd37a078d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia Behaviour component detecting that Vuforia isn't enabled yet
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* or go to File|Build Settings... to open the Build
    Settings window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before anything else, click on Add Open Scenes to include our scene in the building
    scenes list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, switch platforms by clicking on Android and pressing Switch Platform in
    the bottom-right corner. With this, we will have configured our project so that
    it can be built on an Android device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f964b45-5803-437a-b2e5-435d4381b9b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Build Settings panel, allowing us to add new scenes, switch platforms, and access
    Player Settings
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on Player Settings... to open a new window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the Company Name and Product Name (the name the app will have when we
    install it on a device).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the last tab, XR Settings, enable Vuforia Augmented Reality Supported to
    allow the use of Vuforia in this project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43780ea1-a74d-45fb-9c87-91415d4034da.png)'
  prefs: []
  type: TYPE_IMG
- en: Player Settings with Company Name and Product Name filled and Vuforia activated
    in the XR Settings
  prefs: []
  type: TYPE_NORMAL
- en: 'A new message will appear indicating that XR is not supported by the Vulkan
    graphics API. To fix this, open the Other Settings tab and remove Vulkan from
    Graphics APIs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/579fd8a4-2d31-465f-be42-5e36ed52bbd9.png)'
  prefs: []
  type: TYPE_IMG
- en: Removing Vulkan from the Graphics API under Other Settings|Rendering
  prefs: []
  type: TYPE_NORMAL
- en: 'Below this, fill in the Identification section''s Package Name and minimum
    API Level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dde477a2-98b0-42cb-be27-d4b364d9cd60.png)'
  prefs: []
  type: TYPE_IMG
- en: Updating the Package Name and Minimum API Level under Other Settings|Identification
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, Vuforia supports Android 4.4 and above and iOS 11 and above. However,
    we recommend setting the Minimum API Level to `5` to ensure the devices running
    the apps are powerful enough to do so. You can check the minimum requirements
    for Vuforia here: [https://library.vuforia.com/articles/Solution/Vuforia-Supported-Versions](https://library.vuforia.com/articles/Solution/Vuforia-Supported-Versions).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This step is not always required but it might be the case that the Vuforia
    version that''s been installed with your Unity version is not the latest one.
    If so, when selecting the ARCamera, a message will appear on the Vuforia Behaviour
    component indicating that a new version is available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c504aca-4367-4d4f-b50a-b7a91bf5a27c.png)'
  prefs: []
  type: TYPE_IMG
- en: Link to the new Vuforia version in the Vuforia Behaviour component of the ARCamera
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the link to download the executable and follow the steps to install
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ce54be6-2c8b-45c1-a4e0-c813926ae9a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia AR Setup Wizard
  prefs: []
  type: TYPE_NORMAL
- en: 'When updating Vuforia, make sure you install it in your Unity root folder,
    usually in `C:/Program Files/Unity/Hub/Editor/{unity_version_name}`, and close
    your currently running Unity session if asked. If a message appears asking you
    to update your project, click Update. Vuforia will now be up to date in your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0daff2ee-d0b9-4f46-a802-c6dafcb306aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Update message from Vuforia Engine
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to integrate Vuforia into a new project, we will start
    using its Ground Plane feature to create an app that detects flat surfaces and
    places 3D content on them.
  prefs: []
  type: TYPE_NORMAL
- en: AR on the go – using Ground Plane
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vuforia's main feature that's used to place virtual objects on the user's environment
    in real time is called **Ground Plane***.* We are going to use this feature to
    create an app to place 3D content on horizontal surfaces of the real world, such
    as floors and tables.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with Vuforia 7, the SDK introduced a new capability, called **Vuforia
    Fusion**, to improve the performance of spatial recognition according to each
    device's features, including cameras, sensors, chipsets, and internal AR frameworks. Vuforia
    Fusion tries to detect integrated frameworks such as ARKit (iOS) or ARCore (Android),
    which offer the best performance. If none are found, it tries to use VISLAM and
    SLAM, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simultaneous localization and mapping** (**SLAM**) algorithms estimate the
    pose of an object and the map of the surrounding environment at the same time.
    **visual-inertial simultaneous localization and mapping** (**VISLAM**) is Vuforia''s
    algorithm that combines **v****isual odometry** (**VIO**) and SLAM to improve
    the latter''s performance.'
  prefs: []
  type: TYPE_NORMAL
- en: Although the list increases quickly, not all devices support Vuforia's Ground
    Plane yet. In general, if the running device supports ARCore or ARKit, it will
    work. If not, it will depend on internal AR-enabling technologies. Vuforia keeps
    a list of the currently supported devices on its web page: [https://library.vuforia.com/articles/Solution/vuforia-fusion-supported-devices.html](https://library.vuforia.com/articles/Solution/vuforia-fusion-supported-devices.html).
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, we are going to learn how to enable ARCore in Vuforia.
    If your device doesn't support ARCore, you can directly skip to the next subsection.
    If you are planning to distribute your app among ARCore-supporting and -non-supporting
    devices, and want to test Vuforia's VISLAM performance first, skip this step and
    do this after testing the final app to see the difference.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling ARCore in Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to learn to enable ARCore for Vuforia; if your
    device supports ARCore, you will benefit from using it along with Vuforia, as
    the resulting app will detect flat surfaces faster and with more precision. To
    enable ARCore for Vuforia inside Unity, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of the ARCore library from Google's repository.
    The global link is `https://dl.google.com/dl/android/maven2/com/google/ar/core/<ARCORE_VERSION>/core-<ARCORE_VERSION>.aar`.You
    can check the latest version available at [https://github.com/google-ar/arcore-unity-sdk/releases](https://github.com/google-ar/arcore-unity-sdk/releases).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the time of writing this chapter, the current version is 1.9.0, so the link
    will be [https://dl.google.com/dl/android/maven2/com/google/ar/core/1.9.0/core-1.9.0.aar](https://dl.google.com/dl/android/maven2/com/google/ar/core/1.9.0/core-1.9.0.aar).
  prefs: []
  type: TYPE_NORMAL
- en: 'In Unity, in the Project window, right-click on the `Assets` folder and press
    Create|Folder. Name it `Plugins` and create another one called `Android` inside
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ad90606-9b4f-4b74-bb94-7e0d9b438e23.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new folder inside Assets
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the downloaded `.aar` file inside the `Android` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23a90f03-0c87-46b4-b1d6-023c21f5ef15.png)'
  prefs: []
  type: TYPE_IMG
- en: The ARCore plugin located inside the Android folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the file and verify that Android is checked under Select platforms for
    plugin in the Inspector window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b798ee63-d31a-4fbf-8848-5b125b38429d.png)'
  prefs: []
  type: TYPE_IMG
- en: ARCore library's properties in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the ARCamera and click on the Open Vuforia Engine configuration button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/805eb651-813f-452e-9161-4970e8768729.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening Vuforia Engine configuration from the ARCamera
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Device Tracker, set ARCore Requirement to Optional or Required, depending
    on your targeted user devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76fcf545-0b82-4971-9b53-e7b8b1e89db2.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting ARCore to OPTIONAL or REQUIRED
  prefs: []
  type: TYPE_NORMAL
- en: If set to OPTIONAL, when using Ground Plane, Vuforia will try to make use of
    ARCore, and if the device doesn't support it, it will switch to Vuforia's internal
    algorithms. If set to REQUIRED, the app won't work on devices that don't support
    ARCore.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have configured ARCore, we'll create an AR scene to test the Ground
    Plane feature.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Ground Plane scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The AR scene in this project will consist of the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The ARCamera, which will retrieve the physical camera's feed and process each
    frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ground Plane Finder, which is in charge of searching for horizontal surfaces
    and placing objects on them when users tap on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ground Plane Stage, which is the parent GameObject where the virtual elements
    will go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test cube, which will appear on the ground when the user taps on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We created the ARCamera element when we integrated Vuforia in Unity, so let''s
    create the rest of the elements to make the Ground Plane features work:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the Hierarchy window and select Vuforia Engine|Ground Plane|Ground
    Plane Stage. This will create the parent GameObject for the contents we want to
    show in AR. It''s represented with a visual reference of a 100 cm square to help
    with the virtual objects'' real-world scale. This reference is only visible inside
    the Unity editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36e703af-d963-496a-a503-d25139a328b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Ground Plane Stage element
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ground Plane Stage GameObject has two scripts attached to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anchor Behaviour, which determines whether the virtual objects appear attached
    to the ground or in mid-air
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default Trackable Event Handler, which is Vuforia's default script to show/hide
    elements when the target is found/lost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a virtual object to test, right-click Ground Plane Stage and create
    a 3D Object|Cube. Make sure it appears as a child of the Ground Plane Stage so
    that it''s shown/hidden when appropriate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ffe14d4-b884-4d64-963a-d756307b13a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a cube as the child of the Ground Plane Stage
  prefs: []
  type: TYPE_NORMAL
- en: 'Scale down the cube so that it''s smaller than the visual reference of the Ground
    Plane Stage. Make sure it''s visible from the ARCamera in the Game view (if not,
    move/rotate either the ARCamera or, preferably, the Ground Plane Stage until it''s
    in view):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61ba0799-3123-4c41-9a85-cc730f5dca21.png)'
  prefs: []
  type: TYPE_IMG
- en: The cube placed over the reference grid of the Ground Plane stage
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click outside the Hierarchy window and select Vuforia Engine|Ground Plane|Plane
    Finder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8473749c-717e-4faf-bf1e-9433c3f5d458.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the Plane Finder to detect the ground planes
  prefs: []
  type: TYPE_NORMAL
- en: 'This GameObject has three scripts attached to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anchor Input Listener Behaviour, which is in charge of listening for the user's
    input (tap on the screen)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plane Finder Behaviour, which is used to find horizontal surfaces to place the
    content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content Positioning Behaviour, which is used to position the content of the
    real world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the Content Positioning Behaviour script, select (or drag from the Hierarchy)
    the Ground Plane Stage inside the Anchor Stage selection box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8752691c-5284-4362-a87f-8272f642ce3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Linking the Ground Plane Stage to the Plane Finder
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on, press *Ctrl* + *S to* save the current scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our AR scene configured, we're going to add the Vuforia key,
    a necessary step that we need to take in order to build Vuforia on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vuforia requires a development/deployment key for the app to work on a real
    device. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Vuforia's developer page ([https://developer.vuforia.com/license-manager](https://developer.vuforia.com/license-manager)),
    register, and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the License Manager tab, select Get Development Key to obtain a free key
    to use while developing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it the name of your app, `AR On the Go`, read and accept the terms and
    conditions, and press Confirm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your newly created license and copy the key numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the Unity editor and select ARCamera from the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Open Vuforia Engine Configuration in the Inspector window to open
    the general Vuforia configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/211f4bd7-180b-4e05-b06a-c05d6da55533.png)'
  prefs: []
  type: TYPE_IMG
- en: ARCamera GameObject in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, paste your key into the App License Key field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b4cdedd-5a87-442a-a28a-bdf1331678b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia configuration options in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have included a Vuforia development key in our project that will let
    us build and install our app on a real device.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that when you want to upload an app to the store (Google or Apple),
    you will have to buy a deployment key according to Vuforia's plans. You can find
    the updated prices at [https://developer.vuforia.com/pricing](https://developer.vuforia.com/pricing).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will test our app in Unity to make sure everything works
    as it should.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a project in Unity, it's good practice to test it before building
    it since the building process takes time. This way, you can detect basic problems
    and errors and correct them quickly before actually trying the app on your phone.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia can't currently be built as a standalone application, but it has a script
    integrated with the ARCamera for testing purposes. When you are testing the app
    in Unity editor, it will use the computer's camera to simulate the AR. If it doesn't
    detect a camera, it will leave the background black and play the AR directly.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, when you're working with a Ground Plane project and you want
    to test the app, Vuforia won't be able to use the device's sensors to detect a
    flat surface. Instead, it offers an image target reference to simulate Ground
    Plane recognition, and when the camera detects that image, it will behave like
    it's detecting a flat surface on the phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test our app, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the PDF called `Emulator Ground Plane.pdf` at Vuforia|Databases|ForPrint|Emulator from
    the Project window. Print it and place it on the ground (you can also open the
    PDF image directly on the computer, although the size reference might not be accurate).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the play button in the top Toolbar and point the webcam to the image.
    You will see a visual mark when the software detects a surface (the target, in
    this case). Before pressing the play button, you can click the Maximize on Play button
    in the Game view''s top-right corner to see the image maximized on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e58c8cd-228b-460a-aeeb-07ada120aed8.png)'
  prefs: []
  type: TYPE_IMG
- en: Game view detecting the Ground Plane Emulator image
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the computer screen over the Game view to simulate a screen touch
    on the phone. The cube will appear over the target. Its size will depend on the
    size that you gave previously in the Unity editor (the Ground Plane Stage in Unity
    is 100 cm x 100 cm, while the printed emulator is 20 cm x 20 cm):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1276a128-54ff-4fd9-89d0-63d504191a76.png)'
  prefs: []
  type: TYPE_IMG
- en: The cube appears on the floor when clicking the Game view
  prefs: []
  type: TYPE_NORMAL
- en: If everything works as expected, we can change the cube and start shaping our
    AR app to show furniture in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AR furniture viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the main structure of the AR scene, we''ll customize the app
    to create an AR furniture viewer that allows us to place chairs in the real world.
    The app will let us do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Place a single chair on the ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate the chair to create a cinema-like scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotate the chair to adjust it to the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Adding elements to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start by adding new elements to our project and scene, including the
    3D model and a user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your own folder inside the `Assets` folder of the Project window and
    name it `@MyAssets`. Then, create three other folders called `Images`, `Models`,
    and `Scripts` inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09188c1a-37c8-4b7e-a782-7893a8826888.png)'
  prefs: []
  type: TYPE_IMG
- en: The new folders inside @MyAssets
  prefs: []
  type: TYPE_NORMAL
- en: Now, from the resources of the project, copy the models and images into their
    respective folders in the Project window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector window, change the `chair.png` and `cinema.png` images'' Texture
    Type to Sprite (2D and UI) and click Apply. This will allow us to use them as
    UI elements later. The others will be used as regular textures on planes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c14d5088-5a1c-45d8-8131-b37e843fb3b6.png)'
  prefs: []
  type: TYPE_IMG
- en: The chair.png image import settings in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: Drag the prince model from the Assets|Models|Prince folder to the Hierarchy
    window as the child of Ground Plane Stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the Cube since we don't need it anymore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scale it, rotate it, and move it until it''s facing forward, over the Ground
    Plane Stage at a convenient size (you can adapt this later when you test the app):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a8e6ba8b-af45-45c9-9aa4-8e5669deeca1.png)'
  prefs: []
  type: TYPE_IMG
- en: The prince model as the Ground Plane Stage object's child in the scene
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the UI, right-click the Hierarchy window and select UI|Button. It
    will automatically encapsulate the Button in a new Canvas element and add the
    necessary Event System to the scene too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7dbfa02f-22ae-4828-a896-a73e509e42aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a button in the Hierarchy window
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Canvas and change the parameters on the Canvas Scaler so that it
    scales up and down according to the device''s screen size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2703a80-5d9a-422b-a884-549aab5b1b42.png)'
  prefs: []
  type: TYPE_IMG
- en: New Canvas Scaler parameters to adapt the UI's size to the screen size
  prefs: []
  type: TYPE_NORMAL
- en: Select the button and delete its Text GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector window, change its name to `chair_b` to identify it, its position,
    and size using the Rect Transform component. Add the chair image to its Source
    Image in the Image component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6f897b1a-d5fb-450c-b302-cb35ad4a09fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Customizing the created button
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the button that will switch between moving a single chair and adding
    multiple chairs to form a cinema:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a205bd30-e135-4d91-af20-233bd868c1e4.png)'
  prefs: []
  type: TYPE_IMG
- en: The view of the chair and button in the Game view
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have to create a script that will contain the logic of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the logic of the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create the logic of the app by adding a new script to the project. This
    will be the script in charge of switching between one and multiple chairs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your @MyAssets|Scripts folder, in the Project window, right-click and select
    Create|C# Script. Call it `OnTheGoHandler.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4c53ee9-eb88-461e-9421-db3362b0f1ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new script in the Project window
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on it to open it in Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb1187f2-fedd-48e9-9c17-b32449ff3a98.png)'
  prefs: []
  type: TYPE_IMG
- en: The OnTheGoHandler script in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `Vuforia` library at the top of the script to use its features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the class, declare the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `chairButton` variable will correspond to the button we created in Unity.
    The `buttonSprites` array will contain the two background images for the button
    and we'll switch between them. The `contentPosBehaviour` variable comes from the
    `Vuforia` class, which is in charge of adding our virtual objects to the real
    world. We will use the `multipleChairs` Boolean to switch between the two states
    (one chair or multiple chairs). Public variables will be initialized in the Unity
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Start()` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will retrieve the `ContentPositioningBehaviour` component of the GameObject
    that contains the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `Update()` method, create a new method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When this method is called, it checks whether the current state is a single
    chair or multiple chairs. It switches the image of the UI button accordingly and
    adjusts the `DuplicateStage` parameter of the `ContentPositioningBehaviour` class
    to allow one or multiple instances of the same chair. Then, it sets `multipleChairs`
    to `true` or `false` to keep track of the current state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the Unity editor, drag the script over the Plane Finder. Alternatively,
    in the Inspector window, click on Add Component|On The Go Handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdd4e4b9-9753-4885-860f-37b065a44126.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding the created script to the Plane Finder GameObject
  prefs: []
  type: TYPE_NORMAL
- en: In the On The Go Handler script, select or drag the button to the Chair Button
    field and select the two sprites, chair and cinema, from @MyAssets|Images in that
    order (see the following screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Content Positioning Behaviour drop-down, uncheck Duplicate Stage so
    that it starts with a single chair:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38598ab4-0df9-43e8-a73b-8cfa16d2dd48.png)'
  prefs: []
  type: TYPE_IMG
- en: Assigning the corresponding elements to the OnTheGoHandler script in the Inspector
    window
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, select the button and, in the On Click () method, at the bottom, choose
    the Plane Finder and select the On The Go Handler|SwitchMultipleChairs function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/15e51237-1b5f-45b0-b17c-5345d6302a4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the OnClick() method behaviour for the button in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we add any new features, we need to build this app on a mobile device.
    Press *Ctrl* + *Shift* + *B* or go to File|Build Settings...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c7503e3f-d531-49c4-9774-df958b538755.png)'
  prefs: []
  type: TYPE_IMG
- en: Build Settings panel to build and run the app on a mobile device
  prefs: []
  type: TYPE_NORMAL
- en: 'Press Build And Run, give your `.apk` file a name, and run it on the mobile
    device. Point the camera to the ground until a little icon appears, marking the
    ground level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5fb64796-d4e5-4608-89f0-079e404b1b6a.png)'
  prefs: []
  type: TYPE_IMG
- en: The white square shows the point of the ground where the virtual objects will
    be placed
  prefs: []
  type: TYPE_NORMAL
- en: 'Move around and tap on the screen to place a chair. Now, you can walk around
    the virtual chair to see it from different angles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95a34205-8713-4bd7-9fdf-327a6bd2255d.png)'
  prefs: []
  type: TYPE_IMG
- en: The virtual red chair placed in a real environment
  prefs: []
  type: TYPE_NORMAL
- en: 'Press the button to switch to multiple-chair mode, move the camera around,
    and place multiple chairs all over the room:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53821359-3a01-4a75-9d12-8f8b08f31c81.png)'
  prefs: []
  type: TYPE_IMG
- en: Two virtual chairs, one next to the other
  prefs: []
  type: TYPE_NORMAL
- en: It's probable that, on your first attempt, the chair won't have the desired
    size or the shadows won't correspond to the real ones. Furthermore, the chair
    will always be facing forward, so you'll have to move around the room before placing
    it in the desired place. Let's improve these little details to make the app more
    appealing.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to improve the current app to make it more appealing to the
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, try adding a new Directional Light (right-click on the existing
    one and press Duplicate) and play with its Rotation, Intensity, and/or Shadow
    Type. In this case, we have placed two lights, with Rotation values of (`-30`,`-20`,`0`)
    and (`30`,`20`,`0`) respectively and with No Shadows, creating a lighter-colored
    chair:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e76034fd-6f8b-4a57-922d-d074265cfd59.png)'
  prefs: []
  type: TYPE_IMG
- en: Values of one of the Directional Lights
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s make the visual reference of the floor more visible: select the
    Plane Finder GameObject and, in the Inspector window, double-click on the DefaultPlaneIndicator
    element located in the Plane Finder Behaviour script. This will open the original
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29249900-8077-463a-a06f-7824494a0f91.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting DefaultPlaneIndicator in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Hierarchy window, select the DefaultIndicator child. Then, in the
    Inspector window, increase its size to `0.05` and change the default image to
    reticle_ground_surface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1766c05c-071f-44a6-b473-0980c9a86c39.png)'
  prefs: []
  type: TYPE_IMG
- en: The DefaultIndicator GameObject's components in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a rotation indicator to the chair so that it appears when we use
    two fingers on the screen. Right-click on the prince GameObject in the Hierarchy
    window and select 3D Object|Quad:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76d89880-1dc4-4b4f-9fab-9c7729113ac1.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Quad element child of the prince GameObject
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag the `placement_rotate` image from the Project window over the rotate GameObject
    in the Hierarchy window to convert it into its texture and set the material''s
    Rendering Mode to Cutout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e0db86f6-98c3-470b-a47e-f7d7f0213715.png)'
  prefs: []
  type: TYPE_IMG
- en: Quad's material's properties on the Inspector
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust its position and rotation so that it appears in the middle of the Ground
    Plane Stage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/657aacd3-f55e-45f7-b714-3836a4b86d60.png)'
  prefs: []
  type: TYPE_IMG
- en: The Quad in the middle of the Ground Plane around the seat
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create another script in the @MyAssets|Scripts folder. Call it `ChairHandler.cs`
    and attach it to the prince GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9569e497-f230-4335-8139-5944bd3c7768.png)'
  prefs: []
  type: TYPE_IMG
- en: The prince GameObject with the newly created script attached to it
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on the script to open it in Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f40008d1-57e8-4048-b542-f91166be209e.png)'
  prefs: []
  type: TYPE_IMG
- en: ChairHandler script in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of the class, add the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first variable refers to the Quad GameObject we created previously (with
    the rotation arrows image). The second variable controls the rotation speed of
    the chair.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Start()` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With this, we are hiding the rotate arrows until the chair is actually rotating.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, inside the `Update()` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code retrieves the touches coming from the screen. If it''s two
    touches (two fingers touching the screen) and at least one of them is moving,
    it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Makes the rotation image visible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieves the touches' positions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates the angle between the last finger position and the current one, and
    rotates the chair accordingly. When the user stops rotating the chair, the rotation
    image is hidden again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final step is to drag the Quad GameObject from the Hierarchy to the ChairHandler
    script's Rotate GO field in the Inspector window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you can directly press *Ctrl* + *B* to build and run the project or do
    so through File|Build And Run. As you can see, the mark on the ground is much
    more visible now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96e707e8-567b-498b-9fac-c60af30e0e0a.png)'
  prefs: []
  type: TYPE_IMG
- en: The new ground reference mark
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can also rotate the chair to see how it would look in its place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27609e39-b472-406f-a925-5161c2b9b1c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Rotation arrows appearing when the user rotates the chair with two fingers
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have completed the AR furniture viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have learned about one of Vuforia''s features: Ground Plane.
    We created a project that places virtual chairs in real-life scenarios and lets
    us manipulate them with touchscreens (rotate them) and through a simple UI button
    (multiply them).'
  prefs: []
  type: TYPE_NORMAL
- en: By now, you will have a better understanding of how Vuforia works, how to create
    Vuforia elements inside Unity, and how to create a wholly functional Ground Plane
    example in it. With the skills that you've acquired through this project's development,
    you can improve it by adding new 3D models, new UI elements, or updating the current
    scripts to include more features in the app.
  prefs: []
  type: TYPE_NORMAL
- en: You also have better insight into how AR can work in the retail field so that
    you can adapt the current project to fill your personal or professional needs
    in this area. As we mentioned at the beginning of this chapter and seen throughout,
    the app can easily be changed to display other types of furniture, decorations,
    carpets, or any product that you want to show over a surface and observe from
    different angles.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be exploring Vuforia's possibilities even further
    by looking at Image Targets and deploying the app inside Moverio AR glasses.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From here, you can try to use Vuforia's Mid Air option, which, instead of placing
    the objects attached to the ground, places them at a distance from it. This can
    be useful for placing objects on walls, such as frames, pictures, and so on, or
    when working with flying objects such as drones. Their use is very similar; instead
    of creating a Plane Finder and Ground Plane Stage, you create a Mid Air Positione*r* and Mid
    Air Stage.
  prefs: []
  type: TYPE_NORMAL
- en: You can also download the Vuforia core samples from the Unity Asset Store ([https://assetstore.unity.com/packages/templates/packs/vuforia-core-samples-99026](https://assetstore.unity.com/packages/templates/packs/vuforia-core-samples-99026)),
    which includes a full example of the Ground Plane and its features.
  prefs: []
  type: TYPE_NORMAL
