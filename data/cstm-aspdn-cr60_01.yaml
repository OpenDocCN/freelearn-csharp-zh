- en: '*Chapter 1*: Customizing Logging'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 1 章*：自定义日志记录'
- en: In this chapter, the first in this book about customizing **ASP.NET** **Core**,
    you will see how to customize **logging**. The default logging only writes to
    the console or the debug window. This is quite good for the majority of cases,
    but sometimes you need to log to a sink, such as a file or a database. Or, perhaps
    you want to extend the logger with additional information. In these cases, you
    need to know how to change the default logging.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书关于自定义 **ASP.NET** **Core** 的第一章节中，您将了解如何自定义 **日志记录**。默认的日志记录仅写入控制台或调试窗口。这对于大多数情况来说相当不错，但有时您需要将日志记录到其他位置，例如文件或数据库。或者，也许您想通过附加额外信息来扩展日志记录器。在这些情况下，您需要了解如何更改默认的日志记录。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Configuring logging
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置日志记录
- en: Creating a custom logger
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义日志记录器
- en: Plugging in an existing third-party logger provider
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入现有的第三方日志记录提供程序
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的主题涉及 ASP.NET Core 架构的托管层：
- en: '![Figure 1.1 – The ASP.NET Core architecture](img/Figure_1.1_B17996.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – ASP.NET Core 架构](img/Figure_1.1_B17996.jpg)'
- en: Figure 1.1 – The ASP.NET Core architecture
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core MVC application. To do this, open your console, shell, or Bash terminal,
    and change to your working directory. Then, use the following command to create
    a new MVC application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的描述，您需要创建一个 ASP.NET Core MVC 应用程序。为此，打开您的控制台、shell 或 Bash 终端，并切换到您的当前工作目录。然后，使用以下命令创建一个新的
    MVC 应用程序：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in **Microsoft** **Visual Studio** by double-clicking
    the project file, or in Visual Studio Code, by typing the following command in
    the already-open console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件或在 Visual Studio Code 中在已打开的控制台中输入以下命令来打开项目在 **Microsoft** **Visual
    Studio** 中的项目：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All of the code samples in this chapter can be found in the **GitHub** repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter01).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的 **GitHub** 仓库中找到，网址为 [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter01)。
- en: Configuring logging
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置日志记录
- en: In previous versions of ASP.NET Core (that is, before version 2.0), logging
    was configured in `Startup.cs`. As a reminder, since version 2.0, the `Startup.cs`
    file has been simplified, and a lot of configurations have been moved to the default
    `WebHostBuilder`, which is called in `Program.cs`. Also, logging was moved to
    the default `WebHostBuilder`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 的早期版本（即 2.0 版本之前），日志记录是在 `Startup.cs` 中配置的。提醒一下，自 2.0 版本以来，`Startup.cs`
    文件已被简化，许多配置已移动到默认的 `WebHostBuilder`，该 `WebHostBuilder` 在 `Program.cs` 中被调用。此外，日志记录也已移动到默认的
    `WebHostBuilder`。
- en: 'In ASP.NET Core 3.1 and later versions, the `Program.cs` file gets more generic,
    and `IHostBuilder` will be created first. `IHostBuilder` is pretty useful for
    bootstrapping an application without all of the ASP.NET web stuff. We''ll learn
    a lot more about `IHostBuilder` later on in this book. With this `IHostBuilder`,
    we create `IWebHostBuilder` to configure ASP.NET Core. In ASP.NET Core 3.1 and
    later versions, we get `IWebHostBuilder` with the `webBuilder` variable:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 3.1 及更高版本中，`Program.cs` 文件变得更加通用，首先会创建 `IHostBuilder`。`IHostBuilder`
    对于无需所有 ASP.NET 网络功能即可启动应用程序非常有用。我们将在本书的后面部分了解更多关于 `IHostBuilder` 的内容。使用这个 `IHostBuilder`，我们创建
    `IWebHostBuilder` 来配置 ASP.NET Core。在 ASP.NET Core 3.1 及更高版本中，我们通过 `webBuilder`
    变量获得 `IWebHostBuilder`：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In ASP.NET Core 6.0, Microsoft introduced the `Startup` file and adds all of
    the configurations to the `Program.cs` file instead. Let''s see what this looks
    like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 6.0 中，Microsoft 引入了 `Startup` 文件，并将所有配置添加到 `Program.cs` 文件中。让我们看看它是什么样子：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In ASP.NET Core, you are able to override and customize almost everything.
    This includes logging. `IWebHostBuilder` has a lot of extension methods that allow
    us to override the default behavior of different features. To override the default
    settings for logging, we need to use the `ConfigureLogging` method. The following
    code snippet shows almost exactly the same logging as was configured inside the
    `ConfigureWebHostDefaults()` method:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 中，你可以几乎覆盖和自定义几乎所有内容。这包括日志记录。`IWebHostBuilder` 有许多扩展方法，允许我们覆盖不同功能的默认行为。要覆盖日志记录的默认设置，我们需要使用
    `ConfigureLogging` 方法。下面的代码片段显示了几乎与 `ConfigureWebHostDefaults()` 方法内部配置的相同日志记录：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using the minimal API approach, we don''t need the `ConfigureLogging` method
    anymore, and we can use the `Logging` property of `WebApplicationBuilder` directly:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最小 API 方法，我们不再需要 `ConfigureLogging` 方法，可以直接使用 `WebApplicationBuilder` 的 `Logging`
    属性：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we've seen how to configure logging, let's look at building a custom
    logger.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何配置日志记录，让我们来看看如何构建自定义日志记录器。
- en: Creating a custom logger
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义日志记录器
- en: To demonstrate a custom logger, let's use a small, simple logger I created that
    is able to colorize log entries with a specific log level in the console. This
    logger is called `ColoredConsoleLogger`, and it will be created and added using
    `LoggerProvider`, which we also need to write for ourselves. To specify the color
    and the log level to colorize, we need to add a configuration class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示自定义日志记录器，让我们使用一个小巧简单的日志记录器，它能够将特定日志级别的日志条目着色到控制台。这个日志记录器被称为 `ColoredConsoleLogger`，它将通过
    `LoggerProvider` 创建并添加，我们还需要为自己编写它。为了指定要着色的颜色和日志级别，我们需要添加一个配置类。
- en: 'In the next snippets, all three parts (`Logger`, `LoggerProvider`, and `Configuration`)
    are shown:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的代码片段中，展示了三个部分（`Logger`、`LoggerProvider` 和 `Configuration`）：
- en: 'Let''s create the configuration class of our logger in a new file called `CustomLogger.cs`
    in the same folder as the `Program.cs` file. Add the following using statement
    at the top of the file:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在与 `Program.cs` 文件相同的文件夹中创建一个新的文件 `CustomLogger.cs`，作为我们日志记录器的配置类。在文件的顶部添加以下
    `using` 语句：
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will call it `ColoredConsoleLoggerConfiguration`. This class contains three
    properties to define – `LogLevel`, `EventId`, and `Color` – that can be set:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将其命名为 `ColoredConsoleLoggerConfiguration`。这个类包含三个属性来定义 – `LogLevel`、`EventId`
    和 `Color` – 这些都可以设置：
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we need a provider to retrieve the configuration and create the actual
    logger instance:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个提供者来检索配置并创建实际的日志记录器实例：
- en: '[PRE8]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Don't forget to add a `using` statement for `System.Collections.Concurrent`.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记添加 `System.Collections.Concurrent` 的 `using` 语句。
- en: 'The third class is the actual logger we want to use:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个类是我们想要使用的实际日志记录器：
- en: '[PRE9]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We now need to lock the actual console output – this is because we will encounter
    some race conditions where incorrect log entries get colored with the wrong color,
    as the console itself is not really thread-safe.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在需要锁定实际的控制台输出 – 这是因为我们将遇到一些竞争条件，其中错误的日志条目会以错误的颜色着色，因为控制台本身并不是真正的线程安全的。
- en: 'After this is done, we can start to plug in the new logger to the configuration
    in `Program.cs`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，我们可以开始将新的日志记录器插入到 `Program.cs` 中的配置中：
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You might need to add a using statement to the `LoggerSample` namespace.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要在 `LoggerSample` 命名空间中添加一个 `using` 语句。
- en: If you don't want to use the existing loggers, you can clear all the logger
    providers added previously. Then, we call `AddProvider` to add a new instance
    of our `ColoredConsoleLoggerProvider` class with the specific settings. We could
    also add some more instances of the provider with different settings.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用现有的日志记录器，你可以清除之前添加的所有日志记录器提供者。然后，我们调用 `AddProvider` 来添加我们 `ColoredConsoleLoggerProvider`
    类的一个新实例，并带有特定的设置。我们也可以添加一些具有不同设置的提供者实例。
- en: This shows how you could handle the log levels in a different way. You could
    use this approach to send emails regarding hard errors or to log debug messages
    to a different log sink from regular informational messages, and much more.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了如何以不同的方式处理日志级别。你可以使用这种方法来发送有关严重错误的电子邮件，或将调试消息记录到与常规信息消息不同的日志接收器，等等。
- en: '*Figure 1.2* shows the colored output of the previously created custom logger:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.2* 展示了之前创建的自定义日志记录器的彩色输出：'
- en: '![Figure 1.2 – A screenshot of the custom logger](img/Figure_1.2_B17996.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 自定义日志记录器的截图](img/Figure_1.2_B17996.jpg)'
- en: Figure 1.2 – A screenshot of the custom logger
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 自定义日志记录器的截图
- en: In many cases, it doesn't make sense to write a custom logger, as many good
    third-party loggers are already available, such as `ELMAH`, `log4net`, and `NLog`.
    In the next section, we will see how to use `NLog` in ASP.NET Core.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，编写自定义日志记录器是没有意义的，因为已经有许多优秀的第三方日志记录器可用，例如`ELMAH`、`log4net`和`NLog`。在下一节中，我们将看到如何在ASP.NET
    Core中使用`NLog`。
- en: Plugging in an existing third-party logger provider
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入现有的第三方日志记录器提供程序
- en: '`NLog` was one of the very first available as a `NLog` also already provides
    a logger provider to easily plug into ASP.NET Core.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`NLog`是首批可用的日志记录器之一，因为`NLog`也提供了一个日志提供程序，可以轻松地将其插入到ASP.NET Core中。'
- en: 'You will find `NLog` via `NLog` is not yet explicitly available for ASP.NET
    Core 6.0, it will still work with version 6.0:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过`NLog`找到它尚未明确支持ASP.NET Core 6.0，但它仍然可以与版本6.0一起工作：
- en: 'We need to add an `NLog.Config` file that defines two different sinks to log
    all standard messages in a single log file and custom messages only in another
    file. Since this file is too long to print, you can view it or download it directly
    from GitHub: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter01/LoggingSample6.0/NLog.Config](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter01/LoggingSample6.0/NLog.Config)'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一个`NLog.Config`文件，该文件定义了两个不同的接收器，将所有标准消息记录在单个日志文件中，并将自定义消息仅记录在另一个文件中。由于此文件过长，无法打印，你可以直接从GitHub查看或下载：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter01/LoggingSample6.0/NLog.Config](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter01/LoggingSample6.0/NLog.Config)
- en: 'We then need to add the `NLog` ASP.NET Core package from NuGet:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要从NuGet添加`NLog` ASP.NET Core包：
- en: '[PRE11]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Important Note
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be sure that you are in the project directory before you execute the preceding
    command!
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在执行前面的命令之前，请确保你处于项目目录中！
- en: 'Now, you only need to clear all the other providers in the `ConfigureLogging`
    method in `Program.cs` and to use `NLog` with `IWebHostBuilder` using the `UseNLog()`
    method:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你只需要在`Program.cs`中的`ConfigureLogging`方法中清除所有其他提供程序，并使用`IWebHostBuilder`的`UseNLog()`方法来使用`NLog`：
- en: '[PRE12]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Using the minimal API, it looks much simpler:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用最小API，它看起来要简单得多：
- en: '[PRE13]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, you can add as many logger providers as you require.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你可以添加你需要的任意数量的日志提供程序。
- en: That covers using an existing third-party logger. Let's now recap what we've
    covered in this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就涵盖了使用现有的第三方日志记录器。现在，让我们回顾一下本章所涵盖的内容。
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The good thing about hiding the basic configuration of an application is that
    it allows you to clean up the newly scaffolded projects and to keep the actual
    start as simple as possible. The developer is able to focus on the actual features.
    However, the more the application grows, the more important logging becomes. The
    default logging configuration is easy and it works like a charm, but in production,
    you need a persisted log to see errors from the past. Therefore, you need to add
    a custom logging configuration or a more flexible third-party logger, such as
    `NLog` or `log4net`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏应用程序的基本配置的好处在于，它允许你清理新搭建的项目，并尽可能简化实际的启动过程。开发者能够专注于实际的功能。然而，随着应用程序的增长，日志记录变得越来越重要。默认的日志配置既简单又有效，但在生产环境中，你需要一个持久的日志来查看过去的错误。因此，你需要添加自定义的日志配置或更灵活的第三方日志记录器，例如`NLog`或`log4net`。
- en: You will learn more about how to configure ASP.NET Core 6.0 in the next chapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在下一章中了解更多关于如何配置ASP.NET Core 6.0的信息。
