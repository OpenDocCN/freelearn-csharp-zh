["```cs\n[System.Serializable]\npublic class Food\n{\n    public string name;\n    public string ingredients;\n    public string calories;\n    public string dietType;\n    public GameObject prefab;\n}\n```", "```cs\npublic class ARPlacePrefab : MonoBehaviour\n{\n    public GameObject ObjectToPlace;\n    //public SwapPrefab SwapPrefabScript;\n    public GameObject NextPrefabButton;\n    public GameObject PreviousPrefabButton;\n    public TextMeshProUGUI InfoText;\n    public Button PlaceFirstMealButton;\n    public GameObject InfoPanel;\n    private ARRaycastManager _arRaycastManager;\n    private Pose _placementPose;\n    private bool _placementPoseIsValid = false;\n    private GameObject _placedObject;\n    private GameObject _nextButton;\n    private GameObject _previousButton;\n    private Vector2 _oldTouchDistance;\n    private GameObject _placementIndicator;\n    private GameObject _placementGrid;\n```", "```cs\nvoid Start()\n    {\n        _arRaycastManager =\n            FindObjectOfType<ARRaycastManager>();\n        //_nextButton = InstantiateButton(NextPrefabButton,\n        //SwapPrefabScript.SwapFoodPrefab);\n        //_previousButton =\n        //InstantiateButton(PreviousPrefabButton,\n        //SwapPrefabScript.SwapToPreviousFoodPrefab);\n        _placementGrid = CreatePlacementGrid();\n        PlaceFirstMealButton.onClick\n            .AddListener(PlaceObjectIfNeeded);\n    }\n```", "```cs\nvoid Update()\n    {\n        if (Input.touchCount == 2)\n        {\n            PinchToScale();\n        }\n        UpdatePlacementPose();\n        UpdatePlacementIndicator();\n        if (_placementPoseIsValid && Input.touchCount > 0\n            && Input.GetTouch(0).phase == TouchPhase.Began)\n        {\n            PlaceObject();\n        }\n    }\n```", "```cs\npublic void PlaceObject()\n    {\n        if (_placedObject != null)\n        {\n            Destroy(_placedObject);\n        }\n        _placedObject = Instantiate(ObjectToPlace,\n            _placementPose.position,\n            _placementPose.rotation);\n        _placedObject.transform.localScale = new\n            Vector3(0.5f, 0.5f, 0.5f);\n        PositionButton(_nextButton, new Vector3(0.5f, 0f,\n            0f));\n        PositionButton(_previousButton, new Vector3(-0.5f,\n            0f, 0f));\n        UpdateFoodInfoText();\n        _placementGrid.SetActive(false);\n    }\n```", "```cs\nprivate void UpdatePlacementPose()\n    {\n        var screenCenter =\n            Camera.current.ViewportToScreenPoint(\n            new Vector3(0.5f, 0.5f));\n        var hits = new List<ARRaycastHit>();\n        _arRaycastManager.Raycast(screenCenter, hits,\n            TrackableType.Planes);\n        _placementPoseIsValid = hits.Count > 0;\n        if (_placementPoseIsValid)\n        {\n            _placementPose = hits[0].pose;\n            PositionGrid(hits[0].pose.position,\n                hits[0].pose.rotation);\n        }\n        else\n        {\n            _placementGrid.SetActive(false);\n        }\n    }\n```", "```cs\nprivate void UpdatePlacementIndicator()\n    {\n        if (_placementPoseIsValid)\n        {\n            _placementIndicator.SetActive(true);\n            _placementIndicator.transform\n                .SetPositionAndRotation(\n                _placementPose.position,\n                _placementPose.rotation);\n        }\n        else\n        {\n            _placementIndicator.SetActive(false);\n        }\n    }\n```", "```cs\nprivate GameObject InstantiateButton(GameObject\nbuttonPrefab, UnityEngine.Events.UnityAction onClickAction)\n    {\n        var button = Instantiate(buttonPrefab);\n        button.SetActive(false);\n        button.GetComponent<Button>().onClick\n            .AddListener(onClickAction);\n        return button;\n    }\n```", "```cs\nprivate GameObject CreatePlacementGrid()\n    {\n        var grid =\n           GameObject.CreatePrimitive(PrimitiveType.Plane);\n        grid.transform.localScale = new Vector3(0.01f,\n            0.01f, 0.01f);\n        grid.GetComponent<Renderer>().material =\n            Resources.Load<Material>(\"GridMaterial\");\n        grid.SetActive(false);\n        return grid;\n    }\n    private void PlaceObjectIfNeeded()\n    {\n        if (_placementPoseIsValid)\n        {\n            PlaceObject();\n            InfoPanel.SetActive(false);\n        }\n    }\n```", "```cs\ngrid.GetComponent<Renderer>().material =\nResources.Load<Material>(\"GridMaterial\");\n```", "```cs\nprivate void PinchToScale()\n    {\n        Touch touchZero = Input.GetTouch(0);\n        Touch touchOne = Input.GetTouch(1);\n        if (touchZero.phase ==\n        TouchPhase.Moved || touchOne.phase ==\n        TouchPhase.Moved)\n        {\n            Vector2 touchDistance =\n                touchOne.position - touchZero.position;\n            float pinchDistanceChange =\n                touchDistance.magnitude –\n                _oldTouchDistance.magnitude;\n            float pinchToScaleSensitivity = 0.001f;\n            if (_placedObject != null)\n            {\n                ScalePlacedObject(pinchDistanceChange,\n                    pinchToScaleSensitivity);\n            }\n            _oldTouchDistance = touchDistance;\n        }\n    }\nprivate void ScalePlacedObject(float pinchDistanceChange, float pinchToScaleSensitivity)\n    {\n        Vector3 newScale =\n            _placedObject.transform.localScale + new\n            Vector3(pinchDistanceChange,\n            pinchDistanceChange, pinchDistanceChange) *\n            pinchToScaleSensitivity;\n        newScale = Vector3.Max(newScale, new Vector3(0.1f,\n            0.1f, 0.1f));\n        newScale = Vector3.Min(newScale, new Vector3(10f,\n            10f, 10f));\n        _placedObject.transform.localScale = newScale;\n    }\n```", "```cs\nprivate void PositionButton(GameObject button,\nVector3 offset)\n    {\n        button.transform.position =\n            _placedObject.transform.position + offset;\n        button.SetActive(true);\n    }\n```", "```cs\nprivate void UpdateFoodInfoText()\n    {\n        /*Food currentFood =\n            SwapPrefabScript.GetCurrentFood();\n        InfoText.text = $\"<b>Name:</b>\n        {currentFood.name}\\n<b>Ingredients:</b>\n        {currentFood.ingredients}\\n\n        <b><color=red>Calories:</color></b>\n        {currentFood.calories}\\n<b>Diet Type:</b>\n        {currentFood.dietType}\";*/\n        InfoText.transform.position =\n            _placedObject.transform.position + new\n            Vector3(-0.2f, 0.3f, 0f);\n        InfoText.transform.rotation =\n            _placedObject.transform.rotation;\n    }\n```", "```cs\nprivate void PositionGrid(Vector3 position,\nQuaternion rotation)\n    {\n        _placementGrid.transform.SetPositionAndRotation(\n            position, rotation);\n        _placementGrid.SetActive(true);\n    }\n```", "```cs\npublic class SwapPrefab : MonoBehaviour\n{\n    public Food[] AvailableFoods;\n    private int CurrentFoodIndex = 0;\n    private ARPlacePrefab ARPrefabPlacement;\n```", "```cs\nvoid Start()\n    {\n        ARPrefabPlacement =\n            FindObjectOfType<ARPlacePrefab>();\n        if (AvailableFoods.Length > 0)\n        {\n            ARPrefabPlacement.ObjectToPlace =\n                AvailableFoods[0].prefab;\n        }\n    }\n```", "```cs\npublic void SwapFoodPrefab()\n    {\n        CurrentFoodIndex = (CurrentFoodIndex + 1) %\n            AvailableFoods.Length;\n        ARPrefabPlacement.ObjectToPlace =\n            AvailableFoods[CurrentFoodIndex].prefab;\n        ARPrefabPlacement.PlaceObject();\n        // Update the InfoText\n        ARPrefabPlacement.InfoText.text = $\"<b>Name:</b>\n        {AvailableFoods[CurrentFoodIndex].name}\\n\n        <b>Ingredients:</b>\n        {AvailableFoods[CurrentFoodIndex].ingredients}\\n\n        <b><color=red>Calories:</color></b>\n        {AvailableFoods[CurrentFoodIndex].calories}\\n\n        <b>Diet Type:</b>\n        {AvailableFoods[CurrentFoodIndex].dietType}\";\n    }\n```", "```cs\npublic void SwapToPreviousFoodPrefab()\n    {\n        CurrentFoodIndex--;\n        if (CurrentFoodIndex < 0)\n        {\n            CurrentFoodIndex = AvailableFoods.Length - 1;\n        }\n        ARPrefabPlacement.ObjectToPlace =\n            AvailableFoods[CurrentFoodIndex].prefab;\n        ARPrefabPlacement.PlaceObject();\n        // Update the InfoText\n        ARPrefabPlacement.InfoText.text = $\"<b>Name:</b>\n        {AvailableFoods[CurrentFoodIndex].name}\\n\n        <b>Ingredients:</b>\n        {AvailableFoods[CurrentFoodIndex].ingredients}\\n\n        <b><color=red>Calories:</color></b>\n        {AvailableFoods[CurrentFoodIndex].calories}\\n\n        <b>Diet Type:</b>\n        {AvailableFoods[CurrentFoodIndex].dietType}\";\n    }\n```", "```cs\npublic Food GetCurrentFood()\n    {\n        return AvailableFoods[CurrentFoodIndex];\n    }\n```"]