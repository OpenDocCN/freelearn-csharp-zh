["```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection                 services)\n    {\n        services.AddMvc();\n        services.AddTransient<MyService>();\n    }\n    public void Configure(\n        IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        app.UseRouting();\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n```", "```cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n    public static IHostBuilder CreateHostBuilder(string[]           args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder.UseStartup<Startup>();\n            });\n}\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nusing Volo.Abp.Modularity;\nnamespace SmsSending\n{\n    public class SmsSendingModule : AbpModule \n    {\n        public override void ConfigureServices(\n            ServiceConfigurationContext context)\n        {\n            context.Services.AddTransient<SmsService>();\n        }\n    }\n}\n```", "```cs\npublic class SmsSendingModule : AbpModule \n{\n    //...\n    public override void OnApplicationInitialization(\n        ApplicationInitializationContext context)\n    {\n        var service = context.ServiceProvider\n            .GetRequiredService<SmsService>();\n        service.Initialize();\n    }\n}\n```", "```cs\n[DependsOn(typeof(ModuleB), typeof(ModuleC))]\npublic class ModuleA : AbpModule\n{    \n}\n```", "```cs\n[DependsOn(typeof(ModuleB), typeof(ModuleC))]\npublic class ModuleA : AbpModule\n{\n    //...\n    public override void OnApplicationInitialization(\n        ApplicationInitializationContext context)\n    {\n        var app = context.GetApplicationBuilder();\n        var env = context.GetEnvironment();\n\n        app.UseRouting();\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}\n```", "```cs\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection                 services)\n    {\n        services.AddApplication<ModuleA>();\n    }\n    public void Configure(IApplicationBuilder app)\n    {\n        app.InitializeApplication();\n    }\n}\n```", "```cs\npublic class UserRegistrationService\n{\n    private readonly SmsService _smsService;\n    public UserRegistrationService(SmsService smsService)\n    {\n        _smsService = smsService;\n    }\n    public async Task RegisterAsync(\n        string username,\n        string password,\n        string phoneNumber)\n    {\n        //...save user in the database\n        await _smsService.SendAsync(\n            phoneNumber,\n            \"Your verification code: 1234\"\n        );\n    }\n}\n```", "```cs\npublic class MyModule : AbpModule\n{\n    public override void ConfigureServices(\n        ServiceConfigurationContext context)\n    {\n        context.Services.AddTransient<ISmsService,                       SmsService>();\n        context.Services.AddSingleton<OtherService>();\n    }\n}\n```", "```cs\npublic class UserPermissionCache : ISingletonDependency\n{ }\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nusing Volo.Abp.DependencyInjection;\nnamespace UserManagement\n{\n    [Dependency(ServiceLifetime.Transient, TryRegister =         true)]\n    public class UserPermissionCache\n    { }\n}\n```", "```cs\npublic interface ISmsService\n{\n    Task SendAsync(string phoneNumber, string message);\n}\n```", "```cs\npublic class AzureSmsService : ISmsService, ITransientDependency\n{\n    public async Task SendAsync(string phoneNumber, string message)\n    {\n        //TODO: ...\n    }\n}\n```", "```cs\npublic class PdfExporter: IExporter, IPdfExporter, ICanExport, ITransientDependency\n{ }\n```", "```cs\n[ExposeServices(typeof(IPdfExporter))]\npublic class PdfExporter: IExporter, IPdfExporter, ICanExport, ITransientDependency\n{ }\n```", "```cs\n{\n  ...\n  \"AzureSmsService\": {\n    \"Sender\": \"+901112223344\",\n    \"ConnectionString\": \"...\"\n  }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Configuration;\nusing Volo.Abp.DependencyInjection;\nnamespace SmsSending\n{\n    public class AzureSmsService : ISmsService,                     ITransientDependency\n    {\n        private readonly IConfiguration _configuration;\n        public AzureSmsService(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n\n        public async Task SendAsync(\n            string phoneNumber, string message)\n        {\n            string sender = _configuration[\"AzureSmsService:Sender\"];\n            string ConnectionString = _configuration[\"AzureSmsService:ConnectionString\"];\n            //TODO: Use Azure to send the SMS message\n        }\n    }\n}\n```", "```cs\npublic override void ConfigureServices(\n    ServiceConfigurationContext context)\n{\n    IConfiguration configuration =                                   context.Services.GetConfiguration();\n    string sender =                                                 configuration[\"AzureSmsService:Sender\"];\n}\n```", "```cs\npublic class AzureSmsServiceOptions\n{\n    public string Sender { get; set; }\n    public string ConnectionString { get; set; }\n}\n```", "```cs\n[DependsOn(typeof(SmsSendingModule))]\npublic class MyStartupModule : AbpModule\n{\n    public override void ConfigureServices(\n        ServiceConfigurationContext context)\n    {\n        context.Services\n            .Configure<AzureSmsServiceOptions>(options =>\n        {\n            options.Sender = \"+901112223344\";\n            options.ConnectionString = \"...\";\n        });\n    }\n}\n```", "```cs\npublic override void ConfigureServices(\n    ServiceConfigurationContext context)\n{\n    Configure<AzureSmsServiceOptions>(options =>\n    {\n        options.Sender = \"+901112223344\";\n        options.ConnectionString = \"...\";\n    });\n}\n```", "```cs\npublic class AzureSmsService : ISmsService, ITransientDependency\n{\n    private readonly AzureSmsServiceOptions _options;\n    public AzureSmsService(IOptions<AzureSmsServiceOptions>         options)\n    {\n        _options = options.Value;\n    }\n\n    public async Task SendAsync(string phoneNumber, string message)\n    {\n        string sender = _options.Sender;\n        string ConnectionString = _options.ConnectionString;\n        //TODO...\n    }\n}\n```", "```cs\n[DependsOn(typeof(SmsSendingModule))]\npublic class MyStartupModule : AbpModule\n{\n    public override void ConfigureServices(\n        ServiceConfigurationContext context)\n    {\n        var configuration =                                            context.Services.GetConfiguration();        \n        Configure<AzureSmsServiceOptions>(options =>\n        {\n            options.Sender =                                                 configuration[\"AzureSmsService:Sender\"];\n            options.ConnectionString = configuration[\"AzureSmsService:ConnectionString\"];\n        });\n    }\n}\n```", "```cs\npublic override void ConfigureServices(\n    ServiceConfigurationContext context)\n{\n    var configuration = context.Services.GetConfiguration();    \n    Configure<AzureSmsServiceOptions>(\n        configuration.GetSection(\"AzureSmsService\"));\n}\n```", "```cs\nConfigure<AbpAuditingOptions>(options =>\n{\n    options.IgnoredTypes.Add(typeof(ProductDto));\n});\n```", "```cs\nConfigure<MvcOptions>(options =>\n{\n    options.RespectBrowserAcceptHeader = true;\n});\n```", "```cs\npublic class AzureSmsService : ISmsService,                     ITransientDependency\n{\n    private readonly ILogger<AzureSmsService> _logger;\n    public AzureSmsService(ILogger<AzureSmsService> logger)\n    {\n        _logger = logger;\n    }\n    public async Task SendAsync(string phoneNumber, string           message)\n    {\n        _logger.LogInformation(\n            $\"Sending SMS to {phoneNumber}: {message}\");\n        //TODO...\n    }\n}\n```"]