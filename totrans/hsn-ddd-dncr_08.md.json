["```cs\npublic interface IClassifiedAdRepository  \n{  \n    Task<ClassifiedAd> Load(ClassifiedAdId id);  \n    Task Save(ClassifiedAd entity);\n}\n```", "```cs\npublic interface IRepository<T>\n{\n    void GetById(int id); void Save(T);\n    IEnumerable<T> Query(Func<T, bool> filter);\n}\n```", "```cs\nusing System.Threading.Tasks;\n\nnamespace Marketplace.Domain\n{\n    public interface IClassifiedAdRepository\n    {\n        Task<ClassifiedAd> Load(ClassifiedAdId id);\n\n        Task Add(ClassifiedAd entity);\n\n        Task<bool> Exists(ClassifiedAdId id);\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain;\nusing Raven.Client.Documents.Session;\n\nnamespace Marketplace.Infrastructure\n{\n    public class ClassifiedAdRepository : IClassifiedAdRepository\n    {\n        private readonly IAsyncDocumentSession _session;\n\n        public ClassifiedAdRepository(IAsyncDocumentSession session) \n            => _session = session;\n\n        public Task Add(ClassifiedAd entity) \n            => _session.StoreAsync(entity, EntityId(entity.Id));\n\n        public Task<bool> Exists(ClassifiedAdId id) \n            => _session.Advanced.ExistsAsync(EntityId(id));\n\n        public Task<ClassifiedAd> Load(ClassifiedAdId id)\n            => _session.LoadAsync<ClassifiedAd>(EntityId(id));\n\n        private static string EntityId(ClassifiedAdId id)\n            => $\"ClassifiedAd/{id.ToString()}\";\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\n\nnamespace Marketplace.Framework\n{\n    public interface IUnitOfWork\n    {\n        Task Commit();\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Framework;\nusing Raven.Client.Documents.Session;\n\nnamespace Marketplace.Infrastructure\n{\n    public class RavenDbUnitOfWork : IUnitOfWork\n    {\n        private readonly IAsyncDocumentSession _session;\n\n        public RavenDbUnitOfWork(IAsyncDocumentSession session) \n            => _session = session;\n\n        public Task Commit() => _session.SaveChangesAsync();\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain;\nusing Marketplace.Framework;\nusing static Marketplace.Contracts.ClassifiedAds;\n\nnamespace Marketplace.Api\n{\n    public class ClassifiedAdsApplicationService : IApplicationService\n    {\n        private readonly IClassifiedAdRepository _repository;\n        private readonly IUnitOfWork _unitOfWork;\n        private readonly ICurrencyLookup _currencyLookup;\n\n        public ClassifiedAdsApplicationService(\n            IClassifiedAdRepository repository, IUnitOfWork unitOfWork,\n            ICurrencyLookup currencyLookup\n        )\n        {\n            _repository = repository;\n            _unitOfWork = unitOfWork;\n            _currencyLookup = currencyLookup;\n        }\n\n        public Task Handle(object command) => \n            command switch\n            {\n                V1.Create cmd => HandleCreate(cmd),\n                V1.SetTitle cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.SetTitle(\n                            ClassifiedAdTitle.FromString(cmd.Title)\n                        )\n                    ),\n                V1.UpdateText cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.UpdateText(\n                            ClassifiedAdText.FromString(cmd.Text)\n                        )\n                    ),\n                V1.UpdatePrice cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.UpdatePrice(\n                            Price.FromDecimal(\n                                cmd.Price, cmd.Currency, \n                                _currencyLookup\n                            )\n                        )\n                    ),\n                V1.RequestToPublish cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.RequestToPublish()\n                    )\n            };\n\n        private async Task HandleCreate(V1.Create cmd)\n        {\n            if (await _repository.Exists(cmd.Id.ToString()))\n                throw new InvalidOperationException(\n                    $\"Entity with id {cmd.Id} already exists\");\n\n            var classifiedAd = new ClassifiedAd(\n                new ClassifiedAdId(cmd.Id),\n                new UserId(cmd.OwnerId)\n            );\n\n            await _repository.Add(classifiedAd);\n            await _unitOfWork.Commit();\n        }\n\n        private async Task HandleUpdate(\n            Guid classifiedAdId, Action<ClassifiedAd> operation)\n        {\n            var classifiedAd = await \n            _repository.Load(classifiedAdId.ToString());\n            if (classifiedAd == null)\n                throw new InvalidOperationException(\n                    $\"Entity with id {classifiedAdId} cannot be \n                    found\");\n\n            operation(classifiedAd);\n\n            await _unitOfWork.Commit();\n        }\n    }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    var store = new DocumentStore\n    {\n        Urls = new[] {\"http://localhost:8080\"},\n        Database = \"Marketplace_Chapter8\",\n        Conventions =\n        {\n            FindIdentityProperty = m => m.Name == \"_databaseId\"\n        }\n    };\n    store.Initialize();\n\n    services.AddSingleton<ICurrencyLookup, FixedCurrencyLookup>();\n    services.AddScoped(c => store.OpenAsyncSession());\n    services.AddScoped<IUnitOfWork, RavenDbUnitOfWork>();\n    services.AddScoped<IClassifiedAdRepository, ClassifiedAdRepository>();\n    services.AddScoped<ClassifiedAdsApplicationService>();\n\n    services.AddMvc();\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\n            \"v1\",\n            new Info\n            {\n                Title = \"ClassifiedAds\",\n                Version = \"v1\"\n            });\n    });\n}\n```", "```cs\nprivate async Task<IActionResult> HandleRequest<T>(T request, Func<T, Task> handler)\n{\n    try\n    {\n        Log.Debug(\"Handling HTTP request of type {type}\", \n        typeof(T).Name);\n        await handler(request);\n        return Ok();\n    }\n    catch (Exception e)\n    {\n        Log.Error(\"Error handling the request\", e);\n        return new BadRequestObjectResult(new {error = e.Message, \n        stackTrace = e.StackTrace});\n    }\n}\n```", "```cs\npublic ClassifiedAdsCommandsApi(\n    ClassifiedAdsApplicationService applicationService)\n    => _applicationService = applicationService;\n```", "```cs\nHosting environment: Development\nContent root path: ~/github/ddd-book/chapter8/Marketplace/bin/Debug/netcoreapp2.2\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n```", "```cs\nCannot set identity value 'ClassifiedAd/302790d5-735e-445e-a042-b5891ad3cf1f' on property 'Id' for type 'Marketplace.Domain.ClassifiedAd' because property type is not a string.\n```", "```cs\npublic class ClassifiedAd : AggregateRoot<ClassifiedAdId>\n{\n    // Properties to handle the persistence\n    private string DbId\n    {\n        get => $\"ClassifiedAd/{Id.Value}\";\n        set {}\n    }\n\n    // Aggregate state properties\n```", "```cs\nvar store = new DocumentStore\n    {\n        Urls = new[] {\"http://localhost:8080\"},\n        Database = \"Marketplace_Chapter8\",\n        Conventions =\n        {\n            FindIdentityProperty = x => x.Name == \"DbId\"\n        }\n    };\nstore.Initialize();\n```", "```cs\n{\n    \"OwnerId\": {\n        \"Value\": \"83508629-d2ee-4798-9ac5-b5bbc3e57731\"\n    },\n    \"Title\": {\n        \"Value\": \"Green sofa\"\n    },\n    \"Text\": null,\n    \"Price\": null,\n    \"State\": \"Inactive\",\n    \"ApprovedBy\": null,\n    \"Pictures\": [],\n    \"FirstPicture\": null,\n    \"Id\": {\n        \"Value\": \"302790d5-735e-445e-a042-b5891ad3cf1f\"\n    },\n    \"@metadata\": {\n        \"@collection\": \"ClassifiedAds\",\n        \"Raven-Clr-Type\": \"Marketplace.Domain.ClassifiedAd, \n        Marketplace.Domain\"\n    }\n}\n```", "```cs\nCould not convert document ClassifiedAd/7b0a443f-af9b-4f0d-8876-7896c9921cbc to entity of type Marketplace.Domain.ClassifiedAd.ClassifiedAd\n```", "```cs\nUnable to find a constructor to use for type Marketplace.Domain.ClassifiedAd.ClassifiedAdTitle. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'Title.Value'.\n```", "```cs\n// Satisfy the serialization requirements\nprotected ClassifiedAdTitle() { }\n```", "```cs\nusing Marketplace.Domain;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\n\nnamespace Marketplace.Infrastructure\n{\n    public class ClassifiedAdDbContext : DbContext\n    {\n        private readonly ILoggerFactory _loggerFactory;\n\n        public ClassifiedAdDbContext(\n            DbContextOptions<ClassifiedAdDbContext> options,\n            ILoggerFactory loggerFactory)\n            : base(options) => _loggerFactory = loggerFactory;\n\n        public DbSet<ClassifiedAd> ClassifiedAds { get; set; }\n\n        protected override void OnConfiguring(\n            DbContextOptionsBuilder optionsBuilder)\n        {\n            optionsBuilder.UseLoggerFactory(_loggerFactory);\n            optionsBuilder.EnableSensitiveDataLogging();\n        }\n\n        protected override void OnModelCreating(ModelBuilder \n        modelBuilder)\n            => modelBuilder.ApplyConfiguration(\n                new ClassifiedAdEntityTypeConfiguration());\n    }\n\n    public class ClassifiedAdEntityTypeConfiguration \n        : IEntityTypeConfiguration<ClassifiedAd>\n    {\n        public void Configure(EntityTypeBuilder<ClassifiedAd> builder)\n            => builder.HasKey(x => x.ClassifiedAdId);\n    }\n\n    public static class AppBuilderDatabaseExtensions\n    {\n        public static void EnsureDatabase(this IApplicationBuilder app)\n        {\n            var context = app.ApplicationServices\n                .GetService<ClassifiedAdDbContext>();\n\n            if (!context.Database.EnsureCreated())\n                context.Database.Migrate();\n        }\n    }\n}\n```", "```cs\npublic class ClassifiedAd : AggregateRoot<ClassifiedAdId>\n{\n    // Properties to handle the persistence\n    public Guid ClassifiedAdId { get; private set; }\n\n    protected ClassifiedAd() { }\n\n    ... more code here...\n\n    protected override void When(object @event)\n    {\n        Picture picture;\n\n        switch (@event)\n        {\n            case Events.ClassifiedAdCreated e:\n                Id = new ClassifiedAdId(e.Id);\n                OwnerId = new UserId(e.OwnerId);\n                State = ClassifiedAdState.Inactive;\n\n                // required for persistence\n                ClassifiedAdId = e.Id;\n                break;\n\n    ... rest of the code ...\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Infrastructure\n{\n    public class EfCoreUnitOfWork : IUnitOfWork\n    {\n        private readonly ClassifiedAdDbContext _dbContext;\n\n        public EfCoreUnitOfWork(ClassifiedAdDbContext dbContext)\n            => _dbContext = dbContext;\n\n        public Task Commit() => _dbContext.SaveChangesAsync();\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain;\n\nnamespace Marketplace.Infrastructure\n{\n    public class ClassifiedAdRepository : IClassifiedAdRepository\n    {\n        private readonly ClassifiedAdDbContext _dbContext;\n\n        public ClassifiedAdRepository(ClassifiedAdDbContext dbContext) \n            => _dbContext = dbContext;\n\n        public Task Add(ClassifiedAd entity) \n            => _dbContext.ClassifiedAds.AddAsync(entity);\n\n        public async Task<bool> Exists(ClassifiedAdId id) \n            => await _dbContext.ClassifiedAds.FindAsync(id.Value) != \n            null;\n\n        public Task<ClassifiedAd> Load(ClassifiedAdId id)\n            => _dbContext.ClassifiedAds.FindAsync(id.Value);\n    }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    const string connectionString = \n        \"Host=localhost;Database=Marketplace_Chapter8;\n        Username=ddd;Password=book\";\n    services\n        .AddEntityFrameworkNpgsql()\n        .AddDbContext<ClassifiedAdDbContext>(\n            options => options.UseNpgsql(connectionString));\n\n    services.AddSingleton<ICurrencyLookup, FixedCurrencyLookup>();\n    services.AddScoped<IUnitOfWork, EfCoreUnitOfWork>();\n    services.AddScoped<IClassifiedAdRepository, ClassifiedAdRepository>\n    ();\n    services.AddScoped<ClassifiedAdsApplicationService>();\n\n    services.AddMvc();\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\",\n            new Info\n            {\n                Title = \"ClassifiedAds\",\n                Version = \"v1\"\n            });\n    });\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.EnsureDatabase();\n    app.UseMvcWithDefaultRoute();\n    app.UseSwagger();\n    app.UseSwaggerUI(c =>\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"ClassifiedAds \n        v1\"));\n}\n```", "```cs\npublic class ClassifiedAdEntityTypeConfiguration : IEntityTypeConfiguration<ClassifiedAd>\n{\n    public void Configure(EntityTypeBuilder<ClassifiedAd> builder)\n    {\n        builder.HasKey(x => x.ClassifiedAdId);\n        builder.OwnsOne(x => x.Id);\n        builder.OwnsOne(x => x.Price, p => p.OwnsOne(c => c.Currency));\n        builder.OwnsOne(x => x.Text);\n        builder.OwnsOne(x => x.Title);\n        builder.OwnsOne(x => x.ApprovedBy);\n        builder.OwnsOne(x => x.OwnerId);\n    }\n}\n```", "```cs\npublic class PictureSize : Value<PictureSize>\n{\n    public int Width { get; internal set; }\n    public int Height { get; internal set; }\n\n    internal PictureSize() { }\n\n    ... rest of the code ...\n```", "```cs\npublic class PictureEntityTypeConfiguration : IEntityTypeConfiguration<Picture>\n{\n    public void Configure(EntityTypeBuilder<Picture> builder)\n    {\n        builder.HasKey(x => x.PictureId);\n        builder.OwnsOne(x => x.Id);\n        builder.OwnsOne(x => x.ParentId);\n        builder.OwnsOne(x => x.Size);\n    }\n}\n```", "```cs\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.ApplyConfiguration(new \n    ClassifiedAdEntityTypeConfiguration());\n    modelBuilder.ApplyConfiguration(new \n    PictureEntityTypeConfiguration());\n}\n```", "```cs\nThe entity of type 'ClassifiedAd' is sharing the table 'ClassifiedAds' with entities of type 'ClassifiedAdText', but there is no entity of this type with the same key value '{ClassifiedAdId: 302790d5-735e-445e-a042-b5891ad3cf1f}' that has been marked as 'Added'.\n```", "```cs\npublic static ClassifiedAdTitle NoTitle =\n    new ClassifiedAdTitle();\n```", "```cs\nprotected override void When(object @event)\n{\n    Picture picture;\n\n    switch (@event)\n    {\n        case Events.ClassifiedAdCreated e:\n            Id = new ClassifiedAdId(e.Id);\n            OwnerId = new UserId(e.OwnerId);\n            State = ClassifiedAdState.Inactive;\n\n            Title = ClassifiedAdTitle.NoTitle;\n            Text = ClassifiedAdText.NoText;\n            Price = Price.NoPrice;\n            ApprovedBy = UserId.NoUser;\n\n            ClassifiedAdId = e.Id;\n            break;\n\n    ... rest of the code ...\n```", "```cs\n[17:44:32 INF] Executed DbCommand (13ms) [Parameters=[@p0='302790d5-735e-445e-a042-b5891ad3cf1f', @p1='2', @p2='302790d5-735e-445e-a042-b5891ad3cf1f', @p3='', @p4='', @p5='', @p6='0', @p7='False', @p8='-1', @p9='00000000-0000-0000-0000-000000000000', @p10='83508629-d2ee-4798-9ac5-b5bbc3e57731'], CommandType='Text', CommandTimeout='30']\n INSERT INTO \"ClassifiedAds\" (\"ClassifiedAdId\", \"State\", \"Id_Value\", \"Text_Value\", \"Title_Value\", \"Price_Currency_CurrencyCode\", \"Price_Currency_DecimalPlaces\", \"Price_Currency_InUse\", \"Price_Amount\", \"ApprovedBy_Value\", \"OwnerId_Value\")\n VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10);\n```", "```cs\n[17:46:48 INF] Executed DbCommand (5ms) [Parameters=[@p1='302790d5-735e-445e-a042-b5891ad3cf1f', @p0='Green sofa'], CommandType='Text', CommandTimeout='30']\n UPDATE \"ClassifiedAds\" SET \"Title_Value\" = @p0\n WHERE \"ClassifiedAdId\" = @p1;\n```"]