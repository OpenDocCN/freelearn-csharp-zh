- en: Chapter 5. Create Microservices on Azure Service Fabric
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：在 Azure Service Fabric 上创建微服务
- en: 'This chapter deals with the exciting world of microservices and **Azure Service
    Fabric**. In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及令人兴奋的微服务世界和**Azure Service Fabric**。在本章中，我们将涵盖以下食谱：
- en: Downloading and installing Service Fabric
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装 Service Fabric
- en: Creating a Service Fabric application with a stateless actor service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无状态actor服务创建 Service Fabric 应用程序
- en: Using Service Fabric Explorer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Service Fabric Explorer
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Traditionally, developers wrote applications in a monolithic manner. This means
    one single executable that is broken up into components via classes and so on.
    Monolithic applications require a great deal of testing, and deployment is tedious
    due to the bulkiness of the monolithic application. Even though you might have
    multiple developer teams, they all need to have a solid understanding of the application
    as a whole.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，开发者以单体方式编写应用程序。这意味着一个单一的可执行文件，通过类等组件被分割。单体应用程序需要大量的测试，并且由于单体应用程序的庞大，部署过程繁琐。即使你有多个开发团队，他们也需要对整个应用程序有一个稳固的理解。
- en: Microservices is a technology that aims to address the issues surrounding monolithic
    applications and the traditional way of developing applications. With microservices,
    you can break the application into smaller bits (services) that can function on
    their own without being dependent on any of the other services. These smaller
    services can be stateless or stateful and are also smaller in scale in terms of
    functionality, making them easier to develop, test, and deploy. You can also version
    each microservice independently from the others. If one microservice is receiving
    more load than the others, you can scale only that service up to meet the demands
    placed on it. With monolithic applications, you would have to try and scale the
    whole application up in order to meet the demands for a single component within
    the application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是一种旨在解决单体应用程序和传统应用程序开发方式问题的技术。使用微服务，你可以将应用程序分解成更小的部分（服务），这些服务可以独立运行，不依赖于其他任何服务。这些较小的服务可以是无状态的或是有状态的，在功能规模上也比较小，这使得它们更容易开发、测试和部署。你还可以独立于其他服务对每个微服务进行版本控制。如果一个微服务比其他微服务接收更多的负载，你可以仅将该服务扩展以满足其需求。对于单体应用程序，你必须尝试扩展整个应用程序以满足应用程序中单个组件的需求。
- en: Take, for example, the workings of a popular online web store. It could consist
    of a shopping cart, shopper profile, order management, backend login, inventory
    management, billing, returns, and much more. Traditionally, a single web application
    is created to provide all these services. With microservices, you can isolate
    each service as a standalone, self-contained bit of functionality and code base.
    You can also dedicate a team of developers to work on a single portion of the
    web store. If this team is responsible for the inventory-management microservice,
    they would handle every aspect of it. This, for example, means everything from
    writing code and enhancing functionality, to testing and deployment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个流行的在线网店为例，其运作可能包括购物车、购物者资料、订单管理、后端登录、库存管理、计费、退货等更多功能。传统上，会创建一个单独的Web应用程序来提供所有这些服务。使用微服务，你可以将每个服务隔离为独立的、自包含的功能和代码库。你也可以指派一个开发团队专注于网店的一个部分。如果这个团队负责库存管理微服务，他们将处理其所有方面。例如，这意味着从编写代码和增强功能到测试和部署的每一个环节。
- en: Another excellent side effect of microservices is that it allows you to easily
    isolate any faults you might come across. Finally, you can also create microservices
    in any technology you want (C#, Java, VB.NET), as they are language independent.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的另一个优秀副作用是它允许你轻松隔离可能遇到的任何故障。最后，你还可以使用任何你想要的任何技术（C#、Java、VB.NET）创建微服务，因为它们是语言无关的。
- en: Azure Service Fabric allows you to scale your microservices easily and increases
    application availability because it implements failover. When microservices are
    used with Fabric, microservices become a very powerful technology. Think of Azure
    Service Fabric as a **Platform as a Service** (**PaaS**) solution, on top of which
    your microservices sit. We call the collection that the microservices live on
    a Service Fabric cluster. Each microservice lives on a virtual machine, which
    is referred to as a node in the Service Fabric cluster. This Service Fabric cluster
    can live in the cloud or on a local machine. If a node becomes unavailable for
    any reason, the Service Fabric cluster will automatically redistribute the microservices
    to the other nodes so that the application remains available.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Fabric允许您轻松扩展微服务并提高应用程序的可用性，因为它实现了故障转移。当与Fabric一起使用时，微服务成为一项非常强大的技术。将Azure
    Service Fabric视为**平台即服务**（**PaaS**）解决方案，您的微服务位于其上。我们称微服务所在的集合为Service Fabric集群。每个微服务都位于一个虚拟机上，在Service
    Fabric集群中被称为节点。这个Service Fabric集群可以存在于云中或本地机器上。如果某个节点因任何原因变得不可用，Service Fabric集群将自动将微服务重新分配到其他节点，以确保应用程序保持可用。
- en: Finally, here is a word on the differences between stateful and stateless microservices.
    You are able to create a microservice as stateless or stateful. When a microservice
    relies on an external data store to persist data, it is stateless in nature. This
    simply means that the microservice does not maintain its state internally. A stateful
    microservice, on the other hand, maintains its own state by storing it locally
    on the server it resides on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于有状态和无状态微服务的区别，这里有一句话要说。您可以将微服务创建为有状态或无状态。当一个微服务依赖于外部数据存储来持久化数据时，它本质上是无状态的。这仅仅意味着微服务不内部维护其状态。另一方面，有状态的微服务通过在它所在的本地服务器上存储来维护其状态。
- en: Downloading and installing Service Fabric
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装Service Fabric
- en: You will have to install and set up a local Service Fabric cluster on your PC
    before you can create and test Service Fabric applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在您能够创建和测试Service Fabric应用程序之前，您必须在您的PC上安装和设置一个本地Service Fabric集群。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will download and install the **software development kit** (**SDK**) from
    the Azure site. This will allow us to create a local Service Fabric cluster on
    your local development machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Azure网站下载并安装**软件开发工具包**（**SDK**），这将允许我们在您的本地开发机器上创建一个本地Service Fabric集群。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: From the Microsoft Azure site, download the SDK and access other resources,
    such as documentation, via the Service Fabric learning path, from [https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/](https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/):![How
    to do it…](img/B05391_05_01.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Microsoft Azure网站下载SDK，并通过Service Fabric学习路径访问其他资源，例如文档，请访问[https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/](https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/)：![如何操作…](img/B05391_05_01.jpg)
- en: You will need to accept the license terms before the installation begins:![How
    to do it…](img/B05391_05_02.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装开始之前，您需要接受许可条款：![如何操作…](img/B05391_05_02.jpg)
- en: The web platform installer then starts downloading the Microsoft Azure Service
    Fabric runtime. Allow this process to complete:![How to do it…](img/B05391_05_03.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后Web平台安装程序开始下载Microsoft Azure Service Fabric运行时。请允许此过程完成：![如何操作…](img/B05391_05_03.jpg)
- en: After the download has completed, the install process will begin:![How to do
    it…](img/B05391_05_04.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，安装过程将开始：![如何操作…](img/B05391_05_04.jpg)
- en: 'When the installation has completed, the following products would have been
    installed, which is also evident in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，以下产品将被安装，这也在下面的屏幕截图中显而易见：
- en: Microsoft Azure Service Fabric Runtime
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure Service Fabric运行时
- en: Microsoft Azure Service Fabric Core SDK Preview
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure Service Fabric Core SDK预览版
- en: Microsoft Azure Service Fabric Visual Studio 2015 Tools Preview
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure Service Fabric Visual Studio 2015工具预览版
- en: Microsoft Azure Service Fabric SDK Preview
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure Service Fabric SDK预览版
- en: '![How to do it…](img/B05391_05_05.jpg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/B05391_05_05.jpg)'
- en: The next task is to open PowerShell as the administrator. In the Windows 10
    Start menu, type the word `PowerShell`, and the search will immediately return
    the desktop application as a result. Right-click on the desktop application and
    select **Run as administrator** from the context menu:![How to do it…](img/B05391_05_06.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个任务是作为管理员打开 PowerShell。在 Windows 10 开始菜单中输入单词 `PowerShell`，搜索将立即返回桌面应用程序作为结果。右键单击桌面应用程序，并在上下文菜单中选择
    **以管理员身份运行**：![如何操作…](img/B05391_05_06.jpg)
- en: Once Windows PowerShell has opened up, run the `Set-ExecutionPolicy -ExecutionPolicy
    Unrestricted -Force -Scope CurrentUser` command. The reason for this is that Service
    Fabric uses PowerShell scripts for the creation of the local development cluster.
    It is also used for the deployment of Visual Studio developed apps. Running this
    command prevents Windows from blocking those scripts:![How to do it…](img/B05391_05_07.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Windows PowerShell 打开，运行命令 `Set-ExecutionPolicy -ExecutionPolicy Unrestricted
    -Force -Scope CurrentUser`。这样做的原因是 Service Fabric 使用 PowerShell 脚本创建本地开发集群。它还用于部署
    Visual Studio 开发的应用程序。运行此命令可以防止 Windows 阻止这些脚本：![如何操作…](img/B05391_05_07.jpg)
- en: Next, create the local Service Fabric cluster. Enter the `& "$ENV:ProgramFiles\Microsoft
    SDKs\Service Fabric\ClusterSetup\DevClusterSetup.ps1"` command.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建本地 Service Fabric 集群。输入命令 `& "$ENV:ProgramFiles\Microsoft SDKs\Service
    Fabric\ClusterSetup\DevClusterSetup.ps1"`。
- en: 'This will create the local cluster needed to host Service Fabric applications:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建托管 Service Fabric 应用程序所需的本地集群：
- en: '![How to do it…](img/B05391_05_08.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/B05391_05_08.jpg)'
- en: After the cluster is created, PowerShell will start the service:![How to do
    it…](img/B05391_05_09.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群创建后，PowerShell 将启动服务：![如何操作…](img/B05391_05_09.jpg)
- en: The process might take several minutes. Be sure to let it complete:![How to
    do it…](img/B05391_05_10.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此过程可能需要几分钟。请确保让它完成：![如何操作…](img/B05391_05_10.jpg)
- en: Once the naming service is ready, you can close PowerShell:![How to do it…](img/B05391_05_11.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦命名服务就绪，您可以关闭 PowerShell：![如何操作…](img/B05391_05_11.jpg)
- en: To view the created cluster, you can navigate to `http://localhost:19080/Explorer`
    on your local machine.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看创建的集群，您可以在本地计算机上导航到 `http://localhost:19080/Explorer`。
- en: 'This will give you a snapshot of the cluster''s health and state. It will also
    show any applications running in the cluster:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将为您提供集群的健康状况和状态的快照。它还将显示集群中运行的应用程序：
- en: '![How to do it…](img/B05391_05_12.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/B05391_05_12.jpg)'
- en: How it works…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As you can see, the Service Fabric cluster is essential for creating and running
    applications created in Visual Studio. This will allow us to test applications
    directly on your local machine before publishing them to the cloud.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Service Fabric 集群对于创建和运行在 Visual Studio 中创建的应用程序至关重要。这将允许我们在将它们发布到云之前，直接在您的本地计算机上测试应用程序。
- en: Creating a Service Fabric application with a stateless actor service
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建具有无状态演员服务的状态化 Service Fabric 应用程序
- en: As part of the introduction to this chapter, we looked at the difference between
    stateful and stateless microservices. The Service Fabric application templates
    available are then further divided into **Reliable Services** (stateful/stateless)
    and **Reliable Actors** (stateful/stateless). When to use which one is something
    that will depend on the specific business requirement of your application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章介绍的组成部分，我们探讨了有状态和无状态微服务的区别。可用的 Service Fabric 应用程序模板进一步分为 **可靠服务**（有状态/无状态）和
    **可靠演员**（有状态/无状态）。何时使用哪一个将取决于您应用程序的具体业务需求。
- en: To put it simply though, if you wanted to create a service that should be exposed
    to many users of your application at any one time, a Reliable Service would probably
    be a good fit. Think of a service exposing the latest exchange rates that can
    be consumed by many users or applications at once.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，如果您想创建一个应该向任何时间点上的许多应用程序用户公开的服务，一个可靠服务可能是一个不错的选择。想象一下，一个公开最新汇率的服务，可以被许多用户或应用程序同时消费。
- en: Again, looking back to the introduction of this chapter, we used the example
    of an online web store with a shopping cart. A Reliable Actor could be a good
    fit for every customer buying items, so you could have a shopping cart actor.
    The Reliable Actor as part of the Service Fabric framework is based on the Virtual
    Actor pattern. Have a look at the article on the Virtual Actor pattern at [http://research.microsoft.com/en-us/projects/orleans/](http://research.microsoft.com/en-us/projects/orleans/).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，回顾本章的引言部分，我们使用了在线网店和购物车的例子。可靠的演员可以很好地适应每个购买商品的客户，因此你可以有一个购物车演员。作为服务框架框架的一部分，可靠的演员基于虚拟演员模式。查看有关虚拟演员模式的文章，请访问[http://research.microsoft.com/en-us/projects/orleans/](http://research.microsoft.com/en-us/projects/orleans/)。
- en: To show you how easy it is to create a microservice using a stateless actor
    service as an example, we will use Visual Studio to publish a service to the Service
    Fabric cluster and call that service from a console (client) application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示使用无状态演员服务作为示例创建微服务是多么容易，我们将使用Visual Studio将服务发布到服务框架集群，并从控制台（客户端）应用程序调用该服务。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To complete this recipe, you must ensure that you have installed your local
    Service Fabric cluster on your local machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，你必须确保你在本地机器上安装了你的本地服务框架集群。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: In Visual Studio, create a new project by going to **File** | **New** | **Project**:![How
    to do it…](img/B05391_05_13.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，通过转到**文件** | **新建** | **项目**来创建一个新的项目。![如何做…](img/B05391_05_13.jpg)
- en: From the **Visual C#** node, expand the nodes until you see the **Cloud** node.
    When you click on it, you will see that Visual Studio now lists a new **Service
    Fabric Application** template. Select the **Service Fabric Application** template,
    call it `sfApp`, and click on **OK**:![How to do it…](img/B05391_05_14.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Visual C#**节点展开节点，直到你看到**云**节点。当你点击它时，你会看到Visual Studio现在列出了一个名为**服务框架应用程序**的新模板。选择**服务框架应用程序**模板，命名为`sfApp`，然后点击**确定**。![如何做…](img/B05391_05_14.jpg)
- en: Next, select **Stateless Reliable** **Actor** from the **Create a Service**
    window that pops up. We just called ours `UtilitiesActor`:![How to do it…](img/B05391_05_15.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从弹出的**创建服务**窗口中选择**无状态可靠** **演员**。我们将其命名为`UtilitiesActor`：![如何做…](img/B05391_05_15.jpg)
- en: 'Once your solution is created, you will notice that it consists of three projects.
    These are:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你的解决方案创建完成，你会注意到它由三个项目组成。这些是：
- en: '`sfApp`'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sfApp`'
- en: '`UtilitiesActor`'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UtilitiesActor`'
- en: '`UtilitiesActor.Interfaces`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UtilitiesActor.Interfaces`'
- en: '![How to do it…](img/B05391_05_22.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/B05391_05_22.jpg)'
- en: 'We will start off by modifying the `IUtilitiesActor` interface. This interface
    will simply require that `UtilitiesActor` implements a method called `ValidateEmailAsync`
    that takes an e-mail address as a parameter and returns a Boolean value indicating
    whether it is a valid email address or not:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先修改`IUtilitiesActor`接口。这个接口将简单地要求`UtilitiesActor`实现一个名为`ValidateEmailAsync`的方法，该方法接受一个电子邮件地址作为参数，并返回一个布尔值，表示它是否是一个有效的电子邮件地址：
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, open up your `UtilitiesActor` project and view the class. It will be underlined
    with a red squiggly line because it does not implement the interface member `ValidateEmailAsync()`:![How
    to do it…](img/B05391_05_16.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开你的`UtilitiesActor`项目并查看类。它将用红色波浪线标记，因为它没有实现接口成员`ValidateEmailAsync()`：![如何做…](img/B05391_05_16.jpg)
- en: Using *Ctrl* + *.* (period), implement the interface. Remove all the other unnecessary
    default code (if any):![How to do it…](img/B05391_05_17.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *.*（句号），实现接口。删除所有其他不必要的默认代码（如果有）：![如何做…](img/B05391_05_17.jpg)
- en: 'The implemented interface code inserted for you should look like this. At the
    moment, it only contains `NotImplementedException`. It is here that we will implement
    the code to validate the e-mail address:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您插入的实现接口代码应如下所示。目前，它只包含`NotImplementedException`。这就是我们将实现代码以验证电子邮件地址的地方：
- en: '[PRE1]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will use a regular expression to validate the e-mail address passed to this
    method via the parameter. Regular expressions are very powerful. I have, however,
    in all my years of programming, never written my own expression. These are readily
    available on the Internet, and you can create a utilities class (or extension
    methods class) for your own projects to reuse. You can make use of regular expressions
    and other code that is often used.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用正则表达式来验证通过参数传递给此方法的电子邮件地址。正则表达式非常强大。然而，在我的编程生涯中，我从未自己编写过表达式。这些在互联网上很容易找到，并且您可以为您的项目创建一个实用工具类（或扩展方法类）以供重用。您可以使用正则表达式和其他常用代码。
- en: 'Finally, you will notice the `ActorEventSource` code. This is simply just to
    create **Event Tracing for Windows** (**ETW**) events that will help you see what
    is happening in your application from the diagnostic events window in Visual Studio.
    To open the diagnostic events window, go to **View**, **Other Windows** and click
    on **Diagnostic Events Viewer**:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，您将注意到 `ActorEventSource` 代码。这只是为了创建 **Windows 事件跟踪** (**ETW**) 事件，这些事件将帮助您从
    Visual Studio 的诊断事件窗口中查看应用程序中的情况。要打开诊断事件窗口，请转到 **视图**，**其他窗口**，然后单击 **诊断事件查看器**：
- en: '[PRE2]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Be sure to add a reference to the `System.Text.RegularExpressions` namespace.
    Without it, you will not be able to use the regular expressions. If you added
    the regular expression in your code without adding the reference, Visual Studio
    will display a red squiggly line under the `Regex` method:![How to do it…](img/B05391_05_18.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一定要添加对 `System.Text.RegularExpressions` 命名空间的引用。没有它，您将无法使用正则表达式。如果您在代码中添加了正则表达式而没有添加引用，Visual
    Studio 将在 `Regex` 方法下显示一条红色的波浪线：![如何操作…](img/B05391_05_18.jpg)
- en: Using *Ctrl* + *.* (period), add the `using` statement to your project. This
    will bring the regular expression namespace into scope:![How to do it…](img/B05391_05_19.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *Ctrl* + *.* (句点)，将 `using` 语句添加到您的项目中。这将把正则表达式命名空间引入作用域：![如何操作…](img/B05391_05_19.jpg)
- en: Now that we have created the interface and also added the implementation of
    that interface, it is time to add a client application that we will use for testing.
    Right-click on your solution and add a new project:![How to do it…](img/B05391_05_20.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了接口，并添加了该接口的实现，是时候添加一个我们将用于测试的客户端应用程序了。在您的解决方案上右键单击，然后添加一个新项目：![如何操作…](img/B05391_05_20.jpg)
- en: The easiest way is to add a simple console application. Call your client application
    `sfApp.Client` and click on the **OK** button:![How to do it…](img/B05391_05_21.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最简单的方法是添加一个简单的控制台应用程序。将您的客户端应用程序命名为 `sfApp.Client` 并单击 **确定** 按钮：![如何操作…](img/B05391_05_21.jpg)
- en: After you have added your console application to your solution, your solution
    should look like this:![How to do it…](img/B05391_05_23.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您将控制台应用程序添加到解决方案后，您的解决方案应如下所示：![如何操作…](img/B05391_05_23.jpg)
- en: You will now need to add references to your client application. Right-click
    the **References** node in your `sfApp.Client` project and select **Add Reference**
    from the context menu:![How to do it…](img/B05391_05_24.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要添加对您的客户端应用程序的引用。在 `sfApp.Client` 项目的 **引用** 节点处右键单击，并从上下文菜单中选择 **添加引用**：![如何操作…](img/B05391_05_24.jpg)
- en: Start off by adding a reference to the `UtilitiesActor.Interfaces` project:![How
    to do it…](img/B05391_05_25.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对 `UtilitiesActor.Interfaces` 项目的引用：![如何操作…](img/B05391_05_25.jpg)
- en: You will also need to add references to several Service Fabric **dynamic link
    libraries** (**DLLs**). When you created your Service Fabric application, it should
    have added a folder called `packages` to your project folder structure. Browse
    to this folder and add your Service Fabric DLLs from there. After you have added
    the required DLLs, your project should look like this:![How to do it…](img/B05391_05_29.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要添加对几个 Service Fabric **动态链接库** (**DLL**) 的引用。当您创建 Service Fabric 应用程序时，它应该在项目文件夹结构中添加一个名为
    `packages` 的文件夹。浏览到该文件夹，并从那里添加您的 Service Fabric DLL。在添加了所需的 DLL 之后，您的项目应如下所示：![如何操作…](img/B05391_05_29.jpg)
- en: 'In the `Program.cs` file of your console application, you need to add the following
    code to the `Main` method:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的控制台应用程序的 `Program.cs` 文件中，您需要在 `Main` 方法中添加以下代码：
- en: '[PRE3]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All we are doing is creating a proxy for our actor and writing the output of
    the e-mail validation to the console window. Your client application is now ready.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们所做的一切只是为我们的演员创建一个代理，并将电子邮件验证的输出写入控制台窗口。您的客户端应用程序现在已准备就绪。
- en: Before we can run the client application, however, we need to publish our service
    first. In **Solution Explorer**, right-click on the `sfApp` service and click
    on **Publish** from the context menu:![How to do it…](img/B05391_05_26.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们能够运行客户端应用程序之前，然而，我们首先需要发布我们的服务。在**解决方案资源管理器**中，右键单击`sfApp`服务，然后从上下文菜单中选择**发布**：![如何操作…](img/B05391_05_26.jpg)
- en: The **Publish** **Service Fabric Application** window will now be displayed.
    Click on the **Select…** button next to the **Connection endpoint** text box:![How
    to do it…](img/B05391_05_27.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将显示**发布Service Fabric应用程序**窗口。单击**连接端点**文本框旁边的**选择…**按钮：![如何操作…](img/B05391_05_27.jpg)
- en: Select **Local Cluster** as your **Connection endpoint** and click on **OK**:![How
    to do it…](img/B05391_05_28.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**连接端点**选择为**本地集群**，然后单击**确定**：![如何操作…](img/B05391_05_28.jpg)
- en: Change **Target profile** and **Application** **Parameters File** to `Local.xml`.
    When you are done, click on the **Publish** button:![How to do it…](img/B05391_05_30.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**目标配置文件**和**应用程序参数文件**更改为`Local.xml`。完成后，单击**发布**按钮：![如何操作…](img/B05391_05_30.jpg)
- en: If you navigate to `http://localhost:19080/Explorer`, you will notice that the
    service you created has been published to your local Service Fabric cluster:![How
    to do it…](img/B05391_05_31.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你导航到`http://localhost:19080/Explorer`，你会注意到你创建的服务已经发布到你的本地Service Fabric集群中：![如何操作…](img/B05391_05_31.jpg)
- en: You are now ready to run your client application. Right-click on the `sfApp.Client`
    project, and select **Debug** and **Start new instance** from the context menu:![How
    to do it…](img/B05391_05_32.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你已准备好运行你的客户端应用程序。右键单击`sfApp.Client`项目，然后从上下文菜单中选择**调试**和**启动新实例**：![如何操作…](img/B05391_05_32.jpg)
- en: The console application calls the validate method to check the e-mail addresses,
    and displays the results to the console window. The results are as expected:![How
    to do it…](img/B05391_05_33.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台应用程序调用验证方法来检查电子邮件地址，并将结果显示在控制台窗口中。结果符合预期：![如何操作…](img/B05391_05_33.jpg)
- en: 'We can, however, be more specific when creating the actor ID. We can give it
    a specific name. Modify your proxy code and create a new `ActorId` method, and
    give it any string value:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，在创建actor ID时，我们可以更加具体。我们可以给它一个特定的名称。修改你的代理代码，并创建一个新的`ActorId`方法，并给它任何字符串值：
- en: '[PRE4]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `ActorId` method can take a parameter of type `Guid`, `long` or `string`.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ActorId`方法可以接受类型为`Guid`、`long`或`string`的参数。'
- en: When you debug your client application again, you will notice that `Utilities
    Actor` now has a logical name (the same name you passed as a string value when
    creating a new `ActorId` method):![How to do it…](img/B05391_05_34.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你再次调试你的客户端应用程序时，你会注意到`Utilities Actor`现在有一个逻辑名称（当你创建新的`ActorId`方法时传递的字符串值相同的名称）：![如何操作…](img/B05391_05_34.jpg)
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Creating your Service Fabric application and publishing it locally is a perfect
    solution for testing your application before publishing it to the cloud. Creating
    small independent microservices allows developers many benefits related to testing,
    debugging, and deploying efficient and robust code that your applications can
    leverage to ensure maximum availability.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建你的Service Fabric应用程序并在本地发布是一个在将其发布到云之前测试应用程序的完美解决方案。创建小型独立的微服务可以让开发者获得许多与测试、调试和部署高效且健壮的代码相关的优势，这些代码可以让你的应用程序利用以确保最大可用性。
- en: Using Service Fabric Explorer
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Service Fabric Explorer
- en: There is another tool that you can use to visualize the Service Fabric cluster.
    It is a standalone tool that you can find by navigating to the local installation
    path at `%Program Files%\Microsoft SDKs\Service Fabric\Tools\ServiceFabricExplorer`
    and clicking on `ServiceFabricExplorer.exe`. When you run the application, it
    will automatically connect to your local Service Fabric cluster. It can display
    rich information regarding the applications on the cluster, the cluster nodes,
    the heath status of the applications and nodes, and any load on the applications
    in the cluster.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用另一个工具来可视化Service Fabric集群。这是一个独立的工具，你可以通过导航到本地安装路径`%Program Files%\Microsoft
    SDKs\Service Fabric\Tools\ServiceFabricExplorer`并单击`ServiceFabricExplorer.exe`来找到它。当你运行应用程序时，它将自动连接到你的本地Service
    Fabric集群。它可以显示有关集群中的应用程序、集群节点、应用程序和节点的健康状态以及集群中应用程序的任何负载的丰富信息。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You must have already completed the installation of Service Fabric on your local
    machine for the Service Fabric Explorer to work. If you have not done so yet,
    follow the *Downloading and installing Service Fabric* recipe in this chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须已经在本机完成了 Service Fabric 的安装，以便 Service Fabric Explorer 能够正常工作。如果您还没有这样做，请遵循本章中的
    *下载和安装 Service Fabric* 菜单。
- en: How to do it…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: When you start the Service Fabric Explorer, the following window will appear:![How
    to do it…](img/B05391_05_35.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您启动 Service Fabric Explorer 时，将出现以下窗口：![如何操作…](img/B05391_05_35.jpg)
- en: Note that the tree view to the left displays **Application View** and **Node
    View**:![How to do it…](img/B05391_05_36.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意左侧的树视图显示 **应用视图** 和 **节点视图**：![如何操作…](img/B05391_05_36.jpg)
- en: The pane on the right-hand side will display information regarding the local
    cluster. This makes it easy for you to see the overall health of the local Service
    cluster:![How to do it…](img/B05391_05_37.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右侧面板将显示有关本地集群的信息。这使得您很容易看到本地服务集群的整体健康状况：![如何操作…](img/B05391_05_37.jpg)
- en: When you expand **Application View**, you will notice that our `sfApp` service
    has been published. Expanding it even further, you will see that the `sfApp` service
    has been published on **Node.2**. Expand **Node View** and **Node.2** to see the
    service active on that node:![How to do it…](img/B05391_05_38.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您展开 **应用视图** 时，您会注意到我们的 `sfApp` 服务已经发布。进一步展开，您会看到 `sfApp` 服务已经在 **Node.2**
    上发布。展开 **节点视图** 和 **Node.2** 以查看在该节点上活动的服务：![如何操作…](img/B05391_05_38.jpg)
- en: To illustrate the scalability of microservices, right-click on **Node.2**, and
    from the context menu, stop the node. Then, click on the Refresh button at the
    top of the window to refresh the nodes and applications.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了说明微服务的可伸缩性，右键单击 **Node.2**，然后在上下文菜单中停止该节点。然后，点击窗口顶部的刷新按钮以刷新节点和应用。
- en: If you now had to go ahead and expand **Application View**, and looked at the
    service again, you will notice that the Service Fabric cluster noticed that **Node.2**
    was down. It then automatically pushed the service on to a new, healthy node (in
    this case, **Node.5**):![How to do it…](img/B05391_05_40.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在继续展开 **应用视图** 并再次查看服务，您会注意到 Service Fabric 集群已经注意到 **Node.2** 已关闭。然后它自动将服务推送到一个新的、健康的节点（在本例中为
    **Node.5**）：![如何操作…](img/B05391_05_40.jpg)
- en: The local cluster nodes view in the right panel of the Service Fabric Explorer
    also reports that **Node.2** is down:![How to do it…](img/B05391_05_41.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Service Fabric Explorer 右侧面板中的本地集群节点视图也报告说 **Node.2** 已关闭：![如何操作…](img/B05391_05_41.jpg)
- en: How it works…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The Service Fabric Explorer will allow you to see information on the selected
    node, and you will be able to drill down and see a rich amount of information
    regarding the Service Fabric cluster applications.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Service Fabric Explorer 将允许您查看所选节点的信息，并且您将能够深入查看有关 Service Fabric 集群应用的丰富信息。
