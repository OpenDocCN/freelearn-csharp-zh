- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Hot Dog or Not Hot Dog Using Machine Learning
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热狗还是非热狗：使用机器学习
- en: In this chapter, we will learn how to use machine learning to create a model
    that we can use for image classification. We will export the model as an **Onnx**
    model that we can use on all platforms – that is, Android, iOS, macOS, and Windows.
    To train and export models, we will use Azure Cognitive Services and the Custom
    Vision service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用机器学习创建一个模型，我们可以用它来进行图像分类。我们将导出为**Onnx**模型，这样我们就可以在所有平台上使用它——也就是说，Android、iOS、macOS和Windows。为了训练和导出模型，我们将使用Azure认知服务和自定义视觉服务。
- en: Once we have exported the models, we will learn how to use them in a .NET MAUI
    app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导出了模型，我们将学习如何在.NET MAUI应用程序中使用它们。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Training a model with Azure Cognitive Services and the Custom Vision service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure认知服务和自定义视觉服务训练模型
- en: Using Onnx models for image classification using ML.NET
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ML.NET和Onnx模型进行图像分类
- en: Using custom routes in .NET MAUI for navigation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在.NET MAUI中使用自定义路由进行导航
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To be able to complete this project, you need to have Visual Studio for Mac
    or PC installed, as well as the .NET MAUI components. See *Chapter 1*, *Introduction
    to .NET MAUI*, for more details on how to set up your environment. You also need
    an Azure account. If you have a Visual Studio subscription, there are a specific
    amount of Azure credits included each month. To activate your Azure benefits,
    go to [https://my.visualstudio.com](https://my.visualstudio.com).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够完成这个项目，你需要安装Visual Studio for Mac或PC，以及.NET MAUI组件。有关如何设置环境的更多详细信息，请参阅*第1章*，*.NET
    MAUI简介*。你还需要一个Azure账户。如果你有Visual Studio订阅，每个月包含一定数量的Azure积分。要激活你的Azure福利，请访问[https://my.visualstudio.com](https://my.visualstudio.com)。
- en: You can also create a free account, where you can use selected services for
    free over 12 months. You will get $200 worth of credit to explore any Azure service
    for 30 days, and you can also use the free services at any time. Read more at
    [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以创建一个免费账户，在那里你可以免费使用选定的服务长达12个月。你将获得价值200美元的积分，用于探索任何Azure服务30天，你还可以随时使用免费服务。更多信息请参阅[https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)。
- en: If you do not have and do not want to sign up for a free Azure account, the
    trained model is available in the source code for this chapter. You can download
    and use the pre-trained model instead.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有并且不想注册免费的Azure账户，本章源代码中提供了训练好的模型。你可以下载并使用预训练模型。
- en: The source code for this chapter is available at the GitHub repository for the
    book at [https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition](https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在本书的GitHub仓库[https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition](https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition)中找到。
- en: Machine learning
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习
- en: 'The term **machine learning** was coined in 1959 by Arthur Samuel, an American
    pioneer in **artificial intelligence** (**AI**). Tom M. Mitchell, an American
    computer scientist, provided the following more formal definition of machine learning
    later:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**机器学习**由1959年的美国人工智能先驱Arthur Samuel提出。美国计算机科学家Tom M. Mitchell后来提供了以下更正式的机器学习定义：
- en: “A computer program is said to learn from experience E with respect to some
    class of tasks T and performance measure P if its performance at tasks in T, as
    measured by P, improves with experience E.”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “如果一个计算机程序在任务T和性能度量P方面从经验E中学习，那么它的性能随着经验E的提高而提高。”
- en: In simpler terms, this quote describes a computer program that can learn without
    being explicitly programmed. In machine learning, algorithms are used to build
    a mathematical model of sample data or training data. The models are used for
    computer programs to make predictions and decisions without being explicitly programmed
    for the task in question.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用更简单的话说，这句话描述了一个可以不经过明确编程就能学习的计算机程序。在机器学习中，算法用于构建样本数据或训练数据的数学模型。这些模型用于计算机程序，以便在没有为特定任务明确编程的情况下做出预测和决策。
- en: In this section, we will learn about a few different machine learning services
    and APIs that are available when developing a .NET MAUI application. Some APIs
    are only available for specific platforms, such as Core ML, while others are cross-platform.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解一些不同的机器学习服务和API，这些服务和API在开发.NET MAUI应用程序时可用。一些API仅适用于特定平台，如Core ML，而其他则是跨平台的。
- en: Azure Cognitive Services – Custom Vision
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 认知服务 – 定制视觉
- en: Custom Vision is a tool or service that can be used to train models for image
    classification and to detect objects in images. With Custom Vision, we can upload
    our own images and tag them so that they can be trained for image classification.
    If we train a model for object detection, we can also tag specific areas of an
    image. Because models are already pre-trained for basic image recognition, we
    don’t need a large amount of data to get a great result. The recommendation is
    to have at least 30 images per tag.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定制视觉是一个工具或服务，可以用来训练图像分类模型和检测图像中的对象。使用定制视觉，我们可以上传自己的图像并对其进行标记，以便进行图像分类训练。如果我们为对象检测训练一个模型，我们还可以标记图像的特定区域。因为模型已经为基本图像识别进行了预训练，所以我们不需要大量的数据就能得到很好的结果。建议每个标签至少有
    30 张图像。
- en: When we have trained a model, we can use it with an API, which is part of the
    Custom Vision service. We can also export models for **Core ML** (**iOS**), **TensorFlow**
    (**Android**), the **Open Neural Network Exchange** (**ONNX**), and a **Dockerfile**
    (**Azure IoT Edge**, **Azure Functions**, and **Azure ML**). These models can
    be used to carry out classification or object detection without being connected
    to the Custom Vision service.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们训练了一个模型后，我们可以使用 API 来使用它，这是定制视觉服务的一部分。我们还可以导出模型用于 **Core ML**（**iOS**）、**TensorFlow**（**Android**）、**Open
    Neural Network Exchange**（**ONNX**）以及 **Dockerfile**（**Azure IoT Edge**、**Azure
    Functions** 和 **Azure ML**）。这些模型可以在不连接到定制视觉服务的情况下执行分类或对象检测。
- en: You will need an Azure subscription to use it – go to [https://azure.com/free](https://azure.com/free)
    to create a free subscription, which should be enough to complete this project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用它需要 Azure 订阅 - 请访问 [https://azure.com/free](https://azure.com/free) 创建一个免费订阅，这应该足以完成此项目。
- en: Core ML
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Core ML
- en: 'Core ML is a framework that was introduced in iOS 11\. Core ML makes it possible
    to integrate machine learning models into iOS apps. On top of Core ML, we have
    high-level APIs, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Core ML 是在 iOS 11 中引入的一个框架。Core ML 使得将机器学习模型集成到 iOS 应用中成为可能。在 Core ML 的基础上，我们还有以下高级
    API：
- en: Vision APIs for image analysis
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于图像分析的视觉 API
- en: Natural language APIs for natural language processing
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于自然语言处理的自然语言 API
- en: Speech to convert audio to text
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将音频转换为文本的语音识别
- en: Sound analysis to identify sounds in audio
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音分析以识别音频中的声音
- en: GameplayKit to evaluate learned decision trees and strategies
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GameplayKit 评估学习到的决策树和策略
- en: More information
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: More information about Core ML can be found in the official documentation from
    Apple at [https://developer.apple.com/documentation/coreml](https://developer.apple.com/documentation/coreml).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Core ML 的信息可以在苹果官方文档中找到，请访问 [https://developer.apple.com/documentation/coreml](https://developer.apple.com/documentation/coreml)。
- en: TensorFlow
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TensorFlow
- en: TensorFlow is an open source machine learning framework. However, TensorFlow
    can be used for more than simply running models on mobile devices – it can also
    be used to train models. To run it on mobile devices, we have TensorFlow Lite.
    The models that are exported from Azure Cognitive Services are for TensorFlow
    Lite. There are also C# bindings for TensorFlow Lite that are available as a NuGet
    package.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 是一个开源的机器学习框架。然而，TensorFlow 不仅可以用在移动设备上运行模型，还可以用来训练模型。要在移动设备上运行它，我们使用
    TensorFlow Lite。从 Azure 认知服务导出的模型是为 TensorFlow Lite 设计的。还有 TensorFlow Lite 的 C#
    绑定，它作为一个 NuGet 包提供。
- en: More information
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息
- en: More information about TensorFlow can be found in the official documentation
    at [https://www.tensorflow.org/](https://www.tensorflow.org/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 TensorFlow 的信息可以在官方文档中找到，请访问 [https://www.tensorflow.org/](https://www.tensorflow.org/)。
- en: ML.Net
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ML.Net
- en: 'ML.NET is an open source and cross-platform machine learning framework with
    support for iOS, macOS, Android, and Windows, all from a familiar environment
    – C#. ML.NET provides **AutoML**, a set of productivity tools that make building,
    training, and deploying custom models easy. ML.NET can be used in the following
    scenarios and more:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ML.Net 是一个开源且跨平台的机器学习框架，支持 iOS、macOS、Android 和 Windows，所有这些都可以在熟悉的环境中完成 - C#。ML.Net
    提供了 **AutoML**，一套生产力工具，使构建、训练和部署自定义模型变得简单。ML.Net 可以用于以下场景和更多：
- en: Sentiment analysis and product recommendation
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情感分析和产品推荐
- en: Object detection and image classification
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标检测和图像分类
- en: Price prediction, sales spike detection, and forecasting
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格预测、销售峰值检测和预测
- en: Fraud detection
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺诈检测
- en: Customer segmentation
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户细分
- en: Now that we have a broad overview of the technologies at play, we will focus
    on using ML.NET, since it is a cross-platform framework and built for C#. Let’s
    look at the project we are going to build next.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对正在使用的技术的概览已经比较广泛了，我们将专注于使用 ML.NET，因为它是一个跨平台框架，专为 C# 构建。让我们看看我们接下来要构建的项目。
- en: The project overview
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概览
- en: If you have seen the TV series *Silicon Valley*, you have probably heard of
    the *Not Hotdog* application. In this chapter, we will learn how to build that
    app. The first part of this chapter will involve collecting the data that we will
    use to create a machine learning model that can detect whether a photo contains
    a hot dog.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看过电视剧 *硅谷*，你可能已经听说过 *Not Hotdog* 应用程序。在本章中，我们将学习如何构建这个应用程序。本章的第一部分将涉及收集我们将用于创建一个能够检测照片中是否包含热狗的机器学习模型的数据。
- en: In the second part of the chapter, we will build an app using .NET MAUI and
    ML.NET, where the user can either take a new photo or pick a photo in the photo
    library, analyzing it to see whether it contains a hot dog. The estimated time
    for completing this project is 120 minutes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们将使用 .NET MAUI 和 ML.NET 构建一个应用程序，用户可以拍摄一张新照片或从照片库中选择一张照片，分析它以查看是否包含热狗。完成此项目的估计时间为
    120 分钟。
- en: Getting started
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: We can use either Visual Studio 2022 on a PC or Visual Studio for Mac to do
    this project. To build an iOS app using Visual Studio for PC, you must have a
    Mac connected. If you don’t have access to a Mac at all, you can choose to just
    do the Android and Windows parts of this project.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用安装在 PC 上的 Visual Studio 2022 或 Visual Studio for Mac 来完成这个项目。如果你想在 PC
    上使用 Visual Studio 构建iOS应用程序，你必须连接一台 Mac。如果你根本无法访问 Mac，你可以选择只完成这个项目的 Android 和
    Windows 部分。
- en: Similarly, if you only have a Mac, you can choose to just do the iOS and macOS
    or Android parts of this project.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你只有 Mac，你也可以选择只完成这个项目的 iOS 和 macOS 或 Android 部分。
- en: Building the Hot Dog or Not Hot Dog application using machine learning
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用机器学习构建热狗或非热狗应用程序
- en: Let’s get started! We will first train a model for image classification that
    we can use later in the chapter to decide whether a photo contains a hot dog.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！我们将首先训练一个用于图像分类的模型，我们可以在本章的后面使用它来判断照片中是否包含热狗。
- en: Note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you do not want to go through the effort of training a model, you can download
    a pre-trained model from the following URL: [https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition/tree/main/Chapter12/HotdogOrNot/Resources/Raw](https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition/tree/main/Chapter12/HotdogOrNot/Resources/Raw).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想费心训练模型，你可以从以下网址下载一个预训练的模型：[https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition/tree/main/Chapter12/HotdogOrNot/Resources/Raw](https://github.com/PacktPublishing/MAUI-Projects-3rd-Edition/tree/main/Chapter12/HotdogOrNot/Resources/Raw)。
- en: Training a model
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练模型
- en: To train a model for image classification, we need to collect photos of hot
    dogs and photos that aren’t of hot dogs. Because most items in the world are not
    hot dogs, we need more photos that don’t contain hot dogs. It’s better if the
    photos of hot dogs cover a lot of different hot dog scenarios – with bread, ketchup,
    or mustard. This is so that the model will be able to recognize hot dogs in different
    situations. When we collect photos that aren’t of hot dogs, we also need to have
    a large variety of photos that are both of items that are like hot dogs and that
    are completely different from hot dogs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要训练一个用于图像分类的模型，我们需要收集热狗的照片以及不是热狗的照片。由于世界上大多数物品都不是热狗，我们需要更多不包含热狗的照片。如果热狗的照片涵盖了多种不同的热狗场景——比如有面包、番茄酱或芥末，那就更好了。这样，模型就能在不同的情境中识别出热狗。当我们收集不是热狗的照片时，我们也需要有一大批照片，这些照片既包含类似热狗的物品，也完全不同于热狗。
- en: The model that is in the solution on GitHub was trained with 240 photos, 60
    of which were of hot dogs, and 180 of which were not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上的解决方案中的模型是用 240 张照片训练的，其中 60 张是热狗的照片，180 张不是。
- en: 'Once we have collected all the photos, we will be ready to start training the
    model by following these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收集了所有照片，我们就可以开始按照以下步骤训练模型：
- en: Go to [https://customvision.ai](https://customvision.ai).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://customvision.ai](https://customvision.ai).
- en: Log in and create a new project.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录并创建一个新的项目。
- en: Give the project a name – in our case, `HotDogOrNot`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目起一个名字——在我们的例子中，`HotDogOrNot`。
- en: Select a resource or create a new one by clicking **Create new**. Fill in the
    dialog box, and select **CustomVision.Training** in the **Kind** dropdown.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **创建新资源** 选择一个资源或创建一个新的资源。填写对话框，并在 **类型** 下拉菜单中选择 **CustomVision.Training**。
- en: The project type should be **Classification**, and the classification type should
    be **Multiclass (Single tag** **per image)**.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项目类型应该是**分类**，分类类型应该是**多类（每张图片一个标签**）。
- en: Select **General (compact)** as the domain. We use a compact domain if we want
    to export models and run them on a mobile device.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将域选择为**通用（紧凑）**。如果我们想导出模型并在移动设备上运行，我们使用紧凑域。
- en: 'Click **Create project** to continue, as shown in the following screenshot:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建项目**继续，如下截图所示：
- en: '![Figure 12.1 – Creating a new AI project](img/B19214_12_1.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 创建新的AI项目](img/B19214_12_1.jpg)'
- en: Figure 12.1 – Creating a new AI project
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 创建新的AI项目
- en: Once we have created a project, we can start to upload images and tag them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，我们可以开始上传图片并标记它们。
- en: Tagging images
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记图片
- en: 'The easiest way to get images is to go to Google and search for them. We will
    start by adding photos of hot dogs by following these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 获取图片最简单的方法是去谷歌搜索。我们将通过以下步骤添加热狗的照片：
- en: Click **Add images**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加图片**。
- en: Select the photos of hot dogs that should be uploaded.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择应该上传的热狗照片。
- en: 'Tag the photos with `hotdog`, as shown in the following screenshot:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标记照片为`hotdog`，如下截图所示：
- en: '![Figure 12.2 – Uploading images of hot dogs](img/B19214_12_2.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 上传热狗的图片](img/B19214_12_2.jpg)'
- en: Figure 12.2 – Uploading images of hot dogs
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 上传热狗的图片
- en: 'Once we have uploaded all the photos of hot dogs, it’s time to upload photos
    that aren’t of hot dogs by following the following steps. For best results, we
    should also include photos of objects that look similar to hot dogs but are not:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上传所有热狗照片后，就是时候按照以下步骤上传非热狗的照片了。为了获得最佳结果，我们还应该包括看起来像热狗但实际上不是的照片：
- en: Click the **Add images** button above the gallery of uploaded images.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击上传图片画廊上方的**添加图片**按钮。
- en: Select the photos that aren’t of hot dogs.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择那些不是热狗的照片。
- en: Tag the photos with `Negative`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`Negative`标签标记照片。
- en: 'A Negative tag is used for photos that don’t contain any objects that we have
    created other tags for. In this case, none of the photos we will upload contain
    hot dogs, as can be seen in the following screenshot:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`Negative`标签标记不包含我们创建的其他标签的任何对象的图片。在这种情况下，我们上传的图片中没有任何热狗，如下截图所示：
- en: '![Figure 12.3 – Uploading images that aren’t hot dogs](img/B19214_12_3.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 上传非热狗的图片](img/B19214_12_3.jpg)'
- en: Figure 12.3 – Uploading images that aren’t hot dogs
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 上传非热狗的图片
- en: Once we have uploaded the photos, it’s time to train a model.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上传照片后，就是时候训练一个模型了。
- en: Training a model
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练模型
- en: 'Not all the photos that we are uploading will be used for training; some will
    be used for verification to give us a score about how good the model is. If we
    upload photos in chunks and train the model after each chunk, we will be able
    to see our scores improving. To train a model, click the green **Train** button
    at the top of the page, as illustrated in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上传的并非所有照片都会用于训练；其中一些将用于验证，以给我们一个关于模型好坏的评分。如果我们分批上传照片并在每批之后训练模型，我们将能够看到我们的评分在提高。要训练一个模型，请点击页面顶部的绿色**训练**按钮，如下截图所示：
- en: "![Figure 12.4 – Training the mode\uFEFFl](img/B19214_12_4.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 训练模型](img/B19214_12_4.jpg)'
- en: Figure 12.4 – Training the model
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 训练模型
- en: 'The following screenshot shows the result of a training iteration where the
    precision of the model is **91.7%**:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了训练迭代的结果，其中模型的精确度为**91.7%**：
- en: '![Figure 12.5 – Model verification results](img/B19214_12_5.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – 模型验证结果](img/B19214_12_5.jpg)'
- en: Figure 12.5 – Model verification results
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – 模型验证结果
- en: Once we have trained a model, we will export it so that it can be used on a
    device.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 训练好模型后，我们将导出它，以便在设备上使用。
- en: Exporting a model
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导出模型
- en: 'We can use the APIs if we want to, but to make fast classifications and to
    be able to do this offline, we will add the models to the app packages. Click
    the **Export** button and then on **ONNX** to download the model, as shown in
    the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们可以使用API，但为了快速分类并能够离线操作，我们将模型添加到应用包中。点击**导出**按钮，然后选择**ONNX**下载模型，如下截图所示：
- en: '![Figure 12.6 – Exporting the model](img/B19214_12_6.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – 导出模型](img/B19214_12_6.jpg)'
- en: Figure 12.6 – Exporting the model
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 导出模型
- en: Once we have downloaded the ONNX model, it’s time to build the app.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下载了ONNX模型之后，就是时候构建应用了。
- en: Building the app
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建应用
- en: Our app will use the trained models to classify photos, according to whether
    they are photos of hot dogs. We will use the same ONNX model for all platforms
    in the .NET MAUI app.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将使用训练好的模型来分类照片，根据它们是否是热狗的照片。我们将使用相同的 ONNX 模型在 .NET MAUI 应用程序的所有平台上。
- en: Creating the new project
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新项目
- en: Let’s begin, as follows.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始，如下所示。
- en: 'The first step is to create a new .NET MAUI projec:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个新的 .NET MAUI 项目：
- en: 'Open Visual Studio 2022, and select **Create a** **new project**:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2022，并选择 **创建新项目**：
- en: "![Figure 12.7 – Visual Studio\uFEFF 2022](img/B19214_12_7.jpg)"
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – Visual Studio 2022](img/B19214_12_7.jpg)'
- en: Figure 12.7 – Visual Studio 2022
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – Visual Studio 2022
- en: This will open the **Create a new** **project** wizard.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开 **创建新项目** 向导。
- en: 'In the search field, type in `maui`, and select the **.NET MAUI App** item
    from the list:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入 `maui`，并从列表中选择 **.NET MAUI 应用** 项：
- en: "![Figure 12.8 – Create a new pro\uFEFFject](img/B19214_12_8.jpg)"
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – 创建新项目](img/B19214_12_8.jpg)'
- en: Figure 12.8 – Create a new project
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – 创建新项目
- en: Click **Next**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步**。
- en: 'Complete the next step of the wizard by naming your project. We will call our
    application `HotdogOrNot` in this case. Move on to the next dialog box by clicking
    **Next**, as illustrated in the following screenshot:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过命名项目来完成向导的下一步。在这种情况下，我们将应用程序命名为 `HotdogOrNot`。通过点击 **下一步**，如图所示继续到下一个对话框：
- en: "![Figure 12.9 – Configure your new pro\uFEFFject](img/B19214_12_9.jpg)"
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 – 配置您的项目](img/B19214_12_9.jpg)'
- en: Figure 12.9 – Configure your new project
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – 配置您的项目
- en: The last step will prompt you for the version of .NET Core to support. At the
    time of writing, .NET 6 is available as **Long-Term Support** (**LTS**), and .NET
    7 is available as **Standard Term Support**. For the purposes of this book, we
    will assume that you are using .NET 7.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步将提示您选择支持 .NET Core 的版本。在撰写本文时，.NET 6 可用作为 **长期支持**（**LTS**），而 .NET 7 可用作为
    **标准期限支持**。在本书中，我们假设您正在使用 .NET 7。
- en: '![Figure 12.10 – Additional information](img/B19214_12_10.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – 其他信息](img/B19214_12_10.jpg)'
- en: Figure 12.10 – Additional information
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – 其他信息
- en: Finalize the setup by clicking **Create**, and wait for Visual Studio to create
    the project.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **创建** 完成设置，并等待 Visual Studio 创建项目。
- en: 'If you run the app now, you should see something like the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行应用程序，您应该会看到以下类似的内容：
- en: '![Figure 12.11 – The HotdogOrNot applicaton](img/B19214_12_11.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – HotdogOrNot 应用程序](img/B19214_12_11.jpg)'
- en: Figure 12.11 – The HotdogOrNot applicaton
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – HotdogOrNot 应用程序
- en: Just like that, the app is created. Next, let’s start creating the image classifier.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，应用程序就创建完成了。接下来，让我们开始创建图像分类器。
- en: Classifying images with machine learning
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用机器学习进行图像分类
- en: 'The first thing we will do is add the ONNX ML model to the project, by following
    these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过以下步骤将 ONNX ML 模型添加到项目中：
- en: Extract the `.zip` file that we got from the Custom Vision service.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Custom Vision 服务中获取的 `.zip` 文件进行解压。
- en: Find the `.onnx` file, and rename it `hotdog-or-not.onnx`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `.onnx` 文件，并将其重命名为 `hotdog-or-not.onnx`。
- en: Add it to the `Resources/Raw` folder in the project.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其添加到项目中的 `Resources/Raw` 文件夹。
- en: 'Once we add the file to the project, we are ready to create the implementation
    of the image classifier. The code that we will use for image classification will
    be shared between the .NET MAUI-supported platforms. We can create an interface
    for the classifier by following these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将文件添加到项目中，我们就可以开始创建图像分类器的实现。我们将用于图像分类的代码将在 .NET MAUI 支持的平台上共享。我们可以通过以下步骤创建分类器的接口：
- en: Create a new folder named `ImageClassifier`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `ImageClassifier` 的新文件夹。
- en: Create a new class called `ClassifierOutput` in the `ImageClassifier` folder.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ImageClassifier` 文件夹中创建一个名为 `ClassifierOutput` 的新类。
- en: 'Modify the `ClassifierOutput` class to look like the following:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `ClassifierOutput` 类，使其看起来如下：
- en: '[PRE0]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a new interface called `IClassifier` in the `ImageClassifier` folder.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ImageClassifier` 文件夹中创建一个名为 `IClassifier` 的新接口。
- en: Add a method called `Classify` that returns `ClassifierOutput` and takes `byte[]`
    as an argument.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Classify` 的方法，该方法返回 `ClassifierOutput` 并接受 `byte[]` 作为参数。
- en: 'Your interface should look like the following code block:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的界面应该看起来像以下代码块：
- en: '[PRE1]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we have the interface for the classifier, we can move on to the implementation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了分类器的接口，我们可以继续到实现部分。
- en: Using ML.NET for image classiﬁcation
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 ML.NET 进行图像分类
- en: We are now ready to create the implementation of the `IClassifier` interface.
    Before we jump right into the implementation, let’s take a look at the high-level
    steps that will need to happen so that we understand the flow a little better.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建`IClassifier`接口的实现。在我们直接进入实现之前，让我们看看需要发生的高级步骤，以便我们更好地理解流程。
- en: 'Our trained model, `hotdog-or-not.onnx`, has specific input and output parameters,
    and we will need to convert the image that we want to classify into the input
    format before submitting it to the ML.NET framework. Additionally, we need to
    ensure that the image is in the correct shape before submitting it. The shape
    of the image is defined by the size, width, height, and color format. If the image
    does not match the input format, then it needs to be resized and converted before
    submission, or you will run the risk of the image being classified incorrectly.
    For image classification models that are generated by the Custom Vision service,
    such as the *hotdog-or-not* model, the inputs and outputs look like the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的训练模型`hotdog-or-not.onnx`具有特定的输入和输出参数，在将其提交给ML.NET框架之前，我们需要将我们想要分类的图像转换为输入格式。此外，我们还需要确保在提交之前图像的形状是正确的。图像的形状由大小、宽度、高度和颜色格式定义。如果图像与输入格式不匹配，那么在提交之前需要对其进行调整和转换，否则您将面临图像被错误分类的风险。对于由Custom
    Vision服务生成的图像分类模型，例如*hotdog-or-not*模型，其输入和输出如下所示：
- en: '![Figure 12.12 – Model inputs and outputs from Netron](img/B19214_12_12.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12 – Netron中的模型输入和输出](img/B19214_12_12.jpg)'
- en: Figure 12.12 – Model inputs and outputs from Netron
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – Netron中的模型输入和输出
- en: 'The input to the model is formatted into a multidimensional array named `data`.
    There are four dimensions that make up the array:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的输入被格式化为一个名为`data`的多维数组。该数组由四个维度组成：
- en: '**The image**: The format allows you to submit multiple images at once; however,
    for this app, we will only submit one image at a time'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像**：该格式允许您一次性提交多个图像；然而，对于此应用程序，我们将一次只提交一个图像'
- en: '`0` is blue, `1` is green, and `2` is red'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`是蓝色，`1`是绿色，`2`是红色'
- en: '**The height**: Each index is a position along the *y*, or vertical, axis of
    an image, in the range between 0 and 223'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**：每个索引代表图像的*y*轴或垂直轴上的一个位置，范围在0到223之间'
- en: '**The width**: Each index is a position along the *x*, or horizontal, axis
    of an image, in the range between 0 and 223'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽度**：每个索引代表图像的*x*轴或水平轴上的一个位置，范围在0到223之间'
- en: The value is the color value for that specific image, color, and *x* and *y*
    positions. For example, `data[0,2,64,64]` would be the value of the green channel
    in the first image at a position of 64 pixels from the left and 64 pixels from
    the bottom of the image.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 该值是该特定图像、颜色以及*x*和*y*位置的颜色值。例如，`data[0,2,64,64]`将是第一张图像中从左侧64像素和从底部64像素位置上的绿色通道的值。
- en: To reduce the number of incorrect classifications, we need to scale all the
    images for submission to 224 x 224 pixels and order the color channels properly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少错误分类的数量，我们需要将所有提交的图像缩放到224 x 224像素，并正确排序颜色通道。
- en: 'We can do that by following these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤来完成：
- en: Create a new class called `MLNetClassifier` in the `ImageClassifier` folder
    of the project.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的`ImageClassifier`文件夹中创建一个名为`MLNetClassifier`的新类。
- en: Add the `IClassifier` interface.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`IClassifier`接口。
- en: 'Implement the `Classify` method from the interface, as shown in the following
    code block:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现接口中的`Classify`方法，如下面的代码块所示：
- en: '[PRE2]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So far, we have not referenced any classes from ML.NET. To use the ML.NET APIs,
    we will need to add a reference to the NuGet package, by following these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有从ML.NET引用任何类。要使用ML.NET API，我们需要按照以下步骤添加对NuGet包的引用：
- en: In the project, install the `Microsoft.ML.OnnxRuntime` NuGet package.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中安装`Microsoft.ML.OnnxRuntime` NuGet包。
- en: Accept any license dialog boxes.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受任何许可对话框。
- en: This will install the relevant NuGet packages.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装相关的NuGet包。
- en: 'Now that we are referencing the ML.NET package, we can compile the ONNX ML
    model by following these steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在引用ML.NET包，我们可以按照以下步骤编译ONNX ML模型。
- en: At the top of the `MLNetClassifier` file, add the `using Microsoft.ML.Onnx``Runtime;`
    declaration.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MLNetClassifier`文件顶部添加`using Microsoft.ML.Onnx.Runtime;`声明。
- en: 'In the `MLNetClassifier` class, add the following fields:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MLNetClassifier`类中添加以下字段：
- en: '[PRE3]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `MLNetClassifier` constructor, add the following lines of code to initialize
    the `OnnxRuntime` session, replacing the `// Initialize Model` `here` comment:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MLNetClassifier` 构造函数中，添加以下代码行以初始化 `OnnxRuntime` 会话，替换 `// Initialize Model`
    `这里` 注释：
- en: '[PRE4]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s discuss the preceding code before moving on. The constructor for the
    `MLNetClassifier` class accepts `byte[]` as a parameter. This represents the ML
    model file. `byte[]` is then passed into a new instance of `InferenceSession`,
    which is the main entry point into the ML.NET API. Once the model is loaded into
    the session, we can then inspect the model for certain properties, such as the
    image format (`isBGR`), the color value range (`isRange255`), the input name,
    and the input size. We cache these values in the class fields for use during classification.
    Your `MLNetClassifier` class should now look like the following:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继续之前，让我们讨论一下前面的代码。`MLNetClassifier` 类的构造函数接受 `byte[]` 作为参数。这代表 ML 模型文件。`byte[]`
    然后被传递到一个新的 `InferenceSession` 实例中，这是 ML.NET API 的主要入口点。一旦模型被加载到会话中，我们就可以检查模型的一些属性，例如图像格式（`isBGR`）、颜色值范围（`isRange255`）、输入名称和输入大小。我们将这些值缓存在类字段中，以便在分类期间使用。现在，你的
    `MLNetClassifier` 类应该看起来像以下这样：
- en: '[PRE5]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can now move on to implementing the `Classify` method of the `MLNetClassifier`
    class.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续实现 `MLNetClassifier` 类的 `Classify` 方法。
- en: 'The first step in running a classification is to get the input into the correct
    format. For image classification, that means resizing the image to the right dimensions
    and organizing the color values into the expected format. The image data is then
    loaded into `Tensor`, which is how we pass data into an ML.NET model. The following
    steps will create a method named `LoadInputTensor` to do just that:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 运行分类的第一步是将输入转换为正确的格式。对于图像分类，这意味着将图像调整到正确的尺寸，并将颜色值组织成预期的格式。然后，图像数据被加载到 `Tensor`
    中，这是我们向 ML.NET 模型传递数据的方式。以下步骤将创建一个名为 `LoadInputTensor` 的方法来完成这项工作：
- en: 'Add a new method named `LoadInputTensor` after the `Classify` method in the
    `MLNetClassififier` class. This method will accept four parameters, `byte[]`,
    `int`, and two Booleans, and return a tuple of `Tensor<float>` and `byte[]`. Your
    method should look like the following:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MLNetClassifier` 类中的 `Classify` 方法之后添加一个名为 `LoadInputTensor` 的新方法。此方法将接受四个参数，`byte[]`、`int`
    和两个布尔值，并返回一个 `Tensor<float>` 和 `byte[]` 的元组。你的方法应该看起来像以下这样：
- en: '[PRE6]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inside `LoadInputTensor`, we will create the `return` objects and add the following
    highlighted lines of code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `LoadInputTensor` 内部，我们将创建 `return` 对象并添加以下突出显示的代码行：
- en: '[PRE7]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The next step is to resize the image; we will use the **ImageSharp** NuGet library
    to make this very easy.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一步是调整图像大小；我们将使用 **ImageSharp** NuGet 库使这一过程变得非常简单。
- en: Add the ImageSharp NuGet package to the project.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ImageSharp NuGet 包添加到项目中。
- en: 'Add the following lines of code to resize the image, replacing the `\\ Add
    code` `here` comment:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行以调整图像大小，替换 `\\ Add code` `这里` 注释：
- en: '[PRE8]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code uses the ImageSharp library to load the image from `byte[]`. The image
    is then resized to the size required by the model. We use the `imageSize` field,
    whose value captures the model requirement from the constructor. Finally, we set
    up a call to the `ProcessPixelRows` method that will allow us to manipulate the
    individual pixels in the image.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码使用 ImageSharp 库从 `byte[]` 加载图像。然后，图像被调整到模型所需的大小。我们使用 `imageSize` 字段，其值从构造函数中捕获模型要求。最后，我们设置对
    `ProcessPixelRows` 方法的调用，这将允许我们操作图像中的单个像素。
- en: 'Due to conflicts in naming between .NET MAUI and ImageSharp, we must add a
    declaration that tells the compiler which class we really want to use at the top
    of the file:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 .NET MAUI 和 ImageSharp 之间的命名冲突，我们必须在文件顶部添加一个声明，告诉编译器我们真正想要使用哪个类：
- en: '[PRE9]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next section of code will also need the following highlighted declarations:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一段代码也将需要以下突出显示的声明：
- en: '[PRE10]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To get the input image into the correct color format required by the model,
    we use the `ProcessPixelRows` method from the `ImageSharp` library. This method
    provides a writable buffer for us to manipulate. Use the following highlighted
    code, in place of the `// Add Code here` comment, to iterate over the resized
    image data, putting the color values into the right order and clamping the values
    between 0 and 255, if required:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将输入图像转换为模型所需的正确颜色格式，我们使用 `ImageSharp` 库中的 `ProcessPixelRows` 方法。此方法为我们提供了一个可写缓冲区，我们可以对其进行操作。使用以下突出显示的代码，替换
    `// Add Code here` 注释，来遍历调整大小的图像数据，将颜色值放入正确的顺序，并在需要时将值夹在 0 和 255 之间：
- en: '[PRE11]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What this code does is simple – using the provided source variable, it iterates
    over each row in the image, and each pixel in the row. If the model expects the
    colors to be in the blue, green, and red order, `isBGR` is `true`, and then the
    extracted color values are placed in the input tensor in that order; otherwise,
    they are added to the input tensor in the red, green, and blue order. The tricky
    part here is accessing the correct element for each pixel. The tensor is organized
    into four dimensions, as explained previously. The first element will always be
    zero for this model, since we are only processing one image at a time. The second
    dimension is the color channel, so you will see that change for the red, green,
    and blue color values.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码所做的是简单的——使用提供的源变量，它遍历图像中的每一行，以及行中的每个像素。如果模型期望颜色以蓝色、绿色和红色的顺序出现，`isBGR`为`true`，那么提取的颜色值将按照该顺序放置在输入张量中；否则，它们将以红色、绿色和蓝色的顺序添加到输入张量中。这里棘手的部分是访问每个像素的正确元素。张量组织成四个维度，如前所述。对于这个模型，第一个元素始终为零，因为我们一次只处理一张图像。第二个维度是颜色通道，所以你会看到红色、绿色和蓝色颜色值的变化。
- en: Finally, if the model expects color values to be in the range of 0 to 255, `isRange255`,
    then each color channel is clamped to that range.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，如果模型期望颜色值在0到255的范围内，`isRange255`，则每个颜色通道都会被限制在该范围内。
- en: 'The last thing that we will do is copy the contents of the resized image to
    the `pixelBytes` array so that we can display the image to the user. Add the following
    highlighted code to do this; note that the previous code has been omitted for
    brevity:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要做的最后一件事是将调整大小后的图像内容复制到`pixelBytes`数组中，这样我们就可以向用户显示图像。添加以下高亮代码来完成此操作；注意，为了简洁，之前的代码已被省略：
- en: '[PRE12]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we have written the code to process the image and populate the input
    tensor, we can complete the `Classify` method by following these steps:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了处理图像并填充输入张量的代码，我们可以通过以下步骤完成`Classify`方法：
- en: 'Replace the `// Code will be added here` comment with a call to the `LoadInputTensor`
    method:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`// Code will be added here`注释替换为对`LoadInputTensor`方法的调用：
- en: '[PRE13]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we can run the session, passing in the newly created input tensor and
    capturing the result:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以运行会话，传入新创建的输入张量并捕获结果：
- en: '[PRE14]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We grab the label from the output result, which will be used to determine whether
    this image contains a hotdog or not:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从输出结果中获取标签，这将用来确定这张图像是否包含热狗：
- en: '[PRE15]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we can get the confidence level of the result, which tells us how sure
    the model is of the classification. This will be used when we display the result:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以获取结果的置信度水平，这告诉我们模型对分类有多确定。这将在我们显示结果时使用：
- en: '[PRE16]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we can return the result of the classification using the `ClassifierOutput`
    class:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`ClassifierOutput`类返回分类的结果：
- en: '[PRE17]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The last step is to finish the `MLNetClassifier` implementation by implementing
    the `ClassifierOutput` class. Update your `ClassifierOutput` class by adding the
    highlighted code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是完成`MLNetClassifier`的实现，通过实现`ClassifierOutput`类。通过添加以下高亮代码来更新你的`ClassifierOutput`类：
- en: '[PRE18]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `ClassifierOutput` class is used to encapsulate the four values that will
    be used in the UI and expose them as public properties. The `Create` static method
    is used to create an instance of the class. The `Create` method validates the
    arguments provided and sets the public properties appropriately for use by the
    UI.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClassifierOutput`类用于封装将在UI中使用的四个值，并将它们作为公共属性公开。`Create`静态方法用于创建类的实例。`Create`方法验证提供的参数，并适当地设置公共属性以供UI使用。'
- en: We have now written the code to recognize hot dogs in an image.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经编写了识别图像中热狗的代码。
- en: Now, we can build the user interface for the application and call `MLNetClasssifier`
    to classify an image.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以构建应用程序的用户界面并调用`MLNetClasssifier`来对图像进行分类。
- en: Requesting app permissions
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求应用权限
- en: Before we dive right into building the rest of the app functionality, we need
    to address permissions. This app will have two buttons that the user will use,
    one to take a photo and another to select a photo from the device. This is similar
    to the functionality that we saw in *Chapter 6*, *Building a Photo Gallery App
    Using CollectionView and CarouselView*, where we needed to request permission
    from the user before accessing the camera or device storage. However, we will
    implement the permissions differently than we did in that chapter. Since gaining
    access to the camera and accessing photos on the user’s device requires separate
    permissions, we will request them from each button handler.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入构建应用的其他功能之前，我们需要处理权限问题。这个应用将有两个按钮供用户使用，一个用于拍照，另一个用于从设备中选择照片。这与我们在 *第6章*
    中看到的 *使用 CollectionView 和 CarouselView 构建照片库应用* 的功能类似，在那里我们需要在访问相机或设备存储之前请求用户的权限。然而，我们将以与该章节不同的方式实现权限。由于访问相机和访问用户设备上的照片需要不同的权限，我们将从每个按钮处理程序中请求它们。
- en: 'Follow these steps to add a class to help us with the permission checks:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加一个类来帮助我们进行权限检查：
- en: Create a new class named `AppPermissions` in the project.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中创建一个名为 `AppPermissions` 的新类。
- en: 'Modify the class definition to add a `partial` modifier, and remove the default
    constructor:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改类定义以添加 `partial` 修饰符，并移除默认构造函数：
- en: '[PRE19]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following method to the `AppPermissions` class:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `AppPermissions` 类添加以下方法：
- en: '[PRE20]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `CheckRequiredPermission` method is used to ensure that our app has the
    right permissions before we attempt any operations that might fail if we don’t.
    Its implementation is to call the .NET MAUI `CheckSyncStatus` with the provided
    permission type in `TPermission`. It returns `PermissionStatus`, which is `enum`.
    We are mostly interested in the `Denied` and `Granted` values.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CheckRequiredPermission` 方法用于确保在我们尝试任何可能会因为权限不足而失败的操作之前，我们的应用已经拥有了正确的权限。它的实现是通过调用
    .NET MAUI 的 `CheckSyncStatus` 方法，并使用在 `TPermission` 中提供的权限类型。它返回 `PermissionStatus`，这是一个枚举类型。我们主要关注的是
    `Denied` 和 `Granted` 这两个值。'
- en: 'Add the `CheckAndRequestRequiredPermission` method to the `AppPermissions`
    class:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `AppPermissions` 类添加 `CheckAndRequestRequiredPermission` 方法：
- en: '[PRE21]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `CheckAndRequestRequiredPermission` method handles the intricacies of requesting
    access from the user. The first step is to simply check and see whether the permission
    has already been granted and, if it has, return the status. Next, if we are on
    iOS and the permission has been denied, it cannot be requested again, so you must
    instruct the user on how to grant permission to the app by using the settings
    panel. Android includes in the request behavior the ability to nag the user if
    they have denied access. This behavior is exposed through .NET MAUI with the `ShouldShowRationale`
    method. It will return `false` for any platform that does not support this behavior,
    and on Android, it will return `true` the first time after the user denies access
    and `false` if the user denies it a second time. Finally, we request access to
    the permission from the user. Again, .NET MAUI hides all the platform implementation
    details from us, making checking and requesting access to certain resources very
    straightforward.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CheckAndRequestRequiredPermission` 方法处理请求用户访问的复杂性。第一步是简单地检查权限是否已经被授予，如果是，则返回状态。接下来，如果我们是在
    iOS 上，并且权限已经被拒绝，那么它不能再次请求，因此你必须指导用户如何通过设置面板授予应用权限。Android 在请求行为中包括了一个如果用户拒绝了访问，可以不断提醒用户的功能。这个行为通过
    .NET MAUI 的 `ShouldShowRationale` 方法暴露出来。对于不支持此行为的任何平台，它将返回 `false`，在 Android
    上，如果用户第一次拒绝访问，它将返回 `true`，如果用户第二次拒绝，它将返回 `false`。最后，我们请求用户访问权限。同样，.NET MAUI 隐藏了所有平台实现细节，使得检查和请求访问某些资源变得非常直接。'
- en: Look familiar?
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来熟悉吗？
- en: If the preceding code looks familiar, then you are right. It is based on the
    implementation that is described in the .NET MAUI documentation. You can find
    it at [https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/appmodel/permissions](https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/appmodel/permissions).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的代码看起来熟悉，那么你是对的。它是基于在 .NET MAUI 文档中描述的实现。你可以在 [https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/appmodel/permissions](https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/appmodel/permissions)
    找到它。
- en: Now that we have the shared `AppPermissions` in place, we can start with the
    platform configuration. Before we can use the media picker, however, we need to
    do some configuration for each platform. We will start with Android.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经设置了共享的 `AppPermissions`，我们可以开始进行平台配置。然而，在我们可以使用媒体选择器之前，我们需要为每个平台进行一些配置。我们将从
    Android 开始。
- en: 'In Android API version 33, three new permissions were added to enable read
    access to media files – `ReadMediaImages`, `ReadMediaVideos`, and `ReadMediaAudio`.
    Prior to API version 33, all that was required was the `ReadExternalStorage` permission.
    To access the camera, we will need both `Camera` and `WriteExternalStorage` permissions.
    To properly request the correct permission for the API version of the device,
    open `MauiApplication.cs` in the `Platform/Android` folder and modify it to look
    like the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android API 版本 33 中，增加了三个新权限以启用对媒体文件的读取访问 – `ReadMediaImages`、`ReadMediaVideos`
    和 `ReadMediaAudio`。在 API 版本 33 之前，只需要 `ReadExternalStorage` 权限。要访问相机，我们需要 `Camera`
    和 `WriteExternalStorage` 权限。为了正确请求设备的 API 版本的正确权限，请打开 `Platform/Android` 文件夹中的
    `MauiApplication.cs` 并将其修改如下：
- en: '[PRE22]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: <queries>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <queries>
- en: <intent>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <intent>
- en: <action android:name="android.media.action.IMAGE_CAPTURE" />
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <action android:name="android.media.action.IMAGE_CAPTURE" />
- en: </intent>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: </intent>
- en: </queries>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: </queries>
- en: '[PRE23]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: <key>NSCameraUsageDescription</key>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <key>NSCameraUsageDescription</key>
- en: <string>This app needs access to the camera to take photos.</string>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <string>此应用需要访问相机以拍照。</string>
- en: <key>NSPhotoLibraryUsageDescription</key>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <key>NSPhotoLibraryUsageDescription</key>
- en: <string>This app needs access to photos.</string>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: <string>此应用需要访问照片。</string>
- en: <key>NSMicrophoneUsageDescription</key>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: <key>NSMicrophoneUsageDescription</key>
- en: <string>This app needs access to microphone.</string>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <string>此应用需要访问麦克风。</string>
- en: <key>NSPhotoLibraryAddUsageDescription</key>
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: <key>NSPhotoLibraryAddUsageDescription</key>
- en: <string>This app needs access to the photo gallery.</string>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: <string>此应用需要访问照片库。</string>
- en: '[PRE24]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: <Capabilities>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: <Capabilities>
- en: <rescap:Capability Name="runFullTrust" />
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: <rescap:Capability Name="runFullTrust" />
- en: <DeviceCapability Name="webcam"/>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <DeviceCapability Name="webcam"/>
- en: </Capabilities>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: </Capabilities>
- en: '[PRE25]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: using CommunityToolkit.Mvvm.ComponentModel;
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using CommunityToolkit.Mvvm.ComponentModel;
- en: using HotdogOrNot.ImageClassifier;
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using HotdogOrNot.ImageClassifier;
- en: namespace HotdogOrNot.ViewModels;
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间 HotdogOrNot.ViewModels;
- en: 'public partial class MainViewModel : ObservableObject'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public partial class MainViewModel : ObservableObject'
- en: '{'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: private IClassifier classifier;
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private IClassifier classifier;
- en: public MainViewModel()
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public MainViewModel()
- en: '{'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE26]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Task InitTask() => Task.Run(async () =>
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Task InitTask() => Task.Run(async () =>
- en: '{'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: using var modelStream = await FileSystem.OpenAppPackageFileAsync("hotdog-or-not.onnx");
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using var modelStream = await FileSystem.OpenAppPackageFileAsync("hotdog-or-not.onnx");
- en: using var modelMemoryStream = new MemoryStream();
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using var modelMemoryStream = new MemoryStream();
- en: modelStream.CopyTo(modelMemoryStream);
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: modelStream.CopyTo(modelMemoryStream);
- en: var model = modelMemoryStream.ToArray();
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var model = modelMemoryStream.ToArray();
- en: _classifier = new MLNetClassifier(model);
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _classifier = new MLNetClassifier(model);
- en: '});'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '[PRE27]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'public partial class MainViewModel : ObservableObject'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public partial class MainViewModel : ObservableObject'
- en: '{'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: IClassifier _classifier;
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IClassifier _classifier;
- en: Task initTask;
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Task initTask;
- en: public MainViewModel()
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public MainViewModel()
- en: '{'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: _ = InitAsync();
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _ = InitAsync();
- en: '}'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: public Task InitAsync()
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public Task InitAsync()
- en: '{'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: if (initTask == null || initTask.IsFaulted)
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (initTask == null || initTask.IsFaulted)
- en: initTask = InitTask();
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: initTask = InitTask();
- en: return initTask;
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return initTask;
- en: '}'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: // Code omitted for brevity
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 省略代码以节省篇幅
- en: '}'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: private async Task<byte[]> ConvertPhotoToBytes(FileResult photo)
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 私有异步任务 ConvertPhotoToBytes(FileResult photo)
- en: '{'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: if (photo == null) return Array.Empty<byte>();
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (photo == null) return Array.Empty<byte>();
- en: using var stream = await photo.OpenReadAsync();
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using var stream = await photo.OpenReadAsync();
- en: using MemoryStream memoryStream = new();
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using MemoryStream memoryStream = new();
- en: stream.CopyTo(memoryStream);
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: stream.CopyTo(memoryStream);
- en: return memoryStream.ToArray();
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return memoryStream.ToArray();
- en: '}'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE29]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: namespace HotdogOrNot.Models;
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间 HotdogOrNot.Models;
- en: public class Result
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class Result
- en: '{'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: public bool IsHotdog { get; set; }
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public bool IsHotdog { get; set; }
- en: public float Confidence { get; set; }
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public float Confidence { get; set; }
- en: public byte[] PhotoBytes { get; set; }
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public byte[] PhotoBytes { get; set; }
- en: '}'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE30]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[ObservableProperty]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ObservableProperty]'
- en: private bool isClassifying;
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private bool isClassifying;
- en: '[PRE31]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: async Task<Result> RunClassificationAsync(byte[] imageToClassify)
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: async Task<Result> RunClassificationAsync(byte[] imageToClassify)
- en: '{'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE32]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: try
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: try
- en: '{'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: await InitAsync().ConfigureAwait(false);
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: await InitAsync().ConfigureAwait(false);
- en: var result = _classifier.Classify(imageToClassify);
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var result = _classifier.Classify(imageToClassify);
- en: return new Result()
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return new Result()
- en: '{'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: IsHotdog = result.TopResultLabel == "hotdog",
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IsHotdog = result.TopResultLabel == "hotdog",
- en: Confidence = result.TopResultScore,
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Confidence = result.TopResultScore,
- en: PhotoBytes = result.Image
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PhotoBytes = result.Image
- en: '};'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: catch
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: catch
- en: '[PRE33]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: catch
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: catch
- en: '{'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: return new Result
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return new Result
- en: '{'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: IsHotdog = false,
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IsHotdog = false,
- en: Confidence = 0.0f,
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Confidence = 0.0f,
- en: PhotoBytes = imageToClassify
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PhotoBytes = imageToClassify
- en: '};'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: finally
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: finally
- en: '[PRE34]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: finally
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: finally
- en: '{'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: MainThread.BeginInvokeOnMainThread(() => IsClassifying = false);
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MainThread.BeginInvokeOnMainThread(() => IsClassifying = false);
- en: '}'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE35]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[RelayCommand()]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RelayCommand()]'
- en: public async void TakePhoto()
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public async void TakePhoto()
- en: '{'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: if (MediaPicker.Default.IsCaptureSupported)
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (MediaPicker.Default.IsCaptureSupported)
- en: '{'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: var status = await AppPermissions.CheckAndRequestRequiredPermissionAsync<Permissions.Camera>();
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var status = await AppPermissions.CheckAndRequestRequiredPermissionAsync<Permissions.Camera>();
- en: if (status == PermissionStatus.Granted) {
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (状态 == PermissionStatus.Granted) {
- en: status = await AppPermissions.CheckAndRequestRequiredPermissionAsync<Permissions.StorageWrite>();
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 状态 = await AppPermissions.CheckAndRequestRequiredPermissionAsync<Permissions.StorageWrite>();
- en: '}'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: if (status == PermissionStatus.Granted)
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (状态 == PermissionStatus.Granted)
- en: '{'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: FileResult photo = await MediaPicker.Default.CapturePhotoAsync(new MediaPickerOptions()
    { Title = "Hotdog or Not?" });
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FileResult photo = await MediaPicker.Default.CapturePhotoAsync(new MediaPickerOptions()
    { Title = "热狗或不是热狗?" });
- en: var imageToClassify = await ConvertPhotoToBytes(photo);
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var imageToClassify = await ConvertPhotoToBytes(photo);
- en: var result = await RunClassificationAsync(imageToClassify);
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var result = await RunClassificationAsync(imageToClassify);
- en: await MainThread.InvokeOnMainThreadAsync(async () => await
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: await MainThread.InvokeOnMainThreadAsync(async () => await
- en: Shell.Current.GoToAsync("Result", new Dictionary<string, object>() { { "result",
    result } })
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Shell.Current.GoToAsync("Result", new Dictionary<string, object>() { { "result",
    result } })
- en: );
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE36]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[RelayCommand()]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RelayCommand()]'
- en: public async void PickPhoto()
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public async void PickPhoto()
- en: '{'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: var status = await AppPermissions.CheckAndRequestRequiredPermissionAsync<Permissions.Photos>();
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var status = await AppPermissions.CheckAndRequestRequiredPermissionAsync<Permissions.Photos>();
- en: if (status == PermissionStatus.Granted)
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (状态 == PermissionStatus.Granted)
- en: '{'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: FileResult photo = await MediaPicker.Default.PickPhotoAsync();
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FileResult photo = await MediaPicker.Default.PickPhotoAsync();
- en: var imageToClassify = await ConvertPhotoToBytes(photo);
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var imageToClassify = await ConvertPhotoToBytes(photo);
- en: var result = await RunClassificationAsync(imageToClassify);
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var result = await RunClassificationAsync(imageToClassify);
- en: await MainThread.InvokeOnMainThreadAsync(async () => await
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: await MainThread.InvokeOnMainThreadAsync(async () => await
- en: Shell.Current.GoToAsync("Result", new Dictionary<string, object>() { { "result",
    result } })
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Shell.Current.GoToAsync("Result", new Dictionary<string, object>() { { "result",
    result } })
- en: );
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE37]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: private bool CanExecuteClassification() => !IsClassifying;
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private bool CanExecuteClassification() => !IsClassifying;
- en: '[PRE38]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[RelayCommand(CanExecute = nameof(CanExecuteClassification))]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RelayCommand(CanExecute = nameof(CanExecuteClassification))]'
- en: public async void TakePhoto()
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public async void TakePhoto()
- en: '[PRE39]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[RelayCommand(CanExecute = nameof(CanExecuteClassification))]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RelayCommand(CanExecute = nameof(CanExecuteClassification))]'
- en: public async void PickPhoto()
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public async void PickPhoto()
- en: '[PRE40]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: <ContentPage
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ContentPage
- en: x:Class="HotdogOrNot.Views.MainView"
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x:Class="HotdogOrNot.Views.MainView"
- en: x:DataType="viewModels:MainViewModel"
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x:DataType="viewModels:MainViewModel"
- en: Title="Hotdog or Not hotdog">
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Title="热狗或不是热狗">
- en: <HorizontalStackLayout VerticalOptions="Center" HorizontalOptions="CenterAndExpand">
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <HorizontalStackLayout VerticalOptions="Center" HorizontalOptions="CenterAndExpand">
- en: <Button Text="Take Photo" Command="{Binding TakePhotoCommand}" WidthRequest="150"
    HeightRequest="150" Margin="20" FontSize="Large"/>
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Button Text="拍摄照片" Command="{Binding TakePhotoCommand}" WidthRequest="150"
    HeightRequest="150" Margin="20" FontSize="Large"/>
- en: <Button Text="Pick Photo" Command="{Binding PickPhotoCommand}" WidthRequest="150"
    HeightRequest="150" Margin="20" FontSize="Large"/>
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Button Text="选择照片" Command="{Binding PickPhotoCommand}" WidthRequest="150"
    HeightRequest="150" Margin="20" FontSize="Large"/>
- en: </HorizontalStackLayout>
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </HorizontalStackLayout>
- en: </ContentPage>
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </ContentPage>
- en: '[PRE41]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: public MainView(MainViewModel viewModel)
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public MainView(MainViewModel viewModel)
- en: '{'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: InitializeComponent();
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: InitializeComponent();
- en: BindingContext = viewModel; NavigationPage.SetBackButtonTitle(this, string.Empty);
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BindingContext = viewModel; NavigationPage.SetBackButtonTitle(this, string.Empty);
- en: '}'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE42]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: using CommunityToolkit.Mvvm.ComponentModel;
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 CommunityToolkit.Mvvm.ComponentModel;
- en: using HotdogOrNot.Models;
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using HotdogOrNot.Models;
- en: namespace HotdogOrNot.ViewModels;
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: namespace HotdogOrNot.ViewModels;
- en: 'public partial class ResultViewModel : ObservableObject'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public partial class ResultViewModel : ObservableObject'
- en: '{'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '[ObservableProperty]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ObservableProperty]'
- en: private string title;
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private string title;
- en: '[ObservableProperty]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ObservableProperty]'
- en: private string description;
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private string description;
- en: '[ObservableProperty]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ObservableProperty]'
- en: byte[] photoBytes;
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: byte[] photoBytes;
- en: public ResultViewModel()
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public ResultViewModel()
- en: '{'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE43]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: public void Initialize(Result result)
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public void Initialize(Result result)
- en: '{'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: PhotoBytes = result.PhotoBytes;
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PhotoBytes = result.PhotoBytes;
- en: if (result.IsHotdog && result.Confidence > 0.9)
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (result.IsHotdog && result.Confidence > 0.9)
- en: '{'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: Title = "Hot dog";
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Title = "热狗";
- en: Description = "This is for sure a hot dog";
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Description = "这肯定是一条热狗";
- en: '}'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: else if (result.IsHotdog)
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: else if (result.IsHotdog)
- en: '{'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: Title = "Maybe";
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Title = "可能";
- en: Description = "This is maybe a hot dog";
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Description = "这可能是一条热狗";
- en: '}'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: Title = "Not a hot dog";
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Title = "不是热狗";
- en: Description = "This is not a hot dog";
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Description = "This is not a hot dog";
- en: '}'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE44]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'public partial class ResultViewModel : ObservableObjectvoid method, ApplyQueryAttributes,
    that accepts a parameter named query of the IDictionary<string, object> type:'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public partial class ResultViewModel : ObservableObjectvoid method, ApplyQueryAttributes,
    that accepts a parameter named query of the IDictionary<string, object> type:'
- en: '[PRE45]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: public void ApplyQueryAttributes(IDictionary<string, object> query)
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public void ApplyQueryAttributes(IDictionary<string, object> query)
- en: '{'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: Initialize(query["result"] as Result);
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Initialize(query["result"] as Result);
- en: '}/'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}/'
- en: '[PRE47]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: using System.Globalization;
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using System.Globalization;
- en: namespace HotdogOrNot.Converters;
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: namespace HotdogOrNot.Converters;
- en: 'public class BytesToImageConverter : IvalueConverter'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class BytesToImageConverter : IvalueConverter'
- en: '{'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: public object Convert(object value, Type targetType, object parameter, CultureInfo
    culture)
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public object Convert(object value, Type targetType, object parameter, CultureInfo
    culture)
- en: '{'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: throw new NotImplementedException();
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: throw new NotImplementedException();
- en: '}'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: public object ConvertBack(object value, Type targetType, object parameter, CultureInfo
    culture)
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public object ConvertBack(object value, Type targetType, object parameter, CultureInfo
    culture)
- en: '{'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: throw new NotImplementedException();
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: throw new NotImplementedException();
- en: '}'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE48]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: public object Convert(object value, Type targetType, object parameter, CultureInfo
    culture)
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public object Convert(object value, Type targetType, object parameter, CultureInfo
    culture)
- en: '{'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: if(value == null)
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if(value == null)
- en: '{'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: return null;
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return null;
- en: '}'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: var bytes = (byte[])value;
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var bytes = (byte[])value;
- en: var stream = new MemoryStream(bytes);
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var stream = new MemoryStream(bytes);
- en: return ImageSource.FromStream(() => stream);
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return ImageSource.FromStream(() => stream);
- en: '}'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE49]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: <ContentPage     xmlns:converters="clr-
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ContentPage     xmlns:converters="clr-
- en: namespace:HotdogOrNot.Converters"
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: namespace:HotdogOrNot.Converters"
- en: x:Class="HotdogOrNot.Views.ResultView" Title="{Binding Title}">
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x:Class="HotdogOrNot.Views.ResultView" Title="{Binding Title}">
- en: <ContentPage.Resources>
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ContentPage.Resources>
- en: <converters:BytesToImageConverter x:Key="ToImage" />
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <converters:BytesToImageConverter x:Key="ToImage" />
- en: </ContentPage.Resources>
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </ContentPage.Resources>
- en: <Grid>
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Grid>
- en: <Grid.RowDefinitions>
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Grid.RowDefinitions>
- en: <RowDefinition Height="2*" />
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <RowDefinition Height="2*" />
- en: <RowDefinition Height="*" />
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <RowDefinition Height="*" />
- en: </Grid.RowDefinitions>
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </Grid.RowDefinitions>
- en: <Image Source="{Binding PhotoBytes, Converter=
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Image Source="{Binding PhotoBytes, Converter=
- en: '{StaticResource ToImage}}" Aspect="AspectFill" />'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{StaticResource ToImage}}" Aspect="AspectFill" />'
- en: <Label Grid.Row="1" HorizontalOptions="Center" FontAttributes="Bold" Margin="10"
    Text="{Binding Description}" />
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Label Grid.Row="1" HorizontalOptions="Center" FontAttributes="Bold" Margin="10"
    Text="{Binding Description}" />
- en: </Grid>
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </Grid>
- en: </ContentPage>
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </ContentPage>
- en: '[PRE50]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: public ResultView (ResultViewModel viewModel)
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: public ResultView (ResultViewModel viewModel)
- en: '{'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: InitializeComponent ();
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: InitializeComponent();
- en: BindingContext = viewModel;
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: BindingContext = viewModel;
- en: '}'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE51]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: <?xml version="1.0" encoding="UTF-8" ?>
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <?xml version="1.0" encoding="UTF-8" ?>
- en: <Shell
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <Shell
- en: x:Class="HotdogOrNot.AppShell"
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x:Class="HotdogOrNot.AppShell"
- en: Shell.FlyoutBehavior="Disabled">
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Shell.FlyoutBehavior="Disabled">
- en: <ShellContent
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ShellContent
- en: Title="Home"
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Title="Home"
- en: ContentTemplate="{DataTemplate views:MainView}"
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ContentTemplate="{DataTemplate views:MainView}"
- en: Route="MainView" />
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Route="MainView" />
- en: </Shell>
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </Shell>
- en: '[PRE52]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '#if DEBUG'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#if DEBUG'
- en: builder.Logging.AddDebug();
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Logging.AddDebug();
- en: '#endif'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#endif'
- en: builder.Services.AddTransient<Views.MainView>();
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Services.AddTransient<Views.MainView>();
- en: builder.Services.AddTransient<Views.ResultView>();
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Services.AddTransient<Views.ResultView>();
- en: builder.Services.AddTransient<ViewModels.MainViewModel>();
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Services.AddTransient<ViewModels.MainViewModel>();
- en: builder.Services.AddTransient<ViewModels.ResultViewModel>();
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Services.AddTransient<ViewModels.ResultViewModel>();
- en: return builder.Build();
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return builder.Build();
- en: '[PRE53]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: public AppShell()
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: public AppShell()
- en: '{'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Routing.RegisterRoute("Result", typeof(HotdogOrNot.Views.ResultView));
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: Routing.RegisterRoute("Result", typeof(HotdogOrNot.Views.ResultView));
- en: InitializeComponent();
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: InitializeComponent();
- en: '}'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE54]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
